# SNMP MIB module (SLE-BRIDGE-MIB) expressed in pysnmp data model.
#
# This Python module is designed to be imported and executed by the
# pysnmp library.
#
# See https://www.pysnmp.com/pysnmp for further information.
#
# Notes
# -----
# ASN.1 source file://mibs\dasan\SLE-BRIDGE-MIB
# Produced by pysmi-1.6.2 at Thu Oct  2 11:34:20 2025
# On host DESKTOP-ORUUBP9 platform Windows version 11 by user speterman
# Using Python version 3.12.8 (tags/v3.12.8:2dc476b, Dec  3 2024, 19:30:04) [MSC v.1942 64 bit (AMD64)]

if 'mibBuilder' not in globals():
    import sys

    sys.stderr.write(__doc__)
    sys.exit(1)

# Import base ASN.1 objects even if this MIB does not use it

(Integer,
 OctetString,
 ObjectIdentifier) = mibBuilder.importSymbols(
    "ASN1",
    "Integer",
    "OctetString",
    "ObjectIdentifier")

(NamedValues,) = mibBuilder.importSymbols(
    "ASN1-ENUMERATION",
    "NamedValues")
(ConstraintsIntersection,
 ConstraintsUnion,
 SingleValueConstraint,
 ValueRangeConstraint,
 ValueSizeConstraint) = mibBuilder.importSymbols(
    "ASN1-REFINEMENT",
    "ConstraintsIntersection",
    "ConstraintsUnion",
    "SingleValueConstraint",
    "ValueRangeConstraint",
    "ValueSizeConstraint")

# Import SMI symbols from the MIBs this MIB depends on

(sleMgmt,) = mibBuilder.importSymbols(
    "DASAN-SMI",
    "sleMgmt")

(AddressFamilyNumbers,) = mibBuilder.importSymbols(
    "IANA-ADDRESS-FAMILY-NUMBERS-MIB",
    "AddressFamilyNumbers")

(InterfaceIndex,) = mibBuilder.importSymbols(
    "IF-MIB",
    "InterfaceIndex")

(InetAddressIPv6,) = mibBuilder.importSymbols(
    "INET-ADDRESS-MIB",
    "InetAddressIPv6")

(SleControlRequestResultType,
 SleControlStatusType) = mibBuilder.importSymbols(
    "SLE-TC-MIB",
    "SleControlRequestResultType",
    "SleControlStatusType")

(ModuleCompliance,
 NotificationGroup,
 ObjectGroup) = mibBuilder.importSymbols(
    "SNMPv2-CONF",
    "ModuleCompliance",
    "NotificationGroup",
    "ObjectGroup")

(Bits,
 Bits,
 Counter32,
 Counter64,
 Gauge32,
 Integer32,
 IpAddress,
 ModuleIdentity,
 MibIdentifier,
 NotificationType,
 ObjectIdentity,
 MibScalar,
 MibTable,
 MibTableRow,
 MibTableColumn,
 TimeTicks,
 Unsigned32,
 iso) = mibBuilder.importSymbols(
    "SNMPv2-SMI",
    "Bits",
    "Bits",
    "Counter32",
    "Counter64",
    "Gauge32",
    "Integer32",
    "IpAddress",
    "ModuleIdentity",
    "MibIdentifier",
    "NotificationType",
    "ObjectIdentity",
    "MibScalar",
    "MibTable",
    "MibTableRow",
    "MibTableColumn",
    "TimeTicks",
    "Unsigned32",
    "iso")

(DisplayString,
 MacAddress,
 PhysAddress,
 TextualConvention,
 TimeStamp,
 TruthValue) = mibBuilder.importSymbols(
    "SNMPv2-TC",
    "DisplayString",
    "MacAddress",
    "PhysAddress",
    "TextualConvention",
    "TimeStamp",
    "TruthValue")


# MODULE-IDENTITY

sleBridge = ModuleIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3)
)
if mibBuilder.loadTexts:
    sleBridge.setRevisions(
        ("2004-12-08 08:40",)
    )


# Types definitions



class SleIgmpConfControlRequestType(Integer32):
    """Custom type SleIgmpConfControlRequestType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("setIgmpConfProfile", 1)
    )





class SleIgmpMcastControlRequestType(Integer32):
    """Custom type SleIgmpMcastControlRequestType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createIgmpStaticMcast", 1),
          ("destroyIgmpStaticMcast", 2))
    )





class Boolean(Integer32):
    """Custom type Boolean based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )





class SleLldpManAddrIfSubType(Integer32):
    """Custom type SleLldpManAddrIfSubType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 1),
          ("ifIndex", 2),
          ("systemPortNumber", 3))
    )





class SleLldpSysCapType(Bits):
    """Custom type SleLldpSysCapType based on Bits"""
    namedValues = NamedValues(
        *(("other", 0),
          ("repeater", 1),
          ("bridge", 2),
          ("wlanAccessPoint", 3),
          ("router", 4),
          ("telephone", 5),
          ("docsisCableDevice", 6),
          ("stationOnly", 7))
    )



# TEXTUAL-CONVENTIONS



# MIB Managed Objects in the order of their OIDs

_SleBridgeBase_ObjectIdentity = ObjectIdentity
sleBridgeBase = _SleBridgeBase_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1)
)
_SleBridgeBaseInfo_ObjectIdentity = ObjectIdentity
sleBridgeBaseInfo = _SleBridgeBaseInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1)
)


class _SleBridgeMacAddress_Type(OctetString):
    """Custom type sleBridgeMacAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )
    fixed_length = 6


_SleBridgeMacAddress_Type.__name__ = "OctetString"
_SleBridgeMacAddress_Object = MibScalar
sleBridgeMacAddress = _SleBridgeMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 1),
    _SleBridgeMacAddress_Type()
)
sleBridgeMacAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeMacAddress.setStatus("current")


class _SleBridgePortNum_Type(Integer32):
    """Custom type sleBridgePortNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 256),
    )


_SleBridgePortNum_Type.__name__ = "Integer32"
_SleBridgePortNum_Object = MibScalar
sleBridgePortNum = _SleBridgePortNum_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 2),
    _SleBridgePortNum_Type()
)
sleBridgePortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortNum.setStatus("current")


class _SleBridgeLagMaxId_Type(Integer32):
    """Custom type sleBridgeLagMaxId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 14),
    )


_SleBridgeLagMaxId_Type.__name__ = "Integer32"
_SleBridgeLagMaxId_Object = MibScalar
sleBridgeLagMaxId = _SleBridgeLagMaxId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 3),
    _SleBridgeLagMaxId_Type()
)
sleBridgeLagMaxId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeLagMaxId.setStatus("current")


class _SleBridgeLacpActivity_Type(Integer32):
    """Custom type sleBridgeLacpActivity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SleBridgeLacpActivity_Type.__name__ = "Integer32"
_SleBridgeLacpActivity_Object = MibScalar
sleBridgeLacpActivity = _SleBridgeLacpActivity_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 4),
    _SleBridgeLacpActivity_Type()
)
sleBridgeLacpActivity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeLacpActivity.setStatus("current")


class _SleBridgeLacpPriority_Type(Integer32):
    """Custom type sleBridgeLacpPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleBridgeLacpPriority_Type.__name__ = "Integer32"
_SleBridgeLacpPriority_Object = MibScalar
sleBridgeLacpPriority = _SleBridgeLacpPriority_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 5),
    _SleBridgeLacpPriority_Type()
)
sleBridgeLacpPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeLacpPriority.setStatus("current")


class _SleBridgeVlanSupportMode_Type(Bits):
    """Custom type sleBridgeVlanSupportMode based on Bits"""
    namedValues = NamedValues(
        *(("portbased", 0),
          ("protocolbased", 1),
          ("subnetbased", 2))
    )

_SleBridgeVlanSupportMode_Type.__name__ = "Bits"
_SleBridgeVlanSupportMode_Object = MibScalar
sleBridgeVlanSupportMode = _SleBridgeVlanSupportMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 6),
    _SleBridgeVlanSupportMode_Type()
)
sleBridgeVlanSupportMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeVlanSupportMode.setStatus("current")


class _SleBridgeVlanMaxNum_Type(Integer32):
    """Custom type sleBridgeVlanMaxNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4096),
    )


_SleBridgeVlanMaxNum_Type.__name__ = "Integer32"
_SleBridgeVlanMaxNum_Object = MibScalar
sleBridgeVlanMaxNum = _SleBridgeVlanMaxNum_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 7),
    _SleBridgeVlanMaxNum_Type()
)
sleBridgeVlanMaxNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeVlanMaxNum.setStatus("current")


class _SleBridgeDoubleTagProtoId_Type(Integer32):
    """Custom type sleBridgeDoubleTagProtoId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(33024,
              37120)
        )
    )
    namedValues = NamedValues(
        *(("dtag8100", 33024),
          ("dtag9100", 37120))
    )


_SleBridgeDoubleTagProtoId_Type.__name__ = "Integer32"
_SleBridgeDoubleTagProtoId_Object = MibScalar
sleBridgeDoubleTagProtoId = _SleBridgeDoubleTagProtoId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 8),
    _SleBridgeDoubleTagProtoId_Type()
)
sleBridgeDoubleTagProtoId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeDoubleTagProtoId.setStatus("current")


class _SleBridgeMirrorMode_Type(Integer32):
    """Custom type sleBridgeMirrorMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SleBridgeMirrorMode_Type.__name__ = "Integer32"
_SleBridgeMirrorMode_Object = MibScalar
sleBridgeMirrorMode = _SleBridgeMirrorMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 9),
    _SleBridgeMirrorMode_Type()
)
sleBridgeMirrorMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeMirrorMode.setStatus("current")


class _SleBridgeMirrorMonitorPortId_Type(Integer32):
    """Custom type sleBridgeMirrorMonitorPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_SleBridgeMirrorMonitorPortId_Type.__name__ = "Integer32"
_SleBridgeMirrorMonitorPortId_Object = MibScalar
sleBridgeMirrorMonitorPortId = _SleBridgeMirrorMonitorPortId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 10),
    _SleBridgeMirrorMonitorPortId_Type()
)
sleBridgeMirrorMonitorPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeMirrorMonitorPortId.setStatus("current")


class _SleBridgeMirroredIngressPorts_Type(OctetString):
    """Custom type sleBridgeMirroredIngressPorts based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_SleBridgeMirroredIngressPorts_Type.__name__ = "OctetString"
_SleBridgeMirroredIngressPorts_Object = MibScalar
sleBridgeMirroredIngressPorts = _SleBridgeMirroredIngressPorts_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 11),
    _SleBridgeMirroredIngressPorts_Type()
)
sleBridgeMirroredIngressPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeMirroredIngressPorts.setStatus("current")


class _SleBridgeMirroredEgressPorts_Type(OctetString):
    """Custom type sleBridgeMirroredEgressPorts based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_SleBridgeMirroredEgressPorts_Type.__name__ = "OctetString"
_SleBridgeMirroredEgressPorts_Object = MibScalar
sleBridgeMirroredEgressPorts = _SleBridgeMirroredEgressPorts_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 12),
    _SleBridgeMirroredEgressPorts_Type()
)
sleBridgeMirroredEgressPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeMirroredEgressPorts.setStatus("current")


class _SleBridgeMaxLearnPerUnit_Type(Integer32):
    """Custom type sleBridgeMaxLearnPerUnit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, 2147483647),
    )


_SleBridgeMaxLearnPerUnit_Type.__name__ = "Integer32"
_SleBridgeMaxLearnPerUnit_Object = MibScalar
sleBridgeMaxLearnPerUnit = _SleBridgeMaxLearnPerUnit_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 13),
    _SleBridgeMaxLearnPerUnit_Type()
)
sleBridgeMaxLearnPerUnit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeMaxLearnPerUnit.setStatus("current")


class _SleBridgeFdbAgeingTime_Type(Integer32):
    """Custom type sleBridgeFdbAgeingTime based on Integer32"""
    defaultValue = 300

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 21474830),
    )


_SleBridgeFdbAgeingTime_Type.__name__ = "Integer32"
_SleBridgeFdbAgeingTime_Object = MibScalar
sleBridgeFdbAgeingTime = _SleBridgeFdbAgeingTime_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 14),
    _SleBridgeFdbAgeingTime_Type()
)
sleBridgeFdbAgeingTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeFdbAgeingTime.setStatus("current")
_SleBridgeFdbMaxEntries_Type = Integer32
_SleBridgeFdbMaxEntries_Object = MibScalar
sleBridgeFdbMaxEntries = _SleBridgeFdbMaxEntries_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 15),
    _SleBridgeFdbMaxEntries_Type()
)
sleBridgeFdbMaxEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeFdbMaxEntries.setStatus("current")
_SleBridgeFdbCurrentEntries_Type = Integer32
_SleBridgeFdbCurrentEntries_Object = MibScalar
sleBridgeFdbCurrentEntries = _SleBridgeFdbCurrentEntries_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 16),
    _SleBridgeFdbCurrentEntries_Type()
)
sleBridgeFdbCurrentEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeFdbCurrentEntries.setStatus("current")


class _SleBridgeStackMode_Type(Integer32):
    """Custom type sleBridgeStackMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("master", 1),
          ("slave", 2))
    )


_SleBridgeStackMode_Type.__name__ = "Integer32"
_SleBridgeStackMode_Object = MibScalar
sleBridgeStackMode = _SleBridgeStackMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 17),
    _SleBridgeStackMode_Type()
)
sleBridgeStackMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeStackMode.setStatus("current")


class _SleBridgeStackDeviceName_Type(OctetString):
    """Custom type sleBridgeStackDeviceName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_SleBridgeStackDeviceName_Type.__name__ = "OctetString"
_SleBridgeStackDeviceName_Object = MibScalar
sleBridgeStackDeviceName = _SleBridgeStackDeviceName_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 18),
    _SleBridgeStackDeviceName_Type()
)
sleBridgeStackDeviceName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeStackDeviceName.setStatus("current")


class _SleBridgeStackNodeId_Type(Integer32):
    """Custom type sleBridgeStackNodeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65534),
    )


_SleBridgeStackNodeId_Type.__name__ = "Integer32"
_SleBridgeStackNodeId_Object = MibScalar
sleBridgeStackNodeId = _SleBridgeStackNodeId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 19),
    _SleBridgeStackNodeId_Type()
)
sleBridgeStackNodeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeStackNodeId.setStatus("current")


class _SleBridgeLldpMessageTxInterval_Type(Integer32):
    """Custom type sleBridgeLldpMessageTxInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 32768),
    )


_SleBridgeLldpMessageTxInterval_Type.__name__ = "Integer32"
_SleBridgeLldpMessageTxInterval_Object = MibScalar
sleBridgeLldpMessageTxInterval = _SleBridgeLldpMessageTxInterval_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 20),
    _SleBridgeLldpMessageTxInterval_Type()
)
sleBridgeLldpMessageTxInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeLldpMessageTxInterval.setStatus("current")


class _SleBridgeLldpTxHoldMultiplier_Type(Integer32):
    """Custom type sleBridgeLldpTxHoldMultiplier based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 10),
    )


_SleBridgeLldpTxHoldMultiplier_Type.__name__ = "Integer32"
_SleBridgeLldpTxHoldMultiplier_Object = MibScalar
sleBridgeLldpTxHoldMultiplier = _SleBridgeLldpTxHoldMultiplier_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 21),
    _SleBridgeLldpTxHoldMultiplier_Type()
)
sleBridgeLldpTxHoldMultiplier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeLldpTxHoldMultiplier.setStatus("current")


class _SleBridgeLldpReinitDelay_Type(Integer32):
    """Custom type sleBridgeLldpReinitDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_SleBridgeLldpReinitDelay_Type.__name__ = "Integer32"
_SleBridgeLldpReinitDelay_Object = MibScalar
sleBridgeLldpReinitDelay = _SleBridgeLldpReinitDelay_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 22),
    _SleBridgeLldpReinitDelay_Type()
)
sleBridgeLldpReinitDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeLldpReinitDelay.setStatus("current")


class _SleBridgeLldpTxDelay_Type(Integer32):
    """Custom type sleBridgeLldpTxDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8192),
    )


_SleBridgeLldpTxDelay_Type.__name__ = "Integer32"
_SleBridgeLldpTxDelay_Object = MibScalar
sleBridgeLldpTxDelay = _SleBridgeLldpTxDelay_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 23),
    _SleBridgeLldpTxDelay_Type()
)
sleBridgeLldpTxDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeLldpTxDelay.setStatus("current")


class _SleBridgeLldpNotificationInterval_Type(Integer32):
    """Custom type sleBridgeLldpNotificationInterval based on Integer32"""
    defaultValue = 5

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 3600),
    )


_SleBridgeLldpNotificationInterval_Type.__name__ = "Integer32"
_SleBridgeLldpNotificationInterval_Object = MibScalar
sleBridgeLldpNotificationInterval = _SleBridgeLldpNotificationInterval_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 24),
    _SleBridgeLldpNotificationInterval_Type()
)
sleBridgeLldpNotificationInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeLldpNotificationInterval.setStatus("current")
_SleBridgeLldpStatsRemTablesLastChangeTime_Type = TimeTicks
_SleBridgeLldpStatsRemTablesLastChangeTime_Object = MibScalar
sleBridgeLldpStatsRemTablesLastChangeTime = _SleBridgeLldpStatsRemTablesLastChangeTime_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 25),
    _SleBridgeLldpStatsRemTablesLastChangeTime_Type()
)
sleBridgeLldpStatsRemTablesLastChangeTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeLldpStatsRemTablesLastChangeTime.setStatus("current")
_SleBridgeLldpStatsRemTablesInserts_Type = Integer32
_SleBridgeLldpStatsRemTablesInserts_Object = MibScalar
sleBridgeLldpStatsRemTablesInserts = _SleBridgeLldpStatsRemTablesInserts_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 26),
    _SleBridgeLldpStatsRemTablesInserts_Type()
)
sleBridgeLldpStatsRemTablesInserts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeLldpStatsRemTablesInserts.setStatus("current")
_SleBridgeLldpStatsRemTablesDeletes_Type = Integer32
_SleBridgeLldpStatsRemTablesDeletes_Object = MibScalar
sleBridgeLldpStatsRemTablesDeletes = _SleBridgeLldpStatsRemTablesDeletes_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 27),
    _SleBridgeLldpStatsRemTablesDeletes_Type()
)
sleBridgeLldpStatsRemTablesDeletes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeLldpStatsRemTablesDeletes.setStatus("current")
_SleBridgeLldpStatsRemTablesDrops_Type = Integer32
_SleBridgeLldpStatsRemTablesDrops_Object = MibScalar
sleBridgeLldpStatsRemTablesDrops = _SleBridgeLldpStatsRemTablesDrops_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 28),
    _SleBridgeLldpStatsRemTablesDrops_Type()
)
sleBridgeLldpStatsRemTablesDrops.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeLldpStatsRemTablesDrops.setStatus("current")
_SleBridgeLldpStatsRemTablesAgeouts_Type = Integer32
_SleBridgeLldpStatsRemTablesAgeouts_Object = MibScalar
sleBridgeLldpStatsRemTablesAgeouts = _SleBridgeLldpStatsRemTablesAgeouts_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 29),
    _SleBridgeLldpStatsRemTablesAgeouts_Type()
)
sleBridgeLldpStatsRemTablesAgeouts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeLldpStatsRemTablesAgeouts.setStatus("current")


class _SleBridgeLldpLocalChassisIdSubtype_Type(Integer32):
    """Custom type sleBridgeLldpLocalChassisIdSubtype based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("chassisComponent", 1),
          ("interfaceAlias", 2),
          ("portComponent", 3),
          ("macAddress", 4),
          ("networkAddress", 5),
          ("interfaceName", 6),
          ("local", 7))
    )


_SleBridgeLldpLocalChassisIdSubtype_Type.__name__ = "Integer32"
_SleBridgeLldpLocalChassisIdSubtype_Object = MibScalar
sleBridgeLldpLocalChassisIdSubtype = _SleBridgeLldpLocalChassisIdSubtype_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 30),
    _SleBridgeLldpLocalChassisIdSubtype_Type()
)
sleBridgeLldpLocalChassisIdSubtype.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeLldpLocalChassisIdSubtype.setStatus("current")


class _SleBridgeLldpLocalChassisId_Type(OctetString):
    """Custom type sleBridgeLldpLocalChassisId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 255),
    )


_SleBridgeLldpLocalChassisId_Type.__name__ = "OctetString"
_SleBridgeLldpLocalChassisId_Object = MibScalar
sleBridgeLldpLocalChassisId = _SleBridgeLldpLocalChassisId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 31),
    _SleBridgeLldpLocalChassisId_Type()
)
sleBridgeLldpLocalChassisId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeLldpLocalChassisId.setStatus("current")


class _SleBridgeLldpLocalSysName_Type(OctetString):
    """Custom type sleBridgeLldpLocalSysName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_SleBridgeLldpLocalSysName_Type.__name__ = "OctetString"
_SleBridgeLldpLocalSysName_Object = MibScalar
sleBridgeLldpLocalSysName = _SleBridgeLldpLocalSysName_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 32),
    _SleBridgeLldpLocalSysName_Type()
)
sleBridgeLldpLocalSysName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeLldpLocalSysName.setStatus("current")


class _SleBridgeLldpLocalSysDes_Type(OctetString):
    """Custom type sleBridgeLldpLocalSysDes based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_SleBridgeLldpLocalSysDes_Type.__name__ = "OctetString"
_SleBridgeLldpLocalSysDes_Object = MibScalar
sleBridgeLldpLocalSysDes = _SleBridgeLldpLocalSysDes_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 33),
    _SleBridgeLldpLocalSysDes_Type()
)
sleBridgeLldpLocalSysDes.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeLldpLocalSysDes.setStatus("current")


class _SleBridgeLldpLocalSysCapSupported_Type(Bits):
    """Custom type sleBridgeLldpLocalSysCapSupported based on Bits"""
    namedValues = NamedValues(
        *(("other", 0),
          ("repeater", 1),
          ("bridge", 2),
          ("wlanAccessPoint", 3),
          ("router", 4),
          ("telephone", 5),
          ("docsisCableDevice", 6),
          ("stationOnly", 7))
    )

_SleBridgeLldpLocalSysCapSupported_Type.__name__ = "Bits"
_SleBridgeLldpLocalSysCapSupported_Object = MibScalar
sleBridgeLldpLocalSysCapSupported = _SleBridgeLldpLocalSysCapSupported_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 34),
    _SleBridgeLldpLocalSysCapSupported_Type()
)
sleBridgeLldpLocalSysCapSupported.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeLldpLocalSysCapSupported.setStatus("current")


class _SleBridgeLldpLocalSysCapEnabled_Type(Bits):
    """Custom type sleBridgeLldpLocalSysCapEnabled based on Bits"""
    namedValues = NamedValues(
        *(("other", 0),
          ("repeater", 1),
          ("bridge", 2),
          ("wlanAccessPoint", 3),
          ("router", 4),
          ("telephone", 5),
          ("docsisCableDevice", 6),
          ("stationOnly", 7))
    )

_SleBridgeLldpLocalSysCapEnabled_Type.__name__ = "Bits"
_SleBridgeLldpLocalSysCapEnabled_Object = MibScalar
sleBridgeLldpLocalSysCapEnabled = _SleBridgeLldpLocalSysCapEnabled_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 35),
    _SleBridgeLldpLocalSysCapEnabled_Type()
)
sleBridgeLldpLocalSysCapEnabled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeLldpLocalSysCapEnabled.setStatus("current")


class _SleBridgeStpActivity_Type(Integer32):
    """Custom type sleBridgeStpActivity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SleBridgeStpActivity_Type.__name__ = "Integer32"
_SleBridgeStpActivity_Object = MibScalar
sleBridgeStpActivity = _SleBridgeStpActivity_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 36),
    _SleBridgeStpActivity_Type()
)
sleBridgeStpActivity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeStpActivity.setStatus("current")


class _SleBridgeStpSelfLoop_Type(Integer32):
    """Custom type sleBridgeStpSelfLoop based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgeStpSelfLoop_Type.__name__ = "Integer32"
_SleBridgeStpSelfLoop_Object = MibScalar
sleBridgeStpSelfLoop = _SleBridgeStpSelfLoop_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 37),
    _SleBridgeStpSelfLoop_Type()
)
sleBridgeStpSelfLoop.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeStpSelfLoop.setStatus("current")


class _SleBridgePvlanOnePromPortEnable_Type(Integer32):
    """Custom type sleBridgePvlanOnePromPortEnable based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgePvlanOnePromPortEnable_Type.__name__ = "Integer32"
_SleBridgePvlanOnePromPortEnable_Object = MibScalar
sleBridgePvlanOnePromPortEnable = _SleBridgePvlanOnePromPortEnable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 38),
    _SleBridgePvlanOnePromPortEnable_Type()
)
sleBridgePvlanOnePromPortEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePvlanOnePromPortEnable.setStatus("current")


class _SleBridgeTcpSyncookie_Type(Integer32):
    """Custom type sleBridgeTcpSyncookie based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgeTcpSyncookie_Type.__name__ = "Integer32"
_SleBridgeTcpSyncookie_Object = MibScalar
sleBridgeTcpSyncookie = _SleBridgeTcpSyncookie_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 39),
    _SleBridgeTcpSyncookie_Type()
)
sleBridgeTcpSyncookie.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeTcpSyncookie.setStatus("current")


class _SleBridgeTcpIgnoreRstUnknown_Type(Integer32):
    """Custom type sleBridgeTcpIgnoreRstUnknown based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgeTcpIgnoreRstUnknown_Type.__name__ = "Integer32"
_SleBridgeTcpIgnoreRstUnknown_Object = MibScalar
sleBridgeTcpIgnoreRstUnknown = _SleBridgeTcpIgnoreRstUnknown_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 40),
    _SleBridgeTcpIgnoreRstUnknown_Type()
)
sleBridgeTcpIgnoreRstUnknown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeTcpIgnoreRstUnknown.setStatus("current")


class _SleBridgeAutoInterfaceActivation_Type(Integer32):
    """Custom type sleBridgeAutoInterfaceActivation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgeAutoInterfaceActivation_Type.__name__ = "Integer32"
_SleBridgeAutoInterfaceActivation_Object = MibScalar
sleBridgeAutoInterfaceActivation = _SleBridgeAutoInterfaceActivation_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 41),
    _SleBridgeAutoInterfaceActivation_Type()
)
sleBridgeAutoInterfaceActivation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeAutoInterfaceActivation.setStatus("current")


class _SleBridgeLoopDetectStatus_Type(Integer32):
    """Custom type sleBridgeLoopDetectStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgeLoopDetectStatus_Type.__name__ = "Integer32"
_SleBridgeLoopDetectStatus_Object = MibScalar
sleBridgeLoopDetectStatus = _SleBridgeLoopDetectStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 42),
    _SleBridgeLoopDetectStatus_Type()
)
sleBridgeLoopDetectStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeLoopDetectStatus.setStatus("current")


class _SleBridgeLoopDetectPacketType_Type(Integer32):
    """Custom type sleBridgeLoopDetectPacketType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("laa", 1),
          ("system", 2))
    )


_SleBridgeLoopDetectPacketType_Type.__name__ = "Integer32"
_SleBridgeLoopDetectPacketType_Object = MibScalar
sleBridgeLoopDetectPacketType = _SleBridgeLoopDetectPacketType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 43),
    _SleBridgeLoopDetectPacketType_Type()
)
sleBridgeLoopDetectPacketType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeLoopDetectPacketType.setStatus("current")


class _SleBridgePvlanPromSelectMode_Type(Integer32):
    """Custom type sleBridgePvlanPromSelectMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("normal", 0),
          ("manual", 1),
          ("stp", 2),
          ("erp", 3))
    )


_SleBridgePvlanPromSelectMode_Type.__name__ = "Integer32"
_SleBridgePvlanPromSelectMode_Object = MibScalar
sleBridgePvlanPromSelectMode = _SleBridgePvlanPromSelectMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 44),
    _SleBridgePvlanPromSelectMode_Type()
)
sleBridgePvlanPromSelectMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePvlanPromSelectMode.setStatus("current")
_SleBridgePvlanPromiscuousPorts_Type = OctetString
_SleBridgePvlanPromiscuousPorts_Object = MibScalar
sleBridgePvlanPromiscuousPorts = _SleBridgePvlanPromiscuousPorts_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 45),
    _SleBridgePvlanPromiscuousPorts_Type()
)
sleBridgePvlanPromiscuousPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePvlanPromiscuousPorts.setStatus("current")


class _SleBridgeInnerTagProtoId_Type(Integer32):
    """Custom type sleBridgeInnerTagProtoId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(33024,
              37120)
        )
    )
    namedValues = NamedValues(
        *(("dtag8100", 33024),
          ("dtag9100", 37120))
    )


_SleBridgeInnerTagProtoId_Type.__name__ = "Integer32"
_SleBridgeInnerTagProtoId_Object = MibScalar
sleBridgeInnerTagProtoId = _SleBridgeInnerTagProtoId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 46),
    _SleBridgeInnerTagProtoId_Type()
)
sleBridgeInnerTagProtoId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInnerTagProtoId.setStatus("current")


class _SleBridgeUnknownMcastBlockAllPorts_Type(Integer32):
    """Custom type sleBridgeUnknownMcastBlockAllPorts based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgeUnknownMcastBlockAllPorts_Type.__name__ = "Integer32"
_SleBridgeUnknownMcastBlockAllPorts_Object = MibScalar
sleBridgeUnknownMcastBlockAllPorts = _SleBridgeUnknownMcastBlockAllPorts_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 47),
    _SleBridgeUnknownMcastBlockAllPorts_Type()
)
sleBridgeUnknownMcastBlockAllPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeUnknownMcastBlockAllPorts.setStatus("current")


class _SleBridgeEcmpHashType_Type(Integer32):
    """Custom type sleBridgeEcmpHashType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("sip", 1),
          ("sipDip", 2))
    )


_SleBridgeEcmpHashType_Type.__name__ = "Integer32"
_SleBridgeEcmpHashType_Object = MibScalar
sleBridgeEcmpHashType = _SleBridgeEcmpHashType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 48),
    _SleBridgeEcmpHashType_Type()
)
sleBridgeEcmpHashType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeEcmpHashType.setStatus("current")


class _SleBridgeTcpSynguard_Type(Integer32):
    """Custom type sleBridgeTcpSynguard based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_SleBridgeTcpSynguard_Type.__name__ = "Integer32"
_SleBridgeTcpSynguard_Object = MibScalar
sleBridgeTcpSynguard = _SleBridgeTcpSynguard_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 49),
    _SleBridgeTcpSynguard_Type()
)
sleBridgeTcpSynguard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeTcpSynguard.setStatus("current")


class _SleBridgeOuterTagProtoId_Type(Integer32):
    """Custom type sleBridgeOuterTagProtoId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(33024,
              37120)
        )
    )
    namedValues = NamedValues(
        *(("dtag8100", 33024),
          ("dtag9100", 37120))
    )


_SleBridgeOuterTagProtoId_Type.__name__ = "Integer32"
_SleBridgeOuterTagProtoId_Object = MibScalar
sleBridgeOuterTagProtoId = _SleBridgeOuterTagProtoId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 50),
    _SleBridgeOuterTagProtoId_Type()
)
sleBridgeOuterTagProtoId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeOuterTagProtoId.setStatus("current")


class _SleBridgeMacAntiSpoofing_Type(Integer32):
    """Custom type sleBridgeMacAntiSpoofing based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgeMacAntiSpoofing_Type.__name__ = "Integer32"
_SleBridgeMacAntiSpoofing_Object = MibScalar
sleBridgeMacAntiSpoofing = _SleBridgeMacAntiSpoofing_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 51),
    _SleBridgeMacAntiSpoofing_Type()
)
sleBridgeMacAntiSpoofing.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeMacAntiSpoofing.setStatus("current")


class _SleBridgeMacReplace_Type(Integer32):
    """Custom type sleBridgeMacReplace based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgeMacReplace_Type.__name__ = "Integer32"
_SleBridgeMacReplace_Object = MibScalar
sleBridgeMacReplace = _SleBridgeMacReplace_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 52),
    _SleBridgeMacReplace_Type()
)
sleBridgeMacReplace.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeMacReplace.setStatus("current")


class _SleBridgeStormControlBcast_Type(Integer32):
    """Custom type sleBridgeStormControlBcast based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 65535),
    )


_SleBridgeStormControlBcast_Type.__name__ = "Integer32"
_SleBridgeStormControlBcast_Object = MibScalar
sleBridgeStormControlBcast = _SleBridgeStormControlBcast_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 53),
    _SleBridgeStormControlBcast_Type()
)
sleBridgeStormControlBcast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeStormControlBcast.setStatus("current")


class _SleBridgeStormControlDLF_Type(Integer32):
    """Custom type sleBridgeStormControlDLF based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 65535),
    )


_SleBridgeStormControlDLF_Type.__name__ = "Integer32"
_SleBridgeStormControlDLF_Object = MibScalar
sleBridgeStormControlDLF = _SleBridgeStormControlDLF_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 54),
    _SleBridgeStormControlDLF_Type()
)
sleBridgeStormControlDLF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeStormControlDLF.setStatus("current")


class _SleBridgeStormControlMulticast_Type(Integer32):
    """Custom type sleBridgeStormControlMulticast based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 65535),
    )


_SleBridgeStormControlMulticast_Type.__name__ = "Integer32"
_SleBridgeStormControlMulticast_Object = MibScalar
sleBridgeStormControlMulticast = _SleBridgeStormControlMulticast_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 55),
    _SleBridgeStormControlMulticast_Type()
)
sleBridgeStormControlMulticast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeStormControlMulticast.setStatus("current")


class _SleBridgeMacLearningMode_Type(Integer32):
    """Custom type sleBridgeMacLearningMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("cml", 1),
          ("sml", 2),
          ("cmlsml", 3))
    )


_SleBridgeMacLearningMode_Type.__name__ = "Integer32"
_SleBridgeMacLearningMode_Object = MibScalar
sleBridgeMacLearningMode = _SleBridgeMacLearningMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 56),
    _SleBridgeMacLearningMode_Type()
)
sleBridgeMacLearningMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeMacLearningMode.setStatus("current")


class _SleBridgeLagGlobalDistMode_Type(Integer32):
    """Custom type sleBridgeLagGlobalDistMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("srcmac", 1),
          ("dstmac", 2),
          ("srcdstmac", 3),
          ("srcip", 4),
          ("dstip", 5),
          ("srcdstip", 6),
          ("srcdstl4", 7),
          ("label", 8))
    )


_SleBridgeLagGlobalDistMode_Type.__name__ = "Integer32"
_SleBridgeLagGlobalDistMode_Object = MibScalar
sleBridgeLagGlobalDistMode = _SleBridgeLagGlobalDistMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 57),
    _SleBridgeLagGlobalDistMode_Type()
)
sleBridgeLagGlobalDistMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeLagGlobalDistMode.setStatus("current")
_SleBridgeMultiPortLlcfPortA_Type = OctetString
_SleBridgeMultiPortLlcfPortA_Object = MibScalar
sleBridgeMultiPortLlcfPortA = _SleBridgeMultiPortLlcfPortA_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 58),
    _SleBridgeMultiPortLlcfPortA_Type()
)
sleBridgeMultiPortLlcfPortA.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeMultiPortLlcfPortA.setStatus("current")
_SleBridgeMultiPortLlcfPortB_Type = OctetString
_SleBridgeMultiPortLlcfPortB_Object = MibScalar
sleBridgeMultiPortLlcfPortB = _SleBridgeMultiPortLlcfPortB_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 59),
    _SleBridgeMultiPortLlcfPortB_Type()
)
sleBridgeMultiPortLlcfPortB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeMultiPortLlcfPortB.setStatus("current")
_SleBridgeMultiPortLlcfUpPortC_Type = OctetString
_SleBridgeMultiPortLlcfUpPortC_Object = MibScalar
sleBridgeMultiPortLlcfUpPortC = _SleBridgeMultiPortLlcfUpPortC_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 60),
    _SleBridgeMultiPortLlcfUpPortC_Type()
)
sleBridgeMultiPortLlcfUpPortC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeMultiPortLlcfUpPortC.setStatus("current")
_SleBridgeMultiPortLlcfDownPortC_Type = OctetString
_SleBridgeMultiPortLlcfDownPortC_Object = MibScalar
sleBridgeMultiPortLlcfDownPortC = _SleBridgeMultiPortLlcfDownPortC_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 61),
    _SleBridgeMultiPortLlcfDownPortC_Type()
)
sleBridgeMultiPortLlcfDownPortC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeMultiPortLlcfDownPortC.setStatus("current")


class _SleBridgeMultiPortLlcfPortAStatus_Type(Integer32):
    """Custom type sleBridgeMultiPortLlcfPortAStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("loc", 1),
          ("disable", 2),
          ("forcedToDown", 3))
    )


_SleBridgeMultiPortLlcfPortAStatus_Type.__name__ = "Integer32"
_SleBridgeMultiPortLlcfPortAStatus_Object = MibScalar
sleBridgeMultiPortLlcfPortAStatus = _SleBridgeMultiPortLlcfPortAStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 62),
    _SleBridgeMultiPortLlcfPortAStatus_Type()
)
sleBridgeMultiPortLlcfPortAStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeMultiPortLlcfPortAStatus.setStatus("current")


class _SleBridgeMultiPortLlcfPortBStatus_Type(Integer32):
    """Custom type sleBridgeMultiPortLlcfPortBStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("loc", 1),
          ("disable", 2),
          ("forcedToDown", 3))
    )


_SleBridgeMultiPortLlcfPortBStatus_Type.__name__ = "Integer32"
_SleBridgeMultiPortLlcfPortBStatus_Object = MibScalar
sleBridgeMultiPortLlcfPortBStatus = _SleBridgeMultiPortLlcfPortBStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 63),
    _SleBridgeMultiPortLlcfPortBStatus_Type()
)
sleBridgeMultiPortLlcfPortBStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeMultiPortLlcfPortBStatus.setStatus("current")


class _SleBridgeMultiPortLlcfUpPortCStatus_Type(Integer32):
    """Custom type sleBridgeMultiPortLlcfUpPortCStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("loc", 1),
          ("disable", 2),
          ("forcedToDown", 3))
    )


_SleBridgeMultiPortLlcfUpPortCStatus_Type.__name__ = "Integer32"
_SleBridgeMultiPortLlcfUpPortCStatus_Object = MibScalar
sleBridgeMultiPortLlcfUpPortCStatus = _SleBridgeMultiPortLlcfUpPortCStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 64),
    _SleBridgeMultiPortLlcfUpPortCStatus_Type()
)
sleBridgeMultiPortLlcfUpPortCStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeMultiPortLlcfUpPortCStatus.setStatus("current")


class _SleBridgeMultiPortLlcfDownPortCStatus_Type(Integer32):
    """Custom type sleBridgeMultiPortLlcfDownPortCStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("loc", 1),
          ("disable", 2),
          ("forcedToDown", 3))
    )


_SleBridgeMultiPortLlcfDownPortCStatus_Type.__name__ = "Integer32"
_SleBridgeMultiPortLlcfDownPortCStatus_Object = MibScalar
sleBridgeMultiPortLlcfDownPortCStatus = _SleBridgeMultiPortLlcfDownPortCStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 65),
    _SleBridgeMultiPortLlcfDownPortCStatus_Type()
)
sleBridgeMultiPortLlcfDownPortCStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeMultiPortLlcfDownPortCStatus.setStatus("current")


class _SleBridgeMultiPortLlcfTimer_Type(Integer32):
    """Custom type sleBridgeMultiPortLlcfTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1000, 10000),
    )


_SleBridgeMultiPortLlcfTimer_Type.__name__ = "Integer32"
_SleBridgeMultiPortLlcfTimer_Object = MibScalar
sleBridgeMultiPortLlcfTimer = _SleBridgeMultiPortLlcfTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 66),
    _SleBridgeMultiPortLlcfTimer_Type()
)
sleBridgeMultiPortLlcfTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeMultiPortLlcfTimer.setStatus("current")


class _SleBridgeChannelGroupLacpMaxBundle_Type(Integer32):
    """Custom type sleBridgeChannelGroupLacpMaxBundle based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_SleBridgeChannelGroupLacpMaxBundle_Type.__name__ = "Integer32"
_SleBridgeChannelGroupLacpMaxBundle_Object = MibScalar
sleBridgeChannelGroupLacpMaxBundle = _SleBridgeChannelGroupLacpMaxBundle_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 67),
    _SleBridgeChannelGroupLacpMaxBundle_Type()
)
sleBridgeChannelGroupLacpMaxBundle.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeChannelGroupLacpMaxBundle.setStatus("current")


class _SleBridgeChannelGroupSystemPriority_Type(Integer32):
    """Custom type sleBridgeChannelGroupSystemPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleBridgeChannelGroupSystemPriority_Type.__name__ = "Integer32"
_SleBridgeChannelGroupSystemPriority_Object = MibScalar
sleBridgeChannelGroupSystemPriority = _SleBridgeChannelGroupSystemPriority_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 68),
    _SleBridgeChannelGroupSystemPriority_Type()
)
sleBridgeChannelGroupSystemPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeChannelGroupSystemPriority.setStatus("current")


class _SleBridgeId_Type(Integer32):
    """Custom type sleBridgeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_SleBridgeId_Type.__name__ = "Integer32"
_SleBridgeId_Object = MibScalar
sleBridgeId = _SleBridgeId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 69),
    _SleBridgeId_Type()
)
sleBridgeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeId.setStatus("current")


class _SleBridgeProtocol_Type(Integer32):
    """Custom type sleBridgeProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("enableBridgeProtocolIeee", 1),
          ("enableBridgeProtocolIeeeVlan", 2),
          ("enableBridgeProtocolProviderMstp", 3),
          ("enableBridgeProtocolProviderMstpEdge", 4))
    )


_SleBridgeProtocol_Type.__name__ = "Integer32"
_SleBridgeProtocol_Object = MibScalar
sleBridgeProtocol = _SleBridgeProtocol_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 1, 70),
    _SleBridgeProtocol_Type()
)
sleBridgeProtocol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeProtocol.setStatus("current")
_SleBridgeBaseControl_ObjectIdentity = ObjectIdentity
sleBridgeBaseControl = _SleBridgeBaseControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2)
)


class _SleBridgeControlRequest_Type(Integer32):
    """Custom type sleBridgeControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32)
        )
    )
    namedValues = NamedValues(
        *(("setLacpProfile", 1),
          ("setDoubleTagProtoId", 2),
          ("setMirrorProfile", 3),
          ("setMaxLearnPerUnit", 4),
          ("setFdbAgeingTime", 5),
          ("setStackProfile", 6),
          ("setLldpProfile", 7),
          ("setStpProfile", 8),
          ("setTcpSyncookie", 9),
          ("setTcpIgnoreRstUnknown", 10),
          ("setAutoInterfaceActivation", 11),
          ("setLoopDetectProfile", 12),
          ("setPvlanPromSelectMode", 13),
          ("setInnerTagProtoId", 14),
          ("setUnknownMcastBlockAllPorts", 15),
          ("setEcmpHashType", 16),
          ("setTcpSynguard", 17),
          ("setOuterTagProtoId", 18),
          ("setMacAntiSpoofing", 19),
          ("setMacReplace", 20),
          ("setStormControl", 21),
          ("setMacLearningMode", 22),
          ("setLagGlobalDistMode", 23),
          ("setMultiPortLlcf", 24),
          ("delMultiPortLlcf", 25),
          ("setMultiPortLlcfTimer", 26),
          ("setChannelGroupLacpMaxBundle", 27),
          ("delChannelGroupLacpMaxBundle", 28),
          ("setChannelGroupSystemPriority", 29),
          ("delChannelGroupSystemPriority", 30),
          ("setBridgeProtocol", 31),
          ("unsetBridgeProtocol", 32))
    )


_SleBridgeControlRequest_Type.__name__ = "Integer32"
_SleBridgeControlRequest_Object = MibScalar
sleBridgeControlRequest = _SleBridgeControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 1),
    _SleBridgeControlRequest_Type()
)
sleBridgeControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlRequest.setStatus("current")
_SleBridgeControlStatus_Type = SleControlStatusType
_SleBridgeControlStatus_Object = MibScalar
sleBridgeControlStatus = _SleBridgeControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 2),
    _SleBridgeControlStatus_Type()
)
sleBridgeControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeControlStatus.setStatus("current")
_SleBridgeControlTimer_Type = Gauge32
_SleBridgeControlTimer_Object = MibScalar
sleBridgeControlTimer = _SleBridgeControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 3),
    _SleBridgeControlTimer_Type()
)
sleBridgeControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlTimer.setStatus("current")
_SleBridgeControlTimeStamp_Type = TimeTicks
_SleBridgeControlTimeStamp_Object = MibScalar
sleBridgeControlTimeStamp = _SleBridgeControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 4),
    _SleBridgeControlTimeStamp_Type()
)
sleBridgeControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeControlTimeStamp.setStatus("current")
_SleBridgeControlReqResult_Type = SleControlRequestResultType
_SleBridgeControlReqResult_Object = MibScalar
sleBridgeControlReqResult = _SleBridgeControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 5),
    _SleBridgeControlReqResult_Type()
)
sleBridgeControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeControlReqResult.setStatus("current")


class _SleBridgeControlLacpActivity_Type(Integer32):
    """Custom type sleBridgeControlLacpActivity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SleBridgeControlLacpActivity_Type.__name__ = "Integer32"
_SleBridgeControlLacpActivity_Object = MibScalar
sleBridgeControlLacpActivity = _SleBridgeControlLacpActivity_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 6),
    _SleBridgeControlLacpActivity_Type()
)
sleBridgeControlLacpActivity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlLacpActivity.setStatus("current")


class _SleBridgeControlLacpPriority_Type(Integer32):
    """Custom type sleBridgeControlLacpPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleBridgeControlLacpPriority_Type.__name__ = "Integer32"
_SleBridgeControlLacpPriority_Object = MibScalar
sleBridgeControlLacpPriority = _SleBridgeControlLacpPriority_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 7),
    _SleBridgeControlLacpPriority_Type()
)
sleBridgeControlLacpPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlLacpPriority.setStatus("current")
_SleBridgeControlDoubleTagProtoId_Type = Integer32
_SleBridgeControlDoubleTagProtoId_Object = MibScalar
sleBridgeControlDoubleTagProtoId = _SleBridgeControlDoubleTagProtoId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 8),
    _SleBridgeControlDoubleTagProtoId_Type()
)
sleBridgeControlDoubleTagProtoId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlDoubleTagProtoId.setStatus("current")


class _SleBridgeControlMirrorMode_Type(Integer32):
    """Custom type sleBridgeControlMirrorMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SleBridgeControlMirrorMode_Type.__name__ = "Integer32"
_SleBridgeControlMirrorMode_Object = MibScalar
sleBridgeControlMirrorMode = _SleBridgeControlMirrorMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 9),
    _SleBridgeControlMirrorMode_Type()
)
sleBridgeControlMirrorMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlMirrorMode.setStatus("current")


class _SleBridgeControlMirrorMonitorPortId_Type(Integer32):
    """Custom type sleBridgeControlMirrorMonitorPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_SleBridgeControlMirrorMonitorPortId_Type.__name__ = "Integer32"
_SleBridgeControlMirrorMonitorPortId_Object = MibScalar
sleBridgeControlMirrorMonitorPortId = _SleBridgeControlMirrorMonitorPortId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 10),
    _SleBridgeControlMirrorMonitorPortId_Type()
)
sleBridgeControlMirrorMonitorPortId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlMirrorMonitorPortId.setStatus("current")


class _SleBridgeControlMaxLearnPerUnit_Type(Integer32):
    """Custom type sleBridgeControlMaxLearnPerUnit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, 2147483647),
    )


_SleBridgeControlMaxLearnPerUnit_Type.__name__ = "Integer32"
_SleBridgeControlMaxLearnPerUnit_Object = MibScalar
sleBridgeControlMaxLearnPerUnit = _SleBridgeControlMaxLearnPerUnit_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 11),
    _SleBridgeControlMaxLearnPerUnit_Type()
)
sleBridgeControlMaxLearnPerUnit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlMaxLearnPerUnit.setStatus("current")


class _SleBridgeControlFdbAgeingTime_Type(Unsigned32):
    """Custom type sleBridgeControlFdbAgeingTime based on Unsigned32"""
    defaultValue = 300

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 21474830),
    )


_SleBridgeControlFdbAgeingTime_Type.__name__ = "Unsigned32"
_SleBridgeControlFdbAgeingTime_Object = MibScalar
sleBridgeControlFdbAgeingTime = _SleBridgeControlFdbAgeingTime_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 12),
    _SleBridgeControlFdbAgeingTime_Type()
)
sleBridgeControlFdbAgeingTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlFdbAgeingTime.setStatus("current")


class _SleBridgeControlStackMode_Type(Integer32):
    """Custom type sleBridgeControlStackMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("master", 1),
          ("slave", 2))
    )


_SleBridgeControlStackMode_Type.__name__ = "Integer32"
_SleBridgeControlStackMode_Object = MibScalar
sleBridgeControlStackMode = _SleBridgeControlStackMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 13),
    _SleBridgeControlStackMode_Type()
)
sleBridgeControlStackMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlStackMode.setStatus("current")


class _SleBridgeControlStackDeviceName_Type(OctetString):
    """Custom type sleBridgeControlStackDeviceName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_SleBridgeControlStackDeviceName_Type.__name__ = "OctetString"
_SleBridgeControlStackDeviceName_Object = MibScalar
sleBridgeControlStackDeviceName = _SleBridgeControlStackDeviceName_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 14),
    _SleBridgeControlStackDeviceName_Type()
)
sleBridgeControlStackDeviceName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlStackDeviceName.setStatus("current")


class _SleBridgeControlLldpMessageTxInterval_Type(Integer32):
    """Custom type sleBridgeControlLldpMessageTxInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 32767),
    )


_SleBridgeControlLldpMessageTxInterval_Type.__name__ = "Integer32"
_SleBridgeControlLldpMessageTxInterval_Object = MibScalar
sleBridgeControlLldpMessageTxInterval = _SleBridgeControlLldpMessageTxInterval_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 15),
    _SleBridgeControlLldpMessageTxInterval_Type()
)
sleBridgeControlLldpMessageTxInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlLldpMessageTxInterval.setStatus("current")


class _SleBridgeControlLldpTxHoldMultiplier_Type(Integer32):
    """Custom type sleBridgeControlLldpTxHoldMultiplier based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 10),
    )


_SleBridgeControlLldpTxHoldMultiplier_Type.__name__ = "Integer32"
_SleBridgeControlLldpTxHoldMultiplier_Object = MibScalar
sleBridgeControlLldpTxHoldMultiplier = _SleBridgeControlLldpTxHoldMultiplier_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 16),
    _SleBridgeControlLldpTxHoldMultiplier_Type()
)
sleBridgeControlLldpTxHoldMultiplier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlLldpTxHoldMultiplier.setStatus("current")


class _SleBridgeControlLldpReinitDelay_Type(Integer32):
    """Custom type sleBridgeControlLldpReinitDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_SleBridgeControlLldpReinitDelay_Type.__name__ = "Integer32"
_SleBridgeControlLldpReinitDelay_Object = MibScalar
sleBridgeControlLldpReinitDelay = _SleBridgeControlLldpReinitDelay_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 17),
    _SleBridgeControlLldpReinitDelay_Type()
)
sleBridgeControlLldpReinitDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlLldpReinitDelay.setStatus("current")


class _SleBridgeControlLldpTxDelay_Type(Integer32):
    """Custom type sleBridgeControlLldpTxDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8192),
    )


_SleBridgeControlLldpTxDelay_Type.__name__ = "Integer32"
_SleBridgeControlLldpTxDelay_Object = MibScalar
sleBridgeControlLldpTxDelay = _SleBridgeControlLldpTxDelay_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 18),
    _SleBridgeControlLldpTxDelay_Type()
)
sleBridgeControlLldpTxDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlLldpTxDelay.setStatus("current")


class _SleBridgeControlLldpNotificationInterval_Type(Integer32):
    """Custom type sleBridgeControlLldpNotificationInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 3600),
    )


_SleBridgeControlLldpNotificationInterval_Type.__name__ = "Integer32"
_SleBridgeControlLldpNotificationInterval_Object = MibScalar
sleBridgeControlLldpNotificationInterval = _SleBridgeControlLldpNotificationInterval_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 19),
    _SleBridgeControlLldpNotificationInterval_Type()
)
sleBridgeControlLldpNotificationInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlLldpNotificationInterval.setStatus("current")


class _SleBridgeControlStpActivity_Type(Integer32):
    """Custom type sleBridgeControlStpActivity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SleBridgeControlStpActivity_Type.__name__ = "Integer32"
_SleBridgeControlStpActivity_Object = MibScalar
sleBridgeControlStpActivity = _SleBridgeControlStpActivity_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 20),
    _SleBridgeControlStpActivity_Type()
)
sleBridgeControlStpActivity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlStpActivity.setStatus("current")


class _SleBridgeControlStpSelfLoop_Type(Integer32):
    """Custom type sleBridgeControlStpSelfLoop based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgeControlStpSelfLoop_Type.__name__ = "Integer32"
_SleBridgeControlStpSelfLoop_Object = MibScalar
sleBridgeControlStpSelfLoop = _SleBridgeControlStpSelfLoop_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 21),
    _SleBridgeControlStpSelfLoop_Type()
)
sleBridgeControlStpSelfLoop.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlStpSelfLoop.setStatus("current")


class _SleBridgeControlTcpSyncookie_Type(Integer32):
    """Custom type sleBridgeControlTcpSyncookie based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgeControlTcpSyncookie_Type.__name__ = "Integer32"
_SleBridgeControlTcpSyncookie_Object = MibScalar
sleBridgeControlTcpSyncookie = _SleBridgeControlTcpSyncookie_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 22),
    _SleBridgeControlTcpSyncookie_Type()
)
sleBridgeControlTcpSyncookie.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlTcpSyncookie.setStatus("current")


class _SleBridgeControlTcpIgnoreRstUnknown_Type(Integer32):
    """Custom type sleBridgeControlTcpIgnoreRstUnknown based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgeControlTcpIgnoreRstUnknown_Type.__name__ = "Integer32"
_SleBridgeControlTcpIgnoreRstUnknown_Object = MibScalar
sleBridgeControlTcpIgnoreRstUnknown = _SleBridgeControlTcpIgnoreRstUnknown_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 23),
    _SleBridgeControlTcpIgnoreRstUnknown_Type()
)
sleBridgeControlTcpIgnoreRstUnknown.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlTcpIgnoreRstUnknown.setStatus("current")


class _SleBridgeControlAutoInterfaceActivation_Type(Integer32):
    """Custom type sleBridgeControlAutoInterfaceActivation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgeControlAutoInterfaceActivation_Type.__name__ = "Integer32"
_SleBridgeControlAutoInterfaceActivation_Object = MibScalar
sleBridgeControlAutoInterfaceActivation = _SleBridgeControlAutoInterfaceActivation_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 24),
    _SleBridgeControlAutoInterfaceActivation_Type()
)
sleBridgeControlAutoInterfaceActivation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlAutoInterfaceActivation.setStatus("current")


class _SleBridgeControlLoopDetectStatus_Type(Integer32):
    """Custom type sleBridgeControlLoopDetectStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgeControlLoopDetectStatus_Type.__name__ = "Integer32"
_SleBridgeControlLoopDetectStatus_Object = MibScalar
sleBridgeControlLoopDetectStatus = _SleBridgeControlLoopDetectStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 25),
    _SleBridgeControlLoopDetectStatus_Type()
)
sleBridgeControlLoopDetectStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlLoopDetectStatus.setStatus("current")


class _SleBridgeControlLoopDetectPacketType_Type(Integer32):
    """Custom type sleBridgeControlLoopDetectPacketType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("laa", 1),
          ("system", 2))
    )


_SleBridgeControlLoopDetectPacketType_Type.__name__ = "Integer32"
_SleBridgeControlLoopDetectPacketType_Object = MibScalar
sleBridgeControlLoopDetectPacketType = _SleBridgeControlLoopDetectPacketType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 26),
    _SleBridgeControlLoopDetectPacketType_Type()
)
sleBridgeControlLoopDetectPacketType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlLoopDetectPacketType.setStatus("current")


class _SleBridgeControlPvlanPromSelectMode_Type(Integer32):
    """Custom type sleBridgeControlPvlanPromSelectMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("normal", 0),
          ("manual", 1),
          ("stp", 2),
          ("erp", 3))
    )


_SleBridgeControlPvlanPromSelectMode_Type.__name__ = "Integer32"
_SleBridgeControlPvlanPromSelectMode_Object = MibScalar
sleBridgeControlPvlanPromSelectMode = _SleBridgeControlPvlanPromSelectMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 27),
    _SleBridgeControlPvlanPromSelectMode_Type()
)
sleBridgeControlPvlanPromSelectMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlPvlanPromSelectMode.setStatus("current")
_SleBridgeControlPvlanPromiscuousPorts_Type = OctetString
_SleBridgeControlPvlanPromiscuousPorts_Object = MibScalar
sleBridgeControlPvlanPromiscuousPorts = _SleBridgeControlPvlanPromiscuousPorts_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 28),
    _SleBridgeControlPvlanPromiscuousPorts_Type()
)
sleBridgeControlPvlanPromiscuousPorts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlPvlanPromiscuousPorts.setStatus("current")


class _SleBridgeControlInnerTagProtoId_Type(Integer32):
    """Custom type sleBridgeControlInnerTagProtoId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(33024,
              37120)
        )
    )
    namedValues = NamedValues(
        *(("dtag8100", 33024),
          ("dtag9100", 37120))
    )


_SleBridgeControlInnerTagProtoId_Type.__name__ = "Integer32"
_SleBridgeControlInnerTagProtoId_Object = MibScalar
sleBridgeControlInnerTagProtoId = _SleBridgeControlInnerTagProtoId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 29),
    _SleBridgeControlInnerTagProtoId_Type()
)
sleBridgeControlInnerTagProtoId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlInnerTagProtoId.setStatus("current")


class _SleBridgeControlUnknownMcastBlockAllPorts_Type(Integer32):
    """Custom type sleBridgeControlUnknownMcastBlockAllPorts based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgeControlUnknownMcastBlockAllPorts_Type.__name__ = "Integer32"
_SleBridgeControlUnknownMcastBlockAllPorts_Object = MibScalar
sleBridgeControlUnknownMcastBlockAllPorts = _SleBridgeControlUnknownMcastBlockAllPorts_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 30),
    _SleBridgeControlUnknownMcastBlockAllPorts_Type()
)
sleBridgeControlUnknownMcastBlockAllPorts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlUnknownMcastBlockAllPorts.setStatus("current")


class _SleBridgeControlEcmpHashType_Type(Integer32):
    """Custom type sleBridgeControlEcmpHashType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("sip", 1),
          ("sipDip", 2))
    )


_SleBridgeControlEcmpHashType_Type.__name__ = "Integer32"
_SleBridgeControlEcmpHashType_Object = MibScalar
sleBridgeControlEcmpHashType = _SleBridgeControlEcmpHashType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 31),
    _SleBridgeControlEcmpHashType_Type()
)
sleBridgeControlEcmpHashType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlEcmpHashType.setStatus("current")


class _SleBridgeControlTcpSynguard_Type(Integer32):
    """Custom type sleBridgeControlTcpSynguard based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_SleBridgeControlTcpSynguard_Type.__name__ = "Integer32"
_SleBridgeControlTcpSynguard_Object = MibScalar
sleBridgeControlTcpSynguard = _SleBridgeControlTcpSynguard_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 32),
    _SleBridgeControlTcpSynguard_Type()
)
sleBridgeControlTcpSynguard.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlTcpSynguard.setStatus("current")


class _SleBridgeControlOuterTagProtoId_Type(Integer32):
    """Custom type sleBridgeControlOuterTagProtoId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(33024,
              37120)
        )
    )
    namedValues = NamedValues(
        *(("dtag8100", 33024),
          ("dtag9100", 37120))
    )


_SleBridgeControlOuterTagProtoId_Type.__name__ = "Integer32"
_SleBridgeControlOuterTagProtoId_Object = MibScalar
sleBridgeControlOuterTagProtoId = _SleBridgeControlOuterTagProtoId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 33),
    _SleBridgeControlOuterTagProtoId_Type()
)
sleBridgeControlOuterTagProtoId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlOuterTagProtoId.setStatus("current")


class _SleBridgeControlMacAntiSpoofing_Type(Integer32):
    """Custom type sleBridgeControlMacAntiSpoofing based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgeControlMacAntiSpoofing_Type.__name__ = "Integer32"
_SleBridgeControlMacAntiSpoofing_Object = MibScalar
sleBridgeControlMacAntiSpoofing = _SleBridgeControlMacAntiSpoofing_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 34),
    _SleBridgeControlMacAntiSpoofing_Type()
)
sleBridgeControlMacAntiSpoofing.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlMacAntiSpoofing.setStatus("current")


class _SleBridgeControlMacReplace_Type(Integer32):
    """Custom type sleBridgeControlMacReplace based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgeControlMacReplace_Type.__name__ = "Integer32"
_SleBridgeControlMacReplace_Object = MibScalar
sleBridgeControlMacReplace = _SleBridgeControlMacReplace_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 35),
    _SleBridgeControlMacReplace_Type()
)
sleBridgeControlMacReplace.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlMacReplace.setStatus("current")


class _SleBridgeControlStormControlBcast_Type(Integer32):
    """Custom type sleBridgeControlStormControlBcast based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 65535),
    )


_SleBridgeControlStormControlBcast_Type.__name__ = "Integer32"
_SleBridgeControlStormControlBcast_Object = MibScalar
sleBridgeControlStormControlBcast = _SleBridgeControlStormControlBcast_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 36),
    _SleBridgeControlStormControlBcast_Type()
)
sleBridgeControlStormControlBcast.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlStormControlBcast.setStatus("current")


class _SleBridgeControlStormControlDLF_Type(Integer32):
    """Custom type sleBridgeControlStormControlDLF based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 65535),
    )


_SleBridgeControlStormControlDLF_Type.__name__ = "Integer32"
_SleBridgeControlStormControlDLF_Object = MibScalar
sleBridgeControlStormControlDLF = _SleBridgeControlStormControlDLF_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 37),
    _SleBridgeControlStormControlDLF_Type()
)
sleBridgeControlStormControlDLF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlStormControlDLF.setStatus("current")


class _SleBridgeControlStormControlMulticast_Type(Integer32):
    """Custom type sleBridgeControlStormControlMulticast based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 65535),
    )


_SleBridgeControlStormControlMulticast_Type.__name__ = "Integer32"
_SleBridgeControlStormControlMulticast_Object = MibScalar
sleBridgeControlStormControlMulticast = _SleBridgeControlStormControlMulticast_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 38),
    _SleBridgeControlStormControlMulticast_Type()
)
sleBridgeControlStormControlMulticast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeControlStormControlMulticast.setStatus("current")


class _SleBridgeControlMacLearningMode_Type(Integer32):
    """Custom type sleBridgeControlMacLearningMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("cml", 1),
          ("sml", 2),
          ("cmlsml", 3))
    )


_SleBridgeControlMacLearningMode_Type.__name__ = "Integer32"
_SleBridgeControlMacLearningMode_Object = MibScalar
sleBridgeControlMacLearningMode = _SleBridgeControlMacLearningMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 39),
    _SleBridgeControlMacLearningMode_Type()
)
sleBridgeControlMacLearningMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlMacLearningMode.setStatus("current")


class _SleBridgeControlLagGlobalDistMode_Type(Integer32):
    """Custom type sleBridgeControlLagGlobalDistMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("srcmac", 1),
          ("dstmac", 2),
          ("srcdstmac", 3),
          ("srcip", 4),
          ("dstip", 5),
          ("srcdstip", 6),
          ("srcdstl4", 7),
          ("label", 8))
    )


_SleBridgeControlLagGlobalDistMode_Type.__name__ = "Integer32"
_SleBridgeControlLagGlobalDistMode_Object = MibScalar
sleBridgeControlLagGlobalDistMode = _SleBridgeControlLagGlobalDistMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 40),
    _SleBridgeControlLagGlobalDistMode_Type()
)
sleBridgeControlLagGlobalDistMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlLagGlobalDistMode.setStatus("current")
_SleBridgeControlMultiPortLlcfPortA_Type = OctetString
_SleBridgeControlMultiPortLlcfPortA_Object = MibScalar
sleBridgeControlMultiPortLlcfPortA = _SleBridgeControlMultiPortLlcfPortA_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 41),
    _SleBridgeControlMultiPortLlcfPortA_Type()
)
sleBridgeControlMultiPortLlcfPortA.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlMultiPortLlcfPortA.setStatus("current")
_SleBridgeControlMultiPortLlcfPortB_Type = OctetString
_SleBridgeControlMultiPortLlcfPortB_Object = MibScalar
sleBridgeControlMultiPortLlcfPortB = _SleBridgeControlMultiPortLlcfPortB_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 42),
    _SleBridgeControlMultiPortLlcfPortB_Type()
)
sleBridgeControlMultiPortLlcfPortB.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlMultiPortLlcfPortB.setStatus("current")
_SleBridgeControlMultiPortLlcfPortC_Type = OctetString
_SleBridgeControlMultiPortLlcfPortC_Object = MibScalar
sleBridgeControlMultiPortLlcfPortC = _SleBridgeControlMultiPortLlcfPortC_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 43),
    _SleBridgeControlMultiPortLlcfPortC_Type()
)
sleBridgeControlMultiPortLlcfPortC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlMultiPortLlcfPortC.setStatus("current")


class _SleBridgeControlMultiPortLlcfTimer_Type(Integer32):
    """Custom type sleBridgeControlMultiPortLlcfTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, -1),
        ValueRangeConstraint(1000, 10000),
    )


_SleBridgeControlMultiPortLlcfTimer_Type.__name__ = "Integer32"
_SleBridgeControlMultiPortLlcfTimer_Object = MibScalar
sleBridgeControlMultiPortLlcfTimer = _SleBridgeControlMultiPortLlcfTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 44),
    _SleBridgeControlMultiPortLlcfTimer_Type()
)
sleBridgeControlMultiPortLlcfTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlMultiPortLlcfTimer.setStatus("current")


class _SleBridgeControlChannelGroupLacpMaxBundle_Type(Integer32):
    """Custom type sleBridgeControlChannelGroupLacpMaxBundle based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_SleBridgeControlChannelGroupLacpMaxBundle_Type.__name__ = "Integer32"
_SleBridgeControlChannelGroupLacpMaxBundle_Object = MibScalar
sleBridgeControlChannelGroupLacpMaxBundle = _SleBridgeControlChannelGroupLacpMaxBundle_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 45),
    _SleBridgeControlChannelGroupLacpMaxBundle_Type()
)
sleBridgeControlChannelGroupLacpMaxBundle.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlChannelGroupLacpMaxBundle.setStatus("current")


class _SleBridgeControlChannelGroupSystemPriority_Type(Integer32):
    """Custom type sleBridgeControlChannelGroupSystemPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleBridgeControlChannelGroupSystemPriority_Type.__name__ = "Integer32"
_SleBridgeControlChannelGroupSystemPriority_Object = MibScalar
sleBridgeControlChannelGroupSystemPriority = _SleBridgeControlChannelGroupSystemPriority_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 46),
    _SleBridgeControlChannelGroupSystemPriority_Type()
)
sleBridgeControlChannelGroupSystemPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlChannelGroupSystemPriority.setStatus("current")


class _SleBridgeControlId_Type(Integer32):
    """Custom type sleBridgeControlId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_SleBridgeControlId_Type.__name__ = "Integer32"
_SleBridgeControlId_Object = MibScalar
sleBridgeControlId = _SleBridgeControlId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 47),
    _SleBridgeControlId_Type()
)
sleBridgeControlId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeControlId.setStatus("current")


class _SleBridgeControlProtocol_Type(Integer32):
    """Custom type sleBridgeControlProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("enableBridgeProtocolIeee", 1),
          ("enableBridgeProtocolIeeeVlan", 2),
          ("enableBridgeProtocolProviderMstp", 3),
          ("enableBridgeProtocolProviderMstpEdge", 4))
    )


_SleBridgeControlProtocol_Type.__name__ = "Integer32"
_SleBridgeControlProtocol_Object = MibScalar
sleBridgeControlProtocol = _SleBridgeControlProtocol_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 2, 48),
    _SleBridgeControlProtocol_Type()
)
sleBridgeControlProtocol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeControlProtocol.setStatus("current")
_SleBridgeBaseNotification_ObjectIdentity = ObjectIdentity
sleBridgeBaseNotification = _SleBridgeBaseNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 3)
)
_SleBridgePort_ObjectIdentity = ObjectIdentity
sleBridgePort = _SleBridgePort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2)
)
_SleBridgePortTable_Object = MibTable
sleBridgePortTable = _SleBridgePortTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1)
)
if mibBuilder.loadTexts:
    sleBridgePortTable.setStatus("current")
_SleBridgePortEntry_Object = MibTableRow
sleBridgePortEntry = _SleBridgePortEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1)
)
sleBridgePortEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleBridgePortIndex"),
)
if mibBuilder.loadTexts:
    sleBridgePortEntry.setStatus("current")


class _SleBridgePortIndex_Type(Integer32):
    """Custom type sleBridgePortIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleBridgePortIndex_Type.__name__ = "Integer32"
_SleBridgePortIndex_Object = MibTableColumn
sleBridgePortIndex = _SleBridgePortIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 1),
    _SleBridgePortIndex_Type()
)
sleBridgePortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortIndex.setStatus("current")


class _SleBridgePortIfIndex_Type(Integer32):
    """Custom type sleBridgePortIfIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleBridgePortIfIndex_Type.__name__ = "Integer32"
_SleBridgePortIfIndex_Object = MibTableColumn
sleBridgePortIfIndex = _SleBridgePortIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 2),
    _SleBridgePortIfIndex_Type()
)
sleBridgePortIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortIfIndex.setStatus("current")


class _SleBridgePortPVid_Type(Integer32):
    """Custom type sleBridgePortPVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleBridgePortPVid_Type.__name__ = "Integer32"
_SleBridgePortPVid_Object = MibTableColumn
sleBridgePortPVid = _SleBridgePortPVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 3),
    _SleBridgePortPVid_Type()
)
sleBridgePortPVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortPVid.setStatus("current")


class _SleBridgePortMaxHosts_Type(Integer32):
    """Custom type sleBridgePortMaxHosts based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_SleBridgePortMaxHosts_Type.__name__ = "Integer32"
_SleBridgePortMaxHosts_Object = MibTableColumn
sleBridgePortMaxHosts = _SleBridgePortMaxHosts_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 4),
    _SleBridgePortMaxHosts_Type()
)
sleBridgePortMaxHosts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortMaxHosts.setStatus("current")


class _SleBridgePortCurrentHosts_Type(Integer32):
    """Custom type sleBridgePortCurrentHosts based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_SleBridgePortCurrentHosts_Type.__name__ = "Integer32"
_SleBridgePortCurrentHosts_Object = MibTableColumn
sleBridgePortCurrentHosts = _SleBridgePortCurrentHosts_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 5),
    _SleBridgePortCurrentHosts_Type()
)
sleBridgePortCurrentHosts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortCurrentHosts.setStatus("current")


class _SleBridgePortMaxLearnPerUnit_Type(Integer32):
    """Custom type sleBridgePortMaxLearnPerUnit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, 2147483647),
    )


_SleBridgePortMaxLearnPerUnit_Type.__name__ = "Integer32"
_SleBridgePortMaxLearnPerUnit_Object = MibTableColumn
sleBridgePortMaxLearnPerUnit = _SleBridgePortMaxLearnPerUnit_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 6),
    _SleBridgePortMaxLearnPerUnit_Type()
)
sleBridgePortMaxLearnPerUnit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortMaxLearnPerUnit.setStatus("current")


class _SleBridgePortMACFilterPermission_Type(Integer32):
    """Custom type sleBridgePortMACFilterPermission based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("deny", 0),
          ("permit", 1))
    )


_SleBridgePortMACFilterPermission_Type.__name__ = "Integer32"
_SleBridgePortMACFilterPermission_Object = MibTableColumn
sleBridgePortMACFilterPermission = _SleBridgePortMACFilterPermission_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 7),
    _SleBridgePortMACFilterPermission_Type()
)
sleBridgePortMACFilterPermission.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortMACFilterPermission.setStatus("current")


class _SleBridgePortIngMirrorStatus_Type(Integer32):
    """Custom type sleBridgePortIngMirrorStatus based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgePortIngMirrorStatus_Type.__name__ = "Integer32"
_SleBridgePortIngMirrorStatus_Object = MibTableColumn
sleBridgePortIngMirrorStatus = _SleBridgePortIngMirrorStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 8),
    _SleBridgePortIngMirrorStatus_Type()
)
sleBridgePortIngMirrorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortIngMirrorStatus.setStatus("current")


class _SleBridgePortEgMirrorStatus_Type(Integer32):
    """Custom type sleBridgePortEgMirrorStatus based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgePortEgMirrorStatus_Type.__name__ = "Integer32"
_SleBridgePortEgMirrorStatus_Object = MibTableColumn
sleBridgePortEgMirrorStatus = _SleBridgePortEgMirrorStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 9),
    _SleBridgePortEgMirrorStatus_Type()
)
sleBridgePortEgMirrorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortEgMirrorStatus.setStatus("current")


class _SleBridgePortBcastThreshold_Type(Integer32):
    """Custom type sleBridgePortBcastThreshold based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2097150),
    )


_SleBridgePortBcastThreshold_Type.__name__ = "Integer32"
_SleBridgePortBcastThreshold_Object = MibTableColumn
sleBridgePortBcastThreshold = _SleBridgePortBcastThreshold_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 10),
    _SleBridgePortBcastThreshold_Type()
)
sleBridgePortBcastThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortBcastThreshold.setStatus("current")


class _SleBridgePortMcastThreshold_Type(Integer32):
    """Custom type sleBridgePortMcastThreshold based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2097150),
    )


_SleBridgePortMcastThreshold_Type.__name__ = "Integer32"
_SleBridgePortMcastThreshold_Object = MibTableColumn
sleBridgePortMcastThreshold = _SleBridgePortMcastThreshold_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 11),
    _SleBridgePortMcastThreshold_Type()
)
sleBridgePortMcastThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortMcastThreshold.setStatus("current")


class _SleBridgePortDlfThreshold_Type(Integer32):
    """Custom type sleBridgePortDlfThreshold based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2097150),
    )


_SleBridgePortDlfThreshold_Type.__name__ = "Integer32"
_SleBridgePortDlfThreshold_Object = MibTableColumn
sleBridgePortDlfThreshold = _SleBridgePortDlfThreshold_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 12),
    _SleBridgePortDlfThreshold_Type()
)
sleBridgePortDlfThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortDlfThreshold.setStatus("current")


class _SleBridgePortQinQStatus_Type(Integer32):
    """Custom type sleBridgePortQinQStatus based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgePortQinQStatus_Type.__name__ = "Integer32"
_SleBridgePortQinQStatus_Object = MibTableColumn
sleBridgePortQinQStatus = _SleBridgePortQinQStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 13),
    _SleBridgePortQinQStatus_Type()
)
sleBridgePortQinQStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortQinQStatus.setStatus("current")


class _SleBridgePortAdminLinktype_Type(Integer32):
    """Custom type sleBridgePortAdminLinktype based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("shared", 0),
          ("pointTopoint", 1),
          ("automatic", 2))
    )


_SleBridgePortAdminLinktype_Type.__name__ = "Integer32"
_SleBridgePortAdminLinktype_Object = MibTableColumn
sleBridgePortAdminLinktype = _SleBridgePortAdminLinktype_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 14),
    _SleBridgePortAdminLinktype_Type()
)
sleBridgePortAdminLinktype.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortAdminLinktype.setStatus("current")


class _SleBridgePortAdminEdgemode_Type(Integer32):
    """Custom type sleBridgePortAdminEdgemode based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgePortAdminEdgemode_Type.__name__ = "Integer32"
_SleBridgePortAdminEdgemode_Object = MibTableColumn
sleBridgePortAdminEdgemode = _SleBridgePortAdminEdgemode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 15),
    _SleBridgePortAdminEdgemode_Type()
)
sleBridgePortAdminEdgemode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortAdminEdgemode.setStatus("current")


class _SleBridgePortOperLinktype_Type(Integer32):
    """Custom type sleBridgePortOperLinktype based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("shared", 0),
          ("pointTopoint", 1))
    )


_SleBridgePortOperLinktype_Type.__name__ = "Integer32"
_SleBridgePortOperLinktype_Object = MibTableColumn
sleBridgePortOperLinktype = _SleBridgePortOperLinktype_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 16),
    _SleBridgePortOperLinktype_Type()
)
sleBridgePortOperLinktype.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortOperLinktype.setStatus("current")


class _SleBridgePortOperEdgemode_Type(Integer32):
    """Custom type sleBridgePortOperEdgemode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SleBridgePortOperEdgemode_Type.__name__ = "Integer32"
_SleBridgePortOperEdgemode_Object = MibTableColumn
sleBridgePortOperEdgemode = _SleBridgePortOperEdgemode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 17),
    _SleBridgePortOperEdgemode_Type()
)
sleBridgePortOperEdgemode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortOperEdgemode.setStatus("current")


class _SleBridgePortStpBpduFilter_Type(Integer32):
    """Custom type sleBridgePortStpBpduFilter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgePortStpBpduFilter_Type.__name__ = "Integer32"
_SleBridgePortStpBpduFilter_Object = MibTableColumn
sleBridgePortStpBpduFilter = _SleBridgePortStpBpduFilter_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 18),
    _SleBridgePortStpBpduFilter_Type()
)
sleBridgePortStpBpduFilter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortStpBpduFilter.setStatus("current")


class _SleBridgePortPvlanIsolatedStatus_Type(Integer32):
    """Custom type sleBridgePortPvlanIsolatedStatus based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgePortPvlanIsolatedStatus_Type.__name__ = "Integer32"
_SleBridgePortPvlanIsolatedStatus_Object = MibTableColumn
sleBridgePortPvlanIsolatedStatus = _SleBridgePortPvlanIsolatedStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 19),
    _SleBridgePortPvlanIsolatedStatus_Type()
)
sleBridgePortPvlanIsolatedStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortPvlanIsolatedStatus.setStatus("current")
_SleBridgePortPvlanPromPorts_Type = OctetString
_SleBridgePortPvlanPromPorts_Object = MibTableColumn
sleBridgePortPvlanPromPorts = _SleBridgePortPvlanPromPorts_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 20),
    _SleBridgePortPvlanPromPorts_Type()
)
sleBridgePortPvlanPromPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortPvlanPromPorts.setStatus("current")


class _SleBridgePortDhcpFilterServer_Type(Integer32):
    """Custom type sleBridgePortDhcpFilterServer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgePortDhcpFilterServer_Type.__name__ = "Integer32"
_SleBridgePortDhcpFilterServer_Object = MibTableColumn
sleBridgePortDhcpFilterServer = _SleBridgePortDhcpFilterServer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 21),
    _SleBridgePortDhcpFilterServer_Type()
)
sleBridgePortDhcpFilterServer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortDhcpFilterServer.setStatus("current")


class _SleBridgePortLoopDetectStatus_Type(Integer32):
    """Custom type sleBridgePortLoopDetectStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgePortLoopDetectStatus_Type.__name__ = "Integer32"
_SleBridgePortLoopDetectStatus_Object = MibTableColumn
sleBridgePortLoopDetectStatus = _SleBridgePortLoopDetectStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 22),
    _SleBridgePortLoopDetectStatus_Type()
)
sleBridgePortLoopDetectStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortLoopDetectStatus.setStatus("current")


class _SleBridgePortLoopDetectBlock_Type(Integer32):
    """Custom type sleBridgePortLoopDetectBlock based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgePortLoopDetectBlock_Type.__name__ = "Integer32"
_SleBridgePortLoopDetectBlock_Object = MibTableColumn
sleBridgePortLoopDetectBlock = _SleBridgePortLoopDetectBlock_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 23),
    _SleBridgePortLoopDetectBlock_Type()
)
sleBridgePortLoopDetectBlock.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortLoopDetectBlock.setStatus("current")


class _SleBridgePortLoopDetectPeriod_Type(Integer32):
    """Custom type sleBridgePortLoopDetectPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 60),
    )


_SleBridgePortLoopDetectPeriod_Type.__name__ = "Integer32"
_SleBridgePortLoopDetectPeriod_Object = MibTableColumn
sleBridgePortLoopDetectPeriod = _SleBridgePortLoopDetectPeriod_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 24),
    _SleBridgePortLoopDetectPeriod_Type()
)
sleBridgePortLoopDetectPeriod.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortLoopDetectPeriod.setStatus("current")


class _SleBridgePortLoopDetectTimer_Type(Integer32):
    """Custom type sleBridgePortLoopDetectTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 86400),
    )


_SleBridgePortLoopDetectTimer_Type.__name__ = "Integer32"
_SleBridgePortLoopDetectTimer_Object = MibTableColumn
sleBridgePortLoopDetectTimer = _SleBridgePortLoopDetectTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 25),
    _SleBridgePortLoopDetectTimer_Type()
)
sleBridgePortLoopDetectTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortLoopDetectTimer.setStatus("current")


class _SleBridgePortLoopDetectBlockStatus_Type(Integer32):
    """Custom type sleBridgePortLoopDetectBlockStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("block", 1),
          ("unblock", 2))
    )


_SleBridgePortLoopDetectBlockStatus_Type.__name__ = "Integer32"
_SleBridgePortLoopDetectBlockStatus_Object = MibTableColumn
sleBridgePortLoopDetectBlockStatus = _SleBridgePortLoopDetectBlockStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 26),
    _SleBridgePortLoopDetectBlockStatus_Type()
)
sleBridgePortLoopDetectBlockStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortLoopDetectBlockStatus.setStatus("current")


class _SleBridgePortNetBIOSFilter_Type(Integer32):
    """Custom type sleBridgePortNetBIOSFilter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgePortNetBIOSFilter_Type.__name__ = "Integer32"
_SleBridgePortNetBIOSFilter_Object = MibTableColumn
sleBridgePortNetBIOSFilter = _SleBridgePortNetBIOSFilter_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 27),
    _SleBridgePortNetBIOSFilter_Type()
)
sleBridgePortNetBIOSFilter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortNetBIOSFilter.setStatus("current")


class _SleBridgePortPushInnertag_Type(Integer32):
    """Custom type sleBridgePortPushInnertag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgePortPushInnertag_Type.__name__ = "Integer32"
_SleBridgePortPushInnertag_Object = MibTableColumn
sleBridgePortPushInnertag = _SleBridgePortPushInnertag_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 28),
    _SleBridgePortPushInnertag_Type()
)
sleBridgePortPushInnertag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortPushInnertag.setStatus("current")


class _SleBridgePortPopInnertag_Type(Integer32):
    """Custom type sleBridgePortPopInnertag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgePortPopInnertag_Type.__name__ = "Integer32"
_SleBridgePortPopInnertag_Object = MibTableColumn
sleBridgePortPopInnertag = _SleBridgePortPopInnertag_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 29),
    _SleBridgePortPopInnertag_Type()
)
sleBridgePortPopInnertag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortPopInnertag.setStatus("current")


class _SleBridgePortInnertag_Type(Integer32):
    """Custom type sleBridgePortInnertag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4096),
    )


_SleBridgePortInnertag_Type.__name__ = "Integer32"
_SleBridgePortInnertag_Object = MibTableColumn
sleBridgePortInnertag = _SleBridgePortInnertag_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 30),
    _SleBridgePortInnertag_Type()
)
sleBridgePortInnertag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortInnertag.setStatus("current")


class _SleBridgePortPriority_Type(Integer32):
    """Custom type sleBridgePortPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_SleBridgePortPriority_Type.__name__ = "Integer32"
_SleBridgePortPriority_Object = MibTableColumn
sleBridgePortPriority = _SleBridgePortPriority_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 31),
    _SleBridgePortPriority_Type()
)
sleBridgePortPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortPriority.setStatus("current")


class _SleBridgePortInner2outerPri_Type(Integer32):
    """Custom type sleBridgePortInner2outerPri based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgePortInner2outerPri_Type.__name__ = "Integer32"
_SleBridgePortInner2outerPri_Object = MibTableColumn
sleBridgePortInner2outerPri = _SleBridgePortInner2outerPri_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 32),
    _SleBridgePortInner2outerPri_Type()
)
sleBridgePortInner2outerPri.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortInner2outerPri.setStatus("current")


class _SleBridgePortInner2outerVid_Type(Integer32):
    """Custom type sleBridgePortInner2outerVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgePortInner2outerVid_Type.__name__ = "Integer32"
_SleBridgePortInner2outerVid_Object = MibTableColumn
sleBridgePortInner2outerVid = _SleBridgePortInner2outerVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 33),
    _SleBridgePortInner2outerVid_Type()
)
sleBridgePortInner2outerVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortInner2outerVid.setStatus("current")


class _SleBridgePortLinkUpCnt_Type(Integer32):
    """Custom type sleBridgePortLinkUpCnt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleBridgePortLinkUpCnt_Type.__name__ = "Integer32"
_SleBridgePortLinkUpCnt_Object = MibTableColumn
sleBridgePortLinkUpCnt = _SleBridgePortLinkUpCnt_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 34),
    _SleBridgePortLinkUpCnt_Type()
)
sleBridgePortLinkUpCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortLinkUpCnt.setStatus("current")


class _SleBridgePortLinkDownCnt_Type(Integer32):
    """Custom type sleBridgePortLinkDownCnt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleBridgePortLinkDownCnt_Type.__name__ = "Integer32"
_SleBridgePortLinkDownCnt_Object = MibTableColumn
sleBridgePortLinkDownCnt = _SleBridgePortLinkDownCnt_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 35),
    _SleBridgePortLinkDownCnt_Type()
)
sleBridgePortLinkDownCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortLinkDownCnt.setStatus("current")
_SleBridgePortLinkUpTime_Type = Counter64
_SleBridgePortLinkUpTime_Object = MibTableColumn
sleBridgePortLinkUpTime = _SleBridgePortLinkUpTime_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 36),
    _SleBridgePortLinkUpTime_Type()
)
sleBridgePortLinkUpTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortLinkUpTime.setStatus("current")
if mibBuilder.loadTexts:
    sleBridgePortLinkUpTime.setUnits("1 sec")
_SleBridgePortElapsedTimeAfterClearStats_Type = Counter64
_SleBridgePortElapsedTimeAfterClearStats_Object = MibTableColumn
sleBridgePortElapsedTimeAfterClearStats = _SleBridgePortElapsedTimeAfterClearStats_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 37),
    _SleBridgePortElapsedTimeAfterClearStats_Type()
)
sleBridgePortElapsedTimeAfterClearStats.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortElapsedTimeAfterClearStats.setStatus("current")
if mibBuilder.loadTexts:
    sleBridgePortElapsedTimeAfterClearStats.setUnits("1 sec")


class _SleBridgePortMACLearningStatus_Type(Integer32):
    """Custom type sleBridgePortMACLearningStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgePortMACLearningStatus_Type.__name__ = "Integer32"
_SleBridgePortMACLearningStatus_Object = MibTableColumn
sleBridgePortMACLearningStatus = _SleBridgePortMACLearningStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 38),
    _SleBridgePortMACLearningStatus_Type()
)
sleBridgePortMACLearningStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortMACLearningStatus.setStatus("current")


class _SleBridgePortPortBridgeStatus_Type(Integer32):
    """Custom type sleBridgePortPortBridgeStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgePortPortBridgeStatus_Type.__name__ = "Integer32"
_SleBridgePortPortBridgeStatus_Object = MibTableColumn
sleBridgePortPortBridgeStatus = _SleBridgePortPortBridgeStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 39),
    _SleBridgePortPortBridgeStatus_Type()
)
sleBridgePortPortBridgeStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortPortBridgeStatus.setStatus("current")


class _SleBridgePortUnknownMcastBlock_Type(Integer32):
    """Custom type sleBridgePortUnknownMcastBlock based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgePortUnknownMcastBlock_Type.__name__ = "Integer32"
_SleBridgePortUnknownMcastBlock_Object = MibTableColumn
sleBridgePortUnknownMcastBlock = _SleBridgePortUnknownMcastBlock_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 40),
    _SleBridgePortUnknownMcastBlock_Type()
)
sleBridgePortUnknownMcastBlock.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortUnknownMcastBlock.setStatus("current")


class _SleBridgePortDescription_Type(OctetString):
    """Custom type sleBridgePortDescription based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 128),
    )


_SleBridgePortDescription_Type.__name__ = "OctetString"
_SleBridgePortDescription_Object = MibTableColumn
sleBridgePortDescription = _SleBridgePortDescription_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 41),
    _SleBridgePortDescription_Type()
)
sleBridgePortDescription.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortDescription.setStatus("current")


class _SleBridgePortHoldTime_Type(Integer32):
    """Custom type sleBridgePortHoldTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleBridgePortHoldTime_Type.__name__ = "Integer32"
_SleBridgePortHoldTime_Object = MibTableColumn
sleBridgePortHoldTime = _SleBridgePortHoldTime_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 42),
    _SleBridgePortHoldTime_Type()
)
sleBridgePortHoldTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortHoldTime.setStatus("current")
_SleBridgePortMacAntiSpoofing_Type = TruthValue
_SleBridgePortMacAntiSpoofing_Object = MibTableColumn
sleBridgePortMacAntiSpoofing = _SleBridgePortMacAntiSpoofing_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 43),
    _SleBridgePortMacAntiSpoofing_Type()
)
sleBridgePortMacAntiSpoofing.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortMacAntiSpoofing.setStatus("current")


class _SleBridgePortSwitchType_Type(Integer32):
    """Custom type sleBridgePortSwitchType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              255)
        )
    )
    namedValues = NamedValues(
        *(("special", 1),
          ("inner", 2),
          ("vlan", 3),
          ("eth", 4),
          ("portChannel", 5),
          ("tunnel", 6),
          ("unknown", 255))
    )


_SleBridgePortSwitchType_Type.__name__ = "Integer32"
_SleBridgePortSwitchType_Object = MibTableColumn
sleBridgePortSwitchType = _SleBridgePortSwitchType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 44),
    _SleBridgePortSwitchType_Type()
)
sleBridgePortSwitchType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortSwitchType.setStatus("current")


class _SleBridgePortSwitchState_Type(Integer32):
    """Custom type sleBridgePortSwitchState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("switchedPort", 1),
          ("routedPort", 2))
    )


_SleBridgePortSwitchState_Type.__name__ = "Integer32"
_SleBridgePortSwitchState_Object = MibTableColumn
sleBridgePortSwitchState = _SleBridgePortSwitchState_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 45),
    _SleBridgePortSwitchState_Type()
)
sleBridgePortSwitchState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortSwitchState.setStatus("current")


class _SleBridgePortSwitchMode_Type(Integer32):
    """Custom type sleBridgePortSwitchMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              255)
        )
    )
    namedValues = NamedValues(
        *(("access", 1),
          ("hybrid", 2),
          ("trunk", 3),
          ("ce", 4),
          ("cn", 5),
          ("pn", 6),
          ("pe", 7),
          ("cnp", 8),
          ("vip", 9),
          ("pip", 10),
          ("cbp", 11),
          ("invalid", 255))
    )


_SleBridgePortSwitchMode_Type.__name__ = "Integer32"
_SleBridgePortSwitchMode_Object = MibTableColumn
sleBridgePortSwitchMode = _SleBridgePortSwitchMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 46),
    _SleBridgePortSwitchMode_Type()
)
sleBridgePortSwitchMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortSwitchMode.setStatus("current")


class _SleBridgePortSwitchSubMode_Type(Integer32):
    """Custom type sleBridgePortSwitchSubMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              255)
        )
    )
    namedValues = NamedValues(
        *(("access", 1),
          ("hybrid", 2),
          ("trunk", 3),
          ("ce", 4),
          ("cn", 5),
          ("pn", 6),
          ("pe", 7),
          ("cnp", 8),
          ("vip", 9),
          ("pip", 10),
          ("cbp", 11),
          ("invalid", 255))
    )


_SleBridgePortSwitchSubMode_Type.__name__ = "Integer32"
_SleBridgePortSwitchSubMode_Object = MibTableColumn
sleBridgePortSwitchSubMode = _SleBridgePortSwitchSubMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 47),
    _SleBridgePortSwitchSubMode_Type()
)
sleBridgePortSwitchSubMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortSwitchSubMode.setStatus("current")


class _SleBridgePortSwitchDefaultVlan_Type(Integer32):
    """Custom type sleBridgePortSwitchDefaultVlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleBridgePortSwitchDefaultVlan_Type.__name__ = "Integer32"
_SleBridgePortSwitchDefaultVlan_Object = MibTableColumn
sleBridgePortSwitchDefaultVlan = _SleBridgePortSwitchDefaultVlan_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 48),
    _SleBridgePortSwitchDefaultVlan_Type()
)
sleBridgePortSwitchDefaultVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortSwitchDefaultVlan.setStatus("current")


class _SleBridgePortSwitchIngressFilter_Type(Integer32):
    """Custom type sleBridgePortSwitchIngressFilter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgePortSwitchIngressFilter_Type.__name__ = "Integer32"
_SleBridgePortSwitchIngressFilter_Object = MibTableColumn
sleBridgePortSwitchIngressFilter = _SleBridgePortSwitchIngressFilter_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 49),
    _SleBridgePortSwitchIngressFilter_Type()
)
sleBridgePortSwitchIngressFilter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortSwitchIngressFilter.setStatus("current")


class _SleBridgePortSwitchAccFrameType_Type(Bits):
    """Custom type sleBridgePortSwitchAccFrameType based on Bits"""
    namedValues = NamedValues(
        *(("allType", 0),
          ("tagged", 1),
          ("untagged", 2))
    )

_SleBridgePortSwitchAccFrameType_Type.__name__ = "Bits"
_SleBridgePortSwitchAccFrameType_Object = MibTableColumn
sleBridgePortSwitchAccFrameType = _SleBridgePortSwitchAccFrameType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 50),
    _SleBridgePortSwitchAccFrameType_Type()
)
sleBridgePortSwitchAccFrameType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortSwitchAccFrameType.setStatus("current")


class _SleBridgePortSwitchNativeVid_Type(Integer32):
    """Custom type sleBridgePortSwitchNativeVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleBridgePortSwitchNativeVid_Type.__name__ = "Integer32"
_SleBridgePortSwitchNativeVid_Object = MibTableColumn
sleBridgePortSwitchNativeVid = _SleBridgePortSwitchNativeVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 51),
    _SleBridgePortSwitchNativeVid_Type()
)
sleBridgePortSwitchNativeVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortSwitchNativeVid.setStatus("current")
_SleBridgePortSwitchAllowedVlan_Type = OctetString
_SleBridgePortSwitchAllowedVlan_Object = MibTableColumn
sleBridgePortSwitchAllowedVlan = _SleBridgePortSwitchAllowedVlan_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 52),
    _SleBridgePortSwitchAllowedVlan_Type()
)
sleBridgePortSwitchAllowedVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortSwitchAllowedVlan.setStatus("current")
_SleBridgePortSwitchAllowedVlanEtag_Type = OctetString
_SleBridgePortSwitchAllowedVlanEtag_Object = MibTableColumn
sleBridgePortSwitchAllowedVlanEtag = _SleBridgePortSwitchAllowedVlanEtag_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 53),
    _SleBridgePortSwitchAllowedVlanEtag_Type()
)
sleBridgePortSwitchAllowedVlanEtag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortSwitchAllowedVlanEtag.setStatus("current")


class _SleBridgePortSwitchChannelType_Type(Integer32):
    """Custom type sleBridgePortSwitchChannelType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("aggregator", 1),
          ("aggregated", 2))
    )


_SleBridgePortSwitchChannelType_Type.__name__ = "Integer32"
_SleBridgePortSwitchChannelType_Object = MibTableColumn
sleBridgePortSwitchChannelType = _SleBridgePortSwitchChannelType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 54),
    _SleBridgePortSwitchChannelType_Type()
)
sleBridgePortSwitchChannelType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortSwitchChannelType.setStatus("current")
_SleBridgePortSwitchStaticChannelGroup_Type = OctetString
_SleBridgePortSwitchStaticChannelGroup_Object = MibTableColumn
sleBridgePortSwitchStaticChannelGroup = _SleBridgePortSwitchStaticChannelGroup_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 55),
    _SleBridgePortSwitchStaticChannelGroup_Type()
)
sleBridgePortSwitchStaticChannelGroup.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortSwitchStaticChannelGroup.setStatus("current")


class _SleBridgePortSwitchChannelLoadbalance_Type(Integer32):
    """Custom type sleBridgePortSwitchChannelLoadbalance based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("dstMac", 1),
          ("srcMac", 2),
          ("srcDstMac", 3),
          ("srcIp", 4),
          ("dstIp", 5),
          ("srcDstIp", 6),
          ("srcPort", 7),
          ("dstPort", 8),
          ("srcDstPort", 9))
    )


_SleBridgePortSwitchChannelLoadbalance_Type.__name__ = "Integer32"
_SleBridgePortSwitchChannelLoadbalance_Object = MibTableColumn
sleBridgePortSwitchChannelLoadbalance = _SleBridgePortSwitchChannelLoadbalance_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 56),
    _SleBridgePortSwitchChannelLoadbalance_Type()
)
sleBridgePortSwitchChannelLoadbalance.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortSwitchChannelLoadbalance.setStatus("current")


class _SleBridgePortSwitchAggrType_Type(Integer32):
    """Custom type sleBridgePortSwitchAggrType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("noneAggregated", 0),
          ("aggregatedStatic", 1),
          ("aggregatedLacp", 2),
          ("aggregatorStatic", 3),
          ("aggregatorLacp", 4))
    )


_SleBridgePortSwitchAggrType_Type.__name__ = "Integer32"
_SleBridgePortSwitchAggrType_Object = MibTableColumn
sleBridgePortSwitchAggrType = _SleBridgePortSwitchAggrType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 57),
    _SleBridgePortSwitchAggrType_Type()
)
sleBridgePortSwitchAggrType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortSwitchAggrType.setStatus("current")


class _SleBridgePortSwitchAggrId_Type(Integer32):
    """Custom type sleBridgePortSwitchAggrId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 12),
    )


_SleBridgePortSwitchAggrId_Type.__name__ = "Integer32"
_SleBridgePortSwitchAggrId_Object = MibTableColumn
sleBridgePortSwitchAggrId = _SleBridgePortSwitchAggrId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 58),
    _SleBridgePortSwitchAggrId_Type()
)
sleBridgePortSwitchAggrId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortSwitchAggrId.setStatus("current")


class _SleBridgePortSwitchAggrMode_Type(Integer32):
    """Custom type sleBridgePortSwitchAggrMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noneAggregated", 0),
          ("aggregatedActive", 1),
          ("aggregatedPassive", 2))
    )


_SleBridgePortSwitchAggrMode_Type.__name__ = "Integer32"
_SleBridgePortSwitchAggrMode_Object = MibTableColumn
sleBridgePortSwitchAggrMode = _SleBridgePortSwitchAggrMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 59),
    _SleBridgePortSwitchAggrMode_Type()
)
sleBridgePortSwitchAggrMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortSwitchAggrMode.setStatus("current")


class _SleBridgePortLoopDetectPeriodMs_Type(Integer32):
    """Custom type sleBridgePortLoopDetectPeriodMs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 60),
    )


_SleBridgePortLoopDetectPeriodMs_Type.__name__ = "Integer32"
_SleBridgePortLoopDetectPeriodMs_Object = MibTableColumn
sleBridgePortLoopDetectPeriodMs = _SleBridgePortLoopDetectPeriodMs_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 91),
    _SleBridgePortLoopDetectPeriodMs_Type()
)
sleBridgePortLoopDetectPeriodMs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortLoopDetectPeriodMs.setStatus("current")
_SleBridgePortLoopDetectAdminCount_Type = Integer32
_SleBridgePortLoopDetectAdminCount_Object = MibTableColumn
sleBridgePortLoopDetectAdminCount = _SleBridgePortLoopDetectAdminCount_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 92),
    _SleBridgePortLoopDetectAdminCount_Type()
)
sleBridgePortLoopDetectAdminCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortLoopDetectAdminCount.setStatus("current")
_SleBridgePortLoopDetectOperCount_Type = Integer32
_SleBridgePortLoopDetectOperCount_Object = MibTableColumn
sleBridgePortLoopDetectOperCount = _SleBridgePortLoopDetectOperCount_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 93),
    _SleBridgePortLoopDetectOperCount_Type()
)
sleBridgePortLoopDetectOperCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortLoopDetectOperCount.setStatus("current")
_SleBridgePortLoopDetectDetectedCount_Type = Integer32
_SleBridgePortLoopDetectDetectedCount_Object = MibTableColumn
sleBridgePortLoopDetectDetectedCount = _SleBridgePortLoopDetectDetectedCount_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 94),
    _SleBridgePortLoopDetectDetectedCount_Type()
)
sleBridgePortLoopDetectDetectedCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortLoopDetectDetectedCount.setStatus("current")


class _SleBridgePortLoopDetectVlan_Type(Integer32):
    """Custom type sleBridgePortLoopDetectVlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4094),
    )


_SleBridgePortLoopDetectVlan_Type.__name__ = "Integer32"
_SleBridgePortLoopDetectVlan_Object = MibTableColumn
sleBridgePortLoopDetectVlan = _SleBridgePortLoopDetectVlan_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 95),
    _SleBridgePortLoopDetectVlan_Type()
)
sleBridgePortLoopDetectVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortLoopDetectVlan.setStatus("current")


class _SleBridgePortMaxNewHosts_Type(Integer32):
    """Custom type sleBridgePortMaxNewHosts based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 65535),
    )


_SleBridgePortMaxNewHosts_Type.__name__ = "Integer32"
_SleBridgePortMaxNewHosts_Object = MibTableColumn
sleBridgePortMaxNewHosts = _SleBridgePortMaxNewHosts_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 96),
    _SleBridgePortMaxNewHosts_Type()
)
sleBridgePortMaxNewHosts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortMaxNewHosts.setStatus("current")


class _SleBridgePortStpStatus_Type(Integer32):
    """Custom type sleBridgePortStpStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgePortStpStatus_Type.__name__ = "Integer32"
_SleBridgePortStpStatus_Object = MibTableColumn
sleBridgePortStpStatus = _SleBridgePortStpStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 97),
    _SleBridgePortStpStatus_Type()
)
sleBridgePortStpStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortStpStatus.setStatus("current")


class _SleBridgePortStpBpduGuard_Type(Integer32):
    """Custom type sleBridgePortStpBpduGuard based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgePortStpBpduGuard_Type.__name__ = "Integer32"
_SleBridgePortStpBpduGuard_Object = MibTableColumn
sleBridgePortStpBpduGuard = _SleBridgePortStpBpduGuard_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 98),
    _SleBridgePortStpBpduGuard_Type()
)
sleBridgePortStpBpduGuard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortStpBpduGuard.setStatus("current")


class _SleBridgePortOuterTpid_Type(Integer32):
    """Custom type sleBridgePortOuterTpid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_SleBridgePortOuterTpid_Type.__name__ = "Integer32"
_SleBridgePortOuterTpid_Object = MibTableColumn
sleBridgePortOuterTpid = _SleBridgePortOuterTpid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 99),
    _SleBridgePortOuterTpid_Type()
)
sleBridgePortOuterTpid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortOuterTpid.setStatus("current")


class _SleBridgePortMirrorMonitor_Type(Integer32):
    """Custom type sleBridgePortMirrorMonitor based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgePortMirrorMonitor_Type.__name__ = "Integer32"
_SleBridgePortMirrorMonitor_Object = MibTableColumn
sleBridgePortMirrorMonitor = _SleBridgePortMirrorMonitor_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 100),
    _SleBridgePortMirrorMonitor_Type()
)
sleBridgePortMirrorMonitor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortMirrorMonitor.setStatus("current")
_SleBridgePortBandwidth_Type = OctetString
_SleBridgePortBandwidth_Object = MibTableColumn
sleBridgePortBandwidth = _SleBridgePortBandwidth_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 101),
    _SleBridgePortBandwidth_Type()
)
sleBridgePortBandwidth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortBandwidth.setStatus("current")
_SleBridgePortAlias_Type = OctetString
_SleBridgePortAlias_Object = MibTableColumn
sleBridgePortAlias = _SleBridgePortAlias_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 102),
    _SleBridgePortAlias_Type()
)
sleBridgePortAlias.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortAlias.setStatus("current")


class _SleBridgePortMulticast_Type(Integer32):
    """Custom type sleBridgePortMulticast based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgePortMulticast_Type.__name__ = "Integer32"
_SleBridgePortMulticast_Object = MibTableColumn
sleBridgePortMulticast = _SleBridgePortMulticast_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 103),
    _SleBridgePortMulticast_Type()
)
sleBridgePortMulticast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortMulticast.setStatus("current")


class _SleBridgePortFloodBlock_Type(Bits):
    """Custom type sleBridgePortFloodBlock based on Bits"""
    namedValues = NamedValues(
        *(("bcast", 0),
          ("dlf", 1),
          ("mcast", 2))
    )

_SleBridgePortFloodBlock_Type.__name__ = "Bits"
_SleBridgePortFloodBlock_Object = MibTableColumn
sleBridgePortFloodBlock = _SleBridgePortFloodBlock_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 1, 1, 104),
    _SleBridgePortFloodBlock_Type()
)
sleBridgePortFloodBlock.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortFloodBlock.setStatus("current")
_SleBridgePortControl_ObjectIdentity = ObjectIdentity
sleBridgePortControl = _SleBridgePortControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2)
)


class _SleBridgePortControlRequest_Type(Integer32):
    """Custom type sleBridgePortControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              71,
              72,
              73,
              74,
              75,
              76,
              77,
              78,
              79,
              80,
              81,
              82,
              83,
              84,
              85)
        )
    )
    namedValues = NamedValues(
        *(("setBridgePortPVid", 1),
          ("setBridgePortMaxHosts", 2),
          ("setBridgePortMaxLearnPerUnit", 3),
          ("setBridgePortMACFilterPermission", 4),
          ("setBridgePortMirrorProfile", 5),
          ("setBridgePortBcscThresholdProfile", 6),
          ("setBridgePortQinQStatus", 7),
          ("setBridgePortLinktype", 8),
          ("setBridgePortEdgemode", 9),
          ("setBridgePortStpBpduFilter", 10),
          ("setBridgePortIsolatedStatus", 11),
          ("setBridgePortStpBpduGuardErrRcv", 12),
          ("setBridgePortDhcpFilterServer", 13),
          ("setBridgePortLoopDetectProfile", 14),
          ("setBridgePortLoopDetectUnblock", 15),
          ("setBridgePortNetBIOSFilter", 16),
          ("setBridgePortPushInnertag", 17),
          ("setBridgePortPopInnertag", 18),
          ("setBridgePortInnertag", 19),
          ("setBridgePortPriority", 20),
          ("setBridgePortInner2outerPri", 21),
          ("setBridgePortInner2outerVid", 22),
          ("setBridgePortMacLearningStatus", 23),
          ("setBridgePortPortBridgeStatus", 24),
          ("setBridgePortUnknownMcastBlock", 25),
          ("setBridgePortDescriptopn", 26),
          ("setBridgePortHoldTime", 27),
          ("setBridgePortMacAntiSpoofing", 28),
          ("setBridgePortSwitchStatus", 29),
          ("setBridgePortSwitchMode", 30),
          ("setBridgePortSwitchDefaultVlan", 31),
          ("setBridgePortSwitchNativeVlan", 32),
          ("setBridgePortSwitchAccFramType", 33),
          ("setBridgePortSwitchAddAllowdVlan", 34),
          ("setBridgePortSwitchRemoveAllowdVlan", 35),
          ("setBridgePortSwitchStaticChannel", 36),
          ("setBridgePortSwitchChannelLoadbalance", 37),
          ("clearBridgePortLinkUpCntByIndex", 38),
          ("clearBridgePortLinkUpCntAll", 39),
          ("setBridgePortSwitchChannelProfile", 40),
          ("setBridgePortSwitchNoChannelProfile", 41),
          ("setBridgePortLoopDetectPeriodMs", 71),
          ("setBridgeLoopDetectAdminCount", 72),
          ("setBridgeLoopDetectVlan", 73),
          ("delBridgeLoopDetectVlan", 74),
          ("setBridgePortMaxNewHosts", 75),
          ("clearSpanningTreeDetectedProtocols", 76),
          ("setBridgePortStpStatus", 77),
          ("setBridgePortStpBpduGuard", 78),
          ("setBridgePortOuterTpid", 79),
          ("setBridgePortMirrorMonitor", 80),
          ("setBridgePortBandwidth", 81),
          ("setBridgePortAlias", 82),
          ("unsetBridgePortAlias", 83),
          ("setBridgePortMulticast", 84),
          ("setBridgePortFloodBlock", 85))
    )


_SleBridgePortControlRequest_Type.__name__ = "Integer32"
_SleBridgePortControlRequest_Object = MibScalar
sleBridgePortControlRequest = _SleBridgePortControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 1),
    _SleBridgePortControlRequest_Type()
)
sleBridgePortControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlRequest.setStatus("current")
_SleBridgePortControlStatus_Type = SleControlStatusType
_SleBridgePortControlStatus_Object = MibScalar
sleBridgePortControlStatus = _SleBridgePortControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 2),
    _SleBridgePortControlStatus_Type()
)
sleBridgePortControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortControlStatus.setStatus("current")
_SleBridgePortControlTimer_Type = Gauge32
_SleBridgePortControlTimer_Object = MibScalar
sleBridgePortControlTimer = _SleBridgePortControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 3),
    _SleBridgePortControlTimer_Type()
)
sleBridgePortControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlTimer.setStatus("current")
_SleBridgePortControlTimeStamp_Type = TimeTicks
_SleBridgePortControlTimeStamp_Object = MibScalar
sleBridgePortControlTimeStamp = _SleBridgePortControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 4),
    _SleBridgePortControlTimeStamp_Type()
)
sleBridgePortControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortControlTimeStamp.setStatus("current")
_SleBridgePortControlReqResult_Type = SleControlRequestResultType
_SleBridgePortControlReqResult_Object = MibScalar
sleBridgePortControlReqResult = _SleBridgePortControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 5),
    _SleBridgePortControlReqResult_Type()
)
sleBridgePortControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortControlReqResult.setStatus("current")


class _SleBridgePortControlIndex_Type(Integer32):
    """Custom type sleBridgePortControlIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_SleBridgePortControlIndex_Type.__name__ = "Integer32"
_SleBridgePortControlIndex_Object = MibScalar
sleBridgePortControlIndex = _SleBridgePortControlIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 6),
    _SleBridgePortControlIndex_Type()
)
sleBridgePortControlIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlIndex.setStatus("current")


class _SleBridgePortControlPVid_Type(Integer32):
    """Custom type sleBridgePortControlPVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleBridgePortControlPVid_Type.__name__ = "Integer32"
_SleBridgePortControlPVid_Object = MibScalar
sleBridgePortControlPVid = _SleBridgePortControlPVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 7),
    _SleBridgePortControlPVid_Type()
)
sleBridgePortControlPVid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlPVid.setStatus("current")


class _SleBridgePortControlMaxHosts_Type(Integer32):
    """Custom type sleBridgePortControlMaxHosts based on Integer32"""
    defaultValue = -1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, 2147483647),
    )


_SleBridgePortControlMaxHosts_Type.__name__ = "Integer32"
_SleBridgePortControlMaxHosts_Object = MibScalar
sleBridgePortControlMaxHosts = _SleBridgePortControlMaxHosts_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 8),
    _SleBridgePortControlMaxHosts_Type()
)
sleBridgePortControlMaxHosts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlMaxHosts.setStatus("current")


class _SleBridgePortControlMaxLearnPerUnit_Type(Integer32):
    """Custom type sleBridgePortControlMaxLearnPerUnit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, 2147483647),
    )


_SleBridgePortControlMaxLearnPerUnit_Type.__name__ = "Integer32"
_SleBridgePortControlMaxLearnPerUnit_Object = MibScalar
sleBridgePortControlMaxLearnPerUnit = _SleBridgePortControlMaxLearnPerUnit_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 9),
    _SleBridgePortControlMaxLearnPerUnit_Type()
)
sleBridgePortControlMaxLearnPerUnit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlMaxLearnPerUnit.setStatus("current")


class _SleBridgePortControlMACFilterPermission_Type(Integer32):
    """Custom type sleBridgePortControlMACFilterPermission based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("deny", 0),
          ("permit", 1))
    )


_SleBridgePortControlMACFilterPermission_Type.__name__ = "Integer32"
_SleBridgePortControlMACFilterPermission_Object = MibScalar
sleBridgePortControlMACFilterPermission = _SleBridgePortControlMACFilterPermission_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 10),
    _SleBridgePortControlMACFilterPermission_Type()
)
sleBridgePortControlMACFilterPermission.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlMACFilterPermission.setStatus("current")


class _SleBridgePortControlIngMirrorStatus_Type(Integer32):
    """Custom type sleBridgePortControlIngMirrorStatus based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgePortControlIngMirrorStatus_Type.__name__ = "Integer32"
_SleBridgePortControlIngMirrorStatus_Object = MibScalar
sleBridgePortControlIngMirrorStatus = _SleBridgePortControlIngMirrorStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 11),
    _SleBridgePortControlIngMirrorStatus_Type()
)
sleBridgePortControlIngMirrorStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlIngMirrorStatus.setStatus("current")


class _SleBridgePortControlEgMirrorStatus_Type(Integer32):
    """Custom type sleBridgePortControlEgMirrorStatus based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgePortControlEgMirrorStatus_Type.__name__ = "Integer32"
_SleBridgePortControlEgMirrorStatus_Object = MibScalar
sleBridgePortControlEgMirrorStatus = _SleBridgePortControlEgMirrorStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 12),
    _SleBridgePortControlEgMirrorStatus_Type()
)
sleBridgePortControlEgMirrorStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlEgMirrorStatus.setStatus("current")


class _SleBridgePortControlBcastThreshold_Type(Integer32):
    """Custom type sleBridgePortControlBcastThreshold based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2097150),
    )


_SleBridgePortControlBcastThreshold_Type.__name__ = "Integer32"
_SleBridgePortControlBcastThreshold_Object = MibScalar
sleBridgePortControlBcastThreshold = _SleBridgePortControlBcastThreshold_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 13),
    _SleBridgePortControlBcastThreshold_Type()
)
sleBridgePortControlBcastThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlBcastThreshold.setStatus("current")


class _SleBridgePortControlMcastThreshold_Type(Integer32):
    """Custom type sleBridgePortControlMcastThreshold based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2097150),
    )


_SleBridgePortControlMcastThreshold_Type.__name__ = "Integer32"
_SleBridgePortControlMcastThreshold_Object = MibScalar
sleBridgePortControlMcastThreshold = _SleBridgePortControlMcastThreshold_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 14),
    _SleBridgePortControlMcastThreshold_Type()
)
sleBridgePortControlMcastThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlMcastThreshold.setStatus("current")


class _SleBridgePortControlDlfThreshold_Type(Integer32):
    """Custom type sleBridgePortControlDlfThreshold based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2097150),
    )


_SleBridgePortControlDlfThreshold_Type.__name__ = "Integer32"
_SleBridgePortControlDlfThreshold_Object = MibScalar
sleBridgePortControlDlfThreshold = _SleBridgePortControlDlfThreshold_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 15),
    _SleBridgePortControlDlfThreshold_Type()
)
sleBridgePortControlDlfThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlDlfThreshold.setStatus("current")


class _SleBridgePortControlQinQStatus_Type(Integer32):
    """Custom type sleBridgePortControlQinQStatus based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgePortControlQinQStatus_Type.__name__ = "Integer32"
_SleBridgePortControlQinQStatus_Object = MibScalar
sleBridgePortControlQinQStatus = _SleBridgePortControlQinQStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 16),
    _SleBridgePortControlQinQStatus_Type()
)
sleBridgePortControlQinQStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlQinQStatus.setStatus("current")


class _SleBridgePortControlAdminLinktype_Type(Integer32):
    """Custom type sleBridgePortControlAdminLinktype based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("shared", 0),
          ("pointTopoint", 1),
          ("automatic", 2))
    )


_SleBridgePortControlAdminLinktype_Type.__name__ = "Integer32"
_SleBridgePortControlAdminLinktype_Object = MibScalar
sleBridgePortControlAdminLinktype = _SleBridgePortControlAdminLinktype_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 17),
    _SleBridgePortControlAdminLinktype_Type()
)
sleBridgePortControlAdminLinktype.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlAdminLinktype.setStatus("current")


class _SleBridgePortControlAdminEdgemode_Type(Integer32):
    """Custom type sleBridgePortControlAdminEdgemode based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgePortControlAdminEdgemode_Type.__name__ = "Integer32"
_SleBridgePortControlAdminEdgemode_Object = MibScalar
sleBridgePortControlAdminEdgemode = _SleBridgePortControlAdminEdgemode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 18),
    _SleBridgePortControlAdminEdgemode_Type()
)
sleBridgePortControlAdminEdgemode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlAdminEdgemode.setStatus("current")


class _SleBridgePortControlStpBpduFilter_Type(Integer32):
    """Custom type sleBridgePortControlStpBpduFilter based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgePortControlStpBpduFilter_Type.__name__ = "Integer32"
_SleBridgePortControlStpBpduFilter_Object = MibScalar
sleBridgePortControlStpBpduFilter = _SleBridgePortControlStpBpduFilter_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 19),
    _SleBridgePortControlStpBpduFilter_Type()
)
sleBridgePortControlStpBpduFilter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlStpBpduFilter.setStatus("current")


class _SleBridgePortControlPvlanIsolatedStatus_Type(Integer32):
    """Custom type sleBridgePortControlPvlanIsolatedStatus based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgePortControlPvlanIsolatedStatus_Type.__name__ = "Integer32"
_SleBridgePortControlPvlanIsolatedStatus_Object = MibScalar
sleBridgePortControlPvlanIsolatedStatus = _SleBridgePortControlPvlanIsolatedStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 20),
    _SleBridgePortControlPvlanIsolatedStatus_Type()
)
sleBridgePortControlPvlanIsolatedStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlPvlanIsolatedStatus.setStatus("current")


class _SleBridgePortControlPvlanPromPort_Type(Integer32):
    """Custom type sleBridgePortControlPvlanPromPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleBridgePortControlPvlanPromPort_Type.__name__ = "Integer32"
_SleBridgePortControlPvlanPromPort_Object = MibScalar
sleBridgePortControlPvlanPromPort = _SleBridgePortControlPvlanPromPort_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 21),
    _SleBridgePortControlPvlanPromPort_Type()
)
sleBridgePortControlPvlanPromPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlPvlanPromPort.setStatus("current")


class _SleBridgePortControlStpBpduGuardErrRcv_Type(TruthValue):
    """Custom type sleBridgePortControlStpBpduGuardErrRcv based on TruthValue"""
    defaultValue = 2


_SleBridgePortControlStpBpduGuardErrRcv_Type.__name__ = "TruthValue"
_SleBridgePortControlStpBpduGuardErrRcv_Object = MibScalar
sleBridgePortControlStpBpduGuardErrRcv = _SleBridgePortControlStpBpduGuardErrRcv_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 22),
    _SleBridgePortControlStpBpduGuardErrRcv_Type()
)
sleBridgePortControlStpBpduGuardErrRcv.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlStpBpduGuardErrRcv.setStatus("current")


class _SleBridgePortControlDhcpFilterServer_Type(Integer32):
    """Custom type sleBridgePortControlDhcpFilterServer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgePortControlDhcpFilterServer_Type.__name__ = "Integer32"
_SleBridgePortControlDhcpFilterServer_Object = MibScalar
sleBridgePortControlDhcpFilterServer = _SleBridgePortControlDhcpFilterServer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 23),
    _SleBridgePortControlDhcpFilterServer_Type()
)
sleBridgePortControlDhcpFilterServer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlDhcpFilterServer.setStatus("current")


class _SleBridgePortControlLoopDetectStatus_Type(Integer32):
    """Custom type sleBridgePortControlLoopDetectStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgePortControlLoopDetectStatus_Type.__name__ = "Integer32"
_SleBridgePortControlLoopDetectStatus_Object = MibScalar
sleBridgePortControlLoopDetectStatus = _SleBridgePortControlLoopDetectStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 24),
    _SleBridgePortControlLoopDetectStatus_Type()
)
sleBridgePortControlLoopDetectStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlLoopDetectStatus.setStatus("current")


class _SleBridgePortControlLoopDetectBlock_Type(Integer32):
    """Custom type sleBridgePortControlLoopDetectBlock based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgePortControlLoopDetectBlock_Type.__name__ = "Integer32"
_SleBridgePortControlLoopDetectBlock_Object = MibScalar
sleBridgePortControlLoopDetectBlock = _SleBridgePortControlLoopDetectBlock_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 25),
    _SleBridgePortControlLoopDetectBlock_Type()
)
sleBridgePortControlLoopDetectBlock.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePortControlLoopDetectBlock.setStatus("current")


class _SleBridgePortControlLoopDetectPeriod_Type(Integer32):
    """Custom type sleBridgePortControlLoopDetectPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 60),
    )


_SleBridgePortControlLoopDetectPeriod_Type.__name__ = "Integer32"
_SleBridgePortControlLoopDetectPeriod_Object = MibScalar
sleBridgePortControlLoopDetectPeriod = _SleBridgePortControlLoopDetectPeriod_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 26),
    _SleBridgePortControlLoopDetectPeriod_Type()
)
sleBridgePortControlLoopDetectPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlLoopDetectPeriod.setStatus("current")


class _SleBridgePortControlLoopDetectTimer_Type(Integer32):
    """Custom type sleBridgePortControlLoopDetectTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 86400),
    )


_SleBridgePortControlLoopDetectTimer_Type.__name__ = "Integer32"
_SleBridgePortControlLoopDetectTimer_Object = MibScalar
sleBridgePortControlLoopDetectTimer = _SleBridgePortControlLoopDetectTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 27),
    _SleBridgePortControlLoopDetectTimer_Type()
)
sleBridgePortControlLoopDetectTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlLoopDetectTimer.setStatus("current")


class _SleBridgePortControlNetBIOSFilter_Type(Integer32):
    """Custom type sleBridgePortControlNetBIOSFilter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgePortControlNetBIOSFilter_Type.__name__ = "Integer32"
_SleBridgePortControlNetBIOSFilter_Object = MibScalar
sleBridgePortControlNetBIOSFilter = _SleBridgePortControlNetBIOSFilter_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 28),
    _SleBridgePortControlNetBIOSFilter_Type()
)
sleBridgePortControlNetBIOSFilter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlNetBIOSFilter.setStatus("current")


class _SleBridgePortControlPushInnertag_Type(Integer32):
    """Custom type sleBridgePortControlPushInnertag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgePortControlPushInnertag_Type.__name__ = "Integer32"
_SleBridgePortControlPushInnertag_Object = MibScalar
sleBridgePortControlPushInnertag = _SleBridgePortControlPushInnertag_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 29),
    _SleBridgePortControlPushInnertag_Type()
)
sleBridgePortControlPushInnertag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlPushInnertag.setStatus("current")


class _SleBridgePortControlPopInnertag_Type(Integer32):
    """Custom type sleBridgePortControlPopInnertag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgePortControlPopInnertag_Type.__name__ = "Integer32"
_SleBridgePortControlPopInnertag_Object = MibScalar
sleBridgePortControlPopInnertag = _SleBridgePortControlPopInnertag_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 30),
    _SleBridgePortControlPopInnertag_Type()
)
sleBridgePortControlPopInnertag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlPopInnertag.setStatus("current")


class _SleBridgePortControlInnertag_Type(Integer32):
    """Custom type sleBridgePortControlInnertag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4096),
    )


_SleBridgePortControlInnertag_Type.__name__ = "Integer32"
_SleBridgePortControlInnertag_Object = MibScalar
sleBridgePortControlInnertag = _SleBridgePortControlInnertag_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 31),
    _SleBridgePortControlInnertag_Type()
)
sleBridgePortControlInnertag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlInnertag.setStatus("current")


class _SleBridgePortControlPriority_Type(Integer32):
    """Custom type sleBridgePortControlPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_SleBridgePortControlPriority_Type.__name__ = "Integer32"
_SleBridgePortControlPriority_Object = MibScalar
sleBridgePortControlPriority = _SleBridgePortControlPriority_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 32),
    _SleBridgePortControlPriority_Type()
)
sleBridgePortControlPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlPriority.setStatus("current")


class _SleBridgePortControlInner2outerPri_Type(Integer32):
    """Custom type sleBridgePortControlInner2outerPri based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgePortControlInner2outerPri_Type.__name__ = "Integer32"
_SleBridgePortControlInner2outerPri_Object = MibScalar
sleBridgePortControlInner2outerPri = _SleBridgePortControlInner2outerPri_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 33),
    _SleBridgePortControlInner2outerPri_Type()
)
sleBridgePortControlInner2outerPri.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlInner2outerPri.setStatus("current")


class _SleBridgePortControlInner2outerVid_Type(Integer32):
    """Custom type sleBridgePortControlInner2outerVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgePortControlInner2outerVid_Type.__name__ = "Integer32"
_SleBridgePortControlInner2outerVid_Object = MibScalar
sleBridgePortControlInner2outerVid = _SleBridgePortControlInner2outerVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 34),
    _SleBridgePortControlInner2outerVid_Type()
)
sleBridgePortControlInner2outerVid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlInner2outerVid.setStatus("current")


class _SleBridgePortControlMACLearningStatus_Type(Integer32):
    """Custom type sleBridgePortControlMACLearningStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgePortControlMACLearningStatus_Type.__name__ = "Integer32"
_SleBridgePortControlMACLearningStatus_Object = MibScalar
sleBridgePortControlMACLearningStatus = _SleBridgePortControlMACLearningStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 35),
    _SleBridgePortControlMACLearningStatus_Type()
)
sleBridgePortControlMACLearningStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlMACLearningStatus.setStatus("current")


class _SleBridgePortControlPortBridgeStatus_Type(Integer32):
    """Custom type sleBridgePortControlPortBridgeStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgePortControlPortBridgeStatus_Type.__name__ = "Integer32"
_SleBridgePortControlPortBridgeStatus_Object = MibScalar
sleBridgePortControlPortBridgeStatus = _SleBridgePortControlPortBridgeStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 36),
    _SleBridgePortControlPortBridgeStatus_Type()
)
sleBridgePortControlPortBridgeStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlPortBridgeStatus.setStatus("current")


class _SleBridgePortControlUnknownMcastBlock_Type(Integer32):
    """Custom type sleBridgePortControlUnknownMcastBlock based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgePortControlUnknownMcastBlock_Type.__name__ = "Integer32"
_SleBridgePortControlUnknownMcastBlock_Object = MibScalar
sleBridgePortControlUnknownMcastBlock = _SleBridgePortControlUnknownMcastBlock_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 37),
    _SleBridgePortControlUnknownMcastBlock_Type()
)
sleBridgePortControlUnknownMcastBlock.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlUnknownMcastBlock.setStatus("current")


class _SleBridgePortControlDescription_Type(OctetString):
    """Custom type sleBridgePortControlDescription based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 128),
    )


_SleBridgePortControlDescription_Type.__name__ = "OctetString"
_SleBridgePortControlDescription_Object = MibScalar
sleBridgePortControlDescription = _SleBridgePortControlDescription_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 38),
    _SleBridgePortControlDescription_Type()
)
sleBridgePortControlDescription.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlDescription.setStatus("current")


class _SleBridgePortControlHoldTime_Type(Integer32):
    """Custom type sleBridgePortControlHoldTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleBridgePortControlHoldTime_Type.__name__ = "Integer32"
_SleBridgePortControlHoldTime_Object = MibScalar
sleBridgePortControlHoldTime = _SleBridgePortControlHoldTime_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 39),
    _SleBridgePortControlHoldTime_Type()
)
sleBridgePortControlHoldTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlHoldTime.setStatus("current")


class _SleBridgePortControlMacAntiSpoofing_Type(TruthValue):
    """Custom type sleBridgePortControlMacAntiSpoofing based on TruthValue"""
    subtypeSpec = TruthValue.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_SleBridgePortControlMacAntiSpoofing_Type.__name__ = "TruthValue"
_SleBridgePortControlMacAntiSpoofing_Object = MibScalar
sleBridgePortControlMacAntiSpoofing = _SleBridgePortControlMacAntiSpoofing_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 40),
    _SleBridgePortControlMacAntiSpoofing_Type()
)
sleBridgePortControlMacAntiSpoofing.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlMacAntiSpoofing.setStatus("current")


class _SleBridgePortControlSwitchStatus_Type(Integer32):
    """Custom type sleBridgePortControlSwitchStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("switchedPort", 1),
          ("routedPort", 2))
    )


_SleBridgePortControlSwitchStatus_Type.__name__ = "Integer32"
_SleBridgePortControlSwitchStatus_Object = MibScalar
sleBridgePortControlSwitchStatus = _SleBridgePortControlSwitchStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 41),
    _SleBridgePortControlSwitchStatus_Type()
)
sleBridgePortControlSwitchStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlSwitchStatus.setStatus("current")


class _SleBridgePortControlSwitchMode_Type(Integer32):
    """Custom type sleBridgePortControlSwitchMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              255)
        )
    )
    namedValues = NamedValues(
        *(("access", 1),
          ("hybrid", 2),
          ("trunk", 3),
          ("ce", 4),
          ("cn", 5),
          ("pn", 6),
          ("pe", 7),
          ("cnp", 8),
          ("vip", 9),
          ("pip", 10),
          ("cbp", 11),
          ("invalid", 255))
    )


_SleBridgePortControlSwitchMode_Type.__name__ = "Integer32"
_SleBridgePortControlSwitchMode_Object = MibScalar
sleBridgePortControlSwitchMode = _SleBridgePortControlSwitchMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 42),
    _SleBridgePortControlSwitchMode_Type()
)
sleBridgePortControlSwitchMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlSwitchMode.setStatus("current")


class _SleBridgePortControlSwitchSubMode_Type(Integer32):
    """Custom type sleBridgePortControlSwitchSubMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              255)
        )
    )
    namedValues = NamedValues(
        *(("access", 1),
          ("hybrid", 2),
          ("trunk", 3),
          ("ce", 4),
          ("cn", 5),
          ("pn", 6),
          ("pe", 7),
          ("cnp", 8),
          ("vip", 9),
          ("pip", 10),
          ("cbp", 11),
          ("invalid", 255))
    )


_SleBridgePortControlSwitchSubMode_Type.__name__ = "Integer32"
_SleBridgePortControlSwitchSubMode_Object = MibScalar
sleBridgePortControlSwitchSubMode = _SleBridgePortControlSwitchSubMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 43),
    _SleBridgePortControlSwitchSubMode_Type()
)
sleBridgePortControlSwitchSubMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlSwitchSubMode.setStatus("current")


class _SleBridgePortControlSwitchDefaultVlan_Type(Integer32):
    """Custom type sleBridgePortControlSwitchDefaultVlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleBridgePortControlSwitchDefaultVlan_Type.__name__ = "Integer32"
_SleBridgePortControlSwitchDefaultVlan_Object = MibScalar
sleBridgePortControlSwitchDefaultVlan = _SleBridgePortControlSwitchDefaultVlan_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 44),
    _SleBridgePortControlSwitchDefaultVlan_Type()
)
sleBridgePortControlSwitchDefaultVlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlSwitchDefaultVlan.setStatus("current")


class _SleBridgePortControlSwitchIngressFilter_Type(Integer32):
    """Custom type sleBridgePortControlSwitchIngressFilter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgePortControlSwitchIngressFilter_Type.__name__ = "Integer32"
_SleBridgePortControlSwitchIngressFilter_Object = MibScalar
sleBridgePortControlSwitchIngressFilter = _SleBridgePortControlSwitchIngressFilter_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 45),
    _SleBridgePortControlSwitchIngressFilter_Type()
)
sleBridgePortControlSwitchIngressFilter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlSwitchIngressFilter.setStatus("current")


class _SleBridgePortControlSwitchAccFrameType_Type(Bits):
    """Custom type sleBridgePortControlSwitchAccFrameType based on Bits"""
    namedValues = NamedValues(
        *(("allType", 0),
          ("tagged", 1),
          ("unTagged", 2))
    )

_SleBridgePortControlSwitchAccFrameType_Type.__name__ = "Bits"
_SleBridgePortControlSwitchAccFrameType_Object = MibScalar
sleBridgePortControlSwitchAccFrameType = _SleBridgePortControlSwitchAccFrameType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 46),
    _SleBridgePortControlSwitchAccFrameType_Type()
)
sleBridgePortControlSwitchAccFrameType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlSwitchAccFrameType.setStatus("current")


class _SleBridgePortControlSwitchNativeVid_Type(Integer32):
    """Custom type sleBridgePortControlSwitchNativeVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleBridgePortControlSwitchNativeVid_Type.__name__ = "Integer32"
_SleBridgePortControlSwitchNativeVid_Object = MibScalar
sleBridgePortControlSwitchNativeVid = _SleBridgePortControlSwitchNativeVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 47),
    _SleBridgePortControlSwitchNativeVid_Type()
)
sleBridgePortControlSwitchNativeVid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlSwitchNativeVid.setStatus("current")
_SleBridgePortControlSwitchAllowedVlan_Type = OctetString
_SleBridgePortControlSwitchAllowedVlan_Object = MibScalar
sleBridgePortControlSwitchAllowedVlan = _SleBridgePortControlSwitchAllowedVlan_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 48),
    _SleBridgePortControlSwitchAllowedVlan_Type()
)
sleBridgePortControlSwitchAllowedVlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlSwitchAllowedVlan.setStatus("current")
_SleBridgePortControlSwitchAllowedVlanEtag_Type = OctetString
_SleBridgePortControlSwitchAllowedVlanEtag_Object = MibScalar
sleBridgePortControlSwitchAllowedVlanEtag = _SleBridgePortControlSwitchAllowedVlanEtag_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 49),
    _SleBridgePortControlSwitchAllowedVlanEtag_Type()
)
sleBridgePortControlSwitchAllowedVlanEtag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlSwitchAllowedVlanEtag.setStatus("current")
_SleBridgePortControlSwitchStaticChannelGroup_Type = OctetString
_SleBridgePortControlSwitchStaticChannelGroup_Object = MibScalar
sleBridgePortControlSwitchStaticChannelGroup = _SleBridgePortControlSwitchStaticChannelGroup_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 50),
    _SleBridgePortControlSwitchStaticChannelGroup_Type()
)
sleBridgePortControlSwitchStaticChannelGroup.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlSwitchStaticChannelGroup.setStatus("current")


class _SleBridgePortControlSwitchChannelLoadbalance_Type(Integer32):
    """Custom type sleBridgePortControlSwitchChannelLoadbalance based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("dstMac", 1),
          ("srcMac", 2),
          ("srcDstMac", 3),
          ("srcIp", 4),
          ("dstIp", 5),
          ("srcDstIp", 6),
          ("srcPort", 7),
          ("dstPort", 8),
          ("srcDstPort", 9))
    )


_SleBridgePortControlSwitchChannelLoadbalance_Type.__name__ = "Integer32"
_SleBridgePortControlSwitchChannelLoadbalance_Object = MibScalar
sleBridgePortControlSwitchChannelLoadbalance = _SleBridgePortControlSwitchChannelLoadbalance_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 51),
    _SleBridgePortControlSwitchChannelLoadbalance_Type()
)
sleBridgePortControlSwitchChannelLoadbalance.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlSwitchChannelLoadbalance.setStatus("current")


class _SleBridgePortControlSwitchAggrType_Type(Integer32):
    """Custom type sleBridgePortControlSwitchAggrType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("noneAggregated", 0),
          ("aggregatedStatic", 1),
          ("aggregatedLacp", 2),
          ("aggregatorStatic", 3),
          ("aggregatorLacp", 4))
    )


_SleBridgePortControlSwitchAggrType_Type.__name__ = "Integer32"
_SleBridgePortControlSwitchAggrType_Object = MibScalar
sleBridgePortControlSwitchAggrType = _SleBridgePortControlSwitchAggrType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 52),
    _SleBridgePortControlSwitchAggrType_Type()
)
sleBridgePortControlSwitchAggrType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlSwitchAggrType.setStatus("current")


class _SleBridgePortControlSwitchAggrId_Type(Integer32):
    """Custom type sleBridgePortControlSwitchAggrId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 12),
    )


_SleBridgePortControlSwitchAggrId_Type.__name__ = "Integer32"
_SleBridgePortControlSwitchAggrId_Object = MibScalar
sleBridgePortControlSwitchAggrId = _SleBridgePortControlSwitchAggrId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 53),
    _SleBridgePortControlSwitchAggrId_Type()
)
sleBridgePortControlSwitchAggrId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlSwitchAggrId.setStatus("current")


class _SleBridgePortControlSwitchAggrMode_Type(Integer32):
    """Custom type sleBridgePortControlSwitchAggrMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noneAggregated", 0),
          ("aggregatedActive", 1),
          ("aggregatedPassive", 2))
    )


_SleBridgePortControlSwitchAggrMode_Type.__name__ = "Integer32"
_SleBridgePortControlSwitchAggrMode_Object = MibScalar
sleBridgePortControlSwitchAggrMode = _SleBridgePortControlSwitchAggrMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 54),
    _SleBridgePortControlSwitchAggrMode_Type()
)
sleBridgePortControlSwitchAggrMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlSwitchAggrMode.setStatus("current")


class _SleBridgePortControlLoopDetectPeriodMs_Type(Integer32):
    """Custom type sleBridgePortControlLoopDetectPeriodMs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 60),
    )


_SleBridgePortControlLoopDetectPeriodMs_Type.__name__ = "Integer32"
_SleBridgePortControlLoopDetectPeriodMs_Object = MibScalar
sleBridgePortControlLoopDetectPeriodMs = _SleBridgePortControlLoopDetectPeriodMs_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 91),
    _SleBridgePortControlLoopDetectPeriodMs_Type()
)
sleBridgePortControlLoopDetectPeriodMs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlLoopDetectPeriodMs.setStatus("current")


class _SleBridgePortControlLoopDetectAdminCount_Type(Integer32):
    """Custom type sleBridgePortControlLoopDetectAdminCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 60),
    )


_SleBridgePortControlLoopDetectAdminCount_Type.__name__ = "Integer32"
_SleBridgePortControlLoopDetectAdminCount_Object = MibScalar
sleBridgePortControlLoopDetectAdminCount = _SleBridgePortControlLoopDetectAdminCount_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 92),
    _SleBridgePortControlLoopDetectAdminCount_Type()
)
sleBridgePortControlLoopDetectAdminCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlLoopDetectAdminCount.setStatus("current")


class _SleBridgePortControlLoopDetectVlan_Type(Integer32):
    """Custom type sleBridgePortControlLoopDetectVlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleBridgePortControlLoopDetectVlan_Type.__name__ = "Integer32"
_SleBridgePortControlLoopDetectVlan_Object = MibScalar
sleBridgePortControlLoopDetectVlan = _SleBridgePortControlLoopDetectVlan_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 93),
    _SleBridgePortControlLoopDetectVlan_Type()
)
sleBridgePortControlLoopDetectVlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlLoopDetectVlan.setStatus("current")


class _SleBridgePortControlMaxNewHosts_Type(Integer32):
    """Custom type sleBridgePortControlMaxNewHosts based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, -1),
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 65535),
    )


_SleBridgePortControlMaxNewHosts_Type.__name__ = "Integer32"
_SleBridgePortControlMaxNewHosts_Object = MibScalar
sleBridgePortControlMaxNewHosts = _SleBridgePortControlMaxNewHosts_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 94),
    _SleBridgePortControlMaxNewHosts_Type()
)
sleBridgePortControlMaxNewHosts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlMaxNewHosts.setStatus("current")


class _SleBridgePortControlStpStatus_Type(Integer32):
    """Custom type sleBridgePortControlStpStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgePortControlStpStatus_Type.__name__ = "Integer32"
_SleBridgePortControlStpStatus_Object = MibScalar
sleBridgePortControlStpStatus = _SleBridgePortControlStpStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 95),
    _SleBridgePortControlStpStatus_Type()
)
sleBridgePortControlStpStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlStpStatus.setStatus("current")


class _SleBridgePortControlStpBpduGuard_Type(Integer32):
    """Custom type sleBridgePortControlStpBpduGuard based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgePortControlStpBpduGuard_Type.__name__ = "Integer32"
_SleBridgePortControlStpBpduGuard_Object = MibScalar
sleBridgePortControlStpBpduGuard = _SleBridgePortControlStpBpduGuard_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 96),
    _SleBridgePortControlStpBpduGuard_Type()
)
sleBridgePortControlStpBpduGuard.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlStpBpduGuard.setStatus("current")


class _SleBridgePortControlOuterTpid_Type(Integer32):
    """Custom type sleBridgePortControlOuterTpid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_SleBridgePortControlOuterTpid_Type.__name__ = "Integer32"
_SleBridgePortControlOuterTpid_Object = MibScalar
sleBridgePortControlOuterTpid = _SleBridgePortControlOuterTpid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 97),
    _SleBridgePortControlOuterTpid_Type()
)
sleBridgePortControlOuterTpid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlOuterTpid.setStatus("current")


class _SleBridgePortControlMirrorMonitor_Type(Integer32):
    """Custom type sleBridgePortControlMirrorMonitor based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgePortControlMirrorMonitor_Type.__name__ = "Integer32"
_SleBridgePortControlMirrorMonitor_Object = MibScalar
sleBridgePortControlMirrorMonitor = _SleBridgePortControlMirrorMonitor_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 98),
    _SleBridgePortControlMirrorMonitor_Type()
)
sleBridgePortControlMirrorMonitor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlMirrorMonitor.setStatus("current")
_SleBridgePortControlBandwidth_Type = OctetString
_SleBridgePortControlBandwidth_Object = MibScalar
sleBridgePortControlBandwidth = _SleBridgePortControlBandwidth_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 99),
    _SleBridgePortControlBandwidth_Type()
)
sleBridgePortControlBandwidth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlBandwidth.setStatus("current")
_SleBridgePortControlAlias_Type = OctetString
_SleBridgePortControlAlias_Object = MibScalar
sleBridgePortControlAlias = _SleBridgePortControlAlias_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 100),
    _SleBridgePortControlAlias_Type()
)
sleBridgePortControlAlias.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlAlias.setStatus("current")


class _SleBridgePortControlMulticast_Type(Integer32):
    """Custom type sleBridgePortControlMulticast based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgePortControlMulticast_Type.__name__ = "Integer32"
_SleBridgePortControlMulticast_Object = MibScalar
sleBridgePortControlMulticast = _SleBridgePortControlMulticast_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 101),
    _SleBridgePortControlMulticast_Type()
)
sleBridgePortControlMulticast.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlMulticast.setStatus("current")


class _SleBridgePortControlFloodBlock_Type(Bits):
    """Custom type sleBridgePortControlFloodBlock based on Bits"""
    namedValues = NamedValues(
        *(("bcast", 0),
          ("dlf", 1),
          ("mcast", 2))
    )

_SleBridgePortControlFloodBlock_Type.__name__ = "Bits"
_SleBridgePortControlFloodBlock_Object = MibScalar
sleBridgePortControlFloodBlock = _SleBridgePortControlFloodBlock_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 2, 102),
    _SleBridgePortControlFloodBlock_Type()
)
sleBridgePortControlFloodBlock.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePortControlFloodBlock.setStatus("current")
_SleBridgePortNotification_ObjectIdentity = ObjectIdentity
sleBridgePortNotification = _SleBridgePortNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3)
)
_SleVlan_ObjectIdentity = ObjectIdentity
sleVlan = _SleVlan_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3)
)
_SleVlanTable_Object = MibTable
sleVlanTable = _SleVlanTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 1)
)
if mibBuilder.loadTexts:
    sleVlanTable.setStatus("current")
_SleVlanEntry_Object = MibTableRow
sleVlanEntry = _SleVlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 1, 1)
)
sleVlanEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleVlanIndex"),
)
if mibBuilder.loadTexts:
    sleVlanEntry.setStatus("current")


class _SleVlanIndex_Type(Integer32):
    """Custom type sleVlanIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleVlanIndex_Type.__name__ = "Integer32"
_SleVlanIndex_Object = MibTableColumn
sleVlanIndex = _SleVlanIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 1, 1, 1),
    _SleVlanIndex_Type()
)
sleVlanIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanIndex.setStatus("current")
_SleVlanIfIndex_Type = Integer32
_SleVlanIfIndex_Object = MibTableColumn
sleVlanIfIndex = _SleVlanIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 1, 1, 2),
    _SleVlanIfIndex_Type()
)
sleVlanIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanIfIndex.setStatus("current")
_SleVlanName_Type = OctetString
_SleVlanName_Object = MibTableColumn
sleVlanName = _SleVlanName_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 1, 1, 3),
    _SleVlanName_Type()
)
sleVlanName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanName.setStatus("current")


class _SleVlanStatus_Type(Integer32):
    """Custom type sleVlanStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("static", 1),
          ("dynamic", 2))
    )


_SleVlanStatus_Type.__name__ = "Integer32"
_SleVlanStatus_Object = MibTableColumn
sleVlanStatus = _SleVlanStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 1, 1, 4),
    _SleVlanStatus_Type()
)
sleVlanStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanStatus.setStatus("current")
_SleVlanEgressPorts_Type = OctetString
_SleVlanEgressPorts_Object = MibTableColumn
sleVlanEgressPorts = _SleVlanEgressPorts_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 1, 1, 5),
    _SleVlanEgressPorts_Type()
)
sleVlanEgressPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanEgressPorts.setStatus("current")
_SleVlanUnTaggedPorts_Type = OctetString
_SleVlanUnTaggedPorts_Object = MibTableColumn
sleVlanUnTaggedPorts = _SleVlanUnTaggedPorts_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 1, 1, 6),
    _SleVlanUnTaggedPorts_Type()
)
sleVlanUnTaggedPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanUnTaggedPorts.setStatus("current")
_SleVlanCreationTime_Type = TimeTicks
_SleVlanCreationTime_Object = MibTableColumn
sleVlanCreationTime = _SleVlanCreationTime_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 1, 1, 7),
    _SleVlanCreationTime_Type()
)
sleVlanCreationTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanCreationTime.setStatus("current")


class _SleVlanAgeingTime_Type(Integer32):
    """Custom type sleVlanAgeingTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, -1),
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(10, 21474830),
    )


_SleVlanAgeingTime_Type.__name__ = "Integer32"
_SleVlanAgeingTime_Object = MibTableColumn
sleVlanAgeingTime = _SleVlanAgeingTime_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 1, 1, 8),
    _SleVlanAgeingTime_Type()
)
sleVlanAgeingTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanAgeingTime.setStatus("current")
_SleVlanTagTxCounter_Type = Counter64
_SleVlanTagTxCounter_Object = MibTableColumn
sleVlanTagTxCounter = _SleVlanTagTxCounter_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 1, 1, 9),
    _SleVlanTagTxCounter_Type()
)
sleVlanTagTxCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanTagTxCounter.setStatus("current")


class _SleVlanDescription_Type(OctetString):
    """Custom type sleVlanDescription based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_SleVlanDescription_Type.__name__ = "OctetString"
_SleVlanDescription_Object = MibTableColumn
sleVlanDescription = _SleVlanDescription_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 1, 1, 10),
    _SleVlanDescription_Type()
)
sleVlanDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanDescription.setStatus("current")


class _SleVlanElineEnable_Type(Integer32):
    """Custom type sleVlanElineEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleVlanElineEnable_Type.__name__ = "Integer32"
_SleVlanElineEnable_Object = MibTableColumn
sleVlanElineEnable = _SleVlanElineEnable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 1, 1, 11),
    _SleVlanElineEnable_Type()
)
sleVlanElineEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanElineEnable.setStatus("current")


class _SleVlanOperStatus_Type(Integer32):
    """Custom type sleVlanOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 0),
          ("inactive", 1),
          ("active", 2))
    )


_SleVlanOperStatus_Type.__name__ = "Integer32"
_SleVlanOperStatus_Object = MibTableColumn
sleVlanOperStatus = _SleVlanOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 1, 1, 12),
    _SleVlanOperStatus_Type()
)
sleVlanOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanOperStatus.setStatus("current")
_SleVlanMtu_Type = Integer32
_SleVlanMtu_Object = MibTableColumn
sleVlanMtu = _SleVlanMtu_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 1, 1, 13),
    _SleVlanMtu_Type()
)
sleVlanMtu.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanMtu.setStatus("current")


class _SleVlanType_Type(Integer32):
    """Custom type sleVlanType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("customer", 1),
          ("service", 2))
    )


_SleVlanType_Type.__name__ = "Integer32"
_SleVlanType_Object = MibTableColumn
sleVlanType = _SleVlanType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 1, 1, 14),
    _SleVlanType_Type()
)
sleVlanType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanType.setStatus("current")
_SleVlanControl_ObjectIdentity = ObjectIdentity
sleVlanControl = _SleVlanControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 2)
)


class _SleVlanControlRequest_Type(Integer32):
    """Custom type sleVlanControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("createVlan", 1),
          ("destroyVlan", 2),
          ("setVlanPortProfile", 3),
          ("setVlanAgeingTime", 4),
          ("createVlanRange", 5),
          ("setVlanDesc", 6),
          ("createElineVlan", 7),
          ("setVlanOperStatus", 8),
          ("setVlanMtu", 9),
          ("setVlanServiceOperStatus", 10))
    )


_SleVlanControlRequest_Type.__name__ = "Integer32"
_SleVlanControlRequest_Object = MibScalar
sleVlanControlRequest = _SleVlanControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 2, 1),
    _SleVlanControlRequest_Type()
)
sleVlanControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanControlRequest.setStatus("current")
_SleVlanControlStatus_Type = SleControlStatusType
_SleVlanControlStatus_Object = MibScalar
sleVlanControlStatus = _SleVlanControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 2, 2),
    _SleVlanControlStatus_Type()
)
sleVlanControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanControlStatus.setStatus("current")
_SleVlanControlTimer_Type = Gauge32
_SleVlanControlTimer_Object = MibScalar
sleVlanControlTimer = _SleVlanControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 2, 3),
    _SleVlanControlTimer_Type()
)
sleVlanControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanControlTimer.setStatus("current")
_SleVlanControlTimeStamp_Type = TimeTicks
_SleVlanControlTimeStamp_Object = MibScalar
sleVlanControlTimeStamp = _SleVlanControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 2, 4),
    _SleVlanControlTimeStamp_Type()
)
sleVlanControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanControlTimeStamp.setStatus("current")
_SleVlanControlReqResult_Type = SleControlRequestResultType
_SleVlanControlReqResult_Object = MibScalar
sleVlanControlReqResult = _SleVlanControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 2, 5),
    _SleVlanControlReqResult_Type()
)
sleVlanControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanControlReqResult.setStatus("current")


class _SleVlanControlIndex_Type(Integer32):
    """Custom type sleVlanControlIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleVlanControlIndex_Type.__name__ = "Integer32"
_SleVlanControlIndex_Object = MibScalar
sleVlanControlIndex = _SleVlanControlIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 2, 6),
    _SleVlanControlIndex_Type()
)
sleVlanControlIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanControlIndex.setStatus("current")
_SleVlanControlName_Type = OctetString
_SleVlanControlName_Object = MibScalar
sleVlanControlName = _SleVlanControlName_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 2, 7),
    _SleVlanControlName_Type()
)
sleVlanControlName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanControlName.setStatus("current")
_SleVlanControlEgressPorts_Type = OctetString
_SleVlanControlEgressPorts_Object = MibScalar
sleVlanControlEgressPorts = _SleVlanControlEgressPorts_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 2, 8),
    _SleVlanControlEgressPorts_Type()
)
sleVlanControlEgressPorts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanControlEgressPorts.setStatus("current")
_SleVlanControlUnTaggedPorts_Type = OctetString
_SleVlanControlUnTaggedPorts_Object = MibScalar
sleVlanControlUnTaggedPorts = _SleVlanControlUnTaggedPorts_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 2, 9),
    _SleVlanControlUnTaggedPorts_Type()
)
sleVlanControlUnTaggedPorts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanControlUnTaggedPorts.setStatus("current")


class _SleVlanControlAgeingTime_Type(Integer32):
    """Custom type sleVlanControlAgeingTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, -1),
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(10, 21474830),
    )


_SleVlanControlAgeingTime_Type.__name__ = "Integer32"
_SleVlanControlAgeingTime_Object = MibScalar
sleVlanControlAgeingTime = _SleVlanControlAgeingTime_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 2, 10),
    _SleVlanControlAgeingTime_Type()
)
sleVlanControlAgeingTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanControlAgeingTime.setStatus("current")


class _SleVlanControlIndexTo_Type(Integer32):
    """Custom type sleVlanControlIndexTo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleVlanControlIndexTo_Type.__name__ = "Integer32"
_SleVlanControlIndexTo_Object = MibScalar
sleVlanControlIndexTo = _SleVlanControlIndexTo_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 2, 11),
    _SleVlanControlIndexTo_Type()
)
sleVlanControlIndexTo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanControlIndexTo.setStatus("current")


class _SleVlanControlDescription_Type(OctetString):
    """Custom type sleVlanControlDescription based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_SleVlanControlDescription_Type.__name__ = "OctetString"
_SleVlanControlDescription_Object = MibScalar
sleVlanControlDescription = _SleVlanControlDescription_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 2, 12),
    _SleVlanControlDescription_Type()
)
sleVlanControlDescription.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanControlDescription.setStatus("current")


class _SleVlanControlElineEnable_Type(Integer32):
    """Custom type sleVlanControlElineEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleVlanControlElineEnable_Type.__name__ = "Integer32"
_SleVlanControlElineEnable_Object = MibScalar
sleVlanControlElineEnable = _SleVlanControlElineEnable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 2, 13),
    _SleVlanControlElineEnable_Type()
)
sleVlanControlElineEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanControlElineEnable.setStatus("current")


class _SleVlanControlOperStatus_Type(Integer32):
    """Custom type sleVlanControlOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 0),
          ("inactive", 1),
          ("active", 2))
    )


_SleVlanControlOperStatus_Type.__name__ = "Integer32"
_SleVlanControlOperStatus_Object = MibScalar
sleVlanControlOperStatus = _SleVlanControlOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 2, 14),
    _SleVlanControlOperStatus_Type()
)
sleVlanControlOperStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanControlOperStatus.setStatus("current")
_SleVlanControlMtu_Type = Integer32
_SleVlanControlMtu_Object = MibScalar
sleVlanControlMtu = _SleVlanControlMtu_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 2, 15),
    _SleVlanControlMtu_Type()
)
sleVlanControlMtu.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanControlMtu.setStatus("current")


class _SleVlanControlType_Type(Integer32):
    """Custom type sleVlanControlType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("customer", 1),
          ("service", 2))
    )


_SleVlanControlType_Type.__name__ = "Integer32"
_SleVlanControlType_Object = MibScalar
sleVlanControlType = _SleVlanControlType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 2, 16),
    _SleVlanControlType_Type()
)
sleVlanControlType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanControlType.setStatus("current")


class _SleVlanControlServiceType_Type(Integer32):
    """Custom type sleVlanControlServiceType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("pointToPoint", 1),
          ("multipointToMultipoint", 2),
          ("rootedToMultipoint", 3))
    )


_SleVlanControlServiceType_Type.__name__ = "Integer32"
_SleVlanControlServiceType_Object = MibScalar
sleVlanControlServiceType = _SleVlanControlServiceType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 2, 17),
    _SleVlanControlServiceType_Type()
)
sleVlanControlServiceType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanControlServiceType.setStatus("current")
_SleVlanNotification_ObjectIdentity = ObjectIdentity
sleVlanNotification = _SleVlanNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 3)
)
_SleServiceVlanTable_Object = MibTable
sleServiceVlanTable = _SleServiceVlanTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 4)
)
if mibBuilder.loadTexts:
    sleServiceVlanTable.setStatus("current")
_SleServiceVlanEntry_Object = MibTableRow
sleServiceVlanEntry = _SleServiceVlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 4, 1)
)
sleServiceVlanEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleVlanIndex"),
)
if mibBuilder.loadTexts:
    sleServiceVlanEntry.setStatus("current")


class _SleServiceVlanIndex_Type(Integer32):
    """Custom type sleServiceVlanIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleServiceVlanIndex_Type.__name__ = "Integer32"
_SleServiceVlanIndex_Object = MibTableColumn
sleServiceVlanIndex = _SleServiceVlanIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 4, 1, 1),
    _SleServiceVlanIndex_Type()
)
sleServiceVlanIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleServiceVlanIndex.setStatus("current")
_SleServiceVlanName_Type = OctetString
_SleServiceVlanName_Object = MibTableColumn
sleServiceVlanName = _SleServiceVlanName_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 4, 1, 2),
    _SleServiceVlanName_Type()
)
sleServiceVlanName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleServiceVlanName.setStatus("current")


class _SleServiceVlanDescription_Type(OctetString):
    """Custom type sleServiceVlanDescription based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_SleServiceVlanDescription_Type.__name__ = "OctetString"
_SleServiceVlanDescription_Object = MibTableColumn
sleServiceVlanDescription = _SleServiceVlanDescription_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 4, 1, 3),
    _SleServiceVlanDescription_Type()
)
sleServiceVlanDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleServiceVlanDescription.setStatus("current")


class _SleServiceVlanOperStatus_Type(Integer32):
    """Custom type sleServiceVlanOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 0),
          ("inactive", 1),
          ("active", 2))
    )


_SleServiceVlanOperStatus_Type.__name__ = "Integer32"
_SleServiceVlanOperStatus_Object = MibTableColumn
sleServiceVlanOperStatus = _SleServiceVlanOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 4, 1, 4),
    _SleServiceVlanOperStatus_Type()
)
sleServiceVlanOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleServiceVlanOperStatus.setStatus("current")
_SleServiceVlanMtu_Type = Integer32
_SleServiceVlanMtu_Object = MibTableColumn
sleServiceVlanMtu = _SleServiceVlanMtu_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 4, 1, 5),
    _SleServiceVlanMtu_Type()
)
sleServiceVlanMtu.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleServiceVlanMtu.setStatus("current")


class _SleServiceVlanStatus_Type(Integer32):
    """Custom type sleServiceVlanStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("static", 1),
          ("dynamic", 2))
    )


_SleServiceVlanStatus_Type.__name__ = "Integer32"
_SleServiceVlanStatus_Object = MibTableColumn
sleServiceVlanStatus = _SleServiceVlanStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 4, 1, 6),
    _SleServiceVlanStatus_Type()
)
sleServiceVlanStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleServiceVlanStatus.setStatus("current")


class _SleServiceVlanType_Type(Integer32):
    """Custom type sleServiceVlanType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("customer", 1),
          ("service", 2))
    )


_SleServiceVlanType_Type.__name__ = "Integer32"
_SleServiceVlanType_Object = MibTableColumn
sleServiceVlanType = _SleServiceVlanType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 4, 1, 7),
    _SleServiceVlanType_Type()
)
sleServiceVlanType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleServiceVlanType.setStatus("current")


class _SleServiceVlanSeviceType_Type(Integer32):
    """Custom type sleServiceVlanSeviceType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("pointToPoint", 1),
          ("multipointToMultipoint", 2),
          ("rootedToMultipoint", 3))
    )


_SleServiceVlanSeviceType_Type.__name__ = "Integer32"
_SleServiceVlanSeviceType_Object = MibTableColumn
sleServiceVlanSeviceType = _SleServiceVlanSeviceType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 4, 1, 8),
    _SleServiceVlanSeviceType_Type()
)
sleServiceVlanSeviceType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleServiceVlanSeviceType.setStatus("current")
_SleVlanMap_ObjectIdentity = ObjectIdentity
sleVlanMap = _SleVlanMap_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 4)
)
_SleVlanMapTable_Object = MibTable
sleVlanMapTable = _SleVlanMapTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 4, 1)
)
if mibBuilder.loadTexts:
    sleVlanMapTable.setStatus("current")
_SleVlanMapEntry_Object = MibTableRow
sleVlanMapEntry = _SleVlanMapEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 4, 1, 1)
)
sleVlanMapEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleVlanIndex"),
)
if mibBuilder.loadTexts:
    sleVlanMapEntry.setStatus("current")
_SleVlanMapFid_Type = Unsigned32
_SleVlanMapFid_Object = MibTableColumn
sleVlanMapFid = _SleVlanMapFid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 4, 1, 1, 1),
    _SleVlanMapFid_Type()
)
sleVlanMapFid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanMapFid.setStatus("current")
_SleVlanMapStpId_Type = Unsigned32
_SleVlanMapStpId_Object = MibTableColumn
sleVlanMapStpId = _SleVlanMapStpId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 4, 1, 1, 2),
    _SleVlanMapStpId_Type()
)
sleVlanMapStpId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanMapStpId.setStatus("current")
_SleVlanMapErpDomainId_Type = Unsigned32
_SleVlanMapErpDomainId_Object = MibTableColumn
sleVlanMapErpDomainId = _SleVlanMapErpDomainId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 4, 1, 1, 3),
    _SleVlanMapErpDomainId_Type()
)
sleVlanMapErpDomainId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanMapErpDomainId.setStatus("current")
_SleVlanMapControl_ObjectIdentity = ObjectIdentity
sleVlanMapControl = _SleVlanMapControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 4, 2)
)


class _SleVlanMapControlRequest_Type(Integer32):
    """Custom type sleVlanMapControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("setVlanMapFid", 1),
          ("setVlanMapStpId", 2),
          ("setVlanMapErpDomainId", 3))
    )


_SleVlanMapControlRequest_Type.__name__ = "Integer32"
_SleVlanMapControlRequest_Object = MibScalar
sleVlanMapControlRequest = _SleVlanMapControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 4, 2, 1),
    _SleVlanMapControlRequest_Type()
)
sleVlanMapControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanMapControlRequest.setStatus("current")
_SleVlanMapControlStatus_Type = SleControlStatusType
_SleVlanMapControlStatus_Object = MibScalar
sleVlanMapControlStatus = _SleVlanMapControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 4, 2, 2),
    _SleVlanMapControlStatus_Type()
)
sleVlanMapControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanMapControlStatus.setStatus("current")
_SleVlanMapControlTimer_Type = Gauge32
_SleVlanMapControlTimer_Object = MibScalar
sleVlanMapControlTimer = _SleVlanMapControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 4, 2, 3),
    _SleVlanMapControlTimer_Type()
)
sleVlanMapControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanMapControlTimer.setStatus("current")
_SleVlanMapControlTimeStamp_Type = TimeTicks
_SleVlanMapControlTimeStamp_Object = MibScalar
sleVlanMapControlTimeStamp = _SleVlanMapControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 4, 2, 4),
    _SleVlanMapControlTimeStamp_Type()
)
sleVlanMapControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanMapControlTimeStamp.setStatus("current")
_SleVlanMapControlReqResult_Type = SleControlRequestResultType
_SleVlanMapControlReqResult_Object = MibScalar
sleVlanMapControlReqResult = _SleVlanMapControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 4, 2, 5),
    _SleVlanMapControlReqResult_Type()
)
sleVlanMapControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanMapControlReqResult.setStatus("current")


class _SleVlanMapControlIndex_Type(Integer32):
    """Custom type sleVlanMapControlIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleVlanMapControlIndex_Type.__name__ = "Integer32"
_SleVlanMapControlIndex_Object = MibScalar
sleVlanMapControlIndex = _SleVlanMapControlIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 4, 2, 6),
    _SleVlanMapControlIndex_Type()
)
sleVlanMapControlIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanMapControlIndex.setStatus("current")
_SleVlanMapControlFid_Type = Unsigned32
_SleVlanMapControlFid_Object = MibScalar
sleVlanMapControlFid = _SleVlanMapControlFid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 4, 2, 7),
    _SleVlanMapControlFid_Type()
)
sleVlanMapControlFid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanMapControlFid.setStatus("current")
_SleVlanMapControlStpId_Type = Unsigned32
_SleVlanMapControlStpId_Object = MibScalar
sleVlanMapControlStpId = _SleVlanMapControlStpId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 4, 2, 8),
    _SleVlanMapControlStpId_Type()
)
sleVlanMapControlStpId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanMapControlStpId.setStatus("current")
_SleVlanMapControlErpDomainId_Type = Unsigned32
_SleVlanMapControlErpDomainId_Object = MibScalar
sleVlanMapControlErpDomainId = _SleVlanMapControlErpDomainId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 4, 2, 9),
    _SleVlanMapControlErpDomainId_Type()
)
sleVlanMapControlErpDomainId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanMapControlErpDomainId.setStatus("current")
_SleVlanMapNotification_ObjectIdentity = ObjectIdentity
sleVlanMapNotification = _SleVlanMapNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 4, 3)
)
_SleStp_ObjectIdentity = ObjectIdentity
sleStp = _SleStp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 5)
)
_SleStpInfo_ObjectIdentity = ObjectIdentity
sleStpInfo = _SleStpInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 5, 1)
)


class _SleStpOperationMode_Type(Integer32):
    """Custom type sleStpOperationMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("stp", 0),
          ("rstp", 1),
          ("mstp", 3),
          ("pvstp", 4),
          ("pvrstp", 5),
          ("pvrstpPlus", 6),
          ("pvstpPlus", 7))
    )


_SleStpOperationMode_Type.__name__ = "Integer32"
_SleStpOperationMode_Object = MibScalar
sleStpOperationMode = _SleStpOperationMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 5, 1, 1),
    _SleStpOperationMode_Type()
)
sleStpOperationMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpOperationMode.setStatus("current")


class _SleStpFormatSelector_Type(Integer32):
    """Custom type sleStpFormatSelector based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_SleStpFormatSelector_Type.__name__ = "Integer32"
_SleStpFormatSelector_Object = MibScalar
sleStpFormatSelector = _SleStpFormatSelector_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 5, 1, 2),
    _SleStpFormatSelector_Type()
)
sleStpFormatSelector.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpFormatSelector.setStatus("current")


class _SleStpConfigureName_Type(OctetString):
    """Custom type sleStpConfigureName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_SleStpConfigureName_Type.__name__ = "OctetString"
_SleStpConfigureName_Object = MibScalar
sleStpConfigureName = _SleStpConfigureName_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 5, 1, 3),
    _SleStpConfigureName_Type()
)
sleStpConfigureName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleStpConfigureName.setStatus("current")


class _SleStpRevisionLevel_Type(Integer32):
    """Custom type sleStpRevisionLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_SleStpRevisionLevel_Type.__name__ = "Integer32"
_SleStpRevisionLevel_Object = MibScalar
sleStpRevisionLevel = _SleStpRevisionLevel_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 5, 1, 4),
    _SleStpRevisionLevel_Type()
)
sleStpRevisionLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpRevisionLevel.setStatus("current")


class _SleStpFwdDelay_Type(Integer32):
    """Custom type sleStpFwdDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 300),
    )


_SleStpFwdDelay_Type.__name__ = "Integer32"
_SleStpFwdDelay_Object = MibScalar
sleStpFwdDelay = _SleStpFwdDelay_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 5, 1, 5),
    _SleStpFwdDelay_Type()
)
sleStpFwdDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpFwdDelay.setStatus("current")


class _SleStpHelloTime_Type(Integer32):
    """Custom type sleStpHelloTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_SleStpHelloTime_Type.__name__ = "Integer32"
_SleStpHelloTime_Object = MibScalar
sleStpHelloTime = _SleStpHelloTime_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 5, 1, 6),
    _SleStpHelloTime_Type()
)
sleStpHelloTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpHelloTime.setStatus("current")


class _SleStpMaxAge_Type(Integer32):
    """Custom type sleStpMaxAge based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(6, 40),
    )


_SleStpMaxAge_Type.__name__ = "Integer32"
_SleStpMaxAge_Object = MibScalar
sleStpMaxAge = _SleStpMaxAge_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 5, 1, 7),
    _SleStpMaxAge_Type()
)
sleStpMaxAge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpMaxAge.setStatus("current")


class _SleStpMaxHops_Type(Integer32):
    """Custom type sleStpMaxHops based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 40),
    )


_SleStpMaxHops_Type.__name__ = "Integer32"
_SleStpMaxHops_Object = MibScalar
sleStpMaxHops = _SleStpMaxHops_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 5, 1, 8),
    _SleStpMaxHops_Type()
)
sleStpMaxHops.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpMaxHops.setStatus("current")


class _SleStpExtRootBridgeId_Type(OctetString):
    """Custom type sleStpExtRootBridgeId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )
    fixed_length = 8


_SleStpExtRootBridgeId_Type.__name__ = "OctetString"
_SleStpExtRootBridgeId_Object = MibScalar
sleStpExtRootBridgeId = _SleStpExtRootBridgeId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 5, 1, 9),
    _SleStpExtRootBridgeId_Type()
)
sleStpExtRootBridgeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpExtRootBridgeId.setStatus("current")
_SleStpExtPathcost_Type = Unsigned32
_SleStpExtPathcost_Object = MibScalar
sleStpExtPathcost = _SleStpExtPathcost_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 5, 1, 10),
    _SleStpExtPathcost_Type()
)
sleStpExtPathcost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpExtPathcost.setStatus("current")


class _SleStpBpduGuardMode_Type(Integer32):
    """Custom type sleStpBpduGuardMode based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleStpBpduGuardMode_Type.__name__ = "Integer32"
_SleStpBpduGuardMode_Object = MibScalar
sleStpBpduGuardMode = _SleStpBpduGuardMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 5, 1, 11),
    _SleStpBpduGuardMode_Type()
)
sleStpBpduGuardMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpBpduGuardMode.setStatus("current")


class _SleStpBpduGuardAutoRcvMode_Type(Integer32):
    """Custom type sleStpBpduGuardAutoRcvMode based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleStpBpduGuardAutoRcvMode_Type.__name__ = "Integer32"
_SleStpBpduGuardAutoRcvMode_Object = MibScalar
sleStpBpduGuardAutoRcvMode = _SleStpBpduGuardAutoRcvMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 5, 1, 12),
    _SleStpBpduGuardAutoRcvMode_Type()
)
sleStpBpduGuardAutoRcvMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpBpduGuardAutoRcvMode.setStatus("current")


class _SleStpBpduGuardAutoRcvTime_Type(Integer32):
    """Custom type sleStpBpduGuardAutoRcvTime based on Integer32"""
    defaultValue = 300

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 1000000),
    )


_SleStpBpduGuardAutoRcvTime_Type.__name__ = "Integer32"
_SleStpBpduGuardAutoRcvTime_Object = MibScalar
sleStpBpduGuardAutoRcvTime = _SleStpBpduGuardAutoRcvTime_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 5, 1, 13),
    _SleStpBpduGuardAutoRcvTime_Type()
)
sleStpBpduGuardAutoRcvTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpBpduGuardAutoRcvTime.setStatus("current")
_SleStpControl_ObjectIdentity = ObjectIdentity
sleStpControl = _SleStpControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 5, 2)
)


class _SleStpControlRequest_Type(Integer32):
    """Custom type sleStpControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("setStpOperationMode", 1),
          ("setStpConfigureProfile", 2),
          ("setStpTimerProfile", 3),
          ("setStpBpduGuardProfile", 4))
    )


_SleStpControlRequest_Type.__name__ = "Integer32"
_SleStpControlRequest_Object = MibScalar
sleStpControlRequest = _SleStpControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 5, 2, 1),
    _SleStpControlRequest_Type()
)
sleStpControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleStpControlRequest.setStatus("current")
_SleStpControlStatus_Type = SleControlStatusType
_SleStpControlStatus_Object = MibScalar
sleStpControlStatus = _SleStpControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 5, 2, 2),
    _SleStpControlStatus_Type()
)
sleStpControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpControlStatus.setStatus("current")
_SleStpControlTimer_Type = Gauge32
_SleStpControlTimer_Object = MibScalar
sleStpControlTimer = _SleStpControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 5, 2, 3),
    _SleStpControlTimer_Type()
)
sleStpControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleStpControlTimer.setStatus("current")
_SleStpControlTimeStamp_Type = TimeTicks
_SleStpControlTimeStamp_Object = MibScalar
sleStpControlTimeStamp = _SleStpControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 5, 2, 4),
    _SleStpControlTimeStamp_Type()
)
sleStpControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpControlTimeStamp.setStatus("current")
_SleStpControlReqResult_Type = SleControlRequestResultType
_SleStpControlReqResult_Object = MibScalar
sleStpControlReqResult = _SleStpControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 5, 2, 5),
    _SleStpControlReqResult_Type()
)
sleStpControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpControlReqResult.setStatus("current")


class _SleStpControlOperationMode_Type(Integer32):
    """Custom type sleStpControlOperationMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("stp", 0),
          ("rstp", 1),
          ("mstp", 3),
          ("pvstp", 4),
          ("pvrstp", 5),
          ("pvrstpPlus", 6),
          ("pvstpPlus", 7))
    )


_SleStpControlOperationMode_Type.__name__ = "Integer32"
_SleStpControlOperationMode_Object = MibScalar
sleStpControlOperationMode = _SleStpControlOperationMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 5, 2, 6),
    _SleStpControlOperationMode_Type()
)
sleStpControlOperationMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleStpControlOperationMode.setStatus("current")


class _SleStpControlConfigureName_Type(OctetString):
    """Custom type sleStpControlConfigureName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_SleStpControlConfigureName_Type.__name__ = "OctetString"
_SleStpControlConfigureName_Object = MibScalar
sleStpControlConfigureName = _SleStpControlConfigureName_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 5, 2, 7),
    _SleStpControlConfigureName_Type()
)
sleStpControlConfigureName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleStpControlConfigureName.setStatus("current")


class _SleStpControlRevisionLevel_Type(Integer32):
    """Custom type sleStpControlRevisionLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_SleStpControlRevisionLevel_Type.__name__ = "Integer32"
_SleStpControlRevisionLevel_Object = MibScalar
sleStpControlRevisionLevel = _SleStpControlRevisionLevel_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 5, 2, 8),
    _SleStpControlRevisionLevel_Type()
)
sleStpControlRevisionLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleStpControlRevisionLevel.setStatus("current")


class _SleStpControlFwdDelay_Type(Integer32):
    """Custom type sleStpControlFwdDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 30),
    )


_SleStpControlFwdDelay_Type.__name__ = "Integer32"
_SleStpControlFwdDelay_Object = MibScalar
sleStpControlFwdDelay = _SleStpControlFwdDelay_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 5, 2, 9),
    _SleStpControlFwdDelay_Type()
)
sleStpControlFwdDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleStpControlFwdDelay.setStatus("current")


class _SleStpControlHelloTime_Type(Integer32):
    """Custom type sleStpControlHelloTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_SleStpControlHelloTime_Type.__name__ = "Integer32"
_SleStpControlHelloTime_Object = MibScalar
sleStpControlHelloTime = _SleStpControlHelloTime_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 5, 2, 10),
    _SleStpControlHelloTime_Type()
)
sleStpControlHelloTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleStpControlHelloTime.setStatus("current")


class _SleStpControlMaxAge_Type(Integer32):
    """Custom type sleStpControlMaxAge based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 60),
    )


_SleStpControlMaxAge_Type.__name__ = "Integer32"
_SleStpControlMaxAge_Object = MibScalar
sleStpControlMaxAge = _SleStpControlMaxAge_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 5, 2, 11),
    _SleStpControlMaxAge_Type()
)
sleStpControlMaxAge.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleStpControlMaxAge.setStatus("current")


class _SleStpControlMaxHops_Type(Integer32):
    """Custom type sleStpControlMaxHops based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 40),
    )


_SleStpControlMaxHops_Type.__name__ = "Integer32"
_SleStpControlMaxHops_Object = MibScalar
sleStpControlMaxHops = _SleStpControlMaxHops_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 5, 2, 12),
    _SleStpControlMaxHops_Type()
)
sleStpControlMaxHops.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleStpControlMaxHops.setStatus("current")


class _SleStpControlBpduGuardMode_Type(Integer32):
    """Custom type sleStpControlBpduGuardMode based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleStpControlBpduGuardMode_Type.__name__ = "Integer32"
_SleStpControlBpduGuardMode_Object = MibScalar
sleStpControlBpduGuardMode = _SleStpControlBpduGuardMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 5, 2, 13),
    _SleStpControlBpduGuardMode_Type()
)
sleStpControlBpduGuardMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleStpControlBpduGuardMode.setStatus("current")


class _SleStpControlBpduGuardAutoRcvMode_Type(Integer32):
    """Custom type sleStpControlBpduGuardAutoRcvMode based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleStpControlBpduGuardAutoRcvMode_Type.__name__ = "Integer32"
_SleStpControlBpduGuardAutoRcvMode_Object = MibScalar
sleStpControlBpduGuardAutoRcvMode = _SleStpControlBpduGuardAutoRcvMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 5, 2, 14),
    _SleStpControlBpduGuardAutoRcvMode_Type()
)
sleStpControlBpduGuardAutoRcvMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleStpControlBpduGuardAutoRcvMode.setStatus("current")


class _SleStpControlBpduGuardAutoRcvTime_Type(Integer32):
    """Custom type sleStpControlBpduGuardAutoRcvTime based on Integer32"""
    defaultValue = 300

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 1000000),
    )


_SleStpControlBpduGuardAutoRcvTime_Type.__name__ = "Integer32"
_SleStpControlBpduGuardAutoRcvTime_Object = MibScalar
sleStpControlBpduGuardAutoRcvTime = _SleStpControlBpduGuardAutoRcvTime_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 5, 2, 15),
    _SleStpControlBpduGuardAutoRcvTime_Type()
)
sleStpControlBpduGuardAutoRcvTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleStpControlBpduGuardAutoRcvTime.setStatus("current")
_SleStpNotification_ObjectIdentity = ObjectIdentity
sleStpNotification = _SleStpNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 5, 3)
)
_SleStpInstance_ObjectIdentity = ObjectIdentity
sleStpInstance = _SleStpInstance_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 6)
)
_SleStpInstanceTable_Object = MibTable
sleStpInstanceTable = _SleStpInstanceTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 6, 1)
)
if mibBuilder.loadTexts:
    sleStpInstanceTable.setStatus("current")
_SleStpInstanceEntry_Object = MibTableRow
sleStpInstanceEntry = _SleStpInstanceEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 6, 1, 1)
)
sleStpInstanceEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleStpInstanceIndex"),
)
if mibBuilder.loadTexts:
    sleStpInstanceEntry.setStatus("current")


class _SleStpInstanceIndex_Type(Integer32):
    """Custom type sleStpInstanceIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4096),
    )


_SleStpInstanceIndex_Type.__name__ = "Integer32"
_SleStpInstanceIndex_Object = MibTableColumn
sleStpInstanceIndex = _SleStpInstanceIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 6, 1, 1, 1),
    _SleStpInstanceIndex_Type()
)
sleStpInstanceIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpInstanceIndex.setStatus("current")


class _SleStpInstanceEnable_Type(Integer32):
    """Custom type sleStpInstanceEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("enable", 0),
          ("disable", 1))
    )


_SleStpInstanceEnable_Type.__name__ = "Integer32"
_SleStpInstanceEnable_Object = MibTableColumn
sleStpInstanceEnable = _SleStpInstanceEnable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 6, 1, 1, 2),
    _SleStpInstanceEnable_Type()
)
sleStpInstanceEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpInstanceEnable.setStatus("current")
_SleStpInstancePriority_Type = Integer32
_SleStpInstancePriority_Object = MibTableColumn
sleStpInstancePriority = _SleStpInstancePriority_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 6, 1, 1, 3),
    _SleStpInstancePriority_Type()
)
sleStpInstancePriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpInstancePriority.setStatus("current")


class _SleStpInstanceRootBridgeId_Type(OctetString):
    """Custom type sleStpInstanceRootBridgeId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )
    fixed_length = 8


_SleStpInstanceRootBridgeId_Type.__name__ = "OctetString"
_SleStpInstanceRootBridgeId_Object = MibTableColumn
sleStpInstanceRootBridgeId = _SleStpInstanceRootBridgeId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 6, 1, 1, 4),
    _SleStpInstanceRootBridgeId_Type()
)
sleStpInstanceRootBridgeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpInstanceRootBridgeId.setStatus("current")
_SleStpInstanceRootPathcost_Type = Integer32
_SleStpInstanceRootPathcost_Object = MibTableColumn
sleStpInstanceRootPathcost = _SleStpInstanceRootPathcost_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 6, 1, 1, 5),
    _SleStpInstanceRootPathcost_Type()
)
sleStpInstanceRootPathcost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpInstanceRootPathcost.setStatus("current")


class _SleStpInstanceDesignatedBridgeId_Type(OctetString):
    """Custom type sleStpInstanceDesignatedBridgeId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )
    fixed_length = 8


_SleStpInstanceDesignatedBridgeId_Type.__name__ = "OctetString"
_SleStpInstanceDesignatedBridgeId_Object = MibTableColumn
sleStpInstanceDesignatedBridgeId = _SleStpInstanceDesignatedBridgeId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 6, 1, 1, 6),
    _SleStpInstanceDesignatedBridgeId_Type()
)
sleStpInstanceDesignatedBridgeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpInstanceDesignatedBridgeId.setStatus("current")


class _SleStpInstanceDesignatedPortId_Type(Integer32):
    """Custom type sleStpInstanceDesignatedPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 256),
    )


_SleStpInstanceDesignatedPortId_Type.__name__ = "Integer32"
_SleStpInstanceDesignatedPortId_Object = MibTableColumn
sleStpInstanceDesignatedPortId = _SleStpInstanceDesignatedPortId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 6, 1, 1, 7),
    _SleStpInstanceDesignatedPortId_Type()
)
sleStpInstanceDesignatedPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpInstanceDesignatedPortId.setStatus("current")


class _SleStpInstanceRootPortId_Type(Integer32):
    """Custom type sleStpInstanceRootPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 256),
    )


_SleStpInstanceRootPortId_Type.__name__ = "Integer32"
_SleStpInstanceRootPortId_Object = MibTableColumn
sleStpInstanceRootPortId = _SleStpInstanceRootPortId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 6, 1, 1, 8),
    _SleStpInstanceRootPortId_Type()
)
sleStpInstanceRootPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpInstanceRootPortId.setStatus("current")


class _SleStpInstanceFwdDelay_Type(Integer32):
    """Custom type sleStpInstanceFwdDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 30),
    )


_SleStpInstanceFwdDelay_Type.__name__ = "Integer32"
_SleStpInstanceFwdDelay_Object = MibTableColumn
sleStpInstanceFwdDelay = _SleStpInstanceFwdDelay_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 6, 1, 1, 9),
    _SleStpInstanceFwdDelay_Type()
)
sleStpInstanceFwdDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpInstanceFwdDelay.setStatus("current")


class _SleStpInstanceHelloTime_Type(Integer32):
    """Custom type sleStpInstanceHelloTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_SleStpInstanceHelloTime_Type.__name__ = "Integer32"
_SleStpInstanceHelloTime_Object = MibTableColumn
sleStpInstanceHelloTime = _SleStpInstanceHelloTime_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 6, 1, 1, 10),
    _SleStpInstanceHelloTime_Type()
)
sleStpInstanceHelloTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpInstanceHelloTime.setStatus("current")


class _SleStpInstanceMaxAge_Type(Integer32):
    """Custom type sleStpInstanceMaxAge based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 60),
    )


_SleStpInstanceMaxAge_Type.__name__ = "Integer32"
_SleStpInstanceMaxAge_Object = MibTableColumn
sleStpInstanceMaxAge = _SleStpInstanceMaxAge_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 6, 1, 1, 11),
    _SleStpInstanceMaxAge_Type()
)
sleStpInstanceMaxAge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpInstanceMaxAge.setStatus("current")
_SleStpInstanceRemainHops_Type = Integer32
_SleStpInstanceRemainHops_Object = MibTableColumn
sleStpInstanceRemainHops = _SleStpInstanceRemainHops_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 6, 1, 1, 12),
    _SleStpInstanceRemainHops_Type()
)
sleStpInstanceRemainHops.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpInstanceRemainHops.setStatus("current")


class _SleStpInstanceBrFwdDelay_Type(Integer32):
    """Custom type sleStpInstanceBrFwdDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 30),
    )


_SleStpInstanceBrFwdDelay_Type.__name__ = "Integer32"
_SleStpInstanceBrFwdDelay_Object = MibTableColumn
sleStpInstanceBrFwdDelay = _SleStpInstanceBrFwdDelay_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 6, 1, 1, 13),
    _SleStpInstanceBrFwdDelay_Type()
)
sleStpInstanceBrFwdDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpInstanceBrFwdDelay.setStatus("current")


class _SleStpInstanceBrHelloTime_Type(Integer32):
    """Custom type sleStpInstanceBrHelloTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_SleStpInstanceBrHelloTime_Type.__name__ = "Integer32"
_SleStpInstanceBrHelloTime_Object = MibTableColumn
sleStpInstanceBrHelloTime = _SleStpInstanceBrHelloTime_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 6, 1, 1, 14),
    _SleStpInstanceBrHelloTime_Type()
)
sleStpInstanceBrHelloTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpInstanceBrHelloTime.setStatus("current")


class _SleStpInstanceBrMaxAge_Type(Integer32):
    """Custom type sleStpInstanceBrMaxAge based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 60),
    )


_SleStpInstanceBrMaxAge_Type.__name__ = "Integer32"
_SleStpInstanceBrMaxAge_Object = MibTableColumn
sleStpInstanceBrMaxAge = _SleStpInstanceBrMaxAge_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 6, 1, 1, 15),
    _SleStpInstanceBrMaxAge_Type()
)
sleStpInstanceBrMaxAge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpInstanceBrMaxAge.setStatus("current")
_SleStpInstanceControl_ObjectIdentity = ObjectIdentity
sleStpInstanceControl = _SleStpInstanceControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 6, 2)
)


class _SleStpInstanceControlRequest_Type(Integer32):
    """Custom type sleStpInstanceControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("setStpInstanceEnable", 1),
          ("setStpInstanceConfigProfile", 2))
    )


_SleStpInstanceControlRequest_Type.__name__ = "Integer32"
_SleStpInstanceControlRequest_Object = MibScalar
sleStpInstanceControlRequest = _SleStpInstanceControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 6, 2, 1),
    _SleStpInstanceControlRequest_Type()
)
sleStpInstanceControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleStpInstanceControlRequest.setStatus("current")
_SleStpInstanceControlStatus_Type = SleControlStatusType
_SleStpInstanceControlStatus_Object = MibScalar
sleStpInstanceControlStatus = _SleStpInstanceControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 6, 2, 2),
    _SleStpInstanceControlStatus_Type()
)
sleStpInstanceControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpInstanceControlStatus.setStatus("current")
_SleStpInstanceControlTimer_Type = Gauge32
_SleStpInstanceControlTimer_Object = MibScalar
sleStpInstanceControlTimer = _SleStpInstanceControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 6, 2, 3),
    _SleStpInstanceControlTimer_Type()
)
sleStpInstanceControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleStpInstanceControlTimer.setStatus("current")
_SleStpInstanceControlTimeStamp_Type = TimeTicks
_SleStpInstanceControlTimeStamp_Object = MibScalar
sleStpInstanceControlTimeStamp = _SleStpInstanceControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 6, 2, 4),
    _SleStpInstanceControlTimeStamp_Type()
)
sleStpInstanceControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpInstanceControlTimeStamp.setStatus("current")
_SleStpInstanceControlReqResult_Type = SleControlRequestResultType
_SleStpInstanceControlReqResult_Object = MibScalar
sleStpInstanceControlReqResult = _SleStpInstanceControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 6, 2, 5),
    _SleStpInstanceControlReqResult_Type()
)
sleStpInstanceControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpInstanceControlReqResult.setStatus("current")


class _SleStpInstanceControlIndex_Type(Integer32):
    """Custom type sleStpInstanceControlIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4096),
    )


_SleStpInstanceControlIndex_Type.__name__ = "Integer32"
_SleStpInstanceControlIndex_Object = MibScalar
sleStpInstanceControlIndex = _SleStpInstanceControlIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 6, 2, 6),
    _SleStpInstanceControlIndex_Type()
)
sleStpInstanceControlIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleStpInstanceControlIndex.setStatus("current")


class _SleStpInstanceControlEnable_Type(Integer32):
    """Custom type sleStpInstanceControlEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleStpInstanceControlEnable_Type.__name__ = "Integer32"
_SleStpInstanceControlEnable_Object = MibScalar
sleStpInstanceControlEnable = _SleStpInstanceControlEnable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 6, 2, 7),
    _SleStpInstanceControlEnable_Type()
)
sleStpInstanceControlEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleStpInstanceControlEnable.setStatus("current")


class _SleStpInstanceControlPriority_Type(Integer32):
    """Custom type sleStpInstanceControlPriority based on Integer32"""
    defaultValue = 8

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16),
    )


_SleStpInstanceControlPriority_Type.__name__ = "Integer32"
_SleStpInstanceControlPriority_Object = MibScalar
sleStpInstanceControlPriority = _SleStpInstanceControlPriority_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 6, 2, 8),
    _SleStpInstanceControlPriority_Type()
)
sleStpInstanceControlPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleStpInstanceControlPriority.setStatus("current")


class _SleStpInstanceControlBrFwdDelay_Type(Integer32):
    """Custom type sleStpInstanceControlBrFwdDelay based on Integer32"""
    defaultValue = 15

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 30),
    )


_SleStpInstanceControlBrFwdDelay_Type.__name__ = "Integer32"
_SleStpInstanceControlBrFwdDelay_Object = MibScalar
sleStpInstanceControlBrFwdDelay = _SleStpInstanceControlBrFwdDelay_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 6, 2, 9),
    _SleStpInstanceControlBrFwdDelay_Type()
)
sleStpInstanceControlBrFwdDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleStpInstanceControlBrFwdDelay.setStatus("current")


class _SleStpInstanceControlBrHelloTime_Type(Integer32):
    """Custom type sleStpInstanceControlBrHelloTime based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_SleStpInstanceControlBrHelloTime_Type.__name__ = "Integer32"
_SleStpInstanceControlBrHelloTime_Object = MibScalar
sleStpInstanceControlBrHelloTime = _SleStpInstanceControlBrHelloTime_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 6, 2, 10),
    _SleStpInstanceControlBrHelloTime_Type()
)
sleStpInstanceControlBrHelloTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleStpInstanceControlBrHelloTime.setStatus("current")


class _SleStpInstanceControlBrMaxAge_Type(Integer32):
    """Custom type sleStpInstanceControlBrMaxAge based on Integer32"""
    defaultValue = 30

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 60),
    )


_SleStpInstanceControlBrMaxAge_Type.__name__ = "Integer32"
_SleStpInstanceControlBrMaxAge_Object = MibScalar
sleStpInstanceControlBrMaxAge = _SleStpInstanceControlBrMaxAge_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 6, 2, 11),
    _SleStpInstanceControlBrMaxAge_Type()
)
sleStpInstanceControlBrMaxAge.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleStpInstanceControlBrMaxAge.setStatus("current")
_SleStpInstanceNotification_ObjectIdentity = ObjectIdentity
sleStpInstanceNotification = _SleStpInstanceNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 6, 3)
)
_SleStpInstancePort_ObjectIdentity = ObjectIdentity
sleStpInstancePort = _SleStpInstancePort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 7)
)
_SleStpInstancePortTable_Object = MibTable
sleStpInstancePortTable = _SleStpInstancePortTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 7, 1)
)
if mibBuilder.loadTexts:
    sleStpInstancePortTable.setStatus("current")
_SleStpInstancePortEntry_Object = MibTableRow
sleStpInstancePortEntry = _SleStpInstancePortEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 7, 1, 1)
)
sleStpInstancePortEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleStpInstanceIndex"),
    (0, "SLE-BRIDGE-MIB", "sleStpInstancePortIndex"),
)
if mibBuilder.loadTexts:
    sleStpInstancePortEntry.setStatus("current")
_SleStpInstancePortIndex_Type = InterfaceIndex
_SleStpInstancePortIndex_Object = MibTableColumn
sleStpInstancePortIndex = _SleStpInstancePortIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 7, 1, 1, 1),
    _SleStpInstancePortIndex_Type()
)
sleStpInstancePortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpInstancePortIndex.setStatus("current")


class _SleStpInstancePortPathcost_Type(Integer32):
    """Custom type sleStpInstancePortPathcost based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 200000000),
    )


_SleStpInstancePortPathcost_Type.__name__ = "Integer32"
_SleStpInstancePortPathcost_Object = MibTableColumn
sleStpInstancePortPathcost = _SleStpInstancePortPathcost_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 7, 1, 1, 2),
    _SleStpInstancePortPathcost_Type()
)
sleStpInstancePortPathcost.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleStpInstancePortPathcost.setStatus("current")


class _SleStpInstancePortPriority_Type(Integer32):
    """Custom type sleStpInstancePortPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_SleStpInstancePortPriority_Type.__name__ = "Integer32"
_SleStpInstancePortPriority_Object = MibTableColumn
sleStpInstancePortPriority = _SleStpInstancePortPriority_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 7, 1, 1, 3),
    _SleStpInstancePortPriority_Type()
)
sleStpInstancePortPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpInstancePortPriority.setStatus("current")


class _SleStpInstancePortRole_Type(Integer32):
    """Custom type sleStpInstancePortRole based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("designated", 1),
          ("root", 2),
          ("master", 3),
          ("alternate", 4),
          ("backup", 5))
    )


_SleStpInstancePortRole_Type.__name__ = "Integer32"
_SleStpInstancePortRole_Object = MibTableColumn
sleStpInstancePortRole = _SleStpInstancePortRole_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 7, 1, 1, 4),
    _SleStpInstancePortRole_Type()
)
sleStpInstancePortRole.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpInstancePortRole.setStatus("current")


class _SleStpInstancePortState_Type(Integer32):
    """Custom type sleStpInstancePortState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("listening", 1),
          ("learning", 2),
          ("forwarding", 3),
          ("blocking", 4))
    )


_SleStpInstancePortState_Type.__name__ = "Integer32"
_SleStpInstancePortState_Object = MibTableColumn
sleStpInstancePortState = _SleStpInstancePortState_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 7, 1, 1, 5),
    _SleStpInstancePortState_Type()
)
sleStpInstancePortState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpInstancePortState.setStatus("current")


class _SleStpInstancePortRootBridgeId_Type(OctetString):
    """Custom type sleStpInstancePortRootBridgeId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )
    fixed_length = 8


_SleStpInstancePortRootBridgeId_Type.__name__ = "OctetString"
_SleStpInstancePortRootBridgeId_Object = MibTableColumn
sleStpInstancePortRootBridgeId = _SleStpInstancePortRootBridgeId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 7, 1, 1, 6),
    _SleStpInstancePortRootBridgeId_Type()
)
sleStpInstancePortRootBridgeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpInstancePortRootBridgeId.setStatus("current")
_SleStpInstancePortRootPathcost_Type = Integer32
_SleStpInstancePortRootPathcost_Object = MibTableColumn
sleStpInstancePortRootPathcost = _SleStpInstancePortRootPathcost_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 7, 1, 1, 7),
    _SleStpInstancePortRootPathcost_Type()
)
sleStpInstancePortRootPathcost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpInstancePortRootPathcost.setStatus("current")


class _SleStpInstancePortDesignateBridgeId_Type(OctetString):
    """Custom type sleStpInstancePortDesignateBridgeId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )
    fixed_length = 8


_SleStpInstancePortDesignateBridgeId_Type.__name__ = "OctetString"
_SleStpInstancePortDesignateBridgeId_Object = MibTableColumn
sleStpInstancePortDesignateBridgeId = _SleStpInstancePortDesignateBridgeId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 7, 1, 1, 8),
    _SleStpInstancePortDesignateBridgeId_Type()
)
sleStpInstancePortDesignateBridgeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpInstancePortDesignateBridgeId.setStatus("current")


class _SleStpInstancePortDesignatePortId_Type(Integer32):
    """Custom type sleStpInstancePortDesignatePortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 256),
    )


_SleStpInstancePortDesignatePortId_Type.__name__ = "Integer32"
_SleStpInstancePortDesignatePortId_Object = MibTableColumn
sleStpInstancePortDesignatePortId = _SleStpInstancePortDesignatePortId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 7, 1, 1, 9),
    _SleStpInstancePortDesignatePortId_Type()
)
sleStpInstancePortDesignatePortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpInstancePortDesignatePortId.setStatus("current")


class _SleStpInstancePortRootGuardMode_Type(Integer32):
    """Custom type sleStpInstancePortRootGuardMode based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleStpInstancePortRootGuardMode_Type.__name__ = "Integer32"
_SleStpInstancePortRootGuardMode_Object = MibTableColumn
sleStpInstancePortRootGuardMode = _SleStpInstancePortRootGuardMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 7, 1, 1, 10),
    _SleStpInstancePortRootGuardMode_Type()
)
sleStpInstancePortRootGuardMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpInstancePortRootGuardMode.setStatus("current")
_SleStpInstancePortControl_ObjectIdentity = ObjectIdentity
sleStpInstancePortControl = _SleStpInstancePortControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 7, 2)
)


class _SleStpInstancePortControlRequest_Type(Integer32):
    """Custom type sleStpInstancePortControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("setStpInstancePortProfile", 1)
    )


_SleStpInstancePortControlRequest_Type.__name__ = "Integer32"
_SleStpInstancePortControlRequest_Object = MibScalar
sleStpInstancePortControlRequest = _SleStpInstancePortControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 7, 2, 1),
    _SleStpInstancePortControlRequest_Type()
)
sleStpInstancePortControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleStpInstancePortControlRequest.setStatus("current")
_SleStpInstancePortControlStatus_Type = SleControlStatusType
_SleStpInstancePortControlStatus_Object = MibScalar
sleStpInstancePortControlStatus = _SleStpInstancePortControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 7, 2, 2),
    _SleStpInstancePortControlStatus_Type()
)
sleStpInstancePortControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpInstancePortControlStatus.setStatus("current")
_SleStpInstancePortControlTimer_Type = Gauge32
_SleStpInstancePortControlTimer_Object = MibScalar
sleStpInstancePortControlTimer = _SleStpInstancePortControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 7, 2, 3),
    _SleStpInstancePortControlTimer_Type()
)
sleStpInstancePortControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleStpInstancePortControlTimer.setStatus("current")
_SleStpInstancePortControlTimeStamp_Type = TimeTicks
_SleStpInstancePortControlTimeStamp_Object = MibScalar
sleStpInstancePortControlTimeStamp = _SleStpInstancePortControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 7, 2, 4),
    _SleStpInstancePortControlTimeStamp_Type()
)
sleStpInstancePortControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpInstancePortControlTimeStamp.setStatus("current")
_SleStpInstancePortControlReqResult_Type = SleControlRequestResultType
_SleStpInstancePortControlReqResult_Object = MibScalar
sleStpInstancePortControlReqResult = _SleStpInstancePortControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 7, 2, 5),
    _SleStpInstancePortControlReqResult_Type()
)
sleStpInstancePortControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStpInstancePortControlReqResult.setStatus("current")


class _SleStpInstancePortControlIndex_Type(Integer32):
    """Custom type sleStpInstancePortControlIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_SleStpInstancePortControlIndex_Type.__name__ = "Integer32"
_SleStpInstancePortControlIndex_Object = MibScalar
sleStpInstancePortControlIndex = _SleStpInstancePortControlIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 7, 2, 6),
    _SleStpInstancePortControlIndex_Type()
)
sleStpInstancePortControlIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleStpInstancePortControlIndex.setStatus("current")


class _SleStpInstancePortControlInstanceId_Type(Integer32):
    """Custom type sleStpInstancePortControlInstanceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4096),
    )


_SleStpInstancePortControlInstanceId_Type.__name__ = "Integer32"
_SleStpInstancePortControlInstanceId_Object = MibScalar
sleStpInstancePortControlInstanceId = _SleStpInstancePortControlInstanceId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 7, 2, 7),
    _SleStpInstancePortControlInstanceId_Type()
)
sleStpInstancePortControlInstanceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleStpInstancePortControlInstanceId.setStatus("current")


class _SleStpInstancePortControlPathcost_Type(Integer32):
    """Custom type sleStpInstancePortControlPathcost based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 200000000),
    )


_SleStpInstancePortControlPathcost_Type.__name__ = "Integer32"
_SleStpInstancePortControlPathcost_Object = MibScalar
sleStpInstancePortControlPathcost = _SleStpInstancePortControlPathcost_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 7, 2, 8),
    _SleStpInstancePortControlPathcost_Type()
)
sleStpInstancePortControlPathcost.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleStpInstancePortControlPathcost.setStatus("current")


class _SleStpInstancePortControlPriority_Type(Integer32):
    """Custom type sleStpInstancePortControlPriority based on Integer32"""
    defaultValue = 128

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_SleStpInstancePortControlPriority_Type.__name__ = "Integer32"
_SleStpInstancePortControlPriority_Object = MibScalar
sleStpInstancePortControlPriority = _SleStpInstancePortControlPriority_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 7, 2, 9),
    _SleStpInstancePortControlPriority_Type()
)
sleStpInstancePortControlPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleStpInstancePortControlPriority.setStatus("current")


class _SleStpInstancePortControlRootGuardMode_Type(Integer32):
    """Custom type sleStpInstancePortControlRootGuardMode based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleStpInstancePortControlRootGuardMode_Type.__name__ = "Integer32"
_SleStpInstancePortControlRootGuardMode_Object = MibScalar
sleStpInstancePortControlRootGuardMode = _SleStpInstancePortControlRootGuardMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 7, 2, 10),
    _SleStpInstancePortControlRootGuardMode_Type()
)
sleStpInstancePortControlRootGuardMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleStpInstancePortControlRootGuardMode.setStatus("current")
_SleStpInstancePortNotification_ObjectIdentity = ObjectIdentity
sleStpInstancePortNotification = _SleStpInstancePortNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 7, 3)
)
_SleSubnetVlan_ObjectIdentity = ObjectIdentity
sleSubnetVlan = _SleSubnetVlan_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 8)
)
_SleSubnetVlanTable_Object = MibTable
sleSubnetVlanTable = _SleSubnetVlanTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 8, 1)
)
if mibBuilder.loadTexts:
    sleSubnetVlanTable.setStatus("current")
_SleSubnetVlanEntry_Object = MibTableRow
sleSubnetVlanEntry = _SleSubnetVlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 8, 1, 1)
)
sleSubnetVlanEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleSubnetVlanIp"),
    (0, "SLE-BRIDGE-MIB", "sleSubnetVlanMask"),
)
if mibBuilder.loadTexts:
    sleSubnetVlanEntry.setStatus("current")
_SleSubnetVlanIp_Type = IpAddress
_SleSubnetVlanIp_Object = MibTableColumn
sleSubnetVlanIp = _SleSubnetVlanIp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 8, 1, 1, 1),
    _SleSubnetVlanIp_Type()
)
sleSubnetVlanIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleSubnetVlanIp.setStatus("current")


class _SleSubnetVlanMask_Type(Integer32):
    """Custom type sleSubnetVlanMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_SleSubnetVlanMask_Type.__name__ = "Integer32"
_SleSubnetVlanMask_Object = MibTableColumn
sleSubnetVlanMask = _SleSubnetVlanMask_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 8, 1, 1, 2),
    _SleSubnetVlanMask_Type()
)
sleSubnetVlanMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleSubnetVlanMask.setStatus("current")


class _SleSubnetVlanVid_Type(Integer32):
    """Custom type sleSubnetVlanVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleSubnetVlanVid_Type.__name__ = "Integer32"
_SleSubnetVlanVid_Object = MibTableColumn
sleSubnetVlanVid = _SleSubnetVlanVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 8, 1, 1, 3),
    _SleSubnetVlanVid_Type()
)
sleSubnetVlanVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleSubnetVlanVid.setStatus("current")
_SleSubnetVlanControl_ObjectIdentity = ObjectIdentity
sleSubnetVlanControl = _SleSubnetVlanControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 8, 2)
)


class _SleSubnetVlanControlRequest_Type(Integer32):
    """Custom type sleSubnetVlanControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createSubnetVlan", 1),
          ("destorySubnetVlan", 2))
    )


_SleSubnetVlanControlRequest_Type.__name__ = "Integer32"
_SleSubnetVlanControlRequest_Object = MibScalar
sleSubnetVlanControlRequest = _SleSubnetVlanControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 8, 2, 1),
    _SleSubnetVlanControlRequest_Type()
)
sleSubnetVlanControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleSubnetVlanControlRequest.setStatus("current")
_SleSubnetVlanControlStatus_Type = SleControlStatusType
_SleSubnetVlanControlStatus_Object = MibScalar
sleSubnetVlanControlStatus = _SleSubnetVlanControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 8, 2, 2),
    _SleSubnetVlanControlStatus_Type()
)
sleSubnetVlanControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleSubnetVlanControlStatus.setStatus("current")
_SleSubnetVlanControlTimer_Type = Gauge32
_SleSubnetVlanControlTimer_Object = MibScalar
sleSubnetVlanControlTimer = _SleSubnetVlanControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 8, 2, 3),
    _SleSubnetVlanControlTimer_Type()
)
sleSubnetVlanControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleSubnetVlanControlTimer.setStatus("current")
_SleSubnetVlanControlTimeStamp_Type = TimeTicks
_SleSubnetVlanControlTimeStamp_Object = MibScalar
sleSubnetVlanControlTimeStamp = _SleSubnetVlanControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 8, 2, 4),
    _SleSubnetVlanControlTimeStamp_Type()
)
sleSubnetVlanControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleSubnetVlanControlTimeStamp.setStatus("current")
_SleSubnetVlanControlReqResult_Type = SleControlRequestResultType
_SleSubnetVlanControlReqResult_Object = MibScalar
sleSubnetVlanControlReqResult = _SleSubnetVlanControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 8, 2, 5),
    _SleSubnetVlanControlReqResult_Type()
)
sleSubnetVlanControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleSubnetVlanControlReqResult.setStatus("current")
_SleSubnetVlanControlIp_Type = IpAddress
_SleSubnetVlanControlIp_Object = MibScalar
sleSubnetVlanControlIp = _SleSubnetVlanControlIp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 8, 2, 6),
    _SleSubnetVlanControlIp_Type()
)
sleSubnetVlanControlIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleSubnetVlanControlIp.setStatus("current")


class _SleSubnetVlanControlMask_Type(Integer32):
    """Custom type sleSubnetVlanControlMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_SleSubnetVlanControlMask_Type.__name__ = "Integer32"
_SleSubnetVlanControlMask_Object = MibScalar
sleSubnetVlanControlMask = _SleSubnetVlanControlMask_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 8, 2, 7),
    _SleSubnetVlanControlMask_Type()
)
sleSubnetVlanControlMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleSubnetVlanControlMask.setStatus("current")


class _SleSubnetVlanControlVid_Type(Integer32):
    """Custom type sleSubnetVlanControlVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleSubnetVlanControlVid_Type.__name__ = "Integer32"
_SleSubnetVlanControlVid_Object = MibScalar
sleSubnetVlanControlVid = _SleSubnetVlanControlVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 8, 2, 8),
    _SleSubnetVlanControlVid_Type()
)
sleSubnetVlanControlVid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleSubnetVlanControlVid.setStatus("current")
_SleSubnetVlanNotification_ObjectIdentity = ObjectIdentity
sleSubnetVlanNotification = _SleSubnetVlanNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 8, 3)
)
_SleProtocolVlan_ObjectIdentity = ObjectIdentity
sleProtocolVlan = _SleProtocolVlan_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 9)
)
_SleProtocolVlanTable_Object = MibTable
sleProtocolVlanTable = _SleProtocolVlanTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 9, 1)
)
if mibBuilder.loadTexts:
    sleProtocolVlanTable.setStatus("current")
_SleProtocolVlanEntry_Object = MibTableRow
sleProtocolVlanEntry = _SleProtocolVlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 9, 1, 1)
)
sleProtocolVlanEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleBridgePortIndex"),
    (0, "SLE-BRIDGE-MIB", "sleProtocolVlanEtype"),
)
if mibBuilder.loadTexts:
    sleProtocolVlanEntry.setStatus("current")


class _SleProtocolVlanEtype_Type(Unsigned32):
    """Custom type sleProtocolVlanEtype based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleProtocolVlanEtype_Type.__name__ = "Unsigned32"
_SleProtocolVlanEtype_Object = MibTableColumn
sleProtocolVlanEtype = _SleProtocolVlanEtype_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 9, 1, 1, 1),
    _SleProtocolVlanEtype_Type()
)
sleProtocolVlanEtype.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleProtocolVlanEtype.setStatus("current")


class _SleProtocolVlanVid_Type(Integer32):
    """Custom type sleProtocolVlanVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleProtocolVlanVid_Type.__name__ = "Integer32"
_SleProtocolVlanVid_Object = MibTableColumn
sleProtocolVlanVid = _SleProtocolVlanVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 9, 1, 1, 2),
    _SleProtocolVlanVid_Type()
)
sleProtocolVlanVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleProtocolVlanVid.setStatus("current")
_SleProtocolVlanControl_ObjectIdentity = ObjectIdentity
sleProtocolVlanControl = _SleProtocolVlanControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 9, 2)
)


class _SleProtocolVlanControlRequest_Type(Integer32):
    """Custom type sleProtocolVlanControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createProtocolVlan", 1),
          ("destoryProtocolVlan", 2))
    )


_SleProtocolVlanControlRequest_Type.__name__ = "Integer32"
_SleProtocolVlanControlRequest_Object = MibScalar
sleProtocolVlanControlRequest = _SleProtocolVlanControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 9, 2, 1),
    _SleProtocolVlanControlRequest_Type()
)
sleProtocolVlanControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleProtocolVlanControlRequest.setStatus("current")
_SleProtocolVlanControlStatus_Type = SleControlStatusType
_SleProtocolVlanControlStatus_Object = MibScalar
sleProtocolVlanControlStatus = _SleProtocolVlanControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 9, 2, 2),
    _SleProtocolVlanControlStatus_Type()
)
sleProtocolVlanControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleProtocolVlanControlStatus.setStatus("current")
_SleProtocolVlanControlTimer_Type = Gauge32
_SleProtocolVlanControlTimer_Object = MibScalar
sleProtocolVlanControlTimer = _SleProtocolVlanControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 9, 2, 3),
    _SleProtocolVlanControlTimer_Type()
)
sleProtocolVlanControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleProtocolVlanControlTimer.setStatus("current")
_SleProtocolVlanControlTimeStamp_Type = TimeTicks
_SleProtocolVlanControlTimeStamp_Object = MibScalar
sleProtocolVlanControlTimeStamp = _SleProtocolVlanControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 9, 2, 4),
    _SleProtocolVlanControlTimeStamp_Type()
)
sleProtocolVlanControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleProtocolVlanControlTimeStamp.setStatus("current")
_SleProtocolVlanControlReqResult_Type = SleControlRequestResultType
_SleProtocolVlanControlReqResult_Object = MibScalar
sleProtocolVlanControlReqResult = _SleProtocolVlanControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 9, 2, 5),
    _SleProtocolVlanControlReqResult_Type()
)
sleProtocolVlanControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleProtocolVlanControlReqResult.setStatus("current")
_SleProtocolVlanControlPortIndex_Type = InterfaceIndex
_SleProtocolVlanControlPortIndex_Object = MibScalar
sleProtocolVlanControlPortIndex = _SleProtocolVlanControlPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 9, 2, 6),
    _SleProtocolVlanControlPortIndex_Type()
)
sleProtocolVlanControlPortIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleProtocolVlanControlPortIndex.setStatus("current")
_SleProtocolVlanControlEtype_Type = Unsigned32
_SleProtocolVlanControlEtype_Object = MibScalar
sleProtocolVlanControlEtype = _SleProtocolVlanControlEtype_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 9, 2, 7),
    _SleProtocolVlanControlEtype_Type()
)
sleProtocolVlanControlEtype.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleProtocolVlanControlEtype.setStatus("current")


class _SleProtocolVlanControlVid_Type(Integer32):
    """Custom type sleProtocolVlanControlVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleProtocolVlanControlVid_Type.__name__ = "Integer32"
_SleProtocolVlanControlVid_Object = MibScalar
sleProtocolVlanControlVid = _SleProtocolVlanControlVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 9, 2, 8),
    _SleProtocolVlanControlVid_Type()
)
sleProtocolVlanControlVid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleProtocolVlanControlVid.setStatus("current")
_SleProtocolVlanNotification_ObjectIdentity = ObjectIdentity
sleProtocolVlanNotification = _SleProtocolVlanNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 9, 3)
)
_SleLag_ObjectIdentity = ObjectIdentity
sleLag = _SleLag_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 10)
)
_SleLagTable_Object = MibTable
sleLagTable = _SleLagTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 10, 1)
)
if mibBuilder.loadTexts:
    sleLagTable.setStatus("current")
_SleLagEntry_Object = MibTableRow
sleLagEntry = _SleLagEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 10, 1, 1)
)
sleLagEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleLagIndex"),
)
if mibBuilder.loadTexts:
    sleLagEntry.setStatus("current")


class _SleLagIndex_Type(Integer32):
    """Custom type sleLagIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 13),
    )


_SleLagIndex_Type.__name__ = "Integer32"
_SleLagIndex_Object = MibTableColumn
sleLagIndex = _SleLagIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 10, 1, 1, 1),
    _SleLagIndex_Type()
)
sleLagIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagIndex.setStatus("current")
_SleLagPortId_Type = InterfaceIndex
_SleLagPortId_Object = MibTableColumn
sleLagPortId = _SleLagPortId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 10, 1, 1, 2),
    _SleLagPortId_Type()
)
sleLagPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagPortId.setStatus("current")


class _SleLagDistMode_Type(Integer32):
    """Custom type sleLagDistMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              80)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("srcmac", 1),
          ("dstmac", 2),
          ("srcdstmac", 3),
          ("srcip", 4),
          ("dstip", 5),
          ("srcdstip", 6),
          ("srcdstl4", 7),
          ("label", 80))
    )


_SleLagDistMode_Type.__name__ = "Integer32"
_SleLagDistMode_Object = MibTableColumn
sleLagDistMode = _SleLagDistMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 10, 1, 1, 3),
    _SleLagDistMode_Type()
)
sleLagDistMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagDistMode.setStatus("current")
_SleLagPortMap_Type = OctetString
_SleLagPortMap_Object = MibTableColumn
sleLagPortMap = _SleLagPortMap_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 10, 1, 1, 4),
    _SleLagPortMap_Type()
)
sleLagPortMap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagPortMap.setStatus("current")


class _SleLagMode_Type(Integer32):
    """Custom type sleLagMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("inactive", 0),
          ("trunk", 1),
          ("lacp", 2))
    )


_SleLagMode_Type.__name__ = "Integer32"
_SleLagMode_Object = MibTableColumn
sleLagMode = _SleLagMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 10, 1, 1, 5),
    _SleLagMode_Type()
)
sleLagMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagMode.setStatus("current")
_SleLagLeastActive_Type = Integer32
_SleLagLeastActive_Object = MibTableColumn
sleLagLeastActive = _SleLagLeastActive_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 10, 1, 1, 6),
    _SleLagLeastActive_Type()
)
sleLagLeastActive.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLeastActive.setStatus("current")
_SleLagControl_ObjectIdentity = ObjectIdentity
sleLagControl = _SleLagControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 10, 2)
)


class _SleLagControlRequest_Type(Integer32):
    """Custom type sleLagControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("setLagProfile", 1),
          ("setLagProfileActiveLink", 2))
    )


_SleLagControlRequest_Type.__name__ = "Integer32"
_SleLagControlRequest_Object = MibScalar
sleLagControlRequest = _SleLagControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 10, 2, 1),
    _SleLagControlRequest_Type()
)
sleLagControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLagControlRequest.setStatus("current")
_SleLagControlStatus_Type = SleControlStatusType
_SleLagControlStatus_Object = MibScalar
sleLagControlStatus = _SleLagControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 10, 2, 2),
    _SleLagControlStatus_Type()
)
sleLagControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagControlStatus.setStatus("current")
_SleLagControlTimer_Type = Gauge32
_SleLagControlTimer_Object = MibScalar
sleLagControlTimer = _SleLagControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 10, 2, 3),
    _SleLagControlTimer_Type()
)
sleLagControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLagControlTimer.setStatus("current")
_SleLagControlTimeStamp_Type = TimeTicks
_SleLagControlTimeStamp_Object = MibScalar
sleLagControlTimeStamp = _SleLagControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 10, 2, 4),
    _SleLagControlTimeStamp_Type()
)
sleLagControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagControlTimeStamp.setStatus("current")
_SleLagControlReqResult_Type = SleControlRequestResultType
_SleLagControlReqResult_Object = MibScalar
sleLagControlReqResult = _SleLagControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 10, 2, 5),
    _SleLagControlReqResult_Type()
)
sleLagControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagControlReqResult.setStatus("current")
_SleLagControlIndex_Type = Integer32
_SleLagControlIndex_Object = MibScalar
sleLagControlIndex = _SleLagControlIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 10, 2, 6),
    _SleLagControlIndex_Type()
)
sleLagControlIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLagControlIndex.setStatus("current")


class _SleLagControlDistMode_Type(Integer32):
    """Custom type sleLagControlDistMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              80)
        )
    )
    namedValues = NamedValues(
        *(("srcmac", 1),
          ("dstmac", 2),
          ("srcdstmac", 3),
          ("srcip", 4),
          ("dstip", 5),
          ("srcdstip", 6),
          ("srcdstl4", 7),
          ("label", 80))
    )


_SleLagControlDistMode_Type.__name__ = "Integer32"
_SleLagControlDistMode_Object = MibScalar
sleLagControlDistMode = _SleLagControlDistMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 10, 2, 7),
    _SleLagControlDistMode_Type()
)
sleLagControlDistMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLagControlDistMode.setStatus("current")
_SleLagControlPortMap_Type = OctetString
_SleLagControlPortMap_Object = MibScalar
sleLagControlPortMap = _SleLagControlPortMap_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 10, 2, 8),
    _SleLagControlPortMap_Type()
)
sleLagControlPortMap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLagControlPortMap.setStatus("current")


class _SleLagControlMode_Type(Integer32):
    """Custom type sleLagControlMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("trunk", 1),
          ("lacp", 2))
    )


_SleLagControlMode_Type.__name__ = "Integer32"
_SleLagControlMode_Object = MibScalar
sleLagControlMode = _SleLagControlMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 10, 2, 9),
    _SleLagControlMode_Type()
)
sleLagControlMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLagControlMode.setStatus("current")
_SleLagControlLeastActive_Type = Integer32
_SleLagControlLeastActive_Object = MibScalar
sleLagControlLeastActive = _SleLagControlLeastActive_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 10, 2, 10),
    _SleLagControlLeastActive_Type()
)
sleLagControlLeastActive.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLagControlLeastActive.setStatus("current")
_SleLagNotification_ObjectIdentity = ObjectIdentity
sleLagNotification = _SleLagNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 10, 3)
)
_SleLagLacp_ObjectIdentity = ObjectIdentity
sleLagLacp = _SleLagLacp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 11)
)
_SleLagLacpTable_Object = MibTable
sleLagLacpTable = _SleLagLacpTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 11, 1)
)
if mibBuilder.loadTexts:
    sleLagLacpTable.setStatus("current")
_SleLagLacpEntry_Object = MibTableRow
sleLagLacpEntry = _SleLagLacpEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 11, 1, 1)
)
sleLagLacpEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleLagLacpIndex"),
)
if mibBuilder.loadTexts:
    sleLagLacpEntry.setStatus("current")


class _SleLagLacpIndex_Type(Integer32):
    """Custom type sleLagLacpIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 13),
    )


_SleLagLacpIndex_Type.__name__ = "Integer32"
_SleLagLacpIndex_Object = MibTableColumn
sleLagLacpIndex = _SleLagLacpIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 11, 1, 1, 1),
    _SleLagLacpIndex_Type()
)
sleLagLacpIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpIndex.setStatus("current")


class _SleLagLacpActorAggregatorKey_Type(Integer32):
    """Custom type sleLagLacpActorAggregatorKey based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleLagLacpActorAggregatorKey_Type.__name__ = "Integer32"
_SleLagLacpActorAggregatorKey_Object = MibTableColumn
sleLagLacpActorAggregatorKey = _SleLagLacpActorAggregatorKey_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 11, 1, 1, 2),
    _SleLagLacpActorAggregatorKey_Type()
)
sleLagLacpActorAggregatorKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpActorAggregatorKey.setStatus("current")
_SleLagLacpActorSystemMAC_Type = OctetString
_SleLagLacpActorSystemMAC_Object = MibTableColumn
sleLagLacpActorSystemMAC = _SleLagLacpActorSystemMAC_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 11, 1, 1, 3),
    _SleLagLacpActorSystemMAC_Type()
)
sleLagLacpActorSystemMAC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLagLacpActorSystemMAC.setStatus("current")
_SleLagLacpPartnerSystemMAC_Type = OctetString
_SleLagLacpPartnerSystemMAC_Object = MibTableColumn
sleLagLacpPartnerSystemMAC = _SleLagLacpPartnerSystemMAC_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 11, 1, 1, 4),
    _SleLagLacpPartnerSystemMAC_Type()
)
sleLagLacpPartnerSystemMAC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpPartnerSystemMAC.setStatus("current")


class _SleLagLacpPartnerSystemPriority_Type(Integer32):
    """Custom type sleLagLacpPartnerSystemPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleLagLacpPartnerSystemPriority_Type.__name__ = "Integer32"
_SleLagLacpPartnerSystemPriority_Object = MibTableColumn
sleLagLacpPartnerSystemPriority = _SleLagLacpPartnerSystemPriority_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 11, 1, 1, 5),
    _SleLagLacpPartnerSystemPriority_Type()
)
sleLagLacpPartnerSystemPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpPartnerSystemPriority.setStatus("current")


class _SleLagLacpPartnerAggregatorKey_Type(Integer32):
    """Custom type sleLagLacpPartnerAggregatorKey based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleLagLacpPartnerAggregatorKey_Type.__name__ = "Integer32"
_SleLagLacpPartnerAggregatorKey_Object = MibTableColumn
sleLagLacpPartnerAggregatorKey = _SleLagLacpPartnerAggregatorKey_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 11, 1, 1, 6),
    _SleLagLacpPartnerAggregatorKey_Type()
)
sleLagLacpPartnerAggregatorKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpPartnerAggregatorKey.setStatus("current")
_SleLagLacpStats_ObjectIdentity = ObjectIdentity
sleLagLacpStats = _SleLagLacpStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 11, 2)
)
_SleLagLacpStatsPduReceived_Type = Counter32
_SleLagLacpStatsPduReceived_Object = MibScalar
sleLagLacpStatsPduReceived = _SleLagLacpStatsPduReceived_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 11, 2, 1),
    _SleLagLacpStatsPduReceived_Type()
)
sleLagLacpStatsPduReceived.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpStatsPduReceived.setStatus("current")
_SleLagLacpStatsPduReceivedErrrors_Type = Counter32
_SleLagLacpStatsPduReceivedErrrors_Object = MibScalar
sleLagLacpStatsPduReceivedErrrors = _SleLagLacpStatsPduReceivedErrrors_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 11, 2, 2),
    _SleLagLacpStatsPduReceivedErrrors_Type()
)
sleLagLacpStatsPduReceivedErrrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpStatsPduReceivedErrrors.setStatus("current")
_SleLagLacpStatsPduSent_Type = Counter32
_SleLagLacpStatsPduSent_Object = MibScalar
sleLagLacpStatsPduSent = _SleLagLacpStatsPduSent_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 11, 2, 3),
    _SleLagLacpStatsPduSent_Type()
)
sleLagLacpStatsPduSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpStatsPduSent.setStatus("current")
_SleLagLacpStatsPduSentError_Type = Counter32
_SleLagLacpStatsPduSentError_Object = MibScalar
sleLagLacpStatsPduSentError = _SleLagLacpStatsPduSentError_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 11, 2, 4),
    _SleLagLacpStatsPduSentError_Type()
)
sleLagLacpStatsPduSentError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpStatsPduSentError.setStatus("current")
_SleLagLacpStatsMarkerReceived_Type = Counter32
_SleLagLacpStatsMarkerReceived_Object = MibScalar
sleLagLacpStatsMarkerReceived = _SleLagLacpStatsMarkerReceived_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 11, 2, 5),
    _SleLagLacpStatsMarkerReceived_Type()
)
sleLagLacpStatsMarkerReceived.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpStatsMarkerReceived.setStatus("current")
_SleLagLacpStatsMarkerSent_Type = Counter32
_SleLagLacpStatsMarkerSent_Object = MibScalar
sleLagLacpStatsMarkerSent = _SleLagLacpStatsMarkerSent_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 11, 2, 6),
    _SleLagLacpStatsMarkerSent_Type()
)
sleLagLacpStatsMarkerSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpStatsMarkerSent.setStatus("current")
_SleLagLacpStatsMarkerSentError_Type = Counter32
_SleLagLacpStatsMarkerSentError_Object = MibScalar
sleLagLacpStatsMarkerSentError = _SleLagLacpStatsMarkerSentError_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 11, 2, 7),
    _SleLagLacpStatsMarkerSentError_Type()
)
sleLagLacpStatsMarkerSentError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpStatsMarkerSentError.setStatus("current")
_SleLagLacpControl_ObjectIdentity = ObjectIdentity
sleLagLacpControl = _SleLagLacpControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 11, 3)
)


class _SleLagLacpControlRequest_Type(Integer32):
    """Custom type sleLagLacpControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("clearLacpStats", 1)
    )


_SleLagLacpControlRequest_Type.__name__ = "Integer32"
_SleLagLacpControlRequest_Object = MibScalar
sleLagLacpControlRequest = _SleLagLacpControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 11, 3, 1),
    _SleLagLacpControlRequest_Type()
)
sleLagLacpControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLagLacpControlRequest.setStatus("current")
_SleLagLacpControlStatus_Type = SleControlStatusType
_SleLagLacpControlStatus_Object = MibScalar
sleLagLacpControlStatus = _SleLagLacpControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 11, 3, 2),
    _SleLagLacpControlStatus_Type()
)
sleLagLacpControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpControlStatus.setStatus("current")
_SleLagLacpControlTimer_Type = Gauge32
_SleLagLacpControlTimer_Object = MibScalar
sleLagLacpControlTimer = _SleLagLacpControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 11, 3, 3),
    _SleLagLacpControlTimer_Type()
)
sleLagLacpControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLagLacpControlTimer.setStatus("current")
_SleLagLacpControlTimeStamp_Type = TimeTicks
_SleLagLacpControlTimeStamp_Object = MibScalar
sleLagLacpControlTimeStamp = _SleLagLacpControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 11, 3, 4),
    _SleLagLacpControlTimeStamp_Type()
)
sleLagLacpControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpControlTimeStamp.setStatus("current")
_SleLagLacpControlReqResult_Type = SleControlRequestResultType
_SleLagLacpControlReqResult_Object = MibScalar
sleLagLacpControlReqResult = _SleLagLacpControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 11, 3, 5),
    _SleLagLacpControlReqResult_Type()
)
sleLagLacpControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpControlReqResult.setStatus("current")
_SleLagLacpNotification_ObjectIdentity = ObjectIdentity
sleLagLacpNotification = _SleLagLacpNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 11, 4)
)
_SleLagLacpPort_ObjectIdentity = ObjectIdentity
sleLagLacpPort = _SleLagLacpPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12)
)
_SleLagLacpPortTable_Object = MibTable
sleLagLacpPortTable = _SleLagLacpPortTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 1)
)
if mibBuilder.loadTexts:
    sleLagLacpPortTable.setStatus("current")
_SleLagLacpPortEntry_Object = MibTableRow
sleLagLacpPortEntry = _SleLagLacpPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 1, 1)
)
sleLagLacpPortEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleLagLacpPortIndex"),
)
if mibBuilder.loadTexts:
    sleLagLacpPortEntry.setStatus("current")
_SleLagLacpPortIndex_Type = InterfaceIndex
_SleLagLacpPortIndex_Object = MibTableColumn
sleLagLacpPortIndex = _SleLagLacpPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 1, 1, 1),
    _SleLagLacpPortIndex_Type()
)
sleLagLacpPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpPortIndex.setStatus("current")


class _SleLagLacpPortActivity_Type(Integer32):
    """Custom type sleLagLacpPortActivity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleLagLacpPortActivity_Type.__name__ = "Integer32"
_SleLagLacpPortActivity_Object = MibTableColumn
sleLagLacpPortActivity = _SleLagLacpPortActivity_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 1, 1, 2),
    _SleLagLacpPortActivity_Type()
)
sleLagLacpPortActivity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpPortActivity.setStatus("current")


class _SleLagLacpPortActorPriority_Type(Integer32):
    """Custom type sleLagLacpPortActorPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleLagLacpPortActorPriority_Type.__name__ = "Integer32"
_SleLagLacpPortActorPriority_Object = MibTableColumn
sleLagLacpPortActorPriority = _SleLagLacpPortActorPriority_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 1, 1, 3),
    _SleLagLacpPortActorPriority_Type()
)
sleLagLacpPortActorPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpPortActorPriority.setStatus("current")
_SleLagLacpPortActorAggregatorId_Type = Integer32
_SleLagLacpPortActorAggregatorId_Object = MibTableColumn
sleLagLacpPortActorAggregatorId = _SleLagLacpPortActorAggregatorId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 1, 1, 4),
    _SleLagLacpPortActorAggregatorId_Type()
)
sleLagLacpPortActorAggregatorId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpPortActorAggregatorId.setStatus("current")


class _SleLagLacpPortActorAdminKey_Type(Integer32):
    """Custom type sleLagLacpPortActorAdminKey based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleLagLacpPortActorAdminKey_Type.__name__ = "Integer32"
_SleLagLacpPortActorAdminKey_Object = MibTableColumn
sleLagLacpPortActorAdminKey = _SleLagLacpPortActorAdminKey_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 1, 1, 5),
    _SleLagLacpPortActorAdminKey_Type()
)
sleLagLacpPortActorAdminKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpPortActorAdminKey.setStatus("current")


class _SleLagLacpPortActorAdminState_Type(Bits):
    """Custom type sleLagLacpPortActorAdminState based on Bits"""
    namedValues = NamedValues(
        *(("expired", 0),
          ("defaulted", 1),
          ("destributing", 2),
          ("collecting", 3),
          ("synchronization", 4),
          ("aggregation", 5),
          ("lacpTimeout", 6),
          ("lacpActivity", 7))
    )

_SleLagLacpPortActorAdminState_Type.__name__ = "Bits"
_SleLagLacpPortActorAdminState_Object = MibTableColumn
sleLagLacpPortActorAdminState = _SleLagLacpPortActorAdminState_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 1, 1, 6),
    _SleLagLacpPortActorAdminState_Type()
)
sleLagLacpPortActorAdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpPortActorAdminState.setStatus("current")


class _SleLagLacpPortActorOperKey_Type(Integer32):
    """Custom type sleLagLacpPortActorOperKey based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleLagLacpPortActorOperKey_Type.__name__ = "Integer32"
_SleLagLacpPortActorOperKey_Object = MibTableColumn
sleLagLacpPortActorOperKey = _SleLagLacpPortActorOperKey_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 1, 1, 7),
    _SleLagLacpPortActorOperKey_Type()
)
sleLagLacpPortActorOperKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpPortActorOperKey.setStatus("current")


class _SleLagLacpPortActorOperState_Type(Bits):
    """Custom type sleLagLacpPortActorOperState based on Bits"""
    namedValues = NamedValues(
        *(("expired", 0),
          ("defaulted", 1),
          ("destributing", 2),
          ("collecting", 3),
          ("synchronization", 4),
          ("aggregation", 5),
          ("lacpTmeout", 6),
          ("lacpActivity", 7))
    )

_SleLagLacpPortActorOperState_Type.__name__ = "Bits"
_SleLagLacpPortActorOperState_Object = MibTableColumn
sleLagLacpPortActorOperState = _SleLagLacpPortActorOperState_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 1, 1, 8),
    _SleLagLacpPortActorOperState_Type()
)
sleLagLacpPortActorOperState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpPortActorOperState.setStatus("current")
_SleLagLacpPortPartnerAdminSystemMAC_Type = OctetString
_SleLagLacpPortPartnerAdminSystemMAC_Object = MibTableColumn
sleLagLacpPortPartnerAdminSystemMAC = _SleLagLacpPortPartnerAdminSystemMAC_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 1, 1, 9),
    _SleLagLacpPortPartnerAdminSystemMAC_Type()
)
sleLagLacpPortPartnerAdminSystemMAC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpPortPartnerAdminSystemMAC.setStatus("current")


class _SleLagLacpPortPartnerAdminSystemPriority_Type(Integer32):
    """Custom type sleLagLacpPortPartnerAdminSystemPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleLagLacpPortPartnerAdminSystemPriority_Type.__name__ = "Integer32"
_SleLagLacpPortPartnerAdminSystemPriority_Object = MibTableColumn
sleLagLacpPortPartnerAdminSystemPriority = _SleLagLacpPortPartnerAdminSystemPriority_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 1, 1, 10),
    _SleLagLacpPortPartnerAdminSystemPriority_Type()
)
sleLagLacpPortPartnerAdminSystemPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpPortPartnerAdminSystemPriority.setStatus("current")


class _SleLagLacpPortPartnerAdminKey_Type(Integer32):
    """Custom type sleLagLacpPortPartnerAdminKey based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleLagLacpPortPartnerAdminKey_Type.__name__ = "Integer32"
_SleLagLacpPortPartnerAdminKey_Object = MibTableColumn
sleLagLacpPortPartnerAdminKey = _SleLagLacpPortPartnerAdminKey_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 1, 1, 11),
    _SleLagLacpPortPartnerAdminKey_Type()
)
sleLagLacpPortPartnerAdminKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpPortPartnerAdminKey.setStatus("current")
_SleLagLacpPortPartnerAdminNum_Type = InterfaceIndex
_SleLagLacpPortPartnerAdminNum_Object = MibTableColumn
sleLagLacpPortPartnerAdminNum = _SleLagLacpPortPartnerAdminNum_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 1, 1, 12),
    _SleLagLacpPortPartnerAdminNum_Type()
)
sleLagLacpPortPartnerAdminNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpPortPartnerAdminNum.setStatus("current")


class _SleLagLacpPortPartnerAdminPriority_Type(Integer32):
    """Custom type sleLagLacpPortPartnerAdminPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleLagLacpPortPartnerAdminPriority_Type.__name__ = "Integer32"
_SleLagLacpPortPartnerAdminPriority_Object = MibTableColumn
sleLagLacpPortPartnerAdminPriority = _SleLagLacpPortPartnerAdminPriority_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 1, 1, 13),
    _SleLagLacpPortPartnerAdminPriority_Type()
)
sleLagLacpPortPartnerAdminPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpPortPartnerAdminPriority.setStatus("current")


class _SleLagLacpPortPartnerAdminState_Type(Bits):
    """Custom type sleLagLacpPortPartnerAdminState based on Bits"""
    namedValues = NamedValues(
        *(("expired", 0),
          ("defaulted", 1),
          ("destributing", 2),
          ("collecting", 3),
          ("synchronization", 4),
          ("aggregation", 5),
          ("lacpTmeout", 6),
          ("lacpActivity", 7))
    )

_SleLagLacpPortPartnerAdminState_Type.__name__ = "Bits"
_SleLagLacpPortPartnerAdminState_Object = MibTableColumn
sleLagLacpPortPartnerAdminState = _SleLagLacpPortPartnerAdminState_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 1, 1, 14),
    _SleLagLacpPortPartnerAdminState_Type()
)
sleLagLacpPortPartnerAdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpPortPartnerAdminState.setStatus("current")
_SleLagLacpPortPartnerOperSystemMAC_Type = OctetString
_SleLagLacpPortPartnerOperSystemMAC_Object = MibTableColumn
sleLagLacpPortPartnerOperSystemMAC = _SleLagLacpPortPartnerOperSystemMAC_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 1, 1, 15),
    _SleLagLacpPortPartnerOperSystemMAC_Type()
)
sleLagLacpPortPartnerOperSystemMAC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpPortPartnerOperSystemMAC.setStatus("current")


class _SleLagLacpPortPartnerOperSystemPriority_Type(Integer32):
    """Custom type sleLagLacpPortPartnerOperSystemPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleLagLacpPortPartnerOperSystemPriority_Type.__name__ = "Integer32"
_SleLagLacpPortPartnerOperSystemPriority_Object = MibTableColumn
sleLagLacpPortPartnerOperSystemPriority = _SleLagLacpPortPartnerOperSystemPriority_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 1, 1, 16),
    _SleLagLacpPortPartnerOperSystemPriority_Type()
)
sleLagLacpPortPartnerOperSystemPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpPortPartnerOperSystemPriority.setStatus("current")


class _SleLagLacpPortPartnerOperKey_Type(Integer32):
    """Custom type sleLagLacpPortPartnerOperKey based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleLagLacpPortPartnerOperKey_Type.__name__ = "Integer32"
_SleLagLacpPortPartnerOperKey_Object = MibTableColumn
sleLagLacpPortPartnerOperKey = _SleLagLacpPortPartnerOperKey_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 1, 1, 17),
    _SleLagLacpPortPartnerOperKey_Type()
)
sleLagLacpPortPartnerOperKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpPortPartnerOperKey.setStatus("current")
_SleLagLacpPortPartnerOperNum_Type = InterfaceIndex
_SleLagLacpPortPartnerOperNum_Object = MibTableColumn
sleLagLacpPortPartnerOperNum = _SleLagLacpPortPartnerOperNum_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 1, 1, 18),
    _SleLagLacpPortPartnerOperNum_Type()
)
sleLagLacpPortPartnerOperNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpPortPartnerOperNum.setStatus("current")


class _SleLagLacpPortPartnerOperPriority_Type(Integer32):
    """Custom type sleLagLacpPortPartnerOperPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleLagLacpPortPartnerOperPriority_Type.__name__ = "Integer32"
_SleLagLacpPortPartnerOperPriority_Object = MibTableColumn
sleLagLacpPortPartnerOperPriority = _SleLagLacpPortPartnerOperPriority_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 1, 1, 19),
    _SleLagLacpPortPartnerOperPriority_Type()
)
sleLagLacpPortPartnerOperPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpPortPartnerOperPriority.setStatus("current")


class _SleLagLacpPortPartnerOperState_Type(Bits):
    """Custom type sleLagLacpPortPartnerOperState based on Bits"""
    namedValues = NamedValues(
        *(("expired", 0),
          ("defaulted", 1),
          ("destributing", 2),
          ("collecting", 3),
          ("synchronization", 4),
          ("aggregation", 5),
          ("lacpTimeout", 6),
          ("lacpActivity", 7))
    )

_SleLagLacpPortPartnerOperState_Type.__name__ = "Bits"
_SleLagLacpPortPartnerOperState_Object = MibTableColumn
sleLagLacpPortPartnerOperState = _SleLagLacpPortPartnerOperState_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 1, 1, 20),
    _SleLagLacpPortPartnerOperState_Type()
)
sleLagLacpPortPartnerOperState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpPortPartnerOperState.setStatus("current")
_SleLagLacpPortActorAdminAggregatorId_Type = Integer32
_SleLagLacpPortActorAdminAggregatorId_Object = MibTableColumn
sleLagLacpPortActorAdminAggregatorId = _SleLagLacpPortActorAdminAggregatorId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 1, 1, 21),
    _SleLagLacpPortActorAdminAggregatorId_Type()
)
sleLagLacpPortActorAdminAggregatorId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpPortActorAdminAggregatorId.setStatus("current")
_SleLagLacpPortControl_ObjectIdentity = ObjectIdentity
sleLagLacpPortControl = _SleLagLacpPortControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 2)
)


class _SleLagLacpPortControlRequest_Type(Integer32):
    """Custom type sleLagLacpPortControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("setLagLacpPortProfile", 1),
          ("setLagLacpPortProfileWithAggr", 2))
    )


_SleLagLacpPortControlRequest_Type.__name__ = "Integer32"
_SleLagLacpPortControlRequest_Object = MibScalar
sleLagLacpPortControlRequest = _SleLagLacpPortControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 2, 1),
    _SleLagLacpPortControlRequest_Type()
)
sleLagLacpPortControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLagLacpPortControlRequest.setStatus("current")
_SleLagLacpPortControlStatus_Type = SleControlStatusType
_SleLagLacpPortControlStatus_Object = MibScalar
sleLagLacpPortControlStatus = _SleLagLacpPortControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 2, 2),
    _SleLagLacpPortControlStatus_Type()
)
sleLagLacpPortControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpPortControlStatus.setStatus("current")
_SleLagLacpPortControlTimer_Type = Gauge32
_SleLagLacpPortControlTimer_Object = MibScalar
sleLagLacpPortControlTimer = _SleLagLacpPortControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 2, 3),
    _SleLagLacpPortControlTimer_Type()
)
sleLagLacpPortControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLagLacpPortControlTimer.setStatus("current")
_SleLagLacpPortControlTimeStamp_Type = TimeStamp
_SleLagLacpPortControlTimeStamp_Object = MibScalar
sleLagLacpPortControlTimeStamp = _SleLagLacpPortControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 2, 4),
    _SleLagLacpPortControlTimeStamp_Type()
)
sleLagLacpPortControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpPortControlTimeStamp.setStatus("current")
_SleLagLacpPortControlReqResult_Type = SleControlRequestResultType
_SleLagLacpPortControlReqResult_Object = MibScalar
sleLagLacpPortControlReqResult = _SleLagLacpPortControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 2, 5),
    _SleLagLacpPortControlReqResult_Type()
)
sleLagLacpPortControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLagLacpPortControlReqResult.setStatus("current")
_SleLagLacpPortControlIndex_Type = InterfaceIndex
_SleLagLacpPortControlIndex_Object = MibScalar
sleLagLacpPortControlIndex = _SleLagLacpPortControlIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 2, 6),
    _SleLagLacpPortControlIndex_Type()
)
sleLagLacpPortControlIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLagLacpPortControlIndex.setStatus("current")


class _SleLagLacpPortControlActivity_Type(Integer32):
    """Custom type sleLagLacpPortControlActivity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleLagLacpPortControlActivity_Type.__name__ = "Integer32"
_SleLagLacpPortControlActivity_Object = MibScalar
sleLagLacpPortControlActivity = _SleLagLacpPortControlActivity_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 2, 7),
    _SleLagLacpPortControlActivity_Type()
)
sleLagLacpPortControlActivity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLagLacpPortControlActivity.setStatus("current")


class _SleLagLacpPortControlMode_Type(Integer32):
    """Custom type sleLagLacpPortControlMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("passive", 2))
    )


_SleLagLacpPortControlMode_Type.__name__ = "Integer32"
_SleLagLacpPortControlMode_Object = MibScalar
sleLagLacpPortControlMode = _SleLagLacpPortControlMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 2, 8),
    _SleLagLacpPortControlMode_Type()
)
sleLagLacpPortControlMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLagLacpPortControlMode.setStatus("current")


class _SleLagLacpPortControlAdminKey_Type(Integer32):
    """Custom type sleLagLacpPortControlAdminKey based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_SleLagLacpPortControlAdminKey_Type.__name__ = "Integer32"
_SleLagLacpPortControlAdminKey_Object = MibScalar
sleLagLacpPortControlAdminKey = _SleLagLacpPortControlAdminKey_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 2, 9),
    _SleLagLacpPortControlAdminKey_Type()
)
sleLagLacpPortControlAdminKey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLagLacpPortControlAdminKey.setStatus("current")


class _SleLagLacpPortControlAggregation_Type(Integer32):
    """Custom type sleLagLacpPortControlAggregation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("aggregatable", 1),
          ("individual", 2))
    )


_SleLagLacpPortControlAggregation_Type.__name__ = "Integer32"
_SleLagLacpPortControlAggregation_Object = MibScalar
sleLagLacpPortControlAggregation = _SleLagLacpPortControlAggregation_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 2, 10),
    _SleLagLacpPortControlAggregation_Type()
)
sleLagLacpPortControlAggregation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLagLacpPortControlAggregation.setStatus("current")


class _SleLagLacpPortControlPriority_Type(Integer32):
    """Custom type sleLagLacpPortControlPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleLagLacpPortControlPriority_Type.__name__ = "Integer32"
_SleLagLacpPortControlPriority_Object = MibScalar
sleLagLacpPortControlPriority = _SleLagLacpPortControlPriority_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 2, 11),
    _SleLagLacpPortControlPriority_Type()
)
sleLagLacpPortControlPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLagLacpPortControlPriority.setStatus("current")


class _SleLagLacpPortControlTimeout_Type(Integer32):
    """Custom type sleLagLacpPortControlTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("short", 1),
          ("long", 2))
    )


_SleLagLacpPortControlTimeout_Type.__name__ = "Integer32"
_SleLagLacpPortControlTimeout_Object = MibScalar
sleLagLacpPortControlTimeout = _SleLagLacpPortControlTimeout_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 2, 12),
    _SleLagLacpPortControlTimeout_Type()
)
sleLagLacpPortControlTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLagLacpPortControlTimeout.setStatus("current")
_SleLagLacpPortControlAdminAggregatorId_Type = Integer32
_SleLagLacpPortControlAdminAggregatorId_Object = MibScalar
sleLagLacpPortControlAdminAggregatorId = _SleLagLacpPortControlAdminAggregatorId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 2, 13),
    _SleLagLacpPortControlAdminAggregatorId_Type()
)
sleLagLacpPortControlAdminAggregatorId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLagLacpPortControlAdminAggregatorId.setStatus("current")
_SleLagLacpPortNotification_ObjectIdentity = ObjectIdentity
sleLagLacpPortNotification = _SleLagLacpPortNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 3)
)
_SleFdb_ObjectIdentity = ObjectIdentity
sleFdb = _SleFdb_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 13)
)
_SleFdbTable_Object = MibTable
sleFdbTable = _SleFdbTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 13, 1)
)
if mibBuilder.loadTexts:
    sleFdbTable.setStatus("current")
_SleFdbEntry_Object = MibTableRow
sleFdbEntry = _SleFdbEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 13, 1, 1)
)
sleFdbEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleFdbEntryFid"),
    (0, "SLE-BRIDGE-MIB", "sleFdbEntryPort"),
    (0, "SLE-BRIDGE-MIB", "sleFdbEntryMacAddress"),
)
if mibBuilder.loadTexts:
    sleFdbEntry.setStatus("current")


class _SleFdbEntryFid_Type(Integer32):
    """Custom type sleFdbEntryFid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleFdbEntryFid_Type.__name__ = "Integer32"
_SleFdbEntryFid_Object = MibTableColumn
sleFdbEntryFid = _SleFdbEntryFid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 13, 1, 1, 1),
    _SleFdbEntryFid_Type()
)
sleFdbEntryFid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleFdbEntryFid.setStatus("current")


class _SleFdbEntryPort_Type(Integer32):
    """Custom type sleFdbEntryPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_SleFdbEntryPort_Type.__name__ = "Integer32"
_SleFdbEntryPort_Object = MibTableColumn
sleFdbEntryPort = _SleFdbEntryPort_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 13, 1, 1, 2),
    _SleFdbEntryPort_Type()
)
sleFdbEntryPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleFdbEntryPort.setStatus("current")


class _SleFdbEntryMacAddress_Type(OctetString):
    """Custom type sleFdbEntryMacAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 6),
    )


_SleFdbEntryMacAddress_Type.__name__ = "OctetString"
_SleFdbEntryMacAddress_Object = MibTableColumn
sleFdbEntryMacAddress = _SleFdbEntryMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 13, 1, 1, 3),
    _SleFdbEntryMacAddress_Type()
)
sleFdbEntryMacAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleFdbEntryMacAddress.setStatus("current")


class _SleFdbEntryVid_Type(Integer32):
    """Custom type sleFdbEntryVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleFdbEntryVid_Type.__name__ = "Integer32"
_SleFdbEntryVid_Object = MibTableColumn
sleFdbEntryVid = _SleFdbEntryVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 13, 1, 1, 4),
    _SleFdbEntryVid_Type()
)
sleFdbEntryVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleFdbEntryVid.setStatus("current")


class _SleFdbEntryMode_Type(Integer32):
    """Custom type sleFdbEntryMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("local", 0),
          ("static", 1),
          ("dynamic", 2))
    )


_SleFdbEntryMode_Type.__name__ = "Integer32"
_SleFdbEntryMode_Object = MibTableColumn
sleFdbEntryMode = _SleFdbEntryMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 13, 1, 1, 5),
    _SleFdbEntryMode_Type()
)
sleFdbEntryMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleFdbEntryMode.setStatus("current")


class _SleFdbEntryPermission_Type(Integer32):
    """Custom type sleFdbEntryPermission based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("deny", 0),
          ("permit", 1))
    )


_SleFdbEntryPermission_Type.__name__ = "Integer32"
_SleFdbEntryPermission_Object = MibTableColumn
sleFdbEntryPermission = _SleFdbEntryPermission_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 13, 1, 1, 6),
    _SleFdbEntryPermission_Type()
)
sleFdbEntryPermission.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleFdbEntryPermission.setStatus("current")
_SleFdbEntryElapsedTime_Type = Unsigned32
_SleFdbEntryElapsedTime_Object = MibTableColumn
sleFdbEntryElapsedTime = _SleFdbEntryElapsedTime_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 13, 1, 1, 7),
    _SleFdbEntryElapsedTime_Type()
)
sleFdbEntryElapsedTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleFdbEntryElapsedTime.setStatus("current")
_SleFdbControl_ObjectIdentity = ObjectIdentity
sleFdbControl = _SleFdbControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 13, 2)
)


class _SleFdbEntryControlRequest_Type(Integer32):
    """Custom type sleFdbEntryControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("createFdbEntry", 1),
          ("destoryFdbEntry", 2),
          ("clearFdbTableEntries", 3))
    )


_SleFdbEntryControlRequest_Type.__name__ = "Integer32"
_SleFdbEntryControlRequest_Object = MibScalar
sleFdbEntryControlRequest = _SleFdbEntryControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 13, 2, 1),
    _SleFdbEntryControlRequest_Type()
)
sleFdbEntryControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleFdbEntryControlRequest.setStatus("current")
_SleFdbEntryControlStatus_Type = SleControlStatusType
_SleFdbEntryControlStatus_Object = MibScalar
sleFdbEntryControlStatus = _SleFdbEntryControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 13, 2, 2),
    _SleFdbEntryControlStatus_Type()
)
sleFdbEntryControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleFdbEntryControlStatus.setStatus("current")
_SleFdbEntryControlTimer_Type = Gauge32
_SleFdbEntryControlTimer_Object = MibScalar
sleFdbEntryControlTimer = _SleFdbEntryControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 13, 2, 3),
    _SleFdbEntryControlTimer_Type()
)
sleFdbEntryControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleFdbEntryControlTimer.setStatus("current")
_SleFdbEntryControlTImeStamp_Type = TimeTicks
_SleFdbEntryControlTImeStamp_Object = MibScalar
sleFdbEntryControlTImeStamp = _SleFdbEntryControlTImeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 13, 2, 4),
    _SleFdbEntryControlTImeStamp_Type()
)
sleFdbEntryControlTImeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleFdbEntryControlTImeStamp.setStatus("current")
_SleFdbEntryControlReqResult_Type = SleControlRequestResultType
_SleFdbEntryControlReqResult_Object = MibScalar
sleFdbEntryControlReqResult = _SleFdbEntryControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 13, 2, 5),
    _SleFdbEntryControlReqResult_Type()
)
sleFdbEntryControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleFdbEntryControlReqResult.setStatus("current")


class _SleFdbEntryControlFid_Type(Integer32):
    """Custom type sleFdbEntryControlFid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleFdbEntryControlFid_Type.__name__ = "Integer32"
_SleFdbEntryControlFid_Object = MibScalar
sleFdbEntryControlFid = _SleFdbEntryControlFid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 13, 2, 6),
    _SleFdbEntryControlFid_Type()
)
sleFdbEntryControlFid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleFdbEntryControlFid.setStatus("current")


class _SleFdbEntryControlPort_Type(Integer32):
    """Custom type sleFdbEntryControlPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_SleFdbEntryControlPort_Type.__name__ = "Integer32"
_SleFdbEntryControlPort_Object = MibScalar
sleFdbEntryControlPort = _SleFdbEntryControlPort_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 13, 2, 7),
    _SleFdbEntryControlPort_Type()
)
sleFdbEntryControlPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleFdbEntryControlPort.setStatus("current")


class _SleFdbEntryControlMacAddress_Type(OctetString):
    """Custom type sleFdbEntryControlMacAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 6),
    )


_SleFdbEntryControlMacAddress_Type.__name__ = "OctetString"
_SleFdbEntryControlMacAddress_Object = MibScalar
sleFdbEntryControlMacAddress = _SleFdbEntryControlMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 13, 2, 8),
    _SleFdbEntryControlMacAddress_Type()
)
sleFdbEntryControlMacAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleFdbEntryControlMacAddress.setStatus("current")
_SleFdbNotification_ObjectIdentity = ObjectIdentity
sleFdbNotification = _SleFdbNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 13, 3)
)
_SleMfdbOld_ObjectIdentity = ObjectIdentity
sleMfdbOld = _SleMfdbOld_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 14)
)
_SleMfdbOldTable_Object = MibTable
sleMfdbOldTable = _SleMfdbOldTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 14, 1)
)
if mibBuilder.loadTexts:
    sleMfdbOldTable.setStatus("current")
_SleMfdbOldEntry_Object = MibTableRow
sleMfdbOldEntry = _SleMfdbOldEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 14, 1, 1)
)
sleMfdbOldEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleMfdbMacAddress"),
)
if mibBuilder.loadTexts:
    sleMfdbOldEntry.setStatus("current")


class _SleMfdbOldMacAddress_Type(OctetString):
    """Custom type sleMfdbOldMacAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 6),
    )


_SleMfdbOldMacAddress_Type.__name__ = "OctetString"
_SleMfdbOldMacAddress_Object = MibTableColumn
sleMfdbOldMacAddress = _SleMfdbOldMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 14, 1, 1, 1),
    _SleMfdbOldMacAddress_Type()
)
sleMfdbOldMacAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleMfdbOldMacAddress.setStatus("current")


class _SleMfdbOldEntryPermission_Type(Integer32):
    """Custom type sleMfdbOldEntryPermission based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("deny", 0),
          ("permit", 1))
    )


_SleMfdbOldEntryPermission_Type.__name__ = "Integer32"
_SleMfdbOldEntryPermission_Object = MibTableColumn
sleMfdbOldEntryPermission = _SleMfdbOldEntryPermission_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 14, 1, 1, 2),
    _SleMfdbOldEntryPermission_Type()
)
sleMfdbOldEntryPermission.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleMfdbOldEntryPermission.setStatus("current")


class _SleMfdbOldVlanIndex_Type(Integer32):
    """Custom type sleMfdbOldVlanIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 4094),
    )


_SleMfdbOldVlanIndex_Type.__name__ = "Integer32"
_SleMfdbOldVlanIndex_Object = MibTableColumn
sleMfdbOldVlanIndex = _SleMfdbOldVlanIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 14, 1, 1, 3),
    _SleMfdbOldVlanIndex_Type()
)
sleMfdbOldVlanIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleMfdbOldVlanIndex.setStatus("current")


class _SleMfdbOldPorts_Type(OctetString):
    """Custom type sleMfdbOldPorts based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_SleMfdbOldPorts_Type.__name__ = "OctetString"
_SleMfdbOldPorts_Object = MibTableColumn
sleMfdbOldPorts = _SleMfdbOldPorts_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 14, 1, 1, 4),
    _SleMfdbOldPorts_Type()
)
sleMfdbOldPorts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleMfdbOldPorts.setStatus("current")
_SleMfdbOldControl_ObjectIdentity = ObjectIdentity
sleMfdbOldControl = _SleMfdbOldControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 14, 2)
)


class _SleMfdbOldControlRequest_Type(Integer32):
    """Custom type sleMfdbOldControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("createMfdbEntry", 1),
          ("destoryMfdbEntry", 2),
          ("setMfdbEntryPermission", 3),
          ("clearMfdbEntryTable", 4))
    )


_SleMfdbOldControlRequest_Type.__name__ = "Integer32"
_SleMfdbOldControlRequest_Object = MibScalar
sleMfdbOldControlRequest = _SleMfdbOldControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 14, 2, 1),
    _SleMfdbOldControlRequest_Type()
)
sleMfdbOldControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleMfdbOldControlRequest.setStatus("current")
_SleMfdbOldControlStatus_Type = SleControlStatusType
_SleMfdbOldControlStatus_Object = MibScalar
sleMfdbOldControlStatus = _SleMfdbOldControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 14, 2, 2),
    _SleMfdbOldControlStatus_Type()
)
sleMfdbOldControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleMfdbOldControlStatus.setStatus("current")
_SleMfdbOldControlTimer_Type = Gauge32
_SleMfdbOldControlTimer_Object = MibScalar
sleMfdbOldControlTimer = _SleMfdbOldControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 14, 2, 3),
    _SleMfdbOldControlTimer_Type()
)
sleMfdbOldControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleMfdbOldControlTimer.setStatus("current")
_SleMfdbOldControlTimeStamp_Type = TimeTicks
_SleMfdbOldControlTimeStamp_Object = MibScalar
sleMfdbOldControlTimeStamp = _SleMfdbOldControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 14, 2, 4),
    _SleMfdbOldControlTimeStamp_Type()
)
sleMfdbOldControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleMfdbOldControlTimeStamp.setStatus("current")
_SleMfdbOldControlReqResult_Type = SleControlRequestResultType
_SleMfdbOldControlReqResult_Object = MibScalar
sleMfdbOldControlReqResult = _SleMfdbOldControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 14, 2, 5),
    _SleMfdbOldControlReqResult_Type()
)
sleMfdbOldControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleMfdbOldControlReqResult.setStatus("current")


class _SleMfdbOldControlMacAddress_Type(OctetString):
    """Custom type sleMfdbOldControlMacAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 6),
    )


_SleMfdbOldControlMacAddress_Type.__name__ = "OctetString"
_SleMfdbOldControlMacAddress_Object = MibScalar
sleMfdbOldControlMacAddress = _SleMfdbOldControlMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 14, 2, 6),
    _SleMfdbOldControlMacAddress_Type()
)
sleMfdbOldControlMacAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleMfdbOldControlMacAddress.setStatus("current")


class _SleMfdbOldControlEntryPermission_Type(Integer32):
    """Custom type sleMfdbOldControlEntryPermission based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("deny", 0),
          ("permit", 1))
    )


_SleMfdbOldControlEntryPermission_Type.__name__ = "Integer32"
_SleMfdbOldControlEntryPermission_Object = MibScalar
sleMfdbOldControlEntryPermission = _SleMfdbOldControlEntryPermission_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 14, 2, 7),
    _SleMfdbOldControlEntryPermission_Type()
)
sleMfdbOldControlEntryPermission.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleMfdbOldControlEntryPermission.setStatus("current")


class _SleMfdbOldControlVlanIndex_Type(Integer32):
    """Custom type sleMfdbOldControlVlanIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 4094),
    )


_SleMfdbOldControlVlanIndex_Type.__name__ = "Integer32"
_SleMfdbOldControlVlanIndex_Object = MibScalar
sleMfdbOldControlVlanIndex = _SleMfdbOldControlVlanIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 14, 2, 8),
    _SleMfdbOldControlVlanIndex_Type()
)
sleMfdbOldControlVlanIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleMfdbOldControlVlanIndex.setStatus("current")


class _SleMfdbOldControlPorts_Type(OctetString):
    """Custom type sleMfdbOldControlPorts based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_SleMfdbOldControlPorts_Type.__name__ = "OctetString"
_SleMfdbOldControlPorts_Object = MibScalar
sleMfdbOldControlPorts = _SleMfdbOldControlPorts_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 14, 2, 9),
    _SleMfdbOldControlPorts_Type()
)
sleMfdbOldControlPorts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleMfdbOldControlPorts.setStatus("current")
_SleMfdbOldNotification_ObjectIdentity = ObjectIdentity
sleMfdbOldNotification = _SleMfdbOldNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 14, 3)
)
_SleIgmpConf_ObjectIdentity = ObjectIdentity
sleIgmpConf = _SleIgmpConf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 15)
)
_SleIgmpConfTable_Object = MibTable
sleIgmpConfTable = _SleIgmpConfTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 15, 1)
)
if mibBuilder.loadTexts:
    sleIgmpConfTable.setStatus("current")
_SleIgmpConfEntry_Object = MibTableRow
sleIgmpConfEntry = _SleIgmpConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 15, 1, 1)
)
sleIgmpConfEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleVlanIndex"),
)
if mibBuilder.loadTexts:
    sleIgmpConfEntry.setStatus("current")


class _SleIgmpConfVlanIndex_Type(Integer32):
    """Custom type sleIgmpConfVlanIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4094),
    )


_SleIgmpConfVlanIndex_Type.__name__ = "Integer32"
_SleIgmpConfVlanIndex_Object = MibTableColumn
sleIgmpConfVlanIndex = _SleIgmpConfVlanIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 15, 1, 1, 1),
    _SleIgmpConfVlanIndex_Type()
)
sleIgmpConfVlanIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleIgmpConfVlanIndex.setStatus("current")


class _SleIgmpConfEnable_Type(Integer32):
    """Custom type sleIgmpConfEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleIgmpConfEnable_Type.__name__ = "Integer32"
_SleIgmpConfEnable_Object = MibTableColumn
sleIgmpConfEnable = _SleIgmpConfEnable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 15, 1, 1, 2),
    _SleIgmpConfEnable_Type()
)
sleIgmpConfEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleIgmpConfEnable.setStatus("current")


class _SleIgmpConfMulticastFilter_Type(Integer32):
    """Custom type sleIgmpConfMulticastFilter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleIgmpConfMulticastFilter_Type.__name__ = "Integer32"
_SleIgmpConfMulticastFilter_Object = MibTableColumn
sleIgmpConfMulticastFilter = _SleIgmpConfMulticastFilter_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 15, 1, 1, 3),
    _SleIgmpConfMulticastFilter_Type()
)
sleIgmpConfMulticastFilter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleIgmpConfMulticastFilter.setStatus("current")


class _SleIgmpConfOutmostVlan_Type(Integer32):
    """Custom type sleIgmpConfOutmostVlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleIgmpConfOutmostVlan_Type.__name__ = "Integer32"
_SleIgmpConfOutmostVlan_Object = MibTableColumn
sleIgmpConfOutmostVlan = _SleIgmpConfOutmostVlan_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 15, 1, 1, 4),
    _SleIgmpConfOutmostVlan_Type()
)
sleIgmpConfOutmostVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleIgmpConfOutmostVlan.setStatus("current")


class _SleIgmpConfSnoopEnable_Type(Integer32):
    """Custom type sleIgmpConfSnoopEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleIgmpConfSnoopEnable_Type.__name__ = "Integer32"
_SleIgmpConfSnoopEnable_Object = MibTableColumn
sleIgmpConfSnoopEnable = _SleIgmpConfSnoopEnable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 15, 1, 1, 5),
    _SleIgmpConfSnoopEnable_Type()
)
sleIgmpConfSnoopEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleIgmpConfSnoopEnable.setStatus("current")


class _SleIgmpConfSnoopJoinDelay_Type(Integer32):
    """Custom type sleIgmpConfSnoopJoinDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_SleIgmpConfSnoopJoinDelay_Type.__name__ = "Integer32"
_SleIgmpConfSnoopJoinDelay_Object = MibTableColumn
sleIgmpConfSnoopJoinDelay = _SleIgmpConfSnoopJoinDelay_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 15, 1, 1, 6),
    _SleIgmpConfSnoopJoinDelay_Type()
)
sleIgmpConfSnoopJoinDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleIgmpConfSnoopJoinDelay.setStatus("current")


class _SleIgmpConfSnoopQueryDelay_Type(Integer32):
    """Custom type sleIgmpConfSnoopQueryDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 900),
    )


_SleIgmpConfSnoopQueryDelay_Type.__name__ = "Integer32"
_SleIgmpConfSnoopQueryDelay_Object = MibTableColumn
sleIgmpConfSnoopQueryDelay = _SleIgmpConfSnoopQueryDelay_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 15, 1, 1, 7),
    _SleIgmpConfSnoopQueryDelay_Type()
)
sleIgmpConfSnoopQueryDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleIgmpConfSnoopQueryDelay.setStatus("current")
_SleIgmpConfSnoopMrouter_Type = Integer32
_SleIgmpConfSnoopMrouter_Object = MibTableColumn
sleIgmpConfSnoopMrouter = _SleIgmpConfSnoopMrouter_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 15, 1, 1, 8),
    _SleIgmpConfSnoopMrouter_Type()
)
sleIgmpConfSnoopMrouter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleIgmpConfSnoopMrouter.setStatus("current")


class _SleIgmpConfSnoopFastLeave_Type(Integer32):
    """Custom type sleIgmpConfSnoopFastLeave based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleIgmpConfSnoopFastLeave_Type.__name__ = "Integer32"
_SleIgmpConfSnoopFastLeave_Object = MibTableColumn
sleIgmpConfSnoopFastLeave = _SleIgmpConfSnoopFastLeave_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 15, 1, 1, 9),
    _SleIgmpConfSnoopFastLeave_Type()
)
sleIgmpConfSnoopFastLeave.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleIgmpConfSnoopFastLeave.setStatus("current")


class _SleIgmpConfSnoopQuerier_Type(Integer32):
    """Custom type sleIgmpConfSnoopQuerier based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleIgmpConfSnoopQuerier_Type.__name__ = "Integer32"
_SleIgmpConfSnoopQuerier_Object = MibTableColumn
sleIgmpConfSnoopQuerier = _SleIgmpConfSnoopQuerier_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 15, 1, 1, 10),
    _SleIgmpConfSnoopQuerier_Type()
)
sleIgmpConfSnoopQuerier.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleIgmpConfSnoopQuerier.setStatus("current")
_SleIgmpConfControl_ObjectIdentity = ObjectIdentity
sleIgmpConfControl = _SleIgmpConfControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 15, 2)
)
_SleIgmpConfControlRequest_Type = SleIgmpConfControlRequestType
_SleIgmpConfControlRequest_Object = MibScalar
sleIgmpConfControlRequest = _SleIgmpConfControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 15, 2, 1),
    _SleIgmpConfControlRequest_Type()
)
sleIgmpConfControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleIgmpConfControlRequest.setStatus("current")
_SleIgmpConfControlStatus_Type = SleControlStatusType
_SleIgmpConfControlStatus_Object = MibScalar
sleIgmpConfControlStatus = _SleIgmpConfControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 15, 2, 2),
    _SleIgmpConfControlStatus_Type()
)
sleIgmpConfControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleIgmpConfControlStatus.setStatus("current")
_SleIgmpConfControlTimer_Type = Gauge32
_SleIgmpConfControlTimer_Object = MibScalar
sleIgmpConfControlTimer = _SleIgmpConfControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 15, 2, 3),
    _SleIgmpConfControlTimer_Type()
)
sleIgmpConfControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleIgmpConfControlTimer.setStatus("current")
_SleIgmpConfControlTimeStamp_Type = TimeTicks
_SleIgmpConfControlTimeStamp_Object = MibScalar
sleIgmpConfControlTimeStamp = _SleIgmpConfControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 15, 2, 4),
    _SleIgmpConfControlTimeStamp_Type()
)
sleIgmpConfControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleIgmpConfControlTimeStamp.setStatus("current")
_SleIgmpConfControlReqResult_Type = SleControlRequestResultType
_SleIgmpConfControlReqResult_Object = MibScalar
sleIgmpConfControlReqResult = _SleIgmpConfControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 15, 2, 5),
    _SleIgmpConfControlReqResult_Type()
)
sleIgmpConfControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleIgmpConfControlReqResult.setStatus("current")


class _SleIgmpConfControlVlanIndex_Type(Integer32):
    """Custom type sleIgmpConfControlVlanIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleIgmpConfControlVlanIndex_Type.__name__ = "Integer32"
_SleIgmpConfControlVlanIndex_Object = MibScalar
sleIgmpConfControlVlanIndex = _SleIgmpConfControlVlanIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 15, 2, 6),
    _SleIgmpConfControlVlanIndex_Type()
)
sleIgmpConfControlVlanIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleIgmpConfControlVlanIndex.setStatus("current")


class _SleIgmpConfControlEnable_Type(Integer32):
    """Custom type sleIgmpConfControlEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleIgmpConfControlEnable_Type.__name__ = "Integer32"
_SleIgmpConfControlEnable_Object = MibScalar
sleIgmpConfControlEnable = _SleIgmpConfControlEnable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 15, 2, 7),
    _SleIgmpConfControlEnable_Type()
)
sleIgmpConfControlEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleIgmpConfControlEnable.setStatus("current")


class _SleIgmpConfControlMulticastFilter_Type(Integer32):
    """Custom type sleIgmpConfControlMulticastFilter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleIgmpConfControlMulticastFilter_Type.__name__ = "Integer32"
_SleIgmpConfControlMulticastFilter_Object = MibScalar
sleIgmpConfControlMulticastFilter = _SleIgmpConfControlMulticastFilter_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 15, 2, 8),
    _SleIgmpConfControlMulticastFilter_Type()
)
sleIgmpConfControlMulticastFilter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleIgmpConfControlMulticastFilter.setStatus("current")


class _SleIgmpConfControlOutmostVlan_Type(Integer32):
    """Custom type sleIgmpConfControlOutmostVlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleIgmpConfControlOutmostVlan_Type.__name__ = "Integer32"
_SleIgmpConfControlOutmostVlan_Object = MibScalar
sleIgmpConfControlOutmostVlan = _SleIgmpConfControlOutmostVlan_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 15, 2, 9),
    _SleIgmpConfControlOutmostVlan_Type()
)
sleIgmpConfControlOutmostVlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleIgmpConfControlOutmostVlan.setStatus("current")


class _SleIgmpConfControlSnoopEnable_Type(Integer32):
    """Custom type sleIgmpConfControlSnoopEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleIgmpConfControlSnoopEnable_Type.__name__ = "Integer32"
_SleIgmpConfControlSnoopEnable_Object = MibScalar
sleIgmpConfControlSnoopEnable = _SleIgmpConfControlSnoopEnable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 15, 2, 10),
    _SleIgmpConfControlSnoopEnable_Type()
)
sleIgmpConfControlSnoopEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleIgmpConfControlSnoopEnable.setStatus("current")


class _SleIgmpConfControlSnoopJoinDelay_Type(Integer32):
    """Custom type sleIgmpConfControlSnoopJoinDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_SleIgmpConfControlSnoopJoinDelay_Type.__name__ = "Integer32"
_SleIgmpConfControlSnoopJoinDelay_Object = MibScalar
sleIgmpConfControlSnoopJoinDelay = _SleIgmpConfControlSnoopJoinDelay_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 15, 2, 11),
    _SleIgmpConfControlSnoopJoinDelay_Type()
)
sleIgmpConfControlSnoopJoinDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleIgmpConfControlSnoopJoinDelay.setStatus("current")


class _SleIgmpConfControlSnoopQueryDelay_Type(Integer32):
    """Custom type sleIgmpConfControlSnoopQueryDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 900),
    )


_SleIgmpConfControlSnoopQueryDelay_Type.__name__ = "Integer32"
_SleIgmpConfControlSnoopQueryDelay_Object = MibScalar
sleIgmpConfControlSnoopQueryDelay = _SleIgmpConfControlSnoopQueryDelay_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 15, 2, 12),
    _SleIgmpConfControlSnoopQueryDelay_Type()
)
sleIgmpConfControlSnoopQueryDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleIgmpConfControlSnoopQueryDelay.setStatus("current")


class _SleIgmpConfControlSnoopMrouter_Type(Integer32):
    """Custom type sleIgmpConfControlSnoopMrouter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_SleIgmpConfControlSnoopMrouter_Type.__name__ = "Integer32"
_SleIgmpConfControlSnoopMrouter_Object = MibScalar
sleIgmpConfControlSnoopMrouter = _SleIgmpConfControlSnoopMrouter_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 15, 2, 13),
    _SleIgmpConfControlSnoopMrouter_Type()
)
sleIgmpConfControlSnoopMrouter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleIgmpConfControlSnoopMrouter.setStatus("current")


class _SleIgmpConfControlSnoopFastLeave_Type(Integer32):
    """Custom type sleIgmpConfControlSnoopFastLeave based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleIgmpConfControlSnoopFastLeave_Type.__name__ = "Integer32"
_SleIgmpConfControlSnoopFastLeave_Object = MibScalar
sleIgmpConfControlSnoopFastLeave = _SleIgmpConfControlSnoopFastLeave_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 15, 2, 14),
    _SleIgmpConfControlSnoopFastLeave_Type()
)
sleIgmpConfControlSnoopFastLeave.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleIgmpConfControlSnoopFastLeave.setStatus("current")


class _SleIgmpConfControlSnoopQuerier_Type(Integer32):
    """Custom type sleIgmpConfControlSnoopQuerier based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleIgmpConfControlSnoopQuerier_Type.__name__ = "Integer32"
_SleIgmpConfControlSnoopQuerier_Object = MibScalar
sleIgmpConfControlSnoopQuerier = _SleIgmpConfControlSnoopQuerier_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 15, 2, 15),
    _SleIgmpConfControlSnoopQuerier_Type()
)
sleIgmpConfControlSnoopQuerier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleIgmpConfControlSnoopQuerier.setStatus("current")
_SleIgmpConfNotification_ObjectIdentity = ObjectIdentity
sleIgmpConfNotification = _SleIgmpConfNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 15, 3)
)
_SleIgmpMcast_ObjectIdentity = ObjectIdentity
sleIgmpMcast = _SleIgmpMcast_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 16)
)
_SleIgmpMcastTable_Object = MibTable
sleIgmpMcastTable = _SleIgmpMcastTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 16, 1)
)
if mibBuilder.loadTexts:
    sleIgmpMcastTable.setStatus("current")
_SleIgmpMcastEntry_Object = MibTableRow
sleIgmpMcastEntry = _SleIgmpMcastEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 16, 1, 1)
)
sleIgmpMcastEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleVlanIndex"),
    (0, "SLE-BRIDGE-MIB", "sleIgmpMcastIPAddress"),
    (0, "SLE-BRIDGE-MIB", "sleIgmpMcastPortIndex"),
)
if mibBuilder.loadTexts:
    sleIgmpMcastEntry.setStatus("current")


class _SleIgmpMcastVlanIndex_Type(Integer32):
    """Custom type sleIgmpMcastVlanIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleIgmpMcastVlanIndex_Type.__name__ = "Integer32"
_SleIgmpMcastVlanIndex_Object = MibTableColumn
sleIgmpMcastVlanIndex = _SleIgmpMcastVlanIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 16, 1, 1, 1),
    _SleIgmpMcastVlanIndex_Type()
)
sleIgmpMcastVlanIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleIgmpMcastVlanIndex.setStatus("current")
_SleIgmpMcastIPAddress_Type = IpAddress
_SleIgmpMcastIPAddress_Object = MibTableColumn
sleIgmpMcastIPAddress = _SleIgmpMcastIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 16, 1, 1, 2),
    _SleIgmpMcastIPAddress_Type()
)
sleIgmpMcastIPAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleIgmpMcastIPAddress.setStatus("current")


class _SleIgmpMcastPortIndex_Type(Integer32):
    """Custom type sleIgmpMcastPortIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_SleIgmpMcastPortIndex_Type.__name__ = "Integer32"
_SleIgmpMcastPortIndex_Object = MibTableColumn
sleIgmpMcastPortIndex = _SleIgmpMcastPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 16, 1, 1, 3),
    _SleIgmpMcastPortIndex_Type()
)
sleIgmpMcastPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleIgmpMcastPortIndex.setStatus("current")


class _SleIgmpMcastType_Type(Integer32):
    """Custom type sleIgmpMcastType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("static", 0),
          ("dynamic", 1))
    )


_SleIgmpMcastType_Type.__name__ = "Integer32"
_SleIgmpMcastType_Object = MibTableColumn
sleIgmpMcastType = _SleIgmpMcastType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 16, 1, 1, 4),
    _SleIgmpMcastType_Type()
)
sleIgmpMcastType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleIgmpMcastType.setStatus("current")
_SleIgmpMcastExpireTime_Type = Integer32
_SleIgmpMcastExpireTime_Object = MibTableColumn
sleIgmpMcastExpireTime = _SleIgmpMcastExpireTime_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 16, 1, 1, 5),
    _SleIgmpMcastExpireTime_Type()
)
sleIgmpMcastExpireTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleIgmpMcastExpireTime.setStatus("current")
_SleIgmpMcastControl_ObjectIdentity = ObjectIdentity
sleIgmpMcastControl = _SleIgmpMcastControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 16, 2)
)
_SleIgmpMcastControlReqest_Type = SleIgmpMcastControlRequestType
_SleIgmpMcastControlReqest_Object = MibScalar
sleIgmpMcastControlReqest = _SleIgmpMcastControlReqest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 16, 2, 1),
    _SleIgmpMcastControlReqest_Type()
)
sleIgmpMcastControlReqest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleIgmpMcastControlReqest.setStatus("current")
_SleIgmpMcastControlStatus_Type = SleControlStatusType
_SleIgmpMcastControlStatus_Object = MibScalar
sleIgmpMcastControlStatus = _SleIgmpMcastControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 16, 2, 2),
    _SleIgmpMcastControlStatus_Type()
)
sleIgmpMcastControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleIgmpMcastControlStatus.setStatus("current")
_SleIgmpMcastControlTimer_Type = Gauge32
_SleIgmpMcastControlTimer_Object = MibScalar
sleIgmpMcastControlTimer = _SleIgmpMcastControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 16, 2, 3),
    _SleIgmpMcastControlTimer_Type()
)
sleIgmpMcastControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleIgmpMcastControlTimer.setStatus("current")
_SleIgmpMcastControlTimeStamp_Type = TimeTicks
_SleIgmpMcastControlTimeStamp_Object = MibScalar
sleIgmpMcastControlTimeStamp = _SleIgmpMcastControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 16, 2, 4),
    _SleIgmpMcastControlTimeStamp_Type()
)
sleIgmpMcastControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleIgmpMcastControlTimeStamp.setStatus("current")
_SleIgmpMcastControlReqResult_Type = SleControlRequestResultType
_SleIgmpMcastControlReqResult_Object = MibScalar
sleIgmpMcastControlReqResult = _SleIgmpMcastControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 16, 2, 5),
    _SleIgmpMcastControlReqResult_Type()
)
sleIgmpMcastControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleIgmpMcastControlReqResult.setStatus("current")


class _SleIgmpMcastControlVlanIndex_Type(Integer32):
    """Custom type sleIgmpMcastControlVlanIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleIgmpMcastControlVlanIndex_Type.__name__ = "Integer32"
_SleIgmpMcastControlVlanIndex_Object = MibScalar
sleIgmpMcastControlVlanIndex = _SleIgmpMcastControlVlanIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 16, 2, 6),
    _SleIgmpMcastControlVlanIndex_Type()
)
sleIgmpMcastControlVlanIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleIgmpMcastControlVlanIndex.setStatus("current")
_SleIgmpMcastControlIPAddress_Type = IpAddress
_SleIgmpMcastControlIPAddress_Object = MibScalar
sleIgmpMcastControlIPAddress = _SleIgmpMcastControlIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 16, 2, 7),
    _SleIgmpMcastControlIPAddress_Type()
)
sleIgmpMcastControlIPAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleIgmpMcastControlIPAddress.setStatus("current")


class _SleIgmpMcastControlPortIndex_Type(Integer32):
    """Custom type sleIgmpMcastControlPortIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_SleIgmpMcastControlPortIndex_Type.__name__ = "Integer32"
_SleIgmpMcastControlPortIndex_Object = MibScalar
sleIgmpMcastControlPortIndex = _SleIgmpMcastControlPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 16, 2, 8),
    _SleIgmpMcastControlPortIndex_Type()
)
sleIgmpMcastControlPortIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleIgmpMcastControlPortIndex.setStatus("current")
_SleIgmpMcastNotification_ObjectIdentity = ObjectIdentity
sleIgmpMcastNotification = _SleIgmpMcastNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 16, 3)
)
_SleIgmpMcastCounterInfo_ObjectIdentity = ObjectIdentity
sleIgmpMcastCounterInfo = _SleIgmpMcastCounterInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 16, 4)
)
_SleIgmpMcastCounterInfoGroupCount_Type = Counter32
_SleIgmpMcastCounterInfoGroupCount_Object = MibScalar
sleIgmpMcastCounterInfoGroupCount = _SleIgmpMcastCounterInfoGroupCount_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 16, 4, 1),
    _SleIgmpMcastCounterInfoGroupCount_Type()
)
sleIgmpMcastCounterInfoGroupCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleIgmpMcastCounterInfoGroupCount.setStatus("current")
_SleIgmpMcastCounterInfoSnoopingCount_Type = Counter32
_SleIgmpMcastCounterInfoSnoopingCount_Object = MibScalar
sleIgmpMcastCounterInfoSnoopingCount = _SleIgmpMcastCounterInfoSnoopingCount_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 16, 4, 2),
    _SleIgmpMcastCounterInfoSnoopingCount_Type()
)
sleIgmpMcastCounterInfoSnoopingCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleIgmpMcastCounterInfoSnoopingCount.setStatus("current")
_SleMcastMrouteCounterInfo_ObjectIdentity = ObjectIdentity
sleMcastMrouteCounterInfo = _SleMcastMrouteCounterInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 16, 5)
)
_SleMcastMrouteJoinedCount_Type = Counter32
_SleMcastMrouteJoinedCount_Object = MibScalar
sleMcastMrouteJoinedCount = _SleMcastMrouteJoinedCount_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 16, 5, 1),
    _SleMcastMrouteJoinedCount_Type()
)
sleMcastMrouteJoinedCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleMcastMrouteJoinedCount.setStatus("current")
_SleStackDevice_ObjectIdentity = ObjectIdentity
sleStackDevice = _SleStackDevice_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 17)
)
_SleStackDeviceTable_Object = MibTable
sleStackDeviceTable = _SleStackDeviceTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 17, 1)
)
if mibBuilder.loadTexts:
    sleStackDeviceTable.setStatus("current")
_SleStackDeviceEntry_Object = MibTableRow
sleStackDeviceEntry = _SleStackDeviceEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 17, 1, 1)
)
sleStackDeviceEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleStackDeviceMacAddress"),
)
if mibBuilder.loadTexts:
    sleStackDeviceEntry.setStatus("current")


class _SleStackDeviceMacAddress_Type(OctetString):
    """Custom type sleStackDeviceMacAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 6),
    )


_SleStackDeviceMacAddress_Type.__name__ = "OctetString"
_SleStackDeviceMacAddress_Object = MibTableColumn
sleStackDeviceMacAddress = _SleStackDeviceMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 17, 1, 1, 1),
    _SleStackDeviceMacAddress_Type()
)
sleStackDeviceMacAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStackDeviceMacAddress.setStatus("current")
_SleStackDeviceNodeId_Type = Integer32
_SleStackDeviceNodeId_Object = MibTableColumn
sleStackDeviceNodeId = _SleStackDeviceNodeId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 17, 1, 1, 2),
    _SleStackDeviceNodeId_Type()
)
sleStackDeviceNodeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStackDeviceNodeId.setStatus("current")


class _SleStackDeviceDescriptor_Type(OctetString):
    """Custom type sleStackDeviceDescriptor based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 256),
    )


_SleStackDeviceDescriptor_Type.__name__ = "OctetString"
_SleStackDeviceDescriptor_Object = MibTableColumn
sleStackDeviceDescriptor = _SleStackDeviceDescriptor_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 17, 1, 1, 3),
    _SleStackDeviceDescriptor_Type()
)
sleStackDeviceDescriptor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStackDeviceDescriptor.setStatus("current")


class _SleStackDeviceMode_Type(Integer32):
    """Custom type sleStackDeviceMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("master", 1),
          ("slave", 2))
    )


_SleStackDeviceMode_Type.__name__ = "Integer32"
_SleStackDeviceMode_Object = MibTableColumn
sleStackDeviceMode = _SleStackDeviceMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 17, 1, 1, 4),
    _SleStackDeviceMode_Type()
)
sleStackDeviceMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStackDeviceMode.setStatus("current")


class _SleStackDeviceStatus_Type(Integer32):
    """Custom type sleStackDeviceStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("inactive", 0),
          ("active", 1))
    )


_SleStackDeviceStatus_Type.__name__ = "Integer32"
_SleStackDeviceStatus_Object = MibTableColumn
sleStackDeviceStatus = _SleStackDeviceStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 17, 1, 1, 5),
    _SleStackDeviceStatus_Type()
)
sleStackDeviceStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStackDeviceStatus.setStatus("current")


class _SleStackDeviceType_Type(OctetString):
    """Custom type sleStackDeviceType based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_SleStackDeviceType_Type.__name__ = "OctetString"
_SleStackDeviceType_Object = MibTableColumn
sleStackDeviceType = _SleStackDeviceType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 17, 1, 1, 6),
    _SleStackDeviceType_Type()
)
sleStackDeviceType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStackDeviceType.setStatus("current")


class _SleStackDeviceHostName_Type(OctetString):
    """Custom type sleStackDeviceHostName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_SleStackDeviceHostName_Type.__name__ = "OctetString"
_SleStackDeviceHostName_Object = MibTableColumn
sleStackDeviceHostName = _SleStackDeviceHostName_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 17, 1, 1, 7),
    _SleStackDeviceHostName_Type()
)
sleStackDeviceHostName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStackDeviceHostName.setStatus("current")


class _SleStackDevicePortNum_Type(Integer32):
    """Custom type sleStackDevicePortNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_SleStackDevicePortNum_Type.__name__ = "Integer32"
_SleStackDevicePortNum_Object = MibTableColumn
sleStackDevicePortNum = _SleStackDevicePortNum_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 17, 1, 1, 8),
    _SleStackDevicePortNum_Type()
)
sleStackDevicePortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStackDevicePortNum.setStatus("current")
_SleStackDeviceControl_ObjectIdentity = ObjectIdentity
sleStackDeviceControl = _SleStackDeviceControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 17, 2)
)


class _SleStackDeviceControlRequest_Type(Integer32):
    """Custom type sleStackDeviceControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createStackSlaveDevice", 1),
          ("destoryStackSlaveDevice", 2))
    )


_SleStackDeviceControlRequest_Type.__name__ = "Integer32"
_SleStackDeviceControlRequest_Object = MibScalar
sleStackDeviceControlRequest = _SleStackDeviceControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 17, 2, 1),
    _SleStackDeviceControlRequest_Type()
)
sleStackDeviceControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleStackDeviceControlRequest.setStatus("current")
_SleStackDeviceControlStatus_Type = SleControlStatusType
_SleStackDeviceControlStatus_Object = MibScalar
sleStackDeviceControlStatus = _SleStackDeviceControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 17, 2, 2),
    _SleStackDeviceControlStatus_Type()
)
sleStackDeviceControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStackDeviceControlStatus.setStatus("current")
_SleStackDeviceControlTimer_Type = Gauge32
_SleStackDeviceControlTimer_Object = MibScalar
sleStackDeviceControlTimer = _SleStackDeviceControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 17, 2, 3),
    _SleStackDeviceControlTimer_Type()
)
sleStackDeviceControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleStackDeviceControlTimer.setStatus("current")
_SleStackDeviceControlTImeStamp_Type = TimeTicks
_SleStackDeviceControlTImeStamp_Object = MibScalar
sleStackDeviceControlTImeStamp = _SleStackDeviceControlTImeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 17, 2, 4),
    _SleStackDeviceControlTImeStamp_Type()
)
sleStackDeviceControlTImeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStackDeviceControlTImeStamp.setStatus("current")
_SleStackDeviceControlReqResult_Type = SleControlRequestResultType
_SleStackDeviceControlReqResult_Object = MibScalar
sleStackDeviceControlReqResult = _SleStackDeviceControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 17, 2, 5),
    _SleStackDeviceControlReqResult_Type()
)
sleStackDeviceControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleStackDeviceControlReqResult.setStatus("current")


class _SleStackDeviceControlMacAddress_Type(OctetString):
    """Custom type sleStackDeviceControlMacAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 6),
    )


_SleStackDeviceControlMacAddress_Type.__name__ = "OctetString"
_SleStackDeviceControlMacAddress_Object = MibScalar
sleStackDeviceControlMacAddress = _SleStackDeviceControlMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 17, 2, 6),
    _SleStackDeviceControlMacAddress_Type()
)
sleStackDeviceControlMacAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleStackDeviceControlMacAddress.setStatus("current")


class _SleStackDeviceControlDescriptor_Type(OctetString):
    """Custom type sleStackDeviceControlDescriptor based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 256),
    )


_SleStackDeviceControlDescriptor_Type.__name__ = "OctetString"
_SleStackDeviceControlDescriptor_Object = MibScalar
sleStackDeviceControlDescriptor = _SleStackDeviceControlDescriptor_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 17, 2, 7),
    _SleStackDeviceControlDescriptor_Type()
)
sleStackDeviceControlDescriptor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleStackDeviceControlDescriptor.setStatus("current")
_SleStackDeviceNotification_ObjectIdentity = ObjectIdentity
sleStackDeviceNotification = _SleStackDeviceNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 17, 3)
)
_SleErpDomain_ObjectIdentity = ObjectIdentity
sleErpDomain = _SleErpDomain_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18)
)
_SleErpDomainTable_Object = MibTable
sleErpDomainTable = _SleErpDomainTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 1)
)
if mibBuilder.loadTexts:
    sleErpDomainTable.setStatus("current")
_SleErpDomainEntry_Object = MibTableRow
sleErpDomainEntry = _SleErpDomainEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 1, 1)
)
sleErpDomainEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleErpDomainIndex"),
)
if mibBuilder.loadTexts:
    sleErpDomainEntry.setStatus("current")


class _SleErpDomainIndex_Type(Integer32):
    """Custom type sleErpDomainIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleErpDomainIndex_Type.__name__ = "Integer32"
_SleErpDomainIndex_Object = MibTableColumn
sleErpDomainIndex = _SleErpDomainIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 1, 1, 1),
    _SleErpDomainIndex_Type()
)
sleErpDomainIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleErpDomainIndex.setStatus("current")
_SleErpDomainName_Type = OctetString
_SleErpDomainName_Object = MibTableColumn
sleErpDomainName = _SleErpDomainName_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 1, 1, 2),
    _SleErpDomainName_Type()
)
sleErpDomainName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleErpDomainName.setStatus("current")
_SleErpDomainPrimaryPort_Type = InterfaceIndex
_SleErpDomainPrimaryPort_Object = MibTableColumn
sleErpDomainPrimaryPort = _SleErpDomainPrimaryPort_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 1, 1, 3),
    _SleErpDomainPrimaryPort_Type()
)
sleErpDomainPrimaryPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleErpDomainPrimaryPort.setStatus("current")
_SleErpDomainSecondaryPort_Type = InterfaceIndex
_SleErpDomainSecondaryPort_Object = MibTableColumn
sleErpDomainSecondaryPort = _SleErpDomainSecondaryPort_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 1, 1, 4),
    _SleErpDomainSecondaryPort_Type()
)
sleErpDomainSecondaryPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleErpDomainSecondaryPort.setStatus("current")


class _SleErpDomainBridgeRole_Type(Integer32):
    """Custom type sleErpDomainBridgeRole based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("normalNode", 0),
          ("rmNode", 1))
    )


_SleErpDomainBridgeRole_Type.__name__ = "Integer32"
_SleErpDomainBridgeRole_Object = MibTableColumn
sleErpDomainBridgeRole = _SleErpDomainBridgeRole_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 1, 1, 5),
    _SleErpDomainBridgeRole_Type()
)
sleErpDomainBridgeRole.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleErpDomainBridgeRole.setStatus("current")


class _SleErpDomainProtectionActivation_Type(Integer32):
    """Custom type sleErpDomainProtectionActivation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("deactivated", 0),
          ("activated", 1))
    )


_SleErpDomainProtectionActivation_Type.__name__ = "Integer32"
_SleErpDomainProtectionActivation_Object = MibTableColumn
sleErpDomainProtectionActivation = _SleErpDomainProtectionActivation_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 1, 1, 6),
    _SleErpDomainProtectionActivation_Type()
)
sleErpDomainProtectionActivation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleErpDomainProtectionActivation.setStatus("current")


class _SleErpDomainOperatorRequest_Type(Integer32):
    """Custom type sleErpDomainOperatorRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("clear", 0),
          ("manualToSecondary", 1))
    )


_SleErpDomainOperatorRequest_Type.__name__ = "Integer32"
_SleErpDomainOperatorRequest_Object = MibTableColumn
sleErpDomainOperatorRequest = _SleErpDomainOperatorRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 1, 1, 7),
    _SleErpDomainOperatorRequest_Type()
)
sleErpDomainOperatorRequest.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleErpDomainOperatorRequest.setStatus("current")


class _SleErpDomainWaitToRestoreTime_Type(Integer32):
    """Custom type sleErpDomainWaitToRestoreTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 720),
    )


_SleErpDomainWaitToRestoreTime_Type.__name__ = "Integer32"
_SleErpDomainWaitToRestoreTime_Object = MibTableColumn
sleErpDomainWaitToRestoreTime = _SleErpDomainWaitToRestoreTime_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 1, 1, 8),
    _SleErpDomainWaitToRestoreTime_Type()
)
sleErpDomainWaitToRestoreTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleErpDomainWaitToRestoreTime.setStatus("current")


class _SleErpDomainTestPacketInterval_Type(Integer32):
    """Custom type sleErpDomainTestPacketInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 500),
    )


_SleErpDomainTestPacketInterval_Type.__name__ = "Integer32"
_SleErpDomainTestPacketInterval_Object = MibTableColumn
sleErpDomainTestPacketInterval = _SleErpDomainTestPacketInterval_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 1, 1, 9),
    _SleErpDomainTestPacketInterval_Type()
)
sleErpDomainTestPacketInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleErpDomainTestPacketInterval.setStatus("current")


class _SleErpDomainLearningDisabledTime_Type(Integer32):
    """Custom type sleErpDomainLearningDisabledTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 500),
    )


_SleErpDomainLearningDisabledTime_Type.__name__ = "Integer32"
_SleErpDomainLearningDisabledTime_Object = MibTableColumn
sleErpDomainLearningDisabledTime = _SleErpDomainLearningDisabledTime_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 1, 1, 10),
    _SleErpDomainLearningDisabledTime_Type()
)
sleErpDomainLearningDisabledTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleErpDomainLearningDisabledTime.setStatus("current")


class _SleErpDomainNodeStatus_Type(Integer32):
    """Custom type sleErpDomainNodeStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("rmidle", 0),
          ("primaryProtecting", 1),
          ("protecting", 2),
          ("idle", 3),
          ("failedS", 4),
          ("failedP", 5),
          ("preForward", 6),
          ("isolated", 7),
          ("deactivated", 8),
          ("backoff", 9))
    )


_SleErpDomainNodeStatus_Type.__name__ = "Integer32"
_SleErpDomainNodeStatus_Object = MibTableColumn
sleErpDomainNodeStatus = _SleErpDomainNodeStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 1, 1, 11),
    _SleErpDomainNodeStatus_Type()
)
sleErpDomainNodeStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleErpDomainNodeStatus.setStatus("current")


class _SleErpDomainRingStatus_Type(Integer32):
    """Custom type sleErpDomainRingStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("normal", 0),
          ("protecting", 1),
          ("unknown", 2))
    )


_SleErpDomainRingStatus_Type.__name__ = "Integer32"
_SleErpDomainRingStatus_Object = MibTableColumn
sleErpDomainRingStatus = _SleErpDomainRingStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 1, 1, 12),
    _SleErpDomainRingStatus_Type()
)
sleErpDomainRingStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleErpDomainRingStatus.setStatus("current")


class _SleErpDomainLotp_Type(Integer32):
    """Custom type sleErpDomainLotp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("clear", 0),
          ("raised", 1))
    )


_SleErpDomainLotp_Type.__name__ = "Integer32"
_SleErpDomainLotp_Object = MibTableColumn
sleErpDomainLotp = _SleErpDomainLotp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 1, 1, 13),
    _SleErpDomainLotp_Type()
)
sleErpDomainLotp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleErpDomainLotp.setStatus("current")


class _SleErpDomainULotp_Type(Integer32):
    """Custom type sleErpDomainULotp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("clear", 0),
          ("raised", 1))
    )


_SleErpDomainULotp_Type.__name__ = "Integer32"
_SleErpDomainULotp_Object = MibTableColumn
sleErpDomainULotp = _SleErpDomainULotp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 1, 1, 14),
    _SleErpDomainULotp_Type()
)
sleErpDomainULotp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleErpDomainULotp.setStatus("current")


class _SleErpDomainMultipleRM_Type(Integer32):
    """Custom type sleErpDomainMultipleRM based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("clear", 0),
          ("raised", 1))
    )


_SleErpDomainMultipleRM_Type.__name__ = "Integer32"
_SleErpDomainMultipleRM_Object = MibTableColumn
sleErpDomainMultipleRM = _SleErpDomainMultipleRM_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 1, 1, 15),
    _SleErpDomainMultipleRM_Type()
)
sleErpDomainMultipleRM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleErpDomainMultipleRM.setStatus("current")


class _SleErpDomainRMNodeReacheablility_Type(Integer32):
    """Custom type sleErpDomainRMNodeReacheablility based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("clear", 0),
          ("raised", 1))
    )


_SleErpDomainRMNodeReacheablility_Type.__name__ = "Integer32"
_SleErpDomainRMNodeReacheablility_Object = MibTableColumn
sleErpDomainRMNodeReacheablility = _SleErpDomainRMNodeReacheablility_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 1, 1, 16),
    _SleErpDomainRMNodeReacheablility_Type()
)
sleErpDomainRMNodeReacheablility.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleErpDomainRMNodeReacheablility.setStatus("current")


class _SleErpDomainHoldOffTime_Type(Integer32):
    """Custom type sleErpDomainHoldOffTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 20000),
    )


_SleErpDomainHoldOffTime_Type.__name__ = "Integer32"
_SleErpDomainHoldOffTime_Object = MibTableColumn
sleErpDomainHoldOffTime = _SleErpDomainHoldOffTime_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 1, 1, 17),
    _SleErpDomainHoldOffTime_Type()
)
sleErpDomainHoldOffTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleErpDomainHoldOffTime.setStatus("current")


class _SleErpDomainRingPriority_Type(Integer32):
    """Custom type sleErpDomainRingPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 255),
    )


_SleErpDomainRingPriority_Type.__name__ = "Integer32"
_SleErpDomainRingPriority_Object = MibTableColumn
sleErpDomainRingPriority = _SleErpDomainRingPriority_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 1, 1, 18),
    _SleErpDomainRingPriority_Type()
)
sleErpDomainRingPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleErpDomainRingPriority.setStatus("current")
_SleErpDomainControl_ObjectIdentity = ObjectIdentity
sleErpDomainControl = _SleErpDomainControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 2)
)


class _SleErpDomainControlRequest_Type(Integer32):
    """Custom type sleErpDomainControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("createErpDomain", 1),
          ("destroyErpDomain", 2),
          ("setErpDomainProfile", 3),
          ("setErpProtectionActivation", 4),
          ("setErpHoldOffTime", 5),
          ("setErpRingPriority", 6),
          ("setErpTrap", 7))
    )


_SleErpDomainControlRequest_Type.__name__ = "Integer32"
_SleErpDomainControlRequest_Object = MibScalar
sleErpDomainControlRequest = _SleErpDomainControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 2, 1),
    _SleErpDomainControlRequest_Type()
)
sleErpDomainControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleErpDomainControlRequest.setStatus("current")
_SleErpDomainControlStatus_Type = SleControlStatusType
_SleErpDomainControlStatus_Object = MibScalar
sleErpDomainControlStatus = _SleErpDomainControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 2, 2),
    _SleErpDomainControlStatus_Type()
)
sleErpDomainControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleErpDomainControlStatus.setStatus("current")
_SleErpDomainControlTimer_Type = Gauge32
_SleErpDomainControlTimer_Object = MibScalar
sleErpDomainControlTimer = _SleErpDomainControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 2, 3),
    _SleErpDomainControlTimer_Type()
)
sleErpDomainControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleErpDomainControlTimer.setStatus("current")
_SleErpDomainControlTImeStamp_Type = TimeTicks
_SleErpDomainControlTImeStamp_Object = MibScalar
sleErpDomainControlTImeStamp = _SleErpDomainControlTImeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 2, 4),
    _SleErpDomainControlTImeStamp_Type()
)
sleErpDomainControlTImeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleErpDomainControlTImeStamp.setStatus("current")
_SleErpDomainControlReqResult_Type = SleControlRequestResultType
_SleErpDomainControlReqResult_Object = MibScalar
sleErpDomainControlReqResult = _SleErpDomainControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 2, 5),
    _SleErpDomainControlReqResult_Type()
)
sleErpDomainControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleErpDomainControlReqResult.setStatus("current")
_SleErpDomainControlIndex_Type = Integer32
_SleErpDomainControlIndex_Object = MibScalar
sleErpDomainControlIndex = _SleErpDomainControlIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 2, 6),
    _SleErpDomainControlIndex_Type()
)
sleErpDomainControlIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleErpDomainControlIndex.setStatus("current")
_SleErpDomainControlName_Type = OctetString
_SleErpDomainControlName_Object = MibScalar
sleErpDomainControlName = _SleErpDomainControlName_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 2, 7),
    _SleErpDomainControlName_Type()
)
sleErpDomainControlName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleErpDomainControlName.setStatus("current")
_SleErpDomainControlPrimaryPort_Type = InterfaceIndex
_SleErpDomainControlPrimaryPort_Object = MibScalar
sleErpDomainControlPrimaryPort = _SleErpDomainControlPrimaryPort_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 2, 8),
    _SleErpDomainControlPrimaryPort_Type()
)
sleErpDomainControlPrimaryPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleErpDomainControlPrimaryPort.setStatus("current")
_SleErpDomainControlSecondaryPort_Type = InterfaceIndex
_SleErpDomainControlSecondaryPort_Object = MibScalar
sleErpDomainControlSecondaryPort = _SleErpDomainControlSecondaryPort_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 2, 9),
    _SleErpDomainControlSecondaryPort_Type()
)
sleErpDomainControlSecondaryPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleErpDomainControlSecondaryPort.setStatus("current")


class _SleErpDomainControlBridgeRole_Type(Integer32):
    """Custom type sleErpDomainControlBridgeRole based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("normalNode", 0),
          ("rmNode", 1))
    )


_SleErpDomainControlBridgeRole_Type.__name__ = "Integer32"
_SleErpDomainControlBridgeRole_Object = MibScalar
sleErpDomainControlBridgeRole = _SleErpDomainControlBridgeRole_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 2, 10),
    _SleErpDomainControlBridgeRole_Type()
)
sleErpDomainControlBridgeRole.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleErpDomainControlBridgeRole.setStatus("current")


class _SleErpDomainControlProtectionActivation_Type(Integer32):
    """Custom type sleErpDomainControlProtectionActivation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("deactivated", 0),
          ("activated", 1))
    )


_SleErpDomainControlProtectionActivation_Type.__name__ = "Integer32"
_SleErpDomainControlProtectionActivation_Object = MibScalar
sleErpDomainControlProtectionActivation = _SleErpDomainControlProtectionActivation_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 2, 11),
    _SleErpDomainControlProtectionActivation_Type()
)
sleErpDomainControlProtectionActivation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleErpDomainControlProtectionActivation.setStatus("current")


class _SleErpDomainControlOperatorRequest_Type(Integer32):
    """Custom type sleErpDomainControlOperatorRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("clear", 0),
          ("manualToSecondary", 1))
    )


_SleErpDomainControlOperatorRequest_Type.__name__ = "Integer32"
_SleErpDomainControlOperatorRequest_Object = MibScalar
sleErpDomainControlOperatorRequest = _SleErpDomainControlOperatorRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 2, 12),
    _SleErpDomainControlOperatorRequest_Type()
)
sleErpDomainControlOperatorRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleErpDomainControlOperatorRequest.setStatus("current")


class _SleErpDomainControlWaitToRestoreTime_Type(Integer32):
    """Custom type sleErpDomainControlWaitToRestoreTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 720),
    )


_SleErpDomainControlWaitToRestoreTime_Type.__name__ = "Integer32"
_SleErpDomainControlWaitToRestoreTime_Object = MibScalar
sleErpDomainControlWaitToRestoreTime = _SleErpDomainControlWaitToRestoreTime_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 2, 13),
    _SleErpDomainControlWaitToRestoreTime_Type()
)
sleErpDomainControlWaitToRestoreTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleErpDomainControlWaitToRestoreTime.setStatus("current")


class _SleErpDomainControlTestPacketInterval_Type(Integer32):
    """Custom type sleErpDomainControlTestPacketInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 500),
    )


_SleErpDomainControlTestPacketInterval_Type.__name__ = "Integer32"
_SleErpDomainControlTestPacketInterval_Object = MibScalar
sleErpDomainControlTestPacketInterval = _SleErpDomainControlTestPacketInterval_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 2, 14),
    _SleErpDomainControlTestPacketInterval_Type()
)
sleErpDomainControlTestPacketInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleErpDomainControlTestPacketInterval.setStatus("current")


class _SleErpDomainControlLearningDisabledTime_Type(Integer32):
    """Custom type sleErpDomainControlLearningDisabledTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 500),
    )


_SleErpDomainControlLearningDisabledTime_Type.__name__ = "Integer32"
_SleErpDomainControlLearningDisabledTime_Object = MibScalar
sleErpDomainControlLearningDisabledTime = _SleErpDomainControlLearningDisabledTime_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 2, 15),
    _SleErpDomainControlLearningDisabledTime_Type()
)
sleErpDomainControlLearningDisabledTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleErpDomainControlLearningDisabledTime.setStatus("current")


class _SleErpDomainControlHoldOffTime_Type(Integer32):
    """Custom type sleErpDomainControlHoldOffTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 20000),
    )


_SleErpDomainControlHoldOffTime_Type.__name__ = "Integer32"
_SleErpDomainControlHoldOffTime_Object = MibScalar
sleErpDomainControlHoldOffTime = _SleErpDomainControlHoldOffTime_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 2, 16),
    _SleErpDomainControlHoldOffTime_Type()
)
sleErpDomainControlHoldOffTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleErpDomainControlHoldOffTime.setStatus("current")


class _SleErpDomainControlRingPriority_Type(Integer32):
    """Custom type sleErpDomainControlRingPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 255),
    )


_SleErpDomainControlRingPriority_Type.__name__ = "Integer32"
_SleErpDomainControlRingPriority_Object = MibScalar
sleErpDomainControlRingPriority = _SleErpDomainControlRingPriority_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 2, 17),
    _SleErpDomainControlRingPriority_Type()
)
sleErpDomainControlRingPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleErpDomainControlRingPriority.setStatus("current")


class _SleErpDomainControlLotp_Type(Integer32):
    """Custom type sleErpDomainControlLotp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("clear", 0),
          ("raised", 1))
    )


_SleErpDomainControlLotp_Type.__name__ = "Integer32"
_SleErpDomainControlLotp_Object = MibScalar
sleErpDomainControlLotp = _SleErpDomainControlLotp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 2, 18),
    _SleErpDomainControlLotp_Type()
)
sleErpDomainControlLotp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleErpDomainControlLotp.setStatus("current")


class _SleErpDomainControlULotp_Type(Integer32):
    """Custom type sleErpDomainControlULotp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("clear", 0),
          ("raised", 1))
    )


_SleErpDomainControlULotp_Type.__name__ = "Integer32"
_SleErpDomainControlULotp_Object = MibScalar
sleErpDomainControlULotp = _SleErpDomainControlULotp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 2, 19),
    _SleErpDomainControlULotp_Type()
)
sleErpDomainControlULotp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleErpDomainControlULotp.setStatus("current")


class _SleErpDomainControlMultipleRM_Type(Integer32):
    """Custom type sleErpDomainControlMultipleRM based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("clear", 0),
          ("raised", 1))
    )


_SleErpDomainControlMultipleRM_Type.__name__ = "Integer32"
_SleErpDomainControlMultipleRM_Object = MibScalar
sleErpDomainControlMultipleRM = _SleErpDomainControlMultipleRM_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 2, 20),
    _SleErpDomainControlMultipleRM_Type()
)
sleErpDomainControlMultipleRM.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleErpDomainControlMultipleRM.setStatus("current")


class _SleErpDomainControlRMNodeReacheablility_Type(Integer32):
    """Custom type sleErpDomainControlRMNodeReacheablility based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("clear", 0),
          ("raised", 1))
    )


_SleErpDomainControlRMNodeReacheablility_Type.__name__ = "Integer32"
_SleErpDomainControlRMNodeReacheablility_Object = MibScalar
sleErpDomainControlRMNodeReacheablility = _SleErpDomainControlRMNodeReacheablility_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 2, 21),
    _SleErpDomainControlRMNodeReacheablility_Type()
)
sleErpDomainControlRMNodeReacheablility.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleErpDomainControlRMNodeReacheablility.setStatus("current")
_SleErpDomainNotification_ObjectIdentity = ObjectIdentity
sleErpDomainNotification = _SleErpDomainNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 3)
)
_SleLldpPort_ObjectIdentity = ObjectIdentity
sleLldpPort = _SleLldpPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 19)
)
_SleLldpPortTable_Object = MibTable
sleLldpPortTable = _SleLldpPortTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 19, 1)
)
if mibBuilder.loadTexts:
    sleLldpPortTable.setStatus("current")
_SleLldpPortEntry_Object = MibTableRow
sleLldpPortEntry = _SleLldpPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 19, 1, 1)
)
sleLldpPortEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleLldpPortIndex"),
)
if mibBuilder.loadTexts:
    sleLldpPortEntry.setStatus("current")


class _SleLldpPortIndex_Type(Integer32):
    """Custom type sleLldpPortIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_SleLldpPortIndex_Type.__name__ = "Integer32"
_SleLldpPortIndex_Object = MibTableColumn
sleLldpPortIndex = _SleLldpPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 19, 1, 1, 1),
    _SleLldpPortIndex_Type()
)
sleLldpPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpPortIndex.setStatus("current")
_SleLldpPortActivity_Type = Boolean
_SleLldpPortActivity_Object = MibTableColumn
sleLldpPortActivity = _SleLldpPortActivity_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 19, 1, 1, 2),
    _SleLldpPortActivity_Type()
)
sleLldpPortActivity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpPortActivity.setStatus("current")


class _SleLldpPortAdminStatus_Type(Integer32):
    """Custom type sleLldpPortAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("txOnly", 1),
          ("rxOnly", 2),
          ("txAndRx", 3),
          ("disabled", 4))
    )


_SleLldpPortAdminStatus_Type.__name__ = "Integer32"
_SleLldpPortAdminStatus_Object = MibTableColumn
sleLldpPortAdminStatus = _SleLldpPortAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 19, 1, 1, 3),
    _SleLldpPortAdminStatus_Type()
)
sleLldpPortAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLldpPortAdminStatus.setStatus("current")
_SleLldpPortNotificationEnable_Type = Boolean
_SleLldpPortNotificationEnable_Object = MibTableColumn
sleLldpPortNotificationEnable = _SleLldpPortNotificationEnable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 19, 1, 1, 4),
    _SleLldpPortNotificationEnable_Type()
)
sleLldpPortNotificationEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLldpPortNotificationEnable.setStatus("current")


class _SleLldpPortTLVsTxEnable_Type(Bits):
    """Custom type sleLldpPortTLVsTxEnable based on Bits"""
    namedValues = NamedValues(
        *(("portDesc", 0),
          ("sysName", 1),
          ("sysDesc", 2),
          ("sysCap", 3))
    )

_SleLldpPortTLVsTxEnable_Type.__name__ = "Bits"
_SleLldpPortTLVsTxEnable_Object = MibTableColumn
sleLldpPortTLVsTxEnable = _SleLldpPortTLVsTxEnable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 19, 1, 1, 5),
    _SleLldpPortTLVsTxEnable_Type()
)
sleLldpPortTLVsTxEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLldpPortTLVsTxEnable.setStatus("current")
_SleLldpPortMgmtTxEnable_Type = Boolean
_SleLldpPortMgmtTxEnable_Object = MibTableColumn
sleLldpPortMgmtTxEnable = _SleLldpPortMgmtTxEnable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 19, 1, 1, 6),
    _SleLldpPortMgmtTxEnable_Type()
)
sleLldpPortMgmtTxEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpPortMgmtTxEnable.setStatus("current")
_SleLldpPortMgmtAddress_Type = IpAddress
_SleLldpPortMgmtAddress_Object = MibTableColumn
sleLldpPortMgmtAddress = _SleLldpPortMgmtAddress_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 19, 1, 1, 7),
    _SleLldpPortMgmtAddress_Type()
)
sleLldpPortMgmtAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpPortMgmtAddress.setStatus("current")
_SleLldpPortTLVsTxNetworkPolciyProfile_Type = OctetString
_SleLldpPortTLVsTxNetworkPolciyProfile_Object = MibTableColumn
sleLldpPortTLVsTxNetworkPolciyProfile = _SleLldpPortTLVsTxNetworkPolciyProfile_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 19, 1, 1, 8),
    _SleLldpPortTLVsTxNetworkPolciyProfile_Type()
)
sleLldpPortTLVsTxNetworkPolciyProfile.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpPortTLVsTxNetworkPolciyProfile.setStatus("current")
_SleLldpPortMgmtIPType_Type = Integer32
_SleLldpPortMgmtIPType_Object = MibTableColumn
sleLldpPortMgmtIPType = _SleLldpPortMgmtIPType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 19, 1, 1, 9),
    _SleLldpPortMgmtIPType_Type()
)
sleLldpPortMgmtIPType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpPortMgmtIPType.setStatus("current")
_SleLldpPortMgmtIPAddress_Type = IpAddress
_SleLldpPortMgmtIPAddress_Object = MibTableColumn
sleLldpPortMgmtIPAddress = _SleLldpPortMgmtIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 19, 1, 1, 10),
    _SleLldpPortMgmtIPAddress_Type()
)
sleLldpPortMgmtIPAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpPortMgmtIPAddress.setStatus("current")
_SleLldpPortControl_ObjectIdentity = ObjectIdentity
sleLldpPortControl = _SleLldpPortControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 19, 2)
)


class _SleLldpPortControlRequest_Type(Integer32):
    """Custom type sleLldpPortControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("setLldpPortProfile", 1),
          ("setLldpNetworkPolicyProfile", 2))
    )


_SleLldpPortControlRequest_Type.__name__ = "Integer32"
_SleLldpPortControlRequest_Object = MibScalar
sleLldpPortControlRequest = _SleLldpPortControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 19, 2, 1),
    _SleLldpPortControlRequest_Type()
)
sleLldpPortControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLldpPortControlRequest.setStatus("current")
_SleLldpPortControlStatus_Type = SleControlStatusType
_SleLldpPortControlStatus_Object = MibScalar
sleLldpPortControlStatus = _SleLldpPortControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 19, 2, 2),
    _SleLldpPortControlStatus_Type()
)
sleLldpPortControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpPortControlStatus.setStatus("current")
_SleLldpPortControlTimer_Type = Gauge32
_SleLldpPortControlTimer_Object = MibScalar
sleLldpPortControlTimer = _SleLldpPortControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 19, 2, 3),
    _SleLldpPortControlTimer_Type()
)
sleLldpPortControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLldpPortControlTimer.setStatus("current")
_SleLldpPortControlTimeStamp_Type = TimeTicks
_SleLldpPortControlTimeStamp_Object = MibScalar
sleLldpPortControlTimeStamp = _SleLldpPortControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 19, 2, 4),
    _SleLldpPortControlTimeStamp_Type()
)
sleLldpPortControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpPortControlTimeStamp.setStatus("current")
_SleLldpPortControlReqResult_Type = SleControlRequestResultType
_SleLldpPortControlReqResult_Object = MibScalar
sleLldpPortControlReqResult = _SleLldpPortControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 19, 2, 5),
    _SleLldpPortControlReqResult_Type()
)
sleLldpPortControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpPortControlReqResult.setStatus("current")


class _SleLldpPortControlIndex_Type(Integer32):
    """Custom type sleLldpPortControlIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_SleLldpPortControlIndex_Type.__name__ = "Integer32"
_SleLldpPortControlIndex_Object = MibScalar
sleLldpPortControlIndex = _SleLldpPortControlIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 19, 2, 6),
    _SleLldpPortControlIndex_Type()
)
sleLldpPortControlIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLldpPortControlIndex.setStatus("current")
_SleLldpPortControlActivity_Type = Boolean
_SleLldpPortControlActivity_Object = MibScalar
sleLldpPortControlActivity = _SleLldpPortControlActivity_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 19, 2, 7),
    _SleLldpPortControlActivity_Type()
)
sleLldpPortControlActivity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLldpPortControlActivity.setStatus("current")


class _SleLldpPortControlAdminstatus_Type(Integer32):
    """Custom type sleLldpPortControlAdminstatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("txOnly", 1),
          ("rxOnly", 2),
          ("txAndRx", 3),
          ("disabled", 4))
    )


_SleLldpPortControlAdminstatus_Type.__name__ = "Integer32"
_SleLldpPortControlAdminstatus_Object = MibScalar
sleLldpPortControlAdminstatus = _SleLldpPortControlAdminstatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 19, 2, 8),
    _SleLldpPortControlAdminstatus_Type()
)
sleLldpPortControlAdminstatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLldpPortControlAdminstatus.setStatus("current")
_SleLldpPortControlNotificationEnable_Type = Boolean
_SleLldpPortControlNotificationEnable_Object = MibScalar
sleLldpPortControlNotificationEnable = _SleLldpPortControlNotificationEnable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 19, 2, 9),
    _SleLldpPortControlNotificationEnable_Type()
)
sleLldpPortControlNotificationEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLldpPortControlNotificationEnable.setStatus("current")


class _SleLldpPortControlTLVsTxEnable_Type(Bits):
    """Custom type sleLldpPortControlTLVsTxEnable based on Bits"""
    namedValues = NamedValues(
        *(("portDesc", 0),
          ("sysName", 1),
          ("sysDesc", 2),
          ("sysCap", 3))
    )

_SleLldpPortControlTLVsTxEnable_Type.__name__ = "Bits"
_SleLldpPortControlTLVsTxEnable_Object = MibScalar
sleLldpPortControlTLVsTxEnable = _SleLldpPortControlTLVsTxEnable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 19, 2, 10),
    _SleLldpPortControlTLVsTxEnable_Type()
)
sleLldpPortControlTLVsTxEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLldpPortControlTLVsTxEnable.setStatus("current")
_SleLldpPortControlMgmtTxEnable_Type = Boolean
_SleLldpPortControlMgmtTxEnable_Object = MibScalar
sleLldpPortControlMgmtTxEnable = _SleLldpPortControlMgmtTxEnable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 19, 2, 11),
    _SleLldpPortControlMgmtTxEnable_Type()
)
sleLldpPortControlMgmtTxEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLldpPortControlMgmtTxEnable.setStatus("current")
_SleLldpPortControlMgmtAddress_Type = IpAddress
_SleLldpPortControlMgmtAddress_Object = MibScalar
sleLldpPortControlMgmtAddress = _SleLldpPortControlMgmtAddress_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 19, 2, 12),
    _SleLldpPortControlMgmtAddress_Type()
)
sleLldpPortControlMgmtAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLldpPortControlMgmtAddress.setStatus("current")
_SleLldpPortControlTLVsTxNetworkPolicyProfile_Type = OctetString
_SleLldpPortControlTLVsTxNetworkPolicyProfile_Object = MibScalar
sleLldpPortControlTLVsTxNetworkPolicyProfile = _SleLldpPortControlTLVsTxNetworkPolicyProfile_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 19, 2, 13),
    _SleLldpPortControlTLVsTxNetworkPolicyProfile_Type()
)
sleLldpPortControlTLVsTxNetworkPolicyProfile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLldpPortControlTLVsTxNetworkPolicyProfile.setStatus("current")


class _SleLldpPortControlMgmtIPType_Type(Integer32):
    """Custom type sleLldpPortControlMgmtIPType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ipv4", 1),
          ("ipv6", 2))
    )


_SleLldpPortControlMgmtIPType_Type.__name__ = "Integer32"
_SleLldpPortControlMgmtIPType_Object = MibScalar
sleLldpPortControlMgmtIPType = _SleLldpPortControlMgmtIPType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 19, 2, 14),
    _SleLldpPortControlMgmtIPType_Type()
)
sleLldpPortControlMgmtIPType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLldpPortControlMgmtIPType.setStatus("current")
_SleLldpPortControlMgmtIPAddress_Type = IpAddress
_SleLldpPortControlMgmtIPAddress_Object = MibScalar
sleLldpPortControlMgmtIPAddress = _SleLldpPortControlMgmtIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 19, 2, 15),
    _SleLldpPortControlMgmtIPAddress_Type()
)
sleLldpPortControlMgmtIPAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLldpPortControlMgmtIPAddress.setStatus("current")
_SleLldpPortNotification_ObjectIdentity = ObjectIdentity
sleLldpPortNotification = _SleLldpPortNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 19, 3)
)
_SleLldpRemote_ObjectIdentity = ObjectIdentity
sleLldpRemote = _SleLldpRemote_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 20)
)
_SleLldpRemoteTable_Object = MibTable
sleLldpRemoteTable = _SleLldpRemoteTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 20, 1)
)
if mibBuilder.loadTexts:
    sleLldpRemoteTable.setStatus("current")
_SleLldpRemoteEntry_Object = MibTableRow
sleLldpRemoteEntry = _SleLldpRemoteEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 20, 1, 1)
)
sleLldpRemoteEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleLldpPortIndex"),
    (0, "SLE-BRIDGE-MIB", "sleLldpRemIndex"),
)
if mibBuilder.loadTexts:
    sleLldpRemoteEntry.setStatus("current")


class _SleLldpRemIndex_Type(Integer32):
    """Custom type sleLldpRemIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_SleLldpRemIndex_Type.__name__ = "Integer32"
_SleLldpRemIndex_Object = MibTableColumn
sleLldpRemIndex = _SleLldpRemIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 20, 1, 1, 1),
    _SleLldpRemIndex_Type()
)
sleLldpRemIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLldpRemIndex.setStatus("current")
_SleLldpRemTimeMark_Type = TimeTicks
_SleLldpRemTimeMark_Object = MibTableColumn
sleLldpRemTimeMark = _SleLldpRemTimeMark_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 20, 1, 1, 2),
    _SleLldpRemTimeMark_Type()
)
sleLldpRemTimeMark.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpRemTimeMark.setStatus("current")


class _SleLldpRemChassisIdSubtype_Type(Integer32):
    """Custom type sleLldpRemChassisIdSubtype based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("chassisComponent", 1),
          ("interfaceAlias", 2),
          ("portComponent", 3),
          ("macAddress", 4),
          ("networkAddress", 5),
          ("interfaceName", 6),
          ("local", 7))
    )


_SleLldpRemChassisIdSubtype_Type.__name__ = "Integer32"
_SleLldpRemChassisIdSubtype_Object = MibTableColumn
sleLldpRemChassisIdSubtype = _SleLldpRemChassisIdSubtype_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 20, 1, 1, 3),
    _SleLldpRemChassisIdSubtype_Type()
)
sleLldpRemChassisIdSubtype.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpRemChassisIdSubtype.setStatus("current")


class _SleLldpRemChassisId_Type(OctetString):
    """Custom type sleLldpRemChassisId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 255),
    )


_SleLldpRemChassisId_Type.__name__ = "OctetString"
_SleLldpRemChassisId_Object = MibTableColumn
sleLldpRemChassisId = _SleLldpRemChassisId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 20, 1, 1, 4),
    _SleLldpRemChassisId_Type()
)
sleLldpRemChassisId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLldpRemChassisId.setStatus("current")


class _SleLldpRemPortIdSubtype_Type(Integer32):
    """Custom type sleLldpRemPortIdSubtype based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("interfaceAlias", 1),
          ("portComponent", 2),
          ("macAddress", 3),
          ("networkAddress", 4),
          ("interfaceName", 5),
          ("agentCircuitId", 6),
          ("local", 7))
    )


_SleLldpRemPortIdSubtype_Type.__name__ = "Integer32"
_SleLldpRemPortIdSubtype_Object = MibTableColumn
sleLldpRemPortIdSubtype = _SleLldpRemPortIdSubtype_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 20, 1, 1, 5),
    _SleLldpRemPortIdSubtype_Type()
)
sleLldpRemPortIdSubtype.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLldpRemPortIdSubtype.setStatus("current")


class _SleLldpRemPortId_Type(OctetString):
    """Custom type sleLldpRemPortId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 255),
    )


_SleLldpRemPortId_Type.__name__ = "OctetString"
_SleLldpRemPortId_Object = MibTableColumn
sleLldpRemPortId = _SleLldpRemPortId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 20, 1, 1, 6),
    _SleLldpRemPortId_Type()
)
sleLldpRemPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpRemPortId.setStatus("current")


class _SleLldpRemPortDesc_Type(OctetString):
    """Custom type sleLldpRemPortDesc based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_SleLldpRemPortDesc_Type.__name__ = "OctetString"
_SleLldpRemPortDesc_Object = MibTableColumn
sleLldpRemPortDesc = _SleLldpRemPortDesc_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 20, 1, 1, 7),
    _SleLldpRemPortDesc_Type()
)
sleLldpRemPortDesc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpRemPortDesc.setStatus("current")


class _SleLldpRemSysName_Type(OctetString):
    """Custom type sleLldpRemSysName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_SleLldpRemSysName_Type.__name__ = "OctetString"
_SleLldpRemSysName_Object = MibTableColumn
sleLldpRemSysName = _SleLldpRemSysName_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 20, 1, 1, 8),
    _SleLldpRemSysName_Type()
)
sleLldpRemSysName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpRemSysName.setStatus("current")


class _SleLldpRemSysDesc_Type(OctetString):
    """Custom type sleLldpRemSysDesc based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_SleLldpRemSysDesc_Type.__name__ = "OctetString"
_SleLldpRemSysDesc_Object = MibTableColumn
sleLldpRemSysDesc = _SleLldpRemSysDesc_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 20, 1, 1, 9),
    _SleLldpRemSysDesc_Type()
)
sleLldpRemSysDesc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpRemSysDesc.setStatus("current")


class _SleLldpRemSysCapSupported_Type(Bits):
    """Custom type sleLldpRemSysCapSupported based on Bits"""
    namedValues = NamedValues(
        *(("other", 0),
          ("repeater", 1),
          ("bridge", 2),
          ("wlanAccessPoint", 3),
          ("router", 4),
          ("telephone", 5),
          ("docsisCableDevice", 6),
          ("stationOnly", 7))
    )

_SleLldpRemSysCapSupported_Type.__name__ = "Bits"
_SleLldpRemSysCapSupported_Object = MibTableColumn
sleLldpRemSysCapSupported = _SleLldpRemSysCapSupported_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 20, 1, 1, 10),
    _SleLldpRemSysCapSupported_Type()
)
sleLldpRemSysCapSupported.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpRemSysCapSupported.setStatus("current")


class _SleLldpRemSysCapEnabled_Type(Bits):
    """Custom type sleLldpRemSysCapEnabled based on Bits"""
    namedValues = NamedValues(
        *(("other", 0),
          ("repeater", 1),
          ("bridge", 2),
          ("wlanAccessPoint", 3),
          ("router", 4),
          ("telephone", 5),
          ("docsisCableDevice", 6),
          ("stationOnly", 7))
    )

_SleLldpRemSysCapEnabled_Type.__name__ = "Bits"
_SleLldpRemSysCapEnabled_Object = MibTableColumn
sleLldpRemSysCapEnabled = _SleLldpRemSysCapEnabled_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 20, 1, 1, 11),
    _SleLldpRemSysCapEnabled_Type()
)
sleLldpRemSysCapEnabled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpRemSysCapEnabled.setStatus("current")
_SleLldpRemoteManAddrTable_Object = MibTable
sleLldpRemoteManAddrTable = _SleLldpRemoteManAddrTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 20, 2)
)
if mibBuilder.loadTexts:
    sleLldpRemoteManAddrTable.setStatus("current")
_SleLldpRemoteManAddrEntry_Object = MibTableRow
sleLldpRemoteManAddrEntry = _SleLldpRemoteManAddrEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 20, 2, 1)
)
sleLldpRemoteManAddrEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleLldpPortIndex"),
    (0, "SLE-BRIDGE-MIB", "sleLldpRemIndex"),
    (0, "SLE-BRIDGE-MIB", "sleLldpRemManAddrSubType"),
    (0, "SLE-BRIDGE-MIB", "sleLldpRemManAddr"),
)
if mibBuilder.loadTexts:
    sleLldpRemoteManAddrEntry.setStatus("current")


class _SleLldpRemManAddrSubType_Type(AddressFamilyNumbers):
    """Custom type sleLldpRemManAddrSubType based on AddressFamilyNumbers"""
    subtypeSpec = AddressFamilyNumbers.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_SleLldpRemManAddrSubType_Type.__name__ = "AddressFamilyNumbers"
_SleLldpRemManAddrSubType_Object = MibTableColumn
sleLldpRemManAddrSubType = _SleLldpRemManAddrSubType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 20, 2, 1, 1),
    _SleLldpRemManAddrSubType_Type()
)
sleLldpRemManAddrSubType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpRemManAddrSubType.setStatus("current")
_SleLldpRemManAddr_Type = OctetString
_SleLldpRemManAddr_Object = MibTableColumn
sleLldpRemManAddr = _SleLldpRemManAddr_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 20, 2, 1, 2),
    _SleLldpRemManAddr_Type()
)
sleLldpRemManAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpRemManAddr.setStatus("current")
_SleLldpRemManAddrIfSubType_Type = SleLldpManAddrIfSubType
_SleLldpRemManAddrIfSubType_Object = MibTableColumn
sleLldpRemManAddrIfSubType = _SleLldpRemManAddrIfSubType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 20, 2, 1, 3),
    _SleLldpRemManAddrIfSubType_Type()
)
sleLldpRemManAddrIfSubType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpRemManAddrIfSubType.setStatus("current")
_SleLldpRemManAddrIfId_Type = Integer32
_SleLldpRemManAddrIfId_Object = MibTableColumn
sleLldpRemManAddrIfId = _SleLldpRemManAddrIfId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 20, 2, 1, 4),
    _SleLldpRemManAddrIfId_Type()
)
sleLldpRemManAddrIfId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpRemManAddrIfId.setStatus("current")
_SleLldpRemAddrOid_Type = ObjectIdentifier
_SleLldpRemAddrOid_Object = MibTableColumn
sleLldpRemAddrOid = _SleLldpRemAddrOid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 20, 2, 1, 5),
    _SleLldpRemAddrOid_Type()
)
sleLldpRemAddrOid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpRemAddrOid.setStatus("current")
_SleLldpStatistics_ObjectIdentity = ObjectIdentity
sleLldpStatistics = _SleLldpStatistics_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 21)
)
_SleLldpStatisticsTable_Object = MibTable
sleLldpStatisticsTable = _SleLldpStatisticsTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 21, 1)
)
if mibBuilder.loadTexts:
    sleLldpStatisticsTable.setStatus("current")
_SleLldpStatisticsEntry_Object = MibTableRow
sleLldpStatisticsEntry = _SleLldpStatisticsEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 21, 1, 1)
)
sleLldpStatisticsEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleLldpPortIndex"),
)
if mibBuilder.loadTexts:
    sleLldpStatisticsEntry.setStatus("current")
_SleLldpStatsTxPortFramesTotal_Type = Integer32
_SleLldpStatsTxPortFramesTotal_Object = MibTableColumn
sleLldpStatsTxPortFramesTotal = _SleLldpStatsTxPortFramesTotal_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 21, 1, 1, 1),
    _SleLldpStatsTxPortFramesTotal_Type()
)
sleLldpStatsTxPortFramesTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpStatsTxPortFramesTotal.setStatus("current")
_SleLldpStatsRxPortFramesDiscardedTotal_Type = Counter32
_SleLldpStatsRxPortFramesDiscardedTotal_Object = MibTableColumn
sleLldpStatsRxPortFramesDiscardedTotal = _SleLldpStatsRxPortFramesDiscardedTotal_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 21, 1, 1, 2),
    _SleLldpStatsRxPortFramesDiscardedTotal_Type()
)
sleLldpStatsRxPortFramesDiscardedTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpStatsRxPortFramesDiscardedTotal.setStatus("current")
_SleLldpStatsRxPortFramesErrors_Type = Integer32
_SleLldpStatsRxPortFramesErrors_Object = MibTableColumn
sleLldpStatsRxPortFramesErrors = _SleLldpStatsRxPortFramesErrors_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 21, 1, 1, 3),
    _SleLldpStatsRxPortFramesErrors_Type()
)
sleLldpStatsRxPortFramesErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpStatsRxPortFramesErrors.setStatus("current")
_SleLldpStatsRxPortFramesTotal_Type = Counter32
_SleLldpStatsRxPortFramesTotal_Object = MibTableColumn
sleLldpStatsRxPortFramesTotal = _SleLldpStatsRxPortFramesTotal_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 21, 1, 1, 4),
    _SleLldpStatsRxPortFramesTotal_Type()
)
sleLldpStatsRxPortFramesTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpStatsRxPortFramesTotal.setStatus("current")
_SleLldpStatsRxPortTLVsDiscardedTotal_Type = Integer32
_SleLldpStatsRxPortTLVsDiscardedTotal_Object = MibTableColumn
sleLldpStatsRxPortTLVsDiscardedTotal = _SleLldpStatsRxPortTLVsDiscardedTotal_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 21, 1, 1, 5),
    _SleLldpStatsRxPortTLVsDiscardedTotal_Type()
)
sleLldpStatsRxPortTLVsDiscardedTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpStatsRxPortTLVsDiscardedTotal.setStatus("current")
_SleLldpStatsRxPortTLVsUnrecognizedTotal_Type = Integer32
_SleLldpStatsRxPortTLVsUnrecognizedTotal_Object = MibTableColumn
sleLldpStatsRxPortTLVsUnrecognizedTotal = _SleLldpStatsRxPortTLVsUnrecognizedTotal_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 21, 1, 1, 6),
    _SleLldpStatsRxPortTLVsUnrecognizedTotal_Type()
)
sleLldpStatsRxPortTLVsUnrecognizedTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpStatsRxPortTLVsUnrecognizedTotal.setStatus("current")
_SleLldpStatsRxPortAgeoutsTotal_Type = Counter32
_SleLldpStatsRxPortAgeoutsTotal_Object = MibTableColumn
sleLldpStatsRxPortAgeoutsTotal = _SleLldpStatsRxPortAgeoutsTotal_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 21, 1, 1, 7),
    _SleLldpStatsRxPortAgeoutsTotal_Type()
)
sleLldpStatsRxPortAgeoutsTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpStatsRxPortAgeoutsTotal.setStatus("current")
_SleLldpStatisticsControl_ObjectIdentity = ObjectIdentity
sleLldpStatisticsControl = _SleLldpStatisticsControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 21, 2)
)


class _SleLldpStatsControlRequest_Type(Integer32):
    """Custom type sleLldpStatsControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("clearLldpStatistics", 1)
    )


_SleLldpStatsControlRequest_Type.__name__ = "Integer32"
_SleLldpStatsControlRequest_Object = MibScalar
sleLldpStatsControlRequest = _SleLldpStatsControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 21, 2, 1),
    _SleLldpStatsControlRequest_Type()
)
sleLldpStatsControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLldpStatsControlRequest.setStatus("current")
_SleLldpStatsControlStatus_Type = SleControlStatusType
_SleLldpStatsControlStatus_Object = MibScalar
sleLldpStatsControlStatus = _SleLldpStatsControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 21, 2, 2),
    _SleLldpStatsControlStatus_Type()
)
sleLldpStatsControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpStatsControlStatus.setStatus("current")
_SleLldpStatsControlTimer_Type = Gauge32
_SleLldpStatsControlTimer_Object = MibScalar
sleLldpStatsControlTimer = _SleLldpStatsControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 21, 2, 3),
    _SleLldpStatsControlTimer_Type()
)
sleLldpStatsControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLldpStatsControlTimer.setStatus("current")
_SleLldpStatsControlTimeStamp_Type = TimeTicks
_SleLldpStatsControlTimeStamp_Object = MibScalar
sleLldpStatsControlTimeStamp = _SleLldpStatsControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 21, 2, 4),
    _SleLldpStatsControlTimeStamp_Type()
)
sleLldpStatsControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpStatsControlTimeStamp.setStatus("current")
_SleLldpStatsControlReqResult_Type = SleControlRequestResultType
_SleLldpStatsControlReqResult_Object = MibScalar
sleLldpStatsControlReqResult = _SleLldpStatsControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 21, 2, 5),
    _SleLldpStatsControlReqResult_Type()
)
sleLldpStatsControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpStatsControlReqResult.setStatus("current")


class _SleLldpStatsControlPortIndex_Type(Unsigned32):
    """Custom type sleLldpStatsControlPortIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_SleLldpStatsControlPortIndex_Type.__name__ = "Unsigned32"
_SleLldpStatsControlPortIndex_Object = MibScalar
sleLldpStatsControlPortIndex = _SleLldpStatsControlPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 21, 2, 6),
    _SleLldpStatsControlPortIndex_Type()
)
sleLldpStatsControlPortIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLldpStatsControlPortIndex.setStatus("current")
_SleLldpStatisticsNotification_ObjectIdentity = ObjectIdentity
sleLldpStatisticsNotification = _SleLldpStatisticsNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 21, 3)
)
_SleBridgePortSecurity_ObjectIdentity = ObjectIdentity
sleBridgePortSecurity = _SleBridgePortSecurity_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 22)
)
_SleBridgePSTable_Object = MibTable
sleBridgePSTable = _SleBridgePSTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 22, 1)
)
if mibBuilder.loadTexts:
    sleBridgePSTable.setStatus("current")
_SleBridgePSEntry_Object = MibTableRow
sleBridgePSEntry = _SleBridgePSEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 22, 1, 1)
)
sleBridgePSEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleBridgePSIndex"),
)
if mibBuilder.loadTexts:
    sleBridgePSEntry.setStatus("current")
_SleBridgePSIndex_Type = InterfaceIndex
_SleBridgePSIndex_Object = MibTableColumn
sleBridgePSIndex = _SleBridgePSIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 22, 1, 1, 1),
    _SleBridgePSIndex_Type()
)
sleBridgePSIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePSIndex.setStatus("current")


class _SleBridgePSStatus_Type(Integer32):
    """Custom type sleBridgePSStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgePSStatus_Type.__name__ = "Integer32"
_SleBridgePSStatus_Object = MibTableColumn
sleBridgePSStatus = _SleBridgePSStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 22, 1, 1, 2),
    _SleBridgePSStatus_Type()
)
sleBridgePSStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePSStatus.setStatus("current")


class _SleBridgePSMaxCount_Type(Integer32):
    """Custom type sleBridgePSMaxCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, -1),
        ValueRangeConstraint(1, 16384),
    )


_SleBridgePSMaxCount_Type.__name__ = "Integer32"
_SleBridgePSMaxCount_Object = MibTableColumn
sleBridgePSMaxCount = _SleBridgePSMaxCount_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 22, 1, 1, 3),
    _SleBridgePSMaxCount_Type()
)
sleBridgePSMaxCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePSMaxCount.setStatus("current")
_SleBridgePSCurrCount_Type = Unsigned32
_SleBridgePSCurrCount_Object = MibTableColumn
sleBridgePSCurrCount = _SleBridgePSCurrCount_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 22, 1, 1, 4),
    _SleBridgePSCurrCount_Type()
)
sleBridgePSCurrCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePSCurrCount.setStatus("current")


class _SleBridgePSAgingType_Type(Integer32):
    """Custom type sleBridgePSAgingType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("absolute", 1),
          ("inactivity", 2))
    )


_SleBridgePSAgingType_Type.__name__ = "Integer32"
_SleBridgePSAgingType_Object = MibTableColumn
sleBridgePSAgingType = _SleBridgePSAgingType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 22, 1, 1, 5),
    _SleBridgePSAgingType_Type()
)
sleBridgePSAgingType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePSAgingType.setStatus("current")


class _SleBridgePSAgingTimer_Type(Integer32):
    """Custom type sleBridgePSAgingTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, -1),
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 2147483647),
    )


_SleBridgePSAgingTimer_Type.__name__ = "Integer32"
_SleBridgePSAgingTimer_Object = MibTableColumn
sleBridgePSAgingTimer = _SleBridgePSAgingTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 22, 1, 1, 6),
    _SleBridgePSAgingTimer_Type()
)
sleBridgePSAgingTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePSAgingTimer.setStatus("current")
if mibBuilder.loadTexts:
    sleBridgePSAgingTimer.setUnits("second")


class _SleBridgePSAgingStatic_Type(Integer32):
    """Custom type sleBridgePSAgingStatic based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgePSAgingStatic_Type.__name__ = "Integer32"
_SleBridgePSAgingStatic_Object = MibTableColumn
sleBridgePSAgingStatic = _SleBridgePSAgingStatic_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 22, 1, 1, 7),
    _SleBridgePSAgingStatic_Type()
)
sleBridgePSAgingStatic.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePSAgingStatic.setStatus("current")


class _SleBridgePSViolation_Type(Integer32):
    """Custom type sleBridgePSViolation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("shutdown", 1),
          ("protect", 2),
          ("restrict", 3))
    )


_SleBridgePSViolation_Type.__name__ = "Integer32"
_SleBridgePSViolation_Object = MibTableColumn
sleBridgePSViolation = _SleBridgePSViolation_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 22, 1, 1, 8),
    _SleBridgePSViolation_Type()
)
sleBridgePSViolation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePSViolation.setStatus("current")
_SleBridgePSControl_ObjectIdentity = ObjectIdentity
sleBridgePSControl = _SleBridgePSControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 22, 2)
)


class _SleBridgePSControlRequest_Type(Integer32):
    """Custom type sleBridgePSControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("setPSStatus", 1),
          ("setPSMaxCount", 2),
          ("setPSProfile", 3))
    )


_SleBridgePSControlRequest_Type.__name__ = "Integer32"
_SleBridgePSControlRequest_Object = MibScalar
sleBridgePSControlRequest = _SleBridgePSControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 22, 2, 1),
    _SleBridgePSControlRequest_Type()
)
sleBridgePSControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePSControlRequest.setStatus("current")
_SleBridgePSControlStatus_Type = SleControlStatusType
_SleBridgePSControlStatus_Object = MibScalar
sleBridgePSControlStatus = _SleBridgePSControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 22, 2, 2),
    _SleBridgePSControlStatus_Type()
)
sleBridgePSControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePSControlStatus.setStatus("current")
_SleBridgePSControlTimer_Type = Gauge32
_SleBridgePSControlTimer_Object = MibScalar
sleBridgePSControlTimer = _SleBridgePSControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 22, 2, 3),
    _SleBridgePSControlTimer_Type()
)
sleBridgePSControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePSControlTimer.setStatus("current")
_SleBridgePSControlTimeStamp_Type = TimeTicks
_SleBridgePSControlTimeStamp_Object = MibScalar
sleBridgePSControlTimeStamp = _SleBridgePSControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 22, 2, 4),
    _SleBridgePSControlTimeStamp_Type()
)
sleBridgePSControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePSControlTimeStamp.setStatus("current")
_SleBridgePSControlReqResult_Type = SleControlRequestResultType
_SleBridgePSControlReqResult_Object = MibScalar
sleBridgePSControlReqResult = _SleBridgePSControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 22, 2, 5),
    _SleBridgePSControlReqResult_Type()
)
sleBridgePSControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePSControlReqResult.setStatus("current")
_SleBridgePSControlIndex_Type = InterfaceIndex
_SleBridgePSControlIndex_Object = MibScalar
sleBridgePSControlIndex = _SleBridgePSControlIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 22, 2, 6),
    _SleBridgePSControlIndex_Type()
)
sleBridgePSControlIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePSControlIndex.setStatus("current")


class _SleBridgePSControlPSStatus_Type(Integer32):
    """Custom type sleBridgePSControlPSStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgePSControlPSStatus_Type.__name__ = "Integer32"
_SleBridgePSControlPSStatus_Object = MibScalar
sleBridgePSControlPSStatus = _SleBridgePSControlPSStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 22, 2, 7),
    _SleBridgePSControlPSStatus_Type()
)
sleBridgePSControlPSStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePSControlPSStatus.setStatus("current")


class _SleBridgePSControlMaxCount_Type(Integer32):
    """Custom type sleBridgePSControlMaxCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, -1),
        ValueRangeConstraint(1, 16384),
    )


_SleBridgePSControlMaxCount_Type.__name__ = "Integer32"
_SleBridgePSControlMaxCount_Object = MibScalar
sleBridgePSControlMaxCount = _SleBridgePSControlMaxCount_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 22, 2, 8),
    _SleBridgePSControlMaxCount_Type()
)
sleBridgePSControlMaxCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePSControlMaxCount.setStatus("current")


class _SleBridgePSControlAgingType_Type(Integer32):
    """Custom type sleBridgePSControlAgingType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("absolute", 1),
          ("inactivity", 2))
    )


_SleBridgePSControlAgingType_Type.__name__ = "Integer32"
_SleBridgePSControlAgingType_Object = MibScalar
sleBridgePSControlAgingType = _SleBridgePSControlAgingType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 22, 2, 9),
    _SleBridgePSControlAgingType_Type()
)
sleBridgePSControlAgingType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePSControlAgingType.setStatus("current")


class _SleBridgePSControlAgingTimer_Type(Integer32):
    """Custom type sleBridgePSControlAgingTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, -1),
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 2147483647),
    )


_SleBridgePSControlAgingTimer_Type.__name__ = "Integer32"
_SleBridgePSControlAgingTimer_Object = MibScalar
sleBridgePSControlAgingTimer = _SleBridgePSControlAgingTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 22, 2, 10),
    _SleBridgePSControlAgingTimer_Type()
)
sleBridgePSControlAgingTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePSControlAgingTimer.setStatus("current")
if mibBuilder.loadTexts:
    sleBridgePSControlAgingTimer.setUnits("second")


class _SleBridgePSControlAgingStatic_Type(Integer32):
    """Custom type sleBridgePSControlAgingStatic based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgePSControlAgingStatic_Type.__name__ = "Integer32"
_SleBridgePSControlAgingStatic_Object = MibScalar
sleBridgePSControlAgingStatic = _SleBridgePSControlAgingStatic_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 22, 2, 11),
    _SleBridgePSControlAgingStatic_Type()
)
sleBridgePSControlAgingStatic.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePSControlAgingStatic.setStatus("current")


class _SleBridgePScontrolViolation_Type(Integer32):
    """Custom type sleBridgePScontrolViolation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("shutdown", 1),
          ("protect", 2),
          ("restrict", 3))
    )


_SleBridgePScontrolViolation_Type.__name__ = "Integer32"
_SleBridgePScontrolViolation_Object = MibScalar
sleBridgePScontrolViolation = _SleBridgePScontrolViolation_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 22, 2, 12),
    _SleBridgePScontrolViolation_Type()
)
sleBridgePScontrolViolation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePScontrolViolation.setStatus("current")
_SleBridgePSNotification_ObjectIdentity = ObjectIdentity
sleBridgePSNotification = _SleBridgePSNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 22, 3)
)
_SleBridgePortSecurityFdb_ObjectIdentity = ObjectIdentity
sleBridgePortSecurityFdb = _SleBridgePortSecurityFdb_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 23)
)
_SleBridgePSFdbTable_Object = MibTable
sleBridgePSFdbTable = _SleBridgePSFdbTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 23, 1)
)
if mibBuilder.loadTexts:
    sleBridgePSFdbTable.setStatus("current")
_SleBridgePSFdbEntry_Object = MibTableRow
sleBridgePSFdbEntry = _SleBridgePSFdbEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 23, 1, 1)
)
sleBridgePSFdbEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleBridgePSFdbPort"),
    (0, "SLE-BRIDGE-MIB", "sleBridgePSFdbVid"),
    (0, "SLE-BRIDGE-MIB", "sleBridgePSFdbMacAddress"),
)
if mibBuilder.loadTexts:
    sleBridgePSFdbEntry.setStatus("current")


class _SleBridgePSFdbPort_Type(Integer32):
    """Custom type sleBridgePSFdbPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 512),
    )


_SleBridgePSFdbPort_Type.__name__ = "Integer32"
_SleBridgePSFdbPort_Object = MibTableColumn
sleBridgePSFdbPort = _SleBridgePSFdbPort_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 23, 1, 1, 1),
    _SleBridgePSFdbPort_Type()
)
sleBridgePSFdbPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePSFdbPort.setStatus("current")


class _SleBridgePSFdbVid_Type(Integer32):
    """Custom type sleBridgePSFdbVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleBridgePSFdbVid_Type.__name__ = "Integer32"
_SleBridgePSFdbVid_Object = MibTableColumn
sleBridgePSFdbVid = _SleBridgePSFdbVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 23, 1, 1, 2),
    _SleBridgePSFdbVid_Type()
)
sleBridgePSFdbVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePSFdbVid.setStatus("current")


class _SleBridgePSFdbMacAddress_Type(OctetString):
    """Custom type sleBridgePSFdbMacAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 6),
    )


_SleBridgePSFdbMacAddress_Type.__name__ = "OctetString"
_SleBridgePSFdbMacAddress_Object = MibTableColumn
sleBridgePSFdbMacAddress = _SleBridgePSFdbMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 23, 1, 1, 3),
    _SleBridgePSFdbMacAddress_Type()
)
sleBridgePSFdbMacAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePSFdbMacAddress.setStatus("current")


class _SleBridgePSFdbMode_Type(Integer32):
    """Custom type sleBridgePSFdbMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dynamic", 1),
          ("static", 2))
    )


_SleBridgePSFdbMode_Type.__name__ = "Integer32"
_SleBridgePSFdbMode_Object = MibTableColumn
sleBridgePSFdbMode = _SleBridgePSFdbMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 23, 1, 1, 4),
    _SleBridgePSFdbMode_Type()
)
sleBridgePSFdbMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePSFdbMode.setStatus("current")
_SleBridgePSFdbElapsedTime_Type = Unsigned32
_SleBridgePSFdbElapsedTime_Object = MibTableColumn
sleBridgePSFdbElapsedTime = _SleBridgePSFdbElapsedTime_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 23, 1, 1, 5),
    _SleBridgePSFdbElapsedTime_Type()
)
sleBridgePSFdbElapsedTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePSFdbElapsedTime.setStatus("current")
_SleBridgePSFdbControl_ObjectIdentity = ObjectIdentity
sleBridgePSFdbControl = _SleBridgePSFdbControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 23, 2)
)


class _SleBridgePSFdbControlRequest_Type(Integer32):
    """Custom type sleBridgePSFdbControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("createPSFedEntry", 1),
          ("destroyPSFdbEntry", 2),
          ("clearPSFdbEntry", 3))
    )


_SleBridgePSFdbControlRequest_Type.__name__ = "Integer32"
_SleBridgePSFdbControlRequest_Object = MibScalar
sleBridgePSFdbControlRequest = _SleBridgePSFdbControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 23, 2, 1),
    _SleBridgePSFdbControlRequest_Type()
)
sleBridgePSFdbControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePSFdbControlRequest.setStatus("current")
_SleBridgePSFdbControlStatus_Type = SleControlStatusType
_SleBridgePSFdbControlStatus_Object = MibScalar
sleBridgePSFdbControlStatus = _SleBridgePSFdbControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 23, 2, 2),
    _SleBridgePSFdbControlStatus_Type()
)
sleBridgePSFdbControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePSFdbControlStatus.setStatus("current")
_SleBridgePSFdbControlTimer_Type = Gauge32
_SleBridgePSFdbControlTimer_Object = MibScalar
sleBridgePSFdbControlTimer = _SleBridgePSFdbControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 23, 2, 3),
    _SleBridgePSFdbControlTimer_Type()
)
sleBridgePSFdbControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePSFdbControlTimer.setStatus("current")
_SleBridgePSFdbControlTimeStamp_Type = TimeTicks
_SleBridgePSFdbControlTimeStamp_Object = MibScalar
sleBridgePSFdbControlTimeStamp = _SleBridgePSFdbControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 23, 2, 4),
    _SleBridgePSFdbControlTimeStamp_Type()
)
sleBridgePSFdbControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePSFdbControlTimeStamp.setStatus("current")
_SleBridgePSFdbControlReqResult_Type = SleControlRequestResultType
_SleBridgePSFdbControlReqResult_Object = MibScalar
sleBridgePSFdbControlReqResult = _SleBridgePSFdbControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 23, 2, 5),
    _SleBridgePSFdbControlReqResult_Type()
)
sleBridgePSFdbControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgePSFdbControlReqResult.setStatus("current")


class _SleBridgePSFdbControlPort_Type(Integer32):
    """Custom type sleBridgePSFdbControlPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 512),
    )


_SleBridgePSFdbControlPort_Type.__name__ = "Integer32"
_SleBridgePSFdbControlPort_Object = MibScalar
sleBridgePSFdbControlPort = _SleBridgePSFdbControlPort_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 23, 2, 6),
    _SleBridgePSFdbControlPort_Type()
)
sleBridgePSFdbControlPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePSFdbControlPort.setStatus("current")


class _SleBridgePSFdbControlVid_Type(Integer32):
    """Custom type sleBridgePSFdbControlVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleBridgePSFdbControlVid_Type.__name__ = "Integer32"
_SleBridgePSFdbControlVid_Object = MibScalar
sleBridgePSFdbControlVid = _SleBridgePSFdbControlVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 23, 2, 7),
    _SleBridgePSFdbControlVid_Type()
)
sleBridgePSFdbControlVid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePSFdbControlVid.setStatus("current")


class _SleBridgePSFdbControlMacAddress_Type(OctetString):
    """Custom type sleBridgePSFdbControlMacAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 6),
    )


_SleBridgePSFdbControlMacAddress_Type.__name__ = "OctetString"
_SleBridgePSFdbControlMacAddress_Object = MibScalar
sleBridgePSFdbControlMacAddress = _SleBridgePSFdbControlMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 23, 2, 8),
    _SleBridgePSFdbControlMacAddress_Type()
)
sleBridgePSFdbControlMacAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgePSFdbControlMacAddress.setStatus("current")
_SleBridgePSFdbNotification_ObjectIdentity = ObjectIdentity
sleBridgePSFdbNotification = _SleBridgePSFdbNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 23, 3)
)
_SleBridgeFloodGuard_ObjectIdentity = ObjectIdentity
sleBridgeFloodGuard = _SleBridgeFloodGuard_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24)
)
_SleBridgeFGBase_ObjectIdentity = ObjectIdentity
sleBridgeFGBase = _SleBridgeFGBase_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 1)
)
_SleBridgeFGBaseInfo_ObjectIdentity = ObjectIdentity
sleBridgeFGBaseInfo = _SleBridgeFGBaseInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 1, 1)
)


class _SleBridgeFGBaseCfgdEnabled_Type(Integer32):
    """Custom type sleBridgeFGBaseCfgdEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgeFGBaseCfgdEnabled_Type.__name__ = "Integer32"
_SleBridgeFGBaseCfgdEnabled_Object = MibScalar
sleBridgeFGBaseCfgdEnabled = _SleBridgeFGBaseCfgdEnabled_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 1, 1, 1),
    _SleBridgeFGBaseCfgdEnabled_Type()
)
sleBridgeFGBaseCfgdEnabled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeFGBaseCfgdEnabled.setStatus("current")


class _SleBridgeFGBaseMfgdEnabled_Type(Integer32):
    """Custom type sleBridgeFGBaseMfgdEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgeFGBaseMfgdEnabled_Type.__name__ = "Integer32"
_SleBridgeFGBaseMfgdEnabled_Object = MibScalar
sleBridgeFGBaseMfgdEnabled = _SleBridgeFGBaseMfgdEnabled_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 1, 1, 2),
    _SleBridgeFGBaseMfgdEnabled_Type()
)
sleBridgeFGBaseMfgdEnabled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeFGBaseMfgdEnabled.setStatus("current")


class _SleBridgeFGBaseSfgdEnabled_Type(Integer32):
    """Custom type sleBridgeFGBaseSfgdEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgeFGBaseSfgdEnabled_Type.__name__ = "Integer32"
_SleBridgeFGBaseSfgdEnabled_Object = MibScalar
sleBridgeFGBaseSfgdEnabled = _SleBridgeFGBaseSfgdEnabled_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 1, 1, 3),
    _SleBridgeFGBaseSfgdEnabled_Type()
)
sleBridgeFGBaseSfgdEnabled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeFGBaseSfgdEnabled.setStatus("current")
_SleBridgeFGBaseControl_ObjectIdentity = ObjectIdentity
sleBridgeFGBaseControl = _SleBridgeFGBaseControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 1, 2)
)


class _SleBridgeFGBaseControlRequest_Type(Integer32):
    """Custom type sleBridgeFGBaseControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("setCfgdEnable", 1),
          ("setSfgdEnable", 2))
    )


_SleBridgeFGBaseControlRequest_Type.__name__ = "Integer32"
_SleBridgeFGBaseControlRequest_Object = MibScalar
sleBridgeFGBaseControlRequest = _SleBridgeFGBaseControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 1, 2, 1),
    _SleBridgeFGBaseControlRequest_Type()
)
sleBridgeFGBaseControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeFGBaseControlRequest.setStatus("current")
_SleBridgeFGBaseControlStatus_Type = SleControlStatusType
_SleBridgeFGBaseControlStatus_Object = MibScalar
sleBridgeFGBaseControlStatus = _SleBridgeFGBaseControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 1, 2, 2),
    _SleBridgeFGBaseControlStatus_Type()
)
sleBridgeFGBaseControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeFGBaseControlStatus.setStatus("current")
_SleBridgeFGBaseControlTimer_Type = Gauge32
_SleBridgeFGBaseControlTimer_Object = MibScalar
sleBridgeFGBaseControlTimer = _SleBridgeFGBaseControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 1, 2, 3),
    _SleBridgeFGBaseControlTimer_Type()
)
sleBridgeFGBaseControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeFGBaseControlTimer.setStatus("current")
_SleBridgeFGBaseControlTimeStamp_Type = TimeTicks
_SleBridgeFGBaseControlTimeStamp_Object = MibScalar
sleBridgeFGBaseControlTimeStamp = _SleBridgeFGBaseControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 1, 2, 4),
    _SleBridgeFGBaseControlTimeStamp_Type()
)
sleBridgeFGBaseControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeFGBaseControlTimeStamp.setStatus("current")
_SleBridgeFGBaseControlReqResult_Type = SleControlRequestResultType
_SleBridgeFGBaseControlReqResult_Object = MibScalar
sleBridgeFGBaseControlReqResult = _SleBridgeFGBaseControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 1, 2, 5),
    _SleBridgeFGBaseControlReqResult_Type()
)
sleBridgeFGBaseControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeFGBaseControlReqResult.setStatus("current")


class _SleBridgeFGBaseControlCfgdEnable_Type(Integer32):
    """Custom type sleBridgeFGBaseControlCfgdEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgeFGBaseControlCfgdEnable_Type.__name__ = "Integer32"
_SleBridgeFGBaseControlCfgdEnable_Object = MibScalar
sleBridgeFGBaseControlCfgdEnable = _SleBridgeFGBaseControlCfgdEnable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 1, 2, 6),
    _SleBridgeFGBaseControlCfgdEnable_Type()
)
sleBridgeFGBaseControlCfgdEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeFGBaseControlCfgdEnable.setStatus("current")


class _SleBridgeFGBaseControlSfgdEnable_Type(Integer32):
    """Custom type sleBridgeFGBaseControlSfgdEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgeFGBaseControlSfgdEnable_Type.__name__ = "Integer32"
_SleBridgeFGBaseControlSfgdEnable_Object = MibScalar
sleBridgeFGBaseControlSfgdEnable = _SleBridgeFGBaseControlSfgdEnable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 1, 2, 7),
    _SleBridgeFGBaseControlSfgdEnable_Type()
)
sleBridgeFGBaseControlSfgdEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeFGBaseControlSfgdEnable.setStatus("current")
_SleBridgeFGBaseNotification_ObjectIdentity = ObjectIdentity
sleBridgeFGBaseNotification = _SleBridgeFGBaseNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 1, 3)
)
_SleBridgeFGPort_ObjectIdentity = ObjectIdentity
sleBridgeFGPort = _SleBridgeFGPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 2)
)
_SleBridgeFGPortTable_Object = MibTable
sleBridgeFGPortTable = _SleBridgeFGPortTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 2, 1)
)
if mibBuilder.loadTexts:
    sleBridgeFGPortTable.setStatus("current")
_SleBridgeFGPortEntry_Object = MibTableRow
sleBridgeFGPortEntry = _SleBridgeFGPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 2, 1, 1)
)
sleBridgeFGPortEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleBridgePortIndex"),
    (0, "SLE-BRIDGE-MIB", "sleBridgeFGPortType"),
)
if mibBuilder.loadTexts:
    sleBridgeFGPortEntry.setStatus("current")


class _SleBridgeFGPortType_Type(Integer32):
    """Custom type sleBridgeFGPortType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("systemFloodGuard", 1),
          ("cpuFloodGuard", 2),
          ("macFloodGuard", 3))
    )


_SleBridgeFGPortType_Type.__name__ = "Integer32"
_SleBridgeFGPortType_Object = MibTableColumn
sleBridgeFGPortType = _SleBridgeFGPortType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 2, 1, 1, 1),
    _SleBridgeFGPortType_Type()
)
sleBridgeFGPortType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeFGPortType.setStatus("current")


class _SleBridgeFGPortFrameType_Type(Integer32):
    """Custom type sleBridgeFGPortFrameType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("multicast", 1),
          ("broadcast", 2),
          ("both", 3),
          ("arp", 4),
          ("dhcp", 5),
          ("dlf", 6),
          ("all", 7))
    )


_SleBridgeFGPortFrameType_Type.__name__ = "Integer32"
_SleBridgeFGPortFrameType_Object = MibTableColumn
sleBridgeFGPortFrameType = _SleBridgeFGPortFrameType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 2, 1, 1, 2),
    _SleBridgeFGPortFrameType_Type()
)
sleBridgeFGPortFrameType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeFGPortFrameType.setStatus("current")


class _SleBridgeFGPortFrame_Type(Integer32):
    """Custom type sleBridgeFGPortFrame based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, -1),
        ValueRangeConstraint(1, 2147483647),
    )


_SleBridgeFGPortFrame_Type.__name__ = "Integer32"
_SleBridgeFGPortFrame_Object = MibTableColumn
sleBridgeFGPortFrame = _SleBridgeFGPortFrame_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 2, 1, 1, 3),
    _SleBridgeFGPortFrame_Type()
)
sleBridgeFGPortFrame.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeFGPortFrame.setStatus("current")


class _SleBridgeFGPortBlocked_Type(Integer32):
    """Custom type sleBridgeFGPortBlocked based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("block", 1),
          ("unblock", 2))
    )


_SleBridgeFGPortBlocked_Type.__name__ = "Integer32"
_SleBridgeFGPortBlocked_Object = MibTableColumn
sleBridgeFGPortBlocked = _SleBridgeFGPortBlocked_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 2, 1, 1, 4),
    _SleBridgeFGPortBlocked_Type()
)
sleBridgeFGPortBlocked.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeFGPortBlocked.setStatus("current")


class _SleBridgeFGPortTimer_Type(Integer32):
    """Custom type sleBridgeFGPortTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, -1),
        ValueRangeConstraint(10, 3600),
    )


_SleBridgeFGPortTimer_Type.__name__ = "Integer32"
_SleBridgeFGPortTimer_Object = MibTableColumn
sleBridgeFGPortTimer = _SleBridgeFGPortTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 2, 1, 1, 5),
    _SleBridgeFGPortTimer_Type()
)
sleBridgeFGPortTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeFGPortTimer.setStatus("current")
_SleBridgeFGPortControl_ObjectIdentity = ObjectIdentity
sleBridgeFGPortControl = _SleBridgeFGPortControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 2, 2)
)


class _SleBridgeFGPortControlRequest_Type(Integer32):
    """Custom type sleBridgeFGPortControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("setFgPortProfile", 1),
          ("setFgPortUnblock", 2))
    )


_SleBridgeFGPortControlRequest_Type.__name__ = "Integer32"
_SleBridgeFGPortControlRequest_Object = MibScalar
sleBridgeFGPortControlRequest = _SleBridgeFGPortControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 2, 2, 1),
    _SleBridgeFGPortControlRequest_Type()
)
sleBridgeFGPortControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeFGPortControlRequest.setStatus("current")
_SleBridgeFGPortControlStatus_Type = SleControlStatusType
_SleBridgeFGPortControlStatus_Object = MibScalar
sleBridgeFGPortControlStatus = _SleBridgeFGPortControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 2, 2, 2),
    _SleBridgeFGPortControlStatus_Type()
)
sleBridgeFGPortControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeFGPortControlStatus.setStatus("current")
_SleBridgeFGPortControlTimer_Type = Gauge32
_SleBridgeFGPortControlTimer_Object = MibScalar
sleBridgeFGPortControlTimer = _SleBridgeFGPortControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 2, 2, 3),
    _SleBridgeFGPortControlTimer_Type()
)
sleBridgeFGPortControlTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeFGPortControlTimer.setStatus("current")
_SleBridgeFGPortControlTimeStamp_Type = TimeTicks
_SleBridgeFGPortControlTimeStamp_Object = MibScalar
sleBridgeFGPortControlTimeStamp = _SleBridgeFGPortControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 2, 2, 4),
    _SleBridgeFGPortControlTimeStamp_Type()
)
sleBridgeFGPortControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeFGPortControlTimeStamp.setStatus("current")
_SleBridgeFGPortControlReqResult_Type = SleControlRequestResultType
_SleBridgeFGPortControlReqResult_Object = MibScalar
sleBridgeFGPortControlReqResult = _SleBridgeFGPortControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 2, 2, 5),
    _SleBridgeFGPortControlReqResult_Type()
)
sleBridgeFGPortControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeFGPortControlReqResult.setStatus("current")
_SleBridgeFGPortControlIndex_Type = Integer32
_SleBridgeFGPortControlIndex_Object = MibScalar
sleBridgeFGPortControlIndex = _SleBridgeFGPortControlIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 2, 2, 6),
    _SleBridgeFGPortControlIndex_Type()
)
sleBridgeFGPortControlIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeFGPortControlIndex.setStatus("current")


class _SleBridgeFGPortControlType_Type(Integer32):
    """Custom type sleBridgeFGPortControlType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("systemfloodguard", 1),
          ("cpufloodguard", 2),
          ("macfloodguard", 3))
    )


_SleBridgeFGPortControlType_Type.__name__ = "Integer32"
_SleBridgeFGPortControlType_Object = MibScalar
sleBridgeFGPortControlType = _SleBridgeFGPortControlType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 2, 2, 7),
    _SleBridgeFGPortControlType_Type()
)
sleBridgeFGPortControlType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeFGPortControlType.setStatus("current")


class _SleBridgeFGPortControlFrameType_Type(Integer32):
    """Custom type sleBridgeFGPortControlFrameType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("multicast", 1),
          ("broadcast", 2),
          ("both", 3),
          ("arp", 4),
          ("dhcp", 5),
          ("dlf", 6),
          ("all", 7))
    )


_SleBridgeFGPortControlFrameType_Type.__name__ = "Integer32"
_SleBridgeFGPortControlFrameType_Object = MibScalar
sleBridgeFGPortControlFrameType = _SleBridgeFGPortControlFrameType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 2, 2, 8),
    _SleBridgeFGPortControlFrameType_Type()
)
sleBridgeFGPortControlFrameType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeFGPortControlFrameType.setStatus("current")


class _SleBridgeFGPortControlFrame_Type(Integer32):
    """Custom type sleBridgeFGPortControlFrame based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, -1),
        ValueRangeConstraint(1, 2147483647),
    )


_SleBridgeFGPortControlFrame_Type.__name__ = "Integer32"
_SleBridgeFGPortControlFrame_Object = MibScalar
sleBridgeFGPortControlFrame = _SleBridgeFGPortControlFrame_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 2, 2, 9),
    _SleBridgeFGPortControlFrame_Type()
)
sleBridgeFGPortControlFrame.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeFGPortControlFrame.setStatus("current")


class _SleBridgeFGPortControlSetTimer_Type(Integer32):
    """Custom type sleBridgeFGPortControlSetTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, -1),
        ValueRangeConstraint(10, 3600),
    )


_SleBridgeFGPortControlSetTimer_Type.__name__ = "Integer32"
_SleBridgeFGPortControlSetTimer_Object = MibScalar
sleBridgeFGPortControlSetTimer = _SleBridgeFGPortControlSetTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 2, 2, 10),
    _SleBridgeFGPortControlSetTimer_Type()
)
sleBridgeFGPortControlSetTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeFGPortControlSetTimer.setStatus("current")


class _SleBridgeFGPortControlBlock_Type(Integer32):
    """Custom type sleBridgeFGPortControlBlock based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("block", 1),
          ("unblock", 2))
    )


_SleBridgeFGPortControlBlock_Type.__name__ = "Integer32"
_SleBridgeFGPortControlBlock_Object = MibScalar
sleBridgeFGPortControlBlock = _SleBridgeFGPortControlBlock_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 2, 2, 11),
    _SleBridgeFGPortControlBlock_Type()
)
sleBridgeFGPortControlBlock.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeFGPortControlBlock.setStatus("current")
_SleBridgeFGPortNotification_ObjectIdentity = ObjectIdentity
sleBridgeFGPortNotification = _SleBridgeFGPortNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 2, 3)
)
_SleBridgeVlanTranslation_ObjectIdentity = ObjectIdentity
sleBridgeVlanTranslation = _SleBridgeVlanTranslation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25)
)
_SleBridgeVTTable_Object = MibTable
sleBridgeVTTable = _SleBridgeVTTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 1)
)
if mibBuilder.loadTexts:
    sleBridgeVTTable.setStatus("current")
_SleBridgeVTEntry_Object = MibTableRow
sleBridgeVTEntry = _SleBridgeVTEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 1, 1)
)
sleBridgeVTEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleBridgeVTServiceId"),
    (0, "SLE-BRIDGE-MIB", "sleBridgeVTSubscriberId"),
)
if mibBuilder.loadTexts:
    sleBridgeVTEntry.setStatus("current")


class _SleBridgeVTServiceId_Type(Integer32):
    """Custom type sleBridgeVTServiceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleBridgeVTServiceId_Type.__name__ = "Integer32"
_SleBridgeVTServiceId_Object = MibTableColumn
sleBridgeVTServiceId = _SleBridgeVTServiceId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 1, 1, 1),
    _SleBridgeVTServiceId_Type()
)
sleBridgeVTServiceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeVTServiceId.setStatus("current")


class _SleBridgeVTSubscriberId_Type(Integer32):
    """Custom type sleBridgeVTSubscriberId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleBridgeVTSubscriberId_Type.__name__ = "Integer32"
_SleBridgeVTSubscriberId_Object = MibTableColumn
sleBridgeVTSubscriberId = _SleBridgeVTSubscriberId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 1, 1, 2),
    _SleBridgeVTSubscriberId_Type()
)
sleBridgeVTSubscriberId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeVTSubscriberId.setStatus("current")
_SleBridgeVTRuleTable_Object = MibTable
sleBridgeVTRuleTable = _SleBridgeVTRuleTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 2)
)
if mibBuilder.loadTexts:
    sleBridgeVTRuleTable.setStatus("current")
_SleBridgeVTRuleEntry_Object = MibTableRow
sleBridgeVTRuleEntry = _SleBridgeVTRuleEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 2, 1)
)
sleBridgeVTRuleEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleBridgeVTRuleMac"),
    (0, "SLE-BRIDGE-MIB", "sleBridgeVTRuleVid"),
)
if mibBuilder.loadTexts:
    sleBridgeVTRuleEntry.setStatus("current")
_SleBridgeVTRuleMac_Type = MacAddress
_SleBridgeVTRuleMac_Object = MibTableColumn
sleBridgeVTRuleMac = _SleBridgeVTRuleMac_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 2, 1, 1),
    _SleBridgeVTRuleMac_Type()
)
sleBridgeVTRuleMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeVTRuleMac.setStatus("current")


class _SleBridgeVTRuleVid_Type(Integer32):
    """Custom type sleBridgeVTRuleVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleBridgeVTRuleVid_Type.__name__ = "Integer32"
_SleBridgeVTRuleVid_Object = MibTableColumn
sleBridgeVTRuleVid = _SleBridgeVTRuleVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 2, 1, 2),
    _SleBridgeVTRuleVid_Type()
)
sleBridgeVTRuleVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeVTRuleVid.setStatus("current")


class _SleBridgeVTRuleRDirVid_Type(Integer32):
    """Custom type sleBridgeVTRuleRDirVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleBridgeVTRuleRDirVid_Type.__name__ = "Integer32"
_SleBridgeVTRuleRDirVid_Object = MibTableColumn
sleBridgeVTRuleRDirVid = _SleBridgeVTRuleRDirVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 2, 1, 3),
    _SleBridgeVTRuleRDirVid_Type()
)
sleBridgeVTRuleRDirVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeVTRuleRDirVid.setStatus("current")
_SleBridgeVTRuleRDirPort_Type = Integer32
_SleBridgeVTRuleRDirPort_Object = MibTableColumn
sleBridgeVTRuleRDirPort = _SleBridgeVTRuleRDirPort_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 2, 1, 4),
    _SleBridgeVTRuleRDirPort_Type()
)
sleBridgeVTRuleRDirPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeVTRuleRDirPort.setStatus("current")


class _SleBridgeVTRuleStatus_Type(Integer32):
    """Custom type sleBridgeVTRuleStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("static", 1),
          ("dynamic", 2))
    )


_SleBridgeVTRuleStatus_Type.__name__ = "Integer32"
_SleBridgeVTRuleStatus_Object = MibTableColumn
sleBridgeVTRuleStatus = _SleBridgeVTRuleStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 2, 1, 5),
    _SleBridgeVTRuleStatus_Type()
)
sleBridgeVTRuleStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeVTRuleStatus.setStatus("current")
_SleBridgeVTControl_ObjectIdentity = ObjectIdentity
sleBridgeVTControl = _SleBridgeVTControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 3)
)


class _SleBridgeVTControlRequest_Type(Integer32):
    """Custom type sleBridgeVTControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("setVT", 1),
          ("clearVT", 2))
    )


_SleBridgeVTControlRequest_Type.__name__ = "Integer32"
_SleBridgeVTControlRequest_Object = MibScalar
sleBridgeVTControlRequest = _SleBridgeVTControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 3, 1),
    _SleBridgeVTControlRequest_Type()
)
sleBridgeVTControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeVTControlRequest.setStatus("current")
_SleBridgeVTControlStatus_Type = SleControlStatusType
_SleBridgeVTControlStatus_Object = MibScalar
sleBridgeVTControlStatus = _SleBridgeVTControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 3, 2),
    _SleBridgeVTControlStatus_Type()
)
sleBridgeVTControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeVTControlStatus.setStatus("current")
_SleBridgeVTControlTimer_Type = Gauge32
_SleBridgeVTControlTimer_Object = MibScalar
sleBridgeVTControlTimer = _SleBridgeVTControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 3, 3),
    _SleBridgeVTControlTimer_Type()
)
sleBridgeVTControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeVTControlTimer.setStatus("current")
_SleBridgeVTControlTimeStamp_Type = TimeTicks
_SleBridgeVTControlTimeStamp_Object = MibScalar
sleBridgeVTControlTimeStamp = _SleBridgeVTControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 3, 4),
    _SleBridgeVTControlTimeStamp_Type()
)
sleBridgeVTControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeVTControlTimeStamp.setStatus("current")
_SleBridgeVTControlReqResult_Type = SleControlRequestResultType
_SleBridgeVTControlReqResult_Object = MibScalar
sleBridgeVTControlReqResult = _SleBridgeVTControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 3, 5),
    _SleBridgeVTControlReqResult_Type()
)
sleBridgeVTControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeVTControlReqResult.setStatus("current")


class _SleBridgeVTControlServerId_Type(Integer32):
    """Custom type sleBridgeVTControlServerId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleBridgeVTControlServerId_Type.__name__ = "Integer32"
_SleBridgeVTControlServerId_Object = MibScalar
sleBridgeVTControlServerId = _SleBridgeVTControlServerId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 3, 6),
    _SleBridgeVTControlServerId_Type()
)
sleBridgeVTControlServerId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeVTControlServerId.setStatus("current")


class _SleBridgeVTControlClientId_Type(Integer32):
    """Custom type sleBridgeVTControlClientId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleBridgeVTControlClientId_Type.__name__ = "Integer32"
_SleBridgeVTControlClientId_Object = MibScalar
sleBridgeVTControlClientId = _SleBridgeVTControlClientId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 3, 7),
    _SleBridgeVTControlClientId_Type()
)
sleBridgeVTControlClientId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeVTControlClientId.setStatus("current")
_SleBridgeVTNotification_ObjectIdentity = ObjectIdentity
sleBridgeVTNotification = _SleBridgeVTNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 4)
)
_SleBridgeInBoundVTTable_Object = MibTable
sleBridgeInBoundVTTable = _SleBridgeInBoundVTTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 5)
)
if mibBuilder.loadTexts:
    sleBridgeInBoundVTTable.setStatus("current")
_SleBridgeInBoundVTEntry_Object = MibTableRow
sleBridgeInBoundVTEntry = _SleBridgeInBoundVTEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 5, 1)
)
sleBridgeInBoundVTEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleBridgeInBoundVTPortIndex"),
    (0, "SLE-BRIDGE-MIB", "sleBridgeInBoundVTVlanIndex"),
)
if mibBuilder.loadTexts:
    sleBridgeInBoundVTEntry.setStatus("current")


class _SleBridgeInBoundVTPortIndex_Type(Integer32):
    """Custom type sleBridgeInBoundVTPortIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 512),
    )


_SleBridgeInBoundVTPortIndex_Type.__name__ = "Integer32"
_SleBridgeInBoundVTPortIndex_Object = MibTableColumn
sleBridgeInBoundVTPortIndex = _SleBridgeInBoundVTPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 5, 1, 1),
    _SleBridgeInBoundVTPortIndex_Type()
)
sleBridgeInBoundVTPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInBoundVTPortIndex.setStatus("current")


class _SleBridgeInBoundVTVlanIndex_Type(Integer32):
    """Custom type sleBridgeInBoundVTVlanIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_SleBridgeInBoundVTVlanIndex_Type.__name__ = "Integer32"
_SleBridgeInBoundVTVlanIndex_Object = MibTableColumn
sleBridgeInBoundVTVlanIndex = _SleBridgeInBoundVTVlanIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 5, 1, 2),
    _SleBridgeInBoundVTVlanIndex_Type()
)
sleBridgeInBoundVTVlanIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInBoundVTVlanIndex.setStatus("current")
_SleBridgeInBoundVTNewVid_Type = Integer32
_SleBridgeInBoundVTNewVid_Object = MibTableColumn
sleBridgeInBoundVTNewVid = _SleBridgeInBoundVTNewVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 5, 1, 3),
    _SleBridgeInBoundVTNewVid_Type()
)
sleBridgeInBoundVTNewVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInBoundVTNewVid.setStatus("current")


class _SleBridgeInBoundVTOperStatus_Type(Integer32):
    """Custom type sleBridgeInBoundVTOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_SleBridgeInBoundVTOperStatus_Type.__name__ = "Integer32"
_SleBridgeInBoundVTOperStatus_Object = MibTableColumn
sleBridgeInBoundVTOperStatus = _SleBridgeInBoundVTOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 5, 1, 4),
    _SleBridgeInBoundVTOperStatus_Type()
)
sleBridgeInBoundVTOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInBoundVTOperStatus.setStatus("current")
_SleBridgeInBoundVTControl_ObjectIdentity = ObjectIdentity
sleBridgeInBoundVTControl = _SleBridgeInBoundVTControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 6)
)


class _SleBridgeInBoundVTControlRequest_Type(Integer32):
    """Custom type sleBridgeInBoundVTControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("setInBoundVT", 1),
          ("clearInBoundVT", 2))
    )


_SleBridgeInBoundVTControlRequest_Type.__name__ = "Integer32"
_SleBridgeInBoundVTControlRequest_Object = MibScalar
sleBridgeInBoundVTControlRequest = _SleBridgeInBoundVTControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 6, 1),
    _SleBridgeInBoundVTControlRequest_Type()
)
sleBridgeInBoundVTControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInBoundVTControlRequest.setStatus("current")
_SleBridgeInBoundVTControlStatus_Type = SleControlStatusType
_SleBridgeInBoundVTControlStatus_Object = MibScalar
sleBridgeInBoundVTControlStatus = _SleBridgeInBoundVTControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 6, 2),
    _SleBridgeInBoundVTControlStatus_Type()
)
sleBridgeInBoundVTControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInBoundVTControlStatus.setStatus("current")
_SleBridgeInBoundVTControlTimer_Type = Gauge32
_SleBridgeInBoundVTControlTimer_Object = MibScalar
sleBridgeInBoundVTControlTimer = _SleBridgeInBoundVTControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 6, 3),
    _SleBridgeInBoundVTControlTimer_Type()
)
sleBridgeInBoundVTControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInBoundVTControlTimer.setStatus("current")
_SleBridgeInBoundVTControlTimeStamp_Type = TimeTicks
_SleBridgeInBoundVTControlTimeStamp_Object = MibScalar
sleBridgeInBoundVTControlTimeStamp = _SleBridgeInBoundVTControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 6, 4),
    _SleBridgeInBoundVTControlTimeStamp_Type()
)
sleBridgeInBoundVTControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInBoundVTControlTimeStamp.setStatus("current")
_SleBridgeInBoundVTControlReqResult_Type = SleControlRequestResultType
_SleBridgeInBoundVTControlReqResult_Object = MibScalar
sleBridgeInBoundVTControlReqResult = _SleBridgeInBoundVTControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 6, 5),
    _SleBridgeInBoundVTControlReqResult_Type()
)
sleBridgeInBoundVTControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInBoundVTControlReqResult.setStatus("current")
_SleBridgeInBoundVTControlPortIndex_Type = Integer32
_SleBridgeInBoundVTControlPortIndex_Object = MibScalar
sleBridgeInBoundVTControlPortIndex = _SleBridgeInBoundVTControlPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 6, 6),
    _SleBridgeInBoundVTControlPortIndex_Type()
)
sleBridgeInBoundVTControlPortIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInBoundVTControlPortIndex.setStatus("current")
_SleBridgeInBoundVTControlVlanIndex_Type = Integer32
_SleBridgeInBoundVTControlVlanIndex_Object = MibScalar
sleBridgeInBoundVTControlVlanIndex = _SleBridgeInBoundVTControlVlanIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 6, 7),
    _SleBridgeInBoundVTControlVlanIndex_Type()
)
sleBridgeInBoundVTControlVlanIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInBoundVTControlVlanIndex.setStatus("current")
_SleBridgeInBoundVTControlNewVid_Type = Integer32
_SleBridgeInBoundVTControlNewVid_Object = MibScalar
sleBridgeInBoundVTControlNewVid = _SleBridgeInBoundVTControlNewVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 6, 8),
    _SleBridgeInBoundVTControlNewVid_Type()
)
sleBridgeInBoundVTControlNewVid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInBoundVTControlNewVid.setStatus("current")
_SleBridgeInBoundVTNotification_ObjectIdentity = ObjectIdentity
sleBridgeInBoundVTNotification = _SleBridgeInBoundVTNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 7)
)
_SleBridgeOutBoundVTTable_Object = MibTable
sleBridgeOutBoundVTTable = _SleBridgeOutBoundVTTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 8)
)
if mibBuilder.loadTexts:
    sleBridgeOutBoundVTTable.setStatus("current")
_SleBridgeOutBoundVTEntry_Object = MibTableRow
sleBridgeOutBoundVTEntry = _SleBridgeOutBoundVTEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 8, 1)
)
sleBridgeOutBoundVTEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleBridgeOutBoundVTPortIndex"),
    (0, "SLE-BRIDGE-MIB", "sleBridgeOutBoundVTVlanIndex"),
)
if mibBuilder.loadTexts:
    sleBridgeOutBoundVTEntry.setStatus("current")


class _SleBridgeOutBoundVTPortIndex_Type(Integer32):
    """Custom type sleBridgeOutBoundVTPortIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 512),
    )


_SleBridgeOutBoundVTPortIndex_Type.__name__ = "Integer32"
_SleBridgeOutBoundVTPortIndex_Object = MibTableColumn
sleBridgeOutBoundVTPortIndex = _SleBridgeOutBoundVTPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 8, 1, 1),
    _SleBridgeOutBoundVTPortIndex_Type()
)
sleBridgeOutBoundVTPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeOutBoundVTPortIndex.setStatus("current")


class _SleBridgeOutBoundVTVlanIndex_Type(Integer32):
    """Custom type sleBridgeOutBoundVTVlanIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_SleBridgeOutBoundVTVlanIndex_Type.__name__ = "Integer32"
_SleBridgeOutBoundVTVlanIndex_Object = MibTableColumn
sleBridgeOutBoundVTVlanIndex = _SleBridgeOutBoundVTVlanIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 8, 1, 2),
    _SleBridgeOutBoundVTVlanIndex_Type()
)
sleBridgeOutBoundVTVlanIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeOutBoundVTVlanIndex.setStatus("current")
_SleBridgeOutBoundVTNewVid_Type = Integer32
_SleBridgeOutBoundVTNewVid_Object = MibTableColumn
sleBridgeOutBoundVTNewVid = _SleBridgeOutBoundVTNewVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 8, 1, 3),
    _SleBridgeOutBoundVTNewVid_Type()
)
sleBridgeOutBoundVTNewVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeOutBoundVTNewVid.setStatus("current")


class _SleBridgeOutBoundVTOperStatus_Type(Integer32):
    """Custom type sleBridgeOutBoundVTOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_SleBridgeOutBoundVTOperStatus_Type.__name__ = "Integer32"
_SleBridgeOutBoundVTOperStatus_Object = MibTableColumn
sleBridgeOutBoundVTOperStatus = _SleBridgeOutBoundVTOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 8, 1, 4),
    _SleBridgeOutBoundVTOperStatus_Type()
)
sleBridgeOutBoundVTOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeOutBoundVTOperStatus.setStatus("current")
_SleBridgeOutBoundVTControl_ObjectIdentity = ObjectIdentity
sleBridgeOutBoundVTControl = _SleBridgeOutBoundVTControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 9)
)


class _SleBridgeOutBoundVTControlRequest_Type(Integer32):
    """Custom type sleBridgeOutBoundVTControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("setOutBoundVT", 1),
          ("clearOutBoundVT", 2))
    )


_SleBridgeOutBoundVTControlRequest_Type.__name__ = "Integer32"
_SleBridgeOutBoundVTControlRequest_Object = MibScalar
sleBridgeOutBoundVTControlRequest = _SleBridgeOutBoundVTControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 9, 1),
    _SleBridgeOutBoundVTControlRequest_Type()
)
sleBridgeOutBoundVTControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeOutBoundVTControlRequest.setStatus("current")
_SleBridgeOutBoundVTControlStatus_Type = SleControlStatusType
_SleBridgeOutBoundVTControlStatus_Object = MibScalar
sleBridgeOutBoundVTControlStatus = _SleBridgeOutBoundVTControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 9, 2),
    _SleBridgeOutBoundVTControlStatus_Type()
)
sleBridgeOutBoundVTControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeOutBoundVTControlStatus.setStatus("current")
_SleBridgeOutBoundVTControlTimer_Type = Gauge32
_SleBridgeOutBoundVTControlTimer_Object = MibScalar
sleBridgeOutBoundVTControlTimer = _SleBridgeOutBoundVTControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 9, 3),
    _SleBridgeOutBoundVTControlTimer_Type()
)
sleBridgeOutBoundVTControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeOutBoundVTControlTimer.setStatus("current")
_SleBridgeOutBoundVTControlTimeStamp_Type = TimeTicks
_SleBridgeOutBoundVTControlTimeStamp_Object = MibScalar
sleBridgeOutBoundVTControlTimeStamp = _SleBridgeOutBoundVTControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 9, 4),
    _SleBridgeOutBoundVTControlTimeStamp_Type()
)
sleBridgeOutBoundVTControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeOutBoundVTControlTimeStamp.setStatus("current")
_SleBridgeOutBoundVTControlReqResult_Type = SleControlRequestResultType
_SleBridgeOutBoundVTControlReqResult_Object = MibScalar
sleBridgeOutBoundVTControlReqResult = _SleBridgeOutBoundVTControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 9, 5),
    _SleBridgeOutBoundVTControlReqResult_Type()
)
sleBridgeOutBoundVTControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeOutBoundVTControlReqResult.setStatus("current")
_SleBridgeOutBoundVTControlPortIndex_Type = Integer32
_SleBridgeOutBoundVTControlPortIndex_Object = MibScalar
sleBridgeOutBoundVTControlPortIndex = _SleBridgeOutBoundVTControlPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 9, 6),
    _SleBridgeOutBoundVTControlPortIndex_Type()
)
sleBridgeOutBoundVTControlPortIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeOutBoundVTControlPortIndex.setStatus("current")
_SleBridgeOutBoundVTControlVlanIndex_Type = Integer32
_SleBridgeOutBoundVTControlVlanIndex_Object = MibScalar
sleBridgeOutBoundVTControlVlanIndex = _SleBridgeOutBoundVTControlVlanIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 9, 7),
    _SleBridgeOutBoundVTControlVlanIndex_Type()
)
sleBridgeOutBoundVTControlVlanIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeOutBoundVTControlVlanIndex.setStatus("current")
_SleBridgeOutBoundVTControlNewVid_Type = Integer32
_SleBridgeOutBoundVTControlNewVid_Object = MibScalar
sleBridgeOutBoundVTControlNewVid = _SleBridgeOutBoundVTControlNewVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 9, 8),
    _SleBridgeOutBoundVTControlNewVid_Type()
)
sleBridgeOutBoundVTControlNewVid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeOutBoundVTControlNewVid.setStatus("current")
_SleBridgeOutBoundVTNotification_ObjectIdentity = ObjectIdentity
sleBridgeOutBoundVTNotification = _SleBridgeOutBoundVTNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 10)
)
_SleBridgeGarp_ObjectIdentity = ObjectIdentity
sleBridgeGarp = _SleBridgeGarp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26)
)
_SleBridgeGarpBase_ObjectIdentity = ObjectIdentity
sleBridgeGarpBase = _SleBridgeGarpBase_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 1)
)
_SleBridgeGarpBaseInfo_ObjectIdentity = ObjectIdentity
sleBridgeGarpBaseInfo = _SleBridgeGarpBaseInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 1, 1)
)


class _SleBridgeGvrpStatus_Type(Integer32):
    """Custom type sleBridgeGvrpStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgeGvrpStatus_Type.__name__ = "Integer32"
_SleBridgeGvrpStatus_Object = MibScalar
sleBridgeGvrpStatus = _SleBridgeGvrpStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 1, 1, 1),
    _SleBridgeGvrpStatus_Type()
)
sleBridgeGvrpStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGvrpStatus.setStatus("current")


class _SleBridgeGmrpStatus_Type(Integer32):
    """Custom type sleBridgeGmrpStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgeGmrpStatus_Type.__name__ = "Integer32"
_SleBridgeGmrpStatus_Object = MibScalar
sleBridgeGmrpStatus = _SleBridgeGmrpStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 1, 1, 2),
    _SleBridgeGmrpStatus_Type()
)
sleBridgeGmrpStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGmrpStatus.setStatus("current")
_SleBridgeGarpTimerJoin_Type = Integer32
_SleBridgeGarpTimerJoin_Object = MibScalar
sleBridgeGarpTimerJoin = _SleBridgeGarpTimerJoin_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 1, 1, 3),
    _SleBridgeGarpTimerJoin_Type()
)
sleBridgeGarpTimerJoin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGarpTimerJoin.setStatus("current")
_SleBridgeGarpTimerLeave_Type = Integer32
_SleBridgeGarpTimerLeave_Object = MibScalar
sleBridgeGarpTimerLeave = _SleBridgeGarpTimerLeave_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 1, 1, 4),
    _SleBridgeGarpTimerLeave_Type()
)
sleBridgeGarpTimerLeave.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGarpTimerLeave.setStatus("current")
_SleBridgeGarpTimerLeaveAll_Type = Integer32
_SleBridgeGarpTimerLeaveAll_Object = MibScalar
sleBridgeGarpTimerLeaveAll = _SleBridgeGarpTimerLeaveAll_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 1, 1, 5),
    _SleBridgeGarpTimerLeaveAll_Type()
)
sleBridgeGarpTimerLeaveAll.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGarpTimerLeaveAll.setStatus("current")
_SleBridgeGarpBaseControl_ObjectIdentity = ObjectIdentity
sleBridgeGarpBaseControl = _SleBridgeGarpBaseControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 1, 2)
)


class _SleBridgeGarpBaseControlRequest_Type(Integer32):
    """Custom type sleBridgeGarpBaseControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("setGarpStatus", 1),
          ("setGarpTimer", 2))
    )


_SleBridgeGarpBaseControlRequest_Type.__name__ = "Integer32"
_SleBridgeGarpBaseControlRequest_Object = MibScalar
sleBridgeGarpBaseControlRequest = _SleBridgeGarpBaseControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 1, 2, 1),
    _SleBridgeGarpBaseControlRequest_Type()
)
sleBridgeGarpBaseControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeGarpBaseControlRequest.setStatus("current")
_SleBridgeGarpBaseControlStatus_Type = SleControlStatusType
_SleBridgeGarpBaseControlStatus_Object = MibScalar
sleBridgeGarpBaseControlStatus = _SleBridgeGarpBaseControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 1, 2, 2),
    _SleBridgeGarpBaseControlStatus_Type()
)
sleBridgeGarpBaseControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGarpBaseControlStatus.setStatus("current")
_SleBridgeGarpBaseControlTimer_Type = Gauge32
_SleBridgeGarpBaseControlTimer_Object = MibScalar
sleBridgeGarpBaseControlTimer = _SleBridgeGarpBaseControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 1, 2, 3),
    _SleBridgeGarpBaseControlTimer_Type()
)
sleBridgeGarpBaseControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeGarpBaseControlTimer.setStatus("current")
_SleBridgeGarpBaseControlTimeStamp_Type = TimeTicks
_SleBridgeGarpBaseControlTimeStamp_Object = MibScalar
sleBridgeGarpBaseControlTimeStamp = _SleBridgeGarpBaseControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 1, 2, 4),
    _SleBridgeGarpBaseControlTimeStamp_Type()
)
sleBridgeGarpBaseControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGarpBaseControlTimeStamp.setStatus("current")
_SleBridgeGarpBaseControlReqResult_Type = SleControlRequestResultType
_SleBridgeGarpBaseControlReqResult_Object = MibScalar
sleBridgeGarpBaseControlReqResult = _SleBridgeGarpBaseControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 1, 2, 5),
    _SleBridgeGarpBaseControlReqResult_Type()
)
sleBridgeGarpBaseControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGarpBaseControlReqResult.setStatus("current")


class _SleBridgeGarpBaseControlGvrpStatus_Type(Integer32):
    """Custom type sleBridgeGarpBaseControlGvrpStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgeGarpBaseControlGvrpStatus_Type.__name__ = "Integer32"
_SleBridgeGarpBaseControlGvrpStatus_Object = MibScalar
sleBridgeGarpBaseControlGvrpStatus = _SleBridgeGarpBaseControlGvrpStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 1, 2, 6),
    _SleBridgeGarpBaseControlGvrpStatus_Type()
)
sleBridgeGarpBaseControlGvrpStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeGarpBaseControlGvrpStatus.setStatus("current")


class _SleBridgeGarpBaseControlGmrpStatus_Type(Integer32):
    """Custom type sleBridgeGarpBaseControlGmrpStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgeGarpBaseControlGmrpStatus_Type.__name__ = "Integer32"
_SleBridgeGarpBaseControlGmrpStatus_Object = MibScalar
sleBridgeGarpBaseControlGmrpStatus = _SleBridgeGarpBaseControlGmrpStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 1, 2, 7),
    _SleBridgeGarpBaseControlGmrpStatus_Type()
)
sleBridgeGarpBaseControlGmrpStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeGarpBaseControlGmrpStatus.setStatus("current")
_SleBridgeGarpBaseControlTimerJoin_Type = Integer32
_SleBridgeGarpBaseControlTimerJoin_Object = MibScalar
sleBridgeGarpBaseControlTimerJoin = _SleBridgeGarpBaseControlTimerJoin_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 1, 2, 8),
    _SleBridgeGarpBaseControlTimerJoin_Type()
)
sleBridgeGarpBaseControlTimerJoin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeGarpBaseControlTimerJoin.setStatus("current")
_SleBridgeGarpBaseControlTimerLeave_Type = Integer32
_SleBridgeGarpBaseControlTimerLeave_Object = MibScalar
sleBridgeGarpBaseControlTimerLeave = _SleBridgeGarpBaseControlTimerLeave_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 1, 2, 9),
    _SleBridgeGarpBaseControlTimerLeave_Type()
)
sleBridgeGarpBaseControlTimerLeave.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeGarpBaseControlTimerLeave.setStatus("current")
_SleBridgeGarpBaseControlTimerLeaveAll_Type = Integer32
_SleBridgeGarpBaseControlTimerLeaveAll_Object = MibScalar
sleBridgeGarpBaseControlTimerLeaveAll = _SleBridgeGarpBaseControlTimerLeaveAll_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 1, 2, 10),
    _SleBridgeGarpBaseControlTimerLeaveAll_Type()
)
sleBridgeGarpBaseControlTimerLeaveAll.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeGarpBaseControlTimerLeaveAll.setStatus("current")
_SleBridgeGarpBaseNotification_ObjectIdentity = ObjectIdentity
sleBridgeGarpBaseNotification = _SleBridgeGarpBaseNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 1, 3)
)
_SleBridgeGarpApplication_ObjectIdentity = ObjectIdentity
sleBridgeGarpApplication = _SleBridgeGarpApplication_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 2)
)
_SleBridgeGarpAppPortTable_Object = MibTable
sleBridgeGarpAppPortTable = _SleBridgeGarpAppPortTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 2, 1)
)
if mibBuilder.loadTexts:
    sleBridgeGarpAppPortTable.setStatus("current")
_SleBridgeGarpAppPortEntry_Object = MibTableRow
sleBridgeGarpAppPortEntry = _SleBridgeGarpAppPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 2, 1, 1)
)
sleBridgeGarpAppPortEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleBridgeGarpAppPortIndex"),
    (0, "SLE-BRIDGE-MIB", "sleBridgeGarpAppPortType"),
)
if mibBuilder.loadTexts:
    sleBridgeGarpAppPortEntry.setStatus("current")


class _SleBridgeGarpAppPortIndex_Type(Integer32):
    """Custom type sleBridgeGarpAppPortIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleBridgeGarpAppPortIndex_Type.__name__ = "Integer32"
_SleBridgeGarpAppPortIndex_Object = MibTableColumn
sleBridgeGarpAppPortIndex = _SleBridgeGarpAppPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 2, 1, 1, 1),
    _SleBridgeGarpAppPortIndex_Type()
)
sleBridgeGarpAppPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGarpAppPortIndex.setStatus("current")


class _SleBridgeGarpAppPortType_Type(Integer32):
    """Custom type sleBridgeGarpAppPortType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("gvrp", 1),
          ("gmrp", 2))
    )


_SleBridgeGarpAppPortType_Type.__name__ = "Integer32"
_SleBridgeGarpAppPortType_Object = MibTableColumn
sleBridgeGarpAppPortType = _SleBridgeGarpAppPortType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 2, 1, 1, 2),
    _SleBridgeGarpAppPortType_Type()
)
sleBridgeGarpAppPortType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGarpAppPortType.setStatus("current")


class _SleBridgeGarpAppPortStatus_Type(Integer32):
    """Custom type sleBridgeGarpAppPortStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgeGarpAppPortStatus_Type.__name__ = "Integer32"
_SleBridgeGarpAppPortStatus_Object = MibTableColumn
sleBridgeGarpAppPortStatus = _SleBridgeGarpAppPortStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 2, 1, 1, 3),
    _SleBridgeGarpAppPortStatus_Type()
)
sleBridgeGarpAppPortStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGarpAppPortStatus.setStatus("current")
_SleBridgeGarpAppPortFailedRegistrations_Type = Integer32
_SleBridgeGarpAppPortFailedRegistrations_Object = MibTableColumn
sleBridgeGarpAppPortFailedRegistrations = _SleBridgeGarpAppPortFailedRegistrations_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 2, 1, 1, 4),
    _SleBridgeGarpAppPortFailedRegistrations_Type()
)
sleBridgeGarpAppPortFailedRegistrations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGarpAppPortFailedRegistrations.setStatus("current")


class _SleBridgeGarpAppPortLastPduOrigin_Type(OctetString):
    """Custom type sleBridgeGarpAppPortLastPduOrigin based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 6),
    )


_SleBridgeGarpAppPortLastPduOrigin_Type.__name__ = "OctetString"
_SleBridgeGarpAppPortLastPduOrigin_Object = MibTableColumn
sleBridgeGarpAppPortLastPduOrigin = _SleBridgeGarpAppPortLastPduOrigin_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 2, 1, 1, 5),
    _SleBridgeGarpAppPortLastPduOrigin_Type()
)
sleBridgeGarpAppPortLastPduOrigin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGarpAppPortLastPduOrigin.setStatus("current")


class _SleBridgeGarpAppPortRegistration_Type(Integer32):
    """Custom type sleBridgeGarpAppPortRegistration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("nomal", 1),
          ("fixed", 2),
          ("forbidden", 3))
    )


_SleBridgeGarpAppPortRegistration_Type.__name__ = "Integer32"
_SleBridgeGarpAppPortRegistration_Object = MibTableColumn
sleBridgeGarpAppPortRegistration = _SleBridgeGarpAppPortRegistration_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 2, 1, 1, 6),
    _SleBridgeGarpAppPortRegistration_Type()
)
sleBridgeGarpAppPortRegistration.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGarpAppPortRegistration.setStatus("current")


class _SleBridgeGarpAppPortApplicant_Type(Integer32):
    """Custom type sleBridgeGarpAppPortApplicant based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("participant", 1),
          ("nonParticipant", 2))
    )


_SleBridgeGarpAppPortApplicant_Type.__name__ = "Integer32"
_SleBridgeGarpAppPortApplicant_Object = MibTableColumn
sleBridgeGarpAppPortApplicant = _SleBridgeGarpAppPortApplicant_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 2, 1, 1, 7),
    _SleBridgeGarpAppPortApplicant_Type()
)
sleBridgeGarpAppPortApplicant.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGarpAppPortApplicant.setStatus("current")


class _SleBridgeGarpAppPortFwdAll_Type(Integer32):
    """Custom type sleBridgeGarpAppPortFwdAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgeGarpAppPortFwdAll_Type.__name__ = "Integer32"
_SleBridgeGarpAppPortFwdAll_Object = MibTableColumn
sleBridgeGarpAppPortFwdAll = _SleBridgeGarpAppPortFwdAll_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 2, 1, 1, 8),
    _SleBridgeGarpAppPortFwdAll_Type()
)
sleBridgeGarpAppPortFwdAll.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGarpAppPortFwdAll.setStatus("current")
_SleBridgeGarpAppPortTimerJoin_Type = Integer32
_SleBridgeGarpAppPortTimerJoin_Object = MibTableColumn
sleBridgeGarpAppPortTimerJoin = _SleBridgeGarpAppPortTimerJoin_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 2, 1, 1, 9),
    _SleBridgeGarpAppPortTimerJoin_Type()
)
sleBridgeGarpAppPortTimerJoin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGarpAppPortTimerJoin.setStatus("current")
_SleBridgeGarpAppPortTimerLeave_Type = Integer32
_SleBridgeGarpAppPortTimerLeave_Object = MibTableColumn
sleBridgeGarpAppPortTimerLeave = _SleBridgeGarpAppPortTimerLeave_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 2, 1, 1, 10),
    _SleBridgeGarpAppPortTimerLeave_Type()
)
sleBridgeGarpAppPortTimerLeave.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGarpAppPortTimerLeave.setStatus("current")
_SleBridgeGarpAppPortTimerLeaveAll_Type = Integer32
_SleBridgeGarpAppPortTimerLeaveAll_Object = MibTableColumn
sleBridgeGarpAppPortTimerLeaveAll = _SleBridgeGarpAppPortTimerLeaveAll_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 2, 1, 1, 11),
    _SleBridgeGarpAppPortTimerLeaveAll_Type()
)
sleBridgeGarpAppPortTimerLeaveAll.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGarpAppPortTimerLeaveAll.setStatus("current")
_SleBridgeGarpAppPortControl_ObjectIdentity = ObjectIdentity
sleBridgeGarpAppPortControl = _SleBridgeGarpAppPortControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 2, 2)
)


class _SleBridgeGarpAppPortControlRequest_Type(Integer32):
    """Custom type sleBridgeGarpAppPortControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("setGarpAppStatus", 1),
          ("setGarpAppProfile", 2))
    )


_SleBridgeGarpAppPortControlRequest_Type.__name__ = "Integer32"
_SleBridgeGarpAppPortControlRequest_Object = MibScalar
sleBridgeGarpAppPortControlRequest = _SleBridgeGarpAppPortControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 2, 2, 1),
    _SleBridgeGarpAppPortControlRequest_Type()
)
sleBridgeGarpAppPortControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeGarpAppPortControlRequest.setStatus("current")
_SleBridgeGarpAppPortControlStatus_Type = SleControlStatusType
_SleBridgeGarpAppPortControlStatus_Object = MibScalar
sleBridgeGarpAppPortControlStatus = _SleBridgeGarpAppPortControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 2, 2, 2),
    _SleBridgeGarpAppPortControlStatus_Type()
)
sleBridgeGarpAppPortControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGarpAppPortControlStatus.setStatus("current")
_SleBridgeGarpAppPortControlTimer_Type = Gauge32
_SleBridgeGarpAppPortControlTimer_Object = MibScalar
sleBridgeGarpAppPortControlTimer = _SleBridgeGarpAppPortControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 2, 2, 3),
    _SleBridgeGarpAppPortControlTimer_Type()
)
sleBridgeGarpAppPortControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeGarpAppPortControlTimer.setStatus("current")
_SleBridgeGarpAppPortControlTimeStamp_Type = TimeTicks
_SleBridgeGarpAppPortControlTimeStamp_Object = MibScalar
sleBridgeGarpAppPortControlTimeStamp = _SleBridgeGarpAppPortControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 2, 2, 4),
    _SleBridgeGarpAppPortControlTimeStamp_Type()
)
sleBridgeGarpAppPortControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGarpAppPortControlTimeStamp.setStatus("current")
_SleBridgeGarpAppPortControlReqResult_Type = SleControlRequestResultType
_SleBridgeGarpAppPortControlReqResult_Object = MibScalar
sleBridgeGarpAppPortControlReqResult = _SleBridgeGarpAppPortControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 2, 2, 5),
    _SleBridgeGarpAppPortControlReqResult_Type()
)
sleBridgeGarpAppPortControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGarpAppPortControlReqResult.setStatus("current")


class _SleBridgeGarpAppPortControlIndex_Type(Integer32):
    """Custom type sleBridgeGarpAppPortControlIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleBridgeGarpAppPortControlIndex_Type.__name__ = "Integer32"
_SleBridgeGarpAppPortControlIndex_Object = MibScalar
sleBridgeGarpAppPortControlIndex = _SleBridgeGarpAppPortControlIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 2, 2, 6),
    _SleBridgeGarpAppPortControlIndex_Type()
)
sleBridgeGarpAppPortControlIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeGarpAppPortControlIndex.setStatus("current")


class _SleBridgeGarpAppPortControlType_Type(Integer32):
    """Custom type sleBridgeGarpAppPortControlType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("gvrp", 1),
          ("gmrp", 2))
    )


_SleBridgeGarpAppPortControlType_Type.__name__ = "Integer32"
_SleBridgeGarpAppPortControlType_Object = MibScalar
sleBridgeGarpAppPortControlType = _SleBridgeGarpAppPortControlType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 2, 2, 7),
    _SleBridgeGarpAppPortControlType_Type()
)
sleBridgeGarpAppPortControlType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeGarpAppPortControlType.setStatus("current")


class _SleBridgeGarpAppPortControlPortStatus_Type(Integer32):
    """Custom type sleBridgeGarpAppPortControlPortStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgeGarpAppPortControlPortStatus_Type.__name__ = "Integer32"
_SleBridgeGarpAppPortControlPortStatus_Object = MibScalar
sleBridgeGarpAppPortControlPortStatus = _SleBridgeGarpAppPortControlPortStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 2, 2, 8),
    _SleBridgeGarpAppPortControlPortStatus_Type()
)
sleBridgeGarpAppPortControlPortStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeGarpAppPortControlPortStatus.setStatus("current")


class _SleBridgeGarpAppPortControlRegistration_Type(Integer32):
    """Custom type sleBridgeGarpAppPortControlRegistration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("nomal", 1),
          ("fixed", 2),
          ("forbidden", 3))
    )


_SleBridgeGarpAppPortControlRegistration_Type.__name__ = "Integer32"
_SleBridgeGarpAppPortControlRegistration_Object = MibScalar
sleBridgeGarpAppPortControlRegistration = _SleBridgeGarpAppPortControlRegistration_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 2, 2, 9),
    _SleBridgeGarpAppPortControlRegistration_Type()
)
sleBridgeGarpAppPortControlRegistration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeGarpAppPortControlRegistration.setStatus("current")


class _SleBridgeGarpAppPortControlApplicant_Type(Integer32):
    """Custom type sleBridgeGarpAppPortControlApplicant based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("participant", 1),
          ("nonPorticipant", 2))
    )


_SleBridgeGarpAppPortControlApplicant_Type.__name__ = "Integer32"
_SleBridgeGarpAppPortControlApplicant_Object = MibScalar
sleBridgeGarpAppPortControlApplicant = _SleBridgeGarpAppPortControlApplicant_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 2, 2, 10),
    _SleBridgeGarpAppPortControlApplicant_Type()
)
sleBridgeGarpAppPortControlApplicant.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeGarpAppPortControlApplicant.setStatus("current")


class _SleBridgeGarpAppPortControlFwdAll_Type(Integer32):
    """Custom type sleBridgeGarpAppPortControlFwdAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SleBridgeGarpAppPortControlFwdAll_Type.__name__ = "Integer32"
_SleBridgeGarpAppPortControlFwdAll_Object = MibScalar
sleBridgeGarpAppPortControlFwdAll = _SleBridgeGarpAppPortControlFwdAll_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 2, 2, 11),
    _SleBridgeGarpAppPortControlFwdAll_Type()
)
sleBridgeGarpAppPortControlFwdAll.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeGarpAppPortControlFwdAll.setStatus("current")
_SleBridgeGarpAppPortControlTimerJoin_Type = Integer32
_SleBridgeGarpAppPortControlTimerJoin_Object = MibScalar
sleBridgeGarpAppPortControlTimerJoin = _SleBridgeGarpAppPortControlTimerJoin_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 2, 2, 12),
    _SleBridgeGarpAppPortControlTimerJoin_Type()
)
sleBridgeGarpAppPortControlTimerJoin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeGarpAppPortControlTimerJoin.setStatus("current")
_SleBridgeGarpAppPortControlTimerLeave_Type = Integer32
_SleBridgeGarpAppPortControlTimerLeave_Object = MibScalar
sleBridgeGarpAppPortControlTimerLeave = _SleBridgeGarpAppPortControlTimerLeave_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 2, 2, 13),
    _SleBridgeGarpAppPortControlTimerLeave_Type()
)
sleBridgeGarpAppPortControlTimerLeave.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeGarpAppPortControlTimerLeave.setStatus("current")
_SleBridgeGarpAppPortControlTimerLeaveAll_Type = Integer32
_SleBridgeGarpAppPortControlTimerLeaveAll_Object = MibScalar
sleBridgeGarpAppPortControlTimerLeaveAll = _SleBridgeGarpAppPortControlTimerLeaveAll_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 2, 2, 14),
    _SleBridgeGarpAppPortControlTimerLeaveAll_Type()
)
sleBridgeGarpAppPortControlTimerLeaveAll.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeGarpAppPortControlTimerLeaveAll.setStatus("current")
_SleBridgeGarpAppPortNotification_ObjectIdentity = ObjectIdentity
sleBridgeGarpAppPortNotification = _SleBridgeGarpAppPortNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 2, 3)
)
_SleBridgeGarpStats_ObjectIdentity = ObjectIdentity
sleBridgeGarpStats = _SleBridgeGarpStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 3)
)
_SleBridgeGarpStatsTable_Object = MibTable
sleBridgeGarpStatsTable = _SleBridgeGarpStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 3, 1)
)
if mibBuilder.loadTexts:
    sleBridgeGarpStatsTable.setStatus("current")
_SleBridgeGarpStatsEntry_Object = MibTableRow
sleBridgeGarpStatsEntry = _SleBridgeGarpStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 3, 1, 1)
)
sleBridgeGarpStatsEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleBridgeGarpAppPortIndex"),
    (0, "SLE-BRIDGE-MIB", "sleBridgeGarpAppPortType"),
)
if mibBuilder.loadTexts:
    sleBridgeGarpStatsEntry.setStatus("current")
_SleBridgeGarpStatsJoinEmptyReceived_Type = Integer32
_SleBridgeGarpStatsJoinEmptyReceived_Object = MibTableColumn
sleBridgeGarpStatsJoinEmptyReceived = _SleBridgeGarpStatsJoinEmptyReceived_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 3, 1, 1, 1),
    _SleBridgeGarpStatsJoinEmptyReceived_Type()
)
sleBridgeGarpStatsJoinEmptyReceived.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGarpStatsJoinEmptyReceived.setStatus("current")
_SleBridgeGarpStatsJoinInReceived_Type = Integer32
_SleBridgeGarpStatsJoinInReceived_Object = MibTableColumn
sleBridgeGarpStatsJoinInReceived = _SleBridgeGarpStatsJoinInReceived_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 3, 1, 1, 2),
    _SleBridgeGarpStatsJoinInReceived_Type()
)
sleBridgeGarpStatsJoinInReceived.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGarpStatsJoinInReceived.setStatus("current")
_SleBridgeGarpStatsEmptyReceived_Type = Integer32
_SleBridgeGarpStatsEmptyReceived_Object = MibTableColumn
sleBridgeGarpStatsEmptyReceived = _SleBridgeGarpStatsEmptyReceived_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 3, 1, 1, 3),
    _SleBridgeGarpStatsEmptyReceived_Type()
)
sleBridgeGarpStatsEmptyReceived.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGarpStatsEmptyReceived.setStatus("current")
_SleBridgeGarpStatsLeaveInReceived_Type = Integer32
_SleBridgeGarpStatsLeaveInReceived_Object = MibTableColumn
sleBridgeGarpStatsLeaveInReceived = _SleBridgeGarpStatsLeaveInReceived_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 3, 1, 1, 4),
    _SleBridgeGarpStatsLeaveInReceived_Type()
)
sleBridgeGarpStatsLeaveInReceived.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGarpStatsLeaveInReceived.setStatus("current")
_SleBridgeGarpStatsLeaveEmptyReceived_Type = Integer32
_SleBridgeGarpStatsLeaveEmptyReceived_Object = MibTableColumn
sleBridgeGarpStatsLeaveEmptyReceived = _SleBridgeGarpStatsLeaveEmptyReceived_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 3, 1, 1, 5),
    _SleBridgeGarpStatsLeaveEmptyReceived_Type()
)
sleBridgeGarpStatsLeaveEmptyReceived.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGarpStatsLeaveEmptyReceived.setStatus("current")
_SleBridgeGarpStatsLeaveAllReceived_Type = Integer32
_SleBridgeGarpStatsLeaveAllReceived_Object = MibTableColumn
sleBridgeGarpStatsLeaveAllReceived = _SleBridgeGarpStatsLeaveAllReceived_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 3, 1, 1, 6),
    _SleBridgeGarpStatsLeaveAllReceived_Type()
)
sleBridgeGarpStatsLeaveAllReceived.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGarpStatsLeaveAllReceived.setStatus("current")
_SleBridgeGarpStatsJoinEmptyTransmitted_Type = Integer32
_SleBridgeGarpStatsJoinEmptyTransmitted_Object = MibTableColumn
sleBridgeGarpStatsJoinEmptyTransmitted = _SleBridgeGarpStatsJoinEmptyTransmitted_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 3, 1, 1, 7),
    _SleBridgeGarpStatsJoinEmptyTransmitted_Type()
)
sleBridgeGarpStatsJoinEmptyTransmitted.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGarpStatsJoinEmptyTransmitted.setStatus("current")
_SleBridgeGarpStatsJoinInTransmitted_Type = Integer32
_SleBridgeGarpStatsJoinInTransmitted_Object = MibTableColumn
sleBridgeGarpStatsJoinInTransmitted = _SleBridgeGarpStatsJoinInTransmitted_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 3, 1, 1, 8),
    _SleBridgeGarpStatsJoinInTransmitted_Type()
)
sleBridgeGarpStatsJoinInTransmitted.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGarpStatsJoinInTransmitted.setStatus("current")
_SleBridgeGarpStatsEmptyTransmitted_Type = Integer32
_SleBridgeGarpStatsEmptyTransmitted_Object = MibTableColumn
sleBridgeGarpStatsEmptyTransmitted = _SleBridgeGarpStatsEmptyTransmitted_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 3, 1, 1, 9),
    _SleBridgeGarpStatsEmptyTransmitted_Type()
)
sleBridgeGarpStatsEmptyTransmitted.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGarpStatsEmptyTransmitted.setStatus("current")
_SleBridgeGarpStatsLeaveInTransmitted_Type = Integer32
_SleBridgeGarpStatsLeaveInTransmitted_Object = MibTableColumn
sleBridgeGarpStatsLeaveInTransmitted = _SleBridgeGarpStatsLeaveInTransmitted_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 3, 1, 1, 10),
    _SleBridgeGarpStatsLeaveInTransmitted_Type()
)
sleBridgeGarpStatsLeaveInTransmitted.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGarpStatsLeaveInTransmitted.setStatus("current")
_SleBridgeGarpStatsLeaveEmptyTransmitted_Type = Integer32
_SleBridgeGarpStatsLeaveEmptyTransmitted_Object = MibTableColumn
sleBridgeGarpStatsLeaveEmptyTransmitted = _SleBridgeGarpStatsLeaveEmptyTransmitted_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 3, 1, 1, 11),
    _SleBridgeGarpStatsLeaveEmptyTransmitted_Type()
)
sleBridgeGarpStatsLeaveEmptyTransmitted.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGarpStatsLeaveEmptyTransmitted.setStatus("current")
_SleBridgeGarpStatsLeaveAllTransmitted_Type = Integer32
_SleBridgeGarpStatsLeaveAllTransmitted_Object = MibTableColumn
sleBridgeGarpStatsLeaveAllTransmitted = _SleBridgeGarpStatsLeaveAllTransmitted_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 3, 1, 1, 12),
    _SleBridgeGarpStatsLeaveAllTransmitted_Type()
)
sleBridgeGarpStatsLeaveAllTransmitted.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGarpStatsLeaveAllTransmitted.setStatus("current")
_SleBridgeGarpStatsControl_ObjectIdentity = ObjectIdentity
sleBridgeGarpStatsControl = _SleBridgeGarpStatsControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 3, 2)
)


class _SleBridgeGarpStatsControlRequest_Type(Integer32):
    """Custom type sleBridgeGarpStatsControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("clearGarpPktStatistics", 1)
    )


_SleBridgeGarpStatsControlRequest_Type.__name__ = "Integer32"
_SleBridgeGarpStatsControlRequest_Object = MibScalar
sleBridgeGarpStatsControlRequest = _SleBridgeGarpStatsControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 3, 2, 1),
    _SleBridgeGarpStatsControlRequest_Type()
)
sleBridgeGarpStatsControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeGarpStatsControlRequest.setStatus("current")
_SleBridgeGarpStatstControlStatus_Type = SleControlStatusType
_SleBridgeGarpStatstControlStatus_Object = MibScalar
sleBridgeGarpStatstControlStatus = _SleBridgeGarpStatstControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 3, 2, 2),
    _SleBridgeGarpStatstControlStatus_Type()
)
sleBridgeGarpStatstControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGarpStatstControlStatus.setStatus("current")
_SleBridgeGarpStatsControlTimer_Type = Gauge32
_SleBridgeGarpStatsControlTimer_Object = MibScalar
sleBridgeGarpStatsControlTimer = _SleBridgeGarpStatsControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 3, 2, 3),
    _SleBridgeGarpStatsControlTimer_Type()
)
sleBridgeGarpStatsControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeGarpStatsControlTimer.setStatus("current")
_SleBridgeGarpStatsControlTimeStamp_Type = TimeTicks
_SleBridgeGarpStatsControlTimeStamp_Object = MibScalar
sleBridgeGarpStatsControlTimeStamp = _SleBridgeGarpStatsControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 3, 2, 4),
    _SleBridgeGarpStatsControlTimeStamp_Type()
)
sleBridgeGarpStatsControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGarpStatsControlTimeStamp.setStatus("current")
_SleBridgeGarpStatsControlReqResult_Type = SleControlRequestResultType
_SleBridgeGarpStatsControlReqResult_Object = MibScalar
sleBridgeGarpStatsControlReqResult = _SleBridgeGarpStatsControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 3, 2, 5),
    _SleBridgeGarpStatsControlReqResult_Type()
)
sleBridgeGarpStatsControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGarpStatsControlReqResult.setStatus("current")


class _SleBridgeGarpStatsControlIndex_Type(Integer32):
    """Custom type sleBridgeGarpStatsControlIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleBridgeGarpStatsControlIndex_Type.__name__ = "Integer32"
_SleBridgeGarpStatsControlIndex_Object = MibScalar
sleBridgeGarpStatsControlIndex = _SleBridgeGarpStatsControlIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 3, 2, 6),
    _SleBridgeGarpStatsControlIndex_Type()
)
sleBridgeGarpStatsControlIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeGarpStatsControlIndex.setStatus("current")


class _SleBridgeGarpStatsControlType_Type(Integer32):
    """Custom type sleBridgeGarpStatsControlType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("gvrp", 1),
          ("gmrp", 2))
    )


_SleBridgeGarpStatsControlType_Type.__name__ = "Integer32"
_SleBridgeGarpStatsControlType_Object = MibScalar
sleBridgeGarpStatsControlType = _SleBridgeGarpStatsControlType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 3, 2, 7),
    _SleBridgeGarpStatsControlType_Type()
)
sleBridgeGarpStatsControlType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeGarpStatsControlType.setStatus("current")
_SleBridgeGarpStatsNotification_ObjectIdentity = ObjectIdentity
sleBridgeGarpStatsNotification = _SleBridgeGarpStatsNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 3, 3)
)
_SleBridgeGmrpStatic_ObjectIdentity = ObjectIdentity
sleBridgeGmrpStatic = _SleBridgeGmrpStatic_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 4)
)
_SleBridgeGmrpStaticTable_Object = MibTable
sleBridgeGmrpStaticTable = _SleBridgeGmrpStaticTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 4, 1)
)
if mibBuilder.loadTexts:
    sleBridgeGmrpStaticTable.setStatus("current")
_SleBridgeGmrpStaticEntry_Object = MibTableRow
sleBridgeGmrpStaticEntry = _SleBridgeGmrpStaticEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 4, 1, 1)
)
sleBridgeGmrpStaticEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleBridgeGmrpStaticVid"),
    (0, "SLE-BRIDGE-MIB", "sleBridgeGmrpStaticPort"),
    (0, "SLE-BRIDGE-MIB", "sleBridgeGmrpStaticGmac"),
)
if mibBuilder.loadTexts:
    sleBridgeGmrpStaticEntry.setStatus("current")


class _SleBridgeGmrpStaticVid_Type(Integer32):
    """Custom type sleBridgeGmrpStaticVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleBridgeGmrpStaticVid_Type.__name__ = "Integer32"
_SleBridgeGmrpStaticVid_Object = MibTableColumn
sleBridgeGmrpStaticVid = _SleBridgeGmrpStaticVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 4, 1, 1, 1),
    _SleBridgeGmrpStaticVid_Type()
)
sleBridgeGmrpStaticVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGmrpStaticVid.setStatus("current")


class _SleBridgeGmrpStaticPort_Type(Integer32):
    """Custom type sleBridgeGmrpStaticPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleBridgeGmrpStaticPort_Type.__name__ = "Integer32"
_SleBridgeGmrpStaticPort_Object = MibTableColumn
sleBridgeGmrpStaticPort = _SleBridgeGmrpStaticPort_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 4, 1, 1, 2),
    _SleBridgeGmrpStaticPort_Type()
)
sleBridgeGmrpStaticPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGmrpStaticPort.setStatus("current")


class _SleBridgeGmrpStaticGmac_Type(OctetString):
    """Custom type sleBridgeGmrpStaticGmac based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 6),
    )


_SleBridgeGmrpStaticGmac_Type.__name__ = "OctetString"
_SleBridgeGmrpStaticGmac_Object = MibTableColumn
sleBridgeGmrpStaticGmac = _SleBridgeGmrpStaticGmac_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 4, 1, 1, 3),
    _SleBridgeGmrpStaticGmac_Type()
)
sleBridgeGmrpStaticGmac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGmrpStaticGmac.setStatus("current")
_SleBridgeGmrpStaticControl_ObjectIdentity = ObjectIdentity
sleBridgeGmrpStaticControl = _SleBridgeGmrpStaticControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 4, 2)
)


class _SleBridgeGmrpStaticControlRequest_Type(Integer32):
    """Custom type sleBridgeGmrpStaticControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("addGmrpStatic", 1),
          ("delGmrpStatic", 2))
    )


_SleBridgeGmrpStaticControlRequest_Type.__name__ = "Integer32"
_SleBridgeGmrpStaticControlRequest_Object = MibScalar
sleBridgeGmrpStaticControlRequest = _SleBridgeGmrpStaticControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 4, 2, 1),
    _SleBridgeGmrpStaticControlRequest_Type()
)
sleBridgeGmrpStaticControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeGmrpStaticControlRequest.setStatus("current")
_SleBridgeGmrpStaticControlStatus_Type = SleControlStatusType
_SleBridgeGmrpStaticControlStatus_Object = MibScalar
sleBridgeGmrpStaticControlStatus = _SleBridgeGmrpStaticControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 4, 2, 2),
    _SleBridgeGmrpStaticControlStatus_Type()
)
sleBridgeGmrpStaticControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGmrpStaticControlStatus.setStatus("current")
_SleBridgeGmrpStaticControlTimer_Type = Gauge32
_SleBridgeGmrpStaticControlTimer_Object = MibScalar
sleBridgeGmrpStaticControlTimer = _SleBridgeGmrpStaticControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 4, 2, 3),
    _SleBridgeGmrpStaticControlTimer_Type()
)
sleBridgeGmrpStaticControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeGmrpStaticControlTimer.setStatus("current")
_SleBridgeGmrpStaticControlTimeStamp_Type = TimeTicks
_SleBridgeGmrpStaticControlTimeStamp_Object = MibScalar
sleBridgeGmrpStaticControlTimeStamp = _SleBridgeGmrpStaticControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 4, 2, 4),
    _SleBridgeGmrpStaticControlTimeStamp_Type()
)
sleBridgeGmrpStaticControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGmrpStaticControlTimeStamp.setStatus("current")
_SleBridgeGmrpStaticControlReqResult_Type = SleControlRequestResultType
_SleBridgeGmrpStaticControlReqResult_Object = MibScalar
sleBridgeGmrpStaticControlReqResult = _SleBridgeGmrpStaticControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 4, 2, 5),
    _SleBridgeGmrpStaticControlReqResult_Type()
)
sleBridgeGmrpStaticControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeGmrpStaticControlReqResult.setStatus("current")


class _SleBridgeGmrpStaticControlVid_Type(Integer32):
    """Custom type sleBridgeGmrpStaticControlVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleBridgeGmrpStaticControlVid_Type.__name__ = "Integer32"
_SleBridgeGmrpStaticControlVid_Object = MibScalar
sleBridgeGmrpStaticControlVid = _SleBridgeGmrpStaticControlVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 4, 2, 6),
    _SleBridgeGmrpStaticControlVid_Type()
)
sleBridgeGmrpStaticControlVid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeGmrpStaticControlVid.setStatus("current")


class _SleBridgeGmrpStaticControlPort_Type(Integer32):
    """Custom type sleBridgeGmrpStaticControlPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleBridgeGmrpStaticControlPort_Type.__name__ = "Integer32"
_SleBridgeGmrpStaticControlPort_Object = MibScalar
sleBridgeGmrpStaticControlPort = _SleBridgeGmrpStaticControlPort_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 4, 2, 7),
    _SleBridgeGmrpStaticControlPort_Type()
)
sleBridgeGmrpStaticControlPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeGmrpStaticControlPort.setStatus("current")


class _SleBridgeGmrpStaticControlGmac_Type(OctetString):
    """Custom type sleBridgeGmrpStaticControlGmac based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 6),
    )


_SleBridgeGmrpStaticControlGmac_Type.__name__ = "OctetString"
_SleBridgeGmrpStaticControlGmac_Object = MibScalar
sleBridgeGmrpStaticControlGmac = _SleBridgeGmrpStaticControlGmac_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 4, 2, 8),
    _SleBridgeGmrpStaticControlGmac_Type()
)
sleBridgeGmrpStaticControlGmac.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeGmrpStaticControlGmac.setStatus("current")
_SleBridgeGmrpStaticNotification_ObjectIdentity = ObjectIdentity
sleBridgeGmrpStaticNotification = _SleBridgeGmrpStaticNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 4, 3)
)
_SleVlanTag_ObjectIdentity = ObjectIdentity
sleVlanTag = _SleVlanTag_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27)
)
_SleVlanInboundTag_ObjectIdentity = ObjectIdentity
sleVlanInboundTag = _SleVlanInboundTag_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 1)
)
_SleVlanInboundTagTable_Object = MibTable
sleVlanInboundTagTable = _SleVlanInboundTagTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 1, 1)
)
if mibBuilder.loadTexts:
    sleVlanInboundTagTable.setStatus("current")
_SleVlanInboundTagEntry_Object = MibTableRow
sleVlanInboundTagEntry = _SleVlanInboundTagEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 1, 1, 1)
)
sleVlanInboundTagEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleVlanInboundTagPortIndex"),
    (0, "SLE-BRIDGE-MIB", "sleVlanInboundTagVlanIndex"),
    (0, "SLE-BRIDGE-MIB", "sleVlanInboundTagVlanPriority"),
)
if mibBuilder.loadTexts:
    sleVlanInboundTagEntry.setStatus("current")


class _SleVlanInboundTagPortIndex_Type(Integer32):
    """Custom type sleVlanInboundTagPortIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleVlanInboundTagPortIndex_Type.__name__ = "Integer32"
_SleVlanInboundTagPortIndex_Object = MibTableColumn
sleVlanInboundTagPortIndex = _SleVlanInboundTagPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 1, 1, 1, 1),
    _SleVlanInboundTagPortIndex_Type()
)
sleVlanInboundTagPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanInboundTagPortIndex.setStatus("current")


class _SleVlanInboundTagVlanIndex_Type(Integer32):
    """Custom type sleVlanInboundTagVlanIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleVlanInboundTagVlanIndex_Type.__name__ = "Integer32"
_SleVlanInboundTagVlanIndex_Object = MibTableColumn
sleVlanInboundTagVlanIndex = _SleVlanInboundTagVlanIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 1, 1, 1, 2),
    _SleVlanInboundTagVlanIndex_Type()
)
sleVlanInboundTagVlanIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanInboundTagVlanIndex.setStatus("current")


class _SleVlanInboundTagOuterVid_Type(Integer32):
    """Custom type sleVlanInboundTagOuterVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleVlanInboundTagOuterVid_Type.__name__ = "Integer32"
_SleVlanInboundTagOuterVid_Object = MibTableColumn
sleVlanInboundTagOuterVid = _SleVlanInboundTagOuterVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 1, 1, 1, 3),
    _SleVlanInboundTagOuterVid_Type()
)
sleVlanInboundTagOuterVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanInboundTagOuterVid.setStatus("current")


class _SleVlanInboundTagOperStatus_Type(Integer32):
    """Custom type sleVlanInboundTagOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_SleVlanInboundTagOperStatus_Type.__name__ = "Integer32"
_SleVlanInboundTagOperStatus_Object = MibTableColumn
sleVlanInboundTagOperStatus = _SleVlanInboundTagOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 1, 1, 1, 4),
    _SleVlanInboundTagOperStatus_Type()
)
sleVlanInboundTagOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanInboundTagOperStatus.setStatus("current")


class _SleVlanInboundTagVlanPriority_Type(Integer32):
    """Custom type sleVlanInboundTagVlanPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("cos0", 0),
          ("cos1", 1),
          ("cos2", 2),
          ("cos3", 3),
          ("cos4", 4),
          ("cos5", 5),
          ("cos6", 6),
          ("cos7", 7),
          ("cosAny", 8))
    )


_SleVlanInboundTagVlanPriority_Type.__name__ = "Integer32"
_SleVlanInboundTagVlanPriority_Object = MibTableColumn
sleVlanInboundTagVlanPriority = _SleVlanInboundTagVlanPriority_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 1, 1, 1, 5),
    _SleVlanInboundTagVlanPriority_Type()
)
sleVlanInboundTagVlanPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanInboundTagVlanPriority.setStatus("current")


class _SleVlanInboundTagOuterVlanPriority_Type(Integer32):
    """Custom type sleVlanInboundTagOuterVlanPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("cos0", 0),
          ("cos1", 1),
          ("cos2", 2),
          ("cos3", 3),
          ("cos4", 4),
          ("cos5", 5),
          ("cos6", 6),
          ("cos7", 7))
    )


_SleVlanInboundTagOuterVlanPriority_Type.__name__ = "Integer32"
_SleVlanInboundTagOuterVlanPriority_Object = MibTableColumn
sleVlanInboundTagOuterVlanPriority = _SleVlanInboundTagOuterVlanPriority_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 1, 1, 1, 6),
    _SleVlanInboundTagOuterVlanPriority_Type()
)
sleVlanInboundTagOuterVlanPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanInboundTagOuterVlanPriority.setStatus("current")
_SleVlanInboundTagControl_ObjectIdentity = ObjectIdentity
sleVlanInboundTagControl = _SleVlanInboundTagControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 1, 2)
)


class _SleVlanInboundTagControlRequest_Type(Integer32):
    """Custom type sleVlanInboundTagControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("setInboundVid", 1),
          ("clearInboundVid", 2))
    )


_SleVlanInboundTagControlRequest_Type.__name__ = "Integer32"
_SleVlanInboundTagControlRequest_Object = MibScalar
sleVlanInboundTagControlRequest = _SleVlanInboundTagControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 1, 2, 1),
    _SleVlanInboundTagControlRequest_Type()
)
sleVlanInboundTagControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanInboundTagControlRequest.setStatus("current")
_SleVlanInboundTagControlStatus_Type = SleControlStatusType
_SleVlanInboundTagControlStatus_Object = MibScalar
sleVlanInboundTagControlStatus = _SleVlanInboundTagControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 1, 2, 2),
    _SleVlanInboundTagControlStatus_Type()
)
sleVlanInboundTagControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanInboundTagControlStatus.setStatus("current")
_SleVlanInboundTagControlTimer_Type = Gauge32
_SleVlanInboundTagControlTimer_Object = MibScalar
sleVlanInboundTagControlTimer = _SleVlanInboundTagControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 1, 2, 3),
    _SleVlanInboundTagControlTimer_Type()
)
sleVlanInboundTagControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanInboundTagControlTimer.setStatus("current")
_SleVlanInboundTagControlTimeStamp_Type = TimeTicks
_SleVlanInboundTagControlTimeStamp_Object = MibScalar
sleVlanInboundTagControlTimeStamp = _SleVlanInboundTagControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 1, 2, 4),
    _SleVlanInboundTagControlTimeStamp_Type()
)
sleVlanInboundTagControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanInboundTagControlTimeStamp.setStatus("current")
_SleVlanInboundTagControlReqResult_Type = SleControlRequestResultType
_SleVlanInboundTagControlReqResult_Object = MibScalar
sleVlanInboundTagControlReqResult = _SleVlanInboundTagControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 1, 2, 5),
    _SleVlanInboundTagControlReqResult_Type()
)
sleVlanInboundTagControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanInboundTagControlReqResult.setStatus("current")


class _SleVlanInboundTagControlPortIndex_Type(Integer32):
    """Custom type sleVlanInboundTagControlPortIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleVlanInboundTagControlPortIndex_Type.__name__ = "Integer32"
_SleVlanInboundTagControlPortIndex_Object = MibScalar
sleVlanInboundTagControlPortIndex = _SleVlanInboundTagControlPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 1, 2, 6),
    _SleVlanInboundTagControlPortIndex_Type()
)
sleVlanInboundTagControlPortIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanInboundTagControlPortIndex.setStatus("current")


class _SleVlanInboundTagControlVlanIndex_Type(Integer32):
    """Custom type sleVlanInboundTagControlVlanIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleVlanInboundTagControlVlanIndex_Type.__name__ = "Integer32"
_SleVlanInboundTagControlVlanIndex_Object = MibScalar
sleVlanInboundTagControlVlanIndex = _SleVlanInboundTagControlVlanIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 1, 2, 7),
    _SleVlanInboundTagControlVlanIndex_Type()
)
sleVlanInboundTagControlVlanIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanInboundTagControlVlanIndex.setStatus("current")


class _SleVlanInboundTagControlOuterVid_Type(Integer32):
    """Custom type sleVlanInboundTagControlOuterVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4094),
    )


_SleVlanInboundTagControlOuterVid_Type.__name__ = "Integer32"
_SleVlanInboundTagControlOuterVid_Object = MibScalar
sleVlanInboundTagControlOuterVid = _SleVlanInboundTagControlOuterVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 1, 2, 8),
    _SleVlanInboundTagControlOuterVid_Type()
)
sleVlanInboundTagControlOuterVid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanInboundTagControlOuterVid.setStatus("current")


class _SleVlanInboundTagControlVlanPriority_Type(Integer32):
    """Custom type sleVlanInboundTagControlVlanPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("cos0", 0),
          ("cos1", 1),
          ("cos2", 2),
          ("cos3", 3),
          ("cos4", 4),
          ("cos5", 5),
          ("cos6", 6),
          ("cos7", 7),
          ("cosAny", 8))
    )


_SleVlanInboundTagControlVlanPriority_Type.__name__ = "Integer32"
_SleVlanInboundTagControlVlanPriority_Object = MibScalar
sleVlanInboundTagControlVlanPriority = _SleVlanInboundTagControlVlanPriority_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 1, 2, 9),
    _SleVlanInboundTagControlVlanPriority_Type()
)
sleVlanInboundTagControlVlanPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanInboundTagControlVlanPriority.setStatus("current")


class _SleVlanInboundTagControlOuterVlanPriority_Type(Integer32):
    """Custom type sleVlanInboundTagControlOuterVlanPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("cos0", 0),
          ("cos1", 1),
          ("cos2", 2),
          ("cos3", 3),
          ("cos4", 4),
          ("cos5", 5),
          ("cos6", 6),
          ("cos7", 7))
    )


_SleVlanInboundTagControlOuterVlanPriority_Type.__name__ = "Integer32"
_SleVlanInboundTagControlOuterVlanPriority_Object = MibScalar
sleVlanInboundTagControlOuterVlanPriority = _SleVlanInboundTagControlOuterVlanPriority_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 1, 2, 10),
    _SleVlanInboundTagControlOuterVlanPriority_Type()
)
sleVlanInboundTagControlOuterVlanPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanInboundTagControlOuterVlanPriority.setStatus("current")
_SleVlanInboundTagNotification_ObjectIdentity = ObjectIdentity
sleVlanInboundTagNotification = _SleVlanInboundTagNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 1, 3)
)
_SleVlanOutboundTag_ObjectIdentity = ObjectIdentity
sleVlanOutboundTag = _SleVlanOutboundTag_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 2)
)
_SleVlanOutboundTagTable_Object = MibTable
sleVlanOutboundTagTable = _SleVlanOutboundTagTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 2, 1)
)
if mibBuilder.loadTexts:
    sleVlanOutboundTagTable.setStatus("current")
_SleVlanOutboundTagEntry_Object = MibTableRow
sleVlanOutboundTagEntry = _SleVlanOutboundTagEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 2, 1, 1)
)
sleVlanOutboundTagEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleVlanOutboundTagPortIndex"),
    (0, "SLE-BRIDGE-MIB", "sleVlanOutboundTagVlanIndex"),
)
if mibBuilder.loadTexts:
    sleVlanOutboundTagEntry.setStatus("current")


class _SleVlanOutboundTagPortIndex_Type(Integer32):
    """Custom type sleVlanOutboundTagPortIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleVlanOutboundTagPortIndex_Type.__name__ = "Integer32"
_SleVlanOutboundTagPortIndex_Object = MibTableColumn
sleVlanOutboundTagPortIndex = _SleVlanOutboundTagPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 2, 1, 1, 1),
    _SleVlanOutboundTagPortIndex_Type()
)
sleVlanOutboundTagPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanOutboundTagPortIndex.setStatus("current")


class _SleVlanOutboundTagVlanIndex_Type(Integer32):
    """Custom type sleVlanOutboundTagVlanIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleVlanOutboundTagVlanIndex_Type.__name__ = "Integer32"
_SleVlanOutboundTagVlanIndex_Object = MibTableColumn
sleVlanOutboundTagVlanIndex = _SleVlanOutboundTagVlanIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 2, 1, 1, 2),
    _SleVlanOutboundTagVlanIndex_Type()
)
sleVlanOutboundTagVlanIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanOutboundTagVlanIndex.setStatus("current")


class _SleVlanOutboundTagOperStatus_Type(Integer32):
    """Custom type sleVlanOutboundTagOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_SleVlanOutboundTagOperStatus_Type.__name__ = "Integer32"
_SleVlanOutboundTagOperStatus_Object = MibTableColumn
sleVlanOutboundTagOperStatus = _SleVlanOutboundTagOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 2, 1, 1, 3),
    _SleVlanOutboundTagOperStatus_Type()
)
sleVlanOutboundTagOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanOutboundTagOperStatus.setStatus("current")
_SleVlanOutboundTagControl_ObjectIdentity = ObjectIdentity
sleVlanOutboundTagControl = _SleVlanOutboundTagControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 2, 2)
)


class _SleVlanOutboundTagControlRequest_Type(Integer32):
    """Custom type sleVlanOutboundTagControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("setOutboundtag", 1),
          ("clearOutboundtag", 2))
    )


_SleVlanOutboundTagControlRequest_Type.__name__ = "Integer32"
_SleVlanOutboundTagControlRequest_Object = MibScalar
sleVlanOutboundTagControlRequest = _SleVlanOutboundTagControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 2, 2, 1),
    _SleVlanOutboundTagControlRequest_Type()
)
sleVlanOutboundTagControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanOutboundTagControlRequest.setStatus("current")
_SleVlanOutboundTagControlStatus_Type = SleControlStatusType
_SleVlanOutboundTagControlStatus_Object = MibScalar
sleVlanOutboundTagControlStatus = _SleVlanOutboundTagControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 2, 2, 2),
    _SleVlanOutboundTagControlStatus_Type()
)
sleVlanOutboundTagControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanOutboundTagControlStatus.setStatus("current")
_SleVlanOutboundTagControlTimer_Type = Gauge32
_SleVlanOutboundTagControlTimer_Object = MibScalar
sleVlanOutboundTagControlTimer = _SleVlanOutboundTagControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 2, 2, 3),
    _SleVlanOutboundTagControlTimer_Type()
)
sleVlanOutboundTagControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanOutboundTagControlTimer.setStatus("current")
_SleVlanOutboundTagControlTimeStamp_Type = TimeTicks
_SleVlanOutboundTagControlTimeStamp_Object = MibScalar
sleVlanOutboundTagControlTimeStamp = _SleVlanOutboundTagControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 2, 2, 4),
    _SleVlanOutboundTagControlTimeStamp_Type()
)
sleVlanOutboundTagControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanOutboundTagControlTimeStamp.setStatus("current")
_SleVlanOutboundTagControlReqResult_Type = SleControlRequestResultType
_SleVlanOutboundTagControlReqResult_Object = MibScalar
sleVlanOutboundTagControlReqResult = _SleVlanOutboundTagControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 2, 2, 5),
    _SleVlanOutboundTagControlReqResult_Type()
)
sleVlanOutboundTagControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanOutboundTagControlReqResult.setStatus("current")


class _SleVlanOutboundTagControlPortIndex_Type(Integer32):
    """Custom type sleVlanOutboundTagControlPortIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleVlanOutboundTagControlPortIndex_Type.__name__ = "Integer32"
_SleVlanOutboundTagControlPortIndex_Object = MibScalar
sleVlanOutboundTagControlPortIndex = _SleVlanOutboundTagControlPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 2, 2, 6),
    _SleVlanOutboundTagControlPortIndex_Type()
)
sleVlanOutboundTagControlPortIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanOutboundTagControlPortIndex.setStatus("current")


class _SleVlanOutboundTagControlOuterVid_Type(Integer32):
    """Custom type sleVlanOutboundTagControlOuterVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleVlanOutboundTagControlOuterVid_Type.__name__ = "Integer32"
_SleVlanOutboundTagControlOuterVid_Object = MibScalar
sleVlanOutboundTagControlOuterVid = _SleVlanOutboundTagControlOuterVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 2, 2, 7),
    _SleVlanOutboundTagControlOuterVid_Type()
)
sleVlanOutboundTagControlOuterVid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanOutboundTagControlOuterVid.setStatus("current")
_SleVlanOutboundTagNotification_ObjectIdentity = ObjectIdentity
sleVlanOutboundTagNotification = _SleVlanOutboundTagNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 2, 3)
)
_SleVlanRangeInboundTag_ObjectIdentity = ObjectIdentity
sleVlanRangeInboundTag = _SleVlanRangeInboundTag_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 3)
)
_SleVlanRangeInboundTagTable_Object = MibTable
sleVlanRangeInboundTagTable = _SleVlanRangeInboundTagTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 3, 1)
)
if mibBuilder.loadTexts:
    sleVlanRangeInboundTagTable.setStatus("current")
_SleVlanRangeInboundTagEntry_Object = MibTableRow
sleVlanRangeInboundTagEntry = _SleVlanRangeInboundTagEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 3, 1, 1)
)
sleVlanRangeInboundTagEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleVlanRangeInboundTagPortIndex"),
    (0, "SLE-BRIDGE-MIB", "sleVlanRangeInboundTagMinVlanIndex"),
    (0, "SLE-BRIDGE-MIB", "sleVlanRangeInboundTagMaxVlanIndex"),
)
if mibBuilder.loadTexts:
    sleVlanRangeInboundTagEntry.setStatus("current")


class _SleVlanRangeInboundTagPortIndex_Type(Integer32):
    """Custom type sleVlanRangeInboundTagPortIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 512),
    )


_SleVlanRangeInboundTagPortIndex_Type.__name__ = "Integer32"
_SleVlanRangeInboundTagPortIndex_Object = MibTableColumn
sleVlanRangeInboundTagPortIndex = _SleVlanRangeInboundTagPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 3, 1, 1, 1),
    _SleVlanRangeInboundTagPortIndex_Type()
)
sleVlanRangeInboundTagPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanRangeInboundTagPortIndex.setStatus("current")


class _SleVlanRangeInboundTagMinVlanIndex_Type(Integer32):
    """Custom type sleVlanRangeInboundTagMinVlanIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleVlanRangeInboundTagMinVlanIndex_Type.__name__ = "Integer32"
_SleVlanRangeInboundTagMinVlanIndex_Object = MibTableColumn
sleVlanRangeInboundTagMinVlanIndex = _SleVlanRangeInboundTagMinVlanIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 3, 1, 1, 2),
    _SleVlanRangeInboundTagMinVlanIndex_Type()
)
sleVlanRangeInboundTagMinVlanIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanRangeInboundTagMinVlanIndex.setStatus("current")


class _SleVlanRangeInboundTagMaxVlanIndex_Type(Integer32):
    """Custom type sleVlanRangeInboundTagMaxVlanIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleVlanRangeInboundTagMaxVlanIndex_Type.__name__ = "Integer32"
_SleVlanRangeInboundTagMaxVlanIndex_Object = MibTableColumn
sleVlanRangeInboundTagMaxVlanIndex = _SleVlanRangeInboundTagMaxVlanIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 3, 1, 1, 3),
    _SleVlanRangeInboundTagMaxVlanIndex_Type()
)
sleVlanRangeInboundTagMaxVlanIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanRangeInboundTagMaxVlanIndex.setStatus("current")


class _SleVlanRangeInboundTagOuterVid_Type(Integer32):
    """Custom type sleVlanRangeInboundTagOuterVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleVlanRangeInboundTagOuterVid_Type.__name__ = "Integer32"
_SleVlanRangeInboundTagOuterVid_Object = MibTableColumn
sleVlanRangeInboundTagOuterVid = _SleVlanRangeInboundTagOuterVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 3, 1, 1, 4),
    _SleVlanRangeInboundTagOuterVid_Type()
)
sleVlanRangeInboundTagOuterVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanRangeInboundTagOuterVid.setStatus("current")


class _SleVlanRangeInboundTagOperStatus_Type(Integer32):
    """Custom type sleVlanRangeInboundTagOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_SleVlanRangeInboundTagOperStatus_Type.__name__ = "Integer32"
_SleVlanRangeInboundTagOperStatus_Object = MibTableColumn
sleVlanRangeInboundTagOperStatus = _SleVlanRangeInboundTagOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 3, 1, 1, 5),
    _SleVlanRangeInboundTagOperStatus_Type()
)
sleVlanRangeInboundTagOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanRangeInboundTagOperStatus.setStatus("current")
_SleVlanRangeInboundTagControl_ObjectIdentity = ObjectIdentity
sleVlanRangeInboundTagControl = _SleVlanRangeInboundTagControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 3, 2)
)


class _SleVlanRangeInboundTagControlRequest_Type(Integer32):
    """Custom type sleVlanRangeInboundTagControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("setRangeInboundVid", 1),
          ("clearRangeInboundVid", 2))
    )


_SleVlanRangeInboundTagControlRequest_Type.__name__ = "Integer32"
_SleVlanRangeInboundTagControlRequest_Object = MibScalar
sleVlanRangeInboundTagControlRequest = _SleVlanRangeInboundTagControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 3, 2, 1),
    _SleVlanRangeInboundTagControlRequest_Type()
)
sleVlanRangeInboundTagControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanRangeInboundTagControlRequest.setStatus("current")
_SleVlanRangeInboundTagControlStatus_Type = SleControlStatusType
_SleVlanRangeInboundTagControlStatus_Object = MibScalar
sleVlanRangeInboundTagControlStatus = _SleVlanRangeInboundTagControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 3, 2, 2),
    _SleVlanRangeInboundTagControlStatus_Type()
)
sleVlanRangeInboundTagControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanRangeInboundTagControlStatus.setStatus("current")
_SleVlanRangeInboundTagControlTimer_Type = Gauge32
_SleVlanRangeInboundTagControlTimer_Object = MibScalar
sleVlanRangeInboundTagControlTimer = _SleVlanRangeInboundTagControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 3, 2, 3),
    _SleVlanRangeInboundTagControlTimer_Type()
)
sleVlanRangeInboundTagControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanRangeInboundTagControlTimer.setStatus("current")
_SleVlanRangeInboundTagControlTimeStamp_Type = TimeTicks
_SleVlanRangeInboundTagControlTimeStamp_Object = MibScalar
sleVlanRangeInboundTagControlTimeStamp = _SleVlanRangeInboundTagControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 3, 2, 4),
    _SleVlanRangeInboundTagControlTimeStamp_Type()
)
sleVlanRangeInboundTagControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanRangeInboundTagControlTimeStamp.setStatus("current")
_SleVlanRangeInboundTagControlReqResult_Type = SleControlRequestResultType
_SleVlanRangeInboundTagControlReqResult_Object = MibScalar
sleVlanRangeInboundTagControlReqResult = _SleVlanRangeInboundTagControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 3, 2, 5),
    _SleVlanRangeInboundTagControlReqResult_Type()
)
sleVlanRangeInboundTagControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanRangeInboundTagControlReqResult.setStatus("current")


class _SleVlanRangeInboundTagControlPortIndex_Type(Integer32):
    """Custom type sleVlanRangeInboundTagControlPortIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 512),
    )


_SleVlanRangeInboundTagControlPortIndex_Type.__name__ = "Integer32"
_SleVlanRangeInboundTagControlPortIndex_Object = MibScalar
sleVlanRangeInboundTagControlPortIndex = _SleVlanRangeInboundTagControlPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 3, 2, 6),
    _SleVlanRangeInboundTagControlPortIndex_Type()
)
sleVlanRangeInboundTagControlPortIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanRangeInboundTagControlPortIndex.setStatus("current")


class _SleVlanRangeInboundTagControlMinVlanIndex_Type(Integer32):
    """Custom type sleVlanRangeInboundTagControlMinVlanIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleVlanRangeInboundTagControlMinVlanIndex_Type.__name__ = "Integer32"
_SleVlanRangeInboundTagControlMinVlanIndex_Object = MibScalar
sleVlanRangeInboundTagControlMinVlanIndex = _SleVlanRangeInboundTagControlMinVlanIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 3, 2, 7),
    _SleVlanRangeInboundTagControlMinVlanIndex_Type()
)
sleVlanRangeInboundTagControlMinVlanIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanRangeInboundTagControlMinVlanIndex.setStatus("current")


class _SleVlanRangeInboundTagControlMaxVlanIndex_Type(Integer32):
    """Custom type sleVlanRangeInboundTagControlMaxVlanIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleVlanRangeInboundTagControlMaxVlanIndex_Type.__name__ = "Integer32"
_SleVlanRangeInboundTagControlMaxVlanIndex_Object = MibScalar
sleVlanRangeInboundTagControlMaxVlanIndex = _SleVlanRangeInboundTagControlMaxVlanIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 3, 2, 8),
    _SleVlanRangeInboundTagControlMaxVlanIndex_Type()
)
sleVlanRangeInboundTagControlMaxVlanIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanRangeInboundTagControlMaxVlanIndex.setStatus("current")


class _SleVlanRangeInboundTagControlOuterVid_Type(Integer32):
    """Custom type sleVlanRangeInboundTagControlOuterVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleVlanRangeInboundTagControlOuterVid_Type.__name__ = "Integer32"
_SleVlanRangeInboundTagControlOuterVid_Object = MibScalar
sleVlanRangeInboundTagControlOuterVid = _SleVlanRangeInboundTagControlOuterVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 3, 2, 9),
    _SleVlanRangeInboundTagControlOuterVid_Type()
)
sleVlanRangeInboundTagControlOuterVid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanRangeInboundTagControlOuterVid.setStatus("current")
_SleVlanRangeInboundTagNotification_ObjectIdentity = ObjectIdentity
sleVlanRangeInboundTagNotification = _SleVlanRangeInboundTagNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 3, 3)
)
_SleVlanProtoId_ObjectIdentity = ObjectIdentity
sleVlanProtoId = _SleVlanProtoId_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 4)
)
_SleVlanProtoIdTable_Object = MibTable
sleVlanProtoIdTable = _SleVlanProtoIdTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 4, 1)
)
if mibBuilder.loadTexts:
    sleVlanProtoIdTable.setStatus("current")
_SleVlanProtoIdEntry_Object = MibTableRow
sleVlanProtoIdEntry = _SleVlanProtoIdEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 4, 1, 1)
)
sleVlanProtoIdEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleVlanProtoIdVid"),
)
if mibBuilder.loadTexts:
    sleVlanProtoIdEntry.setStatus("current")


class _SleVlanProtoIdVid_Type(Integer32):
    """Custom type sleVlanProtoIdVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_SleVlanProtoIdVid_Type.__name__ = "Integer32"
_SleVlanProtoIdVid_Object = MibTableColumn
sleVlanProtoIdVid = _SleVlanProtoIdVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 4, 1, 1, 1),
    _SleVlanProtoIdVid_Type()
)
sleVlanProtoIdVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanProtoIdVid.setStatus("current")


class _SleVlanProtoIdOuterProtoId_Type(Integer32):
    """Custom type sleVlanProtoIdOuterProtoId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(33024,
              37120)
        )
    )
    namedValues = NamedValues(
        *(("dtag8100", 33024),
          ("dtag9100", 37120))
    )


_SleVlanProtoIdOuterProtoId_Type.__name__ = "Integer32"
_SleVlanProtoIdOuterProtoId_Object = MibTableColumn
sleVlanProtoIdOuterProtoId = _SleVlanProtoIdOuterProtoId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 4, 1, 1, 2),
    _SleVlanProtoIdOuterProtoId_Type()
)
sleVlanProtoIdOuterProtoId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanProtoIdOuterProtoId.setStatus("current")
_SleVlanProtoIdControl_ObjectIdentity = ObjectIdentity
sleVlanProtoIdControl = _SleVlanProtoIdControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 4, 2)
)


class _SleVlanProtoIdControlRequest_Type(Integer32):
    """Custom type sleVlanProtoIdControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("setVlanProtoIdOuterTpid", 1)
    )


_SleVlanProtoIdControlRequest_Type.__name__ = "Integer32"
_SleVlanProtoIdControlRequest_Object = MibScalar
sleVlanProtoIdControlRequest = _SleVlanProtoIdControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 4, 2, 1),
    _SleVlanProtoIdControlRequest_Type()
)
sleVlanProtoIdControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanProtoIdControlRequest.setStatus("current")
_SleVlanProtoIdControlStatus_Type = SleControlStatusType
_SleVlanProtoIdControlStatus_Object = MibScalar
sleVlanProtoIdControlStatus = _SleVlanProtoIdControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 4, 2, 2),
    _SleVlanProtoIdControlStatus_Type()
)
sleVlanProtoIdControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanProtoIdControlStatus.setStatus("current")
_SleVlanProtoIdControlTimer_Type = Gauge32
_SleVlanProtoIdControlTimer_Object = MibScalar
sleVlanProtoIdControlTimer = _SleVlanProtoIdControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 4, 2, 3),
    _SleVlanProtoIdControlTimer_Type()
)
sleVlanProtoIdControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanProtoIdControlTimer.setStatus("current")
_SleVlanProtoIdControlTimeStamp_Type = TimeTicks
_SleVlanProtoIdControlTimeStamp_Object = MibScalar
sleVlanProtoIdControlTimeStamp = _SleVlanProtoIdControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 4, 2, 4),
    _SleVlanProtoIdControlTimeStamp_Type()
)
sleVlanProtoIdControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanProtoIdControlTimeStamp.setStatus("current")
_SleVlanProtoIdControlReqResult_Type = SleControlRequestResultType
_SleVlanProtoIdControlReqResult_Object = MibScalar
sleVlanProtoIdControlReqResult = _SleVlanProtoIdControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 4, 2, 5),
    _SleVlanProtoIdControlReqResult_Type()
)
sleVlanProtoIdControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanProtoIdControlReqResult.setStatus("current")
_SleVlanProtoIdControlVid_Type = Integer32
_SleVlanProtoIdControlVid_Object = MibScalar
sleVlanProtoIdControlVid = _SleVlanProtoIdControlVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 4, 2, 6),
    _SleVlanProtoIdControlVid_Type()
)
sleVlanProtoIdControlVid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanProtoIdControlVid.setStatus("current")
_SleVlanProtoIdControlOuterProtoId_Type = Integer32
_SleVlanProtoIdControlOuterProtoId_Object = MibScalar
sleVlanProtoIdControlOuterProtoId = _SleVlanProtoIdControlOuterProtoId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 4, 2, 7),
    _SleVlanProtoIdControlOuterProtoId_Type()
)
sleVlanProtoIdControlOuterProtoId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanProtoIdControlOuterProtoId.setStatus("current")
_SleVlanProtoIdNotification_ObjectIdentity = ObjectIdentity
sleVlanProtoIdNotification = _SleVlanProtoIdNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 4, 3)
)
_SleVlanMapping_ObjectIdentity = ObjectIdentity
sleVlanMapping = _SleVlanMapping_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 28)
)
_SleVlanMappingTable_Object = MibTable
sleVlanMappingTable = _SleVlanMappingTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 28, 1)
)
if mibBuilder.loadTexts:
    sleVlanMappingTable.setStatus("current")
_SleVlanMappingEntry_Object = MibTableRow
sleVlanMappingEntry = _SleVlanMappingEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 28, 1, 1)
)
sleVlanMappingEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleVlanMappingIndex"),
)
if mibBuilder.loadTexts:
    sleVlanMappingEntry.setStatus("current")


class _SleVlanMappingIndex_Type(Integer32):
    """Custom type sleVlanMappingIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleVlanMappingIndex_Type.__name__ = "Integer32"
_SleVlanMappingIndex_Object = MibTableColumn
sleVlanMappingIndex = _SleVlanMappingIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 28, 1, 1, 1),
    _SleVlanMappingIndex_Type()
)
sleVlanMappingIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanMappingIndex.setStatus("current")


class _SleVlanMappingPortId_Type(Integer32):
    """Custom type sleVlanMappingPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleVlanMappingPortId_Type.__name__ = "Integer32"
_SleVlanMappingPortId_Object = MibTableColumn
sleVlanMappingPortId = _SleVlanMappingPortId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 28, 1, 1, 2),
    _SleVlanMappingPortId_Type()
)
sleVlanMappingPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanMappingPortId.setStatus("current")


class _SleVlanMappingOriVlanId_Type(Integer32):
    """Custom type sleVlanMappingOriVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleVlanMappingOriVlanId_Type.__name__ = "Integer32"
_SleVlanMappingOriVlanId_Object = MibTableColumn
sleVlanMappingOriVlanId = _SleVlanMappingOriVlanId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 28, 1, 1, 3),
    _SleVlanMappingOriVlanId_Type()
)
sleVlanMappingOriVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanMappingOriVlanId.setStatus("current")


class _SleVlanMappingTransVlanId_Type(Integer32):
    """Custom type sleVlanMappingTransVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleVlanMappingTransVlanId_Type.__name__ = "Integer32"
_SleVlanMappingTransVlanId_Object = MibTableColumn
sleVlanMappingTransVlanId = _SleVlanMappingTransVlanId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 28, 1, 1, 4),
    _SleVlanMappingTransVlanId_Type()
)
sleVlanMappingTransVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanMappingTransVlanId.setStatus("current")


class _SleVlanMappingMode_Type(Integer32):
    """Custom type sleVlanMappingMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("default", 0),
          ("cos", 1),
          ("dscp", 2),
          ("matchCos", 3),
          ("matchDscp", 4),
          ("matchEthType", 5),
          ("matchIpPrecedence", 6),
          ("matchTos", 7),
          ("rateLimit", 8))
    )


_SleVlanMappingMode_Type.__name__ = "Integer32"
_SleVlanMappingMode_Object = MibTableColumn
sleVlanMappingMode = _SleVlanMappingMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 28, 1, 1, 5),
    _SleVlanMappingMode_Type()
)
sleVlanMappingMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanMappingMode.setStatus("current")


class _SleVlanMappingMatchCos_Type(Integer32):
    """Custom type sleVlanMappingMatchCos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, -1),
        ValueRangeConstraint(0, 7),
    )


_SleVlanMappingMatchCos_Type.__name__ = "Integer32"
_SleVlanMappingMatchCos_Object = MibTableColumn
sleVlanMappingMatchCos = _SleVlanMappingMatchCos_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 28, 1, 1, 6),
    _SleVlanMappingMatchCos_Type()
)
sleVlanMappingMatchCos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanMappingMatchCos.setStatus("current")


class _SleVlanMappingMatchDscp_Type(Integer32):
    """Custom type sleVlanMappingMatchDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, -1),
        ValueRangeConstraint(0, 63),
    )


_SleVlanMappingMatchDscp_Type.__name__ = "Integer32"
_SleVlanMappingMatchDscp_Object = MibTableColumn
sleVlanMappingMatchDscp = _SleVlanMappingMatchDscp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 28, 1, 1, 7),
    _SleVlanMappingMatchDscp_Type()
)
sleVlanMappingMatchDscp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanMappingMatchDscp.setStatus("current")


class _SleVlanMappingMatchEthType_Type(Integer32):
    """Custom type sleVlanMappingMatchEthType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, -1),
        ValueRangeConstraint(1, 65535),
    )


_SleVlanMappingMatchEthType_Type.__name__ = "Integer32"
_SleVlanMappingMatchEthType_Object = MibTableColumn
sleVlanMappingMatchEthType = _SleVlanMappingMatchEthType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 28, 1, 1, 8),
    _SleVlanMappingMatchEthType_Type()
)
sleVlanMappingMatchEthType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanMappingMatchEthType.setStatus("current")


class _SleVlanMappingMatchIPPrecedence_Type(Integer32):
    """Custom type sleVlanMappingMatchIPPrecedence based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, -1),
        ValueRangeConstraint(0, 7),
    )


_SleVlanMappingMatchIPPrecedence_Type.__name__ = "Integer32"
_SleVlanMappingMatchIPPrecedence_Object = MibTableColumn
sleVlanMappingMatchIPPrecedence = _SleVlanMappingMatchIPPrecedence_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 28, 1, 1, 9),
    _SleVlanMappingMatchIPPrecedence_Type()
)
sleVlanMappingMatchIPPrecedence.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanMappingMatchIPPrecedence.setStatus("current")


class _SleVlanMappingMatchTos_Type(Integer32):
    """Custom type sleVlanMappingMatchTos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, -1),
        ValueRangeConstraint(0, 255),
    )


_SleVlanMappingMatchTos_Type.__name__ = "Integer32"
_SleVlanMappingMatchTos_Object = MibTableColumn
sleVlanMappingMatchTos = _SleVlanMappingMatchTos_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 28, 1, 1, 10),
    _SleVlanMappingMatchTos_Type()
)
sleVlanMappingMatchTos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanMappingMatchTos.setStatus("current")


class _SleVlanMappingRateLimit_Type(Integer32):
    """Custom type sleVlanMappingRateLimit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, -1),
        ValueRangeConstraint(1, 65535),
    )


_SleVlanMappingRateLimit_Type.__name__ = "Integer32"
_SleVlanMappingRateLimit_Object = MibTableColumn
sleVlanMappingRateLimit = _SleVlanMappingRateLimit_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 28, 1, 1, 11),
    _SleVlanMappingRateLimit_Type()
)
sleVlanMappingRateLimit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanMappingRateLimit.setStatus("current")


class _SleVlanMappingCos_Type(Integer32):
    """Custom type sleVlanMappingCos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, -1),
        ValueRangeConstraint(0, 7),
    )


_SleVlanMappingCos_Type.__name__ = "Integer32"
_SleVlanMappingCos_Object = MibTableColumn
sleVlanMappingCos = _SleVlanMappingCos_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 28, 1, 1, 12),
    _SleVlanMappingCos_Type()
)
sleVlanMappingCos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanMappingCos.setStatus("current")


class _SleVlanMappingDscp_Type(Integer32):
    """Custom type sleVlanMappingDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, -1),
        ValueRangeConstraint(0, 63),
    )


_SleVlanMappingDscp_Type.__name__ = "Integer32"
_SleVlanMappingDscp_Object = MibTableColumn
sleVlanMappingDscp = _SleVlanMappingDscp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 28, 1, 1, 13),
    _SleVlanMappingDscp_Type()
)
sleVlanMappingDscp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleVlanMappingDscp.setStatus("current")
_SleVlanMappingControl_ObjectIdentity = ObjectIdentity
sleVlanMappingControl = _SleVlanMappingControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 28, 2)
)


class _SleVlanMappingControlRequest_Type(Integer32):
    """Custom type sleVlanMappingControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("addVlanMapping", 1),
          ("delVlanMapping", 2))
    )


_SleVlanMappingControlRequest_Type.__name__ = "Integer32"
_SleVlanMappingControlRequest_Object = MibScalar
sleVlanMappingControlRequest = _SleVlanMappingControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 28, 2, 1),
    _SleVlanMappingControlRequest_Type()
)
sleVlanMappingControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanMappingControlRequest.setStatus("current")
_SleVlanMappingControlStatus_Type = SleControlStatusType
_SleVlanMappingControlStatus_Object = MibScalar
sleVlanMappingControlStatus = _SleVlanMappingControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 28, 2, 2),
    _SleVlanMappingControlStatus_Type()
)
sleVlanMappingControlStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanMappingControlStatus.setStatus("current")
_SleVlanMappingControlTimer_Type = Gauge32
_SleVlanMappingControlTimer_Object = MibScalar
sleVlanMappingControlTimer = _SleVlanMappingControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 28, 2, 3),
    _SleVlanMappingControlTimer_Type()
)
sleVlanMappingControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanMappingControlTimer.setStatus("current")
_SleVlanMappingControlTimeStamp_Type = TimeTicks
_SleVlanMappingControlTimeStamp_Object = MibScalar
sleVlanMappingControlTimeStamp = _SleVlanMappingControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 28, 2, 4),
    _SleVlanMappingControlTimeStamp_Type()
)
sleVlanMappingControlTimeStamp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanMappingControlTimeStamp.setStatus("current")
_SleVlanMappingControlReqResult_Type = SleControlRequestResultType
_SleVlanMappingControlReqResult_Object = MibScalar
sleVlanMappingControlReqResult = _SleVlanMappingControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 28, 2, 5),
    _SleVlanMappingControlReqResult_Type()
)
sleVlanMappingControlReqResult.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanMappingControlReqResult.setStatus("current")


class _SleVlanMappingControlIndex_Type(Integer32):
    """Custom type sleVlanMappingControlIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleVlanMappingControlIndex_Type.__name__ = "Integer32"
_SleVlanMappingControlIndex_Object = MibScalar
sleVlanMappingControlIndex = _SleVlanMappingControlIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 28, 2, 6),
    _SleVlanMappingControlIndex_Type()
)
sleVlanMappingControlIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanMappingControlIndex.setStatus("current")


class _SleVlanMappingControlPortId_Type(Integer32):
    """Custom type sleVlanMappingControlPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleVlanMappingControlPortId_Type.__name__ = "Integer32"
_SleVlanMappingControlPortId_Object = MibScalar
sleVlanMappingControlPortId = _SleVlanMappingControlPortId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 28, 2, 7),
    _SleVlanMappingControlPortId_Type()
)
sleVlanMappingControlPortId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanMappingControlPortId.setStatus("current")


class _SleVlanMappingControlOriVlanId_Type(Integer32):
    """Custom type sleVlanMappingControlOriVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleVlanMappingControlOriVlanId_Type.__name__ = "Integer32"
_SleVlanMappingControlOriVlanId_Object = MibScalar
sleVlanMappingControlOriVlanId = _SleVlanMappingControlOriVlanId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 28, 2, 8),
    _SleVlanMappingControlOriVlanId_Type()
)
sleVlanMappingControlOriVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanMappingControlOriVlanId.setStatus("current")


class _SleVlanMappingControlTransVlanID_Type(Integer32):
    """Custom type sleVlanMappingControlTransVlanID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleVlanMappingControlTransVlanID_Type.__name__ = "Integer32"
_SleVlanMappingControlTransVlanID_Object = MibScalar
sleVlanMappingControlTransVlanID = _SleVlanMappingControlTransVlanID_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 28, 2, 9),
    _SleVlanMappingControlTransVlanID_Type()
)
sleVlanMappingControlTransVlanID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanMappingControlTransVlanID.setStatus("current")


class _SleVlanMappingControlMode_Type(Integer32):
    """Custom type sleVlanMappingControlMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("default", 0),
          ("cos", 1),
          ("dscp", 2),
          ("matchCos", 3),
          ("matchDscp", 4),
          ("matchEthType", 5),
          ("matchIpPrecedence", 6),
          ("matchTos", 7),
          ("rateLimit", 8))
    )


_SleVlanMappingControlMode_Type.__name__ = "Integer32"
_SleVlanMappingControlMode_Object = MibScalar
sleVlanMappingControlMode = _SleVlanMappingControlMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 28, 2, 10),
    _SleVlanMappingControlMode_Type()
)
sleVlanMappingControlMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanMappingControlMode.setStatus("current")


class _SleVlanMappingControlMatchCos_Type(Integer32):
    """Custom type sleVlanMappingControlMatchCos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, -1),
        ValueRangeConstraint(0, 7),
    )


_SleVlanMappingControlMatchCos_Type.__name__ = "Integer32"
_SleVlanMappingControlMatchCos_Object = MibScalar
sleVlanMappingControlMatchCos = _SleVlanMappingControlMatchCos_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 28, 2, 11),
    _SleVlanMappingControlMatchCos_Type()
)
sleVlanMappingControlMatchCos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanMappingControlMatchCos.setStatus("current")


class _SleVlanMappingControlMatchDscp_Type(Integer32):
    """Custom type sleVlanMappingControlMatchDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, -1),
        ValueRangeConstraint(0, 63),
    )


_SleVlanMappingControlMatchDscp_Type.__name__ = "Integer32"
_SleVlanMappingControlMatchDscp_Object = MibScalar
sleVlanMappingControlMatchDscp = _SleVlanMappingControlMatchDscp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 28, 2, 12),
    _SleVlanMappingControlMatchDscp_Type()
)
sleVlanMappingControlMatchDscp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanMappingControlMatchDscp.setStatus("current")


class _SleVlanMappingControlMatchEthType_Type(Integer32):
    """Custom type sleVlanMappingControlMatchEthType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, -1),
        ValueRangeConstraint(1, 65535),
    )


_SleVlanMappingControlMatchEthType_Type.__name__ = "Integer32"
_SleVlanMappingControlMatchEthType_Object = MibScalar
sleVlanMappingControlMatchEthType = _SleVlanMappingControlMatchEthType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 28, 2, 13),
    _SleVlanMappingControlMatchEthType_Type()
)
sleVlanMappingControlMatchEthType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanMappingControlMatchEthType.setStatus("current")


class _SleVlanMappingControlMatchIPPrecedence_Type(Integer32):
    """Custom type sleVlanMappingControlMatchIPPrecedence based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, -1),
        ValueRangeConstraint(0, 7),
    )


_SleVlanMappingControlMatchIPPrecedence_Type.__name__ = "Integer32"
_SleVlanMappingControlMatchIPPrecedence_Object = MibScalar
sleVlanMappingControlMatchIPPrecedence = _SleVlanMappingControlMatchIPPrecedence_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 28, 2, 14),
    _SleVlanMappingControlMatchIPPrecedence_Type()
)
sleVlanMappingControlMatchIPPrecedence.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanMappingControlMatchIPPrecedence.setStatus("current")


class _SleVlanMappingControlMatchTos_Type(Integer32):
    """Custom type sleVlanMappingControlMatchTos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, -1),
        ValueRangeConstraint(0, 255),
    )


_SleVlanMappingControlMatchTos_Type.__name__ = "Integer32"
_SleVlanMappingControlMatchTos_Object = MibScalar
sleVlanMappingControlMatchTos = _SleVlanMappingControlMatchTos_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 28, 2, 15),
    _SleVlanMappingControlMatchTos_Type()
)
sleVlanMappingControlMatchTos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanMappingControlMatchTos.setStatus("current")


class _SleVlanMappingControlRateLimit_Type(Integer32):
    """Custom type sleVlanMappingControlRateLimit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, -1),
        ValueRangeConstraint(1, 65535),
    )


_SleVlanMappingControlRateLimit_Type.__name__ = "Integer32"
_SleVlanMappingControlRateLimit_Object = MibScalar
sleVlanMappingControlRateLimit = _SleVlanMappingControlRateLimit_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 28, 2, 16),
    _SleVlanMappingControlRateLimit_Type()
)
sleVlanMappingControlRateLimit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanMappingControlRateLimit.setStatus("current")


class _SleVlanMappingControlCos_Type(Integer32):
    """Custom type sleVlanMappingControlCos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, -1),
        ValueRangeConstraint(0, 7),
    )


_SleVlanMappingControlCos_Type.__name__ = "Integer32"
_SleVlanMappingControlCos_Object = MibScalar
sleVlanMappingControlCos = _SleVlanMappingControlCos_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 28, 2, 17),
    _SleVlanMappingControlCos_Type()
)
sleVlanMappingControlCos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanMappingControlCos.setStatus("current")


class _SleVlanMappingControlDscp_Type(Integer32):
    """Custom type sleVlanMappingControlDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, -1),
        ValueRangeConstraint(0, 255),
    )


_SleVlanMappingControlDscp_Type.__name__ = "Integer32"
_SleVlanMappingControlDscp_Object = MibScalar
sleVlanMappingControlDscp = _SleVlanMappingControlDscp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 28, 2, 18),
    _SleVlanMappingControlDscp_Type()
)
sleVlanMappingControlDscp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleVlanMappingControlDscp.setStatus("current")
_SleVlanMappingNotification_ObjectIdentity = ObjectIdentity
sleVlanMappingNotification = _SleVlanMappingNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 28, 3)
)
_SlePowerInline_ObjectIdentity = ObjectIdentity
slePowerInline = _SlePowerInline_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 29)
)
_SlePowerInlineTable_Object = MibTable
slePowerInlineTable = _SlePowerInlineTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 29, 1)
)
if mibBuilder.loadTexts:
    slePowerInlineTable.setStatus("current")
_SlePowerInlineEntry_Object = MibTableRow
slePowerInlineEntry = _SlePowerInlineEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 29, 1, 1)
)
slePowerInlineEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "slePowerInlinePortIndex"),
)
if mibBuilder.loadTexts:
    slePowerInlineEntry.setStatus("current")


class _SlePowerInlinePortIndex_Type(Integer32):
    """Custom type slePowerInlinePortIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SlePowerInlinePortIndex_Type.__name__ = "Integer32"
_SlePowerInlinePortIndex_Object = MibTableColumn
slePowerInlinePortIndex = _SlePowerInlinePortIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 29, 1, 1, 1),
    _SlePowerInlinePortIndex_Type()
)
slePowerInlinePortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slePowerInlinePortIndex.setStatus("current")


class _SlePowerInlineAdminStatus_Type(Integer32):
    """Custom type slePowerInlineAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("static", 2),
          ("null", 3))
    )


_SlePowerInlineAdminStatus_Type.__name__ = "Integer32"
_SlePowerInlineAdminStatus_Object = MibTableColumn
slePowerInlineAdminStatus = _SlePowerInlineAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 29, 1, 1, 2),
    _SlePowerInlineAdminStatus_Type()
)
slePowerInlineAdminStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slePowerInlineAdminStatus.setStatus("current")


class _SlePowerInlinePortStatus_Type(Integer32):
    """Custom type slePowerInlinePortStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SlePowerInlinePortStatus_Type.__name__ = "Integer32"
_SlePowerInlinePortStatus_Object = MibTableColumn
slePowerInlinePortStatus = _SlePowerInlinePortStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 29, 1, 1, 3),
    _SlePowerInlinePortStatus_Type()
)
slePowerInlinePortStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slePowerInlinePortStatus.setStatus("current")


class _SlePowerInlineDetectionStatus_Type(Integer32):
    """Custom type slePowerInlineDetectionStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("searching", 2),
          ("delivingPower", 3),
          ("test", 4),
          ("fault", 5),
          ("overloadFault", 6),
          ("requestPower", 7))
    )


_SlePowerInlineDetectionStatus_Type.__name__ = "Integer32"
_SlePowerInlineDetectionStatus_Object = MibTableColumn
slePowerInlineDetectionStatus = _SlePowerInlineDetectionStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 29, 1, 1, 4),
    _SlePowerInlineDetectionStatus_Type()
)
slePowerInlineDetectionStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slePowerInlineDetectionStatus.setStatus("current")


class _SlePowerInlinePortClass_Type(Integer32):
    """Custom type slePowerInlinePortClass based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("class0", 1),
          ("class1", 2),
          ("class2", 3),
          ("class3", 4))
    )


_SlePowerInlinePortClass_Type.__name__ = "Integer32"
_SlePowerInlinePortClass_Object = MibTableColumn
slePowerInlinePortClass = _SlePowerInlinePortClass_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 29, 1, 1, 5),
    _SlePowerInlinePortClass_Type()
)
slePowerInlinePortClass.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slePowerInlinePortClass.setStatus("current")


class _SlePowerInlinePortMaxPow_Type(Integer32):
    """Custom type slePowerInlinePortMaxPow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3000, 30000),
    )


_SlePowerInlinePortMaxPow_Type.__name__ = "Integer32"
_SlePowerInlinePortMaxPow_Object = MibTableColumn
slePowerInlinePortMaxPow = _SlePowerInlinePortMaxPow_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 29, 1, 1, 6),
    _SlePowerInlinePortMaxPow_Type()
)
slePowerInlinePortMaxPow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slePowerInlinePortMaxPow.setStatus("current")


class _SlePowerInlinePortLegacy_Type(Integer32):
    """Custom type slePowerInlinePortLegacy based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SlePowerInlinePortLegacy_Type.__name__ = "Integer32"
_SlePowerInlinePortLegacy_Object = MibTableColumn
slePowerInlinePortLegacy = _SlePowerInlinePortLegacy_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 29, 1, 1, 7),
    _SlePowerInlinePortLegacy_Type()
)
slePowerInlinePortLegacy.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slePowerInlinePortLegacy.setStatus("current")


class _SlePowerInlinePortPriority_Type(Integer32):
    """Custom type slePowerInlinePortPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("low", 1),
          ("medium", 2),
          ("high", 3))
    )


_SlePowerInlinePortPriority_Type.__name__ = "Integer32"
_SlePowerInlinePortPriority_Object = MibTableColumn
slePowerInlinePortPriority = _SlePowerInlinePortPriority_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 29, 1, 1, 8),
    _SlePowerInlinePortPriority_Type()
)
slePowerInlinePortPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slePowerInlinePortPriority.setStatus("current")


class _SlePowerInlinePortPower_Type(OctetString):
    """Custom type slePowerInlinePortPower based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 8),
    )


_SlePowerInlinePortPower_Type.__name__ = "OctetString"
_SlePowerInlinePortPower_Object = MibTableColumn
slePowerInlinePortPower = _SlePowerInlinePortPower_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 29, 1, 1, 9),
    _SlePowerInlinePortPower_Type()
)
slePowerInlinePortPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slePowerInlinePortPower.setStatus("current")


class _SlePowerInlinePortCurrent_Type(OctetString):
    """Custom type slePowerInlinePortCurrent based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 8),
    )


_SlePowerInlinePortCurrent_Type.__name__ = "OctetString"
_SlePowerInlinePortCurrent_Object = MibTableColumn
slePowerInlinePortCurrent = _SlePowerInlinePortCurrent_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 29, 1, 1, 10),
    _SlePowerInlinePortCurrent_Type()
)
slePowerInlinePortCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slePowerInlinePortCurrent.setStatus("current")


class _SlePowerInlinePortVoltage_Type(OctetString):
    """Custom type slePowerInlinePortVoltage based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 8),
    )


_SlePowerInlinePortVoltage_Type.__name__ = "OctetString"
_SlePowerInlinePortVoltage_Object = MibTableColumn
slePowerInlinePortVoltage = _SlePowerInlinePortVoltage_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 29, 1, 1, 11),
    _SlePowerInlinePortVoltage_Type()
)
slePowerInlinePortVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slePowerInlinePortVoltage.setStatus("current")


class _SlePowerInlinePortTemperture_Type(OctetString):
    """Custom type slePowerInlinePortTemperture based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 8),
    )


_SlePowerInlinePortTemperture_Type.__name__ = "OctetString"
_SlePowerInlinePortTemperture_Object = MibTableColumn
slePowerInlinePortTemperture = _SlePowerInlinePortTemperture_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 29, 1, 1, 12),
    _SlePowerInlinePortTemperture_Type()
)
slePowerInlinePortTemperture.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slePowerInlinePortTemperture.setStatus("current")
_SlePowerInlineControl_ObjectIdentity = ObjectIdentity
slePowerInlineControl = _SlePowerInlineControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 29, 2)
)


class _SlePowerInlineControlRequest_Type(Integer32):
    """Custom type slePowerInlineControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("setPowerInlineEnable", 1),
          ("setPowerInlineDisable", 2),
          ("setPowerInlineReset", 3),
          ("setPowerInlineLegacy", 4),
          ("setPowerInlinePriority", 5),
          ("setPowerInlineClass", 6),
          ("setPowerInlinePower", 7))
    )


_SlePowerInlineControlRequest_Type.__name__ = "Integer32"
_SlePowerInlineControlRequest_Object = MibScalar
slePowerInlineControlRequest = _SlePowerInlineControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 29, 2, 1),
    _SlePowerInlineControlRequest_Type()
)
slePowerInlineControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slePowerInlineControlRequest.setStatus("current")
_SlePowerInlineControlStatus_Type = SleControlStatusType
_SlePowerInlineControlStatus_Object = MibScalar
slePowerInlineControlStatus = _SlePowerInlineControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 29, 2, 2),
    _SlePowerInlineControlStatus_Type()
)
slePowerInlineControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slePowerInlineControlStatus.setStatus("current")
_SlePowerInlineControlTimer_Type = Gauge32
_SlePowerInlineControlTimer_Object = MibScalar
slePowerInlineControlTimer = _SlePowerInlineControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 29, 2, 3),
    _SlePowerInlineControlTimer_Type()
)
slePowerInlineControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slePowerInlineControlTimer.setStatus("current")
_SlePowerInlineControlTimeStamp_Type = TimeTicks
_SlePowerInlineControlTimeStamp_Object = MibScalar
slePowerInlineControlTimeStamp = _SlePowerInlineControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 29, 2, 4),
    _SlePowerInlineControlTimeStamp_Type()
)
slePowerInlineControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slePowerInlineControlTimeStamp.setStatus("current")
_SlePowerInlineControlReqResult_Type = SleControlRequestResultType
_SlePowerInlineControlReqResult_Object = MibScalar
slePowerInlineControlReqResult = _SlePowerInlineControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 29, 2, 5),
    _SlePowerInlineControlReqResult_Type()
)
slePowerInlineControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slePowerInlineControlReqResult.setStatus("current")


class _SlePowerInlineControlPortIndex_Type(Integer32):
    """Custom type slePowerInlineControlPortIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SlePowerInlineControlPortIndex_Type.__name__ = "Integer32"
_SlePowerInlineControlPortIndex_Object = MibScalar
slePowerInlineControlPortIndex = _SlePowerInlineControlPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 29, 2, 6),
    _SlePowerInlineControlPortIndex_Type()
)
slePowerInlineControlPortIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slePowerInlineControlPortIndex.setStatus("current")


class _SlePowerInlineControlAdminStatus_Type(Integer32):
    """Custom type slePowerInlineControlAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("static", 2),
          ("null", 3))
    )


_SlePowerInlineControlAdminStatus_Type.__name__ = "Integer32"
_SlePowerInlineControlAdminStatus_Object = MibScalar
slePowerInlineControlAdminStatus = _SlePowerInlineControlAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 29, 2, 7),
    _SlePowerInlineControlAdminStatus_Type()
)
slePowerInlineControlAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slePowerInlineControlAdminStatus.setStatus("current")


class _SlePowerInlineControlPortStatus_Type(Integer32):
    """Custom type slePowerInlineControlPortStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SlePowerInlineControlPortStatus_Type.__name__ = "Integer32"
_SlePowerInlineControlPortStatus_Object = MibScalar
slePowerInlineControlPortStatus = _SlePowerInlineControlPortStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 29, 2, 8),
    _SlePowerInlineControlPortStatus_Type()
)
slePowerInlineControlPortStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slePowerInlineControlPortStatus.setStatus("current")


class _SlePowerInlineControlPortClass_Type(Integer32):
    """Custom type slePowerInlineControlPortClass based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("class0", 1),
          ("class1", 2),
          ("class2", 3),
          ("class3", 4))
    )


_SlePowerInlineControlPortClass_Type.__name__ = "Integer32"
_SlePowerInlineControlPortClass_Object = MibScalar
slePowerInlineControlPortClass = _SlePowerInlineControlPortClass_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 29, 2, 9),
    _SlePowerInlineControlPortClass_Type()
)
slePowerInlineControlPortClass.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slePowerInlineControlPortClass.setStatus("current")


class _SlePowerInlineControlPortMaxPower_Type(Integer32):
    """Custom type slePowerInlineControlPortMaxPower based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3000, 30000),
    )


_SlePowerInlineControlPortMaxPower_Type.__name__ = "Integer32"
_SlePowerInlineControlPortMaxPower_Object = MibScalar
slePowerInlineControlPortMaxPower = _SlePowerInlineControlPortMaxPower_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 29, 2, 10),
    _SlePowerInlineControlPortMaxPower_Type()
)
slePowerInlineControlPortMaxPower.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slePowerInlineControlPortMaxPower.setStatus("current")


class _SlePowerInlineControlPortLegacy_Type(Integer32):
    """Custom type slePowerInlineControlPortLegacy based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_SlePowerInlineControlPortLegacy_Type.__name__ = "Integer32"
_SlePowerInlineControlPortLegacy_Object = MibScalar
slePowerInlineControlPortLegacy = _SlePowerInlineControlPortLegacy_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 29, 2, 11),
    _SlePowerInlineControlPortLegacy_Type()
)
slePowerInlineControlPortLegacy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slePowerInlineControlPortLegacy.setStatus("current")


class _SlePowerInlineControlPriority_Type(Integer32):
    """Custom type slePowerInlineControlPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("low", 1),
          ("medium", 2),
          ("high", 3))
    )


_SlePowerInlineControlPriority_Type.__name__ = "Integer32"
_SlePowerInlineControlPriority_Object = MibScalar
slePowerInlineControlPriority = _SlePowerInlineControlPriority_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 29, 2, 12),
    _SlePowerInlineControlPriority_Type()
)
slePowerInlineControlPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slePowerInlineControlPriority.setStatus("current")
_SlePowerInlineNotification_ObjectIdentity = ObjectIdentity
slePowerInlineNotification = _SlePowerInlineNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 29, 3)
)
_SleMfdb_ObjectIdentity = ObjectIdentity
sleMfdb = _SleMfdb_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 30)
)
_SleMfdbTable_Object = MibTable
sleMfdbTable = _SleMfdbTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 30, 1)
)
if mibBuilder.loadTexts:
    sleMfdbTable.setStatus("current")
_SleMfdbEntry_Object = MibTableRow
sleMfdbEntry = _SleMfdbEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 30, 1, 1)
)
sleMfdbEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleMfdbMacAddress"),
    (0, "SLE-BRIDGE-MIB", "sleMfdbVlanIndex"),
)
if mibBuilder.loadTexts:
    sleMfdbEntry.setStatus("current")


class _SleMfdbMacAddress_Type(OctetString):
    """Custom type sleMfdbMacAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 6),
    )


_SleMfdbMacAddress_Type.__name__ = "OctetString"
_SleMfdbMacAddress_Object = MibTableColumn
sleMfdbMacAddress = _SleMfdbMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 30, 1, 1, 1),
    _SleMfdbMacAddress_Type()
)
sleMfdbMacAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleMfdbMacAddress.setStatus("current")


class _SleMfdbEntryPermission_Type(Integer32):
    """Custom type sleMfdbEntryPermission based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("deny", 0),
          ("permit", 1))
    )


_SleMfdbEntryPermission_Type.__name__ = "Integer32"
_SleMfdbEntryPermission_Object = MibTableColumn
sleMfdbEntryPermission = _SleMfdbEntryPermission_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 30, 1, 1, 2),
    _SleMfdbEntryPermission_Type()
)
sleMfdbEntryPermission.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleMfdbEntryPermission.setStatus("current")


class _SleMfdbVlanIndex_Type(Integer32):
    """Custom type sleMfdbVlanIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 4094),
    )


_SleMfdbVlanIndex_Type.__name__ = "Integer32"
_SleMfdbVlanIndex_Object = MibTableColumn
sleMfdbVlanIndex = _SleMfdbVlanIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 30, 1, 1, 3),
    _SleMfdbVlanIndex_Type()
)
sleMfdbVlanIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleMfdbVlanIndex.setStatus("current")


class _SleMfdbPorts_Type(OctetString):
    """Custom type sleMfdbPorts based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_SleMfdbPorts_Type.__name__ = "OctetString"
_SleMfdbPorts_Object = MibTableColumn
sleMfdbPorts = _SleMfdbPorts_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 30, 1, 1, 4),
    _SleMfdbPorts_Type()
)
sleMfdbPorts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleMfdbPorts.setStatus("current")
_SleMfdbControl_ObjectIdentity = ObjectIdentity
sleMfdbControl = _SleMfdbControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 30, 2)
)


class _SleMfdbControlRequest_Type(Integer32):
    """Custom type sleMfdbControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("createMfdbEntry", 1),
          ("destoryMfdbEntry", 2),
          ("setMfdbEntryPermission", 3),
          ("clearMfdbEntryTable", 4))
    )


_SleMfdbControlRequest_Type.__name__ = "Integer32"
_SleMfdbControlRequest_Object = MibScalar
sleMfdbControlRequest = _SleMfdbControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 30, 2, 1),
    _SleMfdbControlRequest_Type()
)
sleMfdbControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleMfdbControlRequest.setStatus("current")
_SleMfdbControlStatus_Type = SleControlStatusType
_SleMfdbControlStatus_Object = MibScalar
sleMfdbControlStatus = _SleMfdbControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 30, 2, 2),
    _SleMfdbControlStatus_Type()
)
sleMfdbControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleMfdbControlStatus.setStatus("current")
_SleMfdbControlTimer_Type = Gauge32
_SleMfdbControlTimer_Object = MibScalar
sleMfdbControlTimer = _SleMfdbControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 30, 2, 3),
    _SleMfdbControlTimer_Type()
)
sleMfdbControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleMfdbControlTimer.setStatus("current")
_SleMfdbControlTimeStamp_Type = TimeTicks
_SleMfdbControlTimeStamp_Object = MibScalar
sleMfdbControlTimeStamp = _SleMfdbControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 30, 2, 4),
    _SleMfdbControlTimeStamp_Type()
)
sleMfdbControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleMfdbControlTimeStamp.setStatus("current")
_SleMfdbControlReqResult_Type = SleControlRequestResultType
_SleMfdbControlReqResult_Object = MibScalar
sleMfdbControlReqResult = _SleMfdbControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 30, 2, 5),
    _SleMfdbControlReqResult_Type()
)
sleMfdbControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleMfdbControlReqResult.setStatus("current")


class _SleMfdbControlMacAddress_Type(OctetString):
    """Custom type sleMfdbControlMacAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 6),
    )


_SleMfdbControlMacAddress_Type.__name__ = "OctetString"
_SleMfdbControlMacAddress_Object = MibScalar
sleMfdbControlMacAddress = _SleMfdbControlMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 30, 2, 6),
    _SleMfdbControlMacAddress_Type()
)
sleMfdbControlMacAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleMfdbControlMacAddress.setStatus("current")


class _SleMfdbControlEntryPermission_Type(Integer32):
    """Custom type sleMfdbControlEntryPermission based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("deny", 0),
          ("permit", 1))
    )


_SleMfdbControlEntryPermission_Type.__name__ = "Integer32"
_SleMfdbControlEntryPermission_Object = MibScalar
sleMfdbControlEntryPermission = _SleMfdbControlEntryPermission_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 30, 2, 7),
    _SleMfdbControlEntryPermission_Type()
)
sleMfdbControlEntryPermission.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleMfdbControlEntryPermission.setStatus("current")


class _SleMfdbControlVlanIndex_Type(Integer32):
    """Custom type sleMfdbControlVlanIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 4094),
    )


_SleMfdbControlVlanIndex_Type.__name__ = "Integer32"
_SleMfdbControlVlanIndex_Object = MibScalar
sleMfdbControlVlanIndex = _SleMfdbControlVlanIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 30, 2, 8),
    _SleMfdbControlVlanIndex_Type()
)
sleMfdbControlVlanIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleMfdbControlVlanIndex.setStatus("current")


class _SleMfdbControlPorts_Type(OctetString):
    """Custom type sleMfdbControlPorts based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_SleMfdbControlPorts_Type.__name__ = "OctetString"
_SleMfdbControlPorts_Object = MibScalar
sleMfdbControlPorts = _SleMfdbControlPorts_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 30, 2, 9),
    _SleMfdbControlPorts_Type()
)
sleMfdbControlPorts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleMfdbControlPorts.setStatus("current")
_SleMfdbNotification_ObjectIdentity = ObjectIdentity
sleMfdbNotification = _SleMfdbNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 30, 3)
)
_SleLldpMed_ObjectIdentity = ObjectIdentity
sleLldpMed = _SleLldpMed_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31)
)
_SleLldpMedNetworkPolicyProfile_ObjectIdentity = ObjectIdentity
sleLldpMedNetworkPolicyProfile = _SleLldpMedNetworkPolicyProfile_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 1)
)
_SleLldpMedNetworkPolicyProfileTable_Object = MibTable
sleLldpMedNetworkPolicyProfileTable = _SleLldpMedNetworkPolicyProfileTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 1, 1)
)
if mibBuilder.loadTexts:
    sleLldpMedNetworkPolicyProfileTable.setStatus("current")
_SleLldpMedNetworkPolicyProfileEntry_Object = MibTableRow
sleLldpMedNetworkPolicyProfileEntry = _SleLldpMedNetworkPolicyProfileEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 1, 1, 1)
)
sleLldpMedNetworkPolicyProfileEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfileIndex"),
)
if mibBuilder.loadTexts:
    sleLldpMedNetworkPolicyProfileEntry.setStatus("current")


class _SleLldpMedNetworkPolicyProfileIndex_Type(Integer32):
    """Custom type sleLldpMedNetworkPolicyProfileIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_SleLldpMedNetworkPolicyProfileIndex_Type.__name__ = "Integer32"
_SleLldpMedNetworkPolicyProfileIndex_Object = MibTableColumn
sleLldpMedNetworkPolicyProfileIndex = _SleLldpMedNetworkPolicyProfileIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 1, 1, 1, 1),
    _SleLldpMedNetworkPolicyProfileIndex_Type()
)
sleLldpMedNetworkPolicyProfileIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpMedNetworkPolicyProfileIndex.setStatus("current")
_SleLldpMedNetworkPolicyProfileName_Type = OctetString
_SleLldpMedNetworkPolicyProfileName_Object = MibTableColumn
sleLldpMedNetworkPolicyProfileName = _SleLldpMedNetworkPolicyProfileName_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 1, 1, 1, 2),
    _SleLldpMedNetworkPolicyProfileName_Type()
)
sleLldpMedNetworkPolicyProfileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpMedNetworkPolicyProfileName.setStatus("current")
_SleLldpMedNetworkPolicyProfileControl_ObjectIdentity = ObjectIdentity
sleLldpMedNetworkPolicyProfileControl = _SleLldpMedNetworkPolicyProfileControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 1, 2)
)


class _SleLldpMedNetworkPolicyProfileControlRequest_Type(Integer32):
    """Custom type sleLldpMedNetworkPolicyProfileControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("addNetwrokPolicyProfile", 1),
          ("delNetworkPolicyProfile", 2),
          ("clearNetworkPolicyProfile", 3))
    )


_SleLldpMedNetworkPolicyProfileControlRequest_Type.__name__ = "Integer32"
_SleLldpMedNetworkPolicyProfileControlRequest_Object = MibScalar
sleLldpMedNetworkPolicyProfileControlRequest = _SleLldpMedNetworkPolicyProfileControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 1, 2, 1),
    _SleLldpMedNetworkPolicyProfileControlRequest_Type()
)
sleLldpMedNetworkPolicyProfileControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLldpMedNetworkPolicyProfileControlRequest.setStatus("current")
_SleLldpMedNetworkPolicyProfileControlStatus_Type = SleControlStatusType
_SleLldpMedNetworkPolicyProfileControlStatus_Object = MibScalar
sleLldpMedNetworkPolicyProfileControlStatus = _SleLldpMedNetworkPolicyProfileControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 1, 2, 2),
    _SleLldpMedNetworkPolicyProfileControlStatus_Type()
)
sleLldpMedNetworkPolicyProfileControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpMedNetworkPolicyProfileControlStatus.setStatus("current")
_SleLldpMedNetworkPolicyProfileControlTimer_Type = Gauge32
_SleLldpMedNetworkPolicyProfileControlTimer_Object = MibScalar
sleLldpMedNetworkPolicyProfileControlTimer = _SleLldpMedNetworkPolicyProfileControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 1, 2, 3),
    _SleLldpMedNetworkPolicyProfileControlTimer_Type()
)
sleLldpMedNetworkPolicyProfileControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLldpMedNetworkPolicyProfileControlTimer.setStatus("current")
_SleLldpMedNetworkPolicyProfileControlTimeStamp_Type = TimeTicks
_SleLldpMedNetworkPolicyProfileControlTimeStamp_Object = MibScalar
sleLldpMedNetworkPolicyProfileControlTimeStamp = _SleLldpMedNetworkPolicyProfileControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 1, 2, 4),
    _SleLldpMedNetworkPolicyProfileControlTimeStamp_Type()
)
sleLldpMedNetworkPolicyProfileControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpMedNetworkPolicyProfileControlTimeStamp.setStatus("current")
_SleLldpMedNetworkPolicyProfileControlReqResult_Type = SleControlRequestResultType
_SleLldpMedNetworkPolicyProfileControlReqResult_Object = MibScalar
sleLldpMedNetworkPolicyProfileControlReqResult = _SleLldpMedNetworkPolicyProfileControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 1, 2, 5),
    _SleLldpMedNetworkPolicyProfileControlReqResult_Type()
)
sleLldpMedNetworkPolicyProfileControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpMedNetworkPolicyProfileControlReqResult.setStatus("current")


class _SleLldpMedNetworkPolicyProfileControlIndex_Type(Integer32):
    """Custom type sleLldpMedNetworkPolicyProfileControlIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_SleLldpMedNetworkPolicyProfileControlIndex_Type.__name__ = "Integer32"
_SleLldpMedNetworkPolicyProfileControlIndex_Object = MibScalar
sleLldpMedNetworkPolicyProfileControlIndex = _SleLldpMedNetworkPolicyProfileControlIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 1, 2, 6),
    _SleLldpMedNetworkPolicyProfileControlIndex_Type()
)
sleLldpMedNetworkPolicyProfileControlIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLldpMedNetworkPolicyProfileControlIndex.setStatus("current")
_SleLldpMedNetworkPolicyProfileControlName_Type = OctetString
_SleLldpMedNetworkPolicyProfileControlName_Object = MibScalar
sleLldpMedNetworkPolicyProfileControlName = _SleLldpMedNetworkPolicyProfileControlName_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 1, 2, 7),
    _SleLldpMedNetworkPolicyProfileControlName_Type()
)
sleLldpMedNetworkPolicyProfileControlName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLldpMedNetworkPolicyProfileControlName.setStatus("current")
_SleLldpMedNetworkPolicyProfileNotifications_ObjectIdentity = ObjectIdentity
sleLldpMedNetworkPolicyProfileNotifications = _SleLldpMedNetworkPolicyProfileNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 1, 3)
)
_SleLldpMedNetworkPolicyProfilePolicy_ObjectIdentity = ObjectIdentity
sleLldpMedNetworkPolicyProfilePolicy = _SleLldpMedNetworkPolicyProfilePolicy_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 2)
)
_SleLldpMedNetworkPolicyProfilePolicyTable_Object = MibTable
sleLldpMedNetworkPolicyProfilePolicyTable = _SleLldpMedNetworkPolicyProfilePolicyTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 2, 1)
)
if mibBuilder.loadTexts:
    sleLldpMedNetworkPolicyProfilePolicyTable.setStatus("current")
_SleLldpMedNetworkPolicyProfilePolicyEntry_Object = MibTableRow
sleLldpMedNetworkPolicyProfilePolicyEntry = _SleLldpMedNetworkPolicyProfilePolicyEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 2, 1, 1)
)
sleLldpMedNetworkPolicyProfilePolicyEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfileIndex"),
    (0, "SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfilePolicyAppType"),
)
if mibBuilder.loadTexts:
    sleLldpMedNetworkPolicyProfilePolicyEntry.setStatus("current")


class _SleLldpMedNetworkPolicyProfilePolicyAppType_Type(Integer32):
    """Custom type sleLldpMedNetworkPolicyProfilePolicyAppType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("voice", 1),
          ("voiceSignal", 2),
          ("guestVoice", 3),
          ("guestVoiceSignal", 4),
          ("softphoneVoice", 5),
          ("videoConfrence", 6),
          ("streamVideo", 7),
          ("viceoSignal", 8))
    )


_SleLldpMedNetworkPolicyProfilePolicyAppType_Type.__name__ = "Integer32"
_SleLldpMedNetworkPolicyProfilePolicyAppType_Object = MibTableColumn
sleLldpMedNetworkPolicyProfilePolicyAppType = _SleLldpMedNetworkPolicyProfilePolicyAppType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 2, 1, 1, 1),
    _SleLldpMedNetworkPolicyProfilePolicyAppType_Type()
)
sleLldpMedNetworkPolicyProfilePolicyAppType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpMedNetworkPolicyProfilePolicyAppType.setStatus("current")


class _SleLldpMedNetworkPolicyProfilePolicyVlanId_Type(Integer32):
    """Custom type sleLldpMedNetworkPolicyProfilePolicyVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleLldpMedNetworkPolicyProfilePolicyVlanId_Type.__name__ = "Integer32"
_SleLldpMedNetworkPolicyProfilePolicyVlanId_Object = MibTableColumn
sleLldpMedNetworkPolicyProfilePolicyVlanId = _SleLldpMedNetworkPolicyProfilePolicyVlanId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 2, 1, 1, 2),
    _SleLldpMedNetworkPolicyProfilePolicyVlanId_Type()
)
sleLldpMedNetworkPolicyProfilePolicyVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpMedNetworkPolicyProfilePolicyVlanId.setStatus("current")


class _SleLldpMedNetworkPolicyProfilePolicyPriority_Type(Integer32):
    """Custom type sleLldpMedNetworkPolicyProfilePolicyPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_SleLldpMedNetworkPolicyProfilePolicyPriority_Type.__name__ = "Integer32"
_SleLldpMedNetworkPolicyProfilePolicyPriority_Object = MibTableColumn
sleLldpMedNetworkPolicyProfilePolicyPriority = _SleLldpMedNetworkPolicyProfilePolicyPriority_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 2, 1, 1, 3),
    _SleLldpMedNetworkPolicyProfilePolicyPriority_Type()
)
sleLldpMedNetworkPolicyProfilePolicyPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpMedNetworkPolicyProfilePolicyPriority.setStatus("current")


class _SleLldpMedNetworkPolicyProfilePolicyDscp_Type(Integer32):
    """Custom type sleLldpMedNetworkPolicyProfilePolicyDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_SleLldpMedNetworkPolicyProfilePolicyDscp_Type.__name__ = "Integer32"
_SleLldpMedNetworkPolicyProfilePolicyDscp_Object = MibTableColumn
sleLldpMedNetworkPolicyProfilePolicyDscp = _SleLldpMedNetworkPolicyProfilePolicyDscp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 2, 1, 1, 4),
    _SleLldpMedNetworkPolicyProfilePolicyDscp_Type()
)
sleLldpMedNetworkPolicyProfilePolicyDscp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpMedNetworkPolicyProfilePolicyDscp.setStatus("current")
_SleLldpMedNetworkPolicyProfilePolicyUnknown_Type = Boolean
_SleLldpMedNetworkPolicyProfilePolicyUnknown_Object = MibTableColumn
sleLldpMedNetworkPolicyProfilePolicyUnknown = _SleLldpMedNetworkPolicyProfilePolicyUnknown_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 2, 1, 1, 5),
    _SleLldpMedNetworkPolicyProfilePolicyUnknown_Type()
)
sleLldpMedNetworkPolicyProfilePolicyUnknown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpMedNetworkPolicyProfilePolicyUnknown.setStatus("current")
_SleLldpMedNetworkPolicyProfilePolicyControl_ObjectIdentity = ObjectIdentity
sleLldpMedNetworkPolicyProfilePolicyControl = _SleLldpMedNetworkPolicyProfilePolicyControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 2, 2)
)


class _SleLldpMedNetworkPolicyProfilePolicyControlRequest_Type(Integer32):
    """Custom type sleLldpMedNetworkPolicyProfilePolicyControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("setNetwrokPolicy", 1),
          ("delNetworkPolicy", 2))
    )


_SleLldpMedNetworkPolicyProfilePolicyControlRequest_Type.__name__ = "Integer32"
_SleLldpMedNetworkPolicyProfilePolicyControlRequest_Object = MibScalar
sleLldpMedNetworkPolicyProfilePolicyControlRequest = _SleLldpMedNetworkPolicyProfilePolicyControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 2, 2, 1),
    _SleLldpMedNetworkPolicyProfilePolicyControlRequest_Type()
)
sleLldpMedNetworkPolicyProfilePolicyControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLldpMedNetworkPolicyProfilePolicyControlRequest.setStatus("current")
_SleLldpMedNetworkPolicyProfilePolicyControlStatus_Type = SleControlStatusType
_SleLldpMedNetworkPolicyProfilePolicyControlStatus_Object = MibScalar
sleLldpMedNetworkPolicyProfilePolicyControlStatus = _SleLldpMedNetworkPolicyProfilePolicyControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 2, 2, 2),
    _SleLldpMedNetworkPolicyProfilePolicyControlStatus_Type()
)
sleLldpMedNetworkPolicyProfilePolicyControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpMedNetworkPolicyProfilePolicyControlStatus.setStatus("current")
_SleLldpMedNetworkPolicyProfilePolicyControlTimer_Type = Gauge32
_SleLldpMedNetworkPolicyProfilePolicyControlTimer_Object = MibScalar
sleLldpMedNetworkPolicyProfilePolicyControlTimer = _SleLldpMedNetworkPolicyProfilePolicyControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 2, 2, 3),
    _SleLldpMedNetworkPolicyProfilePolicyControlTimer_Type()
)
sleLldpMedNetworkPolicyProfilePolicyControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLldpMedNetworkPolicyProfilePolicyControlTimer.setStatus("current")
_SleLldpMedNetworkPolicyProfilePolicyControlTimeStamp_Type = TimeTicks
_SleLldpMedNetworkPolicyProfilePolicyControlTimeStamp_Object = MibScalar
sleLldpMedNetworkPolicyProfilePolicyControlTimeStamp = _SleLldpMedNetworkPolicyProfilePolicyControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 2, 2, 4),
    _SleLldpMedNetworkPolicyProfilePolicyControlTimeStamp_Type()
)
sleLldpMedNetworkPolicyProfilePolicyControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpMedNetworkPolicyProfilePolicyControlTimeStamp.setStatus("current")
_SleLldpMedNetworkPolicyProfilePolicyControlReqResult_Type = SleControlRequestResultType
_SleLldpMedNetworkPolicyProfilePolicyControlReqResult_Object = MibScalar
sleLldpMedNetworkPolicyProfilePolicyControlReqResult = _SleLldpMedNetworkPolicyProfilePolicyControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 2, 2, 5),
    _SleLldpMedNetworkPolicyProfilePolicyControlReqResult_Type()
)
sleLldpMedNetworkPolicyProfilePolicyControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpMedNetworkPolicyProfilePolicyControlReqResult.setStatus("current")


class _SleLldpMedNetworkPolicyProfilePolicyControlProfileIndex_Type(Integer32):
    """Custom type sleLldpMedNetworkPolicyProfilePolicyControlProfileIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_SleLldpMedNetworkPolicyProfilePolicyControlProfileIndex_Type.__name__ = "Integer32"
_SleLldpMedNetworkPolicyProfilePolicyControlProfileIndex_Object = MibScalar
sleLldpMedNetworkPolicyProfilePolicyControlProfileIndex = _SleLldpMedNetworkPolicyProfilePolicyControlProfileIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 2, 2, 6),
    _SleLldpMedNetworkPolicyProfilePolicyControlProfileIndex_Type()
)
sleLldpMedNetworkPolicyProfilePolicyControlProfileIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLldpMedNetworkPolicyProfilePolicyControlProfileIndex.setStatus("current")


class _SleLldpMedNetworkPolicyProfilePolicyControlAppType_Type(Integer32):
    """Custom type sleLldpMedNetworkPolicyProfilePolicyControlAppType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("voice", 1),
          ("voiceSignal", 2),
          ("guestVoice", 3),
          ("guestVoiceSignal", 4),
          ("softphoneVoice", 5),
          ("videoConfrence", 6),
          ("streamVideo", 7),
          ("viceoSignal", 8))
    )


_SleLldpMedNetworkPolicyProfilePolicyControlAppType_Type.__name__ = "Integer32"
_SleLldpMedNetworkPolicyProfilePolicyControlAppType_Object = MibScalar
sleLldpMedNetworkPolicyProfilePolicyControlAppType = _SleLldpMedNetworkPolicyProfilePolicyControlAppType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 2, 2, 7),
    _SleLldpMedNetworkPolicyProfilePolicyControlAppType_Type()
)
sleLldpMedNetworkPolicyProfilePolicyControlAppType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLldpMedNetworkPolicyProfilePolicyControlAppType.setStatus("current")


class _SleLldpMedNetworkPolicyProfilePolicyControlVlanId_Type(Integer32):
    """Custom type sleLldpMedNetworkPolicyProfilePolicyControlVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleLldpMedNetworkPolicyProfilePolicyControlVlanId_Type.__name__ = "Integer32"
_SleLldpMedNetworkPolicyProfilePolicyControlVlanId_Object = MibScalar
sleLldpMedNetworkPolicyProfilePolicyControlVlanId = _SleLldpMedNetworkPolicyProfilePolicyControlVlanId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 2, 2, 8),
    _SleLldpMedNetworkPolicyProfilePolicyControlVlanId_Type()
)
sleLldpMedNetworkPolicyProfilePolicyControlVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLldpMedNetworkPolicyProfilePolicyControlVlanId.setStatus("current")


class _SleLldpMedNetworkPolicyProfilePolicyControlPriority_Type(Integer32):
    """Custom type sleLldpMedNetworkPolicyProfilePolicyControlPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_SleLldpMedNetworkPolicyProfilePolicyControlPriority_Type.__name__ = "Integer32"
_SleLldpMedNetworkPolicyProfilePolicyControlPriority_Object = MibScalar
sleLldpMedNetworkPolicyProfilePolicyControlPriority = _SleLldpMedNetworkPolicyProfilePolicyControlPriority_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 2, 2, 9),
    _SleLldpMedNetworkPolicyProfilePolicyControlPriority_Type()
)
sleLldpMedNetworkPolicyProfilePolicyControlPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLldpMedNetworkPolicyProfilePolicyControlPriority.setStatus("current")


class _SleLldpMedNetworkPolicyProfilePolicyControlDscp_Type(Integer32):
    """Custom type sleLldpMedNetworkPolicyProfilePolicyControlDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_SleLldpMedNetworkPolicyProfilePolicyControlDscp_Type.__name__ = "Integer32"
_SleLldpMedNetworkPolicyProfilePolicyControlDscp_Object = MibScalar
sleLldpMedNetworkPolicyProfilePolicyControlDscp = _SleLldpMedNetworkPolicyProfilePolicyControlDscp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 2, 2, 10),
    _SleLldpMedNetworkPolicyProfilePolicyControlDscp_Type()
)
sleLldpMedNetworkPolicyProfilePolicyControlDscp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLldpMedNetworkPolicyProfilePolicyControlDscp.setStatus("current")
_SleLldpMedNetworkPolicyProfilePolicyControlUnknown_Type = Boolean
_SleLldpMedNetworkPolicyProfilePolicyControlUnknown_Object = MibScalar
sleLldpMedNetworkPolicyProfilePolicyControlUnknown = _SleLldpMedNetworkPolicyProfilePolicyControlUnknown_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 2, 2, 11),
    _SleLldpMedNetworkPolicyProfilePolicyControlUnknown_Type()
)
sleLldpMedNetworkPolicyProfilePolicyControlUnknown.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLldpMedNetworkPolicyProfilePolicyControlUnknown.setStatus("current")
_SleLldpMedNetworkPolicyProfilePolicyNotifications_ObjectIdentity = ObjectIdentity
sleLldpMedNetworkPolicyProfilePolicyNotifications = _SleLldpMedNetworkPolicyProfilePolicyNotifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 2, 3)
)
_SleLldpMedRemote_ObjectIdentity = ObjectIdentity
sleLldpMedRemote = _SleLldpMedRemote_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 3)
)
_SleLldpMedRemoteNetworkPolicyTable_Object = MibTable
sleLldpMedRemoteNetworkPolicyTable = _SleLldpMedRemoteNetworkPolicyTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 3, 1)
)
if mibBuilder.loadTexts:
    sleLldpMedRemoteNetworkPolicyTable.setStatus("current")
_SleLldpMedRemoteNetworkPolicyEntry_Object = MibTableRow
sleLldpMedRemoteNetworkPolicyEntry = _SleLldpMedRemoteNetworkPolicyEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 3, 1, 1)
)
sleLldpMedRemoteNetworkPolicyEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleLldpPortIndex"),
    (0, "SLE-BRIDGE-MIB", "sleLldpRemIndex"),
)
if mibBuilder.loadTexts:
    sleLldpMedRemoteNetworkPolicyEntry.setStatus("current")


class _SleLldpMedRemoteNetworkPolicyAppType_Type(Integer32):
    """Custom type sleLldpMedRemoteNetworkPolicyAppType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("voice", 1),
          ("voiceSignal", 2),
          ("guestVoice", 3),
          ("guestVoiceSignal", 4),
          ("softphoneVoice", 5),
          ("videoConfrence", 6),
          ("streamVideo", 7),
          ("viceoSignal", 8))
    )


_SleLldpMedRemoteNetworkPolicyAppType_Type.__name__ = "Integer32"
_SleLldpMedRemoteNetworkPolicyAppType_Object = MibTableColumn
sleLldpMedRemoteNetworkPolicyAppType = _SleLldpMedRemoteNetworkPolicyAppType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 3, 1, 1, 1),
    _SleLldpMedRemoteNetworkPolicyAppType_Type()
)
sleLldpMedRemoteNetworkPolicyAppType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpMedRemoteNetworkPolicyAppType.setStatus("current")


class _SleLldpMedRemoteNetworkPolicyVlanId_Type(Integer32):
    """Custom type sleLldpMedRemoteNetworkPolicyVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 4094),
        ValueRangeConstraint(4095, 4095),
    )


_SleLldpMedRemoteNetworkPolicyVlanId_Type.__name__ = "Integer32"
_SleLldpMedRemoteNetworkPolicyVlanId_Object = MibTableColumn
sleLldpMedRemoteNetworkPolicyVlanId = _SleLldpMedRemoteNetworkPolicyVlanId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 3, 1, 1, 2),
    _SleLldpMedRemoteNetworkPolicyVlanId_Type()
)
sleLldpMedRemoteNetworkPolicyVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpMedRemoteNetworkPolicyVlanId.setStatus("current")


class _SleLldpMedRemoteNetworkPolicyPriority_Type(Integer32):
    """Custom type sleLldpMedRemoteNetworkPolicyPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_SleLldpMedRemoteNetworkPolicyPriority_Type.__name__ = "Integer32"
_SleLldpMedRemoteNetworkPolicyPriority_Object = MibTableColumn
sleLldpMedRemoteNetworkPolicyPriority = _SleLldpMedRemoteNetworkPolicyPriority_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 3, 1, 1, 3),
    _SleLldpMedRemoteNetworkPolicyPriority_Type()
)
sleLldpMedRemoteNetworkPolicyPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpMedRemoteNetworkPolicyPriority.setStatus("current")


class _SleLldpMedRemoteNetworkPolicyDscp_Type(Integer32):
    """Custom type sleLldpMedRemoteNetworkPolicyDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_SleLldpMedRemoteNetworkPolicyDscp_Type.__name__ = "Integer32"
_SleLldpMedRemoteNetworkPolicyDscp_Object = MibTableColumn
sleLldpMedRemoteNetworkPolicyDscp = _SleLldpMedRemoteNetworkPolicyDscp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 3, 1, 1, 4),
    _SleLldpMedRemoteNetworkPolicyDscp_Type()
)
sleLldpMedRemoteNetworkPolicyDscp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpMedRemoteNetworkPolicyDscp.setStatus("current")
_SleLldpMedRemoteNetworkPolicyUnknown_Type = Boolean
_SleLldpMedRemoteNetworkPolicyUnknown_Object = MibTableColumn
sleLldpMedRemoteNetworkPolicyUnknown = _SleLldpMedRemoteNetworkPolicyUnknown_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 3, 1, 1, 5),
    _SleLldpMedRemoteNetworkPolicyUnknown_Type()
)
sleLldpMedRemoteNetworkPolicyUnknown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpMedRemoteNetworkPolicyUnknown.setStatus("current")
_SleLldpMedRemoteNetworkPolicyTagged_Type = Boolean
_SleLldpMedRemoteNetworkPolicyTagged_Object = MibTableColumn
sleLldpMedRemoteNetworkPolicyTagged = _SleLldpMedRemoteNetworkPolicyTagged_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 3, 1, 1, 6),
    _SleLldpMedRemoteNetworkPolicyTagged_Type()
)
sleLldpMedRemoteNetworkPolicyTagged.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpMedRemoteNetworkPolicyTagged.setStatus("current")
_SleLldpMedRemoteLocationTable_Object = MibTable
sleLldpMedRemoteLocationTable = _SleLldpMedRemoteLocationTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 3, 2)
)
if mibBuilder.loadTexts:
    sleLldpMedRemoteLocationTable.setStatus("current")
_SleLldpMedRemoteLocationEntry_Object = MibTableRow
sleLldpMedRemoteLocationEntry = _SleLldpMedRemoteLocationEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 3, 2, 1)
)
sleLldpMedRemoteLocationEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleLldpPortIndex"),
    (0, "SLE-BRIDGE-MIB", "sleLldpRemIndex"),
)
if mibBuilder.loadTexts:
    sleLldpMedRemoteLocationEntry.setStatus("current")


class _SleLldpMedRemoteLocationSubType_Type(Integer32):
    """Custom type sleLldpMedRemoteLocationSubType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 1),
          ("coordinateBased", 2),
          ("civicAddress", 3),
          ("elin", 4))
    )


_SleLldpMedRemoteLocationSubType_Type.__name__ = "Integer32"
_SleLldpMedRemoteLocationSubType_Object = MibTableColumn
sleLldpMedRemoteLocationSubType = _SleLldpMedRemoteLocationSubType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 3, 2, 1, 1),
    _SleLldpMedRemoteLocationSubType_Type()
)
sleLldpMedRemoteLocationSubType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpMedRemoteLocationSubType.setStatus("current")
_SleLldpMedRemoteLocationInfo_Type = OctetString
_SleLldpMedRemoteLocationInfo_Object = MibTableColumn
sleLldpMedRemoteLocationInfo = _SleLldpMedRemoteLocationInfo_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 3, 2, 1, 2),
    _SleLldpMedRemoteLocationInfo_Type()
)
sleLldpMedRemoteLocationInfo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpMedRemoteLocationInfo.setStatus("current")
_SleLldpMedRemoteInventoryTable_Object = MibTable
sleLldpMedRemoteInventoryTable = _SleLldpMedRemoteInventoryTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 3, 3)
)
if mibBuilder.loadTexts:
    sleLldpMedRemoteInventoryTable.setStatus("current")
_SleLldpMedRemoteInventoryEntry_Object = MibTableRow
sleLldpMedRemoteInventoryEntry = _SleLldpMedRemoteInventoryEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 3, 3, 1)
)
sleLldpMedRemoteInventoryEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleLldpPortIndex"),
    (0, "SLE-BRIDGE-MIB", "sleLldpRemIndex"),
)
if mibBuilder.loadTexts:
    sleLldpMedRemoteInventoryEntry.setStatus("current")
_SleLldpMedRemoteHardwareRev_Type = OctetString
_SleLldpMedRemoteHardwareRev_Object = MibTableColumn
sleLldpMedRemoteHardwareRev = _SleLldpMedRemoteHardwareRev_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 3, 3, 1, 1),
    _SleLldpMedRemoteHardwareRev_Type()
)
sleLldpMedRemoteHardwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpMedRemoteHardwareRev.setStatus("current")
_SleLldpMedRemoteFirmwareWRev_Type = OctetString
_SleLldpMedRemoteFirmwareWRev_Object = MibTableColumn
sleLldpMedRemoteFirmwareWRev = _SleLldpMedRemoteFirmwareWRev_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 3, 3, 1, 2),
    _SleLldpMedRemoteFirmwareWRev_Type()
)
sleLldpMedRemoteFirmwareWRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpMedRemoteFirmwareWRev.setStatus("current")
_SleLldpMedRemoteSoftwareRev_Type = OctetString
_SleLldpMedRemoteSoftwareRev_Object = MibTableColumn
sleLldpMedRemoteSoftwareRev = _SleLldpMedRemoteSoftwareRev_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 3, 3, 1, 3),
    _SleLldpMedRemoteSoftwareRev_Type()
)
sleLldpMedRemoteSoftwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpMedRemoteSoftwareRev.setStatus("current")
_SleLldpMedRemoteSerialNum_Type = OctetString
_SleLldpMedRemoteSerialNum_Object = MibTableColumn
sleLldpMedRemoteSerialNum = _SleLldpMedRemoteSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 3, 3, 1, 4),
    _SleLldpMedRemoteSerialNum_Type()
)
sleLldpMedRemoteSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpMedRemoteSerialNum.setStatus("current")
_SleLldpMedRemoteMfgName_Type = OctetString
_SleLldpMedRemoteMfgName_Object = MibTableColumn
sleLldpMedRemoteMfgName = _SleLldpMedRemoteMfgName_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 3, 3, 1, 5),
    _SleLldpMedRemoteMfgName_Type()
)
sleLldpMedRemoteMfgName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpMedRemoteMfgName.setStatus("current")
_SleLldpMedRemoteModelName_Type = OctetString
_SleLldpMedRemoteModelName_Object = MibTableColumn
sleLldpMedRemoteModelName = _SleLldpMedRemoteModelName_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 3, 3, 1, 6),
    _SleLldpMedRemoteModelName_Type()
)
sleLldpMedRemoteModelName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpMedRemoteModelName.setStatus("current")
_SleLldpMedRemoteAssetID_Type = OctetString
_SleLldpMedRemoteAssetID_Object = MibTableColumn
sleLldpMedRemoteAssetID = _SleLldpMedRemoteAssetID_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 3, 3, 1, 7),
    _SleLldpMedRemoteAssetID_Type()
)
sleLldpMedRemoteAssetID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLldpMedRemoteAssetID.setStatus("current")
_SleBridgeInterface_ObjectIdentity = ObjectIdentity
sleBridgeInterface = _SleBridgeInterface_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32)
)
_SleBridgeInterfaceTable_Object = MibTable
sleBridgeInterfaceTable = _SleBridgeInterfaceTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 1)
)
if mibBuilder.loadTexts:
    sleBridgeInterfaceTable.setStatus("current")
_SleBridgeInterfaceEntry_Object = MibTableRow
sleBridgeInterfaceEntry = _SleBridgeInterfaceEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 1, 1)
)
sleBridgeInterfaceEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleBridgeInterfaceIndex"),
)
if mibBuilder.loadTexts:
    sleBridgeInterfaceEntry.setStatus("current")


class _SleBridgeInterfaceIndex_Type(Integer32):
    """Custom type sleBridgeInterfaceIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleBridgeInterfaceIndex_Type.__name__ = "Integer32"
_SleBridgeInterfaceIndex_Object = MibTableColumn
sleBridgeInterfaceIndex = _SleBridgeInterfaceIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 1, 1, 1),
    _SleBridgeInterfaceIndex_Type()
)
sleBridgeInterfaceIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfaceIndex.setStatus("current")
_SleBridgeInterfaceName_Type = OctetString
_SleBridgeInterfaceName_Object = MibTableColumn
sleBridgeInterfaceName = _SleBridgeInterfaceName_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 1, 1, 2),
    _SleBridgeInterfaceName_Type()
)
sleBridgeInterfaceName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfaceName.setStatus("current")


class _SleBridgeInterfaceType_Type(Integer32):
    """Custom type sleBridgeInterfaceType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("switchedPort", 1),
          ("routedPort", 2))
    )


_SleBridgeInterfaceType_Type.__name__ = "Integer32"
_SleBridgeInterfaceType_Object = MibTableColumn
sleBridgeInterfaceType = _SleBridgeInterfaceType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 1, 1, 3),
    _SleBridgeInterfaceType_Type()
)
sleBridgeInterfaceType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfaceType.setStatus("current")


class _SleBridgeInterfaceMode_Type(Integer32):
    """Custom type sleBridgeInterfaceMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 0),
          ("access", 1),
          ("hybrid", 2),
          ("trunk", 3),
          ("ce", 4),
          ("cn", 5),
          ("pn", 6),
          ("pe", 7),
          ("cnp", 8),
          ("vip", 9),
          ("pip", 10),
          ("cbp", 11))
    )


_SleBridgeInterfaceMode_Type.__name__ = "Integer32"
_SleBridgeInterfaceMode_Object = MibTableColumn
sleBridgeInterfaceMode = _SleBridgeInterfaceMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 1, 1, 4),
    _SleBridgeInterfaceMode_Type()
)
sleBridgeInterfaceMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfaceMode.setStatus("current")


class _SleBridgeInterfaceDefaultVlan_Type(Integer32):
    """Custom type sleBridgeInterfaceDefaultVlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleBridgeInterfaceDefaultVlan_Type.__name__ = "Integer32"
_SleBridgeInterfaceDefaultVlan_Object = MibTableColumn
sleBridgeInterfaceDefaultVlan = _SleBridgeInterfaceDefaultVlan_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 1, 1, 5),
    _SleBridgeInterfaceDefaultVlan_Type()
)
sleBridgeInterfaceDefaultVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfaceDefaultVlan.setStatus("current")


class _SleBridgeInterfacePvid_Type(Integer32):
    """Custom type sleBridgeInterfacePvid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleBridgeInterfacePvid_Type.__name__ = "Integer32"
_SleBridgeInterfacePvid_Object = MibTableColumn
sleBridgeInterfacePvid = _SleBridgeInterfacePvid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 1, 1, 6),
    _SleBridgeInterfacePvid_Type()
)
sleBridgeInterfacePvid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfacePvid.setStatus("current")


class _SleBridgeInterfaceIngressFilter_Type(Integer32):
    """Custom type sleBridgeInterfaceIngressFilter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgeInterfaceIngressFilter_Type.__name__ = "Integer32"
_SleBridgeInterfaceIngressFilter_Object = MibTableColumn
sleBridgeInterfaceIngressFilter = _SleBridgeInterfaceIngressFilter_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 1, 1, 7),
    _SleBridgeInterfaceIngressFilter_Type()
)
sleBridgeInterfaceIngressFilter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfaceIngressFilter.setStatus("current")


class _SleBridgeInterfaceAllowedVlanFlags_Type(Integer32):
    """Custom type sleBridgeInterfaceAllowedVlanFlags based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("add", 2),
          ("except", 3),
          ("remove", 4),
          ("all", 255))
    )


_SleBridgeInterfaceAllowedVlanFlags_Type.__name__ = "Integer32"
_SleBridgeInterfaceAllowedVlanFlags_Object = MibTableColumn
sleBridgeInterfaceAllowedVlanFlags = _SleBridgeInterfaceAllowedVlanFlags_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 1, 1, 8),
    _SleBridgeInterfaceAllowedVlanFlags_Type()
)
sleBridgeInterfaceAllowedVlanFlags.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfaceAllowedVlanFlags.setStatus("current")
_SleBridgeInterfaceAllowedVlan_Type = OctetString
_SleBridgeInterfaceAllowedVlan_Object = MibTableColumn
sleBridgeInterfaceAllowedVlan = _SleBridgeInterfaceAllowedVlan_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 1, 1, 9),
    _SleBridgeInterfaceAllowedVlan_Type()
)
sleBridgeInterfaceAllowedVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfaceAllowedVlan.setStatus("current")


class _SleBridgeInterfaceNativeVlan_Type(Integer32):
    """Custom type sleBridgeInterfaceNativeVlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleBridgeInterfaceNativeVlan_Type.__name__ = "Integer32"
_SleBridgeInterfaceNativeVlan_Object = MibTableColumn
sleBridgeInterfaceNativeVlan = _SleBridgeInterfaceNativeVlan_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 1, 1, 10),
    _SleBridgeInterfaceNativeVlan_Type()
)
sleBridgeInterfaceNativeVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfaceNativeVlan.setStatus("current")


class _SleBridgeInterfaceChannelGroupAggrId_Type(Integer32):
    """Custom type sleBridgeInterfaceChannelGroupAggrId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_SleBridgeInterfaceChannelGroupAggrId_Type.__name__ = "Integer32"
_SleBridgeInterfaceChannelGroupAggrId_Object = MibTableColumn
sleBridgeInterfaceChannelGroupAggrId = _SleBridgeInterfaceChannelGroupAggrId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 1, 1, 11),
    _SleBridgeInterfaceChannelGroupAggrId_Type()
)
sleBridgeInterfaceChannelGroupAggrId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfaceChannelGroupAggrId.setStatus("current")


class _SleBridgeInterfaceChannelGroupMode_Type(Integer32):
    """Custom type sleBridgeInterfaceChannelGroupMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("inactive", 0),
          ("static", 1),
          ("lacp", 2))
    )


_SleBridgeInterfaceChannelGroupMode_Type.__name__ = "Integer32"
_SleBridgeInterfaceChannelGroupMode_Object = MibTableColumn
sleBridgeInterfaceChannelGroupMode = _SleBridgeInterfaceChannelGroupMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 1, 1, 12),
    _SleBridgeInterfaceChannelGroupMode_Type()
)
sleBridgeInterfaceChannelGroupMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfaceChannelGroupMode.setStatus("current")


class _SleBridgeInterfaceChannelGroupState_Type(Integer32):
    """Custom type sleBridgeInterfaceChannelGroupState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("aggregated", 1),
          ("aggregator", 2))
    )


_SleBridgeInterfaceChannelGroupState_Type.__name__ = "Integer32"
_SleBridgeInterfaceChannelGroupState_Object = MibTableColumn
sleBridgeInterfaceChannelGroupState = _SleBridgeInterfaceChannelGroupState_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 1, 1, 13),
    _SleBridgeInterfaceChannelGroupState_Type()
)
sleBridgeInterfaceChannelGroupState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfaceChannelGroupState.setStatus("current")


class _SleBridgeInterfaceChannelGroupLacpAggrMode_Type(Integer32):
    """Custom type sleBridgeInterfaceChannelGroupLacpAggrMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("passive", 2))
    )


_SleBridgeInterfaceChannelGroupLacpAggrMode_Type.__name__ = "Integer32"
_SleBridgeInterfaceChannelGroupLacpAggrMode_Object = MibTableColumn
sleBridgeInterfaceChannelGroupLacpAggrMode = _SleBridgeInterfaceChannelGroupLacpAggrMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 1, 1, 14),
    _SleBridgeInterfaceChannelGroupLacpAggrMode_Type()
)
sleBridgeInterfaceChannelGroupLacpAggrMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfaceChannelGroupLacpAggrMode.setStatus("current")


class _SleBridgeInterfaceChannelGroupAdminKey_Type(Integer32):
    """Custom type sleBridgeInterfaceChannelGroupAdminKey based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_SleBridgeInterfaceChannelGroupAdminKey_Type.__name__ = "Integer32"
_SleBridgeInterfaceChannelGroupAdminKey_Object = MibTableColumn
sleBridgeInterfaceChannelGroupAdminKey = _SleBridgeInterfaceChannelGroupAdminKey_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 1, 1, 15),
    _SleBridgeInterfaceChannelGroupAdminKey_Type()
)
sleBridgeInterfaceChannelGroupAdminKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfaceChannelGroupAdminKey.setStatus("current")


class _SleBridgeInterfaceChannelGroupAggrType_Type(Integer32):
    """Custom type sleBridgeInterfaceChannelGroupAggrType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("aggregatable", 1),
          ("individual", 2))
    )


_SleBridgeInterfaceChannelGroupAggrType_Type.__name__ = "Integer32"
_SleBridgeInterfaceChannelGroupAggrType_Object = MibTableColumn
sleBridgeInterfaceChannelGroupAggrType = _SleBridgeInterfaceChannelGroupAggrType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 1, 1, 16),
    _SleBridgeInterfaceChannelGroupAggrType_Type()
)
sleBridgeInterfaceChannelGroupAggrType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfaceChannelGroupAggrType.setStatus("current")


class _SleBridgeInterfaceChannelGroupPriority_Type(Integer32):
    """Custom type sleBridgeInterfaceChannelGroupPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleBridgeInterfaceChannelGroupPriority_Type.__name__ = "Integer32"
_SleBridgeInterfaceChannelGroupPriority_Object = MibTableColumn
sleBridgeInterfaceChannelGroupPriority = _SleBridgeInterfaceChannelGroupPriority_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 1, 1, 17),
    _SleBridgeInterfaceChannelGroupPriority_Type()
)
sleBridgeInterfaceChannelGroupPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfaceChannelGroupPriority.setStatus("current")


class _SleBridgeInterfaceChannelGroupTimeOut_Type(Integer32):
    """Custom type sleBridgeInterfaceChannelGroupTimeOut based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("long", 0),
          ("short", 1))
    )


_SleBridgeInterfaceChannelGroupTimeOut_Type.__name__ = "Integer32"
_SleBridgeInterfaceChannelGroupTimeOut_Object = MibTableColumn
sleBridgeInterfaceChannelGroupTimeOut = _SleBridgeInterfaceChannelGroupTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 1, 1, 18),
    _SleBridgeInterfaceChannelGroupTimeOut_Type()
)
sleBridgeInterfaceChannelGroupTimeOut.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfaceChannelGroupTimeOut.setStatus("current")


class _SleBridgeInterfaceChannelGroupActiveLink_Type(Integer32):
    """Custom type sleBridgeInterfaceChannelGroupActiveLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_SleBridgeInterfaceChannelGroupActiveLink_Type.__name__ = "Integer32"
_SleBridgeInterfaceChannelGroupActiveLink_Object = MibTableColumn
sleBridgeInterfaceChannelGroupActiveLink = _SleBridgeInterfaceChannelGroupActiveLink_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 1, 1, 19),
    _SleBridgeInterfaceChannelGroupActiveLink_Type()
)
sleBridgeInterfaceChannelGroupActiveLink.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfaceChannelGroupActiveLink.setStatus("current")


class _SleBridgeInterfaceChannelGroupDistMode_Type(Integer32):
    """Custom type sleBridgeInterfaceChannelGroupDistMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("srcmac", 1),
          ("dstmac", 2),
          ("srcdstmac", 3),
          ("srcip", 4),
          ("dstip", 5),
          ("srcdstip", 6),
          ("srcdstl4", 7),
          ("label", 8),
          ("srcport", 9),
          ("dstport", 10),
          ("srcdstport", 11),
          ("rtag7", 12))
    )


_SleBridgeInterfaceChannelGroupDistMode_Type.__name__ = "Integer32"
_SleBridgeInterfaceChannelGroupDistMode_Object = MibTableColumn
sleBridgeInterfaceChannelGroupDistMode = _SleBridgeInterfaceChannelGroupDistMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 1, 1, 20),
    _SleBridgeInterfaceChannelGroupDistMode_Type()
)
sleBridgeInterfaceChannelGroupDistMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfaceChannelGroupDistMode.setStatus("current")


class _SleBridgeInterfaceSubMode_Type(Integer32):
    """Custom type sleBridgeInterfaceSubMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 0),
          ("access", 1),
          ("hybrid", 2),
          ("trunk", 3),
          ("ce", 4),
          ("cn", 5),
          ("pn", 6),
          ("pe", 7),
          ("cnp", 8),
          ("vip", 9),
          ("pip", 10),
          ("cbp", 11))
    )


_SleBridgeInterfaceSubMode_Type.__name__ = "Integer32"
_SleBridgeInterfaceSubMode_Object = MibTableColumn
sleBridgeInterfaceSubMode = _SleBridgeInterfaceSubMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 1, 1, 21),
    _SleBridgeInterfaceSubMode_Type()
)
sleBridgeInterfaceSubMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfaceSubMode.setStatus("current")


class _SleBridgeInterfaceAcceptableFramType_Type(Integer32):
    """Custom type sleBridgeInterfaceAcceptableFramType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("all", 1),
          ("vlanTagged", 2))
    )


_SleBridgeInterfaceAcceptableFramType_Type.__name__ = "Integer32"
_SleBridgeInterfaceAcceptableFramType_Object = MibTableColumn
sleBridgeInterfaceAcceptableFramType = _SleBridgeInterfaceAcceptableFramType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 1, 1, 22),
    _SleBridgeInterfaceAcceptableFramType_Type()
)
sleBridgeInterfaceAcceptableFramType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfaceAcceptableFramType.setStatus("current")
_SleBridgeInterfaceEgressTagged_Type = OctetString
_SleBridgeInterfaceEgressTagged_Object = MibTableColumn
sleBridgeInterfaceEgressTagged = _SleBridgeInterfaceEgressTagged_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 1, 1, 23),
    _SleBridgeInterfaceEgressTagged_Type()
)
sleBridgeInterfaceEgressTagged.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfaceEgressTagged.setStatus("current")
_SleBridgeInterfaceVlanTranslation_Type = OctetString
_SleBridgeInterfaceVlanTranslation_Object = MibTableColumn
sleBridgeInterfaceVlanTranslation = _SleBridgeInterfaceVlanTranslation_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 1, 1, 24),
    _SleBridgeInterfaceVlanTranslation_Type()
)
sleBridgeInterfaceVlanTranslation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfaceVlanTranslation.setStatus("current")
_SleBridgeInterfaceCVlanRegistraionName_Type = OctetString
_SleBridgeInterfaceCVlanRegistraionName_Object = MibTableColumn
sleBridgeInterfaceCVlanRegistraionName = _SleBridgeInterfaceCVlanRegistraionName_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 1, 1, 25),
    _SleBridgeInterfaceCVlanRegistraionName_Type()
)
sleBridgeInterfaceCVlanRegistraionName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfaceCVlanRegistraionName.setStatus("current")
_SleBridgeInterfacePEVlanId_Type = OctetString
_SleBridgeInterfacePEVlanId_Object = MibTableColumn
sleBridgeInterfacePEVlanId = _SleBridgeInterfacePEVlanId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 1, 1, 26),
    _SleBridgeInterfacePEVlanId_Type()
)
sleBridgeInterfacePEVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfacePEVlanId.setStatus("current")
_SleBridgeInterfacePEDefaultVlanId_Type = OctetString
_SleBridgeInterfacePEDefaultVlanId_Object = MibTableColumn
sleBridgeInterfacePEDefaultVlanId = _SleBridgeInterfacePEDefaultVlanId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 1, 1, 27),
    _SleBridgeInterfacePEDefaultVlanId_Type()
)
sleBridgeInterfacePEDefaultVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfacePEDefaultVlanId.setStatus("current")
_SleBridgeInterfacePEUntaggedVlanId_Type = OctetString
_SleBridgeInterfacePEUntaggedVlanId_Object = MibTableColumn
sleBridgeInterfacePEUntaggedVlanId = _SleBridgeInterfacePEUntaggedVlanId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 1, 1, 28),
    _SleBridgeInterfacePEUntaggedVlanId_Type()
)
sleBridgeInterfacePEUntaggedVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfacePEUntaggedVlanId.setStatus("current")


class _SleBridgeInterfaceDefaulSVlanId_Type(Integer32):
    """Custom type sleBridgeInterfaceDefaulSVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4095),
    )


_SleBridgeInterfaceDefaulSVlanId_Type.__name__ = "Integer32"
_SleBridgeInterfaceDefaulSVlanId_Object = MibTableColumn
sleBridgeInterfaceDefaulSVlanId = _SleBridgeInterfaceDefaulSVlanId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 1, 1, 29),
    _SleBridgeInterfaceDefaulSVlanId_Type()
)
sleBridgeInterfaceDefaulSVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfaceDefaulSVlanId.setStatus("current")


class _SleBridgeInterfacePrivateVlanHostAssociationPrimaryVid_Type(Integer32):
    """Custom type sleBridgeInterfacePrivateVlanHostAssociationPrimaryVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(2, 4094),
    )


_SleBridgeInterfacePrivateVlanHostAssociationPrimaryVid_Type.__name__ = "Integer32"
_SleBridgeInterfacePrivateVlanHostAssociationPrimaryVid_Object = MibTableColumn
sleBridgeInterfacePrivateVlanHostAssociationPrimaryVid = _SleBridgeInterfacePrivateVlanHostAssociationPrimaryVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 1, 1, 30),
    _SleBridgeInterfacePrivateVlanHostAssociationPrimaryVid_Type()
)
sleBridgeInterfacePrivateVlanHostAssociationPrimaryVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfacePrivateVlanHostAssociationPrimaryVid.setStatus("current")


class _SleBridgeInterfacePrivateVlanHostAssociationPvid_Type(Integer32):
    """Custom type sleBridgeInterfacePrivateVlanHostAssociationPvid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(2, 4094),
    )


_SleBridgeInterfacePrivateVlanHostAssociationPvid_Type.__name__ = "Integer32"
_SleBridgeInterfacePrivateVlanHostAssociationPvid_Object = MibTableColumn
sleBridgeInterfacePrivateVlanHostAssociationPvid = _SleBridgeInterfacePrivateVlanHostAssociationPvid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 1, 1, 31),
    _SleBridgeInterfacePrivateVlanHostAssociationPvid_Type()
)
sleBridgeInterfacePrivateVlanHostAssociationPvid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfacePrivateVlanHostAssociationPvid.setStatus("current")


class _SleBridgeInterfacePrivateVlanMappingPvid_Type(Integer32):
    """Custom type sleBridgeInterfacePrivateVlanMappingPvid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(2, 4094),
    )


_SleBridgeInterfacePrivateVlanMappingPvid_Type.__name__ = "Integer32"
_SleBridgeInterfacePrivateVlanMappingPvid_Object = MibTableColumn
sleBridgeInterfacePrivateVlanMappingPvid = _SleBridgeInterfacePrivateVlanMappingPvid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 1, 1, 32),
    _SleBridgeInterfacePrivateVlanMappingPvid_Type()
)
sleBridgeInterfacePrivateVlanMappingPvid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfacePrivateVlanMappingPvid.setStatus("current")


class _SleBridgeInterfacePrivateVlanMappingSecondaryVid_Type(Integer32):
    """Custom type sleBridgeInterfacePrivateVlanMappingSecondaryVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(2, 4094),
    )


_SleBridgeInterfacePrivateVlanMappingSecondaryVid_Type.__name__ = "Integer32"
_SleBridgeInterfacePrivateVlanMappingSecondaryVid_Object = MibTableColumn
sleBridgeInterfacePrivateVlanMappingSecondaryVid = _SleBridgeInterfacePrivateVlanMappingSecondaryVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 1, 1, 33),
    _SleBridgeInterfacePrivateVlanMappingSecondaryVid_Type()
)
sleBridgeInterfacePrivateVlanMappingSecondaryVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfacePrivateVlanMappingSecondaryVid.setStatus("current")
_SleBridgeInterfaceGroup_Type = Integer32
_SleBridgeInterfaceGroup_Object = MibTableColumn
sleBridgeInterfaceGroup = _SleBridgeInterfaceGroup_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 1, 1, 34),
    _SleBridgeInterfaceGroup_Type()
)
sleBridgeInterfaceGroup.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfaceGroup.setStatus("current")
_SleBridgeInterfaceGroupSpanningTree_Type = Integer32
_SleBridgeInterfaceGroupSpanningTree_Object = MibTableColumn
sleBridgeInterfaceGroupSpanningTree = _SleBridgeInterfaceGroupSpanningTree_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 1, 1, 35),
    _SleBridgeInterfaceGroupSpanningTree_Type()
)
sleBridgeInterfaceGroupSpanningTree.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfaceGroupSpanningTree.setStatus("current")


class _SleBridgeInterfaceProviderNetworkEtherType_Type(Integer32):
    """Custom type sleBridgeInterfaceProviderNetworkEtherType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(-1,
              0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", -1),
          ("value0x88a8", 0),
          ("value0x8100", 1),
          ("value0x9100", 2))
    )


_SleBridgeInterfaceProviderNetworkEtherType_Type.__name__ = "Integer32"
_SleBridgeInterfaceProviderNetworkEtherType_Object = MibTableColumn
sleBridgeInterfaceProviderNetworkEtherType = _SleBridgeInterfaceProviderNetworkEtherType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 1, 1, 36),
    _SleBridgeInterfaceProviderNetworkEtherType_Type()
)
sleBridgeInterfaceProviderNetworkEtherType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfaceProviderNetworkEtherType.setStatus("current")
_SleBridgeInterfaceControl_ObjectIdentity = ObjectIdentity
sleBridgeInterfaceControl = _SleBridgeInterfaceControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2)
)


class _SleBridgeInterfaceControlRequest_Type(Integer32):
    """Custom type sleBridgeInterfaceControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35)
        )
    )
    namedValues = NamedValues(
        *(("setSwitchport", 1),
          ("setSwitchportDefaultVlan", 2),
          ("delSwitchportDefaultVlan", 3),
          ("setSwitchportAllowedVlan", 4),
          ("setSwitchportMode", 5),
          ("setSwitchportModeIngressFilter", 6),
          ("delSwitchportTrunk", 7),
          ("setSwitchportTrunkNativeVlan", 8),
          ("delSwitchportTrunkNativeVlan", 9),
          ("setChannelGroup", 10),
          ("delChannelGroup", 11),
          ("setChannelGroupAdminKey", 12),
          ("setChannelGroupAggrType", 13),
          ("setChannelGroupPriority", 14),
          ("setChannelGroupTimeOut", 15),
          ("setChannelGroupActiveLink", 16),
          ("setChannelGroupDistMode", 17),
          ("setInterfacePvid", 18),
          ("unsetBridgeIfSwitchStatus", 19),
          ("setSwitchportCvlanRegistration", 20),
          ("delSwitchportCvlanRegistration", 21),
          ("setAcceptableFrameType", 22),
          ("setProviderEdge", 23),
          ("setVlanTranslation", 24),
          ("unsetVlanTranslation", 25),
          ("setSwitchportDefaultSVlan", 26),
          ("unsetSwitchportDefaultSVlan", 27),
          ("setSwitchportPrivateVlanHostAssociation", 28),
          ("delSwitchportPrivateVlanHostAssociation", 29),
          ("addSwitchportPrivateVlanMapping", 30),
          ("removeSwitchportPrivateVlanMapping", 31),
          ("setBridgeGroup", 32),
          ("unsetBridgeGroup", 33),
          ("setBridgeGroupSpanningTree", 34),
          ("setProviderNetworkEtherType", 35))
    )


_SleBridgeInterfaceControlRequest_Type.__name__ = "Integer32"
_SleBridgeInterfaceControlRequest_Object = MibScalar
sleBridgeInterfaceControlRequest = _SleBridgeInterfaceControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2, 1),
    _SleBridgeInterfaceControlRequest_Type()
)
sleBridgeInterfaceControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInterfaceControlRequest.setStatus("current")
_SleBridgeInterfaceControlStatus_Type = SleControlStatusType
_SleBridgeInterfaceControlStatus_Object = MibScalar
sleBridgeInterfaceControlStatus = _SleBridgeInterfaceControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2, 2),
    _SleBridgeInterfaceControlStatus_Type()
)
sleBridgeInterfaceControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfaceControlStatus.setStatus("current")
_SleBridgeInterfaceControlTimer_Type = Gauge32
_SleBridgeInterfaceControlTimer_Object = MibScalar
sleBridgeInterfaceControlTimer = _SleBridgeInterfaceControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2, 3),
    _SleBridgeInterfaceControlTimer_Type()
)
sleBridgeInterfaceControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInterfaceControlTimer.setStatus("current")
_SleBridgeInterfaceControlTimeStamp_Type = TimeTicks
_SleBridgeInterfaceControlTimeStamp_Object = MibScalar
sleBridgeInterfaceControlTimeStamp = _SleBridgeInterfaceControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2, 4),
    _SleBridgeInterfaceControlTimeStamp_Type()
)
sleBridgeInterfaceControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfaceControlTimeStamp.setStatus("current")
_SleBridgeInterfaceControlReqResult_Type = SleControlRequestResultType
_SleBridgeInterfaceControlReqResult_Object = MibScalar
sleBridgeInterfaceControlReqResult = _SleBridgeInterfaceControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2, 5),
    _SleBridgeInterfaceControlReqResult_Type()
)
sleBridgeInterfaceControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInterfaceControlReqResult.setStatus("current")


class _SleBridgeInterfaceControlIndex_Type(Integer32):
    """Custom type sleBridgeInterfaceControlIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleBridgeInterfaceControlIndex_Type.__name__ = "Integer32"
_SleBridgeInterfaceControlIndex_Object = MibScalar
sleBridgeInterfaceControlIndex = _SleBridgeInterfaceControlIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2, 6),
    _SleBridgeInterfaceControlIndex_Type()
)
sleBridgeInterfaceControlIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInterfaceControlIndex.setStatus("current")


class _SleBridgeInterfaceControlMode_Type(Integer32):
    """Custom type sleBridgeInterfaceControlMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 0),
          ("access", 1),
          ("hybrid", 2),
          ("trunk", 3),
          ("ce", 4),
          ("cn", 5),
          ("pn", 6),
          ("pe", 7),
          ("cnp", 8),
          ("vip", 9),
          ("pip", 10),
          ("cbp", 11))
    )


_SleBridgeInterfaceControlMode_Type.__name__ = "Integer32"
_SleBridgeInterfaceControlMode_Object = MibScalar
sleBridgeInterfaceControlMode = _SleBridgeInterfaceControlMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2, 7),
    _SleBridgeInterfaceControlMode_Type()
)
sleBridgeInterfaceControlMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInterfaceControlMode.setStatus("current")


class _SleBridgeInterfaceControlDefaultVlan_Type(Integer32):
    """Custom type sleBridgeInterfaceControlDefaultVlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleBridgeInterfaceControlDefaultVlan_Type.__name__ = "Integer32"
_SleBridgeInterfaceControlDefaultVlan_Object = MibScalar
sleBridgeInterfaceControlDefaultVlan = _SleBridgeInterfaceControlDefaultVlan_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2, 8),
    _SleBridgeInterfaceControlDefaultVlan_Type()
)
sleBridgeInterfaceControlDefaultVlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInterfaceControlDefaultVlan.setStatus("current")


class _SleBridgeInterfaceControlPvid_Type(Integer32):
    """Custom type sleBridgeInterfaceControlPvid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleBridgeInterfaceControlPvid_Type.__name__ = "Integer32"
_SleBridgeInterfaceControlPvid_Object = MibScalar
sleBridgeInterfaceControlPvid = _SleBridgeInterfaceControlPvid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2, 9),
    _SleBridgeInterfaceControlPvid_Type()
)
sleBridgeInterfaceControlPvid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInterfaceControlPvid.setStatus("current")


class _SleBridgeInterfaceControlIngressFilter_Type(Integer32):
    """Custom type sleBridgeInterfaceControlIngressFilter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgeInterfaceControlIngressFilter_Type.__name__ = "Integer32"
_SleBridgeInterfaceControlIngressFilter_Object = MibScalar
sleBridgeInterfaceControlIngressFilter = _SleBridgeInterfaceControlIngressFilter_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2, 10),
    _SleBridgeInterfaceControlIngressFilter_Type()
)
sleBridgeInterfaceControlIngressFilter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInterfaceControlIngressFilter.setStatus("current")


class _SleBridgeInterfaceControlAllowedVlanFlags_Type(Integer32):
    """Custom type sleBridgeInterfaceControlAllowedVlanFlags based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("add", 2),
          ("except", 3),
          ("remove", 4),
          ("all", 255))
    )


_SleBridgeInterfaceControlAllowedVlanFlags_Type.__name__ = "Integer32"
_SleBridgeInterfaceControlAllowedVlanFlags_Object = MibScalar
sleBridgeInterfaceControlAllowedVlanFlags = _SleBridgeInterfaceControlAllowedVlanFlags_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2, 11),
    _SleBridgeInterfaceControlAllowedVlanFlags_Type()
)
sleBridgeInterfaceControlAllowedVlanFlags.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInterfaceControlAllowedVlanFlags.setStatus("current")
_SleBridgeInterfaceControlAllowedVlan_Type = OctetString
_SleBridgeInterfaceControlAllowedVlan_Object = MibScalar
sleBridgeInterfaceControlAllowedVlan = _SleBridgeInterfaceControlAllowedVlan_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2, 12),
    _SleBridgeInterfaceControlAllowedVlan_Type()
)
sleBridgeInterfaceControlAllowedVlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInterfaceControlAllowedVlan.setStatus("current")


class _SleBridgeInterfaceControlNativeVlan_Type(Integer32):
    """Custom type sleBridgeInterfaceControlNativeVlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleBridgeInterfaceControlNativeVlan_Type.__name__ = "Integer32"
_SleBridgeInterfaceControlNativeVlan_Object = MibScalar
sleBridgeInterfaceControlNativeVlan = _SleBridgeInterfaceControlNativeVlan_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2, 13),
    _SleBridgeInterfaceControlNativeVlan_Type()
)
sleBridgeInterfaceControlNativeVlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInterfaceControlNativeVlan.setStatus("current")


class _SleBridgeInterfaceControlChannelGroupAggrId_Type(Integer32):
    """Custom type sleBridgeInterfaceControlChannelGroupAggrId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_SleBridgeInterfaceControlChannelGroupAggrId_Type.__name__ = "Integer32"
_SleBridgeInterfaceControlChannelGroupAggrId_Object = MibScalar
sleBridgeInterfaceControlChannelGroupAggrId = _SleBridgeInterfaceControlChannelGroupAggrId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2, 14),
    _SleBridgeInterfaceControlChannelGroupAggrId_Type()
)
sleBridgeInterfaceControlChannelGroupAggrId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInterfaceControlChannelGroupAggrId.setStatus("current")


class _SleBridgeInterfaceControlChannelGroupMode_Type(Integer32):
    """Custom type sleBridgeInterfaceControlChannelGroupMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("inactive", 0),
          ("static", 1),
          ("lacp", 2))
    )


_SleBridgeInterfaceControlChannelGroupMode_Type.__name__ = "Integer32"
_SleBridgeInterfaceControlChannelGroupMode_Object = MibScalar
sleBridgeInterfaceControlChannelGroupMode = _SleBridgeInterfaceControlChannelGroupMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2, 15),
    _SleBridgeInterfaceControlChannelGroupMode_Type()
)
sleBridgeInterfaceControlChannelGroupMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInterfaceControlChannelGroupMode.setStatus("current")


class _SleBridgeInterfaceControlChannelGroupLacpAggrMode_Type(Integer32):
    """Custom type sleBridgeInterfaceControlChannelGroupLacpAggrMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("passive", 2))
    )


_SleBridgeInterfaceControlChannelGroupLacpAggrMode_Type.__name__ = "Integer32"
_SleBridgeInterfaceControlChannelGroupLacpAggrMode_Object = MibScalar
sleBridgeInterfaceControlChannelGroupLacpAggrMode = _SleBridgeInterfaceControlChannelGroupLacpAggrMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2, 16),
    _SleBridgeInterfaceControlChannelGroupLacpAggrMode_Type()
)
sleBridgeInterfaceControlChannelGroupLacpAggrMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInterfaceControlChannelGroupLacpAggrMode.setStatus("current")


class _SleBridgeInterfaceControlChannelGroupAdminKey_Type(Integer32):
    """Custom type sleBridgeInterfaceControlChannelGroupAdminKey based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_SleBridgeInterfaceControlChannelGroupAdminKey_Type.__name__ = "Integer32"
_SleBridgeInterfaceControlChannelGroupAdminKey_Object = MibScalar
sleBridgeInterfaceControlChannelGroupAdminKey = _SleBridgeInterfaceControlChannelGroupAdminKey_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2, 17),
    _SleBridgeInterfaceControlChannelGroupAdminKey_Type()
)
sleBridgeInterfaceControlChannelGroupAdminKey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInterfaceControlChannelGroupAdminKey.setStatus("current")


class _SleBridgeInterfaceControlChannelGroupAggrType_Type(Integer32):
    """Custom type sleBridgeInterfaceControlChannelGroupAggrType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("aggregatable", 0),
          ("individual", 1))
    )


_SleBridgeInterfaceControlChannelGroupAggrType_Type.__name__ = "Integer32"
_SleBridgeInterfaceControlChannelGroupAggrType_Object = MibScalar
sleBridgeInterfaceControlChannelGroupAggrType = _SleBridgeInterfaceControlChannelGroupAggrType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2, 18),
    _SleBridgeInterfaceControlChannelGroupAggrType_Type()
)
sleBridgeInterfaceControlChannelGroupAggrType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInterfaceControlChannelGroupAggrType.setStatus("current")


class _SleBridgeInterfaceControlChannelGroupPriority_Type(Integer32):
    """Custom type sleBridgeInterfaceControlChannelGroupPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleBridgeInterfaceControlChannelGroupPriority_Type.__name__ = "Integer32"
_SleBridgeInterfaceControlChannelGroupPriority_Object = MibScalar
sleBridgeInterfaceControlChannelGroupPriority = _SleBridgeInterfaceControlChannelGroupPriority_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2, 19),
    _SleBridgeInterfaceControlChannelGroupPriority_Type()
)
sleBridgeInterfaceControlChannelGroupPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInterfaceControlChannelGroupPriority.setStatus("current")


class _SleBridgeInterfaceControlChannelGroupTimeOut_Type(Integer32):
    """Custom type sleBridgeInterfaceControlChannelGroupTimeOut based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("long", 0),
          ("short", 1))
    )


_SleBridgeInterfaceControlChannelGroupTimeOut_Type.__name__ = "Integer32"
_SleBridgeInterfaceControlChannelGroupTimeOut_Object = MibScalar
sleBridgeInterfaceControlChannelGroupTimeOut = _SleBridgeInterfaceControlChannelGroupTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2, 20),
    _SleBridgeInterfaceControlChannelGroupTimeOut_Type()
)
sleBridgeInterfaceControlChannelGroupTimeOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInterfaceControlChannelGroupTimeOut.setStatus("current")


class _SleBridgeInterfaceControlChannelGroupActiveLink_Type(Integer32):
    """Custom type sleBridgeInterfaceControlChannelGroupActiveLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_SleBridgeInterfaceControlChannelGroupActiveLink_Type.__name__ = "Integer32"
_SleBridgeInterfaceControlChannelGroupActiveLink_Object = MibScalar
sleBridgeInterfaceControlChannelGroupActiveLink = _SleBridgeInterfaceControlChannelGroupActiveLink_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2, 21),
    _SleBridgeInterfaceControlChannelGroupActiveLink_Type()
)
sleBridgeInterfaceControlChannelGroupActiveLink.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInterfaceControlChannelGroupActiveLink.setStatus("current")


class _SleBridgeInterfaceControlChannelGroupDistMode_Type(Integer32):
    """Custom type sleBridgeInterfaceControlChannelGroupDistMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("srcmac", 1),
          ("dstmac", 2),
          ("srcdstmac", 3),
          ("srcip", 4),
          ("dstip", 5),
          ("srcdstip", 6),
          ("srcdstl4", 7),
          ("label", 8),
          ("srcport", 9),
          ("dstport", 10),
          ("srcdstport", 11),
          ("rtag7", 12))
    )


_SleBridgeInterfaceControlChannelGroupDistMode_Type.__name__ = "Integer32"
_SleBridgeInterfaceControlChannelGroupDistMode_Object = MibScalar
sleBridgeInterfaceControlChannelGroupDistMode = _SleBridgeInterfaceControlChannelGroupDistMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2, 22),
    _SleBridgeInterfaceControlChannelGroupDistMode_Type()
)
sleBridgeInterfaceControlChannelGroupDistMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInterfaceControlChannelGroupDistMode.setStatus("current")


class _SleBridgeInterfaceControlSubMode_Type(Integer32):
    """Custom type sleBridgeInterfaceControlSubMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 0),
          ("access", 1),
          ("hybrid", 2),
          ("trunk", 3))
    )


_SleBridgeInterfaceControlSubMode_Type.__name__ = "Integer32"
_SleBridgeInterfaceControlSubMode_Object = MibScalar
sleBridgeInterfaceControlSubMode = _SleBridgeInterfaceControlSubMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2, 23),
    _SleBridgeInterfaceControlSubMode_Type()
)
sleBridgeInterfaceControlSubMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInterfaceControlSubMode.setStatus("current")


class _SleBridgeInterfaceControlAcceptableFramType_Type(Integer32):
    """Custom type sleBridgeInterfaceControlAcceptableFramType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("all", 1),
          ("vlanTagged", 2))
    )


_SleBridgeInterfaceControlAcceptableFramType_Type.__name__ = "Integer32"
_SleBridgeInterfaceControlAcceptableFramType_Object = MibScalar
sleBridgeInterfaceControlAcceptableFramType = _SleBridgeInterfaceControlAcceptableFramType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2, 24),
    _SleBridgeInterfaceControlAcceptableFramType_Type()
)
sleBridgeInterfaceControlAcceptableFramType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInterfaceControlAcceptableFramType.setStatus("current")


class _SleBridgeInterfaceControlEgressTagged_Type(Integer32):
    """Custom type sleBridgeInterfaceControlEgressTagged based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleBridgeInterfaceControlEgressTagged_Type.__name__ = "Integer32"
_SleBridgeInterfaceControlEgressTagged_Object = MibScalar
sleBridgeInterfaceControlEgressTagged = _SleBridgeInterfaceControlEgressTagged_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2, 25),
    _SleBridgeInterfaceControlEgressTagged_Type()
)
sleBridgeInterfaceControlEgressTagged.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInterfaceControlEgressTagged.setStatus("current")


class _SleBridgeInterfaceControlVlanTranslate_Type(Integer32):
    """Custom type sleBridgeInterfaceControlVlanTranslate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_SleBridgeInterfaceControlVlanTranslate_Type.__name__ = "Integer32"
_SleBridgeInterfaceControlVlanTranslate_Object = MibScalar
sleBridgeInterfaceControlVlanTranslate = _SleBridgeInterfaceControlVlanTranslate_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2, 26),
    _SleBridgeInterfaceControlVlanTranslate_Type()
)
sleBridgeInterfaceControlVlanTranslate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInterfaceControlVlanTranslate.setStatus("current")


class _SleBridgeInterfaceControlVlanToBeTranslated_Type(Integer32):
    """Custom type sleBridgeInterfaceControlVlanToBeTranslated based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_SleBridgeInterfaceControlVlanToBeTranslated_Type.__name__ = "Integer32"
_SleBridgeInterfaceControlVlanToBeTranslated_Object = MibScalar
sleBridgeInterfaceControlVlanToBeTranslated = _SleBridgeInterfaceControlVlanToBeTranslated_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2, 27),
    _SleBridgeInterfaceControlVlanToBeTranslated_Type()
)
sleBridgeInterfaceControlVlanToBeTranslated.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInterfaceControlVlanToBeTranslated.setStatus("current")
_SleBridgeInterfaceControlCVlanRegistraionName_Type = OctetString
_SleBridgeInterfaceControlCVlanRegistraionName_Object = MibScalar
sleBridgeInterfaceControlCVlanRegistraionName = _SleBridgeInterfaceControlCVlanRegistraionName_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2, 28),
    _SleBridgeInterfaceControlCVlanRegistraionName_Type()
)
sleBridgeInterfaceControlCVlanRegistraionName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInterfaceControlCVlanRegistraionName.setStatus("current")


class _SleBridgeInterfaceControlPEVlanId_Type(Integer32):
    """Custom type sleBridgeInterfaceControlPEVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_SleBridgeInterfaceControlPEVlanId_Type.__name__ = "Integer32"
_SleBridgeInterfaceControlPEVlanId_Object = MibScalar
sleBridgeInterfaceControlPEVlanId = _SleBridgeInterfaceControlPEVlanId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2, 29),
    _SleBridgeInterfaceControlPEVlanId_Type()
)
sleBridgeInterfaceControlPEVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInterfaceControlPEVlanId.setStatus("current")


class _SleBridgeInterfaceControlPEDefaultVlanId_Type(Integer32):
    """Custom type sleBridgeInterfaceControlPEDefaultVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_SleBridgeInterfaceControlPEDefaultVlanId_Type.__name__ = "Integer32"
_SleBridgeInterfaceControlPEDefaultVlanId_Object = MibScalar
sleBridgeInterfaceControlPEDefaultVlanId = _SleBridgeInterfaceControlPEDefaultVlanId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2, 30),
    _SleBridgeInterfaceControlPEDefaultVlanId_Type()
)
sleBridgeInterfaceControlPEDefaultVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInterfaceControlPEDefaultVlanId.setStatus("current")


class _SleBridgeInterfaceControlPEUntaggedVlanId_Type(Integer32):
    """Custom type sleBridgeInterfaceControlPEUntaggedVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_SleBridgeInterfaceControlPEUntaggedVlanId_Type.__name__ = "Integer32"
_SleBridgeInterfaceControlPEUntaggedVlanId_Object = MibScalar
sleBridgeInterfaceControlPEUntaggedVlanId = _SleBridgeInterfaceControlPEUntaggedVlanId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2, 31),
    _SleBridgeInterfaceControlPEUntaggedVlanId_Type()
)
sleBridgeInterfaceControlPEUntaggedVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInterfaceControlPEUntaggedVlanId.setStatus("current")


class _SleBridgeInterfaceControlPrivateVlanHostAssociationPrimaryVid_Type(Integer32):
    """Custom type sleBridgeInterfaceControlPrivateVlanHostAssociationPrimaryVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 4094),
    )


_SleBridgeInterfaceControlPrivateVlanHostAssociationPrimaryVid_Type.__name__ = "Integer32"
_SleBridgeInterfaceControlPrivateVlanHostAssociationPrimaryVid_Object = MibScalar
sleBridgeInterfaceControlPrivateVlanHostAssociationPrimaryVid = _SleBridgeInterfaceControlPrivateVlanHostAssociationPrimaryVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2, 32),
    _SleBridgeInterfaceControlPrivateVlanHostAssociationPrimaryVid_Type()
)
sleBridgeInterfaceControlPrivateVlanHostAssociationPrimaryVid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInterfaceControlPrivateVlanHostAssociationPrimaryVid.setStatus("current")


class _SleBridgeInterfaceControlPrivateVlanHostAssociationPvid_Type(Integer32):
    """Custom type sleBridgeInterfaceControlPrivateVlanHostAssociationPvid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 4094),
    )


_SleBridgeInterfaceControlPrivateVlanHostAssociationPvid_Type.__name__ = "Integer32"
_SleBridgeInterfaceControlPrivateVlanHostAssociationPvid_Object = MibScalar
sleBridgeInterfaceControlPrivateVlanHostAssociationPvid = _SleBridgeInterfaceControlPrivateVlanHostAssociationPvid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2, 33),
    _SleBridgeInterfaceControlPrivateVlanHostAssociationPvid_Type()
)
sleBridgeInterfaceControlPrivateVlanHostAssociationPvid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInterfaceControlPrivateVlanHostAssociationPvid.setStatus("current")


class _SleBridgeInterfaceControlPrivateVlanMappingPvid_Type(Integer32):
    """Custom type sleBridgeInterfaceControlPrivateVlanMappingPvid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 4094),
    )


_SleBridgeInterfaceControlPrivateVlanMappingPvid_Type.__name__ = "Integer32"
_SleBridgeInterfaceControlPrivateVlanMappingPvid_Object = MibScalar
sleBridgeInterfaceControlPrivateVlanMappingPvid = _SleBridgeInterfaceControlPrivateVlanMappingPvid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2, 34),
    _SleBridgeInterfaceControlPrivateVlanMappingPvid_Type()
)
sleBridgeInterfaceControlPrivateVlanMappingPvid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInterfaceControlPrivateVlanMappingPvid.setStatus("current")


class _SleBridgeInterfaceControlPrivateVlanMappingSecondaryVid_Type(Integer32):
    """Custom type sleBridgeInterfaceControlPrivateVlanMappingSecondaryVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 4094),
    )


_SleBridgeInterfaceControlPrivateVlanMappingSecondaryVid_Type.__name__ = "Integer32"
_SleBridgeInterfaceControlPrivateVlanMappingSecondaryVid_Object = MibScalar
sleBridgeInterfaceControlPrivateVlanMappingSecondaryVid = _SleBridgeInterfaceControlPrivateVlanMappingSecondaryVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2, 35),
    _SleBridgeInterfaceControlPrivateVlanMappingSecondaryVid_Type()
)
sleBridgeInterfaceControlPrivateVlanMappingSecondaryVid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInterfaceControlPrivateVlanMappingSecondaryVid.setStatus("current")
_SleBridgeInterfaceControlGroup_Type = Integer32
_SleBridgeInterfaceControlGroup_Object = MibScalar
sleBridgeInterfaceControlGroup = _SleBridgeInterfaceControlGroup_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2, 36),
    _SleBridgeInterfaceControlGroup_Type()
)
sleBridgeInterfaceControlGroup.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInterfaceControlGroup.setStatus("current")
_SleBridgeInterfaceControlGroupSpanningTree_Type = Integer32
_SleBridgeInterfaceControlGroupSpanningTree_Object = MibScalar
sleBridgeInterfaceControlGroupSpanningTree = _SleBridgeInterfaceControlGroupSpanningTree_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2, 37),
    _SleBridgeInterfaceControlGroupSpanningTree_Type()
)
sleBridgeInterfaceControlGroupSpanningTree.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInterfaceControlGroupSpanningTree.setStatus("current")


class _SleBridgeInterfaceControlProviderNetworkEtherType_Type(Integer32):
    """Custom type sleBridgeInterfaceControlProviderNetworkEtherType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("value0x88a8", 0),
          ("value0x8100", 1),
          ("value0x9100", 2))
    )


_SleBridgeInterfaceControlProviderNetworkEtherType_Type.__name__ = "Integer32"
_SleBridgeInterfaceControlProviderNetworkEtherType_Object = MibScalar
sleBridgeInterfaceControlProviderNetworkEtherType = _SleBridgeInterfaceControlProviderNetworkEtherType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 2, 38),
    _SleBridgeInterfaceControlProviderNetworkEtherType_Type()
)
sleBridgeInterfaceControlProviderNetworkEtherType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeInterfaceControlProviderNetworkEtherType.setStatus("current")
_SleBridgeInterfaceNotification_ObjectIdentity = ObjectIdentity
sleBridgeInterfaceNotification = _SleBridgeInterfaceNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 3)
)
_SleBridgeReservedVlan_ObjectIdentity = ObjectIdentity
sleBridgeReservedVlan = _SleBridgeReservedVlan_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 33)
)
_SleBridgeReservedVlanTable_Object = MibTable
sleBridgeReservedVlanTable = _SleBridgeReservedVlanTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 33, 1)
)
if mibBuilder.loadTexts:
    sleBridgeReservedVlanTable.setStatus("current")
_SleBridgeReservedVlanEntry_Object = MibTableRow
sleBridgeReservedVlanEntry = _SleBridgeReservedVlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 33, 1, 1)
)
sleBridgeReservedVlanEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleBridgeReservedVlanId"),
)
if mibBuilder.loadTexts:
    sleBridgeReservedVlanEntry.setStatus("current")


class _SleBridgeReservedVlanId_Type(Integer32):
    """Custom type sleBridgeReservedVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4096),
    )


_SleBridgeReservedVlanId_Type.__name__ = "Integer32"
_SleBridgeReservedVlanId_Object = MibTableColumn
sleBridgeReservedVlanId = _SleBridgeReservedVlanId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 33, 1, 1, 1),
    _SleBridgeReservedVlanId_Type()
)
sleBridgeReservedVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeReservedVlanId.setStatus("current")


class _SleBridgeReservedVlanIsUsed_Type(Integer32):
    """Custom type sleBridgeReservedVlanIsUsed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("used", 1))
    )


_SleBridgeReservedVlanIsUsed_Type.__name__ = "Integer32"
_SleBridgeReservedVlanIsUsed_Object = MibTableColumn
sleBridgeReservedVlanIsUsed = _SleBridgeReservedVlanIsUsed_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 33, 1, 1, 2),
    _SleBridgeReservedVlanIsUsed_Type()
)
sleBridgeReservedVlanIsUsed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeReservedVlanIsUsed.setStatus("current")
_SleBridgeReservedVlanControl_ObjectIdentity = ObjectIdentity
sleBridgeReservedVlanControl = _SleBridgeReservedVlanControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 33, 2)
)


class _SleBridgeReservedVlanControlRequest_Type(Integer32):
    """Custom type sleBridgeReservedVlanControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("addReservedVlan", 1),
          ("removeReservedVlan", 2))
    )


_SleBridgeReservedVlanControlRequest_Type.__name__ = "Integer32"
_SleBridgeReservedVlanControlRequest_Object = MibScalar
sleBridgeReservedVlanControlRequest = _SleBridgeReservedVlanControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 33, 2, 1),
    _SleBridgeReservedVlanControlRequest_Type()
)
sleBridgeReservedVlanControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeReservedVlanControlRequest.setStatus("current")
_SleBridgeReservedVlanControlStatus_Type = SleControlStatusType
_SleBridgeReservedVlanControlStatus_Object = MibScalar
sleBridgeReservedVlanControlStatus = _SleBridgeReservedVlanControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 33, 2, 2),
    _SleBridgeReservedVlanControlStatus_Type()
)
sleBridgeReservedVlanControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeReservedVlanControlStatus.setStatus("current")
_SleBridgeReservedVlanControlTimer_Type = Gauge32
_SleBridgeReservedVlanControlTimer_Object = MibScalar
sleBridgeReservedVlanControlTimer = _SleBridgeReservedVlanControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 33, 2, 3),
    _SleBridgeReservedVlanControlTimer_Type()
)
sleBridgeReservedVlanControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeReservedVlanControlTimer.setStatus("current")
_SleBridgeReservedVlanControlTimeStamp_Type = TimeTicks
_SleBridgeReservedVlanControlTimeStamp_Object = MibScalar
sleBridgeReservedVlanControlTimeStamp = _SleBridgeReservedVlanControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 33, 2, 4),
    _SleBridgeReservedVlanControlTimeStamp_Type()
)
sleBridgeReservedVlanControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeReservedVlanControlTimeStamp.setStatus("current")
_SleBridgeReservedVlanControlReqResult_Type = SleControlRequestResultType
_SleBridgeReservedVlanControlReqResult_Object = MibScalar
sleBridgeReservedVlanControlReqResult = _SleBridgeReservedVlanControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 33, 2, 5),
    _SleBridgeReservedVlanControlReqResult_Type()
)
sleBridgeReservedVlanControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeReservedVlanControlReqResult.setStatus("current")


class _SleBridgeReservedVlanControlStartVlanId_Type(Integer32):
    """Custom type sleBridgeReservedVlanControlStartVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_SleBridgeReservedVlanControlStartVlanId_Type.__name__ = "Integer32"
_SleBridgeReservedVlanControlStartVlanId_Object = MibScalar
sleBridgeReservedVlanControlStartVlanId = _SleBridgeReservedVlanControlStartVlanId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 33, 2, 6),
    _SleBridgeReservedVlanControlStartVlanId_Type()
)
sleBridgeReservedVlanControlStartVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeReservedVlanControlStartVlanId.setStatus("current")


class _SleBridgeReservedVlanControlEndVlanId_Type(Integer32):
    """Custom type sleBridgeReservedVlanControlEndVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_SleBridgeReservedVlanControlEndVlanId_Type.__name__ = "Integer32"
_SleBridgeReservedVlanControlEndVlanId_Object = MibScalar
sleBridgeReservedVlanControlEndVlanId = _SleBridgeReservedVlanControlEndVlanId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 33, 2, 7),
    _SleBridgeReservedVlanControlEndVlanId_Type()
)
sleBridgeReservedVlanControlEndVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleBridgeReservedVlanControlEndVlanId.setStatus("current")
_SleBridgeReservedVlanNotification_ObjectIdentity = ObjectIdentity
sleBridgeReservedVlanNotification = _SleBridgeReservedVlanNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 33, 3)
)
_SleBridgeInternalVlanTable_Object = MibTable
sleBridgeInternalVlanTable = _SleBridgeInternalVlanTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 33, 4)
)
if mibBuilder.loadTexts:
    sleBridgeInternalVlanTable.setStatus("current")
_SleBridgeInternalVlanEntry_Object = MibTableRow
sleBridgeInternalVlanEntry = _SleBridgeInternalVlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 33, 4, 1)
)
sleBridgeInternalVlanEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleBridgeInternalVlanSlot"),
    (0, "SLE-BRIDGE-MIB", "sleBridgeInternalVlanPort"),
    (0, "SLE-BRIDGE-MIB", "sleBridgeInternalVlanRealVlanId"),
)
if mibBuilder.loadTexts:
    sleBridgeInternalVlanEntry.setStatus("current")


class _SleBridgeInternalVlanSlot_Type(Integer32):
    """Custom type sleBridgeInternalVlanSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_SleBridgeInternalVlanSlot_Type.__name__ = "Integer32"
_SleBridgeInternalVlanSlot_Object = MibTableColumn
sleBridgeInternalVlanSlot = _SleBridgeInternalVlanSlot_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 33, 4, 1, 1),
    _SleBridgeInternalVlanSlot_Type()
)
sleBridgeInternalVlanSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInternalVlanSlot.setStatus("current")


class _SleBridgeInternalVlanPort_Type(Integer32):
    """Custom type sleBridgeInternalVlanPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleBridgeInternalVlanPort_Type.__name__ = "Integer32"
_SleBridgeInternalVlanPort_Object = MibTableColumn
sleBridgeInternalVlanPort = _SleBridgeInternalVlanPort_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 33, 4, 1, 2),
    _SleBridgeInternalVlanPort_Type()
)
sleBridgeInternalVlanPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInternalVlanPort.setStatus("current")


class _SleBridgeInternalVlanRealVlanId_Type(Integer32):
    """Custom type sleBridgeInternalVlanRealVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_SleBridgeInternalVlanRealVlanId_Type.__name__ = "Integer32"
_SleBridgeInternalVlanRealVlanId_Object = MibTableColumn
sleBridgeInternalVlanRealVlanId = _SleBridgeInternalVlanRealVlanId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 33, 4, 1, 3),
    _SleBridgeInternalVlanRealVlanId_Type()
)
sleBridgeInternalVlanRealVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInternalVlanRealVlanId.setStatus("current")


class _SleBridgeInternalVlanInternalVlanId_Type(Integer32):
    """Custom type sleBridgeInternalVlanInternalVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4096),
    )


_SleBridgeInternalVlanInternalVlanId_Type.__name__ = "Integer32"
_SleBridgeInternalVlanInternalVlanId_Object = MibTableColumn
sleBridgeInternalVlanInternalVlanId = _SleBridgeInternalVlanInternalVlanId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 33, 4, 1, 4),
    _SleBridgeInternalVlanInternalVlanId_Type()
)
sleBridgeInternalVlanInternalVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleBridgeInternalVlanInternalVlanId.setStatus("current")
_SleSubnetVlan6_ObjectIdentity = ObjectIdentity
sleSubnetVlan6 = _SleSubnetVlan6_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 34)
)
_SleSubnetVlan6Table_Object = MibTable
sleSubnetVlan6Table = _SleSubnetVlan6Table_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 34, 1)
)
if mibBuilder.loadTexts:
    sleSubnetVlan6Table.setStatus("current")
_SleSubnetVlan6Entry_Object = MibTableRow
sleSubnetVlan6Entry = _SleSubnetVlan6Entry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 34, 1, 1)
)
sleSubnetVlan6Entry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleSubnetVlan6Ip"),
    (0, "SLE-BRIDGE-MIB", "sleSubnetVlan6Mask"),
)
if mibBuilder.loadTexts:
    sleSubnetVlan6Entry.setStatus("current")
_SleSubnetVlan6Ip_Type = InetAddressIPv6
_SleSubnetVlan6Ip_Object = MibTableColumn
sleSubnetVlan6Ip = _SleSubnetVlan6Ip_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 34, 1, 1, 1),
    _SleSubnetVlan6Ip_Type()
)
sleSubnetVlan6Ip.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleSubnetVlan6Ip.setStatus("current")


class _SleSubnetVlan6Mask_Type(Integer32):
    """Custom type sleSubnetVlan6Mask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 64),
    )


_SleSubnetVlan6Mask_Type.__name__ = "Integer32"
_SleSubnetVlan6Mask_Object = MibTableColumn
sleSubnetVlan6Mask = _SleSubnetVlan6Mask_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 34, 1, 1, 2),
    _SleSubnetVlan6Mask_Type()
)
sleSubnetVlan6Mask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleSubnetVlan6Mask.setStatus("current")


class _SleSubnetVlan6Vid_Type(Integer32):
    """Custom type sleSubnetVlan6Vid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleSubnetVlan6Vid_Type.__name__ = "Integer32"
_SleSubnetVlan6Vid_Object = MibTableColumn
sleSubnetVlan6Vid = _SleSubnetVlan6Vid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 34, 1, 1, 3),
    _SleSubnetVlan6Vid_Type()
)
sleSubnetVlan6Vid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleSubnetVlan6Vid.setStatus("current")
_SleSubnetVlan6Control_ObjectIdentity = ObjectIdentity
sleSubnetVlan6Control = _SleSubnetVlan6Control_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 34, 2)
)


class _SleSubnetVlan6ControlRequest_Type(Integer32):
    """Custom type sleSubnetVlan6ControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("createSubnetVlan6", 1),
          ("destroySubnetVlan6", 2))
    )


_SleSubnetVlan6ControlRequest_Type.__name__ = "Integer32"
_SleSubnetVlan6ControlRequest_Object = MibScalar
sleSubnetVlan6ControlRequest = _SleSubnetVlan6ControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 34, 2, 1),
    _SleSubnetVlan6ControlRequest_Type()
)
sleSubnetVlan6ControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleSubnetVlan6ControlRequest.setStatus("current")
_SleSubnetVlan6ControlStatus_Type = SleControlStatusType
_SleSubnetVlan6ControlStatus_Object = MibScalar
sleSubnetVlan6ControlStatus = _SleSubnetVlan6ControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 34, 2, 2),
    _SleSubnetVlan6ControlStatus_Type()
)
sleSubnetVlan6ControlStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleSubnetVlan6ControlStatus.setStatus("current")
_SleSubnetVlan6ControlTimer_Type = Gauge32
_SleSubnetVlan6ControlTimer_Object = MibScalar
sleSubnetVlan6ControlTimer = _SleSubnetVlan6ControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 34, 2, 3),
    _SleSubnetVlan6ControlTimer_Type()
)
sleSubnetVlan6ControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleSubnetVlan6ControlTimer.setStatus("current")
_SleSubnetVlan6ControlTimeStamp_Type = TimeTicks
_SleSubnetVlan6ControlTimeStamp_Object = MibScalar
sleSubnetVlan6ControlTimeStamp = _SleSubnetVlan6ControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 34, 2, 4),
    _SleSubnetVlan6ControlTimeStamp_Type()
)
sleSubnetVlan6ControlTimeStamp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleSubnetVlan6ControlTimeStamp.setStatus("current")
_SleSubnetVlan6ControlReqResult_Type = SleControlRequestResultType
_SleSubnetVlan6ControlReqResult_Object = MibScalar
sleSubnetVlan6ControlReqResult = _SleSubnetVlan6ControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 34, 2, 5),
    _SleSubnetVlan6ControlReqResult_Type()
)
sleSubnetVlan6ControlReqResult.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleSubnetVlan6ControlReqResult.setStatus("current")
_SleSubnetVlan6ControlIp_Type = InetAddressIPv6
_SleSubnetVlan6ControlIp_Object = MibScalar
sleSubnetVlan6ControlIp = _SleSubnetVlan6ControlIp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 34, 2, 6),
    _SleSubnetVlan6ControlIp_Type()
)
sleSubnetVlan6ControlIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleSubnetVlan6ControlIp.setStatus("current")


class _SleSubnetVlan6ControlMask_Type(Integer32):
    """Custom type sleSubnetVlan6ControlMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 64),
    )


_SleSubnetVlan6ControlMask_Type.__name__ = "Integer32"
_SleSubnetVlan6ControlMask_Object = MibScalar
sleSubnetVlan6ControlMask = _SleSubnetVlan6ControlMask_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 34, 2, 7),
    _SleSubnetVlan6ControlMask_Type()
)
sleSubnetVlan6ControlMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleSubnetVlan6ControlMask.setStatus("current")


class _SleSubnetVlan6ControlVid_Type(Integer32):
    """Custom type sleSubnetVlan6ControlVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleSubnetVlan6ControlVid_Type.__name__ = "Integer32"
_SleSubnetVlan6ControlVid_Object = MibScalar
sleSubnetVlan6ControlVid = _SleSubnetVlan6ControlVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 34, 2, 8),
    _SleSubnetVlan6ControlVid_Type()
)
sleSubnetVlan6ControlVid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleSubnetVlan6ControlVid.setStatus("current")
_SleSubnetVlan6Notification_ObjectIdentity = ObjectIdentity
sleSubnetVlan6Notification = _SleSubnetVlan6Notification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 34, 3)
)
_Sle2MacAddress_ObjectIdentity = ObjectIdentity
sle2MacAddress = _Sle2MacAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 35)
)
_Sle2MacAddressTable_Object = MibTable
sle2MacAddressTable = _Sle2MacAddressTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 35, 1)
)
if mibBuilder.loadTexts:
    sle2MacAddressTable.setStatus("current")
_Sle2MacAddressEntry_Object = MibTableRow
sle2MacAddressEntry = _Sle2MacAddressEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 35, 1, 1)
)
sle2MacAddressEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sle2MacAddressEntryBridgeId"),
    (0, "SLE-BRIDGE-MIB", "sle2MacAddressEntryMacAddress"),
    (0, "SLE-BRIDGE-MIB", "sle2MacAddressEntryIfIndex"),
    (0, "SLE-BRIDGE-MIB", "sle2MacAddressEntryVid"),
)
if mibBuilder.loadTexts:
    sle2MacAddressEntry.setStatus("current")


class _Sle2MacAddressEntryBridgeId_Type(Integer32):
    """Custom type sle2MacAddressEntryBridgeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_Sle2MacAddressEntryBridgeId_Type.__name__ = "Integer32"
_Sle2MacAddressEntryBridgeId_Object = MibTableColumn
sle2MacAddressEntryBridgeId = _Sle2MacAddressEntryBridgeId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 35, 1, 1, 1),
    _Sle2MacAddressEntryBridgeId_Type()
)
sle2MacAddressEntryBridgeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2MacAddressEntryBridgeId.setStatus("current")
_Sle2MacAddressEntryMacAddress_Type = MacAddress
_Sle2MacAddressEntryMacAddress_Object = MibTableColumn
sle2MacAddressEntryMacAddress = _Sle2MacAddressEntryMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 35, 1, 1, 2),
    _Sle2MacAddressEntryMacAddress_Type()
)
sle2MacAddressEntryMacAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2MacAddressEntryMacAddress.setStatus("current")


class _Sle2MacAddressEntryIfIndex_Type(Integer32):
    """Custom type sle2MacAddressEntryIfIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_Sle2MacAddressEntryIfIndex_Type.__name__ = "Integer32"
_Sle2MacAddressEntryIfIndex_Object = MibTableColumn
sle2MacAddressEntryIfIndex = _Sle2MacAddressEntryIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 35, 1, 1, 3),
    _Sle2MacAddressEntryIfIndex_Type()
)
sle2MacAddressEntryIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2MacAddressEntryIfIndex.setStatus("current")


class _Sle2MacAddressEntryVid_Type(Integer32):
    """Custom type sle2MacAddressEntryVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_Sle2MacAddressEntryVid_Type.__name__ = "Integer32"
_Sle2MacAddressEntryVid_Object = MibTableColumn
sle2MacAddressEntryVid = _Sle2MacAddressEntryVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 35, 1, 1, 4),
    _Sle2MacAddressEntryVid_Type()
)
sle2MacAddressEntryVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2MacAddressEntryVid.setStatus("current")


class _Sle2MacAddressEntrySVid_Type(Integer32):
    """Custom type sle2MacAddressEntrySVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_Sle2MacAddressEntrySVid_Type.__name__ = "Integer32"
_Sle2MacAddressEntrySVid_Object = MibTableColumn
sle2MacAddressEntrySVid = _Sle2MacAddressEntrySVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 35, 1, 1, 5),
    _Sle2MacAddressEntrySVid_Type()
)
sle2MacAddressEntrySVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2MacAddressEntrySVid.setStatus("current")


class _Sle2MacAddressEntryMode_Type(Integer32):
    """Custom type sle2MacAddressEntryMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("static", 0),
          ("dynamic", 1))
    )


_Sle2MacAddressEntryMode_Type.__name__ = "Integer32"
_Sle2MacAddressEntryMode_Object = MibTableColumn
sle2MacAddressEntryMode = _Sle2MacAddressEntryMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 35, 1, 1, 6),
    _Sle2MacAddressEntryMode_Type()
)
sle2MacAddressEntryMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2MacAddressEntryMode.setStatus("current")


class _Sle2MacAddressEntryPermission_Type(Integer32):
    """Custom type sle2MacAddressEntryPermission based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("discard", 0),
          ("forward", 1))
    )


_Sle2MacAddressEntryPermission_Type.__name__ = "Integer32"
_Sle2MacAddressEntryPermission_Object = MibTableColumn
sle2MacAddressEntryPermission = _Sle2MacAddressEntryPermission_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 35, 1, 1, 7),
    _Sle2MacAddressEntryPermission_Type()
)
sle2MacAddressEntryPermission.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2MacAddressEntryPermission.setStatus("current")
_Sle2MacAddressEntryElapsedTime_Type = Unsigned32
_Sle2MacAddressEntryElapsedTime_Object = MibTableColumn
sle2MacAddressEntryElapsedTime = _Sle2MacAddressEntryElapsedTime_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 35, 1, 1, 8),
    _Sle2MacAddressEntryElapsedTime_Type()
)
sle2MacAddressEntryElapsedTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2MacAddressEntryElapsedTime.setStatus("current")
_Sle2MacAddressControl_ObjectIdentity = ObjectIdentity
sle2MacAddressControl = _Sle2MacAddressControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 35, 2)
)


class _Sle2MacAddressEntryControlRequest_Type(Integer32):
    """Custom type sle2MacAddressEntryControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("createMacAddressEntry", 1),
          ("destoryMacAddressEntry", 2),
          ("clearMacAddressTableEntries", 3))
    )


_Sle2MacAddressEntryControlRequest_Type.__name__ = "Integer32"
_Sle2MacAddressEntryControlRequest_Object = MibScalar
sle2MacAddressEntryControlRequest = _Sle2MacAddressEntryControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 35, 2, 1),
    _Sle2MacAddressEntryControlRequest_Type()
)
sle2MacAddressEntryControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2MacAddressEntryControlRequest.setStatus("current")
_Sle2MacAddressEntryControlStatus_Type = SleControlStatusType
_Sle2MacAddressEntryControlStatus_Object = MibScalar
sle2MacAddressEntryControlStatus = _Sle2MacAddressEntryControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 35, 2, 2),
    _Sle2MacAddressEntryControlStatus_Type()
)
sle2MacAddressEntryControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2MacAddressEntryControlStatus.setStatus("current")
_Sle2MacAddressEntryControlTimer_Type = Gauge32
_Sle2MacAddressEntryControlTimer_Object = MibScalar
sle2MacAddressEntryControlTimer = _Sle2MacAddressEntryControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 35, 2, 3),
    _Sle2MacAddressEntryControlTimer_Type()
)
sle2MacAddressEntryControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2MacAddressEntryControlTimer.setStatus("current")
_Sle2MacAddressEntryControlTimeStamp_Type = TimeTicks
_Sle2MacAddressEntryControlTimeStamp_Object = MibScalar
sle2MacAddressEntryControlTimeStamp = _Sle2MacAddressEntryControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 35, 2, 4),
    _Sle2MacAddressEntryControlTimeStamp_Type()
)
sle2MacAddressEntryControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2MacAddressEntryControlTimeStamp.setStatus("current")
_Sle2MacAddressEntryControlReqResult_Type = SleControlRequestResultType
_Sle2MacAddressEntryControlReqResult_Object = MibScalar
sle2MacAddressEntryControlReqResult = _Sle2MacAddressEntryControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 35, 2, 5),
    _Sle2MacAddressEntryControlReqResult_Type()
)
sle2MacAddressEntryControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2MacAddressEntryControlReqResult.setStatus("current")


class _Sle2MacAddressEntryControlBridgeId_Type(Integer32):
    """Custom type sle2MacAddressEntryControlBridgeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_Sle2MacAddressEntryControlBridgeId_Type.__name__ = "Integer32"
_Sle2MacAddressEntryControlBridgeId_Object = MibScalar
sle2MacAddressEntryControlBridgeId = _Sle2MacAddressEntryControlBridgeId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 35, 2, 6),
    _Sle2MacAddressEntryControlBridgeId_Type()
)
sle2MacAddressEntryControlBridgeId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2MacAddressEntryControlBridgeId.setStatus("current")
_Sle2MacAddressEntryControlMacAddress_Type = MacAddress
_Sle2MacAddressEntryControlMacAddress_Object = MibScalar
sle2MacAddressEntryControlMacAddress = _Sle2MacAddressEntryControlMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 35, 2, 7),
    _Sle2MacAddressEntryControlMacAddress_Type()
)
sle2MacAddressEntryControlMacAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2MacAddressEntryControlMacAddress.setStatus("current")
_Sle2MacAddressEntryControlIfIndex_Type = Integer32
_Sle2MacAddressEntryControlIfIndex_Object = MibScalar
sle2MacAddressEntryControlIfIndex = _Sle2MacAddressEntryControlIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 35, 2, 8),
    _Sle2MacAddressEntryControlIfIndex_Type()
)
sle2MacAddressEntryControlIfIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2MacAddressEntryControlIfIndex.setStatus("current")


class _Sle2MacAddressEntryControlVid_Type(Integer32):
    """Custom type sle2MacAddressEntryControlVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_Sle2MacAddressEntryControlVid_Type.__name__ = "Integer32"
_Sle2MacAddressEntryControlVid_Object = MibScalar
sle2MacAddressEntryControlVid = _Sle2MacAddressEntryControlVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 35, 2, 9),
    _Sle2MacAddressEntryControlVid_Type()
)
sle2MacAddressEntryControlVid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2MacAddressEntryControlVid.setStatus("current")


class _Sle2MacAddressEntryControlSVid_Type(Integer32):
    """Custom type sle2MacAddressEntryControlSVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_Sle2MacAddressEntryControlSVid_Type.__name__ = "Integer32"
_Sle2MacAddressEntryControlSVid_Object = MibScalar
sle2MacAddressEntryControlSVid = _Sle2MacAddressEntryControlSVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 35, 2, 10),
    _Sle2MacAddressEntryControlSVid_Type()
)
sle2MacAddressEntryControlSVid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2MacAddressEntryControlSVid.setStatus("current")


class _Sle2MacAddressEntryControlPermission_Type(Integer32):
    """Custom type sle2MacAddressEntryControlPermission based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("discard", 0),
          ("forward", 1))
    )


_Sle2MacAddressEntryControlPermission_Type.__name__ = "Integer32"
_Sle2MacAddressEntryControlPermission_Object = MibScalar
sle2MacAddressEntryControlPermission = _Sle2MacAddressEntryControlPermission_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 35, 2, 11),
    _Sle2MacAddressEntryControlPermission_Type()
)
sle2MacAddressEntryControlPermission.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2MacAddressEntryControlPermission.setStatus("current")


class _Sle2MacAddressEntryControlCVid_Type(Integer32):
    """Custom type sle2MacAddressEntryControlCVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_Sle2MacAddressEntryControlCVid_Type.__name__ = "Integer32"
_Sle2MacAddressEntryControlCVid_Object = MibScalar
sle2MacAddressEntryControlCVid = _Sle2MacAddressEntryControlCVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 35, 2, 12),
    _Sle2MacAddressEntryControlCVid_Type()
)
sle2MacAddressEntryControlCVid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2MacAddressEntryControlCVid.setStatus("current")


class _Sle2MacAddressEntryControlInstance_Type(Integer32):
    """Custom type sle2MacAddressEntryControlInstance based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 63),
    )


_Sle2MacAddressEntryControlInstance_Type.__name__ = "Integer32"
_Sle2MacAddressEntryControlInstance_Object = MibScalar
sle2MacAddressEntryControlInstance = _Sle2MacAddressEntryControlInstance_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 35, 2, 13),
    _Sle2MacAddressEntryControlInstance_Type()
)
sle2MacAddressEntryControlInstance.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2MacAddressEntryControlInstance.setStatus("current")


class _Sle2MacAddressEntryControlClearType_Type(Integer32):
    """Custom type sle2MacAddressEntryControlClearType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("dynamicAll", 0),
          ("dynamicAddress", 1),
          ("dynamicVlan", 2),
          ("dynamicInterface", 3),
          ("dynamicVlanInterface", 4),
          ("dynamicCvlanSvlan", 5),
          ("dynamicInstance", 6),
          ("staticAll", 7),
          ("staticAddress", 8),
          ("staticVlan", 9),
          ("staticInterface", 10),
          ("staticVlanInterface", 11),
          ("staticCvlanSvlan", 12),
          ("staticInstance", 13))
    )


_Sle2MacAddressEntryControlClearType_Type.__name__ = "Integer32"
_Sle2MacAddressEntryControlClearType_Object = MibScalar
sle2MacAddressEntryControlClearType = _Sle2MacAddressEntryControlClearType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 35, 2, 14),
    _Sle2MacAddressEntryControlClearType_Type()
)
sle2MacAddressEntryControlClearType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2MacAddressEntryControlClearType.setStatus("current")
_Sle2MacAddressNotification_ObjectIdentity = ObjectIdentity
sle2MacAddressNotification = _Sle2MacAddressNotification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 35, 3)
)
_SleCVlanRegistrationMap_ObjectIdentity = ObjectIdentity
sleCVlanRegistrationMap = _SleCVlanRegistrationMap_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 36)
)
_SleCVlanRegistrationMapTable_Object = MibTable
sleCVlanRegistrationMapTable = _SleCVlanRegistrationMapTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 36, 1)
)
if mibBuilder.loadTexts:
    sleCVlanRegistrationMapTable.setStatus("current")
_SleCVlanRegistrationMapEntry_Object = MibTableRow
sleCVlanRegistrationMapEntry = _SleCVlanRegistrationMapEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 36, 1, 1)
)
sleCVlanRegistrationMapEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleCVlanRegIndex"),
    (0, "SLE-BRIDGE-MIB", "sleCVlanIndex"),
)
if mibBuilder.loadTexts:
    sleCVlanRegistrationMapEntry.setStatus("current")


class _SleCVlanRegIndex_Type(Integer32):
    """Custom type sleCVlanRegIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleCVlanRegIndex_Type.__name__ = "Integer32"
_SleCVlanRegIndex_Object = MibTableColumn
sleCVlanRegIndex = _SleCVlanRegIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 36, 1, 1, 1),
    _SleCVlanRegIndex_Type()
)
sleCVlanRegIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleCVlanRegIndex.setStatus("current")


class _SleCVlanIndex_Type(Integer32):
    """Custom type sleCVlanIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4095),
    )


_SleCVlanIndex_Type.__name__ = "Integer32"
_SleCVlanIndex_Object = MibTableColumn
sleCVlanIndex = _SleCVlanIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 36, 1, 1, 2),
    _SleCVlanIndex_Type()
)
sleCVlanIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleCVlanIndex.setStatus("current")
_SleCVlanRegName_Type = OctetString
_SleCVlanRegName_Object = MibTableColumn
sleCVlanRegName = _SleCVlanRegName_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 36, 1, 1, 3),
    _SleCVlanRegName_Type()
)
sleCVlanRegName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleCVlanRegName.setStatus("current")
_SleSVlan_Type = Integer32
_SleSVlan_Object = MibTableColumn
sleSVlan = _SleSVlan_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 36, 1, 1, 4),
    _SleSVlan_Type()
)
sleSVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleSVlan.setStatus("current")
_SleUntaggedMap_Type = Integer32
_SleUntaggedMap_Object = MibTableColumn
sleUntaggedMap = _SleUntaggedMap_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 36, 1, 1, 5),
    _SleUntaggedMap_Type()
)
sleUntaggedMap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleUntaggedMap.setStatus("current")
_SleCVlanRegistrationMapControl_ObjectIdentity = ObjectIdentity
sleCVlanRegistrationMapControl = _SleCVlanRegistrationMapControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 36, 2)
)


class _SleCVlanRegistrationMapControlRequest_Type(Integer32):
    """Custom type sleCVlanRegistrationMapControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("createCvlanRegistration", 1),
          ("destroyCvlanRegistration", 2),
          ("setSvlanId", 3),
          ("unsetSvlanId", 4))
    )


_SleCVlanRegistrationMapControlRequest_Type.__name__ = "Integer32"
_SleCVlanRegistrationMapControlRequest_Object = MibScalar
sleCVlanRegistrationMapControlRequest = _SleCVlanRegistrationMapControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 36, 2, 1),
    _SleCVlanRegistrationMapControlRequest_Type()
)
sleCVlanRegistrationMapControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleCVlanRegistrationMapControlRequest.setStatus("current")
_SleCVlanRegistrationMapControlStatus_Type = SleControlStatusType
_SleCVlanRegistrationMapControlStatus_Object = MibScalar
sleCVlanRegistrationMapControlStatus = _SleCVlanRegistrationMapControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 36, 2, 2),
    _SleCVlanRegistrationMapControlStatus_Type()
)
sleCVlanRegistrationMapControlStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleCVlanRegistrationMapControlStatus.setStatus("current")
_SleCVlanRegistrationMapControlTimer_Type = Gauge32
_SleCVlanRegistrationMapControlTimer_Object = MibScalar
sleCVlanRegistrationMapControlTimer = _SleCVlanRegistrationMapControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 36, 2, 3),
    _SleCVlanRegistrationMapControlTimer_Type()
)
sleCVlanRegistrationMapControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleCVlanRegistrationMapControlTimer.setStatus("current")
_SleCVlanRegistrationMapControlTimeStamp_Type = TimeTicks
_SleCVlanRegistrationMapControlTimeStamp_Object = MibScalar
sleCVlanRegistrationMapControlTimeStamp = _SleCVlanRegistrationMapControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 36, 2, 4),
    _SleCVlanRegistrationMapControlTimeStamp_Type()
)
sleCVlanRegistrationMapControlTimeStamp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleCVlanRegistrationMapControlTimeStamp.setStatus("current")
_SleCVlanRegistrationMapControlReqResult_Type = SleControlRequestResultType
_SleCVlanRegistrationMapControlReqResult_Object = MibScalar
sleCVlanRegistrationMapControlReqResult = _SleCVlanRegistrationMapControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 36, 2, 5),
    _SleCVlanRegistrationMapControlReqResult_Type()
)
sleCVlanRegistrationMapControlReqResult.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleCVlanRegistrationMapControlReqResult.setStatus("current")


class _SleCVlanRegistrationMapControlCVlanID_Type(Integer32):
    """Custom type sleCVlanRegistrationMapControlCVlanID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleCVlanRegistrationMapControlCVlanID_Type.__name__ = "Integer32"
_SleCVlanRegistrationMapControlCVlanID_Object = MibScalar
sleCVlanRegistrationMapControlCVlanID = _SleCVlanRegistrationMapControlCVlanID_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 36, 2, 6),
    _SleCVlanRegistrationMapControlCVlanID_Type()
)
sleCVlanRegistrationMapControlCVlanID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleCVlanRegistrationMapControlCVlanID.setStatus("current")
_SleCVlanRegistrationMapControlName_Type = OctetString
_SleCVlanRegistrationMapControlName_Object = MibScalar
sleCVlanRegistrationMapControlName = _SleCVlanRegistrationMapControlName_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 36, 2, 7),
    _SleCVlanRegistrationMapControlName_Type()
)
sleCVlanRegistrationMapControlName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleCVlanRegistrationMapControlName.setStatus("current")


class _SleCVlanRegistrationMapControlSVlan_Type(Integer32):
    """Custom type sleCVlanRegistrationMapControlSVlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_SleCVlanRegistrationMapControlSVlan_Type.__name__ = "Integer32"
_SleCVlanRegistrationMapControlSVlan_Object = MibScalar
sleCVlanRegistrationMapControlSVlan = _SleCVlanRegistrationMapControlSVlan_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 36, 2, 8),
    _SleCVlanRegistrationMapControlSVlan_Type()
)
sleCVlanRegistrationMapControlSVlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleCVlanRegistrationMapControlSVlan.setStatus("current")


class _SleCVlanRegistrationMapControlFlagPort_Type(Integer32):
    """Custom type sleCVlanRegistrationMapControlFlagPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("untaggedPep", 1),
          ("untaggedCep", 2),
          ("both", 3))
    )


_SleCVlanRegistrationMapControlFlagPort_Type.__name__ = "Integer32"
_SleCVlanRegistrationMapControlFlagPort_Object = MibScalar
sleCVlanRegistrationMapControlFlagPort = _SleCVlanRegistrationMapControlFlagPort_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 36, 2, 9),
    _SleCVlanRegistrationMapControlFlagPort_Type()
)
sleCVlanRegistrationMapControlFlagPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleCVlanRegistrationMapControlFlagPort.setStatus("current")
_SleLacpBase_ObjectIdentity = ObjectIdentity
sleLacpBase = _SleLacpBase_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 37)
)
_SleLacpBaseInfo_ObjectIdentity = ObjectIdentity
sleLacpBaseInfo = _SleLacpBaseInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 37, 1)
)


class _SleLacpSystemPriority_Type(Integer32):
    """Custom type sleLacpSystemPriority based on Integer32"""
    defaultValue = 32768

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleLacpSystemPriority_Type.__name__ = "Integer32"
_SleLacpSystemPriority_Object = MibScalar
sleLacpSystemPriority = _SleLacpSystemPriority_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 37, 1, 1),
    _SleLacpSystemPriority_Type()
)
sleLacpSystemPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLacpSystemPriority.setStatus("current")
_SleLacpBaseControl_ObjectIdentity = ObjectIdentity
sleLacpBaseControl = _SleLacpBaseControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 37, 2)
)


class _SleLacpBaseControlRequest_Type(Integer32):
    """Custom type sleLacpBaseControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("setLacpSystemPriority", 1),
          ("clearLacpCounters", 2))
    )


_SleLacpBaseControlRequest_Type.__name__ = "Integer32"
_SleLacpBaseControlRequest_Object = MibScalar
sleLacpBaseControlRequest = _SleLacpBaseControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 37, 2, 1),
    _SleLacpBaseControlRequest_Type()
)
sleLacpBaseControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLacpBaseControlRequest.setStatus("current")
_SleLacpBaseControlStatus_Type = SleControlStatusType
_SleLacpBaseControlStatus_Object = MibScalar
sleLacpBaseControlStatus = _SleLacpBaseControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 37, 2, 2),
    _SleLacpBaseControlStatus_Type()
)
sleLacpBaseControlStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLacpBaseControlStatus.setStatus("current")
_SleLacpBaseControlTimer_Type = Gauge32
_SleLacpBaseControlTimer_Object = MibScalar
sleLacpBaseControlTimer = _SleLacpBaseControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 37, 2, 3),
    _SleLacpBaseControlTimer_Type()
)
sleLacpBaseControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLacpBaseControlTimer.setStatus("current")
_SleLacpBaseControlTimeStamp_Type = TimeTicks
_SleLacpBaseControlTimeStamp_Object = MibScalar
sleLacpBaseControlTimeStamp = _SleLacpBaseControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 37, 2, 4),
    _SleLacpBaseControlTimeStamp_Type()
)
sleLacpBaseControlTimeStamp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLacpBaseControlTimeStamp.setStatus("current")
_SleLacpBaseControlReqResult_Type = SleControlRequestResultType
_SleLacpBaseControlReqResult_Object = MibScalar
sleLacpBaseControlReqResult = _SleLacpBaseControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 37, 2, 5),
    _SleLacpBaseControlReqResult_Type()
)
sleLacpBaseControlReqResult.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLacpBaseControlReqResult.setStatus("current")


class _SleLacpBaseControlSystemPriority_Type(Integer32):
    """Custom type sleLacpBaseControlSystemPriority based on Integer32"""
    defaultValue = 32768

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleLacpBaseControlSystemPriority_Type.__name__ = "Integer32"
_SleLacpBaseControlSystemPriority_Object = MibScalar
sleLacpBaseControlSystemPriority = _SleLacpBaseControlSystemPriority_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 37, 2, 6),
    _SleLacpBaseControlSystemPriority_Type()
)
sleLacpBaseControlSystemPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLacpBaseControlSystemPriority.setStatus("current")


class _SleLacpBaseControlAggregatorId_Type(Integer32):
    """Custom type sleLacpBaseControlAggregatorId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_SleLacpBaseControlAggregatorId_Type.__name__ = "Integer32"
_SleLacpBaseControlAggregatorId_Object = MibScalar
sleLacpBaseControlAggregatorId = _SleLacpBaseControlAggregatorId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 37, 2, 7),
    _SleLacpBaseControlAggregatorId_Type()
)
sleLacpBaseControlAggregatorId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLacpBaseControlAggregatorId.setStatus("current")
_SleLacpInterface_ObjectIdentity = ObjectIdentity
sleLacpInterface = _SleLacpInterface_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 38)
)
_SleLacpInterfaceTable_Object = MibTable
sleLacpInterfaceTable = _SleLacpInterfaceTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 38, 1)
)
if mibBuilder.loadTexts:
    sleLacpInterfaceTable.setStatus("current")
_SleLacpInterfaceEntry_Object = MibTableRow
sleLacpInterfaceEntry = _SleLacpInterfaceEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 38, 1, 1)
)
sleLacpInterfaceEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sleLacpInterfaceIndex"),
)
if mibBuilder.loadTexts:
    sleLacpInterfaceEntry.setStatus("current")
_SleLacpInterfaceIndex_Type = InterfaceIndex
_SleLacpInterfaceIndex_Object = MibTableColumn
sleLacpInterfaceIndex = _SleLacpInterfaceIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 38, 1, 1, 1),
    _SleLacpInterfaceIndex_Type()
)
sleLacpInterfaceIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLacpInterfaceIndex.setStatus("current")
_SleLacpInterfaceName_Type = OctetString
_SleLacpInterfaceName_Object = MibTableColumn
sleLacpInterfaceName = _SleLacpInterfaceName_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 38, 1, 1, 2),
    _SleLacpInterfaceName_Type()
)
sleLacpInterfaceName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLacpInterfaceName.setStatus("current")
_SleLacpInterfaceActorPriority_Type = Integer32
_SleLacpInterfaceActorPriority_Object = MibTableColumn
sleLacpInterfaceActorPriority = _SleLacpInterfaceActorPriority_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 38, 1, 1, 3),
    _SleLacpInterfaceActorPriority_Type()
)
sleLacpInterfaceActorPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLacpInterfaceActorPriority.setStatus("current")


class _SleLacpInterfaceActorAdminKey_Type(Integer32):
    """Custom type sleLacpInterfaceActorAdminKey based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleLacpInterfaceActorAdminKey_Type.__name__ = "Integer32"
_SleLacpInterfaceActorAdminKey_Object = MibTableColumn
sleLacpInterfaceActorAdminKey = _SleLacpInterfaceActorAdminKey_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 38, 1, 1, 4),
    _SleLacpInterfaceActorAdminKey_Type()
)
sleLacpInterfaceActorAdminKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLacpInterfaceActorAdminKey.setStatus("current")


class _SleLacpInterfaceActorAdminState_Type(Bits):
    """Custom type sleLacpInterfaceActorAdminState based on Bits"""
    namedValues = NamedValues(
        *(("expired", 0),
          ("defaulted", 1),
          ("destributing", 2),
          ("collecting", 3),
          ("synchronization", 4),
          ("aggregation", 5),
          ("lacpTimeout", 6),
          ("lacpActivity", 7))
    )

_SleLacpInterfaceActorAdminState_Type.__name__ = "Bits"
_SleLacpInterfaceActorAdminState_Object = MibTableColumn
sleLacpInterfaceActorAdminState = _SleLacpInterfaceActorAdminState_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 38, 1, 1, 5),
    _SleLacpInterfaceActorAdminState_Type()
)
sleLacpInterfaceActorAdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLacpInterfaceActorAdminState.setStatus("current")


class _SleLacpInterfaceDestinationMac_Type(Integer32):
    """Custom type sleLacpInterfaceDestinationMac based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("customer", 1),
          ("multicast", 2),
          ("nonTmpr", 3))
    )


_SleLacpInterfaceDestinationMac_Type.__name__ = "Integer32"
_SleLacpInterfaceDestinationMac_Object = MibTableColumn
sleLacpInterfaceDestinationMac = _SleLacpInterfaceDestinationMac_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 38, 1, 1, 6),
    _SleLacpInterfaceDestinationMac_Type()
)
sleLacpInterfaceDestinationMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLacpInterfaceDestinationMac.setStatus("current")


class _SleLacpInterfaceDiscardWrongConversation_Type(Integer32):
    """Custom type sleLacpInterfaceDiscardWrongConversation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleLacpInterfaceDiscardWrongConversation_Type.__name__ = "Integer32"
_SleLacpInterfaceDiscardWrongConversation_Object = MibTableColumn
sleLacpInterfaceDiscardWrongConversation = _SleLacpInterfaceDiscardWrongConversation_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 38, 1, 1, 7),
    _SleLacpInterfaceDiscardWrongConversation_Type()
)
sleLacpInterfaceDiscardWrongConversation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLacpInterfaceDiscardWrongConversation.setStatus("current")


class _SleLacpInterfaceTimeout_Type(Integer32):
    """Custom type sleLacpInterfaceTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("short", 1),
          ("long", 2))
    )


_SleLacpInterfaceTimeout_Type.__name__ = "Integer32"
_SleLacpInterfaceTimeout_Object = MibTableColumn
sleLacpInterfaceTimeout = _SleLacpInterfaceTimeout_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 38, 1, 1, 8),
    _SleLacpInterfaceTimeout_Type()
)
sleLacpInterfaceTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLacpInterfaceTimeout.setStatus("current")


class _SleLacpInterfaceActiveLink_Type(Integer32):
    """Custom type sleLacpInterfaceActiveLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleLacpInterfaceActiveLink_Type.__name__ = "Integer32"
_SleLacpInterfaceActiveLink_Object = MibTableColumn
sleLacpInterfaceActiveLink = _SleLacpInterfaceActiveLink_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 38, 1, 1, 9),
    _SleLacpInterfaceActiveLink_Type()
)
sleLacpInterfaceActiveLink.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleLacpInterfaceActiveLink.setStatus("current")
_SleLacpInterfaceControl_ObjectIdentity = ObjectIdentity
sleLacpInterfaceControl = _SleLacpInterfaceControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 38, 2)
)


class _SleLacpInterfaceControlRequest_Type(Integer32):
    """Custom type sleLacpInterfaceControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("setLacpPriority", 1),
          ("setLacpTimeout", 2),
          ("setLacpDestMac", 3),
          ("setLacpDwc", 4),
          ("setLacpActiveLink", 5))
    )


_SleLacpInterfaceControlRequest_Type.__name__ = "Integer32"
_SleLacpInterfaceControlRequest_Object = MibScalar
sleLacpInterfaceControlRequest = _SleLacpInterfaceControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 38, 2, 1),
    _SleLacpInterfaceControlRequest_Type()
)
sleLacpInterfaceControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLacpInterfaceControlRequest.setStatus("current")
_SleLacpInterfaceControlStatus_Type = SleControlStatusType
_SleLacpInterfaceControlStatus_Object = MibScalar
sleLacpInterfaceControlStatus = _SleLacpInterfaceControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 38, 2, 2),
    _SleLacpInterfaceControlStatus_Type()
)
sleLacpInterfaceControlStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLacpInterfaceControlStatus.setStatus("current")
_SleLacpInterfaceControlTimer_Type = Gauge32
_SleLacpInterfaceControlTimer_Object = MibScalar
sleLacpInterfaceControlTimer = _SleLacpInterfaceControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 38, 2, 3),
    _SleLacpInterfaceControlTimer_Type()
)
sleLacpInterfaceControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLacpInterfaceControlTimer.setStatus("current")
_SleLacpInterfaceControlTimeStamp_Type = TimeTicks
_SleLacpInterfaceControlTimeStamp_Object = MibScalar
sleLacpInterfaceControlTimeStamp = _SleLacpInterfaceControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 38, 2, 4),
    _SleLacpInterfaceControlTimeStamp_Type()
)
sleLacpInterfaceControlTimeStamp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLacpInterfaceControlTimeStamp.setStatus("current")
_SleLacpInterfaceControlReqResult_Type = SleControlRequestResultType
_SleLacpInterfaceControlReqResult_Object = MibScalar
sleLacpInterfaceControlReqResult = _SleLacpInterfaceControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 38, 2, 5),
    _SleLacpInterfaceControlReqResult_Type()
)
sleLacpInterfaceControlReqResult.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLacpInterfaceControlReqResult.setStatus("current")
_SleLacpInterfaceControlIndex_Type = InterfaceIndex
_SleLacpInterfaceControlIndex_Object = MibScalar
sleLacpInterfaceControlIndex = _SleLacpInterfaceControlIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 38, 2, 6),
    _SleLacpInterfaceControlIndex_Type()
)
sleLacpInterfaceControlIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLacpInterfaceControlIndex.setStatus("current")


class _SleLacpInterfaceControlPriority_Type(Integer32):
    """Custom type sleLacpInterfaceControlPriority based on Integer32"""
    defaultValue = 32768

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleLacpInterfaceControlPriority_Type.__name__ = "Integer32"
_SleLacpInterfaceControlPriority_Object = MibScalar
sleLacpInterfaceControlPriority = _SleLacpInterfaceControlPriority_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 38, 2, 7),
    _SleLacpInterfaceControlPriority_Type()
)
sleLacpInterfaceControlPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLacpInterfaceControlPriority.setStatus("current")


class _SleLacpInterfaceControlTimeout_Type(Integer32):
    """Custom type sleLacpInterfaceControlTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("short", 1),
          ("long", 2))
    )


_SleLacpInterfaceControlTimeout_Type.__name__ = "Integer32"
_SleLacpInterfaceControlTimeout_Object = MibScalar
sleLacpInterfaceControlTimeout = _SleLacpInterfaceControlTimeout_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 38, 2, 8),
    _SleLacpInterfaceControlTimeout_Type()
)
sleLacpInterfaceControlTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLacpInterfaceControlTimeout.setStatus("current")


class _SleLacpInterfaceControlDestinationMac_Type(Integer32):
    """Custom type sleLacpInterfaceControlDestinationMac based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("customer", 1),
          ("multicast", 2),
          ("nonTmpr", 3))
    )


_SleLacpInterfaceControlDestinationMac_Type.__name__ = "Integer32"
_SleLacpInterfaceControlDestinationMac_Object = MibScalar
sleLacpInterfaceControlDestinationMac = _SleLacpInterfaceControlDestinationMac_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 38, 2, 9),
    _SleLacpInterfaceControlDestinationMac_Type()
)
sleLacpInterfaceControlDestinationMac.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLacpInterfaceControlDestinationMac.setStatus("current")


class _SleLacpInterfaceControlDiscardWrongConversation_Type(Integer32):
    """Custom type sleLacpInterfaceControlDiscardWrongConversation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SleLacpInterfaceControlDiscardWrongConversation_Type.__name__ = "Integer32"
_SleLacpInterfaceControlDiscardWrongConversation_Object = MibScalar
sleLacpInterfaceControlDiscardWrongConversation = _SleLacpInterfaceControlDiscardWrongConversation_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 38, 2, 10),
    _SleLacpInterfaceControlDiscardWrongConversation_Type()
)
sleLacpInterfaceControlDiscardWrongConversation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLacpInterfaceControlDiscardWrongConversation.setStatus("current")


class _SleLacpInterfaceControlActiveLink_Type(Integer32):
    """Custom type sleLacpInterfaceControlActiveLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SleLacpInterfaceControlActiveLink_Type.__name__ = "Integer32"
_SleLacpInterfaceControlActiveLink_Object = MibScalar
sleLacpInterfaceControlActiveLink = _SleLacpInterfaceControlActiveLink_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 38, 2, 11),
    _SleLacpInterfaceControlActiveLink_Type()
)
sleLacpInterfaceControlActiveLink.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleLacpInterfaceControlActiveLink.setStatus("current")
_Sle2LldpGlobal_ObjectIdentity = ObjectIdentity
sle2LldpGlobal = _Sle2LldpGlobal_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 39)
)
_Sle2LldpGlobalTable_Object = MibTable
sle2LldpGlobalTable = _Sle2LldpGlobalTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 39, 1)
)
if mibBuilder.loadTexts:
    sle2LldpGlobalTable.setStatus("current")
_Sle2LldpGlobalEntry_Object = MibTableRow
sle2LldpGlobalEntry = _Sle2LldpGlobalEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 39, 1, 1)
)
sle2LldpGlobalEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sle2LldpGlobalIfIndex"),
)
if mibBuilder.loadTexts:
    sle2LldpGlobalEntry.setStatus("current")
_Sle2LldpGlobalIfIndex_Type = InterfaceIndex
_Sle2LldpGlobalIfIndex_Object = MibTableColumn
sle2LldpGlobalIfIndex = _Sle2LldpGlobalIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 39, 1, 1, 1),
    _Sle2LldpGlobalIfIndex_Type()
)
sle2LldpGlobalIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpGlobalIfIndex.setStatus("current")
_Sle2LldpGlobalAgtCircuitId_Type = OctetString
_Sle2LldpGlobalAgtCircuitId_Object = MibTableColumn
sle2LldpGlobalAgtCircuitId = _Sle2LldpGlobalAgtCircuitId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 39, 1, 1, 2),
    _Sle2LldpGlobalAgtCircuitId_Type()
)
sle2LldpGlobalAgtCircuitId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpGlobalAgtCircuitId.setStatus("current")


class _Sle2LldpGlobalMedDevType_Type(Integer32):
    """Custom type sle2LldpGlobalMedDevType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("epclass1", 1),
          ("epclass2", 2),
          ("epclass3", 3),
          ("netconnect", 4))
    )


_Sle2LldpGlobalMedDevType_Type.__name__ = "Integer32"
_Sle2LldpGlobalMedDevType_Object = MibTableColumn
sle2LldpGlobalMedDevType = _Sle2LldpGlobalMedDevType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 39, 1, 1, 3),
    _Sle2LldpGlobalMedDevType_Type()
)
sle2LldpGlobalMedDevType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpGlobalMedDevType.setStatus("current")
_Sle2LldpGlobalPortDescription_Type = OctetString
_Sle2LldpGlobalPortDescription_Object = MibTableColumn
sle2LldpGlobalPortDescription = _Sle2LldpGlobalPortDescription_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 39, 1, 1, 4),
    _Sle2LldpGlobalPortDescription_Type()
)
sle2LldpGlobalPortDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpGlobalPortDescription.setStatus("current")
_Sle2LldpGlobalControl_ObjectIdentity = ObjectIdentity
sle2LldpGlobalControl = _Sle2LldpGlobalControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 39, 2)
)


class _Sle2LldpGlobalControlRequest_Type(Integer32):
    """Custom type sle2LldpGlobalControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("setLldpGlobal", 1),
          ("unsetLldpGlobalMedDevType", 2))
    )


_Sle2LldpGlobalControlRequest_Type.__name__ = "Integer32"
_Sle2LldpGlobalControlRequest_Object = MibScalar
sle2LldpGlobalControlRequest = _Sle2LldpGlobalControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 39, 2, 1),
    _Sle2LldpGlobalControlRequest_Type()
)
sle2LldpGlobalControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpGlobalControlRequest.setStatus("current")
_Sle2LldpGlobalControlStatus_Type = SleControlStatusType
_Sle2LldpGlobalControlStatus_Object = MibScalar
sle2LldpGlobalControlStatus = _Sle2LldpGlobalControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 39, 2, 2),
    _Sle2LldpGlobalControlStatus_Type()
)
sle2LldpGlobalControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpGlobalControlStatus.setStatus("current")
_Sle2LldpGlobalControlTimer_Type = Gauge32
_Sle2LldpGlobalControlTimer_Object = MibScalar
sle2LldpGlobalControlTimer = _Sle2LldpGlobalControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 39, 2, 3),
    _Sle2LldpGlobalControlTimer_Type()
)
sle2LldpGlobalControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpGlobalControlTimer.setStatus("current")
_Sle2LldpGlobalControlTimeStamp_Type = TimeTicks
_Sle2LldpGlobalControlTimeStamp_Object = MibScalar
sle2LldpGlobalControlTimeStamp = _Sle2LldpGlobalControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 39, 2, 4),
    _Sle2LldpGlobalControlTimeStamp_Type()
)
sle2LldpGlobalControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpGlobalControlTimeStamp.setStatus("current")
_Sle2LldpGlobalControlReqResult_Type = SleControlRequestResultType
_Sle2LldpGlobalControlReqResult_Object = MibScalar
sle2LldpGlobalControlReqResult = _Sle2LldpGlobalControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 39, 2, 5),
    _Sle2LldpGlobalControlReqResult_Type()
)
sle2LldpGlobalControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpGlobalControlReqResult.setStatus("current")
_Sle2LldpGlobalControlIfIndex_Type = InterfaceIndex
_Sle2LldpGlobalControlIfIndex_Object = MibScalar
sle2LldpGlobalControlIfIndex = _Sle2LldpGlobalControlIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 39, 2, 6),
    _Sle2LldpGlobalControlIfIndex_Type()
)
sle2LldpGlobalControlIfIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpGlobalControlIfIndex.setStatus("current")
_Sle2LldpGlobalControlAgtCircuitId_Type = OctetString
_Sle2LldpGlobalControlAgtCircuitId_Object = MibScalar
sle2LldpGlobalControlAgtCircuitId = _Sle2LldpGlobalControlAgtCircuitId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 39, 2, 7),
    _Sle2LldpGlobalControlAgtCircuitId_Type()
)
sle2LldpGlobalControlAgtCircuitId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpGlobalControlAgtCircuitId.setStatus("current")


class _Sle2LldpGlobalControlMedDevType_Type(Integer32):
    """Custom type sle2LldpGlobalControlMedDevType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("epclass1", 1),
          ("epclass2", 2),
          ("epclass3", 3),
          ("netconnect", 4))
    )


_Sle2LldpGlobalControlMedDevType_Type.__name__ = "Integer32"
_Sle2LldpGlobalControlMedDevType_Object = MibScalar
sle2LldpGlobalControlMedDevType = _Sle2LldpGlobalControlMedDevType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 39, 2, 8),
    _Sle2LldpGlobalControlMedDevType_Type()
)
sle2LldpGlobalControlMedDevType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpGlobalControlMedDevType.setStatus("current")
_Sle2LldpGlobalControlPortDescription_Type = OctetString
_Sle2LldpGlobalControlPortDescription_Object = MibScalar
sle2LldpGlobalControlPortDescription = _Sle2LldpGlobalControlPortDescription_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 39, 2, 9),
    _Sle2LldpGlobalControlPortDescription_Type()
)
sle2LldpGlobalControlPortDescription.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpGlobalControlPortDescription.setStatus("current")
_Sle2LldpParameters_ObjectIdentity = ObjectIdentity
sle2LldpParameters = _Sle2LldpParameters_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40)
)
_Sle2LldpParametersTable_Object = MibTable
sle2LldpParametersTable = _Sle2LldpParametersTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 1)
)
if mibBuilder.loadTexts:
    sle2LldpParametersTable.setStatus("current")
_Sle2LldpParametersEntry_Object = MibTableRow
sle2LldpParametersEntry = _Sle2LldpParametersEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 1, 1)
)
sle2LldpParametersEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sle2LldpParamIfIndex"),
    (0, "SLE-BRIDGE-MIB", "sle2LldpParamAgentMode"),
)
if mibBuilder.loadTexts:
    sle2LldpParametersEntry.setStatus("current")
_Sle2LldpParamIfIndex_Type = InterfaceIndex
_Sle2LldpParamIfIndex_Object = MibTableColumn
sle2LldpParamIfIndex = _Sle2LldpParamIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 1, 1, 1),
    _Sle2LldpParamIfIndex_Type()
)
sle2LldpParamIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpParamIfIndex.setStatus("current")


class _Sle2LldpParamAgentMode_Type(Integer32):
    """Custom type sle2LldpParamAgentMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("nearest", 1),
          ("nontpmr", 2),
          ("customer", 3))
    )


_Sle2LldpParamAgentMode_Type.__name__ = "Integer32"
_Sle2LldpParamAgentMode_Object = MibTableColumn
sle2LldpParamAgentMode = _Sle2LldpParamAgentMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 1, 1, 2),
    _Sle2LldpParamAgentMode_Type()
)
sle2LldpParamAgentMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpParamAgentMode.setStatus("current")


class _Sle2LldpParamBacManagementAddress_Type(Integer32):
    """Custom type sle2LldpParamBacManagementAddress based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Sle2LldpParamBacManagementAddress_Type.__name__ = "Integer32"
_Sle2LldpParamBacManagementAddress_Object = MibTableColumn
sle2LldpParamBacManagementAddress = _Sle2LldpParamBacManagementAddress_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 1, 1, 3),
    _Sle2LldpParamBacManagementAddress_Type()
)
sle2LldpParamBacManagementAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpParamBacManagementAddress.setStatus("current")


class _Sle2LldpParamBacPortDescription_Type(Integer32):
    """Custom type sle2LldpParamBacPortDescription based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Sle2LldpParamBacPortDescription_Type.__name__ = "Integer32"
_Sle2LldpParamBacPortDescription_Object = MibTableColumn
sle2LldpParamBacPortDescription = _Sle2LldpParamBacPortDescription_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 1, 1, 4),
    _Sle2LldpParamBacPortDescription_Type()
)
sle2LldpParamBacPortDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpParamBacPortDescription.setStatus("current")


class _Sle2LldpParamBacSystemCapabilities_Type(Integer32):
    """Custom type sle2LldpParamBacSystemCapabilities based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Sle2LldpParamBacSystemCapabilities_Type.__name__ = "Integer32"
_Sle2LldpParamBacSystemCapabilities_Object = MibTableColumn
sle2LldpParamBacSystemCapabilities = _Sle2LldpParamBacSystemCapabilities_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 1, 1, 5),
    _Sle2LldpParamBacSystemCapabilities_Type()
)
sle2LldpParamBacSystemCapabilities.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpParamBacSystemCapabilities.setStatus("current")


class _Sle2LldpParamBacSystemDescription_Type(Integer32):
    """Custom type sle2LldpParamBacSystemDescription based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Sle2LldpParamBacSystemDescription_Type.__name__ = "Integer32"
_Sle2LldpParamBacSystemDescription_Object = MibTableColumn
sle2LldpParamBacSystemDescription = _Sle2LldpParamBacSystemDescription_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 1, 1, 6),
    _Sle2LldpParamBacSystemDescription_Type()
)
sle2LldpParamBacSystemDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpParamBacSystemDescription.setStatus("current")


class _Sle2LldpParamBacSystemName_Type(Integer32):
    """Custom type sle2LldpParamBacSystemName based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Sle2LldpParamBacSystemName_Type.__name__ = "Integer32"
_Sle2LldpParamBacSystemName_Object = MibTableColumn
sle2LldpParamBacSystemName = _Sle2LldpParamBacSystemName_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 1, 1, 7),
    _Sle2LldpParamBacSystemName_Type()
)
sle2LldpParamBacSystemName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpParamBacSystemName.setStatus("current")


class _Sle2LldpParamI8021LinkAgg_Type(Integer32):
    """Custom type sle2LldpParamI8021LinkAgg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Sle2LldpParamI8021LinkAgg_Type.__name__ = "Integer32"
_Sle2LldpParamI8021LinkAgg_Object = MibTableColumn
sle2LldpParamI8021LinkAgg = _Sle2LldpParamI8021LinkAgg_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 1, 1, 8),
    _Sle2LldpParamI8021LinkAgg_Type()
)
sle2LldpParamI8021LinkAgg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpParamI8021LinkAgg.setStatus("current")


class _Sle2LldpParamI8021MgmtVid_Type(Integer32):
    """Custom type sle2LldpParamI8021MgmtVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Sle2LldpParamI8021MgmtVid_Type.__name__ = "Integer32"
_Sle2LldpParamI8021MgmtVid_Object = MibTableColumn
sle2LldpParamI8021MgmtVid = _Sle2LldpParamI8021MgmtVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 1, 1, 9),
    _Sle2LldpParamI8021MgmtVid_Type()
)
sle2LldpParamI8021MgmtVid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpParamI8021MgmtVid.setStatus("current")


class _Sle2LldpParamI8021PortPtclVlanid_Type(Integer32):
    """Custom type sle2LldpParamI8021PortPtclVlanid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Sle2LldpParamI8021PortPtclVlanid_Type.__name__ = "Integer32"
_Sle2LldpParamI8021PortPtclVlanid_Object = MibTableColumn
sle2LldpParamI8021PortPtclVlanid = _Sle2LldpParamI8021PortPtclVlanid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 1, 1, 10),
    _Sle2LldpParamI8021PortPtclVlanid_Type()
)
sle2LldpParamI8021PortPtclVlanid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpParamI8021PortPtclVlanid.setStatus("current")


class _Sle2LldpParamI8021PortVlanid_Type(Integer32):
    """Custom type sle2LldpParamI8021PortVlanid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Sle2LldpParamI8021PortVlanid_Type.__name__ = "Integer32"
_Sle2LldpParamI8021PortVlanid_Object = MibTableColumn
sle2LldpParamI8021PortVlanid = _Sle2LldpParamI8021PortVlanid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 1, 1, 11),
    _Sle2LldpParamI8021PortVlanid_Type()
)
sle2LldpParamI8021PortVlanid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpParamI8021PortVlanid.setStatus("current")


class _Sle2LldpParamI8021PtclIdentity_Type(Integer32):
    """Custom type sle2LldpParamI8021PtclIdentity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Sle2LldpParamI8021PtclIdentity_Type.__name__ = "Integer32"
_Sle2LldpParamI8021PtclIdentity_Object = MibTableColumn
sle2LldpParamI8021PtclIdentity = _Sle2LldpParamI8021PtclIdentity_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 1, 1, 12),
    _Sle2LldpParamI8021PtclIdentity_Type()
)
sle2LldpParamI8021PtclIdentity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpParamI8021PtclIdentity.setStatus("current")


class _Sle2LldpParamI8021VidDigest_Type(Integer32):
    """Custom type sle2LldpParamI8021VidDigest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Sle2LldpParamI8021VidDigest_Type.__name__ = "Integer32"
_Sle2LldpParamI8021VidDigest_Object = MibTableColumn
sle2LldpParamI8021VidDigest = _Sle2LldpParamI8021VidDigest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 1, 1, 13),
    _Sle2LldpParamI8021VidDigest_Type()
)
sle2LldpParamI8021VidDigest.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpParamI8021VidDigest.setStatus("current")


class _Sle2LldpParamI8021VlanName_Type(Integer32):
    """Custom type sle2LldpParamI8021VlanName based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Sle2LldpParamI8021VlanName_Type.__name__ = "Integer32"
_Sle2LldpParamI8021VlanName_Object = MibTableColumn
sle2LldpParamI8021VlanName = _Sle2LldpParamI8021VlanName_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 1, 1, 14),
    _Sle2LldpParamI8021VlanName_Type()
)
sle2LldpParamI8021VlanName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpParamI8021VlanName.setStatus("current")


class _Sle2LldpParamI8023MacPhy_Type(Integer32):
    """Custom type sle2LldpParamI8023MacPhy based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Sle2LldpParamI8023MacPhy_Type.__name__ = "Integer32"
_Sle2LldpParamI8023MacPhy_Object = MibTableColumn
sle2LldpParamI8023MacPhy = _Sle2LldpParamI8023MacPhy_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 1, 1, 15),
    _Sle2LldpParamI8023MacPhy_Type()
)
sle2LldpParamI8023MacPhy.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpParamI8023MacPhy.setStatus("current")


class _Sle2LldpParamI8023MaxMtuSize_Type(Integer32):
    """Custom type sle2LldpParamI8023MaxMtuSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Sle2LldpParamI8023MaxMtuSize_Type.__name__ = "Integer32"
_Sle2LldpParamI8023MaxMtuSize_Object = MibTableColumn
sle2LldpParamI8023MaxMtuSize = _Sle2LldpParamI8023MaxMtuSize_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 1, 1, 16),
    _Sle2LldpParamI8023MaxMtuSize_Type()
)
sle2LldpParamI8023MaxMtuSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpParamI8023MaxMtuSize.setStatus("current")


class _Sle2LldpParamMedInventory_Type(Integer32):
    """Custom type sle2LldpParamMedInventory based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Sle2LldpParamMedInventory_Type.__name__ = "Integer32"
_Sle2LldpParamMedInventory_Object = MibTableColumn
sle2LldpParamMedInventory = _Sle2LldpParamMedInventory_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 1, 1, 17),
    _Sle2LldpParamMedInventory_Type()
)
sle2LldpParamMedInventory.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpParamMedInventory.setStatus("current")


class _Sle2LldpParamMedLocation_Type(Integer32):
    """Custom type sle2LldpParamMedLocation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Sle2LldpParamMedLocation_Type.__name__ = "Integer32"
_Sle2LldpParamMedLocation_Object = MibTableColumn
sle2LldpParamMedLocation = _Sle2LldpParamMedLocation_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 1, 1, 18),
    _Sle2LldpParamMedLocation_Type()
)
sle2LldpParamMedLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpParamMedLocation.setStatus("current")


class _Sle2LldpParamMedNetworkPolicy_Type(Integer32):
    """Custom type sle2LldpParamMedNetworkPolicy based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Sle2LldpParamMedNetworkPolicy_Type.__name__ = "Integer32"
_Sle2LldpParamMedNetworkPolicy_Object = MibTableColumn
sle2LldpParamMedNetworkPolicy = _Sle2LldpParamMedNetworkPolicy_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 1, 1, 19),
    _Sle2LldpParamMedNetworkPolicy_Type()
)
sle2LldpParamMedNetworkPolicy.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpParamMedNetworkPolicy.setStatus("current")


class _Sle2LldpParamMedPower_Type(Integer32):
    """Custom type sle2LldpParamMedPower based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Sle2LldpParamMedPower_Type.__name__ = "Integer32"
_Sle2LldpParamMedPower_Object = MibTableColumn
sle2LldpParamMedPower = _Sle2LldpParamMedPower_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 1, 1, 20),
    _Sle2LldpParamMedPower_Type()
)
sle2LldpParamMedPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpParamMedPower.setStatus("current")
_Sle2LldpParametersControl_ObjectIdentity = ObjectIdentity
sle2LldpParametersControl = _Sle2LldpParametersControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 2)
)


class _Sle2LldpParamControlRequest_Type(Integer32):
    """Custom type sle2LldpParamControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("setLldpParam", 1)
    )


_Sle2LldpParamControlRequest_Type.__name__ = "Integer32"
_Sle2LldpParamControlRequest_Object = MibScalar
sle2LldpParamControlRequest = _Sle2LldpParamControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 2, 1),
    _Sle2LldpParamControlRequest_Type()
)
sle2LldpParamControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpParamControlRequest.setStatus("current")
_Sle2LldpParamControlStatus_Type = SleControlStatusType
_Sle2LldpParamControlStatus_Object = MibScalar
sle2LldpParamControlStatus = _Sle2LldpParamControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 2, 2),
    _Sle2LldpParamControlStatus_Type()
)
sle2LldpParamControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpParamControlStatus.setStatus("current")
_Sle2LldpParamControlTimer_Type = Gauge32
_Sle2LldpParamControlTimer_Object = MibScalar
sle2LldpParamControlTimer = _Sle2LldpParamControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 2, 3),
    _Sle2LldpParamControlTimer_Type()
)
sle2LldpParamControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpParamControlTimer.setStatus("current")
_Sle2LldpParamControlTimeStamp_Type = TimeTicks
_Sle2LldpParamControlTimeStamp_Object = MibScalar
sle2LldpParamControlTimeStamp = _Sle2LldpParamControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 2, 4),
    _Sle2LldpParamControlTimeStamp_Type()
)
sle2LldpParamControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpParamControlTimeStamp.setStatus("current")
_Sle2LldpParamControlReqResult_Type = SleControlRequestResultType
_Sle2LldpParamControlReqResult_Object = MibScalar
sle2LldpParamControlReqResult = _Sle2LldpParamControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 2, 5),
    _Sle2LldpParamControlReqResult_Type()
)
sle2LldpParamControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpParamControlReqResult.setStatus("current")
_Sle2LldpParamControlIfIndex_Type = InterfaceIndex
_Sle2LldpParamControlIfIndex_Object = MibScalar
sle2LldpParamControlIfIndex = _Sle2LldpParamControlIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 2, 6),
    _Sle2LldpParamControlIfIndex_Type()
)
sle2LldpParamControlIfIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpParamControlIfIndex.setStatus("current")


class _Sle2LldpParamControlAgentMode_Type(Integer32):
    """Custom type sle2LldpParamControlAgentMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("nearest", 1),
          ("nontpmr", 2),
          ("customer", 3))
    )


_Sle2LldpParamControlAgentMode_Type.__name__ = "Integer32"
_Sle2LldpParamControlAgentMode_Object = MibScalar
sle2LldpParamControlAgentMode = _Sle2LldpParamControlAgentMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 2, 7),
    _Sle2LldpParamControlAgentMode_Type()
)
sle2LldpParamControlAgentMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpParamControlAgentMode.setStatus("current")


class _Sle2LldpParamControlBacManagementAddress_Type(Integer32):
    """Custom type sle2LldpParamControlBacManagementAddress based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Sle2LldpParamControlBacManagementAddress_Type.__name__ = "Integer32"
_Sle2LldpParamControlBacManagementAddress_Object = MibScalar
sle2LldpParamControlBacManagementAddress = _Sle2LldpParamControlBacManagementAddress_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 2, 8),
    _Sle2LldpParamControlBacManagementAddress_Type()
)
sle2LldpParamControlBacManagementAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpParamControlBacManagementAddress.setStatus("current")


class _Sle2LldpParamControlBacPortDescription_Type(Integer32):
    """Custom type sle2LldpParamControlBacPortDescription based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Sle2LldpParamControlBacPortDescription_Type.__name__ = "Integer32"
_Sle2LldpParamControlBacPortDescription_Object = MibScalar
sle2LldpParamControlBacPortDescription = _Sle2LldpParamControlBacPortDescription_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 2, 9),
    _Sle2LldpParamControlBacPortDescription_Type()
)
sle2LldpParamControlBacPortDescription.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpParamControlBacPortDescription.setStatus("current")


class _Sle2LldpParamControlBacSystemCapabilities_Type(Integer32):
    """Custom type sle2LldpParamControlBacSystemCapabilities based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Sle2LldpParamControlBacSystemCapabilities_Type.__name__ = "Integer32"
_Sle2LldpParamControlBacSystemCapabilities_Object = MibScalar
sle2LldpParamControlBacSystemCapabilities = _Sle2LldpParamControlBacSystemCapabilities_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 2, 10),
    _Sle2LldpParamControlBacSystemCapabilities_Type()
)
sle2LldpParamControlBacSystemCapabilities.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpParamControlBacSystemCapabilities.setStatus("current")


class _Sle2LldpParamControlBacSystemDescription_Type(Integer32):
    """Custom type sle2LldpParamControlBacSystemDescription based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Sle2LldpParamControlBacSystemDescription_Type.__name__ = "Integer32"
_Sle2LldpParamControlBacSystemDescription_Object = MibScalar
sle2LldpParamControlBacSystemDescription = _Sle2LldpParamControlBacSystemDescription_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 2, 11),
    _Sle2LldpParamControlBacSystemDescription_Type()
)
sle2LldpParamControlBacSystemDescription.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpParamControlBacSystemDescription.setStatus("current")


class _Sle2LldpParamControlBacSystemName_Type(Integer32):
    """Custom type sle2LldpParamControlBacSystemName based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Sle2LldpParamControlBacSystemName_Type.__name__ = "Integer32"
_Sle2LldpParamControlBacSystemName_Object = MibScalar
sle2LldpParamControlBacSystemName = _Sle2LldpParamControlBacSystemName_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 2, 12),
    _Sle2LldpParamControlBacSystemName_Type()
)
sle2LldpParamControlBacSystemName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpParamControlBacSystemName.setStatus("current")


class _Sle2LldpParamControlI8021LinkAgg_Type(Integer32):
    """Custom type sle2LldpParamControlI8021LinkAgg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Sle2LldpParamControlI8021LinkAgg_Type.__name__ = "Integer32"
_Sle2LldpParamControlI8021LinkAgg_Object = MibScalar
sle2LldpParamControlI8021LinkAgg = _Sle2LldpParamControlI8021LinkAgg_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 2, 13),
    _Sle2LldpParamControlI8021LinkAgg_Type()
)
sle2LldpParamControlI8021LinkAgg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpParamControlI8021LinkAgg.setStatus("current")


class _Sle2LldpParamControlI8021MgmtVid_Type(Integer32):
    """Custom type sle2LldpParamControlI8021MgmtVid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Sle2LldpParamControlI8021MgmtVid_Type.__name__ = "Integer32"
_Sle2LldpParamControlI8021MgmtVid_Object = MibScalar
sle2LldpParamControlI8021MgmtVid = _Sle2LldpParamControlI8021MgmtVid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 2, 14),
    _Sle2LldpParamControlI8021MgmtVid_Type()
)
sle2LldpParamControlI8021MgmtVid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpParamControlI8021MgmtVid.setStatus("current")


class _Sle2LldpParamControlI8021PortPtclVlanid_Type(Integer32):
    """Custom type sle2LldpParamControlI8021PortPtclVlanid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Sle2LldpParamControlI8021PortPtclVlanid_Type.__name__ = "Integer32"
_Sle2LldpParamControlI8021PortPtclVlanid_Object = MibScalar
sle2LldpParamControlI8021PortPtclVlanid = _Sle2LldpParamControlI8021PortPtclVlanid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 2, 15),
    _Sle2LldpParamControlI8021PortPtclVlanid_Type()
)
sle2LldpParamControlI8021PortPtclVlanid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpParamControlI8021PortPtclVlanid.setStatus("current")


class _Sle2LldpParamControlI8021PortVlanid_Type(Integer32):
    """Custom type sle2LldpParamControlI8021PortVlanid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Sle2LldpParamControlI8021PortVlanid_Type.__name__ = "Integer32"
_Sle2LldpParamControlI8021PortVlanid_Object = MibScalar
sle2LldpParamControlI8021PortVlanid = _Sle2LldpParamControlI8021PortVlanid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 2, 16),
    _Sle2LldpParamControlI8021PortVlanid_Type()
)
sle2LldpParamControlI8021PortVlanid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpParamControlI8021PortVlanid.setStatus("current")


class _Sle2LldpParamControlI8021PtclIdentity_Type(Integer32):
    """Custom type sle2LldpParamControlI8021PtclIdentity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Sle2LldpParamControlI8021PtclIdentity_Type.__name__ = "Integer32"
_Sle2LldpParamControlI8021PtclIdentity_Object = MibScalar
sle2LldpParamControlI8021PtclIdentity = _Sle2LldpParamControlI8021PtclIdentity_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 2, 17),
    _Sle2LldpParamControlI8021PtclIdentity_Type()
)
sle2LldpParamControlI8021PtclIdentity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpParamControlI8021PtclIdentity.setStatus("current")


class _Sle2LldpParamControlI8021VidDigest_Type(Integer32):
    """Custom type sle2LldpParamControlI8021VidDigest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Sle2LldpParamControlI8021VidDigest_Type.__name__ = "Integer32"
_Sle2LldpParamControlI8021VidDigest_Object = MibScalar
sle2LldpParamControlI8021VidDigest = _Sle2LldpParamControlI8021VidDigest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 2, 18),
    _Sle2LldpParamControlI8021VidDigest_Type()
)
sle2LldpParamControlI8021VidDigest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpParamControlI8021VidDigest.setStatus("current")


class _Sle2LldpParamControlI8021VlanName_Type(Integer32):
    """Custom type sle2LldpParamControlI8021VlanName based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Sle2LldpParamControlI8021VlanName_Type.__name__ = "Integer32"
_Sle2LldpParamControlI8021VlanName_Object = MibScalar
sle2LldpParamControlI8021VlanName = _Sle2LldpParamControlI8021VlanName_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 2, 19),
    _Sle2LldpParamControlI8021VlanName_Type()
)
sle2LldpParamControlI8021VlanName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpParamControlI8021VlanName.setStatus("current")


class _Sle2LldpParamControlI8023MacPhy_Type(Integer32):
    """Custom type sle2LldpParamControlI8023MacPhy based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Sle2LldpParamControlI8023MacPhy_Type.__name__ = "Integer32"
_Sle2LldpParamControlI8023MacPhy_Object = MibScalar
sle2LldpParamControlI8023MacPhy = _Sle2LldpParamControlI8023MacPhy_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 2, 20),
    _Sle2LldpParamControlI8023MacPhy_Type()
)
sle2LldpParamControlI8023MacPhy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpParamControlI8023MacPhy.setStatus("current")


class _Sle2LldpParamControlI8023MaxMtuSize_Type(Integer32):
    """Custom type sle2LldpParamControlI8023MaxMtuSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Sle2LldpParamControlI8023MaxMtuSize_Type.__name__ = "Integer32"
_Sle2LldpParamControlI8023MaxMtuSize_Object = MibScalar
sle2LldpParamControlI8023MaxMtuSize = _Sle2LldpParamControlI8023MaxMtuSize_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 2, 21),
    _Sle2LldpParamControlI8023MaxMtuSize_Type()
)
sle2LldpParamControlI8023MaxMtuSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpParamControlI8023MaxMtuSize.setStatus("current")


class _Sle2LldpParamControlMedInventory_Type(Integer32):
    """Custom type sle2LldpParamControlMedInventory based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Sle2LldpParamControlMedInventory_Type.__name__ = "Integer32"
_Sle2LldpParamControlMedInventory_Object = MibScalar
sle2LldpParamControlMedInventory = _Sle2LldpParamControlMedInventory_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 2, 22),
    _Sle2LldpParamControlMedInventory_Type()
)
sle2LldpParamControlMedInventory.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpParamControlMedInventory.setStatus("current")


class _Sle2LldpParamControlMedLocation_Type(Integer32):
    """Custom type sle2LldpParamControlMedLocation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Sle2LldpParamControlMedLocation_Type.__name__ = "Integer32"
_Sle2LldpParamControlMedLocation_Object = MibScalar
sle2LldpParamControlMedLocation = _Sle2LldpParamControlMedLocation_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 2, 23),
    _Sle2LldpParamControlMedLocation_Type()
)
sle2LldpParamControlMedLocation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpParamControlMedLocation.setStatus("current")


class _Sle2LldpParamControlMedNetworkPolicy_Type(Integer32):
    """Custom type sle2LldpParamControlMedNetworkPolicy based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Sle2LldpParamControlMedNetworkPolicy_Type.__name__ = "Integer32"
_Sle2LldpParamControlMedNetworkPolicy_Object = MibScalar
sle2LldpParamControlMedNetworkPolicy = _Sle2LldpParamControlMedNetworkPolicy_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 2, 24),
    _Sle2LldpParamControlMedNetworkPolicy_Type()
)
sle2LldpParamControlMedNetworkPolicy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpParamControlMedNetworkPolicy.setStatus("current")


class _Sle2LldpParamControlMedPower_Type(Integer32):
    """Custom type sle2LldpParamControlMedPower based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Sle2LldpParamControlMedPower_Type.__name__ = "Integer32"
_Sle2LldpParamControlMedPower_Object = MibScalar
sle2LldpParamControlMedPower = _Sle2LldpParamControlMedPower_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 40, 2, 25),
    _Sle2LldpParamControlMedPower_Type()
)
sle2LldpParamControlMedPower.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpParamControlMedPower.setStatus("current")
_Sle2LldpAgent_ObjectIdentity = ObjectIdentity
sle2LldpAgent = _Sle2LldpAgent_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41)
)
_Sle2LldpAgentTable_Object = MibTable
sle2LldpAgentTable = _Sle2LldpAgentTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 1)
)
if mibBuilder.loadTexts:
    sle2LldpAgentTable.setStatus("current")
_Sle2LldpAgentEntry_Object = MibTableRow
sle2LldpAgentEntry = _Sle2LldpAgentEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 1, 1)
)
sle2LldpAgentEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sle2LldpAgentIfIndex"),
    (0, "SLE-BRIDGE-MIB", "sle2LldpAgentMode"),
)
if mibBuilder.loadTexts:
    sle2LldpAgentEntry.setStatus("current")
_Sle2LldpAgentIfIndex_Type = InterfaceIndex
_Sle2LldpAgentIfIndex_Object = MibTableColumn
sle2LldpAgentIfIndex = _Sle2LldpAgentIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 1, 1, 1),
    _Sle2LldpAgentIfIndex_Type()
)
sle2LldpAgentIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpAgentIfIndex.setStatus("current")


class _Sle2LldpAgentMode_Type(Integer32):
    """Custom type sle2LldpAgentMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("nearest", 1),
          ("nontpmr", 2),
          ("customer", 3))
    )


_Sle2LldpAgentMode_Type.__name__ = "Integer32"
_Sle2LldpAgentMode_Object = MibTableColumn
sle2LldpAgentMode = _Sle2LldpAgentMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 1, 1, 2),
    _Sle2LldpAgentMode_Type()
)
sle2LldpAgentMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpAgentMode.setStatus("current")


class _Sle2LldpAgentChassisIdTlv_Type(Integer32):
    """Custom type sle2LldpAgentChassisIdTlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("ifalias", 1),
          ("ifname", 2),
          ("ipaddress", 3),
          ("locallyassigned", 4),
          ("macaddress", 5))
    )


_Sle2LldpAgentChassisIdTlv_Type.__name__ = "Integer32"
_Sle2LldpAgentChassisIdTlv_Object = MibTableColumn
sle2LldpAgentChassisIdTlv = _Sle2LldpAgentChassisIdTlv_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 1, 1, 3),
    _Sle2LldpAgentChassisIdTlv_Type()
)
sle2LldpAgentChassisIdTlv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpAgentChassisIdTlv.setStatus("current")


class _Sle2LldpAgentAdminStatus_Type(Integer32):
    """Custom type sle2LldpAgentAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("txOnly", 1),
          ("rxOnly", 2),
          ("txAndRx", 3),
          ("disabled", 4))
    )


_Sle2LldpAgentAdminStatus_Type.__name__ = "Integer32"
_Sle2LldpAgentAdminStatus_Object = MibTableColumn
sle2LldpAgentAdminStatus = _Sle2LldpAgentAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 1, 1, 4),
    _Sle2LldpAgentAdminStatus_Type()
)
sle2LldpAgentAdminStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpAgentAdminStatus.setStatus("current")
_Sle2LldpAgentLocallyAssigned_Type = OctetString
_Sle2LldpAgentLocallyAssigned_Object = MibTableColumn
sle2LldpAgentLocallyAssigned = _Sle2LldpAgentLocallyAssigned_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 1, 1, 5),
    _Sle2LldpAgentLocallyAssigned_Type()
)
sle2LldpAgentLocallyAssigned.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpAgentLocallyAssigned.setStatus("current")


class _Sle2LldpAgentManagementAddressTlv_Type(Integer32):
    """Custom type sle2LldpAgentManagementAddressTlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ipaddress", 1),
          ("macaddress", 2))
    )


_Sle2LldpAgentManagementAddressTlv_Type.__name__ = "Integer32"
_Sle2LldpAgentManagementAddressTlv_Object = MibTableColumn
sle2LldpAgentManagementAddressTlv = _Sle2LldpAgentManagementAddressTlv_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 1, 1, 6),
    _Sle2LldpAgentManagementAddressTlv_Type()
)
sle2LldpAgentManagementAddressTlv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpAgentManagementAddressTlv.setStatus("current")


class _Sle2LldpAgentMsgTxHold_Type(Integer32):
    """Custom type sle2LldpAgentMsgTxHold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_Sle2LldpAgentMsgTxHold_Type.__name__ = "Integer32"
_Sle2LldpAgentMsgTxHold_Object = MibTableColumn
sle2LldpAgentMsgTxHold = _Sle2LldpAgentMsgTxHold_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 1, 1, 7),
    _Sle2LldpAgentMsgTxHold_Type()
)
sle2LldpAgentMsgTxHold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpAgentMsgTxHold.setStatus("current")


class _Sle2LldpAgentPortIdTlv_Type(Integer32):
    """Custom type sle2LldpAgentPortIdTlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("agtcircuitid", 1),
          ("ifalias", 2),
          ("ifname", 3),
          ("ipaddress", 4),
          ("locallyassigned", 5),
          ("macaddress", 6))
    )


_Sle2LldpAgentPortIdTlv_Type.__name__ = "Integer32"
_Sle2LldpAgentPortIdTlv_Object = MibTableColumn
sle2LldpAgentPortIdTlv = _Sle2LldpAgentPortIdTlv_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 1, 1, 8),
    _Sle2LldpAgentPortIdTlv_Type()
)
sle2LldpAgentPortIdTlv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpAgentPortIdTlv.setStatus("current")


class _Sle2LldpAgentTimerMsgFastTx_Type(Integer32):
    """Custom type sle2LldpAgentTimerMsgFastTx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_Sle2LldpAgentTimerMsgFastTx_Type.__name__ = "Integer32"
_Sle2LldpAgentTimerMsgFastTx_Object = MibTableColumn
sle2LldpAgentTimerMsgFastTx = _Sle2LldpAgentTimerMsgFastTx_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 1, 1, 9),
    _Sle2LldpAgentTimerMsgFastTx_Type()
)
sle2LldpAgentTimerMsgFastTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpAgentTimerMsgFastTx.setStatus("current")


class _Sle2LldpAgentTimerMsgTxInterval_Type(Integer32):
    """Custom type sle2LldpAgentTimerMsgTxInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 3600),
    )


_Sle2LldpAgentTimerMsgTxInterval_Type.__name__ = "Integer32"
_Sle2LldpAgentTimerMsgTxInterval_Object = MibTableColumn
sle2LldpAgentTimerMsgTxInterval = _Sle2LldpAgentTimerMsgTxInterval_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 1, 1, 10),
    _Sle2LldpAgentTimerMsgTxInterval_Type()
)
sle2LldpAgentTimerMsgTxInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpAgentTimerMsgTxInterval.setStatus("current")


class _Sle2LldpAgentTimerReinitDelay_Type(Integer32):
    """Custom type sle2LldpAgentTimerReinitDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_Sle2LldpAgentTimerReinitDelay_Type.__name__ = "Integer32"
_Sle2LldpAgentTimerReinitDelay_Object = MibTableColumn
sle2LldpAgentTimerReinitDelay = _Sle2LldpAgentTimerReinitDelay_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 1, 1, 11),
    _Sle2LldpAgentTimerReinitDelay_Type()
)
sle2LldpAgentTimerReinitDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpAgentTimerReinitDelay.setStatus("current")


class _Sle2LldpAgentTimerTxDelay_Type(Integer32):
    """Custom type sle2LldpAgentTimerTxDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_Sle2LldpAgentTimerTxDelay_Type.__name__ = "Integer32"
_Sle2LldpAgentTimerTxDelay_Object = MibTableColumn
sle2LldpAgentTimerTxDelay = _Sle2LldpAgentTimerTxDelay_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 1, 1, 12),
    _Sle2LldpAgentTimerTxDelay_Type()
)
sle2LldpAgentTimerTxDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpAgentTimerTxDelay.setStatus("current")


class _Sle2LldpAgentTMNlimit_Type(Integer32):
    """Custom type sle2LldpAgentTMNlimit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Sle2LldpAgentTMNlimit_Type.__name__ = "Integer32"
_Sle2LldpAgentTMNlimit_Object = MibTableColumn
sle2LldpAgentTMNlimit = _Sle2LldpAgentTMNlimit_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 1, 1, 13),
    _Sle2LldpAgentTMNlimit_Type()
)
sle2LldpAgentTMNlimit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpAgentTMNlimit.setStatus("current")


class _Sle2LldpAgentTMNInfoType_Type(Integer32):
    """Custom type sle2LldpAgentTMNInfoType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("existing", 1),
          ("received", 2))
    )


_Sle2LldpAgentTMNInfoType_Type.__name__ = "Integer32"
_Sle2LldpAgentTMNInfoType_Object = MibTableColumn
sle2LldpAgentTMNInfoType = _Sle2LldpAgentTMNInfoType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 1, 1, 14),
    _Sle2LldpAgentTMNInfoType_Type()
)
sle2LldpAgentTMNInfoType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpAgentTMNInfoType.setStatus("current")
_Sle2LldpAgentTMNMac_Type = MacAddress
_Sle2LldpAgentTMNMac_Object = MibTableColumn
sle2LldpAgentTMNMac = _Sle2LldpAgentTMNMac_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 1, 1, 15),
    _Sle2LldpAgentTMNMac_Type()
)
sle2LldpAgentTMNMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpAgentTMNMac.setStatus("current")


class _Sle2LldpAgentTMNTimer_Type(Integer32):
    """Custom type sle2LldpAgentTMNTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Sle2LldpAgentTMNTimer_Type.__name__ = "Integer32"
_Sle2LldpAgentTMNTimer_Object = MibTableColumn
sle2LldpAgentTMNTimer = _Sle2LldpAgentTMNTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 1, 1, 16),
    _Sle2LldpAgentTMNTimer_Type()
)
sle2LldpAgentTMNTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpAgentTMNTimer.setStatus("current")


class _Sle2LldpAgentTxFastInit_Type(Integer32):
    """Custom type sle2LldpAgentTxFastInit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_Sle2LldpAgentTxFastInit_Type.__name__ = "Integer32"
_Sle2LldpAgentTxFastInit_Object = MibTableColumn
sle2LldpAgentTxFastInit = _Sle2LldpAgentTxFastInit_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 1, 1, 17),
    _Sle2LldpAgentTxFastInit_Type()
)
sle2LldpAgentTxFastInit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpAgentTxFastInit.setStatus("current")


class _Sle2LldpAgentTxMaxCredit_Type(Integer32):
    """Custom type sle2LldpAgentTxMaxCredit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_Sle2LldpAgentTxMaxCredit_Type.__name__ = "Integer32"
_Sle2LldpAgentTxMaxCredit_Object = MibTableColumn
sle2LldpAgentTxMaxCredit = _Sle2LldpAgentTxMaxCredit_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 1, 1, 18),
    _Sle2LldpAgentTxMaxCredit_Type()
)
sle2LldpAgentTxMaxCredit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpAgentTxMaxCredit.setStatus("current")
_Sle2LldpAgentControl_ObjectIdentity = ObjectIdentity
sle2LldpAgentControl = _Sle2LldpAgentControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 2)
)


class _Sle2LldpAgentControlRequest_Type(Integer32):
    """Custom type sle2LldpAgentControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("setLldpAgent", 1),
          ("clearLldpAgent", 2))
    )


_Sle2LldpAgentControlRequest_Type.__name__ = "Integer32"
_Sle2LldpAgentControlRequest_Object = MibScalar
sle2LldpAgentControlRequest = _Sle2LldpAgentControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 2, 1),
    _Sle2LldpAgentControlRequest_Type()
)
sle2LldpAgentControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpAgentControlRequest.setStatus("current")
_Sle2LldpAgentControlStatus_Type = SleControlStatusType
_Sle2LldpAgentControlStatus_Object = MibScalar
sle2LldpAgentControlStatus = _Sle2LldpAgentControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 2, 2),
    _Sle2LldpAgentControlStatus_Type()
)
sle2LldpAgentControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpAgentControlStatus.setStatus("current")
_Sle2LldpAgentControlTimer_Type = Gauge32
_Sle2LldpAgentControlTimer_Object = MibScalar
sle2LldpAgentControlTimer = _Sle2LldpAgentControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 2, 3),
    _Sle2LldpAgentControlTimer_Type()
)
sle2LldpAgentControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpAgentControlTimer.setStatus("current")
_Sle2LldpAgentControlTimeStamp_Type = TimeTicks
_Sle2LldpAgentControlTimeStamp_Object = MibScalar
sle2LldpAgentControlTimeStamp = _Sle2LldpAgentControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 2, 4),
    _Sle2LldpAgentControlTimeStamp_Type()
)
sle2LldpAgentControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpAgentControlTimeStamp.setStatus("current")
_Sle2LldpAgentControlReqResult_Type = SleControlRequestResultType
_Sle2LldpAgentControlReqResult_Object = MibScalar
sle2LldpAgentControlReqResult = _Sle2LldpAgentControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 2, 5),
    _Sle2LldpAgentControlReqResult_Type()
)
sle2LldpAgentControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpAgentControlReqResult.setStatus("current")
_Sle2LldpAgentControlIfIndex_Type = InterfaceIndex
_Sle2LldpAgentControlIfIndex_Object = MibScalar
sle2LldpAgentControlIfIndex = _Sle2LldpAgentControlIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 2, 6),
    _Sle2LldpAgentControlIfIndex_Type()
)
sle2LldpAgentControlIfIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpAgentControlIfIndex.setStatus("current")


class _Sle2LldpAgentControlMode_Type(Integer32):
    """Custom type sle2LldpAgentControlMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("nearest", 1),
          ("nontpmr", 2),
          ("customer", 3))
    )


_Sle2LldpAgentControlMode_Type.__name__ = "Integer32"
_Sle2LldpAgentControlMode_Object = MibScalar
sle2LldpAgentControlMode = _Sle2LldpAgentControlMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 2, 7),
    _Sle2LldpAgentControlMode_Type()
)
sle2LldpAgentControlMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpAgentControlMode.setStatus("current")


class _Sle2LldpAgentControlChassisIdTlv_Type(Integer32):
    """Custom type sle2LldpAgentControlChassisIdTlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("ifalias", 1),
          ("ifname", 2),
          ("ipaddress", 3),
          ("locallyassigned", 4),
          ("macaddress", 5))
    )


_Sle2LldpAgentControlChassisIdTlv_Type.__name__ = "Integer32"
_Sle2LldpAgentControlChassisIdTlv_Object = MibScalar
sle2LldpAgentControlChassisIdTlv = _Sle2LldpAgentControlChassisIdTlv_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 2, 8),
    _Sle2LldpAgentControlChassisIdTlv_Type()
)
sle2LldpAgentControlChassisIdTlv.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpAgentControlChassisIdTlv.setStatus("current")


class _Sle2LldpAgentControlAdminStatus_Type(Integer32):
    """Custom type sle2LldpAgentControlAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("txOnly", 1),
          ("rxOnly", 2),
          ("txAndRx", 3))
    )


_Sle2LldpAgentControlAdminStatus_Type.__name__ = "Integer32"
_Sle2LldpAgentControlAdminStatus_Object = MibScalar
sle2LldpAgentControlAdminStatus = _Sle2LldpAgentControlAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 2, 9),
    _Sle2LldpAgentControlAdminStatus_Type()
)
sle2LldpAgentControlAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpAgentControlAdminStatus.setStatus("current")
_Sle2LldpAgentControlLocallyAssigned_Type = OctetString
_Sle2LldpAgentControlLocallyAssigned_Object = MibScalar
sle2LldpAgentControlLocallyAssigned = _Sle2LldpAgentControlLocallyAssigned_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 2, 10),
    _Sle2LldpAgentControlLocallyAssigned_Type()
)
sle2LldpAgentControlLocallyAssigned.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpAgentControlLocallyAssigned.setStatus("current")


class _Sle2LldpAgentControlManagementAddressTlv_Type(Integer32):
    """Custom type sle2LldpAgentControlManagementAddressTlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ipaddress", 1),
          ("macaddress", 2))
    )


_Sle2LldpAgentControlManagementAddressTlv_Type.__name__ = "Integer32"
_Sle2LldpAgentControlManagementAddressTlv_Object = MibScalar
sle2LldpAgentControlManagementAddressTlv = _Sle2LldpAgentControlManagementAddressTlv_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 2, 11),
    _Sle2LldpAgentControlManagementAddressTlv_Type()
)
sle2LldpAgentControlManagementAddressTlv.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpAgentControlManagementAddressTlv.setStatus("current")


class _Sle2LldpAgentControlMsgTxHold_Type(Integer32):
    """Custom type sle2LldpAgentControlMsgTxHold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_Sle2LldpAgentControlMsgTxHold_Type.__name__ = "Integer32"
_Sle2LldpAgentControlMsgTxHold_Object = MibScalar
sle2LldpAgentControlMsgTxHold = _Sle2LldpAgentControlMsgTxHold_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 2, 12),
    _Sle2LldpAgentControlMsgTxHold_Type()
)
sle2LldpAgentControlMsgTxHold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpAgentControlMsgTxHold.setStatus("current")


class _Sle2LldpAgentControlPortIdTlv_Type(Integer32):
    """Custom type sle2LldpAgentControlPortIdTlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("agtcircuitid", 1),
          ("ifalias", 2),
          ("ifname", 3),
          ("ipaddress", 4),
          ("locallyassigned", 5),
          ("macaddress", 6))
    )


_Sle2LldpAgentControlPortIdTlv_Type.__name__ = "Integer32"
_Sle2LldpAgentControlPortIdTlv_Object = MibScalar
sle2LldpAgentControlPortIdTlv = _Sle2LldpAgentControlPortIdTlv_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 2, 13),
    _Sle2LldpAgentControlPortIdTlv_Type()
)
sle2LldpAgentControlPortIdTlv.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpAgentControlPortIdTlv.setStatus("current")


class _Sle2LldpAgentControlTimerMsgFastTx_Type(Integer32):
    """Custom type sle2LldpAgentControlTimerMsgFastTx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_Sle2LldpAgentControlTimerMsgFastTx_Type.__name__ = "Integer32"
_Sle2LldpAgentControlTimerMsgFastTx_Object = MibScalar
sle2LldpAgentControlTimerMsgFastTx = _Sle2LldpAgentControlTimerMsgFastTx_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 2, 14),
    _Sle2LldpAgentControlTimerMsgFastTx_Type()
)
sle2LldpAgentControlTimerMsgFastTx.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpAgentControlTimerMsgFastTx.setStatus("current")


class _Sle2LldpAgentControlTimerMsgTxInterval_Type(Integer32):
    """Custom type sle2LldpAgentControlTimerMsgTxInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 3600),
    )


_Sle2LldpAgentControlTimerMsgTxInterval_Type.__name__ = "Integer32"
_Sle2LldpAgentControlTimerMsgTxInterval_Object = MibScalar
sle2LldpAgentControlTimerMsgTxInterval = _Sle2LldpAgentControlTimerMsgTxInterval_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 2, 15),
    _Sle2LldpAgentControlTimerMsgTxInterval_Type()
)
sle2LldpAgentControlTimerMsgTxInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpAgentControlTimerMsgTxInterval.setStatus("current")


class _Sle2LldpAgentControlTimerReinitDelay_Type(Integer32):
    """Custom type sle2LldpAgentControlTimerReinitDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_Sle2LldpAgentControlTimerReinitDelay_Type.__name__ = "Integer32"
_Sle2LldpAgentControlTimerReinitDelay_Object = MibScalar
sle2LldpAgentControlTimerReinitDelay = _Sle2LldpAgentControlTimerReinitDelay_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 2, 16),
    _Sle2LldpAgentControlTimerReinitDelay_Type()
)
sle2LldpAgentControlTimerReinitDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpAgentControlTimerReinitDelay.setStatus("current")


class _Sle2LldpAgentControlTimerTxDelay_Type(Integer32):
    """Custom type sle2LldpAgentControlTimerTxDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_Sle2LldpAgentControlTimerTxDelay_Type.__name__ = "Integer32"
_Sle2LldpAgentControlTimerTxDelay_Object = MibScalar
sle2LldpAgentControlTimerTxDelay = _Sle2LldpAgentControlTimerTxDelay_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 2, 17),
    _Sle2LldpAgentControlTimerTxDelay_Type()
)
sle2LldpAgentControlTimerTxDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpAgentControlTimerTxDelay.setStatus("current")


class _Sle2LldpAgentControlTMNlimit_Type(Integer32):
    """Custom type sle2LldpAgentControlTMNlimit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Sle2LldpAgentControlTMNlimit_Type.__name__ = "Integer32"
_Sle2LldpAgentControlTMNlimit_Object = MibScalar
sle2LldpAgentControlTMNlimit = _Sle2LldpAgentControlTMNlimit_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 2, 18),
    _Sle2LldpAgentControlTMNlimit_Type()
)
sle2LldpAgentControlTMNlimit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpAgentControlTMNlimit.setStatus("current")


class _Sle2LldpAgentControlTMNInfoType_Type(Integer32):
    """Custom type sle2LldpAgentControlTMNInfoType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("existing", 1),
          ("received", 2))
    )


_Sle2LldpAgentControlTMNInfoType_Type.__name__ = "Integer32"
_Sle2LldpAgentControlTMNInfoType_Object = MibScalar
sle2LldpAgentControlTMNInfoType = _Sle2LldpAgentControlTMNInfoType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 2, 19),
    _Sle2LldpAgentControlTMNInfoType_Type()
)
sle2LldpAgentControlTMNInfoType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpAgentControlTMNInfoType.setStatus("current")
_Sle2LldpAgentControlTMNMac_Type = MacAddress
_Sle2LldpAgentControlTMNMac_Object = MibScalar
sle2LldpAgentControlTMNMac = _Sle2LldpAgentControlTMNMac_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 2, 20),
    _Sle2LldpAgentControlTMNMac_Type()
)
sle2LldpAgentControlTMNMac.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpAgentControlTMNMac.setStatus("current")


class _Sle2LldpAgentControlTMNTimer_Type(Integer32):
    """Custom type sle2LldpAgentControlTMNTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Sle2LldpAgentControlTMNTimer_Type.__name__ = "Integer32"
_Sle2LldpAgentControlTMNTimer_Object = MibScalar
sle2LldpAgentControlTMNTimer = _Sle2LldpAgentControlTMNTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 2, 21),
    _Sle2LldpAgentControlTMNTimer_Type()
)
sle2LldpAgentControlTMNTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpAgentControlTMNTimer.setStatus("current")


class _Sle2LldpAgentControlTxFastInit_Type(Integer32):
    """Custom type sle2LldpAgentControlTxFastInit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_Sle2LldpAgentControlTxFastInit_Type.__name__ = "Integer32"
_Sle2LldpAgentControlTxFastInit_Object = MibScalar
sle2LldpAgentControlTxFastInit = _Sle2LldpAgentControlTxFastInit_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 2, 22),
    _Sle2LldpAgentControlTxFastInit_Type()
)
sle2LldpAgentControlTxFastInit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpAgentControlTxFastInit.setStatus("current")


class _Sle2LldpAgentControlTxMaxCredit_Type(Integer32):
    """Custom type sle2LldpAgentControlTxMaxCredit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_Sle2LldpAgentControlTxMaxCredit_Type.__name__ = "Integer32"
_Sle2LldpAgentControlTxMaxCredit_Object = MibScalar
sle2LldpAgentControlTxMaxCredit = _Sle2LldpAgentControlTxMaxCredit_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 41, 2, 23),
    _Sle2LldpAgentControlTxMaxCredit_Type()
)
sle2LldpAgentControlTxMaxCredit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpAgentControlTxMaxCredit.setStatus("current")
_Sle2LldpStatistics_ObjectIdentity = ObjectIdentity
sle2LldpStatistics = _Sle2LldpStatistics_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 42)
)
_Sle2LldpStatisticsTable_Object = MibTable
sle2LldpStatisticsTable = _Sle2LldpStatisticsTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 42, 1)
)
if mibBuilder.loadTexts:
    sle2LldpStatisticsTable.setStatus("current")
_Sle2LldpStatisticsEntry_Object = MibTableRow
sle2LldpStatisticsEntry = _Sle2LldpStatisticsEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 42, 1, 1)
)
sle2LldpStatisticsEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sle2LldpStatsIfIndex"),
    (0, "SLE-BRIDGE-MIB", "sle2LldpStatsAgentMode"),
)
if mibBuilder.loadTexts:
    sle2LldpStatisticsEntry.setStatus("current")
_Sle2LldpStatsIfIndex_Type = InterfaceIndex
_Sle2LldpStatsIfIndex_Object = MibTableColumn
sle2LldpStatsIfIndex = _Sle2LldpStatsIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 42, 1, 1, 1),
    _Sle2LldpStatsIfIndex_Type()
)
sle2LldpStatsIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpStatsIfIndex.setStatus("current")


class _Sle2LldpStatsAgentMode_Type(Integer32):
    """Custom type sle2LldpStatsAgentMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("nearest", 1),
          ("nontpmr", 2),
          ("customer", 3))
    )


_Sle2LldpStatsAgentMode_Type.__name__ = "Integer32"
_Sle2LldpStatsAgentMode_Object = MibTableColumn
sle2LldpStatsAgentMode = _Sle2LldpStatsAgentMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 42, 1, 1, 2),
    _Sle2LldpStatsAgentMode_Type()
)
sle2LldpStatsAgentMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpStatsAgentMode.setStatus("current")
_Sle2LldpStatsTransmittedFramesTotal_Type = Integer32
_Sle2LldpStatsTransmittedFramesTotal_Object = MibTableColumn
sle2LldpStatsTransmittedFramesTotal = _Sle2LldpStatsTransmittedFramesTotal_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 42, 1, 1, 3),
    _Sle2LldpStatsTransmittedFramesTotal_Type()
)
sle2LldpStatsTransmittedFramesTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpStatsTransmittedFramesTotal.setStatus("current")
_Sle2LldpStatsAgedEntriesTotal_Type = Integer32
_Sle2LldpStatsAgedEntriesTotal_Object = MibTableColumn
sle2LldpStatsAgedEntriesTotal = _Sle2LldpStatsAgedEntriesTotal_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 42, 1, 1, 4),
    _Sle2LldpStatsAgedEntriesTotal_Type()
)
sle2LldpStatsAgedEntriesTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpStatsAgedEntriesTotal.setStatus("current")
_Sle2LldpStatsReceivedFramesTotal_Type = Integer32
_Sle2LldpStatsReceivedFramesTotal_Object = MibTableColumn
sle2LldpStatsReceivedFramesTotal = _Sle2LldpStatsReceivedFramesTotal_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 42, 1, 1, 5),
    _Sle2LldpStatsReceivedFramesTotal_Type()
)
sle2LldpStatsReceivedFramesTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpStatsReceivedFramesTotal.setStatus("current")
_Sle2LldpStatsReceivedFramesError_Type = Integer32
_Sle2LldpStatsReceivedFramesError_Object = MibTableColumn
sle2LldpStatsReceivedFramesError = _Sle2LldpStatsReceivedFramesError_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 42, 1, 1, 6),
    _Sle2LldpStatsReceivedFramesError_Type()
)
sle2LldpStatsReceivedFramesError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpStatsReceivedFramesError.setStatus("current")
_Sle2LldpStatsDiscardedFramesTotal_Type = Integer32
_Sle2LldpStatsDiscardedFramesTotal_Object = MibTableColumn
sle2LldpStatsDiscardedFramesTotal = _Sle2LldpStatsDiscardedFramesTotal_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 42, 1, 1, 7),
    _Sle2LldpStatsDiscardedFramesTotal_Type()
)
sle2LldpStatsDiscardedFramesTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpStatsDiscardedFramesTotal.setStatus("current")
_Sle2LldpStatsTLVDiscardTotal_Type = Integer32
_Sle2LldpStatsTLVDiscardTotal_Object = MibTableColumn
sle2LldpStatsTLVDiscardTotal = _Sle2LldpStatsTLVDiscardTotal_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 42, 1, 1, 8),
    _Sle2LldpStatsTLVDiscardTotal_Type()
)
sle2LldpStatsTLVDiscardTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpStatsTLVDiscardTotal.setStatus("current")
_Sle2LldpStatsTLVUnrecognisedTotal_Type = Integer32
_Sle2LldpStatsTLVUnrecognisedTotal_Object = MibTableColumn
sle2LldpStatsTLVUnrecognisedTotal = _Sle2LldpStatsTLVUnrecognisedTotal_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 42, 1, 1, 9),
    _Sle2LldpStatsTLVUnrecognisedTotal_Type()
)
sle2LldpStatsTLVUnrecognisedTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpStatsTLVUnrecognisedTotal.setStatus("current")
_Sle2LldpStatisticsControl_ObjectIdentity = ObjectIdentity
sle2LldpStatisticsControl = _Sle2LldpStatisticsControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 42, 2)
)


class _Sle2LldpStatsControlRequest_Type(Integer32):
    """Custom type sle2LldpStatsControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("clearLldpStats", 1)
    )


_Sle2LldpStatsControlRequest_Type.__name__ = "Integer32"
_Sle2LldpStatsControlRequest_Object = MibScalar
sle2LldpStatsControlRequest = _Sle2LldpStatsControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 42, 2, 1),
    _Sle2LldpStatsControlRequest_Type()
)
sle2LldpStatsControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpStatsControlRequest.setStatus("current")
_Sle2LldpStatsControlStatus_Type = SleControlStatusType
_Sle2LldpStatsControlStatus_Object = MibScalar
sle2LldpStatsControlStatus = _Sle2LldpStatsControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 42, 2, 2),
    _Sle2LldpStatsControlStatus_Type()
)
sle2LldpStatsControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpStatsControlStatus.setStatus("current")
_Sle2LldpStatsControlTimer_Type = Gauge32
_Sle2LldpStatsControlTimer_Object = MibScalar
sle2LldpStatsControlTimer = _Sle2LldpStatsControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 42, 2, 3),
    _Sle2LldpStatsControlTimer_Type()
)
sle2LldpStatsControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpStatsControlTimer.setStatus("current")
_Sle2LldpStatsControlTimeStamp_Type = TimeTicks
_Sle2LldpStatsControlTimeStamp_Object = MibScalar
sle2LldpStatsControlTimeStamp = _Sle2LldpStatsControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 42, 2, 4),
    _Sle2LldpStatsControlTimeStamp_Type()
)
sle2LldpStatsControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpStatsControlTimeStamp.setStatus("current")
_Sle2LldpStatsControlReqResult_Type = SleControlRequestResultType
_Sle2LldpStatsControlReqResult_Object = MibScalar
sle2LldpStatsControlReqResult = _Sle2LldpStatsControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 42, 2, 5),
    _Sle2LldpStatsControlReqResult_Type()
)
sle2LldpStatsControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpStatsControlReqResult.setStatus("current")
_Sle2LldpRemote_ObjectIdentity = ObjectIdentity
sle2LldpRemote = _Sle2LldpRemote_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43)
)
_Sle2LldpRemoteTable_Object = MibTable
sle2LldpRemoteTable = _Sle2LldpRemoteTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1)
)
if mibBuilder.loadTexts:
    sle2LldpRemoteTable.setStatus("current")
_Sle2LldpRemoteEntry_Object = MibTableRow
sle2LldpRemoteEntry = _Sle2LldpRemoteEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1)
)
sle2LldpRemoteEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sle2LldpRemoteIfIndex"),
    (0, "SLE-BRIDGE-MIB", "sle2LldpRemoteAgentMode"),
)
if mibBuilder.loadTexts:
    sle2LldpRemoteEntry.setStatus("current")
_Sle2LldpRemoteIfIndex_Type = InterfaceIndex
_Sle2LldpRemoteIfIndex_Object = MibTableColumn
sle2LldpRemoteIfIndex = _Sle2LldpRemoteIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 1),
    _Sle2LldpRemoteIfIndex_Type()
)
sle2LldpRemoteIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteIfIndex.setStatus("current")


class _Sle2LldpRemoteAgentMode_Type(Integer32):
    """Custom type sle2LldpRemoteAgentMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("nearest", 1),
          ("nontpmr", 2),
          ("customer", 3))
    )


_Sle2LldpRemoteAgentMode_Type.__name__ = "Integer32"
_Sle2LldpRemoteAgentMode_Object = MibTableColumn
sle2LldpRemoteAgentMode = _Sle2LldpRemoteAgentMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 2),
    _Sle2LldpRemoteAgentMode_Type()
)
sle2LldpRemoteAgentMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteAgentMode.setStatus("current")
_Sle2LldpRemoteSysName_Type = OctetString
_Sle2LldpRemoteSysName_Object = MibTableColumn
sle2LldpRemoteSysName = _Sle2LldpRemoteSysName_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 3),
    _Sle2LldpRemoteSysName_Type()
)
sle2LldpRemoteSysName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteSysName.setStatus("current")
_Sle2LldpRemoteSysDescr_Type = OctetString
_Sle2LldpRemoteSysDescr_Object = MibTableColumn
sle2LldpRemoteSysDescr = _Sle2LldpRemoteSysDescr_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 4),
    _Sle2LldpRemoteSysDescr_Type()
)
sle2LldpRemoteSysDescr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteSysDescr.setStatus("current")
_Sle2LldpRemotePortDescr_Type = OctetString
_Sle2LldpRemotePortDescr_Object = MibTableColumn
sle2LldpRemotePortDescr = _Sle2LldpRemotePortDescr_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 5),
    _Sle2LldpRemotePortDescr_Type()
)
sle2LldpRemotePortDescr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemotePortDescr.setStatus("current")
_Sle2LldpRemoteRxTtl_Type = Integer32
_Sle2LldpRemoteRxTtl_Object = MibTableColumn
sle2LldpRemoteRxTtl = _Sle2LldpRemoteRxTtl_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 6),
    _Sle2LldpRemoteRxTtl_Type()
)
sle2LldpRemoteRxTtl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteRxTtl.setStatus("current")
_Sle2LldpRemoteSysCapability_Type = OctetString
_Sle2LldpRemoteSysCapability_Object = MibTableColumn
sle2LldpRemoteSysCapability = _Sle2LldpRemoteSysCapability_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 7),
    _Sle2LldpRemoteSysCapability_Type()
)
sle2LldpRemoteSysCapability.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteSysCapability.setStatus("current")
_Sle2LldpRemoteIfNumbering_Type = Integer32
_Sle2LldpRemoteIfNumbering_Object = MibTableColumn
sle2LldpRemoteIfNumbering = _Sle2LldpRemoteIfNumbering_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 8),
    _Sle2LldpRemoteIfNumbering_Type()
)
sle2LldpRemoteIfNumbering.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteIfNumbering.setStatus("current")
_Sle2LldpRemoteIfNumber_Type = Integer32
_Sle2LldpRemoteIfNumber_Object = MibTableColumn
sle2LldpRemoteIfNumber = _Sle2LldpRemoteIfNumber_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 9),
    _Sle2LldpRemoteIfNumber_Type()
)
sle2LldpRemoteIfNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteIfNumber.setStatus("current")
_Sle2LldpRemoteOid_Type = OctetString
_Sle2LldpRemoteOid_Object = MibTableColumn
sle2LldpRemoteOid = _Sle2LldpRemoteOid_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 10),
    _Sle2LldpRemoteOid_Type()
)
sle2LldpRemoteOid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteOid.setStatus("current")


class _Sle2LldpRemoteMgmtAddrSubType_Type(Integer32):
    """Custom type sle2LldpRemoteMgmtAddrSubType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("mac", 1),
          ("ip", 2))
    )


_Sle2LldpRemoteMgmtAddrSubType_Type.__name__ = "Integer32"
_Sle2LldpRemoteMgmtAddrSubType_Object = MibTableColumn
sle2LldpRemoteMgmtAddrSubType = _Sle2LldpRemoteMgmtAddrSubType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 11),
    _Sle2LldpRemoteMgmtAddrSubType_Type()
)
sle2LldpRemoteMgmtAddrSubType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteMgmtAddrSubType.setStatus("current")
_Sle2LldpRemoteMgmtAddr_Type = OctetString
_Sle2LldpRemoteMgmtAddr_Object = MibTableColumn
sle2LldpRemoteMgmtAddr = _Sle2LldpRemoteMgmtAddr_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 12),
    _Sle2LldpRemoteMgmtAddr_Type()
)
sle2LldpRemoteMgmtAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteMgmtAddr.setStatus("current")


class _Sle2LldpRemoteChassisIdType_Type(Integer32):
    """Custom type sle2LldpRemoteChassisIdType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("chassisComponent", 1),
          ("interfaceAlias", 2),
          ("portComponent", 3),
          ("macAddress", 4),
          ("ipAddress", 5),
          ("interfaceName", 6),
          ("locallyAssigned", 7))
    )


_Sle2LldpRemoteChassisIdType_Type.__name__ = "Integer32"
_Sle2LldpRemoteChassisIdType_Object = MibTableColumn
sle2LldpRemoteChassisIdType = _Sle2LldpRemoteChassisIdType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 13),
    _Sle2LldpRemoteChassisIdType_Type()
)
sle2LldpRemoteChassisIdType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteChassisIdType.setStatus("current")
_Sle2LldpRemoteChassisId_Type = OctetString
_Sle2LldpRemoteChassisId_Object = MibTableColumn
sle2LldpRemoteChassisId = _Sle2LldpRemoteChassisId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 14),
    _Sle2LldpRemoteChassisId_Type()
)
sle2LldpRemoteChassisId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteChassisId.setStatus("current")


class _Sle2LldpRemotePortIdType_Type(Integer32):
    """Custom type sle2LldpRemotePortIdType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("interfaceAlias", 1),
          ("portComponent", 2),
          ("macAddress", 3),
          ("ipAddress", 4),
          ("ifName", 5),
          ("agentCircuitId", 6),
          ("locallyAssigned", 7))
    )


_Sle2LldpRemotePortIdType_Type.__name__ = "Integer32"
_Sle2LldpRemotePortIdType_Object = MibTableColumn
sle2LldpRemotePortIdType = _Sle2LldpRemotePortIdType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 15),
    _Sle2LldpRemotePortIdType_Type()
)
sle2LldpRemotePortIdType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemotePortIdType.setStatus("current")
_Sle2LldpRemotePortId_Type = OctetString
_Sle2LldpRemotePortId_Object = MibTableColumn
sle2LldpRemotePortId = _Sle2LldpRemotePortId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 16),
    _Sle2LldpRemotePortId_Type()
)
sle2LldpRemotePortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemotePortId.setStatus("current")
_Sle2LldpRemotePortVlanId_Type = Integer32
_Sle2LldpRemotePortVlanId_Object = MibTableColumn
sle2LldpRemotePortVlanId = _Sle2LldpRemotePortVlanId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 17),
    _Sle2LldpRemotePortVlanId_Type()
)
sle2LldpRemotePortVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemotePortVlanId.setStatus("current")
_Sle2LldpRemotePPVlanId_Type = Integer32
_Sle2LldpRemotePPVlanId_Object = MibTableColumn
sle2LldpRemotePPVlanId = _Sle2LldpRemotePPVlanId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 18),
    _Sle2LldpRemotePPVlanId_Type()
)
sle2LldpRemotePPVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemotePPVlanId.setStatus("current")


class _Sle2LldpRemoteProtocols_Type(Bits):
    """Custom type sle2LldpRemoteProtocols based on Bits"""
    namedValues = NamedValues(
        *(("stp", 0),
          ("rstp", 1),
          ("mstp", 2),
          ("gmrp", 3),
          ("mmrp", 4),
          ("gvrp", 5),
          ("mvrp", 6),
          ("lacp", 7),
          ("dot1x", 8),
          ("efmoam", 9))
    )

_Sle2LldpRemoteProtocols_Type.__name__ = "Bits"
_Sle2LldpRemoteProtocols_Object = MibTableColumn
sle2LldpRemoteProtocols = _Sle2LldpRemoteProtocols_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 19),
    _Sle2LldpRemoteProtocols_Type()
)
sle2LldpRemoteProtocols.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteProtocols.setStatus("current")
_Sle2LldpRemoteVidUsageDigest_Type = Integer32
_Sle2LldpRemoteVidUsageDigest_Object = MibTableColumn
sle2LldpRemoteVidUsageDigest = _Sle2LldpRemoteVidUsageDigest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 20),
    _Sle2LldpRemoteVidUsageDigest_Type()
)
sle2LldpRemoteVidUsageDigest.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteVidUsageDigest.setStatus("current")
_Sle2LldpRemoteMgmtVlan_Type = Integer32
_Sle2LldpRemoteMgmtVlan_Object = MibTableColumn
sle2LldpRemoteMgmtVlan = _Sle2LldpRemoteMgmtVlan_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 21),
    _Sle2LldpRemoteMgmtVlan_Type()
)
sle2LldpRemoteMgmtVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteMgmtVlan.setStatus("current")


class _Sle2LldpRemoteLinkAggrStatus_Type(Integer32):
    """Custom type sle2LldpRemoteLinkAggrStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_Sle2LldpRemoteLinkAggrStatus_Type.__name__ = "Integer32"
_Sle2LldpRemoteLinkAggrStatus_Object = MibTableColumn
sle2LldpRemoteLinkAggrStatus = _Sle2LldpRemoteLinkAggrStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 22),
    _Sle2LldpRemoteLinkAggrStatus_Type()
)
sle2LldpRemoteLinkAggrStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteLinkAggrStatus.setStatus("current")
_Sle2LldpRemoteLinkAggrPortId_Type = Integer32
_Sle2LldpRemoteLinkAggrPortId_Object = MibTableColumn
sle2LldpRemoteLinkAggrPortId = _Sle2LldpRemoteLinkAggrPortId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 23),
    _Sle2LldpRemoteLinkAggrPortId_Type()
)
sle2LldpRemoteLinkAggrPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteLinkAggrPortId.setStatus("current")


class _Sle2LldpRemoteAutonegoSupport_Type(Bits):
    """Custom type sle2LldpRemoteAutonegoSupport based on Bits"""
    namedValues = NamedValues(
        *(("supported", 0),
          ("enabled", 1))
    )

_Sle2LldpRemoteAutonegoSupport_Type.__name__ = "Bits"
_Sle2LldpRemoteAutonegoSupport_Object = MibTableColumn
sle2LldpRemoteAutonegoSupport = _Sle2LldpRemoteAutonegoSupport_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 24),
    _Sle2LldpRemoteAutonegoSupport_Type()
)
sle2LldpRemoteAutonegoSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteAutonegoSupport.setStatus("current")
_Sle2LldpRemoteAutonegoCapability_Type = Integer32
_Sle2LldpRemoteAutonegoCapability_Object = MibTableColumn
sle2LldpRemoteAutonegoCapability = _Sle2LldpRemoteAutonegoCapability_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 25),
    _Sle2LldpRemoteAutonegoCapability_Type()
)
sle2LldpRemoteAutonegoCapability.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteAutonegoCapability.setStatus("current")
_Sle2LldpRemoteOperMauType_Type = Integer32
_Sle2LldpRemoteOperMauType_Object = MibTableColumn
sle2LldpRemoteOperMauType = _Sle2LldpRemoteOperMauType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 26),
    _Sle2LldpRemoteOperMauType_Type()
)
sle2LldpRemoteOperMauType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteOperMauType.setStatus("current")
_Sle2LldpRemoteMaxFrameSize_Type = Integer32
_Sle2LldpRemoteMaxFrameSize_Object = MibTableColumn
sle2LldpRemoteMaxFrameSize = _Sle2LldpRemoteMaxFrameSize_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 27),
    _Sle2LldpRemoteMaxFrameSize_Type()
)
sle2LldpRemoteMaxFrameSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteMaxFrameSize.setStatus("current")


class _Sle2LldpRemoteMedCapability_Type(Bits):
    """Custom type sle2LldpRemoteMedCapability based on Bits"""
    namedValues = NamedValues(
        *(("capabilities", 0),
          ("networkPolicy", 1),
          ("locationIdentification", 2),
          ("extendedPowerMDIPSE", 3),
          ("extendedPowerMDIPD", 4),
          ("medInventory", 5),
          ("reserved", 6))
    )

_Sle2LldpRemoteMedCapability_Type.__name__ = "Bits"
_Sle2LldpRemoteMedCapability_Object = MibTableColumn
sle2LldpRemoteMedCapability = _Sle2LldpRemoteMedCapability_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 28),
    _Sle2LldpRemoteMedCapability_Type()
)
sle2LldpRemoteMedCapability.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteMedCapability.setStatus("current")
_Sle2LldpRemoteMedCapabilityDevType_Type = OctetString
_Sle2LldpRemoteMedCapabilityDevType_Object = MibTableColumn
sle2LldpRemoteMedCapabilityDevType = _Sle2LldpRemoteMedCapabilityDevType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 29),
    _Sle2LldpRemoteMedCapabilityDevType_Type()
)
sle2LldpRemoteMedCapabilityDevType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteMedCapabilityDevType.setStatus("current")
_Sle2LldpRemoteMedNwPlcyAppType_Type = OctetString
_Sle2LldpRemoteMedNwPlcyAppType_Object = MibTableColumn
sle2LldpRemoteMedNwPlcyAppType = _Sle2LldpRemoteMedNwPlcyAppType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 30),
    _Sle2LldpRemoteMedNwPlcyAppType_Type()
)
sle2LldpRemoteMedNwPlcyAppType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteMedNwPlcyAppType.setStatus("current")
_Sle2LldpRemoteMedNwPlcyVlanId_Type = Integer32
_Sle2LldpRemoteMedNwPlcyVlanId_Object = MibTableColumn
sle2LldpRemoteMedNwPlcyVlanId = _Sle2LldpRemoteMedNwPlcyVlanId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 31),
    _Sle2LldpRemoteMedNwPlcyVlanId_Type()
)
sle2LldpRemoteMedNwPlcyVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteMedNwPlcyVlanId.setStatus("current")


class _Sle2LldpRemoteMedNwPlcyTagged_Type(Integer32):
    """Custom type sle2LldpRemoteMedNwPlcyTagged based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("tagged", 1),
          ("untagged", 2))
    )


_Sle2LldpRemoteMedNwPlcyTagged_Type.__name__ = "Integer32"
_Sle2LldpRemoteMedNwPlcyTagged_Object = MibTableColumn
sle2LldpRemoteMedNwPlcyTagged = _Sle2LldpRemoteMedNwPlcyTagged_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 32),
    _Sle2LldpRemoteMedNwPlcyTagged_Type()
)
sle2LldpRemoteMedNwPlcyTagged.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteMedNwPlcyTagged.setStatus("current")
_Sle2LldpRemoteMedNwPlcyL2Prio_Type = Integer32
_Sle2LldpRemoteMedNwPlcyL2Prio_Object = MibTableColumn
sle2LldpRemoteMedNwPlcyL2Prio = _Sle2LldpRemoteMedNwPlcyL2Prio_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 33),
    _Sle2LldpRemoteMedNwPlcyL2Prio_Type()
)
sle2LldpRemoteMedNwPlcyL2Prio.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteMedNwPlcyL2Prio.setStatus("current")
_Sle2LldpRemoteMedNwPlcyDscp_Type = Integer32
_Sle2LldpRemoteMedNwPlcyDscp_Object = MibTableColumn
sle2LldpRemoteMedNwPlcyDscp = _Sle2LldpRemoteMedNwPlcyDscp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 34),
    _Sle2LldpRemoteMedNwPlcyDscp_Type()
)
sle2LldpRemoteMedNwPlcyDscp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteMedNwPlcyDscp.setStatus("current")
_Sle2LldpRemoteMedLocDataFormat_Type = OctetString
_Sle2LldpRemoteMedLocDataFormat_Object = MibTableColumn
sle2LldpRemoteMedLocDataFormat = _Sle2LldpRemoteMedLocDataFormat_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 35),
    _Sle2LldpRemoteMedLocDataFormat_Type()
)
sle2LldpRemoteMedLocDataFormat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteMedLocDataFormat.setStatus("current")
_Sle2LldpRemoteMedLocLatitudeRes_Type = Integer32
_Sle2LldpRemoteMedLocLatitudeRes_Object = MibTableColumn
sle2LldpRemoteMedLocLatitudeRes = _Sle2LldpRemoteMedLocLatitudeRes_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 36),
    _Sle2LldpRemoteMedLocLatitudeRes_Type()
)
sle2LldpRemoteMedLocLatitudeRes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteMedLocLatitudeRes.setStatus("current")
_Sle2LldpRemoteMedLocLatitude_Type = Counter64
_Sle2LldpRemoteMedLocLatitude_Object = MibTableColumn
sle2LldpRemoteMedLocLatitude = _Sle2LldpRemoteMedLocLatitude_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 37),
    _Sle2LldpRemoteMedLocLatitude_Type()
)
sle2LldpRemoteMedLocLatitude.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteMedLocLatitude.setStatus("current")
_Sle2LldpRemoteMedLocLongitudeRes_Type = Integer32
_Sle2LldpRemoteMedLocLongitudeRes_Object = MibTableColumn
sle2LldpRemoteMedLocLongitudeRes = _Sle2LldpRemoteMedLocLongitudeRes_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 38),
    _Sle2LldpRemoteMedLocLongitudeRes_Type()
)
sle2LldpRemoteMedLocLongitudeRes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteMedLocLongitudeRes.setStatus("current")
_Sle2LldpRemoteMedLocLongitude_Type = Counter64
_Sle2LldpRemoteMedLocLongitude_Object = MibTableColumn
sle2LldpRemoteMedLocLongitude = _Sle2LldpRemoteMedLocLongitude_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 39),
    _Sle2LldpRemoteMedLocLongitude_Type()
)
sle2LldpRemoteMedLocLongitude.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteMedLocLongitude.setStatus("current")
_Sle2LldpRemoteMedLocAt_Type = Integer32
_Sle2LldpRemoteMedLocAt_Object = MibTableColumn
sle2LldpRemoteMedLocAt = _Sle2LldpRemoteMedLocAt_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 40),
    _Sle2LldpRemoteMedLocAt_Type()
)
sle2LldpRemoteMedLocAt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteMedLocAt.setStatus("current")
_Sle2LldpRemoteMedLocAltitudeRes_Type = Integer32
_Sle2LldpRemoteMedLocAltitudeRes_Object = MibTableColumn
sle2LldpRemoteMedLocAltitudeRes = _Sle2LldpRemoteMedLocAltitudeRes_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 41),
    _Sle2LldpRemoteMedLocAltitudeRes_Type()
)
sle2LldpRemoteMedLocAltitudeRes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteMedLocAltitudeRes.setStatus("current")
_Sle2LldpRemoteMedLocAltitude_Type = Integer32
_Sle2LldpRemoteMedLocAltitude_Object = MibTableColumn
sle2LldpRemoteMedLocAltitude = _Sle2LldpRemoteMedLocAltitude_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 42),
    _Sle2LldpRemoteMedLocAltitude_Type()
)
sle2LldpRemoteMedLocAltitude.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteMedLocAltitude.setStatus("current")
_Sle2LldpRemoteMedLocDatum_Type = Integer32
_Sle2LldpRemoteMedLocDatum_Object = MibTableColumn
sle2LldpRemoteMedLocDatum = _Sle2LldpRemoteMedLocDatum_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 43),
    _Sle2LldpRemoteMedLocDatum_Type()
)
sle2LldpRemoteMedLocDatum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteMedLocDatum.setStatus("current")
_Sle2LldpRemoteMedLocLciLength_Type = Integer32
_Sle2LldpRemoteMedLocLciLength_Object = MibTableColumn
sle2LldpRemoteMedLocLciLength = _Sle2LldpRemoteMedLocLciLength_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 44),
    _Sle2LldpRemoteMedLocLciLength_Type()
)
sle2LldpRemoteMedLocLciLength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteMedLocLciLength.setStatus("current")
_Sle2LldpRemoteMedLocWhat_Type = Integer32
_Sle2LldpRemoteMedLocWhat_Object = MibTableColumn
sle2LldpRemoteMedLocWhat = _Sle2LldpRemoteMedLocWhat_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 45),
    _Sle2LldpRemoteMedLocWhat_Type()
)
sle2LldpRemoteMedLocWhat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteMedLocWhat.setStatus("current")
_Sle2LldpRemoteMedLocCountryCode_Type = Integer32
_Sle2LldpRemoteMedLocCountryCode_Object = MibTableColumn
sle2LldpRemoteMedLocCountryCode = _Sle2LldpRemoteMedLocCountryCode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 46),
    _Sle2LldpRemoteMedLocCountryCode_Type()
)
sle2LldpRemoteMedLocCountryCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteMedLocCountryCode.setStatus("current")
_Sle2LldpRemoteMedLocCaType_Type = Integer32
_Sle2LldpRemoteMedLocCaType_Object = MibTableColumn
sle2LldpRemoteMedLocCaType = _Sle2LldpRemoteMedLocCaType_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 47),
    _Sle2LldpRemoteMedLocCaType_Type()
)
sle2LldpRemoteMedLocCaType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteMedLocCaType.setStatus("current")
_Sle2LldpRemoteMedLocCaLen_Type = Integer32
_Sle2LldpRemoteMedLocCaLen_Object = MibTableColumn
sle2LldpRemoteMedLocCaLen = _Sle2LldpRemoteMedLocCaLen_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 43, 1, 1, 48),
    _Sle2LldpRemoteMedLocCaLen_Type()
)
sle2LldpRemoteMedLocCaLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteMedLocCaLen.setStatus("current")
_Sle2LldpRemoteVlan_ObjectIdentity = ObjectIdentity
sle2LldpRemoteVlan = _Sle2LldpRemoteVlan_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 44)
)
_Sle2LldpRemoteVlanTable_Object = MibTable
sle2LldpRemoteVlanTable = _Sle2LldpRemoteVlanTable_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 44, 1)
)
if mibBuilder.loadTexts:
    sle2LldpRemoteVlanTable.setStatus("current")
_Sle2LldpRemoteVlanEntry_Object = MibTableRow
sle2LldpRemoteVlanEntry = _Sle2LldpRemoteVlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 44, 1, 1)
)
sle2LldpRemoteVlanEntry.setIndexNames(
    (0, "SLE-BRIDGE-MIB", "sle2LldpRemoteVlanIfIndex"),
    (0, "SLE-BRIDGE-MIB", "sle2LldpRemoteVlanAgentMode"),
    (0, "SLE-BRIDGE-MIB", "sle2LldpRemoteVlanId"),
)
if mibBuilder.loadTexts:
    sle2LldpRemoteVlanEntry.setStatus("current")
_Sle2LldpRemoteVlanIfIndex_Type = InterfaceIndex
_Sle2LldpRemoteVlanIfIndex_Object = MibTableColumn
sle2LldpRemoteVlanIfIndex = _Sle2LldpRemoteVlanIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 44, 1, 1, 1),
    _Sle2LldpRemoteVlanIfIndex_Type()
)
sle2LldpRemoteVlanIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteVlanIfIndex.setStatus("current")


class _Sle2LldpRemoteVlanAgentMode_Type(Integer32):
    """Custom type sle2LldpRemoteVlanAgentMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("nearest", 1),
          ("nontpmr", 2),
          ("customer", 3))
    )


_Sle2LldpRemoteVlanAgentMode_Type.__name__ = "Integer32"
_Sle2LldpRemoteVlanAgentMode_Object = MibTableColumn
sle2LldpRemoteVlanAgentMode = _Sle2LldpRemoteVlanAgentMode_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 44, 1, 1, 2),
    _Sle2LldpRemoteVlanAgentMode_Type()
)
sle2LldpRemoteVlanAgentMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteVlanAgentMode.setStatus("current")


class _Sle2LldpRemoteVlanId_Type(Integer32):
    """Custom type sle2LldpRemoteVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_Sle2LldpRemoteVlanId_Type.__name__ = "Integer32"
_Sle2LldpRemoteVlanId_Object = MibTableColumn
sle2LldpRemoteVlanId = _Sle2LldpRemoteVlanId_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 44, 1, 1, 3),
    _Sle2LldpRemoteVlanId_Type()
)
sle2LldpRemoteVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteVlanId.setStatus("current")
_Sle2LldpRemoteVlanName_Type = OctetString
_Sle2LldpRemoteVlanName_Object = MibTableColumn
sle2LldpRemoteVlanName = _Sle2LldpRemoteVlanName_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 44, 1, 1, 4),
    _Sle2LldpRemoteVlanName_Type()
)
sle2LldpRemoteVlanName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpRemoteVlanName.setStatus("current")
_Sle2LldpBase_ObjectIdentity = ObjectIdentity
sle2LldpBase = _Sle2LldpBase_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 45)
)
_Sle2LldpBaseInfo_ObjectIdentity = ObjectIdentity
sle2LldpBaseInfo = _Sle2LldpBaseInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 45, 1)
)
_Sle2LldpBaseSystemDescription_Type = OctetString
_Sle2LldpBaseSystemDescription_Object = MibScalar
sle2LldpBaseSystemDescription = _Sle2LldpBaseSystemDescription_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 45, 1, 1),
    _Sle2LldpBaseSystemDescription_Type()
)
sle2LldpBaseSystemDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpBaseSystemDescription.setStatus("current")
_Sle2LldpBaseSystemName_Type = OctetString
_Sle2LldpBaseSystemName_Object = MibScalar
sle2LldpBaseSystemName = _Sle2LldpBaseSystemName_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 45, 1, 2),
    _Sle2LldpBaseSystemName_Type()
)
sle2LldpBaseSystemName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpBaseSystemName.setStatus("current")
_Sle2LldpBaseControl_ObjectIdentity = ObjectIdentity
sle2LldpBaseControl = _Sle2LldpBaseControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 45, 2)
)


class _Sle2LldpBaseControlRequest_Type(Integer32):
    """Custom type sle2LldpBaseControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("setLldpBase", 1)
    )


_Sle2LldpBaseControlRequest_Type.__name__ = "Integer32"
_Sle2LldpBaseControlRequest_Object = MibScalar
sle2LldpBaseControlRequest = _Sle2LldpBaseControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 45, 2, 1),
    _Sle2LldpBaseControlRequest_Type()
)
sle2LldpBaseControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpBaseControlRequest.setStatus("current")
_Sle2LldpBaseControlStatus_Type = SleControlStatusType
_Sle2LldpBaseControlStatus_Object = MibScalar
sle2LldpBaseControlStatus = _Sle2LldpBaseControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 45, 2, 2),
    _Sle2LldpBaseControlStatus_Type()
)
sle2LldpBaseControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpBaseControlStatus.setStatus("current")
_Sle2LldpBaseControlTimer_Type = Gauge32
_Sle2LldpBaseControlTimer_Object = MibScalar
sle2LldpBaseControlTimer = _Sle2LldpBaseControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 45, 2, 3),
    _Sle2LldpBaseControlTimer_Type()
)
sle2LldpBaseControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpBaseControlTimer.setStatus("current")
_Sle2LldpBaseControlTimeStamp_Type = TimeTicks
_Sle2LldpBaseControlTimeStamp_Object = MibScalar
sle2LldpBaseControlTimeStamp = _Sle2LldpBaseControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 45, 2, 4),
    _Sle2LldpBaseControlTimeStamp_Type()
)
sle2LldpBaseControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpBaseControlTimeStamp.setStatus("current")
_Sle2LldpBaseControlReqResult_Type = SleControlRequestResultType
_Sle2LldpBaseControlReqResult_Object = MibScalar
sle2LldpBaseControlReqResult = _Sle2LldpBaseControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 45, 2, 5),
    _Sle2LldpBaseControlReqResult_Type()
)
sle2LldpBaseControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sle2LldpBaseControlReqResult.setStatus("current")
_Sle2LldpBaseControlSystemDescription_Type = OctetString
_Sle2LldpBaseControlSystemDescription_Object = MibScalar
sle2LldpBaseControlSystemDescription = _Sle2LldpBaseControlSystemDescription_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 45, 2, 6),
    _Sle2LldpBaseControlSystemDescription_Type()
)
sle2LldpBaseControlSystemDescription.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpBaseControlSystemDescription.setStatus("current")
_Sle2LldpBaseControlSystemName_Type = OctetString
_Sle2LldpBaseControlSystemName_Object = MibScalar
sle2LldpBaseControlSystemName = _Sle2LldpBaseControlSystemName_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 45, 2, 7),
    _Sle2LldpBaseControlSystemName_Type()
)
sle2LldpBaseControlSystemName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sle2LldpBaseControlSystemName.setStatus("current")
_SleMllcf_ObjectIdentity = ObjectIdentity
sleMllcf = _SleMllcf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 46)
)
_SleMllcfInfo_ObjectIdentity = ObjectIdentity
sleMllcfInfo = _SleMllcfInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 46, 1)
)
_SleMllcfPortsA_Type = OctetString
_SleMllcfPortsA_Object = MibScalar
sleMllcfPortsA = _SleMllcfPortsA_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 46, 1, 1),
    _SleMllcfPortsA_Type()
)
sleMllcfPortsA.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleMllcfPortsA.setStatus("current")
_SleMllcfPortsB_Type = OctetString
_SleMllcfPortsB_Object = MibScalar
sleMllcfPortsB = _SleMllcfPortsB_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 46, 1, 2),
    _SleMllcfPortsB_Type()
)
sleMllcfPortsB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleMllcfPortsB.setStatus("current")
_SleMllcfPortsALinkDownStatus_Type = OctetString
_SleMllcfPortsALinkDownStatus_Object = MibScalar
sleMllcfPortsALinkDownStatus = _SleMllcfPortsALinkDownStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 46, 1, 3),
    _SleMllcfPortsALinkDownStatus_Type()
)
sleMllcfPortsALinkDownStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleMllcfPortsALinkDownStatus.setStatus("current")
_SleMllcfPortsAAdminDownStatus_Type = OctetString
_SleMllcfPortsAAdminDownStatus_Object = MibScalar
sleMllcfPortsAAdminDownStatus = _SleMllcfPortsAAdminDownStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 46, 1, 4),
    _SleMllcfPortsAAdminDownStatus_Type()
)
sleMllcfPortsAAdminDownStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleMllcfPortsAAdminDownStatus.setStatus("current")


class _SleMllcfPortsBStatus_Type(Integer32):
    """Custom type sleMllcfPortsBStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("up", 1),
          ("forceToDown", 2))
    )


_SleMllcfPortsBStatus_Type.__name__ = "Integer32"
_SleMllcfPortsBStatus_Object = MibScalar
sleMllcfPortsBStatus = _SleMllcfPortsBStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 46, 1, 5),
    _SleMllcfPortsBStatus_Type()
)
sleMllcfPortsBStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleMllcfPortsBStatus.setStatus("current")


class _SleMllcfHoldTime_Type(Integer32):
    """Custom type sleMllcfHoldTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 10),
    )


_SleMllcfHoldTime_Type.__name__ = "Integer32"
_SleMllcfHoldTime_Object = MibScalar
sleMllcfHoldTime = _SleMllcfHoldTime_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 46, 1, 6),
    _SleMllcfHoldTime_Type()
)
sleMllcfHoldTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleMllcfHoldTime.setStatus("current")
_SleMllcfControl_ObjectIdentity = ObjectIdentity
sleMllcfControl = _SleMllcfControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 46, 2)
)


class _SleMllcfControlRequest_Type(Integer32):
    """Custom type sleMllcfControlRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("setMllcfControlPorts", 1),
          ("setMllcfControlHoldTime", 2),
          ("delMllcfControlPorts", 3))
    )


_SleMllcfControlRequest_Type.__name__ = "Integer32"
_SleMllcfControlRequest_Object = MibScalar
sleMllcfControlRequest = _SleMllcfControlRequest_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 46, 2, 1),
    _SleMllcfControlRequest_Type()
)
sleMllcfControlRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleMllcfControlRequest.setStatus("current")
_SleMllcfControlStatus_Type = SleControlStatusType
_SleMllcfControlStatus_Object = MibScalar
sleMllcfControlStatus = _SleMllcfControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 46, 2, 2),
    _SleMllcfControlStatus_Type()
)
sleMllcfControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleMllcfControlStatus.setStatus("current")
_SleMllcfControlTimer_Type = Gauge32
_SleMllcfControlTimer_Object = MibScalar
sleMllcfControlTimer = _SleMllcfControlTimer_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 46, 2, 3),
    _SleMllcfControlTimer_Type()
)
sleMllcfControlTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleMllcfControlTimer.setStatus("current")
_SleMllcfControlTimeStamp_Type = TimeTicks
_SleMllcfControlTimeStamp_Object = MibScalar
sleMllcfControlTimeStamp = _SleMllcfControlTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 46, 2, 4),
    _SleMllcfControlTimeStamp_Type()
)
sleMllcfControlTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleMllcfControlTimeStamp.setStatus("current")
_SleMllcfControlReqResult_Type = SleControlRequestResultType
_SleMllcfControlReqResult_Object = MibScalar
sleMllcfControlReqResult = _SleMllcfControlReqResult_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 46, 2, 5),
    _SleMllcfControlReqResult_Type()
)
sleMllcfControlReqResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sleMllcfControlReqResult.setStatus("current")
_SleMllcfControlPortsA_Type = OctetString
_SleMllcfControlPortsA_Object = MibScalar
sleMllcfControlPortsA = _SleMllcfControlPortsA_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 46, 2, 6),
    _SleMllcfControlPortsA_Type()
)
sleMllcfControlPortsA.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleMllcfControlPortsA.setStatus("current")
_SleMllcfControlPortsB_Type = OctetString
_SleMllcfControlPortsB_Object = MibScalar
sleMllcfControlPortsB = _SleMllcfControlPortsB_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 46, 2, 7),
    _SleMllcfControlPortsB_Type()
)
sleMllcfControlPortsB.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleMllcfControlPortsB.setStatus("current")


class _SleMllcfControlHoldTime_Type(Integer32):
    """Custom type sleMllcfControlHoldTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 10),
    )


_SleMllcfControlHoldTime_Type.__name__ = "Integer32"
_SleMllcfControlHoldTime_Object = MibScalar
sleMllcfControlHoldTime = _SleMllcfControlHoldTime_Object(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 46, 2, 8),
    _SleMllcfControlHoldTime_Type()
)
sleMllcfControlHoldTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sleMllcfControlHoldTime.setStatus("current")

# Managed Objects groups

sleBridgeGroup = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 47)
)
sleBridgeGroup.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeMacAddress"),
        ("SLE-BRIDGE-MIB", "sleBridgePortNum"),
        ("SLE-BRIDGE-MIB", "sleBridgeLagMaxId"),
        ("SLE-BRIDGE-MIB", "sleBridgeLacpActivity"),
        ("SLE-BRIDGE-MIB", "sleBridgeLacpPriority"),
        ("SLE-BRIDGE-MIB", "sleBridgeVlanSupportMode"),
        ("SLE-BRIDGE-MIB", "sleBridgeVlanMaxNum"),
        ("SLE-BRIDGE-MIB", "sleBridgeDoubleTagProtoId"),
        ("SLE-BRIDGE-MIB", "sleBridgeMirrorMode"),
        ("SLE-BRIDGE-MIB", "sleBridgeMirrorMonitorPortId"),
        ("SLE-BRIDGE-MIB", "sleBridgeMirroredIngressPorts"),
        ("SLE-BRIDGE-MIB", "sleBridgeMirroredEgressPorts"),
        ("SLE-BRIDGE-MIB", "sleBridgeMaxLearnPerUnit"),
        ("SLE-BRIDGE-MIB", "sleBridgeFdbAgeingTime"),
        ("SLE-BRIDGE-MIB", "sleBridgeFdbMaxEntries"),
        ("SLE-BRIDGE-MIB", "sleBridgeFdbCurrentEntries"),
        ("SLE-BRIDGE-MIB", "sleBridgeStackMode"),
        ("SLE-BRIDGE-MIB", "sleBridgeStackDeviceName"),
        ("SLE-BRIDGE-MIB", "sleBridgeStackNodeId"),
        ("SLE-BRIDGE-MIB", "sleBridgeLldpMessageTxInterval"),
        ("SLE-BRIDGE-MIB", "sleBridgeLldpTxHoldMultiplier"),
        ("SLE-BRIDGE-MIB", "sleBridgeLldpReinitDelay"),
        ("SLE-BRIDGE-MIB", "sleBridgeLldpTxDelay"),
        ("SLE-BRIDGE-MIB", "sleBridgeLldpNotificationInterval"),
        ("SLE-BRIDGE-MIB", "sleBridgeLldpStatsRemTablesLastChangeTime"),
        ("SLE-BRIDGE-MIB", "sleBridgeLldpStatsRemTablesInserts"),
        ("SLE-BRIDGE-MIB", "sleBridgeLldpStatsRemTablesDeletes"),
        ("SLE-BRIDGE-MIB", "sleBridgeLldpStatsRemTablesDrops"),
        ("SLE-BRIDGE-MIB", "sleBridgeLldpStatsRemTablesAgeouts"),
        ("SLE-BRIDGE-MIB", "sleBridgeLldpLocalChassisIdSubtype"),
        ("SLE-BRIDGE-MIB", "sleBridgeLldpLocalChassisId"),
        ("SLE-BRIDGE-MIB", "sleBridgeLldpLocalSysName"),
        ("SLE-BRIDGE-MIB", "sleBridgeLldpLocalSysDes"),
        ("SLE-BRIDGE-MIB", "sleBridgeLldpLocalSysCapSupported"),
        ("SLE-BRIDGE-MIB", "sleBridgeLldpLocalSysCapEnabled"),
        ("SLE-BRIDGE-MIB", "sleBridgeStpActivity"),
        ("SLE-BRIDGE-MIB", "sleBridgeStpSelfLoop"),
        ("SLE-BRIDGE-MIB", "sleBridgePvlanOnePromPortEnable"),
        ("SLE-BRIDGE-MIB", "sleBridgeTcpSyncookie"),
        ("SLE-BRIDGE-MIB", "sleBridgeTcpIgnoreRstUnknown"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlTimer"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlLacpActivity"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlLacpPriority"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlDoubleTagProtoId"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlMirrorMode"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlMirrorMonitorPortId"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlMaxLearnPerUnit"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlFdbAgeingTime"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlStackMode"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlStackDeviceName"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlLldpMessageTxInterval"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlLldpTxHoldMultiplier"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlLldpReinitDelay"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlLldpTxDelay"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlLldpNotificationInterval"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlStpActivity"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlStpSelfLoop"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlTcpSyncookie"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlTcpIgnoreRstUnknown"),
        ("SLE-BRIDGE-MIB", "sleBridgePortIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePortIfIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePortPVid"),
        ("SLE-BRIDGE-MIB", "sleBridgePortMaxHosts"),
        ("SLE-BRIDGE-MIB", "sleBridgePortCurrentHosts"),
        ("SLE-BRIDGE-MIB", "sleBridgePortMaxLearnPerUnit"),
        ("SLE-BRIDGE-MIB", "sleBridgePortMACFilterPermission"),
        ("SLE-BRIDGE-MIB", "sleBridgePortIngMirrorStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgePortEgMirrorStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgePortBcastThreshold"),
        ("SLE-BRIDGE-MIB", "sleBridgePortMcastThreshold"),
        ("SLE-BRIDGE-MIB", "sleBridgePortDlfThreshold"),
        ("SLE-BRIDGE-MIB", "sleBridgePortQinQStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgePortAdminLinktype"),
        ("SLE-BRIDGE-MIB", "sleBridgePortAdminEdgemode"),
        ("SLE-BRIDGE-MIB", "sleBridgePortOperLinktype"),
        ("SLE-BRIDGE-MIB", "sleBridgePortOperEdgemode"),
        ("SLE-BRIDGE-MIB", "sleBridgePortStpBpduFilter"),
        ("SLE-BRIDGE-MIB", "sleBridgePortPvlanIsolatedStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgePortPvlanPromPorts"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimer"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlPVid"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlMaxHosts"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlMaxLearnPerUnit"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlMACFilterPermission"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlIngMirrorStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlEgMirrorStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlBcastThreshold"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlMcastThreshold"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlDlfThreshold"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlQinQStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlAdminLinktype"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlAdminEdgemode"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlStpBpduFilter"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlPvlanIsolatedStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlPvlanPromPort"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlStpBpduGuardErrRcv"),
        ("SLE-BRIDGE-MIB", "sleVlanIndex"),
        ("SLE-BRIDGE-MIB", "sleVlanIfIndex"),
        ("SLE-BRIDGE-MIB", "sleVlanName"),
        ("SLE-BRIDGE-MIB", "sleVlanStatus"),
        ("SLE-BRIDGE-MIB", "sleVlanEgressPorts"),
        ("SLE-BRIDGE-MIB", "sleVlanUnTaggedPorts"),
        ("SLE-BRIDGE-MIB", "sleVlanCreationTime"),
        ("SLE-BRIDGE-MIB", "sleVlanAgeingTime"),
        ("SLE-BRIDGE-MIB", "sleVlanControlRequest"),
        ("SLE-BRIDGE-MIB", "sleVlanControlStatus"),
        ("SLE-BRIDGE-MIB", "sleVlanControlTimer"),
        ("SLE-BRIDGE-MIB", "sleVlanControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleVlanControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleVlanControlIndex"),
        ("SLE-BRIDGE-MIB", "sleVlanControlName"),
        ("SLE-BRIDGE-MIB", "sleVlanControlEgressPorts"),
        ("SLE-BRIDGE-MIB", "sleVlanControlUnTaggedPorts"),
        ("SLE-BRIDGE-MIB", "sleVlanControlAgeingTime"),
        ("SLE-BRIDGE-MIB", "sleVlanMapFid"),
        ("SLE-BRIDGE-MIB", "sleVlanMapStpId"),
        ("SLE-BRIDGE-MIB", "sleVlanMapErpDomainId"),
        ("SLE-BRIDGE-MIB", "sleVlanMapControlRequest"),
        ("SLE-BRIDGE-MIB", "sleVlanMapControlStatus"),
        ("SLE-BRIDGE-MIB", "sleVlanMapControlTimer"),
        ("SLE-BRIDGE-MIB", "sleVlanMapControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleVlanMapControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleVlanMapControlIndex"),
        ("SLE-BRIDGE-MIB", "sleVlanMapControlFid"),
        ("SLE-BRIDGE-MIB", "sleVlanMapControlStpId"),
        ("SLE-BRIDGE-MIB", "sleVlanMapControlErpDomainId"),
        ("SLE-BRIDGE-MIB", "sleStpOperationMode"),
        ("SLE-BRIDGE-MIB", "sleStpFormatSelector"),
        ("SLE-BRIDGE-MIB", "sleStpConfigureName"),
        ("SLE-BRIDGE-MIB", "sleStpRevisionLevel"),
        ("SLE-BRIDGE-MIB", "sleStpFwdDelay"),
        ("SLE-BRIDGE-MIB", "sleStpHelloTime"),
        ("SLE-BRIDGE-MIB", "sleStpMaxAge"),
        ("SLE-BRIDGE-MIB", "sleStpMaxHops"),
        ("SLE-BRIDGE-MIB", "sleStpExtRootBridgeId"),
        ("SLE-BRIDGE-MIB", "sleStpExtPathcost"),
        ("SLE-BRIDGE-MIB", "sleStpBpduGuardMode"),
        ("SLE-BRIDGE-MIB", "sleStpBpduGuardAutoRcvMode"),
        ("SLE-BRIDGE-MIB", "sleStpBpduGuardAutoRcvTime"),
        ("SLE-BRIDGE-MIB", "sleStpControlRequest"),
        ("SLE-BRIDGE-MIB", "sleStpControlStatus"),
        ("SLE-BRIDGE-MIB", "sleStpControlTimer"),
        ("SLE-BRIDGE-MIB", "sleStpControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleStpControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleStpControlOperationMode"),
        ("SLE-BRIDGE-MIB", "sleStpControlConfigureName"),
        ("SLE-BRIDGE-MIB", "sleStpControlRevisionLevel"),
        ("SLE-BRIDGE-MIB", "sleStpControlFwdDelay"),
        ("SLE-BRIDGE-MIB", "sleStpControlHelloTime"),
        ("SLE-BRIDGE-MIB", "sleStpControlMaxAge"),
        ("SLE-BRIDGE-MIB", "sleStpControlMaxHops"),
        ("SLE-BRIDGE-MIB", "sleStpControlBpduGuardMode"),
        ("SLE-BRIDGE-MIB", "sleStpControlBpduGuardAutoRcvMode"),
        ("SLE-BRIDGE-MIB", "sleStpControlBpduGuardAutoRcvTime"),
        ("SLE-BRIDGE-MIB", "sleStpInstanceIndex"),
        ("SLE-BRIDGE-MIB", "sleStpInstanceEnable"),
        ("SLE-BRIDGE-MIB", "sleStpInstancePriority"),
        ("SLE-BRIDGE-MIB", "sleStpInstanceRootBridgeId"),
        ("SLE-BRIDGE-MIB", "sleStpInstanceRootPathcost"),
        ("SLE-BRIDGE-MIB", "sleStpInstanceDesignatedBridgeId"),
        ("SLE-BRIDGE-MIB", "sleStpInstanceDesignatedPortId"),
        ("SLE-BRIDGE-MIB", "sleStpInstanceRootPortId"),
        ("SLE-BRIDGE-MIB", "sleStpInstanceFwdDelay"),
        ("SLE-BRIDGE-MIB", "sleStpInstanceHelloTime"),
        ("SLE-BRIDGE-MIB", "sleStpInstanceMaxAge"),
        ("SLE-BRIDGE-MIB", "sleStpInstanceRemainHops"),
        ("SLE-BRIDGE-MIB", "sleStpInstanceBrFwdDelay"),
        ("SLE-BRIDGE-MIB", "sleStpInstanceBrHelloTime"),
        ("SLE-BRIDGE-MIB", "sleStpInstanceBrMaxAge"),
        ("SLE-BRIDGE-MIB", "sleStpInstanceControlRequest"),
        ("SLE-BRIDGE-MIB", "sleStpInstanceControlStatus"),
        ("SLE-BRIDGE-MIB", "sleStpInstanceControlTimer"),
        ("SLE-BRIDGE-MIB", "sleStpInstanceControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleStpInstanceControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleStpInstanceControlIndex"),
        ("SLE-BRIDGE-MIB", "sleStpInstanceControlEnable"),
        ("SLE-BRIDGE-MIB", "sleStpInstanceControlPriority"),
        ("SLE-BRIDGE-MIB", "sleStpInstanceControlBrFwdDelay"),
        ("SLE-BRIDGE-MIB", "sleStpInstanceControlBrHelloTime"),
        ("SLE-BRIDGE-MIB", "sleStpInstanceControlBrMaxAge"),
        ("SLE-BRIDGE-MIB", "sleStpInstancePortIndex"),
        ("SLE-BRIDGE-MIB", "sleStpInstancePortPathcost"),
        ("SLE-BRIDGE-MIB", "sleStpInstancePortPriority"),
        ("SLE-BRIDGE-MIB", "sleStpInstancePortRole"),
        ("SLE-BRIDGE-MIB", "sleStpInstancePortState"),
        ("SLE-BRIDGE-MIB", "sleStpInstancePortRootBridgeId"),
        ("SLE-BRIDGE-MIB", "sleStpInstancePortRootPathcost"),
        ("SLE-BRIDGE-MIB", "sleStpInstancePortDesignateBridgeId"),
        ("SLE-BRIDGE-MIB", "sleStpInstancePortDesignatePortId"),
        ("SLE-BRIDGE-MIB", "sleStpInstancePortRootGuardMode"),
        ("SLE-BRIDGE-MIB", "sleStpInstancePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleStpInstancePortControlStatus"),
        ("SLE-BRIDGE-MIB", "sleStpInstancePortControlTimer"),
        ("SLE-BRIDGE-MIB", "sleStpInstancePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleStpInstancePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleStpInstancePortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleStpInstancePortControlInstanceId"),
        ("SLE-BRIDGE-MIB", "sleStpInstancePortControlPathcost"),
        ("SLE-BRIDGE-MIB", "sleStpInstancePortControlPriority"),
        ("SLE-BRIDGE-MIB", "sleStpInstancePortControlRootGuardMode"),
        ("SLE-BRIDGE-MIB", "sleSubnetVlanIp"),
        ("SLE-BRIDGE-MIB", "sleSubnetVlanMask"),
        ("SLE-BRIDGE-MIB", "sleSubnetVlanVid"),
        ("SLE-BRIDGE-MIB", "sleSubnetVlanControlRequest"),
        ("SLE-BRIDGE-MIB", "sleSubnetVlanControlStatus"),
        ("SLE-BRIDGE-MIB", "sleSubnetVlanControlTimer"),
        ("SLE-BRIDGE-MIB", "sleSubnetVlanControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleSubnetVlanControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleSubnetVlanControlIp"),
        ("SLE-BRIDGE-MIB", "sleSubnetVlanControlMask"),
        ("SLE-BRIDGE-MIB", "sleSubnetVlanControlVid"),
        ("SLE-BRIDGE-MIB", "sleProtocolVlanEtype"),
        ("SLE-BRIDGE-MIB", "sleProtocolVlanVid"),
        ("SLE-BRIDGE-MIB", "sleProtocolVlanControlRequest"),
        ("SLE-BRIDGE-MIB", "sleProtocolVlanControlStatus"),
        ("SLE-BRIDGE-MIB", "sleProtocolVlanControlTimer"),
        ("SLE-BRIDGE-MIB", "sleProtocolVlanControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleProtocolVlanControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleProtocolVlanControlPortIndex"),
        ("SLE-BRIDGE-MIB", "sleProtocolVlanControlEtype"),
        ("SLE-BRIDGE-MIB", "sleProtocolVlanControlVid"),
        ("SLE-BRIDGE-MIB", "sleLagIndex"),
        ("SLE-BRIDGE-MIB", "sleLagPortId"),
        ("SLE-BRIDGE-MIB", "sleLagDistMode"),
        ("SLE-BRIDGE-MIB", "sleLagPortMap"),
        ("SLE-BRIDGE-MIB", "sleLagMode"),
        ("SLE-BRIDGE-MIB", "sleLagControlRequest"),
        ("SLE-BRIDGE-MIB", "sleLagControlStatus"),
        ("SLE-BRIDGE-MIB", "sleLagControlTimer"),
        ("SLE-BRIDGE-MIB", "sleLagControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleLagControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleLagControlIndex"),
        ("SLE-BRIDGE-MIB", "sleLagControlDistMode"),
        ("SLE-BRIDGE-MIB", "sleLagControlPortMap"),
        ("SLE-BRIDGE-MIB", "sleLagControlMode"),
        ("SLE-BRIDGE-MIB", "sleLagLacpIndex"),
        ("SLE-BRIDGE-MIB", "sleLagLacpActorAggregatorKey"),
        ("SLE-BRIDGE-MIB", "sleLagLacpActorSystemMAC"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPartnerSystemMAC"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPartnerSystemPriority"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPartnerAggregatorKey"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortIndex"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortActivity"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortActorPriority"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortActorAggregatorId"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortActorAdminKey"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortActorAdminState"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortActorOperKey"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortActorOperState"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortPartnerAdminSystemMAC"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortPartnerAdminSystemPriority"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortPartnerAdminKey"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortPartnerAdminNum"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortPartnerAdminPriority"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortPartnerAdminState"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortPartnerOperSystemMAC"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortPartnerOperSystemPriority"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortPartnerOperKey"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortPartnerOperNum"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortPartnerOperPriority"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortPartnerOperState"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortControlStatus"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortControlTimer"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortControlActivity"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortControlMode"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortControlAdminKey"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortControlAggregation"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortControlPriority"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortControlTimeout"),
        ("SLE-BRIDGE-MIB", "sleFdbEntryFid"),
        ("SLE-BRIDGE-MIB", "sleFdbEntryPort"),
        ("SLE-BRIDGE-MIB", "sleFdbEntryMacAddress"),
        ("SLE-BRIDGE-MIB", "sleFdbEntryVid"),
        ("SLE-BRIDGE-MIB", "sleFdbEntryMode"),
        ("SLE-BRIDGE-MIB", "sleFdbEntryPermission"),
        ("SLE-BRIDGE-MIB", "sleFdbEntryElapsedTime"),
        ("SLE-BRIDGE-MIB", "sleFdbEntryControlRequest"),
        ("SLE-BRIDGE-MIB", "sleFdbEntryControlStatus"),
        ("SLE-BRIDGE-MIB", "sleFdbEntryControlTimer"),
        ("SLE-BRIDGE-MIB", "sleFdbEntryControlTImeStamp"),
        ("SLE-BRIDGE-MIB", "sleFdbEntryControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleFdbEntryControlFid"),
        ("SLE-BRIDGE-MIB", "sleFdbEntryControlPort"),
        ("SLE-BRIDGE-MIB", "sleFdbEntryControlMacAddress"),
        ("SLE-BRIDGE-MIB", "sleIgmpConfVlanIndex"),
        ("SLE-BRIDGE-MIB", "sleIgmpConfEnable"),
        ("SLE-BRIDGE-MIB", "sleIgmpConfMulticastFilter"),
        ("SLE-BRIDGE-MIB", "sleIgmpConfOutmostVlan"),
        ("SLE-BRIDGE-MIB", "sleIgmpConfSnoopEnable"),
        ("SLE-BRIDGE-MIB", "sleIgmpConfSnoopJoinDelay"),
        ("SLE-BRIDGE-MIB", "sleIgmpConfSnoopQueryDelay"),
        ("SLE-BRIDGE-MIB", "sleIgmpConfSnoopMrouter"),
        ("SLE-BRIDGE-MIB", "sleIgmpConfSnoopFastLeave"),
        ("SLE-BRIDGE-MIB", "sleIgmpConfSnoopQuerier"),
        ("SLE-BRIDGE-MIB", "sleIgmpConfControlRequest"),
        ("SLE-BRIDGE-MIB", "sleIgmpConfControlStatus"),
        ("SLE-BRIDGE-MIB", "sleIgmpConfControlTimer"),
        ("SLE-BRIDGE-MIB", "sleIgmpConfControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleIgmpConfControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleIgmpConfControlVlanIndex"),
        ("SLE-BRIDGE-MIB", "sleIgmpConfControlEnable"),
        ("SLE-BRIDGE-MIB", "sleIgmpConfControlMulticastFilter"),
        ("SLE-BRIDGE-MIB", "sleIgmpConfControlOutmostVlan"),
        ("SLE-BRIDGE-MIB", "sleIgmpConfControlSnoopEnable"),
        ("SLE-BRIDGE-MIB", "sleIgmpConfControlSnoopJoinDelay"),
        ("SLE-BRIDGE-MIB", "sleIgmpConfControlSnoopQueryDelay"),
        ("SLE-BRIDGE-MIB", "sleIgmpConfControlSnoopMrouter"),
        ("SLE-BRIDGE-MIB", "sleIgmpConfControlSnoopFastLeave"),
        ("SLE-BRIDGE-MIB", "sleIgmpConfControlSnoopQuerier"),
        ("SLE-BRIDGE-MIB", "sleIgmpMcastVlanIndex"),
        ("SLE-BRIDGE-MIB", "sleIgmpMcastIPAddress"),
        ("SLE-BRIDGE-MIB", "sleIgmpMcastPortIndex"),
        ("SLE-BRIDGE-MIB", "sleIgmpMcastType"),
        ("SLE-BRIDGE-MIB", "sleIgmpMcastExpireTime"),
        ("SLE-BRIDGE-MIB", "sleIgmpMcastControlReqest"),
        ("SLE-BRIDGE-MIB", "sleIgmpMcastControlStatus"),
        ("SLE-BRIDGE-MIB", "sleIgmpMcastControlTimer"),
        ("SLE-BRIDGE-MIB", "sleIgmpMcastControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleIgmpMcastControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleIgmpMcastControlVlanIndex"),
        ("SLE-BRIDGE-MIB", "sleIgmpMcastControlIPAddress"),
        ("SLE-BRIDGE-MIB", "sleIgmpMcastControlPortIndex"),
        ("SLE-BRIDGE-MIB", "sleStackDeviceMacAddress"),
        ("SLE-BRIDGE-MIB", "sleStackDeviceNodeId"),
        ("SLE-BRIDGE-MIB", "sleStackDeviceDescriptor"),
        ("SLE-BRIDGE-MIB", "sleStackDeviceMode"),
        ("SLE-BRIDGE-MIB", "sleStackDeviceStatus"),
        ("SLE-BRIDGE-MIB", "sleStackDeviceType"),
        ("SLE-BRIDGE-MIB", "sleStackDeviceHostName"),
        ("SLE-BRIDGE-MIB", "sleStackDevicePortNum"),
        ("SLE-BRIDGE-MIB", "sleStackDeviceControlRequest"),
        ("SLE-BRIDGE-MIB", "sleStackDeviceControlStatus"),
        ("SLE-BRIDGE-MIB", "sleStackDeviceControlTimer"),
        ("SLE-BRIDGE-MIB", "sleStackDeviceControlTImeStamp"),
        ("SLE-BRIDGE-MIB", "sleStackDeviceControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleStackDeviceControlMacAddress"),
        ("SLE-BRIDGE-MIB", "sleStackDeviceControlDescriptor"),
        ("SLE-BRIDGE-MIB", "sleErpDomainIndex"),
        ("SLE-BRIDGE-MIB", "sleErpDomainName"),
        ("SLE-BRIDGE-MIB", "sleErpDomainPrimaryPort"),
        ("SLE-BRIDGE-MIB", "sleErpDomainSecondaryPort"),
        ("SLE-BRIDGE-MIB", "sleErpDomainBridgeRole"),
        ("SLE-BRIDGE-MIB", "sleErpDomainProtectionActivation"),
        ("SLE-BRIDGE-MIB", "sleErpDomainOperatorRequest"),
        ("SLE-BRIDGE-MIB", "sleErpDomainWaitToRestoreTime"),
        ("SLE-BRIDGE-MIB", "sleErpDomainTestPacketInterval"),
        ("SLE-BRIDGE-MIB", "sleErpDomainLearningDisabledTime"),
        ("SLE-BRIDGE-MIB", "sleErpDomainNodeStatus"),
        ("SLE-BRIDGE-MIB", "sleErpDomainRingStatus"),
        ("SLE-BRIDGE-MIB", "sleErpDomainLotp"),
        ("SLE-BRIDGE-MIB", "sleErpDomainULotp"),
        ("SLE-BRIDGE-MIB", "sleErpDomainMultipleRM"),
        ("SLE-BRIDGE-MIB", "sleErpDomainRMNodeReacheablility"),
        ("SLE-BRIDGE-MIB", "sleErpDomainControlRequest"),
        ("SLE-BRIDGE-MIB", "sleErpDomainControlStatus"),
        ("SLE-BRIDGE-MIB", "sleErpDomainControlTimer"),
        ("SLE-BRIDGE-MIB", "sleErpDomainControlTImeStamp"),
        ("SLE-BRIDGE-MIB", "sleErpDomainControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleErpDomainControlIndex"),
        ("SLE-BRIDGE-MIB", "sleErpDomainControlName"),
        ("SLE-BRIDGE-MIB", "sleErpDomainControlPrimaryPort"),
        ("SLE-BRIDGE-MIB", "sleErpDomainControlSecondaryPort"),
        ("SLE-BRIDGE-MIB", "sleErpDomainControlBridgeRole"),
        ("SLE-BRIDGE-MIB", "sleErpDomainControlProtectionActivation"),
        ("SLE-BRIDGE-MIB", "sleErpDomainControlOperatorRequest"),
        ("SLE-BRIDGE-MIB", "sleErpDomainControlWaitToRestoreTime"),
        ("SLE-BRIDGE-MIB", "sleErpDomainControlTestPacketInterval"),
        ("SLE-BRIDGE-MIB", "sleErpDomainControlLearningDisabledTime"),
        ("SLE-BRIDGE-MIB", "sleLldpPortIndex"),
        ("SLE-BRIDGE-MIB", "sleLldpPortActivity"),
        ("SLE-BRIDGE-MIB", "sleLldpPortAdminStatus"),
        ("SLE-BRIDGE-MIB", "sleLldpPortNotificationEnable"),
        ("SLE-BRIDGE-MIB", "sleLldpPortTLVsTxEnable"),
        ("SLE-BRIDGE-MIB", "sleLldpPortMgmtTxEnable"),
        ("SLE-BRIDGE-MIB", "sleLldpPortMgmtAddress"),
        ("SLE-BRIDGE-MIB", "sleLldpPortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleLldpPortControlStatus"),
        ("SLE-BRIDGE-MIB", "sleLldpPortControlTimer"),
        ("SLE-BRIDGE-MIB", "sleLldpPortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleLldpPortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleLldpPortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleLldpPortControlActivity"),
        ("SLE-BRIDGE-MIB", "sleLldpPortControlAdminstatus"),
        ("SLE-BRIDGE-MIB", "sleLldpPortControlNotificationEnable"),
        ("SLE-BRIDGE-MIB", "sleLldpPortControlTLVsTxEnable"),
        ("SLE-BRIDGE-MIB", "sleLldpPortControlMgmtTxEnable"),
        ("SLE-BRIDGE-MIB", "sleLldpPortControlMgmtAddress"),
        ("SLE-BRIDGE-MIB", "sleLldpRemIndex"),
        ("SLE-BRIDGE-MIB", "sleLldpRemTimeMark"),
        ("SLE-BRIDGE-MIB", "sleLldpRemChassisIdSubtype"),
        ("SLE-BRIDGE-MIB", "sleLldpRemChassisId"),
        ("SLE-BRIDGE-MIB", "sleLldpRemPortIdSubtype"),
        ("SLE-BRIDGE-MIB", "sleLldpRemPortId"),
        ("SLE-BRIDGE-MIB", "sleLldpRemPortDesc"),
        ("SLE-BRIDGE-MIB", "sleLldpRemSysName"),
        ("SLE-BRIDGE-MIB", "sleLldpRemSysDesc"),
        ("SLE-BRIDGE-MIB", "sleLldpRemSysCapSupported"),
        ("SLE-BRIDGE-MIB", "sleLldpRemSysCapEnabled"),
        ("SLE-BRIDGE-MIB", "sleLldpStatsTxPortFramesTotal"),
        ("SLE-BRIDGE-MIB", "sleLldpStatsRxPortFramesDiscardedTotal"),
        ("SLE-BRIDGE-MIB", "sleLldpStatsRxPortFramesErrors"),
        ("SLE-BRIDGE-MIB", "sleLldpStatsRxPortFramesTotal"),
        ("SLE-BRIDGE-MIB", "sleLldpStatsRxPortTLVsDiscardedTotal"),
        ("SLE-BRIDGE-MIB", "sleLldpStatsRxPortTLVsUnrecognizedTotal"),
        ("SLE-BRIDGE-MIB", "sleLldpStatsRxPortAgeoutsTotal"),
        ("SLE-BRIDGE-MIB", "sleLldpStatsControlRequest"),
        ("SLE-BRIDGE-MIB", "sleLldpStatsControlStatus"),
        ("SLE-BRIDGE-MIB", "sleLldpStatsControlTimer"),
        ("SLE-BRIDGE-MIB", "sleLldpStatsControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleLldpStatsControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleLldpStatsControlPortIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePSIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePSStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgePSMaxCount"),
        ("SLE-BRIDGE-MIB", "sleBridgePSCurrCount"),
        ("SLE-BRIDGE-MIB", "sleBridgePSAgingType"),
        ("SLE-BRIDGE-MIB", "sleBridgePSAgingTimer"),
        ("SLE-BRIDGE-MIB", "sleBridgePSAgingStatic"),
        ("SLE-BRIDGE-MIB", "sleBridgePSViolation"),
        ("SLE-BRIDGE-MIB", "sleBridgePSControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePSControlStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgePSControlTimer"),
        ("SLE-BRIDGE-MIB", "sleBridgePSControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePSControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePSControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePSControlPSStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgePSControlMaxCount"),
        ("SLE-BRIDGE-MIB", "sleBridgePSControlAgingType"),
        ("SLE-BRIDGE-MIB", "sleBridgePSControlAgingTimer"),
        ("SLE-BRIDGE-MIB", "sleBridgePSControlAgingStatic"),
        ("SLE-BRIDGE-MIB", "sleBridgePScontrolViolation"),
        ("SLE-BRIDGE-MIB", "sleBridgePSFdbPort"),
        ("SLE-BRIDGE-MIB", "sleBridgePSFdbVid"),
        ("SLE-BRIDGE-MIB", "sleBridgePSFdbMacAddress"),
        ("SLE-BRIDGE-MIB", "sleBridgePSFdbMode"),
        ("SLE-BRIDGE-MIB", "sleBridgePSFdbElapsedTime"),
        ("SLE-BRIDGE-MIB", "sleBridgePSFdbControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePSFdbControlStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgePSFdbControlTimer"),
        ("SLE-BRIDGE-MIB", "sleBridgePSFdbControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePSFdbControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePSFdbControlPort"),
        ("SLE-BRIDGE-MIB", "sleBridgePSFdbControlVid"),
        ("SLE-BRIDGE-MIB", "sleErpDomainControlRingPriority"),
        ("SLE-BRIDGE-MIB", "sleErpDomainHoldOffTime"),
        ("SLE-BRIDGE-MIB", "sleErpDomainRingPriority"),
        ("SLE-BRIDGE-MIB", "sleErpDomainControlHoldOffTime"),
        ("SLE-BRIDGE-MIB", "sleErpDomainControlLotp"),
        ("SLE-BRIDGE-MIB", "sleErpDomainControlULotp"),
        ("SLE-BRIDGE-MIB", "sleErpDomainControlMultipleRM"),
        ("SLE-BRIDGE-MIB", "sleErpDomainControlRMNodeReacheablility"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGBaseControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGBaseSfgdEnabled"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGBaseMfgdEnabled"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGBaseCfgdEnabled"),
        ("SLE-BRIDGE-MIB", "sleBridgePSFdbControlMacAddress"),
        ("SLE-BRIDGE-MIB", "sleBridgePortDhcpFilterServer"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlDhcpFilterServer"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGBaseControlStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGBaseControlTimer"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGBaseControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGBaseControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGBaseControlCfgdEnable"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGBaseControlSfgdEnable"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGPortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGPortControlStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGPortControlTimer"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGPortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGPortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGPortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGPortType"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGPortFrame"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGPortBlocked"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGPortTimer"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGPortControlFrame"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGPortFrameType"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGPortControlBlock"),
        ("SLE-BRIDGE-MIB", "sleBridgeAutoInterfaceActivation"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlAutoInterfaceActivation"),
        ("SLE-BRIDGE-MIB", "sleBridgeLoopDetectStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgeLoopDetectPacketType"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlLoopDetectStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlLoopDetectPacketType"),
        ("SLE-BRIDGE-MIB", "sleBridgePortLoopDetectStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgePortLoopDetectBlock"),
        ("SLE-BRIDGE-MIB", "sleBridgePortLoopDetectPeriod"),
        ("SLE-BRIDGE-MIB", "sleBridgePortLoopDetectTimer"),
        ("SLE-BRIDGE-MIB", "sleBridgePortLoopDetectBlockStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlLoopDetectStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlLoopDetectBlock"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlLoopDetectPeriod"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlLoopDetectTimer"),
        ("SLE-BRIDGE-MIB", "sleBridgePvlanPromSelectMode"),
        ("SLE-BRIDGE-MIB", "sleBridgePvlanPromiscuousPorts"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlPvlanPromSelectMode"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlPvlanPromiscuousPorts"),
        ("SLE-BRIDGE-MIB", "sleBridgeVTServiceId"),
        ("SLE-BRIDGE-MIB", "sleBridgeVTSubscriberId"),
        ("SLE-BRIDGE-MIB", "sleBridgeVTRuleMac"),
        ("SLE-BRIDGE-MIB", "sleBridgeVTRuleVid"),
        ("SLE-BRIDGE-MIB", "sleBridgeVTRuleRDirVid"),
        ("SLE-BRIDGE-MIB", "sleBridgeVTRuleRDirPort"),
        ("SLE-BRIDGE-MIB", "sleBridgeVTRuleStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgeVTControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeVTControlStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgeVTControlTimer"),
        ("SLE-BRIDGE-MIB", "sleBridgeVTControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeVTControlServerId"),
        ("SLE-BRIDGE-MIB", "sleBridgeVTControlClientId"),
        ("SLE-BRIDGE-MIB", "sleBridgeGvrpStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgeGmrpStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpTimerJoin"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpTimerLeave"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpTimerLeaveAll"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpBaseControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpBaseControlStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpBaseControlTimer"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpBaseControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpBaseControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpBaseControlGvrpStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpBaseControlGmrpStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpBaseControlTimerJoin"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpBaseControlTimerLeave"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpBaseControlTimerLeaveAll"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortType"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortFailedRegistrations"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortLastPduOrigin"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortRegistration"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortApplicant"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortFwdAll"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortTimerJoin"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortTimerLeave"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortTimerLeaveAll"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortControlStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortControlTimer"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortControlType"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortControlPortStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortControlRegistration"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortControlApplicant"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortControlFwdAll"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortControlTimerJoin"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortControlTimerLeave"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortControlTimerLeaveAll"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpStatsJoinEmptyReceived"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpStatsJoinInReceived"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpStatsLeaveInReceived"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpStatsLeaveEmptyReceived"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpStatsLeaveAllReceived"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpStatsJoinInTransmitted"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpStatsEmptyTransmitted"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpStatsLeaveInTransmitted"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpStatsLeaveEmptyTransmitted"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpStatsControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpStatstControlStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpStatsControlTimer"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpStatsControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpStatsControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpStatsControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpStatsControlType"),
        ("SLE-BRIDGE-MIB", "sleBridgeGmrpStaticVid"),
        ("SLE-BRIDGE-MIB", "sleBridgeGmrpStaticPort"),
        ("SLE-BRIDGE-MIB", "sleBridgeGmrpStaticGmac"),
        ("SLE-BRIDGE-MIB", "sleBridgeGmrpStaticControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeGmrpStaticControlStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgeGmrpStaticControlTimer"),
        ("SLE-BRIDGE-MIB", "sleBridgeGmrpStaticControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeGmrpStaticControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeGmrpStaticControlVid"),
        ("SLE-BRIDGE-MIB", "sleBridgeGmrpStaticControlPort"),
        ("SLE-BRIDGE-MIB", "sleBridgeGmrpStaticControlGmac"),
        ("SLE-BRIDGE-MIB", "sleBridgePortNetBIOSFilter"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlNetBIOSFilter"),
        ("SLE-BRIDGE-MIB", "sleBridgePortPopInnertag"),
        ("SLE-BRIDGE-MIB", "sleBridgePortInnertag"),
        ("SLE-BRIDGE-MIB", "sleBridgePortPriority"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlPushInnertag"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlPopInnertag"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlInnertag"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlPriority"),
        ("SLE-BRIDGE-MIB", "sleBridgePortPushInnertag"),
        ("SLE-BRIDGE-MIB", "sleVlanInboundTagPortIndex"),
        ("SLE-BRIDGE-MIB", "sleVlanInboundTagVlanIndex"),
        ("SLE-BRIDGE-MIB", "sleVlanInboundTagOuterVid"),
        ("SLE-BRIDGE-MIB", "sleVlanInboundTagControlRequest"),
        ("SLE-BRIDGE-MIB", "sleVlanInboundTagControlStatus"),
        ("SLE-BRIDGE-MIB", "sleVlanInboundTagControlTimer"),
        ("SLE-BRIDGE-MIB", "sleVlanInboundTagControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleVlanInboundTagControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleVlanInboundTagControlPortIndex"),
        ("SLE-BRIDGE-MIB", "sleVlanInboundTagControlVlanIndex"),
        ("SLE-BRIDGE-MIB", "sleVlanInboundTagControlOuterVid"),
        ("SLE-BRIDGE-MIB", "sleVlanOutboundTagPortIndex"),
        ("SLE-BRIDGE-MIB", "sleVlanOutboundTagControlRequest"),
        ("SLE-BRIDGE-MIB", "sleVlanOutboundTagControlStatus"),
        ("SLE-BRIDGE-MIB", "sleVlanOutboundTagControlTimer"),
        ("SLE-BRIDGE-MIB", "sleVlanOutboundTagControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleVlanOutboundTagControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleVlanOutboundTagControlPortIndex"),
        ("SLE-BRIDGE-MIB", "sleVlanOutboundTagControlOuterVid"),
        ("SLE-BRIDGE-MIB", "sleVlanOutboundTagVlanIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePortInner2outerVid"),
        ("SLE-BRIDGE-MIB", "sleBridgePortInner2outerPri"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGPortControlFrameType"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGPortControlType"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGPortControlSetTimer"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpStatsEmptyReceived"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpStatsJoinEmptyTransmitted"),
        ("SLE-BRIDGE-MIB", "sleIgmpMcastCounterInfoGroupCount"),
        ("SLE-BRIDGE-MIB", "sleIgmpMcastCounterInfoSnoopingCount"),
        ("SLE-BRIDGE-MIB", "sleMcastMrouteJoinedCount"),
        ("SLE-BRIDGE-MIB", "sleBridgePortLinkUpCnt"),
        ("SLE-BRIDGE-MIB", "sleBridgePortLinkDownCnt"),
        ("SLE-BRIDGE-MIB", "sleBridgePortLinkUpTime"),
        ("SLE-BRIDGE-MIB", "sleBridgePortElapsedTimeAfterClearStats"),
        ("SLE-BRIDGE-MIB", "sleVlanTagTxCounter"),
        ("SLE-BRIDGE-MIB", "sleBridgePortMACLearningStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgePortPortBridgeStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlMACLearningStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlPortBridgeStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgeInBoundVTPortIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeInBoundVTNewVid"),
        ("SLE-BRIDGE-MIB", "sleBridgeInBoundVTControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeInBoundVTControlStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgeInBoundVTControlTimer"),
        ("SLE-BRIDGE-MIB", "sleBridgeInBoundVTControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeInBoundVTControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeInBoundVTControlPortIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeInBoundVTControlNewVid"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpStatsLeaveAllTransmitted"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlInner2outerPri"),
        ("SLE-BRIDGE-MIB", "sleBridgeInBoundVTVlanIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeInBoundVTOperStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgeInBoundVTControlVlanIndex"),
        ("SLE-BRIDGE-MIB", "sleVlanInboundTagOperStatus"),
        ("SLE-BRIDGE-MIB", "sleVlanOutboundTagOperStatus"),
        ("SLE-BRIDGE-MIB", "sleVlanRangeInboundTagOperStatus"),
        ("SLE-BRIDGE-MIB", "sleVlanControlIndexTo"),
        ("SLE-BRIDGE-MIB", "sleBridgeUnknownMcastBlockAllPorts"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlUnknownMcastBlockAllPorts"),
        ("SLE-BRIDGE-MIB", "sleBridgePortUnknownMcastBlock"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlUnknownMcastBlock"),
        ("SLE-BRIDGE-MIB", "sleBridgeEcmpHashType"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlEcmpHashType"),
        ("SLE-BRIDGE-MIB", "sleBridgeTcpSynguard"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlTcpSynguard"),
        ("SLE-BRIDGE-MIB", "sleBridgePortDescription"),
        ("SLE-BRIDGE-MIB", "sleBridgePortHoldTime"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlDescription"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlHoldTime"),
        ("SLE-BRIDGE-MIB", "sleLagLacpStatsPduReceived"),
        ("SLE-BRIDGE-MIB", "sleLagLacpStatsPduReceivedErrrors"),
        ("SLE-BRIDGE-MIB", "sleLagLacpStatsPduSent"),
        ("SLE-BRIDGE-MIB", "sleLagLacpStatsPduSentError"),
        ("SLE-BRIDGE-MIB", "sleLagLacpStatsMarkerReceived"),
        ("SLE-BRIDGE-MIB", "sleLagLacpStatsMarkerSent"),
        ("SLE-BRIDGE-MIB", "sleLagLacpStatsMarkerSentError"),
        ("SLE-BRIDGE-MIB", "sleLagLacpControlRequest"),
        ("SLE-BRIDGE-MIB", "sleLagLacpControlStatus"),
        ("SLE-BRIDGE-MIB", "sleLagLacpControlTimer"),
        ("SLE-BRIDGE-MIB", "sleLagLacpControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleLagLacpControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeOuterTagProtoId"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlOuterTagProtoId"),
        ("SLE-BRIDGE-MIB", "sleBridgeOutBoundVTPortIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeOutBoundVTVlanIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeOutBoundVTNewVid"),
        ("SLE-BRIDGE-MIB", "sleBridgeOutBoundVTOperStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgeOutBoundVTControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeOutBoundVTControlStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgeOutBoundVTControlTimer"),
        ("SLE-BRIDGE-MIB", "sleBridgeOutBoundVTControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeOutBoundVTControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeOutBoundVTControlPortIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeOutBoundVTControlVlanIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeOutBoundVTControlNewVid"),
        ("SLE-BRIDGE-MIB", "sleBridgeMacAntiSpoofing"),
        ("SLE-BRIDGE-MIB", "sleBridgeMacReplace"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlMacAntiSpoofing"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlMacReplace"),
        ("SLE-BRIDGE-MIB", "sleBridgePortMacAntiSpoofing"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlMacAntiSpoofing"),
        ("SLE-BRIDGE-MIB", "sleVlanProtoIdVid"),
        ("SLE-BRIDGE-MIB", "sleVlanProtoIdOuterProtoId"),
        ("SLE-BRIDGE-MIB", "sleVlanProtoIdControlRequest"),
        ("SLE-BRIDGE-MIB", "sleVlanProtoIdControlStatus"),
        ("SLE-BRIDGE-MIB", "sleVlanProtoIdControlTimer"),
        ("SLE-BRIDGE-MIB", "sleVlanProtoIdControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleVlanProtoIdControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleVlanProtoIdControlVid"),
        ("SLE-BRIDGE-MIB", "sleVlanProtoIdControlOuterProtoId"),
        ("SLE-BRIDGE-MIB", "sleBridgeStormControlBcast"),
        ("SLE-BRIDGE-MIB", "sleBridgeStormControlDLF"),
        ("SLE-BRIDGE-MIB", "sleBridgeStormControlMulticast"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlStormControlBcast"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlStormControlDLF"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlStormControlMulticast"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingIndex"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingPortId"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingOriVlanId"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingTransVlanId"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingMode"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingMatchCos"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingMatchDscp"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingMatchEthType"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingMatchIPPrecedence"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingMatchTos"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingRateLimit"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingCos"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingDscp"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingControlRequest"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingControlStatus"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingControlTimer"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingControlPortId"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingControlOriVlanId"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingControlTransVlanID"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingControlMode"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingControlMatchCos"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingControlMatchDscp"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingControlMatchEthType"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingControlMatchIPPrecedence"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingControlMatchTos"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingControlRateLimit"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingControlCos"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingControlDscp"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeMacLearningMode"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlMacLearningMode"),
        ("SLE-BRIDGE-MIB", "sleLldpRemManAddrSubType"),
        ("SLE-BRIDGE-MIB", "sleLldpRemManAddr"),
        ("SLE-BRIDGE-MIB", "sleLldpRemManAddrIfSubType"),
        ("SLE-BRIDGE-MIB", "sleLldpRemManAddrIfId"),
        ("SLE-BRIDGE-MIB", "sleLldpRemAddrOid"),
        ("SLE-BRIDGE-MIB", "sleBridgeLagGlobalDistMode"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlLagGlobalDistMode"),
        ("SLE-BRIDGE-MIB", "sleVlanDescription"),
        ("SLE-BRIDGE-MIB", "sleVlanControlDescription"),
        ("SLE-BRIDGE-MIB", "sleVlanElineEnable"),
        ("SLE-BRIDGE-MIB", "sleVlanControlElineEnable"),
        ("SLE-BRIDGE-MIB", "sleBridgePortSwitchType"),
        ("SLE-BRIDGE-MIB", "sleBridgePortSwitchState"),
        ("SLE-BRIDGE-MIB", "sleBridgePortSwitchMode"),
        ("SLE-BRIDGE-MIB", "sleBridgePortSwitchSubMode"),
        ("SLE-BRIDGE-MIB", "sleBridgePortSwitchDefaultVlan"),
        ("SLE-BRIDGE-MIB", "sleBridgePortSwitchIngressFilter"),
        ("SLE-BRIDGE-MIB", "sleBridgePortSwitchAccFrameType"),
        ("SLE-BRIDGE-MIB", "sleBridgePortSwitchNativeVid"),
        ("SLE-BRIDGE-MIB", "sleBridgePortSwitchAllowedVlan"),
        ("SLE-BRIDGE-MIB", "sleBridgePortSwitchAllowedVlanEtag"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlSwitchStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlSwitchMode"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlSwitchSubMode"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlSwitchDefaultVlan"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlSwitchIngressFilter"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlSwitchAccFrameType"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlSwitchNativeVid"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlSwitchAllowedVlan"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlSwitchAllowedVlanEtag"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlInner2outerVid"),
        ("SLE-BRIDGE-MIB", "sleBridgeInnerTagProtoId"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlInnerTagProtoId"),
        ("SLE-BRIDGE-MIB", "sleBridgeVTControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleVlanRangeInboundTagPortIndex"),
        ("SLE-BRIDGE-MIB", "sleVlanRangeInboundTagMinVlanIndex"),
        ("SLE-BRIDGE-MIB", "sleVlanRangeInboundTagMaxVlanIndex"),
        ("SLE-BRIDGE-MIB", "sleVlanRangeInboundTagOuterVid"),
        ("SLE-BRIDGE-MIB", "sleVlanRangeInboundTagControlRequest"),
        ("SLE-BRIDGE-MIB", "sleVlanRangeInboundTagControlStatus"),
        ("SLE-BRIDGE-MIB", "sleVlanRangeInboundTagControlTimer"),
        ("SLE-BRIDGE-MIB", "sleVlanRangeInboundTagControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleVlanRangeInboundTagControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleVlanRangeInboundTagControlPortIndex"),
        ("SLE-BRIDGE-MIB", "sleVlanRangeInboundTagControlMinVlanIndex"),
        ("SLE-BRIDGE-MIB", "sleVlanRangeInboundTagControlMaxVlanIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeMultiPortLlcfPortAStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgeMultiPortLlcfPortBStatus"),
        ("SLE-BRIDGE-MIB", "sleVlanRangeInboundTagControlOuterVid"),
        ("SLE-BRIDGE-MIB", "sleBridgeMultiPortLlcfPortA"),
        ("SLE-BRIDGE-MIB", "sleBridgeMultiPortLlcfPortB"),
        ("SLE-BRIDGE-MIB", "sleBridgeMultiPortLlcfTimer"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlMultiPortLlcfPortA"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlMultiPortLlcfPortB"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlMultiPortLlcfPortC"),
        ("SLE-BRIDGE-MIB", "sleVlanOperStatus"),
        ("SLE-BRIDGE-MIB", "sleVlanMtu"),
        ("SLE-BRIDGE-MIB", "sleVlanControlOperStatus"),
        ("SLE-BRIDGE-MIB", "sleVlanControlMtu"),
        ("SLE-BRIDGE-MIB", "sleBridgePortSwitchChannelType"),
        ("SLE-BRIDGE-MIB", "sleBridgePortSwitchStaticChannelGroup"),
        ("SLE-BRIDGE-MIB", "sleBridgePortSwitchChannelLoadbalance"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlSwitchStaticChannelGroup"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlSwitchChannelLoadbalance"),
        ("SLE-BRIDGE-MIB", "sleVlanInboundTagVlanPriority"),
        ("SLE-BRIDGE-MIB", "sleVlanInboundTagOuterVlanPriority"),
        ("SLE-BRIDGE-MIB", "sleVlanInboundTagControlVlanPriority"),
        ("SLE-BRIDGE-MIB", "sleVlanInboundTagControlOuterVlanPriority"),
        ("SLE-BRIDGE-MIB", "slePowerInlinePortIndex"),
        ("SLE-BRIDGE-MIB", "slePowerInlineAdminStatus"),
        ("SLE-BRIDGE-MIB", "slePowerInlinePortStatus"),
        ("SLE-BRIDGE-MIB", "slePowerInlineDetectionStatus"),
        ("SLE-BRIDGE-MIB", "slePowerInlinePortClass"),
        ("SLE-BRIDGE-MIB", "slePowerInlinePortMaxPow"),
        ("SLE-BRIDGE-MIB", "slePowerInlinePortLegacy"),
        ("SLE-BRIDGE-MIB", "slePowerInlinePortPriority"),
        ("SLE-BRIDGE-MIB", "slePowerInlinePortPower"),
        ("SLE-BRIDGE-MIB", "slePowerInlinePortCurrent"),
        ("SLE-BRIDGE-MIB", "slePowerInlinePortVoltage"),
        ("SLE-BRIDGE-MIB", "slePowerInlinePortTemperture"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlRequest"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlStatus"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlTimer"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlReqResult"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlPortIndex"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlPortStatus"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlPortClass"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlPortMaxPower"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlPortLegacy"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlPriority"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlAdminStatus"),
        ("SLE-BRIDGE-MIB", "sleLagLeastActive"),
        ("SLE-BRIDGE-MIB", "sleLagControlLeastActive"),
        ("SLE-BRIDGE-MIB", "sleMfdbOldMacAddress"),
        ("SLE-BRIDGE-MIB", "sleMfdbOldEntryPermission"),
        ("SLE-BRIDGE-MIB", "sleMfdbOldVlanIndex"),
        ("SLE-BRIDGE-MIB", "sleMfdbOldPorts"),
        ("SLE-BRIDGE-MIB", "sleMfdbOldControlRequest"),
        ("SLE-BRIDGE-MIB", "sleMfdbOldControlStatus"),
        ("SLE-BRIDGE-MIB", "sleMfdbOldControlTimer"),
        ("SLE-BRIDGE-MIB", "sleMfdbOldControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleMfdbOldControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleMfdbOldControlMacAddress"),
        ("SLE-BRIDGE-MIB", "sleMfdbOldControlEntryPermission"),
        ("SLE-BRIDGE-MIB", "sleMfdbOldControlVlanIndex"),
        ("SLE-BRIDGE-MIB", "sleMfdbOldControlPorts"),
        ("SLE-BRIDGE-MIB", "sleMfdbMacAddress"),
        ("SLE-BRIDGE-MIB", "sleMfdbEntryPermission"),
        ("SLE-BRIDGE-MIB", "sleMfdbVlanIndex"),
        ("SLE-BRIDGE-MIB", "sleMfdbPorts"),
        ("SLE-BRIDGE-MIB", "sleMfdbControlRequest"),
        ("SLE-BRIDGE-MIB", "sleMfdbControlStatus"),
        ("SLE-BRIDGE-MIB", "sleMfdbControlTimer"),
        ("SLE-BRIDGE-MIB", "sleMfdbControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleMfdbControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleMfdbControlMacAddress"),
        ("SLE-BRIDGE-MIB", "sleMfdbControlEntryPermission"),
        ("SLE-BRIDGE-MIB", "sleMfdbControlVlanIndex"),
        ("SLE-BRIDGE-MIB", "sleMfdbControlPorts"),
        ("SLE-BRIDGE-MIB", "sleBridgePortLoopDetectPeriodMs"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlLoopDetectPeriodMs"),
        ("SLE-BRIDGE-MIB", "sleLldpPortTLVsTxNetworkPolciyProfile"),
        ("SLE-BRIDGE-MIB", "sleLldpPortControlTLVsTxNetworkPolicyProfile"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfileIndex"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfileName"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfileControlRequest"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfileControlStatus"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfileControlTimer"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfileControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfileControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfileControlIndex"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfileControlName"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfilePolicyAppType"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfilePolicyVlanId"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfilePolicyPriority"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfilePolicyDscp"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfilePolicyUnknown"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfilePolicyControlRequest"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfilePolicyControlStatus"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfilePolicyControlTimer"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfilePolicyControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfilePolicyControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfilePolicyControlProfileIndex"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfilePolicyControlAppType"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfilePolicyControlVlanId"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfilePolicyControlPriority"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfilePolicyControlDscp"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfilePolicyControlUnknown"),
        ("SLE-BRIDGE-MIB", "sleLldpMedRemoteNetworkPolicyAppType"),
        ("SLE-BRIDGE-MIB", "sleLldpMedRemoteNetworkPolicyVlanId"),
        ("SLE-BRIDGE-MIB", "sleLldpMedRemoteNetworkPolicyPriority"),
        ("SLE-BRIDGE-MIB", "sleLldpMedRemoteNetworkPolicyDscp"),
        ("SLE-BRIDGE-MIB", "sleLldpMedRemoteNetworkPolicyUnknown"),
        ("SLE-BRIDGE-MIB", "sleLldpMedRemoteNetworkPolicyTagged"),
        ("SLE-BRIDGE-MIB", "sleLldpMedRemoteLocationSubType"),
        ("SLE-BRIDGE-MIB", "sleLldpMedRemoteLocationInfo"),
        ("SLE-BRIDGE-MIB", "sleLldpMedRemoteHardwareRev"),
        ("SLE-BRIDGE-MIB", "sleLldpMedRemoteFirmwareWRev"),
        ("SLE-BRIDGE-MIB", "sleLldpMedRemoteSoftwareRev"),
        ("SLE-BRIDGE-MIB", "sleLldpMedRemoteSerialNum"),
        ("SLE-BRIDGE-MIB", "sleLldpMedRemoteMfgName"),
        ("SLE-BRIDGE-MIB", "sleLldpMedRemoteModelName"),
        ("SLE-BRIDGE-MIB", "sleLldpMedRemoteAssetID"),
        ("SLE-BRIDGE-MIB", "sleBridgePortLoopDetectVlan"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlLoopDetectVlan"),
        ("SLE-BRIDGE-MIB", "sleLldpPortMgmtIPType"),
        ("SLE-BRIDGE-MIB", "sleLldpPortMgmtIPAddress"),
        ("SLE-BRIDGE-MIB", "sleLldpPortControlMgmtIPType"),
        ("SLE-BRIDGE-MIB", "sleLldpPortControlMgmtIPAddress"),
        ("SLE-BRIDGE-MIB", "sleBridgePortSwitchAggrType"),
        ("SLE-BRIDGE-MIB", "sleBridgePortSwitchAggrId"),
        ("SLE-BRIDGE-MIB", "sleBridgePortSwitchAggrMode"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlSwitchAggrType"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlSwitchAggrId"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlSwitchAggrMode"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceName"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceType"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceMode"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfacePvid"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceIngressFilter"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceAllowedVlanFlags"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceAllowedVlan"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlTimer"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlMode"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlPvid"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlIngressFilter"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlAllowedVlanFlags"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlAllowedVlan"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortActorAdminAggregatorId"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortControlAdminAggregatorId"),
        ("SLE-BRIDGE-MIB", "sleBridgeReservedVlanId"),
        ("SLE-BRIDGE-MIB", "sleBridgeReservedVlanIsUsed"),
        ("SLE-BRIDGE-MIB", "sleBridgeReservedVlanControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeReservedVlanControlStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgeReservedVlanControlTimer"),
        ("SLE-BRIDGE-MIB", "sleBridgeReservedVlanControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeReservedVlanControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeReservedVlanControlStartVlanId"),
        ("SLE-BRIDGE-MIB", "sleBridgeReservedVlanControlEndVlanId"),
        ("SLE-BRIDGE-MIB", "sleBridgeInternalVlanSlot"),
        ("SLE-BRIDGE-MIB", "sleBridgeInternalVlanPort"),
        ("SLE-BRIDGE-MIB", "sleBridgeInternalVlanRealVlanId"),
        ("SLE-BRIDGE-MIB", "sleBridgeInternalVlanInternalVlanId"),
        ("SLE-BRIDGE-MIB", "sleBridgeChannelGroupLacpMaxBundle"),
        ("SLE-BRIDGE-MIB", "sleBridgeChannelGroupSystemPriority"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlChannelGroupLacpMaxBundle"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlChannelGroupSystemPriority"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceChannelGroupAdminKey"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceChannelGroupAggrType"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceChannelGroupLacpAggrMode"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceChannelGroupPriority"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceChannelGroupTimeOut"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceChannelGroupActiveLink"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceChannelGroupDistMode"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlChannelGroupAdminKey"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlChannelGroupAggrType"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlChannelGroupLacpAggrMode"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlChannelGroupPriority"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlChannelGroupTimeOut"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlChannelGroupActiveLink"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlChannelGroupDistMode"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlMultiPortLlcfTimer"),
        ("SLE-BRIDGE-MIB", "sleBridgeMultiPortLlcfUpPortC"),
        ("SLE-BRIDGE-MIB", "sleBridgeMultiPortLlcfDownPortC"),
        ("SLE-BRIDGE-MIB", "sleBridgeMultiPortLlcfUpPortCStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgeMultiPortLlcfDownPortCStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgePortLoopDetectAdminCount"),
        ("SLE-BRIDGE-MIB", "sleBridgePortLoopDetectOperCount"),
        ("SLE-BRIDGE-MIB", "sleBridgePortLoopDetectDetectedCount"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlLoopDetectAdminCount"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceNativeVlan"),
        ("SLE-BRIDGE-MIB", "sleBridgePortBandwidth"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlBandwidth"),
        ("SLE-BRIDGE-MIB", "sleSubnetVlan6Ip"),
        ("SLE-BRIDGE-MIB", "sleSubnetVlan6Mask"),
        ("SLE-BRIDGE-MIB", "sleSubnetVlan6Vid"),
        ("SLE-BRIDGE-MIB", "sleSubnetVlan6ControlRequest"),
        ("SLE-BRIDGE-MIB", "sleSubnetVlan6ControlStatus"),
        ("SLE-BRIDGE-MIB", "sleSubnetVlan6ControlTimer"),
        ("SLE-BRIDGE-MIB", "sleSubnetVlan6ControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleSubnetVlan6ControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleSubnetVlan6ControlIp"),
        ("SLE-BRIDGE-MIB", "sleSubnetVlan6ControlMask"),
        ("SLE-BRIDGE-MIB", "sleSubnetVlan6ControlVid"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlNativeVlan"),
        ("SLE-BRIDGE-MIB", "sleBridgePortMaxNewHosts"),
        ("SLE-BRIDGE-MIB", "sleBridgePortStpStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgePortStpBpduGuard"),
        ("SLE-BRIDGE-MIB", "sleBridgePortOuterTpid"),
        ("SLE-BRIDGE-MIB", "sleBridgePortMirrorMonitor"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlMaxNewHosts"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlStpStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlStpBpduGuard"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlOuterTpid"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlMirrorMonitor"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceChannelGroupAggrId"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceChannelGroupMode"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceChannelGroupState"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlChannelGroupAggrId"),
        ("SLE-BRIDGE-MIB", "sleBridgePortAlias"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlAlias"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryBridgeId"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryMacAddress"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryIfIndex"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryVid"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntrySVid"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryMode"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryPermission"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryElapsedTime"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryControlRequest"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryControlStatus"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryControlTimer"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryControlReqResult"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryControlBridgeId"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryControlMacAddress"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryControlIfIndex"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryControlVid"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryControlSVid"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryControlPermission"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryControlCVid"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryControlInstance"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryControlClearType"),
        ("SLE-BRIDGE-MIB", "sleVlanType"),
        ("SLE-BRIDGE-MIB", "sleVlanControlType"),
        ("SLE-BRIDGE-MIB", "sleVlanControlServiceType"),
        ("SLE-BRIDGE-MIB", "sleServiceVlanIndex"),
        ("SLE-BRIDGE-MIB", "sleServiceVlanName"),
        ("SLE-BRIDGE-MIB", "sleServiceVlanDescription"),
        ("SLE-BRIDGE-MIB", "sleServiceVlanOperStatus"),
        ("SLE-BRIDGE-MIB", "sleServiceVlanMtu"),
        ("SLE-BRIDGE-MIB", "sleServiceVlanStatus"),
        ("SLE-BRIDGE-MIB", "sleServiceVlanType"),
        ("SLE-BRIDGE-MIB", "sleServiceVlanSeviceType"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceSubMode"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceAcceptableFramType"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceEgressTagged"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceCVlanRegistraionName"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfacePEVlanId"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfacePEDefaultVlanId"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfacePEUntaggedVlanId"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlSubMode"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlAcceptableFramType"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlEgressTagged"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlCVlanRegistraionName"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlPEVlanId"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlPEDefaultVlanId"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlPEUntaggedVlanId"),
        ("SLE-BRIDGE-MIB", "sleCVlanRegName"),
        ("SLE-BRIDGE-MIB", "sleSVlan"),
        ("SLE-BRIDGE-MIB", "sleUntaggedMap"),
        ("SLE-BRIDGE-MIB", "sleCVlanRegistrationMapControlRequest"),
        ("SLE-BRIDGE-MIB", "sleCVlanRegistrationMapControlStatus"),
        ("SLE-BRIDGE-MIB", "sleCVlanRegistrationMapControlTimer"),
        ("SLE-BRIDGE-MIB", "sleCVlanRegistrationMapControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleCVlanRegistrationMapControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleCVlanRegistrationMapControlCVlanID"),
        ("SLE-BRIDGE-MIB", "sleCVlanRegistrationMapControlName"),
        ("SLE-BRIDGE-MIB", "sleCVlanRegistrationMapControlSVlan"),
        ("SLE-BRIDGE-MIB", "sleCVlanRegistrationMapControlFlagPort"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlChannelGroupMode"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceDefaultVlan"),
        ("SLE-BRIDGE-MIB", "sleLacpSystemPriority"),
        ("SLE-BRIDGE-MIB", "sleLacpBaseControlRequest"),
        ("SLE-BRIDGE-MIB", "sleLacpBaseControlStatus"),
        ("SLE-BRIDGE-MIB", "sleLacpBaseControlTimer"),
        ("SLE-BRIDGE-MIB", "sleLacpBaseControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleLacpBaseControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleLacpBaseControlSystemPriority"),
        ("SLE-BRIDGE-MIB", "sleLacpBaseControlAggregatorId"),
        ("SLE-BRIDGE-MIB", "sleLacpInterfaceIndex"),
        ("SLE-BRIDGE-MIB", "sleLacpInterfaceName"),
        ("SLE-BRIDGE-MIB", "sleLacpInterfaceActorPriority"),
        ("SLE-BRIDGE-MIB", "sleLacpInterfaceActorAdminKey"),
        ("SLE-BRIDGE-MIB", "sleLacpInterfaceActorAdminState"),
        ("SLE-BRIDGE-MIB", "sleLacpInterfaceDestinationMac"),
        ("SLE-BRIDGE-MIB", "sleLacpInterfaceDiscardWrongConversation"),
        ("SLE-BRIDGE-MIB", "sleLacpInterfaceControlRequest"),
        ("SLE-BRIDGE-MIB", "sleLacpInterfaceControlStatus"),
        ("SLE-BRIDGE-MIB", "sleLacpInterfaceControlTimer"),
        ("SLE-BRIDGE-MIB", "sleLacpInterfaceControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleLacpInterfaceControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleLacpInterfaceControlIndex"),
        ("SLE-BRIDGE-MIB", "sleLacpInterfaceControlPriority"),
        ("SLE-BRIDGE-MIB", "sleLacpInterfaceControlTimeout"),
        ("SLE-BRIDGE-MIB", "sleLacpInterfaceControlDestinationMac"),
        ("SLE-BRIDGE-MIB", "sleLacpInterfaceControlDiscardWrongConversation"),
        ("SLE-BRIDGE-MIB", "sle2LldpGlobalIfIndex"),
        ("SLE-BRIDGE-MIB", "sle2LldpGlobalAgtCircuitId"),
        ("SLE-BRIDGE-MIB", "sle2LldpGlobalMedDevType"),
        ("SLE-BRIDGE-MIB", "sle2LldpGlobalPortDescription"),
        ("SLE-BRIDGE-MIB", "sle2LldpGlobalControlRequest"),
        ("SLE-BRIDGE-MIB", "sle2LldpGlobalControlStatus"),
        ("SLE-BRIDGE-MIB", "sle2LldpGlobalControlTimer"),
        ("SLE-BRIDGE-MIB", "sle2LldpGlobalControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sle2LldpGlobalControlReqResult"),
        ("SLE-BRIDGE-MIB", "sle2LldpGlobalControlIfIndex"),
        ("SLE-BRIDGE-MIB", "sle2LldpGlobalControlAgtCircuitId"),
        ("SLE-BRIDGE-MIB", "sle2LldpGlobalControlMedDevType"),
        ("SLE-BRIDGE-MIB", "sle2LldpGlobalControlPortDescription"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamIfIndex"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamAgentMode"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamBacManagementAddress"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamBacPortDescription"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamBacSystemCapabilities"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamBacSystemDescription"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamBacSystemName"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamI8021LinkAgg"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamI8021MgmtVid"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamI8021PortPtclVlanid"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamI8021PortVlanid"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamI8021PtclIdentity"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamI8021VidDigest"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamI8021VlanName"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamI8023MacPhy"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamI8023MaxMtuSize"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamMedInventory"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamMedLocation"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamMedNetworkPolicy"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamMedPower"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamControlRequest"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamControlStatus"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamControlTimer"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamControlReqResult"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamControlIfIndex"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamControlAgentMode"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamControlBacManagementAddress"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamControlBacPortDescription"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamControlBacSystemCapabilities"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamControlBacSystemDescription"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamControlBacSystemName"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamControlI8021LinkAgg"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamControlI8021MgmtVid"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamControlI8021PortPtclVlanid"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamControlI8021PortVlanid"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamControlI8021PtclIdentity"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamControlI8021VidDigest"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamControlI8021VlanName"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamControlI8023MacPhy"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamControlI8023MaxMtuSize"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamControlMedInventory"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamControlMedLocation"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamControlMedNetworkPolicy"),
        ("SLE-BRIDGE-MIB", "sle2LldpParamControlMedPower"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentIfIndex"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentMode"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentChassisIdTlv"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentAdminStatus"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentLocallyAssigned"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentManagementAddressTlv"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentMsgTxHold"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentPortIdTlv"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentTimerMsgFastTx"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentTimerMsgTxInterval"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentTimerReinitDelay"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentTimerTxDelay"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentTMNlimit"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentTMNInfoType"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentTMNMac"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentTMNTimer"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentTxFastInit"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentTxMaxCredit"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentControlRequest"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentControlStatus"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentControlTimer"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentControlReqResult"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentControlIfIndex"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentControlMode"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentControlChassisIdTlv"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentControlAdminStatus"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentControlLocallyAssigned"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentControlManagementAddressTlv"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentControlMsgTxHold"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentControlPortIdTlv"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentControlTimerMsgFastTx"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentControlTimerMsgTxInterval"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentControlTimerReinitDelay"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentControlTimerTxDelay"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentControlTMNlimit"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentControlTMNInfoType"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentControlTMNMac"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentControlTMNTimer"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentControlTxFastInit"),
        ("SLE-BRIDGE-MIB", "sle2LldpAgentControlTxMaxCredit"),
        ("SLE-BRIDGE-MIB", "sle2LldpStatsIfIndex"),
        ("SLE-BRIDGE-MIB", "sle2LldpStatsAgentMode"),
        ("SLE-BRIDGE-MIB", "sle2LldpStatsTransmittedFramesTotal"),
        ("SLE-BRIDGE-MIB", "sle2LldpStatsAgedEntriesTotal"),
        ("SLE-BRIDGE-MIB", "sle2LldpStatsReceivedFramesTotal"),
        ("SLE-BRIDGE-MIB", "sle2LldpStatsReceivedFramesError"),
        ("SLE-BRIDGE-MIB", "sle2LldpStatsDiscardedFramesTotal"),
        ("SLE-BRIDGE-MIB", "sle2LldpStatsTLVDiscardTotal"),
        ("SLE-BRIDGE-MIB", "sle2LldpStatsTLVUnrecognisedTotal"),
        ("SLE-BRIDGE-MIB", "sle2LldpStatsControlRequest"),
        ("SLE-BRIDGE-MIB", "sle2LldpStatsControlStatus"),
        ("SLE-BRIDGE-MIB", "sle2LldpStatsControlTimer"),
        ("SLE-BRIDGE-MIB", "sle2LldpStatsControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sle2LldpStatsControlReqResult"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteIfIndex"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteAgentMode"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteSysName"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteSysDescr"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemotePortDescr"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteRxTtl"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteSysCapability"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteIfNumbering"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteIfNumber"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteOid"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteMgmtAddrSubType"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteMgmtAddr"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteChassisIdType"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteChassisId"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemotePortIdType"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemotePortId"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemotePortVlanId"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemotePPVlanId"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteProtocols"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteVidUsageDigest"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteMgmtVlan"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteLinkAggrStatus"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteLinkAggrPortId"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteAutonegoSupport"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteAutonegoCapability"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteOperMauType"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteMaxFrameSize"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteMedCapability"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteMedCapabilityDevType"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteMedNwPlcyAppType"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteMedNwPlcyVlanId"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteMedNwPlcyTagged"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteMedNwPlcyL2Prio"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteMedLocDataFormat"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteMedLocLatitudeRes"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteMedLocLatitude"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteMedLocLongitudeRes"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteMedLocLongitude"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteMedLocAt"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteMedLocAltitudeRes"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteMedLocAltitude"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteMedLocDatum"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteMedLocLciLength"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteMedLocWhat"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteMedLocCountryCode"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteMedLocCaType"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteMedLocCaLen"),
        ("SLE-BRIDGE-MIB", "sleCVlanRegIndex"),
        ("SLE-BRIDGE-MIB", "sleCVlanIndex"),
        ("SLE-BRIDGE-MIB", "sleMllcfControlHoldTime"),
        ("SLE-BRIDGE-MIB", "sleMllcfControlPortsB"),
        ("SLE-BRIDGE-MIB", "sleMllcfControlPortsA"),
        ("SLE-BRIDGE-MIB", "sleMllcfControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleMllcfControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleMllcfControlTimer"),
        ("SLE-BRIDGE-MIB", "sleMllcfControlStatus"),
        ("SLE-BRIDGE-MIB", "sleMllcfControlRequest"),
        ("SLE-BRIDGE-MIB", "sleMllcfHoldTime"),
        ("SLE-BRIDGE-MIB", "sleMllcfPortsBStatus"),
        ("SLE-BRIDGE-MIB", "sleMllcfPortsAAdminDownStatus"),
        ("SLE-BRIDGE-MIB", "sleMllcfPortsALinkDownStatus"),
        ("SLE-BRIDGE-MIB", "sleMllcfPortsB"),
        ("SLE-BRIDGE-MIB", "sleMllcfPortsA"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfacePrivateVlanHostAssociationPvid"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfacePrivateVlanMappingPvid"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlPrivateVlanHostAssociationPvid"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlPrivateVlanMappingPvid"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlDefaultVlan"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceVlanTranslation"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceDefaulSVlanId"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlVlanTranslate"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlVlanToBeTranslated"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteMedNwPlcyDscp"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteVlanIfIndex"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteVlanAgentMode"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteVlanId"),
        ("SLE-BRIDGE-MIB", "sle2LldpRemoteVlanName"),
        ("SLE-BRIDGE-MIB", "sle2LldpBaseSystemDescription"),
        ("SLE-BRIDGE-MIB", "sle2LldpBaseSystemName"),
        ("SLE-BRIDGE-MIB", "sle2LldpBaseControlRequest"),
        ("SLE-BRIDGE-MIB", "sle2LldpBaseControlStatus"),
        ("SLE-BRIDGE-MIB", "sle2LldpBaseControlTimer"),
        ("SLE-BRIDGE-MIB", "sle2LldpBaseControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sle2LldpBaseControlReqResult"),
        ("SLE-BRIDGE-MIB", "sle2LldpBaseControlSystemDescription"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceGroup"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceGroupSpanningTree"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlGroup"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlGroupSpanningTree"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceProviderNetworkEtherType"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlProviderNetworkEtherType"),
        ("SLE-BRIDGE-MIB", "sleBridgePortMulticast"),
        ("SLE-BRIDGE-MIB", "sleBridgePortFloodBlock"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlMulticast"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlFloodBlock"),
        ("SLE-BRIDGE-MIB", "sleLacpInterfaceTimeout"),
        ("SLE-BRIDGE-MIB", "sleBridgeId"),
        ("SLE-BRIDGE-MIB", "sleBridgeProtocol"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlId"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlProtocol"),
        ("SLE-BRIDGE-MIB", "sleLacpInterfaceActiveLink"),
        ("SLE-BRIDGE-MIB", "sleLacpInterfaceControlActiveLink"),
        ("SLE-BRIDGE-MIB", "sle2LldpBaseControlSystemName"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfacePrivateVlanHostAssociationPrimaryVid"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfacePrivateVlanMappingSecondaryVid"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlPrivateVlanHostAssociationPrimaryVid"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlPrivateVlanMappingSecondaryVid"))
)
if mibBuilder.loadTexts:
    sleBridgeGroup.setStatus("current")


# Notification objects

sleBridgeLacpProfileChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 3, 1)
)
sleBridgeLacpProfileChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeLacpActivity"),
        ("SLE-BRIDGE-MIB", "sleBridgeLacpPriority"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlReqResult"))
)
if mibBuilder.loadTexts:
    sleBridgeLacpProfileChanged.setStatus(
        "current"
    )

sleBridgeDoubleTagProtoIdChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 3, 2)
)
sleBridgeDoubleTagProtoIdChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeDoubleTagProtoId"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlReqResult"))
)
if mibBuilder.loadTexts:
    sleBridgeDoubleTagProtoIdChanged.setStatus(
        "current"
    )

sleBridgeMirrorProfileChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 3, 3)
)
sleBridgeMirrorProfileChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeMirrorMode"),
        ("SLE-BRIDGE-MIB", "sleBridgeMirrorMonitorPortId"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlReqResult"))
)
if mibBuilder.loadTexts:
    sleBridgeMirrorProfileChanged.setStatus(
        "current"
    )

sleBridgeMaxLearnPerUnitChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 3, 4)
)
sleBridgeMaxLearnPerUnitChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeMaxLearnPerUnit"))
)
if mibBuilder.loadTexts:
    sleBridgeMaxLearnPerUnitChanged.setStatus(
        "current"
    )

sleBridgeFdbAgeingTimeChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 3, 5)
)
sleBridgeFdbAgeingTimeChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeFdbAgeingTime"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlReqResult"))
)
if mibBuilder.loadTexts:
    sleBridgeFdbAgeingTimeChanged.setStatus(
        "current"
    )

sleBridgeStackProfileChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 3, 6)
)
sleBridgeStackProfileChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeStackMode"),
        ("SLE-BRIDGE-MIB", "sleBridgeStackDeviceName"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlReqResult"))
)
if mibBuilder.loadTexts:
    sleBridgeStackProfileChanged.setStatus(
        "current"
    )

sleBridgeLldpProfileChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 3, 7)
)
sleBridgeLldpProfileChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeLldpMessageTxInterval"),
        ("SLE-BRIDGE-MIB", "sleBridgeLldpTxHoldMultiplier"),
        ("SLE-BRIDGE-MIB", "sleBridgeLldpReinitDelay"),
        ("SLE-BRIDGE-MIB", "sleBridgeLldpTxDelay"),
        ("SLE-BRIDGE-MIB", "sleBridgeLldpNotificationInterval"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlReqResult"))
)
if mibBuilder.loadTexts:
    sleBridgeLldpProfileChanged.setStatus(
        "current"
    )

sleBridgeStpProfileChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 3, 8)
)
sleBridgeStpProfileChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeStpActivity"),
        ("SLE-BRIDGE-MIB", "sleBridgeStpSelfLoop"))
)
if mibBuilder.loadTexts:
    sleBridgeStpProfileChanged.setStatus(
        "current"
    )

sleBridgeTcpSyncookieChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 3, 9)
)
sleBridgeTcpSyncookieChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeTcpSyncookie"))
)
if mibBuilder.loadTexts:
    sleBridgeTcpSyncookieChanged.setStatus(
        "current"
    )

sleBridgeTcpIgnoreRstUnknownChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 3, 10)
)
sleBridgeTcpIgnoreRstUnknownChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeTcpIgnoreRstUnknown"))
)
if mibBuilder.loadTexts:
    sleBridgeTcpIgnoreRstUnknownChanged.setStatus(
        "current"
    )

sleBridgeAutoInterfaceActivationChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 3, 11)
)
sleBridgeAutoInterfaceActivationChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeAutoInterfaceActivation"))
)
if mibBuilder.loadTexts:
    sleBridgeAutoInterfaceActivationChanged.setStatus(
        "current"
    )

sleBridgeLoopDetectProfileChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 3, 12)
)
sleBridgeLoopDetectProfileChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeLoopDetectStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgeLoopDetectPacketType"))
)
if mibBuilder.loadTexts:
    sleBridgeLoopDetectProfileChanged.setStatus(
        "current"
    )

sleBridgePvlanPormSelectModeChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 3, 13)
)
sleBridgePvlanPormSelectModeChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlPvlanPromSelectMode"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlPvlanPromiscuousPorts"))
)
if mibBuilder.loadTexts:
    sleBridgePvlanPormSelectModeChanged.setStatus(
        "current"
    )

sleBridgeInnerTagProtoIdChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 3, 14)
)
sleBridgeInnerTagProtoIdChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlInnerTagProtoId"))
)
if mibBuilder.loadTexts:
    sleBridgeInnerTagProtoIdChanged.setStatus(
        "current"
    )

sleBridgeUnknownMcastBlockAllPortsChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 3, 15)
)
sleBridgeUnknownMcastBlockAllPortsChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlUnknownMcastBlockAllPorts"))
)
if mibBuilder.loadTexts:
    sleBridgeUnknownMcastBlockAllPortsChanged.setStatus(
        "current"
    )

sleBridgeEcmpHashTypeChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 3, 16)
)
sleBridgeEcmpHashTypeChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlEcmpHashType"))
)
if mibBuilder.loadTexts:
    sleBridgeEcmpHashTypeChanged.setStatus(
        "current"
    )

sleBridgeTcpSynguardChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 3, 17)
)
sleBridgeTcpSynguardChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeTcpSynguard"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlReqResult"))
)
if mibBuilder.loadTexts:
    sleBridgeTcpSynguardChanged.setStatus(
        "current"
    )

sleBridgeOuterTagProtoIdChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 3, 18)
)
sleBridgeOuterTagProtoIdChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlOuterTagProtoId"))
)
if mibBuilder.loadTexts:
    sleBridgeOuterTagProtoIdChanged.setStatus(
        "current"
    )

sleBridgeMacAntiSpoofingChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 3, 19)
)
sleBridgeMacAntiSpoofingChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlMacAntiSpoofing"))
)
if mibBuilder.loadTexts:
    sleBridgeMacAntiSpoofingChanged.setStatus(
        "current"
    )

sleBridgeMacReplaceChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 3, 20)
)
sleBridgeMacReplaceChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlMacReplace"))
)
if mibBuilder.loadTexts:
    sleBridgeMacReplaceChanged.setStatus(
        "current"
    )

sleBridgeStormControlChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 3, 21)
)
sleBridgeStormControlChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortNum"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlStormControlBcast"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlStormControlDLF"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlStormControlMulticast"))
)
if mibBuilder.loadTexts:
    sleBridgeStormControlChanged.setStatus(
        "current"
    )

sleBridgeMacLearningModeChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 3, 22)
)
sleBridgeMacLearningModeChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlMacLearningMode"))
)
if mibBuilder.loadTexts:
    sleBridgeMacLearningModeChanged.setStatus(
        "current"
    )

sleBridgeLagGlobalDistModeChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 3, 23)
)
sleBridgeLagGlobalDistModeChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlLagGlobalDistMode"))
)
if mibBuilder.loadTexts:
    sleBridgeLagGlobalDistModeChanged.setStatus(
        "current"
    )

sleBridgeMultiPortLlcfChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 3, 24)
)
sleBridgeMultiPortLlcfChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlMultiPortLlcfPortA"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlMultiPortLlcfPortB"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlMultiPortLlcfPortC"))
)
if mibBuilder.loadTexts:
    sleBridgeMultiPortLlcfChanged.setStatus(
        "current"
    )

sleBridgeMultiPortLlcfDeleted = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 3, 25)
)
sleBridgeMultiPortLlcfDeleted.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlReqResult"))
)
if mibBuilder.loadTexts:
    sleBridgeMultiPortLlcfDeleted.setStatus(
        "current"
    )

sleBridgeMultiPortLlcfTimerChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 3, 26)
)
sleBridgeMultiPortLlcfTimerChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlMultiPortLlcfTimer"))
)
if mibBuilder.loadTexts:
    sleBridgeMultiPortLlcfTimerChanged.setStatus(
        "current"
    )

sleBridgeChannelGroupLacpMaxBundleChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 3, 27)
)
sleBridgeChannelGroupLacpMaxBundleChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlChannelGroupLacpMaxBundle"))
)
if mibBuilder.loadTexts:
    sleBridgeChannelGroupLacpMaxBundleChanged.setStatus(
        "current"
    )

sleBridgeChannelGroupLacpMaxBundleDeleted = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 3, 28)
)
sleBridgeChannelGroupLacpMaxBundleDeleted.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlReqResult"))
)
if mibBuilder.loadTexts:
    sleBridgeChannelGroupLacpMaxBundleDeleted.setStatus(
        "current"
    )

sleBridgeChannelGroupSystemPriorityChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 3, 29)
)
sleBridgeChannelGroupSystemPriorityChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlChannelGroupSystemPriority"))
)
if mibBuilder.loadTexts:
    sleBridgeChannelGroupSystemPriorityChanged.setStatus(
        "current"
    )

sleBridgeChannelGroupSystemPriorityDeleted = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 1, 3, 30)
)
sleBridgeChannelGroupSystemPriorityDeleted.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeControlReqResult"))
)
if mibBuilder.loadTexts:
    sleBridgeChannelGroupSystemPriorityDeleted.setStatus(
        "current"
    )

sleBridgePortPVidChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 1)
)
sleBridgePortPVidChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortPVid"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"))
)
if mibBuilder.loadTexts:
    sleBridgePortPVidChanged.setStatus(
        "current"
    )

sleBridgePortMaxHostsChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 2)
)
sleBridgePortMaxHostsChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortMaxHosts"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"))
)
if mibBuilder.loadTexts:
    sleBridgePortMaxHostsChanged.setStatus(
        "current"
    )

sleBridgePortMaxLearnPerUnitChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 3)
)
sleBridgePortMaxLearnPerUnitChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortMaxLearnPerUnit"))
)
if mibBuilder.loadTexts:
    sleBridgePortMaxLearnPerUnitChanged.setStatus(
        "current"
    )

sleBridgePortMACFilterPermissionChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 4)
)
sleBridgePortMACFilterPermissionChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortMACFilterPermission"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"))
)
if mibBuilder.loadTexts:
    sleBridgePortMACFilterPermissionChanged.setStatus(
        "current"
    )

sleBridgePortMirrorProfileChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 5)
)
sleBridgePortMirrorProfileChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortIngMirrorStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgePortEgMirrorStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"))
)
if mibBuilder.loadTexts:
    sleBridgePortMirrorProfileChanged.setStatus(
        "current"
    )

sleBridgePortBcscThresholdProfileChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 6)
)
sleBridgePortBcscThresholdProfileChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortBcastThreshold"),
        ("SLE-BRIDGE-MIB", "sleBridgePortMcastThreshold"),
        ("SLE-BRIDGE-MIB", "sleBridgePortDlfThreshold"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"))
)
if mibBuilder.loadTexts:
    sleBridgePortBcscThresholdProfileChanged.setStatus(
        "current"
    )

sleBridgePortQinQStatusChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 7)
)
sleBridgePortQinQStatusChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortQinQStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"))
)
if mibBuilder.loadTexts:
    sleBridgePortQinQStatusChanged.setStatus(
        "current"
    )

sleBridgePortLinktypeChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 8)
)
sleBridgePortLinktypeChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortAdminLinktype"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"))
)
if mibBuilder.loadTexts:
    sleBridgePortLinktypeChanged.setStatus(
        "current"
    )

sleBridgePortEdgemodeChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 9)
)
sleBridgePortEdgemodeChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortAdminEdgemode"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"))
)
if mibBuilder.loadTexts:
    sleBridgePortEdgemodeChanged.setStatus(
        "current"
    )

sleBridgePortStpBpduFilterChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 10)
)
sleBridgePortStpBpduFilterChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortStpBpduFilter"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"))
)
if mibBuilder.loadTexts:
    sleBridgePortStpBpduFilterChanged.setStatus(
        "current"
    )

sleBridgePortPvlanIsolatedStatusChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 11)
)
sleBridgePortPvlanIsolatedStatusChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortPvlanIsolatedStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgePortPvlanPromPorts"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"))
)
if mibBuilder.loadTexts:
    sleBridgePortPvlanIsolatedStatusChanged.setStatus(
        "current"
    )

sleBridgePortStpBpduGuardErrRcvChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 12)
)
sleBridgePortStpBpduGuardErrRcvChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"))
)
if mibBuilder.loadTexts:
    sleBridgePortStpBpduGuardErrRcvChanged.setStatus(
        "current"
    )

sleBridgePortDhcpFilterServerChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 13)
)
sleBridgePortDhcpFilterServerChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortDhcpFilterServer"))
)
if mibBuilder.loadTexts:
    sleBridgePortDhcpFilterServerChanged.setStatus(
        "current"
    )

sleBridgePortLoopDetectProfileChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 14)
)
sleBridgePortLoopDetectProfileChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortLoopDetectStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgePortLoopDetectBlock"),
        ("SLE-BRIDGE-MIB", "sleBridgePortLoopDetectPeriod"),
        ("SLE-BRIDGE-MIB", "sleBridgePortLoopDetectTimer"))
)
if mibBuilder.loadTexts:
    sleBridgePortLoopDetectProfileChanged.setStatus(
        "current"
    )

sleBridgePortLoopDetectUnblock = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 15)
)
sleBridgePortLoopDetectUnblock.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortLoopDetectBlockStatus"))
)
if mibBuilder.loadTexts:
    sleBridgePortLoopDetectUnblock.setStatus(
        "current"
    )

sleBridgePortNetBIOSFilterChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 16)
)
sleBridgePortNetBIOSFilterChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortNetBIOSFilter"))
)
if mibBuilder.loadTexts:
    sleBridgePortNetBIOSFilterChanged.setStatus(
        "current"
    )

sleBridgePortPushInnertagChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 17)
)
sleBridgePortPushInnertagChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlPushInnertag"))
)
if mibBuilder.loadTexts:
    sleBridgePortPushInnertagChanged.setStatus(
        "current"
    )

sleBridgePortPopInnertagChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 18)
)
sleBridgePortPopInnertagChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlPopInnertag"))
)
if mibBuilder.loadTexts:
    sleBridgePortPopInnertagChanged.setStatus(
        "current"
    )

sleBridgePortInnertagChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 19)
)
sleBridgePortInnertagChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlInnertag"))
)
if mibBuilder.loadTexts:
    sleBridgePortInnertagChanged.setStatus(
        "current"
    )

sleBridgePortPriorityChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 20)
)
sleBridgePortPriorityChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlPriority"))
)
if mibBuilder.loadTexts:
    sleBridgePortPriorityChanged.setStatus(
        "current"
    )

sleBridgePortInner2outerPriChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 21)
)
sleBridgePortInner2outerPriChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlInner2outerPri"))
)
if mibBuilder.loadTexts:
    sleBridgePortInner2outerPriChanged.setStatus(
        "current"
    )

sleBridgePortInner2outerVidChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 22)
)
sleBridgePortInner2outerVidChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlInner2outerVid"))
)
if mibBuilder.loadTexts:
    sleBridgePortInner2outerVidChanged.setStatus(
        "current"
    )

sleBridgePortMACLearningStatusChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 23)
)
sleBridgePortMACLearningStatusChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlMACLearningStatus"))
)
if mibBuilder.loadTexts:
    sleBridgePortMACLearningStatusChanged.setStatus(
        "current"
    )

sleBridgePortPortBridgeStatusChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 24)
)
sleBridgePortPortBridgeStatusChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlPortBridgeStatus"))
)
if mibBuilder.loadTexts:
    sleBridgePortPortBridgeStatusChanged.setStatus(
        "current"
    )

sleBridgePortUnknownMcastBlockChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 25)
)
sleBridgePortUnknownMcastBlockChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlUnknownMcastBlock"))
)
if mibBuilder.loadTexts:
    sleBridgePortUnknownMcastBlockChanged.setStatus(
        "current"
    )

sleBridgePortDescriptionChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 26)
)
sleBridgePortDescriptionChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlDescription"))
)
if mibBuilder.loadTexts:
    sleBridgePortDescriptionChanged.setStatus(
        "current"
    )

sleBridgePortHoldTimeChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 27)
)
sleBridgePortHoldTimeChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlHoldTime"))
)
if mibBuilder.loadTexts:
    sleBridgePortHoldTimeChanged.setStatus(
        "current"
    )

sleBridgePortMacAntiSpoofChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 28)
)
sleBridgePortMacAntiSpoofChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlMacAntiSpoofing"))
)
if mibBuilder.loadTexts:
    sleBridgePortMacAntiSpoofChanged.setStatus(
        "current"
    )

sleBridgePortSwitchStatusChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 29)
)
sleBridgePortSwitchStatusChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlSwitchStatus"))
)
if mibBuilder.loadTexts:
    sleBridgePortSwitchStatusChanged.setStatus(
        "current"
    )

sleBridgePortSwitchModeChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 30)
)
sleBridgePortSwitchModeChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlSwitchMode"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlSwitchSubMode"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlSwitchIngressFilter"))
)
if mibBuilder.loadTexts:
    sleBridgePortSwitchModeChanged.setStatus(
        "current"
    )

sleBridgePortSwitchDefaultVlanChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 31)
)
sleBridgePortSwitchDefaultVlanChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlSwitchDefaultVlan"))
)
if mibBuilder.loadTexts:
    sleBridgePortSwitchDefaultVlanChanged.setStatus(
        "current"
    )

sleBridgePortSwitchNativeVlanChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 32)
)
sleBridgePortSwitchNativeVlanChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlSwitchNativeVid"))
)
if mibBuilder.loadTexts:
    sleBridgePortSwitchNativeVlanChanged.setStatus(
        "current"
    )

sleBridgePortSwitchAccFramTypeChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 33)
)
sleBridgePortSwitchAccFramTypeChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlSwitchAccFrameType"))
)
if mibBuilder.loadTexts:
    sleBridgePortSwitchAccFramTypeChanged.setStatus(
        "current"
    )

sleBridgePortSwitchAllowdVlanAdded = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 34)
)
sleBridgePortSwitchAllowdVlanAdded.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlSwitchAllowedVlan"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlSwitchAllowedVlanEtag"))
)
if mibBuilder.loadTexts:
    sleBridgePortSwitchAllowdVlanAdded.setStatus(
        "current"
    )

sleBridgePortSwitchAllowdVlanDeleted = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 35)
)
sleBridgePortSwitchAllowdVlanDeleted.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlSwitchAllowedVlan"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlSwitchAllowedVlanEtag"))
)
if mibBuilder.loadTexts:
    sleBridgePortSwitchAllowdVlanDeleted.setStatus(
        "current"
    )

sleBridgePortSwitchStaticChannelChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 36)
)
sleBridgePortSwitchStaticChannelChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlSwitchStaticChannelGroup"))
)
if mibBuilder.loadTexts:
    sleBridgePortSwitchStaticChannelChanged.setStatus(
        "current"
    )

sleBridgePortSwitchChannelLoadbalanceChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 37)
)
sleBridgePortSwitchChannelLoadbalanceChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlSwitchChannelLoadbalance"))
)
if mibBuilder.loadTexts:
    sleBridgePortSwitchChannelLoadbalanceChanged.setStatus(
        "current"
    )

sleBridgePortPortLinkCntChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 38)
)
sleBridgePortPortLinkCntChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"))
)
if mibBuilder.loadTexts:
    sleBridgePortPortLinkCntChanged.setStatus(
        "current"
    )

sleBridgePortSwitchChannelProfileChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 39)
)
sleBridgePortSwitchChannelProfileChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlSwitchAggrType"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlSwitchAggrId"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlSwitchAggrMode"))
)
if mibBuilder.loadTexts:
    sleBridgePortSwitchChannelProfileChanged.setStatus(
        "current"
    )

sleBridgePortSwitchChannelProfileDeleted = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 40)
)
sleBridgePortSwitchChannelProfileDeleted.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlSwitchAggrType"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlSwitchAggrId"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlSwitchAggrMode"))
)
if mibBuilder.loadTexts:
    sleBridgePortSwitchChannelProfileDeleted.setStatus(
        "current"
    )

sleBridgePortLoopDetectPeriodMsChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 71)
)
sleBridgePortLoopDetectPeriodMsChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortLoopDetectPeriod"))
)
if mibBuilder.loadTexts:
    sleBridgePortLoopDetectPeriodMsChanged.setStatus(
        "current"
    )

sleBridgePortLoopDetectLoopingCountChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 72)
)
sleBridgePortLoopDetectLoopingCountChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlLoopDetectAdminCount"))
)
if mibBuilder.loadTexts:
    sleBridgePortLoopDetectLoopingCountChanged.setStatus(
        "current"
    )

sleBridgePortLoopDetectVlanChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 73)
)
sleBridgePortLoopDetectVlanChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlLoopDetectVlan"))
)
if mibBuilder.loadTexts:
    sleBridgePortLoopDetectVlanChanged.setStatus(
        "current"
    )

sleBridgePortLoopDetectVlanDeleted = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 74)
)
sleBridgePortLoopDetectVlanDeleted.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlIndex"))
)
if mibBuilder.loadTexts:
    sleBridgePortLoopDetectVlanDeleted.setStatus(
        "current"
    )

sleBridgePortMaxNewHostsChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 75)
)
sleBridgePortMaxNewHostsChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlMaxNewHosts"))
)
if mibBuilder.loadTexts:
    sleBridgePortMaxNewHostsChanged.setStatus(
        "current"
    )

sleBridgePortSpanningTreeDetectedProtocolsCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 76)
)
sleBridgePortSpanningTreeDetectedProtocolsCleared.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlIndex"))
)
if mibBuilder.loadTexts:
    sleBridgePortSpanningTreeDetectedProtocolsCleared.setStatus(
        "current"
    )

sleBridgePortStpStatusChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 77)
)
sleBridgePortStpStatusChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlStpStatus"))
)
if mibBuilder.loadTexts:
    sleBridgePortStpStatusChanged.setStatus(
        "current"
    )

sleBridgePortStpBpduGuardChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 78)
)
sleBridgePortStpBpduGuardChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlStpBpduGuard"))
)
if mibBuilder.loadTexts:
    sleBridgePortStpBpduGuardChanged.setStatus(
        "current"
    )

sleBridgePortOuterTpidChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 79)
)
sleBridgePortOuterTpidChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlOuterTpid"))
)
if mibBuilder.loadTexts:
    sleBridgePortOuterTpidChanged.setStatus(
        "current"
    )

sleBridgePortMirrorMonitorChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 80)
)
sleBridgePortMirrorMonitorChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlMirrorMonitor"))
)
if mibBuilder.loadTexts:
    sleBridgePortMirrorMonitorChanged.setStatus(
        "current"
    )

sleBridgePortBandwidthChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 81)
)
sleBridgePortBandwidthChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlBandwidth"))
)
if mibBuilder.loadTexts:
    sleBridgePortBandwidthChanged.setStatus(
        "current"
    )

sleBridgePortAliasSet = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 82)
)
sleBridgePortAliasSet.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlAlias"))
)
if mibBuilder.loadTexts:
    sleBridgePortAliasSet.setStatus(
        "current"
    )

sleBridgePortAliasUnset = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 83)
)
sleBridgePortAliasUnset.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlIndex"))
)
if mibBuilder.loadTexts:
    sleBridgePortAliasUnset.setStatus(
        "current"
    )

sleBridgePortMulticastChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 84)
)
sleBridgePortMulticastChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlMulticast"))
)
if mibBuilder.loadTexts:
    sleBridgePortMulticastChanged.setStatus(
        "current"
    )

sleBridgePortFloodBlockChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 2, 3, 85)
)
sleBridgePortFloodBlockChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePortControlFloodBlock"))
)
if mibBuilder.loadTexts:
    sleBridgePortFloodBlockChanged.setStatus(
        "current"
    )

sleVlanCreated = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 3, 1)
)
sleVlanCreated.setObjects(
      *(("SLE-BRIDGE-MIB", "sleVlanName"),
        ("SLE-BRIDGE-MIB", "sleVlanEgressPorts"),
        ("SLE-BRIDGE-MIB", "sleVlanUnTaggedPorts"),
        ("SLE-BRIDGE-MIB", "sleVlanControlRequest"),
        ("SLE-BRIDGE-MIB", "sleVlanControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleVlanControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleVlanIfIndex"),
        ("SLE-BRIDGE-MIB", "sleVlanStatus"))
)
if mibBuilder.loadTexts:
    sleVlanCreated.setStatus(
        "current"
    )

sleVlanDestroyed = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 3, 2)
)
sleVlanDestroyed.setObjects(
      *(("SLE-BRIDGE-MIB", "sleVlanControlRequest"),
        ("SLE-BRIDGE-MIB", "sleVlanControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleVlanControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleVlanControlIndex"))
)
if mibBuilder.loadTexts:
    sleVlanDestroyed.setStatus(
        "current"
    )

sleVlanPortProfileChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 3, 3)
)
sleVlanPortProfileChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleVlanEgressPorts"),
        ("SLE-BRIDGE-MIB", "sleVlanUnTaggedPorts"),
        ("SLE-BRIDGE-MIB", "sleVlanControlRequest"),
        ("SLE-BRIDGE-MIB", "sleVlanControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleVlanControlReqResult"))
)
if mibBuilder.loadTexts:
    sleVlanPortProfileChanged.setStatus(
        "current"
    )

sleVlanAgeingTimeChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 3, 4)
)
sleVlanAgeingTimeChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleVlanControlRequest"),
        ("SLE-BRIDGE-MIB", "sleVlanControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleVlanControlAgeingTime"),
        ("SLE-BRIDGE-MIB", "sleVlanControlIndex"),
        ("SLE-BRIDGE-MIB", "sleVlanControlReqResult"))
)
if mibBuilder.loadTexts:
    sleVlanAgeingTimeChanged.setStatus(
        "current"
    )

sleVlanRangeCreated = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 3, 5)
)
sleVlanRangeCreated.setObjects(
      *(("SLE-BRIDGE-MIB", "sleVlanControlRequest"),
        ("SLE-BRIDGE-MIB", "sleVlanControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleVlanControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleVlanControlIndex"),
        ("SLE-BRIDGE-MIB", "sleVlanControlIndexTo"))
)
if mibBuilder.loadTexts:
    sleVlanRangeCreated.setStatus(
        "current"
    )

sleVlanDescriptionChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 3, 6)
)
sleVlanDescriptionChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleVlanControlRequest"),
        ("SLE-BRIDGE-MIB", "sleVlanControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleVlanControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleVlanControlIndex"),
        ("SLE-BRIDGE-MIB", "sleVlanControlDescription"))
)
if mibBuilder.loadTexts:
    sleVlanDescriptionChanged.setStatus(
        "current"
    )

sleVlanElineVlanCreated = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 3, 7)
)
sleVlanElineVlanCreated.setObjects(
      *(("SLE-BRIDGE-MIB", "sleVlanControlRequest"),
        ("SLE-BRIDGE-MIB", "sleVlanControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleVlanControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleVlanControlIndex"),
        ("SLE-BRIDGE-MIB", "sleVlanControlElineEnable"))
)
if mibBuilder.loadTexts:
    sleVlanElineVlanCreated.setStatus(
        "current"
    )

sleVlanOperStatusChagned = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 3, 8)
)
sleVlanOperStatusChagned.setObjects(
      *(("SLE-BRIDGE-MIB", "sleVlanControlRequest"),
        ("SLE-BRIDGE-MIB", "sleVlanControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleVlanControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleVlanControlIndex"),
        ("SLE-BRIDGE-MIB", "sleVlanControlOperStatus"))
)
if mibBuilder.loadTexts:
    sleVlanOperStatusChagned.setStatus(
        "current"
    )

sleVlanMtuChagned = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 3, 3, 9)
)
sleVlanMtuChagned.setObjects(
      *(("SLE-BRIDGE-MIB", "sleVlanControlRequest"),
        ("SLE-BRIDGE-MIB", "sleVlanControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleVlanControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleVlanControlIndex"),
        ("SLE-BRIDGE-MIB", "sleVlanControlMtu"))
)
if mibBuilder.loadTexts:
    sleVlanMtuChagned.setStatus(
        "current"
    )

sleVlanMapFidChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 4, 3, 1)
)
sleVlanMapFidChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleVlanMapControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleVlanMapControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleVlanMapControlRequest"),
        ("SLE-BRIDGE-MIB", "sleVlanMapFid"))
)
if mibBuilder.loadTexts:
    sleVlanMapFidChanged.setStatus(
        "current"
    )

sleVlanMapStpIdChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 4, 3, 2)
)
sleVlanMapStpIdChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleVlanMapStpId"),
        ("SLE-BRIDGE-MIB", "sleVlanMapControlRequest"),
        ("SLE-BRIDGE-MIB", "sleVlanMapControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleVlanMapControlReqResult"))
)
if mibBuilder.loadTexts:
    sleVlanMapStpIdChanged.setStatus(
        "current"
    )

sleVlanMapErpDomainIdChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 4, 3, 3)
)
sleVlanMapErpDomainIdChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleVlanMapErpDomainId"),
        ("SLE-BRIDGE-MIB", "sleVlanMapControlRequest"),
        ("SLE-BRIDGE-MIB", "sleVlanMapControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleVlanMapControlReqResult"))
)
if mibBuilder.loadTexts:
    sleVlanMapErpDomainIdChanged.setStatus(
        "current"
    )

sleStpOperationModeChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 5, 3, 1)
)
sleStpOperationModeChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleStpControlRequest"),
        ("SLE-BRIDGE-MIB", "sleStpControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleStpControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleStpOperationMode"))
)
if mibBuilder.loadTexts:
    sleStpOperationModeChanged.setStatus(
        "current"
    )

sleStpConfigureProfileChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 5, 3, 2)
)
sleStpConfigureProfileChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleStpControlRequest"),
        ("SLE-BRIDGE-MIB", "sleStpControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleStpControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleStpRevisionLevel"),
        ("SLE-BRIDGE-MIB", "sleStpConfigureName"))
)
if mibBuilder.loadTexts:
    sleStpConfigureProfileChanged.setStatus(
        "current"
    )

sleStpTimerProfileChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 5, 3, 3)
)
sleStpTimerProfileChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleStpControlRequest"),
        ("SLE-BRIDGE-MIB", "sleStpControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleStpControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleStpFwdDelay"),
        ("SLE-BRIDGE-MIB", "sleStpHelloTime"),
        ("SLE-BRIDGE-MIB", "sleStpMaxAge"),
        ("SLE-BRIDGE-MIB", "sleStpMaxHops"))
)
if mibBuilder.loadTexts:
    sleStpTimerProfileChanged.setStatus(
        "current"
    )

sleStpBpduGuardProfileChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 5, 3, 4)
)
sleStpBpduGuardProfileChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleStpControlRequest"),
        ("SLE-BRIDGE-MIB", "sleStpControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleStpControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleStpBpduGuardMode"),
        ("SLE-BRIDGE-MIB", "sleStpBpduGuardAutoRcvMode"),
        ("SLE-BRIDGE-MIB", "sleStpBpduGuardAutoRcvTime"))
)
if mibBuilder.loadTexts:
    sleStpBpduGuardProfileChanged.setStatus(
        "current"
    )

sleStpInstanceEnableChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 6, 3, 1)
)
sleStpInstanceEnableChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleStpInstanceControlRequest"),
        ("SLE-BRIDGE-MIB", "sleStpInstanceControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleStpInstanceControlIndex"),
        ("SLE-BRIDGE-MIB", "sleStpInstanceControlEnable"),
        ("SLE-BRIDGE-MIB", "sleStpInstanceControlTimeStamp"))
)
if mibBuilder.loadTexts:
    sleStpInstanceEnableChanged.setStatus(
        "current"
    )

sleStpInstanceConfigProfileChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 6, 3, 2)
)
sleStpInstanceConfigProfileChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleStpInstanceControlRequest"),
        ("SLE-BRIDGE-MIB", "sleStpInstanceControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleStpInstanceControlIndex"),
        ("SLE-BRIDGE-MIB", "sleStpInstanceControlPriority"),
        ("SLE-BRIDGE-MIB", "sleStpInstanceControlBrFwdDelay"),
        ("SLE-BRIDGE-MIB", "sleStpInstanceControlBrHelloTime"),
        ("SLE-BRIDGE-MIB", "sleStpInstanceControlBrMaxAge"),
        ("SLE-BRIDGE-MIB", "sleStpInstanceControlTimeStamp"))
)
if mibBuilder.loadTexts:
    sleStpInstanceConfigProfileChanged.setStatus(
        "current"
    )

sleStpInstancePortProfileChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 7, 3, 1)
)
sleStpInstancePortProfileChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleStpInstancePortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleStpInstancePortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleStpInstancePortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleStpInstancePortPathcost"),
        ("SLE-BRIDGE-MIB", "sleStpInstancePortPriority"),
        ("SLE-BRIDGE-MIB", "sleStpInstancePortRootGuardMode"))
)
if mibBuilder.loadTexts:
    sleStpInstancePortProfileChanged.setStatus(
        "current"
    )

sleSubnetVlanCreated = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 8, 3, 1)
)
sleSubnetVlanCreated.setObjects(
      *(("SLE-BRIDGE-MIB", "sleSubnetVlanControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleSubnetVlanControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleSubnetVlanControlRequest"),
        ("SLE-BRIDGE-MIB", "sleSubnetVlanVid"))
)
if mibBuilder.loadTexts:
    sleSubnetVlanCreated.setStatus(
        "current"
    )

sleSubnetVlanDestroyed = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 8, 3, 2)
)
sleSubnetVlanDestroyed.setObjects(
      *(("SLE-BRIDGE-MIB", "sleSubnetVlanControlRequest"),
        ("SLE-BRIDGE-MIB", "sleSubnetVlanControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleSubnetVlanControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleSubnetVlanVid"))
)
if mibBuilder.loadTexts:
    sleSubnetVlanDestroyed.setStatus(
        "current"
    )

sleProtocolVlanCreated = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 9, 3, 1)
)
sleProtocolVlanCreated.setObjects(
      *(("SLE-BRIDGE-MIB", "sleProtocolVlanVid"),
        ("SLE-BRIDGE-MIB", "sleProtocolVlanControlRequest"),
        ("SLE-BRIDGE-MIB", "sleProtocolVlanControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleProtocolVlanControlReqResult"))
)
if mibBuilder.loadTexts:
    sleProtocolVlanCreated.setStatus(
        "current"
    )

sleProtocolVlanDestroyed = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 9, 3, 2)
)
sleProtocolVlanDestroyed.setObjects(
      *(("SLE-BRIDGE-MIB", "sleProtocolVlanControlRequest"),
        ("SLE-BRIDGE-MIB", "sleProtocolVlanControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleProtocolVlanControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleProtocolVlanVid"))
)
if mibBuilder.loadTexts:
    sleProtocolVlanDestroyed.setStatus(
        "current"
    )

sleLagProfileChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 10, 3, 1)
)
sleLagProfileChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleLagControlRequest"),
        ("SLE-BRIDGE-MIB", "sleLagControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleLagControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleLagLeastActive"),
        ("SLE-BRIDGE-MIB", "sleLagPortMap"),
        ("SLE-BRIDGE-MIB", "sleLagDistMode"),
        ("SLE-BRIDGE-MIB", "sleLagMode"))
)
if mibBuilder.loadTexts:
    sleLagProfileChanged.setStatus(
        "current"
    )

sleLagProfileActiveLinkChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 10, 3, 2)
)
sleLagProfileActiveLinkChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleLagControlRequest"),
        ("SLE-BRIDGE-MIB", "sleLagControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleLagControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleLagLeastActive"),
        ("SLE-BRIDGE-MIB", "sleLagPortMap"),
        ("SLE-BRIDGE-MIB", "sleLagDistMode"),
        ("SLE-BRIDGE-MIB", "sleLagMode"))
)
if mibBuilder.loadTexts:
    sleLagProfileActiveLinkChanged.setStatus(
        "current"
    )

sleLagLacpStatsCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 11, 4, 1)
)
sleLagLacpStatsCleared.setObjects(
      *(("SLE-BRIDGE-MIB", "sleLagLacpControlRequest"),
        ("SLE-BRIDGE-MIB", "sleLagLacpControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleLagLacpControlReqResult"))
)
if mibBuilder.loadTexts:
    sleLagLacpStatsCleared.setStatus(
        "current"
    )

sleLagLacpPortProfileChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 3, 1)
)
sleLagLacpPortProfileChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleLagLacpPortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortActorAdminKey"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortActorPriority"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortActorAdminState"))
)
if mibBuilder.loadTexts:
    sleLagLacpPortProfileChanged.setStatus(
        "current"
    )

sleLagLacpPortAggrChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 12, 3, 2)
)
sleLagLacpPortAggrChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleLagLacpPortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortActorAdminAggregatorId"))
)
if mibBuilder.loadTexts:
    sleLagLacpPortAggrChanged.setStatus(
        "current"
    )

sleFdbEntryCreated = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 13, 3, 1)
)
sleFdbEntryCreated.setObjects(
      *(("SLE-BRIDGE-MIB", "sleFdbEntryControlRequest"),
        ("SLE-BRIDGE-MIB", "sleFdbEntryControlTImeStamp"),
        ("SLE-BRIDGE-MIB", "sleFdbEntryControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleFdbEntryPermission"))
)
if mibBuilder.loadTexts:
    sleFdbEntryCreated.setStatus(
        "current"
    )

sleFdbEntryDestoryed = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 13, 3, 2)
)
sleFdbEntryDestoryed.setObjects(
      *(("SLE-BRIDGE-MIB", "sleFdbEntryControlRequest"),
        ("SLE-BRIDGE-MIB", "sleFdbEntryControlTImeStamp"),
        ("SLE-BRIDGE-MIB", "sleFdbEntryControlMacAddress"),
        ("SLE-BRIDGE-MIB", "sleFdbEntryControlReqResult"))
)
if mibBuilder.loadTexts:
    sleFdbEntryDestoryed.setStatus(
        "current"
    )

sleFdbTableEntriesCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 13, 3, 3)
)
sleFdbTableEntriesCleared.setObjects(
      *(("SLE-BRIDGE-MIB", "sleFdbEntryControlRequest"),
        ("SLE-BRIDGE-MIB", "sleFdbEntryControlTImeStamp"),
        ("SLE-BRIDGE-MIB", "sleFdbEntryControlMacAddress"),
        ("SLE-BRIDGE-MIB", "sleFdbEntryControlReqResult"))
)
if mibBuilder.loadTexts:
    sleFdbTableEntriesCleared.setStatus(
        "current"
    )

sleMfdbOldEntryCreated = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 14, 3, 1)
)
sleMfdbOldEntryCreated.setObjects(
      *(("SLE-BRIDGE-MIB", "sleMfdbOldControlRequest"),
        ("SLE-BRIDGE-MIB", "sleMfdbOldControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleMfdbOldControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleMfdbOldControlEntryPermission"))
)
if mibBuilder.loadTexts:
    sleMfdbOldEntryCreated.setStatus(
        "current"
    )

sleMfdbOldEntryDestoryed = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 14, 3, 2)
)
sleMfdbOldEntryDestoryed.setObjects(
      *(("SLE-BRIDGE-MIB", "sleMfdbOldControlRequest"),
        ("SLE-BRIDGE-MIB", "sleMfdbOldControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleMfdbOldControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleMfdbOldControlMacAddress"))
)
if mibBuilder.loadTexts:
    sleMfdbOldEntryDestoryed.setStatus(
        "current"
    )

sleMfdbOldEntryPermissionChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 14, 3, 3)
)
sleMfdbOldEntryPermissionChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleMfdbOldControlRequest"),
        ("SLE-BRIDGE-MIB", "sleMfdbOldControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleMfdbOldControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleMfdbOldEntryPermission"))
)
if mibBuilder.loadTexts:
    sleMfdbOldEntryPermissionChanged.setStatus(
        "current"
    )

sleMfdbOldEntryTableCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 14, 3, 4)
)
sleMfdbOldEntryTableCleared.setObjects(
      *(("SLE-BRIDGE-MIB", "sleMfdbOldControlRequest"),
        ("SLE-BRIDGE-MIB", "sleMfdbOldControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleMfdbOldControlReqResult"))
)
if mibBuilder.loadTexts:
    sleMfdbOldEntryTableCleared.setStatus(
        "current"
    )

sleIgmpConfProfileChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 15, 3, 1)
)
sleIgmpConfProfileChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleIgmpConfControlRequest"),
        ("SLE-BRIDGE-MIB", "sleIgmpConfControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleIgmpConfControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleIgmpConfSnoopMrouter"),
        ("SLE-BRIDGE-MIB", "sleIgmpConfEnable"),
        ("SLE-BRIDGE-MIB", "sleIgmpConfMulticastFilter"),
        ("SLE-BRIDGE-MIB", "sleIgmpConfOutmostVlan"),
        ("SLE-BRIDGE-MIB", "sleIgmpConfSnoopEnable"),
        ("SLE-BRIDGE-MIB", "sleIgmpConfSnoopJoinDelay"),
        ("SLE-BRIDGE-MIB", "sleIgmpConfSnoopQueryDelay"),
        ("SLE-BRIDGE-MIB", "sleIgmpConfSnoopFastLeave"),
        ("SLE-BRIDGE-MIB", "sleIgmpConfSnoopQuerier"))
)
if mibBuilder.loadTexts:
    sleIgmpConfProfileChanged.setStatus(
        "current"
    )

sleIgmpStaticMcastCreated = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 16, 3, 1)
)
sleIgmpStaticMcastCreated.setObjects(
      *(("SLE-BRIDGE-MIB", "sleIgmpMcastControlReqest"),
        ("SLE-BRIDGE-MIB", "sleIgmpMcastControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleIgmpMcastControlPortIndex"),
        ("SLE-BRIDGE-MIB", "sleIgmpMcastControlReqResult"))
)
if mibBuilder.loadTexts:
    sleIgmpStaticMcastCreated.setStatus(
        "current"
    )

sleIgmpStaticMcastDestroyed = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 16, 3, 2)
)
sleIgmpStaticMcastDestroyed.setObjects(
      *(("SLE-BRIDGE-MIB", "sleIgmpMcastControlReqest"),
        ("SLE-BRIDGE-MIB", "sleIgmpMcastControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleIgmpMcastControlPortIndex"),
        ("SLE-BRIDGE-MIB", "sleIgmpMcastControlTimeStamp"))
)
if mibBuilder.loadTexts:
    sleIgmpStaticMcastDestroyed.setStatus(
        "current"
    )

sleStackDeviceCreated = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 17, 3, 1)
)
sleStackDeviceCreated.setObjects(
      *(("SLE-BRIDGE-MIB", "sleStackDeviceControlRequest"),
        ("SLE-BRIDGE-MIB", "sleStackDeviceControlTImeStamp"),
        ("SLE-BRIDGE-MIB", "sleStackDeviceControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleStackDeviceDescriptor"))
)
if mibBuilder.loadTexts:
    sleStackDeviceCreated.setStatus(
        "current"
    )

sleStackDeviceDestoryed = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 17, 3, 2)
)
sleStackDeviceDestoryed.setObjects(
      *(("SLE-BRIDGE-MIB", "sleStackDeviceControlRequest"),
        ("SLE-BRIDGE-MIB", "sleStackDeviceControlTImeStamp"),
        ("SLE-BRIDGE-MIB", "sleStackDeviceControlMacAddress"),
        ("SLE-BRIDGE-MIB", "sleStackDeviceControlReqResult"))
)
if mibBuilder.loadTexts:
    sleStackDeviceDestoryed.setStatus(
        "current"
    )

sleErpDomainCreated = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 3, 1)
)
sleErpDomainCreated.setObjects(
      *(("SLE-BRIDGE-MIB", "sleErpDomainControlRequest"),
        ("SLE-BRIDGE-MIB", "sleErpDomainControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleErpDomainControlTImeStamp"),
        ("SLE-BRIDGE-MIB", "sleErpDomainName"),
        ("SLE-BRIDGE-MIB", "sleErpDomainPrimaryPort"),
        ("SLE-BRIDGE-MIB", "sleErpDomainSecondaryPort"),
        ("SLE-BRIDGE-MIB", "sleErpDomainBridgeRole"),
        ("SLE-BRIDGE-MIB", "sleErpDomainProtectionActivation"),
        ("SLE-BRIDGE-MIB", "sleErpDomainOperatorRequest"),
        ("SLE-BRIDGE-MIB", "sleErpDomainWaitToRestoreTime"),
        ("SLE-BRIDGE-MIB", "sleErpDomainTestPacketInterval"),
        ("SLE-BRIDGE-MIB", "sleErpDomainLearningDisabledTime"))
)
if mibBuilder.loadTexts:
    sleErpDomainCreated.setStatus(
        "current"
    )

sleErpDomainDestroyed = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 3, 2)
)
sleErpDomainDestroyed.setObjects(
      *(("SLE-BRIDGE-MIB", "sleErpDomainControlRequest"),
        ("SLE-BRIDGE-MIB", "sleErpDomainControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleErpDomainControlIndex"),
        ("SLE-BRIDGE-MIB", "sleErpDomainControlTImeStamp"))
)
if mibBuilder.loadTexts:
    sleErpDomainDestroyed.setStatus(
        "current"
    )

sleErpDomainProfileChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 3, 3)
)
sleErpDomainProfileChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleErpDomainControlRequest"),
        ("SLE-BRIDGE-MIB", "sleErpDomainControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleErpDomainControlTImeStamp"),
        ("SLE-BRIDGE-MIB", "sleErpDomainName"),
        ("SLE-BRIDGE-MIB", "sleErpDomainPrimaryPort"),
        ("SLE-BRIDGE-MIB", "sleErpDomainSecondaryPort"),
        ("SLE-BRIDGE-MIB", "sleErpDomainBridgeRole"),
        ("SLE-BRIDGE-MIB", "sleErpDomainOperatorRequest"),
        ("SLE-BRIDGE-MIB", "sleErpDomainWaitToRestoreTime"),
        ("SLE-BRIDGE-MIB", "sleErpDomainTestPacketInterval"),
        ("SLE-BRIDGE-MIB", "sleErpDomainLearningDisabledTime"))
)
if mibBuilder.loadTexts:
    sleErpDomainProfileChanged.setStatus(
        "current"
    )

sleErpProtectionActivationChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 3, 4)
)
sleErpProtectionActivationChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleErpDomainControlRequest"),
        ("SLE-BRIDGE-MIB", "sleErpDomainControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleErpDomainControlTImeStamp"),
        ("SLE-BRIDGE-MIB", "sleErpDomainProtectionActivation"))
)
if mibBuilder.loadTexts:
    sleErpProtectionActivationChanged.setStatus(
        "current"
    )

sleErpHoldOffTimeChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 3, 5)
)
sleErpHoldOffTimeChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleErpDomainControlRequest"),
        ("SLE-BRIDGE-MIB", "sleErpDomainControlTImeStamp"),
        ("SLE-BRIDGE-MIB", "sleErpDomainControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleErpDomainHoldOffTime"))
)
if mibBuilder.loadTexts:
    sleErpHoldOffTimeChanged.setStatus(
        "current"
    )

sleErpRingPriorityChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 3, 6)
)
sleErpRingPriorityChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleErpDomainControlRequest"),
        ("SLE-BRIDGE-MIB", "sleErpDomainControlTImeStamp"),
        ("SLE-BRIDGE-MIB", "sleErpDomainControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleErpDomainRingPriority"))
)
if mibBuilder.loadTexts:
    sleErpRingPriorityChanged.setStatus(
        "current"
    )

sleErpTrapChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 18, 3, 7)
)
sleErpTrapChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleErpDomainControlRequest"),
        ("SLE-BRIDGE-MIB", "sleErpDomainControlTImeStamp"),
        ("SLE-BRIDGE-MIB", "sleErpDomainControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleErpDomainLotp"),
        ("SLE-BRIDGE-MIB", "sleErpDomainULotp"),
        ("SLE-BRIDGE-MIB", "sleErpDomainMultipleRM"),
        ("SLE-BRIDGE-MIB", "sleErpDomainRMNodeReacheablility"))
)
if mibBuilder.loadTexts:
    sleErpTrapChanged.setStatus(
        "current"
    )

sleLldpPortProfileChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 19, 3, 1)
)
sleLldpPortProfileChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleLldpPortActivity"),
        ("SLE-BRIDGE-MIB", "sleLldpPortAdminStatus"),
        ("SLE-BRIDGE-MIB", "sleLldpPortNotificationEnable"),
        ("SLE-BRIDGE-MIB", "sleLldpPortTLVsTxEnable"),
        ("SLE-BRIDGE-MIB", "sleLldpPortMgmtTxEnable"),
        ("SLE-BRIDGE-MIB", "sleLldpPortMgmtAddress"),
        ("SLE-BRIDGE-MIB", "sleLldpPortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleLldpPortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleLldpPortControlReqResult"))
)
if mibBuilder.loadTexts:
    sleLldpPortProfileChanged.setStatus(
        "current"
    )

sleLldpPortNetworkPolicyProfileChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 19, 3, 2)
)
sleLldpPortNetworkPolicyProfileChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleLldpPortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleLldpPortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleLldpPortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleLldpPortControlTLVsTxNetworkPolicyProfile"))
)
if mibBuilder.loadTexts:
    sleLldpPortNetworkPolicyProfileChanged.setStatus(
        "current"
    )

sleLldpStatisticsCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 21, 3, 1)
)
sleLldpStatisticsCleared.setObjects(
      *(("SLE-BRIDGE-MIB", "sleLldpStatsControlRequest"),
        ("SLE-BRIDGE-MIB", "sleLldpStatsControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleLldpStatsControlPortIndex"),
        ("SLE-BRIDGE-MIB", "sleLldpStatsControlReqResult"))
)
if mibBuilder.loadTexts:
    sleLldpStatisticsCleared.setStatus(
        "current"
    )

sleBridgePSStatusChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 22, 3, 1)
)
sleBridgePSStatusChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePSControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePSControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePSControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePSControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePSControlPSStatus"))
)
if mibBuilder.loadTexts:
    sleBridgePSStatusChanged.setStatus(
        "current"
    )

sleBridgePSMaxCountChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 22, 3, 2)
)
sleBridgePSMaxCountChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePSControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePSControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePSControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePSControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePSControlMaxCount"))
)
if mibBuilder.loadTexts:
    sleBridgePSMaxCountChanged.setStatus(
        "current"
    )

sleBridgePSProfileChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 22, 3, 3)
)
sleBridgePSProfileChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePSControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePSControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePSControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePSControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgePSControlAgingType"),
        ("SLE-BRIDGE-MIB", "sleBridgePSControlAgingTimer"),
        ("SLE-BRIDGE-MIB", "sleBridgePSControlAgingStatic"),
        ("SLE-BRIDGE-MIB", "sleBridgePScontrolViolation"))
)
if mibBuilder.loadTexts:
    sleBridgePSProfileChanged.setStatus(
        "current"
    )

sleBridgePSFdbEntryCreated = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 23, 3, 1)
)
sleBridgePSFdbEntryCreated.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePSFdbControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePSFdbControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePSFdbControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePSFdbControlPort"),
        ("SLE-BRIDGE-MIB", "sleBridgePSFdbControlVid"),
        ("SLE-BRIDGE-MIB", "sleBridgePSFdbControlMacAddress"))
)
if mibBuilder.loadTexts:
    sleBridgePSFdbEntryCreated.setStatus(
        "current"
    )

sleBridgePSFdbEntryDestroyed = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 23, 3, 2)
)
sleBridgePSFdbEntryDestroyed.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePSFdbControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePSFdbControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePSFdbControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePSFdbControlPort"),
        ("SLE-BRIDGE-MIB", "sleBridgePSFdbControlVid"),
        ("SLE-BRIDGE-MIB", "sleBridgePSFdbControlMacAddress"))
)
if mibBuilder.loadTexts:
    sleBridgePSFdbEntryDestroyed.setStatus(
        "current"
    )

sleBridgePSFdbEntryCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 23, 3, 3)
)
sleBridgePSFdbEntryCleared.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgePSFdbControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgePSFdbControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgePSFdbControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgePSFdbControlPort"),
        ("SLE-BRIDGE-MIB", "sleBridgePSFdbControlVid"),
        ("SLE-BRIDGE-MIB", "sleBridgePSFdbControlMacAddress"))
)
if mibBuilder.loadTexts:
    sleBridgePSFdbEntryCleared.setStatus(
        "current"
    )

sleBridgeFGBaseCfgdStatusChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 1, 3, 1)
)
sleBridgeFGBaseCfgdStatusChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeFGBaseControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGBaseControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGBaseControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGBaseControlCfgdEnable"))
)
if mibBuilder.loadTexts:
    sleBridgeFGBaseCfgdStatusChanged.setStatus(
        "current"
    )

sleBridgeFGBaseSfgdStatusChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 1, 3, 2)
)
sleBridgeFGBaseSfgdStatusChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeFGBaseControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGBaseControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGBaseControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGBaseControlSfgdEnable"))
)
if mibBuilder.loadTexts:
    sleBridgeFGBaseSfgdStatusChanged.setStatus(
        "current"
    )

sleBridgeFGPortProfileChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 2, 3, 1)
)
sleBridgeFGPortProfileChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeFGPortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGPortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGPortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGPortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGPortControlType"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGPortControlFrameType"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGPortControlFrame"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGPortControlSetTimer"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGPortControlBlock"))
)
if mibBuilder.loadTexts:
    sleBridgeFGPortProfileChanged.setStatus(
        "current"
    )

sleBridgeFGPortUnblockChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 24, 2, 3, 2)
)
sleBridgeFGPortUnblockChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeFGPortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGPortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGPortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGPortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGPortControlType"))
)
if mibBuilder.loadTexts:
    sleBridgeFGPortUnblockChanged.setStatus(
        "current"
    )

sleBridgeVTSet = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 4, 1)
)
sleBridgeVTSet.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeVTControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeVTControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeVTControlServerId"),
        ("SLE-BRIDGE-MIB", "sleBridgeVTControlClientId"),
        ("SLE-BRIDGE-MIB", "sleBridgeVTControlReqResult"))
)
if mibBuilder.loadTexts:
    sleBridgeVTSet.setStatus(
        "current"
    )

sleBridgeVTClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 4, 2)
)
sleBridgeVTClear.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeVTControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeVTControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeVTControlServerId"),
        ("SLE-BRIDGE-MIB", "sleBridgeVTControlClientId"),
        ("SLE-BRIDGE-MIB", "sleBridgeVTControlReqResult"))
)
if mibBuilder.loadTexts:
    sleBridgeVTClear.setStatus(
        "current"
    )

sleBridgeInBoundVTSet = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 7, 1)
)
sleBridgeInBoundVTSet.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeInBoundVTControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeInBoundVTControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeInBoundVTControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeInBoundVTControlPortIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeInBoundVTControlVlanIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeInBoundVTControlNewVid"))
)
if mibBuilder.loadTexts:
    sleBridgeInBoundVTSet.setStatus(
        "current"
    )

sleBridgeInBoundVTClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 7, 2)
)
sleBridgeInBoundVTClear.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeInBoundVTControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeInBoundVTControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeInBoundVTControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeInBoundVTControlPortIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeInBoundVTControlVlanIndex"))
)
if mibBuilder.loadTexts:
    sleBridgeInBoundVTClear.setStatus(
        "current"
    )

sleBridgeOutBoundVTSet = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 10, 1)
)
sleBridgeOutBoundVTSet.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeOutBoundVTControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeOutBoundVTControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeOutBoundVTControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeOutBoundVTControlPortIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeOutBoundVTControlVlanIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeOutBoundVTControlNewVid"))
)
if mibBuilder.loadTexts:
    sleBridgeOutBoundVTSet.setStatus(
        "current"
    )

sleBridgeOutBoundVTClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 25, 10, 2)
)
sleBridgeOutBoundVTClear.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeOutBoundVTControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeOutBoundVTControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeOutBoundVTControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeOutBoundVTControlPortIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeOutBoundVTControlVlanIndex"))
)
if mibBuilder.loadTexts:
    sleBridgeOutBoundVTClear.setStatus(
        "current"
    )

sleBridgeGarpStatusChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 1, 3, 1)
)
sleBridgeGarpStatusChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeGarpBaseControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpBaseControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpBaseControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpBaseControlGvrpStatus"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpBaseControlGmrpStatus"))
)
if mibBuilder.loadTexts:
    sleBridgeGarpStatusChanged.setStatus(
        "current"
    )

sleBridgeGarpTimerChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 1, 3, 2)
)
sleBridgeGarpTimerChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeGarpBaseControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpBaseControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpBaseControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpBaseControlTimerJoin"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpBaseControlTimerLeave"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpBaseControlTimerLeaveAll"))
)
if mibBuilder.loadTexts:
    sleBridgeGarpTimerChanged.setStatus(
        "current"
    )

sleBridgeGarpAppPortStatusChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 2, 3, 1)
)
sleBridgeGarpAppPortStatusChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortControlType"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortControlPortStatus"))
)
if mibBuilder.loadTexts:
    sleBridgeGarpAppPortStatusChanged.setStatus(
        "current"
    )

sleBridgeGarpAppPortProfileChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 2, 3, 2)
)
sleBridgeGarpAppPortProfileChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortControlType"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortControlRegistration"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortControlApplicant"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortControlFwdAll"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortControlTimerJoin"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortControlTimerLeave"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortControlTimerLeaveAll"))
)
if mibBuilder.loadTexts:
    sleBridgeGarpAppPortProfileChanged.setStatus(
        "current"
    )

sleBridgeGarpStatisticsCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 3, 3, 1)
)
sleBridgeGarpStatisticsCleared.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeGarpStatsControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpStatsControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpStatsControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpStatsControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpStatsControlType"))
)
if mibBuilder.loadTexts:
    sleBridgeGarpStatisticsCleared.setStatus(
        "current"
    )

sleBridgeGmrpStaticAdded = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 4, 3, 1)
)
sleBridgeGmrpStaticAdded.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeGmrpStaticControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeGmrpStaticControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeGmrpStaticControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeGmrpStaticControlVid"),
        ("SLE-BRIDGE-MIB", "sleBridgeGmrpStaticControlPort"),
        ("SLE-BRIDGE-MIB", "sleBridgeGmrpStaticControlGmac"))
)
if mibBuilder.loadTexts:
    sleBridgeGmrpStaticAdded.setStatus(
        "current"
    )

sleBridgeGmrpStaticDeleted = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 26, 4, 3, 2)
)
sleBridgeGmrpStaticDeleted.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeGmrpStaticControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeGmrpStaticControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeGmrpStaticControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeGmrpStaticControlVid"),
        ("SLE-BRIDGE-MIB", "sleBridgeGmrpStaticControlPort"),
        ("SLE-BRIDGE-MIB", "sleBridgeGmrpStaticControlGmac"))
)
if mibBuilder.loadTexts:
    sleBridgeGmrpStaticDeleted.setStatus(
        "current"
    )

sleVlanInboundTagChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 1, 3, 1)
)
sleVlanInboundTagChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleVlanInboundTagControlRequest"),
        ("SLE-BRIDGE-MIB", "sleVlanInboundTagControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleVlanInboundTagControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleVlanInboundTagControlPortIndex"),
        ("SLE-BRIDGE-MIB", "sleVlanInboundTagControlVlanIndex"),
        ("SLE-BRIDGE-MIB", "sleVlanInboundTagControlOuterVid"),
        ("SLE-BRIDGE-MIB", "sleVlanInboundTagControlVlanPriority"),
        ("SLE-BRIDGE-MIB", "sleVlanInboundTagControlOuterVlanPriority"))
)
if mibBuilder.loadTexts:
    sleVlanInboundTagChanged.setStatus(
        "current"
    )

sleVlanInboundTagCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 1, 3, 2)
)
sleVlanInboundTagCleared.setObjects(
      *(("SLE-BRIDGE-MIB", "sleVlanInboundTagControlRequest"),
        ("SLE-BRIDGE-MIB", "sleVlanInboundTagControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleVlanInboundTagControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleVlanInboundTagControlPortIndex"),
        ("SLE-BRIDGE-MIB", "sleVlanInboundTagControlVlanIndex"),
        ("SLE-BRIDGE-MIB", "sleVlanInboundTagControlVlanPriority"))
)
if mibBuilder.loadTexts:
    sleVlanInboundTagCleared.setStatus(
        "current"
    )

sleVlanOutboundTagSet = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 2, 3, 1)
)
sleVlanOutboundTagSet.setObjects(
      *(("SLE-BRIDGE-MIB", "sleVlanOutboundTagControlRequest"),
        ("SLE-BRIDGE-MIB", "sleVlanOutboundTagControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleVlanOutboundTagControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleVlanOutboundTagControlPortIndex"),
        ("SLE-BRIDGE-MIB", "sleVlanOutboundTagControlOuterVid"))
)
if mibBuilder.loadTexts:
    sleVlanOutboundTagSet.setStatus(
        "current"
    )

sleVlanOutboundTagClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 2, 3, 2)
)
sleVlanOutboundTagClear.setObjects(
      *(("SLE-BRIDGE-MIB", "sleVlanOutboundTagControlRequest"),
        ("SLE-BRIDGE-MIB", "sleVlanOutboundTagControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleVlanOutboundTagControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleVlanOutboundTagControlPortIndex"),
        ("SLE-BRIDGE-MIB", "sleVlanOutboundTagControlOuterVid"))
)
if mibBuilder.loadTexts:
    sleVlanOutboundTagClear.setStatus(
        "current"
    )

sleVlanRangeInboundTagChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 3, 3, 1)
)
sleVlanRangeInboundTagChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleVlanRangeInboundTagControlRequest"),
        ("SLE-BRIDGE-MIB", "sleVlanRangeInboundTagControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleVlanRangeInboundTagControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleVlanRangeInboundTagControlPortIndex"),
        ("SLE-BRIDGE-MIB", "sleVlanRangeInboundTagControlMinVlanIndex"),
        ("SLE-BRIDGE-MIB", "sleVlanRangeInboundTagControlMaxVlanIndex"),
        ("SLE-BRIDGE-MIB", "sleVlanRangeInboundTagControlOuterVid"))
)
if mibBuilder.loadTexts:
    sleVlanRangeInboundTagChanged.setStatus(
        "current"
    )

sleVlanRangeInboundTagCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 3, 3, 2)
)
sleVlanRangeInboundTagCleared.setObjects(
      *(("SLE-BRIDGE-MIB", "sleVlanRangeInboundTagControlRequest"),
        ("SLE-BRIDGE-MIB", "sleVlanRangeInboundTagControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleVlanRangeInboundTagControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleVlanRangeInboundTagControlPortIndex"),
        ("SLE-BRIDGE-MIB", "sleVlanRangeInboundTagControlMinVlanIndex"),
        ("SLE-BRIDGE-MIB", "sleVlanRangeInboundTagControlMaxVlanIndex"))
)
if mibBuilder.loadTexts:
    sleVlanRangeInboundTagCleared.setStatus(
        "current"
    )

sleVlanProtoIdOuterProtoIdChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 27, 4, 3, 1)
)
sleVlanProtoIdOuterProtoIdChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleVlanProtoIdControlRequest"),
        ("SLE-BRIDGE-MIB", "sleVlanProtoIdControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleVlanProtoIdControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleVlanProtoIdControlVid"),
        ("SLE-BRIDGE-MIB", "sleVlanProtoIdControlOuterProtoId"))
)
if mibBuilder.loadTexts:
    sleVlanProtoIdOuterProtoIdChanged.setStatus(
        "current"
    )

sleVlanMappingCreated = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 28, 3, 1)
)
sleVlanMappingCreated.setObjects(
      *(("SLE-BRIDGE-MIB", "sleVlanMappingControlRequest"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingControlPortId"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingControlOriVlanId"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingControlTransVlanID"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingControlMode"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingControlMatchCos"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingControlMatchDscp"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingControlMatchEthType"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingControlMatchIPPrecedence"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingControlMatchTos"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingControlRateLimit"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingControlCos"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingControlDscp"))
)
if mibBuilder.loadTexts:
    sleVlanMappingCreated.setStatus(
        "current"
    )

sleVlanMappingDeleted = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 28, 3, 2)
)
sleVlanMappingDeleted.setObjects(
      *(("SLE-BRIDGE-MIB", "sleVlanMappingControlRequest"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingControlIndex"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingControlReqResult"))
)
if mibBuilder.loadTexts:
    sleVlanMappingDeleted.setStatus(
        "current"
    )

slePowerInlineEnableChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 29, 3, 1)
)
slePowerInlineEnableChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "slePowerInlineControlRequest"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlReqResult"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlPortIndex"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlPortStatus"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlPortClass"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlPortMaxPower"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlPortLegacy"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlPriority"))
)
if mibBuilder.loadTexts:
    slePowerInlineEnableChanged.setStatus(
        "current"
    )

slePowerInlineDisableChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 29, 3, 2)
)
slePowerInlineDisableChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "slePowerInlineControlRequest"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlReqResult"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlPortIndex"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlPortStatus"))
)
if mibBuilder.loadTexts:
    slePowerInlineDisableChanged.setStatus(
        "current"
    )

slePowerInlineResetChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 29, 3, 3)
)
slePowerInlineResetChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "slePowerInlineControlRequest"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlReqResult"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlPortIndex"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlPortStatus"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlPortClass"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlPortMaxPower"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlPortLegacy"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlPriority"))
)
if mibBuilder.loadTexts:
    slePowerInlineResetChanged.setStatus(
        "current"
    )

slePowerInlineLegacyChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 29, 3, 4)
)
slePowerInlineLegacyChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "slePowerInlineControlRequest"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlReqResult"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlPortIndex"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlPortStatus"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlPortLegacy"))
)
if mibBuilder.loadTexts:
    slePowerInlineLegacyChanged.setStatus(
        "current"
    )

slePowerInlinePriorityChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 29, 3, 5)
)
slePowerInlinePriorityChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "slePowerInlineControlRequest"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlReqResult"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlPortIndex"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlPortStatus"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlPriority"))
)
if mibBuilder.loadTexts:
    slePowerInlinePriorityChanged.setStatus(
        "current"
    )

slePowerInlineClassChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 29, 3, 6)
)
slePowerInlineClassChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "slePowerInlineControlRequest"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlReqResult"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlPortIndex"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlPortStatus"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlPortClass"))
)
if mibBuilder.loadTexts:
    slePowerInlineClassChanged.setStatus(
        "current"
    )

slePowerInlinePowerChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 29, 3, 7)
)
slePowerInlinePowerChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "slePowerInlineControlRequest"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlReqResult"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlPortIndex"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlPortStatus"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlPortClass"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlPortMaxPower"),
        ("SLE-BRIDGE-MIB", "slePowerInlineControlPortLegacy"))
)
if mibBuilder.loadTexts:
    slePowerInlinePowerChanged.setStatus(
        "current"
    )

sleMfdbEntryCreated = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 30, 3, 1)
)
sleMfdbEntryCreated.setObjects(
      *(("SLE-BRIDGE-MIB", "sleMfdbControlRequest"),
        ("SLE-BRIDGE-MIB", "sleMfdbControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleMfdbControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleMfdbControlMacAddress"),
        ("SLE-BRIDGE-MIB", "sleMfdbControlVlanIndex"))
)
if mibBuilder.loadTexts:
    sleMfdbEntryCreated.setStatus(
        "current"
    )

sleMfdbEntryDestoryed = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 30, 3, 2)
)
sleMfdbEntryDestoryed.setObjects(
      *(("SLE-BRIDGE-MIB", "sleMfdbControlRequest"),
        ("SLE-BRIDGE-MIB", "sleMfdbControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleMfdbControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleMfdbControlMacAddress"),
        ("SLE-BRIDGE-MIB", "sleMfdbControlVlanIndex"))
)
if mibBuilder.loadTexts:
    sleMfdbEntryDestoryed.setStatus(
        "current"
    )

sleMfdbEntryPermissionChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 30, 3, 3)
)
sleMfdbEntryPermissionChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleMfdbControlRequest"),
        ("SLE-BRIDGE-MIB", "sleMfdbControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleMfdbControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleMfdbControlEntryPermission"))
)
if mibBuilder.loadTexts:
    sleMfdbEntryPermissionChanged.setStatus(
        "current"
    )

sleMfdbEntryTableCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 30, 3, 4)
)
sleMfdbEntryTableCleared.setObjects(
      *(("SLE-BRIDGE-MIB", "sleMfdbControlRequest"),
        ("SLE-BRIDGE-MIB", "sleMfdbControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleMfdbControlTimeStamp"))
)
if mibBuilder.loadTexts:
    sleMfdbEntryTableCleared.setStatus(
        "current"
    )

sleLldpMedNetworkPolicyProfileCreated = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 1, 3, 1)
)
sleLldpMedNetworkPolicyProfileCreated.setObjects(
      *(("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfileControlRequest"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfileControlName"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfileControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfileControlReqResult"))
)
if mibBuilder.loadTexts:
    sleLldpMedNetworkPolicyProfileCreated.setStatus(
        "current"
    )

sleLldpMedNetworkPolicyProfileDestroyed = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 1, 3, 2)
)
sleLldpMedNetworkPolicyProfileDestroyed.setObjects(
      *(("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfileControlRequest"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfileControlIndex"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfileControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfileControlReqResult"))
)
if mibBuilder.loadTexts:
    sleLldpMedNetworkPolicyProfileDestroyed.setStatus(
        "current"
    )

sleLldpMedNetworkPolicyProfileCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 1, 3, 3)
)
sleLldpMedNetworkPolicyProfileCleared.setObjects(
      *(("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfileControlRequest"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfileControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfileControlReqResult"))
)
if mibBuilder.loadTexts:
    sleLldpMedNetworkPolicyProfileCleared.setStatus(
        "current"
    )

sleLldpMedNetworkPolicyProfilePolicyChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 2, 3, 1)
)
sleLldpMedNetworkPolicyProfilePolicyChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfilePolicyControlRequest"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfilePolicyControlProfileIndex"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfilePolicyControlAppType"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfilePolicyControlVlanId"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfilePolicyControlPriority"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfilePolicyControlDscp"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfilePolicyControlUnknown"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfilePolicyControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfilePolicyControlReqResult"))
)
if mibBuilder.loadTexts:
    sleLldpMedNetworkPolicyProfilePolicyChanged.setStatus(
        "current"
    )

sleLldpMedNetworkPolicyProfilePolicyDeleted = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 31, 2, 3, 2)
)
sleLldpMedNetworkPolicyProfilePolicyDeleted.setObjects(
      *(("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfilePolicyControlRequest"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfilePolicyControlProfileIndex"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfilePolicyControlAppType"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfilePolicyControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfilePolicyControlReqResult"))
)
if mibBuilder.loadTexts:
    sleLldpMedNetworkPolicyProfilePolicyDeleted.setStatus(
        "current"
    )

sleBridgeInterfaceSwitchportChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 3, 1)
)
sleBridgeInterfaceSwitchportChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlIndex"))
)
if mibBuilder.loadTexts:
    sleBridgeInterfaceSwitchportChanged.setStatus(
        "current"
    )

sleBridgeInterfaceSwitchportDefaultVlanChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 3, 2)
)
sleBridgeInterfaceSwitchportDefaultVlanChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlDefaultVlan"))
)
if mibBuilder.loadTexts:
    sleBridgeInterfaceSwitchportDefaultVlanChanged.setStatus(
        "current"
    )

sleBridgeInterfaceSwitchportDefaultVlanDeleted = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 3, 3)
)
sleBridgeInterfaceSwitchportDefaultVlanDeleted.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlIndex"))
)
if mibBuilder.loadTexts:
    sleBridgeInterfaceSwitchportDefaultVlanDeleted.setStatus(
        "current"
    )

sleBridgeInterfaceSwitchportAllowedVlanChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 3, 4)
)
sleBridgeInterfaceSwitchportAllowedVlanChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlAllowedVlanFlags"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlAllowedVlan"))
)
if mibBuilder.loadTexts:
    sleBridgeInterfaceSwitchportAllowedVlanChanged.setStatus(
        "current"
    )

sleBridgeInterfaceSwitchportModeChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 3, 5)
)
sleBridgeInterfaceSwitchportModeChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlMode"))
)
if mibBuilder.loadTexts:
    sleBridgeInterfaceSwitchportModeChanged.setStatus(
        "current"
    )

sleBridgeInterfaceSwitchportModeIngressFilterChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 3, 6)
)
sleBridgeInterfaceSwitchportModeIngressFilterChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlMode"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlIngressFilter"))
)
if mibBuilder.loadTexts:
    sleBridgeInterfaceSwitchportModeIngressFilterChanged.setStatus(
        "current"
    )

sleBridgeInterfaceSwitchportTrunkDeleted = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 3, 7)
)
sleBridgeInterfaceSwitchportTrunkDeleted.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlIndex"))
)
if mibBuilder.loadTexts:
    sleBridgeInterfaceSwitchportTrunkDeleted.setStatus(
        "current"
    )

sleBridgeInterfaceSwitchportTrunkNativeVlanChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 3, 8)
)
sleBridgeInterfaceSwitchportTrunkNativeVlanChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlNativeVlan"))
)
if mibBuilder.loadTexts:
    sleBridgeInterfaceSwitchportTrunkNativeVlanChanged.setStatus(
        "current"
    )

sleBridgeInterfaceSwitchportTrunkNativeVlanDeleted = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 3, 9)
)
sleBridgeInterfaceSwitchportTrunkNativeVlanDeleted.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlIndex"))
)
if mibBuilder.loadTexts:
    sleBridgeInterfaceSwitchportTrunkNativeVlanDeleted.setStatus(
        "current"
    )

sleBridgeInterfaceChannelGroupChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 3, 10)
)
sleBridgeInterfaceChannelGroupChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlChannelGroupAggrId"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlChannelGroupMode"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlChannelGroupLacpAggrMode"))
)
if mibBuilder.loadTexts:
    sleBridgeInterfaceChannelGroupChanged.setStatus(
        "current"
    )

sleBridgeInterfaceChannelGroupDeleted = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 3, 11)
)
sleBridgeInterfaceChannelGroupDeleted.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlIndex"))
)
if mibBuilder.loadTexts:
    sleBridgeInterfaceChannelGroupDeleted.setStatus(
        "current"
    )

sleBridgeInterfaceChannelGroupAdminKeyChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 3, 12)
)
sleBridgeInterfaceChannelGroupAdminKeyChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlChannelGroupAdminKey"))
)
if mibBuilder.loadTexts:
    sleBridgeInterfaceChannelGroupAdminKeyChanged.setStatus(
        "current"
    )

sleBridgeInterfaceChannelGroupAggrTypeChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 3, 13)
)
sleBridgeInterfaceChannelGroupAggrTypeChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlChannelGroupAggrType"))
)
if mibBuilder.loadTexts:
    sleBridgeInterfaceChannelGroupAggrTypeChanged.setStatus(
        "current"
    )

sleBridgeInterfaceChannelGroupPriorityChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 3, 14)
)
sleBridgeInterfaceChannelGroupPriorityChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlChannelGroupPriority"))
)
if mibBuilder.loadTexts:
    sleBridgeInterfaceChannelGroupPriorityChanged.setStatus(
        "current"
    )

sleBridgeInterfaceChannelGroupTimeOutChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 3, 15)
)
sleBridgeInterfaceChannelGroupTimeOutChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlChannelGroupTimeOut"))
)
if mibBuilder.loadTexts:
    sleBridgeInterfaceChannelGroupTimeOutChanged.setStatus(
        "current"
    )

sleBridgeInterfaceChannelGroupActiveLinkChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 3, 16)
)
sleBridgeInterfaceChannelGroupActiveLinkChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlChannelGroupActiveLink"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlChannelGroupDistMode"))
)
if mibBuilder.loadTexts:
    sleBridgeInterfaceChannelGroupActiveLinkChanged.setStatus(
        "current"
    )

sleBridgeInterfaceChannelGroupDistModeChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 3, 17)
)
sleBridgeInterfaceChannelGroupDistModeChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlChannelGroupDistMode"))
)
if mibBuilder.loadTexts:
    sleBridgeInterfaceChannelGroupDistModeChanged.setStatus(
        "current"
    )

sleBridgeInterfaceVlanChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 32, 3, 18)
)
sleBridgeInterfaceVlanChanged.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlIndex"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceControlPvid"))
)
if mibBuilder.loadTexts:
    sleBridgeInterfaceVlanChanged.setStatus(
        "current"
    )

sleBridgeReservedVlanAdded = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 33, 3, 1)
)
sleBridgeReservedVlanAdded.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeReservedVlanControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeReservedVlanControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeReservedVlanControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeReservedVlanControlStartVlanId"),
        ("SLE-BRIDGE-MIB", "sleBridgeReservedVlanControlEndVlanId"))
)
if mibBuilder.loadTexts:
    sleBridgeReservedVlanAdded.setStatus(
        "current"
    )

sleBridgeReservedVlanRemoved = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 33, 3, 2)
)
sleBridgeReservedVlanRemoved.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeReservedVlanControlRequest"),
        ("SLE-BRIDGE-MIB", "sleBridgeReservedVlanControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleBridgeReservedVlanControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleBridgeReservedVlanControlStartVlanId"),
        ("SLE-BRIDGE-MIB", "sleBridgeReservedVlanControlEndVlanId"))
)
if mibBuilder.loadTexts:
    sleBridgeReservedVlanRemoved.setStatus(
        "current"
    )

sleSubnetVlan6Created = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 34, 3, 1)
)
sleSubnetVlan6Created.setObjects(
      *(("SLE-BRIDGE-MIB", "sleSubnetVlan6ControlRequest"),
        ("SLE-BRIDGE-MIB", "sleSubnetVlan6ControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleSubnetVlan6ControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleSubnetVlan6Vid"))
)
if mibBuilder.loadTexts:
    sleSubnetVlan6Created.setStatus(
        "current"
    )

sleSubnetVlan6Destroyed = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 34, 3, 2)
)
sleSubnetVlan6Destroyed.setObjects(
      *(("SLE-BRIDGE-MIB", "sleSubnetVlan6ControlRequest"),
        ("SLE-BRIDGE-MIB", "sleSubnetVlan6ControlReqResult"),
        ("SLE-BRIDGE-MIB", "sleSubnetVlan6ControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sleSubnetVlan6Vid"))
)
if mibBuilder.loadTexts:
    sleSubnetVlan6Destroyed.setStatus(
        "current"
    )

sle2MacAddressEntryCreated = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 35, 3, 1)
)
sle2MacAddressEntryCreated.setObjects(
      *(("SLE-BRIDGE-MIB", "sle2MacAddressEntryControlRequest"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryControlReqResult"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryBridgeId"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryMacAddress"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryIfIndex"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryVid"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntrySVid"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryPermission"))
)
if mibBuilder.loadTexts:
    sle2MacAddressEntryCreated.setStatus(
        "current"
    )

sle2MacAddressEntryDestroyed = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 35, 3, 2)
)
sle2MacAddressEntryDestroyed.setObjects(
      *(("SLE-BRIDGE-MIB", "sle2MacAddressEntryControlRequest"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryControlReqResult"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryControlBridgeId"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryControlMacAddress"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryControlIfIndex"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryControlVid"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryControlSVid"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryControlPermission"))
)
if mibBuilder.loadTexts:
    sle2MacAddressEntryDestroyed.setStatus(
        "current"
    )

sle2MacAddressTableEntriesCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 35, 3, 3)
)
sle2MacAddressTableEntriesCleared.setObjects(
      *(("SLE-BRIDGE-MIB", "sle2MacAddressEntryControlRequest"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryControlReqResult"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryControlTimeStamp"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryControlBridgeId"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryControlMacAddress"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryControlIfIndex"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryControlVid"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryControlSVid"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryControlCVid"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryControlInstance"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryControlClearType"))
)
if mibBuilder.loadTexts:
    sle2MacAddressTableEntriesCleared.setStatus(
        "current"
    )


# Notifications groups

sleBridgeNotificationGroup = NotificationGroup(
    (1, 3, 6, 1, 4, 1, 6296, 101, 3, 48)
)
sleBridgeNotificationGroup.setObjects(
      *(("SLE-BRIDGE-MIB", "sleBridgeLacpProfileChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeDoubleTagProtoIdChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeMirrorProfileChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeMaxLearnPerUnitChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeFdbAgeingTimeChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeStackProfileChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeLldpProfileChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeTcpSyncookieChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeTcpIgnoreRstUnknownChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortPVidChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortMaxHostsChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortMaxLearnPerUnitChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortMACFilterPermissionChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortMirrorProfileChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortBcscThresholdProfileChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortQinQStatusChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortLinktypeChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortEdgemodeChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortStpBpduFilterChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortPvlanIsolatedStatusChanged"),
        ("SLE-BRIDGE-MIB", "sleVlanCreated"),
        ("SLE-BRIDGE-MIB", "sleVlanDestroyed"),
        ("SLE-BRIDGE-MIB", "sleVlanPortProfileChanged"),
        ("SLE-BRIDGE-MIB", "sleVlanAgeingTimeChanged"),
        ("SLE-BRIDGE-MIB", "sleVlanMapFidChanged"),
        ("SLE-BRIDGE-MIB", "sleVlanMapStpIdChanged"),
        ("SLE-BRIDGE-MIB", "sleVlanMapErpDomainIdChanged"),
        ("SLE-BRIDGE-MIB", "sleStpOperationModeChanged"),
        ("SLE-BRIDGE-MIB", "sleStpConfigureProfileChanged"),
        ("SLE-BRIDGE-MIB", "sleStpTimerProfileChanged"),
        ("SLE-BRIDGE-MIB", "sleStpBpduGuardProfileChanged"),
        ("SLE-BRIDGE-MIB", "sleStpInstanceEnableChanged"),
        ("SLE-BRIDGE-MIB", "sleStpInstanceConfigProfileChanged"),
        ("SLE-BRIDGE-MIB", "sleStpInstancePortProfileChanged"),
        ("SLE-BRIDGE-MIB", "sleSubnetVlanCreated"),
        ("SLE-BRIDGE-MIB", "sleSubnetVlanDestroyed"),
        ("SLE-BRIDGE-MIB", "sleProtocolVlanCreated"),
        ("SLE-BRIDGE-MIB", "sleProtocolVlanDestroyed"),
        ("SLE-BRIDGE-MIB", "sleLagProfileChanged"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortProfileChanged"),
        ("SLE-BRIDGE-MIB", "sleFdbEntryCreated"),
        ("SLE-BRIDGE-MIB", "sleFdbEntryDestoryed"),
        ("SLE-BRIDGE-MIB", "sleFdbTableEntriesCleared"),
        ("SLE-BRIDGE-MIB", "sleMfdbEntryCreated"),
        ("SLE-BRIDGE-MIB", "sleMfdbEntryDestoryed"),
        ("SLE-BRIDGE-MIB", "sleMfdbEntryPermissionChanged"),
        ("SLE-BRIDGE-MIB", "sleMfdbEntryTableCleared"),
        ("SLE-BRIDGE-MIB", "sleIgmpConfProfileChanged"),
        ("SLE-BRIDGE-MIB", "sleIgmpStaticMcastCreated"),
        ("SLE-BRIDGE-MIB", "sleIgmpStaticMcastDestroyed"),
        ("SLE-BRIDGE-MIB", "sleStackDeviceCreated"),
        ("SLE-BRIDGE-MIB", "sleStackDeviceDestoryed"),
        ("SLE-BRIDGE-MIB", "sleErpDomainCreated"),
        ("SLE-BRIDGE-MIB", "sleErpDomainDestroyed"),
        ("SLE-BRIDGE-MIB", "sleErpDomainProfileChanged"),
        ("SLE-BRIDGE-MIB", "sleErpProtectionActivationChanged"),
        ("SLE-BRIDGE-MIB", "sleLldpPortProfileChanged"),
        ("SLE-BRIDGE-MIB", "sleLldpStatisticsCleared"),
        ("SLE-BRIDGE-MIB", "sleBridgePSStatusChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePSMaxCountChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePSProfileChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePSFdbEntryCreated"),
        ("SLE-BRIDGE-MIB", "sleBridgePSFdbEntryDestroyed"),
        ("SLE-BRIDGE-MIB", "sleBridgePortStpBpduGuardErrRcvChanged"),
        ("SLE-BRIDGE-MIB", "sleErpHoldOffTimeChanged"),
        ("SLE-BRIDGE-MIB", "sleErpRingPriorityChanged"),
        ("SLE-BRIDGE-MIB", "sleErpTrapChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGBaseCfgdStatusChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeAutoInterfaceActivationChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGPortUnblockChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGPortProfileChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeLoopDetectProfileChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortLoopDetectProfileChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortLoopDetectUnblock"),
        ("SLE-BRIDGE-MIB", "sleBridgePvlanPormSelectModeChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeVTSet"),
        ("SLE-BRIDGE-MIB", "sleBridgeVTClear"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpStatusChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpTimerChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortStatusChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpAppPortProfileChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeGarpStatisticsCleared"),
        ("SLE-BRIDGE-MIB", "sleBridgeGmrpStaticAdded"),
        ("SLE-BRIDGE-MIB", "sleBridgeGmrpStaticDeleted"),
        ("SLE-BRIDGE-MIB", "sleBridgePortNetBIOSFilterChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortPriorityChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortInnertagChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortPopInnertagChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortPushInnertagChanged"),
        ("SLE-BRIDGE-MIB", "sleVlanInboundTagChanged"),
        ("SLE-BRIDGE-MIB", "sleVlanOutboundTagSet"),
        ("SLE-BRIDGE-MIB", "sleVlanOutboundTagClear"),
        ("SLE-BRIDGE-MIB", "sleBridgePortInner2outerVidChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortInner2outerPriChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePSFdbEntryCleared"),
        ("SLE-BRIDGE-MIB", "sleBridgePortDhcpFilterServerChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortMACLearningStatusChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortPortBridgeStatusChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeInBoundVTSet"),
        ("SLE-BRIDGE-MIB", "sleBridgeInBoundVTClear"),
        ("SLE-BRIDGE-MIB", "sleBridgeInnerTagProtoIdChanged"),
        ("SLE-BRIDGE-MIB", "sleVlanInboundTagCleared"),
        ("SLE-BRIDGE-MIB", "sleVlanRangeInboundTagChanged"),
        ("SLE-BRIDGE-MIB", "sleVlanRangeInboundTagCleared"),
        ("SLE-BRIDGE-MIB", "sleVlanRangeCreated"),
        ("SLE-BRIDGE-MIB", "sleBridgeUnknownMcastBlockAllPortsChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortUnknownMcastBlockChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeEcmpHashTypeChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeTcpSynguardChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortDescriptionChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortHoldTimeChanged"),
        ("SLE-BRIDGE-MIB", "sleLagLacpStatsCleared"),
        ("SLE-BRIDGE-MIB", "sleBridgeOuterTagProtoIdChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeOutBoundVTSet"),
        ("SLE-BRIDGE-MIB", "sleBridgeOutBoundVTClear"),
        ("SLE-BRIDGE-MIB", "sleBridgeMacAntiSpoofingChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeMacReplaceChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortMacAntiSpoofChanged"),
        ("SLE-BRIDGE-MIB", "sleVlanProtoIdOuterProtoIdChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeStormControlChanged"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingCreated"),
        ("SLE-BRIDGE-MIB", "sleVlanMappingDeleted"),
        ("SLE-BRIDGE-MIB", "sleBridgeMacLearningModeChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeLagGlobalDistModeChanged"),
        ("SLE-BRIDGE-MIB", "sleVlanDescriptionChanged"),
        ("SLE-BRIDGE-MIB", "sleVlanElineVlanCreated"),
        ("SLE-BRIDGE-MIB", "sleBridgePortSwitchStatusChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortSwitchModeChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortSwitchDefaultVlanChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortSwitchNativeVlanChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortSwitchAccFramTypeChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortSwitchAllowdVlanAdded"),
        ("SLE-BRIDGE-MIB", "sleBridgePortSwitchAllowdVlanDeleted"),
        ("SLE-BRIDGE-MIB", "sleVlanOperStatusChagned"),
        ("SLE-BRIDGE-MIB", "sleVlanMtuChagned"),
        ("SLE-BRIDGE-MIB", "sleBridgePortSwitchStaticChannelChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortSwitchChannelLoadbalanceChanged"),
        ("SLE-BRIDGE-MIB", "slePowerInlineEnableChanged"),
        ("SLE-BRIDGE-MIB", "slePowerInlineDisableChanged"),
        ("SLE-BRIDGE-MIB", "slePowerInlineResetChanged"),
        ("SLE-BRIDGE-MIB", "slePowerInlineLegacyChanged"),
        ("SLE-BRIDGE-MIB", "slePowerInlinePriorityChanged"),
        ("SLE-BRIDGE-MIB", "slePowerInlineClassChanged"),
        ("SLE-BRIDGE-MIB", "slePowerInlinePowerChanged"),
        ("SLE-BRIDGE-MIB", "sleMfdbOldEntryCreated"),
        ("SLE-BRIDGE-MIB", "sleMfdbOldEntryDestoryed"),
        ("SLE-BRIDGE-MIB", "sleMfdbOldEntryPermissionChanged"),
        ("SLE-BRIDGE-MIB", "sleMfdbOldEntryTableCleared"),
        ("SLE-BRIDGE-MIB", "sleBridgePortLoopDetectPeriodMsChanged"),
        ("SLE-BRIDGE-MIB", "sleLagProfileActiveLinkChanged"),
        ("SLE-BRIDGE-MIB", "sleLldpPortNetworkPolicyProfileChanged"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfileCreated"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfileDestroyed"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfileCleared"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfilePolicyChanged"),
        ("SLE-BRIDGE-MIB", "sleLldpMedNetworkPolicyProfilePolicyDeleted"),
        ("SLE-BRIDGE-MIB", "sleBridgePortLoopDetectLoopingCountChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortPortLinkCntChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortLoopDetectVlanChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortLoopDetectVlanDeleted"),
        ("SLE-BRIDGE-MIB", "sleBridgePortSwitchChannelProfileChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortSwitchChannelProfileDeleted"),
        ("SLE-BRIDGE-MIB", "sleLagLacpPortAggrChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeReservedVlanAdded"),
        ("SLE-BRIDGE-MIB", "sleBridgeReservedVlanRemoved"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceSwitchportChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceSwitchportAllowedVlanChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceSwitchportModeChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceSwitchportModeIngressFilterChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceSwitchportTrunkDeleted"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceSwitchportTrunkNativeVlanChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceSwitchportTrunkNativeVlanDeleted"),
        ("SLE-BRIDGE-MIB", "sleBridgeChannelGroupLacpMaxBundleChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeChannelGroupLacpMaxBundleDeleted"),
        ("SLE-BRIDGE-MIB", "sleBridgeChannelGroupSystemPriorityChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeChannelGroupSystemPriorityDeleted"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceChannelGroupAdminKeyChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceChannelGroupAggrTypeChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceChannelGroupPriorityChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceChannelGroupTimeOutChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceChannelGroupDeleted"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceChannelGroupActiveLinkChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceChannelGroupDistModeChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortBandwidthChanged"),
        ("SLE-BRIDGE-MIB", "sleSubnetVlan6Created"),
        ("SLE-BRIDGE-MIB", "sleSubnetVlan6Destroyed"),
        ("SLE-BRIDGE-MIB", "sleBridgePortAliasSet"),
        ("SLE-BRIDGE-MIB", "sleBridgePortAliasUnset"),
        ("SLE-BRIDGE-MIB", "sleBridgeFGBaseSfgdStatusChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeStpProfileChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeMultiPortLlcfChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeMultiPortLlcfDeleted"),
        ("SLE-BRIDGE-MIB", "sleBridgeMultiPortLlcfTimerChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortMaxNewHostsChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortSpanningTreeDetectedProtocolsCleared"),
        ("SLE-BRIDGE-MIB", "sleBridgePortStpStatusChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortStpBpduGuardChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortOuterTpidChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortMirrorMonitorChanged"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryCreated"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressEntryDestroyed"),
        ("SLE-BRIDGE-MIB", "sle2MacAddressTableEntriesCleared"),
        ("SLE-BRIDGE-MIB", "sleBridgePortFloodBlockChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgePortMulticastChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceChannelGroupChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceSwitchportDefaultVlanChanged"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceSwitchportDefaultVlanDeleted"),
        ("SLE-BRIDGE-MIB", "sleBridgeInterfaceVlanChanged"))
)
if mibBuilder.loadTexts:
    sleBridgeNotificationGroup.setStatus(
        "current"
    )


# Agent capabilities


# Module compliance


# Export all MIB objects to the MIB builder

mibBuilder.exportSymbols(
    "SLE-BRIDGE-MIB",
    **{"SleIgmpConfControlRequestType": SleIgmpConfControlRequestType,
       "SleIgmpMcastControlRequestType": SleIgmpMcastControlRequestType,
       "Boolean": Boolean,
       "SleLldpManAddrIfSubType": SleLldpManAddrIfSubType,
       "SleLldpSysCapType": SleLldpSysCapType,
       "sleBridge": sleBridge,
       "sleBridgeBase": sleBridgeBase,
       "sleBridgeBaseInfo": sleBridgeBaseInfo,
       "sleBridgeMacAddress": sleBridgeMacAddress,
       "sleBridgePortNum": sleBridgePortNum,
       "sleBridgeLagMaxId": sleBridgeLagMaxId,
       "sleBridgeLacpActivity": sleBridgeLacpActivity,
       "sleBridgeLacpPriority": sleBridgeLacpPriority,
       "sleBridgeVlanSupportMode": sleBridgeVlanSupportMode,
       "sleBridgeVlanMaxNum": sleBridgeVlanMaxNum,
       "sleBridgeDoubleTagProtoId": sleBridgeDoubleTagProtoId,
       "sleBridgeMirrorMode": sleBridgeMirrorMode,
       "sleBridgeMirrorMonitorPortId": sleBridgeMirrorMonitorPortId,
       "sleBridgeMirroredIngressPorts": sleBridgeMirroredIngressPorts,
       "sleBridgeMirroredEgressPorts": sleBridgeMirroredEgressPorts,
       "sleBridgeMaxLearnPerUnit": sleBridgeMaxLearnPerUnit,
       "sleBridgeFdbAgeingTime": sleBridgeFdbAgeingTime,
       "sleBridgeFdbMaxEntries": sleBridgeFdbMaxEntries,
       "sleBridgeFdbCurrentEntries": sleBridgeFdbCurrentEntries,
       "sleBridgeStackMode": sleBridgeStackMode,
       "sleBridgeStackDeviceName": sleBridgeStackDeviceName,
       "sleBridgeStackNodeId": sleBridgeStackNodeId,
       "sleBridgeLldpMessageTxInterval": sleBridgeLldpMessageTxInterval,
       "sleBridgeLldpTxHoldMultiplier": sleBridgeLldpTxHoldMultiplier,
       "sleBridgeLldpReinitDelay": sleBridgeLldpReinitDelay,
       "sleBridgeLldpTxDelay": sleBridgeLldpTxDelay,
       "sleBridgeLldpNotificationInterval": sleBridgeLldpNotificationInterval,
       "sleBridgeLldpStatsRemTablesLastChangeTime": sleBridgeLldpStatsRemTablesLastChangeTime,
       "sleBridgeLldpStatsRemTablesInserts": sleBridgeLldpStatsRemTablesInserts,
       "sleBridgeLldpStatsRemTablesDeletes": sleBridgeLldpStatsRemTablesDeletes,
       "sleBridgeLldpStatsRemTablesDrops": sleBridgeLldpStatsRemTablesDrops,
       "sleBridgeLldpStatsRemTablesAgeouts": sleBridgeLldpStatsRemTablesAgeouts,
       "sleBridgeLldpLocalChassisIdSubtype": sleBridgeLldpLocalChassisIdSubtype,
       "sleBridgeLldpLocalChassisId": sleBridgeLldpLocalChassisId,
       "sleBridgeLldpLocalSysName": sleBridgeLldpLocalSysName,
       "sleBridgeLldpLocalSysDes": sleBridgeLldpLocalSysDes,
       "sleBridgeLldpLocalSysCapSupported": sleBridgeLldpLocalSysCapSupported,
       "sleBridgeLldpLocalSysCapEnabled": sleBridgeLldpLocalSysCapEnabled,
       "sleBridgeStpActivity": sleBridgeStpActivity,
       "sleBridgeStpSelfLoop": sleBridgeStpSelfLoop,
       "sleBridgePvlanOnePromPortEnable": sleBridgePvlanOnePromPortEnable,
       "sleBridgeTcpSyncookie": sleBridgeTcpSyncookie,
       "sleBridgeTcpIgnoreRstUnknown": sleBridgeTcpIgnoreRstUnknown,
       "sleBridgeAutoInterfaceActivation": sleBridgeAutoInterfaceActivation,
       "sleBridgeLoopDetectStatus": sleBridgeLoopDetectStatus,
       "sleBridgeLoopDetectPacketType": sleBridgeLoopDetectPacketType,
       "sleBridgePvlanPromSelectMode": sleBridgePvlanPromSelectMode,
       "sleBridgePvlanPromiscuousPorts": sleBridgePvlanPromiscuousPorts,
       "sleBridgeInnerTagProtoId": sleBridgeInnerTagProtoId,
       "sleBridgeUnknownMcastBlockAllPorts": sleBridgeUnknownMcastBlockAllPorts,
       "sleBridgeEcmpHashType": sleBridgeEcmpHashType,
       "sleBridgeTcpSynguard": sleBridgeTcpSynguard,
       "sleBridgeOuterTagProtoId": sleBridgeOuterTagProtoId,
       "sleBridgeMacAntiSpoofing": sleBridgeMacAntiSpoofing,
       "sleBridgeMacReplace": sleBridgeMacReplace,
       "sleBridgeStormControlBcast": sleBridgeStormControlBcast,
       "sleBridgeStormControlDLF": sleBridgeStormControlDLF,
       "sleBridgeStormControlMulticast": sleBridgeStormControlMulticast,
       "sleBridgeMacLearningMode": sleBridgeMacLearningMode,
       "sleBridgeLagGlobalDistMode": sleBridgeLagGlobalDistMode,
       "sleBridgeMultiPortLlcfPortA": sleBridgeMultiPortLlcfPortA,
       "sleBridgeMultiPortLlcfPortB": sleBridgeMultiPortLlcfPortB,
       "sleBridgeMultiPortLlcfUpPortC": sleBridgeMultiPortLlcfUpPortC,
       "sleBridgeMultiPortLlcfDownPortC": sleBridgeMultiPortLlcfDownPortC,
       "sleBridgeMultiPortLlcfPortAStatus": sleBridgeMultiPortLlcfPortAStatus,
       "sleBridgeMultiPortLlcfPortBStatus": sleBridgeMultiPortLlcfPortBStatus,
       "sleBridgeMultiPortLlcfUpPortCStatus": sleBridgeMultiPortLlcfUpPortCStatus,
       "sleBridgeMultiPortLlcfDownPortCStatus": sleBridgeMultiPortLlcfDownPortCStatus,
       "sleBridgeMultiPortLlcfTimer": sleBridgeMultiPortLlcfTimer,
       "sleBridgeChannelGroupLacpMaxBundle": sleBridgeChannelGroupLacpMaxBundle,
       "sleBridgeChannelGroupSystemPriority": sleBridgeChannelGroupSystemPriority,
       "sleBridgeId": sleBridgeId,
       "sleBridgeProtocol": sleBridgeProtocol,
       "sleBridgeBaseControl": sleBridgeBaseControl,
       "sleBridgeControlRequest": sleBridgeControlRequest,
       "sleBridgeControlStatus": sleBridgeControlStatus,
       "sleBridgeControlTimer": sleBridgeControlTimer,
       "sleBridgeControlTimeStamp": sleBridgeControlTimeStamp,
       "sleBridgeControlReqResult": sleBridgeControlReqResult,
       "sleBridgeControlLacpActivity": sleBridgeControlLacpActivity,
       "sleBridgeControlLacpPriority": sleBridgeControlLacpPriority,
       "sleBridgeControlDoubleTagProtoId": sleBridgeControlDoubleTagProtoId,
       "sleBridgeControlMirrorMode": sleBridgeControlMirrorMode,
       "sleBridgeControlMirrorMonitorPortId": sleBridgeControlMirrorMonitorPortId,
       "sleBridgeControlMaxLearnPerUnit": sleBridgeControlMaxLearnPerUnit,
       "sleBridgeControlFdbAgeingTime": sleBridgeControlFdbAgeingTime,
       "sleBridgeControlStackMode": sleBridgeControlStackMode,
       "sleBridgeControlStackDeviceName": sleBridgeControlStackDeviceName,
       "sleBridgeControlLldpMessageTxInterval": sleBridgeControlLldpMessageTxInterval,
       "sleBridgeControlLldpTxHoldMultiplier": sleBridgeControlLldpTxHoldMultiplier,
       "sleBridgeControlLldpReinitDelay": sleBridgeControlLldpReinitDelay,
       "sleBridgeControlLldpTxDelay": sleBridgeControlLldpTxDelay,
       "sleBridgeControlLldpNotificationInterval": sleBridgeControlLldpNotificationInterval,
       "sleBridgeControlStpActivity": sleBridgeControlStpActivity,
       "sleBridgeControlStpSelfLoop": sleBridgeControlStpSelfLoop,
       "sleBridgeControlTcpSyncookie": sleBridgeControlTcpSyncookie,
       "sleBridgeControlTcpIgnoreRstUnknown": sleBridgeControlTcpIgnoreRstUnknown,
       "sleBridgeControlAutoInterfaceActivation": sleBridgeControlAutoInterfaceActivation,
       "sleBridgeControlLoopDetectStatus": sleBridgeControlLoopDetectStatus,
       "sleBridgeControlLoopDetectPacketType": sleBridgeControlLoopDetectPacketType,
       "sleBridgeControlPvlanPromSelectMode": sleBridgeControlPvlanPromSelectMode,
       "sleBridgeControlPvlanPromiscuousPorts": sleBridgeControlPvlanPromiscuousPorts,
       "sleBridgeControlInnerTagProtoId": sleBridgeControlInnerTagProtoId,
       "sleBridgeControlUnknownMcastBlockAllPorts": sleBridgeControlUnknownMcastBlockAllPorts,
       "sleBridgeControlEcmpHashType": sleBridgeControlEcmpHashType,
       "sleBridgeControlTcpSynguard": sleBridgeControlTcpSynguard,
       "sleBridgeControlOuterTagProtoId": sleBridgeControlOuterTagProtoId,
       "sleBridgeControlMacAntiSpoofing": sleBridgeControlMacAntiSpoofing,
       "sleBridgeControlMacReplace": sleBridgeControlMacReplace,
       "sleBridgeControlStormControlBcast": sleBridgeControlStormControlBcast,
       "sleBridgeControlStormControlDLF": sleBridgeControlStormControlDLF,
       "sleBridgeControlStormControlMulticast": sleBridgeControlStormControlMulticast,
       "sleBridgeControlMacLearningMode": sleBridgeControlMacLearningMode,
       "sleBridgeControlLagGlobalDistMode": sleBridgeControlLagGlobalDistMode,
       "sleBridgeControlMultiPortLlcfPortA": sleBridgeControlMultiPortLlcfPortA,
       "sleBridgeControlMultiPortLlcfPortB": sleBridgeControlMultiPortLlcfPortB,
       "sleBridgeControlMultiPortLlcfPortC": sleBridgeControlMultiPortLlcfPortC,
       "sleBridgeControlMultiPortLlcfTimer": sleBridgeControlMultiPortLlcfTimer,
       "sleBridgeControlChannelGroupLacpMaxBundle": sleBridgeControlChannelGroupLacpMaxBundle,
       "sleBridgeControlChannelGroupSystemPriority": sleBridgeControlChannelGroupSystemPriority,
       "sleBridgeControlId": sleBridgeControlId,
       "sleBridgeControlProtocol": sleBridgeControlProtocol,
       "sleBridgeBaseNotification": sleBridgeBaseNotification,
       "sleBridgeLacpProfileChanged": sleBridgeLacpProfileChanged,
       "sleBridgeDoubleTagProtoIdChanged": sleBridgeDoubleTagProtoIdChanged,
       "sleBridgeMirrorProfileChanged": sleBridgeMirrorProfileChanged,
       "sleBridgeMaxLearnPerUnitChanged": sleBridgeMaxLearnPerUnitChanged,
       "sleBridgeFdbAgeingTimeChanged": sleBridgeFdbAgeingTimeChanged,
       "sleBridgeStackProfileChanged": sleBridgeStackProfileChanged,
       "sleBridgeLldpProfileChanged": sleBridgeLldpProfileChanged,
       "sleBridgeStpProfileChanged": sleBridgeStpProfileChanged,
       "sleBridgeTcpSyncookieChanged": sleBridgeTcpSyncookieChanged,
       "sleBridgeTcpIgnoreRstUnknownChanged": sleBridgeTcpIgnoreRstUnknownChanged,
       "sleBridgeAutoInterfaceActivationChanged": sleBridgeAutoInterfaceActivationChanged,
       "sleBridgeLoopDetectProfileChanged": sleBridgeLoopDetectProfileChanged,
       "sleBridgePvlanPormSelectModeChanged": sleBridgePvlanPormSelectModeChanged,
       "sleBridgeInnerTagProtoIdChanged": sleBridgeInnerTagProtoIdChanged,
       "sleBridgeUnknownMcastBlockAllPortsChanged": sleBridgeUnknownMcastBlockAllPortsChanged,
       "sleBridgeEcmpHashTypeChanged": sleBridgeEcmpHashTypeChanged,
       "sleBridgeTcpSynguardChanged": sleBridgeTcpSynguardChanged,
       "sleBridgeOuterTagProtoIdChanged": sleBridgeOuterTagProtoIdChanged,
       "sleBridgeMacAntiSpoofingChanged": sleBridgeMacAntiSpoofingChanged,
       "sleBridgeMacReplaceChanged": sleBridgeMacReplaceChanged,
       "sleBridgeStormControlChanged": sleBridgeStormControlChanged,
       "sleBridgeMacLearningModeChanged": sleBridgeMacLearningModeChanged,
       "sleBridgeLagGlobalDistModeChanged": sleBridgeLagGlobalDistModeChanged,
       "sleBridgeMultiPortLlcfChanged": sleBridgeMultiPortLlcfChanged,
       "sleBridgeMultiPortLlcfDeleted": sleBridgeMultiPortLlcfDeleted,
       "sleBridgeMultiPortLlcfTimerChanged": sleBridgeMultiPortLlcfTimerChanged,
       "sleBridgeChannelGroupLacpMaxBundleChanged": sleBridgeChannelGroupLacpMaxBundleChanged,
       "sleBridgeChannelGroupLacpMaxBundleDeleted": sleBridgeChannelGroupLacpMaxBundleDeleted,
       "sleBridgeChannelGroupSystemPriorityChanged": sleBridgeChannelGroupSystemPriorityChanged,
       "sleBridgeChannelGroupSystemPriorityDeleted": sleBridgeChannelGroupSystemPriorityDeleted,
       "sleBridgePort": sleBridgePort,
       "sleBridgePortTable": sleBridgePortTable,
       "sleBridgePortEntry": sleBridgePortEntry,
       "sleBridgePortIndex": sleBridgePortIndex,
       "sleBridgePortIfIndex": sleBridgePortIfIndex,
       "sleBridgePortPVid": sleBridgePortPVid,
       "sleBridgePortMaxHosts": sleBridgePortMaxHosts,
       "sleBridgePortCurrentHosts": sleBridgePortCurrentHosts,
       "sleBridgePortMaxLearnPerUnit": sleBridgePortMaxLearnPerUnit,
       "sleBridgePortMACFilterPermission": sleBridgePortMACFilterPermission,
       "sleBridgePortIngMirrorStatus": sleBridgePortIngMirrorStatus,
       "sleBridgePortEgMirrorStatus": sleBridgePortEgMirrorStatus,
       "sleBridgePortBcastThreshold": sleBridgePortBcastThreshold,
       "sleBridgePortMcastThreshold": sleBridgePortMcastThreshold,
       "sleBridgePortDlfThreshold": sleBridgePortDlfThreshold,
       "sleBridgePortQinQStatus": sleBridgePortQinQStatus,
       "sleBridgePortAdminLinktype": sleBridgePortAdminLinktype,
       "sleBridgePortAdminEdgemode": sleBridgePortAdminEdgemode,
       "sleBridgePortOperLinktype": sleBridgePortOperLinktype,
       "sleBridgePortOperEdgemode": sleBridgePortOperEdgemode,
       "sleBridgePortStpBpduFilter": sleBridgePortStpBpduFilter,
       "sleBridgePortPvlanIsolatedStatus": sleBridgePortPvlanIsolatedStatus,
       "sleBridgePortPvlanPromPorts": sleBridgePortPvlanPromPorts,
       "sleBridgePortDhcpFilterServer": sleBridgePortDhcpFilterServer,
       "sleBridgePortLoopDetectStatus": sleBridgePortLoopDetectStatus,
       "sleBridgePortLoopDetectBlock": sleBridgePortLoopDetectBlock,
       "sleBridgePortLoopDetectPeriod": sleBridgePortLoopDetectPeriod,
       "sleBridgePortLoopDetectTimer": sleBridgePortLoopDetectTimer,
       "sleBridgePortLoopDetectBlockStatus": sleBridgePortLoopDetectBlockStatus,
       "sleBridgePortNetBIOSFilter": sleBridgePortNetBIOSFilter,
       "sleBridgePortPushInnertag": sleBridgePortPushInnertag,
       "sleBridgePortPopInnertag": sleBridgePortPopInnertag,
       "sleBridgePortInnertag": sleBridgePortInnertag,
       "sleBridgePortPriority": sleBridgePortPriority,
       "sleBridgePortInner2outerPri": sleBridgePortInner2outerPri,
       "sleBridgePortInner2outerVid": sleBridgePortInner2outerVid,
       "sleBridgePortLinkUpCnt": sleBridgePortLinkUpCnt,
       "sleBridgePortLinkDownCnt": sleBridgePortLinkDownCnt,
       "sleBridgePortLinkUpTime": sleBridgePortLinkUpTime,
       "sleBridgePortElapsedTimeAfterClearStats": sleBridgePortElapsedTimeAfterClearStats,
       "sleBridgePortMACLearningStatus": sleBridgePortMACLearningStatus,
       "sleBridgePortPortBridgeStatus": sleBridgePortPortBridgeStatus,
       "sleBridgePortUnknownMcastBlock": sleBridgePortUnknownMcastBlock,
       "sleBridgePortDescription": sleBridgePortDescription,
       "sleBridgePortHoldTime": sleBridgePortHoldTime,
       "sleBridgePortMacAntiSpoofing": sleBridgePortMacAntiSpoofing,
       "sleBridgePortSwitchType": sleBridgePortSwitchType,
       "sleBridgePortSwitchState": sleBridgePortSwitchState,
       "sleBridgePortSwitchMode": sleBridgePortSwitchMode,
       "sleBridgePortSwitchSubMode": sleBridgePortSwitchSubMode,
       "sleBridgePortSwitchDefaultVlan": sleBridgePortSwitchDefaultVlan,
       "sleBridgePortSwitchIngressFilter": sleBridgePortSwitchIngressFilter,
       "sleBridgePortSwitchAccFrameType": sleBridgePortSwitchAccFrameType,
       "sleBridgePortSwitchNativeVid": sleBridgePortSwitchNativeVid,
       "sleBridgePortSwitchAllowedVlan": sleBridgePortSwitchAllowedVlan,
       "sleBridgePortSwitchAllowedVlanEtag": sleBridgePortSwitchAllowedVlanEtag,
       "sleBridgePortSwitchChannelType": sleBridgePortSwitchChannelType,
       "sleBridgePortSwitchStaticChannelGroup": sleBridgePortSwitchStaticChannelGroup,
       "sleBridgePortSwitchChannelLoadbalance": sleBridgePortSwitchChannelLoadbalance,
       "sleBridgePortSwitchAggrType": sleBridgePortSwitchAggrType,
       "sleBridgePortSwitchAggrId": sleBridgePortSwitchAggrId,
       "sleBridgePortSwitchAggrMode": sleBridgePortSwitchAggrMode,
       "sleBridgePortLoopDetectPeriodMs": sleBridgePortLoopDetectPeriodMs,
       "sleBridgePortLoopDetectAdminCount": sleBridgePortLoopDetectAdminCount,
       "sleBridgePortLoopDetectOperCount": sleBridgePortLoopDetectOperCount,
       "sleBridgePortLoopDetectDetectedCount": sleBridgePortLoopDetectDetectedCount,
       "sleBridgePortLoopDetectVlan": sleBridgePortLoopDetectVlan,
       "sleBridgePortMaxNewHosts": sleBridgePortMaxNewHosts,
       "sleBridgePortStpStatus": sleBridgePortStpStatus,
       "sleBridgePortStpBpduGuard": sleBridgePortStpBpduGuard,
       "sleBridgePortOuterTpid": sleBridgePortOuterTpid,
       "sleBridgePortMirrorMonitor": sleBridgePortMirrorMonitor,
       "sleBridgePortBandwidth": sleBridgePortBandwidth,
       "sleBridgePortAlias": sleBridgePortAlias,
       "sleBridgePortMulticast": sleBridgePortMulticast,
       "sleBridgePortFloodBlock": sleBridgePortFloodBlock,
       "sleBridgePortControl": sleBridgePortControl,
       "sleBridgePortControlRequest": sleBridgePortControlRequest,
       "sleBridgePortControlStatus": sleBridgePortControlStatus,
       "sleBridgePortControlTimer": sleBridgePortControlTimer,
       "sleBridgePortControlTimeStamp": sleBridgePortControlTimeStamp,
       "sleBridgePortControlReqResult": sleBridgePortControlReqResult,
       "sleBridgePortControlIndex": sleBridgePortControlIndex,
       "sleBridgePortControlPVid": sleBridgePortControlPVid,
       "sleBridgePortControlMaxHosts": sleBridgePortControlMaxHosts,
       "sleBridgePortControlMaxLearnPerUnit": sleBridgePortControlMaxLearnPerUnit,
       "sleBridgePortControlMACFilterPermission": sleBridgePortControlMACFilterPermission,
       "sleBridgePortControlIngMirrorStatus": sleBridgePortControlIngMirrorStatus,
       "sleBridgePortControlEgMirrorStatus": sleBridgePortControlEgMirrorStatus,
       "sleBridgePortControlBcastThreshold": sleBridgePortControlBcastThreshold,
       "sleBridgePortControlMcastThreshold": sleBridgePortControlMcastThreshold,
       "sleBridgePortControlDlfThreshold": sleBridgePortControlDlfThreshold,
       "sleBridgePortControlQinQStatus": sleBridgePortControlQinQStatus,
       "sleBridgePortControlAdminLinktype": sleBridgePortControlAdminLinktype,
       "sleBridgePortControlAdminEdgemode": sleBridgePortControlAdminEdgemode,
       "sleBridgePortControlStpBpduFilter": sleBridgePortControlStpBpduFilter,
       "sleBridgePortControlPvlanIsolatedStatus": sleBridgePortControlPvlanIsolatedStatus,
       "sleBridgePortControlPvlanPromPort": sleBridgePortControlPvlanPromPort,
       "sleBridgePortControlStpBpduGuardErrRcv": sleBridgePortControlStpBpduGuardErrRcv,
       "sleBridgePortControlDhcpFilterServer": sleBridgePortControlDhcpFilterServer,
       "sleBridgePortControlLoopDetectStatus": sleBridgePortControlLoopDetectStatus,
       "sleBridgePortControlLoopDetectBlock": sleBridgePortControlLoopDetectBlock,
       "sleBridgePortControlLoopDetectPeriod": sleBridgePortControlLoopDetectPeriod,
       "sleBridgePortControlLoopDetectTimer": sleBridgePortControlLoopDetectTimer,
       "sleBridgePortControlNetBIOSFilter": sleBridgePortControlNetBIOSFilter,
       "sleBridgePortControlPushInnertag": sleBridgePortControlPushInnertag,
       "sleBridgePortControlPopInnertag": sleBridgePortControlPopInnertag,
       "sleBridgePortControlInnertag": sleBridgePortControlInnertag,
       "sleBridgePortControlPriority": sleBridgePortControlPriority,
       "sleBridgePortControlInner2outerPri": sleBridgePortControlInner2outerPri,
       "sleBridgePortControlInner2outerVid": sleBridgePortControlInner2outerVid,
       "sleBridgePortControlMACLearningStatus": sleBridgePortControlMACLearningStatus,
       "sleBridgePortControlPortBridgeStatus": sleBridgePortControlPortBridgeStatus,
       "sleBridgePortControlUnknownMcastBlock": sleBridgePortControlUnknownMcastBlock,
       "sleBridgePortControlDescription": sleBridgePortControlDescription,
       "sleBridgePortControlHoldTime": sleBridgePortControlHoldTime,
       "sleBridgePortControlMacAntiSpoofing": sleBridgePortControlMacAntiSpoofing,
       "sleBridgePortControlSwitchStatus": sleBridgePortControlSwitchStatus,
       "sleBridgePortControlSwitchMode": sleBridgePortControlSwitchMode,
       "sleBridgePortControlSwitchSubMode": sleBridgePortControlSwitchSubMode,
       "sleBridgePortControlSwitchDefaultVlan": sleBridgePortControlSwitchDefaultVlan,
       "sleBridgePortControlSwitchIngressFilter": sleBridgePortControlSwitchIngressFilter,
       "sleBridgePortControlSwitchAccFrameType": sleBridgePortControlSwitchAccFrameType,
       "sleBridgePortControlSwitchNativeVid": sleBridgePortControlSwitchNativeVid,
       "sleBridgePortControlSwitchAllowedVlan": sleBridgePortControlSwitchAllowedVlan,
       "sleBridgePortControlSwitchAllowedVlanEtag": sleBridgePortControlSwitchAllowedVlanEtag,
       "sleBridgePortControlSwitchStaticChannelGroup": sleBridgePortControlSwitchStaticChannelGroup,
       "sleBridgePortControlSwitchChannelLoadbalance": sleBridgePortControlSwitchChannelLoadbalance,
       "sleBridgePortControlSwitchAggrType": sleBridgePortControlSwitchAggrType,
       "sleBridgePortControlSwitchAggrId": sleBridgePortControlSwitchAggrId,
       "sleBridgePortControlSwitchAggrMode": sleBridgePortControlSwitchAggrMode,
       "sleBridgePortControlLoopDetectPeriodMs": sleBridgePortControlLoopDetectPeriodMs,
       "sleBridgePortControlLoopDetectAdminCount": sleBridgePortControlLoopDetectAdminCount,
       "sleBridgePortControlLoopDetectVlan": sleBridgePortControlLoopDetectVlan,
       "sleBridgePortControlMaxNewHosts": sleBridgePortControlMaxNewHosts,
       "sleBridgePortControlStpStatus": sleBridgePortControlStpStatus,
       "sleBridgePortControlStpBpduGuard": sleBridgePortControlStpBpduGuard,
       "sleBridgePortControlOuterTpid": sleBridgePortControlOuterTpid,
       "sleBridgePortControlMirrorMonitor": sleBridgePortControlMirrorMonitor,
       "sleBridgePortControlBandwidth": sleBridgePortControlBandwidth,
       "sleBridgePortControlAlias": sleBridgePortControlAlias,
       "sleBridgePortControlMulticast": sleBridgePortControlMulticast,
       "sleBridgePortControlFloodBlock": sleBridgePortControlFloodBlock,
       "sleBridgePortNotification": sleBridgePortNotification,
       "sleBridgePortPVidChanged": sleBridgePortPVidChanged,
       "sleBridgePortMaxHostsChanged": sleBridgePortMaxHostsChanged,
       "sleBridgePortMaxLearnPerUnitChanged": sleBridgePortMaxLearnPerUnitChanged,
       "sleBridgePortMACFilterPermissionChanged": sleBridgePortMACFilterPermissionChanged,
       "sleBridgePortMirrorProfileChanged": sleBridgePortMirrorProfileChanged,
       "sleBridgePortBcscThresholdProfileChanged": sleBridgePortBcscThresholdProfileChanged,
       "sleBridgePortQinQStatusChanged": sleBridgePortQinQStatusChanged,
       "sleBridgePortLinktypeChanged": sleBridgePortLinktypeChanged,
       "sleBridgePortEdgemodeChanged": sleBridgePortEdgemodeChanged,
       "sleBridgePortStpBpduFilterChanged": sleBridgePortStpBpduFilterChanged,
       "sleBridgePortPvlanIsolatedStatusChanged": sleBridgePortPvlanIsolatedStatusChanged,
       "sleBridgePortStpBpduGuardErrRcvChanged": sleBridgePortStpBpduGuardErrRcvChanged,
       "sleBridgePortDhcpFilterServerChanged": sleBridgePortDhcpFilterServerChanged,
       "sleBridgePortLoopDetectProfileChanged": sleBridgePortLoopDetectProfileChanged,
       "sleBridgePortLoopDetectUnblock": sleBridgePortLoopDetectUnblock,
       "sleBridgePortNetBIOSFilterChanged": sleBridgePortNetBIOSFilterChanged,
       "sleBridgePortPushInnertagChanged": sleBridgePortPushInnertagChanged,
       "sleBridgePortPopInnertagChanged": sleBridgePortPopInnertagChanged,
       "sleBridgePortInnertagChanged": sleBridgePortInnertagChanged,
       "sleBridgePortPriorityChanged": sleBridgePortPriorityChanged,
       "sleBridgePortInner2outerPriChanged": sleBridgePortInner2outerPriChanged,
       "sleBridgePortInner2outerVidChanged": sleBridgePortInner2outerVidChanged,
       "sleBridgePortMACLearningStatusChanged": sleBridgePortMACLearningStatusChanged,
       "sleBridgePortPortBridgeStatusChanged": sleBridgePortPortBridgeStatusChanged,
       "sleBridgePortUnknownMcastBlockChanged": sleBridgePortUnknownMcastBlockChanged,
       "sleBridgePortDescriptionChanged": sleBridgePortDescriptionChanged,
       "sleBridgePortHoldTimeChanged": sleBridgePortHoldTimeChanged,
       "sleBridgePortMacAntiSpoofChanged": sleBridgePortMacAntiSpoofChanged,
       "sleBridgePortSwitchStatusChanged": sleBridgePortSwitchStatusChanged,
       "sleBridgePortSwitchModeChanged": sleBridgePortSwitchModeChanged,
       "sleBridgePortSwitchDefaultVlanChanged": sleBridgePortSwitchDefaultVlanChanged,
       "sleBridgePortSwitchNativeVlanChanged": sleBridgePortSwitchNativeVlanChanged,
       "sleBridgePortSwitchAccFramTypeChanged": sleBridgePortSwitchAccFramTypeChanged,
       "sleBridgePortSwitchAllowdVlanAdded": sleBridgePortSwitchAllowdVlanAdded,
       "sleBridgePortSwitchAllowdVlanDeleted": sleBridgePortSwitchAllowdVlanDeleted,
       "sleBridgePortSwitchStaticChannelChanged": sleBridgePortSwitchStaticChannelChanged,
       "sleBridgePortSwitchChannelLoadbalanceChanged": sleBridgePortSwitchChannelLoadbalanceChanged,
       "sleBridgePortPortLinkCntChanged": sleBridgePortPortLinkCntChanged,
       "sleBridgePortSwitchChannelProfileChanged": sleBridgePortSwitchChannelProfileChanged,
       "sleBridgePortSwitchChannelProfileDeleted": sleBridgePortSwitchChannelProfileDeleted,
       "sleBridgePortLoopDetectPeriodMsChanged": sleBridgePortLoopDetectPeriodMsChanged,
       "sleBridgePortLoopDetectLoopingCountChanged": sleBridgePortLoopDetectLoopingCountChanged,
       "sleBridgePortLoopDetectVlanChanged": sleBridgePortLoopDetectVlanChanged,
       "sleBridgePortLoopDetectVlanDeleted": sleBridgePortLoopDetectVlanDeleted,
       "sleBridgePortMaxNewHostsChanged": sleBridgePortMaxNewHostsChanged,
       "sleBridgePortSpanningTreeDetectedProtocolsCleared": sleBridgePortSpanningTreeDetectedProtocolsCleared,
       "sleBridgePortStpStatusChanged": sleBridgePortStpStatusChanged,
       "sleBridgePortStpBpduGuardChanged": sleBridgePortStpBpduGuardChanged,
       "sleBridgePortOuterTpidChanged": sleBridgePortOuterTpidChanged,
       "sleBridgePortMirrorMonitorChanged": sleBridgePortMirrorMonitorChanged,
       "sleBridgePortBandwidthChanged": sleBridgePortBandwidthChanged,
       "sleBridgePortAliasSet": sleBridgePortAliasSet,
       "sleBridgePortAliasUnset": sleBridgePortAliasUnset,
       "sleBridgePortMulticastChanged": sleBridgePortMulticastChanged,
       "sleBridgePortFloodBlockChanged": sleBridgePortFloodBlockChanged,
       "sleVlan": sleVlan,
       "sleVlanTable": sleVlanTable,
       "sleVlanEntry": sleVlanEntry,
       "sleVlanIndex": sleVlanIndex,
       "sleVlanIfIndex": sleVlanIfIndex,
       "sleVlanName": sleVlanName,
       "sleVlanStatus": sleVlanStatus,
       "sleVlanEgressPorts": sleVlanEgressPorts,
       "sleVlanUnTaggedPorts": sleVlanUnTaggedPorts,
       "sleVlanCreationTime": sleVlanCreationTime,
       "sleVlanAgeingTime": sleVlanAgeingTime,
       "sleVlanTagTxCounter": sleVlanTagTxCounter,
       "sleVlanDescription": sleVlanDescription,
       "sleVlanElineEnable": sleVlanElineEnable,
       "sleVlanOperStatus": sleVlanOperStatus,
       "sleVlanMtu": sleVlanMtu,
       "sleVlanType": sleVlanType,
       "sleVlanControl": sleVlanControl,
       "sleVlanControlRequest": sleVlanControlRequest,
       "sleVlanControlStatus": sleVlanControlStatus,
       "sleVlanControlTimer": sleVlanControlTimer,
       "sleVlanControlTimeStamp": sleVlanControlTimeStamp,
       "sleVlanControlReqResult": sleVlanControlReqResult,
       "sleVlanControlIndex": sleVlanControlIndex,
       "sleVlanControlName": sleVlanControlName,
       "sleVlanControlEgressPorts": sleVlanControlEgressPorts,
       "sleVlanControlUnTaggedPorts": sleVlanControlUnTaggedPorts,
       "sleVlanControlAgeingTime": sleVlanControlAgeingTime,
       "sleVlanControlIndexTo": sleVlanControlIndexTo,
       "sleVlanControlDescription": sleVlanControlDescription,
       "sleVlanControlElineEnable": sleVlanControlElineEnable,
       "sleVlanControlOperStatus": sleVlanControlOperStatus,
       "sleVlanControlMtu": sleVlanControlMtu,
       "sleVlanControlType": sleVlanControlType,
       "sleVlanControlServiceType": sleVlanControlServiceType,
       "sleVlanNotification": sleVlanNotification,
       "sleVlanCreated": sleVlanCreated,
       "sleVlanDestroyed": sleVlanDestroyed,
       "sleVlanPortProfileChanged": sleVlanPortProfileChanged,
       "sleVlanAgeingTimeChanged": sleVlanAgeingTimeChanged,
       "sleVlanRangeCreated": sleVlanRangeCreated,
       "sleVlanDescriptionChanged": sleVlanDescriptionChanged,
       "sleVlanElineVlanCreated": sleVlanElineVlanCreated,
       "sleVlanOperStatusChagned": sleVlanOperStatusChagned,
       "sleVlanMtuChagned": sleVlanMtuChagned,
       "sleServiceVlanTable": sleServiceVlanTable,
       "sleServiceVlanEntry": sleServiceVlanEntry,
       "sleServiceVlanIndex": sleServiceVlanIndex,
       "sleServiceVlanName": sleServiceVlanName,
       "sleServiceVlanDescription": sleServiceVlanDescription,
       "sleServiceVlanOperStatus": sleServiceVlanOperStatus,
       "sleServiceVlanMtu": sleServiceVlanMtu,
       "sleServiceVlanStatus": sleServiceVlanStatus,
       "sleServiceVlanType": sleServiceVlanType,
       "sleServiceVlanSeviceType": sleServiceVlanSeviceType,
       "sleVlanMap": sleVlanMap,
       "sleVlanMapTable": sleVlanMapTable,
       "sleVlanMapEntry": sleVlanMapEntry,
       "sleVlanMapFid": sleVlanMapFid,
       "sleVlanMapStpId": sleVlanMapStpId,
       "sleVlanMapErpDomainId": sleVlanMapErpDomainId,
       "sleVlanMapControl": sleVlanMapControl,
       "sleVlanMapControlRequest": sleVlanMapControlRequest,
       "sleVlanMapControlStatus": sleVlanMapControlStatus,
       "sleVlanMapControlTimer": sleVlanMapControlTimer,
       "sleVlanMapControlTimeStamp": sleVlanMapControlTimeStamp,
       "sleVlanMapControlReqResult": sleVlanMapControlReqResult,
       "sleVlanMapControlIndex": sleVlanMapControlIndex,
       "sleVlanMapControlFid": sleVlanMapControlFid,
       "sleVlanMapControlStpId": sleVlanMapControlStpId,
       "sleVlanMapControlErpDomainId": sleVlanMapControlErpDomainId,
       "sleVlanMapNotification": sleVlanMapNotification,
       "sleVlanMapFidChanged": sleVlanMapFidChanged,
       "sleVlanMapStpIdChanged": sleVlanMapStpIdChanged,
       "sleVlanMapErpDomainIdChanged": sleVlanMapErpDomainIdChanged,
       "sleStp": sleStp,
       "sleStpInfo": sleStpInfo,
       "sleStpOperationMode": sleStpOperationMode,
       "sleStpFormatSelector": sleStpFormatSelector,
       "sleStpConfigureName": sleStpConfigureName,
       "sleStpRevisionLevel": sleStpRevisionLevel,
       "sleStpFwdDelay": sleStpFwdDelay,
       "sleStpHelloTime": sleStpHelloTime,
       "sleStpMaxAge": sleStpMaxAge,
       "sleStpMaxHops": sleStpMaxHops,
       "sleStpExtRootBridgeId": sleStpExtRootBridgeId,
       "sleStpExtPathcost": sleStpExtPathcost,
       "sleStpBpduGuardMode": sleStpBpduGuardMode,
       "sleStpBpduGuardAutoRcvMode": sleStpBpduGuardAutoRcvMode,
       "sleStpBpduGuardAutoRcvTime": sleStpBpduGuardAutoRcvTime,
       "sleStpControl": sleStpControl,
       "sleStpControlRequest": sleStpControlRequest,
       "sleStpControlStatus": sleStpControlStatus,
       "sleStpControlTimer": sleStpControlTimer,
       "sleStpControlTimeStamp": sleStpControlTimeStamp,
       "sleStpControlReqResult": sleStpControlReqResult,
       "sleStpControlOperationMode": sleStpControlOperationMode,
       "sleStpControlConfigureName": sleStpControlConfigureName,
       "sleStpControlRevisionLevel": sleStpControlRevisionLevel,
       "sleStpControlFwdDelay": sleStpControlFwdDelay,
       "sleStpControlHelloTime": sleStpControlHelloTime,
       "sleStpControlMaxAge": sleStpControlMaxAge,
       "sleStpControlMaxHops": sleStpControlMaxHops,
       "sleStpControlBpduGuardMode": sleStpControlBpduGuardMode,
       "sleStpControlBpduGuardAutoRcvMode": sleStpControlBpduGuardAutoRcvMode,
       "sleStpControlBpduGuardAutoRcvTime": sleStpControlBpduGuardAutoRcvTime,
       "sleStpNotification": sleStpNotification,
       "sleStpOperationModeChanged": sleStpOperationModeChanged,
       "sleStpConfigureProfileChanged": sleStpConfigureProfileChanged,
       "sleStpTimerProfileChanged": sleStpTimerProfileChanged,
       "sleStpBpduGuardProfileChanged": sleStpBpduGuardProfileChanged,
       "sleStpInstance": sleStpInstance,
       "sleStpInstanceTable": sleStpInstanceTable,
       "sleStpInstanceEntry": sleStpInstanceEntry,
       "sleStpInstanceIndex": sleStpInstanceIndex,
       "sleStpInstanceEnable": sleStpInstanceEnable,
       "sleStpInstancePriority": sleStpInstancePriority,
       "sleStpInstanceRootBridgeId": sleStpInstanceRootBridgeId,
       "sleStpInstanceRootPathcost": sleStpInstanceRootPathcost,
       "sleStpInstanceDesignatedBridgeId": sleStpInstanceDesignatedBridgeId,
       "sleStpInstanceDesignatedPortId": sleStpInstanceDesignatedPortId,
       "sleStpInstanceRootPortId": sleStpInstanceRootPortId,
       "sleStpInstanceFwdDelay": sleStpInstanceFwdDelay,
       "sleStpInstanceHelloTime": sleStpInstanceHelloTime,
       "sleStpInstanceMaxAge": sleStpInstanceMaxAge,
       "sleStpInstanceRemainHops": sleStpInstanceRemainHops,
       "sleStpInstanceBrFwdDelay": sleStpInstanceBrFwdDelay,
       "sleStpInstanceBrHelloTime": sleStpInstanceBrHelloTime,
       "sleStpInstanceBrMaxAge": sleStpInstanceBrMaxAge,
       "sleStpInstanceControl": sleStpInstanceControl,
       "sleStpInstanceControlRequest": sleStpInstanceControlRequest,
       "sleStpInstanceControlStatus": sleStpInstanceControlStatus,
       "sleStpInstanceControlTimer": sleStpInstanceControlTimer,
       "sleStpInstanceControlTimeStamp": sleStpInstanceControlTimeStamp,
       "sleStpInstanceControlReqResult": sleStpInstanceControlReqResult,
       "sleStpInstanceControlIndex": sleStpInstanceControlIndex,
       "sleStpInstanceControlEnable": sleStpInstanceControlEnable,
       "sleStpInstanceControlPriority": sleStpInstanceControlPriority,
       "sleStpInstanceControlBrFwdDelay": sleStpInstanceControlBrFwdDelay,
       "sleStpInstanceControlBrHelloTime": sleStpInstanceControlBrHelloTime,
       "sleStpInstanceControlBrMaxAge": sleStpInstanceControlBrMaxAge,
       "sleStpInstanceNotification": sleStpInstanceNotification,
       "sleStpInstanceEnableChanged": sleStpInstanceEnableChanged,
       "sleStpInstanceConfigProfileChanged": sleStpInstanceConfigProfileChanged,
       "sleStpInstancePort": sleStpInstancePort,
       "sleStpInstancePortTable": sleStpInstancePortTable,
       "sleStpInstancePortEntry": sleStpInstancePortEntry,
       "sleStpInstancePortIndex": sleStpInstancePortIndex,
       "sleStpInstancePortPathcost": sleStpInstancePortPathcost,
       "sleStpInstancePortPriority": sleStpInstancePortPriority,
       "sleStpInstancePortRole": sleStpInstancePortRole,
       "sleStpInstancePortState": sleStpInstancePortState,
       "sleStpInstancePortRootBridgeId": sleStpInstancePortRootBridgeId,
       "sleStpInstancePortRootPathcost": sleStpInstancePortRootPathcost,
       "sleStpInstancePortDesignateBridgeId": sleStpInstancePortDesignateBridgeId,
       "sleStpInstancePortDesignatePortId": sleStpInstancePortDesignatePortId,
       "sleStpInstancePortRootGuardMode": sleStpInstancePortRootGuardMode,
       "sleStpInstancePortControl": sleStpInstancePortControl,
       "sleStpInstancePortControlRequest": sleStpInstancePortControlRequest,
       "sleStpInstancePortControlStatus": sleStpInstancePortControlStatus,
       "sleStpInstancePortControlTimer": sleStpInstancePortControlTimer,
       "sleStpInstancePortControlTimeStamp": sleStpInstancePortControlTimeStamp,
       "sleStpInstancePortControlReqResult": sleStpInstancePortControlReqResult,
       "sleStpInstancePortControlIndex": sleStpInstancePortControlIndex,
       "sleStpInstancePortControlInstanceId": sleStpInstancePortControlInstanceId,
       "sleStpInstancePortControlPathcost": sleStpInstancePortControlPathcost,
       "sleStpInstancePortControlPriority": sleStpInstancePortControlPriority,
       "sleStpInstancePortControlRootGuardMode": sleStpInstancePortControlRootGuardMode,
       "sleStpInstancePortNotification": sleStpInstancePortNotification,
       "sleStpInstancePortProfileChanged": sleStpInstancePortProfileChanged,
       "sleSubnetVlan": sleSubnetVlan,
       "sleSubnetVlanTable": sleSubnetVlanTable,
       "sleSubnetVlanEntry": sleSubnetVlanEntry,
       "sleSubnetVlanIp": sleSubnetVlanIp,
       "sleSubnetVlanMask": sleSubnetVlanMask,
       "sleSubnetVlanVid": sleSubnetVlanVid,
       "sleSubnetVlanControl": sleSubnetVlanControl,
       "sleSubnetVlanControlRequest": sleSubnetVlanControlRequest,
       "sleSubnetVlanControlStatus": sleSubnetVlanControlStatus,
       "sleSubnetVlanControlTimer": sleSubnetVlanControlTimer,
       "sleSubnetVlanControlTimeStamp": sleSubnetVlanControlTimeStamp,
       "sleSubnetVlanControlReqResult": sleSubnetVlanControlReqResult,
       "sleSubnetVlanControlIp": sleSubnetVlanControlIp,
       "sleSubnetVlanControlMask": sleSubnetVlanControlMask,
       "sleSubnetVlanControlVid": sleSubnetVlanControlVid,
       "sleSubnetVlanNotification": sleSubnetVlanNotification,
       "sleSubnetVlanCreated": sleSubnetVlanCreated,
       "sleSubnetVlanDestroyed": sleSubnetVlanDestroyed,
       "sleProtocolVlan": sleProtocolVlan,
       "sleProtocolVlanTable": sleProtocolVlanTable,
       "sleProtocolVlanEntry": sleProtocolVlanEntry,
       "sleProtocolVlanEtype": sleProtocolVlanEtype,
       "sleProtocolVlanVid": sleProtocolVlanVid,
       "sleProtocolVlanControl": sleProtocolVlanControl,
       "sleProtocolVlanControlRequest": sleProtocolVlanControlRequest,
       "sleProtocolVlanControlStatus": sleProtocolVlanControlStatus,
       "sleProtocolVlanControlTimer": sleProtocolVlanControlTimer,
       "sleProtocolVlanControlTimeStamp": sleProtocolVlanControlTimeStamp,
       "sleProtocolVlanControlReqResult": sleProtocolVlanControlReqResult,
       "sleProtocolVlanControlPortIndex": sleProtocolVlanControlPortIndex,
       "sleProtocolVlanControlEtype": sleProtocolVlanControlEtype,
       "sleProtocolVlanControlVid": sleProtocolVlanControlVid,
       "sleProtocolVlanNotification": sleProtocolVlanNotification,
       "sleProtocolVlanCreated": sleProtocolVlanCreated,
       "sleProtocolVlanDestroyed": sleProtocolVlanDestroyed,
       "sleLag": sleLag,
       "sleLagTable": sleLagTable,
       "sleLagEntry": sleLagEntry,
       "sleLagIndex": sleLagIndex,
       "sleLagPortId": sleLagPortId,
       "sleLagDistMode": sleLagDistMode,
       "sleLagPortMap": sleLagPortMap,
       "sleLagMode": sleLagMode,
       "sleLagLeastActive": sleLagLeastActive,
       "sleLagControl": sleLagControl,
       "sleLagControlRequest": sleLagControlRequest,
       "sleLagControlStatus": sleLagControlStatus,
       "sleLagControlTimer": sleLagControlTimer,
       "sleLagControlTimeStamp": sleLagControlTimeStamp,
       "sleLagControlReqResult": sleLagControlReqResult,
       "sleLagControlIndex": sleLagControlIndex,
       "sleLagControlDistMode": sleLagControlDistMode,
       "sleLagControlPortMap": sleLagControlPortMap,
       "sleLagControlMode": sleLagControlMode,
       "sleLagControlLeastActive": sleLagControlLeastActive,
       "sleLagNotification": sleLagNotification,
       "sleLagProfileChanged": sleLagProfileChanged,
       "sleLagProfileActiveLinkChanged": sleLagProfileActiveLinkChanged,
       "sleLagLacp": sleLagLacp,
       "sleLagLacpTable": sleLagLacpTable,
       "sleLagLacpEntry": sleLagLacpEntry,
       "sleLagLacpIndex": sleLagLacpIndex,
       "sleLagLacpActorAggregatorKey": sleLagLacpActorAggregatorKey,
       "sleLagLacpActorSystemMAC": sleLagLacpActorSystemMAC,
       "sleLagLacpPartnerSystemMAC": sleLagLacpPartnerSystemMAC,
       "sleLagLacpPartnerSystemPriority": sleLagLacpPartnerSystemPriority,
       "sleLagLacpPartnerAggregatorKey": sleLagLacpPartnerAggregatorKey,
       "sleLagLacpStats": sleLagLacpStats,
       "sleLagLacpStatsPduReceived": sleLagLacpStatsPduReceived,
       "sleLagLacpStatsPduReceivedErrrors": sleLagLacpStatsPduReceivedErrrors,
       "sleLagLacpStatsPduSent": sleLagLacpStatsPduSent,
       "sleLagLacpStatsPduSentError": sleLagLacpStatsPduSentError,
       "sleLagLacpStatsMarkerReceived": sleLagLacpStatsMarkerReceived,
       "sleLagLacpStatsMarkerSent": sleLagLacpStatsMarkerSent,
       "sleLagLacpStatsMarkerSentError": sleLagLacpStatsMarkerSentError,
       "sleLagLacpControl": sleLagLacpControl,
       "sleLagLacpControlRequest": sleLagLacpControlRequest,
       "sleLagLacpControlStatus": sleLagLacpControlStatus,
       "sleLagLacpControlTimer": sleLagLacpControlTimer,
       "sleLagLacpControlTimeStamp": sleLagLacpControlTimeStamp,
       "sleLagLacpControlReqResult": sleLagLacpControlReqResult,
       "sleLagLacpNotification": sleLagLacpNotification,
       "sleLagLacpStatsCleared": sleLagLacpStatsCleared,
       "sleLagLacpPort": sleLagLacpPort,
       "sleLagLacpPortTable": sleLagLacpPortTable,
       "sleLagLacpPortEntry": sleLagLacpPortEntry,
       "sleLagLacpPortIndex": sleLagLacpPortIndex,
       "sleLagLacpPortActivity": sleLagLacpPortActivity,
       "sleLagLacpPortActorPriority": sleLagLacpPortActorPriority,
       "sleLagLacpPortActorAggregatorId": sleLagLacpPortActorAggregatorId,
       "sleLagLacpPortActorAdminKey": sleLagLacpPortActorAdminKey,
       "sleLagLacpPortActorAdminState": sleLagLacpPortActorAdminState,
       "sleLagLacpPortActorOperKey": sleLagLacpPortActorOperKey,
       "sleLagLacpPortActorOperState": sleLagLacpPortActorOperState,
       "sleLagLacpPortPartnerAdminSystemMAC": sleLagLacpPortPartnerAdminSystemMAC,
       "sleLagLacpPortPartnerAdminSystemPriority": sleLagLacpPortPartnerAdminSystemPriority,
       "sleLagLacpPortPartnerAdminKey": sleLagLacpPortPartnerAdminKey,
       "sleLagLacpPortPartnerAdminNum": sleLagLacpPortPartnerAdminNum,
       "sleLagLacpPortPartnerAdminPriority": sleLagLacpPortPartnerAdminPriority,
       "sleLagLacpPortPartnerAdminState": sleLagLacpPortPartnerAdminState,
       "sleLagLacpPortPartnerOperSystemMAC": sleLagLacpPortPartnerOperSystemMAC,
       "sleLagLacpPortPartnerOperSystemPriority": sleLagLacpPortPartnerOperSystemPriority,
       "sleLagLacpPortPartnerOperKey": sleLagLacpPortPartnerOperKey,
       "sleLagLacpPortPartnerOperNum": sleLagLacpPortPartnerOperNum,
       "sleLagLacpPortPartnerOperPriority": sleLagLacpPortPartnerOperPriority,
       "sleLagLacpPortPartnerOperState": sleLagLacpPortPartnerOperState,
       "sleLagLacpPortActorAdminAggregatorId": sleLagLacpPortActorAdminAggregatorId,
       "sleLagLacpPortControl": sleLagLacpPortControl,
       "sleLagLacpPortControlRequest": sleLagLacpPortControlRequest,
       "sleLagLacpPortControlStatus": sleLagLacpPortControlStatus,
       "sleLagLacpPortControlTimer": sleLagLacpPortControlTimer,
       "sleLagLacpPortControlTimeStamp": sleLagLacpPortControlTimeStamp,
       "sleLagLacpPortControlReqResult": sleLagLacpPortControlReqResult,
       "sleLagLacpPortControlIndex": sleLagLacpPortControlIndex,
       "sleLagLacpPortControlActivity": sleLagLacpPortControlActivity,
       "sleLagLacpPortControlMode": sleLagLacpPortControlMode,
       "sleLagLacpPortControlAdminKey": sleLagLacpPortControlAdminKey,
       "sleLagLacpPortControlAggregation": sleLagLacpPortControlAggregation,
       "sleLagLacpPortControlPriority": sleLagLacpPortControlPriority,
       "sleLagLacpPortControlTimeout": sleLagLacpPortControlTimeout,
       "sleLagLacpPortControlAdminAggregatorId": sleLagLacpPortControlAdminAggregatorId,
       "sleLagLacpPortNotification": sleLagLacpPortNotification,
       "sleLagLacpPortProfileChanged": sleLagLacpPortProfileChanged,
       "sleLagLacpPortAggrChanged": sleLagLacpPortAggrChanged,
       "sleFdb": sleFdb,
       "sleFdbTable": sleFdbTable,
       "sleFdbEntry": sleFdbEntry,
       "sleFdbEntryFid": sleFdbEntryFid,
       "sleFdbEntryPort": sleFdbEntryPort,
       "sleFdbEntryMacAddress": sleFdbEntryMacAddress,
       "sleFdbEntryVid": sleFdbEntryVid,
       "sleFdbEntryMode": sleFdbEntryMode,
       "sleFdbEntryPermission": sleFdbEntryPermission,
       "sleFdbEntryElapsedTime": sleFdbEntryElapsedTime,
       "sleFdbControl": sleFdbControl,
       "sleFdbEntryControlRequest": sleFdbEntryControlRequest,
       "sleFdbEntryControlStatus": sleFdbEntryControlStatus,
       "sleFdbEntryControlTimer": sleFdbEntryControlTimer,
       "sleFdbEntryControlTImeStamp": sleFdbEntryControlTImeStamp,
       "sleFdbEntryControlReqResult": sleFdbEntryControlReqResult,
       "sleFdbEntryControlFid": sleFdbEntryControlFid,
       "sleFdbEntryControlPort": sleFdbEntryControlPort,
       "sleFdbEntryControlMacAddress": sleFdbEntryControlMacAddress,
       "sleFdbNotification": sleFdbNotification,
       "sleFdbEntryCreated": sleFdbEntryCreated,
       "sleFdbEntryDestoryed": sleFdbEntryDestoryed,
       "sleFdbTableEntriesCleared": sleFdbTableEntriesCleared,
       "sleMfdbOld": sleMfdbOld,
       "sleMfdbOldTable": sleMfdbOldTable,
       "sleMfdbOldEntry": sleMfdbOldEntry,
       "sleMfdbOldMacAddress": sleMfdbOldMacAddress,
       "sleMfdbOldEntryPermission": sleMfdbOldEntryPermission,
       "sleMfdbOldVlanIndex": sleMfdbOldVlanIndex,
       "sleMfdbOldPorts": sleMfdbOldPorts,
       "sleMfdbOldControl": sleMfdbOldControl,
       "sleMfdbOldControlRequest": sleMfdbOldControlRequest,
       "sleMfdbOldControlStatus": sleMfdbOldControlStatus,
       "sleMfdbOldControlTimer": sleMfdbOldControlTimer,
       "sleMfdbOldControlTimeStamp": sleMfdbOldControlTimeStamp,
       "sleMfdbOldControlReqResult": sleMfdbOldControlReqResult,
       "sleMfdbOldControlMacAddress": sleMfdbOldControlMacAddress,
       "sleMfdbOldControlEntryPermission": sleMfdbOldControlEntryPermission,
       "sleMfdbOldControlVlanIndex": sleMfdbOldControlVlanIndex,
       "sleMfdbOldControlPorts": sleMfdbOldControlPorts,
       "sleMfdbOldNotification": sleMfdbOldNotification,
       "sleMfdbOldEntryCreated": sleMfdbOldEntryCreated,
       "sleMfdbOldEntryDestoryed": sleMfdbOldEntryDestoryed,
       "sleMfdbOldEntryPermissionChanged": sleMfdbOldEntryPermissionChanged,
       "sleMfdbOldEntryTableCleared": sleMfdbOldEntryTableCleared,
       "sleIgmpConf": sleIgmpConf,
       "sleIgmpConfTable": sleIgmpConfTable,
       "sleIgmpConfEntry": sleIgmpConfEntry,
       "sleIgmpConfVlanIndex": sleIgmpConfVlanIndex,
       "sleIgmpConfEnable": sleIgmpConfEnable,
       "sleIgmpConfMulticastFilter": sleIgmpConfMulticastFilter,
       "sleIgmpConfOutmostVlan": sleIgmpConfOutmostVlan,
       "sleIgmpConfSnoopEnable": sleIgmpConfSnoopEnable,
       "sleIgmpConfSnoopJoinDelay": sleIgmpConfSnoopJoinDelay,
       "sleIgmpConfSnoopQueryDelay": sleIgmpConfSnoopQueryDelay,
       "sleIgmpConfSnoopMrouter": sleIgmpConfSnoopMrouter,
       "sleIgmpConfSnoopFastLeave": sleIgmpConfSnoopFastLeave,
       "sleIgmpConfSnoopQuerier": sleIgmpConfSnoopQuerier,
       "sleIgmpConfControl": sleIgmpConfControl,
       "sleIgmpConfControlRequest": sleIgmpConfControlRequest,
       "sleIgmpConfControlStatus": sleIgmpConfControlStatus,
       "sleIgmpConfControlTimer": sleIgmpConfControlTimer,
       "sleIgmpConfControlTimeStamp": sleIgmpConfControlTimeStamp,
       "sleIgmpConfControlReqResult": sleIgmpConfControlReqResult,
       "sleIgmpConfControlVlanIndex": sleIgmpConfControlVlanIndex,
       "sleIgmpConfControlEnable": sleIgmpConfControlEnable,
       "sleIgmpConfControlMulticastFilter": sleIgmpConfControlMulticastFilter,
       "sleIgmpConfControlOutmostVlan": sleIgmpConfControlOutmostVlan,
       "sleIgmpConfControlSnoopEnable": sleIgmpConfControlSnoopEnable,
       "sleIgmpConfControlSnoopJoinDelay": sleIgmpConfControlSnoopJoinDelay,
       "sleIgmpConfControlSnoopQueryDelay": sleIgmpConfControlSnoopQueryDelay,
       "sleIgmpConfControlSnoopMrouter": sleIgmpConfControlSnoopMrouter,
       "sleIgmpConfControlSnoopFastLeave": sleIgmpConfControlSnoopFastLeave,
       "sleIgmpConfControlSnoopQuerier": sleIgmpConfControlSnoopQuerier,
       "sleIgmpConfNotification": sleIgmpConfNotification,
       "sleIgmpConfProfileChanged": sleIgmpConfProfileChanged,
       "sleIgmpMcast": sleIgmpMcast,
       "sleIgmpMcastTable": sleIgmpMcastTable,
       "sleIgmpMcastEntry": sleIgmpMcastEntry,
       "sleIgmpMcastVlanIndex": sleIgmpMcastVlanIndex,
       "sleIgmpMcastIPAddress": sleIgmpMcastIPAddress,
       "sleIgmpMcastPortIndex": sleIgmpMcastPortIndex,
       "sleIgmpMcastType": sleIgmpMcastType,
       "sleIgmpMcastExpireTime": sleIgmpMcastExpireTime,
       "sleIgmpMcastControl": sleIgmpMcastControl,
       "sleIgmpMcastControlReqest": sleIgmpMcastControlReqest,
       "sleIgmpMcastControlStatus": sleIgmpMcastControlStatus,
       "sleIgmpMcastControlTimer": sleIgmpMcastControlTimer,
       "sleIgmpMcastControlTimeStamp": sleIgmpMcastControlTimeStamp,
       "sleIgmpMcastControlReqResult": sleIgmpMcastControlReqResult,
       "sleIgmpMcastControlVlanIndex": sleIgmpMcastControlVlanIndex,
       "sleIgmpMcastControlIPAddress": sleIgmpMcastControlIPAddress,
       "sleIgmpMcastControlPortIndex": sleIgmpMcastControlPortIndex,
       "sleIgmpMcastNotification": sleIgmpMcastNotification,
       "sleIgmpStaticMcastCreated": sleIgmpStaticMcastCreated,
       "sleIgmpStaticMcastDestroyed": sleIgmpStaticMcastDestroyed,
       "sleIgmpMcastCounterInfo": sleIgmpMcastCounterInfo,
       "sleIgmpMcastCounterInfoGroupCount": sleIgmpMcastCounterInfoGroupCount,
       "sleIgmpMcastCounterInfoSnoopingCount": sleIgmpMcastCounterInfoSnoopingCount,
       "sleMcastMrouteCounterInfo": sleMcastMrouteCounterInfo,
       "sleMcastMrouteJoinedCount": sleMcastMrouteJoinedCount,
       "sleStackDevice": sleStackDevice,
       "sleStackDeviceTable": sleStackDeviceTable,
       "sleStackDeviceEntry": sleStackDeviceEntry,
       "sleStackDeviceMacAddress": sleStackDeviceMacAddress,
       "sleStackDeviceNodeId": sleStackDeviceNodeId,
       "sleStackDeviceDescriptor": sleStackDeviceDescriptor,
       "sleStackDeviceMode": sleStackDeviceMode,
       "sleStackDeviceStatus": sleStackDeviceStatus,
       "sleStackDeviceType": sleStackDeviceType,
       "sleStackDeviceHostName": sleStackDeviceHostName,
       "sleStackDevicePortNum": sleStackDevicePortNum,
       "sleStackDeviceControl": sleStackDeviceControl,
       "sleStackDeviceControlRequest": sleStackDeviceControlRequest,
       "sleStackDeviceControlStatus": sleStackDeviceControlStatus,
       "sleStackDeviceControlTimer": sleStackDeviceControlTimer,
       "sleStackDeviceControlTImeStamp": sleStackDeviceControlTImeStamp,
       "sleStackDeviceControlReqResult": sleStackDeviceControlReqResult,
       "sleStackDeviceControlMacAddress": sleStackDeviceControlMacAddress,
       "sleStackDeviceControlDescriptor": sleStackDeviceControlDescriptor,
       "sleStackDeviceNotification": sleStackDeviceNotification,
       "sleStackDeviceCreated": sleStackDeviceCreated,
       "sleStackDeviceDestoryed": sleStackDeviceDestoryed,
       "sleErpDomain": sleErpDomain,
       "sleErpDomainTable": sleErpDomainTable,
       "sleErpDomainEntry": sleErpDomainEntry,
       "sleErpDomainIndex": sleErpDomainIndex,
       "sleErpDomainName": sleErpDomainName,
       "sleErpDomainPrimaryPort": sleErpDomainPrimaryPort,
       "sleErpDomainSecondaryPort": sleErpDomainSecondaryPort,
       "sleErpDomainBridgeRole": sleErpDomainBridgeRole,
       "sleErpDomainProtectionActivation": sleErpDomainProtectionActivation,
       "sleErpDomainOperatorRequest": sleErpDomainOperatorRequest,
       "sleErpDomainWaitToRestoreTime": sleErpDomainWaitToRestoreTime,
       "sleErpDomainTestPacketInterval": sleErpDomainTestPacketInterval,
       "sleErpDomainLearningDisabledTime": sleErpDomainLearningDisabledTime,
       "sleErpDomainNodeStatus": sleErpDomainNodeStatus,
       "sleErpDomainRingStatus": sleErpDomainRingStatus,
       "sleErpDomainLotp": sleErpDomainLotp,
       "sleErpDomainULotp": sleErpDomainULotp,
       "sleErpDomainMultipleRM": sleErpDomainMultipleRM,
       "sleErpDomainRMNodeReacheablility": sleErpDomainRMNodeReacheablility,
       "sleErpDomainHoldOffTime": sleErpDomainHoldOffTime,
       "sleErpDomainRingPriority": sleErpDomainRingPriority,
       "sleErpDomainControl": sleErpDomainControl,
       "sleErpDomainControlRequest": sleErpDomainControlRequest,
       "sleErpDomainControlStatus": sleErpDomainControlStatus,
       "sleErpDomainControlTimer": sleErpDomainControlTimer,
       "sleErpDomainControlTImeStamp": sleErpDomainControlTImeStamp,
       "sleErpDomainControlReqResult": sleErpDomainControlReqResult,
       "sleErpDomainControlIndex": sleErpDomainControlIndex,
       "sleErpDomainControlName": sleErpDomainControlName,
       "sleErpDomainControlPrimaryPort": sleErpDomainControlPrimaryPort,
       "sleErpDomainControlSecondaryPort": sleErpDomainControlSecondaryPort,
       "sleErpDomainControlBridgeRole": sleErpDomainControlBridgeRole,
       "sleErpDomainControlProtectionActivation": sleErpDomainControlProtectionActivation,
       "sleErpDomainControlOperatorRequest": sleErpDomainControlOperatorRequest,
       "sleErpDomainControlWaitToRestoreTime": sleErpDomainControlWaitToRestoreTime,
       "sleErpDomainControlTestPacketInterval": sleErpDomainControlTestPacketInterval,
       "sleErpDomainControlLearningDisabledTime": sleErpDomainControlLearningDisabledTime,
       "sleErpDomainControlHoldOffTime": sleErpDomainControlHoldOffTime,
       "sleErpDomainControlRingPriority": sleErpDomainControlRingPriority,
       "sleErpDomainControlLotp": sleErpDomainControlLotp,
       "sleErpDomainControlULotp": sleErpDomainControlULotp,
       "sleErpDomainControlMultipleRM": sleErpDomainControlMultipleRM,
       "sleErpDomainControlRMNodeReacheablility": sleErpDomainControlRMNodeReacheablility,
       "sleErpDomainNotification": sleErpDomainNotification,
       "sleErpDomainCreated": sleErpDomainCreated,
       "sleErpDomainDestroyed": sleErpDomainDestroyed,
       "sleErpDomainProfileChanged": sleErpDomainProfileChanged,
       "sleErpProtectionActivationChanged": sleErpProtectionActivationChanged,
       "sleErpHoldOffTimeChanged": sleErpHoldOffTimeChanged,
       "sleErpRingPriorityChanged": sleErpRingPriorityChanged,
       "sleErpTrapChanged": sleErpTrapChanged,
       "sleLldpPort": sleLldpPort,
       "sleLldpPortTable": sleLldpPortTable,
       "sleLldpPortEntry": sleLldpPortEntry,
       "sleLldpPortIndex": sleLldpPortIndex,
       "sleLldpPortActivity": sleLldpPortActivity,
       "sleLldpPortAdminStatus": sleLldpPortAdminStatus,
       "sleLldpPortNotificationEnable": sleLldpPortNotificationEnable,
       "sleLldpPortTLVsTxEnable": sleLldpPortTLVsTxEnable,
       "sleLldpPortMgmtTxEnable": sleLldpPortMgmtTxEnable,
       "sleLldpPortMgmtAddress": sleLldpPortMgmtAddress,
       "sleLldpPortTLVsTxNetworkPolciyProfile": sleLldpPortTLVsTxNetworkPolciyProfile,
       "sleLldpPortMgmtIPType": sleLldpPortMgmtIPType,
       "sleLldpPortMgmtIPAddress": sleLldpPortMgmtIPAddress,
       "sleLldpPortControl": sleLldpPortControl,
       "sleLldpPortControlRequest": sleLldpPortControlRequest,
       "sleLldpPortControlStatus": sleLldpPortControlStatus,
       "sleLldpPortControlTimer": sleLldpPortControlTimer,
       "sleLldpPortControlTimeStamp": sleLldpPortControlTimeStamp,
       "sleLldpPortControlReqResult": sleLldpPortControlReqResult,
       "sleLldpPortControlIndex": sleLldpPortControlIndex,
       "sleLldpPortControlActivity": sleLldpPortControlActivity,
       "sleLldpPortControlAdminstatus": sleLldpPortControlAdminstatus,
       "sleLldpPortControlNotificationEnable": sleLldpPortControlNotificationEnable,
       "sleLldpPortControlTLVsTxEnable": sleLldpPortControlTLVsTxEnable,
       "sleLldpPortControlMgmtTxEnable": sleLldpPortControlMgmtTxEnable,
       "sleLldpPortControlMgmtAddress": sleLldpPortControlMgmtAddress,
       "sleLldpPortControlTLVsTxNetworkPolicyProfile": sleLldpPortControlTLVsTxNetworkPolicyProfile,
       "sleLldpPortControlMgmtIPType": sleLldpPortControlMgmtIPType,
       "sleLldpPortControlMgmtIPAddress": sleLldpPortControlMgmtIPAddress,
       "sleLldpPortNotification": sleLldpPortNotification,
       "sleLldpPortProfileChanged": sleLldpPortProfileChanged,
       "sleLldpPortNetworkPolicyProfileChanged": sleLldpPortNetworkPolicyProfileChanged,
       "sleLldpRemote": sleLldpRemote,
       "sleLldpRemoteTable": sleLldpRemoteTable,
       "sleLldpRemoteEntry": sleLldpRemoteEntry,
       "sleLldpRemIndex": sleLldpRemIndex,
       "sleLldpRemTimeMark": sleLldpRemTimeMark,
       "sleLldpRemChassisIdSubtype": sleLldpRemChassisIdSubtype,
       "sleLldpRemChassisId": sleLldpRemChassisId,
       "sleLldpRemPortIdSubtype": sleLldpRemPortIdSubtype,
       "sleLldpRemPortId": sleLldpRemPortId,
       "sleLldpRemPortDesc": sleLldpRemPortDesc,
       "sleLldpRemSysName": sleLldpRemSysName,
       "sleLldpRemSysDesc": sleLldpRemSysDesc,
       "sleLldpRemSysCapSupported": sleLldpRemSysCapSupported,
       "sleLldpRemSysCapEnabled": sleLldpRemSysCapEnabled,
       "sleLldpRemoteManAddrTable": sleLldpRemoteManAddrTable,
       "sleLldpRemoteManAddrEntry": sleLldpRemoteManAddrEntry,
       "sleLldpRemManAddrSubType": sleLldpRemManAddrSubType,
       "sleLldpRemManAddr": sleLldpRemManAddr,
       "sleLldpRemManAddrIfSubType": sleLldpRemManAddrIfSubType,
       "sleLldpRemManAddrIfId": sleLldpRemManAddrIfId,
       "sleLldpRemAddrOid": sleLldpRemAddrOid,
       "sleLldpStatistics": sleLldpStatistics,
       "sleLldpStatisticsTable": sleLldpStatisticsTable,
       "sleLldpStatisticsEntry": sleLldpStatisticsEntry,
       "sleLldpStatsTxPortFramesTotal": sleLldpStatsTxPortFramesTotal,
       "sleLldpStatsRxPortFramesDiscardedTotal": sleLldpStatsRxPortFramesDiscardedTotal,
       "sleLldpStatsRxPortFramesErrors": sleLldpStatsRxPortFramesErrors,
       "sleLldpStatsRxPortFramesTotal": sleLldpStatsRxPortFramesTotal,
       "sleLldpStatsRxPortTLVsDiscardedTotal": sleLldpStatsRxPortTLVsDiscardedTotal,
       "sleLldpStatsRxPortTLVsUnrecognizedTotal": sleLldpStatsRxPortTLVsUnrecognizedTotal,
       "sleLldpStatsRxPortAgeoutsTotal": sleLldpStatsRxPortAgeoutsTotal,
       "sleLldpStatisticsControl": sleLldpStatisticsControl,
       "sleLldpStatsControlRequest": sleLldpStatsControlRequest,
       "sleLldpStatsControlStatus": sleLldpStatsControlStatus,
       "sleLldpStatsControlTimer": sleLldpStatsControlTimer,
       "sleLldpStatsControlTimeStamp": sleLldpStatsControlTimeStamp,
       "sleLldpStatsControlReqResult": sleLldpStatsControlReqResult,
       "sleLldpStatsControlPortIndex": sleLldpStatsControlPortIndex,
       "sleLldpStatisticsNotification": sleLldpStatisticsNotification,
       "sleLldpStatisticsCleared": sleLldpStatisticsCleared,
       "sleBridgePortSecurity": sleBridgePortSecurity,
       "sleBridgePSTable": sleBridgePSTable,
       "sleBridgePSEntry": sleBridgePSEntry,
       "sleBridgePSIndex": sleBridgePSIndex,
       "sleBridgePSStatus": sleBridgePSStatus,
       "sleBridgePSMaxCount": sleBridgePSMaxCount,
       "sleBridgePSCurrCount": sleBridgePSCurrCount,
       "sleBridgePSAgingType": sleBridgePSAgingType,
       "sleBridgePSAgingTimer": sleBridgePSAgingTimer,
       "sleBridgePSAgingStatic": sleBridgePSAgingStatic,
       "sleBridgePSViolation": sleBridgePSViolation,
       "sleBridgePSControl": sleBridgePSControl,
       "sleBridgePSControlRequest": sleBridgePSControlRequest,
       "sleBridgePSControlStatus": sleBridgePSControlStatus,
       "sleBridgePSControlTimer": sleBridgePSControlTimer,
       "sleBridgePSControlTimeStamp": sleBridgePSControlTimeStamp,
       "sleBridgePSControlReqResult": sleBridgePSControlReqResult,
       "sleBridgePSControlIndex": sleBridgePSControlIndex,
       "sleBridgePSControlPSStatus": sleBridgePSControlPSStatus,
       "sleBridgePSControlMaxCount": sleBridgePSControlMaxCount,
       "sleBridgePSControlAgingType": sleBridgePSControlAgingType,
       "sleBridgePSControlAgingTimer": sleBridgePSControlAgingTimer,
       "sleBridgePSControlAgingStatic": sleBridgePSControlAgingStatic,
       "sleBridgePScontrolViolation": sleBridgePScontrolViolation,
       "sleBridgePSNotification": sleBridgePSNotification,
       "sleBridgePSStatusChanged": sleBridgePSStatusChanged,
       "sleBridgePSMaxCountChanged": sleBridgePSMaxCountChanged,
       "sleBridgePSProfileChanged": sleBridgePSProfileChanged,
       "sleBridgePortSecurityFdb": sleBridgePortSecurityFdb,
       "sleBridgePSFdbTable": sleBridgePSFdbTable,
       "sleBridgePSFdbEntry": sleBridgePSFdbEntry,
       "sleBridgePSFdbPort": sleBridgePSFdbPort,
       "sleBridgePSFdbVid": sleBridgePSFdbVid,
       "sleBridgePSFdbMacAddress": sleBridgePSFdbMacAddress,
       "sleBridgePSFdbMode": sleBridgePSFdbMode,
       "sleBridgePSFdbElapsedTime": sleBridgePSFdbElapsedTime,
       "sleBridgePSFdbControl": sleBridgePSFdbControl,
       "sleBridgePSFdbControlRequest": sleBridgePSFdbControlRequest,
       "sleBridgePSFdbControlStatus": sleBridgePSFdbControlStatus,
       "sleBridgePSFdbControlTimer": sleBridgePSFdbControlTimer,
       "sleBridgePSFdbControlTimeStamp": sleBridgePSFdbControlTimeStamp,
       "sleBridgePSFdbControlReqResult": sleBridgePSFdbControlReqResult,
       "sleBridgePSFdbControlPort": sleBridgePSFdbControlPort,
       "sleBridgePSFdbControlVid": sleBridgePSFdbControlVid,
       "sleBridgePSFdbControlMacAddress": sleBridgePSFdbControlMacAddress,
       "sleBridgePSFdbNotification": sleBridgePSFdbNotification,
       "sleBridgePSFdbEntryCreated": sleBridgePSFdbEntryCreated,
       "sleBridgePSFdbEntryDestroyed": sleBridgePSFdbEntryDestroyed,
       "sleBridgePSFdbEntryCleared": sleBridgePSFdbEntryCleared,
       "sleBridgeFloodGuard": sleBridgeFloodGuard,
       "sleBridgeFGBase": sleBridgeFGBase,
       "sleBridgeFGBaseInfo": sleBridgeFGBaseInfo,
       "sleBridgeFGBaseCfgdEnabled": sleBridgeFGBaseCfgdEnabled,
       "sleBridgeFGBaseMfgdEnabled": sleBridgeFGBaseMfgdEnabled,
       "sleBridgeFGBaseSfgdEnabled": sleBridgeFGBaseSfgdEnabled,
       "sleBridgeFGBaseControl": sleBridgeFGBaseControl,
       "sleBridgeFGBaseControlRequest": sleBridgeFGBaseControlRequest,
       "sleBridgeFGBaseControlStatus": sleBridgeFGBaseControlStatus,
       "sleBridgeFGBaseControlTimer": sleBridgeFGBaseControlTimer,
       "sleBridgeFGBaseControlTimeStamp": sleBridgeFGBaseControlTimeStamp,
       "sleBridgeFGBaseControlReqResult": sleBridgeFGBaseControlReqResult,
       "sleBridgeFGBaseControlCfgdEnable": sleBridgeFGBaseControlCfgdEnable,
       "sleBridgeFGBaseControlSfgdEnable": sleBridgeFGBaseControlSfgdEnable,
       "sleBridgeFGBaseNotification": sleBridgeFGBaseNotification,
       "sleBridgeFGBaseCfgdStatusChanged": sleBridgeFGBaseCfgdStatusChanged,
       "sleBridgeFGBaseSfgdStatusChanged": sleBridgeFGBaseSfgdStatusChanged,
       "sleBridgeFGPort": sleBridgeFGPort,
       "sleBridgeFGPortTable": sleBridgeFGPortTable,
       "sleBridgeFGPortEntry": sleBridgeFGPortEntry,
       "sleBridgeFGPortType": sleBridgeFGPortType,
       "sleBridgeFGPortFrameType": sleBridgeFGPortFrameType,
       "sleBridgeFGPortFrame": sleBridgeFGPortFrame,
       "sleBridgeFGPortBlocked": sleBridgeFGPortBlocked,
       "sleBridgeFGPortTimer": sleBridgeFGPortTimer,
       "sleBridgeFGPortControl": sleBridgeFGPortControl,
       "sleBridgeFGPortControlRequest": sleBridgeFGPortControlRequest,
       "sleBridgeFGPortControlStatus": sleBridgeFGPortControlStatus,
       "sleBridgeFGPortControlTimer": sleBridgeFGPortControlTimer,
       "sleBridgeFGPortControlTimeStamp": sleBridgeFGPortControlTimeStamp,
       "sleBridgeFGPortControlReqResult": sleBridgeFGPortControlReqResult,
       "sleBridgeFGPortControlIndex": sleBridgeFGPortControlIndex,
       "sleBridgeFGPortControlType": sleBridgeFGPortControlType,
       "sleBridgeFGPortControlFrameType": sleBridgeFGPortControlFrameType,
       "sleBridgeFGPortControlFrame": sleBridgeFGPortControlFrame,
       "sleBridgeFGPortControlSetTimer": sleBridgeFGPortControlSetTimer,
       "sleBridgeFGPortControlBlock": sleBridgeFGPortControlBlock,
       "sleBridgeFGPortNotification": sleBridgeFGPortNotification,
       "sleBridgeFGPortProfileChanged": sleBridgeFGPortProfileChanged,
       "sleBridgeFGPortUnblockChanged": sleBridgeFGPortUnblockChanged,
       "sleBridgeVlanTranslation": sleBridgeVlanTranslation,
       "sleBridgeVTTable": sleBridgeVTTable,
       "sleBridgeVTEntry": sleBridgeVTEntry,
       "sleBridgeVTServiceId": sleBridgeVTServiceId,
       "sleBridgeVTSubscriberId": sleBridgeVTSubscriberId,
       "sleBridgeVTRuleTable": sleBridgeVTRuleTable,
       "sleBridgeVTRuleEntry": sleBridgeVTRuleEntry,
       "sleBridgeVTRuleMac": sleBridgeVTRuleMac,
       "sleBridgeVTRuleVid": sleBridgeVTRuleVid,
       "sleBridgeVTRuleRDirVid": sleBridgeVTRuleRDirVid,
       "sleBridgeVTRuleRDirPort": sleBridgeVTRuleRDirPort,
       "sleBridgeVTRuleStatus": sleBridgeVTRuleStatus,
       "sleBridgeVTControl": sleBridgeVTControl,
       "sleBridgeVTControlRequest": sleBridgeVTControlRequest,
       "sleBridgeVTControlStatus": sleBridgeVTControlStatus,
       "sleBridgeVTControlTimer": sleBridgeVTControlTimer,
       "sleBridgeVTControlTimeStamp": sleBridgeVTControlTimeStamp,
       "sleBridgeVTControlReqResult": sleBridgeVTControlReqResult,
       "sleBridgeVTControlServerId": sleBridgeVTControlServerId,
       "sleBridgeVTControlClientId": sleBridgeVTControlClientId,
       "sleBridgeVTNotification": sleBridgeVTNotification,
       "sleBridgeVTSet": sleBridgeVTSet,
       "sleBridgeVTClear": sleBridgeVTClear,
       "sleBridgeInBoundVTTable": sleBridgeInBoundVTTable,
       "sleBridgeInBoundVTEntry": sleBridgeInBoundVTEntry,
       "sleBridgeInBoundVTPortIndex": sleBridgeInBoundVTPortIndex,
       "sleBridgeInBoundVTVlanIndex": sleBridgeInBoundVTVlanIndex,
       "sleBridgeInBoundVTNewVid": sleBridgeInBoundVTNewVid,
       "sleBridgeInBoundVTOperStatus": sleBridgeInBoundVTOperStatus,
       "sleBridgeInBoundVTControl": sleBridgeInBoundVTControl,
       "sleBridgeInBoundVTControlRequest": sleBridgeInBoundVTControlRequest,
       "sleBridgeInBoundVTControlStatus": sleBridgeInBoundVTControlStatus,
       "sleBridgeInBoundVTControlTimer": sleBridgeInBoundVTControlTimer,
       "sleBridgeInBoundVTControlTimeStamp": sleBridgeInBoundVTControlTimeStamp,
       "sleBridgeInBoundVTControlReqResult": sleBridgeInBoundVTControlReqResult,
       "sleBridgeInBoundVTControlPortIndex": sleBridgeInBoundVTControlPortIndex,
       "sleBridgeInBoundVTControlVlanIndex": sleBridgeInBoundVTControlVlanIndex,
       "sleBridgeInBoundVTControlNewVid": sleBridgeInBoundVTControlNewVid,
       "sleBridgeInBoundVTNotification": sleBridgeInBoundVTNotification,
       "sleBridgeInBoundVTSet": sleBridgeInBoundVTSet,
       "sleBridgeInBoundVTClear": sleBridgeInBoundVTClear,
       "sleBridgeOutBoundVTTable": sleBridgeOutBoundVTTable,
       "sleBridgeOutBoundVTEntry": sleBridgeOutBoundVTEntry,
       "sleBridgeOutBoundVTPortIndex": sleBridgeOutBoundVTPortIndex,
       "sleBridgeOutBoundVTVlanIndex": sleBridgeOutBoundVTVlanIndex,
       "sleBridgeOutBoundVTNewVid": sleBridgeOutBoundVTNewVid,
       "sleBridgeOutBoundVTOperStatus": sleBridgeOutBoundVTOperStatus,
       "sleBridgeOutBoundVTControl": sleBridgeOutBoundVTControl,
       "sleBridgeOutBoundVTControlRequest": sleBridgeOutBoundVTControlRequest,
       "sleBridgeOutBoundVTControlStatus": sleBridgeOutBoundVTControlStatus,
       "sleBridgeOutBoundVTControlTimer": sleBridgeOutBoundVTControlTimer,
       "sleBridgeOutBoundVTControlTimeStamp": sleBridgeOutBoundVTControlTimeStamp,
       "sleBridgeOutBoundVTControlReqResult": sleBridgeOutBoundVTControlReqResult,
       "sleBridgeOutBoundVTControlPortIndex": sleBridgeOutBoundVTControlPortIndex,
       "sleBridgeOutBoundVTControlVlanIndex": sleBridgeOutBoundVTControlVlanIndex,
       "sleBridgeOutBoundVTControlNewVid": sleBridgeOutBoundVTControlNewVid,
       "sleBridgeOutBoundVTNotification": sleBridgeOutBoundVTNotification,
       "sleBridgeOutBoundVTSet": sleBridgeOutBoundVTSet,
       "sleBridgeOutBoundVTClear": sleBridgeOutBoundVTClear,
       "sleBridgeGarp": sleBridgeGarp,
       "sleBridgeGarpBase": sleBridgeGarpBase,
       "sleBridgeGarpBaseInfo": sleBridgeGarpBaseInfo,
       "sleBridgeGvrpStatus": sleBridgeGvrpStatus,
       "sleBridgeGmrpStatus": sleBridgeGmrpStatus,
       "sleBridgeGarpTimerJoin": sleBridgeGarpTimerJoin,
       "sleBridgeGarpTimerLeave": sleBridgeGarpTimerLeave,
       "sleBridgeGarpTimerLeaveAll": sleBridgeGarpTimerLeaveAll,
       "sleBridgeGarpBaseControl": sleBridgeGarpBaseControl,
       "sleBridgeGarpBaseControlRequest": sleBridgeGarpBaseControlRequest,
       "sleBridgeGarpBaseControlStatus": sleBridgeGarpBaseControlStatus,
       "sleBridgeGarpBaseControlTimer": sleBridgeGarpBaseControlTimer,
       "sleBridgeGarpBaseControlTimeStamp": sleBridgeGarpBaseControlTimeStamp,
       "sleBridgeGarpBaseControlReqResult": sleBridgeGarpBaseControlReqResult,
       "sleBridgeGarpBaseControlGvrpStatus": sleBridgeGarpBaseControlGvrpStatus,
       "sleBridgeGarpBaseControlGmrpStatus": sleBridgeGarpBaseControlGmrpStatus,
       "sleBridgeGarpBaseControlTimerJoin": sleBridgeGarpBaseControlTimerJoin,
       "sleBridgeGarpBaseControlTimerLeave": sleBridgeGarpBaseControlTimerLeave,
       "sleBridgeGarpBaseControlTimerLeaveAll": sleBridgeGarpBaseControlTimerLeaveAll,
       "sleBridgeGarpBaseNotification": sleBridgeGarpBaseNotification,
       "sleBridgeGarpStatusChanged": sleBridgeGarpStatusChanged,
       "sleBridgeGarpTimerChanged": sleBridgeGarpTimerChanged,
       "sleBridgeGarpApplication": sleBridgeGarpApplication,
       "sleBridgeGarpAppPortTable": sleBridgeGarpAppPortTable,
       "sleBridgeGarpAppPortEntry": sleBridgeGarpAppPortEntry,
       "sleBridgeGarpAppPortIndex": sleBridgeGarpAppPortIndex,
       "sleBridgeGarpAppPortType": sleBridgeGarpAppPortType,
       "sleBridgeGarpAppPortStatus": sleBridgeGarpAppPortStatus,
       "sleBridgeGarpAppPortFailedRegistrations": sleBridgeGarpAppPortFailedRegistrations,
       "sleBridgeGarpAppPortLastPduOrigin": sleBridgeGarpAppPortLastPduOrigin,
       "sleBridgeGarpAppPortRegistration": sleBridgeGarpAppPortRegistration,
       "sleBridgeGarpAppPortApplicant": sleBridgeGarpAppPortApplicant,
       "sleBridgeGarpAppPortFwdAll": sleBridgeGarpAppPortFwdAll,
       "sleBridgeGarpAppPortTimerJoin": sleBridgeGarpAppPortTimerJoin,
       "sleBridgeGarpAppPortTimerLeave": sleBridgeGarpAppPortTimerLeave,
       "sleBridgeGarpAppPortTimerLeaveAll": sleBridgeGarpAppPortTimerLeaveAll,
       "sleBridgeGarpAppPortControl": sleBridgeGarpAppPortControl,
       "sleBridgeGarpAppPortControlRequest": sleBridgeGarpAppPortControlRequest,
       "sleBridgeGarpAppPortControlStatus": sleBridgeGarpAppPortControlStatus,
       "sleBridgeGarpAppPortControlTimer": sleBridgeGarpAppPortControlTimer,
       "sleBridgeGarpAppPortControlTimeStamp": sleBridgeGarpAppPortControlTimeStamp,
       "sleBridgeGarpAppPortControlReqResult": sleBridgeGarpAppPortControlReqResult,
       "sleBridgeGarpAppPortControlIndex": sleBridgeGarpAppPortControlIndex,
       "sleBridgeGarpAppPortControlType": sleBridgeGarpAppPortControlType,
       "sleBridgeGarpAppPortControlPortStatus": sleBridgeGarpAppPortControlPortStatus,
       "sleBridgeGarpAppPortControlRegistration": sleBridgeGarpAppPortControlRegistration,
       "sleBridgeGarpAppPortControlApplicant": sleBridgeGarpAppPortControlApplicant,
       "sleBridgeGarpAppPortControlFwdAll": sleBridgeGarpAppPortControlFwdAll,
       "sleBridgeGarpAppPortControlTimerJoin": sleBridgeGarpAppPortControlTimerJoin,
       "sleBridgeGarpAppPortControlTimerLeave": sleBridgeGarpAppPortControlTimerLeave,
       "sleBridgeGarpAppPortControlTimerLeaveAll": sleBridgeGarpAppPortControlTimerLeaveAll,
       "sleBridgeGarpAppPortNotification": sleBridgeGarpAppPortNotification,
       "sleBridgeGarpAppPortStatusChanged": sleBridgeGarpAppPortStatusChanged,
       "sleBridgeGarpAppPortProfileChanged": sleBridgeGarpAppPortProfileChanged,
       "sleBridgeGarpStats": sleBridgeGarpStats,
       "sleBridgeGarpStatsTable": sleBridgeGarpStatsTable,
       "sleBridgeGarpStatsEntry": sleBridgeGarpStatsEntry,
       "sleBridgeGarpStatsJoinEmptyReceived": sleBridgeGarpStatsJoinEmptyReceived,
       "sleBridgeGarpStatsJoinInReceived": sleBridgeGarpStatsJoinInReceived,
       "sleBridgeGarpStatsEmptyReceived": sleBridgeGarpStatsEmptyReceived,
       "sleBridgeGarpStatsLeaveInReceived": sleBridgeGarpStatsLeaveInReceived,
       "sleBridgeGarpStatsLeaveEmptyReceived": sleBridgeGarpStatsLeaveEmptyReceived,
       "sleBridgeGarpStatsLeaveAllReceived": sleBridgeGarpStatsLeaveAllReceived,
       "sleBridgeGarpStatsJoinEmptyTransmitted": sleBridgeGarpStatsJoinEmptyTransmitted,
       "sleBridgeGarpStatsJoinInTransmitted": sleBridgeGarpStatsJoinInTransmitted,
       "sleBridgeGarpStatsEmptyTransmitted": sleBridgeGarpStatsEmptyTransmitted,
       "sleBridgeGarpStatsLeaveInTransmitted": sleBridgeGarpStatsLeaveInTransmitted,
       "sleBridgeGarpStatsLeaveEmptyTransmitted": sleBridgeGarpStatsLeaveEmptyTransmitted,
       "sleBridgeGarpStatsLeaveAllTransmitted": sleBridgeGarpStatsLeaveAllTransmitted,
       "sleBridgeGarpStatsControl": sleBridgeGarpStatsControl,
       "sleBridgeGarpStatsControlRequest": sleBridgeGarpStatsControlRequest,
       "sleBridgeGarpStatstControlStatus": sleBridgeGarpStatstControlStatus,
       "sleBridgeGarpStatsControlTimer": sleBridgeGarpStatsControlTimer,
       "sleBridgeGarpStatsControlTimeStamp": sleBridgeGarpStatsControlTimeStamp,
       "sleBridgeGarpStatsControlReqResult": sleBridgeGarpStatsControlReqResult,
       "sleBridgeGarpStatsControlIndex": sleBridgeGarpStatsControlIndex,
       "sleBridgeGarpStatsControlType": sleBridgeGarpStatsControlType,
       "sleBridgeGarpStatsNotification": sleBridgeGarpStatsNotification,
       "sleBridgeGarpStatisticsCleared": sleBridgeGarpStatisticsCleared,
       "sleBridgeGmrpStatic": sleBridgeGmrpStatic,
       "sleBridgeGmrpStaticTable": sleBridgeGmrpStaticTable,
       "sleBridgeGmrpStaticEntry": sleBridgeGmrpStaticEntry,
       "sleBridgeGmrpStaticVid": sleBridgeGmrpStaticVid,
       "sleBridgeGmrpStaticPort": sleBridgeGmrpStaticPort,
       "sleBridgeGmrpStaticGmac": sleBridgeGmrpStaticGmac,
       "sleBridgeGmrpStaticControl": sleBridgeGmrpStaticControl,
       "sleBridgeGmrpStaticControlRequest": sleBridgeGmrpStaticControlRequest,
       "sleBridgeGmrpStaticControlStatus": sleBridgeGmrpStaticControlStatus,
       "sleBridgeGmrpStaticControlTimer": sleBridgeGmrpStaticControlTimer,
       "sleBridgeGmrpStaticControlTimeStamp": sleBridgeGmrpStaticControlTimeStamp,
       "sleBridgeGmrpStaticControlReqResult": sleBridgeGmrpStaticControlReqResult,
       "sleBridgeGmrpStaticControlVid": sleBridgeGmrpStaticControlVid,
       "sleBridgeGmrpStaticControlPort": sleBridgeGmrpStaticControlPort,
       "sleBridgeGmrpStaticControlGmac": sleBridgeGmrpStaticControlGmac,
       "sleBridgeGmrpStaticNotification": sleBridgeGmrpStaticNotification,
       "sleBridgeGmrpStaticAdded": sleBridgeGmrpStaticAdded,
       "sleBridgeGmrpStaticDeleted": sleBridgeGmrpStaticDeleted,
       "sleVlanTag": sleVlanTag,
       "sleVlanInboundTag": sleVlanInboundTag,
       "sleVlanInboundTagTable": sleVlanInboundTagTable,
       "sleVlanInboundTagEntry": sleVlanInboundTagEntry,
       "sleVlanInboundTagPortIndex": sleVlanInboundTagPortIndex,
       "sleVlanInboundTagVlanIndex": sleVlanInboundTagVlanIndex,
       "sleVlanInboundTagOuterVid": sleVlanInboundTagOuterVid,
       "sleVlanInboundTagOperStatus": sleVlanInboundTagOperStatus,
       "sleVlanInboundTagVlanPriority": sleVlanInboundTagVlanPriority,
       "sleVlanInboundTagOuterVlanPriority": sleVlanInboundTagOuterVlanPriority,
       "sleVlanInboundTagControl": sleVlanInboundTagControl,
       "sleVlanInboundTagControlRequest": sleVlanInboundTagControlRequest,
       "sleVlanInboundTagControlStatus": sleVlanInboundTagControlStatus,
       "sleVlanInboundTagControlTimer": sleVlanInboundTagControlTimer,
       "sleVlanInboundTagControlTimeStamp": sleVlanInboundTagControlTimeStamp,
       "sleVlanInboundTagControlReqResult": sleVlanInboundTagControlReqResult,
       "sleVlanInboundTagControlPortIndex": sleVlanInboundTagControlPortIndex,
       "sleVlanInboundTagControlVlanIndex": sleVlanInboundTagControlVlanIndex,
       "sleVlanInboundTagControlOuterVid": sleVlanInboundTagControlOuterVid,
       "sleVlanInboundTagControlVlanPriority": sleVlanInboundTagControlVlanPriority,
       "sleVlanInboundTagControlOuterVlanPriority": sleVlanInboundTagControlOuterVlanPriority,
       "sleVlanInboundTagNotification": sleVlanInboundTagNotification,
       "sleVlanInboundTagChanged": sleVlanInboundTagChanged,
       "sleVlanInboundTagCleared": sleVlanInboundTagCleared,
       "sleVlanOutboundTag": sleVlanOutboundTag,
       "sleVlanOutboundTagTable": sleVlanOutboundTagTable,
       "sleVlanOutboundTagEntry": sleVlanOutboundTagEntry,
       "sleVlanOutboundTagPortIndex": sleVlanOutboundTagPortIndex,
       "sleVlanOutboundTagVlanIndex": sleVlanOutboundTagVlanIndex,
       "sleVlanOutboundTagOperStatus": sleVlanOutboundTagOperStatus,
       "sleVlanOutboundTagControl": sleVlanOutboundTagControl,
       "sleVlanOutboundTagControlRequest": sleVlanOutboundTagControlRequest,
       "sleVlanOutboundTagControlStatus": sleVlanOutboundTagControlStatus,
       "sleVlanOutboundTagControlTimer": sleVlanOutboundTagControlTimer,
       "sleVlanOutboundTagControlTimeStamp": sleVlanOutboundTagControlTimeStamp,
       "sleVlanOutboundTagControlReqResult": sleVlanOutboundTagControlReqResult,
       "sleVlanOutboundTagControlPortIndex": sleVlanOutboundTagControlPortIndex,
       "sleVlanOutboundTagControlOuterVid": sleVlanOutboundTagControlOuterVid,
       "sleVlanOutboundTagNotification": sleVlanOutboundTagNotification,
       "sleVlanOutboundTagSet": sleVlanOutboundTagSet,
       "sleVlanOutboundTagClear": sleVlanOutboundTagClear,
       "sleVlanRangeInboundTag": sleVlanRangeInboundTag,
       "sleVlanRangeInboundTagTable": sleVlanRangeInboundTagTable,
       "sleVlanRangeInboundTagEntry": sleVlanRangeInboundTagEntry,
       "sleVlanRangeInboundTagPortIndex": sleVlanRangeInboundTagPortIndex,
       "sleVlanRangeInboundTagMinVlanIndex": sleVlanRangeInboundTagMinVlanIndex,
       "sleVlanRangeInboundTagMaxVlanIndex": sleVlanRangeInboundTagMaxVlanIndex,
       "sleVlanRangeInboundTagOuterVid": sleVlanRangeInboundTagOuterVid,
       "sleVlanRangeInboundTagOperStatus": sleVlanRangeInboundTagOperStatus,
       "sleVlanRangeInboundTagControl": sleVlanRangeInboundTagControl,
       "sleVlanRangeInboundTagControlRequest": sleVlanRangeInboundTagControlRequest,
       "sleVlanRangeInboundTagControlStatus": sleVlanRangeInboundTagControlStatus,
       "sleVlanRangeInboundTagControlTimer": sleVlanRangeInboundTagControlTimer,
       "sleVlanRangeInboundTagControlTimeStamp": sleVlanRangeInboundTagControlTimeStamp,
       "sleVlanRangeInboundTagControlReqResult": sleVlanRangeInboundTagControlReqResult,
       "sleVlanRangeInboundTagControlPortIndex": sleVlanRangeInboundTagControlPortIndex,
       "sleVlanRangeInboundTagControlMinVlanIndex": sleVlanRangeInboundTagControlMinVlanIndex,
       "sleVlanRangeInboundTagControlMaxVlanIndex": sleVlanRangeInboundTagControlMaxVlanIndex,
       "sleVlanRangeInboundTagControlOuterVid": sleVlanRangeInboundTagControlOuterVid,
       "sleVlanRangeInboundTagNotification": sleVlanRangeInboundTagNotification,
       "sleVlanRangeInboundTagChanged": sleVlanRangeInboundTagChanged,
       "sleVlanRangeInboundTagCleared": sleVlanRangeInboundTagCleared,
       "sleVlanProtoId": sleVlanProtoId,
       "sleVlanProtoIdTable": sleVlanProtoIdTable,
       "sleVlanProtoIdEntry": sleVlanProtoIdEntry,
       "sleVlanProtoIdVid": sleVlanProtoIdVid,
       "sleVlanProtoIdOuterProtoId": sleVlanProtoIdOuterProtoId,
       "sleVlanProtoIdControl": sleVlanProtoIdControl,
       "sleVlanProtoIdControlRequest": sleVlanProtoIdControlRequest,
       "sleVlanProtoIdControlStatus": sleVlanProtoIdControlStatus,
       "sleVlanProtoIdControlTimer": sleVlanProtoIdControlTimer,
       "sleVlanProtoIdControlTimeStamp": sleVlanProtoIdControlTimeStamp,
       "sleVlanProtoIdControlReqResult": sleVlanProtoIdControlReqResult,
       "sleVlanProtoIdControlVid": sleVlanProtoIdControlVid,
       "sleVlanProtoIdControlOuterProtoId": sleVlanProtoIdControlOuterProtoId,
       "sleVlanProtoIdNotification": sleVlanProtoIdNotification,
       "sleVlanProtoIdOuterProtoIdChanged": sleVlanProtoIdOuterProtoIdChanged,
       "sleVlanMapping": sleVlanMapping,
       "sleVlanMappingTable": sleVlanMappingTable,
       "sleVlanMappingEntry": sleVlanMappingEntry,
       "sleVlanMappingIndex": sleVlanMappingIndex,
       "sleVlanMappingPortId": sleVlanMappingPortId,
       "sleVlanMappingOriVlanId": sleVlanMappingOriVlanId,
       "sleVlanMappingTransVlanId": sleVlanMappingTransVlanId,
       "sleVlanMappingMode": sleVlanMappingMode,
       "sleVlanMappingMatchCos": sleVlanMappingMatchCos,
       "sleVlanMappingMatchDscp": sleVlanMappingMatchDscp,
       "sleVlanMappingMatchEthType": sleVlanMappingMatchEthType,
       "sleVlanMappingMatchIPPrecedence": sleVlanMappingMatchIPPrecedence,
       "sleVlanMappingMatchTos": sleVlanMappingMatchTos,
       "sleVlanMappingRateLimit": sleVlanMappingRateLimit,
       "sleVlanMappingCos": sleVlanMappingCos,
       "sleVlanMappingDscp": sleVlanMappingDscp,
       "sleVlanMappingControl": sleVlanMappingControl,
       "sleVlanMappingControlRequest": sleVlanMappingControlRequest,
       "sleVlanMappingControlStatus": sleVlanMappingControlStatus,
       "sleVlanMappingControlTimer": sleVlanMappingControlTimer,
       "sleVlanMappingControlTimeStamp": sleVlanMappingControlTimeStamp,
       "sleVlanMappingControlReqResult": sleVlanMappingControlReqResult,
       "sleVlanMappingControlIndex": sleVlanMappingControlIndex,
       "sleVlanMappingControlPortId": sleVlanMappingControlPortId,
       "sleVlanMappingControlOriVlanId": sleVlanMappingControlOriVlanId,
       "sleVlanMappingControlTransVlanID": sleVlanMappingControlTransVlanID,
       "sleVlanMappingControlMode": sleVlanMappingControlMode,
       "sleVlanMappingControlMatchCos": sleVlanMappingControlMatchCos,
       "sleVlanMappingControlMatchDscp": sleVlanMappingControlMatchDscp,
       "sleVlanMappingControlMatchEthType": sleVlanMappingControlMatchEthType,
       "sleVlanMappingControlMatchIPPrecedence": sleVlanMappingControlMatchIPPrecedence,
       "sleVlanMappingControlMatchTos": sleVlanMappingControlMatchTos,
       "sleVlanMappingControlRateLimit": sleVlanMappingControlRateLimit,
       "sleVlanMappingControlCos": sleVlanMappingControlCos,
       "sleVlanMappingControlDscp": sleVlanMappingControlDscp,
       "sleVlanMappingNotification": sleVlanMappingNotification,
       "sleVlanMappingCreated": sleVlanMappingCreated,
       "sleVlanMappingDeleted": sleVlanMappingDeleted,
       "slePowerInline": slePowerInline,
       "slePowerInlineTable": slePowerInlineTable,
       "slePowerInlineEntry": slePowerInlineEntry,
       "slePowerInlinePortIndex": slePowerInlinePortIndex,
       "slePowerInlineAdminStatus": slePowerInlineAdminStatus,
       "slePowerInlinePortStatus": slePowerInlinePortStatus,
       "slePowerInlineDetectionStatus": slePowerInlineDetectionStatus,
       "slePowerInlinePortClass": slePowerInlinePortClass,
       "slePowerInlinePortMaxPow": slePowerInlinePortMaxPow,
       "slePowerInlinePortLegacy": slePowerInlinePortLegacy,
       "slePowerInlinePortPriority": slePowerInlinePortPriority,
       "slePowerInlinePortPower": slePowerInlinePortPower,
       "slePowerInlinePortCurrent": slePowerInlinePortCurrent,
       "slePowerInlinePortVoltage": slePowerInlinePortVoltage,
       "slePowerInlinePortTemperture": slePowerInlinePortTemperture,
       "slePowerInlineControl": slePowerInlineControl,
       "slePowerInlineControlRequest": slePowerInlineControlRequest,
       "slePowerInlineControlStatus": slePowerInlineControlStatus,
       "slePowerInlineControlTimer": slePowerInlineControlTimer,
       "slePowerInlineControlTimeStamp": slePowerInlineControlTimeStamp,
       "slePowerInlineControlReqResult": slePowerInlineControlReqResult,
       "slePowerInlineControlPortIndex": slePowerInlineControlPortIndex,
       "slePowerInlineControlAdminStatus": slePowerInlineControlAdminStatus,
       "slePowerInlineControlPortStatus": slePowerInlineControlPortStatus,
       "slePowerInlineControlPortClass": slePowerInlineControlPortClass,
       "slePowerInlineControlPortMaxPower": slePowerInlineControlPortMaxPower,
       "slePowerInlineControlPortLegacy": slePowerInlineControlPortLegacy,
       "slePowerInlineControlPriority": slePowerInlineControlPriority,
       "slePowerInlineNotification": slePowerInlineNotification,
       "slePowerInlineEnableChanged": slePowerInlineEnableChanged,
       "slePowerInlineDisableChanged": slePowerInlineDisableChanged,
       "slePowerInlineResetChanged": slePowerInlineResetChanged,
       "slePowerInlineLegacyChanged": slePowerInlineLegacyChanged,
       "slePowerInlinePriorityChanged": slePowerInlinePriorityChanged,
       "slePowerInlineClassChanged": slePowerInlineClassChanged,
       "slePowerInlinePowerChanged": slePowerInlinePowerChanged,
       "sleMfdb": sleMfdb,
       "sleMfdbTable": sleMfdbTable,
       "sleMfdbEntry": sleMfdbEntry,
       "sleMfdbMacAddress": sleMfdbMacAddress,
       "sleMfdbEntryPermission": sleMfdbEntryPermission,
       "sleMfdbVlanIndex": sleMfdbVlanIndex,
       "sleMfdbPorts": sleMfdbPorts,
       "sleMfdbControl": sleMfdbControl,
       "sleMfdbControlRequest": sleMfdbControlRequest,
       "sleMfdbControlStatus": sleMfdbControlStatus,
       "sleMfdbControlTimer": sleMfdbControlTimer,
       "sleMfdbControlTimeStamp": sleMfdbControlTimeStamp,
       "sleMfdbControlReqResult": sleMfdbControlReqResult,
       "sleMfdbControlMacAddress": sleMfdbControlMacAddress,
       "sleMfdbControlEntryPermission": sleMfdbControlEntryPermission,
       "sleMfdbControlVlanIndex": sleMfdbControlVlanIndex,
       "sleMfdbControlPorts": sleMfdbControlPorts,
       "sleMfdbNotification": sleMfdbNotification,
       "sleMfdbEntryCreated": sleMfdbEntryCreated,
       "sleMfdbEntryDestoryed": sleMfdbEntryDestoryed,
       "sleMfdbEntryPermissionChanged": sleMfdbEntryPermissionChanged,
       "sleMfdbEntryTableCleared": sleMfdbEntryTableCleared,
       "sleLldpMed": sleLldpMed,
       "sleLldpMedNetworkPolicyProfile": sleLldpMedNetworkPolicyProfile,
       "sleLldpMedNetworkPolicyProfileTable": sleLldpMedNetworkPolicyProfileTable,
       "sleLldpMedNetworkPolicyProfileEntry": sleLldpMedNetworkPolicyProfileEntry,
       "sleLldpMedNetworkPolicyProfileIndex": sleLldpMedNetworkPolicyProfileIndex,
       "sleLldpMedNetworkPolicyProfileName": sleLldpMedNetworkPolicyProfileName,
       "sleLldpMedNetworkPolicyProfileControl": sleLldpMedNetworkPolicyProfileControl,
       "sleLldpMedNetworkPolicyProfileControlRequest": sleLldpMedNetworkPolicyProfileControlRequest,
       "sleLldpMedNetworkPolicyProfileControlStatus": sleLldpMedNetworkPolicyProfileControlStatus,
       "sleLldpMedNetworkPolicyProfileControlTimer": sleLldpMedNetworkPolicyProfileControlTimer,
       "sleLldpMedNetworkPolicyProfileControlTimeStamp": sleLldpMedNetworkPolicyProfileControlTimeStamp,
       "sleLldpMedNetworkPolicyProfileControlReqResult": sleLldpMedNetworkPolicyProfileControlReqResult,
       "sleLldpMedNetworkPolicyProfileControlIndex": sleLldpMedNetworkPolicyProfileControlIndex,
       "sleLldpMedNetworkPolicyProfileControlName": sleLldpMedNetworkPolicyProfileControlName,
       "sleLldpMedNetworkPolicyProfileNotifications": sleLldpMedNetworkPolicyProfileNotifications,
       "sleLldpMedNetworkPolicyProfileCreated": sleLldpMedNetworkPolicyProfileCreated,
       "sleLldpMedNetworkPolicyProfileDestroyed": sleLldpMedNetworkPolicyProfileDestroyed,
       "sleLldpMedNetworkPolicyProfileCleared": sleLldpMedNetworkPolicyProfileCleared,
       "sleLldpMedNetworkPolicyProfilePolicy": sleLldpMedNetworkPolicyProfilePolicy,
       "sleLldpMedNetworkPolicyProfilePolicyTable": sleLldpMedNetworkPolicyProfilePolicyTable,
       "sleLldpMedNetworkPolicyProfilePolicyEntry": sleLldpMedNetworkPolicyProfilePolicyEntry,
       "sleLldpMedNetworkPolicyProfilePolicyAppType": sleLldpMedNetworkPolicyProfilePolicyAppType,
       "sleLldpMedNetworkPolicyProfilePolicyVlanId": sleLldpMedNetworkPolicyProfilePolicyVlanId,
       "sleLldpMedNetworkPolicyProfilePolicyPriority": sleLldpMedNetworkPolicyProfilePolicyPriority,
       "sleLldpMedNetworkPolicyProfilePolicyDscp": sleLldpMedNetworkPolicyProfilePolicyDscp,
       "sleLldpMedNetworkPolicyProfilePolicyUnknown": sleLldpMedNetworkPolicyProfilePolicyUnknown,
       "sleLldpMedNetworkPolicyProfilePolicyControl": sleLldpMedNetworkPolicyProfilePolicyControl,
       "sleLldpMedNetworkPolicyProfilePolicyControlRequest": sleLldpMedNetworkPolicyProfilePolicyControlRequest,
       "sleLldpMedNetworkPolicyProfilePolicyControlStatus": sleLldpMedNetworkPolicyProfilePolicyControlStatus,
       "sleLldpMedNetworkPolicyProfilePolicyControlTimer": sleLldpMedNetworkPolicyProfilePolicyControlTimer,
       "sleLldpMedNetworkPolicyProfilePolicyControlTimeStamp": sleLldpMedNetworkPolicyProfilePolicyControlTimeStamp,
       "sleLldpMedNetworkPolicyProfilePolicyControlReqResult": sleLldpMedNetworkPolicyProfilePolicyControlReqResult,
       "sleLldpMedNetworkPolicyProfilePolicyControlProfileIndex": sleLldpMedNetworkPolicyProfilePolicyControlProfileIndex,
       "sleLldpMedNetworkPolicyProfilePolicyControlAppType": sleLldpMedNetworkPolicyProfilePolicyControlAppType,
       "sleLldpMedNetworkPolicyProfilePolicyControlVlanId": sleLldpMedNetworkPolicyProfilePolicyControlVlanId,
       "sleLldpMedNetworkPolicyProfilePolicyControlPriority": sleLldpMedNetworkPolicyProfilePolicyControlPriority,
       "sleLldpMedNetworkPolicyProfilePolicyControlDscp": sleLldpMedNetworkPolicyProfilePolicyControlDscp,
       "sleLldpMedNetworkPolicyProfilePolicyControlUnknown": sleLldpMedNetworkPolicyProfilePolicyControlUnknown,
       "sleLldpMedNetworkPolicyProfilePolicyNotifications": sleLldpMedNetworkPolicyProfilePolicyNotifications,
       "sleLldpMedNetworkPolicyProfilePolicyChanged": sleLldpMedNetworkPolicyProfilePolicyChanged,
       "sleLldpMedNetworkPolicyProfilePolicyDeleted": sleLldpMedNetworkPolicyProfilePolicyDeleted,
       "sleLldpMedRemote": sleLldpMedRemote,
       "sleLldpMedRemoteNetworkPolicyTable": sleLldpMedRemoteNetworkPolicyTable,
       "sleLldpMedRemoteNetworkPolicyEntry": sleLldpMedRemoteNetworkPolicyEntry,
       "sleLldpMedRemoteNetworkPolicyAppType": sleLldpMedRemoteNetworkPolicyAppType,
       "sleLldpMedRemoteNetworkPolicyVlanId": sleLldpMedRemoteNetworkPolicyVlanId,
       "sleLldpMedRemoteNetworkPolicyPriority": sleLldpMedRemoteNetworkPolicyPriority,
       "sleLldpMedRemoteNetworkPolicyDscp": sleLldpMedRemoteNetworkPolicyDscp,
       "sleLldpMedRemoteNetworkPolicyUnknown": sleLldpMedRemoteNetworkPolicyUnknown,
       "sleLldpMedRemoteNetworkPolicyTagged": sleLldpMedRemoteNetworkPolicyTagged,
       "sleLldpMedRemoteLocationTable": sleLldpMedRemoteLocationTable,
       "sleLldpMedRemoteLocationEntry": sleLldpMedRemoteLocationEntry,
       "sleLldpMedRemoteLocationSubType": sleLldpMedRemoteLocationSubType,
       "sleLldpMedRemoteLocationInfo": sleLldpMedRemoteLocationInfo,
       "sleLldpMedRemoteInventoryTable": sleLldpMedRemoteInventoryTable,
       "sleLldpMedRemoteInventoryEntry": sleLldpMedRemoteInventoryEntry,
       "sleLldpMedRemoteHardwareRev": sleLldpMedRemoteHardwareRev,
       "sleLldpMedRemoteFirmwareWRev": sleLldpMedRemoteFirmwareWRev,
       "sleLldpMedRemoteSoftwareRev": sleLldpMedRemoteSoftwareRev,
       "sleLldpMedRemoteSerialNum": sleLldpMedRemoteSerialNum,
       "sleLldpMedRemoteMfgName": sleLldpMedRemoteMfgName,
       "sleLldpMedRemoteModelName": sleLldpMedRemoteModelName,
       "sleLldpMedRemoteAssetID": sleLldpMedRemoteAssetID,
       "sleBridgeInterface": sleBridgeInterface,
       "sleBridgeInterfaceTable": sleBridgeInterfaceTable,
       "sleBridgeInterfaceEntry": sleBridgeInterfaceEntry,
       "sleBridgeInterfaceIndex": sleBridgeInterfaceIndex,
       "sleBridgeInterfaceName": sleBridgeInterfaceName,
       "sleBridgeInterfaceType": sleBridgeInterfaceType,
       "sleBridgeInterfaceMode": sleBridgeInterfaceMode,
       "sleBridgeInterfaceDefaultVlan": sleBridgeInterfaceDefaultVlan,
       "sleBridgeInterfacePvid": sleBridgeInterfacePvid,
       "sleBridgeInterfaceIngressFilter": sleBridgeInterfaceIngressFilter,
       "sleBridgeInterfaceAllowedVlanFlags": sleBridgeInterfaceAllowedVlanFlags,
       "sleBridgeInterfaceAllowedVlan": sleBridgeInterfaceAllowedVlan,
       "sleBridgeInterfaceNativeVlan": sleBridgeInterfaceNativeVlan,
       "sleBridgeInterfaceChannelGroupAggrId": sleBridgeInterfaceChannelGroupAggrId,
       "sleBridgeInterfaceChannelGroupMode": sleBridgeInterfaceChannelGroupMode,
       "sleBridgeInterfaceChannelGroupState": sleBridgeInterfaceChannelGroupState,
       "sleBridgeInterfaceChannelGroupLacpAggrMode": sleBridgeInterfaceChannelGroupLacpAggrMode,
       "sleBridgeInterfaceChannelGroupAdminKey": sleBridgeInterfaceChannelGroupAdminKey,
       "sleBridgeInterfaceChannelGroupAggrType": sleBridgeInterfaceChannelGroupAggrType,
       "sleBridgeInterfaceChannelGroupPriority": sleBridgeInterfaceChannelGroupPriority,
       "sleBridgeInterfaceChannelGroupTimeOut": sleBridgeInterfaceChannelGroupTimeOut,
       "sleBridgeInterfaceChannelGroupActiveLink": sleBridgeInterfaceChannelGroupActiveLink,
       "sleBridgeInterfaceChannelGroupDistMode": sleBridgeInterfaceChannelGroupDistMode,
       "sleBridgeInterfaceSubMode": sleBridgeInterfaceSubMode,
       "sleBridgeInterfaceAcceptableFramType": sleBridgeInterfaceAcceptableFramType,
       "sleBridgeInterfaceEgressTagged": sleBridgeInterfaceEgressTagged,
       "sleBridgeInterfaceVlanTranslation": sleBridgeInterfaceVlanTranslation,
       "sleBridgeInterfaceCVlanRegistraionName": sleBridgeInterfaceCVlanRegistraionName,
       "sleBridgeInterfacePEVlanId": sleBridgeInterfacePEVlanId,
       "sleBridgeInterfacePEDefaultVlanId": sleBridgeInterfacePEDefaultVlanId,
       "sleBridgeInterfacePEUntaggedVlanId": sleBridgeInterfacePEUntaggedVlanId,
       "sleBridgeInterfaceDefaulSVlanId": sleBridgeInterfaceDefaulSVlanId,
       "sleBridgeInterfacePrivateVlanHostAssociationPrimaryVid": sleBridgeInterfacePrivateVlanHostAssociationPrimaryVid,
       "sleBridgeInterfacePrivateVlanHostAssociationPvid": sleBridgeInterfacePrivateVlanHostAssociationPvid,
       "sleBridgeInterfacePrivateVlanMappingPvid": sleBridgeInterfacePrivateVlanMappingPvid,
       "sleBridgeInterfacePrivateVlanMappingSecondaryVid": sleBridgeInterfacePrivateVlanMappingSecondaryVid,
       "sleBridgeInterfaceGroup": sleBridgeInterfaceGroup,
       "sleBridgeInterfaceGroupSpanningTree": sleBridgeInterfaceGroupSpanningTree,
       "sleBridgeInterfaceProviderNetworkEtherType": sleBridgeInterfaceProviderNetworkEtherType,
       "sleBridgeInterfaceControl": sleBridgeInterfaceControl,
       "sleBridgeInterfaceControlRequest": sleBridgeInterfaceControlRequest,
       "sleBridgeInterfaceControlStatus": sleBridgeInterfaceControlStatus,
       "sleBridgeInterfaceControlTimer": sleBridgeInterfaceControlTimer,
       "sleBridgeInterfaceControlTimeStamp": sleBridgeInterfaceControlTimeStamp,
       "sleBridgeInterfaceControlReqResult": sleBridgeInterfaceControlReqResult,
       "sleBridgeInterfaceControlIndex": sleBridgeInterfaceControlIndex,
       "sleBridgeInterfaceControlMode": sleBridgeInterfaceControlMode,
       "sleBridgeInterfaceControlDefaultVlan": sleBridgeInterfaceControlDefaultVlan,
       "sleBridgeInterfaceControlPvid": sleBridgeInterfaceControlPvid,
       "sleBridgeInterfaceControlIngressFilter": sleBridgeInterfaceControlIngressFilter,
       "sleBridgeInterfaceControlAllowedVlanFlags": sleBridgeInterfaceControlAllowedVlanFlags,
       "sleBridgeInterfaceControlAllowedVlan": sleBridgeInterfaceControlAllowedVlan,
       "sleBridgeInterfaceControlNativeVlan": sleBridgeInterfaceControlNativeVlan,
       "sleBridgeInterfaceControlChannelGroupAggrId": sleBridgeInterfaceControlChannelGroupAggrId,
       "sleBridgeInterfaceControlChannelGroupMode": sleBridgeInterfaceControlChannelGroupMode,
       "sleBridgeInterfaceControlChannelGroupLacpAggrMode": sleBridgeInterfaceControlChannelGroupLacpAggrMode,
       "sleBridgeInterfaceControlChannelGroupAdminKey": sleBridgeInterfaceControlChannelGroupAdminKey,
       "sleBridgeInterfaceControlChannelGroupAggrType": sleBridgeInterfaceControlChannelGroupAggrType,
       "sleBridgeInterfaceControlChannelGroupPriority": sleBridgeInterfaceControlChannelGroupPriority,
       "sleBridgeInterfaceControlChannelGroupTimeOut": sleBridgeInterfaceControlChannelGroupTimeOut,
       "sleBridgeInterfaceControlChannelGroupActiveLink": sleBridgeInterfaceControlChannelGroupActiveLink,
       "sleBridgeInterfaceControlChannelGroupDistMode": sleBridgeInterfaceControlChannelGroupDistMode,
       "sleBridgeInterfaceControlSubMode": sleBridgeInterfaceControlSubMode,
       "sleBridgeInterfaceControlAcceptableFramType": sleBridgeInterfaceControlAcceptableFramType,
       "sleBridgeInterfaceControlEgressTagged": sleBridgeInterfaceControlEgressTagged,
       "sleBridgeInterfaceControlVlanTranslate": sleBridgeInterfaceControlVlanTranslate,
       "sleBridgeInterfaceControlVlanToBeTranslated": sleBridgeInterfaceControlVlanToBeTranslated,
       "sleBridgeInterfaceControlCVlanRegistraionName": sleBridgeInterfaceControlCVlanRegistraionName,
       "sleBridgeInterfaceControlPEVlanId": sleBridgeInterfaceControlPEVlanId,
       "sleBridgeInterfaceControlPEDefaultVlanId": sleBridgeInterfaceControlPEDefaultVlanId,
       "sleBridgeInterfaceControlPEUntaggedVlanId": sleBridgeInterfaceControlPEUntaggedVlanId,
       "sleBridgeInterfaceControlPrivateVlanHostAssociationPrimaryVid": sleBridgeInterfaceControlPrivateVlanHostAssociationPrimaryVid,
       "sleBridgeInterfaceControlPrivateVlanHostAssociationPvid": sleBridgeInterfaceControlPrivateVlanHostAssociationPvid,
       "sleBridgeInterfaceControlPrivateVlanMappingPvid": sleBridgeInterfaceControlPrivateVlanMappingPvid,
       "sleBridgeInterfaceControlPrivateVlanMappingSecondaryVid": sleBridgeInterfaceControlPrivateVlanMappingSecondaryVid,
       "sleBridgeInterfaceControlGroup": sleBridgeInterfaceControlGroup,
       "sleBridgeInterfaceControlGroupSpanningTree": sleBridgeInterfaceControlGroupSpanningTree,
       "sleBridgeInterfaceControlProviderNetworkEtherType": sleBridgeInterfaceControlProviderNetworkEtherType,
       "sleBridgeInterfaceNotification": sleBridgeInterfaceNotification,
       "sleBridgeInterfaceSwitchportChanged": sleBridgeInterfaceSwitchportChanged,
       "sleBridgeInterfaceSwitchportDefaultVlanChanged": sleBridgeInterfaceSwitchportDefaultVlanChanged,
       "sleBridgeInterfaceSwitchportDefaultVlanDeleted": sleBridgeInterfaceSwitchportDefaultVlanDeleted,
       "sleBridgeInterfaceSwitchportAllowedVlanChanged": sleBridgeInterfaceSwitchportAllowedVlanChanged,
       "sleBridgeInterfaceSwitchportModeChanged": sleBridgeInterfaceSwitchportModeChanged,
       "sleBridgeInterfaceSwitchportModeIngressFilterChanged": sleBridgeInterfaceSwitchportModeIngressFilterChanged,
       "sleBridgeInterfaceSwitchportTrunkDeleted": sleBridgeInterfaceSwitchportTrunkDeleted,
       "sleBridgeInterfaceSwitchportTrunkNativeVlanChanged": sleBridgeInterfaceSwitchportTrunkNativeVlanChanged,
       "sleBridgeInterfaceSwitchportTrunkNativeVlanDeleted": sleBridgeInterfaceSwitchportTrunkNativeVlanDeleted,
       "sleBridgeInterfaceChannelGroupChanged": sleBridgeInterfaceChannelGroupChanged,
       "sleBridgeInterfaceChannelGroupDeleted": sleBridgeInterfaceChannelGroupDeleted,
       "sleBridgeInterfaceChannelGroupAdminKeyChanged": sleBridgeInterfaceChannelGroupAdminKeyChanged,
       "sleBridgeInterfaceChannelGroupAggrTypeChanged": sleBridgeInterfaceChannelGroupAggrTypeChanged,
       "sleBridgeInterfaceChannelGroupPriorityChanged": sleBridgeInterfaceChannelGroupPriorityChanged,
       "sleBridgeInterfaceChannelGroupTimeOutChanged": sleBridgeInterfaceChannelGroupTimeOutChanged,
       "sleBridgeInterfaceChannelGroupActiveLinkChanged": sleBridgeInterfaceChannelGroupActiveLinkChanged,
       "sleBridgeInterfaceChannelGroupDistModeChanged": sleBridgeInterfaceChannelGroupDistModeChanged,
       "sleBridgeInterfaceVlanChanged": sleBridgeInterfaceVlanChanged,
       "sleBridgeReservedVlan": sleBridgeReservedVlan,
       "sleBridgeReservedVlanTable": sleBridgeReservedVlanTable,
       "sleBridgeReservedVlanEntry": sleBridgeReservedVlanEntry,
       "sleBridgeReservedVlanId": sleBridgeReservedVlanId,
       "sleBridgeReservedVlanIsUsed": sleBridgeReservedVlanIsUsed,
       "sleBridgeReservedVlanControl": sleBridgeReservedVlanControl,
       "sleBridgeReservedVlanControlRequest": sleBridgeReservedVlanControlRequest,
       "sleBridgeReservedVlanControlStatus": sleBridgeReservedVlanControlStatus,
       "sleBridgeReservedVlanControlTimer": sleBridgeReservedVlanControlTimer,
       "sleBridgeReservedVlanControlTimeStamp": sleBridgeReservedVlanControlTimeStamp,
       "sleBridgeReservedVlanControlReqResult": sleBridgeReservedVlanControlReqResult,
       "sleBridgeReservedVlanControlStartVlanId": sleBridgeReservedVlanControlStartVlanId,
       "sleBridgeReservedVlanControlEndVlanId": sleBridgeReservedVlanControlEndVlanId,
       "sleBridgeReservedVlanNotification": sleBridgeReservedVlanNotification,
       "sleBridgeReservedVlanAdded": sleBridgeReservedVlanAdded,
       "sleBridgeReservedVlanRemoved": sleBridgeReservedVlanRemoved,
       "sleBridgeInternalVlanTable": sleBridgeInternalVlanTable,
       "sleBridgeInternalVlanEntry": sleBridgeInternalVlanEntry,
       "sleBridgeInternalVlanSlot": sleBridgeInternalVlanSlot,
       "sleBridgeInternalVlanPort": sleBridgeInternalVlanPort,
       "sleBridgeInternalVlanRealVlanId": sleBridgeInternalVlanRealVlanId,
       "sleBridgeInternalVlanInternalVlanId": sleBridgeInternalVlanInternalVlanId,
       "sleSubnetVlan6": sleSubnetVlan6,
       "sleSubnetVlan6Table": sleSubnetVlan6Table,
       "sleSubnetVlan6Entry": sleSubnetVlan6Entry,
       "sleSubnetVlan6Ip": sleSubnetVlan6Ip,
       "sleSubnetVlan6Mask": sleSubnetVlan6Mask,
       "sleSubnetVlan6Vid": sleSubnetVlan6Vid,
       "sleSubnetVlan6Control": sleSubnetVlan6Control,
       "sleSubnetVlan6ControlRequest": sleSubnetVlan6ControlRequest,
       "sleSubnetVlan6ControlStatus": sleSubnetVlan6ControlStatus,
       "sleSubnetVlan6ControlTimer": sleSubnetVlan6ControlTimer,
       "sleSubnetVlan6ControlTimeStamp": sleSubnetVlan6ControlTimeStamp,
       "sleSubnetVlan6ControlReqResult": sleSubnetVlan6ControlReqResult,
       "sleSubnetVlan6ControlIp": sleSubnetVlan6ControlIp,
       "sleSubnetVlan6ControlMask": sleSubnetVlan6ControlMask,
       "sleSubnetVlan6ControlVid": sleSubnetVlan6ControlVid,
       "sleSubnetVlan6Notification": sleSubnetVlan6Notification,
       "sleSubnetVlan6Created": sleSubnetVlan6Created,
       "sleSubnetVlan6Destroyed": sleSubnetVlan6Destroyed,
       "sle2MacAddress": sle2MacAddress,
       "sle2MacAddressTable": sle2MacAddressTable,
       "sle2MacAddressEntry": sle2MacAddressEntry,
       "sle2MacAddressEntryBridgeId": sle2MacAddressEntryBridgeId,
       "sle2MacAddressEntryMacAddress": sle2MacAddressEntryMacAddress,
       "sle2MacAddressEntryIfIndex": sle2MacAddressEntryIfIndex,
       "sle2MacAddressEntryVid": sle2MacAddressEntryVid,
       "sle2MacAddressEntrySVid": sle2MacAddressEntrySVid,
       "sle2MacAddressEntryMode": sle2MacAddressEntryMode,
       "sle2MacAddressEntryPermission": sle2MacAddressEntryPermission,
       "sle2MacAddressEntryElapsedTime": sle2MacAddressEntryElapsedTime,
       "sle2MacAddressControl": sle2MacAddressControl,
       "sle2MacAddressEntryControlRequest": sle2MacAddressEntryControlRequest,
       "sle2MacAddressEntryControlStatus": sle2MacAddressEntryControlStatus,
       "sle2MacAddressEntryControlTimer": sle2MacAddressEntryControlTimer,
       "sle2MacAddressEntryControlTimeStamp": sle2MacAddressEntryControlTimeStamp,
       "sle2MacAddressEntryControlReqResult": sle2MacAddressEntryControlReqResult,
       "sle2MacAddressEntryControlBridgeId": sle2MacAddressEntryControlBridgeId,
       "sle2MacAddressEntryControlMacAddress": sle2MacAddressEntryControlMacAddress,
       "sle2MacAddressEntryControlIfIndex": sle2MacAddressEntryControlIfIndex,
       "sle2MacAddressEntryControlVid": sle2MacAddressEntryControlVid,
       "sle2MacAddressEntryControlSVid": sle2MacAddressEntryControlSVid,
       "sle2MacAddressEntryControlPermission": sle2MacAddressEntryControlPermission,
       "sle2MacAddressEntryControlCVid": sle2MacAddressEntryControlCVid,
       "sle2MacAddressEntryControlInstance": sle2MacAddressEntryControlInstance,
       "sle2MacAddressEntryControlClearType": sle2MacAddressEntryControlClearType,
       "sle2MacAddressNotification": sle2MacAddressNotification,
       "sle2MacAddressEntryCreated": sle2MacAddressEntryCreated,
       "sle2MacAddressEntryDestroyed": sle2MacAddressEntryDestroyed,
       "sle2MacAddressTableEntriesCleared": sle2MacAddressTableEntriesCleared,
       "sleCVlanRegistrationMap": sleCVlanRegistrationMap,
       "sleCVlanRegistrationMapTable": sleCVlanRegistrationMapTable,
       "sleCVlanRegistrationMapEntry": sleCVlanRegistrationMapEntry,
       "sleCVlanRegIndex": sleCVlanRegIndex,
       "sleCVlanIndex": sleCVlanIndex,
       "sleCVlanRegName": sleCVlanRegName,
       "sleSVlan": sleSVlan,
       "sleUntaggedMap": sleUntaggedMap,
       "sleCVlanRegistrationMapControl": sleCVlanRegistrationMapControl,
       "sleCVlanRegistrationMapControlRequest": sleCVlanRegistrationMapControlRequest,
       "sleCVlanRegistrationMapControlStatus": sleCVlanRegistrationMapControlStatus,
       "sleCVlanRegistrationMapControlTimer": sleCVlanRegistrationMapControlTimer,
       "sleCVlanRegistrationMapControlTimeStamp": sleCVlanRegistrationMapControlTimeStamp,
       "sleCVlanRegistrationMapControlReqResult": sleCVlanRegistrationMapControlReqResult,
       "sleCVlanRegistrationMapControlCVlanID": sleCVlanRegistrationMapControlCVlanID,
       "sleCVlanRegistrationMapControlName": sleCVlanRegistrationMapControlName,
       "sleCVlanRegistrationMapControlSVlan": sleCVlanRegistrationMapControlSVlan,
       "sleCVlanRegistrationMapControlFlagPort": sleCVlanRegistrationMapControlFlagPort,
       "sleLacpBase": sleLacpBase,
       "sleLacpBaseInfo": sleLacpBaseInfo,
       "sleLacpSystemPriority": sleLacpSystemPriority,
       "sleLacpBaseControl": sleLacpBaseControl,
       "sleLacpBaseControlRequest": sleLacpBaseControlRequest,
       "sleLacpBaseControlStatus": sleLacpBaseControlStatus,
       "sleLacpBaseControlTimer": sleLacpBaseControlTimer,
       "sleLacpBaseControlTimeStamp": sleLacpBaseControlTimeStamp,
       "sleLacpBaseControlReqResult": sleLacpBaseControlReqResult,
       "sleLacpBaseControlSystemPriority": sleLacpBaseControlSystemPriority,
       "sleLacpBaseControlAggregatorId": sleLacpBaseControlAggregatorId,
       "sleLacpInterface": sleLacpInterface,
       "sleLacpInterfaceTable": sleLacpInterfaceTable,
       "sleLacpInterfaceEntry": sleLacpInterfaceEntry,
       "sleLacpInterfaceIndex": sleLacpInterfaceIndex,
       "sleLacpInterfaceName": sleLacpInterfaceName,
       "sleLacpInterfaceActorPriority": sleLacpInterfaceActorPriority,
       "sleLacpInterfaceActorAdminKey": sleLacpInterfaceActorAdminKey,
       "sleLacpInterfaceActorAdminState": sleLacpInterfaceActorAdminState,
       "sleLacpInterfaceDestinationMac": sleLacpInterfaceDestinationMac,
       "sleLacpInterfaceDiscardWrongConversation": sleLacpInterfaceDiscardWrongConversation,
       "sleLacpInterfaceTimeout": sleLacpInterfaceTimeout,
       "sleLacpInterfaceActiveLink": sleLacpInterfaceActiveLink,
       "sleLacpInterfaceControl": sleLacpInterfaceControl,
       "sleLacpInterfaceControlRequest": sleLacpInterfaceControlRequest,
       "sleLacpInterfaceControlStatus": sleLacpInterfaceControlStatus,
       "sleLacpInterfaceControlTimer": sleLacpInterfaceControlTimer,
       "sleLacpInterfaceControlTimeStamp": sleLacpInterfaceControlTimeStamp,
       "sleLacpInterfaceControlReqResult": sleLacpInterfaceControlReqResult,
       "sleLacpInterfaceControlIndex": sleLacpInterfaceControlIndex,
       "sleLacpInterfaceControlPriority": sleLacpInterfaceControlPriority,
       "sleLacpInterfaceControlTimeout": sleLacpInterfaceControlTimeout,
       "sleLacpInterfaceControlDestinationMac": sleLacpInterfaceControlDestinationMac,
       "sleLacpInterfaceControlDiscardWrongConversation": sleLacpInterfaceControlDiscardWrongConversation,
       "sleLacpInterfaceControlActiveLink": sleLacpInterfaceControlActiveLink,
       "sle2LldpGlobal": sle2LldpGlobal,
       "sle2LldpGlobalTable": sle2LldpGlobalTable,
       "sle2LldpGlobalEntry": sle2LldpGlobalEntry,
       "sle2LldpGlobalIfIndex": sle2LldpGlobalIfIndex,
       "sle2LldpGlobalAgtCircuitId": sle2LldpGlobalAgtCircuitId,
       "sle2LldpGlobalMedDevType": sle2LldpGlobalMedDevType,
       "sle2LldpGlobalPortDescription": sle2LldpGlobalPortDescription,
       "sle2LldpGlobalControl": sle2LldpGlobalControl,
       "sle2LldpGlobalControlRequest": sle2LldpGlobalControlRequest,
       "sle2LldpGlobalControlStatus": sle2LldpGlobalControlStatus,
       "sle2LldpGlobalControlTimer": sle2LldpGlobalControlTimer,
       "sle2LldpGlobalControlTimeStamp": sle2LldpGlobalControlTimeStamp,
       "sle2LldpGlobalControlReqResult": sle2LldpGlobalControlReqResult,
       "sle2LldpGlobalControlIfIndex": sle2LldpGlobalControlIfIndex,
       "sle2LldpGlobalControlAgtCircuitId": sle2LldpGlobalControlAgtCircuitId,
       "sle2LldpGlobalControlMedDevType": sle2LldpGlobalControlMedDevType,
       "sle2LldpGlobalControlPortDescription": sle2LldpGlobalControlPortDescription,
       "sle2LldpParameters": sle2LldpParameters,
       "sle2LldpParametersTable": sle2LldpParametersTable,
       "sle2LldpParametersEntry": sle2LldpParametersEntry,
       "sle2LldpParamIfIndex": sle2LldpParamIfIndex,
       "sle2LldpParamAgentMode": sle2LldpParamAgentMode,
       "sle2LldpParamBacManagementAddress": sle2LldpParamBacManagementAddress,
       "sle2LldpParamBacPortDescription": sle2LldpParamBacPortDescription,
       "sle2LldpParamBacSystemCapabilities": sle2LldpParamBacSystemCapabilities,
       "sle2LldpParamBacSystemDescription": sle2LldpParamBacSystemDescription,
       "sle2LldpParamBacSystemName": sle2LldpParamBacSystemName,
       "sle2LldpParamI8021LinkAgg": sle2LldpParamI8021LinkAgg,
       "sle2LldpParamI8021MgmtVid": sle2LldpParamI8021MgmtVid,
       "sle2LldpParamI8021PortPtclVlanid": sle2LldpParamI8021PortPtclVlanid,
       "sle2LldpParamI8021PortVlanid": sle2LldpParamI8021PortVlanid,
       "sle2LldpParamI8021PtclIdentity": sle2LldpParamI8021PtclIdentity,
       "sle2LldpParamI8021VidDigest": sle2LldpParamI8021VidDigest,
       "sle2LldpParamI8021VlanName": sle2LldpParamI8021VlanName,
       "sle2LldpParamI8023MacPhy": sle2LldpParamI8023MacPhy,
       "sle2LldpParamI8023MaxMtuSize": sle2LldpParamI8023MaxMtuSize,
       "sle2LldpParamMedInventory": sle2LldpParamMedInventory,
       "sle2LldpParamMedLocation": sle2LldpParamMedLocation,
       "sle2LldpParamMedNetworkPolicy": sle2LldpParamMedNetworkPolicy,
       "sle2LldpParamMedPower": sle2LldpParamMedPower,
       "sle2LldpParametersControl": sle2LldpParametersControl,
       "sle2LldpParamControlRequest": sle2LldpParamControlRequest,
       "sle2LldpParamControlStatus": sle2LldpParamControlStatus,
       "sle2LldpParamControlTimer": sle2LldpParamControlTimer,
       "sle2LldpParamControlTimeStamp": sle2LldpParamControlTimeStamp,
       "sle2LldpParamControlReqResult": sle2LldpParamControlReqResult,
       "sle2LldpParamControlIfIndex": sle2LldpParamControlIfIndex,
       "sle2LldpParamControlAgentMode": sle2LldpParamControlAgentMode,
       "sle2LldpParamControlBacManagementAddress": sle2LldpParamControlBacManagementAddress,
       "sle2LldpParamControlBacPortDescription": sle2LldpParamControlBacPortDescription,
       "sle2LldpParamControlBacSystemCapabilities": sle2LldpParamControlBacSystemCapabilities,
       "sle2LldpParamControlBacSystemDescription": sle2LldpParamControlBacSystemDescription,
       "sle2LldpParamControlBacSystemName": sle2LldpParamControlBacSystemName,
       "sle2LldpParamControlI8021LinkAgg": sle2LldpParamControlI8021LinkAgg,
       "sle2LldpParamControlI8021MgmtVid": sle2LldpParamControlI8021MgmtVid,
       "sle2LldpParamControlI8021PortPtclVlanid": sle2LldpParamControlI8021PortPtclVlanid,
       "sle2LldpParamControlI8021PortVlanid": sle2LldpParamControlI8021PortVlanid,
       "sle2LldpParamControlI8021PtclIdentity": sle2LldpParamControlI8021PtclIdentity,
       "sle2LldpParamControlI8021VidDigest": sle2LldpParamControlI8021VidDigest,
       "sle2LldpParamControlI8021VlanName": sle2LldpParamControlI8021VlanName,
       "sle2LldpParamControlI8023MacPhy": sle2LldpParamControlI8023MacPhy,
       "sle2LldpParamControlI8023MaxMtuSize": sle2LldpParamControlI8023MaxMtuSize,
       "sle2LldpParamControlMedInventory": sle2LldpParamControlMedInventory,
       "sle2LldpParamControlMedLocation": sle2LldpParamControlMedLocation,
       "sle2LldpParamControlMedNetworkPolicy": sle2LldpParamControlMedNetworkPolicy,
       "sle2LldpParamControlMedPower": sle2LldpParamControlMedPower,
       "sle2LldpAgent": sle2LldpAgent,
       "sle2LldpAgentTable": sle2LldpAgentTable,
       "sle2LldpAgentEntry": sle2LldpAgentEntry,
       "sle2LldpAgentIfIndex": sle2LldpAgentIfIndex,
       "sle2LldpAgentMode": sle2LldpAgentMode,
       "sle2LldpAgentChassisIdTlv": sle2LldpAgentChassisIdTlv,
       "sle2LldpAgentAdminStatus": sle2LldpAgentAdminStatus,
       "sle2LldpAgentLocallyAssigned": sle2LldpAgentLocallyAssigned,
       "sle2LldpAgentManagementAddressTlv": sle2LldpAgentManagementAddressTlv,
       "sle2LldpAgentMsgTxHold": sle2LldpAgentMsgTxHold,
       "sle2LldpAgentPortIdTlv": sle2LldpAgentPortIdTlv,
       "sle2LldpAgentTimerMsgFastTx": sle2LldpAgentTimerMsgFastTx,
       "sle2LldpAgentTimerMsgTxInterval": sle2LldpAgentTimerMsgTxInterval,
       "sle2LldpAgentTimerReinitDelay": sle2LldpAgentTimerReinitDelay,
       "sle2LldpAgentTimerTxDelay": sle2LldpAgentTimerTxDelay,
       "sle2LldpAgentTMNlimit": sle2LldpAgentTMNlimit,
       "sle2LldpAgentTMNInfoType": sle2LldpAgentTMNInfoType,
       "sle2LldpAgentTMNMac": sle2LldpAgentTMNMac,
       "sle2LldpAgentTMNTimer": sle2LldpAgentTMNTimer,
       "sle2LldpAgentTxFastInit": sle2LldpAgentTxFastInit,
       "sle2LldpAgentTxMaxCredit": sle2LldpAgentTxMaxCredit,
       "sle2LldpAgentControl": sle2LldpAgentControl,
       "sle2LldpAgentControlRequest": sle2LldpAgentControlRequest,
       "sle2LldpAgentControlStatus": sle2LldpAgentControlStatus,
       "sle2LldpAgentControlTimer": sle2LldpAgentControlTimer,
       "sle2LldpAgentControlTimeStamp": sle2LldpAgentControlTimeStamp,
       "sle2LldpAgentControlReqResult": sle2LldpAgentControlReqResult,
       "sle2LldpAgentControlIfIndex": sle2LldpAgentControlIfIndex,
       "sle2LldpAgentControlMode": sle2LldpAgentControlMode,
       "sle2LldpAgentControlChassisIdTlv": sle2LldpAgentControlChassisIdTlv,
       "sle2LldpAgentControlAdminStatus": sle2LldpAgentControlAdminStatus,
       "sle2LldpAgentControlLocallyAssigned": sle2LldpAgentControlLocallyAssigned,
       "sle2LldpAgentControlManagementAddressTlv": sle2LldpAgentControlManagementAddressTlv,
       "sle2LldpAgentControlMsgTxHold": sle2LldpAgentControlMsgTxHold,
       "sle2LldpAgentControlPortIdTlv": sle2LldpAgentControlPortIdTlv,
       "sle2LldpAgentControlTimerMsgFastTx": sle2LldpAgentControlTimerMsgFastTx,
       "sle2LldpAgentControlTimerMsgTxInterval": sle2LldpAgentControlTimerMsgTxInterval,
       "sle2LldpAgentControlTimerReinitDelay": sle2LldpAgentControlTimerReinitDelay,
       "sle2LldpAgentControlTimerTxDelay": sle2LldpAgentControlTimerTxDelay,
       "sle2LldpAgentControlTMNlimit": sle2LldpAgentControlTMNlimit,
       "sle2LldpAgentControlTMNInfoType": sle2LldpAgentControlTMNInfoType,
       "sle2LldpAgentControlTMNMac": sle2LldpAgentControlTMNMac,
       "sle2LldpAgentControlTMNTimer": sle2LldpAgentControlTMNTimer,
       "sle2LldpAgentControlTxFastInit": sle2LldpAgentControlTxFastInit,
       "sle2LldpAgentControlTxMaxCredit": sle2LldpAgentControlTxMaxCredit,
       "sle2LldpStatistics": sle2LldpStatistics,
       "sle2LldpStatisticsTable": sle2LldpStatisticsTable,
       "sle2LldpStatisticsEntry": sle2LldpStatisticsEntry,
       "sle2LldpStatsIfIndex": sle2LldpStatsIfIndex,
       "sle2LldpStatsAgentMode": sle2LldpStatsAgentMode,
       "sle2LldpStatsTransmittedFramesTotal": sle2LldpStatsTransmittedFramesTotal,
       "sle2LldpStatsAgedEntriesTotal": sle2LldpStatsAgedEntriesTotal,
       "sle2LldpStatsReceivedFramesTotal": sle2LldpStatsReceivedFramesTotal,
       "sle2LldpStatsReceivedFramesError": sle2LldpStatsReceivedFramesError,
       "sle2LldpStatsDiscardedFramesTotal": sle2LldpStatsDiscardedFramesTotal,
       "sle2LldpStatsTLVDiscardTotal": sle2LldpStatsTLVDiscardTotal,
       "sle2LldpStatsTLVUnrecognisedTotal": sle2LldpStatsTLVUnrecognisedTotal,
       "sle2LldpStatisticsControl": sle2LldpStatisticsControl,
       "sle2LldpStatsControlRequest": sle2LldpStatsControlRequest,
       "sle2LldpStatsControlStatus": sle2LldpStatsControlStatus,
       "sle2LldpStatsControlTimer": sle2LldpStatsControlTimer,
       "sle2LldpStatsControlTimeStamp": sle2LldpStatsControlTimeStamp,
       "sle2LldpStatsControlReqResult": sle2LldpStatsControlReqResult,
       "sle2LldpRemote": sle2LldpRemote,
       "sle2LldpRemoteTable": sle2LldpRemoteTable,
       "sle2LldpRemoteEntry": sle2LldpRemoteEntry,
       "sle2LldpRemoteIfIndex": sle2LldpRemoteIfIndex,
       "sle2LldpRemoteAgentMode": sle2LldpRemoteAgentMode,
       "sle2LldpRemoteSysName": sle2LldpRemoteSysName,
       "sle2LldpRemoteSysDescr": sle2LldpRemoteSysDescr,
       "sle2LldpRemotePortDescr": sle2LldpRemotePortDescr,
       "sle2LldpRemoteRxTtl": sle2LldpRemoteRxTtl,
       "sle2LldpRemoteSysCapability": sle2LldpRemoteSysCapability,
       "sle2LldpRemoteIfNumbering": sle2LldpRemoteIfNumbering,
       "sle2LldpRemoteIfNumber": sle2LldpRemoteIfNumber,
       "sle2LldpRemoteOid": sle2LldpRemoteOid,
       "sle2LldpRemoteMgmtAddrSubType": sle2LldpRemoteMgmtAddrSubType,
       "sle2LldpRemoteMgmtAddr": sle2LldpRemoteMgmtAddr,
       "sle2LldpRemoteChassisIdType": sle2LldpRemoteChassisIdType,
       "sle2LldpRemoteChassisId": sle2LldpRemoteChassisId,
       "sle2LldpRemotePortIdType": sle2LldpRemotePortIdType,
       "sle2LldpRemotePortId": sle2LldpRemotePortId,
       "sle2LldpRemotePortVlanId": sle2LldpRemotePortVlanId,
       "sle2LldpRemotePPVlanId": sle2LldpRemotePPVlanId,
       "sle2LldpRemoteProtocols": sle2LldpRemoteProtocols,
       "sle2LldpRemoteVidUsageDigest": sle2LldpRemoteVidUsageDigest,
       "sle2LldpRemoteMgmtVlan": sle2LldpRemoteMgmtVlan,
       "sle2LldpRemoteLinkAggrStatus": sle2LldpRemoteLinkAggrStatus,
       "sle2LldpRemoteLinkAggrPortId": sle2LldpRemoteLinkAggrPortId,
       "sle2LldpRemoteAutonegoSupport": sle2LldpRemoteAutonegoSupport,
       "sle2LldpRemoteAutonegoCapability": sle2LldpRemoteAutonegoCapability,
       "sle2LldpRemoteOperMauType": sle2LldpRemoteOperMauType,
       "sle2LldpRemoteMaxFrameSize": sle2LldpRemoteMaxFrameSize,
       "sle2LldpRemoteMedCapability": sle2LldpRemoteMedCapability,
       "sle2LldpRemoteMedCapabilityDevType": sle2LldpRemoteMedCapabilityDevType,
       "sle2LldpRemoteMedNwPlcyAppType": sle2LldpRemoteMedNwPlcyAppType,
       "sle2LldpRemoteMedNwPlcyVlanId": sle2LldpRemoteMedNwPlcyVlanId,
       "sle2LldpRemoteMedNwPlcyTagged": sle2LldpRemoteMedNwPlcyTagged,
       "sle2LldpRemoteMedNwPlcyL2Prio": sle2LldpRemoteMedNwPlcyL2Prio,
       "sle2LldpRemoteMedNwPlcyDscp": sle2LldpRemoteMedNwPlcyDscp,
       "sle2LldpRemoteMedLocDataFormat": sle2LldpRemoteMedLocDataFormat,
       "sle2LldpRemoteMedLocLatitudeRes": sle2LldpRemoteMedLocLatitudeRes,
       "sle2LldpRemoteMedLocLatitude": sle2LldpRemoteMedLocLatitude,
       "sle2LldpRemoteMedLocLongitudeRes": sle2LldpRemoteMedLocLongitudeRes,
       "sle2LldpRemoteMedLocLongitude": sle2LldpRemoteMedLocLongitude,
       "sle2LldpRemoteMedLocAt": sle2LldpRemoteMedLocAt,
       "sle2LldpRemoteMedLocAltitudeRes": sle2LldpRemoteMedLocAltitudeRes,
       "sle2LldpRemoteMedLocAltitude": sle2LldpRemoteMedLocAltitude,
       "sle2LldpRemoteMedLocDatum": sle2LldpRemoteMedLocDatum,
       "sle2LldpRemoteMedLocLciLength": sle2LldpRemoteMedLocLciLength,
       "sle2LldpRemoteMedLocWhat": sle2LldpRemoteMedLocWhat,
       "sle2LldpRemoteMedLocCountryCode": sle2LldpRemoteMedLocCountryCode,
       "sle2LldpRemoteMedLocCaType": sle2LldpRemoteMedLocCaType,
       "sle2LldpRemoteMedLocCaLen": sle2LldpRemoteMedLocCaLen,
       "sle2LldpRemoteVlan": sle2LldpRemoteVlan,
       "sle2LldpRemoteVlanTable": sle2LldpRemoteVlanTable,
       "sle2LldpRemoteVlanEntry": sle2LldpRemoteVlanEntry,
       "sle2LldpRemoteVlanIfIndex": sle2LldpRemoteVlanIfIndex,
       "sle2LldpRemoteVlanAgentMode": sle2LldpRemoteVlanAgentMode,
       "sle2LldpRemoteVlanId": sle2LldpRemoteVlanId,
       "sle2LldpRemoteVlanName": sle2LldpRemoteVlanName,
       "sle2LldpBase": sle2LldpBase,
       "sle2LldpBaseInfo": sle2LldpBaseInfo,
       "sle2LldpBaseSystemDescription": sle2LldpBaseSystemDescription,
       "sle2LldpBaseSystemName": sle2LldpBaseSystemName,
       "sle2LldpBaseControl": sle2LldpBaseControl,
       "sle2LldpBaseControlRequest": sle2LldpBaseControlRequest,
       "sle2LldpBaseControlStatus": sle2LldpBaseControlStatus,
       "sle2LldpBaseControlTimer": sle2LldpBaseControlTimer,
       "sle2LldpBaseControlTimeStamp": sle2LldpBaseControlTimeStamp,
       "sle2LldpBaseControlReqResult": sle2LldpBaseControlReqResult,
       "sle2LldpBaseControlSystemDescription": sle2LldpBaseControlSystemDescription,
       "sle2LldpBaseControlSystemName": sle2LldpBaseControlSystemName,
       "sleMllcf": sleMllcf,
       "sleMllcfInfo": sleMllcfInfo,
       "sleMllcfPortsA": sleMllcfPortsA,
       "sleMllcfPortsB": sleMllcfPortsB,
       "sleMllcfPortsALinkDownStatus": sleMllcfPortsALinkDownStatus,
       "sleMllcfPortsAAdminDownStatus": sleMllcfPortsAAdminDownStatus,
       "sleMllcfPortsBStatus": sleMllcfPortsBStatus,
       "sleMllcfHoldTime": sleMllcfHoldTime,
       "sleMllcfControl": sleMllcfControl,
       "sleMllcfControlRequest": sleMllcfControlRequest,
       "sleMllcfControlStatus": sleMllcfControlStatus,
       "sleMllcfControlTimer": sleMllcfControlTimer,
       "sleMllcfControlTimeStamp": sleMllcfControlTimeStamp,
       "sleMllcfControlReqResult": sleMllcfControlReqResult,
       "sleMllcfControlPortsA": sleMllcfControlPortsA,
       "sleMllcfControlPortsB": sleMllcfControlPortsB,
       "sleMllcfControlHoldTime": sleMllcfControlHoldTime,
       "sleBridgeGroup": sleBridgeGroup,
       "sleBridgeNotificationGroup": sleBridgeNotificationGroup}
)
