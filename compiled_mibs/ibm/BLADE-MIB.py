# SNMP MIB module (BLADE-MIB) expressed in pysnmp data model.
#
# This Python module is designed to be imported and executed by the
# pysnmp library.
#
# See https://www.pysnmp.com/pysnmp for further information.
#
# Notes
# -----
# ASN.1 source file://mibs\ibm\BLADE-MIB
# Produced by pysmi-1.6.2 at Thu Oct  2 12:00:09 2025
# On host DESKTOP-ORUUBP9 platform Windows version 11 by user speterman
# Using Python version 3.12.8 (tags/v3.12.8:2dc476b, Dec  3 2024, 19:30:04) [MSC v.1942 64 bit (AMD64)]

if 'mibBuilder' not in globals():
    import sys

    sys.stderr.write(__doc__)
    sys.exit(1)

# Import base ASN.1 objects even if this MIB does not use it

(Integer,
 OctetString,
 ObjectIdentifier) = mibBuilder.importSymbols(
    "ASN1",
    "Integer",
    "OctetString",
    "ObjectIdentifier")

(NamedValues,) = mibBuilder.importSymbols(
    "ASN1-ENUMERATION",
    "NamedValues")
(ConstraintsIntersection,
 ConstraintsUnion,
 SingleValueConstraint,
 ValueRangeConstraint,
 ValueSizeConstraint) = mibBuilder.importSymbols(
    "ASN1-REFINEMENT",
    "ConstraintsIntersection",
    "ConstraintsUnion",
    "SingleValueConstraint",
    "ValueRangeConstraint",
    "ValueSizeConstraint")

# Import SMI symbols from the MIBs this MIB depends on

(ModuleCompliance,
 NotificationGroup) = mibBuilder.importSymbols(
    "SNMPv2-CONF",
    "ModuleCompliance",
    "NotificationGroup")

(Bits,
 Counter32,
 Counter64,
 Gauge32,
 Integer32,
 IpAddress,
 ModuleIdentity,
 MibIdentifier,
 NotificationType,
 ObjectIdentity,
 MibScalar,
 MibTable,
 MibTableRow,
 MibTableColumn,
 NotificationType,
 TimeTicks,
 Unsigned32,
 enterprises,
 iso) = mibBuilder.importSymbols(
    "SNMPv2-SMI",
    "Bits",
    "Counter32",
    "Counter64",
    "Gauge32",
    "Integer32",
    "IpAddress",
    "ModuleIdentity",
    "MibIdentifier",
    "NotificationType",
    "ObjectIdentity",
    "MibScalar",
    "MibTable",
    "MibTableRow",
    "MibTableColumn",
    "NotificationType",
    "TimeTicks",
    "Unsigned32",
    "enterprises",
    "iso")

(DisplayString,
 PhysAddress,
 TextualConvention) = mibBuilder.importSymbols(
    "SNMPv2-TC",
    "DisplayString",
    "PhysAddress",
    "TextualConvention")


# MODULE-IDENTITY


# Types definitions



class EntryStatus(Integer32):
    """Custom type EntryStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("valid", 1),
          ("createRequest", 2),
          ("underCreation", 3),
          ("invalid", 4))
    )




# TEXTUAL-CONVENTIONS



class InetAddressIPv6(TextualConvention, OctetString):
    status = "current"
    displayHint = "2x:2x:2x:2x:2x:2x:2x:2x"
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(16, 16),
    )
    fixed_length = 16



# MIB Managed Objects in the order of their OIDs

_Ibm_ObjectIdentity = ObjectIdentity
ibm = _Ibm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2)
)
_IbmAgents_ObjectIdentity = ObjectIdentity
ibmAgents = _IbmAgents_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3)
)
_NetfinitySupportProcessorAgent_ObjectIdentity = ObjectIdentity
netfinitySupportProcessorAgent = _NetfinitySupportProcessorAgent_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51)
)
_BladeCenterSnmpMIB_ObjectIdentity = ObjectIdentity
bladeCenterSnmpMIB = _BladeCenterSnmpMIB_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2)
)
_Monitors_ObjectIdentity = ObjectIdentity
monitors = _Monitors_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2)
)
_Temperature_ObjectIdentity = ObjectIdentity
temperature = _Temperature_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1)
)
_PlanarTemp_ObjectIdentity = ObjectIdentity
planarTemp = _PlanarTemp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 1)
)
_MmTemp_Type = OctetString
_MmTemp_Object = MibScalar
mmTemp = _MmTemp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 1, 2),
    _MmTemp_Type()
)
mmTemp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmTemp.setStatus("mandatory")
_AmbientTemp_ObjectIdentity = ObjectIdentity
ambientTemp = _AmbientTemp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 5)
)
_FrontPanelTemp_Type = OctetString
_FrontPanelTemp_Object = MibScalar
frontPanelTemp = _FrontPanelTemp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 5, 1),
    _FrontPanelTemp_Type()
)
frontPanelTemp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frontPanelTemp.setStatus("mandatory")
_FrontPanel2Temp_Type = OctetString
_FrontPanel2Temp_Object = MibScalar
frontPanel2Temp = _FrontPanel2Temp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 5, 2),
    _FrontPanel2Temp_Type()
)
frontPanel2Temp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frontPanel2Temp.setStatus("mandatory")
_Voltage_ObjectIdentity = ObjectIdentity
voltage = _Voltage_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 2)
)
_PlanarVolt_ObjectIdentity = ObjectIdentity
planarVolt = _PlanarVolt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 2, 1)
)
_Plus5Volt_Type = OctetString
_Plus5Volt_Object = MibScalar
plus5Volt = _Plus5Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 2, 1, 1),
    _Plus5Volt_Type()
)
plus5Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plus5Volt.setStatus("mandatory")
_Plus3Pt3Volt_Type = OctetString
_Plus3Pt3Volt_Object = MibScalar
plus3Pt3Volt = _Plus3Pt3Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 2, 1, 2),
    _Plus3Pt3Volt_Type()
)
plus3Pt3Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plus3Pt3Volt.setStatus("mandatory")
_Plus12Volt_Type = OctetString
_Plus12Volt_Object = MibScalar
plus12Volt = _Plus12Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 2, 1, 3),
    _Plus12Volt_Type()
)
plus12Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plus12Volt.setStatus("mandatory")
_Minus5Volt_Type = OctetString
_Minus5Volt_Object = MibScalar
minus5Volt = _Minus5Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 2, 1, 5),
    _Minus5Volt_Type()
)
minus5Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    minus5Volt.setStatus("mandatory")
_Plus2Pt5Volt_Type = OctetString
_Plus2Pt5Volt_Object = MibScalar
plus2Pt5Volt = _Plus2Pt5Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 2, 1, 6),
    _Plus2Pt5Volt_Type()
)
plus2Pt5Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plus2Pt5Volt.setStatus("mandatory")
_Plus1Pt8Volt_Type = OctetString
_Plus1Pt8Volt_Object = MibScalar
plus1Pt8Volt = _Plus1Pt8Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 2, 1, 8),
    _Plus1Pt8Volt_Type()
)
plus1Pt8Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plus1Pt8Volt.setStatus("mandatory")
_Blowers_ObjectIdentity = ObjectIdentity
blowers = _Blowers_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3)
)
_Blower1speed_Type = OctetString
_Blower1speed_Object = MibScalar
blower1speed = _Blower1speed_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 1),
    _Blower1speed_Type()
)
blower1speed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blower1speed.setStatus("mandatory")
_Blower2speed_Type = OctetString
_Blower2speed_Object = MibScalar
blower2speed = _Blower2speed_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 2),
    _Blower2speed_Type()
)
blower2speed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blower2speed.setStatus("mandatory")
_Blower3speed_Type = OctetString
_Blower3speed_Object = MibScalar
blower3speed = _Blower3speed_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 3),
    _Blower3speed_Type()
)
blower3speed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blower3speed.setStatus("mandatory")
_Blower4speed_Type = OctetString
_Blower4speed_Object = MibScalar
blower4speed = _Blower4speed_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 4),
    _Blower4speed_Type()
)
blower4speed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blower4speed.setStatus("mandatory")


class _Blower1State_Type(Integer32):
    """Custom type blower1State based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("good", 1),
          ("warning", 2),
          ("bad", 3))
    )


_Blower1State_Type.__name__ = "Integer32"
_Blower1State_Object = MibScalar
blower1State = _Blower1State_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 10),
    _Blower1State_Type()
)
blower1State.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blower1State.setStatus("mandatory")


class _Blower2State_Type(Integer32):
    """Custom type blower2State based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("good", 1),
          ("warning", 2),
          ("bad", 3))
    )


_Blower2State_Type.__name__ = "Integer32"
_Blower2State_Object = MibScalar
blower2State = _Blower2State_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 11),
    _Blower2State_Type()
)
blower2State.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blower2State.setStatus("mandatory")


class _Blower3State_Type(Integer32):
    """Custom type blower3State based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("good", 1),
          ("warning", 2),
          ("bad", 3))
    )


_Blower3State_Type.__name__ = "Integer32"
_Blower3State_Object = MibScalar
blower3State = _Blower3State_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 12),
    _Blower3State_Type()
)
blower3State.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blower3State.setStatus("mandatory")


class _Blower4State_Type(Integer32):
    """Custom type blower4State based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("good", 1),
          ("warning", 2),
          ("bad", 3))
    )


_Blower4State_Type.__name__ = "Integer32"
_Blower4State_Object = MibScalar
blower4State = _Blower4State_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 13),
    _Blower4State_Type()
)
blower4State.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blower4State.setStatus("mandatory")
_Blower1speedRPM_Type = OctetString
_Blower1speedRPM_Object = MibScalar
blower1speedRPM = _Blower1speedRPM_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 20),
    _Blower1speedRPM_Type()
)
blower1speedRPM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blower1speedRPM.setStatus("mandatory")
_Blower2speedRPM_Type = OctetString
_Blower2speedRPM_Object = MibScalar
blower2speedRPM = _Blower2speedRPM_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 21),
    _Blower2speedRPM_Type()
)
blower2speedRPM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blower2speedRPM.setStatus("mandatory")
_Blower3speedRPM_Type = OctetString
_Blower3speedRPM_Object = MibScalar
blower3speedRPM = _Blower3speedRPM_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 22),
    _Blower3speedRPM_Type()
)
blower3speedRPM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blower3speedRPM.setStatus("mandatory")
_Blower4speedRPM_Type = OctetString
_Blower4speedRPM_Object = MibScalar
blower4speedRPM = _Blower4speedRPM_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 23),
    _Blower4speedRPM_Type()
)
blower4speedRPM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blower4speedRPM.setStatus("mandatory")


class _Blower1ControllerState_Type(Integer32):
    """Custom type blower1ControllerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("operational", 0),
          ("flashing", 1),
          ("notPresent", 2),
          ("communicationError", 3),
          ("unknown", 255))
    )


_Blower1ControllerState_Type.__name__ = "Integer32"
_Blower1ControllerState_Object = MibScalar
blower1ControllerState = _Blower1ControllerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 30),
    _Blower1ControllerState_Type()
)
blower1ControllerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blower1ControllerState.setStatus("mandatory")


class _Blower2ControllerState_Type(Integer32):
    """Custom type blower2ControllerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("operational", 0),
          ("flashing", 1),
          ("notPresent", 2),
          ("communicationError", 3),
          ("unknown", 255))
    )


_Blower2ControllerState_Type.__name__ = "Integer32"
_Blower2ControllerState_Object = MibScalar
blower2ControllerState = _Blower2ControllerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 31),
    _Blower2ControllerState_Type()
)
blower2ControllerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blower2ControllerState.setStatus("mandatory")


class _Blower3ControllerState_Type(Integer32):
    """Custom type blower3ControllerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("operational", 0),
          ("flashing", 1),
          ("notPresent", 2),
          ("communicationError", 3),
          ("unknown", 255))
    )


_Blower3ControllerState_Type.__name__ = "Integer32"
_Blower3ControllerState_Object = MibScalar
blower3ControllerState = _Blower3ControllerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 32),
    _Blower3ControllerState_Type()
)
blower3ControllerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blower3ControllerState.setStatus("mandatory")


class _Blower4ControllerState_Type(Integer32):
    """Custom type blower4ControllerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("operational", 0),
          ("flashing", 1),
          ("notPresent", 2),
          ("communicationError", 3),
          ("unknown", 255))
    )


_Blower4ControllerState_Type.__name__ = "Integer32"
_Blower4ControllerState_Object = MibScalar
blower4ControllerState = _Blower4ControllerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 33),
    _Blower4ControllerState_Type()
)
blower4ControllerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blower4ControllerState.setStatus("mandatory")
_Blower1ExhaustTemp_Type = OctetString
_Blower1ExhaustTemp_Object = MibScalar
blower1ExhaustTemp = _Blower1ExhaustTemp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 40),
    _Blower1ExhaustTemp_Type()
)
blower1ExhaustTemp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blower1ExhaustTemp.setStatus("mandatory")
_Blower2ExhaustTemp_Type = OctetString
_Blower2ExhaustTemp_Object = MibScalar
blower2ExhaustTemp = _Blower2ExhaustTemp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 41),
    _Blower2ExhaustTemp_Type()
)
blower2ExhaustTemp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blower2ExhaustTemp.setStatus("mandatory")
_Blower3ExhaustTemp_Type = OctetString
_Blower3ExhaustTemp_Object = MibScalar
blower3ExhaustTemp = _Blower3ExhaustTemp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 42),
    _Blower3ExhaustTemp_Type()
)
blower3ExhaustTemp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blower3ExhaustTemp.setStatus("mandatory")
_Blower4ExhaustTemp_Type = OctetString
_Blower4ExhaustTemp_Object = MibScalar
blower4ExhaustTemp = _Blower4ExhaustTemp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 43),
    _Blower4ExhaustTemp_Type()
)
blower4ExhaustTemp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blower4ExhaustTemp.setStatus("mandatory")
_PowerModuleHealth_ObjectIdentity = ObjectIdentity
powerModuleHealth = _PowerModuleHealth_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 4)
)
_PowerModuleHealthTable_Object = MibTable
powerModuleHealthTable = _PowerModuleHealthTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 4, 1)
)
if mibBuilder.loadTexts:
    powerModuleHealthTable.setStatus("mandatory")
_PowerModuleHealthEntry_Object = MibTableRow
powerModuleHealthEntry = _PowerModuleHealthEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 4, 1, 1)
)
powerModuleHealthEntry.setIndexNames(
    (0, "BLADE-MIB", "powerModuleIndex"),
)
if mibBuilder.loadTexts:
    powerModuleHealthEntry.setStatus("mandatory")
_PowerModuleIndex_Type = Integer32
_PowerModuleIndex_Object = MibTableColumn
powerModuleIndex = _PowerModuleIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 4, 1, 1, 1),
    _PowerModuleIndex_Type()
)
powerModuleIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerModuleIndex.setStatus("mandatory")


class _PowerModuleExists_Type(Integer32):
    """Custom type powerModuleExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_PowerModuleExists_Type.__name__ = "Integer32"
_PowerModuleExists_Object = MibTableColumn
powerModuleExists = _PowerModuleExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 4, 1, 1, 2),
    _PowerModuleExists_Type()
)
powerModuleExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerModuleExists.setStatus("mandatory")


class _PowerModuleState_Type(Integer32):
    """Custom type powerModuleState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("good", 1),
          ("warning", 2),
          ("notAvailable", 3),
          ("critical", 4))
    )


_PowerModuleState_Type.__name__ = "Integer32"
_PowerModuleState_Object = MibTableColumn
powerModuleState = _PowerModuleState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 4, 1, 1, 3),
    _PowerModuleState_Type()
)
powerModuleState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerModuleState.setStatus("mandatory")
_PowerModuleDetails_Type = OctetString
_PowerModuleDetails_Object = MibTableColumn
powerModuleDetails = _PowerModuleDetails_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 4, 1, 1, 4),
    _PowerModuleDetails_Type()
)
powerModuleDetails.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerModuleDetails.setStatus("mandatory")
_SpStatus_ObjectIdentity = ObjectIdentity
spStatus = _SpStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5)
)
_MmBistAndChassisStatus_ObjectIdentity = ObjectIdentity
mmBistAndChassisStatus = _MmBistAndChassisStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2)
)


class _BistSdram_Type(Integer32):
    """Custom type bistSdram based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistSdram_Type.__name__ = "Integer32"
_BistSdram_Object = MibScalar
bistSdram = _BistSdram_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 1),
    _BistSdram_Type()
)
bistSdram.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistSdram.setStatus("deprecated")


class _BistRs485Port1_Type(Integer32):
    """Custom type bistRs485Port1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistRs485Port1_Type.__name__ = "Integer32"
_BistRs485Port1_Object = MibScalar
bistRs485Port1 = _BistRs485Port1_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 2),
    _BistRs485Port1_Type()
)
bistRs485Port1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistRs485Port1.setStatus("mandatory")


class _BistRs485Port2_Type(Integer32):
    """Custom type bistRs485Port2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistRs485Port2_Type.__name__ = "Integer32"
_BistRs485Port2_Object = MibScalar
bistRs485Port2 = _BistRs485Port2_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 3),
    _BistRs485Port2_Type()
)
bistRs485Port2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistRs485Port2.setStatus("mandatory")


class _BistNvram_Type(Integer32):
    """Custom type bistNvram based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistNvram_Type.__name__ = "Integer32"
_BistNvram_Object = MibScalar
bistNvram = _BistNvram_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 4),
    _BistNvram_Type()
)
bistNvram.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistNvram.setStatus("deprecated")


class _BistRtc_Type(Integer32):
    """Custom type bistRtc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistRtc_Type.__name__ = "Integer32"
_BistRtc_Object = MibScalar
bistRtc = _BistRtc_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 5),
    _BistRtc_Type()
)
bistRtc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistRtc.setStatus("mandatory")


class _BistLocalI2CBus_Type(Integer32):
    """Custom type bistLocalI2CBus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistLocalI2CBus_Type.__name__ = "Integer32"
_BistLocalI2CBus_Object = MibScalar
bistLocalI2CBus = _BistLocalI2CBus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 7),
    _BistLocalI2CBus_Type()
)
bistLocalI2CBus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistLocalI2CBus.setStatus("mandatory")


class _BistPrimaryMainAppFlashImage_Type(Integer32):
    """Custom type bistPrimaryMainAppFlashImage based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistPrimaryMainAppFlashImage_Type.__name__ = "Integer32"
_BistPrimaryMainAppFlashImage_Object = MibScalar
bistPrimaryMainAppFlashImage = _BistPrimaryMainAppFlashImage_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 8),
    _BistPrimaryMainAppFlashImage_Type()
)
bistPrimaryMainAppFlashImage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistPrimaryMainAppFlashImage.setStatus("mandatory")


class _BistSecondaryMainAppFlashImage_Type(Integer32):
    """Custom type bistSecondaryMainAppFlashImage based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistSecondaryMainAppFlashImage_Type.__name__ = "Integer32"
_BistSecondaryMainAppFlashImage_Object = MibScalar
bistSecondaryMainAppFlashImage = _BistSecondaryMainAppFlashImage_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 9),
    _BistSecondaryMainAppFlashImage_Type()
)
bistSecondaryMainAppFlashImage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistSecondaryMainAppFlashImage.setStatus("mandatory")


class _BistBootRomFlashImage_Type(Integer32):
    """Custom type bistBootRomFlashImage based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistBootRomFlashImage_Type.__name__ = "Integer32"
_BistBootRomFlashImage_Object = MibScalar
bistBootRomFlashImage = _BistBootRomFlashImage_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 10),
    _BistBootRomFlashImage_Type()
)
bistBootRomFlashImage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistBootRomFlashImage.setStatus("mandatory")


class _BistEthernetPort1_Type(Integer32):
    """Custom type bistEthernetPort1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistEthernetPort1_Type.__name__ = "Integer32"
_BistEthernetPort1_Object = MibScalar
bistEthernetPort1 = _BistEthernetPort1_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 11),
    _BistEthernetPort1_Type()
)
bistEthernetPort1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistEthernetPort1.setStatus("mandatory")


class _BistEthernetPort2_Type(Integer32):
    """Custom type bistEthernetPort2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistEthernetPort2_Type.__name__ = "Integer32"
_BistEthernetPort2_Object = MibScalar
bistEthernetPort2 = _BistEthernetPort2_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 12),
    _BistEthernetPort2_Type()
)
bistEthernetPort2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistEthernetPort2.setStatus("deprecated")


class _BistInternalPCIBus_Type(Integer32):
    """Custom type bistInternalPCIBus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistInternalPCIBus_Type.__name__ = "Integer32"
_BistInternalPCIBus_Object = MibScalar
bistInternalPCIBus = _BistInternalPCIBus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 13),
    _BistInternalPCIBus_Type()
)
bistInternalPCIBus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistInternalPCIBus.setStatus("deprecated")


class _BistExternalI2CDevices_Type(Integer32):
    """Custom type bistExternalI2CDevices based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistExternalI2CDevices_Type.__name__ = "Integer32"
_BistExternalI2CDevices_Object = MibScalar
bistExternalI2CDevices = _BistExternalI2CDevices_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 14),
    _BistExternalI2CDevices_Type()
)
bistExternalI2CDevices.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistExternalI2CDevices.setStatus("mandatory")


class _BistUSBController_Type(Integer32):
    """Custom type bistUSBController based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistUSBController_Type.__name__ = "Integer32"
_BistUSBController_Object = MibScalar
bistUSBController = _BistUSBController_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 15),
    _BistUSBController_Type()
)
bistUSBController.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistUSBController.setStatus("deprecated")


class _BistVideoCompressorBoard_Type(Integer32):
    """Custom type bistVideoCompressorBoard based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistVideoCompressorBoard_Type.__name__ = "Integer32"
_BistVideoCompressorBoard_Object = MibScalar
bistVideoCompressorBoard = _BistVideoCompressorBoard_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 16),
    _BistVideoCompressorBoard_Type()
)
bistVideoCompressorBoard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistVideoCompressorBoard.setStatus("deprecated")


class _BistRemoteVideo_Type(Integer32):
    """Custom type bistRemoteVideo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistRemoteVideo_Type.__name__ = "Integer32"
_BistRemoteVideo_Object = MibScalar
bistRemoteVideo = _BistRemoteVideo_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 17),
    _BistRemoteVideo_Type()
)
bistRemoteVideo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistRemoteVideo.setStatus("deprecated")


class _BistPrimaryBus_Type(Integer32):
    """Custom type bistPrimaryBus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistPrimaryBus_Type.__name__ = "Integer32"
_BistPrimaryBus_Object = MibScalar
bistPrimaryBus = _BistPrimaryBus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 18),
    _BistPrimaryBus_Type()
)
bistPrimaryBus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistPrimaryBus.setStatus("mandatory")


class _BistInternalEthernetSwitch_Type(Integer32):
    """Custom type bistInternalEthernetSwitch based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistInternalEthernetSwitch_Type.__name__ = "Integer32"
_BistInternalEthernetSwitch_Object = MibScalar
bistInternalEthernetSwitch = _BistInternalEthernetSwitch_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 19),
    _BistInternalEthernetSwitch_Type()
)
bistInternalEthernetSwitch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistInternalEthernetSwitch.setStatus("mandatory")


class _BistVideoCapture_Type(Integer32):
    """Custom type bistVideoCapture based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistVideoCapture_Type.__name__ = "Integer32"
_BistVideoCapture_Object = MibScalar
bistVideoCapture = _BistVideoCapture_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 20),
    _BistVideoCapture_Type()
)
bistVideoCapture.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistVideoCapture.setStatus("mandatory")


class _BistUSBKeyboardMouseEmulation_Type(Integer32):
    """Custom type bistUSBKeyboardMouseEmulation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistUSBKeyboardMouseEmulation_Type.__name__ = "Integer32"
_BistUSBKeyboardMouseEmulation_Object = MibScalar
bistUSBKeyboardMouseEmulation = _BistUSBKeyboardMouseEmulation_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 21),
    _BistUSBKeyboardMouseEmulation_Type()
)
bistUSBKeyboardMouseEmulation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistUSBKeyboardMouseEmulation.setStatus("mandatory")


class _BistUSBMassStorageEmulation_Type(Integer32):
    """Custom type bistUSBMassStorageEmulation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistUSBMassStorageEmulation_Type.__name__ = "Integer32"
_BistUSBMassStorageEmulation_Object = MibScalar
bistUSBMassStorageEmulation = _BistUSBMassStorageEmulation_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 22),
    _BistUSBMassStorageEmulation_Type()
)
bistUSBMassStorageEmulation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistUSBMassStorageEmulation.setStatus("mandatory")


class _BistUSBKeyboardMouseFirmware_Type(Integer32):
    """Custom type bistUSBKeyboardMouseFirmware based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistUSBKeyboardMouseFirmware_Type.__name__ = "Integer32"
_BistUSBKeyboardMouseFirmware_Object = MibScalar
bistUSBKeyboardMouseFirmware = _BistUSBKeyboardMouseFirmware_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 23),
    _BistUSBKeyboardMouseFirmware_Type()
)
bistUSBKeyboardMouseFirmware.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistUSBKeyboardMouseFirmware.setStatus("mandatory")


class _BistUSBMassStorageFirmware_Type(Integer32):
    """Custom type bistUSBMassStorageFirmware based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistUSBMassStorageFirmware_Type.__name__ = "Integer32"
_BistUSBMassStorageFirmware_Object = MibScalar
bistUSBMassStorageFirmware = _BistUSBMassStorageFirmware_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 24),
    _BistUSBMassStorageFirmware_Type()
)
bistUSBMassStorageFirmware.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistUSBMassStorageFirmware.setStatus("mandatory")


class _BistPrimaryCore_Type(Integer32):
    """Custom type bistPrimaryCore based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistPrimaryCore_Type.__name__ = "Integer32"
_BistPrimaryCore_Object = MibScalar
bistPrimaryCore = _BistPrimaryCore_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 25),
    _BistPrimaryCore_Type()
)
bistPrimaryCore.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistPrimaryCore.setStatus("mandatory")


class _BistSecondaryCore_Type(Integer32):
    """Custom type bistSecondaryCore based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistSecondaryCore_Type.__name__ = "Integer32"
_BistSecondaryCore_Object = MibScalar
bistSecondaryCore = _BistSecondaryCore_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 26),
    _BistSecondaryCore_Type()
)
bistSecondaryCore.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistSecondaryCore.setStatus("mandatory")


class _BistInternalIOExpander_Type(Integer32):
    """Custom type bistInternalIOExpander based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistInternalIOExpander_Type.__name__ = "Integer32"
_BistInternalIOExpander_Object = MibScalar
bistInternalIOExpander = _BistInternalIOExpander_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 27),
    _BistInternalIOExpander_Type()
)
bistInternalIOExpander.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistInternalIOExpander.setStatus("mandatory")


class _BistRemoteControlFirmware_Type(Integer32):
    """Custom type bistRemoteControlFirmware based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistRemoteControlFirmware_Type.__name__ = "Integer32"
_BistRemoteControlFirmware_Object = MibScalar
bistRemoteControlFirmware = _BistRemoteControlFirmware_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 28),
    _BistRemoteControlFirmware_Type()
)
bistRemoteControlFirmware.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistRemoteControlFirmware.setStatus("mandatory")


class _BistPhysicalNetworkLink_Type(Integer32):
    """Custom type bistPhysicalNetworkLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistPhysicalNetworkLink_Type.__name__ = "Integer32"
_BistPhysicalNetworkLink_Object = MibScalar
bistPhysicalNetworkLink = _BistPhysicalNetworkLink_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 29),
    _BistPhysicalNetworkLink_Type()
)
bistPhysicalNetworkLink.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistPhysicalNetworkLink.setStatus("mandatory")


class _BistLogicalNetworkLink_Type(Integer32):
    """Custom type bistLogicalNetworkLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistLogicalNetworkLink_Type.__name__ = "Integer32"
_BistLogicalNetworkLink_Object = MibScalar
bistLogicalNetworkLink = _BistLogicalNetworkLink_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 30),
    _BistLogicalNetworkLink_Type()
)
bistLogicalNetworkLink.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistLogicalNetworkLink.setStatus("mandatory")
_BistBladesInstalled_Type = OctetString
_BistBladesInstalled_Object = MibScalar
bistBladesInstalled = _BistBladesInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 33),
    _BistBladesInstalled_Type()
)
bistBladesInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistBladesInstalled.setStatus("mandatory")
_BistBladesCommunicating_Type = OctetString
_BistBladesCommunicating_Object = MibScalar
bistBladesCommunicating = _BistBladesCommunicating_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 49),
    _BistBladesCommunicating_Type()
)
bistBladesCommunicating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistBladesCommunicating.setStatus("mandatory")
_BistBlowersInstalled_Type = OctetString
_BistBlowersInstalled_Object = MibScalar
bistBlowersInstalled = _BistBlowersInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 65),
    _BistBlowersInstalled_Type()
)
bistBlowersInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistBlowersInstalled.setStatus("mandatory")
_BistBlowersFunctional_Type = OctetString
_BistBlowersFunctional_Object = MibScalar
bistBlowersFunctional = _BistBlowersFunctional_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 73),
    _BistBlowersFunctional_Type()
)
bistBlowersFunctional.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistBlowersFunctional.setStatus("mandatory")


class _BistMediaTrayInstalled_Type(Integer32):
    """Custom type bistMediaTrayInstalled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_BistMediaTrayInstalled_Type.__name__ = "Integer32"
_BistMediaTrayInstalled_Object = MibScalar
bistMediaTrayInstalled = _BistMediaTrayInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 74),
    _BistMediaTrayInstalled_Type()
)
bistMediaTrayInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistMediaTrayInstalled.setStatus("mandatory")


class _BistMediaTrayCommunicating_Type(Integer32):
    """Custom type bistMediaTrayCommunicating based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_BistMediaTrayCommunicating_Type.__name__ = "Integer32"
_BistMediaTrayCommunicating_Object = MibScalar
bistMediaTrayCommunicating = _BistMediaTrayCommunicating_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 75),
    _BistMediaTrayCommunicating_Type()
)
bistMediaTrayCommunicating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistMediaTrayCommunicating.setStatus("mandatory")


class _BistOtherMMInstalled_Type(Integer32):
    """Custom type bistOtherMMInstalled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_BistOtherMMInstalled_Type.__name__ = "Integer32"
_BistOtherMMInstalled_Object = MibScalar
bistOtherMMInstalled = _BistOtherMMInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 76),
    _BistOtherMMInstalled_Type()
)
bistOtherMMInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistOtherMMInstalled.setStatus("mandatory")


class _BistOtherMMCommunicating_Type(Integer32):
    """Custom type bistOtherMMCommunicating based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_BistOtherMMCommunicating_Type.__name__ = "Integer32"
_BistOtherMMCommunicating_Object = MibScalar
bistOtherMMCommunicating = _BistOtherMMCommunicating_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 77),
    _BistOtherMMCommunicating_Type()
)
bistOtherMMCommunicating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistOtherMMCommunicating.setStatus("mandatory")
_BistPowerModulesInstalled_Type = OctetString
_BistPowerModulesInstalled_Object = MibScalar
bistPowerModulesInstalled = _BistPowerModulesInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 81),
    _BistPowerModulesInstalled_Type()
)
bistPowerModulesInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistPowerModulesInstalled.setStatus("mandatory")
_BistPowerModulesFunctional_Type = OctetString
_BistPowerModulesFunctional_Object = MibScalar
bistPowerModulesFunctional = _BistPowerModulesFunctional_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 89),
    _BistPowerModulesFunctional_Type()
)
bistPowerModulesFunctional.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistPowerModulesFunctional.setStatus("mandatory")
_BistSwitchModulesInstalled_Type = OctetString
_BistSwitchModulesInstalled_Object = MibScalar
bistSwitchModulesInstalled = _BistSwitchModulesInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 97),
    _BistSwitchModulesInstalled_Type()
)
bistSwitchModulesInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistSwitchModulesInstalled.setStatus("mandatory")
_BistSwitchModulesCommunicating_Type = OctetString
_BistSwitchModulesCommunicating_Object = MibScalar
bistSwitchModulesCommunicating = _BistSwitchModulesCommunicating_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 113),
    _BistSwitchModulesCommunicating_Type()
)
bistSwitchModulesCommunicating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistSwitchModulesCommunicating.setStatus("mandatory")
_BistLastUpdate_Type = OctetString
_BistLastUpdate_Object = MibScalar
bistLastUpdate = _BistLastUpdate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 200),
    _BistLastUpdate_Type()
)
bistLastUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistLastUpdate.setStatus("mandatory")
_RmmBistAndChassisStatus_ObjectIdentity = ObjectIdentity
rmmBistAndChassisStatus = _RmmBistAndChassisStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3)
)


class _RbistRs485Port1_Type(Integer32):
    """Custom type rbistRs485Port1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_RbistRs485Port1_Type.__name__ = "Integer32"
_RbistRs485Port1_Object = MibScalar
rbistRs485Port1 = _RbistRs485Port1_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 2),
    _RbistRs485Port1_Type()
)
rbistRs485Port1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistRs485Port1.setStatus("mandatory")


class _RbistRs485Port2_Type(Integer32):
    """Custom type rbistRs485Port2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_RbistRs485Port2_Type.__name__ = "Integer32"
_RbistRs485Port2_Object = MibScalar
rbistRs485Port2 = _RbistRs485Port2_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 3),
    _RbistRs485Port2_Type()
)
rbistRs485Port2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistRs485Port2.setStatus("mandatory")


class _RbistRtc_Type(Integer32):
    """Custom type rbistRtc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_RbistRtc_Type.__name__ = "Integer32"
_RbistRtc_Object = MibScalar
rbistRtc = _RbistRtc_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 5),
    _RbistRtc_Type()
)
rbistRtc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistRtc.setStatus("mandatory")


class _RbistLocalI2CBus_Type(Integer32):
    """Custom type rbistLocalI2CBus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_RbistLocalI2CBus_Type.__name__ = "Integer32"
_RbistLocalI2CBus_Object = MibScalar
rbistLocalI2CBus = _RbistLocalI2CBus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 7),
    _RbistLocalI2CBus_Type()
)
rbistLocalI2CBus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistLocalI2CBus.setStatus("mandatory")


class _RbistPrimaryMainAppFlashImage_Type(Integer32):
    """Custom type rbistPrimaryMainAppFlashImage based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_RbistPrimaryMainAppFlashImage_Type.__name__ = "Integer32"
_RbistPrimaryMainAppFlashImage_Object = MibScalar
rbistPrimaryMainAppFlashImage = _RbistPrimaryMainAppFlashImage_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 8),
    _RbistPrimaryMainAppFlashImage_Type()
)
rbistPrimaryMainAppFlashImage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistPrimaryMainAppFlashImage.setStatus("mandatory")


class _RbistSecondaryMainAppFlashImage_Type(Integer32):
    """Custom type rbistSecondaryMainAppFlashImage based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_RbistSecondaryMainAppFlashImage_Type.__name__ = "Integer32"
_RbistSecondaryMainAppFlashImage_Object = MibScalar
rbistSecondaryMainAppFlashImage = _RbistSecondaryMainAppFlashImage_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 9),
    _RbistSecondaryMainAppFlashImage_Type()
)
rbistSecondaryMainAppFlashImage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistSecondaryMainAppFlashImage.setStatus("mandatory")


class _RbistBootRomFlashImage_Type(Integer32):
    """Custom type rbistBootRomFlashImage based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_RbistBootRomFlashImage_Type.__name__ = "Integer32"
_RbistBootRomFlashImage_Object = MibScalar
rbistBootRomFlashImage = _RbistBootRomFlashImage_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 10),
    _RbistBootRomFlashImage_Type()
)
rbistBootRomFlashImage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistBootRomFlashImage.setStatus("mandatory")


class _RbistEthernetPort1_Type(Integer32):
    """Custom type rbistEthernetPort1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_RbistEthernetPort1_Type.__name__ = "Integer32"
_RbistEthernetPort1_Object = MibScalar
rbistEthernetPort1 = _RbistEthernetPort1_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 11),
    _RbistEthernetPort1_Type()
)
rbistEthernetPort1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistEthernetPort1.setStatus("mandatory")


class _RbistExternalI2CDevices_Type(Integer32):
    """Custom type rbistExternalI2CDevices based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_RbistExternalI2CDevices_Type.__name__ = "Integer32"
_RbistExternalI2CDevices_Object = MibScalar
rbistExternalI2CDevices = _RbistExternalI2CDevices_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 14),
    _RbistExternalI2CDevices_Type()
)
rbistExternalI2CDevices.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistExternalI2CDevices.setStatus("mandatory")


class _RbistInternalEthernetSwitch_Type(Integer32):
    """Custom type rbistInternalEthernetSwitch based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_RbistInternalEthernetSwitch_Type.__name__ = "Integer32"
_RbistInternalEthernetSwitch_Object = MibScalar
rbistInternalEthernetSwitch = _RbistInternalEthernetSwitch_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 19),
    _RbistInternalEthernetSwitch_Type()
)
rbistInternalEthernetSwitch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistInternalEthernetSwitch.setStatus("mandatory")


class _RbistVideoCapture_Type(Integer32):
    """Custom type rbistVideoCapture based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_RbistVideoCapture_Type.__name__ = "Integer32"
_RbistVideoCapture_Object = MibScalar
rbistVideoCapture = _RbistVideoCapture_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 20),
    _RbistVideoCapture_Type()
)
rbistVideoCapture.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistVideoCapture.setStatus("mandatory")


class _RbistUSBKeyboardMouseEmulation_Type(Integer32):
    """Custom type rbistUSBKeyboardMouseEmulation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_RbistUSBKeyboardMouseEmulation_Type.__name__ = "Integer32"
_RbistUSBKeyboardMouseEmulation_Object = MibScalar
rbistUSBKeyboardMouseEmulation = _RbistUSBKeyboardMouseEmulation_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 21),
    _RbistUSBKeyboardMouseEmulation_Type()
)
rbistUSBKeyboardMouseEmulation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistUSBKeyboardMouseEmulation.setStatus("mandatory")


class _RbistUSBMassStorageEmulation_Type(Integer32):
    """Custom type rbistUSBMassStorageEmulation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_RbistUSBMassStorageEmulation_Type.__name__ = "Integer32"
_RbistUSBMassStorageEmulation_Object = MibScalar
rbistUSBMassStorageEmulation = _RbistUSBMassStorageEmulation_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 22),
    _RbistUSBMassStorageEmulation_Type()
)
rbistUSBMassStorageEmulation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistUSBMassStorageEmulation.setStatus("mandatory")


class _RbistUSBKeyboardMouseFirmware_Type(Integer32):
    """Custom type rbistUSBKeyboardMouseFirmware based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_RbistUSBKeyboardMouseFirmware_Type.__name__ = "Integer32"
_RbistUSBKeyboardMouseFirmware_Object = MibScalar
rbistUSBKeyboardMouseFirmware = _RbistUSBKeyboardMouseFirmware_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 23),
    _RbistUSBKeyboardMouseFirmware_Type()
)
rbistUSBKeyboardMouseFirmware.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistUSBKeyboardMouseFirmware.setStatus("mandatory")


class _RbistUSBMassStorageFirmware_Type(Integer32):
    """Custom type rbistUSBMassStorageFirmware based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_RbistUSBMassStorageFirmware_Type.__name__ = "Integer32"
_RbistUSBMassStorageFirmware_Object = MibScalar
rbistUSBMassStorageFirmware = _RbistUSBMassStorageFirmware_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 24),
    _RbistUSBMassStorageFirmware_Type()
)
rbistUSBMassStorageFirmware.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistUSBMassStorageFirmware.setStatus("mandatory")


class _RbistPrimaryCore_Type(Integer32):
    """Custom type rbistPrimaryCore based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_RbistPrimaryCore_Type.__name__ = "Integer32"
_RbistPrimaryCore_Object = MibScalar
rbistPrimaryCore = _RbistPrimaryCore_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 25),
    _RbistPrimaryCore_Type()
)
rbistPrimaryCore.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistPrimaryCore.setStatus("mandatory")


class _RbistSecondaryCore_Type(Integer32):
    """Custom type rbistSecondaryCore based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_RbistSecondaryCore_Type.__name__ = "Integer32"
_RbistSecondaryCore_Object = MibScalar
rbistSecondaryCore = _RbistSecondaryCore_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 26),
    _RbistSecondaryCore_Type()
)
rbistSecondaryCore.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistSecondaryCore.setStatus("mandatory")


class _RbistInternalIOExpander_Type(Integer32):
    """Custom type rbistInternalIOExpander based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_RbistInternalIOExpander_Type.__name__ = "Integer32"
_RbistInternalIOExpander_Object = MibScalar
rbistInternalIOExpander = _RbistInternalIOExpander_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 27),
    _RbistInternalIOExpander_Type()
)
rbistInternalIOExpander.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistInternalIOExpander.setStatus("mandatory")


class _RbistRemoteControlFirmware_Type(Integer32):
    """Custom type rbistRemoteControlFirmware based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_RbistRemoteControlFirmware_Type.__name__ = "Integer32"
_RbistRemoteControlFirmware_Object = MibScalar
rbistRemoteControlFirmware = _RbistRemoteControlFirmware_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 28),
    _RbistRemoteControlFirmware_Type()
)
rbistRemoteControlFirmware.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistRemoteControlFirmware.setStatus("mandatory")


class _RbistPhysicalNetworkLink_Type(Integer32):
    """Custom type rbistPhysicalNetworkLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_RbistPhysicalNetworkLink_Type.__name__ = "Integer32"
_RbistPhysicalNetworkLink_Object = MibScalar
rbistPhysicalNetworkLink = _RbistPhysicalNetworkLink_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 29),
    _RbistPhysicalNetworkLink_Type()
)
rbistPhysicalNetworkLink.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistPhysicalNetworkLink.setStatus("mandatory")


class _RbistLogicalNetworkLink_Type(Integer32):
    """Custom type rbistLogicalNetworkLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_RbistLogicalNetworkLink_Type.__name__ = "Integer32"
_RbistLogicalNetworkLink_Object = MibScalar
rbistLogicalNetworkLink = _RbistLogicalNetworkLink_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 30),
    _RbistLogicalNetworkLink_Type()
)
rbistLogicalNetworkLink.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistLogicalNetworkLink.setStatus("mandatory")
_RbistBladesInstalled_Type = OctetString
_RbistBladesInstalled_Object = MibScalar
rbistBladesInstalled = _RbistBladesInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 33),
    _RbistBladesInstalled_Type()
)
rbistBladesInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistBladesInstalled.setStatus("mandatory")
_RbistBladesCommunicating_Type = OctetString
_RbistBladesCommunicating_Object = MibScalar
rbistBladesCommunicating = _RbistBladesCommunicating_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 49),
    _RbistBladesCommunicating_Type()
)
rbistBladesCommunicating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistBladesCommunicating.setStatus("mandatory")
_RbistBlowersInstalled_Type = OctetString
_RbistBlowersInstalled_Object = MibScalar
rbistBlowersInstalled = _RbistBlowersInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 65),
    _RbistBlowersInstalled_Type()
)
rbistBlowersInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistBlowersInstalled.setStatus("mandatory")
_RbistBlowersFunctional_Type = OctetString
_RbistBlowersFunctional_Object = MibScalar
rbistBlowersFunctional = _RbistBlowersFunctional_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 73),
    _RbistBlowersFunctional_Type()
)
rbistBlowersFunctional.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistBlowersFunctional.setStatus("mandatory")


class _RbistMediaTrayInstalled_Type(Integer32):
    """Custom type rbistMediaTrayInstalled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_RbistMediaTrayInstalled_Type.__name__ = "Integer32"
_RbistMediaTrayInstalled_Object = MibScalar
rbistMediaTrayInstalled = _RbistMediaTrayInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 74),
    _RbistMediaTrayInstalled_Type()
)
rbistMediaTrayInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistMediaTrayInstalled.setStatus("mandatory")


class _RbistMediaTrayCommunicating_Type(Integer32):
    """Custom type rbistMediaTrayCommunicating based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_RbistMediaTrayCommunicating_Type.__name__ = "Integer32"
_RbistMediaTrayCommunicating_Object = MibScalar
rbistMediaTrayCommunicating = _RbistMediaTrayCommunicating_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 75),
    _RbistMediaTrayCommunicating_Type()
)
rbistMediaTrayCommunicating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistMediaTrayCommunicating.setStatus("mandatory")


class _RbistOtherMMInstalled_Type(Integer32):
    """Custom type rbistOtherMMInstalled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_RbistOtherMMInstalled_Type.__name__ = "Integer32"
_RbistOtherMMInstalled_Object = MibScalar
rbistOtherMMInstalled = _RbistOtherMMInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 76),
    _RbistOtherMMInstalled_Type()
)
rbistOtherMMInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistOtherMMInstalled.setStatus("mandatory")


class _RbistOtherMMCommunicating_Type(Integer32):
    """Custom type rbistOtherMMCommunicating based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_RbistOtherMMCommunicating_Type.__name__ = "Integer32"
_RbistOtherMMCommunicating_Object = MibScalar
rbistOtherMMCommunicating = _RbistOtherMMCommunicating_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 77),
    _RbistOtherMMCommunicating_Type()
)
rbistOtherMMCommunicating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistOtherMMCommunicating.setStatus("mandatory")
_RbistPowerModulesInstalled_Type = OctetString
_RbistPowerModulesInstalled_Object = MibScalar
rbistPowerModulesInstalled = _RbistPowerModulesInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 81),
    _RbistPowerModulesInstalled_Type()
)
rbistPowerModulesInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistPowerModulesInstalled.setStatus("mandatory")
_RbistPowerModulesFunctional_Type = OctetString
_RbistPowerModulesFunctional_Object = MibScalar
rbistPowerModulesFunctional = _RbistPowerModulesFunctional_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 89),
    _RbistPowerModulesFunctional_Type()
)
rbistPowerModulesFunctional.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistPowerModulesFunctional.setStatus("mandatory")
_RbistSwitchModulesInstalled_Type = OctetString
_RbistSwitchModulesInstalled_Object = MibScalar
rbistSwitchModulesInstalled = _RbistSwitchModulesInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 97),
    _RbistSwitchModulesInstalled_Type()
)
rbistSwitchModulesInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistSwitchModulesInstalled.setStatus("mandatory")
_RbistSwitchModulesCommunicating_Type = OctetString
_RbistSwitchModulesCommunicating_Object = MibScalar
rbistSwitchModulesCommunicating = _RbistSwitchModulesCommunicating_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 113),
    _RbistSwitchModulesCommunicating_Type()
)
rbistSwitchModulesCommunicating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistSwitchModulesCommunicating.setStatus("mandatory")
_RbistUpdateTime_Type = OctetString
_RbistUpdateTime_Object = MibScalar
rbistUpdateTime = _RbistUpdateTime_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 200),
    _RbistUpdateTime_Type()
)
rbistUpdateTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistUpdateTime.setStatus("mandatory")
_RbistLastUpdatePrimary_Type = OctetString
_RbistLastUpdatePrimary_Object = MibScalar
rbistLastUpdatePrimary = _RbistLastUpdatePrimary_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 201),
    _RbistLastUpdatePrimary_Type()
)
rbistLastUpdatePrimary.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistLastUpdatePrimary.setStatus("mandatory")
_FanPack_ObjectIdentity = ObjectIdentity
fanPack = _FanPack_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6)
)
_FanPackTable_Object = MibTable
fanPackTable = _FanPackTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6, 1)
)
if mibBuilder.loadTexts:
    fanPackTable.setStatus("mandatory")
_FanPackEntry_Object = MibTableRow
fanPackEntry = _FanPackEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6, 1, 1)
)
fanPackEntry.setIndexNames(
    (0, "BLADE-MIB", "fanPackIndex"),
)
if mibBuilder.loadTexts:
    fanPackEntry.setStatus("mandatory")
_FanPackIndex_Type = Integer32
_FanPackIndex_Object = MibTableColumn
fanPackIndex = _FanPackIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6, 1, 1, 1),
    _FanPackIndex_Type()
)
fanPackIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fanPackIndex.setStatus("mandatory")


class _FanPackExists_Type(Integer32):
    """Custom type fanPackExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_FanPackExists_Type.__name__ = "Integer32"
_FanPackExists_Object = MibTableColumn
fanPackExists = _FanPackExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6, 1, 1, 2),
    _FanPackExists_Type()
)
fanPackExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fanPackExists.setStatus("mandatory")


class _FanPackState_Type(Integer32):
    """Custom type fanPackState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("good", 1),
          ("warning", 2),
          ("bad", 3))
    )


_FanPackState_Type.__name__ = "Integer32"
_FanPackState_Object = MibTableColumn
fanPackState = _FanPackState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6, 1, 1, 3),
    _FanPackState_Type()
)
fanPackState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fanPackState.setStatus("mandatory")


class _FanPackFanCount_Type(Integer32):
    """Custom type fanPackFanCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            255
        )
    )
    namedValues = NamedValues(
        ("unknown", 255)
    )


_FanPackFanCount_Type.__name__ = "Integer32"
_FanPackFanCount_Object = MibTableColumn
fanPackFanCount = _FanPackFanCount_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6, 1, 1, 4),
    _FanPackFanCount_Type()
)
fanPackFanCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fanPackFanCount.setStatus("mandatory")
_FanPackAverageSpeed_Type = OctetString
_FanPackAverageSpeed_Object = MibTableColumn
fanPackAverageSpeed = _FanPackAverageSpeed_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6, 1, 1, 5),
    _FanPackAverageSpeed_Type()
)
fanPackAverageSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fanPackAverageSpeed.setStatus("mandatory")
_FanPackAverageSpeedRPM_Type = OctetString
_FanPackAverageSpeedRPM_Object = MibTableColumn
fanPackAverageSpeedRPM = _FanPackAverageSpeedRPM_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6, 1, 1, 6),
    _FanPackAverageSpeedRPM_Type()
)
fanPackAverageSpeedRPM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fanPackAverageSpeedRPM.setStatus("mandatory")


class _FanPackControllerState_Type(Integer32):
    """Custom type fanPackControllerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("operational", 0),
          ("flashing", 1),
          ("notPresent", 2),
          ("communicationError", 3),
          ("unknown", 255))
    )


_FanPackControllerState_Type.__name__ = "Integer32"
_FanPackControllerState_Object = MibTableColumn
fanPackControllerState = _FanPackControllerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6, 1, 1, 7),
    _FanPackControllerState_Type()
)
fanPackControllerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fanPackControllerState.setStatus("mandatory")
_SystemHealth_ObjectIdentity = ObjectIdentity
systemHealth = _SystemHealth_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7)
)


class _SystemHealthStat_Type(Integer32):
    """Custom type systemHealthStat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              2,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("critical", 0),
          ("nonCritical", 2),
          ("systemLevel", 4),
          ("normal", 255))
    )


_SystemHealthStat_Type.__name__ = "Integer32"
_SystemHealthStat_Object = MibScalar
systemHealthStat = _SystemHealthStat_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7, 1),
    _SystemHealthStat_Type()
)
systemHealthStat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    systemHealthStat.setStatus("mandatory")
_SystemHealthSummaryTable_Object = MibTable
systemHealthSummaryTable = _SystemHealthSummaryTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7, 2)
)
if mibBuilder.loadTexts:
    systemHealthSummaryTable.setStatus("mandatory")
_SystemHealthSummaryEntry_Object = MibTableRow
systemHealthSummaryEntry = _SystemHealthSummaryEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7, 2, 1)
)
systemHealthSummaryEntry.setIndexNames(
    (0, "BLADE-MIB", "systemHealthSummaryIndex"),
)
if mibBuilder.loadTexts:
    systemHealthSummaryEntry.setStatus("mandatory")
_SystemHealthSummaryIndex_Type = Integer32
_SystemHealthSummaryIndex_Object = MibTableColumn
systemHealthSummaryIndex = _SystemHealthSummaryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7, 2, 1, 1),
    _SystemHealthSummaryIndex_Type()
)
systemHealthSummaryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    systemHealthSummaryIndex.setStatus("mandatory")
_SystemHealthSummarySeverity_Type = OctetString
_SystemHealthSummarySeverity_Object = MibTableColumn
systemHealthSummarySeverity = _SystemHealthSummarySeverity_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7, 2, 1, 2),
    _SystemHealthSummarySeverity_Type()
)
systemHealthSummarySeverity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    systemHealthSummarySeverity.setStatus("mandatory")
_SystemHealthSummaryDescription_Type = OctetString
_SystemHealthSummaryDescription_Object = MibTableColumn
systemHealthSummaryDescription = _SystemHealthSummaryDescription_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7, 2, 1, 3),
    _SystemHealthSummaryDescription_Type()
)
systemHealthSummaryDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    systemHealthSummaryDescription.setStatus("mandatory")
_SystemHealthSummaryDateTime_Type = OctetString
_SystemHealthSummaryDateTime_Object = MibTableColumn
systemHealthSummaryDateTime = _SystemHealthSummaryDateTime_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7, 2, 1, 4),
    _SystemHealthSummaryDateTime_Type()
)
systemHealthSummaryDateTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    systemHealthSummaryDateTime.setStatus("mandatory")
_Leds_ObjectIdentity = ObjectIdentity
leds = _Leds_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8)
)
_FrontPanelLEDs_ObjectIdentity = ObjectIdentity
frontPanelLEDs = _FrontPanelLEDs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 1)
)


class _SystemErrorLED_Type(Integer32):
    """Custom type systemErrorLED based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_SystemErrorLED_Type.__name__ = "Integer32"
_SystemErrorLED_Object = MibScalar
systemErrorLED = _SystemErrorLED_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 1, 1),
    _SystemErrorLED_Type()
)
systemErrorLED.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    systemErrorLED.setStatus("mandatory")


class _InformationLED_Type(Integer32):
    """Custom type informationLED based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_InformationLED_Type.__name__ = "Integer32"
_InformationLED_Object = MibScalar
informationLED = _InformationLED_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 1, 2),
    _InformationLED_Type()
)
informationLED.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    informationLED.setStatus("mandatory")


class _TemperatureLED_Type(Integer32):
    """Custom type temperatureLED based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_TemperatureLED_Type.__name__ = "Integer32"
_TemperatureLED_Object = MibScalar
temperatureLED = _TemperatureLED_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 1, 3),
    _TemperatureLED_Type()
)
temperatureLED.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureLED.setStatus("mandatory")


class _IdentityLED_Type(Integer32):
    """Custom type identityLED based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("blinking", 2),
          ("notAvailable", 3))
    )


_IdentityLED_Type.__name__ = "Integer32"
_IdentityLED_Object = MibScalar
identityLED = _IdentityLED_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 1, 4),
    _IdentityLED_Type()
)
identityLED.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    identityLED.setStatus("mandatory")
_BladeLEDs_ObjectIdentity = ObjectIdentity
bladeLEDs = _BladeLEDs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2)
)
_BladeLEDsTable_Object = MibTable
bladeLEDsTable = _BladeLEDsTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1)
)
if mibBuilder.loadTexts:
    bladeLEDsTable.setStatus("mandatory")
_BladeLEDsEntry_Object = MibTableRow
bladeLEDsEntry = _BladeLEDsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1)
)
bladeLEDsEntry.setIndexNames(
    (0, "BLADE-MIB", "bladeStatusIndex"),
)
if mibBuilder.loadTexts:
    bladeLEDsEntry.setStatus("mandatory")
_LedBladeIndex_Type = Integer32
_LedBladeIndex_Object = MibTableColumn
ledBladeIndex = _LedBladeIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 1),
    _LedBladeIndex_Type()
)
ledBladeIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledBladeIndex.setStatus("mandatory")


class _LedBladeId_Type(Integer32):
    """Custom type ledBladeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_LedBladeId_Type.__name__ = "Integer32"
_LedBladeId_Object = MibTableColumn
ledBladeId = _LedBladeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 2),
    _LedBladeId_Type()
)
ledBladeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledBladeId.setStatus("mandatory")


class _LedBladeExists_Type(Integer32):
    """Custom type ledBladeExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_LedBladeExists_Type.__name__ = "Integer32"
_LedBladeExists_Object = MibTableColumn
ledBladeExists = _LedBladeExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 3),
    _LedBladeExists_Type()
)
ledBladeExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledBladeExists.setStatus("mandatory")


class _LedBladePowerState_Type(Integer32):
    """Custom type ledBladePowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("standby", 3),
          ("hibernate", 4))
    )


_LedBladePowerState_Type.__name__ = "Integer32"
_LedBladePowerState_Object = MibTableColumn
ledBladePowerState = _LedBladePowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 4),
    _LedBladePowerState_Type()
)
ledBladePowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledBladePowerState.setStatus("mandatory")


class _LedBladeHealthState_Type(Integer32):
    """Custom type ledBladeHealthState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("good", 1),
          ("warning", 2),
          ("critical", 3),
          ("kernelMode", 4),
          ("discovering", 5),
          ("commError", 6),
          ("noPower", 7),
          ("flashing", 8),
          ("initFailure", 9),
          ("insufficientPower", 10),
          ("powerDenied", 11))
    )


_LedBladeHealthState_Type.__name__ = "Integer32"
_LedBladeHealthState_Object = MibTableColumn
ledBladeHealthState = _LedBladeHealthState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 5),
    _LedBladeHealthState_Type()
)
ledBladeHealthState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledBladeHealthState.setStatus("mandatory")
_LedBladeName_Type = OctetString
_LedBladeName_Object = MibTableColumn
ledBladeName = _LedBladeName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 6),
    _LedBladeName_Type()
)
ledBladeName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledBladeName.setStatus("mandatory")


class _LedBladeSystemError_Type(Integer32):
    """Custom type ledBladeSystemError based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_LedBladeSystemError_Type.__name__ = "Integer32"
_LedBladeSystemError_Object = MibTableColumn
ledBladeSystemError = _LedBladeSystemError_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 7),
    _LedBladeSystemError_Type()
)
ledBladeSystemError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledBladeSystemError.setStatus("mandatory")


class _LedBladeInformation_Type(Integer32):
    """Custom type ledBladeInformation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_LedBladeInformation_Type.__name__ = "Integer32"
_LedBladeInformation_Object = MibTableColumn
ledBladeInformation = _LedBladeInformation_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 8),
    _LedBladeInformation_Type()
)
ledBladeInformation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ledBladeInformation.setStatus("mandatory")


class _LedBladeKVM_Type(Integer32):
    """Custom type ledBladeKVM based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("blinking", 2))
    )


_LedBladeKVM_Type.__name__ = "Integer32"
_LedBladeKVM_Object = MibTableColumn
ledBladeKVM = _LedBladeKVM_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 9),
    _LedBladeKVM_Type()
)
ledBladeKVM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledBladeKVM.setStatus("mandatory")


class _LedBladeMediaTray_Type(Integer32):
    """Custom type ledBladeMediaTray based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("blinking", 2))
    )


_LedBladeMediaTray_Type.__name__ = "Integer32"
_LedBladeMediaTray_Object = MibTableColumn
ledBladeMediaTray = _LedBladeMediaTray_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 10),
    _LedBladeMediaTray_Type()
)
ledBladeMediaTray.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledBladeMediaTray.setStatus("mandatory")


class _LedBladeIdentity_Type(Integer32):
    """Custom type ledBladeIdentity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("blinking", 2))
    )


_LedBladeIdentity_Type.__name__ = "Integer32"
_LedBladeIdentity_Object = MibTableColumn
ledBladeIdentity = _LedBladeIdentity_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 11),
    _LedBladeIdentity_Type()
)
ledBladeIdentity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ledBladeIdentity.setStatus("mandatory")
_BladeLEDsDetailsTable_Object = MibTable
bladeLEDsDetailsTable = _BladeLEDsDetailsTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 2)
)
if mibBuilder.loadTexts:
    bladeLEDsDetailsTable.setStatus("mandatory")
_BladeLEDsDetailsEntry_Object = MibTableRow
bladeLEDsDetailsEntry = _BladeLEDsDetailsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 2, 1)
)
bladeLEDsDetailsEntry.setIndexNames(
    (0, "BLADE-MIB", "ledIndex"),
)
if mibBuilder.loadTexts:
    bladeLEDsDetailsEntry.setStatus("mandatory")
_LedIndex_Type = Integer32
_LedIndex_Object = MibTableColumn
ledIndex = _LedIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 2, 1, 1),
    _LedIndex_Type()
)
ledIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledIndex.setStatus("mandatory")
_LedBladeBayNumber_Type = OctetString
_LedBladeBayNumber_Object = MibTableColumn
ledBladeBayNumber = _LedBladeBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 2, 1, 2),
    _LedBladeBayNumber_Type()
)
ledBladeBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledBladeBayNumber.setStatus("mandatory")
_LedBladeComponentType_Type = OctetString
_LedBladeComponentType_Object = MibTableColumn
ledBladeComponentType = _LedBladeComponentType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 2, 1, 3),
    _LedBladeComponentType_Type()
)
ledBladeComponentType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledBladeComponentType.setStatus("mandatory")
_LedBladeLabel_Type = OctetString
_LedBladeLabel_Object = MibTableColumn
ledBladeLabel = _LedBladeLabel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 2, 1, 4),
    _LedBladeLabel_Type()
)
ledBladeLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledBladeLabel.setStatus("mandatory")


class _LedBladeState_Type(Integer32):
    """Custom type ledBladeState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("blinking", 2))
    )


_LedBladeState_Type.__name__ = "Integer32"
_LedBladeState_Object = MibTableColumn
ledBladeState = _LedBladeState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 2, 1, 5),
    _LedBladeState_Type()
)
ledBladeState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledBladeState.setStatus("mandatory")
_LedBladeLocation_Type = OctetString
_LedBladeLocation_Object = MibTableColumn
ledBladeLocation = _LedBladeLocation_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 2, 1, 6),
    _LedBladeLocation_Type()
)
ledBladeLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledBladeLocation.setStatus("mandatory")
_TelcoPanelLEDs_ObjectIdentity = ObjectIdentity
telcoPanelLEDs = _TelcoPanelLEDs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 3)
)


class _CriticalLED_Type(Integer32):
    """Custom type criticalLED based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_CriticalLED_Type.__name__ = "Integer32"
_CriticalLED_Object = MibScalar
criticalLED = _CriticalLED_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 3, 1),
    _CriticalLED_Type()
)
criticalLED.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    criticalLED.setStatus("mandatory")


class _MajorLED_Type(Integer32):
    """Custom type majorLED based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_MajorLED_Type.__name__ = "Integer32"
_MajorLED_Object = MibScalar
majorLED = _MajorLED_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 3, 2),
    _MajorLED_Type()
)
majorLED.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    majorLED.setStatus("mandatory")


class _MinorLED_Type(Integer32):
    """Custom type minorLED based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_MinorLED_Type.__name__ = "Integer32"
_MinorLED_Object = MibScalar
minorLED = _MinorLED_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 3, 3),
    _MinorLED_Type()
)
minorLED.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    minorLED.setStatus("mandatory")


class _TelcoIdentityLED_Type(Integer32):
    """Custom type telcoIdentityLED based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("blinking", 2),
          ("notAvailable", 3))
    )


_TelcoIdentityLED_Type.__name__ = "Integer32"
_TelcoIdentityLED_Object = MibScalar
telcoIdentityLED = _TelcoIdentityLED_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 3, 4),
    _TelcoIdentityLED_Type()
)
telcoIdentityLED.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    telcoIdentityLED.setStatus("mandatory")


class _TelcoColorSel_Type(Integer32):
    """Custom type telcoColorSel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("amber", 0),
          ("red", 1))
    )


_TelcoColorSel_Type.__name__ = "Integer32"
_TelcoColorSel_Object = MibScalar
telcoColorSel = _TelcoColorSel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 3, 5),
    _TelcoColorSel_Type()
)
telcoColorSel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    telcoColorSel.setStatus("mandatory")


class _CriticalityAssertionMode_Type(Integer32):
    """Custom type criticalityAssertionMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_CriticalityAssertionMode_Type.__name__ = "Integer32"
_CriticalityAssertionMode_Object = MibScalar
criticalityAssertionMode = _CriticalityAssertionMode_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 3, 6),
    _CriticalityAssertionMode_Type()
)
criticalityAssertionMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    criticalityAssertionMode.setStatus("mandatory")
_SmLEDs_ObjectIdentity = ObjectIdentity
smLEDs = _SmLEDs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 4)
)
_SmLEDsTable_Object = MibTable
smLEDsTable = _SmLEDsTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 4, 1)
)
if mibBuilder.loadTexts:
    smLEDsTable.setStatus("mandatory")
_SmLEDsEntry_Object = MibTableRow
smLEDsEntry = _SmLEDsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 4, 1, 1)
)
smLEDsEntry.setIndexNames(
    (0, "BLADE-MIB", "ledSMIndex"),
)
if mibBuilder.loadTexts:
    smLEDsEntry.setStatus("mandatory")


class _LedSMIndex_Type(Integer32):
    """Custom type ledSMIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_LedSMIndex_Type.__name__ = "Integer32"
_LedSMIndex_Object = MibTableColumn
ledSMIndex = _LedSMIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 4, 1, 1, 1),
    _LedSMIndex_Type()
)
ledSMIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledSMIndex.setStatus("mandatory")


class _LedSMLEDs_Type(OctetString):
    """Custom type ledSMLEDs based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(256, 256),
    )
    fixed_length = 256


_LedSMLEDs_Type.__name__ = "OctetString"
_LedSMLEDs_Object = MibTableColumn
ledSMLEDs = _LedSMLEDs_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 4, 1, 1, 2),
    _LedSMLEDs_Type()
)
ledSMLEDs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledSMLEDs.setStatus("mandatory")
_BlowerLEDs_ObjectIdentity = ObjectIdentity
blowerLEDs = _BlowerLEDs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 5)
)
_BlowerLEDsTable_Object = MibTable
blowerLEDsTable = _BlowerLEDsTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 5, 1)
)
if mibBuilder.loadTexts:
    blowerLEDsTable.setStatus("mandatory")
_BlowerLEDsEntry_Object = MibTableRow
blowerLEDsEntry = _BlowerLEDsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 5, 1, 1)
)
blowerLEDsEntry.setIndexNames(
    (0, "BLADE-MIB", "ledBlowerIndex"),
)
if mibBuilder.loadTexts:
    blowerLEDsEntry.setStatus("mandatory")


class _LedBlowerIndex_Type(Integer32):
    """Custom type ledBlowerIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_LedBlowerIndex_Type.__name__ = "Integer32"
_LedBlowerIndex_Object = MibTableColumn
ledBlowerIndex = _LedBlowerIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 5, 1, 1, 1),
    _LedBlowerIndex_Type()
)
ledBlowerIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledBlowerIndex.setStatus("mandatory")


class _LedBlowerId_Type(Integer32):
    """Custom type ledBlowerId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("blower1", 1),
          ("blower2", 2),
          ("blower3", 3),
          ("blower4", 4))
    )


_LedBlowerId_Type.__name__ = "Integer32"
_LedBlowerId_Object = MibTableColumn
ledBlowerId = _LedBlowerId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 5, 1, 1, 2),
    _LedBlowerId_Type()
)
ledBlowerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledBlowerId.setStatus("mandatory")


class _LedBlowerExists_Type(Integer32):
    """Custom type ledBlowerExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_LedBlowerExists_Type.__name__ = "Integer32"
_LedBlowerExists_Object = MibTableColumn
ledBlowerExists = _LedBlowerExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 5, 1, 1, 3),
    _LedBlowerExists_Type()
)
ledBlowerExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledBlowerExists.setStatus("mandatory")


class _LedBlowerError_Type(Integer32):
    """Custom type ledBlowerError based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("notAvailable", 2))
    )


_LedBlowerError_Type.__name__ = "Integer32"
_LedBlowerError_Object = MibTableColumn
ledBlowerError = _LedBlowerError_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 5, 1, 1, 4),
    _LedBlowerError_Type()
)
ledBlowerError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledBlowerError.setStatus("mandatory")
_FanPackLEDs_ObjectIdentity = ObjectIdentity
fanPackLEDs = _FanPackLEDs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 6)
)
_FanPackLEDsTable_Object = MibTable
fanPackLEDsTable = _FanPackLEDsTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 6, 1)
)
if mibBuilder.loadTexts:
    fanPackLEDsTable.setStatus("mandatory")
_FanPackLEDsEntry_Object = MibTableRow
fanPackLEDsEntry = _FanPackLEDsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 6, 1, 1)
)
fanPackLEDsEntry.setIndexNames(
    (0, "BLADE-MIB", "ledFanPackIndex"),
)
if mibBuilder.loadTexts:
    fanPackLEDsEntry.setStatus("mandatory")


class _LedFanPackIndex_Type(Integer32):
    """Custom type ledFanPackIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_LedFanPackIndex_Type.__name__ = "Integer32"
_LedFanPackIndex_Object = MibTableColumn
ledFanPackIndex = _LedFanPackIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 6, 1, 1, 1),
    _LedFanPackIndex_Type()
)
ledFanPackIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledFanPackIndex.setStatus("mandatory")


class _LedFanPackId_Type(Integer32):
    """Custom type ledFanPackId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("fanPack1", 1),
          ("fanPack2", 2),
          ("fanPack3", 3),
          ("fanPack4", 4))
    )


_LedFanPackId_Type.__name__ = "Integer32"
_LedFanPackId_Object = MibTableColumn
ledFanPackId = _LedFanPackId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 6, 1, 1, 2),
    _LedFanPackId_Type()
)
ledFanPackId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledFanPackId.setStatus("mandatory")


class _LedFanPackExists_Type(Integer32):
    """Custom type ledFanPackExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_LedFanPackExists_Type.__name__ = "Integer32"
_LedFanPackExists_Object = MibTableColumn
ledFanPackExists = _LedFanPackExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 6, 1, 1, 3),
    _LedFanPackExists_Type()
)
ledFanPackExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledFanPackExists.setStatus("mandatory")


class _LedFanPackError_Type(Integer32):
    """Custom type ledFanPackError based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_LedFanPackError_Type.__name__ = "Integer32"
_LedFanPackError_Object = MibTableColumn
ledFanPackError = _LedFanPackError_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 6, 1, 1, 4),
    _LedFanPackError_Type()
)
ledFanPackError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledFanPackError.setStatus("mandatory")
_MtStatusLEDs_ObjectIdentity = ObjectIdentity
mtStatusLEDs = _MtStatusLEDs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 7)
)
_MtStatusLEDsTable_Object = MibTable
mtStatusLEDsTable = _MtStatusLEDsTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 7, 1)
)
if mibBuilder.loadTexts:
    mtStatusLEDsTable.setStatus("mandatory")
_MtStatusLEDsEntry_Object = MibTableRow
mtStatusLEDsEntry = _MtStatusLEDsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 7, 1, 1)
)
mtStatusLEDsEntry.setIndexNames(
    (0, "BLADE-MIB", "ledMediaTrayIndex"),
)
if mibBuilder.loadTexts:
    mtStatusLEDsEntry.setStatus("mandatory")


class _LedMediaTrayIndex_Type(Integer32):
    """Custom type ledMediaTrayIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_LedMediaTrayIndex_Type.__name__ = "Integer32"
_LedMediaTrayIndex_Object = MibTableColumn
ledMediaTrayIndex = _LedMediaTrayIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 7, 1, 1, 1),
    _LedMediaTrayIndex_Type()
)
ledMediaTrayIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledMediaTrayIndex.setStatus("mandatory")


class _LedMediaTrayId_Type(Integer32):
    """Custom type ledMediaTrayId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("topmediatray", 1),
          ("botmediatray", 2))
    )


_LedMediaTrayId_Type.__name__ = "Integer32"
_LedMediaTrayId_Object = MibTableColumn
ledMediaTrayId = _LedMediaTrayId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 7, 1, 1, 2),
    _LedMediaTrayId_Type()
)
ledMediaTrayId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledMediaTrayId.setStatus("mandatory")


class _LedMediaTrayExists_Type(Integer32):
    """Custom type ledMediaTrayExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_LedMediaTrayExists_Type.__name__ = "Integer32"
_LedMediaTrayExists_Object = MibTableColumn
ledMediaTrayExists = _LedMediaTrayExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 7, 1, 1, 3),
    _LedMediaTrayExists_Type()
)
ledMediaTrayExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledMediaTrayExists.setStatus("mandatory")


class _LedMediaTrayFault_Type(Integer32):
    """Custom type ledMediaTrayFault based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_LedMediaTrayFault_Type.__name__ = "Integer32"
_LedMediaTrayFault_Object = MibTableColumn
ledMediaTrayFault = _LedMediaTrayFault_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 7, 1, 1, 5),
    _LedMediaTrayFault_Type()
)
ledMediaTrayFault.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledMediaTrayFault.setStatus("mandatory")
_TapStatusLEDs_ObjectIdentity = ObjectIdentity
tapStatusLEDs = _TapStatusLEDs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 8)
)


class _TapExists_Type(Integer32):
    """Custom type tapExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_TapExists_Type.__name__ = "Integer32"
_TapExists_Object = MibScalar
tapExists = _TapExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 8, 3),
    _TapExists_Type()
)
tapExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapExists.setStatus("mandatory")


class _TapFRRLED_Type(Integer32):
    """Custom type tapFRRLED based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_TapFRRLED_Type.__name__ = "Integer32"
_TapFRRLED_Object = MibScalar
tapFRRLED = _TapFRRLED_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 8, 4),
    _TapFRRLED_Type()
)
tapFRRLED.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapFRRLED.setStatus("mandatory")


class _TapFaultLED_Type(Integer32):
    """Custom type tapFaultLED based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_TapFaultLED_Type.__name__ = "Integer32"
_TapFaultLED_Object = MibScalar
tapFaultLED = _TapFaultLED_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 8, 5),
    _TapFaultLED_Type()
)
tapFaultLED.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapFaultLED.setStatus("mandatory")
_NcStatusLEDs_ObjectIdentity = ObjectIdentity
ncStatusLEDs = _NcStatusLEDs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 9)
)
_NcStatusLEDsTable_Object = MibTable
ncStatusLEDsTable = _NcStatusLEDsTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 9, 1)
)
if mibBuilder.loadTexts:
    ncStatusLEDsTable.setStatus("deprecated")
_NcStatusLEDsEntry_Object = MibTableRow
ncStatusLEDsEntry = _NcStatusLEDsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 9, 1, 1)
)
ncStatusLEDsEntry.setIndexNames(
    (0, "BLADE-MIB", "ledNetworkClockIndex"),
)
if mibBuilder.loadTexts:
    ncStatusLEDsEntry.setStatus("deprecated")


class _LedNetworkClockIndex_Type(Integer32):
    """Custom type ledNetworkClockIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_LedNetworkClockIndex_Type.__name__ = "Integer32"
_LedNetworkClockIndex_Object = MibTableColumn
ledNetworkClockIndex = _LedNetworkClockIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 9, 1, 1, 1),
    _LedNetworkClockIndex_Type()
)
ledNetworkClockIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledNetworkClockIndex.setStatus("deprecated")


class _LedNetworkClockId_Type(Integer32):
    """Custom type ledNetworkClockId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("networkclock1", 1),
          ("networkclock2", 2))
    )


_LedNetworkClockId_Type.__name__ = "Integer32"
_LedNetworkClockId_Object = MibTableColumn
ledNetworkClockId = _LedNetworkClockId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 9, 1, 1, 2),
    _LedNetworkClockId_Type()
)
ledNetworkClockId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledNetworkClockId.setStatus("deprecated")


class _LedNetworkClockExists_Type(Integer32):
    """Custom type ledNetworkClockExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_LedNetworkClockExists_Type.__name__ = "Integer32"
_LedNetworkClockExists_Object = MibTableColumn
ledNetworkClockExists = _LedNetworkClockExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 9, 1, 1, 3),
    _LedNetworkClockExists_Type()
)
ledNetworkClockExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledNetworkClockExists.setStatus("deprecated")


class _LedNetworkClockFRR_Type(Integer32):
    """Custom type ledNetworkClockFRR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_LedNetworkClockFRR_Type.__name__ = "Integer32"
_LedNetworkClockFRR_Object = MibTableColumn
ledNetworkClockFRR = _LedNetworkClockFRR_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 9, 1, 1, 4),
    _LedNetworkClockFRR_Type()
)
ledNetworkClockFRR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledNetworkClockFRR.setStatus("deprecated")


class _LedNetworkClockFault_Type(Integer32):
    """Custom type ledNetworkClockFault based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_LedNetworkClockFault_Type.__name__ = "Integer32"
_LedNetworkClockFault_Object = MibTableColumn
ledNetworkClockFault = _LedNetworkClockFault_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 9, 1, 1, 5),
    _LedNetworkClockFault_Type()
)
ledNetworkClockFault.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledNetworkClockFault.setStatus("deprecated")
_MxStatusLEDs_ObjectIdentity = ObjectIdentity
mxStatusLEDs = _MxStatusLEDs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 10)
)
_MxStatusLEDsTable_Object = MibTable
mxStatusLEDsTable = _MxStatusLEDsTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 10, 1)
)
if mibBuilder.loadTexts:
    mxStatusLEDsTable.setStatus("mandatory")
_MxStatusLEDsEntry_Object = MibTableRow
mxStatusLEDsEntry = _MxStatusLEDsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 10, 1, 1)
)
mxStatusLEDsEntry.setIndexNames(
    (0, "BLADE-MIB", "ledMuxIndex"),
)
if mibBuilder.loadTexts:
    mxStatusLEDsEntry.setStatus("mandatory")


class _LedMuxIndex_Type(Integer32):
    """Custom type ledMuxIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_LedMuxIndex_Type.__name__ = "Integer32"
_LedMuxIndex_Object = MibTableColumn
ledMuxIndex = _LedMuxIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 10, 1, 1, 1),
    _LedMuxIndex_Type()
)
ledMuxIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledMuxIndex.setStatus("mandatory")


class _LedMuxId_Type(Integer32):
    """Custom type ledMuxId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("mux1", 1),
          ("mux2", 2))
    )


_LedMuxId_Type.__name__ = "Integer32"
_LedMuxId_Object = MibTableColumn
ledMuxId = _LedMuxId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 10, 1, 1, 2),
    _LedMuxId_Type()
)
ledMuxId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledMuxId.setStatus("mandatory")


class _LedMuxExists_Type(Integer32):
    """Custom type ledMuxExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_LedMuxExists_Type.__name__ = "Integer32"
_LedMuxExists_Object = MibTableColumn
ledMuxExists = _LedMuxExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 10, 1, 1, 3),
    _LedMuxExists_Type()
)
ledMuxExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledMuxExists.setStatus("mandatory")


class _LedMuxFRR_Type(Integer32):
    """Custom type ledMuxFRR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_LedMuxFRR_Type.__name__ = "Integer32"
_LedMuxFRR_Object = MibTableColumn
ledMuxFRR = _LedMuxFRR_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 10, 1, 1, 4),
    _LedMuxFRR_Type()
)
ledMuxFRR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledMuxFRR.setStatus("mandatory")


class _LedMuxFault_Type(Integer32):
    """Custom type ledMuxFault based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_LedMuxFault_Type.__name__ = "Integer32"
_LedMuxFault_Object = MibTableColumn
ledMuxFault = _LedMuxFault_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 10, 1, 1, 5),
    _LedMuxFault_Type()
)
ledMuxFault.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledMuxFault.setStatus("mandatory")
_StorageLEDs_ObjectIdentity = ObjectIdentity
storageLEDs = _StorageLEDs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 11)
)
_StorageLEDsTable_Object = MibTable
storageLEDsTable = _StorageLEDsTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 11, 1)
)
if mibBuilder.loadTexts:
    storageLEDsTable.setStatus("mandatory")
_StorageLEDsEntry_Object = MibTableRow
storageLEDsEntry = _StorageLEDsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 11, 1, 1)
)
storageLEDsEntry.setIndexNames(
    (0, "BLADE-MIB", "ledStorageIndex"),
)
if mibBuilder.loadTexts:
    storageLEDsEntry.setStatus("mandatory")
_LedStorageIndex_Type = Integer32
_LedStorageIndex_Object = MibTableColumn
ledStorageIndex = _LedStorageIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 11, 1, 1, 1),
    _LedStorageIndex_Type()
)
ledStorageIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledStorageIndex.setStatus("mandatory")


class _LedStorageId_Type(Integer32):
    """Custom type ledStorageId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("storage1", 1),
          ("storage2", 2))
    )


_LedStorageId_Type.__name__ = "Integer32"
_LedStorageId_Object = MibTableColumn
ledStorageId = _LedStorageId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 11, 1, 1, 2),
    _LedStorageId_Type()
)
ledStorageId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledStorageId.setStatus("mandatory")


class _LedStorageExists_Type(Integer32):
    """Custom type ledStorageExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_LedStorageExists_Type.__name__ = "Integer32"
_LedStorageExists_Object = MibTableColumn
ledStorageExists = _LedStorageExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 11, 1, 1, 3),
    _LedStorageExists_Type()
)
ledStorageExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledStorageExists.setStatus("mandatory")


class _LedStorageError_Type(Integer32):
    """Custom type ledStorageError based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("blinking", 2))
    )


_LedStorageError_Type.__name__ = "Integer32"
_LedStorageError_Object = MibTableColumn
ledStorageError = _LedStorageError_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 11, 1, 1, 4),
    _LedStorageError_Type()
)
ledStorageError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledStorageError.setStatus("mandatory")
_TelcoSystemHealth_ObjectIdentity = ObjectIdentity
telcoSystemHealth = _TelcoSystemHealth_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 9)
)


class _TelcoSystemHealthStat_Type(Integer32):
    """Custom type telcoSystemHealthStat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              255)
        )
    )
    namedValues = NamedValues(
        *(("minor", 1),
          ("minor-power", 2),
          ("major", 3),
          ("major-power", 4),
          ("critical", 5),
          ("critical-power", 6),
          ("normal", 255))
    )


_TelcoSystemHealthStat_Type.__name__ = "Integer32"
_TelcoSystemHealthStat_Object = MibScalar
telcoSystemHealthStat = _TelcoSystemHealthStat_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 9, 1),
    _TelcoSystemHealthStat_Type()
)
telcoSystemHealthStat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    telcoSystemHealthStat.setStatus("mandatory")
_TelcoSystemHealthSummaryTable_Object = MibTable
telcoSystemHealthSummaryTable = _TelcoSystemHealthSummaryTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 9, 2)
)
if mibBuilder.loadTexts:
    telcoSystemHealthSummaryTable.setStatus("mandatory")
_TelcoSystemHealthSummaryEntry_Object = MibTableRow
telcoSystemHealthSummaryEntry = _TelcoSystemHealthSummaryEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 9, 2, 1)
)
telcoSystemHealthSummaryEntry.setIndexNames(
    (0, "BLADE-MIB", "telcoSystemHealthSummaryIndex"),
)
if mibBuilder.loadTexts:
    telcoSystemHealthSummaryEntry.setStatus("mandatory")
_TelcoSystemHealthSummaryIndex_Type = Integer32
_TelcoSystemHealthSummaryIndex_Object = MibTableColumn
telcoSystemHealthSummaryIndex = _TelcoSystemHealthSummaryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 9, 2, 1, 1),
    _TelcoSystemHealthSummaryIndex_Type()
)
telcoSystemHealthSummaryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    telcoSystemHealthSummaryIndex.setStatus("mandatory")
_TelcoSystemHealthSummarySeverity_Type = OctetString
_TelcoSystemHealthSummarySeverity_Object = MibTableColumn
telcoSystemHealthSummarySeverity = _TelcoSystemHealthSummarySeverity_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 9, 2, 1, 2),
    _TelcoSystemHealthSummarySeverity_Type()
)
telcoSystemHealthSummarySeverity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    telcoSystemHealthSummarySeverity.setStatus("mandatory")
_TelcoSystemHealthSummaryDescription_Type = OctetString
_TelcoSystemHealthSummaryDescription_Object = MibTableColumn
telcoSystemHealthSummaryDescription = _TelcoSystemHealthSummaryDescription_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 9, 2, 1, 3),
    _TelcoSystemHealthSummaryDescription_Type()
)
telcoSystemHealthSummaryDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    telcoSystemHealthSummaryDescription.setStatus("mandatory")
_TelcoSystemHealthSummaryEventName_Type = Integer32
_TelcoSystemHealthSummaryEventName_Object = MibTableColumn
telcoSystemHealthSummaryEventName = _TelcoSystemHealthSummaryEventName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 9, 2, 1, 4),
    _TelcoSystemHealthSummaryEventName_Type()
)
telcoSystemHealthSummaryEventName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    telcoSystemHealthSummaryEventName.setStatus("mandatory")
_TelcoSystemHealthSummaryEventKeyID_Type = OctetString
_TelcoSystemHealthSummaryEventKeyID_Object = MibTableColumn
telcoSystemHealthSummaryEventKeyID = _TelcoSystemHealthSummaryEventKeyID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 9, 2, 1, 5),
    _TelcoSystemHealthSummaryEventKeyID_Type()
)
telcoSystemHealthSummaryEventKeyID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    telcoSystemHealthSummaryEventKeyID.setStatus("mandatory")


class _TelcoSystemHealthSummaryAcknowledge_Type(Integer32):
    """Custom type telcoSystemHealthSummaryAcknowledge based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("unacknowledged", 0),
          ("acknowledged", 1))
    )


_TelcoSystemHealthSummaryAcknowledge_Type.__name__ = "Integer32"
_TelcoSystemHealthSummaryAcknowledge_Object = MibTableColumn
telcoSystemHealthSummaryAcknowledge = _TelcoSystemHealthSummaryAcknowledge_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 9, 2, 1, 6),
    _TelcoSystemHealthSummaryAcknowledge_Type()
)
telcoSystemHealthSummaryAcknowledge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    telcoSystemHealthSummaryAcknowledge.setStatus("mandatory")
_TelcoSystemHealthSummaryAssertTime_Type = OctetString
_TelcoSystemHealthSummaryAssertTime_Object = MibTableColumn
telcoSystemHealthSummaryAssertTime = _TelcoSystemHealthSummaryAssertTime_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 9, 2, 1, 7),
    _TelcoSystemHealthSummaryAssertTime_Type()
)
telcoSystemHealthSummaryAssertTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    telcoSystemHealthSummaryAssertTime.setStatus("mandatory")
_FuelGauge_ObjectIdentity = ObjectIdentity
fuelGauge = _FuelGauge_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10)
)
_FuelGaugeInformation_ObjectIdentity = ObjectIdentity
fuelGaugeInformation = _FuelGaugeInformation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1)
)
_FuelGaugeTable_Object = MibTable
fuelGaugeTable = _FuelGaugeTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1)
)
if mibBuilder.loadTexts:
    fuelGaugeTable.setStatus("mandatory")
_FuelGaugeEntry_Object = MibTableRow
fuelGaugeEntry = _FuelGaugeEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1)
)
fuelGaugeEntry.setIndexNames(
    (0, "BLADE-MIB", "fuelGaugeIndex"),
)
if mibBuilder.loadTexts:
    fuelGaugeEntry.setStatus("mandatory")
_FuelGaugeIndex_Type = Integer32
_FuelGaugeIndex_Object = MibTableColumn
fuelGaugeIndex = _FuelGaugeIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 1),
    _FuelGaugeIndex_Type()
)
fuelGaugeIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fuelGaugeIndex.setStatus("mandatory")


class _FuelGaugePowerDomainNumber_Type(Integer32):
    """Custom type fuelGaugePowerDomainNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("powerDomain1", 1),
          ("powerDomain2", 2))
    )


_FuelGaugePowerDomainNumber_Type.__name__ = "Integer32"
_FuelGaugePowerDomainNumber_Object = MibTableColumn
fuelGaugePowerDomainNumber = _FuelGaugePowerDomainNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 2),
    _FuelGaugePowerDomainNumber_Type()
)
fuelGaugePowerDomainNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fuelGaugePowerDomainNumber.setStatus("mandatory")
_FuelGaugeStatus_Type = OctetString
_FuelGaugeStatus_Object = MibTableColumn
fuelGaugeStatus = _FuelGaugeStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 3),
    _FuelGaugeStatus_Type()
)
fuelGaugeStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fuelGaugeStatus.setStatus("mandatory")
_FuelGaugeFirstPowerModule_Type = OctetString
_FuelGaugeFirstPowerModule_Object = MibTableColumn
fuelGaugeFirstPowerModule = _FuelGaugeFirstPowerModule_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 4),
    _FuelGaugeFirstPowerModule_Type()
)
fuelGaugeFirstPowerModule.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fuelGaugeFirstPowerModule.setStatus("mandatory")
_FuelGaugeSecondPowerModule_Type = OctetString
_FuelGaugeSecondPowerModule_Object = MibTableColumn
fuelGaugeSecondPowerModule = _FuelGaugeSecondPowerModule_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 5),
    _FuelGaugeSecondPowerModule_Type()
)
fuelGaugeSecondPowerModule.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fuelGaugeSecondPowerModule.setStatus("mandatory")


class _FuelGaugePowerManagementPolicySetting_Type(Integer32):
    """Custom type fuelGaugePowerManagementPolicySetting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("redundantWithoutPerformanceImpact", 0),
          ("redundantWithPerformanceImpact", 1),
          ("nonRedundant", 2),
          ("redundantACPowerSource", 3),
          ("acPowerSourceWithBladeThrottlingAllowed", 4),
          ("notApplicable", 255))
    )


_FuelGaugePowerManagementPolicySetting_Type.__name__ = "Integer32"
_FuelGaugePowerManagementPolicySetting_Object = MibTableColumn
fuelGaugePowerManagementPolicySetting = _FuelGaugePowerManagementPolicySetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 6),
    _FuelGaugePowerManagementPolicySetting_Type()
)
fuelGaugePowerManagementPolicySetting.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fuelGaugePowerManagementPolicySetting.setStatus("mandatory")
_FuelGaugeTotalPower_Type = OctetString
_FuelGaugeTotalPower_Object = MibTableColumn
fuelGaugeTotalPower = _FuelGaugeTotalPower_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 7),
    _FuelGaugeTotalPower_Type()
)
fuelGaugeTotalPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fuelGaugeTotalPower.setStatus("mandatory")
_FuelGaugeAllocatedPower_Type = OctetString
_FuelGaugeAllocatedPower_Object = MibTableColumn
fuelGaugeAllocatedPower = _FuelGaugeAllocatedPower_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 8),
    _FuelGaugeAllocatedPower_Type()
)
fuelGaugeAllocatedPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fuelGaugeAllocatedPower.setStatus("mandatory")
_FuelGaugeRemainingPower_Type = OctetString
_FuelGaugeRemainingPower_Object = MibTableColumn
fuelGaugeRemainingPower = _FuelGaugeRemainingPower_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 9),
    _FuelGaugeRemainingPower_Type()
)
fuelGaugeRemainingPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fuelGaugeRemainingPower.setStatus("mandatory")
_FuelGaugePowerInUsed_Type = OctetString
_FuelGaugePowerInUsed_Object = MibTableColumn
fuelGaugePowerInUsed = _FuelGaugePowerInUsed_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 10),
    _FuelGaugePowerInUsed_Type()
)
fuelGaugePowerInUsed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fuelGaugePowerInUsed.setStatus("mandatory")
_PowerDomain1_ObjectIdentity = ObjectIdentity
powerDomain1 = _PowerDomain1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2)
)
_PowerDomain1Table_Object = MibTable
powerDomain1Table = _PowerDomain1Table_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1)
)
if mibBuilder.loadTexts:
    powerDomain1Table.setStatus("mandatory")
_PowerDomain1Entry_Object = MibTableRow
powerDomain1Entry = _PowerDomain1Entry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1)
)
powerDomain1Entry.setIndexNames(
    (0, "BLADE-MIB", "pd1Index"),
)
if mibBuilder.loadTexts:
    powerDomain1Entry.setStatus("mandatory")
_Pd1Index_Type = Integer32
_Pd1Index_Object = MibTableColumn
pd1Index = _Pd1Index_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 1),
    _Pd1Index_Type()
)
pd1Index.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd1Index.setStatus("mandatory")
_Pd1BayNumber_Type = OctetString
_Pd1BayNumber_Object = MibTableColumn
pd1BayNumber = _Pd1BayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 2),
    _Pd1BayNumber_Type()
)
pd1BayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd1BayNumber.setStatus("mandatory")


class _Pd1BladePrimarySlot_Type(Integer32):
    """Custom type pd1BladePrimarySlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1),
          ("notApplicable", 255))
    )


_Pd1BladePrimarySlot_Type.__name__ = "Integer32"
_Pd1BladePrimarySlot_Object = MibTableColumn
pd1BladePrimarySlot = _Pd1BladePrimarySlot_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 3),
    _Pd1BladePrimarySlot_Type()
)
pd1BladePrimarySlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd1BladePrimarySlot.setStatus("mandatory")


class _Pd1ModuleStatus_Type(Integer32):
    """Custom type pd1ModuleStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("insufficientPower", 0),
          ("moduleIsThrottling", 1),
          ("moduleNotThrottling", 2),
          ("notApplicable", 255))
    )


_Pd1ModuleStatus_Type.__name__ = "Integer32"
_Pd1ModuleStatus_Object = MibTableColumn
pd1ModuleStatus = _Pd1ModuleStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 4),
    _Pd1ModuleStatus_Type()
)
pd1ModuleStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd1ModuleStatus.setStatus("mandatory")
_Pd1ModuleName_Type = OctetString
_Pd1ModuleName_Object = MibTableColumn
pd1ModuleName = _Pd1ModuleName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 5),
    _Pd1ModuleName_Type()
)
pd1ModuleName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd1ModuleName.setStatus("mandatory")


class _Pd1ModuleState_Type(Integer32):
    """Custom type pd1ModuleState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("standby", 0),
          ("on", 1),
          ("notPresent", 2),
          ("off", 3),
          ("hibernate", 4),
          ("notApplicable", 255))
    )


_Pd1ModuleState_Type.__name__ = "Integer32"
_Pd1ModuleState_Object = MibTableColumn
pd1ModuleState = _Pd1ModuleState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 6),
    _Pd1ModuleState_Type()
)
pd1ModuleState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd1ModuleState.setStatus("mandatory")
_Pd1ModuleAllocatedPowerCurrent_Type = OctetString
_Pd1ModuleAllocatedPowerCurrent_Object = MibTableColumn
pd1ModuleAllocatedPowerCurrent = _Pd1ModuleAllocatedPowerCurrent_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 7),
    _Pd1ModuleAllocatedPowerCurrent_Type()
)
pd1ModuleAllocatedPowerCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd1ModuleAllocatedPowerCurrent.setStatus("mandatory")
_Pd1ModuleAllocatedPowerMax_Type = OctetString
_Pd1ModuleAllocatedPowerMax_Object = MibTableColumn
pd1ModuleAllocatedPowerMax = _Pd1ModuleAllocatedPowerMax_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 8),
    _Pd1ModuleAllocatedPowerMax_Type()
)
pd1ModuleAllocatedPowerMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd1ModuleAllocatedPowerMax.setStatus("mandatory")
_Pd1ModuleAllocatedPowerMin_Type = OctetString
_Pd1ModuleAllocatedPowerMin_Object = MibTableColumn
pd1ModuleAllocatedPowerMin = _Pd1ModuleAllocatedPowerMin_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 9),
    _Pd1ModuleAllocatedPowerMin_Type()
)
pd1ModuleAllocatedPowerMin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd1ModuleAllocatedPowerMin.setStatus("mandatory")
_Pd1ModuleCPUDutyCycles_Type = OctetString
_Pd1ModuleCPUDutyCycles_Object = MibTableColumn
pd1ModuleCPUDutyCycles = _Pd1ModuleCPUDutyCycles_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 10),
    _Pd1ModuleCPUDutyCycles_Type()
)
pd1ModuleCPUDutyCycles.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd1ModuleCPUDutyCycles.setStatus("mandatory")


class _Pd1ModuleThrottle_Type(Integer32):
    """Custom type pd1ModuleThrottle based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1),
          ("notApplicable", 255))
    )


_Pd1ModuleThrottle_Type.__name__ = "Integer32"
_Pd1ModuleThrottle_Object = MibTableColumn
pd1ModuleThrottle = _Pd1ModuleThrottle_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 11),
    _Pd1ModuleThrottle_Type()
)
pd1ModuleThrottle.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd1ModuleThrottle.setStatus("mandatory")


class _Pd1ModulePowerCapabilities_Type(Integer32):
    """Custom type pd1ModulePowerCapabilities based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              255)
        )
    )
    namedValues = NamedValues(
        *(("noAbility", 0),
          ("staticPowerManagement", 1),
          ("fixedPowerManagement", 2),
          ("dynamicPowerManagement", 3),
          ("dynamicPowerMeasurement1", 4),
          ("dynamicPowerMeasurement2", 5),
          ("dynamicPowerMeasurementWithPowerCapping", 6),
          ("notApplicable", 255))
    )


_Pd1ModulePowerCapabilities_Type.__name__ = "Integer32"
_Pd1ModulePowerCapabilities_Object = MibTableColumn
pd1ModulePowerCapabilities = _Pd1ModulePowerCapabilities_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 12),
    _Pd1ModulePowerCapabilities_Type()
)
pd1ModulePowerCapabilities.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd1ModulePowerCapabilities.setStatus("mandatory")


class _Pd1ModuleMeasuredOrStatic_Type(Integer32):
    """Custom type pd1ModuleMeasuredOrStatic based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("static", 0),
          ("measured", 1),
          ("notApplicable", 255))
    )


_Pd1ModuleMeasuredOrStatic_Type.__name__ = "Integer32"
_Pd1ModuleMeasuredOrStatic_Object = MibTableColumn
pd1ModuleMeasuredOrStatic = _Pd1ModuleMeasuredOrStatic_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 13),
    _Pd1ModuleMeasuredOrStatic_Type()
)
pd1ModuleMeasuredOrStatic.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd1ModuleMeasuredOrStatic.setStatus("mandatory")
_PowerDomain1PowerTrending_ObjectIdentity = ObjectIdentity
powerDomain1PowerTrending = _PowerDomain1PowerTrending_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 3)
)


class _Pd1PowerTrendingPeriod_Type(Integer32):
    """Custom type pd1PowerTrendingPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("lastHour", 0),
          ("last6Hours", 1),
          ("last12Hours", 2),
          ("last24Hours", 3))
    )


_Pd1PowerTrendingPeriod_Type.__name__ = "Integer32"
_Pd1PowerTrendingPeriod_Object = MibScalar
pd1PowerTrendingPeriod = _Pd1PowerTrendingPeriod_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 3, 1),
    _Pd1PowerTrendingPeriod_Type()
)
pd1PowerTrendingPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pd1PowerTrendingPeriod.setStatus("mandatory")
_Pd1PowerTrendingSampleTable_Object = MibTable
pd1PowerTrendingSampleTable = _Pd1PowerTrendingSampleTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 3, 10)
)
if mibBuilder.loadTexts:
    pd1PowerTrendingSampleTable.setStatus("mandatory")
_Pd1PowerTrendingSampleEntry_Object = MibTableRow
pd1PowerTrendingSampleEntry = _Pd1PowerTrendingSampleEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 3, 10, 1)
)
pd1PowerTrendingSampleEntry.setIndexNames(
    (0, "BLADE-MIB", "pd1PowerTrendingSampleIndex"),
)
if mibBuilder.loadTexts:
    pd1PowerTrendingSampleEntry.setStatus("mandatory")
_Pd1PowerTrendingSampleIndex_Type = Integer32
_Pd1PowerTrendingSampleIndex_Object = MibTableColumn
pd1PowerTrendingSampleIndex = _Pd1PowerTrendingSampleIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 3, 10, 1, 1),
    _Pd1PowerTrendingSampleIndex_Type()
)
pd1PowerTrendingSampleIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd1PowerTrendingSampleIndex.setStatus("mandatory")
_Pd1PowerTrendingSampleTimeStamp_Type = OctetString
_Pd1PowerTrendingSampleTimeStamp_Object = MibTableColumn
pd1PowerTrendingSampleTimeStamp = _Pd1PowerTrendingSampleTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 3, 10, 1, 2),
    _Pd1PowerTrendingSampleTimeStamp_Type()
)
pd1PowerTrendingSampleTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd1PowerTrendingSampleTimeStamp.setStatus("mandatory")
_Pd1PowerTrendingSampleAve_Type = OctetString
_Pd1PowerTrendingSampleAve_Object = MibTableColumn
pd1PowerTrendingSampleAve = _Pd1PowerTrendingSampleAve_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 3, 10, 1, 3),
    _Pd1PowerTrendingSampleAve_Type()
)
pd1PowerTrendingSampleAve.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd1PowerTrendingSampleAve.setStatus("mandatory")
_PowerDomain2_ObjectIdentity = ObjectIdentity
powerDomain2 = _PowerDomain2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3)
)
_PowerDomain2Table_Object = MibTable
powerDomain2Table = _PowerDomain2Table_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1)
)
if mibBuilder.loadTexts:
    powerDomain2Table.setStatus("mandatory")
_PowerDomain2Entry_Object = MibTableRow
powerDomain2Entry = _PowerDomain2Entry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1)
)
powerDomain2Entry.setIndexNames(
    (0, "BLADE-MIB", "pd2Index"),
)
if mibBuilder.loadTexts:
    powerDomain2Entry.setStatus("mandatory")
_Pd2Index_Type = Integer32
_Pd2Index_Object = MibTableColumn
pd2Index = _Pd2Index_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1, 1),
    _Pd2Index_Type()
)
pd2Index.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd2Index.setStatus("mandatory")
_Pd2BayNumber_Type = OctetString
_Pd2BayNumber_Object = MibTableColumn
pd2BayNumber = _Pd2BayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1, 2),
    _Pd2BayNumber_Type()
)
pd2BayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd2BayNumber.setStatus("mandatory")


class _Pd2BladePrimarySlot_Type(Integer32):
    """Custom type pd2BladePrimarySlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1),
          ("notApplicable", 255))
    )


_Pd2BladePrimarySlot_Type.__name__ = "Integer32"
_Pd2BladePrimarySlot_Object = MibTableColumn
pd2BladePrimarySlot = _Pd2BladePrimarySlot_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1, 3),
    _Pd2BladePrimarySlot_Type()
)
pd2BladePrimarySlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd2BladePrimarySlot.setStatus("mandatory")


class _Pd2ModuleStatus_Type(Integer32):
    """Custom type pd2ModuleStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("insufficientPower", 0),
          ("moduleIsThrottling", 1),
          ("moduleNotThrottling", 2),
          ("notApplicable", 255))
    )


_Pd2ModuleStatus_Type.__name__ = "Integer32"
_Pd2ModuleStatus_Object = MibTableColumn
pd2ModuleStatus = _Pd2ModuleStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1, 4),
    _Pd2ModuleStatus_Type()
)
pd2ModuleStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd2ModuleStatus.setStatus("mandatory")
_Pd2ModuleName_Type = OctetString
_Pd2ModuleName_Object = MibTableColumn
pd2ModuleName = _Pd2ModuleName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1, 5),
    _Pd2ModuleName_Type()
)
pd2ModuleName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd2ModuleName.setStatus("mandatory")


class _Pd2ModuleState_Type(Integer32):
    """Custom type pd2ModuleState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("standby", 0),
          ("on", 1),
          ("notPresent", 2),
          ("off", 3),
          ("hibernate", 4),
          ("notApplicable", 255))
    )


_Pd2ModuleState_Type.__name__ = "Integer32"
_Pd2ModuleState_Object = MibTableColumn
pd2ModuleState = _Pd2ModuleState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1, 6),
    _Pd2ModuleState_Type()
)
pd2ModuleState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd2ModuleState.setStatus("mandatory")
_Pd2ModuleAllocatedPowerCurrent_Type = OctetString
_Pd2ModuleAllocatedPowerCurrent_Object = MibTableColumn
pd2ModuleAllocatedPowerCurrent = _Pd2ModuleAllocatedPowerCurrent_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1, 7),
    _Pd2ModuleAllocatedPowerCurrent_Type()
)
pd2ModuleAllocatedPowerCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd2ModuleAllocatedPowerCurrent.setStatus("mandatory")
_Pd2ModuleAllocatedPowerMax_Type = OctetString
_Pd2ModuleAllocatedPowerMax_Object = MibTableColumn
pd2ModuleAllocatedPowerMax = _Pd2ModuleAllocatedPowerMax_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1, 8),
    _Pd2ModuleAllocatedPowerMax_Type()
)
pd2ModuleAllocatedPowerMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd2ModuleAllocatedPowerMax.setStatus("mandatory")
_Pd2ModuleAllocatedPowerMin_Type = OctetString
_Pd2ModuleAllocatedPowerMin_Object = MibTableColumn
pd2ModuleAllocatedPowerMin = _Pd2ModuleAllocatedPowerMin_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1, 9),
    _Pd2ModuleAllocatedPowerMin_Type()
)
pd2ModuleAllocatedPowerMin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd2ModuleAllocatedPowerMin.setStatus("mandatory")
_Pd2ModuleCPUDutyCycles_Type = OctetString
_Pd2ModuleCPUDutyCycles_Object = MibTableColumn
pd2ModuleCPUDutyCycles = _Pd2ModuleCPUDutyCycles_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1, 10),
    _Pd2ModuleCPUDutyCycles_Type()
)
pd2ModuleCPUDutyCycles.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd2ModuleCPUDutyCycles.setStatus("mandatory")


class _Pd2ModuleThrottle_Type(Integer32):
    """Custom type pd2ModuleThrottle based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1),
          ("notApplicable", 255))
    )


_Pd2ModuleThrottle_Type.__name__ = "Integer32"
_Pd2ModuleThrottle_Object = MibTableColumn
pd2ModuleThrottle = _Pd2ModuleThrottle_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1, 11),
    _Pd2ModuleThrottle_Type()
)
pd2ModuleThrottle.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd2ModuleThrottle.setStatus("mandatory")


class _Pd2ModulePowerCapabilities_Type(Integer32):
    """Custom type pd2ModulePowerCapabilities based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              255)
        )
    )
    namedValues = NamedValues(
        *(("noAbility", 0),
          ("staticPowerManagement", 1),
          ("fixedPowerManagement", 2),
          ("dynamicPowerManagement", 3),
          ("dynamicPowerMeasurement1", 4),
          ("dynamicPowerMeasurement2", 5),
          ("dynamicPowerMeasurementWithPowerCapping", 6),
          ("notApplicable", 255))
    )


_Pd2ModulePowerCapabilities_Type.__name__ = "Integer32"
_Pd2ModulePowerCapabilities_Object = MibTableColumn
pd2ModulePowerCapabilities = _Pd2ModulePowerCapabilities_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1, 12),
    _Pd2ModulePowerCapabilities_Type()
)
pd2ModulePowerCapabilities.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd2ModulePowerCapabilities.setStatus("mandatory")


class _Pd2ModuleMeasuredOrStatic_Type(Integer32):
    """Custom type pd2ModuleMeasuredOrStatic based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("static", 0),
          ("measured", 1),
          ("notApplicable", 255))
    )


_Pd2ModuleMeasuredOrStatic_Type.__name__ = "Integer32"
_Pd2ModuleMeasuredOrStatic_Object = MibTableColumn
pd2ModuleMeasuredOrStatic = _Pd2ModuleMeasuredOrStatic_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 1, 1, 13),
    _Pd2ModuleMeasuredOrStatic_Type()
)
pd2ModuleMeasuredOrStatic.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd2ModuleMeasuredOrStatic.setStatus("mandatory")
_PowerDomain2PowerTrending_ObjectIdentity = ObjectIdentity
powerDomain2PowerTrending = _PowerDomain2PowerTrending_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 3)
)


class _Pd2PowerTrendingPeriod_Type(Integer32):
    """Custom type pd2PowerTrendingPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("lastHour", 0),
          ("last6Hours", 1),
          ("last12Hours", 2),
          ("last24Hours", 3))
    )


_Pd2PowerTrendingPeriod_Type.__name__ = "Integer32"
_Pd2PowerTrendingPeriod_Object = MibScalar
pd2PowerTrendingPeriod = _Pd2PowerTrendingPeriod_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 3, 1),
    _Pd2PowerTrendingPeriod_Type()
)
pd2PowerTrendingPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pd2PowerTrendingPeriod.setStatus("mandatory")
_Pd2PowerTrendingSampleTable_Object = MibTable
pd2PowerTrendingSampleTable = _Pd2PowerTrendingSampleTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 3, 10)
)
if mibBuilder.loadTexts:
    pd2PowerTrendingSampleTable.setStatus("mandatory")
_Pd2PowerTrendingSampleEntry_Object = MibTableRow
pd2PowerTrendingSampleEntry = _Pd2PowerTrendingSampleEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 3, 10, 1)
)
pd2PowerTrendingSampleEntry.setIndexNames(
    (0, "BLADE-MIB", "pd2PowerTrendingSampleIndex"),
)
if mibBuilder.loadTexts:
    pd2PowerTrendingSampleEntry.setStatus("mandatory")
_Pd2PowerTrendingSampleIndex_Type = Integer32
_Pd2PowerTrendingSampleIndex_Object = MibTableColumn
pd2PowerTrendingSampleIndex = _Pd2PowerTrendingSampleIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 3, 10, 1, 1),
    _Pd2PowerTrendingSampleIndex_Type()
)
pd2PowerTrendingSampleIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd2PowerTrendingSampleIndex.setStatus("mandatory")
_Pd2PowerTrendingSampleTimeStamp_Type = OctetString
_Pd2PowerTrendingSampleTimeStamp_Object = MibTableColumn
pd2PowerTrendingSampleTimeStamp = _Pd2PowerTrendingSampleTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 3, 10, 1, 2),
    _Pd2PowerTrendingSampleTimeStamp_Type()
)
pd2PowerTrendingSampleTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd2PowerTrendingSampleTimeStamp.setStatus("mandatory")
_Pd2PowerTrendingSampleAve_Type = OctetString
_Pd2PowerTrendingSampleAve_Object = MibTableColumn
pd2PowerTrendingSampleAve = _Pd2PowerTrendingSampleAve_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 3, 3, 10, 1, 3),
    _Pd2PowerTrendingSampleAve_Type()
)
pd2PowerTrendingSampleAve.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd2PowerTrendingSampleAve.setStatus("mandatory")
_ModuleInformation_ObjectIdentity = ObjectIdentity
moduleInformation = _ModuleInformation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4)
)
_BladeDetails_ObjectIdentity = ObjectIdentity
bladeDetails = _BladeDetails_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1)
)
_BladeDetailsTable_Object = MibTable
bladeDetailsTable = _BladeDetailsTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1)
)
if mibBuilder.loadTexts:
    bladeDetailsTable.setStatus("mandatory")
_BladeDetailsEntry_Object = MibTableRow
bladeDetailsEntry = _BladeDetailsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1)
)
bladeDetailsEntry.setIndexNames(
    (0, "BLADE-MIB", "bladeDetailsIndex"),
)
if mibBuilder.loadTexts:
    bladeDetailsEntry.setStatus("mandatory")
_BladeDetailsIndex_Type = Integer32
_BladeDetailsIndex_Object = MibTableColumn
bladeDetailsIndex = _BladeDetailsIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 1),
    _BladeDetailsIndex_Type()
)
bladeDetailsIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDetailsIndex.setStatus("mandatory")


class _BladeDetailsId_Type(Integer32):
    """Custom type bladeDetailsId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_BladeDetailsId_Type.__name__ = "Integer32"
_BladeDetailsId_Object = MibTableColumn
bladeDetailsId = _BladeDetailsId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 2),
    _BladeDetailsId_Type()
)
bladeDetailsId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDetailsId.setStatus("mandatory")
_BladeDetailsMaxPowerConfig_Type = Integer32
_BladeDetailsMaxPowerConfig_Object = MibTableColumn
bladeDetailsMaxPowerConfig = _BladeDetailsMaxPowerConfig_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 3),
    _BladeDetailsMaxPowerConfig_Type()
)
bladeDetailsMaxPowerConfig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeDetailsMaxPowerConfig.setStatus("mandatory")
_BladeDetailsEffectiveClockRate_Type = OctetString
_BladeDetailsEffectiveClockRate_Object = MibTableColumn
bladeDetailsEffectiveClockRate = _BladeDetailsEffectiveClockRate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 4),
    _BladeDetailsEffectiveClockRate_Type()
)
bladeDetailsEffectiveClockRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDetailsEffectiveClockRate.setStatus("mandatory")
_BladeDetailsMaximumClockRate_Type = OctetString
_BladeDetailsMaximumClockRate_Object = MibTableColumn
bladeDetailsMaximumClockRate = _BladeDetailsMaximumClockRate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 5),
    _BladeDetailsMaximumClockRate_Type()
)
bladeDetailsMaximumClockRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDetailsMaximumClockRate.setStatus("mandatory")


class _BladeDetailsPowerSaverMode_Type(Integer32):
    """Custom type bladeDetailsPowerSaverMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1),
          ("notApplicable", 255))
    )


_BladeDetailsPowerSaverMode_Type.__name__ = "Integer32"
_BladeDetailsPowerSaverMode_Object = MibTableColumn
bladeDetailsPowerSaverMode = _BladeDetailsPowerSaverMode_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 6),
    _BladeDetailsPowerSaverMode_Type()
)
bladeDetailsPowerSaverMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeDetailsPowerSaverMode.setStatus("mandatory")


class _BladeDetailsDynamicPowerSaver_Type(Integer32):
    """Custom type bladeDetailsDynamicPowerSaver based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1),
          ("notApplicable", 255))
    )


_BladeDetailsDynamicPowerSaver_Type.__name__ = "Integer32"
_BladeDetailsDynamicPowerSaver_Object = MibTableColumn
bladeDetailsDynamicPowerSaver = _BladeDetailsDynamicPowerSaver_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 7),
    _BladeDetailsDynamicPowerSaver_Type()
)
bladeDetailsDynamicPowerSaver.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeDetailsDynamicPowerSaver.setStatus("mandatory")


class _BladeDetailsDynamicPowerFavorPerformanceOverPower_Type(Integer32):
    """Custom type bladeDetailsDynamicPowerFavorPerformanceOverPower based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1),
          ("notApplicable", 255))
    )


_BladeDetailsDynamicPowerFavorPerformanceOverPower_Type.__name__ = "Integer32"
_BladeDetailsDynamicPowerFavorPerformanceOverPower_Object = MibTableColumn
bladeDetailsDynamicPowerFavorPerformanceOverPower = _BladeDetailsDynamicPowerFavorPerformanceOverPower_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 8),
    _BladeDetailsDynamicPowerFavorPerformanceOverPower_Type()
)
bladeDetailsDynamicPowerFavorPerformanceOverPower.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeDetailsDynamicPowerFavorPerformanceOverPower.setStatus("mandatory")


class _BladeDetailsPowerControl_Type(Integer32):
    """Custom type bladeDetailsPowerControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              255)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("measurement", 1),
          ("measurementpcap", 2),
          ("psave", 3),
          ("measurementpsave", 4),
          ("measurementpcappsave", 5),
          ("notApplicable", 255))
    )


_BladeDetailsPowerControl_Type.__name__ = "Integer32"
_BladeDetailsPowerControl_Object = MibTableColumn
bladeDetailsPowerControl = _BladeDetailsPowerControl_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 9),
    _BladeDetailsPowerControl_Type()
)
bladeDetailsPowerControl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeDetailsPowerControl.setStatus("mandatory")
_BladePowerTrending_ObjectIdentity = ObjectIdentity
bladePowerTrending = _BladePowerTrending_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3)
)


class _BladePowerTrendingPeriod_Type(Integer32):
    """Custom type bladePowerTrendingPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("lastHour", 0),
          ("last6Hours", 1),
          ("last12Hours", 2),
          ("last24Hours", 3))
    )


_BladePowerTrendingPeriod_Type.__name__ = "Integer32"
_BladePowerTrendingPeriod_Object = MibScalar
bladePowerTrendingPeriod = _BladePowerTrendingPeriod_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 1),
    _BladePowerTrendingPeriod_Type()
)
bladePowerTrendingPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladePowerTrendingPeriod.setStatus("mandatory")


class _BladePowerTrendingBladeId_Type(Integer32):
    """Custom type bladePowerTrendingBladeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_BladePowerTrendingBladeId_Type.__name__ = "Integer32"
_BladePowerTrendingBladeId_Object = MibScalar
bladePowerTrendingBladeId = _BladePowerTrendingBladeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 2),
    _BladePowerTrendingBladeId_Type()
)
bladePowerTrendingBladeId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladePowerTrendingBladeId.setStatus("mandatory")
_BladePowerTrendingSampleTable_Object = MibTable
bladePowerTrendingSampleTable = _BladePowerTrendingSampleTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 10)
)
if mibBuilder.loadTexts:
    bladePowerTrendingSampleTable.setStatus("mandatory")
_BladePowerTrendingSampleEntry_Object = MibTableRow
bladePowerTrendingSampleEntry = _BladePowerTrendingSampleEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 10, 1)
)
bladePowerTrendingSampleEntry.setIndexNames(
    (0, "BLADE-MIB", "bladePowerTrendingSampleIndex"),
)
if mibBuilder.loadTexts:
    bladePowerTrendingSampleEntry.setStatus("mandatory")
_BladePowerTrendingSampleIndex_Type = Integer32
_BladePowerTrendingSampleIndex_Object = MibTableColumn
bladePowerTrendingSampleIndex = _BladePowerTrendingSampleIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 10, 1, 1),
    _BladePowerTrendingSampleIndex_Type()
)
bladePowerTrendingSampleIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePowerTrendingSampleIndex.setStatus("mandatory")


class _BladePowerTrendingSampleId_Type(Integer32):
    """Custom type bladePowerTrendingSampleId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_BladePowerTrendingSampleId_Type.__name__ = "Integer32"
_BladePowerTrendingSampleId_Object = MibTableColumn
bladePowerTrendingSampleId = _BladePowerTrendingSampleId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 10, 1, 2),
    _BladePowerTrendingSampleId_Type()
)
bladePowerTrendingSampleId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePowerTrendingSampleId.setStatus("mandatory")
_BladePowerTrendingSampleTimeStamp_Type = OctetString
_BladePowerTrendingSampleTimeStamp_Object = MibTableColumn
bladePowerTrendingSampleTimeStamp = _BladePowerTrendingSampleTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 10, 1, 3),
    _BladePowerTrendingSampleTimeStamp_Type()
)
bladePowerTrendingSampleTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePowerTrendingSampleTimeStamp.setStatus("mandatory")
_BladePowerTrendingSampleMax_Type = OctetString
_BladePowerTrendingSampleMax_Object = MibTableColumn
bladePowerTrendingSampleMax = _BladePowerTrendingSampleMax_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 10, 1, 4),
    _BladePowerTrendingSampleMax_Type()
)
bladePowerTrendingSampleMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePowerTrendingSampleMax.setStatus("mandatory")
_BladePowerTrendingSampleMin_Type = OctetString
_BladePowerTrendingSampleMin_Object = MibTableColumn
bladePowerTrendingSampleMin = _BladePowerTrendingSampleMin_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 10, 1, 5),
    _BladePowerTrendingSampleMin_Type()
)
bladePowerTrendingSampleMin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePowerTrendingSampleMin.setStatus("mandatory")
_BladePowerTrendingSampleAve_Type = OctetString
_BladePowerTrendingSampleAve_Object = MibTableColumn
bladePowerTrendingSampleAve = _BladePowerTrendingSampleAve_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 10, 1, 6),
    _BladePowerTrendingSampleAve_Type()
)
bladePowerTrendingSampleAve.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePowerTrendingSampleAve.setStatus("mandatory")
_SwitchDetails_ObjectIdentity = ObjectIdentity
switchDetails = _SwitchDetails_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2)
)
_SwitchPowerTrending_ObjectIdentity = ObjectIdentity
switchPowerTrending = _SwitchPowerTrending_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3)
)


class _SwitchPowerTrendingPeriod_Type(Integer32):
    """Custom type switchPowerTrendingPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("lastHour", 0),
          ("last6Hours", 1),
          ("last12Hours", 2),
          ("last24Hours", 3))
    )


_SwitchPowerTrendingPeriod_Type.__name__ = "Integer32"
_SwitchPowerTrendingPeriod_Object = MibScalar
switchPowerTrendingPeriod = _SwitchPowerTrendingPeriod_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 1),
    _SwitchPowerTrendingPeriod_Type()
)
switchPowerTrendingPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    switchPowerTrendingPeriod.setStatus("mandatory")


class _SwitchPowerTrendingSwitchId_Type(Integer32):
    """Custom type switchPowerTrendingSwitchId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("module1", 1),
          ("module2", 2),
          ("module3", 3),
          ("module4", 4),
          ("module5", 5),
          ("module6", 6),
          ("module7", 7),
          ("module8", 8),
          ("module9", 9),
          ("module10", 10))
    )


_SwitchPowerTrendingSwitchId_Type.__name__ = "Integer32"
_SwitchPowerTrendingSwitchId_Object = MibScalar
switchPowerTrendingSwitchId = _SwitchPowerTrendingSwitchId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 2),
    _SwitchPowerTrendingSwitchId_Type()
)
switchPowerTrendingSwitchId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    switchPowerTrendingSwitchId.setStatus("mandatory")
_SwitchPowerTrendingSampleTable_Object = MibTable
switchPowerTrendingSampleTable = _SwitchPowerTrendingSampleTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 10)
)
if mibBuilder.loadTexts:
    switchPowerTrendingSampleTable.setStatus("mandatory")
_SwitchPowerTrendingSampleEntry_Object = MibTableRow
switchPowerTrendingSampleEntry = _SwitchPowerTrendingSampleEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 10, 1)
)
switchPowerTrendingSampleEntry.setIndexNames(
    (0, "BLADE-MIB", "switchPowerTrendingSampleIndex"),
)
if mibBuilder.loadTexts:
    switchPowerTrendingSampleEntry.setStatus("mandatory")
_SwitchPowerTrendingSampleIndex_Type = Integer32
_SwitchPowerTrendingSampleIndex_Object = MibTableColumn
switchPowerTrendingSampleIndex = _SwitchPowerTrendingSampleIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 10, 1, 1),
    _SwitchPowerTrendingSampleIndex_Type()
)
switchPowerTrendingSampleIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    switchPowerTrendingSampleIndex.setStatus("mandatory")


class _SwitchPowerTrendingSampleId_Type(Integer32):
    """Custom type switchPowerTrendingSampleId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("module1", 1),
          ("module2", 2),
          ("module3", 3),
          ("module4", 4),
          ("module5", 5),
          ("module6", 6),
          ("module7", 7),
          ("module8", 8),
          ("module9", 9),
          ("module10", 10))
    )


_SwitchPowerTrendingSampleId_Type.__name__ = "Integer32"
_SwitchPowerTrendingSampleId_Object = MibTableColumn
switchPowerTrendingSampleId = _SwitchPowerTrendingSampleId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 10, 1, 2),
    _SwitchPowerTrendingSampleId_Type()
)
switchPowerTrendingSampleId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    switchPowerTrendingSampleId.setStatus("mandatory")
_SwitchPowerTrendingSampleTimeStamp_Type = OctetString
_SwitchPowerTrendingSampleTimeStamp_Object = MibTableColumn
switchPowerTrendingSampleTimeStamp = _SwitchPowerTrendingSampleTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 10, 1, 3),
    _SwitchPowerTrendingSampleTimeStamp_Type()
)
switchPowerTrendingSampleTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    switchPowerTrendingSampleTimeStamp.setStatus("mandatory")
_SwitchPowerTrendingSampleMax_Type = OctetString
_SwitchPowerTrendingSampleMax_Object = MibTableColumn
switchPowerTrendingSampleMax = _SwitchPowerTrendingSampleMax_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 10, 1, 4),
    _SwitchPowerTrendingSampleMax_Type()
)
switchPowerTrendingSampleMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    switchPowerTrendingSampleMax.setStatus("mandatory")
_SwitchPowerTrendingSampleMin_Type = OctetString
_SwitchPowerTrendingSampleMin_Object = MibTableColumn
switchPowerTrendingSampleMin = _SwitchPowerTrendingSampleMin_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 10, 1, 5),
    _SwitchPowerTrendingSampleMin_Type()
)
switchPowerTrendingSampleMin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    switchPowerTrendingSampleMin.setStatus("mandatory")
_SwitchPowerTrendingSampleAve_Type = OctetString
_SwitchPowerTrendingSampleAve_Object = MibTableColumn
switchPowerTrendingSampleAve = _SwitchPowerTrendingSampleAve_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 10, 1, 6),
    _SwitchPowerTrendingSampleAve_Type()
)
switchPowerTrendingSampleAve.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    switchPowerTrendingSampleAve.setStatus("mandatory")
_BlowerDetails_ObjectIdentity = ObjectIdentity
blowerDetails = _BlowerDetails_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3)
)
_BlowerPowerTrending_ObjectIdentity = ObjectIdentity
blowerPowerTrending = _BlowerPowerTrending_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3)
)


class _BlowerPowerTrendingPeriod_Type(Integer32):
    """Custom type blowerPowerTrendingPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("lastHour", 0),
          ("last6Hours", 1),
          ("last12Hours", 2),
          ("last24Hours", 3))
    )


_BlowerPowerTrendingPeriod_Type.__name__ = "Integer32"
_BlowerPowerTrendingPeriod_Object = MibScalar
blowerPowerTrendingPeriod = _BlowerPowerTrendingPeriod_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 1),
    _BlowerPowerTrendingPeriod_Type()
)
blowerPowerTrendingPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    blowerPowerTrendingPeriod.setStatus("mandatory")


class _BlowerPowerTrendingBlowerId_Type(Integer32):
    """Custom type blowerPowerTrendingBlowerId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("blower1", 1),
          ("blower2", 2),
          ("blower3", 3),
          ("blower4", 4))
    )


_BlowerPowerTrendingBlowerId_Type.__name__ = "Integer32"
_BlowerPowerTrendingBlowerId_Object = MibScalar
blowerPowerTrendingBlowerId = _BlowerPowerTrendingBlowerId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 2),
    _BlowerPowerTrendingBlowerId_Type()
)
blowerPowerTrendingBlowerId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    blowerPowerTrendingBlowerId.setStatus("mandatory")
_BlowerPowerTrendingSampleTable_Object = MibTable
blowerPowerTrendingSampleTable = _BlowerPowerTrendingSampleTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 10)
)
if mibBuilder.loadTexts:
    blowerPowerTrendingSampleTable.setStatus("mandatory")
_BlowerPowerTrendingSampleEntry_Object = MibTableRow
blowerPowerTrendingSampleEntry = _BlowerPowerTrendingSampleEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 10, 1)
)
blowerPowerTrendingSampleEntry.setIndexNames(
    (0, "BLADE-MIB", "blowerPowerTrendingSampleIndex"),
)
if mibBuilder.loadTexts:
    blowerPowerTrendingSampleEntry.setStatus("mandatory")
_BlowerPowerTrendingSampleIndex_Type = Integer32
_BlowerPowerTrendingSampleIndex_Object = MibTableColumn
blowerPowerTrendingSampleIndex = _BlowerPowerTrendingSampleIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 10, 1, 1),
    _BlowerPowerTrendingSampleIndex_Type()
)
blowerPowerTrendingSampleIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blowerPowerTrendingSampleIndex.setStatus("mandatory")


class _BlowerPowerTrendingSampleId_Type(Integer32):
    """Custom type blowerPowerTrendingSampleId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("blower1", 1),
          ("blower2", 2),
          ("blower3", 3),
          ("blower4", 4))
    )


_BlowerPowerTrendingSampleId_Type.__name__ = "Integer32"
_BlowerPowerTrendingSampleId_Object = MibTableColumn
blowerPowerTrendingSampleId = _BlowerPowerTrendingSampleId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 10, 1, 2),
    _BlowerPowerTrendingSampleId_Type()
)
blowerPowerTrendingSampleId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blowerPowerTrendingSampleId.setStatus("mandatory")
_BlowerPowerTrendingSampleTimeStamp_Type = OctetString
_BlowerPowerTrendingSampleTimeStamp_Object = MibTableColumn
blowerPowerTrendingSampleTimeStamp = _BlowerPowerTrendingSampleTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 10, 1, 3),
    _BlowerPowerTrendingSampleTimeStamp_Type()
)
blowerPowerTrendingSampleTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blowerPowerTrendingSampleTimeStamp.setStatus("mandatory")
_BlowerPowerTrendingSampleMax_Type = OctetString
_BlowerPowerTrendingSampleMax_Object = MibTableColumn
blowerPowerTrendingSampleMax = _BlowerPowerTrendingSampleMax_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 10, 1, 4),
    _BlowerPowerTrendingSampleMax_Type()
)
blowerPowerTrendingSampleMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blowerPowerTrendingSampleMax.setStatus("mandatory")
_BlowerPowerTrendingSampleMin_Type = OctetString
_BlowerPowerTrendingSampleMin_Object = MibTableColumn
blowerPowerTrendingSampleMin = _BlowerPowerTrendingSampleMin_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 10, 1, 5),
    _BlowerPowerTrendingSampleMin_Type()
)
blowerPowerTrendingSampleMin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blowerPowerTrendingSampleMin.setStatus("mandatory")
_BlowerPowerTrendingSampleAve_Type = OctetString
_BlowerPowerTrendingSampleAve_Object = MibTableColumn
blowerPowerTrendingSampleAve = _BlowerPowerTrendingSampleAve_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 10, 1, 6),
    _BlowerPowerTrendingSampleAve_Type()
)
blowerPowerTrendingSampleAve.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blowerPowerTrendingSampleAve.setStatus("mandatory")
_ChassisInformation_ObjectIdentity = ObjectIdentity
chassisInformation = _ChassisInformation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5)
)
_ChassisConfiguration_ObjectIdentity = ObjectIdentity
chassisConfiguration = _ChassisConfiguration_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 1)
)
_ChassisTotalDCPowerAvailable_Type = OctetString
_ChassisTotalDCPowerAvailable_Object = MibScalar
chassisTotalDCPowerAvailable = _ChassisTotalDCPowerAvailable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 1, 1),
    _ChassisTotalDCPowerAvailable_Type()
)
chassisTotalDCPowerAvailable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisTotalDCPowerAvailable.setStatus("mandatory")
_ChassisTotalACPowerInUsed_Type = OctetString
_ChassisTotalACPowerInUsed_Object = MibScalar
chassisTotalACPowerInUsed = _ChassisTotalACPowerInUsed_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 1, 2),
    _ChassisTotalACPowerInUsed_Type()
)
chassisTotalACPowerInUsed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisTotalACPowerInUsed.setStatus("mandatory")
_ChassisTotalThermalOutput_Type = OctetString
_ChassisTotalThermalOutput_Object = MibScalar
chassisTotalThermalOutput = _ChassisTotalThermalOutput_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 1, 3),
    _ChassisTotalThermalOutput_Type()
)
chassisTotalThermalOutput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisTotalThermalOutput.setStatus("mandatory")
_ChassisTrendingSampleInterval_Type = Integer32
_ChassisTrendingSampleInterval_Object = MibScalar
chassisTrendingSampleInterval = _ChassisTrendingSampleInterval_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 1, 4),
    _ChassisTrendingSampleInterval_Type()
)
chassisTrendingSampleInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chassisTrendingSampleInterval.setStatus("mandatory")


class _ChassisPowerService_Type(Integer32):
    """Custom type chassisPowerService based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("volt110", 1),
          ("volt220", 2),
          ("notAvailable", 255))
    )


_ChassisPowerService_Type.__name__ = "Integer32"
_ChassisPowerService_Object = MibScalar
chassisPowerService = _ChassisPowerService_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 1, 5),
    _ChassisPowerService_Type()
)
chassisPowerService.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisPowerService.setStatus("mandatory")
_ChassisPowerTrending_ObjectIdentity = ObjectIdentity
chassisPowerTrending = _ChassisPowerTrending_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 3)
)


class _ChassisPowerTrendingPeriod_Type(Integer32):
    """Custom type chassisPowerTrendingPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("lastHour", 0),
          ("last6Hours", 1),
          ("last12Hours", 2),
          ("last24Hours", 3))
    )


_ChassisPowerTrendingPeriod_Type.__name__ = "Integer32"
_ChassisPowerTrendingPeriod_Object = MibScalar
chassisPowerTrendingPeriod = _ChassisPowerTrendingPeriod_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 3, 1),
    _ChassisPowerTrendingPeriod_Type()
)
chassisPowerTrendingPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chassisPowerTrendingPeriod.setStatus("mandatory")
_ChassisPowerTrendingSampleTable_Object = MibTable
chassisPowerTrendingSampleTable = _ChassisPowerTrendingSampleTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 3, 10)
)
if mibBuilder.loadTexts:
    chassisPowerTrendingSampleTable.setStatus("mandatory")
_ChassisPowerTrendingSampleEntry_Object = MibTableRow
chassisPowerTrendingSampleEntry = _ChassisPowerTrendingSampleEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 3, 10, 1)
)
chassisPowerTrendingSampleEntry.setIndexNames(
    (0, "BLADE-MIB", "chassisPowerTrendingSampleIndex"),
)
if mibBuilder.loadTexts:
    chassisPowerTrendingSampleEntry.setStatus("mandatory")
_ChassisPowerTrendingSampleIndex_Type = Integer32
_ChassisPowerTrendingSampleIndex_Object = MibTableColumn
chassisPowerTrendingSampleIndex = _ChassisPowerTrendingSampleIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 3, 10, 1, 1),
    _ChassisPowerTrendingSampleIndex_Type()
)
chassisPowerTrendingSampleIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisPowerTrendingSampleIndex.setStatus("mandatory")
_ChassisPowerTrendingSampleTimeStamp_Type = OctetString
_ChassisPowerTrendingSampleTimeStamp_Object = MibTableColumn
chassisPowerTrendingSampleTimeStamp = _ChassisPowerTrendingSampleTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 3, 10, 1, 2),
    _ChassisPowerTrendingSampleTimeStamp_Type()
)
chassisPowerTrendingSampleTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisPowerTrendingSampleTimeStamp.setStatus("mandatory")
_ChassisPowerTrendingSampleAve_Type = OctetString
_ChassisPowerTrendingSampleAve_Object = MibTableColumn
chassisPowerTrendingSampleAve = _ChassisPowerTrendingSampleAve_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 3, 10, 1, 3),
    _ChassisPowerTrendingSampleAve_Type()
)
chassisPowerTrendingSampleAve.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisPowerTrendingSampleAve.setStatus("mandatory")
_ChassisThermalTrending_ObjectIdentity = ObjectIdentity
chassisThermalTrending = _ChassisThermalTrending_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5)
)


class _ChassisThermalTrendingPeriod_Type(Integer32):
    """Custom type chassisThermalTrendingPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("lastHour", 0),
          ("last6Hours", 1),
          ("last12Hours", 2),
          ("last24Hours", 3))
    )


_ChassisThermalTrendingPeriod_Type.__name__ = "Integer32"
_ChassisThermalTrendingPeriod_Object = MibScalar
chassisThermalTrendingPeriod = _ChassisThermalTrendingPeriod_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 1),
    _ChassisThermalTrendingPeriod_Type()
)
chassisThermalTrendingPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chassisThermalTrendingPeriod.setStatus("mandatory")
_Mt1ThermalTrendingTable_Object = MibTable
mt1ThermalTrendingTable = _Mt1ThermalTrendingTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 10)
)
if mibBuilder.loadTexts:
    mt1ThermalTrendingTable.setStatus("mandatory")
_Mt1ThermalTrendingEntry_Object = MibTableRow
mt1ThermalTrendingEntry = _Mt1ThermalTrendingEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 10, 1)
)
mt1ThermalTrendingEntry.setIndexNames(
    (0, "BLADE-MIB", "mt1ThermalTrendingIndex"),
)
if mibBuilder.loadTexts:
    mt1ThermalTrendingEntry.setStatus("mandatory")
_Mt1ThermalTrendingIndex_Type = Integer32
_Mt1ThermalTrendingIndex_Object = MibTableColumn
mt1ThermalTrendingIndex = _Mt1ThermalTrendingIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 10, 1, 1),
    _Mt1ThermalTrendingIndex_Type()
)
mt1ThermalTrendingIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mt1ThermalTrendingIndex.setStatus("mandatory")
_Mt1ThermalTrendingTimeStamp_Type = OctetString
_Mt1ThermalTrendingTimeStamp_Object = MibTableColumn
mt1ThermalTrendingTimeStamp = _Mt1ThermalTrendingTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 10, 1, 2),
    _Mt1ThermalTrendingTimeStamp_Type()
)
mt1ThermalTrendingTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mt1ThermalTrendingTimeStamp.setStatus("mandatory")
_Mt1ThermalTrendingTemperature_Type = OctetString
_Mt1ThermalTrendingTemperature_Object = MibTableColumn
mt1ThermalTrendingTemperature = _Mt1ThermalTrendingTemperature_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 10, 1, 3),
    _Mt1ThermalTrendingTemperature_Type()
)
mt1ThermalTrendingTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mt1ThermalTrendingTemperature.setStatus("mandatory")
_Mt2ThermalTrendingTable_Object = MibTable
mt2ThermalTrendingTable = _Mt2ThermalTrendingTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 15)
)
if mibBuilder.loadTexts:
    mt2ThermalTrendingTable.setStatus("mandatory")
_Mt2ThermalTrendingEntry_Object = MibTableRow
mt2ThermalTrendingEntry = _Mt2ThermalTrendingEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 15, 1)
)
mt2ThermalTrendingEntry.setIndexNames(
    (0, "BLADE-MIB", "mt2ThermalTrendingIndex"),
)
if mibBuilder.loadTexts:
    mt2ThermalTrendingEntry.setStatus("mandatory")
_Mt2ThermalTrendingIndex_Type = Integer32
_Mt2ThermalTrendingIndex_Object = MibTableColumn
mt2ThermalTrendingIndex = _Mt2ThermalTrendingIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 15, 1, 1),
    _Mt2ThermalTrendingIndex_Type()
)
mt2ThermalTrendingIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mt2ThermalTrendingIndex.setStatus("mandatory")
_Mt2ThermalTrendingTimeStamp_Type = OctetString
_Mt2ThermalTrendingTimeStamp_Object = MibTableColumn
mt2ThermalTrendingTimeStamp = _Mt2ThermalTrendingTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 15, 1, 2),
    _Mt2ThermalTrendingTimeStamp_Type()
)
mt2ThermalTrendingTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mt2ThermalTrendingTimeStamp.setStatus("mandatory")
_Mt2ThermalTrendingTemperature_Type = OctetString
_Mt2ThermalTrendingTemperature_Object = MibTableColumn
mt2ThermalTrendingTemperature = _Mt2ThermalTrendingTemperature_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 15, 1, 3),
    _Mt2ThermalTrendingTemperature_Type()
)
mt2ThermalTrendingTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mt2ThermalTrendingTemperature.setStatus("mandatory")
_Blower1ThermalTrendingTable_Object = MibTable
blower1ThermalTrendingTable = _Blower1ThermalTrendingTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 20)
)
if mibBuilder.loadTexts:
    blower1ThermalTrendingTable.setStatus("mandatory")
_Blower1ThermalTrendingEntry_Object = MibTableRow
blower1ThermalTrendingEntry = _Blower1ThermalTrendingEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 20, 1)
)
blower1ThermalTrendingEntry.setIndexNames(
    (0, "BLADE-MIB", "blower1ThermalTrendingIndex"),
)
if mibBuilder.loadTexts:
    blower1ThermalTrendingEntry.setStatus("mandatory")
_Blower1ThermalTrendingIndex_Type = Integer32
_Blower1ThermalTrendingIndex_Object = MibTableColumn
blower1ThermalTrendingIndex = _Blower1ThermalTrendingIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 20, 1, 1),
    _Blower1ThermalTrendingIndex_Type()
)
blower1ThermalTrendingIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blower1ThermalTrendingIndex.setStatus("mandatory")
_Blower1ThermalTrendingTimeStamp_Type = OctetString
_Blower1ThermalTrendingTimeStamp_Object = MibTableColumn
blower1ThermalTrendingTimeStamp = _Blower1ThermalTrendingTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 20, 1, 2),
    _Blower1ThermalTrendingTimeStamp_Type()
)
blower1ThermalTrendingTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blower1ThermalTrendingTimeStamp.setStatus("mandatory")
_Blower1ThermalTrendingTemperature_Type = OctetString
_Blower1ThermalTrendingTemperature_Object = MibTableColumn
blower1ThermalTrendingTemperature = _Blower1ThermalTrendingTemperature_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 20, 1, 3),
    _Blower1ThermalTrendingTemperature_Type()
)
blower1ThermalTrendingTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blower1ThermalTrendingTemperature.setStatus("mandatory")
_Blower2ThermalTrendingTable_Object = MibTable
blower2ThermalTrendingTable = _Blower2ThermalTrendingTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 30)
)
if mibBuilder.loadTexts:
    blower2ThermalTrendingTable.setStatus("mandatory")
_Blower2ThermalTrendingEntry_Object = MibTableRow
blower2ThermalTrendingEntry = _Blower2ThermalTrendingEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 30, 1)
)
blower2ThermalTrendingEntry.setIndexNames(
    (0, "BLADE-MIB", "blower2ThermalTrendingIndex"),
)
if mibBuilder.loadTexts:
    blower2ThermalTrendingEntry.setStatus("mandatory")
_Blower2ThermalTrendingIndex_Type = Integer32
_Blower2ThermalTrendingIndex_Object = MibTableColumn
blower2ThermalTrendingIndex = _Blower2ThermalTrendingIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 30, 1, 1),
    _Blower2ThermalTrendingIndex_Type()
)
blower2ThermalTrendingIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blower2ThermalTrendingIndex.setStatus("mandatory")
_Blower2ThermalTrendingTimeStamp_Type = OctetString
_Blower2ThermalTrendingTimeStamp_Object = MibTableColumn
blower2ThermalTrendingTimeStamp = _Blower2ThermalTrendingTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 30, 1, 2),
    _Blower2ThermalTrendingTimeStamp_Type()
)
blower2ThermalTrendingTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blower2ThermalTrendingTimeStamp.setStatus("mandatory")
_Blower2ThermalTrendingTemperature_Type = OctetString
_Blower2ThermalTrendingTemperature_Object = MibTableColumn
blower2ThermalTrendingTemperature = _Blower2ThermalTrendingTemperature_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 30, 1, 3),
    _Blower2ThermalTrendingTemperature_Type()
)
blower2ThermalTrendingTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blower2ThermalTrendingTemperature.setStatus("mandatory")
_Blower3ThermalTrendingTable_Object = MibTable
blower3ThermalTrendingTable = _Blower3ThermalTrendingTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 40)
)
if mibBuilder.loadTexts:
    blower3ThermalTrendingTable.setStatus("mandatory")
_Blower3ThermalTrendingEntry_Object = MibTableRow
blower3ThermalTrendingEntry = _Blower3ThermalTrendingEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 40, 1)
)
blower3ThermalTrendingEntry.setIndexNames(
    (0, "BLADE-MIB", "blower3ThermalTrendingIndex"),
)
if mibBuilder.loadTexts:
    blower3ThermalTrendingEntry.setStatus("mandatory")
_Blower3ThermalTrendingIndex_Type = Integer32
_Blower3ThermalTrendingIndex_Object = MibTableColumn
blower3ThermalTrendingIndex = _Blower3ThermalTrendingIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 40, 1, 1),
    _Blower3ThermalTrendingIndex_Type()
)
blower3ThermalTrendingIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blower3ThermalTrendingIndex.setStatus("mandatory")
_Blower3ThermalTrendingTimeStamp_Type = OctetString
_Blower3ThermalTrendingTimeStamp_Object = MibTableColumn
blower3ThermalTrendingTimeStamp = _Blower3ThermalTrendingTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 40, 1, 2),
    _Blower3ThermalTrendingTimeStamp_Type()
)
blower3ThermalTrendingTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blower3ThermalTrendingTimeStamp.setStatus("mandatory")
_Blower3ThermalTrendingTemperature_Type = OctetString
_Blower3ThermalTrendingTemperature_Object = MibTableColumn
blower3ThermalTrendingTemperature = _Blower3ThermalTrendingTemperature_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 40, 1, 3),
    _Blower3ThermalTrendingTemperature_Type()
)
blower3ThermalTrendingTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blower3ThermalTrendingTemperature.setStatus("mandatory")
_Blower4ThermalTrendingTable_Object = MibTable
blower4ThermalTrendingTable = _Blower4ThermalTrendingTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 50)
)
if mibBuilder.loadTexts:
    blower4ThermalTrendingTable.setStatus("mandatory")
_Blower4ThermalTrendingEntry_Object = MibTableRow
blower4ThermalTrendingEntry = _Blower4ThermalTrendingEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 50, 1)
)
blower4ThermalTrendingEntry.setIndexNames(
    (0, "BLADE-MIB", "blower4ThermalTrendingIndex"),
)
if mibBuilder.loadTexts:
    blower4ThermalTrendingEntry.setStatus("mandatory")
_Blower4ThermalTrendingIndex_Type = Integer32
_Blower4ThermalTrendingIndex_Object = MibTableColumn
blower4ThermalTrendingIndex = _Blower4ThermalTrendingIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 50, 1, 1),
    _Blower4ThermalTrendingIndex_Type()
)
blower4ThermalTrendingIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blower4ThermalTrendingIndex.setStatus("mandatory")
_Blower4ThermalTrendingTimeStamp_Type = OctetString
_Blower4ThermalTrendingTimeStamp_Object = MibTableColumn
blower4ThermalTrendingTimeStamp = _Blower4ThermalTrendingTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 50, 1, 2),
    _Blower4ThermalTrendingTimeStamp_Type()
)
blower4ThermalTrendingTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blower4ThermalTrendingTimeStamp.setStatus("mandatory")
_Blower4ThermalTrendingTemperature_Type = OctetString
_Blower4ThermalTrendingTemperature_Object = MibTableColumn
blower4ThermalTrendingTemperature = _Blower4ThermalTrendingTemperature_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 50, 1, 3),
    _Blower4ThermalTrendingTemperature_Type()
)
blower4ThermalTrendingTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blower4ThermalTrendingTemperature.setStatus("mandatory")
_PowerPolicyInformation_ObjectIdentity = ObjectIdentity
powerPolicyInformation = _PowerPolicyInformation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6)
)
_PowerPolicyTable_Object = MibTable
powerPolicyTable = _PowerPolicyTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6, 1)
)
if mibBuilder.loadTexts:
    powerPolicyTable.setStatus("mandatory")
_PowerPolicyEntry_Object = MibTableRow
powerPolicyEntry = _PowerPolicyEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6, 1, 1)
)
powerPolicyEntry.setIndexNames(
    (0, "BLADE-MIB", "powerPolicyIndex"),
)
if mibBuilder.loadTexts:
    powerPolicyEntry.setStatus("mandatory")
_PowerPolicyIndex_Type = Integer32
_PowerPolicyIndex_Object = MibTableColumn
powerPolicyIndex = _PowerPolicyIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6, 1, 1, 1),
    _PowerPolicyIndex_Type()
)
powerPolicyIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerPolicyIndex.setStatus("mandatory")


class _PowerPolicyPowerDomainNumber_Type(Integer32):
    """Custom type powerPolicyPowerDomainNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("powerDomain1", 1),
          ("powerDomain2", 2))
    )


_PowerPolicyPowerDomainNumber_Type.__name__ = "Integer32"
_PowerPolicyPowerDomainNumber_Object = MibTableColumn
powerPolicyPowerDomainNumber = _PowerPolicyPowerDomainNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6, 1, 1, 2),
    _PowerPolicyPowerDomainNumber_Type()
)
powerPolicyPowerDomainNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerPolicyPowerDomainNumber.setStatus("mandatory")
_PowerPolicyName_Type = OctetString
_PowerPolicyName_Object = MibTableColumn
powerPolicyName = _PowerPolicyName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6, 1, 1, 3),
    _PowerPolicyName_Type()
)
powerPolicyName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerPolicyName.setStatus("mandatory")
_PowerPolicyPwrSupplyFailureLimit_Type = Integer32
_PowerPolicyPwrSupplyFailureLimit_Object = MibTableColumn
powerPolicyPwrSupplyFailureLimit = _PowerPolicyPwrSupplyFailureLimit_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6, 1, 1, 4),
    _PowerPolicyPwrSupplyFailureLimit_Type()
)
powerPolicyPwrSupplyFailureLimit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerPolicyPwrSupplyFailureLimit.setStatus("mandatory")
_PowerPolicyMaxPowerLimit_Type = Integer32
_PowerPolicyMaxPowerLimit_Object = MibTableColumn
powerPolicyMaxPowerLimit = _PowerPolicyMaxPowerLimit_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6, 1, 1, 5),
    _PowerPolicyMaxPowerLimit_Type()
)
powerPolicyMaxPowerLimit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerPolicyMaxPowerLimit.setStatus("mandatory")
_PowerPolicyEstimatedUtilization_Type = Integer32
_PowerPolicyEstimatedUtilization_Object = MibTableColumn
powerPolicyEstimatedUtilization = _PowerPolicyEstimatedUtilization_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6, 1, 1, 6),
    _PowerPolicyEstimatedUtilization_Type()
)
powerPolicyEstimatedUtilization.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerPolicyEstimatedUtilization.setStatus("mandatory")


class _PowerPolicyActivate_Type(Integer32):
    """Custom type powerPolicyActivate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_PowerPolicyActivate_Type.__name__ = "Integer32"
_PowerPolicyActivate_Object = MibTableColumn
powerPolicyActivate = _PowerPolicyActivate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6, 1, 1, 7),
    _PowerPolicyActivate_Type()
)
powerPolicyActivate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    powerPolicyActivate.setStatus("mandatory")
_Frontbezel_ObjectIdentity = ObjectIdentity
frontbezel = _Frontbezel_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 12)
)


class _FrontbezelExists_Type(Integer32):
    """Custom type frontbezelExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_FrontbezelExists_Type.__name__ = "Integer32"
_FrontbezelExists_Object = MibScalar
frontbezelExists = _FrontbezelExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 12, 1),
    _FrontbezelExists_Type()
)
frontbezelExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frontbezelExists.setStatus("mandatory")
_Users_ObjectIdentity = ObjectIdentity
users = _Users_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 17)
)
_MmUsers_ObjectIdentity = ObjectIdentity
mmUsers = _MmUsers_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 17, 1)
)
_CurrentlyLoggedInTable_Object = MibTable
currentlyLoggedInTable = _CurrentlyLoggedInTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 17, 1, 1)
)
if mibBuilder.loadTexts:
    currentlyLoggedInTable.setStatus("mandatory")
_CurrentlyLoggedInEntry_Object = MibTableRow
currentlyLoggedInEntry = _CurrentlyLoggedInEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 17, 1, 1, 1)
)
currentlyLoggedInEntry.setIndexNames(
    (0, "BLADE-MIB", "currentlyLoggedInEntryIndex"),
)
if mibBuilder.loadTexts:
    currentlyLoggedInEntry.setStatus("mandatory")


class _CurrentlyLoggedInEntryIndex_Type(Integer32):
    """Custom type currentlyLoggedInEntryIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_CurrentlyLoggedInEntryIndex_Type.__name__ = "Integer32"
_CurrentlyLoggedInEntryIndex_Object = MibTableColumn
currentlyLoggedInEntryIndex = _CurrentlyLoggedInEntryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 17, 1, 1, 1, 1),
    _CurrentlyLoggedInEntryIndex_Type()
)
currentlyLoggedInEntryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    currentlyLoggedInEntryIndex.setStatus("mandatory")


class _CurrentlyLoggedInEntryUserId_Type(OctetString):
    """Custom type currentlyLoggedInEntryUserId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_CurrentlyLoggedInEntryUserId_Type.__name__ = "OctetString"
_CurrentlyLoggedInEntryUserId_Object = MibTableColumn
currentlyLoggedInEntryUserId = _CurrentlyLoggedInEntryUserId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 17, 1, 1, 1, 2),
    _CurrentlyLoggedInEntryUserId_Type()
)
currentlyLoggedInEntryUserId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    currentlyLoggedInEntryUserId.setStatus("mandatory")


class _CurrentlyLoggedInEntryAccMethod_Type(OctetString):
    """Custom type currentlyLoggedInEntryAccMethod based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_CurrentlyLoggedInEntryAccMethod_Type.__name__ = "OctetString"
_CurrentlyLoggedInEntryAccMethod_Object = MibTableColumn
currentlyLoggedInEntryAccMethod = _CurrentlyLoggedInEntryAccMethod_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 17, 1, 1, 1, 3),
    _CurrentlyLoggedInEntryAccMethod_Type()
)
currentlyLoggedInEntryAccMethod.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    currentlyLoggedInEntryAccMethod.setStatus("mandatory")
_MonitorThresholds_ObjectIdentity = ObjectIdentity
monitorThresholds = _MonitorThresholds_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 20)
)
_VoltageThresholds_ObjectIdentity = ObjectIdentity
voltageThresholds = _VoltageThresholds_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 20, 2)
)
_VoltageThresholdsTable_Object = MibTable
voltageThresholdsTable = _VoltageThresholdsTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 20, 2, 1)
)
if mibBuilder.loadTexts:
    voltageThresholdsTable.setStatus("mandatory")
_VoltageThresholdsEntry_Object = MibTableRow
voltageThresholdsEntry = _VoltageThresholdsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 20, 2, 1, 1)
)
voltageThresholdsEntry.setIndexNames(
    (0, "BLADE-MIB", "voltageThresholdEntryIndex"),
)
if mibBuilder.loadTexts:
    voltageThresholdsEntry.setStatus("mandatory")


class _VoltageThresholdEntryIndex_Type(Integer32):
    """Custom type voltageThresholdEntryIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_VoltageThresholdEntryIndex_Type.__name__ = "Integer32"
_VoltageThresholdEntryIndex_Object = MibTableColumn
voltageThresholdEntryIndex = _VoltageThresholdEntryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 20, 2, 1, 1, 1),
    _VoltageThresholdEntryIndex_Type()
)
voltageThresholdEntryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voltageThresholdEntryIndex.setStatus("mandatory")


class _VoltageThresholdEntryName_Type(OctetString):
    """Custom type voltageThresholdEntryName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_VoltageThresholdEntryName_Type.__name__ = "OctetString"
_VoltageThresholdEntryName_Object = MibTableColumn
voltageThresholdEntryName = _VoltageThresholdEntryName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 20, 2, 1, 1, 2),
    _VoltageThresholdEntryName_Type()
)
voltageThresholdEntryName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voltageThresholdEntryName.setStatus("mandatory")
_VoltageThresholdEntryCurrentValue_Type = OctetString
_VoltageThresholdEntryCurrentValue_Object = MibTableColumn
voltageThresholdEntryCurrentValue = _VoltageThresholdEntryCurrentValue_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 20, 2, 1, 1, 3),
    _VoltageThresholdEntryCurrentValue_Type()
)
voltageThresholdEntryCurrentValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voltageThresholdEntryCurrentValue.setStatus("mandatory")
_VoltageThresholdEntryWarningHighValue_Type = OctetString
_VoltageThresholdEntryWarningHighValue_Object = MibTableColumn
voltageThresholdEntryWarningHighValue = _VoltageThresholdEntryWarningHighValue_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 20, 2, 1, 1, 6),
    _VoltageThresholdEntryWarningHighValue_Type()
)
voltageThresholdEntryWarningHighValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voltageThresholdEntryWarningHighValue.setStatus("mandatory")
_VoltageThresholdEntryWarningResetHighValue_Type = OctetString
_VoltageThresholdEntryWarningResetHighValue_Object = MibTableColumn
voltageThresholdEntryWarningResetHighValue = _VoltageThresholdEntryWarningResetHighValue_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 20, 2, 1, 1, 7),
    _VoltageThresholdEntryWarningResetHighValue_Type()
)
voltageThresholdEntryWarningResetHighValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voltageThresholdEntryWarningResetHighValue.setStatus("mandatory")
_VoltageThresholdEntryWarningLowValue_Type = OctetString
_VoltageThresholdEntryWarningLowValue_Object = MibTableColumn
voltageThresholdEntryWarningLowValue = _VoltageThresholdEntryWarningLowValue_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 20, 2, 1, 1, 10),
    _VoltageThresholdEntryWarningLowValue_Type()
)
voltageThresholdEntryWarningLowValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voltageThresholdEntryWarningLowValue.setStatus("mandatory")
_VoltageThresholdEntryWarningResetLowValue_Type = OctetString
_VoltageThresholdEntryWarningResetLowValue_Object = MibTableColumn
voltageThresholdEntryWarningResetLowValue = _VoltageThresholdEntryWarningResetLowValue_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 20, 2, 1, 1, 11),
    _VoltageThresholdEntryWarningResetLowValue_Type()
)
voltageThresholdEntryWarningResetLowValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voltageThresholdEntryWarningResetLowValue.setStatus("mandatory")
_VpdInformation_ObjectIdentity = ObjectIdentity
vpdInformation = _VpdInformation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21)
)
_ChassisVpd_ObjectIdentity = ObjectIdentity
chassisVpd = _ChassisVpd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1)
)
_BladeCenterVpd_ObjectIdentity = ObjectIdentity
bladeCenterVpd = _BladeCenterVpd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1)
)
_BladeCenterVpdMachineType_Type = OctetString
_BladeCenterVpdMachineType_Object = MibScalar
bladeCenterVpdMachineType = _BladeCenterVpdMachineType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 1),
    _BladeCenterVpdMachineType_Type()
)
bladeCenterVpdMachineType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeCenterVpdMachineType.setStatus("mandatory")
_BladeCenterVpdMachineModel_Type = OctetString
_BladeCenterVpdMachineModel_Object = MibScalar
bladeCenterVpdMachineModel = _BladeCenterVpdMachineModel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 2),
    _BladeCenterVpdMachineModel_Type()
)
bladeCenterVpdMachineModel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeCenterVpdMachineModel.setStatus("mandatory")
_BladeCenterSerialNumber_Type = OctetString
_BladeCenterSerialNumber_Object = MibScalar
bladeCenterSerialNumber = _BladeCenterSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 3),
    _BladeCenterSerialNumber_Type()
)
bladeCenterSerialNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeCenterSerialNumber.setStatus("mandatory")
_BladeCenterUUID_Type = OctetString
_BladeCenterUUID_Object = MibScalar
bladeCenterUUID = _BladeCenterUUID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 4),
    _BladeCenterUUID_Type()
)
bladeCenterUUID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeCenterUUID.setStatus("mandatory")
_BladeCenterManufacturingId_Type = OctetString
_BladeCenterManufacturingId_Object = MibScalar
bladeCenterManufacturingId = _BladeCenterManufacturingId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 5),
    _BladeCenterManufacturingId_Type()
)
bladeCenterManufacturingId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeCenterManufacturingId.setStatus("mandatory")
_BladeCenterHardwareRevision_Type = Integer32
_BladeCenterHardwareRevision_Object = MibScalar
bladeCenterHardwareRevision = _BladeCenterHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 6),
    _BladeCenterHardwareRevision_Type()
)
bladeCenterHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeCenterHardwareRevision.setStatus("mandatory")
_BladeCenterFruNumber_Type = OctetString
_BladeCenterFruNumber_Object = MibScalar
bladeCenterFruNumber = _BladeCenterFruNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 7),
    _BladeCenterFruNumber_Type()
)
bladeCenterFruNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeCenterFruNumber.setStatus("mandatory")
_BladeCenterManufDate_Type = OctetString
_BladeCenterManufDate_Object = MibScalar
bladeCenterManufDate = _BladeCenterManufDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 8),
    _BladeCenterManufDate_Type()
)
bladeCenterManufDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeCenterManufDate.setStatus("mandatory")
_BladeCenterPartNumber_Type = OctetString
_BladeCenterPartNumber_Object = MibScalar
bladeCenterPartNumber = _BladeCenterPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 9),
    _BladeCenterPartNumber_Type()
)
bladeCenterPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeCenterPartNumber.setStatus("mandatory")
_BladeCenterFruSerial_Type = OctetString
_BladeCenterFruSerial_Object = MibScalar
bladeCenterFruSerial = _BladeCenterFruSerial_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 10),
    _BladeCenterFruSerial_Type()
)
bladeCenterFruSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeCenterFruSerial.setStatus("mandatory")
_BladeCenterManufacturingIDNumber_Type = OctetString
_BladeCenterManufacturingIDNumber_Object = MibScalar
bladeCenterManufacturingIDNumber = _BladeCenterManufacturingIDNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 11),
    _BladeCenterManufacturingIDNumber_Type()
)
bladeCenterManufacturingIDNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeCenterManufacturingIDNumber.setStatus("mandatory")
_BladeCenterProductId_Type = OctetString
_BladeCenterProductId_Object = MibScalar
bladeCenterProductId = _BladeCenterProductId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 12),
    _BladeCenterProductId_Type()
)
bladeCenterProductId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeCenterProductId.setStatus("mandatory")
_BladeCenterSubManufacturerId_Type = OctetString
_BladeCenterSubManufacturerId_Object = MibScalar
bladeCenterSubManufacturerId = _BladeCenterSubManufacturerId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 13),
    _BladeCenterSubManufacturerId_Type()
)
bladeCenterSubManufacturerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeCenterSubManufacturerId.setStatus("mandatory")
_BladeCenterClei_Type = OctetString
_BladeCenterClei_Object = MibScalar
bladeCenterClei = _BladeCenterClei_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 14),
    _BladeCenterClei_Type()
)
bladeCenterClei.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeCenterClei.setStatus("mandatory")


class _BladeCenterDirectSerialAttach_Type(Integer32):
    """Custom type bladeCenterDirectSerialAttach based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_BladeCenterDirectSerialAttach_Type.__name__ = "Integer32"
_BladeCenterDirectSerialAttach_Object = MibScalar
bladeCenterDirectSerialAttach = _BladeCenterDirectSerialAttach_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 15),
    _BladeCenterDirectSerialAttach_Type()
)
bladeCenterDirectSerialAttach.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeCenterDirectSerialAttach.setStatus("mandatory")
_BladeCenterHardwareRevisionString_Type = OctetString
_BladeCenterHardwareRevisionString_Object = MibScalar
bladeCenterHardwareRevisionString = _BladeCenterHardwareRevisionString_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 16),
    _BladeCenterHardwareRevisionString_Type()
)
bladeCenterHardwareRevisionString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeCenterHardwareRevisionString.setStatus("mandatory")
_MmHardwareVpd_ObjectIdentity = ObjectIdentity
mmHardwareVpd = _MmHardwareVpd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2)
)
_MmHardwareVpdTable_Object = MibTable
mmHardwareVpdTable = _MmHardwareVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1)
)
if mibBuilder.loadTexts:
    mmHardwareVpdTable.setStatus("mandatory")
_MmHardwareVpdEntry_Object = MibTableRow
mmHardwareVpdEntry = _MmHardwareVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1)
)
mmHardwareVpdEntry.setIndexNames(
    (0, "BLADE-MIB", "mmHardwareVpdIndex"),
)
if mibBuilder.loadTexts:
    mmHardwareVpdEntry.setStatus("mandatory")
_MmHardwareVpdIndex_Type = Integer32
_MmHardwareVpdIndex_Object = MibTableColumn
mmHardwareVpdIndex = _MmHardwareVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 1),
    _MmHardwareVpdIndex_Type()
)
mmHardwareVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmHardwareVpdIndex.setStatus("mandatory")
_MmHardwareVpdBayNumber_Type = OctetString
_MmHardwareVpdBayNumber_Object = MibTableColumn
mmHardwareVpdBayNumber = _MmHardwareVpdBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 2),
    _MmHardwareVpdBayNumber_Type()
)
mmHardwareVpdBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmHardwareVpdBayNumber.setStatus("mandatory")
_MmHardwareVpdManufacturingId_Type = OctetString
_MmHardwareVpdManufacturingId_Object = MibTableColumn
mmHardwareVpdManufacturingId = _MmHardwareVpdManufacturingId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 3),
    _MmHardwareVpdManufacturingId_Type()
)
mmHardwareVpdManufacturingId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmHardwareVpdManufacturingId.setStatus("mandatory")
_MmHardwareVpdFruNumber_Type = OctetString
_MmHardwareVpdFruNumber_Object = MibTableColumn
mmHardwareVpdFruNumber = _MmHardwareVpdFruNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 4),
    _MmHardwareVpdFruNumber_Type()
)
mmHardwareVpdFruNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmHardwareVpdFruNumber.setStatus("mandatory")
_MmHardwareVpdHardwareRevision_Type = Integer32
_MmHardwareVpdHardwareRevision_Object = MibTableColumn
mmHardwareVpdHardwareRevision = _MmHardwareVpdHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 5),
    _MmHardwareVpdHardwareRevision_Type()
)
mmHardwareVpdHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmHardwareVpdHardwareRevision.setStatus("mandatory")
_MmHardwareVpdUuid_Type = OctetString
_MmHardwareVpdUuid_Object = MibTableColumn
mmHardwareVpdUuid = _MmHardwareVpdUuid_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 6),
    _MmHardwareVpdUuid_Type()
)
mmHardwareVpdUuid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmHardwareVpdUuid.setStatus("mandatory")
_MmHardwareVpdManufDate_Type = OctetString
_MmHardwareVpdManufDate_Object = MibTableColumn
mmHardwareVpdManufDate = _MmHardwareVpdManufDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 7),
    _MmHardwareVpdManufDate_Type()
)
mmHardwareVpdManufDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmHardwareVpdManufDate.setStatus("mandatory")
_MmHardwareVpdPartNumber_Type = OctetString
_MmHardwareVpdPartNumber_Object = MibTableColumn
mmHardwareVpdPartNumber = _MmHardwareVpdPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 8),
    _MmHardwareVpdPartNumber_Type()
)
mmHardwareVpdPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmHardwareVpdPartNumber.setStatus("mandatory")
_MmHardwareVpdFruSerial_Type = OctetString
_MmHardwareVpdFruSerial_Object = MibTableColumn
mmHardwareVpdFruSerial = _MmHardwareVpdFruSerial_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 9),
    _MmHardwareVpdFruSerial_Type()
)
mmHardwareVpdFruSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmHardwareVpdFruSerial.setStatus("mandatory")
_MmHardwareVpdManufacturingIDNumber_Type = OctetString
_MmHardwareVpdManufacturingIDNumber_Object = MibTableColumn
mmHardwareVpdManufacturingIDNumber = _MmHardwareVpdManufacturingIDNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 10),
    _MmHardwareVpdManufacturingIDNumber_Type()
)
mmHardwareVpdManufacturingIDNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmHardwareVpdManufacturingIDNumber.setStatus("mandatory")
_MmHardwareVpdProductId_Type = OctetString
_MmHardwareVpdProductId_Object = MibTableColumn
mmHardwareVpdProductId = _MmHardwareVpdProductId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 11),
    _MmHardwareVpdProductId_Type()
)
mmHardwareVpdProductId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmHardwareVpdProductId.setStatus("mandatory")
_MmHardwareVpdSubManufacturerId_Type = OctetString
_MmHardwareVpdSubManufacturerId_Object = MibTableColumn
mmHardwareVpdSubManufacturerId = _MmHardwareVpdSubManufacturerId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 12),
    _MmHardwareVpdSubManufacturerId_Type()
)
mmHardwareVpdSubManufacturerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmHardwareVpdSubManufacturerId.setStatus("mandatory")
_MmHardwareVpdClei_Type = OctetString
_MmHardwareVpdClei_Object = MibTableColumn
mmHardwareVpdClei = _MmHardwareVpdClei_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 13),
    _MmHardwareVpdClei_Type()
)
mmHardwareVpdClei.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmHardwareVpdClei.setStatus("mandatory")
_MmHardwareVpdHardwareRevisionString_Type = OctetString
_MmHardwareVpdHardwareRevisionString_Object = MibTableColumn
mmHardwareVpdHardwareRevisionString = _MmHardwareVpdHardwareRevisionString_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 14),
    _MmHardwareVpdHardwareRevisionString_Type()
)
mmHardwareVpdHardwareRevisionString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmHardwareVpdHardwareRevisionString.setStatus("mandatory")
_MmInpHardwareVpdTable_Object = MibTable
mmInpHardwareVpdTable = _MmInpHardwareVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 2)
)
if mibBuilder.loadTexts:
    mmInpHardwareVpdTable.setStatus("mandatory")
_MmInpHardwareVpdEntry_Object = MibTableRow
mmInpHardwareVpdEntry = _MmInpHardwareVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 2, 1)
)
mmInpHardwareVpdEntry.setIndexNames(
    (0, "BLADE-MIB", "mmInpHardwareVpdIndex"),
)
if mibBuilder.loadTexts:
    mmInpHardwareVpdEntry.setStatus("mandatory")
_MmInpHardwareVpdIndex_Type = Integer32
_MmInpHardwareVpdIndex_Object = MibTableColumn
mmInpHardwareVpdIndex = _MmInpHardwareVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 2, 1, 1),
    _MmInpHardwareVpdIndex_Type()
)
mmInpHardwareVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmInpHardwareVpdIndex.setStatus("mandatory")
_MmInpHardwareVpdBayNumber_Type = OctetString
_MmInpHardwareVpdBayNumber_Object = MibTableColumn
mmInpHardwareVpdBayNumber = _MmInpHardwareVpdBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 2, 1, 2),
    _MmInpHardwareVpdBayNumber_Type()
)
mmInpHardwareVpdBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmInpHardwareVpdBayNumber.setStatus("mandatory")
_MmInpHardwareVpdManufacturingId_Type = OctetString
_MmInpHardwareVpdManufacturingId_Object = MibTableColumn
mmInpHardwareVpdManufacturingId = _MmInpHardwareVpdManufacturingId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 2, 1, 3),
    _MmInpHardwareVpdManufacturingId_Type()
)
mmInpHardwareVpdManufacturingId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmInpHardwareVpdManufacturingId.setStatus("mandatory")
_MmInpHardwareVpdFruNumber_Type = OctetString
_MmInpHardwareVpdFruNumber_Object = MibTableColumn
mmInpHardwareVpdFruNumber = _MmInpHardwareVpdFruNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 2, 1, 4),
    _MmInpHardwareVpdFruNumber_Type()
)
mmInpHardwareVpdFruNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmInpHardwareVpdFruNumber.setStatus("mandatory")
_MmInpHardwareVpdHardwareRevision_Type = Integer32
_MmInpHardwareVpdHardwareRevision_Object = MibTableColumn
mmInpHardwareVpdHardwareRevision = _MmInpHardwareVpdHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 2, 1, 5),
    _MmInpHardwareVpdHardwareRevision_Type()
)
mmInpHardwareVpdHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmInpHardwareVpdHardwareRevision.setStatus("mandatory")
_MmInpHardwareVpdUuid_Type = OctetString
_MmInpHardwareVpdUuid_Object = MibTableColumn
mmInpHardwareVpdUuid = _MmInpHardwareVpdUuid_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 2, 1, 6),
    _MmInpHardwareVpdUuid_Type()
)
mmInpHardwareVpdUuid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmInpHardwareVpdUuid.setStatus("mandatory")
_MmInpHardwareVpdManufDate_Type = OctetString
_MmInpHardwareVpdManufDate_Object = MibTableColumn
mmInpHardwareVpdManufDate = _MmInpHardwareVpdManufDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 2, 1, 7),
    _MmInpHardwareVpdManufDate_Type()
)
mmInpHardwareVpdManufDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmInpHardwareVpdManufDate.setStatus("mandatory")
_MmInpHardwareVpdPartNumber_Type = OctetString
_MmInpHardwareVpdPartNumber_Object = MibTableColumn
mmInpHardwareVpdPartNumber = _MmInpHardwareVpdPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 2, 1, 8),
    _MmInpHardwareVpdPartNumber_Type()
)
mmInpHardwareVpdPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmInpHardwareVpdPartNumber.setStatus("mandatory")
_MmInpHardwareVpdFruSerial_Type = OctetString
_MmInpHardwareVpdFruSerial_Object = MibTableColumn
mmInpHardwareVpdFruSerial = _MmInpHardwareVpdFruSerial_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 2, 1, 9),
    _MmInpHardwareVpdFruSerial_Type()
)
mmInpHardwareVpdFruSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmInpHardwareVpdFruSerial.setStatus("mandatory")
_MmInpHardwareVpdManufacturingIDNumber_Type = OctetString
_MmInpHardwareVpdManufacturingIDNumber_Object = MibTableColumn
mmInpHardwareVpdManufacturingIDNumber = _MmInpHardwareVpdManufacturingIDNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 2, 1, 10),
    _MmInpHardwareVpdManufacturingIDNumber_Type()
)
mmInpHardwareVpdManufacturingIDNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmInpHardwareVpdManufacturingIDNumber.setStatus("mandatory")
_MmInpHardwareVpdProductId_Type = OctetString
_MmInpHardwareVpdProductId_Object = MibTableColumn
mmInpHardwareVpdProductId = _MmInpHardwareVpdProductId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 2, 1, 11),
    _MmInpHardwareVpdProductId_Type()
)
mmInpHardwareVpdProductId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmInpHardwareVpdProductId.setStatus("mandatory")
_MmInpHardwareVpdSubManufacturerId_Type = OctetString
_MmInpHardwareVpdSubManufacturerId_Object = MibTableColumn
mmInpHardwareVpdSubManufacturerId = _MmInpHardwareVpdSubManufacturerId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 2, 1, 12),
    _MmInpHardwareVpdSubManufacturerId_Type()
)
mmInpHardwareVpdSubManufacturerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmInpHardwareVpdSubManufacturerId.setStatus("mandatory")
_MmInpHardwareVpdClei_Type = OctetString
_MmInpHardwareVpdClei_Object = MibTableColumn
mmInpHardwareVpdClei = _MmInpHardwareVpdClei_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 2, 1, 13),
    _MmInpHardwareVpdClei_Type()
)
mmInpHardwareVpdClei.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmInpHardwareVpdClei.setStatus("mandatory")
_MmInpHardwareVpdHardwareRevisionString_Type = OctetString
_MmInpHardwareVpdHardwareRevisionString_Object = MibTableColumn
mmInpHardwareVpdHardwareRevisionString = _MmInpHardwareVpdHardwareRevisionString_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 2, 1, 14),
    _MmInpHardwareVpdHardwareRevisionString_Type()
)
mmInpHardwareVpdHardwareRevisionString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmInpHardwareVpdHardwareRevisionString.setStatus("mandatory")
_MmFirmwareVpd_ObjectIdentity = ObjectIdentity
mmFirmwareVpd = _MmFirmwareVpd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3)
)
_MmMainApplVpdTable_Object = MibTable
mmMainApplVpdTable = _MmMainApplVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1)
)
if mibBuilder.loadTexts:
    mmMainApplVpdTable.setStatus("mandatory")
_MmMainApplVpdEntry_Object = MibTableRow
mmMainApplVpdEntry = _MmMainApplVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1, 1)
)
mmMainApplVpdEntry.setIndexNames(
    (0, "BLADE-MIB", "mmMainApplVpdIndex"),
)
if mibBuilder.loadTexts:
    mmMainApplVpdEntry.setStatus("mandatory")
_MmMainApplVpdIndex_Type = Integer32
_MmMainApplVpdIndex_Object = MibTableColumn
mmMainApplVpdIndex = _MmMainApplVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1, 1, 1),
    _MmMainApplVpdIndex_Type()
)
mmMainApplVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmMainApplVpdIndex.setStatus("mandatory")
_MmMainApplVpdName_Type = OctetString
_MmMainApplVpdName_Object = MibTableColumn
mmMainApplVpdName = _MmMainApplVpdName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1, 1, 2),
    _MmMainApplVpdName_Type()
)
mmMainApplVpdName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmMainApplVpdName.setStatus("mandatory")
_MmMainApplVpdBuildId_Type = OctetString
_MmMainApplVpdBuildId_Object = MibTableColumn
mmMainApplVpdBuildId = _MmMainApplVpdBuildId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1, 1, 3),
    _MmMainApplVpdBuildId_Type()
)
mmMainApplVpdBuildId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmMainApplVpdBuildId.setStatus("mandatory")
_MmMainApplVpdRevisonNumber_Type = OctetString
_MmMainApplVpdRevisonNumber_Object = MibTableColumn
mmMainApplVpdRevisonNumber = _MmMainApplVpdRevisonNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1, 1, 4),
    _MmMainApplVpdRevisonNumber_Type()
)
mmMainApplVpdRevisonNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmMainApplVpdRevisonNumber.setStatus("mandatory")
_MmMainApplVpdFilename_Type = OctetString
_MmMainApplVpdFilename_Object = MibTableColumn
mmMainApplVpdFilename = _MmMainApplVpdFilename_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1, 1, 5),
    _MmMainApplVpdFilename_Type()
)
mmMainApplVpdFilename.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmMainApplVpdFilename.setStatus("mandatory")
_MmMainApplVpdBuildDate_Type = OctetString
_MmMainApplVpdBuildDate_Object = MibTableColumn
mmMainApplVpdBuildDate = _MmMainApplVpdBuildDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1, 1, 6),
    _MmMainApplVpdBuildDate_Type()
)
mmMainApplVpdBuildDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmMainApplVpdBuildDate.setStatus("mandatory")
_MmBootROMVpdTable_Object = MibTable
mmBootROMVpdTable = _MmBootROMVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 2)
)
if mibBuilder.loadTexts:
    mmBootROMVpdTable.setStatus("deprecated")
_MmBootROMVpdEntry_Object = MibTableRow
mmBootROMVpdEntry = _MmBootROMVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 2, 1)
)
mmBootROMVpdEntry.setIndexNames(
    (0, "BLADE-MIB", "mmBootROMVpdIndex"),
)
if mibBuilder.loadTexts:
    mmBootROMVpdEntry.setStatus("deprecated")
_MmBootROMVpdIndex_Type = Integer32
_MmBootROMVpdIndex_Object = MibTableColumn
mmBootROMVpdIndex = _MmBootROMVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 2, 1, 1),
    _MmBootROMVpdIndex_Type()
)
mmBootROMVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmBootROMVpdIndex.setStatus("deprecated")
_MmBootROMVpdName_Type = OctetString
_MmBootROMVpdName_Object = MibTableColumn
mmBootROMVpdName = _MmBootROMVpdName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 2, 1, 2),
    _MmBootROMVpdName_Type()
)
mmBootROMVpdName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmBootROMVpdName.setStatus("deprecated")
_MmBootROMVpdBuildId_Type = OctetString
_MmBootROMVpdBuildId_Object = MibTableColumn
mmBootROMVpdBuildId = _MmBootROMVpdBuildId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 2, 1, 3),
    _MmBootROMVpdBuildId_Type()
)
mmBootROMVpdBuildId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmBootROMVpdBuildId.setStatus("deprecated")
_MmBootROMVpdRevisonNumber_Type = OctetString
_MmBootROMVpdRevisonNumber_Object = MibTableColumn
mmBootROMVpdRevisonNumber = _MmBootROMVpdRevisonNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 2, 1, 4),
    _MmBootROMVpdRevisonNumber_Type()
)
mmBootROMVpdRevisonNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmBootROMVpdRevisonNumber.setStatus("deprecated")
_MmBootROMVpdFilename_Type = OctetString
_MmBootROMVpdFilename_Object = MibTableColumn
mmBootROMVpdFilename = _MmBootROMVpdFilename_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 2, 1, 5),
    _MmBootROMVpdFilename_Type()
)
mmBootROMVpdFilename.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmBootROMVpdFilename.setStatus("deprecated")
_MmBootROMVpdBuildDate_Type = OctetString
_MmBootROMVpdBuildDate_Object = MibTableColumn
mmBootROMVpdBuildDate = _MmBootROMVpdBuildDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 2, 1, 6),
    _MmBootROMVpdBuildDate_Type()
)
mmBootROMVpdBuildDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmBootROMVpdBuildDate.setStatus("deprecated")
_MmRemoteControlVpdTable_Object = MibTable
mmRemoteControlVpdTable = _MmRemoteControlVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 3)
)
if mibBuilder.loadTexts:
    mmRemoteControlVpdTable.setStatus("deprecated")
_MmRemoteControlVpdEntry_Object = MibTableRow
mmRemoteControlVpdEntry = _MmRemoteControlVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 3, 1)
)
mmRemoteControlVpdEntry.setIndexNames(
    (0, "BLADE-MIB", "mmRemoteControlVpdIndex"),
)
if mibBuilder.loadTexts:
    mmRemoteControlVpdEntry.setStatus("deprecated")
_MmRemoteControlVpdIndex_Type = Integer32
_MmRemoteControlVpdIndex_Object = MibTableColumn
mmRemoteControlVpdIndex = _MmRemoteControlVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 3, 1, 1),
    _MmRemoteControlVpdIndex_Type()
)
mmRemoteControlVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmRemoteControlVpdIndex.setStatus("deprecated")
_MmRemoteControlVpdName_Type = OctetString
_MmRemoteControlVpdName_Object = MibTableColumn
mmRemoteControlVpdName = _MmRemoteControlVpdName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 3, 1, 2),
    _MmRemoteControlVpdName_Type()
)
mmRemoteControlVpdName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmRemoteControlVpdName.setStatus("deprecated")
_MmRemoteControlVpdBuildId_Type = OctetString
_MmRemoteControlVpdBuildId_Object = MibTableColumn
mmRemoteControlVpdBuildId = _MmRemoteControlVpdBuildId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 3, 1, 3),
    _MmRemoteControlVpdBuildId_Type()
)
mmRemoteControlVpdBuildId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmRemoteControlVpdBuildId.setStatus("deprecated")
_MmRemoteControlVpdRevisonNumber_Type = OctetString
_MmRemoteControlVpdRevisonNumber_Object = MibTableColumn
mmRemoteControlVpdRevisonNumber = _MmRemoteControlVpdRevisonNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 3, 1, 4),
    _MmRemoteControlVpdRevisonNumber_Type()
)
mmRemoteControlVpdRevisonNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmRemoteControlVpdRevisonNumber.setStatus("deprecated")
_MmRemoteControlVpdFilename_Type = OctetString
_MmRemoteControlVpdFilename_Object = MibTableColumn
mmRemoteControlVpdFilename = _MmRemoteControlVpdFilename_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 3, 1, 5),
    _MmRemoteControlVpdFilename_Type()
)
mmRemoteControlVpdFilename.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmRemoteControlVpdFilename.setStatus("deprecated")
_MmRemoteControlVpdBuildDate_Type = OctetString
_MmRemoteControlVpdBuildDate_Object = MibTableColumn
mmRemoteControlVpdBuildDate = _MmRemoteControlVpdBuildDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 3, 1, 6),
    _MmRemoteControlVpdBuildDate_Type()
)
mmRemoteControlVpdBuildDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmRemoteControlVpdBuildDate.setStatus("deprecated")
_MmPS2toUSBConvVpdTable_Object = MibTable
mmPS2toUSBConvVpdTable = _MmPS2toUSBConvVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 4)
)
if mibBuilder.loadTexts:
    mmPS2toUSBConvVpdTable.setStatus("deprecated")
_MmPS2toUSBConvVpdEntry_Object = MibTableRow
mmPS2toUSBConvVpdEntry = _MmPS2toUSBConvVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 4, 1)
)
mmPS2toUSBConvVpdEntry.setIndexNames(
    (0, "BLADE-MIB", "mmPS2toUSBConvVpdIndex"),
)
if mibBuilder.loadTexts:
    mmPS2toUSBConvVpdEntry.setStatus("deprecated")
_MmPS2toUSBConvVpdIndex_Type = Integer32
_MmPS2toUSBConvVpdIndex_Object = MibTableColumn
mmPS2toUSBConvVpdIndex = _MmPS2toUSBConvVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 4, 1, 1),
    _MmPS2toUSBConvVpdIndex_Type()
)
mmPS2toUSBConvVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmPS2toUSBConvVpdIndex.setStatus("deprecated")
_MmPS2toUSBConvVpdName_Type = OctetString
_MmPS2toUSBConvVpdName_Object = MibTableColumn
mmPS2toUSBConvVpdName = _MmPS2toUSBConvVpdName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 4, 1, 2),
    _MmPS2toUSBConvVpdName_Type()
)
mmPS2toUSBConvVpdName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmPS2toUSBConvVpdName.setStatus("deprecated")
_MmPS2toUSBConvVpdBuildId_Type = OctetString
_MmPS2toUSBConvVpdBuildId_Object = MibTableColumn
mmPS2toUSBConvVpdBuildId = _MmPS2toUSBConvVpdBuildId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 4, 1, 3),
    _MmPS2toUSBConvVpdBuildId_Type()
)
mmPS2toUSBConvVpdBuildId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmPS2toUSBConvVpdBuildId.setStatus("deprecated")
_MmPS2toUSBConvVpdRevisonNumber_Type = OctetString
_MmPS2toUSBConvVpdRevisonNumber_Object = MibTableColumn
mmPS2toUSBConvVpdRevisonNumber = _MmPS2toUSBConvVpdRevisonNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 4, 1, 4),
    _MmPS2toUSBConvVpdRevisonNumber_Type()
)
mmPS2toUSBConvVpdRevisonNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmPS2toUSBConvVpdRevisonNumber.setStatus("deprecated")
_MmPS2toUSBConvVpdFilename_Type = OctetString
_MmPS2toUSBConvVpdFilename_Object = MibTableColumn
mmPS2toUSBConvVpdFilename = _MmPS2toUSBConvVpdFilename_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 4, 1, 5),
    _MmPS2toUSBConvVpdFilename_Type()
)
mmPS2toUSBConvVpdFilename.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmPS2toUSBConvVpdFilename.setStatus("deprecated")
_MmPS2toUSBConvVpdBuildDate_Type = OctetString
_MmPS2toUSBConvVpdBuildDate_Object = MibTableColumn
mmPS2toUSBConvVpdBuildDate = _MmPS2toUSBConvVpdBuildDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 4, 1, 6),
    _MmPS2toUSBConvVpdBuildDate_Type()
)
mmPS2toUSBConvVpdBuildDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmPS2toUSBConvVpdBuildDate.setStatus("deprecated")
_MmToUSBIntfVpdTable_Object = MibTable
mmToUSBIntfVpdTable = _MmToUSBIntfVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 5)
)
if mibBuilder.loadTexts:
    mmToUSBIntfVpdTable.setStatus("deprecated")
_MmToUSBIntfVpdEntry_Object = MibTableRow
mmToUSBIntfVpdEntry = _MmToUSBIntfVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 5, 1)
)
mmToUSBIntfVpdEntry.setIndexNames(
    (0, "BLADE-MIB", "mmToUSBIntfVpdIndex"),
)
if mibBuilder.loadTexts:
    mmToUSBIntfVpdEntry.setStatus("deprecated")
_MmToUSBIntfVpdIndex_Type = Integer32
_MmToUSBIntfVpdIndex_Object = MibTableColumn
mmToUSBIntfVpdIndex = _MmToUSBIntfVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 5, 1, 1),
    _MmToUSBIntfVpdIndex_Type()
)
mmToUSBIntfVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmToUSBIntfVpdIndex.setStatus("deprecated")
_MmToUSBIntfVpdName_Type = OctetString
_MmToUSBIntfVpdName_Object = MibTableColumn
mmToUSBIntfVpdName = _MmToUSBIntfVpdName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 5, 1, 2),
    _MmToUSBIntfVpdName_Type()
)
mmToUSBIntfVpdName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmToUSBIntfVpdName.setStatus("deprecated")
_MmToUSBIntfVpdBuildId_Type = OctetString
_MmToUSBIntfVpdBuildId_Object = MibTableColumn
mmToUSBIntfVpdBuildId = _MmToUSBIntfVpdBuildId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 5, 1, 3),
    _MmToUSBIntfVpdBuildId_Type()
)
mmToUSBIntfVpdBuildId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmToUSBIntfVpdBuildId.setStatus("deprecated")
_MmToUSBIntfVpdRevisonNumber_Type = OctetString
_MmToUSBIntfVpdRevisonNumber_Object = MibTableColumn
mmToUSBIntfVpdRevisonNumber = _MmToUSBIntfVpdRevisonNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 5, 1, 4),
    _MmToUSBIntfVpdRevisonNumber_Type()
)
mmToUSBIntfVpdRevisonNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmToUSBIntfVpdRevisonNumber.setStatus("deprecated")
_MmToUSBIntfVpdFilename_Type = OctetString
_MmToUSBIntfVpdFilename_Object = MibTableColumn
mmToUSBIntfVpdFilename = _MmToUSBIntfVpdFilename_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 5, 1, 5),
    _MmToUSBIntfVpdFilename_Type()
)
mmToUSBIntfVpdFilename.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmToUSBIntfVpdFilename.setStatus("deprecated")
_MmToUSBIntfVpdBuildDate_Type = OctetString
_MmToUSBIntfVpdBuildDate_Object = MibTableColumn
mmToUSBIntfVpdBuildDate = _MmToUSBIntfVpdBuildDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 5, 1, 6),
    _MmToUSBIntfVpdBuildDate_Type()
)
mmToUSBIntfVpdBuildDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmToUSBIntfVpdBuildDate.setStatus("deprecated")
_BladeHardwareVpd_ObjectIdentity = ObjectIdentity
bladeHardwareVpd = _BladeHardwareVpd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4)
)
_BladeHardwareVpdTable_Object = MibTable
bladeHardwareVpdTable = _BladeHardwareVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1)
)
if mibBuilder.loadTexts:
    bladeHardwareVpdTable.setStatus("mandatory")
_BladeHardwareVpdEntry_Object = MibTableRow
bladeHardwareVpdEntry = _BladeHardwareVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1)
)
bladeHardwareVpdEntry.setIndexNames(
    (0, "BLADE-MIB", "bladeHardwareVpdIndex"),
)
if mibBuilder.loadTexts:
    bladeHardwareVpdEntry.setStatus("mandatory")
_BladeHardwareVpdIndex_Type = Integer32
_BladeHardwareVpdIndex_Object = MibTableColumn
bladeHardwareVpdIndex = _BladeHardwareVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 1),
    _BladeHardwareVpdIndex_Type()
)
bladeHardwareVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHardwareVpdIndex.setStatus("mandatory")
_BladeHardwareVpdBayNumber_Type = OctetString
_BladeHardwareVpdBayNumber_Object = MibTableColumn
bladeHardwareVpdBayNumber = _BladeHardwareVpdBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 2),
    _BladeHardwareVpdBayNumber_Type()
)
bladeHardwareVpdBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHardwareVpdBayNumber.setStatus("mandatory")
_BladeHardwareVpdManufacturingId_Type = OctetString
_BladeHardwareVpdManufacturingId_Object = MibTableColumn
bladeHardwareVpdManufacturingId = _BladeHardwareVpdManufacturingId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 3),
    _BladeHardwareVpdManufacturingId_Type()
)
bladeHardwareVpdManufacturingId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHardwareVpdManufacturingId.setStatus("mandatory")
_BladeHardwareVpdFruNumber_Type = OctetString
_BladeHardwareVpdFruNumber_Object = MibTableColumn
bladeHardwareVpdFruNumber = _BladeHardwareVpdFruNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 4),
    _BladeHardwareVpdFruNumber_Type()
)
bladeHardwareVpdFruNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHardwareVpdFruNumber.setStatus("mandatory")
_BladeHardwareVpdHardwareRevision_Type = Integer32
_BladeHardwareVpdHardwareRevision_Object = MibTableColumn
bladeHardwareVpdHardwareRevision = _BladeHardwareVpdHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 5),
    _BladeHardwareVpdHardwareRevision_Type()
)
bladeHardwareVpdHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHardwareVpdHardwareRevision.setStatus("mandatory")
_BladeHardwareVpdSerialNumber_Type = OctetString
_BladeHardwareVpdSerialNumber_Object = MibTableColumn
bladeHardwareVpdSerialNumber = _BladeHardwareVpdSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 6),
    _BladeHardwareVpdSerialNumber_Type()
)
bladeHardwareVpdSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHardwareVpdSerialNumber.setStatus("mandatory")
_BladeHardwareVpdMachineType_Type = OctetString
_BladeHardwareVpdMachineType_Object = MibTableColumn
bladeHardwareVpdMachineType = _BladeHardwareVpdMachineType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 7),
    _BladeHardwareVpdMachineType_Type()
)
bladeHardwareVpdMachineType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHardwareVpdMachineType.setStatus("mandatory")
_BladeHardwareVpdUuid_Type = OctetString
_BladeHardwareVpdUuid_Object = MibTableColumn
bladeHardwareVpdUuid = _BladeHardwareVpdUuid_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 8),
    _BladeHardwareVpdUuid_Type()
)
bladeHardwareVpdUuid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHardwareVpdUuid.setStatus("mandatory")
_BladeHardwareVpdManufDate_Type = OctetString
_BladeHardwareVpdManufDate_Object = MibTableColumn
bladeHardwareVpdManufDate = _BladeHardwareVpdManufDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 9),
    _BladeHardwareVpdManufDate_Type()
)
bladeHardwareVpdManufDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHardwareVpdManufDate.setStatus("mandatory")
_BladeHardwareVpdPartNumber_Type = OctetString
_BladeHardwareVpdPartNumber_Object = MibTableColumn
bladeHardwareVpdPartNumber = _BladeHardwareVpdPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 10),
    _BladeHardwareVpdPartNumber_Type()
)
bladeHardwareVpdPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHardwareVpdPartNumber.setStatus("mandatory")
_BladeHardwareVpdFruSerial_Type = OctetString
_BladeHardwareVpdFruSerial_Object = MibTableColumn
bladeHardwareVpdFruSerial = _BladeHardwareVpdFruSerial_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 11),
    _BladeHardwareVpdFruSerial_Type()
)
bladeHardwareVpdFruSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHardwareVpdFruSerial.setStatus("mandatory")
_BladeHardwareVpdMachineModel_Type = OctetString
_BladeHardwareVpdMachineModel_Object = MibTableColumn
bladeHardwareVpdMachineModel = _BladeHardwareVpdMachineModel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 12),
    _BladeHardwareVpdMachineModel_Type()
)
bladeHardwareVpdMachineModel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHardwareVpdMachineModel.setStatus("mandatory")
_BladeHardwareVpdManufacturingIDNumber_Type = OctetString
_BladeHardwareVpdManufacturingIDNumber_Object = MibTableColumn
bladeHardwareVpdManufacturingIDNumber = _BladeHardwareVpdManufacturingIDNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 13),
    _BladeHardwareVpdManufacturingIDNumber_Type()
)
bladeHardwareVpdManufacturingIDNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHardwareVpdManufacturingIDNumber.setStatus("mandatory")
_BladeHardwareVpdProductId_Type = OctetString
_BladeHardwareVpdProductId_Object = MibTableColumn
bladeHardwareVpdProductId = _BladeHardwareVpdProductId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 14),
    _BladeHardwareVpdProductId_Type()
)
bladeHardwareVpdProductId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHardwareVpdProductId.setStatus("mandatory")
_BladeHardwareVpdSubManufacturerId_Type = OctetString
_BladeHardwareVpdSubManufacturerId_Object = MibTableColumn
bladeHardwareVpdSubManufacturerId = _BladeHardwareVpdSubManufacturerId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 15),
    _BladeHardwareVpdSubManufacturerId_Type()
)
bladeHardwareVpdSubManufacturerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHardwareVpdSubManufacturerId.setStatus("mandatory")
_BladeHardwareVpdClei_Type = OctetString
_BladeHardwareVpdClei_Object = MibTableColumn
bladeHardwareVpdClei = _BladeHardwareVpdClei_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 16),
    _BladeHardwareVpdClei_Type()
)
bladeHardwareVpdClei.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHardwareVpdClei.setStatus("mandatory")
_BladeHardwareVpdHardwareRevisionString_Type = OctetString
_BladeHardwareVpdHardwareRevisionString_Object = MibTableColumn
bladeHardwareVpdHardwareRevisionString = _BladeHardwareVpdHardwareRevisionString_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 17),
    _BladeHardwareVpdHardwareRevisionString_Type()
)
bladeHardwareVpdHardwareRevisionString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHardwareVpdHardwareRevisionString.setStatus("mandatory")


class _BladeDaughterVpdCardType_Type(Integer32):
    """Custom type bladeDaughterVpdCardType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("networkExpansion", 1),
          ("storageExpansion", 2),
          ("pciExpansion", 3),
          ("genericExpansion", 4))
    )


_BladeDaughterVpdCardType_Type.__name__ = "Integer32"
_BladeDaughterVpdCardType_Object = MibTableColumn
bladeDaughterVpdCardType = _BladeDaughterVpdCardType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 20),
    _BladeDaughterVpdCardType_Type()
)
bladeDaughterVpdCardType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterVpdCardType.setStatus("mandatory")
_BladeDaughterVpdManufacturingId_Type = OctetString
_BladeDaughterVpdManufacturingId_Object = MibTableColumn
bladeDaughterVpdManufacturingId = _BladeDaughterVpdManufacturingId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 21),
    _BladeDaughterVpdManufacturingId_Type()
)
bladeDaughterVpdManufacturingId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterVpdManufacturingId.setStatus("mandatory")
_BladeDaughterVpdFruNumber_Type = OctetString
_BladeDaughterVpdFruNumber_Object = MibTableColumn
bladeDaughterVpdFruNumber = _BladeDaughterVpdFruNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 22),
    _BladeDaughterVpdFruNumber_Type()
)
bladeDaughterVpdFruNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterVpdFruNumber.setStatus("mandatory")
_BladeDaughterVpdHardwareRevision_Type = Integer32
_BladeDaughterVpdHardwareRevision_Object = MibTableColumn
bladeDaughterVpdHardwareRevision = _BladeDaughterVpdHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 23),
    _BladeDaughterVpdHardwareRevision_Type()
)
bladeDaughterVpdHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterVpdHardwareRevision.setStatus("mandatory")
_BladeDaughterVpdSerialNumber_Type = OctetString
_BladeDaughterVpdSerialNumber_Object = MibTableColumn
bladeDaughterVpdSerialNumber = _BladeDaughterVpdSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 24),
    _BladeDaughterVpdSerialNumber_Type()
)
bladeDaughterVpdSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterVpdSerialNumber.setStatus("mandatory")
_BladeDaughterVpdMachineType_Type = OctetString
_BladeDaughterVpdMachineType_Object = MibTableColumn
bladeDaughterVpdMachineType = _BladeDaughterVpdMachineType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 25),
    _BladeDaughterVpdMachineType_Type()
)
bladeDaughterVpdMachineType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterVpdMachineType.setStatus("mandatory")
_BladeDaughterVpdUuid_Type = OctetString
_BladeDaughterVpdUuid_Object = MibTableColumn
bladeDaughterVpdUuid = _BladeDaughterVpdUuid_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 26),
    _BladeDaughterVpdUuid_Type()
)
bladeDaughterVpdUuid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterVpdUuid.setStatus("mandatory")
_BladeDaughterVpdManufDate_Type = OctetString
_BladeDaughterVpdManufDate_Object = MibTableColumn
bladeDaughterVpdManufDate = _BladeDaughterVpdManufDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 27),
    _BladeDaughterVpdManufDate_Type()
)
bladeDaughterVpdManufDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterVpdManufDate.setStatus("mandatory")
_BladeDaughterVpdPartNumber_Type = OctetString
_BladeDaughterVpdPartNumber_Object = MibTableColumn
bladeDaughterVpdPartNumber = _BladeDaughterVpdPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 28),
    _BladeDaughterVpdPartNumber_Type()
)
bladeDaughterVpdPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterVpdPartNumber.setStatus("mandatory")
_BladeDaughterVpdFruSerial_Type = OctetString
_BladeDaughterVpdFruSerial_Object = MibTableColumn
bladeDaughterVpdFruSerial = _BladeDaughterVpdFruSerial_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 29),
    _BladeDaughterVpdFruSerial_Type()
)
bladeDaughterVpdFruSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterVpdFruSerial.setStatus("mandatory")
_BladeDaughterVpdManufacturingIDNumber_Type = OctetString
_BladeDaughterVpdManufacturingIDNumber_Object = MibTableColumn
bladeDaughterVpdManufacturingIDNumber = _BladeDaughterVpdManufacturingIDNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 30),
    _BladeDaughterVpdManufacturingIDNumber_Type()
)
bladeDaughterVpdManufacturingIDNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterVpdManufacturingIDNumber.setStatus("mandatory")
_BladeDaughterVpdProductId_Type = OctetString
_BladeDaughterVpdProductId_Object = MibTableColumn
bladeDaughterVpdProductId = _BladeDaughterVpdProductId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 31),
    _BladeDaughterVpdProductId_Type()
)
bladeDaughterVpdProductId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterVpdProductId.setStatus("mandatory")
_BladeDaughterVpdSubManufacturerId_Type = OctetString
_BladeDaughterVpdSubManufacturerId_Object = MibTableColumn
bladeDaughterVpdSubManufacturerId = _BladeDaughterVpdSubManufacturerId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 32),
    _BladeDaughterVpdSubManufacturerId_Type()
)
bladeDaughterVpdSubManufacturerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterVpdSubManufacturerId.setStatus("mandatory")
_BladeDaughterVpdClei_Type = OctetString
_BladeDaughterVpdClei_Object = MibTableColumn
bladeDaughterVpdClei = _BladeDaughterVpdClei_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 33),
    _BladeDaughterVpdClei_Type()
)
bladeDaughterVpdClei.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterVpdClei.setStatus("mandatory")
_BladeDaughterVpdHardwareRevisionString_Type = OctetString
_BladeDaughterVpdHardwareRevisionString_Object = MibTableColumn
bladeDaughterVpdHardwareRevisionString = _BladeDaughterVpdHardwareRevisionString_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 34),
    _BladeDaughterVpdHardwareRevisionString_Type()
)
bladeDaughterVpdHardwareRevisionString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterVpdHardwareRevisionString.setStatus("mandatory")
_BladeMACAddressVpdTable_Object = MibTable
bladeMACAddressVpdTable = _BladeMACAddressVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2)
)
if mibBuilder.loadTexts:
    bladeMACAddressVpdTable.setStatus("mandatory")
_BladeMACAddressVpdEntry_Object = MibTableRow
bladeMACAddressVpdEntry = _BladeMACAddressVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1)
)
bladeMACAddressVpdEntry.setIndexNames(
    (0, "BLADE-MIB", "bladeMACAddressVpdIndex"),
)
if mibBuilder.loadTexts:
    bladeMACAddressVpdEntry.setStatus("mandatory")
_BladeMACAddressVpdIndex_Type = Integer32
_BladeMACAddressVpdIndex_Object = MibTableColumn
bladeMACAddressVpdIndex = _BladeMACAddressVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 1),
    _BladeMACAddressVpdIndex_Type()
)
bladeMACAddressVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeMACAddressVpdIndex.setStatus("mandatory")
_BladeMACAddress1Vpd_Type = OctetString
_BladeMACAddress1Vpd_Object = MibTableColumn
bladeMACAddress1Vpd = _BladeMACAddress1Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 2),
    _BladeMACAddress1Vpd_Type()
)
bladeMACAddress1Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeMACAddress1Vpd.setStatus("mandatory")
_BladeMACAddress2Vpd_Type = OctetString
_BladeMACAddress2Vpd_Object = MibTableColumn
bladeMACAddress2Vpd = _BladeMACAddress2Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 3),
    _BladeMACAddress2Vpd_Type()
)
bladeMACAddress2Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeMACAddress2Vpd.setStatus("mandatory")
_BladeMACAddress3Vpd_Type = OctetString
_BladeMACAddress3Vpd_Object = MibTableColumn
bladeMACAddress3Vpd = _BladeMACAddress3Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 4),
    _BladeMACAddress3Vpd_Type()
)
bladeMACAddress3Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeMACAddress3Vpd.setStatus("mandatory")
_BladeMACAddress4Vpd_Type = OctetString
_BladeMACAddress4Vpd_Object = MibTableColumn
bladeMACAddress4Vpd = _BladeMACAddress4Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 5),
    _BladeMACAddress4Vpd_Type()
)
bladeMACAddress4Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeMACAddress4Vpd.setStatus("mandatory")
_BladeMACAddress5Vpd_Type = OctetString
_BladeMACAddress5Vpd_Object = MibTableColumn
bladeMACAddress5Vpd = _BladeMACAddress5Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 6),
    _BladeMACAddress5Vpd_Type()
)
bladeMACAddress5Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeMACAddress5Vpd.setStatus("mandatory")
_BladeMACAddress6Vpd_Type = OctetString
_BladeMACAddress6Vpd_Object = MibTableColumn
bladeMACAddress6Vpd = _BladeMACAddress6Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 7),
    _BladeMACAddress6Vpd_Type()
)
bladeMACAddress6Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeMACAddress6Vpd.setStatus("mandatory")
_BladeMACAddress7Vpd_Type = OctetString
_BladeMACAddress7Vpd_Object = MibTableColumn
bladeMACAddress7Vpd = _BladeMACAddress7Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 8),
    _BladeMACAddress7Vpd_Type()
)
bladeMACAddress7Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeMACAddress7Vpd.setStatus("mandatory")
_BladeMACAddress8Vpd_Type = OctetString
_BladeMACAddress8Vpd_Object = MibTableColumn
bladeMACAddress8Vpd = _BladeMACAddress8Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 9),
    _BladeMACAddress8Vpd_Type()
)
bladeMACAddress8Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeMACAddress8Vpd.setStatus("mandatory")
_BladeDaughterCard1MACAddress1Vpd_Type = OctetString
_BladeDaughterCard1MACAddress1Vpd_Object = MibTableColumn
bladeDaughterCard1MACAddress1Vpd = _BladeDaughterCard1MACAddress1Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 10),
    _BladeDaughterCard1MACAddress1Vpd_Type()
)
bladeDaughterCard1MACAddress1Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard1MACAddress1Vpd.setStatus("mandatory")
_BladeDaughterCard1MACAddress2Vpd_Type = OctetString
_BladeDaughterCard1MACAddress2Vpd_Object = MibTableColumn
bladeDaughterCard1MACAddress2Vpd = _BladeDaughterCard1MACAddress2Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 11),
    _BladeDaughterCard1MACAddress2Vpd_Type()
)
bladeDaughterCard1MACAddress2Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard1MACAddress2Vpd.setStatus("mandatory")
_BladeDaughterCard1MACAddress3Vpd_Type = OctetString
_BladeDaughterCard1MACAddress3Vpd_Object = MibTableColumn
bladeDaughterCard1MACAddress3Vpd = _BladeDaughterCard1MACAddress3Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 12),
    _BladeDaughterCard1MACAddress3Vpd_Type()
)
bladeDaughterCard1MACAddress3Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard1MACAddress3Vpd.setStatus("mandatory")
_BladeDaughterCard1MACAddress4Vpd_Type = OctetString
_BladeDaughterCard1MACAddress4Vpd_Object = MibTableColumn
bladeDaughterCard1MACAddress4Vpd = _BladeDaughterCard1MACAddress4Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 13),
    _BladeDaughterCard1MACAddress4Vpd_Type()
)
bladeDaughterCard1MACAddress4Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard1MACAddress4Vpd.setStatus("mandatory")
_BladeDaughterCard1MACAddress5Vpd_Type = OctetString
_BladeDaughterCard1MACAddress5Vpd_Object = MibTableColumn
bladeDaughterCard1MACAddress5Vpd = _BladeDaughterCard1MACAddress5Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 14),
    _BladeDaughterCard1MACAddress5Vpd_Type()
)
bladeDaughterCard1MACAddress5Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard1MACAddress5Vpd.setStatus("mandatory")
_BladeDaughterCard1MACAddress6Vpd_Type = OctetString
_BladeDaughterCard1MACAddress6Vpd_Object = MibTableColumn
bladeDaughterCard1MACAddress6Vpd = _BladeDaughterCard1MACAddress6Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 15),
    _BladeDaughterCard1MACAddress6Vpd_Type()
)
bladeDaughterCard1MACAddress6Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard1MACAddress6Vpd.setStatus("mandatory")
_BladeDaughterCard1MACAddress7Vpd_Type = OctetString
_BladeDaughterCard1MACAddress7Vpd_Object = MibTableColumn
bladeDaughterCard1MACAddress7Vpd = _BladeDaughterCard1MACAddress7Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 16),
    _BladeDaughterCard1MACAddress7Vpd_Type()
)
bladeDaughterCard1MACAddress7Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard1MACAddress7Vpd.setStatus("mandatory")
_BladeDaughterCard1MACAddress8Vpd_Type = OctetString
_BladeDaughterCard1MACAddress8Vpd_Object = MibTableColumn
bladeDaughterCard1MACAddress8Vpd = _BladeDaughterCard1MACAddress8Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 17),
    _BladeDaughterCard1MACAddress8Vpd_Type()
)
bladeDaughterCard1MACAddress8Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard1MACAddress8Vpd.setStatus("mandatory")
_BladeDaughterCard2MACAddress1Vpd_Type = OctetString
_BladeDaughterCard2MACAddress1Vpd_Object = MibTableColumn
bladeDaughterCard2MACAddress1Vpd = _BladeDaughterCard2MACAddress1Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 18),
    _BladeDaughterCard2MACAddress1Vpd_Type()
)
bladeDaughterCard2MACAddress1Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard2MACAddress1Vpd.setStatus("mandatory")
_BladeDaughterCard2MACAddress2Vpd_Type = OctetString
_BladeDaughterCard2MACAddress2Vpd_Object = MibTableColumn
bladeDaughterCard2MACAddress2Vpd = _BladeDaughterCard2MACAddress2Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 19),
    _BladeDaughterCard2MACAddress2Vpd_Type()
)
bladeDaughterCard2MACAddress2Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard2MACAddress2Vpd.setStatus("mandatory")
_BladeDaughterCard2MACAddress3Vpd_Type = OctetString
_BladeDaughterCard2MACAddress3Vpd_Object = MibTableColumn
bladeDaughterCard2MACAddress3Vpd = _BladeDaughterCard2MACAddress3Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 20),
    _BladeDaughterCard2MACAddress3Vpd_Type()
)
bladeDaughterCard2MACAddress3Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard2MACAddress3Vpd.setStatus("mandatory")
_BladeDaughterCard2MACAddress4Vpd_Type = OctetString
_BladeDaughterCard2MACAddress4Vpd_Object = MibTableColumn
bladeDaughterCard2MACAddress4Vpd = _BladeDaughterCard2MACAddress4Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 21),
    _BladeDaughterCard2MACAddress4Vpd_Type()
)
bladeDaughterCard2MACAddress4Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard2MACAddress4Vpd.setStatus("mandatory")
_BladeDaughterCard2MACAddress5Vpd_Type = OctetString
_BladeDaughterCard2MACAddress5Vpd_Object = MibTableColumn
bladeDaughterCard2MACAddress5Vpd = _BladeDaughterCard2MACAddress5Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 22),
    _BladeDaughterCard2MACAddress5Vpd_Type()
)
bladeDaughterCard2MACAddress5Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard2MACAddress5Vpd.setStatus("mandatory")
_BladeDaughterCard2MACAddress6Vpd_Type = OctetString
_BladeDaughterCard2MACAddress6Vpd_Object = MibTableColumn
bladeDaughterCard2MACAddress6Vpd = _BladeDaughterCard2MACAddress6Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 23),
    _BladeDaughterCard2MACAddress6Vpd_Type()
)
bladeDaughterCard2MACAddress6Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard2MACAddress6Vpd.setStatus("mandatory")
_BladeDaughterCard2MACAddress7Vpd_Type = OctetString
_BladeDaughterCard2MACAddress7Vpd_Object = MibTableColumn
bladeDaughterCard2MACAddress7Vpd = _BladeDaughterCard2MACAddress7Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 24),
    _BladeDaughterCard2MACAddress7Vpd_Type()
)
bladeDaughterCard2MACAddress7Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard2MACAddress7Vpd.setStatus("mandatory")
_BladeDaughterCard2MACAddress8Vpd_Type = OctetString
_BladeDaughterCard2MACAddress8Vpd_Object = MibTableColumn
bladeDaughterCard2MACAddress8Vpd = _BladeDaughterCard2MACAddress8Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 25),
    _BladeDaughterCard2MACAddress8Vpd_Type()
)
bladeDaughterCard2MACAddress8Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard2MACAddress8Vpd.setStatus("mandatory")
_BladeDaughterCard3MACAddress1Vpd_Type = OctetString
_BladeDaughterCard3MACAddress1Vpd_Object = MibTableColumn
bladeDaughterCard3MACAddress1Vpd = _BladeDaughterCard3MACAddress1Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 26),
    _BladeDaughterCard3MACAddress1Vpd_Type()
)
bladeDaughterCard3MACAddress1Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard3MACAddress1Vpd.setStatus("mandatory")
_BladeDaughterCard3MACAddress2Vpd_Type = OctetString
_BladeDaughterCard3MACAddress2Vpd_Object = MibTableColumn
bladeDaughterCard3MACAddress2Vpd = _BladeDaughterCard3MACAddress2Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 27),
    _BladeDaughterCard3MACAddress2Vpd_Type()
)
bladeDaughterCard3MACAddress2Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard3MACAddress2Vpd.setStatus("mandatory")
_BladeDaughterCard3MACAddress3Vpd_Type = OctetString
_BladeDaughterCard3MACAddress3Vpd_Object = MibTableColumn
bladeDaughterCard3MACAddress3Vpd = _BladeDaughterCard3MACAddress3Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 28),
    _BladeDaughterCard3MACAddress3Vpd_Type()
)
bladeDaughterCard3MACAddress3Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard3MACAddress3Vpd.setStatus("mandatory")
_BladeDaughterCard3MACAddress4Vpd_Type = OctetString
_BladeDaughterCard3MACAddress4Vpd_Object = MibTableColumn
bladeDaughterCard3MACAddress4Vpd = _BladeDaughterCard3MACAddress4Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 29),
    _BladeDaughterCard3MACAddress4Vpd_Type()
)
bladeDaughterCard3MACAddress4Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard3MACAddress4Vpd.setStatus("mandatory")
_BladeDaughterCard3MACAddress5Vpd_Type = OctetString
_BladeDaughterCard3MACAddress5Vpd_Object = MibTableColumn
bladeDaughterCard3MACAddress5Vpd = _BladeDaughterCard3MACAddress5Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 30),
    _BladeDaughterCard3MACAddress5Vpd_Type()
)
bladeDaughterCard3MACAddress5Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard3MACAddress5Vpd.setStatus("mandatory")
_BladeDaughterCard3MACAddress6Vpd_Type = OctetString
_BladeDaughterCard3MACAddress6Vpd_Object = MibTableColumn
bladeDaughterCard3MACAddress6Vpd = _BladeDaughterCard3MACAddress6Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 31),
    _BladeDaughterCard3MACAddress6Vpd_Type()
)
bladeDaughterCard3MACAddress6Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard3MACAddress6Vpd.setStatus("mandatory")
_BladeDaughterCard3MACAddress7Vpd_Type = OctetString
_BladeDaughterCard3MACAddress7Vpd_Object = MibTableColumn
bladeDaughterCard3MACAddress7Vpd = _BladeDaughterCard3MACAddress7Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 32),
    _BladeDaughterCard3MACAddress7Vpd_Type()
)
bladeDaughterCard3MACAddress7Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard3MACAddress7Vpd.setStatus("mandatory")
_BladeDaughterCard3MACAddress8Vpd_Type = OctetString
_BladeDaughterCard3MACAddress8Vpd_Object = MibTableColumn
bladeDaughterCard3MACAddress8Vpd = _BladeDaughterCard3MACAddress8Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 33),
    _BladeDaughterCard3MACAddress8Vpd_Type()
)
bladeDaughterCard3MACAddress8Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard3MACAddress8Vpd.setStatus("mandatory")
_BladeDaughterCard4MACAddress1Vpd_Type = OctetString
_BladeDaughterCard4MACAddress1Vpd_Object = MibTableColumn
bladeDaughterCard4MACAddress1Vpd = _BladeDaughterCard4MACAddress1Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 34),
    _BladeDaughterCard4MACAddress1Vpd_Type()
)
bladeDaughterCard4MACAddress1Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard4MACAddress1Vpd.setStatus("mandatory")
_BladeDaughterCard4MACAddress2Vpd_Type = OctetString
_BladeDaughterCard4MACAddress2Vpd_Object = MibTableColumn
bladeDaughterCard4MACAddress2Vpd = _BladeDaughterCard4MACAddress2Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 35),
    _BladeDaughterCard4MACAddress2Vpd_Type()
)
bladeDaughterCard4MACAddress2Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard4MACAddress2Vpd.setStatus("mandatory")
_BladeDaughterCard4MACAddress3Vpd_Type = OctetString
_BladeDaughterCard4MACAddress3Vpd_Object = MibTableColumn
bladeDaughterCard4MACAddress3Vpd = _BladeDaughterCard4MACAddress3Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 36),
    _BladeDaughterCard4MACAddress3Vpd_Type()
)
bladeDaughterCard4MACAddress3Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard4MACAddress3Vpd.setStatus("mandatory")
_BladeDaughterCard4MACAddress4Vpd_Type = OctetString
_BladeDaughterCard4MACAddress4Vpd_Object = MibTableColumn
bladeDaughterCard4MACAddress4Vpd = _BladeDaughterCard4MACAddress4Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 37),
    _BladeDaughterCard4MACAddress4Vpd_Type()
)
bladeDaughterCard4MACAddress4Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard4MACAddress4Vpd.setStatus("mandatory")
_BladeDaughterCard4MACAddress5Vpd_Type = OctetString
_BladeDaughterCard4MACAddress5Vpd_Object = MibTableColumn
bladeDaughterCard4MACAddress5Vpd = _BladeDaughterCard4MACAddress5Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 38),
    _BladeDaughterCard4MACAddress5Vpd_Type()
)
bladeDaughterCard4MACAddress5Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard4MACAddress5Vpd.setStatus("mandatory")
_BladeDaughterCard4MACAddress6Vpd_Type = OctetString
_BladeDaughterCard4MACAddress6Vpd_Object = MibTableColumn
bladeDaughterCard4MACAddress6Vpd = _BladeDaughterCard4MACAddress6Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 39),
    _BladeDaughterCard4MACAddress6Vpd_Type()
)
bladeDaughterCard4MACAddress6Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard4MACAddress6Vpd.setStatus("mandatory")
_BladeDaughterCard4MACAddress7Vpd_Type = OctetString
_BladeDaughterCard4MACAddress7Vpd_Object = MibTableColumn
bladeDaughterCard4MACAddress7Vpd = _BladeDaughterCard4MACAddress7Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 40),
    _BladeDaughterCard4MACAddress7Vpd_Type()
)
bladeDaughterCard4MACAddress7Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard4MACAddress7Vpd.setStatus("mandatory")
_BladeDaughterCard4MACAddress8Vpd_Type = OctetString
_BladeDaughterCard4MACAddress8Vpd_Object = MibTableColumn
bladeDaughterCard4MACAddress8Vpd = _BladeDaughterCard4MACAddress8Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 41),
    _BladeDaughterCard4MACAddress8Vpd_Type()
)
bladeDaughterCard4MACAddress8Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard4MACAddress8Vpd.setStatus("mandatory")
_BladeDaughterCard5MACAddress1Vpd_Type = OctetString
_BladeDaughterCard5MACAddress1Vpd_Object = MibTableColumn
bladeDaughterCard5MACAddress1Vpd = _BladeDaughterCard5MACAddress1Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 42),
    _BladeDaughterCard5MACAddress1Vpd_Type()
)
bladeDaughterCard5MACAddress1Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard5MACAddress1Vpd.setStatus("mandatory")
_BladeDaughterCard5MACAddress2Vpd_Type = OctetString
_BladeDaughterCard5MACAddress2Vpd_Object = MibTableColumn
bladeDaughterCard5MACAddress2Vpd = _BladeDaughterCard5MACAddress2Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 43),
    _BladeDaughterCard5MACAddress2Vpd_Type()
)
bladeDaughterCard5MACAddress2Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard5MACAddress2Vpd.setStatus("mandatory")
_BladeDaughterCard5MACAddress3Vpd_Type = OctetString
_BladeDaughterCard5MACAddress3Vpd_Object = MibTableColumn
bladeDaughterCard5MACAddress3Vpd = _BladeDaughterCard5MACAddress3Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 44),
    _BladeDaughterCard5MACAddress3Vpd_Type()
)
bladeDaughterCard5MACAddress3Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard5MACAddress3Vpd.setStatus("mandatory")
_BladeDaughterCard5MACAddress4Vpd_Type = OctetString
_BladeDaughterCard5MACAddress4Vpd_Object = MibTableColumn
bladeDaughterCard5MACAddress4Vpd = _BladeDaughterCard5MACAddress4Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 45),
    _BladeDaughterCard5MACAddress4Vpd_Type()
)
bladeDaughterCard5MACAddress4Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard5MACAddress4Vpd.setStatus("mandatory")
_BladeDaughterCard5MACAddress5Vpd_Type = OctetString
_BladeDaughterCard5MACAddress5Vpd_Object = MibTableColumn
bladeDaughterCard5MACAddress5Vpd = _BladeDaughterCard5MACAddress5Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 46),
    _BladeDaughterCard5MACAddress5Vpd_Type()
)
bladeDaughterCard5MACAddress5Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard5MACAddress5Vpd.setStatus("mandatory")
_BladeDaughterCard5MACAddress6Vpd_Type = OctetString
_BladeDaughterCard5MACAddress6Vpd_Object = MibTableColumn
bladeDaughterCard5MACAddress6Vpd = _BladeDaughterCard5MACAddress6Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 47),
    _BladeDaughterCard5MACAddress6Vpd_Type()
)
bladeDaughterCard5MACAddress6Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard5MACAddress6Vpd.setStatus("mandatory")
_BladeDaughterCard5MACAddress7Vpd_Type = OctetString
_BladeDaughterCard5MACAddress7Vpd_Object = MibTableColumn
bladeDaughterCard5MACAddress7Vpd = _BladeDaughterCard5MACAddress7Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 48),
    _BladeDaughterCard5MACAddress7Vpd_Type()
)
bladeDaughterCard5MACAddress7Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard5MACAddress7Vpd.setStatus("mandatory")
_BladeDaughterCard5MACAddress8Vpd_Type = OctetString
_BladeDaughterCard5MACAddress8Vpd_Object = MibTableColumn
bladeDaughterCard5MACAddress8Vpd = _BladeDaughterCard5MACAddress8Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 49),
    _BladeDaughterCard5MACAddress8Vpd_Type()
)
bladeDaughterCard5MACAddress8Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard5MACAddress8Vpd.setStatus("mandatory")
_BladeHSDaughterCard1MACAddress1Vpd_Type = OctetString
_BladeHSDaughterCard1MACAddress1Vpd_Object = MibTableColumn
bladeHSDaughterCard1MACAddress1Vpd = _BladeHSDaughterCard1MACAddress1Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 100),
    _BladeHSDaughterCard1MACAddress1Vpd_Type()
)
bladeHSDaughterCard1MACAddress1Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHSDaughterCard1MACAddress1Vpd.setStatus("mandatory")
_BladeHSDaughterCard1MACAddress2Vpd_Type = OctetString
_BladeHSDaughterCard1MACAddress2Vpd_Object = MibTableColumn
bladeHSDaughterCard1MACAddress2Vpd = _BladeHSDaughterCard1MACAddress2Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 101),
    _BladeHSDaughterCard1MACAddress2Vpd_Type()
)
bladeHSDaughterCard1MACAddress2Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHSDaughterCard1MACAddress2Vpd.setStatus("mandatory")
_BladeHSDaughterCard1MACAddress3Vpd_Type = OctetString
_BladeHSDaughterCard1MACAddress3Vpd_Object = MibTableColumn
bladeHSDaughterCard1MACAddress3Vpd = _BladeHSDaughterCard1MACAddress3Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 102),
    _BladeHSDaughterCard1MACAddress3Vpd_Type()
)
bladeHSDaughterCard1MACAddress3Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHSDaughterCard1MACAddress3Vpd.setStatus("mandatory")
_BladeHSDaughterCard1MACAddress4Vpd_Type = OctetString
_BladeHSDaughterCard1MACAddress4Vpd_Object = MibTableColumn
bladeHSDaughterCard1MACAddress4Vpd = _BladeHSDaughterCard1MACAddress4Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 103),
    _BladeHSDaughterCard1MACAddress4Vpd_Type()
)
bladeHSDaughterCard1MACAddress4Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHSDaughterCard1MACAddress4Vpd.setStatus("mandatory")
_BladeHSDaughterCard1MACAddress5Vpd_Type = OctetString
_BladeHSDaughterCard1MACAddress5Vpd_Object = MibTableColumn
bladeHSDaughterCard1MACAddress5Vpd = _BladeHSDaughterCard1MACAddress5Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 104),
    _BladeHSDaughterCard1MACAddress5Vpd_Type()
)
bladeHSDaughterCard1MACAddress5Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHSDaughterCard1MACAddress5Vpd.setStatus("mandatory")
_BladeHSDaughterCard1MACAddress6Vpd_Type = OctetString
_BladeHSDaughterCard1MACAddress6Vpd_Object = MibTableColumn
bladeHSDaughterCard1MACAddress6Vpd = _BladeHSDaughterCard1MACAddress6Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 105),
    _BladeHSDaughterCard1MACAddress6Vpd_Type()
)
bladeHSDaughterCard1MACAddress6Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHSDaughterCard1MACAddress6Vpd.setStatus("mandatory")
_BladeHSDaughterCard1MACAddress7Vpd_Type = OctetString
_BladeHSDaughterCard1MACAddress7Vpd_Object = MibTableColumn
bladeHSDaughterCard1MACAddress7Vpd = _BladeHSDaughterCard1MACAddress7Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 106),
    _BladeHSDaughterCard1MACAddress7Vpd_Type()
)
bladeHSDaughterCard1MACAddress7Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHSDaughterCard1MACAddress7Vpd.setStatus("mandatory")
_BladeHSDaughterCard1MACAddress8Vpd_Type = OctetString
_BladeHSDaughterCard1MACAddress8Vpd_Object = MibTableColumn
bladeHSDaughterCard1MACAddress8Vpd = _BladeHSDaughterCard1MACAddress8Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 107),
    _BladeHSDaughterCard1MACAddress8Vpd_Type()
)
bladeHSDaughterCard1MACAddress8Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHSDaughterCard1MACAddress8Vpd.setStatus("mandatory")
_BladeHSDaughterCard1MACAddress9Vpd_Type = OctetString
_BladeHSDaughterCard1MACAddress9Vpd_Object = MibTableColumn
bladeHSDaughterCard1MACAddress9Vpd = _BladeHSDaughterCard1MACAddress9Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 108),
    _BladeHSDaughterCard1MACAddress9Vpd_Type()
)
bladeHSDaughterCard1MACAddress9Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHSDaughterCard1MACAddress9Vpd.setStatus("mandatory")
_BladeHSDaughterCard1MACAddress10Vpd_Type = OctetString
_BladeHSDaughterCard1MACAddress10Vpd_Object = MibTableColumn
bladeHSDaughterCard1MACAddress10Vpd = _BladeHSDaughterCard1MACAddress10Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 109),
    _BladeHSDaughterCard1MACAddress10Vpd_Type()
)
bladeHSDaughterCard1MACAddress10Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHSDaughterCard1MACAddress10Vpd.setStatus("mandatory")
_BladeHSDaughterCard1MACAddress11Vpd_Type = OctetString
_BladeHSDaughterCard1MACAddress11Vpd_Object = MibTableColumn
bladeHSDaughterCard1MACAddress11Vpd = _BladeHSDaughterCard1MACAddress11Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 110),
    _BladeHSDaughterCard1MACAddress11Vpd_Type()
)
bladeHSDaughterCard1MACAddress11Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHSDaughterCard1MACAddress11Vpd.setStatus("mandatory")
_BladeHSDaughterCard1MACAddress12Vpd_Type = OctetString
_BladeHSDaughterCard1MACAddress12Vpd_Object = MibTableColumn
bladeHSDaughterCard1MACAddress12Vpd = _BladeHSDaughterCard1MACAddress12Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 111),
    _BladeHSDaughterCard1MACAddress12Vpd_Type()
)
bladeHSDaughterCard1MACAddress12Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHSDaughterCard1MACAddress12Vpd.setStatus("mandatory")
_BladeHSDaughterCard1MACAddress13Vpd_Type = OctetString
_BladeHSDaughterCard1MACAddress13Vpd_Object = MibTableColumn
bladeHSDaughterCard1MACAddress13Vpd = _BladeHSDaughterCard1MACAddress13Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 112),
    _BladeHSDaughterCard1MACAddress13Vpd_Type()
)
bladeHSDaughterCard1MACAddress13Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHSDaughterCard1MACAddress13Vpd.setStatus("mandatory")
_BladeHSDaughterCard1MACAddress14Vpd_Type = OctetString
_BladeHSDaughterCard1MACAddress14Vpd_Object = MibTableColumn
bladeHSDaughterCard1MACAddress14Vpd = _BladeHSDaughterCard1MACAddress14Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 113),
    _BladeHSDaughterCard1MACAddress14Vpd_Type()
)
bladeHSDaughterCard1MACAddress14Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHSDaughterCard1MACAddress14Vpd.setStatus("mandatory")
_BladeHSDaughterCard1MACAddress15Vpd_Type = OctetString
_BladeHSDaughterCard1MACAddress15Vpd_Object = MibTableColumn
bladeHSDaughterCard1MACAddress15Vpd = _BladeHSDaughterCard1MACAddress15Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 114),
    _BladeHSDaughterCard1MACAddress15Vpd_Type()
)
bladeHSDaughterCard1MACAddress15Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHSDaughterCard1MACAddress15Vpd.setStatus("mandatory")
_BladeHSDaughterCard1MACAddress16Vpd_Type = OctetString
_BladeHSDaughterCard1MACAddress16Vpd_Object = MibTableColumn
bladeHSDaughterCard1MACAddress16Vpd = _BladeHSDaughterCard1MACAddress16Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 115),
    _BladeHSDaughterCard1MACAddress16Vpd_Type()
)
bladeHSDaughterCard1MACAddress16Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHSDaughterCard1MACAddress16Vpd.setStatus("mandatory")
_BladeSideCardMACAddress1Vpd_Type = OctetString
_BladeSideCardMACAddress1Vpd_Object = MibTableColumn
bladeSideCardMACAddress1Vpd = _BladeSideCardMACAddress1Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 164),
    _BladeSideCardMACAddress1Vpd_Type()
)
bladeSideCardMACAddress1Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSideCardMACAddress1Vpd.setStatus("mandatory")
_BladeSideCardMACAddress2Vpd_Type = OctetString
_BladeSideCardMACAddress2Vpd_Object = MibTableColumn
bladeSideCardMACAddress2Vpd = _BladeSideCardMACAddress2Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 165),
    _BladeSideCardMACAddress2Vpd_Type()
)
bladeSideCardMACAddress2Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSideCardMACAddress2Vpd.setStatus("mandatory")
_BladeSideCardMACAddress3Vpd_Type = OctetString
_BladeSideCardMACAddress3Vpd_Object = MibTableColumn
bladeSideCardMACAddress3Vpd = _BladeSideCardMACAddress3Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 166),
    _BladeSideCardMACAddress3Vpd_Type()
)
bladeSideCardMACAddress3Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSideCardMACAddress3Vpd.setStatus("mandatory")
_BladeSideCardMACAddress4Vpd_Type = OctetString
_BladeSideCardMACAddress4Vpd_Object = MibTableColumn
bladeSideCardMACAddress4Vpd = _BladeSideCardMACAddress4Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 167),
    _BladeSideCardMACAddress4Vpd_Type()
)
bladeSideCardMACAddress4Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSideCardMACAddress4Vpd.setStatus("mandatory")
_BladeSideCardMACAddress5Vpd_Type = OctetString
_BladeSideCardMACAddress5Vpd_Object = MibTableColumn
bladeSideCardMACAddress5Vpd = _BladeSideCardMACAddress5Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 168),
    _BladeSideCardMACAddress5Vpd_Type()
)
bladeSideCardMACAddress5Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSideCardMACAddress5Vpd.setStatus("mandatory")
_BladeSideCardMACAddress6Vpd_Type = OctetString
_BladeSideCardMACAddress6Vpd_Object = MibTableColumn
bladeSideCardMACAddress6Vpd = _BladeSideCardMACAddress6Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 169),
    _BladeSideCardMACAddress6Vpd_Type()
)
bladeSideCardMACAddress6Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSideCardMACAddress6Vpd.setStatus("mandatory")
_BladeSideCardMACAddress7Vpd_Type = OctetString
_BladeSideCardMACAddress7Vpd_Object = MibTableColumn
bladeSideCardMACAddress7Vpd = _BladeSideCardMACAddress7Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 170),
    _BladeSideCardMACAddress7Vpd_Type()
)
bladeSideCardMACAddress7Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSideCardMACAddress7Vpd.setStatus("mandatory")
_BladeSideCardMACAddress8Vpd_Type = OctetString
_BladeSideCardMACAddress8Vpd_Object = MibTableColumn
bladeSideCardMACAddress8Vpd = _BladeSideCardMACAddress8Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 171),
    _BladeSideCardMACAddress8Vpd_Type()
)
bladeSideCardMACAddress8Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSideCardMACAddress8Vpd.setStatus("mandatory")
_BladeExpBoardVpdTable_Object = MibTable
bladeExpBoardVpdTable = _BladeExpBoardVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3)
)
if mibBuilder.loadTexts:
    bladeExpBoardVpdTable.setStatus("mandatory")
_BladeExpBoardVpdEntry_Object = MibTableRow
bladeExpBoardVpdEntry = _BladeExpBoardVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1)
)
bladeExpBoardVpdEntry.setIndexNames(
    (0, "BLADE-MIB", "bladeExpBoardVpdIndex"),
)
if mibBuilder.loadTexts:
    bladeExpBoardVpdEntry.setStatus("mandatory")
_BladeExpBoardVpdIndex_Type = Integer32
_BladeExpBoardVpdIndex_Object = MibTableColumn
bladeExpBoardVpdIndex = _BladeExpBoardVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 1),
    _BladeExpBoardVpdIndex_Type()
)
bladeExpBoardVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpBoardVpdIndex.setStatus("mandatory")
_BladeExpBoardVpdBayNumber_Type = OctetString
_BladeExpBoardVpdBayNumber_Object = MibTableColumn
bladeExpBoardVpdBayNumber = _BladeExpBoardVpdBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 2),
    _BladeExpBoardVpdBayNumber_Type()
)
bladeExpBoardVpdBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpBoardVpdBayNumber.setStatus("mandatory")
_BladeExpBoardVpdManufacturingId_Type = OctetString
_BladeExpBoardVpdManufacturingId_Object = MibTableColumn
bladeExpBoardVpdManufacturingId = _BladeExpBoardVpdManufacturingId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 3),
    _BladeExpBoardVpdManufacturingId_Type()
)
bladeExpBoardVpdManufacturingId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpBoardVpdManufacturingId.setStatus("mandatory")
_BladeExpBoardVpdFruNumber_Type = OctetString
_BladeExpBoardVpdFruNumber_Object = MibTableColumn
bladeExpBoardVpdFruNumber = _BladeExpBoardVpdFruNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 4),
    _BladeExpBoardVpdFruNumber_Type()
)
bladeExpBoardVpdFruNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpBoardVpdFruNumber.setStatus("mandatory")
_BladeExpBoardVpdHardwareRevision_Type = Integer32
_BladeExpBoardVpdHardwareRevision_Object = MibTableColumn
bladeExpBoardVpdHardwareRevision = _BladeExpBoardVpdHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 5),
    _BladeExpBoardVpdHardwareRevision_Type()
)
bladeExpBoardVpdHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpBoardVpdHardwareRevision.setStatus("mandatory")
_BladeExpBoardVpdSerialNumber_Type = OctetString
_BladeExpBoardVpdSerialNumber_Object = MibTableColumn
bladeExpBoardVpdSerialNumber = _BladeExpBoardVpdSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 6),
    _BladeExpBoardVpdSerialNumber_Type()
)
bladeExpBoardVpdSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpBoardVpdSerialNumber.setStatus("mandatory")
_BladeExpBoardVpdMachineType_Type = OctetString
_BladeExpBoardVpdMachineType_Object = MibTableColumn
bladeExpBoardVpdMachineType = _BladeExpBoardVpdMachineType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 7),
    _BladeExpBoardVpdMachineType_Type()
)
bladeExpBoardVpdMachineType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpBoardVpdMachineType.setStatus("mandatory")
_BladeExpBoardVpdUuid_Type = OctetString
_BladeExpBoardVpdUuid_Object = MibTableColumn
bladeExpBoardVpdUuid = _BladeExpBoardVpdUuid_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 8),
    _BladeExpBoardVpdUuid_Type()
)
bladeExpBoardVpdUuid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpBoardVpdUuid.setStatus("mandatory")
_BladeExpBoardVpdManufDate_Type = OctetString
_BladeExpBoardVpdManufDate_Object = MibTableColumn
bladeExpBoardVpdManufDate = _BladeExpBoardVpdManufDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 9),
    _BladeExpBoardVpdManufDate_Type()
)
bladeExpBoardVpdManufDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpBoardVpdManufDate.setStatus("mandatory")
_BladeExpBoardVpdPartNumber_Type = OctetString
_BladeExpBoardVpdPartNumber_Object = MibTableColumn
bladeExpBoardVpdPartNumber = _BladeExpBoardVpdPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 10),
    _BladeExpBoardVpdPartNumber_Type()
)
bladeExpBoardVpdPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpBoardVpdPartNumber.setStatus("mandatory")
_BladeExpBoardVpdFruSerial_Type = OctetString
_BladeExpBoardVpdFruSerial_Object = MibTableColumn
bladeExpBoardVpdFruSerial = _BladeExpBoardVpdFruSerial_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 11),
    _BladeExpBoardVpdFruSerial_Type()
)
bladeExpBoardVpdFruSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpBoardVpdFruSerial.setStatus("mandatory")
_BladeExpBoardVpdMachineModel_Type = OctetString
_BladeExpBoardVpdMachineModel_Object = MibTableColumn
bladeExpBoardVpdMachineModel = _BladeExpBoardVpdMachineModel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 12),
    _BladeExpBoardVpdMachineModel_Type()
)
bladeExpBoardVpdMachineModel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpBoardVpdMachineModel.setStatus("mandatory")
_BladeExpBoardVpdManufacturingIDNumber_Type = OctetString
_BladeExpBoardVpdManufacturingIDNumber_Object = MibTableColumn
bladeExpBoardVpdManufacturingIDNumber = _BladeExpBoardVpdManufacturingIDNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 13),
    _BladeExpBoardVpdManufacturingIDNumber_Type()
)
bladeExpBoardVpdManufacturingIDNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpBoardVpdManufacturingIDNumber.setStatus("mandatory")
_BladeExpBoardVpdProductId_Type = OctetString
_BladeExpBoardVpdProductId_Object = MibTableColumn
bladeExpBoardVpdProductId = _BladeExpBoardVpdProductId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 14),
    _BladeExpBoardVpdProductId_Type()
)
bladeExpBoardVpdProductId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpBoardVpdProductId.setStatus("mandatory")
_BladeExpBoardVpdSubManufacturerId_Type = OctetString
_BladeExpBoardVpdSubManufacturerId_Object = MibTableColumn
bladeExpBoardVpdSubManufacturerId = _BladeExpBoardVpdSubManufacturerId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 15),
    _BladeExpBoardVpdSubManufacturerId_Type()
)
bladeExpBoardVpdSubManufacturerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpBoardVpdSubManufacturerId.setStatus("mandatory")
_BladeExpBoardVpdClei_Type = OctetString
_BladeExpBoardVpdClei_Object = MibTableColumn
bladeExpBoardVpdClei = _BladeExpBoardVpdClei_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 16),
    _BladeExpBoardVpdClei_Type()
)
bladeExpBoardVpdClei.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpBoardVpdClei.setStatus("mandatory")
_BladeExpBoardVpdBladeBayNumber_Type = OctetString
_BladeExpBoardVpdBladeBayNumber_Object = MibTableColumn
bladeExpBoardVpdBladeBayNumber = _BladeExpBoardVpdBladeBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 19),
    _BladeExpBoardVpdBladeBayNumber_Type()
)
bladeExpBoardVpdBladeBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpBoardVpdBladeBayNumber.setStatus("mandatory")


class _BladeExpBoardVpdCardType_Type(Integer32):
    """Custom type bladeExpBoardVpdCardType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("storageExpansion", 1),
          ("pciExpansion", 2))
    )


_BladeExpBoardVpdCardType_Type.__name__ = "Integer32"
_BladeExpBoardVpdCardType_Object = MibTableColumn
bladeExpBoardVpdCardType = _BladeExpBoardVpdCardType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 20),
    _BladeExpBoardVpdCardType_Type()
)
bladeExpBoardVpdCardType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpBoardVpdCardType.setStatus("mandatory")


class _BladeExpBoardVpdCardSubType_Type(Integer32):
    """Custom type bladeExpBoardVpdCardSubType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              11,
              12,
              13,
              21)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("bse1", 1),
          ("bse2", 2),
          ("bse3", 3),
          ("peu1", 11),
          ("peu2", 12),
          ("peu3", 13),
          ("bie", 21))
    )


_BladeExpBoardVpdCardSubType_Type.__name__ = "Integer32"
_BladeExpBoardVpdCardSubType_Object = MibTableColumn
bladeExpBoardVpdCardSubType = _BladeExpBoardVpdCardSubType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 21),
    _BladeExpBoardVpdCardSubType_Type()
)
bladeExpBoardVpdCardSubType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpBoardVpdCardSubType.setStatus("mandatory")
_BladeExpBoardVpdHardwareRevisionString_Type = OctetString
_BladeExpBoardVpdHardwareRevisionString_Object = MibTableColumn
bladeExpBoardVpdHardwareRevisionString = _BladeExpBoardVpdHardwareRevisionString_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 3, 1, 22),
    _BladeExpBoardVpdHardwareRevisionString_Type()
)
bladeExpBoardVpdHardwareRevisionString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpBoardVpdHardwareRevisionString.setStatus("mandatory")
_BladeSideCardVpdTable_Object = MibTable
bladeSideCardVpdTable = _BladeSideCardVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4)
)
if mibBuilder.loadTexts:
    bladeSideCardVpdTable.setStatus("mandatory")
_BladeSideCardVpdEntry_Object = MibTableRow
bladeSideCardVpdEntry = _BladeSideCardVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4, 1)
)
bladeSideCardVpdEntry.setIndexNames(
    (0, "BLADE-MIB", "bladeSideCardVpdIndex"),
)
if mibBuilder.loadTexts:
    bladeSideCardVpdEntry.setStatus("mandatory")
_BladeSideCardVpdIndex_Type = Integer32
_BladeSideCardVpdIndex_Object = MibTableColumn
bladeSideCardVpdIndex = _BladeSideCardVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4, 1, 1),
    _BladeSideCardVpdIndex_Type()
)
bladeSideCardVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSideCardVpdIndex.setStatus("mandatory")
_BladeSideCardVpdBayNumber_Type = OctetString
_BladeSideCardVpdBayNumber_Object = MibTableColumn
bladeSideCardVpdBayNumber = _BladeSideCardVpdBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4, 1, 2),
    _BladeSideCardVpdBayNumber_Type()
)
bladeSideCardVpdBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSideCardVpdBayNumber.setStatus("mandatory")
_BladeSideCardVpdManufacturingId_Type = OctetString
_BladeSideCardVpdManufacturingId_Object = MibTableColumn
bladeSideCardVpdManufacturingId = _BladeSideCardVpdManufacturingId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4, 1, 3),
    _BladeSideCardVpdManufacturingId_Type()
)
bladeSideCardVpdManufacturingId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSideCardVpdManufacturingId.setStatus("mandatory")
_BladeSideCardVpdFruNumber_Type = OctetString
_BladeSideCardVpdFruNumber_Object = MibTableColumn
bladeSideCardVpdFruNumber = _BladeSideCardVpdFruNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4, 1, 4),
    _BladeSideCardVpdFruNumber_Type()
)
bladeSideCardVpdFruNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSideCardVpdFruNumber.setStatus("mandatory")
_BladeSideCardVpdHardwareRevision_Type = Integer32
_BladeSideCardVpdHardwareRevision_Object = MibTableColumn
bladeSideCardVpdHardwareRevision = _BladeSideCardVpdHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4, 1, 5),
    _BladeSideCardVpdHardwareRevision_Type()
)
bladeSideCardVpdHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSideCardVpdHardwareRevision.setStatus("mandatory")
_BladeSideCardVpdSerialNumber_Type = OctetString
_BladeSideCardVpdSerialNumber_Object = MibTableColumn
bladeSideCardVpdSerialNumber = _BladeSideCardVpdSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4, 1, 6),
    _BladeSideCardVpdSerialNumber_Type()
)
bladeSideCardVpdSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSideCardVpdSerialNumber.setStatus("mandatory")
_BladeSideCardVpdMachineType_Type = OctetString
_BladeSideCardVpdMachineType_Object = MibTableColumn
bladeSideCardVpdMachineType = _BladeSideCardVpdMachineType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4, 1, 7),
    _BladeSideCardVpdMachineType_Type()
)
bladeSideCardVpdMachineType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSideCardVpdMachineType.setStatus("mandatory")
_BladeSideCardVpdUuid_Type = OctetString
_BladeSideCardVpdUuid_Object = MibTableColumn
bladeSideCardVpdUuid = _BladeSideCardVpdUuid_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4, 1, 8),
    _BladeSideCardVpdUuid_Type()
)
bladeSideCardVpdUuid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSideCardVpdUuid.setStatus("mandatory")
_BladeSideCardVpdManufDate_Type = OctetString
_BladeSideCardVpdManufDate_Object = MibTableColumn
bladeSideCardVpdManufDate = _BladeSideCardVpdManufDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4, 1, 9),
    _BladeSideCardVpdManufDate_Type()
)
bladeSideCardVpdManufDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSideCardVpdManufDate.setStatus("mandatory")
_BladeSideCardVpdPartNumber_Type = OctetString
_BladeSideCardVpdPartNumber_Object = MibTableColumn
bladeSideCardVpdPartNumber = _BladeSideCardVpdPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4, 1, 10),
    _BladeSideCardVpdPartNumber_Type()
)
bladeSideCardVpdPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSideCardVpdPartNumber.setStatus("mandatory")
_BladeSideCardVpdFruSerial_Type = OctetString
_BladeSideCardVpdFruSerial_Object = MibTableColumn
bladeSideCardVpdFruSerial = _BladeSideCardVpdFruSerial_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4, 1, 11),
    _BladeSideCardVpdFruSerial_Type()
)
bladeSideCardVpdFruSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSideCardVpdFruSerial.setStatus("mandatory")
_BladeSideCardVpdMachineModel_Type = OctetString
_BladeSideCardVpdMachineModel_Object = MibTableColumn
bladeSideCardVpdMachineModel = _BladeSideCardVpdMachineModel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4, 1, 12),
    _BladeSideCardVpdMachineModel_Type()
)
bladeSideCardVpdMachineModel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSideCardVpdMachineModel.setStatus("mandatory")
_BladeSideCardVpdManufacturingIDNumber_Type = OctetString
_BladeSideCardVpdManufacturingIDNumber_Object = MibTableColumn
bladeSideCardVpdManufacturingIDNumber = _BladeSideCardVpdManufacturingIDNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4, 1, 13),
    _BladeSideCardVpdManufacturingIDNumber_Type()
)
bladeSideCardVpdManufacturingIDNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSideCardVpdManufacturingIDNumber.setStatus("mandatory")
_BladeSideCardVpdProductId_Type = OctetString
_BladeSideCardVpdProductId_Object = MibTableColumn
bladeSideCardVpdProductId = _BladeSideCardVpdProductId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4, 1, 14),
    _BladeSideCardVpdProductId_Type()
)
bladeSideCardVpdProductId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSideCardVpdProductId.setStatus("mandatory")
_BladeSideCardVpdSubManufacturerId_Type = OctetString
_BladeSideCardVpdSubManufacturerId_Object = MibTableColumn
bladeSideCardVpdSubManufacturerId = _BladeSideCardVpdSubManufacturerId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4, 1, 15),
    _BladeSideCardVpdSubManufacturerId_Type()
)
bladeSideCardVpdSubManufacturerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSideCardVpdSubManufacturerId.setStatus("mandatory")
_BladeSideCardVpdClei_Type = OctetString
_BladeSideCardVpdClei_Object = MibTableColumn
bladeSideCardVpdClei = _BladeSideCardVpdClei_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4, 1, 16),
    _BladeSideCardVpdClei_Type()
)
bladeSideCardVpdClei.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSideCardVpdClei.setStatus("mandatory")
_BladeSideCardVpdBladeBayNumber_Type = OctetString
_BladeSideCardVpdBladeBayNumber_Object = MibTableColumn
bladeSideCardVpdBladeBayNumber = _BladeSideCardVpdBladeBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4, 1, 19),
    _BladeSideCardVpdBladeBayNumber_Type()
)
bladeSideCardVpdBladeBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSideCardVpdBladeBayNumber.setStatus("mandatory")
_BladeSideCardVpdHardwareRevisionString_Type = OctetString
_BladeSideCardVpdHardwareRevisionString_Object = MibTableColumn
bladeSideCardVpdHardwareRevisionString = _BladeSideCardVpdHardwareRevisionString_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 4, 1, 20),
    _BladeSideCardVpdHardwareRevisionString_Type()
)
bladeSideCardVpdHardwareRevisionString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSideCardVpdHardwareRevisionString.setStatus("mandatory")
_BladeExpCardVpdTable_Object = MibTable
bladeExpCardVpdTable = _BladeExpCardVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5)
)
if mibBuilder.loadTexts:
    bladeExpCardVpdTable.setStatus("mandatory")
_BladeExpCardVpdEntry_Object = MibTableRow
bladeExpCardVpdEntry = _BladeExpCardVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1)
)
bladeExpCardVpdEntry.setIndexNames(
    (0, "BLADE-MIB", "bladeExpCardVpdIndex"),
)
if mibBuilder.loadTexts:
    bladeExpCardVpdEntry.setStatus("mandatory")
_BladeExpCardVpdIndex_Type = Integer32
_BladeExpCardVpdIndex_Object = MibTableColumn
bladeExpCardVpdIndex = _BladeExpCardVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 1),
    _BladeExpCardVpdIndex_Type()
)
bladeExpCardVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdIndex.setStatus("mandatory")
_BladeExpCardVpdBayNumber_Type = OctetString
_BladeExpCardVpdBayNumber_Object = MibTableColumn
bladeExpCardVpdBayNumber = _BladeExpCardVpdBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 2),
    _BladeExpCardVpdBayNumber_Type()
)
bladeExpCardVpdBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdBayNumber.setStatus("mandatory")
_BladeExpCardVpdManufacturingId_Type = OctetString
_BladeExpCardVpdManufacturingId_Object = MibTableColumn
bladeExpCardVpdManufacturingId = _BladeExpCardVpdManufacturingId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 3),
    _BladeExpCardVpdManufacturingId_Type()
)
bladeExpCardVpdManufacturingId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdManufacturingId.setStatus("mandatory")
_BladeExpCardVpdFruNumber_Type = OctetString
_BladeExpCardVpdFruNumber_Object = MibTableColumn
bladeExpCardVpdFruNumber = _BladeExpCardVpdFruNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 4),
    _BladeExpCardVpdFruNumber_Type()
)
bladeExpCardVpdFruNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdFruNumber.setStatus("mandatory")
_BladeExpCardVpdHardwareRevision_Type = Integer32
_BladeExpCardVpdHardwareRevision_Object = MibTableColumn
bladeExpCardVpdHardwareRevision = _BladeExpCardVpdHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 5),
    _BladeExpCardVpdHardwareRevision_Type()
)
bladeExpCardVpdHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdHardwareRevision.setStatus("mandatory")
_BladeExpCardVpdSerialNumber_Type = OctetString
_BladeExpCardVpdSerialNumber_Object = MibTableColumn
bladeExpCardVpdSerialNumber = _BladeExpCardVpdSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 6),
    _BladeExpCardVpdSerialNumber_Type()
)
bladeExpCardVpdSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdSerialNumber.setStatus("mandatory")
_BladeExpCardVpdMachineType_Type = OctetString
_BladeExpCardVpdMachineType_Object = MibTableColumn
bladeExpCardVpdMachineType = _BladeExpCardVpdMachineType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 7),
    _BladeExpCardVpdMachineType_Type()
)
bladeExpCardVpdMachineType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdMachineType.setStatus("mandatory")
_BladeExpCardVpdUuid_Type = OctetString
_BladeExpCardVpdUuid_Object = MibTableColumn
bladeExpCardVpdUuid = _BladeExpCardVpdUuid_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 8),
    _BladeExpCardVpdUuid_Type()
)
bladeExpCardVpdUuid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdUuid.setStatus("mandatory")
_BladeExpCardVpdManufDate_Type = OctetString
_BladeExpCardVpdManufDate_Object = MibTableColumn
bladeExpCardVpdManufDate = _BladeExpCardVpdManufDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 9),
    _BladeExpCardVpdManufDate_Type()
)
bladeExpCardVpdManufDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdManufDate.setStatus("mandatory")
_BladeExpCardVpdPartNumber_Type = OctetString
_BladeExpCardVpdPartNumber_Object = MibTableColumn
bladeExpCardVpdPartNumber = _BladeExpCardVpdPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 10),
    _BladeExpCardVpdPartNumber_Type()
)
bladeExpCardVpdPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdPartNumber.setStatus("mandatory")
_BladeExpCardVpdFruSerial_Type = OctetString
_BladeExpCardVpdFruSerial_Object = MibTableColumn
bladeExpCardVpdFruSerial = _BladeExpCardVpdFruSerial_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 11),
    _BladeExpCardVpdFruSerial_Type()
)
bladeExpCardVpdFruSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdFruSerial.setStatus("mandatory")
_BladeExpCardVpdMachineModel_Type = OctetString
_BladeExpCardVpdMachineModel_Object = MibTableColumn
bladeExpCardVpdMachineModel = _BladeExpCardVpdMachineModel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 12),
    _BladeExpCardVpdMachineModel_Type()
)
bladeExpCardVpdMachineModel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdMachineModel.setStatus("mandatory")
_BladeExpCardVpdManufacturingIDNumber_Type = OctetString
_BladeExpCardVpdManufacturingIDNumber_Object = MibTableColumn
bladeExpCardVpdManufacturingIDNumber = _BladeExpCardVpdManufacturingIDNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 13),
    _BladeExpCardVpdManufacturingIDNumber_Type()
)
bladeExpCardVpdManufacturingIDNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdManufacturingIDNumber.setStatus("mandatory")
_BladeExpCardVpdProductId_Type = OctetString
_BladeExpCardVpdProductId_Object = MibTableColumn
bladeExpCardVpdProductId = _BladeExpCardVpdProductId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 14),
    _BladeExpCardVpdProductId_Type()
)
bladeExpCardVpdProductId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdProductId.setStatus("mandatory")
_BladeExpCardVpdSubManufacturerId_Type = OctetString
_BladeExpCardVpdSubManufacturerId_Object = MibTableColumn
bladeExpCardVpdSubManufacturerId = _BladeExpCardVpdSubManufacturerId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 15),
    _BladeExpCardVpdSubManufacturerId_Type()
)
bladeExpCardVpdSubManufacturerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdSubManufacturerId.setStatus("mandatory")
_BladeExpCardVpdClei_Type = OctetString
_BladeExpCardVpdClei_Object = MibTableColumn
bladeExpCardVpdClei = _BladeExpCardVpdClei_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 16),
    _BladeExpCardVpdClei_Type()
)
bladeExpCardVpdClei.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdClei.setStatus("mandatory")
_BladeExpCardVpdBladeBayNumber_Type = OctetString
_BladeExpCardVpdBladeBayNumber_Object = MibTableColumn
bladeExpCardVpdBladeBayNumber = _BladeExpCardVpdBladeBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 19),
    _BladeExpCardVpdBladeBayNumber_Type()
)
bladeExpCardVpdBladeBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdBladeBayNumber.setStatus("mandatory")


class _BladeExpCardVpdCardTypeInfo_Type(Integer32):
    """Custom type bladeExpCardVpdCardTypeInfo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("bladeEthernetExpCard", 1),
          ("bladeFiberChannelExpCard", 2),
          ("serialPortExpCard", 3),
          ("bladeOpticalPassThrough", 4),
          ("bladeInfinibandExpCard", 5),
          ("bladeIscsiExpCard", 6),
          ("bladeGenericExpCard", 7),
          ("bladeNetworkCFFeExpCard", 8),
          ("bladeSASConnectivityCard", 9),
          ("bladeSATAConnectivityCard", 10),
          ("bladeNetworkCFFzExpCard", 11),
          ("bladeNetworkCNAExpCard", 12),
          ("bladeSSDExpCard", 13),
          ("bladePCIExp", 14),
          ("bladeGraphicsExp", 15),
          ("bladeIOExp", 16),
          ("bladeMemoryExp", 17),
          ("bladeProcessorExp", 18),
          ("bladeGenericExp", 19))
    )


_BladeExpCardVpdCardTypeInfo_Type.__name__ = "Integer32"
_BladeExpCardVpdCardTypeInfo_Object = MibTableColumn
bladeExpCardVpdCardTypeInfo = _BladeExpCardVpdCardTypeInfo_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 21),
    _BladeExpCardVpdCardTypeInfo_Type()
)
bladeExpCardVpdCardTypeInfo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdCardTypeInfo.setStatus("mandatory")


class _BladeExpCardVpdHighSpeed_Type(Integer32):
    """Custom type bladeExpCardVpdHighSpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1),
          ("notApplicable", 255))
    )


_BladeExpCardVpdHighSpeed_Type.__name__ = "Integer32"
_BladeExpCardVpdHighSpeed_Object = MibTableColumn
bladeExpCardVpdHighSpeed = _BladeExpCardVpdHighSpeed_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 22),
    _BladeExpCardVpdHighSpeed_Type()
)
bladeExpCardVpdHighSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdHighSpeed.setStatus("mandatory")
_BladeExpCardVpdHardwareRevisionString_Type = OctetString
_BladeExpCardVpdHardwareRevisionString_Object = MibTableColumn
bladeExpCardVpdHardwareRevisionString = _BladeExpCardVpdHardwareRevisionString_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 23),
    _BladeExpCardVpdHardwareRevisionString_Type()
)
bladeExpCardVpdHardwareRevisionString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdHardwareRevisionString.setStatus("mandatory")
_BladecKVMCardVpdTable_Object = MibTable
bladecKVMCardVpdTable = _BladecKVMCardVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 6)
)
if mibBuilder.loadTexts:
    bladecKVMCardVpdTable.setStatus("mandatory")
_BladecKVMCardVpdEntry_Object = MibTableRow
bladecKVMCardVpdEntry = _BladecKVMCardVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 6, 1)
)
bladecKVMCardVpdEntry.setIndexNames(
    (0, "BLADE-MIB", "bladecKVMCardVpdIndex"),
)
if mibBuilder.loadTexts:
    bladecKVMCardVpdEntry.setStatus("mandatory")
_BladecKVMCardVpdIndex_Type = Integer32
_BladecKVMCardVpdIndex_Object = MibTableColumn
bladecKVMCardVpdIndex = _BladecKVMCardVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 6, 1, 1),
    _BladecKVMCardVpdIndex_Type()
)
bladecKVMCardVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladecKVMCardVpdIndex.setStatus("mandatory")
_BladecKVMCardVpdBayNumber_Type = OctetString
_BladecKVMCardVpdBayNumber_Object = MibTableColumn
bladecKVMCardVpdBayNumber = _BladecKVMCardVpdBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 6, 1, 2),
    _BladecKVMCardVpdBayNumber_Type()
)
bladecKVMCardVpdBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladecKVMCardVpdBayNumber.setStatus("mandatory")
_BladecKVMCardVpdManufacturingId_Type = OctetString
_BladecKVMCardVpdManufacturingId_Object = MibTableColumn
bladecKVMCardVpdManufacturingId = _BladecKVMCardVpdManufacturingId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 6, 1, 3),
    _BladecKVMCardVpdManufacturingId_Type()
)
bladecKVMCardVpdManufacturingId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladecKVMCardVpdManufacturingId.setStatus("mandatory")
_BladecKVMCardVpdFruNumber_Type = OctetString
_BladecKVMCardVpdFruNumber_Object = MibTableColumn
bladecKVMCardVpdFruNumber = _BladecKVMCardVpdFruNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 6, 1, 4),
    _BladecKVMCardVpdFruNumber_Type()
)
bladecKVMCardVpdFruNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladecKVMCardVpdFruNumber.setStatus("mandatory")
_BladecKVMCardVpdHardwareRevision_Type = Integer32
_BladecKVMCardVpdHardwareRevision_Object = MibTableColumn
bladecKVMCardVpdHardwareRevision = _BladecKVMCardVpdHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 6, 1, 5),
    _BladecKVMCardVpdHardwareRevision_Type()
)
bladecKVMCardVpdHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladecKVMCardVpdHardwareRevision.setStatus("mandatory")
_BladecKVMCardVpdSerialNumber_Type = OctetString
_BladecKVMCardVpdSerialNumber_Object = MibTableColumn
bladecKVMCardVpdSerialNumber = _BladecKVMCardVpdSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 6, 1, 6),
    _BladecKVMCardVpdSerialNumber_Type()
)
bladecKVMCardVpdSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladecKVMCardVpdSerialNumber.setStatus("mandatory")
_BladecKVMCardVpdMachineType_Type = OctetString
_BladecKVMCardVpdMachineType_Object = MibTableColumn
bladecKVMCardVpdMachineType = _BladecKVMCardVpdMachineType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 6, 1, 7),
    _BladecKVMCardVpdMachineType_Type()
)
bladecKVMCardVpdMachineType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladecKVMCardVpdMachineType.setStatus("mandatory")
_BladecKVMCardVpdUuid_Type = OctetString
_BladecKVMCardVpdUuid_Object = MibTableColumn
bladecKVMCardVpdUuid = _BladecKVMCardVpdUuid_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 6, 1, 8),
    _BladecKVMCardVpdUuid_Type()
)
bladecKVMCardVpdUuid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladecKVMCardVpdUuid.setStatus("mandatory")
_BladecKVMCardVpdManufDate_Type = OctetString
_BladecKVMCardVpdManufDate_Object = MibTableColumn
bladecKVMCardVpdManufDate = _BladecKVMCardVpdManufDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 6, 1, 9),
    _BladecKVMCardVpdManufDate_Type()
)
bladecKVMCardVpdManufDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladecKVMCardVpdManufDate.setStatus("mandatory")
_BladecKVMCardVpdPartNumber_Type = OctetString
_BladecKVMCardVpdPartNumber_Object = MibTableColumn
bladecKVMCardVpdPartNumber = _BladecKVMCardVpdPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 6, 1, 10),
    _BladecKVMCardVpdPartNumber_Type()
)
bladecKVMCardVpdPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladecKVMCardVpdPartNumber.setStatus("mandatory")
_BladecKVMCardVpdFruSerial_Type = OctetString
_BladecKVMCardVpdFruSerial_Object = MibTableColumn
bladecKVMCardVpdFruSerial = _BladecKVMCardVpdFruSerial_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 6, 1, 11),
    _BladecKVMCardVpdFruSerial_Type()
)
bladecKVMCardVpdFruSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladecKVMCardVpdFruSerial.setStatus("mandatory")
_BladecKVMCardVpdMachineModel_Type = OctetString
_BladecKVMCardVpdMachineModel_Object = MibTableColumn
bladecKVMCardVpdMachineModel = _BladecKVMCardVpdMachineModel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 6, 1, 12),
    _BladecKVMCardVpdMachineModel_Type()
)
bladecKVMCardVpdMachineModel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladecKVMCardVpdMachineModel.setStatus("mandatory")
_BladecKVMCardVpdManufacturingIDNumber_Type = OctetString
_BladecKVMCardVpdManufacturingIDNumber_Object = MibTableColumn
bladecKVMCardVpdManufacturingIDNumber = _BladecKVMCardVpdManufacturingIDNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 6, 1, 13),
    _BladecKVMCardVpdManufacturingIDNumber_Type()
)
bladecKVMCardVpdManufacturingIDNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladecKVMCardVpdManufacturingIDNumber.setStatus("mandatory")
_BladecKVMCardVpdProductId_Type = OctetString
_BladecKVMCardVpdProductId_Object = MibTableColumn
bladecKVMCardVpdProductId = _BladecKVMCardVpdProductId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 6, 1, 14),
    _BladecKVMCardVpdProductId_Type()
)
bladecKVMCardVpdProductId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladecKVMCardVpdProductId.setStatus("mandatory")
_BladecKVMCardVpdSubManufacturerId_Type = OctetString
_BladecKVMCardVpdSubManufacturerId_Object = MibTableColumn
bladecKVMCardVpdSubManufacturerId = _BladecKVMCardVpdSubManufacturerId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 6, 1, 15),
    _BladecKVMCardVpdSubManufacturerId_Type()
)
bladecKVMCardVpdSubManufacturerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladecKVMCardVpdSubManufacturerId.setStatus("mandatory")
_BladecKVMCardVpdClei_Type = OctetString
_BladecKVMCardVpdClei_Object = MibTableColumn
bladecKVMCardVpdClei = _BladecKVMCardVpdClei_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 6, 1, 16),
    _BladecKVMCardVpdClei_Type()
)
bladecKVMCardVpdClei.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladecKVMCardVpdClei.setStatus("mandatory")
_BladecKVMCardVpdHardwareRevisionString_Type = OctetString
_BladecKVMCardVpdHardwareRevisionString_Object = MibTableColumn
bladecKVMCardVpdHardwareRevisionString = _BladecKVMCardVpdHardwareRevisionString_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 6, 1, 17),
    _BladecKVMCardVpdHardwareRevisionString_Type()
)
bladecKVMCardVpdHardwareRevisionString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladecKVMCardVpdHardwareRevisionString.setStatus("mandatory")
_BladeAndExpCardWwnGuidVpdTable_Object = MibTable
bladeAndExpCardWwnGuidVpdTable = _BladeAndExpCardWwnGuidVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7)
)
if mibBuilder.loadTexts:
    bladeAndExpCardWwnGuidVpdTable.setStatus("mandatory")
_BladeAndExpCardWwnGuidVpdEntry_Object = MibTableRow
bladeAndExpCardWwnGuidVpdEntry = _BladeAndExpCardWwnGuidVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1)
)
bladeAndExpCardWwnGuidVpdEntry.setIndexNames(
    (0, "BLADE-MIB", "bladeAndExpCardWwnGuidVpdIndex"),
)
if mibBuilder.loadTexts:
    bladeAndExpCardWwnGuidVpdEntry.setStatus("mandatory")
_BladeAndExpCardWwnGuidVpdIndex_Type = Integer32
_BladeAndExpCardWwnGuidVpdIndex_Object = MibTableColumn
bladeAndExpCardWwnGuidVpdIndex = _BladeAndExpCardWwnGuidVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 1),
    _BladeAndExpCardWwnGuidVpdIndex_Type()
)
bladeAndExpCardWwnGuidVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeAndExpCardWwnGuidVpdIndex.setStatus("mandatory")
_BladeAndExpCardWwnGuidVpdBayNumber_Type = OctetString
_BladeAndExpCardWwnGuidVpdBayNumber_Object = MibTableColumn
bladeAndExpCardWwnGuidVpdBayNumber = _BladeAndExpCardWwnGuidVpdBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 2),
    _BladeAndExpCardWwnGuidVpdBayNumber_Type()
)
bladeAndExpCardWwnGuidVpdBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeAndExpCardWwnGuidVpdBayNumber.setStatus("mandatory")
_BladeAndExpCardWwnGuidVpdName_Type = OctetString
_BladeAndExpCardWwnGuidVpdName_Object = MibTableColumn
bladeAndExpCardWwnGuidVpdName = _BladeAndExpCardWwnGuidVpdName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 3),
    _BladeAndExpCardWwnGuidVpdName_Type()
)
bladeAndExpCardWwnGuidVpdName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeAndExpCardWwnGuidVpdName.setStatus("mandatory")
_BladeAndExpCardWwnGuidVpdBladeBayNumber_Type = OctetString
_BladeAndExpCardWwnGuidVpdBladeBayNumber_Object = MibTableColumn
bladeAndExpCardWwnGuidVpdBladeBayNumber = _BladeAndExpCardWwnGuidVpdBladeBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 4),
    _BladeAndExpCardWwnGuidVpdBladeBayNumber_Type()
)
bladeAndExpCardWwnGuidVpdBladeBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeAndExpCardWwnGuidVpdBladeBayNumber.setStatus("mandatory")


class _BladeAndExpCardWwnGuidVpdType_Type(Integer32):
    """Custom type bladeAndExpCardWwnGuidVpdType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notAvailable", 0),
          ("wwn", 1),
          ("guid", 2),
          ("sas", 3))
    )


_BladeAndExpCardWwnGuidVpdType_Type.__name__ = "Integer32"
_BladeAndExpCardWwnGuidVpdType_Object = MibTableColumn
bladeAndExpCardWwnGuidVpdType = _BladeAndExpCardWwnGuidVpdType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 5),
    _BladeAndExpCardWwnGuidVpdType_Type()
)
bladeAndExpCardWwnGuidVpdType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeAndExpCardWwnGuidVpdType.setStatus("mandatory")
_BladeAndExpCardWwnGuidVpd1_Type = OctetString
_BladeAndExpCardWwnGuidVpd1_Object = MibTableColumn
bladeAndExpCardWwnGuidVpd1 = _BladeAndExpCardWwnGuidVpd1_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 6),
    _BladeAndExpCardWwnGuidVpd1_Type()
)
bladeAndExpCardWwnGuidVpd1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeAndExpCardWwnGuidVpd1.setStatus("mandatory")
_BladeAndExpCardWwnGuidVpd2_Type = OctetString
_BladeAndExpCardWwnGuidVpd2_Object = MibTableColumn
bladeAndExpCardWwnGuidVpd2 = _BladeAndExpCardWwnGuidVpd2_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 7),
    _BladeAndExpCardWwnGuidVpd2_Type()
)
bladeAndExpCardWwnGuidVpd2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeAndExpCardWwnGuidVpd2.setStatus("mandatory")
_BladeAndExpCardWwnGuidVpd3_Type = OctetString
_BladeAndExpCardWwnGuidVpd3_Object = MibTableColumn
bladeAndExpCardWwnGuidVpd3 = _BladeAndExpCardWwnGuidVpd3_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 8),
    _BladeAndExpCardWwnGuidVpd3_Type()
)
bladeAndExpCardWwnGuidVpd3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeAndExpCardWwnGuidVpd3.setStatus("mandatory")
_BladeAndExpCardWwnGuidVpd4_Type = OctetString
_BladeAndExpCardWwnGuidVpd4_Object = MibTableColumn
bladeAndExpCardWwnGuidVpd4 = _BladeAndExpCardWwnGuidVpd4_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 9),
    _BladeAndExpCardWwnGuidVpd4_Type()
)
bladeAndExpCardWwnGuidVpd4.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeAndExpCardWwnGuidVpd4.setStatus("mandatory")
_BladeAndExpCardWwnGuidVpd5_Type = OctetString
_BladeAndExpCardWwnGuidVpd5_Object = MibTableColumn
bladeAndExpCardWwnGuidVpd5 = _BladeAndExpCardWwnGuidVpd5_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 10),
    _BladeAndExpCardWwnGuidVpd5_Type()
)
bladeAndExpCardWwnGuidVpd5.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeAndExpCardWwnGuidVpd5.setStatus("mandatory")
_BladeAndExpCardWwnGuidVpd6_Type = OctetString
_BladeAndExpCardWwnGuidVpd6_Object = MibTableColumn
bladeAndExpCardWwnGuidVpd6 = _BladeAndExpCardWwnGuidVpd6_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 11),
    _BladeAndExpCardWwnGuidVpd6_Type()
)
bladeAndExpCardWwnGuidVpd6.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeAndExpCardWwnGuidVpd6.setStatus("mandatory")
_BladeAndExpCardWwnGuidVpd7_Type = OctetString
_BladeAndExpCardWwnGuidVpd7_Object = MibTableColumn
bladeAndExpCardWwnGuidVpd7 = _BladeAndExpCardWwnGuidVpd7_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 12),
    _BladeAndExpCardWwnGuidVpd7_Type()
)
bladeAndExpCardWwnGuidVpd7.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeAndExpCardWwnGuidVpd7.setStatus("mandatory")
_BladeAndExpCardWwnGuidVpd8_Type = OctetString
_BladeAndExpCardWwnGuidVpd8_Object = MibTableColumn
bladeAndExpCardWwnGuidVpd8 = _BladeAndExpCardWwnGuidVpd8_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 13),
    _BladeAndExpCardWwnGuidVpd8_Type()
)
bladeAndExpCardWwnGuidVpd8.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeAndExpCardWwnGuidVpd8.setStatus("mandatory")
_BladeManagementCardVpdTable_Object = MibTable
bladeManagementCardVpdTable = _BladeManagementCardVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8)
)
if mibBuilder.loadTexts:
    bladeManagementCardVpdTable.setStatus("mandatory")
_BladeManagementCardVpdEntry_Object = MibTableRow
bladeManagementCardVpdEntry = _BladeManagementCardVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1)
)
bladeManagementCardVpdEntry.setIndexNames(
    (0, "BLADE-MIB", "bladeManagementCardVpdIndex"),
)
if mibBuilder.loadTexts:
    bladeManagementCardVpdEntry.setStatus("mandatory")
_BladeManagementCardVpdIndex_Type = Integer32
_BladeManagementCardVpdIndex_Object = MibTableColumn
bladeManagementCardVpdIndex = _BladeManagementCardVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 1),
    _BladeManagementCardVpdIndex_Type()
)
bladeManagementCardVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementCardVpdIndex.setStatus("mandatory")
_BladeManagementCardVpdBayNumber_Type = OctetString
_BladeManagementCardVpdBayNumber_Object = MibTableColumn
bladeManagementCardVpdBayNumber = _BladeManagementCardVpdBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 2),
    _BladeManagementCardVpdBayNumber_Type()
)
bladeManagementCardVpdBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementCardVpdBayNumber.setStatus("mandatory")
_BladeManagementCardVpdManufacturingId_Type = OctetString
_BladeManagementCardVpdManufacturingId_Object = MibTableColumn
bladeManagementCardVpdManufacturingId = _BladeManagementCardVpdManufacturingId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 3),
    _BladeManagementCardVpdManufacturingId_Type()
)
bladeManagementCardVpdManufacturingId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementCardVpdManufacturingId.setStatus("mandatory")
_BladeManagementCardVpdFruNumber_Type = OctetString
_BladeManagementCardVpdFruNumber_Object = MibTableColumn
bladeManagementCardVpdFruNumber = _BladeManagementCardVpdFruNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 4),
    _BladeManagementCardVpdFruNumber_Type()
)
bladeManagementCardVpdFruNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementCardVpdFruNumber.setStatus("mandatory")
_BladeManagementCardVpdHardwareRevision_Type = Integer32
_BladeManagementCardVpdHardwareRevision_Object = MibTableColumn
bladeManagementCardVpdHardwareRevision = _BladeManagementCardVpdHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 5),
    _BladeManagementCardVpdHardwareRevision_Type()
)
bladeManagementCardVpdHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementCardVpdHardwareRevision.setStatus("mandatory")
_BladeManagementCardVpdSerialNumber_Type = OctetString
_BladeManagementCardVpdSerialNumber_Object = MibTableColumn
bladeManagementCardVpdSerialNumber = _BladeManagementCardVpdSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 6),
    _BladeManagementCardVpdSerialNumber_Type()
)
bladeManagementCardVpdSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementCardVpdSerialNumber.setStatus("mandatory")
_BladeManagementCardVpdMachineType_Type = OctetString
_BladeManagementCardVpdMachineType_Object = MibTableColumn
bladeManagementCardVpdMachineType = _BladeManagementCardVpdMachineType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 7),
    _BladeManagementCardVpdMachineType_Type()
)
bladeManagementCardVpdMachineType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementCardVpdMachineType.setStatus("mandatory")
_BladeManagementCardVpdUuid_Type = OctetString
_BladeManagementCardVpdUuid_Object = MibTableColumn
bladeManagementCardVpdUuid = _BladeManagementCardVpdUuid_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 8),
    _BladeManagementCardVpdUuid_Type()
)
bladeManagementCardVpdUuid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementCardVpdUuid.setStatus("mandatory")
_BladeManagementCardVpdManufDate_Type = OctetString
_BladeManagementCardVpdManufDate_Object = MibTableColumn
bladeManagementCardVpdManufDate = _BladeManagementCardVpdManufDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 9),
    _BladeManagementCardVpdManufDate_Type()
)
bladeManagementCardVpdManufDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementCardVpdManufDate.setStatus("mandatory")
_BladeManagementCardVpdPartNumber_Type = OctetString
_BladeManagementCardVpdPartNumber_Object = MibTableColumn
bladeManagementCardVpdPartNumber = _BladeManagementCardVpdPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 10),
    _BladeManagementCardVpdPartNumber_Type()
)
bladeManagementCardVpdPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementCardVpdPartNumber.setStatus("mandatory")
_BladeManagementCardVpdFruSerial_Type = OctetString
_BladeManagementCardVpdFruSerial_Object = MibTableColumn
bladeManagementCardVpdFruSerial = _BladeManagementCardVpdFruSerial_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 11),
    _BladeManagementCardVpdFruSerial_Type()
)
bladeManagementCardVpdFruSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementCardVpdFruSerial.setStatus("mandatory")
_BladeManagementCardVpdMachineModel_Type = OctetString
_BladeManagementCardVpdMachineModel_Object = MibTableColumn
bladeManagementCardVpdMachineModel = _BladeManagementCardVpdMachineModel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 12),
    _BladeManagementCardVpdMachineModel_Type()
)
bladeManagementCardVpdMachineModel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementCardVpdMachineModel.setStatus("mandatory")
_BladeManagementCardVpdManufacturingIDNumber_Type = OctetString
_BladeManagementCardVpdManufacturingIDNumber_Object = MibTableColumn
bladeManagementCardVpdManufacturingIDNumber = _BladeManagementCardVpdManufacturingIDNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 13),
    _BladeManagementCardVpdManufacturingIDNumber_Type()
)
bladeManagementCardVpdManufacturingIDNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementCardVpdManufacturingIDNumber.setStatus("mandatory")
_BladeManagementCardVpdProductId_Type = OctetString
_BladeManagementCardVpdProductId_Object = MibTableColumn
bladeManagementCardVpdProductId = _BladeManagementCardVpdProductId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 14),
    _BladeManagementCardVpdProductId_Type()
)
bladeManagementCardVpdProductId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementCardVpdProductId.setStatus("mandatory")
_BladeManagementCardVpdSubManufacturerId_Type = OctetString
_BladeManagementCardVpdSubManufacturerId_Object = MibTableColumn
bladeManagementCardVpdSubManufacturerId = _BladeManagementCardVpdSubManufacturerId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 15),
    _BladeManagementCardVpdSubManufacturerId_Type()
)
bladeManagementCardVpdSubManufacturerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementCardVpdSubManufacturerId.setStatus("mandatory")
_BladeManagementCardVpdClei_Type = OctetString
_BladeManagementCardVpdClei_Object = MibTableColumn
bladeManagementCardVpdClei = _BladeManagementCardVpdClei_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 16),
    _BladeManagementCardVpdClei_Type()
)
bladeManagementCardVpdClei.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementCardVpdClei.setStatus("mandatory")
_BladeManagementCardVpdHardwareRevisionString_Type = OctetString
_BladeManagementCardVpdHardwareRevisionString_Object = MibTableColumn
bladeManagementCardVpdHardwareRevisionString = _BladeManagementCardVpdHardwareRevisionString_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 17),
    _BladeManagementCardVpdHardwareRevisionString_Type()
)
bladeManagementCardVpdHardwareRevisionString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementCardVpdHardwareRevisionString.setStatus("mandatory")
_BladeFirmwareVpd_ObjectIdentity = ObjectIdentity
bladeFirmwareVpd = _BladeFirmwareVpd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5)
)
_BladeBiosVPDTable_Object = MibTable
bladeBiosVPDTable = _BladeBiosVPDTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1)
)
if mibBuilder.loadTexts:
    bladeBiosVPDTable.setStatus("mandatory")
_BladeBiosVPDEntry_Object = MibTableRow
bladeBiosVPDEntry = _BladeBiosVPDEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1)
)
bladeBiosVPDEntry.setIndexNames(
    (0, "BLADE-MIB", "bladeBiosVpdIndex"),
)
if mibBuilder.loadTexts:
    bladeBiosVPDEntry.setStatus("mandatory")
_BladeBiosVpdIndex_Type = Integer32
_BladeBiosVpdIndex_Object = MibTableColumn
bladeBiosVpdIndex = _BladeBiosVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 1),
    _BladeBiosVpdIndex_Type()
)
bladeBiosVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeBiosVpdIndex.setStatus("mandatory")


class _BladeBiosVpdId_Type(Integer32):
    """Custom type bladeBiosVpdId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_BladeBiosVpdId_Type.__name__ = "Integer32"
_BladeBiosVpdId_Object = MibTableColumn
bladeBiosVpdId = _BladeBiosVpdId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 2),
    _BladeBiosVpdId_Type()
)
bladeBiosVpdId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeBiosVpdId.setStatus("mandatory")


class _BladeBiosVpdExists_Type(Integer32):
    """Custom type bladeBiosVpdExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_BladeBiosVpdExists_Type.__name__ = "Integer32"
_BladeBiosVpdExists_Object = MibTableColumn
bladeBiosVpdExists = _BladeBiosVpdExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 3),
    _BladeBiosVpdExists_Type()
)
bladeBiosVpdExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeBiosVpdExists.setStatus("mandatory")


class _BladeBiosVpdPowerState_Type(Integer32):
    """Custom type bladeBiosVpdPowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("standby", 3),
          ("hibernate", 4))
    )


_BladeBiosVpdPowerState_Type.__name__ = "Integer32"
_BladeBiosVpdPowerState_Object = MibTableColumn
bladeBiosVpdPowerState = _BladeBiosVpdPowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 4),
    _BladeBiosVpdPowerState_Type()
)
bladeBiosVpdPowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeBiosVpdPowerState.setStatus("mandatory")
_BladeBiosVpdName_Type = OctetString
_BladeBiosVpdName_Object = MibTableColumn
bladeBiosVpdName = _BladeBiosVpdName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 5),
    _BladeBiosVpdName_Type()
)
bladeBiosVpdName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeBiosVpdName.setStatus("mandatory")
_BladeBiosVpdBuildId_Type = OctetString
_BladeBiosVpdBuildId_Object = MibTableColumn
bladeBiosVpdBuildId = _BladeBiosVpdBuildId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 6),
    _BladeBiosVpdBuildId_Type()
)
bladeBiosVpdBuildId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeBiosVpdBuildId.setStatus("mandatory")
_BladeBiosVpdRevision_Type = OctetString
_BladeBiosVpdRevision_Object = MibTableColumn
bladeBiosVpdRevision = _BladeBiosVpdRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 7),
    _BladeBiosVpdRevision_Type()
)
bladeBiosVpdRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeBiosVpdRevision.setStatus("mandatory")
_BladeBiosVpdDate_Type = OctetString
_BladeBiosVpdDate_Object = MibTableColumn
bladeBiosVpdDate = _BladeBiosVpdDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 8),
    _BladeBiosVpdDate_Type()
)
bladeBiosVpdDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeBiosVpdDate.setStatus("mandatory")
_BladeBiosVpdLevelStatus_Type = OctetString
_BladeBiosVpdLevelStatus_Object = MibTableColumn
bladeBiosVpdLevelStatus = _BladeBiosVpdLevelStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 9),
    _BladeBiosVpdLevelStatus_Type()
)
bladeBiosVpdLevelStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeBiosVpdLevelStatus.setStatus("mandatory")
_BladeDiagsVPDTable_Object = MibTable
bladeDiagsVPDTable = _BladeDiagsVPDTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2)
)
if mibBuilder.loadTexts:
    bladeDiagsVPDTable.setStatus("mandatory")
_BladeDiagsVPDEntry_Object = MibTableRow
bladeDiagsVPDEntry = _BladeDiagsVPDEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1)
)
bladeDiagsVPDEntry.setIndexNames(
    (0, "BLADE-MIB", "bladeDiagsVpdIndex"),
)
if mibBuilder.loadTexts:
    bladeDiagsVPDEntry.setStatus("mandatory")
_BladeDiagsVpdIndex_Type = Integer32
_BladeDiagsVpdIndex_Object = MibTableColumn
bladeDiagsVpdIndex = _BladeDiagsVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 1),
    _BladeDiagsVpdIndex_Type()
)
bladeDiagsVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDiagsVpdIndex.setStatus("mandatory")


class _BladeDiagsVpdId_Type(Integer32):
    """Custom type bladeDiagsVpdId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_BladeDiagsVpdId_Type.__name__ = "Integer32"
_BladeDiagsVpdId_Object = MibTableColumn
bladeDiagsVpdId = _BladeDiagsVpdId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 2),
    _BladeDiagsVpdId_Type()
)
bladeDiagsVpdId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDiagsVpdId.setStatus("mandatory")


class _BladeDiagsVpdExists_Type(Integer32):
    """Custom type bladeDiagsVpdExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_BladeDiagsVpdExists_Type.__name__ = "Integer32"
_BladeDiagsVpdExists_Object = MibTableColumn
bladeDiagsVpdExists = _BladeDiagsVpdExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 3),
    _BladeDiagsVpdExists_Type()
)
bladeDiagsVpdExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDiagsVpdExists.setStatus("mandatory")


class _BladeDiagsVpdPowerState_Type(Integer32):
    """Custom type bladeDiagsVpdPowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("standby", 3),
          ("hibernate", 4))
    )


_BladeDiagsVpdPowerState_Type.__name__ = "Integer32"
_BladeDiagsVpdPowerState_Object = MibTableColumn
bladeDiagsVpdPowerState = _BladeDiagsVpdPowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 4),
    _BladeDiagsVpdPowerState_Type()
)
bladeDiagsVpdPowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDiagsVpdPowerState.setStatus("mandatory")
_BladeDiagsVpdName_Type = OctetString
_BladeDiagsVpdName_Object = MibTableColumn
bladeDiagsVpdName = _BladeDiagsVpdName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 5),
    _BladeDiagsVpdName_Type()
)
bladeDiagsVpdName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDiagsVpdName.setStatus("mandatory")
_BladeDiagsVpdBuildId_Type = OctetString
_BladeDiagsVpdBuildId_Object = MibTableColumn
bladeDiagsVpdBuildId = _BladeDiagsVpdBuildId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 6),
    _BladeDiagsVpdBuildId_Type()
)
bladeDiagsVpdBuildId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDiagsVpdBuildId.setStatus("mandatory")
_BladeDiagsVpdRevision_Type = OctetString
_BladeDiagsVpdRevision_Object = MibTableColumn
bladeDiagsVpdRevision = _BladeDiagsVpdRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 7),
    _BladeDiagsVpdRevision_Type()
)
bladeDiagsVpdRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDiagsVpdRevision.setStatus("mandatory")
_BladeDiagsVpdDate_Type = OctetString
_BladeDiagsVpdDate_Object = MibTableColumn
bladeDiagsVpdDate = _BladeDiagsVpdDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 8),
    _BladeDiagsVpdDate_Type()
)
bladeDiagsVpdDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDiagsVpdDate.setStatus("mandatory")
_BladeDiagsVpdLevelStatus_Type = OctetString
_BladeDiagsVpdLevelStatus_Object = MibTableColumn
bladeDiagsVpdLevelStatus = _BladeDiagsVpdLevelStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 9),
    _BladeDiagsVpdLevelStatus_Type()
)
bladeDiagsVpdLevelStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDiagsVpdLevelStatus.setStatus("mandatory")
_BladeSysMgmtProcVPDTable_Object = MibTable
bladeSysMgmtProcVPDTable = _BladeSysMgmtProcVPDTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3)
)
if mibBuilder.loadTexts:
    bladeSysMgmtProcVPDTable.setStatus("mandatory")
_BladeSysMgmtProcVPDEntry_Object = MibTableRow
bladeSysMgmtProcVPDEntry = _BladeSysMgmtProcVPDEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1)
)
bladeSysMgmtProcVPDEntry.setIndexNames(
    (0, "BLADE-MIB", "bladeSysMgmtProcVpdIndex"),
)
if mibBuilder.loadTexts:
    bladeSysMgmtProcVPDEntry.setStatus("mandatory")
_BladeSysMgmtProcVpdIndex_Type = Integer32
_BladeSysMgmtProcVpdIndex_Object = MibTableColumn
bladeSysMgmtProcVpdIndex = _BladeSysMgmtProcVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1, 1),
    _BladeSysMgmtProcVpdIndex_Type()
)
bladeSysMgmtProcVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSysMgmtProcVpdIndex.setStatus("mandatory")


class _BladeSysMgmtProcVpdId_Type(Integer32):
    """Custom type bladeSysMgmtProcVpdId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_BladeSysMgmtProcVpdId_Type.__name__ = "Integer32"
_BladeSysMgmtProcVpdId_Object = MibTableColumn
bladeSysMgmtProcVpdId = _BladeSysMgmtProcVpdId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1, 2),
    _BladeSysMgmtProcVpdId_Type()
)
bladeSysMgmtProcVpdId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSysMgmtProcVpdId.setStatus("mandatory")


class _BladeSysMgmtProcVpdExists_Type(Integer32):
    """Custom type bladeSysMgmtProcVpdExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_BladeSysMgmtProcVpdExists_Type.__name__ = "Integer32"
_BladeSysMgmtProcVpdExists_Object = MibTableColumn
bladeSysMgmtProcVpdExists = _BladeSysMgmtProcVpdExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1, 3),
    _BladeSysMgmtProcVpdExists_Type()
)
bladeSysMgmtProcVpdExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSysMgmtProcVpdExists.setStatus("mandatory")


class _BladeSysMgmtProcVpdPowerState_Type(Integer32):
    """Custom type bladeSysMgmtProcVpdPowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("standby", 3),
          ("hibernate", 4))
    )


_BladeSysMgmtProcVpdPowerState_Type.__name__ = "Integer32"
_BladeSysMgmtProcVpdPowerState_Object = MibTableColumn
bladeSysMgmtProcVpdPowerState = _BladeSysMgmtProcVpdPowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1, 4),
    _BladeSysMgmtProcVpdPowerState_Type()
)
bladeSysMgmtProcVpdPowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSysMgmtProcVpdPowerState.setStatus("mandatory")
_BladeSysMgmtProcVpdName_Type = OctetString
_BladeSysMgmtProcVpdName_Object = MibTableColumn
bladeSysMgmtProcVpdName = _BladeSysMgmtProcVpdName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1, 5),
    _BladeSysMgmtProcVpdName_Type()
)
bladeSysMgmtProcVpdName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSysMgmtProcVpdName.setStatus("mandatory")
_BladeSysMgmtProcVpdBuildId_Type = OctetString
_BladeSysMgmtProcVpdBuildId_Object = MibTableColumn
bladeSysMgmtProcVpdBuildId = _BladeSysMgmtProcVpdBuildId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1, 6),
    _BladeSysMgmtProcVpdBuildId_Type()
)
bladeSysMgmtProcVpdBuildId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSysMgmtProcVpdBuildId.setStatus("mandatory")
_BladeSysMgmtProcVpdRevision_Type = OctetString
_BladeSysMgmtProcVpdRevision_Object = MibTableColumn
bladeSysMgmtProcVpdRevision = _BladeSysMgmtProcVpdRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1, 7),
    _BladeSysMgmtProcVpdRevision_Type()
)
bladeSysMgmtProcVpdRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSysMgmtProcVpdRevision.setStatus("mandatory")
_BladeSysMgmtProcVpdLevelStatus_Type = OctetString
_BladeSysMgmtProcVpdLevelStatus_Object = MibTableColumn
bladeSysMgmtProcVpdLevelStatus = _BladeSysMgmtProcVpdLevelStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1, 8),
    _BladeSysMgmtProcVpdLevelStatus_Type()
)
bladeSysMgmtProcVpdLevelStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSysMgmtProcVpdLevelStatus.setStatus("mandatory")
_BladecKVMVPDTable_Object = MibTable
bladecKVMVPDTable = _BladecKVMVPDTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 4)
)
if mibBuilder.loadTexts:
    bladecKVMVPDTable.setStatus("mandatory")
_BladecKVMVPDEntry_Object = MibTableRow
bladecKVMVPDEntry = _BladecKVMVPDEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 4, 1)
)
bladecKVMVPDEntry.setIndexNames(
    (0, "BLADE-MIB", "bladecKVMVpdIndex"),
)
if mibBuilder.loadTexts:
    bladecKVMVPDEntry.setStatus("mandatory")
_BladecKVMVpdIndex_Type = Integer32
_BladecKVMVpdIndex_Object = MibTableColumn
bladecKVMVpdIndex = _BladecKVMVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 4, 1, 1),
    _BladecKVMVpdIndex_Type()
)
bladecKVMVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladecKVMVpdIndex.setStatus("mandatory")


class _BladecKVMVpdId_Type(Integer32):
    """Custom type bladecKVMVpdId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_BladecKVMVpdId_Type.__name__ = "Integer32"
_BladecKVMVpdId_Object = MibTableColumn
bladecKVMVpdId = _BladecKVMVpdId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 4, 1, 2),
    _BladecKVMVpdId_Type()
)
bladecKVMVpdId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladecKVMVpdId.setStatus("mandatory")


class _BladecKVMVpdExists_Type(Integer32):
    """Custom type bladecKVMVpdExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_BladecKVMVpdExists_Type.__name__ = "Integer32"
_BladecKVMVpdExists_Object = MibTableColumn
bladecKVMVpdExists = _BladecKVMVpdExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 4, 1, 3),
    _BladecKVMVpdExists_Type()
)
bladecKVMVpdExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladecKVMVpdExists.setStatus("mandatory")


class _BladecKVMVpdPowerState_Type(Integer32):
    """Custom type bladecKVMVpdPowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("standby", 3),
          ("hibernate", 4))
    )


_BladecKVMVpdPowerState_Type.__name__ = "Integer32"
_BladecKVMVpdPowerState_Object = MibTableColumn
bladecKVMVpdPowerState = _BladecKVMVpdPowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 4, 1, 4),
    _BladecKVMVpdPowerState_Type()
)
bladecKVMVpdPowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladecKVMVpdPowerState.setStatus("mandatory")
_BladecKVMVpdName_Type = OctetString
_BladecKVMVpdName_Object = MibTableColumn
bladecKVMVpdName = _BladecKVMVpdName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 4, 1, 5),
    _BladecKVMVpdName_Type()
)
bladecKVMVpdName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladecKVMVpdName.setStatus("mandatory")
_BladecKVMVpdRevision_Type = OctetString
_BladecKVMVpdRevision_Object = MibTableColumn
bladecKVMVpdRevision = _BladecKVMVpdRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 4, 1, 7),
    _BladecKVMVpdRevision_Type()
)
bladecKVMVpdRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladecKVMVpdRevision.setStatus("mandatory")
_BladeFWBuildIDs_ObjectIdentity = ObjectIdentity
bladeFWBuildIDs = _BladeFWBuildIDs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 5)
)
_BladeFWBuildIDTable_Object = MibTable
bladeFWBuildIDTable = _BladeFWBuildIDTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 5, 1)
)
if mibBuilder.loadTexts:
    bladeFWBuildIDTable.setStatus("mandatory")
_BladeFWBuildIDEntry_Object = MibTableRow
bladeFWBuildIDEntry = _BladeFWBuildIDEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 5, 1, 1)
)
bladeFWBuildIDEntry.setIndexNames(
    (0, "BLADE-MIB", "bladeFWBuildIDIndex"),
)
if mibBuilder.loadTexts:
    bladeFWBuildIDEntry.setStatus("mandatory")
_BladeFWBuildIDIndex_Type = Integer32
_BladeFWBuildIDIndex_Object = MibTableColumn
bladeFWBuildIDIndex = _BladeFWBuildIDIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 5, 1, 1, 1),
    _BladeFWBuildIDIndex_Type()
)
bladeFWBuildIDIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeFWBuildIDIndex.setStatus("mandatory")
_BladeFWBuildMfg_Type = OctetString
_BladeFWBuildMfg_Object = MibTableColumn
bladeFWBuildMfg = _BladeFWBuildMfg_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 5, 1, 1, 2),
    _BladeFWBuildMfg_Type()
)
bladeFWBuildMfg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeFWBuildMfg.setStatus("mandatory")
_BladeFWBuildMT_Type = OctetString
_BladeFWBuildMT_Object = MibTableColumn
bladeFWBuildMT = _BladeFWBuildMT_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 5, 1, 1, 3),
    _BladeFWBuildMT_Type()
)
bladeFWBuildMT.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeFWBuildMT.setStatus("mandatory")
_BladeFWBuildFWType_Type = OctetString
_BladeFWBuildFWType_Object = MibTableColumn
bladeFWBuildFWType = _BladeFWBuildFWType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 5, 1, 1, 4),
    _BladeFWBuildFWType_Type()
)
bladeFWBuildFWType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeFWBuildFWType.setStatus("mandatory")
_BladeFWBuildID_Type = OctetString
_BladeFWBuildID_Object = MibTableColumn
bladeFWBuildID = _BladeFWBuildID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 5, 1, 1, 5),
    _BladeFWBuildID_Type()
)
bladeFWBuildID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeFWBuildID.setStatus("mandatory")
_BladeFWBuildRev_Type = OctetString
_BladeFWBuildRev_Object = MibTableColumn
bladeFWBuildRev = _BladeFWBuildRev_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 5, 1, 1, 6),
    _BladeFWBuildRev_Type()
)
bladeFWBuildRev.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeFWBuildRev.setStatus("mandatory")


class _CreateBladeFWBuildIDs_Type(Integer32):
    """Custom type createBladeFWBuildIDs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_CreateBladeFWBuildIDs_Type.__name__ = "Integer32"
_CreateBladeFWBuildIDs_Object = MibScalar
createBladeFWBuildIDs = _CreateBladeFWBuildIDs_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 5, 2),
    _CreateBladeFWBuildIDs_Type()
)
createBladeFWBuildIDs.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    createBladeFWBuildIDs.setStatus("mandatory")
_AddBladeFWBuildID_ObjectIdentity = ObjectIdentity
addBladeFWBuildID = _AddBladeFWBuildID_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 5, 3)
)
_AddBladeMfg_Type = OctetString
_AddBladeMfg_Object = MibScalar
addBladeMfg = _AddBladeMfg_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 5, 3, 1),
    _AddBladeMfg_Type()
)
addBladeMfg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    addBladeMfg.setStatus("mandatory")
_AddBladeMt_Type = OctetString
_AddBladeMt_Object = MibScalar
addBladeMt = _AddBladeMt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 5, 3, 2),
    _AddBladeMt_Type()
)
addBladeMt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    addBladeMt.setStatus("mandatory")
_AddBladeFt_Type = OctetString
_AddBladeFt_Object = MibScalar
addBladeFt = _AddBladeFt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 5, 3, 3),
    _AddBladeFt_Type()
)
addBladeFt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    addBladeFt.setStatus("mandatory")
_AddBladeBuildID_Type = OctetString
_AddBladeBuildID_Object = MibScalar
addBladeBuildID = _AddBladeBuildID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 5, 3, 4),
    _AddBladeBuildID_Type()
)
addBladeBuildID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    addBladeBuildID.setStatus("mandatory")
_AddBladeBuildRev_Type = OctetString
_AddBladeBuildRev_Object = MibScalar
addBladeBuildRev = _AddBladeBuildRev_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 5, 3, 5),
    _AddBladeBuildRev_Type()
)
addBladeBuildRev.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    addBladeBuildRev.setStatus("mandatory")


class _ExeBladeAdding_Type(Integer32):
    """Custom type exeBladeAdding based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_ExeBladeAdding_Type.__name__ = "Integer32"
_ExeBladeAdding_Object = MibScalar
exeBladeAdding = _ExeBladeAdding_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 5, 3, 6),
    _ExeBladeAdding_Type()
)
exeBladeAdding.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    exeBladeAdding.setStatus("mandatory")
_RmBladeFWBuildID_Type = Integer32
_RmBladeFWBuildID_Object = MibScalar
rmBladeFWBuildID = _RmBladeFWBuildID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 5, 4),
    _RmBladeFWBuildID_Type()
)
rmBladeFWBuildID.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    rmBladeFWBuildID.setStatus("mandatory")


class _RmAllBladeFWBuildIDs_Type(Integer32):
    """Custom type rmAllBladeFWBuildIDs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_RmAllBladeFWBuildIDs_Type.__name__ = "Integer32"
_RmAllBladeFWBuildIDs_Object = MibScalar
rmAllBladeFWBuildIDs = _RmAllBladeFWBuildIDs_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 5, 5),
    _RmAllBladeFWBuildIDs_Type()
)
rmAllBladeFWBuildIDs.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    rmAllBladeFWBuildIDs.setStatus("mandatory")


class _BuildIDFileName_Type(OctetString):
    """Custom type buildIDFileName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 254),
    )


_BuildIDFileName_Type.__name__ = "OctetString"
_BuildIDFileName_Object = MibScalar
buildIDFileName = _BuildIDFileName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 5, 6),
    _BuildIDFileName_Type()
)
buildIDFileName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    buildIDFileName.setStatus("mandatory")


class _BuildIDURIName_Type(OctetString):
    """Custom type buildIDURIName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 254),
    )


_BuildIDURIName_Type.__name__ = "OctetString"
_BuildIDURIName_Object = MibScalar
buildIDURIName = _BuildIDURIName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 5, 7),
    _BuildIDURIName_Type()
)
buildIDURIName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    buildIDURIName.setStatus("mandatory")


class _BuildIDtftpIP_Type(OctetString):
    """Custom type buildIDtftpIP based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 63),
    )


_BuildIDtftpIP_Type.__name__ = "OctetString"
_BuildIDtftpIP_Object = MibScalar
buildIDtftpIP = _BuildIDtftpIP_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 5, 8),
    _BuildIDtftpIP_Type()
)
buildIDtftpIP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    buildIDtftpIP.setStatus("mandatory")


class _ImportBladeFWBuildIDs_Type(Integer32):
    """Custom type importBladeFWBuildIDs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_ImportBladeFWBuildIDs_Type.__name__ = "Integer32"
_ImportBladeFWBuildIDs_Object = MibScalar
importBladeFWBuildIDs = _ImportBladeFWBuildIDs_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 5, 9),
    _ImportBladeFWBuildIDs_Type()
)
importBladeFWBuildIDs.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    importBladeFWBuildIDs.setStatus("mandatory")


class _ExportBladeFWBuildIDs_Type(Integer32):
    """Custom type exportBladeFWBuildIDs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_ExportBladeFWBuildIDs_Type.__name__ = "Integer32"
_ExportBladeFWBuildIDs_Object = MibScalar
exportBladeFWBuildIDs = _ExportBladeFWBuildIDs_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 5, 10),
    _ExportBladeFWBuildIDs_Type()
)
exportBladeFWBuildIDs.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    exportBladeFWBuildIDs.setStatus("mandatory")
_StatusBladeFWBuildIDs_Type = OctetString
_StatusBladeFWBuildIDs_Object = MibScalar
statusBladeFWBuildIDs = _StatusBladeFWBuildIDs_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 5, 11),
    _StatusBladeFWBuildIDs_Type()
)
statusBladeFWBuildIDs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    statusBladeFWBuildIDs.setStatus("mandatory")
_SmHardwareVpd_ObjectIdentity = ObjectIdentity
smHardwareVpd = _SmHardwareVpd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6)
)
_SmHardwareVpdTable_Object = MibTable
smHardwareVpdTable = _SmHardwareVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1)
)
if mibBuilder.loadTexts:
    smHardwareVpdTable.setStatus("mandatory")
_SmHardwareVpdEntry_Object = MibTableRow
smHardwareVpdEntry = _SmHardwareVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1)
)
smHardwareVpdEntry.setIndexNames(
    (0, "BLADE-MIB", "smHardwareVpdIndex"),
)
if mibBuilder.loadTexts:
    smHardwareVpdEntry.setStatus("mandatory")
_SmHardwareVpdIndex_Type = Integer32
_SmHardwareVpdIndex_Object = MibTableColumn
smHardwareVpdIndex = _SmHardwareVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 1),
    _SmHardwareVpdIndex_Type()
)
smHardwareVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smHardwareVpdIndex.setStatus("mandatory")
_SmHardwareVpdBayNumber_Type = OctetString
_SmHardwareVpdBayNumber_Object = MibTableColumn
smHardwareVpdBayNumber = _SmHardwareVpdBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 2),
    _SmHardwareVpdBayNumber_Type()
)
smHardwareVpdBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smHardwareVpdBayNumber.setStatus("mandatory")
_SmHardwareVpdManufacturingId_Type = OctetString
_SmHardwareVpdManufacturingId_Object = MibTableColumn
smHardwareVpdManufacturingId = _SmHardwareVpdManufacturingId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 3),
    _SmHardwareVpdManufacturingId_Type()
)
smHardwareVpdManufacturingId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smHardwareVpdManufacturingId.setStatus("mandatory")
_SmHardwareVpdFruNumber_Type = OctetString
_SmHardwareVpdFruNumber_Object = MibTableColumn
smHardwareVpdFruNumber = _SmHardwareVpdFruNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 4),
    _SmHardwareVpdFruNumber_Type()
)
smHardwareVpdFruNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smHardwareVpdFruNumber.setStatus("mandatory")
_SmHardwareVpdHardwareRevision_Type = Integer32
_SmHardwareVpdHardwareRevision_Object = MibTableColumn
smHardwareVpdHardwareRevision = _SmHardwareVpdHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 5),
    _SmHardwareVpdHardwareRevision_Type()
)
smHardwareVpdHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smHardwareVpdHardwareRevision.setStatus("mandatory")
_SmHardwareVpdUuid_Type = OctetString
_SmHardwareVpdUuid_Object = MibTableColumn
smHardwareVpdUuid = _SmHardwareVpdUuid_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 8),
    _SmHardwareVpdUuid_Type()
)
smHardwareVpdUuid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smHardwareVpdUuid.setStatus("mandatory")
_SmHardwareVpdManufDate_Type = OctetString
_SmHardwareVpdManufDate_Object = MibTableColumn
smHardwareVpdManufDate = _SmHardwareVpdManufDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 9),
    _SmHardwareVpdManufDate_Type()
)
smHardwareVpdManufDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smHardwareVpdManufDate.setStatus("mandatory")
_SmHardwareVpdPartNumber_Type = OctetString
_SmHardwareVpdPartNumber_Object = MibTableColumn
smHardwareVpdPartNumber = _SmHardwareVpdPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 10),
    _SmHardwareVpdPartNumber_Type()
)
smHardwareVpdPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smHardwareVpdPartNumber.setStatus("mandatory")
_SmHardwareVpdFruSerial_Type = OctetString
_SmHardwareVpdFruSerial_Object = MibTableColumn
smHardwareVpdFruSerial = _SmHardwareVpdFruSerial_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 11),
    _SmHardwareVpdFruSerial_Type()
)
smHardwareVpdFruSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smHardwareVpdFruSerial.setStatus("mandatory")
_SmHardwareVpdManufacturingIDNumber_Type = OctetString
_SmHardwareVpdManufacturingIDNumber_Object = MibTableColumn
smHardwareVpdManufacturingIDNumber = _SmHardwareVpdManufacturingIDNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 12),
    _SmHardwareVpdManufacturingIDNumber_Type()
)
smHardwareVpdManufacturingIDNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smHardwareVpdManufacturingIDNumber.setStatus("mandatory")
_SmHardwareVpdProductId_Type = OctetString
_SmHardwareVpdProductId_Object = MibTableColumn
smHardwareVpdProductId = _SmHardwareVpdProductId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 13),
    _SmHardwareVpdProductId_Type()
)
smHardwareVpdProductId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smHardwareVpdProductId.setStatus("mandatory")
_SmHardwareVpdSubManufacturerId_Type = OctetString
_SmHardwareVpdSubManufacturerId_Object = MibTableColumn
smHardwareVpdSubManufacturerId = _SmHardwareVpdSubManufacturerId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 14),
    _SmHardwareVpdSubManufacturerId_Type()
)
smHardwareVpdSubManufacturerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smHardwareVpdSubManufacturerId.setStatus("mandatory")
_SmHardwareVpdClei_Type = OctetString
_SmHardwareVpdClei_Object = MibTableColumn
smHardwareVpdClei = _SmHardwareVpdClei_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 15),
    _SmHardwareVpdClei_Type()
)
smHardwareVpdClei.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smHardwareVpdClei.setStatus("mandatory")
_SmHardwareVpdWwnGuid_Type = OctetString
_SmHardwareVpdWwnGuid_Object = MibTableColumn
smHardwareVpdWwnGuid = _SmHardwareVpdWwnGuid_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 16),
    _SmHardwareVpdWwnGuid_Type()
)
smHardwareVpdWwnGuid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smHardwareVpdWwnGuid.setStatus("mandatory")
_SmHardwareVpdWwnGuidType_Type = OctetString
_SmHardwareVpdWwnGuidType_Object = MibTableColumn
smHardwareVpdWwnGuidType = _SmHardwareVpdWwnGuidType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 17),
    _SmHardwareVpdWwnGuidType_Type()
)
smHardwareVpdWwnGuidType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smHardwareVpdWwnGuidType.setStatus("mandatory")
_SmHardwareVpdWidth_Type = Integer32
_SmHardwareVpdWidth_Object = MibTableColumn
smHardwareVpdWidth = _SmHardwareVpdWidth_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 18),
    _SmHardwareVpdWidth_Type()
)
smHardwareVpdWidth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smHardwareVpdWidth.setStatus("mandatory")
_SmHardwareVpdHardwareRevisionString_Type = OctetString
_SmHardwareVpdHardwareRevisionString_Object = MibTableColumn
smHardwareVpdHardwareRevisionString = _SmHardwareVpdHardwareRevisionString_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 20),
    _SmHardwareVpdHardwareRevisionString_Type()
)
smHardwareVpdHardwareRevisionString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smHardwareVpdHardwareRevisionString.setStatus("mandatory")
_SmInpHardwareVpdTable_Object = MibTable
smInpHardwareVpdTable = _SmInpHardwareVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2)
)
if mibBuilder.loadTexts:
    smInpHardwareVpdTable.setStatus("mandatory")
_SmInpHardwareVpdEntry_Object = MibTableRow
smInpHardwareVpdEntry = _SmInpHardwareVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2, 1)
)
smInpHardwareVpdEntry.setIndexNames(
    (0, "BLADE-MIB", "smInpHardwareVpdIndex"),
)
if mibBuilder.loadTexts:
    smInpHardwareVpdEntry.setStatus("mandatory")
_SmInpHardwareVpdIndex_Type = Integer32
_SmInpHardwareVpdIndex_Object = MibTableColumn
smInpHardwareVpdIndex = _SmInpHardwareVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2, 1, 1),
    _SmInpHardwareVpdIndex_Type()
)
smInpHardwareVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smInpHardwareVpdIndex.setStatus("mandatory")
_SmInpHardwareVpdBayNumber_Type = OctetString
_SmInpHardwareVpdBayNumber_Object = MibTableColumn
smInpHardwareVpdBayNumber = _SmInpHardwareVpdBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2, 1, 2),
    _SmInpHardwareVpdBayNumber_Type()
)
smInpHardwareVpdBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smInpHardwareVpdBayNumber.setStatus("mandatory")
_SmInpHardwareVpdManufacturingId_Type = OctetString
_SmInpHardwareVpdManufacturingId_Object = MibTableColumn
smInpHardwareVpdManufacturingId = _SmInpHardwareVpdManufacturingId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2, 1, 3),
    _SmInpHardwareVpdManufacturingId_Type()
)
smInpHardwareVpdManufacturingId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smInpHardwareVpdManufacturingId.setStatus("mandatory")
_SmInpHardwareVpdFruNumber_Type = OctetString
_SmInpHardwareVpdFruNumber_Object = MibTableColumn
smInpHardwareVpdFruNumber = _SmInpHardwareVpdFruNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2, 1, 4),
    _SmInpHardwareVpdFruNumber_Type()
)
smInpHardwareVpdFruNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smInpHardwareVpdFruNumber.setStatus("mandatory")
_SmInpHardwareVpdHardwareRevision_Type = Integer32
_SmInpHardwareVpdHardwareRevision_Object = MibTableColumn
smInpHardwareVpdHardwareRevision = _SmInpHardwareVpdHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2, 1, 5),
    _SmInpHardwareVpdHardwareRevision_Type()
)
smInpHardwareVpdHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smInpHardwareVpdHardwareRevision.setStatus("mandatory")
_SmInpHardwareVpdUuid_Type = OctetString
_SmInpHardwareVpdUuid_Object = MibTableColumn
smInpHardwareVpdUuid = _SmInpHardwareVpdUuid_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2, 1, 8),
    _SmInpHardwareVpdUuid_Type()
)
smInpHardwareVpdUuid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smInpHardwareVpdUuid.setStatus("mandatory")
_SmInpHardwareVpdManufDate_Type = OctetString
_SmInpHardwareVpdManufDate_Object = MibTableColumn
smInpHardwareVpdManufDate = _SmInpHardwareVpdManufDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2, 1, 9),
    _SmInpHardwareVpdManufDate_Type()
)
smInpHardwareVpdManufDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smInpHardwareVpdManufDate.setStatus("mandatory")
_SmInpHardwareVpdPartNumber_Type = OctetString
_SmInpHardwareVpdPartNumber_Object = MibTableColumn
smInpHardwareVpdPartNumber = _SmInpHardwareVpdPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2, 1, 10),
    _SmInpHardwareVpdPartNumber_Type()
)
smInpHardwareVpdPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smInpHardwareVpdPartNumber.setStatus("mandatory")
_SmInpHardwareVpdFruSerial_Type = OctetString
_SmInpHardwareVpdFruSerial_Object = MibTableColumn
smInpHardwareVpdFruSerial = _SmInpHardwareVpdFruSerial_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2, 1, 11),
    _SmInpHardwareVpdFruSerial_Type()
)
smInpHardwareVpdFruSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smInpHardwareVpdFruSerial.setStatus("mandatory")
_SmInpHardwareVpdManufacturingIDNumber_Type = OctetString
_SmInpHardwareVpdManufacturingIDNumber_Object = MibTableColumn
smInpHardwareVpdManufacturingIDNumber = _SmInpHardwareVpdManufacturingIDNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2, 1, 12),
    _SmInpHardwareVpdManufacturingIDNumber_Type()
)
smInpHardwareVpdManufacturingIDNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smInpHardwareVpdManufacturingIDNumber.setStatus("mandatory")
_SmInpHardwareVpdProductId_Type = OctetString
_SmInpHardwareVpdProductId_Object = MibTableColumn
smInpHardwareVpdProductId = _SmInpHardwareVpdProductId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2, 1, 13),
    _SmInpHardwareVpdProductId_Type()
)
smInpHardwareVpdProductId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smInpHardwareVpdProductId.setStatus("mandatory")
_SmInpHardwareVpdSubManufacturerId_Type = OctetString
_SmInpHardwareVpdSubManufacturerId_Object = MibTableColumn
smInpHardwareVpdSubManufacturerId = _SmInpHardwareVpdSubManufacturerId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2, 1, 14),
    _SmInpHardwareVpdSubManufacturerId_Type()
)
smInpHardwareVpdSubManufacturerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smInpHardwareVpdSubManufacturerId.setStatus("mandatory")
_SmInpHardwareVpdClei_Type = OctetString
_SmInpHardwareVpdClei_Object = MibTableColumn
smInpHardwareVpdClei = _SmInpHardwareVpdClei_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2, 1, 15),
    _SmInpHardwareVpdClei_Type()
)
smInpHardwareVpdClei.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smInpHardwareVpdClei.setStatus("mandatory")
_SmInpHardwareVpdWwnGuid_Type = OctetString
_SmInpHardwareVpdWwnGuid_Object = MibTableColumn
smInpHardwareVpdWwnGuid = _SmInpHardwareVpdWwnGuid_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2, 1, 16),
    _SmInpHardwareVpdWwnGuid_Type()
)
smInpHardwareVpdWwnGuid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smInpHardwareVpdWwnGuid.setStatus("mandatory")
_SmInpHardwareVpdWwnGuidType_Type = OctetString
_SmInpHardwareVpdWwnGuidType_Object = MibTableColumn
smInpHardwareVpdWwnGuidType = _SmInpHardwareVpdWwnGuidType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2, 1, 17),
    _SmInpHardwareVpdWwnGuidType_Type()
)
smInpHardwareVpdWwnGuidType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smInpHardwareVpdWwnGuidType.setStatus("mandatory")
_SmInpHardwareVpdWidth_Type = Integer32
_SmInpHardwareVpdWidth_Object = MibTableColumn
smInpHardwareVpdWidth = _SmInpHardwareVpdWidth_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2, 1, 18),
    _SmInpHardwareVpdWidth_Type()
)
smInpHardwareVpdWidth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smInpHardwareVpdWidth.setStatus("mandatory")
_SmInpHardwareVpdName_Type = OctetString
_SmInpHardwareVpdName_Object = MibTableColumn
smInpHardwareVpdName = _SmInpHardwareVpdName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2, 1, 19),
    _SmInpHardwareVpdName_Type()
)
smInpHardwareVpdName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smInpHardwareVpdName.setStatus("mandatory")
_SmInpHardwareVpdHardwareRevisionString_Type = OctetString
_SmInpHardwareVpdHardwareRevisionString_Object = MibTableColumn
smInpHardwareVpdHardwareRevisionString = _SmInpHardwareVpdHardwareRevisionString_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 2, 1, 20),
    _SmInpHardwareVpdHardwareRevisionString_Type()
)
smInpHardwareVpdHardwareRevisionString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smInpHardwareVpdHardwareRevisionString.setStatus("mandatory")
_SmFirmwareVpd_ObjectIdentity = ObjectIdentity
smFirmwareVpd = _SmFirmwareVpd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7)
)
_SmMainAppVpdTable_Object = MibTable
smMainAppVpdTable = _SmMainAppVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1)
)
if mibBuilder.loadTexts:
    smMainAppVpdTable.setStatus("mandatory")
_SmMainAppVpdEntry_Object = MibTableRow
smMainAppVpdEntry = _SmMainAppVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1)
)
smMainAppVpdEntry.setIndexNames(
    (0, "BLADE-MIB", "smMainAppVpdIndex"),
)
if mibBuilder.loadTexts:
    smMainAppVpdEntry.setStatus("mandatory")
_SmMainAppVpdIndex_Type = Integer32
_SmMainAppVpdIndex_Object = MibTableColumn
smMainAppVpdIndex = _SmMainAppVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 1),
    _SmMainAppVpdIndex_Type()
)
smMainAppVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smMainAppVpdIndex.setStatus("mandatory")


class _SmMainAppVpdId_Type(Integer32):
    """Custom type smMainAppVpdId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("module1", 1),
          ("module2", 2),
          ("module3", 3),
          ("module4", 4),
          ("module5", 5),
          ("module6", 6),
          ("module7", 7),
          ("module8", 8),
          ("module9", 9),
          ("module10", 10))
    )


_SmMainAppVpdId_Type.__name__ = "Integer32"
_SmMainAppVpdId_Object = MibTableColumn
smMainAppVpdId = _SmMainAppVpdId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 2),
    _SmMainAppVpdId_Type()
)
smMainAppVpdId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smMainAppVpdId.setStatus("mandatory")


class _SmMainAppVpdExists_Type(Integer32):
    """Custom type smMainAppVpdExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_SmMainAppVpdExists_Type.__name__ = "Integer32"
_SmMainAppVpdExists_Object = MibTableColumn
smMainAppVpdExists = _SmMainAppVpdExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 3),
    _SmMainAppVpdExists_Type()
)
smMainAppVpdExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smMainAppVpdExists.setStatus("mandatory")


class _SmMainAppVpdSwitchType_Type(Integer32):
    """Custom type smMainAppVpdSwitchType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              20,
              30,
              40)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("ethernet", 1),
          ("fibre", 2),
          ("opm", 3),
          ("serialCM", 4),
          ("copperPassThrough", 5),
          ("infiniband", 6),
          ("highSpeed", 20),
          ("passThrough", 30),
          ("sas", 40))
    )


_SmMainAppVpdSwitchType_Type.__name__ = "Integer32"
_SmMainAppVpdSwitchType_Object = MibTableColumn
smMainAppVpdSwitchType = _SmMainAppVpdSwitchType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 4),
    _SmMainAppVpdSwitchType_Type()
)
smMainAppVpdSwitchType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smMainAppVpdSwitchType.setStatus("mandatory")
_SmMainApp1VpdBuildId_Type = OctetString
_SmMainApp1VpdBuildId_Object = MibTableColumn
smMainApp1VpdBuildId = _SmMainApp1VpdBuildId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 5),
    _SmMainApp1VpdBuildId_Type()
)
smMainApp1VpdBuildId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smMainApp1VpdBuildId.setStatus("mandatory")
_SmMainApp1VpdBuildDate_Type = OctetString
_SmMainApp1VpdBuildDate_Object = MibTableColumn
smMainApp1VpdBuildDate = _SmMainApp1VpdBuildDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 6),
    _SmMainApp1VpdBuildDate_Type()
)
smMainApp1VpdBuildDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smMainApp1VpdBuildDate.setStatus("mandatory")
_SmMainApp1VpdRevisionNumber_Type = OctetString
_SmMainApp1VpdRevisionNumber_Object = MibTableColumn
smMainApp1VpdRevisionNumber = _SmMainApp1VpdRevisionNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 7),
    _SmMainApp1VpdRevisionNumber_Type()
)
smMainApp1VpdRevisionNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smMainApp1VpdRevisionNumber.setStatus("mandatory")
_SmMainApp2VpdBuildId_Type = OctetString
_SmMainApp2VpdBuildId_Object = MibTableColumn
smMainApp2VpdBuildId = _SmMainApp2VpdBuildId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 8),
    _SmMainApp2VpdBuildId_Type()
)
smMainApp2VpdBuildId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smMainApp2VpdBuildId.setStatus("mandatory")
_SmMainApp2VpdBuildDate_Type = OctetString
_SmMainApp2VpdBuildDate_Object = MibTableColumn
smMainApp2VpdBuildDate = _SmMainApp2VpdBuildDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 9),
    _SmMainApp2VpdBuildDate_Type()
)
smMainApp2VpdBuildDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smMainApp2VpdBuildDate.setStatus("mandatory")
_SmMainApp2VpdRevisionNumber_Type = OctetString
_SmMainApp2VpdRevisionNumber_Object = MibTableColumn
smMainApp2VpdRevisionNumber = _SmMainApp2VpdRevisionNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 10),
    _SmMainApp2VpdRevisionNumber_Type()
)
smMainApp2VpdRevisionNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smMainApp2VpdRevisionNumber.setStatus("mandatory")
_SmMainApp3VpdBuildId_Type = OctetString
_SmMainApp3VpdBuildId_Object = MibTableColumn
smMainApp3VpdBuildId = _SmMainApp3VpdBuildId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 11),
    _SmMainApp3VpdBuildId_Type()
)
smMainApp3VpdBuildId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smMainApp3VpdBuildId.setStatus("mandatory")
_SmMainApp3VpdBuildDate_Type = OctetString
_SmMainApp3VpdBuildDate_Object = MibTableColumn
smMainApp3VpdBuildDate = _SmMainApp3VpdBuildDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 12),
    _SmMainApp3VpdBuildDate_Type()
)
smMainApp3VpdBuildDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smMainApp3VpdBuildDate.setStatus("mandatory")
_SmMainApp3VpdRevisionNumber_Type = OctetString
_SmMainApp3VpdRevisionNumber_Object = MibTableColumn
smMainApp3VpdRevisionNumber = _SmMainApp3VpdRevisionNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 13),
    _SmMainApp3VpdRevisionNumber_Type()
)
smMainApp3VpdRevisionNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smMainApp3VpdRevisionNumber.setStatus("mandatory")


class _SmMainAppVpdSwitchSubType_Type(Integer32):
    """Custom type smMainAppVpdSwitchSubType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("ethernet", 1),
          ("fibre", 2),
          ("infiniband", 6),
          ("sas", 7),
          ("raidsas", 8),
          ("icpm", 9))
    )


_SmMainAppVpdSwitchSubType_Type.__name__ = "Integer32"
_SmMainAppVpdSwitchSubType_Object = MibTableColumn
smMainAppVpdSwitchSubType = _SmMainAppVpdSwitchSubType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 20),
    _SmMainAppVpdSwitchSubType_Type()
)
smMainAppVpdSwitchSubType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smMainAppVpdSwitchSubType.setStatus("mandatory")
_SmBootRomVpdTable_Object = MibTable
smBootRomVpdTable = _SmBootRomVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2)
)
if mibBuilder.loadTexts:
    smBootRomVpdTable.setStatus("mandatory")
_SmBootRomVpdEntry_Object = MibTableRow
smBootRomVpdEntry = _SmBootRomVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1)
)
smBootRomVpdEntry.setIndexNames(
    (0, "BLADE-MIB", "smBootRomVpdIndex"),
)
if mibBuilder.loadTexts:
    smBootRomVpdEntry.setStatus("mandatory")
_SmBootRomVpdIndex_Type = Integer32
_SmBootRomVpdIndex_Object = MibTableColumn
smBootRomVpdIndex = _SmBootRomVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 1),
    _SmBootRomVpdIndex_Type()
)
smBootRomVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smBootRomVpdIndex.setStatus("mandatory")


class _SmBootRomVpdId_Type(Integer32):
    """Custom type smBootRomVpdId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("module1", 1),
          ("module2", 2),
          ("module3", 3),
          ("module4", 4),
          ("module5", 5),
          ("module6", 6),
          ("module7", 7),
          ("module8", 8),
          ("module9", 9),
          ("module10", 10))
    )


_SmBootRomVpdId_Type.__name__ = "Integer32"
_SmBootRomVpdId_Object = MibTableColumn
smBootRomVpdId = _SmBootRomVpdId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 2),
    _SmBootRomVpdId_Type()
)
smBootRomVpdId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smBootRomVpdId.setStatus("mandatory")


class _SmBootRomVpdExists_Type(Integer32):
    """Custom type smBootRomVpdExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_SmBootRomVpdExists_Type.__name__ = "Integer32"
_SmBootRomVpdExists_Object = MibTableColumn
smBootRomVpdExists = _SmBootRomVpdExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 3),
    _SmBootRomVpdExists_Type()
)
smBootRomVpdExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smBootRomVpdExists.setStatus("mandatory")


class _SmBootRomVpdSwitchType_Type(Integer32):
    """Custom type smBootRomVpdSwitchType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              20,
              30,
              40)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("ethernet", 1),
          ("fibre", 2),
          ("opm", 3),
          ("serialCM", 4),
          ("copperPassThrough", 5),
          ("infiniband", 6),
          ("highSpeed", 20),
          ("passThrough", 30),
          ("sas", 40))
    )


_SmBootRomVpdSwitchType_Type.__name__ = "Integer32"
_SmBootRomVpdSwitchType_Object = MibTableColumn
smBootRomVpdSwitchType = _SmBootRomVpdSwitchType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 4),
    _SmBootRomVpdSwitchType_Type()
)
smBootRomVpdSwitchType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smBootRomVpdSwitchType.setStatus("mandatory")
_SmBootRomVpdBuildId_Type = OctetString
_SmBootRomVpdBuildId_Object = MibTableColumn
smBootRomVpdBuildId = _SmBootRomVpdBuildId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 5),
    _SmBootRomVpdBuildId_Type()
)
smBootRomVpdBuildId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smBootRomVpdBuildId.setStatus("mandatory")
_SmBootRomVpdBuildDate_Type = OctetString
_SmBootRomVpdBuildDate_Object = MibTableColumn
smBootRomVpdBuildDate = _SmBootRomVpdBuildDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 6),
    _SmBootRomVpdBuildDate_Type()
)
smBootRomVpdBuildDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smBootRomVpdBuildDate.setStatus("mandatory")
_SmBootRomVpdRevisionNumber_Type = OctetString
_SmBootRomVpdRevisionNumber_Object = MibTableColumn
smBootRomVpdRevisionNumber = _SmBootRomVpdRevisionNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 7),
    _SmBootRomVpdRevisionNumber_Type()
)
smBootRomVpdRevisionNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smBootRomVpdRevisionNumber.setStatus("mandatory")


class _SmBootRomVpdSwitchSubType_Type(Integer32):
    """Custom type smBootRomVpdSwitchSubType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("ethernet", 1),
          ("fibre", 2),
          ("infiniband", 6),
          ("sas", 7),
          ("raidsas", 8),
          ("icpm", 9))
    )


_SmBootRomVpdSwitchSubType_Type.__name__ = "Integer32"
_SmBootRomVpdSwitchSubType_Object = MibTableColumn
smBootRomVpdSwitchSubType = _SmBootRomVpdSwitchSubType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 8),
    _SmBootRomVpdSwitchSubType_Type()
)
smBootRomVpdSwitchSubType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smBootRomVpdSwitchSubType.setStatus("mandatory")
_PmHardwareVpd_ObjectIdentity = ObjectIdentity
pmHardwareVpd = _PmHardwareVpd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8)
)
_PmHardwareVpdTable_Object = MibTable
pmHardwareVpdTable = _PmHardwareVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1)
)
if mibBuilder.loadTexts:
    pmHardwareVpdTable.setStatus("mandatory")
_PmHardwareVpdEntry_Object = MibTableRow
pmHardwareVpdEntry = _PmHardwareVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1)
)
pmHardwareVpdEntry.setIndexNames(
    (0, "BLADE-MIB", "pmHardwareVpdIndex"),
)
if mibBuilder.loadTexts:
    pmHardwareVpdEntry.setStatus("mandatory")
_PmHardwareVpdIndex_Type = Integer32
_PmHardwareVpdIndex_Object = MibTableColumn
pmHardwareVpdIndex = _PmHardwareVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 1),
    _PmHardwareVpdIndex_Type()
)
pmHardwareVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmHardwareVpdIndex.setStatus("mandatory")
_PmHardwareVpdBayNumber_Type = OctetString
_PmHardwareVpdBayNumber_Object = MibTableColumn
pmHardwareVpdBayNumber = _PmHardwareVpdBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 2),
    _PmHardwareVpdBayNumber_Type()
)
pmHardwareVpdBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmHardwareVpdBayNumber.setStatus("mandatory")
_PmHardwareVpdManufacturingId_Type = OctetString
_PmHardwareVpdManufacturingId_Object = MibTableColumn
pmHardwareVpdManufacturingId = _PmHardwareVpdManufacturingId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 3),
    _PmHardwareVpdManufacturingId_Type()
)
pmHardwareVpdManufacturingId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmHardwareVpdManufacturingId.setStatus("mandatory")
_PmHardwareVpdFruNumber_Type = OctetString
_PmHardwareVpdFruNumber_Object = MibTableColumn
pmHardwareVpdFruNumber = _PmHardwareVpdFruNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 4),
    _PmHardwareVpdFruNumber_Type()
)
pmHardwareVpdFruNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmHardwareVpdFruNumber.setStatus("mandatory")
_PmHardwareVpdHardwareRevision_Type = Integer32
_PmHardwareVpdHardwareRevision_Object = MibTableColumn
pmHardwareVpdHardwareRevision = _PmHardwareVpdHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 5),
    _PmHardwareVpdHardwareRevision_Type()
)
pmHardwareVpdHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmHardwareVpdHardwareRevision.setStatus("mandatory")
_PmHardwareVpdUuid_Type = OctetString
_PmHardwareVpdUuid_Object = MibTableColumn
pmHardwareVpdUuid = _PmHardwareVpdUuid_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 8),
    _PmHardwareVpdUuid_Type()
)
pmHardwareVpdUuid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmHardwareVpdUuid.setStatus("mandatory")
_PmHardwareVpdManufDate_Type = OctetString
_PmHardwareVpdManufDate_Object = MibTableColumn
pmHardwareVpdManufDate = _PmHardwareVpdManufDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 9),
    _PmHardwareVpdManufDate_Type()
)
pmHardwareVpdManufDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmHardwareVpdManufDate.setStatus("mandatory")
_PmHardwareVpdPartNumber_Type = OctetString
_PmHardwareVpdPartNumber_Object = MibTableColumn
pmHardwareVpdPartNumber = _PmHardwareVpdPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 10),
    _PmHardwareVpdPartNumber_Type()
)
pmHardwareVpdPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmHardwareVpdPartNumber.setStatus("mandatory")
_PmHardwareVpdFruSerial_Type = OctetString
_PmHardwareVpdFruSerial_Object = MibTableColumn
pmHardwareVpdFruSerial = _PmHardwareVpdFruSerial_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 11),
    _PmHardwareVpdFruSerial_Type()
)
pmHardwareVpdFruSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmHardwareVpdFruSerial.setStatus("mandatory")
_PmHardwareVpdManufacturingIDNumber_Type = OctetString
_PmHardwareVpdManufacturingIDNumber_Object = MibTableColumn
pmHardwareVpdManufacturingIDNumber = _PmHardwareVpdManufacturingIDNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 12),
    _PmHardwareVpdManufacturingIDNumber_Type()
)
pmHardwareVpdManufacturingIDNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmHardwareVpdManufacturingIDNumber.setStatus("mandatory")
_PmHardwareVpdProductId_Type = OctetString
_PmHardwareVpdProductId_Object = MibTableColumn
pmHardwareVpdProductId = _PmHardwareVpdProductId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 13),
    _PmHardwareVpdProductId_Type()
)
pmHardwareVpdProductId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmHardwareVpdProductId.setStatus("mandatory")
_PmHardwareVpdSubManufacturerId_Type = OctetString
_PmHardwareVpdSubManufacturerId_Object = MibTableColumn
pmHardwareVpdSubManufacturerId = _PmHardwareVpdSubManufacturerId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 14),
    _PmHardwareVpdSubManufacturerId_Type()
)
pmHardwareVpdSubManufacturerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmHardwareVpdSubManufacturerId.setStatus("mandatory")
_PmHardwareVpdClei_Type = OctetString
_PmHardwareVpdClei_Object = MibTableColumn
pmHardwareVpdClei = _PmHardwareVpdClei_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 15),
    _PmHardwareVpdClei_Type()
)
pmHardwareVpdClei.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmHardwareVpdClei.setStatus("mandatory")
_PmHardwareVpdHardwareRevisionString_Type = OctetString
_PmHardwareVpdHardwareRevisionString_Object = MibTableColumn
pmHardwareVpdHardwareRevisionString = _PmHardwareVpdHardwareRevisionString_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 16),
    _PmHardwareVpdHardwareRevisionString_Type()
)
pmHardwareVpdHardwareRevisionString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmHardwareVpdHardwareRevisionString.setStatus("mandatory")
_MtHardwareVpd_ObjectIdentity = ObjectIdentity
mtHardwareVpd = _MtHardwareVpd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9)
)
_MtHardwareVpdManufacturingId_Type = OctetString
_MtHardwareVpdManufacturingId_Object = MibScalar
mtHardwareVpdManufacturingId = _MtHardwareVpdManufacturingId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 3),
    _MtHardwareVpdManufacturingId_Type()
)
mtHardwareVpdManufacturingId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtHardwareVpdManufacturingId.setStatus("mandatory")
_MtHardwareVpdFruNumber_Type = OctetString
_MtHardwareVpdFruNumber_Object = MibScalar
mtHardwareVpdFruNumber = _MtHardwareVpdFruNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 4),
    _MtHardwareVpdFruNumber_Type()
)
mtHardwareVpdFruNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtHardwareVpdFruNumber.setStatus("mandatory")
_MtHardwareVpdHardwareRevision_Type = Integer32
_MtHardwareVpdHardwareRevision_Object = MibScalar
mtHardwareVpdHardwareRevision = _MtHardwareVpdHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 5),
    _MtHardwareVpdHardwareRevision_Type()
)
mtHardwareVpdHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtHardwareVpdHardwareRevision.setStatus("mandatory")
_MtHardwareVpdUuid_Type = OctetString
_MtHardwareVpdUuid_Object = MibScalar
mtHardwareVpdUuid = _MtHardwareVpdUuid_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 8),
    _MtHardwareVpdUuid_Type()
)
mtHardwareVpdUuid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtHardwareVpdUuid.setStatus("mandatory")
_MtHardwareVpdManufacturingIDNumber_Type = OctetString
_MtHardwareVpdManufacturingIDNumber_Object = MibScalar
mtHardwareVpdManufacturingIDNumber = _MtHardwareVpdManufacturingIDNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 9),
    _MtHardwareVpdManufacturingIDNumber_Type()
)
mtHardwareVpdManufacturingIDNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtHardwareVpdManufacturingIDNumber.setStatus("mandatory")
_MtHardwareVpdProductId_Type = OctetString
_MtHardwareVpdProductId_Object = MibScalar
mtHardwareVpdProductId = _MtHardwareVpdProductId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 10),
    _MtHardwareVpdProductId_Type()
)
mtHardwareVpdProductId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtHardwareVpdProductId.setStatus("mandatory")
_MtHardwareVpdSubManufacturerId_Type = OctetString
_MtHardwareVpdSubManufacturerId_Object = MibScalar
mtHardwareVpdSubManufacturerId = _MtHardwareVpdSubManufacturerId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 11),
    _MtHardwareVpdSubManufacturerId_Type()
)
mtHardwareVpdSubManufacturerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtHardwareVpdSubManufacturerId.setStatus("mandatory")
_MtHardwareVpdClei_Type = OctetString
_MtHardwareVpdClei_Object = MibScalar
mtHardwareVpdClei = _MtHardwareVpdClei_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 12),
    _MtHardwareVpdClei_Type()
)
mtHardwareVpdClei.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtHardwareVpdClei.setStatus("mandatory")
_MtHardwareVpdCF1Capacity_Type = OctetString
_MtHardwareVpdCF1Capacity_Object = MibScalar
mtHardwareVpdCF1Capacity = _MtHardwareVpdCF1Capacity_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 13),
    _MtHardwareVpdCF1Capacity_Type()
)
mtHardwareVpdCF1Capacity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtHardwareVpdCF1Capacity.setStatus("mandatory")
_MtHardwareVpdCF2Capacity_Type = OctetString
_MtHardwareVpdCF2Capacity_Object = MibScalar
mtHardwareVpdCF2Capacity = _MtHardwareVpdCF2Capacity_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 14),
    _MtHardwareVpdCF2Capacity_Type()
)
mtHardwareVpdCF2Capacity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtHardwareVpdCF2Capacity.setStatus("mandatory")


class _MtHardwareVpdBBU1_Type(Integer32):
    """Custom type mtHardwareVpdBBU1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_MtHardwareVpdBBU1_Type.__name__ = "Integer32"
_MtHardwareVpdBBU1_Object = MibScalar
mtHardwareVpdBBU1 = _MtHardwareVpdBBU1_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 15),
    _MtHardwareVpdBBU1_Type()
)
mtHardwareVpdBBU1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtHardwareVpdBBU1.setStatus("mandatory")


class _MtHardwareVpdBBU2_Type(Integer32):
    """Custom type mtHardwareVpdBBU2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_MtHardwareVpdBBU2_Type.__name__ = "Integer32"
_MtHardwareVpdBBU2_Object = MibScalar
mtHardwareVpdBBU2 = _MtHardwareVpdBBU2_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 16),
    _MtHardwareVpdBBU2_Type()
)
mtHardwareVpdBBU2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtHardwareVpdBBU2.setStatus("mandatory")
_MtHardwareVpdHardwareRevisionString_Type = OctetString
_MtHardwareVpdHardwareRevisionString_Object = MibScalar
mtHardwareVpdHardwareRevisionString = _MtHardwareVpdHardwareRevisionString_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 17),
    _MtHardwareVpdHardwareRevisionString_Type()
)
mtHardwareVpdHardwareRevisionString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtHardwareVpdHardwareRevisionString.setStatus("mandatory")
_MtHardwareVpdManufDate_Type = OctetString
_MtHardwareVpdManufDate_Object = MibScalar
mtHardwareVpdManufDate = _MtHardwareVpdManufDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 18),
    _MtHardwareVpdManufDate_Type()
)
mtHardwareVpdManufDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtHardwareVpdManufDate.setStatus("mandatory")
_MtHardwareVpdPartNumber_Type = OctetString
_MtHardwareVpdPartNumber_Object = MibScalar
mtHardwareVpdPartNumber = _MtHardwareVpdPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 19),
    _MtHardwareVpdPartNumber_Type()
)
mtHardwareVpdPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtHardwareVpdPartNumber.setStatus("mandatory")
_MtHardwareVpdFruSerial_Type = OctetString
_MtHardwareVpdFruSerial_Object = MibScalar
mtHardwareVpdFruSerial = _MtHardwareVpdFruSerial_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 20),
    _MtHardwareVpdFruSerial_Type()
)
mtHardwareVpdFruSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtHardwareVpdFruSerial.setStatus("mandatory")
_Mt2HardwareVpd_ObjectIdentity = ObjectIdentity
mt2HardwareVpd = _Mt2HardwareVpd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 10)
)
_Mt2HardwareVpdManufacturingId_Type = OctetString
_Mt2HardwareVpdManufacturingId_Object = MibScalar
mt2HardwareVpdManufacturingId = _Mt2HardwareVpdManufacturingId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 10, 3),
    _Mt2HardwareVpdManufacturingId_Type()
)
mt2HardwareVpdManufacturingId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mt2HardwareVpdManufacturingId.setStatus("mandatory")
_Mt2HardwareVpdFruNumber_Type = OctetString
_Mt2HardwareVpdFruNumber_Object = MibScalar
mt2HardwareVpdFruNumber = _Mt2HardwareVpdFruNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 10, 4),
    _Mt2HardwareVpdFruNumber_Type()
)
mt2HardwareVpdFruNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mt2HardwareVpdFruNumber.setStatus("mandatory")
_Mt2HardwareVpdHardwareRevision_Type = Integer32
_Mt2HardwareVpdHardwareRevision_Object = MibScalar
mt2HardwareVpdHardwareRevision = _Mt2HardwareVpdHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 10, 5),
    _Mt2HardwareVpdHardwareRevision_Type()
)
mt2HardwareVpdHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mt2HardwareVpdHardwareRevision.setStatus("mandatory")
_Mt2HardwareVpdUuid_Type = OctetString
_Mt2HardwareVpdUuid_Object = MibScalar
mt2HardwareVpdUuid = _Mt2HardwareVpdUuid_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 10, 8),
    _Mt2HardwareVpdUuid_Type()
)
mt2HardwareVpdUuid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mt2HardwareVpdUuid.setStatus("mandatory")
_Mt2HardwareVpdManufacturingIDNumber_Type = OctetString
_Mt2HardwareVpdManufacturingIDNumber_Object = MibScalar
mt2HardwareVpdManufacturingIDNumber = _Mt2HardwareVpdManufacturingIDNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 10, 9),
    _Mt2HardwareVpdManufacturingIDNumber_Type()
)
mt2HardwareVpdManufacturingIDNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mt2HardwareVpdManufacturingIDNumber.setStatus("mandatory")
_Mt2HardwareVpdProductId_Type = OctetString
_Mt2HardwareVpdProductId_Object = MibScalar
mt2HardwareVpdProductId = _Mt2HardwareVpdProductId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 10, 10),
    _Mt2HardwareVpdProductId_Type()
)
mt2HardwareVpdProductId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mt2HardwareVpdProductId.setStatus("mandatory")
_Mt2HardwareVpdSubManufacturerId_Type = OctetString
_Mt2HardwareVpdSubManufacturerId_Object = MibScalar
mt2HardwareVpdSubManufacturerId = _Mt2HardwareVpdSubManufacturerId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 10, 11),
    _Mt2HardwareVpdSubManufacturerId_Type()
)
mt2HardwareVpdSubManufacturerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mt2HardwareVpdSubManufacturerId.setStatus("mandatory")
_Mt2HardwareVpdClei_Type = OctetString
_Mt2HardwareVpdClei_Object = MibScalar
mt2HardwareVpdClei = _Mt2HardwareVpdClei_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 10, 12),
    _Mt2HardwareVpdClei_Type()
)
mt2HardwareVpdClei.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mt2HardwareVpdClei.setStatus("mandatory")
_Mt2HardwareVpdCF1Capacity_Type = OctetString
_Mt2HardwareVpdCF1Capacity_Object = MibScalar
mt2HardwareVpdCF1Capacity = _Mt2HardwareVpdCF1Capacity_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 10, 13),
    _Mt2HardwareVpdCF1Capacity_Type()
)
mt2HardwareVpdCF1Capacity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mt2HardwareVpdCF1Capacity.setStatus("mandatory")
_Mt2HardwareVpdCF2Capacity_Type = OctetString
_Mt2HardwareVpdCF2Capacity_Object = MibScalar
mt2HardwareVpdCF2Capacity = _Mt2HardwareVpdCF2Capacity_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 10, 14),
    _Mt2HardwareVpdCF2Capacity_Type()
)
mt2HardwareVpdCF2Capacity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mt2HardwareVpdCF2Capacity.setStatus("mandatory")
_Mt2HardwareVpdHardwareRevisionString_Type = OctetString
_Mt2HardwareVpdHardwareRevisionString_Object = MibScalar
mt2HardwareVpdHardwareRevisionString = _Mt2HardwareVpdHardwareRevisionString_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 10, 17),
    _Mt2HardwareVpdHardwareRevisionString_Type()
)
mt2HardwareVpdHardwareRevisionString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mt2HardwareVpdHardwareRevisionString.setStatus("mandatory")
_Mt2HardwareVpdManufDate_Type = OctetString
_Mt2HardwareVpdManufDate_Object = MibScalar
mt2HardwareVpdManufDate = _Mt2HardwareVpdManufDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 10, 18),
    _Mt2HardwareVpdManufDate_Type()
)
mt2HardwareVpdManufDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mt2HardwareVpdManufDate.setStatus("mandatory")
_Mt2HardwareVpdPartNumber_Type = OctetString
_Mt2HardwareVpdPartNumber_Object = MibScalar
mt2HardwareVpdPartNumber = _Mt2HardwareVpdPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 10, 19),
    _Mt2HardwareVpdPartNumber_Type()
)
mt2HardwareVpdPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mt2HardwareVpdPartNumber.setStatus("mandatory")
_Mt2HardwareVpdFruSerial_Type = OctetString
_Mt2HardwareVpdFruSerial_Object = MibScalar
mt2HardwareVpdFruSerial = _Mt2HardwareVpdFruSerial_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 10, 20),
    _Mt2HardwareVpdFruSerial_Type()
)
mt2HardwareVpdFruSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mt2HardwareVpdFruSerial.setStatus("mandatory")
_BlowerFirmwareVpd_ObjectIdentity = ObjectIdentity
blowerFirmwareVpd = _BlowerFirmwareVpd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 12)
)
_BlowerControllerVPDTable_Object = MibTable
blowerControllerVPDTable = _BlowerControllerVPDTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 12, 1)
)
if mibBuilder.loadTexts:
    blowerControllerVPDTable.setStatus("mandatory")
_BlowerControllerVPDEntry_Object = MibTableRow
blowerControllerVPDEntry = _BlowerControllerVPDEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 12, 1, 1)
)
blowerControllerVPDEntry.setIndexNames(
    (0, "BLADE-MIB", "blowerControllerVpdIndex"),
)
if mibBuilder.loadTexts:
    blowerControllerVPDEntry.setStatus("mandatory")
_BlowerControllerVpdIndex_Type = Integer32
_BlowerControllerVpdIndex_Object = MibTableColumn
blowerControllerVpdIndex = _BlowerControllerVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 12, 1, 1, 1),
    _BlowerControllerVpdIndex_Type()
)
blowerControllerVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blowerControllerVpdIndex.setStatus("mandatory")


class _BlowerControllerVpdId_Type(Integer32):
    """Custom type blowerControllerVpdId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("blower1", 1),
          ("blower2", 2),
          ("blower3", 3),
          ("blower4", 4))
    )


_BlowerControllerVpdId_Type.__name__ = "Integer32"
_BlowerControllerVpdId_Object = MibTableColumn
blowerControllerVpdId = _BlowerControllerVpdId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 12, 1, 1, 2),
    _BlowerControllerVpdId_Type()
)
blowerControllerVpdId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blowerControllerVpdId.setStatus("mandatory")


class _BlowerControllerVpdExists_Type(Integer32):
    """Custom type blowerControllerVpdExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_BlowerControllerVpdExists_Type.__name__ = "Integer32"
_BlowerControllerVpdExists_Object = MibTableColumn
blowerControllerVpdExists = _BlowerControllerVpdExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 12, 1, 1, 3),
    _BlowerControllerVpdExists_Type()
)
blowerControllerVpdExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blowerControllerVpdExists.setStatus("mandatory")
_BlowerControllerVpdRevision_Type = OctetString
_BlowerControllerVpdRevision_Object = MibTableColumn
blowerControllerVpdRevision = _BlowerControllerVpdRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 12, 1, 1, 7),
    _BlowerControllerVpdRevision_Type()
)
blowerControllerVpdRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blowerControllerVpdRevision.setStatus("mandatory")
_BlowerHardwareVpd_ObjectIdentity = ObjectIdentity
blowerHardwareVpd = _BlowerHardwareVpd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13)
)
_BlowerHardwareVpdTable_Object = MibTable
blowerHardwareVpdTable = _BlowerHardwareVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1)
)
if mibBuilder.loadTexts:
    blowerHardwareVpdTable.setStatus("mandatory")
_BlowerHardwareVpdEntry_Object = MibTableRow
blowerHardwareVpdEntry = _BlowerHardwareVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1)
)
blowerHardwareVpdEntry.setIndexNames(
    (0, "BLADE-MIB", "blowerHardwareVpdIndex"),
)
if mibBuilder.loadTexts:
    blowerHardwareVpdEntry.setStatus("mandatory")
_BlowerHardwareVpdIndex_Type = Integer32
_BlowerHardwareVpdIndex_Object = MibTableColumn
blowerHardwareVpdIndex = _BlowerHardwareVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 1),
    _BlowerHardwareVpdIndex_Type()
)
blowerHardwareVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blowerHardwareVpdIndex.setStatus("mandatory")
_BlowerHardwareVpdBayNumber_Type = OctetString
_BlowerHardwareVpdBayNumber_Object = MibTableColumn
blowerHardwareVpdBayNumber = _BlowerHardwareVpdBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 2),
    _BlowerHardwareVpdBayNumber_Type()
)
blowerHardwareVpdBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blowerHardwareVpdBayNumber.setStatus("mandatory")
_BlowerHardwareVpdManufacturingId_Type = OctetString
_BlowerHardwareVpdManufacturingId_Object = MibTableColumn
blowerHardwareVpdManufacturingId = _BlowerHardwareVpdManufacturingId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 3),
    _BlowerHardwareVpdManufacturingId_Type()
)
blowerHardwareVpdManufacturingId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blowerHardwareVpdManufacturingId.setStatus("mandatory")
_BlowerHardwareVpdFruNumber_Type = OctetString
_BlowerHardwareVpdFruNumber_Object = MibTableColumn
blowerHardwareVpdFruNumber = _BlowerHardwareVpdFruNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 4),
    _BlowerHardwareVpdFruNumber_Type()
)
blowerHardwareVpdFruNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blowerHardwareVpdFruNumber.setStatus("mandatory")
_BlowerHardwareVpdHardwareRevision_Type = Integer32
_BlowerHardwareVpdHardwareRevision_Object = MibTableColumn
blowerHardwareVpdHardwareRevision = _BlowerHardwareVpdHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 5),
    _BlowerHardwareVpdHardwareRevision_Type()
)
blowerHardwareVpdHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blowerHardwareVpdHardwareRevision.setStatus("mandatory")
_BlowerHardwareVpdUuid_Type = OctetString
_BlowerHardwareVpdUuid_Object = MibTableColumn
blowerHardwareVpdUuid = _BlowerHardwareVpdUuid_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 8),
    _BlowerHardwareVpdUuid_Type()
)
blowerHardwareVpdUuid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blowerHardwareVpdUuid.setStatus("mandatory")
_BlowerHardwareVpdManufDate_Type = OctetString
_BlowerHardwareVpdManufDate_Object = MibTableColumn
blowerHardwareVpdManufDate = _BlowerHardwareVpdManufDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 9),
    _BlowerHardwareVpdManufDate_Type()
)
blowerHardwareVpdManufDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blowerHardwareVpdManufDate.setStatus("mandatory")
_BlowerHardwareVpdPartNumber_Type = OctetString
_BlowerHardwareVpdPartNumber_Object = MibTableColumn
blowerHardwareVpdPartNumber = _BlowerHardwareVpdPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 10),
    _BlowerHardwareVpdPartNumber_Type()
)
blowerHardwareVpdPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blowerHardwareVpdPartNumber.setStatus("mandatory")
_BlowerHardwareVpdFruSerial_Type = OctetString
_BlowerHardwareVpdFruSerial_Object = MibTableColumn
blowerHardwareVpdFruSerial = _BlowerHardwareVpdFruSerial_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 11),
    _BlowerHardwareVpdFruSerial_Type()
)
blowerHardwareVpdFruSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blowerHardwareVpdFruSerial.setStatus("mandatory")
_BlowerHardwareVpdManufacturingIDNumber_Type = OctetString
_BlowerHardwareVpdManufacturingIDNumber_Object = MibTableColumn
blowerHardwareVpdManufacturingIDNumber = _BlowerHardwareVpdManufacturingIDNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 12),
    _BlowerHardwareVpdManufacturingIDNumber_Type()
)
blowerHardwareVpdManufacturingIDNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blowerHardwareVpdManufacturingIDNumber.setStatus("mandatory")
_BlowerHardwareVpdProductId_Type = OctetString
_BlowerHardwareVpdProductId_Object = MibTableColumn
blowerHardwareVpdProductId = _BlowerHardwareVpdProductId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 13),
    _BlowerHardwareVpdProductId_Type()
)
blowerHardwareVpdProductId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blowerHardwareVpdProductId.setStatus("mandatory")
_BlowerHardwareVpdSubManufacturerId_Type = OctetString
_BlowerHardwareVpdSubManufacturerId_Object = MibTableColumn
blowerHardwareVpdSubManufacturerId = _BlowerHardwareVpdSubManufacturerId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 14),
    _BlowerHardwareVpdSubManufacturerId_Type()
)
blowerHardwareVpdSubManufacturerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blowerHardwareVpdSubManufacturerId.setStatus("mandatory")
_BlowerHardwareVpdClei_Type = OctetString
_BlowerHardwareVpdClei_Object = MibTableColumn
blowerHardwareVpdClei = _BlowerHardwareVpdClei_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 15),
    _BlowerHardwareVpdClei_Type()
)
blowerHardwareVpdClei.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blowerHardwareVpdClei.setStatus("mandatory")
_BlowerHardwareVpdHardwareRevisionString_Type = OctetString
_BlowerHardwareVpdHardwareRevisionString_Object = MibTableColumn
blowerHardwareVpdHardwareRevisionString = _BlowerHardwareVpdHardwareRevisionString_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 16),
    _BlowerHardwareVpdHardwareRevisionString_Type()
)
blowerHardwareVpdHardwareRevisionString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    blowerHardwareVpdHardwareRevisionString.setStatus("mandatory")
_FanPackFirmwareVpd_ObjectIdentity = ObjectIdentity
fanPackFirmwareVpd = _FanPackFirmwareVpd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 14)
)
_FanPackControllerVPDTable_Object = MibTable
fanPackControllerVPDTable = _FanPackControllerVPDTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 14, 1)
)
if mibBuilder.loadTexts:
    fanPackControllerVPDTable.setStatus("mandatory")
_FanPackControllerVPDEntry_Object = MibTableRow
fanPackControllerVPDEntry = _FanPackControllerVPDEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 14, 1, 1)
)
fanPackControllerVPDEntry.setIndexNames(
    (0, "BLADE-MIB", "fanPackControllerVpdIndex"),
)
if mibBuilder.loadTexts:
    fanPackControllerVPDEntry.setStatus("mandatory")
_FanPackControllerVpdIndex_Type = Integer32
_FanPackControllerVpdIndex_Object = MibTableColumn
fanPackControllerVpdIndex = _FanPackControllerVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 14, 1, 1, 1),
    _FanPackControllerVpdIndex_Type()
)
fanPackControllerVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fanPackControllerVpdIndex.setStatus("mandatory")


class _FanPackControllerVpdId_Type(Integer32):
    """Custom type fanPackControllerVpdId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("fanPack1", 1),
          ("fanPack2", 2),
          ("fanPack3", 3),
          ("fanPack4", 4))
    )


_FanPackControllerVpdId_Type.__name__ = "Integer32"
_FanPackControllerVpdId_Object = MibTableColumn
fanPackControllerVpdId = _FanPackControllerVpdId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 14, 1, 1, 2),
    _FanPackControllerVpdId_Type()
)
fanPackControllerVpdId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fanPackControllerVpdId.setStatus("mandatory")


class _FanPackControllerVpdExists_Type(Integer32):
    """Custom type fanPackControllerVpdExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_FanPackControllerVpdExists_Type.__name__ = "Integer32"
_FanPackControllerVpdExists_Object = MibTableColumn
fanPackControllerVpdExists = _FanPackControllerVpdExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 14, 1, 1, 3),
    _FanPackControllerVpdExists_Type()
)
fanPackControllerVpdExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fanPackControllerVpdExists.setStatus("mandatory")
_FanPackControllerVpdRevision_Type = OctetString
_FanPackControllerVpdRevision_Object = MibTableColumn
fanPackControllerVpdRevision = _FanPackControllerVpdRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 14, 1, 1, 7),
    _FanPackControllerVpdRevision_Type()
)
fanPackControllerVpdRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fanPackControllerVpdRevision.setStatus("mandatory")
_TapHardwareVpd_ObjectIdentity = ObjectIdentity
tapHardwareVpd = _TapHardwareVpd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 15)
)
_TapHardwareVpdManufacturingId_Type = OctetString
_TapHardwareVpdManufacturingId_Object = MibScalar
tapHardwareVpdManufacturingId = _TapHardwareVpdManufacturingId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 15, 3),
    _TapHardwareVpdManufacturingId_Type()
)
tapHardwareVpdManufacturingId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapHardwareVpdManufacturingId.setStatus("mandatory")
_TapHardwareVpdFruNumber_Type = OctetString
_TapHardwareVpdFruNumber_Object = MibScalar
tapHardwareVpdFruNumber = _TapHardwareVpdFruNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 15, 4),
    _TapHardwareVpdFruNumber_Type()
)
tapHardwareVpdFruNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapHardwareVpdFruNumber.setStatus("mandatory")
_TapHardwareVpdHardwareRevision_Type = Integer32
_TapHardwareVpdHardwareRevision_Object = MibScalar
tapHardwareVpdHardwareRevision = _TapHardwareVpdHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 15, 5),
    _TapHardwareVpdHardwareRevision_Type()
)
tapHardwareVpdHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapHardwareVpdHardwareRevision.setStatus("mandatory")
_TapHardwareVpdUuid_Type = OctetString
_TapHardwareVpdUuid_Object = MibScalar
tapHardwareVpdUuid = _TapHardwareVpdUuid_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 15, 8),
    _TapHardwareVpdUuid_Type()
)
tapHardwareVpdUuid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapHardwareVpdUuid.setStatus("mandatory")
_TapHardwareVpdManufDate_Type = OctetString
_TapHardwareVpdManufDate_Object = MibScalar
tapHardwareVpdManufDate = _TapHardwareVpdManufDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 15, 9),
    _TapHardwareVpdManufDate_Type()
)
tapHardwareVpdManufDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapHardwareVpdManufDate.setStatus("mandatory")
_TapHardwareVpdPartNumber_Type = OctetString
_TapHardwareVpdPartNumber_Object = MibScalar
tapHardwareVpdPartNumber = _TapHardwareVpdPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 15, 10),
    _TapHardwareVpdPartNumber_Type()
)
tapHardwareVpdPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapHardwareVpdPartNumber.setStatus("mandatory")
_TapHardwareVpdFruSerial_Type = OctetString
_TapHardwareVpdFruSerial_Object = MibScalar
tapHardwareVpdFruSerial = _TapHardwareVpdFruSerial_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 15, 11),
    _TapHardwareVpdFruSerial_Type()
)
tapHardwareVpdFruSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapHardwareVpdFruSerial.setStatus("mandatory")
_TapHardwareVpdManufacturingIDNumber_Type = OctetString
_TapHardwareVpdManufacturingIDNumber_Object = MibScalar
tapHardwareVpdManufacturingIDNumber = _TapHardwareVpdManufacturingIDNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 15, 12),
    _TapHardwareVpdManufacturingIDNumber_Type()
)
tapHardwareVpdManufacturingIDNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapHardwareVpdManufacturingIDNumber.setStatus("mandatory")
_TapHardwareVpdProductId_Type = OctetString
_TapHardwareVpdProductId_Object = MibScalar
tapHardwareVpdProductId = _TapHardwareVpdProductId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 15, 13),
    _TapHardwareVpdProductId_Type()
)
tapHardwareVpdProductId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapHardwareVpdProductId.setStatus("mandatory")
_TapHardwareVpdSubManufacturerId_Type = OctetString
_TapHardwareVpdSubManufacturerId_Object = MibScalar
tapHardwareVpdSubManufacturerId = _TapHardwareVpdSubManufacturerId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 15, 14),
    _TapHardwareVpdSubManufacturerId_Type()
)
tapHardwareVpdSubManufacturerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapHardwareVpdSubManufacturerId.setStatus("mandatory")
_TapHardwareVpdClei_Type = OctetString
_TapHardwareVpdClei_Object = MibScalar
tapHardwareVpdClei = _TapHardwareVpdClei_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 15, 15),
    _TapHardwareVpdClei_Type()
)
tapHardwareVpdClei.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapHardwareVpdClei.setStatus("mandatory")
_TapHardwareVpdHardwareRevisionString_Type = OctetString
_TapHardwareVpdHardwareRevisionString_Object = MibScalar
tapHardwareVpdHardwareRevisionString = _TapHardwareVpdHardwareRevisionString_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 15, 16),
    _TapHardwareVpdHardwareRevisionString_Type()
)
tapHardwareVpdHardwareRevisionString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapHardwareVpdHardwareRevisionString.setStatus("mandatory")
_NcHardwareVpd_ObjectIdentity = ObjectIdentity
ncHardwareVpd = _NcHardwareVpd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 16)
)
_NcHardwareVpdTable_Object = MibTable
ncHardwareVpdTable = _NcHardwareVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 16, 1)
)
if mibBuilder.loadTexts:
    ncHardwareVpdTable.setStatus("deprecated")
_NcHardwareVpdEntry_Object = MibTableRow
ncHardwareVpdEntry = _NcHardwareVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 16, 1, 1)
)
ncHardwareVpdEntry.setIndexNames(
    (0, "BLADE-MIB", "ncHardwareVpdIndex"),
)
if mibBuilder.loadTexts:
    ncHardwareVpdEntry.setStatus("deprecated")
_NcHardwareVpdIndex_Type = Integer32
_NcHardwareVpdIndex_Object = MibTableColumn
ncHardwareVpdIndex = _NcHardwareVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 16, 1, 1, 1),
    _NcHardwareVpdIndex_Type()
)
ncHardwareVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ncHardwareVpdIndex.setStatus("deprecated")
_NcHardwareVpdBayNumber_Type = OctetString
_NcHardwareVpdBayNumber_Object = MibTableColumn
ncHardwareVpdBayNumber = _NcHardwareVpdBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 16, 1, 1, 2),
    _NcHardwareVpdBayNumber_Type()
)
ncHardwareVpdBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ncHardwareVpdBayNumber.setStatus("deprecated")
_NcHardwareVpdManufacturingId_Type = OctetString
_NcHardwareVpdManufacturingId_Object = MibTableColumn
ncHardwareVpdManufacturingId = _NcHardwareVpdManufacturingId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 16, 1, 1, 3),
    _NcHardwareVpdManufacturingId_Type()
)
ncHardwareVpdManufacturingId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ncHardwareVpdManufacturingId.setStatus("deprecated")
_NcHardwareVpdFruNumber_Type = OctetString
_NcHardwareVpdFruNumber_Object = MibTableColumn
ncHardwareVpdFruNumber = _NcHardwareVpdFruNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 16, 1, 1, 4),
    _NcHardwareVpdFruNumber_Type()
)
ncHardwareVpdFruNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ncHardwareVpdFruNumber.setStatus("deprecated")
_NcHardwareVpdHardwareRevision_Type = Integer32
_NcHardwareVpdHardwareRevision_Object = MibTableColumn
ncHardwareVpdHardwareRevision = _NcHardwareVpdHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 16, 1, 1, 5),
    _NcHardwareVpdHardwareRevision_Type()
)
ncHardwareVpdHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ncHardwareVpdHardwareRevision.setStatus("deprecated")
_NcHardwareVpdUuid_Type = OctetString
_NcHardwareVpdUuid_Object = MibTableColumn
ncHardwareVpdUuid = _NcHardwareVpdUuid_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 16, 1, 1, 8),
    _NcHardwareVpdUuid_Type()
)
ncHardwareVpdUuid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ncHardwareVpdUuid.setStatus("deprecated")
_NcHardwareVpdManufDate_Type = OctetString
_NcHardwareVpdManufDate_Object = MibTableColumn
ncHardwareVpdManufDate = _NcHardwareVpdManufDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 16, 1, 1, 9),
    _NcHardwareVpdManufDate_Type()
)
ncHardwareVpdManufDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ncHardwareVpdManufDate.setStatus("deprecated")
_NcHardwareVpdPartNumber_Type = OctetString
_NcHardwareVpdPartNumber_Object = MibTableColumn
ncHardwareVpdPartNumber = _NcHardwareVpdPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 16, 1, 1, 10),
    _NcHardwareVpdPartNumber_Type()
)
ncHardwareVpdPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ncHardwareVpdPartNumber.setStatus("deprecated")
_NcHardwareVpdFruSerial_Type = OctetString
_NcHardwareVpdFruSerial_Object = MibTableColumn
ncHardwareVpdFruSerial = _NcHardwareVpdFruSerial_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 16, 1, 1, 11),
    _NcHardwareVpdFruSerial_Type()
)
ncHardwareVpdFruSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ncHardwareVpdFruSerial.setStatus("deprecated")
_NcHardwareVpdManufacturingIDNumber_Type = OctetString
_NcHardwareVpdManufacturingIDNumber_Object = MibTableColumn
ncHardwareVpdManufacturingIDNumber = _NcHardwareVpdManufacturingIDNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 16, 1, 1, 12),
    _NcHardwareVpdManufacturingIDNumber_Type()
)
ncHardwareVpdManufacturingIDNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ncHardwareVpdManufacturingIDNumber.setStatus("deprecated")
_NcHardwareVpdProductId_Type = OctetString
_NcHardwareVpdProductId_Object = MibTableColumn
ncHardwareVpdProductId = _NcHardwareVpdProductId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 16, 1, 1, 13),
    _NcHardwareVpdProductId_Type()
)
ncHardwareVpdProductId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ncHardwareVpdProductId.setStatus("deprecated")
_NcHardwareVpdSubManufacturerId_Type = OctetString
_NcHardwareVpdSubManufacturerId_Object = MibTableColumn
ncHardwareVpdSubManufacturerId = _NcHardwareVpdSubManufacturerId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 16, 1, 1, 14),
    _NcHardwareVpdSubManufacturerId_Type()
)
ncHardwareVpdSubManufacturerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ncHardwareVpdSubManufacturerId.setStatus("deprecated")
_NcHardwareVpdClei_Type = OctetString
_NcHardwareVpdClei_Object = MibTableColumn
ncHardwareVpdClei = _NcHardwareVpdClei_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 16, 1, 1, 15),
    _NcHardwareVpdClei_Type()
)
ncHardwareVpdClei.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ncHardwareVpdClei.setStatus("deprecated")
_NcHardwareVpdHardwareRevisionString_Type = OctetString
_NcHardwareVpdHardwareRevisionString_Object = MibTableColumn
ncHardwareVpdHardwareRevisionString = _NcHardwareVpdHardwareRevisionString_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 16, 1, 1, 16),
    _NcHardwareVpdHardwareRevisionString_Type()
)
ncHardwareVpdHardwareRevisionString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ncHardwareVpdHardwareRevisionString.setStatus("deprecated")
_MxHardwareVpd_ObjectIdentity = ObjectIdentity
mxHardwareVpd = _MxHardwareVpd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 17)
)
_MxHardwareVpdTable_Object = MibTable
mxHardwareVpdTable = _MxHardwareVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 17, 1)
)
if mibBuilder.loadTexts:
    mxHardwareVpdTable.setStatus("mandatory")
_MxHardwareVpdEntry_Object = MibTableRow
mxHardwareVpdEntry = _MxHardwareVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 17, 1, 1)
)
mxHardwareVpdEntry.setIndexNames(
    (0, "BLADE-MIB", "mxHardwareVpdIndex"),
)
if mibBuilder.loadTexts:
    mxHardwareVpdEntry.setStatus("mandatory")
_MxHardwareVpdIndex_Type = Integer32
_MxHardwareVpdIndex_Object = MibTableColumn
mxHardwareVpdIndex = _MxHardwareVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 17, 1, 1, 1),
    _MxHardwareVpdIndex_Type()
)
mxHardwareVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mxHardwareVpdIndex.setStatus("mandatory")
_MxHardwareVpdBayNumber_Type = OctetString
_MxHardwareVpdBayNumber_Object = MibTableColumn
mxHardwareVpdBayNumber = _MxHardwareVpdBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 17, 1, 1, 2),
    _MxHardwareVpdBayNumber_Type()
)
mxHardwareVpdBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mxHardwareVpdBayNumber.setStatus("mandatory")
_MxHardwareVpdManufacturingId_Type = OctetString
_MxHardwareVpdManufacturingId_Object = MibTableColumn
mxHardwareVpdManufacturingId = _MxHardwareVpdManufacturingId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 17, 1, 1, 3),
    _MxHardwareVpdManufacturingId_Type()
)
mxHardwareVpdManufacturingId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mxHardwareVpdManufacturingId.setStatus("mandatory")
_MxHardwareVpdFruNumber_Type = OctetString
_MxHardwareVpdFruNumber_Object = MibTableColumn
mxHardwareVpdFruNumber = _MxHardwareVpdFruNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 17, 1, 1, 4),
    _MxHardwareVpdFruNumber_Type()
)
mxHardwareVpdFruNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mxHardwareVpdFruNumber.setStatus("mandatory")
_MxHardwareVpdHardwareRevision_Type = Integer32
_MxHardwareVpdHardwareRevision_Object = MibTableColumn
mxHardwareVpdHardwareRevision = _MxHardwareVpdHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 17, 1, 1, 5),
    _MxHardwareVpdHardwareRevision_Type()
)
mxHardwareVpdHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mxHardwareVpdHardwareRevision.setStatus("mandatory")
_MxHardwareVpdUuid_Type = OctetString
_MxHardwareVpdUuid_Object = MibTableColumn
mxHardwareVpdUuid = _MxHardwareVpdUuid_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 17, 1, 1, 8),
    _MxHardwareVpdUuid_Type()
)
mxHardwareVpdUuid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mxHardwareVpdUuid.setStatus("mandatory")
_MxHardwareVpdManufDate_Type = OctetString
_MxHardwareVpdManufDate_Object = MibTableColumn
mxHardwareVpdManufDate = _MxHardwareVpdManufDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 17, 1, 1, 9),
    _MxHardwareVpdManufDate_Type()
)
mxHardwareVpdManufDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mxHardwareVpdManufDate.setStatus("mandatory")
_MxHardwareVpdPartNumber_Type = OctetString
_MxHardwareVpdPartNumber_Object = MibTableColumn
mxHardwareVpdPartNumber = _MxHardwareVpdPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 17, 1, 1, 10),
    _MxHardwareVpdPartNumber_Type()
)
mxHardwareVpdPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mxHardwareVpdPartNumber.setStatus("mandatory")
_MxHardwareVpdFruSerial_Type = OctetString
_MxHardwareVpdFruSerial_Object = MibTableColumn
mxHardwareVpdFruSerial = _MxHardwareVpdFruSerial_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 17, 1, 1, 11),
    _MxHardwareVpdFruSerial_Type()
)
mxHardwareVpdFruSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mxHardwareVpdFruSerial.setStatus("mandatory")
_MxHardwareVpdManufacturingIDNumber_Type = OctetString
_MxHardwareVpdManufacturingIDNumber_Object = MibTableColumn
mxHardwareVpdManufacturingIDNumber = _MxHardwareVpdManufacturingIDNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 17, 1, 1, 12),
    _MxHardwareVpdManufacturingIDNumber_Type()
)
mxHardwareVpdManufacturingIDNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mxHardwareVpdManufacturingIDNumber.setStatus("mandatory")
_MxHardwareVpdProductId_Type = OctetString
_MxHardwareVpdProductId_Object = MibTableColumn
mxHardwareVpdProductId = _MxHardwareVpdProductId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 17, 1, 1, 13),
    _MxHardwareVpdProductId_Type()
)
mxHardwareVpdProductId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mxHardwareVpdProductId.setStatus("mandatory")
_MxHardwareVpdSubManufacturerId_Type = OctetString
_MxHardwareVpdSubManufacturerId_Object = MibTableColumn
mxHardwareVpdSubManufacturerId = _MxHardwareVpdSubManufacturerId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 17, 1, 1, 14),
    _MxHardwareVpdSubManufacturerId_Type()
)
mxHardwareVpdSubManufacturerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mxHardwareVpdSubManufacturerId.setStatus("mandatory")
_MxHardwareVpdClei_Type = OctetString
_MxHardwareVpdClei_Object = MibTableColumn
mxHardwareVpdClei = _MxHardwareVpdClei_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 17, 1, 1, 15),
    _MxHardwareVpdClei_Type()
)
mxHardwareVpdClei.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mxHardwareVpdClei.setStatus("mandatory")
_MxHardwareVpdHardwareRevisionString_Type = OctetString
_MxHardwareVpdHardwareRevisionString_Object = MibTableColumn
mxHardwareVpdHardwareRevisionString = _MxHardwareVpdHardwareRevisionString_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 17, 1, 1, 16),
    _MxHardwareVpdHardwareRevisionString_Type()
)
mxHardwareVpdHardwareRevisionString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mxHardwareVpdHardwareRevisionString.setStatus("mandatory")
_StmHardwareVpd_ObjectIdentity = ObjectIdentity
stmHardwareVpd = _StmHardwareVpd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 18)
)
_StmHardwareVpdTable_Object = MibTable
stmHardwareVpdTable = _StmHardwareVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 18, 1)
)
if mibBuilder.loadTexts:
    stmHardwareVpdTable.setStatus("mandatory")
_StmHardwareVpdEntry_Object = MibTableRow
stmHardwareVpdEntry = _StmHardwareVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 18, 1, 1)
)
stmHardwareVpdEntry.setIndexNames(
    (0, "BLADE-MIB", "stmHardwareVpdIndex"),
)
if mibBuilder.loadTexts:
    stmHardwareVpdEntry.setStatus("mandatory")
_StmHardwareVpdIndex_Type = Integer32
_StmHardwareVpdIndex_Object = MibTableColumn
stmHardwareVpdIndex = _StmHardwareVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 18, 1, 1, 1),
    _StmHardwareVpdIndex_Type()
)
stmHardwareVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmHardwareVpdIndex.setStatus("mandatory")
_StmHardwareVpdBayNumber_Type = OctetString
_StmHardwareVpdBayNumber_Object = MibTableColumn
stmHardwareVpdBayNumber = _StmHardwareVpdBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 18, 1, 1, 2),
    _StmHardwareVpdBayNumber_Type()
)
stmHardwareVpdBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmHardwareVpdBayNumber.setStatus("mandatory")
_StmHardwareVpdManufacturingId_Type = OctetString
_StmHardwareVpdManufacturingId_Object = MibTableColumn
stmHardwareVpdManufacturingId = _StmHardwareVpdManufacturingId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 18, 1, 1, 3),
    _StmHardwareVpdManufacturingId_Type()
)
stmHardwareVpdManufacturingId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmHardwareVpdManufacturingId.setStatus("mandatory")
_StmHardwareVpdFruNumber_Type = OctetString
_StmHardwareVpdFruNumber_Object = MibTableColumn
stmHardwareVpdFruNumber = _StmHardwareVpdFruNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 18, 1, 1, 4),
    _StmHardwareVpdFruNumber_Type()
)
stmHardwareVpdFruNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmHardwareVpdFruNumber.setStatus("mandatory")
_StmHardwareVpdHardwareRevision_Type = Integer32
_StmHardwareVpdHardwareRevision_Object = MibTableColumn
stmHardwareVpdHardwareRevision = _StmHardwareVpdHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 18, 1, 1, 5),
    _StmHardwareVpdHardwareRevision_Type()
)
stmHardwareVpdHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmHardwareVpdHardwareRevision.setStatus("mandatory")
_StmHardwareVpdUuid_Type = OctetString
_StmHardwareVpdUuid_Object = MibTableColumn
stmHardwareVpdUuid = _StmHardwareVpdUuid_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 18, 1, 1, 8),
    _StmHardwareVpdUuid_Type()
)
stmHardwareVpdUuid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmHardwareVpdUuid.setStatus("mandatory")
_StmHardwareVpdManufDate_Type = OctetString
_StmHardwareVpdManufDate_Object = MibTableColumn
stmHardwareVpdManufDate = _StmHardwareVpdManufDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 18, 1, 1, 9),
    _StmHardwareVpdManufDate_Type()
)
stmHardwareVpdManufDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmHardwareVpdManufDate.setStatus("mandatory")
_StmHardwareVpdPartNumber_Type = OctetString
_StmHardwareVpdPartNumber_Object = MibTableColumn
stmHardwareVpdPartNumber = _StmHardwareVpdPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 18, 1, 1, 10),
    _StmHardwareVpdPartNumber_Type()
)
stmHardwareVpdPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmHardwareVpdPartNumber.setStatus("mandatory")
_StmHardwareVpdFruSerial_Type = OctetString
_StmHardwareVpdFruSerial_Object = MibTableColumn
stmHardwareVpdFruSerial = _StmHardwareVpdFruSerial_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 18, 1, 1, 11),
    _StmHardwareVpdFruSerial_Type()
)
stmHardwareVpdFruSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmHardwareVpdFruSerial.setStatus("mandatory")
_StmHardwareVpdManufacturingIDNumber_Type = OctetString
_StmHardwareVpdManufacturingIDNumber_Object = MibTableColumn
stmHardwareVpdManufacturingIDNumber = _StmHardwareVpdManufacturingIDNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 18, 1, 1, 12),
    _StmHardwareVpdManufacturingIDNumber_Type()
)
stmHardwareVpdManufacturingIDNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmHardwareVpdManufacturingIDNumber.setStatus("mandatory")
_StmHardwareVpdProductId_Type = OctetString
_StmHardwareVpdProductId_Object = MibTableColumn
stmHardwareVpdProductId = _StmHardwareVpdProductId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 18, 1, 1, 13),
    _StmHardwareVpdProductId_Type()
)
stmHardwareVpdProductId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmHardwareVpdProductId.setStatus("mandatory")
_StmHardwareVpdSubManufacturerId_Type = OctetString
_StmHardwareVpdSubManufacturerId_Object = MibTableColumn
stmHardwareVpdSubManufacturerId = _StmHardwareVpdSubManufacturerId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 18, 1, 1, 14),
    _StmHardwareVpdSubManufacturerId_Type()
)
stmHardwareVpdSubManufacturerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmHardwareVpdSubManufacturerId.setStatus("mandatory")
_StmHardwareVpdClei_Type = OctetString
_StmHardwareVpdClei_Object = MibTableColumn
stmHardwareVpdClei = _StmHardwareVpdClei_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 18, 1, 1, 15),
    _StmHardwareVpdClei_Type()
)
stmHardwareVpdClei.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmHardwareVpdClei.setStatus("mandatory")
_StmHardwareVpdHardwareRevisionString_Type = OctetString
_StmHardwareVpdHardwareRevisionString_Object = MibTableColumn
stmHardwareVpdHardwareRevisionString = _StmHardwareVpdHardwareRevisionString_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 18, 1, 1, 16),
    _StmHardwareVpdHardwareRevisionString_Type()
)
stmHardwareVpdHardwareRevisionString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmHardwareVpdHardwareRevisionString.setStatus("mandatory")
_StmFirmwareVpd_ObjectIdentity = ObjectIdentity
stmFirmwareVpd = _StmFirmwareVpd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 19)
)
_StmFirmwareVpdTable_Object = MibTable
stmFirmwareVpdTable = _StmFirmwareVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 19, 1)
)
if mibBuilder.loadTexts:
    stmFirmwareVpdTable.setStatus("mandatory")
_StmFirmwareVpdEntry_Object = MibTableRow
stmFirmwareVpdEntry = _StmFirmwareVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 19, 1, 1)
)
stmFirmwareVpdEntry.setIndexNames(
    (0, "BLADE-MIB", "stmFirmwareVpdIndex"),
)
if mibBuilder.loadTexts:
    stmFirmwareVpdEntry.setStatus("mandatory")
_StmFirmwareVpdIndex_Type = Integer32
_StmFirmwareVpdIndex_Object = MibTableColumn
stmFirmwareVpdIndex = _StmFirmwareVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 19, 1, 1, 1),
    _StmFirmwareVpdIndex_Type()
)
stmFirmwareVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmFirmwareVpdIndex.setStatus("mandatory")
_StmFirmwareVpdType_Type = OctetString
_StmFirmwareVpdType_Object = MibTableColumn
stmFirmwareVpdType = _StmFirmwareVpdType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 19, 1, 1, 2),
    _StmFirmwareVpdType_Type()
)
stmFirmwareVpdType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmFirmwareVpdType.setStatus("mandatory")
_StmFirmwareVpdBuildId_Type = OctetString
_StmFirmwareVpdBuildId_Object = MibTableColumn
stmFirmwareVpdBuildId = _StmFirmwareVpdBuildId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 19, 1, 1, 3),
    _StmFirmwareVpdBuildId_Type()
)
stmFirmwareVpdBuildId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmFirmwareVpdBuildId.setStatus("mandatory")
_StmFirmwareVpdReleaseDate_Type = OctetString
_StmFirmwareVpdReleaseDate_Object = MibTableColumn
stmFirmwareVpdReleaseDate = _StmFirmwareVpdReleaseDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 19, 1, 1, 4),
    _StmFirmwareVpdReleaseDate_Type()
)
stmFirmwareVpdReleaseDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmFirmwareVpdReleaseDate.setStatus("mandatory")
_StmFirmwareVpdRevision_Type = OctetString
_StmFirmwareVpdRevision_Object = MibTableColumn
stmFirmwareVpdRevision = _StmFirmwareVpdRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 19, 1, 1, 5),
    _StmFirmwareVpdRevision_Type()
)
stmFirmwareVpdRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stmFirmwareVpdRevision.setStatus("mandatory")
_BbuHardwareVpd_ObjectIdentity = ObjectIdentity
bbuHardwareVpd = _BbuHardwareVpd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21)
)
_BbuHardwareVpdTable_Object = MibTable
bbuHardwareVpdTable = _BbuHardwareVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1)
)
if mibBuilder.loadTexts:
    bbuHardwareVpdTable.setStatus("mandatory")
_BbuHardwareVpdEntry_Object = MibTableRow
bbuHardwareVpdEntry = _BbuHardwareVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1, 1)
)
bbuHardwareVpdEntry.setIndexNames(
    (0, "BLADE-MIB", "bbuHardwareVpdIndex"),
)
if mibBuilder.loadTexts:
    bbuHardwareVpdEntry.setStatus("mandatory")
_BbuHardwareVpdIndex_Type = Integer32
_BbuHardwareVpdIndex_Object = MibTableColumn
bbuHardwareVpdIndex = _BbuHardwareVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1, 1, 1),
    _BbuHardwareVpdIndex_Type()
)
bbuHardwareVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbuHardwareVpdIndex.setStatus("mandatory")
_BbuHardwareVpdBayNumber_Type = OctetString
_BbuHardwareVpdBayNumber_Object = MibTableColumn
bbuHardwareVpdBayNumber = _BbuHardwareVpdBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1, 1, 2),
    _BbuHardwareVpdBayNumber_Type()
)
bbuHardwareVpdBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbuHardwareVpdBayNumber.setStatus("mandatory")
_BbuHardwareVpdManufacturingId_Type = OctetString
_BbuHardwareVpdManufacturingId_Object = MibTableColumn
bbuHardwareVpdManufacturingId = _BbuHardwareVpdManufacturingId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1, 1, 3),
    _BbuHardwareVpdManufacturingId_Type()
)
bbuHardwareVpdManufacturingId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbuHardwareVpdManufacturingId.setStatus("mandatory")
_BbuHardwareVpdFruNumber_Type = OctetString
_BbuHardwareVpdFruNumber_Object = MibTableColumn
bbuHardwareVpdFruNumber = _BbuHardwareVpdFruNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1, 1, 4),
    _BbuHardwareVpdFruNumber_Type()
)
bbuHardwareVpdFruNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbuHardwareVpdFruNumber.setStatus("mandatory")
_BbuHardwareVpdHardwareRevision_Type = Integer32
_BbuHardwareVpdHardwareRevision_Object = MibTableColumn
bbuHardwareVpdHardwareRevision = _BbuHardwareVpdHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1, 1, 5),
    _BbuHardwareVpdHardwareRevision_Type()
)
bbuHardwareVpdHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbuHardwareVpdHardwareRevision.setStatus("mandatory")
_BbuHardwareVpdUuid_Type = OctetString
_BbuHardwareVpdUuid_Object = MibTableColumn
bbuHardwareVpdUuid = _BbuHardwareVpdUuid_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1, 1, 8),
    _BbuHardwareVpdUuid_Type()
)
bbuHardwareVpdUuid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbuHardwareVpdUuid.setStatus("mandatory")
_BbuHardwareVpdManufDate_Type = OctetString
_BbuHardwareVpdManufDate_Object = MibTableColumn
bbuHardwareVpdManufDate = _BbuHardwareVpdManufDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1, 1, 9),
    _BbuHardwareVpdManufDate_Type()
)
bbuHardwareVpdManufDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbuHardwareVpdManufDate.setStatus("mandatory")
_BbuHardwareVpdPartNumber_Type = OctetString
_BbuHardwareVpdPartNumber_Object = MibTableColumn
bbuHardwareVpdPartNumber = _BbuHardwareVpdPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1, 1, 10),
    _BbuHardwareVpdPartNumber_Type()
)
bbuHardwareVpdPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbuHardwareVpdPartNumber.setStatus("mandatory")
_BbuHardwareVpdFruSerial_Type = OctetString
_BbuHardwareVpdFruSerial_Object = MibTableColumn
bbuHardwareVpdFruSerial = _BbuHardwareVpdFruSerial_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1, 1, 11),
    _BbuHardwareVpdFruSerial_Type()
)
bbuHardwareVpdFruSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbuHardwareVpdFruSerial.setStatus("mandatory")
_BbuHardwareVpdManufacturingIDNumber_Type = OctetString
_BbuHardwareVpdManufacturingIDNumber_Object = MibTableColumn
bbuHardwareVpdManufacturingIDNumber = _BbuHardwareVpdManufacturingIDNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1, 1, 12),
    _BbuHardwareVpdManufacturingIDNumber_Type()
)
bbuHardwareVpdManufacturingIDNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbuHardwareVpdManufacturingIDNumber.setStatus("mandatory")
_BbuHardwareVpdProductId_Type = OctetString
_BbuHardwareVpdProductId_Object = MibTableColumn
bbuHardwareVpdProductId = _BbuHardwareVpdProductId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1, 1, 13),
    _BbuHardwareVpdProductId_Type()
)
bbuHardwareVpdProductId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbuHardwareVpdProductId.setStatus("mandatory")
_BbuHardwareVpdSubManufacturerId_Type = OctetString
_BbuHardwareVpdSubManufacturerId_Object = MibTableColumn
bbuHardwareVpdSubManufacturerId = _BbuHardwareVpdSubManufacturerId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1, 1, 14),
    _BbuHardwareVpdSubManufacturerId_Type()
)
bbuHardwareVpdSubManufacturerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbuHardwareVpdSubManufacturerId.setStatus("mandatory")
_BbuHardwareVpdClei_Type = OctetString
_BbuHardwareVpdClei_Object = MibTableColumn
bbuHardwareVpdClei = _BbuHardwareVpdClei_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 21, 1, 1, 15),
    _BbuHardwareVpdClei_Type()
)
bbuHardwareVpdClei.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbuHardwareVpdClei.setStatus("mandatory")
_InventoryManagementActivityVpdTable_Object = MibTable
inventoryManagementActivityVpdTable = _InventoryManagementActivityVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22)
)
if mibBuilder.loadTexts:
    inventoryManagementActivityVpdTable.setStatus("mandatory")
_InventoryManagementActivityVpdEntry_Object = MibTableRow
inventoryManagementActivityVpdEntry = _InventoryManagementActivityVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1)
)
inventoryManagementActivityVpdEntry.setIndexNames(
    (0, "BLADE-MIB", "componentLevelActivityVpdIndex"),
)
if mibBuilder.loadTexts:
    inventoryManagementActivityVpdEntry.setStatus("mandatory")
_ComponentLevelActivityVpdIndex_Type = Integer32
_ComponentLevelActivityVpdIndex_Object = MibTableColumn
componentLevelActivityVpdIndex = _ComponentLevelActivityVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 1),
    _ComponentLevelActivityVpdIndex_Type()
)
componentLevelActivityVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentLevelActivityVpdIndex.setStatus("mandatory")
_ComponentLevelActivityVpdFruNumber_Type = OctetString
_ComponentLevelActivityVpdFruNumber_Object = MibTableColumn
componentLevelActivityVpdFruNumber = _ComponentLevelActivityVpdFruNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 2),
    _ComponentLevelActivityVpdFruNumber_Type()
)
componentLevelActivityVpdFruNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentLevelActivityVpdFruNumber.setStatus("mandatory")
_ComponentLevelActivityVpdSerialNumber_Type = OctetString
_ComponentLevelActivityVpdSerialNumber_Object = MibTableColumn
componentLevelActivityVpdSerialNumber = _ComponentLevelActivityVpdSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 3),
    _ComponentLevelActivityVpdSerialNumber_Type()
)
componentLevelActivityVpdSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentLevelActivityVpdSerialNumber.setStatus("mandatory")
_ComponentLevelActivityVpdManufacturingId_Type = OctetString
_ComponentLevelActivityVpdManufacturingId_Object = MibTableColumn
componentLevelActivityVpdManufacturingId = _ComponentLevelActivityVpdManufacturingId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 4),
    _ComponentLevelActivityVpdManufacturingId_Type()
)
componentLevelActivityVpdManufacturingId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentLevelActivityVpdManufacturingId.setStatus("mandatory")
_ComponentLevelActivityVpdBayNumber_Type = OctetString
_ComponentLevelActivityVpdBayNumber_Object = MibTableColumn
componentLevelActivityVpdBayNumber = _ComponentLevelActivityVpdBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 5),
    _ComponentLevelActivityVpdBayNumber_Type()
)
componentLevelActivityVpdBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentLevelActivityVpdBayNumber.setStatus("mandatory")
_ComponentLevelActivityVpdAction_Type = OctetString
_ComponentLevelActivityVpdAction_Object = MibTableColumn
componentLevelActivityVpdAction = _ComponentLevelActivityVpdAction_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 9),
    _ComponentLevelActivityVpdAction_Type()
)
componentLevelActivityVpdAction.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentLevelActivityVpdAction.setStatus("mandatory")
_ComponentLevelActivityVpdTimestamp_Type = OctetString
_ComponentLevelActivityVpdTimestamp_Object = MibTableColumn
componentLevelActivityVpdTimestamp = _ComponentLevelActivityVpdTimestamp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 10),
    _ComponentLevelActivityVpdTimestamp_Type()
)
componentLevelActivityVpdTimestamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentLevelActivityVpdTimestamp.setStatus("mandatory")
_ComponentLevelActivityVpdModuleName_Type = OctetString
_ComponentLevelActivityVpdModuleName_Object = MibTableColumn
componentLevelActivityVpdModuleName = _ComponentLevelActivityVpdModuleName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 12),
    _ComponentLevelActivityVpdModuleName_Type()
)
componentLevelActivityVpdModuleName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentLevelActivityVpdModuleName.setStatus("mandatory")
_ReloadVpdData_ObjectIdentity = ObjectIdentity
reloadVpdData = _ReloadVpdData_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 23)
)


class _ReloadAllVpdData_Type(Integer32):
    """Custom type reloadAllVpdData based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_ReloadAllVpdData_Type.__name__ = "Integer32"
_ReloadAllVpdData_Object = MibScalar
reloadAllVpdData = _ReloadAllVpdData_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 23, 1),
    _ReloadAllVpdData_Type()
)
reloadAllVpdData.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    reloadAllVpdData.setStatus("mandatory")


class _ReloadFwVpdData_Type(Integer32):
    """Custom type reloadFwVpdData based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_ReloadFwVpdData_Type.__name__ = "Integer32"
_ReloadFwVpdData_Object = MibScalar
reloadFwVpdData = _ReloadFwVpdData_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 23, 2),
    _ReloadFwVpdData_Type()
)
reloadFwVpdData.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    reloadFwVpdData.setStatus("mandatory")


class _ReloadHwVpdData_Type(Integer32):
    """Custom type reloadHwVpdData based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_ReloadHwVpdData_Type.__name__ = "Integer32"
_ReloadHwVpdData_Object = MibScalar
reloadHwVpdData = _ReloadHwVpdData_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 23, 3),
    _ReloadHwVpdData_Type()
)
reloadHwVpdData.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    reloadHwVpdData.setStatus("mandatory")


class _ReloadMACAddress_Type(Integer32):
    """Custom type reloadMACAddress based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_ReloadMACAddress_Type.__name__ = "Integer32"
_ReloadMACAddress_Object = MibScalar
reloadMACAddress = _ReloadMACAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 23, 4),
    _ReloadMACAddress_Type()
)
reloadMACAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    reloadMACAddress.setStatus("mandatory")


class _ReloadWwnGuidVpdData_Type(Integer32):
    """Custom type reloadWwnGuidVpdData based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_ReloadWwnGuidVpdData_Type.__name__ = "Integer32"
_ReloadWwnGuidVpdData_Object = MibScalar
reloadWwnGuidVpdData = _ReloadWwnGuidVpdData_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 23, 5),
    _ReloadWwnGuidVpdData_Type()
)
reloadWwnGuidVpdData.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    reloadWwnGuidVpdData.setStatus("mandatory")
_AirFilter_ObjectIdentity = ObjectIdentity
airFilter = _AirFilter_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 22)
)
_PassiveAirFilter_ObjectIdentity = ObjectIdentity
passiveAirFilter = _PassiveAirFilter_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 22, 1)
)


class _PassiveAirFilterStatus_Type(Integer32):
    """Custom type passiveAirFilterStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1),
          ("reset", 2))
    )


_PassiveAirFilterStatus_Type.__name__ = "Integer32"
_PassiveAirFilterStatus_Object = MibScalar
passiveAirFilterStatus = _PassiveAirFilterStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 22, 1, 1),
    _PassiveAirFilterStatus_Type()
)
passiveAirFilterStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    passiveAirFilterStatus.setStatus("mandatory")


class _PassiveAirFilterMonthFreq_Type(Integer32):
    """Custom type passiveAirFilterMonthFreq based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              6)
        )
    )
    namedValues = NamedValues(
        *(("oneMonth", 1),
          ("threeMonths", 3),
          ("sixMonths", 6))
    )


_PassiveAirFilterMonthFreq_Type.__name__ = "Integer32"
_PassiveAirFilterMonthFreq_Object = MibScalar
passiveAirFilterMonthFreq = _PassiveAirFilterMonthFreq_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 22, 1, 2),
    _PassiveAirFilterMonthFreq_Type()
)
passiveAirFilterMonthFreq.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    passiveAirFilterMonthFreq.setStatus("mandatory")


class _PassiveAirFilterReplaceDate_Type(OctetString):
    """Custom type passiveAirFilterReplaceDate based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 30),
    )


_PassiveAirFilterReplaceDate_Type.__name__ = "OctetString"
_PassiveAirFilterReplaceDate_Object = MibScalar
passiveAirFilterReplaceDate = _PassiveAirFilterReplaceDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 22, 1, 3),
    _PassiveAirFilterReplaceDate_Type()
)
passiveAirFilterReplaceDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    passiveAirFilterReplaceDate.setStatus("mandatory")
_ComponentInformation_ObjectIdentity = ObjectIdentity
componentInformation = _ComponentInformation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23)
)
_ComponentInventory_ObjectIdentity = ObjectIdentity
componentInventory = _ComponentInventory_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1)
)
_ComponentInventoryTable_Object = MibTable
componentInventoryTable = _ComponentInventoryTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1)
)
if mibBuilder.loadTexts:
    componentInventoryTable.setStatus("mandatory")
_ComponentInventoryEntry_Object = MibTableRow
componentInventoryEntry = _ComponentInventoryEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1)
)
componentInventoryEntry.setIndexNames(
    (0, "BLADE-MIB", "componentInventoryTopologyPath"),
)
if mibBuilder.loadTexts:
    componentInventoryEntry.setStatus("mandatory")


class _ComponentInventoryTopologyPath_Type(OctetString):
    """Custom type componentInventoryTopologyPath based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_ComponentInventoryTopologyPath_Type.__name__ = "OctetString"
_ComponentInventoryTopologyPath_Object = MibTableColumn
componentInventoryTopologyPath = _ComponentInventoryTopologyPath_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 1),
    _ComponentInventoryTopologyPath_Type()
)
componentInventoryTopologyPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryTopologyPath.setStatus("mandatory")
_ComponentInventoryInstance_Type = Integer32
_ComponentInventoryInstance_Object = MibTableColumn
componentInventoryInstance = _ComponentInventoryInstance_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 2),
    _ComponentInventoryInstance_Type()
)
componentInventoryInstance.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryInstance.setStatus("mandatory")
_ComponentInventoryDescription_Type = OctetString
_ComponentInventoryDescription_Object = MibTableColumn
componentInventoryDescription = _ComponentInventoryDescription_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 3),
    _ComponentInventoryDescription_Type()
)
componentInventoryDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryDescription.setStatus("mandatory")
_ComponentInventoryMachineTypeModel_Type = OctetString
_ComponentInventoryMachineTypeModel_Object = MibTableColumn
componentInventoryMachineTypeModel = _ComponentInventoryMachineTypeModel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 4),
    _ComponentInventoryMachineTypeModel_Type()
)
componentInventoryMachineTypeModel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryMachineTypeModel.setStatus("mandatory")
_ComponentInventoryMachineSerial_Type = OctetString
_ComponentInventoryMachineSerial_Object = MibTableColumn
componentInventoryMachineSerial = _ComponentInventoryMachineSerial_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 5),
    _ComponentInventoryMachineSerial_Type()
)
componentInventoryMachineSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryMachineSerial.setStatus("mandatory")
_ComponentInventoryAssetID_Type = OctetString
_ComponentInventoryAssetID_Object = MibTableColumn
componentInventoryAssetID = _ComponentInventoryAssetID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 6),
    _ComponentInventoryAssetID_Type()
)
componentInventoryAssetID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryAssetID.setStatus("mandatory")
_ComponentInventoryPartNumber_Type = OctetString
_ComponentInventoryPartNumber_Object = MibTableColumn
componentInventoryPartNumber = _ComponentInventoryPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 7),
    _ComponentInventoryPartNumber_Type()
)
componentInventoryPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryPartNumber.setStatus("mandatory")
_ComponentInventoryFRUNumber_Type = OctetString
_ComponentInventoryFRUNumber_Object = MibTableColumn
componentInventoryFRUNumber = _ComponentInventoryFRUNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 8),
    _ComponentInventoryFRUNumber_Type()
)
componentInventoryFRUNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryFRUNumber.setStatus("mandatory")
_ComponentInventoryFRUSerialNumber_Type = OctetString
_ComponentInventoryFRUSerialNumber_Object = MibTableColumn
componentInventoryFRUSerialNumber = _ComponentInventoryFRUSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 9),
    _ComponentInventoryFRUSerialNumber_Type()
)
componentInventoryFRUSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryFRUSerialNumber.setStatus("mandatory")
_ComponentInventoryManufactureID_Type = OctetString
_ComponentInventoryManufactureID_Object = MibTableColumn
componentInventoryManufactureID = _ComponentInventoryManufactureID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 10),
    _ComponentInventoryManufactureID_Type()
)
componentInventoryManufactureID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryManufactureID.setStatus("mandatory")
_ComponentInventoryHardwareRevision_Type = OctetString
_ComponentInventoryHardwareRevision_Object = MibTableColumn
componentInventoryHardwareRevision = _ComponentInventoryHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 11),
    _ComponentInventoryHardwareRevision_Type()
)
componentInventoryHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryHardwareRevision.setStatus("mandatory")
_ComponentInventoryManufactureDate_Type = OctetString
_ComponentInventoryManufactureDate_Object = MibTableColumn
componentInventoryManufactureDate = _ComponentInventoryManufactureDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 12),
    _ComponentInventoryManufactureDate_Type()
)
componentInventoryManufactureDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryManufactureDate.setStatus("mandatory")
_ComponentInventoryUUID_Type = OctetString
_ComponentInventoryUUID_Object = MibTableColumn
componentInventoryUUID = _ComponentInventoryUUID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 13),
    _ComponentInventoryUUID_Type()
)
componentInventoryUUID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryUUID.setStatus("mandatory")
_ComponentInventoryProductID_Type = OctetString
_ComponentInventoryProductID_Object = MibTableColumn
componentInventoryProductID = _ComponentInventoryProductID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 14),
    _ComponentInventoryProductID_Type()
)
componentInventoryProductID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryProductID.setStatus("mandatory")
_ComponentInventorySubManufactureID_Type = OctetString
_ComponentInventorySubManufactureID_Object = MibTableColumn
componentInventorySubManufactureID = _ComponentInventorySubManufactureID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 15),
    _ComponentInventorySubManufactureID_Type()
)
componentInventorySubManufactureID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventorySubManufactureID.setStatus("mandatory")
_ComponentInventoryCLEI_Type = OctetString
_ComponentInventoryCLEI_Object = MibTableColumn
componentInventoryCLEI = _ComponentInventoryCLEI_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 16),
    _ComponentInventoryCLEI_Type()
)
componentInventoryCLEI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryCLEI.setStatus("mandatory")
_ComponentInventoryAssetTag_Type = OctetString
_ComponentInventoryAssetTag_Object = MibTableColumn
componentInventoryAssetTag = _ComponentInventoryAssetTag_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 17),
    _ComponentInventoryAssetTag_Type()
)
componentInventoryAssetTag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryAssetTag.setStatus("mandatory")
_ComponentInventorySpeed_Type = OctetString
_ComponentInventorySpeed_Object = MibTableColumn
componentInventorySpeed = _ComponentInventorySpeed_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 18),
    _ComponentInventorySpeed_Type()
)
componentInventorySpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventorySpeed.setStatus("mandatory")
_ComponentInventoryIdentifier_Type = OctetString
_ComponentInventoryIdentifier_Object = MibTableColumn
componentInventoryIdentifier = _ComponentInventoryIdentifier_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 19),
    _ComponentInventoryIdentifier_Type()
)
componentInventoryIdentifier.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryIdentifier.setStatus("mandatory")
_ComponentInventorySize_Type = Integer32
_ComponentInventorySize_Object = MibTableColumn
componentInventorySize = _ComponentInventorySize_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 20),
    _ComponentInventorySize_Type()
)
componentInventorySize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventorySize.setStatus("mandatory")


class _ComponentInventoryMemoryType_Type(Integer32):
    """Custom type componentInventoryMemoryType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("fpmdram", 1),
          ("edo", 2),
          ("edodram", 3),
          ("sdram", 4),
          ("multiplexedram", 5),
          ("ddrsgram", 6),
          ("ddrsdram", 7),
          ("ddr2sdrm", 8),
          ("ddr3sdram", 9))
    )


_ComponentInventoryMemoryType_Type.__name__ = "Integer32"
_ComponentInventoryMemoryType_Object = MibTableColumn
componentInventoryMemoryType = _ComponentInventoryMemoryType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 21),
    _ComponentInventoryMemoryType_Type()
)
componentInventoryMemoryType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryMemoryType.setStatus("mandatory")
_ComponentInventoryProductName_Type = OctetString
_ComponentInventoryProductName_Object = MibTableColumn
componentInventoryProductName = _ComponentInventoryProductName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 22),
    _ComponentInventoryProductName_Type()
)
componentInventoryProductName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryProductName.setStatus("mandatory")
_ComponentInventoryProductVersion_Type = OctetString
_ComponentInventoryProductVersion_Object = MibTableColumn
componentInventoryProductVersion = _ComponentInventoryProductVersion_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 23),
    _ComponentInventoryProductVersion_Type()
)
componentInventoryProductVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryProductVersion.setStatus("mandatory")


class _ComponentInventoryProcessorType_Type(Integer32):
    """Custom type componentInventoryProcessorType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("unknown", 2),
          ("central", 3),
          ("math", 4),
          ("dsp", 5),
          ("video", 6))
    )


_ComponentInventoryProcessorType_Type.__name__ = "Integer32"
_ComponentInventoryProcessorType_Object = MibTableColumn
componentInventoryProcessorType = _ComponentInventoryProcessorType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 24),
    _ComponentInventoryProcessorType_Type()
)
componentInventoryProcessorType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryProcessorType.setStatus("mandatory")
_ComponentInventoryProcessorFamily_Type = OctetString
_ComponentInventoryProcessorFamily_Object = MibTableColumn
componentInventoryProcessorFamily = _ComponentInventoryProcessorFamily_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 25),
    _ComponentInventoryProcessorFamily_Type()
)
componentInventoryProcessorFamily.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryProcessorFamily.setStatus("mandatory")
_ComponentInventoryProcessorCores_Type = OctetString
_ComponentInventoryProcessorCores_Object = MibTableColumn
componentInventoryProcessorCores = _ComponentInventoryProcessorCores_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 26),
    _ComponentInventoryProcessorCores_Type()
)
componentInventoryProcessorCores.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryProcessorCores.setStatus("mandatory")
_ComponentInventoryProcessorThreads_Type = OctetString
_ComponentInventoryProcessorThreads_Object = MibTableColumn
componentInventoryProcessorThreads = _ComponentInventoryProcessorThreads_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 27),
    _ComponentInventoryProcessorThreads_Type()
)
componentInventoryProcessorThreads.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryProcessorThreads.setStatus("mandatory")
_ComponentInventoryProcessorL1DCache_Type = OctetString
_ComponentInventoryProcessorL1DCache_Object = MibTableColumn
componentInventoryProcessorL1DCache = _ComponentInventoryProcessorL1DCache_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 28),
    _ComponentInventoryProcessorL1DCache_Type()
)
componentInventoryProcessorL1DCache.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryProcessorL1DCache.setStatus("mandatory")
_ComponentInventoryProcessorL1ICache_Type = OctetString
_ComponentInventoryProcessorL1ICache_Object = MibTableColumn
componentInventoryProcessorL1ICache = _ComponentInventoryProcessorL1ICache_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 29),
    _ComponentInventoryProcessorL1ICache_Type()
)
componentInventoryProcessorL1ICache.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryProcessorL1ICache.setStatus("mandatory")
_ComponentInventoryProcessorL2Cache_Type = OctetString
_ComponentInventoryProcessorL2Cache_Object = MibTableColumn
componentInventoryProcessorL2Cache = _ComponentInventoryProcessorL2Cache_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 30),
    _ComponentInventoryProcessorL2Cache_Type()
)
componentInventoryProcessorL2Cache.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryProcessorL2Cache.setStatus("mandatory")
_ComponentInventoryProcessorL3Cache_Type = OctetString
_ComponentInventoryProcessorL3Cache_Object = MibTableColumn
componentInventoryProcessorL3Cache = _ComponentInventoryProcessorL3Cache_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 31),
    _ComponentInventoryProcessorL3Cache_Type()
)
componentInventoryProcessorL3Cache.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryProcessorL3Cache.setStatus("mandatory")
_ComponentInventoryProcessorVoltage_Type = OctetString
_ComponentInventoryProcessorVoltage_Object = MibTableColumn
componentInventoryProcessorVoltage = _ComponentInventoryProcessorVoltage_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 32),
    _ComponentInventoryProcessorVoltage_Type()
)
componentInventoryProcessorVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryProcessorVoltage.setStatus("mandatory")
_ComponentInventoryProcessorExtClock_Type = OctetString
_ComponentInventoryProcessorExtClock_Object = MibTableColumn
componentInventoryProcessorExtClock = _ComponentInventoryProcessorExtClock_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 33),
    _ComponentInventoryProcessorExtClock_Type()
)
componentInventoryProcessorExtClock.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryProcessorExtClock.setStatus("mandatory")
_ComponentInventoryProcessorDataWidth_Type = OctetString
_ComponentInventoryProcessorDataWidth_Object = MibTableColumn
componentInventoryProcessorDataWidth = _ComponentInventoryProcessorDataWidth_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 34),
    _ComponentInventoryProcessorDataWidth_Type()
)
componentInventoryProcessorDataWidth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryProcessorDataWidth.setStatus("mandatory")
_ComponentInventoryManufactureIDNum_Type = Integer32
_ComponentInventoryManufactureIDNum_Object = MibTableColumn
componentInventoryManufactureIDNum = _ComponentInventoryManufactureIDNum_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 35),
    _ComponentInventoryManufactureIDNum_Type()
)
componentInventoryManufactureIDNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryManufactureIDNum.setStatus("mandatory")
_ComponentFirmware_ObjectIdentity = ObjectIdentity
componentFirmware = _ComponentFirmware_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2)
)
_ComponentFirmwareTable_Object = MibTable
componentFirmwareTable = _ComponentFirmwareTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1)
)
if mibBuilder.loadTexts:
    componentFirmwareTable.setStatus("mandatory")
_ComponentFirmwareEntry_Object = MibTableRow
componentFirmwareEntry = _ComponentFirmwareEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1)
)
componentFirmwareEntry.setIndexNames(
    (0, "BLADE-MIB", "componentFirmwareTopologyPath"),
    (0, "BLADE-MIB", "componentFirmwareIndex"),
)
if mibBuilder.loadTexts:
    componentFirmwareEntry.setStatus("mandatory")


class _ComponentFirmwareTopologyPath_Type(OctetString):
    """Custom type componentFirmwareTopologyPath based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_ComponentFirmwareTopologyPath_Type.__name__ = "OctetString"
_ComponentFirmwareTopologyPath_Object = MibTableColumn
componentFirmwareTopologyPath = _ComponentFirmwareTopologyPath_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 1),
    _ComponentFirmwareTopologyPath_Type()
)
componentFirmwareTopologyPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentFirmwareTopologyPath.setStatus("mandatory")
_ComponentFirmwareIndex_Type = Integer32
_ComponentFirmwareIndex_Object = MibTableColumn
componentFirmwareIndex = _ComponentFirmwareIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 2),
    _ComponentFirmwareIndex_Type()
)
componentFirmwareIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentFirmwareIndex.setStatus("mandatory")
_ComponentFirmwareComponentInstance_Type = Integer32
_ComponentFirmwareComponentInstance_Object = MibTableColumn
componentFirmwareComponentInstance = _ComponentFirmwareComponentInstance_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 3),
    _ComponentFirmwareComponentInstance_Type()
)
componentFirmwareComponentInstance.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentFirmwareComponentInstance.setStatus("mandatory")
_ComponentFirmwareComponentDescription_Type = OctetString
_ComponentFirmwareComponentDescription_Object = MibTableColumn
componentFirmwareComponentDescription = _ComponentFirmwareComponentDescription_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 4),
    _ComponentFirmwareComponentDescription_Type()
)
componentFirmwareComponentDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentFirmwareComponentDescription.setStatus("mandatory")
_ComponentFirmwareType_Type = OctetString
_ComponentFirmwareType_Object = MibTableColumn
componentFirmwareType = _ComponentFirmwareType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 5),
    _ComponentFirmwareType_Type()
)
componentFirmwareType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentFirmwareType.setStatus("mandatory")
_ComponentFirmwareBuildID_Type = OctetString
_ComponentFirmwareBuildID_Object = MibTableColumn
componentFirmwareBuildID = _ComponentFirmwareBuildID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 6),
    _ComponentFirmwareBuildID_Type()
)
componentFirmwareBuildID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentFirmwareBuildID.setStatus("mandatory")
_ComponentFirmwareReleaseDate_Type = OctetString
_ComponentFirmwareReleaseDate_Object = MibTableColumn
componentFirmwareReleaseDate = _ComponentFirmwareReleaseDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 7),
    _ComponentFirmwareReleaseDate_Type()
)
componentFirmwareReleaseDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentFirmwareReleaseDate.setStatus("mandatory")
_ComponentFirmwareFilename_Type = OctetString
_ComponentFirmwareFilename_Object = MibTableColumn
componentFirmwareFilename = _ComponentFirmwareFilename_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 8),
    _ComponentFirmwareFilename_Type()
)
componentFirmwareFilename.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentFirmwareFilename.setStatus("mandatory")
_ComponentFirmwareRevision_Type = OctetString
_ComponentFirmwareRevision_Object = MibTableColumn
componentFirmwareRevision = _ComponentFirmwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 9),
    _ComponentFirmwareRevision_Type()
)
componentFirmwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentFirmwareRevision.setStatus("mandatory")
_ComponentFirmwareRevisionMajor_Type = Integer32
_ComponentFirmwareRevisionMajor_Object = MibTableColumn
componentFirmwareRevisionMajor = _ComponentFirmwareRevisionMajor_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 10),
    _ComponentFirmwareRevisionMajor_Type()
)
componentFirmwareRevisionMajor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentFirmwareRevisionMajor.setStatus("mandatory")
_ComponentFirmwareRevisionMinor_Type = Integer32
_ComponentFirmwareRevisionMinor_Object = MibTableColumn
componentFirmwareRevisionMinor = _ComponentFirmwareRevisionMinor_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 11),
    _ComponentFirmwareRevisionMinor_Type()
)
componentFirmwareRevisionMinor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentFirmwareRevisionMinor.setStatus("mandatory")
_ComponentFirmwareLevelStatus_Type = OctetString
_ComponentFirmwareLevelStatus_Object = MibTableColumn
componentFirmwareLevelStatus = _ComponentFirmwareLevelStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 12),
    _ComponentFirmwareLevelStatus_Type()
)
componentFirmwareLevelStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentFirmwareLevelStatus.setStatus("mandatory")
_ComponentFirmwarePendingBuildID_Type = OctetString
_ComponentFirmwarePendingBuildID_Object = MibTableColumn
componentFirmwarePendingBuildID = _ComponentFirmwarePendingBuildID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 13),
    _ComponentFirmwarePendingBuildID_Type()
)
componentFirmwarePendingBuildID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentFirmwarePendingBuildID.setStatus("mandatory")
_ComponentFirmwarePendingReleaseDate_Type = OctetString
_ComponentFirmwarePendingReleaseDate_Object = MibTableColumn
componentFirmwarePendingReleaseDate = _ComponentFirmwarePendingReleaseDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 14),
    _ComponentFirmwarePendingReleaseDate_Type()
)
componentFirmwarePendingReleaseDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentFirmwarePendingReleaseDate.setStatus("mandatory")
_ComponentFirmwarePendingRevision_Type = OctetString
_ComponentFirmwarePendingRevision_Object = MibTableColumn
componentFirmwarePendingRevision = _ComponentFirmwarePendingRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 15),
    _ComponentFirmwarePendingRevision_Type()
)
componentFirmwarePendingRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentFirmwarePendingRevision.setStatus("mandatory")


class _ComponentFirmwareTypeID_Type(Integer32):
    """Custom type componentFirmwareTypeID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              41,
              42,
              43,
              61,
              62,
              81,
              255)
        )
    )
    namedValues = NamedValues(
        *(("bladeFwBios", 1),
          ("bladeDiagnostics", 2),
          ("bladeSysMgmtProcessor", 3),
          ("bladeFpga", 4),
          ("bladecKVM", 5),
          ("switchModuleMainAppl1", 41),
          ("switchModuleMainAppl2", 42),
          ("switchModuleBootROM", 43),
          ("mgmtModuleMainAppl", 61),
          ("mgmtModuleMainApplPendingRestart", 62),
          ("fanController", 81),
          ("unknown", 255))
    )


_ComponentFirmwareTypeID_Type.__name__ = "Integer32"
_ComponentFirmwareTypeID_Object = MibTableColumn
componentFirmwareTypeID = _ComponentFirmwareTypeID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 20),
    _ComponentFirmwareTypeID_Type()
)
componentFirmwareTypeID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentFirmwareTypeID.setStatus("mandatory")


class _ComponentInventoryReady_Type(Integer32):
    """Custom type componentInventoryReady based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("notReady", 0),
          ("ready", 1))
    )


_ComponentInventoryReady_Type.__name__ = "Integer32"
_ComponentInventoryReady_Object = MibScalar
componentInventoryReady = _ComponentInventoryReady_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 3),
    _ComponentInventoryReady_Type()
)
componentInventoryReady.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryReady.setStatus("mandatory")
_ComponentDriveTable_Object = MibTable
componentDriveTable = _ComponentDriveTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 10)
)
if mibBuilder.loadTexts:
    componentDriveTable.setStatus("mandatory")
_ComponentDriveEntry_Object = MibTableRow
componentDriveEntry = _ComponentDriveEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 10, 1)
)
componentDriveEntry.setIndexNames(
    (0, "BLADE-MIB", "componentDriveTopologyPath"),
)
if mibBuilder.loadTexts:
    componentDriveEntry.setStatus("mandatory")


class _ComponentDriveTopologyPath_Type(OctetString):
    """Custom type componentDriveTopologyPath based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_ComponentDriveTopologyPath_Type.__name__ = "OctetString"
_ComponentDriveTopologyPath_Object = MibTableColumn
componentDriveTopologyPath = _ComponentDriveTopologyPath_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 10, 1, 1),
    _ComponentDriveTopologyPath_Type()
)
componentDriveTopologyPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentDriveTopologyPath.setStatus("mandatory")
_ComponentDriveDescription_Type = OctetString
_ComponentDriveDescription_Object = MibTableColumn
componentDriveDescription = _ComponentDriveDescription_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 10, 1, 2),
    _ComponentDriveDescription_Type()
)
componentDriveDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentDriveDescription.setStatus("mandatory")
_ErrorLogs_ObjectIdentity = ObjectIdentity
errorLogs = _ErrorLogs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3)
)
_EventLog_ObjectIdentity = ObjectIdentity
eventLog = _EventLog_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4)
)
_ReadEventLogTable_Object = MibTable
readEventLogTable = _ReadEventLogTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 2)
)
if mibBuilder.loadTexts:
    readEventLogTable.setStatus("mandatory")
_ReadEventLogEntry_Object = MibTableRow
readEventLogEntry = _ReadEventLogEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 2, 1)
)
readEventLogEntry.setIndexNames(
    (0, "BLADE-MIB", "readEventLogIndex"),
)
if mibBuilder.loadTexts:
    readEventLogEntry.setStatus("mandatory")
_ReadEventLogIndex_Type = Integer32
_ReadEventLogIndex_Object = MibTableColumn
readEventLogIndex = _ReadEventLogIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 2, 1, 1),
    _ReadEventLogIndex_Type()
)
readEventLogIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    readEventLogIndex.setStatus("mandatory")
_ReadEventLogString_Type = OctetString
_ReadEventLogString_Object = MibTableColumn
readEventLogString = _ReadEventLogString_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 2, 1, 2),
    _ReadEventLogString_Type()
)
readEventLogString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    readEventLogString.setStatus("mandatory")


class _ClearEventLog_Type(Integer32):
    """Custom type clearEventLog based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_ClearEventLog_Type.__name__ = "Integer32"
_ClearEventLog_Object = MibScalar
clearEventLog = _ClearEventLog_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 3),
    _ClearEventLog_Type()
)
clearEventLog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    clearEventLog.setStatus("mandatory")


class _MonitorLogStateEvents_Type(Integer32):
    """Custom type monitorLogStateEvents based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MonitorLogStateEvents_Type.__name__ = "Integer32"
_MonitorLogStateEvents_Object = MibScalar
monitorLogStateEvents = _MonitorLogStateEvents_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 4),
    _MonitorLogStateEvents_Type()
)
monitorLogStateEvents.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    monitorLogStateEvents.setStatus("mandatory")
_ReadEnhancedEventLogTable_Object = MibTable
readEnhancedEventLogTable = _ReadEnhancedEventLogTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 6)
)
if mibBuilder.loadTexts:
    readEnhancedEventLogTable.setStatus("mandatory")
_ReadEnhancedEventLogEntry_Object = MibTableRow
readEnhancedEventLogEntry = _ReadEnhancedEventLogEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 6, 1)
)
readEnhancedEventLogEntry.setIndexNames(
    (0, "BLADE-MIB", "readEnhancedEventLogNumber"),
)
if mibBuilder.loadTexts:
    readEnhancedEventLogEntry.setStatus("mandatory")
_ReadEnhancedEventLogNumber_Type = Integer32
_ReadEnhancedEventLogNumber_Object = MibTableColumn
readEnhancedEventLogNumber = _ReadEnhancedEventLogNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 6, 1, 1),
    _ReadEnhancedEventLogNumber_Type()
)
readEnhancedEventLogNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    readEnhancedEventLogNumber.setStatus("mandatory")
_ReadEnhancedEventLogAttribute_Type = OctetString
_ReadEnhancedEventLogAttribute_Object = MibTableColumn
readEnhancedEventLogAttribute = _ReadEnhancedEventLogAttribute_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 6, 1, 2),
    _ReadEnhancedEventLogAttribute_Type()
)
readEnhancedEventLogAttribute.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    readEnhancedEventLogAttribute.setStatus("mandatory")
_ReadEnhancedEventLogMessage_Type = OctetString
_ReadEnhancedEventLogMessage_Object = MibTableColumn
readEnhancedEventLogMessage = _ReadEnhancedEventLogMessage_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 6, 1, 3),
    _ReadEnhancedEventLogMessage_Type()
)
readEnhancedEventLogMessage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    readEnhancedEventLogMessage.setStatus("mandatory")
_ReadAuditLogTable_Object = MibTable
readAuditLogTable = _ReadAuditLogTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 10)
)
if mibBuilder.loadTexts:
    readAuditLogTable.setStatus("mandatory")
_ReadAuditLogEntry_Object = MibTableRow
readAuditLogEntry = _ReadAuditLogEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 10, 1)
)
readAuditLogEntry.setIndexNames(
    (0, "BLADE-MIB", "readAuditLogNumber"),
)
if mibBuilder.loadTexts:
    readAuditLogEntry.setStatus("mandatory")
_ReadAuditLogNumber_Type = Integer32
_ReadAuditLogNumber_Object = MibTableColumn
readAuditLogNumber = _ReadAuditLogNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 10, 1, 1),
    _ReadAuditLogNumber_Type()
)
readAuditLogNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    readAuditLogNumber.setStatus("mandatory")
_ReadAuditLogAttribute_Type = OctetString
_ReadAuditLogAttribute_Object = MibTableColumn
readAuditLogAttribute = _ReadAuditLogAttribute_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 10, 1, 2),
    _ReadAuditLogAttribute_Type()
)
readAuditLogAttribute.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    readAuditLogAttribute.setStatus("mandatory")
_ReadAuditLogMessage_Type = OctetString
_ReadAuditLogMessage_Object = MibTableColumn
readAuditLogMessage = _ReadAuditLogMessage_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 10, 1, 3),
    _ReadAuditLogMessage_Type()
)
readAuditLogMessage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    readAuditLogMessage.setStatus("mandatory")


class _ClearAuditLog_Type(Integer32):
    """Custom type clearAuditLog based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_ClearAuditLog_Type.__name__ = "Integer32"
_ClearAuditLog_Object = MibScalar
clearAuditLog = _ClearAuditLog_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 11),
    _ClearAuditLog_Type()
)
clearAuditLog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    clearAuditLog.setStatus("mandatory")
_ReadSystemLogTable_Object = MibTable
readSystemLogTable = _ReadSystemLogTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 12)
)
if mibBuilder.loadTexts:
    readSystemLogTable.setStatus("mandatory")
_ReadSystemLogEntry_Object = MibTableRow
readSystemLogEntry = _ReadSystemLogEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 12, 1)
)
readSystemLogEntry.setIndexNames(
    (0, "BLADE-MIB", "readSystemLogNumber"),
)
if mibBuilder.loadTexts:
    readSystemLogEntry.setStatus("mandatory")
_ReadSystemLogNumber_Type = Integer32
_ReadSystemLogNumber_Object = MibTableColumn
readSystemLogNumber = _ReadSystemLogNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 12, 1, 1),
    _ReadSystemLogNumber_Type()
)
readSystemLogNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    readSystemLogNumber.setStatus("mandatory")
_ReadSystemLogAttribute_Type = OctetString
_ReadSystemLogAttribute_Object = MibTableColumn
readSystemLogAttribute = _ReadSystemLogAttribute_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 12, 1, 2),
    _ReadSystemLogAttribute_Type()
)
readSystemLogAttribute.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    readSystemLogAttribute.setStatus("mandatory")
_ReadSystemLogMessage_Type = OctetString
_ReadSystemLogMessage_Object = MibTableColumn
readSystemLogMessage = _ReadSystemLogMessage_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 12, 1, 3),
    _ReadSystemLogMessage_Type()
)
readSystemLogMessage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    readSystemLogMessage.setStatus("mandatory")


class _ClearSystemLog_Type(Integer32):
    """Custom type clearSystemLog based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_ClearSystemLog_Type.__name__ = "Integer32"
_ClearSystemLog_Object = MibScalar
clearSystemLog = _ClearSystemLog_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 13),
    _ClearSystemLog_Type()
)
clearSystemLog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    clearSystemLog.setStatus("mandatory")
_ConfigureSP_ObjectIdentity = ObjectIdentity
configureSP = _ConfigureSP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4)
)
_RemoteAccessConfig_ObjectIdentity = ObjectIdentity
remoteAccessConfig = _RemoteAccessConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1)
)
_GeneralRemoteCfg_ObjectIdentity = ObjectIdentity
generalRemoteCfg = _GeneralRemoteCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1)
)


class _RemoteAlertRetryDelay_Type(Integer32):
    """Custom type remoteAlertRetryDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              30,
              60,
              90,
              120,
              150,
              180,
              210,
              240)
        )
    )
    namedValues = NamedValues(
        *(("noDelay", 0),
          ("oneHalfMinute", 30),
          ("oneMinute", 60),
          ("oneAndHalfMinutes", 90),
          ("twoMinutes", 120),
          ("twoAndHalfMinutes", 150),
          ("threeMinutes", 180),
          ("threeAndHalfMinutes", 210),
          ("fourMinutes", 240))
    )


_RemoteAlertRetryDelay_Type.__name__ = "Integer32"
_RemoteAlertRetryDelay_Object = MibScalar
remoteAlertRetryDelay = _RemoteAlertRetryDelay_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 3),
    _RemoteAlertRetryDelay_Type()
)
remoteAlertRetryDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remoteAlertRetryDelay.setStatus("mandatory")


class _RemoteAlertRetryCount_Type(Integer32):
    """Custom type remoteAlertRetryCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("noretry", 0),
          ("retry1", 1),
          ("retry2", 2),
          ("retry3", 3),
          ("retry4", 4),
          ("retry5", 5),
          ("retry6", 6),
          ("retry7", 7),
          ("retry8", 8))
    )


_RemoteAlertRetryCount_Type.__name__ = "Integer32"
_RemoteAlertRetryCount_Object = MibScalar
remoteAlertRetryCount = _RemoteAlertRetryCount_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 4),
    _RemoteAlertRetryCount_Type()
)
remoteAlertRetryCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remoteAlertRetryCount.setStatus("mandatory")


class _RemoteAlertEntryDelay_Type(Integer32):
    """Custom type remoteAlertEntryDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              30,
              60,
              90,
              120,
              150,
              180,
              210,
              240)
        )
    )
    namedValues = NamedValues(
        *(("noDelay", 0),
          ("oneHalfMinute", 30),
          ("oneMinute", 60),
          ("oneAndHalfMinutes", 90),
          ("twoMinutes", 120),
          ("twoAndHalfMinutes", 150),
          ("threeMinutes", 180),
          ("threeAndHalfMinutes", 210),
          ("fourMinutes", 240))
    )


_RemoteAlertEntryDelay_Type.__name__ = "Integer32"
_RemoteAlertEntryDelay_Object = MibScalar
remoteAlertEntryDelay = _RemoteAlertEntryDelay_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 5),
    _RemoteAlertEntryDelay_Type()
)
remoteAlertEntryDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    remoteAlertEntryDelay.setStatus("deprecated")


class _RemoteAccessTamperDelay_Type(Integer32):
    """Custom type remoteAccessTamperDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              10,
              15,
              20,
              30,
              60,
              120,
              180,
              240)
        )
    )
    namedValues = NamedValues(
        *(("nowait", 0),
          ("oneMinute", 1),
          ("twoMinutes", 2),
          ("threeMinutes", 3),
          ("fourMinutes", 4),
          ("fiveMinutes", 5),
          ("sixMinutes", 6),
          ("sevenMinutes", 7),
          ("tenMinutes", 10),
          ("fifteenMinutes", 15),
          ("twentyMinutes", 20),
          ("thirtyMinutes", 30),
          ("sixtyMinutes", 60),
          ("oneTwentyMinutes", 120),
          ("oneEightyMinutes", 180),
          ("twoFortyMinutes", 240))
    )


_RemoteAccessTamperDelay_Type.__name__ = "Integer32"
_RemoteAccessTamperDelay_Object = MibScalar
remoteAccessTamperDelay = _RemoteAccessTamperDelay_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 6),
    _RemoteAccessTamperDelay_Type()
)
remoteAccessTamperDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remoteAccessTamperDelay.setStatus("deprecated")


class _UserAuthenticationMethod_Type(Integer32):
    """Custom type userAuthenticationMethod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("localOnly", 0),
          ("ldapOnly", 1),
          ("localFirstThenLdap", 2),
          ("ldapFirstThenLocal", 3))
    )


_UserAuthenticationMethod_Type.__name__ = "Integer32"
_UserAuthenticationMethod_Object = MibScalar
userAuthenticationMethod = _UserAuthenticationMethod_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 7),
    _UserAuthenticationMethod_Type()
)
userAuthenticationMethod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    userAuthenticationMethod.setStatus("mandatory")
_MaxSessionsPerLDAPUser_Type = Integer32
_MaxSessionsPerLDAPUser_Object = MibScalar
maxSessionsPerLDAPUser = _MaxSessionsPerLDAPUser_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 9),
    _MaxSessionsPerLDAPUser_Type()
)
maxSessionsPerLDAPUser.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    maxSessionsPerLDAPUser.setStatus("mandatory")


class _AuthenticationLoggingTimeout_Type(Integer32):
    """Custom type authenticationLoggingTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              255)
        )
    )
    namedValues = NamedValues(
        *(("logAll", 0),
          ("fiveSeconds", 1),
          ("thirtySeconds", 2),
          ("oneMinute", 3),
          ("fiveMinutes", 4),
          ("tenMinutes", 5),
          ("thirtyMinutes", 6),
          ("oneHour", 7),
          ("twelveHours", 8),
          ("oneDay", 9),
          ("logNone", 255))
    )


_AuthenticationLoggingTimeout_Type.__name__ = "Integer32"
_AuthenticationLoggingTimeout_Object = MibScalar
authenticationLoggingTimeout = _AuthenticationLoggingTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 10),
    _AuthenticationLoggingTimeout_Type()
)
authenticationLoggingTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    authenticationLoggingTimeout.setStatus("mandatory")


class _TrackingIP_Type(Integer32):
    """Custom type trackingIP based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_TrackingIP_Type.__name__ = "Integer32"
_TrackingIP_Object = MibScalar
trackingIP = _TrackingIP_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 11),
    _TrackingIP_Type()
)
trackingIP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    trackingIP.setStatus("mandatory")
_AccountSecurityManagement_ObjectIdentity = ObjectIdentity
accountSecurityManagement = _AccountSecurityManagement_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20)
)


class _AccountSecurityLevel_Type(Integer32):
    """Custom type accountSecurityLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("legacy", 0),
          ("high", 1),
          ("custom", 2))
    )


_AccountSecurityLevel_Type.__name__ = "Integer32"
_AccountSecurityLevel_Object = MibScalar
accountSecurityLevel = _AccountSecurityLevel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 1),
    _AccountSecurityLevel_Type()
)
accountSecurityLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    accountSecurityLevel.setStatus("mandatory")
_CustomSecuritySettings_ObjectIdentity = ObjectIdentity
customSecuritySettings = _CustomSecuritySettings_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2)
)


class _LoginPasswordRequired_Type(Integer32):
    """Custom type loginPasswordRequired based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_LoginPasswordRequired_Type.__name__ = "Integer32"
_LoginPasswordRequired_Object = MibScalar
loginPasswordRequired = _LoginPasswordRequired_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 1),
    _LoginPasswordRequired_Type()
)
loginPasswordRequired.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    loginPasswordRequired.setStatus("mandatory")
_PasswordExpirationPeriod_Type = Integer32
_PasswordExpirationPeriod_Object = MibScalar
passwordExpirationPeriod = _PasswordExpirationPeriod_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 2),
    _PasswordExpirationPeriod_Type()
)
passwordExpirationPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    passwordExpirationPeriod.setStatus("mandatory")


class _DefaultAdminPasswordExpired_Type(Integer32):
    """Custom type defaultAdminPasswordExpired based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_DefaultAdminPasswordExpired_Type.__name__ = "Integer32"
_DefaultAdminPasswordExpired_Object = MibScalar
defaultAdminPasswordExpired = _DefaultAdminPasswordExpired_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 3),
    _DefaultAdminPasswordExpired_Type()
)
defaultAdminPasswordExpired.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    defaultAdminPasswordExpired.setStatus("mandatory")


class _MinimumPasswordReuseCycle_Type(Integer32):
    """Custom type minimumPasswordReuseCycle based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("onePassword", 1),
          ("twoPasswords", 2),
          ("threePasswords", 3),
          ("fourPasswords", 4),
          ("fivePasswords", 5))
    )


_MinimumPasswordReuseCycle_Type.__name__ = "Integer32"
_MinimumPasswordReuseCycle_Object = MibScalar
minimumPasswordReuseCycle = _MinimumPasswordReuseCycle_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 4),
    _MinimumPasswordReuseCycle_Type()
)
minimumPasswordReuseCycle.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    minimumPasswordReuseCycle.setStatus("mandatory")


class _ComplexPasswordRules_Type(Integer32):
    """Custom type complexPasswordRules based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_ComplexPasswordRules_Type.__name__ = "Integer32"
_ComplexPasswordRules_Object = MibScalar
complexPasswordRules = _ComplexPasswordRules_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 5),
    _ComplexPasswordRules_Type()
)
complexPasswordRules.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    complexPasswordRules.setStatus("mandatory")


class _MinimumDiffCharsPassword_Type(Integer32):
    """Custom type minimumDiffCharsPassword based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("oneChar", 1),
          ("twoChars", 2),
          ("threeChars", 3),
          ("fourChars", 4),
          ("fiveChars", 5),
          ("sixChars", 6),
          ("sevenChars", 7),
          ("eightChars", 8),
          ("nineChars", 9),
          ("tenChars", 10),
          ("elevenChars", 11),
          ("twelveChars", 12),
          ("thirteenChars", 13),
          ("fourteenChars", 14),
          ("fifteenChars", 15))
    )


_MinimumDiffCharsPassword_Type.__name__ = "Integer32"
_MinimumDiffCharsPassword_Object = MibScalar
minimumDiffCharsPassword = _MinimumDiffCharsPassword_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 6),
    _MinimumDiffCharsPassword_Type()
)
minimumDiffCharsPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    minimumDiffCharsPassword.setStatus("mandatory")


class _ChangePasswordFirstAccess_Type(Integer32):
    """Custom type changePasswordFirstAccess based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_ChangePasswordFirstAccess_Type.__name__ = "Integer32"
_ChangePasswordFirstAccess_Object = MibScalar
changePasswordFirstAccess = _ChangePasswordFirstAccess_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 7),
    _ChangePasswordFirstAccess_Type()
)
changePasswordFirstAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    changePasswordFirstAccess.setStatus("mandatory")
_InactivityAlertPeriod_Type = Integer32
_InactivityAlertPeriod_Object = MibScalar
inactivityAlertPeriod = _InactivityAlertPeriod_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 8),
    _InactivityAlertPeriod_Type()
)
inactivityAlertPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    inactivityAlertPeriod.setStatus("mandatory")
_InactivityAlertDisablePeriod_Type = Integer32
_InactivityAlertDisablePeriod_Object = MibScalar
inactivityAlertDisablePeriod = _InactivityAlertDisablePeriod_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 9),
    _InactivityAlertDisablePeriod_Type()
)
inactivityAlertDisablePeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    inactivityAlertDisablePeriod.setStatus("mandatory")
_LockoutPeriod_Type = Integer32
_LockoutPeriod_Object = MibScalar
lockoutPeriod = _LockoutPeriod_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 10),
    _LockoutPeriod_Type()
)
lockoutPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lockoutPeriod.setStatus("mandatory")


class _MaxLoginFailures_Type(Integer32):
    """Custom type maxLoginFailures based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("oneTime", 1),
          ("twoTimes", 2),
          ("threeTimes", 3),
          ("fourTimes", 4),
          ("fiveTimes", 5),
          ("sixTimes", 6),
          ("sevenTimes", 7),
          ("eightTimes", 8),
          ("nineTimes", 9),
          ("tenTimes", 10))
    )


_MaxLoginFailures_Type.__name__ = "Integer32"
_MaxLoginFailures_Object = MibScalar
maxLoginFailures = _MaxLoginFailures_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 11),
    _MaxLoginFailures_Type()
)
maxLoginFailures.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    maxLoginFailures.setStatus("mandatory")
_PasswordChangeInterval_Type = Integer32
_PasswordChangeInterval_Object = MibScalar
passwordChangeInterval = _PasswordChangeInterval_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 12),
    _PasswordChangeInterval_Type()
)
passwordChangeInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    passwordChangeInterval.setStatus("mandatory")
_SerialPortCfg_ObjectIdentity = ObjectIdentity
serialPortCfg = _SerialPortCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 2)
)


class _PortBaud_Type(Integer32):
    """Custom type portBaud based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              7,
              15,
              23)
        )
    )
    namedValues = NamedValues(
        *(("baud2400", 0),
          ("baud4800", 1),
          ("baud9600", 3),
          ("baud19200", 7),
          ("baud38400", 15),
          ("baud57600", 23))
    )


_PortBaud_Type.__name__ = "Integer32"
_PortBaud_Object = MibScalar
portBaud = _PortBaud_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 2, 1),
    _PortBaud_Type()
)
portBaud.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portBaud.setStatus("mandatory")


class _PortParity_Type(Integer32):
    """Custom type portParity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              5,
              7)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("odd", 1),
          ("even", 3),
          ("mark", 5),
          ("space", 7))
    )


_PortParity_Type.__name__ = "Integer32"
_PortParity_Object = MibScalar
portParity = _PortParity_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 2, 2),
    _PortParity_Type()
)
portParity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portParity.setStatus("mandatory")


class _PortStopBits_Type(Integer32):
    """Custom type portStopBits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("oneStopbit", 0),
          ("twoOrOnePtFive", 1))
    )


_PortStopBits_Type.__name__ = "Integer32"
_PortStopBits_Object = MibScalar
portStopBits = _PortStopBits_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 2, 3),
    _PortStopBits_Type()
)
portStopBits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portStopBits.setStatus("mandatory")
_RemoteAlertIds_ObjectIdentity = ObjectIdentity
remoteAlertIds = _RemoteAlertIds_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3)
)
_RemoteAlertIdsTable_Object = MibTable
remoteAlertIdsTable = _RemoteAlertIdsTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1)
)
if mibBuilder.loadTexts:
    remoteAlertIdsTable.setStatus("mandatory")
_RemoteAlertIdsEntry_Object = MibTableRow
remoteAlertIdsEntry = _RemoteAlertIdsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1)
)
remoteAlertIdsEntry.setIndexNames(
    (0, "BLADE-MIB", "remoteAlertIdEntryIndex"),
)
if mibBuilder.loadTexts:
    remoteAlertIdsEntry.setStatus("mandatory")
_RemoteAlertIdEntryIndex_Type = Integer32
_RemoteAlertIdEntryIndex_Object = MibTableColumn
remoteAlertIdEntryIndex = _RemoteAlertIdEntryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1, 1),
    _RemoteAlertIdEntryIndex_Type()
)
remoteAlertIdEntryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    remoteAlertIdEntryIndex.setStatus("mandatory")


class _RemoteAlertIdEntryStatus_Type(Integer32):
    """Custom type remoteAlertIdEntryStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 0),
          ("disabledAndValid", 1),
          ("enabledAndValid", 2))
    )


_RemoteAlertIdEntryStatus_Type.__name__ = "Integer32"
_RemoteAlertIdEntryStatus_Object = MibTableColumn
remoteAlertIdEntryStatus = _RemoteAlertIdEntryStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1, 2),
    _RemoteAlertIdEntryStatus_Type()
)
remoteAlertIdEntryStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remoteAlertIdEntryStatus.setStatus("mandatory")


class _RemoteAlertIdEntryIpOrHostAddress_Type(OctetString):
    """Custom type remoteAlertIdEntryIpOrHostAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 50),
    )


_RemoteAlertIdEntryIpOrHostAddress_Type.__name__ = "OctetString"
_RemoteAlertIdEntryIpOrHostAddress_Object = MibTableColumn
remoteAlertIdEntryIpOrHostAddress = _RemoteAlertIdEntryIpOrHostAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1, 3),
    _RemoteAlertIdEntryIpOrHostAddress_Type()
)
remoteAlertIdEntryIpOrHostAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remoteAlertIdEntryIpOrHostAddress.setStatus("mandatory")


class _RemoteAlertIdEntryTextDescription_Type(OctetString):
    """Custom type remoteAlertIdEntryTextDescription based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 50),
    )


_RemoteAlertIdEntryTextDescription_Type.__name__ = "OctetString"
_RemoteAlertIdEntryTextDescription_Object = MibTableColumn
remoteAlertIdEntryTextDescription = _RemoteAlertIdEntryTextDescription_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1, 4),
    _RemoteAlertIdEntryTextDescription_Type()
)
remoteAlertIdEntryTextDescription.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remoteAlertIdEntryTextDescription.setStatus("mandatory")


class _RemoteAlertIdEntryNotificationType_Type(Integer32):
    """Custom type remoteAlertIdEntryNotificationType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              4,
              5,
              8)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("snmpOverLan", 4),
          ("emailOverLan", 5),
          ("ibmDirectorOverLAN", 8))
    )


_RemoteAlertIdEntryNotificationType_Type.__name__ = "Integer32"
_RemoteAlertIdEntryNotificationType_Object = MibTableColumn
remoteAlertIdEntryNotificationType = _RemoteAlertIdEntryNotificationType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1, 5),
    _RemoteAlertIdEntryNotificationType_Type()
)
remoteAlertIdEntryNotificationType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remoteAlertIdEntryNotificationType.setStatus("mandatory")


class _RemoteAlertIdEmailAddr_Type(OctetString):
    """Custom type remoteAlertIdEmailAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RemoteAlertIdEmailAddr_Type.__name__ = "OctetString"
_RemoteAlertIdEmailAddr_Object = MibTableColumn
remoteAlertIdEmailAddr = _RemoteAlertIdEmailAddr_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1, 9),
    _RemoteAlertIdEmailAddr_Type()
)
remoteAlertIdEmailAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remoteAlertIdEmailAddr.setStatus("mandatory")


class _RemoteAlertIdEntrySelectiveAlert_Type(Integer32):
    """Custom type remoteAlertIdEntrySelectiveAlert based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("critOnlyAlerts", 0),
          ("allAlerts", 1))
    )


_RemoteAlertIdEntrySelectiveAlert_Type.__name__ = "Integer32"
_RemoteAlertIdEntrySelectiveAlert_Object = MibTableColumn
remoteAlertIdEntrySelectiveAlert = _RemoteAlertIdEntrySelectiveAlert_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1, 13),
    _RemoteAlertIdEntrySelectiveAlert_Type()
)
remoteAlertIdEntrySelectiveAlert.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remoteAlertIdEntrySelectiveAlert.setStatus("mandatory")


class _GenerateTestAlert_Type(Integer32):
    """Custom type generateTestAlert based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_GenerateTestAlert_Type.__name__ = "Integer32"
_GenerateTestAlert_Object = MibScalar
generateTestAlert = _GenerateTestAlert_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 30),
    _GenerateTestAlert_Type()
)
generateTestAlert.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    generateTestAlert.setStatus("mandatory")
_RemoteAccessIds_ObjectIdentity = ObjectIdentity
remoteAccessIds = _RemoteAccessIds_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4)
)
_RemoteAccessIdsTable_Object = MibTable
remoteAccessIdsTable = _RemoteAccessIdsTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1)
)
if mibBuilder.loadTexts:
    remoteAccessIdsTable.setStatus("mandatory")
_RemoteAccessIdsEntry_Object = MibTableRow
remoteAccessIdsEntry = _RemoteAccessIdsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1)
)
remoteAccessIdsEntry.setIndexNames(
    (0, "BLADE-MIB", "remoteAccessIdEntryIndex"),
)
if mibBuilder.loadTexts:
    remoteAccessIdsEntry.setStatus("mandatory")


class _RemoteAccessIdEntryIndex_Type(Integer32):
    """Custom type remoteAccessIdEntryIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RemoteAccessIdEntryIndex_Type.__name__ = "Integer32"
_RemoteAccessIdEntryIndex_Object = MibTableColumn
remoteAccessIdEntryIndex = _RemoteAccessIdEntryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 1),
    _RemoteAccessIdEntryIndex_Type()
)
remoteAccessIdEntryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    remoteAccessIdEntryIndex.setStatus("mandatory")


class _RemoteAccessIdEntryUserId_Type(OctetString):
    """Custom type remoteAccessIdEntryUserId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 15),
    )


_RemoteAccessIdEntryUserId_Type.__name__ = "OctetString"
_RemoteAccessIdEntryUserId_Object = MibTableColumn
remoteAccessIdEntryUserId = _RemoteAccessIdEntryUserId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 2),
    _RemoteAccessIdEntryUserId_Type()
)
remoteAccessIdEntryUserId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remoteAccessIdEntryUserId.setStatus("mandatory")


class _RemoteAccessIdEntryPassword_Type(OctetString):
    """Custom type remoteAccessIdEntryPassword based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 15),
    )


_RemoteAccessIdEntryPassword_Type.__name__ = "OctetString"
_RemoteAccessIdEntryPassword_Object = MibTableColumn
remoteAccessIdEntryPassword = _RemoteAccessIdEntryPassword_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 3),
    _RemoteAccessIdEntryPassword_Type()
)
remoteAccessIdEntryPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remoteAccessIdEntryPassword.setStatus("mandatory")


class _RemoteAccessIdEntryEncodedLoginPw_Type(OctetString):
    """Custom type remoteAccessIdEntryEncodedLoginPw based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 36),
    )


_RemoteAccessIdEntryEncodedLoginPw_Type.__name__ = "OctetString"
_RemoteAccessIdEntryEncodedLoginPw_Object = MibTableColumn
remoteAccessIdEntryEncodedLoginPw = _RemoteAccessIdEntryEncodedLoginPw_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 7),
    _RemoteAccessIdEntryEncodedLoginPw_Type()
)
remoteAccessIdEntryEncodedLoginPw.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remoteAccessIdEntryEncodedLoginPw.setStatus("deprecated")
_RemoteAccessIdEntryRole_Type = OctetString
_RemoteAccessIdEntryRole_Object = MibTableColumn
remoteAccessIdEntryRole = _RemoteAccessIdEntryRole_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 10),
    _RemoteAccessIdEntryRole_Type()
)
remoteAccessIdEntryRole.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    remoteAccessIdEntryRole.setStatus("mandatory")


class _RemoteAccessIdEntryLoggedIn_Type(Integer32):
    """Custom type remoteAccessIdEntryLoggedIn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_RemoteAccessIdEntryLoggedIn_Type.__name__ = "Integer32"
_RemoteAccessIdEntryLoggedIn_Object = MibTableColumn
remoteAccessIdEntryLoggedIn = _RemoteAccessIdEntryLoggedIn_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 11),
    _RemoteAccessIdEntryLoggedIn_Type()
)
remoteAccessIdEntryLoggedIn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    remoteAccessIdEntryLoggedIn.setStatus("mandatory")
_RemoteAccessIdEntryLastLogin_Type = OctetString
_RemoteAccessIdEntryLastLogin_Object = MibTableColumn
remoteAccessIdEntryLastLogin = _RemoteAccessIdEntryLastLogin_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 12),
    _RemoteAccessIdEntryLastLogin_Type()
)
remoteAccessIdEntryLastLogin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    remoteAccessIdEntryLastLogin.setStatus("mandatory")


class _RemoteAccessIdEntryPwdCompliant_Type(Integer32):
    """Custom type remoteAccessIdEntryPwdCompliant based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_RemoteAccessIdEntryPwdCompliant_Type.__name__ = "Integer32"
_RemoteAccessIdEntryPwdCompliant_Object = MibTableColumn
remoteAccessIdEntryPwdCompliant = _RemoteAccessIdEntryPwdCompliant_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 13),
    _RemoteAccessIdEntryPwdCompliant_Type()
)
remoteAccessIdEntryPwdCompliant.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    remoteAccessIdEntryPwdCompliant.setStatus("mandatory")
_RemoteAccessIdEntryPwdExp_Type = OctetString
_RemoteAccessIdEntryPwdExp_Object = MibTableColumn
remoteAccessIdEntryPwdExp = _RemoteAccessIdEntryPwdExp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 14),
    _RemoteAccessIdEntryPwdExp_Type()
)
remoteAccessIdEntryPwdExp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    remoteAccessIdEntryPwdExp.setStatus("mandatory")


class _RemoteAccessIdEntryDormant_Type(Integer32):
    """Custom type remoteAccessIdEntryDormant based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_RemoteAccessIdEntryDormant_Type.__name__ = "Integer32"
_RemoteAccessIdEntryDormant_Object = MibTableColumn
remoteAccessIdEntryDormant = _RemoteAccessIdEntryDormant_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 15),
    _RemoteAccessIdEntryDormant_Type()
)
remoteAccessIdEntryDormant.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    remoteAccessIdEntryDormant.setStatus("mandatory")


class _RemoteAccessIdEntryState_Type(Integer32):
    """Custom type remoteAccessIdEntryState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("active", 1),
          ("locked", 2))
    )


_RemoteAccessIdEntryState_Type.__name__ = "Integer32"
_RemoteAccessIdEntryState_Object = MibTableColumn
remoteAccessIdEntryState = _RemoteAccessIdEntryState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 16),
    _RemoteAccessIdEntryState_Type()
)
remoteAccessIdEntryState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    remoteAccessIdEntryState.setStatus("mandatory")


class _RemoteAccessIdEntryAction_Type(Integer32):
    """Custom type remoteAccessIdEntryAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1),
          ("unlock", 2),
          ("notApplicable", 255))
    )


_RemoteAccessIdEntryAction_Type.__name__ = "Integer32"
_RemoteAccessIdEntryAction_Object = MibTableColumn
remoteAccessIdEntryAction = _RemoteAccessIdEntryAction_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 17),
    _RemoteAccessIdEntryAction_Type()
)
remoteAccessIdEntryAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remoteAccessIdEntryAction.setStatus("mandatory")
_RemoteAccessIdEntrySessionCount_Type = Integer32
_RemoteAccessIdEntrySessionCount_Object = MibTableColumn
remoteAccessIdEntrySessionCount = _RemoteAccessIdEntrySessionCount_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 18),
    _RemoteAccessIdEntrySessionCount_Type()
)
remoteAccessIdEntrySessionCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    remoteAccessIdEntrySessionCount.setStatus("mandatory")
_RemoteAccessIdEntryMaxSessions_Type = Integer32
_RemoteAccessIdEntryMaxSessions_Object = MibTableColumn
remoteAccessIdEntryMaxSessions = _RemoteAccessIdEntryMaxSessions_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 19),
    _RemoteAccessIdEntryMaxSessions_Type()
)
remoteAccessIdEntryMaxSessions.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remoteAccessIdEntryMaxSessions.setStatus("mandatory")
_RemoteAccessUserAuthorityLevelTable_Object = MibTable
remoteAccessUserAuthorityLevelTable = _RemoteAccessUserAuthorityLevelTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2)
)
if mibBuilder.loadTexts:
    remoteAccessUserAuthorityLevelTable.setStatus("mandatory")
_RemoteAccessUserAuthorityLevelEntry_Object = MibTableRow
remoteAccessUserAuthorityLevelEntry = _RemoteAccessUserAuthorityLevelEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1)
)
remoteAccessUserAuthorityLevelEntry.setIndexNames(
    (0, "BLADE-MIB", "ualIndex"),
)
if mibBuilder.loadTexts:
    remoteAccessUserAuthorityLevelEntry.setStatus("mandatory")


class _UalIndex_Type(Integer32):
    """Custom type ualIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_UalIndex_Type.__name__ = "Integer32"
_UalIndex_Object = MibTableColumn
ualIndex = _UalIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1, 1),
    _UalIndex_Type()
)
ualIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ualIndex.setStatus("mandatory")


class _UalId_Type(OctetString):
    """Custom type ualId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_UalId_Type.__name__ = "OctetString"
_UalId_Object = MibTableColumn
ualId = _UalId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1, 2),
    _UalId_Type()
)
ualId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ualId.setStatus("mandatory")


class _UalSupervisor_Type(Integer32):
    """Custom type ualSupervisor based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_UalSupervisor_Type.__name__ = "Integer32"
_UalSupervisor_Object = MibTableColumn
ualSupervisor = _UalSupervisor_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1, 3),
    _UalSupervisor_Type()
)
ualSupervisor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ualSupervisor.setStatus("mandatory")


class _UalReadOnly_Type(Integer32):
    """Custom type ualReadOnly based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_UalReadOnly_Type.__name__ = "Integer32"
_UalReadOnly_Object = MibTableColumn
ualReadOnly = _UalReadOnly_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1, 4),
    _UalReadOnly_Type()
)
ualReadOnly.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ualReadOnly.setStatus("mandatory")


class _UalAccountManagement_Type(Integer32):
    """Custom type ualAccountManagement based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_UalAccountManagement_Type.__name__ = "Integer32"
_UalAccountManagement_Object = MibTableColumn
ualAccountManagement = _UalAccountManagement_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1, 5),
    _UalAccountManagement_Type()
)
ualAccountManagement.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ualAccountManagement.setStatus("mandatory")


class _UalConsoleAccess_Type(Integer32):
    """Custom type ualConsoleAccess based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_UalConsoleAccess_Type.__name__ = "Integer32"
_UalConsoleAccess_Object = MibTableColumn
ualConsoleAccess = _UalConsoleAccess_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1, 6),
    _UalConsoleAccess_Type()
)
ualConsoleAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ualConsoleAccess.setStatus("mandatory")


class _UalConsoleAndVirtualMediaAccess_Type(Integer32):
    """Custom type ualConsoleAndVirtualMediaAccess based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_UalConsoleAndVirtualMediaAccess_Type.__name__ = "Integer32"
_UalConsoleAndVirtualMediaAccess_Object = MibTableColumn
ualConsoleAndVirtualMediaAccess = _UalConsoleAndVirtualMediaAccess_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1, 7),
    _UalConsoleAndVirtualMediaAccess_Type()
)
ualConsoleAndVirtualMediaAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ualConsoleAndVirtualMediaAccess.setStatus("mandatory")


class _UalServerPowerAccess_Type(Integer32):
    """Custom type ualServerPowerAccess based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_UalServerPowerAccess_Type.__name__ = "Integer32"
_UalServerPowerAccess_Object = MibTableColumn
ualServerPowerAccess = _UalServerPowerAccess_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1, 8),
    _UalServerPowerAccess_Type()
)
ualServerPowerAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ualServerPowerAccess.setStatus("mandatory")


class _UalAllowClearLog_Type(Integer32):
    """Custom type ualAllowClearLog based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_UalAllowClearLog_Type.__name__ = "Integer32"
_UalAllowClearLog_Object = MibTableColumn
ualAllowClearLog = _UalAllowClearLog_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1, 9),
    _UalAllowClearLog_Type()
)
ualAllowClearLog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ualAllowClearLog.setStatus("mandatory")


class _UalAdapterBasicConfig_Type(Integer32):
    """Custom type ualAdapterBasicConfig based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_UalAdapterBasicConfig_Type.__name__ = "Integer32"
_UalAdapterBasicConfig_Object = MibTableColumn
ualAdapterBasicConfig = _UalAdapterBasicConfig_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1, 10),
    _UalAdapterBasicConfig_Type()
)
ualAdapterBasicConfig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ualAdapterBasicConfig.setStatus("mandatory")


class _UalAdapterNetworkAndSecurityConfig_Type(Integer32):
    """Custom type ualAdapterNetworkAndSecurityConfig based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_UalAdapterNetworkAndSecurityConfig_Type.__name__ = "Integer32"
_UalAdapterNetworkAndSecurityConfig_Object = MibTableColumn
ualAdapterNetworkAndSecurityConfig = _UalAdapterNetworkAndSecurityConfig_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1, 11),
    _UalAdapterNetworkAndSecurityConfig_Type()
)
ualAdapterNetworkAndSecurityConfig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ualAdapterNetworkAndSecurityConfig.setStatus("mandatory")


class _UalAdapterAdvancedConfig_Type(Integer32):
    """Custom type ualAdapterAdvancedConfig based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_UalAdapterAdvancedConfig_Type.__name__ = "Integer32"
_UalAdapterAdvancedConfig_Object = MibTableColumn
ualAdapterAdvancedConfig = _UalAdapterAdvancedConfig_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 2, 1, 12),
    _UalAdapterAdvancedConfig_Type()
)
ualAdapterAdvancedConfig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ualAdapterAdvancedConfig.setStatus("mandatory")
_RemoteAccessRBSroleTable_Object = MibTable
remoteAccessRBSroleTable = _RemoteAccessRBSroleTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3)
)
if mibBuilder.loadTexts:
    remoteAccessRBSroleTable.setStatus("mandatory")
_RemoteAccessRBSroleEntry_Object = MibTableRow
remoteAccessRBSroleEntry = _RemoteAccessRBSroleEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1)
)
remoteAccessRBSroleEntry.setIndexNames(
    (0, "BLADE-MIB", "roleIndex"),
)
if mibBuilder.loadTexts:
    remoteAccessRBSroleEntry.setStatus("mandatory")


class _RoleIndex_Type(Integer32):
    """Custom type roleIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RoleIndex_Type.__name__ = "Integer32"
_RoleIndex_Object = MibTableColumn
roleIndex = _RoleIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 1),
    _RoleIndex_Type()
)
roleIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    roleIndex.setStatus("mandatory")


class _RoleId_Type(OctetString):
    """Custom type roleId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_RoleId_Type.__name__ = "OctetString"
_RoleId_Object = MibTableColumn
roleId = _RoleId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 2),
    _RoleId_Type()
)
roleId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    roleId.setStatus("mandatory")


class _RbsSupervisor_Type(Integer32):
    """Custom type rbsSupervisor based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsSupervisor_Type.__name__ = "Integer32"
_RbsSupervisor_Object = MibTableColumn
rbsSupervisor = _RbsSupervisor_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 3),
    _RbsSupervisor_Type()
)
rbsSupervisor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsSupervisor.setStatus("mandatory")


class _RbsOperator_Type(Integer32):
    """Custom type rbsOperator based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsOperator_Type.__name__ = "Integer32"
_RbsOperator_Object = MibTableColumn
rbsOperator = _RbsOperator_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 4),
    _RbsOperator_Type()
)
rbsOperator.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsOperator.setStatus("mandatory")


class _RbsChassisOperator_Type(Integer32):
    """Custom type rbsChassisOperator based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsChassisOperator_Type.__name__ = "Integer32"
_RbsChassisOperator_Object = MibTableColumn
rbsChassisOperator = _RbsChassisOperator_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 5),
    _RbsChassisOperator_Type()
)
rbsChassisOperator.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsChassisOperator.setStatus("mandatory")


class _RbsChassisAccountManagement_Type(Integer32):
    """Custom type rbsChassisAccountManagement based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsChassisAccountManagement_Type.__name__ = "Integer32"
_RbsChassisAccountManagement_Object = MibTableColumn
rbsChassisAccountManagement = _RbsChassisAccountManagement_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 6),
    _RbsChassisAccountManagement_Type()
)
rbsChassisAccountManagement.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsChassisAccountManagement.setStatus("mandatory")


class _RbsChassisLogManagement_Type(Integer32):
    """Custom type rbsChassisLogManagement based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsChassisLogManagement_Type.__name__ = "Integer32"
_RbsChassisLogManagement_Object = MibTableColumn
rbsChassisLogManagement = _RbsChassisLogManagement_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 7),
    _RbsChassisLogManagement_Type()
)
rbsChassisLogManagement.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsChassisLogManagement.setStatus("mandatory")


class _RbsChassisConfiguration_Type(Integer32):
    """Custom type rbsChassisConfiguration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsChassisConfiguration_Type.__name__ = "Integer32"
_RbsChassisConfiguration_Object = MibTableColumn
rbsChassisConfiguration = _RbsChassisConfiguration_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 8),
    _RbsChassisConfiguration_Type()
)
rbsChassisConfiguration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsChassisConfiguration.setStatus("mandatory")


class _RbsChassisAdministration_Type(Integer32):
    """Custom type rbsChassisAdministration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsChassisAdministration_Type.__name__ = "Integer32"
_RbsChassisAdministration_Object = MibTableColumn
rbsChassisAdministration = _RbsChassisAdministration_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 9),
    _RbsChassisAdministration_Type()
)
rbsChassisAdministration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsChassisAdministration.setStatus("mandatory")


class _RbsBladeOperator_Type(Integer32):
    """Custom type rbsBladeOperator based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBladeOperator_Type.__name__ = "Integer32"
_RbsBladeOperator_Object = MibTableColumn
rbsBladeOperator = _RbsBladeOperator_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 10),
    _RbsBladeOperator_Type()
)
rbsBladeOperator.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBladeOperator.setStatus("mandatory")


class _RbsBladeRemotePresence_Type(Integer32):
    """Custom type rbsBladeRemotePresence based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBladeRemotePresence_Type.__name__ = "Integer32"
_RbsBladeRemotePresence_Object = MibTableColumn
rbsBladeRemotePresence = _RbsBladeRemotePresence_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 11),
    _RbsBladeRemotePresence_Type()
)
rbsBladeRemotePresence.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBladeRemotePresence.setStatus("mandatory")


class _RbsBladeConfiguration_Type(Integer32):
    """Custom type rbsBladeConfiguration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBladeConfiguration_Type.__name__ = "Integer32"
_RbsBladeConfiguration_Object = MibTableColumn
rbsBladeConfiguration = _RbsBladeConfiguration_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 12),
    _RbsBladeConfiguration_Type()
)
rbsBladeConfiguration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBladeConfiguration.setStatus("mandatory")


class _RbsBladeAdministration_Type(Integer32):
    """Custom type rbsBladeAdministration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBladeAdministration_Type.__name__ = "Integer32"
_RbsBladeAdministration_Object = MibTableColumn
rbsBladeAdministration = _RbsBladeAdministration_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 13),
    _RbsBladeAdministration_Type()
)
rbsBladeAdministration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBladeAdministration.setStatus("mandatory")


class _RbsSwitchModuleOperator_Type(Integer32):
    """Custom type rbsSwitchModuleOperator based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsSwitchModuleOperator_Type.__name__ = "Integer32"
_RbsSwitchModuleOperator_Object = MibTableColumn
rbsSwitchModuleOperator = _RbsSwitchModuleOperator_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 14),
    _RbsSwitchModuleOperator_Type()
)
rbsSwitchModuleOperator.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsSwitchModuleOperator.setStatus("mandatory")


class _RbsSwitchModuleConfiguration_Type(Integer32):
    """Custom type rbsSwitchModuleConfiguration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsSwitchModuleConfiguration_Type.__name__ = "Integer32"
_RbsSwitchModuleConfiguration_Object = MibTableColumn
rbsSwitchModuleConfiguration = _RbsSwitchModuleConfiguration_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 15),
    _RbsSwitchModuleConfiguration_Type()
)
rbsSwitchModuleConfiguration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsSwitchModuleConfiguration.setStatus("mandatory")


class _RbsSwitchModuleAdministration_Type(Integer32):
    """Custom type rbsSwitchModuleAdministration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsSwitchModuleAdministration_Type.__name__ = "Integer32"
_RbsSwitchModuleAdministration_Object = MibTableColumn
rbsSwitchModuleAdministration = _RbsSwitchModuleAdministration_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 16),
    _RbsSwitchModuleAdministration_Type()
)
rbsSwitchModuleAdministration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsSwitchModuleAdministration.setStatus("mandatory")


class _RbsBladeRemotePresenseVideo_Type(Integer32):
    """Custom type rbsBladeRemotePresenseVideo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBladeRemotePresenseVideo_Type.__name__ = "Integer32"
_RbsBladeRemotePresenseVideo_Object = MibTableColumn
rbsBladeRemotePresenseVideo = _RbsBladeRemotePresenseVideo_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 17),
    _RbsBladeRemotePresenseVideo_Type()
)
rbsBladeRemotePresenseVideo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBladeRemotePresenseVideo.setStatus("deprecated")


class _RbsBladeRemotePresenseKVM_Type(Integer32):
    """Custom type rbsBladeRemotePresenseKVM based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBladeRemotePresenseKVM_Type.__name__ = "Integer32"
_RbsBladeRemotePresenseKVM_Object = MibTableColumn
rbsBladeRemotePresenseKVM = _RbsBladeRemotePresenseKVM_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 18),
    _RbsBladeRemotePresenseKVM_Type()
)
rbsBladeRemotePresenseKVM.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBladeRemotePresenseKVM.setStatus("deprecated")


class _RbsBladeRemotePresenseRdriveR_Type(Integer32):
    """Custom type rbsBladeRemotePresenseRdriveR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBladeRemotePresenseRdriveR_Type.__name__ = "Integer32"
_RbsBladeRemotePresenseRdriveR_Object = MibTableColumn
rbsBladeRemotePresenseRdriveR = _RbsBladeRemotePresenseRdriveR_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 19),
    _RbsBladeRemotePresenseRdriveR_Type()
)
rbsBladeRemotePresenseRdriveR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBladeRemotePresenseRdriveR.setStatus("deprecated")


class _RbsBladeRemotePresenseRdriveRW_Type(Integer32):
    """Custom type rbsBladeRemotePresenseRdriveRW based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBladeRemotePresenseRdriveRW_Type.__name__ = "Integer32"
_RbsBladeRemotePresenseRdriveRW_Object = MibTableColumn
rbsBladeRemotePresenseRdriveRW = _RbsBladeRemotePresenseRdriveRW_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 20),
    _RbsBladeRemotePresenseRdriveRW_Type()
)
rbsBladeRemotePresenseRdriveRW.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBladeRemotePresenseRdriveRW.setStatus("deprecated")


class _RbsChassisRemotePresenseRdoc_Type(Integer32):
    """Custom type rbsChassisRemotePresenseRdoc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsChassisRemotePresenseRdoc_Type.__name__ = "Integer32"
_RbsChassisRemotePresenseRdoc_Object = MibTableColumn
rbsChassisRemotePresenseRdoc = _RbsChassisRemotePresenseRdoc_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 21),
    _RbsChassisRemotePresenseRdoc_Type()
)
rbsChassisRemotePresenseRdoc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsChassisRemotePresenseRdoc.setStatus("deprecated")


class _RbsRemotePresenceSupervisor_Type(Integer32):
    """Custom type rbsRemotePresenceSupervisor based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsRemotePresenceSupervisor_Type.__name__ = "Integer32"
_RbsRemotePresenceSupervisor_Object = MibTableColumn
rbsRemotePresenceSupervisor = _RbsRemotePresenceSupervisor_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 22),
    _RbsRemotePresenceSupervisor_Type()
)
rbsRemotePresenceSupervisor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsRemotePresenceSupervisor.setStatus("deprecated")
_RemoteAccessRBSscopeTable_Object = MibTable
remoteAccessRBSscopeTable = _RemoteAccessRBSscopeTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4)
)
if mibBuilder.loadTexts:
    remoteAccessRBSscopeTable.setStatus("mandatory")
_RemoteAccessRBSscopeEntry_Object = MibTableRow
remoteAccessRBSscopeEntry = _RemoteAccessRBSscopeEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1)
)
remoteAccessRBSscopeEntry.setIndexNames(
    (0, "BLADE-MIB", "scopeIndex"),
)
if mibBuilder.loadTexts:
    remoteAccessRBSscopeEntry.setStatus("mandatory")


class _ScopeIndex_Type(Integer32):
    """Custom type scopeIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_ScopeIndex_Type.__name__ = "Integer32"
_ScopeIndex_Object = MibTableColumn
scopeIndex = _ScopeIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 1),
    _ScopeIndex_Type()
)
scopeIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scopeIndex.setStatus("mandatory")


class _ScopeId_Type(OctetString):
    """Custom type scopeId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_ScopeId_Type.__name__ = "OctetString"
_ScopeId_Object = MibTableColumn
scopeId = _ScopeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 2),
    _ScopeId_Type()
)
scopeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scopeId.setStatus("mandatory")


class _RbsChassis_Type(Integer32):
    """Custom type rbsChassis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsChassis_Type.__name__ = "Integer32"
_RbsChassis_Object = MibTableColumn
rbsChassis = _RbsChassis_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 3),
    _RbsChassis_Type()
)
rbsChassis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsChassis.setStatus("mandatory")


class _RbsBlade1_Type(Integer32):
    """Custom type rbsBlade1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBlade1_Type.__name__ = "Integer32"
_RbsBlade1_Object = MibTableColumn
rbsBlade1 = _RbsBlade1_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 4),
    _RbsBlade1_Type()
)
rbsBlade1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBlade1.setStatus("mandatory")


class _RbsBlade2_Type(Integer32):
    """Custom type rbsBlade2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBlade2_Type.__name__ = "Integer32"
_RbsBlade2_Object = MibTableColumn
rbsBlade2 = _RbsBlade2_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 5),
    _RbsBlade2_Type()
)
rbsBlade2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBlade2.setStatus("mandatory")


class _RbsBlade3_Type(Integer32):
    """Custom type rbsBlade3 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBlade3_Type.__name__ = "Integer32"
_RbsBlade3_Object = MibTableColumn
rbsBlade3 = _RbsBlade3_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 6),
    _RbsBlade3_Type()
)
rbsBlade3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBlade3.setStatus("mandatory")


class _RbsBlade4_Type(Integer32):
    """Custom type rbsBlade4 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBlade4_Type.__name__ = "Integer32"
_RbsBlade4_Object = MibTableColumn
rbsBlade4 = _RbsBlade4_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 7),
    _RbsBlade4_Type()
)
rbsBlade4.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBlade4.setStatus("mandatory")


class _RbsBlade5_Type(Integer32):
    """Custom type rbsBlade5 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBlade5_Type.__name__ = "Integer32"
_RbsBlade5_Object = MibTableColumn
rbsBlade5 = _RbsBlade5_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 8),
    _RbsBlade5_Type()
)
rbsBlade5.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBlade5.setStatus("mandatory")


class _RbsBlade6_Type(Integer32):
    """Custom type rbsBlade6 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBlade6_Type.__name__ = "Integer32"
_RbsBlade6_Object = MibTableColumn
rbsBlade6 = _RbsBlade6_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 9),
    _RbsBlade6_Type()
)
rbsBlade6.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBlade6.setStatus("mandatory")


class _RbsBlade7_Type(Integer32):
    """Custom type rbsBlade7 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBlade7_Type.__name__ = "Integer32"
_RbsBlade7_Object = MibTableColumn
rbsBlade7 = _RbsBlade7_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 10),
    _RbsBlade7_Type()
)
rbsBlade7.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBlade7.setStatus("mandatory")


class _RbsBlade8_Type(Integer32):
    """Custom type rbsBlade8 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBlade8_Type.__name__ = "Integer32"
_RbsBlade8_Object = MibTableColumn
rbsBlade8 = _RbsBlade8_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 11),
    _RbsBlade8_Type()
)
rbsBlade8.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBlade8.setStatus("mandatory")


class _RbsBlade9_Type(Integer32):
    """Custom type rbsBlade9 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBlade9_Type.__name__ = "Integer32"
_RbsBlade9_Object = MibTableColumn
rbsBlade9 = _RbsBlade9_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 12),
    _RbsBlade9_Type()
)
rbsBlade9.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBlade9.setStatus("mandatory")


class _RbsBlade10_Type(Integer32):
    """Custom type rbsBlade10 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBlade10_Type.__name__ = "Integer32"
_RbsBlade10_Object = MibTableColumn
rbsBlade10 = _RbsBlade10_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 13),
    _RbsBlade10_Type()
)
rbsBlade10.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBlade10.setStatus("mandatory")


class _RbsBlade11_Type(Integer32):
    """Custom type rbsBlade11 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBlade11_Type.__name__ = "Integer32"
_RbsBlade11_Object = MibTableColumn
rbsBlade11 = _RbsBlade11_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 14),
    _RbsBlade11_Type()
)
rbsBlade11.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBlade11.setStatus("mandatory")


class _RbsBlade12_Type(Integer32):
    """Custom type rbsBlade12 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBlade12_Type.__name__ = "Integer32"
_RbsBlade12_Object = MibTableColumn
rbsBlade12 = _RbsBlade12_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 15),
    _RbsBlade12_Type()
)
rbsBlade12.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBlade12.setStatus("mandatory")


class _RbsBlade13_Type(Integer32):
    """Custom type rbsBlade13 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBlade13_Type.__name__ = "Integer32"
_RbsBlade13_Object = MibTableColumn
rbsBlade13 = _RbsBlade13_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 16),
    _RbsBlade13_Type()
)
rbsBlade13.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBlade13.setStatus("mandatory")


class _RbsBlade14_Type(Integer32):
    """Custom type rbsBlade14 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBlade14_Type.__name__ = "Integer32"
_RbsBlade14_Object = MibTableColumn
rbsBlade14 = _RbsBlade14_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 17),
    _RbsBlade14_Type()
)
rbsBlade14.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBlade14.setStatus("mandatory")


class _RbsSwitch1_Type(Integer32):
    """Custom type rbsSwitch1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsSwitch1_Type.__name__ = "Integer32"
_RbsSwitch1_Object = MibTableColumn
rbsSwitch1 = _RbsSwitch1_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 18),
    _RbsSwitch1_Type()
)
rbsSwitch1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsSwitch1.setStatus("mandatory")


class _RbsSwitch2_Type(Integer32):
    """Custom type rbsSwitch2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsSwitch2_Type.__name__ = "Integer32"
_RbsSwitch2_Object = MibTableColumn
rbsSwitch2 = _RbsSwitch2_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 19),
    _RbsSwitch2_Type()
)
rbsSwitch2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsSwitch2.setStatus("mandatory")


class _RbsSwitch3_Type(Integer32):
    """Custom type rbsSwitch3 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsSwitch3_Type.__name__ = "Integer32"
_RbsSwitch3_Object = MibTableColumn
rbsSwitch3 = _RbsSwitch3_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 20),
    _RbsSwitch3_Type()
)
rbsSwitch3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsSwitch3.setStatus("mandatory")


class _RbsSwitch4_Type(Integer32):
    """Custom type rbsSwitch4 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsSwitch4_Type.__name__ = "Integer32"
_RbsSwitch4_Object = MibTableColumn
rbsSwitch4 = _RbsSwitch4_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 21),
    _RbsSwitch4_Type()
)
rbsSwitch4.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsSwitch4.setStatus("mandatory")


class _RbsSwitch5_Type(Integer32):
    """Custom type rbsSwitch5 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsSwitch5_Type.__name__ = "Integer32"
_RbsSwitch5_Object = MibTableColumn
rbsSwitch5 = _RbsSwitch5_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 22),
    _RbsSwitch5_Type()
)
rbsSwitch5.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsSwitch5.setStatus("mandatory")


class _RbsSwitch6_Type(Integer32):
    """Custom type rbsSwitch6 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsSwitch6_Type.__name__ = "Integer32"
_RbsSwitch6_Object = MibTableColumn
rbsSwitch6 = _RbsSwitch6_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 23),
    _RbsSwitch6_Type()
)
rbsSwitch6.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsSwitch6.setStatus("mandatory")


class _RbsSwitch7_Type(Integer32):
    """Custom type rbsSwitch7 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsSwitch7_Type.__name__ = "Integer32"
_RbsSwitch7_Object = MibTableColumn
rbsSwitch7 = _RbsSwitch7_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 24),
    _RbsSwitch7_Type()
)
rbsSwitch7.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsSwitch7.setStatus("mandatory")


class _RbsSwitch8_Type(Integer32):
    """Custom type rbsSwitch8 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsSwitch8_Type.__name__ = "Integer32"
_RbsSwitch8_Object = MibTableColumn
rbsSwitch8 = _RbsSwitch8_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 25),
    _RbsSwitch8_Type()
)
rbsSwitch8.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsSwitch8.setStatus("mandatory")


class _RbsSwitch9_Type(Integer32):
    """Custom type rbsSwitch9 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsSwitch9_Type.__name__ = "Integer32"
_RbsSwitch9_Object = MibTableColumn
rbsSwitch9 = _RbsSwitch9_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 26),
    _RbsSwitch9_Type()
)
rbsSwitch9.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsSwitch9.setStatus("mandatory")


class _RbsSwitch10_Type(Integer32):
    """Custom type rbsSwitch10 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsSwitch10_Type.__name__ = "Integer32"
_RbsSwitch10_Object = MibTableColumn
rbsSwitch10 = _RbsSwitch10_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 27),
    _RbsSwitch10_Type()
)
rbsSwitch10.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsSwitch10.setStatus("mandatory")
_UserInterfaces_ObjectIdentity = ObjectIdentity
userInterfaces = _UserInterfaces_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 5)
)


class _Cli_Type(Integer32):
    """Custom type cli based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("telnet-only", 1),
          ("ssh-only", 2),
          ("enabled", 3))
    )


_Cli_Type.__name__ = "Integer32"
_Cli_Object = MibScalar
cli = _Cli_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 5, 1),
    _Cli_Type()
)
cli.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cli.setStatus("mandatory")


class _Snmp_Type(Integer32):
    """Custom type snmp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("v1-only", 1),
          ("v3-only", 2),
          ("enabled", 3))
    )


_Snmp_Type.__name__ = "Integer32"
_Snmp_Object = MibScalar
snmp = _Snmp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 5, 2),
    _Snmp_Type()
)
snmp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmp.setStatus("mandatory")


class _Tcm_Type(Integer32):
    """Custom type tcm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 20),
    )


_Tcm_Type.__name__ = "Integer32"
_Tcm_Object = MibScalar
tcm = _Tcm_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 5, 3),
    _Tcm_Type()
)
tcm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tcm.setStatus("mandatory")


class _Web_Type(Integer32):
    """Custom type web based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_Web_Type.__name__ = "Integer32"
_Web_Object = MibScalar
web = _Web_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 5, 4),
    _Web_Type()
)
web.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    web.setStatus("mandatory")


class _Stcm_Type(Integer32):
    """Custom type stcm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 20),
    )


_Stcm_Type.__name__ = "Integer32"
_Stcm_Object = MibScalar
stcm = _Stcm_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 5, 5),
    _Stcm_Type()
)
stcm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stcm.setStatus("mandatory")
_MmSshClientAuth_ObjectIdentity = ObjectIdentity
mmSshClientAuth = _MmSshClientAuth_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6)
)
_MmSshClientAuthPubKeyTable_Object = MibTable
mmSshClientAuthPubKeyTable = _MmSshClientAuthPubKeyTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1)
)
if mibBuilder.loadTexts:
    mmSshClientAuthPubKeyTable.setStatus("mandatory")
_MmSshClientAuthPubKeyEntry_Object = MibTableRow
mmSshClientAuthPubKeyEntry = _MmSshClientAuthPubKeyEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1)
)
mmSshClientAuthPubKeyEntry.setIndexNames(
    (0, "BLADE-MIB", "mmSshClientAuthRemoteAccessIdIndex"),
    (0, "BLADE-MIB", "mmSshClientAuthPubKeyIndex"),
)
if mibBuilder.loadTexts:
    mmSshClientAuthPubKeyEntry.setStatus("mandatory")
_MmSshClientAuthRemoteAccessIdIndex_Type = Integer32
_MmSshClientAuthRemoteAccessIdIndex_Object = MibTableColumn
mmSshClientAuthRemoteAccessIdIndex = _MmSshClientAuthRemoteAccessIdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1, 1),
    _MmSshClientAuthRemoteAccessIdIndex_Type()
)
mmSshClientAuthRemoteAccessIdIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mmSshClientAuthRemoteAccessIdIndex.setStatus("mandatory")
_MmSshClientAuthPubKeyIndex_Type = Integer32
_MmSshClientAuthPubKeyIndex_Object = MibTableColumn
mmSshClientAuthPubKeyIndex = _MmSshClientAuthPubKeyIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1, 2),
    _MmSshClientAuthPubKeyIndex_Type()
)
mmSshClientAuthPubKeyIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mmSshClientAuthPubKeyIndex.setStatus("mandatory")


class _MmSshClientAuthPubKeyType_Type(Integer32):
    """Custom type mmSshClientAuthPubKeyType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("sshDss", 1),
          ("sshRsa", 2))
    )


_MmSshClientAuthPubKeyType_Type.__name__ = "Integer32"
_MmSshClientAuthPubKeyType_Object = MibTableColumn
mmSshClientAuthPubKeyType = _MmSshClientAuthPubKeyType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1, 3),
    _MmSshClientAuthPubKeyType_Type()
)
mmSshClientAuthPubKeyType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmSshClientAuthPubKeyType.setStatus("mandatory")


class _MmSshClientAuthPubKeySize_Type(Integer32):
    """Custom type mmSshClientAuthPubKeySize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("bits512", 1),
          ("bits768", 2),
          ("bits1024", 3),
          ("bits2048", 4),
          ("bits4096", 5))
    )


_MmSshClientAuthPubKeySize_Type.__name__ = "Integer32"
_MmSshClientAuthPubKeySize_Object = MibTableColumn
mmSshClientAuthPubKeySize = _MmSshClientAuthPubKeySize_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1, 4),
    _MmSshClientAuthPubKeySize_Type()
)
mmSshClientAuthPubKeySize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmSshClientAuthPubKeySize.setStatus("mandatory")
_MmSshClientAuthPubKeyFingerprint_Type = OctetString
_MmSshClientAuthPubKeyFingerprint_Object = MibTableColumn
mmSshClientAuthPubKeyFingerprint = _MmSshClientAuthPubKeyFingerprint_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1, 5),
    _MmSshClientAuthPubKeyFingerprint_Type()
)
mmSshClientAuthPubKeyFingerprint.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmSshClientAuthPubKeyFingerprint.setStatus("mandatory")
_MmSshClientAuthPubKeyAcceptFrom_Type = OctetString
_MmSshClientAuthPubKeyAcceptFrom_Object = MibTableColumn
mmSshClientAuthPubKeyAcceptFrom = _MmSshClientAuthPubKeyAcceptFrom_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1, 6),
    _MmSshClientAuthPubKeyAcceptFrom_Type()
)
mmSshClientAuthPubKeyAcceptFrom.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mmSshClientAuthPubKeyAcceptFrom.setStatus("mandatory")
_MmSshClientAuthPubKeyComment_Type = OctetString
_MmSshClientAuthPubKeyComment_Object = MibTableColumn
mmSshClientAuthPubKeyComment = _MmSshClientAuthPubKeyComment_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1, 7),
    _MmSshClientAuthPubKeyComment_Type()
)
mmSshClientAuthPubKeyComment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mmSshClientAuthPubKeyComment.setStatus("mandatory")


class _MmSshClientAuthPubKeyAction_Type(Integer32):
    """Custom type mmSshClientAuthPubKeyAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("import", 1),
          ("export", 2))
    )


_MmSshClientAuthPubKeyAction_Type.__name__ = "Integer32"
_MmSshClientAuthPubKeyAction_Object = MibTableColumn
mmSshClientAuthPubKeyAction = _MmSshClientAuthPubKeyAction_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1, 8),
    _MmSshClientAuthPubKeyAction_Type()
)
mmSshClientAuthPubKeyAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mmSshClientAuthPubKeyAction.setStatus("mandatory")
_MmSshClientAuthPubKeyEntryStatus_Type = EntryStatus
_MmSshClientAuthPubKeyEntryStatus_Object = MibTableColumn
mmSshClientAuthPubKeyEntryStatus = _MmSshClientAuthPubKeyEntryStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1, 9),
    _MmSshClientAuthPubKeyEntryStatus_Type()
)
mmSshClientAuthPubKeyEntryStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mmSshClientAuthPubKeyEntryStatus.setStatus("mandatory")
_MmSshClientAuthPubKeyUnused_Type = Integer32
_MmSshClientAuthPubKeyUnused_Object = MibScalar
mmSshClientAuthPubKeyUnused = _MmSshClientAuthPubKeyUnused_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 2),
    _MmSshClientAuthPubKeyUnused_Type()
)
mmSshClientAuthPubKeyUnused.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmSshClientAuthPubKeyUnused.setStatus("mandatory")
_MmSshClientAuthPubKeyTftpServer_Type = OctetString
_MmSshClientAuthPubKeyTftpServer_Object = MibScalar
mmSshClientAuthPubKeyTftpServer = _MmSshClientAuthPubKeyTftpServer_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 3),
    _MmSshClientAuthPubKeyTftpServer_Type()
)
mmSshClientAuthPubKeyTftpServer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mmSshClientAuthPubKeyTftpServer.setStatus("mandatory")
_MmSshClientAuthPubKeyFileName_Type = OctetString
_MmSshClientAuthPubKeyFileName_Object = MibScalar
mmSshClientAuthPubKeyFileName = _MmSshClientAuthPubKeyFileName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 4),
    _MmSshClientAuthPubKeyFileName_Type()
)
mmSshClientAuthPubKeyFileName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mmSshClientAuthPubKeyFileName.setStatus("mandatory")


class _MmSshClientAuthPubKeyFileFormat_Type(Integer32):
    """Custom type mmSshClientAuthPubKeyFileFormat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("openSSH", 1),
          ("rfc4716", 2))
    )


_MmSshClientAuthPubKeyFileFormat_Type.__name__ = "Integer32"
_MmSshClientAuthPubKeyFileFormat_Object = MibScalar
mmSshClientAuthPubKeyFileFormat = _MmSshClientAuthPubKeyFileFormat_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 5),
    _MmSshClientAuthPubKeyFileFormat_Type()
)
mmSshClientAuthPubKeyFileFormat.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mmSshClientAuthPubKeyFileFormat.setStatus("mandatory")
_GroupProfiles_ObjectIdentity = ObjectIdentity
groupProfiles = _GroupProfiles_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7)
)
_GroupIdsTable_Object = MibTable
groupIdsTable = _GroupIdsTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 1)
)
if mibBuilder.loadTexts:
    groupIdsTable.setStatus("mandatory")
_GroupIdsEntry_Object = MibTableRow
groupIdsEntry = _GroupIdsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 1, 1)
)
groupIdsEntry.setIndexNames(
    (0, "BLADE-MIB", "groupIndex"),
)
if mibBuilder.loadTexts:
    groupIdsEntry.setStatus("mandatory")


class _GroupIndex_Type(Integer32):
    """Custom type groupIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_GroupIndex_Type.__name__ = "Integer32"
_GroupIndex_Object = MibTableColumn
groupIndex = _GroupIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 1, 1, 1),
    _GroupIndex_Type()
)
groupIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    groupIndex.setStatus("mandatory")


class _GroupId_Type(OctetString):
    """Custom type groupId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_GroupId_Type.__name__ = "OctetString"
_GroupId_Object = MibTableColumn
groupId = _GroupId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 1, 1, 2),
    _GroupId_Type()
)
groupId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupId.setStatus("mandatory")
_GroupRole_Type = OctetString
_GroupRole_Object = MibTableColumn
groupRole = _GroupRole_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 1, 1, 3),
    _GroupRole_Type()
)
groupRole.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    groupRole.setStatus("mandatory")
_GroupEntryStatus_Type = EntryStatus
_GroupEntryStatus_Object = MibTableColumn
groupEntryStatus = _GroupEntryStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 1, 1, 9),
    _GroupEntryStatus_Type()
)
groupEntryStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupEntryStatus.setStatus("mandatory")
_GroupRBSroleTable_Object = MibTable
groupRBSroleTable = _GroupRBSroleTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2)
)
if mibBuilder.loadTexts:
    groupRBSroleTable.setStatus("mandatory")
_GroupRBSroleEntry_Object = MibTableRow
groupRBSroleEntry = _GroupRBSroleEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1)
)
groupRBSroleEntry.setIndexNames(
    (0, "BLADE-MIB", "groupRBSroleIndex"),
)
if mibBuilder.loadTexts:
    groupRBSroleEntry.setStatus("mandatory")


class _GroupRBSroleIndex_Type(Integer32):
    """Custom type groupRBSroleIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_GroupRBSroleIndex_Type.__name__ = "Integer32"
_GroupRBSroleIndex_Object = MibTableColumn
groupRBSroleIndex = _GroupRBSroleIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 1),
    _GroupRBSroleIndex_Type()
)
groupRBSroleIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    groupRBSroleIndex.setStatus("mandatory")


class _GroupRBSroleId_Type(OctetString):
    """Custom type groupRBSroleId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_GroupRBSroleId_Type.__name__ = "OctetString"
_GroupRBSroleId_Object = MibTableColumn
groupRBSroleId = _GroupRBSroleId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 2),
    _GroupRBSroleId_Type()
)
groupRBSroleId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    groupRBSroleId.setStatus("mandatory")


class _GroupRBSSupervisor_Type(Integer32):
    """Custom type groupRBSSupervisor based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSSupervisor_Type.__name__ = "Integer32"
_GroupRBSSupervisor_Object = MibTableColumn
groupRBSSupervisor = _GroupRBSSupervisor_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 3),
    _GroupRBSSupervisor_Type()
)
groupRBSSupervisor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSSupervisor.setStatus("mandatory")


class _GroupRBSOperator_Type(Integer32):
    """Custom type groupRBSOperator based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSOperator_Type.__name__ = "Integer32"
_GroupRBSOperator_Object = MibTableColumn
groupRBSOperator = _GroupRBSOperator_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 4),
    _GroupRBSOperator_Type()
)
groupRBSOperator.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSOperator.setStatus("mandatory")


class _GroupRBSChassisOperator_Type(Integer32):
    """Custom type groupRBSChassisOperator based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSChassisOperator_Type.__name__ = "Integer32"
_GroupRBSChassisOperator_Object = MibTableColumn
groupRBSChassisOperator = _GroupRBSChassisOperator_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 5),
    _GroupRBSChassisOperator_Type()
)
groupRBSChassisOperator.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSChassisOperator.setStatus("mandatory")


class _GroupRBSChassisAccountManagement_Type(Integer32):
    """Custom type groupRBSChassisAccountManagement based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSChassisAccountManagement_Type.__name__ = "Integer32"
_GroupRBSChassisAccountManagement_Object = MibTableColumn
groupRBSChassisAccountManagement = _GroupRBSChassisAccountManagement_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 6),
    _GroupRBSChassisAccountManagement_Type()
)
groupRBSChassisAccountManagement.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSChassisAccountManagement.setStatus("mandatory")


class _GroupRBSChassisLogManagement_Type(Integer32):
    """Custom type groupRBSChassisLogManagement based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSChassisLogManagement_Type.__name__ = "Integer32"
_GroupRBSChassisLogManagement_Object = MibTableColumn
groupRBSChassisLogManagement = _GroupRBSChassisLogManagement_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 7),
    _GroupRBSChassisLogManagement_Type()
)
groupRBSChassisLogManagement.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSChassisLogManagement.setStatus("mandatory")


class _GroupRBSChassisConfiguration_Type(Integer32):
    """Custom type groupRBSChassisConfiguration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSChassisConfiguration_Type.__name__ = "Integer32"
_GroupRBSChassisConfiguration_Object = MibTableColumn
groupRBSChassisConfiguration = _GroupRBSChassisConfiguration_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 8),
    _GroupRBSChassisConfiguration_Type()
)
groupRBSChassisConfiguration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSChassisConfiguration.setStatus("mandatory")


class _GroupRBSChassisAdministration_Type(Integer32):
    """Custom type groupRBSChassisAdministration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSChassisAdministration_Type.__name__ = "Integer32"
_GroupRBSChassisAdministration_Object = MibTableColumn
groupRBSChassisAdministration = _GroupRBSChassisAdministration_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 9),
    _GroupRBSChassisAdministration_Type()
)
groupRBSChassisAdministration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSChassisAdministration.setStatus("mandatory")


class _GroupRBSBladeOperator_Type(Integer32):
    """Custom type groupRBSBladeOperator based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSBladeOperator_Type.__name__ = "Integer32"
_GroupRBSBladeOperator_Object = MibTableColumn
groupRBSBladeOperator = _GroupRBSBladeOperator_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 10),
    _GroupRBSBladeOperator_Type()
)
groupRBSBladeOperator.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSBladeOperator.setStatus("mandatory")


class _GroupRBSBladeRemotePresence_Type(Integer32):
    """Custom type groupRBSBladeRemotePresence based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSBladeRemotePresence_Type.__name__ = "Integer32"
_GroupRBSBladeRemotePresence_Object = MibTableColumn
groupRBSBladeRemotePresence = _GroupRBSBladeRemotePresence_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 11),
    _GroupRBSBladeRemotePresence_Type()
)
groupRBSBladeRemotePresence.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSBladeRemotePresence.setStatus("mandatory")


class _GroupRBSBladeConfiguration_Type(Integer32):
    """Custom type groupRBSBladeConfiguration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSBladeConfiguration_Type.__name__ = "Integer32"
_GroupRBSBladeConfiguration_Object = MibTableColumn
groupRBSBladeConfiguration = _GroupRBSBladeConfiguration_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 12),
    _GroupRBSBladeConfiguration_Type()
)
groupRBSBladeConfiguration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSBladeConfiguration.setStatus("mandatory")


class _GroupRBSBladeAdministration_Type(Integer32):
    """Custom type groupRBSBladeAdministration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSBladeAdministration_Type.__name__ = "Integer32"
_GroupRBSBladeAdministration_Object = MibTableColumn
groupRBSBladeAdministration = _GroupRBSBladeAdministration_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 13),
    _GroupRBSBladeAdministration_Type()
)
groupRBSBladeAdministration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSBladeAdministration.setStatus("mandatory")


class _GroupRBSSwitchModuleOperator_Type(Integer32):
    """Custom type groupRBSSwitchModuleOperator based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSSwitchModuleOperator_Type.__name__ = "Integer32"
_GroupRBSSwitchModuleOperator_Object = MibTableColumn
groupRBSSwitchModuleOperator = _GroupRBSSwitchModuleOperator_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 14),
    _GroupRBSSwitchModuleOperator_Type()
)
groupRBSSwitchModuleOperator.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSSwitchModuleOperator.setStatus("mandatory")


class _GroupRBSSwitchModuleConfiguration_Type(Integer32):
    """Custom type groupRBSSwitchModuleConfiguration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSSwitchModuleConfiguration_Type.__name__ = "Integer32"
_GroupRBSSwitchModuleConfiguration_Object = MibTableColumn
groupRBSSwitchModuleConfiguration = _GroupRBSSwitchModuleConfiguration_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 15),
    _GroupRBSSwitchModuleConfiguration_Type()
)
groupRBSSwitchModuleConfiguration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSSwitchModuleConfiguration.setStatus("mandatory")


class _GroupRBSSwitchModuleAdministration_Type(Integer32):
    """Custom type groupRBSSwitchModuleAdministration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSSwitchModuleAdministration_Type.__name__ = "Integer32"
_GroupRBSSwitchModuleAdministration_Object = MibTableColumn
groupRBSSwitchModuleAdministration = _GroupRBSSwitchModuleAdministration_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 16),
    _GroupRBSSwitchModuleAdministration_Type()
)
groupRBSSwitchModuleAdministration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSSwitchModuleAdministration.setStatus("mandatory")
_GroupRBSscopeTable_Object = MibTable
groupRBSscopeTable = _GroupRBSscopeTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3)
)
if mibBuilder.loadTexts:
    groupRBSscopeTable.setStatus("mandatory")
_GroupRBSscopeEntry_Object = MibTableRow
groupRBSscopeEntry = _GroupRBSscopeEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1)
)
groupRBSscopeEntry.setIndexNames(
    (0, "BLADE-MIB", "groupRBSscopeIndex"),
)
if mibBuilder.loadTexts:
    groupRBSscopeEntry.setStatus("mandatory")


class _GroupRBSscopeIndex_Type(Integer32):
    """Custom type groupRBSscopeIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_GroupRBSscopeIndex_Type.__name__ = "Integer32"
_GroupRBSscopeIndex_Object = MibTableColumn
groupRBSscopeIndex = _GroupRBSscopeIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 1),
    _GroupRBSscopeIndex_Type()
)
groupRBSscopeIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    groupRBSscopeIndex.setStatus("mandatory")


class _GroupRBSscopeId_Type(OctetString):
    """Custom type groupRBSscopeId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_GroupRBSscopeId_Type.__name__ = "OctetString"
_GroupRBSscopeId_Object = MibTableColumn
groupRBSscopeId = _GroupRBSscopeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 2),
    _GroupRBSscopeId_Type()
)
groupRBSscopeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    groupRBSscopeId.setStatus("mandatory")


class _GroupRBSChassis_Type(Integer32):
    """Custom type groupRBSChassis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSChassis_Type.__name__ = "Integer32"
_GroupRBSChassis_Object = MibTableColumn
groupRBSChassis = _GroupRBSChassis_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 3),
    _GroupRBSChassis_Type()
)
groupRBSChassis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSChassis.setStatus("mandatory")


class _GroupRBSBlade1_Type(Integer32):
    """Custom type groupRBSBlade1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSBlade1_Type.__name__ = "Integer32"
_GroupRBSBlade1_Object = MibTableColumn
groupRBSBlade1 = _GroupRBSBlade1_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 4),
    _GroupRBSBlade1_Type()
)
groupRBSBlade1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSBlade1.setStatus("mandatory")


class _GroupRBSBlade2_Type(Integer32):
    """Custom type groupRBSBlade2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSBlade2_Type.__name__ = "Integer32"
_GroupRBSBlade2_Object = MibTableColumn
groupRBSBlade2 = _GroupRBSBlade2_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 5),
    _GroupRBSBlade2_Type()
)
groupRBSBlade2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSBlade2.setStatus("mandatory")


class _GroupRBSBlade3_Type(Integer32):
    """Custom type groupRBSBlade3 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSBlade3_Type.__name__ = "Integer32"
_GroupRBSBlade3_Object = MibTableColumn
groupRBSBlade3 = _GroupRBSBlade3_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 6),
    _GroupRBSBlade3_Type()
)
groupRBSBlade3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSBlade3.setStatus("mandatory")


class _GroupRBSBlade4_Type(Integer32):
    """Custom type groupRBSBlade4 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSBlade4_Type.__name__ = "Integer32"
_GroupRBSBlade4_Object = MibTableColumn
groupRBSBlade4 = _GroupRBSBlade4_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 7),
    _GroupRBSBlade4_Type()
)
groupRBSBlade4.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSBlade4.setStatus("mandatory")


class _GroupRBSBlade5_Type(Integer32):
    """Custom type groupRBSBlade5 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSBlade5_Type.__name__ = "Integer32"
_GroupRBSBlade5_Object = MibTableColumn
groupRBSBlade5 = _GroupRBSBlade5_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 8),
    _GroupRBSBlade5_Type()
)
groupRBSBlade5.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSBlade5.setStatus("mandatory")


class _GroupRBSBlade6_Type(Integer32):
    """Custom type groupRBSBlade6 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSBlade6_Type.__name__ = "Integer32"
_GroupRBSBlade6_Object = MibTableColumn
groupRBSBlade6 = _GroupRBSBlade6_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 9),
    _GroupRBSBlade6_Type()
)
groupRBSBlade6.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSBlade6.setStatus("mandatory")


class _GroupRBSBlade7_Type(Integer32):
    """Custom type groupRBSBlade7 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSBlade7_Type.__name__ = "Integer32"
_GroupRBSBlade7_Object = MibTableColumn
groupRBSBlade7 = _GroupRBSBlade7_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 10),
    _GroupRBSBlade7_Type()
)
groupRBSBlade7.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSBlade7.setStatus("mandatory")


class _GroupRBSBlade8_Type(Integer32):
    """Custom type groupRBSBlade8 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSBlade8_Type.__name__ = "Integer32"
_GroupRBSBlade8_Object = MibTableColumn
groupRBSBlade8 = _GroupRBSBlade8_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 11),
    _GroupRBSBlade8_Type()
)
groupRBSBlade8.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSBlade8.setStatus("mandatory")


class _GroupRBSBlade9_Type(Integer32):
    """Custom type groupRBSBlade9 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSBlade9_Type.__name__ = "Integer32"
_GroupRBSBlade9_Object = MibTableColumn
groupRBSBlade9 = _GroupRBSBlade9_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 12),
    _GroupRBSBlade9_Type()
)
groupRBSBlade9.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSBlade9.setStatus("mandatory")


class _GroupRBSBlade10_Type(Integer32):
    """Custom type groupRBSBlade10 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSBlade10_Type.__name__ = "Integer32"
_GroupRBSBlade10_Object = MibTableColumn
groupRBSBlade10 = _GroupRBSBlade10_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 13),
    _GroupRBSBlade10_Type()
)
groupRBSBlade10.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSBlade10.setStatus("mandatory")


class _GroupRBSBlade11_Type(Integer32):
    """Custom type groupRBSBlade11 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSBlade11_Type.__name__ = "Integer32"
_GroupRBSBlade11_Object = MibTableColumn
groupRBSBlade11 = _GroupRBSBlade11_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 14),
    _GroupRBSBlade11_Type()
)
groupRBSBlade11.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSBlade11.setStatus("mandatory")


class _GroupRBSBlade12_Type(Integer32):
    """Custom type groupRBSBlade12 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSBlade12_Type.__name__ = "Integer32"
_GroupRBSBlade12_Object = MibTableColumn
groupRBSBlade12 = _GroupRBSBlade12_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 15),
    _GroupRBSBlade12_Type()
)
groupRBSBlade12.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSBlade12.setStatus("mandatory")


class _GroupRBSBlade13_Type(Integer32):
    """Custom type groupRBSBlade13 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSBlade13_Type.__name__ = "Integer32"
_GroupRBSBlade13_Object = MibTableColumn
groupRBSBlade13 = _GroupRBSBlade13_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 16),
    _GroupRBSBlade13_Type()
)
groupRBSBlade13.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSBlade13.setStatus("mandatory")


class _GroupRBSBlade14_Type(Integer32):
    """Custom type groupRBSBlade14 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSBlade14_Type.__name__ = "Integer32"
_GroupRBSBlade14_Object = MibTableColumn
groupRBSBlade14 = _GroupRBSBlade14_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 17),
    _GroupRBSBlade14_Type()
)
groupRBSBlade14.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSBlade14.setStatus("mandatory")


class _GroupRBSSwitch1_Type(Integer32):
    """Custom type groupRBSSwitch1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSSwitch1_Type.__name__ = "Integer32"
_GroupRBSSwitch1_Object = MibTableColumn
groupRBSSwitch1 = _GroupRBSSwitch1_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 18),
    _GroupRBSSwitch1_Type()
)
groupRBSSwitch1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSSwitch1.setStatus("mandatory")


class _GroupRBSSwitch2_Type(Integer32):
    """Custom type groupRBSSwitch2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSSwitch2_Type.__name__ = "Integer32"
_GroupRBSSwitch2_Object = MibTableColumn
groupRBSSwitch2 = _GroupRBSSwitch2_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 19),
    _GroupRBSSwitch2_Type()
)
groupRBSSwitch2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSSwitch2.setStatus("mandatory")


class _GroupRBSSwitch3_Type(Integer32):
    """Custom type groupRBSSwitch3 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSSwitch3_Type.__name__ = "Integer32"
_GroupRBSSwitch3_Object = MibTableColumn
groupRBSSwitch3 = _GroupRBSSwitch3_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 20),
    _GroupRBSSwitch3_Type()
)
groupRBSSwitch3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSSwitch3.setStatus("mandatory")


class _GroupRBSSwitch4_Type(Integer32):
    """Custom type groupRBSSwitch4 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSSwitch4_Type.__name__ = "Integer32"
_GroupRBSSwitch4_Object = MibTableColumn
groupRBSSwitch4 = _GroupRBSSwitch4_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 21),
    _GroupRBSSwitch4_Type()
)
groupRBSSwitch4.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSSwitch4.setStatus("mandatory")


class _GroupRBSSwitch5_Type(Integer32):
    """Custom type groupRBSSwitch5 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSSwitch5_Type.__name__ = "Integer32"
_GroupRBSSwitch5_Object = MibTableColumn
groupRBSSwitch5 = _GroupRBSSwitch5_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 22),
    _GroupRBSSwitch5_Type()
)
groupRBSSwitch5.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSSwitch5.setStatus("mandatory")


class _GroupRBSSwitch6_Type(Integer32):
    """Custom type groupRBSSwitch6 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSSwitch6_Type.__name__ = "Integer32"
_GroupRBSSwitch6_Object = MibTableColumn
groupRBSSwitch6 = _GroupRBSSwitch6_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 23),
    _GroupRBSSwitch6_Type()
)
groupRBSSwitch6.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSSwitch6.setStatus("mandatory")


class _GroupRBSSwitch7_Type(Integer32):
    """Custom type groupRBSSwitch7 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSSwitch7_Type.__name__ = "Integer32"
_GroupRBSSwitch7_Object = MibTableColumn
groupRBSSwitch7 = _GroupRBSSwitch7_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 24),
    _GroupRBSSwitch7_Type()
)
groupRBSSwitch7.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSSwitch7.setStatus("mandatory")


class _GroupRBSSwitch8_Type(Integer32):
    """Custom type groupRBSSwitch8 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSSwitch8_Type.__name__ = "Integer32"
_GroupRBSSwitch8_Object = MibTableColumn
groupRBSSwitch8 = _GroupRBSSwitch8_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 25),
    _GroupRBSSwitch8_Type()
)
groupRBSSwitch8.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSSwitch8.setStatus("mandatory")


class _GroupRBSSwitch9_Type(Integer32):
    """Custom type groupRBSSwitch9 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSSwitch9_Type.__name__ = "Integer32"
_GroupRBSSwitch9_Object = MibTableColumn
groupRBSSwitch9 = _GroupRBSSwitch9_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 26),
    _GroupRBSSwitch9_Type()
)
groupRBSSwitch9.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSSwitch9.setStatus("mandatory")


class _GroupRBSSwitch10_Type(Integer32):
    """Custom type groupRBSSwitch10 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSSwitch10_Type.__name__ = "Integer32"
_GroupRBSSwitch10_Object = MibTableColumn
groupRBSSwitch10 = _GroupRBSSwitch10_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 27),
    _GroupRBSSwitch10_Type()
)
groupRBSSwitch10.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSSwitch10.setStatus("mandatory")
_RemoteAlerts_ObjectIdentity = ObjectIdentity
remoteAlerts = _RemoteAlerts_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2)
)
_RemoteAlertsCrit_ObjectIdentity = ObjectIdentity
remoteAlertsCrit = _RemoteAlertsCrit_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1)
)


class _CritTemp_Type(Integer32):
    """Custom type critTemp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_CritTemp_Type.__name__ = "Integer32"
_CritTemp_Object = MibScalar
critTemp = _CritTemp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 1),
    _CritTemp_Type()
)
critTemp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    critTemp.setStatus("deprecated")


class _CritVolt_Type(Integer32):
    """Custom type critVolt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_CritVolt_Type.__name__ = "Integer32"
_CritVolt_Object = MibScalar
critVolt = _CritVolt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 2),
    _CritVolt_Type()
)
critVolt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    critVolt.setStatus("deprecated")


class _CritMultiBlower_Type(Integer32):
    """Custom type critMultiBlower based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_CritMultiBlower_Type.__name__ = "Integer32"
_CritMultiBlower_Object = MibScalar
critMultiBlower = _CritMultiBlower_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 4),
    _CritMultiBlower_Type()
)
critMultiBlower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    critMultiBlower.setStatus("deprecated")


class _CritPower_Type(Integer32):
    """Custom type critPower based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_CritPower_Type.__name__ = "Integer32"
_CritPower_Object = MibScalar
critPower = _CritPower_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 5),
    _CritPower_Type()
)
critPower.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    critPower.setStatus("mandatory")


class _CritHardDrive_Type(Integer32):
    """Custom type critHardDrive based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_CritHardDrive_Type.__name__ = "Integer32"
_CritHardDrive_Object = MibScalar
critHardDrive = _CritHardDrive_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 6),
    _CritHardDrive_Type()
)
critHardDrive.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    critHardDrive.setStatus("deprecated")


class _CritVRM_Type(Integer32):
    """Custom type critVRM based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_CritVRM_Type.__name__ = "Integer32"
_CritVRM_Object = MibScalar
critVRM = _CritVRM_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 7),
    _CritVRM_Type()
)
critVRM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    critVRM.setStatus("deprecated")


class _CritMultipleSwitchModule_Type(Integer32):
    """Custom type critMultipleSwitchModule based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_CritMultipleSwitchModule_Type.__name__ = "Integer32"
_CritMultipleSwitchModule_Object = MibScalar
critMultipleSwitchModule = _CritMultipleSwitchModule_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 8),
    _CritMultipleSwitchModule_Type()
)
critMultipleSwitchModule.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    critMultipleSwitchModule.setStatus("deprecated")


class _CritInvalidConfig_Type(Integer32):
    """Custom type critInvalidConfig based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_CritInvalidConfig_Type.__name__ = "Integer32"
_CritInvalidConfig_Object = MibScalar
critInvalidConfig = _CritInvalidConfig_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 9),
    _CritInvalidConfig_Type()
)
critInvalidConfig.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    critInvalidConfig.setStatus("deprecated")


class _CritBlade_Type(Integer32):
    """Custom type critBlade based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_CritBlade_Type.__name__ = "Integer32"
_CritBlade_Object = MibScalar
critBlade = _CritBlade_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 10),
    _CritBlade_Type()
)
critBlade.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    critBlade.setStatus("mandatory")


class _CritIO_Type(Integer32):
    """Custom type critIO based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_CritIO_Type.__name__ = "Integer32"
_CritIO_Object = MibScalar
critIO = _CritIO_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 11),
    _CritIO_Type()
)
critIO.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    critIO.setStatus("mandatory")


class _CritStorage_Type(Integer32):
    """Custom type critStorage based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_CritStorage_Type.__name__ = "Integer32"
_CritStorage_Object = MibScalar
critStorage = _CritStorage_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 12),
    _CritStorage_Type()
)
critStorage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    critStorage.setStatus("mandatory")


class _CritChassis_Type(Integer32):
    """Custom type critChassis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_CritChassis_Type.__name__ = "Integer32"
_CritChassis_Object = MibScalar
critChassis = _CritChassis_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 13),
    _CritChassis_Type()
)
critChassis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    critChassis.setStatus("mandatory")


class _CritFan_Type(Integer32):
    """Custom type critFan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_CritFan_Type.__name__ = "Integer32"
_CritFan_Object = MibScalar
critFan = _CritFan_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 14),
    _CritFan_Type()
)
critFan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    critFan.setStatus("mandatory")
_RemoteAlertsNonCrit_ObjectIdentity = ObjectIdentity
remoteAlertsNonCrit = _RemoteAlertsNonCrit_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2)
)


class _WarnSingleBlower_Type(Integer32):
    """Custom type warnSingleBlower based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_WarnSingleBlower_Type.__name__ = "Integer32"
_WarnSingleBlower_Object = MibScalar
warnSingleBlower = _WarnSingleBlower_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 2),
    _WarnSingleBlower_Type()
)
warnSingleBlower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    warnSingleBlower.setStatus("deprecated")


class _WarnTemp_Type(Integer32):
    """Custom type warnTemp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_WarnTemp_Type.__name__ = "Integer32"
_WarnTemp_Object = MibScalar
warnTemp = _WarnTemp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 3),
    _WarnTemp_Type()
)
warnTemp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    warnTemp.setStatus("deprecated")


class _WarnVoltage_Type(Integer32):
    """Custom type warnVoltage based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_WarnVoltage_Type.__name__ = "Integer32"
_WarnVoltage_Object = MibScalar
warnVoltage = _WarnVoltage_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 4),
    _WarnVoltage_Type()
)
warnVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    warnVoltage.setStatus("deprecated")


class _WarnRedundantModule_Type(Integer32):
    """Custom type warnRedundantModule based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_WarnRedundantModule_Type.__name__ = "Integer32"
_WarnRedundantModule_Object = MibScalar
warnRedundantModule = _WarnRedundantModule_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 6),
    _WarnRedundantModule_Type()
)
warnRedundantModule.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    warnRedundantModule.setStatus("deprecated")


class _WarnMediaTrayKVMSwitch_Type(Integer32):
    """Custom type warnMediaTrayKVMSwitch based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_WarnMediaTrayKVMSwitch_Type.__name__ = "Integer32"
_WarnMediaTrayKVMSwitch_Object = MibScalar
warnMediaTrayKVMSwitch = _WarnMediaTrayKVMSwitch_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 7),
    _WarnMediaTrayKVMSwitch_Type()
)
warnMediaTrayKVMSwitch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    warnMediaTrayKVMSwitch.setStatus("deprecated")


class _WarnLogFull_Type(Integer32):
    """Custom type warnLogFull based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_WarnLogFull_Type.__name__ = "Integer32"
_WarnLogFull_Object = MibScalar
warnLogFull = _WarnLogFull_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 10),
    _WarnLogFull_Type()
)
warnLogFull.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    warnLogFull.setStatus("mandatory")


class _WarnBlade_Type(Integer32):
    """Custom type warnBlade based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_WarnBlade_Type.__name__ = "Integer32"
_WarnBlade_Object = MibScalar
warnBlade = _WarnBlade_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 15),
    _WarnBlade_Type()
)
warnBlade.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    warnBlade.setStatus("mandatory")


class _WarnIO_Type(Integer32):
    """Custom type warnIO based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_WarnIO_Type.__name__ = "Integer32"
_WarnIO_Object = MibScalar
warnIO = _WarnIO_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 16),
    _WarnIO_Type()
)
warnIO.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    warnIO.setStatus("mandatory")


class _WarnStorage_Type(Integer32):
    """Custom type warnStorage based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_WarnStorage_Type.__name__ = "Integer32"
_WarnStorage_Object = MibScalar
warnStorage = _WarnStorage_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 17),
    _WarnStorage_Type()
)
warnStorage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    warnStorage.setStatus("mandatory")


class _WarnPower_Type(Integer32):
    """Custom type warnPower based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_WarnPower_Type.__name__ = "Integer32"
_WarnPower_Object = MibScalar
warnPower = _WarnPower_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 18),
    _WarnPower_Type()
)
warnPower.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    warnPower.setStatus("mandatory")


class _WarnChassis_Type(Integer32):
    """Custom type warnChassis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_WarnChassis_Type.__name__ = "Integer32"
_WarnChassis_Object = MibScalar
warnChassis = _WarnChassis_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 19),
    _WarnChassis_Type()
)
warnChassis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    warnChassis.setStatus("mandatory")


class _WarnFan_Type(Integer32):
    """Custom type warnFan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_WarnFan_Type.__name__ = "Integer32"
_WarnFan_Object = MibScalar
warnFan = _WarnFan_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 20),
    _WarnFan_Type()
)
warnFan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    warnFan.setStatus("mandatory")
_RemoteAlertsSystem_ObjectIdentity = ObjectIdentity
remoteAlertsSystem = _RemoteAlertsSystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3)
)


class _SystemPowerOff_Type(Integer32):
    """Custom type systemPowerOff based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SystemPowerOff_Type.__name__ = "Integer32"
_SystemPowerOff_Object = MibScalar
systemPowerOff = _SystemPowerOff_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 4),
    _SystemPowerOff_Type()
)
systemPowerOff.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    systemPowerOff.setStatus("deprecated")


class _SystemPowerOn_Type(Integer32):
    """Custom type systemPowerOn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SystemPowerOn_Type.__name__ = "Integer32"
_SystemPowerOn_Object = MibScalar
systemPowerOn = _SystemPowerOn_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 5),
    _SystemPowerOn_Type()
)
systemPowerOn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    systemPowerOn.setStatus("deprecated")


class _SystemPFA_Type(Integer32):
    """Custom type systemPFA based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SystemPFA_Type.__name__ = "Integer32"
_SystemPFA_Object = MibScalar
systemPFA = _SystemPFA_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 8),
    _SystemPFA_Type()
)
systemPFA.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    systemPFA.setStatus("deprecated")


class _SystemInventory_Type(Integer32):
    """Custom type systemInventory based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SystemInventory_Type.__name__ = "Integer32"
_SystemInventory_Object = MibScalar
systemInventory = _SystemInventory_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 10),
    _SystemInventory_Type()
)
systemInventory.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemInventory.setStatus("mandatory")


class _SystemLog75PctFull_Type(Integer32):
    """Custom type systemLog75PctFull based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SystemLog75PctFull_Type.__name__ = "Integer32"
_SystemLog75PctFull_Object = MibScalar
systemLog75PctFull = _SystemLog75PctFull_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 11),
    _SystemLog75PctFull_Type()
)
systemLog75PctFull.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemLog75PctFull.setStatus("mandatory")


class _NetworkChangeNotification_Type(Integer32):
    """Custom type networkChangeNotification based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_NetworkChangeNotification_Type.__name__ = "Integer32"
_NetworkChangeNotification_Object = MibScalar
networkChangeNotification = _NetworkChangeNotification_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 12),
    _NetworkChangeNotification_Type()
)
networkChangeNotification.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    networkChangeNotification.setStatus("mandatory")


class _SystemBladeThrottling_Type(Integer32):
    """Custom type systemBladeThrottling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SystemBladeThrottling_Type.__name__ = "Integer32"
_SystemBladeThrottling_Object = MibScalar
systemBladeThrottling = _SystemBladeThrottling_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 13),
    _SystemBladeThrottling_Type()
)
systemBladeThrottling.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    systemBladeThrottling.setStatus("deprecated")


class _SystemPowerManagement_Type(Integer32):
    """Custom type systemPowerManagement based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SystemPowerManagement_Type.__name__ = "Integer32"
_SystemPowerManagement_Object = MibScalar
systemPowerManagement = _SystemPowerManagement_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 14),
    _SystemPowerManagement_Type()
)
systemPowerManagement.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    systemPowerManagement.setStatus("deprecated")


class _SystemRemoteLogin_Type(Integer32):
    """Custom type systemRemoteLogin based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SystemRemoteLogin_Type.__name__ = "Integer32"
_SystemRemoteLogin_Object = MibScalar
systemRemoteLogin = _SystemRemoteLogin_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 15),
    _SystemRemoteLogin_Type()
)
systemRemoteLogin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemRemoteLogin.setStatus("mandatory")


class _SystemBlade_Type(Integer32):
    """Custom type systemBlade based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SystemBlade_Type.__name__ = "Integer32"
_SystemBlade_Object = MibScalar
systemBlade = _SystemBlade_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 16),
    _SystemBlade_Type()
)
systemBlade.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemBlade.setStatus("mandatory")


class _SystemIO_Type(Integer32):
    """Custom type systemIO based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SystemIO_Type.__name__ = "Integer32"
_SystemIO_Object = MibScalar
systemIO = _SystemIO_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 17),
    _SystemIO_Type()
)
systemIO.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemIO.setStatus("mandatory")


class _SystemStorage_Type(Integer32):
    """Custom type systemStorage based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SystemStorage_Type.__name__ = "Integer32"
_SystemStorage_Object = MibScalar
systemStorage = _SystemStorage_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 18),
    _SystemStorage_Type()
)
systemStorage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemStorage.setStatus("mandatory")


class _SystemPower_Type(Integer32):
    """Custom type systemPower based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SystemPower_Type.__name__ = "Integer32"
_SystemPower_Object = MibScalar
systemPower = _SystemPower_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 19),
    _SystemPower_Type()
)
systemPower.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemPower.setStatus("mandatory")


class _SystemChassis_Type(Integer32):
    """Custom type systemChassis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SystemChassis_Type.__name__ = "Integer32"
_SystemChassis_Object = MibScalar
systemChassis = _SystemChassis_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 20),
    _SystemChassis_Type()
)
systemChassis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemChassis.setStatus("mandatory")


class _SystemFan_Type(Integer32):
    """Custom type systemFan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SystemFan_Type.__name__ = "Integer32"
_SystemFan_Object = MibScalar
systemFan = _SystemFan_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 21),
    _SystemFan_Type()
)
systemFan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemFan.setStatus("mandatory")


class _SystemPWRDO_Type(Integer32):
    """Custom type systemPWRDO based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SystemPWRDO_Type.__name__ = "Integer32"
_SystemPWRDO_Object = MibScalar
systemPWRDO = _SystemPWRDO_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 22),
    _SystemPWRDO_Type()
)
systemPWRDO.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemPWRDO.setStatus("mandatory")


class _AlertMode_Type(Integer32):
    """Custom type alertMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("legacy", 0),
          ("enhanced", 1))
    )


_AlertMode_Type.__name__ = "Integer32"
_AlertMode_Object = MibScalar
alertMode = _AlertMode_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 4),
    _AlertMode_Type()
)
alertMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    alertMode.setStatus("mandatory")
_SecuritySettings_ObjectIdentity = ObjectIdentity
securitySettings = _SecuritySettings_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3)
)


class _DataEncryption_Type(Integer32):
    """Custom type dataEncryption based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_DataEncryption_Type.__name__ = "Integer32"
_DataEncryption_Object = MibScalar
dataEncryption = _DataEncryption_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 1),
    _DataEncryption_Type()
)
dataEncryption.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dataEncryption.setStatus("mandatory")


class _TrespassWarning_Type(Integer32):
    """Custom type trespassWarning based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_TrespassWarning_Type.__name__ = "Integer32"
_TrespassWarning_Object = MibScalar
trespassWarning = _TrespassWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 2),
    _TrespassWarning_Type()
)
trespassWarning.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    trespassWarning.setStatus("mandatory")


class _TrespassWarningDefault_Type(Integer32):
    """Custom type trespassWarningDefault based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_TrespassWarningDefault_Type.__name__ = "Integer32"
_TrespassWarningDefault_Object = MibScalar
trespassWarningDefault = _TrespassWarningDefault_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 3),
    _TrespassWarningDefault_Type()
)
trespassWarningDefault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    trespassWarningDefault.setStatus("mandatory")


class _TrespassMessage_Type(OctetString):
    """Custom type trespassMessage based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1600),
    )


_TrespassMessage_Type.__name__ = "OctetString"
_TrespassMessage_Object = MibScalar
trespassMessage = _TrespassMessage_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 4),
    _TrespassMessage_Type()
)
trespassMessage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    trespassMessage.setStatus("mandatory")
_SpClock_ObjectIdentity = ObjectIdentity
spClock = _SpClock_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4)
)
_SpClockDateAndTimeSetting_Type = OctetString
_SpClockDateAndTimeSetting_Object = MibScalar
spClockDateAndTimeSetting = _SpClockDateAndTimeSetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 1),
    _SpClockDateAndTimeSetting_Type()
)
spClockDateAndTimeSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    spClockDateAndTimeSetting.setStatus("mandatory")
_SpClockTimezoneSetting_Type = OctetString
_SpClockTimezoneSetting_Object = MibScalar
spClockTimezoneSetting = _SpClockTimezoneSetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 2),
    _SpClockTimezoneSetting_Type()
)
spClockTimezoneSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    spClockTimezoneSetting.setStatus("mandatory")
_SpIdentification_ObjectIdentity = ObjectIdentity
spIdentification = _SpIdentification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 5)
)


class _SpTxtId_Type(OctetString):
    """Custom type spTxtId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_SpTxtId_Type.__name__ = "OctetString"
_SpTxtId_Object = MibScalar
spTxtId = _SpTxtId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 5, 1),
    _SpTxtId_Type()
)
spTxtId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    spTxtId.setStatus("mandatory")
_NetworkConfiguration_ObjectIdentity = ObjectIdentity
networkConfiguration = _NetworkConfiguration_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9)
)
_NetworkInterfaces_ObjectIdentity = ObjectIdentity
networkInterfaces = _NetworkInterfaces_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1)
)
_ExtEthernetInterface_ObjectIdentity = ObjectIdentity
extEthernetInterface = _ExtEthernetInterface_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1)
)


class _ExtEthernetInterfaceType_Type(OctetString):
    """Custom type extEthernetInterfaceType based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_ExtEthernetInterfaceType_Type.__name__ = "OctetString"
_ExtEthernetInterfaceType_Object = MibScalar
extEthernetInterfaceType = _ExtEthernetInterfaceType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 1),
    _ExtEthernetInterfaceType_Type()
)
extEthernetInterfaceType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    extEthernetInterfaceType.setStatus("mandatory")


class _ExtEthernetInterfaceHostName_Type(OctetString):
    """Custom type extEthernetInterfaceHostName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_ExtEthernetInterfaceHostName_Type.__name__ = "OctetString"
_ExtEthernetInterfaceHostName_Object = MibScalar
extEthernetInterfaceHostName = _ExtEthernetInterfaceHostName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 3),
    _ExtEthernetInterfaceHostName_Type()
)
extEthernetInterfaceHostName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    extEthernetInterfaceHostName.setStatus("mandatory")
_ExtEthernetInterfaceIPAddress_Type = IpAddress
_ExtEthernetInterfaceIPAddress_Object = MibScalar
extEthernetInterfaceIPAddress = _ExtEthernetInterfaceIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 4),
    _ExtEthernetInterfaceIPAddress_Type()
)
extEthernetInterfaceIPAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    extEthernetInterfaceIPAddress.setStatus("mandatory")


class _ExtEthernetInterfaceDataRate_Type(Integer32):
    """Custom type extEthernetInterfaceDataRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("enet10Megabit", 3),
          ("enet100Megabit", 4),
          ("autoSpeed", 5),
          ("enet1GigabitAuto", 6))
    )


_ExtEthernetInterfaceDataRate_Type.__name__ = "Integer32"
_ExtEthernetInterfaceDataRate_Object = MibScalar
extEthernetInterfaceDataRate = _ExtEthernetInterfaceDataRate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 5),
    _ExtEthernetInterfaceDataRate_Type()
)
extEthernetInterfaceDataRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    extEthernetInterfaceDataRate.setStatus("mandatory")


class _ExtEthernetInterfaceDuplexSetting_Type(Integer32):
    """Custom type extEthernetInterfaceDuplexSetting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("fullDuplex", 1),
          ("halfDuplex", 2),
          ("autoDuplex", 3))
    )


_ExtEthernetInterfaceDuplexSetting_Type.__name__ = "Integer32"
_ExtEthernetInterfaceDuplexSetting_Object = MibScalar
extEthernetInterfaceDuplexSetting = _ExtEthernetInterfaceDuplexSetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 6),
    _ExtEthernetInterfaceDuplexSetting_Type()
)
extEthernetInterfaceDuplexSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    extEthernetInterfaceDuplexSetting.setStatus("mandatory")


class _ExtEthernetInterfaceLAA_Type(OctetString):
    """Custom type extEthernetInterfaceLAA based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_ExtEthernetInterfaceLAA_Type.__name__ = "OctetString"
_ExtEthernetInterfaceLAA_Object = MibScalar
extEthernetInterfaceLAA = _ExtEthernetInterfaceLAA_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 7),
    _ExtEthernetInterfaceLAA_Type()
)
extEthernetInterfaceLAA.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    extEthernetInterfaceLAA.setStatus("mandatory")


class _ExtEthernetInterfaceDhcpEnabled_Type(Integer32):
    """Custom type extEthernetInterfaceDhcpEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dhcpDisabled", 0),
          ("dhcpEnabled", 1),
          ("tryDhcpThenTryStatic", 2))
    )


_ExtEthernetInterfaceDhcpEnabled_Type.__name__ = "Integer32"
_ExtEthernetInterfaceDhcpEnabled_Object = MibScalar
extEthernetInterfaceDhcpEnabled = _ExtEthernetInterfaceDhcpEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 8),
    _ExtEthernetInterfaceDhcpEnabled_Type()
)
extEthernetInterfaceDhcpEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    extEthernetInterfaceDhcpEnabled.setStatus("mandatory")
_ExtEthernetInterfaceGatewayIPAddress_Type = IpAddress
_ExtEthernetInterfaceGatewayIPAddress_Object = MibScalar
extEthernetInterfaceGatewayIPAddress = _ExtEthernetInterfaceGatewayIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 9),
    _ExtEthernetInterfaceGatewayIPAddress_Type()
)
extEthernetInterfaceGatewayIPAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    extEthernetInterfaceGatewayIPAddress.setStatus("mandatory")


class _ExtEthernetInterfaceBIA_Type(OctetString):
    """Custom type extEthernetInterfaceBIA based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_ExtEthernetInterfaceBIA_Type.__name__ = "OctetString"
_ExtEthernetInterfaceBIA_Object = MibScalar
extEthernetInterfaceBIA = _ExtEthernetInterfaceBIA_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 10),
    _ExtEthernetInterfaceBIA_Type()
)
extEthernetInterfaceBIA.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    extEthernetInterfaceBIA.setStatus("mandatory")
_ExtEthernetInterfaceMTU_Type = Integer32
_ExtEthernetInterfaceMTU_Object = MibScalar
extEthernetInterfaceMTU = _ExtEthernetInterfaceMTU_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 13),
    _ExtEthernetInterfaceMTU_Type()
)
extEthernetInterfaceMTU.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    extEthernetInterfaceMTU.setStatus("mandatory")
_ExtEthernetInterfaceSubnetMask_Type = IpAddress
_ExtEthernetInterfaceSubnetMask_Object = MibScalar
extEthernetInterfaceSubnetMask = _ExtEthernetInterfaceSubnetMask_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 14),
    _ExtEthernetInterfaceSubnetMask_Type()
)
extEthernetInterfaceSubnetMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    extEthernetInterfaceSubnetMask.setStatus("mandatory")
_DhcpEthernetInterface_ObjectIdentity = ObjectIdentity
dhcpEthernetInterface = _DhcpEthernetInterface_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16)
)


class _DhcpHostName_Type(OctetString):
    """Custom type dhcpHostName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_DhcpHostName_Type.__name__ = "OctetString"
_DhcpHostName_Object = MibScalar
dhcpHostName = _DhcpHostName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 1),
    _DhcpHostName_Type()
)
dhcpHostName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpHostName.setStatus("mandatory")
_DhcpIPAddress_Type = IpAddress
_DhcpIPAddress_Object = MibScalar
dhcpIPAddress = _DhcpIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 2),
    _DhcpIPAddress_Type()
)
dhcpIPAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpIPAddress.setStatus("mandatory")
_DhcpGatewayIPAddress_Type = IpAddress
_DhcpGatewayIPAddress_Object = MibScalar
dhcpGatewayIPAddress = _DhcpGatewayIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 3),
    _DhcpGatewayIPAddress_Type()
)
dhcpGatewayIPAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpGatewayIPAddress.setStatus("mandatory")
_DhcpSubnetMask_Type = IpAddress
_DhcpSubnetMask_Object = MibScalar
dhcpSubnetMask = _DhcpSubnetMask_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 4),
    _DhcpSubnetMask_Type()
)
dhcpSubnetMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSubnetMask.setStatus("mandatory")


class _DhcpDomainName_Type(OctetString):
    """Custom type dhcpDomainName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_DhcpDomainName_Type.__name__ = "OctetString"
_DhcpDomainName_Object = MibScalar
dhcpDomainName = _DhcpDomainName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 5),
    _DhcpDomainName_Type()
)
dhcpDomainName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpDomainName.setStatus("mandatory")
_DhcpDHCPServer_Type = IpAddress
_DhcpDHCPServer_Object = MibScalar
dhcpDHCPServer = _DhcpDHCPServer_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 6),
    _DhcpDHCPServer_Type()
)
dhcpDHCPServer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpDHCPServer.setStatus("mandatory")
_DhcpPrimaryDNSServer_Type = IpAddress
_DhcpPrimaryDNSServer_Object = MibScalar
dhcpPrimaryDNSServer = _DhcpPrimaryDNSServer_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 7),
    _DhcpPrimaryDNSServer_Type()
)
dhcpPrimaryDNSServer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpPrimaryDNSServer.setStatus("mandatory")
_DhcpSecondaryDNSServer_Type = IpAddress
_DhcpSecondaryDNSServer_Object = MibScalar
dhcpSecondaryDNSServer = _DhcpSecondaryDNSServer_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 8),
    _DhcpSecondaryDNSServer_Type()
)
dhcpSecondaryDNSServer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSecondaryDNSServer.setStatus("mandatory")
_DhcpTertiaryDNSServer_Type = IpAddress
_DhcpTertiaryDNSServer_Object = MibScalar
dhcpTertiaryDNSServer = _DhcpTertiaryDNSServer_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 9),
    _DhcpTertiaryDNSServer_Type()
)
dhcpTertiaryDNSServer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpTertiaryDNSServer.setStatus("mandatory")
_IntEthernetInterface_ObjectIdentity = ObjectIdentity
intEthernetInterface = _IntEthernetInterface_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 2)
)


class _IntEthernetInterfaceType_Type(OctetString):
    """Custom type intEthernetInterfaceType based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_IntEthernetInterfaceType_Type.__name__ = "OctetString"
_IntEthernetInterfaceType_Object = MibScalar
intEthernetInterfaceType = _IntEthernetInterfaceType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 2, 1),
    _IntEthernetInterfaceType_Type()
)
intEthernetInterfaceType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    intEthernetInterfaceType.setStatus("deprecated")


class _IntEthernetInterfaceEnabled_Type(Integer32):
    """Custom type intEthernetInterfaceEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("interfaceDisabled", 0),
          ("interfaceEnabled", 1))
    )


_IntEthernetInterfaceEnabled_Type.__name__ = "Integer32"
_IntEthernetInterfaceEnabled_Object = MibScalar
intEthernetInterfaceEnabled = _IntEthernetInterfaceEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 2, 2),
    _IntEthernetInterfaceEnabled_Type()
)
intEthernetInterfaceEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    intEthernetInterfaceEnabled.setStatus("deprecated")
_IntEthernetInterfaceLocalIPAddress_Type = IpAddress
_IntEthernetInterfaceLocalIPAddress_Object = MibScalar
intEthernetInterfaceLocalIPAddress = _IntEthernetInterfaceLocalIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 2, 4),
    _IntEthernetInterfaceLocalIPAddress_Type()
)
intEthernetInterfaceLocalIPAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    intEthernetInterfaceLocalIPAddress.setStatus("deprecated")


class _IntEthernetInterfaceDataRate_Type(Integer32):
    """Custom type intEthernetInterfaceDataRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("enet10Megabit", 3),
          ("enet100Megabit", 4),
          ("autoSpeed", 5))
    )


_IntEthernetInterfaceDataRate_Type.__name__ = "Integer32"
_IntEthernetInterfaceDataRate_Object = MibScalar
intEthernetInterfaceDataRate = _IntEthernetInterfaceDataRate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 2, 5),
    _IntEthernetInterfaceDataRate_Type()
)
intEthernetInterfaceDataRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    intEthernetInterfaceDataRate.setStatus("deprecated")


class _IntEthernetInterfaceDuplexSetting_Type(Integer32):
    """Custom type intEthernetInterfaceDuplexSetting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("fullDuplex", 1),
          ("halfDuplex", 2),
          ("autoDuplex", 3))
    )


_IntEthernetInterfaceDuplexSetting_Type.__name__ = "Integer32"
_IntEthernetInterfaceDuplexSetting_Object = MibScalar
intEthernetInterfaceDuplexSetting = _IntEthernetInterfaceDuplexSetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 2, 6),
    _IntEthernetInterfaceDuplexSetting_Type()
)
intEthernetInterfaceDuplexSetting.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    intEthernetInterfaceDuplexSetting.setStatus("deprecated")


class _IntEthernetInterfaceLAA_Type(OctetString):
    """Custom type intEthernetInterfaceLAA based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_IntEthernetInterfaceLAA_Type.__name__ = "OctetString"
_IntEthernetInterfaceLAA_Object = MibScalar
intEthernetInterfaceLAA = _IntEthernetInterfaceLAA_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 2, 7),
    _IntEthernetInterfaceLAA_Type()
)
intEthernetInterfaceLAA.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    intEthernetInterfaceLAA.setStatus("deprecated")
_IntEthernetInterfaceGatewayIPAddress_Type = IpAddress
_IntEthernetInterfaceGatewayIPAddress_Object = MibScalar
intEthernetInterfaceGatewayIPAddress = _IntEthernetInterfaceGatewayIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 2, 9),
    _IntEthernetInterfaceGatewayIPAddress_Type()
)
intEthernetInterfaceGatewayIPAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    intEthernetInterfaceGatewayIPAddress.setStatus("deprecated")


class _IntEthernetInterfaceBIA_Type(OctetString):
    """Custom type intEthernetInterfaceBIA based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_IntEthernetInterfaceBIA_Type.__name__ = "OctetString"
_IntEthernetInterfaceBIA_Object = MibScalar
intEthernetInterfaceBIA = _IntEthernetInterfaceBIA_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 2, 10),
    _IntEthernetInterfaceBIA_Type()
)
intEthernetInterfaceBIA.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    intEthernetInterfaceBIA.setStatus("deprecated")
_IntEthernetInterfaceMTU_Type = Integer32
_IntEthernetInterfaceMTU_Object = MibScalar
intEthernetInterfaceMTU = _IntEthernetInterfaceMTU_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 2, 13),
    _IntEthernetInterfaceMTU_Type()
)
intEthernetInterfaceMTU.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    intEthernetInterfaceMTU.setStatus("deprecated")
_IntEthernetInterfaceSubnetMask_Type = IpAddress
_IntEthernetInterfaceSubnetMask_Object = MibScalar
intEthernetInterfaceSubnetMask = _IntEthernetInterfaceSubnetMask_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 2, 14),
    _IntEthernetInterfaceSubnetMask_Type()
)
intEthernetInterfaceSubnetMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    intEthernetInterfaceSubnetMask.setStatus("deprecated")
_StandbyExtEthernetInterface_ObjectIdentity = ObjectIdentity
standbyExtEthernetInterface = _StandbyExtEthernetInterface_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3)
)


class _StandbyExtEthernetInterfaceType_Type(OctetString):
    """Custom type standbyExtEthernetInterfaceType based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_StandbyExtEthernetInterfaceType_Type.__name__ = "OctetString"
_StandbyExtEthernetInterfaceType_Object = MibScalar
standbyExtEthernetInterfaceType = _StandbyExtEthernetInterfaceType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 1),
    _StandbyExtEthernetInterfaceType_Type()
)
standbyExtEthernetInterfaceType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyExtEthernetInterfaceType.setStatus("mandatory")


class _StandbyExtEthernetInterfaceHostName_Type(OctetString):
    """Custom type standbyExtEthernetInterfaceHostName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_StandbyExtEthernetInterfaceHostName_Type.__name__ = "OctetString"
_StandbyExtEthernetInterfaceHostName_Object = MibScalar
standbyExtEthernetInterfaceHostName = _StandbyExtEthernetInterfaceHostName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 3),
    _StandbyExtEthernetInterfaceHostName_Type()
)
standbyExtEthernetInterfaceHostName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    standbyExtEthernetInterfaceHostName.setStatus("mandatory")
_StandbyExtEthernetInterfaceIPAddress_Type = IpAddress
_StandbyExtEthernetInterfaceIPAddress_Object = MibScalar
standbyExtEthernetInterfaceIPAddress = _StandbyExtEthernetInterfaceIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 4),
    _StandbyExtEthernetInterfaceIPAddress_Type()
)
standbyExtEthernetInterfaceIPAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    standbyExtEthernetInterfaceIPAddress.setStatus("mandatory")


class _StandbyExtEthernetInterfaceDataRate_Type(Integer32):
    """Custom type standbyExtEthernetInterfaceDataRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("enet10Megabit", 3),
          ("enet100Megabit", 4),
          ("autoSpeed", 5),
          ("enet1GigabitAuto", 6))
    )


_StandbyExtEthernetInterfaceDataRate_Type.__name__ = "Integer32"
_StandbyExtEthernetInterfaceDataRate_Object = MibScalar
standbyExtEthernetInterfaceDataRate = _StandbyExtEthernetInterfaceDataRate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 5),
    _StandbyExtEthernetInterfaceDataRate_Type()
)
standbyExtEthernetInterfaceDataRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    standbyExtEthernetInterfaceDataRate.setStatus("mandatory")


class _StandbyExtEthernetInterfaceDuplexSetting_Type(Integer32):
    """Custom type standbyExtEthernetInterfaceDuplexSetting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("fullDuplex", 1),
          ("halfDuplex", 2),
          ("autoDuplex", 3))
    )


_StandbyExtEthernetInterfaceDuplexSetting_Type.__name__ = "Integer32"
_StandbyExtEthernetInterfaceDuplexSetting_Object = MibScalar
standbyExtEthernetInterfaceDuplexSetting = _StandbyExtEthernetInterfaceDuplexSetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 6),
    _StandbyExtEthernetInterfaceDuplexSetting_Type()
)
standbyExtEthernetInterfaceDuplexSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    standbyExtEthernetInterfaceDuplexSetting.setStatus("mandatory")


class _StandbyExtEthernetInterfaceLAA_Type(OctetString):
    """Custom type standbyExtEthernetInterfaceLAA based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_StandbyExtEthernetInterfaceLAA_Type.__name__ = "OctetString"
_StandbyExtEthernetInterfaceLAA_Object = MibScalar
standbyExtEthernetInterfaceLAA = _StandbyExtEthernetInterfaceLAA_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 7),
    _StandbyExtEthernetInterfaceLAA_Type()
)
standbyExtEthernetInterfaceLAA.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    standbyExtEthernetInterfaceLAA.setStatus("mandatory")


class _StandbyExtEthernetInterfaceDhcpEnabled_Type(Integer32):
    """Custom type standbyExtEthernetInterfaceDhcpEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dhcpDisabled", 0),
          ("dhcpEnabled", 1),
          ("tryDhcpThenTryStatic", 2))
    )


_StandbyExtEthernetInterfaceDhcpEnabled_Type.__name__ = "Integer32"
_StandbyExtEthernetInterfaceDhcpEnabled_Object = MibScalar
standbyExtEthernetInterfaceDhcpEnabled = _StandbyExtEthernetInterfaceDhcpEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 8),
    _StandbyExtEthernetInterfaceDhcpEnabled_Type()
)
standbyExtEthernetInterfaceDhcpEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    standbyExtEthernetInterfaceDhcpEnabled.setStatus("mandatory")
_StandbyExtEthernetInterfaceGatewayIPAddress_Type = IpAddress
_StandbyExtEthernetInterfaceGatewayIPAddress_Object = MibScalar
standbyExtEthernetInterfaceGatewayIPAddress = _StandbyExtEthernetInterfaceGatewayIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 9),
    _StandbyExtEthernetInterfaceGatewayIPAddress_Type()
)
standbyExtEthernetInterfaceGatewayIPAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    standbyExtEthernetInterfaceGatewayIPAddress.setStatus("mandatory")


class _StandbyExtEthernetInterfaceBIA_Type(OctetString):
    """Custom type standbyExtEthernetInterfaceBIA based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_StandbyExtEthernetInterfaceBIA_Type.__name__ = "OctetString"
_StandbyExtEthernetInterfaceBIA_Object = MibScalar
standbyExtEthernetInterfaceBIA = _StandbyExtEthernetInterfaceBIA_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 10),
    _StandbyExtEthernetInterfaceBIA_Type()
)
standbyExtEthernetInterfaceBIA.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyExtEthernetInterfaceBIA.setStatus("mandatory")
_StandbyExtEthernetInterfaceMTU_Type = Integer32
_StandbyExtEthernetInterfaceMTU_Object = MibScalar
standbyExtEthernetInterfaceMTU = _StandbyExtEthernetInterfaceMTU_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 13),
    _StandbyExtEthernetInterfaceMTU_Type()
)
standbyExtEthernetInterfaceMTU.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    standbyExtEthernetInterfaceMTU.setStatus("mandatory")
_StandbyExtEthernetInterfaceSubnetMask_Type = IpAddress
_StandbyExtEthernetInterfaceSubnetMask_Object = MibScalar
standbyExtEthernetInterfaceSubnetMask = _StandbyExtEthernetInterfaceSubnetMask_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 14),
    _StandbyExtEthernetInterfaceSubnetMask_Type()
)
standbyExtEthernetInterfaceSubnetMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    standbyExtEthernetInterfaceSubnetMask.setStatus("mandatory")


class _AdvancedFailover_Type(Integer32):
    """Custom type advancedFailover based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("ipnoswap", 1),
          ("ipswap", 2))
    )


_AdvancedFailover_Type.__name__ = "Integer32"
_AdvancedFailover_Object = MibScalar
advancedFailover = _AdvancedFailover_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 15),
    _AdvancedFailover_Type()
)
advancedFailover.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    advancedFailover.setStatus("mandatory")
_StandbyDhcpEthernetInterface_ObjectIdentity = ObjectIdentity
standbyDhcpEthernetInterface = _StandbyDhcpEthernetInterface_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16)
)


class _StandbyDhcpHostName_Type(OctetString):
    """Custom type standbyDhcpHostName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_StandbyDhcpHostName_Type.__name__ = "OctetString"
_StandbyDhcpHostName_Object = MibScalar
standbyDhcpHostName = _StandbyDhcpHostName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16, 1),
    _StandbyDhcpHostName_Type()
)
standbyDhcpHostName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyDhcpHostName.setStatus("mandatory")
_StandbyDhcpIPAddress_Type = IpAddress
_StandbyDhcpIPAddress_Object = MibScalar
standbyDhcpIPAddress = _StandbyDhcpIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16, 2),
    _StandbyDhcpIPAddress_Type()
)
standbyDhcpIPAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyDhcpIPAddress.setStatus("mandatory")
_StandbyDhcpGatewayIPAddress_Type = IpAddress
_StandbyDhcpGatewayIPAddress_Object = MibScalar
standbyDhcpGatewayIPAddress = _StandbyDhcpGatewayIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16, 3),
    _StandbyDhcpGatewayIPAddress_Type()
)
standbyDhcpGatewayIPAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyDhcpGatewayIPAddress.setStatus("mandatory")
_StandbyDhcpSubnetMask_Type = IpAddress
_StandbyDhcpSubnetMask_Object = MibScalar
standbyDhcpSubnetMask = _StandbyDhcpSubnetMask_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16, 4),
    _StandbyDhcpSubnetMask_Type()
)
standbyDhcpSubnetMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyDhcpSubnetMask.setStatus("mandatory")


class _StandbyDhcpDomainName_Type(OctetString):
    """Custom type standbyDhcpDomainName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_StandbyDhcpDomainName_Type.__name__ = "OctetString"
_StandbyDhcpDomainName_Object = MibScalar
standbyDhcpDomainName = _StandbyDhcpDomainName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16, 5),
    _StandbyDhcpDomainName_Type()
)
standbyDhcpDomainName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyDhcpDomainName.setStatus("mandatory")
_StandbyDhcpDHCPServer_Type = IpAddress
_StandbyDhcpDHCPServer_Object = MibScalar
standbyDhcpDHCPServer = _StandbyDhcpDHCPServer_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16, 6),
    _StandbyDhcpDHCPServer_Type()
)
standbyDhcpDHCPServer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyDhcpDHCPServer.setStatus("mandatory")
_StandbyDhcpPrimaryDNSServer_Type = IpAddress
_StandbyDhcpPrimaryDNSServer_Object = MibScalar
standbyDhcpPrimaryDNSServer = _StandbyDhcpPrimaryDNSServer_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16, 7),
    _StandbyDhcpPrimaryDNSServer_Type()
)
standbyDhcpPrimaryDNSServer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyDhcpPrimaryDNSServer.setStatus("mandatory")
_StandbyDhcpSecondaryDNSServer_Type = IpAddress
_StandbyDhcpSecondaryDNSServer_Object = MibScalar
standbyDhcpSecondaryDNSServer = _StandbyDhcpSecondaryDNSServer_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16, 8),
    _StandbyDhcpSecondaryDNSServer_Type()
)
standbyDhcpSecondaryDNSServer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyDhcpSecondaryDNSServer.setStatus("mandatory")
_StandbyDhcpTertiaryDNSServer_Type = IpAddress
_StandbyDhcpTertiaryDNSServer_Object = MibScalar
standbyDhcpTertiaryDNSServer = _StandbyDhcpTertiaryDNSServer_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16, 9),
    _StandbyDhcpTertiaryDNSServer_Type()
)
standbyDhcpTertiaryDNSServer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyDhcpTertiaryDNSServer.setStatus("mandatory")
_ExtEthernetInterfaceIPv6_ObjectIdentity = ObjectIdentity
extEthernetInterfaceIPv6 = _ExtEthernetInterfaceIPv6_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4)
)


class _ExtEthernetInterfaceIPv6Type_Type(OctetString):
    """Custom type extEthernetInterfaceIPv6Type based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_ExtEthernetInterfaceIPv6Type_Type.__name__ = "OctetString"
_ExtEthernetInterfaceIPv6Type_Object = MibScalar
extEthernetInterfaceIPv6Type = _ExtEthernetInterfaceIPv6Type_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 1),
    _ExtEthernetInterfaceIPv6Type_Type()
)
extEthernetInterfaceIPv6Type.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    extEthernetInterfaceIPv6Type.setStatus("mandatory")


class _ExtEthernetInterfaceIPv6Enabled_Type(Integer32):
    """Custom type extEthernetInterfaceIPv6Enabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_ExtEthernetInterfaceIPv6Enabled_Type.__name__ = "Integer32"
_ExtEthernetInterfaceIPv6Enabled_Object = MibScalar
extEthernetInterfaceIPv6Enabled = _ExtEthernetInterfaceIPv6Enabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 2),
    _ExtEthernetInterfaceIPv6Enabled_Type()
)
extEthernetInterfaceIPv6Enabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    extEthernetInterfaceIPv6Enabled.setStatus("mandatory")
_ExtEthernetInterfaceIPv6Config_ObjectIdentity = ObjectIdentity
extEthernetInterfaceIPv6Config = _ExtEthernetInterfaceIPv6Config_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5)
)
_ExtEthernetInterfaceIPv6LocalAddress_ObjectIdentity = ObjectIdentity
extEthernetInterfaceIPv6LocalAddress = _ExtEthernetInterfaceIPv6LocalAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 1)
)
_ExtEthernetInterfaceIPv6LinkLocalAddress_Type = InetAddressIPv6
_ExtEthernetInterfaceIPv6LinkLocalAddress_Object = MibScalar
extEthernetInterfaceIPv6LinkLocalAddress = _ExtEthernetInterfaceIPv6LinkLocalAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 1, 1),
    _ExtEthernetInterfaceIPv6LinkLocalAddress_Type()
)
extEthernetInterfaceIPv6LinkLocalAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    extEthernetInterfaceIPv6LinkLocalAddress.setStatus("mandatory")
_ExtEthernetInterfaceIPv6StaticIPConfig_ObjectIdentity = ObjectIdentity
extEthernetInterfaceIPv6StaticIPConfig = _ExtEthernetInterfaceIPv6StaticIPConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 2)
)


class _ExtEthernetInterfaceIPv6StaticIPConfigEnabled_Type(Integer32):
    """Custom type extEthernetInterfaceIPv6StaticIPConfigEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_ExtEthernetInterfaceIPv6StaticIPConfigEnabled_Type.__name__ = "Integer32"
_ExtEthernetInterfaceIPv6StaticIPConfigEnabled_Object = MibScalar
extEthernetInterfaceIPv6StaticIPConfigEnabled = _ExtEthernetInterfaceIPv6StaticIPConfigEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 2, 1),
    _ExtEthernetInterfaceIPv6StaticIPConfigEnabled_Type()
)
extEthernetInterfaceIPv6StaticIPConfigEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    extEthernetInterfaceIPv6StaticIPConfigEnabled.setStatus("mandatory")
_ExtEthernetInterfaceIPv6StaticIPAddress_Type = InetAddressIPv6
_ExtEthernetInterfaceIPv6StaticIPAddress_Object = MibScalar
extEthernetInterfaceIPv6StaticIPAddress = _ExtEthernetInterfaceIPv6StaticIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 2, 2),
    _ExtEthernetInterfaceIPv6StaticIPAddress_Type()
)
extEthernetInterfaceIPv6StaticIPAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    extEthernetInterfaceIPv6StaticIPAddress.setStatus("mandatory")


class _ExtEthernetInterfaceIPv6StaticIPAddressPrefixLen_Type(Integer32):
    """Custom type extEthernetInterfaceIPv6StaticIPAddressPrefixLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_ExtEthernetInterfaceIPv6StaticIPAddressPrefixLen_Type.__name__ = "Integer32"
_ExtEthernetInterfaceIPv6StaticIPAddressPrefixLen_Object = MibScalar
extEthernetInterfaceIPv6StaticIPAddressPrefixLen = _ExtEthernetInterfaceIPv6StaticIPAddressPrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 2, 3),
    _ExtEthernetInterfaceIPv6StaticIPAddressPrefixLen_Type()
)
extEthernetInterfaceIPv6StaticIPAddressPrefixLen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    extEthernetInterfaceIPv6StaticIPAddressPrefixLen.setStatus("mandatory")
_ExtEthernetInterfaceIPv6StaticIPDefaultRoute_Type = InetAddressIPv6
_ExtEthernetInterfaceIPv6StaticIPDefaultRoute_Object = MibScalar
extEthernetInterfaceIPv6StaticIPDefaultRoute = _ExtEthernetInterfaceIPv6StaticIPDefaultRoute_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 2, 4),
    _ExtEthernetInterfaceIPv6StaticIPDefaultRoute_Type()
)
extEthernetInterfaceIPv6StaticIPDefaultRoute.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    extEthernetInterfaceIPv6StaticIPDefaultRoute.setStatus("mandatory")
_ExtEthernetInterfaceIPv6AutoIPConfig_ObjectIdentity = ObjectIdentity
extEthernetInterfaceIPv6AutoIPConfig = _ExtEthernetInterfaceIPv6AutoIPConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3)
)


class _ExtEthernetInterfaceIPv6AutoIPConfigEnabled_Type(Integer32):
    """Custom type extEthernetInterfaceIPv6AutoIPConfigEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_ExtEthernetInterfaceIPv6AutoIPConfigEnabled_Type.__name__ = "Integer32"
_ExtEthernetInterfaceIPv6AutoIPConfigEnabled_Object = MibScalar
extEthernetInterfaceIPv6AutoIPConfigEnabled = _ExtEthernetInterfaceIPv6AutoIPConfigEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 1),
    _ExtEthernetInterfaceIPv6AutoIPConfigEnabled_Type()
)
extEthernetInterfaceIPv6AutoIPConfigEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    extEthernetInterfaceIPv6AutoIPConfigEnabled.setStatus("mandatory")
_ExtEthernetInterfaceDHCPv6Config_ObjectIdentity = ObjectIdentity
extEthernetInterfaceDHCPv6Config = _ExtEthernetInterfaceDHCPv6Config_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 2)
)


class _ExtEthernetInterfaceDHCPv6Enabled_Type(Integer32):
    """Custom type extEthernetInterfaceDHCPv6Enabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_ExtEthernetInterfaceDHCPv6Enabled_Type.__name__ = "Integer32"
_ExtEthernetInterfaceDHCPv6Enabled_Object = MibScalar
extEthernetInterfaceDHCPv6Enabled = _ExtEthernetInterfaceDHCPv6Enabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 2, 1),
    _ExtEthernetInterfaceDHCPv6Enabled_Type()
)
extEthernetInterfaceDHCPv6Enabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    extEthernetInterfaceDHCPv6Enabled.setStatus("mandatory")
_ExtEthernetInterfaceDHCPv6IPAddress_Type = InetAddressIPv6
_ExtEthernetInterfaceDHCPv6IPAddress_Object = MibScalar
extEthernetInterfaceDHCPv6IPAddress = _ExtEthernetInterfaceDHCPv6IPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 2, 2),
    _ExtEthernetInterfaceDHCPv6IPAddress_Type()
)
extEthernetInterfaceDHCPv6IPAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    extEthernetInterfaceDHCPv6IPAddress.setStatus("mandatory")


class _ExtEthernetInterfaceDHCPv6DomainName_Type(OctetString):
    """Custom type extEthernetInterfaceDHCPv6DomainName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_ExtEthernetInterfaceDHCPv6DomainName_Type.__name__ = "OctetString"
_ExtEthernetInterfaceDHCPv6DomainName_Object = MibScalar
extEthernetInterfaceDHCPv6DomainName = _ExtEthernetInterfaceDHCPv6DomainName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 2, 4),
    _ExtEthernetInterfaceDHCPv6DomainName_Type()
)
extEthernetInterfaceDHCPv6DomainName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    extEthernetInterfaceDHCPv6DomainName.setStatus("mandatory")
_ExtEthernetInterfaceDHCPv6PrimaryDNSServer_Type = InetAddressIPv6
_ExtEthernetInterfaceDHCPv6PrimaryDNSServer_Object = MibScalar
extEthernetInterfaceDHCPv6PrimaryDNSServer = _ExtEthernetInterfaceDHCPv6PrimaryDNSServer_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 2, 5),
    _ExtEthernetInterfaceDHCPv6PrimaryDNSServer_Type()
)
extEthernetInterfaceDHCPv6PrimaryDNSServer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    extEthernetInterfaceDHCPv6PrimaryDNSServer.setStatus("mandatory")
_ExtEthernetInterfaceDHCPv6SecondaryDNSServer_Type = InetAddressIPv6
_ExtEthernetInterfaceDHCPv6SecondaryDNSServer_Object = MibScalar
extEthernetInterfaceDHCPv6SecondaryDNSServer = _ExtEthernetInterfaceDHCPv6SecondaryDNSServer_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 2, 6),
    _ExtEthernetInterfaceDHCPv6SecondaryDNSServer_Type()
)
extEthernetInterfaceDHCPv6SecondaryDNSServer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    extEthernetInterfaceDHCPv6SecondaryDNSServer.setStatus("mandatory")
_ExtEthernetInterfaceDHCPv6TertiaryDNSServer_Type = InetAddressIPv6
_ExtEthernetInterfaceDHCPv6TertiaryDNSServer_Object = MibScalar
extEthernetInterfaceDHCPv6TertiaryDNSServer = _ExtEthernetInterfaceDHCPv6TertiaryDNSServer_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 2, 7),
    _ExtEthernetInterfaceDHCPv6TertiaryDNSServer_Type()
)
extEthernetInterfaceDHCPv6TertiaryDNSServer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    extEthernetInterfaceDHCPv6TertiaryDNSServer.setStatus("mandatory")
_ExtEthernetInterfaceDHCPv6Server_Type = InetAddressIPv6
_ExtEthernetInterfaceDHCPv6Server_Object = MibScalar
extEthernetInterfaceDHCPv6Server = _ExtEthernetInterfaceDHCPv6Server_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 2, 8),
    _ExtEthernetInterfaceDHCPv6Server_Type()
)
extEthernetInterfaceDHCPv6Server.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    extEthernetInterfaceDHCPv6Server.setStatus("mandatory")
_ExtEthernetInterfaceIPv6StatelessAutoConfig_ObjectIdentity = ObjectIdentity
extEthernetInterfaceIPv6StatelessAutoConfig = _ExtEthernetInterfaceIPv6StatelessAutoConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 3)
)


class _ExtEthernetInterfaceIPv6StatelessAutoConfigEnabled_Type(Integer32):
    """Custom type extEthernetInterfaceIPv6StatelessAutoConfigEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_ExtEthernetInterfaceIPv6StatelessAutoConfigEnabled_Type.__name__ = "Integer32"
_ExtEthernetInterfaceIPv6StatelessAutoConfigEnabled_Object = MibScalar
extEthernetInterfaceIPv6StatelessAutoConfigEnabled = _ExtEthernetInterfaceIPv6StatelessAutoConfigEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 3, 1),
    _ExtEthernetInterfaceIPv6StatelessAutoConfigEnabled_Type()
)
extEthernetInterfaceIPv6StatelessAutoConfigEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    extEthernetInterfaceIPv6StatelessAutoConfigEnabled.setStatus("mandatory")
_ExtEthernetInterfaceStatelessAutoConfigAddressesTable_Object = MibTable
extEthernetInterfaceStatelessAutoConfigAddressesTable = _ExtEthernetInterfaceStatelessAutoConfigAddressesTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 3, 2)
)
if mibBuilder.loadTexts:
    extEthernetInterfaceStatelessAutoConfigAddressesTable.setStatus("mandatory")
_ExtEthernetInterfaceStatelessAutoConfigAddressesEntry_Object = MibTableRow
extEthernetInterfaceStatelessAutoConfigAddressesEntry = _ExtEthernetInterfaceStatelessAutoConfigAddressesEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 3, 2, 1)
)
extEthernetInterfaceStatelessAutoConfigAddressesEntry.setIndexNames(
    (0, "BLADE-MIB", "extEthernetInterfaceStatelessAutoConfigAddressesIndex"),
)
if mibBuilder.loadTexts:
    extEthernetInterfaceStatelessAutoConfigAddressesEntry.setStatus("mandatory")
_ExtEthernetInterfaceStatelessAutoConfigAddressesIndex_Type = Integer32
_ExtEthernetInterfaceStatelessAutoConfigAddressesIndex_Object = MibTableColumn
extEthernetInterfaceStatelessAutoConfigAddressesIndex = _ExtEthernetInterfaceStatelessAutoConfigAddressesIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 3, 2, 1, 1),
    _ExtEthernetInterfaceStatelessAutoConfigAddressesIndex_Type()
)
extEthernetInterfaceStatelessAutoConfigAddressesIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    extEthernetInterfaceStatelessAutoConfigAddressesIndex.setStatus("mandatory")
_ExtEthernetInterfaceStatelessAutoConfigAddresses_Type = InetAddressIPv6
_ExtEthernetInterfaceStatelessAutoConfigAddresses_Object = MibTableColumn
extEthernetInterfaceStatelessAutoConfigAddresses = _ExtEthernetInterfaceStatelessAutoConfigAddresses_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 3, 2, 1, 2),
    _ExtEthernetInterfaceStatelessAutoConfigAddresses_Type()
)
extEthernetInterfaceStatelessAutoConfigAddresses.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    extEthernetInterfaceStatelessAutoConfigAddresses.setStatus("mandatory")


class _ExtEthernetInterfaceStatelessAutoConfigAddressesPrefixLen_Type(Integer32):
    """Custom type extEthernetInterfaceStatelessAutoConfigAddressesPrefixLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_ExtEthernetInterfaceStatelessAutoConfigAddressesPrefixLen_Type.__name__ = "Integer32"
_ExtEthernetInterfaceStatelessAutoConfigAddressesPrefixLen_Object = MibTableColumn
extEthernetInterfaceStatelessAutoConfigAddressesPrefixLen = _ExtEthernetInterfaceStatelessAutoConfigAddressesPrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 3, 2, 1, 3),
    _ExtEthernetInterfaceStatelessAutoConfigAddressesPrefixLen_Type()
)
extEthernetInterfaceStatelessAutoConfigAddressesPrefixLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    extEthernetInterfaceStatelessAutoConfigAddressesPrefixLen.setStatus("mandatory")
_StandbyExtEthernetInterfaceIPv6_ObjectIdentity = ObjectIdentity
standbyExtEthernetInterfaceIPv6 = _StandbyExtEthernetInterfaceIPv6_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5)
)
_StandbyEthernetInterfaceIPv6LocalAddress_ObjectIdentity = ObjectIdentity
standbyEthernetInterfaceIPv6LocalAddress = _StandbyEthernetInterfaceIPv6LocalAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 1)
)
_StandbyEthernetInterfaceIPv6LinkLocalAddress_Type = InetAddressIPv6
_StandbyEthernetInterfaceIPv6LinkLocalAddress_Object = MibScalar
standbyEthernetInterfaceIPv6LinkLocalAddress = _StandbyEthernetInterfaceIPv6LinkLocalAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 1, 1),
    _StandbyEthernetInterfaceIPv6LinkLocalAddress_Type()
)
standbyEthernetInterfaceIPv6LinkLocalAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyEthernetInterfaceIPv6LinkLocalAddress.setStatus("mandatory")
_StandbyEthernetInterfaceIPv6StaticIPConfig_ObjectIdentity = ObjectIdentity
standbyEthernetInterfaceIPv6StaticIPConfig = _StandbyEthernetInterfaceIPv6StaticIPConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 2)
)


class _StandbyEthernetInterfaceIPv6StaticIPConfigEnabled_Type(Integer32):
    """Custom type standbyEthernetInterfaceIPv6StaticIPConfigEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_StandbyEthernetInterfaceIPv6StaticIPConfigEnabled_Type.__name__ = "Integer32"
_StandbyEthernetInterfaceIPv6StaticIPConfigEnabled_Object = MibScalar
standbyEthernetInterfaceIPv6StaticIPConfigEnabled = _StandbyEthernetInterfaceIPv6StaticIPConfigEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 2, 1),
    _StandbyEthernetInterfaceIPv6StaticIPConfigEnabled_Type()
)
standbyEthernetInterfaceIPv6StaticIPConfigEnabled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyEthernetInterfaceIPv6StaticIPConfigEnabled.setStatus("mandatory")
_StandbyEthernetInterfaceIPv6StaticIPAddress_Type = InetAddressIPv6
_StandbyEthernetInterfaceIPv6StaticIPAddress_Object = MibScalar
standbyEthernetInterfaceIPv6StaticIPAddress = _StandbyEthernetInterfaceIPv6StaticIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 2, 2),
    _StandbyEthernetInterfaceIPv6StaticIPAddress_Type()
)
standbyEthernetInterfaceIPv6StaticIPAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    standbyEthernetInterfaceIPv6StaticIPAddress.setStatus("mandatory")


class _StandbyEthernetInterfaceIPv6StaticIPAddressPrefixLen_Type(Integer32):
    """Custom type standbyEthernetInterfaceIPv6StaticIPAddressPrefixLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_StandbyEthernetInterfaceIPv6StaticIPAddressPrefixLen_Type.__name__ = "Integer32"
_StandbyEthernetInterfaceIPv6StaticIPAddressPrefixLen_Object = MibScalar
standbyEthernetInterfaceIPv6StaticIPAddressPrefixLen = _StandbyEthernetInterfaceIPv6StaticIPAddressPrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 2, 3),
    _StandbyEthernetInterfaceIPv6StaticIPAddressPrefixLen_Type()
)
standbyEthernetInterfaceIPv6StaticIPAddressPrefixLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyEthernetInterfaceIPv6StaticIPAddressPrefixLen.setStatus("mandatory")
_StandbyEthernetInterfaceIPv6StaticIPDefaultRoute_Type = InetAddressIPv6
_StandbyEthernetInterfaceIPv6StaticIPDefaultRoute_Object = MibScalar
standbyEthernetInterfaceIPv6StaticIPDefaultRoute = _StandbyEthernetInterfaceIPv6StaticIPDefaultRoute_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 2, 4),
    _StandbyEthernetInterfaceIPv6StaticIPDefaultRoute_Type()
)
standbyEthernetInterfaceIPv6StaticIPDefaultRoute.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyEthernetInterfaceIPv6StaticIPDefaultRoute.setStatus("mandatory")
_StandbyEthernetInterfaceDHCPv6Config_ObjectIdentity = ObjectIdentity
standbyEthernetInterfaceDHCPv6Config = _StandbyEthernetInterfaceDHCPv6Config_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 3)
)


class _StandbyEthernetInterfaceDHCPv6Enabled_Type(Integer32):
    """Custom type standbyEthernetInterfaceDHCPv6Enabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_StandbyEthernetInterfaceDHCPv6Enabled_Type.__name__ = "Integer32"
_StandbyEthernetInterfaceDHCPv6Enabled_Object = MibScalar
standbyEthernetInterfaceDHCPv6Enabled = _StandbyEthernetInterfaceDHCPv6Enabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 3, 1),
    _StandbyEthernetInterfaceDHCPv6Enabled_Type()
)
standbyEthernetInterfaceDHCPv6Enabled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyEthernetInterfaceDHCPv6Enabled.setStatus("mandatory")
_StandbyEthernetInterfaceDHCPv6IPAddress_Type = InetAddressIPv6
_StandbyEthernetInterfaceDHCPv6IPAddress_Object = MibScalar
standbyEthernetInterfaceDHCPv6IPAddress = _StandbyEthernetInterfaceDHCPv6IPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 3, 2),
    _StandbyEthernetInterfaceDHCPv6IPAddress_Type()
)
standbyEthernetInterfaceDHCPv6IPAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyEthernetInterfaceDHCPv6IPAddress.setStatus("mandatory")


class _StandbyEthernetInterfaceDHCPv6DomainName_Type(OctetString):
    """Custom type standbyEthernetInterfaceDHCPv6DomainName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_StandbyEthernetInterfaceDHCPv6DomainName_Type.__name__ = "OctetString"
_StandbyEthernetInterfaceDHCPv6DomainName_Object = MibScalar
standbyEthernetInterfaceDHCPv6DomainName = _StandbyEthernetInterfaceDHCPv6DomainName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 3, 4),
    _StandbyEthernetInterfaceDHCPv6DomainName_Type()
)
standbyEthernetInterfaceDHCPv6DomainName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyEthernetInterfaceDHCPv6DomainName.setStatus("mandatory")
_StandbyEthernetInterfaceStatelessAutoConfigAddressesTable_Object = MibTable
standbyEthernetInterfaceStatelessAutoConfigAddressesTable = _StandbyEthernetInterfaceStatelessAutoConfigAddressesTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 4)
)
if mibBuilder.loadTexts:
    standbyEthernetInterfaceStatelessAutoConfigAddressesTable.setStatus("mandatory")
_StandbyEthernetInterfaceStatelessAutoConfigAddressesEntry_Object = MibTableRow
standbyEthernetInterfaceStatelessAutoConfigAddressesEntry = _StandbyEthernetInterfaceStatelessAutoConfigAddressesEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 4, 1)
)
standbyEthernetInterfaceStatelessAutoConfigAddressesEntry.setIndexNames(
    (0, "BLADE-MIB", "standbyEthernetInterfaceStatelessAutoConfigAddressesIndex"),
)
if mibBuilder.loadTexts:
    standbyEthernetInterfaceStatelessAutoConfigAddressesEntry.setStatus("mandatory")
_StandbyEthernetInterfaceStatelessAutoConfigAddressesIndex_Type = Integer32
_StandbyEthernetInterfaceStatelessAutoConfigAddressesIndex_Object = MibTableColumn
standbyEthernetInterfaceStatelessAutoConfigAddressesIndex = _StandbyEthernetInterfaceStatelessAutoConfigAddressesIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 4, 1, 1),
    _StandbyEthernetInterfaceStatelessAutoConfigAddressesIndex_Type()
)
standbyEthernetInterfaceStatelessAutoConfigAddressesIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyEthernetInterfaceStatelessAutoConfigAddressesIndex.setStatus("mandatory")
_StandbyEthernetInterfaceStatelessAutoConfigAddresses_Type = InetAddressIPv6
_StandbyEthernetInterfaceStatelessAutoConfigAddresses_Object = MibTableColumn
standbyEthernetInterfaceStatelessAutoConfigAddresses = _StandbyEthernetInterfaceStatelessAutoConfigAddresses_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 4, 1, 2),
    _StandbyEthernetInterfaceStatelessAutoConfigAddresses_Type()
)
standbyEthernetInterfaceStatelessAutoConfigAddresses.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyEthernetInterfaceStatelessAutoConfigAddresses.setStatus("mandatory")


class _StandbyEthernetInterfaceStatelessAutoConfigAddressesPrefixLen_Type(Integer32):
    """Custom type standbyEthernetInterfaceStatelessAutoConfigAddressesPrefixLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_StandbyEthernetInterfaceStatelessAutoConfigAddressesPrefixLen_Type.__name__ = "Integer32"
_StandbyEthernetInterfaceStatelessAutoConfigAddressesPrefixLen_Object = MibTableColumn
standbyEthernetInterfaceStatelessAutoConfigAddressesPrefixLen = _StandbyEthernetInterfaceStatelessAutoConfigAddressesPrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 4, 1, 3),
    _StandbyEthernetInterfaceStatelessAutoConfigAddressesPrefixLen_Type()
)
standbyEthernetInterfaceStatelessAutoConfigAddressesPrefixLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyEthernetInterfaceStatelessAutoConfigAddressesPrefixLen.setStatus("mandatory")


class _DdnsStatus_Type(Integer32):
    """Custom type ddnsStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_DdnsStatus_Type.__name__ = "Integer32"
_DdnsStatus_Object = MibScalar
ddnsStatus = _DdnsStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 10),
    _DdnsStatus_Type()
)
ddnsStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ddnsStatus.setStatus("mandatory")


class _HostName_Type(OctetString):
    """Custom type hostName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_HostName_Type.__name__ = "OctetString"
_HostName_Object = MibScalar
hostName = _HostName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 11),
    _HostName_Type()
)
hostName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    hostName.setStatus("mandatory")


class _StandbyHostName_Type(OctetString):
    """Custom type standbyHostName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_StandbyHostName_Type.__name__ = "OctetString"
_StandbyHostName_Object = MibScalar
standbyHostName = _StandbyHostName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 12),
    _StandbyHostName_Type()
)
standbyHostName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    standbyHostName.setStatus("mandatory")
_DomainName_Type = OctetString
_DomainName_Object = MibScalar
domainName = _DomainName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 13),
    _DomainName_Type()
)
domainName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    domainName.setStatus("mandatory")
_StandbyDomainName_Type = OctetString
_StandbyDomainName_Object = MibScalar
standbyDomainName = _StandbyDomainName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 14),
    _StandbyDomainName_Type()
)
standbyDomainName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    standbyDomainName.setStatus("mandatory")
_VlanConfigure_ObjectIdentity = ObjectIdentity
vlanConfigure = _VlanConfigure_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20)
)


class _VlanGlobalState_Type(Integer32):
    """Custom type vlanGlobalState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_VlanGlobalState_Type.__name__ = "Integer32"
_VlanGlobalState_Object = MibScalar
vlanGlobalState = _VlanGlobalState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 1),
    _VlanGlobalState_Type()
)
vlanGlobalState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanGlobalState.setStatus("mandatory")


class _VlanCommitTimeout_Type(Integer32):
    """Custom type vlanCommitTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_VlanCommitTimeout_Type.__name__ = "Integer32"
_VlanCommitTimeout_Object = MibScalar
vlanCommitTimeout = _VlanCommitTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 2),
    _VlanCommitTimeout_Type()
)
vlanCommitTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanCommitTimeout.setStatus("mandatory")


class _VlanCommitState_Type(Integer32):
    """Custom type vlanCommitState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noChangesPending", 1),
          ("commitNeeded", 2),
          ("executeCommit", 3))
    )


_VlanCommitState_Type.__name__ = "Integer32"
_VlanCommitState_Object = MibScalar
vlanCommitState = _VlanCommitState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 3),
    _VlanCommitState_Type()
)
vlanCommitState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanCommitState.setStatus("mandatory")
_VlanTable_Object = MibTable
vlanTable = _VlanTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20)
)
if mibBuilder.loadTexts:
    vlanTable.setStatus("mandatory")
_VlanEntry_Object = MibTableRow
vlanEntry = _VlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1)
)
vlanEntry.setIndexNames(
    (0, "BLADE-MIB", "vlanEntryIndex"),
)
if mibBuilder.loadTexts:
    vlanEntry.setStatus("mandatory")


class _VlanEntryIndex_Type(Integer32):
    """Custom type vlanEntryIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_VlanEntryIndex_Type.__name__ = "Integer32"
_VlanEntryIndex_Object = MibTableColumn
vlanEntryIndex = _VlanEntryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 1),
    _VlanEntryIndex_Type()
)
vlanEntryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanEntryIndex.setStatus("mandatory")


class _VlanEntryVlanId_Type(Integer32):
    """Custom type vlanEntryVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_VlanEntryVlanId_Type.__name__ = "Integer32"
_VlanEntryVlanId_Object = MibTableColumn
vlanEntryVlanId = _VlanEntryVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 2),
    _VlanEntryVlanId_Type()
)
vlanEntryVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanEntryVlanId.setStatus("mandatory")


class _VlanEntryName_Type(OctetString):
    """Custom type vlanEntryName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 31),
    )


_VlanEntryName_Type.__name__ = "OctetString"
_VlanEntryName_Object = MibTableColumn
vlanEntryName = _VlanEntryName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 3),
    _VlanEntryName_Type()
)
vlanEntryName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanEntryName.setStatus("mandatory")
_VlanEntryStatus_Type = EntryStatus
_VlanEntryStatus_Object = MibTableColumn
vlanEntryStatus = _VlanEntryStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 4),
    _VlanEntryStatus_Type()
)
vlanEntryStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanEntryStatus.setStatus("mandatory")


class _VlanEntryState_Type(Integer32):
    """Custom type vlanEntryState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1),
          ("restart", 2))
    )


_VlanEntryState_Type.__name__ = "Integer32"
_VlanEntryState_Object = MibTableColumn
vlanEntryState = _VlanEntryState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 5),
    _VlanEntryState_Type()
)
vlanEntryState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanEntryState.setStatus("mandatory")


class _VlanEntrySOLAccess_Type(Integer32):
    """Custom type vlanEntrySOLAccess based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_VlanEntrySOLAccess_Type.__name__ = "Integer32"
_VlanEntrySOLAccess_Object = MibTableColumn
vlanEntrySOLAccess = _VlanEntrySOLAccess_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 6),
    _VlanEntrySOLAccess_Type()
)
vlanEntrySOLAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanEntrySOLAccess.setStatus("mandatory")


class _VlanEntrycKVMAccess_Type(Integer32):
    """Custom type vlanEntrycKVMAccess based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_VlanEntrycKVMAccess_Type.__name__ = "Integer32"
_VlanEntrycKVMAccess_Object = MibTableColumn
vlanEntrycKVMAccess = _VlanEntrycKVMAccess_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 7),
    _VlanEntrycKVMAccess_Type()
)
vlanEntrycKVMAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanEntrycKVMAccess.setStatus("mandatory")


class _VlanEntryTagging_Type(Integer32):
    """Custom type vlanEntryTagging based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_VlanEntryTagging_Type.__name__ = "Integer32"
_VlanEntryTagging_Object = MibTableColumn
vlanEntryTagging = _VlanEntryTagging_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 8),
    _VlanEntryTagging_Type()
)
vlanEntryTagging.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanEntryTagging.setStatus("mandatory")


class _VlanEntryIOModuleAccess_Type(Integer32):
    """Custom type vlanEntryIOModuleAccess based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_VlanEntryIOModuleAccess_Type.__name__ = "Integer32"
_VlanEntryIOModuleAccess_Object = MibTableColumn
vlanEntryIOModuleAccess = _VlanEntryIOModuleAccess_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 9),
    _VlanEntryIOModuleAccess_Type()
)
vlanEntryIOModuleAccess.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanEntryIOModuleAccess.setStatus("mandatory")


class _VlanEntryVlanDefault_Type(Integer32):
    """Custom type vlanEntryVlanDefault based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_VlanEntryVlanDefault_Type.__name__ = "Integer32"
_VlanEntryVlanDefault_Object = MibTableColumn
vlanEntryVlanDefault = _VlanEntryVlanDefault_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 10),
    _VlanEntryVlanDefault_Type()
)
vlanEntryVlanDefault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanEntryVlanDefault.setStatus("mandatory")
_VlanEntryIPv4StaticAddress_Type = IpAddress
_VlanEntryIPv4StaticAddress_Object = MibTableColumn
vlanEntryIPv4StaticAddress = _VlanEntryIPv4StaticAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 31),
    _VlanEntryIPv4StaticAddress_Type()
)
vlanEntryIPv4StaticAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanEntryIPv4StaticAddress.setStatus("mandatory")
_VlanEntryIPv4StaticGateway_Type = IpAddress
_VlanEntryIPv4StaticGateway_Object = MibTableColumn
vlanEntryIPv4StaticGateway = _VlanEntryIPv4StaticGateway_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 32),
    _VlanEntryIPv4StaticGateway_Type()
)
vlanEntryIPv4StaticGateway.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanEntryIPv4StaticGateway.setStatus("mandatory")
_VlanEntryIPv4StaticMask_Type = IpAddress
_VlanEntryIPv4StaticMask_Object = MibTableColumn
vlanEntryIPv4StaticMask = _VlanEntryIPv4StaticMask_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 33),
    _VlanEntryIPv4StaticMask_Type()
)
vlanEntryIPv4StaticMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanEntryIPv4StaticMask.setStatus("mandatory")
_VlanEntryIPv4SubnetRoute1_Type = IpAddress
_VlanEntryIPv4SubnetRoute1_Object = MibTableColumn
vlanEntryIPv4SubnetRoute1 = _VlanEntryIPv4SubnetRoute1_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 51),
    _VlanEntryIPv4SubnetRoute1_Type()
)
vlanEntryIPv4SubnetRoute1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanEntryIPv4SubnetRoute1.setStatus("mandatory")
_VlanEntryIPv4SubnetRouteMask1_Type = IpAddress
_VlanEntryIPv4SubnetRouteMask1_Object = MibTableColumn
vlanEntryIPv4SubnetRouteMask1 = _VlanEntryIPv4SubnetRouteMask1_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 52),
    _VlanEntryIPv4SubnetRouteMask1_Type()
)
vlanEntryIPv4SubnetRouteMask1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanEntryIPv4SubnetRouteMask1.setStatus("mandatory")
_VlanEntryIPv4SubnetRoute2_Type = IpAddress
_VlanEntryIPv4SubnetRoute2_Object = MibTableColumn
vlanEntryIPv4SubnetRoute2 = _VlanEntryIPv4SubnetRoute2_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 53),
    _VlanEntryIPv4SubnetRoute2_Type()
)
vlanEntryIPv4SubnetRoute2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanEntryIPv4SubnetRoute2.setStatus("mandatory")
_VlanEntryIPv4SubnetRouteMask2_Type = IpAddress
_VlanEntryIPv4SubnetRouteMask2_Object = MibTableColumn
vlanEntryIPv4SubnetRouteMask2 = _VlanEntryIPv4SubnetRouteMask2_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 54),
    _VlanEntryIPv4SubnetRouteMask2_Type()
)
vlanEntryIPv4SubnetRouteMask2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanEntryIPv4SubnetRouteMask2.setStatus("mandatory")
_VlanEntryIPv4SubnetRoute3_Type = IpAddress
_VlanEntryIPv4SubnetRoute3_Object = MibTableColumn
vlanEntryIPv4SubnetRoute3 = _VlanEntryIPv4SubnetRoute3_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 55),
    _VlanEntryIPv4SubnetRoute3_Type()
)
vlanEntryIPv4SubnetRoute3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanEntryIPv4SubnetRoute3.setStatus("mandatory")
_VlanEntryIPv4SubnetRouteMask3_Type = IpAddress
_VlanEntryIPv4SubnetRouteMask3_Object = MibTableColumn
vlanEntryIPv4SubnetRouteMask3 = _VlanEntryIPv4SubnetRouteMask3_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 56),
    _VlanEntryIPv4SubnetRouteMask3_Type()
)
vlanEntryIPv4SubnetRouteMask3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanEntryIPv4SubnetRouteMask3.setStatus("mandatory")
_TcpProtocols_ObjectIdentity = ObjectIdentity
tcpProtocols = _TcpProtocols_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3)
)
_SnmpAgentConfig_ObjectIdentity = ObjectIdentity
snmpAgentConfig = _SnmpAgentConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1)
)


class _SnmpSystemContact_Type(OctetString):
    """Custom type snmpSystemContact based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 48),
    )


_SnmpSystemContact_Type.__name__ = "OctetString"
_SnmpSystemContact_Object = MibScalar
snmpSystemContact = _SnmpSystemContact_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 1),
    _SnmpSystemContact_Type()
)
snmpSystemContact.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpSystemContact.setStatus("mandatory")


class _SnmpSystemLocation_Type(OctetString):
    """Custom type snmpSystemLocation based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 48),
    )


_SnmpSystemLocation_Type.__name__ = "OctetString"
_SnmpSystemLocation_Object = MibScalar
snmpSystemLocation = _SnmpSystemLocation_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 2),
    _SnmpSystemLocation_Type()
)
snmpSystemLocation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpSystemLocation.setStatus("mandatory")


class _SnmpSystemAgentTrapsDisable_Type(Integer32):
    """Custom type snmpSystemAgentTrapsDisable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("trapsEnabled", 0),
          ("trapsDisabled", 1))
    )


_SnmpSystemAgentTrapsDisable_Type.__name__ = "Integer32"
_SnmpSystemAgentTrapsDisable_Object = MibScalar
snmpSystemAgentTrapsDisable = _SnmpSystemAgentTrapsDisable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 3),
    _SnmpSystemAgentTrapsDisable_Type()
)
snmpSystemAgentTrapsDisable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpSystemAgentTrapsDisable.setStatus("mandatory")
_SnmpAgentCommunityConfig_ObjectIdentity = ObjectIdentity
snmpAgentCommunityConfig = _SnmpAgentCommunityConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4)
)
_SnmpCommunityTable_Object = MibTable
snmpCommunityTable = _SnmpCommunityTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1)
)
if mibBuilder.loadTexts:
    snmpCommunityTable.setStatus("mandatory")
_SnmpCommunityEntry_Object = MibTableRow
snmpCommunityEntry = _SnmpCommunityEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1)
)
snmpCommunityEntry.setIndexNames(
    (0, "BLADE-MIB", "snmpCommunityEntryIndex"),
)
if mibBuilder.loadTexts:
    snmpCommunityEntry.setStatus("mandatory")


class _SnmpCommunityEntryIndex_Type(Integer32):
    """Custom type snmpCommunityEntryIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_SnmpCommunityEntryIndex_Type.__name__ = "Integer32"
_SnmpCommunityEntryIndex_Object = MibTableColumn
snmpCommunityEntryIndex = _SnmpCommunityEntryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 1),
    _SnmpCommunityEntryIndex_Type()
)
snmpCommunityEntryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    snmpCommunityEntryIndex.setStatus("mandatory")


class _SnmpCommunityEntryCommunityName_Type(OctetString):
    """Custom type snmpCommunityEntryCommunityName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 15),
    )


_SnmpCommunityEntryCommunityName_Type.__name__ = "OctetString"
_SnmpCommunityEntryCommunityName_Object = MibTableColumn
snmpCommunityEntryCommunityName = _SnmpCommunityEntryCommunityName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 2),
    _SnmpCommunityEntryCommunityName_Type()
)
snmpCommunityEntryCommunityName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpCommunityEntryCommunityName.setStatus("mandatory")


class _SnmpCommunityEntryCommunityIpAddress1_Type(OctetString):
    """Custom type snmpCommunityEntryCommunityIpAddress1 based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 63),
    )


_SnmpCommunityEntryCommunityIpAddress1_Type.__name__ = "OctetString"
_SnmpCommunityEntryCommunityIpAddress1_Object = MibTableColumn
snmpCommunityEntryCommunityIpAddress1 = _SnmpCommunityEntryCommunityIpAddress1_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 3),
    _SnmpCommunityEntryCommunityIpAddress1_Type()
)
snmpCommunityEntryCommunityIpAddress1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpCommunityEntryCommunityIpAddress1.setStatus("mandatory")


class _SnmpCommunityEntryCommunityIpAddress2_Type(OctetString):
    """Custom type snmpCommunityEntryCommunityIpAddress2 based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 63),
    )


_SnmpCommunityEntryCommunityIpAddress2_Type.__name__ = "OctetString"
_SnmpCommunityEntryCommunityIpAddress2_Object = MibTableColumn
snmpCommunityEntryCommunityIpAddress2 = _SnmpCommunityEntryCommunityIpAddress2_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 4),
    _SnmpCommunityEntryCommunityIpAddress2_Type()
)
snmpCommunityEntryCommunityIpAddress2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpCommunityEntryCommunityIpAddress2.setStatus("mandatory")


class _SnmpCommunityEntryCommunityIpAddress3_Type(OctetString):
    """Custom type snmpCommunityEntryCommunityIpAddress3 based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 63),
    )


_SnmpCommunityEntryCommunityIpAddress3_Type.__name__ = "OctetString"
_SnmpCommunityEntryCommunityIpAddress3_Object = MibTableColumn
snmpCommunityEntryCommunityIpAddress3 = _SnmpCommunityEntryCommunityIpAddress3_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 5),
    _SnmpCommunityEntryCommunityIpAddress3_Type()
)
snmpCommunityEntryCommunityIpAddress3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpCommunityEntryCommunityIpAddress3.setStatus("mandatory")


class _SnmpCommunityEntryCommunityViewType_Type(Integer32):
    """Custom type snmpCommunityEntryCommunityViewType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("read-Traps", 1),
          ("write-Read-Traps", 2),
          ("traps-Only", 3))
    )


_SnmpCommunityEntryCommunityViewType_Type.__name__ = "Integer32"
_SnmpCommunityEntryCommunityViewType_Object = MibTableColumn
snmpCommunityEntryCommunityViewType = _SnmpCommunityEntryCommunityViewType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 6),
    _SnmpCommunityEntryCommunityViewType_Type()
)
snmpCommunityEntryCommunityViewType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpCommunityEntryCommunityViewType.setStatus("mandatory")


class _SnmpCommunityEntryCommunityIpAddress4_Type(OctetString):
    """Custom type snmpCommunityEntryCommunityIpAddress4 based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 63),
    )


_SnmpCommunityEntryCommunityIpAddress4_Type.__name__ = "OctetString"
_SnmpCommunityEntryCommunityIpAddress4_Object = MibTableColumn
snmpCommunityEntryCommunityIpAddress4 = _SnmpCommunityEntryCommunityIpAddress4_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 7),
    _SnmpCommunityEntryCommunityIpAddress4_Type()
)
snmpCommunityEntryCommunityIpAddress4.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpCommunityEntryCommunityIpAddress4.setStatus("mandatory")


class _SnmpCommunityEntryCommunityIpAddress5_Type(OctetString):
    """Custom type snmpCommunityEntryCommunityIpAddress5 based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 63),
    )


_SnmpCommunityEntryCommunityIpAddress5_Type.__name__ = "OctetString"
_SnmpCommunityEntryCommunityIpAddress5_Object = MibTableColumn
snmpCommunityEntryCommunityIpAddress5 = _SnmpCommunityEntryCommunityIpAddress5_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 8),
    _SnmpCommunityEntryCommunityIpAddress5_Type()
)
snmpCommunityEntryCommunityIpAddress5.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpCommunityEntryCommunityIpAddress5.setStatus("mandatory")


class _SnmpCommunityEntryCommunityIpAddress6_Type(OctetString):
    """Custom type snmpCommunityEntryCommunityIpAddress6 based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 63),
    )


_SnmpCommunityEntryCommunityIpAddress6_Type.__name__ = "OctetString"
_SnmpCommunityEntryCommunityIpAddress6_Object = MibTableColumn
snmpCommunityEntryCommunityIpAddress6 = _SnmpCommunityEntryCommunityIpAddress6_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 9),
    _SnmpCommunityEntryCommunityIpAddress6_Type()
)
snmpCommunityEntryCommunityIpAddress6.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpCommunityEntryCommunityIpAddress6.setStatus("mandatory")


class _SnmpCommunityEntryCommunityIpAddress7_Type(OctetString):
    """Custom type snmpCommunityEntryCommunityIpAddress7 based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 63),
    )


_SnmpCommunityEntryCommunityIpAddress7_Type.__name__ = "OctetString"
_SnmpCommunityEntryCommunityIpAddress7_Object = MibTableColumn
snmpCommunityEntryCommunityIpAddress7 = _SnmpCommunityEntryCommunityIpAddress7_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 10),
    _SnmpCommunityEntryCommunityIpAddress7_Type()
)
snmpCommunityEntryCommunityIpAddress7.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpCommunityEntryCommunityIpAddress7.setStatus("mandatory")


class _SnmpCommunityEntryCommunityIpAddress8_Type(OctetString):
    """Custom type snmpCommunityEntryCommunityIpAddress8 based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 63),
    )


_SnmpCommunityEntryCommunityIpAddress8_Type.__name__ = "OctetString"
_SnmpCommunityEntryCommunityIpAddress8_Object = MibTableColumn
snmpCommunityEntryCommunityIpAddress8 = _SnmpCommunityEntryCommunityIpAddress8_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 11),
    _SnmpCommunityEntryCommunityIpAddress8_Type()
)
snmpCommunityEntryCommunityIpAddress8.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpCommunityEntryCommunityIpAddress8.setStatus("mandatory")


class _SnmpCommunityEntryCommunityIpAddress9_Type(OctetString):
    """Custom type snmpCommunityEntryCommunityIpAddress9 based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 63),
    )


_SnmpCommunityEntryCommunityIpAddress9_Type.__name__ = "OctetString"
_SnmpCommunityEntryCommunityIpAddress9_Object = MibTableColumn
snmpCommunityEntryCommunityIpAddress9 = _SnmpCommunityEntryCommunityIpAddress9_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 12),
    _SnmpCommunityEntryCommunityIpAddress9_Type()
)
snmpCommunityEntryCommunityIpAddress9.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpCommunityEntryCommunityIpAddress9.setStatus("mandatory")


class _SnmpCommunityEntryCommunityIpAddress10_Type(OctetString):
    """Custom type snmpCommunityEntryCommunityIpAddress10 based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 63),
    )


_SnmpCommunityEntryCommunityIpAddress10_Type.__name__ = "OctetString"
_SnmpCommunityEntryCommunityIpAddress10_Object = MibTableColumn
snmpCommunityEntryCommunityIpAddress10 = _SnmpCommunityEntryCommunityIpAddress10_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 13),
    _SnmpCommunityEntryCommunityIpAddress10_Type()
)
snmpCommunityEntryCommunityIpAddress10.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpCommunityEntryCommunityIpAddress10.setStatus("mandatory")


class _SnmpCommunityEntryCommunityIpAddress11_Type(OctetString):
    """Custom type snmpCommunityEntryCommunityIpAddress11 based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 63),
    )


_SnmpCommunityEntryCommunityIpAddress11_Type.__name__ = "OctetString"
_SnmpCommunityEntryCommunityIpAddress11_Object = MibTableColumn
snmpCommunityEntryCommunityIpAddress11 = _SnmpCommunityEntryCommunityIpAddress11_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 14),
    _SnmpCommunityEntryCommunityIpAddress11_Type()
)
snmpCommunityEntryCommunityIpAddress11.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpCommunityEntryCommunityIpAddress11.setStatus("mandatory")


class _SnmpCommunityEntryCommunityIpAddress12_Type(OctetString):
    """Custom type snmpCommunityEntryCommunityIpAddress12 based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 63),
    )


_SnmpCommunityEntryCommunityIpAddress12_Type.__name__ = "OctetString"
_SnmpCommunityEntryCommunityIpAddress12_Object = MibTableColumn
snmpCommunityEntryCommunityIpAddress12 = _SnmpCommunityEntryCommunityIpAddress12_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 15),
    _SnmpCommunityEntryCommunityIpAddress12_Type()
)
snmpCommunityEntryCommunityIpAddress12.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpCommunityEntryCommunityIpAddress12.setStatus("mandatory")


class _Snmpv1SystemAgentEnable_Type(Integer32):
    """Custom type snmpv1SystemAgentEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_Snmpv1SystemAgentEnable_Type.__name__ = "Integer32"
_Snmpv1SystemAgentEnable_Object = MibScalar
snmpv1SystemAgentEnable = _Snmpv1SystemAgentEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 5),
    _Snmpv1SystemAgentEnable_Type()
)
snmpv1SystemAgentEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpv1SystemAgentEnable.setStatus("mandatory")


class _Snmpv3SystemAgentEnable_Type(Integer32):
    """Custom type snmpv3SystemAgentEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_Snmpv3SystemAgentEnable_Type.__name__ = "Integer32"
_Snmpv3SystemAgentEnable_Object = MibScalar
snmpv3SystemAgentEnable = _Snmpv3SystemAgentEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 6),
    _Snmpv3SystemAgentEnable_Type()
)
snmpv3SystemAgentEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpv3SystemAgentEnable.setStatus("mandatory")
_SnmpAgentUserProfileConfig_ObjectIdentity = ObjectIdentity
snmpAgentUserProfileConfig = _SnmpAgentUserProfileConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9)
)
_SnmpUserProfileTable_Object = MibTable
snmpUserProfileTable = _SnmpUserProfileTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1)
)
if mibBuilder.loadTexts:
    snmpUserProfileTable.setStatus("mandatory")
_SnmpUserProfileEntry_Object = MibTableRow
snmpUserProfileEntry = _SnmpUserProfileEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1)
)
snmpUserProfileEntry.setIndexNames(
    (0, "BLADE-MIB", "snmpUserProfileEntryIndex"),
)
if mibBuilder.loadTexts:
    snmpUserProfileEntry.setStatus("mandatory")


class _SnmpUserProfileEntryIndex_Type(Integer32):
    """Custom type snmpUserProfileEntryIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_SnmpUserProfileEntryIndex_Type.__name__ = "Integer32"
_SnmpUserProfileEntryIndex_Object = MibTableColumn
snmpUserProfileEntryIndex = _SnmpUserProfileEntryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1, 1),
    _SnmpUserProfileEntryIndex_Type()
)
snmpUserProfileEntryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    snmpUserProfileEntryIndex.setStatus("mandatory")


class _SnmpUserProfileEntryContextName_Type(OctetString):
    """Custom type snmpUserProfileEntryContextName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 31),
    )


_SnmpUserProfileEntryContextName_Type.__name__ = "OctetString"
_SnmpUserProfileEntryContextName_Object = MibTableColumn
snmpUserProfileEntryContextName = _SnmpUserProfileEntryContextName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1, 3),
    _SnmpUserProfileEntryContextName_Type()
)
snmpUserProfileEntryContextName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpUserProfileEntryContextName.setStatus("mandatory")


class _SnmpUserProfileEntryAuthProt_Type(Integer32):
    """Custom type snmpUserProfileEntryAuthProt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("md5", 2),
          ("sha", 3))
    )


_SnmpUserProfileEntryAuthProt_Type.__name__ = "Integer32"
_SnmpUserProfileEntryAuthProt_Object = MibTableColumn
snmpUserProfileEntryAuthProt = _SnmpUserProfileEntryAuthProt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1, 4),
    _SnmpUserProfileEntryAuthProt_Type()
)
snmpUserProfileEntryAuthProt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpUserProfileEntryAuthProt.setStatus("mandatory")


class _SnmpUserProfileEntryPrivProt_Type(Integer32):
    """Custom type snmpUserProfileEntryPrivProt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("des", 2),
          ("aes", 4))
    )


_SnmpUserProfileEntryPrivProt_Type.__name__ = "Integer32"
_SnmpUserProfileEntryPrivProt_Object = MibTableColumn
snmpUserProfileEntryPrivProt = _SnmpUserProfileEntryPrivProt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1, 6),
    _SnmpUserProfileEntryPrivProt_Type()
)
snmpUserProfileEntryPrivProt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpUserProfileEntryPrivProt.setStatus("mandatory")


class _SnmpUserProfileEntryPrivPassword_Type(OctetString):
    """Custom type snmpUserProfileEntryPrivPassword based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 31),
    )


_SnmpUserProfileEntryPrivPassword_Type.__name__ = "OctetString"
_SnmpUserProfileEntryPrivPassword_Object = MibTableColumn
snmpUserProfileEntryPrivPassword = _SnmpUserProfileEntryPrivPassword_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1, 7),
    _SnmpUserProfileEntryPrivPassword_Type()
)
snmpUserProfileEntryPrivPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpUserProfileEntryPrivPassword.setStatus("mandatory")


class _SnmpUserProfileEntryViewType_Type(Integer32):
    """Custom type snmpUserProfileEntryViewType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("read-Traps", 1),
          ("read-Write-Traps", 2),
          ("traps-Only", 3))
    )


_SnmpUserProfileEntryViewType_Type.__name__ = "Integer32"
_SnmpUserProfileEntryViewType_Object = MibTableColumn
snmpUserProfileEntryViewType = _SnmpUserProfileEntryViewType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1, 8),
    _SnmpUserProfileEntryViewType_Type()
)
snmpUserProfileEntryViewType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpUserProfileEntryViewType.setStatus("mandatory")


class _SnmpUserProfileEntryIpAddress_Type(OctetString):
    """Custom type snmpUserProfileEntryIpAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 63),
    )


_SnmpUserProfileEntryIpAddress_Type.__name__ = "OctetString"
_SnmpUserProfileEntryIpAddress_Object = MibTableColumn
snmpUserProfileEntryIpAddress = _SnmpUserProfileEntryIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1, 9),
    _SnmpUserProfileEntryIpAddress_Type()
)
snmpUserProfileEntryIpAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpUserProfileEntryIpAddress.setStatus("mandatory")
_DnsConfig_ObjectIdentity = ObjectIdentity
dnsConfig = _DnsConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 2)
)


class _DnsEnabled_Type(Integer32):
    """Custom type dnsEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("dnsDisabled", 0),
          ("dnsEnabled", 1))
    )


_DnsEnabled_Type.__name__ = "Integer32"
_DnsEnabled_Object = MibScalar
dnsEnabled = _DnsEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 2, 1),
    _DnsEnabled_Type()
)
dnsEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dnsEnabled.setStatus("mandatory")
_DnsServerIPAddress1_Type = IpAddress
_DnsServerIPAddress1_Object = MibScalar
dnsServerIPAddress1 = _DnsServerIPAddress1_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 2, 2),
    _DnsServerIPAddress1_Type()
)
dnsServerIPAddress1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dnsServerIPAddress1.setStatus("mandatory")
_DnsServerIPAddress2_Type = IpAddress
_DnsServerIPAddress2_Object = MibScalar
dnsServerIPAddress2 = _DnsServerIPAddress2_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 2, 3),
    _DnsServerIPAddress2_Type()
)
dnsServerIPAddress2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dnsServerIPAddress2.setStatus("mandatory")
_DnsServerIPAddress3_Type = IpAddress
_DnsServerIPAddress3_Object = MibScalar
dnsServerIPAddress3 = _DnsServerIPAddress3_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 2, 4),
    _DnsServerIPAddress3_Type()
)
dnsServerIPAddress3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dnsServerIPAddress3.setStatus("mandatory")
_DnsServerIPv6Address1_Type = InetAddressIPv6
_DnsServerIPv6Address1_Object = MibScalar
dnsServerIPv6Address1 = _DnsServerIPv6Address1_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 2, 12),
    _DnsServerIPv6Address1_Type()
)
dnsServerIPv6Address1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dnsServerIPv6Address1.setStatus("mandatory")
_DnsServerIPv6Address2_Type = InetAddressIPv6
_DnsServerIPv6Address2_Object = MibScalar
dnsServerIPv6Address2 = _DnsServerIPv6Address2_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 2, 13),
    _DnsServerIPv6Address2_Type()
)
dnsServerIPv6Address2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dnsServerIPv6Address2.setStatus("mandatory")
_DnsServerIPv6Address3_Type = InetAddressIPv6
_DnsServerIPv6Address3_Object = MibScalar
dnsServerIPv6Address3 = _DnsServerIPv6Address3_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 2, 14),
    _DnsServerIPv6Address3_Type()
)
dnsServerIPv6Address3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dnsServerIPv6Address3.setStatus("mandatory")


class _DnsPriority_Type(Integer32):
    """Custom type dnsPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ipv6", 1),
          ("ipv4", 2))
    )


_DnsPriority_Type.__name__ = "Integer32"
_DnsPriority_Object = MibScalar
dnsPriority = _DnsPriority_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 2, 20),
    _DnsPriority_Type()
)
dnsPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dnsPriority.setStatus("mandatory")
_SmtpConfig_ObjectIdentity = ObjectIdentity
smtpConfig = _SmtpConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 3)
)


class _SmtpServerNameOrIPAddress_Type(OctetString):
    """Custom type smtpServerNameOrIPAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_SmtpServerNameOrIPAddress_Type.__name__ = "OctetString"
_SmtpServerNameOrIPAddress_Object = MibScalar
smtpServerNameOrIPAddress = _SmtpServerNameOrIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 3, 1),
    _SmtpServerNameOrIPAddress_Type()
)
smtpServerNameOrIPAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smtpServerNameOrIPAddress.setStatus("mandatory")


class _AttachmentsToEmailAlerts_Type(Integer32):
    """Custom type attachmentsToEmailAlerts based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("noAttachments", 0),
          ("attachServiceInformation", 1))
    )


_AttachmentsToEmailAlerts_Type.__name__ = "Integer32"
_AttachmentsToEmailAlerts_Object = MibScalar
attachmentsToEmailAlerts = _AttachmentsToEmailAlerts_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 3, 2),
    _AttachmentsToEmailAlerts_Type()
)
attachmentsToEmailAlerts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    attachmentsToEmailAlerts.setStatus("mandatory")


class _SmtpEmailDomain_Type(OctetString):
    """Custom type smtpEmailDomain based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_SmtpEmailDomain_Type.__name__ = "OctetString"
_SmtpEmailDomain_Object = MibScalar
smtpEmailDomain = _SmtpEmailDomain_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 3, 3),
    _SmtpEmailDomain_Type()
)
smtpEmailDomain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smtpEmailDomain.setStatus("mandatory")
_TcpApplicationConfig_ObjectIdentity = ObjectIdentity
tcpApplicationConfig = _TcpApplicationConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4)
)
_TelnetInactivityTimeout_Type = Integer32
_TelnetInactivityTimeout_Object = MibScalar
telnetInactivityTimeout = _TelnetInactivityTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 1),
    _TelnetInactivityTimeout_Type()
)
telnetInactivityTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    telnetInactivityTimeout.setStatus("mandatory")
_CommandModeInactivityTimeout_Type = Integer32
_CommandModeInactivityTimeout_Object = MibScalar
commandModeInactivityTimeout = _CommandModeInactivityTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 2),
    _CommandModeInactivityTimeout_Type()
)
commandModeInactivityTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    commandModeInactivityTimeout.setStatus("mandatory")
_SecureCommandModeEnable_Type = Integer32
_SecureCommandModeEnable_Object = MibScalar
secureCommandModeEnable = _SecureCommandModeEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 3),
    _SecureCommandModeEnable_Type()
)
secureCommandModeEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    secureCommandModeEnable.setStatus("mandatory")
_CommandModeEnable_Type = Integer32
_CommandModeEnable_Object = MibScalar
commandModeEnable = _CommandModeEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 4),
    _CommandModeEnable_Type()
)
commandModeEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    commandModeEnable.setStatus("mandatory")


class _SlpAddrType_Type(Integer32):
    """Custom type slpAddrType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("multicast", 0),
          ("broadcast", 1))
    )


_SlpAddrType_Type.__name__ = "Integer32"
_SlpAddrType_Object = MibScalar
slpAddrType = _SlpAddrType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 5),
    _SlpAddrType_Type()
)
slpAddrType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slpAddrType.setStatus("mandatory")
_SlpMulticastAddr_Type = IpAddress
_SlpMulticastAddr_Object = MibScalar
slpMulticastAddr = _SlpMulticastAddr_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 6),
    _SlpMulticastAddr_Type()
)
slpMulticastAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slpMulticastAddr.setStatus("mandatory")


class _SlpEnable_Type(Integer32):
    """Custom type slpEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SlpEnable_Type.__name__ = "Integer32"
_SlpEnable_Object = MibScalar
slpEnable = _SlpEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 7),
    _SlpEnable_Type()
)
slpEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slpEnable.setStatus("mandatory")


class _TelnetEnable_Type(Integer32):
    """Custom type telnetEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_TelnetEnable_Type.__name__ = "Integer32"
_TelnetEnable_Object = MibScalar
telnetEnable = _TelnetEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 9),
    _TelnetEnable_Type()
)
telnetEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    telnetEnable.setStatus("mandatory")


class _SshEnable_Type(Integer32):
    """Custom type sshEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SshEnable_Type.__name__ = "Integer32"
_SshEnable_Object = MibScalar
sshEnable = _SshEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 10),
    _SshEnable_Type()
)
sshEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sshEnable.setStatus("mandatory")


class _SshVersion_Type(Integer32):
    """Custom type sshVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("allVersions", 0),
          ("version2Only", 1))
    )


_SshVersion_Type.__name__ = "Integer32"
_SshVersion_Object = MibScalar
sshVersion = _SshVersion_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 11),
    _SshVersion_Type()
)
sshVersion.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sshVersion.setStatus("mandatory")


class _SslServerEnable_Type(Integer32):
    """Custom type sslServerEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SslServerEnable_Type.__name__ = "Integer32"
_SslServerEnable_Object = MibScalar
sslServerEnable = _SslServerEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 15),
    _SslServerEnable_Type()
)
sslServerEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sslServerEnable.setStatus("mandatory")


class _SslClientEnable_Type(Integer32):
    """Custom type sslClientEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SslClientEnable_Type.__name__ = "Integer32"
_SslClientEnable_Object = MibScalar
sslClientEnable = _SslClientEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 16),
    _SslClientEnable_Type()
)
sslClientEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sslClientEnable.setStatus("mandatory")


class _FtpEnable_Type(Integer32):
    """Custom type ftpEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_FtpEnable_Type.__name__ = "Integer32"
_FtpEnable_Object = MibScalar
ftpEnable = _FtpEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 17),
    _FtpEnable_Type()
)
ftpEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ftpEnable.setStatus("mandatory")


class _TftpEnable_Type(Integer32):
    """Custom type tftpEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_TftpEnable_Type.__name__ = "Integer32"
_TftpEnable_Object = MibScalar
tftpEnable = _TftpEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 19),
    _TftpEnable_Type()
)
tftpEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tftpEnable.setStatus("mandatory")


class _SmashTelnetEnable_Type(Integer32):
    """Custom type smashTelnetEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SmashTelnetEnable_Type.__name__ = "Integer32"
_SmashTelnetEnable_Object = MibScalar
smashTelnetEnable = _SmashTelnetEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 20),
    _SmashTelnetEnable_Type()
)
smashTelnetEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smashTelnetEnable.setStatus("mandatory")


class _SmashSshEnable_Type(Integer32):
    """Custom type smashSshEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SmashSshEnable_Type.__name__ = "Integer32"
_SmashSshEnable_Object = MibScalar
smashSshEnable = _SmashSshEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 21),
    _SmashSshEnable_Type()
)
smashSshEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smashSshEnable.setStatus("mandatory")
_TftpCreateEmptyFile_Type = OctetString
_TftpCreateEmptyFile_Object = MibScalar
tftpCreateEmptyFile = _TftpCreateEmptyFile_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 22),
    _TftpCreateEmptyFile_Type()
)
tftpCreateEmptyFile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tftpCreateEmptyFile.setStatus("deprecated")
_FtpTimeout_Type = Integer32
_FtpTimeout_Object = MibScalar
ftpTimeout = _FtpTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 23),
    _FtpTimeout_Type()
)
ftpTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ftpTimeout.setStatus("mandatory")


class _RdEnable_Type(Integer32):
    """Custom type rdEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RdEnable_Type.__name__ = "Integer32"
_RdEnable_Object = MibScalar
rdEnable = _RdEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 24),
    _RdEnable_Type()
)
rdEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rdEnable.setStatus("mandatory")


class _RdocEnable_Type(Integer32):
    """Custom type rdocEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RdocEnable_Type.__name__ = "Integer32"
_RdocEnable_Object = MibScalar
rdocEnable = _RdocEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 25),
    _RdocEnable_Type()
)
rdocEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rdocEnable.setStatus("mandatory")


class _KvmEnable_Type(Integer32):
    """Custom type kvmEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_KvmEnable_Type.__name__ = "Integer32"
_KvmEnable_Object = MibScalar
kvmEnable = _KvmEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 26),
    _KvmEnable_Type()
)
kvmEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    kvmEnable.setStatus("mandatory")
_MmSshServerConfig_ObjectIdentity = ObjectIdentity
mmSshServerConfig = _MmSshServerConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 27)
)
_MmSshServerHostKeyTable_Object = MibTable
mmSshServerHostKeyTable = _MmSshServerHostKeyTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 27, 1)
)
if mibBuilder.loadTexts:
    mmSshServerHostKeyTable.setStatus("mandatory")
_MmSshServerHostKeyEntry_Object = MibTableRow
mmSshServerHostKeyEntry = _MmSshServerHostKeyEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 27, 1, 1)
)
mmSshServerHostKeyEntry.setIndexNames(
    (0, "BLADE-MIB", "mmSshServerHostKeyIndex"),
)
if mibBuilder.loadTexts:
    mmSshServerHostKeyEntry.setStatus("mandatory")
_MmSshServerHostKeyIndex_Type = Integer32
_MmSshServerHostKeyIndex_Object = MibTableColumn
mmSshServerHostKeyIndex = _MmSshServerHostKeyIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 27, 1, 1, 1),
    _MmSshServerHostKeyIndex_Type()
)
mmSshServerHostKeyIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmSshServerHostKeyIndex.setStatus("mandatory")


class _MmSshServerHostKeyType_Type(Integer32):
    """Custom type mmSshServerHostKeyType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("sshDss", 1),
          ("sshRsa", 2))
    )


_MmSshServerHostKeyType_Type.__name__ = "Integer32"
_MmSshServerHostKeyType_Object = MibTableColumn
mmSshServerHostKeyType = _MmSshServerHostKeyType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 27, 1, 1, 2),
    _MmSshServerHostKeyType_Type()
)
mmSshServerHostKeyType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmSshServerHostKeyType.setStatus("mandatory")


class _MmSshServerHostKeySize_Type(Integer32):
    """Custom type mmSshServerHostKeySize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("bits512", 1),
          ("bits768", 2),
          ("bits1024", 3),
          ("bits2048", 4),
          ("bits4096", 5))
    )


_MmSshServerHostKeySize_Type.__name__ = "Integer32"
_MmSshServerHostKeySize_Object = MibTableColumn
mmSshServerHostKeySize = _MmSshServerHostKeySize_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 27, 1, 1, 3),
    _MmSshServerHostKeySize_Type()
)
mmSshServerHostKeySize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmSshServerHostKeySize.setStatus("mandatory")
_MmSshServerHostKeyFingerprint_Type = OctetString
_MmSshServerHostKeyFingerprint_Object = MibTableColumn
mmSshServerHostKeyFingerprint = _MmSshServerHostKeyFingerprint_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 27, 1, 1, 4),
    _MmSshServerHostKeyFingerprint_Type()
)
mmSshServerHostKeyFingerprint.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmSshServerHostKeyFingerprint.setStatus("mandatory")


class _MmSshServerHostKeyGenerate_Type(Integer32):
    """Custom type mmSshServerHostKeyGenerate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_MmSshServerHostKeyGenerate_Type.__name__ = "Integer32"
_MmSshServerHostKeyGenerate_Object = MibScalar
mmSshServerHostKeyGenerate = _MmSshServerHostKeyGenerate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 27, 2),
    _MmSshServerHostKeyGenerate_Type()
)
mmSshServerHostKeyGenerate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mmSshServerHostKeyGenerate.setStatus("mandatory")
_MmSshServerHostKeyGenerateProgress_Type = OctetString
_MmSshServerHostKeyGenerateProgress_Object = MibScalar
mmSshServerHostKeyGenerateProgress = _MmSshServerHostKeyGenerateProgress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 27, 3),
    _MmSshServerHostKeyGenerateProgress_Type()
)
mmSshServerHostKeyGenerateProgress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmSshServerHostKeyGenerateProgress.setStatus("mandatory")


class _RpEnable_Type(Integer32):
    """Custom type rpEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RpEnable_Type.__name__ = "Integer32"
_RpEnable_Object = MibScalar
rpEnable = _RpEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 28),
    _RpEnable_Type()
)
rpEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rpEnable.setStatus("mandatory")
_TcpPortAssignmentCfg_ObjectIdentity = ObjectIdentity
tcpPortAssignmentCfg = _TcpPortAssignmentCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5)
)


class _TcpPortsRestoreDefault_Type(Integer32):
    """Custom type tcpPortsRestoreDefault based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_TcpPortsRestoreDefault_Type.__name__ = "Integer32"
_TcpPortsRestoreDefault_Object = MibScalar
tcpPortsRestoreDefault = _TcpPortsRestoreDefault_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 1),
    _TcpPortsRestoreDefault_Type()
)
tcpPortsRestoreDefault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tcpPortsRestoreDefault.setStatus("mandatory")
_HttpPortAssignment_Type = Integer32
_HttpPortAssignment_Object = MibScalar
httpPortAssignment = _HttpPortAssignment_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 2),
    _HttpPortAssignment_Type()
)
httpPortAssignment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    httpPortAssignment.setStatus("mandatory")
_HttpsPortAssignment_Type = Integer32
_HttpsPortAssignment_Object = MibScalar
httpsPortAssignment = _HttpsPortAssignment_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 3),
    _HttpsPortAssignment_Type()
)
httpsPortAssignment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    httpsPortAssignment.setStatus("mandatory")
_TelnetPortAssignment_Type = Integer32
_TelnetPortAssignment_Object = MibScalar
telnetPortAssignment = _TelnetPortAssignment_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 4),
    _TelnetPortAssignment_Type()
)
telnetPortAssignment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    telnetPortAssignment.setStatus("mandatory")
_SshPortAssignment_Type = Integer32
_SshPortAssignment_Object = MibScalar
sshPortAssignment = _SshPortAssignment_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 5),
    _SshPortAssignment_Type()
)
sshPortAssignment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sshPortAssignment.setStatus("mandatory")
_SnmpAgentPortAssignment_Type = Integer32
_SnmpAgentPortAssignment_Object = MibScalar
snmpAgentPortAssignment = _SnmpAgentPortAssignment_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 6),
    _SnmpAgentPortAssignment_Type()
)
snmpAgentPortAssignment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpAgentPortAssignment.setStatus("mandatory")
_SnmpTrapsPortAssignment_Type = Integer32
_SnmpTrapsPortAssignment_Object = MibScalar
snmpTrapsPortAssignment = _SnmpTrapsPortAssignment_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 7),
    _SnmpTrapsPortAssignment_Type()
)
snmpTrapsPortAssignment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpTrapsPortAssignment.setStatus("mandatory")
_CommandModePortAssignment_Type = Integer32
_CommandModePortAssignment_Object = MibScalar
commandModePortAssignment = _CommandModePortAssignment_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 8),
    _CommandModePortAssignment_Type()
)
commandModePortAssignment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    commandModePortAssignment.setStatus("mandatory")
_SecureCommandModePortAssignment_Type = Integer32
_SecureCommandModePortAssignment_Object = MibScalar
secureCommandModePortAssignment = _SecureCommandModePortAssignment_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 9),
    _SecureCommandModePortAssignment_Type()
)
secureCommandModePortAssignment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    secureCommandModePortAssignment.setStatus("mandatory")
_RdPortAssignment_Type = Integer32
_RdPortAssignment_Object = MibScalar
rdPortAssignment = _RdPortAssignment_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 10),
    _RdPortAssignment_Type()
)
rdPortAssignment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rdPortAssignment.setStatus("deprecated")
_RdocPortAssignment_Type = Integer32
_RdocPortAssignment_Object = MibScalar
rdocPortAssignment = _RdocPortAssignment_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 11),
    _RdocPortAssignment_Type()
)
rdocPortAssignment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rdocPortAssignment.setStatus("deprecated")
_KvmPortAssignment_Type = Integer32
_KvmPortAssignment_Object = MibScalar
kvmPortAssignment = _KvmPortAssignment_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 12),
    _KvmPortAssignment_Type()
)
kvmPortAssignment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    kvmPortAssignment.setStatus("deprecated")
_FtpPortAssignment_Type = Integer32
_FtpPortAssignment_Object = MibScalar
ftpPortAssignment = _FtpPortAssignment_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 13),
    _FtpPortAssignment_Type()
)
ftpPortAssignment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ftpPortAssignment.setStatus("mandatory")
_FtpDataPortAssignment_Type = Integer32
_FtpDataPortAssignment_Object = MibScalar
ftpDataPortAssignment = _FtpDataPortAssignment_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 14),
    _FtpDataPortAssignment_Type()
)
ftpDataPortAssignment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ftpDataPortAssignment.setStatus("mandatory")
_TftpPortAssignment_Type = Integer32
_TftpPortAssignment_Object = MibScalar
tftpPortAssignment = _TftpPortAssignment_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 15),
    _TftpPortAssignment_Type()
)
tftpPortAssignment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tftpPortAssignment.setStatus("mandatory")
_SmashTelnetPortAssignment_Type = Integer32
_SmashTelnetPortAssignment_Object = MibScalar
smashTelnetPortAssignment = _SmashTelnetPortAssignment_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 17),
    _SmashTelnetPortAssignment_Type()
)
smashTelnetPortAssignment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smashTelnetPortAssignment.setStatus("mandatory")
_SmashSshPortAssignment_Type = Integer32
_SmashSshPortAssignment_Object = MibScalar
smashSshPortAssignment = _SmashSshPortAssignment_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 18),
    _SmashSshPortAssignment_Type()
)
smashSshPortAssignment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smashSshPortAssignment.setStatus("mandatory")
_SlpPortAssignment_Type = Integer32
_SlpPortAssignment_Object = MibScalar
slpPortAssignment = _SlpPortAssignment_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 19),
    _SlpPortAssignment_Type()
)
slpPortAssignment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slpPortAssignment.setStatus("mandatory")
_SdsPortAssignment_Type = Integer32
_SdsPortAssignment_Object = MibScalar
sdsPortAssignment = _SdsPortAssignment_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 20),
    _SdsPortAssignment_Type()
)
sdsPortAssignment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sdsPortAssignment.setStatus("deprecated")
_RpPortAssignment_Type = Integer32
_RpPortAssignment_Object = MibScalar
rpPortAssignment = _RpPortAssignment_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 21),
    _RpPortAssignment_Type()
)
rpPortAssignment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rpPortAssignment.setStatus("mandatory")
_LdapClientCfg_ObjectIdentity = ObjectIdentity
ldapClientCfg = _LdapClientCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6)
)


class _LdapServer1NameOrIPAddress_Type(OctetString):
    """Custom type ldapServer1NameOrIPAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 256),
    )


_LdapServer1NameOrIPAddress_Type.__name__ = "OctetString"
_LdapServer1NameOrIPAddress_Object = MibScalar
ldapServer1NameOrIPAddress = _LdapServer1NameOrIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 1),
    _LdapServer1NameOrIPAddress_Type()
)
ldapServer1NameOrIPAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapServer1NameOrIPAddress.setStatus("mandatory")
_LdapServer1PortNumber_Type = Integer32
_LdapServer1PortNumber_Object = MibScalar
ldapServer1PortNumber = _LdapServer1PortNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 2),
    _LdapServer1PortNumber_Type()
)
ldapServer1PortNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapServer1PortNumber.setStatus("mandatory")


class _LdapServer2NameOrIPAddress_Type(OctetString):
    """Custom type ldapServer2NameOrIPAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 256),
    )


_LdapServer2NameOrIPAddress_Type.__name__ = "OctetString"
_LdapServer2NameOrIPAddress_Object = MibScalar
ldapServer2NameOrIPAddress = _LdapServer2NameOrIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 3),
    _LdapServer2NameOrIPAddress_Type()
)
ldapServer2NameOrIPAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapServer2NameOrIPAddress.setStatus("mandatory")
_LdapServer2PortNumber_Type = Integer32
_LdapServer2PortNumber_Object = MibScalar
ldapServer2PortNumber = _LdapServer2PortNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 4),
    _LdapServer2PortNumber_Type()
)
ldapServer2PortNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapServer2PortNumber.setStatus("mandatory")


class _LdapServer3NameOrIPAddress_Type(OctetString):
    """Custom type ldapServer3NameOrIPAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 256),
    )


_LdapServer3NameOrIPAddress_Type.__name__ = "OctetString"
_LdapServer3NameOrIPAddress_Object = MibScalar
ldapServer3NameOrIPAddress = _LdapServer3NameOrIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 5),
    _LdapServer3NameOrIPAddress_Type()
)
ldapServer3NameOrIPAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapServer3NameOrIPAddress.setStatus("mandatory")
_LdapServer3PortNumber_Type = Integer32
_LdapServer3PortNumber_Object = MibScalar
ldapServer3PortNumber = _LdapServer3PortNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 6),
    _LdapServer3PortNumber_Type()
)
ldapServer3PortNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapServer3PortNumber.setStatus("mandatory")


class _LdapRootDN_Type(OctetString):
    """Custom type ldapRootDN based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 256),
    )


_LdapRootDN_Type.__name__ = "OctetString"
_LdapRootDN_Object = MibScalar
ldapRootDN = _LdapRootDN_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 7),
    _LdapRootDN_Type()
)
ldapRootDN.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapRootDN.setStatus("mandatory")


class _LdapUserSearchBaseDN_Type(OctetString):
    """Custom type ldapUserSearchBaseDN based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_LdapUserSearchBaseDN_Type.__name__ = "OctetString"
_LdapUserSearchBaseDN_Object = MibScalar
ldapUserSearchBaseDN = _LdapUserSearchBaseDN_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 8),
    _LdapUserSearchBaseDN_Type()
)
ldapUserSearchBaseDN.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapUserSearchBaseDN.setStatus("deprecated")


class _LdapGroupFilter_Type(OctetString):
    """Custom type ldapGroupFilter based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 511),
    )


_LdapGroupFilter_Type.__name__ = "OctetString"
_LdapGroupFilter_Object = MibScalar
ldapGroupFilter = _LdapGroupFilter_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 9),
    _LdapGroupFilter_Type()
)
ldapGroupFilter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapGroupFilter.setStatus("mandatory")


class _LdapBindingMethod_Type(Integer32):
    """Custom type ldapBindingMethod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("anonymousAuthentication", 0),
          ("clientAuthentication", 1),
          ("userPrincipalName", 2),
          ("strictUserPrincipalName", 3))
    )


_LdapBindingMethod_Type.__name__ = "Integer32"
_LdapBindingMethod_Object = MibScalar
ldapBindingMethod = _LdapBindingMethod_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 10),
    _LdapBindingMethod_Type()
)
ldapBindingMethod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapBindingMethod.setStatus("mandatory")


class _LdapClientAuthenticationDN_Type(OctetString):
    """Custom type ldapClientAuthenticationDN based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_LdapClientAuthenticationDN_Type.__name__ = "OctetString"
_LdapClientAuthenticationDN_Object = MibScalar
ldapClientAuthenticationDN = _LdapClientAuthenticationDN_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 11),
    _LdapClientAuthenticationDN_Type()
)
ldapClientAuthenticationDN.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapClientAuthenticationDN.setStatus("mandatory")


class _LdapClientAuthenticationPassword_Type(OctetString):
    """Custom type ldapClientAuthenticationPassword based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_LdapClientAuthenticationPassword_Type.__name__ = "OctetString"
_LdapClientAuthenticationPassword_Object = MibScalar
ldapClientAuthenticationPassword = _LdapClientAuthenticationPassword_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 12),
    _LdapClientAuthenticationPassword_Type()
)
ldapClientAuthenticationPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapClientAuthenticationPassword.setStatus("mandatory")


class _LdapUIDsearchAttribute_Type(OctetString):
    """Custom type ldapUIDsearchAttribute based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_LdapUIDsearchAttribute_Type.__name__ = "OctetString"
_LdapUIDsearchAttribute_Object = MibScalar
ldapUIDsearchAttribute = _LdapUIDsearchAttribute_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 13),
    _LdapUIDsearchAttribute_Type()
)
ldapUIDsearchAttribute.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapUIDsearchAttribute.setStatus("mandatory")


class _LdapGroupSearchAttribute_Type(OctetString):
    """Custom type ldapGroupSearchAttribute based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_LdapGroupSearchAttribute_Type.__name__ = "OctetString"
_LdapGroupSearchAttribute_Object = MibScalar
ldapGroupSearchAttribute = _LdapGroupSearchAttribute_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 14),
    _LdapGroupSearchAttribute_Type()
)
ldapGroupSearchAttribute.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapGroupSearchAttribute.setStatus("mandatory")


class _LdapLoginPermissionAttribute_Type(OctetString):
    """Custom type ldapLoginPermissionAttribute based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_LdapLoginPermissionAttribute_Type.__name__ = "OctetString"
_LdapLoginPermissionAttribute_Object = MibScalar
ldapLoginPermissionAttribute = _LdapLoginPermissionAttribute_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 15),
    _LdapLoginPermissionAttribute_Type()
)
ldapLoginPermissionAttribute.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapLoginPermissionAttribute.setStatus("mandatory")


class _LdapUseDNSOrPreConfiguredServers_Type(Integer32):
    """Custom type ldapUseDNSOrPreConfiguredServers based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("usePreConfiguredLDAPServers", 0),
          ("useDNSToFindLDAPServers", 1))
    )


_LdapUseDNSOrPreConfiguredServers_Type.__name__ = "Integer32"
_LdapUseDNSOrPreConfiguredServers_Object = MibScalar
ldapUseDNSOrPreConfiguredServers = _LdapUseDNSOrPreConfiguredServers_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 16),
    _LdapUseDNSOrPreConfiguredServers_Type()
)
ldapUseDNSOrPreConfiguredServers.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapUseDNSOrPreConfiguredServers.setStatus("mandatory")


class _LdapDomainSource_Type(Integer32):
    """Custom type ldapDomainSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("extractSearchDomainFromLoginID", 0),
          ("useOnlyConfiguredSearchDomainBelow", 1),
          ("tryLoginFirstThenConfiguredValue", 2))
    )


_LdapDomainSource_Type.__name__ = "Integer32"
_LdapDomainSource_Object = MibScalar
ldapDomainSource = _LdapDomainSource_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 17),
    _LdapDomainSource_Type()
)
ldapDomainSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapDomainSource.setStatus("deprecated")


class _LdapSearchDomain_Type(OctetString):
    """Custom type ldapSearchDomain based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_LdapSearchDomain_Type.__name__ = "OctetString"
_LdapSearchDomain_Object = MibScalar
ldapSearchDomain = _LdapSearchDomain_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 18),
    _LdapSearchDomain_Type()
)
ldapSearchDomain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapSearchDomain.setStatus("deprecated")


class _LdapServiceName_Type(OctetString):
    """Custom type ldapServiceName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_LdapServiceName_Type.__name__ = "OctetString"
_LdapServiceName_Object = MibScalar
ldapServiceName = _LdapServiceName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 19),
    _LdapServiceName_Type()
)
ldapServiceName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapServiceName.setStatus("deprecated")


class _LdapRBSModelCfg_Type(Integer32):
    """Custom type ldapRBSModelCfg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("oldPermissionString", 0),
          ("newRBSModel", 1))
    )


_LdapRBSModelCfg_Type.__name__ = "Integer32"
_LdapRBSModelCfg_Object = MibScalar
ldapRBSModelCfg = _LdapRBSModelCfg_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 20),
    _LdapRBSModelCfg_Type()
)
ldapRBSModelCfg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapRBSModelCfg.setStatus("mandatory")


class _LdapTargetName_Type(OctetString):
    """Custom type ldapTargetName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_LdapTargetName_Type.__name__ = "OctetString"
_LdapTargetName_Object = MibScalar
ldapTargetName = _LdapTargetName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 21),
    _LdapTargetName_Type()
)
ldapTargetName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapTargetName.setStatus("mandatory")


class _LdapAuthCfg_Type(Integer32):
    """Custom type ldapAuthCfg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("authenticationAndAuthorization", 0),
          ("authenticationOnly", 1))
    )


_LdapAuthCfg_Type.__name__ = "Integer32"
_LdapAuthCfg_Object = MibScalar
ldapAuthCfg = _LdapAuthCfg_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 22),
    _LdapAuthCfg_Type()
)
ldapAuthCfg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapAuthCfg.setStatus("mandatory")


class _LdapForestName_Type(OctetString):
    """Custom type ldapForestName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_LdapForestName_Type.__name__ = "OctetString"
_LdapForestName_Object = MibScalar
ldapForestName = _LdapForestName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 23),
    _LdapForestName_Type()
)
ldapForestName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapForestName.setStatus("mandatory")


class _LdapDomainName_Type(OctetString):
    """Custom type ldapDomainName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 256),
    )


_LdapDomainName_Type.__name__ = "OctetString"
_LdapDomainName_Object = MibScalar
ldapDomainName = _LdapDomainName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 24),
    _LdapDomainName_Type()
)
ldapDomainName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapDomainName.setStatus("mandatory")


class _LdapServer4NameOrIPAddress_Type(OctetString):
    """Custom type ldapServer4NameOrIPAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 256),
    )


_LdapServer4NameOrIPAddress_Type.__name__ = "OctetString"
_LdapServer4NameOrIPAddress_Object = MibScalar
ldapServer4NameOrIPAddress = _LdapServer4NameOrIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 25),
    _LdapServer4NameOrIPAddress_Type()
)
ldapServer4NameOrIPAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapServer4NameOrIPAddress.setStatus("mandatory")
_LdapServer4PortNumber_Type = Integer32
_LdapServer4PortNumber_Object = MibScalar
ldapServer4PortNumber = _LdapServer4PortNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 26),
    _LdapServer4PortNumber_Type()
)
ldapServer4PortNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapServer4PortNumber.setStatus("mandatory")
_UplinkCheckConfig_ObjectIdentity = ObjectIdentity
uplinkCheckConfig = _UplinkCheckConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7)
)


class _UplinkCheckEnabled_Type(Integer32):
    """Custom type uplinkCheckEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("uplinkCheckDisabled", 0),
          ("uplinkCheckEnabled", 1))
    )


_UplinkCheckEnabled_Type.__name__ = "Integer32"
_UplinkCheckEnabled_Object = MibScalar
uplinkCheckEnabled = _UplinkCheckEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7, 1),
    _UplinkCheckEnabled_Type()
)
uplinkCheckEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    uplinkCheckEnabled.setStatus("mandatory")
_UplinkCheckDelay_Type = Integer32
_UplinkCheckDelay_Object = MibScalar
uplinkCheckDelay = _UplinkCheckDelay_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7, 2),
    _UplinkCheckDelay_Type()
)
uplinkCheckDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    uplinkCheckDelay.setStatus("mandatory")
_LogicalUplinkDestination_Type = IpAddress
_LogicalUplinkDestination_Object = MibScalar
logicalUplinkDestination = _LogicalUplinkDestination_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7, 3),
    _LogicalUplinkDestination_Type()
)
logicalUplinkDestination.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    logicalUplinkDestination.setStatus("mandatory")


class _LogicalUplinkCheckEnabled_Type(Integer32):
    """Custom type logicalUplinkCheckEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("uplinkCheckDisabled", 0),
          ("uplinkCheckEnabled", 1))
    )


_LogicalUplinkCheckEnabled_Type.__name__ = "Integer32"
_LogicalUplinkCheckEnabled_Object = MibScalar
logicalUplinkCheckEnabled = _LogicalUplinkCheckEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7, 4),
    _LogicalUplinkCheckEnabled_Type()
)
logicalUplinkCheckEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    logicalUplinkCheckEnabled.setStatus("mandatory")
_LogicalUplinkCheckDelay_Type = Integer32
_LogicalUplinkCheckDelay_Object = MibScalar
logicalUplinkCheckDelay = _LogicalUplinkCheckDelay_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7, 5),
    _LogicalUplinkCheckDelay_Type()
)
logicalUplinkCheckDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    logicalUplinkCheckDelay.setStatus("mandatory")
_PhysicalUplinkCheckDelayInSecs_Type = Integer32
_PhysicalUplinkCheckDelayInSecs_Object = MibScalar
physicalUplinkCheckDelayInSecs = _PhysicalUplinkCheckDelayInSecs_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7, 6),
    _PhysicalUplinkCheckDelayInSecs_Type()
)
physicalUplinkCheckDelayInSecs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    physicalUplinkCheckDelayInSecs.setStatus("mandatory")
_LogicalUplinkCheckDelayInSecs_Type = Integer32
_LogicalUplinkCheckDelayInSecs_Object = MibScalar
logicalUplinkCheckDelayInSecs = _LogicalUplinkCheckDelayInSecs_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7, 7),
    _LogicalUplinkCheckDelayInSecs_Type()
)
logicalUplinkCheckDelayInSecs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    logicalUplinkCheckDelayInSecs.setStatus("mandatory")
_LogicalUplinkIPv6Destination_Type = InetAddressIPv6
_LogicalUplinkIPv6Destination_Object = MibScalar
logicalUplinkIPv6Destination = _LogicalUplinkIPv6Destination_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7, 8),
    _LogicalUplinkIPv6Destination_Type()
)
logicalUplinkIPv6Destination.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    logicalUplinkIPv6Destination.setStatus("mandatory")


class _LogicalUplinkFailoverPolicy_Type(Integer32):
    """Custom type logicalUplinkFailoverPolicy based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("either", 1),
          ("both", 2))
    )


_LogicalUplinkFailoverPolicy_Type.__name__ = "Integer32"
_LogicalUplinkFailoverPolicy_Object = MibScalar
logicalUplinkFailoverPolicy = _LogicalUplinkFailoverPolicy_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7, 9),
    _LogicalUplinkFailoverPolicy_Type()
)
logicalUplinkFailoverPolicy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    logicalUplinkFailoverPolicy.setStatus("mandatory")
_NtpConfig_ObjectIdentity = ObjectIdentity
ntpConfig = _NtpConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 8)
)


class _NtpEnable_Type(Integer32):
    """Custom type ntpEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_NtpEnable_Type.__name__ = "Integer32"
_NtpEnable_Object = MibScalar
ntpEnable = _NtpEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 8, 1),
    _NtpEnable_Type()
)
ntpEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ntpEnable.setStatus("mandatory")


class _NtpIpAddressHostname_Type(OctetString):
    """Custom type ntpIpAddressHostname based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 63),
    )


_NtpIpAddressHostname_Type.__name__ = "OctetString"
_NtpIpAddressHostname_Object = MibScalar
ntpIpAddressHostname = _NtpIpAddressHostname_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 8, 2),
    _NtpIpAddressHostname_Type()
)
ntpIpAddressHostname.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ntpIpAddressHostname.setStatus("mandatory")
_NtpUpdateFrequency_Type = Integer32
_NtpUpdateFrequency_Object = MibScalar
ntpUpdateFrequency = _NtpUpdateFrequency_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 8, 3),
    _NtpUpdateFrequency_Type()
)
ntpUpdateFrequency.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ntpUpdateFrequency.setStatus("mandatory")
_NtpLastUpdate_Type = OctetString
_NtpLastUpdate_Object = MibScalar
ntpLastUpdate = _NtpLastUpdate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 8, 4),
    _NtpLastUpdate_Type()
)
ntpLastUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpLastUpdate.setStatus("mandatory")


class _NtpUpdateClock_Type(Integer32):
    """Custom type ntpUpdateClock based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_NtpUpdateClock_Type.__name__ = "Integer32"
_NtpUpdateClock_Object = MibScalar
ntpUpdateClock = _NtpUpdateClock_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 8, 5),
    _NtpUpdateClock_Type()
)
ntpUpdateClock.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ntpUpdateClock.setStatus("mandatory")
_NtpAuthEntry_Type = OctetString
_NtpAuthEntry_Object = MibScalar
ntpAuthEntry = _NtpAuthEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 8, 6),
    _NtpAuthEntry_Type()
)
ntpAuthEntry.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ntpAuthEntry.setStatus("mandatory")


class _NtpAuthEnable_Type(Integer32):
    """Custom type ntpAuthEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_NtpAuthEnable_Type.__name__ = "Integer32"
_NtpAuthEnable_Object = MibScalar
ntpAuthEnable = _NtpAuthEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 8, 7),
    _NtpAuthEnable_Type()
)
ntpAuthEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ntpAuthEnable.setStatus("mandatory")
_SyslogConfig_ObjectIdentity = ObjectIdentity
syslogConfig = _SyslogConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9)
)


class _SyslogSevFilterLevel_Type(Integer32):
    """Custom type syslogSevFilterLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("error", 0),
          ("warning", 1),
          ("information", 2))
    )


_SyslogSevFilterLevel_Type.__name__ = "Integer32"
_SyslogSevFilterLevel_Object = MibScalar
syslogSevFilterLevel = _SyslogSevFilterLevel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9, 1),
    _SyslogSevFilterLevel_Type()
)
syslogSevFilterLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    syslogSevFilterLevel.setStatus("mandatory")
_SyslogCollectorConfig_ObjectIdentity = ObjectIdentity
syslogCollectorConfig = _SyslogCollectorConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9, 2)
)
_SyslogCollectorTable_Object = MibTable
syslogCollectorTable = _SyslogCollectorTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9, 2, 1)
)
if mibBuilder.loadTexts:
    syslogCollectorTable.setStatus("mandatory")
_SyslogCollectorEntry_Object = MibTableRow
syslogCollectorEntry = _SyslogCollectorEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9, 2, 1, 1)
)
syslogCollectorEntry.setIndexNames(
    (0, "BLADE-MIB", "syslogCollectorIndex"),
)
if mibBuilder.loadTexts:
    syslogCollectorEntry.setStatus("mandatory")


class _SyslogCollectorIndex_Type(Integer32):
    """Custom type syslogCollectorIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_SyslogCollectorIndex_Type.__name__ = "Integer32"
_SyslogCollectorIndex_Object = MibTableColumn
syslogCollectorIndex = _SyslogCollectorIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9, 2, 1, 1, 1),
    _SyslogCollectorIndex_Type()
)
syslogCollectorIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    syslogCollectorIndex.setStatus("mandatory")


class _SyslogCollectorHostnameOrIpAddress_Type(OctetString):
    """Custom type syslogCollectorHostnameOrIpAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 63),
    )


_SyslogCollectorHostnameOrIpAddress_Type.__name__ = "OctetString"
_SyslogCollectorHostnameOrIpAddress_Object = MibTableColumn
syslogCollectorHostnameOrIpAddress = _SyslogCollectorHostnameOrIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9, 2, 1, 1, 2),
    _SyslogCollectorHostnameOrIpAddress_Type()
)
syslogCollectorHostnameOrIpAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    syslogCollectorHostnameOrIpAddress.setStatus("mandatory")


class _SyslogCollectorPort_Type(Integer32):
    """Custom type syslogCollectorPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SyslogCollectorPort_Type.__name__ = "Integer32"
_SyslogCollectorPort_Object = MibTableColumn
syslogCollectorPort = _SyslogCollectorPort_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9, 2, 1, 1, 3),
    _SyslogCollectorPort_Type()
)
syslogCollectorPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    syslogCollectorPort.setStatus("mandatory")


class _SyslogCollectorEnable_Type(Integer32):
    """Custom type syslogCollectorEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SyslogCollectorEnable_Type.__name__ = "Integer32"
_SyslogCollectorEnable_Object = MibTableColumn
syslogCollectorEnable = _SyslogCollectorEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9, 2, 1, 1, 4),
    _SyslogCollectorEnable_Type()
)
syslogCollectorEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    syslogCollectorEnable.setStatus("mandatory")


class _SyslogTestPacket_Type(Integer32):
    """Custom type syslogTestPacket based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_SyslogTestPacket_Type.__name__ = "Integer32"
_SyslogTestPacket_Object = MibScalar
syslogTestPacket = _SyslogTestPacket_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9, 3),
    _SyslogTestPacket_Type()
)
syslogTestPacket.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    syslogTestPacket.setStatus("mandatory")
_SolConfiguration_ObjectIdentity = ObjectIdentity
solConfiguration = _SolConfiguration_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10)
)
_SolGlobalConfig_ObjectIdentity = ObjectIdentity
solGlobalConfig = _SolGlobalConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1)
)


class _SolEnable_Type(Integer32):
    """Custom type solEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("solDisabled", 0),
          ("solEnabled", 1))
    )


_SolEnable_Type.__name__ = "Integer32"
_SolEnable_Object = MibScalar
solEnable = _SolEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1, 1),
    _SolEnable_Type()
)
solEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    solEnable.setStatus("mandatory")
_SolVlanId_Type = Integer32
_SolVlanId_Object = MibScalar
solVlanId = _SolVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1, 2),
    _SolVlanId_Type()
)
solVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    solVlanId.setStatus("mandatory")
_SolAccumulateTimeout_Type = Integer32
_SolAccumulateTimeout_Object = MibScalar
solAccumulateTimeout = _SolAccumulateTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1, 3),
    _SolAccumulateTimeout_Type()
)
solAccumulateTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    solAccumulateTimeout.setStatus("mandatory")
_SolCharSendThreshold_Type = Integer32
_SolCharSendThreshold_Object = MibScalar
solCharSendThreshold = _SolCharSendThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1, 4),
    _SolCharSendThreshold_Type()
)
solCharSendThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    solCharSendThreshold.setStatus("mandatory")
_SolRetry_Type = Integer32
_SolRetry_Object = MibScalar
solRetry = _SolRetry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1, 5),
    _SolRetry_Type()
)
solRetry.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    solRetry.setStatus("mandatory")
_SolRetryInterval_Type = Integer32
_SolRetryInterval_Object = MibScalar
solRetryInterval = _SolRetryInterval_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1, 6),
    _SolRetryInterval_Type()
)
solRetryInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    solRetryInterval.setStatus("mandatory")


class _SolExitToCliKeySeq_Type(OctetString):
    """Custom type solExitToCliKeySeq based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_SolExitToCliKeySeq_Type.__name__ = "OctetString"
_SolExitToCliKeySeq_Object = MibScalar
solExitToCliKeySeq = _SolExitToCliKeySeq_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1, 7),
    _SolExitToCliKeySeq_Type()
)
solExitToCliKeySeq.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    solExitToCliKeySeq.setStatus("mandatory")


class _SolResetBladeKeySeq_Type(OctetString):
    """Custom type solResetBladeKeySeq based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_SolResetBladeKeySeq_Type.__name__ = "OctetString"
_SolResetBladeKeySeq_Object = MibScalar
solResetBladeKeySeq = _SolResetBladeKeySeq_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1, 8),
    _SolResetBladeKeySeq_Type()
)
solResetBladeKeySeq.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    solResetBladeKeySeq.setStatus("mandatory")
_SolBladeConfig_ObjectIdentity = ObjectIdentity
solBladeConfig = _SolBladeConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2)
)
_SolBladeTable_Object = MibTable
solBladeTable = _SolBladeTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1)
)
if mibBuilder.loadTexts:
    solBladeTable.setStatus("mandatory")
_SolBladeEntry_Object = MibTableRow
solBladeEntry = _SolBladeEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1)
)
solBladeEntry.setIndexNames(
    (0, "BLADE-MIB", "solBladeIndex"),
)
if mibBuilder.loadTexts:
    solBladeEntry.setStatus("mandatory")
_SolBladeIndex_Type = Integer32
_SolBladeIndex_Object = MibTableColumn
solBladeIndex = _SolBladeIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 1),
    _SolBladeIndex_Type()
)
solBladeIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    solBladeIndex.setStatus("mandatory")
_SolBladeName_Type = OctetString
_SolBladeName_Object = MibTableColumn
solBladeName = _SolBladeName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 2),
    _SolBladeName_Type()
)
solBladeName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    solBladeName.setStatus("mandatory")


class _SolBladeEnable_Type(Integer32):
    """Custom type solBladeEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("solBladeDisabled", 0),
          ("solBladeEnabled", 1))
    )


_SolBladeEnable_Type.__name__ = "Integer32"
_SolBladeEnable_Object = MibTableColumn
solBladeEnable = _SolBladeEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 3),
    _SolBladeEnable_Type()
)
solBladeEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    solBladeEnable.setStatus("mandatory")
_SolBladeIpAddr_Type = IpAddress
_SolBladeIpAddr_Object = MibTableColumn
solBladeIpAddr = _SolBladeIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 4),
    _SolBladeIpAddr_Type()
)
solBladeIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    solBladeIpAddr.setStatus("mandatory")


class _SolBladeSessionStatus_Type(Integer32):
    """Custom type solBladeSessionStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("solSessionNotReady", 0),
          ("solSessionReady", 1),
          ("solSessionActive", 2))
    )


_SolBladeSessionStatus_Type.__name__ = "Integer32"
_SolBladeSessionStatus_Object = MibTableColumn
solBladeSessionStatus = _SolBladeSessionStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 5),
    _SolBladeSessionStatus_Type()
)
solBladeSessionStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    solBladeSessionStatus.setStatus("mandatory")


class _SolBladeCapability_Type(Integer32):
    """Custom type solBladeCapability based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("notSupport", 0),
          ("support", 1))
    )


_SolBladeCapability_Type.__name__ = "Integer32"
_SolBladeCapability_Object = MibTableColumn
solBladeCapability = _SolBladeCapability_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 6),
    _SolBladeCapability_Type()
)
solBladeCapability.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    solBladeCapability.setStatus("mandatory")
_ChassisInternalNetwork_ObjectIdentity = ObjectIdentity
chassisInternalNetwork = _ChassisInternalNetwork_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11)
)
_CinsSupported_Type = Integer32
_CinsSupported_Object = MibScalar
cinsSupported = _CinsSupported_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 1),
    _CinsSupported_Type()
)
cinsSupported.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cinsSupported.setStatus("mandatory")


class _CinGlobalEnable_Type(Integer32):
    """Custom type cinGlobalEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("cinDisabled", 0),
          ("cinEnabled", 1))
    )


_CinGlobalEnable_Type.__name__ = "Integer32"
_CinGlobalEnable_Object = MibScalar
cinGlobalEnable = _CinGlobalEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 2),
    _CinGlobalEnable_Type()
)
cinGlobalEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cinGlobalEnable.setStatus("mandatory")
_CinTable_Object = MibTable
cinTable = _CinTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 3)
)
if mibBuilder.loadTexts:
    cinTable.setStatus("mandatory")
_CinEntry_Object = MibTableRow
cinEntry = _CinEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 3, 1)
)
cinEntry.setIndexNames(
    (0, "BLADE-MIB", "cinIndex"),
)
if mibBuilder.loadTexts:
    cinEntry.setStatus("mandatory")
_CinIndex_Type = Integer32
_CinIndex_Object = MibTableColumn
cinIndex = _CinIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 3, 1, 1),
    _CinIndex_Type()
)
cinIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cinIndex.setStatus("mandatory")


class _CinDefExists_Type(Integer32):
    """Custom type cinDefExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_CinDefExists_Type.__name__ = "Integer32"
_CinDefExists_Object = MibTableColumn
cinDefExists = _CinDefExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 3, 1, 2),
    _CinDefExists_Type()
)
cinDefExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cinDefExists.setStatus("mandatory")


class _CinDelete_Type(Integer32):
    """Custom type cinDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_CinDelete_Type.__name__ = "Integer32"
_CinDelete_Object = MibTableColumn
cinDelete = _CinDelete_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 3, 1, 3),
    _CinDelete_Type()
)
cinDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cinDelete.setStatus("mandatory")


class _CinEnable_Type(Integer32):
    """Custom type cinEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_CinEnable_Type.__name__ = "Integer32"
_CinEnable_Object = MibTableColumn
cinEnable = _CinEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 3, 1, 4),
    _CinEnable_Type()
)
cinEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cinEnable.setStatus("mandatory")
_CinId_Type = Integer32
_CinId_Object = MibTableColumn
cinId = _CinId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 3, 1, 5),
    _CinId_Type()
)
cinId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cinId.setStatus("mandatory")
_CinIpAddress_Type = IpAddress
_CinIpAddress_Object = MibTableColumn
cinIpAddress = _CinIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 3, 1, 6),
    _CinIpAddress_Type()
)
cinIpAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cinIpAddress.setStatus("mandatory")
_CinIpv6Address_Type = InetAddressIPv6
_CinIpv6Address_Object = MibTableColumn
cinIpv6Address = _CinIpv6Address_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 3, 1, 7),
    _CinIpv6Address_Type()
)
cinIpv6Address.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cinIpv6Address.setStatus("mandatory")
_CinStatus_ObjectIdentity = ObjectIdentity
cinStatus = _CinStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 4)
)
_CinStatusTable_Object = MibTable
cinStatusTable = _CinStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 4, 1)
)
if mibBuilder.loadTexts:
    cinStatusTable.setStatus("mandatory")
_CinStatusEntry_Object = MibTableRow
cinStatusEntry = _CinStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 4, 1, 1)
)
cinStatusEntry.setIndexNames(
    (0, "BLADE-MIB", "cinStatusIndex"),
)
if mibBuilder.loadTexts:
    cinStatusEntry.setStatus("mandatory")
_CinStatusIndex_Type = Integer32
_CinStatusIndex_Object = MibTableColumn
cinStatusIndex = _CinStatusIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 4, 1, 1, 1),
    _CinStatusIndex_Type()
)
cinStatusIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cinStatusIndex.setStatus("mandatory")
_CinStatusString_Type = OctetString
_CinStatusString_Object = MibTableColumn
cinStatusString = _CinStatusString_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 4, 1, 1, 2),
    _CinStatusString_Type()
)
cinStatusString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cinStatusString.setStatus("mandatory")
_CinPortConfigTable_Object = MibTable
cinPortConfigTable = _CinPortConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 5)
)
if mibBuilder.loadTexts:
    cinPortConfigTable.setStatus("mandatory")
_CinPortConfigEntry_Object = MibTableRow
cinPortConfigEntry = _CinPortConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 5, 1)
)
cinPortConfigEntry.setIndexNames(
    (0, "BLADE-MIB", "cinPortConfigCINIndex"),
    (0, "BLADE-MIB", "cinPortConfigIndex"),
)
if mibBuilder.loadTexts:
    cinPortConfigEntry.setStatus("mandatory")
_CinPortConfigCINIndex_Type = Integer32
_CinPortConfigCINIndex_Object = MibTableColumn
cinPortConfigCINIndex = _CinPortConfigCINIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 5, 1, 1),
    _CinPortConfigCINIndex_Type()
)
cinPortConfigCINIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cinPortConfigCINIndex.setStatus("mandatory")
_CinPortConfigIndex_Type = Integer32
_CinPortConfigIndex_Object = MibTableColumn
cinPortConfigIndex = _CinPortConfigIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 5, 1, 2),
    _CinPortConfigIndex_Type()
)
cinPortConfigIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cinPortConfigIndex.setStatus("mandatory")


class _CinPortConfigProtocolID_Type(Integer32):
    """Custom type cinPortConfigProtocolID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("tcp", 1),
          ("udp", 2),
          ("notDefined", 3))
    )


_CinPortConfigProtocolID_Type.__name__ = "Integer32"
_CinPortConfigProtocolID_Object = MibTableColumn
cinPortConfigProtocolID = _CinPortConfigProtocolID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 5, 1, 3),
    _CinPortConfigProtocolID_Type()
)
cinPortConfigProtocolID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cinPortConfigProtocolID.setStatus("mandatory")
_CinPortConfigExternalPort_Type = Integer32
_CinPortConfigExternalPort_Object = MibTableColumn
cinPortConfigExternalPort = _CinPortConfigExternalPort_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 5, 1, 4),
    _CinPortConfigExternalPort_Type()
)
cinPortConfigExternalPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cinPortConfigExternalPort.setStatus("mandatory")
_CinPortConfigInternalPort_Type = Integer32
_CinPortConfigInternalPort_Object = MibTableColumn
cinPortConfigInternalPort = _CinPortConfigInternalPort_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 5, 1, 5),
    _CinPortConfigInternalPort_Type()
)
cinPortConfigInternalPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cinPortConfigInternalPort.setStatus("mandatory")


class _CinPortConfigEnable_Type(Integer32):
    """Custom type cinPortConfigEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_CinPortConfigEnable_Type.__name__ = "Integer32"
_CinPortConfigEnable_Object = MibTableColumn
cinPortConfigEnable = _CinPortConfigEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 5, 1, 6),
    _CinPortConfigEnable_Type()
)
cinPortConfigEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cinPortConfigEnable.setStatus("mandatory")


class _CinPortConfigDirection_Type(Integer32):
    """Custom type cinPortConfigDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("incoming", 1),
          ("outgoing", 2))
    )


_CinPortConfigDirection_Type.__name__ = "Integer32"
_CinPortConfigDirection_Object = MibTableColumn
cinPortConfigDirection = _CinPortConfigDirection_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 5, 1, 7),
    _CinPortConfigDirection_Type()
)
cinPortConfigDirection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cinPortConfigDirection.setStatus("mandatory")
_ConfigurationManagement_ObjectIdentity = ObjectIdentity
configurationManagement = _ConfigurationManagement_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 15)
)


class _SaveConfigurationToChassis_Type(Integer32):
    """Custom type saveConfigurationToChassis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("compressedFormat", 1),
          ("legacyFormat", 2))
    )


_SaveConfigurationToChassis_Type.__name__ = "Integer32"
_SaveConfigurationToChassis_Object = MibScalar
saveConfigurationToChassis = _SaveConfigurationToChassis_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 15, 1),
    _SaveConfigurationToChassis_Type()
)
saveConfigurationToChassis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    saveConfigurationToChassis.setStatus("mandatory")


class _RestoreConfigurationFromChassis_Type(Integer32):
    """Custom type restoreConfigurationFromChassis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_RestoreConfigurationFromChassis_Type.__name__ = "Integer32"
_RestoreConfigurationFromChassis_Object = MibScalar
restoreConfigurationFromChassis = _RestoreConfigurationFromChassis_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 15, 2),
    _RestoreConfigurationFromChassis_Type()
)
restoreConfigurationFromChassis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restoreConfigurationFromChassis.setStatus("mandatory")


class _AutoReadConfigInNewChassis_Type(Integer32):
    """Custom type autoReadConfigInNewChassis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_AutoReadConfigInNewChassis_Type.__name__ = "Integer32"
_AutoReadConfigInNewChassis_Object = MibScalar
autoReadConfigInNewChassis = _AutoReadConfigInNewChassis_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 15, 3),
    _AutoReadConfigInNewChassis_Type()
)
autoReadConfigInNewChassis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    autoReadConfigInNewChassis.setStatus("mandatory")
_TelcoManagement_ObjectIdentity = ObjectIdentity
telcoManagement = _TelcoManagement_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5)
)
_TelcoAlarmReq_ObjectIdentity = ObjectIdentity
telcoAlarmReq = _TelcoAlarmReq_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5, 1)
)
_TelcoAlarmSet_Type = OctetString
_TelcoAlarmSet_Object = MibScalar
telcoAlarmSet = _TelcoAlarmSet_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5, 1, 1),
    _TelcoAlarmSet_Type()
)
telcoAlarmSet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    telcoAlarmSet.setStatus("mandatory")
_TelcoAlarmAck_Type = OctetString
_TelcoAlarmAck_Object = MibScalar
telcoAlarmAck = _TelcoAlarmAck_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5, 1, 2),
    _TelcoAlarmAck_Type()
)
telcoAlarmAck.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    telcoAlarmAck.setStatus("mandatory")
_TelcoAlarmClear_Type = OctetString
_TelcoAlarmClear_Object = MibScalar
telcoAlarmClear = _TelcoAlarmClear_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5, 1, 3),
    _TelcoAlarmClear_Type()
)
telcoAlarmClear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    telcoAlarmClear.setStatus("mandatory")
_TelcoHWManagement_ObjectIdentity = ObjectIdentity
telcoHWManagement = _TelcoHWManagement_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5, 3)
)
_TappowerReq_ObjectIdentity = ObjectIdentity
tappowerReq = _TappowerReq_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5, 3, 1)
)


class _Tappoweronoff_Type(Integer32):
    """Custom type tappoweronoff based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("poweroff", 0),
          ("poweron", 1))
    )


_Tappoweronoff_Type.__name__ = "Integer32"
_Tappoweronoff_Object = MibScalar
tappoweronoff = _Tappoweronoff_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5, 3, 1, 1),
    _Tappoweronoff_Type()
)
tappoweronoff.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tappoweronoff.setStatus("mandatory")
_NcReq_ObjectIdentity = ObjectIdentity
ncReq = _NcReq_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5, 3, 2)
)
_NcReqTable_Object = MibTable
ncReqTable = _NcReqTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5, 3, 2, 1)
)
if mibBuilder.loadTexts:
    ncReqTable.setStatus("deprecated")
_NcReqEntry_Object = MibTableRow
ncReqEntry = _NcReqEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5, 3, 2, 1, 1)
)
ncReqEntry.setIndexNames(
    (0, "BLADE-MIB", "ncReqIndex"),
)
if mibBuilder.loadTexts:
    ncReqEntry.setStatus("deprecated")


class _NcReqIndex_Type(Integer32):
    """Custom type ncReqIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_NcReqIndex_Type.__name__ = "Integer32"
_NcReqIndex_Object = MibTableColumn
ncReqIndex = _NcReqIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5, 3, 2, 1, 1, 1),
    _NcReqIndex_Type()
)
ncReqIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ncReqIndex.setStatus("deprecated")


class _NcReqBayNumber_Type(Integer32):
    """Custom type ncReqBayNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("networkclock1", 1),
          ("networkclock2", 2))
    )


_NcReqBayNumber_Type.__name__ = "Integer32"
_NcReqBayNumber_Object = MibTableColumn
ncReqBayNumber = _NcReqBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5, 3, 2, 1, 1, 2),
    _NcReqBayNumber_Type()
)
ncReqBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ncReqBayNumber.setStatus("deprecated")


class _NcReqPoweronoff_Type(Integer32):
    """Custom type ncReqPoweronoff based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("poweroff", 0),
          ("poweron", 1))
    )


_NcReqPoweronoff_Type.__name__ = "Integer32"
_NcReqPoweronoff_Object = MibTableColumn
ncReqPoweronoff = _NcReqPoweronoff_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5, 3, 2, 1, 1, 3),
    _NcReqPoweronoff_Type()
)
ncReqPoweronoff.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ncReqPoweronoff.setStatus("deprecated")
_TelcoOEM_ObjectIdentity = ObjectIdentity
telcoOEM = _TelcoOEM_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5, 127)
)
_TelcoOEMs_Type = OctetString
_TelcoOEMs_Object = MibScalar
telcoOEMs = _TelcoOEMs_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 5, 127, 1),
    _TelcoOEMs_Type()
)
telcoOEMs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    telcoOEMs.setStatus("mandatory")
_RestartReset_ObjectIdentity = ObjectIdentity
restartReset = _RestartReset_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 7)
)


class _RestartSPImmediately_Type(Integer32):
    """Custom type restartSPImmediately based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_RestartSPImmediately_Type.__name__ = "Integer32"
_RestartSPImmediately_Object = MibScalar
restartSPImmediately = _RestartSPImmediately_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 7, 4),
    _RestartSPImmediately_Type()
)
restartSPImmediately.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restartSPImmediately.setStatus("mandatory")


class _RestartStandbyMM_Type(Integer32):
    """Custom type restartStandbyMM based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_RestartStandbyMM_Type.__name__ = "Integer32"
_RestartStandbyMM_Object = MibScalar
restartStandbyMM = _RestartStandbyMM_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 7, 5),
    _RestartStandbyMM_Type()
)
restartStandbyMM.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restartStandbyMM.setStatus("mandatory")


class _SwitchOverRedundantMM_Type(Integer32):
    """Custom type switchOverRedundantMM based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_SwitchOverRedundantMM_Type.__name__ = "Integer32"
_SwitchOverRedundantMM_Object = MibScalar
switchOverRedundantMM = _SwitchOverRedundantMM_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 7, 7),
    _SwitchOverRedundantMM_Type()
)
switchOverRedundantMM.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    switchOverRedundantMM.setStatus("mandatory")


class _ResetSPConfigAndRestart_Type(Integer32):
    """Custom type resetSPConfigAndRestart based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_ResetSPConfigAndRestart_Type.__name__ = "Integer32"
_ResetSPConfigAndRestart_Object = MibScalar
resetSPConfigAndRestart = _ResetSPConfigAndRestart_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 7, 20),
    _ResetSPConfigAndRestart_Type()
)
resetSPConfigAndRestart.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    resetSPConfigAndRestart.setStatus("mandatory")


class _ResetSPConfigAndRestartSaveLogs_Type(Integer32):
    """Custom type resetSPConfigAndRestartSaveLogs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_ResetSPConfigAndRestartSaveLogs_Type.__name__ = "Integer32"
_ResetSPConfigAndRestartSaveLogs_Object = MibScalar
resetSPConfigAndRestartSaveLogs = _ResetSPConfigAndRestartSaveLogs_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 7, 21),
    _ResetSPConfigAndRestartSaveLogs_Type()
)
resetSPConfigAndRestartSaveLogs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    resetSPConfigAndRestartSaveLogs.setStatus("mandatory")
_Blades_ObjectIdentity = ObjectIdentity
blades = _Blades_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22)
)
_ProcessorBlade_ObjectIdentity = ObjectIdentity
processorBlade = _ProcessorBlade_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1)
)


class _BladeMediaTrayBladeId_Type(Integer32):
    """Custom type bladeMediaTrayBladeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("managementModule", 0),
          ("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_BladeMediaTrayBladeId_Type.__name__ = "Integer32"
_BladeMediaTrayBladeId_Object = MibScalar
bladeMediaTrayBladeId = _BladeMediaTrayBladeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 1),
    _BladeMediaTrayBladeId_Type()
)
bladeMediaTrayBladeId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeMediaTrayBladeId.setStatus("mandatory")


class _BladeKVMBladeId_Type(Integer32):
    """Custom type bladeKVMBladeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("managementModule", 0),
          ("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_BladeKVMBladeId_Type.__name__ = "Integer32"
_BladeKVMBladeId_Object = MibScalar
bladeKVMBladeId = _BladeKVMBladeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 2),
    _BladeKVMBladeId_Type()
)
bladeKVMBladeId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeKVMBladeId.setStatus("mandatory")
_BladeBootSequenceTable_Object = MibTable
bladeBootSequenceTable = _BladeBootSequenceTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 3)
)
if mibBuilder.loadTexts:
    bladeBootSequenceTable.setStatus("mandatory")
_BladeBootSequenceEntry_Object = MibTableRow
bladeBootSequenceEntry = _BladeBootSequenceEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 3, 1)
)
bladeBootSequenceEntry.setIndexNames(
    (0, "BLADE-MIB", "bootSequenceIndex"),
)
if mibBuilder.loadTexts:
    bladeBootSequenceEntry.setStatus("mandatory")
_BootSequenceIndex_Type = Integer32
_BootSequenceIndex_Object = MibTableColumn
bootSequenceIndex = _BootSequenceIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 3, 1, 1),
    _BootSequenceIndex_Type()
)
bootSequenceIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bootSequenceIndex.setStatus("mandatory")


class _BootSequenceBladeId_Type(Integer32):
    """Custom type bootSequenceBladeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_BootSequenceBladeId_Type.__name__ = "Integer32"
_BootSequenceBladeId_Object = MibTableColumn
bootSequenceBladeId = _BootSequenceBladeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 3, 1, 2),
    _BootSequenceBladeId_Type()
)
bootSequenceBladeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bootSequenceBladeId.setStatus("mandatory")


class _BootSequenceBladeExists_Type(Integer32):
    """Custom type bootSequenceBladeExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_BootSequenceBladeExists_Type.__name__ = "Integer32"
_BootSequenceBladeExists_Object = MibTableColumn
bootSequenceBladeExists = _BootSequenceBladeExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 3, 1, 3),
    _BootSequenceBladeExists_Type()
)
bootSequenceBladeExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bootSequenceBladeExists.setStatus("mandatory")


class _BootSequenceBladePowerState_Type(Integer32):
    """Custom type bootSequenceBladePowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("standby", 3),
          ("hibernate", 4))
    )


_BootSequenceBladePowerState_Type.__name__ = "Integer32"
_BootSequenceBladePowerState_Object = MibTableColumn
bootSequenceBladePowerState = _BootSequenceBladePowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 3, 1, 4),
    _BootSequenceBladePowerState_Type()
)
bootSequenceBladePowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bootSequenceBladePowerState.setStatus("mandatory")


class _BootSequenceBladeHealthState_Type(Integer32):
    """Custom type bootSequenceBladeHealthState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("good", 1),
          ("warning", 2),
          ("critical", 3),
          ("kernelMode", 4),
          ("discovering", 5),
          ("commError", 6),
          ("noPower", 7),
          ("flashing", 8),
          ("initFailure", 9),
          ("insufficientPower", 10),
          ("powerDenied", 11))
    )


_BootSequenceBladeHealthState_Type.__name__ = "Integer32"
_BootSequenceBladeHealthState_Object = MibTableColumn
bootSequenceBladeHealthState = _BootSequenceBladeHealthState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 3, 1, 5),
    _BootSequenceBladeHealthState_Type()
)
bootSequenceBladeHealthState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bootSequenceBladeHealthState.setStatus("mandatory")
_BootSequenceBladeName_Type = OctetString
_BootSequenceBladeName_Object = MibTableColumn
bootSequenceBladeName = _BootSequenceBladeName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 3, 1, 6),
    _BootSequenceBladeName_Type()
)
bootSequenceBladeName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bootSequenceBladeName.setStatus("mandatory")


class _BootSequence1_Type(Integer32):
    """Custom type bootSequence1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              255)
        )
    )
    namedValues = NamedValues(
        *(("noneSpecified", 0),
          ("floppy", 1),
          ("cdrom", 2),
          ("hardDrive0", 3),
          ("hardDrive1", 4),
          ("hardDrive2", 5),
          ("hardDrive3", 6),
          ("networkBoot", 7),
          ("iscsi", 8),
          ("iscsiCritical", 9),
          ("hardDrive4", 10),
          ("usbModularFlashDrive", 11),
          ("hypervisor", 12),
          ("uefi", 13),
          ("legacyonly", 14),
          ("notAvailable", 255))
    )


_BootSequence1_Type.__name__ = "Integer32"
_BootSequence1_Object = MibTableColumn
bootSequence1 = _BootSequence1_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 3, 1, 7),
    _BootSequence1_Type()
)
bootSequence1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bootSequence1.setStatus("mandatory")


class _BootSequence2_Type(Integer32):
    """Custom type bootSequence2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              255)
        )
    )
    namedValues = NamedValues(
        *(("noneSpecified", 0),
          ("floppy", 1),
          ("cdrom", 2),
          ("hardDrive0", 3),
          ("hardDrive1", 4),
          ("hardDrive2", 5),
          ("hardDrive3", 6),
          ("networkBoot", 7),
          ("iscsi", 8),
          ("iscsiCritical", 9),
          ("hardDrive4", 10),
          ("usbModularFlashDrive", 11),
          ("hypervisor", 12),
          ("uefi", 13),
          ("legacyonly", 14),
          ("notAvailable", 255))
    )


_BootSequence2_Type.__name__ = "Integer32"
_BootSequence2_Object = MibTableColumn
bootSequence2 = _BootSequence2_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 3, 1, 8),
    _BootSequence2_Type()
)
bootSequence2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bootSequence2.setStatus("mandatory")


class _BootSequence3_Type(Integer32):
    """Custom type bootSequence3 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              255)
        )
    )
    namedValues = NamedValues(
        *(("noneSpecified", 0),
          ("floppy", 1),
          ("cdrom", 2),
          ("hardDrive0", 3),
          ("hardDrive1", 4),
          ("hardDrive2", 5),
          ("hardDrive3", 6),
          ("networkBoot", 7),
          ("iscsi", 8),
          ("iscsiCritical", 9),
          ("hardDrive4", 10),
          ("usbModularFlashDrive", 11),
          ("hypervisor", 12),
          ("uefi", 13),
          ("legacyonly", 14),
          ("notAvailable", 255))
    )


_BootSequence3_Type.__name__ = "Integer32"
_BootSequence3_Object = MibTableColumn
bootSequence3 = _BootSequence3_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 3, 1, 9),
    _BootSequence3_Type()
)
bootSequence3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bootSequence3.setStatus("mandatory")


class _BootSequence4_Type(Integer32):
    """Custom type bootSequence4 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              255)
        )
    )
    namedValues = NamedValues(
        *(("noneSpecified", 0),
          ("floppy", 1),
          ("cdrom", 2),
          ("hardDrive0", 3),
          ("hardDrive1", 4),
          ("hardDrive2", 5),
          ("hardDrive3", 6),
          ("networkBoot", 7),
          ("iscsi", 8),
          ("iscsiCritical", 9),
          ("hardDrive4", 10),
          ("usbModularFlashDrive", 11),
          ("hypervisor", 12),
          ("uefi", 13),
          ("legacyonly", 14),
          ("notAvailable", 255))
    )


_BootSequence4_Type.__name__ = "Integer32"
_BootSequence4_Object = MibTableColumn
bootSequence4 = _BootSequence4_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 3, 1, 10),
    _BootSequence4_Type()
)
bootSequence4.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bootSequence4.setStatus("mandatory")
_BladeRemoteControl_ObjectIdentity = ObjectIdentity
bladeRemoteControl = _BladeRemoteControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4)
)
_BladeRemoteControlTable_Object = MibTable
bladeRemoteControlTable = _BladeRemoteControlTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1)
)
if mibBuilder.loadTexts:
    bladeRemoteControlTable.setStatus("mandatory")
_BladeRemoteControlEntry_Object = MibTableRow
bladeRemoteControlEntry = _BladeRemoteControlEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1)
)
bladeRemoteControlEntry.setIndexNames(
    (0, "BLADE-MIB", "remoteControlIndex"),
)
if mibBuilder.loadTexts:
    bladeRemoteControlEntry.setStatus("mandatory")
_RemoteControlIndex_Type = Integer32
_RemoteControlIndex_Object = MibTableColumn
remoteControlIndex = _RemoteControlIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 1),
    _RemoteControlIndex_Type()
)
remoteControlIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    remoteControlIndex.setStatus("mandatory")


class _RemoteControlBladeId_Type(Integer32):
    """Custom type remoteControlBladeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_RemoteControlBladeId_Type.__name__ = "Integer32"
_RemoteControlBladeId_Object = MibTableColumn
remoteControlBladeId = _RemoteControlBladeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 2),
    _RemoteControlBladeId_Type()
)
remoteControlBladeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    remoteControlBladeId.setStatus("mandatory")


class _RemoteControlBladeExists_Type(Integer32):
    """Custom type remoteControlBladeExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_RemoteControlBladeExists_Type.__name__ = "Integer32"
_RemoteControlBladeExists_Object = MibTableColumn
remoteControlBladeExists = _RemoteControlBladeExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 3),
    _RemoteControlBladeExists_Type()
)
remoteControlBladeExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    remoteControlBladeExists.setStatus("mandatory")


class _RemoteControlBladePowerState_Type(Integer32):
    """Custom type remoteControlBladePowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("standby", 3),
          ("hibernate", 4),
          ("unknown", 255))
    )


_RemoteControlBladePowerState_Type.__name__ = "Integer32"
_RemoteControlBladePowerState_Object = MibTableColumn
remoteControlBladePowerState = _RemoteControlBladePowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 4),
    _RemoteControlBladePowerState_Type()
)
remoteControlBladePowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    remoteControlBladePowerState.setStatus("mandatory")


class _RemoteControlBladeHealthState_Type(Integer32):
    """Custom type remoteControlBladeHealthState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("good", 1),
          ("warning", 2),
          ("critical", 3),
          ("kernelMode", 4),
          ("discovering", 5),
          ("commError", 6),
          ("noPower", 7),
          ("flashing", 8),
          ("initFailure", 9),
          ("insufficientPower", 10),
          ("powerDenied", 11))
    )


_RemoteControlBladeHealthState_Type.__name__ = "Integer32"
_RemoteControlBladeHealthState_Object = MibTableColumn
remoteControlBladeHealthState = _RemoteControlBladeHealthState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 5),
    _RemoteControlBladeHealthState_Type()
)
remoteControlBladeHealthState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    remoteControlBladeHealthState.setStatus("mandatory")
_RemoteControlBladeName_Type = OctetString
_RemoteControlBladeName_Object = MibTableColumn
remoteControlBladeName = _RemoteControlBladeName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 6),
    _RemoteControlBladeName_Type()
)
remoteControlBladeName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    remoteControlBladeName.setStatus("mandatory")


class _RemotePowerControlEnable_Type(Integer32):
    """Custom type remotePowerControlEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RemotePowerControlEnable_Type.__name__ = "Integer32"
_RemotePowerControlEnable_Object = MibTableColumn
remotePowerControlEnable = _RemotePowerControlEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 7),
    _RemotePowerControlEnable_Type()
)
remotePowerControlEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remotePowerControlEnable.setStatus("mandatory")


class _RemoteMediaTrayControlEnable_Type(Integer32):
    """Custom type remoteMediaTrayControlEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RemoteMediaTrayControlEnable_Type.__name__ = "Integer32"
_RemoteMediaTrayControlEnable_Object = MibTableColumn
remoteMediaTrayControlEnable = _RemoteMediaTrayControlEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 8),
    _RemoteMediaTrayControlEnable_Type()
)
remoteMediaTrayControlEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remoteMediaTrayControlEnable.setStatus("mandatory")


class _RemoteKVMControlEnable_Type(Integer32):
    """Custom type remoteKVMControlEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RemoteKVMControlEnable_Type.__name__ = "Integer32"
_RemoteKVMControlEnable_Object = MibTableColumn
remoteKVMControlEnable = _RemoteKVMControlEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 9),
    _RemoteKVMControlEnable_Type()
)
remoteKVMControlEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remoteKVMControlEnable.setStatus("mandatory")


class _RemoteWakeOnLanControlEnable_Type(Integer32):
    """Custom type remoteWakeOnLanControlEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1),
          ("notApplicable", 255))
    )


_RemoteWakeOnLanControlEnable_Type.__name__ = "Integer32"
_RemoteWakeOnLanControlEnable_Object = MibTableColumn
remoteWakeOnLanControlEnable = _RemoteWakeOnLanControlEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 10),
    _RemoteWakeOnLanControlEnable_Type()
)
remoteWakeOnLanControlEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remoteWakeOnLanControlEnable.setStatus("mandatory")


class _RemoteMediaTraySwitchEnable_Type(Integer32):
    """Custom type remoteMediaTraySwitchEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RemoteMediaTraySwitchEnable_Type.__name__ = "Integer32"
_RemoteMediaTraySwitchEnable_Object = MibTableColumn
remoteMediaTraySwitchEnable = _RemoteMediaTraySwitchEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 11),
    _RemoteMediaTraySwitchEnable_Type()
)
remoteMediaTraySwitchEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remoteMediaTraySwitchEnable.setStatus("mandatory")
_BladePolicy_ObjectIdentity = ObjectIdentity
bladePolicy = _BladePolicy_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 2)
)


class _BladePolicyPowerControlEnable_Type(Integer32):
    """Custom type bladePolicyPowerControlEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_BladePolicyPowerControlEnable_Type.__name__ = "Integer32"
_BladePolicyPowerControlEnable_Object = MibScalar
bladePolicyPowerControlEnable = _BladePolicyPowerControlEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 2, 1),
    _BladePolicyPowerControlEnable_Type()
)
bladePolicyPowerControlEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladePolicyPowerControlEnable.setStatus("mandatory")


class _BladePolicyMediaTrayControlEnable_Type(Integer32):
    """Custom type bladePolicyMediaTrayControlEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_BladePolicyMediaTrayControlEnable_Type.__name__ = "Integer32"
_BladePolicyMediaTrayControlEnable_Object = MibScalar
bladePolicyMediaTrayControlEnable = _BladePolicyMediaTrayControlEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 2, 2),
    _BladePolicyMediaTrayControlEnable_Type()
)
bladePolicyMediaTrayControlEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladePolicyMediaTrayControlEnable.setStatus("mandatory")


class _BladePolicyKVMControlEnable_Type(Integer32):
    """Custom type bladePolicyKVMControlEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_BladePolicyKVMControlEnable_Type.__name__ = "Integer32"
_BladePolicyKVMControlEnable_Object = MibScalar
bladePolicyKVMControlEnable = _BladePolicyKVMControlEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 2, 3),
    _BladePolicyKVMControlEnable_Type()
)
bladePolicyKVMControlEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladePolicyKVMControlEnable.setStatus("mandatory")


class _BladePolicyWakeOnLanControlEnable_Type(Integer32):
    """Custom type bladePolicyWakeOnLanControlEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1),
          ("notApplicable", 255))
    )


_BladePolicyWakeOnLanControlEnable_Type.__name__ = "Integer32"
_BladePolicyWakeOnLanControlEnable_Object = MibScalar
bladePolicyWakeOnLanControlEnable = _BladePolicyWakeOnLanControlEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 2, 4),
    _BladePolicyWakeOnLanControlEnable_Type()
)
bladePolicyWakeOnLanControlEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladePolicyWakeOnLanControlEnable.setStatus("mandatory")


class _BladePolicyMediaTraySwitchEnable_Type(Integer32):
    """Custom type bladePolicyMediaTraySwitchEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_BladePolicyMediaTraySwitchEnable_Type.__name__ = "Integer32"
_BladePolicyMediaTraySwitchEnable_Object = MibScalar
bladePolicyMediaTraySwitchEnable = _BladePolicyMediaTraySwitchEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 2, 5),
    _BladePolicyMediaTraySwitchEnable_Type()
)
bladePolicyMediaTraySwitchEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladePolicyMediaTraySwitchEnable.setStatus("mandatory")


class _BladePolicyMultipleRemoteVideoEnable_Type(Integer32):
    """Custom type bladePolicyMultipleRemoteVideoEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_BladePolicyMultipleRemoteVideoEnable_Type.__name__ = "Integer32"
_BladePolicyMultipleRemoteVideoEnable_Object = MibScalar
bladePolicyMultipleRemoteVideoEnable = _BladePolicyMultipleRemoteVideoEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 2, 6),
    _BladePolicyMultipleRemoteVideoEnable_Type()
)
bladePolicyMultipleRemoteVideoEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladePolicyMultipleRemoteVideoEnable.setStatus("mandatory")


class _BladePolicyAutoPowerOn_Type(Integer32):
    """Custom type bladePolicyAutoPowerOn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("restore", 1),
          ("auto", 2),
          ("manual", 3))
    )


_BladePolicyAutoPowerOn_Type.__name__ = "Integer32"
_BladePolicyAutoPowerOn_Object = MibScalar
bladePolicyAutoPowerOn = _BladePolicyAutoPowerOn_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 2, 7),
    _BladePolicyAutoPowerOn_Type()
)
bladePolicyAutoPowerOn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladePolicyAutoPowerOn.setStatus("mandatory")


class _BladePolicyDisconnectionMode_Type(Integer32):
    """Custom type bladePolicyDisconnectionMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noDisconnection", 0),
          ("forceDisconnection", 1),
          ("accessRequest", 2))
    )


_BladePolicyDisconnectionMode_Type.__name__ = "Integer32"
_BladePolicyDisconnectionMode_Object = MibScalar
bladePolicyDisconnectionMode = _BladePolicyDisconnectionMode_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 2, 8),
    _BladePolicyDisconnectionMode_Type()
)
bladePolicyDisconnectionMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladePolicyDisconnectionMode.setStatus("mandatory")
_BladePolicySessionTimeOut_Type = Integer32
_BladePolicySessionTimeOut_Object = MibScalar
bladePolicySessionTimeOut = _BladePolicySessionTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 2, 9),
    _BladePolicySessionTimeOut_Type()
)
bladePolicySessionTimeOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladePolicySessionTimeOut.setStatus("mandatory")
_BladePolicyRequestTimeOut_Type = Integer32
_BladePolicyRequestTimeOut_Object = MibScalar
bladePolicyRequestTimeOut = _BladePolicyRequestTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 2, 10),
    _BladePolicyRequestTimeOut_Type()
)
bladePolicyRequestTimeOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladePolicyRequestTimeOut.setStatus("mandatory")
_BladePolicyRetryTimeOut_Type = Integer32
_BladePolicyRetryTimeOut_Object = MibScalar
bladePolicyRetryTimeOut = _BladePolicyRetryTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 2, 11),
    _BladePolicyRetryTimeOut_Type()
)
bladePolicyRetryTimeOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladePolicyRetryTimeOut.setStatus("mandatory")
_BladePolicySessionLostTimeOut_Type = Integer32
_BladePolicySessionLostTimeOut_Object = MibScalar
bladePolicySessionLostTimeOut = _BladePolicySessionLostTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 2, 12),
    _BladePolicySessionLostTimeOut_Type()
)
bladePolicySessionLostTimeOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladePolicySessionLostTimeOut.setStatus("mandatory")
_BladeMonitors_ObjectIdentity = ObjectIdentity
bladeMonitors = _BladeMonitors_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5)
)
_BladeSystemStatusTable_Object = MibTable
bladeSystemStatusTable = _BladeSystemStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1)
)
if mibBuilder.loadTexts:
    bladeSystemStatusTable.setStatus("mandatory")
_BladeSystemStatusEntry_Object = MibTableRow
bladeSystemStatusEntry = _BladeSystemStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1)
)
bladeSystemStatusEntry.setIndexNames(
    (0, "BLADE-MIB", "bladeStatusIndex"),
)
if mibBuilder.loadTexts:
    bladeSystemStatusEntry.setStatus("mandatory")
_BladeStatusIndex_Type = Integer32
_BladeStatusIndex_Object = MibTableColumn
bladeStatusIndex = _BladeStatusIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 1),
    _BladeStatusIndex_Type()
)
bladeStatusIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeStatusIndex.setStatus("mandatory")


class _BladeId_Type(Integer32):
    """Custom type bladeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_BladeId_Type.__name__ = "Integer32"
_BladeId_Object = MibTableColumn
bladeId = _BladeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 2),
    _BladeId_Type()
)
bladeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeId.setStatus("mandatory")


class _BladeExists_Type(Integer32):
    """Custom type bladeExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_BladeExists_Type.__name__ = "Integer32"
_BladeExists_Object = MibTableColumn
bladeExists = _BladeExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 3),
    _BladeExists_Type()
)
bladeExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExists.setStatus("mandatory")


class _BladePowerState_Type(Integer32):
    """Custom type bladePowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("standby", 3),
          ("hibernate", 4))
    )


_BladePowerState_Type.__name__ = "Integer32"
_BladePowerState_Object = MibTableColumn
bladePowerState = _BladePowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 4),
    _BladePowerState_Type()
)
bladePowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePowerState.setStatus("mandatory")


class _BladeHealthState_Type(Integer32):
    """Custom type bladeHealthState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("good", 1),
          ("warning", 2),
          ("critical", 3),
          ("kernelMode", 4),
          ("discovering", 5),
          ("commError", 6),
          ("noPower", 7),
          ("flashing", 8),
          ("initFailure", 9),
          ("insufficientPower", 10),
          ("powerDenied", 11))
    )


_BladeHealthState_Type.__name__ = "Integer32"
_BladeHealthState_Object = MibTableColumn
bladeHealthState = _BladeHealthState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 5),
    _BladeHealthState_Type()
)
bladeHealthState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHealthState.setStatus("mandatory")
_BladeName_Type = OctetString
_BladeName_Object = MibTableColumn
bladeName = _BladeName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 6),
    _BladeName_Type()
)
bladeName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeName.setStatus("mandatory")


class _BladeRemotePowerEnable_Type(Integer32):
    """Custom type bladeRemotePowerEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_BladeRemotePowerEnable_Type.__name__ = "Integer32"
_BladeRemotePowerEnable_Object = MibTableColumn
bladeRemotePowerEnable = _BladeRemotePowerEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 7),
    _BladeRemotePowerEnable_Type()
)
bladeRemotePowerEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeRemotePowerEnable.setStatus("mandatory")


class _BladeRemoteMediaTrayEnable_Type(Integer32):
    """Custom type bladeRemoteMediaTrayEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_BladeRemoteMediaTrayEnable_Type.__name__ = "Integer32"
_BladeRemoteMediaTrayEnable_Object = MibTableColumn
bladeRemoteMediaTrayEnable = _BladeRemoteMediaTrayEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 8),
    _BladeRemoteMediaTrayEnable_Type()
)
bladeRemoteMediaTrayEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeRemoteMediaTrayEnable.setStatus("mandatory")


class _BladeRemoteKVMEnable_Type(Integer32):
    """Custom type bladeRemoteKVMEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_BladeRemoteKVMEnable_Type.__name__ = "Integer32"
_BladeRemoteKVMEnable_Object = MibTableColumn
bladeRemoteKVMEnable = _BladeRemoteKVMEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 9),
    _BladeRemoteKVMEnable_Type()
)
bladeRemoteKVMEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeRemoteKVMEnable.setStatus("mandatory")


class _BladeConnectionType_Type(Integer32):
    """Custom type bladeConnectionType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("ethernet", 1),
          ("fiber", 2),
          ("serial", 3),
          ("opticalPassThrough", 4),
          ("infiniband", 5),
          ("iSCSI", 6))
    )


_BladeConnectionType_Type.__name__ = "Integer32"
_BladeConnectionType_Object = MibTableColumn
bladeConnectionType = _BladeConnectionType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 10),
    _BladeConnectionType_Type()
)
bladeConnectionType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeConnectionType.setStatus("mandatory")


class _BladeOwnsKVM_Type(Integer32):
    """Custom type bladeOwnsKVM based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_BladeOwnsKVM_Type.__name__ = "Integer32"
_BladeOwnsKVM_Object = MibTableColumn
bladeOwnsKVM = _BladeOwnsKVM_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 11),
    _BladeOwnsKVM_Type()
)
bladeOwnsKVM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeOwnsKVM.setStatus("mandatory")


class _BladeOwnsMediaTray_Type(Integer32):
    """Custom type bladeOwnsMediaTray based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_BladeOwnsMediaTray_Type.__name__ = "Integer32"
_BladeOwnsMediaTray_Object = MibTableColumn
bladeOwnsMediaTray = _BladeOwnsMediaTray_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 12),
    _BladeOwnsMediaTray_Type()
)
bladeOwnsMediaTray.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeOwnsMediaTray.setStatus("mandatory")


class _BladeRemoteWakeOnLanEnable_Type(Integer32):
    """Custom type bladeRemoteWakeOnLanEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1),
          ("notApplicable", 255))
    )


_BladeRemoteWakeOnLanEnable_Type.__name__ = "Integer32"
_BladeRemoteWakeOnLanEnable_Object = MibTableColumn
bladeRemoteWakeOnLanEnable = _BladeRemoteWakeOnLanEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 13),
    _BladeRemoteWakeOnLanEnable_Type()
)
bladeRemoteWakeOnLanEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeRemoteWakeOnLanEnable.setStatus("mandatory")


class _BladeServerExpansion_Type(Integer32):
    """Custom type bladeServerExpansion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_BladeServerExpansion_Type.__name__ = "Integer32"
_BladeServerExpansion_Object = MibTableColumn
bladeServerExpansion = _BladeServerExpansion_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 14),
    _BladeServerExpansion_Type()
)
bladeServerExpansion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeServerExpansion.setStatus("mandatory")
_BladeWidth_Type = Integer32
_BladeWidth_Object = MibTableColumn
bladeWidth = _BladeWidth_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 15),
    _BladeWidth_Type()
)
bladeWidth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeWidth.setStatus("mandatory")


class _BladeSupportCapacityOnDemand_Type(Integer32):
    """Custom type bladeSupportCapacityOnDemand based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_BladeSupportCapacityOnDemand_Type.__name__ = "Integer32"
_BladeSupportCapacityOnDemand_Object = MibTableColumn
bladeSupportCapacityOnDemand = _BladeSupportCapacityOnDemand_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 16),
    _BladeSupportCapacityOnDemand_Type()
)
bladeSupportCapacityOnDemand.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSupportCapacityOnDemand.setStatus("deprecated")


class _BladeServerExpansion2_Type(Integer32):
    """Custom type bladeServerExpansion2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_BladeServerExpansion2_Type.__name__ = "Integer32"
_BladeServerExpansion2_Object = MibTableColumn
bladeServerExpansion2 = _BladeServerExpansion2_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 17),
    _BladeServerExpansion2_Type()
)
bladeServerExpansion2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeServerExpansion2.setStatus("mandatory")


class _BladecKVMStatus_Type(Integer32):
    """Custom type bladecKVMStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("notPresent", 0),
          ("notReady", 1),
          ("ready", 2),
          ("active", 3),
          ("disabled", 4),
          ("notAvailable", 255))
    )


_BladecKVMStatus_Type.__name__ = "Integer32"
_BladecKVMStatus_Object = MibTableColumn
bladecKVMStatus = _BladecKVMStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 21),
    _BladecKVMStatus_Type()
)
bladecKVMStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladecKVMStatus.setStatus("mandatory")


class _BladeConnectionType2_Type(Integer32):
    """Custom type bladeConnectionType2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("ethernet", 1),
          ("fiber", 2),
          ("serial", 3),
          ("opticalPassThrough", 4),
          ("infiniband", 5),
          ("iSCSI", 6))
    )


_BladeConnectionType2_Type.__name__ = "Integer32"
_BladeConnectionType2_Object = MibTableColumn
bladeConnectionType2 = _BladeConnectionType2_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 22),
    _BladeConnectionType2_Type()
)
bladeConnectionType2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeConnectionType2.setStatus("mandatory")


class _BladeConnectionType3_Type(Integer32):
    """Custom type bladeConnectionType3 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("ethernet", 1),
          ("fiber", 2),
          ("serial", 3),
          ("opticalPassThrough", 4),
          ("infiniband", 5),
          ("iSCSI", 6))
    )


_BladeConnectionType3_Type.__name__ = "Integer32"
_BladeConnectionType3_Object = MibTableColumn
bladeConnectionType3 = _BladeConnectionType3_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 23),
    _BladeConnectionType3_Type()
)
bladeConnectionType3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeConnectionType3.setStatus("mandatory")


class _BladeConnectionType4_Type(Integer32):
    """Custom type bladeConnectionType4 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("ethernet", 1),
          ("fiber", 2),
          ("serial", 3),
          ("opticalPassThrough", 4),
          ("infiniband", 5),
          ("iSCSI", 6))
    )


_BladeConnectionType4_Type.__name__ = "Integer32"
_BladeConnectionType4_Object = MibTableColumn
bladeConnectionType4 = _BladeConnectionType4_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 24),
    _BladeConnectionType4_Type()
)
bladeConnectionType4.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeConnectionType4.setStatus("mandatory")


class _BladeConnectionType5_Type(Integer32):
    """Custom type bladeConnectionType5 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("ethernet", 1),
          ("fiber", 2),
          ("serial", 3),
          ("opticalPassThrough", 4),
          ("infiniband", 5),
          ("iSCSI", 6))
    )


_BladeConnectionType5_Type.__name__ = "Integer32"
_BladeConnectionType5_Object = MibTableColumn
bladeConnectionType5 = _BladeConnectionType5_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 25),
    _BladeConnectionType5_Type()
)
bladeConnectionType5.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeConnectionType5.setStatus("mandatory")


class _BladeHighSpeedConnectionType_Type(Integer32):
    """Custom type bladeHighSpeedConnectionType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("ethernet", 1),
          ("fiber", 2),
          ("serial", 3),
          ("opticalPassThrough", 4),
          ("infiniband", 5),
          ("iSCSI", 6),
          ("infinibandPassThrough", 7))
    )


_BladeHighSpeedConnectionType_Type.__name__ = "Integer32"
_BladeHighSpeedConnectionType_Object = MibTableColumn
bladeHighSpeedConnectionType = _BladeHighSpeedConnectionType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 41),
    _BladeHighSpeedConnectionType_Type()
)
bladeHighSpeedConnectionType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHighSpeedConnectionType.setStatus("mandatory")
_BladeIOCompatibility_Type = OctetString
_BladeIOCompatibility_Object = MibTableColumn
bladeIOCompatibility = _BladeIOCompatibility_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 51),
    _BladeIOCompatibility_Type()
)
bladeIOCompatibility.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeIOCompatibility.setStatus("mandatory")


class _BladeInventoryReady_Type(Integer32):
    """Custom type bladeInventoryReady based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("notReady", 0),
          ("ready", 1))
    )


_BladeInventoryReady_Type.__name__ = "Integer32"
_BladeInventoryReady_Object = MibTableColumn
bladeInventoryReady = _BladeInventoryReady_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 52),
    _BladeInventoryReady_Type()
)
bladeInventoryReady.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeInventoryReady.setStatus("mandatory")
_BladeHealthSummaryTable_Object = MibTable
bladeHealthSummaryTable = _BladeHealthSummaryTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 2)
)
if mibBuilder.loadTexts:
    bladeHealthSummaryTable.setStatus("mandatory")
_BladeHealthSummaryEntry_Object = MibTableRow
bladeHealthSummaryEntry = _BladeHealthSummaryEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 2, 1)
)
bladeHealthSummaryEntry.setIndexNames(
    (0, "BLADE-MIB", "bladeHealthSummaryIndex"),
)
if mibBuilder.loadTexts:
    bladeHealthSummaryEntry.setStatus("mandatory")
_BladeHealthSummaryIndex_Type = Integer32
_BladeHealthSummaryIndex_Object = MibTableColumn
bladeHealthSummaryIndex = _BladeHealthSummaryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 2, 1, 1),
    _BladeHealthSummaryIndex_Type()
)
bladeHealthSummaryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHealthSummaryIndex.setStatus("mandatory")


class _BladeHealthSummaryBladeId_Type(Integer32):
    """Custom type bladeHealthSummaryBladeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_BladeHealthSummaryBladeId_Type.__name__ = "Integer32"
_BladeHealthSummaryBladeId_Object = MibTableColumn
bladeHealthSummaryBladeId = _BladeHealthSummaryBladeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 2, 1, 2),
    _BladeHealthSummaryBladeId_Type()
)
bladeHealthSummaryBladeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHealthSummaryBladeId.setStatus("mandatory")
_BladeHealthSummarySeverity_Type = OctetString
_BladeHealthSummarySeverity_Object = MibTableColumn
bladeHealthSummarySeverity = _BladeHealthSummarySeverity_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 2, 1, 3),
    _BladeHealthSummarySeverity_Type()
)
bladeHealthSummarySeverity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHealthSummarySeverity.setStatus("mandatory")
_BladeHealthSummaryDescription_Type = OctetString
_BladeHealthSummaryDescription_Object = MibTableColumn
bladeHealthSummaryDescription = _BladeHealthSummaryDescription_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 2, 1, 4),
    _BladeHealthSummaryDescription_Type()
)
bladeHealthSummaryDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHealthSummaryDescription.setStatus("mandatory")
_BladeHealthSummaryDateTime_Type = OctetString
_BladeHealthSummaryDateTime_Object = MibTableColumn
bladeHealthSummaryDateTime = _BladeHealthSummaryDateTime_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 2, 1, 5),
    _BladeHealthSummaryDateTime_Type()
)
bladeHealthSummaryDateTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHealthSummaryDateTime.setStatus("mandatory")
_BladeTemperaturesTable_Object = MibTable
bladeTemperaturesTable = _BladeTemperaturesTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3)
)
if mibBuilder.loadTexts:
    bladeTemperaturesTable.setStatus("mandatory")
_BladeTemperaturesEntry_Object = MibTableRow
bladeTemperaturesEntry = _BladeTemperaturesEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1)
)
bladeTemperaturesEntry.setIndexNames(
    (0, "BLADE-MIB", "temperatureIndex"),
)
if mibBuilder.loadTexts:
    bladeTemperaturesEntry.setStatus("mandatory")
_TemperatureIndex_Type = Integer32
_TemperatureIndex_Object = MibTableColumn
temperatureIndex = _TemperatureIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 1),
    _TemperatureIndex_Type()
)
temperatureIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureIndex.setStatus("mandatory")


class _TemperatureBladeId_Type(Integer32):
    """Custom type temperatureBladeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_TemperatureBladeId_Type.__name__ = "Integer32"
_TemperatureBladeId_Object = MibTableColumn
temperatureBladeId = _TemperatureBladeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 2),
    _TemperatureBladeId_Type()
)
temperatureBladeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureBladeId.setStatus("mandatory")


class _TemperatureBladeExists_Type(Integer32):
    """Custom type temperatureBladeExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_TemperatureBladeExists_Type.__name__ = "Integer32"
_TemperatureBladeExists_Object = MibTableColumn
temperatureBladeExists = _TemperatureBladeExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 3),
    _TemperatureBladeExists_Type()
)
temperatureBladeExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureBladeExists.setStatus("mandatory")


class _TemperatureBladePowerState_Type(Integer32):
    """Custom type temperatureBladePowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("standby", 3),
          ("hibernate", 4))
    )


_TemperatureBladePowerState_Type.__name__ = "Integer32"
_TemperatureBladePowerState_Object = MibTableColumn
temperatureBladePowerState = _TemperatureBladePowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 4),
    _TemperatureBladePowerState_Type()
)
temperatureBladePowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureBladePowerState.setStatus("mandatory")
_TemperatureBladeName_Type = OctetString
_TemperatureBladeName_Object = MibTableColumn
temperatureBladeName = _TemperatureBladeName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 5),
    _TemperatureBladeName_Type()
)
temperatureBladeName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureBladeName.setStatus("mandatory")
_TemperatureCPU1_Type = OctetString
_TemperatureCPU1_Object = MibTableColumn
temperatureCPU1 = _TemperatureCPU1_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 6),
    _TemperatureCPU1_Type()
)
temperatureCPU1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureCPU1.setStatus("mandatory")
_TemperatureCPU2_Type = OctetString
_TemperatureCPU2_Object = MibTableColumn
temperatureCPU2 = _TemperatureCPU2_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 7),
    _TemperatureCPU2_Type()
)
temperatureCPU2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureCPU2.setStatus("mandatory")
_TemperatureCPU3_Type = OctetString
_TemperatureCPU3_Object = MibTableColumn
temperatureCPU3 = _TemperatureCPU3_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 8),
    _TemperatureCPU3_Type()
)
temperatureCPU3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureCPU3.setStatus("mandatory")
_TemperatureCPU4_Type = OctetString
_TemperatureCPU4_Object = MibTableColumn
temperatureCPU4 = _TemperatureCPU4_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 9),
    _TemperatureCPU4_Type()
)
temperatureCPU4.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureCPU4.setStatus("mandatory")
_TemperatureDASD1_Type = OctetString
_TemperatureDASD1_Object = MibTableColumn
temperatureDASD1 = _TemperatureDASD1_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 10),
    _TemperatureDASD1_Type()
)
temperatureDASD1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureDASD1.setStatus("mandatory")


class _BladeSensorTempCapability_Type(Integer32):
    """Custom type bladeSensorTempCapability based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_BladeSensorTempCapability_Type.__name__ = "Integer32"
_BladeSensorTempCapability_Object = MibTableColumn
bladeSensorTempCapability = _BladeSensorTempCapability_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 11),
    _BladeSensorTempCapability_Type()
)
bladeSensorTempCapability.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensorTempCapability.setStatus("mandatory")
_BladeSensor1Temp_Type = OctetString
_BladeSensor1Temp_Object = MibTableColumn
bladeSensor1Temp = _BladeSensor1Temp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 12),
    _BladeSensor1Temp_Type()
)
bladeSensor1Temp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor1Temp.setStatus("mandatory")
_BladeSensor2Temp_Type = OctetString
_BladeSensor2Temp_Object = MibTableColumn
bladeSensor2Temp = _BladeSensor2Temp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 13),
    _BladeSensor2Temp_Type()
)
bladeSensor2Temp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor2Temp.setStatus("mandatory")
_BladeSensor3Temp_Type = OctetString
_BladeSensor3Temp_Object = MibTableColumn
bladeSensor3Temp = _BladeSensor3Temp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 14),
    _BladeSensor3Temp_Type()
)
bladeSensor3Temp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor3Temp.setStatus("mandatory")
_BladeSensor4Temp_Type = OctetString
_BladeSensor4Temp_Object = MibTableColumn
bladeSensor4Temp = _BladeSensor4Temp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 15),
    _BladeSensor4Temp_Type()
)
bladeSensor4Temp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor4Temp.setStatus("mandatory")
_BladeSensor5Temp_Type = OctetString
_BladeSensor5Temp_Object = MibTableColumn
bladeSensor5Temp = _BladeSensor5Temp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 16),
    _BladeSensor5Temp_Type()
)
bladeSensor5Temp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor5Temp.setStatus("mandatory")
_BladeSensor6Temp_Type = OctetString
_BladeSensor6Temp_Object = MibTableColumn
bladeSensor6Temp = _BladeSensor6Temp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 17),
    _BladeSensor6Temp_Type()
)
bladeSensor6Temp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor6Temp.setStatus("mandatory")
_BladeSensor7Temp_Type = OctetString
_BladeSensor7Temp_Object = MibTableColumn
bladeSensor7Temp = _BladeSensor7Temp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 18),
    _BladeSensor7Temp_Type()
)
bladeSensor7Temp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor7Temp.setStatus("mandatory")
_BladeSensor8Temp_Type = OctetString
_BladeSensor8Temp_Object = MibTableColumn
bladeSensor8Temp = _BladeSensor8Temp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 19),
    _BladeSensor8Temp_Type()
)
bladeSensor8Temp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor8Temp.setStatus("mandatory")
_BladeSensor9Temp_Type = OctetString
_BladeSensor9Temp_Object = MibTableColumn
bladeSensor9Temp = _BladeSensor9Temp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 20),
    _BladeSensor9Temp_Type()
)
bladeSensor9Temp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor9Temp.setStatus("mandatory")
_BladeTemperatureThresholdsTable_Object = MibTable
bladeTemperatureThresholdsTable = _BladeTemperatureThresholdsTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4)
)
if mibBuilder.loadTexts:
    bladeTemperatureThresholdsTable.setStatus("mandatory")
_BladeTemperatureThresholdsEntry_Object = MibTableRow
bladeTemperatureThresholdsEntry = _BladeTemperatureThresholdsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1)
)
bladeTemperatureThresholdsEntry.setIndexNames(
    (0, "BLADE-MIB", "temperatureThresholdIndex"),
)
if mibBuilder.loadTexts:
    bladeTemperatureThresholdsEntry.setStatus("mandatory")
_TemperatureThresholdIndex_Type = Integer32
_TemperatureThresholdIndex_Object = MibTableColumn
temperatureThresholdIndex = _TemperatureThresholdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 1),
    _TemperatureThresholdIndex_Type()
)
temperatureThresholdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureThresholdIndex.setStatus("mandatory")


class _TemperatureThresholdBladeId_Type(Integer32):
    """Custom type temperatureThresholdBladeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_TemperatureThresholdBladeId_Type.__name__ = "Integer32"
_TemperatureThresholdBladeId_Object = MibTableColumn
temperatureThresholdBladeId = _TemperatureThresholdBladeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 2),
    _TemperatureThresholdBladeId_Type()
)
temperatureThresholdBladeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureThresholdBladeId.setStatus("mandatory")


class _TemperatureThresholdBladeExists_Type(Integer32):
    """Custom type temperatureThresholdBladeExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_TemperatureThresholdBladeExists_Type.__name__ = "Integer32"
_TemperatureThresholdBladeExists_Object = MibTableColumn
temperatureThresholdBladeExists = _TemperatureThresholdBladeExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 3),
    _TemperatureThresholdBladeExists_Type()
)
temperatureThresholdBladeExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureThresholdBladeExists.setStatus("mandatory")


class _TemperatureThresholdBladePowerState_Type(Integer32):
    """Custom type temperatureThresholdBladePowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("standby", 3),
          ("hibernate", 4))
    )


_TemperatureThresholdBladePowerState_Type.__name__ = "Integer32"
_TemperatureThresholdBladePowerState_Object = MibTableColumn
temperatureThresholdBladePowerState = _TemperatureThresholdBladePowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 4),
    _TemperatureThresholdBladePowerState_Type()
)
temperatureThresholdBladePowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureThresholdBladePowerState.setStatus("mandatory")
_TemperatureThresholdBladeName_Type = OctetString
_TemperatureThresholdBladeName_Object = MibTableColumn
temperatureThresholdBladeName = _TemperatureThresholdBladeName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 5),
    _TemperatureThresholdBladeName_Type()
)
temperatureThresholdBladeName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureThresholdBladeName.setStatus("mandatory")
_TemperatureCPU1HardShutdown_Type = OctetString
_TemperatureCPU1HardShutdown_Object = MibTableColumn
temperatureCPU1HardShutdown = _TemperatureCPU1HardShutdown_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 6),
    _TemperatureCPU1HardShutdown_Type()
)
temperatureCPU1HardShutdown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureCPU1HardShutdown.setStatus("mandatory")
_TemperatureCPU1Warning_Type = OctetString
_TemperatureCPU1Warning_Object = MibTableColumn
temperatureCPU1Warning = _TemperatureCPU1Warning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 7),
    _TemperatureCPU1Warning_Type()
)
temperatureCPU1Warning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureCPU1Warning.setStatus("mandatory")
_TemperatureCPU1WarningReset_Type = OctetString
_TemperatureCPU1WarningReset_Object = MibTableColumn
temperatureCPU1WarningReset = _TemperatureCPU1WarningReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 8),
    _TemperatureCPU1WarningReset_Type()
)
temperatureCPU1WarningReset.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureCPU1WarningReset.setStatus("mandatory")
_TemperatureCPU2HardShutdown_Type = OctetString
_TemperatureCPU2HardShutdown_Object = MibTableColumn
temperatureCPU2HardShutdown = _TemperatureCPU2HardShutdown_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 9),
    _TemperatureCPU2HardShutdown_Type()
)
temperatureCPU2HardShutdown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureCPU2HardShutdown.setStatus("mandatory")
_TemperatureCPU2Warning_Type = OctetString
_TemperatureCPU2Warning_Object = MibTableColumn
temperatureCPU2Warning = _TemperatureCPU2Warning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 10),
    _TemperatureCPU2Warning_Type()
)
temperatureCPU2Warning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureCPU2Warning.setStatus("mandatory")
_TemperatureCPU2WarningReset_Type = OctetString
_TemperatureCPU2WarningReset_Object = MibTableColumn
temperatureCPU2WarningReset = _TemperatureCPU2WarningReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 11),
    _TemperatureCPU2WarningReset_Type()
)
temperatureCPU2WarningReset.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureCPU2WarningReset.setStatus("mandatory")
_TemperatureCPU3HardShutdown_Type = OctetString
_TemperatureCPU3HardShutdown_Object = MibTableColumn
temperatureCPU3HardShutdown = _TemperatureCPU3HardShutdown_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 12),
    _TemperatureCPU3HardShutdown_Type()
)
temperatureCPU3HardShutdown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureCPU3HardShutdown.setStatus("mandatory")
_TemperatureCPU3Warning_Type = OctetString
_TemperatureCPU3Warning_Object = MibTableColumn
temperatureCPU3Warning = _TemperatureCPU3Warning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 13),
    _TemperatureCPU3Warning_Type()
)
temperatureCPU3Warning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureCPU3Warning.setStatus("mandatory")
_TemperatureCPU3WarningReset_Type = OctetString
_TemperatureCPU3WarningReset_Object = MibTableColumn
temperatureCPU3WarningReset = _TemperatureCPU3WarningReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 14),
    _TemperatureCPU3WarningReset_Type()
)
temperatureCPU3WarningReset.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureCPU3WarningReset.setStatus("mandatory")
_TemperatureCPU4HardShutdown_Type = OctetString
_TemperatureCPU4HardShutdown_Object = MibTableColumn
temperatureCPU4HardShutdown = _TemperatureCPU4HardShutdown_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 15),
    _TemperatureCPU4HardShutdown_Type()
)
temperatureCPU4HardShutdown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureCPU4HardShutdown.setStatus("mandatory")
_TemperatureCPU4Warning_Type = OctetString
_TemperatureCPU4Warning_Object = MibTableColumn
temperatureCPU4Warning = _TemperatureCPU4Warning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 16),
    _TemperatureCPU4Warning_Type()
)
temperatureCPU4Warning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureCPU4Warning.setStatus("mandatory")
_TemperatureCPU4WarningReset_Type = OctetString
_TemperatureCPU4WarningReset_Object = MibTableColumn
temperatureCPU4WarningReset = _TemperatureCPU4WarningReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 17),
    _TemperatureCPU4WarningReset_Type()
)
temperatureCPU4WarningReset.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureCPU4WarningReset.setStatus("mandatory")
_TemperatureDASD1HardShutdown_Type = OctetString
_TemperatureDASD1HardShutdown_Object = MibTableColumn
temperatureDASD1HardShutdown = _TemperatureDASD1HardShutdown_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 18),
    _TemperatureDASD1HardShutdown_Type()
)
temperatureDASD1HardShutdown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureDASD1HardShutdown.setStatus("mandatory")
_TemperatureDASD1Warning_Type = OctetString
_TemperatureDASD1Warning_Object = MibTableColumn
temperatureDASD1Warning = _TemperatureDASD1Warning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 19),
    _TemperatureDASD1Warning_Type()
)
temperatureDASD1Warning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureDASD1Warning.setStatus("mandatory")
_TemperatureDASD1WarningReset_Type = OctetString
_TemperatureDASD1WarningReset_Object = MibTableColumn
temperatureDASD1WarningReset = _TemperatureDASD1WarningReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 20),
    _TemperatureDASD1WarningReset_Type()
)
temperatureDASD1WarningReset.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureDASD1WarningReset.setStatus("mandatory")


class _BladeTempThresholdSensorCapability_Type(Integer32):
    """Custom type bladeTempThresholdSensorCapability based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_BladeTempThresholdSensorCapability_Type.__name__ = "Integer32"
_BladeTempThresholdSensorCapability_Object = MibTableColumn
bladeTempThresholdSensorCapability = _BladeTempThresholdSensorCapability_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 21),
    _BladeTempThresholdSensorCapability_Type()
)
bladeTempThresholdSensorCapability.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeTempThresholdSensorCapability.setStatus("mandatory")
_TemperatureSensor1HardShutdown_Type = OctetString
_TemperatureSensor1HardShutdown_Object = MibTableColumn
temperatureSensor1HardShutdown = _TemperatureSensor1HardShutdown_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 22),
    _TemperatureSensor1HardShutdown_Type()
)
temperatureSensor1HardShutdown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor1HardShutdown.setStatus("mandatory")
_TemperatureSensor1Warning_Type = OctetString
_TemperatureSensor1Warning_Object = MibTableColumn
temperatureSensor1Warning = _TemperatureSensor1Warning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 23),
    _TemperatureSensor1Warning_Type()
)
temperatureSensor1Warning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor1Warning.setStatus("mandatory")
_TemperatureSensor1WarningReset_Type = OctetString
_TemperatureSensor1WarningReset_Object = MibTableColumn
temperatureSensor1WarningReset = _TemperatureSensor1WarningReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 24),
    _TemperatureSensor1WarningReset_Type()
)
temperatureSensor1WarningReset.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor1WarningReset.setStatus("mandatory")
_TemperatureSensor2HardShutdown_Type = OctetString
_TemperatureSensor2HardShutdown_Object = MibTableColumn
temperatureSensor2HardShutdown = _TemperatureSensor2HardShutdown_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 25),
    _TemperatureSensor2HardShutdown_Type()
)
temperatureSensor2HardShutdown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor2HardShutdown.setStatus("mandatory")
_TemperatureSensor2Warning_Type = OctetString
_TemperatureSensor2Warning_Object = MibTableColumn
temperatureSensor2Warning = _TemperatureSensor2Warning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 26),
    _TemperatureSensor2Warning_Type()
)
temperatureSensor2Warning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor2Warning.setStatus("mandatory")
_TemperatureSensor2WarningReset_Type = OctetString
_TemperatureSensor2WarningReset_Object = MibTableColumn
temperatureSensor2WarningReset = _TemperatureSensor2WarningReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 27),
    _TemperatureSensor2WarningReset_Type()
)
temperatureSensor2WarningReset.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor2WarningReset.setStatus("mandatory")
_TemperatureSensor3HardShutdown_Type = OctetString
_TemperatureSensor3HardShutdown_Object = MibTableColumn
temperatureSensor3HardShutdown = _TemperatureSensor3HardShutdown_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 28),
    _TemperatureSensor3HardShutdown_Type()
)
temperatureSensor3HardShutdown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor3HardShutdown.setStatus("mandatory")
_TemperatureSensor3Warning_Type = OctetString
_TemperatureSensor3Warning_Object = MibTableColumn
temperatureSensor3Warning = _TemperatureSensor3Warning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 29),
    _TemperatureSensor3Warning_Type()
)
temperatureSensor3Warning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor3Warning.setStatus("mandatory")
_TemperatureSensor3WarningReset_Type = OctetString
_TemperatureSensor3WarningReset_Object = MibTableColumn
temperatureSensor3WarningReset = _TemperatureSensor3WarningReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 30),
    _TemperatureSensor3WarningReset_Type()
)
temperatureSensor3WarningReset.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor3WarningReset.setStatus("mandatory")
_TemperatureSensor4HardShutdown_Type = OctetString
_TemperatureSensor4HardShutdown_Object = MibTableColumn
temperatureSensor4HardShutdown = _TemperatureSensor4HardShutdown_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 31),
    _TemperatureSensor4HardShutdown_Type()
)
temperatureSensor4HardShutdown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor4HardShutdown.setStatus("mandatory")
_TemperatureSensor4Warning_Type = OctetString
_TemperatureSensor4Warning_Object = MibTableColumn
temperatureSensor4Warning = _TemperatureSensor4Warning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 32),
    _TemperatureSensor4Warning_Type()
)
temperatureSensor4Warning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor4Warning.setStatus("mandatory")
_TemperatureSensor4WarningReset_Type = OctetString
_TemperatureSensor4WarningReset_Object = MibTableColumn
temperatureSensor4WarningReset = _TemperatureSensor4WarningReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 33),
    _TemperatureSensor4WarningReset_Type()
)
temperatureSensor4WarningReset.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor4WarningReset.setStatus("mandatory")
_TemperatureSensor5HardShutdown_Type = OctetString
_TemperatureSensor5HardShutdown_Object = MibTableColumn
temperatureSensor5HardShutdown = _TemperatureSensor5HardShutdown_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 34),
    _TemperatureSensor5HardShutdown_Type()
)
temperatureSensor5HardShutdown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor5HardShutdown.setStatus("mandatory")
_TemperatureSensor5Warning_Type = OctetString
_TemperatureSensor5Warning_Object = MibTableColumn
temperatureSensor5Warning = _TemperatureSensor5Warning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 35),
    _TemperatureSensor5Warning_Type()
)
temperatureSensor5Warning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor5Warning.setStatus("mandatory")
_TemperatureSensor5WarningReset_Type = OctetString
_TemperatureSensor5WarningReset_Object = MibTableColumn
temperatureSensor5WarningReset = _TemperatureSensor5WarningReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 36),
    _TemperatureSensor5WarningReset_Type()
)
temperatureSensor5WarningReset.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor5WarningReset.setStatus("mandatory")
_TemperatureSensor6HardShutdown_Type = OctetString
_TemperatureSensor6HardShutdown_Object = MibTableColumn
temperatureSensor6HardShutdown = _TemperatureSensor6HardShutdown_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 37),
    _TemperatureSensor6HardShutdown_Type()
)
temperatureSensor6HardShutdown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor6HardShutdown.setStatus("mandatory")
_TemperatureSensor6Warning_Type = OctetString
_TemperatureSensor6Warning_Object = MibTableColumn
temperatureSensor6Warning = _TemperatureSensor6Warning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 38),
    _TemperatureSensor6Warning_Type()
)
temperatureSensor6Warning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor6Warning.setStatus("mandatory")
_TemperatureSensor6WarningReset_Type = OctetString
_TemperatureSensor6WarningReset_Object = MibTableColumn
temperatureSensor6WarningReset = _TemperatureSensor6WarningReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 39),
    _TemperatureSensor6WarningReset_Type()
)
temperatureSensor6WarningReset.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor6WarningReset.setStatus("mandatory")
_TemperatureSensor7HardShutdown_Type = OctetString
_TemperatureSensor7HardShutdown_Object = MibTableColumn
temperatureSensor7HardShutdown = _TemperatureSensor7HardShutdown_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 40),
    _TemperatureSensor7HardShutdown_Type()
)
temperatureSensor7HardShutdown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor7HardShutdown.setStatus("mandatory")
_TemperatureSensor7Warning_Type = OctetString
_TemperatureSensor7Warning_Object = MibTableColumn
temperatureSensor7Warning = _TemperatureSensor7Warning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 41),
    _TemperatureSensor7Warning_Type()
)
temperatureSensor7Warning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor7Warning.setStatus("mandatory")
_TemperatureSensor7WarningReset_Type = OctetString
_TemperatureSensor7WarningReset_Object = MibTableColumn
temperatureSensor7WarningReset = _TemperatureSensor7WarningReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 42),
    _TemperatureSensor7WarningReset_Type()
)
temperatureSensor7WarningReset.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor7WarningReset.setStatus("mandatory")
_TemperatureSensor8HardShutdown_Type = OctetString
_TemperatureSensor8HardShutdown_Object = MibTableColumn
temperatureSensor8HardShutdown = _TemperatureSensor8HardShutdown_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 43),
    _TemperatureSensor8HardShutdown_Type()
)
temperatureSensor8HardShutdown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor8HardShutdown.setStatus("mandatory")
_TemperatureSensor8Warning_Type = OctetString
_TemperatureSensor8Warning_Object = MibTableColumn
temperatureSensor8Warning = _TemperatureSensor8Warning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 44),
    _TemperatureSensor8Warning_Type()
)
temperatureSensor8Warning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor8Warning.setStatus("mandatory")
_TemperatureSensor8WarningReset_Type = OctetString
_TemperatureSensor8WarningReset_Object = MibTableColumn
temperatureSensor8WarningReset = _TemperatureSensor8WarningReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 45),
    _TemperatureSensor8WarningReset_Type()
)
temperatureSensor8WarningReset.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor8WarningReset.setStatus("mandatory")
_TemperatureSensor9HardShutdown_Type = OctetString
_TemperatureSensor9HardShutdown_Object = MibTableColumn
temperatureSensor9HardShutdown = _TemperatureSensor9HardShutdown_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 46),
    _TemperatureSensor9HardShutdown_Type()
)
temperatureSensor9HardShutdown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor9HardShutdown.setStatus("mandatory")
_TemperatureSensor9Warning_Type = OctetString
_TemperatureSensor9Warning_Object = MibTableColumn
temperatureSensor9Warning = _TemperatureSensor9Warning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 47),
    _TemperatureSensor9Warning_Type()
)
temperatureSensor9Warning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor9Warning.setStatus("mandatory")
_TemperatureSensor9WarningReset_Type = OctetString
_TemperatureSensor9WarningReset_Object = MibTableColumn
temperatureSensor9WarningReset = _TemperatureSensor9WarningReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 48),
    _TemperatureSensor9WarningReset_Type()
)
temperatureSensor9WarningReset.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor9WarningReset.setStatus("mandatory")
_BladeVoltagesTable_Object = MibTable
bladeVoltagesTable = _BladeVoltagesTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5)
)
if mibBuilder.loadTexts:
    bladeVoltagesTable.setStatus("mandatory")
_BladeVoltagesEntry_Object = MibTableRow
bladeVoltagesEntry = _BladeVoltagesEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1)
)
bladeVoltagesEntry.setIndexNames(
    (0, "BLADE-MIB", "voltageIndex"),
)
if mibBuilder.loadTexts:
    bladeVoltagesEntry.setStatus("mandatory")
_VoltageIndex_Type = Integer32
_VoltageIndex_Object = MibTableColumn
voltageIndex = _VoltageIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 1),
    _VoltageIndex_Type()
)
voltageIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voltageIndex.setStatus("mandatory")


class _VoltageBladeId_Type(Integer32):
    """Custom type voltageBladeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_VoltageBladeId_Type.__name__ = "Integer32"
_VoltageBladeId_Object = MibTableColumn
voltageBladeId = _VoltageBladeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 2),
    _VoltageBladeId_Type()
)
voltageBladeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voltageBladeId.setStatus("mandatory")


class _VoltageBladeExists_Type(Integer32):
    """Custom type voltageBladeExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_VoltageBladeExists_Type.__name__ = "Integer32"
_VoltageBladeExists_Object = MibTableColumn
voltageBladeExists = _VoltageBladeExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 3),
    _VoltageBladeExists_Type()
)
voltageBladeExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voltageBladeExists.setStatus("mandatory")


class _VoltageBladePowerState_Type(Integer32):
    """Custom type voltageBladePowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("standby", 3),
          ("hibernate", 4))
    )


_VoltageBladePowerState_Type.__name__ = "Integer32"
_VoltageBladePowerState_Object = MibTableColumn
voltageBladePowerState = _VoltageBladePowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 4),
    _VoltageBladePowerState_Type()
)
voltageBladePowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voltageBladePowerState.setStatus("mandatory")
_VoltageBladeName_Type = OctetString
_VoltageBladeName_Object = MibTableColumn
voltageBladeName = _VoltageBladeName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 5),
    _VoltageBladeName_Type()
)
voltageBladeName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voltageBladeName.setStatus("mandatory")
_BladePlus5Volt_Type = OctetString
_BladePlus5Volt_Object = MibTableColumn
bladePlus5Volt = _BladePlus5Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 6),
    _BladePlus5Volt_Type()
)
bladePlus5Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePlus5Volt.setStatus("mandatory")
_BladePlus3pt3Volt_Type = OctetString
_BladePlus3pt3Volt_Object = MibTableColumn
bladePlus3pt3Volt = _BladePlus3pt3Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 7),
    _BladePlus3pt3Volt_Type()
)
bladePlus3pt3Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePlus3pt3Volt.setStatus("mandatory")
_BladePlus12Volt_Type = OctetString
_BladePlus12Volt_Object = MibTableColumn
bladePlus12Volt = _BladePlus12Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 8),
    _BladePlus12Volt_Type()
)
bladePlus12Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePlus12Volt.setStatus("mandatory")
_BladePlus2pt5Volt_Type = OctetString
_BladePlus2pt5Volt_Object = MibTableColumn
bladePlus2pt5Volt = _BladePlus2pt5Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 10),
    _BladePlus2pt5Volt_Type()
)
bladePlus2pt5Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePlus2pt5Volt.setStatus("mandatory")
_BladePlus1pt5Volt_Type = OctetString
_BladePlus1pt5Volt_Object = MibTableColumn
bladePlus1pt5Volt = _BladePlus1pt5Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 11),
    _BladePlus1pt5Volt_Type()
)
bladePlus1pt5Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePlus1pt5Volt.setStatus("mandatory")
_BladePlus1pt25Volt_Type = OctetString
_BladePlus1pt25Volt_Object = MibTableColumn
bladePlus1pt25Volt = _BladePlus1pt25Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 12),
    _BladePlus1pt25Volt_Type()
)
bladePlus1pt25Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePlus1pt25Volt.setStatus("mandatory")
_BladeVRM1Volt_Type = OctetString
_BladeVRM1Volt_Object = MibTableColumn
bladeVRM1Volt = _BladeVRM1Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 13),
    _BladeVRM1Volt_Type()
)
bladeVRM1Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeVRM1Volt.setStatus("mandatory")


class _BladeSensorVoltCapability_Type(Integer32):
    """Custom type bladeSensorVoltCapability based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_BladeSensorVoltCapability_Type.__name__ = "Integer32"
_BladeSensorVoltCapability_Object = MibTableColumn
bladeSensorVoltCapability = _BladeSensorVoltCapability_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 14),
    _BladeSensorVoltCapability_Type()
)
bladeSensorVoltCapability.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensorVoltCapability.setStatus("mandatory")
_BladeSensor1Volt_Type = OctetString
_BladeSensor1Volt_Object = MibTableColumn
bladeSensor1Volt = _BladeSensor1Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 15),
    _BladeSensor1Volt_Type()
)
bladeSensor1Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor1Volt.setStatus("mandatory")
_BladeSensor2Volt_Type = OctetString
_BladeSensor2Volt_Object = MibTableColumn
bladeSensor2Volt = _BladeSensor2Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 16),
    _BladeSensor2Volt_Type()
)
bladeSensor2Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor2Volt.setStatus("mandatory")
_BladeSensor3Volt_Type = OctetString
_BladeSensor3Volt_Object = MibTableColumn
bladeSensor3Volt = _BladeSensor3Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 17),
    _BladeSensor3Volt_Type()
)
bladeSensor3Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor3Volt.setStatus("mandatory")
_BladeSensor4Volt_Type = OctetString
_BladeSensor4Volt_Object = MibTableColumn
bladeSensor4Volt = _BladeSensor4Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 18),
    _BladeSensor4Volt_Type()
)
bladeSensor4Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor4Volt.setStatus("mandatory")
_BladeSensor5Volt_Type = OctetString
_BladeSensor5Volt_Object = MibTableColumn
bladeSensor5Volt = _BladeSensor5Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 19),
    _BladeSensor5Volt_Type()
)
bladeSensor5Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor5Volt.setStatus("mandatory")
_BladeSensor6Volt_Type = OctetString
_BladeSensor6Volt_Object = MibTableColumn
bladeSensor6Volt = _BladeSensor6Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 20),
    _BladeSensor6Volt_Type()
)
bladeSensor6Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor6Volt.setStatus("mandatory")
_BladeSensor7Volt_Type = OctetString
_BladeSensor7Volt_Object = MibTableColumn
bladeSensor7Volt = _BladeSensor7Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 21),
    _BladeSensor7Volt_Type()
)
bladeSensor7Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor7Volt.setStatus("mandatory")
_BladeSensor8Volt_Type = OctetString
_BladeSensor8Volt_Object = MibTableColumn
bladeSensor8Volt = _BladeSensor8Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 22),
    _BladeSensor8Volt_Type()
)
bladeSensor8Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor8Volt.setStatus("mandatory")
_BladeSensor9Volt_Type = OctetString
_BladeSensor9Volt_Object = MibTableColumn
bladeSensor9Volt = _BladeSensor9Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 23),
    _BladeSensor9Volt_Type()
)
bladeSensor9Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor9Volt.setStatus("mandatory")
_BladeSensor10Volt_Type = OctetString
_BladeSensor10Volt_Object = MibTableColumn
bladeSensor10Volt = _BladeSensor10Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 24),
    _BladeSensor10Volt_Type()
)
bladeSensor10Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor10Volt.setStatus("mandatory")
_BladeSensor11Volt_Type = OctetString
_BladeSensor11Volt_Object = MibTableColumn
bladeSensor11Volt = _BladeSensor11Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 25),
    _BladeSensor11Volt_Type()
)
bladeSensor11Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor11Volt.setStatus("mandatory")
_BladeSensor12Volt_Type = OctetString
_BladeSensor12Volt_Object = MibTableColumn
bladeSensor12Volt = _BladeSensor12Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 26),
    _BladeSensor12Volt_Type()
)
bladeSensor12Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor12Volt.setStatus("mandatory")
_BladeSensor13Volt_Type = OctetString
_BladeSensor13Volt_Object = MibTableColumn
bladeSensor13Volt = _BladeSensor13Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 27),
    _BladeSensor13Volt_Type()
)
bladeSensor13Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor13Volt.setStatus("mandatory")
_BladeSensor14Volt_Type = OctetString
_BladeSensor14Volt_Object = MibTableColumn
bladeSensor14Volt = _BladeSensor14Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 28),
    _BladeSensor14Volt_Type()
)
bladeSensor14Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor14Volt.setStatus("mandatory")
_BladeSensor15Volt_Type = OctetString
_BladeSensor15Volt_Object = MibTableColumn
bladeSensor15Volt = _BladeSensor15Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 29),
    _BladeSensor15Volt_Type()
)
bladeSensor15Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor15Volt.setStatus("mandatory")
_BladeSensor16Volt_Type = OctetString
_BladeSensor16Volt_Object = MibTableColumn
bladeSensor16Volt = _BladeSensor16Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 30),
    _BladeSensor16Volt_Type()
)
bladeSensor16Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor16Volt.setStatus("mandatory")
_BladeSensor17Volt_Type = OctetString
_BladeSensor17Volt_Object = MibTableColumn
bladeSensor17Volt = _BladeSensor17Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 31),
    _BladeSensor17Volt_Type()
)
bladeSensor17Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor17Volt.setStatus("mandatory")
_BladeSensor18Volt_Type = OctetString
_BladeSensor18Volt_Object = MibTableColumn
bladeSensor18Volt = _BladeSensor18Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 32),
    _BladeSensor18Volt_Type()
)
bladeSensor18Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor18Volt.setStatus("mandatory")
_BladeSensor19Volt_Type = OctetString
_BladeSensor19Volt_Object = MibTableColumn
bladeSensor19Volt = _BladeSensor19Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 33),
    _BladeSensor19Volt_Type()
)
bladeSensor19Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor19Volt.setStatus("mandatory")
_BladeSensor20Volt_Type = OctetString
_BladeSensor20Volt_Object = MibTableColumn
bladeSensor20Volt = _BladeSensor20Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 34),
    _BladeSensor20Volt_Type()
)
bladeSensor20Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor20Volt.setStatus("mandatory")
_BladeSensor21Volt_Type = OctetString
_BladeSensor21Volt_Object = MibTableColumn
bladeSensor21Volt = _BladeSensor21Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 35),
    _BladeSensor21Volt_Type()
)
bladeSensor21Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor21Volt.setStatus("mandatory")
_BladeSensor22Volt_Type = OctetString
_BladeSensor22Volt_Object = MibTableColumn
bladeSensor22Volt = _BladeSensor22Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 36),
    _BladeSensor22Volt_Type()
)
bladeSensor22Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor22Volt.setStatus("mandatory")
_BladeSensor23Volt_Type = OctetString
_BladeSensor23Volt_Object = MibTableColumn
bladeSensor23Volt = _BladeSensor23Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 37),
    _BladeSensor23Volt_Type()
)
bladeSensor23Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor23Volt.setStatus("mandatory")
_BladeSensor24Volt_Type = OctetString
_BladeSensor24Volt_Object = MibTableColumn
bladeSensor24Volt = _BladeSensor24Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 38),
    _BladeSensor24Volt_Type()
)
bladeSensor24Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor24Volt.setStatus("mandatory")
_BladeSensor25Volt_Type = OctetString
_BladeSensor25Volt_Object = MibTableColumn
bladeSensor25Volt = _BladeSensor25Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 39),
    _BladeSensor25Volt_Type()
)
bladeSensor25Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor25Volt.setStatus("mandatory")
_BladeSensor26Volt_Type = OctetString
_BladeSensor26Volt_Object = MibTableColumn
bladeSensor26Volt = _BladeSensor26Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 40),
    _BladeSensor26Volt_Type()
)
bladeSensor26Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor26Volt.setStatus("mandatory")
_BladeSensor27Volt_Type = OctetString
_BladeSensor27Volt_Object = MibTableColumn
bladeSensor27Volt = _BladeSensor27Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 41),
    _BladeSensor27Volt_Type()
)
bladeSensor27Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor27Volt.setStatus("mandatory")
_BladeSensor28Volt_Type = OctetString
_BladeSensor28Volt_Object = MibTableColumn
bladeSensor28Volt = _BladeSensor28Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 42),
    _BladeSensor28Volt_Type()
)
bladeSensor28Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor28Volt.setStatus("mandatory")
_BladeSensor29Volt_Type = OctetString
_BladeSensor29Volt_Object = MibTableColumn
bladeSensor29Volt = _BladeSensor29Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 43),
    _BladeSensor29Volt_Type()
)
bladeSensor29Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor29Volt.setStatus("mandatory")
_BladeSensor30Volt_Type = OctetString
_BladeSensor30Volt_Object = MibTableColumn
bladeSensor30Volt = _BladeSensor30Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 44),
    _BladeSensor30Volt_Type()
)
bladeSensor30Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor30Volt.setStatus("mandatory")
_BladeVoltageThresholdsTable_Object = MibTable
bladeVoltageThresholdsTable = _BladeVoltageThresholdsTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6)
)
if mibBuilder.loadTexts:
    bladeVoltageThresholdsTable.setStatus("mandatory")
_BladeVoltageThresholdsEntry_Object = MibTableRow
bladeVoltageThresholdsEntry = _BladeVoltageThresholdsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1)
)
bladeVoltageThresholdsEntry.setIndexNames(
    (0, "BLADE-MIB", "voltageThresholdIndex"),
)
if mibBuilder.loadTexts:
    bladeVoltageThresholdsEntry.setStatus("mandatory")
_VoltageThresholdIndex_Type = Integer32
_VoltageThresholdIndex_Object = MibTableColumn
voltageThresholdIndex = _VoltageThresholdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 1),
    _VoltageThresholdIndex_Type()
)
voltageThresholdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voltageThresholdIndex.setStatus("mandatory")


class _VoltageThresholdBladeId_Type(Integer32):
    """Custom type voltageThresholdBladeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_VoltageThresholdBladeId_Type.__name__ = "Integer32"
_VoltageThresholdBladeId_Object = MibTableColumn
voltageThresholdBladeId = _VoltageThresholdBladeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 2),
    _VoltageThresholdBladeId_Type()
)
voltageThresholdBladeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voltageThresholdBladeId.setStatus("mandatory")


class _VoltageThresholdBladeExists_Type(Integer32):
    """Custom type voltageThresholdBladeExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_VoltageThresholdBladeExists_Type.__name__ = "Integer32"
_VoltageThresholdBladeExists_Object = MibTableColumn
voltageThresholdBladeExists = _VoltageThresholdBladeExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 3),
    _VoltageThresholdBladeExists_Type()
)
voltageThresholdBladeExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voltageThresholdBladeExists.setStatus("mandatory")


class _VoltageThresholdBladePowerState_Type(Integer32):
    """Custom type voltageThresholdBladePowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("standby", 3),
          ("hibernate", 4))
    )


_VoltageThresholdBladePowerState_Type.__name__ = "Integer32"
_VoltageThresholdBladePowerState_Object = MibTableColumn
voltageThresholdBladePowerState = _VoltageThresholdBladePowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 4),
    _VoltageThresholdBladePowerState_Type()
)
voltageThresholdBladePowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voltageThresholdBladePowerState.setStatus("mandatory")
_VoltageThresholdBladeName_Type = OctetString
_VoltageThresholdBladeName_Object = MibTableColumn
voltageThresholdBladeName = _VoltageThresholdBladeName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 5),
    _VoltageThresholdBladeName_Type()
)
voltageThresholdBladeName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voltageThresholdBladeName.setStatus("mandatory")
_BladePlus5VoltHighWarning_Type = OctetString
_BladePlus5VoltHighWarning_Object = MibTableColumn
bladePlus5VoltHighWarning = _BladePlus5VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 6),
    _BladePlus5VoltHighWarning_Type()
)
bladePlus5VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePlus5VoltHighWarning.setStatus("mandatory")
_BladePlus5VoltLowWarning_Type = OctetString
_BladePlus5VoltLowWarning_Object = MibTableColumn
bladePlus5VoltLowWarning = _BladePlus5VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 7),
    _BladePlus5VoltLowWarning_Type()
)
bladePlus5VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePlus5VoltLowWarning.setStatus("mandatory")
_BladePlus3pt3VoltHighWarning_Type = OctetString
_BladePlus3pt3VoltHighWarning_Object = MibTableColumn
bladePlus3pt3VoltHighWarning = _BladePlus3pt3VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 8),
    _BladePlus3pt3VoltHighWarning_Type()
)
bladePlus3pt3VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePlus3pt3VoltHighWarning.setStatus("mandatory")
_BladePlus3pt3VoltLowWarning_Type = OctetString
_BladePlus3pt3VoltLowWarning_Object = MibTableColumn
bladePlus3pt3VoltLowWarning = _BladePlus3pt3VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 9),
    _BladePlus3pt3VoltLowWarning_Type()
)
bladePlus3pt3VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePlus3pt3VoltLowWarning.setStatus("mandatory")
_BladePlus12VoltHighWarning_Type = OctetString
_BladePlus12VoltHighWarning_Object = MibTableColumn
bladePlus12VoltHighWarning = _BladePlus12VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 10),
    _BladePlus12VoltHighWarning_Type()
)
bladePlus12VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePlus12VoltHighWarning.setStatus("mandatory")
_BladePlus12VoltLowWarning_Type = OctetString
_BladePlus12VoltLowWarning_Object = MibTableColumn
bladePlus12VoltLowWarning = _BladePlus12VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 11),
    _BladePlus12VoltLowWarning_Type()
)
bladePlus12VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePlus12VoltLowWarning.setStatus("mandatory")
_BladePlus2pt5VoltHighWarning_Type = OctetString
_BladePlus2pt5VoltHighWarning_Object = MibTableColumn
bladePlus2pt5VoltHighWarning = _BladePlus2pt5VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 14),
    _BladePlus2pt5VoltHighWarning_Type()
)
bladePlus2pt5VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePlus2pt5VoltHighWarning.setStatus("mandatory")
_BladePlus2pt5VoltLowWarning_Type = OctetString
_BladePlus2pt5VoltLowWarning_Object = MibTableColumn
bladePlus2pt5VoltLowWarning = _BladePlus2pt5VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 15),
    _BladePlus2pt5VoltLowWarning_Type()
)
bladePlus2pt5VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePlus2pt5VoltLowWarning.setStatus("mandatory")
_BladePlus1pt5VoltHighWarning_Type = OctetString
_BladePlus1pt5VoltHighWarning_Object = MibTableColumn
bladePlus1pt5VoltHighWarning = _BladePlus1pt5VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 16),
    _BladePlus1pt5VoltHighWarning_Type()
)
bladePlus1pt5VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePlus1pt5VoltHighWarning.setStatus("mandatory")
_BladePlus1pt5VoltLowWarning_Type = OctetString
_BladePlus1pt5VoltLowWarning_Object = MibTableColumn
bladePlus1pt5VoltLowWarning = _BladePlus1pt5VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 17),
    _BladePlus1pt5VoltLowWarning_Type()
)
bladePlus1pt5VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePlus1pt5VoltLowWarning.setStatus("mandatory")
_BladePlus1pt25VoltHighWarning_Type = OctetString
_BladePlus1pt25VoltHighWarning_Object = MibTableColumn
bladePlus1pt25VoltHighWarning = _BladePlus1pt25VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 18),
    _BladePlus1pt25VoltHighWarning_Type()
)
bladePlus1pt25VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePlus1pt25VoltHighWarning.setStatus("mandatory")
_BladePlus1pt25VoltLowWarning_Type = OctetString
_BladePlus1pt25VoltLowWarning_Object = MibTableColumn
bladePlus1pt25VoltLowWarning = _BladePlus1pt25VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 19),
    _BladePlus1pt25VoltLowWarning_Type()
)
bladePlus1pt25VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePlus1pt25VoltLowWarning.setStatus("mandatory")


class _BladeVoltThresholdSensorCapability_Type(Integer32):
    """Custom type bladeVoltThresholdSensorCapability based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_BladeVoltThresholdSensorCapability_Type.__name__ = "Integer32"
_BladeVoltThresholdSensorCapability_Object = MibTableColumn
bladeVoltThresholdSensorCapability = _BladeVoltThresholdSensorCapability_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 22),
    _BladeVoltThresholdSensorCapability_Type()
)
bladeVoltThresholdSensorCapability.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeVoltThresholdSensorCapability.setStatus("mandatory")
_BladeSensor1VoltHighWarning_Type = OctetString
_BladeSensor1VoltHighWarning_Object = MibTableColumn
bladeSensor1VoltHighWarning = _BladeSensor1VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 23),
    _BladeSensor1VoltHighWarning_Type()
)
bladeSensor1VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor1VoltHighWarning.setStatus("mandatory")
_BladeSensor1VoltLowWarning_Type = OctetString
_BladeSensor1VoltLowWarning_Object = MibTableColumn
bladeSensor1VoltLowWarning = _BladeSensor1VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 24),
    _BladeSensor1VoltLowWarning_Type()
)
bladeSensor1VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor1VoltLowWarning.setStatus("mandatory")
_BladeSensor2VoltHighWarning_Type = OctetString
_BladeSensor2VoltHighWarning_Object = MibTableColumn
bladeSensor2VoltHighWarning = _BladeSensor2VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 25),
    _BladeSensor2VoltHighWarning_Type()
)
bladeSensor2VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor2VoltHighWarning.setStatus("mandatory")
_BladeSensor2VoltLowWarning_Type = OctetString
_BladeSensor2VoltLowWarning_Object = MibTableColumn
bladeSensor2VoltLowWarning = _BladeSensor2VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 26),
    _BladeSensor2VoltLowWarning_Type()
)
bladeSensor2VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor2VoltLowWarning.setStatus("mandatory")
_BladeSensor3VoltHighWarning_Type = OctetString
_BladeSensor3VoltHighWarning_Object = MibTableColumn
bladeSensor3VoltHighWarning = _BladeSensor3VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 27),
    _BladeSensor3VoltHighWarning_Type()
)
bladeSensor3VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor3VoltHighWarning.setStatus("mandatory")
_BladeSensor3VoltLowWarning_Type = OctetString
_BladeSensor3VoltLowWarning_Object = MibTableColumn
bladeSensor3VoltLowWarning = _BladeSensor3VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 28),
    _BladeSensor3VoltLowWarning_Type()
)
bladeSensor3VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor3VoltLowWarning.setStatus("mandatory")
_BladeSensor4VoltHighWarning_Type = OctetString
_BladeSensor4VoltHighWarning_Object = MibTableColumn
bladeSensor4VoltHighWarning = _BladeSensor4VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 29),
    _BladeSensor4VoltHighWarning_Type()
)
bladeSensor4VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor4VoltHighWarning.setStatus("mandatory")
_BladeSensor4VoltLowWarning_Type = OctetString
_BladeSensor4VoltLowWarning_Object = MibTableColumn
bladeSensor4VoltLowWarning = _BladeSensor4VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 30),
    _BladeSensor4VoltLowWarning_Type()
)
bladeSensor4VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor4VoltLowWarning.setStatus("mandatory")
_BladeSensor5VoltHighWarning_Type = OctetString
_BladeSensor5VoltHighWarning_Object = MibTableColumn
bladeSensor5VoltHighWarning = _BladeSensor5VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 31),
    _BladeSensor5VoltHighWarning_Type()
)
bladeSensor5VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor5VoltHighWarning.setStatus("mandatory")
_BladeSensor5VoltLowWarning_Type = OctetString
_BladeSensor5VoltLowWarning_Object = MibTableColumn
bladeSensor5VoltLowWarning = _BladeSensor5VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 32),
    _BladeSensor5VoltLowWarning_Type()
)
bladeSensor5VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor5VoltLowWarning.setStatus("mandatory")
_BladeSensor6VoltHighWarning_Type = OctetString
_BladeSensor6VoltHighWarning_Object = MibTableColumn
bladeSensor6VoltHighWarning = _BladeSensor6VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 33),
    _BladeSensor6VoltHighWarning_Type()
)
bladeSensor6VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor6VoltHighWarning.setStatus("mandatory")
_BladeSensor6VoltLowWarning_Type = OctetString
_BladeSensor6VoltLowWarning_Object = MibTableColumn
bladeSensor6VoltLowWarning = _BladeSensor6VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 34),
    _BladeSensor6VoltLowWarning_Type()
)
bladeSensor6VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor6VoltLowWarning.setStatus("mandatory")
_BladeSensor7VoltHighWarning_Type = OctetString
_BladeSensor7VoltHighWarning_Object = MibTableColumn
bladeSensor7VoltHighWarning = _BladeSensor7VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 35),
    _BladeSensor7VoltHighWarning_Type()
)
bladeSensor7VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor7VoltHighWarning.setStatus("mandatory")
_BladeSensor7VoltLowWarning_Type = OctetString
_BladeSensor7VoltLowWarning_Object = MibTableColumn
bladeSensor7VoltLowWarning = _BladeSensor7VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 36),
    _BladeSensor7VoltLowWarning_Type()
)
bladeSensor7VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor7VoltLowWarning.setStatus("mandatory")
_BladeSensor8VoltHighWarning_Type = OctetString
_BladeSensor8VoltHighWarning_Object = MibTableColumn
bladeSensor8VoltHighWarning = _BladeSensor8VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 37),
    _BladeSensor8VoltHighWarning_Type()
)
bladeSensor8VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor8VoltHighWarning.setStatus("mandatory")
_BladeSensor8VoltLowWarning_Type = OctetString
_BladeSensor8VoltLowWarning_Object = MibTableColumn
bladeSensor8VoltLowWarning = _BladeSensor8VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 38),
    _BladeSensor8VoltLowWarning_Type()
)
bladeSensor8VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor8VoltLowWarning.setStatus("mandatory")
_BladeSensor9VoltHighWarning_Type = OctetString
_BladeSensor9VoltHighWarning_Object = MibTableColumn
bladeSensor9VoltHighWarning = _BladeSensor9VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 39),
    _BladeSensor9VoltHighWarning_Type()
)
bladeSensor9VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor9VoltHighWarning.setStatus("mandatory")
_BladeSensor9VoltLowWarning_Type = OctetString
_BladeSensor9VoltLowWarning_Object = MibTableColumn
bladeSensor9VoltLowWarning = _BladeSensor9VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 40),
    _BladeSensor9VoltLowWarning_Type()
)
bladeSensor9VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor9VoltLowWarning.setStatus("mandatory")
_BladeSensor10VoltHighWarning_Type = OctetString
_BladeSensor10VoltHighWarning_Object = MibTableColumn
bladeSensor10VoltHighWarning = _BladeSensor10VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 41),
    _BladeSensor10VoltHighWarning_Type()
)
bladeSensor10VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor10VoltHighWarning.setStatus("mandatory")
_BladeSensor10VoltLowWarning_Type = OctetString
_BladeSensor10VoltLowWarning_Object = MibTableColumn
bladeSensor10VoltLowWarning = _BladeSensor10VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 42),
    _BladeSensor10VoltLowWarning_Type()
)
bladeSensor10VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor10VoltLowWarning.setStatus("mandatory")
_BladeSensor11VoltHighWarning_Type = OctetString
_BladeSensor11VoltHighWarning_Object = MibTableColumn
bladeSensor11VoltHighWarning = _BladeSensor11VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 43),
    _BladeSensor11VoltHighWarning_Type()
)
bladeSensor11VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor11VoltHighWarning.setStatus("mandatory")
_BladeSensor11VoltLowWarning_Type = OctetString
_BladeSensor11VoltLowWarning_Object = MibTableColumn
bladeSensor11VoltLowWarning = _BladeSensor11VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 44),
    _BladeSensor11VoltLowWarning_Type()
)
bladeSensor11VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor11VoltLowWarning.setStatus("mandatory")
_BladeSensor12VoltHighWarning_Type = OctetString
_BladeSensor12VoltHighWarning_Object = MibTableColumn
bladeSensor12VoltHighWarning = _BladeSensor12VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 45),
    _BladeSensor12VoltHighWarning_Type()
)
bladeSensor12VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor12VoltHighWarning.setStatus("mandatory")
_BladeSensor12VoltLowWarning_Type = OctetString
_BladeSensor12VoltLowWarning_Object = MibTableColumn
bladeSensor12VoltLowWarning = _BladeSensor12VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 46),
    _BladeSensor12VoltLowWarning_Type()
)
bladeSensor12VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor12VoltLowWarning.setStatus("mandatory")
_BladeSensor13VoltHighWarning_Type = OctetString
_BladeSensor13VoltHighWarning_Object = MibTableColumn
bladeSensor13VoltHighWarning = _BladeSensor13VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 47),
    _BladeSensor13VoltHighWarning_Type()
)
bladeSensor13VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor13VoltHighWarning.setStatus("mandatory")
_BladeSensor13VoltLowWarning_Type = OctetString
_BladeSensor13VoltLowWarning_Object = MibTableColumn
bladeSensor13VoltLowWarning = _BladeSensor13VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 48),
    _BladeSensor13VoltLowWarning_Type()
)
bladeSensor13VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor13VoltLowWarning.setStatus("mandatory")
_BladeSensor14VoltHighWarning_Type = OctetString
_BladeSensor14VoltHighWarning_Object = MibTableColumn
bladeSensor14VoltHighWarning = _BladeSensor14VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 49),
    _BladeSensor14VoltHighWarning_Type()
)
bladeSensor14VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor14VoltHighWarning.setStatus("mandatory")
_BladeSensor14VoltLowWarning_Type = OctetString
_BladeSensor14VoltLowWarning_Object = MibTableColumn
bladeSensor14VoltLowWarning = _BladeSensor14VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 50),
    _BladeSensor14VoltLowWarning_Type()
)
bladeSensor14VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor14VoltLowWarning.setStatus("mandatory")
_BladeSensor15VoltHighWarning_Type = OctetString
_BladeSensor15VoltHighWarning_Object = MibTableColumn
bladeSensor15VoltHighWarning = _BladeSensor15VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 51),
    _BladeSensor15VoltHighWarning_Type()
)
bladeSensor15VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor15VoltHighWarning.setStatus("mandatory")
_BladeSensor15VoltLowWarning_Type = OctetString
_BladeSensor15VoltLowWarning_Object = MibTableColumn
bladeSensor15VoltLowWarning = _BladeSensor15VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 52),
    _BladeSensor15VoltLowWarning_Type()
)
bladeSensor15VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor15VoltLowWarning.setStatus("mandatory")
_BladeSensor16VoltHighWarning_Type = OctetString
_BladeSensor16VoltHighWarning_Object = MibTableColumn
bladeSensor16VoltHighWarning = _BladeSensor16VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 53),
    _BladeSensor16VoltHighWarning_Type()
)
bladeSensor16VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor16VoltHighWarning.setStatus("mandatory")
_BladeSensor16VoltLowWarning_Type = OctetString
_BladeSensor16VoltLowWarning_Object = MibTableColumn
bladeSensor16VoltLowWarning = _BladeSensor16VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 54),
    _BladeSensor16VoltLowWarning_Type()
)
bladeSensor16VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor16VoltLowWarning.setStatus("mandatory")
_BladeSensor17VoltHighWarning_Type = OctetString
_BladeSensor17VoltHighWarning_Object = MibTableColumn
bladeSensor17VoltHighWarning = _BladeSensor17VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 55),
    _BladeSensor17VoltHighWarning_Type()
)
bladeSensor17VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor17VoltHighWarning.setStatus("mandatory")
_BladeSensor17VoltLowWarning_Type = OctetString
_BladeSensor17VoltLowWarning_Object = MibTableColumn
bladeSensor17VoltLowWarning = _BladeSensor17VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 56),
    _BladeSensor17VoltLowWarning_Type()
)
bladeSensor17VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor17VoltLowWarning.setStatus("mandatory")
_BladeSensor18VoltHighWarning_Type = OctetString
_BladeSensor18VoltHighWarning_Object = MibTableColumn
bladeSensor18VoltHighWarning = _BladeSensor18VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 57),
    _BladeSensor18VoltHighWarning_Type()
)
bladeSensor18VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor18VoltHighWarning.setStatus("mandatory")
_BladeSensor18VoltLowWarning_Type = OctetString
_BladeSensor18VoltLowWarning_Object = MibTableColumn
bladeSensor18VoltLowWarning = _BladeSensor18VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 58),
    _BladeSensor18VoltLowWarning_Type()
)
bladeSensor18VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor18VoltLowWarning.setStatus("mandatory")
_BladeSensor19VoltHighWarning_Type = OctetString
_BladeSensor19VoltHighWarning_Object = MibTableColumn
bladeSensor19VoltHighWarning = _BladeSensor19VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 59),
    _BladeSensor19VoltHighWarning_Type()
)
bladeSensor19VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor19VoltHighWarning.setStatus("mandatory")
_BladeSensor19VoltLowWarning_Type = OctetString
_BladeSensor19VoltLowWarning_Object = MibTableColumn
bladeSensor19VoltLowWarning = _BladeSensor19VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 60),
    _BladeSensor19VoltLowWarning_Type()
)
bladeSensor19VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor19VoltLowWarning.setStatus("mandatory")
_BladeSensor20VoltHighWarning_Type = OctetString
_BladeSensor20VoltHighWarning_Object = MibTableColumn
bladeSensor20VoltHighWarning = _BladeSensor20VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 61),
    _BladeSensor20VoltHighWarning_Type()
)
bladeSensor20VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor20VoltHighWarning.setStatus("mandatory")
_BladeSensor20VoltLowWarning_Type = OctetString
_BladeSensor20VoltLowWarning_Object = MibTableColumn
bladeSensor20VoltLowWarning = _BladeSensor20VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 62),
    _BladeSensor20VoltLowWarning_Type()
)
bladeSensor20VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor20VoltLowWarning.setStatus("mandatory")
_BladeSensor21VoltHighWarning_Type = OctetString
_BladeSensor21VoltHighWarning_Object = MibTableColumn
bladeSensor21VoltHighWarning = _BladeSensor21VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 63),
    _BladeSensor21VoltHighWarning_Type()
)
bladeSensor21VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor21VoltHighWarning.setStatus("mandatory")
_BladeSensor21VoltLowWarning_Type = OctetString
_BladeSensor21VoltLowWarning_Object = MibTableColumn
bladeSensor21VoltLowWarning = _BladeSensor21VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 64),
    _BladeSensor21VoltLowWarning_Type()
)
bladeSensor21VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor21VoltLowWarning.setStatus("mandatory")
_BladeSensor22VoltHighWarning_Type = OctetString
_BladeSensor22VoltHighWarning_Object = MibTableColumn
bladeSensor22VoltHighWarning = _BladeSensor22VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 65),
    _BladeSensor22VoltHighWarning_Type()
)
bladeSensor22VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor22VoltHighWarning.setStatus("mandatory")
_BladeSensor22VoltLowWarning_Type = OctetString
_BladeSensor22VoltLowWarning_Object = MibTableColumn
bladeSensor22VoltLowWarning = _BladeSensor22VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 66),
    _BladeSensor22VoltLowWarning_Type()
)
bladeSensor22VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor22VoltLowWarning.setStatus("mandatory")
_BladeSensor23VoltHighWarning_Type = OctetString
_BladeSensor23VoltHighWarning_Object = MibTableColumn
bladeSensor23VoltHighWarning = _BladeSensor23VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 67),
    _BladeSensor23VoltHighWarning_Type()
)
bladeSensor23VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor23VoltHighWarning.setStatus("mandatory")
_BladeSensor23VoltLowWarning_Type = OctetString
_BladeSensor23VoltLowWarning_Object = MibTableColumn
bladeSensor23VoltLowWarning = _BladeSensor23VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 68),
    _BladeSensor23VoltLowWarning_Type()
)
bladeSensor23VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor23VoltLowWarning.setStatus("mandatory")
_BladeSensor24VoltHighWarning_Type = OctetString
_BladeSensor24VoltHighWarning_Object = MibTableColumn
bladeSensor24VoltHighWarning = _BladeSensor24VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 69),
    _BladeSensor24VoltHighWarning_Type()
)
bladeSensor24VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor24VoltHighWarning.setStatus("mandatory")
_BladeSensor24VoltLowWarning_Type = OctetString
_BladeSensor24VoltLowWarning_Object = MibTableColumn
bladeSensor24VoltLowWarning = _BladeSensor24VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 70),
    _BladeSensor24VoltLowWarning_Type()
)
bladeSensor24VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor24VoltLowWarning.setStatus("mandatory")
_BladeSensor25VoltHighWarning_Type = OctetString
_BladeSensor25VoltHighWarning_Object = MibTableColumn
bladeSensor25VoltHighWarning = _BladeSensor25VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 71),
    _BladeSensor25VoltHighWarning_Type()
)
bladeSensor25VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor25VoltHighWarning.setStatus("mandatory")
_BladeSensor25VoltLowWarning_Type = OctetString
_BladeSensor25VoltLowWarning_Object = MibTableColumn
bladeSensor25VoltLowWarning = _BladeSensor25VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 72),
    _BladeSensor25VoltLowWarning_Type()
)
bladeSensor25VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor25VoltLowWarning.setStatus("mandatory")
_BladeSensor26VoltHighWarning_Type = OctetString
_BladeSensor26VoltHighWarning_Object = MibTableColumn
bladeSensor26VoltHighWarning = _BladeSensor26VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 73),
    _BladeSensor26VoltHighWarning_Type()
)
bladeSensor26VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor26VoltHighWarning.setStatus("mandatory")
_BladeSensor26VoltLowWarning_Type = OctetString
_BladeSensor26VoltLowWarning_Object = MibTableColumn
bladeSensor26VoltLowWarning = _BladeSensor26VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 74),
    _BladeSensor26VoltLowWarning_Type()
)
bladeSensor26VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor26VoltLowWarning.setStatus("mandatory")
_BladeSensor27VoltHighWarning_Type = OctetString
_BladeSensor27VoltHighWarning_Object = MibTableColumn
bladeSensor27VoltHighWarning = _BladeSensor27VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 75),
    _BladeSensor27VoltHighWarning_Type()
)
bladeSensor27VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor27VoltHighWarning.setStatus("mandatory")
_BladeSensor27VoltLowWarning_Type = OctetString
_BladeSensor27VoltLowWarning_Object = MibTableColumn
bladeSensor27VoltLowWarning = _BladeSensor27VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 76),
    _BladeSensor27VoltLowWarning_Type()
)
bladeSensor27VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor27VoltLowWarning.setStatus("mandatory")
_BladeSensor28VoltHighWarning_Type = OctetString
_BladeSensor28VoltHighWarning_Object = MibTableColumn
bladeSensor28VoltHighWarning = _BladeSensor28VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 77),
    _BladeSensor28VoltHighWarning_Type()
)
bladeSensor28VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor28VoltHighWarning.setStatus("mandatory")
_BladeSensor28VoltLowWarning_Type = OctetString
_BladeSensor28VoltLowWarning_Object = MibTableColumn
bladeSensor28VoltLowWarning = _BladeSensor28VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 78),
    _BladeSensor28VoltLowWarning_Type()
)
bladeSensor28VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor28VoltLowWarning.setStatus("mandatory")
_BladeSensor29VoltHighWarning_Type = OctetString
_BladeSensor29VoltHighWarning_Object = MibTableColumn
bladeSensor29VoltHighWarning = _BladeSensor29VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 79),
    _BladeSensor29VoltHighWarning_Type()
)
bladeSensor29VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor29VoltHighWarning.setStatus("mandatory")
_BladeSensor29VoltLowWarning_Type = OctetString
_BladeSensor29VoltLowWarning_Object = MibTableColumn
bladeSensor29VoltLowWarning = _BladeSensor29VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 80),
    _BladeSensor29VoltLowWarning_Type()
)
bladeSensor29VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor29VoltLowWarning.setStatus("mandatory")
_BladeSensor30VoltHighWarning_Type = OctetString
_BladeSensor30VoltHighWarning_Object = MibTableColumn
bladeSensor30VoltHighWarning = _BladeSensor30VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 81),
    _BladeSensor30VoltHighWarning_Type()
)
bladeSensor30VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor30VoltHighWarning.setStatus("mandatory")
_BladeSensor30VoltLowWarning_Type = OctetString
_BladeSensor30VoltLowWarning_Object = MibTableColumn
bladeSensor30VoltLowWarning = _BladeSensor30VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 82),
    _BladeSensor30VoltLowWarning_Type()
)
bladeSensor30VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor30VoltLowWarning.setStatus("mandatory")
_BladeIOCompatibilityTable_Object = MibTable
bladeIOCompatibilityTable = _BladeIOCompatibilityTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 7)
)
if mibBuilder.loadTexts:
    bladeIOCompatibilityTable.setStatus("mandatory")
_BladeIOCompatibilityEntry_Object = MibTableRow
bladeIOCompatibilityEntry = _BladeIOCompatibilityEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 7, 1)
)
bladeIOCompatibilityEntry.setIndexNames(
    (0, "BLADE-MIB", "bladeIOCompatibilityIndex"),
)
if mibBuilder.loadTexts:
    bladeIOCompatibilityEntry.setStatus("mandatory")
_BladeIOCompatibilityIndex_Type = Integer32
_BladeIOCompatibilityIndex_Object = MibTableColumn
bladeIOCompatibilityIndex = _BladeIOCompatibilityIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 7, 1, 1),
    _BladeIOCompatibilityIndex_Type()
)
bladeIOCompatibilityIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeIOCompatibilityIndex.setStatus("mandatory")


class _BladeIOCompatibilityBladeId_Type(Integer32):
    """Custom type bladeIOCompatibilityBladeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_BladeIOCompatibilityBladeId_Type.__name__ = "Integer32"
_BladeIOCompatibilityBladeId_Object = MibTableColumn
bladeIOCompatibilityBladeId = _BladeIOCompatibilityBladeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 7, 1, 2),
    _BladeIOCompatibilityBladeId_Type()
)
bladeIOCompatibilityBladeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeIOCompatibilityBladeId.setStatus("mandatory")
_BladeIOCompatibilityBayNumber_Type = Integer32
_BladeIOCompatibilityBayNumber_Object = MibTableColumn
bladeIOCompatibilityBayNumber = _BladeIOCompatibilityBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 7, 1, 3),
    _BladeIOCompatibilityBayNumber_Type()
)
bladeIOCompatibilityBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeIOCompatibilityBayNumber.setStatus("mandatory")
_BladeIOCompatibilityModuleBay_Type = OctetString
_BladeIOCompatibilityModuleBay_Object = MibTableColumn
bladeIOCompatibilityModuleBay = _BladeIOCompatibilityModuleBay_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 7, 1, 4),
    _BladeIOCompatibilityModuleBay_Type()
)
bladeIOCompatibilityModuleBay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeIOCompatibilityModuleBay.setStatus("mandatory")
_BladeIOCompatibilityModulePower_Type = OctetString
_BladeIOCompatibilityModulePower_Object = MibTableColumn
bladeIOCompatibilityModulePower = _BladeIOCompatibilityModulePower_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 7, 1, 5),
    _BladeIOCompatibilityModulePower_Type()
)
bladeIOCompatibilityModulePower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeIOCompatibilityModulePower.setStatus("mandatory")
_BladeIOCompatibilityModuleFabricType_Type = OctetString
_BladeIOCompatibilityModuleFabricType_Object = MibTableColumn
bladeIOCompatibilityModuleFabricType = _BladeIOCompatibilityModuleFabricType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 7, 1, 6),
    _BladeIOCompatibilityModuleFabricType_Type()
)
bladeIOCompatibilityModuleFabricType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeIOCompatibilityModuleFabricType.setStatus("mandatory")
_BladeIOCompatibilityFabricOnBlade_Type = OctetString
_BladeIOCompatibilityFabricOnBlade_Object = MibTableColumn
bladeIOCompatibilityFabricOnBlade = _BladeIOCompatibilityFabricOnBlade_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 7, 1, 7),
    _BladeIOCompatibilityFabricOnBlade_Type()
)
bladeIOCompatibilityFabricOnBlade.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeIOCompatibilityFabricOnBlade.setStatus("mandatory")
_BladeIOCompatibilityStatus_Type = OctetString
_BladeIOCompatibilityStatus_Object = MibTableColumn
bladeIOCompatibilityStatus = _BladeIOCompatibilityStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 7, 1, 8),
    _BladeIOCompatibilityStatus_Type()
)
bladeIOCompatibilityStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeIOCompatibilityStatus.setStatus("mandatory")
_BladePowerRestart_ObjectIdentity = ObjectIdentity
bladePowerRestart = _BladePowerRestart_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6)
)
_BladePowerRestartTable_Object = MibTable
bladePowerRestartTable = _BladePowerRestartTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1)
)
if mibBuilder.loadTexts:
    bladePowerRestartTable.setStatus("mandatory")
_BladePowerRestartEntry_Object = MibTableRow
bladePowerRestartEntry = _BladePowerRestartEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1)
)
bladePowerRestartEntry.setIndexNames(
    (0, "BLADE-MIB", "powerRestartIndex"),
)
if mibBuilder.loadTexts:
    bladePowerRestartEntry.setStatus("mandatory")
_PowerRestartIndex_Type = Integer32
_PowerRestartIndex_Object = MibTableColumn
powerRestartIndex = _PowerRestartIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 1),
    _PowerRestartIndex_Type()
)
powerRestartIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerRestartIndex.setStatus("mandatory")


class _PowerRestartBladeId_Type(Integer32):
    """Custom type powerRestartBladeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_PowerRestartBladeId_Type.__name__ = "Integer32"
_PowerRestartBladeId_Object = MibTableColumn
powerRestartBladeId = _PowerRestartBladeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 2),
    _PowerRestartBladeId_Type()
)
powerRestartBladeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerRestartBladeId.setStatus("mandatory")


class _PowerRestartBladeExists_Type(Integer32):
    """Custom type powerRestartBladeExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_PowerRestartBladeExists_Type.__name__ = "Integer32"
_PowerRestartBladeExists_Object = MibTableColumn
powerRestartBladeExists = _PowerRestartBladeExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 3),
    _PowerRestartBladeExists_Type()
)
powerRestartBladeExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerRestartBladeExists.setStatus("mandatory")


class _PowerRestartBladePowerState_Type(Integer32):
    """Custom type powerRestartBladePowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("standby", 3),
          ("hibernate", 4),
          ("unknown", 255))
    )


_PowerRestartBladePowerState_Type.__name__ = "Integer32"
_PowerRestartBladePowerState_Object = MibTableColumn
powerRestartBladePowerState = _PowerRestartBladePowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 4),
    _PowerRestartBladePowerState_Type()
)
powerRestartBladePowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerRestartBladePowerState.setStatus("mandatory")


class _PowerRestartBladeHealthState_Type(Integer32):
    """Custom type powerRestartBladeHealthState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("good", 1),
          ("warning", 2),
          ("critical", 3),
          ("kernelMode", 4),
          ("discovering", 5),
          ("commError", 6),
          ("noPower", 7),
          ("flashing", 8),
          ("initFailure", 9),
          ("insufficientPower", 10),
          ("powerDenied", 11))
    )


_PowerRestartBladeHealthState_Type.__name__ = "Integer32"
_PowerRestartBladeHealthState_Object = MibTableColumn
powerRestartBladeHealthState = _PowerRestartBladeHealthState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 5),
    _PowerRestartBladeHealthState_Type()
)
powerRestartBladeHealthState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerRestartBladeHealthState.setStatus("mandatory")
_PowerRestartBladeName_Type = OctetString
_PowerRestartBladeName_Object = MibTableColumn
powerRestartBladeName = _PowerRestartBladeName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 6),
    _PowerRestartBladeName_Type()
)
powerRestartBladeName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerRestartBladeName.setStatus("mandatory")


class _PowerOnOffBlade_Type(Integer32):
    """Custom type powerOnOffBlade based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("softoff", 2))
    )


_PowerOnOffBlade_Type.__name__ = "Integer32"
_PowerOnOffBlade_Object = MibTableColumn
powerOnOffBlade = _PowerOnOffBlade_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 7),
    _PowerOnOffBlade_Type()
)
powerOnOffBlade.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    powerOnOffBlade.setStatus("mandatory")


class _RestartBlade_Type(Integer32):
    """Custom type restartBlade based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_RestartBlade_Type.__name__ = "Integer32"
_RestartBlade_Object = MibTableColumn
restartBlade = _RestartBlade_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 8),
    _RestartBlade_Type()
)
restartBlade.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restartBlade.setStatus("mandatory")


class _RestartBladeSMP_Type(Integer32):
    """Custom type restartBladeSMP based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_RestartBladeSMP_Type.__name__ = "Integer32"
_RestartBladeSMP_Object = MibTableColumn
restartBladeSMP = _RestartBladeSMP_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 9),
    _RestartBladeSMP_Type()
)
restartBladeSMP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restartBladeSMP.setStatus("mandatory")


class _RestartBladeNMI_Type(Integer32):
    """Custom type restartBladeNMI based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_RestartBladeNMI_Type.__name__ = "Integer32"
_RestartBladeNMI_Object = MibTableColumn
restartBladeNMI = _RestartBladeNMI_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 10),
    _RestartBladeNMI_Type()
)
restartBladeNMI.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restartBladeNMI.setStatus("mandatory")


class _RestartBladeClearNVRAM_Type(Integer32):
    """Custom type restartBladeClearNVRAM based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_RestartBladeClearNVRAM_Type.__name__ = "Integer32"
_RestartBladeClearNVRAM_Object = MibTableColumn
restartBladeClearNVRAM = _RestartBladeClearNVRAM_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 11),
    _RestartBladeClearNVRAM_Type()
)
restartBladeClearNVRAM.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restartBladeClearNVRAM.setStatus("mandatory")


class _RestartBladeInvokeDiags_Type(Integer32):
    """Custom type restartBladeInvokeDiags based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_RestartBladeInvokeDiags_Type.__name__ = "Integer32"
_RestartBladeInvokeDiags_Object = MibTableColumn
restartBladeInvokeDiags = _RestartBladeInvokeDiags_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 12),
    _RestartBladeInvokeDiags_Type()
)
restartBladeInvokeDiags.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restartBladeInvokeDiags.setStatus("mandatory")


class _RestartBladeInvokeDiagsFromDefaultBootList_Type(Integer32):
    """Custom type restartBladeInvokeDiagsFromDefaultBootList based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_RestartBladeInvokeDiagsFromDefaultBootList_Type.__name__ = "Integer32"
_RestartBladeInvokeDiagsFromDefaultBootList_Object = MibTableColumn
restartBladeInvokeDiagsFromDefaultBootList = _RestartBladeInvokeDiagsFromDefaultBootList_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 13),
    _RestartBladeInvokeDiagsFromDefaultBootList_Type()
)
restartBladeInvokeDiagsFromDefaultBootList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restartBladeInvokeDiagsFromDefaultBootList.setStatus("mandatory")


class _RestartBladeToSMSBootMenu_Type(Integer32):
    """Custom type restartBladeToSMSBootMenu based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_RestartBladeToSMSBootMenu_Type.__name__ = "Integer32"
_RestartBladeToSMSBootMenu_Object = MibTableColumn
restartBladeToSMSBootMenu = _RestartBladeToSMSBootMenu_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 14),
    _RestartBladeToSMSBootMenu_Type()
)
restartBladeToSMSBootMenu.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restartBladeToSMSBootMenu.setStatus("mandatory")


class _RestartBladeToUEFIMenu_Type(Integer32):
    """Custom type restartBladeToUEFIMenu based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_RestartBladeToUEFIMenu_Type.__name__ = "Integer32"
_RestartBladeToUEFIMenu_Object = MibTableColumn
restartBladeToUEFIMenu = _RestartBladeToUEFIMenu_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 15),
    _RestartBladeToUEFIMenu_Type()
)
restartBladeToUEFIMenu.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restartBladeToUEFIMenu.setStatus("mandatory")
_BladeConfiguration_ObjectIdentity = ObjectIdentity
bladeConfiguration = _BladeConfiguration_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7)
)
_BladeConfigurationTable_Object = MibTable
bladeConfigurationTable = _BladeConfigurationTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1)
)
if mibBuilder.loadTexts:
    bladeConfigurationTable.setStatus("mandatory")
_BladeConfigurationEntry_Object = MibTableRow
bladeConfigurationEntry = _BladeConfigurationEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1)
)
bladeConfigurationEntry.setIndexNames(
    (0, "BLADE-MIB", "configurationIndex"),
)
if mibBuilder.loadTexts:
    bladeConfigurationEntry.setStatus("mandatory")
_ConfigurationIndex_Type = Integer32
_ConfigurationIndex_Object = MibTableColumn
configurationIndex = _ConfigurationIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 1),
    _ConfigurationIndex_Type()
)
configurationIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    configurationIndex.setStatus("mandatory")


class _ConfigurationBladeId_Type(Integer32):
    """Custom type configurationBladeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_ConfigurationBladeId_Type.__name__ = "Integer32"
_ConfigurationBladeId_Object = MibTableColumn
configurationBladeId = _ConfigurationBladeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 2),
    _ConfigurationBladeId_Type()
)
configurationBladeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    configurationBladeId.setStatus("mandatory")


class _ConfigurationBladeExists_Type(Integer32):
    """Custom type configurationBladeExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_ConfigurationBladeExists_Type.__name__ = "Integer32"
_ConfigurationBladeExists_Object = MibTableColumn
configurationBladeExists = _ConfigurationBladeExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 3),
    _ConfigurationBladeExists_Type()
)
configurationBladeExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    configurationBladeExists.setStatus("mandatory")


class _ConfigurationBladePowerState_Type(Integer32):
    """Custom type configurationBladePowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("standby", 3),
          ("hibernate", 4))
    )


_ConfigurationBladePowerState_Type.__name__ = "Integer32"
_ConfigurationBladePowerState_Object = MibTableColumn
configurationBladePowerState = _ConfigurationBladePowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 4),
    _ConfigurationBladePowerState_Type()
)
configurationBladePowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    configurationBladePowerState.setStatus("mandatory")
_ConfigurationBladeName_Type = OctetString
_ConfigurationBladeName_Object = MibTableColumn
configurationBladeName = _ConfigurationBladeName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 5),
    _ConfigurationBladeName_Type()
)
configurationBladeName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    configurationBladeName.setStatus("mandatory")


class _ConfigurationBladecKVM_Type(Integer32):
    """Custom type configurationBladecKVM based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1),
          ("notPresent", 2))
    )


_ConfigurationBladecKVM_Type.__name__ = "Integer32"
_ConfigurationBladecKVM_Object = MibTableColumn
configurationBladecKVM = _ConfigurationBladecKVM_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 6),
    _ConfigurationBladecKVM_Type()
)
configurationBladecKVM.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    configurationBladecKVM.setStatus("mandatory")


class _ConfigurationBladeActiveBootMode_Type(Integer32):
    """Custom type configurationBladeActiveBootMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("temporary", 1),
          ("permanent", 2),
          ("notApplicable", 255))
    )


_ConfigurationBladeActiveBootMode_Type.__name__ = "Integer32"
_ConfigurationBladeActiveBootMode_Object = MibTableColumn
configurationBladeActiveBootMode = _ConfigurationBladeActiveBootMode_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 7),
    _ConfigurationBladeActiveBootMode_Type()
)
configurationBladeActiveBootMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    configurationBladeActiveBootMode.setStatus("mandatory")


class _ConfigurationBladePendingBootMode_Type(Integer32):
    """Custom type configurationBladePendingBootMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("temporary", 1),
          ("permanent", 2),
          ("notApplicable", 255))
    )


_ConfigurationBladePendingBootMode_Type.__name__ = "Integer32"
_ConfigurationBladePendingBootMode_Object = MibTableColumn
configurationBladePendingBootMode = _ConfigurationBladePendingBootMode_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 8),
    _ConfigurationBladePendingBootMode_Type()
)
configurationBladePendingBootMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    configurationBladePendingBootMode.setStatus("mandatory")
_BladePowerManagementPolicy_ObjectIdentity = ObjectIdentity
bladePowerManagementPolicy = _BladePowerManagementPolicy_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 2)
)


class _Powerdomain1Oversubscription_Type(Integer32):
    """Custom type powerdomain1Oversubscription based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("not-allowed", 0),
          ("recoverable", 1),
          ("non-recoverable", 2))
    )


_Powerdomain1Oversubscription_Type.__name__ = "Integer32"
_Powerdomain1Oversubscription_Object = MibScalar
powerdomain1Oversubscription = _Powerdomain1Oversubscription_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 2, 1),
    _Powerdomain1Oversubscription_Type()
)
powerdomain1Oversubscription.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    powerdomain1Oversubscription.setStatus("mandatory")


class _Powerdomain2Oversubscription_Type(Integer32):
    """Custom type powerdomain2Oversubscription based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("not-allowed", 0),
          ("recoverable", 1),
          ("non-recoverable", 2))
    )


_Powerdomain2Oversubscription_Type.__name__ = "Integer32"
_Powerdomain2Oversubscription_Object = MibScalar
powerdomain2Oversubscription = _Powerdomain2Oversubscription_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 2, 2),
    _Powerdomain2Oversubscription_Type()
)
powerdomain2Oversubscription.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    powerdomain2Oversubscription.setStatus("mandatory")


class _AcousticMode_Type(Integer32):
    """Custom type acousticMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_AcousticMode_Type.__name__ = "Integer32"
_AcousticMode_Object = MibScalar
acousticMode = _AcousticMode_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 2, 3),
    _AcousticMode_Type()
)
acousticMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acousticMode.setStatus("mandatory")


class _NebsMode_Type(Integer32):
    """Custom type nebsMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_NebsMode_Type.__name__ = "Integer32"
_NebsMode_Object = MibScalar
nebsMode = _NebsMode_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 2, 4),
    _NebsMode_Type()
)
nebsMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    nebsMode.setStatus("mandatory")


class _BladecKVMEnableDisable_Type(Integer32):
    """Custom type bladecKVMEnableDisable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_BladecKVMEnableDisable_Type.__name__ = "Integer32"
_BladecKVMEnableDisable_Object = MibScalar
bladecKVMEnableDisable = _BladecKVMEnableDisable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 3),
    _BladecKVMEnableDisable_Type()
)
bladecKVMEnableDisable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladecKVMEnableDisable.setStatus("mandatory")
_BladeIPAddrRangeStart_Type = IpAddress
_BladeIPAddrRangeStart_Object = MibScalar
bladeIPAddrRangeStart = _BladeIPAddrRangeStart_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 8),
    _BladeIPAddrRangeStart_Type()
)
bladeIPAddrRangeStart.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeIPAddrRangeStart.setStatus("deprecated")
_BladeCapacityOnDemand_ObjectIdentity = ObjectIdentity
bladeCapacityOnDemand = _BladeCapacityOnDemand_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 9)
)
_BladeCapacityOnDemandTable_Object = MibTable
bladeCapacityOnDemandTable = _BladeCapacityOnDemandTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 9, 1)
)
if mibBuilder.loadTexts:
    bladeCapacityOnDemandTable.setStatus("deprecated")
_BladeCapacityOnDemandEntry_Object = MibTableRow
bladeCapacityOnDemandEntry = _BladeCapacityOnDemandEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 9, 1, 1)
)
bladeCapacityOnDemandEntry.setIndexNames(
    (0, "BLADE-MIB", "bladeCapacityOnDemandIndex"),
)
if mibBuilder.loadTexts:
    bladeCapacityOnDemandEntry.setStatus("deprecated")
_BladeCapacityOnDemandIndex_Type = Integer32
_BladeCapacityOnDemandIndex_Object = MibTableColumn
bladeCapacityOnDemandIndex = _BladeCapacityOnDemandIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 9, 1, 1, 1),
    _BladeCapacityOnDemandIndex_Type()
)
bladeCapacityOnDemandIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeCapacityOnDemandIndex.setStatus("deprecated")
_BladeCapacityOnDemandBladeName_Type = OctetString
_BladeCapacityOnDemandBladeName_Object = MibTableColumn
bladeCapacityOnDemandBladeName = _BladeCapacityOnDemandBladeName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 9, 1, 1, 2),
    _BladeCapacityOnDemandBladeName_Type()
)
bladeCapacityOnDemandBladeName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeCapacityOnDemandBladeName.setStatus("deprecated")


class _BladeCapacityOnDemandState_Type(Integer32):
    """Custom type bladeCapacityOnDemandState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("standby", 1),
          ("active", 2))
    )


_BladeCapacityOnDemandState_Type.__name__ = "Integer32"
_BladeCapacityOnDemandState_Object = MibTableColumn
bladeCapacityOnDemandState = _BladeCapacityOnDemandState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 9, 1, 1, 3),
    _BladeCapacityOnDemandState_Type()
)
bladeCapacityOnDemandState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeCapacityOnDemandState.setStatus("deprecated")
_BladeBootCountPowerOnTime_ObjectIdentity = ObjectIdentity
bladeBootCountPowerOnTime = _BladeBootCountPowerOnTime_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 10)
)
_BladeBootCountPowerOnTimeTable_Object = MibTable
bladeBootCountPowerOnTimeTable = _BladeBootCountPowerOnTimeTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 10, 1)
)
if mibBuilder.loadTexts:
    bladeBootCountPowerOnTimeTable.setStatus("mandatory")
_BladeBootCountPowerOnTimeEntry_Object = MibTableRow
bladeBootCountPowerOnTimeEntry = _BladeBootCountPowerOnTimeEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 10, 1, 1)
)
bladeBootCountPowerOnTimeEntry.setIndexNames(
    (0, "BLADE-MIB", "bootCountPowerOnTimeBladeIndex"),
)
if mibBuilder.loadTexts:
    bladeBootCountPowerOnTimeEntry.setStatus("mandatory")
_BootCountPowerOnTimeBladeIndex_Type = Integer32
_BootCountPowerOnTimeBladeIndex_Object = MibTableColumn
bootCountPowerOnTimeBladeIndex = _BootCountPowerOnTimeBladeIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 10, 1, 1, 1),
    _BootCountPowerOnTimeBladeIndex_Type()
)
bootCountPowerOnTimeBladeIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bootCountPowerOnTimeBladeIndex.setStatus("mandatory")


class _BootCountPowerOnTimeBladeId_Type(Integer32):
    """Custom type bootCountPowerOnTimeBladeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_BootCountPowerOnTimeBladeId_Type.__name__ = "Integer32"
_BootCountPowerOnTimeBladeId_Object = MibTableColumn
bootCountPowerOnTimeBladeId = _BootCountPowerOnTimeBladeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 10, 1, 1, 2),
    _BootCountPowerOnTimeBladeId_Type()
)
bootCountPowerOnTimeBladeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bootCountPowerOnTimeBladeId.setStatus("mandatory")
_BootCountPowerOnTimeBoots_Type = Integer32
_BootCountPowerOnTimeBoots_Object = MibTableColumn
bootCountPowerOnTimeBoots = _BootCountPowerOnTimeBoots_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 10, 1, 1, 3),
    _BootCountPowerOnTimeBoots_Type()
)
bootCountPowerOnTimeBoots.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bootCountPowerOnTimeBoots.setStatus("mandatory")
_BootCountPowerOnTimeSecs_Type = Integer32
_BootCountPowerOnTimeSecs_Object = MibTableColumn
bootCountPowerOnTimeSecs = _BootCountPowerOnTimeSecs_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 10, 1, 1, 4),
    _BootCountPowerOnTimeSecs_Type()
)
bootCountPowerOnTimeSecs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bootCountPowerOnTimeSecs.setStatus("mandatory")
_BladeVlanId_Type = Integer32
_BladeVlanId_Object = MibScalar
bladeVlanId = _BladeVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 11),
    _BladeVlanId_Type()
)
bladeVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeVlanId.setStatus("mandatory")
_BladeNetworkConfiguration_ObjectIdentity = ObjectIdentity
bladeNetworkConfiguration = _BladeNetworkConfiguration_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12)
)
_BladeNetworkInterfaceTable_Object = MibTable
bladeNetworkInterfaceTable = _BladeNetworkInterfaceTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 2)
)
if mibBuilder.loadTexts:
    bladeNetworkInterfaceTable.setStatus("mandatory")
_BladeNetworkInterfaceEntry_Object = MibTableRow
bladeNetworkInterfaceEntry = _BladeNetworkInterfaceEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 2, 1)
)
bladeNetworkInterfaceEntry.setIndexNames(
    (0, "BLADE-MIB", "bladeNetworkInterfaceIndex"),
)
if mibBuilder.loadTexts:
    bladeNetworkInterfaceEntry.setStatus("mandatory")
_BladeNetworkInterfaceIndex_Type = Integer32
_BladeNetworkInterfaceIndex_Object = MibTableColumn
bladeNetworkInterfaceIndex = _BladeNetworkInterfaceIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 2, 1, 1),
    _BladeNetworkInterfaceIndex_Type()
)
bladeNetworkInterfaceIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeNetworkInterfaceIndex.setStatus("mandatory")
_BladeNetworkInterfaceBayNumber_Type = OctetString
_BladeNetworkInterfaceBayNumber_Object = MibTableColumn
bladeNetworkInterfaceBayNumber = _BladeNetworkInterfaceBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 2, 1, 2),
    _BladeNetworkInterfaceBayNumber_Type()
)
bladeNetworkInterfaceBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeNetworkInterfaceBayNumber.setStatus("mandatory")
_BladeNetworkInterfaceNumber_Type = Integer32
_BladeNetworkInterfaceNumber_Object = MibTableColumn
bladeNetworkInterfaceNumber = _BladeNetworkInterfaceNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 2, 1, 3),
    _BladeNetworkInterfaceNumber_Type()
)
bladeNetworkInterfaceNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeNetworkInterfaceNumber.setStatus("mandatory")


class _BladeNetworkInterfaceType_Type(Integer32):
    """Custom type bladeNetworkInterfaceType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("private", 1),
          ("public", 2))
    )


_BladeNetworkInterfaceType_Type.__name__ = "Integer32"
_BladeNetworkInterfaceType_Object = MibTableColumn
bladeNetworkInterfaceType = _BladeNetworkInterfaceType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 2, 1, 4),
    _BladeNetworkInterfaceType_Type()
)
bladeNetworkInterfaceType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeNetworkInterfaceType.setStatus("mandatory")
_BladeNetworkInterfaceLabel_Type = OctetString
_BladeNetworkInterfaceLabel_Object = MibTableColumn
bladeNetworkInterfaceLabel = _BladeNetworkInterfaceLabel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 2, 1, 5),
    _BladeNetworkInterfaceLabel_Type()
)
bladeNetworkInterfaceLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeNetworkInterfaceLabel.setStatus("mandatory")
_BladeNetworkInterfaceIPAddr_Type = IpAddress
_BladeNetworkInterfaceIPAddr_Object = MibTableColumn
bladeNetworkInterfaceIPAddr = _BladeNetworkInterfaceIPAddr_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 2, 1, 6),
    _BladeNetworkInterfaceIPAddr_Type()
)
bladeNetworkInterfaceIPAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeNetworkInterfaceIPAddr.setStatus("mandatory")
_BladeNetworkInterfaceSubnetMask_Type = IpAddress
_BladeNetworkInterfaceSubnetMask_Object = MibTableColumn
bladeNetworkInterfaceSubnetMask = _BladeNetworkInterfaceSubnetMask_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 2, 1, 7),
    _BladeNetworkInterfaceSubnetMask_Type()
)
bladeNetworkInterfaceSubnetMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeNetworkInterfaceSubnetMask.setStatus("mandatory")
_BladeNetworkInterfaceGatewayAddr_Type = IpAddress
_BladeNetworkInterfaceGatewayAddr_Object = MibTableColumn
bladeNetworkInterfaceGatewayAddr = _BladeNetworkInterfaceGatewayAddr_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 2, 1, 8),
    _BladeNetworkInterfaceGatewayAddr_Type()
)
bladeNetworkInterfaceGatewayAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeNetworkInterfaceGatewayAddr.setStatus("mandatory")
_BladeNetworkInterfaceVlanId_Type = Integer32
_BladeNetworkInterfaceVlanId_Object = MibTableColumn
bladeNetworkInterfaceVlanId = _BladeNetworkInterfaceVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 2, 1, 9),
    _BladeNetworkInterfaceVlanId_Type()
)
bladeNetworkInterfaceVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeNetworkInterfaceVlanId.setStatus("mandatory")


class _BladeNetworkInterfaceVlanEnable_Type(Integer32):
    """Custom type bladeNetworkInterfaceVlanEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1),
          ("notApplicable", 255))
    )


_BladeNetworkInterfaceVlanEnable_Type.__name__ = "Integer32"
_BladeNetworkInterfaceVlanEnable_Object = MibTableColumn
bladeNetworkInterfaceVlanEnable = _BladeNetworkInterfaceVlanEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 2, 1, 10),
    _BladeNetworkInterfaceVlanEnable_Type()
)
bladeNetworkInterfaceVlanEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeNetworkInterfaceVlanEnable.setStatus("deprecated")


class _BladeNetworkInterfaceEnable_Type(Integer32):
    """Custom type bladeNetworkInterfaceEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1),
          ("notApplicable", 255))
    )


_BladeNetworkInterfaceEnable_Type.__name__ = "Integer32"
_BladeNetworkInterfaceEnable_Object = MibTableColumn
bladeNetworkInterfaceEnable = _BladeNetworkInterfaceEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 2, 1, 11),
    _BladeNetworkInterfaceEnable_Type()
)
bladeNetworkInterfaceEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeNetworkInterfaceEnable.setStatus("mandatory")


class _BladeNetworkInterfaceDHCPEnable_Type(Integer32):
    """Custom type bladeNetworkInterfaceDHCPEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("dhcpDisabled", 0),
          ("dhcpEnabled", 1),
          ("tryDhcpThenTryStatic", 2),
          ("notApplicable", 255))
    )


_BladeNetworkInterfaceDHCPEnable_Type.__name__ = "Integer32"
_BladeNetworkInterfaceDHCPEnable_Object = MibTableColumn
bladeNetworkInterfaceDHCPEnable = _BladeNetworkInterfaceDHCPEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 2, 1, 12),
    _BladeNetworkInterfaceDHCPEnable_Type()
)
bladeNetworkInterfaceDHCPEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeNetworkInterfaceDHCPEnable.setStatus("mandatory")
_BladeNetworkInterfaceMACAddr_Type = OctetString
_BladeNetworkInterfaceMACAddr_Object = MibTableColumn
bladeNetworkInterfaceMACAddr = _BladeNetworkInterfaceMACAddr_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 2, 1, 13),
    _BladeNetworkInterfaceMACAddr_Type()
)
bladeNetworkInterfaceMACAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeNetworkInterfaceMACAddr.setStatus("mandatory")


class _BladeNetworkInterfaceAssignedSwitch_Type(Integer32):
    """Custom type bladeNetworkInterfaceAssignedSwitch based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              255)
        )
    )
    namedValues = NamedValues(
        *(("notAssigned", 0),
          ("module1", 1),
          ("module2", 2),
          ("module3", 3),
          ("module4", 4),
          ("module5", 5),
          ("module6", 6),
          ("module7", 7),
          ("module8", 8),
          ("module9", 9),
          ("module10", 10),
          ("notApplicable", 255))
    )


_BladeNetworkInterfaceAssignedSwitch_Type.__name__ = "Integer32"
_BladeNetworkInterfaceAssignedSwitch_Object = MibTableColumn
bladeNetworkInterfaceAssignedSwitch = _BladeNetworkInterfaceAssignedSwitch_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 2, 1, 14),
    _BladeNetworkInterfaceAssignedSwitch_Type()
)
bladeNetworkInterfaceAssignedSwitch.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeNetworkInterfaceAssignedSwitch.setStatus("mandatory")
_BladeIPv6Config_ObjectIdentity = ObjectIdentity
bladeIPv6Config = _BladeIPv6Config_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10)
)
_BladeIPv6ConfigTable_Object = MibTable
bladeIPv6ConfigTable = _BladeIPv6ConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 1)
)
if mibBuilder.loadTexts:
    bladeIPv6ConfigTable.setStatus("mandatory")
_BladeIPv6ConfigEntry_Object = MibTableRow
bladeIPv6ConfigEntry = _BladeIPv6ConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 1, 1)
)
bladeIPv6ConfigEntry.setIndexNames(
    (0, "BLADE-MIB", "bladeIPv6ConfigIndex"),
    (0, "BLADE-MIB", "bladeIPv6ConfigPortIndex"),
)
if mibBuilder.loadTexts:
    bladeIPv6ConfigEntry.setStatus("mandatory")
_BladeIPv6ConfigIndex_Type = Integer32
_BladeIPv6ConfigIndex_Object = MibTableColumn
bladeIPv6ConfigIndex = _BladeIPv6ConfigIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 1, 1, 1),
    _BladeIPv6ConfigIndex_Type()
)
bladeIPv6ConfigIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeIPv6ConfigIndex.setStatus("mandatory")
_BladeIPv6ConfigPortIndex_Type = Integer32
_BladeIPv6ConfigPortIndex_Object = MibTableColumn
bladeIPv6ConfigPortIndex = _BladeIPv6ConfigPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 1, 1, 2),
    _BladeIPv6ConfigPortIndex_Type()
)
bladeIPv6ConfigPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeIPv6ConfigPortIndex.setStatus("mandatory")


class _BladeIPv6ConfigEnabled_Type(Integer32):
    """Custom type bladeIPv6ConfigEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_BladeIPv6ConfigEnabled_Type.__name__ = "Integer32"
_BladeIPv6ConfigEnabled_Object = MibTableColumn
bladeIPv6ConfigEnabled = _BladeIPv6ConfigEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 1, 1, 3),
    _BladeIPv6ConfigEnabled_Type()
)
bladeIPv6ConfigEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeIPv6ConfigEnabled.setStatus("mandatory")


class _BladeIPv6ConfigStatic_Type(Integer32):
    """Custom type bladeIPv6ConfigStatic based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_BladeIPv6ConfigStatic_Type.__name__ = "Integer32"
_BladeIPv6ConfigStatic_Object = MibTableColumn
bladeIPv6ConfigStatic = _BladeIPv6ConfigStatic_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 1, 1, 4),
    _BladeIPv6ConfigStatic_Type()
)
bladeIPv6ConfigStatic.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeIPv6ConfigStatic.setStatus("mandatory")


class _BladeDHCPv6ConfigEnabled_Type(Integer32):
    """Custom type bladeDHCPv6ConfigEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_BladeDHCPv6ConfigEnabled_Type.__name__ = "Integer32"
_BladeDHCPv6ConfigEnabled_Object = MibTableColumn
bladeDHCPv6ConfigEnabled = _BladeDHCPv6ConfigEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 1, 1, 5),
    _BladeDHCPv6ConfigEnabled_Type()
)
bladeDHCPv6ConfigEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeDHCPv6ConfigEnabled.setStatus("mandatory")


class _BladeIPv6ConfigStatelessEnabled_Type(Integer32):
    """Custom type bladeIPv6ConfigStatelessEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_BladeIPv6ConfigStatelessEnabled_Type.__name__ = "Integer32"
_BladeIPv6ConfigStatelessEnabled_Object = MibTableColumn
bladeIPv6ConfigStatelessEnabled = _BladeIPv6ConfigStatelessEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 1, 1, 6),
    _BladeIPv6ConfigStatelessEnabled_Type()
)
bladeIPv6ConfigStatelessEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeIPv6ConfigStatelessEnabled.setStatus("mandatory")
_BladeIPv6AddressTable_Object = MibTable
bladeIPv6AddressTable = _BladeIPv6AddressTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 2)
)
if mibBuilder.loadTexts:
    bladeIPv6AddressTable.setStatus("mandatory")
_BladeIPv6AddressEntry_Object = MibTableRow
bladeIPv6AddressEntry = _BladeIPv6AddressEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 2, 1)
)
bladeIPv6AddressEntry.setIndexNames(
    (0, "BLADE-MIB", "bladeIPv6AddressIndex"),
    (0, "BLADE-MIB", "bladeIPv6AddressPortIndex"),
    (0, "BLADE-MIB", "bladeIPv6AddressEntryIndex"),
)
if mibBuilder.loadTexts:
    bladeIPv6AddressEntry.setStatus("mandatory")
_BladeIPv6AddressIndex_Type = Integer32
_BladeIPv6AddressIndex_Object = MibTableColumn
bladeIPv6AddressIndex = _BladeIPv6AddressIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 2, 1, 1),
    _BladeIPv6AddressIndex_Type()
)
bladeIPv6AddressIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeIPv6AddressIndex.setStatus("mandatory")
_BladeIPv6AddressPortIndex_Type = Integer32
_BladeIPv6AddressPortIndex_Object = MibTableColumn
bladeIPv6AddressPortIndex = _BladeIPv6AddressPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 2, 1, 2),
    _BladeIPv6AddressPortIndex_Type()
)
bladeIPv6AddressPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeIPv6AddressPortIndex.setStatus("mandatory")
_BladeIPv6AddressEntryIndex_Type = Integer32
_BladeIPv6AddressEntryIndex_Object = MibTableColumn
bladeIPv6AddressEntryIndex = _BladeIPv6AddressEntryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 2, 1, 3),
    _BladeIPv6AddressEntryIndex_Type()
)
bladeIPv6AddressEntryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeIPv6AddressEntryIndex.setStatus("mandatory")


class _BladeIPv6AddressType_Type(Integer32):
    """Custom type bladeIPv6AddressType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("active-static", 1),
          ("dhcp6", 2),
          ("link-local", 3),
          ("autconfig", 4),
          ("current", 5))
    )


_BladeIPv6AddressType_Type.__name__ = "Integer32"
_BladeIPv6AddressType_Object = MibTableColumn
bladeIPv6AddressType = _BladeIPv6AddressType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 2, 1, 4),
    _BladeIPv6AddressType_Type()
)
bladeIPv6AddressType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeIPv6AddressType.setStatus("mandatory")
_BladeIPv6Address_Type = InetAddressIPv6
_BladeIPv6Address_Object = MibTableColumn
bladeIPv6Address = _BladeIPv6Address_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 2, 1, 5),
    _BladeIPv6Address_Type()
)
bladeIPv6Address.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeIPv6Address.setStatus("mandatory")


class _BladeIPv6AddressPrefixLen_Type(Integer32):
    """Custom type bladeIPv6AddressPrefixLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_BladeIPv6AddressPrefixLen_Type.__name__ = "Integer32"
_BladeIPv6AddressPrefixLen_Object = MibTableColumn
bladeIPv6AddressPrefixLen = _BladeIPv6AddressPrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 2, 1, 6),
    _BladeIPv6AddressPrefixLen_Type()
)
bladeIPv6AddressPrefixLen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeIPv6AddressPrefixLen.setStatus("mandatory")
_BladeIPv6AddressDefaultRoute_Type = InetAddressIPv6
_BladeIPv6AddressDefaultRoute_Object = MibTableColumn
bladeIPv6AddressDefaultRoute = _BladeIPv6AddressDefaultRoute_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 2, 1, 7),
    _BladeIPv6AddressDefaultRoute_Type()
)
bladeIPv6AddressDefaultRoute.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeIPv6AddressDefaultRoute.setStatus("mandatory")
_BladeBayDataTable_Object = MibTable
bladeBayDataTable = _BladeBayDataTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 13)
)
if mibBuilder.loadTexts:
    bladeBayDataTable.setStatus("mandatory")
_BladeBayDataEntry_Object = MibTableRow
bladeBayDataEntry = _BladeBayDataEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 13, 1)
)
bladeBayDataEntry.setIndexNames(
    (0, "BLADE-MIB", "bayDataIndex"),
)
if mibBuilder.loadTexts:
    bladeBayDataEntry.setStatus("mandatory")
_BayDataIndex_Type = Integer32
_BayDataIndex_Object = MibTableColumn
bayDataIndex = _BayDataIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 13, 1, 1),
    _BayDataIndex_Type()
)
bayDataIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bayDataIndex.setStatus("mandatory")


class _BayDataBladeId_Type(Integer32):
    """Custom type bayDataBladeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_BayDataBladeId_Type.__name__ = "Integer32"
_BayDataBladeId_Object = MibTableColumn
bayDataBladeId = _BayDataBladeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 13, 1, 2),
    _BayDataBladeId_Type()
)
bayDataBladeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bayDataBladeId.setStatus("mandatory")


class _BayDataBladeExists_Type(Integer32):
    """Custom type bayDataBladeExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_BayDataBladeExists_Type.__name__ = "Integer32"
_BayDataBladeExists_Object = MibTableColumn
bayDataBladeExists = _BayDataBladeExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 13, 1, 3),
    _BayDataBladeExists_Type()
)
bayDataBladeExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bayDataBladeExists.setStatus("mandatory")


class _BayDataBladePowerState_Type(Integer32):
    """Custom type bayDataBladePowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("standby", 3),
          ("hibernate", 4))
    )


_BayDataBladePowerState_Type.__name__ = "Integer32"
_BayDataBladePowerState_Object = MibTableColumn
bayDataBladePowerState = _BayDataBladePowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 13, 1, 4),
    _BayDataBladePowerState_Type()
)
bayDataBladePowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bayDataBladePowerState.setStatus("mandatory")
_BayDataBladeName_Type = OctetString
_BayDataBladeName_Object = MibTableColumn
bayDataBladeName = _BayDataBladeName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 13, 1, 5),
    _BayDataBladeName_Type()
)
bayDataBladeName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bayDataBladeName.setStatus("mandatory")
_BayData_Type = OctetString
_BayData_Object = MibTableColumn
bayData = _BayData_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 13, 1, 6),
    _BayData_Type()
)
bayData.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bayData.setStatus("mandatory")


class _BayDataBladeStatus_Type(Integer32):
    """Custom type bayDataBladeStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("supported", 0),
          ("bsmp", 1),
          ("notPresent", 2),
          ("discovering", 3),
          ("notApplicable", 255))
    )


_BayDataBladeStatus_Type.__name__ = "Integer32"
_BayDataBladeStatus_Object = MibTableColumn
bayDataBladeStatus = _BayDataBladeStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 13, 1, 7),
    _BayDataBladeStatus_Type()
)
bayDataBladeStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bayDataBladeStatus.setStatus("mandatory")
_BladeSPEthOverUSBInterface_ObjectIdentity = ObjectIdentity
bladeSPEthOverUSBInterface = _BladeSPEthOverUSBInterface_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 14)
)
_SpEthOverUSBInterfaceTable_Object = MibTable
spEthOverUSBInterfaceTable = _SpEthOverUSBInterfaceTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 14, 1)
)
if mibBuilder.loadTexts:
    spEthOverUSBInterfaceTable.setStatus("mandatory")
_SpEthOverUSBInterfaceEntry_Object = MibTableRow
spEthOverUSBInterfaceEntry = _SpEthOverUSBInterfaceEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 14, 1, 1)
)
spEthOverUSBInterfaceEntry.setIndexNames(
    (0, "BLADE-MIB", "spEthOverUSBInterfaceIndex"),
)
if mibBuilder.loadTexts:
    spEthOverUSBInterfaceEntry.setStatus("mandatory")
_SpEthOverUSBInterfaceIndex_Type = Integer32
_SpEthOverUSBInterfaceIndex_Object = MibTableColumn
spEthOverUSBInterfaceIndex = _SpEthOverUSBInterfaceIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 14, 1, 1, 1),
    _SpEthOverUSBInterfaceIndex_Type()
)
spEthOverUSBInterfaceIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    spEthOverUSBInterfaceIndex.setStatus("mandatory")
_SpEthOverUSBInterfaceBladeId_Type = OctetString
_SpEthOverUSBInterfaceBladeId_Object = MibTableColumn
spEthOverUSBInterfaceBladeId = _SpEthOverUSBInterfaceBladeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 14, 1, 1, 2),
    _SpEthOverUSBInterfaceBladeId_Type()
)
spEthOverUSBInterfaceBladeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    spEthOverUSBInterfaceBladeId.setStatus("mandatory")


class _SpEthOverUSBInterfaceBladeExists_Type(Integer32):
    """Custom type spEthOverUSBInterfaceBladeExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_SpEthOverUSBInterfaceBladeExists_Type.__name__ = "Integer32"
_SpEthOverUSBInterfaceBladeExists_Object = MibTableColumn
spEthOverUSBInterfaceBladeExists = _SpEthOverUSBInterfaceBladeExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 14, 1, 1, 3),
    _SpEthOverUSBInterfaceBladeExists_Type()
)
spEthOverUSBInterfaceBladeExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    spEthOverUSBInterfaceBladeExists.setStatus("mandatory")
_SpEthOverUSBInterfaceBladeName_Type = OctetString
_SpEthOverUSBInterfaceBladeName_Object = MibTableColumn
spEthOverUSBInterfaceBladeName = _SpEthOverUSBInterfaceBladeName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 14, 1, 1, 6),
    _SpEthOverUSBInterfaceBladeName_Type()
)
spEthOverUSBInterfaceBladeName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    spEthOverUSBInterfaceBladeName.setStatus("mandatory")


class _SpEthOverUSBInterfaceEnable_Type(Integer32):
    """Custom type spEthOverUSBInterfaceEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1),
          ("notApplicable", 255))
    )


_SpEthOverUSBInterfaceEnable_Type.__name__ = "Integer32"
_SpEthOverUSBInterfaceEnable_Object = MibTableColumn
spEthOverUSBInterfaceEnable = _SpEthOverUSBInterfaceEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 14, 1, 1, 9),
    _SpEthOverUSBInterfaceEnable_Type()
)
spEthOverUSBInterfaceEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    spEthOverUSBInterfaceEnable.setStatus("mandatory")
_BladeManagementNetwork_ObjectIdentity = ObjectIdentity
bladeManagementNetwork = _BladeManagementNetwork_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 15)
)


class _BladeManagementNetworkControlEnable_Type(Integer32):
    """Custom type bladeManagementNetworkControlEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_BladeManagementNetworkControlEnable_Type.__name__ = "Integer32"
_BladeManagementNetworkControlEnable_Object = MibScalar
bladeManagementNetworkControlEnable = _BladeManagementNetworkControlEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 15, 1),
    _BladeManagementNetworkControlEnable_Type()
)
bladeManagementNetworkControlEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeManagementNetworkControlEnable.setStatus("mandatory")
_BladeManagementNetworkInfoTable_Object = MibTable
bladeManagementNetworkInfoTable = _BladeManagementNetworkInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 15, 2)
)
if mibBuilder.loadTexts:
    bladeManagementNetworkInfoTable.setStatus("mandatory")
_BladeManagementNetworkInfoEntry_Object = MibTableRow
bladeManagementNetworkInfoEntry = _BladeManagementNetworkInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 15, 2, 1)
)
bladeManagementNetworkInfoEntry.setIndexNames(
    (0, "BLADE-MIB", "bladeManagementNetworkInfoIndex"),
)
if mibBuilder.loadTexts:
    bladeManagementNetworkInfoEntry.setStatus("mandatory")
_BladeManagementNetworkInfoIndex_Type = Integer32
_BladeManagementNetworkInfoIndex_Object = MibTableColumn
bladeManagementNetworkInfoIndex = _BladeManagementNetworkInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 15, 2, 1, 1),
    _BladeManagementNetworkInfoIndex_Type()
)
bladeManagementNetworkInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementNetworkInfoIndex.setStatus("mandatory")


class _BladeManagementNetworkInfoBladeId_Type(Integer32):
    """Custom type bladeManagementNetworkInfoBladeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_BladeManagementNetworkInfoBladeId_Type.__name__ = "Integer32"
_BladeManagementNetworkInfoBladeId_Object = MibTableColumn
bladeManagementNetworkInfoBladeId = _BladeManagementNetworkInfoBladeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 15, 2, 1, 2),
    _BladeManagementNetworkInfoBladeId_Type()
)
bladeManagementNetworkInfoBladeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementNetworkInfoBladeId.setStatus("mandatory")
_BladeManagementNetworkInfoBladeExist_Type = Integer32
_BladeManagementNetworkInfoBladeExist_Object = MibTableColumn
bladeManagementNetworkInfoBladeExist = _BladeManagementNetworkInfoBladeExist_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 15, 2, 1, 3),
    _BladeManagementNetworkInfoBladeExist_Type()
)
bladeManagementNetworkInfoBladeExist.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementNetworkInfoBladeExist.setStatus("mandatory")
_BladeManagementNetworkInfoBladeSupport_Type = Integer32
_BladeManagementNetworkInfoBladeSupport_Object = MibTableColumn
bladeManagementNetworkInfoBladeSupport = _BladeManagementNetworkInfoBladeSupport_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 15, 2, 1, 4),
    _BladeManagementNetworkInfoBladeSupport_Type()
)
bladeManagementNetworkInfoBladeSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementNetworkInfoBladeSupport.setStatus("mandatory")


class _BladeManagementNetworkInfoPathStatus_Type(Integer32):
    """Custom type bladeManagementNetworkInfoPathStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("up", 1))
    )


_BladeManagementNetworkInfoPathStatus_Type.__name__ = "Integer32"
_BladeManagementNetworkInfoPathStatus_Object = MibTableColumn
bladeManagementNetworkInfoPathStatus = _BladeManagementNetworkInfoPathStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 15, 2, 1, 5),
    _BladeManagementNetworkInfoPathStatus_Type()
)
bladeManagementNetworkInfoPathStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementNetworkInfoPathStatus.setStatus("mandatory")
_BladeManagementNetworkInfoBladeIPAddr_Type = IpAddress
_BladeManagementNetworkInfoBladeIPAddr_Object = MibTableColumn
bladeManagementNetworkInfoBladeIPAddr = _BladeManagementNetworkInfoBladeIPAddr_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 15, 2, 1, 6),
    _BladeManagementNetworkInfoBladeIPAddr_Type()
)
bladeManagementNetworkInfoBladeIPAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementNetworkInfoBladeIPAddr.setStatus("mandatory")
_BladeManagementNetworkInfoBladeMACAddr_Type = OctetString
_BladeManagementNetworkInfoBladeMACAddr_Object = MibTableColumn
bladeManagementNetworkInfoBladeMACAddr = _BladeManagementNetworkInfoBladeMACAddr_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 15, 2, 1, 7),
    _BladeManagementNetworkInfoBladeMACAddr_Type()
)
bladeManagementNetworkInfoBladeMACAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementNetworkInfoBladeMACAddr.setStatus("mandatory")
_BladeManagementNetworkInfoSwitchId_Type = Integer32
_BladeManagementNetworkInfoSwitchId_Object = MibTableColumn
bladeManagementNetworkInfoSwitchId = _BladeManagementNetworkInfoSwitchId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 15, 2, 1, 8),
    _BladeManagementNetworkInfoSwitchId_Type()
)
bladeManagementNetworkInfoSwitchId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementNetworkInfoSwitchId.setStatus("mandatory")
_SwitchModule_ObjectIdentity = ObjectIdentity
switchModule = _SwitchModule_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3)
)
_SwitchModuleControl_ObjectIdentity = ObjectIdentity
switchModuleControl = _SwitchModuleControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1)
)
_SmControlTable_Object = MibTable
smControlTable = _SmControlTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1)
)
if mibBuilder.loadTexts:
    smControlTable.setStatus("mandatory")
_SmControlEntry_Object = MibTableRow
smControlEntry = _SmControlEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1)
)
smControlEntry.setIndexNames(
    (0, "BLADE-MIB", "smControlIndex"),
)
if mibBuilder.loadTexts:
    smControlEntry.setStatus("mandatory")
_SmControlIndex_Type = Integer32
_SmControlIndex_Object = MibTableColumn
smControlIndex = _SmControlIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 1),
    _SmControlIndex_Type()
)
smControlIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smControlIndex.setStatus("mandatory")


class _SwitchModuleControlId_Type(Integer32):
    """Custom type switchModuleControlId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("module1", 1),
          ("module2", 2),
          ("module3", 3),
          ("module4", 4),
          ("module5", 5),
          ("module6", 6),
          ("module7", 7),
          ("module8", 8),
          ("module9", 9),
          ("module10", 10))
    )


_SwitchModuleControlId_Type.__name__ = "Integer32"
_SwitchModuleControlId_Object = MibTableColumn
switchModuleControlId = _SwitchModuleControlId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 2),
    _SwitchModuleControlId_Type()
)
switchModuleControlId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    switchModuleControlId.setStatus("mandatory")


class _SmPostResultsAvailable_Type(Integer32):
    """Custom type smPostResultsAvailable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_SmPostResultsAvailable_Type.__name__ = "Integer32"
_SmPostResultsAvailable_Object = MibTableColumn
smPostResultsAvailable = _SmPostResultsAvailable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 3),
    _SmPostResultsAvailable_Type()
)
smPostResultsAvailable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smPostResultsAvailable.setStatus("mandatory")
_SmPostResultsValue_Type = OctetString
_SmPostResultsValue_Object = MibTableColumn
smPostResultsValue = _SmPostResultsValue_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 4),
    _SmPostResultsValue_Type()
)
smPostResultsValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smPostResultsValue.setStatus("mandatory")


class _SwitchModuleMemDiagEnableDisable_Type(Integer32):
    """Custom type switchModuleMemDiagEnableDisable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 0),
          ("disabled", 1))
    )


_SwitchModuleMemDiagEnableDisable_Type.__name__ = "Integer32"
_SwitchModuleMemDiagEnableDisable_Object = MibTableColumn
switchModuleMemDiagEnableDisable = _SwitchModuleMemDiagEnableDisable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 5),
    _SwitchModuleMemDiagEnableDisable_Type()
)
switchModuleMemDiagEnableDisable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    switchModuleMemDiagEnableDisable.setStatus("mandatory")


class _SmCfgCtrlEnableDisable_Type(Integer32):
    """Custom type smCfgCtrlEnableDisable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SmCfgCtrlEnableDisable_Type.__name__ = "Integer32"
_SmCfgCtrlEnableDisable_Object = MibTableColumn
smCfgCtrlEnableDisable = _SmCfgCtrlEnableDisable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 6),
    _SmCfgCtrlEnableDisable_Type()
)
smCfgCtrlEnableDisable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smCfgCtrlEnableDisable.setStatus("mandatory")


class _SmExtEthPortsEnableDisable_Type(Integer32):
    """Custom type smExtEthPortsEnableDisable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SmExtEthPortsEnableDisable_Type.__name__ = "Integer32"
_SmExtEthPortsEnableDisable_Object = MibTableColumn
smExtEthPortsEnableDisable = _SmExtEthPortsEnableDisable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 7),
    _SmExtEthPortsEnableDisable_Type()
)
smExtEthPortsEnableDisable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smExtEthPortsEnableDisable.setStatus("mandatory")


class _SwitchPingRequest_Type(Integer32):
    """Custom type switchPingRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_SwitchPingRequest_Type.__name__ = "Integer32"
_SwitchPingRequest_Object = MibTableColumn
switchPingRequest = _SwitchPingRequest_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 8),
    _SwitchPingRequest_Type()
)
switchPingRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    switchPingRequest.setStatus("deprecated")


class _SmCfgCtrlOnResetEnableDisable_Type(Integer32):
    """Custom type smCfgCtrlOnResetEnableDisable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 0),
          ("disabled", 1))
    )


_SmCfgCtrlOnResetEnableDisable_Type.__name__ = "Integer32"
_SmCfgCtrlOnResetEnableDisable_Object = MibTableColumn
smCfgCtrlOnResetEnableDisable = _SmCfgCtrlOnResetEnableDisable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 9),
    _SmCfgCtrlOnResetEnableDisable_Type()
)
smCfgCtrlOnResetEnableDisable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smCfgCtrlOnResetEnableDisable.setStatus("mandatory")


class _SmHealthState_Type(Integer32):
    """Custom type smHealthState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("good", 1),
          ("warning", 2),
          ("bad", 3))
    )


_SmHealthState_Type.__name__ = "Integer32"
_SmHealthState_Object = MibTableColumn
smHealthState = _SmHealthState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 15),
    _SmHealthState_Type()
)
smHealthState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smHealthState.setStatus("mandatory")


class _SmPMState_Type(Integer32):
    """Custom type smPMState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("pending", 1),
          ("attention", 2),
          ("active", 3),
          ("notApplicable", 255))
    )


_SmPMState_Type.__name__ = "Integer32"
_SmPMState_Object = MibTableColumn
smPMState = _SmPMState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 16),
    _SmPMState_Type()
)
smPMState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smPMState.setStatus("mandatory")


class _SmPMCtrlEnableDisable_Type(Integer32):
    """Custom type smPMCtrlEnableDisable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SmPMCtrlEnableDisable_Type.__name__ = "Integer32"
_SmPMCtrlEnableDisable_Object = MibTableColumn
smPMCtrlEnableDisable = _SmPMCtrlEnableDisable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 17),
    _SmPMCtrlEnableDisable_Type()
)
smPMCtrlEnableDisable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smPMCtrlEnableDisable.setStatus("mandatory")
_SmIOCompatibility_Type = OctetString
_SmIOCompatibility_Object = MibTableColumn
smIOCompatibility = _SmIOCompatibility_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 18),
    _SmIOCompatibility_Type()
)
smIOCompatibility.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smIOCompatibility.setStatus("mandatory")
_SmPingTable_Object = MibTable
smPingTable = _SmPingTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 2)
)
if mibBuilder.loadTexts:
    smPingTable.setStatus("mandatory")
_SmPingEntry_Object = MibTableRow
smPingEntry = _SmPingEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 2, 1)
)
smPingEntry.setIndexNames(
    (0, "BLADE-MIB", "smPingIndex"),
    (0, "BLADE-MIB", "smPingAddressEntryIndex"),
)
if mibBuilder.loadTexts:
    smPingEntry.setStatus("mandatory")
_SmPingIndex_Type = Integer32
_SmPingIndex_Object = MibTableColumn
smPingIndex = _SmPingIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 2, 1, 1),
    _SmPingIndex_Type()
)
smPingIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smPingIndex.setStatus("mandatory")
_SmPingAddressEntryIndex_Type = Integer32
_SmPingAddressEntryIndex_Object = MibTableColumn
smPingAddressEntryIndex = _SmPingAddressEntryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 2, 1, 2),
    _SmPingAddressEntryIndex_Type()
)
smPingAddressEntryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smPingAddressEntryIndex.setStatus("mandatory")
_SmPingAddress_Type = OctetString
_SmPingAddress_Object = MibTableColumn
smPingAddress = _SmPingAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 2, 1, 3),
    _SmPingAddress_Type()
)
smPingAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smPingAddress.setStatus("mandatory")


class _SmPingAddressExecute_Type(Integer32):
    """Custom type smPingAddressExecute based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_SmPingAddressExecute_Type.__name__ = "Integer32"
_SmPingAddressExecute_Object = MibTableColumn
smPingAddressExecute = _SmPingAddressExecute_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 2, 1, 4),
    _SmPingAddressExecute_Type()
)
smPingAddressExecute.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smPingAddressExecute.setStatus("mandatory")
_SmPowerRestartTable_Object = MibTable
smPowerRestartTable = _SmPowerRestartTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7)
)
if mibBuilder.loadTexts:
    smPowerRestartTable.setStatus("mandatory")
_SmPowerRestartEntry_Object = MibTableRow
smPowerRestartEntry = _SmPowerRestartEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1)
)
smPowerRestartEntry.setIndexNames(
    (0, "BLADE-MIB", "smPowerRestartIndex"),
)
if mibBuilder.loadTexts:
    smPowerRestartEntry.setStatus("mandatory")
_SmPowerRestartIndex_Type = Integer32
_SmPowerRestartIndex_Object = MibTableColumn
smPowerRestartIndex = _SmPowerRestartIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 1),
    _SmPowerRestartIndex_Type()
)
smPowerRestartIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smPowerRestartIndex.setStatus("mandatory")


class _SmPowerRestartId_Type(Integer32):
    """Custom type smPowerRestartId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("module1", 1),
          ("module2", 2),
          ("module3", 3),
          ("module4", 4),
          ("module5", 5),
          ("module6", 6),
          ("module7", 7),
          ("module8", 8),
          ("module9", 9),
          ("module10", 10))
    )


_SmPowerRestartId_Type.__name__ = "Integer32"
_SmPowerRestartId_Object = MibTableColumn
smPowerRestartId = _SmPowerRestartId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 2),
    _SmPowerRestartId_Type()
)
smPowerRestartId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smPowerRestartId.setStatus("mandatory")


class _SmSwitchExists_Type(Integer32):
    """Custom type smSwitchExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_SmSwitchExists_Type.__name__ = "Integer32"
_SmSwitchExists_Object = MibTableColumn
smSwitchExists = _SmSwitchExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 3),
    _SmSwitchExists_Type()
)
smSwitchExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smSwitchExists.setStatus("mandatory")


class _SmSwitchType_Type(Integer32):
    """Custom type smSwitchType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              20,
              30,
              40)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("ethernet", 1),
          ("fibre", 2),
          ("opm", 3),
          ("serialCM", 4),
          ("copperPassThrough", 5),
          ("infiniband", 6),
          ("highSpeed", 20),
          ("passThrough", 30),
          ("sas", 40))
    )


_SmSwitchType_Type.__name__ = "Integer32"
_SmSwitchType_Object = MibTableColumn
smSwitchType = _SmSwitchType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 4),
    _SmSwitchType_Type()
)
smSwitchType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smSwitchType.setStatus("mandatory")
_SmMACAddress_Type = OctetString
_SmMACAddress_Object = MibTableColumn
smMACAddress = _SmMACAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 5),
    _SmMACAddress_Type()
)
smMACAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smMACAddress.setStatus("mandatory")
_SmIPAddress_Type = IpAddress
_SmIPAddress_Object = MibTableColumn
smIPAddress = _SmIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 6),
    _SmIPAddress_Type()
)
smIPAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smIPAddress.setStatus("mandatory")


class _SwitchModulePowerOnOff_Type(Integer32):
    """Custom type switchModulePowerOnOff based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("poweroff", 0),
          ("poweron", 1),
          ("shutdownInProgress", 2))
    )


_SwitchModulePowerOnOff_Type.__name__ = "Integer32"
_SwitchModulePowerOnOff_Object = MibTableColumn
switchModulePowerOnOff = _SwitchModulePowerOnOff_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 7),
    _SwitchModulePowerOnOff_Type()
)
switchModulePowerOnOff.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    switchModulePowerOnOff.setStatus("mandatory")


class _SmReset_Type(Integer32):
    """Custom type smReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_SmReset_Type.__name__ = "Integer32"
_SmReset_Object = MibTableColumn
smReset = _SmReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 8),
    _SmReset_Type()
)
smReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smReset.setStatus("mandatory")


class _SmResetToDefault_Type(Integer32):
    """Custom type smResetToDefault based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_SmResetToDefault_Type.__name__ = "Integer32"
_SmResetToDefault_Object = MibTableColumn
smResetToDefault = _SmResetToDefault_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 9),
    _SmResetToDefault_Type()
)
smResetToDefault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smResetToDefault.setStatus("mandatory")


class _SmRestartAndRunStdDiag_Type(Integer32):
    """Custom type smRestartAndRunStdDiag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_SmRestartAndRunStdDiag_Type.__name__ = "Integer32"
_SmRestartAndRunStdDiag_Object = MibTableColumn
smRestartAndRunStdDiag = _SmRestartAndRunStdDiag_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 10),
    _SmRestartAndRunStdDiag_Type()
)
smRestartAndRunStdDiag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smRestartAndRunStdDiag.setStatus("mandatory")


class _SmRestartAndRunExtDiag_Type(Integer32):
    """Custom type smRestartAndRunExtDiag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_SmRestartAndRunExtDiag_Type.__name__ = "Integer32"
_SmRestartAndRunExtDiag_Object = MibTableColumn
smRestartAndRunExtDiag = _SmRestartAndRunExtDiag_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 11),
    _SmRestartAndRunExtDiag_Type()
)
smRestartAndRunExtDiag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smRestartAndRunExtDiag.setStatus("mandatory")


class _SmRestartAndRunFullDiag_Type(Integer32):
    """Custom type smRestartAndRunFullDiag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_SmRestartAndRunFullDiag_Type.__name__ = "Integer32"
_SmRestartAndRunFullDiag_Object = MibTableColumn
smRestartAndRunFullDiag = _SmRestartAndRunFullDiag_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 12),
    _SmRestartAndRunFullDiag_Type()
)
smRestartAndRunFullDiag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smRestartAndRunFullDiag.setStatus("mandatory")


class _SmSwitchSubType_Type(Integer32):
    """Custom type smSwitchSubType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("ethernet", 1),
          ("fibre", 2),
          ("infiniband", 6),
          ("sas", 7),
          ("raidsas", 8),
          ("icpm", 9))
    )


_SmSwitchSubType_Type.__name__ = "Integer32"
_SmSwitchSubType_Object = MibTableColumn
smSwitchSubType = _SmSwitchSubType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 20),
    _SmSwitchSubType_Type()
)
smSwitchSubType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smSwitchSubType.setStatus("mandatory")
_SmSwitchWidth_Type = Integer32
_SmSwitchWidth_Object = MibTableColumn
smSwitchWidth = _SmSwitchWidth_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 21),
    _SmSwitchWidth_Type()
)
smSwitchWidth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smSwitchWidth.setStatus("mandatory")
_SmManufacturingID_Type = OctetString
_SmManufacturingID_Object = MibTableColumn
smManufacturingID = _SmManufacturingID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 22),
    _SmManufacturingID_Type()
)
smManufacturingID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smManufacturingID.setStatus("mandatory")


class _SmStackingModeState_Type(Integer32):
    """Custom type smStackingModeState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("standby", 0),
          ("member", 1),
          ("master", 2),
          ("notApplicable", 255))
    )


_SmStackingModeState_Type.__name__ = "Integer32"
_SmStackingModeState_Object = MibTableColumn
smStackingModeState = _SmStackingModeState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 23),
    _SmStackingModeState_Type()
)
smStackingModeState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smStackingModeState.setStatus("mandatory")
_SmStackingModeInfo_Type = OctetString
_SmStackingModeInfo_Object = MibTableColumn
smStackingModeInfo = _SmStackingModeInfo_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 24),
    _SmStackingModeInfo_Type()
)
smStackingModeInfo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smStackingModeInfo.setStatus("mandatory")
_SmIOCompatibilityTable_Object = MibTable
smIOCompatibilityTable = _SmIOCompatibilityTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 10)
)
if mibBuilder.loadTexts:
    smIOCompatibilityTable.setStatus("mandatory")
_SmIOCompatibilityEntry_Object = MibTableRow
smIOCompatibilityEntry = _SmIOCompatibilityEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 10, 1)
)
smIOCompatibilityEntry.setIndexNames(
    (0, "BLADE-MIB", "smIOCompatibilityIndex"),
)
if mibBuilder.loadTexts:
    smIOCompatibilityEntry.setStatus("mandatory")
_SmIOCompatibilityIndex_Type = Integer32
_SmIOCompatibilityIndex_Object = MibTableColumn
smIOCompatibilityIndex = _SmIOCompatibilityIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 10, 1, 1),
    _SmIOCompatibilityIndex_Type()
)
smIOCompatibilityIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smIOCompatibilityIndex.setStatus("mandatory")


class _SmIOCompatibilityId_Type(Integer32):
    """Custom type smIOCompatibilityId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("module1", 1),
          ("module2", 2),
          ("module3", 3),
          ("module4", 4),
          ("module5", 5),
          ("module6", 6),
          ("module7", 7),
          ("module8", 8),
          ("module9", 9),
          ("module10", 10))
    )


_SmIOCompatibilityId_Type.__name__ = "Integer32"
_SmIOCompatibilityId_Object = MibTableColumn
smIOCompatibilityId = _SmIOCompatibilityId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 10, 1, 2),
    _SmIOCompatibilityId_Type()
)
smIOCompatibilityId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smIOCompatibilityId.setStatus("mandatory")
_SmIOCompatibilityModuleBay_Type = OctetString
_SmIOCompatibilityModuleBay_Object = MibTableColumn
smIOCompatibilityModuleBay = _SmIOCompatibilityModuleBay_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 10, 1, 3),
    _SmIOCompatibilityModuleBay_Type()
)
smIOCompatibilityModuleBay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smIOCompatibilityModuleBay.setStatus("mandatory")
_SmIOCompatibilityModulePower_Type = OctetString
_SmIOCompatibilityModulePower_Object = MibTableColumn
smIOCompatibilityModulePower = _SmIOCompatibilityModulePower_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 10, 1, 4),
    _SmIOCompatibilityModulePower_Type()
)
smIOCompatibilityModulePower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smIOCompatibilityModulePower.setStatus("mandatory")
_SmIOCompatibilityModuleFabricType_Type = OctetString
_SmIOCompatibilityModuleFabricType_Object = MibTableColumn
smIOCompatibilityModuleFabricType = _SmIOCompatibilityModuleFabricType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 10, 1, 5),
    _SmIOCompatibilityModuleFabricType_Type()
)
smIOCompatibilityModuleFabricType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smIOCompatibilityModuleFabricType.setStatus("mandatory")
_SmIOCompatibilityStatus_Type = OctetString
_SmIOCompatibilityStatus_Object = MibTableColumn
smIOCompatibilityStatus = _SmIOCompatibilityStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 10, 1, 6),
    _SmIOCompatibilityStatus_Type()
)
smIOCompatibilityStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smIOCompatibilityStatus.setStatus("mandatory")
_SwitchModuleConfig_ObjectIdentity = ObjectIdentity
switchModuleConfig = _SwitchModuleConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2)
)
_SwitchMgmtNetworkCfg_ObjectIdentity = ObjectIdentity
switchMgmtNetworkCfg = _SwitchMgmtNetworkCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1)
)
_SwitchCurrentNwCfg_ObjectIdentity = ObjectIdentity
switchCurrentNwCfg = _SwitchCurrentNwCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1)
)
_SmCurrentIPInfoTable_Object = MibTable
smCurrentIPInfoTable = _SmCurrentIPInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1)
)
if mibBuilder.loadTexts:
    smCurrentIPInfoTable.setStatus("mandatory")
_SmCurrentIPInfoEntry_Object = MibTableRow
smCurrentIPInfoEntry = _SmCurrentIPInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1)
)
smCurrentIPInfoEntry.setIndexNames(
    (0, "BLADE-MIB", "smCurrentIPInfoIndex"),
)
if mibBuilder.loadTexts:
    smCurrentIPInfoEntry.setStatus("mandatory")
_SmCurrentIPInfoIndex_Type = Integer32
_SmCurrentIPInfoIndex_Object = MibTableColumn
smCurrentIPInfoIndex = _SmCurrentIPInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 1),
    _SmCurrentIPInfoIndex_Type()
)
smCurrentIPInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smCurrentIPInfoIndex.setStatus("mandatory")


class _SmCurrentIPInfoId_Type(Integer32):
    """Custom type smCurrentIPInfoId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("module1", 1),
          ("module2", 2),
          ("module3", 3),
          ("module4", 4),
          ("module5", 5),
          ("module6", 6),
          ("module7", 7),
          ("module8", 8),
          ("module9", 9),
          ("module10", 10))
    )


_SmCurrentIPInfoId_Type.__name__ = "Integer32"
_SmCurrentIPInfoId_Object = MibTableColumn
smCurrentIPInfoId = _SmCurrentIPInfoId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 2),
    _SmCurrentIPInfoId_Type()
)
smCurrentIPInfoId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smCurrentIPInfoId.setStatus("mandatory")


class _SmCurrentIPInfoExists_Type(Integer32):
    """Custom type smCurrentIPInfoExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_SmCurrentIPInfoExists_Type.__name__ = "Integer32"
_SmCurrentIPInfoExists_Object = MibTableColumn
smCurrentIPInfoExists = _SmCurrentIPInfoExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 3),
    _SmCurrentIPInfoExists_Type()
)
smCurrentIPInfoExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smCurrentIPInfoExists.setStatus("mandatory")


class _SmCurrentIPInfoPowerState_Type(Integer32):
    """Custom type smCurrentIPInfoPowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("shutdownInProgress", 2))
    )


_SmCurrentIPInfoPowerState_Type.__name__ = "Integer32"
_SmCurrentIPInfoPowerState_Object = MibTableColumn
smCurrentIPInfoPowerState = _SmCurrentIPInfoPowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 4),
    _SmCurrentIPInfoPowerState_Type()
)
smCurrentIPInfoPowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smCurrentIPInfoPowerState.setStatus("mandatory")
_SmCurrentIPAddr_Type = IpAddress
_SmCurrentIPAddr_Object = MibTableColumn
smCurrentIPAddr = _SmCurrentIPAddr_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 6),
    _SmCurrentIPAddr_Type()
)
smCurrentIPAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smCurrentIPAddr.setStatus("mandatory")
_SmCurrentSubnetMask_Type = IpAddress
_SmCurrentSubnetMask_Object = MibTableColumn
smCurrentSubnetMask = _SmCurrentSubnetMask_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 7),
    _SmCurrentSubnetMask_Type()
)
smCurrentSubnetMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smCurrentSubnetMask.setStatus("mandatory")
_SmCurrentGateway_Type = IpAddress
_SmCurrentGateway_Object = MibTableColumn
smCurrentGateway = _SmCurrentGateway_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 8),
    _SmCurrentGateway_Type()
)
smCurrentGateway.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smCurrentGateway.setStatus("mandatory")


class _SmCurrentIPConfigMethod_Type(Integer32):
    """Custom type smCurrentIPConfigMethod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("static", 1),
          ("dhcp", 2),
          ("nat", 3),
          ("bootp", 4))
    )


_SmCurrentIPConfigMethod_Type.__name__ = "Integer32"
_SmCurrentIPConfigMethod_Object = MibTableColumn
smCurrentIPConfigMethod = _SmCurrentIPConfigMethod_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 9),
    _SmCurrentIPConfigMethod_Type()
)
smCurrentIPConfigMethod.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smCurrentIPConfigMethod.setStatus("mandatory")
_SwitchNewNwCfg_ObjectIdentity = ObjectIdentity
switchNewNwCfg = _SwitchNewNwCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2)
)
_SmNewIPInfoTable_Object = MibTable
smNewIPInfoTable = _SmNewIPInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1)
)
if mibBuilder.loadTexts:
    smNewIPInfoTable.setStatus("mandatory")
_SmNewIPInfoEntry_Object = MibTableRow
smNewIPInfoEntry = _SmNewIPInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1)
)
smNewIPInfoEntry.setIndexNames(
    (0, "BLADE-MIB", "smNewIPInfoIndex"),
)
if mibBuilder.loadTexts:
    smNewIPInfoEntry.setStatus("mandatory")
_SmNewIPInfoIndex_Type = Integer32
_SmNewIPInfoIndex_Object = MibTableColumn
smNewIPInfoIndex = _SmNewIPInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 1),
    _SmNewIPInfoIndex_Type()
)
smNewIPInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNewIPInfoIndex.setStatus("mandatory")


class _SmNewIPInfoId_Type(Integer32):
    """Custom type smNewIPInfoId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("module1", 1),
          ("module2", 2),
          ("module3", 3),
          ("module4", 4),
          ("module5", 5),
          ("module6", 6),
          ("module7", 7),
          ("module8", 8),
          ("module9", 9),
          ("module10", 10))
    )


_SmNewIPInfoId_Type.__name__ = "Integer32"
_SmNewIPInfoId_Object = MibTableColumn
smNewIPInfoId = _SmNewIPInfoId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 2),
    _SmNewIPInfoId_Type()
)
smNewIPInfoId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNewIPInfoId.setStatus("mandatory")


class _SmNewIPInfoExists_Type(Integer32):
    """Custom type smNewIPInfoExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_SmNewIPInfoExists_Type.__name__ = "Integer32"
_SmNewIPInfoExists_Object = MibTableColumn
smNewIPInfoExists = _SmNewIPInfoExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 3),
    _SmNewIPInfoExists_Type()
)
smNewIPInfoExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNewIPInfoExists.setStatus("mandatory")


class _SmNewIPInfoPowerState_Type(Integer32):
    """Custom type smNewIPInfoPowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_SmNewIPInfoPowerState_Type.__name__ = "Integer32"
_SmNewIPInfoPowerState_Object = MibTableColumn
smNewIPInfoPowerState = _SmNewIPInfoPowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 4),
    _SmNewIPInfoPowerState_Type()
)
smNewIPInfoPowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNewIPInfoPowerState.setStatus("mandatory")
_SmNewIPAddr_Type = IpAddress
_SmNewIPAddr_Object = MibTableColumn
smNewIPAddr = _SmNewIPAddr_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 6),
    _SmNewIPAddr_Type()
)
smNewIPAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNewIPAddr.setStatus("mandatory")
_SmNewSubnetMask_Type = IpAddress
_SmNewSubnetMask_Object = MibTableColumn
smNewSubnetMask = _SmNewSubnetMask_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 7),
    _SmNewSubnetMask_Type()
)
smNewSubnetMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNewSubnetMask.setStatus("mandatory")
_SmNewGateway_Type = IpAddress
_SmNewGateway_Object = MibTableColumn
smNewGateway = _SmNewGateway_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 8),
    _SmNewGateway_Type()
)
smNewGateway.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNewGateway.setStatus("mandatory")


class _SmNewIPConfigMethod_Type(Integer32):
    """Custom type smNewIPConfigMethod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("static", 1),
          ("dhcp", 2),
          ("nat", 3),
          ("bootp", 4))
    )


_SmNewIPConfigMethod_Type.__name__ = "Integer32"
_SmNewIPConfigMethod_Object = MibTableColumn
smNewIPConfigMethod = _SmNewIPConfigMethod_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 9),
    _SmNewIPConfigMethod_Type()
)
smNewIPConfigMethod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNewIPConfigMethod.setStatus("mandatory")


class _SmNewIPConfigEnableDisable_Type(Integer32):
    """Custom type smNewIPConfigEnableDisable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SmNewIPConfigEnableDisable_Type.__name__ = "Integer32"
_SmNewIPConfigEnableDisable_Object = MibTableColumn
smNewIPConfigEnableDisable = _SmNewIPConfigEnableDisable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 10),
    _SmNewIPConfigEnableDisable_Type()
)
smNewIPConfigEnableDisable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNewIPConfigEnableDisable.setStatus("mandatory")
_SwitchNwProtCfg_ObjectIdentity = ObjectIdentity
switchNwProtCfg = _SwitchNwProtCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3)
)
_SwitchNwProtCfgModOne_ObjectIdentity = ObjectIdentity
switchNwProtCfgModOne = _SwitchNwProtCfgModOne_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 1)
)
_SmNwProtInfoModOneTable_Object = MibTable
smNwProtInfoModOneTable = _SmNwProtInfoModOneTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 1, 1)
)
if mibBuilder.loadTexts:
    smNwProtInfoModOneTable.setStatus("mandatory")
_SmNwProtInfoModOneEntry_Object = MibTableRow
smNwProtInfoModOneEntry = _SmNwProtInfoModOneEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 1, 1, 1)
)
smNwProtInfoModOneEntry.setIndexNames(
    (0, "BLADE-MIB", "smNwProtInfoModOneIndex"),
)
if mibBuilder.loadTexts:
    smNwProtInfoModOneEntry.setStatus("mandatory")
_SmNwProtInfoModOneIndex_Type = Integer32
_SmNwProtInfoModOneIndex_Object = MibTableColumn
smNwProtInfoModOneIndex = _SmNwProtInfoModOneIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 1, 1, 1, 1),
    _SmNwProtInfoModOneIndex_Type()
)
smNwProtInfoModOneIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModOneIndex.setStatus("mandatory")


class _SmNwProtInfoModOneId_Type(Integer32):
    """Custom type smNwProtInfoModOneId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("module1", 1),
          ("module2", 2),
          ("module3", 3),
          ("module4", 4),
          ("module5", 5),
          ("module6", 6),
          ("module7", 7),
          ("module8", 8),
          ("module9", 9),
          ("module10", 10))
    )


_SmNwProtInfoModOneId_Type.__name__ = "Integer32"
_SmNwProtInfoModOneId_Object = MibTableColumn
smNwProtInfoModOneId = _SmNwProtInfoModOneId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 1, 1, 1, 2),
    _SmNwProtInfoModOneId_Type()
)
smNwProtInfoModOneId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModOneId.setStatus("mandatory")


class _SmNwProtInfoModOneExists_Type(Integer32):
    """Custom type smNwProtInfoModOneExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_SmNwProtInfoModOneExists_Type.__name__ = "Integer32"
_SmNwProtInfoModOneExists_Object = MibTableColumn
smNwProtInfoModOneExists = _SmNwProtInfoModOneExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 1, 1, 1, 3),
    _SmNwProtInfoModOneExists_Type()
)
smNwProtInfoModOneExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModOneExists.setStatus("mandatory")


class _SmNwProtInfoModOnePowerState_Type(Integer32):
    """Custom type smNwProtInfoModOnePowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_SmNwProtInfoModOnePowerState_Type.__name__ = "Integer32"
_SmNwProtInfoModOnePowerState_Object = MibTableColumn
smNwProtInfoModOnePowerState = _SmNwProtInfoModOnePowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 1, 1, 1, 4),
    _SmNwProtInfoModOnePowerState_Type()
)
smNwProtInfoModOnePowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModOnePowerState.setStatus("mandatory")
_SmNwProtInfoModOneProtName_Type = OctetString
_SmNwProtInfoModOneProtName_Object = MibTableColumn
smNwProtInfoModOneProtName = _SmNwProtInfoModOneProtName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 1, 1, 1, 5),
    _SmNwProtInfoModOneProtName_Type()
)
smNwProtInfoModOneProtName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModOneProtName.setStatus("mandatory")


class _SmNwProtInfoModOneProtID_Type(Integer32):
    """Custom type smNwProtInfoModOneProtID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("tcp", 2),
          ("udp", 3))
    )


_SmNwProtInfoModOneProtID_Type.__name__ = "Integer32"
_SmNwProtInfoModOneProtID_Object = MibTableColumn
smNwProtInfoModOneProtID = _SmNwProtInfoModOneProtID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 1, 1, 1, 6),
    _SmNwProtInfoModOneProtID_Type()
)
smNwProtInfoModOneProtID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModOneProtID.setStatus("mandatory")
_SmNwProtInfoModOneExtPort_Type = Integer32
_SmNwProtInfoModOneExtPort_Object = MibTableColumn
smNwProtInfoModOneExtPort = _SmNwProtInfoModOneExtPort_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 1, 1, 1, 7),
    _SmNwProtInfoModOneExtPort_Type()
)
smNwProtInfoModOneExtPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModOneExtPort.setStatus("mandatory")
_SmNwProtInfoModOneIntPort_Type = Integer32
_SmNwProtInfoModOneIntPort_Object = MibTableColumn
smNwProtInfoModOneIntPort = _SmNwProtInfoModOneIntPort_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 1, 1, 1, 8),
    _SmNwProtInfoModOneIntPort_Type()
)
smNwProtInfoModOneIntPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModOneIntPort.setStatus("mandatory")


class _SmNwProtInfoModOneEnable_Type(Integer32):
    """Custom type smNwProtInfoModOneEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SmNwProtInfoModOneEnable_Type.__name__ = "Integer32"
_SmNwProtInfoModOneEnable_Object = MibTableColumn
smNwProtInfoModOneEnable = _SmNwProtInfoModOneEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 1, 1, 1, 9),
    _SmNwProtInfoModOneEnable_Type()
)
smNwProtInfoModOneEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModOneEnable.setStatus("mandatory")


class _SmNwProtInfoModOneActivate_Type(Integer32):
    """Custom type smNwProtInfoModOneActivate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_SmNwProtInfoModOneActivate_Type.__name__ = "Integer32"
_SmNwProtInfoModOneActivate_Object = MibScalar
smNwProtInfoModOneActivate = _SmNwProtInfoModOneActivate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 1, 2),
    _SmNwProtInfoModOneActivate_Type()
)
smNwProtInfoModOneActivate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModOneActivate.setStatus("mandatory")


class _SmNwProtInfoModOneReset_Type(Integer32):
    """Custom type smNwProtInfoModOneReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_SmNwProtInfoModOneReset_Type.__name__ = "Integer32"
_SmNwProtInfoModOneReset_Object = MibScalar
smNwProtInfoModOneReset = _SmNwProtInfoModOneReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 1, 3),
    _SmNwProtInfoModOneReset_Type()
)
smNwProtInfoModOneReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModOneReset.setStatus("mandatory")
_SwitchNwProtCfgModTwo_ObjectIdentity = ObjectIdentity
switchNwProtCfgModTwo = _SwitchNwProtCfgModTwo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 2)
)
_SmNwProtInfoModTwoTable_Object = MibTable
smNwProtInfoModTwoTable = _SmNwProtInfoModTwoTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 2, 1)
)
if mibBuilder.loadTexts:
    smNwProtInfoModTwoTable.setStatus("mandatory")
_SmNwProtInfoModTwoEntry_Object = MibTableRow
smNwProtInfoModTwoEntry = _SmNwProtInfoModTwoEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 2, 1, 1)
)
smNwProtInfoModTwoEntry.setIndexNames(
    (0, "BLADE-MIB", "smNwProtInfoModTwoIndex"),
)
if mibBuilder.loadTexts:
    smNwProtInfoModTwoEntry.setStatus("mandatory")
_SmNwProtInfoModTwoIndex_Type = Integer32
_SmNwProtInfoModTwoIndex_Object = MibTableColumn
smNwProtInfoModTwoIndex = _SmNwProtInfoModTwoIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 2, 1, 1, 1),
    _SmNwProtInfoModTwoIndex_Type()
)
smNwProtInfoModTwoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModTwoIndex.setStatus("mandatory")


class _SmNwProtInfoModTwoId_Type(Integer32):
    """Custom type smNwProtInfoModTwoId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("module1", 1),
          ("module2", 2),
          ("module3", 3),
          ("module4", 4),
          ("module5", 5),
          ("module6", 6),
          ("module7", 7),
          ("module8", 8),
          ("module9", 9),
          ("module10", 10))
    )


_SmNwProtInfoModTwoId_Type.__name__ = "Integer32"
_SmNwProtInfoModTwoId_Object = MibTableColumn
smNwProtInfoModTwoId = _SmNwProtInfoModTwoId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 2, 1, 1, 2),
    _SmNwProtInfoModTwoId_Type()
)
smNwProtInfoModTwoId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModTwoId.setStatus("mandatory")


class _SmNwProtInfoModTwoExists_Type(Integer32):
    """Custom type smNwProtInfoModTwoExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_SmNwProtInfoModTwoExists_Type.__name__ = "Integer32"
_SmNwProtInfoModTwoExists_Object = MibTableColumn
smNwProtInfoModTwoExists = _SmNwProtInfoModTwoExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 2, 1, 1, 3),
    _SmNwProtInfoModTwoExists_Type()
)
smNwProtInfoModTwoExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModTwoExists.setStatus("mandatory")


class _SmNwProtInfoModTwoPowerState_Type(Integer32):
    """Custom type smNwProtInfoModTwoPowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_SmNwProtInfoModTwoPowerState_Type.__name__ = "Integer32"
_SmNwProtInfoModTwoPowerState_Object = MibTableColumn
smNwProtInfoModTwoPowerState = _SmNwProtInfoModTwoPowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 2, 1, 1, 4),
    _SmNwProtInfoModTwoPowerState_Type()
)
smNwProtInfoModTwoPowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModTwoPowerState.setStatus("mandatory")
_SmNwProtInfoModTwoProtName_Type = OctetString
_SmNwProtInfoModTwoProtName_Object = MibTableColumn
smNwProtInfoModTwoProtName = _SmNwProtInfoModTwoProtName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 2, 1, 1, 5),
    _SmNwProtInfoModTwoProtName_Type()
)
smNwProtInfoModTwoProtName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModTwoProtName.setStatus("mandatory")


class _SmNwProtInfoModTwoProtID_Type(Integer32):
    """Custom type smNwProtInfoModTwoProtID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("tcp", 2),
          ("udp", 3))
    )


_SmNwProtInfoModTwoProtID_Type.__name__ = "Integer32"
_SmNwProtInfoModTwoProtID_Object = MibTableColumn
smNwProtInfoModTwoProtID = _SmNwProtInfoModTwoProtID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 2, 1, 1, 6),
    _SmNwProtInfoModTwoProtID_Type()
)
smNwProtInfoModTwoProtID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModTwoProtID.setStatus("mandatory")
_SmNwProtInfoModTwoExtPort_Type = Integer32
_SmNwProtInfoModTwoExtPort_Object = MibTableColumn
smNwProtInfoModTwoExtPort = _SmNwProtInfoModTwoExtPort_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 2, 1, 1, 7),
    _SmNwProtInfoModTwoExtPort_Type()
)
smNwProtInfoModTwoExtPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModTwoExtPort.setStatus("mandatory")
_SmNwProtInfoModTwoIntPort_Type = Integer32
_SmNwProtInfoModTwoIntPort_Object = MibTableColumn
smNwProtInfoModTwoIntPort = _SmNwProtInfoModTwoIntPort_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 2, 1, 1, 8),
    _SmNwProtInfoModTwoIntPort_Type()
)
smNwProtInfoModTwoIntPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModTwoIntPort.setStatus("mandatory")


class _SmNwProtInfoModTwoEnable_Type(Integer32):
    """Custom type smNwProtInfoModTwoEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SmNwProtInfoModTwoEnable_Type.__name__ = "Integer32"
_SmNwProtInfoModTwoEnable_Object = MibTableColumn
smNwProtInfoModTwoEnable = _SmNwProtInfoModTwoEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 2, 1, 1, 9),
    _SmNwProtInfoModTwoEnable_Type()
)
smNwProtInfoModTwoEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModTwoEnable.setStatus("mandatory")


class _SmNwProtInfoModTwoActivate_Type(Integer32):
    """Custom type smNwProtInfoModTwoActivate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_SmNwProtInfoModTwoActivate_Type.__name__ = "Integer32"
_SmNwProtInfoModTwoActivate_Object = MibScalar
smNwProtInfoModTwoActivate = _SmNwProtInfoModTwoActivate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 2, 2),
    _SmNwProtInfoModTwoActivate_Type()
)
smNwProtInfoModTwoActivate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModTwoActivate.setStatus("mandatory")


class _SmNwProtInfoModTwoReset_Type(Integer32):
    """Custom type smNwProtInfoModTwoReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_SmNwProtInfoModTwoReset_Type.__name__ = "Integer32"
_SmNwProtInfoModTwoReset_Object = MibScalar
smNwProtInfoModTwoReset = _SmNwProtInfoModTwoReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 2, 3),
    _SmNwProtInfoModTwoReset_Type()
)
smNwProtInfoModTwoReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModTwoReset.setStatus("mandatory")
_SwitchNwProtCfgModThree_ObjectIdentity = ObjectIdentity
switchNwProtCfgModThree = _SwitchNwProtCfgModThree_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 3)
)
_SmNwProtInfoModThreeTable_Object = MibTable
smNwProtInfoModThreeTable = _SmNwProtInfoModThreeTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 3, 1)
)
if mibBuilder.loadTexts:
    smNwProtInfoModThreeTable.setStatus("mandatory")
_SmNwProtInfoModThreeEntry_Object = MibTableRow
smNwProtInfoModThreeEntry = _SmNwProtInfoModThreeEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 3, 1, 1)
)
smNwProtInfoModThreeEntry.setIndexNames(
    (0, "BLADE-MIB", "smNwProtInfoModThreeIndex"),
)
if mibBuilder.loadTexts:
    smNwProtInfoModThreeEntry.setStatus("mandatory")
_SmNwProtInfoModThreeIndex_Type = Integer32
_SmNwProtInfoModThreeIndex_Object = MibTableColumn
smNwProtInfoModThreeIndex = _SmNwProtInfoModThreeIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 3, 1, 1, 1),
    _SmNwProtInfoModThreeIndex_Type()
)
smNwProtInfoModThreeIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModThreeIndex.setStatus("mandatory")


class _SmNwProtInfoModThreeId_Type(Integer32):
    """Custom type smNwProtInfoModThreeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("module1", 1),
          ("module2", 2),
          ("module3", 3),
          ("module4", 4),
          ("module5", 5),
          ("module6", 6),
          ("module7", 7),
          ("module8", 8),
          ("module9", 9),
          ("module10", 10))
    )


_SmNwProtInfoModThreeId_Type.__name__ = "Integer32"
_SmNwProtInfoModThreeId_Object = MibTableColumn
smNwProtInfoModThreeId = _SmNwProtInfoModThreeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 3, 1, 1, 2),
    _SmNwProtInfoModThreeId_Type()
)
smNwProtInfoModThreeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModThreeId.setStatus("mandatory")


class _SmNwProtInfoModThreeExists_Type(Integer32):
    """Custom type smNwProtInfoModThreeExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_SmNwProtInfoModThreeExists_Type.__name__ = "Integer32"
_SmNwProtInfoModThreeExists_Object = MibTableColumn
smNwProtInfoModThreeExists = _SmNwProtInfoModThreeExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 3, 1, 1, 3),
    _SmNwProtInfoModThreeExists_Type()
)
smNwProtInfoModThreeExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModThreeExists.setStatus("mandatory")


class _SmNwProtInfoModThreePowerState_Type(Integer32):
    """Custom type smNwProtInfoModThreePowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_SmNwProtInfoModThreePowerState_Type.__name__ = "Integer32"
_SmNwProtInfoModThreePowerState_Object = MibTableColumn
smNwProtInfoModThreePowerState = _SmNwProtInfoModThreePowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 3, 1, 1, 4),
    _SmNwProtInfoModThreePowerState_Type()
)
smNwProtInfoModThreePowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModThreePowerState.setStatus("mandatory")
_SmNwProtInfoModThreeProtName_Type = OctetString
_SmNwProtInfoModThreeProtName_Object = MibTableColumn
smNwProtInfoModThreeProtName = _SmNwProtInfoModThreeProtName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 3, 1, 1, 5),
    _SmNwProtInfoModThreeProtName_Type()
)
smNwProtInfoModThreeProtName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModThreeProtName.setStatus("mandatory")


class _SmNwProtInfoModThreeProtID_Type(Integer32):
    """Custom type smNwProtInfoModThreeProtID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("tcp", 2),
          ("udp", 3))
    )


_SmNwProtInfoModThreeProtID_Type.__name__ = "Integer32"
_SmNwProtInfoModThreeProtID_Object = MibTableColumn
smNwProtInfoModThreeProtID = _SmNwProtInfoModThreeProtID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 3, 1, 1, 6),
    _SmNwProtInfoModThreeProtID_Type()
)
smNwProtInfoModThreeProtID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModThreeProtID.setStatus("mandatory")
_SmNwProtInfoModThreeExtPort_Type = Integer32
_SmNwProtInfoModThreeExtPort_Object = MibTableColumn
smNwProtInfoModThreeExtPort = _SmNwProtInfoModThreeExtPort_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 3, 1, 1, 7),
    _SmNwProtInfoModThreeExtPort_Type()
)
smNwProtInfoModThreeExtPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModThreeExtPort.setStatus("mandatory")
_SmNwProtInfoModThreeIntPort_Type = Integer32
_SmNwProtInfoModThreeIntPort_Object = MibTableColumn
smNwProtInfoModThreeIntPort = _SmNwProtInfoModThreeIntPort_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 3, 1, 1, 8),
    _SmNwProtInfoModThreeIntPort_Type()
)
smNwProtInfoModThreeIntPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModThreeIntPort.setStatus("mandatory")


class _SmNwProtInfoModThreeEnable_Type(Integer32):
    """Custom type smNwProtInfoModThreeEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SmNwProtInfoModThreeEnable_Type.__name__ = "Integer32"
_SmNwProtInfoModThreeEnable_Object = MibTableColumn
smNwProtInfoModThreeEnable = _SmNwProtInfoModThreeEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 3, 1, 1, 9),
    _SmNwProtInfoModThreeEnable_Type()
)
smNwProtInfoModThreeEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModThreeEnable.setStatus("mandatory")


class _SmNwProtInfoModThreeActivate_Type(Integer32):
    """Custom type smNwProtInfoModThreeActivate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_SmNwProtInfoModThreeActivate_Type.__name__ = "Integer32"
_SmNwProtInfoModThreeActivate_Object = MibScalar
smNwProtInfoModThreeActivate = _SmNwProtInfoModThreeActivate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 3, 2),
    _SmNwProtInfoModThreeActivate_Type()
)
smNwProtInfoModThreeActivate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModThreeActivate.setStatus("mandatory")


class _SmNwProtInfoModThreeReset_Type(Integer32):
    """Custom type smNwProtInfoModThreeReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_SmNwProtInfoModThreeReset_Type.__name__ = "Integer32"
_SmNwProtInfoModThreeReset_Object = MibScalar
smNwProtInfoModThreeReset = _SmNwProtInfoModThreeReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 3, 3),
    _SmNwProtInfoModThreeReset_Type()
)
smNwProtInfoModThreeReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModThreeReset.setStatus("mandatory")
_SwitchNwProtCfgModFour_ObjectIdentity = ObjectIdentity
switchNwProtCfgModFour = _SwitchNwProtCfgModFour_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 4)
)
_SmNwProtInfoModFourTable_Object = MibTable
smNwProtInfoModFourTable = _SmNwProtInfoModFourTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 4, 1)
)
if mibBuilder.loadTexts:
    smNwProtInfoModFourTable.setStatus("mandatory")
_SmNwProtInfoModFourEntry_Object = MibTableRow
smNwProtInfoModFourEntry = _SmNwProtInfoModFourEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 4, 1, 1)
)
smNwProtInfoModFourEntry.setIndexNames(
    (0, "BLADE-MIB", "smNwProtInfoModFourIndex"),
)
if mibBuilder.loadTexts:
    smNwProtInfoModFourEntry.setStatus("mandatory")
_SmNwProtInfoModFourIndex_Type = Integer32
_SmNwProtInfoModFourIndex_Object = MibTableColumn
smNwProtInfoModFourIndex = _SmNwProtInfoModFourIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 4, 1, 1, 1),
    _SmNwProtInfoModFourIndex_Type()
)
smNwProtInfoModFourIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModFourIndex.setStatus("mandatory")


class _SmNwProtInfoModFourId_Type(Integer32):
    """Custom type smNwProtInfoModFourId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("module1", 1),
          ("module2", 2),
          ("module3", 3),
          ("module4", 4),
          ("module5", 5),
          ("module6", 6),
          ("module7", 7),
          ("module8", 8),
          ("module9", 9),
          ("module10", 10))
    )


_SmNwProtInfoModFourId_Type.__name__ = "Integer32"
_SmNwProtInfoModFourId_Object = MibTableColumn
smNwProtInfoModFourId = _SmNwProtInfoModFourId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 4, 1, 1, 2),
    _SmNwProtInfoModFourId_Type()
)
smNwProtInfoModFourId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModFourId.setStatus("mandatory")


class _SmNwProtInfoModFourExists_Type(Integer32):
    """Custom type smNwProtInfoModFourExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_SmNwProtInfoModFourExists_Type.__name__ = "Integer32"
_SmNwProtInfoModFourExists_Object = MibTableColumn
smNwProtInfoModFourExists = _SmNwProtInfoModFourExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 4, 1, 1, 3),
    _SmNwProtInfoModFourExists_Type()
)
smNwProtInfoModFourExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModFourExists.setStatus("mandatory")


class _SmNwProtInfoModFourPowerState_Type(Integer32):
    """Custom type smNwProtInfoModFourPowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_SmNwProtInfoModFourPowerState_Type.__name__ = "Integer32"
_SmNwProtInfoModFourPowerState_Object = MibTableColumn
smNwProtInfoModFourPowerState = _SmNwProtInfoModFourPowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 4, 1, 1, 4),
    _SmNwProtInfoModFourPowerState_Type()
)
smNwProtInfoModFourPowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModFourPowerState.setStatus("mandatory")
_SmNwProtInfoModFourProtName_Type = OctetString
_SmNwProtInfoModFourProtName_Object = MibTableColumn
smNwProtInfoModFourProtName = _SmNwProtInfoModFourProtName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 4, 1, 1, 5),
    _SmNwProtInfoModFourProtName_Type()
)
smNwProtInfoModFourProtName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModFourProtName.setStatus("mandatory")


class _SmNwProtInfoModFourProtID_Type(Integer32):
    """Custom type smNwProtInfoModFourProtID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("tcp", 2),
          ("udp", 3))
    )


_SmNwProtInfoModFourProtID_Type.__name__ = "Integer32"
_SmNwProtInfoModFourProtID_Object = MibTableColumn
smNwProtInfoModFourProtID = _SmNwProtInfoModFourProtID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 4, 1, 1, 6),
    _SmNwProtInfoModFourProtID_Type()
)
smNwProtInfoModFourProtID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModFourProtID.setStatus("mandatory")
_SmNwProtInfoModFourExtPort_Type = Integer32
_SmNwProtInfoModFourExtPort_Object = MibTableColumn
smNwProtInfoModFourExtPort = _SmNwProtInfoModFourExtPort_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 4, 1, 1, 7),
    _SmNwProtInfoModFourExtPort_Type()
)
smNwProtInfoModFourExtPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModFourExtPort.setStatus("mandatory")
_SmNwProtInfoModFourIntPort_Type = Integer32
_SmNwProtInfoModFourIntPort_Object = MibTableColumn
smNwProtInfoModFourIntPort = _SmNwProtInfoModFourIntPort_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 4, 1, 1, 8),
    _SmNwProtInfoModFourIntPort_Type()
)
smNwProtInfoModFourIntPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModFourIntPort.setStatus("mandatory")


class _SmNwProtInfoModFourEnable_Type(Integer32):
    """Custom type smNwProtInfoModFourEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SmNwProtInfoModFourEnable_Type.__name__ = "Integer32"
_SmNwProtInfoModFourEnable_Object = MibTableColumn
smNwProtInfoModFourEnable = _SmNwProtInfoModFourEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 4, 1, 1, 9),
    _SmNwProtInfoModFourEnable_Type()
)
smNwProtInfoModFourEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModFourEnable.setStatus("mandatory")


class _SmNwProtInfoModFourActivate_Type(Integer32):
    """Custom type smNwProtInfoModFourActivate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_SmNwProtInfoModFourActivate_Type.__name__ = "Integer32"
_SmNwProtInfoModFourActivate_Object = MibScalar
smNwProtInfoModFourActivate = _SmNwProtInfoModFourActivate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 4, 2),
    _SmNwProtInfoModFourActivate_Type()
)
smNwProtInfoModFourActivate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModFourActivate.setStatus("mandatory")


class _SmNwProtInfoModFourReset_Type(Integer32):
    """Custom type smNwProtInfoModFourReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_SmNwProtInfoModFourReset_Type.__name__ = "Integer32"
_SmNwProtInfoModFourReset_Object = MibScalar
smNwProtInfoModFourReset = _SmNwProtInfoModFourReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 4, 3),
    _SmNwProtInfoModFourReset_Type()
)
smNwProtInfoModFourReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModFourReset.setStatus("mandatory")
_SwitchNwProtCfgModFive_ObjectIdentity = ObjectIdentity
switchNwProtCfgModFive = _SwitchNwProtCfgModFive_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 5)
)
_SmNwProtInfoModFiveTable_Object = MibTable
smNwProtInfoModFiveTable = _SmNwProtInfoModFiveTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 5, 1)
)
if mibBuilder.loadTexts:
    smNwProtInfoModFiveTable.setStatus("mandatory")
_SmNwProtInfoModFiveEntry_Object = MibTableRow
smNwProtInfoModFiveEntry = _SmNwProtInfoModFiveEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 5, 1, 1)
)
smNwProtInfoModFiveEntry.setIndexNames(
    (0, "BLADE-MIB", "smNwProtInfoModFiveIndex"),
)
if mibBuilder.loadTexts:
    smNwProtInfoModFiveEntry.setStatus("mandatory")
_SmNwProtInfoModFiveIndex_Type = Integer32
_SmNwProtInfoModFiveIndex_Object = MibTableColumn
smNwProtInfoModFiveIndex = _SmNwProtInfoModFiveIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 5, 1, 1, 1),
    _SmNwProtInfoModFiveIndex_Type()
)
smNwProtInfoModFiveIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModFiveIndex.setStatus("mandatory")


class _SmNwProtInfoModFiveId_Type(Integer32):
    """Custom type smNwProtInfoModFiveId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("module1", 1),
          ("module2", 2),
          ("module3", 3),
          ("module4", 4),
          ("module5", 5),
          ("module6", 6),
          ("module7", 7),
          ("module8", 8),
          ("module9", 9),
          ("module10", 10))
    )


_SmNwProtInfoModFiveId_Type.__name__ = "Integer32"
_SmNwProtInfoModFiveId_Object = MibTableColumn
smNwProtInfoModFiveId = _SmNwProtInfoModFiveId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 5, 1, 1, 2),
    _SmNwProtInfoModFiveId_Type()
)
smNwProtInfoModFiveId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModFiveId.setStatus("mandatory")


class _SmNwProtInfoModFiveExists_Type(Integer32):
    """Custom type smNwProtInfoModFiveExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_SmNwProtInfoModFiveExists_Type.__name__ = "Integer32"
_SmNwProtInfoModFiveExists_Object = MibTableColumn
smNwProtInfoModFiveExists = _SmNwProtInfoModFiveExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 5, 1, 1, 3),
    _SmNwProtInfoModFiveExists_Type()
)
smNwProtInfoModFiveExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModFiveExists.setStatus("mandatory")


class _SmNwProtInfoModFivePowerState_Type(Integer32):
    """Custom type smNwProtInfoModFivePowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_SmNwProtInfoModFivePowerState_Type.__name__ = "Integer32"
_SmNwProtInfoModFivePowerState_Object = MibTableColumn
smNwProtInfoModFivePowerState = _SmNwProtInfoModFivePowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 5, 1, 1, 4),
    _SmNwProtInfoModFivePowerState_Type()
)
smNwProtInfoModFivePowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModFivePowerState.setStatus("mandatory")
_SmNwProtInfoModFiveProtName_Type = OctetString
_SmNwProtInfoModFiveProtName_Object = MibTableColumn
smNwProtInfoModFiveProtName = _SmNwProtInfoModFiveProtName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 5, 1, 1, 5),
    _SmNwProtInfoModFiveProtName_Type()
)
smNwProtInfoModFiveProtName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModFiveProtName.setStatus("mandatory")


class _SmNwProtInfoModFiveProtID_Type(Integer32):
    """Custom type smNwProtInfoModFiveProtID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("tcp", 2),
          ("udp", 3))
    )


_SmNwProtInfoModFiveProtID_Type.__name__ = "Integer32"
_SmNwProtInfoModFiveProtID_Object = MibTableColumn
smNwProtInfoModFiveProtID = _SmNwProtInfoModFiveProtID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 5, 1, 1, 6),
    _SmNwProtInfoModFiveProtID_Type()
)
smNwProtInfoModFiveProtID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModFiveProtID.setStatus("mandatory")
_SmNwProtInfoModFiveExtPort_Type = Integer32
_SmNwProtInfoModFiveExtPort_Object = MibTableColumn
smNwProtInfoModFiveExtPort = _SmNwProtInfoModFiveExtPort_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 5, 1, 1, 7),
    _SmNwProtInfoModFiveExtPort_Type()
)
smNwProtInfoModFiveExtPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModFiveExtPort.setStatus("mandatory")
_SmNwProtInfoModFiveIntPort_Type = Integer32
_SmNwProtInfoModFiveIntPort_Object = MibTableColumn
smNwProtInfoModFiveIntPort = _SmNwProtInfoModFiveIntPort_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 5, 1, 1, 8),
    _SmNwProtInfoModFiveIntPort_Type()
)
smNwProtInfoModFiveIntPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModFiveIntPort.setStatus("mandatory")


class _SmNwProtInfoModFiveEnable_Type(Integer32):
    """Custom type smNwProtInfoModFiveEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SmNwProtInfoModFiveEnable_Type.__name__ = "Integer32"
_SmNwProtInfoModFiveEnable_Object = MibTableColumn
smNwProtInfoModFiveEnable = _SmNwProtInfoModFiveEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 5, 1, 1, 9),
    _SmNwProtInfoModFiveEnable_Type()
)
smNwProtInfoModFiveEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModFiveEnable.setStatus("mandatory")


class _SmNwProtInfoModFiveActivate_Type(Integer32):
    """Custom type smNwProtInfoModFiveActivate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_SmNwProtInfoModFiveActivate_Type.__name__ = "Integer32"
_SmNwProtInfoModFiveActivate_Object = MibScalar
smNwProtInfoModFiveActivate = _SmNwProtInfoModFiveActivate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 5, 2),
    _SmNwProtInfoModFiveActivate_Type()
)
smNwProtInfoModFiveActivate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModFiveActivate.setStatus("mandatory")


class _SmNwProtInfoModFiveReset_Type(Integer32):
    """Custom type smNwProtInfoModFiveReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_SmNwProtInfoModFiveReset_Type.__name__ = "Integer32"
_SmNwProtInfoModFiveReset_Object = MibScalar
smNwProtInfoModFiveReset = _SmNwProtInfoModFiveReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 5, 3),
    _SmNwProtInfoModFiveReset_Type()
)
smNwProtInfoModFiveReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModFiveReset.setStatus("mandatory")
_SwitchNwProtCfgModSix_ObjectIdentity = ObjectIdentity
switchNwProtCfgModSix = _SwitchNwProtCfgModSix_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 6)
)
_SmNwProtInfoModSixTable_Object = MibTable
smNwProtInfoModSixTable = _SmNwProtInfoModSixTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 6, 1)
)
if mibBuilder.loadTexts:
    smNwProtInfoModSixTable.setStatus("mandatory")
_SmNwProtInfoModSixEntry_Object = MibTableRow
smNwProtInfoModSixEntry = _SmNwProtInfoModSixEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 6, 1, 1)
)
smNwProtInfoModSixEntry.setIndexNames(
    (0, "BLADE-MIB", "smNwProtInfoModSixIndex"),
)
if mibBuilder.loadTexts:
    smNwProtInfoModSixEntry.setStatus("mandatory")
_SmNwProtInfoModSixIndex_Type = Integer32
_SmNwProtInfoModSixIndex_Object = MibTableColumn
smNwProtInfoModSixIndex = _SmNwProtInfoModSixIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 6, 1, 1, 1),
    _SmNwProtInfoModSixIndex_Type()
)
smNwProtInfoModSixIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModSixIndex.setStatus("mandatory")


class _SmNwProtInfoModSixId_Type(Integer32):
    """Custom type smNwProtInfoModSixId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("module1", 1),
          ("module2", 2),
          ("module3", 3),
          ("module4", 4),
          ("module5", 5),
          ("module6", 6),
          ("module7", 7),
          ("module8", 8),
          ("module9", 9),
          ("module10", 10))
    )


_SmNwProtInfoModSixId_Type.__name__ = "Integer32"
_SmNwProtInfoModSixId_Object = MibTableColumn
smNwProtInfoModSixId = _SmNwProtInfoModSixId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 6, 1, 1, 2),
    _SmNwProtInfoModSixId_Type()
)
smNwProtInfoModSixId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModSixId.setStatus("mandatory")


class _SmNwProtInfoModSixExists_Type(Integer32):
    """Custom type smNwProtInfoModSixExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_SmNwProtInfoModSixExists_Type.__name__ = "Integer32"
_SmNwProtInfoModSixExists_Object = MibTableColumn
smNwProtInfoModSixExists = _SmNwProtInfoModSixExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 6, 1, 1, 3),
    _SmNwProtInfoModSixExists_Type()
)
smNwProtInfoModSixExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModSixExists.setStatus("mandatory")


class _SmNwProtInfoModSixPowerState_Type(Integer32):
    """Custom type smNwProtInfoModSixPowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_SmNwProtInfoModSixPowerState_Type.__name__ = "Integer32"
_SmNwProtInfoModSixPowerState_Object = MibTableColumn
smNwProtInfoModSixPowerState = _SmNwProtInfoModSixPowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 6, 1, 1, 4),
    _SmNwProtInfoModSixPowerState_Type()
)
smNwProtInfoModSixPowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModSixPowerState.setStatus("mandatory")
_SmNwProtInfoModSixProtName_Type = OctetString
_SmNwProtInfoModSixProtName_Object = MibTableColumn
smNwProtInfoModSixProtName = _SmNwProtInfoModSixProtName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 6, 1, 1, 5),
    _SmNwProtInfoModSixProtName_Type()
)
smNwProtInfoModSixProtName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModSixProtName.setStatus("mandatory")


class _SmNwProtInfoModSixProtID_Type(Integer32):
    """Custom type smNwProtInfoModSixProtID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("tcp", 2),
          ("udp", 3))
    )


_SmNwProtInfoModSixProtID_Type.__name__ = "Integer32"
_SmNwProtInfoModSixProtID_Object = MibTableColumn
smNwProtInfoModSixProtID = _SmNwProtInfoModSixProtID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 6, 1, 1, 6),
    _SmNwProtInfoModSixProtID_Type()
)
smNwProtInfoModSixProtID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModSixProtID.setStatus("mandatory")
_SmNwProtInfoModSixExtPort_Type = Integer32
_SmNwProtInfoModSixExtPort_Object = MibTableColumn
smNwProtInfoModSixExtPort = _SmNwProtInfoModSixExtPort_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 6, 1, 1, 7),
    _SmNwProtInfoModSixExtPort_Type()
)
smNwProtInfoModSixExtPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModSixExtPort.setStatus("mandatory")
_SmNwProtInfoModSixIntPort_Type = Integer32
_SmNwProtInfoModSixIntPort_Object = MibTableColumn
smNwProtInfoModSixIntPort = _SmNwProtInfoModSixIntPort_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 6, 1, 1, 8),
    _SmNwProtInfoModSixIntPort_Type()
)
smNwProtInfoModSixIntPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModSixIntPort.setStatus("mandatory")


class _SmNwProtInfoModSixEnable_Type(Integer32):
    """Custom type smNwProtInfoModSixEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SmNwProtInfoModSixEnable_Type.__name__ = "Integer32"
_SmNwProtInfoModSixEnable_Object = MibTableColumn
smNwProtInfoModSixEnable = _SmNwProtInfoModSixEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 6, 1, 1, 9),
    _SmNwProtInfoModSixEnable_Type()
)
smNwProtInfoModSixEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModSixEnable.setStatus("mandatory")


class _SmNwProtInfoModSixActivate_Type(Integer32):
    """Custom type smNwProtInfoModSixActivate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_SmNwProtInfoModSixActivate_Type.__name__ = "Integer32"
_SmNwProtInfoModSixActivate_Object = MibScalar
smNwProtInfoModSixActivate = _SmNwProtInfoModSixActivate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 6, 2),
    _SmNwProtInfoModSixActivate_Type()
)
smNwProtInfoModSixActivate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModSixActivate.setStatus("mandatory")


class _SmNwProtInfoModSixReset_Type(Integer32):
    """Custom type smNwProtInfoModSixReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_SmNwProtInfoModSixReset_Type.__name__ = "Integer32"
_SmNwProtInfoModSixReset_Object = MibScalar
smNwProtInfoModSixReset = _SmNwProtInfoModSixReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 6, 3),
    _SmNwProtInfoModSixReset_Type()
)
smNwProtInfoModSixReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModSixReset.setStatus("mandatory")
_SwitchNwProtCfgModSeven_ObjectIdentity = ObjectIdentity
switchNwProtCfgModSeven = _SwitchNwProtCfgModSeven_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 7)
)
_SmNwProtInfoModSevenTable_Object = MibTable
smNwProtInfoModSevenTable = _SmNwProtInfoModSevenTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 7, 1)
)
if mibBuilder.loadTexts:
    smNwProtInfoModSevenTable.setStatus("mandatory")
_SmNwProtInfoModSevenEntry_Object = MibTableRow
smNwProtInfoModSevenEntry = _SmNwProtInfoModSevenEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 7, 1, 1)
)
smNwProtInfoModSevenEntry.setIndexNames(
    (0, "BLADE-MIB", "smNwProtInfoModSevenIndex"),
)
if mibBuilder.loadTexts:
    smNwProtInfoModSevenEntry.setStatus("mandatory")
_SmNwProtInfoModSevenIndex_Type = Integer32
_SmNwProtInfoModSevenIndex_Object = MibTableColumn
smNwProtInfoModSevenIndex = _SmNwProtInfoModSevenIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 7, 1, 1, 1),
    _SmNwProtInfoModSevenIndex_Type()
)
smNwProtInfoModSevenIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModSevenIndex.setStatus("mandatory")


class _SmNwProtInfoModSevenId_Type(Integer32):
    """Custom type smNwProtInfoModSevenId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("module1", 1),
          ("module2", 2),
          ("module3", 3),
          ("module4", 4),
          ("module5", 5),
          ("module6", 6),
          ("module7", 7),
          ("module8", 8),
          ("module9", 9),
          ("module10", 10))
    )


_SmNwProtInfoModSevenId_Type.__name__ = "Integer32"
_SmNwProtInfoModSevenId_Object = MibTableColumn
smNwProtInfoModSevenId = _SmNwProtInfoModSevenId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 7, 1, 1, 2),
    _SmNwProtInfoModSevenId_Type()
)
smNwProtInfoModSevenId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModSevenId.setStatus("mandatory")


class _SmNwProtInfoModSevenExists_Type(Integer32):
    """Custom type smNwProtInfoModSevenExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_SmNwProtInfoModSevenExists_Type.__name__ = "Integer32"
_SmNwProtInfoModSevenExists_Object = MibTableColumn
smNwProtInfoModSevenExists = _SmNwProtInfoModSevenExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 7, 1, 1, 3),
    _SmNwProtInfoModSevenExists_Type()
)
smNwProtInfoModSevenExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModSevenExists.setStatus("mandatory")


class _SmNwProtInfoModSevenPowerState_Type(Integer32):
    """Custom type smNwProtInfoModSevenPowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_SmNwProtInfoModSevenPowerState_Type.__name__ = "Integer32"
_SmNwProtInfoModSevenPowerState_Object = MibTableColumn
smNwProtInfoModSevenPowerState = _SmNwProtInfoModSevenPowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 7, 1, 1, 4),
    _SmNwProtInfoModSevenPowerState_Type()
)
smNwProtInfoModSevenPowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModSevenPowerState.setStatus("mandatory")
_SmNwProtInfoModSevenProtName_Type = OctetString
_SmNwProtInfoModSevenProtName_Object = MibTableColumn
smNwProtInfoModSevenProtName = _SmNwProtInfoModSevenProtName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 7, 1, 1, 5),
    _SmNwProtInfoModSevenProtName_Type()
)
smNwProtInfoModSevenProtName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModSevenProtName.setStatus("mandatory")


class _SmNwProtInfoModSevenProtID_Type(Integer32):
    """Custom type smNwProtInfoModSevenProtID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("tcp", 2),
          ("udp", 3))
    )


_SmNwProtInfoModSevenProtID_Type.__name__ = "Integer32"
_SmNwProtInfoModSevenProtID_Object = MibTableColumn
smNwProtInfoModSevenProtID = _SmNwProtInfoModSevenProtID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 7, 1, 1, 6),
    _SmNwProtInfoModSevenProtID_Type()
)
smNwProtInfoModSevenProtID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModSevenProtID.setStatus("mandatory")
_SmNwProtInfoModSevenExtPort_Type = Integer32
_SmNwProtInfoModSevenExtPort_Object = MibTableColumn
smNwProtInfoModSevenExtPort = _SmNwProtInfoModSevenExtPort_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 7, 1, 1, 7),
    _SmNwProtInfoModSevenExtPort_Type()
)
smNwProtInfoModSevenExtPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModSevenExtPort.setStatus("mandatory")
_SmNwProtInfoModSevenIntPort_Type = Integer32
_SmNwProtInfoModSevenIntPort_Object = MibTableColumn
smNwProtInfoModSevenIntPort = _SmNwProtInfoModSevenIntPort_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 7, 1, 1, 8),
    _SmNwProtInfoModSevenIntPort_Type()
)
smNwProtInfoModSevenIntPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModSevenIntPort.setStatus("mandatory")


class _SmNwProtInfoModSevenEnable_Type(Integer32):
    """Custom type smNwProtInfoModSevenEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SmNwProtInfoModSevenEnable_Type.__name__ = "Integer32"
_SmNwProtInfoModSevenEnable_Object = MibTableColumn
smNwProtInfoModSevenEnable = _SmNwProtInfoModSevenEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 7, 1, 1, 9),
    _SmNwProtInfoModSevenEnable_Type()
)
smNwProtInfoModSevenEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModSevenEnable.setStatus("mandatory")


class _SmNwProtInfoModSevenActivate_Type(Integer32):
    """Custom type smNwProtInfoModSevenActivate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_SmNwProtInfoModSevenActivate_Type.__name__ = "Integer32"
_SmNwProtInfoModSevenActivate_Object = MibScalar
smNwProtInfoModSevenActivate = _SmNwProtInfoModSevenActivate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 7, 2),
    _SmNwProtInfoModSevenActivate_Type()
)
smNwProtInfoModSevenActivate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModSevenActivate.setStatus("mandatory")


class _SmNwProtInfoModSevenReset_Type(Integer32):
    """Custom type smNwProtInfoModSevenReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_SmNwProtInfoModSevenReset_Type.__name__ = "Integer32"
_SmNwProtInfoModSevenReset_Object = MibScalar
smNwProtInfoModSevenReset = _SmNwProtInfoModSevenReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 7, 3),
    _SmNwProtInfoModSevenReset_Type()
)
smNwProtInfoModSevenReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModSevenReset.setStatus("mandatory")
_SwitchNwProtCfgModEight_ObjectIdentity = ObjectIdentity
switchNwProtCfgModEight = _SwitchNwProtCfgModEight_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 8)
)
_SmNwProtInfoModEightTable_Object = MibTable
smNwProtInfoModEightTable = _SmNwProtInfoModEightTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 8, 1)
)
if mibBuilder.loadTexts:
    smNwProtInfoModEightTable.setStatus("mandatory")
_SmNwProtInfoModEightEntry_Object = MibTableRow
smNwProtInfoModEightEntry = _SmNwProtInfoModEightEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 8, 1, 1)
)
smNwProtInfoModEightEntry.setIndexNames(
    (0, "BLADE-MIB", "smNwProtInfoModEightIndex"),
)
if mibBuilder.loadTexts:
    smNwProtInfoModEightEntry.setStatus("mandatory")
_SmNwProtInfoModEightIndex_Type = Integer32
_SmNwProtInfoModEightIndex_Object = MibTableColumn
smNwProtInfoModEightIndex = _SmNwProtInfoModEightIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 8, 1, 1, 1),
    _SmNwProtInfoModEightIndex_Type()
)
smNwProtInfoModEightIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModEightIndex.setStatus("mandatory")


class _SmNwProtInfoModEightId_Type(Integer32):
    """Custom type smNwProtInfoModEightId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("module1", 1),
          ("module2", 2),
          ("module3", 3),
          ("module4", 4),
          ("module5", 5),
          ("module6", 6),
          ("module7", 7),
          ("module8", 8),
          ("module9", 9),
          ("module10", 10))
    )


_SmNwProtInfoModEightId_Type.__name__ = "Integer32"
_SmNwProtInfoModEightId_Object = MibTableColumn
smNwProtInfoModEightId = _SmNwProtInfoModEightId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 8, 1, 1, 2),
    _SmNwProtInfoModEightId_Type()
)
smNwProtInfoModEightId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModEightId.setStatus("mandatory")


class _SmNwProtInfoModEightExists_Type(Integer32):
    """Custom type smNwProtInfoModEightExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_SmNwProtInfoModEightExists_Type.__name__ = "Integer32"
_SmNwProtInfoModEightExists_Object = MibTableColumn
smNwProtInfoModEightExists = _SmNwProtInfoModEightExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 8, 1, 1, 3),
    _SmNwProtInfoModEightExists_Type()
)
smNwProtInfoModEightExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModEightExists.setStatus("mandatory")


class _SmNwProtInfoModEightPowerState_Type(Integer32):
    """Custom type smNwProtInfoModEightPowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_SmNwProtInfoModEightPowerState_Type.__name__ = "Integer32"
_SmNwProtInfoModEightPowerState_Object = MibTableColumn
smNwProtInfoModEightPowerState = _SmNwProtInfoModEightPowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 8, 1, 1, 4),
    _SmNwProtInfoModEightPowerState_Type()
)
smNwProtInfoModEightPowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModEightPowerState.setStatus("mandatory")
_SmNwProtInfoModEightProtName_Type = OctetString
_SmNwProtInfoModEightProtName_Object = MibTableColumn
smNwProtInfoModEightProtName = _SmNwProtInfoModEightProtName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 8, 1, 1, 5),
    _SmNwProtInfoModEightProtName_Type()
)
smNwProtInfoModEightProtName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModEightProtName.setStatus("mandatory")


class _SmNwProtInfoModEightProtID_Type(Integer32):
    """Custom type smNwProtInfoModEightProtID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("tcp", 2),
          ("udp", 3))
    )


_SmNwProtInfoModEightProtID_Type.__name__ = "Integer32"
_SmNwProtInfoModEightProtID_Object = MibTableColumn
smNwProtInfoModEightProtID = _SmNwProtInfoModEightProtID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 8, 1, 1, 6),
    _SmNwProtInfoModEightProtID_Type()
)
smNwProtInfoModEightProtID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModEightProtID.setStatus("mandatory")
_SmNwProtInfoModEightExtPort_Type = Integer32
_SmNwProtInfoModEightExtPort_Object = MibTableColumn
smNwProtInfoModEightExtPort = _SmNwProtInfoModEightExtPort_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 8, 1, 1, 7),
    _SmNwProtInfoModEightExtPort_Type()
)
smNwProtInfoModEightExtPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModEightExtPort.setStatus("mandatory")
_SmNwProtInfoModEightIntPort_Type = Integer32
_SmNwProtInfoModEightIntPort_Object = MibTableColumn
smNwProtInfoModEightIntPort = _SmNwProtInfoModEightIntPort_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 8, 1, 1, 8),
    _SmNwProtInfoModEightIntPort_Type()
)
smNwProtInfoModEightIntPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModEightIntPort.setStatus("mandatory")


class _SmNwProtInfoModEightEnable_Type(Integer32):
    """Custom type smNwProtInfoModEightEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SmNwProtInfoModEightEnable_Type.__name__ = "Integer32"
_SmNwProtInfoModEightEnable_Object = MibTableColumn
smNwProtInfoModEightEnable = _SmNwProtInfoModEightEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 8, 1, 1, 9),
    _SmNwProtInfoModEightEnable_Type()
)
smNwProtInfoModEightEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModEightEnable.setStatus("mandatory")


class _SmNwProtInfoModEightActivate_Type(Integer32):
    """Custom type smNwProtInfoModEightActivate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_SmNwProtInfoModEightActivate_Type.__name__ = "Integer32"
_SmNwProtInfoModEightActivate_Object = MibScalar
smNwProtInfoModEightActivate = _SmNwProtInfoModEightActivate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 8, 2),
    _SmNwProtInfoModEightActivate_Type()
)
smNwProtInfoModEightActivate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModEightActivate.setStatus("mandatory")


class _SmNwProtInfoModEightReset_Type(Integer32):
    """Custom type smNwProtInfoModEightReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_SmNwProtInfoModEightReset_Type.__name__ = "Integer32"
_SmNwProtInfoModEightReset_Object = MibScalar
smNwProtInfoModEightReset = _SmNwProtInfoModEightReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 8, 3),
    _SmNwProtInfoModEightReset_Type()
)
smNwProtInfoModEightReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModEightReset.setStatus("mandatory")
_SwitchNwProtCfgModNine_ObjectIdentity = ObjectIdentity
switchNwProtCfgModNine = _SwitchNwProtCfgModNine_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 9)
)
_SmNwProtInfoModNineTable_Object = MibTable
smNwProtInfoModNineTable = _SmNwProtInfoModNineTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 9, 1)
)
if mibBuilder.loadTexts:
    smNwProtInfoModNineTable.setStatus("mandatory")
_SmNwProtInfoModNineEntry_Object = MibTableRow
smNwProtInfoModNineEntry = _SmNwProtInfoModNineEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 9, 1, 1)
)
smNwProtInfoModNineEntry.setIndexNames(
    (0, "BLADE-MIB", "smNwProtInfoModNineIndex"),
)
if mibBuilder.loadTexts:
    smNwProtInfoModNineEntry.setStatus("mandatory")
_SmNwProtInfoModNineIndex_Type = Integer32
_SmNwProtInfoModNineIndex_Object = MibTableColumn
smNwProtInfoModNineIndex = _SmNwProtInfoModNineIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 9, 1, 1, 1),
    _SmNwProtInfoModNineIndex_Type()
)
smNwProtInfoModNineIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModNineIndex.setStatus("mandatory")


class _SmNwProtInfoModNineId_Type(Integer32):
    """Custom type smNwProtInfoModNineId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("module1", 1),
          ("module2", 2),
          ("module3", 3),
          ("module4", 4),
          ("module5", 5),
          ("module6", 6),
          ("module7", 7),
          ("module8", 8),
          ("module9", 9),
          ("module10", 10))
    )


_SmNwProtInfoModNineId_Type.__name__ = "Integer32"
_SmNwProtInfoModNineId_Object = MibTableColumn
smNwProtInfoModNineId = _SmNwProtInfoModNineId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 9, 1, 1, 2),
    _SmNwProtInfoModNineId_Type()
)
smNwProtInfoModNineId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModNineId.setStatus("mandatory")


class _SmNwProtInfoModNineExists_Type(Integer32):
    """Custom type smNwProtInfoModNineExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_SmNwProtInfoModNineExists_Type.__name__ = "Integer32"
_SmNwProtInfoModNineExists_Object = MibTableColumn
smNwProtInfoModNineExists = _SmNwProtInfoModNineExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 9, 1, 1, 3),
    _SmNwProtInfoModNineExists_Type()
)
smNwProtInfoModNineExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModNineExists.setStatus("mandatory")


class _SmNwProtInfoModNinePowerState_Type(Integer32):
    """Custom type smNwProtInfoModNinePowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_SmNwProtInfoModNinePowerState_Type.__name__ = "Integer32"
_SmNwProtInfoModNinePowerState_Object = MibTableColumn
smNwProtInfoModNinePowerState = _SmNwProtInfoModNinePowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 9, 1, 1, 4),
    _SmNwProtInfoModNinePowerState_Type()
)
smNwProtInfoModNinePowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModNinePowerState.setStatus("mandatory")
_SmNwProtInfoModNineProtName_Type = OctetString
_SmNwProtInfoModNineProtName_Object = MibTableColumn
smNwProtInfoModNineProtName = _SmNwProtInfoModNineProtName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 9, 1, 1, 5),
    _SmNwProtInfoModNineProtName_Type()
)
smNwProtInfoModNineProtName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModNineProtName.setStatus("mandatory")


class _SmNwProtInfoModNineProtID_Type(Integer32):
    """Custom type smNwProtInfoModNineProtID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("tcp", 2),
          ("udp", 3))
    )


_SmNwProtInfoModNineProtID_Type.__name__ = "Integer32"
_SmNwProtInfoModNineProtID_Object = MibTableColumn
smNwProtInfoModNineProtID = _SmNwProtInfoModNineProtID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 9, 1, 1, 6),
    _SmNwProtInfoModNineProtID_Type()
)
smNwProtInfoModNineProtID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModNineProtID.setStatus("mandatory")
_SmNwProtInfoModNineExtPort_Type = Integer32
_SmNwProtInfoModNineExtPort_Object = MibTableColumn
smNwProtInfoModNineExtPort = _SmNwProtInfoModNineExtPort_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 9, 1, 1, 7),
    _SmNwProtInfoModNineExtPort_Type()
)
smNwProtInfoModNineExtPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModNineExtPort.setStatus("mandatory")
_SmNwProtInfoModNineIntPort_Type = Integer32
_SmNwProtInfoModNineIntPort_Object = MibTableColumn
smNwProtInfoModNineIntPort = _SmNwProtInfoModNineIntPort_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 9, 1, 1, 8),
    _SmNwProtInfoModNineIntPort_Type()
)
smNwProtInfoModNineIntPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModNineIntPort.setStatus("mandatory")


class _SmNwProtInfoModNineEnable_Type(Integer32):
    """Custom type smNwProtInfoModNineEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SmNwProtInfoModNineEnable_Type.__name__ = "Integer32"
_SmNwProtInfoModNineEnable_Object = MibTableColumn
smNwProtInfoModNineEnable = _SmNwProtInfoModNineEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 9, 1, 1, 9),
    _SmNwProtInfoModNineEnable_Type()
)
smNwProtInfoModNineEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModNineEnable.setStatus("mandatory")


class _SmNwProtInfoModNineActivate_Type(Integer32):
    """Custom type smNwProtInfoModNineActivate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_SmNwProtInfoModNineActivate_Type.__name__ = "Integer32"
_SmNwProtInfoModNineActivate_Object = MibScalar
smNwProtInfoModNineActivate = _SmNwProtInfoModNineActivate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 9, 2),
    _SmNwProtInfoModNineActivate_Type()
)
smNwProtInfoModNineActivate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModNineActivate.setStatus("mandatory")


class _SmNwProtInfoModNineReset_Type(Integer32):
    """Custom type smNwProtInfoModNineReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_SmNwProtInfoModNineReset_Type.__name__ = "Integer32"
_SmNwProtInfoModNineReset_Object = MibScalar
smNwProtInfoModNineReset = _SmNwProtInfoModNineReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 9, 3),
    _SmNwProtInfoModNineReset_Type()
)
smNwProtInfoModNineReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModNineReset.setStatus("mandatory")
_SwitchNwProtCfgModTen_ObjectIdentity = ObjectIdentity
switchNwProtCfgModTen = _SwitchNwProtCfgModTen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 10)
)
_SmNwProtInfoModTenTable_Object = MibTable
smNwProtInfoModTenTable = _SmNwProtInfoModTenTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 10, 1)
)
if mibBuilder.loadTexts:
    smNwProtInfoModTenTable.setStatus("mandatory")
_SmNwProtInfoModTenEntry_Object = MibTableRow
smNwProtInfoModTenEntry = _SmNwProtInfoModTenEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 10, 1, 1)
)
smNwProtInfoModTenEntry.setIndexNames(
    (0, "BLADE-MIB", "smNwProtInfoModTenIndex"),
)
if mibBuilder.loadTexts:
    smNwProtInfoModTenEntry.setStatus("mandatory")
_SmNwProtInfoModTenIndex_Type = Integer32
_SmNwProtInfoModTenIndex_Object = MibTableColumn
smNwProtInfoModTenIndex = _SmNwProtInfoModTenIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 10, 1, 1, 1),
    _SmNwProtInfoModTenIndex_Type()
)
smNwProtInfoModTenIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModTenIndex.setStatus("mandatory")


class _SmNwProtInfoModTenId_Type(Integer32):
    """Custom type smNwProtInfoModTenId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("module1", 1),
          ("module2", 2),
          ("module3", 3),
          ("module4", 4),
          ("module5", 5),
          ("module6", 6),
          ("module7", 7),
          ("module8", 8),
          ("module9", 9),
          ("module10", 10))
    )


_SmNwProtInfoModTenId_Type.__name__ = "Integer32"
_SmNwProtInfoModTenId_Object = MibTableColumn
smNwProtInfoModTenId = _SmNwProtInfoModTenId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 10, 1, 1, 2),
    _SmNwProtInfoModTenId_Type()
)
smNwProtInfoModTenId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModTenId.setStatus("mandatory")


class _SmNwProtInfoModTenExists_Type(Integer32):
    """Custom type smNwProtInfoModTenExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_SmNwProtInfoModTenExists_Type.__name__ = "Integer32"
_SmNwProtInfoModTenExists_Object = MibTableColumn
smNwProtInfoModTenExists = _SmNwProtInfoModTenExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 10, 1, 1, 3),
    _SmNwProtInfoModTenExists_Type()
)
smNwProtInfoModTenExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModTenExists.setStatus("mandatory")


class _SmNwProtInfoModTenPowerState_Type(Integer32):
    """Custom type smNwProtInfoModTenPowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_SmNwProtInfoModTenPowerState_Type.__name__ = "Integer32"
_SmNwProtInfoModTenPowerState_Object = MibTableColumn
smNwProtInfoModTenPowerState = _SmNwProtInfoModTenPowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 10, 1, 1, 4),
    _SmNwProtInfoModTenPowerState_Type()
)
smNwProtInfoModTenPowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNwProtInfoModTenPowerState.setStatus("mandatory")
_SmNwProtInfoModTenProtName_Type = OctetString
_SmNwProtInfoModTenProtName_Object = MibTableColumn
smNwProtInfoModTenProtName = _SmNwProtInfoModTenProtName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 10, 1, 1, 5),
    _SmNwProtInfoModTenProtName_Type()
)
smNwProtInfoModTenProtName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModTenProtName.setStatus("mandatory")


class _SmNwProtInfoModTenProtID_Type(Integer32):
    """Custom type smNwProtInfoModTenProtID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("tcp", 2),
          ("udp", 3))
    )


_SmNwProtInfoModTenProtID_Type.__name__ = "Integer32"
_SmNwProtInfoModTenProtID_Object = MibTableColumn
smNwProtInfoModTenProtID = _SmNwProtInfoModTenProtID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 10, 1, 1, 6),
    _SmNwProtInfoModTenProtID_Type()
)
smNwProtInfoModTenProtID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModTenProtID.setStatus("mandatory")
_SmNwProtInfoModTenExtPort_Type = Integer32
_SmNwProtInfoModTenExtPort_Object = MibTableColumn
smNwProtInfoModTenExtPort = _SmNwProtInfoModTenExtPort_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 10, 1, 1, 7),
    _SmNwProtInfoModTenExtPort_Type()
)
smNwProtInfoModTenExtPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModTenExtPort.setStatus("mandatory")
_SmNwProtInfoModTenIntPort_Type = Integer32
_SmNwProtInfoModTenIntPort_Object = MibTableColumn
smNwProtInfoModTenIntPort = _SmNwProtInfoModTenIntPort_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 10, 1, 1, 8),
    _SmNwProtInfoModTenIntPort_Type()
)
smNwProtInfoModTenIntPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModTenIntPort.setStatus("mandatory")


class _SmNwProtInfoModTenEnable_Type(Integer32):
    """Custom type smNwProtInfoModTenEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SmNwProtInfoModTenEnable_Type.__name__ = "Integer32"
_SmNwProtInfoModTenEnable_Object = MibTableColumn
smNwProtInfoModTenEnable = _SmNwProtInfoModTenEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 10, 1, 1, 9),
    _SmNwProtInfoModTenEnable_Type()
)
smNwProtInfoModTenEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModTenEnable.setStatus("mandatory")


class _SmNwProtInfoModTenActivate_Type(Integer32):
    """Custom type smNwProtInfoModTenActivate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_SmNwProtInfoModTenActivate_Type.__name__ = "Integer32"
_SmNwProtInfoModTenActivate_Object = MibScalar
smNwProtInfoModTenActivate = _SmNwProtInfoModTenActivate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 10, 2),
    _SmNwProtInfoModTenActivate_Type()
)
smNwProtInfoModTenActivate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModTenActivate.setStatus("mandatory")


class _SmNwProtInfoModTenReset_Type(Integer32):
    """Custom type smNwProtInfoModTenReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_SmNwProtInfoModTenReset_Type.__name__ = "Integer32"
_SmNwProtInfoModTenReset_Object = MibScalar
smNwProtInfoModTenReset = _SmNwProtInfoModTenReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 3, 10, 3),
    _SmNwProtInfoModTenReset_Type()
)
smNwProtInfoModTenReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNwProtInfoModTenReset.setStatus("mandatory")
_SwitchIPv6Config_ObjectIdentity = ObjectIdentity
switchIPv6Config = _SwitchIPv6Config_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4)
)
_SmIPv6ConfigTable_Object = MibTable
smIPv6ConfigTable = _SmIPv6ConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 1)
)
if mibBuilder.loadTexts:
    smIPv6ConfigTable.setStatus("mandatory")
_SmIPv6ConfigEntry_Object = MibTableRow
smIPv6ConfigEntry = _SmIPv6ConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 1, 1)
)
smIPv6ConfigEntry.setIndexNames(
    (0, "BLADE-MIB", "smIPv6ConfigIndex"),
)
if mibBuilder.loadTexts:
    smIPv6ConfigEntry.setStatus("mandatory")
_SmIPv6ConfigIndex_Type = Integer32
_SmIPv6ConfigIndex_Object = MibTableColumn
smIPv6ConfigIndex = _SmIPv6ConfigIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 1, 1, 1),
    _SmIPv6ConfigIndex_Type()
)
smIPv6ConfigIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smIPv6ConfigIndex.setStatus("mandatory")


class _SmIPv6ConfigEnabled_Type(Integer32):
    """Custom type smIPv6ConfigEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SmIPv6ConfigEnabled_Type.__name__ = "Integer32"
_SmIPv6ConfigEnabled_Object = MibTableColumn
smIPv6ConfigEnabled = _SmIPv6ConfigEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 1, 1, 2),
    _SmIPv6ConfigEnabled_Type()
)
smIPv6ConfigEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smIPv6ConfigEnabled.setStatus("mandatory")


class _SmIPv6ConfigStatic_Type(Integer32):
    """Custom type smIPv6ConfigStatic based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SmIPv6ConfigStatic_Type.__name__ = "Integer32"
_SmIPv6ConfigStatic_Object = MibTableColumn
smIPv6ConfigStatic = _SmIPv6ConfigStatic_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 1, 1, 3),
    _SmIPv6ConfigStatic_Type()
)
smIPv6ConfigStatic.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smIPv6ConfigStatic.setStatus("mandatory")


class _SmDHCPv6ConfigEnabled_Type(Integer32):
    """Custom type smDHCPv6ConfigEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SmDHCPv6ConfigEnabled_Type.__name__ = "Integer32"
_SmDHCPv6ConfigEnabled_Object = MibTableColumn
smDHCPv6ConfigEnabled = _SmDHCPv6ConfigEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 1, 1, 4),
    _SmDHCPv6ConfigEnabled_Type()
)
smDHCPv6ConfigEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smDHCPv6ConfigEnabled.setStatus("mandatory")


class _SmIPv6ConfigStatelessEnabled_Type(Integer32):
    """Custom type smIPv6ConfigStatelessEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SmIPv6ConfigStatelessEnabled_Type.__name__ = "Integer32"
_SmIPv6ConfigStatelessEnabled_Object = MibTableColumn
smIPv6ConfigStatelessEnabled = _SmIPv6ConfigStatelessEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 1, 1, 5),
    _SmIPv6ConfigStatelessEnabled_Type()
)
smIPv6ConfigStatelessEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smIPv6ConfigStatelessEnabled.setStatus("mandatory")
_SmIPv6AddressTable_Object = MibTable
smIPv6AddressTable = _SmIPv6AddressTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 2)
)
if mibBuilder.loadTexts:
    smIPv6AddressTable.setStatus("mandatory")
_SmIPv6AddressEntry_Object = MibTableRow
smIPv6AddressEntry = _SmIPv6AddressEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 2, 1)
)
smIPv6AddressEntry.setIndexNames(
    (0, "BLADE-MIB", "smIPv6AddressIndex"),
    (0, "BLADE-MIB", "smIPv6AddressEntryIndex"),
)
if mibBuilder.loadTexts:
    smIPv6AddressEntry.setStatus("mandatory")
_SmIPv6AddressIndex_Type = Integer32
_SmIPv6AddressIndex_Object = MibTableColumn
smIPv6AddressIndex = _SmIPv6AddressIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 2, 1, 1),
    _SmIPv6AddressIndex_Type()
)
smIPv6AddressIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smIPv6AddressIndex.setStatus("mandatory")
_SmIPv6AddressEntryIndex_Type = Integer32
_SmIPv6AddressEntryIndex_Object = MibTableColumn
smIPv6AddressEntryIndex = _SmIPv6AddressEntryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 2, 1, 2),
    _SmIPv6AddressEntryIndex_Type()
)
smIPv6AddressEntryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smIPv6AddressEntryIndex.setStatus("mandatory")


class _SmIPv6AddressType_Type(Integer32):
    """Custom type smIPv6AddressType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("static", 1),
          ("dhcp6", 2),
          ("link-local", 3),
          ("autconfig", 4),
          ("configured-static", 5))
    )


_SmIPv6AddressType_Type.__name__ = "Integer32"
_SmIPv6AddressType_Object = MibTableColumn
smIPv6AddressType = _SmIPv6AddressType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 2, 1, 3),
    _SmIPv6AddressType_Type()
)
smIPv6AddressType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smIPv6AddressType.setStatus("mandatory")
_SmIPv6Address_Type = InetAddressIPv6
_SmIPv6Address_Object = MibTableColumn
smIPv6Address = _SmIPv6Address_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 2, 1, 4),
    _SmIPv6Address_Type()
)
smIPv6Address.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smIPv6Address.setStatus("mandatory")
_SmIPv6AddressPrefixLen_Type = Integer32
_SmIPv6AddressPrefixLen_Object = MibTableColumn
smIPv6AddressPrefixLen = _SmIPv6AddressPrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 2, 1, 5),
    _SmIPv6AddressPrefixLen_Type()
)
smIPv6AddressPrefixLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smIPv6AddressPrefixLen.setStatus("mandatory")
_SmIPv6AddressDefaultRoute_Type = InetAddressIPv6
_SmIPv6AddressDefaultRoute_Object = MibTableColumn
smIPv6AddressDefaultRoute = _SmIPv6AddressDefaultRoute_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 2, 1, 6),
    _SmIPv6AddressDefaultRoute_Type()
)
smIPv6AddressDefaultRoute.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smIPv6AddressDefaultRoute.setStatus("mandatory")
_SmIPv6StaticConfigTable_Object = MibTable
smIPv6StaticConfigTable = _SmIPv6StaticConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 3)
)
if mibBuilder.loadTexts:
    smIPv6StaticConfigTable.setStatus("mandatory")
_SmIPv6StaticConfigEntry_Object = MibTableRow
smIPv6StaticConfigEntry = _SmIPv6StaticConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 3, 1)
)
smIPv6StaticConfigEntry.setIndexNames(
    (0, "BLADE-MIB", "smIPv6StaticIndex"),
)
if mibBuilder.loadTexts:
    smIPv6StaticConfigEntry.setStatus("mandatory")
_SmIPv6StaticIndex_Type = Integer32
_SmIPv6StaticIndex_Object = MibTableColumn
smIPv6StaticIndex = _SmIPv6StaticIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 3, 1, 1),
    _SmIPv6StaticIndex_Type()
)
smIPv6StaticIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smIPv6StaticIndex.setStatus("mandatory")
_SmIPv6StaticAddress_Type = InetAddressIPv6
_SmIPv6StaticAddress_Object = MibTableColumn
smIPv6StaticAddress = _SmIPv6StaticAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 3, 1, 2),
    _SmIPv6StaticAddress_Type()
)
smIPv6StaticAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smIPv6StaticAddress.setStatus("mandatory")
_SmIPv6StaticAddressPrefixLen_Type = Integer32
_SmIPv6StaticAddressPrefixLen_Object = MibTableColumn
smIPv6StaticAddressPrefixLen = _SmIPv6StaticAddressPrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 3, 1, 3),
    _SmIPv6StaticAddressPrefixLen_Type()
)
smIPv6StaticAddressPrefixLen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smIPv6StaticAddressPrefixLen.setStatus("mandatory")
_SmIPv6StaticAddressDefaultRoute_Type = InetAddressIPv6
_SmIPv6StaticAddressDefaultRoute_Object = MibTableColumn
smIPv6StaticAddressDefaultRoute = _SmIPv6StaticAddressDefaultRoute_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 3, 1, 4),
    _SmIPv6StaticAddressDefaultRoute_Type()
)
smIPv6StaticAddressDefaultRoute.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smIPv6StaticAddressDefaultRoute.setStatus("mandatory")
_SwitchPortCfg_ObjectIdentity = ObjectIdentity
switchPortCfg = _SwitchPortCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2)
)
_SwitchModOnePortCfg_ObjectIdentity = ObjectIdentity
switchModOnePortCfg = _SwitchModOnePortCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1)
)
_SmOnePortCfgTable_Object = MibTable
smOnePortCfgTable = _SmOnePortCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1)
)
if mibBuilder.loadTexts:
    smOnePortCfgTable.setStatus("mandatory")
_SmOnePortCfgEntry_Object = MibTableRow
smOnePortCfgEntry = _SmOnePortCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1)
)
smOnePortCfgEntry.setIndexNames(
    (0, "BLADE-MIB", "smOnePortCfgIndex"),
)
if mibBuilder.loadTexts:
    smOnePortCfgEntry.setStatus("mandatory")
_SmOnePortCfgIndex_Type = Integer32
_SmOnePortCfgIndex_Object = MibTableColumn
smOnePortCfgIndex = _SmOnePortCfgIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 1),
    _SmOnePortCfgIndex_Type()
)
smOnePortCfgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smOnePortCfgIndex.setStatus("mandatory")
_SmOnePortCfgLabel_Type = OctetString
_SmOnePortCfgLabel_Object = MibTableColumn
smOnePortCfgLabel = _SmOnePortCfgLabel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 2),
    _SmOnePortCfgLabel_Type()
)
smOnePortCfgLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smOnePortCfgLabel.setStatus("mandatory")


class _SmOnePortCfgType_Type(Integer32):
    """Custom type smOnePortCfgType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("unused", 0),
          ("externalPort", 1),
          ("externalManagementPort", 2),
          ("externalDualPort", 3),
          ("bladePort", 4),
          ("mmManagementPort", 5),
          ("uplinkPort", 6),
          ("interModulePort", 7),
          ("interModuleManagementPort", 8),
          ("interModuleDualPort", 9),
          ("interModuleExternalBridgePort", 10),
          ("interModuleDualInternalBridgePort", 11))
    )


_SmOnePortCfgType_Type.__name__ = "Integer32"
_SmOnePortCfgType_Object = MibTableColumn
smOnePortCfgType = _SmOnePortCfgType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 3),
    _SmOnePortCfgType_Type()
)
smOnePortCfgType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smOnePortCfgType.setStatus("mandatory")


class _SmOnePortCfgLinkSetting_Type(Integer32):
    """Custom type smOnePortCfgLinkSetting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("up", 1))
    )


_SmOnePortCfgLinkSetting_Type.__name__ = "Integer32"
_SmOnePortCfgLinkSetting_Object = MibTableColumn
smOnePortCfgLinkSetting = _SmOnePortCfgLinkSetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 4),
    _SmOnePortCfgLinkSetting_Type()
)
smOnePortCfgLinkSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smOnePortCfgLinkSetting.setStatus("mandatory")


class _SmOnePortCfgLinkState_Type(Integer32):
    """Custom type smOnePortCfgLinkState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("up", 1),
          ("initialized", 2))
    )


_SmOnePortCfgLinkState_Type.__name__ = "Integer32"
_SmOnePortCfgLinkState_Object = MibTableColumn
smOnePortCfgLinkState = _SmOnePortCfgLinkState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 5),
    _SmOnePortCfgLinkState_Type()
)
smOnePortCfgLinkState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smOnePortCfgLinkState.setStatus("mandatory")
_SmOnePortCfgSpeedSetting_Type = OctetString
_SmOnePortCfgSpeedSetting_Object = MibTableColumn
smOnePortCfgSpeedSetting = _SmOnePortCfgSpeedSetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 6),
    _SmOnePortCfgSpeedSetting_Type()
)
smOnePortCfgSpeedSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smOnePortCfgSpeedSetting.setStatus("mandatory")
_SmOnePortCfgSpeedStatus_Type = OctetString
_SmOnePortCfgSpeedStatus_Object = MibTableColumn
smOnePortCfgSpeedStatus = _SmOnePortCfgSpeedStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 7),
    _SmOnePortCfgSpeedStatus_Type()
)
smOnePortCfgSpeedStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smOnePortCfgSpeedStatus.setStatus("mandatory")
_SmOnePortCfgAvailSpeeds_Type = OctetString
_SmOnePortCfgAvailSpeeds_Object = MibTableColumn
smOnePortCfgAvailSpeeds = _SmOnePortCfgAvailSpeeds_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 8),
    _SmOnePortCfgAvailSpeeds_Type()
)
smOnePortCfgAvailSpeeds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smOnePortCfgAvailSpeeds.setStatus("mandatory")


class _SmOnePortCfgMedia_Type(Integer32):
    """Custom type smOnePortCfgMedia based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              32,
              48,
              255)
        )
    )
    namedValues = NamedValues(
        *(("copper", 0),
          ("serdes", 1),
          ("opticalShortHaul", 32),
          ("opticalLongHaul", 48),
          ("notApplicable", 255))
    )


_SmOnePortCfgMedia_Type.__name__ = "Integer32"
_SmOnePortCfgMedia_Object = MibTableColumn
smOnePortCfgMedia = _SmOnePortCfgMedia_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 9),
    _SmOnePortCfgMedia_Type()
)
smOnePortCfgMedia.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smOnePortCfgMedia.setStatus("mandatory")


class _SmOnePortCfgProtocol_Type(Integer32):
    """Custom type smOnePortCfgProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(16,
              32,
              48,
              64,
              80,
              112,
              255)
        )
    )
    namedValues = NamedValues(
        *(("ethernet", 16),
          ("fibreChannel", 32),
          ("scalability", 48),
          ("infiniband", 64),
          ("pciExpress", 80),
          ("myrinet", 112),
          ("notApplicable", 255))
    )


_SmOnePortCfgProtocol_Type.__name__ = "Integer32"
_SmOnePortCfgProtocol_Object = MibTableColumn
smOnePortCfgProtocol = _SmOnePortCfgProtocol_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 10),
    _SmOnePortCfgProtocol_Type()
)
smOnePortCfgProtocol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smOnePortCfgProtocol.setStatus("mandatory")
_SmOnePortCfgWidth_Type = Integer32
_SmOnePortCfgWidth_Object = MibTableColumn
smOnePortCfgWidth = _SmOnePortCfgWidth_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 11),
    _SmOnePortCfgWidth_Type()
)
smOnePortCfgWidth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smOnePortCfgWidth.setStatus("mandatory")
_SmOnePortCfgCableLength_Type = Integer32
_SmOnePortCfgCableLength_Object = MibTableColumn
smOnePortCfgCableLength = _SmOnePortCfgCableLength_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 12),
    _SmOnePortCfgCableLength_Type()
)
smOnePortCfgCableLength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smOnePortCfgCableLength.setStatus("mandatory")
_SmOnePortCfgCableType_Type = OctetString
_SmOnePortCfgCableType_Object = MibTableColumn
smOnePortCfgCableType = _SmOnePortCfgCableType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 13),
    _SmOnePortCfgCableType_Type()
)
smOnePortCfgCableType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smOnePortCfgCableType.setStatus("mandatory")
_SmOnePortCfgVendorName_Type = OctetString
_SmOnePortCfgVendorName_Object = MibTableColumn
smOnePortCfgVendorName = _SmOnePortCfgVendorName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 14),
    _SmOnePortCfgVendorName_Type()
)
smOnePortCfgVendorName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smOnePortCfgVendorName.setStatus("mandatory")


class _SmOnePortCfgCompatibility_Type(Integer32):
    """Custom type smOnePortCfgCompatibility based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("incompatible", 0),
          ("compatible", 1),
          ("compatibleNotRecommended", 2),
          ("notApplicable", 255))
    )


_SmOnePortCfgCompatibility_Type.__name__ = "Integer32"
_SmOnePortCfgCompatibility_Object = MibTableColumn
smOnePortCfgCompatibility = _SmOnePortCfgCompatibility_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 15),
    _SmOnePortCfgCompatibility_Type()
)
smOnePortCfgCompatibility.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smOnePortCfgCompatibility.setStatus("mandatory")


class _SmOnePortCfgDataRate_Type(Integer32):
    """Custom type smOnePortCfgDataRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("sdr", 0),
          ("ddr", 1),
          ("qdr", 2),
          ("edr", 3),
          ("notApplicable", 255))
    )


_SmOnePortCfgDataRate_Type.__name__ = "Integer32"
_SmOnePortCfgDataRate_Object = MibTableColumn
smOnePortCfgDataRate = _SmOnePortCfgDataRate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 16),
    _SmOnePortCfgDataRate_Type()
)
smOnePortCfgDataRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smOnePortCfgDataRate.setStatus("mandatory")
_SwitchModTwoPortCfg_ObjectIdentity = ObjectIdentity
switchModTwoPortCfg = _SwitchModTwoPortCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2)
)
_SmTwoPortCfgTable_Object = MibTable
smTwoPortCfgTable = _SmTwoPortCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1)
)
if mibBuilder.loadTexts:
    smTwoPortCfgTable.setStatus("mandatory")
_SmTwoPortCfgEntry_Object = MibTableRow
smTwoPortCfgEntry = _SmTwoPortCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1)
)
smTwoPortCfgEntry.setIndexNames(
    (0, "BLADE-MIB", "smTwoPortCfgIndex"),
)
if mibBuilder.loadTexts:
    smTwoPortCfgEntry.setStatus("mandatory")
_SmTwoPortCfgIndex_Type = Integer32
_SmTwoPortCfgIndex_Object = MibTableColumn
smTwoPortCfgIndex = _SmTwoPortCfgIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 1),
    _SmTwoPortCfgIndex_Type()
)
smTwoPortCfgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTwoPortCfgIndex.setStatus("mandatory")
_SmTwoPortCfgLabel_Type = OctetString
_SmTwoPortCfgLabel_Object = MibTableColumn
smTwoPortCfgLabel = _SmTwoPortCfgLabel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 2),
    _SmTwoPortCfgLabel_Type()
)
smTwoPortCfgLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTwoPortCfgLabel.setStatus("mandatory")


class _SmTwoPortCfgType_Type(Integer32):
    """Custom type smTwoPortCfgType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("unused", 0),
          ("externalPort", 1),
          ("externalManagementPort", 2),
          ("externalDualPort", 3),
          ("bladePort", 4),
          ("mmManagementPort", 5),
          ("uplinkPort", 6),
          ("interModulePort", 7),
          ("interModuleManagementPort", 8),
          ("interModuleDualPort", 9),
          ("interModuleExternalBridgePort", 10),
          ("interModuleDualInternalBridgePort", 11))
    )


_SmTwoPortCfgType_Type.__name__ = "Integer32"
_SmTwoPortCfgType_Object = MibTableColumn
smTwoPortCfgType = _SmTwoPortCfgType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 3),
    _SmTwoPortCfgType_Type()
)
smTwoPortCfgType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTwoPortCfgType.setStatus("mandatory")


class _SmTwoPortCfgLinkSetting_Type(Integer32):
    """Custom type smTwoPortCfgLinkSetting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("up", 1))
    )


_SmTwoPortCfgLinkSetting_Type.__name__ = "Integer32"
_SmTwoPortCfgLinkSetting_Object = MibTableColumn
smTwoPortCfgLinkSetting = _SmTwoPortCfgLinkSetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 4),
    _SmTwoPortCfgLinkSetting_Type()
)
smTwoPortCfgLinkSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smTwoPortCfgLinkSetting.setStatus("mandatory")


class _SmTwoPortCfgLinkState_Type(Integer32):
    """Custom type smTwoPortCfgLinkState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("up", 1),
          ("initialized", 2))
    )


_SmTwoPortCfgLinkState_Type.__name__ = "Integer32"
_SmTwoPortCfgLinkState_Object = MibTableColumn
smTwoPortCfgLinkState = _SmTwoPortCfgLinkState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 5),
    _SmTwoPortCfgLinkState_Type()
)
smTwoPortCfgLinkState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTwoPortCfgLinkState.setStatus("mandatory")
_SmTwoPortCfgSpeedSetting_Type = OctetString
_SmTwoPortCfgSpeedSetting_Object = MibTableColumn
smTwoPortCfgSpeedSetting = _SmTwoPortCfgSpeedSetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 6),
    _SmTwoPortCfgSpeedSetting_Type()
)
smTwoPortCfgSpeedSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smTwoPortCfgSpeedSetting.setStatus("mandatory")
_SmTwoPortCfgSpeedStatus_Type = OctetString
_SmTwoPortCfgSpeedStatus_Object = MibTableColumn
smTwoPortCfgSpeedStatus = _SmTwoPortCfgSpeedStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 7),
    _SmTwoPortCfgSpeedStatus_Type()
)
smTwoPortCfgSpeedStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTwoPortCfgSpeedStatus.setStatus("mandatory")
_SmTwoPortCfgAvailSpeeds_Type = OctetString
_SmTwoPortCfgAvailSpeeds_Object = MibTableColumn
smTwoPortCfgAvailSpeeds = _SmTwoPortCfgAvailSpeeds_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 8),
    _SmTwoPortCfgAvailSpeeds_Type()
)
smTwoPortCfgAvailSpeeds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTwoPortCfgAvailSpeeds.setStatus("mandatory")


class _SmTwoPortCfgMedia_Type(Integer32):
    """Custom type smTwoPortCfgMedia based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              32,
              48,
              255)
        )
    )
    namedValues = NamedValues(
        *(("copper", 0),
          ("serdes", 1),
          ("opticalShortHaul", 32),
          ("opticalLongHaul", 48),
          ("notApplicable", 255))
    )


_SmTwoPortCfgMedia_Type.__name__ = "Integer32"
_SmTwoPortCfgMedia_Object = MibTableColumn
smTwoPortCfgMedia = _SmTwoPortCfgMedia_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 9),
    _SmTwoPortCfgMedia_Type()
)
smTwoPortCfgMedia.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTwoPortCfgMedia.setStatus("mandatory")


class _SmTwoPortCfgProtocol_Type(Integer32):
    """Custom type smTwoPortCfgProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(16,
              32,
              48,
              64,
              80,
              112,
              255)
        )
    )
    namedValues = NamedValues(
        *(("ethernet", 16),
          ("fibreChannel", 32),
          ("scalability", 48),
          ("infiniband", 64),
          ("pciExpress", 80),
          ("myrinet", 112),
          ("notApplicable", 255))
    )


_SmTwoPortCfgProtocol_Type.__name__ = "Integer32"
_SmTwoPortCfgProtocol_Object = MibTableColumn
smTwoPortCfgProtocol = _SmTwoPortCfgProtocol_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 10),
    _SmTwoPortCfgProtocol_Type()
)
smTwoPortCfgProtocol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTwoPortCfgProtocol.setStatus("mandatory")
_SmTwoPortCfgWidth_Type = Integer32
_SmTwoPortCfgWidth_Object = MibTableColumn
smTwoPortCfgWidth = _SmTwoPortCfgWidth_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 11),
    _SmTwoPortCfgWidth_Type()
)
smTwoPortCfgWidth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTwoPortCfgWidth.setStatus("mandatory")
_SmTwoPortCfgCableLength_Type = Integer32
_SmTwoPortCfgCableLength_Object = MibTableColumn
smTwoPortCfgCableLength = _SmTwoPortCfgCableLength_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 12),
    _SmTwoPortCfgCableLength_Type()
)
smTwoPortCfgCableLength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTwoPortCfgCableLength.setStatus("mandatory")
_SmTwoPortCfgCableType_Type = OctetString
_SmTwoPortCfgCableType_Object = MibTableColumn
smTwoPortCfgCableType = _SmTwoPortCfgCableType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 13),
    _SmTwoPortCfgCableType_Type()
)
smTwoPortCfgCableType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTwoPortCfgCableType.setStatus("mandatory")
_SmTwoPortCfgVendorName_Type = OctetString
_SmTwoPortCfgVendorName_Object = MibTableColumn
smTwoPortCfgVendorName = _SmTwoPortCfgVendorName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 14),
    _SmTwoPortCfgVendorName_Type()
)
smTwoPortCfgVendorName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTwoPortCfgVendorName.setStatus("mandatory")


class _SmTwoPortCfgCompatibility_Type(Integer32):
    """Custom type smTwoPortCfgCompatibility based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("incompatible", 0),
          ("compatible", 1),
          ("compatibleNotRecommended", 2),
          ("notApplicable", 255))
    )


_SmTwoPortCfgCompatibility_Type.__name__ = "Integer32"
_SmTwoPortCfgCompatibility_Object = MibTableColumn
smTwoPortCfgCompatibility = _SmTwoPortCfgCompatibility_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 15),
    _SmTwoPortCfgCompatibility_Type()
)
smTwoPortCfgCompatibility.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTwoPortCfgCompatibility.setStatus("mandatory")


class _SmTwoPortCfgDataRate_Type(Integer32):
    """Custom type smTwoPortCfgDataRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("sdr", 0),
          ("ddr", 1),
          ("qdr", 2),
          ("edr", 3),
          ("notApplicable", 255))
    )


_SmTwoPortCfgDataRate_Type.__name__ = "Integer32"
_SmTwoPortCfgDataRate_Object = MibTableColumn
smTwoPortCfgDataRate = _SmTwoPortCfgDataRate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 16),
    _SmTwoPortCfgDataRate_Type()
)
smTwoPortCfgDataRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTwoPortCfgDataRate.setStatus("mandatory")
_SwitchModThreePortCfg_ObjectIdentity = ObjectIdentity
switchModThreePortCfg = _SwitchModThreePortCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3)
)
_SmThreePortCfgTable_Object = MibTable
smThreePortCfgTable = _SmThreePortCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1)
)
if mibBuilder.loadTexts:
    smThreePortCfgTable.setStatus("mandatory")
_SmThreePortCfgEntry_Object = MibTableRow
smThreePortCfgEntry = _SmThreePortCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1)
)
smThreePortCfgEntry.setIndexNames(
    (0, "BLADE-MIB", "smThreePortCfgIndex"),
)
if mibBuilder.loadTexts:
    smThreePortCfgEntry.setStatus("mandatory")
_SmThreePortCfgIndex_Type = Integer32
_SmThreePortCfgIndex_Object = MibTableColumn
smThreePortCfgIndex = _SmThreePortCfgIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 1),
    _SmThreePortCfgIndex_Type()
)
smThreePortCfgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smThreePortCfgIndex.setStatus("mandatory")
_SmThreePortCfgLabel_Type = OctetString
_SmThreePortCfgLabel_Object = MibTableColumn
smThreePortCfgLabel = _SmThreePortCfgLabel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 2),
    _SmThreePortCfgLabel_Type()
)
smThreePortCfgLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smThreePortCfgLabel.setStatus("mandatory")


class _SmThreePortCfgType_Type(Integer32):
    """Custom type smThreePortCfgType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("unused", 0),
          ("externalPort", 1),
          ("externalManagementPort", 2),
          ("externalDualPort", 3),
          ("bladePort", 4),
          ("mmManagementPort", 5),
          ("uplinkPort", 6),
          ("interModulePort", 7),
          ("interModuleManagementPort", 8),
          ("interModuleDualPort", 9),
          ("interModuleExternalBridgePort", 10),
          ("interModuleDualInternalBridgePort", 11))
    )


_SmThreePortCfgType_Type.__name__ = "Integer32"
_SmThreePortCfgType_Object = MibTableColumn
smThreePortCfgType = _SmThreePortCfgType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 3),
    _SmThreePortCfgType_Type()
)
smThreePortCfgType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smThreePortCfgType.setStatus("mandatory")


class _SmThreePortCfgLinkSetting_Type(Integer32):
    """Custom type smThreePortCfgLinkSetting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("up", 1))
    )


_SmThreePortCfgLinkSetting_Type.__name__ = "Integer32"
_SmThreePortCfgLinkSetting_Object = MibTableColumn
smThreePortCfgLinkSetting = _SmThreePortCfgLinkSetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 4),
    _SmThreePortCfgLinkSetting_Type()
)
smThreePortCfgLinkSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smThreePortCfgLinkSetting.setStatus("mandatory")


class _SmThreePortCfgLinkState_Type(Integer32):
    """Custom type smThreePortCfgLinkState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("up", 1),
          ("initialized", 2))
    )


_SmThreePortCfgLinkState_Type.__name__ = "Integer32"
_SmThreePortCfgLinkState_Object = MibTableColumn
smThreePortCfgLinkState = _SmThreePortCfgLinkState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 5),
    _SmThreePortCfgLinkState_Type()
)
smThreePortCfgLinkState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smThreePortCfgLinkState.setStatus("mandatory")
_SmThreePortCfgSpeedSetting_Type = OctetString
_SmThreePortCfgSpeedSetting_Object = MibTableColumn
smThreePortCfgSpeedSetting = _SmThreePortCfgSpeedSetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 6),
    _SmThreePortCfgSpeedSetting_Type()
)
smThreePortCfgSpeedSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smThreePortCfgSpeedSetting.setStatus("mandatory")
_SmThreePortCfgSpeedStatus_Type = OctetString
_SmThreePortCfgSpeedStatus_Object = MibTableColumn
smThreePortCfgSpeedStatus = _SmThreePortCfgSpeedStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 7),
    _SmThreePortCfgSpeedStatus_Type()
)
smThreePortCfgSpeedStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smThreePortCfgSpeedStatus.setStatus("mandatory")
_SmThreePortCfgAvailSpeeds_Type = OctetString
_SmThreePortCfgAvailSpeeds_Object = MibTableColumn
smThreePortCfgAvailSpeeds = _SmThreePortCfgAvailSpeeds_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 8),
    _SmThreePortCfgAvailSpeeds_Type()
)
smThreePortCfgAvailSpeeds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smThreePortCfgAvailSpeeds.setStatus("mandatory")


class _SmThreePortCfgMedia_Type(Integer32):
    """Custom type smThreePortCfgMedia based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              32,
              48,
              255)
        )
    )
    namedValues = NamedValues(
        *(("copper", 0),
          ("serdes", 1),
          ("opticalShortHaul", 32),
          ("opticalLongHaul", 48),
          ("notApplicable", 255))
    )


_SmThreePortCfgMedia_Type.__name__ = "Integer32"
_SmThreePortCfgMedia_Object = MibTableColumn
smThreePortCfgMedia = _SmThreePortCfgMedia_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 9),
    _SmThreePortCfgMedia_Type()
)
smThreePortCfgMedia.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smThreePortCfgMedia.setStatus("mandatory")


class _SmThreePortCfgProtocol_Type(Integer32):
    """Custom type smThreePortCfgProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(16,
              32,
              48,
              64,
              80,
              112,
              255)
        )
    )
    namedValues = NamedValues(
        *(("ethernet", 16),
          ("fibreChannel", 32),
          ("scalability", 48),
          ("infiniband", 64),
          ("pciExpress", 80),
          ("myrinet", 112),
          ("notApplicable", 255))
    )


_SmThreePortCfgProtocol_Type.__name__ = "Integer32"
_SmThreePortCfgProtocol_Object = MibTableColumn
smThreePortCfgProtocol = _SmThreePortCfgProtocol_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 10),
    _SmThreePortCfgProtocol_Type()
)
smThreePortCfgProtocol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smThreePortCfgProtocol.setStatus("mandatory")
_SmThreePortCfgWidth_Type = Integer32
_SmThreePortCfgWidth_Object = MibTableColumn
smThreePortCfgWidth = _SmThreePortCfgWidth_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 11),
    _SmThreePortCfgWidth_Type()
)
smThreePortCfgWidth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smThreePortCfgWidth.setStatus("mandatory")
_SmThreePortCfgCableLength_Type = Integer32
_SmThreePortCfgCableLength_Object = MibTableColumn
smThreePortCfgCableLength = _SmThreePortCfgCableLength_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 12),
    _SmThreePortCfgCableLength_Type()
)
smThreePortCfgCableLength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smThreePortCfgCableLength.setStatus("mandatory")
_SmThreePortCfgCableType_Type = OctetString
_SmThreePortCfgCableType_Object = MibTableColumn
smThreePortCfgCableType = _SmThreePortCfgCableType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 13),
    _SmThreePortCfgCableType_Type()
)
smThreePortCfgCableType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smThreePortCfgCableType.setStatus("mandatory")
_SmThreePortCfgVendorName_Type = OctetString
_SmThreePortCfgVendorName_Object = MibTableColumn
smThreePortCfgVendorName = _SmThreePortCfgVendorName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 14),
    _SmThreePortCfgVendorName_Type()
)
smThreePortCfgVendorName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smThreePortCfgVendorName.setStatus("mandatory")


class _SmThreePortCfgCompatibility_Type(Integer32):
    """Custom type smThreePortCfgCompatibility based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("incompatible", 0),
          ("compatible", 1),
          ("compatibleNotRecommended", 2),
          ("notApplicable", 255))
    )


_SmThreePortCfgCompatibility_Type.__name__ = "Integer32"
_SmThreePortCfgCompatibility_Object = MibTableColumn
smThreePortCfgCompatibility = _SmThreePortCfgCompatibility_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 15),
    _SmThreePortCfgCompatibility_Type()
)
smThreePortCfgCompatibility.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smThreePortCfgCompatibility.setStatus("mandatory")


class _SmThreePortCfgDataRate_Type(Integer32):
    """Custom type smThreePortCfgDataRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("sdr", 0),
          ("ddr", 1),
          ("qdr", 2),
          ("edr", 3),
          ("notApplicable", 255))
    )


_SmThreePortCfgDataRate_Type.__name__ = "Integer32"
_SmThreePortCfgDataRate_Object = MibTableColumn
smThreePortCfgDataRate = _SmThreePortCfgDataRate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 16),
    _SmThreePortCfgDataRate_Type()
)
smThreePortCfgDataRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smThreePortCfgDataRate.setStatus("mandatory")
_SwitchModFourPortCfg_ObjectIdentity = ObjectIdentity
switchModFourPortCfg = _SwitchModFourPortCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4)
)
_SmFourPortCfgTable_Object = MibTable
smFourPortCfgTable = _SmFourPortCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1)
)
if mibBuilder.loadTexts:
    smFourPortCfgTable.setStatus("mandatory")
_SmFourPortCfgEntry_Object = MibTableRow
smFourPortCfgEntry = _SmFourPortCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1)
)
smFourPortCfgEntry.setIndexNames(
    (0, "BLADE-MIB", "smFourPortCfgIndex"),
)
if mibBuilder.loadTexts:
    smFourPortCfgEntry.setStatus("mandatory")
_SmFourPortCfgIndex_Type = Integer32
_SmFourPortCfgIndex_Object = MibTableColumn
smFourPortCfgIndex = _SmFourPortCfgIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 1),
    _SmFourPortCfgIndex_Type()
)
smFourPortCfgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFourPortCfgIndex.setStatus("mandatory")
_SmFourPortCfgLabel_Type = OctetString
_SmFourPortCfgLabel_Object = MibTableColumn
smFourPortCfgLabel = _SmFourPortCfgLabel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 2),
    _SmFourPortCfgLabel_Type()
)
smFourPortCfgLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFourPortCfgLabel.setStatus("mandatory")


class _SmFourPortCfgType_Type(Integer32):
    """Custom type smFourPortCfgType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("unused", 0),
          ("externalPort", 1),
          ("externalManagementPort", 2),
          ("externalDualPort", 3),
          ("bladePort", 4),
          ("mmManagementPort", 5),
          ("uplinkPort", 6),
          ("interModulePort", 7),
          ("interModuleManagementPort", 8),
          ("interModuleDualPort", 9),
          ("interModuleExternalBridgePort", 10),
          ("interModuleDualInternalBridgePort", 11))
    )


_SmFourPortCfgType_Type.__name__ = "Integer32"
_SmFourPortCfgType_Object = MibTableColumn
smFourPortCfgType = _SmFourPortCfgType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 3),
    _SmFourPortCfgType_Type()
)
smFourPortCfgType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFourPortCfgType.setStatus("mandatory")


class _SmFourPortCfgLinkSetting_Type(Integer32):
    """Custom type smFourPortCfgLinkSetting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("up", 1))
    )


_SmFourPortCfgLinkSetting_Type.__name__ = "Integer32"
_SmFourPortCfgLinkSetting_Object = MibTableColumn
smFourPortCfgLinkSetting = _SmFourPortCfgLinkSetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 4),
    _SmFourPortCfgLinkSetting_Type()
)
smFourPortCfgLinkSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smFourPortCfgLinkSetting.setStatus("mandatory")


class _SmFourPortCfgLinkState_Type(Integer32):
    """Custom type smFourPortCfgLinkState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("up", 1),
          ("initialized", 2))
    )


_SmFourPortCfgLinkState_Type.__name__ = "Integer32"
_SmFourPortCfgLinkState_Object = MibTableColumn
smFourPortCfgLinkState = _SmFourPortCfgLinkState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 5),
    _SmFourPortCfgLinkState_Type()
)
smFourPortCfgLinkState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFourPortCfgLinkState.setStatus("mandatory")
_SmFourPortCfgSpeedSetting_Type = OctetString
_SmFourPortCfgSpeedSetting_Object = MibTableColumn
smFourPortCfgSpeedSetting = _SmFourPortCfgSpeedSetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 6),
    _SmFourPortCfgSpeedSetting_Type()
)
smFourPortCfgSpeedSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smFourPortCfgSpeedSetting.setStatus("mandatory")
_SmFourPortCfgSpeedStatus_Type = OctetString
_SmFourPortCfgSpeedStatus_Object = MibTableColumn
smFourPortCfgSpeedStatus = _SmFourPortCfgSpeedStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 7),
    _SmFourPortCfgSpeedStatus_Type()
)
smFourPortCfgSpeedStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFourPortCfgSpeedStatus.setStatus("mandatory")
_SmFourPortCfgAvailSpeeds_Type = OctetString
_SmFourPortCfgAvailSpeeds_Object = MibTableColumn
smFourPortCfgAvailSpeeds = _SmFourPortCfgAvailSpeeds_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 8),
    _SmFourPortCfgAvailSpeeds_Type()
)
smFourPortCfgAvailSpeeds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFourPortCfgAvailSpeeds.setStatus("mandatory")


class _SmFourPortCfgMedia_Type(Integer32):
    """Custom type smFourPortCfgMedia based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              32,
              48,
              255)
        )
    )
    namedValues = NamedValues(
        *(("copper", 0),
          ("serdes", 1),
          ("opticalShortHaul", 32),
          ("opticalLongHaul", 48),
          ("notApplicable", 255))
    )


_SmFourPortCfgMedia_Type.__name__ = "Integer32"
_SmFourPortCfgMedia_Object = MibTableColumn
smFourPortCfgMedia = _SmFourPortCfgMedia_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 9),
    _SmFourPortCfgMedia_Type()
)
smFourPortCfgMedia.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFourPortCfgMedia.setStatus("mandatory")


class _SmFourPortCfgProtocol_Type(Integer32):
    """Custom type smFourPortCfgProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(16,
              32,
              48,
              64,
              80,
              112,
              255)
        )
    )
    namedValues = NamedValues(
        *(("ethernet", 16),
          ("fibreChannel", 32),
          ("scalability", 48),
          ("infiniband", 64),
          ("pciExpress", 80),
          ("myrinet", 112),
          ("notApplicable", 255))
    )


_SmFourPortCfgProtocol_Type.__name__ = "Integer32"
_SmFourPortCfgProtocol_Object = MibTableColumn
smFourPortCfgProtocol = _SmFourPortCfgProtocol_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 10),
    _SmFourPortCfgProtocol_Type()
)
smFourPortCfgProtocol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFourPortCfgProtocol.setStatus("mandatory")
_SmFourPortCfgWidth_Type = Integer32
_SmFourPortCfgWidth_Object = MibTableColumn
smFourPortCfgWidth = _SmFourPortCfgWidth_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 11),
    _SmFourPortCfgWidth_Type()
)
smFourPortCfgWidth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFourPortCfgWidth.setStatus("mandatory")
_SmFourPortCfgCableLength_Type = Integer32
_SmFourPortCfgCableLength_Object = MibTableColumn
smFourPortCfgCableLength = _SmFourPortCfgCableLength_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 12),
    _SmFourPortCfgCableLength_Type()
)
smFourPortCfgCableLength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFourPortCfgCableLength.setStatus("mandatory")
_SmFourPortCfgCableType_Type = OctetString
_SmFourPortCfgCableType_Object = MibTableColumn
smFourPortCfgCableType = _SmFourPortCfgCableType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 13),
    _SmFourPortCfgCableType_Type()
)
smFourPortCfgCableType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFourPortCfgCableType.setStatus("mandatory")
_SmFourPortCfgVendorName_Type = OctetString
_SmFourPortCfgVendorName_Object = MibTableColumn
smFourPortCfgVendorName = _SmFourPortCfgVendorName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 14),
    _SmFourPortCfgVendorName_Type()
)
smFourPortCfgVendorName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFourPortCfgVendorName.setStatus("mandatory")


class _SmFourPortCfgCompatibility_Type(Integer32):
    """Custom type smFourPortCfgCompatibility based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("incompatible", 0),
          ("compatible", 1),
          ("compatibleNotRecommended", 2),
          ("notApplicable", 255))
    )


_SmFourPortCfgCompatibility_Type.__name__ = "Integer32"
_SmFourPortCfgCompatibility_Object = MibTableColumn
smFourPortCfgCompatibility = _SmFourPortCfgCompatibility_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 15),
    _SmFourPortCfgCompatibility_Type()
)
smFourPortCfgCompatibility.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFourPortCfgCompatibility.setStatus("mandatory")


class _SmFourPortCfgDataRate_Type(Integer32):
    """Custom type smFourPortCfgDataRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("sdr", 0),
          ("ddr", 1),
          ("qdr", 2),
          ("edr", 3),
          ("notApplicable", 255))
    )


_SmFourPortCfgDataRate_Type.__name__ = "Integer32"
_SmFourPortCfgDataRate_Object = MibTableColumn
smFourPortCfgDataRate = _SmFourPortCfgDataRate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 16),
    _SmFourPortCfgDataRate_Type()
)
smFourPortCfgDataRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFourPortCfgDataRate.setStatus("mandatory")
_SwitchModFivePortCfg_ObjectIdentity = ObjectIdentity
switchModFivePortCfg = _SwitchModFivePortCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 5)
)
_SmFivePortCfgTable_Object = MibTable
smFivePortCfgTable = _SmFivePortCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 5, 1)
)
if mibBuilder.loadTexts:
    smFivePortCfgTable.setStatus("mandatory")
_SmFivePortCfgEntry_Object = MibTableRow
smFivePortCfgEntry = _SmFivePortCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 5, 1, 1)
)
smFivePortCfgEntry.setIndexNames(
    (0, "BLADE-MIB", "smFivePortCfgIndex"),
)
if mibBuilder.loadTexts:
    smFivePortCfgEntry.setStatus("mandatory")
_SmFivePortCfgIndex_Type = Integer32
_SmFivePortCfgIndex_Object = MibTableColumn
smFivePortCfgIndex = _SmFivePortCfgIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 5, 1, 1, 1),
    _SmFivePortCfgIndex_Type()
)
smFivePortCfgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFivePortCfgIndex.setStatus("mandatory")
_SmFivePortCfgLabel_Type = OctetString
_SmFivePortCfgLabel_Object = MibTableColumn
smFivePortCfgLabel = _SmFivePortCfgLabel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 5, 1, 1, 2),
    _SmFivePortCfgLabel_Type()
)
smFivePortCfgLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFivePortCfgLabel.setStatus("mandatory")


class _SmFivePortCfgType_Type(Integer32):
    """Custom type smFivePortCfgType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("unused", 0),
          ("externalPort", 1),
          ("externalManagementPort", 2),
          ("externalDualPort", 3),
          ("bladePort", 4),
          ("mmManagementPort", 5),
          ("uplinkPort", 6),
          ("interModulePort", 7),
          ("interModuleManagementPort", 8),
          ("interModuleDualPort", 9),
          ("interModuleExternalBridgePort", 10),
          ("interModuleDualInternalBridgePort", 11))
    )


_SmFivePortCfgType_Type.__name__ = "Integer32"
_SmFivePortCfgType_Object = MibTableColumn
smFivePortCfgType = _SmFivePortCfgType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 5, 1, 1, 3),
    _SmFivePortCfgType_Type()
)
smFivePortCfgType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFivePortCfgType.setStatus("mandatory")


class _SmFivePortCfgLinkSetting_Type(Integer32):
    """Custom type smFivePortCfgLinkSetting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("up", 1))
    )


_SmFivePortCfgLinkSetting_Type.__name__ = "Integer32"
_SmFivePortCfgLinkSetting_Object = MibTableColumn
smFivePortCfgLinkSetting = _SmFivePortCfgLinkSetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 5, 1, 1, 4),
    _SmFivePortCfgLinkSetting_Type()
)
smFivePortCfgLinkSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smFivePortCfgLinkSetting.setStatus("mandatory")


class _SmFivePortCfgLinkState_Type(Integer32):
    """Custom type smFivePortCfgLinkState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("up", 1),
          ("initialized", 2))
    )


_SmFivePortCfgLinkState_Type.__name__ = "Integer32"
_SmFivePortCfgLinkState_Object = MibTableColumn
smFivePortCfgLinkState = _SmFivePortCfgLinkState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 5, 1, 1, 5),
    _SmFivePortCfgLinkState_Type()
)
smFivePortCfgLinkState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFivePortCfgLinkState.setStatus("mandatory")
_SmFivePortCfgSpeedSetting_Type = OctetString
_SmFivePortCfgSpeedSetting_Object = MibTableColumn
smFivePortCfgSpeedSetting = _SmFivePortCfgSpeedSetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 5, 1, 1, 6),
    _SmFivePortCfgSpeedSetting_Type()
)
smFivePortCfgSpeedSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smFivePortCfgSpeedSetting.setStatus("mandatory")
_SmFivePortCfgSpeedStatus_Type = OctetString
_SmFivePortCfgSpeedStatus_Object = MibTableColumn
smFivePortCfgSpeedStatus = _SmFivePortCfgSpeedStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 5, 1, 1, 7),
    _SmFivePortCfgSpeedStatus_Type()
)
smFivePortCfgSpeedStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFivePortCfgSpeedStatus.setStatus("mandatory")
_SmFivePortCfgAvailSpeeds_Type = OctetString
_SmFivePortCfgAvailSpeeds_Object = MibTableColumn
smFivePortCfgAvailSpeeds = _SmFivePortCfgAvailSpeeds_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 5, 1, 1, 8),
    _SmFivePortCfgAvailSpeeds_Type()
)
smFivePortCfgAvailSpeeds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFivePortCfgAvailSpeeds.setStatus("mandatory")


class _SmFivePortCfgMedia_Type(Integer32):
    """Custom type smFivePortCfgMedia based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              32,
              48,
              255)
        )
    )
    namedValues = NamedValues(
        *(("copper", 0),
          ("serdes", 1),
          ("opticalShortHaul", 32),
          ("opticalLongHaul", 48),
          ("notApplicable", 255))
    )


_SmFivePortCfgMedia_Type.__name__ = "Integer32"
_SmFivePortCfgMedia_Object = MibTableColumn
smFivePortCfgMedia = _SmFivePortCfgMedia_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 5, 1, 1, 9),
    _SmFivePortCfgMedia_Type()
)
smFivePortCfgMedia.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFivePortCfgMedia.setStatus("mandatory")


class _SmFivePortCfgProtocol_Type(Integer32):
    """Custom type smFivePortCfgProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(16,
              32,
              48,
              64,
              80,
              112,
              255)
        )
    )
    namedValues = NamedValues(
        *(("ethernet", 16),
          ("fibreChannel", 32),
          ("scalability", 48),
          ("infiniband", 64),
          ("pciExpress", 80),
          ("myrinet", 112),
          ("notApplicable", 255))
    )


_SmFivePortCfgProtocol_Type.__name__ = "Integer32"
_SmFivePortCfgProtocol_Object = MibTableColumn
smFivePortCfgProtocol = _SmFivePortCfgProtocol_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 5, 1, 1, 10),
    _SmFivePortCfgProtocol_Type()
)
smFivePortCfgProtocol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFivePortCfgProtocol.setStatus("mandatory")
_SmFivePortCfgWidth_Type = Integer32
_SmFivePortCfgWidth_Object = MibTableColumn
smFivePortCfgWidth = _SmFivePortCfgWidth_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 5, 1, 1, 11),
    _SmFivePortCfgWidth_Type()
)
smFivePortCfgWidth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFivePortCfgWidth.setStatus("mandatory")
_SmFivePortCfgCableLength_Type = Integer32
_SmFivePortCfgCableLength_Object = MibTableColumn
smFivePortCfgCableLength = _SmFivePortCfgCableLength_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 5, 1, 1, 12),
    _SmFivePortCfgCableLength_Type()
)
smFivePortCfgCableLength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFivePortCfgCableLength.setStatus("mandatory")
_SmFivePortCfgCableType_Type = OctetString
_SmFivePortCfgCableType_Object = MibTableColumn
smFivePortCfgCableType = _SmFivePortCfgCableType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 5, 1, 1, 13),
    _SmFivePortCfgCableType_Type()
)
smFivePortCfgCableType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFivePortCfgCableType.setStatus("mandatory")
_SmFivePortCfgVendorName_Type = OctetString
_SmFivePortCfgVendorName_Object = MibTableColumn
smFivePortCfgVendorName = _SmFivePortCfgVendorName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 5, 1, 1, 14),
    _SmFivePortCfgVendorName_Type()
)
smFivePortCfgVendorName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFivePortCfgVendorName.setStatus("mandatory")


class _SmFivePortCfgCompatibility_Type(Integer32):
    """Custom type smFivePortCfgCompatibility based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("incompatible", 0),
          ("compatible", 1),
          ("compatibleNotRecommended", 2),
          ("notApplicable", 255))
    )


_SmFivePortCfgCompatibility_Type.__name__ = "Integer32"
_SmFivePortCfgCompatibility_Object = MibTableColumn
smFivePortCfgCompatibility = _SmFivePortCfgCompatibility_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 5, 1, 1, 15),
    _SmFivePortCfgCompatibility_Type()
)
smFivePortCfgCompatibility.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFivePortCfgCompatibility.setStatus("mandatory")


class _SmFivePortCfgDataRate_Type(Integer32):
    """Custom type smFivePortCfgDataRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("sdr", 0),
          ("ddr", 1),
          ("qdr", 2),
          ("edr", 3),
          ("notApplicable", 255))
    )


_SmFivePortCfgDataRate_Type.__name__ = "Integer32"
_SmFivePortCfgDataRate_Object = MibTableColumn
smFivePortCfgDataRate = _SmFivePortCfgDataRate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 5, 1, 1, 16),
    _SmFivePortCfgDataRate_Type()
)
smFivePortCfgDataRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFivePortCfgDataRate.setStatus("mandatory")
_SwitchModSixPortCfg_ObjectIdentity = ObjectIdentity
switchModSixPortCfg = _SwitchModSixPortCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 6)
)
_SmSixPortCfgTable_Object = MibTable
smSixPortCfgTable = _SmSixPortCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 6, 1)
)
if mibBuilder.loadTexts:
    smSixPortCfgTable.setStatus("mandatory")
_SmSixPortCfgEntry_Object = MibTableRow
smSixPortCfgEntry = _SmSixPortCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 6, 1, 1)
)
smSixPortCfgEntry.setIndexNames(
    (0, "BLADE-MIB", "smSixPortCfgIndex"),
)
if mibBuilder.loadTexts:
    smSixPortCfgEntry.setStatus("mandatory")
_SmSixPortCfgIndex_Type = Integer32
_SmSixPortCfgIndex_Object = MibTableColumn
smSixPortCfgIndex = _SmSixPortCfgIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 6, 1, 1, 1),
    _SmSixPortCfgIndex_Type()
)
smSixPortCfgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smSixPortCfgIndex.setStatus("mandatory")
_SmSixPortCfgLabel_Type = OctetString
_SmSixPortCfgLabel_Object = MibTableColumn
smSixPortCfgLabel = _SmSixPortCfgLabel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 6, 1, 1, 2),
    _SmSixPortCfgLabel_Type()
)
smSixPortCfgLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smSixPortCfgLabel.setStatus("mandatory")


class _SmSixPortCfgType_Type(Integer32):
    """Custom type smSixPortCfgType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("unused", 0),
          ("externalPort", 1),
          ("externalManagementPort", 2),
          ("externalDualPort", 3),
          ("bladePort", 4),
          ("mmManagementPort", 5),
          ("uplinkPort", 6),
          ("interModulePort", 7),
          ("interModuleManagementPort", 8),
          ("interModuleDualPort", 9),
          ("interModuleExternalBridgePort", 10),
          ("interModuleDualInternalBridgePort", 11))
    )


_SmSixPortCfgType_Type.__name__ = "Integer32"
_SmSixPortCfgType_Object = MibTableColumn
smSixPortCfgType = _SmSixPortCfgType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 6, 1, 1, 3),
    _SmSixPortCfgType_Type()
)
smSixPortCfgType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smSixPortCfgType.setStatus("mandatory")


class _SmSixPortCfgLinkSetting_Type(Integer32):
    """Custom type smSixPortCfgLinkSetting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("up", 1))
    )


_SmSixPortCfgLinkSetting_Type.__name__ = "Integer32"
_SmSixPortCfgLinkSetting_Object = MibTableColumn
smSixPortCfgLinkSetting = _SmSixPortCfgLinkSetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 6, 1, 1, 4),
    _SmSixPortCfgLinkSetting_Type()
)
smSixPortCfgLinkSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smSixPortCfgLinkSetting.setStatus("mandatory")


class _SmSixPortCfgLinkState_Type(Integer32):
    """Custom type smSixPortCfgLinkState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("up", 1),
          ("initialized", 2))
    )


_SmSixPortCfgLinkState_Type.__name__ = "Integer32"
_SmSixPortCfgLinkState_Object = MibTableColumn
smSixPortCfgLinkState = _SmSixPortCfgLinkState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 6, 1, 1, 5),
    _SmSixPortCfgLinkState_Type()
)
smSixPortCfgLinkState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smSixPortCfgLinkState.setStatus("mandatory")
_SmSixPortCfgSpeedSetting_Type = OctetString
_SmSixPortCfgSpeedSetting_Object = MibTableColumn
smSixPortCfgSpeedSetting = _SmSixPortCfgSpeedSetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 6, 1, 1, 6),
    _SmSixPortCfgSpeedSetting_Type()
)
smSixPortCfgSpeedSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smSixPortCfgSpeedSetting.setStatus("mandatory")
_SmSixPortCfgSpeedStatus_Type = OctetString
_SmSixPortCfgSpeedStatus_Object = MibTableColumn
smSixPortCfgSpeedStatus = _SmSixPortCfgSpeedStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 6, 1, 1, 7),
    _SmSixPortCfgSpeedStatus_Type()
)
smSixPortCfgSpeedStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smSixPortCfgSpeedStatus.setStatus("mandatory")
_SmSixPortCfgAvailSpeeds_Type = OctetString
_SmSixPortCfgAvailSpeeds_Object = MibTableColumn
smSixPortCfgAvailSpeeds = _SmSixPortCfgAvailSpeeds_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 6, 1, 1, 8),
    _SmSixPortCfgAvailSpeeds_Type()
)
smSixPortCfgAvailSpeeds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smSixPortCfgAvailSpeeds.setStatus("mandatory")


class _SmSixPortCfgMedia_Type(Integer32):
    """Custom type smSixPortCfgMedia based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              32,
              48,
              255)
        )
    )
    namedValues = NamedValues(
        *(("copper", 0),
          ("serdes", 1),
          ("opticalShortHaul", 32),
          ("opticalLongHaul", 48),
          ("notApplicable", 255))
    )


_SmSixPortCfgMedia_Type.__name__ = "Integer32"
_SmSixPortCfgMedia_Object = MibTableColumn
smSixPortCfgMedia = _SmSixPortCfgMedia_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 6, 1, 1, 9),
    _SmSixPortCfgMedia_Type()
)
smSixPortCfgMedia.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smSixPortCfgMedia.setStatus("mandatory")


class _SmSixPortCfgProtocol_Type(Integer32):
    """Custom type smSixPortCfgProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(16,
              32,
              48,
              64,
              80,
              112,
              255)
        )
    )
    namedValues = NamedValues(
        *(("ethernet", 16),
          ("fibreChannel", 32),
          ("scalability", 48),
          ("infiniband", 64),
          ("pciExpress", 80),
          ("myrinet", 112),
          ("notApplicable", 255))
    )


_SmSixPortCfgProtocol_Type.__name__ = "Integer32"
_SmSixPortCfgProtocol_Object = MibTableColumn
smSixPortCfgProtocol = _SmSixPortCfgProtocol_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 6, 1, 1, 10),
    _SmSixPortCfgProtocol_Type()
)
smSixPortCfgProtocol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smSixPortCfgProtocol.setStatus("mandatory")
_SmSixPortCfgWidth_Type = Integer32
_SmSixPortCfgWidth_Object = MibTableColumn
smSixPortCfgWidth = _SmSixPortCfgWidth_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 6, 1, 1, 11),
    _SmSixPortCfgWidth_Type()
)
smSixPortCfgWidth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smSixPortCfgWidth.setStatus("mandatory")
_SmSixPortCfgCableLength_Type = Integer32
_SmSixPortCfgCableLength_Object = MibTableColumn
smSixPortCfgCableLength = _SmSixPortCfgCableLength_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 6, 1, 1, 12),
    _SmSixPortCfgCableLength_Type()
)
smSixPortCfgCableLength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smSixPortCfgCableLength.setStatus("mandatory")
_SmSixPortCfgCableType_Type = OctetString
_SmSixPortCfgCableType_Object = MibTableColumn
smSixPortCfgCableType = _SmSixPortCfgCableType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 6, 1, 1, 13),
    _SmSixPortCfgCableType_Type()
)
smSixPortCfgCableType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smSixPortCfgCableType.setStatus("mandatory")
_SmSixPortCfgVendorName_Type = OctetString
_SmSixPortCfgVendorName_Object = MibTableColumn
smSixPortCfgVendorName = _SmSixPortCfgVendorName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 6, 1, 1, 14),
    _SmSixPortCfgVendorName_Type()
)
smSixPortCfgVendorName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smSixPortCfgVendorName.setStatus("mandatory")


class _SmSixPortCfgCompatibility_Type(Integer32):
    """Custom type smSixPortCfgCompatibility based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("incompatible", 0),
          ("compatible", 1),
          ("compatibleNotRecommended", 2),
          ("notApplicable", 255))
    )


_SmSixPortCfgCompatibility_Type.__name__ = "Integer32"
_SmSixPortCfgCompatibility_Object = MibTableColumn
smSixPortCfgCompatibility = _SmSixPortCfgCompatibility_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 6, 1, 1, 15),
    _SmSixPortCfgCompatibility_Type()
)
smSixPortCfgCompatibility.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smSixPortCfgCompatibility.setStatus("mandatory")


class _SmSixPortCfgDataRate_Type(Integer32):
    """Custom type smSixPortCfgDataRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("sdr", 0),
          ("ddr", 1),
          ("qdr", 2),
          ("edr", 3),
          ("notApplicable", 255))
    )


_SmSixPortCfgDataRate_Type.__name__ = "Integer32"
_SmSixPortCfgDataRate_Object = MibTableColumn
smSixPortCfgDataRate = _SmSixPortCfgDataRate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 6, 1, 1, 16),
    _SmSixPortCfgDataRate_Type()
)
smSixPortCfgDataRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smSixPortCfgDataRate.setStatus("mandatory")
_SwitchModSevenPortCfg_ObjectIdentity = ObjectIdentity
switchModSevenPortCfg = _SwitchModSevenPortCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 7)
)
_SmSevenPortCfgTable_Object = MibTable
smSevenPortCfgTable = _SmSevenPortCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 7, 1)
)
if mibBuilder.loadTexts:
    smSevenPortCfgTable.setStatus("mandatory")
_SmSevenPortCfgEntry_Object = MibTableRow
smSevenPortCfgEntry = _SmSevenPortCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 7, 1, 1)
)
smSevenPortCfgEntry.setIndexNames(
    (0, "BLADE-MIB", "smSevenPortCfgIndex"),
)
if mibBuilder.loadTexts:
    smSevenPortCfgEntry.setStatus("mandatory")
_SmSevenPortCfgIndex_Type = Integer32
_SmSevenPortCfgIndex_Object = MibTableColumn
smSevenPortCfgIndex = _SmSevenPortCfgIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 7, 1, 1, 1),
    _SmSevenPortCfgIndex_Type()
)
smSevenPortCfgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smSevenPortCfgIndex.setStatus("mandatory")
_SmSevenPortCfgLabel_Type = OctetString
_SmSevenPortCfgLabel_Object = MibTableColumn
smSevenPortCfgLabel = _SmSevenPortCfgLabel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 7, 1, 1, 2),
    _SmSevenPortCfgLabel_Type()
)
smSevenPortCfgLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smSevenPortCfgLabel.setStatus("mandatory")


class _SmSevenPortCfgType_Type(Integer32):
    """Custom type smSevenPortCfgType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("unused", 0),
          ("externalPort", 1),
          ("externalManagementPort", 2),
          ("externalDualPort", 3),
          ("bladePort", 4),
          ("mmManagementPort", 5),
          ("uplinkPort", 6),
          ("interModulePort", 7),
          ("interModuleManagementPort", 8),
          ("interModuleDualPort", 9),
          ("interModuleExternalBridgePort", 10),
          ("interModuleDualInternalBridgePort", 11))
    )


_SmSevenPortCfgType_Type.__name__ = "Integer32"
_SmSevenPortCfgType_Object = MibTableColumn
smSevenPortCfgType = _SmSevenPortCfgType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 7, 1, 1, 3),
    _SmSevenPortCfgType_Type()
)
smSevenPortCfgType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smSevenPortCfgType.setStatus("mandatory")


class _SmSevenPortCfgLinkSetting_Type(Integer32):
    """Custom type smSevenPortCfgLinkSetting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("up", 1))
    )


_SmSevenPortCfgLinkSetting_Type.__name__ = "Integer32"
_SmSevenPortCfgLinkSetting_Object = MibTableColumn
smSevenPortCfgLinkSetting = _SmSevenPortCfgLinkSetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 7, 1, 1, 4),
    _SmSevenPortCfgLinkSetting_Type()
)
smSevenPortCfgLinkSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smSevenPortCfgLinkSetting.setStatus("mandatory")


class _SmSevenPortCfgLinkState_Type(Integer32):
    """Custom type smSevenPortCfgLinkState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("up", 1),
          ("initialized", 2))
    )


_SmSevenPortCfgLinkState_Type.__name__ = "Integer32"
_SmSevenPortCfgLinkState_Object = MibTableColumn
smSevenPortCfgLinkState = _SmSevenPortCfgLinkState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 7, 1, 1, 5),
    _SmSevenPortCfgLinkState_Type()
)
smSevenPortCfgLinkState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smSevenPortCfgLinkState.setStatus("mandatory")
_SmSevenPortCfgSpeedSetting_Type = OctetString
_SmSevenPortCfgSpeedSetting_Object = MibTableColumn
smSevenPortCfgSpeedSetting = _SmSevenPortCfgSpeedSetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 7, 1, 1, 6),
    _SmSevenPortCfgSpeedSetting_Type()
)
smSevenPortCfgSpeedSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smSevenPortCfgSpeedSetting.setStatus("mandatory")
_SmSevenPortCfgSpeedStatus_Type = OctetString
_SmSevenPortCfgSpeedStatus_Object = MibTableColumn
smSevenPortCfgSpeedStatus = _SmSevenPortCfgSpeedStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 7, 1, 1, 7),
    _SmSevenPortCfgSpeedStatus_Type()
)
smSevenPortCfgSpeedStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smSevenPortCfgSpeedStatus.setStatus("mandatory")
_SmSevenPortCfgAvailSpeeds_Type = OctetString
_SmSevenPortCfgAvailSpeeds_Object = MibTableColumn
smSevenPortCfgAvailSpeeds = _SmSevenPortCfgAvailSpeeds_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 7, 1, 1, 8),
    _SmSevenPortCfgAvailSpeeds_Type()
)
smSevenPortCfgAvailSpeeds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smSevenPortCfgAvailSpeeds.setStatus("mandatory")


class _SmSevenPortCfgMedia_Type(Integer32):
    """Custom type smSevenPortCfgMedia based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              32,
              48,
              255)
        )
    )
    namedValues = NamedValues(
        *(("copper", 0),
          ("serdes", 1),
          ("opticalShortHaul", 32),
          ("opticalLongHaul", 48),
          ("notApplicable", 255))
    )


_SmSevenPortCfgMedia_Type.__name__ = "Integer32"
_SmSevenPortCfgMedia_Object = MibTableColumn
smSevenPortCfgMedia = _SmSevenPortCfgMedia_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 7, 1, 1, 9),
    _SmSevenPortCfgMedia_Type()
)
smSevenPortCfgMedia.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smSevenPortCfgMedia.setStatus("mandatory")


class _SmSevenPortCfgProtocol_Type(Integer32):
    """Custom type smSevenPortCfgProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(16,
              32,
              48,
              64,
              80,
              112,
              255)
        )
    )
    namedValues = NamedValues(
        *(("ethernet", 16),
          ("fibreChannel", 32),
          ("scalability", 48),
          ("infiniband", 64),
          ("pciExpress", 80),
          ("myrinet", 112),
          ("notApplicable", 255))
    )


_SmSevenPortCfgProtocol_Type.__name__ = "Integer32"
_SmSevenPortCfgProtocol_Object = MibTableColumn
smSevenPortCfgProtocol = _SmSevenPortCfgProtocol_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 7, 1, 1, 10),
    _SmSevenPortCfgProtocol_Type()
)
smSevenPortCfgProtocol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smSevenPortCfgProtocol.setStatus("mandatory")
_SmSevenPortCfgWidth_Type = Integer32
_SmSevenPortCfgWidth_Object = MibTableColumn
smSevenPortCfgWidth = _SmSevenPortCfgWidth_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 7, 1, 1, 11),
    _SmSevenPortCfgWidth_Type()
)
smSevenPortCfgWidth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smSevenPortCfgWidth.setStatus("mandatory")
_SmSevenPortCfgCableLength_Type = Integer32
_SmSevenPortCfgCableLength_Object = MibTableColumn
smSevenPortCfgCableLength = _SmSevenPortCfgCableLength_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 7, 1, 1, 12),
    _SmSevenPortCfgCableLength_Type()
)
smSevenPortCfgCableLength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smSevenPortCfgCableLength.setStatus("mandatory")
_SmSevenPortCfgCableType_Type = OctetString
_SmSevenPortCfgCableType_Object = MibTableColumn
smSevenPortCfgCableType = _SmSevenPortCfgCableType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 7, 1, 1, 13),
    _SmSevenPortCfgCableType_Type()
)
smSevenPortCfgCableType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smSevenPortCfgCableType.setStatus("mandatory")
_SmSevenPortCfgVendorName_Type = OctetString
_SmSevenPortCfgVendorName_Object = MibTableColumn
smSevenPortCfgVendorName = _SmSevenPortCfgVendorName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 7, 1, 1, 14),
    _SmSevenPortCfgVendorName_Type()
)
smSevenPortCfgVendorName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smSevenPortCfgVendorName.setStatus("mandatory")


class _SmSevenPortCfgCompatibility_Type(Integer32):
    """Custom type smSevenPortCfgCompatibility based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("incompatible", 0),
          ("compatible", 1),
          ("compatibleNotRecommended", 2),
          ("notApplicable", 255))
    )


_SmSevenPortCfgCompatibility_Type.__name__ = "Integer32"
_SmSevenPortCfgCompatibility_Object = MibTableColumn
smSevenPortCfgCompatibility = _SmSevenPortCfgCompatibility_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 7, 1, 1, 15),
    _SmSevenPortCfgCompatibility_Type()
)
smSevenPortCfgCompatibility.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smSevenPortCfgCompatibility.setStatus("mandatory")


class _SmSevenPortCfgDataRate_Type(Integer32):
    """Custom type smSevenPortCfgDataRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("sdr", 0),
          ("ddr", 1),
          ("qdr", 2),
          ("edr", 3),
          ("notApplicable", 255))
    )


_SmSevenPortCfgDataRate_Type.__name__ = "Integer32"
_SmSevenPortCfgDataRate_Object = MibTableColumn
smSevenPortCfgDataRate = _SmSevenPortCfgDataRate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 7, 1, 1, 16),
    _SmSevenPortCfgDataRate_Type()
)
smSevenPortCfgDataRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smSevenPortCfgDataRate.setStatus("mandatory")
_SwitchModEightPortCfg_ObjectIdentity = ObjectIdentity
switchModEightPortCfg = _SwitchModEightPortCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 8)
)
_SmEightPortCfgTable_Object = MibTable
smEightPortCfgTable = _SmEightPortCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 8, 1)
)
if mibBuilder.loadTexts:
    smEightPortCfgTable.setStatus("mandatory")
_SmEightPortCfgEntry_Object = MibTableRow
smEightPortCfgEntry = _SmEightPortCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 8, 1, 1)
)
smEightPortCfgEntry.setIndexNames(
    (0, "BLADE-MIB", "smEightPortCfgIndex"),
)
if mibBuilder.loadTexts:
    smEightPortCfgEntry.setStatus("mandatory")
_SmEightPortCfgIndex_Type = Integer32
_SmEightPortCfgIndex_Object = MibTableColumn
smEightPortCfgIndex = _SmEightPortCfgIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 8, 1, 1, 1),
    _SmEightPortCfgIndex_Type()
)
smEightPortCfgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smEightPortCfgIndex.setStatus("mandatory")
_SmEightPortCfgLabel_Type = OctetString
_SmEightPortCfgLabel_Object = MibTableColumn
smEightPortCfgLabel = _SmEightPortCfgLabel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 8, 1, 1, 2),
    _SmEightPortCfgLabel_Type()
)
smEightPortCfgLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smEightPortCfgLabel.setStatus("mandatory")


class _SmEightPortCfgType_Type(Integer32):
    """Custom type smEightPortCfgType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("unused", 0),
          ("externalPort", 1),
          ("externalManagementPort", 2),
          ("externalDualPort", 3),
          ("bladePort", 4),
          ("mmManagementPort", 5),
          ("uplinkPort", 6),
          ("interModulePort", 7),
          ("interModuleManagementPort", 8),
          ("interModuleDualPort", 9),
          ("interModuleExternalBridgePort", 10),
          ("interModuleDualInternalBridgePort", 11))
    )


_SmEightPortCfgType_Type.__name__ = "Integer32"
_SmEightPortCfgType_Object = MibTableColumn
smEightPortCfgType = _SmEightPortCfgType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 8, 1, 1, 3),
    _SmEightPortCfgType_Type()
)
smEightPortCfgType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smEightPortCfgType.setStatus("mandatory")


class _SmEightPortCfgLinkSetting_Type(Integer32):
    """Custom type smEightPortCfgLinkSetting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("up", 1))
    )


_SmEightPortCfgLinkSetting_Type.__name__ = "Integer32"
_SmEightPortCfgLinkSetting_Object = MibTableColumn
smEightPortCfgLinkSetting = _SmEightPortCfgLinkSetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 8, 1, 1, 4),
    _SmEightPortCfgLinkSetting_Type()
)
smEightPortCfgLinkSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smEightPortCfgLinkSetting.setStatus("mandatory")


class _SmEightPortCfgLinkState_Type(Integer32):
    """Custom type smEightPortCfgLinkState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("up", 1),
          ("initialized", 2))
    )


_SmEightPortCfgLinkState_Type.__name__ = "Integer32"
_SmEightPortCfgLinkState_Object = MibTableColumn
smEightPortCfgLinkState = _SmEightPortCfgLinkState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 8, 1, 1, 5),
    _SmEightPortCfgLinkState_Type()
)
smEightPortCfgLinkState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smEightPortCfgLinkState.setStatus("mandatory")
_SmEightPortCfgSpeedSetting_Type = OctetString
_SmEightPortCfgSpeedSetting_Object = MibTableColumn
smEightPortCfgSpeedSetting = _SmEightPortCfgSpeedSetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 8, 1, 1, 6),
    _SmEightPortCfgSpeedSetting_Type()
)
smEightPortCfgSpeedSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smEightPortCfgSpeedSetting.setStatus("mandatory")
_SmEightPortCfgSpeedStatus_Type = OctetString
_SmEightPortCfgSpeedStatus_Object = MibTableColumn
smEightPortCfgSpeedStatus = _SmEightPortCfgSpeedStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 8, 1, 1, 7),
    _SmEightPortCfgSpeedStatus_Type()
)
smEightPortCfgSpeedStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smEightPortCfgSpeedStatus.setStatus("mandatory")
_SmEightPortCfgAvailSpeeds_Type = OctetString
_SmEightPortCfgAvailSpeeds_Object = MibTableColumn
smEightPortCfgAvailSpeeds = _SmEightPortCfgAvailSpeeds_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 8, 1, 1, 8),
    _SmEightPortCfgAvailSpeeds_Type()
)
smEightPortCfgAvailSpeeds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smEightPortCfgAvailSpeeds.setStatus("mandatory")


class _SmEightPortCfgMedia_Type(Integer32):
    """Custom type smEightPortCfgMedia based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              32,
              48,
              255)
        )
    )
    namedValues = NamedValues(
        *(("copper", 0),
          ("serdes", 1),
          ("opticalShortHaul", 32),
          ("opticalLongHaul", 48),
          ("notApplicable", 255))
    )


_SmEightPortCfgMedia_Type.__name__ = "Integer32"
_SmEightPortCfgMedia_Object = MibTableColumn
smEightPortCfgMedia = _SmEightPortCfgMedia_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 8, 1, 1, 9),
    _SmEightPortCfgMedia_Type()
)
smEightPortCfgMedia.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smEightPortCfgMedia.setStatus("mandatory")


class _SmEightPortCfgProtocol_Type(Integer32):
    """Custom type smEightPortCfgProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(16,
              32,
              48,
              64,
              80,
              112,
              255)
        )
    )
    namedValues = NamedValues(
        *(("ethernet", 16),
          ("fibreChannel", 32),
          ("scalability", 48),
          ("infiniband", 64),
          ("pciExpress", 80),
          ("myrinet", 112),
          ("notApplicable", 255))
    )


_SmEightPortCfgProtocol_Type.__name__ = "Integer32"
_SmEightPortCfgProtocol_Object = MibTableColumn
smEightPortCfgProtocol = _SmEightPortCfgProtocol_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 8, 1, 1, 10),
    _SmEightPortCfgProtocol_Type()
)
smEightPortCfgProtocol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smEightPortCfgProtocol.setStatus("mandatory")
_SmEightPortCfgWidth_Type = Integer32
_SmEightPortCfgWidth_Object = MibTableColumn
smEightPortCfgWidth = _SmEightPortCfgWidth_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 8, 1, 1, 11),
    _SmEightPortCfgWidth_Type()
)
smEightPortCfgWidth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smEightPortCfgWidth.setStatus("mandatory")
_SmEightPortCfgCableLength_Type = Integer32
_SmEightPortCfgCableLength_Object = MibTableColumn
smEightPortCfgCableLength = _SmEightPortCfgCableLength_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 8, 1, 1, 12),
    _SmEightPortCfgCableLength_Type()
)
smEightPortCfgCableLength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smEightPortCfgCableLength.setStatus("mandatory")
_SmEightPortCfgCableType_Type = OctetString
_SmEightPortCfgCableType_Object = MibTableColumn
smEightPortCfgCableType = _SmEightPortCfgCableType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 8, 1, 1, 13),
    _SmEightPortCfgCableType_Type()
)
smEightPortCfgCableType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smEightPortCfgCableType.setStatus("mandatory")
_SmEightPortCfgVendorName_Type = OctetString
_SmEightPortCfgVendorName_Object = MibTableColumn
smEightPortCfgVendorName = _SmEightPortCfgVendorName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 8, 1, 1, 14),
    _SmEightPortCfgVendorName_Type()
)
smEightPortCfgVendorName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smEightPortCfgVendorName.setStatus("mandatory")


class _SmEightPortCfgCompatibility_Type(Integer32):
    """Custom type smEightPortCfgCompatibility based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("incompatible", 0),
          ("compatible", 1),
          ("compatibleNotRecommended", 2),
          ("notApplicable", 255))
    )


_SmEightPortCfgCompatibility_Type.__name__ = "Integer32"
_SmEightPortCfgCompatibility_Object = MibTableColumn
smEightPortCfgCompatibility = _SmEightPortCfgCompatibility_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 8, 1, 1, 15),
    _SmEightPortCfgCompatibility_Type()
)
smEightPortCfgCompatibility.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smEightPortCfgCompatibility.setStatus("mandatory")


class _SmEightPortCfgDataRate_Type(Integer32):
    """Custom type smEightPortCfgDataRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("sdr", 0),
          ("ddr", 1),
          ("qdr", 2),
          ("edr", 3),
          ("notApplicable", 255))
    )


_SmEightPortCfgDataRate_Type.__name__ = "Integer32"
_SmEightPortCfgDataRate_Object = MibTableColumn
smEightPortCfgDataRate = _SmEightPortCfgDataRate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 8, 1, 1, 16),
    _SmEightPortCfgDataRate_Type()
)
smEightPortCfgDataRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smEightPortCfgDataRate.setStatus("mandatory")
_SwitchModNinePortCfg_ObjectIdentity = ObjectIdentity
switchModNinePortCfg = _SwitchModNinePortCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 9)
)
_SmNinePortCfgTable_Object = MibTable
smNinePortCfgTable = _SmNinePortCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 9, 1)
)
if mibBuilder.loadTexts:
    smNinePortCfgTable.setStatus("mandatory")
_SmNinePortCfgEntry_Object = MibTableRow
smNinePortCfgEntry = _SmNinePortCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 9, 1, 1)
)
smNinePortCfgEntry.setIndexNames(
    (0, "BLADE-MIB", "smNinePortCfgIndex"),
)
if mibBuilder.loadTexts:
    smNinePortCfgEntry.setStatus("mandatory")
_SmNinePortCfgIndex_Type = Integer32
_SmNinePortCfgIndex_Object = MibTableColumn
smNinePortCfgIndex = _SmNinePortCfgIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 9, 1, 1, 1),
    _SmNinePortCfgIndex_Type()
)
smNinePortCfgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNinePortCfgIndex.setStatus("mandatory")
_SmNinePortCfgLabel_Type = OctetString
_SmNinePortCfgLabel_Object = MibTableColumn
smNinePortCfgLabel = _SmNinePortCfgLabel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 9, 1, 1, 2),
    _SmNinePortCfgLabel_Type()
)
smNinePortCfgLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNinePortCfgLabel.setStatus("mandatory")


class _SmNinePortCfgType_Type(Integer32):
    """Custom type smNinePortCfgType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("unused", 0),
          ("externalPort", 1),
          ("externalManagementPort", 2),
          ("externalDualPort", 3),
          ("bladePort", 4),
          ("mmManagementPort", 5),
          ("uplinkPort", 6),
          ("interModulePort", 7),
          ("interModuleManagementPort", 8),
          ("interModuleDualPort", 9),
          ("interModuleExternalBridgePort", 10),
          ("interModuleDualInternalBridgePort", 11))
    )


_SmNinePortCfgType_Type.__name__ = "Integer32"
_SmNinePortCfgType_Object = MibTableColumn
smNinePortCfgType = _SmNinePortCfgType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 9, 1, 1, 3),
    _SmNinePortCfgType_Type()
)
smNinePortCfgType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNinePortCfgType.setStatus("mandatory")


class _SmNinePortCfgLinkSetting_Type(Integer32):
    """Custom type smNinePortCfgLinkSetting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("up", 1))
    )


_SmNinePortCfgLinkSetting_Type.__name__ = "Integer32"
_SmNinePortCfgLinkSetting_Object = MibTableColumn
smNinePortCfgLinkSetting = _SmNinePortCfgLinkSetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 9, 1, 1, 4),
    _SmNinePortCfgLinkSetting_Type()
)
smNinePortCfgLinkSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNinePortCfgLinkSetting.setStatus("mandatory")


class _SmNinePortCfgLinkState_Type(Integer32):
    """Custom type smNinePortCfgLinkState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("up", 1),
          ("initialized", 2))
    )


_SmNinePortCfgLinkState_Type.__name__ = "Integer32"
_SmNinePortCfgLinkState_Object = MibTableColumn
smNinePortCfgLinkState = _SmNinePortCfgLinkState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 9, 1, 1, 5),
    _SmNinePortCfgLinkState_Type()
)
smNinePortCfgLinkState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNinePortCfgLinkState.setStatus("mandatory")
_SmNinePortCfgSpeedSetting_Type = OctetString
_SmNinePortCfgSpeedSetting_Object = MibTableColumn
smNinePortCfgSpeedSetting = _SmNinePortCfgSpeedSetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 9, 1, 1, 6),
    _SmNinePortCfgSpeedSetting_Type()
)
smNinePortCfgSpeedSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNinePortCfgSpeedSetting.setStatus("mandatory")
_SmNinePortCfgSpeedStatus_Type = OctetString
_SmNinePortCfgSpeedStatus_Object = MibTableColumn
smNinePortCfgSpeedStatus = _SmNinePortCfgSpeedStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 9, 1, 1, 7),
    _SmNinePortCfgSpeedStatus_Type()
)
smNinePortCfgSpeedStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNinePortCfgSpeedStatus.setStatus("mandatory")
_SmNinePortCfgAvailSpeeds_Type = OctetString
_SmNinePortCfgAvailSpeeds_Object = MibTableColumn
smNinePortCfgAvailSpeeds = _SmNinePortCfgAvailSpeeds_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 9, 1, 1, 8),
    _SmNinePortCfgAvailSpeeds_Type()
)
smNinePortCfgAvailSpeeds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNinePortCfgAvailSpeeds.setStatus("mandatory")


class _SmNinePortCfgMedia_Type(Integer32):
    """Custom type smNinePortCfgMedia based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              32,
              48,
              255)
        )
    )
    namedValues = NamedValues(
        *(("copper", 0),
          ("serdes", 1),
          ("opticalShortHaul", 32),
          ("opticalLongHaul", 48),
          ("notApplicable", 255))
    )


_SmNinePortCfgMedia_Type.__name__ = "Integer32"
_SmNinePortCfgMedia_Object = MibTableColumn
smNinePortCfgMedia = _SmNinePortCfgMedia_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 9, 1, 1, 9),
    _SmNinePortCfgMedia_Type()
)
smNinePortCfgMedia.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNinePortCfgMedia.setStatus("mandatory")


class _SmNinePortCfgProtocol_Type(Integer32):
    """Custom type smNinePortCfgProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(16,
              32,
              48,
              64,
              80,
              112,
              255)
        )
    )
    namedValues = NamedValues(
        *(("ethernet", 16),
          ("fibreChannel", 32),
          ("scalability", 48),
          ("infiniband", 64),
          ("pciExpress", 80),
          ("myrinet", 112),
          ("notApplicable", 255))
    )


_SmNinePortCfgProtocol_Type.__name__ = "Integer32"
_SmNinePortCfgProtocol_Object = MibTableColumn
smNinePortCfgProtocol = _SmNinePortCfgProtocol_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 9, 1, 1, 10),
    _SmNinePortCfgProtocol_Type()
)
smNinePortCfgProtocol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNinePortCfgProtocol.setStatus("mandatory")
_SmNinePortCfgWidth_Type = Integer32
_SmNinePortCfgWidth_Object = MibTableColumn
smNinePortCfgWidth = _SmNinePortCfgWidth_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 9, 1, 1, 11),
    _SmNinePortCfgWidth_Type()
)
smNinePortCfgWidth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNinePortCfgWidth.setStatus("mandatory")
_SmNinePortCfgCableLength_Type = Integer32
_SmNinePortCfgCableLength_Object = MibTableColumn
smNinePortCfgCableLength = _SmNinePortCfgCableLength_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 9, 1, 1, 12),
    _SmNinePortCfgCableLength_Type()
)
smNinePortCfgCableLength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNinePortCfgCableLength.setStatus("mandatory")
_SmNinePortCfgCableType_Type = OctetString
_SmNinePortCfgCableType_Object = MibTableColumn
smNinePortCfgCableType = _SmNinePortCfgCableType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 9, 1, 1, 13),
    _SmNinePortCfgCableType_Type()
)
smNinePortCfgCableType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNinePortCfgCableType.setStatus("mandatory")
_SmNinePortCfgVendorName_Type = OctetString
_SmNinePortCfgVendorName_Object = MibTableColumn
smNinePortCfgVendorName = _SmNinePortCfgVendorName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 9, 1, 1, 14),
    _SmNinePortCfgVendorName_Type()
)
smNinePortCfgVendorName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNinePortCfgVendorName.setStatus("mandatory")


class _SmNinePortCfgCompatibility_Type(Integer32):
    """Custom type smNinePortCfgCompatibility based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("incompatible", 0),
          ("compatible", 1),
          ("compatibleNotRecommended", 2),
          ("notApplicable", 255))
    )


_SmNinePortCfgCompatibility_Type.__name__ = "Integer32"
_SmNinePortCfgCompatibility_Object = MibTableColumn
smNinePortCfgCompatibility = _SmNinePortCfgCompatibility_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 9, 1, 1, 15),
    _SmNinePortCfgCompatibility_Type()
)
smNinePortCfgCompatibility.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNinePortCfgCompatibility.setStatus("mandatory")


class _SmNinePortCfgDataRate_Type(Integer32):
    """Custom type smNinePortCfgDataRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("sdr", 0),
          ("ddr", 1),
          ("qdr", 2),
          ("edr", 3),
          ("notApplicable", 255))
    )


_SmNinePortCfgDataRate_Type.__name__ = "Integer32"
_SmNinePortCfgDataRate_Object = MibTableColumn
smNinePortCfgDataRate = _SmNinePortCfgDataRate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 9, 1, 1, 16),
    _SmNinePortCfgDataRate_Type()
)
smNinePortCfgDataRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNinePortCfgDataRate.setStatus("mandatory")
_SwitchModTenPortCfg_ObjectIdentity = ObjectIdentity
switchModTenPortCfg = _SwitchModTenPortCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 10)
)
_SmTenPortCfgTable_Object = MibTable
smTenPortCfgTable = _SmTenPortCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 10, 1)
)
if mibBuilder.loadTexts:
    smTenPortCfgTable.setStatus("mandatory")
_SmTenPortCfgEntry_Object = MibTableRow
smTenPortCfgEntry = _SmTenPortCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 10, 1, 1)
)
smTenPortCfgEntry.setIndexNames(
    (0, "BLADE-MIB", "smTenPortCfgIndex"),
)
if mibBuilder.loadTexts:
    smTenPortCfgEntry.setStatus("mandatory")
_SmTenPortCfgIndex_Type = Integer32
_SmTenPortCfgIndex_Object = MibTableColumn
smTenPortCfgIndex = _SmTenPortCfgIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 10, 1, 1, 1),
    _SmTenPortCfgIndex_Type()
)
smTenPortCfgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTenPortCfgIndex.setStatus("mandatory")
_SmTenPortCfgLabel_Type = OctetString
_SmTenPortCfgLabel_Object = MibTableColumn
smTenPortCfgLabel = _SmTenPortCfgLabel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 10, 1, 1, 2),
    _SmTenPortCfgLabel_Type()
)
smTenPortCfgLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTenPortCfgLabel.setStatus("mandatory")


class _SmTenPortCfgType_Type(Integer32):
    """Custom type smTenPortCfgType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("unused", 0),
          ("externalPort", 1),
          ("externalManagementPort", 2),
          ("externalDualPort", 3),
          ("bladePort", 4),
          ("mmManagementPort", 5),
          ("uplinkPort", 6),
          ("interModulePort", 7),
          ("interModuleManagementPort", 8),
          ("interModuleDualPort", 9),
          ("interModuleExternalBridgePort", 10),
          ("interModuleDualInternalBridgePort", 11))
    )


_SmTenPortCfgType_Type.__name__ = "Integer32"
_SmTenPortCfgType_Object = MibTableColumn
smTenPortCfgType = _SmTenPortCfgType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 10, 1, 1, 3),
    _SmTenPortCfgType_Type()
)
smTenPortCfgType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTenPortCfgType.setStatus("mandatory")


class _SmTenPortCfgLinkSetting_Type(Integer32):
    """Custom type smTenPortCfgLinkSetting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("up", 1))
    )


_SmTenPortCfgLinkSetting_Type.__name__ = "Integer32"
_SmTenPortCfgLinkSetting_Object = MibTableColumn
smTenPortCfgLinkSetting = _SmTenPortCfgLinkSetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 10, 1, 1, 4),
    _SmTenPortCfgLinkSetting_Type()
)
smTenPortCfgLinkSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smTenPortCfgLinkSetting.setStatus("mandatory")


class _SmTenPortCfgLinkState_Type(Integer32):
    """Custom type smTenPortCfgLinkState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("up", 1),
          ("initialized", 2))
    )


_SmTenPortCfgLinkState_Type.__name__ = "Integer32"
_SmTenPortCfgLinkState_Object = MibTableColumn
smTenPortCfgLinkState = _SmTenPortCfgLinkState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 10, 1, 1, 5),
    _SmTenPortCfgLinkState_Type()
)
smTenPortCfgLinkState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTenPortCfgLinkState.setStatus("mandatory")
_SmTenPortCfgSpeedSetting_Type = OctetString
_SmTenPortCfgSpeedSetting_Object = MibTableColumn
smTenPortCfgSpeedSetting = _SmTenPortCfgSpeedSetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 10, 1, 1, 6),
    _SmTenPortCfgSpeedSetting_Type()
)
smTenPortCfgSpeedSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smTenPortCfgSpeedSetting.setStatus("mandatory")
_SmTenPortCfgSpeedStatus_Type = OctetString
_SmTenPortCfgSpeedStatus_Object = MibTableColumn
smTenPortCfgSpeedStatus = _SmTenPortCfgSpeedStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 10, 1, 1, 7),
    _SmTenPortCfgSpeedStatus_Type()
)
smTenPortCfgSpeedStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTenPortCfgSpeedStatus.setStatus("mandatory")
_SmTenPortCfgAvailSpeeds_Type = OctetString
_SmTenPortCfgAvailSpeeds_Object = MibTableColumn
smTenPortCfgAvailSpeeds = _SmTenPortCfgAvailSpeeds_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 10, 1, 1, 8),
    _SmTenPortCfgAvailSpeeds_Type()
)
smTenPortCfgAvailSpeeds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTenPortCfgAvailSpeeds.setStatus("mandatory")


class _SmTenPortCfgMedia_Type(Integer32):
    """Custom type smTenPortCfgMedia based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              32,
              48,
              255)
        )
    )
    namedValues = NamedValues(
        *(("copper", 0),
          ("serdes", 1),
          ("opticalShortHaul", 32),
          ("opticalLongHaul", 48),
          ("notApplicable", 255))
    )


_SmTenPortCfgMedia_Type.__name__ = "Integer32"
_SmTenPortCfgMedia_Object = MibTableColumn
smTenPortCfgMedia = _SmTenPortCfgMedia_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 10, 1, 1, 9),
    _SmTenPortCfgMedia_Type()
)
smTenPortCfgMedia.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTenPortCfgMedia.setStatus("mandatory")


class _SmTenPortCfgProtocol_Type(Integer32):
    """Custom type smTenPortCfgProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(16,
              32,
              48,
              64,
              80,
              112,
              255)
        )
    )
    namedValues = NamedValues(
        *(("ethernet", 16),
          ("fibreChannel", 32),
          ("scalability", 48),
          ("infiniband", 64),
          ("pciExpress", 80),
          ("myrinet", 112),
          ("notApplicable", 255))
    )


_SmTenPortCfgProtocol_Type.__name__ = "Integer32"
_SmTenPortCfgProtocol_Object = MibTableColumn
smTenPortCfgProtocol = _SmTenPortCfgProtocol_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 10, 1, 1, 10),
    _SmTenPortCfgProtocol_Type()
)
smTenPortCfgProtocol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTenPortCfgProtocol.setStatus("mandatory")
_SmTenPortCfgWidth_Type = Integer32
_SmTenPortCfgWidth_Object = MibTableColumn
smTenPortCfgWidth = _SmTenPortCfgWidth_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 10, 1, 1, 11),
    _SmTenPortCfgWidth_Type()
)
smTenPortCfgWidth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTenPortCfgWidth.setStatus("mandatory")
_SmTenPortCfgCableLength_Type = Integer32
_SmTenPortCfgCableLength_Object = MibTableColumn
smTenPortCfgCableLength = _SmTenPortCfgCableLength_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 10, 1, 1, 12),
    _SmTenPortCfgCableLength_Type()
)
smTenPortCfgCableLength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTenPortCfgCableLength.setStatus("mandatory")
_SmTenPortCfgCableType_Type = OctetString
_SmTenPortCfgCableType_Object = MibTableColumn
smTenPortCfgCableType = _SmTenPortCfgCableType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 10, 1, 1, 13),
    _SmTenPortCfgCableType_Type()
)
smTenPortCfgCableType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTenPortCfgCableType.setStatus("mandatory")
_SmTenPortCfgVendorName_Type = OctetString
_SmTenPortCfgVendorName_Object = MibTableColumn
smTenPortCfgVendorName = _SmTenPortCfgVendorName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 10, 1, 1, 14),
    _SmTenPortCfgVendorName_Type()
)
smTenPortCfgVendorName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTenPortCfgVendorName.setStatus("mandatory")


class _SmTenPortCfgCompatibility_Type(Integer32):
    """Custom type smTenPortCfgCompatibility based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("incompatible", 0),
          ("compatible", 1),
          ("compatibleNotRecommended", 2),
          ("notApplicable", 255))
    )


_SmTenPortCfgCompatibility_Type.__name__ = "Integer32"
_SmTenPortCfgCompatibility_Object = MibTableColumn
smTenPortCfgCompatibility = _SmTenPortCfgCompatibility_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 10, 1, 1, 15),
    _SmTenPortCfgCompatibility_Type()
)
smTenPortCfgCompatibility.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTenPortCfgCompatibility.setStatus("mandatory")


class _SmTenPortCfgDataRate_Type(Integer32):
    """Custom type smTenPortCfgDataRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("sdr", 0),
          ("ddr", 1),
          ("qdr", 2),
          ("edr", 3),
          ("notApplicable", 255))
    )


_SmTenPortCfgDataRate_Type.__name__ = "Integer32"
_SmTenPortCfgDataRate_Object = MibTableColumn
smTenPortCfgDataRate = _SmTenPortCfgDataRate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 10, 1, 1, 16),
    _SmTenPortCfgDataRate_Type()
)
smTenPortCfgDataRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTenPortCfgDataRate.setStatus("mandatory")
_RaidControllerConfig_ObjectIdentity = ObjectIdentity
raidControllerConfig = _RaidControllerConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3)
)
_RaidControllerTable_Object = MibTable
raidControllerTable = _RaidControllerTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 1)
)
if mibBuilder.loadTexts:
    raidControllerTable.setStatus("mandatory")
_RaidControllerEntry_Object = MibTableRow
raidControllerEntry = _RaidControllerEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 1, 1)
)
raidControllerEntry.setIndexNames(
    (0, "BLADE-MIB", "raidControllerIndex"),
)
if mibBuilder.loadTexts:
    raidControllerEntry.setStatus("mandatory")
_RaidControllerIndex_Type = Integer32
_RaidControllerIndex_Object = MibTableColumn
raidControllerIndex = _RaidControllerIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 1, 1, 1),
    _RaidControllerIndex_Type()
)
raidControllerIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    raidControllerIndex.setStatus("mandatory")


class _RaidControllerId_Type(Integer32):
    """Custom type raidControllerId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("module3", 3),
          ("module4", 4))
    )


_RaidControllerId_Type.__name__ = "Integer32"
_RaidControllerId_Object = MibTableColumn
raidControllerId = _RaidControllerId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 1, 1, 2),
    _RaidControllerId_Type()
)
raidControllerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    raidControllerId.setStatus("mandatory")


class _RaidControllerExists_Type(Integer32):
    """Custom type raidControllerExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_RaidControllerExists_Type.__name__ = "Integer32"
_RaidControllerExists_Object = MibTableColumn
raidControllerExists = _RaidControllerExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 1, 1, 3),
    _RaidControllerExists_Type()
)
raidControllerExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    raidControllerExists.setStatus("mandatory")


class _RaidControllerPowerState_Type(Integer32):
    """Custom type raidControllerPowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("shutdownInProgress", 2))
    )


_RaidControllerPowerState_Type.__name__ = "Integer32"
_RaidControllerPowerState_Object = MibTableColumn
raidControllerPowerState = _RaidControllerPowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 1, 1, 4),
    _RaidControllerPowerState_Type()
)
raidControllerPowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    raidControllerPowerState.setStatus("mandatory")
_RaidControllerMACAddress_Type = OctetString
_RaidControllerMACAddress_Object = MibTableColumn
raidControllerMACAddress = _RaidControllerMACAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 1, 1, 5),
    _RaidControllerMACAddress_Type()
)
raidControllerMACAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    raidControllerMACAddress.setStatus("mandatory")
_RaidControllerSasID_Type = OctetString
_RaidControllerSasID_Object = MibTableColumn
raidControllerSasID = _RaidControllerSasID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 1, 1, 6),
    _RaidControllerSasID_Type()
)
raidControllerSasID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    raidControllerSasID.setStatus("mandatory")
_RaidControllerPingRequest_Type = Integer32
_RaidControllerPingRequest_Object = MibTableColumn
raidControllerPingRequest = _RaidControllerPingRequest_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 1, 1, 7),
    _RaidControllerPingRequest_Type()
)
raidControllerPingRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    raidControllerPingRequest.setStatus("mandatory")
_RaidControllerNetworkCfg_ObjectIdentity = ObjectIdentity
raidControllerNetworkCfg = _RaidControllerNetworkCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2)
)
_RcCurrentIPInfoTable_Object = MibTable
rcCurrentIPInfoTable = _RcCurrentIPInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 1)
)
if mibBuilder.loadTexts:
    rcCurrentIPInfoTable.setStatus("mandatory")
_RcCurrentIPInfoEntry_Object = MibTableRow
rcCurrentIPInfoEntry = _RcCurrentIPInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 1, 1)
)
rcCurrentIPInfoEntry.setIndexNames(
    (0, "BLADE-MIB", "rcCurrentIPInfoIndex"),
)
if mibBuilder.loadTexts:
    rcCurrentIPInfoEntry.setStatus("mandatory")
_RcCurrentIPInfoIndex_Type = Integer32
_RcCurrentIPInfoIndex_Object = MibTableColumn
rcCurrentIPInfoIndex = _RcCurrentIPInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 1, 1, 1),
    _RcCurrentIPInfoIndex_Type()
)
rcCurrentIPInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCurrentIPInfoIndex.setStatus("mandatory")


class _RcCurrentIPInfoId_Type(Integer32):
    """Custom type rcCurrentIPInfoId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("module3", 3),
          ("module4", 4))
    )


_RcCurrentIPInfoId_Type.__name__ = "Integer32"
_RcCurrentIPInfoId_Object = MibTableColumn
rcCurrentIPInfoId = _RcCurrentIPInfoId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 1, 1, 2),
    _RcCurrentIPInfoId_Type()
)
rcCurrentIPInfoId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCurrentIPInfoId.setStatus("mandatory")


class _RcCurrentIPInfoExists_Type(Integer32):
    """Custom type rcCurrentIPInfoExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_RcCurrentIPInfoExists_Type.__name__ = "Integer32"
_RcCurrentIPInfoExists_Object = MibTableColumn
rcCurrentIPInfoExists = _RcCurrentIPInfoExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 1, 1, 3),
    _RcCurrentIPInfoExists_Type()
)
rcCurrentIPInfoExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCurrentIPInfoExists.setStatus("mandatory")


class _RcCurrentIPInfoPowerState_Type(Integer32):
    """Custom type rcCurrentIPInfoPowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("shutdownInProgress", 2))
    )


_RcCurrentIPInfoPowerState_Type.__name__ = "Integer32"
_RcCurrentIPInfoPowerState_Object = MibTableColumn
rcCurrentIPInfoPowerState = _RcCurrentIPInfoPowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 1, 1, 4),
    _RcCurrentIPInfoPowerState_Type()
)
rcCurrentIPInfoPowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCurrentIPInfoPowerState.setStatus("mandatory")
_RcCurrentIPAddr_Type = IpAddress
_RcCurrentIPAddr_Object = MibTableColumn
rcCurrentIPAddr = _RcCurrentIPAddr_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 1, 1, 5),
    _RcCurrentIPAddr_Type()
)
rcCurrentIPAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCurrentIPAddr.setStatus("mandatory")
_RcCurrentSubnetMask_Type = IpAddress
_RcCurrentSubnetMask_Object = MibTableColumn
rcCurrentSubnetMask = _RcCurrentSubnetMask_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 1, 1, 6),
    _RcCurrentSubnetMask_Type()
)
rcCurrentSubnetMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCurrentSubnetMask.setStatus("mandatory")
_RcCurrentGateway_Type = IpAddress
_RcCurrentGateway_Object = MibTableColumn
rcCurrentGateway = _RcCurrentGateway_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 1, 1, 7),
    _RcCurrentGateway_Type()
)
rcCurrentGateway.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCurrentGateway.setStatus("mandatory")


class _RcCurrentIPConfigMethod_Type(Integer32):
    """Custom type rcCurrentIPConfigMethod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("static", 1),
          ("dhcp", 2))
    )


_RcCurrentIPConfigMethod_Type.__name__ = "Integer32"
_RcCurrentIPConfigMethod_Object = MibTableColumn
rcCurrentIPConfigMethod = _RcCurrentIPConfigMethod_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 1, 1, 8),
    _RcCurrentIPConfigMethod_Type()
)
rcCurrentIPConfigMethod.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCurrentIPConfigMethod.setStatus("mandatory")
_RcCurrentRaidedVlanId_Type = Integer32
_RcCurrentRaidedVlanId_Object = MibTableColumn
rcCurrentRaidedVlanId = _RcCurrentRaidedVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 1, 1, 9),
    _RcCurrentRaidedVlanId_Type()
)
rcCurrentRaidedVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcCurrentRaidedVlanId.setStatus("mandatory")
_RcNewIPInfoTable_Object = MibTable
rcNewIPInfoTable = _RcNewIPInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 2)
)
if mibBuilder.loadTexts:
    rcNewIPInfoTable.setStatus("mandatory")
_RcNewIPInfoEntry_Object = MibTableRow
rcNewIPInfoEntry = _RcNewIPInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 2, 1)
)
rcNewIPInfoEntry.setIndexNames(
    (0, "BLADE-MIB", "rcNewIPInfoIndex"),
)
if mibBuilder.loadTexts:
    rcNewIPInfoEntry.setStatus("mandatory")
_RcNewIPInfoIndex_Type = Integer32
_RcNewIPInfoIndex_Object = MibTableColumn
rcNewIPInfoIndex = _RcNewIPInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 2, 1, 1),
    _RcNewIPInfoIndex_Type()
)
rcNewIPInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcNewIPInfoIndex.setStatus("mandatory")


class _RcNewIPInfoId_Type(Integer32):
    """Custom type rcNewIPInfoId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("module3", 3),
          ("module4", 4))
    )


_RcNewIPInfoId_Type.__name__ = "Integer32"
_RcNewIPInfoId_Object = MibTableColumn
rcNewIPInfoId = _RcNewIPInfoId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 2, 1, 2),
    _RcNewIPInfoId_Type()
)
rcNewIPInfoId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcNewIPInfoId.setStatus("mandatory")


class _RcNewIPInfoExists_Type(Integer32):
    """Custom type rcNewIPInfoExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_RcNewIPInfoExists_Type.__name__ = "Integer32"
_RcNewIPInfoExists_Object = MibTableColumn
rcNewIPInfoExists = _RcNewIPInfoExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 2, 1, 3),
    _RcNewIPInfoExists_Type()
)
rcNewIPInfoExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcNewIPInfoExists.setStatus("mandatory")


class _RcNewIPInfoPowerState_Type(Integer32):
    """Custom type rcNewIPInfoPowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("shutdownInProgress", 2))
    )


_RcNewIPInfoPowerState_Type.__name__ = "Integer32"
_RcNewIPInfoPowerState_Object = MibTableColumn
rcNewIPInfoPowerState = _RcNewIPInfoPowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 2, 1, 4),
    _RcNewIPInfoPowerState_Type()
)
rcNewIPInfoPowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcNewIPInfoPowerState.setStatus("mandatory")
_RcNewIPAddr_Type = IpAddress
_RcNewIPAddr_Object = MibTableColumn
rcNewIPAddr = _RcNewIPAddr_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 2, 1, 5),
    _RcNewIPAddr_Type()
)
rcNewIPAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcNewIPAddr.setStatus("mandatory")
_RcNewSubnetMask_Type = IpAddress
_RcNewSubnetMask_Object = MibTableColumn
rcNewSubnetMask = _RcNewSubnetMask_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 2, 1, 6),
    _RcNewSubnetMask_Type()
)
rcNewSubnetMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcNewSubnetMask.setStatus("mandatory")
_RcNewGateway_Type = IpAddress
_RcNewGateway_Object = MibTableColumn
rcNewGateway = _RcNewGateway_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 2, 1, 7),
    _RcNewGateway_Type()
)
rcNewGateway.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcNewGateway.setStatus("mandatory")


class _RcNewIPConfigMethod_Type(Integer32):
    """Custom type rcNewIPConfigMethod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("static", 1),
          ("dhcp", 2))
    )


_RcNewIPConfigMethod_Type.__name__ = "Integer32"
_RcNewIPConfigMethod_Object = MibTableColumn
rcNewIPConfigMethod = _RcNewIPConfigMethod_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 2, 1, 8),
    _RcNewIPConfigMethod_Type()
)
rcNewIPConfigMethod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcNewIPConfigMethod.setStatus("mandatory")


class _RcNewIPConfigEnableDisable_Type(Integer32):
    """Custom type rcNewIPConfigEnableDisable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_RcNewIPConfigEnableDisable_Type.__name__ = "Integer32"
_RcNewIPConfigEnableDisable_Object = MibTableColumn
rcNewIPConfigEnableDisable = _RcNewIPConfigEnableDisable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 3, 2, 2, 1, 11),
    _RcNewIPConfigEnableDisable_Type()
)
rcNewIPConfigEnableDisable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcNewIPConfigEnableDisable.setStatus("mandatory")
_ChassisTopology_ObjectIdentity = ObjectIdentity
chassisTopology = _ChassisTopology_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4)
)
_ChassisResponseVersion_Type = Integer32
_ChassisResponseVersion_Object = MibScalar
chassisResponseVersion = _ChassisResponseVersion_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 1),
    _ChassisResponseVersion_Type()
)
chassisResponseVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisResponseVersion.setStatus("mandatory")


class _ChassisFlags_Type(Integer32):
    """Custom type chassisFlags based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("rackOrStandAlone", 0),
          ("serverBlade", 1))
    )


_ChassisFlags_Type.__name__ = "Integer32"
_ChassisFlags_Object = MibScalar
chassisFlags = _ChassisFlags_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 2),
    _ChassisFlags_Type()
)
chassisFlags.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFlags.setStatus("mandatory")
_ChassisName_Type = OctetString
_ChassisName_Object = MibScalar
chassisName = _ChassisName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 3),
    _ChassisName_Type()
)
chassisName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisName.setStatus("mandatory")
_ChassisNoOfFPsSupported_Type = Integer32
_ChassisNoOfFPsSupported_Object = MibScalar
chassisNoOfFPsSupported = _ChassisNoOfFPsSupported_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 18),
    _ChassisNoOfFPsSupported_Type()
)
chassisNoOfFPsSupported.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisNoOfFPsSupported.setStatus("mandatory")
_ChassisNoOfPBsSupported_Type = Integer32
_ChassisNoOfPBsSupported_Object = MibScalar
chassisNoOfPBsSupported = _ChassisNoOfPBsSupported_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 19),
    _ChassisNoOfPBsSupported_Type()
)
chassisNoOfPBsSupported.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisNoOfPBsSupported.setStatus("mandatory")
_ChassisNoOfSMsSupported_Type = Integer32
_ChassisNoOfSMsSupported_Object = MibScalar
chassisNoOfSMsSupported = _ChassisNoOfSMsSupported_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 20),
    _ChassisNoOfSMsSupported_Type()
)
chassisNoOfSMsSupported.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisNoOfSMsSupported.setStatus("mandatory")
_ChassisNoOfMMsSupported_Type = Integer32
_ChassisNoOfMMsSupported_Object = MibScalar
chassisNoOfMMsSupported = _ChassisNoOfMMsSupported_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 21),
    _ChassisNoOfMMsSupported_Type()
)
chassisNoOfMMsSupported.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisNoOfMMsSupported.setStatus("mandatory")
_ChassisNoOfPMsSupported_Type = Integer32
_ChassisNoOfPMsSupported_Object = MibScalar
chassisNoOfPMsSupported = _ChassisNoOfPMsSupported_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 22),
    _ChassisNoOfPMsSupported_Type()
)
chassisNoOfPMsSupported.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisNoOfPMsSupported.setStatus("mandatory")
_ChassisNoOfMTsSupported_Type = Integer32
_ChassisNoOfMTsSupported_Object = MibScalar
chassisNoOfMTsSupported = _ChassisNoOfMTsSupported_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 23),
    _ChassisNoOfMTsSupported_Type()
)
chassisNoOfMTsSupported.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisNoOfMTsSupported.setStatus("mandatory")
_ChassisNoOfBlowersSupported_Type = Integer32
_ChassisNoOfBlowersSupported_Object = MibScalar
chassisNoOfBlowersSupported = _ChassisNoOfBlowersSupported_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 24),
    _ChassisNoOfBlowersSupported_Type()
)
chassisNoOfBlowersSupported.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisNoOfBlowersSupported.setStatus("mandatory")
_ChassisPBsInstalled_Type = OctetString
_ChassisPBsInstalled_Object = MibScalar
chassisPBsInstalled = _ChassisPBsInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 25),
    _ChassisPBsInstalled_Type()
)
chassisPBsInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisPBsInstalled.setStatus("mandatory")
_ChassisSMsInstalled_Type = OctetString
_ChassisSMsInstalled_Object = MibScalar
chassisSMsInstalled = _ChassisSMsInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 29),
    _ChassisSMsInstalled_Type()
)
chassisSMsInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisSMsInstalled.setStatus("mandatory")
_ChassisMMsInstalled_Type = OctetString
_ChassisMMsInstalled_Object = MibScalar
chassisMMsInstalled = _ChassisMMsInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 30),
    _ChassisMMsInstalled_Type()
)
chassisMMsInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisMMsInstalled.setStatus("mandatory")
_ChassisPMsInstalled_Type = OctetString
_ChassisPMsInstalled_Object = MibScalar
chassisPMsInstalled = _ChassisPMsInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 31),
    _ChassisPMsInstalled_Type()
)
chassisPMsInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisPMsInstalled.setStatus("mandatory")


class _ChassisMTInstalled_Type(Integer32):
    """Custom type chassisMTInstalled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_ChassisMTInstalled_Type.__name__ = "Integer32"
_ChassisMTInstalled_Object = MibScalar
chassisMTInstalled = _ChassisMTInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 32),
    _ChassisMTInstalled_Type()
)
chassisMTInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisMTInstalled.setStatus("mandatory")
_ChassisBlowersInstalled_Type = OctetString
_ChassisBlowersInstalled_Object = MibScalar
chassisBlowersInstalled = _ChassisBlowersInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 33),
    _ChassisBlowersInstalled_Type()
)
chassisBlowersInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisBlowersInstalled.setStatus("mandatory")
_ChassisActiveMM_Type = Integer32
_ChassisActiveMM_Object = MibScalar
chassisActiveMM = _ChassisActiveMM_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 34),
    _ChassisActiveMM_Type()
)
chassisActiveMM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisActiveMM.setStatus("mandatory")
_ChassisKVMOwner_Type = Integer32
_ChassisKVMOwner_Object = MibScalar
chassisKVMOwner = _ChassisKVMOwner_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 35),
    _ChassisKVMOwner_Type()
)
chassisKVMOwner.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisKVMOwner.setStatus("mandatory")
_ChassisMediaTrayOwner_Type = Integer32
_ChassisMediaTrayOwner_Object = MibScalar
chassisMediaTrayOwner = _ChassisMediaTrayOwner_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 36),
    _ChassisMediaTrayOwner_Type()
)
chassisMediaTrayOwner.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisMediaTrayOwner.setStatus("mandatory")
_ChassisFPsInstalled_Type = OctetString
_ChassisFPsInstalled_Object = MibScalar
chassisFPsInstalled = _ChassisFPsInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 37),
    _ChassisFPsInstalled_Type()
)
chassisFPsInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFPsInstalled.setStatus("mandatory")


class _ChassisType_Type(Integer32):
    """Custom type chassisType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(97,
              98)
        )
    )
    namedValues = NamedValues(
        *(("bladeCenterOrBladeCenterH", 97),
          ("bladeCenterTOrBladeCenterHT", 98))
    )


_ChassisType_Type.__name__ = "Integer32"
_ChassisType_Object = MibScalar
chassisType = _ChassisType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 38),
    _ChassisType_Type()
)
chassisType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisType.setStatus("mandatory")


class _ChassisSubtype_Type(Integer32):
    """Custom type chassisSubtype based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              2,
              3,
              4,
              5,
              32,
              255)
        )
    )
    namedValues = NamedValues(
        *(("bladeCenterOrBladeCenterT", 0),
          ("bladeCenterHOrBladeCenterHT", 2),
          ("bladeCenterS", 3),
          ("bladeCenterE", 4),
          ("bladeCenterH", 5),
          ("bladeCenterT", 32),
          ("unknown", 255))
    )


_ChassisSubtype_Type.__name__ = "Integer32"
_ChassisSubtype_Object = MibScalar
chassisSubtype = _ChassisSubtype_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 39),
    _ChassisSubtype_Type()
)
chassisSubtype.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisSubtype.setStatus("mandatory")
_ChassisNoOfFBsSupported_Type = Integer32
_ChassisNoOfFBsSupported_Object = MibScalar
chassisNoOfFBsSupported = _ChassisNoOfFBsSupported_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 40),
    _ChassisNoOfFBsSupported_Type()
)
chassisNoOfFBsSupported.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisNoOfFBsSupported.setStatus("mandatory")
_ChassisNoOfAPsSupported_Type = Integer32
_ChassisNoOfAPsSupported_Object = MibScalar
chassisNoOfAPsSupported = _ChassisNoOfAPsSupported_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 41),
    _ChassisNoOfAPsSupported_Type()
)
chassisNoOfAPsSupported.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisNoOfAPsSupported.setStatus("mandatory")
_ChassisNoOfNCsSupported_Type = Integer32
_ChassisNoOfNCsSupported_Object = MibScalar
chassisNoOfNCsSupported = _ChassisNoOfNCsSupported_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 42),
    _ChassisNoOfNCsSupported_Type()
)
chassisNoOfNCsSupported.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisNoOfNCsSupported.setStatus("deprecated")
_ChassisNoOfMXsSupported_Type = Integer32
_ChassisNoOfMXsSupported_Object = MibScalar
chassisNoOfMXsSupported = _ChassisNoOfMXsSupported_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 43),
    _ChassisNoOfMXsSupported_Type()
)
chassisNoOfMXsSupported.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisNoOfMXsSupported.setStatus("mandatory")
_ChassisNoOfMMIsSupported_Type = Integer32
_ChassisNoOfMMIsSupported_Object = MibScalar
chassisNoOfMMIsSupported = _ChassisNoOfMMIsSupported_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 44),
    _ChassisNoOfMMIsSupported_Type()
)
chassisNoOfMMIsSupported.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisNoOfMMIsSupported.setStatus("mandatory")
_ChassisNoOfSMIsSupported_Type = Integer32
_ChassisNoOfSMIsSupported_Object = MibScalar
chassisNoOfSMIsSupported = _ChassisNoOfSMIsSupported_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 45),
    _ChassisNoOfSMIsSupported_Type()
)
chassisNoOfSMIsSupported.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisNoOfSMIsSupported.setStatus("mandatory")
_ChassisNoOfFBsInstalled_Type = OctetString
_ChassisNoOfFBsInstalled_Object = MibScalar
chassisNoOfFBsInstalled = _ChassisNoOfFBsInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 46),
    _ChassisNoOfFBsInstalled_Type()
)
chassisNoOfFBsInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisNoOfFBsInstalled.setStatus("mandatory")
_ChassisNoOfAPsInstalled_Type = OctetString
_ChassisNoOfAPsInstalled_Object = MibScalar
chassisNoOfAPsInstalled = _ChassisNoOfAPsInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 47),
    _ChassisNoOfAPsInstalled_Type()
)
chassisNoOfAPsInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisNoOfAPsInstalled.setStatus("mandatory")
_ChassisNoOfNCsInstalled_Type = OctetString
_ChassisNoOfNCsInstalled_Object = MibScalar
chassisNoOfNCsInstalled = _ChassisNoOfNCsInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 48),
    _ChassisNoOfNCsInstalled_Type()
)
chassisNoOfNCsInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisNoOfNCsInstalled.setStatus("deprecated")
_ChassisNoOfMXsInstalled_Type = OctetString
_ChassisNoOfMXsInstalled_Object = MibScalar
chassisNoOfMXsInstalled = _ChassisNoOfMXsInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 49),
    _ChassisNoOfMXsInstalled_Type()
)
chassisNoOfMXsInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisNoOfMXsInstalled.setStatus("mandatory")
_ChassisNoOfMMIsInstalled_Type = OctetString
_ChassisNoOfMMIsInstalled_Object = MibScalar
chassisNoOfMMIsInstalled = _ChassisNoOfMMIsInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 50),
    _ChassisNoOfMMIsInstalled_Type()
)
chassisNoOfMMIsInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisNoOfMMIsInstalled.setStatus("mandatory")
_ChassisNoOfSMIsInstalled_Type = OctetString
_ChassisNoOfSMIsInstalled_Object = MibScalar
chassisNoOfSMIsInstalled = _ChassisNoOfSMIsInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 51),
    _ChassisNoOfSMIsInstalled_Type()
)
chassisNoOfSMIsInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisNoOfSMIsInstalled.setStatus("mandatory")
_ChassisNoOfMTsInstalled_Type = OctetString
_ChassisNoOfMTsInstalled_Object = MibScalar
chassisNoOfMTsInstalled = _ChassisNoOfMTsInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 52),
    _ChassisNoOfMTsInstalled_Type()
)
chassisNoOfMTsInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisNoOfMTsInstalled.setStatus("mandatory")
_ManagementModule_ObjectIdentity = ObjectIdentity
managementModule = _ManagementModule_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5)
)
_MmStatusTable_Object = MibTable
mmStatusTable = _MmStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5, 1)
)
if mibBuilder.loadTexts:
    mmStatusTable.setStatus("mandatory")
_MmStatusEntry_Object = MibTableRow
mmStatusEntry = _MmStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5, 1, 1)
)
mmStatusEntry.setIndexNames(
    (0, "BLADE-MIB", "mmStatusIndex"),
)
if mibBuilder.loadTexts:
    mmStatusEntry.setStatus("mandatory")
_MmStatusIndex_Type = Integer32
_MmStatusIndex_Object = MibTableColumn
mmStatusIndex = _MmStatusIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5, 1, 1, 1),
    _MmStatusIndex_Type()
)
mmStatusIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmStatusIndex.setStatus("mandatory")


class _MmPresent_Type(Integer32):
    """Custom type mmPresent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_MmPresent_Type.__name__ = "Integer32"
_MmPresent_Object = MibTableColumn
mmPresent = _MmPresent_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5, 1, 1, 2),
    _MmPresent_Type()
)
mmPresent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmPresent.setStatus("mandatory")
_MmExtIpAddress_Type = IpAddress
_MmExtIpAddress_Object = MibTableColumn
mmExtIpAddress = _MmExtIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5, 1, 1, 3),
    _MmExtIpAddress_Type()
)
mmExtIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmExtIpAddress.setStatus("mandatory")


class _MmPrimary_Type(Integer32):
    """Custom type mmPrimary based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_MmPrimary_Type.__name__ = "Integer32"
_MmPrimary_Object = MibTableColumn
mmPrimary = _MmPrimary_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5, 1, 1, 4),
    _MmPrimary_Type()
)
mmPrimary.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmPrimary.setStatus("mandatory")


class _MmHealthState_Type(Integer32):
    """Custom type mmHealthState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("good", 1),
          ("warning", 2),
          ("bad", 3))
    )


_MmHealthState_Type.__name__ = "Integer32"
_MmHealthState_Object = MibTableColumn
mmHealthState = _MmHealthState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5, 1, 1, 5),
    _MmHealthState_Type()
)
mmHealthState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmHealthState.setStatus("mandatory")
_Storage_ObjectIdentity = ObjectIdentity
storage = _Storage_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6)
)
_StorageStatus_ObjectIdentity = ObjectIdentity
storageStatus = _StorageStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 1)
)
_StorageStatusTable_Object = MibTable
storageStatusTable = _StorageStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 1, 1)
)
if mibBuilder.loadTexts:
    storageStatusTable.setStatus("mandatory")
_StorageStatusEntry_Object = MibTableRow
storageStatusEntry = _StorageStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 1, 1, 1)
)
storageStatusEntry.setIndexNames(
    (0, "BLADE-MIB", "storageStatusIndex"),
)
if mibBuilder.loadTexts:
    storageStatusEntry.setStatus("mandatory")
_StorageStatusIndex_Type = Integer32
_StorageStatusIndex_Object = MibTableColumn
storageStatusIndex = _StorageStatusIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 1, 1, 1, 1),
    _StorageStatusIndex_Type()
)
storageStatusIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    storageStatusIndex.setStatus("mandatory")
_StorageBayNumber_Type = OctetString
_StorageBayNumber_Object = MibTableColumn
storageBayNumber = _StorageBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 1, 1, 1, 2),
    _StorageBayNumber_Type()
)
storageBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    storageBayNumber.setStatus("mandatory")


class _StorageState_Type(Integer32):
    """Custom type storageState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("good", 1),
          ("warning", 2),
          ("critical", 3),
          ("notAvailable", 255))
    )


_StorageState_Type.__name__ = "Integer32"
_StorageState_Object = MibTableColumn
storageState = _StorageState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 1, 1, 1, 3),
    _StorageState_Type()
)
storageState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    storageState.setStatus("mandatory")
_StorageName_Type = OctetString
_StorageName_Object = MibTableColumn
storageName = _StorageName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 1, 1, 1, 4),
    _StorageName_Type()
)
storageName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    storageName.setStatus("mandatory")
_StorageConfiguration_ObjectIdentity = ObjectIdentity
storageConfiguration = _StorageConfiguration_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2)
)
_StorageSwitchConfiguration_ObjectIdentity = ObjectIdentity
storageSwitchConfiguration = _StorageSwitchConfiguration_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2, 1)
)
_StorageSwitchZoneCfgTable_Object = MibTable
storageSwitchZoneCfgTable = _StorageSwitchZoneCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2, 1, 1)
)
if mibBuilder.loadTexts:
    storageSwitchZoneCfgTable.setStatus("mandatory")
_StorageSwitchZoneCfgEntry_Object = MibTableRow
storageSwitchZoneCfgEntry = _StorageSwitchZoneCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2, 1, 1, 1)
)
storageSwitchZoneCfgEntry.setIndexNames(
    (0, "BLADE-MIB", "switchZoneCfgIndex"),
)
if mibBuilder.loadTexts:
    storageSwitchZoneCfgEntry.setStatus("mandatory")
_SwitchZoneCfgIndex_Type = Integer32
_SwitchZoneCfgIndex_Object = MibTableColumn
switchZoneCfgIndex = _SwitchZoneCfgIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2, 1, 1, 1, 1),
    _SwitchZoneCfgIndex_Type()
)
switchZoneCfgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    switchZoneCfgIndex.setStatus("mandatory")
_SwitchZoneCfgBayNumber_Type = Integer32
_SwitchZoneCfgBayNumber_Object = MibTableColumn
switchZoneCfgBayNumber = _SwitchZoneCfgBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2, 1, 1, 1, 2),
    _SwitchZoneCfgBayNumber_Type()
)
switchZoneCfgBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    switchZoneCfgBayNumber.setStatus("mandatory")
_SwitchZoneCfgNumber_Type = Integer32
_SwitchZoneCfgNumber_Object = MibTableColumn
switchZoneCfgNumber = _SwitchZoneCfgNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2, 1, 1, 1, 3),
    _SwitchZoneCfgNumber_Type()
)
switchZoneCfgNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    switchZoneCfgNumber.setStatus("mandatory")


class _SwitchZoneCfgStatus_Type(Integer32):
    """Custom type switchZoneCfgStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("nonActive", 0),
          ("active", 1),
          ("pending", 2))
    )


_SwitchZoneCfgStatus_Type.__name__ = "Integer32"
_SwitchZoneCfgStatus_Object = MibTableColumn
switchZoneCfgStatus = _SwitchZoneCfgStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2, 1, 1, 1, 4),
    _SwitchZoneCfgStatus_Type()
)
switchZoneCfgStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    switchZoneCfgStatus.setStatus("mandatory")


class _SwitchZoneCfgType_Type(Integer32):
    """Custom type switchZoneCfgType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("userdefined", 1),
          ("predefined", 2))
    )


_SwitchZoneCfgType_Type.__name__ = "Integer32"
_SwitchZoneCfgType_Object = MibTableColumn
switchZoneCfgType = _SwitchZoneCfgType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2, 1, 1, 1, 5),
    _SwitchZoneCfgType_Type()
)
switchZoneCfgType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    switchZoneCfgType.setStatus("mandatory")
_SwitchZoneCfgName_Type = OctetString
_SwitchZoneCfgName_Object = MibTableColumn
switchZoneCfgName = _SwitchZoneCfgName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2, 1, 1, 1, 6),
    _SwitchZoneCfgName_Type()
)
switchZoneCfgName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    switchZoneCfgName.setStatus("mandatory")
_SwitchZoneCfgDescription_Type = OctetString
_SwitchZoneCfgDescription_Object = MibTableColumn
switchZoneCfgDescription = _SwitchZoneCfgDescription_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2, 1, 1, 1, 7),
    _SwitchZoneCfgDescription_Type()
)
switchZoneCfgDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    switchZoneCfgDescription.setStatus("mandatory")
_SwitchZoneCfgDate_Type = OctetString
_SwitchZoneCfgDate_Object = MibTableColumn
switchZoneCfgDate = _SwitchZoneCfgDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2, 1, 1, 1, 8),
    _SwitchZoneCfgDate_Type()
)
switchZoneCfgDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    switchZoneCfgDate.setStatus("mandatory")


class _SwitchActiveZoneCfg_Type(Integer32):
    """Custom type switchActiveZoneCfg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_SwitchActiveZoneCfg_Type.__name__ = "Integer32"
_SwitchActiveZoneCfg_Object = MibTableColumn
switchActiveZoneCfg = _SwitchActiveZoneCfg_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2, 1, 1, 1, 9),
    _SwitchActiveZoneCfg_Type()
)
switchActiveZoneCfg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    switchActiveZoneCfg.setStatus("mandatory")
_StorageSwitchActiveZoneCfgTable_Object = MibTable
storageSwitchActiveZoneCfgTable = _StorageSwitchActiveZoneCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2, 1, 2)
)
if mibBuilder.loadTexts:
    storageSwitchActiveZoneCfgTable.setStatus("mandatory")
_StorageSwitchActiveZoneCfgEntry_Object = MibTableRow
storageSwitchActiveZoneCfgEntry = _StorageSwitchActiveZoneCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2, 1, 2, 1)
)
storageSwitchActiveZoneCfgEntry.setIndexNames(
    (0, "BLADE-MIB", "activeZoneCfgIndex"),
)
if mibBuilder.loadTexts:
    storageSwitchActiveZoneCfgEntry.setStatus("mandatory")
_ActiveZoneCfgIndex_Type = Integer32
_ActiveZoneCfgIndex_Object = MibTableColumn
activeZoneCfgIndex = _ActiveZoneCfgIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2, 1, 2, 1, 1),
    _ActiveZoneCfgIndex_Type()
)
activeZoneCfgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    activeZoneCfgIndex.setStatus("mandatory")
_ActiveZoneCfgBayNumber_Type = OctetString
_ActiveZoneCfgBayNumber_Object = MibTableColumn
activeZoneCfgBayNumber = _ActiveZoneCfgBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2, 1, 2, 1, 2),
    _ActiveZoneCfgBayNumber_Type()
)
activeZoneCfgBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    activeZoneCfgBayNumber.setStatus("mandatory")
_ActiveZoneCfgNumberBySwitch_Type = Integer32
_ActiveZoneCfgNumberBySwitch_Object = MibTableColumn
activeZoneCfgNumberBySwitch = _ActiveZoneCfgNumberBySwitch_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2, 1, 2, 1, 3),
    _ActiveZoneCfgNumberBySwitch_Type()
)
activeZoneCfgNumberBySwitch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    activeZoneCfgNumberBySwitch.setStatus("mandatory")
_ActiveZoneCfgNumberByMM_Type = Integer32
_ActiveZoneCfgNumberByMM_Object = MibTableColumn
activeZoneCfgNumberByMM = _ActiveZoneCfgNumberByMM_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2, 1, 2, 1, 4),
    _ActiveZoneCfgNumberByMM_Type()
)
activeZoneCfgNumberByMM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    activeZoneCfgNumberByMM.setStatus("mandatory")
_SwitchZoneCfgActivation_Type = Integer32
_SwitchZoneCfgActivation_Object = MibScalar
switchZoneCfgActivation = _SwitchZoneCfgActivation_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 6, 2, 1, 3),
    _SwitchZoneCfgActivation_Type()
)
switchZoneCfgActivation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    switchZoneCfgActivation.setStatus("mandatory")
_FirmwareInformation_ObjectIdentity = ObjectIdentity
firmwareInformation = _FirmwareInformation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 8)
)
_SmFirmwareInformation_ObjectIdentity = ObjectIdentity
smFirmwareInformation = _SmFirmwareInformation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 8, 1)
)
_SmFirmwareInfoTable_Object = MibTable
smFirmwareInfoTable = _SmFirmwareInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 8, 1, 1)
)
if mibBuilder.loadTexts:
    smFirmwareInfoTable.setStatus("mandatory")
_SmFirmwareInfoEntry_Object = MibTableRow
smFirmwareInfoEntry = _SmFirmwareInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 8, 1, 1, 1)
)
smFirmwareInfoEntry.setIndexNames(
    (0, "BLADE-MIB", "smFirmwareInfoIndex"),
)
if mibBuilder.loadTexts:
    smFirmwareInfoEntry.setStatus("mandatory")
_SmFirmwareInfoIndex_Type = Integer32
_SmFirmwareInfoIndex_Object = MibTableColumn
smFirmwareInfoIndex = _SmFirmwareInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 8, 1, 1, 1, 1),
    _SmFirmwareInfoIndex_Type()
)
smFirmwareInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFirmwareInfoIndex.setStatus("mandatory")
_SmFirmwareInfoModIndex_Type = Integer32
_SmFirmwareInfoModIndex_Object = MibTableColumn
smFirmwareInfoModIndex = _SmFirmwareInfoModIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 8, 1, 1, 1, 2),
    _SmFirmwareInfoModIndex_Type()
)
smFirmwareInfoModIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFirmwareInfoModIndex.setStatus("mandatory")
_SmFirmwareInfoImageIndex_Type = Integer32
_SmFirmwareInfoImageIndex_Object = MibTableColumn
smFirmwareInfoImageIndex = _SmFirmwareInfoImageIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 8, 1, 1, 1, 3),
    _SmFirmwareInfoImageIndex_Type()
)
smFirmwareInfoImageIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFirmwareInfoImageIndex.setStatus("mandatory")
_SmFirmwareInfoImageName_Type = OctetString
_SmFirmwareInfoImageName_Object = MibTableColumn
smFirmwareInfoImageName = _SmFirmwareInfoImageName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 8, 1, 1, 1, 4),
    _SmFirmwareInfoImageName_Type()
)
smFirmwareInfoImageName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smFirmwareInfoImageName.setStatus("mandatory")
_FirmwareUpdate_ObjectIdentity = ObjectIdentity
firmwareUpdate = _FirmwareUpdate_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9)
)


class _FirmwareUpdateTarget_Type(Integer32):
    """Custom type firmwareUpdateTarget based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              255)
        )
    )
    namedValues = NamedValues(
        *(("managementModule", 0),
          ("switchModule1", 11),
          ("switchModule2", 12),
          ("switchModule3", 13),
          ("switchModule4", 14),
          ("switchModule5", 15),
          ("switchModule6", 16),
          ("switchModule7", 17),
          ("switchModule8", 18),
          ("switchModule9", 19),
          ("switchModule10", 20),
          ("blade1", 31),
          ("blade2", 32),
          ("blade3", 33),
          ("blade4", 34),
          ("blade5", 35),
          ("blade6", 36),
          ("blade7", 37),
          ("blade8", 38),
          ("blade9", 39),
          ("blade10", 40),
          ("blade11", 41),
          ("blade12", 42),
          ("blade13", 43),
          ("blade14", 44),
          ("unknown", 255))
    )


_FirmwareUpdateTarget_Type.__name__ = "Integer32"
_FirmwareUpdateTarget_Object = MibScalar
firmwareUpdateTarget = _FirmwareUpdateTarget_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 1),
    _FirmwareUpdateTarget_Type()
)
firmwareUpdateTarget.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    firmwareUpdateTarget.setStatus("mandatory")


class _FirmwareUpdateTftpServer_Type(OctetString):
    """Custom type firmwareUpdateTftpServer based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 63),
    )


_FirmwareUpdateTftpServer_Type.__name__ = "OctetString"
_FirmwareUpdateTftpServer_Object = MibScalar
firmwareUpdateTftpServer = _FirmwareUpdateTftpServer_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 2),
    _FirmwareUpdateTftpServer_Type()
)
firmwareUpdateTftpServer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    firmwareUpdateTftpServer.setStatus("mandatory")


class _FirmwareUpdateFileName_Type(OctetString):
    """Custom type firmwareUpdateFileName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 254),
    )


_FirmwareUpdateFileName_Type.__name__ = "OctetString"
_FirmwareUpdateFileName_Object = MibScalar
firmwareUpdateFileName = _FirmwareUpdateFileName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 3),
    _FirmwareUpdateFileName_Type()
)
firmwareUpdateFileName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    firmwareUpdateFileName.setStatus("mandatory")


class _FirmwareUpdateStart_Type(Integer32):
    """Custom type firmwareUpdateStart based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("execute", 1),
          ("execute-with-reboot", 2),
          ("execute-nowait", 3),
          ("execute-with-reboot-nowait", 4))
    )


_FirmwareUpdateStart_Type.__name__ = "Integer32"
_FirmwareUpdateStart_Object = MibScalar
firmwareUpdateStart = _FirmwareUpdateStart_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 4),
    _FirmwareUpdateStart_Type()
)
firmwareUpdateStart.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    firmwareUpdateStart.setStatus("mandatory")
_FirmwareUpdateStatus_Type = OctetString
_FirmwareUpdateStatus_Object = MibScalar
firmwareUpdateStatus = _FirmwareUpdateStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 5),
    _FirmwareUpdateStatus_Type()
)
firmwareUpdateStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    firmwareUpdateStatus.setStatus("mandatory")
_StandbyFirmwareUpdateStatus_Type = OctetString
_StandbyFirmwareUpdateStatus_Object = MibScalar
standbyFirmwareUpdateStatus = _StandbyFirmwareUpdateStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 6),
    _StandbyFirmwareUpdateStatus_Type()
)
standbyFirmwareUpdateStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyFirmwareUpdateStatus.setStatus("mandatory")
_FirmwareImageNumber_Type = Integer32
_FirmwareImageNumber_Object = MibScalar
firmwareImageNumber = _FirmwareImageNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 7),
    _FirmwareImageNumber_Type()
)
firmwareImageNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    firmwareImageNumber.setStatus("mandatory")
_FirmwareActiveImage_Type = Integer32
_FirmwareActiveImage_Object = MibScalar
firmwareActiveImage = _FirmwareActiveImage_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 8),
    _FirmwareActiveImage_Type()
)
firmwareActiveImage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    firmwareActiveImage.setStatus("mandatory")


class _FirmwareUpdateServer_Type(OctetString):
    """Custom type firmwareUpdateServer based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 254),
    )


_FirmwareUpdateServer_Type.__name__ = "OctetString"
_FirmwareUpdateServer_Object = MibScalar
firmwareUpdateServer = _FirmwareUpdateServer_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 9),
    _FirmwareUpdateServer_Type()
)
firmwareUpdateServer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    firmwareUpdateServer.setStatus("mandatory")
_RemoteChassis_ObjectIdentity = ObjectIdentity
remoteChassis = _RemoteChassis_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 10)
)
_RemoteChassisTable_Object = MibTable
remoteChassisTable = _RemoteChassisTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 10, 1)
)
if mibBuilder.loadTexts:
    remoteChassisTable.setStatus("mandatory")
_RemoteChassisEntry_Object = MibTableRow
remoteChassisEntry = _RemoteChassisEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 10, 1, 1)
)
remoteChassisEntry.setIndexNames(
    (0, "BLADE-MIB", "remoteChassisIndex"),
)
if mibBuilder.loadTexts:
    remoteChassisEntry.setStatus("mandatory")
_RemoteChassisIndex_Type = Integer32
_RemoteChassisIndex_Object = MibTableColumn
remoteChassisIndex = _RemoteChassisIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 10, 1, 1, 1),
    _RemoteChassisIndex_Type()
)
remoteChassisIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    remoteChassisIndex.setStatus("mandatory")
_SystemName_Type = OctetString
_SystemName_Object = MibTableColumn
systemName = _SystemName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 10, 1, 1, 2),
    _SystemName_Type()
)
systemName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    systemName.setStatus("mandatory")


class _SystemStatus_Type(Integer32):
    """Custom type systemStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              2,
              4,
              9,
              170,
              255)
        )
    )
    namedValues = NamedValues(
        *(("critical", 0),
          ("non-Critical", 2),
          ("system-Level", 4),
          ("unknown", 9),
          ("noResponse", 170),
          ("normal", 255))
    )


_SystemStatus_Type.__name__ = "Integer32"
_SystemStatus_Object = MibTableColumn
systemStatus = _SystemStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 10, 1, 1, 3),
    _SystemStatus_Type()
)
systemStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    systemStatus.setStatus("mandatory")
_MmType_Type = OctetString
_MmType_Object = MibTableColumn
mmType = _MmType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 10, 1, 1, 4),
    _MmType_Type()
)
mmType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmType.setStatus("mandatory")
_MmSerial_Type = OctetString
_MmSerial_Object = MibTableColumn
mmSerial = _MmSerial_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 10, 1, 1, 5),
    _MmSerial_Type()
)
mmSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmSerial.setStatus("mandatory")
_MmFru_Type = OctetString
_MmFru_Object = MibTableColumn
mmFru = _MmFru_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 10, 1, 1, 6),
    _MmFru_Type()
)
mmFru.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmFru.setStatus("mandatory")
_MmIp_Type = OctetString
_MmIp_Object = MibTableColumn
mmIp = _MmIp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 10, 1, 1, 7),
    _MmIp_Type()
)
mmIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mmIp.setStatus("mandatory")
_ChassisSerial_Type = OctetString
_ChassisSerial_Object = MibTableColumn
chassisSerial = _ChassisSerial_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 10, 1, 1, 8),
    _ChassisSerial_Type()
)
chassisSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisSerial.setStatus("mandatory")
_ChassisFru_Type = OctetString
_ChassisFru_Object = MibTableColumn
chassisFru = _ChassisFru_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 10, 1, 1, 9),
    _ChassisFru_Type()
)
chassisFru.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFru.setStatus("mandatory")
_ChassisMachineTypeMode_Type = OctetString
_ChassisMachineTypeMode_Object = MibTableColumn
chassisMachineTypeMode = _ChassisMachineTypeMode_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 10, 1, 1, 10),
    _ChassisMachineTypeMode_Type()
)
chassisMachineTypeMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisMachineTypeMode.setStatus("mandatory")
_ChassisUuid_Type = OctetString
_ChassisUuid_Object = MibTableColumn
chassisUuid = _ChassisUuid_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 10, 1, 1, 11),
    _ChassisUuid_Type()
)
chassisUuid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisUuid.setStatus("mandatory")
_FirmwareVersion_Type = OctetString
_FirmwareVersion_Object = MibTableColumn
firmwareVersion = _FirmwareVersion_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 10, 1, 1, 12),
    _FirmwareVersion_Type()
)
firmwareVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    firmwareVersion.setStatus("mandatory")


class _IpStatus_Type(Integer32):
    """Custom type ipStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ipv4", 1),
          ("ipv6", 2),
          ("both", 3))
    )


_IpStatus_Type.__name__ = "Integer32"
_IpStatus_Object = MibTableColumn
ipStatus = _IpStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 10, 1, 1, 13),
    _IpStatus_Type()
)
ipStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipStatus.setStatus("mandatory")
_Ipv6Addresses_Type = OctetString
_Ipv6Addresses_Object = MibTableColumn
ipv6Addresses = _Ipv6Addresses_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 10, 1, 1, 14),
    _Ipv6Addresses_Type()
)
ipv6Addresses.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6Addresses.setStatus("mandatory")


class _ChassisDiscovery_Type(Integer32):
    """Custom type chassisDiscovery based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_ChassisDiscovery_Type.__name__ = "Integer32"
_ChassisDiscovery_Object = MibScalar
chassisDiscovery = _ChassisDiscovery_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 10, 2),
    _ChassisDiscovery_Type()
)
chassisDiscovery.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chassisDiscovery.setStatus("mandatory")
_FileManagement_ObjectIdentity = ObjectIdentity
fileManagement = _FileManagement_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11)
)
_FileTopology_ObjectIdentity = ObjectIdentity
fileTopology = _FileTopology_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 1)
)
_CurrentDirectory_Type = OctetString
_CurrentDirectory_Object = MibScalar
currentDirectory = _CurrentDirectory_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 1, 1),
    _CurrentDirectory_Type()
)
currentDirectory.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    currentDirectory.setStatus("mandatory")
_FileDetailsTable_Object = MibTable
fileDetailsTable = _FileDetailsTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 1, 2)
)
if mibBuilder.loadTexts:
    fileDetailsTable.setStatus("mandatory")
_FileDetailsEntry_Object = MibTableRow
fileDetailsEntry = _FileDetailsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 1, 2, 1)
)
fileDetailsEntry.setIndexNames(
    (0, "BLADE-MIB", "fileIndex"),
)
if mibBuilder.loadTexts:
    fileDetailsEntry.setStatus("mandatory")
_FileIndex_Type = Integer32
_FileIndex_Object = MibTableColumn
fileIndex = _FileIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 1, 2, 1, 1),
    _FileIndex_Type()
)
fileIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fileIndex.setStatus("mandatory")
_FileName_Type = OctetString
_FileName_Object = MibTableColumn
fileName = _FileName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 1, 2, 1, 2),
    _FileName_Type()
)
fileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fileName.setStatus("mandatory")
_FileLastUpdate_Type = OctetString
_FileLastUpdate_Object = MibTableColumn
fileLastUpdate = _FileLastUpdate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 1, 2, 1, 3),
    _FileLastUpdate_Type()
)
fileLastUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fileLastUpdate.setStatus("mandatory")
_FileSize_Type = OctetString
_FileSize_Object = MibTableColumn
fileSize = _FileSize_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 1, 2, 1, 4),
    _FileSize_Type()
)
fileSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fileSize.setStatus("mandatory")
_FileManagementCmd_Type = OctetString
_FileManagementCmd_Object = MibScalar
fileManagementCmd = _FileManagementCmd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 3),
    _FileManagementCmd_Type()
)
fileManagementCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fileManagementCmd.setStatus("mandatory")
_FileSystemSpaceAvailable_Type = OctetString
_FileSystemSpaceAvailable_Object = MibScalar
fileSystemSpaceAvailable = _FileSystemSpaceAvailable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 6),
    _FileSystemSpaceAvailable_Type()
)
fileSystemSpaceAvailable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fileSystemSpaceAvailable.setStatus("mandatory")
_ComponentMonitors_ObjectIdentity = ObjectIdentity
componentMonitors = _ComponentMonitors_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37)
)
_ComponentMACAddressTable_Object = MibTable
componentMACAddressTable = _ComponentMACAddressTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 11)
)
if mibBuilder.loadTexts:
    componentMACAddressTable.setStatus("mandatory")
_ComponentMACAddressEntry_Object = MibTableRow
componentMACAddressEntry = _ComponentMACAddressEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 11, 1)
)
componentMACAddressEntry.setIndexNames(
    (0, "BLADE-MIB", "componentMACAddressTopologyPath"),
    (0, "BLADE-MIB", "componentMACAddressIndex"),
)
if mibBuilder.loadTexts:
    componentMACAddressEntry.setStatus("mandatory")


class _ComponentMACAddressTopologyPath_Type(OctetString):
    """Custom type componentMACAddressTopologyPath based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_ComponentMACAddressTopologyPath_Type.__name__ = "OctetString"
_ComponentMACAddressTopologyPath_Object = MibTableColumn
componentMACAddressTopologyPath = _ComponentMACAddressTopologyPath_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 11, 1, 1),
    _ComponentMACAddressTopologyPath_Type()
)
componentMACAddressTopologyPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentMACAddressTopologyPath.setStatus("mandatory")
_ComponentMACAddressIndex_Type = Integer32
_ComponentMACAddressIndex_Object = MibTableColumn
componentMACAddressIndex = _ComponentMACAddressIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 11, 1, 2),
    _ComponentMACAddressIndex_Type()
)
componentMACAddressIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentMACAddressIndex.setStatus("mandatory")
_ComponentMACAddressName_Type = OctetString
_ComponentMACAddressName_Object = MibTableColumn
componentMACAddressName = _ComponentMACAddressName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 11, 1, 3),
    _ComponentMACAddressName_Type()
)
componentMACAddressName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentMACAddressName.setStatus("mandatory")
_ComponentMACAddress_Type = OctetString
_ComponentMACAddress_Object = MibTableColumn
componentMACAddress = _ComponentMACAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 11, 1, 4),
    _ComponentMACAddress_Type()
)
componentMACAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentMACAddress.setStatus("mandatory")
_Service_ObjectIdentity = ObjectIdentity
service = _Service_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23)
)
_ServiceConfig_ObjectIdentity = ObjectIdentity
serviceConfig = _ServiceConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 1)
)


class _DebugEnable_Type(Integer32):
    """Custom type debugEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_DebugEnable_Type.__name__ = "Integer32"
_DebugEnable_Object = MibScalar
debugEnable = _DebugEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 1, 3),
    _DebugEnable_Type()
)
debugEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    debugEnable.setStatus("deprecated")
_BladeServiceData_ObjectIdentity = ObjectIdentity
bladeServiceData = _BladeServiceData_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3)
)
_BladeServiceDataTable_Object = MibTable
bladeServiceDataTable = _BladeServiceDataTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1)
)
if mibBuilder.loadTexts:
    bladeServiceDataTable.setStatus("mandatory")
_BladeServiceDataEntry_Object = MibTableRow
bladeServiceDataEntry = _BladeServiceDataEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1)
)
bladeServiceDataEntry.setIndexNames(
    (0, "BLADE-MIB", "serviceDataIndex"),
)
if mibBuilder.loadTexts:
    bladeServiceDataEntry.setStatus("mandatory")
_ServiceDataIndex_Type = Integer32
_ServiceDataIndex_Object = MibTableColumn
serviceDataIndex = _ServiceDataIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1, 1),
    _ServiceDataIndex_Type()
)
serviceDataIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    serviceDataIndex.setStatus("mandatory")


class _ServiceDataBladeId_Type(Integer32):
    """Custom type serviceDataBladeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_ServiceDataBladeId_Type.__name__ = "Integer32"
_ServiceDataBladeId_Object = MibTableColumn
serviceDataBladeId = _ServiceDataBladeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1, 2),
    _ServiceDataBladeId_Type()
)
serviceDataBladeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    serviceDataBladeId.setStatus("mandatory")


class _ServiceDataBladeExists_Type(Integer32):
    """Custom type serviceDataBladeExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_ServiceDataBladeExists_Type.__name__ = "Integer32"
_ServiceDataBladeExists_Object = MibTableColumn
serviceDataBladeExists = _ServiceDataBladeExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1, 3),
    _ServiceDataBladeExists_Type()
)
serviceDataBladeExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    serviceDataBladeExists.setStatus("mandatory")


class _ServiceDataBladePowerState_Type(Integer32):
    """Custom type serviceDataBladePowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("standby", 3),
          ("hibernate", 4),
          ("unknown", 255))
    )


_ServiceDataBladePowerState_Type.__name__ = "Integer32"
_ServiceDataBladePowerState_Object = MibTableColumn
serviceDataBladePowerState = _ServiceDataBladePowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1, 4),
    _ServiceDataBladePowerState_Type()
)
serviceDataBladePowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    serviceDataBladePowerState.setStatus("mandatory")
_ServiceDataBladeName_Type = OctetString
_ServiceDataBladeName_Object = MibTableColumn
serviceDataBladeName = _ServiceDataBladeName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1, 5),
    _ServiceDataBladeName_Type()
)
serviceDataBladeName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    serviceDataBladeName.setStatus("mandatory")
_ServiceDataBladeCapability_Type = Integer32
_ServiceDataBladeCapability_Object = MibTableColumn
serviceDataBladeCapability = _ServiceDataBladeCapability_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1, 6),
    _ServiceDataBladeCapability_Type()
)
serviceDataBladeCapability.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    serviceDataBladeCapability.setStatus("deprecated")


class _ServiceDataDumpInitiate_Type(Integer32):
    """Custom type serviceDataDumpInitiate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("processorDump", 1),
          ("platformDump", 2),
          ("partitionDump", 3),
          ("serviceData", 4))
    )


_ServiceDataDumpInitiate_Type.__name__ = "Integer32"
_ServiceDataDumpInitiate_Object = MibTableColumn
serviceDataDumpInitiate = _ServiceDataDumpInitiate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1, 7),
    _ServiceDataDumpInitiate_Type()
)
serviceDataDumpInitiate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceDataDumpInitiate.setStatus("mandatory")


class _ServiceDataDumpRetrieve_Type(Integer32):
    """Custom type serviceDataDumpRetrieve based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("processorDump", 1),
          ("platformDump", 2),
          ("partitionDump", 3),
          ("serviceData", 4))
    )


_ServiceDataDumpRetrieve_Type.__name__ = "Integer32"
_ServiceDataDumpRetrieve_Object = MibTableColumn
serviceDataDumpRetrieve = _ServiceDataDumpRetrieve_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1, 8),
    _ServiceDataDumpRetrieve_Type()
)
serviceDataDumpRetrieve.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceDataDumpRetrieve.setStatus("mandatory")
_ServiceDataDumpCapabilityMask_Type = OctetString
_ServiceDataDumpCapabilityMask_Object = MibTableColumn
serviceDataDumpCapabilityMask = _ServiceDataDumpCapabilityMask_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1, 9),
    _ServiceDataDumpCapabilityMask_Type()
)
serviceDataDumpCapabilityMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    serviceDataDumpCapabilityMask.setStatus("mandatory")


class _ServiceDataDumpInProgress_Type(Integer32):
    """Custom type serviceDataDumpInProgress based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("inProgress", 1),
          ("notInProgress", 2),
          ("unknown", 255))
    )


_ServiceDataDumpInProgress_Type.__name__ = "Integer32"
_ServiceDataDumpInProgress_Object = MibTableColumn
serviceDataDumpInProgress = _ServiceDataDumpInProgress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1, 10),
    _ServiceDataDumpInProgress_Type()
)
serviceDataDumpInProgress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    serviceDataDumpInProgress.setStatus("mandatory")
_BladeSystemReferenceCodes_ObjectIdentity = ObjectIdentity
bladeSystemReferenceCodes = _BladeSystemReferenceCodes_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 3)
)
_BladeSysRefCodesTable_Object = MibTable
bladeSysRefCodesTable = _BladeSysRefCodesTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 3, 1)
)
if mibBuilder.loadTexts:
    bladeSysRefCodesTable.setStatus("mandatory")
_BladeSysRefCodesEntry_Object = MibTableRow
bladeSysRefCodesEntry = _BladeSysRefCodesEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 3, 1, 1)
)
bladeSysRefCodesEntry.setIndexNames(
    (0, "BLADE-MIB", "sysRefCodeIndex"),
)
if mibBuilder.loadTexts:
    bladeSysRefCodesEntry.setStatus("mandatory")
_SysRefCodeIndex_Type = Integer32
_SysRefCodeIndex_Object = MibTableColumn
sysRefCodeIndex = _SysRefCodeIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 3, 1, 1, 1),
    _SysRefCodeIndex_Type()
)
sysRefCodeIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysRefCodeIndex.setStatus("mandatory")
_SysRefCodeBayNumber_Type = OctetString
_SysRefCodeBayNumber_Object = MibTableColumn
sysRefCodeBayNumber = _SysRefCodeBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 3, 1, 1, 2),
    _SysRefCodeBayNumber_Type()
)
sysRefCodeBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysRefCodeBayNumber.setStatus("mandatory")
_SysRefCodeSequence_Type = Integer32
_SysRefCodeSequence_Object = MibTableColumn
sysRefCodeSequence = _SysRefCodeSequence_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 3, 1, 1, 3),
    _SysRefCodeSequence_Type()
)
sysRefCodeSequence.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysRefCodeSequence.setStatus("mandatory")
_SysRefCode_Type = OctetString
_SysRefCode_Object = MibTableColumn
sysRefCode = _SysRefCode_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 3, 1, 1, 4),
    _SysRefCode_Type()
)
sysRefCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysRefCode.setStatus("mandatory")
_SysRefCodeTimestamp_Type = OctetString
_SysRefCodeTimestamp_Object = MibTableColumn
sysRefCodeTimestamp = _SysRefCodeTimestamp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 3, 1, 1, 5),
    _SysRefCodeTimestamp_Type()
)
sysRefCodeTimestamp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysRefCodeTimestamp.setStatus("mandatory")
_BladeSysRefCodesDetailsTable_Object = MibTable
bladeSysRefCodesDetailsTable = _BladeSysRefCodesDetailsTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 3, 2)
)
if mibBuilder.loadTexts:
    bladeSysRefCodesDetailsTable.setStatus("mandatory")
_BladeSysRefCodesDetailsEntry_Object = MibTableRow
bladeSysRefCodesDetailsEntry = _BladeSysRefCodesDetailsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 3, 2, 1)
)
bladeSysRefCodesDetailsEntry.setIndexNames(
    (0, "BLADE-MIB", "sysRefCodeDetailIndex"),
)
if mibBuilder.loadTexts:
    bladeSysRefCodesDetailsEntry.setStatus("mandatory")
_SysRefCodeDetailIndex_Type = Integer32
_SysRefCodeDetailIndex_Object = MibTableColumn
sysRefCodeDetailIndex = _SysRefCodeDetailIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 3, 2, 1, 1),
    _SysRefCodeDetailIndex_Type()
)
sysRefCodeDetailIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysRefCodeDetailIndex.setStatus("mandatory")
_SysRefCodeDetailBayNumber_Type = OctetString
_SysRefCodeDetailBayNumber_Object = MibTableColumn
sysRefCodeDetailBayNumber = _SysRefCodeDetailBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 3, 2, 1, 2),
    _SysRefCodeDetailBayNumber_Type()
)
sysRefCodeDetailBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysRefCodeDetailBayNumber.setStatus("mandatory")
_SysRefCodeDetailSRCSequence_Type = Integer32
_SysRefCodeDetailSRCSequence_Object = MibTableColumn
sysRefCodeDetailSRCSequence = _SysRefCodeDetailSRCSequence_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 3, 2, 1, 3),
    _SysRefCodeDetailSRCSequence_Type()
)
sysRefCodeDetailSRCSequence.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysRefCodeDetailSRCSequence.setStatus("mandatory")
_SysRefCodeDetailSequence_Type = OctetString
_SysRefCodeDetailSequence_Object = MibTableColumn
sysRefCodeDetailSequence = _SysRefCodeDetailSequence_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 3, 2, 1, 4),
    _SysRefCodeDetailSequence_Type()
)
sysRefCodeDetailSequence.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysRefCodeDetailSequence.setStatus("mandatory")
_SysRefCodeDetailDataString_Type = OctetString
_SysRefCodeDetailDataString_Object = MibTableColumn
sysRefCodeDetailDataString = _SysRefCodeDetailDataString_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 3, 2, 1, 5),
    _SysRefCodeDetailDataString_Type()
)
sysRefCodeDetailDataString.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysRefCodeDetailDataString.setStatus("mandatory")
_ServiceAdvisor_ObjectIdentity = ObjectIdentity
serviceAdvisor = _ServiceAdvisor_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4)
)
_AutoCallHomeSetup_ObjectIdentity = ObjectIdentity
autoCallHomeSetup = _AutoCallHomeSetup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 1)
)


class _AcceptLicenseAgreement_Type(Integer32):
    """Custom type acceptLicenseAgreement based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_AcceptLicenseAgreement_Type.__name__ = "Integer32"
_AcceptLicenseAgreement_Object = MibScalar
acceptLicenseAgreement = _AcceptLicenseAgreement_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 1, 1),
    _AcceptLicenseAgreement_Type()
)
acceptLicenseAgreement.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acceptLicenseAgreement.setStatus("mandatory")


class _ServiceAdvisorEnable_Type(Integer32):
    """Custom type serviceAdvisorEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_ServiceAdvisorEnable_Type.__name__ = "Integer32"
_ServiceAdvisorEnable_Object = MibScalar
serviceAdvisorEnable = _ServiceAdvisorEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 1, 2),
    _ServiceAdvisorEnable_Type()
)
serviceAdvisorEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceAdvisorEnable.setStatus("mandatory")
_ServiceSupportCenter_ObjectIdentity = ObjectIdentity
serviceSupportCenter = _ServiceSupportCenter_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 2)
)
_IbmSupportCenter_Type = OctetString
_IbmSupportCenter_Object = MibScalar
ibmSupportCenter = _IbmSupportCenter_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 2, 1),
    _IbmSupportCenter_Type()
)
ibmSupportCenter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ibmSupportCenter.setStatus("mandatory")
_ContactInformation_ObjectIdentity = ObjectIdentity
contactInformation = _ContactInformation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3)
)
_CompanyName_Type = OctetString
_CompanyName_Object = MibScalar
companyName = _CompanyName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 1),
    _CompanyName_Type()
)
companyName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    companyName.setStatus("mandatory")
_ContactName_Type = OctetString
_ContactName_Object = MibScalar
contactName = _ContactName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 2),
    _ContactName_Type()
)
contactName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    contactName.setStatus("mandatory")
_PhoneNumber_Type = OctetString
_PhoneNumber_Object = MibScalar
phoneNumber = _PhoneNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 3),
    _PhoneNumber_Type()
)
phoneNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    phoneNumber.setStatus("mandatory")
_EmailAddress_Type = OctetString
_EmailAddress_Object = MibScalar
emailAddress = _EmailAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 4),
    _EmailAddress_Type()
)
emailAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emailAddress.setStatus("mandatory")
_Address_Type = OctetString
_Address_Object = MibScalar
address = _Address_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 5),
    _Address_Type()
)
address.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    address.setStatus("mandatory")
_City_Type = OctetString
_City_Object = MibScalar
city = _City_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 6),
    _City_Type()
)
city.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    city.setStatus("mandatory")
_State_Type = OctetString
_State_Object = MibScalar
state = _State_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 7),
    _State_Type()
)
state.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    state.setStatus("mandatory")
_PostalCode_Type = OctetString
_PostalCode_Object = MibScalar
postalCode = _PostalCode_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 8),
    _PostalCode_Type()
)
postalCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    postalCode.setStatus("mandatory")
_PhoneNumberExt_Type = OctetString
_PhoneNumberExt_Object = MibScalar
phoneNumberExt = _PhoneNumberExt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 10),
    _PhoneNumberExt_Type()
)
phoneNumberExt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    phoneNumberExt.setStatus("mandatory")
_AltContactName_Type = OctetString
_AltContactName_Object = MibScalar
altContactName = _AltContactName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 11),
    _AltContactName_Type()
)
altContactName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    altContactName.setStatus("mandatory")
_AltPhoneNumber_Type = OctetString
_AltPhoneNumber_Object = MibScalar
altPhoneNumber = _AltPhoneNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 12),
    _AltPhoneNumber_Type()
)
altPhoneNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    altPhoneNumber.setStatus("mandatory")
_AltPhoneNumberExt_Type = OctetString
_AltPhoneNumberExt_Object = MibScalar
altPhoneNumberExt = _AltPhoneNumberExt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 13),
    _AltPhoneNumberExt_Type()
)
altPhoneNumberExt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    altPhoneNumberExt.setStatus("mandatory")
_AltEmailAddress_Type = OctetString
_AltEmailAddress_Object = MibScalar
altEmailAddress = _AltEmailAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 14),
    _AltEmailAddress_Type()
)
altEmailAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    altEmailAddress.setStatus("mandatory")
_MachineLocPhone_Type = OctetString
_MachineLocPhone_Object = MibScalar
machineLocPhone = _MachineLocPhone_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 15),
    _MachineLocPhone_Type()
)
machineLocPhone.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    machineLocPhone.setStatus("mandatory")
_HttpProxyConfig_ObjectIdentity = ObjectIdentity
httpProxyConfig = _HttpProxyConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 4)
)


class _HttpProxyEnable_Type(Integer32):
    """Custom type httpProxyEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_HttpProxyEnable_Type.__name__ = "Integer32"
_HttpProxyEnable_Object = MibScalar
httpProxyEnable = _HttpProxyEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 4, 1),
    _HttpProxyEnable_Type()
)
httpProxyEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    httpProxyEnable.setStatus("mandatory")
_HttpProxyLocation_Type = OctetString
_HttpProxyLocation_Object = MibScalar
httpProxyLocation = _HttpProxyLocation_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 4, 2),
    _HttpProxyLocation_Type()
)
httpProxyLocation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    httpProxyLocation.setStatus("mandatory")
_HttpProxyPort_Type = Integer32
_HttpProxyPort_Object = MibScalar
httpProxyPort = _HttpProxyPort_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 4, 3),
    _HttpProxyPort_Type()
)
httpProxyPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    httpProxyPort.setStatus("mandatory")
_HttpProxyUserName_Type = OctetString
_HttpProxyUserName_Object = MibScalar
httpProxyUserName = _HttpProxyUserName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 4, 4),
    _HttpProxyUserName_Type()
)
httpProxyUserName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    httpProxyUserName.setStatus("mandatory")
_HttpProxyPassword_Type = OctetString
_HttpProxyPassword_Object = MibScalar
httpProxyPassword = _HttpProxyPassword_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 4, 5),
    _HttpProxyPassword_Type()
)
httpProxyPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    httpProxyPassword.setStatus("mandatory")
_ActivityLogs_ObjectIdentity = ObjectIdentity
activityLogs = _ActivityLogs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 5)
)
_ActivityLogTable_Object = MibTable
activityLogTable = _ActivityLogTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 5, 1)
)
if mibBuilder.loadTexts:
    activityLogTable.setStatus("mandatory")
_ActivityLogEntry_Object = MibTableRow
activityLogEntry = _ActivityLogEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 5, 1, 1)
)
activityLogEntry.setIndexNames(
    (0, "BLADE-MIB", "activityLogIndex"),
)
if mibBuilder.loadTexts:
    activityLogEntry.setStatus("mandatory")
_ActivityLogIndex_Type = Integer32
_ActivityLogIndex_Object = MibTableColumn
activityLogIndex = _ActivityLogIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 5, 1, 1, 1),
    _ActivityLogIndex_Type()
)
activityLogIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    activityLogIndex.setStatus("mandatory")
_ActivityLogString_Type = OctetString
_ActivityLogString_Object = MibTableColumn
activityLogString = _ActivityLogString_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 5, 1, 1, 2),
    _ActivityLogString_Type()
)
activityLogString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    activityLogString.setStatus("mandatory")


class _ActivityLogAcknowledge_Type(Integer32):
    """Custom type activityLogAcknowledge based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_ActivityLogAcknowledge_Type.__name__ = "Integer32"
_ActivityLogAcknowledge_Object = MibTableColumn
activityLogAcknowledge = _ActivityLogAcknowledge_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 5, 1, 1, 3),
    _ActivityLogAcknowledge_Type()
)
activityLogAcknowledge.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    activityLogAcknowledge.setStatus("mandatory")
_ActivityLogAttribute_Type = OctetString
_ActivityLogAttribute_Object = MibTableColumn
activityLogAttribute = _ActivityLogAttribute_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 5, 1, 1, 4),
    _ActivityLogAttribute_Type()
)
activityLogAttribute.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    activityLogAttribute.setStatus("mandatory")
_AutoFTPSetup_ObjectIdentity = ObjectIdentity
autoFTPSetup = _AutoFTPSetup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 5)
)


class _AutoFTPCallMode_Type(Integer32):
    """Custom type autoFTPCallMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("ftp", 1),
          ("tftp", 2))
    )


_AutoFTPCallMode_Type.__name__ = "Integer32"
_AutoFTPCallMode_Object = MibScalar
autoFTPCallMode = _AutoFTPCallMode_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 5, 1),
    _AutoFTPCallMode_Type()
)
autoFTPCallMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    autoFTPCallMode.setStatus("mandatory")
_AutoFTPCallAddr_Type = OctetString
_AutoFTPCallAddr_Object = MibScalar
autoFTPCallAddr = _AutoFTPCallAddr_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 5, 2),
    _AutoFTPCallAddr_Type()
)
autoFTPCallAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    autoFTPCallAddr.setStatus("mandatory")
_AutoFTPCallPort_Type = Integer32
_AutoFTPCallPort_Object = MibScalar
autoFTPCallPort = _AutoFTPCallPort_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 5, 3),
    _AutoFTPCallPort_Type()
)
autoFTPCallPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    autoFTPCallPort.setStatus("mandatory")
_AutoFTPCallUserID_Type = OctetString
_AutoFTPCallUserID_Object = MibScalar
autoFTPCallUserID = _AutoFTPCallUserID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 5, 4),
    _AutoFTPCallUserID_Type()
)
autoFTPCallUserID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    autoFTPCallUserID.setStatus("mandatory")
_AutoFTPCallPassword_Type = OctetString
_AutoFTPCallPassword_Object = MibScalar
autoFTPCallPassword = _AutoFTPCallPassword_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 5, 5),
    _AutoFTPCallPassword_Type()
)
autoFTPCallPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    autoFTPCallPassword.setStatus("mandatory")
_CallHomeExclusionEvents_ObjectIdentity = ObjectIdentity
callHomeExclusionEvents = _CallHomeExclusionEvents_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 6)
)
_ReadCallHomeExclusionEventTable_Object = MibTable
readCallHomeExclusionEventTable = _ReadCallHomeExclusionEventTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 6, 1)
)
if mibBuilder.loadTexts:
    readCallHomeExclusionEventTable.setStatus("mandatory")
_ReadCallHomeExclusionEventEntry_Object = MibTableRow
readCallHomeExclusionEventEntry = _ReadCallHomeExclusionEventEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 6, 1, 1)
)
readCallHomeExclusionEventEntry.setIndexNames(
    (0, "BLADE-MIB", "readCallHomeExclusionEventIndex"),
)
if mibBuilder.loadTexts:
    readCallHomeExclusionEventEntry.setStatus("mandatory")
_ReadCallHomeExclusionEventIndex_Type = Integer32
_ReadCallHomeExclusionEventIndex_Object = MibTableColumn
readCallHomeExclusionEventIndex = _ReadCallHomeExclusionEventIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 6, 1, 1, 1),
    _ReadCallHomeExclusionEventIndex_Type()
)
readCallHomeExclusionEventIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    readCallHomeExclusionEventIndex.setStatus("mandatory")
_ReadCallHomeExclusionEventID_Type = OctetString
_ReadCallHomeExclusionEventID_Object = MibTableColumn
readCallHomeExclusionEventID = _ReadCallHomeExclusionEventID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 6, 1, 1, 2),
    _ReadCallHomeExclusionEventID_Type()
)
readCallHomeExclusionEventID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    readCallHomeExclusionEventID.setStatus("mandatory")
_AddCallHomeExclusionEvent_Type = OctetString
_AddCallHomeExclusionEvent_Object = MibScalar
addCallHomeExclusionEvent = _AddCallHomeExclusionEvent_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 6, 2),
    _AddCallHomeExclusionEvent_Type()
)
addCallHomeExclusionEvent.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    addCallHomeExclusionEvent.setStatus("mandatory")
_RmCallHomeExclusionEvent_Type = OctetString
_RmCallHomeExclusionEvent_Object = MibScalar
rmCallHomeExclusionEvent = _RmCallHomeExclusionEvent_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 6, 3),
    _RmCallHomeExclusionEvent_Type()
)
rmCallHomeExclusionEvent.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rmCallHomeExclusionEvent.setStatus("mandatory")


class _RmAllCallHomeExclusionEvent_Type(Integer32):
    """Custom type rmAllCallHomeExclusionEvent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_RmAllCallHomeExclusionEvent_Type.__name__ = "Integer32"
_RmAllCallHomeExclusionEvent_Object = MibScalar
rmAllCallHomeExclusionEvent = _RmAllCallHomeExclusionEvent_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 6, 4),
    _RmAllCallHomeExclusionEvent_Type()
)
rmAllCallHomeExclusionEvent.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rmAllCallHomeExclusionEvent.setStatus("mandatory")
_Scaling_ObjectIdentity = ObjectIdentity
scaling = _Scaling_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24)
)
_ScalableComplexTable_Object = MibTable
scalableComplexTable = _ScalableComplexTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 1)
)
if mibBuilder.loadTexts:
    scalableComplexTable.setStatus("mandatory")
_ScalableComplexEntry_Object = MibTableRow
scalableComplexEntry = _ScalableComplexEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 1, 1)
)
scalableComplexEntry.setIndexNames(
    (0, "BLADE-MIB", "scalableComplexIdentifier"),
)
if mibBuilder.loadTexts:
    scalableComplexEntry.setStatus("mandatory")
_ScalableComplexIdentifier_Type = Integer32
_ScalableComplexIdentifier_Object = MibTableColumn
scalableComplexIdentifier = _ScalableComplexIdentifier_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 1, 1, 1),
    _ScalableComplexIdentifier_Type()
)
scalableComplexIdentifier.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scalableComplexIdentifier.setStatus("mandatory")
_ScalableComplexNumPartitions_Type = Integer32
_ScalableComplexNumPartitions_Object = MibTableColumn
scalableComplexNumPartitions = _ScalableComplexNumPartitions_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 1, 1, 2),
    _ScalableComplexNumPartitions_Type()
)
scalableComplexNumPartitions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scalableComplexNumPartitions.setStatus("mandatory")
_ScalableComplexNumNodes_Type = Integer32
_ScalableComplexNumNodes_Object = MibTableColumn
scalableComplexNumNodes = _ScalableComplexNumNodes_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 1, 1, 3),
    _ScalableComplexNumNodes_Type()
)
scalableComplexNumNodes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scalableComplexNumNodes.setStatus("mandatory")
_ScalableComplexPartStartSlot_Type = Integer32
_ScalableComplexPartStartSlot_Object = MibTableColumn
scalableComplexPartStartSlot = _ScalableComplexPartStartSlot_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 1, 1, 4),
    _ScalableComplexPartStartSlot_Type()
)
scalableComplexPartStartSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scalableComplexPartStartSlot.setStatus("mandatory")
_ScalableComplexPartNumNodes_Type = Integer32
_ScalableComplexPartNumNodes_Object = MibTableColumn
scalableComplexPartNumNodes = _ScalableComplexPartNumNodes_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 1, 1, 5),
    _ScalableComplexPartNumNodes_Type()
)
scalableComplexPartNumNodes.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scalableComplexPartNumNodes.setStatus("mandatory")


class _ScalableComplexAction_Type(Integer32):
    """Custom type scalableComplexAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("autocreate", 2),
          ("create", 3))
    )


_ScalableComplexAction_Type.__name__ = "Integer32"
_ScalableComplexAction_Object = MibTableColumn
scalableComplexAction = _ScalableComplexAction_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 1, 1, 6),
    _ScalableComplexAction_Type()
)
scalableComplexAction.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    scalableComplexAction.setStatus("mandatory")
_ScalableComplexPartitionTable_Object = MibTable
scalableComplexPartitionTable = _ScalableComplexPartitionTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 2)
)
if mibBuilder.loadTexts:
    scalableComplexPartitionTable.setStatus("mandatory")
_ScalableComplexPartitionEntry_Object = MibTableRow
scalableComplexPartitionEntry = _ScalableComplexPartitionEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 2, 1)
)
scalableComplexPartitionEntry.setIndexNames(
    (0, "BLADE-MIB", "scalableComplexId"),
    (0, "BLADE-MIB", "scalableComplexPartitionIdentifier"),
)
if mibBuilder.loadTexts:
    scalableComplexPartitionEntry.setStatus("mandatory")
_ScalableComplexId_Type = Integer32
_ScalableComplexId_Object = MibTableColumn
scalableComplexId = _ScalableComplexId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 2, 1, 1),
    _ScalableComplexId_Type()
)
scalableComplexId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scalableComplexId.setStatus("mandatory")
_ScalableComplexPartitionIdentifier_Type = Integer32
_ScalableComplexPartitionIdentifier_Object = MibTableColumn
scalableComplexPartitionIdentifier = _ScalableComplexPartitionIdentifier_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 2, 1, 2),
    _ScalableComplexPartitionIdentifier_Type()
)
scalableComplexPartitionIdentifier.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scalableComplexPartitionIdentifier.setStatus("mandatory")


class _ScalableComplexPartitionMode_Type(Integer32):
    """Custom type scalableComplexPartitionMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("partition", 1),
          ("standalone", 2))
    )


_ScalableComplexPartitionMode_Type.__name__ = "Integer32"
_ScalableComplexPartitionMode_Object = MibTableColumn
scalableComplexPartitionMode = _ScalableComplexPartitionMode_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 2, 1, 3),
    _ScalableComplexPartitionMode_Type()
)
scalableComplexPartitionMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scalableComplexPartitionMode.setStatus("mandatory")
_ScalableComplexPartitionNumNodes_Type = Integer32
_ScalableComplexPartitionNumNodes_Object = MibTableColumn
scalableComplexPartitionNumNodes = _ScalableComplexPartitionNumNodes_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 2, 1, 4),
    _ScalableComplexPartitionNumNodes_Type()
)
scalableComplexPartitionNumNodes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scalableComplexPartitionNumNodes.setStatus("mandatory")


class _ScalableComplexPartitionStatus_Type(Integer32):
    """Custom type scalableComplexPartitionStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("poweredoff", 1),
          ("poweredon", 2),
          ("resetting", 3),
          ("invalid", 4))
    )


_ScalableComplexPartitionStatus_Type.__name__ = "Integer32"
_ScalableComplexPartitionStatus_Object = MibTableColumn
scalableComplexPartitionStatus = _ScalableComplexPartitionStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 2, 1, 5),
    _ScalableComplexPartitionStatus_Type()
)
scalableComplexPartitionStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scalableComplexPartitionStatus.setStatus("mandatory")


class _ScalableComplexPartitionAction_Type(Integer32):
    """Custom type scalableComplexPartitionAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("delete", 1),
          ("poweron", 2),
          ("poweroff", 3),
          ("powercycle", 4))
    )


_ScalableComplexPartitionAction_Type.__name__ = "Integer32"
_ScalableComplexPartitionAction_Object = MibTableColumn
scalableComplexPartitionAction = _ScalableComplexPartitionAction_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 2, 1, 6),
    _ScalableComplexPartitionAction_Type()
)
scalableComplexPartitionAction.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    scalableComplexPartitionAction.setStatus("mandatory")
_ScalableComplexNodeTable_Object = MibTable
scalableComplexNodeTable = _ScalableComplexNodeTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 3)
)
if mibBuilder.loadTexts:
    scalableComplexNodeTable.setStatus("mandatory")
_ScalableComplexNodeEntry_Object = MibTableRow
scalableComplexNodeEntry = _ScalableComplexNodeEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 3, 1)
)
scalableComplexNodeEntry.setIndexNames(
    (0, "BLADE-MIB", "scalableComplexNodeSlot"),
)
if mibBuilder.loadTexts:
    scalableComplexNodeEntry.setStatus("mandatory")
_ScalableComplexNodeSlot_Type = Integer32
_ScalableComplexNodeSlot_Object = MibTableColumn
scalableComplexNodeSlot = _ScalableComplexNodeSlot_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 3, 1, 1),
    _ScalableComplexNodeSlot_Type()
)
scalableComplexNodeSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scalableComplexNodeSlot.setStatus("mandatory")


class _ScalableComplexNodeName_Type(OctetString):
    """Custom type scalableComplexNodeName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(256, 256),
    )
    fixed_length = 256


_ScalableComplexNodeName_Type.__name__ = "OctetString"
_ScalableComplexNodeName_Object = MibTableColumn
scalableComplexNodeName = _ScalableComplexNodeName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 3, 1, 2),
    _ScalableComplexNodeName_Type()
)
scalableComplexNodeName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scalableComplexNodeName.setStatus("mandatory")


class _ScalableComplexNodeType_Type(Integer32):
    """Custom type scalableComplexNodeType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("processor", 1),
          ("memory", 2),
          ("io", 3))
    )


_ScalableComplexNodeType_Type.__name__ = "Integer32"
_ScalableComplexNodeType_Object = MibTableColumn
scalableComplexNodeType = _ScalableComplexNodeType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 3, 1, 3),
    _ScalableComplexNodeType_Type()
)
scalableComplexNodeType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scalableComplexNodeType.setStatus("mandatory")


class _ScalableComplexNodeResources_Type(OctetString):
    """Custom type scalableComplexNodeResources based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(256, 256),
    )
    fixed_length = 256


_ScalableComplexNodeResources_Type.__name__ = "OctetString"
_ScalableComplexNodeResources_Object = MibTableColumn
scalableComplexNodeResources = _ScalableComplexNodeResources_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 3, 1, 4),
    _ScalableComplexNodeResources_Type()
)
scalableComplexNodeResources.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scalableComplexNodeResources.setStatus("mandatory")


class _ScalableComplexNodeRole_Type(Integer32):
    """Custom type scalableComplexNodeRole based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("primary", 1),
          ("secondary", 2),
          ("unassigned", 255))
    )


_ScalableComplexNodeRole_Type.__name__ = "Integer32"
_ScalableComplexNodeRole_Object = MibTableColumn
scalableComplexNodeRole = _ScalableComplexNodeRole_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 3, 1, 5),
    _ScalableComplexNodeRole_Type()
)
scalableComplexNodeRole.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scalableComplexNodeRole.setStatus("mandatory")


class _ScalableComplexNodeState_Type(Integer32):
    """Custom type scalableComplexNodeState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("poweredoff", 1),
          ("poweredon", 2),
          ("resetting", 3))
    )


_ScalableComplexNodeState_Type.__name__ = "Integer32"
_ScalableComplexNodeState_Object = MibTableColumn
scalableComplexNodeState = _ScalableComplexNodeState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 3, 1, 6),
    _ScalableComplexNodeState_Type()
)
scalableComplexNodeState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scalableComplexNodeState.setStatus("mandatory")


class _ScalableComplexNodeUUID_Type(OctetString):
    """Custom type scalableComplexNodeUUID based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(256, 256),
    )
    fixed_length = 256


_ScalableComplexNodeUUID_Type.__name__ = "OctetString"
_ScalableComplexNodeUUID_Object = MibTableColumn
scalableComplexNodeUUID = _ScalableComplexNodeUUID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 3, 1, 7),
    _ScalableComplexNodeUUID_Type()
)
scalableComplexNodeUUID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scalableComplexNodeUUID.setStatus("mandatory")


class _ScalableComplexNodeSerialNum_Type(OctetString):
    """Custom type scalableComplexNodeSerialNum based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(256, 256),
    )
    fixed_length = 256


_ScalableComplexNodeSerialNum_Type.__name__ = "OctetString"
_ScalableComplexNodeSerialNum_Object = MibTableColumn
scalableComplexNodeSerialNum = _ScalableComplexNodeSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 3, 1, 8),
    _ScalableComplexNodeSerialNum_Type()
)
scalableComplexNodeSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scalableComplexNodeSerialNum.setStatus("mandatory")
_ScalableComplexNodeNumPorts_Type = Integer32
_ScalableComplexNodeNumPorts_Object = MibTableColumn
scalableComplexNodeNumPorts = _ScalableComplexNodeNumPorts_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 3, 1, 9),
    _ScalableComplexNodeNumPorts_Type()
)
scalableComplexNodeNumPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scalableComplexNodeNumPorts.setStatus("mandatory")
_ScalableComplexNodeComplexID_Type = Integer32
_ScalableComplexNodeComplexID_Object = MibTableColumn
scalableComplexNodeComplexID = _ScalableComplexNodeComplexID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 3, 1, 10),
    _ScalableComplexNodeComplexID_Type()
)
scalableComplexNodeComplexID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scalableComplexNodeComplexID.setStatus("mandatory")
_ScalableComplexNodePartitionID_Type = Integer32
_ScalableComplexNodePartitionID_Object = MibTableColumn
scalableComplexNodePartitionID = _ScalableComplexNodePartitionID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 3, 1, 11),
    _ScalableComplexNodePartitionID_Type()
)
scalableComplexNodePartitionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scalableComplexNodePartitionID.setStatus("mandatory")
_ScalableComplexNodeLogicalID_Type = Integer32
_ScalableComplexNodeLogicalID_Object = MibTableColumn
scalableComplexNodeLogicalID = _ScalableComplexNodeLogicalID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 3, 1, 12),
    _ScalableComplexNodeLogicalID_Type()
)
scalableComplexNodeLogicalID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scalableComplexNodeLogicalID.setStatus("mandatory")


class _ScalableComplexNodeAction_Type(Integer32):
    """Custom type scalableComplexNodeAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("poweroff", 1),
          ("poweron", 2))
    )


_ScalableComplexNodeAction_Type.__name__ = "Integer32"
_ScalableComplexNodeAction_Object = MibTableColumn
scalableComplexNodeAction = _ScalableComplexNodeAction_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 3, 1, 14),
    _ScalableComplexNodeAction_Type()
)
scalableComplexNodeAction.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    scalableComplexNodeAction.setStatus("mandatory")
_ScalableComplexNodePortTable_Object = MibTable
scalableComplexNodePortTable = _ScalableComplexNodePortTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 4)
)
if mibBuilder.loadTexts:
    scalableComplexNodePortTable.setStatus("mandatory")
_ScalableComplexNodePortEntry_Object = MibTableRow
scalableComplexNodePortEntry = _ScalableComplexNodePortEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 4, 1)
)
scalableComplexNodePortEntry.setIndexNames(
    (0, "BLADE-MIB", "scalableComplexNodePortSlot"),
    (0, "BLADE-MIB", "scalableComplexNodePortNum"),
)
if mibBuilder.loadTexts:
    scalableComplexNodePortEntry.setStatus("mandatory")
_ScalableComplexNodePortSlot_Type = Integer32
_ScalableComplexNodePortSlot_Object = MibTableColumn
scalableComplexNodePortSlot = _ScalableComplexNodePortSlot_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 4, 1, 1),
    _ScalableComplexNodePortSlot_Type()
)
scalableComplexNodePortSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scalableComplexNodePortSlot.setStatus("mandatory")
_ScalableComplexNodePortNum_Type = Integer32
_ScalableComplexNodePortNum_Object = MibTableColumn
scalableComplexNodePortNum = _ScalableComplexNodePortNum_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 4, 1, 2),
    _ScalableComplexNodePortNum_Type()
)
scalableComplexNodePortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scalableComplexNodePortNum.setStatus("mandatory")
_ScalableComplexNodePortRemChkSum_Type = Integer32
_ScalableComplexNodePortRemChkSum_Object = MibTableColumn
scalableComplexNodePortRemChkSum = _ScalableComplexNodePortRemChkSum_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 4, 1, 3),
    _ScalableComplexNodePortRemChkSum_Type()
)
scalableComplexNodePortRemChkSum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scalableComplexNodePortRemChkSum.setStatus("mandatory")
_ScalableComplexNodePortRemNum_Type = Integer32
_ScalableComplexNodePortRemNum_Object = MibTableColumn
scalableComplexNodePortRemNum = _ScalableComplexNodePortRemNum_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 4, 1, 4),
    _ScalableComplexNodePortRemNum_Type()
)
scalableComplexNodePortRemNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scalableComplexNodePortRemNum.setStatus("mandatory")


class _ScalableComplexNodePortStatus_Type(Integer32):
    """Custom type scalableComplexNodePortStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2),
          ("unknown", 255))
    )


_ScalableComplexNodePortStatus_Type.__name__ = "Integer32"
_ScalableComplexNodePortStatus_Object = MibTableColumn
scalableComplexNodePortStatus = _ScalableComplexNodePortStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 4, 1, 5),
    _ScalableComplexNodePortStatus_Type()
)
scalableComplexNodePortStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scalableComplexNodePortStatus.setStatus("mandatory")


class _ScalableComplexNodePortType_Type(Integer32):
    """Custom type scalableComplexNodePortType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("qpi", 1),
          ("exa", 2),
          ("unknown", 255))
    )


_ScalableComplexNodePortType_Type.__name__ = "Integer32"
_ScalableComplexNodePortType_Object = MibTableColumn
scalableComplexNodePortType = _ScalableComplexNodePortType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 4, 1, 6),
    _ScalableComplexNodePortType_Type()
)
scalableComplexNodePortType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scalableComplexNodePortType.setStatus("mandatory")

# Managed Objects groups


# Notification objects


# Notifications groups


# Agent capabilities


# Module compliance


# Export all MIB objects to the MIB builder

mibBuilder.exportSymbols(
    "BLADE-MIB",
    **{"InetAddressIPv6": InetAddressIPv6,
       "EntryStatus": EntryStatus,
       "ibm": ibm,
       "ibmAgents": ibmAgents,
       "netfinitySupportProcessorAgent": netfinitySupportProcessorAgent,
       "bladeCenterSnmpMIB": bladeCenterSnmpMIB,
       "monitors": monitors,
       "temperature": temperature,
       "planarTemp": planarTemp,
       "mmTemp": mmTemp,
       "ambientTemp": ambientTemp,
       "frontPanelTemp": frontPanelTemp,
       "frontPanel2Temp": frontPanel2Temp,
       "voltage": voltage,
       "planarVolt": planarVolt,
       "plus5Volt": plus5Volt,
       "plus3Pt3Volt": plus3Pt3Volt,
       "plus12Volt": plus12Volt,
       "minus5Volt": minus5Volt,
       "plus2Pt5Volt": plus2Pt5Volt,
       "plus1Pt8Volt": plus1Pt8Volt,
       "blowers": blowers,
       "blower1speed": blower1speed,
       "blower2speed": blower2speed,
       "blower3speed": blower3speed,
       "blower4speed": blower4speed,
       "blower1State": blower1State,
       "blower2State": blower2State,
       "blower3State": blower3State,
       "blower4State": blower4State,
       "blower1speedRPM": blower1speedRPM,
       "blower2speedRPM": blower2speedRPM,
       "blower3speedRPM": blower3speedRPM,
       "blower4speedRPM": blower4speedRPM,
       "blower1ControllerState": blower1ControllerState,
       "blower2ControllerState": blower2ControllerState,
       "blower3ControllerState": blower3ControllerState,
       "blower4ControllerState": blower4ControllerState,
       "blower1ExhaustTemp": blower1ExhaustTemp,
       "blower2ExhaustTemp": blower2ExhaustTemp,
       "blower3ExhaustTemp": blower3ExhaustTemp,
       "blower4ExhaustTemp": blower4ExhaustTemp,
       "powerModuleHealth": powerModuleHealth,
       "powerModuleHealthTable": powerModuleHealthTable,
       "powerModuleHealthEntry": powerModuleHealthEntry,
       "powerModuleIndex": powerModuleIndex,
       "powerModuleExists": powerModuleExists,
       "powerModuleState": powerModuleState,
       "powerModuleDetails": powerModuleDetails,
       "spStatus": spStatus,
       "mmBistAndChassisStatus": mmBistAndChassisStatus,
       "bistSdram": bistSdram,
       "bistRs485Port1": bistRs485Port1,
       "bistRs485Port2": bistRs485Port2,
       "bistNvram": bistNvram,
       "bistRtc": bistRtc,
       "bistLocalI2CBus": bistLocalI2CBus,
       "bistPrimaryMainAppFlashImage": bistPrimaryMainAppFlashImage,
       "bistSecondaryMainAppFlashImage": bistSecondaryMainAppFlashImage,
       "bistBootRomFlashImage": bistBootRomFlashImage,
       "bistEthernetPort1": bistEthernetPort1,
       "bistEthernetPort2": bistEthernetPort2,
       "bistInternalPCIBus": bistInternalPCIBus,
       "bistExternalI2CDevices": bistExternalI2CDevices,
       "bistUSBController": bistUSBController,
       "bistVideoCompressorBoard": bistVideoCompressorBoard,
       "bistRemoteVideo": bistRemoteVideo,
       "bistPrimaryBus": bistPrimaryBus,
       "bistInternalEthernetSwitch": bistInternalEthernetSwitch,
       "bistVideoCapture": bistVideoCapture,
       "bistUSBKeyboardMouseEmulation": bistUSBKeyboardMouseEmulation,
       "bistUSBMassStorageEmulation": bistUSBMassStorageEmulation,
       "bistUSBKeyboardMouseFirmware": bistUSBKeyboardMouseFirmware,
       "bistUSBMassStorageFirmware": bistUSBMassStorageFirmware,
       "bistPrimaryCore": bistPrimaryCore,
       "bistSecondaryCore": bistSecondaryCore,
       "bistInternalIOExpander": bistInternalIOExpander,
       "bistRemoteControlFirmware": bistRemoteControlFirmware,
       "bistPhysicalNetworkLink": bistPhysicalNetworkLink,
       "bistLogicalNetworkLink": bistLogicalNetworkLink,
       "bistBladesInstalled": bistBladesInstalled,
       "bistBladesCommunicating": bistBladesCommunicating,
       "bistBlowersInstalled": bistBlowersInstalled,
       "bistBlowersFunctional": bistBlowersFunctional,
       "bistMediaTrayInstalled": bistMediaTrayInstalled,
       "bistMediaTrayCommunicating": bistMediaTrayCommunicating,
       "bistOtherMMInstalled": bistOtherMMInstalled,
       "bistOtherMMCommunicating": bistOtherMMCommunicating,
       "bistPowerModulesInstalled": bistPowerModulesInstalled,
       "bistPowerModulesFunctional": bistPowerModulesFunctional,
       "bistSwitchModulesInstalled": bistSwitchModulesInstalled,
       "bistSwitchModulesCommunicating": bistSwitchModulesCommunicating,
       "bistLastUpdate": bistLastUpdate,
       "rmmBistAndChassisStatus": rmmBistAndChassisStatus,
       "rbistRs485Port1": rbistRs485Port1,
       "rbistRs485Port2": rbistRs485Port2,
       "rbistRtc": rbistRtc,
       "rbistLocalI2CBus": rbistLocalI2CBus,
       "rbistPrimaryMainAppFlashImage": rbistPrimaryMainAppFlashImage,
       "rbistSecondaryMainAppFlashImage": rbistSecondaryMainAppFlashImage,
       "rbistBootRomFlashImage": rbistBootRomFlashImage,
       "rbistEthernetPort1": rbistEthernetPort1,
       "rbistExternalI2CDevices": rbistExternalI2CDevices,
       "rbistInternalEthernetSwitch": rbistInternalEthernetSwitch,
       "rbistVideoCapture": rbistVideoCapture,
       "rbistUSBKeyboardMouseEmulation": rbistUSBKeyboardMouseEmulation,
       "rbistUSBMassStorageEmulation": rbistUSBMassStorageEmulation,
       "rbistUSBKeyboardMouseFirmware": rbistUSBKeyboardMouseFirmware,
       "rbistUSBMassStorageFirmware": rbistUSBMassStorageFirmware,
       "rbistPrimaryCore": rbistPrimaryCore,
       "rbistSecondaryCore": rbistSecondaryCore,
       "rbistInternalIOExpander": rbistInternalIOExpander,
       "rbistRemoteControlFirmware": rbistRemoteControlFirmware,
       "rbistPhysicalNetworkLink": rbistPhysicalNetworkLink,
       "rbistLogicalNetworkLink": rbistLogicalNetworkLink,
       "rbistBladesInstalled": rbistBladesInstalled,
       "rbistBladesCommunicating": rbistBladesCommunicating,
       "rbistBlowersInstalled": rbistBlowersInstalled,
       "rbistBlowersFunctional": rbistBlowersFunctional,
       "rbistMediaTrayInstalled": rbistMediaTrayInstalled,
       "rbistMediaTrayCommunicating": rbistMediaTrayCommunicating,
       "rbistOtherMMInstalled": rbistOtherMMInstalled,
       "rbistOtherMMCommunicating": rbistOtherMMCommunicating,
       "rbistPowerModulesInstalled": rbistPowerModulesInstalled,
       "rbistPowerModulesFunctional": rbistPowerModulesFunctional,
       "rbistSwitchModulesInstalled": rbistSwitchModulesInstalled,
       "rbistSwitchModulesCommunicating": rbistSwitchModulesCommunicating,
       "rbistUpdateTime": rbistUpdateTime,
       "rbistLastUpdatePrimary": rbistLastUpdatePrimary,
       "fanPack": fanPack,
       "fanPackTable": fanPackTable,
       "fanPackEntry": fanPackEntry,
       "fanPackIndex": fanPackIndex,
       "fanPackExists": fanPackExists,
       "fanPackState": fanPackState,
       "fanPackFanCount": fanPackFanCount,
       "fanPackAverageSpeed": fanPackAverageSpeed,
       "fanPackAverageSpeedRPM": fanPackAverageSpeedRPM,
       "fanPackControllerState": fanPackControllerState,
       "systemHealth": systemHealth,
       "systemHealthStat": systemHealthStat,
       "systemHealthSummaryTable": systemHealthSummaryTable,
       "systemHealthSummaryEntry": systemHealthSummaryEntry,
       "systemHealthSummaryIndex": systemHealthSummaryIndex,
       "systemHealthSummarySeverity": systemHealthSummarySeverity,
       "systemHealthSummaryDescription": systemHealthSummaryDescription,
       "systemHealthSummaryDateTime": systemHealthSummaryDateTime,
       "leds": leds,
       "frontPanelLEDs": frontPanelLEDs,
       "systemErrorLED": systemErrorLED,
       "informationLED": informationLED,
       "temperatureLED": temperatureLED,
       "identityLED": identityLED,
       "bladeLEDs": bladeLEDs,
       "bladeLEDsTable": bladeLEDsTable,
       "bladeLEDsEntry": bladeLEDsEntry,
       "ledBladeIndex": ledBladeIndex,
       "ledBladeId": ledBladeId,
       "ledBladeExists": ledBladeExists,
       "ledBladePowerState": ledBladePowerState,
       "ledBladeHealthState": ledBladeHealthState,
       "ledBladeName": ledBladeName,
       "ledBladeSystemError": ledBladeSystemError,
       "ledBladeInformation": ledBladeInformation,
       "ledBladeKVM": ledBladeKVM,
       "ledBladeMediaTray": ledBladeMediaTray,
       "ledBladeIdentity": ledBladeIdentity,
       "bladeLEDsDetailsTable": bladeLEDsDetailsTable,
       "bladeLEDsDetailsEntry": bladeLEDsDetailsEntry,
       "ledIndex": ledIndex,
       "ledBladeBayNumber": ledBladeBayNumber,
       "ledBladeComponentType": ledBladeComponentType,
       "ledBladeLabel": ledBladeLabel,
       "ledBladeState": ledBladeState,
       "ledBladeLocation": ledBladeLocation,
       "telcoPanelLEDs": telcoPanelLEDs,
       "criticalLED": criticalLED,
       "majorLED": majorLED,
       "minorLED": minorLED,
       "telcoIdentityLED": telcoIdentityLED,
       "telcoColorSel": telcoColorSel,
       "criticalityAssertionMode": criticalityAssertionMode,
       "smLEDs": smLEDs,
       "smLEDsTable": smLEDsTable,
       "smLEDsEntry": smLEDsEntry,
       "ledSMIndex": ledSMIndex,
       "ledSMLEDs": ledSMLEDs,
       "blowerLEDs": blowerLEDs,
       "blowerLEDsTable": blowerLEDsTable,
       "blowerLEDsEntry": blowerLEDsEntry,
       "ledBlowerIndex": ledBlowerIndex,
       "ledBlowerId": ledBlowerId,
       "ledBlowerExists": ledBlowerExists,
       "ledBlowerError": ledBlowerError,
       "fanPackLEDs": fanPackLEDs,
       "fanPackLEDsTable": fanPackLEDsTable,
       "fanPackLEDsEntry": fanPackLEDsEntry,
       "ledFanPackIndex": ledFanPackIndex,
       "ledFanPackId": ledFanPackId,
       "ledFanPackExists": ledFanPackExists,
       "ledFanPackError": ledFanPackError,
       "mtStatusLEDs": mtStatusLEDs,
       "mtStatusLEDsTable": mtStatusLEDsTable,
       "mtStatusLEDsEntry": mtStatusLEDsEntry,
       "ledMediaTrayIndex": ledMediaTrayIndex,
       "ledMediaTrayId": ledMediaTrayId,
       "ledMediaTrayExists": ledMediaTrayExists,
       "ledMediaTrayFault": ledMediaTrayFault,
       "tapStatusLEDs": tapStatusLEDs,
       "tapExists": tapExists,
       "tapFRRLED": tapFRRLED,
       "tapFaultLED": tapFaultLED,
       "ncStatusLEDs": ncStatusLEDs,
       "ncStatusLEDsTable": ncStatusLEDsTable,
       "ncStatusLEDsEntry": ncStatusLEDsEntry,
       "ledNetworkClockIndex": ledNetworkClockIndex,
       "ledNetworkClockId": ledNetworkClockId,
       "ledNetworkClockExists": ledNetworkClockExists,
       "ledNetworkClockFRR": ledNetworkClockFRR,
       "ledNetworkClockFault": ledNetworkClockFault,
       "mxStatusLEDs": mxStatusLEDs,
       "mxStatusLEDsTable": mxStatusLEDsTable,
       "mxStatusLEDsEntry": mxStatusLEDsEntry,
       "ledMuxIndex": ledMuxIndex,
       "ledMuxId": ledMuxId,
       "ledMuxExists": ledMuxExists,
       "ledMuxFRR": ledMuxFRR,
       "ledMuxFault": ledMuxFault,
       "storageLEDs": storageLEDs,
       "storageLEDsTable": storageLEDsTable,
       "storageLEDsEntry": storageLEDsEntry,
       "ledStorageIndex": ledStorageIndex,
       "ledStorageId": ledStorageId,
       "ledStorageExists": ledStorageExists,
       "ledStorageError": ledStorageError,
       "telcoSystemHealth": telcoSystemHealth,
       "telcoSystemHealthStat": telcoSystemHealthStat,
       "telcoSystemHealthSummaryTable": telcoSystemHealthSummaryTable,
       "telcoSystemHealthSummaryEntry": telcoSystemHealthSummaryEntry,
       "telcoSystemHealthSummaryIndex": telcoSystemHealthSummaryIndex,
       "telcoSystemHealthSummarySeverity": telcoSystemHealthSummarySeverity,
       "telcoSystemHealthSummaryDescription": telcoSystemHealthSummaryDescription,
       "telcoSystemHealthSummaryEventName": telcoSystemHealthSummaryEventName,
       "telcoSystemHealthSummaryEventKeyID": telcoSystemHealthSummaryEventKeyID,
       "telcoSystemHealthSummaryAcknowledge": telcoSystemHealthSummaryAcknowledge,
       "telcoSystemHealthSummaryAssertTime": telcoSystemHealthSummaryAssertTime,
       "fuelGauge": fuelGauge,
       "fuelGaugeInformation": fuelGaugeInformation,
       "fuelGaugeTable": fuelGaugeTable,
       "fuelGaugeEntry": fuelGaugeEntry,
       "fuelGaugeIndex": fuelGaugeIndex,
       "fuelGaugePowerDomainNumber": fuelGaugePowerDomainNumber,
       "fuelGaugeStatus": fuelGaugeStatus,
       "fuelGaugeFirstPowerModule": fuelGaugeFirstPowerModule,
       "fuelGaugeSecondPowerModule": fuelGaugeSecondPowerModule,
       "fuelGaugePowerManagementPolicySetting": fuelGaugePowerManagementPolicySetting,
       "fuelGaugeTotalPower": fuelGaugeTotalPower,
       "fuelGaugeAllocatedPower": fuelGaugeAllocatedPower,
       "fuelGaugeRemainingPower": fuelGaugeRemainingPower,
       "fuelGaugePowerInUsed": fuelGaugePowerInUsed,
       "powerDomain1": powerDomain1,
       "powerDomain1Table": powerDomain1Table,
       "powerDomain1Entry": powerDomain1Entry,
       "pd1Index": pd1Index,
       "pd1BayNumber": pd1BayNumber,
       "pd1BladePrimarySlot": pd1BladePrimarySlot,
       "pd1ModuleStatus": pd1ModuleStatus,
       "pd1ModuleName": pd1ModuleName,
       "pd1ModuleState": pd1ModuleState,
       "pd1ModuleAllocatedPowerCurrent": pd1ModuleAllocatedPowerCurrent,
       "pd1ModuleAllocatedPowerMax": pd1ModuleAllocatedPowerMax,
       "pd1ModuleAllocatedPowerMin": pd1ModuleAllocatedPowerMin,
       "pd1ModuleCPUDutyCycles": pd1ModuleCPUDutyCycles,
       "pd1ModuleThrottle": pd1ModuleThrottle,
       "pd1ModulePowerCapabilities": pd1ModulePowerCapabilities,
       "pd1ModuleMeasuredOrStatic": pd1ModuleMeasuredOrStatic,
       "powerDomain1PowerTrending": powerDomain1PowerTrending,
       "pd1PowerTrendingPeriod": pd1PowerTrendingPeriod,
       "pd1PowerTrendingSampleTable": pd1PowerTrendingSampleTable,
       "pd1PowerTrendingSampleEntry": pd1PowerTrendingSampleEntry,
       "pd1PowerTrendingSampleIndex": pd1PowerTrendingSampleIndex,
       "pd1PowerTrendingSampleTimeStamp": pd1PowerTrendingSampleTimeStamp,
       "pd1PowerTrendingSampleAve": pd1PowerTrendingSampleAve,
       "powerDomain2": powerDomain2,
       "powerDomain2Table": powerDomain2Table,
       "powerDomain2Entry": powerDomain2Entry,
       "pd2Index": pd2Index,
       "pd2BayNumber": pd2BayNumber,
       "pd2BladePrimarySlot": pd2BladePrimarySlot,
       "pd2ModuleStatus": pd2ModuleStatus,
       "pd2ModuleName": pd2ModuleName,
       "pd2ModuleState": pd2ModuleState,
       "pd2ModuleAllocatedPowerCurrent": pd2ModuleAllocatedPowerCurrent,
       "pd2ModuleAllocatedPowerMax": pd2ModuleAllocatedPowerMax,
       "pd2ModuleAllocatedPowerMin": pd2ModuleAllocatedPowerMin,
       "pd2ModuleCPUDutyCycles": pd2ModuleCPUDutyCycles,
       "pd2ModuleThrottle": pd2ModuleThrottle,
       "pd2ModulePowerCapabilities": pd2ModulePowerCapabilities,
       "pd2ModuleMeasuredOrStatic": pd2ModuleMeasuredOrStatic,
       "powerDomain2PowerTrending": powerDomain2PowerTrending,
       "pd2PowerTrendingPeriod": pd2PowerTrendingPeriod,
       "pd2PowerTrendingSampleTable": pd2PowerTrendingSampleTable,
       "pd2PowerTrendingSampleEntry": pd2PowerTrendingSampleEntry,
       "pd2PowerTrendingSampleIndex": pd2PowerTrendingSampleIndex,
       "pd2PowerTrendingSampleTimeStamp": pd2PowerTrendingSampleTimeStamp,
       "pd2PowerTrendingSampleAve": pd2PowerTrendingSampleAve,
       "moduleInformation": moduleInformation,
       "bladeDetails": bladeDetails,
       "bladeDetailsTable": bladeDetailsTable,
       "bladeDetailsEntry": bladeDetailsEntry,
       "bladeDetailsIndex": bladeDetailsIndex,
       "bladeDetailsId": bladeDetailsId,
       "bladeDetailsMaxPowerConfig": bladeDetailsMaxPowerConfig,
       "bladeDetailsEffectiveClockRate": bladeDetailsEffectiveClockRate,
       "bladeDetailsMaximumClockRate": bladeDetailsMaximumClockRate,
       "bladeDetailsPowerSaverMode": bladeDetailsPowerSaverMode,
       "bladeDetailsDynamicPowerSaver": bladeDetailsDynamicPowerSaver,
       "bladeDetailsDynamicPowerFavorPerformanceOverPower": bladeDetailsDynamicPowerFavorPerformanceOverPower,
       "bladeDetailsPowerControl": bladeDetailsPowerControl,
       "bladePowerTrending": bladePowerTrending,
       "bladePowerTrendingPeriod": bladePowerTrendingPeriod,
       "bladePowerTrendingBladeId": bladePowerTrendingBladeId,
       "bladePowerTrendingSampleTable": bladePowerTrendingSampleTable,
       "bladePowerTrendingSampleEntry": bladePowerTrendingSampleEntry,
       "bladePowerTrendingSampleIndex": bladePowerTrendingSampleIndex,
       "bladePowerTrendingSampleId": bladePowerTrendingSampleId,
       "bladePowerTrendingSampleTimeStamp": bladePowerTrendingSampleTimeStamp,
       "bladePowerTrendingSampleMax": bladePowerTrendingSampleMax,
       "bladePowerTrendingSampleMin": bladePowerTrendingSampleMin,
       "bladePowerTrendingSampleAve": bladePowerTrendingSampleAve,
       "switchDetails": switchDetails,
       "switchPowerTrending": switchPowerTrending,
       "switchPowerTrendingPeriod": switchPowerTrendingPeriod,
       "switchPowerTrendingSwitchId": switchPowerTrendingSwitchId,
       "switchPowerTrendingSampleTable": switchPowerTrendingSampleTable,
       "switchPowerTrendingSampleEntry": switchPowerTrendingSampleEntry,
       "switchPowerTrendingSampleIndex": switchPowerTrendingSampleIndex,
       "switchPowerTrendingSampleId": switchPowerTrendingSampleId,
       "switchPowerTrendingSampleTimeStamp": switchPowerTrendingSampleTimeStamp,
       "switchPowerTrendingSampleMax": switchPowerTrendingSampleMax,
       "switchPowerTrendingSampleMin": switchPowerTrendingSampleMin,
       "switchPowerTrendingSampleAve": switchPowerTrendingSampleAve,
       "blowerDetails": blowerDetails,
       "blowerPowerTrending": blowerPowerTrending,
       "blowerPowerTrendingPeriod": blowerPowerTrendingPeriod,
       "blowerPowerTrendingBlowerId": blowerPowerTrendingBlowerId,
       "blowerPowerTrendingSampleTable": blowerPowerTrendingSampleTable,
       "blowerPowerTrendingSampleEntry": blowerPowerTrendingSampleEntry,
       "blowerPowerTrendingSampleIndex": blowerPowerTrendingSampleIndex,
       "blowerPowerTrendingSampleId": blowerPowerTrendingSampleId,
       "blowerPowerTrendingSampleTimeStamp": blowerPowerTrendingSampleTimeStamp,
       "blowerPowerTrendingSampleMax": blowerPowerTrendingSampleMax,
       "blowerPowerTrendingSampleMin": blowerPowerTrendingSampleMin,
       "blowerPowerTrendingSampleAve": blowerPowerTrendingSampleAve,
       "chassisInformation": chassisInformation,
       "chassisConfiguration": chassisConfiguration,
       "chassisTotalDCPowerAvailable": chassisTotalDCPowerAvailable,
       "chassisTotalACPowerInUsed": chassisTotalACPowerInUsed,
       "chassisTotalThermalOutput": chassisTotalThermalOutput,
       "chassisTrendingSampleInterval": chassisTrendingSampleInterval,
       "chassisPowerService": chassisPowerService,
       "chassisPowerTrending": chassisPowerTrending,
       "chassisPowerTrendingPeriod": chassisPowerTrendingPeriod,
       "chassisPowerTrendingSampleTable": chassisPowerTrendingSampleTable,
       "chassisPowerTrendingSampleEntry": chassisPowerTrendingSampleEntry,
       "chassisPowerTrendingSampleIndex": chassisPowerTrendingSampleIndex,
       "chassisPowerTrendingSampleTimeStamp": chassisPowerTrendingSampleTimeStamp,
       "chassisPowerTrendingSampleAve": chassisPowerTrendingSampleAve,
       "chassisThermalTrending": chassisThermalTrending,
       "chassisThermalTrendingPeriod": chassisThermalTrendingPeriod,
       "mt1ThermalTrendingTable": mt1ThermalTrendingTable,
       "mt1ThermalTrendingEntry": mt1ThermalTrendingEntry,
       "mt1ThermalTrendingIndex": mt1ThermalTrendingIndex,
       "mt1ThermalTrendingTimeStamp": mt1ThermalTrendingTimeStamp,
       "mt1ThermalTrendingTemperature": mt1ThermalTrendingTemperature,
       "mt2ThermalTrendingTable": mt2ThermalTrendingTable,
       "mt2ThermalTrendingEntry": mt2ThermalTrendingEntry,
       "mt2ThermalTrendingIndex": mt2ThermalTrendingIndex,
       "mt2ThermalTrendingTimeStamp": mt2ThermalTrendingTimeStamp,
       "mt2ThermalTrendingTemperature": mt2ThermalTrendingTemperature,
       "blower1ThermalTrendingTable": blower1ThermalTrendingTable,
       "blower1ThermalTrendingEntry": blower1ThermalTrendingEntry,
       "blower1ThermalTrendingIndex": blower1ThermalTrendingIndex,
       "blower1ThermalTrendingTimeStamp": blower1ThermalTrendingTimeStamp,
       "blower1ThermalTrendingTemperature": blower1ThermalTrendingTemperature,
       "blower2ThermalTrendingTable": blower2ThermalTrendingTable,
       "blower2ThermalTrendingEntry": blower2ThermalTrendingEntry,
       "blower2ThermalTrendingIndex": blower2ThermalTrendingIndex,
       "blower2ThermalTrendingTimeStamp": blower2ThermalTrendingTimeStamp,
       "blower2ThermalTrendingTemperature": blower2ThermalTrendingTemperature,
       "blower3ThermalTrendingTable": blower3ThermalTrendingTable,
       "blower3ThermalTrendingEntry": blower3ThermalTrendingEntry,
       "blower3ThermalTrendingIndex": blower3ThermalTrendingIndex,
       "blower3ThermalTrendingTimeStamp": blower3ThermalTrendingTimeStamp,
       "blower3ThermalTrendingTemperature": blower3ThermalTrendingTemperature,
       "blower4ThermalTrendingTable": blower4ThermalTrendingTable,
       "blower4ThermalTrendingEntry": blower4ThermalTrendingEntry,
       "blower4ThermalTrendingIndex": blower4ThermalTrendingIndex,
       "blower4ThermalTrendingTimeStamp": blower4ThermalTrendingTimeStamp,
       "blower4ThermalTrendingTemperature": blower4ThermalTrendingTemperature,
       "powerPolicyInformation": powerPolicyInformation,
       "powerPolicyTable": powerPolicyTable,
       "powerPolicyEntry": powerPolicyEntry,
       "powerPolicyIndex": powerPolicyIndex,
       "powerPolicyPowerDomainNumber": powerPolicyPowerDomainNumber,
       "powerPolicyName": powerPolicyName,
       "powerPolicyPwrSupplyFailureLimit": powerPolicyPwrSupplyFailureLimit,
       "powerPolicyMaxPowerLimit": powerPolicyMaxPowerLimit,
       "powerPolicyEstimatedUtilization": powerPolicyEstimatedUtilization,
       "powerPolicyActivate": powerPolicyActivate,
       "frontbezel": frontbezel,
       "frontbezelExists": frontbezelExists,
       "users": users,
       "mmUsers": mmUsers,
       "currentlyLoggedInTable": currentlyLoggedInTable,
       "currentlyLoggedInEntry": currentlyLoggedInEntry,
       "currentlyLoggedInEntryIndex": currentlyLoggedInEntryIndex,
       "currentlyLoggedInEntryUserId": currentlyLoggedInEntryUserId,
       "currentlyLoggedInEntryAccMethod": currentlyLoggedInEntryAccMethod,
       "monitorThresholds": monitorThresholds,
       "voltageThresholds": voltageThresholds,
       "voltageThresholdsTable": voltageThresholdsTable,
       "voltageThresholdsEntry": voltageThresholdsEntry,
       "voltageThresholdEntryIndex": voltageThresholdEntryIndex,
       "voltageThresholdEntryName": voltageThresholdEntryName,
       "voltageThresholdEntryCurrentValue": voltageThresholdEntryCurrentValue,
       "voltageThresholdEntryWarningHighValue": voltageThresholdEntryWarningHighValue,
       "voltageThresholdEntryWarningResetHighValue": voltageThresholdEntryWarningResetHighValue,
       "voltageThresholdEntryWarningLowValue": voltageThresholdEntryWarningLowValue,
       "voltageThresholdEntryWarningResetLowValue": voltageThresholdEntryWarningResetLowValue,
       "vpdInformation": vpdInformation,
       "chassisVpd": chassisVpd,
       "bladeCenterVpd": bladeCenterVpd,
       "bladeCenterVpdMachineType": bladeCenterVpdMachineType,
       "bladeCenterVpdMachineModel": bladeCenterVpdMachineModel,
       "bladeCenterSerialNumber": bladeCenterSerialNumber,
       "bladeCenterUUID": bladeCenterUUID,
       "bladeCenterManufacturingId": bladeCenterManufacturingId,
       "bladeCenterHardwareRevision": bladeCenterHardwareRevision,
       "bladeCenterFruNumber": bladeCenterFruNumber,
       "bladeCenterManufDate": bladeCenterManufDate,
       "bladeCenterPartNumber": bladeCenterPartNumber,
       "bladeCenterFruSerial": bladeCenterFruSerial,
       "bladeCenterManufacturingIDNumber": bladeCenterManufacturingIDNumber,
       "bladeCenterProductId": bladeCenterProductId,
       "bladeCenterSubManufacturerId": bladeCenterSubManufacturerId,
       "bladeCenterClei": bladeCenterClei,
       "bladeCenterDirectSerialAttach": bladeCenterDirectSerialAttach,
       "bladeCenterHardwareRevisionString": bladeCenterHardwareRevisionString,
       "mmHardwareVpd": mmHardwareVpd,
       "mmHardwareVpdTable": mmHardwareVpdTable,
       "mmHardwareVpdEntry": mmHardwareVpdEntry,
       "mmHardwareVpdIndex": mmHardwareVpdIndex,
       "mmHardwareVpdBayNumber": mmHardwareVpdBayNumber,
       "mmHardwareVpdManufacturingId": mmHardwareVpdManufacturingId,
       "mmHardwareVpdFruNumber": mmHardwareVpdFruNumber,
       "mmHardwareVpdHardwareRevision": mmHardwareVpdHardwareRevision,
       "mmHardwareVpdUuid": mmHardwareVpdUuid,
       "mmHardwareVpdManufDate": mmHardwareVpdManufDate,
       "mmHardwareVpdPartNumber": mmHardwareVpdPartNumber,
       "mmHardwareVpdFruSerial": mmHardwareVpdFruSerial,
       "mmHardwareVpdManufacturingIDNumber": mmHardwareVpdManufacturingIDNumber,
       "mmHardwareVpdProductId": mmHardwareVpdProductId,
       "mmHardwareVpdSubManufacturerId": mmHardwareVpdSubManufacturerId,
       "mmHardwareVpdClei": mmHardwareVpdClei,
       "mmHardwareVpdHardwareRevisionString": mmHardwareVpdHardwareRevisionString,
       "mmInpHardwareVpdTable": mmInpHardwareVpdTable,
       "mmInpHardwareVpdEntry": mmInpHardwareVpdEntry,
       "mmInpHardwareVpdIndex": mmInpHardwareVpdIndex,
       "mmInpHardwareVpdBayNumber": mmInpHardwareVpdBayNumber,
       "mmInpHardwareVpdManufacturingId": mmInpHardwareVpdManufacturingId,
       "mmInpHardwareVpdFruNumber": mmInpHardwareVpdFruNumber,
       "mmInpHardwareVpdHardwareRevision": mmInpHardwareVpdHardwareRevision,
       "mmInpHardwareVpdUuid": mmInpHardwareVpdUuid,
       "mmInpHardwareVpdManufDate": mmInpHardwareVpdManufDate,
       "mmInpHardwareVpdPartNumber": mmInpHardwareVpdPartNumber,
       "mmInpHardwareVpdFruSerial": mmInpHardwareVpdFruSerial,
       "mmInpHardwareVpdManufacturingIDNumber": mmInpHardwareVpdManufacturingIDNumber,
       "mmInpHardwareVpdProductId": mmInpHardwareVpdProductId,
       "mmInpHardwareVpdSubManufacturerId": mmInpHardwareVpdSubManufacturerId,
       "mmInpHardwareVpdClei": mmInpHardwareVpdClei,
       "mmInpHardwareVpdHardwareRevisionString": mmInpHardwareVpdHardwareRevisionString,
       "mmFirmwareVpd": mmFirmwareVpd,
       "mmMainApplVpdTable": mmMainApplVpdTable,
       "mmMainApplVpdEntry": mmMainApplVpdEntry,
       "mmMainApplVpdIndex": mmMainApplVpdIndex,
       "mmMainApplVpdName": mmMainApplVpdName,
       "mmMainApplVpdBuildId": mmMainApplVpdBuildId,
       "mmMainApplVpdRevisonNumber": mmMainApplVpdRevisonNumber,
       "mmMainApplVpdFilename": mmMainApplVpdFilename,
       "mmMainApplVpdBuildDate": mmMainApplVpdBuildDate,
       "mmBootROMVpdTable": mmBootROMVpdTable,
       "mmBootROMVpdEntry": mmBootROMVpdEntry,
       "mmBootROMVpdIndex": mmBootROMVpdIndex,
       "mmBootROMVpdName": mmBootROMVpdName,
       "mmBootROMVpdBuildId": mmBootROMVpdBuildId,
       "mmBootROMVpdRevisonNumber": mmBootROMVpdRevisonNumber,
       "mmBootROMVpdFilename": mmBootROMVpdFilename,
       "mmBootROMVpdBuildDate": mmBootROMVpdBuildDate,
       "mmRemoteControlVpdTable": mmRemoteControlVpdTable,
       "mmRemoteControlVpdEntry": mmRemoteControlVpdEntry,
       "mmRemoteControlVpdIndex": mmRemoteControlVpdIndex,
       "mmRemoteControlVpdName": mmRemoteControlVpdName,
       "mmRemoteControlVpdBuildId": mmRemoteControlVpdBuildId,
       "mmRemoteControlVpdRevisonNumber": mmRemoteControlVpdRevisonNumber,
       "mmRemoteControlVpdFilename": mmRemoteControlVpdFilename,
       "mmRemoteControlVpdBuildDate": mmRemoteControlVpdBuildDate,
       "mmPS2toUSBConvVpdTable": mmPS2toUSBConvVpdTable,
       "mmPS2toUSBConvVpdEntry": mmPS2toUSBConvVpdEntry,
       "mmPS2toUSBConvVpdIndex": mmPS2toUSBConvVpdIndex,
       "mmPS2toUSBConvVpdName": mmPS2toUSBConvVpdName,
       "mmPS2toUSBConvVpdBuildId": mmPS2toUSBConvVpdBuildId,
       "mmPS2toUSBConvVpdRevisonNumber": mmPS2toUSBConvVpdRevisonNumber,
       "mmPS2toUSBConvVpdFilename": mmPS2toUSBConvVpdFilename,
       "mmPS2toUSBConvVpdBuildDate": mmPS2toUSBConvVpdBuildDate,
       "mmToUSBIntfVpdTable": mmToUSBIntfVpdTable,
       "mmToUSBIntfVpdEntry": mmToUSBIntfVpdEntry,
       "mmToUSBIntfVpdIndex": mmToUSBIntfVpdIndex,
       "mmToUSBIntfVpdName": mmToUSBIntfVpdName,
       "mmToUSBIntfVpdBuildId": mmToUSBIntfVpdBuildId,
       "mmToUSBIntfVpdRevisonNumber": mmToUSBIntfVpdRevisonNumber,
       "mmToUSBIntfVpdFilename": mmToUSBIntfVpdFilename,
       "mmToUSBIntfVpdBuildDate": mmToUSBIntfVpdBuildDate,
       "bladeHardwareVpd": bladeHardwareVpd,
       "bladeHardwareVpdTable": bladeHardwareVpdTable,
       "bladeHardwareVpdEntry": bladeHardwareVpdEntry,
       "bladeHardwareVpdIndex": bladeHardwareVpdIndex,
       "bladeHardwareVpdBayNumber": bladeHardwareVpdBayNumber,
       "bladeHardwareVpdManufacturingId": bladeHardwareVpdManufacturingId,
       "bladeHardwareVpdFruNumber": bladeHardwareVpdFruNumber,
       "bladeHardwareVpdHardwareRevision": bladeHardwareVpdHardwareRevision,
       "bladeHardwareVpdSerialNumber": bladeHardwareVpdSerialNumber,
       "bladeHardwareVpdMachineType": bladeHardwareVpdMachineType,
       "bladeHardwareVpdUuid": bladeHardwareVpdUuid,
       "bladeHardwareVpdManufDate": bladeHardwareVpdManufDate,
       "bladeHardwareVpdPartNumber": bladeHardwareVpdPartNumber,
       "bladeHardwareVpdFruSerial": bladeHardwareVpdFruSerial,
       "bladeHardwareVpdMachineModel": bladeHardwareVpdMachineModel,
       "bladeHardwareVpdManufacturingIDNumber": bladeHardwareVpdManufacturingIDNumber,
       "bladeHardwareVpdProductId": bladeHardwareVpdProductId,
       "bladeHardwareVpdSubManufacturerId": bladeHardwareVpdSubManufacturerId,
       "bladeHardwareVpdClei": bladeHardwareVpdClei,
       "bladeHardwareVpdHardwareRevisionString": bladeHardwareVpdHardwareRevisionString,
       "bladeDaughterVpdCardType": bladeDaughterVpdCardType,
       "bladeDaughterVpdManufacturingId": bladeDaughterVpdManufacturingId,
       "bladeDaughterVpdFruNumber": bladeDaughterVpdFruNumber,
       "bladeDaughterVpdHardwareRevision": bladeDaughterVpdHardwareRevision,
       "bladeDaughterVpdSerialNumber": bladeDaughterVpdSerialNumber,
       "bladeDaughterVpdMachineType": bladeDaughterVpdMachineType,
       "bladeDaughterVpdUuid": bladeDaughterVpdUuid,
       "bladeDaughterVpdManufDate": bladeDaughterVpdManufDate,
       "bladeDaughterVpdPartNumber": bladeDaughterVpdPartNumber,
       "bladeDaughterVpdFruSerial": bladeDaughterVpdFruSerial,
       "bladeDaughterVpdManufacturingIDNumber": bladeDaughterVpdManufacturingIDNumber,
       "bladeDaughterVpdProductId": bladeDaughterVpdProductId,
       "bladeDaughterVpdSubManufacturerId": bladeDaughterVpdSubManufacturerId,
       "bladeDaughterVpdClei": bladeDaughterVpdClei,
       "bladeDaughterVpdHardwareRevisionString": bladeDaughterVpdHardwareRevisionString,
       "bladeMACAddressVpdTable": bladeMACAddressVpdTable,
       "bladeMACAddressVpdEntry": bladeMACAddressVpdEntry,
       "bladeMACAddressVpdIndex": bladeMACAddressVpdIndex,
       "bladeMACAddress1Vpd": bladeMACAddress1Vpd,
       "bladeMACAddress2Vpd": bladeMACAddress2Vpd,
       "bladeMACAddress3Vpd": bladeMACAddress3Vpd,
       "bladeMACAddress4Vpd": bladeMACAddress4Vpd,
       "bladeMACAddress5Vpd": bladeMACAddress5Vpd,
       "bladeMACAddress6Vpd": bladeMACAddress6Vpd,
       "bladeMACAddress7Vpd": bladeMACAddress7Vpd,
       "bladeMACAddress8Vpd": bladeMACAddress8Vpd,
       "bladeDaughterCard1MACAddress1Vpd": bladeDaughterCard1MACAddress1Vpd,
       "bladeDaughterCard1MACAddress2Vpd": bladeDaughterCard1MACAddress2Vpd,
       "bladeDaughterCard1MACAddress3Vpd": bladeDaughterCard1MACAddress3Vpd,
       "bladeDaughterCard1MACAddress4Vpd": bladeDaughterCard1MACAddress4Vpd,
       "bladeDaughterCard1MACAddress5Vpd": bladeDaughterCard1MACAddress5Vpd,
       "bladeDaughterCard1MACAddress6Vpd": bladeDaughterCard1MACAddress6Vpd,
       "bladeDaughterCard1MACAddress7Vpd": bladeDaughterCard1MACAddress7Vpd,
       "bladeDaughterCard1MACAddress8Vpd": bladeDaughterCard1MACAddress8Vpd,
       "bladeDaughterCard2MACAddress1Vpd": bladeDaughterCard2MACAddress1Vpd,
       "bladeDaughterCard2MACAddress2Vpd": bladeDaughterCard2MACAddress2Vpd,
       "bladeDaughterCard2MACAddress3Vpd": bladeDaughterCard2MACAddress3Vpd,
       "bladeDaughterCard2MACAddress4Vpd": bladeDaughterCard2MACAddress4Vpd,
       "bladeDaughterCard2MACAddress5Vpd": bladeDaughterCard2MACAddress5Vpd,
       "bladeDaughterCard2MACAddress6Vpd": bladeDaughterCard2MACAddress6Vpd,
       "bladeDaughterCard2MACAddress7Vpd": bladeDaughterCard2MACAddress7Vpd,
       "bladeDaughterCard2MACAddress8Vpd": bladeDaughterCard2MACAddress8Vpd,
       "bladeDaughterCard3MACAddress1Vpd": bladeDaughterCard3MACAddress1Vpd,
       "bladeDaughterCard3MACAddress2Vpd": bladeDaughterCard3MACAddress2Vpd,
       "bladeDaughterCard3MACAddress3Vpd": bladeDaughterCard3MACAddress3Vpd,
       "bladeDaughterCard3MACAddress4Vpd": bladeDaughterCard3MACAddress4Vpd,
       "bladeDaughterCard3MACAddress5Vpd": bladeDaughterCard3MACAddress5Vpd,
       "bladeDaughterCard3MACAddress6Vpd": bladeDaughterCard3MACAddress6Vpd,
       "bladeDaughterCard3MACAddress7Vpd": bladeDaughterCard3MACAddress7Vpd,
       "bladeDaughterCard3MACAddress8Vpd": bladeDaughterCard3MACAddress8Vpd,
       "bladeDaughterCard4MACAddress1Vpd": bladeDaughterCard4MACAddress1Vpd,
       "bladeDaughterCard4MACAddress2Vpd": bladeDaughterCard4MACAddress2Vpd,
       "bladeDaughterCard4MACAddress3Vpd": bladeDaughterCard4MACAddress3Vpd,
       "bladeDaughterCard4MACAddress4Vpd": bladeDaughterCard4MACAddress4Vpd,
       "bladeDaughterCard4MACAddress5Vpd": bladeDaughterCard4MACAddress5Vpd,
       "bladeDaughterCard4MACAddress6Vpd": bladeDaughterCard4MACAddress6Vpd,
       "bladeDaughterCard4MACAddress7Vpd": bladeDaughterCard4MACAddress7Vpd,
       "bladeDaughterCard4MACAddress8Vpd": bladeDaughterCard4MACAddress8Vpd,
       "bladeDaughterCard5MACAddress1Vpd": bladeDaughterCard5MACAddress1Vpd,
       "bladeDaughterCard5MACAddress2Vpd": bladeDaughterCard5MACAddress2Vpd,
       "bladeDaughterCard5MACAddress3Vpd": bladeDaughterCard5MACAddress3Vpd,
       "bladeDaughterCard5MACAddress4Vpd": bladeDaughterCard5MACAddress4Vpd,
       "bladeDaughterCard5MACAddress5Vpd": bladeDaughterCard5MACAddress5Vpd,
       "bladeDaughterCard5MACAddress6Vpd": bladeDaughterCard5MACAddress6Vpd,
       "bladeDaughterCard5MACAddress7Vpd": bladeDaughterCard5MACAddress7Vpd,
       "bladeDaughterCard5MACAddress8Vpd": bladeDaughterCard5MACAddress8Vpd,
       "bladeHSDaughterCard1MACAddress1Vpd": bladeHSDaughterCard1MACAddress1Vpd,
       "bladeHSDaughterCard1MACAddress2Vpd": bladeHSDaughterCard1MACAddress2Vpd,
       "bladeHSDaughterCard1MACAddress3Vpd": bladeHSDaughterCard1MACAddress3Vpd,
       "bladeHSDaughterCard1MACAddress4Vpd": bladeHSDaughterCard1MACAddress4Vpd,
       "bladeHSDaughterCard1MACAddress5Vpd": bladeHSDaughterCard1MACAddress5Vpd,
       "bladeHSDaughterCard1MACAddress6Vpd": bladeHSDaughterCard1MACAddress6Vpd,
       "bladeHSDaughterCard1MACAddress7Vpd": bladeHSDaughterCard1MACAddress7Vpd,
       "bladeHSDaughterCard1MACAddress8Vpd": bladeHSDaughterCard1MACAddress8Vpd,
       "bladeHSDaughterCard1MACAddress9Vpd": bladeHSDaughterCard1MACAddress9Vpd,
       "bladeHSDaughterCard1MACAddress10Vpd": bladeHSDaughterCard1MACAddress10Vpd,
       "bladeHSDaughterCard1MACAddress11Vpd": bladeHSDaughterCard1MACAddress11Vpd,
       "bladeHSDaughterCard1MACAddress12Vpd": bladeHSDaughterCard1MACAddress12Vpd,
       "bladeHSDaughterCard1MACAddress13Vpd": bladeHSDaughterCard1MACAddress13Vpd,
       "bladeHSDaughterCard1MACAddress14Vpd": bladeHSDaughterCard1MACAddress14Vpd,
       "bladeHSDaughterCard1MACAddress15Vpd": bladeHSDaughterCard1MACAddress15Vpd,
       "bladeHSDaughterCard1MACAddress16Vpd": bladeHSDaughterCard1MACAddress16Vpd,
       "bladeSideCardMACAddress1Vpd": bladeSideCardMACAddress1Vpd,
       "bladeSideCardMACAddress2Vpd": bladeSideCardMACAddress2Vpd,
       "bladeSideCardMACAddress3Vpd": bladeSideCardMACAddress3Vpd,
       "bladeSideCardMACAddress4Vpd": bladeSideCardMACAddress4Vpd,
       "bladeSideCardMACAddress5Vpd": bladeSideCardMACAddress5Vpd,
       "bladeSideCardMACAddress6Vpd": bladeSideCardMACAddress6Vpd,
       "bladeSideCardMACAddress7Vpd": bladeSideCardMACAddress7Vpd,
       "bladeSideCardMACAddress8Vpd": bladeSideCardMACAddress8Vpd,
       "bladeExpBoardVpdTable": bladeExpBoardVpdTable,
       "bladeExpBoardVpdEntry": bladeExpBoardVpdEntry,
       "bladeExpBoardVpdIndex": bladeExpBoardVpdIndex,
       "bladeExpBoardVpdBayNumber": bladeExpBoardVpdBayNumber,
       "bladeExpBoardVpdManufacturingId": bladeExpBoardVpdManufacturingId,
       "bladeExpBoardVpdFruNumber": bladeExpBoardVpdFruNumber,
       "bladeExpBoardVpdHardwareRevision": bladeExpBoardVpdHardwareRevision,
       "bladeExpBoardVpdSerialNumber": bladeExpBoardVpdSerialNumber,
       "bladeExpBoardVpdMachineType": bladeExpBoardVpdMachineType,
       "bladeExpBoardVpdUuid": bladeExpBoardVpdUuid,
       "bladeExpBoardVpdManufDate": bladeExpBoardVpdManufDate,
       "bladeExpBoardVpdPartNumber": bladeExpBoardVpdPartNumber,
       "bladeExpBoardVpdFruSerial": bladeExpBoardVpdFruSerial,
       "bladeExpBoardVpdMachineModel": bladeExpBoardVpdMachineModel,
       "bladeExpBoardVpdManufacturingIDNumber": bladeExpBoardVpdManufacturingIDNumber,
       "bladeExpBoardVpdProductId": bladeExpBoardVpdProductId,
       "bladeExpBoardVpdSubManufacturerId": bladeExpBoardVpdSubManufacturerId,
       "bladeExpBoardVpdClei": bladeExpBoardVpdClei,
       "bladeExpBoardVpdBladeBayNumber": bladeExpBoardVpdBladeBayNumber,
       "bladeExpBoardVpdCardType": bladeExpBoardVpdCardType,
       "bladeExpBoardVpdCardSubType": bladeExpBoardVpdCardSubType,
       "bladeExpBoardVpdHardwareRevisionString": bladeExpBoardVpdHardwareRevisionString,
       "bladeSideCardVpdTable": bladeSideCardVpdTable,
       "bladeSideCardVpdEntry": bladeSideCardVpdEntry,
       "bladeSideCardVpdIndex": bladeSideCardVpdIndex,
       "bladeSideCardVpdBayNumber": bladeSideCardVpdBayNumber,
       "bladeSideCardVpdManufacturingId": bladeSideCardVpdManufacturingId,
       "bladeSideCardVpdFruNumber": bladeSideCardVpdFruNumber,
       "bladeSideCardVpdHardwareRevision": bladeSideCardVpdHardwareRevision,
       "bladeSideCardVpdSerialNumber": bladeSideCardVpdSerialNumber,
       "bladeSideCardVpdMachineType": bladeSideCardVpdMachineType,
       "bladeSideCardVpdUuid": bladeSideCardVpdUuid,
       "bladeSideCardVpdManufDate": bladeSideCardVpdManufDate,
       "bladeSideCardVpdPartNumber": bladeSideCardVpdPartNumber,
       "bladeSideCardVpdFruSerial": bladeSideCardVpdFruSerial,
       "bladeSideCardVpdMachineModel": bladeSideCardVpdMachineModel,
       "bladeSideCardVpdManufacturingIDNumber": bladeSideCardVpdManufacturingIDNumber,
       "bladeSideCardVpdProductId": bladeSideCardVpdProductId,
       "bladeSideCardVpdSubManufacturerId": bladeSideCardVpdSubManufacturerId,
       "bladeSideCardVpdClei": bladeSideCardVpdClei,
       "bladeSideCardVpdBladeBayNumber": bladeSideCardVpdBladeBayNumber,
       "bladeSideCardVpdHardwareRevisionString": bladeSideCardVpdHardwareRevisionString,
       "bladeExpCardVpdTable": bladeExpCardVpdTable,
       "bladeExpCardVpdEntry": bladeExpCardVpdEntry,
       "bladeExpCardVpdIndex": bladeExpCardVpdIndex,
       "bladeExpCardVpdBayNumber": bladeExpCardVpdBayNumber,
       "bladeExpCardVpdManufacturingId": bladeExpCardVpdManufacturingId,
       "bladeExpCardVpdFruNumber": bladeExpCardVpdFruNumber,
       "bladeExpCardVpdHardwareRevision": bladeExpCardVpdHardwareRevision,
       "bladeExpCardVpdSerialNumber": bladeExpCardVpdSerialNumber,
       "bladeExpCardVpdMachineType": bladeExpCardVpdMachineType,
       "bladeExpCardVpdUuid": bladeExpCardVpdUuid,
       "bladeExpCardVpdManufDate": bladeExpCardVpdManufDate,
       "bladeExpCardVpdPartNumber": bladeExpCardVpdPartNumber,
       "bladeExpCardVpdFruSerial": bladeExpCardVpdFruSerial,
       "bladeExpCardVpdMachineModel": bladeExpCardVpdMachineModel,
       "bladeExpCardVpdManufacturingIDNumber": bladeExpCardVpdManufacturingIDNumber,
       "bladeExpCardVpdProductId": bladeExpCardVpdProductId,
       "bladeExpCardVpdSubManufacturerId": bladeExpCardVpdSubManufacturerId,
       "bladeExpCardVpdClei": bladeExpCardVpdClei,
       "bladeExpCardVpdBladeBayNumber": bladeExpCardVpdBladeBayNumber,
       "bladeExpCardVpdCardTypeInfo": bladeExpCardVpdCardTypeInfo,
       "bladeExpCardVpdHighSpeed": bladeExpCardVpdHighSpeed,
       "bladeExpCardVpdHardwareRevisionString": bladeExpCardVpdHardwareRevisionString,
       "bladecKVMCardVpdTable": bladecKVMCardVpdTable,
       "bladecKVMCardVpdEntry": bladecKVMCardVpdEntry,
       "bladecKVMCardVpdIndex": bladecKVMCardVpdIndex,
       "bladecKVMCardVpdBayNumber": bladecKVMCardVpdBayNumber,
       "bladecKVMCardVpdManufacturingId": bladecKVMCardVpdManufacturingId,
       "bladecKVMCardVpdFruNumber": bladecKVMCardVpdFruNumber,
       "bladecKVMCardVpdHardwareRevision": bladecKVMCardVpdHardwareRevision,
       "bladecKVMCardVpdSerialNumber": bladecKVMCardVpdSerialNumber,
       "bladecKVMCardVpdMachineType": bladecKVMCardVpdMachineType,
       "bladecKVMCardVpdUuid": bladecKVMCardVpdUuid,
       "bladecKVMCardVpdManufDate": bladecKVMCardVpdManufDate,
       "bladecKVMCardVpdPartNumber": bladecKVMCardVpdPartNumber,
       "bladecKVMCardVpdFruSerial": bladecKVMCardVpdFruSerial,
       "bladecKVMCardVpdMachineModel": bladecKVMCardVpdMachineModel,
       "bladecKVMCardVpdManufacturingIDNumber": bladecKVMCardVpdManufacturingIDNumber,
       "bladecKVMCardVpdProductId": bladecKVMCardVpdProductId,
       "bladecKVMCardVpdSubManufacturerId": bladecKVMCardVpdSubManufacturerId,
       "bladecKVMCardVpdClei": bladecKVMCardVpdClei,
       "bladecKVMCardVpdHardwareRevisionString": bladecKVMCardVpdHardwareRevisionString,
       "bladeAndExpCardWwnGuidVpdTable": bladeAndExpCardWwnGuidVpdTable,
       "bladeAndExpCardWwnGuidVpdEntry": bladeAndExpCardWwnGuidVpdEntry,
       "bladeAndExpCardWwnGuidVpdIndex": bladeAndExpCardWwnGuidVpdIndex,
       "bladeAndExpCardWwnGuidVpdBayNumber": bladeAndExpCardWwnGuidVpdBayNumber,
       "bladeAndExpCardWwnGuidVpdName": bladeAndExpCardWwnGuidVpdName,
       "bladeAndExpCardWwnGuidVpdBladeBayNumber": bladeAndExpCardWwnGuidVpdBladeBayNumber,
       "bladeAndExpCardWwnGuidVpdType": bladeAndExpCardWwnGuidVpdType,
       "bladeAndExpCardWwnGuidVpd1": bladeAndExpCardWwnGuidVpd1,
       "bladeAndExpCardWwnGuidVpd2": bladeAndExpCardWwnGuidVpd2,
       "bladeAndExpCardWwnGuidVpd3": bladeAndExpCardWwnGuidVpd3,
       "bladeAndExpCardWwnGuidVpd4": bladeAndExpCardWwnGuidVpd4,
       "bladeAndExpCardWwnGuidVpd5": bladeAndExpCardWwnGuidVpd5,
       "bladeAndExpCardWwnGuidVpd6": bladeAndExpCardWwnGuidVpd6,
       "bladeAndExpCardWwnGuidVpd7": bladeAndExpCardWwnGuidVpd7,
       "bladeAndExpCardWwnGuidVpd8": bladeAndExpCardWwnGuidVpd8,
       "bladeManagementCardVpdTable": bladeManagementCardVpdTable,
       "bladeManagementCardVpdEntry": bladeManagementCardVpdEntry,
       "bladeManagementCardVpdIndex": bladeManagementCardVpdIndex,
       "bladeManagementCardVpdBayNumber": bladeManagementCardVpdBayNumber,
       "bladeManagementCardVpdManufacturingId": bladeManagementCardVpdManufacturingId,
       "bladeManagementCardVpdFruNumber": bladeManagementCardVpdFruNumber,
       "bladeManagementCardVpdHardwareRevision": bladeManagementCardVpdHardwareRevision,
       "bladeManagementCardVpdSerialNumber": bladeManagementCardVpdSerialNumber,
       "bladeManagementCardVpdMachineType": bladeManagementCardVpdMachineType,
       "bladeManagementCardVpdUuid": bladeManagementCardVpdUuid,
       "bladeManagementCardVpdManufDate": bladeManagementCardVpdManufDate,
       "bladeManagementCardVpdPartNumber": bladeManagementCardVpdPartNumber,
       "bladeManagementCardVpdFruSerial": bladeManagementCardVpdFruSerial,
       "bladeManagementCardVpdMachineModel": bladeManagementCardVpdMachineModel,
       "bladeManagementCardVpdManufacturingIDNumber": bladeManagementCardVpdManufacturingIDNumber,
       "bladeManagementCardVpdProductId": bladeManagementCardVpdProductId,
       "bladeManagementCardVpdSubManufacturerId": bladeManagementCardVpdSubManufacturerId,
       "bladeManagementCardVpdClei": bladeManagementCardVpdClei,
       "bladeManagementCardVpdHardwareRevisionString": bladeManagementCardVpdHardwareRevisionString,
       "bladeFirmwareVpd": bladeFirmwareVpd,
       "bladeBiosVPDTable": bladeBiosVPDTable,
       "bladeBiosVPDEntry": bladeBiosVPDEntry,
       "bladeBiosVpdIndex": bladeBiosVpdIndex,
       "bladeBiosVpdId": bladeBiosVpdId,
       "bladeBiosVpdExists": bladeBiosVpdExists,
       "bladeBiosVpdPowerState": bladeBiosVpdPowerState,
       "bladeBiosVpdName": bladeBiosVpdName,
       "bladeBiosVpdBuildId": bladeBiosVpdBuildId,
       "bladeBiosVpdRevision": bladeBiosVpdRevision,
       "bladeBiosVpdDate": bladeBiosVpdDate,
       "bladeBiosVpdLevelStatus": bladeBiosVpdLevelStatus,
       "bladeDiagsVPDTable": bladeDiagsVPDTable,
       "bladeDiagsVPDEntry": bladeDiagsVPDEntry,
       "bladeDiagsVpdIndex": bladeDiagsVpdIndex,
       "bladeDiagsVpdId": bladeDiagsVpdId,
       "bladeDiagsVpdExists": bladeDiagsVpdExists,
       "bladeDiagsVpdPowerState": bladeDiagsVpdPowerState,
       "bladeDiagsVpdName": bladeDiagsVpdName,
       "bladeDiagsVpdBuildId": bladeDiagsVpdBuildId,
       "bladeDiagsVpdRevision": bladeDiagsVpdRevision,
       "bladeDiagsVpdDate": bladeDiagsVpdDate,
       "bladeDiagsVpdLevelStatus": bladeDiagsVpdLevelStatus,
       "bladeSysMgmtProcVPDTable": bladeSysMgmtProcVPDTable,
       "bladeSysMgmtProcVPDEntry": bladeSysMgmtProcVPDEntry,
       "bladeSysMgmtProcVpdIndex": bladeSysMgmtProcVpdIndex,
       "bladeSysMgmtProcVpdId": bladeSysMgmtProcVpdId,
       "bladeSysMgmtProcVpdExists": bladeSysMgmtProcVpdExists,
       "bladeSysMgmtProcVpdPowerState": bladeSysMgmtProcVpdPowerState,
       "bladeSysMgmtProcVpdName": bladeSysMgmtProcVpdName,
       "bladeSysMgmtProcVpdBuildId": bladeSysMgmtProcVpdBuildId,
       "bladeSysMgmtProcVpdRevision": bladeSysMgmtProcVpdRevision,
       "bladeSysMgmtProcVpdLevelStatus": bladeSysMgmtProcVpdLevelStatus,
       "bladecKVMVPDTable": bladecKVMVPDTable,
       "bladecKVMVPDEntry": bladecKVMVPDEntry,
       "bladecKVMVpdIndex": bladecKVMVpdIndex,
       "bladecKVMVpdId": bladecKVMVpdId,
       "bladecKVMVpdExists": bladecKVMVpdExists,
       "bladecKVMVpdPowerState": bladecKVMVpdPowerState,
       "bladecKVMVpdName": bladecKVMVpdName,
       "bladecKVMVpdRevision": bladecKVMVpdRevision,
       "bladeFWBuildIDs": bladeFWBuildIDs,
       "bladeFWBuildIDTable": bladeFWBuildIDTable,
       "bladeFWBuildIDEntry": bladeFWBuildIDEntry,
       "bladeFWBuildIDIndex": bladeFWBuildIDIndex,
       "bladeFWBuildMfg": bladeFWBuildMfg,
       "bladeFWBuildMT": bladeFWBuildMT,
       "bladeFWBuildFWType": bladeFWBuildFWType,
       "bladeFWBuildID": bladeFWBuildID,
       "bladeFWBuildRev": bladeFWBuildRev,
       "createBladeFWBuildIDs": createBladeFWBuildIDs,
       "addBladeFWBuildID": addBladeFWBuildID,
       "addBladeMfg": addBladeMfg,
       "addBladeMt": addBladeMt,
       "addBladeFt": addBladeFt,
       "addBladeBuildID": addBladeBuildID,
       "addBladeBuildRev": addBladeBuildRev,
       "exeBladeAdding": exeBladeAdding,
       "rmBladeFWBuildID": rmBladeFWBuildID,
       "rmAllBladeFWBuildIDs": rmAllBladeFWBuildIDs,
       "buildIDFileName": buildIDFileName,
       "buildIDURIName": buildIDURIName,
       "buildIDtftpIP": buildIDtftpIP,
       "importBladeFWBuildIDs": importBladeFWBuildIDs,
       "exportBladeFWBuildIDs": exportBladeFWBuildIDs,
       "statusBladeFWBuildIDs": statusBladeFWBuildIDs,
       "smHardwareVpd": smHardwareVpd,
       "smHardwareVpdTable": smHardwareVpdTable,
       "smHardwareVpdEntry": smHardwareVpdEntry,
       "smHardwareVpdIndex": smHardwareVpdIndex,
       "smHardwareVpdBayNumber": smHardwareVpdBayNumber,
       "smHardwareVpdManufacturingId": smHardwareVpdManufacturingId,
       "smHardwareVpdFruNumber": smHardwareVpdFruNumber,
       "smHardwareVpdHardwareRevision": smHardwareVpdHardwareRevision,
       "smHardwareVpdUuid": smHardwareVpdUuid,
       "smHardwareVpdManufDate": smHardwareVpdManufDate,
       "smHardwareVpdPartNumber": smHardwareVpdPartNumber,
       "smHardwareVpdFruSerial": smHardwareVpdFruSerial,
       "smHardwareVpdManufacturingIDNumber": smHardwareVpdManufacturingIDNumber,
       "smHardwareVpdProductId": smHardwareVpdProductId,
       "smHardwareVpdSubManufacturerId": smHardwareVpdSubManufacturerId,
       "smHardwareVpdClei": smHardwareVpdClei,
       "smHardwareVpdWwnGuid": smHardwareVpdWwnGuid,
       "smHardwareVpdWwnGuidType": smHardwareVpdWwnGuidType,
       "smHardwareVpdWidth": smHardwareVpdWidth,
       "smHardwareVpdHardwareRevisionString": smHardwareVpdHardwareRevisionString,
       "smInpHardwareVpdTable": smInpHardwareVpdTable,
       "smInpHardwareVpdEntry": smInpHardwareVpdEntry,
       "smInpHardwareVpdIndex": smInpHardwareVpdIndex,
       "smInpHardwareVpdBayNumber": smInpHardwareVpdBayNumber,
       "smInpHardwareVpdManufacturingId": smInpHardwareVpdManufacturingId,
       "smInpHardwareVpdFruNumber": smInpHardwareVpdFruNumber,
       "smInpHardwareVpdHardwareRevision": smInpHardwareVpdHardwareRevision,
       "smInpHardwareVpdUuid": smInpHardwareVpdUuid,
       "smInpHardwareVpdManufDate": smInpHardwareVpdManufDate,
       "smInpHardwareVpdPartNumber": smInpHardwareVpdPartNumber,
       "smInpHardwareVpdFruSerial": smInpHardwareVpdFruSerial,
       "smInpHardwareVpdManufacturingIDNumber": smInpHardwareVpdManufacturingIDNumber,
       "smInpHardwareVpdProductId": smInpHardwareVpdProductId,
       "smInpHardwareVpdSubManufacturerId": smInpHardwareVpdSubManufacturerId,
       "smInpHardwareVpdClei": smInpHardwareVpdClei,
       "smInpHardwareVpdWwnGuid": smInpHardwareVpdWwnGuid,
       "smInpHardwareVpdWwnGuidType": smInpHardwareVpdWwnGuidType,
       "smInpHardwareVpdWidth": smInpHardwareVpdWidth,
       "smInpHardwareVpdName": smInpHardwareVpdName,
       "smInpHardwareVpdHardwareRevisionString": smInpHardwareVpdHardwareRevisionString,
       "smFirmwareVpd": smFirmwareVpd,
       "smMainAppVpdTable": smMainAppVpdTable,
       "smMainAppVpdEntry": smMainAppVpdEntry,
       "smMainAppVpdIndex": smMainAppVpdIndex,
       "smMainAppVpdId": smMainAppVpdId,
       "smMainAppVpdExists": smMainAppVpdExists,
       "smMainAppVpdSwitchType": smMainAppVpdSwitchType,
       "smMainApp1VpdBuildId": smMainApp1VpdBuildId,
       "smMainApp1VpdBuildDate": smMainApp1VpdBuildDate,
       "smMainApp1VpdRevisionNumber": smMainApp1VpdRevisionNumber,
       "smMainApp2VpdBuildId": smMainApp2VpdBuildId,
       "smMainApp2VpdBuildDate": smMainApp2VpdBuildDate,
       "smMainApp2VpdRevisionNumber": smMainApp2VpdRevisionNumber,
       "smMainApp3VpdBuildId": smMainApp3VpdBuildId,
       "smMainApp3VpdBuildDate": smMainApp3VpdBuildDate,
       "smMainApp3VpdRevisionNumber": smMainApp3VpdRevisionNumber,
       "smMainAppVpdSwitchSubType": smMainAppVpdSwitchSubType,
       "smBootRomVpdTable": smBootRomVpdTable,
       "smBootRomVpdEntry": smBootRomVpdEntry,
       "smBootRomVpdIndex": smBootRomVpdIndex,
       "smBootRomVpdId": smBootRomVpdId,
       "smBootRomVpdExists": smBootRomVpdExists,
       "smBootRomVpdSwitchType": smBootRomVpdSwitchType,
       "smBootRomVpdBuildId": smBootRomVpdBuildId,
       "smBootRomVpdBuildDate": smBootRomVpdBuildDate,
       "smBootRomVpdRevisionNumber": smBootRomVpdRevisionNumber,
       "smBootRomVpdSwitchSubType": smBootRomVpdSwitchSubType,
       "pmHardwareVpd": pmHardwareVpd,
       "pmHardwareVpdTable": pmHardwareVpdTable,
       "pmHardwareVpdEntry": pmHardwareVpdEntry,
       "pmHardwareVpdIndex": pmHardwareVpdIndex,
       "pmHardwareVpdBayNumber": pmHardwareVpdBayNumber,
       "pmHardwareVpdManufacturingId": pmHardwareVpdManufacturingId,
       "pmHardwareVpdFruNumber": pmHardwareVpdFruNumber,
       "pmHardwareVpdHardwareRevision": pmHardwareVpdHardwareRevision,
       "pmHardwareVpdUuid": pmHardwareVpdUuid,
       "pmHardwareVpdManufDate": pmHardwareVpdManufDate,
       "pmHardwareVpdPartNumber": pmHardwareVpdPartNumber,
       "pmHardwareVpdFruSerial": pmHardwareVpdFruSerial,
       "pmHardwareVpdManufacturingIDNumber": pmHardwareVpdManufacturingIDNumber,
       "pmHardwareVpdProductId": pmHardwareVpdProductId,
       "pmHardwareVpdSubManufacturerId": pmHardwareVpdSubManufacturerId,
       "pmHardwareVpdClei": pmHardwareVpdClei,
       "pmHardwareVpdHardwareRevisionString": pmHardwareVpdHardwareRevisionString,
       "mtHardwareVpd": mtHardwareVpd,
       "mtHardwareVpdManufacturingId": mtHardwareVpdManufacturingId,
       "mtHardwareVpdFruNumber": mtHardwareVpdFruNumber,
       "mtHardwareVpdHardwareRevision": mtHardwareVpdHardwareRevision,
       "mtHardwareVpdUuid": mtHardwareVpdUuid,
       "mtHardwareVpdManufacturingIDNumber": mtHardwareVpdManufacturingIDNumber,
       "mtHardwareVpdProductId": mtHardwareVpdProductId,
       "mtHardwareVpdSubManufacturerId": mtHardwareVpdSubManufacturerId,
       "mtHardwareVpdClei": mtHardwareVpdClei,
       "mtHardwareVpdCF1Capacity": mtHardwareVpdCF1Capacity,
       "mtHardwareVpdCF2Capacity": mtHardwareVpdCF2Capacity,
       "mtHardwareVpdBBU1": mtHardwareVpdBBU1,
       "mtHardwareVpdBBU2": mtHardwareVpdBBU2,
       "mtHardwareVpdHardwareRevisionString": mtHardwareVpdHardwareRevisionString,
       "mtHardwareVpdManufDate": mtHardwareVpdManufDate,
       "mtHardwareVpdPartNumber": mtHardwareVpdPartNumber,
       "mtHardwareVpdFruSerial": mtHardwareVpdFruSerial,
       "mt2HardwareVpd": mt2HardwareVpd,
       "mt2HardwareVpdManufacturingId": mt2HardwareVpdManufacturingId,
       "mt2HardwareVpdFruNumber": mt2HardwareVpdFruNumber,
       "mt2HardwareVpdHardwareRevision": mt2HardwareVpdHardwareRevision,
       "mt2HardwareVpdUuid": mt2HardwareVpdUuid,
       "mt2HardwareVpdManufacturingIDNumber": mt2HardwareVpdManufacturingIDNumber,
       "mt2HardwareVpdProductId": mt2HardwareVpdProductId,
       "mt2HardwareVpdSubManufacturerId": mt2HardwareVpdSubManufacturerId,
       "mt2HardwareVpdClei": mt2HardwareVpdClei,
       "mt2HardwareVpdCF1Capacity": mt2HardwareVpdCF1Capacity,
       "mt2HardwareVpdCF2Capacity": mt2HardwareVpdCF2Capacity,
       "mt2HardwareVpdHardwareRevisionString": mt2HardwareVpdHardwareRevisionString,
       "mt2HardwareVpdManufDate": mt2HardwareVpdManufDate,
       "mt2HardwareVpdPartNumber": mt2HardwareVpdPartNumber,
       "mt2HardwareVpdFruSerial": mt2HardwareVpdFruSerial,
       "blowerFirmwareVpd": blowerFirmwareVpd,
       "blowerControllerVPDTable": blowerControllerVPDTable,
       "blowerControllerVPDEntry": blowerControllerVPDEntry,
       "blowerControllerVpdIndex": blowerControllerVpdIndex,
       "blowerControllerVpdId": blowerControllerVpdId,
       "blowerControllerVpdExists": blowerControllerVpdExists,
       "blowerControllerVpdRevision": blowerControllerVpdRevision,
       "blowerHardwareVpd": blowerHardwareVpd,
       "blowerHardwareVpdTable": blowerHardwareVpdTable,
       "blowerHardwareVpdEntry": blowerHardwareVpdEntry,
       "blowerHardwareVpdIndex": blowerHardwareVpdIndex,
       "blowerHardwareVpdBayNumber": blowerHardwareVpdBayNumber,
       "blowerHardwareVpdManufacturingId": blowerHardwareVpdManufacturingId,
       "blowerHardwareVpdFruNumber": blowerHardwareVpdFruNumber,
       "blowerHardwareVpdHardwareRevision": blowerHardwareVpdHardwareRevision,
       "blowerHardwareVpdUuid": blowerHardwareVpdUuid,
       "blowerHardwareVpdManufDate": blowerHardwareVpdManufDate,
       "blowerHardwareVpdPartNumber": blowerHardwareVpdPartNumber,
       "blowerHardwareVpdFruSerial": blowerHardwareVpdFruSerial,
       "blowerHardwareVpdManufacturingIDNumber": blowerHardwareVpdManufacturingIDNumber,
       "blowerHardwareVpdProductId": blowerHardwareVpdProductId,
       "blowerHardwareVpdSubManufacturerId": blowerHardwareVpdSubManufacturerId,
       "blowerHardwareVpdClei": blowerHardwareVpdClei,
       "blowerHardwareVpdHardwareRevisionString": blowerHardwareVpdHardwareRevisionString,
       "fanPackFirmwareVpd": fanPackFirmwareVpd,
       "fanPackControllerVPDTable": fanPackControllerVPDTable,
       "fanPackControllerVPDEntry": fanPackControllerVPDEntry,
       "fanPackControllerVpdIndex": fanPackControllerVpdIndex,
       "fanPackControllerVpdId": fanPackControllerVpdId,
       "fanPackControllerVpdExists": fanPackControllerVpdExists,
       "fanPackControllerVpdRevision": fanPackControllerVpdRevision,
       "tapHardwareVpd": tapHardwareVpd,
       "tapHardwareVpdManufacturingId": tapHardwareVpdManufacturingId,
       "tapHardwareVpdFruNumber": tapHardwareVpdFruNumber,
       "tapHardwareVpdHardwareRevision": tapHardwareVpdHardwareRevision,
       "tapHardwareVpdUuid": tapHardwareVpdUuid,
       "tapHardwareVpdManufDate": tapHardwareVpdManufDate,
       "tapHardwareVpdPartNumber": tapHardwareVpdPartNumber,
       "tapHardwareVpdFruSerial": tapHardwareVpdFruSerial,
       "tapHardwareVpdManufacturingIDNumber": tapHardwareVpdManufacturingIDNumber,
       "tapHardwareVpdProductId": tapHardwareVpdProductId,
       "tapHardwareVpdSubManufacturerId": tapHardwareVpdSubManufacturerId,
       "tapHardwareVpdClei": tapHardwareVpdClei,
       "tapHardwareVpdHardwareRevisionString": tapHardwareVpdHardwareRevisionString,
       "ncHardwareVpd": ncHardwareVpd,
       "ncHardwareVpdTable": ncHardwareVpdTable,
       "ncHardwareVpdEntry": ncHardwareVpdEntry,
       "ncHardwareVpdIndex": ncHardwareVpdIndex,
       "ncHardwareVpdBayNumber": ncHardwareVpdBayNumber,
       "ncHardwareVpdManufacturingId": ncHardwareVpdManufacturingId,
       "ncHardwareVpdFruNumber": ncHardwareVpdFruNumber,
       "ncHardwareVpdHardwareRevision": ncHardwareVpdHardwareRevision,
       "ncHardwareVpdUuid": ncHardwareVpdUuid,
       "ncHardwareVpdManufDate": ncHardwareVpdManufDate,
       "ncHardwareVpdPartNumber": ncHardwareVpdPartNumber,
       "ncHardwareVpdFruSerial": ncHardwareVpdFruSerial,
       "ncHardwareVpdManufacturingIDNumber": ncHardwareVpdManufacturingIDNumber,
       "ncHardwareVpdProductId": ncHardwareVpdProductId,
       "ncHardwareVpdSubManufacturerId": ncHardwareVpdSubManufacturerId,
       "ncHardwareVpdClei": ncHardwareVpdClei,
       "ncHardwareVpdHardwareRevisionString": ncHardwareVpdHardwareRevisionString,
       "mxHardwareVpd": mxHardwareVpd,
       "mxHardwareVpdTable": mxHardwareVpdTable,
       "mxHardwareVpdEntry": mxHardwareVpdEntry,
       "mxHardwareVpdIndex": mxHardwareVpdIndex,
       "mxHardwareVpdBayNumber": mxHardwareVpdBayNumber,
       "mxHardwareVpdManufacturingId": mxHardwareVpdManufacturingId,
       "mxHardwareVpdFruNumber": mxHardwareVpdFruNumber,
       "mxHardwareVpdHardwareRevision": mxHardwareVpdHardwareRevision,
       "mxHardwareVpdUuid": mxHardwareVpdUuid,
       "mxHardwareVpdManufDate": mxHardwareVpdManufDate,
       "mxHardwareVpdPartNumber": mxHardwareVpdPartNumber,
       "mxHardwareVpdFruSerial": mxHardwareVpdFruSerial,
       "mxHardwareVpdManufacturingIDNumber": mxHardwareVpdManufacturingIDNumber,
       "mxHardwareVpdProductId": mxHardwareVpdProductId,
       "mxHardwareVpdSubManufacturerId": mxHardwareVpdSubManufacturerId,
       "mxHardwareVpdClei": mxHardwareVpdClei,
       "mxHardwareVpdHardwareRevisionString": mxHardwareVpdHardwareRevisionString,
       "stmHardwareVpd": stmHardwareVpd,
       "stmHardwareVpdTable": stmHardwareVpdTable,
       "stmHardwareVpdEntry": stmHardwareVpdEntry,
       "stmHardwareVpdIndex": stmHardwareVpdIndex,
       "stmHardwareVpdBayNumber": stmHardwareVpdBayNumber,
       "stmHardwareVpdManufacturingId": stmHardwareVpdManufacturingId,
       "stmHardwareVpdFruNumber": stmHardwareVpdFruNumber,
       "stmHardwareVpdHardwareRevision": stmHardwareVpdHardwareRevision,
       "stmHardwareVpdUuid": stmHardwareVpdUuid,
       "stmHardwareVpdManufDate": stmHardwareVpdManufDate,
       "stmHardwareVpdPartNumber": stmHardwareVpdPartNumber,
       "stmHardwareVpdFruSerial": stmHardwareVpdFruSerial,
       "stmHardwareVpdManufacturingIDNumber": stmHardwareVpdManufacturingIDNumber,
       "stmHardwareVpdProductId": stmHardwareVpdProductId,
       "stmHardwareVpdSubManufacturerId": stmHardwareVpdSubManufacturerId,
       "stmHardwareVpdClei": stmHardwareVpdClei,
       "stmHardwareVpdHardwareRevisionString": stmHardwareVpdHardwareRevisionString,
       "stmFirmwareVpd": stmFirmwareVpd,
       "stmFirmwareVpdTable": stmFirmwareVpdTable,
       "stmFirmwareVpdEntry": stmFirmwareVpdEntry,
       "stmFirmwareVpdIndex": stmFirmwareVpdIndex,
       "stmFirmwareVpdType": stmFirmwareVpdType,
       "stmFirmwareVpdBuildId": stmFirmwareVpdBuildId,
       "stmFirmwareVpdReleaseDate": stmFirmwareVpdReleaseDate,
       "stmFirmwareVpdRevision": stmFirmwareVpdRevision,
       "bbuHardwareVpd": bbuHardwareVpd,
       "bbuHardwareVpdTable": bbuHardwareVpdTable,
       "bbuHardwareVpdEntry": bbuHardwareVpdEntry,
       "bbuHardwareVpdIndex": bbuHardwareVpdIndex,
       "bbuHardwareVpdBayNumber": bbuHardwareVpdBayNumber,
       "bbuHardwareVpdManufacturingId": bbuHardwareVpdManufacturingId,
       "bbuHardwareVpdFruNumber": bbuHardwareVpdFruNumber,
       "bbuHardwareVpdHardwareRevision": bbuHardwareVpdHardwareRevision,
       "bbuHardwareVpdUuid": bbuHardwareVpdUuid,
       "bbuHardwareVpdManufDate": bbuHardwareVpdManufDate,
       "bbuHardwareVpdPartNumber": bbuHardwareVpdPartNumber,
       "bbuHardwareVpdFruSerial": bbuHardwareVpdFruSerial,
       "bbuHardwareVpdManufacturingIDNumber": bbuHardwareVpdManufacturingIDNumber,
       "bbuHardwareVpdProductId": bbuHardwareVpdProductId,
       "bbuHardwareVpdSubManufacturerId": bbuHardwareVpdSubManufacturerId,
       "bbuHardwareVpdClei": bbuHardwareVpdClei,
       "inventoryManagementActivityVpdTable": inventoryManagementActivityVpdTable,
       "inventoryManagementActivityVpdEntry": inventoryManagementActivityVpdEntry,
       "componentLevelActivityVpdIndex": componentLevelActivityVpdIndex,
       "componentLevelActivityVpdFruNumber": componentLevelActivityVpdFruNumber,
       "componentLevelActivityVpdSerialNumber": componentLevelActivityVpdSerialNumber,
       "componentLevelActivityVpdManufacturingId": componentLevelActivityVpdManufacturingId,
       "componentLevelActivityVpdBayNumber": componentLevelActivityVpdBayNumber,
       "componentLevelActivityVpdAction": componentLevelActivityVpdAction,
       "componentLevelActivityVpdTimestamp": componentLevelActivityVpdTimestamp,
       "componentLevelActivityVpdModuleName": componentLevelActivityVpdModuleName,
       "reloadVpdData": reloadVpdData,
       "reloadAllVpdData": reloadAllVpdData,
       "reloadFwVpdData": reloadFwVpdData,
       "reloadHwVpdData": reloadHwVpdData,
       "reloadMACAddress": reloadMACAddress,
       "reloadWwnGuidVpdData": reloadWwnGuidVpdData,
       "airFilter": airFilter,
       "passiveAirFilter": passiveAirFilter,
       "passiveAirFilterStatus": passiveAirFilterStatus,
       "passiveAirFilterMonthFreq": passiveAirFilterMonthFreq,
       "passiveAirFilterReplaceDate": passiveAirFilterReplaceDate,
       "componentInformation": componentInformation,
       "componentInventory": componentInventory,
       "componentInventoryTable": componentInventoryTable,
       "componentInventoryEntry": componentInventoryEntry,
       "componentInventoryTopologyPath": componentInventoryTopologyPath,
       "componentInventoryInstance": componentInventoryInstance,
       "componentInventoryDescription": componentInventoryDescription,
       "componentInventoryMachineTypeModel": componentInventoryMachineTypeModel,
       "componentInventoryMachineSerial": componentInventoryMachineSerial,
       "componentInventoryAssetID": componentInventoryAssetID,
       "componentInventoryPartNumber": componentInventoryPartNumber,
       "componentInventoryFRUNumber": componentInventoryFRUNumber,
       "componentInventoryFRUSerialNumber": componentInventoryFRUSerialNumber,
       "componentInventoryManufactureID": componentInventoryManufactureID,
       "componentInventoryHardwareRevision": componentInventoryHardwareRevision,
       "componentInventoryManufactureDate": componentInventoryManufactureDate,
       "componentInventoryUUID": componentInventoryUUID,
       "componentInventoryProductID": componentInventoryProductID,
       "componentInventorySubManufactureID": componentInventorySubManufactureID,
       "componentInventoryCLEI": componentInventoryCLEI,
       "componentInventoryAssetTag": componentInventoryAssetTag,
       "componentInventorySpeed": componentInventorySpeed,
       "componentInventoryIdentifier": componentInventoryIdentifier,
       "componentInventorySize": componentInventorySize,
       "componentInventoryMemoryType": componentInventoryMemoryType,
       "componentInventoryProductName": componentInventoryProductName,
       "componentInventoryProductVersion": componentInventoryProductVersion,
       "componentInventoryProcessorType": componentInventoryProcessorType,
       "componentInventoryProcessorFamily": componentInventoryProcessorFamily,
       "componentInventoryProcessorCores": componentInventoryProcessorCores,
       "componentInventoryProcessorThreads": componentInventoryProcessorThreads,
       "componentInventoryProcessorL1DCache": componentInventoryProcessorL1DCache,
       "componentInventoryProcessorL1ICache": componentInventoryProcessorL1ICache,
       "componentInventoryProcessorL2Cache": componentInventoryProcessorL2Cache,
       "componentInventoryProcessorL3Cache": componentInventoryProcessorL3Cache,
       "componentInventoryProcessorVoltage": componentInventoryProcessorVoltage,
       "componentInventoryProcessorExtClock": componentInventoryProcessorExtClock,
       "componentInventoryProcessorDataWidth": componentInventoryProcessorDataWidth,
       "componentInventoryManufactureIDNum": componentInventoryManufactureIDNum,
       "componentFirmware": componentFirmware,
       "componentFirmwareTable": componentFirmwareTable,
       "componentFirmwareEntry": componentFirmwareEntry,
       "componentFirmwareTopologyPath": componentFirmwareTopologyPath,
       "componentFirmwareIndex": componentFirmwareIndex,
       "componentFirmwareComponentInstance": componentFirmwareComponentInstance,
       "componentFirmwareComponentDescription": componentFirmwareComponentDescription,
       "componentFirmwareType": componentFirmwareType,
       "componentFirmwareBuildID": componentFirmwareBuildID,
       "componentFirmwareReleaseDate": componentFirmwareReleaseDate,
       "componentFirmwareFilename": componentFirmwareFilename,
       "componentFirmwareRevision": componentFirmwareRevision,
       "componentFirmwareRevisionMajor": componentFirmwareRevisionMajor,
       "componentFirmwareRevisionMinor": componentFirmwareRevisionMinor,
       "componentFirmwareLevelStatus": componentFirmwareLevelStatus,
       "componentFirmwarePendingBuildID": componentFirmwarePendingBuildID,
       "componentFirmwarePendingReleaseDate": componentFirmwarePendingReleaseDate,
       "componentFirmwarePendingRevision": componentFirmwarePendingRevision,
       "componentFirmwareTypeID": componentFirmwareTypeID,
       "componentInventoryReady": componentInventoryReady,
       "componentDriveTable": componentDriveTable,
       "componentDriveEntry": componentDriveEntry,
       "componentDriveTopologyPath": componentDriveTopologyPath,
       "componentDriveDescription": componentDriveDescription,
       "errorLogs": errorLogs,
       "eventLog": eventLog,
       "readEventLogTable": readEventLogTable,
       "readEventLogEntry": readEventLogEntry,
       "readEventLogIndex": readEventLogIndex,
       "readEventLogString": readEventLogString,
       "clearEventLog": clearEventLog,
       "monitorLogStateEvents": monitorLogStateEvents,
       "readEnhancedEventLogTable": readEnhancedEventLogTable,
       "readEnhancedEventLogEntry": readEnhancedEventLogEntry,
       "readEnhancedEventLogNumber": readEnhancedEventLogNumber,
       "readEnhancedEventLogAttribute": readEnhancedEventLogAttribute,
       "readEnhancedEventLogMessage": readEnhancedEventLogMessage,
       "readAuditLogTable": readAuditLogTable,
       "readAuditLogEntry": readAuditLogEntry,
       "readAuditLogNumber": readAuditLogNumber,
       "readAuditLogAttribute": readAuditLogAttribute,
       "readAuditLogMessage": readAuditLogMessage,
       "clearAuditLog": clearAuditLog,
       "readSystemLogTable": readSystemLogTable,
       "readSystemLogEntry": readSystemLogEntry,
       "readSystemLogNumber": readSystemLogNumber,
       "readSystemLogAttribute": readSystemLogAttribute,
       "readSystemLogMessage": readSystemLogMessage,
       "clearSystemLog": clearSystemLog,
       "configureSP": configureSP,
       "remoteAccessConfig": remoteAccessConfig,
       "generalRemoteCfg": generalRemoteCfg,
       "remoteAlertRetryDelay": remoteAlertRetryDelay,
       "remoteAlertRetryCount": remoteAlertRetryCount,
       "remoteAlertEntryDelay": remoteAlertEntryDelay,
       "remoteAccessTamperDelay": remoteAccessTamperDelay,
       "userAuthenticationMethod": userAuthenticationMethod,
       "maxSessionsPerLDAPUser": maxSessionsPerLDAPUser,
       "authenticationLoggingTimeout": authenticationLoggingTimeout,
       "trackingIP": trackingIP,
       "accountSecurityManagement": accountSecurityManagement,
       "accountSecurityLevel": accountSecurityLevel,
       "customSecuritySettings": customSecuritySettings,
       "loginPasswordRequired": loginPasswordRequired,
       "passwordExpirationPeriod": passwordExpirationPeriod,
       "defaultAdminPasswordExpired": defaultAdminPasswordExpired,
       "minimumPasswordReuseCycle": minimumPasswordReuseCycle,
       "complexPasswordRules": complexPasswordRules,
       "minimumDiffCharsPassword": minimumDiffCharsPassword,
       "changePasswordFirstAccess": changePasswordFirstAccess,
       "inactivityAlertPeriod": inactivityAlertPeriod,
       "inactivityAlertDisablePeriod": inactivityAlertDisablePeriod,
       "lockoutPeriod": lockoutPeriod,
       "maxLoginFailures": maxLoginFailures,
       "passwordChangeInterval": passwordChangeInterval,
       "serialPortCfg": serialPortCfg,
       "portBaud": portBaud,
       "portParity": portParity,
       "portStopBits": portStopBits,
       "remoteAlertIds": remoteAlertIds,
       "remoteAlertIdsTable": remoteAlertIdsTable,
       "remoteAlertIdsEntry": remoteAlertIdsEntry,
       "remoteAlertIdEntryIndex": remoteAlertIdEntryIndex,
       "remoteAlertIdEntryStatus": remoteAlertIdEntryStatus,
       "remoteAlertIdEntryIpOrHostAddress": remoteAlertIdEntryIpOrHostAddress,
       "remoteAlertIdEntryTextDescription": remoteAlertIdEntryTextDescription,
       "remoteAlertIdEntryNotificationType": remoteAlertIdEntryNotificationType,
       "remoteAlertIdEmailAddr": remoteAlertIdEmailAddr,
       "remoteAlertIdEntrySelectiveAlert": remoteAlertIdEntrySelectiveAlert,
       "generateTestAlert": generateTestAlert,
       "remoteAccessIds": remoteAccessIds,
       "remoteAccessIdsTable": remoteAccessIdsTable,
       "remoteAccessIdsEntry": remoteAccessIdsEntry,
       "remoteAccessIdEntryIndex": remoteAccessIdEntryIndex,
       "remoteAccessIdEntryUserId": remoteAccessIdEntryUserId,
       "remoteAccessIdEntryPassword": remoteAccessIdEntryPassword,
       "remoteAccessIdEntryEncodedLoginPw": remoteAccessIdEntryEncodedLoginPw,
       "remoteAccessIdEntryRole": remoteAccessIdEntryRole,
       "remoteAccessIdEntryLoggedIn": remoteAccessIdEntryLoggedIn,
       "remoteAccessIdEntryLastLogin": remoteAccessIdEntryLastLogin,
       "remoteAccessIdEntryPwdCompliant": remoteAccessIdEntryPwdCompliant,
       "remoteAccessIdEntryPwdExp": remoteAccessIdEntryPwdExp,
       "remoteAccessIdEntryDormant": remoteAccessIdEntryDormant,
       "remoteAccessIdEntryState": remoteAccessIdEntryState,
       "remoteAccessIdEntryAction": remoteAccessIdEntryAction,
       "remoteAccessIdEntrySessionCount": remoteAccessIdEntrySessionCount,
       "remoteAccessIdEntryMaxSessions": remoteAccessIdEntryMaxSessions,
       "remoteAccessUserAuthorityLevelTable": remoteAccessUserAuthorityLevelTable,
       "remoteAccessUserAuthorityLevelEntry": remoteAccessUserAuthorityLevelEntry,
       "ualIndex": ualIndex,
       "ualId": ualId,
       "ualSupervisor": ualSupervisor,
       "ualReadOnly": ualReadOnly,
       "ualAccountManagement": ualAccountManagement,
       "ualConsoleAccess": ualConsoleAccess,
       "ualConsoleAndVirtualMediaAccess": ualConsoleAndVirtualMediaAccess,
       "ualServerPowerAccess": ualServerPowerAccess,
       "ualAllowClearLog": ualAllowClearLog,
       "ualAdapterBasicConfig": ualAdapterBasicConfig,
       "ualAdapterNetworkAndSecurityConfig": ualAdapterNetworkAndSecurityConfig,
       "ualAdapterAdvancedConfig": ualAdapterAdvancedConfig,
       "remoteAccessRBSroleTable": remoteAccessRBSroleTable,
       "remoteAccessRBSroleEntry": remoteAccessRBSroleEntry,
       "roleIndex": roleIndex,
       "roleId": roleId,
       "rbsSupervisor": rbsSupervisor,
       "rbsOperator": rbsOperator,
       "rbsChassisOperator": rbsChassisOperator,
       "rbsChassisAccountManagement": rbsChassisAccountManagement,
       "rbsChassisLogManagement": rbsChassisLogManagement,
       "rbsChassisConfiguration": rbsChassisConfiguration,
       "rbsChassisAdministration": rbsChassisAdministration,
       "rbsBladeOperator": rbsBladeOperator,
       "rbsBladeRemotePresence": rbsBladeRemotePresence,
       "rbsBladeConfiguration": rbsBladeConfiguration,
       "rbsBladeAdministration": rbsBladeAdministration,
       "rbsSwitchModuleOperator": rbsSwitchModuleOperator,
       "rbsSwitchModuleConfiguration": rbsSwitchModuleConfiguration,
       "rbsSwitchModuleAdministration": rbsSwitchModuleAdministration,
       "rbsBladeRemotePresenseVideo": rbsBladeRemotePresenseVideo,
       "rbsBladeRemotePresenseKVM": rbsBladeRemotePresenseKVM,
       "rbsBladeRemotePresenseRdriveR": rbsBladeRemotePresenseRdriveR,
       "rbsBladeRemotePresenseRdriveRW": rbsBladeRemotePresenseRdriveRW,
       "rbsChassisRemotePresenseRdoc": rbsChassisRemotePresenseRdoc,
       "rbsRemotePresenceSupervisor": rbsRemotePresenceSupervisor,
       "remoteAccessRBSscopeTable": remoteAccessRBSscopeTable,
       "remoteAccessRBSscopeEntry": remoteAccessRBSscopeEntry,
       "scopeIndex": scopeIndex,
       "scopeId": scopeId,
       "rbsChassis": rbsChassis,
       "rbsBlade1": rbsBlade1,
       "rbsBlade2": rbsBlade2,
       "rbsBlade3": rbsBlade3,
       "rbsBlade4": rbsBlade4,
       "rbsBlade5": rbsBlade5,
       "rbsBlade6": rbsBlade6,
       "rbsBlade7": rbsBlade7,
       "rbsBlade8": rbsBlade8,
       "rbsBlade9": rbsBlade9,
       "rbsBlade10": rbsBlade10,
       "rbsBlade11": rbsBlade11,
       "rbsBlade12": rbsBlade12,
       "rbsBlade13": rbsBlade13,
       "rbsBlade14": rbsBlade14,
       "rbsSwitch1": rbsSwitch1,
       "rbsSwitch2": rbsSwitch2,
       "rbsSwitch3": rbsSwitch3,
       "rbsSwitch4": rbsSwitch4,
       "rbsSwitch5": rbsSwitch5,
       "rbsSwitch6": rbsSwitch6,
       "rbsSwitch7": rbsSwitch7,
       "rbsSwitch8": rbsSwitch8,
       "rbsSwitch9": rbsSwitch9,
       "rbsSwitch10": rbsSwitch10,
       "userInterfaces": userInterfaces,
       "cli": cli,
       "snmp": snmp,
       "tcm": tcm,
       "web": web,
       "stcm": stcm,
       "mmSshClientAuth": mmSshClientAuth,
       "mmSshClientAuthPubKeyTable": mmSshClientAuthPubKeyTable,
       "mmSshClientAuthPubKeyEntry": mmSshClientAuthPubKeyEntry,
       "mmSshClientAuthRemoteAccessIdIndex": mmSshClientAuthRemoteAccessIdIndex,
       "mmSshClientAuthPubKeyIndex": mmSshClientAuthPubKeyIndex,
       "mmSshClientAuthPubKeyType": mmSshClientAuthPubKeyType,
       "mmSshClientAuthPubKeySize": mmSshClientAuthPubKeySize,
       "mmSshClientAuthPubKeyFingerprint": mmSshClientAuthPubKeyFingerprint,
       "mmSshClientAuthPubKeyAcceptFrom": mmSshClientAuthPubKeyAcceptFrom,
       "mmSshClientAuthPubKeyComment": mmSshClientAuthPubKeyComment,
       "mmSshClientAuthPubKeyAction": mmSshClientAuthPubKeyAction,
       "mmSshClientAuthPubKeyEntryStatus": mmSshClientAuthPubKeyEntryStatus,
       "mmSshClientAuthPubKeyUnused": mmSshClientAuthPubKeyUnused,
       "mmSshClientAuthPubKeyTftpServer": mmSshClientAuthPubKeyTftpServer,
       "mmSshClientAuthPubKeyFileName": mmSshClientAuthPubKeyFileName,
       "mmSshClientAuthPubKeyFileFormat": mmSshClientAuthPubKeyFileFormat,
       "groupProfiles": groupProfiles,
       "groupIdsTable": groupIdsTable,
       "groupIdsEntry": groupIdsEntry,
       "groupIndex": groupIndex,
       "groupId": groupId,
       "groupRole": groupRole,
       "groupEntryStatus": groupEntryStatus,
       "groupRBSroleTable": groupRBSroleTable,
       "groupRBSroleEntry": groupRBSroleEntry,
       "groupRBSroleIndex": groupRBSroleIndex,
       "groupRBSroleId": groupRBSroleId,
       "groupRBSSupervisor": groupRBSSupervisor,
       "groupRBSOperator": groupRBSOperator,
       "groupRBSChassisOperator": groupRBSChassisOperator,
       "groupRBSChassisAccountManagement": groupRBSChassisAccountManagement,
       "groupRBSChassisLogManagement": groupRBSChassisLogManagement,
       "groupRBSChassisConfiguration": groupRBSChassisConfiguration,
       "groupRBSChassisAdministration": groupRBSChassisAdministration,
       "groupRBSBladeOperator": groupRBSBladeOperator,
       "groupRBSBladeRemotePresence": groupRBSBladeRemotePresence,
       "groupRBSBladeConfiguration": groupRBSBladeConfiguration,
       "groupRBSBladeAdministration": groupRBSBladeAdministration,
       "groupRBSSwitchModuleOperator": groupRBSSwitchModuleOperator,
       "groupRBSSwitchModuleConfiguration": groupRBSSwitchModuleConfiguration,
       "groupRBSSwitchModuleAdministration": groupRBSSwitchModuleAdministration,
       "groupRBSscopeTable": groupRBSscopeTable,
       "groupRBSscopeEntry": groupRBSscopeEntry,
       "groupRBSscopeIndex": groupRBSscopeIndex,
       "groupRBSscopeId": groupRBSscopeId,
       "groupRBSChassis": groupRBSChassis,
       "groupRBSBlade1": groupRBSBlade1,
       "groupRBSBlade2": groupRBSBlade2,
       "groupRBSBlade3": groupRBSBlade3,
       "groupRBSBlade4": groupRBSBlade4,
       "groupRBSBlade5": groupRBSBlade5,
       "groupRBSBlade6": groupRBSBlade6,
       "groupRBSBlade7": groupRBSBlade7,
       "groupRBSBlade8": groupRBSBlade8,
       "groupRBSBlade9": groupRBSBlade9,
       "groupRBSBlade10": groupRBSBlade10,
       "groupRBSBlade11": groupRBSBlade11,
       "groupRBSBlade12": groupRBSBlade12,
       "groupRBSBlade13": groupRBSBlade13,
       "groupRBSBlade14": groupRBSBlade14,
       "groupRBSSwitch1": groupRBSSwitch1,
       "groupRBSSwitch2": groupRBSSwitch2,
       "groupRBSSwitch3": groupRBSSwitch3,
       "groupRBSSwitch4": groupRBSSwitch4,
       "groupRBSSwitch5": groupRBSSwitch5,
       "groupRBSSwitch6": groupRBSSwitch6,
       "groupRBSSwitch7": groupRBSSwitch7,
       "groupRBSSwitch8": groupRBSSwitch8,
       "groupRBSSwitch9": groupRBSSwitch9,
       "groupRBSSwitch10": groupRBSSwitch10,
       "remoteAlerts": remoteAlerts,
       "remoteAlertsCrit": remoteAlertsCrit,
       "critTemp": critTemp,
       "critVolt": critVolt,
       "critMultiBlower": critMultiBlower,
       "critPower": critPower,
       "critHardDrive": critHardDrive,
       "critVRM": critVRM,
       "critMultipleSwitchModule": critMultipleSwitchModule,
       "critInvalidConfig": critInvalidConfig,
       "critBlade": critBlade,
       "critIO": critIO,
       "critStorage": critStorage,
       "critChassis": critChassis,
       "critFan": critFan,
       "remoteAlertsNonCrit": remoteAlertsNonCrit,
       "warnSingleBlower": warnSingleBlower,
       "warnTemp": warnTemp,
       "warnVoltage": warnVoltage,
       "warnRedundantModule": warnRedundantModule,
       "warnMediaTrayKVMSwitch": warnMediaTrayKVMSwitch,
       "warnLogFull": warnLogFull,
       "warnBlade": warnBlade,
       "warnIO": warnIO,
       "warnStorage": warnStorage,
       "warnPower": warnPower,
       "warnChassis": warnChassis,
       "warnFan": warnFan,
       "remoteAlertsSystem": remoteAlertsSystem,
       "systemPowerOff": systemPowerOff,
       "systemPowerOn": systemPowerOn,
       "systemPFA": systemPFA,
       "systemInventory": systemInventory,
       "systemLog75PctFull": systemLog75PctFull,
       "networkChangeNotification": networkChangeNotification,
       "systemBladeThrottling": systemBladeThrottling,
       "systemPowerManagement": systemPowerManagement,
       "systemRemoteLogin": systemRemoteLogin,
       "systemBlade": systemBlade,
       "systemIO": systemIO,
       "systemStorage": systemStorage,
       "systemPower": systemPower,
       "systemChassis": systemChassis,
       "systemFan": systemFan,
       "systemPWRDO": systemPWRDO,
       "alertMode": alertMode,
       "securitySettings": securitySettings,
       "dataEncryption": dataEncryption,
       "trespassWarning": trespassWarning,
       "trespassWarningDefault": trespassWarningDefault,
       "trespassMessage": trespassMessage,
       "spClock": spClock,
       "spClockDateAndTimeSetting": spClockDateAndTimeSetting,
       "spClockTimezoneSetting": spClockTimezoneSetting,
       "spIdentification": spIdentification,
       "spTxtId": spTxtId,
       "networkConfiguration": networkConfiguration,
       "networkInterfaces": networkInterfaces,
       "extEthernetInterface": extEthernetInterface,
       "extEthernetInterfaceType": extEthernetInterfaceType,
       "extEthernetInterfaceHostName": extEthernetInterfaceHostName,
       "extEthernetInterfaceIPAddress": extEthernetInterfaceIPAddress,
       "extEthernetInterfaceDataRate": extEthernetInterfaceDataRate,
       "extEthernetInterfaceDuplexSetting": extEthernetInterfaceDuplexSetting,
       "extEthernetInterfaceLAA": extEthernetInterfaceLAA,
       "extEthernetInterfaceDhcpEnabled": extEthernetInterfaceDhcpEnabled,
       "extEthernetInterfaceGatewayIPAddress": extEthernetInterfaceGatewayIPAddress,
       "extEthernetInterfaceBIA": extEthernetInterfaceBIA,
       "extEthernetInterfaceMTU": extEthernetInterfaceMTU,
       "extEthernetInterfaceSubnetMask": extEthernetInterfaceSubnetMask,
       "dhcpEthernetInterface": dhcpEthernetInterface,
       "dhcpHostName": dhcpHostName,
       "dhcpIPAddress": dhcpIPAddress,
       "dhcpGatewayIPAddress": dhcpGatewayIPAddress,
       "dhcpSubnetMask": dhcpSubnetMask,
       "dhcpDomainName": dhcpDomainName,
       "dhcpDHCPServer": dhcpDHCPServer,
       "dhcpPrimaryDNSServer": dhcpPrimaryDNSServer,
       "dhcpSecondaryDNSServer": dhcpSecondaryDNSServer,
       "dhcpTertiaryDNSServer": dhcpTertiaryDNSServer,
       "intEthernetInterface": intEthernetInterface,
       "intEthernetInterfaceType": intEthernetInterfaceType,
       "intEthernetInterfaceEnabled": intEthernetInterfaceEnabled,
       "intEthernetInterfaceLocalIPAddress": intEthernetInterfaceLocalIPAddress,
       "intEthernetInterfaceDataRate": intEthernetInterfaceDataRate,
       "intEthernetInterfaceDuplexSetting": intEthernetInterfaceDuplexSetting,
       "intEthernetInterfaceLAA": intEthernetInterfaceLAA,
       "intEthernetInterfaceGatewayIPAddress": intEthernetInterfaceGatewayIPAddress,
       "intEthernetInterfaceBIA": intEthernetInterfaceBIA,
       "intEthernetInterfaceMTU": intEthernetInterfaceMTU,
       "intEthernetInterfaceSubnetMask": intEthernetInterfaceSubnetMask,
       "standbyExtEthernetInterface": standbyExtEthernetInterface,
       "standbyExtEthernetInterfaceType": standbyExtEthernetInterfaceType,
       "standbyExtEthernetInterfaceHostName": standbyExtEthernetInterfaceHostName,
       "standbyExtEthernetInterfaceIPAddress": standbyExtEthernetInterfaceIPAddress,
       "standbyExtEthernetInterfaceDataRate": standbyExtEthernetInterfaceDataRate,
       "standbyExtEthernetInterfaceDuplexSetting": standbyExtEthernetInterfaceDuplexSetting,
       "standbyExtEthernetInterfaceLAA": standbyExtEthernetInterfaceLAA,
       "standbyExtEthernetInterfaceDhcpEnabled": standbyExtEthernetInterfaceDhcpEnabled,
       "standbyExtEthernetInterfaceGatewayIPAddress": standbyExtEthernetInterfaceGatewayIPAddress,
       "standbyExtEthernetInterfaceBIA": standbyExtEthernetInterfaceBIA,
       "standbyExtEthernetInterfaceMTU": standbyExtEthernetInterfaceMTU,
       "standbyExtEthernetInterfaceSubnetMask": standbyExtEthernetInterfaceSubnetMask,
       "advancedFailover": advancedFailover,
       "standbyDhcpEthernetInterface": standbyDhcpEthernetInterface,
       "standbyDhcpHostName": standbyDhcpHostName,
       "standbyDhcpIPAddress": standbyDhcpIPAddress,
       "standbyDhcpGatewayIPAddress": standbyDhcpGatewayIPAddress,
       "standbyDhcpSubnetMask": standbyDhcpSubnetMask,
       "standbyDhcpDomainName": standbyDhcpDomainName,
       "standbyDhcpDHCPServer": standbyDhcpDHCPServer,
       "standbyDhcpPrimaryDNSServer": standbyDhcpPrimaryDNSServer,
       "standbyDhcpSecondaryDNSServer": standbyDhcpSecondaryDNSServer,
       "standbyDhcpTertiaryDNSServer": standbyDhcpTertiaryDNSServer,
       "extEthernetInterfaceIPv6": extEthernetInterfaceIPv6,
       "extEthernetInterfaceIPv6Type": extEthernetInterfaceIPv6Type,
       "extEthernetInterfaceIPv6Enabled": extEthernetInterfaceIPv6Enabled,
       "extEthernetInterfaceIPv6Config": extEthernetInterfaceIPv6Config,
       "extEthernetInterfaceIPv6LocalAddress": extEthernetInterfaceIPv6LocalAddress,
       "extEthernetInterfaceIPv6LinkLocalAddress": extEthernetInterfaceIPv6LinkLocalAddress,
       "extEthernetInterfaceIPv6StaticIPConfig": extEthernetInterfaceIPv6StaticIPConfig,
       "extEthernetInterfaceIPv6StaticIPConfigEnabled": extEthernetInterfaceIPv6StaticIPConfigEnabled,
       "extEthernetInterfaceIPv6StaticIPAddress": extEthernetInterfaceIPv6StaticIPAddress,
       "extEthernetInterfaceIPv6StaticIPAddressPrefixLen": extEthernetInterfaceIPv6StaticIPAddressPrefixLen,
       "extEthernetInterfaceIPv6StaticIPDefaultRoute": extEthernetInterfaceIPv6StaticIPDefaultRoute,
       "extEthernetInterfaceIPv6AutoIPConfig": extEthernetInterfaceIPv6AutoIPConfig,
       "extEthernetInterfaceIPv6AutoIPConfigEnabled": extEthernetInterfaceIPv6AutoIPConfigEnabled,
       "extEthernetInterfaceDHCPv6Config": extEthernetInterfaceDHCPv6Config,
       "extEthernetInterfaceDHCPv6Enabled": extEthernetInterfaceDHCPv6Enabled,
       "extEthernetInterfaceDHCPv6IPAddress": extEthernetInterfaceDHCPv6IPAddress,
       "extEthernetInterfaceDHCPv6DomainName": extEthernetInterfaceDHCPv6DomainName,
       "extEthernetInterfaceDHCPv6PrimaryDNSServer": extEthernetInterfaceDHCPv6PrimaryDNSServer,
       "extEthernetInterfaceDHCPv6SecondaryDNSServer": extEthernetInterfaceDHCPv6SecondaryDNSServer,
       "extEthernetInterfaceDHCPv6TertiaryDNSServer": extEthernetInterfaceDHCPv6TertiaryDNSServer,
       "extEthernetInterfaceDHCPv6Server": extEthernetInterfaceDHCPv6Server,
       "extEthernetInterfaceIPv6StatelessAutoConfig": extEthernetInterfaceIPv6StatelessAutoConfig,
       "extEthernetInterfaceIPv6StatelessAutoConfigEnabled": extEthernetInterfaceIPv6StatelessAutoConfigEnabled,
       "extEthernetInterfaceStatelessAutoConfigAddressesTable": extEthernetInterfaceStatelessAutoConfigAddressesTable,
       "extEthernetInterfaceStatelessAutoConfigAddressesEntry": extEthernetInterfaceStatelessAutoConfigAddressesEntry,
       "extEthernetInterfaceStatelessAutoConfigAddressesIndex": extEthernetInterfaceStatelessAutoConfigAddressesIndex,
       "extEthernetInterfaceStatelessAutoConfigAddresses": extEthernetInterfaceStatelessAutoConfigAddresses,
       "extEthernetInterfaceStatelessAutoConfigAddressesPrefixLen": extEthernetInterfaceStatelessAutoConfigAddressesPrefixLen,
       "standbyExtEthernetInterfaceIPv6": standbyExtEthernetInterfaceIPv6,
       "standbyEthernetInterfaceIPv6LocalAddress": standbyEthernetInterfaceIPv6LocalAddress,
       "standbyEthernetInterfaceIPv6LinkLocalAddress": standbyEthernetInterfaceIPv6LinkLocalAddress,
       "standbyEthernetInterfaceIPv6StaticIPConfig": standbyEthernetInterfaceIPv6StaticIPConfig,
       "standbyEthernetInterfaceIPv6StaticIPConfigEnabled": standbyEthernetInterfaceIPv6StaticIPConfigEnabled,
       "standbyEthernetInterfaceIPv6StaticIPAddress": standbyEthernetInterfaceIPv6StaticIPAddress,
       "standbyEthernetInterfaceIPv6StaticIPAddressPrefixLen": standbyEthernetInterfaceIPv6StaticIPAddressPrefixLen,
       "standbyEthernetInterfaceIPv6StaticIPDefaultRoute": standbyEthernetInterfaceIPv6StaticIPDefaultRoute,
       "standbyEthernetInterfaceDHCPv6Config": standbyEthernetInterfaceDHCPv6Config,
       "standbyEthernetInterfaceDHCPv6Enabled": standbyEthernetInterfaceDHCPv6Enabled,
       "standbyEthernetInterfaceDHCPv6IPAddress": standbyEthernetInterfaceDHCPv6IPAddress,
       "standbyEthernetInterfaceDHCPv6DomainName": standbyEthernetInterfaceDHCPv6DomainName,
       "standbyEthernetInterfaceStatelessAutoConfigAddressesTable": standbyEthernetInterfaceStatelessAutoConfigAddressesTable,
       "standbyEthernetInterfaceStatelessAutoConfigAddressesEntry": standbyEthernetInterfaceStatelessAutoConfigAddressesEntry,
       "standbyEthernetInterfaceStatelessAutoConfigAddressesIndex": standbyEthernetInterfaceStatelessAutoConfigAddressesIndex,
       "standbyEthernetInterfaceStatelessAutoConfigAddresses": standbyEthernetInterfaceStatelessAutoConfigAddresses,
       "standbyEthernetInterfaceStatelessAutoConfigAddressesPrefixLen": standbyEthernetInterfaceStatelessAutoConfigAddressesPrefixLen,
       "ddnsStatus": ddnsStatus,
       "hostName": hostName,
       "standbyHostName": standbyHostName,
       "domainName": domainName,
       "standbyDomainName": standbyDomainName,
       "vlanConfigure": vlanConfigure,
       "vlanGlobalState": vlanGlobalState,
       "vlanCommitTimeout": vlanCommitTimeout,
       "vlanCommitState": vlanCommitState,
       "vlanTable": vlanTable,
       "vlanEntry": vlanEntry,
       "vlanEntryIndex": vlanEntryIndex,
       "vlanEntryVlanId": vlanEntryVlanId,
       "vlanEntryName": vlanEntryName,
       "vlanEntryStatus": vlanEntryStatus,
       "vlanEntryState": vlanEntryState,
       "vlanEntrySOLAccess": vlanEntrySOLAccess,
       "vlanEntrycKVMAccess": vlanEntrycKVMAccess,
       "vlanEntryTagging": vlanEntryTagging,
       "vlanEntryIOModuleAccess": vlanEntryIOModuleAccess,
       "vlanEntryVlanDefault": vlanEntryVlanDefault,
       "vlanEntryIPv4StaticAddress": vlanEntryIPv4StaticAddress,
       "vlanEntryIPv4StaticGateway": vlanEntryIPv4StaticGateway,
       "vlanEntryIPv4StaticMask": vlanEntryIPv4StaticMask,
       "vlanEntryIPv4SubnetRoute1": vlanEntryIPv4SubnetRoute1,
       "vlanEntryIPv4SubnetRouteMask1": vlanEntryIPv4SubnetRouteMask1,
       "vlanEntryIPv4SubnetRoute2": vlanEntryIPv4SubnetRoute2,
       "vlanEntryIPv4SubnetRouteMask2": vlanEntryIPv4SubnetRouteMask2,
       "vlanEntryIPv4SubnetRoute3": vlanEntryIPv4SubnetRoute3,
       "vlanEntryIPv4SubnetRouteMask3": vlanEntryIPv4SubnetRouteMask3,
       "tcpProtocols": tcpProtocols,
       "snmpAgentConfig": snmpAgentConfig,
       "snmpSystemContact": snmpSystemContact,
       "snmpSystemLocation": snmpSystemLocation,
       "snmpSystemAgentTrapsDisable": snmpSystemAgentTrapsDisable,
       "snmpAgentCommunityConfig": snmpAgentCommunityConfig,
       "snmpCommunityTable": snmpCommunityTable,
       "snmpCommunityEntry": snmpCommunityEntry,
       "snmpCommunityEntryIndex": snmpCommunityEntryIndex,
       "snmpCommunityEntryCommunityName": snmpCommunityEntryCommunityName,
       "snmpCommunityEntryCommunityIpAddress1": snmpCommunityEntryCommunityIpAddress1,
       "snmpCommunityEntryCommunityIpAddress2": snmpCommunityEntryCommunityIpAddress2,
       "snmpCommunityEntryCommunityIpAddress3": snmpCommunityEntryCommunityIpAddress3,
       "snmpCommunityEntryCommunityViewType": snmpCommunityEntryCommunityViewType,
       "snmpCommunityEntryCommunityIpAddress4": snmpCommunityEntryCommunityIpAddress4,
       "snmpCommunityEntryCommunityIpAddress5": snmpCommunityEntryCommunityIpAddress5,
       "snmpCommunityEntryCommunityIpAddress6": snmpCommunityEntryCommunityIpAddress6,
       "snmpCommunityEntryCommunityIpAddress7": snmpCommunityEntryCommunityIpAddress7,
       "snmpCommunityEntryCommunityIpAddress8": snmpCommunityEntryCommunityIpAddress8,
       "snmpCommunityEntryCommunityIpAddress9": snmpCommunityEntryCommunityIpAddress9,
       "snmpCommunityEntryCommunityIpAddress10": snmpCommunityEntryCommunityIpAddress10,
       "snmpCommunityEntryCommunityIpAddress11": snmpCommunityEntryCommunityIpAddress11,
       "snmpCommunityEntryCommunityIpAddress12": snmpCommunityEntryCommunityIpAddress12,
       "snmpv1SystemAgentEnable": snmpv1SystemAgentEnable,
       "snmpv3SystemAgentEnable": snmpv3SystemAgentEnable,
       "snmpAgentUserProfileConfig": snmpAgentUserProfileConfig,
       "snmpUserProfileTable": snmpUserProfileTable,
       "snmpUserProfileEntry": snmpUserProfileEntry,
       "snmpUserProfileEntryIndex": snmpUserProfileEntryIndex,
       "snmpUserProfileEntryContextName": snmpUserProfileEntryContextName,
       "snmpUserProfileEntryAuthProt": snmpUserProfileEntryAuthProt,
       "snmpUserProfileEntryPrivProt": snmpUserProfileEntryPrivProt,
       "snmpUserProfileEntryPrivPassword": snmpUserProfileEntryPrivPassword,
       "snmpUserProfileEntryViewType": snmpUserProfileEntryViewType,
       "snmpUserProfileEntryIpAddress": snmpUserProfileEntryIpAddress,
       "dnsConfig": dnsConfig,
       "dnsEnabled": dnsEnabled,
       "dnsServerIPAddress1": dnsServerIPAddress1,
       "dnsServerIPAddress2": dnsServerIPAddress2,
       "dnsServerIPAddress3": dnsServerIPAddress3,
       "dnsServerIPv6Address1": dnsServerIPv6Address1,
       "dnsServerIPv6Address2": dnsServerIPv6Address2,
       "dnsServerIPv6Address3": dnsServerIPv6Address3,
       "dnsPriority": dnsPriority,
       "smtpConfig": smtpConfig,
       "smtpServerNameOrIPAddress": smtpServerNameOrIPAddress,
       "attachmentsToEmailAlerts": attachmentsToEmailAlerts,
       "smtpEmailDomain": smtpEmailDomain,
       "tcpApplicationConfig": tcpApplicationConfig,
       "telnetInactivityTimeout": telnetInactivityTimeout,
       "commandModeInactivityTimeout": commandModeInactivityTimeout,
       "secureCommandModeEnable": secureCommandModeEnable,
       "commandModeEnable": commandModeEnable,
       "slpAddrType": slpAddrType,
       "slpMulticastAddr": slpMulticastAddr,
       "slpEnable": slpEnable,
       "telnetEnable": telnetEnable,
       "sshEnable": sshEnable,
       "sshVersion": sshVersion,
       "sslServerEnable": sslServerEnable,
       "sslClientEnable": sslClientEnable,
       "ftpEnable": ftpEnable,
       "tftpEnable": tftpEnable,
       "smashTelnetEnable": smashTelnetEnable,
       "smashSshEnable": smashSshEnable,
       "tftpCreateEmptyFile": tftpCreateEmptyFile,
       "ftpTimeout": ftpTimeout,
       "rdEnable": rdEnable,
       "rdocEnable": rdocEnable,
       "kvmEnable": kvmEnable,
       "mmSshServerConfig": mmSshServerConfig,
       "mmSshServerHostKeyTable": mmSshServerHostKeyTable,
       "mmSshServerHostKeyEntry": mmSshServerHostKeyEntry,
       "mmSshServerHostKeyIndex": mmSshServerHostKeyIndex,
       "mmSshServerHostKeyType": mmSshServerHostKeyType,
       "mmSshServerHostKeySize": mmSshServerHostKeySize,
       "mmSshServerHostKeyFingerprint": mmSshServerHostKeyFingerprint,
       "mmSshServerHostKeyGenerate": mmSshServerHostKeyGenerate,
       "mmSshServerHostKeyGenerateProgress": mmSshServerHostKeyGenerateProgress,
       "rpEnable": rpEnable,
       "tcpPortAssignmentCfg": tcpPortAssignmentCfg,
       "tcpPortsRestoreDefault": tcpPortsRestoreDefault,
       "httpPortAssignment": httpPortAssignment,
       "httpsPortAssignment": httpsPortAssignment,
       "telnetPortAssignment": telnetPortAssignment,
       "sshPortAssignment": sshPortAssignment,
       "snmpAgentPortAssignment": snmpAgentPortAssignment,
       "snmpTrapsPortAssignment": snmpTrapsPortAssignment,
       "commandModePortAssignment": commandModePortAssignment,
       "secureCommandModePortAssignment": secureCommandModePortAssignment,
       "rdPortAssignment": rdPortAssignment,
       "rdocPortAssignment": rdocPortAssignment,
       "kvmPortAssignment": kvmPortAssignment,
       "ftpPortAssignment": ftpPortAssignment,
       "ftpDataPortAssignment": ftpDataPortAssignment,
       "tftpPortAssignment": tftpPortAssignment,
       "smashTelnetPortAssignment": smashTelnetPortAssignment,
       "smashSshPortAssignment": smashSshPortAssignment,
       "slpPortAssignment": slpPortAssignment,
       "sdsPortAssignment": sdsPortAssignment,
       "rpPortAssignment": rpPortAssignment,
       "ldapClientCfg": ldapClientCfg,
       "ldapServer1NameOrIPAddress": ldapServer1NameOrIPAddress,
       "ldapServer1PortNumber": ldapServer1PortNumber,
       "ldapServer2NameOrIPAddress": ldapServer2NameOrIPAddress,
       "ldapServer2PortNumber": ldapServer2PortNumber,
       "ldapServer3NameOrIPAddress": ldapServer3NameOrIPAddress,
       "ldapServer3PortNumber": ldapServer3PortNumber,
       "ldapRootDN": ldapRootDN,
       "ldapUserSearchBaseDN": ldapUserSearchBaseDN,
       "ldapGroupFilter": ldapGroupFilter,
       "ldapBindingMethod": ldapBindingMethod,
       "ldapClientAuthenticationDN": ldapClientAuthenticationDN,
       "ldapClientAuthenticationPassword": ldapClientAuthenticationPassword,
       "ldapUIDsearchAttribute": ldapUIDsearchAttribute,
       "ldapGroupSearchAttribute": ldapGroupSearchAttribute,
       "ldapLoginPermissionAttribute": ldapLoginPermissionAttribute,
       "ldapUseDNSOrPreConfiguredServers": ldapUseDNSOrPreConfiguredServers,
       "ldapDomainSource": ldapDomainSource,
       "ldapSearchDomain": ldapSearchDomain,
       "ldapServiceName": ldapServiceName,
       "ldapRBSModelCfg": ldapRBSModelCfg,
       "ldapTargetName": ldapTargetName,
       "ldapAuthCfg": ldapAuthCfg,
       "ldapForestName": ldapForestName,
       "ldapDomainName": ldapDomainName,
       "ldapServer4NameOrIPAddress": ldapServer4NameOrIPAddress,
       "ldapServer4PortNumber": ldapServer4PortNumber,
       "uplinkCheckConfig": uplinkCheckConfig,
       "uplinkCheckEnabled": uplinkCheckEnabled,
       "uplinkCheckDelay": uplinkCheckDelay,
       "logicalUplinkDestination": logicalUplinkDestination,
       "logicalUplinkCheckEnabled": logicalUplinkCheckEnabled,
       "logicalUplinkCheckDelay": logicalUplinkCheckDelay,
       "physicalUplinkCheckDelayInSecs": physicalUplinkCheckDelayInSecs,
       "logicalUplinkCheckDelayInSecs": logicalUplinkCheckDelayInSecs,
       "logicalUplinkIPv6Destination": logicalUplinkIPv6Destination,
       "logicalUplinkFailoverPolicy": logicalUplinkFailoverPolicy,
       "ntpConfig": ntpConfig,
       "ntpEnable": ntpEnable,
       "ntpIpAddressHostname": ntpIpAddressHostname,
       "ntpUpdateFrequency": ntpUpdateFrequency,
       "ntpLastUpdate": ntpLastUpdate,
       "ntpUpdateClock": ntpUpdateClock,
       "ntpAuthEntry": ntpAuthEntry,
       "ntpAuthEnable": ntpAuthEnable,
       "syslogConfig": syslogConfig,
       "syslogSevFilterLevel": syslogSevFilterLevel,
       "syslogCollectorConfig": syslogCollectorConfig,
       "syslogCollectorTable": syslogCollectorTable,
       "syslogCollectorEntry": syslogCollectorEntry,
       "syslogCollectorIndex": syslogCollectorIndex,
       "syslogCollectorHostnameOrIpAddress": syslogCollectorHostnameOrIpAddress,
       "syslogCollectorPort": syslogCollectorPort,
       "syslogCollectorEnable": syslogCollectorEnable,
       "syslogTestPacket": syslogTestPacket,
       "solConfiguration": solConfiguration,
       "solGlobalConfig": solGlobalConfig,
       "solEnable": solEnable,
       "solVlanId": solVlanId,
       "solAccumulateTimeout": solAccumulateTimeout,
       "solCharSendThreshold": solCharSendThreshold,
       "solRetry": solRetry,
       "solRetryInterval": solRetryInterval,
       "solExitToCliKeySeq": solExitToCliKeySeq,
       "solResetBladeKeySeq": solResetBladeKeySeq,
       "solBladeConfig": solBladeConfig,
       "solBladeTable": solBladeTable,
       "solBladeEntry": solBladeEntry,
       "solBladeIndex": solBladeIndex,
       "solBladeName": solBladeName,
       "solBladeEnable": solBladeEnable,
       "solBladeIpAddr": solBladeIpAddr,
       "solBladeSessionStatus": solBladeSessionStatus,
       "solBladeCapability": solBladeCapability,
       "chassisInternalNetwork": chassisInternalNetwork,
       "cinsSupported": cinsSupported,
       "cinGlobalEnable": cinGlobalEnable,
       "cinTable": cinTable,
       "cinEntry": cinEntry,
       "cinIndex": cinIndex,
       "cinDefExists": cinDefExists,
       "cinDelete": cinDelete,
       "cinEnable": cinEnable,
       "cinId": cinId,
       "cinIpAddress": cinIpAddress,
       "cinIpv6Address": cinIpv6Address,
       "cinStatus": cinStatus,
       "cinStatusTable": cinStatusTable,
       "cinStatusEntry": cinStatusEntry,
       "cinStatusIndex": cinStatusIndex,
       "cinStatusString": cinStatusString,
       "cinPortConfigTable": cinPortConfigTable,
       "cinPortConfigEntry": cinPortConfigEntry,
       "cinPortConfigCINIndex": cinPortConfigCINIndex,
       "cinPortConfigIndex": cinPortConfigIndex,
       "cinPortConfigProtocolID": cinPortConfigProtocolID,
       "cinPortConfigExternalPort": cinPortConfigExternalPort,
       "cinPortConfigInternalPort": cinPortConfigInternalPort,
       "cinPortConfigEnable": cinPortConfigEnable,
       "cinPortConfigDirection": cinPortConfigDirection,
       "configurationManagement": configurationManagement,
       "saveConfigurationToChassis": saveConfigurationToChassis,
       "restoreConfigurationFromChassis": restoreConfigurationFromChassis,
       "autoReadConfigInNewChassis": autoReadConfigInNewChassis,
       "telcoManagement": telcoManagement,
       "telcoAlarmReq": telcoAlarmReq,
       "telcoAlarmSet": telcoAlarmSet,
       "telcoAlarmAck": telcoAlarmAck,
       "telcoAlarmClear": telcoAlarmClear,
       "telcoHWManagement": telcoHWManagement,
       "tappowerReq": tappowerReq,
       "tappoweronoff": tappoweronoff,
       "ncReq": ncReq,
       "ncReqTable": ncReqTable,
       "ncReqEntry": ncReqEntry,
       "ncReqIndex": ncReqIndex,
       "ncReqBayNumber": ncReqBayNumber,
       "ncReqPoweronoff": ncReqPoweronoff,
       "telcoOEM": telcoOEM,
       "telcoOEMs": telcoOEMs,
       "restartReset": restartReset,
       "restartSPImmediately": restartSPImmediately,
       "restartStandbyMM": restartStandbyMM,
       "switchOverRedundantMM": switchOverRedundantMM,
       "resetSPConfigAndRestart": resetSPConfigAndRestart,
       "resetSPConfigAndRestartSaveLogs": resetSPConfigAndRestartSaveLogs,
       "blades": blades,
       "processorBlade": processorBlade,
       "bladeMediaTrayBladeId": bladeMediaTrayBladeId,
       "bladeKVMBladeId": bladeKVMBladeId,
       "bladeBootSequenceTable": bladeBootSequenceTable,
       "bladeBootSequenceEntry": bladeBootSequenceEntry,
       "bootSequenceIndex": bootSequenceIndex,
       "bootSequenceBladeId": bootSequenceBladeId,
       "bootSequenceBladeExists": bootSequenceBladeExists,
       "bootSequenceBladePowerState": bootSequenceBladePowerState,
       "bootSequenceBladeHealthState": bootSequenceBladeHealthState,
       "bootSequenceBladeName": bootSequenceBladeName,
       "bootSequence1": bootSequence1,
       "bootSequence2": bootSequence2,
       "bootSequence3": bootSequence3,
       "bootSequence4": bootSequence4,
       "bladeRemoteControl": bladeRemoteControl,
       "bladeRemoteControlTable": bladeRemoteControlTable,
       "bladeRemoteControlEntry": bladeRemoteControlEntry,
       "remoteControlIndex": remoteControlIndex,
       "remoteControlBladeId": remoteControlBladeId,
       "remoteControlBladeExists": remoteControlBladeExists,
       "remoteControlBladePowerState": remoteControlBladePowerState,
       "remoteControlBladeHealthState": remoteControlBladeHealthState,
       "remoteControlBladeName": remoteControlBladeName,
       "remotePowerControlEnable": remotePowerControlEnable,
       "remoteMediaTrayControlEnable": remoteMediaTrayControlEnable,
       "remoteKVMControlEnable": remoteKVMControlEnable,
       "remoteWakeOnLanControlEnable": remoteWakeOnLanControlEnable,
       "remoteMediaTraySwitchEnable": remoteMediaTraySwitchEnable,
       "bladePolicy": bladePolicy,
       "bladePolicyPowerControlEnable": bladePolicyPowerControlEnable,
       "bladePolicyMediaTrayControlEnable": bladePolicyMediaTrayControlEnable,
       "bladePolicyKVMControlEnable": bladePolicyKVMControlEnable,
       "bladePolicyWakeOnLanControlEnable": bladePolicyWakeOnLanControlEnable,
       "bladePolicyMediaTraySwitchEnable": bladePolicyMediaTraySwitchEnable,
       "bladePolicyMultipleRemoteVideoEnable": bladePolicyMultipleRemoteVideoEnable,
       "bladePolicyAutoPowerOn": bladePolicyAutoPowerOn,
       "bladePolicyDisconnectionMode": bladePolicyDisconnectionMode,
       "bladePolicySessionTimeOut": bladePolicySessionTimeOut,
       "bladePolicyRequestTimeOut": bladePolicyRequestTimeOut,
       "bladePolicyRetryTimeOut": bladePolicyRetryTimeOut,
       "bladePolicySessionLostTimeOut": bladePolicySessionLostTimeOut,
       "bladeMonitors": bladeMonitors,
       "bladeSystemStatusTable": bladeSystemStatusTable,
       "bladeSystemStatusEntry": bladeSystemStatusEntry,
       "bladeStatusIndex": bladeStatusIndex,
       "bladeId": bladeId,
       "bladeExists": bladeExists,
       "bladePowerState": bladePowerState,
       "bladeHealthState": bladeHealthState,
       "bladeName": bladeName,
       "bladeRemotePowerEnable": bladeRemotePowerEnable,
       "bladeRemoteMediaTrayEnable": bladeRemoteMediaTrayEnable,
       "bladeRemoteKVMEnable": bladeRemoteKVMEnable,
       "bladeConnectionType": bladeConnectionType,
       "bladeOwnsKVM": bladeOwnsKVM,
       "bladeOwnsMediaTray": bladeOwnsMediaTray,
       "bladeRemoteWakeOnLanEnable": bladeRemoteWakeOnLanEnable,
       "bladeServerExpansion": bladeServerExpansion,
       "bladeWidth": bladeWidth,
       "bladeSupportCapacityOnDemand": bladeSupportCapacityOnDemand,
       "bladeServerExpansion2": bladeServerExpansion2,
       "bladecKVMStatus": bladecKVMStatus,
       "bladeConnectionType2": bladeConnectionType2,
       "bladeConnectionType3": bladeConnectionType3,
       "bladeConnectionType4": bladeConnectionType4,
       "bladeConnectionType5": bladeConnectionType5,
       "bladeHighSpeedConnectionType": bladeHighSpeedConnectionType,
       "bladeIOCompatibility": bladeIOCompatibility,
       "bladeInventoryReady": bladeInventoryReady,
       "bladeHealthSummaryTable": bladeHealthSummaryTable,
       "bladeHealthSummaryEntry": bladeHealthSummaryEntry,
       "bladeHealthSummaryIndex": bladeHealthSummaryIndex,
       "bladeHealthSummaryBladeId": bladeHealthSummaryBladeId,
       "bladeHealthSummarySeverity": bladeHealthSummarySeverity,
       "bladeHealthSummaryDescription": bladeHealthSummaryDescription,
       "bladeHealthSummaryDateTime": bladeHealthSummaryDateTime,
       "bladeTemperaturesTable": bladeTemperaturesTable,
       "bladeTemperaturesEntry": bladeTemperaturesEntry,
       "temperatureIndex": temperatureIndex,
       "temperatureBladeId": temperatureBladeId,
       "temperatureBladeExists": temperatureBladeExists,
       "temperatureBladePowerState": temperatureBladePowerState,
       "temperatureBladeName": temperatureBladeName,
       "temperatureCPU1": temperatureCPU1,
       "temperatureCPU2": temperatureCPU2,
       "temperatureCPU3": temperatureCPU3,
       "temperatureCPU4": temperatureCPU4,
       "temperatureDASD1": temperatureDASD1,
       "bladeSensorTempCapability": bladeSensorTempCapability,
       "bladeSensor1Temp": bladeSensor1Temp,
       "bladeSensor2Temp": bladeSensor2Temp,
       "bladeSensor3Temp": bladeSensor3Temp,
       "bladeSensor4Temp": bladeSensor4Temp,
       "bladeSensor5Temp": bladeSensor5Temp,
       "bladeSensor6Temp": bladeSensor6Temp,
       "bladeSensor7Temp": bladeSensor7Temp,
       "bladeSensor8Temp": bladeSensor8Temp,
       "bladeSensor9Temp": bladeSensor9Temp,
       "bladeTemperatureThresholdsTable": bladeTemperatureThresholdsTable,
       "bladeTemperatureThresholdsEntry": bladeTemperatureThresholdsEntry,
       "temperatureThresholdIndex": temperatureThresholdIndex,
       "temperatureThresholdBladeId": temperatureThresholdBladeId,
       "temperatureThresholdBladeExists": temperatureThresholdBladeExists,
       "temperatureThresholdBladePowerState": temperatureThresholdBladePowerState,
       "temperatureThresholdBladeName": temperatureThresholdBladeName,
       "temperatureCPU1HardShutdown": temperatureCPU1HardShutdown,
       "temperatureCPU1Warning": temperatureCPU1Warning,
       "temperatureCPU1WarningReset": temperatureCPU1WarningReset,
       "temperatureCPU2HardShutdown": temperatureCPU2HardShutdown,
       "temperatureCPU2Warning": temperatureCPU2Warning,
       "temperatureCPU2WarningReset": temperatureCPU2WarningReset,
       "temperatureCPU3HardShutdown": temperatureCPU3HardShutdown,
       "temperatureCPU3Warning": temperatureCPU3Warning,
       "temperatureCPU3WarningReset": temperatureCPU3WarningReset,
       "temperatureCPU4HardShutdown": temperatureCPU4HardShutdown,
       "temperatureCPU4Warning": temperatureCPU4Warning,
       "temperatureCPU4WarningReset": temperatureCPU4WarningReset,
       "temperatureDASD1HardShutdown": temperatureDASD1HardShutdown,
       "temperatureDASD1Warning": temperatureDASD1Warning,
       "temperatureDASD1WarningReset": temperatureDASD1WarningReset,
       "bladeTempThresholdSensorCapability": bladeTempThresholdSensorCapability,
       "temperatureSensor1HardShutdown": temperatureSensor1HardShutdown,
       "temperatureSensor1Warning": temperatureSensor1Warning,
       "temperatureSensor1WarningReset": temperatureSensor1WarningReset,
       "temperatureSensor2HardShutdown": temperatureSensor2HardShutdown,
       "temperatureSensor2Warning": temperatureSensor2Warning,
       "temperatureSensor2WarningReset": temperatureSensor2WarningReset,
       "temperatureSensor3HardShutdown": temperatureSensor3HardShutdown,
       "temperatureSensor3Warning": temperatureSensor3Warning,
       "temperatureSensor3WarningReset": temperatureSensor3WarningReset,
       "temperatureSensor4HardShutdown": temperatureSensor4HardShutdown,
       "temperatureSensor4Warning": temperatureSensor4Warning,
       "temperatureSensor4WarningReset": temperatureSensor4WarningReset,
       "temperatureSensor5HardShutdown": temperatureSensor5HardShutdown,
       "temperatureSensor5Warning": temperatureSensor5Warning,
       "temperatureSensor5WarningReset": temperatureSensor5WarningReset,
       "temperatureSensor6HardShutdown": temperatureSensor6HardShutdown,
       "temperatureSensor6Warning": temperatureSensor6Warning,
       "temperatureSensor6WarningReset": temperatureSensor6WarningReset,
       "temperatureSensor7HardShutdown": temperatureSensor7HardShutdown,
       "temperatureSensor7Warning": temperatureSensor7Warning,
       "temperatureSensor7WarningReset": temperatureSensor7WarningReset,
       "temperatureSensor8HardShutdown": temperatureSensor8HardShutdown,
       "temperatureSensor8Warning": temperatureSensor8Warning,
       "temperatureSensor8WarningReset": temperatureSensor8WarningReset,
       "temperatureSensor9HardShutdown": temperatureSensor9HardShutdown,
       "temperatureSensor9Warning": temperatureSensor9Warning,
       "temperatureSensor9WarningReset": temperatureSensor9WarningReset,
       "bladeVoltagesTable": bladeVoltagesTable,
       "bladeVoltagesEntry": bladeVoltagesEntry,
       "voltageIndex": voltageIndex,
       "voltageBladeId": voltageBladeId,
       "voltageBladeExists": voltageBladeExists,
       "voltageBladePowerState": voltageBladePowerState,
       "voltageBladeName": voltageBladeName,
       "bladePlus5Volt": bladePlus5Volt,
       "bladePlus3pt3Volt": bladePlus3pt3Volt,
       "bladePlus12Volt": bladePlus12Volt,
       "bladePlus2pt5Volt": bladePlus2pt5Volt,
       "bladePlus1pt5Volt": bladePlus1pt5Volt,
       "bladePlus1pt25Volt": bladePlus1pt25Volt,
       "bladeVRM1Volt": bladeVRM1Volt,
       "bladeSensorVoltCapability": bladeSensorVoltCapability,
       "bladeSensor1Volt": bladeSensor1Volt,
       "bladeSensor2Volt": bladeSensor2Volt,
       "bladeSensor3Volt": bladeSensor3Volt,
       "bladeSensor4Volt": bladeSensor4Volt,
       "bladeSensor5Volt": bladeSensor5Volt,
       "bladeSensor6Volt": bladeSensor6Volt,
       "bladeSensor7Volt": bladeSensor7Volt,
       "bladeSensor8Volt": bladeSensor8Volt,
       "bladeSensor9Volt": bladeSensor9Volt,
       "bladeSensor10Volt": bladeSensor10Volt,
       "bladeSensor11Volt": bladeSensor11Volt,
       "bladeSensor12Volt": bladeSensor12Volt,
       "bladeSensor13Volt": bladeSensor13Volt,
       "bladeSensor14Volt": bladeSensor14Volt,
       "bladeSensor15Volt": bladeSensor15Volt,
       "bladeSensor16Volt": bladeSensor16Volt,
       "bladeSensor17Volt": bladeSensor17Volt,
       "bladeSensor18Volt": bladeSensor18Volt,
       "bladeSensor19Volt": bladeSensor19Volt,
       "bladeSensor20Volt": bladeSensor20Volt,
       "bladeSensor21Volt": bladeSensor21Volt,
       "bladeSensor22Volt": bladeSensor22Volt,
       "bladeSensor23Volt": bladeSensor23Volt,
       "bladeSensor24Volt": bladeSensor24Volt,
       "bladeSensor25Volt": bladeSensor25Volt,
       "bladeSensor26Volt": bladeSensor26Volt,
       "bladeSensor27Volt": bladeSensor27Volt,
       "bladeSensor28Volt": bladeSensor28Volt,
       "bladeSensor29Volt": bladeSensor29Volt,
       "bladeSensor30Volt": bladeSensor30Volt,
       "bladeVoltageThresholdsTable": bladeVoltageThresholdsTable,
       "bladeVoltageThresholdsEntry": bladeVoltageThresholdsEntry,
       "voltageThresholdIndex": voltageThresholdIndex,
       "voltageThresholdBladeId": voltageThresholdBladeId,
       "voltageThresholdBladeExists": voltageThresholdBladeExists,
       "voltageThresholdBladePowerState": voltageThresholdBladePowerState,
       "voltageThresholdBladeName": voltageThresholdBladeName,
       "bladePlus5VoltHighWarning": bladePlus5VoltHighWarning,
       "bladePlus5VoltLowWarning": bladePlus5VoltLowWarning,
       "bladePlus3pt3VoltHighWarning": bladePlus3pt3VoltHighWarning,
       "bladePlus3pt3VoltLowWarning": bladePlus3pt3VoltLowWarning,
       "bladePlus12VoltHighWarning": bladePlus12VoltHighWarning,
       "bladePlus12VoltLowWarning": bladePlus12VoltLowWarning,
       "bladePlus2pt5VoltHighWarning": bladePlus2pt5VoltHighWarning,
       "bladePlus2pt5VoltLowWarning": bladePlus2pt5VoltLowWarning,
       "bladePlus1pt5VoltHighWarning": bladePlus1pt5VoltHighWarning,
       "bladePlus1pt5VoltLowWarning": bladePlus1pt5VoltLowWarning,
       "bladePlus1pt25VoltHighWarning": bladePlus1pt25VoltHighWarning,
       "bladePlus1pt25VoltLowWarning": bladePlus1pt25VoltLowWarning,
       "bladeVoltThresholdSensorCapability": bladeVoltThresholdSensorCapability,
       "bladeSensor1VoltHighWarning": bladeSensor1VoltHighWarning,
       "bladeSensor1VoltLowWarning": bladeSensor1VoltLowWarning,
       "bladeSensor2VoltHighWarning": bladeSensor2VoltHighWarning,
       "bladeSensor2VoltLowWarning": bladeSensor2VoltLowWarning,
       "bladeSensor3VoltHighWarning": bladeSensor3VoltHighWarning,
       "bladeSensor3VoltLowWarning": bladeSensor3VoltLowWarning,
       "bladeSensor4VoltHighWarning": bladeSensor4VoltHighWarning,
       "bladeSensor4VoltLowWarning": bladeSensor4VoltLowWarning,
       "bladeSensor5VoltHighWarning": bladeSensor5VoltHighWarning,
       "bladeSensor5VoltLowWarning": bladeSensor5VoltLowWarning,
       "bladeSensor6VoltHighWarning": bladeSensor6VoltHighWarning,
       "bladeSensor6VoltLowWarning": bladeSensor6VoltLowWarning,
       "bladeSensor7VoltHighWarning": bladeSensor7VoltHighWarning,
       "bladeSensor7VoltLowWarning": bladeSensor7VoltLowWarning,
       "bladeSensor8VoltHighWarning": bladeSensor8VoltHighWarning,
       "bladeSensor8VoltLowWarning": bladeSensor8VoltLowWarning,
       "bladeSensor9VoltHighWarning": bladeSensor9VoltHighWarning,
       "bladeSensor9VoltLowWarning": bladeSensor9VoltLowWarning,
       "bladeSensor10VoltHighWarning": bladeSensor10VoltHighWarning,
       "bladeSensor10VoltLowWarning": bladeSensor10VoltLowWarning,
       "bladeSensor11VoltHighWarning": bladeSensor11VoltHighWarning,
       "bladeSensor11VoltLowWarning": bladeSensor11VoltLowWarning,
       "bladeSensor12VoltHighWarning": bladeSensor12VoltHighWarning,
       "bladeSensor12VoltLowWarning": bladeSensor12VoltLowWarning,
       "bladeSensor13VoltHighWarning": bladeSensor13VoltHighWarning,
       "bladeSensor13VoltLowWarning": bladeSensor13VoltLowWarning,
       "bladeSensor14VoltHighWarning": bladeSensor14VoltHighWarning,
       "bladeSensor14VoltLowWarning": bladeSensor14VoltLowWarning,
       "bladeSensor15VoltHighWarning": bladeSensor15VoltHighWarning,
       "bladeSensor15VoltLowWarning": bladeSensor15VoltLowWarning,
       "bladeSensor16VoltHighWarning": bladeSensor16VoltHighWarning,
       "bladeSensor16VoltLowWarning": bladeSensor16VoltLowWarning,
       "bladeSensor17VoltHighWarning": bladeSensor17VoltHighWarning,
       "bladeSensor17VoltLowWarning": bladeSensor17VoltLowWarning,
       "bladeSensor18VoltHighWarning": bladeSensor18VoltHighWarning,
       "bladeSensor18VoltLowWarning": bladeSensor18VoltLowWarning,
       "bladeSensor19VoltHighWarning": bladeSensor19VoltHighWarning,
       "bladeSensor19VoltLowWarning": bladeSensor19VoltLowWarning,
       "bladeSensor20VoltHighWarning": bladeSensor20VoltHighWarning,
       "bladeSensor20VoltLowWarning": bladeSensor20VoltLowWarning,
       "bladeSensor21VoltHighWarning": bladeSensor21VoltHighWarning,
       "bladeSensor21VoltLowWarning": bladeSensor21VoltLowWarning,
       "bladeSensor22VoltHighWarning": bladeSensor22VoltHighWarning,
       "bladeSensor22VoltLowWarning": bladeSensor22VoltLowWarning,
       "bladeSensor23VoltHighWarning": bladeSensor23VoltHighWarning,
       "bladeSensor23VoltLowWarning": bladeSensor23VoltLowWarning,
       "bladeSensor24VoltHighWarning": bladeSensor24VoltHighWarning,
       "bladeSensor24VoltLowWarning": bladeSensor24VoltLowWarning,
       "bladeSensor25VoltHighWarning": bladeSensor25VoltHighWarning,
       "bladeSensor25VoltLowWarning": bladeSensor25VoltLowWarning,
       "bladeSensor26VoltHighWarning": bladeSensor26VoltHighWarning,
       "bladeSensor26VoltLowWarning": bladeSensor26VoltLowWarning,
       "bladeSensor27VoltHighWarning": bladeSensor27VoltHighWarning,
       "bladeSensor27VoltLowWarning": bladeSensor27VoltLowWarning,
       "bladeSensor28VoltHighWarning": bladeSensor28VoltHighWarning,
       "bladeSensor28VoltLowWarning": bladeSensor28VoltLowWarning,
       "bladeSensor29VoltHighWarning": bladeSensor29VoltHighWarning,
       "bladeSensor29VoltLowWarning": bladeSensor29VoltLowWarning,
       "bladeSensor30VoltHighWarning": bladeSensor30VoltHighWarning,
       "bladeSensor30VoltLowWarning": bladeSensor30VoltLowWarning,
       "bladeIOCompatibilityTable": bladeIOCompatibilityTable,
       "bladeIOCompatibilityEntry": bladeIOCompatibilityEntry,
       "bladeIOCompatibilityIndex": bladeIOCompatibilityIndex,
       "bladeIOCompatibilityBladeId": bladeIOCompatibilityBladeId,
       "bladeIOCompatibilityBayNumber": bladeIOCompatibilityBayNumber,
       "bladeIOCompatibilityModuleBay": bladeIOCompatibilityModuleBay,
       "bladeIOCompatibilityModulePower": bladeIOCompatibilityModulePower,
       "bladeIOCompatibilityModuleFabricType": bladeIOCompatibilityModuleFabricType,
       "bladeIOCompatibilityFabricOnBlade": bladeIOCompatibilityFabricOnBlade,
       "bladeIOCompatibilityStatus": bladeIOCompatibilityStatus,
       "bladePowerRestart": bladePowerRestart,
       "bladePowerRestartTable": bladePowerRestartTable,
       "bladePowerRestartEntry": bladePowerRestartEntry,
       "powerRestartIndex": powerRestartIndex,
       "powerRestartBladeId": powerRestartBladeId,
       "powerRestartBladeExists": powerRestartBladeExists,
       "powerRestartBladePowerState": powerRestartBladePowerState,
       "powerRestartBladeHealthState": powerRestartBladeHealthState,
       "powerRestartBladeName": powerRestartBladeName,
       "powerOnOffBlade": powerOnOffBlade,
       "restartBlade": restartBlade,
       "restartBladeSMP": restartBladeSMP,
       "restartBladeNMI": restartBladeNMI,
       "restartBladeClearNVRAM": restartBladeClearNVRAM,
       "restartBladeInvokeDiags": restartBladeInvokeDiags,
       "restartBladeInvokeDiagsFromDefaultBootList": restartBladeInvokeDiagsFromDefaultBootList,
       "restartBladeToSMSBootMenu": restartBladeToSMSBootMenu,
       "restartBladeToUEFIMenu": restartBladeToUEFIMenu,
       "bladeConfiguration": bladeConfiguration,
       "bladeConfigurationTable": bladeConfigurationTable,
       "bladeConfigurationEntry": bladeConfigurationEntry,
       "configurationIndex": configurationIndex,
       "configurationBladeId": configurationBladeId,
       "configurationBladeExists": configurationBladeExists,
       "configurationBladePowerState": configurationBladePowerState,
       "configurationBladeName": configurationBladeName,
       "configurationBladecKVM": configurationBladecKVM,
       "configurationBladeActiveBootMode": configurationBladeActiveBootMode,
       "configurationBladePendingBootMode": configurationBladePendingBootMode,
       "bladePowerManagementPolicy": bladePowerManagementPolicy,
       "powerdomain1Oversubscription": powerdomain1Oversubscription,
       "powerdomain2Oversubscription": powerdomain2Oversubscription,
       "acousticMode": acousticMode,
       "nebsMode": nebsMode,
       "bladecKVMEnableDisable": bladecKVMEnableDisable,
       "bladeIPAddrRangeStart": bladeIPAddrRangeStart,
       "bladeCapacityOnDemand": bladeCapacityOnDemand,
       "bladeCapacityOnDemandTable": bladeCapacityOnDemandTable,
       "bladeCapacityOnDemandEntry": bladeCapacityOnDemandEntry,
       "bladeCapacityOnDemandIndex": bladeCapacityOnDemandIndex,
       "bladeCapacityOnDemandBladeName": bladeCapacityOnDemandBladeName,
       "bladeCapacityOnDemandState": bladeCapacityOnDemandState,
       "bladeBootCountPowerOnTime": bladeBootCountPowerOnTime,
       "bladeBootCountPowerOnTimeTable": bladeBootCountPowerOnTimeTable,
       "bladeBootCountPowerOnTimeEntry": bladeBootCountPowerOnTimeEntry,
       "bootCountPowerOnTimeBladeIndex": bootCountPowerOnTimeBladeIndex,
       "bootCountPowerOnTimeBladeId": bootCountPowerOnTimeBladeId,
       "bootCountPowerOnTimeBoots": bootCountPowerOnTimeBoots,
       "bootCountPowerOnTimeSecs": bootCountPowerOnTimeSecs,
       "bladeVlanId": bladeVlanId,
       "bladeNetworkConfiguration": bladeNetworkConfiguration,
       "bladeNetworkInterfaceTable": bladeNetworkInterfaceTable,
       "bladeNetworkInterfaceEntry": bladeNetworkInterfaceEntry,
       "bladeNetworkInterfaceIndex": bladeNetworkInterfaceIndex,
       "bladeNetworkInterfaceBayNumber": bladeNetworkInterfaceBayNumber,
       "bladeNetworkInterfaceNumber": bladeNetworkInterfaceNumber,
       "bladeNetworkInterfaceType": bladeNetworkInterfaceType,
       "bladeNetworkInterfaceLabel": bladeNetworkInterfaceLabel,
       "bladeNetworkInterfaceIPAddr": bladeNetworkInterfaceIPAddr,
       "bladeNetworkInterfaceSubnetMask": bladeNetworkInterfaceSubnetMask,
       "bladeNetworkInterfaceGatewayAddr": bladeNetworkInterfaceGatewayAddr,
       "bladeNetworkInterfaceVlanId": bladeNetworkInterfaceVlanId,
       "bladeNetworkInterfaceVlanEnable": bladeNetworkInterfaceVlanEnable,
       "bladeNetworkInterfaceEnable": bladeNetworkInterfaceEnable,
       "bladeNetworkInterfaceDHCPEnable": bladeNetworkInterfaceDHCPEnable,
       "bladeNetworkInterfaceMACAddr": bladeNetworkInterfaceMACAddr,
       "bladeNetworkInterfaceAssignedSwitch": bladeNetworkInterfaceAssignedSwitch,
       "bladeIPv6Config": bladeIPv6Config,
       "bladeIPv6ConfigTable": bladeIPv6ConfigTable,
       "bladeIPv6ConfigEntry": bladeIPv6ConfigEntry,
       "bladeIPv6ConfigIndex": bladeIPv6ConfigIndex,
       "bladeIPv6ConfigPortIndex": bladeIPv6ConfigPortIndex,
       "bladeIPv6ConfigEnabled": bladeIPv6ConfigEnabled,
       "bladeIPv6ConfigStatic": bladeIPv6ConfigStatic,
       "bladeDHCPv6ConfigEnabled": bladeDHCPv6ConfigEnabled,
       "bladeIPv6ConfigStatelessEnabled": bladeIPv6ConfigStatelessEnabled,
       "bladeIPv6AddressTable": bladeIPv6AddressTable,
       "bladeIPv6AddressEntry": bladeIPv6AddressEntry,
       "bladeIPv6AddressIndex": bladeIPv6AddressIndex,
       "bladeIPv6AddressPortIndex": bladeIPv6AddressPortIndex,
       "bladeIPv6AddressEntryIndex": bladeIPv6AddressEntryIndex,
       "bladeIPv6AddressType": bladeIPv6AddressType,
       "bladeIPv6Address": bladeIPv6Address,
       "bladeIPv6AddressPrefixLen": bladeIPv6AddressPrefixLen,
       "bladeIPv6AddressDefaultRoute": bladeIPv6AddressDefaultRoute,
       "bladeBayDataTable": bladeBayDataTable,
       "bladeBayDataEntry": bladeBayDataEntry,
       "bayDataIndex": bayDataIndex,
       "bayDataBladeId": bayDataBladeId,
       "bayDataBladeExists": bayDataBladeExists,
       "bayDataBladePowerState": bayDataBladePowerState,
       "bayDataBladeName": bayDataBladeName,
       "bayData": bayData,
       "bayDataBladeStatus": bayDataBladeStatus,
       "bladeSPEthOverUSBInterface": bladeSPEthOverUSBInterface,
       "spEthOverUSBInterfaceTable": spEthOverUSBInterfaceTable,
       "spEthOverUSBInterfaceEntry": spEthOverUSBInterfaceEntry,
       "spEthOverUSBInterfaceIndex": spEthOverUSBInterfaceIndex,
       "spEthOverUSBInterfaceBladeId": spEthOverUSBInterfaceBladeId,
       "spEthOverUSBInterfaceBladeExists": spEthOverUSBInterfaceBladeExists,
       "spEthOverUSBInterfaceBladeName": spEthOverUSBInterfaceBladeName,
       "spEthOverUSBInterfaceEnable": spEthOverUSBInterfaceEnable,
       "bladeManagementNetwork": bladeManagementNetwork,
       "bladeManagementNetworkControlEnable": bladeManagementNetworkControlEnable,
       "bladeManagementNetworkInfoTable": bladeManagementNetworkInfoTable,
       "bladeManagementNetworkInfoEntry": bladeManagementNetworkInfoEntry,
       "bladeManagementNetworkInfoIndex": bladeManagementNetworkInfoIndex,
       "bladeManagementNetworkInfoBladeId": bladeManagementNetworkInfoBladeId,
       "bladeManagementNetworkInfoBladeExist": bladeManagementNetworkInfoBladeExist,
       "bladeManagementNetworkInfoBladeSupport": bladeManagementNetworkInfoBladeSupport,
       "bladeManagementNetworkInfoPathStatus": bladeManagementNetworkInfoPathStatus,
       "bladeManagementNetworkInfoBladeIPAddr": bladeManagementNetworkInfoBladeIPAddr,
       "bladeManagementNetworkInfoBladeMACAddr": bladeManagementNetworkInfoBladeMACAddr,
       "bladeManagementNetworkInfoSwitchId": bladeManagementNetworkInfoSwitchId,
       "switchModule": switchModule,
       "switchModuleControl": switchModuleControl,
       "smControlTable": smControlTable,
       "smControlEntry": smControlEntry,
       "smControlIndex": smControlIndex,
       "switchModuleControlId": switchModuleControlId,
       "smPostResultsAvailable": smPostResultsAvailable,
       "smPostResultsValue": smPostResultsValue,
       "switchModuleMemDiagEnableDisable": switchModuleMemDiagEnableDisable,
       "smCfgCtrlEnableDisable": smCfgCtrlEnableDisable,
       "smExtEthPortsEnableDisable": smExtEthPortsEnableDisable,
       "switchPingRequest": switchPingRequest,
       "smCfgCtrlOnResetEnableDisable": smCfgCtrlOnResetEnableDisable,
       "smHealthState": smHealthState,
       "smPMState": smPMState,
       "smPMCtrlEnableDisable": smPMCtrlEnableDisable,
       "smIOCompatibility": smIOCompatibility,
       "smPingTable": smPingTable,
       "smPingEntry": smPingEntry,
       "smPingIndex": smPingIndex,
       "smPingAddressEntryIndex": smPingAddressEntryIndex,
       "smPingAddress": smPingAddress,
       "smPingAddressExecute": smPingAddressExecute,
       "smPowerRestartTable": smPowerRestartTable,
       "smPowerRestartEntry": smPowerRestartEntry,
       "smPowerRestartIndex": smPowerRestartIndex,
       "smPowerRestartId": smPowerRestartId,
       "smSwitchExists": smSwitchExists,
       "smSwitchType": smSwitchType,
       "smMACAddress": smMACAddress,
       "smIPAddress": smIPAddress,
       "switchModulePowerOnOff": switchModulePowerOnOff,
       "smReset": smReset,
       "smResetToDefault": smResetToDefault,
       "smRestartAndRunStdDiag": smRestartAndRunStdDiag,
       "smRestartAndRunExtDiag": smRestartAndRunExtDiag,
       "smRestartAndRunFullDiag": smRestartAndRunFullDiag,
       "smSwitchSubType": smSwitchSubType,
       "smSwitchWidth": smSwitchWidth,
       "smManufacturingID": smManufacturingID,
       "smStackingModeState": smStackingModeState,
       "smStackingModeInfo": smStackingModeInfo,
       "smIOCompatibilityTable": smIOCompatibilityTable,
       "smIOCompatibilityEntry": smIOCompatibilityEntry,
       "smIOCompatibilityIndex": smIOCompatibilityIndex,
       "smIOCompatibilityId": smIOCompatibilityId,
       "smIOCompatibilityModuleBay": smIOCompatibilityModuleBay,
       "smIOCompatibilityModulePower": smIOCompatibilityModulePower,
       "smIOCompatibilityModuleFabricType": smIOCompatibilityModuleFabricType,
       "smIOCompatibilityStatus": smIOCompatibilityStatus,
       "switchModuleConfig": switchModuleConfig,
       "switchMgmtNetworkCfg": switchMgmtNetworkCfg,
       "switchCurrentNwCfg": switchCurrentNwCfg,
       "smCurrentIPInfoTable": smCurrentIPInfoTable,
       "smCurrentIPInfoEntry": smCurrentIPInfoEntry,
       "smCurrentIPInfoIndex": smCurrentIPInfoIndex,
       "smCurrentIPInfoId": smCurrentIPInfoId,
       "smCurrentIPInfoExists": smCurrentIPInfoExists,
       "smCurrentIPInfoPowerState": smCurrentIPInfoPowerState,
       "smCurrentIPAddr": smCurrentIPAddr,
       "smCurrentSubnetMask": smCurrentSubnetMask,
       "smCurrentGateway": smCurrentGateway,
       "smCurrentIPConfigMethod": smCurrentIPConfigMethod,
       "switchNewNwCfg": switchNewNwCfg,
       "smNewIPInfoTable": smNewIPInfoTable,
       "smNewIPInfoEntry": smNewIPInfoEntry,
       "smNewIPInfoIndex": smNewIPInfoIndex,
       "smNewIPInfoId": smNewIPInfoId,
       "smNewIPInfoExists": smNewIPInfoExists,
       "smNewIPInfoPowerState": smNewIPInfoPowerState,
       "smNewIPAddr": smNewIPAddr,
       "smNewSubnetMask": smNewSubnetMask,
       "smNewGateway": smNewGateway,
       "smNewIPConfigMethod": smNewIPConfigMethod,
       "smNewIPConfigEnableDisable": smNewIPConfigEnableDisable,
       "switchNwProtCfg": switchNwProtCfg,
       "switchNwProtCfgModOne": switchNwProtCfgModOne,
       "smNwProtInfoModOneTable": smNwProtInfoModOneTable,
       "smNwProtInfoModOneEntry": smNwProtInfoModOneEntry,
       "smNwProtInfoModOneIndex": smNwProtInfoModOneIndex,
       "smNwProtInfoModOneId": smNwProtInfoModOneId,
       "smNwProtInfoModOneExists": smNwProtInfoModOneExists,
       "smNwProtInfoModOnePowerState": smNwProtInfoModOnePowerState,
       "smNwProtInfoModOneProtName": smNwProtInfoModOneProtName,
       "smNwProtInfoModOneProtID": smNwProtInfoModOneProtID,
       "smNwProtInfoModOneExtPort": smNwProtInfoModOneExtPort,
       "smNwProtInfoModOneIntPort": smNwProtInfoModOneIntPort,
       "smNwProtInfoModOneEnable": smNwProtInfoModOneEnable,
       "smNwProtInfoModOneActivate": smNwProtInfoModOneActivate,
       "smNwProtInfoModOneReset": smNwProtInfoModOneReset,
       "switchNwProtCfgModTwo": switchNwProtCfgModTwo,
       "smNwProtInfoModTwoTable": smNwProtInfoModTwoTable,
       "smNwProtInfoModTwoEntry": smNwProtInfoModTwoEntry,
       "smNwProtInfoModTwoIndex": smNwProtInfoModTwoIndex,
       "smNwProtInfoModTwoId": smNwProtInfoModTwoId,
       "smNwProtInfoModTwoExists": smNwProtInfoModTwoExists,
       "smNwProtInfoModTwoPowerState": smNwProtInfoModTwoPowerState,
       "smNwProtInfoModTwoProtName": smNwProtInfoModTwoProtName,
       "smNwProtInfoModTwoProtID": smNwProtInfoModTwoProtID,
       "smNwProtInfoModTwoExtPort": smNwProtInfoModTwoExtPort,
       "smNwProtInfoModTwoIntPort": smNwProtInfoModTwoIntPort,
       "smNwProtInfoModTwoEnable": smNwProtInfoModTwoEnable,
       "smNwProtInfoModTwoActivate": smNwProtInfoModTwoActivate,
       "smNwProtInfoModTwoReset": smNwProtInfoModTwoReset,
       "switchNwProtCfgModThree": switchNwProtCfgModThree,
       "smNwProtInfoModThreeTable": smNwProtInfoModThreeTable,
       "smNwProtInfoModThreeEntry": smNwProtInfoModThreeEntry,
       "smNwProtInfoModThreeIndex": smNwProtInfoModThreeIndex,
       "smNwProtInfoModThreeId": smNwProtInfoModThreeId,
       "smNwProtInfoModThreeExists": smNwProtInfoModThreeExists,
       "smNwProtInfoModThreePowerState": smNwProtInfoModThreePowerState,
       "smNwProtInfoModThreeProtName": smNwProtInfoModThreeProtName,
       "smNwProtInfoModThreeProtID": smNwProtInfoModThreeProtID,
       "smNwProtInfoModThreeExtPort": smNwProtInfoModThreeExtPort,
       "smNwProtInfoModThreeIntPort": smNwProtInfoModThreeIntPort,
       "smNwProtInfoModThreeEnable": smNwProtInfoModThreeEnable,
       "smNwProtInfoModThreeActivate": smNwProtInfoModThreeActivate,
       "smNwProtInfoModThreeReset": smNwProtInfoModThreeReset,
       "switchNwProtCfgModFour": switchNwProtCfgModFour,
       "smNwProtInfoModFourTable": smNwProtInfoModFourTable,
       "smNwProtInfoModFourEntry": smNwProtInfoModFourEntry,
       "smNwProtInfoModFourIndex": smNwProtInfoModFourIndex,
       "smNwProtInfoModFourId": smNwProtInfoModFourId,
       "smNwProtInfoModFourExists": smNwProtInfoModFourExists,
       "smNwProtInfoModFourPowerState": smNwProtInfoModFourPowerState,
       "smNwProtInfoModFourProtName": smNwProtInfoModFourProtName,
       "smNwProtInfoModFourProtID": smNwProtInfoModFourProtID,
       "smNwProtInfoModFourExtPort": smNwProtInfoModFourExtPort,
       "smNwProtInfoModFourIntPort": smNwProtInfoModFourIntPort,
       "smNwProtInfoModFourEnable": smNwProtInfoModFourEnable,
       "smNwProtInfoModFourActivate": smNwProtInfoModFourActivate,
       "smNwProtInfoModFourReset": smNwProtInfoModFourReset,
       "switchNwProtCfgModFive": switchNwProtCfgModFive,
       "smNwProtInfoModFiveTable": smNwProtInfoModFiveTable,
       "smNwProtInfoModFiveEntry": smNwProtInfoModFiveEntry,
       "smNwProtInfoModFiveIndex": smNwProtInfoModFiveIndex,
       "smNwProtInfoModFiveId": smNwProtInfoModFiveId,
       "smNwProtInfoModFiveExists": smNwProtInfoModFiveExists,
       "smNwProtInfoModFivePowerState": smNwProtInfoModFivePowerState,
       "smNwProtInfoModFiveProtName": smNwProtInfoModFiveProtName,
       "smNwProtInfoModFiveProtID": smNwProtInfoModFiveProtID,
       "smNwProtInfoModFiveExtPort": smNwProtInfoModFiveExtPort,
       "smNwProtInfoModFiveIntPort": smNwProtInfoModFiveIntPort,
       "smNwProtInfoModFiveEnable": smNwProtInfoModFiveEnable,
       "smNwProtInfoModFiveActivate": smNwProtInfoModFiveActivate,
       "smNwProtInfoModFiveReset": smNwProtInfoModFiveReset,
       "switchNwProtCfgModSix": switchNwProtCfgModSix,
       "smNwProtInfoModSixTable": smNwProtInfoModSixTable,
       "smNwProtInfoModSixEntry": smNwProtInfoModSixEntry,
       "smNwProtInfoModSixIndex": smNwProtInfoModSixIndex,
       "smNwProtInfoModSixId": smNwProtInfoModSixId,
       "smNwProtInfoModSixExists": smNwProtInfoModSixExists,
       "smNwProtInfoModSixPowerState": smNwProtInfoModSixPowerState,
       "smNwProtInfoModSixProtName": smNwProtInfoModSixProtName,
       "smNwProtInfoModSixProtID": smNwProtInfoModSixProtID,
       "smNwProtInfoModSixExtPort": smNwProtInfoModSixExtPort,
       "smNwProtInfoModSixIntPort": smNwProtInfoModSixIntPort,
       "smNwProtInfoModSixEnable": smNwProtInfoModSixEnable,
       "smNwProtInfoModSixActivate": smNwProtInfoModSixActivate,
       "smNwProtInfoModSixReset": smNwProtInfoModSixReset,
       "switchNwProtCfgModSeven": switchNwProtCfgModSeven,
       "smNwProtInfoModSevenTable": smNwProtInfoModSevenTable,
       "smNwProtInfoModSevenEntry": smNwProtInfoModSevenEntry,
       "smNwProtInfoModSevenIndex": smNwProtInfoModSevenIndex,
       "smNwProtInfoModSevenId": smNwProtInfoModSevenId,
       "smNwProtInfoModSevenExists": smNwProtInfoModSevenExists,
       "smNwProtInfoModSevenPowerState": smNwProtInfoModSevenPowerState,
       "smNwProtInfoModSevenProtName": smNwProtInfoModSevenProtName,
       "smNwProtInfoModSevenProtID": smNwProtInfoModSevenProtID,
       "smNwProtInfoModSevenExtPort": smNwProtInfoModSevenExtPort,
       "smNwProtInfoModSevenIntPort": smNwProtInfoModSevenIntPort,
       "smNwProtInfoModSevenEnable": smNwProtInfoModSevenEnable,
       "smNwProtInfoModSevenActivate": smNwProtInfoModSevenActivate,
       "smNwProtInfoModSevenReset": smNwProtInfoModSevenReset,
       "switchNwProtCfgModEight": switchNwProtCfgModEight,
       "smNwProtInfoModEightTable": smNwProtInfoModEightTable,
       "smNwProtInfoModEightEntry": smNwProtInfoModEightEntry,
       "smNwProtInfoModEightIndex": smNwProtInfoModEightIndex,
       "smNwProtInfoModEightId": smNwProtInfoModEightId,
       "smNwProtInfoModEightExists": smNwProtInfoModEightExists,
       "smNwProtInfoModEightPowerState": smNwProtInfoModEightPowerState,
       "smNwProtInfoModEightProtName": smNwProtInfoModEightProtName,
       "smNwProtInfoModEightProtID": smNwProtInfoModEightProtID,
       "smNwProtInfoModEightExtPort": smNwProtInfoModEightExtPort,
       "smNwProtInfoModEightIntPort": smNwProtInfoModEightIntPort,
       "smNwProtInfoModEightEnable": smNwProtInfoModEightEnable,
       "smNwProtInfoModEightActivate": smNwProtInfoModEightActivate,
       "smNwProtInfoModEightReset": smNwProtInfoModEightReset,
       "switchNwProtCfgModNine": switchNwProtCfgModNine,
       "smNwProtInfoModNineTable": smNwProtInfoModNineTable,
       "smNwProtInfoModNineEntry": smNwProtInfoModNineEntry,
       "smNwProtInfoModNineIndex": smNwProtInfoModNineIndex,
       "smNwProtInfoModNineId": smNwProtInfoModNineId,
       "smNwProtInfoModNineExists": smNwProtInfoModNineExists,
       "smNwProtInfoModNinePowerState": smNwProtInfoModNinePowerState,
       "smNwProtInfoModNineProtName": smNwProtInfoModNineProtName,
       "smNwProtInfoModNineProtID": smNwProtInfoModNineProtID,
       "smNwProtInfoModNineExtPort": smNwProtInfoModNineExtPort,
       "smNwProtInfoModNineIntPort": smNwProtInfoModNineIntPort,
       "smNwProtInfoModNineEnable": smNwProtInfoModNineEnable,
       "smNwProtInfoModNineActivate": smNwProtInfoModNineActivate,
       "smNwProtInfoModNineReset": smNwProtInfoModNineReset,
       "switchNwProtCfgModTen": switchNwProtCfgModTen,
       "smNwProtInfoModTenTable": smNwProtInfoModTenTable,
       "smNwProtInfoModTenEntry": smNwProtInfoModTenEntry,
       "smNwProtInfoModTenIndex": smNwProtInfoModTenIndex,
       "smNwProtInfoModTenId": smNwProtInfoModTenId,
       "smNwProtInfoModTenExists": smNwProtInfoModTenExists,
       "smNwProtInfoModTenPowerState": smNwProtInfoModTenPowerState,
       "smNwProtInfoModTenProtName": smNwProtInfoModTenProtName,
       "smNwProtInfoModTenProtID": smNwProtInfoModTenProtID,
       "smNwProtInfoModTenExtPort": smNwProtInfoModTenExtPort,
       "smNwProtInfoModTenIntPort": smNwProtInfoModTenIntPort,
       "smNwProtInfoModTenEnable": smNwProtInfoModTenEnable,
       "smNwProtInfoModTenActivate": smNwProtInfoModTenActivate,
       "smNwProtInfoModTenReset": smNwProtInfoModTenReset,
       "switchIPv6Config": switchIPv6Config,
       "smIPv6ConfigTable": smIPv6ConfigTable,
       "smIPv6ConfigEntry": smIPv6ConfigEntry,
       "smIPv6ConfigIndex": smIPv6ConfigIndex,
       "smIPv6ConfigEnabled": smIPv6ConfigEnabled,
       "smIPv6ConfigStatic": smIPv6ConfigStatic,
       "smDHCPv6ConfigEnabled": smDHCPv6ConfigEnabled,
       "smIPv6ConfigStatelessEnabled": smIPv6ConfigStatelessEnabled,
       "smIPv6AddressTable": smIPv6AddressTable,
       "smIPv6AddressEntry": smIPv6AddressEntry,
       "smIPv6AddressIndex": smIPv6AddressIndex,
       "smIPv6AddressEntryIndex": smIPv6AddressEntryIndex,
       "smIPv6AddressType": smIPv6AddressType,
       "smIPv6Address": smIPv6Address,
       "smIPv6AddressPrefixLen": smIPv6AddressPrefixLen,
       "smIPv6AddressDefaultRoute": smIPv6AddressDefaultRoute,
       "smIPv6StaticConfigTable": smIPv6StaticConfigTable,
       "smIPv6StaticConfigEntry": smIPv6StaticConfigEntry,
       "smIPv6StaticIndex": smIPv6StaticIndex,
       "smIPv6StaticAddress": smIPv6StaticAddress,
       "smIPv6StaticAddressPrefixLen": smIPv6StaticAddressPrefixLen,
       "smIPv6StaticAddressDefaultRoute": smIPv6StaticAddressDefaultRoute,
       "switchPortCfg": switchPortCfg,
       "switchModOnePortCfg": switchModOnePortCfg,
       "smOnePortCfgTable": smOnePortCfgTable,
       "smOnePortCfgEntry": smOnePortCfgEntry,
       "smOnePortCfgIndex": smOnePortCfgIndex,
       "smOnePortCfgLabel": smOnePortCfgLabel,
       "smOnePortCfgType": smOnePortCfgType,
       "smOnePortCfgLinkSetting": smOnePortCfgLinkSetting,
       "smOnePortCfgLinkState": smOnePortCfgLinkState,
       "smOnePortCfgSpeedSetting": smOnePortCfgSpeedSetting,
       "smOnePortCfgSpeedStatus": smOnePortCfgSpeedStatus,
       "smOnePortCfgAvailSpeeds": smOnePortCfgAvailSpeeds,
       "smOnePortCfgMedia": smOnePortCfgMedia,
       "smOnePortCfgProtocol": smOnePortCfgProtocol,
       "smOnePortCfgWidth": smOnePortCfgWidth,
       "smOnePortCfgCableLength": smOnePortCfgCableLength,
       "smOnePortCfgCableType": smOnePortCfgCableType,
       "smOnePortCfgVendorName": smOnePortCfgVendorName,
       "smOnePortCfgCompatibility": smOnePortCfgCompatibility,
       "smOnePortCfgDataRate": smOnePortCfgDataRate,
       "switchModTwoPortCfg": switchModTwoPortCfg,
       "smTwoPortCfgTable": smTwoPortCfgTable,
       "smTwoPortCfgEntry": smTwoPortCfgEntry,
       "smTwoPortCfgIndex": smTwoPortCfgIndex,
       "smTwoPortCfgLabel": smTwoPortCfgLabel,
       "smTwoPortCfgType": smTwoPortCfgType,
       "smTwoPortCfgLinkSetting": smTwoPortCfgLinkSetting,
       "smTwoPortCfgLinkState": smTwoPortCfgLinkState,
       "smTwoPortCfgSpeedSetting": smTwoPortCfgSpeedSetting,
       "smTwoPortCfgSpeedStatus": smTwoPortCfgSpeedStatus,
       "smTwoPortCfgAvailSpeeds": smTwoPortCfgAvailSpeeds,
       "smTwoPortCfgMedia": smTwoPortCfgMedia,
       "smTwoPortCfgProtocol": smTwoPortCfgProtocol,
       "smTwoPortCfgWidth": smTwoPortCfgWidth,
       "smTwoPortCfgCableLength": smTwoPortCfgCableLength,
       "smTwoPortCfgCableType": smTwoPortCfgCableType,
       "smTwoPortCfgVendorName": smTwoPortCfgVendorName,
       "smTwoPortCfgCompatibility": smTwoPortCfgCompatibility,
       "smTwoPortCfgDataRate": smTwoPortCfgDataRate,
       "switchModThreePortCfg": switchModThreePortCfg,
       "smThreePortCfgTable": smThreePortCfgTable,
       "smThreePortCfgEntry": smThreePortCfgEntry,
       "smThreePortCfgIndex": smThreePortCfgIndex,
       "smThreePortCfgLabel": smThreePortCfgLabel,
       "smThreePortCfgType": smThreePortCfgType,
       "smThreePortCfgLinkSetting": smThreePortCfgLinkSetting,
       "smThreePortCfgLinkState": smThreePortCfgLinkState,
       "smThreePortCfgSpeedSetting": smThreePortCfgSpeedSetting,
       "smThreePortCfgSpeedStatus": smThreePortCfgSpeedStatus,
       "smThreePortCfgAvailSpeeds": smThreePortCfgAvailSpeeds,
       "smThreePortCfgMedia": smThreePortCfgMedia,
       "smThreePortCfgProtocol": smThreePortCfgProtocol,
       "smThreePortCfgWidth": smThreePortCfgWidth,
       "smThreePortCfgCableLength": smThreePortCfgCableLength,
       "smThreePortCfgCableType": smThreePortCfgCableType,
       "smThreePortCfgVendorName": smThreePortCfgVendorName,
       "smThreePortCfgCompatibility": smThreePortCfgCompatibility,
       "smThreePortCfgDataRate": smThreePortCfgDataRate,
       "switchModFourPortCfg": switchModFourPortCfg,
       "smFourPortCfgTable": smFourPortCfgTable,
       "smFourPortCfgEntry": smFourPortCfgEntry,
       "smFourPortCfgIndex": smFourPortCfgIndex,
       "smFourPortCfgLabel": smFourPortCfgLabel,
       "smFourPortCfgType": smFourPortCfgType,
       "smFourPortCfgLinkSetting": smFourPortCfgLinkSetting,
       "smFourPortCfgLinkState": smFourPortCfgLinkState,
       "smFourPortCfgSpeedSetting": smFourPortCfgSpeedSetting,
       "smFourPortCfgSpeedStatus": smFourPortCfgSpeedStatus,
       "smFourPortCfgAvailSpeeds": smFourPortCfgAvailSpeeds,
       "smFourPortCfgMedia": smFourPortCfgMedia,
       "smFourPortCfgProtocol": smFourPortCfgProtocol,
       "smFourPortCfgWidth": smFourPortCfgWidth,
       "smFourPortCfgCableLength": smFourPortCfgCableLength,
       "smFourPortCfgCableType": smFourPortCfgCableType,
       "smFourPortCfgVendorName": smFourPortCfgVendorName,
       "smFourPortCfgCompatibility": smFourPortCfgCompatibility,
       "smFourPortCfgDataRate": smFourPortCfgDataRate,
       "switchModFivePortCfg": switchModFivePortCfg,
       "smFivePortCfgTable": smFivePortCfgTable,
       "smFivePortCfgEntry": smFivePortCfgEntry,
       "smFivePortCfgIndex": smFivePortCfgIndex,
       "smFivePortCfgLabel": smFivePortCfgLabel,
       "smFivePortCfgType": smFivePortCfgType,
       "smFivePortCfgLinkSetting": smFivePortCfgLinkSetting,
       "smFivePortCfgLinkState": smFivePortCfgLinkState,
       "smFivePortCfgSpeedSetting": smFivePortCfgSpeedSetting,
       "smFivePortCfgSpeedStatus": smFivePortCfgSpeedStatus,
       "smFivePortCfgAvailSpeeds": smFivePortCfgAvailSpeeds,
       "smFivePortCfgMedia": smFivePortCfgMedia,
       "smFivePortCfgProtocol": smFivePortCfgProtocol,
       "smFivePortCfgWidth": smFivePortCfgWidth,
       "smFivePortCfgCableLength": smFivePortCfgCableLength,
       "smFivePortCfgCableType": smFivePortCfgCableType,
       "smFivePortCfgVendorName": smFivePortCfgVendorName,
       "smFivePortCfgCompatibility": smFivePortCfgCompatibility,
       "smFivePortCfgDataRate": smFivePortCfgDataRate,
       "switchModSixPortCfg": switchModSixPortCfg,
       "smSixPortCfgTable": smSixPortCfgTable,
       "smSixPortCfgEntry": smSixPortCfgEntry,
       "smSixPortCfgIndex": smSixPortCfgIndex,
       "smSixPortCfgLabel": smSixPortCfgLabel,
       "smSixPortCfgType": smSixPortCfgType,
       "smSixPortCfgLinkSetting": smSixPortCfgLinkSetting,
       "smSixPortCfgLinkState": smSixPortCfgLinkState,
       "smSixPortCfgSpeedSetting": smSixPortCfgSpeedSetting,
       "smSixPortCfgSpeedStatus": smSixPortCfgSpeedStatus,
       "smSixPortCfgAvailSpeeds": smSixPortCfgAvailSpeeds,
       "smSixPortCfgMedia": smSixPortCfgMedia,
       "smSixPortCfgProtocol": smSixPortCfgProtocol,
       "smSixPortCfgWidth": smSixPortCfgWidth,
       "smSixPortCfgCableLength": smSixPortCfgCableLength,
       "smSixPortCfgCableType": smSixPortCfgCableType,
       "smSixPortCfgVendorName": smSixPortCfgVendorName,
       "smSixPortCfgCompatibility": smSixPortCfgCompatibility,
       "smSixPortCfgDataRate": smSixPortCfgDataRate,
       "switchModSevenPortCfg": switchModSevenPortCfg,
       "smSevenPortCfgTable": smSevenPortCfgTable,
       "smSevenPortCfgEntry": smSevenPortCfgEntry,
       "smSevenPortCfgIndex": smSevenPortCfgIndex,
       "smSevenPortCfgLabel": smSevenPortCfgLabel,
       "smSevenPortCfgType": smSevenPortCfgType,
       "smSevenPortCfgLinkSetting": smSevenPortCfgLinkSetting,
       "smSevenPortCfgLinkState": smSevenPortCfgLinkState,
       "smSevenPortCfgSpeedSetting": smSevenPortCfgSpeedSetting,
       "smSevenPortCfgSpeedStatus": smSevenPortCfgSpeedStatus,
       "smSevenPortCfgAvailSpeeds": smSevenPortCfgAvailSpeeds,
       "smSevenPortCfgMedia": smSevenPortCfgMedia,
       "smSevenPortCfgProtocol": smSevenPortCfgProtocol,
       "smSevenPortCfgWidth": smSevenPortCfgWidth,
       "smSevenPortCfgCableLength": smSevenPortCfgCableLength,
       "smSevenPortCfgCableType": smSevenPortCfgCableType,
       "smSevenPortCfgVendorName": smSevenPortCfgVendorName,
       "smSevenPortCfgCompatibility": smSevenPortCfgCompatibility,
       "smSevenPortCfgDataRate": smSevenPortCfgDataRate,
       "switchModEightPortCfg": switchModEightPortCfg,
       "smEightPortCfgTable": smEightPortCfgTable,
       "smEightPortCfgEntry": smEightPortCfgEntry,
       "smEightPortCfgIndex": smEightPortCfgIndex,
       "smEightPortCfgLabel": smEightPortCfgLabel,
       "smEightPortCfgType": smEightPortCfgType,
       "smEightPortCfgLinkSetting": smEightPortCfgLinkSetting,
       "smEightPortCfgLinkState": smEightPortCfgLinkState,
       "smEightPortCfgSpeedSetting": smEightPortCfgSpeedSetting,
       "smEightPortCfgSpeedStatus": smEightPortCfgSpeedStatus,
       "smEightPortCfgAvailSpeeds": smEightPortCfgAvailSpeeds,
       "smEightPortCfgMedia": smEightPortCfgMedia,
       "smEightPortCfgProtocol": smEightPortCfgProtocol,
       "smEightPortCfgWidth": smEightPortCfgWidth,
       "smEightPortCfgCableLength": smEightPortCfgCableLength,
       "smEightPortCfgCableType": smEightPortCfgCableType,
       "smEightPortCfgVendorName": smEightPortCfgVendorName,
       "smEightPortCfgCompatibility": smEightPortCfgCompatibility,
       "smEightPortCfgDataRate": smEightPortCfgDataRate,
       "switchModNinePortCfg": switchModNinePortCfg,
       "smNinePortCfgTable": smNinePortCfgTable,
       "smNinePortCfgEntry": smNinePortCfgEntry,
       "smNinePortCfgIndex": smNinePortCfgIndex,
       "smNinePortCfgLabel": smNinePortCfgLabel,
       "smNinePortCfgType": smNinePortCfgType,
       "smNinePortCfgLinkSetting": smNinePortCfgLinkSetting,
       "smNinePortCfgLinkState": smNinePortCfgLinkState,
       "smNinePortCfgSpeedSetting": smNinePortCfgSpeedSetting,
       "smNinePortCfgSpeedStatus": smNinePortCfgSpeedStatus,
       "smNinePortCfgAvailSpeeds": smNinePortCfgAvailSpeeds,
       "smNinePortCfgMedia": smNinePortCfgMedia,
       "smNinePortCfgProtocol": smNinePortCfgProtocol,
       "smNinePortCfgWidth": smNinePortCfgWidth,
       "smNinePortCfgCableLength": smNinePortCfgCableLength,
       "smNinePortCfgCableType": smNinePortCfgCableType,
       "smNinePortCfgVendorName": smNinePortCfgVendorName,
       "smNinePortCfgCompatibility": smNinePortCfgCompatibility,
       "smNinePortCfgDataRate": smNinePortCfgDataRate,
       "switchModTenPortCfg": switchModTenPortCfg,
       "smTenPortCfgTable": smTenPortCfgTable,
       "smTenPortCfgEntry": smTenPortCfgEntry,
       "smTenPortCfgIndex": smTenPortCfgIndex,
       "smTenPortCfgLabel": smTenPortCfgLabel,
       "smTenPortCfgType": smTenPortCfgType,
       "smTenPortCfgLinkSetting": smTenPortCfgLinkSetting,
       "smTenPortCfgLinkState": smTenPortCfgLinkState,
       "smTenPortCfgSpeedSetting": smTenPortCfgSpeedSetting,
       "smTenPortCfgSpeedStatus": smTenPortCfgSpeedStatus,
       "smTenPortCfgAvailSpeeds": smTenPortCfgAvailSpeeds,
       "smTenPortCfgMedia": smTenPortCfgMedia,
       "smTenPortCfgProtocol": smTenPortCfgProtocol,
       "smTenPortCfgWidth": smTenPortCfgWidth,
       "smTenPortCfgCableLength": smTenPortCfgCableLength,
       "smTenPortCfgCableType": smTenPortCfgCableType,
       "smTenPortCfgVendorName": smTenPortCfgVendorName,
       "smTenPortCfgCompatibility": smTenPortCfgCompatibility,
       "smTenPortCfgDataRate": smTenPortCfgDataRate,
       "raidControllerConfig": raidControllerConfig,
       "raidControllerTable": raidControllerTable,
       "raidControllerEntry": raidControllerEntry,
       "raidControllerIndex": raidControllerIndex,
       "raidControllerId": raidControllerId,
       "raidControllerExists": raidControllerExists,
       "raidControllerPowerState": raidControllerPowerState,
       "raidControllerMACAddress": raidControllerMACAddress,
       "raidControllerSasID": raidControllerSasID,
       "raidControllerPingRequest": raidControllerPingRequest,
       "raidControllerNetworkCfg": raidControllerNetworkCfg,
       "rcCurrentIPInfoTable": rcCurrentIPInfoTable,
       "rcCurrentIPInfoEntry": rcCurrentIPInfoEntry,
       "rcCurrentIPInfoIndex": rcCurrentIPInfoIndex,
       "rcCurrentIPInfoId": rcCurrentIPInfoId,
       "rcCurrentIPInfoExists": rcCurrentIPInfoExists,
       "rcCurrentIPInfoPowerState": rcCurrentIPInfoPowerState,
       "rcCurrentIPAddr": rcCurrentIPAddr,
       "rcCurrentSubnetMask": rcCurrentSubnetMask,
       "rcCurrentGateway": rcCurrentGateway,
       "rcCurrentIPConfigMethod": rcCurrentIPConfigMethod,
       "rcCurrentRaidedVlanId": rcCurrentRaidedVlanId,
       "rcNewIPInfoTable": rcNewIPInfoTable,
       "rcNewIPInfoEntry": rcNewIPInfoEntry,
       "rcNewIPInfoIndex": rcNewIPInfoIndex,
       "rcNewIPInfoId": rcNewIPInfoId,
       "rcNewIPInfoExists": rcNewIPInfoExists,
       "rcNewIPInfoPowerState": rcNewIPInfoPowerState,
       "rcNewIPAddr": rcNewIPAddr,
       "rcNewSubnetMask": rcNewSubnetMask,
       "rcNewGateway": rcNewGateway,
       "rcNewIPConfigMethod": rcNewIPConfigMethod,
       "rcNewIPConfigEnableDisable": rcNewIPConfigEnableDisable,
       "chassisTopology": chassisTopology,
       "chassisResponseVersion": chassisResponseVersion,
       "chassisFlags": chassisFlags,
       "chassisName": chassisName,
       "chassisNoOfFPsSupported": chassisNoOfFPsSupported,
       "chassisNoOfPBsSupported": chassisNoOfPBsSupported,
       "chassisNoOfSMsSupported": chassisNoOfSMsSupported,
       "chassisNoOfMMsSupported": chassisNoOfMMsSupported,
       "chassisNoOfPMsSupported": chassisNoOfPMsSupported,
       "chassisNoOfMTsSupported": chassisNoOfMTsSupported,
       "chassisNoOfBlowersSupported": chassisNoOfBlowersSupported,
       "chassisPBsInstalled": chassisPBsInstalled,
       "chassisSMsInstalled": chassisSMsInstalled,
       "chassisMMsInstalled": chassisMMsInstalled,
       "chassisPMsInstalled": chassisPMsInstalled,
       "chassisMTInstalled": chassisMTInstalled,
       "chassisBlowersInstalled": chassisBlowersInstalled,
       "chassisActiveMM": chassisActiveMM,
       "chassisKVMOwner": chassisKVMOwner,
       "chassisMediaTrayOwner": chassisMediaTrayOwner,
       "chassisFPsInstalled": chassisFPsInstalled,
       "chassisType": chassisType,
       "chassisSubtype": chassisSubtype,
       "chassisNoOfFBsSupported": chassisNoOfFBsSupported,
       "chassisNoOfAPsSupported": chassisNoOfAPsSupported,
       "chassisNoOfNCsSupported": chassisNoOfNCsSupported,
       "chassisNoOfMXsSupported": chassisNoOfMXsSupported,
       "chassisNoOfMMIsSupported": chassisNoOfMMIsSupported,
       "chassisNoOfSMIsSupported": chassisNoOfSMIsSupported,
       "chassisNoOfFBsInstalled": chassisNoOfFBsInstalled,
       "chassisNoOfAPsInstalled": chassisNoOfAPsInstalled,
       "chassisNoOfNCsInstalled": chassisNoOfNCsInstalled,
       "chassisNoOfMXsInstalled": chassisNoOfMXsInstalled,
       "chassisNoOfMMIsInstalled": chassisNoOfMMIsInstalled,
       "chassisNoOfSMIsInstalled": chassisNoOfSMIsInstalled,
       "chassisNoOfMTsInstalled": chassisNoOfMTsInstalled,
       "managementModule": managementModule,
       "mmStatusTable": mmStatusTable,
       "mmStatusEntry": mmStatusEntry,
       "mmStatusIndex": mmStatusIndex,
       "mmPresent": mmPresent,
       "mmExtIpAddress": mmExtIpAddress,
       "mmPrimary": mmPrimary,
       "mmHealthState": mmHealthState,
       "storage": storage,
       "storageStatus": storageStatus,
       "storageStatusTable": storageStatusTable,
       "storageStatusEntry": storageStatusEntry,
       "storageStatusIndex": storageStatusIndex,
       "storageBayNumber": storageBayNumber,
       "storageState": storageState,
       "storageName": storageName,
       "storageConfiguration": storageConfiguration,
       "storageSwitchConfiguration": storageSwitchConfiguration,
       "storageSwitchZoneCfgTable": storageSwitchZoneCfgTable,
       "storageSwitchZoneCfgEntry": storageSwitchZoneCfgEntry,
       "switchZoneCfgIndex": switchZoneCfgIndex,
       "switchZoneCfgBayNumber": switchZoneCfgBayNumber,
       "switchZoneCfgNumber": switchZoneCfgNumber,
       "switchZoneCfgStatus": switchZoneCfgStatus,
       "switchZoneCfgType": switchZoneCfgType,
       "switchZoneCfgName": switchZoneCfgName,
       "switchZoneCfgDescription": switchZoneCfgDescription,
       "switchZoneCfgDate": switchZoneCfgDate,
       "switchActiveZoneCfg": switchActiveZoneCfg,
       "storageSwitchActiveZoneCfgTable": storageSwitchActiveZoneCfgTable,
       "storageSwitchActiveZoneCfgEntry": storageSwitchActiveZoneCfgEntry,
       "activeZoneCfgIndex": activeZoneCfgIndex,
       "activeZoneCfgBayNumber": activeZoneCfgBayNumber,
       "activeZoneCfgNumberBySwitch": activeZoneCfgNumberBySwitch,
       "activeZoneCfgNumberByMM": activeZoneCfgNumberByMM,
       "switchZoneCfgActivation": switchZoneCfgActivation,
       "firmwareInformation": firmwareInformation,
       "smFirmwareInformation": smFirmwareInformation,
       "smFirmwareInfoTable": smFirmwareInfoTable,
       "smFirmwareInfoEntry": smFirmwareInfoEntry,
       "smFirmwareInfoIndex": smFirmwareInfoIndex,
       "smFirmwareInfoModIndex": smFirmwareInfoModIndex,
       "smFirmwareInfoImageIndex": smFirmwareInfoImageIndex,
       "smFirmwareInfoImageName": smFirmwareInfoImageName,
       "firmwareUpdate": firmwareUpdate,
       "firmwareUpdateTarget": firmwareUpdateTarget,
       "firmwareUpdateTftpServer": firmwareUpdateTftpServer,
       "firmwareUpdateFileName": firmwareUpdateFileName,
       "firmwareUpdateStart": firmwareUpdateStart,
       "firmwareUpdateStatus": firmwareUpdateStatus,
       "standbyFirmwareUpdateStatus": standbyFirmwareUpdateStatus,
       "firmwareImageNumber": firmwareImageNumber,
       "firmwareActiveImage": firmwareActiveImage,
       "firmwareUpdateServer": firmwareUpdateServer,
       "remoteChassis": remoteChassis,
       "remoteChassisTable": remoteChassisTable,
       "remoteChassisEntry": remoteChassisEntry,
       "remoteChassisIndex": remoteChassisIndex,
       "systemName": systemName,
       "systemStatus": systemStatus,
       "mmType": mmType,
       "mmSerial": mmSerial,
       "mmFru": mmFru,
       "mmIp": mmIp,
       "chassisSerial": chassisSerial,
       "chassisFru": chassisFru,
       "chassisMachineTypeMode": chassisMachineTypeMode,
       "chassisUuid": chassisUuid,
       "firmwareVersion": firmwareVersion,
       "ipStatus": ipStatus,
       "ipv6Addresses": ipv6Addresses,
       "chassisDiscovery": chassisDiscovery,
       "fileManagement": fileManagement,
       "fileTopology": fileTopology,
       "currentDirectory": currentDirectory,
       "fileDetailsTable": fileDetailsTable,
       "fileDetailsEntry": fileDetailsEntry,
       "fileIndex": fileIndex,
       "fileName": fileName,
       "fileLastUpdate": fileLastUpdate,
       "fileSize": fileSize,
       "fileManagementCmd": fileManagementCmd,
       "fileSystemSpaceAvailable": fileSystemSpaceAvailable,
       "componentMonitors": componentMonitors,
       "componentMACAddressTable": componentMACAddressTable,
       "componentMACAddressEntry": componentMACAddressEntry,
       "componentMACAddressTopologyPath": componentMACAddressTopologyPath,
       "componentMACAddressIndex": componentMACAddressIndex,
       "componentMACAddressName": componentMACAddressName,
       "componentMACAddress": componentMACAddress,
       "service": service,
       "serviceConfig": serviceConfig,
       "debugEnable": debugEnable,
       "bladeServiceData": bladeServiceData,
       "bladeServiceDataTable": bladeServiceDataTable,
       "bladeServiceDataEntry": bladeServiceDataEntry,
       "serviceDataIndex": serviceDataIndex,
       "serviceDataBladeId": serviceDataBladeId,
       "serviceDataBladeExists": serviceDataBladeExists,
       "serviceDataBladePowerState": serviceDataBladePowerState,
       "serviceDataBladeName": serviceDataBladeName,
       "serviceDataBladeCapability": serviceDataBladeCapability,
       "serviceDataDumpInitiate": serviceDataDumpInitiate,
       "serviceDataDumpRetrieve": serviceDataDumpRetrieve,
       "serviceDataDumpCapabilityMask": serviceDataDumpCapabilityMask,
       "serviceDataDumpInProgress": serviceDataDumpInProgress,
       "bladeSystemReferenceCodes": bladeSystemReferenceCodes,
       "bladeSysRefCodesTable": bladeSysRefCodesTable,
       "bladeSysRefCodesEntry": bladeSysRefCodesEntry,
       "sysRefCodeIndex": sysRefCodeIndex,
       "sysRefCodeBayNumber": sysRefCodeBayNumber,
       "sysRefCodeSequence": sysRefCodeSequence,
       "sysRefCode": sysRefCode,
       "sysRefCodeTimestamp": sysRefCodeTimestamp,
       "bladeSysRefCodesDetailsTable": bladeSysRefCodesDetailsTable,
       "bladeSysRefCodesDetailsEntry": bladeSysRefCodesDetailsEntry,
       "sysRefCodeDetailIndex": sysRefCodeDetailIndex,
       "sysRefCodeDetailBayNumber": sysRefCodeDetailBayNumber,
       "sysRefCodeDetailSRCSequence": sysRefCodeDetailSRCSequence,
       "sysRefCodeDetailSequence": sysRefCodeDetailSequence,
       "sysRefCodeDetailDataString": sysRefCodeDetailDataString,
       "serviceAdvisor": serviceAdvisor,
       "autoCallHomeSetup": autoCallHomeSetup,
       "acceptLicenseAgreement": acceptLicenseAgreement,
       "serviceAdvisorEnable": serviceAdvisorEnable,
       "serviceSupportCenter": serviceSupportCenter,
       "ibmSupportCenter": ibmSupportCenter,
       "contactInformation": contactInformation,
       "companyName": companyName,
       "contactName": contactName,
       "phoneNumber": phoneNumber,
       "emailAddress": emailAddress,
       "address": address,
       "city": city,
       "state": state,
       "postalCode": postalCode,
       "phoneNumberExt": phoneNumberExt,
       "altContactName": altContactName,
       "altPhoneNumber": altPhoneNumber,
       "altPhoneNumberExt": altPhoneNumberExt,
       "altEmailAddress": altEmailAddress,
       "machineLocPhone": machineLocPhone,
       "httpProxyConfig": httpProxyConfig,
       "httpProxyEnable": httpProxyEnable,
       "httpProxyLocation": httpProxyLocation,
       "httpProxyPort": httpProxyPort,
       "httpProxyUserName": httpProxyUserName,
       "httpProxyPassword": httpProxyPassword,
       "activityLogs": activityLogs,
       "activityLogTable": activityLogTable,
       "activityLogEntry": activityLogEntry,
       "activityLogIndex": activityLogIndex,
       "activityLogString": activityLogString,
       "activityLogAcknowledge": activityLogAcknowledge,
       "activityLogAttribute": activityLogAttribute,
       "autoFTPSetup": autoFTPSetup,
       "autoFTPCallMode": autoFTPCallMode,
       "autoFTPCallAddr": autoFTPCallAddr,
       "autoFTPCallPort": autoFTPCallPort,
       "autoFTPCallUserID": autoFTPCallUserID,
       "autoFTPCallPassword": autoFTPCallPassword,
       "callHomeExclusionEvents": callHomeExclusionEvents,
       "readCallHomeExclusionEventTable": readCallHomeExclusionEventTable,
       "readCallHomeExclusionEventEntry": readCallHomeExclusionEventEntry,
       "readCallHomeExclusionEventIndex": readCallHomeExclusionEventIndex,
       "readCallHomeExclusionEventID": readCallHomeExclusionEventID,
       "addCallHomeExclusionEvent": addCallHomeExclusionEvent,
       "rmCallHomeExclusionEvent": rmCallHomeExclusionEvent,
       "rmAllCallHomeExclusionEvent": rmAllCallHomeExclusionEvent,
       "scaling": scaling,
       "scalableComplexTable": scalableComplexTable,
       "scalableComplexEntry": scalableComplexEntry,
       "scalableComplexIdentifier": scalableComplexIdentifier,
       "scalableComplexNumPartitions": scalableComplexNumPartitions,
       "scalableComplexNumNodes": scalableComplexNumNodes,
       "scalableComplexPartStartSlot": scalableComplexPartStartSlot,
       "scalableComplexPartNumNodes": scalableComplexPartNumNodes,
       "scalableComplexAction": scalableComplexAction,
       "scalableComplexPartitionTable": scalableComplexPartitionTable,
       "scalableComplexPartitionEntry": scalableComplexPartitionEntry,
       "scalableComplexId": scalableComplexId,
       "scalableComplexPartitionIdentifier": scalableComplexPartitionIdentifier,
       "scalableComplexPartitionMode": scalableComplexPartitionMode,
       "scalableComplexPartitionNumNodes": scalableComplexPartitionNumNodes,
       "scalableComplexPartitionStatus": scalableComplexPartitionStatus,
       "scalableComplexPartitionAction": scalableComplexPartitionAction,
       "scalableComplexNodeTable": scalableComplexNodeTable,
       "scalableComplexNodeEntry": scalableComplexNodeEntry,
       "scalableComplexNodeSlot": scalableComplexNodeSlot,
       "scalableComplexNodeName": scalableComplexNodeName,
       "scalableComplexNodeType": scalableComplexNodeType,
       "scalableComplexNodeResources": scalableComplexNodeResources,
       "scalableComplexNodeRole": scalableComplexNodeRole,
       "scalableComplexNodeState": scalableComplexNodeState,
       "scalableComplexNodeUUID": scalableComplexNodeUUID,
       "scalableComplexNodeSerialNum": scalableComplexNodeSerialNum,
       "scalableComplexNodeNumPorts": scalableComplexNodeNumPorts,
       "scalableComplexNodeComplexID": scalableComplexNodeComplexID,
       "scalableComplexNodePartitionID": scalableComplexNodePartitionID,
       "scalableComplexNodeLogicalID": scalableComplexNodeLogicalID,
       "scalableComplexNodeAction": scalableComplexNodeAction,
       "scalableComplexNodePortTable": scalableComplexNodePortTable,
       "scalableComplexNodePortEntry": scalableComplexNodePortEntry,
       "scalableComplexNodePortSlot": scalableComplexNodePortSlot,
       "scalableComplexNodePortNum": scalableComplexNodePortNum,
       "scalableComplexNodePortRemChkSum": scalableComplexNodePortRemChkSum,
       "scalableComplexNodePortRemNum": scalableComplexNodePortRemNum,
       "scalableComplexNodePortStatus": scalableComplexNodePortStatus,
       "scalableComplexNodePortType": scalableComplexNodePortType}
)
