# SNMP MIB module (CME-MIB) expressed in pysnmp data model.
#
# This Python module is designed to be imported and executed by the
# pysnmp library.
#
# See https://www.pysnmp.com/pysnmp for further information.
#
# Notes
# -----
# ASN.1 source file://mibs\ibm\CME-MIB
# Produced by pysmi-1.6.2 at Thu Oct  2 12:00:10 2025
# On host DESKTOP-ORUUBP9 platform Windows version 11 by user speterman
# Using Python version 3.12.8 (tags/v3.12.8:2dc476b, Dec  3 2024, 19:30:04) [MSC v.1942 64 bit (AMD64)]

if 'mibBuilder' not in globals():
    import sys

    sys.stderr.write(__doc__)
    sys.exit(1)

# Import base ASN.1 objects even if this MIB does not use it

(Integer,
 OctetString,
 ObjectIdentifier) = mibBuilder.importSymbols(
    "ASN1",
    "Integer",
    "OctetString",
    "ObjectIdentifier")

(NamedValues,) = mibBuilder.importSymbols(
    "ASN1-ENUMERATION",
    "NamedValues")
(ConstraintsIntersection,
 ConstraintsUnion,
 SingleValueConstraint,
 ValueRangeConstraint,
 ValueSizeConstraint) = mibBuilder.importSymbols(
    "ASN1-REFINEMENT",
    "ConstraintsIntersection",
    "ConstraintsUnion",
    "SingleValueConstraint",
    "ValueRangeConstraint",
    "ValueSizeConstraint")

# Import SMI symbols from the MIBs this MIB depends on

(ModuleCompliance,
 NotificationGroup) = mibBuilder.importSymbols(
    "SNMPv2-CONF",
    "ModuleCompliance",
    "NotificationGroup")

(Bits,
 Counter32,
 Counter64,
 Gauge32,
 Integer32,
 IpAddress,
 ModuleIdentity,
 MibIdentifier,
 NotificationType,
 ObjectIdentity,
 MibScalar,
 MibTable,
 MibTableRow,
 MibTableColumn,
 NotificationType,
 TimeTicks,
 Unsigned32,
 enterprises,
 iso) = mibBuilder.importSymbols(
    "SNMPv2-SMI",
    "Bits",
    "Counter32",
    "Counter64",
    "Gauge32",
    "Integer32",
    "IpAddress",
    "ModuleIdentity",
    "MibIdentifier",
    "NotificationType",
    "ObjectIdentity",
    "MibScalar",
    "MibTable",
    "MibTableRow",
    "MibTableColumn",
    "NotificationType",
    "TimeTicks",
    "Unsigned32",
    "enterprises",
    "iso")

(DisplayString,
 PhysAddress,
 TextualConvention) = mibBuilder.importSymbols(
    "SNMPv2-TC",
    "DisplayString",
    "PhysAddress",
    "TextualConvention")


# MODULE-IDENTITY


# Types definitions



class EntryStatus(Integer32):
    """Custom type EntryStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("valid", 1),
          ("createRequest", 2),
          ("underCreation", 3),
          ("invalid", 4))
    )




# TEXTUAL-CONVENTIONS



class InetAddressIPv6(TextualConvention, OctetString):
    status = "current"
    displayHint = "2x:2x:2x:2x:2x:2x:2x:2x"
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(16, 16),
    )
    fixed_length = 16



# MIB Managed Objects in the order of their OIDs

_Ibm_ObjectIdentity = ObjectIdentity
ibm = _Ibm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2)
)
_IbmAgents_ObjectIdentity = ObjectIdentity
ibmAgents = _IbmAgents_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3)
)
_NetfinitySupportProcessorAgent_ObjectIdentity = ObjectIdentity
netfinitySupportProcessorAgent = _NetfinitySupportProcessorAgent_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51)
)
_BladeCenterSnmpMIB_ObjectIdentity = ObjectIdentity
bladeCenterSnmpMIB = _BladeCenterSnmpMIB_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2)
)
_Monitors_ObjectIdentity = ObjectIdentity
monitors = _Monitors_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2)
)
_Temperature_ObjectIdentity = ObjectIdentity
temperature = _Temperature_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1)
)
_InternalTemp_ObjectIdentity = ObjectIdentity
internalTemp = _InternalTemp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 1)
)
_CmmTemp_Type = OctetString
_CmmTemp_Object = MibScalar
cmmTemp = _CmmTemp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 1, 2),
    _CmmTemp_Type()
)
cmmTemp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmmTemp.setStatus("deprecated")
_AmbientTemp_ObjectIdentity = ObjectIdentity
ambientTemp = _AmbientTemp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 5)
)
_RearLEDCardTempAvg_Type = OctetString
_RearLEDCardTempAvg_Object = MibScalar
rearLEDCardTempAvg = _RearLEDCardTempAvg_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 5, 1),
    _RearLEDCardTempAvg_Type()
)
rearLEDCardTempAvg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rearLEDCardTempAvg.setStatus("mandatory")
_RearLEDCardTempMin_Type = OctetString
_RearLEDCardTempMin_Object = MibScalar
rearLEDCardTempMin = _RearLEDCardTempMin_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 5, 2),
    _RearLEDCardTempMin_Type()
)
rearLEDCardTempMin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rearLEDCardTempMin.setStatus("mandatory")
_RearLEDCardTempMax_Type = OctetString
_RearLEDCardTempMax_Object = MibScalar
rearLEDCardTempMax = _RearLEDCardTempMax_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 5, 3),
    _RearLEDCardTempMax_Type()
)
rearLEDCardTempMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rearLEDCardTempMax.setStatus("mandatory")
_MonitorTemp_ObjectIdentity = ObjectIdentity
monitorTemp = _MonitorTemp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 9)
)


class _HotAirRecircMonitoring_Type(Integer32):
    """Custom type hotAirRecircMonitoring based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_HotAirRecircMonitoring_Type.__name__ = "Integer32"
_HotAirRecircMonitoring_Object = MibScalar
hotAirRecircMonitoring = _HotAirRecircMonitoring_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 9, 3),
    _HotAirRecircMonitoring_Type()
)
hotAirRecircMonitoring.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    hotAirRecircMonitoring.setStatus("mandatory")
_HotAirRecircTempDeltaThresh_Type = Integer32
_HotAirRecircTempDeltaThresh_Object = MibScalar
hotAirRecircTempDeltaThresh = _HotAirRecircTempDeltaThresh_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 9, 5),
    _HotAirRecircTempDeltaThresh_Type()
)
hotAirRecircTempDeltaThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    hotAirRecircTempDeltaThresh.setStatus("mandatory")
_HotAirRecircStatusTable_Object = MibTable
hotAirRecircStatusTable = _HotAirRecircStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 9, 7)
)
if mibBuilder.loadTexts:
    hotAirRecircStatusTable.setStatus("mandatory")
_HotAirRecircStatusEntry_Object = MibTableRow
hotAirRecircStatusEntry = _HotAirRecircStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 9, 7, 1)
)
hotAirRecircStatusEntry.setIndexNames(
    (0, "CME-MIB", "hotAirRecircStatusTopologyPath"),
    (0, "CME-MIB", "hotAirRecircStatusIndex"),
)
if mibBuilder.loadTexts:
    hotAirRecircStatusEntry.setStatus("mandatory")


class _HotAirRecircStatusTopologyPath_Type(OctetString):
    """Custom type hotAirRecircStatusTopologyPath based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_HotAirRecircStatusTopologyPath_Type.__name__ = "OctetString"
_HotAirRecircStatusTopologyPath_Object = MibTableColumn
hotAirRecircStatusTopologyPath = _HotAirRecircStatusTopologyPath_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 9, 7, 1, 2),
    _HotAirRecircStatusTopologyPath_Type()
)
hotAirRecircStatusTopologyPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotAirRecircStatusTopologyPath.setStatus("mandatory")
_HotAirRecircStatusIndex_Type = Integer32
_HotAirRecircStatusIndex_Object = MibTableColumn
hotAirRecircStatusIndex = _HotAirRecircStatusIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 9, 7, 1, 3),
    _HotAirRecircStatusIndex_Type()
)
hotAirRecircStatusIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotAirRecircStatusIndex.setStatus("mandatory")
_HotAirRecircStatusName_Type = OctetString
_HotAirRecircStatusName_Object = MibTableColumn
hotAirRecircStatusName = _HotAirRecircStatusName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 9, 7, 1, 4),
    _HotAirRecircStatusName_Type()
)
hotAirRecircStatusName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotAirRecircStatusName.setStatus("mandatory")
_HotAirRecircStatusSensorLabel_Type = OctetString
_HotAirRecircStatusSensorLabel_Object = MibTableColumn
hotAirRecircStatusSensorLabel = _HotAirRecircStatusSensorLabel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 9, 7, 1, 5),
    _HotAirRecircStatusSensorLabel_Type()
)
hotAirRecircStatusSensorLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotAirRecircStatusSensorLabel.setStatus("mandatory")
_HotAirRecircStatusSensorReading_Type = OctetString
_HotAirRecircStatusSensorReading_Object = MibTableColumn
hotAirRecircStatusSensorReading = _HotAirRecircStatusSensorReading_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 9, 7, 1, 6),
    _HotAirRecircStatusSensorReading_Type()
)
hotAirRecircStatusSensorReading.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotAirRecircStatusSensorReading.setStatus("mandatory")


class _HotAirRecircStatusExceeded_Type(Integer32):
    """Custom type hotAirRecircStatusExceeded based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_HotAirRecircStatusExceeded_Type.__name__ = "Integer32"
_HotAirRecircStatusExceeded_Object = MibTableColumn
hotAirRecircStatusExceeded = _HotAirRecircStatusExceeded_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 1, 9, 7, 1, 7),
    _HotAirRecircStatusExceeded_Type()
)
hotAirRecircStatusExceeded.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotAirRecircStatusExceeded.setStatus("mandatory")
_ChassisFans_ObjectIdentity = ObjectIdentity
chassisFans = _ChassisFans_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3)
)
_ChassisFansTable_Object = MibTable
chassisFansTable = _ChassisFansTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 50)
)
if mibBuilder.loadTexts:
    chassisFansTable.setStatus("mandatory")
_ChassisFansEntry_Object = MibTableRow
chassisFansEntry = _ChassisFansEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 50, 1)
)
chassisFansEntry.setIndexNames(
    (0, "CME-MIB", "chassisFanIndex"),
)
if mibBuilder.loadTexts:
    chassisFansEntry.setStatus("mandatory")


class _ChassisFanIndex_Type(Integer32):
    """Custom type chassisFanIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_ChassisFanIndex_Type.__name__ = "Integer32"
_ChassisFanIndex_Object = MibTableColumn
chassisFanIndex = _ChassisFanIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 50, 1, 1),
    _ChassisFanIndex_Type()
)
chassisFanIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFanIndex.setStatus("mandatory")


class _ChassisFanId_Type(Integer32):
    """Custom type chassisFanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("chassisfan1", 1),
          ("chassisfan2", 2),
          ("chassisfan3", 3),
          ("chassisfan4", 4),
          ("chassisfan5", 5),
          ("chassisfan6", 6),
          ("chassisfan7", 7),
          ("chassisfan8", 8),
          ("chassisfan9", 9),
          ("chassisfan10", 10))
    )


_ChassisFanId_Type.__name__ = "Integer32"
_ChassisFanId_Object = MibTableColumn
chassisFanId = _ChassisFanId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 50, 1, 2),
    _ChassisFanId_Type()
)
chassisFanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFanId.setStatus("mandatory")
_ChassisFanSpeed_Type = OctetString
_ChassisFanSpeed_Object = MibTableColumn
chassisFanSpeed = _ChassisFanSpeed_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 50, 1, 3),
    _ChassisFanSpeed_Type()
)
chassisFanSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFanSpeed.setStatus("mandatory")


class _ChassisFanState_Type(Integer32):
    """Custom type chassisFanState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("good", 1),
          ("warning", 2),
          ("bad", 3))
    )


_ChassisFanState_Type.__name__ = "Integer32"
_ChassisFanState_Object = MibTableColumn
chassisFanState = _ChassisFanState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 50, 1, 4),
    _ChassisFanState_Type()
)
chassisFanState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFanState.setStatus("mandatory")
_ChassisFanSpeedRPM_Type = OctetString
_ChassisFanSpeedRPM_Object = MibTableColumn
chassisFanSpeedRPM = _ChassisFanSpeedRPM_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 50, 1, 5),
    _ChassisFanSpeedRPM_Type()
)
chassisFanSpeedRPM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFanSpeedRPM.setStatus("mandatory")


class _ChassisFanControllerState_Type(Integer32):
    """Custom type chassisFanControllerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("operational", 0),
          ("flashing", 1),
          ("notPresent", 2),
          ("communicationError", 3),
          ("unknown", 255))
    )


_ChassisFanControllerState_Type.__name__ = "Integer32"
_ChassisFanControllerState_Object = MibTableColumn
chassisFanControllerState = _ChassisFanControllerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 50, 1, 6),
    _ChassisFanControllerState_Type()
)
chassisFanControllerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFanControllerState.setStatus("mandatory")


class _ChassisFanCoolingZone_Type(Integer32):
    """Custom type chassisFanCoolingZone based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("coolingZone1", 1),
          ("coolingZone2", 2),
          ("coolingZone3", 3),
          ("coolingZone4", 4))
    )


_ChassisFanCoolingZone_Type.__name__ = "Integer32"
_ChassisFanCoolingZone_Object = MibTableColumn
chassisFanCoolingZone = _ChassisFanCoolingZone_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 50, 1, 7),
    _ChassisFanCoolingZone_Type()
)
chassisFanCoolingZone.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFanCoolingZone.setStatus("mandatory")
_ChassisCoolingZoneTable_Object = MibTable
chassisCoolingZoneTable = _ChassisCoolingZoneTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 51)
)
if mibBuilder.loadTexts:
    chassisCoolingZoneTable.setStatus("mandatory")
_ChassisCoolingZoneEntry_Object = MibTableRow
chassisCoolingZoneEntry = _ChassisCoolingZoneEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 51, 1)
)
chassisCoolingZoneEntry.setIndexNames(
    (0, "CME-MIB", "chassisCoolingIndex"),
)
if mibBuilder.loadTexts:
    chassisCoolingZoneEntry.setStatus("mandatory")


class _ChassisCoolingIndex_Type(Integer32):
    """Custom type chassisCoolingIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_ChassisCoolingIndex_Type.__name__ = "Integer32"
_ChassisCoolingIndex_Object = MibTableColumn
chassisCoolingIndex = _ChassisCoolingIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 51, 1, 1),
    _ChassisCoolingIndex_Type()
)
chassisCoolingIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisCoolingIndex.setStatus("mandatory")


class _ChassisCoolingZone_Type(Integer32):
    """Custom type chassisCoolingZone based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("coolingZone1", 1),
          ("coolingZone2", 2),
          ("coolingZone3", 3),
          ("coolingZone4", 4))
    )


_ChassisCoolingZone_Type.__name__ = "Integer32"
_ChassisCoolingZone_Object = MibTableColumn
chassisCoolingZone = _ChassisCoolingZone_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 51, 1, 2),
    _ChassisCoolingZone_Type()
)
chassisCoolingZone.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisCoolingZone.setStatus("mandatory")


class _ChassisCoolingZoneStatus_Type(Integer32):
    """Custom type chassisCoolingZoneStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("good", 1),
          ("warning", 2),
          ("bad", 3))
    )


_ChassisCoolingZoneStatus_Type.__name__ = "Integer32"
_ChassisCoolingZoneStatus_Object = MibTableColumn
chassisCoolingZoneStatus = _ChassisCoolingZoneStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 51, 1, 3),
    _ChassisCoolingZoneStatus_Type()
)
chassisCoolingZoneStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisCoolingZoneStatus.setStatus("mandatory")


class _ChassisCoolingZoneComponent_Type(Integer32):
    """Custom type chassisCoolingZoneComponent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              41,
              42,
              43,
              44,
              61,
              62,
              81,
              82,
              83,
              84,
              85,
              86,
              87,
              88,
              89,
              90)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14),
          ("switchModule1", 41),
          ("switchModule2", 42),
          ("switchModule3", 43),
          ("switchModule4", 44),
          ("mgmtModule1", 61),
          ("mgmtModule2", 62),
          ("fan1", 81),
          ("fan2", 82),
          ("fan3", 83),
          ("fan4", 84),
          ("fan5", 85),
          ("fan6", 86),
          ("fan7", 87),
          ("fan8", 88),
          ("fan9", 89),
          ("fan10", 90))
    )


_ChassisCoolingZoneComponent_Type.__name__ = "Integer32"
_ChassisCoolingZoneComponent_Object = MibTableColumn
chassisCoolingZoneComponent = _ChassisCoolingZoneComponent_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 3, 51, 1, 4),
    _ChassisCoolingZoneComponent_Type()
)
chassisCoolingZoneComponent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisCoolingZoneComponent.setStatus("mandatory")
_PowerModuleHealth_ObjectIdentity = ObjectIdentity
powerModuleHealth = _PowerModuleHealth_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 4)
)
_PowerModuleHealthTable_Object = MibTable
powerModuleHealthTable = _PowerModuleHealthTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 4, 1)
)
if mibBuilder.loadTexts:
    powerModuleHealthTable.setStatus("mandatory")
_PowerModuleHealthEntry_Object = MibTableRow
powerModuleHealthEntry = _PowerModuleHealthEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 4, 1, 1)
)
powerModuleHealthEntry.setIndexNames(
    (0, "CME-MIB", "powerModuleIndex"),
)
if mibBuilder.loadTexts:
    powerModuleHealthEntry.setStatus("mandatory")
_PowerModuleIndex_Type = Integer32
_PowerModuleIndex_Object = MibTableColumn
powerModuleIndex = _PowerModuleIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 4, 1, 1, 1),
    _PowerModuleIndex_Type()
)
powerModuleIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerModuleIndex.setStatus("mandatory")


class _PowerModuleExists_Type(Integer32):
    """Custom type powerModuleExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_PowerModuleExists_Type.__name__ = "Integer32"
_PowerModuleExists_Object = MibTableColumn
powerModuleExists = _PowerModuleExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 4, 1, 1, 2),
    _PowerModuleExists_Type()
)
powerModuleExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerModuleExists.setStatus("mandatory")


class _PowerModuleState_Type(Integer32):
    """Custom type powerModuleState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("good", 1),
          ("warning", 2),
          ("notAvailable", 3),
          ("critical", 4))
    )


_PowerModuleState_Type.__name__ = "Integer32"
_PowerModuleState_Object = MibTableColumn
powerModuleState = _PowerModuleState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 4, 1, 1, 3),
    _PowerModuleState_Type()
)
powerModuleState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerModuleState.setStatus("mandatory")
_PowerModuleDetails_Type = OctetString
_PowerModuleDetails_Object = MibTableColumn
powerModuleDetails = _PowerModuleDetails_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 4, 1, 1, 4),
    _PowerModuleDetails_Type()
)
powerModuleDetails.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerModuleDetails.setStatus("mandatory")
_PowerModuleDescription_Type = OctetString
_PowerModuleDescription_Object = MibTableColumn
powerModuleDescription = _PowerModuleDescription_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 4, 1, 1, 9),
    _PowerModuleDescription_Type()
)
powerModuleDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerModuleDescription.setStatus("mandatory")
_SpStatus_ObjectIdentity = ObjectIdentity
spStatus = _SpStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5)
)
_MmBistAndChassisStatus_ObjectIdentity = ObjectIdentity
mmBistAndChassisStatus = _MmBistAndChassisStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2)
)


class _BistRtc_Type(Integer32):
    """Custom type bistRtc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistRtc_Type.__name__ = "Integer32"
_BistRtc_Object = MibScalar
bistRtc = _BistRtc_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 5),
    _BistRtc_Type()
)
bistRtc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistRtc.setStatus("mandatory")


class _BistLocalI2CBus_Type(Integer32):
    """Custom type bistLocalI2CBus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistLocalI2CBus_Type.__name__ = "Integer32"
_BistLocalI2CBus_Object = MibScalar
bistLocalI2CBus = _BistLocalI2CBus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 7),
    _BistLocalI2CBus_Type()
)
bistLocalI2CBus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistLocalI2CBus.setStatus("mandatory")


class _BistPrimaryMainAppFlashImage_Type(Integer32):
    """Custom type bistPrimaryMainAppFlashImage based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistPrimaryMainAppFlashImage_Type.__name__ = "Integer32"
_BistPrimaryMainAppFlashImage_Object = MibScalar
bistPrimaryMainAppFlashImage = _BistPrimaryMainAppFlashImage_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 8),
    _BistPrimaryMainAppFlashImage_Type()
)
bistPrimaryMainAppFlashImage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistPrimaryMainAppFlashImage.setStatus("mandatory")


class _BistSecondaryMainAppFlashImage_Type(Integer32):
    """Custom type bistSecondaryMainAppFlashImage based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistSecondaryMainAppFlashImage_Type.__name__ = "Integer32"
_BistSecondaryMainAppFlashImage_Object = MibScalar
bistSecondaryMainAppFlashImage = _BistSecondaryMainAppFlashImage_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 9),
    _BistSecondaryMainAppFlashImage_Type()
)
bistSecondaryMainAppFlashImage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistSecondaryMainAppFlashImage.setStatus("mandatory")


class _BistBootRomFlashImage_Type(Integer32):
    """Custom type bistBootRomFlashImage based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistBootRomFlashImage_Type.__name__ = "Integer32"
_BistBootRomFlashImage_Object = MibScalar
bistBootRomFlashImage = _BistBootRomFlashImage_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 10),
    _BistBootRomFlashImage_Type()
)
bistBootRomFlashImage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistBootRomFlashImage.setStatus("mandatory")


class _BistEthernetPort1_Type(Integer32):
    """Custom type bistEthernetPort1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistEthernetPort1_Type.__name__ = "Integer32"
_BistEthernetPort1_Object = MibScalar
bistEthernetPort1 = _BistEthernetPort1_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 11),
    _BistEthernetPort1_Type()
)
bistEthernetPort1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistEthernetPort1.setStatus("mandatory")


class _BistExternalI2CDevices_Type(Integer32):
    """Custom type bistExternalI2CDevices based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistExternalI2CDevices_Type.__name__ = "Integer32"
_BistExternalI2CDevices_Object = MibScalar
bistExternalI2CDevices = _BistExternalI2CDevices_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 14),
    _BistExternalI2CDevices_Type()
)
bistExternalI2CDevices.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistExternalI2CDevices.setStatus("mandatory")


class _BistInternalEthernetSwitch_Type(Integer32):
    """Custom type bistInternalEthernetSwitch based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistInternalEthernetSwitch_Type.__name__ = "Integer32"
_BistInternalEthernetSwitch_Object = MibScalar
bistInternalEthernetSwitch = _BistInternalEthernetSwitch_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 19),
    _BistInternalEthernetSwitch_Type()
)
bistInternalEthernetSwitch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistInternalEthernetSwitch.setStatus("mandatory")


class _BistPrimaryKernel_Type(Integer32):
    """Custom type bistPrimaryKernel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistPrimaryKernel_Type.__name__ = "Integer32"
_BistPrimaryKernel_Object = MibScalar
bistPrimaryKernel = _BistPrimaryKernel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 25),
    _BistPrimaryKernel_Type()
)
bistPrimaryKernel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistPrimaryKernel.setStatus("mandatory")


class _BistSecondaryKernel_Type(Integer32):
    """Custom type bistSecondaryKernel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistSecondaryKernel_Type.__name__ = "Integer32"
_BistSecondaryKernel_Object = MibScalar
bistSecondaryKernel = _BistSecondaryKernel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 26),
    _BistSecondaryKernel_Type()
)
bistSecondaryKernel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistSecondaryKernel.setStatus("mandatory")


class _BistPhysicalNetworkLink_Type(Integer32):
    """Custom type bistPhysicalNetworkLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistPhysicalNetworkLink_Type.__name__ = "Integer32"
_BistPhysicalNetworkLink_Object = MibScalar
bistPhysicalNetworkLink = _BistPhysicalNetworkLink_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 29),
    _BistPhysicalNetworkLink_Type()
)
bistPhysicalNetworkLink.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistPhysicalNetworkLink.setStatus("mandatory")


class _BistLogicalNetworkLink_Type(Integer32):
    """Custom type bistLogicalNetworkLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_BistLogicalNetworkLink_Type.__name__ = "Integer32"
_BistLogicalNetworkLink_Object = MibScalar
bistLogicalNetworkLink = _BistLogicalNetworkLink_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 30),
    _BistLogicalNetworkLink_Type()
)
bistLogicalNetworkLink.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistLogicalNetworkLink.setStatus("mandatory")
_BistBladesInstalled_Type = OctetString
_BistBladesInstalled_Object = MibScalar
bistBladesInstalled = _BistBladesInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 33),
    _BistBladesInstalled_Type()
)
bistBladesInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistBladesInstalled.setStatus("mandatory")
_BistBladesCommunicating_Type = OctetString
_BistBladesCommunicating_Object = MibScalar
bistBladesCommunicating = _BistBladesCommunicating_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 49),
    _BistBladesCommunicating_Type()
)
bistBladesCommunicating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistBladesCommunicating.setStatus("mandatory")
_BistChassisFansInstalled_Type = OctetString
_BistChassisFansInstalled_Object = MibScalar
bistChassisFansInstalled = _BistChassisFansInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 65),
    _BistChassisFansInstalled_Type()
)
bistChassisFansInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistChassisFansInstalled.setStatus("mandatory")
_BistChassisFansFunctional_Type = OctetString
_BistChassisFansFunctional_Object = MibScalar
bistChassisFansFunctional = _BistChassisFansFunctional_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 73),
    _BistChassisFansFunctional_Type()
)
bistChassisFansFunctional.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistChassisFansFunctional.setStatus("mandatory")


class _BistRearLEDCardInstalled_Type(Integer32):
    """Custom type bistRearLEDCardInstalled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_BistRearLEDCardInstalled_Type.__name__ = "Integer32"
_BistRearLEDCardInstalled_Object = MibScalar
bistRearLEDCardInstalled = _BistRearLEDCardInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 74),
    _BistRearLEDCardInstalled_Type()
)
bistRearLEDCardInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistRearLEDCardInstalled.setStatus("mandatory")


class _BistRearLEDCardCommunicating_Type(Integer32):
    """Custom type bistRearLEDCardCommunicating based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_BistRearLEDCardCommunicating_Type.__name__ = "Integer32"
_BistRearLEDCardCommunicating_Object = MibScalar
bistRearLEDCardCommunicating = _BistRearLEDCardCommunicating_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 75),
    _BistRearLEDCardCommunicating_Type()
)
bistRearLEDCardCommunicating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistRearLEDCardCommunicating.setStatus("mandatory")


class _BistOtherMMInstalled_Type(Integer32):
    """Custom type bistOtherMMInstalled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_BistOtherMMInstalled_Type.__name__ = "Integer32"
_BistOtherMMInstalled_Object = MibScalar
bistOtherMMInstalled = _BistOtherMMInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 76),
    _BistOtherMMInstalled_Type()
)
bistOtherMMInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistOtherMMInstalled.setStatus("mandatory")


class _BistOtherMMCommunicating_Type(Integer32):
    """Custom type bistOtherMMCommunicating based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_BistOtherMMCommunicating_Type.__name__ = "Integer32"
_BistOtherMMCommunicating_Object = MibScalar
bistOtherMMCommunicating = _BistOtherMMCommunicating_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 77),
    _BistOtherMMCommunicating_Type()
)
bistOtherMMCommunicating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistOtherMMCommunicating.setStatus("mandatory")
_BistPowerModulesInstalled_Type = OctetString
_BistPowerModulesInstalled_Object = MibScalar
bistPowerModulesInstalled = _BistPowerModulesInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 81),
    _BistPowerModulesInstalled_Type()
)
bistPowerModulesInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistPowerModulesInstalled.setStatus("mandatory")
_BistPowerModulesFunctional_Type = OctetString
_BistPowerModulesFunctional_Object = MibScalar
bistPowerModulesFunctional = _BistPowerModulesFunctional_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 89),
    _BistPowerModulesFunctional_Type()
)
bistPowerModulesFunctional.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistPowerModulesFunctional.setStatus("mandatory")
_BistSwitchModulesInstalled_Type = OctetString
_BistSwitchModulesInstalled_Object = MibScalar
bistSwitchModulesInstalled = _BistSwitchModulesInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 97),
    _BistSwitchModulesInstalled_Type()
)
bistSwitchModulesInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistSwitchModulesInstalled.setStatus("mandatory")
_BistSwitchModulesCommunicating_Type = OctetString
_BistSwitchModulesCommunicating_Object = MibScalar
bistSwitchModulesCommunicating = _BistSwitchModulesCommunicating_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 113),
    _BistSwitchModulesCommunicating_Type()
)
bistSwitchModulesCommunicating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistSwitchModulesCommunicating.setStatus("mandatory")


class _BistChassisFansMUXAInstalled_Type(Integer32):
    """Custom type bistChassisFansMUXAInstalled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_BistChassisFansMUXAInstalled_Type.__name__ = "Integer32"
_BistChassisFansMUXAInstalled_Object = MibScalar
bistChassisFansMUXAInstalled = _BistChassisFansMUXAInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 120),
    _BistChassisFansMUXAInstalled_Type()
)
bistChassisFansMUXAInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistChassisFansMUXAInstalled.setStatus("mandatory")


class _BistChassisFansMUXAFunctional_Type(Integer32):
    """Custom type bistChassisFansMUXAFunctional based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_BistChassisFansMUXAFunctional_Type.__name__ = "Integer32"
_BistChassisFansMUXAFunctional_Object = MibScalar
bistChassisFansMUXAFunctional = _BistChassisFansMUXAFunctional_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 121),
    _BistChassisFansMUXAFunctional_Type()
)
bistChassisFansMUXAFunctional.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistChassisFansMUXAFunctional.setStatus("mandatory")


class _BistChassisFansMUXBInstalled_Type(Integer32):
    """Custom type bistChassisFansMUXBInstalled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_BistChassisFansMUXBInstalled_Type.__name__ = "Integer32"
_BistChassisFansMUXBInstalled_Object = MibScalar
bistChassisFansMUXBInstalled = _BistChassisFansMUXBInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 122),
    _BistChassisFansMUXBInstalled_Type()
)
bistChassisFansMUXBInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistChassisFansMUXBInstalled.setStatus("mandatory")


class _BistChassisFansMUXBFunctional_Type(Integer32):
    """Custom type bistChassisFansMUXBFunctional based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_BistChassisFansMUXBFunctional_Type.__name__ = "Integer32"
_BistChassisFansMUXBFunctional_Object = MibScalar
bistChassisFansMUXBFunctional = _BistChassisFansMUXBFunctional_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 123),
    _BistChassisFansMUXBFunctional_Type()
)
bistChassisFansMUXBFunctional.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistChassisFansMUXBFunctional.setStatus("mandatory")
_BistLastUpdate_Type = OctetString
_BistLastUpdate_Object = MibScalar
bistLastUpdate = _BistLastUpdate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 2, 200),
    _BistLastUpdate_Type()
)
bistLastUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bistLastUpdate.setStatus("mandatory")
_RmmBistAndChassisStatus_ObjectIdentity = ObjectIdentity
rmmBistAndChassisStatus = _RmmBistAndChassisStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3)
)


class _RbistRtc_Type(Integer32):
    """Custom type rbistRtc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_RbistRtc_Type.__name__ = "Integer32"
_RbistRtc_Object = MibScalar
rbistRtc = _RbistRtc_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 5),
    _RbistRtc_Type()
)
rbistRtc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistRtc.setStatus("mandatory")


class _RbistLocalI2CBus_Type(Integer32):
    """Custom type rbistLocalI2CBus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_RbistLocalI2CBus_Type.__name__ = "Integer32"
_RbistLocalI2CBus_Object = MibScalar
rbistLocalI2CBus = _RbistLocalI2CBus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 7),
    _RbistLocalI2CBus_Type()
)
rbistLocalI2CBus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistLocalI2CBus.setStatus("mandatory")


class _RbistEthernetPort1_Type(Integer32):
    """Custom type rbistEthernetPort1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_RbistEthernetPort1_Type.__name__ = "Integer32"
_RbistEthernetPort1_Object = MibScalar
rbistEthernetPort1 = _RbistEthernetPort1_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 11),
    _RbistEthernetPort1_Type()
)
rbistEthernetPort1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistEthernetPort1.setStatus("mandatory")


class _RbistExternalI2CDevices_Type(Integer32):
    """Custom type rbistExternalI2CDevices based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_RbistExternalI2CDevices_Type.__name__ = "Integer32"
_RbistExternalI2CDevices_Object = MibScalar
rbistExternalI2CDevices = _RbistExternalI2CDevices_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 14),
    _RbistExternalI2CDevices_Type()
)
rbistExternalI2CDevices.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistExternalI2CDevices.setStatus("mandatory")


class _RbistInternalEthernetSwitch_Type(Integer32):
    """Custom type rbistInternalEthernetSwitch based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_RbistInternalEthernetSwitch_Type.__name__ = "Integer32"
_RbistInternalEthernetSwitch_Object = MibScalar
rbistInternalEthernetSwitch = _RbistInternalEthernetSwitch_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 19),
    _RbistInternalEthernetSwitch_Type()
)
rbistInternalEthernetSwitch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistInternalEthernetSwitch.setStatus("mandatory")


class _RbistPhysicalNetworkLink_Type(Integer32):
    """Custom type rbistPhysicalNetworkLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_RbistPhysicalNetworkLink_Type.__name__ = "Integer32"
_RbistPhysicalNetworkLink_Object = MibScalar
rbistPhysicalNetworkLink = _RbistPhysicalNetworkLink_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 29),
    _RbistPhysicalNetworkLink_Type()
)
rbistPhysicalNetworkLink.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistPhysicalNetworkLink.setStatus("mandatory")


class _RbistLogicalNetworkLink_Type(Integer32):
    """Custom type rbistLogicalNetworkLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("testSucceeded", 0),
          ("testFailed", 1))
    )


_RbistLogicalNetworkLink_Type.__name__ = "Integer32"
_RbistLogicalNetworkLink_Object = MibScalar
rbistLogicalNetworkLink = _RbistLogicalNetworkLink_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 30),
    _RbistLogicalNetworkLink_Type()
)
rbistLogicalNetworkLink.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistLogicalNetworkLink.setStatus("mandatory")
_RbistBladesInstalled_Type = OctetString
_RbistBladesInstalled_Object = MibScalar
rbistBladesInstalled = _RbistBladesInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 33),
    _RbistBladesInstalled_Type()
)
rbistBladesInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistBladesInstalled.setStatus("mandatory")
_RbistBladesCommunicating_Type = OctetString
_RbistBladesCommunicating_Object = MibScalar
rbistBladesCommunicating = _RbistBladesCommunicating_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 49),
    _RbistBladesCommunicating_Type()
)
rbistBladesCommunicating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistBladesCommunicating.setStatus("mandatory")
_RbistChassisFansInstalled_Type = OctetString
_RbistChassisFansInstalled_Object = MibScalar
rbistChassisFansInstalled = _RbistChassisFansInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 65),
    _RbistChassisFansInstalled_Type()
)
rbistChassisFansInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistChassisFansInstalled.setStatus("mandatory")
_RbistChassisFansFunctional_Type = OctetString
_RbistChassisFansFunctional_Object = MibScalar
rbistChassisFansFunctional = _RbistChassisFansFunctional_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 73),
    _RbistChassisFansFunctional_Type()
)
rbistChassisFansFunctional.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistChassisFansFunctional.setStatus("mandatory")


class _RbistRearLEDCardInstalled_Type(Integer32):
    """Custom type rbistRearLEDCardInstalled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_RbistRearLEDCardInstalled_Type.__name__ = "Integer32"
_RbistRearLEDCardInstalled_Object = MibScalar
rbistRearLEDCardInstalled = _RbistRearLEDCardInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 74),
    _RbistRearLEDCardInstalled_Type()
)
rbistRearLEDCardInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistRearLEDCardInstalled.setStatus("mandatory")


class _RbistRearLEDCardCommunicating_Type(Integer32):
    """Custom type rbistRearLEDCardCommunicating based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_RbistRearLEDCardCommunicating_Type.__name__ = "Integer32"
_RbistRearLEDCardCommunicating_Object = MibScalar
rbistRearLEDCardCommunicating = _RbistRearLEDCardCommunicating_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 75),
    _RbistRearLEDCardCommunicating_Type()
)
rbistRearLEDCardCommunicating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistRearLEDCardCommunicating.setStatus("mandatory")


class _RbistOtherMMInstalled_Type(Integer32):
    """Custom type rbistOtherMMInstalled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_RbistOtherMMInstalled_Type.__name__ = "Integer32"
_RbistOtherMMInstalled_Object = MibScalar
rbistOtherMMInstalled = _RbistOtherMMInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 76),
    _RbistOtherMMInstalled_Type()
)
rbistOtherMMInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistOtherMMInstalled.setStatus("mandatory")


class _RbistOtherMMCommunicating_Type(Integer32):
    """Custom type rbistOtherMMCommunicating based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_RbistOtherMMCommunicating_Type.__name__ = "Integer32"
_RbistOtherMMCommunicating_Object = MibScalar
rbistOtherMMCommunicating = _RbistOtherMMCommunicating_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 77),
    _RbistOtherMMCommunicating_Type()
)
rbistOtherMMCommunicating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistOtherMMCommunicating.setStatus("mandatory")
_RbistPowerModulesInstalled_Type = OctetString
_RbistPowerModulesInstalled_Object = MibScalar
rbistPowerModulesInstalled = _RbistPowerModulesInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 81),
    _RbistPowerModulesInstalled_Type()
)
rbistPowerModulesInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistPowerModulesInstalled.setStatus("mandatory")
_RbistPowerModulesFunctional_Type = OctetString
_RbistPowerModulesFunctional_Object = MibScalar
rbistPowerModulesFunctional = _RbistPowerModulesFunctional_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 89),
    _RbistPowerModulesFunctional_Type()
)
rbistPowerModulesFunctional.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistPowerModulesFunctional.setStatus("mandatory")
_RbistSwitchModulesInstalled_Type = OctetString
_RbistSwitchModulesInstalled_Object = MibScalar
rbistSwitchModulesInstalled = _RbistSwitchModulesInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 97),
    _RbistSwitchModulesInstalled_Type()
)
rbistSwitchModulesInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistSwitchModulesInstalled.setStatus("mandatory")
_RbistSwitchModulesCommunicating_Type = OctetString
_RbistSwitchModulesCommunicating_Object = MibScalar
rbistSwitchModulesCommunicating = _RbistSwitchModulesCommunicating_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 113),
    _RbistSwitchModulesCommunicating_Type()
)
rbistSwitchModulesCommunicating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistSwitchModulesCommunicating.setStatus("mandatory")


class _RbistChassisFansMUXAInstalled_Type(Integer32):
    """Custom type rbistChassisFansMUXAInstalled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_RbistChassisFansMUXAInstalled_Type.__name__ = "Integer32"
_RbistChassisFansMUXAInstalled_Object = MibScalar
rbistChassisFansMUXAInstalled = _RbistChassisFansMUXAInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 120),
    _RbistChassisFansMUXAInstalled_Type()
)
rbistChassisFansMUXAInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistChassisFansMUXAInstalled.setStatus("mandatory")


class _RbistChassisFansMUXAFunctional_Type(Integer32):
    """Custom type rbistChassisFansMUXAFunctional based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_RbistChassisFansMUXAFunctional_Type.__name__ = "Integer32"
_RbistChassisFansMUXAFunctional_Object = MibScalar
rbistChassisFansMUXAFunctional = _RbistChassisFansMUXAFunctional_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 121),
    _RbistChassisFansMUXAFunctional_Type()
)
rbistChassisFansMUXAFunctional.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistChassisFansMUXAFunctional.setStatus("mandatory")


class _RbistChassisFansMUXBInstalled_Type(Integer32):
    """Custom type rbistChassisFansMUXBInstalled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_RbistChassisFansMUXBInstalled_Type.__name__ = "Integer32"
_RbistChassisFansMUXBInstalled_Object = MibScalar
rbistChassisFansMUXBInstalled = _RbistChassisFansMUXBInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 122),
    _RbistChassisFansMUXBInstalled_Type()
)
rbistChassisFansMUXBInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistChassisFansMUXBInstalled.setStatus("mandatory")


class _RbistChassisFansMUXBFunctional_Type(Integer32):
    """Custom type rbistChassisFansMUXBFunctional based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_RbistChassisFansMUXBFunctional_Type.__name__ = "Integer32"
_RbistChassisFansMUXBFunctional_Object = MibScalar
rbistChassisFansMUXBFunctional = _RbistChassisFansMUXBFunctional_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 123),
    _RbistChassisFansMUXBFunctional_Type()
)
rbistChassisFansMUXBFunctional.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistChassisFansMUXBFunctional.setStatus("mandatory")
_RbistUpdateTime_Type = OctetString
_RbistUpdateTime_Object = MibScalar
rbistUpdateTime = _RbistUpdateTime_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 200),
    _RbistUpdateTime_Type()
)
rbistUpdateTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistUpdateTime.setStatus("mandatory")
_RbistLastUpdatePrimary_Type = OctetString
_RbistLastUpdatePrimary_Object = MibScalar
rbistLastUpdatePrimary = _RbistLastUpdatePrimary_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 5, 3, 201),
    _RbistLastUpdatePrimary_Type()
)
rbistLastUpdatePrimary.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rbistLastUpdatePrimary.setStatus("mandatory")
_FanPack_ObjectIdentity = ObjectIdentity
fanPack = _FanPack_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6)
)
_FanPackTable_Object = MibTable
fanPackTable = _FanPackTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6, 1)
)
if mibBuilder.loadTexts:
    fanPackTable.setStatus("mandatory")
_FanPackEntry_Object = MibTableRow
fanPackEntry = _FanPackEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6, 1, 1)
)
fanPackEntry.setIndexNames(
    (0, "CME-MIB", "fanPackIndex"),
)
if mibBuilder.loadTexts:
    fanPackEntry.setStatus("mandatory")
_FanPackIndex_Type = Integer32
_FanPackIndex_Object = MibTableColumn
fanPackIndex = _FanPackIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6, 1, 1, 1),
    _FanPackIndex_Type()
)
fanPackIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fanPackIndex.setStatus("mandatory")


class _FanPackExists_Type(Integer32):
    """Custom type fanPackExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_FanPackExists_Type.__name__ = "Integer32"
_FanPackExists_Object = MibTableColumn
fanPackExists = _FanPackExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6, 1, 1, 2),
    _FanPackExists_Type()
)
fanPackExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fanPackExists.setStatus("mandatory")


class _FanPackState_Type(Integer32):
    """Custom type fanPackState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("good", 1),
          ("warning", 2),
          ("bad", 3))
    )


_FanPackState_Type.__name__ = "Integer32"
_FanPackState_Object = MibTableColumn
fanPackState = _FanPackState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6, 1, 1, 3),
    _FanPackState_Type()
)
fanPackState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fanPackState.setStatus("mandatory")


class _FanPackFanCount_Type(Integer32):
    """Custom type fanPackFanCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            255
        )
    )
    namedValues = NamedValues(
        ("unknown", 255)
    )


_FanPackFanCount_Type.__name__ = "Integer32"
_FanPackFanCount_Object = MibTableColumn
fanPackFanCount = _FanPackFanCount_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6, 1, 1, 4),
    _FanPackFanCount_Type()
)
fanPackFanCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fanPackFanCount.setStatus("mandatory")
_FanPackAverageSpeed_Type = OctetString
_FanPackAverageSpeed_Object = MibTableColumn
fanPackAverageSpeed = _FanPackAverageSpeed_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6, 1, 1, 5),
    _FanPackAverageSpeed_Type()
)
fanPackAverageSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fanPackAverageSpeed.setStatus("mandatory")
_FanPackAverageSpeedRPM_Type = OctetString
_FanPackAverageSpeedRPM_Object = MibTableColumn
fanPackAverageSpeedRPM = _FanPackAverageSpeedRPM_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6, 1, 1, 6),
    _FanPackAverageSpeedRPM_Type()
)
fanPackAverageSpeedRPM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fanPackAverageSpeedRPM.setStatus("mandatory")


class _FanPackControllerState_Type(Integer32):
    """Custom type fanPackControllerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("operational", 0),
          ("flashing", 1),
          ("notPresent", 2),
          ("communicationError", 3),
          ("unknown", 255))
    )


_FanPackControllerState_Type.__name__ = "Integer32"
_FanPackControllerState_Object = MibTableColumn
fanPackControllerState = _FanPackControllerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 6, 1, 1, 7),
    _FanPackControllerState_Type()
)
fanPackControllerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fanPackControllerState.setStatus("mandatory")
_SystemHealth_ObjectIdentity = ObjectIdentity
systemHealth = _SystemHealth_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7)
)


class _SystemHealthStat_Type(Integer32):
    """Custom type systemHealthStat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              2,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("critical", 0),
          ("nonCritical", 2),
          ("systemLevel", 4),
          ("normal", 255))
    )


_SystemHealthStat_Type.__name__ = "Integer32"
_SystemHealthStat_Object = MibScalar
systemHealthStat = _SystemHealthStat_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7, 1),
    _SystemHealthStat_Type()
)
systemHealthStat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    systemHealthStat.setStatus("mandatory")
_SystemHealthSummaryTable_Object = MibTable
systemHealthSummaryTable = _SystemHealthSummaryTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7, 2)
)
if mibBuilder.loadTexts:
    systemHealthSummaryTable.setStatus("mandatory")
_SystemHealthSummaryEntry_Object = MibTableRow
systemHealthSummaryEntry = _SystemHealthSummaryEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7, 2, 1)
)
systemHealthSummaryEntry.setIndexNames(
    (0, "CME-MIB", "systemHealthSummaryIndex"),
)
if mibBuilder.loadTexts:
    systemHealthSummaryEntry.setStatus("mandatory")
_SystemHealthSummaryIndex_Type = Integer32
_SystemHealthSummaryIndex_Object = MibTableColumn
systemHealthSummaryIndex = _SystemHealthSummaryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7, 2, 1, 1),
    _SystemHealthSummaryIndex_Type()
)
systemHealthSummaryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    systemHealthSummaryIndex.setStatus("mandatory")
_SystemHealthSummarySeverity_Type = OctetString
_SystemHealthSummarySeverity_Object = MibTableColumn
systemHealthSummarySeverity = _SystemHealthSummarySeverity_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7, 2, 1, 2),
    _SystemHealthSummarySeverity_Type()
)
systemHealthSummarySeverity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    systemHealthSummarySeverity.setStatus("mandatory")
_SystemHealthSummaryDescription_Type = OctetString
_SystemHealthSummaryDescription_Object = MibTableColumn
systemHealthSummaryDescription = _SystemHealthSummaryDescription_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7, 2, 1, 3),
    _SystemHealthSummaryDescription_Type()
)
systemHealthSummaryDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    systemHealthSummaryDescription.setStatus("mandatory")
_SystemHealthSummaryDateTime_Type = OctetString
_SystemHealthSummaryDateTime_Object = MibTableColumn
systemHealthSummaryDateTime = _SystemHealthSummaryDateTime_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7, 2, 1, 4),
    _SystemHealthSummaryDateTime_Type()
)
systemHealthSummaryDateTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    systemHealthSummaryDateTime.setStatus("mandatory")
_SystemHealthSummaryAuxData_Type = OctetString
_SystemHealthSummaryAuxData_Object = MibTableColumn
systemHealthSummaryAuxData = _SystemHealthSummaryAuxData_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7, 2, 1, 11),
    _SystemHealthSummaryAuxData_Type()
)
systemHealthSummaryAuxData.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    systemHealthSummaryAuxData.setStatus("mandatory")
_SystemHealthSummaryEventID_Type = OctetString
_SystemHealthSummaryEventID_Object = MibTableColumn
systemHealthSummaryEventID = _SystemHealthSummaryEventID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 7, 2, 1, 12),
    _SystemHealthSummaryEventID_Type()
)
systemHealthSummaryEventID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    systemHealthSummaryEventID.setStatus("mandatory")
_Leds_ObjectIdentity = ObjectIdentity
leds = _Leds_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8)
)
_FrontPanelLEDs_ObjectIdentity = ObjectIdentity
frontPanelLEDs = _FrontPanelLEDs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 1)
)


class _FaultLED_Type(Integer32):
    """Custom type faultLED based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_FaultLED_Type.__name__ = "Integer32"
_FaultLED_Object = MibScalar
faultLED = _FaultLED_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 1, 1),
    _FaultLED_Type()
)
faultLED.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    faultLED.setStatus("mandatory")


class _CheckLogLED_Type(Integer32):
    """Custom type checkLogLED based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_CheckLogLED_Type.__name__ = "Integer32"
_CheckLogLED_Object = MibScalar
checkLogLED = _CheckLogLED_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 1, 2),
    _CheckLogLED_Type()
)
checkLogLED.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    checkLogLED.setStatus("mandatory")


class _IdentifyLED_Type(Integer32):
    """Custom type identifyLED based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("blinking", 2),
          ("notAvailable", 3))
    )


_IdentifyLED_Type.__name__ = "Integer32"
_IdentifyLED_Object = MibScalar
identifyLED = _IdentifyLED_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 1, 4),
    _IdentifyLED_Type()
)
identifyLED.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    identifyLED.setStatus("mandatory")
_BladeLEDs_ObjectIdentity = ObjectIdentity
bladeLEDs = _BladeLEDs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2)
)
_BladeLEDsTable_Object = MibTable
bladeLEDsTable = _BladeLEDsTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1)
)
if mibBuilder.loadTexts:
    bladeLEDsTable.setStatus("mandatory")
_BladeLEDsEntry_Object = MibTableRow
bladeLEDsEntry = _BladeLEDsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1)
)
bladeLEDsEntry.setIndexNames(
    (0, "CME-MIB", "ledBladeIndex"),
)
if mibBuilder.loadTexts:
    bladeLEDsEntry.setStatus("mandatory")
_LedBladeIndex_Type = Integer32
_LedBladeIndex_Object = MibTableColumn
ledBladeIndex = _LedBladeIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 1),
    _LedBladeIndex_Type()
)
ledBladeIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledBladeIndex.setStatus("mandatory")


class _LedBladeId_Type(Integer32):
    """Custom type ledBladeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_LedBladeId_Type.__name__ = "Integer32"
_LedBladeId_Object = MibTableColumn
ledBladeId = _LedBladeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 2),
    _LedBladeId_Type()
)
ledBladeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledBladeId.setStatus("mandatory")


class _LedBladeExists_Type(Integer32):
    """Custom type ledBladeExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_LedBladeExists_Type.__name__ = "Integer32"
_LedBladeExists_Object = MibTableColumn
ledBladeExists = _LedBladeExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 3),
    _LedBladeExists_Type()
)
ledBladeExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledBladeExists.setStatus("mandatory")


class _LedBladePowerState_Type(Integer32):
    """Custom type ledBladePowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("standby", 3),
          ("hibernate", 4),
          ("unknown", 255))
    )


_LedBladePowerState_Type.__name__ = "Integer32"
_LedBladePowerState_Object = MibTableColumn
ledBladePowerState = _LedBladePowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 4),
    _LedBladePowerState_Type()
)
ledBladePowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledBladePowerState.setStatus("mandatory")


class _LedBladeHealthState_Type(Integer32):
    """Custom type ledBladeHealthState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("good", 1),
          ("warning", 2),
          ("critical", 3),
          ("kernelMode", 4),
          ("discovering", 5),
          ("commError", 6),
          ("noPower", 7),
          ("flashing", 8),
          ("initFailure", 9),
          ("insufficientPower", 10),
          ("powerDenied", 11),
          ("maintMode", 12),
          ("firehoseDump", 13))
    )


_LedBladeHealthState_Type.__name__ = "Integer32"
_LedBladeHealthState_Object = MibTableColumn
ledBladeHealthState = _LedBladeHealthState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 5),
    _LedBladeHealthState_Type()
)
ledBladeHealthState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledBladeHealthState.setStatus("mandatory")
_LedBladeName_Type = OctetString
_LedBladeName_Object = MibTableColumn
ledBladeName = _LedBladeName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 6),
    _LedBladeName_Type()
)
ledBladeName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledBladeName.setStatus("mandatory")


class _LedBladeFault_Type(Integer32):
    """Custom type ledBladeFault based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_LedBladeFault_Type.__name__ = "Integer32"
_LedBladeFault_Object = MibTableColumn
ledBladeFault = _LedBladeFault_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 7),
    _LedBladeFault_Type()
)
ledBladeFault.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledBladeFault.setStatus("mandatory")


class _LedBladeCheckLog_Type(Integer32):
    """Custom type ledBladeCheckLog based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_LedBladeCheckLog_Type.__name__ = "Integer32"
_LedBladeCheckLog_Object = MibTableColumn
ledBladeCheckLog = _LedBladeCheckLog_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 8),
    _LedBladeCheckLog_Type()
)
ledBladeCheckLog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ledBladeCheckLog.setStatus("mandatory")


class _LedBladeIdentify_Type(Integer32):
    """Custom type ledBladeIdentify based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("blinking", 2))
    )


_LedBladeIdentify_Type.__name__ = "Integer32"
_LedBladeIdentify_Object = MibTableColumn
ledBladeIdentify = _LedBladeIdentify_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 1, 1, 11),
    _LedBladeIdentify_Type()
)
ledBladeIdentify.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ledBladeIdentify.setStatus("mandatory")
_BladeLEDsDetailsTable_Object = MibTable
bladeLEDsDetailsTable = _BladeLEDsDetailsTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 2)
)
if mibBuilder.loadTexts:
    bladeLEDsDetailsTable.setStatus("mandatory")
_BladeLEDsDetailsEntry_Object = MibTableRow
bladeLEDsDetailsEntry = _BladeLEDsDetailsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 2, 1)
)
bladeLEDsDetailsEntry.setIndexNames(
    (0, "CME-MIB", "ledIndex"),
)
if mibBuilder.loadTexts:
    bladeLEDsDetailsEntry.setStatus("mandatory")
_LedIndex_Type = Integer32
_LedIndex_Object = MibTableColumn
ledIndex = _LedIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 2, 1, 1),
    _LedIndex_Type()
)
ledIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledIndex.setStatus("mandatory")
_LedBladeBayNumber_Type = OctetString
_LedBladeBayNumber_Object = MibTableColumn
ledBladeBayNumber = _LedBladeBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 2, 1, 2),
    _LedBladeBayNumber_Type()
)
ledBladeBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledBladeBayNumber.setStatus("mandatory")
_LedBladeComponentType_Type = OctetString
_LedBladeComponentType_Object = MibTableColumn
ledBladeComponentType = _LedBladeComponentType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 2, 1, 3),
    _LedBladeComponentType_Type()
)
ledBladeComponentType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledBladeComponentType.setStatus("mandatory")
_LedBladeLabel_Type = OctetString
_LedBladeLabel_Object = MibTableColumn
ledBladeLabel = _LedBladeLabel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 2, 1, 4),
    _LedBladeLabel_Type()
)
ledBladeLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledBladeLabel.setStatus("mandatory")


class _LedBladeState_Type(Integer32):
    """Custom type ledBladeState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("blinking", 2))
    )


_LedBladeState_Type.__name__ = "Integer32"
_LedBladeState_Object = MibTableColumn
ledBladeState = _LedBladeState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 2, 1, 5),
    _LedBladeState_Type()
)
ledBladeState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledBladeState.setStatus("mandatory")
_LedBladeLocation_Type = OctetString
_LedBladeLocation_Object = MibTableColumn
ledBladeLocation = _LedBladeLocation_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 2, 2, 1, 6),
    _LedBladeLocation_Type()
)
ledBladeLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledBladeLocation.setStatus("mandatory")
_SmLEDs_ObjectIdentity = ObjectIdentity
smLEDs = _SmLEDs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 4)
)
_SmLEDsTable_Object = MibTable
smLEDsTable = _SmLEDsTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 4, 2)
)
if mibBuilder.loadTexts:
    smLEDsTable.setStatus("mandatory")
_SmLEDsEntry_Object = MibTableRow
smLEDsEntry = _SmLEDsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 4, 2, 1)
)
smLEDsEntry.setIndexNames(
    (0, "CME-MIB", "ledSMSlot"),
    (0, "CME-MIB", "ledSMIndex"),
)
if mibBuilder.loadTexts:
    smLEDsEntry.setStatus("mandatory")
_LedSMIndex_Type = Integer32
_LedSMIndex_Object = MibTableColumn
ledSMIndex = _LedSMIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 4, 2, 1, 1),
    _LedSMIndex_Type()
)
ledSMIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledSMIndex.setStatus("mandatory")


class _LedSMSlot_Type(Integer32):
    """Custom type ledSMSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_LedSMSlot_Type.__name__ = "Integer32"
_LedSMSlot_Object = MibTableColumn
ledSMSlot = _LedSMSlot_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 4, 2, 1, 2),
    _LedSMSlot_Type()
)
ledSMSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledSMSlot.setStatus("mandatory")


class _LedSMLabel_Type(OctetString):
    """Custom type ledSMLabel based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(256, 256),
    )
    fixed_length = 256


_LedSMLabel_Type.__name__ = "OctetString"
_LedSMLabel_Object = MibTableColumn
ledSMLabel = _LedSMLabel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 4, 2, 1, 3),
    _LedSMLabel_Type()
)
ledSMLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledSMLabel.setStatus("mandatory")


class _LedSMState_Type(Integer32):
    """Custom type ledSMState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("blinking", 2))
    )


_LedSMState_Type.__name__ = "Integer32"
_LedSMState_Object = MibTableColumn
ledSMState = _LedSMState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 4, 2, 1, 4),
    _LedSMState_Type()
)
ledSMState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ledSMState.setStatus("mandatory")


class _LedSMLocation_Type(OctetString):
    """Custom type ledSMLocation based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(256, 256),
    )
    fixed_length = 256


_LedSMLocation_Type.__name__ = "OctetString"
_LedSMLocation_Object = MibTableColumn
ledSMLocation = _LedSMLocation_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 4, 2, 1, 5),
    _LedSMLocation_Type()
)
ledSMLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledSMLocation.setStatus("mandatory")
_ChassisFanLEDs_ObjectIdentity = ObjectIdentity
chassisFanLEDs = _ChassisFanLEDs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 5)
)
_ChassisFanLEDsTable_Object = MibTable
chassisFanLEDsTable = _ChassisFanLEDsTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 5, 1)
)
if mibBuilder.loadTexts:
    chassisFanLEDsTable.setStatus("mandatory")
_ChassisFanLEDsEntry_Object = MibTableRow
chassisFanLEDsEntry = _ChassisFanLEDsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 5, 1, 1)
)
chassisFanLEDsEntry.setIndexNames(
    (0, "CME-MIB", "ledChassisFanIndex"),
)
if mibBuilder.loadTexts:
    chassisFanLEDsEntry.setStatus("mandatory")


class _LedChassisFanIndex_Type(Integer32):
    """Custom type ledChassisFanIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_LedChassisFanIndex_Type.__name__ = "Integer32"
_LedChassisFanIndex_Object = MibTableColumn
ledChassisFanIndex = _LedChassisFanIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 5, 1, 1, 1),
    _LedChassisFanIndex_Type()
)
ledChassisFanIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledChassisFanIndex.setStatus("mandatory")


class _LedChassisFanId_Type(Integer32):
    """Custom type ledChassisFanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("chassisfan1", 1),
          ("chassisfan2", 2),
          ("chassisfan3", 3),
          ("chassisfan4", 4),
          ("chassisfan5", 5),
          ("chassisfan6", 6),
          ("chassisfan7", 7),
          ("chassisfan8", 8),
          ("chassisfan9", 9),
          ("chassisfan10", 10))
    )


_LedChassisFanId_Type.__name__ = "Integer32"
_LedChassisFanId_Object = MibTableColumn
ledChassisFanId = _LedChassisFanId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 5, 1, 1, 2),
    _LedChassisFanId_Type()
)
ledChassisFanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledChassisFanId.setStatus("mandatory")


class _LedChassisFanExists_Type(Integer32):
    """Custom type ledChassisFanExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_LedChassisFanExists_Type.__name__ = "Integer32"
_LedChassisFanExists_Object = MibTableColumn
ledChassisFanExists = _LedChassisFanExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 5, 1, 1, 3),
    _LedChassisFanExists_Type()
)
ledChassisFanExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledChassisFanExists.setStatus("mandatory")


class _LedChassisFanError_Type(Integer32):
    """Custom type ledChassisFanError based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("notAvailable", 2))
    )


_LedChassisFanError_Type.__name__ = "Integer32"
_LedChassisFanError_Object = MibTableColumn
ledChassisFanError = _LedChassisFanError_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 5, 1, 1, 4),
    _LedChassisFanError_Type()
)
ledChassisFanError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledChassisFanError.setStatus("mandatory")
_FanPackLEDs_ObjectIdentity = ObjectIdentity
fanPackLEDs = _FanPackLEDs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 6)
)
_FanPackLEDsTable_Object = MibTable
fanPackLEDsTable = _FanPackLEDsTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 6, 1)
)
if mibBuilder.loadTexts:
    fanPackLEDsTable.setStatus("deprecated")
_FanPackLEDsEntry_Object = MibTableRow
fanPackLEDsEntry = _FanPackLEDsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 6, 1, 1)
)
fanPackLEDsEntry.setIndexNames(
    (0, "CME-MIB", "ledFanPackIndex"),
)
if mibBuilder.loadTexts:
    fanPackLEDsEntry.setStatus("deprecated")


class _LedFanPackIndex_Type(Integer32):
    """Custom type ledFanPackIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_LedFanPackIndex_Type.__name__ = "Integer32"
_LedFanPackIndex_Object = MibTableColumn
ledFanPackIndex = _LedFanPackIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 6, 1, 1, 1),
    _LedFanPackIndex_Type()
)
ledFanPackIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledFanPackIndex.setStatus("deprecated")


class _LedFanPackId_Type(Integer32):
    """Custom type ledFanPackId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("fanPack1", 1),
          ("fanPack2", 2),
          ("fanPack3", 3),
          ("fanPack4", 4),
          ("fanPack5", 5),
          ("fanPack6", 6))
    )


_LedFanPackId_Type.__name__ = "Integer32"
_LedFanPackId_Object = MibTableColumn
ledFanPackId = _LedFanPackId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 6, 1, 1, 2),
    _LedFanPackId_Type()
)
ledFanPackId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledFanPackId.setStatus("deprecated")


class _LedFanPackExists_Type(Integer32):
    """Custom type ledFanPackExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_LedFanPackExists_Type.__name__ = "Integer32"
_LedFanPackExists_Object = MibTableColumn
ledFanPackExists = _LedFanPackExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 6, 1, 1, 3),
    _LedFanPackExists_Type()
)
ledFanPackExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledFanPackExists.setStatus("deprecated")


class _LedFanPackError_Type(Integer32):
    """Custom type ledFanPackError based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("notAvailable", 2))
    )


_LedFanPackError_Type.__name__ = "Integer32"
_LedFanPackError_Object = MibTableColumn
ledFanPackError = _LedFanPackError_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 8, 6, 1, 1, 4),
    _LedFanPackError_Type()
)
ledFanPackError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledFanPackError.setStatus("deprecated")
_FuelGauge_ObjectIdentity = ObjectIdentity
fuelGauge = _FuelGauge_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10)
)
_FuelGaugeInformation_ObjectIdentity = ObjectIdentity
fuelGaugeInformation = _FuelGaugeInformation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1)
)
_FuelGaugeTable_Object = MibTable
fuelGaugeTable = _FuelGaugeTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1)
)
if mibBuilder.loadTexts:
    fuelGaugeTable.setStatus("mandatory")
_FuelGaugeEntry_Object = MibTableRow
fuelGaugeEntry = _FuelGaugeEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1)
)
fuelGaugeEntry.setIndexNames(
    (0, "CME-MIB", "fuelGaugeIndex"),
)
if mibBuilder.loadTexts:
    fuelGaugeEntry.setStatus("mandatory")
_FuelGaugeIndex_Type = Integer32
_FuelGaugeIndex_Object = MibTableColumn
fuelGaugeIndex = _FuelGaugeIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 1),
    _FuelGaugeIndex_Type()
)
fuelGaugeIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fuelGaugeIndex.setStatus("mandatory")


class _FuelGaugePowerDomainNumber_Type(Integer32):
    """Custom type fuelGaugePowerDomainNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("powerDomain1", 1)
    )


_FuelGaugePowerDomainNumber_Type.__name__ = "Integer32"
_FuelGaugePowerDomainNumber_Object = MibTableColumn
fuelGaugePowerDomainNumber = _FuelGaugePowerDomainNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 2),
    _FuelGaugePowerDomainNumber_Type()
)
fuelGaugePowerDomainNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fuelGaugePowerDomainNumber.setStatus("mandatory")
_FuelGaugeStatus_Type = OctetString
_FuelGaugeStatus_Object = MibTableColumn
fuelGaugeStatus = _FuelGaugeStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 3),
    _FuelGaugeStatus_Type()
)
fuelGaugeStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fuelGaugeStatus.setStatus("mandatory")
_FuelGaugePowerModules_Type = OctetString
_FuelGaugePowerModules_Object = MibTableColumn
fuelGaugePowerModules = _FuelGaugePowerModules_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 4),
    _FuelGaugePowerModules_Type()
)
fuelGaugePowerModules.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fuelGaugePowerModules.setStatus("mandatory")


class _FuelGaugePowerManagementPolicySetting_Type(Integer32):
    """Custom type fuelGaugePowerManagementPolicySetting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("power-module-redundancy", 0),
          ("power-module-redundancy-throttle", 1),
          ("basic", 2),
          ("power-source-redundancy", 3),
          ("power-source-redundancy-throttle", 4),
          ("notApplicable", 255))
    )


_FuelGaugePowerManagementPolicySetting_Type.__name__ = "Integer32"
_FuelGaugePowerManagementPolicySetting_Object = MibTableColumn
fuelGaugePowerManagementPolicySetting = _FuelGaugePowerManagementPolicySetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 6),
    _FuelGaugePowerManagementPolicySetting_Type()
)
fuelGaugePowerManagementPolicySetting.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fuelGaugePowerManagementPolicySetting.setStatus("mandatory")
_FuelGaugeTotalPower_Type = OctetString
_FuelGaugeTotalPower_Object = MibTableColumn
fuelGaugeTotalPower = _FuelGaugeTotalPower_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 7),
    _FuelGaugeTotalPower_Type()
)
fuelGaugeTotalPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fuelGaugeTotalPower.setStatus("mandatory")
_FuelGaugeAllocatedPower_Type = OctetString
_FuelGaugeAllocatedPower_Object = MibTableColumn
fuelGaugeAllocatedPower = _FuelGaugeAllocatedPower_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 8),
    _FuelGaugeAllocatedPower_Type()
)
fuelGaugeAllocatedPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fuelGaugeAllocatedPower.setStatus("mandatory")
_FuelGaugeRemainingPower_Type = OctetString
_FuelGaugeRemainingPower_Object = MibTableColumn
fuelGaugeRemainingPower = _FuelGaugeRemainingPower_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 9),
    _FuelGaugeRemainingPower_Type()
)
fuelGaugeRemainingPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fuelGaugeRemainingPower.setStatus("mandatory")
_FuelGaugePowerInUsed_Type = OctetString
_FuelGaugePowerInUsed_Object = MibTableColumn
fuelGaugePowerInUsed = _FuelGaugePowerInUsed_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 1, 1, 1, 10),
    _FuelGaugePowerInUsed_Type()
)
fuelGaugePowerInUsed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fuelGaugePowerInUsed.setStatus("mandatory")
_PowerDomain1_ObjectIdentity = ObjectIdentity
powerDomain1 = _PowerDomain1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2)
)
_PowerDomain1Table_Object = MibTable
powerDomain1Table = _PowerDomain1Table_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1)
)
if mibBuilder.loadTexts:
    powerDomain1Table.setStatus("mandatory")
_PowerDomain1Entry_Object = MibTableRow
powerDomain1Entry = _PowerDomain1Entry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1)
)
powerDomain1Entry.setIndexNames(
    (0, "CME-MIB", "pd1Index"),
)
if mibBuilder.loadTexts:
    powerDomain1Entry.setStatus("mandatory")
_Pd1Index_Type = Integer32
_Pd1Index_Object = MibTableColumn
pd1Index = _Pd1Index_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 1),
    _Pd1Index_Type()
)
pd1Index.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd1Index.setStatus("mandatory")
_Pd1BayNumber_Type = OctetString
_Pd1BayNumber_Object = MibTableColumn
pd1BayNumber = _Pd1BayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 2),
    _Pd1BayNumber_Type()
)
pd1BayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd1BayNumber.setStatus("mandatory")


class _Pd1BladePrimarySlot_Type(Integer32):
    """Custom type pd1BladePrimarySlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1),
          ("notApplicable", 255))
    )


_Pd1BladePrimarySlot_Type.__name__ = "Integer32"
_Pd1BladePrimarySlot_Object = MibTableColumn
pd1BladePrimarySlot = _Pd1BladePrimarySlot_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 3),
    _Pd1BladePrimarySlot_Type()
)
pd1BladePrimarySlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd1BladePrimarySlot.setStatus("mandatory")


class _Pd1ModuleStatus_Type(Integer32):
    """Custom type pd1ModuleStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("insufficientPower", 0),
          ("moduleIsThrottling", 1),
          ("moduleNotThrottling", 2),
          ("notApplicable", 255))
    )


_Pd1ModuleStatus_Type.__name__ = "Integer32"
_Pd1ModuleStatus_Object = MibTableColumn
pd1ModuleStatus = _Pd1ModuleStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 4),
    _Pd1ModuleStatus_Type()
)
pd1ModuleStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd1ModuleStatus.setStatus("mandatory")
_Pd1ModuleName_Type = OctetString
_Pd1ModuleName_Object = MibTableColumn
pd1ModuleName = _Pd1ModuleName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 5),
    _Pd1ModuleName_Type()
)
pd1ModuleName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd1ModuleName.setStatus("mandatory")


class _Pd1ModuleState_Type(Integer32):
    """Custom type pd1ModuleState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("standby", 0),
          ("on", 1),
          ("notPresent", 2),
          ("off", 3),
          ("hibernate", 4),
          ("notApplicable", 255))
    )


_Pd1ModuleState_Type.__name__ = "Integer32"
_Pd1ModuleState_Object = MibTableColumn
pd1ModuleState = _Pd1ModuleState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 6),
    _Pd1ModuleState_Type()
)
pd1ModuleState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd1ModuleState.setStatus("mandatory")
_Pd1ModuleAllocatedPowerCurrent_Type = OctetString
_Pd1ModuleAllocatedPowerCurrent_Object = MibTableColumn
pd1ModuleAllocatedPowerCurrent = _Pd1ModuleAllocatedPowerCurrent_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 7),
    _Pd1ModuleAllocatedPowerCurrent_Type()
)
pd1ModuleAllocatedPowerCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd1ModuleAllocatedPowerCurrent.setStatus("mandatory")
_Pd1ModuleAllocatedPowerMax_Type = OctetString
_Pd1ModuleAllocatedPowerMax_Object = MibTableColumn
pd1ModuleAllocatedPowerMax = _Pd1ModuleAllocatedPowerMax_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 8),
    _Pd1ModuleAllocatedPowerMax_Type()
)
pd1ModuleAllocatedPowerMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd1ModuleAllocatedPowerMax.setStatus("mandatory")
_Pd1ModuleAllocatedPowerMin_Type = OctetString
_Pd1ModuleAllocatedPowerMin_Object = MibTableColumn
pd1ModuleAllocatedPowerMin = _Pd1ModuleAllocatedPowerMin_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 9),
    _Pd1ModuleAllocatedPowerMin_Type()
)
pd1ModuleAllocatedPowerMin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd1ModuleAllocatedPowerMin.setStatus("mandatory")
_Pd1ModuleCPUDutyCycles_Type = OctetString
_Pd1ModuleCPUDutyCycles_Object = MibTableColumn
pd1ModuleCPUDutyCycles = _Pd1ModuleCPUDutyCycles_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 10),
    _Pd1ModuleCPUDutyCycles_Type()
)
pd1ModuleCPUDutyCycles.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd1ModuleCPUDutyCycles.setStatus("mandatory")


class _Pd1ModuleThrottle_Type(Integer32):
    """Custom type pd1ModuleThrottle based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1),
          ("notApplicable", 255))
    )


_Pd1ModuleThrottle_Type.__name__ = "Integer32"
_Pd1ModuleThrottle_Object = MibTableColumn
pd1ModuleThrottle = _Pd1ModuleThrottle_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 11),
    _Pd1ModuleThrottle_Type()
)
pd1ModuleThrottle.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd1ModuleThrottle.setStatus("mandatory")


class _Pd1ModulePowerCapabilities_Type(Integer32):
    """Custom type pd1ModulePowerCapabilities based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              255)
        )
    )
    namedValues = NamedValues(
        *(("noAbility", 0),
          ("staticPowerManagement", 1),
          ("fixedPowerManagement", 2),
          ("dynamicPowerManagement", 3),
          ("dynamicPowerMeasurement1", 4),
          ("dynamicPowerMeasurement2", 5),
          ("dynamicPowerMeasurementWithPowerCapping", 6),
          ("notApplicable", 255))
    )


_Pd1ModulePowerCapabilities_Type.__name__ = "Integer32"
_Pd1ModulePowerCapabilities_Object = MibTableColumn
pd1ModulePowerCapabilities = _Pd1ModulePowerCapabilities_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 12),
    _Pd1ModulePowerCapabilities_Type()
)
pd1ModulePowerCapabilities.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd1ModulePowerCapabilities.setStatus("mandatory")


class _Pd1ModuleMeasuredOrStatic_Type(Integer32):
    """Custom type pd1ModuleMeasuredOrStatic based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("static", 0),
          ("measured", 1),
          ("notApplicable", 255))
    )


_Pd1ModuleMeasuredOrStatic_Type.__name__ = "Integer32"
_Pd1ModuleMeasuredOrStatic_Object = MibTableColumn
pd1ModuleMeasuredOrStatic = _Pd1ModuleMeasuredOrStatic_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 13),
    _Pd1ModuleMeasuredOrStatic_Type()
)
pd1ModuleMeasuredOrStatic.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd1ModuleMeasuredOrStatic.setStatus("mandatory")


class _Pd1TopologyPath_Type(OctetString):
    """Custom type pd1TopologyPath based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_Pd1TopologyPath_Type.__name__ = "OctetString"
_Pd1TopologyPath_Object = MibTableColumn
pd1TopologyPath = _Pd1TopologyPath_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 1, 1, 14),
    _Pd1TopologyPath_Type()
)
pd1TopologyPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd1TopologyPath.setStatus("mandatory")
_PowerDomain1PowerTrending_ObjectIdentity = ObjectIdentity
powerDomain1PowerTrending = _PowerDomain1PowerTrending_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 3)
)


class _Pd1PowerTrendingPeriod_Type(Integer32):
    """Custom type pd1PowerTrendingPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("lastHour", 0),
          ("last6Hours", 1),
          ("last12Hours", 2),
          ("last24Hours", 3))
    )


_Pd1PowerTrendingPeriod_Type.__name__ = "Integer32"
_Pd1PowerTrendingPeriod_Object = MibScalar
pd1PowerTrendingPeriod = _Pd1PowerTrendingPeriod_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 3, 1),
    _Pd1PowerTrendingPeriod_Type()
)
pd1PowerTrendingPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pd1PowerTrendingPeriod.setStatus("mandatory")
_Pd1PowerTrendingSampleTable_Object = MibTable
pd1PowerTrendingSampleTable = _Pd1PowerTrendingSampleTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 3, 10)
)
if mibBuilder.loadTexts:
    pd1PowerTrendingSampleTable.setStatus("mandatory")
_Pd1PowerTrendingSampleEntry_Object = MibTableRow
pd1PowerTrendingSampleEntry = _Pd1PowerTrendingSampleEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 3, 10, 1)
)
pd1PowerTrendingSampleEntry.setIndexNames(
    (0, "CME-MIB", "pd1PowerTrendingSampleIndex"),
)
if mibBuilder.loadTexts:
    pd1PowerTrendingSampleEntry.setStatus("mandatory")
_Pd1PowerTrendingSampleIndex_Type = Integer32
_Pd1PowerTrendingSampleIndex_Object = MibTableColumn
pd1PowerTrendingSampleIndex = _Pd1PowerTrendingSampleIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 3, 10, 1, 1),
    _Pd1PowerTrendingSampleIndex_Type()
)
pd1PowerTrendingSampleIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd1PowerTrendingSampleIndex.setStatus("mandatory")
_Pd1PowerTrendingSampleTimeStamp_Type = OctetString
_Pd1PowerTrendingSampleTimeStamp_Object = MibTableColumn
pd1PowerTrendingSampleTimeStamp = _Pd1PowerTrendingSampleTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 3, 10, 1, 2),
    _Pd1PowerTrendingSampleTimeStamp_Type()
)
pd1PowerTrendingSampleTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd1PowerTrendingSampleTimeStamp.setStatus("mandatory")
_Pd1PowerTrendingSampleAve_Type = OctetString
_Pd1PowerTrendingSampleAve_Object = MibTableColumn
pd1PowerTrendingSampleAve = _Pd1PowerTrendingSampleAve_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 2, 3, 10, 1, 3),
    _Pd1PowerTrendingSampleAve_Type()
)
pd1PowerTrendingSampleAve.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pd1PowerTrendingSampleAve.setStatus("mandatory")
_ModuleInformation_ObjectIdentity = ObjectIdentity
moduleInformation = _ModuleInformation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4)
)
_BladeDetails_ObjectIdentity = ObjectIdentity
bladeDetails = _BladeDetails_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1)
)
_BladeDetailsTable_Object = MibTable
bladeDetailsTable = _BladeDetailsTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1)
)
if mibBuilder.loadTexts:
    bladeDetailsTable.setStatus("mandatory")
_BladeDetailsEntry_Object = MibTableRow
bladeDetailsEntry = _BladeDetailsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1)
)
bladeDetailsEntry.setIndexNames(
    (0, "CME-MIB", "bladeDetailsIndex"),
)
if mibBuilder.loadTexts:
    bladeDetailsEntry.setStatus("mandatory")
_BladeDetailsIndex_Type = Integer32
_BladeDetailsIndex_Object = MibTableColumn
bladeDetailsIndex = _BladeDetailsIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 1),
    _BladeDetailsIndex_Type()
)
bladeDetailsIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDetailsIndex.setStatus("mandatory")


class _BladeDetailsId_Type(Integer32):
    """Custom type bladeDetailsId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_BladeDetailsId_Type.__name__ = "Integer32"
_BladeDetailsId_Object = MibTableColumn
bladeDetailsId = _BladeDetailsId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 2),
    _BladeDetailsId_Type()
)
bladeDetailsId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDetailsId.setStatus("mandatory")
_BladeDetailsMaxPowerConfig_Type = Integer32
_BladeDetailsMaxPowerConfig_Object = MibTableColumn
bladeDetailsMaxPowerConfig = _BladeDetailsMaxPowerConfig_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 3),
    _BladeDetailsMaxPowerConfig_Type()
)
bladeDetailsMaxPowerConfig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeDetailsMaxPowerConfig.setStatus("mandatory")
_BladeDetailsEffectiveClockRate_Type = OctetString
_BladeDetailsEffectiveClockRate_Object = MibTableColumn
bladeDetailsEffectiveClockRate = _BladeDetailsEffectiveClockRate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 4),
    _BladeDetailsEffectiveClockRate_Type()
)
bladeDetailsEffectiveClockRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDetailsEffectiveClockRate.setStatus("mandatory")
_BladeDetailsMaximumClockRate_Type = OctetString
_BladeDetailsMaximumClockRate_Object = MibTableColumn
bladeDetailsMaximumClockRate = _BladeDetailsMaximumClockRate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 5),
    _BladeDetailsMaximumClockRate_Type()
)
bladeDetailsMaximumClockRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDetailsMaximumClockRate.setStatus("mandatory")


class _BladeDetailsPowerSaverMode_Type(Integer32):
    """Custom type bladeDetailsPowerSaverMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1),
          ("notApplicable", 255))
    )


_BladeDetailsPowerSaverMode_Type.__name__ = "Integer32"
_BladeDetailsPowerSaverMode_Object = MibTableColumn
bladeDetailsPowerSaverMode = _BladeDetailsPowerSaverMode_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 6),
    _BladeDetailsPowerSaverMode_Type()
)
bladeDetailsPowerSaverMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeDetailsPowerSaverMode.setStatus("mandatory")


class _BladeDetailsDynamicPowerSaver_Type(Integer32):
    """Custom type bladeDetailsDynamicPowerSaver based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1),
          ("notApplicable", 255))
    )


_BladeDetailsDynamicPowerSaver_Type.__name__ = "Integer32"
_BladeDetailsDynamicPowerSaver_Object = MibTableColumn
bladeDetailsDynamicPowerSaver = _BladeDetailsDynamicPowerSaver_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 7),
    _BladeDetailsDynamicPowerSaver_Type()
)
bladeDetailsDynamicPowerSaver.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeDetailsDynamicPowerSaver.setStatus("mandatory")


class _BladeDetailsDynamicPowerFavorPerformanceOverPower_Type(Integer32):
    """Custom type bladeDetailsDynamicPowerFavorPerformanceOverPower based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1),
          ("notApplicable", 255))
    )


_BladeDetailsDynamicPowerFavorPerformanceOverPower_Type.__name__ = "Integer32"
_BladeDetailsDynamicPowerFavorPerformanceOverPower_Object = MibTableColumn
bladeDetailsDynamicPowerFavorPerformanceOverPower = _BladeDetailsDynamicPowerFavorPerformanceOverPower_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 8),
    _BladeDetailsDynamicPowerFavorPerformanceOverPower_Type()
)
bladeDetailsDynamicPowerFavorPerformanceOverPower.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeDetailsDynamicPowerFavorPerformanceOverPower.setStatus("mandatory")


class _BladeDetailsPowerControl_Type(Integer32):
    """Custom type bladeDetailsPowerControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              255)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("measurement", 1),
          ("measurementpcap", 2),
          ("psave", 3),
          ("measurementpsave", 4),
          ("measurementpcappsave", 5),
          ("notApplicable", 255))
    )


_BladeDetailsPowerControl_Type.__name__ = "Integer32"
_BladeDetailsPowerControl_Object = MibTableColumn
bladeDetailsPowerControl = _BladeDetailsPowerControl_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 9),
    _BladeDetailsPowerControl_Type()
)
bladeDetailsPowerControl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeDetailsPowerControl.setStatus("mandatory")
_BladeDetailsPcapMin_Type = OctetString
_BladeDetailsPcapMin_Object = MibTableColumn
bladeDetailsPcapMin = _BladeDetailsPcapMin_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 10),
    _BladeDetailsPcapMin_Type()
)
bladeDetailsPcapMin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDetailsPcapMin.setStatus("mandatory")
_BladeDetailsPcapGuaranteedMin_Type = OctetString
_BladeDetailsPcapGuaranteedMin_Object = MibTableColumn
bladeDetailsPcapGuaranteedMin = _BladeDetailsPcapGuaranteedMin_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 11),
    _BladeDetailsPcapGuaranteedMin_Type()
)
bladeDetailsPcapGuaranteedMin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDetailsPcapGuaranteedMin.setStatus("mandatory")
_BladeDetailsPcapMax_Type = OctetString
_BladeDetailsPcapMax_Object = MibTableColumn
bladeDetailsPcapMax = _BladeDetailsPcapMax_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 1, 1, 12),
    _BladeDetailsPcapMax_Type()
)
bladeDetailsPcapMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDetailsPcapMax.setStatus("mandatory")
_BladePowerTrending_ObjectIdentity = ObjectIdentity
bladePowerTrending = _BladePowerTrending_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3)
)


class _BladePowerTrendingPeriod_Type(Integer32):
    """Custom type bladePowerTrendingPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("lastHour", 0),
          ("last6Hours", 1),
          ("last12Hours", 2),
          ("last24Hours", 3))
    )


_BladePowerTrendingPeriod_Type.__name__ = "Integer32"
_BladePowerTrendingPeriod_Object = MibScalar
bladePowerTrendingPeriod = _BladePowerTrendingPeriod_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 1),
    _BladePowerTrendingPeriod_Type()
)
bladePowerTrendingPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladePowerTrendingPeriod.setStatus("mandatory")


class _BladePowerTrendingBladeId_Type(Integer32):
    """Custom type bladePowerTrendingBladeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_BladePowerTrendingBladeId_Type.__name__ = "Integer32"
_BladePowerTrendingBladeId_Object = MibScalar
bladePowerTrendingBladeId = _BladePowerTrendingBladeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 2),
    _BladePowerTrendingBladeId_Type()
)
bladePowerTrendingBladeId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladePowerTrendingBladeId.setStatus("mandatory")


class _BladePowerTrendingTopologyPath_Type(OctetString):
    """Custom type bladePowerTrendingTopologyPath based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_BladePowerTrendingTopologyPath_Type.__name__ = "OctetString"
_BladePowerTrendingTopologyPath_Object = MibScalar
bladePowerTrendingTopologyPath = _BladePowerTrendingTopologyPath_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 3),
    _BladePowerTrendingTopologyPath_Type()
)
bladePowerTrendingTopologyPath.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladePowerTrendingTopologyPath.setStatus("mandatory")
_BladePowerTrendingSampleTable_Object = MibTable
bladePowerTrendingSampleTable = _BladePowerTrendingSampleTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 10)
)
if mibBuilder.loadTexts:
    bladePowerTrendingSampleTable.setStatus("mandatory")
_BladePowerTrendingSampleEntry_Object = MibTableRow
bladePowerTrendingSampleEntry = _BladePowerTrendingSampleEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 10, 1)
)
bladePowerTrendingSampleEntry.setIndexNames(
    (0, "CME-MIB", "bladePowerTrendingSampleIndex"),
)
if mibBuilder.loadTexts:
    bladePowerTrendingSampleEntry.setStatus("mandatory")
_BladePowerTrendingSampleIndex_Type = Integer32
_BladePowerTrendingSampleIndex_Object = MibTableColumn
bladePowerTrendingSampleIndex = _BladePowerTrendingSampleIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 10, 1, 1),
    _BladePowerTrendingSampleIndex_Type()
)
bladePowerTrendingSampleIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePowerTrendingSampleIndex.setStatus("mandatory")


class _BladePowerTrendingSampleId_Type(Integer32):
    """Custom type bladePowerTrendingSampleId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_BladePowerTrendingSampleId_Type.__name__ = "Integer32"
_BladePowerTrendingSampleId_Object = MibTableColumn
bladePowerTrendingSampleId = _BladePowerTrendingSampleId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 10, 1, 2),
    _BladePowerTrendingSampleId_Type()
)
bladePowerTrendingSampleId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePowerTrendingSampleId.setStatus("mandatory")
_BladePowerTrendingSampleTimeStamp_Type = OctetString
_BladePowerTrendingSampleTimeStamp_Object = MibTableColumn
bladePowerTrendingSampleTimeStamp = _BladePowerTrendingSampleTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 10, 1, 3),
    _BladePowerTrendingSampleTimeStamp_Type()
)
bladePowerTrendingSampleTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePowerTrendingSampleTimeStamp.setStatus("mandatory")
_BladePowerTrendingSampleMax_Type = OctetString
_BladePowerTrendingSampleMax_Object = MibTableColumn
bladePowerTrendingSampleMax = _BladePowerTrendingSampleMax_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 10, 1, 4),
    _BladePowerTrendingSampleMax_Type()
)
bladePowerTrendingSampleMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePowerTrendingSampleMax.setStatus("mandatory")
_BladePowerTrendingSampleMin_Type = OctetString
_BladePowerTrendingSampleMin_Object = MibTableColumn
bladePowerTrendingSampleMin = _BladePowerTrendingSampleMin_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 10, 1, 5),
    _BladePowerTrendingSampleMin_Type()
)
bladePowerTrendingSampleMin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePowerTrendingSampleMin.setStatus("mandatory")
_BladePowerTrendingSampleAve_Type = OctetString
_BladePowerTrendingSampleAve_Object = MibTableColumn
bladePowerTrendingSampleAve = _BladePowerTrendingSampleAve_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 10, 1, 6),
    _BladePowerTrendingSampleAve_Type()
)
bladePowerTrendingSampleAve.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePowerTrendingSampleAve.setStatus("mandatory")
_BladePowerTrendingSampleTopologyId_Type = OctetString
_BladePowerTrendingSampleTopologyId_Object = MibTableColumn
bladePowerTrendingSampleTopologyId = _BladePowerTrendingSampleTopologyId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 1, 3, 10, 1, 7),
    _BladePowerTrendingSampleTopologyId_Type()
)
bladePowerTrendingSampleTopologyId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePowerTrendingSampleTopologyId.setStatus("mandatory")
_SwitchDetails_ObjectIdentity = ObjectIdentity
switchDetails = _SwitchDetails_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2)
)
_SwitchPowerTrending_ObjectIdentity = ObjectIdentity
switchPowerTrending = _SwitchPowerTrending_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3)
)


class _SwitchPowerTrendingPeriod_Type(Integer32):
    """Custom type switchPowerTrendingPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("lastHour", 0),
          ("last6Hours", 1),
          ("last12Hours", 2),
          ("last24Hours", 3))
    )


_SwitchPowerTrendingPeriod_Type.__name__ = "Integer32"
_SwitchPowerTrendingPeriod_Object = MibScalar
switchPowerTrendingPeriod = _SwitchPowerTrendingPeriod_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 1),
    _SwitchPowerTrendingPeriod_Type()
)
switchPowerTrendingPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    switchPowerTrendingPeriod.setStatus("mandatory")


class _SwitchPowerTrendingSwitchId_Type(Integer32):
    """Custom type switchPowerTrendingSwitchId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("module1", 1),
          ("module2", 2),
          ("module3", 3),
          ("module4", 4))
    )


_SwitchPowerTrendingSwitchId_Type.__name__ = "Integer32"
_SwitchPowerTrendingSwitchId_Object = MibScalar
switchPowerTrendingSwitchId = _SwitchPowerTrendingSwitchId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 2),
    _SwitchPowerTrendingSwitchId_Type()
)
switchPowerTrendingSwitchId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    switchPowerTrendingSwitchId.setStatus("mandatory")
_SwitchPowerTrendingSampleTable_Object = MibTable
switchPowerTrendingSampleTable = _SwitchPowerTrendingSampleTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 10)
)
if mibBuilder.loadTexts:
    switchPowerTrendingSampleTable.setStatus("mandatory")
_SwitchPowerTrendingSampleEntry_Object = MibTableRow
switchPowerTrendingSampleEntry = _SwitchPowerTrendingSampleEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 10, 1)
)
switchPowerTrendingSampleEntry.setIndexNames(
    (0, "CME-MIB", "switchPowerTrendingSampleIndex"),
)
if mibBuilder.loadTexts:
    switchPowerTrendingSampleEntry.setStatus("mandatory")
_SwitchPowerTrendingSampleIndex_Type = Integer32
_SwitchPowerTrendingSampleIndex_Object = MibTableColumn
switchPowerTrendingSampleIndex = _SwitchPowerTrendingSampleIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 10, 1, 1),
    _SwitchPowerTrendingSampleIndex_Type()
)
switchPowerTrendingSampleIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    switchPowerTrendingSampleIndex.setStatus("mandatory")


class _SwitchPowerTrendingSampleId_Type(Integer32):
    """Custom type switchPowerTrendingSampleId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("module1", 1),
          ("module2", 2),
          ("module3", 3),
          ("module4", 4),
          ("module5", 5),
          ("module6", 6),
          ("module7", 7),
          ("module8", 8),
          ("module9", 9),
          ("module10", 10))
    )


_SwitchPowerTrendingSampleId_Type.__name__ = "Integer32"
_SwitchPowerTrendingSampleId_Object = MibTableColumn
switchPowerTrendingSampleId = _SwitchPowerTrendingSampleId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 10, 1, 2),
    _SwitchPowerTrendingSampleId_Type()
)
switchPowerTrendingSampleId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    switchPowerTrendingSampleId.setStatus("mandatory")
_SwitchPowerTrendingSampleTimeStamp_Type = OctetString
_SwitchPowerTrendingSampleTimeStamp_Object = MibTableColumn
switchPowerTrendingSampleTimeStamp = _SwitchPowerTrendingSampleTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 10, 1, 3),
    _SwitchPowerTrendingSampleTimeStamp_Type()
)
switchPowerTrendingSampleTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    switchPowerTrendingSampleTimeStamp.setStatus("mandatory")
_SwitchPowerTrendingSampleMax_Type = OctetString
_SwitchPowerTrendingSampleMax_Object = MibTableColumn
switchPowerTrendingSampleMax = _SwitchPowerTrendingSampleMax_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 10, 1, 4),
    _SwitchPowerTrendingSampleMax_Type()
)
switchPowerTrendingSampleMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    switchPowerTrendingSampleMax.setStatus("mandatory")
_SwitchPowerTrendingSampleMin_Type = OctetString
_SwitchPowerTrendingSampleMin_Object = MibTableColumn
switchPowerTrendingSampleMin = _SwitchPowerTrendingSampleMin_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 10, 1, 5),
    _SwitchPowerTrendingSampleMin_Type()
)
switchPowerTrendingSampleMin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    switchPowerTrendingSampleMin.setStatus("mandatory")
_SwitchPowerTrendingSampleAve_Type = OctetString
_SwitchPowerTrendingSampleAve_Object = MibTableColumn
switchPowerTrendingSampleAve = _SwitchPowerTrendingSampleAve_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 2, 3, 10, 1, 6),
    _SwitchPowerTrendingSampleAve_Type()
)
switchPowerTrendingSampleAve.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    switchPowerTrendingSampleAve.setStatus("mandatory")
_ChassisFanDetails_ObjectIdentity = ObjectIdentity
chassisFanDetails = _ChassisFanDetails_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3)
)
_ChassisFanPowerTrending_ObjectIdentity = ObjectIdentity
chassisFanPowerTrending = _ChassisFanPowerTrending_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3)
)


class _ChassisFanPowerTrendingPeriod_Type(Integer32):
    """Custom type chassisFanPowerTrendingPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("lastHour", 0),
          ("last6Hours", 1),
          ("last12Hours", 2),
          ("last24Hours", 3))
    )


_ChassisFanPowerTrendingPeriod_Type.__name__ = "Integer32"
_ChassisFanPowerTrendingPeriod_Object = MibScalar
chassisFanPowerTrendingPeriod = _ChassisFanPowerTrendingPeriod_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 1),
    _ChassisFanPowerTrendingPeriod_Type()
)
chassisFanPowerTrendingPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chassisFanPowerTrendingPeriod.setStatus("mandatory")


class _ChassisFanPowerTrendingId_Type(Integer32):
    """Custom type chassisFanPowerTrendingId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("chassisFan1", 1),
          ("chassisFan2", 2),
          ("chassisFan3", 3),
          ("chassisFan4", 4),
          ("chassisFan5", 5),
          ("chassisFan6", 6),
          ("chassisFan7", 7),
          ("chassisFan8", 8),
          ("chassisFan9", 9),
          ("chassisFan10", 10))
    )


_ChassisFanPowerTrendingId_Type.__name__ = "Integer32"
_ChassisFanPowerTrendingId_Object = MibScalar
chassisFanPowerTrendingId = _ChassisFanPowerTrendingId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 2),
    _ChassisFanPowerTrendingId_Type()
)
chassisFanPowerTrendingId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chassisFanPowerTrendingId.setStatus("mandatory")
_ChassisFanPowerTrendingSampleTable_Object = MibTable
chassisFanPowerTrendingSampleTable = _ChassisFanPowerTrendingSampleTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 10)
)
if mibBuilder.loadTexts:
    chassisFanPowerTrendingSampleTable.setStatus("mandatory")
_ChassisFanPowerTrendingSampleEntry_Object = MibTableRow
chassisFanPowerTrendingSampleEntry = _ChassisFanPowerTrendingSampleEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 10, 1)
)
chassisFanPowerTrendingSampleEntry.setIndexNames(
    (0, "CME-MIB", "chassisFanPowerTrendingSampleIndex"),
)
if mibBuilder.loadTexts:
    chassisFanPowerTrendingSampleEntry.setStatus("mandatory")
_ChassisFanPowerTrendingSampleIndex_Type = Integer32
_ChassisFanPowerTrendingSampleIndex_Object = MibTableColumn
chassisFanPowerTrendingSampleIndex = _ChassisFanPowerTrendingSampleIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 10, 1, 1),
    _ChassisFanPowerTrendingSampleIndex_Type()
)
chassisFanPowerTrendingSampleIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFanPowerTrendingSampleIndex.setStatus("mandatory")


class _ChassisFanPowerTrendingSampleId_Type(Integer32):
    """Custom type chassisFanPowerTrendingSampleId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("chassisFan1", 1),
          ("chassisFan2", 2),
          ("chassisFan3", 3),
          ("chassisFan4", 4),
          ("chassisFan5", 5),
          ("chassisFan6", 6),
          ("chassisFan7", 7),
          ("chassisFan8", 8),
          ("chassisFan9", 9),
          ("chassisFan10", 10))
    )


_ChassisFanPowerTrendingSampleId_Type.__name__ = "Integer32"
_ChassisFanPowerTrendingSampleId_Object = MibTableColumn
chassisFanPowerTrendingSampleId = _ChassisFanPowerTrendingSampleId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 10, 1, 2),
    _ChassisFanPowerTrendingSampleId_Type()
)
chassisFanPowerTrendingSampleId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFanPowerTrendingSampleId.setStatus("mandatory")
_ChassisFanPowerTrendingSampleTimeStamp_Type = OctetString
_ChassisFanPowerTrendingSampleTimeStamp_Object = MibTableColumn
chassisFanPowerTrendingSampleTimeStamp = _ChassisFanPowerTrendingSampleTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 10, 1, 3),
    _ChassisFanPowerTrendingSampleTimeStamp_Type()
)
chassisFanPowerTrendingSampleTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFanPowerTrendingSampleTimeStamp.setStatus("mandatory")
_ChassisFanPowerTrendingSampleMax_Type = OctetString
_ChassisFanPowerTrendingSampleMax_Object = MibTableColumn
chassisFanPowerTrendingSampleMax = _ChassisFanPowerTrendingSampleMax_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 10, 1, 4),
    _ChassisFanPowerTrendingSampleMax_Type()
)
chassisFanPowerTrendingSampleMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFanPowerTrendingSampleMax.setStatus("mandatory")
_ChassisFanPowerTrendingSampleMin_Type = OctetString
_ChassisFanPowerTrendingSampleMin_Object = MibTableColumn
chassisFanPowerTrendingSampleMin = _ChassisFanPowerTrendingSampleMin_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 10, 1, 5),
    _ChassisFanPowerTrendingSampleMin_Type()
)
chassisFanPowerTrendingSampleMin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFanPowerTrendingSampleMin.setStatus("mandatory")
_ChassisFanPowerTrendingSampleAve_Type = OctetString
_ChassisFanPowerTrendingSampleAve_Object = MibTableColumn
chassisFanPowerTrendingSampleAve = _ChassisFanPowerTrendingSampleAve_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 4, 3, 3, 10, 1, 6),
    _ChassisFanPowerTrendingSampleAve_Type()
)
chassisFanPowerTrendingSampleAve.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFanPowerTrendingSampleAve.setStatus("mandatory")
_ChassisInformation_ObjectIdentity = ObjectIdentity
chassisInformation = _ChassisInformation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5)
)
_ChassisConfiguration_ObjectIdentity = ObjectIdentity
chassisConfiguration = _ChassisConfiguration_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 1)
)
_ChassisTotalDCPowerAvailable_Type = OctetString
_ChassisTotalDCPowerAvailable_Object = MibScalar
chassisTotalDCPowerAvailable = _ChassisTotalDCPowerAvailable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 1, 1),
    _ChassisTotalDCPowerAvailable_Type()
)
chassisTotalDCPowerAvailable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisTotalDCPowerAvailable.setStatus("mandatory")
_ChassisTotalPowerInUsed_Type = OctetString
_ChassisTotalPowerInUsed_Object = MibScalar
chassisTotalPowerInUsed = _ChassisTotalPowerInUsed_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 1, 2),
    _ChassisTotalPowerInUsed_Type()
)
chassisTotalPowerInUsed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisTotalPowerInUsed.setStatus("mandatory")
_ChassisTotalThermalOutput_Type = OctetString
_ChassisTotalThermalOutput_Object = MibScalar
chassisTotalThermalOutput = _ChassisTotalThermalOutput_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 1, 3),
    _ChassisTotalThermalOutput_Type()
)
chassisTotalThermalOutput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisTotalThermalOutput.setStatus("mandatory")


class _ChassisPowerService_Type(Integer32):
    """Custom type chassisPowerService based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("volt110", 1),
          ("volt220", 2),
          ("notAvailable", 255))
    )


_ChassisPowerService_Type.__name__ = "Integer32"
_ChassisPowerService_Object = MibScalar
chassisPowerService = _ChassisPowerService_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 1, 5),
    _ChassisPowerService_Type()
)
chassisPowerService.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisPowerService.setStatus("deprecated")
_ChassisPowerTrending_ObjectIdentity = ObjectIdentity
chassisPowerTrending = _ChassisPowerTrending_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 3)
)


class _ChassisPowerTrendingPeriod_Type(Integer32):
    """Custom type chassisPowerTrendingPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("lastHour", 0),
          ("last6Hours", 1),
          ("last12Hours", 2),
          ("last24Hours", 3))
    )


_ChassisPowerTrendingPeriod_Type.__name__ = "Integer32"
_ChassisPowerTrendingPeriod_Object = MibScalar
chassisPowerTrendingPeriod = _ChassisPowerTrendingPeriod_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 3, 1),
    _ChassisPowerTrendingPeriod_Type()
)
chassisPowerTrendingPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chassisPowerTrendingPeriod.setStatus("mandatory")
_ChassisPowerTrendingSampleTable_Object = MibTable
chassisPowerTrendingSampleTable = _ChassisPowerTrendingSampleTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 3, 10)
)
if mibBuilder.loadTexts:
    chassisPowerTrendingSampleTable.setStatus("mandatory")
_ChassisPowerTrendingSampleEntry_Object = MibTableRow
chassisPowerTrendingSampleEntry = _ChassisPowerTrendingSampleEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 3, 10, 1)
)
chassisPowerTrendingSampleEntry.setIndexNames(
    (0, "CME-MIB", "chassisPowerTrendingSampleIndex"),
)
if mibBuilder.loadTexts:
    chassisPowerTrendingSampleEntry.setStatus("mandatory")
_ChassisPowerTrendingSampleIndex_Type = Integer32
_ChassisPowerTrendingSampleIndex_Object = MibTableColumn
chassisPowerTrendingSampleIndex = _ChassisPowerTrendingSampleIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 3, 10, 1, 1),
    _ChassisPowerTrendingSampleIndex_Type()
)
chassisPowerTrendingSampleIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisPowerTrendingSampleIndex.setStatus("mandatory")
_ChassisPowerTrendingSampleTimeStamp_Type = OctetString
_ChassisPowerTrendingSampleTimeStamp_Object = MibTableColumn
chassisPowerTrendingSampleTimeStamp = _ChassisPowerTrendingSampleTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 3, 10, 1, 2),
    _ChassisPowerTrendingSampleTimeStamp_Type()
)
chassisPowerTrendingSampleTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisPowerTrendingSampleTimeStamp.setStatus("mandatory")
_ChassisPowerTrendingSampleAve_Type = OctetString
_ChassisPowerTrendingSampleAve_Object = MibTableColumn
chassisPowerTrendingSampleAve = _ChassisPowerTrendingSampleAve_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 3, 10, 1, 3),
    _ChassisPowerTrendingSampleAve_Type()
)
chassisPowerTrendingSampleAve.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisPowerTrendingSampleAve.setStatus("mandatory")
_ChassisThermalTrending_ObjectIdentity = ObjectIdentity
chassisThermalTrending = _ChassisThermalTrending_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5)
)


class _ChassisThermalTrendingPeriod_Type(Integer32):
    """Custom type chassisThermalTrendingPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("lastHour", 0),
          ("last6Hours", 1),
          ("last12Hours", 2),
          ("last24Hours", 3))
    )


_ChassisThermalTrendingPeriod_Type.__name__ = "Integer32"
_ChassisThermalTrendingPeriod_Object = MibScalar
chassisThermalTrendingPeriod = _ChassisThermalTrendingPeriod_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 1),
    _ChassisThermalTrendingPeriod_Type()
)
chassisThermalTrendingPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chassisThermalTrendingPeriod.setStatus("mandatory")
_RearLEDCardThermalTrendingTable_Object = MibTable
rearLEDCardThermalTrendingTable = _RearLEDCardThermalTrendingTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 10)
)
if mibBuilder.loadTexts:
    rearLEDCardThermalTrendingTable.setStatus("mandatory")
_RearLEDCardThermalTrendingEntry_Object = MibTableRow
rearLEDCardThermalTrendingEntry = _RearLEDCardThermalTrendingEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 10, 1)
)
rearLEDCardThermalTrendingEntry.setIndexNames(
    (0, "CME-MIB", "rearLEDCardThermalTrendingIndex"),
)
if mibBuilder.loadTexts:
    rearLEDCardThermalTrendingEntry.setStatus("mandatory")
_RearLEDCardThermalTrendingIndex_Type = Integer32
_RearLEDCardThermalTrendingIndex_Object = MibTableColumn
rearLEDCardThermalTrendingIndex = _RearLEDCardThermalTrendingIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 10, 1, 1),
    _RearLEDCardThermalTrendingIndex_Type()
)
rearLEDCardThermalTrendingIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rearLEDCardThermalTrendingIndex.setStatus("mandatory")
_RearLEDCardThermalTrendingTimeStamp_Type = OctetString
_RearLEDCardThermalTrendingTimeStamp_Object = MibTableColumn
rearLEDCardThermalTrendingTimeStamp = _RearLEDCardThermalTrendingTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 10, 1, 2),
    _RearLEDCardThermalTrendingTimeStamp_Type()
)
rearLEDCardThermalTrendingTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rearLEDCardThermalTrendingTimeStamp.setStatus("mandatory")
_RearLEDCardThermalTrendingTemperatureAvg_Type = OctetString
_RearLEDCardThermalTrendingTemperatureAvg_Object = MibTableColumn
rearLEDCardThermalTrendingTemperatureAvg = _RearLEDCardThermalTrendingTemperatureAvg_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 10, 1, 3),
    _RearLEDCardThermalTrendingTemperatureAvg_Type()
)
rearLEDCardThermalTrendingTemperatureAvg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rearLEDCardThermalTrendingTemperatureAvg.setStatus("mandatory")
_RearLEDCardThermalTrendingTemperatureMin_Type = OctetString
_RearLEDCardThermalTrendingTemperatureMin_Object = MibTableColumn
rearLEDCardThermalTrendingTemperatureMin = _RearLEDCardThermalTrendingTemperatureMin_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 10, 1, 4),
    _RearLEDCardThermalTrendingTemperatureMin_Type()
)
rearLEDCardThermalTrendingTemperatureMin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rearLEDCardThermalTrendingTemperatureMin.setStatus("mandatory")
_RearLEDCardThermalTrendingTemperatureMax_Type = OctetString
_RearLEDCardThermalTrendingTemperatureMax_Object = MibTableColumn
rearLEDCardThermalTrendingTemperatureMax = _RearLEDCardThermalTrendingTemperatureMax_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 10, 1, 5),
    _RearLEDCardThermalTrendingTemperatureMax_Type()
)
rearLEDCardThermalTrendingTemperatureMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rearLEDCardThermalTrendingTemperatureMax.setStatus("mandatory")
_CfmThermalTrendingTable_Object = MibTable
cfmThermalTrendingTable = _CfmThermalTrendingTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 60)
)
if mibBuilder.loadTexts:
    cfmThermalTrendingTable.setStatus("mandatory")
_CfmThermalTrendingEntry_Object = MibTableRow
cfmThermalTrendingEntry = _CfmThermalTrendingEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 60, 1)
)
cfmThermalTrendingEntry.setIndexNames(
    (0, "CME-MIB", "cfmThermalTrendingIndex"),
)
if mibBuilder.loadTexts:
    cfmThermalTrendingEntry.setStatus("mandatory")
_CfmThermalTrendingIndex_Type = Integer32
_CfmThermalTrendingIndex_Object = MibTableColumn
cfmThermalTrendingIndex = _CfmThermalTrendingIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 60, 1, 1),
    _CfmThermalTrendingIndex_Type()
)
cfmThermalTrendingIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfmThermalTrendingIndex.setStatus("mandatory")
_CfmThermalTrendingTimeStamp_Type = OctetString
_CfmThermalTrendingTimeStamp_Object = MibTableColumn
cfmThermalTrendingTimeStamp = _CfmThermalTrendingTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 60, 1, 2),
    _CfmThermalTrendingTimeStamp_Type()
)
cfmThermalTrendingTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfmThermalTrendingTimeStamp.setStatus("mandatory")
_CfmThermalTrendingCurrentCFM_Type = OctetString
_CfmThermalTrendingCurrentCFM_Object = MibTableColumn
cfmThermalTrendingCurrentCFM = _CfmThermalTrendingCurrentCFM_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 60, 1, 3),
    _CfmThermalTrendingCurrentCFM_Type()
)
cfmThermalTrendingCurrentCFM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfmThermalTrendingCurrentCFM.setStatus("mandatory")
_CfmThermalTrendingMaxCFM_Type = OctetString
_CfmThermalTrendingMaxCFM_Object = MibTableColumn
cfmThermalTrendingMaxCFM = _CfmThermalTrendingMaxCFM_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 60, 1, 4),
    _CfmThermalTrendingMaxCFM_Type()
)
cfmThermalTrendingMaxCFM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfmThermalTrendingMaxCFM.setStatus("mandatory")
_EhiThermalTrendingTable_Object = MibTable
ehiThermalTrendingTable = _EhiThermalTrendingTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 70)
)
if mibBuilder.loadTexts:
    ehiThermalTrendingTable.setStatus("mandatory")
_EhiThermalTrendingEntry_Object = MibTableRow
ehiThermalTrendingEntry = _EhiThermalTrendingEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 70, 1)
)
ehiThermalTrendingEntry.setIndexNames(
    (0, "CME-MIB", "ehiThermalTrendingIndex"),
)
if mibBuilder.loadTexts:
    ehiThermalTrendingEntry.setStatus("mandatory")
_EhiThermalTrendingIndex_Type = Integer32
_EhiThermalTrendingIndex_Object = MibTableColumn
ehiThermalTrendingIndex = _EhiThermalTrendingIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 70, 1, 1),
    _EhiThermalTrendingIndex_Type()
)
ehiThermalTrendingIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ehiThermalTrendingIndex.setStatus("mandatory")
_EhiThermalTrendingTimeStamp_Type = OctetString
_EhiThermalTrendingTimeStamp_Object = MibTableColumn
ehiThermalTrendingTimeStamp = _EhiThermalTrendingTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 70, 1, 2),
    _EhiThermalTrendingTimeStamp_Type()
)
ehiThermalTrendingTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ehiThermalTrendingTimeStamp.setStatus("mandatory")
_EhiThermalTrendingMinEHI_Type = OctetString
_EhiThermalTrendingMinEHI_Object = MibTableColumn
ehiThermalTrendingMinEHI = _EhiThermalTrendingMinEHI_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 70, 1, 3),
    _EhiThermalTrendingMinEHI_Type()
)
ehiThermalTrendingMinEHI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ehiThermalTrendingMinEHI.setStatus("mandatory")
_EhiThermalTrendingMaxEHI_Type = OctetString
_EhiThermalTrendingMaxEHI_Object = MibTableColumn
ehiThermalTrendingMaxEHI = _EhiThermalTrendingMaxEHI_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 70, 1, 4),
    _EhiThermalTrendingMaxEHI_Type()
)
ehiThermalTrendingMaxEHI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ehiThermalTrendingMaxEHI.setStatus("mandatory")
_EhiThermalTrendingAvgEHI_Type = OctetString
_EhiThermalTrendingAvgEHI_Object = MibTableColumn
ehiThermalTrendingAvgEHI = _EhiThermalTrendingAvgEHI_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 5, 5, 70, 1, 5),
    _EhiThermalTrendingAvgEHI_Type()
)
ehiThermalTrendingAvgEHI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ehiThermalTrendingAvgEHI.setStatus("mandatory")
_PowerPolicyInformation_ObjectIdentity = ObjectIdentity
powerPolicyInformation = _PowerPolicyInformation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6)
)
_PowerPolicyTable_Object = MibTable
powerPolicyTable = _PowerPolicyTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6, 1)
)
if mibBuilder.loadTexts:
    powerPolicyTable.setStatus("mandatory")
_PowerPolicyEntry_Object = MibTableRow
powerPolicyEntry = _PowerPolicyEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6, 1, 1)
)
powerPolicyEntry.setIndexNames(
    (0, "CME-MIB", "powerPolicyIndex"),
)
if mibBuilder.loadTexts:
    powerPolicyEntry.setStatus("mandatory")
_PowerPolicyIndex_Type = Integer32
_PowerPolicyIndex_Object = MibTableColumn
powerPolicyIndex = _PowerPolicyIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6, 1, 1, 1),
    _PowerPolicyIndex_Type()
)
powerPolicyIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerPolicyIndex.setStatus("mandatory")


class _PowerPolicyPowerDomainNumber_Type(Integer32):
    """Custom type powerPolicyPowerDomainNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("powerDomain1", 1),
          ("powerDomain2", 2))
    )


_PowerPolicyPowerDomainNumber_Type.__name__ = "Integer32"
_PowerPolicyPowerDomainNumber_Object = MibTableColumn
powerPolicyPowerDomainNumber = _PowerPolicyPowerDomainNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6, 1, 1, 2),
    _PowerPolicyPowerDomainNumber_Type()
)
powerPolicyPowerDomainNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerPolicyPowerDomainNumber.setStatus("mandatory")
_PowerPolicyName_Type = OctetString
_PowerPolicyName_Object = MibTableColumn
powerPolicyName = _PowerPolicyName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6, 1, 1, 3),
    _PowerPolicyName_Type()
)
powerPolicyName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerPolicyName.setStatus("mandatory")
_PowerPolicyPwrSupplyFailureLimit_Type = Integer32
_PowerPolicyPwrSupplyFailureLimit_Object = MibTableColumn
powerPolicyPwrSupplyFailureLimit = _PowerPolicyPwrSupplyFailureLimit_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6, 1, 1, 4),
    _PowerPolicyPwrSupplyFailureLimit_Type()
)
powerPolicyPwrSupplyFailureLimit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerPolicyPwrSupplyFailureLimit.setStatus("mandatory")
_PowerPolicyMaxPowerLimit_Type = Integer32
_PowerPolicyMaxPowerLimit_Object = MibTableColumn
powerPolicyMaxPowerLimit = _PowerPolicyMaxPowerLimit_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6, 1, 1, 5),
    _PowerPolicyMaxPowerLimit_Type()
)
powerPolicyMaxPowerLimit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerPolicyMaxPowerLimit.setStatus("mandatory")
_PowerPolicyEstimatedUtilization_Type = Integer32
_PowerPolicyEstimatedUtilization_Object = MibTableColumn
powerPolicyEstimatedUtilization = _PowerPolicyEstimatedUtilization_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6, 1, 1, 6),
    _PowerPolicyEstimatedUtilization_Type()
)
powerPolicyEstimatedUtilization.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerPolicyEstimatedUtilization.setStatus("mandatory")


class _PowerPolicyActivate_Type(Integer32):
    """Custom type powerPolicyActivate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_PowerPolicyActivate_Type.__name__ = "Integer32"
_PowerPolicyActivate_Object = MibTableColumn
powerPolicyActivate = _PowerPolicyActivate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 10, 6, 1, 1, 7),
    _PowerPolicyActivate_Type()
)
powerPolicyActivate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    powerPolicyActivate.setStatus("mandatory")
_Users_ObjectIdentity = ObjectIdentity
users = _Users_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 17)
)
_MmUsers_ObjectIdentity = ObjectIdentity
mmUsers = _MmUsers_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 17, 1)
)
_CurrentlyLoggedInTable_Object = MibTable
currentlyLoggedInTable = _CurrentlyLoggedInTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 17, 1, 1)
)
if mibBuilder.loadTexts:
    currentlyLoggedInTable.setStatus("mandatory")
_CurrentlyLoggedInEntry_Object = MibTableRow
currentlyLoggedInEntry = _CurrentlyLoggedInEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 17, 1, 1, 1)
)
currentlyLoggedInEntry.setIndexNames(
    (0, "CME-MIB", "currentlyLoggedInEntryIndex"),
)
if mibBuilder.loadTexts:
    currentlyLoggedInEntry.setStatus("mandatory")


class _CurrentlyLoggedInEntryIndex_Type(Integer32):
    """Custom type currentlyLoggedInEntryIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_CurrentlyLoggedInEntryIndex_Type.__name__ = "Integer32"
_CurrentlyLoggedInEntryIndex_Object = MibTableColumn
currentlyLoggedInEntryIndex = _CurrentlyLoggedInEntryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 17, 1, 1, 1, 1),
    _CurrentlyLoggedInEntryIndex_Type()
)
currentlyLoggedInEntryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    currentlyLoggedInEntryIndex.setStatus("mandatory")


class _CurrentlyLoggedInEntryUserId_Type(OctetString):
    """Custom type currentlyLoggedInEntryUserId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_CurrentlyLoggedInEntryUserId_Type.__name__ = "OctetString"
_CurrentlyLoggedInEntryUserId_Object = MibTableColumn
currentlyLoggedInEntryUserId = _CurrentlyLoggedInEntryUserId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 17, 1, 1, 1, 2),
    _CurrentlyLoggedInEntryUserId_Type()
)
currentlyLoggedInEntryUserId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    currentlyLoggedInEntryUserId.setStatus("mandatory")


class _CurrentlyLoggedInEntryAccMethod_Type(OctetString):
    """Custom type currentlyLoggedInEntryAccMethod based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_CurrentlyLoggedInEntryAccMethod_Type.__name__ = "OctetString"
_CurrentlyLoggedInEntryAccMethod_Object = MibTableColumn
currentlyLoggedInEntryAccMethod = _CurrentlyLoggedInEntryAccMethod_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 17, 1, 1, 1, 3),
    _CurrentlyLoggedInEntryAccMethod_Type()
)
currentlyLoggedInEntryAccMethod.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    currentlyLoggedInEntryAccMethod.setStatus("mandatory")
_VpdInformation_ObjectIdentity = ObjectIdentity
vpdInformation = _VpdInformation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21)
)
_ChassisInfoVpd_ObjectIdentity = ObjectIdentity
chassisInfoVpd = _ChassisInfoVpd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1)
)
_ChassisVpd_ObjectIdentity = ObjectIdentity
chassisVpd = _ChassisVpd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1)
)
_ChassisVpdMachineType_Type = OctetString
_ChassisVpdMachineType_Object = MibScalar
chassisVpdMachineType = _ChassisVpdMachineType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 1),
    _ChassisVpdMachineType_Type()
)
chassisVpdMachineType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chassisVpdMachineType.setStatus("deprecated")
_ChassisVpdMachineModel_Type = OctetString
_ChassisVpdMachineModel_Object = MibScalar
chassisVpdMachineModel = _ChassisVpdMachineModel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 2),
    _ChassisVpdMachineModel_Type()
)
chassisVpdMachineModel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chassisVpdMachineModel.setStatus("deprecated")
_ChassisSerialNumber_Type = OctetString
_ChassisSerialNumber_Object = MibScalar
chassisSerialNumber = _ChassisSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 3),
    _ChassisSerialNumber_Type()
)
chassisSerialNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chassisSerialNumber.setStatus("deprecated")
_ChassisUUID_Type = OctetString
_ChassisUUID_Object = MibScalar
chassisUUID = _ChassisUUID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 4),
    _ChassisUUID_Type()
)
chassisUUID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chassisUUID.setStatus("deprecated")
_ChassisManufacturingId_Type = OctetString
_ChassisManufacturingId_Object = MibScalar
chassisManufacturingId = _ChassisManufacturingId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 5),
    _ChassisManufacturingId_Type()
)
chassisManufacturingId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisManufacturingId.setStatus("deprecated")
_ChassisHardwareRevision_Type = Integer32
_ChassisHardwareRevision_Object = MibScalar
chassisHardwareRevision = _ChassisHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 6),
    _ChassisHardwareRevision_Type()
)
chassisHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisHardwareRevision.setStatus("deprecated")
_ChassisFruNumber_Type = OctetString
_ChassisFruNumber_Object = MibScalar
chassisFruNumber = _ChassisFruNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 7),
    _ChassisFruNumber_Type()
)
chassisFruNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFruNumber.setStatus("deprecated")
_ChassisManufDate_Type = OctetString
_ChassisManufDate_Object = MibScalar
chassisManufDate = _ChassisManufDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 8),
    _ChassisManufDate_Type()
)
chassisManufDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisManufDate.setStatus("deprecated")
_ChassisPartNumber_Type = OctetString
_ChassisPartNumber_Object = MibScalar
chassisPartNumber = _ChassisPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 9),
    _ChassisPartNumber_Type()
)
chassisPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisPartNumber.setStatus("deprecated")
_ChassisFruSerial_Type = OctetString
_ChassisFruSerial_Object = MibScalar
chassisFruSerial = _ChassisFruSerial_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 10),
    _ChassisFruSerial_Type()
)
chassisFruSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFruSerial.setStatus("deprecated")
_ChassisManufacturingIDNumber_Type = OctetString
_ChassisManufacturingIDNumber_Object = MibScalar
chassisManufacturingIDNumber = _ChassisManufacturingIDNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 11),
    _ChassisManufacturingIDNumber_Type()
)
chassisManufacturingIDNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisManufacturingIDNumber.setStatus("deprecated")
_ChassisProductId_Type = OctetString
_ChassisProductId_Object = MibScalar
chassisProductId = _ChassisProductId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 12),
    _ChassisProductId_Type()
)
chassisProductId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisProductId.setStatus("deprecated")
_ChassisSubManufacturerId_Type = OctetString
_ChassisSubManufacturerId_Object = MibScalar
chassisSubManufacturerId = _ChassisSubManufacturerId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 13),
    _ChassisSubManufacturerId_Type()
)
chassisSubManufacturerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisSubManufacturerId.setStatus("deprecated")
_ChassisClei_Type = OctetString
_ChassisClei_Object = MibScalar
chassisClei = _ChassisClei_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 14),
    _ChassisClei_Type()
)
chassisClei.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisClei.setStatus("deprecated")
_ChassisHardwareRevisionString_Type = OctetString
_ChassisHardwareRevisionString_Object = MibScalar
chassisHardwareRevisionString = _ChassisHardwareRevisionString_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 1, 1, 16),
    _ChassisHardwareRevisionString_Type()
)
chassisHardwareRevisionString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisHardwareRevisionString.setStatus("deprecated")
_MmHardwareVpd_ObjectIdentity = ObjectIdentity
mmHardwareVpd = _MmHardwareVpd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2)
)
_MmHardwareVpdTable_Object = MibTable
mmHardwareVpdTable = _MmHardwareVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1)
)
if mibBuilder.loadTexts:
    mmHardwareVpdTable.setStatus("deprecated")
_MmHardwareVpdEntry_Object = MibTableRow
mmHardwareVpdEntry = _MmHardwareVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1)
)
mmHardwareVpdEntry.setIndexNames(
    (0, "CME-MIB", "mmHardwareVpdIndex"),
)
if mibBuilder.loadTexts:
    mmHardwareVpdEntry.setStatus("deprecated")
_MmHardwareVpdIndex_Type = Integer32
_MmHardwareVpdIndex_Object = MibTableColumn
mmHardwareVpdIndex = _MmHardwareVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 1),
    _MmHardwareVpdIndex_Type()
)
mmHardwareVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmHardwareVpdIndex.setStatus("deprecated")
_MmHardwareVpdBayNumber_Type = OctetString
_MmHardwareVpdBayNumber_Object = MibTableColumn
mmHardwareVpdBayNumber = _MmHardwareVpdBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 2),
    _MmHardwareVpdBayNumber_Type()
)
mmHardwareVpdBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmHardwareVpdBayNumber.setStatus("deprecated")
_MmHardwareVpdManufacturingId_Type = OctetString
_MmHardwareVpdManufacturingId_Object = MibTableColumn
mmHardwareVpdManufacturingId = _MmHardwareVpdManufacturingId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 3),
    _MmHardwareVpdManufacturingId_Type()
)
mmHardwareVpdManufacturingId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmHardwareVpdManufacturingId.setStatus("deprecated")
_MmHardwareVpdFruNumber_Type = OctetString
_MmHardwareVpdFruNumber_Object = MibTableColumn
mmHardwareVpdFruNumber = _MmHardwareVpdFruNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 4),
    _MmHardwareVpdFruNumber_Type()
)
mmHardwareVpdFruNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmHardwareVpdFruNumber.setStatus("deprecated")
_MmHardwareVpdHardwareRevision_Type = Integer32
_MmHardwareVpdHardwareRevision_Object = MibTableColumn
mmHardwareVpdHardwareRevision = _MmHardwareVpdHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 5),
    _MmHardwareVpdHardwareRevision_Type()
)
mmHardwareVpdHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmHardwareVpdHardwareRevision.setStatus("deprecated")
_MmHardwareVpdUuid_Type = OctetString
_MmHardwareVpdUuid_Object = MibTableColumn
mmHardwareVpdUuid = _MmHardwareVpdUuid_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 6),
    _MmHardwareVpdUuid_Type()
)
mmHardwareVpdUuid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmHardwareVpdUuid.setStatus("deprecated")
_MmHardwareVpdManufDate_Type = OctetString
_MmHardwareVpdManufDate_Object = MibTableColumn
mmHardwareVpdManufDate = _MmHardwareVpdManufDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 7),
    _MmHardwareVpdManufDate_Type()
)
mmHardwareVpdManufDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmHardwareVpdManufDate.setStatus("deprecated")
_MmHardwareVpdPartNumber_Type = OctetString
_MmHardwareVpdPartNumber_Object = MibTableColumn
mmHardwareVpdPartNumber = _MmHardwareVpdPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 8),
    _MmHardwareVpdPartNumber_Type()
)
mmHardwareVpdPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmHardwareVpdPartNumber.setStatus("deprecated")
_MmHardwareVpdFruSerial_Type = OctetString
_MmHardwareVpdFruSerial_Object = MibTableColumn
mmHardwareVpdFruSerial = _MmHardwareVpdFruSerial_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 9),
    _MmHardwareVpdFruSerial_Type()
)
mmHardwareVpdFruSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmHardwareVpdFruSerial.setStatus("deprecated")
_MmHardwareVpdManufacturingIDNumber_Type = OctetString
_MmHardwareVpdManufacturingIDNumber_Object = MibTableColumn
mmHardwareVpdManufacturingIDNumber = _MmHardwareVpdManufacturingIDNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 10),
    _MmHardwareVpdManufacturingIDNumber_Type()
)
mmHardwareVpdManufacturingIDNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmHardwareVpdManufacturingIDNumber.setStatus("deprecated")
_MmHardwareVpdProductId_Type = OctetString
_MmHardwareVpdProductId_Object = MibTableColumn
mmHardwareVpdProductId = _MmHardwareVpdProductId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 11),
    _MmHardwareVpdProductId_Type()
)
mmHardwareVpdProductId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmHardwareVpdProductId.setStatus("deprecated")
_MmHardwareVpdSubManufacturerId_Type = OctetString
_MmHardwareVpdSubManufacturerId_Object = MibTableColumn
mmHardwareVpdSubManufacturerId = _MmHardwareVpdSubManufacturerId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 12),
    _MmHardwareVpdSubManufacturerId_Type()
)
mmHardwareVpdSubManufacturerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmHardwareVpdSubManufacturerId.setStatus("deprecated")
_MmHardwareVpdClei_Type = OctetString
_MmHardwareVpdClei_Object = MibTableColumn
mmHardwareVpdClei = _MmHardwareVpdClei_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 13),
    _MmHardwareVpdClei_Type()
)
mmHardwareVpdClei.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmHardwareVpdClei.setStatus("deprecated")
_MmHardwareVpdHardwareRevisionString_Type = OctetString
_MmHardwareVpdHardwareRevisionString_Object = MibTableColumn
mmHardwareVpdHardwareRevisionString = _MmHardwareVpdHardwareRevisionString_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 2, 1, 1, 14),
    _MmHardwareVpdHardwareRevisionString_Type()
)
mmHardwareVpdHardwareRevisionString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmHardwareVpdHardwareRevisionString.setStatus("deprecated")
_MmFirmwareVpd_ObjectIdentity = ObjectIdentity
mmFirmwareVpd = _MmFirmwareVpd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3)
)
_MmMainApplVpdTable_Object = MibTable
mmMainApplVpdTable = _MmMainApplVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1)
)
if mibBuilder.loadTexts:
    mmMainApplVpdTable.setStatus("deprecated")
_MmMainApplVpdEntry_Object = MibTableRow
mmMainApplVpdEntry = _MmMainApplVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1, 1)
)
mmMainApplVpdEntry.setIndexNames(
    (0, "CME-MIB", "mmMainApplVpdIndex"),
)
if mibBuilder.loadTexts:
    mmMainApplVpdEntry.setStatus("deprecated")
_MmMainApplVpdIndex_Type = Integer32
_MmMainApplVpdIndex_Object = MibTableColumn
mmMainApplVpdIndex = _MmMainApplVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1, 1, 1),
    _MmMainApplVpdIndex_Type()
)
mmMainApplVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmMainApplVpdIndex.setStatus("deprecated")
_MmMainApplVpdName_Type = OctetString
_MmMainApplVpdName_Object = MibTableColumn
mmMainApplVpdName = _MmMainApplVpdName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1, 1, 2),
    _MmMainApplVpdName_Type()
)
mmMainApplVpdName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmMainApplVpdName.setStatus("deprecated")
_MmMainApplVpdBuildId_Type = OctetString
_MmMainApplVpdBuildId_Object = MibTableColumn
mmMainApplVpdBuildId = _MmMainApplVpdBuildId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1, 1, 3),
    _MmMainApplVpdBuildId_Type()
)
mmMainApplVpdBuildId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmMainApplVpdBuildId.setStatus("deprecated")
_MmMainApplVpdRevisonNumber_Type = OctetString
_MmMainApplVpdRevisonNumber_Object = MibTableColumn
mmMainApplVpdRevisonNumber = _MmMainApplVpdRevisonNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1, 1, 4),
    _MmMainApplVpdRevisonNumber_Type()
)
mmMainApplVpdRevisonNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmMainApplVpdRevisonNumber.setStatus("deprecated")
_MmMainApplVpdFilename_Type = OctetString
_MmMainApplVpdFilename_Object = MibTableColumn
mmMainApplVpdFilename = _MmMainApplVpdFilename_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1, 1, 5),
    _MmMainApplVpdFilename_Type()
)
mmMainApplVpdFilename.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmMainApplVpdFilename.setStatus("deprecated")
_MmMainApplVpdBuildDate_Type = OctetString
_MmMainApplVpdBuildDate_Object = MibTableColumn
mmMainApplVpdBuildDate = _MmMainApplVpdBuildDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 3, 1, 1, 6),
    _MmMainApplVpdBuildDate_Type()
)
mmMainApplVpdBuildDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmMainApplVpdBuildDate.setStatus("deprecated")
_BladeHardwareVpd_ObjectIdentity = ObjectIdentity
bladeHardwareVpd = _BladeHardwareVpd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4)
)
_BladeHardwareVpdTable_Object = MibTable
bladeHardwareVpdTable = _BladeHardwareVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1)
)
if mibBuilder.loadTexts:
    bladeHardwareVpdTable.setStatus("deprecated")
_BladeHardwareVpdEntry_Object = MibTableRow
bladeHardwareVpdEntry = _BladeHardwareVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1)
)
bladeHardwareVpdEntry.setIndexNames(
    (0, "CME-MIB", "bladeHardwareVpdIndex"),
)
if mibBuilder.loadTexts:
    bladeHardwareVpdEntry.setStatus("deprecated")
_BladeHardwareVpdIndex_Type = Integer32
_BladeHardwareVpdIndex_Object = MibTableColumn
bladeHardwareVpdIndex = _BladeHardwareVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 1),
    _BladeHardwareVpdIndex_Type()
)
bladeHardwareVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHardwareVpdIndex.setStatus("deprecated")
_BladeHardwareVpdBayNumber_Type = OctetString
_BladeHardwareVpdBayNumber_Object = MibTableColumn
bladeHardwareVpdBayNumber = _BladeHardwareVpdBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 2),
    _BladeHardwareVpdBayNumber_Type()
)
bladeHardwareVpdBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHardwareVpdBayNumber.setStatus("deprecated")
_BladeHardwareVpdManufacturingId_Type = OctetString
_BladeHardwareVpdManufacturingId_Object = MibTableColumn
bladeHardwareVpdManufacturingId = _BladeHardwareVpdManufacturingId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 3),
    _BladeHardwareVpdManufacturingId_Type()
)
bladeHardwareVpdManufacturingId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHardwareVpdManufacturingId.setStatus("deprecated")
_BladeHardwareVpdFruNumber_Type = OctetString
_BladeHardwareVpdFruNumber_Object = MibTableColumn
bladeHardwareVpdFruNumber = _BladeHardwareVpdFruNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 4),
    _BladeHardwareVpdFruNumber_Type()
)
bladeHardwareVpdFruNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHardwareVpdFruNumber.setStatus("deprecated")
_BladeHardwareVpdHardwareRevision_Type = Integer32
_BladeHardwareVpdHardwareRevision_Object = MibTableColumn
bladeHardwareVpdHardwareRevision = _BladeHardwareVpdHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 5),
    _BladeHardwareVpdHardwareRevision_Type()
)
bladeHardwareVpdHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHardwareVpdHardwareRevision.setStatus("deprecated")
_BladeHardwareVpdSerialNumber_Type = OctetString
_BladeHardwareVpdSerialNumber_Object = MibTableColumn
bladeHardwareVpdSerialNumber = _BladeHardwareVpdSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 6),
    _BladeHardwareVpdSerialNumber_Type()
)
bladeHardwareVpdSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHardwareVpdSerialNumber.setStatus("deprecated")
_BladeHardwareVpdMachineType_Type = OctetString
_BladeHardwareVpdMachineType_Object = MibTableColumn
bladeHardwareVpdMachineType = _BladeHardwareVpdMachineType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 7),
    _BladeHardwareVpdMachineType_Type()
)
bladeHardwareVpdMachineType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHardwareVpdMachineType.setStatus("deprecated")
_BladeHardwareVpdUuid_Type = OctetString
_BladeHardwareVpdUuid_Object = MibTableColumn
bladeHardwareVpdUuid = _BladeHardwareVpdUuid_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 8),
    _BladeHardwareVpdUuid_Type()
)
bladeHardwareVpdUuid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHardwareVpdUuid.setStatus("deprecated")
_BladeHardwareVpdManufDate_Type = OctetString
_BladeHardwareVpdManufDate_Object = MibTableColumn
bladeHardwareVpdManufDate = _BladeHardwareVpdManufDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 9),
    _BladeHardwareVpdManufDate_Type()
)
bladeHardwareVpdManufDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHardwareVpdManufDate.setStatus("deprecated")
_BladeHardwareVpdPartNumber_Type = OctetString
_BladeHardwareVpdPartNumber_Object = MibTableColumn
bladeHardwareVpdPartNumber = _BladeHardwareVpdPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 10),
    _BladeHardwareVpdPartNumber_Type()
)
bladeHardwareVpdPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHardwareVpdPartNumber.setStatus("deprecated")
_BladeHardwareVpdFruSerial_Type = OctetString
_BladeHardwareVpdFruSerial_Object = MibTableColumn
bladeHardwareVpdFruSerial = _BladeHardwareVpdFruSerial_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 11),
    _BladeHardwareVpdFruSerial_Type()
)
bladeHardwareVpdFruSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHardwareVpdFruSerial.setStatus("deprecated")
_BladeHardwareVpdMachineModel_Type = OctetString
_BladeHardwareVpdMachineModel_Object = MibTableColumn
bladeHardwareVpdMachineModel = _BladeHardwareVpdMachineModel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 12),
    _BladeHardwareVpdMachineModel_Type()
)
bladeHardwareVpdMachineModel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHardwareVpdMachineModel.setStatus("deprecated")
_BladeHardwareVpdManufacturingIDNumber_Type = OctetString
_BladeHardwareVpdManufacturingIDNumber_Object = MibTableColumn
bladeHardwareVpdManufacturingIDNumber = _BladeHardwareVpdManufacturingIDNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 13),
    _BladeHardwareVpdManufacturingIDNumber_Type()
)
bladeHardwareVpdManufacturingIDNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHardwareVpdManufacturingIDNumber.setStatus("deprecated")
_BladeHardwareVpdProductId_Type = OctetString
_BladeHardwareVpdProductId_Object = MibTableColumn
bladeHardwareVpdProductId = _BladeHardwareVpdProductId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 14),
    _BladeHardwareVpdProductId_Type()
)
bladeHardwareVpdProductId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHardwareVpdProductId.setStatus("deprecated")
_BladeHardwareVpdSubManufacturerId_Type = OctetString
_BladeHardwareVpdSubManufacturerId_Object = MibTableColumn
bladeHardwareVpdSubManufacturerId = _BladeHardwareVpdSubManufacturerId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 15),
    _BladeHardwareVpdSubManufacturerId_Type()
)
bladeHardwareVpdSubManufacturerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHardwareVpdSubManufacturerId.setStatus("deprecated")
_BladeHardwareVpdClei_Type = OctetString
_BladeHardwareVpdClei_Object = MibTableColumn
bladeHardwareVpdClei = _BladeHardwareVpdClei_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 16),
    _BladeHardwareVpdClei_Type()
)
bladeHardwareVpdClei.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHardwareVpdClei.setStatus("deprecated")
_BladeHardwareVpdHardwareRevisionString_Type = OctetString
_BladeHardwareVpdHardwareRevisionString_Object = MibTableColumn
bladeHardwareVpdHardwareRevisionString = _BladeHardwareVpdHardwareRevisionString_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 17),
    _BladeHardwareVpdHardwareRevisionString_Type()
)
bladeHardwareVpdHardwareRevisionString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHardwareVpdHardwareRevisionString.setStatus("deprecated")


class _BladeDaughterVpdCardType_Type(Integer32):
    """Custom type bladeDaughterVpdCardType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("networkExpansion", 1),
          ("storageExpansion", 2),
          ("pciExpansion", 3),
          ("genericExpansion", 4))
    )


_BladeDaughterVpdCardType_Type.__name__ = "Integer32"
_BladeDaughterVpdCardType_Object = MibTableColumn
bladeDaughterVpdCardType = _BladeDaughterVpdCardType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 20),
    _BladeDaughterVpdCardType_Type()
)
bladeDaughterVpdCardType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterVpdCardType.setStatus("deprecated")
_BladeDaughterVpdManufacturingId_Type = OctetString
_BladeDaughterVpdManufacturingId_Object = MibTableColumn
bladeDaughterVpdManufacturingId = _BladeDaughterVpdManufacturingId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 21),
    _BladeDaughterVpdManufacturingId_Type()
)
bladeDaughterVpdManufacturingId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterVpdManufacturingId.setStatus("deprecated")
_BladeDaughterVpdFruNumber_Type = OctetString
_BladeDaughterVpdFruNumber_Object = MibTableColumn
bladeDaughterVpdFruNumber = _BladeDaughterVpdFruNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 22),
    _BladeDaughterVpdFruNumber_Type()
)
bladeDaughterVpdFruNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterVpdFruNumber.setStatus("deprecated")
_BladeDaughterVpdHardwareRevision_Type = Integer32
_BladeDaughterVpdHardwareRevision_Object = MibTableColumn
bladeDaughterVpdHardwareRevision = _BladeDaughterVpdHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 23),
    _BladeDaughterVpdHardwareRevision_Type()
)
bladeDaughterVpdHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterVpdHardwareRevision.setStatus("deprecated")
_BladeDaughterVpdSerialNumber_Type = OctetString
_BladeDaughterVpdSerialNumber_Object = MibTableColumn
bladeDaughterVpdSerialNumber = _BladeDaughterVpdSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 24),
    _BladeDaughterVpdSerialNumber_Type()
)
bladeDaughterVpdSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterVpdSerialNumber.setStatus("deprecated")
_BladeDaughterVpdMachineType_Type = OctetString
_BladeDaughterVpdMachineType_Object = MibTableColumn
bladeDaughterVpdMachineType = _BladeDaughterVpdMachineType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 25),
    _BladeDaughterVpdMachineType_Type()
)
bladeDaughterVpdMachineType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterVpdMachineType.setStatus("deprecated")
_BladeDaughterVpdUuid_Type = OctetString
_BladeDaughterVpdUuid_Object = MibTableColumn
bladeDaughterVpdUuid = _BladeDaughterVpdUuid_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 26),
    _BladeDaughterVpdUuid_Type()
)
bladeDaughterVpdUuid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterVpdUuid.setStatus("deprecated")
_BladeDaughterVpdManufDate_Type = OctetString
_BladeDaughterVpdManufDate_Object = MibTableColumn
bladeDaughterVpdManufDate = _BladeDaughterVpdManufDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 27),
    _BladeDaughterVpdManufDate_Type()
)
bladeDaughterVpdManufDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterVpdManufDate.setStatus("deprecated")
_BladeDaughterVpdPartNumber_Type = OctetString
_BladeDaughterVpdPartNumber_Object = MibTableColumn
bladeDaughterVpdPartNumber = _BladeDaughterVpdPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 28),
    _BladeDaughterVpdPartNumber_Type()
)
bladeDaughterVpdPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterVpdPartNumber.setStatus("deprecated")
_BladeDaughterVpdFruSerial_Type = OctetString
_BladeDaughterVpdFruSerial_Object = MibTableColumn
bladeDaughterVpdFruSerial = _BladeDaughterVpdFruSerial_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 29),
    _BladeDaughterVpdFruSerial_Type()
)
bladeDaughterVpdFruSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterVpdFruSerial.setStatus("deprecated")
_BladeDaughterVpdManufacturingIDNumber_Type = OctetString
_BladeDaughterVpdManufacturingIDNumber_Object = MibTableColumn
bladeDaughterVpdManufacturingIDNumber = _BladeDaughterVpdManufacturingIDNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 30),
    _BladeDaughterVpdManufacturingIDNumber_Type()
)
bladeDaughterVpdManufacturingIDNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterVpdManufacturingIDNumber.setStatus("deprecated")
_BladeDaughterVpdProductId_Type = OctetString
_BladeDaughterVpdProductId_Object = MibTableColumn
bladeDaughterVpdProductId = _BladeDaughterVpdProductId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 31),
    _BladeDaughterVpdProductId_Type()
)
bladeDaughterVpdProductId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterVpdProductId.setStatus("deprecated")
_BladeDaughterVpdSubManufacturerId_Type = OctetString
_BladeDaughterVpdSubManufacturerId_Object = MibTableColumn
bladeDaughterVpdSubManufacturerId = _BladeDaughterVpdSubManufacturerId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 32),
    _BladeDaughterVpdSubManufacturerId_Type()
)
bladeDaughterVpdSubManufacturerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterVpdSubManufacturerId.setStatus("deprecated")
_BladeDaughterVpdClei_Type = OctetString
_BladeDaughterVpdClei_Object = MibTableColumn
bladeDaughterVpdClei = _BladeDaughterVpdClei_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 33),
    _BladeDaughterVpdClei_Type()
)
bladeDaughterVpdClei.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterVpdClei.setStatus("deprecated")
_BladeDaughterVpdHardwareRevisionString_Type = OctetString
_BladeDaughterVpdHardwareRevisionString_Object = MibTableColumn
bladeDaughterVpdHardwareRevisionString = _BladeDaughterVpdHardwareRevisionString_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 1, 1, 34),
    _BladeDaughterVpdHardwareRevisionString_Type()
)
bladeDaughterVpdHardwareRevisionString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterVpdHardwareRevisionString.setStatus("deprecated")
_BladeMACAddressVpdTable_Object = MibTable
bladeMACAddressVpdTable = _BladeMACAddressVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2)
)
if mibBuilder.loadTexts:
    bladeMACAddressVpdTable.setStatus("mandatory")
_BladeMACAddressVpdEntry_Object = MibTableRow
bladeMACAddressVpdEntry = _BladeMACAddressVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1)
)
bladeMACAddressVpdEntry.setIndexNames(
    (0, "CME-MIB", "bladeMACAddressVpdIndex"),
)
if mibBuilder.loadTexts:
    bladeMACAddressVpdEntry.setStatus("mandatory")
_BladeMACAddressVpdIndex_Type = Integer32
_BladeMACAddressVpdIndex_Object = MibTableColumn
bladeMACAddressVpdIndex = _BladeMACAddressVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 1),
    _BladeMACAddressVpdIndex_Type()
)
bladeMACAddressVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeMACAddressVpdIndex.setStatus("mandatory")
_BladeMACAddress1Vpd_Type = OctetString
_BladeMACAddress1Vpd_Object = MibTableColumn
bladeMACAddress1Vpd = _BladeMACAddress1Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 2),
    _BladeMACAddress1Vpd_Type()
)
bladeMACAddress1Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeMACAddress1Vpd.setStatus("mandatory")
_BladeMACAddress2Vpd_Type = OctetString
_BladeMACAddress2Vpd_Object = MibTableColumn
bladeMACAddress2Vpd = _BladeMACAddress2Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 3),
    _BladeMACAddress2Vpd_Type()
)
bladeMACAddress2Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeMACAddress2Vpd.setStatus("mandatory")
_BladeMACAddress3Vpd_Type = OctetString
_BladeMACAddress3Vpd_Object = MibTableColumn
bladeMACAddress3Vpd = _BladeMACAddress3Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 4),
    _BladeMACAddress3Vpd_Type()
)
bladeMACAddress3Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeMACAddress3Vpd.setStatus("mandatory")
_BladeMACAddress4Vpd_Type = OctetString
_BladeMACAddress4Vpd_Object = MibTableColumn
bladeMACAddress4Vpd = _BladeMACAddress4Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 5),
    _BladeMACAddress4Vpd_Type()
)
bladeMACAddress4Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeMACAddress4Vpd.setStatus("mandatory")
_BladeMACAddress5Vpd_Type = OctetString
_BladeMACAddress5Vpd_Object = MibTableColumn
bladeMACAddress5Vpd = _BladeMACAddress5Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 6),
    _BladeMACAddress5Vpd_Type()
)
bladeMACAddress5Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeMACAddress5Vpd.setStatus("mandatory")
_BladeMACAddress6Vpd_Type = OctetString
_BladeMACAddress6Vpd_Object = MibTableColumn
bladeMACAddress6Vpd = _BladeMACAddress6Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 7),
    _BladeMACAddress6Vpd_Type()
)
bladeMACAddress6Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeMACAddress6Vpd.setStatus("mandatory")
_BladeMACAddress7Vpd_Type = OctetString
_BladeMACAddress7Vpd_Object = MibTableColumn
bladeMACAddress7Vpd = _BladeMACAddress7Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 8),
    _BladeMACAddress7Vpd_Type()
)
bladeMACAddress7Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeMACAddress7Vpd.setStatus("mandatory")
_BladeMACAddress8Vpd_Type = OctetString
_BladeMACAddress8Vpd_Object = MibTableColumn
bladeMACAddress8Vpd = _BladeMACAddress8Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 9),
    _BladeMACAddress8Vpd_Type()
)
bladeMACAddress8Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeMACAddress8Vpd.setStatus("mandatory")
_BladeDaughterCard1MACAddress1Vpd_Type = OctetString
_BladeDaughterCard1MACAddress1Vpd_Object = MibTableColumn
bladeDaughterCard1MACAddress1Vpd = _BladeDaughterCard1MACAddress1Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 10),
    _BladeDaughterCard1MACAddress1Vpd_Type()
)
bladeDaughterCard1MACAddress1Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard1MACAddress1Vpd.setStatus("mandatory")
_BladeDaughterCard1MACAddress2Vpd_Type = OctetString
_BladeDaughterCard1MACAddress2Vpd_Object = MibTableColumn
bladeDaughterCard1MACAddress2Vpd = _BladeDaughterCard1MACAddress2Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 11),
    _BladeDaughterCard1MACAddress2Vpd_Type()
)
bladeDaughterCard1MACAddress2Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard1MACAddress2Vpd.setStatus("mandatory")
_BladeDaughterCard1MACAddress3Vpd_Type = OctetString
_BladeDaughterCard1MACAddress3Vpd_Object = MibTableColumn
bladeDaughterCard1MACAddress3Vpd = _BladeDaughterCard1MACAddress3Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 12),
    _BladeDaughterCard1MACAddress3Vpd_Type()
)
bladeDaughterCard1MACAddress3Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard1MACAddress3Vpd.setStatus("mandatory")
_BladeDaughterCard1MACAddress4Vpd_Type = OctetString
_BladeDaughterCard1MACAddress4Vpd_Object = MibTableColumn
bladeDaughterCard1MACAddress4Vpd = _BladeDaughterCard1MACAddress4Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 13),
    _BladeDaughterCard1MACAddress4Vpd_Type()
)
bladeDaughterCard1MACAddress4Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard1MACAddress4Vpd.setStatus("mandatory")
_BladeDaughterCard1MACAddress5Vpd_Type = OctetString
_BladeDaughterCard1MACAddress5Vpd_Object = MibTableColumn
bladeDaughterCard1MACAddress5Vpd = _BladeDaughterCard1MACAddress5Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 14),
    _BladeDaughterCard1MACAddress5Vpd_Type()
)
bladeDaughterCard1MACAddress5Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard1MACAddress5Vpd.setStatus("mandatory")
_BladeDaughterCard1MACAddress6Vpd_Type = OctetString
_BladeDaughterCard1MACAddress6Vpd_Object = MibTableColumn
bladeDaughterCard1MACAddress6Vpd = _BladeDaughterCard1MACAddress6Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 15),
    _BladeDaughterCard1MACAddress6Vpd_Type()
)
bladeDaughterCard1MACAddress6Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard1MACAddress6Vpd.setStatus("mandatory")
_BladeDaughterCard1MACAddress7Vpd_Type = OctetString
_BladeDaughterCard1MACAddress7Vpd_Object = MibTableColumn
bladeDaughterCard1MACAddress7Vpd = _BladeDaughterCard1MACAddress7Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 16),
    _BladeDaughterCard1MACAddress7Vpd_Type()
)
bladeDaughterCard1MACAddress7Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard1MACAddress7Vpd.setStatus("mandatory")
_BladeDaughterCard1MACAddress8Vpd_Type = OctetString
_BladeDaughterCard1MACAddress8Vpd_Object = MibTableColumn
bladeDaughterCard1MACAddress8Vpd = _BladeDaughterCard1MACAddress8Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 17),
    _BladeDaughterCard1MACAddress8Vpd_Type()
)
bladeDaughterCard1MACAddress8Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard1MACAddress8Vpd.setStatus("mandatory")
_BladeDaughterCard2MACAddress1Vpd_Type = OctetString
_BladeDaughterCard2MACAddress1Vpd_Object = MibTableColumn
bladeDaughterCard2MACAddress1Vpd = _BladeDaughterCard2MACAddress1Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 18),
    _BladeDaughterCard2MACAddress1Vpd_Type()
)
bladeDaughterCard2MACAddress1Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard2MACAddress1Vpd.setStatus("mandatory")
_BladeDaughterCard2MACAddress2Vpd_Type = OctetString
_BladeDaughterCard2MACAddress2Vpd_Object = MibTableColumn
bladeDaughterCard2MACAddress2Vpd = _BladeDaughterCard2MACAddress2Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 19),
    _BladeDaughterCard2MACAddress2Vpd_Type()
)
bladeDaughterCard2MACAddress2Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard2MACAddress2Vpd.setStatus("mandatory")
_BladeDaughterCard2MACAddress3Vpd_Type = OctetString
_BladeDaughterCard2MACAddress3Vpd_Object = MibTableColumn
bladeDaughterCard2MACAddress3Vpd = _BladeDaughterCard2MACAddress3Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 20),
    _BladeDaughterCard2MACAddress3Vpd_Type()
)
bladeDaughterCard2MACAddress3Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard2MACAddress3Vpd.setStatus("mandatory")
_BladeDaughterCard2MACAddress4Vpd_Type = OctetString
_BladeDaughterCard2MACAddress4Vpd_Object = MibTableColumn
bladeDaughterCard2MACAddress4Vpd = _BladeDaughterCard2MACAddress4Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 21),
    _BladeDaughterCard2MACAddress4Vpd_Type()
)
bladeDaughterCard2MACAddress4Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard2MACAddress4Vpd.setStatus("mandatory")
_BladeDaughterCard2MACAddress5Vpd_Type = OctetString
_BladeDaughterCard2MACAddress5Vpd_Object = MibTableColumn
bladeDaughterCard2MACAddress5Vpd = _BladeDaughterCard2MACAddress5Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 22),
    _BladeDaughterCard2MACAddress5Vpd_Type()
)
bladeDaughterCard2MACAddress5Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard2MACAddress5Vpd.setStatus("mandatory")
_BladeDaughterCard2MACAddress6Vpd_Type = OctetString
_BladeDaughterCard2MACAddress6Vpd_Object = MibTableColumn
bladeDaughterCard2MACAddress6Vpd = _BladeDaughterCard2MACAddress6Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 23),
    _BladeDaughterCard2MACAddress6Vpd_Type()
)
bladeDaughterCard2MACAddress6Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard2MACAddress6Vpd.setStatus("mandatory")
_BladeDaughterCard2MACAddress7Vpd_Type = OctetString
_BladeDaughterCard2MACAddress7Vpd_Object = MibTableColumn
bladeDaughterCard2MACAddress7Vpd = _BladeDaughterCard2MACAddress7Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 24),
    _BladeDaughterCard2MACAddress7Vpd_Type()
)
bladeDaughterCard2MACAddress7Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard2MACAddress7Vpd.setStatus("mandatory")
_BladeDaughterCard2MACAddress8Vpd_Type = OctetString
_BladeDaughterCard2MACAddress8Vpd_Object = MibTableColumn
bladeDaughterCard2MACAddress8Vpd = _BladeDaughterCard2MACAddress8Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 25),
    _BladeDaughterCard2MACAddress8Vpd_Type()
)
bladeDaughterCard2MACAddress8Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard2MACAddress8Vpd.setStatus("mandatory")
_BladeDaughterCard3MACAddress1Vpd_Type = OctetString
_BladeDaughterCard3MACAddress1Vpd_Object = MibTableColumn
bladeDaughterCard3MACAddress1Vpd = _BladeDaughterCard3MACAddress1Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 26),
    _BladeDaughterCard3MACAddress1Vpd_Type()
)
bladeDaughterCard3MACAddress1Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard3MACAddress1Vpd.setStatus("mandatory")
_BladeDaughterCard3MACAddress2Vpd_Type = OctetString
_BladeDaughterCard3MACAddress2Vpd_Object = MibTableColumn
bladeDaughterCard3MACAddress2Vpd = _BladeDaughterCard3MACAddress2Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 27),
    _BladeDaughterCard3MACAddress2Vpd_Type()
)
bladeDaughterCard3MACAddress2Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard3MACAddress2Vpd.setStatus("mandatory")
_BladeDaughterCard3MACAddress3Vpd_Type = OctetString
_BladeDaughterCard3MACAddress3Vpd_Object = MibTableColumn
bladeDaughterCard3MACAddress3Vpd = _BladeDaughterCard3MACAddress3Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 28),
    _BladeDaughterCard3MACAddress3Vpd_Type()
)
bladeDaughterCard3MACAddress3Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard3MACAddress3Vpd.setStatus("mandatory")
_BladeDaughterCard3MACAddress4Vpd_Type = OctetString
_BladeDaughterCard3MACAddress4Vpd_Object = MibTableColumn
bladeDaughterCard3MACAddress4Vpd = _BladeDaughterCard3MACAddress4Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 29),
    _BladeDaughterCard3MACAddress4Vpd_Type()
)
bladeDaughterCard3MACAddress4Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard3MACAddress4Vpd.setStatus("mandatory")
_BladeDaughterCard3MACAddress5Vpd_Type = OctetString
_BladeDaughterCard3MACAddress5Vpd_Object = MibTableColumn
bladeDaughterCard3MACAddress5Vpd = _BladeDaughterCard3MACAddress5Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 30),
    _BladeDaughterCard3MACAddress5Vpd_Type()
)
bladeDaughterCard3MACAddress5Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard3MACAddress5Vpd.setStatus("mandatory")
_BladeDaughterCard3MACAddress6Vpd_Type = OctetString
_BladeDaughterCard3MACAddress6Vpd_Object = MibTableColumn
bladeDaughterCard3MACAddress6Vpd = _BladeDaughterCard3MACAddress6Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 31),
    _BladeDaughterCard3MACAddress6Vpd_Type()
)
bladeDaughterCard3MACAddress6Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard3MACAddress6Vpd.setStatus("mandatory")
_BladeDaughterCard3MACAddress7Vpd_Type = OctetString
_BladeDaughterCard3MACAddress7Vpd_Object = MibTableColumn
bladeDaughterCard3MACAddress7Vpd = _BladeDaughterCard3MACAddress7Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 32),
    _BladeDaughterCard3MACAddress7Vpd_Type()
)
bladeDaughterCard3MACAddress7Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard3MACAddress7Vpd.setStatus("mandatory")
_BladeDaughterCard3MACAddress8Vpd_Type = OctetString
_BladeDaughterCard3MACAddress8Vpd_Object = MibTableColumn
bladeDaughterCard3MACAddress8Vpd = _BladeDaughterCard3MACAddress8Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 33),
    _BladeDaughterCard3MACAddress8Vpd_Type()
)
bladeDaughterCard3MACAddress8Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard3MACAddress8Vpd.setStatus("mandatory")
_BladeDaughterCard4MACAddress1Vpd_Type = OctetString
_BladeDaughterCard4MACAddress1Vpd_Object = MibTableColumn
bladeDaughterCard4MACAddress1Vpd = _BladeDaughterCard4MACAddress1Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 34),
    _BladeDaughterCard4MACAddress1Vpd_Type()
)
bladeDaughterCard4MACAddress1Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard4MACAddress1Vpd.setStatus("mandatory")
_BladeDaughterCard4MACAddress2Vpd_Type = OctetString
_BladeDaughterCard4MACAddress2Vpd_Object = MibTableColumn
bladeDaughterCard4MACAddress2Vpd = _BladeDaughterCard4MACAddress2Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 35),
    _BladeDaughterCard4MACAddress2Vpd_Type()
)
bladeDaughterCard4MACAddress2Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard4MACAddress2Vpd.setStatus("mandatory")
_BladeDaughterCard4MACAddress3Vpd_Type = OctetString
_BladeDaughterCard4MACAddress3Vpd_Object = MibTableColumn
bladeDaughterCard4MACAddress3Vpd = _BladeDaughterCard4MACAddress3Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 36),
    _BladeDaughterCard4MACAddress3Vpd_Type()
)
bladeDaughterCard4MACAddress3Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard4MACAddress3Vpd.setStatus("mandatory")
_BladeDaughterCard4MACAddress4Vpd_Type = OctetString
_BladeDaughterCard4MACAddress4Vpd_Object = MibTableColumn
bladeDaughterCard4MACAddress4Vpd = _BladeDaughterCard4MACAddress4Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 37),
    _BladeDaughterCard4MACAddress4Vpd_Type()
)
bladeDaughterCard4MACAddress4Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard4MACAddress4Vpd.setStatus("mandatory")
_BladeDaughterCard4MACAddress5Vpd_Type = OctetString
_BladeDaughterCard4MACAddress5Vpd_Object = MibTableColumn
bladeDaughterCard4MACAddress5Vpd = _BladeDaughterCard4MACAddress5Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 38),
    _BladeDaughterCard4MACAddress5Vpd_Type()
)
bladeDaughterCard4MACAddress5Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard4MACAddress5Vpd.setStatus("mandatory")
_BladeDaughterCard4MACAddress6Vpd_Type = OctetString
_BladeDaughterCard4MACAddress6Vpd_Object = MibTableColumn
bladeDaughterCard4MACAddress6Vpd = _BladeDaughterCard4MACAddress6Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 39),
    _BladeDaughterCard4MACAddress6Vpd_Type()
)
bladeDaughterCard4MACAddress6Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard4MACAddress6Vpd.setStatus("mandatory")
_BladeDaughterCard4MACAddress7Vpd_Type = OctetString
_BladeDaughterCard4MACAddress7Vpd_Object = MibTableColumn
bladeDaughterCard4MACAddress7Vpd = _BladeDaughterCard4MACAddress7Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 40),
    _BladeDaughterCard4MACAddress7Vpd_Type()
)
bladeDaughterCard4MACAddress7Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard4MACAddress7Vpd.setStatus("mandatory")
_BladeDaughterCard4MACAddress8Vpd_Type = OctetString
_BladeDaughterCard4MACAddress8Vpd_Object = MibTableColumn
bladeDaughterCard4MACAddress8Vpd = _BladeDaughterCard4MACAddress8Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 41),
    _BladeDaughterCard4MACAddress8Vpd_Type()
)
bladeDaughterCard4MACAddress8Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard4MACAddress8Vpd.setStatus("mandatory")
_BladeDaughterCard5MACAddress1Vpd_Type = OctetString
_BladeDaughterCard5MACAddress1Vpd_Object = MibTableColumn
bladeDaughterCard5MACAddress1Vpd = _BladeDaughterCard5MACAddress1Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 42),
    _BladeDaughterCard5MACAddress1Vpd_Type()
)
bladeDaughterCard5MACAddress1Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard5MACAddress1Vpd.setStatus("mandatory")
_BladeDaughterCard5MACAddress2Vpd_Type = OctetString
_BladeDaughterCard5MACAddress2Vpd_Object = MibTableColumn
bladeDaughterCard5MACAddress2Vpd = _BladeDaughterCard5MACAddress2Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 43),
    _BladeDaughterCard5MACAddress2Vpd_Type()
)
bladeDaughterCard5MACAddress2Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard5MACAddress2Vpd.setStatus("mandatory")
_BladeDaughterCard5MACAddress3Vpd_Type = OctetString
_BladeDaughterCard5MACAddress3Vpd_Object = MibTableColumn
bladeDaughterCard5MACAddress3Vpd = _BladeDaughterCard5MACAddress3Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 44),
    _BladeDaughterCard5MACAddress3Vpd_Type()
)
bladeDaughterCard5MACAddress3Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard5MACAddress3Vpd.setStatus("mandatory")
_BladeDaughterCard5MACAddress4Vpd_Type = OctetString
_BladeDaughterCard5MACAddress4Vpd_Object = MibTableColumn
bladeDaughterCard5MACAddress4Vpd = _BladeDaughterCard5MACAddress4Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 45),
    _BladeDaughterCard5MACAddress4Vpd_Type()
)
bladeDaughterCard5MACAddress4Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard5MACAddress4Vpd.setStatus("mandatory")
_BladeDaughterCard5MACAddress5Vpd_Type = OctetString
_BladeDaughterCard5MACAddress5Vpd_Object = MibTableColumn
bladeDaughterCard5MACAddress5Vpd = _BladeDaughterCard5MACAddress5Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 46),
    _BladeDaughterCard5MACAddress5Vpd_Type()
)
bladeDaughterCard5MACAddress5Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard5MACAddress5Vpd.setStatus("mandatory")
_BladeDaughterCard5MACAddress6Vpd_Type = OctetString
_BladeDaughterCard5MACAddress6Vpd_Object = MibTableColumn
bladeDaughterCard5MACAddress6Vpd = _BladeDaughterCard5MACAddress6Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 47),
    _BladeDaughterCard5MACAddress6Vpd_Type()
)
bladeDaughterCard5MACAddress6Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard5MACAddress6Vpd.setStatus("mandatory")
_BladeDaughterCard5MACAddress7Vpd_Type = OctetString
_BladeDaughterCard5MACAddress7Vpd_Object = MibTableColumn
bladeDaughterCard5MACAddress7Vpd = _BladeDaughterCard5MACAddress7Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 48),
    _BladeDaughterCard5MACAddress7Vpd_Type()
)
bladeDaughterCard5MACAddress7Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard5MACAddress7Vpd.setStatus("mandatory")
_BladeDaughterCard5MACAddress8Vpd_Type = OctetString
_BladeDaughterCard5MACAddress8Vpd_Object = MibTableColumn
bladeDaughterCard5MACAddress8Vpd = _BladeDaughterCard5MACAddress8Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 49),
    _BladeDaughterCard5MACAddress8Vpd_Type()
)
bladeDaughterCard5MACAddress8Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDaughterCard5MACAddress8Vpd.setStatus("mandatory")
_BladeHSDaughterCard1MACAddress1Vpd_Type = OctetString
_BladeHSDaughterCard1MACAddress1Vpd_Object = MibTableColumn
bladeHSDaughterCard1MACAddress1Vpd = _BladeHSDaughterCard1MACAddress1Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 100),
    _BladeHSDaughterCard1MACAddress1Vpd_Type()
)
bladeHSDaughterCard1MACAddress1Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHSDaughterCard1MACAddress1Vpd.setStatus("mandatory")
_BladeHSDaughterCard1MACAddress2Vpd_Type = OctetString
_BladeHSDaughterCard1MACAddress2Vpd_Object = MibTableColumn
bladeHSDaughterCard1MACAddress2Vpd = _BladeHSDaughterCard1MACAddress2Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 101),
    _BladeHSDaughterCard1MACAddress2Vpd_Type()
)
bladeHSDaughterCard1MACAddress2Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHSDaughterCard1MACAddress2Vpd.setStatus("mandatory")
_BladeHSDaughterCard1MACAddress3Vpd_Type = OctetString
_BladeHSDaughterCard1MACAddress3Vpd_Object = MibTableColumn
bladeHSDaughterCard1MACAddress3Vpd = _BladeHSDaughterCard1MACAddress3Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 102),
    _BladeHSDaughterCard1MACAddress3Vpd_Type()
)
bladeHSDaughterCard1MACAddress3Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHSDaughterCard1MACAddress3Vpd.setStatus("mandatory")
_BladeHSDaughterCard1MACAddress4Vpd_Type = OctetString
_BladeHSDaughterCard1MACAddress4Vpd_Object = MibTableColumn
bladeHSDaughterCard1MACAddress4Vpd = _BladeHSDaughterCard1MACAddress4Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 103),
    _BladeHSDaughterCard1MACAddress4Vpd_Type()
)
bladeHSDaughterCard1MACAddress4Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHSDaughterCard1MACAddress4Vpd.setStatus("mandatory")
_BladeHSDaughterCard1MACAddress5Vpd_Type = OctetString
_BladeHSDaughterCard1MACAddress5Vpd_Object = MibTableColumn
bladeHSDaughterCard1MACAddress5Vpd = _BladeHSDaughterCard1MACAddress5Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 104),
    _BladeHSDaughterCard1MACAddress5Vpd_Type()
)
bladeHSDaughterCard1MACAddress5Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHSDaughterCard1MACAddress5Vpd.setStatus("mandatory")
_BladeHSDaughterCard1MACAddress6Vpd_Type = OctetString
_BladeHSDaughterCard1MACAddress6Vpd_Object = MibTableColumn
bladeHSDaughterCard1MACAddress6Vpd = _BladeHSDaughterCard1MACAddress6Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 105),
    _BladeHSDaughterCard1MACAddress6Vpd_Type()
)
bladeHSDaughterCard1MACAddress6Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHSDaughterCard1MACAddress6Vpd.setStatus("mandatory")
_BladeHSDaughterCard1MACAddress7Vpd_Type = OctetString
_BladeHSDaughterCard1MACAddress7Vpd_Object = MibTableColumn
bladeHSDaughterCard1MACAddress7Vpd = _BladeHSDaughterCard1MACAddress7Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 106),
    _BladeHSDaughterCard1MACAddress7Vpd_Type()
)
bladeHSDaughterCard1MACAddress7Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHSDaughterCard1MACAddress7Vpd.setStatus("mandatory")
_BladeHSDaughterCard1MACAddress8Vpd_Type = OctetString
_BladeHSDaughterCard1MACAddress8Vpd_Object = MibTableColumn
bladeHSDaughterCard1MACAddress8Vpd = _BladeHSDaughterCard1MACAddress8Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 107),
    _BladeHSDaughterCard1MACAddress8Vpd_Type()
)
bladeHSDaughterCard1MACAddress8Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHSDaughterCard1MACAddress8Vpd.setStatus("mandatory")
_BladeSideCardMACAddress1Vpd_Type = OctetString
_BladeSideCardMACAddress1Vpd_Object = MibTableColumn
bladeSideCardMACAddress1Vpd = _BladeSideCardMACAddress1Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 164),
    _BladeSideCardMACAddress1Vpd_Type()
)
bladeSideCardMACAddress1Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSideCardMACAddress1Vpd.setStatus("mandatory")
_BladeSideCardMACAddress2Vpd_Type = OctetString
_BladeSideCardMACAddress2Vpd_Object = MibTableColumn
bladeSideCardMACAddress2Vpd = _BladeSideCardMACAddress2Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 165),
    _BladeSideCardMACAddress2Vpd_Type()
)
bladeSideCardMACAddress2Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSideCardMACAddress2Vpd.setStatus("mandatory")
_BladeSideCardMACAddress3Vpd_Type = OctetString
_BladeSideCardMACAddress3Vpd_Object = MibTableColumn
bladeSideCardMACAddress3Vpd = _BladeSideCardMACAddress3Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 166),
    _BladeSideCardMACAddress3Vpd_Type()
)
bladeSideCardMACAddress3Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSideCardMACAddress3Vpd.setStatus("mandatory")
_BladeSideCardMACAddress4Vpd_Type = OctetString
_BladeSideCardMACAddress4Vpd_Object = MibTableColumn
bladeSideCardMACAddress4Vpd = _BladeSideCardMACAddress4Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 167),
    _BladeSideCardMACAddress4Vpd_Type()
)
bladeSideCardMACAddress4Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSideCardMACAddress4Vpd.setStatus("mandatory")
_BladeSideCardMACAddress5Vpd_Type = OctetString
_BladeSideCardMACAddress5Vpd_Object = MibTableColumn
bladeSideCardMACAddress5Vpd = _BladeSideCardMACAddress5Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 168),
    _BladeSideCardMACAddress5Vpd_Type()
)
bladeSideCardMACAddress5Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSideCardMACAddress5Vpd.setStatus("mandatory")
_BladeSideCardMACAddress6Vpd_Type = OctetString
_BladeSideCardMACAddress6Vpd_Object = MibTableColumn
bladeSideCardMACAddress6Vpd = _BladeSideCardMACAddress6Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 169),
    _BladeSideCardMACAddress6Vpd_Type()
)
bladeSideCardMACAddress6Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSideCardMACAddress6Vpd.setStatus("mandatory")
_BladeSideCardMACAddress7Vpd_Type = OctetString
_BladeSideCardMACAddress7Vpd_Object = MibTableColumn
bladeSideCardMACAddress7Vpd = _BladeSideCardMACAddress7Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 170),
    _BladeSideCardMACAddress7Vpd_Type()
)
bladeSideCardMACAddress7Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSideCardMACAddress7Vpd.setStatus("mandatory")
_BladeSideCardMACAddress8Vpd_Type = OctetString
_BladeSideCardMACAddress8Vpd_Object = MibTableColumn
bladeSideCardMACAddress8Vpd = _BladeSideCardMACAddress8Vpd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 2, 1, 171),
    _BladeSideCardMACAddress8Vpd_Type()
)
bladeSideCardMACAddress8Vpd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSideCardMACAddress8Vpd.setStatus("mandatory")
_BladeExpCardVpdTable_Object = MibTable
bladeExpCardVpdTable = _BladeExpCardVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5)
)
if mibBuilder.loadTexts:
    bladeExpCardVpdTable.setStatus("deprecated")
_BladeExpCardVpdEntry_Object = MibTableRow
bladeExpCardVpdEntry = _BladeExpCardVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1)
)
bladeExpCardVpdEntry.setIndexNames(
    (0, "CME-MIB", "bladeExpCardVpdIndex"),
)
if mibBuilder.loadTexts:
    bladeExpCardVpdEntry.setStatus("deprecated")
_BladeExpCardVpdIndex_Type = Integer32
_BladeExpCardVpdIndex_Object = MibTableColumn
bladeExpCardVpdIndex = _BladeExpCardVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 1),
    _BladeExpCardVpdIndex_Type()
)
bladeExpCardVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdIndex.setStatus("deprecated")
_BladeExpCardVpdBayNumber_Type = OctetString
_BladeExpCardVpdBayNumber_Object = MibTableColumn
bladeExpCardVpdBayNumber = _BladeExpCardVpdBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 2),
    _BladeExpCardVpdBayNumber_Type()
)
bladeExpCardVpdBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdBayNumber.setStatus("deprecated")
_BladeExpCardVpdManufacturingId_Type = OctetString
_BladeExpCardVpdManufacturingId_Object = MibTableColumn
bladeExpCardVpdManufacturingId = _BladeExpCardVpdManufacturingId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 3),
    _BladeExpCardVpdManufacturingId_Type()
)
bladeExpCardVpdManufacturingId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdManufacturingId.setStatus("deprecated")
_BladeExpCardVpdFruNumber_Type = OctetString
_BladeExpCardVpdFruNumber_Object = MibTableColumn
bladeExpCardVpdFruNumber = _BladeExpCardVpdFruNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 4),
    _BladeExpCardVpdFruNumber_Type()
)
bladeExpCardVpdFruNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdFruNumber.setStatus("deprecated")
_BladeExpCardVpdHardwareRevision_Type = Integer32
_BladeExpCardVpdHardwareRevision_Object = MibTableColumn
bladeExpCardVpdHardwareRevision = _BladeExpCardVpdHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 5),
    _BladeExpCardVpdHardwareRevision_Type()
)
bladeExpCardVpdHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdHardwareRevision.setStatus("deprecated")
_BladeExpCardVpdSerialNumber_Type = OctetString
_BladeExpCardVpdSerialNumber_Object = MibTableColumn
bladeExpCardVpdSerialNumber = _BladeExpCardVpdSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 6),
    _BladeExpCardVpdSerialNumber_Type()
)
bladeExpCardVpdSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdSerialNumber.setStatus("deprecated")
_BladeExpCardVpdMachineType_Type = OctetString
_BladeExpCardVpdMachineType_Object = MibTableColumn
bladeExpCardVpdMachineType = _BladeExpCardVpdMachineType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 7),
    _BladeExpCardVpdMachineType_Type()
)
bladeExpCardVpdMachineType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdMachineType.setStatus("deprecated")
_BladeExpCardVpdUuid_Type = OctetString
_BladeExpCardVpdUuid_Object = MibTableColumn
bladeExpCardVpdUuid = _BladeExpCardVpdUuid_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 8),
    _BladeExpCardVpdUuid_Type()
)
bladeExpCardVpdUuid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdUuid.setStatus("deprecated")
_BladeExpCardVpdManufDate_Type = OctetString
_BladeExpCardVpdManufDate_Object = MibTableColumn
bladeExpCardVpdManufDate = _BladeExpCardVpdManufDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 9),
    _BladeExpCardVpdManufDate_Type()
)
bladeExpCardVpdManufDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdManufDate.setStatus("deprecated")
_BladeExpCardVpdPartNumber_Type = OctetString
_BladeExpCardVpdPartNumber_Object = MibTableColumn
bladeExpCardVpdPartNumber = _BladeExpCardVpdPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 10),
    _BladeExpCardVpdPartNumber_Type()
)
bladeExpCardVpdPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdPartNumber.setStatus("deprecated")
_BladeExpCardVpdFruSerial_Type = OctetString
_BladeExpCardVpdFruSerial_Object = MibTableColumn
bladeExpCardVpdFruSerial = _BladeExpCardVpdFruSerial_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 11),
    _BladeExpCardVpdFruSerial_Type()
)
bladeExpCardVpdFruSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdFruSerial.setStatus("deprecated")
_BladeExpCardVpdMachineModel_Type = OctetString
_BladeExpCardVpdMachineModel_Object = MibTableColumn
bladeExpCardVpdMachineModel = _BladeExpCardVpdMachineModel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 12),
    _BladeExpCardVpdMachineModel_Type()
)
bladeExpCardVpdMachineModel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdMachineModel.setStatus("deprecated")
_BladeExpCardVpdManufacturingIDNumber_Type = OctetString
_BladeExpCardVpdManufacturingIDNumber_Object = MibTableColumn
bladeExpCardVpdManufacturingIDNumber = _BladeExpCardVpdManufacturingIDNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 13),
    _BladeExpCardVpdManufacturingIDNumber_Type()
)
bladeExpCardVpdManufacturingIDNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdManufacturingIDNumber.setStatus("deprecated")
_BladeExpCardVpdProductId_Type = OctetString
_BladeExpCardVpdProductId_Object = MibTableColumn
bladeExpCardVpdProductId = _BladeExpCardVpdProductId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 14),
    _BladeExpCardVpdProductId_Type()
)
bladeExpCardVpdProductId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdProductId.setStatus("deprecated")
_BladeExpCardVpdSubManufacturerId_Type = OctetString
_BladeExpCardVpdSubManufacturerId_Object = MibTableColumn
bladeExpCardVpdSubManufacturerId = _BladeExpCardVpdSubManufacturerId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 15),
    _BladeExpCardVpdSubManufacturerId_Type()
)
bladeExpCardVpdSubManufacturerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdSubManufacturerId.setStatus("deprecated")
_BladeExpCardVpdClei_Type = OctetString
_BladeExpCardVpdClei_Object = MibTableColumn
bladeExpCardVpdClei = _BladeExpCardVpdClei_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 16),
    _BladeExpCardVpdClei_Type()
)
bladeExpCardVpdClei.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdClei.setStatus("deprecated")
_BladeExpCardVpdBladeBayNumber_Type = OctetString
_BladeExpCardVpdBladeBayNumber_Object = MibTableColumn
bladeExpCardVpdBladeBayNumber = _BladeExpCardVpdBladeBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 19),
    _BladeExpCardVpdBladeBayNumber_Type()
)
bladeExpCardVpdBladeBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdBladeBayNumber.setStatus("deprecated")


class _BladeExpCardVpdCardTypeInfo_Type(Integer32):
    """Custom type bladeExpCardVpdCardTypeInfo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("bladeEthernetExpCard", 1),
          ("bladeFiberChannelExpCard", 2),
          ("serialPortExpCard", 3),
          ("bladeOpticalPassThrough", 4),
          ("bladeInfinibandExpCard", 5),
          ("bladeIscsiExpCard", 6),
          ("bladeGenericExpCard", 7),
          ("bladeNetworkCFFeExpCard", 8),
          ("bladeSASConnectivityCard", 9),
          ("bladeSATAConnectivityCard", 10),
          ("bladeNetworkCFFzExpCard", 11),
          ("bladeNetworkCNAExpCard", 12))
    )


_BladeExpCardVpdCardTypeInfo_Type.__name__ = "Integer32"
_BladeExpCardVpdCardTypeInfo_Object = MibTableColumn
bladeExpCardVpdCardTypeInfo = _BladeExpCardVpdCardTypeInfo_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 21),
    _BladeExpCardVpdCardTypeInfo_Type()
)
bladeExpCardVpdCardTypeInfo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdCardTypeInfo.setStatus("deprecated")


class _BladeExpCardVpdHighSpeed_Type(Integer32):
    """Custom type bladeExpCardVpdHighSpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1),
          ("notApplicable", 255))
    )


_BladeExpCardVpdHighSpeed_Type.__name__ = "Integer32"
_BladeExpCardVpdHighSpeed_Object = MibTableColumn
bladeExpCardVpdHighSpeed = _BladeExpCardVpdHighSpeed_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 22),
    _BladeExpCardVpdHighSpeed_Type()
)
bladeExpCardVpdHighSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdHighSpeed.setStatus("deprecated")
_BladeExpCardVpdHardwareRevisionString_Type = OctetString
_BladeExpCardVpdHardwareRevisionString_Object = MibTableColumn
bladeExpCardVpdHardwareRevisionString = _BladeExpCardVpdHardwareRevisionString_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 5, 1, 23),
    _BladeExpCardVpdHardwareRevisionString_Type()
)
bladeExpCardVpdHardwareRevisionString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExpCardVpdHardwareRevisionString.setStatus("deprecated")
_BladeAndExpCardWwnGuidVpdTable_Object = MibTable
bladeAndExpCardWwnGuidVpdTable = _BladeAndExpCardWwnGuidVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7)
)
if mibBuilder.loadTexts:
    bladeAndExpCardWwnGuidVpdTable.setStatus("deprecated")
_BladeAndExpCardWwnGuidVpdEntry_Object = MibTableRow
bladeAndExpCardWwnGuidVpdEntry = _BladeAndExpCardWwnGuidVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1)
)
bladeAndExpCardWwnGuidVpdEntry.setIndexNames(
    (0, "CME-MIB", "bladeAndExpCardWwnGuidVpdIndex"),
)
if mibBuilder.loadTexts:
    bladeAndExpCardWwnGuidVpdEntry.setStatus("deprecated")
_BladeAndExpCardWwnGuidVpdIndex_Type = Integer32
_BladeAndExpCardWwnGuidVpdIndex_Object = MibTableColumn
bladeAndExpCardWwnGuidVpdIndex = _BladeAndExpCardWwnGuidVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 1),
    _BladeAndExpCardWwnGuidVpdIndex_Type()
)
bladeAndExpCardWwnGuidVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeAndExpCardWwnGuidVpdIndex.setStatus("deprecated")
_BladeAndExpCardWwnGuidVpdBayNumber_Type = OctetString
_BladeAndExpCardWwnGuidVpdBayNumber_Object = MibTableColumn
bladeAndExpCardWwnGuidVpdBayNumber = _BladeAndExpCardWwnGuidVpdBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 2),
    _BladeAndExpCardWwnGuidVpdBayNumber_Type()
)
bladeAndExpCardWwnGuidVpdBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeAndExpCardWwnGuidVpdBayNumber.setStatus("deprecated")
_BladeAndExpCardWwnGuidVpdName_Type = OctetString
_BladeAndExpCardWwnGuidVpdName_Object = MibTableColumn
bladeAndExpCardWwnGuidVpdName = _BladeAndExpCardWwnGuidVpdName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 3),
    _BladeAndExpCardWwnGuidVpdName_Type()
)
bladeAndExpCardWwnGuidVpdName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeAndExpCardWwnGuidVpdName.setStatus("deprecated")
_BladeAndExpCardWwnGuidVpdBladeBayNumber_Type = OctetString
_BladeAndExpCardWwnGuidVpdBladeBayNumber_Object = MibTableColumn
bladeAndExpCardWwnGuidVpdBladeBayNumber = _BladeAndExpCardWwnGuidVpdBladeBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 4),
    _BladeAndExpCardWwnGuidVpdBladeBayNumber_Type()
)
bladeAndExpCardWwnGuidVpdBladeBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeAndExpCardWwnGuidVpdBladeBayNumber.setStatus("deprecated")


class _BladeAndExpCardWwnGuidVpdType_Type(Integer32):
    """Custom type bladeAndExpCardWwnGuidVpdType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notAvailable", 0),
          ("wwn", 1),
          ("guid", 2),
          ("sas", 3))
    )


_BladeAndExpCardWwnGuidVpdType_Type.__name__ = "Integer32"
_BladeAndExpCardWwnGuidVpdType_Object = MibTableColumn
bladeAndExpCardWwnGuidVpdType = _BladeAndExpCardWwnGuidVpdType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 5),
    _BladeAndExpCardWwnGuidVpdType_Type()
)
bladeAndExpCardWwnGuidVpdType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeAndExpCardWwnGuidVpdType.setStatus("deprecated")
_BladeAndExpCardWwnGuidVpd1_Type = OctetString
_BladeAndExpCardWwnGuidVpd1_Object = MibTableColumn
bladeAndExpCardWwnGuidVpd1 = _BladeAndExpCardWwnGuidVpd1_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 6),
    _BladeAndExpCardWwnGuidVpd1_Type()
)
bladeAndExpCardWwnGuidVpd1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeAndExpCardWwnGuidVpd1.setStatus("deprecated")
_BladeAndExpCardWwnGuidVpd2_Type = OctetString
_BladeAndExpCardWwnGuidVpd2_Object = MibTableColumn
bladeAndExpCardWwnGuidVpd2 = _BladeAndExpCardWwnGuidVpd2_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 7),
    _BladeAndExpCardWwnGuidVpd2_Type()
)
bladeAndExpCardWwnGuidVpd2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeAndExpCardWwnGuidVpd2.setStatus("deprecated")
_BladeAndExpCardWwnGuidVpd3_Type = OctetString
_BladeAndExpCardWwnGuidVpd3_Object = MibTableColumn
bladeAndExpCardWwnGuidVpd3 = _BladeAndExpCardWwnGuidVpd3_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 8),
    _BladeAndExpCardWwnGuidVpd3_Type()
)
bladeAndExpCardWwnGuidVpd3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeAndExpCardWwnGuidVpd3.setStatus("deprecated")
_BladeAndExpCardWwnGuidVpd4_Type = OctetString
_BladeAndExpCardWwnGuidVpd4_Object = MibTableColumn
bladeAndExpCardWwnGuidVpd4 = _BladeAndExpCardWwnGuidVpd4_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 9),
    _BladeAndExpCardWwnGuidVpd4_Type()
)
bladeAndExpCardWwnGuidVpd4.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeAndExpCardWwnGuidVpd4.setStatus("deprecated")
_BladeAndExpCardWwnGuidVpd5_Type = OctetString
_BladeAndExpCardWwnGuidVpd5_Object = MibTableColumn
bladeAndExpCardWwnGuidVpd5 = _BladeAndExpCardWwnGuidVpd5_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 10),
    _BladeAndExpCardWwnGuidVpd5_Type()
)
bladeAndExpCardWwnGuidVpd5.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeAndExpCardWwnGuidVpd5.setStatus("deprecated")
_BladeAndExpCardWwnGuidVpd6_Type = OctetString
_BladeAndExpCardWwnGuidVpd6_Object = MibTableColumn
bladeAndExpCardWwnGuidVpd6 = _BladeAndExpCardWwnGuidVpd6_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 11),
    _BladeAndExpCardWwnGuidVpd6_Type()
)
bladeAndExpCardWwnGuidVpd6.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeAndExpCardWwnGuidVpd6.setStatus("deprecated")
_BladeAndExpCardWwnGuidVpd7_Type = OctetString
_BladeAndExpCardWwnGuidVpd7_Object = MibTableColumn
bladeAndExpCardWwnGuidVpd7 = _BladeAndExpCardWwnGuidVpd7_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 12),
    _BladeAndExpCardWwnGuidVpd7_Type()
)
bladeAndExpCardWwnGuidVpd7.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeAndExpCardWwnGuidVpd7.setStatus("deprecated")
_BladeAndExpCardWwnGuidVpd8_Type = OctetString
_BladeAndExpCardWwnGuidVpd8_Object = MibTableColumn
bladeAndExpCardWwnGuidVpd8 = _BladeAndExpCardWwnGuidVpd8_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 7, 1, 13),
    _BladeAndExpCardWwnGuidVpd8_Type()
)
bladeAndExpCardWwnGuidVpd8.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeAndExpCardWwnGuidVpd8.setStatus("deprecated")
_BladeManagementCardVpdTable_Object = MibTable
bladeManagementCardVpdTable = _BladeManagementCardVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8)
)
if mibBuilder.loadTexts:
    bladeManagementCardVpdTable.setStatus("deprecated")
_BladeManagementCardVpdEntry_Object = MibTableRow
bladeManagementCardVpdEntry = _BladeManagementCardVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1)
)
bladeManagementCardVpdEntry.setIndexNames(
    (0, "CME-MIB", "bladeManagementCardVpdIndex"),
)
if mibBuilder.loadTexts:
    bladeManagementCardVpdEntry.setStatus("deprecated")
_BladeManagementCardVpdIndex_Type = Integer32
_BladeManagementCardVpdIndex_Object = MibTableColumn
bladeManagementCardVpdIndex = _BladeManagementCardVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 1),
    _BladeManagementCardVpdIndex_Type()
)
bladeManagementCardVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementCardVpdIndex.setStatus("deprecated")
_BladeManagementCardVpdBayNumber_Type = OctetString
_BladeManagementCardVpdBayNumber_Object = MibTableColumn
bladeManagementCardVpdBayNumber = _BladeManagementCardVpdBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 2),
    _BladeManagementCardVpdBayNumber_Type()
)
bladeManagementCardVpdBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementCardVpdBayNumber.setStatus("deprecated")
_BladeManagementCardVpdManufacturingId_Type = OctetString
_BladeManagementCardVpdManufacturingId_Object = MibTableColumn
bladeManagementCardVpdManufacturingId = _BladeManagementCardVpdManufacturingId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 3),
    _BladeManagementCardVpdManufacturingId_Type()
)
bladeManagementCardVpdManufacturingId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementCardVpdManufacturingId.setStatus("deprecated")
_BladeManagementCardVpdFruNumber_Type = OctetString
_BladeManagementCardVpdFruNumber_Object = MibTableColumn
bladeManagementCardVpdFruNumber = _BladeManagementCardVpdFruNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 4),
    _BladeManagementCardVpdFruNumber_Type()
)
bladeManagementCardVpdFruNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementCardVpdFruNumber.setStatus("deprecated")
_BladeManagementCardVpdHardwareRevision_Type = Integer32
_BladeManagementCardVpdHardwareRevision_Object = MibTableColumn
bladeManagementCardVpdHardwareRevision = _BladeManagementCardVpdHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 5),
    _BladeManagementCardVpdHardwareRevision_Type()
)
bladeManagementCardVpdHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementCardVpdHardwareRevision.setStatus("deprecated")
_BladeManagementCardVpdSerialNumber_Type = OctetString
_BladeManagementCardVpdSerialNumber_Object = MibTableColumn
bladeManagementCardVpdSerialNumber = _BladeManagementCardVpdSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 6),
    _BladeManagementCardVpdSerialNumber_Type()
)
bladeManagementCardVpdSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementCardVpdSerialNumber.setStatus("deprecated")
_BladeManagementCardVpdMachineType_Type = OctetString
_BladeManagementCardVpdMachineType_Object = MibTableColumn
bladeManagementCardVpdMachineType = _BladeManagementCardVpdMachineType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 7),
    _BladeManagementCardVpdMachineType_Type()
)
bladeManagementCardVpdMachineType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementCardVpdMachineType.setStatus("deprecated")
_BladeManagementCardVpdUuid_Type = OctetString
_BladeManagementCardVpdUuid_Object = MibTableColumn
bladeManagementCardVpdUuid = _BladeManagementCardVpdUuid_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 8),
    _BladeManagementCardVpdUuid_Type()
)
bladeManagementCardVpdUuid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementCardVpdUuid.setStatus("deprecated")
_BladeManagementCardVpdManufDate_Type = OctetString
_BladeManagementCardVpdManufDate_Object = MibTableColumn
bladeManagementCardVpdManufDate = _BladeManagementCardVpdManufDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 9),
    _BladeManagementCardVpdManufDate_Type()
)
bladeManagementCardVpdManufDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementCardVpdManufDate.setStatus("deprecated")
_BladeManagementCardVpdPartNumber_Type = OctetString
_BladeManagementCardVpdPartNumber_Object = MibTableColumn
bladeManagementCardVpdPartNumber = _BladeManagementCardVpdPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 10),
    _BladeManagementCardVpdPartNumber_Type()
)
bladeManagementCardVpdPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementCardVpdPartNumber.setStatus("deprecated")
_BladeManagementCardVpdFruSerial_Type = OctetString
_BladeManagementCardVpdFruSerial_Object = MibTableColumn
bladeManagementCardVpdFruSerial = _BladeManagementCardVpdFruSerial_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 11),
    _BladeManagementCardVpdFruSerial_Type()
)
bladeManagementCardVpdFruSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementCardVpdFruSerial.setStatus("deprecated")
_BladeManagementCardVpdMachineModel_Type = OctetString
_BladeManagementCardVpdMachineModel_Object = MibTableColumn
bladeManagementCardVpdMachineModel = _BladeManagementCardVpdMachineModel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 12),
    _BladeManagementCardVpdMachineModel_Type()
)
bladeManagementCardVpdMachineModel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementCardVpdMachineModel.setStatus("deprecated")
_BladeManagementCardVpdManufacturingIDNumber_Type = OctetString
_BladeManagementCardVpdManufacturingIDNumber_Object = MibTableColumn
bladeManagementCardVpdManufacturingIDNumber = _BladeManagementCardVpdManufacturingIDNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 13),
    _BladeManagementCardVpdManufacturingIDNumber_Type()
)
bladeManagementCardVpdManufacturingIDNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementCardVpdManufacturingIDNumber.setStatus("deprecated")
_BladeManagementCardVpdProductId_Type = OctetString
_BladeManagementCardVpdProductId_Object = MibTableColumn
bladeManagementCardVpdProductId = _BladeManagementCardVpdProductId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 14),
    _BladeManagementCardVpdProductId_Type()
)
bladeManagementCardVpdProductId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementCardVpdProductId.setStatus("deprecated")
_BladeManagementCardVpdSubManufacturerId_Type = OctetString
_BladeManagementCardVpdSubManufacturerId_Object = MibTableColumn
bladeManagementCardVpdSubManufacturerId = _BladeManagementCardVpdSubManufacturerId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 15),
    _BladeManagementCardVpdSubManufacturerId_Type()
)
bladeManagementCardVpdSubManufacturerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementCardVpdSubManufacturerId.setStatus("deprecated")
_BladeManagementCardVpdClei_Type = OctetString
_BladeManagementCardVpdClei_Object = MibTableColumn
bladeManagementCardVpdClei = _BladeManagementCardVpdClei_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 16),
    _BladeManagementCardVpdClei_Type()
)
bladeManagementCardVpdClei.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementCardVpdClei.setStatus("deprecated")
_BladeManagementCardVpdHardwareRevisionString_Type = OctetString
_BladeManagementCardVpdHardwareRevisionString_Object = MibTableColumn
bladeManagementCardVpdHardwareRevisionString = _BladeManagementCardVpdHardwareRevisionString_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 4, 8, 1, 17),
    _BladeManagementCardVpdHardwareRevisionString_Type()
)
bladeManagementCardVpdHardwareRevisionString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeManagementCardVpdHardwareRevisionString.setStatus("deprecated")
_BladeFirmwareVpd_ObjectIdentity = ObjectIdentity
bladeFirmwareVpd = _BladeFirmwareVpd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5)
)
_BladeBiosVPDTable_Object = MibTable
bladeBiosVPDTable = _BladeBiosVPDTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1)
)
if mibBuilder.loadTexts:
    bladeBiosVPDTable.setStatus("deprecated")
_BladeBiosVPDEntry_Object = MibTableRow
bladeBiosVPDEntry = _BladeBiosVPDEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1)
)
bladeBiosVPDEntry.setIndexNames(
    (0, "CME-MIB", "bladeBiosVpdIndex"),
)
if mibBuilder.loadTexts:
    bladeBiosVPDEntry.setStatus("deprecated")
_BladeBiosVpdIndex_Type = Integer32
_BladeBiosVpdIndex_Object = MibTableColumn
bladeBiosVpdIndex = _BladeBiosVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 1),
    _BladeBiosVpdIndex_Type()
)
bladeBiosVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeBiosVpdIndex.setStatus("deprecated")


class _BladeBiosVpdId_Type(Integer32):
    """Custom type bladeBiosVpdId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_BladeBiosVpdId_Type.__name__ = "Integer32"
_BladeBiosVpdId_Object = MibTableColumn
bladeBiosVpdId = _BladeBiosVpdId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 2),
    _BladeBiosVpdId_Type()
)
bladeBiosVpdId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeBiosVpdId.setStatus("deprecated")


class _BladeBiosVpdExists_Type(Integer32):
    """Custom type bladeBiosVpdExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_BladeBiosVpdExists_Type.__name__ = "Integer32"
_BladeBiosVpdExists_Object = MibTableColumn
bladeBiosVpdExists = _BladeBiosVpdExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 3),
    _BladeBiosVpdExists_Type()
)
bladeBiosVpdExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeBiosVpdExists.setStatus("deprecated")


class _BladeBiosVpdPowerState_Type(Integer32):
    """Custom type bladeBiosVpdPowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("standby", 3),
          ("hibernate", 4))
    )


_BladeBiosVpdPowerState_Type.__name__ = "Integer32"
_BladeBiosVpdPowerState_Object = MibTableColumn
bladeBiosVpdPowerState = _BladeBiosVpdPowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 4),
    _BladeBiosVpdPowerState_Type()
)
bladeBiosVpdPowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeBiosVpdPowerState.setStatus("deprecated")
_BladeBiosVpdName_Type = OctetString
_BladeBiosVpdName_Object = MibTableColumn
bladeBiosVpdName = _BladeBiosVpdName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 5),
    _BladeBiosVpdName_Type()
)
bladeBiosVpdName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeBiosVpdName.setStatus("deprecated")
_BladeBiosVpdBuildId_Type = OctetString
_BladeBiosVpdBuildId_Object = MibTableColumn
bladeBiosVpdBuildId = _BladeBiosVpdBuildId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 6),
    _BladeBiosVpdBuildId_Type()
)
bladeBiosVpdBuildId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeBiosVpdBuildId.setStatus("deprecated")
_BladeBiosVpdRevision_Type = OctetString
_BladeBiosVpdRevision_Object = MibTableColumn
bladeBiosVpdRevision = _BladeBiosVpdRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 7),
    _BladeBiosVpdRevision_Type()
)
bladeBiosVpdRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeBiosVpdRevision.setStatus("deprecated")
_BladeBiosVpdDate_Type = OctetString
_BladeBiosVpdDate_Object = MibTableColumn
bladeBiosVpdDate = _BladeBiosVpdDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 8),
    _BladeBiosVpdDate_Type()
)
bladeBiosVpdDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeBiosVpdDate.setStatus("deprecated")
_BladeBiosVpdLevelStatus_Type = OctetString
_BladeBiosVpdLevelStatus_Object = MibTableColumn
bladeBiosVpdLevelStatus = _BladeBiosVpdLevelStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 1, 1, 9),
    _BladeBiosVpdLevelStatus_Type()
)
bladeBiosVpdLevelStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeBiosVpdLevelStatus.setStatus("deprecated")
_BladeDiagsVPDTable_Object = MibTable
bladeDiagsVPDTable = _BladeDiagsVPDTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2)
)
if mibBuilder.loadTexts:
    bladeDiagsVPDTable.setStatus("deprecated")
_BladeDiagsVPDEntry_Object = MibTableRow
bladeDiagsVPDEntry = _BladeDiagsVPDEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1)
)
bladeDiagsVPDEntry.setIndexNames(
    (0, "CME-MIB", "bladeDiagsVpdIndex"),
)
if mibBuilder.loadTexts:
    bladeDiagsVPDEntry.setStatus("deprecated")
_BladeDiagsVpdIndex_Type = Integer32
_BladeDiagsVpdIndex_Object = MibTableColumn
bladeDiagsVpdIndex = _BladeDiagsVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 1),
    _BladeDiagsVpdIndex_Type()
)
bladeDiagsVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDiagsVpdIndex.setStatus("deprecated")


class _BladeDiagsVpdId_Type(Integer32):
    """Custom type bladeDiagsVpdId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_BladeDiagsVpdId_Type.__name__ = "Integer32"
_BladeDiagsVpdId_Object = MibTableColumn
bladeDiagsVpdId = _BladeDiagsVpdId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 2),
    _BladeDiagsVpdId_Type()
)
bladeDiagsVpdId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDiagsVpdId.setStatus("deprecated")


class _BladeDiagsVpdExists_Type(Integer32):
    """Custom type bladeDiagsVpdExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_BladeDiagsVpdExists_Type.__name__ = "Integer32"
_BladeDiagsVpdExists_Object = MibTableColumn
bladeDiagsVpdExists = _BladeDiagsVpdExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 3),
    _BladeDiagsVpdExists_Type()
)
bladeDiagsVpdExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDiagsVpdExists.setStatus("deprecated")


class _BladeDiagsVpdPowerState_Type(Integer32):
    """Custom type bladeDiagsVpdPowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("standby", 3),
          ("hibernate", 4))
    )


_BladeDiagsVpdPowerState_Type.__name__ = "Integer32"
_BladeDiagsVpdPowerState_Object = MibTableColumn
bladeDiagsVpdPowerState = _BladeDiagsVpdPowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 4),
    _BladeDiagsVpdPowerState_Type()
)
bladeDiagsVpdPowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDiagsVpdPowerState.setStatus("deprecated")
_BladeDiagsVpdName_Type = OctetString
_BladeDiagsVpdName_Object = MibTableColumn
bladeDiagsVpdName = _BladeDiagsVpdName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 5),
    _BladeDiagsVpdName_Type()
)
bladeDiagsVpdName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDiagsVpdName.setStatus("deprecated")
_BladeDiagsVpdBuildId_Type = OctetString
_BladeDiagsVpdBuildId_Object = MibTableColumn
bladeDiagsVpdBuildId = _BladeDiagsVpdBuildId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 6),
    _BladeDiagsVpdBuildId_Type()
)
bladeDiagsVpdBuildId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDiagsVpdBuildId.setStatus("deprecated")
_BladeDiagsVpdRevision_Type = OctetString
_BladeDiagsVpdRevision_Object = MibTableColumn
bladeDiagsVpdRevision = _BladeDiagsVpdRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 7),
    _BladeDiagsVpdRevision_Type()
)
bladeDiagsVpdRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDiagsVpdRevision.setStatus("deprecated")
_BladeDiagsVpdDate_Type = OctetString
_BladeDiagsVpdDate_Object = MibTableColumn
bladeDiagsVpdDate = _BladeDiagsVpdDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 8),
    _BladeDiagsVpdDate_Type()
)
bladeDiagsVpdDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDiagsVpdDate.setStatus("deprecated")
_BladeDiagsVpdLevelStatus_Type = OctetString
_BladeDiagsVpdLevelStatus_Object = MibTableColumn
bladeDiagsVpdLevelStatus = _BladeDiagsVpdLevelStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 2, 1, 9),
    _BladeDiagsVpdLevelStatus_Type()
)
bladeDiagsVpdLevelStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeDiagsVpdLevelStatus.setStatus("deprecated")
_BladeSysMgmtProcVPDTable_Object = MibTable
bladeSysMgmtProcVPDTable = _BladeSysMgmtProcVPDTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3)
)
if mibBuilder.loadTexts:
    bladeSysMgmtProcVPDTable.setStatus("deprecated")
_BladeSysMgmtProcVPDEntry_Object = MibTableRow
bladeSysMgmtProcVPDEntry = _BladeSysMgmtProcVPDEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1)
)
bladeSysMgmtProcVPDEntry.setIndexNames(
    (0, "CME-MIB", "bladeSysMgmtProcVpdIndex"),
)
if mibBuilder.loadTexts:
    bladeSysMgmtProcVPDEntry.setStatus("deprecated")
_BladeSysMgmtProcVpdIndex_Type = Integer32
_BladeSysMgmtProcVpdIndex_Object = MibTableColumn
bladeSysMgmtProcVpdIndex = _BladeSysMgmtProcVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1, 1),
    _BladeSysMgmtProcVpdIndex_Type()
)
bladeSysMgmtProcVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSysMgmtProcVpdIndex.setStatus("deprecated")


class _BladeSysMgmtProcVpdId_Type(Integer32):
    """Custom type bladeSysMgmtProcVpdId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_BladeSysMgmtProcVpdId_Type.__name__ = "Integer32"
_BladeSysMgmtProcVpdId_Object = MibTableColumn
bladeSysMgmtProcVpdId = _BladeSysMgmtProcVpdId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1, 2),
    _BladeSysMgmtProcVpdId_Type()
)
bladeSysMgmtProcVpdId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSysMgmtProcVpdId.setStatus("deprecated")


class _BladeSysMgmtProcVpdExists_Type(Integer32):
    """Custom type bladeSysMgmtProcVpdExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_BladeSysMgmtProcVpdExists_Type.__name__ = "Integer32"
_BladeSysMgmtProcVpdExists_Object = MibTableColumn
bladeSysMgmtProcVpdExists = _BladeSysMgmtProcVpdExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1, 3),
    _BladeSysMgmtProcVpdExists_Type()
)
bladeSysMgmtProcVpdExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSysMgmtProcVpdExists.setStatus("deprecated")


class _BladeSysMgmtProcVpdPowerState_Type(Integer32):
    """Custom type bladeSysMgmtProcVpdPowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("standby", 3),
          ("hibernate", 4))
    )


_BladeSysMgmtProcVpdPowerState_Type.__name__ = "Integer32"
_BladeSysMgmtProcVpdPowerState_Object = MibTableColumn
bladeSysMgmtProcVpdPowerState = _BladeSysMgmtProcVpdPowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1, 4),
    _BladeSysMgmtProcVpdPowerState_Type()
)
bladeSysMgmtProcVpdPowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSysMgmtProcVpdPowerState.setStatus("deprecated")
_BladeSysMgmtProcVpdName_Type = OctetString
_BladeSysMgmtProcVpdName_Object = MibTableColumn
bladeSysMgmtProcVpdName = _BladeSysMgmtProcVpdName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1, 5),
    _BladeSysMgmtProcVpdName_Type()
)
bladeSysMgmtProcVpdName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSysMgmtProcVpdName.setStatus("deprecated")
_BladeSysMgmtProcVpdBuildId_Type = OctetString
_BladeSysMgmtProcVpdBuildId_Object = MibTableColumn
bladeSysMgmtProcVpdBuildId = _BladeSysMgmtProcVpdBuildId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1, 6),
    _BladeSysMgmtProcVpdBuildId_Type()
)
bladeSysMgmtProcVpdBuildId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSysMgmtProcVpdBuildId.setStatus("deprecated")
_BladeSysMgmtProcVpdRevision_Type = OctetString
_BladeSysMgmtProcVpdRevision_Object = MibTableColumn
bladeSysMgmtProcVpdRevision = _BladeSysMgmtProcVpdRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1, 7),
    _BladeSysMgmtProcVpdRevision_Type()
)
bladeSysMgmtProcVpdRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSysMgmtProcVpdRevision.setStatus("deprecated")
_BladeSysMgmtProcVpdLevelStatus_Type = OctetString
_BladeSysMgmtProcVpdLevelStatus_Object = MibTableColumn
bladeSysMgmtProcVpdLevelStatus = _BladeSysMgmtProcVpdLevelStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 5, 3, 1, 8),
    _BladeSysMgmtProcVpdLevelStatus_Type()
)
bladeSysMgmtProcVpdLevelStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSysMgmtProcVpdLevelStatus.setStatus("deprecated")
_SmHardwareVpd_ObjectIdentity = ObjectIdentity
smHardwareVpd = _SmHardwareVpd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6)
)
_SmHardwareVpdTable_Object = MibTable
smHardwareVpdTable = _SmHardwareVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1)
)
if mibBuilder.loadTexts:
    smHardwareVpdTable.setStatus("deprecated")
_SmHardwareVpdEntry_Object = MibTableRow
smHardwareVpdEntry = _SmHardwareVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1)
)
smHardwareVpdEntry.setIndexNames(
    (0, "CME-MIB", "smHardwareVpdIndex"),
)
if mibBuilder.loadTexts:
    smHardwareVpdEntry.setStatus("deprecated")
_SmHardwareVpdIndex_Type = Integer32
_SmHardwareVpdIndex_Object = MibTableColumn
smHardwareVpdIndex = _SmHardwareVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 1),
    _SmHardwareVpdIndex_Type()
)
smHardwareVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smHardwareVpdIndex.setStatus("deprecated")
_SmHardwareVpdBayNumber_Type = OctetString
_SmHardwareVpdBayNumber_Object = MibTableColumn
smHardwareVpdBayNumber = _SmHardwareVpdBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 2),
    _SmHardwareVpdBayNumber_Type()
)
smHardwareVpdBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smHardwareVpdBayNumber.setStatus("deprecated")
_SmHardwareVpdManufacturingId_Type = OctetString
_SmHardwareVpdManufacturingId_Object = MibTableColumn
smHardwareVpdManufacturingId = _SmHardwareVpdManufacturingId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 3),
    _SmHardwareVpdManufacturingId_Type()
)
smHardwareVpdManufacturingId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smHardwareVpdManufacturingId.setStatus("deprecated")
_SmHardwareVpdFruNumber_Type = OctetString
_SmHardwareVpdFruNumber_Object = MibTableColumn
smHardwareVpdFruNumber = _SmHardwareVpdFruNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 4),
    _SmHardwareVpdFruNumber_Type()
)
smHardwareVpdFruNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smHardwareVpdFruNumber.setStatus("deprecated")
_SmHardwareVpdHardwareRevision_Type = Integer32
_SmHardwareVpdHardwareRevision_Object = MibTableColumn
smHardwareVpdHardwareRevision = _SmHardwareVpdHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 5),
    _SmHardwareVpdHardwareRevision_Type()
)
smHardwareVpdHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smHardwareVpdHardwareRevision.setStatus("deprecated")
_SmHardwareVpdUuid_Type = OctetString
_SmHardwareVpdUuid_Object = MibTableColumn
smHardwareVpdUuid = _SmHardwareVpdUuid_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 8),
    _SmHardwareVpdUuid_Type()
)
smHardwareVpdUuid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smHardwareVpdUuid.setStatus("deprecated")
_SmHardwareVpdManufDate_Type = OctetString
_SmHardwareVpdManufDate_Object = MibTableColumn
smHardwareVpdManufDate = _SmHardwareVpdManufDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 9),
    _SmHardwareVpdManufDate_Type()
)
smHardwareVpdManufDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smHardwareVpdManufDate.setStatus("deprecated")
_SmHardwareVpdPartNumber_Type = OctetString
_SmHardwareVpdPartNumber_Object = MibTableColumn
smHardwareVpdPartNumber = _SmHardwareVpdPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 10),
    _SmHardwareVpdPartNumber_Type()
)
smHardwareVpdPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smHardwareVpdPartNumber.setStatus("deprecated")
_SmHardwareVpdFruSerial_Type = OctetString
_SmHardwareVpdFruSerial_Object = MibTableColumn
smHardwareVpdFruSerial = _SmHardwareVpdFruSerial_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 11),
    _SmHardwareVpdFruSerial_Type()
)
smHardwareVpdFruSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smHardwareVpdFruSerial.setStatus("deprecated")
_SmHardwareVpdManufacturingIDNumber_Type = OctetString
_SmHardwareVpdManufacturingIDNumber_Object = MibTableColumn
smHardwareVpdManufacturingIDNumber = _SmHardwareVpdManufacturingIDNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 12),
    _SmHardwareVpdManufacturingIDNumber_Type()
)
smHardwareVpdManufacturingIDNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smHardwareVpdManufacturingIDNumber.setStatus("deprecated")
_SmHardwareVpdProductId_Type = OctetString
_SmHardwareVpdProductId_Object = MibTableColumn
smHardwareVpdProductId = _SmHardwareVpdProductId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 13),
    _SmHardwareVpdProductId_Type()
)
smHardwareVpdProductId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smHardwareVpdProductId.setStatus("deprecated")
_SmHardwareVpdSubManufacturerId_Type = OctetString
_SmHardwareVpdSubManufacturerId_Object = MibTableColumn
smHardwareVpdSubManufacturerId = _SmHardwareVpdSubManufacturerId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 14),
    _SmHardwareVpdSubManufacturerId_Type()
)
smHardwareVpdSubManufacturerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smHardwareVpdSubManufacturerId.setStatus("deprecated")
_SmHardwareVpdClei_Type = OctetString
_SmHardwareVpdClei_Object = MibTableColumn
smHardwareVpdClei = _SmHardwareVpdClei_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 15),
    _SmHardwareVpdClei_Type()
)
smHardwareVpdClei.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smHardwareVpdClei.setStatus("deprecated")
_SmHardwareVpdWwnGuid_Type = OctetString
_SmHardwareVpdWwnGuid_Object = MibTableColumn
smHardwareVpdWwnGuid = _SmHardwareVpdWwnGuid_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 16),
    _SmHardwareVpdWwnGuid_Type()
)
smHardwareVpdWwnGuid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smHardwareVpdWwnGuid.setStatus("deprecated")
_SmHardwareVpdWwnGuidType_Type = OctetString
_SmHardwareVpdWwnGuidType_Object = MibTableColumn
smHardwareVpdWwnGuidType = _SmHardwareVpdWwnGuidType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 17),
    _SmHardwareVpdWwnGuidType_Type()
)
smHardwareVpdWwnGuidType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smHardwareVpdWwnGuidType.setStatus("deprecated")
_SmHardwareVpdWidth_Type = Integer32
_SmHardwareVpdWidth_Object = MibTableColumn
smHardwareVpdWidth = _SmHardwareVpdWidth_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 18),
    _SmHardwareVpdWidth_Type()
)
smHardwareVpdWidth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smHardwareVpdWidth.setStatus("deprecated")
_SmHardwareVpdHardwareRevisionString_Type = OctetString
_SmHardwareVpdHardwareRevisionString_Object = MibTableColumn
smHardwareVpdHardwareRevisionString = _SmHardwareVpdHardwareRevisionString_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 6, 1, 1, 20),
    _SmHardwareVpdHardwareRevisionString_Type()
)
smHardwareVpdHardwareRevisionString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smHardwareVpdHardwareRevisionString.setStatus("deprecated")
_SmFirmwareVpd_ObjectIdentity = ObjectIdentity
smFirmwareVpd = _SmFirmwareVpd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7)
)
_SmMainAppVpdTable_Object = MibTable
smMainAppVpdTable = _SmMainAppVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1)
)
if mibBuilder.loadTexts:
    smMainAppVpdTable.setStatus("deprecated")
_SmMainAppVpdEntry_Object = MibTableRow
smMainAppVpdEntry = _SmMainAppVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1)
)
smMainAppVpdEntry.setIndexNames(
    (0, "CME-MIB", "smMainAppVpdIndex"),
)
if mibBuilder.loadTexts:
    smMainAppVpdEntry.setStatus("deprecated")
_SmMainAppVpdIndex_Type = Integer32
_SmMainAppVpdIndex_Object = MibTableColumn
smMainAppVpdIndex = _SmMainAppVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 1),
    _SmMainAppVpdIndex_Type()
)
smMainAppVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smMainAppVpdIndex.setStatus("deprecated")


class _SmMainAppVpdId_Type(Integer32):
    """Custom type smMainAppVpdId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("module1", 1),
          ("module2", 2),
          ("module3", 3),
          ("module4", 4),
          ("module5", 5),
          ("module6", 6),
          ("module7", 7),
          ("module8", 8),
          ("module9", 9),
          ("module10", 10))
    )


_SmMainAppVpdId_Type.__name__ = "Integer32"
_SmMainAppVpdId_Object = MibTableColumn
smMainAppVpdId = _SmMainAppVpdId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 2),
    _SmMainAppVpdId_Type()
)
smMainAppVpdId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smMainAppVpdId.setStatus("deprecated")


class _SmMainAppVpdExists_Type(Integer32):
    """Custom type smMainAppVpdExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_SmMainAppVpdExists_Type.__name__ = "Integer32"
_SmMainAppVpdExists_Object = MibTableColumn
smMainAppVpdExists = _SmMainAppVpdExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 3),
    _SmMainAppVpdExists_Type()
)
smMainAppVpdExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smMainAppVpdExists.setStatus("deprecated")


class _SmMainAppVpdSwitchType_Type(Integer32):
    """Custom type smMainAppVpdSwitchType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              20,
              30,
              40)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("ethernet", 1),
          ("fibre", 2),
          ("opm", 3),
          ("serialCM", 4),
          ("copperPassThrough", 5),
          ("infiniband", 6),
          ("highSpeed", 20),
          ("passThrough", 30),
          ("sas", 40))
    )


_SmMainAppVpdSwitchType_Type.__name__ = "Integer32"
_SmMainAppVpdSwitchType_Object = MibTableColumn
smMainAppVpdSwitchType = _SmMainAppVpdSwitchType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 4),
    _SmMainAppVpdSwitchType_Type()
)
smMainAppVpdSwitchType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smMainAppVpdSwitchType.setStatus("deprecated")
_SmMainApp1VpdBuildId_Type = OctetString
_SmMainApp1VpdBuildId_Object = MibTableColumn
smMainApp1VpdBuildId = _SmMainApp1VpdBuildId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 5),
    _SmMainApp1VpdBuildId_Type()
)
smMainApp1VpdBuildId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smMainApp1VpdBuildId.setStatus("deprecated")
_SmMainApp1VpdBuildDate_Type = OctetString
_SmMainApp1VpdBuildDate_Object = MibTableColumn
smMainApp1VpdBuildDate = _SmMainApp1VpdBuildDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 6),
    _SmMainApp1VpdBuildDate_Type()
)
smMainApp1VpdBuildDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smMainApp1VpdBuildDate.setStatus("deprecated")
_SmMainApp1VpdRevisionNumber_Type = OctetString
_SmMainApp1VpdRevisionNumber_Object = MibTableColumn
smMainApp1VpdRevisionNumber = _SmMainApp1VpdRevisionNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 7),
    _SmMainApp1VpdRevisionNumber_Type()
)
smMainApp1VpdRevisionNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smMainApp1VpdRevisionNumber.setStatus("deprecated")
_SmMainApp2VpdBuildId_Type = OctetString
_SmMainApp2VpdBuildId_Object = MibTableColumn
smMainApp2VpdBuildId = _SmMainApp2VpdBuildId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 8),
    _SmMainApp2VpdBuildId_Type()
)
smMainApp2VpdBuildId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smMainApp2VpdBuildId.setStatus("deprecated")
_SmMainApp2VpdBuildDate_Type = OctetString
_SmMainApp2VpdBuildDate_Object = MibTableColumn
smMainApp2VpdBuildDate = _SmMainApp2VpdBuildDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 9),
    _SmMainApp2VpdBuildDate_Type()
)
smMainApp2VpdBuildDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smMainApp2VpdBuildDate.setStatus("deprecated")
_SmMainApp2VpdRevisionNumber_Type = OctetString
_SmMainApp2VpdRevisionNumber_Object = MibTableColumn
smMainApp2VpdRevisionNumber = _SmMainApp2VpdRevisionNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 10),
    _SmMainApp2VpdRevisionNumber_Type()
)
smMainApp2VpdRevisionNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smMainApp2VpdRevisionNumber.setStatus("deprecated")
_SmMainApp3VpdBuildId_Type = OctetString
_SmMainApp3VpdBuildId_Object = MibTableColumn
smMainApp3VpdBuildId = _SmMainApp3VpdBuildId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 11),
    _SmMainApp3VpdBuildId_Type()
)
smMainApp3VpdBuildId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smMainApp3VpdBuildId.setStatus("deprecated")
_SmMainApp3VpdBuildDate_Type = OctetString
_SmMainApp3VpdBuildDate_Object = MibTableColumn
smMainApp3VpdBuildDate = _SmMainApp3VpdBuildDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 12),
    _SmMainApp3VpdBuildDate_Type()
)
smMainApp3VpdBuildDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smMainApp3VpdBuildDate.setStatus("deprecated")
_SmMainApp3VpdRevisionNumber_Type = OctetString
_SmMainApp3VpdRevisionNumber_Object = MibTableColumn
smMainApp3VpdRevisionNumber = _SmMainApp3VpdRevisionNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 13),
    _SmMainApp3VpdRevisionNumber_Type()
)
smMainApp3VpdRevisionNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smMainApp3VpdRevisionNumber.setStatus("deprecated")


class _SmMainAppVpdSwitchSubType_Type(Integer32):
    """Custom type smMainAppVpdSwitchSubType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("ethernet", 1),
          ("fibre", 2),
          ("infiniband", 6),
          ("sas", 7),
          ("raidsas", 8),
          ("icpm", 9))
    )


_SmMainAppVpdSwitchSubType_Type.__name__ = "Integer32"
_SmMainAppVpdSwitchSubType_Object = MibTableColumn
smMainAppVpdSwitchSubType = _SmMainAppVpdSwitchSubType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 1, 1, 20),
    _SmMainAppVpdSwitchSubType_Type()
)
smMainAppVpdSwitchSubType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smMainAppVpdSwitchSubType.setStatus("deprecated")
_SmBootRomVpdTable_Object = MibTable
smBootRomVpdTable = _SmBootRomVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2)
)
if mibBuilder.loadTexts:
    smBootRomVpdTable.setStatus("deprecated")
_SmBootRomVpdEntry_Object = MibTableRow
smBootRomVpdEntry = _SmBootRomVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1)
)
smBootRomVpdEntry.setIndexNames(
    (0, "CME-MIB", "smBootRomVpdIndex"),
)
if mibBuilder.loadTexts:
    smBootRomVpdEntry.setStatus("deprecated")
_SmBootRomVpdIndex_Type = Integer32
_SmBootRomVpdIndex_Object = MibTableColumn
smBootRomVpdIndex = _SmBootRomVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 1),
    _SmBootRomVpdIndex_Type()
)
smBootRomVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smBootRomVpdIndex.setStatus("deprecated")


class _SmBootRomVpdId_Type(Integer32):
    """Custom type smBootRomVpdId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("module1", 1),
          ("module2", 2),
          ("module3", 3),
          ("module4", 4),
          ("module5", 5),
          ("module6", 6),
          ("module7", 7),
          ("module8", 8),
          ("module9", 9),
          ("module10", 10))
    )


_SmBootRomVpdId_Type.__name__ = "Integer32"
_SmBootRomVpdId_Object = MibTableColumn
smBootRomVpdId = _SmBootRomVpdId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 2),
    _SmBootRomVpdId_Type()
)
smBootRomVpdId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smBootRomVpdId.setStatus("deprecated")


class _SmBootRomVpdExists_Type(Integer32):
    """Custom type smBootRomVpdExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_SmBootRomVpdExists_Type.__name__ = "Integer32"
_SmBootRomVpdExists_Object = MibTableColumn
smBootRomVpdExists = _SmBootRomVpdExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 3),
    _SmBootRomVpdExists_Type()
)
smBootRomVpdExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smBootRomVpdExists.setStatus("deprecated")


class _SmBootRomVpdSwitchType_Type(Integer32):
    """Custom type smBootRomVpdSwitchType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              20,
              30,
              40)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("ethernet", 1),
          ("fibre", 2),
          ("opm", 3),
          ("serialCM", 4),
          ("copperPassThrough", 5),
          ("infiniband", 6),
          ("highSpeed", 20),
          ("passThrough", 30),
          ("sas", 40))
    )


_SmBootRomVpdSwitchType_Type.__name__ = "Integer32"
_SmBootRomVpdSwitchType_Object = MibTableColumn
smBootRomVpdSwitchType = _SmBootRomVpdSwitchType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 4),
    _SmBootRomVpdSwitchType_Type()
)
smBootRomVpdSwitchType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smBootRomVpdSwitchType.setStatus("deprecated")
_SmBootRomVpdBuildId_Type = OctetString
_SmBootRomVpdBuildId_Object = MibTableColumn
smBootRomVpdBuildId = _SmBootRomVpdBuildId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 5),
    _SmBootRomVpdBuildId_Type()
)
smBootRomVpdBuildId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smBootRomVpdBuildId.setStatus("deprecated")
_SmBootRomVpdBuildDate_Type = OctetString
_SmBootRomVpdBuildDate_Object = MibTableColumn
smBootRomVpdBuildDate = _SmBootRomVpdBuildDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 6),
    _SmBootRomVpdBuildDate_Type()
)
smBootRomVpdBuildDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smBootRomVpdBuildDate.setStatus("deprecated")
_SmBootRomVpdRevisionNumber_Type = OctetString
_SmBootRomVpdRevisionNumber_Object = MibTableColumn
smBootRomVpdRevisionNumber = _SmBootRomVpdRevisionNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 7),
    _SmBootRomVpdRevisionNumber_Type()
)
smBootRomVpdRevisionNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smBootRomVpdRevisionNumber.setStatus("deprecated")


class _SmBootRomVpdSwitchSubType_Type(Integer32):
    """Custom type smBootRomVpdSwitchSubType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("ethernet", 1),
          ("fibre", 2),
          ("infiniband", 6),
          ("sas", 7),
          ("raidsas", 8),
          ("icpm", 9))
    )


_SmBootRomVpdSwitchSubType_Type.__name__ = "Integer32"
_SmBootRomVpdSwitchSubType_Object = MibTableColumn
smBootRomVpdSwitchSubType = _SmBootRomVpdSwitchSubType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 7, 2, 1, 8),
    _SmBootRomVpdSwitchSubType_Type()
)
smBootRomVpdSwitchSubType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smBootRomVpdSwitchSubType.setStatus("deprecated")
_PmHardwareVpd_ObjectIdentity = ObjectIdentity
pmHardwareVpd = _PmHardwareVpd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8)
)
_PmHardwareVpdTable_Object = MibTable
pmHardwareVpdTable = _PmHardwareVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1)
)
if mibBuilder.loadTexts:
    pmHardwareVpdTable.setStatus("deprecated")
_PmHardwareVpdEntry_Object = MibTableRow
pmHardwareVpdEntry = _PmHardwareVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1)
)
pmHardwareVpdEntry.setIndexNames(
    (0, "CME-MIB", "pmHardwareVpdIndex"),
)
if mibBuilder.loadTexts:
    pmHardwareVpdEntry.setStatus("deprecated")
_PmHardwareVpdIndex_Type = Integer32
_PmHardwareVpdIndex_Object = MibTableColumn
pmHardwareVpdIndex = _PmHardwareVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 1),
    _PmHardwareVpdIndex_Type()
)
pmHardwareVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmHardwareVpdIndex.setStatus("deprecated")
_PmHardwareVpdBayNumber_Type = OctetString
_PmHardwareVpdBayNumber_Object = MibTableColumn
pmHardwareVpdBayNumber = _PmHardwareVpdBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 2),
    _PmHardwareVpdBayNumber_Type()
)
pmHardwareVpdBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmHardwareVpdBayNumber.setStatus("deprecated")
_PmHardwareVpdManufacturingId_Type = OctetString
_PmHardwareVpdManufacturingId_Object = MibTableColumn
pmHardwareVpdManufacturingId = _PmHardwareVpdManufacturingId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 3),
    _PmHardwareVpdManufacturingId_Type()
)
pmHardwareVpdManufacturingId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmHardwareVpdManufacturingId.setStatus("deprecated")
_PmHardwareVpdFruNumber_Type = OctetString
_PmHardwareVpdFruNumber_Object = MibTableColumn
pmHardwareVpdFruNumber = _PmHardwareVpdFruNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 4),
    _PmHardwareVpdFruNumber_Type()
)
pmHardwareVpdFruNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmHardwareVpdFruNumber.setStatus("deprecated")
_PmHardwareVpdHardwareRevision_Type = Integer32
_PmHardwareVpdHardwareRevision_Object = MibTableColumn
pmHardwareVpdHardwareRevision = _PmHardwareVpdHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 5),
    _PmHardwareVpdHardwareRevision_Type()
)
pmHardwareVpdHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmHardwareVpdHardwareRevision.setStatus("deprecated")
_PmHardwareVpdUuid_Type = OctetString
_PmHardwareVpdUuid_Object = MibTableColumn
pmHardwareVpdUuid = _PmHardwareVpdUuid_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 8),
    _PmHardwareVpdUuid_Type()
)
pmHardwareVpdUuid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmHardwareVpdUuid.setStatus("deprecated")
_PmHardwareVpdManufDate_Type = OctetString
_PmHardwareVpdManufDate_Object = MibTableColumn
pmHardwareVpdManufDate = _PmHardwareVpdManufDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 9),
    _PmHardwareVpdManufDate_Type()
)
pmHardwareVpdManufDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmHardwareVpdManufDate.setStatus("deprecated")
_PmHardwareVpdPartNumber_Type = OctetString
_PmHardwareVpdPartNumber_Object = MibTableColumn
pmHardwareVpdPartNumber = _PmHardwareVpdPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 10),
    _PmHardwareVpdPartNumber_Type()
)
pmHardwareVpdPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmHardwareVpdPartNumber.setStatus("deprecated")
_PmHardwareVpdFruSerial_Type = OctetString
_PmHardwareVpdFruSerial_Object = MibTableColumn
pmHardwareVpdFruSerial = _PmHardwareVpdFruSerial_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 11),
    _PmHardwareVpdFruSerial_Type()
)
pmHardwareVpdFruSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmHardwareVpdFruSerial.setStatus("deprecated")
_PmHardwareVpdManufacturingIDNumber_Type = OctetString
_PmHardwareVpdManufacturingIDNumber_Object = MibTableColumn
pmHardwareVpdManufacturingIDNumber = _PmHardwareVpdManufacturingIDNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 12),
    _PmHardwareVpdManufacturingIDNumber_Type()
)
pmHardwareVpdManufacturingIDNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmHardwareVpdManufacturingIDNumber.setStatus("deprecated")
_PmHardwareVpdProductId_Type = OctetString
_PmHardwareVpdProductId_Object = MibTableColumn
pmHardwareVpdProductId = _PmHardwareVpdProductId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 13),
    _PmHardwareVpdProductId_Type()
)
pmHardwareVpdProductId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmHardwareVpdProductId.setStatus("deprecated")
_PmHardwareVpdSubManufacturerId_Type = OctetString
_PmHardwareVpdSubManufacturerId_Object = MibTableColumn
pmHardwareVpdSubManufacturerId = _PmHardwareVpdSubManufacturerId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 14),
    _PmHardwareVpdSubManufacturerId_Type()
)
pmHardwareVpdSubManufacturerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmHardwareVpdSubManufacturerId.setStatus("deprecated")
_PmHardwareVpdClei_Type = OctetString
_PmHardwareVpdClei_Object = MibTableColumn
pmHardwareVpdClei = _PmHardwareVpdClei_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 15),
    _PmHardwareVpdClei_Type()
)
pmHardwareVpdClei.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmHardwareVpdClei.setStatus("deprecated")
_PmHardwareVpdHardwareRevisionString_Type = OctetString
_PmHardwareVpdHardwareRevisionString_Object = MibTableColumn
pmHardwareVpdHardwareRevisionString = _PmHardwareVpdHardwareRevisionString_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 8, 1, 1, 16),
    _PmHardwareVpdHardwareRevisionString_Type()
)
pmHardwareVpdHardwareRevisionString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmHardwareVpdHardwareRevisionString.setStatus("deprecated")
_RearLEDCardHardwareVpd_ObjectIdentity = ObjectIdentity
rearLEDCardHardwareVpd = _RearLEDCardHardwareVpd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9)
)
_RearLEDCardHardwareVpdManufacturingId_Type = OctetString
_RearLEDCardHardwareVpdManufacturingId_Object = MibScalar
rearLEDCardHardwareVpdManufacturingId = _RearLEDCardHardwareVpdManufacturingId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 3),
    _RearLEDCardHardwareVpdManufacturingId_Type()
)
rearLEDCardHardwareVpdManufacturingId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rearLEDCardHardwareVpdManufacturingId.setStatus("deprecated")
_RearLEDCardHardwareVpdFruNumber_Type = OctetString
_RearLEDCardHardwareVpdFruNumber_Object = MibScalar
rearLEDCardHardwareVpdFruNumber = _RearLEDCardHardwareVpdFruNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 4),
    _RearLEDCardHardwareVpdFruNumber_Type()
)
rearLEDCardHardwareVpdFruNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rearLEDCardHardwareVpdFruNumber.setStatus("deprecated")
_RearLEDCardHardwareVpdHardwareRevision_Type = Integer32
_RearLEDCardHardwareVpdHardwareRevision_Object = MibScalar
rearLEDCardHardwareVpdHardwareRevision = _RearLEDCardHardwareVpdHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 5),
    _RearLEDCardHardwareVpdHardwareRevision_Type()
)
rearLEDCardHardwareVpdHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rearLEDCardHardwareVpdHardwareRevision.setStatus("deprecated")
_RearLEDCardHardwareVpdUuid_Type = OctetString
_RearLEDCardHardwareVpdUuid_Object = MibScalar
rearLEDCardHardwareVpdUuid = _RearLEDCardHardwareVpdUuid_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 8),
    _RearLEDCardHardwareVpdUuid_Type()
)
rearLEDCardHardwareVpdUuid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rearLEDCardHardwareVpdUuid.setStatus("deprecated")
_RearLEDCardHardwareVpdManufacturingIDNumber_Type = OctetString
_RearLEDCardHardwareVpdManufacturingIDNumber_Object = MibScalar
rearLEDCardHardwareVpdManufacturingIDNumber = _RearLEDCardHardwareVpdManufacturingIDNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 9),
    _RearLEDCardHardwareVpdManufacturingIDNumber_Type()
)
rearLEDCardHardwareVpdManufacturingIDNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rearLEDCardHardwareVpdManufacturingIDNumber.setStatus("deprecated")
_RearLEDCardHardwareVpdProductId_Type = OctetString
_RearLEDCardHardwareVpdProductId_Object = MibScalar
rearLEDCardHardwareVpdProductId = _RearLEDCardHardwareVpdProductId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 10),
    _RearLEDCardHardwareVpdProductId_Type()
)
rearLEDCardHardwareVpdProductId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rearLEDCardHardwareVpdProductId.setStatus("deprecated")
_RearLEDCardHardwareVpdSubManufacturerId_Type = OctetString
_RearLEDCardHardwareVpdSubManufacturerId_Object = MibScalar
rearLEDCardHardwareVpdSubManufacturerId = _RearLEDCardHardwareVpdSubManufacturerId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 11),
    _RearLEDCardHardwareVpdSubManufacturerId_Type()
)
rearLEDCardHardwareVpdSubManufacturerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rearLEDCardHardwareVpdSubManufacturerId.setStatus("deprecated")
_RearLEDCardHardwareVpdClei_Type = OctetString
_RearLEDCardHardwareVpdClei_Object = MibScalar
rearLEDCardHardwareVpdClei = _RearLEDCardHardwareVpdClei_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 12),
    _RearLEDCardHardwareVpdClei_Type()
)
rearLEDCardHardwareVpdClei.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rearLEDCardHardwareVpdClei.setStatus("deprecated")
_RearLEDCardHardwareVpdHardwareRevisionString_Type = OctetString
_RearLEDCardHardwareVpdHardwareRevisionString_Object = MibScalar
rearLEDCardHardwareVpdHardwareRevisionString = _RearLEDCardHardwareVpdHardwareRevisionString_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 17),
    _RearLEDCardHardwareVpdHardwareRevisionString_Type()
)
rearLEDCardHardwareVpdHardwareRevisionString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rearLEDCardHardwareVpdHardwareRevisionString.setStatus("deprecated")
_RearLEDCardHardwareVpdManufDate_Type = OctetString
_RearLEDCardHardwareVpdManufDate_Object = MibScalar
rearLEDCardHardwareVpdManufDate = _RearLEDCardHardwareVpdManufDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 18),
    _RearLEDCardHardwareVpdManufDate_Type()
)
rearLEDCardHardwareVpdManufDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rearLEDCardHardwareVpdManufDate.setStatus("deprecated")
_RearLEDCardHardwareVpdPartNumber_Type = OctetString
_RearLEDCardHardwareVpdPartNumber_Object = MibScalar
rearLEDCardHardwareVpdPartNumber = _RearLEDCardHardwareVpdPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 19),
    _RearLEDCardHardwareVpdPartNumber_Type()
)
rearLEDCardHardwareVpdPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rearLEDCardHardwareVpdPartNumber.setStatus("deprecated")
_RearLEDCardHardwareVpdFruSerial_Type = OctetString
_RearLEDCardHardwareVpdFruSerial_Object = MibScalar
rearLEDCardHardwareVpdFruSerial = _RearLEDCardHardwareVpdFruSerial_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 9, 20),
    _RearLEDCardHardwareVpdFruSerial_Type()
)
rearLEDCardHardwareVpdFruSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rearLEDCardHardwareVpdFruSerial.setStatus("deprecated")
_ChassisFanFirmwareVpd_ObjectIdentity = ObjectIdentity
chassisFanFirmwareVpd = _ChassisFanFirmwareVpd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 12)
)
_ChassisFanControllerVPDTable_Object = MibTable
chassisFanControllerVPDTable = _ChassisFanControllerVPDTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 12, 1)
)
if mibBuilder.loadTexts:
    chassisFanControllerVPDTable.setStatus("deprecated")
_ChassisFanControllerVPDEntry_Object = MibTableRow
chassisFanControllerVPDEntry = _ChassisFanControllerVPDEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 12, 1, 1)
)
chassisFanControllerVPDEntry.setIndexNames(
    (0, "CME-MIB", "chassisFanControllerVpdIndex"),
)
if mibBuilder.loadTexts:
    chassisFanControllerVPDEntry.setStatus("deprecated")
_ChassisFanControllerVpdIndex_Type = Integer32
_ChassisFanControllerVpdIndex_Object = MibTableColumn
chassisFanControllerVpdIndex = _ChassisFanControllerVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 12, 1, 1, 1),
    _ChassisFanControllerVpdIndex_Type()
)
chassisFanControllerVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFanControllerVpdIndex.setStatus("deprecated")


class _ChassisFanControllerVpdId_Type(Integer32):
    """Custom type chassisFanControllerVpdId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("chassisFan1", 1),
          ("chassisFan2", 2),
          ("chassisFan3", 3),
          ("chassisFan4", 4),
          ("chassisFan5", 5),
          ("chassisFan6", 6),
          ("chassisFan7", 7),
          ("chassisFan8", 8),
          ("chassisFan9", 9),
          ("chassisFan10", 10))
    )


_ChassisFanControllerVpdId_Type.__name__ = "Integer32"
_ChassisFanControllerVpdId_Object = MibTableColumn
chassisFanControllerVpdId = _ChassisFanControllerVpdId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 12, 1, 1, 2),
    _ChassisFanControllerVpdId_Type()
)
chassisFanControllerVpdId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFanControllerVpdId.setStatus("deprecated")


class _ChassisFanControllerVpdExists_Type(Integer32):
    """Custom type chassisFanControllerVpdExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_ChassisFanControllerVpdExists_Type.__name__ = "Integer32"
_ChassisFanControllerVpdExists_Object = MibTableColumn
chassisFanControllerVpdExists = _ChassisFanControllerVpdExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 12, 1, 1, 3),
    _ChassisFanControllerVpdExists_Type()
)
chassisFanControllerVpdExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFanControllerVpdExists.setStatus("deprecated")
_ChassisFanControllerVpdRevision_Type = OctetString
_ChassisFanControllerVpdRevision_Object = MibTableColumn
chassisFanControllerVpdRevision = _ChassisFanControllerVpdRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 12, 1, 1, 7),
    _ChassisFanControllerVpdRevision_Type()
)
chassisFanControllerVpdRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFanControllerVpdRevision.setStatus("deprecated")
_ChassisFanHardwareVpd_ObjectIdentity = ObjectIdentity
chassisFanHardwareVpd = _ChassisFanHardwareVpd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13)
)
_ChassisFanHardwareVpdTable_Object = MibTable
chassisFanHardwareVpdTable = _ChassisFanHardwareVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1)
)
if mibBuilder.loadTexts:
    chassisFanHardwareVpdTable.setStatus("deprecated")
_ChassisFanHardwareVpdEntry_Object = MibTableRow
chassisFanHardwareVpdEntry = _ChassisFanHardwareVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1)
)
chassisFanHardwareVpdEntry.setIndexNames(
    (0, "CME-MIB", "chassisFanHardwareVpdIndex"),
)
if mibBuilder.loadTexts:
    chassisFanHardwareVpdEntry.setStatus("deprecated")
_ChassisFanHardwareVpdIndex_Type = Integer32
_ChassisFanHardwareVpdIndex_Object = MibTableColumn
chassisFanHardwareVpdIndex = _ChassisFanHardwareVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 1),
    _ChassisFanHardwareVpdIndex_Type()
)
chassisFanHardwareVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFanHardwareVpdIndex.setStatus("deprecated")
_ChassisFanHardwareVpdBayNumber_Type = OctetString
_ChassisFanHardwareVpdBayNumber_Object = MibTableColumn
chassisFanHardwareVpdBayNumber = _ChassisFanHardwareVpdBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 2),
    _ChassisFanHardwareVpdBayNumber_Type()
)
chassisFanHardwareVpdBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFanHardwareVpdBayNumber.setStatus("deprecated")
_ChassisFanHardwareVpdManufacturingId_Type = OctetString
_ChassisFanHardwareVpdManufacturingId_Object = MibTableColumn
chassisFanHardwareVpdManufacturingId = _ChassisFanHardwareVpdManufacturingId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 3),
    _ChassisFanHardwareVpdManufacturingId_Type()
)
chassisFanHardwareVpdManufacturingId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFanHardwareVpdManufacturingId.setStatus("deprecated")
_ChassisFanHardwareVpdFruNumber_Type = OctetString
_ChassisFanHardwareVpdFruNumber_Object = MibTableColumn
chassisFanHardwareVpdFruNumber = _ChassisFanHardwareVpdFruNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 4),
    _ChassisFanHardwareVpdFruNumber_Type()
)
chassisFanHardwareVpdFruNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFanHardwareVpdFruNumber.setStatus("deprecated")
_ChassisFanHardwareVpdHardwareRevision_Type = Integer32
_ChassisFanHardwareVpdHardwareRevision_Object = MibTableColumn
chassisFanHardwareVpdHardwareRevision = _ChassisFanHardwareVpdHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 5),
    _ChassisFanHardwareVpdHardwareRevision_Type()
)
chassisFanHardwareVpdHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFanHardwareVpdHardwareRevision.setStatus("deprecated")
_ChassisFanHardwareVpdUuid_Type = OctetString
_ChassisFanHardwareVpdUuid_Object = MibTableColumn
chassisFanHardwareVpdUuid = _ChassisFanHardwareVpdUuid_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 8),
    _ChassisFanHardwareVpdUuid_Type()
)
chassisFanHardwareVpdUuid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFanHardwareVpdUuid.setStatus("deprecated")
_ChassisFanHardwareVpdManufDate_Type = OctetString
_ChassisFanHardwareVpdManufDate_Object = MibTableColumn
chassisFanHardwareVpdManufDate = _ChassisFanHardwareVpdManufDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 9),
    _ChassisFanHardwareVpdManufDate_Type()
)
chassisFanHardwareVpdManufDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFanHardwareVpdManufDate.setStatus("deprecated")
_ChassisFanHardwareVpdPartNumber_Type = OctetString
_ChassisFanHardwareVpdPartNumber_Object = MibTableColumn
chassisFanHardwareVpdPartNumber = _ChassisFanHardwareVpdPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 10),
    _ChassisFanHardwareVpdPartNumber_Type()
)
chassisFanHardwareVpdPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFanHardwareVpdPartNumber.setStatus("deprecated")
_ChassisFanHardwareVpdFruSerial_Type = OctetString
_ChassisFanHardwareVpdFruSerial_Object = MibTableColumn
chassisFanHardwareVpdFruSerial = _ChassisFanHardwareVpdFruSerial_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 11),
    _ChassisFanHardwareVpdFruSerial_Type()
)
chassisFanHardwareVpdFruSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFanHardwareVpdFruSerial.setStatus("deprecated")
_ChassisFanHardwareVpdManufacturingIDNumber_Type = OctetString
_ChassisFanHardwareVpdManufacturingIDNumber_Object = MibTableColumn
chassisFanHardwareVpdManufacturingIDNumber = _ChassisFanHardwareVpdManufacturingIDNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 12),
    _ChassisFanHardwareVpdManufacturingIDNumber_Type()
)
chassisFanHardwareVpdManufacturingIDNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFanHardwareVpdManufacturingIDNumber.setStatus("deprecated")
_ChassisFanHardwareVpdProductId_Type = OctetString
_ChassisFanHardwareVpdProductId_Object = MibTableColumn
chassisFanHardwareVpdProductId = _ChassisFanHardwareVpdProductId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 13),
    _ChassisFanHardwareVpdProductId_Type()
)
chassisFanHardwareVpdProductId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFanHardwareVpdProductId.setStatus("deprecated")
_ChassisFanHardwareVpdSubManufacturerId_Type = OctetString
_ChassisFanHardwareVpdSubManufacturerId_Object = MibTableColumn
chassisFanHardwareVpdSubManufacturerId = _ChassisFanHardwareVpdSubManufacturerId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 14),
    _ChassisFanHardwareVpdSubManufacturerId_Type()
)
chassisFanHardwareVpdSubManufacturerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFanHardwareVpdSubManufacturerId.setStatus("deprecated")
_ChassisFanHardwareVpdClei_Type = OctetString
_ChassisFanHardwareVpdClei_Object = MibTableColumn
chassisFanHardwareVpdClei = _ChassisFanHardwareVpdClei_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 15),
    _ChassisFanHardwareVpdClei_Type()
)
chassisFanHardwareVpdClei.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFanHardwareVpdClei.setStatus("deprecated")
_ChassisFanHardwareVpdHardwareRevisionString_Type = OctetString
_ChassisFanHardwareVpdHardwareRevisionString_Object = MibTableColumn
chassisFanHardwareVpdHardwareRevisionString = _ChassisFanHardwareVpdHardwareRevisionString_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 13, 1, 1, 16),
    _ChassisFanHardwareVpdHardwareRevisionString_Type()
)
chassisFanHardwareVpdHardwareRevisionString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFanHardwareVpdHardwareRevisionString.setStatus("deprecated")
_PmFirmwareVpd_ObjectIdentity = ObjectIdentity
pmFirmwareVpd = _PmFirmwareVpd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 14)
)
_PmControllerVPDTable_Object = MibTable
pmControllerVPDTable = _PmControllerVPDTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 14, 1)
)
if mibBuilder.loadTexts:
    pmControllerVPDTable.setStatus("deprecated")
_PmControllerVPDEntry_Object = MibTableRow
pmControllerVPDEntry = _PmControllerVPDEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 14, 1, 1)
)
pmControllerVPDEntry.setIndexNames(
    (0, "CME-MIB", "pmControllerVpdIndex"),
)
if mibBuilder.loadTexts:
    pmControllerVPDEntry.setStatus("deprecated")
_PmControllerVpdIndex_Type = Integer32
_PmControllerVpdIndex_Object = MibTableColumn
pmControllerVpdIndex = _PmControllerVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 14, 1, 1, 1),
    _PmControllerVpdIndex_Type()
)
pmControllerVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmControllerVpdIndex.setStatus("deprecated")


class _PmControllerVpdId_Type(Integer32):
    """Custom type pmControllerVpdId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("powerModule1", 1),
          ("powerModule2", 2),
          ("powerModule3", 3),
          ("powerModule4", 4),
          ("powerModule5", 5),
          ("powerModule6", 6))
    )


_PmControllerVpdId_Type.__name__ = "Integer32"
_PmControllerVpdId_Object = MibTableColumn
pmControllerVpdId = _PmControllerVpdId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 14, 1, 1, 2),
    _PmControllerVpdId_Type()
)
pmControllerVpdId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmControllerVpdId.setStatus("deprecated")


class _PmControllerVpdExists_Type(Integer32):
    """Custom type pmControllerVpdExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_PmControllerVpdExists_Type.__name__ = "Integer32"
_PmControllerVpdExists_Object = MibTableColumn
pmControllerVpdExists = _PmControllerVpdExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 14, 1, 1, 3),
    _PmControllerVpdExists_Type()
)
pmControllerVpdExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmControllerVpdExists.setStatus("deprecated")
_PmControllerVpdRevision_Type = OctetString
_PmControllerVpdRevision_Object = MibTableColumn
pmControllerVpdRevision = _PmControllerVpdRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 14, 1, 1, 7),
    _PmControllerVpdRevision_Type()
)
pmControllerVpdRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmControllerVpdRevision.setStatus("deprecated")
_InventoryManagementActivityVpdTable_Object = MibTable
inventoryManagementActivityVpdTable = _InventoryManagementActivityVpdTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22)
)
if mibBuilder.loadTexts:
    inventoryManagementActivityVpdTable.setStatus("mandatory")
_InventoryManagementActivityVpdEntry_Object = MibTableRow
inventoryManagementActivityVpdEntry = _InventoryManagementActivityVpdEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1)
)
inventoryManagementActivityVpdEntry.setIndexNames(
    (0, "CME-MIB", "componentLevelActivityVpdIndex"),
)
if mibBuilder.loadTexts:
    inventoryManagementActivityVpdEntry.setStatus("mandatory")
_ComponentLevelActivityVpdIndex_Type = Integer32
_ComponentLevelActivityVpdIndex_Object = MibTableColumn
componentLevelActivityVpdIndex = _ComponentLevelActivityVpdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 1),
    _ComponentLevelActivityVpdIndex_Type()
)
componentLevelActivityVpdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentLevelActivityVpdIndex.setStatus("mandatory")
_ComponentLevelActivityVpdFruNumber_Type = OctetString
_ComponentLevelActivityVpdFruNumber_Object = MibTableColumn
componentLevelActivityVpdFruNumber = _ComponentLevelActivityVpdFruNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 2),
    _ComponentLevelActivityVpdFruNumber_Type()
)
componentLevelActivityVpdFruNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentLevelActivityVpdFruNumber.setStatus("mandatory")
_ComponentLevelActivityVpdSerialNumber_Type = OctetString
_ComponentLevelActivityVpdSerialNumber_Object = MibTableColumn
componentLevelActivityVpdSerialNumber = _ComponentLevelActivityVpdSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 3),
    _ComponentLevelActivityVpdSerialNumber_Type()
)
componentLevelActivityVpdSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentLevelActivityVpdSerialNumber.setStatus("mandatory")
_ComponentLevelActivityVpdManufacturingId_Type = OctetString
_ComponentLevelActivityVpdManufacturingId_Object = MibTableColumn
componentLevelActivityVpdManufacturingId = _ComponentLevelActivityVpdManufacturingId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 4),
    _ComponentLevelActivityVpdManufacturingId_Type()
)
componentLevelActivityVpdManufacturingId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentLevelActivityVpdManufacturingId.setStatus("mandatory")
_ComponentLevelActivityVpdBayNumber_Type = OctetString
_ComponentLevelActivityVpdBayNumber_Object = MibTableColumn
componentLevelActivityVpdBayNumber = _ComponentLevelActivityVpdBayNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 5),
    _ComponentLevelActivityVpdBayNumber_Type()
)
componentLevelActivityVpdBayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentLevelActivityVpdBayNumber.setStatus("deprecated")
_ComponentLevelActivityVpdAction_Type = OctetString
_ComponentLevelActivityVpdAction_Object = MibTableColumn
componentLevelActivityVpdAction = _ComponentLevelActivityVpdAction_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 9),
    _ComponentLevelActivityVpdAction_Type()
)
componentLevelActivityVpdAction.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentLevelActivityVpdAction.setStatus("mandatory")
_ComponentLevelActivityVpdTimestamp_Type = OctetString
_ComponentLevelActivityVpdTimestamp_Object = MibTableColumn
componentLevelActivityVpdTimestamp = _ComponentLevelActivityVpdTimestamp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 10),
    _ComponentLevelActivityVpdTimestamp_Type()
)
componentLevelActivityVpdTimestamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentLevelActivityVpdTimestamp.setStatus("mandatory")
_ComponentLevelActivityVpdModuleName_Type = OctetString
_ComponentLevelActivityVpdModuleName_Object = MibTableColumn
componentLevelActivityVpdModuleName = _ComponentLevelActivityVpdModuleName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 12),
    _ComponentLevelActivityVpdModuleName_Type()
)
componentLevelActivityVpdModuleName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentLevelActivityVpdModuleName.setStatus("mandatory")


class _ComponentLevelActivityVpdTopologyPath_Type(OctetString):
    """Custom type componentLevelActivityVpdTopologyPath based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_ComponentLevelActivityVpdTopologyPath_Type.__name__ = "OctetString"
_ComponentLevelActivityVpdTopologyPath_Object = MibTableColumn
componentLevelActivityVpdTopologyPath = _ComponentLevelActivityVpdTopologyPath_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 22, 1, 15),
    _ComponentLevelActivityVpdTopologyPath_Type()
)
componentLevelActivityVpdTopologyPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentLevelActivityVpdTopologyPath.setStatus("mandatory")
_ReloadVpdData_ObjectIdentity = ObjectIdentity
reloadVpdData = _ReloadVpdData_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 23)
)


class _ReloadAllVpdData_Type(Integer32):
    """Custom type reloadAllVpdData based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_ReloadAllVpdData_Type.__name__ = "Integer32"
_ReloadAllVpdData_Object = MibScalar
reloadAllVpdData = _ReloadAllVpdData_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 23, 1),
    _ReloadAllVpdData_Type()
)
reloadAllVpdData.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    reloadAllVpdData.setStatus("mandatory")


class _ReloadFwVpdData_Type(Integer32):
    """Custom type reloadFwVpdData based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_ReloadFwVpdData_Type.__name__ = "Integer32"
_ReloadFwVpdData_Object = MibScalar
reloadFwVpdData = _ReloadFwVpdData_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 23, 2),
    _ReloadFwVpdData_Type()
)
reloadFwVpdData.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    reloadFwVpdData.setStatus("mandatory")


class _ReloadHwVpdData_Type(Integer32):
    """Custom type reloadHwVpdData based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_ReloadHwVpdData_Type.__name__ = "Integer32"
_ReloadHwVpdData_Object = MibScalar
reloadHwVpdData = _ReloadHwVpdData_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 23, 3),
    _ReloadHwVpdData_Type()
)
reloadHwVpdData.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    reloadHwVpdData.setStatus("mandatory")


class _ReloadMACAddress_Type(Integer32):
    """Custom type reloadMACAddress based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_ReloadMACAddress_Type.__name__ = "Integer32"
_ReloadMACAddress_Object = MibScalar
reloadMACAddress = _ReloadMACAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 23, 4),
    _ReloadMACAddress_Type()
)
reloadMACAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    reloadMACAddress.setStatus("mandatory")


class _ReloadWwnGuidVpdData_Type(Integer32):
    """Custom type reloadWwnGuidVpdData based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_ReloadWwnGuidVpdData_Type.__name__ = "Integer32"
_ReloadWwnGuidVpdData_Object = MibScalar
reloadWwnGuidVpdData = _ReloadWwnGuidVpdData_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 21, 23, 5),
    _ReloadWwnGuidVpdData_Type()
)
reloadWwnGuidVpdData.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    reloadWwnGuidVpdData.setStatus("mandatory")
_AirFilter_ObjectIdentity = ObjectIdentity
airFilter = _AirFilter_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 22)
)
_PassiveAirFilter_ObjectIdentity = ObjectIdentity
passiveAirFilter = _PassiveAirFilter_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 22, 1)
)


class _PassiveAirFilterStatus_Type(Integer32):
    """Custom type passiveAirFilterStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1),
          ("reset", 2))
    )


_PassiveAirFilterStatus_Type.__name__ = "Integer32"
_PassiveAirFilterStatus_Object = MibScalar
passiveAirFilterStatus = _PassiveAirFilterStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 22, 1, 1),
    _PassiveAirFilterStatus_Type()
)
passiveAirFilterStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    passiveAirFilterStatus.setStatus("mandatory")


class _PassiveAirFilterMonthFreq_Type(Integer32):
    """Custom type passiveAirFilterMonthFreq based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              6)
        )
    )
    namedValues = NamedValues(
        *(("oneMonth", 1),
          ("threeMonths", 3),
          ("sixMonths", 6))
    )


_PassiveAirFilterMonthFreq_Type.__name__ = "Integer32"
_PassiveAirFilterMonthFreq_Object = MibScalar
passiveAirFilterMonthFreq = _PassiveAirFilterMonthFreq_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 22, 1, 2),
    _PassiveAirFilterMonthFreq_Type()
)
passiveAirFilterMonthFreq.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    passiveAirFilterMonthFreq.setStatus("mandatory")


class _PassiveAirFilterReplaceDate_Type(OctetString):
    """Custom type passiveAirFilterReplaceDate based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 30),
    )


_PassiveAirFilterReplaceDate_Type.__name__ = "OctetString"
_PassiveAirFilterReplaceDate_Object = MibScalar
passiveAirFilterReplaceDate = _PassiveAirFilterReplaceDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 22, 1, 3),
    _PassiveAirFilterReplaceDate_Type()
)
passiveAirFilterReplaceDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    passiveAirFilterReplaceDate.setStatus("mandatory")
_ComponentInformation_ObjectIdentity = ObjectIdentity
componentInformation = _ComponentInformation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23)
)
_ComponentInventory_ObjectIdentity = ObjectIdentity
componentInventory = _ComponentInventory_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1)
)
_ComponentInventoryTable_Object = MibTable
componentInventoryTable = _ComponentInventoryTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1)
)
if mibBuilder.loadTexts:
    componentInventoryTable.setStatus("mandatory")
_ComponentInventoryEntry_Object = MibTableRow
componentInventoryEntry = _ComponentInventoryEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1)
)
componentInventoryEntry.setIndexNames(
    (0, "CME-MIB", "componentInventoryTopologyPath"),
)
if mibBuilder.loadTexts:
    componentInventoryEntry.setStatus("mandatory")


class _ComponentInventoryTopologyPath_Type(OctetString):
    """Custom type componentInventoryTopologyPath based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_ComponentInventoryTopologyPath_Type.__name__ = "OctetString"
_ComponentInventoryTopologyPath_Object = MibTableColumn
componentInventoryTopologyPath = _ComponentInventoryTopologyPath_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 1),
    _ComponentInventoryTopologyPath_Type()
)
componentInventoryTopologyPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryTopologyPath.setStatus("mandatory")
_ComponentInventoryInstance_Type = Integer32
_ComponentInventoryInstance_Object = MibTableColumn
componentInventoryInstance = _ComponentInventoryInstance_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 2),
    _ComponentInventoryInstance_Type()
)
componentInventoryInstance.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryInstance.setStatus("mandatory")
_ComponentInventoryDescription_Type = OctetString
_ComponentInventoryDescription_Object = MibTableColumn
componentInventoryDescription = _ComponentInventoryDescription_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 3),
    _ComponentInventoryDescription_Type()
)
componentInventoryDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryDescription.setStatus("mandatory")
_ComponentInventoryMachineTypeModel_Type = OctetString
_ComponentInventoryMachineTypeModel_Object = MibTableColumn
componentInventoryMachineTypeModel = _ComponentInventoryMachineTypeModel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 4),
    _ComponentInventoryMachineTypeModel_Type()
)
componentInventoryMachineTypeModel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryMachineTypeModel.setStatus("mandatory")
_ComponentInventoryMachineSerial_Type = OctetString
_ComponentInventoryMachineSerial_Object = MibTableColumn
componentInventoryMachineSerial = _ComponentInventoryMachineSerial_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 5),
    _ComponentInventoryMachineSerial_Type()
)
componentInventoryMachineSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryMachineSerial.setStatus("mandatory")
_ComponentInventoryAssetID_Type = OctetString
_ComponentInventoryAssetID_Object = MibTableColumn
componentInventoryAssetID = _ComponentInventoryAssetID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 6),
    _ComponentInventoryAssetID_Type()
)
componentInventoryAssetID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryAssetID.setStatus("mandatory")
_ComponentInventoryPartNumber_Type = OctetString
_ComponentInventoryPartNumber_Object = MibTableColumn
componentInventoryPartNumber = _ComponentInventoryPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 7),
    _ComponentInventoryPartNumber_Type()
)
componentInventoryPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryPartNumber.setStatus("mandatory")
_ComponentInventoryFRUNumber_Type = OctetString
_ComponentInventoryFRUNumber_Object = MibTableColumn
componentInventoryFRUNumber = _ComponentInventoryFRUNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 8),
    _ComponentInventoryFRUNumber_Type()
)
componentInventoryFRUNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryFRUNumber.setStatus("mandatory")
_ComponentInventoryFRUSerialNumber_Type = OctetString
_ComponentInventoryFRUSerialNumber_Object = MibTableColumn
componentInventoryFRUSerialNumber = _ComponentInventoryFRUSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 9),
    _ComponentInventoryFRUSerialNumber_Type()
)
componentInventoryFRUSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryFRUSerialNumber.setStatus("mandatory")
_ComponentInventoryManufacture_Type = OctetString
_ComponentInventoryManufacture_Object = MibTableColumn
componentInventoryManufacture = _ComponentInventoryManufacture_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 10),
    _ComponentInventoryManufacture_Type()
)
componentInventoryManufacture.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryManufacture.setStatus("mandatory")
_ComponentInventoryHardwareRevision_Type = OctetString
_ComponentInventoryHardwareRevision_Object = MibTableColumn
componentInventoryHardwareRevision = _ComponentInventoryHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 11),
    _ComponentInventoryHardwareRevision_Type()
)
componentInventoryHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryHardwareRevision.setStatus("mandatory")
_ComponentInventoryManufactureDate_Type = OctetString
_ComponentInventoryManufactureDate_Object = MibTableColumn
componentInventoryManufactureDate = _ComponentInventoryManufactureDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 12),
    _ComponentInventoryManufactureDate_Type()
)
componentInventoryManufactureDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryManufactureDate.setStatus("mandatory")
_ComponentInventoryUUID_Type = OctetString
_ComponentInventoryUUID_Object = MibTableColumn
componentInventoryUUID = _ComponentInventoryUUID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 13),
    _ComponentInventoryUUID_Type()
)
componentInventoryUUID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryUUID.setStatus("mandatory")
_ComponentInventoryProductID_Type = OctetString
_ComponentInventoryProductID_Object = MibTableColumn
componentInventoryProductID = _ComponentInventoryProductID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 14),
    _ComponentInventoryProductID_Type()
)
componentInventoryProductID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryProductID.setStatus("mandatory")
_ComponentInventorySubManufactureID_Type = OctetString
_ComponentInventorySubManufactureID_Object = MibTableColumn
componentInventorySubManufactureID = _ComponentInventorySubManufactureID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 15),
    _ComponentInventorySubManufactureID_Type()
)
componentInventorySubManufactureID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventorySubManufactureID.setStatus("mandatory")
_ComponentInventoryCLEI_Type = OctetString
_ComponentInventoryCLEI_Object = MibTableColumn
componentInventoryCLEI = _ComponentInventoryCLEI_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 16),
    _ComponentInventoryCLEI_Type()
)
componentInventoryCLEI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryCLEI.setStatus("mandatory")
_ComponentInventoryAssetTag_Type = OctetString
_ComponentInventoryAssetTag_Object = MibTableColumn
componentInventoryAssetTag = _ComponentInventoryAssetTag_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 17),
    _ComponentInventoryAssetTag_Type()
)
componentInventoryAssetTag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryAssetTag.setStatus("mandatory")
_ComponentInventorySpeed_Type = OctetString
_ComponentInventorySpeed_Object = MibTableColumn
componentInventorySpeed = _ComponentInventorySpeed_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 18),
    _ComponentInventorySpeed_Type()
)
componentInventorySpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventorySpeed.setStatus("mandatory")
_ComponentInventoryIdentifier_Type = OctetString
_ComponentInventoryIdentifier_Object = MibTableColumn
componentInventoryIdentifier = _ComponentInventoryIdentifier_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 19),
    _ComponentInventoryIdentifier_Type()
)
componentInventoryIdentifier.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryIdentifier.setStatus("mandatory")
_ComponentInventorySize_Type = Integer32
_ComponentInventorySize_Object = MibTableColumn
componentInventorySize = _ComponentInventorySize_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 20),
    _ComponentInventorySize_Type()
)
componentInventorySize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventorySize.setStatus("mandatory")


class _ComponentInventoryMemoryType_Type(Integer32):
    """Custom type componentInventoryMemoryType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              11)
        )
    )
    namedValues = NamedValues(
        *(("fpmdram", 1),
          ("edo", 2),
          ("edodram", 3),
          ("sdram", 4),
          ("multiplexedram", 5),
          ("ddrsgram", 6),
          ("ddrsdram", 7),
          ("ddr2sdrm", 8),
          ("ddr3sdram", 11))
    )


_ComponentInventoryMemoryType_Type.__name__ = "Integer32"
_ComponentInventoryMemoryType_Object = MibTableColumn
componentInventoryMemoryType = _ComponentInventoryMemoryType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 21),
    _ComponentInventoryMemoryType_Type()
)
componentInventoryMemoryType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryMemoryType.setStatus("mandatory")
_ComponentInventoryProductName_Type = OctetString
_ComponentInventoryProductName_Object = MibTableColumn
componentInventoryProductName = _ComponentInventoryProductName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 22),
    _ComponentInventoryProductName_Type()
)
componentInventoryProductName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryProductName.setStatus("mandatory")
_ComponentInventoryProductVersion_Type = OctetString
_ComponentInventoryProductVersion_Object = MibTableColumn
componentInventoryProductVersion = _ComponentInventoryProductVersion_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 23),
    _ComponentInventoryProductVersion_Type()
)
componentInventoryProductVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryProductVersion.setStatus("mandatory")


class _ComponentInventoryProcessorType_Type(Integer32):
    """Custom type componentInventoryProcessorType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("unknown", 2),
          ("central", 3),
          ("math", 4),
          ("dsp", 5),
          ("video", 6))
    )


_ComponentInventoryProcessorType_Type.__name__ = "Integer32"
_ComponentInventoryProcessorType_Object = MibTableColumn
componentInventoryProcessorType = _ComponentInventoryProcessorType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 24),
    _ComponentInventoryProcessorType_Type()
)
componentInventoryProcessorType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryProcessorType.setStatus("mandatory")
_ComponentInventoryProcessorFamily_Type = OctetString
_ComponentInventoryProcessorFamily_Object = MibTableColumn
componentInventoryProcessorFamily = _ComponentInventoryProcessorFamily_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 25),
    _ComponentInventoryProcessorFamily_Type()
)
componentInventoryProcessorFamily.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryProcessorFamily.setStatus("mandatory")
_ComponentInventoryProcessorCores_Type = OctetString
_ComponentInventoryProcessorCores_Object = MibTableColumn
componentInventoryProcessorCores = _ComponentInventoryProcessorCores_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 26),
    _ComponentInventoryProcessorCores_Type()
)
componentInventoryProcessorCores.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryProcessorCores.setStatus("mandatory")
_ComponentInventoryProcessorThreads_Type = OctetString
_ComponentInventoryProcessorThreads_Object = MibTableColumn
componentInventoryProcessorThreads = _ComponentInventoryProcessorThreads_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 27),
    _ComponentInventoryProcessorThreads_Type()
)
componentInventoryProcessorThreads.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryProcessorThreads.setStatus("mandatory")
_ComponentInventoryProcessorL1DCache_Type = OctetString
_ComponentInventoryProcessorL1DCache_Object = MibTableColumn
componentInventoryProcessorL1DCache = _ComponentInventoryProcessorL1DCache_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 28),
    _ComponentInventoryProcessorL1DCache_Type()
)
componentInventoryProcessorL1DCache.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryProcessorL1DCache.setStatus("mandatory")
_ComponentInventoryProcessorL1ICache_Type = OctetString
_ComponentInventoryProcessorL1ICache_Object = MibTableColumn
componentInventoryProcessorL1ICache = _ComponentInventoryProcessorL1ICache_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 29),
    _ComponentInventoryProcessorL1ICache_Type()
)
componentInventoryProcessorL1ICache.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryProcessorL1ICache.setStatus("mandatory")
_ComponentInventoryProcessorL2Cache_Type = OctetString
_ComponentInventoryProcessorL2Cache_Object = MibTableColumn
componentInventoryProcessorL2Cache = _ComponentInventoryProcessorL2Cache_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 30),
    _ComponentInventoryProcessorL2Cache_Type()
)
componentInventoryProcessorL2Cache.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryProcessorL2Cache.setStatus("mandatory")
_ComponentInventoryProcessorL3Cache_Type = OctetString
_ComponentInventoryProcessorL3Cache_Object = MibTableColumn
componentInventoryProcessorL3Cache = _ComponentInventoryProcessorL3Cache_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 31),
    _ComponentInventoryProcessorL3Cache_Type()
)
componentInventoryProcessorL3Cache.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryProcessorL3Cache.setStatus("mandatory")
_ComponentInventoryProcessorVoltage_Type = OctetString
_ComponentInventoryProcessorVoltage_Object = MibTableColumn
componentInventoryProcessorVoltage = _ComponentInventoryProcessorVoltage_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 32),
    _ComponentInventoryProcessorVoltage_Type()
)
componentInventoryProcessorVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryProcessorVoltage.setStatus("mandatory")
_ComponentInventoryProcessorExtClock_Type = OctetString
_ComponentInventoryProcessorExtClock_Object = MibTableColumn
componentInventoryProcessorExtClock = _ComponentInventoryProcessorExtClock_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 33),
    _ComponentInventoryProcessorExtClock_Type()
)
componentInventoryProcessorExtClock.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryProcessorExtClock.setStatus("mandatory")
_ComponentInventoryProcessorDataWidth_Type = OctetString
_ComponentInventoryProcessorDataWidth_Object = MibTableColumn
componentInventoryProcessorDataWidth = _ComponentInventoryProcessorDataWidth_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 34),
    _ComponentInventoryProcessorDataWidth_Type()
)
componentInventoryProcessorDataWidth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryProcessorDataWidth.setStatus("mandatory")
_ComponentInventoryManufactureIDNum_Type = Integer32
_ComponentInventoryManufactureIDNum_Object = MibTableColumn
componentInventoryManufactureIDNum = _ComponentInventoryManufactureIDNum_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 35),
    _ComponentInventoryManufactureIDNum_Type()
)
componentInventoryManufactureIDNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryManufactureIDNum.setStatus("mandatory")
_ComponentInventoryGlobalID_Type = OctetString
_ComponentInventoryGlobalID_Object = MibTableColumn
componentInventoryGlobalID = _ComponentInventoryGlobalID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 1, 1, 41),
    _ComponentInventoryGlobalID_Type()
)
componentInventoryGlobalID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryGlobalID.setStatus("mandatory")
_ComponentInventoryTableCacheTimeout_Type = Integer32
_ComponentInventoryTableCacheTimeout_Object = MibScalar
componentInventoryTableCacheTimeout = _ComponentInventoryTableCacheTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 1, 2),
    _ComponentInventoryTableCacheTimeout_Type()
)
componentInventoryTableCacheTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryTableCacheTimeout.setStatus("mandatory")
_ComponentFirmware_ObjectIdentity = ObjectIdentity
componentFirmware = _ComponentFirmware_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2)
)
_ComponentFirmwareTable_Object = MibTable
componentFirmwareTable = _ComponentFirmwareTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1)
)
if mibBuilder.loadTexts:
    componentFirmwareTable.setStatus("mandatory")
_ComponentFirmwareEntry_Object = MibTableRow
componentFirmwareEntry = _ComponentFirmwareEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1)
)
componentFirmwareEntry.setIndexNames(
    (0, "CME-MIB", "componentFirmwareTopologyPath"),
    (0, "CME-MIB", "componentFirmwareIndex"),
)
if mibBuilder.loadTexts:
    componentFirmwareEntry.setStatus("mandatory")


class _ComponentFirmwareTopologyPath_Type(OctetString):
    """Custom type componentFirmwareTopologyPath based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_ComponentFirmwareTopologyPath_Type.__name__ = "OctetString"
_ComponentFirmwareTopologyPath_Object = MibTableColumn
componentFirmwareTopologyPath = _ComponentFirmwareTopologyPath_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 1),
    _ComponentFirmwareTopologyPath_Type()
)
componentFirmwareTopologyPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentFirmwareTopologyPath.setStatus("mandatory")
_ComponentFirmwareIndex_Type = Integer32
_ComponentFirmwareIndex_Object = MibTableColumn
componentFirmwareIndex = _ComponentFirmwareIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 2),
    _ComponentFirmwareIndex_Type()
)
componentFirmwareIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentFirmwareIndex.setStatus("mandatory")
_ComponentFirmwareComponentInstance_Type = Integer32
_ComponentFirmwareComponentInstance_Object = MibTableColumn
componentFirmwareComponentInstance = _ComponentFirmwareComponentInstance_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 3),
    _ComponentFirmwareComponentInstance_Type()
)
componentFirmwareComponentInstance.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentFirmwareComponentInstance.setStatus("mandatory")
_ComponentFirmwareComponentDescription_Type = OctetString
_ComponentFirmwareComponentDescription_Object = MibTableColumn
componentFirmwareComponentDescription = _ComponentFirmwareComponentDescription_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 4),
    _ComponentFirmwareComponentDescription_Type()
)
componentFirmwareComponentDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentFirmwareComponentDescription.setStatus("mandatory")
_ComponentFirmwareType_Type = OctetString
_ComponentFirmwareType_Object = MibTableColumn
componentFirmwareType = _ComponentFirmwareType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 5),
    _ComponentFirmwareType_Type()
)
componentFirmwareType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentFirmwareType.setStatus("mandatory")
_ComponentFirmwareBuildID_Type = OctetString
_ComponentFirmwareBuildID_Object = MibTableColumn
componentFirmwareBuildID = _ComponentFirmwareBuildID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 6),
    _ComponentFirmwareBuildID_Type()
)
componentFirmwareBuildID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentFirmwareBuildID.setStatus("mandatory")
_ComponentFirmwareReleaseDate_Type = OctetString
_ComponentFirmwareReleaseDate_Object = MibTableColumn
componentFirmwareReleaseDate = _ComponentFirmwareReleaseDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 7),
    _ComponentFirmwareReleaseDate_Type()
)
componentFirmwareReleaseDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentFirmwareReleaseDate.setStatus("mandatory")
_ComponentFirmwareFilename_Type = OctetString
_ComponentFirmwareFilename_Object = MibTableColumn
componentFirmwareFilename = _ComponentFirmwareFilename_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 8),
    _ComponentFirmwareFilename_Type()
)
componentFirmwareFilename.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentFirmwareFilename.setStatus("mandatory")
_ComponentFirmwareRevision_Type = OctetString
_ComponentFirmwareRevision_Object = MibTableColumn
componentFirmwareRevision = _ComponentFirmwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 9),
    _ComponentFirmwareRevision_Type()
)
componentFirmwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentFirmwareRevision.setStatus("mandatory")
_ComponentFirmwareRevisionMajor_Type = Integer32
_ComponentFirmwareRevisionMajor_Object = MibTableColumn
componentFirmwareRevisionMajor = _ComponentFirmwareRevisionMajor_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 10),
    _ComponentFirmwareRevisionMajor_Type()
)
componentFirmwareRevisionMajor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentFirmwareRevisionMajor.setStatus("mandatory")
_ComponentFirmwareRevisionMinor_Type = Integer32
_ComponentFirmwareRevisionMinor_Object = MibTableColumn
componentFirmwareRevisionMinor = _ComponentFirmwareRevisionMinor_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 11),
    _ComponentFirmwareRevisionMinor_Type()
)
componentFirmwareRevisionMinor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentFirmwareRevisionMinor.setStatus("mandatory")
_ComponentFirmwareLevelStatus_Type = OctetString
_ComponentFirmwareLevelStatus_Object = MibTableColumn
componentFirmwareLevelStatus = _ComponentFirmwareLevelStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 12),
    _ComponentFirmwareLevelStatus_Type()
)
componentFirmwareLevelStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentFirmwareLevelStatus.setStatus("mandatory")
_ComponentFirmwarePendingBuildID_Type = OctetString
_ComponentFirmwarePendingBuildID_Object = MibTableColumn
componentFirmwarePendingBuildID = _ComponentFirmwarePendingBuildID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 13),
    _ComponentFirmwarePendingBuildID_Type()
)
componentFirmwarePendingBuildID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentFirmwarePendingBuildID.setStatus("mandatory")
_ComponentFirmwarePendingReleaseDate_Type = OctetString
_ComponentFirmwarePendingReleaseDate_Object = MibTableColumn
componentFirmwarePendingReleaseDate = _ComponentFirmwarePendingReleaseDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 14),
    _ComponentFirmwarePendingReleaseDate_Type()
)
componentFirmwarePendingReleaseDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentFirmwarePendingReleaseDate.setStatus("mandatory")
_ComponentFirmwarePendingRevision_Type = OctetString
_ComponentFirmwarePendingRevision_Object = MibTableColumn
componentFirmwarePendingRevision = _ComponentFirmwarePendingRevision_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 15),
    _ComponentFirmwarePendingRevision_Type()
)
componentFirmwarePendingRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentFirmwarePendingRevision.setStatus("mandatory")
_ComponentFirmwareReleaseLevel_Type = OctetString
_ComponentFirmwareReleaseLevel_Object = MibTableColumn
componentFirmwareReleaseLevel = _ComponentFirmwareReleaseLevel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 16),
    _ComponentFirmwareReleaseLevel_Type()
)
componentFirmwareReleaseLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentFirmwareReleaseLevel.setStatus("mandatory")


class _ComponentFirmwareImageStatus_Type(Integer32):
    """Custom type componentFirmwareImageStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("inactive", 0),
          ("active", 1),
          ("na", 255))
    )


_ComponentFirmwareImageStatus_Type.__name__ = "Integer32"
_ComponentFirmwareImageStatus_Object = MibTableColumn
componentFirmwareImageStatus = _ComponentFirmwareImageStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 17),
    _ComponentFirmwareImageStatus_Type()
)
componentFirmwareImageStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentFirmwareImageStatus.setStatus("mandatory")
_ComponentFirmwareRole_Type = OctetString
_ComponentFirmwareRole_Object = MibTableColumn
componentFirmwareRole = _ComponentFirmwareRole_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 18),
    _ComponentFirmwareRole_Type()
)
componentFirmwareRole.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentFirmwareRole.setStatus("mandatory")


class _ComponentFirmwareTypeID_Type(Integer32):
    """Custom type componentFirmwareTypeID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              40,
              41,
              42,
              43,
              61,
              62,
              81,
              91,
              92,
              101,
              102,
              103,
              104,
              105,
              106,
              255)
        )
    )
    namedValues = NamedValues(
        *(("bladeFwBios", 1),
          ("bladeDiagnostics", 2),
          ("bladeSysMgmtProcessor", 3),
          ("bladeFpga", 4),
          ("bladecKVM", 5),
          ("bladeMP", 6),
          ("bladeUEFI", 7),
          ("bladeDSA", 8),
          ("switchModuleMainAppl", 40),
          ("switchModuleMainAppl1", 41),
          ("switchModuleMainAppl2", 42),
          ("switchModuleBootROM", 43),
          ("mgmtModuleMainAppl", 61),
          ("mgmtModuleMainApplPendingRestart", 62),
          ("fanController", 81),
          ("powerSupplyFirmware", 91),
          ("powerSupplyFanController", 92),
          ("expansionCardGeneric", 101),
          ("expansionCardEfi", 102),
          ("expansionCardFcode", 103),
          ("expansionCardBios", 104),
          ("expansionCardMain", 105),
          ("expansionCardMulti", 106),
          ("unknown", 255))
    )


_ComponentFirmwareTypeID_Type.__name__ = "Integer32"
_ComponentFirmwareTypeID_Object = MibTableColumn
componentFirmwareTypeID = _ComponentFirmwareTypeID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 1, 1, 20),
    _ComponentFirmwareTypeID_Type()
)
componentFirmwareTypeID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentFirmwareTypeID.setStatus("mandatory")
_ComponentFirmwareTableCacheTimeout_Type = Integer32
_ComponentFirmwareTableCacheTimeout_Object = MibScalar
componentFirmwareTableCacheTimeout = _ComponentFirmwareTableCacheTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 2),
    _ComponentFirmwareTableCacheTimeout_Type()
)
componentFirmwareTableCacheTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentFirmwareTableCacheTimeout.setStatus("mandatory")
_NodeFirmwareAnalysisTable_Object = MibTable
nodeFirmwareAnalysisTable = _NodeFirmwareAnalysisTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 7)
)
if mibBuilder.loadTexts:
    nodeFirmwareAnalysisTable.setStatus("mandatory")
_NodeFirmwareAnalysisEntry_Object = MibTableRow
nodeFirmwareAnalysisEntry = _NodeFirmwareAnalysisEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 7, 1)
)
nodeFirmwareAnalysisEntry.setIndexNames(
    (0, "CME-MIB", "nodeFirmwareAnalysisIndex"),
)
if mibBuilder.loadTexts:
    nodeFirmwareAnalysisEntry.setStatus("mandatory")
_NodeFirmwareAnalysisIndex_Type = Integer32
_NodeFirmwareAnalysisIndex_Object = MibTableColumn
nodeFirmwareAnalysisIndex = _NodeFirmwareAnalysisIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 7, 1, 1),
    _NodeFirmwareAnalysisIndex_Type()
)
nodeFirmwareAnalysisIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nodeFirmwareAnalysisIndex.setStatus("mandatory")
_NodeFirmwareAnalysisMachineTypeModel_Type = OctetString
_NodeFirmwareAnalysisMachineTypeModel_Object = MibTableColumn
nodeFirmwareAnalysisMachineTypeModel = _NodeFirmwareAnalysisMachineTypeModel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 7, 1, 2),
    _NodeFirmwareAnalysisMachineTypeModel_Type()
)
nodeFirmwareAnalysisMachineTypeModel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nodeFirmwareAnalysisMachineTypeModel.setStatus("mandatory")
_NodeFirmwareAnalysisFirmwareType_Type = OctetString
_NodeFirmwareAnalysisFirmwareType_Object = MibTableColumn
nodeFirmwareAnalysisFirmwareType = _NodeFirmwareAnalysisFirmwareType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 7, 1, 3),
    _NodeFirmwareAnalysisFirmwareType_Type()
)
nodeFirmwareAnalysisFirmwareType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nodeFirmwareAnalysisFirmwareType.setStatus("mandatory")
_NodeFirmwareAnalysisBuildId_Type = OctetString
_NodeFirmwareAnalysisBuildId_Object = MibTableColumn
nodeFirmwareAnalysisBuildId = _NodeFirmwareAnalysisBuildId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 7, 1, 4),
    _NodeFirmwareAnalysisBuildId_Type()
)
nodeFirmwareAnalysisBuildId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nodeFirmwareAnalysisBuildId.setStatus("mandatory")
_NodeFirmwareAnalysisReleaseDate_Type = OctetString
_NodeFirmwareAnalysisReleaseDate_Object = MibTableColumn
nodeFirmwareAnalysisReleaseDate = _NodeFirmwareAnalysisReleaseDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 7, 1, 5),
    _NodeFirmwareAnalysisReleaseDate_Type()
)
nodeFirmwareAnalysisReleaseDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nodeFirmwareAnalysisReleaseDate.setStatus("mandatory")
_NodeFirmwareAnalysisRevisionLevel_Type = OctetString
_NodeFirmwareAnalysisRevisionLevel_Object = MibTableColumn
nodeFirmwareAnalysisRevisionLevel = _NodeFirmwareAnalysisRevisionLevel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 7, 1, 6),
    _NodeFirmwareAnalysisRevisionLevel_Type()
)
nodeFirmwareAnalysisRevisionLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nodeFirmwareAnalysisRevisionLevel.setStatus("mandatory")
_NodeFirmwareAnalysisTopology_Type = OctetString
_NodeFirmwareAnalysisTopology_Object = MibTableColumn
nodeFirmwareAnalysisTopology = _NodeFirmwareAnalysisTopology_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 7, 1, 7),
    _NodeFirmwareAnalysisTopology_Type()
)
nodeFirmwareAnalysisTopology.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nodeFirmwareAnalysisTopology.setStatus("mandatory")
_NodeFirmwareAnalysisDeviceName_Type = OctetString
_NodeFirmwareAnalysisDeviceName_Object = MibTableColumn
nodeFirmwareAnalysisDeviceName = _NodeFirmwareAnalysisDeviceName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 7, 1, 8),
    _NodeFirmwareAnalysisDeviceName_Type()
)
nodeFirmwareAnalysisDeviceName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nodeFirmwareAnalysisDeviceName.setStatus("mandatory")
_SmFirmwareAnalysisTable_Object = MibTable
smFirmwareAnalysisTable = _SmFirmwareAnalysisTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 11)
)
if mibBuilder.loadTexts:
    smFirmwareAnalysisTable.setStatus("mandatory")
_SmFirmwareAnalysisEntry_Object = MibTableRow
smFirmwareAnalysisEntry = _SmFirmwareAnalysisEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 11, 1)
)
smFirmwareAnalysisEntry.setIndexNames(
    (0, "CME-MIB", "smFirmwareAnalysisIndex"),
)
if mibBuilder.loadTexts:
    smFirmwareAnalysisEntry.setStatus("mandatory")
_SmFirmwareAnalysisIndex_Type = Integer32
_SmFirmwareAnalysisIndex_Object = MibTableColumn
smFirmwareAnalysisIndex = _SmFirmwareAnalysisIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 11, 1, 1),
    _SmFirmwareAnalysisIndex_Type()
)
smFirmwareAnalysisIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFirmwareAnalysisIndex.setStatus("mandatory")
_SmFirmwareAnalysisProductId_Type = OctetString
_SmFirmwareAnalysisProductId_Object = MibTableColumn
smFirmwareAnalysisProductId = _SmFirmwareAnalysisProductId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 11, 1, 2),
    _SmFirmwareAnalysisProductId_Type()
)
smFirmwareAnalysisProductId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFirmwareAnalysisProductId.setStatus("mandatory")
_SmFirmwareAnalysisProductName_Type = OctetString
_SmFirmwareAnalysisProductName_Object = MibTableColumn
smFirmwareAnalysisProductName = _SmFirmwareAnalysisProductName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 11, 1, 3),
    _SmFirmwareAnalysisProductName_Type()
)
smFirmwareAnalysisProductName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFirmwareAnalysisProductName.setStatus("mandatory")
_SmFirmwareAnalysisFirmwareType_Type = OctetString
_SmFirmwareAnalysisFirmwareType_Object = MibTableColumn
smFirmwareAnalysisFirmwareType = _SmFirmwareAnalysisFirmwareType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 11, 1, 4),
    _SmFirmwareAnalysisFirmwareType_Type()
)
smFirmwareAnalysisFirmwareType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFirmwareAnalysisFirmwareType.setStatus("mandatory")
_SmFirmwareAnalysisFirmwareVersion_Type = OctetString
_SmFirmwareAnalysisFirmwareVersion_Object = MibTableColumn
smFirmwareAnalysisFirmwareVersion = _SmFirmwareAnalysisFirmwareVersion_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 11, 1, 5),
    _SmFirmwareAnalysisFirmwareVersion_Type()
)
smFirmwareAnalysisFirmwareVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFirmwareAnalysisFirmwareVersion.setStatus("mandatory")
_SmFirmwareAnalysisReleaseDate_Type = OctetString
_SmFirmwareAnalysisReleaseDate_Object = MibTableColumn
smFirmwareAnalysisReleaseDate = _SmFirmwareAnalysisReleaseDate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 11, 1, 6),
    _SmFirmwareAnalysisReleaseDate_Type()
)
smFirmwareAnalysisReleaseDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFirmwareAnalysisReleaseDate.setStatus("mandatory")
_SmFirmwareAnalysisTopology_Type = OctetString
_SmFirmwareAnalysisTopology_Object = MibTableColumn
smFirmwareAnalysisTopology = _SmFirmwareAnalysisTopology_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 2, 11, 1, 7),
    _SmFirmwareAnalysisTopology_Type()
)
smFirmwareAnalysisTopology.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFirmwareAnalysisTopology.setStatus("mandatory")


class _ComponentInventoryReady_Type(Integer32):
    """Custom type componentInventoryReady based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("notReady", 0),
          ("ready", 1))
    )


_ComponentInventoryReady_Type.__name__ = "Integer32"
_ComponentInventoryReady_Object = MibScalar
componentInventoryReady = _ComponentInventoryReady_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 3),
    _ComponentInventoryReady_Type()
)
componentInventoryReady.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentInventoryReady.setStatus("mandatory")
_ComponentDriveTable_Object = MibTable
componentDriveTable = _ComponentDriveTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 10)
)
if mibBuilder.loadTexts:
    componentDriveTable.setStatus("mandatory")
_ComponentDriveEntry_Object = MibTableRow
componentDriveEntry = _ComponentDriveEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 10, 1)
)
componentDriveEntry.setIndexNames(
    (0, "CME-MIB", "componentDriveTopologyPath"),
)
if mibBuilder.loadTexts:
    componentDriveEntry.setStatus("mandatory")


class _ComponentDriveTopologyPath_Type(OctetString):
    """Custom type componentDriveTopologyPath based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_ComponentDriveTopologyPath_Type.__name__ = "OctetString"
_ComponentDriveTopologyPath_Object = MibTableColumn
componentDriveTopologyPath = _ComponentDriveTopologyPath_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 10, 1, 1),
    _ComponentDriveTopologyPath_Type()
)
componentDriveTopologyPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentDriveTopologyPath.setStatus("mandatory")
_ComponentDriveDescription_Type = OctetString
_ComponentDriveDescription_Object = MibTableColumn
componentDriveDescription = _ComponentDriveDescription_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 10, 1, 2),
    _ComponentDriveDescription_Type()
)
componentDriveDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentDriveDescription.setStatus("mandatory")
_ComponentDriveTableCacheTimeout_Type = Integer32
_ComponentDriveTableCacheTimeout_Object = MibScalar
componentDriveTableCacheTimeout = _ComponentDriveTableCacheTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 23, 11),
    _ComponentDriveTableCacheTimeout_Type()
)
componentDriveTableCacheTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentDriveTableCacheTimeout.setStatus("mandatory")
_LicenseKeyInfo_ObjectIdentity = ObjectIdentity
licenseKeyInfo = _LicenseKeyInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30)
)
_LicenseKeyInfoTable_Object = MibTable
licenseKeyInfoTable = _LicenseKeyInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 1)
)
if mibBuilder.loadTexts:
    licenseKeyInfoTable.setStatus("mandatory")
_LicenseKeyInfoEntry_Object = MibTableRow
licenseKeyInfoEntry = _LicenseKeyInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 1, 1)
)
licenseKeyInfoEntry.setIndexNames(
    (0, "CME-MIB", "licenseKeyComponentIndex"),
    (0, "CME-MIB", "licenseKeyIndex"),
)
if mibBuilder.loadTexts:
    licenseKeyInfoEntry.setStatus("mandatory")


class _LicenseKeyComponentIndex_Type(Integer32):
    """Custom type licenseKeyComponentIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              41,
              42,
              43,
              44)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14),
          ("switchModule1", 41),
          ("switchModule2", 42),
          ("switchModule3", 43),
          ("switchModule4", 44))
    )


_LicenseKeyComponentIndex_Type.__name__ = "Integer32"
_LicenseKeyComponentIndex_Object = MibTableColumn
licenseKeyComponentIndex = _LicenseKeyComponentIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 1, 1, 1),
    _LicenseKeyComponentIndex_Type()
)
licenseKeyComponentIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    licenseKeyComponentIndex.setStatus("mandatory")


class _LicenseKeyIndex_Type(Integer32):
    """Custom type licenseKeyIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_LicenseKeyIndex_Type.__name__ = "Integer32"
_LicenseKeyIndex_Object = MibTableColumn
licenseKeyIndex = _LicenseKeyIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 1, 1, 2),
    _LicenseKeyIndex_Type()
)
licenseKeyIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    licenseKeyIndex.setStatus("mandatory")
_LicenseKeyDescription_Type = OctetString
_LicenseKeyDescription_Object = MibTableColumn
licenseKeyDescription = _LicenseKeyDescription_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 1, 1, 3),
    _LicenseKeyDescription_Type()
)
licenseKeyDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    licenseKeyDescription.setStatus("mandatory")
_LicenseKeyTimestamp_Type = OctetString
_LicenseKeyTimestamp_Object = MibTableColumn
licenseKeyTimestamp = _LicenseKeyTimestamp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 1, 1, 4),
    _LicenseKeyTimestamp_Type()
)
licenseKeyTimestamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    licenseKeyTimestamp.setStatus("mandatory")
_LicenseKeyLicenseID_Type = OctetString
_LicenseKeyLicenseID_Object = MibTableColumn
licenseKeyLicenseID = _LicenseKeyLicenseID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 1, 1, 5),
    _LicenseKeyLicenseID_Type()
)
licenseKeyLicenseID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    licenseKeyLicenseID.setStatus("mandatory")
_LicenseKeyOtherInfo_Type = OctetString
_LicenseKeyOtherInfo_Object = MibTableColumn
licenseKeyOtherInfo = _LicenseKeyOtherInfo_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 1, 1, 6),
    _LicenseKeyOtherInfo_Type()
)
licenseKeyOtherInfo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    licenseKeyOtherInfo.setStatus("mandatory")


class _LicenseKeyStatus_Type(Integer32):
    """Custom type licenseKeyStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              99)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("valid", 1),
          ("invalid", 2),
          ("expired", 3),
          ("usageExceeded", 4),
          ("notApplicable", 99))
    )


_LicenseKeyStatus_Type.__name__ = "Integer32"
_LicenseKeyStatus_Object = MibTableColumn
licenseKeyStatus = _LicenseKeyStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 1, 1, 7),
    _LicenseKeyStatus_Type()
)
licenseKeyStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    licenseKeyStatus.setStatus("mandatory")
_ChassisLicenseKeyTable_Object = MibTable
chassisLicenseKeyTable = _ChassisLicenseKeyTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 5)
)
if mibBuilder.loadTexts:
    chassisLicenseKeyTable.setStatus("mandatory")
_ChassisLicenseKeyEntry_Object = MibTableRow
chassisLicenseKeyEntry = _ChassisLicenseKeyEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 5, 1)
)
chassisLicenseKeyEntry.setIndexNames(
    (0, "CME-MIB", "chassisLicenseKeyIndex"),
)
if mibBuilder.loadTexts:
    chassisLicenseKeyEntry.setStatus("mandatory")


class _ChassisLicenseKeyIndex_Type(Integer32):
    """Custom type chassisLicenseKeyIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_ChassisLicenseKeyIndex_Type.__name__ = "Integer32"
_ChassisLicenseKeyIndex_Object = MibTableColumn
chassisLicenseKeyIndex = _ChassisLicenseKeyIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 5, 1, 1),
    _ChassisLicenseKeyIndex_Type()
)
chassisLicenseKeyIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisLicenseKeyIndex.setStatus("mandatory")
_ChassisLicenseKeyFeature_Type = OctetString
_ChassisLicenseKeyFeature_Object = MibTableColumn
chassisLicenseKeyFeature = _ChassisLicenseKeyFeature_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 5, 1, 2),
    _ChassisLicenseKeyFeature_Type()
)
chassisLicenseKeyFeature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisLicenseKeyFeature.setStatus("mandatory")
_ChassisLicenseKeyFeatureType_Type = OctetString
_ChassisLicenseKeyFeatureType_Object = MibTableColumn
chassisLicenseKeyFeatureType = _ChassisLicenseKeyFeatureType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 5, 1, 3),
    _ChassisLicenseKeyFeatureType_Type()
)
chassisLicenseKeyFeatureType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisLicenseKeyFeatureType.setStatus("mandatory")
_ChassisLicenseKeyDescription_Type = OctetString
_ChassisLicenseKeyDescription_Object = MibTableColumn
chassisLicenseKeyDescription = _ChassisLicenseKeyDescription_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 5, 1, 4),
    _ChassisLicenseKeyDescription_Type()
)
chassisLicenseKeyDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisLicenseKeyDescription.setStatus("mandatory")
_ChassisLicenseKeySystem_Type = OctetString
_ChassisLicenseKeySystem_Object = MibTableColumn
chassisLicenseKeySystem = _ChassisLicenseKeySystem_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 5, 1, 5),
    _ChassisLicenseKeySystem_Type()
)
chassisLicenseKeySystem.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisLicenseKeySystem.setStatus("mandatory")
_ChassisLicenseKeyLicenseID_Type = OctetString
_ChassisLicenseKeyLicenseID_Object = MibTableColumn
chassisLicenseKeyLicenseID = _ChassisLicenseKeyLicenseID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 5, 1, 6),
    _ChassisLicenseKeyLicenseID_Type()
)
chassisLicenseKeyLicenseID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisLicenseKeyLicenseID.setStatus("mandatory")
_ChassisLicenseKeyValidation_Type = OctetString
_ChassisLicenseKeyValidation_Object = MibTableColumn
chassisLicenseKeyValidation = _ChassisLicenseKeyValidation_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 5, 1, 7),
    _ChassisLicenseKeyValidation_Type()
)
chassisLicenseKeyValidation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisLicenseKeyValidation.setStatus("mandatory")


class _ChassisLicenseKeyStatus_Type(Integer32):
    """Custom type chassisLicenseKeyStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("valid", 0),
          ("validatingKey", 1),
          ("invalidMTSN", 2),
          ("invalidMAC", 3),
          ("signatureValidationFailed", 4),
          ("keyExpired", 5),
          ("usageExceeded", 6),
          ("validateElsewhere", 7),
          ("notApplicable", 8))
    )


_ChassisLicenseKeyStatus_Type.__name__ = "Integer32"
_ChassisLicenseKeyStatus_Object = MibTableColumn
chassisLicenseKeyStatus = _ChassisLicenseKeyStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 5, 1, 8),
    _ChassisLicenseKeyStatus_Type()
)
chassisLicenseKeyStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisLicenseKeyStatus.setStatus("mandatory")
_ChassisLicenseKeyTimeLimit_Type = OctetString
_ChassisLicenseKeyTimeLimit_Object = MibTableColumn
chassisLicenseKeyTimeLimit = _ChassisLicenseKeyTimeLimit_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 5, 1, 9),
    _ChassisLicenseKeyTimeLimit_Type()
)
chassisLicenseKeyTimeLimit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisLicenseKeyTimeLimit.setStatus("mandatory")
_ChassisLicenseKeyUsageLimit_Type = Integer32
_ChassisLicenseKeyUsageLimit_Object = MibTableColumn
chassisLicenseKeyUsageLimit = _ChassisLicenseKeyUsageLimit_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 2, 30, 5, 1, 10),
    _ChassisLicenseKeyUsageLimit_Type()
)
chassisLicenseKeyUsageLimit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisLicenseKeyUsageLimit.setStatus("mandatory")
_ErrorLogs_ObjectIdentity = ObjectIdentity
errorLogs = _ErrorLogs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3)
)
_EventLog_ObjectIdentity = ObjectIdentity
eventLog = _EventLog_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4)
)
_ReadEventLogTable_Object = MibTable
readEventLogTable = _ReadEventLogTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 2)
)
if mibBuilder.loadTexts:
    readEventLogTable.setStatus("mandatory")
_ReadEventLogEntry_Object = MibTableRow
readEventLogEntry = _ReadEventLogEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 2, 1)
)
readEventLogEntry.setIndexNames(
    (0, "CME-MIB", "readEventLogIndex"),
)
if mibBuilder.loadTexts:
    readEventLogEntry.setStatus("mandatory")
_ReadEventLogIndex_Type = Integer32
_ReadEventLogIndex_Object = MibTableColumn
readEventLogIndex = _ReadEventLogIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 2, 1, 1),
    _ReadEventLogIndex_Type()
)
readEventLogIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    readEventLogIndex.setStatus("mandatory")
_ReadEventLogString_Type = OctetString
_ReadEventLogString_Object = MibTableColumn
readEventLogString = _ReadEventLogString_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 2, 1, 2),
    _ReadEventLogString_Type()
)
readEventLogString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    readEventLogString.setStatus("mandatory")


class _ClearEventLog_Type(Integer32):
    """Custom type clearEventLog based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_ClearEventLog_Type.__name__ = "Integer32"
_ClearEventLog_Object = MibScalar
clearEventLog = _ClearEventLog_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 3),
    _ClearEventLog_Type()
)
clearEventLog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    clearEventLog.setStatus("mandatory")


class _MonitorLogStateEvents_Type(Integer32):
    """Custom type monitorLogStateEvents based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MonitorLogStateEvents_Type.__name__ = "Integer32"
_MonitorLogStateEvents_Object = MibScalar
monitorLogStateEvents = _MonitorLogStateEvents_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 4),
    _MonitorLogStateEvents_Type()
)
monitorLogStateEvents.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    monitorLogStateEvents.setStatus("mandatory")
_ReadEnhancedEventLogTable_Object = MibTable
readEnhancedEventLogTable = _ReadEnhancedEventLogTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 6)
)
if mibBuilder.loadTexts:
    readEnhancedEventLogTable.setStatus("mandatory")
_ReadEnhancedEventLogEntry_Object = MibTableRow
readEnhancedEventLogEntry = _ReadEnhancedEventLogEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 6, 1)
)
readEnhancedEventLogEntry.setIndexNames(
    (0, "CME-MIB", "readEnhancedEventLogNumber"),
)
if mibBuilder.loadTexts:
    readEnhancedEventLogEntry.setStatus("mandatory")


class _ReadEnhancedEventLogNumber_Type(Unsigned32):
    """Custom type readEnhancedEventLogNumber based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_ReadEnhancedEventLogNumber_Type.__name__ = "Unsigned32"
_ReadEnhancedEventLogNumber_Object = MibTableColumn
readEnhancedEventLogNumber = _ReadEnhancedEventLogNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 6, 1, 1),
    _ReadEnhancedEventLogNumber_Type()
)
readEnhancedEventLogNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    readEnhancedEventLogNumber.setStatus("mandatory")
_ReadEnhancedEventLogAttribute_Type = OctetString
_ReadEnhancedEventLogAttribute_Object = MibTableColumn
readEnhancedEventLogAttribute = _ReadEnhancedEventLogAttribute_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 6, 1, 2),
    _ReadEnhancedEventLogAttribute_Type()
)
readEnhancedEventLogAttribute.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    readEnhancedEventLogAttribute.setStatus("mandatory")
_ReadEnhancedEventLogMessage_Type = OctetString
_ReadEnhancedEventLogMessage_Object = MibTableColumn
readEnhancedEventLogMessage = _ReadEnhancedEventLogMessage_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 6, 1, 3),
    _ReadEnhancedEventLogMessage_Type()
)
readEnhancedEventLogMessage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    readEnhancedEventLogMessage.setStatus("mandatory")


class _ReadEnhancedEventLogSequenceNum_Type(Unsigned32):
    """Custom type readEnhancedEventLogSequenceNum based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_ReadEnhancedEventLogSequenceNum_Type.__name__ = "Unsigned32"
_ReadEnhancedEventLogSequenceNum_Object = MibTableColumn
readEnhancedEventLogSequenceNum = _ReadEnhancedEventLogSequenceNum_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 6, 1, 4),
    _ReadEnhancedEventLogSequenceNum_Type()
)
readEnhancedEventLogSequenceNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    readEnhancedEventLogSequenceNum.setStatus("mandatory")
_ReadAuditLogTable_Object = MibTable
readAuditLogTable = _ReadAuditLogTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 10)
)
if mibBuilder.loadTexts:
    readAuditLogTable.setStatus("mandatory")
_ReadAuditLogEntry_Object = MibTableRow
readAuditLogEntry = _ReadAuditLogEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 10, 1)
)
readAuditLogEntry.setIndexNames(
    (0, "CME-MIB", "readAuditLogNumber"),
)
if mibBuilder.loadTexts:
    readAuditLogEntry.setStatus("mandatory")


class _ReadAuditLogNumber_Type(Unsigned32):
    """Custom type readAuditLogNumber based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_ReadAuditLogNumber_Type.__name__ = "Unsigned32"
_ReadAuditLogNumber_Object = MibTableColumn
readAuditLogNumber = _ReadAuditLogNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 10, 1, 1),
    _ReadAuditLogNumber_Type()
)
readAuditLogNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    readAuditLogNumber.setStatus("mandatory")
_ReadAuditLogAttribute_Type = OctetString
_ReadAuditLogAttribute_Object = MibTableColumn
readAuditLogAttribute = _ReadAuditLogAttribute_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 10, 1, 2),
    _ReadAuditLogAttribute_Type()
)
readAuditLogAttribute.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    readAuditLogAttribute.setStatus("mandatory")
_ReadAuditLogMessage_Type = OctetString
_ReadAuditLogMessage_Object = MibTableColumn
readAuditLogMessage = _ReadAuditLogMessage_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 10, 1, 3),
    _ReadAuditLogMessage_Type()
)
readAuditLogMessage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    readAuditLogMessage.setStatus("mandatory")


class _ReadAuditLogSequenceNum_Type(Unsigned32):
    """Custom type readAuditLogSequenceNum based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_ReadAuditLogSequenceNum_Type.__name__ = "Unsigned32"
_ReadAuditLogSequenceNum_Object = MibTableColumn
readAuditLogSequenceNum = _ReadAuditLogSequenceNum_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 10, 1, 4),
    _ReadAuditLogSequenceNum_Type()
)
readAuditLogSequenceNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    readAuditLogSequenceNum.setStatus("mandatory")


class _ClearAuditLog_Type(Integer32):
    """Custom type clearAuditLog based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_ClearAuditLog_Type.__name__ = "Integer32"
_ClearAuditLog_Object = MibScalar
clearAuditLog = _ClearAuditLog_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 11),
    _ClearAuditLog_Type()
)
clearAuditLog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    clearAuditLog.setStatus("mandatory")
_ReadSystemLogTable_Object = MibTable
readSystemLogTable = _ReadSystemLogTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 12)
)
if mibBuilder.loadTexts:
    readSystemLogTable.setStatus("mandatory")
_ReadSystemLogEntry_Object = MibTableRow
readSystemLogEntry = _ReadSystemLogEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 12, 1)
)
readSystemLogEntry.setIndexNames(
    (0, "CME-MIB", "readSystemLogNumber"),
)
if mibBuilder.loadTexts:
    readSystemLogEntry.setStatus("mandatory")


class _ReadSystemLogNumber_Type(Unsigned32):
    """Custom type readSystemLogNumber based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_ReadSystemLogNumber_Type.__name__ = "Unsigned32"
_ReadSystemLogNumber_Object = MibTableColumn
readSystemLogNumber = _ReadSystemLogNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 12, 1, 1),
    _ReadSystemLogNumber_Type()
)
readSystemLogNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    readSystemLogNumber.setStatus("mandatory")
_ReadSystemLogAttribute_Type = OctetString
_ReadSystemLogAttribute_Object = MibTableColumn
readSystemLogAttribute = _ReadSystemLogAttribute_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 12, 1, 2),
    _ReadSystemLogAttribute_Type()
)
readSystemLogAttribute.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    readSystemLogAttribute.setStatus("mandatory")
_ReadSystemLogMessage_Type = OctetString
_ReadSystemLogMessage_Object = MibTableColumn
readSystemLogMessage = _ReadSystemLogMessage_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 12, 1, 3),
    _ReadSystemLogMessage_Type()
)
readSystemLogMessage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    readSystemLogMessage.setStatus("mandatory")


class _ReadSystemLogSequenceNum_Type(Unsigned32):
    """Custom type readSystemLogSequenceNum based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_ReadSystemLogSequenceNum_Type.__name__ = "Unsigned32"
_ReadSystemLogSequenceNum_Object = MibTableColumn
readSystemLogSequenceNum = _ReadSystemLogSequenceNum_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 12, 1, 4),
    _ReadSystemLogSequenceNum_Type()
)
readSystemLogSequenceNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    readSystemLogSequenceNum.setStatus("mandatory")


class _ClearSystemLog_Type(Integer32):
    """Custom type clearSystemLog based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_ClearSystemLog_Type.__name__ = "Integer32"
_ClearSystemLog_Object = MibScalar
clearSystemLog = _ClearSystemLog_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 13),
    _ClearSystemLog_Type()
)
clearSystemLog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    clearSystemLog.setStatus("mandatory")
_ReadEventLogAuxTable_Object = MibTable
readEventLogAuxTable = _ReadEventLogAuxTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 14)
)
if mibBuilder.loadTexts:
    readEventLogAuxTable.setStatus("mandatory")
_ReadEventLogAuxEntry_Object = MibTableRow
readEventLogAuxEntry = _ReadEventLogAuxEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 14, 1)
)
readEventLogAuxEntry.setIndexNames(
    (0, "CME-MIB", "readEventLogAuxNumber"),
)
if mibBuilder.loadTexts:
    readEventLogAuxEntry.setStatus("mandatory")
_ReadEventLogAuxNumber_Type = Integer32
_ReadEventLogAuxNumber_Object = MibTableColumn
readEventLogAuxNumber = _ReadEventLogAuxNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 14, 1, 1),
    _ReadEventLogAuxNumber_Type()
)
readEventLogAuxNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    readEventLogAuxNumber.setStatus("mandatory")


class _ReadEventLogAuxSequenceNum_Type(Unsigned32):
    """Custom type readEventLogAuxSequenceNum based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_ReadEventLogAuxSequenceNum_Type.__name__ = "Unsigned32"
_ReadEventLogAuxSequenceNum_Object = MibTableColumn
readEventLogAuxSequenceNum = _ReadEventLogAuxSequenceNum_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 14, 1, 2),
    _ReadEventLogAuxSequenceNum_Type()
)
readEventLogAuxSequenceNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    readEventLogAuxSequenceNum.setStatus("mandatory")
_ReadEventLogAuxMessage_Type = OctetString
_ReadEventLogAuxMessage_Object = MibTableColumn
readEventLogAuxMessage = _ReadEventLogAuxMessage_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 3, 4, 14, 1, 3),
    _ReadEventLogAuxMessage_Type()
)
readEventLogAuxMessage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    readEventLogAuxMessage.setStatus("mandatory")
_ConfigureSP_ObjectIdentity = ObjectIdentity
configureSP = _ConfigureSP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4)
)
_RemoteAccessConfig_ObjectIdentity = ObjectIdentity
remoteAccessConfig = _RemoteAccessConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1)
)
_GeneralRemoteCfg_ObjectIdentity = ObjectIdentity
generalRemoteCfg = _GeneralRemoteCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1)
)


class _RemoteAlertRetryDelay_Type(Integer32):
    """Custom type remoteAlertRetryDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(30,
              60,
              90,
              120,
              150,
              180,
              210,
              240)
        )
    )
    namedValues = NamedValues(
        *(("oneHalfMinute", 30),
          ("oneMinute", 60),
          ("oneAndHalfMinutes", 90),
          ("twoMinutes", 120),
          ("twoAndHalfMinutes", 150),
          ("threeMinutes", 180),
          ("threeAndHalfMinutes", 210),
          ("fourMinutes", 240))
    )


_RemoteAlertRetryDelay_Type.__name__ = "Integer32"
_RemoteAlertRetryDelay_Object = MibScalar
remoteAlertRetryDelay = _RemoteAlertRetryDelay_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 3),
    _RemoteAlertRetryDelay_Type()
)
remoteAlertRetryDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remoteAlertRetryDelay.setStatus("mandatory")


class _RemoteAlertRetryCount_Type(Integer32):
    """Custom type remoteAlertRetryCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("noretry", 0),
          ("retry1", 1),
          ("retry2", 2),
          ("retry3", 3),
          ("retry4", 4),
          ("retry5", 5),
          ("retry6", 6),
          ("retry7", 7),
          ("retry8", 8))
    )


_RemoteAlertRetryCount_Type.__name__ = "Integer32"
_RemoteAlertRetryCount_Object = MibScalar
remoteAlertRetryCount = _RemoteAlertRetryCount_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 4),
    _RemoteAlertRetryCount_Type()
)
remoteAlertRetryCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remoteAlertRetryCount.setStatus("mandatory")


class _UserAuthenticationMethod_Type(Integer32):
    """Custom type userAuthenticationMethod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("localOnly", 0),
          ("ldapOnly", 1),
          ("localFirstThenLdap", 2),
          ("ldapFirstThenLocal", 3))
    )


_UserAuthenticationMethod_Type.__name__ = "Integer32"
_UserAuthenticationMethod_Object = MibScalar
userAuthenticationMethod = _UserAuthenticationMethod_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 7),
    _UserAuthenticationMethod_Type()
)
userAuthenticationMethod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    userAuthenticationMethod.setStatus("mandatory")
_MaxSessionsPerLDAPUser_Type = Integer32
_MaxSessionsPerLDAPUser_Object = MibScalar
maxSessionsPerLDAPUser = _MaxSessionsPerLDAPUser_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 9),
    _MaxSessionsPerLDAPUser_Type()
)
maxSessionsPerLDAPUser.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    maxSessionsPerLDAPUser.setStatus("mandatory")


class _AuthenticationLoggingTimeout_Type(Integer32):
    """Custom type authenticationLoggingTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              255)
        )
    )
    namedValues = NamedValues(
        *(("logAll", 0),
          ("fiveSeconds", 1),
          ("thirtySeconds", 2),
          ("oneMinute", 3),
          ("fiveMinutes", 4),
          ("tenMinutes", 5),
          ("thirtyMinutes", 6),
          ("oneHour", 7),
          ("twelveHours", 8),
          ("oneDay", 9),
          ("logNone", 255))
    )


_AuthenticationLoggingTimeout_Type.__name__ = "Integer32"
_AuthenticationLoggingTimeout_Object = MibScalar
authenticationLoggingTimeout = _AuthenticationLoggingTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 10),
    _AuthenticationLoggingTimeout_Type()
)
authenticationLoggingTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    authenticationLoggingTimeout.setStatus("mandatory")


class _TrackingIP_Type(Integer32):
    """Custom type trackingIP based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_TrackingIP_Type.__name__ = "Integer32"
_TrackingIP_Object = MibScalar
trackingIP = _TrackingIP_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 11),
    _TrackingIP_Type()
)
trackingIP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    trackingIP.setStatus("mandatory")
_AccountSecurityManagement_ObjectIdentity = ObjectIdentity
accountSecurityManagement = _AccountSecurityManagement_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20)
)


class _AccountSecurityLevel_Type(Integer32):
    """Custom type accountSecurityLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("legacy", 0),
          ("high", 1),
          ("custom", 2))
    )


_AccountSecurityLevel_Type.__name__ = "Integer32"
_AccountSecurityLevel_Object = MibScalar
accountSecurityLevel = _AccountSecurityLevel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 1),
    _AccountSecurityLevel_Type()
)
accountSecurityLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    accountSecurityLevel.setStatus("mandatory")
_CustomSecuritySettings_ObjectIdentity = ObjectIdentity
customSecuritySettings = _CustomSecuritySettings_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2)
)
_PasswordExpirationPeriod_Type = Integer32
_PasswordExpirationPeriod_Object = MibScalar
passwordExpirationPeriod = _PasswordExpirationPeriod_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 2),
    _PasswordExpirationPeriod_Type()
)
passwordExpirationPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    passwordExpirationPeriod.setStatus("mandatory")


class _DefaultAdminPasswordExpired_Type(Integer32):
    """Custom type defaultAdminPasswordExpired based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_DefaultAdminPasswordExpired_Type.__name__ = "Integer32"
_DefaultAdminPasswordExpired_Object = MibScalar
defaultAdminPasswordExpired = _DefaultAdminPasswordExpired_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 3),
    _DefaultAdminPasswordExpired_Type()
)
defaultAdminPasswordExpired.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    defaultAdminPasswordExpired.setStatus("mandatory")


class _MinimumPasswordReuseCycle_Type(Integer32):
    """Custom type minimumPasswordReuseCycle based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("onePassword", 1),
          ("twoPasswords", 2),
          ("threePasswords", 3),
          ("fourPasswords", 4),
          ("fivePasswords", 5))
    )


_MinimumPasswordReuseCycle_Type.__name__ = "Integer32"
_MinimumPasswordReuseCycle_Object = MibScalar
minimumPasswordReuseCycle = _MinimumPasswordReuseCycle_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 4),
    _MinimumPasswordReuseCycle_Type()
)
minimumPasswordReuseCycle.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    minimumPasswordReuseCycle.setStatus("mandatory")


class _ComplexPasswordRules_Type(Integer32):
    """Custom type complexPasswordRules based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_ComplexPasswordRules_Type.__name__ = "Integer32"
_ComplexPasswordRules_Object = MibScalar
complexPasswordRules = _ComplexPasswordRules_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 5),
    _ComplexPasswordRules_Type()
)
complexPasswordRules.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    complexPasswordRules.setStatus("mandatory")


class _MinimumDiffCharsPassword_Type(Integer32):
    """Custom type minimumDiffCharsPassword based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("oneChar", 1),
          ("twoChars", 2),
          ("threeChars", 3),
          ("fourChars", 4),
          ("fiveChars", 5),
          ("sixChars", 6),
          ("sevenChars", 7),
          ("eightChars", 8),
          ("nineChars", 9),
          ("tenChars", 10),
          ("elevenChars", 11),
          ("twelveChars", 12),
          ("thirteenChars", 13),
          ("fourteenChars", 14),
          ("fifteenChars", 15))
    )


_MinimumDiffCharsPassword_Type.__name__ = "Integer32"
_MinimumDiffCharsPassword_Object = MibScalar
minimumDiffCharsPassword = _MinimumDiffCharsPassword_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 6),
    _MinimumDiffCharsPassword_Type()
)
minimumDiffCharsPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    minimumDiffCharsPassword.setStatus("mandatory")


class _ChangePasswordFirstAccess_Type(Integer32):
    """Custom type changePasswordFirstAccess based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_ChangePasswordFirstAccess_Type.__name__ = "Integer32"
_ChangePasswordFirstAccess_Object = MibScalar
changePasswordFirstAccess = _ChangePasswordFirstAccess_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 7),
    _ChangePasswordFirstAccess_Type()
)
changePasswordFirstAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    changePasswordFirstAccess.setStatus("mandatory")
_InactivityAlertPeriod_Type = Integer32
_InactivityAlertPeriod_Object = MibScalar
inactivityAlertPeriod = _InactivityAlertPeriod_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 8),
    _InactivityAlertPeriod_Type()
)
inactivityAlertPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    inactivityAlertPeriod.setStatus("mandatory")
_InactivityAlertDisablePeriod_Type = Integer32
_InactivityAlertDisablePeriod_Object = MibScalar
inactivityAlertDisablePeriod = _InactivityAlertDisablePeriod_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 9),
    _InactivityAlertDisablePeriod_Type()
)
inactivityAlertDisablePeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    inactivityAlertDisablePeriod.setStatus("mandatory")
_LockoutPeriod_Type = Integer32
_LockoutPeriod_Object = MibScalar
lockoutPeriod = _LockoutPeriod_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 10),
    _LockoutPeriod_Type()
)
lockoutPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lockoutPeriod.setStatus("mandatory")


class _MaxLoginFailures_Type(Integer32):
    """Custom type maxLoginFailures based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("oneTime", 1),
          ("twoTimes", 2),
          ("threeTimes", 3),
          ("fourTimes", 4),
          ("fiveTimes", 5),
          ("sixTimes", 6),
          ("sevenTimes", 7),
          ("eightTimes", 8),
          ("nineTimes", 9),
          ("tenTimes", 10))
    )


_MaxLoginFailures_Type.__name__ = "Integer32"
_MaxLoginFailures_Object = MibScalar
maxLoginFailures = _MaxLoginFailures_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 11),
    _MaxLoginFailures_Type()
)
maxLoginFailures.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    maxLoginFailures.setStatus("mandatory")
_PasswordChangeInterval_Type = Integer32
_PasswordChangeInterval_Object = MibScalar
passwordChangeInterval = _PasswordChangeInterval_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 1, 20, 2, 12),
    _PasswordChangeInterval_Type()
)
passwordChangeInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    passwordChangeInterval.setStatus("mandatory")
_SerialPortCfg_ObjectIdentity = ObjectIdentity
serialPortCfg = _SerialPortCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 2)
)


class _PortBaud_Type(Integer32):
    """Custom type portBaud based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              7,
              15,
              23,
              47)
        )
    )
    namedValues = NamedValues(
        *(("baud2400", 0),
          ("baud4800", 1),
          ("baud9600", 3),
          ("baud19200", 7),
          ("baud38400", 15),
          ("baud57600", 23),
          ("baud115200", 47))
    )


_PortBaud_Type.__name__ = "Integer32"
_PortBaud_Object = MibScalar
portBaud = _PortBaud_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 2, 1),
    _PortBaud_Type()
)
portBaud.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portBaud.setStatus("mandatory")


class _PortParity_Type(Integer32):
    """Custom type portParity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              5,
              7)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("odd", 1),
          ("even", 3),
          ("mark", 5),
          ("space", 7))
    )


_PortParity_Type.__name__ = "Integer32"
_PortParity_Object = MibScalar
portParity = _PortParity_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 2, 2),
    _PortParity_Type()
)
portParity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portParity.setStatus("mandatory")


class _PortStopBits_Type(Integer32):
    """Custom type portStopBits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("oneStopbit", 0),
          ("twoOrOnePtFive", 1))
    )


_PortStopBits_Type.__name__ = "Integer32"
_PortStopBits_Object = MibScalar
portStopBits = _PortStopBits_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 2, 3),
    _PortStopBits_Type()
)
portStopBits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portStopBits.setStatus("mandatory")
_RemoteAlertIds_ObjectIdentity = ObjectIdentity
remoteAlertIds = _RemoteAlertIds_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3)
)
_RemoteAlertIdsTable_Object = MibTable
remoteAlertIdsTable = _RemoteAlertIdsTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1)
)
if mibBuilder.loadTexts:
    remoteAlertIdsTable.setStatus("mandatory")
_RemoteAlertIdsEntry_Object = MibTableRow
remoteAlertIdsEntry = _RemoteAlertIdsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1)
)
remoteAlertIdsEntry.setIndexNames(
    (0, "CME-MIB", "remoteAlertIdEntryIndex"),
)
if mibBuilder.loadTexts:
    remoteAlertIdsEntry.setStatus("mandatory")
_RemoteAlertIdEntryIndex_Type = Integer32
_RemoteAlertIdEntryIndex_Object = MibTableColumn
remoteAlertIdEntryIndex = _RemoteAlertIdEntryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1, 1),
    _RemoteAlertIdEntryIndex_Type()
)
remoteAlertIdEntryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    remoteAlertIdEntryIndex.setStatus("mandatory")


class _RemoteAlertIdEntryStatus_Type(Integer32):
    """Custom type remoteAlertIdEntryStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 0),
          ("disabledAndValid", 1),
          ("enabledAndValid", 2))
    )


_RemoteAlertIdEntryStatus_Type.__name__ = "Integer32"
_RemoteAlertIdEntryStatus_Object = MibTableColumn
remoteAlertIdEntryStatus = _RemoteAlertIdEntryStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1, 2),
    _RemoteAlertIdEntryStatus_Type()
)
remoteAlertIdEntryStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remoteAlertIdEntryStatus.setStatus("mandatory")


class _RemoteAlertIdEntryIpOrHostAddress_Type(OctetString):
    """Custom type remoteAlertIdEntryIpOrHostAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 50),
    )


_RemoteAlertIdEntryIpOrHostAddress_Type.__name__ = "OctetString"
_RemoteAlertIdEntryIpOrHostAddress_Object = MibTableColumn
remoteAlertIdEntryIpOrHostAddress = _RemoteAlertIdEntryIpOrHostAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1, 3),
    _RemoteAlertIdEntryIpOrHostAddress_Type()
)
remoteAlertIdEntryIpOrHostAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remoteAlertIdEntryIpOrHostAddress.setStatus("mandatory")


class _RemoteAlertIdEntryTextDescription_Type(OctetString):
    """Custom type remoteAlertIdEntryTextDescription based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 50),
    )


_RemoteAlertIdEntryTextDescription_Type.__name__ = "OctetString"
_RemoteAlertIdEntryTextDescription_Object = MibTableColumn
remoteAlertIdEntryTextDescription = _RemoteAlertIdEntryTextDescription_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1, 4),
    _RemoteAlertIdEntryTextDescription_Type()
)
remoteAlertIdEntryTextDescription.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remoteAlertIdEntryTextDescription.setStatus("mandatory")


class _RemoteAlertIdEntryNotificationType_Type(Integer32):
    """Custom type remoteAlertIdEntryNotificationType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("snmpOverLan", 4),
          ("emailOverLan", 5))
    )


_RemoteAlertIdEntryNotificationType_Type.__name__ = "Integer32"
_RemoteAlertIdEntryNotificationType_Object = MibTableColumn
remoteAlertIdEntryNotificationType = _RemoteAlertIdEntryNotificationType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1, 5),
    _RemoteAlertIdEntryNotificationType_Type()
)
remoteAlertIdEntryNotificationType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remoteAlertIdEntryNotificationType.setStatus("mandatory")


class _RemoteAlertIdEmailAddr_Type(OctetString):
    """Custom type remoteAlertIdEmailAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_RemoteAlertIdEmailAddr_Type.__name__ = "OctetString"
_RemoteAlertIdEmailAddr_Object = MibTableColumn
remoteAlertIdEmailAddr = _RemoteAlertIdEmailAddr_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1, 9),
    _RemoteAlertIdEmailAddr_Type()
)
remoteAlertIdEmailAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remoteAlertIdEmailAddr.setStatus("mandatory")


class _RemoteAlertIdEntrySelectiveAlert_Type(Integer32):
    """Custom type remoteAlertIdEntrySelectiveAlert based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("critOnlyAlerts", 0),
          ("allAlerts", 1))
    )


_RemoteAlertIdEntrySelectiveAlert_Type.__name__ = "Integer32"
_RemoteAlertIdEntrySelectiveAlert_Object = MibTableColumn
remoteAlertIdEntrySelectiveAlert = _RemoteAlertIdEntrySelectiveAlert_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 1, 1, 13),
    _RemoteAlertIdEntrySelectiveAlert_Type()
)
remoteAlertIdEntrySelectiveAlert.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remoteAlertIdEntrySelectiveAlert.setStatus("mandatory")


class _GenerateTestAlert_Type(Integer32):
    """Custom type generateTestAlert based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_GenerateTestAlert_Type.__name__ = "Integer32"
_GenerateTestAlert_Object = MibScalar
generateTestAlert = _GenerateTestAlert_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 3, 30),
    _GenerateTestAlert_Type()
)
generateTestAlert.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    generateTestAlert.setStatus("mandatory")
_RemoteAccessIds_ObjectIdentity = ObjectIdentity
remoteAccessIds = _RemoteAccessIds_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4)
)
_RemoteAccessIdsTable_Object = MibTable
remoteAccessIdsTable = _RemoteAccessIdsTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1)
)
if mibBuilder.loadTexts:
    remoteAccessIdsTable.setStatus("mandatory")
_RemoteAccessIdsEntry_Object = MibTableRow
remoteAccessIdsEntry = _RemoteAccessIdsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1)
)
remoteAccessIdsEntry.setIndexNames(
    (0, "CME-MIB", "remoteAccessIdEntryIndex"),
)
if mibBuilder.loadTexts:
    remoteAccessIdsEntry.setStatus("mandatory")


class _RemoteAccessIdEntryIndex_Type(Integer32):
    """Custom type remoteAccessIdEntryIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RemoteAccessIdEntryIndex_Type.__name__ = "Integer32"
_RemoteAccessIdEntryIndex_Object = MibTableColumn
remoteAccessIdEntryIndex = _RemoteAccessIdEntryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 1),
    _RemoteAccessIdEntryIndex_Type()
)
remoteAccessIdEntryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    remoteAccessIdEntryIndex.setStatus("mandatory")


class _RemoteAccessIdEntryUserId_Type(OctetString):
    """Custom type remoteAccessIdEntryUserId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 33),
    )


_RemoteAccessIdEntryUserId_Type.__name__ = "OctetString"
_RemoteAccessIdEntryUserId_Object = MibTableColumn
remoteAccessIdEntryUserId = _RemoteAccessIdEntryUserId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 2),
    _RemoteAccessIdEntryUserId_Type()
)
remoteAccessIdEntryUserId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remoteAccessIdEntryUserId.setStatus("mandatory")


class _RemoteAccessIdEntryPassword_Type(OctetString):
    """Custom type remoteAccessIdEntryPassword based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 17),
    )


_RemoteAccessIdEntryPassword_Type.__name__ = "OctetString"
_RemoteAccessIdEntryPassword_Object = MibTableColumn
remoteAccessIdEntryPassword = _RemoteAccessIdEntryPassword_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 3),
    _RemoteAccessIdEntryPassword_Type()
)
remoteAccessIdEntryPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remoteAccessIdEntryPassword.setStatus("mandatory")
_RemoteAccessIdEntryPermgroups_Type = OctetString
_RemoteAccessIdEntryPermgroups_Object = MibTableColumn
remoteAccessIdEntryPermgroups = _RemoteAccessIdEntryPermgroups_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 10),
    _RemoteAccessIdEntryPermgroups_Type()
)
remoteAccessIdEntryPermgroups.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remoteAccessIdEntryPermgroups.setStatus("mandatory")


class _RemoteAccessIdEntryLoggedIn_Type(Integer32):
    """Custom type remoteAccessIdEntryLoggedIn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_RemoteAccessIdEntryLoggedIn_Type.__name__ = "Integer32"
_RemoteAccessIdEntryLoggedIn_Object = MibTableColumn
remoteAccessIdEntryLoggedIn = _RemoteAccessIdEntryLoggedIn_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 11),
    _RemoteAccessIdEntryLoggedIn_Type()
)
remoteAccessIdEntryLoggedIn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    remoteAccessIdEntryLoggedIn.setStatus("mandatory")
_RemoteAccessIdEntryLastLogin_Type = OctetString
_RemoteAccessIdEntryLastLogin_Object = MibTableColumn
remoteAccessIdEntryLastLogin = _RemoteAccessIdEntryLastLogin_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 12),
    _RemoteAccessIdEntryLastLogin_Type()
)
remoteAccessIdEntryLastLogin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    remoteAccessIdEntryLastLogin.setStatus("mandatory")


class _RemoteAccessIdEntryPwdCompliant_Type(Integer32):
    """Custom type remoteAccessIdEntryPwdCompliant based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_RemoteAccessIdEntryPwdCompliant_Type.__name__ = "Integer32"
_RemoteAccessIdEntryPwdCompliant_Object = MibTableColumn
remoteAccessIdEntryPwdCompliant = _RemoteAccessIdEntryPwdCompliant_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 13),
    _RemoteAccessIdEntryPwdCompliant_Type()
)
remoteAccessIdEntryPwdCompliant.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    remoteAccessIdEntryPwdCompliant.setStatus("mandatory")
_RemoteAccessIdEntryPwdExp_Type = OctetString
_RemoteAccessIdEntryPwdExp_Object = MibTableColumn
remoteAccessIdEntryPwdExp = _RemoteAccessIdEntryPwdExp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 14),
    _RemoteAccessIdEntryPwdExp_Type()
)
remoteAccessIdEntryPwdExp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    remoteAccessIdEntryPwdExp.setStatus("mandatory")


class _RemoteAccessIdEntryDormant_Type(Integer32):
    """Custom type remoteAccessIdEntryDormant based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_RemoteAccessIdEntryDormant_Type.__name__ = "Integer32"
_RemoteAccessIdEntryDormant_Object = MibTableColumn
remoteAccessIdEntryDormant = _RemoteAccessIdEntryDormant_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 15),
    _RemoteAccessIdEntryDormant_Type()
)
remoteAccessIdEntryDormant.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    remoteAccessIdEntryDormant.setStatus("mandatory")


class _RemoteAccessIdEntryState_Type(Integer32):
    """Custom type remoteAccessIdEntryState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("active", 1),
          ("locked", 2))
    )


_RemoteAccessIdEntryState_Type.__name__ = "Integer32"
_RemoteAccessIdEntryState_Object = MibTableColumn
remoteAccessIdEntryState = _RemoteAccessIdEntryState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 16),
    _RemoteAccessIdEntryState_Type()
)
remoteAccessIdEntryState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    remoteAccessIdEntryState.setStatus("mandatory")


class _RemoteAccessIdEntryAction_Type(Integer32):
    """Custom type remoteAccessIdEntryAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1),
          ("unlock", 2),
          ("notApplicable", 255))
    )


_RemoteAccessIdEntryAction_Type.__name__ = "Integer32"
_RemoteAccessIdEntryAction_Object = MibTableColumn
remoteAccessIdEntryAction = _RemoteAccessIdEntryAction_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 17),
    _RemoteAccessIdEntryAction_Type()
)
remoteAccessIdEntryAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remoteAccessIdEntryAction.setStatus("mandatory")
_RemoteAccessIdEntrySessionCount_Type = Integer32
_RemoteAccessIdEntrySessionCount_Object = MibTableColumn
remoteAccessIdEntrySessionCount = _RemoteAccessIdEntrySessionCount_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 18),
    _RemoteAccessIdEntrySessionCount_Type()
)
remoteAccessIdEntrySessionCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    remoteAccessIdEntrySessionCount.setStatus("mandatory")
_RemoteAccessIdEntryMaxSessions_Type = Integer32
_RemoteAccessIdEntryMaxSessions_Object = MibTableColumn
remoteAccessIdEntryMaxSessions = _RemoteAccessIdEntryMaxSessions_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 19),
    _RemoteAccessIdEntryMaxSessions_Type()
)
remoteAccessIdEntryMaxSessions.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remoteAccessIdEntryMaxSessions.setStatus("mandatory")
_RemoteAccessIdEntryStatus_Type = EntryStatus
_RemoteAccessIdEntryStatus_Object = MibTableColumn
remoteAccessIdEntryStatus = _RemoteAccessIdEntryStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 20),
    _RemoteAccessIdEntryStatus_Type()
)
remoteAccessIdEntryStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remoteAccessIdEntryStatus.setStatus("mandatory")


class _RemoteAccessIdEntryIPMIProvisioned_Type(Integer32):
    """Custom type remoteAccessIdEntryIPMIProvisioned based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_RemoteAccessIdEntryIPMIProvisioned_Type.__name__ = "Integer32"
_RemoteAccessIdEntryIPMIProvisioned_Object = MibTableColumn
remoteAccessIdEntryIPMIProvisioned = _RemoteAccessIdEntryIPMIProvisioned_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 21),
    _RemoteAccessIdEntryIPMIProvisioned_Type()
)
remoteAccessIdEntryIPMIProvisioned.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remoteAccessIdEntryIPMIProvisioned.setStatus("mandatory")


class _RemoteAccessIdEntrySNMPv3Provisioned_Type(Integer32):
    """Custom type remoteAccessIdEntrySNMPv3Provisioned based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_RemoteAccessIdEntrySNMPv3Provisioned_Type.__name__ = "Integer32"
_RemoteAccessIdEntrySNMPv3Provisioned_Object = MibTableColumn
remoteAccessIdEntrySNMPv3Provisioned = _RemoteAccessIdEntrySNMPv3Provisioned_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 1, 1, 22),
    _RemoteAccessIdEntrySNMPv3Provisioned_Type()
)
remoteAccessIdEntrySNMPv3Provisioned.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remoteAccessIdEntrySNMPv3Provisioned.setStatus("mandatory")
_RemoteAccessRBSroleTable_Object = MibTable
remoteAccessRBSroleTable = _RemoteAccessRBSroleTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3)
)
if mibBuilder.loadTexts:
    remoteAccessRBSroleTable.setStatus("mandatory")
_RemoteAccessRBSroleEntry_Object = MibTableRow
remoteAccessRBSroleEntry = _RemoteAccessRBSroleEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1)
)
remoteAccessRBSroleEntry.setIndexNames(
    (0, "CME-MIB", "roleIndex"),
)
if mibBuilder.loadTexts:
    remoteAccessRBSroleEntry.setStatus("mandatory")


class _RoleIndex_Type(Integer32):
    """Custom type roleIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RoleIndex_Type.__name__ = "Integer32"
_RoleIndex_Object = MibTableColumn
roleIndex = _RoleIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 1),
    _RoleIndex_Type()
)
roleIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    roleIndex.setStatus("mandatory")


class _RoleId_Type(OctetString):
    """Custom type roleId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 63),
    )


_RoleId_Type.__name__ = "OctetString"
_RoleId_Object = MibTableColumn
roleId = _RoleId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 2),
    _RoleId_Type()
)
roleId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    roleId.setStatus("mandatory")


class _RbsSupervisor_Type(Integer32):
    """Custom type rbsSupervisor based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsSupervisor_Type.__name__ = "Integer32"
_RbsSupervisor_Object = MibTableColumn
rbsSupervisor = _RbsSupervisor_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 3),
    _RbsSupervisor_Type()
)
rbsSupervisor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsSupervisor.setStatus("mandatory")


class _RbsOperator_Type(Integer32):
    """Custom type rbsOperator based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsOperator_Type.__name__ = "Integer32"
_RbsOperator_Object = MibTableColumn
rbsOperator = _RbsOperator_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 4),
    _RbsOperator_Type()
)
rbsOperator.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsOperator.setStatus("mandatory")


class _RbsChassisOperator_Type(Integer32):
    """Custom type rbsChassisOperator based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsChassisOperator_Type.__name__ = "Integer32"
_RbsChassisOperator_Object = MibTableColumn
rbsChassisOperator = _RbsChassisOperator_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 5),
    _RbsChassisOperator_Type()
)
rbsChassisOperator.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsChassisOperator.setStatus("mandatory")


class _RbsChassisAccountManagement_Type(Integer32):
    """Custom type rbsChassisAccountManagement based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsChassisAccountManagement_Type.__name__ = "Integer32"
_RbsChassisAccountManagement_Object = MibTableColumn
rbsChassisAccountManagement = _RbsChassisAccountManagement_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 6),
    _RbsChassisAccountManagement_Type()
)
rbsChassisAccountManagement.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsChassisAccountManagement.setStatus("mandatory")


class _RbsChassisLogManagement_Type(Integer32):
    """Custom type rbsChassisLogManagement based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsChassisLogManagement_Type.__name__ = "Integer32"
_RbsChassisLogManagement_Object = MibTableColumn
rbsChassisLogManagement = _RbsChassisLogManagement_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 7),
    _RbsChassisLogManagement_Type()
)
rbsChassisLogManagement.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsChassisLogManagement.setStatus("mandatory")


class _RbsChassisConfiguration_Type(Integer32):
    """Custom type rbsChassisConfiguration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsChassisConfiguration_Type.__name__ = "Integer32"
_RbsChassisConfiguration_Object = MibTableColumn
rbsChassisConfiguration = _RbsChassisConfiguration_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 8),
    _RbsChassisConfiguration_Type()
)
rbsChassisConfiguration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsChassisConfiguration.setStatus("mandatory")


class _RbsChassisAdministration_Type(Integer32):
    """Custom type rbsChassisAdministration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsChassisAdministration_Type.__name__ = "Integer32"
_RbsChassisAdministration_Object = MibTableColumn
rbsChassisAdministration = _RbsChassisAdministration_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 9),
    _RbsChassisAdministration_Type()
)
rbsChassisAdministration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsChassisAdministration.setStatus("mandatory")


class _RbsBladeOperator_Type(Integer32):
    """Custom type rbsBladeOperator based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBladeOperator_Type.__name__ = "Integer32"
_RbsBladeOperator_Object = MibTableColumn
rbsBladeOperator = _RbsBladeOperator_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 10),
    _RbsBladeOperator_Type()
)
rbsBladeOperator.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBladeOperator.setStatus("mandatory")


class _RbsBladeRemotePresence_Type(Integer32):
    """Custom type rbsBladeRemotePresence based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBladeRemotePresence_Type.__name__ = "Integer32"
_RbsBladeRemotePresence_Object = MibTableColumn
rbsBladeRemotePresence = _RbsBladeRemotePresence_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 11),
    _RbsBladeRemotePresence_Type()
)
rbsBladeRemotePresence.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBladeRemotePresence.setStatus("mandatory")


class _RbsBladeConfiguration_Type(Integer32):
    """Custom type rbsBladeConfiguration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBladeConfiguration_Type.__name__ = "Integer32"
_RbsBladeConfiguration_Object = MibTableColumn
rbsBladeConfiguration = _RbsBladeConfiguration_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 12),
    _RbsBladeConfiguration_Type()
)
rbsBladeConfiguration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBladeConfiguration.setStatus("mandatory")


class _RbsBladeAdministration_Type(Integer32):
    """Custom type rbsBladeAdministration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBladeAdministration_Type.__name__ = "Integer32"
_RbsBladeAdministration_Object = MibTableColumn
rbsBladeAdministration = _RbsBladeAdministration_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 13),
    _RbsBladeAdministration_Type()
)
rbsBladeAdministration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBladeAdministration.setStatus("mandatory")


class _RbsSwitchModuleOperator_Type(Integer32):
    """Custom type rbsSwitchModuleOperator based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsSwitchModuleOperator_Type.__name__ = "Integer32"
_RbsSwitchModuleOperator_Object = MibTableColumn
rbsSwitchModuleOperator = _RbsSwitchModuleOperator_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 14),
    _RbsSwitchModuleOperator_Type()
)
rbsSwitchModuleOperator.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsSwitchModuleOperator.setStatus("mandatory")


class _RbsSwitchModuleConfiguration_Type(Integer32):
    """Custom type rbsSwitchModuleConfiguration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsSwitchModuleConfiguration_Type.__name__ = "Integer32"
_RbsSwitchModuleConfiguration_Object = MibTableColumn
rbsSwitchModuleConfiguration = _RbsSwitchModuleConfiguration_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 15),
    _RbsSwitchModuleConfiguration_Type()
)
rbsSwitchModuleConfiguration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsSwitchModuleConfiguration.setStatus("mandatory")


class _RbsSwitchModuleAdministration_Type(Integer32):
    """Custom type rbsSwitchModuleAdministration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsSwitchModuleAdministration_Type.__name__ = "Integer32"
_RbsSwitchModuleAdministration_Object = MibTableColumn
rbsSwitchModuleAdministration = _RbsSwitchModuleAdministration_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 16),
    _RbsSwitchModuleAdministration_Type()
)
rbsSwitchModuleAdministration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsSwitchModuleAdministration.setStatus("mandatory")
_RbsEntryStatus_Type = EntryStatus
_RbsEntryStatus_Object = MibTableColumn
rbsEntryStatus = _RbsEntryStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 3, 1, 23),
    _RbsEntryStatus_Type()
)
rbsEntryStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsEntryStatus.setStatus("mandatory")
_RemoteAccessRBSscopeTable_Object = MibTable
remoteAccessRBSscopeTable = _RemoteAccessRBSscopeTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4)
)
if mibBuilder.loadTexts:
    remoteAccessRBSscopeTable.setStatus("mandatory")
_RemoteAccessRBSscopeEntry_Object = MibTableRow
remoteAccessRBSscopeEntry = _RemoteAccessRBSscopeEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1)
)
remoteAccessRBSscopeEntry.setIndexNames(
    (0, "CME-MIB", "scopeIndex"),
)
if mibBuilder.loadTexts:
    remoteAccessRBSscopeEntry.setStatus("mandatory")


class _ScopeIndex_Type(Integer32):
    """Custom type scopeIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_ScopeIndex_Type.__name__ = "Integer32"
_ScopeIndex_Object = MibTableColumn
scopeIndex = _ScopeIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 1),
    _ScopeIndex_Type()
)
scopeIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scopeIndex.setStatus("mandatory")


class _ScopeId_Type(OctetString):
    """Custom type scopeId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 63),
    )


_ScopeId_Type.__name__ = "OctetString"
_ScopeId_Object = MibTableColumn
scopeId = _ScopeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 2),
    _ScopeId_Type()
)
scopeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scopeId.setStatus("mandatory")


class _RbsChassis_Type(Integer32):
    """Custom type rbsChassis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsChassis_Type.__name__ = "Integer32"
_RbsChassis_Object = MibTableColumn
rbsChassis = _RbsChassis_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 3),
    _RbsChassis_Type()
)
rbsChassis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsChassis.setStatus("mandatory")


class _RbsBlade1_Type(Integer32):
    """Custom type rbsBlade1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBlade1_Type.__name__ = "Integer32"
_RbsBlade1_Object = MibTableColumn
rbsBlade1 = _RbsBlade1_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 4),
    _RbsBlade1_Type()
)
rbsBlade1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBlade1.setStatus("mandatory")


class _RbsBlade2_Type(Integer32):
    """Custom type rbsBlade2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBlade2_Type.__name__ = "Integer32"
_RbsBlade2_Object = MibTableColumn
rbsBlade2 = _RbsBlade2_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 5),
    _RbsBlade2_Type()
)
rbsBlade2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBlade2.setStatus("mandatory")


class _RbsBlade3_Type(Integer32):
    """Custom type rbsBlade3 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBlade3_Type.__name__ = "Integer32"
_RbsBlade3_Object = MibTableColumn
rbsBlade3 = _RbsBlade3_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 6),
    _RbsBlade3_Type()
)
rbsBlade3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBlade3.setStatus("mandatory")


class _RbsBlade4_Type(Integer32):
    """Custom type rbsBlade4 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBlade4_Type.__name__ = "Integer32"
_RbsBlade4_Object = MibTableColumn
rbsBlade4 = _RbsBlade4_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 7),
    _RbsBlade4_Type()
)
rbsBlade4.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBlade4.setStatus("mandatory")


class _RbsBlade5_Type(Integer32):
    """Custom type rbsBlade5 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBlade5_Type.__name__ = "Integer32"
_RbsBlade5_Object = MibTableColumn
rbsBlade5 = _RbsBlade5_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 8),
    _RbsBlade5_Type()
)
rbsBlade5.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBlade5.setStatus("mandatory")


class _RbsBlade6_Type(Integer32):
    """Custom type rbsBlade6 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBlade6_Type.__name__ = "Integer32"
_RbsBlade6_Object = MibTableColumn
rbsBlade6 = _RbsBlade6_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 9),
    _RbsBlade6_Type()
)
rbsBlade6.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBlade6.setStatus("mandatory")


class _RbsBlade7_Type(Integer32):
    """Custom type rbsBlade7 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBlade7_Type.__name__ = "Integer32"
_RbsBlade7_Object = MibTableColumn
rbsBlade7 = _RbsBlade7_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 10),
    _RbsBlade7_Type()
)
rbsBlade7.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBlade7.setStatus("mandatory")


class _RbsBlade8_Type(Integer32):
    """Custom type rbsBlade8 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBlade8_Type.__name__ = "Integer32"
_RbsBlade8_Object = MibTableColumn
rbsBlade8 = _RbsBlade8_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 11),
    _RbsBlade8_Type()
)
rbsBlade8.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBlade8.setStatus("mandatory")


class _RbsBlade9_Type(Integer32):
    """Custom type rbsBlade9 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBlade9_Type.__name__ = "Integer32"
_RbsBlade9_Object = MibTableColumn
rbsBlade9 = _RbsBlade9_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 12),
    _RbsBlade9_Type()
)
rbsBlade9.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBlade9.setStatus("mandatory")


class _RbsBlade10_Type(Integer32):
    """Custom type rbsBlade10 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBlade10_Type.__name__ = "Integer32"
_RbsBlade10_Object = MibTableColumn
rbsBlade10 = _RbsBlade10_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 13),
    _RbsBlade10_Type()
)
rbsBlade10.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBlade10.setStatus("mandatory")


class _RbsBlade11_Type(Integer32):
    """Custom type rbsBlade11 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBlade11_Type.__name__ = "Integer32"
_RbsBlade11_Object = MibTableColumn
rbsBlade11 = _RbsBlade11_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 14),
    _RbsBlade11_Type()
)
rbsBlade11.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBlade11.setStatus("mandatory")


class _RbsBlade12_Type(Integer32):
    """Custom type rbsBlade12 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBlade12_Type.__name__ = "Integer32"
_RbsBlade12_Object = MibTableColumn
rbsBlade12 = _RbsBlade12_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 15),
    _RbsBlade12_Type()
)
rbsBlade12.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBlade12.setStatus("mandatory")


class _RbsBlade13_Type(Integer32):
    """Custom type rbsBlade13 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBlade13_Type.__name__ = "Integer32"
_RbsBlade13_Object = MibTableColumn
rbsBlade13 = _RbsBlade13_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 16),
    _RbsBlade13_Type()
)
rbsBlade13.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBlade13.setStatus("mandatory")


class _RbsBlade14_Type(Integer32):
    """Custom type rbsBlade14 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsBlade14_Type.__name__ = "Integer32"
_RbsBlade14_Object = MibTableColumn
rbsBlade14 = _RbsBlade14_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 17),
    _RbsBlade14_Type()
)
rbsBlade14.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsBlade14.setStatus("mandatory")


class _RbsSwitch1_Type(Integer32):
    """Custom type rbsSwitch1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsSwitch1_Type.__name__ = "Integer32"
_RbsSwitch1_Object = MibTableColumn
rbsSwitch1 = _RbsSwitch1_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 18),
    _RbsSwitch1_Type()
)
rbsSwitch1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsSwitch1.setStatus("mandatory")


class _RbsSwitch2_Type(Integer32):
    """Custom type rbsSwitch2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsSwitch2_Type.__name__ = "Integer32"
_RbsSwitch2_Object = MibTableColumn
rbsSwitch2 = _RbsSwitch2_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 19),
    _RbsSwitch2_Type()
)
rbsSwitch2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsSwitch2.setStatus("mandatory")


class _RbsSwitch3_Type(Integer32):
    """Custom type rbsSwitch3 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsSwitch3_Type.__name__ = "Integer32"
_RbsSwitch3_Object = MibTableColumn
rbsSwitch3 = _RbsSwitch3_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 20),
    _RbsSwitch3_Type()
)
rbsSwitch3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsSwitch3.setStatus("mandatory")


class _RbsSwitch4_Type(Integer32):
    """Custom type rbsSwitch4 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsSwitch4_Type.__name__ = "Integer32"
_RbsSwitch4_Object = MibTableColumn
rbsSwitch4 = _RbsSwitch4_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 21),
    _RbsSwitch4_Type()
)
rbsSwitch4.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsSwitch4.setStatus("mandatory")


class _RbsSwitch5_Type(Integer32):
    """Custom type rbsSwitch5 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsSwitch5_Type.__name__ = "Integer32"
_RbsSwitch5_Object = MibTableColumn
rbsSwitch5 = _RbsSwitch5_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 22),
    _RbsSwitch5_Type()
)
rbsSwitch5.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsSwitch5.setStatus("mandatory")


class _RbsSwitch6_Type(Integer32):
    """Custom type rbsSwitch6 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsSwitch6_Type.__name__ = "Integer32"
_RbsSwitch6_Object = MibTableColumn
rbsSwitch6 = _RbsSwitch6_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 23),
    _RbsSwitch6_Type()
)
rbsSwitch6.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsSwitch6.setStatus("mandatory")


class _RbsSwitch7_Type(Integer32):
    """Custom type rbsSwitch7 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsSwitch7_Type.__name__ = "Integer32"
_RbsSwitch7_Object = MibTableColumn
rbsSwitch7 = _RbsSwitch7_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 24),
    _RbsSwitch7_Type()
)
rbsSwitch7.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsSwitch7.setStatus("mandatory")


class _RbsSwitch8_Type(Integer32):
    """Custom type rbsSwitch8 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsSwitch8_Type.__name__ = "Integer32"
_RbsSwitch8_Object = MibTableColumn
rbsSwitch8 = _RbsSwitch8_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 25),
    _RbsSwitch8_Type()
)
rbsSwitch8.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsSwitch8.setStatus("mandatory")


class _RbsSwitch9_Type(Integer32):
    """Custom type rbsSwitch9 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsSwitch9_Type.__name__ = "Integer32"
_RbsSwitch9_Object = MibTableColumn
rbsSwitch9 = _RbsSwitch9_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 26),
    _RbsSwitch9_Type()
)
rbsSwitch9.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsSwitch9.setStatus("mandatory")


class _RbsSwitch10_Type(Integer32):
    """Custom type rbsSwitch10 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RbsSwitch10_Type.__name__ = "Integer32"
_RbsSwitch10_Object = MibTableColumn
rbsSwitch10 = _RbsSwitch10_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 4, 1, 27),
    _RbsSwitch10_Type()
)
rbsSwitch10.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rbsSwitch10.setStatus("mandatory")


class _CmmCentralManagerIPMISNMPv3_Type(Integer32):
    """Custom type cmmCentralManagerIPMISNMPv3 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_CmmCentralManagerIPMISNMPv3_Type.__name__ = "Integer32"
_CmmCentralManagerIPMISNMPv3_Object = MibScalar
cmmCentralManagerIPMISNMPv3 = _CmmCentralManagerIPMISNMPv3_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 4, 9),
    _CmmCentralManagerIPMISNMPv3_Type()
)
cmmCentralManagerIPMISNMPv3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cmmCentralManagerIPMISNMPv3.setStatus("mandatory")
_UserInterfaces_ObjectIdentity = ObjectIdentity
userInterfaces = _UserInterfaces_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 5)
)


class _Cli_Type(Integer32):
    """Custom type cli based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("telnet-only", 1),
          ("ssh-only", 2),
          ("enabled", 3))
    )


_Cli_Type.__name__ = "Integer32"
_Cli_Object = MibScalar
cli = _Cli_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 5, 1),
    _Cli_Type()
)
cli.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cli.setStatus("mandatory")


class _Snmp_Type(Integer32):
    """Custom type snmp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("v1-only", 1),
          ("v3-only", 2),
          ("enabled", 3))
    )


_Snmp_Type.__name__ = "Integer32"
_Snmp_Object = MibScalar
snmp = _Snmp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 5, 2),
    _Snmp_Type()
)
snmp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmp.setStatus("mandatory")


class _Tcm_Type(Integer32):
    """Custom type tcm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 20),
    )


_Tcm_Type.__name__ = "Integer32"
_Tcm_Object = MibScalar
tcm = _Tcm_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 5, 3),
    _Tcm_Type()
)
tcm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tcm.setStatus("mandatory")


class _Web_Type(Integer32):
    """Custom type web based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_Web_Type.__name__ = "Integer32"
_Web_Object = MibScalar
web = _Web_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 5, 4),
    _Web_Type()
)
web.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    web.setStatus("mandatory")


class _Stcm_Type(Integer32):
    """Custom type stcm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 20),
    )


_Stcm_Type.__name__ = "Integer32"
_Stcm_Object = MibScalar
stcm = _Stcm_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 5, 5),
    _Stcm_Type()
)
stcm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stcm.setStatus("mandatory")
_MmSshClientAuth_ObjectIdentity = ObjectIdentity
mmSshClientAuth = _MmSshClientAuth_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6)
)
_MmSshClientAuthPubKeyTable_Object = MibTable
mmSshClientAuthPubKeyTable = _MmSshClientAuthPubKeyTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1)
)
if mibBuilder.loadTexts:
    mmSshClientAuthPubKeyTable.setStatus("mandatory")
_MmSshClientAuthPubKeyEntry_Object = MibTableRow
mmSshClientAuthPubKeyEntry = _MmSshClientAuthPubKeyEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1)
)
mmSshClientAuthPubKeyEntry.setIndexNames(
    (0, "CME-MIB", "mmSshClientAuthRemoteAccessIdIndex"),
    (0, "CME-MIB", "mmSshClientAuthPubKeyIndex"),
)
if mibBuilder.loadTexts:
    mmSshClientAuthPubKeyEntry.setStatus("mandatory")
_MmSshClientAuthRemoteAccessIdIndex_Type = Integer32
_MmSshClientAuthRemoteAccessIdIndex_Object = MibTableColumn
mmSshClientAuthRemoteAccessIdIndex = _MmSshClientAuthRemoteAccessIdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1, 1),
    _MmSshClientAuthRemoteAccessIdIndex_Type()
)
mmSshClientAuthRemoteAccessIdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmSshClientAuthRemoteAccessIdIndex.setStatus("mandatory")
_MmSshClientAuthPubKeyIndex_Type = Integer32
_MmSshClientAuthPubKeyIndex_Object = MibTableColumn
mmSshClientAuthPubKeyIndex = _MmSshClientAuthPubKeyIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1, 2),
    _MmSshClientAuthPubKeyIndex_Type()
)
mmSshClientAuthPubKeyIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmSshClientAuthPubKeyIndex.setStatus("mandatory")


class _MmSshClientAuthPubKeyType_Type(Integer32):
    """Custom type mmSshClientAuthPubKeyType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("sshDss", 1),
          ("sshRsa", 2))
    )


_MmSshClientAuthPubKeyType_Type.__name__ = "Integer32"
_MmSshClientAuthPubKeyType_Object = MibTableColumn
mmSshClientAuthPubKeyType = _MmSshClientAuthPubKeyType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1, 3),
    _MmSshClientAuthPubKeyType_Type()
)
mmSshClientAuthPubKeyType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmSshClientAuthPubKeyType.setStatus("mandatory")


class _MmSshClientAuthPubKeySize_Type(Integer32):
    """Custom type mmSshClientAuthPubKeySize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("bits512", 1),
          ("bits768", 2),
          ("bits1024", 3),
          ("bits2048", 4),
          ("bits4096", 5))
    )


_MmSshClientAuthPubKeySize_Type.__name__ = "Integer32"
_MmSshClientAuthPubKeySize_Object = MibTableColumn
mmSshClientAuthPubKeySize = _MmSshClientAuthPubKeySize_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1, 4),
    _MmSshClientAuthPubKeySize_Type()
)
mmSshClientAuthPubKeySize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmSshClientAuthPubKeySize.setStatus("mandatory")
_MmSshClientAuthPubKeyFingerprint_Type = OctetString
_MmSshClientAuthPubKeyFingerprint_Object = MibTableColumn
mmSshClientAuthPubKeyFingerprint = _MmSshClientAuthPubKeyFingerprint_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1, 5),
    _MmSshClientAuthPubKeyFingerprint_Type()
)
mmSshClientAuthPubKeyFingerprint.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmSshClientAuthPubKeyFingerprint.setStatus("mandatory")
_MmSshClientAuthPubKeyAcceptFrom_Type = OctetString
_MmSshClientAuthPubKeyAcceptFrom_Object = MibTableColumn
mmSshClientAuthPubKeyAcceptFrom = _MmSshClientAuthPubKeyAcceptFrom_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1, 6),
    _MmSshClientAuthPubKeyAcceptFrom_Type()
)
mmSshClientAuthPubKeyAcceptFrom.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mmSshClientAuthPubKeyAcceptFrom.setStatus("mandatory")
_MmSshClientAuthPubKeyComment_Type = OctetString
_MmSshClientAuthPubKeyComment_Object = MibTableColumn
mmSshClientAuthPubKeyComment = _MmSshClientAuthPubKeyComment_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1, 7),
    _MmSshClientAuthPubKeyComment_Type()
)
mmSshClientAuthPubKeyComment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mmSshClientAuthPubKeyComment.setStatus("mandatory")


class _MmSshClientAuthPubKeyAction_Type(Integer32):
    """Custom type mmSshClientAuthPubKeyAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("import", 1),
          ("export", 2))
    )


_MmSshClientAuthPubKeyAction_Type.__name__ = "Integer32"
_MmSshClientAuthPubKeyAction_Object = MibTableColumn
mmSshClientAuthPubKeyAction = _MmSshClientAuthPubKeyAction_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1, 8),
    _MmSshClientAuthPubKeyAction_Type()
)
mmSshClientAuthPubKeyAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mmSshClientAuthPubKeyAction.setStatus("mandatory")
_MmSshClientAuthPubKeyEntryStatus_Type = EntryStatus
_MmSshClientAuthPubKeyEntryStatus_Object = MibTableColumn
mmSshClientAuthPubKeyEntryStatus = _MmSshClientAuthPubKeyEntryStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1, 9),
    _MmSshClientAuthPubKeyEntryStatus_Type()
)
mmSshClientAuthPubKeyEntryStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mmSshClientAuthPubKeyEntryStatus.setStatus("mandatory")


class _MmSshClientAuthPubKeyUserId_Type(OctetString):
    """Custom type mmSshClientAuthPubKeyUserId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 31),
    )


_MmSshClientAuthPubKeyUserId_Type.__name__ = "OctetString"
_MmSshClientAuthPubKeyUserId_Object = MibTableColumn
mmSshClientAuthPubKeyUserId = _MmSshClientAuthPubKeyUserId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 1, 1, 10),
    _MmSshClientAuthPubKeyUserId_Type()
)
mmSshClientAuthPubKeyUserId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmSshClientAuthPubKeyUserId.setStatus("mandatory")
_MmSshClientAuthPubKeyUnused_Type = Integer32
_MmSshClientAuthPubKeyUnused_Object = MibScalar
mmSshClientAuthPubKeyUnused = _MmSshClientAuthPubKeyUnused_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 2),
    _MmSshClientAuthPubKeyUnused_Type()
)
mmSshClientAuthPubKeyUnused.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmSshClientAuthPubKeyUnused.setStatus("mandatory")
_MmSshClientAuthPubKeyTftpServer_Type = OctetString
_MmSshClientAuthPubKeyTftpServer_Object = MibScalar
mmSshClientAuthPubKeyTftpServer = _MmSshClientAuthPubKeyTftpServer_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 3),
    _MmSshClientAuthPubKeyTftpServer_Type()
)
mmSshClientAuthPubKeyTftpServer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mmSshClientAuthPubKeyTftpServer.setStatus("mandatory")
_MmSshClientAuthPubKeyFileName_Type = OctetString
_MmSshClientAuthPubKeyFileName_Object = MibScalar
mmSshClientAuthPubKeyFileName = _MmSshClientAuthPubKeyFileName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 4),
    _MmSshClientAuthPubKeyFileName_Type()
)
mmSshClientAuthPubKeyFileName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mmSshClientAuthPubKeyFileName.setStatus("mandatory")


class _MmSshClientAuthPubKeyFileFormat_Type(Integer32):
    """Custom type mmSshClientAuthPubKeyFileFormat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("openSSH", 1),
          ("rfc4716", 2))
    )


_MmSshClientAuthPubKeyFileFormat_Type.__name__ = "Integer32"
_MmSshClientAuthPubKeyFileFormat_Object = MibScalar
mmSshClientAuthPubKeyFileFormat = _MmSshClientAuthPubKeyFileFormat_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 6, 5),
    _MmSshClientAuthPubKeyFileFormat_Type()
)
mmSshClientAuthPubKeyFileFormat.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mmSshClientAuthPubKeyFileFormat.setStatus("mandatory")
_GroupProfiles_ObjectIdentity = ObjectIdentity
groupProfiles = _GroupProfiles_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7)
)
_GroupIdsTable_Object = MibTable
groupIdsTable = _GroupIdsTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 1)
)
if mibBuilder.loadTexts:
    groupIdsTable.setStatus("mandatory")
_GroupIdsEntry_Object = MibTableRow
groupIdsEntry = _GroupIdsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 1, 1)
)
groupIdsEntry.setIndexNames(
    (0, "CME-MIB", "groupIndex"),
)
if mibBuilder.loadTexts:
    groupIdsEntry.setStatus("mandatory")


class _GroupIndex_Type(Integer32):
    """Custom type groupIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_GroupIndex_Type.__name__ = "Integer32"
_GroupIndex_Object = MibTableColumn
groupIndex = _GroupIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 1, 1, 1),
    _GroupIndex_Type()
)
groupIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    groupIndex.setStatus("mandatory")


class _GroupId_Type(OctetString):
    """Custom type groupId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_GroupId_Type.__name__ = "OctetString"
_GroupId_Object = MibTableColumn
groupId = _GroupId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 1, 1, 2),
    _GroupId_Type()
)
groupId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupId.setStatus("mandatory")
_GroupRole_Type = OctetString
_GroupRole_Object = MibTableColumn
groupRole = _GroupRole_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 1, 1, 3),
    _GroupRole_Type()
)
groupRole.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    groupRole.setStatus("mandatory")
_GroupEntryStatus_Type = EntryStatus
_GroupEntryStatus_Object = MibTableColumn
groupEntryStatus = _GroupEntryStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 1, 1, 9),
    _GroupEntryStatus_Type()
)
groupEntryStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupEntryStatus.setStatus("mandatory")
_GroupRBSroleTable_Object = MibTable
groupRBSroleTable = _GroupRBSroleTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2)
)
if mibBuilder.loadTexts:
    groupRBSroleTable.setStatus("mandatory")
_GroupRBSroleEntry_Object = MibTableRow
groupRBSroleEntry = _GroupRBSroleEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1)
)
groupRBSroleEntry.setIndexNames(
    (0, "CME-MIB", "groupRBSroleIndex"),
)
if mibBuilder.loadTexts:
    groupRBSroleEntry.setStatus("mandatory")


class _GroupRBSroleIndex_Type(Integer32):
    """Custom type groupRBSroleIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_GroupRBSroleIndex_Type.__name__ = "Integer32"
_GroupRBSroleIndex_Object = MibTableColumn
groupRBSroleIndex = _GroupRBSroleIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 1),
    _GroupRBSroleIndex_Type()
)
groupRBSroleIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    groupRBSroleIndex.setStatus("mandatory")


class _GroupRBSroleId_Type(OctetString):
    """Custom type groupRBSroleId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_GroupRBSroleId_Type.__name__ = "OctetString"
_GroupRBSroleId_Object = MibTableColumn
groupRBSroleId = _GroupRBSroleId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 2),
    _GroupRBSroleId_Type()
)
groupRBSroleId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    groupRBSroleId.setStatus("mandatory")


class _GroupRBSSupervisor_Type(Integer32):
    """Custom type groupRBSSupervisor based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSSupervisor_Type.__name__ = "Integer32"
_GroupRBSSupervisor_Object = MibTableColumn
groupRBSSupervisor = _GroupRBSSupervisor_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 3),
    _GroupRBSSupervisor_Type()
)
groupRBSSupervisor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSSupervisor.setStatus("mandatory")


class _GroupRBSOperator_Type(Integer32):
    """Custom type groupRBSOperator based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSOperator_Type.__name__ = "Integer32"
_GroupRBSOperator_Object = MibTableColumn
groupRBSOperator = _GroupRBSOperator_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 4),
    _GroupRBSOperator_Type()
)
groupRBSOperator.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSOperator.setStatus("mandatory")


class _GroupRBSChassisOperator_Type(Integer32):
    """Custom type groupRBSChassisOperator based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSChassisOperator_Type.__name__ = "Integer32"
_GroupRBSChassisOperator_Object = MibTableColumn
groupRBSChassisOperator = _GroupRBSChassisOperator_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 5),
    _GroupRBSChassisOperator_Type()
)
groupRBSChassisOperator.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSChassisOperator.setStatus("mandatory")


class _GroupRBSChassisAccountManagement_Type(Integer32):
    """Custom type groupRBSChassisAccountManagement based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSChassisAccountManagement_Type.__name__ = "Integer32"
_GroupRBSChassisAccountManagement_Object = MibTableColumn
groupRBSChassisAccountManagement = _GroupRBSChassisAccountManagement_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 6),
    _GroupRBSChassisAccountManagement_Type()
)
groupRBSChassisAccountManagement.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSChassisAccountManagement.setStatus("mandatory")


class _GroupRBSChassisLogManagement_Type(Integer32):
    """Custom type groupRBSChassisLogManagement based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSChassisLogManagement_Type.__name__ = "Integer32"
_GroupRBSChassisLogManagement_Object = MibTableColumn
groupRBSChassisLogManagement = _GroupRBSChassisLogManagement_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 7),
    _GroupRBSChassisLogManagement_Type()
)
groupRBSChassisLogManagement.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSChassisLogManagement.setStatus("mandatory")


class _GroupRBSChassisConfiguration_Type(Integer32):
    """Custom type groupRBSChassisConfiguration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSChassisConfiguration_Type.__name__ = "Integer32"
_GroupRBSChassisConfiguration_Object = MibTableColumn
groupRBSChassisConfiguration = _GroupRBSChassisConfiguration_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 8),
    _GroupRBSChassisConfiguration_Type()
)
groupRBSChassisConfiguration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSChassisConfiguration.setStatus("mandatory")


class _GroupRBSChassisAdministration_Type(Integer32):
    """Custom type groupRBSChassisAdministration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSChassisAdministration_Type.__name__ = "Integer32"
_GroupRBSChassisAdministration_Object = MibTableColumn
groupRBSChassisAdministration = _GroupRBSChassisAdministration_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 9),
    _GroupRBSChassisAdministration_Type()
)
groupRBSChassisAdministration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSChassisAdministration.setStatus("mandatory")


class _GroupRBSBladeOperator_Type(Integer32):
    """Custom type groupRBSBladeOperator based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSBladeOperator_Type.__name__ = "Integer32"
_GroupRBSBladeOperator_Object = MibTableColumn
groupRBSBladeOperator = _GroupRBSBladeOperator_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 10),
    _GroupRBSBladeOperator_Type()
)
groupRBSBladeOperator.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSBladeOperator.setStatus("mandatory")


class _GroupRBSBladeRemotePresence_Type(Integer32):
    """Custom type groupRBSBladeRemotePresence based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSBladeRemotePresence_Type.__name__ = "Integer32"
_GroupRBSBladeRemotePresence_Object = MibTableColumn
groupRBSBladeRemotePresence = _GroupRBSBladeRemotePresence_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 11),
    _GroupRBSBladeRemotePresence_Type()
)
groupRBSBladeRemotePresence.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSBladeRemotePresence.setStatus("mandatory")


class _GroupRBSBladeConfiguration_Type(Integer32):
    """Custom type groupRBSBladeConfiguration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSBladeConfiguration_Type.__name__ = "Integer32"
_GroupRBSBladeConfiguration_Object = MibTableColumn
groupRBSBladeConfiguration = _GroupRBSBladeConfiguration_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 12),
    _GroupRBSBladeConfiguration_Type()
)
groupRBSBladeConfiguration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSBladeConfiguration.setStatus("mandatory")


class _GroupRBSBladeAdministration_Type(Integer32):
    """Custom type groupRBSBladeAdministration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSBladeAdministration_Type.__name__ = "Integer32"
_GroupRBSBladeAdministration_Object = MibTableColumn
groupRBSBladeAdministration = _GroupRBSBladeAdministration_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 13),
    _GroupRBSBladeAdministration_Type()
)
groupRBSBladeAdministration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSBladeAdministration.setStatus("mandatory")


class _GroupRBSSwitchModuleOperator_Type(Integer32):
    """Custom type groupRBSSwitchModuleOperator based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSSwitchModuleOperator_Type.__name__ = "Integer32"
_GroupRBSSwitchModuleOperator_Object = MibTableColumn
groupRBSSwitchModuleOperator = _GroupRBSSwitchModuleOperator_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 14),
    _GroupRBSSwitchModuleOperator_Type()
)
groupRBSSwitchModuleOperator.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSSwitchModuleOperator.setStatus("mandatory")


class _GroupRBSSwitchModuleConfiguration_Type(Integer32):
    """Custom type groupRBSSwitchModuleConfiguration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSSwitchModuleConfiguration_Type.__name__ = "Integer32"
_GroupRBSSwitchModuleConfiguration_Object = MibTableColumn
groupRBSSwitchModuleConfiguration = _GroupRBSSwitchModuleConfiguration_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 15),
    _GroupRBSSwitchModuleConfiguration_Type()
)
groupRBSSwitchModuleConfiguration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSSwitchModuleConfiguration.setStatus("mandatory")


class _GroupRBSSwitchModuleAdministration_Type(Integer32):
    """Custom type groupRBSSwitchModuleAdministration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSSwitchModuleAdministration_Type.__name__ = "Integer32"
_GroupRBSSwitchModuleAdministration_Object = MibTableColumn
groupRBSSwitchModuleAdministration = _GroupRBSSwitchModuleAdministration_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 2, 1, 16),
    _GroupRBSSwitchModuleAdministration_Type()
)
groupRBSSwitchModuleAdministration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSSwitchModuleAdministration.setStatus("mandatory")
_GroupRBSscopeTable_Object = MibTable
groupRBSscopeTable = _GroupRBSscopeTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3)
)
if mibBuilder.loadTexts:
    groupRBSscopeTable.setStatus("mandatory")
_GroupRBSscopeEntry_Object = MibTableRow
groupRBSscopeEntry = _GroupRBSscopeEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1)
)
groupRBSscopeEntry.setIndexNames(
    (0, "CME-MIB", "groupRBSscopeIndex"),
)
if mibBuilder.loadTexts:
    groupRBSscopeEntry.setStatus("mandatory")


class _GroupRBSscopeIndex_Type(Integer32):
    """Custom type groupRBSscopeIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_GroupRBSscopeIndex_Type.__name__ = "Integer32"
_GroupRBSscopeIndex_Object = MibTableColumn
groupRBSscopeIndex = _GroupRBSscopeIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 1),
    _GroupRBSscopeIndex_Type()
)
groupRBSscopeIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    groupRBSscopeIndex.setStatus("mandatory")


class _GroupRBSscopeId_Type(OctetString):
    """Custom type groupRBSscopeId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_GroupRBSscopeId_Type.__name__ = "OctetString"
_GroupRBSscopeId_Object = MibTableColumn
groupRBSscopeId = _GroupRBSscopeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 2),
    _GroupRBSscopeId_Type()
)
groupRBSscopeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    groupRBSscopeId.setStatus("mandatory")


class _GroupRBSChassis_Type(Integer32):
    """Custom type groupRBSChassis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSChassis_Type.__name__ = "Integer32"
_GroupRBSChassis_Object = MibTableColumn
groupRBSChassis = _GroupRBSChassis_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 3),
    _GroupRBSChassis_Type()
)
groupRBSChassis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSChassis.setStatus("mandatory")


class _GroupRBSBlade1_Type(Integer32):
    """Custom type groupRBSBlade1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSBlade1_Type.__name__ = "Integer32"
_GroupRBSBlade1_Object = MibTableColumn
groupRBSBlade1 = _GroupRBSBlade1_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 4),
    _GroupRBSBlade1_Type()
)
groupRBSBlade1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSBlade1.setStatus("mandatory")


class _GroupRBSBlade2_Type(Integer32):
    """Custom type groupRBSBlade2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSBlade2_Type.__name__ = "Integer32"
_GroupRBSBlade2_Object = MibTableColumn
groupRBSBlade2 = _GroupRBSBlade2_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 5),
    _GroupRBSBlade2_Type()
)
groupRBSBlade2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSBlade2.setStatus("mandatory")


class _GroupRBSBlade3_Type(Integer32):
    """Custom type groupRBSBlade3 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSBlade3_Type.__name__ = "Integer32"
_GroupRBSBlade3_Object = MibTableColumn
groupRBSBlade3 = _GroupRBSBlade3_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 6),
    _GroupRBSBlade3_Type()
)
groupRBSBlade3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSBlade3.setStatus("mandatory")


class _GroupRBSBlade4_Type(Integer32):
    """Custom type groupRBSBlade4 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSBlade4_Type.__name__ = "Integer32"
_GroupRBSBlade4_Object = MibTableColumn
groupRBSBlade4 = _GroupRBSBlade4_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 7),
    _GroupRBSBlade4_Type()
)
groupRBSBlade4.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSBlade4.setStatus("mandatory")


class _GroupRBSBlade5_Type(Integer32):
    """Custom type groupRBSBlade5 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSBlade5_Type.__name__ = "Integer32"
_GroupRBSBlade5_Object = MibTableColumn
groupRBSBlade5 = _GroupRBSBlade5_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 8),
    _GroupRBSBlade5_Type()
)
groupRBSBlade5.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSBlade5.setStatus("mandatory")


class _GroupRBSBlade6_Type(Integer32):
    """Custom type groupRBSBlade6 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSBlade6_Type.__name__ = "Integer32"
_GroupRBSBlade6_Object = MibTableColumn
groupRBSBlade6 = _GroupRBSBlade6_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 9),
    _GroupRBSBlade6_Type()
)
groupRBSBlade6.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSBlade6.setStatus("mandatory")


class _GroupRBSBlade7_Type(Integer32):
    """Custom type groupRBSBlade7 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSBlade7_Type.__name__ = "Integer32"
_GroupRBSBlade7_Object = MibTableColumn
groupRBSBlade7 = _GroupRBSBlade7_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 10),
    _GroupRBSBlade7_Type()
)
groupRBSBlade7.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSBlade7.setStatus("mandatory")


class _GroupRBSBlade8_Type(Integer32):
    """Custom type groupRBSBlade8 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSBlade8_Type.__name__ = "Integer32"
_GroupRBSBlade8_Object = MibTableColumn
groupRBSBlade8 = _GroupRBSBlade8_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 11),
    _GroupRBSBlade8_Type()
)
groupRBSBlade8.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSBlade8.setStatus("mandatory")


class _GroupRBSBlade9_Type(Integer32):
    """Custom type groupRBSBlade9 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSBlade9_Type.__name__ = "Integer32"
_GroupRBSBlade9_Object = MibTableColumn
groupRBSBlade9 = _GroupRBSBlade9_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 12),
    _GroupRBSBlade9_Type()
)
groupRBSBlade9.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSBlade9.setStatus("mandatory")


class _GroupRBSBlade10_Type(Integer32):
    """Custom type groupRBSBlade10 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSBlade10_Type.__name__ = "Integer32"
_GroupRBSBlade10_Object = MibTableColumn
groupRBSBlade10 = _GroupRBSBlade10_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 13),
    _GroupRBSBlade10_Type()
)
groupRBSBlade10.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSBlade10.setStatus("mandatory")


class _GroupRBSBlade11_Type(Integer32):
    """Custom type groupRBSBlade11 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSBlade11_Type.__name__ = "Integer32"
_GroupRBSBlade11_Object = MibTableColumn
groupRBSBlade11 = _GroupRBSBlade11_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 14),
    _GroupRBSBlade11_Type()
)
groupRBSBlade11.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSBlade11.setStatus("mandatory")


class _GroupRBSBlade12_Type(Integer32):
    """Custom type groupRBSBlade12 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSBlade12_Type.__name__ = "Integer32"
_GroupRBSBlade12_Object = MibTableColumn
groupRBSBlade12 = _GroupRBSBlade12_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 15),
    _GroupRBSBlade12_Type()
)
groupRBSBlade12.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSBlade12.setStatus("mandatory")


class _GroupRBSBlade13_Type(Integer32):
    """Custom type groupRBSBlade13 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSBlade13_Type.__name__ = "Integer32"
_GroupRBSBlade13_Object = MibTableColumn
groupRBSBlade13 = _GroupRBSBlade13_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 16),
    _GroupRBSBlade13_Type()
)
groupRBSBlade13.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSBlade13.setStatus("mandatory")


class _GroupRBSBlade14_Type(Integer32):
    """Custom type groupRBSBlade14 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSBlade14_Type.__name__ = "Integer32"
_GroupRBSBlade14_Object = MibTableColumn
groupRBSBlade14 = _GroupRBSBlade14_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 17),
    _GroupRBSBlade14_Type()
)
groupRBSBlade14.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSBlade14.setStatus("mandatory")


class _GroupRBSSwitch1_Type(Integer32):
    """Custom type groupRBSSwitch1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSSwitch1_Type.__name__ = "Integer32"
_GroupRBSSwitch1_Object = MibTableColumn
groupRBSSwitch1 = _GroupRBSSwitch1_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 18),
    _GroupRBSSwitch1_Type()
)
groupRBSSwitch1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSSwitch1.setStatus("mandatory")


class _GroupRBSSwitch2_Type(Integer32):
    """Custom type groupRBSSwitch2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSSwitch2_Type.__name__ = "Integer32"
_GroupRBSSwitch2_Object = MibTableColumn
groupRBSSwitch2 = _GroupRBSSwitch2_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 19),
    _GroupRBSSwitch2_Type()
)
groupRBSSwitch2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSSwitch2.setStatus("mandatory")


class _GroupRBSSwitch3_Type(Integer32):
    """Custom type groupRBSSwitch3 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSSwitch3_Type.__name__ = "Integer32"
_GroupRBSSwitch3_Object = MibTableColumn
groupRBSSwitch3 = _GroupRBSSwitch3_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 20),
    _GroupRBSSwitch3_Type()
)
groupRBSSwitch3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSSwitch3.setStatus("mandatory")


class _GroupRBSSwitch4_Type(Integer32):
    """Custom type groupRBSSwitch4 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSSwitch4_Type.__name__ = "Integer32"
_GroupRBSSwitch4_Object = MibTableColumn
groupRBSSwitch4 = _GroupRBSSwitch4_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 21),
    _GroupRBSSwitch4_Type()
)
groupRBSSwitch4.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSSwitch4.setStatus("mandatory")


class _GroupRBSSwitch5_Type(Integer32):
    """Custom type groupRBSSwitch5 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSSwitch5_Type.__name__ = "Integer32"
_GroupRBSSwitch5_Object = MibTableColumn
groupRBSSwitch5 = _GroupRBSSwitch5_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 22),
    _GroupRBSSwitch5_Type()
)
groupRBSSwitch5.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSSwitch5.setStatus("mandatory")


class _GroupRBSSwitch6_Type(Integer32):
    """Custom type groupRBSSwitch6 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSSwitch6_Type.__name__ = "Integer32"
_GroupRBSSwitch6_Object = MibTableColumn
groupRBSSwitch6 = _GroupRBSSwitch6_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 23),
    _GroupRBSSwitch6_Type()
)
groupRBSSwitch6.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSSwitch6.setStatus("mandatory")


class _GroupRBSSwitch7_Type(Integer32):
    """Custom type groupRBSSwitch7 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSSwitch7_Type.__name__ = "Integer32"
_GroupRBSSwitch7_Object = MibTableColumn
groupRBSSwitch7 = _GroupRBSSwitch7_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 24),
    _GroupRBSSwitch7_Type()
)
groupRBSSwitch7.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSSwitch7.setStatus("mandatory")


class _GroupRBSSwitch8_Type(Integer32):
    """Custom type groupRBSSwitch8 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSSwitch8_Type.__name__ = "Integer32"
_GroupRBSSwitch8_Object = MibTableColumn
groupRBSSwitch8 = _GroupRBSSwitch8_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 25),
    _GroupRBSSwitch8_Type()
)
groupRBSSwitch8.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSSwitch8.setStatus("mandatory")


class _GroupRBSSwitch9_Type(Integer32):
    """Custom type groupRBSSwitch9 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSSwitch9_Type.__name__ = "Integer32"
_GroupRBSSwitch9_Object = MibTableColumn
groupRBSSwitch9 = _GroupRBSSwitch9_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 26),
    _GroupRBSSwitch9_Type()
)
groupRBSSwitch9.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSSwitch9.setStatus("mandatory")


class _GroupRBSSwitch10_Type(Integer32):
    """Custom type groupRBSSwitch10 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_GroupRBSSwitch10_Type.__name__ = "Integer32"
_GroupRBSSwitch10_Object = MibTableColumn
groupRBSSwitch10 = _GroupRBSSwitch10_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 1, 7, 3, 1, 27),
    _GroupRBSSwitch10_Type()
)
groupRBSSwitch10.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    groupRBSSwitch10.setStatus("mandatory")
_RemoteAlerts_ObjectIdentity = ObjectIdentity
remoteAlerts = _RemoteAlerts_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2)
)
_RemoteAlertsCrit_ObjectIdentity = ObjectIdentity
remoteAlertsCrit = _RemoteAlertsCrit_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1)
)


class _CritPower_Type(Integer32):
    """Custom type critPower based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_CritPower_Type.__name__ = "Integer32"
_CritPower_Object = MibScalar
critPower = _CritPower_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 5),
    _CritPower_Type()
)
critPower.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    critPower.setStatus("mandatory")


class _CritBlade_Type(Integer32):
    """Custom type critBlade based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_CritBlade_Type.__name__ = "Integer32"
_CritBlade_Object = MibScalar
critBlade = _CritBlade_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 10),
    _CritBlade_Type()
)
critBlade.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    critBlade.setStatus("mandatory")


class _CritIO_Type(Integer32):
    """Custom type critIO based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_CritIO_Type.__name__ = "Integer32"
_CritIO_Object = MibScalar
critIO = _CritIO_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 11),
    _CritIO_Type()
)
critIO.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    critIO.setStatus("mandatory")


class _CritStorage_Type(Integer32):
    """Custom type critStorage based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_CritStorage_Type.__name__ = "Integer32"
_CritStorage_Object = MibScalar
critStorage = _CritStorage_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 12),
    _CritStorage_Type()
)
critStorage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    critStorage.setStatus("mandatory")


class _CritChassis_Type(Integer32):
    """Custom type critChassis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_CritChassis_Type.__name__ = "Integer32"
_CritChassis_Object = MibScalar
critChassis = _CritChassis_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 13),
    _CritChassis_Type()
)
critChassis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    critChassis.setStatus("mandatory")


class _CritFan_Type(Integer32):
    """Custom type critFan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_CritFan_Type.__name__ = "Integer32"
_CritFan_Object = MibScalar
critFan = _CritFan_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 1, 14),
    _CritFan_Type()
)
critFan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    critFan.setStatus("mandatory")
_RemoteAlertsNonCrit_ObjectIdentity = ObjectIdentity
remoteAlertsNonCrit = _RemoteAlertsNonCrit_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2)
)


class _WarnLogFull_Type(Integer32):
    """Custom type warnLogFull based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_WarnLogFull_Type.__name__ = "Integer32"
_WarnLogFull_Object = MibScalar
warnLogFull = _WarnLogFull_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 10),
    _WarnLogFull_Type()
)
warnLogFull.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    warnLogFull.setStatus("mandatory")


class _WarnBlade_Type(Integer32):
    """Custom type warnBlade based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_WarnBlade_Type.__name__ = "Integer32"
_WarnBlade_Object = MibScalar
warnBlade = _WarnBlade_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 15),
    _WarnBlade_Type()
)
warnBlade.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    warnBlade.setStatus("mandatory")


class _WarnIO_Type(Integer32):
    """Custom type warnIO based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_WarnIO_Type.__name__ = "Integer32"
_WarnIO_Object = MibScalar
warnIO = _WarnIO_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 16),
    _WarnIO_Type()
)
warnIO.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    warnIO.setStatus("mandatory")


class _WarnStorage_Type(Integer32):
    """Custom type warnStorage based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_WarnStorage_Type.__name__ = "Integer32"
_WarnStorage_Object = MibScalar
warnStorage = _WarnStorage_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 17),
    _WarnStorage_Type()
)
warnStorage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    warnStorage.setStatus("mandatory")


class _WarnPower_Type(Integer32):
    """Custom type warnPower based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_WarnPower_Type.__name__ = "Integer32"
_WarnPower_Object = MibScalar
warnPower = _WarnPower_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 18),
    _WarnPower_Type()
)
warnPower.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    warnPower.setStatus("mandatory")


class _WarnChassis_Type(Integer32):
    """Custom type warnChassis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_WarnChassis_Type.__name__ = "Integer32"
_WarnChassis_Object = MibScalar
warnChassis = _WarnChassis_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 19),
    _WarnChassis_Type()
)
warnChassis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    warnChassis.setStatus("mandatory")


class _WarnFan_Type(Integer32):
    """Custom type warnFan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_WarnFan_Type.__name__ = "Integer32"
_WarnFan_Object = MibScalar
warnFan = _WarnFan_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 2, 20),
    _WarnFan_Type()
)
warnFan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    warnFan.setStatus("mandatory")
_RemoteAlertsSystem_ObjectIdentity = ObjectIdentity
remoteAlertsSystem = _RemoteAlertsSystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3)
)


class _SystemInventory_Type(Integer32):
    """Custom type systemInventory based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SystemInventory_Type.__name__ = "Integer32"
_SystemInventory_Object = MibScalar
systemInventory = _SystemInventory_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 10),
    _SystemInventory_Type()
)
systemInventory.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemInventory.setStatus("mandatory")


class _SystemLog75PctFull_Type(Integer32):
    """Custom type systemLog75PctFull based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SystemLog75PctFull_Type.__name__ = "Integer32"
_SystemLog75PctFull_Object = MibScalar
systemLog75PctFull = _SystemLog75PctFull_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 11),
    _SystemLog75PctFull_Type()
)
systemLog75PctFull.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemLog75PctFull.setStatus("mandatory")


class _NetworkChangeNotification_Type(Integer32):
    """Custom type networkChangeNotification based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_NetworkChangeNotification_Type.__name__ = "Integer32"
_NetworkChangeNotification_Object = MibScalar
networkChangeNotification = _NetworkChangeNotification_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 12),
    _NetworkChangeNotification_Type()
)
networkChangeNotification.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    networkChangeNotification.setStatus("mandatory")


class _SystemRemoteLogin_Type(Integer32):
    """Custom type systemRemoteLogin based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SystemRemoteLogin_Type.__name__ = "Integer32"
_SystemRemoteLogin_Object = MibScalar
systemRemoteLogin = _SystemRemoteLogin_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 15),
    _SystemRemoteLogin_Type()
)
systemRemoteLogin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemRemoteLogin.setStatus("mandatory")


class _SystemBlade_Type(Integer32):
    """Custom type systemBlade based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SystemBlade_Type.__name__ = "Integer32"
_SystemBlade_Object = MibScalar
systemBlade = _SystemBlade_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 16),
    _SystemBlade_Type()
)
systemBlade.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemBlade.setStatus("mandatory")


class _SystemIO_Type(Integer32):
    """Custom type systemIO based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SystemIO_Type.__name__ = "Integer32"
_SystemIO_Object = MibScalar
systemIO = _SystemIO_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 17),
    _SystemIO_Type()
)
systemIO.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemIO.setStatus("mandatory")


class _SystemStorage_Type(Integer32):
    """Custom type systemStorage based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SystemStorage_Type.__name__ = "Integer32"
_SystemStorage_Object = MibScalar
systemStorage = _SystemStorage_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 18),
    _SystemStorage_Type()
)
systemStorage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemStorage.setStatus("mandatory")


class _SystemPower_Type(Integer32):
    """Custom type systemPower based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SystemPower_Type.__name__ = "Integer32"
_SystemPower_Object = MibScalar
systemPower = _SystemPower_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 19),
    _SystemPower_Type()
)
systemPower.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemPower.setStatus("mandatory")


class _SystemChassis_Type(Integer32):
    """Custom type systemChassis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SystemChassis_Type.__name__ = "Integer32"
_SystemChassis_Object = MibScalar
systemChassis = _SystemChassis_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 20),
    _SystemChassis_Type()
)
systemChassis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemChassis.setStatus("mandatory")


class _SystemFan_Type(Integer32):
    """Custom type systemFan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SystemFan_Type.__name__ = "Integer32"
_SystemFan_Object = MibScalar
systemFan = _SystemFan_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 21),
    _SystemFan_Type()
)
systemFan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemFan.setStatus("mandatory")


class _SystemPWRDO_Type(Integer32):
    """Custom type systemPWRDO based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SystemPWRDO_Type.__name__ = "Integer32"
_SystemPWRDO_Object = MibScalar
systemPWRDO = _SystemPWRDO_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 2, 3, 22),
    _SystemPWRDO_Type()
)
systemPWRDO.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemPWRDO.setStatus("mandatory")
_SecuritySettings_ObjectIdentity = ObjectIdentity
securitySettings = _SecuritySettings_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3)
)


class _TrespassWarning_Type(Integer32):
    """Custom type trespassWarning based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_TrespassWarning_Type.__name__ = "Integer32"
_TrespassWarning_Object = MibScalar
trespassWarning = _TrespassWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 2),
    _TrespassWarning_Type()
)
trespassWarning.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    trespassWarning.setStatus("mandatory")


class _TrespassWarningDefault_Type(Integer32):
    """Custom type trespassWarningDefault based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_TrespassWarningDefault_Type.__name__ = "Integer32"
_TrespassWarningDefault_Object = MibScalar
trespassWarningDefault = _TrespassWarningDefault_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 3),
    _TrespassWarningDefault_Type()
)
trespassWarningDefault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    trespassWarningDefault.setStatus("mandatory")


class _TrespassMessage_Type(OctetString):
    """Custom type trespassMessage based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1600),
    )


_TrespassMessage_Type.__name__ = "OctetString"
_TrespassMessage_Object = MibScalar
trespassMessage = _TrespassMessage_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 4),
    _TrespassMessage_Type()
)
trespassMessage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    trespassMessage.setStatus("mandatory")
_ChassisSecuritySettings_ObjectIdentity = ObjectIdentity
chassisSecuritySettings = _ChassisSecuritySettings_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5)
)


class _SecurityPolicySetting_Type(Integer32):
    """Custom type securityPolicySetting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("legacy", 0),
          ("secure", 1),
          ("unknown", 255))
    )


_SecurityPolicySetting_Type.__name__ = "Integer32"
_SecurityPolicySetting_Object = MibScalar
securityPolicySetting = _SecurityPolicySetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 1),
    _SecurityPolicySetting_Type()
)
securityPolicySetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    securityPolicySetting.setStatus("mandatory")


class _SecurityPolicyState_Type(Integer32):
    """Custom type securityPolicyState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("active", 0),
          ("pending", 1),
          ("unknown", 255))
    )


_SecurityPolicyState_Type.__name__ = "Integer32"
_SecurityPolicyState_Object = MibScalar
securityPolicyState = _SecurityPolicyState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 2),
    _SecurityPolicyState_Type()
)
securityPolicyState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    securityPolicyState.setStatus("mandatory")
_SecurityPolicyStatusTable_Object = MibTable
securityPolicyStatusTable = _SecurityPolicyStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 3)
)
if mibBuilder.loadTexts:
    securityPolicyStatusTable.setStatus("mandatory")
_SecurityPolicyStatusEntry_Object = MibTableRow
securityPolicyStatusEntry = _SecurityPolicyStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 3, 1)
)
securityPolicyStatusEntry.setIndexNames(
    (0, "CME-MIB", "securityPolicyStatusIndex"),
)
if mibBuilder.loadTexts:
    securityPolicyStatusEntry.setStatus("mandatory")


class _SecurityPolicyStatusIndex_Type(Integer32):
    """Custom type securityPolicyStatusIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_SecurityPolicyStatusIndex_Type.__name__ = "Integer32"
_SecurityPolicyStatusIndex_Object = MibTableColumn
securityPolicyStatusIndex = _SecurityPolicyStatusIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 3, 1, 1),
    _SecurityPolicyStatusIndex_Type()
)
securityPolicyStatusIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    securityPolicyStatusIndex.setStatus("mandatory")


class _SecurityPolicyStatusComponentType_Type(Integer32):
    """Custom type securityPolicyStatusComponentType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              31,
              32,
              33,
              34)
        )
    )
    namedValues = NamedValues(
        *(("system", 0),
          ("mgmtModule1", 1),
          ("mgmtModule2", 2),
          ("blade1", 11),
          ("blade2", 12),
          ("blade3", 13),
          ("blade4", 14),
          ("blade5", 15),
          ("blade6", 16),
          ("blade7", 17),
          ("blade8", 18),
          ("blade9", 19),
          ("blade10", 20),
          ("blade11", 21),
          ("blade12", 22),
          ("blade13", 23),
          ("blade14", 24),
          ("switchModule1", 31),
          ("switchModule2", 32),
          ("switchModule3", 33),
          ("switchModule4", 34))
    )


_SecurityPolicyStatusComponentType_Type.__name__ = "Integer32"
_SecurityPolicyStatusComponentType_Object = MibTableColumn
securityPolicyStatusComponentType = _SecurityPolicyStatusComponentType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 3, 1, 2),
    _SecurityPolicyStatusComponentType_Type()
)
securityPolicyStatusComponentType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    securityPolicyStatusComponentType.setStatus("mandatory")


class _SecurityPolicyStatusBayId_Type(Integer32):
    """Custom type securityPolicyStatusBayId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 14),
    )


_SecurityPolicyStatusBayId_Type.__name__ = "Integer32"
_SecurityPolicyStatusBayId_Object = MibTableColumn
securityPolicyStatusBayId = _SecurityPolicyStatusBayId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 3, 1, 3),
    _SecurityPolicyStatusBayId_Type()
)
securityPolicyStatusBayId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    securityPolicyStatusBayId.setStatus("mandatory")
_SecurityPolicyStatusSummary_Type = OctetString
_SecurityPolicyStatusSummary_Object = MibTableColumn
securityPolicyStatusSummary = _SecurityPolicyStatusSummary_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 3, 1, 4),
    _SecurityPolicyStatusSummary_Type()
)
securityPolicyStatusSummary.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    securityPolicyStatusSummary.setStatus("mandatory")
_SecurityPolicyStatusDetails_Type = OctetString
_SecurityPolicyStatusDetails_Object = MibTableColumn
securityPolicyStatusDetails = _SecurityPolicyStatusDetails_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 3, 1, 5),
    _SecurityPolicyStatusDetails_Type()
)
securityPolicyStatusDetails.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    securityPolicyStatusDetails.setStatus("mandatory")
_Cryptography_ObjectIdentity = ObjectIdentity
cryptography = _Cryptography_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 10)
)
_CryptographySummary_Type = OctetString
_CryptographySummary_Object = MibScalar
cryptographySummary = _CryptographySummary_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 10, 5),
    _CryptographySummary_Type()
)
cryptographySummary.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cryptographySummary.setStatus("mandatory")


class _CryptographyMode_Type(Integer32):
    """Custom type cryptographyMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("nistCompatibility", 0),
          ("nist800131a", 1))
    )


_CryptographyMode_Type.__name__ = "Integer32"
_CryptographyMode_Object = MibScalar
cryptographyMode = _CryptographyMode_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 10, 15),
    _CryptographyMode_Type()
)
cryptographyMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cryptographyMode.setStatus("mandatory")
_CryptographyModeDetailsTable_Object = MibTable
cryptographyModeDetailsTable = _CryptographyModeDetailsTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 10, 18)
)
if mibBuilder.loadTexts:
    cryptographyModeDetailsTable.setStatus("mandatory")
_CryptographyModeDetailsEntry_Object = MibTableRow
cryptographyModeDetailsEntry = _CryptographyModeDetailsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 10, 18, 1)
)
cryptographyModeDetailsEntry.setIndexNames(
    (0, "CME-MIB", "cryptographyModeDetailsIndex"),
)
if mibBuilder.loadTexts:
    cryptographyModeDetailsEntry.setStatus("mandatory")
_CryptographyModeDetailsIndex_Type = Integer32
_CryptographyModeDetailsIndex_Object = MibTableColumn
cryptographyModeDetailsIndex = _CryptographyModeDetailsIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 10, 18, 1, 1),
    _CryptographyModeDetailsIndex_Type()
)
cryptographyModeDetailsIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cryptographyModeDetailsIndex.setStatus("mandatory")


class _CryptographyModeDetailsType_Type(Integer32):
    """Custom type cryptographyModeDetailsType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("customization", 0),
          ("transition", 1))
    )


_CryptographyModeDetailsType_Type.__name__ = "Integer32"
_CryptographyModeDetailsType_Object = MibTableColumn
cryptographyModeDetailsType = _CryptographyModeDetailsType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 10, 18, 1, 2),
    _CryptographyModeDetailsType_Type()
)
cryptographyModeDetailsType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cryptographyModeDetailsType.setStatus("mandatory")
_CryptographyModeDetailsDescription_Type = OctetString
_CryptographyModeDetailsDescription_Object = MibTableColumn
cryptographyModeDetailsDescription = _CryptographyModeDetailsDescription_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 10, 18, 1, 3),
    _CryptographyModeDetailsDescription_Type()
)
cryptographyModeDetailsDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cryptographyModeDetailsDescription.setStatus("mandatory")
_CryptographyModeComponentTable_Object = MibTable
cryptographyModeComponentTable = _CryptographyModeComponentTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 10, 20)
)
if mibBuilder.loadTexts:
    cryptographyModeComponentTable.setStatus("mandatory")
_CryptographyModeComponentEntry_Object = MibTableRow
cryptographyModeComponentEntry = _CryptographyModeComponentEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 10, 20, 1)
)
cryptographyModeComponentEntry.setIndexNames(
    (0, "CME-MIB", "cryptographyModeComponentIndex"),
)
if mibBuilder.loadTexts:
    cryptographyModeComponentEntry.setStatus("mandatory")
_CryptographyModeComponentIndex_Type = Integer32
_CryptographyModeComponentIndex_Object = MibTableColumn
cryptographyModeComponentIndex = _CryptographyModeComponentIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 10, 20, 1, 1),
    _CryptographyModeComponentIndex_Type()
)
cryptographyModeComponentIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cryptographyModeComponentIndex.setStatus("mandatory")
_CryptographyModeComponentId_Type = OctetString
_CryptographyModeComponentId_Object = MibTableColumn
cryptographyModeComponentId = _CryptographyModeComponentId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 10, 20, 1, 2),
    _CryptographyModeComponentId_Type()
)
cryptographyModeComponentId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cryptographyModeComponentId.setStatus("mandatory")


class _CryptographicCipher_Type(Integer32):
    """Custom type cryptographicCipher based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("legacy", 0),
          ("tls12serveronly", 1),
          ("tls12serverclient", 2))
    )


_CryptographicCipher_Type.__name__ = "Integer32"
_CryptographicCipher_Object = MibScalar
cryptographicCipher = _CryptographicCipher_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 10, 25),
    _CryptographicCipher_Type()
)
cryptographicCipher.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cryptographicCipher.setStatus("mandatory")
_CryptographyCipherComponentTable_Object = MibTable
cryptographyCipherComponentTable = _CryptographyCipherComponentTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 10, 30)
)
if mibBuilder.loadTexts:
    cryptographyCipherComponentTable.setStatus("mandatory")
_CryptographyCipherComponentEntry_Object = MibTableRow
cryptographyCipherComponentEntry = _CryptographyCipherComponentEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 10, 30, 1)
)
cryptographyCipherComponentEntry.setIndexNames(
    (0, "CME-MIB", "cryptographyCipherComponentIndex"),
)
if mibBuilder.loadTexts:
    cryptographyCipherComponentEntry.setStatus("mandatory")
_CryptographyCipherComponentIndex_Type = Integer32
_CryptographyCipherComponentIndex_Object = MibTableColumn
cryptographyCipherComponentIndex = _CryptographyCipherComponentIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 10, 30, 1, 1),
    _CryptographyCipherComponentIndex_Type()
)
cryptographyCipherComponentIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cryptographyCipherComponentIndex.setStatus("mandatory")
_CryptographyCipherComponentId_Type = OctetString
_CryptographyCipherComponentId_Object = MibTableColumn
cryptographyCipherComponentId = _CryptographyCipherComponentId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 10, 30, 1, 2),
    _CryptographyCipherComponentId_Type()
)
cryptographyCipherComponentId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cryptographyCipherComponentId.setStatus("mandatory")


class _CipherStrength_Type(Integer32):
    """Custom type cipherStrength based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("rsa2048SHA1", 1),
          ("rsa2048SHA256", 2))
    )


_CipherStrength_Type.__name__ = "Integer32"
_CipherStrength_Object = MibScalar
cipherStrength = _CipherStrength_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 3, 5, 15),
    _CipherStrength_Type()
)
cipherStrength.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cipherStrength.setStatus("mandatory")
_SpClock_ObjectIdentity = ObjectIdentity
spClock = _SpClock_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4)
)
_SpClockDateAndTimeSetting_Type = OctetString
_SpClockDateAndTimeSetting_Object = MibScalar
spClockDateAndTimeSetting = _SpClockDateAndTimeSetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 1),
    _SpClockDateAndTimeSetting_Type()
)
spClockDateAndTimeSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    spClockDateAndTimeSetting.setStatus("mandatory")
_SpClockTimezoneSetting_Type = OctetString
_SpClockTimezoneSetting_Object = MibScalar
spClockTimezoneSetting = _SpClockTimezoneSetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 2),
    _SpClockTimezoneSetting_Type()
)
spClockTimezoneSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    spClockTimezoneSetting.setStatus("mandatory")
_SpClockTimezoneTable_Object = MibTable
spClockTimezoneTable = _SpClockTimezoneTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3)
)
if mibBuilder.loadTexts:
    spClockTimezoneTable.setStatus("mandatory")
_SpClockTimezoneEntry_Object = MibTableRow
spClockTimezoneEntry = _SpClockTimezoneEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1)
)
spClockTimezoneEntry.setIndexNames(
    (0, "CME-MIB", "spClockTimezoneIndex"),
)
if mibBuilder.loadTexts:
    spClockTimezoneEntry.setStatus("mandatory")


class _SpClockTimezoneIndex_Type(Integer32):
    """Custom type spClockTimezoneIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_SpClockTimezoneIndex_Type.__name__ = "Integer32"
_SpClockTimezoneIndex_Object = MibTableColumn
spClockTimezoneIndex = _SpClockTimezoneIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 1),
    _SpClockTimezoneIndex_Type()
)
spClockTimezoneIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    spClockTimezoneIndex.setStatus("mandatory")
_SpClockTimezoneId_Type = OctetString
_SpClockTimezoneId_Object = MibTableColumn
spClockTimezoneId = _SpClockTimezoneId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 2),
    _SpClockTimezoneId_Type()
)
spClockTimezoneId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    spClockTimezoneId.setStatus("mandatory")
_SpClockTimezoneCaption_Type = OctetString
_SpClockTimezoneCaption_Object = MibTableColumn
spClockTimezoneCaption = _SpClockTimezoneCaption_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 3),
    _SpClockTimezoneCaption_Type()
)
spClockTimezoneCaption.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    spClockTimezoneCaption.setStatus("mandatory")
_SpClockTimezoneDescription_Type = OctetString
_SpClockTimezoneDescription_Object = MibTableColumn
spClockTimezoneDescription = _SpClockTimezoneDescription_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 4),
    _SpClockTimezoneDescription_Type()
)
spClockTimezoneDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    spClockTimezoneDescription.setStatus("mandatory")
_SpClockTimezoneName_Type = OctetString
_SpClockTimezoneName_Object = MibTableColumn
spClockTimezoneName = _SpClockTimezoneName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 5),
    _SpClockTimezoneName_Type()
)
spClockTimezoneName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    spClockTimezoneName.setStatus("mandatory")
_SpClockTimezoneStandardName_Type = OctetString
_SpClockTimezoneStandardName_Object = MibTableColumn
spClockTimezoneStandardName = _SpClockTimezoneStandardName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 6),
    _SpClockTimezoneStandardName_Type()
)
spClockTimezoneStandardName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    spClockTimezoneStandardName.setStatus("mandatory")
_SpClockTimezoneStandardCaption_Type = OctetString
_SpClockTimezoneStandardCaption_Object = MibTableColumn
spClockTimezoneStandardCaption = _SpClockTimezoneStandardCaption_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 7),
    _SpClockTimezoneStandardCaption_Type()
)
spClockTimezoneStandardCaption.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    spClockTimezoneStandardCaption.setStatus("mandatory")
_SpClockTimezoneDaylightName_Type = OctetString
_SpClockTimezoneDaylightName_Object = MibTableColumn
spClockTimezoneDaylightName = _SpClockTimezoneDaylightName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 8),
    _SpClockTimezoneDaylightName_Type()
)
spClockTimezoneDaylightName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    spClockTimezoneDaylightName.setStatus("mandatory")
_SpClockTimezoneDaylightCaption_Type = OctetString
_SpClockTimezoneDaylightCaption_Object = MibTableColumn
spClockTimezoneDaylightCaption = _SpClockTimezoneDaylightCaption_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 9),
    _SpClockTimezoneDaylightCaption_Type()
)
spClockTimezoneDaylightCaption.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    spClockTimezoneDaylightCaption.setStatus("mandatory")
_SpClockTimezoneCmmOffset_Type = Integer32
_SpClockTimezoneCmmOffset_Object = MibTableColumn
spClockTimezoneCmmOffset = _SpClockTimezoneCmmOffset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 10),
    _SpClockTimezoneCmmOffset_Type()
)
spClockTimezoneCmmOffset.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    spClockTimezoneCmmOffset.setStatus("mandatory")
_SpClockTimezoneStandardOffsetMinutes_Type = Integer32
_SpClockTimezoneStandardOffsetMinutes_Object = MibTableColumn
spClockTimezoneStandardOffsetMinutes = _SpClockTimezoneStandardOffsetMinutes_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 11),
    _SpClockTimezoneStandardOffsetMinutes_Type()
)
spClockTimezoneStandardOffsetMinutes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    spClockTimezoneStandardOffsetMinutes.setStatus("mandatory")
_SpClockTimezoneStandardDaylightOffsetMinutes_Type = Integer32
_SpClockTimezoneStandardDaylightOffsetMinutes_Object = MibTableColumn
spClockTimezoneStandardDaylightOffsetMinutes = _SpClockTimezoneStandardDaylightOffsetMinutes_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 12),
    _SpClockTimezoneStandardDaylightOffsetMinutes_Type()
)
spClockTimezoneStandardDaylightOffsetMinutes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    spClockTimezoneStandardDaylightOffsetMinutes.setStatus("mandatory")


class _SpClockTimezoneDaylightDay_Type(Integer32):
    """Custom type spClockTimezoneDaylightDay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            255
        )
    )
    namedValues = NamedValues(
        ("undefined", 255)
    )


_SpClockTimezoneDaylightDay_Type.__name__ = "Integer32"
_SpClockTimezoneDaylightDay_Object = MibTableColumn
spClockTimezoneDaylightDay = _SpClockTimezoneDaylightDay_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 13),
    _SpClockTimezoneDaylightDay_Type()
)
spClockTimezoneDaylightDay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    spClockTimezoneDaylightDay.setStatus("mandatory")


class _SpClockTimezoneDaylightDayOfWeek_Type(Integer32):
    """Custom type spClockTimezoneDaylightDayOfWeek based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(-7,
              -6,
              -5,
              -4,
              -3,
              -2,
              -1,
              0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              255)
        )
    )
    namedValues = NamedValues(
        *(("minusSaturday", -7),
          ("minusFriday", -6),
          ("minusThursday", -5),
          ("minusWednesday", -4),
          ("minusTuesday", -3),
          ("minusMonday", -2),
          ("minusSunday", -1),
          ("exactDayOfMonth", 0),
          ("sunday", 1),
          ("monday", 2),
          ("tuesday", 3),
          ("wednesday", 4),
          ("thursday", 5),
          ("friday", 6),
          ("saturday", 7),
          ("undefined", 255))
    )


_SpClockTimezoneDaylightDayOfWeek_Type.__name__ = "Integer32"
_SpClockTimezoneDaylightDayOfWeek_Object = MibTableColumn
spClockTimezoneDaylightDayOfWeek = _SpClockTimezoneDaylightDayOfWeek_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 14),
    _SpClockTimezoneDaylightDayOfWeek_Type()
)
spClockTimezoneDaylightDayOfWeek.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    spClockTimezoneDaylightDayOfWeek.setStatus("mandatory")


class _SpClockTimezoneDaylightMonth_Type(Integer32):
    """Custom type spClockTimezoneDaylightMonth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              255)
        )
    )
    namedValues = NamedValues(
        *(("january", 0),
          ("february", 1),
          ("march", 2),
          ("april", 3),
          ("may", 4),
          ("june", 5),
          ("july", 6),
          ("august", 7),
          ("september", 8),
          ("october", 9),
          ("november", 10),
          ("december", 11),
          ("undefined", 255))
    )


_SpClockTimezoneDaylightMonth_Type.__name__ = "Integer32"
_SpClockTimezoneDaylightMonth_Object = MibTableColumn
spClockTimezoneDaylightMonth = _SpClockTimezoneDaylightMonth_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 15),
    _SpClockTimezoneDaylightMonth_Type()
)
spClockTimezoneDaylightMonth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    spClockTimezoneDaylightMonth.setStatus("mandatory")


class _SpClockTimezoneDaylightStandardDay_Type(Integer32):
    """Custom type spClockTimezoneDaylightStandardDay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            255
        )
    )
    namedValues = NamedValues(
        ("undefined", 255)
    )


_SpClockTimezoneDaylightStandardDay_Type.__name__ = "Integer32"
_SpClockTimezoneDaylightStandardDay_Object = MibTableColumn
spClockTimezoneDaylightStandardDay = _SpClockTimezoneDaylightStandardDay_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 16),
    _SpClockTimezoneDaylightStandardDay_Type()
)
spClockTimezoneDaylightStandardDay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    spClockTimezoneDaylightStandardDay.setStatus("mandatory")


class _SpClockTimezoneDaylightStandardDayOfWeek_Type(Integer32):
    """Custom type spClockTimezoneDaylightStandardDayOfWeek based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(-7,
              -6,
              -5,
              -4,
              -3,
              -2,
              -1,
              0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              255)
        )
    )
    namedValues = NamedValues(
        *(("minusSaturday", -7),
          ("minusFriday", -6),
          ("minusThursday", -5),
          ("minusWednesday", -4),
          ("minusTuesday", -3),
          ("minusMonday", -2),
          ("minusSunday", -1),
          ("exactDayOfMonth", 0),
          ("sunday", 1),
          ("monday", 2),
          ("tuesday", 3),
          ("wednesday", 4),
          ("thursday", 5),
          ("friday", 6),
          ("saturday", 7),
          ("undefined", 255))
    )


_SpClockTimezoneDaylightStandardDayOfWeek_Type.__name__ = "Integer32"
_SpClockTimezoneDaylightStandardDayOfWeek_Object = MibTableColumn
spClockTimezoneDaylightStandardDayOfWeek = _SpClockTimezoneDaylightStandardDayOfWeek_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 17),
    _SpClockTimezoneDaylightStandardDayOfWeek_Type()
)
spClockTimezoneDaylightStandardDayOfWeek.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    spClockTimezoneDaylightStandardDayOfWeek.setStatus("mandatory")


class _SpClockTimezoneDaylightStandardMonth_Type(Integer32):
    """Custom type spClockTimezoneDaylightStandardMonth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              255)
        )
    )
    namedValues = NamedValues(
        *(("january", 0),
          ("february", 1),
          ("march", 2),
          ("april", 3),
          ("may", 4),
          ("june", 5),
          ("july", 6),
          ("august", 7),
          ("september", 8),
          ("october", 9),
          ("november", 10),
          ("december", 11),
          ("undefined", 255))
    )


_SpClockTimezoneDaylightStandardMonth_Type.__name__ = "Integer32"
_SpClockTimezoneDaylightStandardMonth_Object = MibTableColumn
spClockTimezoneDaylightStandardMonth = _SpClockTimezoneDaylightStandardMonth_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 18),
    _SpClockTimezoneDaylightStandardMonth_Type()
)
spClockTimezoneDaylightStandardMonth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    spClockTimezoneDaylightStandardMonth.setStatus("mandatory")
_SpClockTimezoneDaylightIntervalInMinutes_Type = Integer32
_SpClockTimezoneDaylightIntervalInMinutes_Object = MibTableColumn
spClockTimezoneDaylightIntervalInMinutes = _SpClockTimezoneDaylightIntervalInMinutes_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 19),
    _SpClockTimezoneDaylightIntervalInMinutes_Type()
)
spClockTimezoneDaylightIntervalInMinutes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    spClockTimezoneDaylightIntervalInMinutes.setStatus("mandatory")
_SpClockTimezoneDaylightStandardInMinutes_Type = Integer32
_SpClockTimezoneDaylightStandardInMinutes_Object = MibTableColumn
spClockTimezoneDaylightStandardInMinutes = _SpClockTimezoneDaylightStandardInMinutes_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 3, 1, 20),
    _SpClockTimezoneDaylightStandardInMinutes_Type()
)
spClockTimezoneDaylightStandardInMinutes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    spClockTimezoneDaylightStandardInMinutes.setStatus("mandatory")
_SpClockTimezoneDaylightStart_Type = OctetString
_SpClockTimezoneDaylightStart_Object = MibScalar
spClockTimezoneDaylightStart = _SpClockTimezoneDaylightStart_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 5),
    _SpClockTimezoneDaylightStart_Type()
)
spClockTimezoneDaylightStart.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    spClockTimezoneDaylightStart.setStatus("mandatory")
_SpClockTimezoneDaylightEnd_Type = OctetString
_SpClockTimezoneDaylightEnd_Object = MibScalar
spClockTimezoneDaylightEnd = _SpClockTimezoneDaylightEnd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 4, 6),
    _SpClockTimezoneDaylightEnd_Type()
)
spClockTimezoneDaylightEnd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    spClockTimezoneDaylightEnd.setStatus("mandatory")
_SpIdentification_ObjectIdentity = ObjectIdentity
spIdentification = _SpIdentification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 5)
)


class _SpTxtId_Type(OctetString):
    """Custom type spTxtId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_SpTxtId_Type.__name__ = "OctetString"
_SpTxtId_Object = MibScalar
spTxtId = _SpTxtId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 5, 1),
    _SpTxtId_Type()
)
spTxtId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    spTxtId.setStatus("mandatory")
_NetworkConfiguration_ObjectIdentity = ObjectIdentity
networkConfiguration = _NetworkConfiguration_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9)
)
_NetworkInterfaces_ObjectIdentity = ObjectIdentity
networkInterfaces = _NetworkInterfaces_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1)
)
_ExtEthernetInterface_ObjectIdentity = ObjectIdentity
extEthernetInterface = _ExtEthernetInterface_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1)
)


class _ExtEthernetInterfaceType_Type(OctetString):
    """Custom type extEthernetInterfaceType based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_ExtEthernetInterfaceType_Type.__name__ = "OctetString"
_ExtEthernetInterfaceType_Object = MibScalar
extEthernetInterfaceType = _ExtEthernetInterfaceType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 1),
    _ExtEthernetInterfaceType_Type()
)
extEthernetInterfaceType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    extEthernetInterfaceType.setStatus("mandatory")


class _ExtEthernetInterfaceHostName_Type(OctetString):
    """Custom type extEthernetInterfaceHostName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_ExtEthernetInterfaceHostName_Type.__name__ = "OctetString"
_ExtEthernetInterfaceHostName_Object = MibScalar
extEthernetInterfaceHostName = _ExtEthernetInterfaceHostName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 3),
    _ExtEthernetInterfaceHostName_Type()
)
extEthernetInterfaceHostName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    extEthernetInterfaceHostName.setStatus("mandatory")
_ExtEthernetInterfaceIPAddress_Type = IpAddress
_ExtEthernetInterfaceIPAddress_Object = MibScalar
extEthernetInterfaceIPAddress = _ExtEthernetInterfaceIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 4),
    _ExtEthernetInterfaceIPAddress_Type()
)
extEthernetInterfaceIPAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    extEthernetInterfaceIPAddress.setStatus("mandatory")


class _ExtEthernetInterfaceDataRate_Type(Integer32):
    """Custom type extEthernetInterfaceDataRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("enet10Megabit", 3),
          ("enet100Megabit", 4),
          ("autoSpeed", 5),
          ("enet1Gigabit", 6))
    )


_ExtEthernetInterfaceDataRate_Type.__name__ = "Integer32"
_ExtEthernetInterfaceDataRate_Object = MibScalar
extEthernetInterfaceDataRate = _ExtEthernetInterfaceDataRate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 5),
    _ExtEthernetInterfaceDataRate_Type()
)
extEthernetInterfaceDataRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    extEthernetInterfaceDataRate.setStatus("mandatory")


class _ExtEthernetInterfaceDuplexSetting_Type(Integer32):
    """Custom type extEthernetInterfaceDuplexSetting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("fullDuplex", 1),
          ("halfDuplex", 2),
          ("autoDuplex", 3))
    )


_ExtEthernetInterfaceDuplexSetting_Type.__name__ = "Integer32"
_ExtEthernetInterfaceDuplexSetting_Object = MibScalar
extEthernetInterfaceDuplexSetting = _ExtEthernetInterfaceDuplexSetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 6),
    _ExtEthernetInterfaceDuplexSetting_Type()
)
extEthernetInterfaceDuplexSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    extEthernetInterfaceDuplexSetting.setStatus("mandatory")


class _ExtEthernetInterfaceLAA_Type(OctetString):
    """Custom type extEthernetInterfaceLAA based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_ExtEthernetInterfaceLAA_Type.__name__ = "OctetString"
_ExtEthernetInterfaceLAA_Object = MibScalar
extEthernetInterfaceLAA = _ExtEthernetInterfaceLAA_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 7),
    _ExtEthernetInterfaceLAA_Type()
)
extEthernetInterfaceLAA.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    extEthernetInterfaceLAA.setStatus("mandatory")


class _ExtEthernetInterfaceDhcpEnabled_Type(Integer32):
    """Custom type extEthernetInterfaceDhcpEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dhcpDisabled", 0),
          ("dhcpEnabled", 1),
          ("tryDhcpThenTryStatic", 2))
    )


_ExtEthernetInterfaceDhcpEnabled_Type.__name__ = "Integer32"
_ExtEthernetInterfaceDhcpEnabled_Object = MibScalar
extEthernetInterfaceDhcpEnabled = _ExtEthernetInterfaceDhcpEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 8),
    _ExtEthernetInterfaceDhcpEnabled_Type()
)
extEthernetInterfaceDhcpEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    extEthernetInterfaceDhcpEnabled.setStatus("mandatory")
_ExtEthernetInterfaceGatewayIPAddress_Type = IpAddress
_ExtEthernetInterfaceGatewayIPAddress_Object = MibScalar
extEthernetInterfaceGatewayIPAddress = _ExtEthernetInterfaceGatewayIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 9),
    _ExtEthernetInterfaceGatewayIPAddress_Type()
)
extEthernetInterfaceGatewayIPAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    extEthernetInterfaceGatewayIPAddress.setStatus("mandatory")


class _ExtEthernetInterfaceBIA_Type(OctetString):
    """Custom type extEthernetInterfaceBIA based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_ExtEthernetInterfaceBIA_Type.__name__ = "OctetString"
_ExtEthernetInterfaceBIA_Object = MibScalar
extEthernetInterfaceBIA = _ExtEthernetInterfaceBIA_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 10),
    _ExtEthernetInterfaceBIA_Type()
)
extEthernetInterfaceBIA.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    extEthernetInterfaceBIA.setStatus("mandatory")
_ExtEthernetInterfaceMTU_Type = Integer32
_ExtEthernetInterfaceMTU_Object = MibScalar
extEthernetInterfaceMTU = _ExtEthernetInterfaceMTU_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 13),
    _ExtEthernetInterfaceMTU_Type()
)
extEthernetInterfaceMTU.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    extEthernetInterfaceMTU.setStatus("mandatory")
_ExtEthernetInterfaceSubnetMask_Type = IpAddress
_ExtEthernetInterfaceSubnetMask_Object = MibScalar
extEthernetInterfaceSubnetMask = _ExtEthernetInterfaceSubnetMask_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 14),
    _ExtEthernetInterfaceSubnetMask_Type()
)
extEthernetInterfaceSubnetMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    extEthernetInterfaceSubnetMask.setStatus("mandatory")
_DhcpEthernetInterface_ObjectIdentity = ObjectIdentity
dhcpEthernetInterface = _DhcpEthernetInterface_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16)
)


class _DhcpHostName_Type(OctetString):
    """Custom type dhcpHostName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_DhcpHostName_Type.__name__ = "OctetString"
_DhcpHostName_Object = MibScalar
dhcpHostName = _DhcpHostName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 1),
    _DhcpHostName_Type()
)
dhcpHostName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpHostName.setStatus("mandatory")
_DhcpIPAddress_Type = IpAddress
_DhcpIPAddress_Object = MibScalar
dhcpIPAddress = _DhcpIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 2),
    _DhcpIPAddress_Type()
)
dhcpIPAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpIPAddress.setStatus("mandatory")
_DhcpGatewayIPAddress_Type = IpAddress
_DhcpGatewayIPAddress_Object = MibScalar
dhcpGatewayIPAddress = _DhcpGatewayIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 3),
    _DhcpGatewayIPAddress_Type()
)
dhcpGatewayIPAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpGatewayIPAddress.setStatus("mandatory")
_DhcpSubnetMask_Type = IpAddress
_DhcpSubnetMask_Object = MibScalar
dhcpSubnetMask = _DhcpSubnetMask_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 4),
    _DhcpSubnetMask_Type()
)
dhcpSubnetMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSubnetMask.setStatus("mandatory")


class _DhcpDomainName_Type(OctetString):
    """Custom type dhcpDomainName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_DhcpDomainName_Type.__name__ = "OctetString"
_DhcpDomainName_Object = MibScalar
dhcpDomainName = _DhcpDomainName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 5),
    _DhcpDomainName_Type()
)
dhcpDomainName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpDomainName.setStatus("mandatory")
_DhcpDHCPServer_Type = IpAddress
_DhcpDHCPServer_Object = MibScalar
dhcpDHCPServer = _DhcpDHCPServer_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 6),
    _DhcpDHCPServer_Type()
)
dhcpDHCPServer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpDHCPServer.setStatus("mandatory")
_DhcpPrimaryDNSServer_Type = IpAddress
_DhcpPrimaryDNSServer_Object = MibScalar
dhcpPrimaryDNSServer = _DhcpPrimaryDNSServer_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 7),
    _DhcpPrimaryDNSServer_Type()
)
dhcpPrimaryDNSServer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpPrimaryDNSServer.setStatus("mandatory")
_DhcpSecondaryDNSServer_Type = IpAddress
_DhcpSecondaryDNSServer_Object = MibScalar
dhcpSecondaryDNSServer = _DhcpSecondaryDNSServer_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 8),
    _DhcpSecondaryDNSServer_Type()
)
dhcpSecondaryDNSServer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSecondaryDNSServer.setStatus("mandatory")
_DhcpTertiaryDNSServer_Type = IpAddress
_DhcpTertiaryDNSServer_Object = MibScalar
dhcpTertiaryDNSServer = _DhcpTertiaryDNSServer_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 16, 9),
    _DhcpTertiaryDNSServer_Type()
)
dhcpTertiaryDNSServer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpTertiaryDNSServer.setStatus("mandatory")
_ExtEthernetInterfaceFloatingIPAddress_Type = IpAddress
_ExtEthernetInterfaceFloatingIPAddress_Object = MibScalar
extEthernetInterfaceFloatingIPAddress = _ExtEthernetInterfaceFloatingIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 1, 22),
    _ExtEthernetInterfaceFloatingIPAddress_Type()
)
extEthernetInterfaceFloatingIPAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    extEthernetInterfaceFloatingIPAddress.setStatus("mandatory")
_StandbyExtEthernetInterface_ObjectIdentity = ObjectIdentity
standbyExtEthernetInterface = _StandbyExtEthernetInterface_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3)
)


class _StandbyExtEthernetInterfaceType_Type(OctetString):
    """Custom type standbyExtEthernetInterfaceType based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_StandbyExtEthernetInterfaceType_Type.__name__ = "OctetString"
_StandbyExtEthernetInterfaceType_Object = MibScalar
standbyExtEthernetInterfaceType = _StandbyExtEthernetInterfaceType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 1),
    _StandbyExtEthernetInterfaceType_Type()
)
standbyExtEthernetInterfaceType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyExtEthernetInterfaceType.setStatus("mandatory")


class _StandbyExtEthernetInterfaceHostName_Type(OctetString):
    """Custom type standbyExtEthernetInterfaceHostName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_StandbyExtEthernetInterfaceHostName_Type.__name__ = "OctetString"
_StandbyExtEthernetInterfaceHostName_Object = MibScalar
standbyExtEthernetInterfaceHostName = _StandbyExtEthernetInterfaceHostName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 3),
    _StandbyExtEthernetInterfaceHostName_Type()
)
standbyExtEthernetInterfaceHostName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    standbyExtEthernetInterfaceHostName.setStatus("mandatory")
_StandbyExtEthernetInterfaceIPAddress_Type = IpAddress
_StandbyExtEthernetInterfaceIPAddress_Object = MibScalar
standbyExtEthernetInterfaceIPAddress = _StandbyExtEthernetInterfaceIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 4),
    _StandbyExtEthernetInterfaceIPAddress_Type()
)
standbyExtEthernetInterfaceIPAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    standbyExtEthernetInterfaceIPAddress.setStatus("mandatory")


class _StandbyExtEthernetInterfaceDataRate_Type(Integer32):
    """Custom type standbyExtEthernetInterfaceDataRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("enet10Megabit", 3),
          ("enet100Megabit", 4),
          ("autoSpeed", 5),
          ("enet1Gigabit", 6))
    )


_StandbyExtEthernetInterfaceDataRate_Type.__name__ = "Integer32"
_StandbyExtEthernetInterfaceDataRate_Object = MibScalar
standbyExtEthernetInterfaceDataRate = _StandbyExtEthernetInterfaceDataRate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 5),
    _StandbyExtEthernetInterfaceDataRate_Type()
)
standbyExtEthernetInterfaceDataRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    standbyExtEthernetInterfaceDataRate.setStatus("mandatory")


class _StandbyExtEthernetInterfaceDuplexSetting_Type(Integer32):
    """Custom type standbyExtEthernetInterfaceDuplexSetting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("fullDuplex", 1),
          ("halfDuplex", 2),
          ("autoDuplex", 3))
    )


_StandbyExtEthernetInterfaceDuplexSetting_Type.__name__ = "Integer32"
_StandbyExtEthernetInterfaceDuplexSetting_Object = MibScalar
standbyExtEthernetInterfaceDuplexSetting = _StandbyExtEthernetInterfaceDuplexSetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 6),
    _StandbyExtEthernetInterfaceDuplexSetting_Type()
)
standbyExtEthernetInterfaceDuplexSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    standbyExtEthernetInterfaceDuplexSetting.setStatus("mandatory")


class _StandbyExtEthernetInterfaceLAA_Type(OctetString):
    """Custom type standbyExtEthernetInterfaceLAA based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_StandbyExtEthernetInterfaceLAA_Type.__name__ = "OctetString"
_StandbyExtEthernetInterfaceLAA_Object = MibScalar
standbyExtEthernetInterfaceLAA = _StandbyExtEthernetInterfaceLAA_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 7),
    _StandbyExtEthernetInterfaceLAA_Type()
)
standbyExtEthernetInterfaceLAA.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    standbyExtEthernetInterfaceLAA.setStatus("mandatory")


class _StandbyExtEthernetInterfaceDhcpEnabled_Type(Integer32):
    """Custom type standbyExtEthernetInterfaceDhcpEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dhcpDisabled", 0),
          ("dhcpEnabled", 1),
          ("tryDhcpThenTryStatic", 2))
    )


_StandbyExtEthernetInterfaceDhcpEnabled_Type.__name__ = "Integer32"
_StandbyExtEthernetInterfaceDhcpEnabled_Object = MibScalar
standbyExtEthernetInterfaceDhcpEnabled = _StandbyExtEthernetInterfaceDhcpEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 8),
    _StandbyExtEthernetInterfaceDhcpEnabled_Type()
)
standbyExtEthernetInterfaceDhcpEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    standbyExtEthernetInterfaceDhcpEnabled.setStatus("mandatory")
_StandbyExtEthernetInterfaceGatewayIPAddress_Type = IpAddress
_StandbyExtEthernetInterfaceGatewayIPAddress_Object = MibScalar
standbyExtEthernetInterfaceGatewayIPAddress = _StandbyExtEthernetInterfaceGatewayIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 9),
    _StandbyExtEthernetInterfaceGatewayIPAddress_Type()
)
standbyExtEthernetInterfaceGatewayIPAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    standbyExtEthernetInterfaceGatewayIPAddress.setStatus("mandatory")


class _StandbyExtEthernetInterfaceBIA_Type(OctetString):
    """Custom type standbyExtEthernetInterfaceBIA based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )
    fixed_length = 17


_StandbyExtEthernetInterfaceBIA_Type.__name__ = "OctetString"
_StandbyExtEthernetInterfaceBIA_Object = MibScalar
standbyExtEthernetInterfaceBIA = _StandbyExtEthernetInterfaceBIA_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 10),
    _StandbyExtEthernetInterfaceBIA_Type()
)
standbyExtEthernetInterfaceBIA.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyExtEthernetInterfaceBIA.setStatus("mandatory")
_StandbyExtEthernetInterfaceMTU_Type = Integer32
_StandbyExtEthernetInterfaceMTU_Object = MibScalar
standbyExtEthernetInterfaceMTU = _StandbyExtEthernetInterfaceMTU_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 13),
    _StandbyExtEthernetInterfaceMTU_Type()
)
standbyExtEthernetInterfaceMTU.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    standbyExtEthernetInterfaceMTU.setStatus("mandatory")
_StandbyExtEthernetInterfaceSubnetMask_Type = IpAddress
_StandbyExtEthernetInterfaceSubnetMask_Object = MibScalar
standbyExtEthernetInterfaceSubnetMask = _StandbyExtEthernetInterfaceSubnetMask_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 14),
    _StandbyExtEthernetInterfaceSubnetMask_Type()
)
standbyExtEthernetInterfaceSubnetMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    standbyExtEthernetInterfaceSubnetMask.setStatus("mandatory")


class _AdvancedFailover_Type(Integer32):
    """Custom type advancedFailover based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("ipnoswap", 1),
          ("ipswap", 2))
    )


_AdvancedFailover_Type.__name__ = "Integer32"
_AdvancedFailover_Object = MibScalar
advancedFailover = _AdvancedFailover_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 15),
    _AdvancedFailover_Type()
)
advancedFailover.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    advancedFailover.setStatus("mandatory")
_StandbyDhcpEthernetInterface_ObjectIdentity = ObjectIdentity
standbyDhcpEthernetInterface = _StandbyDhcpEthernetInterface_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16)
)


class _StandbyDhcpHostName_Type(OctetString):
    """Custom type standbyDhcpHostName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_StandbyDhcpHostName_Type.__name__ = "OctetString"
_StandbyDhcpHostName_Object = MibScalar
standbyDhcpHostName = _StandbyDhcpHostName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16, 1),
    _StandbyDhcpHostName_Type()
)
standbyDhcpHostName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyDhcpHostName.setStatus("mandatory")
_StandbyDhcpIPAddress_Type = IpAddress
_StandbyDhcpIPAddress_Object = MibScalar
standbyDhcpIPAddress = _StandbyDhcpIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16, 2),
    _StandbyDhcpIPAddress_Type()
)
standbyDhcpIPAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyDhcpIPAddress.setStatus("mandatory")
_StandbyDhcpGatewayIPAddress_Type = IpAddress
_StandbyDhcpGatewayIPAddress_Object = MibScalar
standbyDhcpGatewayIPAddress = _StandbyDhcpGatewayIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16, 3),
    _StandbyDhcpGatewayIPAddress_Type()
)
standbyDhcpGatewayIPAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyDhcpGatewayIPAddress.setStatus("mandatory")
_StandbyDhcpSubnetMask_Type = IpAddress
_StandbyDhcpSubnetMask_Object = MibScalar
standbyDhcpSubnetMask = _StandbyDhcpSubnetMask_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16, 4),
    _StandbyDhcpSubnetMask_Type()
)
standbyDhcpSubnetMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyDhcpSubnetMask.setStatus("mandatory")


class _StandbyDhcpDomainName_Type(OctetString):
    """Custom type standbyDhcpDomainName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_StandbyDhcpDomainName_Type.__name__ = "OctetString"
_StandbyDhcpDomainName_Object = MibScalar
standbyDhcpDomainName = _StandbyDhcpDomainName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16, 5),
    _StandbyDhcpDomainName_Type()
)
standbyDhcpDomainName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyDhcpDomainName.setStatus("mandatory")
_StandbyDhcpDHCPServer_Type = IpAddress
_StandbyDhcpDHCPServer_Object = MibScalar
standbyDhcpDHCPServer = _StandbyDhcpDHCPServer_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16, 6),
    _StandbyDhcpDHCPServer_Type()
)
standbyDhcpDHCPServer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyDhcpDHCPServer.setStatus("mandatory")
_StandbyDhcpPrimaryDNSServer_Type = IpAddress
_StandbyDhcpPrimaryDNSServer_Object = MibScalar
standbyDhcpPrimaryDNSServer = _StandbyDhcpPrimaryDNSServer_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16, 7),
    _StandbyDhcpPrimaryDNSServer_Type()
)
standbyDhcpPrimaryDNSServer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyDhcpPrimaryDNSServer.setStatus("mandatory")
_StandbyDhcpSecondaryDNSServer_Type = IpAddress
_StandbyDhcpSecondaryDNSServer_Object = MibScalar
standbyDhcpSecondaryDNSServer = _StandbyDhcpSecondaryDNSServer_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16, 8),
    _StandbyDhcpSecondaryDNSServer_Type()
)
standbyDhcpSecondaryDNSServer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyDhcpSecondaryDNSServer.setStatus("mandatory")
_StandbyDhcpTertiaryDNSServer_Type = IpAddress
_StandbyDhcpTertiaryDNSServer_Object = MibScalar
standbyDhcpTertiaryDNSServer = _StandbyDhcpTertiaryDNSServer_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 3, 16, 9),
    _StandbyDhcpTertiaryDNSServer_Type()
)
standbyDhcpTertiaryDNSServer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyDhcpTertiaryDNSServer.setStatus("mandatory")
_ExtEthernetInterfaceIPv6_ObjectIdentity = ObjectIdentity
extEthernetInterfaceIPv6 = _ExtEthernetInterfaceIPv6_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4)
)


class _ExtEthernetInterfaceIPv6Type_Type(OctetString):
    """Custom type extEthernetInterfaceIPv6Type based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_ExtEthernetInterfaceIPv6Type_Type.__name__ = "OctetString"
_ExtEthernetInterfaceIPv6Type_Object = MibScalar
extEthernetInterfaceIPv6Type = _ExtEthernetInterfaceIPv6Type_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 1),
    _ExtEthernetInterfaceIPv6Type_Type()
)
extEthernetInterfaceIPv6Type.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    extEthernetInterfaceIPv6Type.setStatus("mandatory")


class _ExtEthernetInterfaceIPv6Enabled_Type(Integer32):
    """Custom type extEthernetInterfaceIPv6Enabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("enabled", 1)
    )


_ExtEthernetInterfaceIPv6Enabled_Type.__name__ = "Integer32"
_ExtEthernetInterfaceIPv6Enabled_Object = MibScalar
extEthernetInterfaceIPv6Enabled = _ExtEthernetInterfaceIPv6Enabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 2),
    _ExtEthernetInterfaceIPv6Enabled_Type()
)
extEthernetInterfaceIPv6Enabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    extEthernetInterfaceIPv6Enabled.setStatus("mandatory")
_ExtEthernetInterfaceIPv6Config_ObjectIdentity = ObjectIdentity
extEthernetInterfaceIPv6Config = _ExtEthernetInterfaceIPv6Config_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5)
)
_ExtEthernetInterfaceIPv6LocalAddress_ObjectIdentity = ObjectIdentity
extEthernetInterfaceIPv6LocalAddress = _ExtEthernetInterfaceIPv6LocalAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 1)
)
_ExtEthernetInterfaceIPv6LinkLocalAddress_Type = InetAddressIPv6
_ExtEthernetInterfaceIPv6LinkLocalAddress_Object = MibScalar
extEthernetInterfaceIPv6LinkLocalAddress = _ExtEthernetInterfaceIPv6LinkLocalAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 1, 1),
    _ExtEthernetInterfaceIPv6LinkLocalAddress_Type()
)
extEthernetInterfaceIPv6LinkLocalAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    extEthernetInterfaceIPv6LinkLocalAddress.setStatus("mandatory")
_ExtEthernetInterfaceIPv6StaticIPConfig_ObjectIdentity = ObjectIdentity
extEthernetInterfaceIPv6StaticIPConfig = _ExtEthernetInterfaceIPv6StaticIPConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 2)
)


class _ExtEthernetInterfaceIPv6StaticIPConfigEnabled_Type(Integer32):
    """Custom type extEthernetInterfaceIPv6StaticIPConfigEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_ExtEthernetInterfaceIPv6StaticIPConfigEnabled_Type.__name__ = "Integer32"
_ExtEthernetInterfaceIPv6StaticIPConfigEnabled_Object = MibScalar
extEthernetInterfaceIPv6StaticIPConfigEnabled = _ExtEthernetInterfaceIPv6StaticIPConfigEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 2, 1),
    _ExtEthernetInterfaceIPv6StaticIPConfigEnabled_Type()
)
extEthernetInterfaceIPv6StaticIPConfigEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    extEthernetInterfaceIPv6StaticIPConfigEnabled.setStatus("mandatory")
_ExtEthernetInterfaceIPv6StaticIPAddress_Type = InetAddressIPv6
_ExtEthernetInterfaceIPv6StaticIPAddress_Object = MibScalar
extEthernetInterfaceIPv6StaticIPAddress = _ExtEthernetInterfaceIPv6StaticIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 2, 2),
    _ExtEthernetInterfaceIPv6StaticIPAddress_Type()
)
extEthernetInterfaceIPv6StaticIPAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    extEthernetInterfaceIPv6StaticIPAddress.setStatus("mandatory")


class _ExtEthernetInterfaceIPv6StaticIPAddressPrefixLen_Type(Integer32):
    """Custom type extEthernetInterfaceIPv6StaticIPAddressPrefixLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_ExtEthernetInterfaceIPv6StaticIPAddressPrefixLen_Type.__name__ = "Integer32"
_ExtEthernetInterfaceIPv6StaticIPAddressPrefixLen_Object = MibScalar
extEthernetInterfaceIPv6StaticIPAddressPrefixLen = _ExtEthernetInterfaceIPv6StaticIPAddressPrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 2, 3),
    _ExtEthernetInterfaceIPv6StaticIPAddressPrefixLen_Type()
)
extEthernetInterfaceIPv6StaticIPAddressPrefixLen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    extEthernetInterfaceIPv6StaticIPAddressPrefixLen.setStatus("mandatory")
_ExtEthernetInterfaceIPv6StaticIPDefaultRoute_Type = InetAddressIPv6
_ExtEthernetInterfaceIPv6StaticIPDefaultRoute_Object = MibScalar
extEthernetInterfaceIPv6StaticIPDefaultRoute = _ExtEthernetInterfaceIPv6StaticIPDefaultRoute_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 2, 4),
    _ExtEthernetInterfaceIPv6StaticIPDefaultRoute_Type()
)
extEthernetInterfaceIPv6StaticIPDefaultRoute.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    extEthernetInterfaceIPv6StaticIPDefaultRoute.setStatus("mandatory")
_ExtEthernetInterfaceIPv6LinkFloatingAddress_Type = InetAddressIPv6
_ExtEthernetInterfaceIPv6LinkFloatingAddress_Object = MibScalar
extEthernetInterfaceIPv6LinkFloatingAddress = _ExtEthernetInterfaceIPv6LinkFloatingAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 2, 5),
    _ExtEthernetInterfaceIPv6LinkFloatingAddress_Type()
)
extEthernetInterfaceIPv6LinkFloatingAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    extEthernetInterfaceIPv6LinkFloatingAddress.setStatus("mandatory")
_ExtEthernetInterfaceIPv6AutoIPConfig_ObjectIdentity = ObjectIdentity
extEthernetInterfaceIPv6AutoIPConfig = _ExtEthernetInterfaceIPv6AutoIPConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3)
)


class _ExtEthernetInterfaceIPv6AutoIPConfigEnabled_Type(Integer32):
    """Custom type extEthernetInterfaceIPv6AutoIPConfigEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_ExtEthernetInterfaceIPv6AutoIPConfigEnabled_Type.__name__ = "Integer32"
_ExtEthernetInterfaceIPv6AutoIPConfigEnabled_Object = MibScalar
extEthernetInterfaceIPv6AutoIPConfigEnabled = _ExtEthernetInterfaceIPv6AutoIPConfigEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 1),
    _ExtEthernetInterfaceIPv6AutoIPConfigEnabled_Type()
)
extEthernetInterfaceIPv6AutoIPConfigEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    extEthernetInterfaceIPv6AutoIPConfigEnabled.setStatus("mandatory")
_ExtEthernetInterfaceDHCPv6Config_ObjectIdentity = ObjectIdentity
extEthernetInterfaceDHCPv6Config = _ExtEthernetInterfaceDHCPv6Config_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 2)
)


class _ExtEthernetInterfaceDHCPv6Enabled_Type(Integer32):
    """Custom type extEthernetInterfaceDHCPv6Enabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_ExtEthernetInterfaceDHCPv6Enabled_Type.__name__ = "Integer32"
_ExtEthernetInterfaceDHCPv6Enabled_Object = MibScalar
extEthernetInterfaceDHCPv6Enabled = _ExtEthernetInterfaceDHCPv6Enabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 2, 1),
    _ExtEthernetInterfaceDHCPv6Enabled_Type()
)
extEthernetInterfaceDHCPv6Enabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    extEthernetInterfaceDHCPv6Enabled.setStatus("mandatory")
_ExtEthernetInterfaceDHCPv6IPAddress_Type = InetAddressIPv6
_ExtEthernetInterfaceDHCPv6IPAddress_Object = MibScalar
extEthernetInterfaceDHCPv6IPAddress = _ExtEthernetInterfaceDHCPv6IPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 2, 2),
    _ExtEthernetInterfaceDHCPv6IPAddress_Type()
)
extEthernetInterfaceDHCPv6IPAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    extEthernetInterfaceDHCPv6IPAddress.setStatus("mandatory")


class _ExtEthernetInterfaceDHCPv6DomainName_Type(OctetString):
    """Custom type extEthernetInterfaceDHCPv6DomainName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_ExtEthernetInterfaceDHCPv6DomainName_Type.__name__ = "OctetString"
_ExtEthernetInterfaceDHCPv6DomainName_Object = MibScalar
extEthernetInterfaceDHCPv6DomainName = _ExtEthernetInterfaceDHCPv6DomainName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 2, 4),
    _ExtEthernetInterfaceDHCPv6DomainName_Type()
)
extEthernetInterfaceDHCPv6DomainName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    extEthernetInterfaceDHCPv6DomainName.setStatus("mandatory")
_ExtEthernetInterfaceDHCPv6PrimaryDNSServer_Type = InetAddressIPv6
_ExtEthernetInterfaceDHCPv6PrimaryDNSServer_Object = MibScalar
extEthernetInterfaceDHCPv6PrimaryDNSServer = _ExtEthernetInterfaceDHCPv6PrimaryDNSServer_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 2, 5),
    _ExtEthernetInterfaceDHCPv6PrimaryDNSServer_Type()
)
extEthernetInterfaceDHCPv6PrimaryDNSServer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    extEthernetInterfaceDHCPv6PrimaryDNSServer.setStatus("mandatory")
_ExtEthernetInterfaceDHCPv6SecondaryDNSServer_Type = InetAddressIPv6
_ExtEthernetInterfaceDHCPv6SecondaryDNSServer_Object = MibScalar
extEthernetInterfaceDHCPv6SecondaryDNSServer = _ExtEthernetInterfaceDHCPv6SecondaryDNSServer_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 2, 6),
    _ExtEthernetInterfaceDHCPv6SecondaryDNSServer_Type()
)
extEthernetInterfaceDHCPv6SecondaryDNSServer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    extEthernetInterfaceDHCPv6SecondaryDNSServer.setStatus("mandatory")
_ExtEthernetInterfaceDHCPv6TertiaryDNSServer_Type = InetAddressIPv6
_ExtEthernetInterfaceDHCPv6TertiaryDNSServer_Object = MibScalar
extEthernetInterfaceDHCPv6TertiaryDNSServer = _ExtEthernetInterfaceDHCPv6TertiaryDNSServer_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 2, 7),
    _ExtEthernetInterfaceDHCPv6TertiaryDNSServer_Type()
)
extEthernetInterfaceDHCPv6TertiaryDNSServer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    extEthernetInterfaceDHCPv6TertiaryDNSServer.setStatus("mandatory")
_ExtEthernetInterfaceDHCPv6Server_Type = InetAddressIPv6
_ExtEthernetInterfaceDHCPv6Server_Object = MibScalar
extEthernetInterfaceDHCPv6Server = _ExtEthernetInterfaceDHCPv6Server_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 2, 8),
    _ExtEthernetInterfaceDHCPv6Server_Type()
)
extEthernetInterfaceDHCPv6Server.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    extEthernetInterfaceDHCPv6Server.setStatus("mandatory")
_ExtEthernetInterfaceIPv6StatelessAutoConfig_ObjectIdentity = ObjectIdentity
extEthernetInterfaceIPv6StatelessAutoConfig = _ExtEthernetInterfaceIPv6StatelessAutoConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 3)
)


class _ExtEthernetInterfaceIPv6StatelessAutoConfigEnabled_Type(Integer32):
    """Custom type extEthernetInterfaceIPv6StatelessAutoConfigEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_ExtEthernetInterfaceIPv6StatelessAutoConfigEnabled_Type.__name__ = "Integer32"
_ExtEthernetInterfaceIPv6StatelessAutoConfigEnabled_Object = MibScalar
extEthernetInterfaceIPv6StatelessAutoConfigEnabled = _ExtEthernetInterfaceIPv6StatelessAutoConfigEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 3, 1),
    _ExtEthernetInterfaceIPv6StatelessAutoConfigEnabled_Type()
)
extEthernetInterfaceIPv6StatelessAutoConfigEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    extEthernetInterfaceIPv6StatelessAutoConfigEnabled.setStatus("mandatory")
_ExtEthernetInterfaceStatelessAutoConfigAddressesTable_Object = MibTable
extEthernetInterfaceStatelessAutoConfigAddressesTable = _ExtEthernetInterfaceStatelessAutoConfigAddressesTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 3, 2)
)
if mibBuilder.loadTexts:
    extEthernetInterfaceStatelessAutoConfigAddressesTable.setStatus("mandatory")
_ExtEthernetInterfaceStatelessAutoConfigAddressesEntry_Object = MibTableRow
extEthernetInterfaceStatelessAutoConfigAddressesEntry = _ExtEthernetInterfaceStatelessAutoConfigAddressesEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 3, 2, 1)
)
extEthernetInterfaceStatelessAutoConfigAddressesEntry.setIndexNames(
    (0, "CME-MIB", "extEthernetInterfaceStatelessAutoConfigAddressesIndex"),
)
if mibBuilder.loadTexts:
    extEthernetInterfaceStatelessAutoConfigAddressesEntry.setStatus("mandatory")
_ExtEthernetInterfaceStatelessAutoConfigAddressesIndex_Type = Integer32
_ExtEthernetInterfaceStatelessAutoConfigAddressesIndex_Object = MibTableColumn
extEthernetInterfaceStatelessAutoConfigAddressesIndex = _ExtEthernetInterfaceStatelessAutoConfigAddressesIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 3, 2, 1, 1),
    _ExtEthernetInterfaceStatelessAutoConfigAddressesIndex_Type()
)
extEthernetInterfaceStatelessAutoConfigAddressesIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    extEthernetInterfaceStatelessAutoConfigAddressesIndex.setStatus("mandatory")
_ExtEthernetInterfaceStatelessAutoConfigAddresses_Type = InetAddressIPv6
_ExtEthernetInterfaceStatelessAutoConfigAddresses_Object = MibTableColumn
extEthernetInterfaceStatelessAutoConfigAddresses = _ExtEthernetInterfaceStatelessAutoConfigAddresses_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 3, 2, 1, 2),
    _ExtEthernetInterfaceStatelessAutoConfigAddresses_Type()
)
extEthernetInterfaceStatelessAutoConfigAddresses.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    extEthernetInterfaceStatelessAutoConfigAddresses.setStatus("mandatory")


class _ExtEthernetInterfaceStatelessAutoConfigAddressesPrefixLen_Type(Integer32):
    """Custom type extEthernetInterfaceStatelessAutoConfigAddressesPrefixLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_ExtEthernetInterfaceStatelessAutoConfigAddressesPrefixLen_Type.__name__ = "Integer32"
_ExtEthernetInterfaceStatelessAutoConfigAddressesPrefixLen_Object = MibTableColumn
extEthernetInterfaceStatelessAutoConfigAddressesPrefixLen = _ExtEthernetInterfaceStatelessAutoConfigAddressesPrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 4, 5, 3, 3, 2, 1, 3),
    _ExtEthernetInterfaceStatelessAutoConfigAddressesPrefixLen_Type()
)
extEthernetInterfaceStatelessAutoConfigAddressesPrefixLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    extEthernetInterfaceStatelessAutoConfigAddressesPrefixLen.setStatus("mandatory")
_StandbyExtEthernetInterfaceIPv6_ObjectIdentity = ObjectIdentity
standbyExtEthernetInterfaceIPv6 = _StandbyExtEthernetInterfaceIPv6_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5)
)
_StandbyEthernetInterfaceIPv6LocalAddress_ObjectIdentity = ObjectIdentity
standbyEthernetInterfaceIPv6LocalAddress = _StandbyEthernetInterfaceIPv6LocalAddress_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 1)
)
_StandbyEthernetInterfaceIPv6LinkLocalAddress_Type = InetAddressIPv6
_StandbyEthernetInterfaceIPv6LinkLocalAddress_Object = MibScalar
standbyEthernetInterfaceIPv6LinkLocalAddress = _StandbyEthernetInterfaceIPv6LinkLocalAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 1, 1),
    _StandbyEthernetInterfaceIPv6LinkLocalAddress_Type()
)
standbyEthernetInterfaceIPv6LinkLocalAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyEthernetInterfaceIPv6LinkLocalAddress.setStatus("mandatory")
_StandbyEthernetInterfaceIPv6StaticIPConfig_ObjectIdentity = ObjectIdentity
standbyEthernetInterfaceIPv6StaticIPConfig = _StandbyEthernetInterfaceIPv6StaticIPConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 2)
)


class _StandbyEthernetInterfaceIPv6StaticIPConfigEnabled_Type(Integer32):
    """Custom type standbyEthernetInterfaceIPv6StaticIPConfigEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_StandbyEthernetInterfaceIPv6StaticIPConfigEnabled_Type.__name__ = "Integer32"
_StandbyEthernetInterfaceIPv6StaticIPConfigEnabled_Object = MibScalar
standbyEthernetInterfaceIPv6StaticIPConfigEnabled = _StandbyEthernetInterfaceIPv6StaticIPConfigEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 2, 1),
    _StandbyEthernetInterfaceIPv6StaticIPConfigEnabled_Type()
)
standbyEthernetInterfaceIPv6StaticIPConfigEnabled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyEthernetInterfaceIPv6StaticIPConfigEnabled.setStatus("mandatory")
_StandbyEthernetInterfaceIPv6StaticIPAddress_Type = InetAddressIPv6
_StandbyEthernetInterfaceIPv6StaticIPAddress_Object = MibScalar
standbyEthernetInterfaceIPv6StaticIPAddress = _StandbyEthernetInterfaceIPv6StaticIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 2, 2),
    _StandbyEthernetInterfaceIPv6StaticIPAddress_Type()
)
standbyEthernetInterfaceIPv6StaticIPAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    standbyEthernetInterfaceIPv6StaticIPAddress.setStatus("mandatory")


class _StandbyEthernetInterfaceIPv6StaticIPAddressPrefixLen_Type(Integer32):
    """Custom type standbyEthernetInterfaceIPv6StaticIPAddressPrefixLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_StandbyEthernetInterfaceIPv6StaticIPAddressPrefixLen_Type.__name__ = "Integer32"
_StandbyEthernetInterfaceIPv6StaticIPAddressPrefixLen_Object = MibScalar
standbyEthernetInterfaceIPv6StaticIPAddressPrefixLen = _StandbyEthernetInterfaceIPv6StaticIPAddressPrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 2, 3),
    _StandbyEthernetInterfaceIPv6StaticIPAddressPrefixLen_Type()
)
standbyEthernetInterfaceIPv6StaticIPAddressPrefixLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyEthernetInterfaceIPv6StaticIPAddressPrefixLen.setStatus("mandatory")
_StandbyEthernetInterfaceIPv6StaticIPDefaultRoute_Type = InetAddressIPv6
_StandbyEthernetInterfaceIPv6StaticIPDefaultRoute_Object = MibScalar
standbyEthernetInterfaceIPv6StaticIPDefaultRoute = _StandbyEthernetInterfaceIPv6StaticIPDefaultRoute_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 2, 4),
    _StandbyEthernetInterfaceIPv6StaticIPDefaultRoute_Type()
)
standbyEthernetInterfaceIPv6StaticIPDefaultRoute.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyEthernetInterfaceIPv6StaticIPDefaultRoute.setStatus("mandatory")
_StandbyEthernetInterfaceDHCPv6Config_ObjectIdentity = ObjectIdentity
standbyEthernetInterfaceDHCPv6Config = _StandbyEthernetInterfaceDHCPv6Config_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 3)
)


class _StandbyEthernetInterfaceDHCPv6Enabled_Type(Integer32):
    """Custom type standbyEthernetInterfaceDHCPv6Enabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_StandbyEthernetInterfaceDHCPv6Enabled_Type.__name__ = "Integer32"
_StandbyEthernetInterfaceDHCPv6Enabled_Object = MibScalar
standbyEthernetInterfaceDHCPv6Enabled = _StandbyEthernetInterfaceDHCPv6Enabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 3, 1),
    _StandbyEthernetInterfaceDHCPv6Enabled_Type()
)
standbyEthernetInterfaceDHCPv6Enabled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyEthernetInterfaceDHCPv6Enabled.setStatus("mandatory")
_StandbyEthernetInterfaceDHCPv6IPAddress_Type = InetAddressIPv6
_StandbyEthernetInterfaceDHCPv6IPAddress_Object = MibScalar
standbyEthernetInterfaceDHCPv6IPAddress = _StandbyEthernetInterfaceDHCPv6IPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 3, 2),
    _StandbyEthernetInterfaceDHCPv6IPAddress_Type()
)
standbyEthernetInterfaceDHCPv6IPAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyEthernetInterfaceDHCPv6IPAddress.setStatus("mandatory")


class _StandbyEthernetInterfaceDHCPv6DomainName_Type(OctetString):
    """Custom type standbyEthernetInterfaceDHCPv6DomainName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_StandbyEthernetInterfaceDHCPv6DomainName_Type.__name__ = "OctetString"
_StandbyEthernetInterfaceDHCPv6DomainName_Object = MibScalar
standbyEthernetInterfaceDHCPv6DomainName = _StandbyEthernetInterfaceDHCPv6DomainName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 3, 4),
    _StandbyEthernetInterfaceDHCPv6DomainName_Type()
)
standbyEthernetInterfaceDHCPv6DomainName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyEthernetInterfaceDHCPv6DomainName.setStatus("mandatory")
_StandbyEthernetInterfaceStatelessAutoConfigAddressesTable_Object = MibTable
standbyEthernetInterfaceStatelessAutoConfigAddressesTable = _StandbyEthernetInterfaceStatelessAutoConfigAddressesTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 4)
)
if mibBuilder.loadTexts:
    standbyEthernetInterfaceStatelessAutoConfigAddressesTable.setStatus("mandatory")
_StandbyEthernetInterfaceStatelessAutoConfigAddressesEntry_Object = MibTableRow
standbyEthernetInterfaceStatelessAutoConfigAddressesEntry = _StandbyEthernetInterfaceStatelessAutoConfigAddressesEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 4, 1)
)
standbyEthernetInterfaceStatelessAutoConfigAddressesEntry.setIndexNames(
    (0, "CME-MIB", "standbyEthernetInterfaceStatelessAutoConfigAddressesIndex"),
)
if mibBuilder.loadTexts:
    standbyEthernetInterfaceStatelessAutoConfigAddressesEntry.setStatus("mandatory")
_StandbyEthernetInterfaceStatelessAutoConfigAddressesIndex_Type = Integer32
_StandbyEthernetInterfaceStatelessAutoConfigAddressesIndex_Object = MibTableColumn
standbyEthernetInterfaceStatelessAutoConfigAddressesIndex = _StandbyEthernetInterfaceStatelessAutoConfigAddressesIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 4, 1, 1),
    _StandbyEthernetInterfaceStatelessAutoConfigAddressesIndex_Type()
)
standbyEthernetInterfaceStatelessAutoConfigAddressesIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyEthernetInterfaceStatelessAutoConfigAddressesIndex.setStatus("mandatory")
_StandbyEthernetInterfaceStatelessAutoConfigAddresses_Type = InetAddressIPv6
_StandbyEthernetInterfaceStatelessAutoConfigAddresses_Object = MibTableColumn
standbyEthernetInterfaceStatelessAutoConfigAddresses = _StandbyEthernetInterfaceStatelessAutoConfigAddresses_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 4, 1, 2),
    _StandbyEthernetInterfaceStatelessAutoConfigAddresses_Type()
)
standbyEthernetInterfaceStatelessAutoConfigAddresses.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyEthernetInterfaceStatelessAutoConfigAddresses.setStatus("mandatory")


class _StandbyEthernetInterfaceStatelessAutoConfigAddressesPrefixLen_Type(Integer32):
    """Custom type standbyEthernetInterfaceStatelessAutoConfigAddressesPrefixLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_StandbyEthernetInterfaceStatelessAutoConfigAddressesPrefixLen_Type.__name__ = "Integer32"
_StandbyEthernetInterfaceStatelessAutoConfigAddressesPrefixLen_Object = MibTableColumn
standbyEthernetInterfaceStatelessAutoConfigAddressesPrefixLen = _StandbyEthernetInterfaceStatelessAutoConfigAddressesPrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 5, 4, 1, 3),
    _StandbyEthernetInterfaceStatelessAutoConfigAddressesPrefixLen_Type()
)
standbyEthernetInterfaceStatelessAutoConfigAddressesPrefixLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyEthernetInterfaceStatelessAutoConfigAddressesPrefixLen.setStatus("mandatory")


class _DdnsStatus_Type(Integer32):
    """Custom type ddnsStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_DdnsStatus_Type.__name__ = "Integer32"
_DdnsStatus_Object = MibScalar
ddnsStatus = _DdnsStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 10),
    _DdnsStatus_Type()
)
ddnsStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ddnsStatus.setStatus("mandatory")


class _HostName_Type(OctetString):
    """Custom type hostName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_HostName_Type.__name__ = "OctetString"
_HostName_Object = MibScalar
hostName = _HostName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 11),
    _HostName_Type()
)
hostName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    hostName.setStatus("mandatory")


class _StandbyHostName_Type(OctetString):
    """Custom type standbyHostName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_StandbyHostName_Type.__name__ = "OctetString"
_StandbyHostName_Object = MibScalar
standbyHostName = _StandbyHostName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 12),
    _StandbyHostName_Type()
)
standbyHostName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    standbyHostName.setStatus("mandatory")
_DomainName_Type = OctetString
_DomainName_Object = MibScalar
domainName = _DomainName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 13),
    _DomainName_Type()
)
domainName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    domainName.setStatus("mandatory")
_StandbyDomainName_Type = OctetString
_StandbyDomainName_Object = MibScalar
standbyDomainName = _StandbyDomainName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 14),
    _StandbyDomainName_Type()
)
standbyDomainName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    standbyDomainName.setStatus("mandatory")


class _ActivateNetworkUpdates_Type(Integer32):
    """Custom type activateNetworkUpdates based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("noPendingUpdates", 0),
          ("pendingUpdates", 1))
    )


_ActivateNetworkUpdates_Type.__name__ = "Integer32"
_ActivateNetworkUpdates_Object = MibScalar
activateNetworkUpdates = _ActivateNetworkUpdates_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 16),
    _ActivateNetworkUpdates_Type()
)
activateNetworkUpdates.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    activateNetworkUpdates.setStatus("mandatory")
_VlanConfigure_ObjectIdentity = ObjectIdentity
vlanConfigure = _VlanConfigure_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20)
)


class _VlanGlobalState_Type(Integer32):
    """Custom type vlanGlobalState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_VlanGlobalState_Type.__name__ = "Integer32"
_VlanGlobalState_Object = MibScalar
vlanGlobalState = _VlanGlobalState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 1),
    _VlanGlobalState_Type()
)
vlanGlobalState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanGlobalState.setStatus("mandatory")


class _VlanCommitTimeout_Type(Integer32):
    """Custom type vlanCommitTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_VlanCommitTimeout_Type.__name__ = "Integer32"
_VlanCommitTimeout_Object = MibScalar
vlanCommitTimeout = _VlanCommitTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 2),
    _VlanCommitTimeout_Type()
)
vlanCommitTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanCommitTimeout.setStatus("mandatory")


class _VlanCommitState_Type(Integer32):
    """Custom type vlanCommitState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noChangesPending", 1),
          ("commitNeeded", 2),
          ("executeCommit", 3))
    )


_VlanCommitState_Type.__name__ = "Integer32"
_VlanCommitState_Object = MibScalar
vlanCommitState = _VlanCommitState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 3),
    _VlanCommitState_Type()
)
vlanCommitState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanCommitState.setStatus("mandatory")
_VlanCMMTable_Object = MibTable
vlanCMMTable = _VlanCMMTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20)
)
if mibBuilder.loadTexts:
    vlanCMMTable.setStatus("mandatory")
_VlanCMMEntry_Object = MibTableRow
vlanCMMEntry = _VlanCMMEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1)
)
vlanCMMEntry.setIndexNames(
    (0, "CME-MIB", "vlanCMMIndex"),
)
if mibBuilder.loadTexts:
    vlanCMMEntry.setStatus("mandatory")


class _VlanCMMIndex_Type(Integer32):
    """Custom type vlanCMMIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_VlanCMMIndex_Type.__name__ = "Integer32"
_VlanCMMIndex_Object = MibTableColumn
vlanCMMIndex = _VlanCMMIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 1),
    _VlanCMMIndex_Type()
)
vlanCMMIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanCMMIndex.setStatus("mandatory")


class _VlanCMMVlanId_Type(Integer32):
    """Custom type vlanCMMVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_VlanCMMVlanId_Type.__name__ = "Integer32"
_VlanCMMVlanId_Object = MibTableColumn
vlanCMMVlanId = _VlanCMMVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 2),
    _VlanCMMVlanId_Type()
)
vlanCMMVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanCMMVlanId.setStatus("mandatory")


class _VlanCMMName_Type(OctetString):
    """Custom type vlanCMMName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 31),
    )


_VlanCMMName_Type.__name__ = "OctetString"
_VlanCMMName_Object = MibTableColumn
vlanCMMName = _VlanCMMName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 3),
    _VlanCMMName_Type()
)
vlanCMMName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanCMMName.setStatus("mandatory")
_VlanCMMEntryStatus_Type = EntryStatus
_VlanCMMEntryStatus_Object = MibTableColumn
vlanCMMEntryStatus = _VlanCMMEntryStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 4),
    _VlanCMMEntryStatus_Type()
)
vlanCMMEntryStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanCMMEntryStatus.setStatus("mandatory")


class _VlanCMMState_Type(Integer32):
    """Custom type vlanCMMState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1),
          ("restart", 2))
    )


_VlanCMMState_Type.__name__ = "Integer32"
_VlanCMMState_Object = MibTableColumn
vlanCMMState = _VlanCMMState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 5),
    _VlanCMMState_Type()
)
vlanCMMState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanCMMState.setStatus("mandatory")


class _VlanCMMSOLAccess_Type(Integer32):
    """Custom type vlanCMMSOLAccess based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_VlanCMMSOLAccess_Type.__name__ = "Integer32"
_VlanCMMSOLAccess_Object = MibTableColumn
vlanCMMSOLAccess = _VlanCMMSOLAccess_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 6),
    _VlanCMMSOLAccess_Type()
)
vlanCMMSOLAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanCMMSOLAccess.setStatus("mandatory")


class _VlanCMMTagging_Type(Integer32):
    """Custom type vlanCMMTagging based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_VlanCMMTagging_Type.__name__ = "Integer32"
_VlanCMMTagging_Object = MibTableColumn
vlanCMMTagging = _VlanCMMTagging_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 8),
    _VlanCMMTagging_Type()
)
vlanCMMTagging.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanCMMTagging.setStatus("mandatory")
_VlanCMMIPv4Address_Type = IpAddress
_VlanCMMIPv4Address_Object = MibTableColumn
vlanCMMIPv4Address = _VlanCMMIPv4Address_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 31),
    _VlanCMMIPv4Address_Type()
)
vlanCMMIPv4Address.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanCMMIPv4Address.setStatus("mandatory")
_VlanCMMIPv4Gateway_Type = IpAddress
_VlanCMMIPv4Gateway_Object = MibTableColumn
vlanCMMIPv4Gateway = _VlanCMMIPv4Gateway_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 32),
    _VlanCMMIPv4Gateway_Type()
)
vlanCMMIPv4Gateway.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanCMMIPv4Gateway.setStatus("mandatory")
_VlanCMMIPv4Mask_Type = IpAddress
_VlanCMMIPv4Mask_Object = MibTableColumn
vlanCMMIPv4Mask = _VlanCMMIPv4Mask_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 33),
    _VlanCMMIPv4Mask_Type()
)
vlanCMMIPv4Mask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanCMMIPv4Mask.setStatus("mandatory")
_VlanCMMIPv4SubnetRoute1_Type = IpAddress
_VlanCMMIPv4SubnetRoute1_Object = MibTableColumn
vlanCMMIPv4SubnetRoute1 = _VlanCMMIPv4SubnetRoute1_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 51),
    _VlanCMMIPv4SubnetRoute1_Type()
)
vlanCMMIPv4SubnetRoute1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanCMMIPv4SubnetRoute1.setStatus("mandatory")
_VlanCMMIPv4SubnetRouteMask1_Type = IpAddress
_VlanCMMIPv4SubnetRouteMask1_Object = MibTableColumn
vlanCMMIPv4SubnetRouteMask1 = _VlanCMMIPv4SubnetRouteMask1_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 52),
    _VlanCMMIPv4SubnetRouteMask1_Type()
)
vlanCMMIPv4SubnetRouteMask1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanCMMIPv4SubnetRouteMask1.setStatus("mandatory")
_VlanCMMIPv4SubnetRoute2_Type = IpAddress
_VlanCMMIPv4SubnetRoute2_Object = MibTableColumn
vlanCMMIPv4SubnetRoute2 = _VlanCMMIPv4SubnetRoute2_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 53),
    _VlanCMMIPv4SubnetRoute2_Type()
)
vlanCMMIPv4SubnetRoute2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanCMMIPv4SubnetRoute2.setStatus("mandatory")
_VlanCMMIPv4SubnetRouteMask2_Type = IpAddress
_VlanCMMIPv4SubnetRouteMask2_Object = MibTableColumn
vlanCMMIPv4SubnetRouteMask2 = _VlanCMMIPv4SubnetRouteMask2_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 54),
    _VlanCMMIPv4SubnetRouteMask2_Type()
)
vlanCMMIPv4SubnetRouteMask2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanCMMIPv4SubnetRouteMask2.setStatus("mandatory")
_VlanCMMIPv4SubnetRoute3_Type = IpAddress
_VlanCMMIPv4SubnetRoute3_Object = MibTableColumn
vlanCMMIPv4SubnetRoute3 = _VlanCMMIPv4SubnetRoute3_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 55),
    _VlanCMMIPv4SubnetRoute3_Type()
)
vlanCMMIPv4SubnetRoute3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanCMMIPv4SubnetRoute3.setStatus("mandatory")
_VlanCMMIPv4SubnetRouteMask3_Type = IpAddress
_VlanCMMIPv4SubnetRouteMask3_Object = MibTableColumn
vlanCMMIPv4SubnetRouteMask3 = _VlanCMMIPv4SubnetRouteMask3_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 56),
    _VlanCMMIPv4SubnetRouteMask3_Type()
)
vlanCMMIPv4SubnetRouteMask3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanCMMIPv4SubnetRouteMask3.setStatus("mandatory")
_VlanCMMIPv6Address_Type = InetAddressIPv6
_VlanCMMIPv6Address_Object = MibTableColumn
vlanCMMIPv6Address = _VlanCMMIPv6Address_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 71),
    _VlanCMMIPv6Address_Type()
)
vlanCMMIPv6Address.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanCMMIPv6Address.setStatus("mandatory")


class _VlanCMMIPv6AddressPrefixLen_Type(Integer32):
    """Custom type vlanCMMIPv6AddressPrefixLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_VlanCMMIPv6AddressPrefixLen_Type.__name__ = "Integer32"
_VlanCMMIPv6AddressPrefixLen_Object = MibTableColumn
vlanCMMIPv6AddressPrefixLen = _VlanCMMIPv6AddressPrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 72),
    _VlanCMMIPv6AddressPrefixLen_Type()
)
vlanCMMIPv6AddressPrefixLen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanCMMIPv6AddressPrefixLen.setStatus("mandatory")
_VlanCMMIPv6Gateway_Type = InetAddressIPv6
_VlanCMMIPv6Gateway_Object = MibTableColumn
vlanCMMIPv6Gateway = _VlanCMMIPv6Gateway_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 73),
    _VlanCMMIPv6Gateway_Type()
)
vlanCMMIPv6Gateway.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanCMMIPv6Gateway.setStatus("mandatory")
_VlanCMMIPv6SubnetRoute1_Type = InetAddressIPv6
_VlanCMMIPv6SubnetRoute1_Object = MibTableColumn
vlanCMMIPv6SubnetRoute1 = _VlanCMMIPv6SubnetRoute1_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 91),
    _VlanCMMIPv6SubnetRoute1_Type()
)
vlanCMMIPv6SubnetRoute1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanCMMIPv6SubnetRoute1.setStatus("mandatory")


class _VlanCMMIPv6SubnetRoutePrefixLen1_Type(Integer32):
    """Custom type vlanCMMIPv6SubnetRoutePrefixLen1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_VlanCMMIPv6SubnetRoutePrefixLen1_Type.__name__ = "Integer32"
_VlanCMMIPv6SubnetRoutePrefixLen1_Object = MibTableColumn
vlanCMMIPv6SubnetRoutePrefixLen1 = _VlanCMMIPv6SubnetRoutePrefixLen1_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 92),
    _VlanCMMIPv6SubnetRoutePrefixLen1_Type()
)
vlanCMMIPv6SubnetRoutePrefixLen1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanCMMIPv6SubnetRoutePrefixLen1.setStatus("mandatory")
_VlanCMMIPv6SubnetRoute2_Type = InetAddressIPv6
_VlanCMMIPv6SubnetRoute2_Object = MibTableColumn
vlanCMMIPv6SubnetRoute2 = _VlanCMMIPv6SubnetRoute2_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 93),
    _VlanCMMIPv6SubnetRoute2_Type()
)
vlanCMMIPv6SubnetRoute2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanCMMIPv6SubnetRoute2.setStatus("mandatory")


class _VlanCMMIPv6SubnetRoutePrefixLen2_Type(Integer32):
    """Custom type vlanCMMIPv6SubnetRoutePrefixLen2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_VlanCMMIPv6SubnetRoutePrefixLen2_Type.__name__ = "Integer32"
_VlanCMMIPv6SubnetRoutePrefixLen2_Object = MibTableColumn
vlanCMMIPv6SubnetRoutePrefixLen2 = _VlanCMMIPv6SubnetRoutePrefixLen2_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 94),
    _VlanCMMIPv6SubnetRoutePrefixLen2_Type()
)
vlanCMMIPv6SubnetRoutePrefixLen2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanCMMIPv6SubnetRoutePrefixLen2.setStatus("mandatory")
_VlanCMMIPv6SubnetRoute3_Type = InetAddressIPv6
_VlanCMMIPv6SubnetRoute3_Object = MibTableColumn
vlanCMMIPv6SubnetRoute3 = _VlanCMMIPv6SubnetRoute3_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 95),
    _VlanCMMIPv6SubnetRoute3_Type()
)
vlanCMMIPv6SubnetRoute3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanCMMIPv6SubnetRoute3.setStatus("mandatory")


class _VlanCMMIPv6SubnetRoutePrefixLen3_Type(Integer32):
    """Custom type vlanCMMIPv6SubnetRoutePrefixLen3 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_VlanCMMIPv6SubnetRoutePrefixLen3_Type.__name__ = "Integer32"
_VlanCMMIPv6SubnetRoutePrefixLen3_Object = MibTableColumn
vlanCMMIPv6SubnetRoutePrefixLen3 = _VlanCMMIPv6SubnetRoutePrefixLen3_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 20, 1, 96),
    _VlanCMMIPv6SubnetRoutePrefixLen3_Type()
)
vlanCMMIPv6SubnetRoutePrefixLen3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanCMMIPv6SubnetRoutePrefixLen3.setStatus("mandatory")
_VlanCMMTableCacheTimeout_Type = Integer32
_VlanCMMTableCacheTimeout_Object = MibScalar
vlanCMMTableCacheTimeout = _VlanCMMTableCacheTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 1, 20, 21),
    _VlanCMMTableCacheTimeout_Type()
)
vlanCMMTableCacheTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanCMMTableCacheTimeout.setStatus("mandatory")
_TcpProtocols_ObjectIdentity = ObjectIdentity
tcpProtocols = _TcpProtocols_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3)
)
_SnmpAgentConfig_ObjectIdentity = ObjectIdentity
snmpAgentConfig = _SnmpAgentConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1)
)


class _SnmpSystemContact_Type(OctetString):
    """Custom type snmpSystemContact based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 48),
    )


_SnmpSystemContact_Type.__name__ = "OctetString"
_SnmpSystemContact_Object = MibScalar
snmpSystemContact = _SnmpSystemContact_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 1),
    _SnmpSystemContact_Type()
)
snmpSystemContact.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpSystemContact.setStatus("mandatory")


class _SnmpSystemLocation_Type(OctetString):
    """Custom type snmpSystemLocation based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 48),
    )


_SnmpSystemLocation_Type.__name__ = "OctetString"
_SnmpSystemLocation_Object = MibScalar
snmpSystemLocation = _SnmpSystemLocation_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 2),
    _SnmpSystemLocation_Type()
)
snmpSystemLocation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpSystemLocation.setStatus("mandatory")


class _SnmpSystemAgentTrapsDisable_Type(Integer32):
    """Custom type snmpSystemAgentTrapsDisable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("trapsEnabled", 0),
          ("trapsDisabled", 1))
    )


_SnmpSystemAgentTrapsDisable_Type.__name__ = "Integer32"
_SnmpSystemAgentTrapsDisable_Object = MibScalar
snmpSystemAgentTrapsDisable = _SnmpSystemAgentTrapsDisable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 3),
    _SnmpSystemAgentTrapsDisable_Type()
)
snmpSystemAgentTrapsDisable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpSystemAgentTrapsDisable.setStatus("mandatory")
_SnmpAgentCommunityConfig_ObjectIdentity = ObjectIdentity
snmpAgentCommunityConfig = _SnmpAgentCommunityConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4)
)
_SnmpCommunityTable_Object = MibTable
snmpCommunityTable = _SnmpCommunityTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1)
)
if mibBuilder.loadTexts:
    snmpCommunityTable.setStatus("mandatory")
_SnmpCommunityEntry_Object = MibTableRow
snmpCommunityEntry = _SnmpCommunityEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1)
)
snmpCommunityEntry.setIndexNames(
    (0, "CME-MIB", "snmpCommunityEntryIndex"),
)
if mibBuilder.loadTexts:
    snmpCommunityEntry.setStatus("mandatory")


class _SnmpCommunityEntryIndex_Type(Integer32):
    """Custom type snmpCommunityEntryIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_SnmpCommunityEntryIndex_Type.__name__ = "Integer32"
_SnmpCommunityEntryIndex_Object = MibTableColumn
snmpCommunityEntryIndex = _SnmpCommunityEntryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 1),
    _SnmpCommunityEntryIndex_Type()
)
snmpCommunityEntryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    snmpCommunityEntryIndex.setStatus("mandatory")


class _SnmpCommunityEntryCommunityName_Type(OctetString):
    """Custom type snmpCommunityEntryCommunityName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 15),
    )


_SnmpCommunityEntryCommunityName_Type.__name__ = "OctetString"
_SnmpCommunityEntryCommunityName_Object = MibTableColumn
snmpCommunityEntryCommunityName = _SnmpCommunityEntryCommunityName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 2),
    _SnmpCommunityEntryCommunityName_Type()
)
snmpCommunityEntryCommunityName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpCommunityEntryCommunityName.setStatus("mandatory")


class _SnmpCommunityEntryCommunityIpAddress1_Type(OctetString):
    """Custom type snmpCommunityEntryCommunityIpAddress1 based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 63),
    )


_SnmpCommunityEntryCommunityIpAddress1_Type.__name__ = "OctetString"
_SnmpCommunityEntryCommunityIpAddress1_Object = MibTableColumn
snmpCommunityEntryCommunityIpAddress1 = _SnmpCommunityEntryCommunityIpAddress1_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 3),
    _SnmpCommunityEntryCommunityIpAddress1_Type()
)
snmpCommunityEntryCommunityIpAddress1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpCommunityEntryCommunityIpAddress1.setStatus("mandatory")


class _SnmpCommunityEntryCommunityIpAddress2_Type(OctetString):
    """Custom type snmpCommunityEntryCommunityIpAddress2 based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 63),
    )


_SnmpCommunityEntryCommunityIpAddress2_Type.__name__ = "OctetString"
_SnmpCommunityEntryCommunityIpAddress2_Object = MibTableColumn
snmpCommunityEntryCommunityIpAddress2 = _SnmpCommunityEntryCommunityIpAddress2_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 4),
    _SnmpCommunityEntryCommunityIpAddress2_Type()
)
snmpCommunityEntryCommunityIpAddress2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpCommunityEntryCommunityIpAddress2.setStatus("mandatory")


class _SnmpCommunityEntryCommunityIpAddress3_Type(OctetString):
    """Custom type snmpCommunityEntryCommunityIpAddress3 based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 63),
    )


_SnmpCommunityEntryCommunityIpAddress3_Type.__name__ = "OctetString"
_SnmpCommunityEntryCommunityIpAddress3_Object = MibTableColumn
snmpCommunityEntryCommunityIpAddress3 = _SnmpCommunityEntryCommunityIpAddress3_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 5),
    _SnmpCommunityEntryCommunityIpAddress3_Type()
)
snmpCommunityEntryCommunityIpAddress3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpCommunityEntryCommunityIpAddress3.setStatus("mandatory")


class _SnmpCommunityEntryCommunityViewType_Type(Integer32):
    """Custom type snmpCommunityEntryCommunityViewType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("read-Traps", 1),
          ("write-Read-Traps", 2),
          ("traps-Only", 3))
    )


_SnmpCommunityEntryCommunityViewType_Type.__name__ = "Integer32"
_SnmpCommunityEntryCommunityViewType_Object = MibTableColumn
snmpCommunityEntryCommunityViewType = _SnmpCommunityEntryCommunityViewType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 4, 1, 1, 6),
    _SnmpCommunityEntryCommunityViewType_Type()
)
snmpCommunityEntryCommunityViewType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpCommunityEntryCommunityViewType.setStatus("mandatory")


class _Snmpv1SystemAgentEnable_Type(Integer32):
    """Custom type snmpv1SystemAgentEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_Snmpv1SystemAgentEnable_Type.__name__ = "Integer32"
_Snmpv1SystemAgentEnable_Object = MibScalar
snmpv1SystemAgentEnable = _Snmpv1SystemAgentEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 5),
    _Snmpv1SystemAgentEnable_Type()
)
snmpv1SystemAgentEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpv1SystemAgentEnable.setStatus("mandatory")


class _Snmpv3SystemAgentEnable_Type(Integer32):
    """Custom type snmpv3SystemAgentEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_Snmpv3SystemAgentEnable_Type.__name__ = "Integer32"
_Snmpv3SystemAgentEnable_Object = MibScalar
snmpv3SystemAgentEnable = _Snmpv3SystemAgentEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 6),
    _Snmpv3SystemAgentEnable_Type()
)
snmpv3SystemAgentEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpv3SystemAgentEnable.setStatus("mandatory")
_SnmpAgentUserProfileConfig_ObjectIdentity = ObjectIdentity
snmpAgentUserProfileConfig = _SnmpAgentUserProfileConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9)
)
_SnmpUserProfileTable_Object = MibTable
snmpUserProfileTable = _SnmpUserProfileTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1)
)
if mibBuilder.loadTexts:
    snmpUserProfileTable.setStatus("mandatory")
_SnmpUserProfileEntry_Object = MibTableRow
snmpUserProfileEntry = _SnmpUserProfileEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1)
)
snmpUserProfileEntry.setIndexNames(
    (0, "CME-MIB", "snmpUserProfileEntryIndex"),
)
if mibBuilder.loadTexts:
    snmpUserProfileEntry.setStatus("mandatory")


class _SnmpUserProfileEntryIndex_Type(Integer32):
    """Custom type snmpUserProfileEntryIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_SnmpUserProfileEntryIndex_Type.__name__ = "Integer32"
_SnmpUserProfileEntryIndex_Object = MibTableColumn
snmpUserProfileEntryIndex = _SnmpUserProfileEntryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1, 1),
    _SnmpUserProfileEntryIndex_Type()
)
snmpUserProfileEntryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    snmpUserProfileEntryIndex.setStatus("mandatory")


class _SnmpUserProfileEntryContextName_Type(OctetString):
    """Custom type snmpUserProfileEntryContextName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 31),
    )


_SnmpUserProfileEntryContextName_Type.__name__ = "OctetString"
_SnmpUserProfileEntryContextName_Object = MibTableColumn
snmpUserProfileEntryContextName = _SnmpUserProfileEntryContextName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1, 3),
    _SnmpUserProfileEntryContextName_Type()
)
snmpUserProfileEntryContextName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpUserProfileEntryContextName.setStatus("mandatory")


class _SnmpUserProfileEntryAuthProt_Type(Integer32):
    """Custom type snmpUserProfileEntryAuthProt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("md5", 2),
          ("sha", 3))
    )


_SnmpUserProfileEntryAuthProt_Type.__name__ = "Integer32"
_SnmpUserProfileEntryAuthProt_Object = MibTableColumn
snmpUserProfileEntryAuthProt = _SnmpUserProfileEntryAuthProt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1, 4),
    _SnmpUserProfileEntryAuthProt_Type()
)
snmpUserProfileEntryAuthProt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpUserProfileEntryAuthProt.setStatus("mandatory")


class _SnmpUserProfileEntryPrivProt_Type(Integer32):
    """Custom type snmpUserProfileEntryPrivProt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("des", 2),
          ("aes", 4))
    )


_SnmpUserProfileEntryPrivProt_Type.__name__ = "Integer32"
_SnmpUserProfileEntryPrivProt_Object = MibTableColumn
snmpUserProfileEntryPrivProt = _SnmpUserProfileEntryPrivProt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1, 6),
    _SnmpUserProfileEntryPrivProt_Type()
)
snmpUserProfileEntryPrivProt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpUserProfileEntryPrivProt.setStatus("mandatory")


class _SnmpUserProfileEntryPrivPassword_Type(OctetString):
    """Custom type snmpUserProfileEntryPrivPassword based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 31),
    )


_SnmpUserProfileEntryPrivPassword_Type.__name__ = "OctetString"
_SnmpUserProfileEntryPrivPassword_Object = MibTableColumn
snmpUserProfileEntryPrivPassword = _SnmpUserProfileEntryPrivPassword_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1, 7),
    _SnmpUserProfileEntryPrivPassword_Type()
)
snmpUserProfileEntryPrivPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpUserProfileEntryPrivPassword.setStatus("mandatory")


class _SnmpUserProfileEntryViewType_Type(Integer32):
    """Custom type snmpUserProfileEntryViewType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("read-Traps", 1),
          ("read-Write-Traps", 2),
          ("traps-Only", 3))
    )


_SnmpUserProfileEntryViewType_Type.__name__ = "Integer32"
_SnmpUserProfileEntryViewType_Object = MibTableColumn
snmpUserProfileEntryViewType = _SnmpUserProfileEntryViewType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1, 8),
    _SnmpUserProfileEntryViewType_Type()
)
snmpUserProfileEntryViewType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpUserProfileEntryViewType.setStatus("mandatory")


class _SnmpUserProfileEntryIpAddress_Type(OctetString):
    """Custom type snmpUserProfileEntryIpAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 63),
    )


_SnmpUserProfileEntryIpAddress_Type.__name__ = "OctetString"
_SnmpUserProfileEntryIpAddress_Object = MibTableColumn
snmpUserProfileEntryIpAddress = _SnmpUserProfileEntryIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1, 9),
    _SnmpUserProfileEntryIpAddress_Type()
)
snmpUserProfileEntryIpAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpUserProfileEntryIpAddress.setStatus("mandatory")


class _SnmpUserProfileEntryUserId_Type(OctetString):
    """Custom type snmpUserProfileEntryUserId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 31),
    )


_SnmpUserProfileEntryUserId_Type.__name__ = "OctetString"
_SnmpUserProfileEntryUserId_Object = MibTableColumn
snmpUserProfileEntryUserId = _SnmpUserProfileEntryUserId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 1, 9, 1, 1, 10),
    _SnmpUserProfileEntryUserId_Type()
)
snmpUserProfileEntryUserId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    snmpUserProfileEntryUserId.setStatus("mandatory")
_DnsConfig_ObjectIdentity = ObjectIdentity
dnsConfig = _DnsConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 2)
)


class _DnsEnabled_Type(Integer32):
    """Custom type dnsEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("dnsDisabled", 0),
          ("dnsEnabled", 1))
    )


_DnsEnabled_Type.__name__ = "Integer32"
_DnsEnabled_Object = MibScalar
dnsEnabled = _DnsEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 2, 1),
    _DnsEnabled_Type()
)
dnsEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dnsEnabled.setStatus("mandatory")
_DnsServerIPAddress1_Type = IpAddress
_DnsServerIPAddress1_Object = MibScalar
dnsServerIPAddress1 = _DnsServerIPAddress1_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 2, 2),
    _DnsServerIPAddress1_Type()
)
dnsServerIPAddress1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dnsServerIPAddress1.setStatus("mandatory")
_DnsServerIPAddress2_Type = IpAddress
_DnsServerIPAddress2_Object = MibScalar
dnsServerIPAddress2 = _DnsServerIPAddress2_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 2, 3),
    _DnsServerIPAddress2_Type()
)
dnsServerIPAddress2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dnsServerIPAddress2.setStatus("mandatory")
_DnsServerIPAddress3_Type = IpAddress
_DnsServerIPAddress3_Object = MibScalar
dnsServerIPAddress3 = _DnsServerIPAddress3_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 2, 4),
    _DnsServerIPAddress3_Type()
)
dnsServerIPAddress3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dnsServerIPAddress3.setStatus("mandatory")
_DnsServerIPv6Address1_Type = InetAddressIPv6
_DnsServerIPv6Address1_Object = MibScalar
dnsServerIPv6Address1 = _DnsServerIPv6Address1_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 2, 12),
    _DnsServerIPv6Address1_Type()
)
dnsServerIPv6Address1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dnsServerIPv6Address1.setStatus("mandatory")
_DnsServerIPv6Address2_Type = InetAddressIPv6
_DnsServerIPv6Address2_Object = MibScalar
dnsServerIPv6Address2 = _DnsServerIPv6Address2_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 2, 13),
    _DnsServerIPv6Address2_Type()
)
dnsServerIPv6Address2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dnsServerIPv6Address2.setStatus("mandatory")
_DnsServerIPv6Address3_Type = InetAddressIPv6
_DnsServerIPv6Address3_Object = MibScalar
dnsServerIPv6Address3 = _DnsServerIPv6Address3_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 2, 14),
    _DnsServerIPv6Address3_Type()
)
dnsServerIPv6Address3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dnsServerIPv6Address3.setStatus("mandatory")


class _DnsPriority_Type(Integer32):
    """Custom type dnsPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ipv6", 1),
          ("ipv4", 2))
    )


_DnsPriority_Type.__name__ = "Integer32"
_DnsPriority_Object = MibScalar
dnsPriority = _DnsPriority_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 2, 20),
    _DnsPriority_Type()
)
dnsPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dnsPriority.setStatus("mandatory")
_SmtpConfig_ObjectIdentity = ObjectIdentity
smtpConfig = _SmtpConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 3)
)


class _SmtpServerNameOrIPAddress_Type(OctetString):
    """Custom type smtpServerNameOrIPAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_SmtpServerNameOrIPAddress_Type.__name__ = "OctetString"
_SmtpServerNameOrIPAddress_Object = MibScalar
smtpServerNameOrIPAddress = _SmtpServerNameOrIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 3, 1),
    _SmtpServerNameOrIPAddress_Type()
)
smtpServerNameOrIPAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smtpServerNameOrIPAddress.setStatus("mandatory")


class _AttachmentsToEmailAlerts_Type(Integer32):
    """Custom type attachmentsToEmailAlerts based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("noAttachments", 0),
          ("attachServiceInformation", 1))
    )


_AttachmentsToEmailAlerts_Type.__name__ = "Integer32"
_AttachmentsToEmailAlerts_Object = MibScalar
attachmentsToEmailAlerts = _AttachmentsToEmailAlerts_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 3, 2),
    _AttachmentsToEmailAlerts_Type()
)
attachmentsToEmailAlerts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    attachmentsToEmailAlerts.setStatus("mandatory")


class _SmtpEmailDomain_Type(OctetString):
    """Custom type smtpEmailDomain based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_SmtpEmailDomain_Type.__name__ = "OctetString"
_SmtpEmailDomain_Object = MibScalar
smtpEmailDomain = _SmtpEmailDomain_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 3, 3),
    _SmtpEmailDomain_Type()
)
smtpEmailDomain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smtpEmailDomain.setStatus("mandatory")
_TcpApplicationConfig_ObjectIdentity = ObjectIdentity
tcpApplicationConfig = _TcpApplicationConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4)
)
_TelnetInactivityTimeout_Type = Integer32
_TelnetInactivityTimeout_Object = MibScalar
telnetInactivityTimeout = _TelnetInactivityTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 1),
    _TelnetInactivityTimeout_Type()
)
telnetInactivityTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    telnetInactivityTimeout.setStatus("mandatory")
_CommandModeInactivityTimeout_Type = Integer32
_CommandModeInactivityTimeout_Object = MibScalar
commandModeInactivityTimeout = _CommandModeInactivityTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 2),
    _CommandModeInactivityTimeout_Type()
)
commandModeInactivityTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    commandModeInactivityTimeout.setStatus("mandatory")
_SecureCommandModeEnable_Type = Integer32
_SecureCommandModeEnable_Object = MibScalar
secureCommandModeEnable = _SecureCommandModeEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 3),
    _SecureCommandModeEnable_Type()
)
secureCommandModeEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    secureCommandModeEnable.setStatus("mandatory")
_CommandModeEnable_Type = Integer32
_CommandModeEnable_Object = MibScalar
commandModeEnable = _CommandModeEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 4),
    _CommandModeEnable_Type()
)
commandModeEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    commandModeEnable.setStatus("mandatory")


class _SlpAddrType_Type(Integer32):
    """Custom type slpAddrType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("multicast", 0),
          ("broadcast", 1))
    )


_SlpAddrType_Type.__name__ = "Integer32"
_SlpAddrType_Object = MibScalar
slpAddrType = _SlpAddrType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 5),
    _SlpAddrType_Type()
)
slpAddrType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slpAddrType.setStatus("mandatory")


class _SlpEnable_Type(Integer32):
    """Custom type slpEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SlpEnable_Type.__name__ = "Integer32"
_SlpEnable_Object = MibScalar
slpEnable = _SlpEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 7),
    _SlpEnable_Type()
)
slpEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slpEnable.setStatus("mandatory")


class _TelnetEnable_Type(Integer32):
    """Custom type telnetEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_TelnetEnable_Type.__name__ = "Integer32"
_TelnetEnable_Object = MibScalar
telnetEnable = _TelnetEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 9),
    _TelnetEnable_Type()
)
telnetEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    telnetEnable.setStatus("mandatory")


class _SshEnable_Type(Integer32):
    """Custom type sshEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SshEnable_Type.__name__ = "Integer32"
_SshEnable_Object = MibScalar
sshEnable = _SshEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 10),
    _SshEnable_Type()
)
sshEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sshEnable.setStatus("mandatory")


class _SslServerEnable_Type(Integer32):
    """Custom type sslServerEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SslServerEnable_Type.__name__ = "Integer32"
_SslServerEnable_Object = MibScalar
sslServerEnable = _SslServerEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 15),
    _SslServerEnable_Type()
)
sslServerEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sslServerEnable.setStatus("mandatory")


class _SslClientEnable_Type(Integer32):
    """Custom type sslClientEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SslClientEnable_Type.__name__ = "Integer32"
_SslClientEnable_Object = MibScalar
sslClientEnable = _SslClientEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 16),
    _SslClientEnable_Type()
)
sslClientEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sslClientEnable.setStatus("mandatory")


class _FtpEnable_Type(Integer32):
    """Custom type ftpEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_FtpEnable_Type.__name__ = "Integer32"
_FtpEnable_Object = MibScalar
ftpEnable = _FtpEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 17),
    _FtpEnable_Type()
)
ftpEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ftpEnable.setStatus("mandatory")


class _SftpEnable_Type(Integer32):
    """Custom type sftpEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SftpEnable_Type.__name__ = "Integer32"
_SftpEnable_Object = MibScalar
sftpEnable = _SftpEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 18),
    _SftpEnable_Type()
)
sftpEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sftpEnable.setStatus("mandatory")


class _TftpEnable_Type(Integer32):
    """Custom type tftpEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_TftpEnable_Type.__name__ = "Integer32"
_TftpEnable_Object = MibScalar
tftpEnable = _TftpEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 19),
    _TftpEnable_Type()
)
tftpEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tftpEnable.setStatus("mandatory")
_FtpTimeout_Type = Integer32
_FtpTimeout_Object = MibScalar
ftpTimeout = _FtpTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 23),
    _FtpTimeout_Type()
)
ftpTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ftpTimeout.setStatus("mandatory")
_MmSshServerConfig_ObjectIdentity = ObjectIdentity
mmSshServerConfig = _MmSshServerConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 27)
)
_MmSshServerHostKeyTable_Object = MibTable
mmSshServerHostKeyTable = _MmSshServerHostKeyTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 27, 1)
)
if mibBuilder.loadTexts:
    mmSshServerHostKeyTable.setStatus("mandatory")
_MmSshServerHostKeyEntry_Object = MibTableRow
mmSshServerHostKeyEntry = _MmSshServerHostKeyEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 27, 1, 1)
)
mmSshServerHostKeyEntry.setIndexNames(
    (0, "CME-MIB", "mmSshServerHostKeyIndex"),
)
if mibBuilder.loadTexts:
    mmSshServerHostKeyEntry.setStatus("mandatory")
_MmSshServerHostKeyIndex_Type = Integer32
_MmSshServerHostKeyIndex_Object = MibTableColumn
mmSshServerHostKeyIndex = _MmSshServerHostKeyIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 27, 1, 1, 1),
    _MmSshServerHostKeyIndex_Type()
)
mmSshServerHostKeyIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmSshServerHostKeyIndex.setStatus("mandatory")


class _MmSshServerHostKeyType_Type(Integer32):
    """Custom type mmSshServerHostKeyType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("sshDss", 1),
          ("sshRsa", 2))
    )


_MmSshServerHostKeyType_Type.__name__ = "Integer32"
_MmSshServerHostKeyType_Object = MibTableColumn
mmSshServerHostKeyType = _MmSshServerHostKeyType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 27, 1, 1, 2),
    _MmSshServerHostKeyType_Type()
)
mmSshServerHostKeyType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmSshServerHostKeyType.setStatus("mandatory")


class _MmSshServerHostKeySize_Type(Integer32):
    """Custom type mmSshServerHostKeySize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("bits512", 1),
          ("bits768", 2),
          ("bits1024", 3),
          ("bits2048", 4),
          ("bits4096", 5))
    )


_MmSshServerHostKeySize_Type.__name__ = "Integer32"
_MmSshServerHostKeySize_Object = MibTableColumn
mmSshServerHostKeySize = _MmSshServerHostKeySize_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 27, 1, 1, 3),
    _MmSshServerHostKeySize_Type()
)
mmSshServerHostKeySize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmSshServerHostKeySize.setStatus("mandatory")
_MmSshServerHostKeyFingerprint_Type = OctetString
_MmSshServerHostKeyFingerprint_Object = MibTableColumn
mmSshServerHostKeyFingerprint = _MmSshServerHostKeyFingerprint_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 27, 1, 1, 4),
    _MmSshServerHostKeyFingerprint_Type()
)
mmSshServerHostKeyFingerprint.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmSshServerHostKeyFingerprint.setStatus("mandatory")


class _MmSshServerHostKeyGenerate_Type(Integer32):
    """Custom type mmSshServerHostKeyGenerate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_MmSshServerHostKeyGenerate_Type.__name__ = "Integer32"
_MmSshServerHostKeyGenerate_Object = MibScalar
mmSshServerHostKeyGenerate = _MmSshServerHostKeyGenerate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 27, 2),
    _MmSshServerHostKeyGenerate_Type()
)
mmSshServerHostKeyGenerate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mmSshServerHostKeyGenerate.setStatus("mandatory")
_MmSshServerHostKeyGenerateProgress_Type = OctetString
_MmSshServerHostKeyGenerateProgress_Object = MibScalar
mmSshServerHostKeyGenerateProgress = _MmSshServerHostKeyGenerateProgress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 27, 3),
    _MmSshServerHostKeyGenerateProgress_Type()
)
mmSshServerHostKeyGenerateProgress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmSshServerHostKeyGenerateProgress.setStatus("mandatory")


class _CimEnable_Type(Integer32):
    """Custom type cimEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_CimEnable_Type.__name__ = "Integer32"
_CimEnable_Object = MibScalar
cimEnable = _CimEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 4, 50),
    _CimEnable_Type()
)
cimEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cimEnable.setStatus("mandatory")
_TcpPortAssignmentCfg_ObjectIdentity = ObjectIdentity
tcpPortAssignmentCfg = _TcpPortAssignmentCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5)
)


class _TcpPortsRestoreDefault_Type(Integer32):
    """Custom type tcpPortsRestoreDefault based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_TcpPortsRestoreDefault_Type.__name__ = "Integer32"
_TcpPortsRestoreDefault_Object = MibScalar
tcpPortsRestoreDefault = _TcpPortsRestoreDefault_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 1),
    _TcpPortsRestoreDefault_Type()
)
tcpPortsRestoreDefault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tcpPortsRestoreDefault.setStatus("mandatory")
_HttpPortAssignment_Type = Integer32
_HttpPortAssignment_Object = MibScalar
httpPortAssignment = _HttpPortAssignment_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 2),
    _HttpPortAssignment_Type()
)
httpPortAssignment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    httpPortAssignment.setStatus("mandatory")
_HttpsPortAssignment_Type = Integer32
_HttpsPortAssignment_Object = MibScalar
httpsPortAssignment = _HttpsPortAssignment_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 3),
    _HttpsPortAssignment_Type()
)
httpsPortAssignment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    httpsPortAssignment.setStatus("mandatory")
_TelnetPortAssignment_Type = Integer32
_TelnetPortAssignment_Object = MibScalar
telnetPortAssignment = _TelnetPortAssignment_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 4),
    _TelnetPortAssignment_Type()
)
telnetPortAssignment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    telnetPortAssignment.setStatus("mandatory")
_SshPortAssignment_Type = Integer32
_SshPortAssignment_Object = MibScalar
sshPortAssignment = _SshPortAssignment_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 5),
    _SshPortAssignment_Type()
)
sshPortAssignment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sshPortAssignment.setStatus("mandatory")
_SnmpAgentPortAssignment_Type = Integer32
_SnmpAgentPortAssignment_Object = MibScalar
snmpAgentPortAssignment = _SnmpAgentPortAssignment_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 6),
    _SnmpAgentPortAssignment_Type()
)
snmpAgentPortAssignment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpAgentPortAssignment.setStatus("mandatory")
_SnmpTrapsPortAssignment_Type = Integer32
_SnmpTrapsPortAssignment_Object = MibScalar
snmpTrapsPortAssignment = _SnmpTrapsPortAssignment_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 7),
    _SnmpTrapsPortAssignment_Type()
)
snmpTrapsPortAssignment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpTrapsPortAssignment.setStatus("mandatory")
_CommandModePortAssignment_Type = Integer32
_CommandModePortAssignment_Object = MibScalar
commandModePortAssignment = _CommandModePortAssignment_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 8),
    _CommandModePortAssignment_Type()
)
commandModePortAssignment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    commandModePortAssignment.setStatus("mandatory")
_SecureCommandModePortAssignment_Type = Integer32
_SecureCommandModePortAssignment_Object = MibScalar
secureCommandModePortAssignment = _SecureCommandModePortAssignment_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 9),
    _SecureCommandModePortAssignment_Type()
)
secureCommandModePortAssignment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    secureCommandModePortAssignment.setStatus("mandatory")
_FtpPortAssignment_Type = Integer32
_FtpPortAssignment_Object = MibScalar
ftpPortAssignment = _FtpPortAssignment_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 13),
    _FtpPortAssignment_Type()
)
ftpPortAssignment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ftpPortAssignment.setStatus("mandatory")
_FtpDataPortAssignment_Type = Integer32
_FtpDataPortAssignment_Object = MibScalar
ftpDataPortAssignment = _FtpDataPortAssignment_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 14),
    _FtpDataPortAssignment_Type()
)
ftpDataPortAssignment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ftpDataPortAssignment.setStatus("mandatory")
_TftpPortAssignment_Type = Integer32
_TftpPortAssignment_Object = MibScalar
tftpPortAssignment = _TftpPortAssignment_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 15),
    _TftpPortAssignment_Type()
)
tftpPortAssignment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tftpPortAssignment.setStatus("mandatory")
_SlpPortAssignment_Type = Integer32
_SlpPortAssignment_Object = MibScalar
slpPortAssignment = _SlpPortAssignment_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 19),
    _SlpPortAssignment_Type()
)
slpPortAssignment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slpPortAssignment.setStatus("mandatory")
_CimPortAssignment_Type = Integer32
_CimPortAssignment_Object = MibScalar
cimPortAssignment = _CimPortAssignment_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 5, 50),
    _CimPortAssignment_Type()
)
cimPortAssignment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cimPortAssignment.setStatus("mandatory")
_LdapClientCfg_ObjectIdentity = ObjectIdentity
ldapClientCfg = _LdapClientCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6)
)


class _LdapServer1NameOrIPAddress_Type(OctetString):
    """Custom type ldapServer1NameOrIPAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 256),
    )


_LdapServer1NameOrIPAddress_Type.__name__ = "OctetString"
_LdapServer1NameOrIPAddress_Object = MibScalar
ldapServer1NameOrIPAddress = _LdapServer1NameOrIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 1),
    _LdapServer1NameOrIPAddress_Type()
)
ldapServer1NameOrIPAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapServer1NameOrIPAddress.setStatus("mandatory")
_LdapServer1PortNumber_Type = Integer32
_LdapServer1PortNumber_Object = MibScalar
ldapServer1PortNumber = _LdapServer1PortNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 2),
    _LdapServer1PortNumber_Type()
)
ldapServer1PortNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapServer1PortNumber.setStatus("mandatory")


class _LdapServer2NameOrIPAddress_Type(OctetString):
    """Custom type ldapServer2NameOrIPAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 256),
    )


_LdapServer2NameOrIPAddress_Type.__name__ = "OctetString"
_LdapServer2NameOrIPAddress_Object = MibScalar
ldapServer2NameOrIPAddress = _LdapServer2NameOrIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 3),
    _LdapServer2NameOrIPAddress_Type()
)
ldapServer2NameOrIPAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapServer2NameOrIPAddress.setStatus("mandatory")
_LdapServer2PortNumber_Type = Integer32
_LdapServer2PortNumber_Object = MibScalar
ldapServer2PortNumber = _LdapServer2PortNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 4),
    _LdapServer2PortNumber_Type()
)
ldapServer2PortNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapServer2PortNumber.setStatus("mandatory")


class _LdapServer3NameOrIPAddress_Type(OctetString):
    """Custom type ldapServer3NameOrIPAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 256),
    )


_LdapServer3NameOrIPAddress_Type.__name__ = "OctetString"
_LdapServer3NameOrIPAddress_Object = MibScalar
ldapServer3NameOrIPAddress = _LdapServer3NameOrIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 5),
    _LdapServer3NameOrIPAddress_Type()
)
ldapServer3NameOrIPAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapServer3NameOrIPAddress.setStatus("mandatory")
_LdapServer3PortNumber_Type = Integer32
_LdapServer3PortNumber_Object = MibScalar
ldapServer3PortNumber = _LdapServer3PortNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 6),
    _LdapServer3PortNumber_Type()
)
ldapServer3PortNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapServer3PortNumber.setStatus("mandatory")


class _LdapRootDN_Type(OctetString):
    """Custom type ldapRootDN based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 256),
    )


_LdapRootDN_Type.__name__ = "OctetString"
_LdapRootDN_Object = MibScalar
ldapRootDN = _LdapRootDN_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 7),
    _LdapRootDN_Type()
)
ldapRootDN.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapRootDN.setStatus("mandatory")


class _LdapGroupFilter_Type(OctetString):
    """Custom type ldapGroupFilter based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 511),
    )


_LdapGroupFilter_Type.__name__ = "OctetString"
_LdapGroupFilter_Object = MibScalar
ldapGroupFilter = _LdapGroupFilter_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 9),
    _LdapGroupFilter_Type()
)
ldapGroupFilter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapGroupFilter.setStatus("mandatory")


class _LdapBindingMethod_Type(Integer32):
    """Custom type ldapBindingMethod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clientAuthentication", 1),
          ("userPrincipalName", 2))
    )


_LdapBindingMethod_Type.__name__ = "Integer32"
_LdapBindingMethod_Object = MibScalar
ldapBindingMethod = _LdapBindingMethod_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 10),
    _LdapBindingMethod_Type()
)
ldapBindingMethod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapBindingMethod.setStatus("mandatory")


class _LdapClientAuthenticationDN_Type(OctetString):
    """Custom type ldapClientAuthenticationDN based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_LdapClientAuthenticationDN_Type.__name__ = "OctetString"
_LdapClientAuthenticationDN_Object = MibScalar
ldapClientAuthenticationDN = _LdapClientAuthenticationDN_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 11),
    _LdapClientAuthenticationDN_Type()
)
ldapClientAuthenticationDN.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapClientAuthenticationDN.setStatus("mandatory")


class _LdapClientAuthenticationPassword_Type(OctetString):
    """Custom type ldapClientAuthenticationPassword based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_LdapClientAuthenticationPassword_Type.__name__ = "OctetString"
_LdapClientAuthenticationPassword_Object = MibScalar
ldapClientAuthenticationPassword = _LdapClientAuthenticationPassword_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 12),
    _LdapClientAuthenticationPassword_Type()
)
ldapClientAuthenticationPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapClientAuthenticationPassword.setStatus("mandatory")


class _LdapUIDsearchAttribute_Type(OctetString):
    """Custom type ldapUIDsearchAttribute based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_LdapUIDsearchAttribute_Type.__name__ = "OctetString"
_LdapUIDsearchAttribute_Object = MibScalar
ldapUIDsearchAttribute = _LdapUIDsearchAttribute_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 13),
    _LdapUIDsearchAttribute_Type()
)
ldapUIDsearchAttribute.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapUIDsearchAttribute.setStatus("mandatory")


class _LdapGroupSearchAttribute_Type(OctetString):
    """Custom type ldapGroupSearchAttribute based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_LdapGroupSearchAttribute_Type.__name__ = "OctetString"
_LdapGroupSearchAttribute_Object = MibScalar
ldapGroupSearchAttribute = _LdapGroupSearchAttribute_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 14),
    _LdapGroupSearchAttribute_Type()
)
ldapGroupSearchAttribute.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapGroupSearchAttribute.setStatus("mandatory")


class _LdapLoginPermissionAttribute_Type(OctetString):
    """Custom type ldapLoginPermissionAttribute based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_LdapLoginPermissionAttribute_Type.__name__ = "OctetString"
_LdapLoginPermissionAttribute_Object = MibScalar
ldapLoginPermissionAttribute = _LdapLoginPermissionAttribute_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 15),
    _LdapLoginPermissionAttribute_Type()
)
ldapLoginPermissionAttribute.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapLoginPermissionAttribute.setStatus("mandatory")


class _LdapUseDNSOrPreConfiguredServers_Type(Integer32):
    """Custom type ldapUseDNSOrPreConfiguredServers based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("usePreConfiguredLDAPServers", 0),
          ("useDNSToFindLDAPServers", 1))
    )


_LdapUseDNSOrPreConfiguredServers_Type.__name__ = "Integer32"
_LdapUseDNSOrPreConfiguredServers_Object = MibScalar
ldapUseDNSOrPreConfiguredServers = _LdapUseDNSOrPreConfiguredServers_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 16),
    _LdapUseDNSOrPreConfiguredServers_Type()
)
ldapUseDNSOrPreConfiguredServers.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapUseDNSOrPreConfiguredServers.setStatus("mandatory")


class _LdapRBSModelCfg_Type(Integer32):
    """Custom type ldapRBSModelCfg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("oldPermissionString", 0),
          ("newRBSModel", 1))
    )


_LdapRBSModelCfg_Type.__name__ = "Integer32"
_LdapRBSModelCfg_Object = MibScalar
ldapRBSModelCfg = _LdapRBSModelCfg_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 20),
    _LdapRBSModelCfg_Type()
)
ldapRBSModelCfg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapRBSModelCfg.setStatus("mandatory")


class _LdapTargetName_Type(OctetString):
    """Custom type ldapTargetName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_LdapTargetName_Type.__name__ = "OctetString"
_LdapTargetName_Object = MibScalar
ldapTargetName = _LdapTargetName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 21),
    _LdapTargetName_Type()
)
ldapTargetName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapTargetName.setStatus("mandatory")


class _LdapAuthCfg_Type(Integer32):
    """Custom type ldapAuthCfg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("authenticationAndAuthorization", 0),
          ("authenticationOnly", 1))
    )


_LdapAuthCfg_Type.__name__ = "Integer32"
_LdapAuthCfg_Object = MibScalar
ldapAuthCfg = _LdapAuthCfg_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 22),
    _LdapAuthCfg_Type()
)
ldapAuthCfg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapAuthCfg.setStatus("mandatory")


class _LdapForestName_Type(OctetString):
    """Custom type ldapForestName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_LdapForestName_Type.__name__ = "OctetString"
_LdapForestName_Object = MibScalar
ldapForestName = _LdapForestName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 23),
    _LdapForestName_Type()
)
ldapForestName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapForestName.setStatus("mandatory")


class _LdapDomainName_Type(OctetString):
    """Custom type ldapDomainName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 256),
    )


_LdapDomainName_Type.__name__ = "OctetString"
_LdapDomainName_Object = MibScalar
ldapDomainName = _LdapDomainName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 24),
    _LdapDomainName_Type()
)
ldapDomainName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapDomainName.setStatus("mandatory")


class _LdapServer4NameOrIPAddress_Type(OctetString):
    """Custom type ldapServer4NameOrIPAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 256),
    )


_LdapServer4NameOrIPAddress_Type.__name__ = "OctetString"
_LdapServer4NameOrIPAddress_Object = MibScalar
ldapServer4NameOrIPAddress = _LdapServer4NameOrIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 25),
    _LdapServer4NameOrIPAddress_Type()
)
ldapServer4NameOrIPAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapServer4NameOrIPAddress.setStatus("mandatory")
_LdapServer4PortNumber_Type = Integer32
_LdapServer4PortNumber_Object = MibScalar
ldapServer4PortNumber = _LdapServer4PortNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 6, 26),
    _LdapServer4PortNumber_Type()
)
ldapServer4PortNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapServer4PortNumber.setStatus("mandatory")
_UplinkCheckConfig_ObjectIdentity = ObjectIdentity
uplinkCheckConfig = _UplinkCheckConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7)
)


class _UplinkCheckEnabled_Type(Integer32):
    """Custom type uplinkCheckEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("uplinkCheckDisabled", 0),
          ("uplinkCheckEnabled", 1))
    )


_UplinkCheckEnabled_Type.__name__ = "Integer32"
_UplinkCheckEnabled_Object = MibScalar
uplinkCheckEnabled = _UplinkCheckEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7, 1),
    _UplinkCheckEnabled_Type()
)
uplinkCheckEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    uplinkCheckEnabled.setStatus("mandatory")
_UplinkCheckDelay_Type = Integer32
_UplinkCheckDelay_Object = MibScalar
uplinkCheckDelay = _UplinkCheckDelay_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7, 2),
    _UplinkCheckDelay_Type()
)
uplinkCheckDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    uplinkCheckDelay.setStatus("mandatory")
_LogicalUplinkDestination_Type = IpAddress
_LogicalUplinkDestination_Object = MibScalar
logicalUplinkDestination = _LogicalUplinkDestination_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7, 3),
    _LogicalUplinkDestination_Type()
)
logicalUplinkDestination.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    logicalUplinkDestination.setStatus("mandatory")


class _LogicalUplinkCheckEnabled_Type(Integer32):
    """Custom type logicalUplinkCheckEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("uplinkCheckDisabled", 0),
          ("uplinkCheckEnabled", 1))
    )


_LogicalUplinkCheckEnabled_Type.__name__ = "Integer32"
_LogicalUplinkCheckEnabled_Object = MibScalar
logicalUplinkCheckEnabled = _LogicalUplinkCheckEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7, 4),
    _LogicalUplinkCheckEnabled_Type()
)
logicalUplinkCheckEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    logicalUplinkCheckEnabled.setStatus("mandatory")
_LogicalUplinkCheckDelay_Type = Integer32
_LogicalUplinkCheckDelay_Object = MibScalar
logicalUplinkCheckDelay = _LogicalUplinkCheckDelay_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7, 5),
    _LogicalUplinkCheckDelay_Type()
)
logicalUplinkCheckDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    logicalUplinkCheckDelay.setStatus("mandatory")
_PhysicalUplinkCheckDelayInSecs_Type = Integer32
_PhysicalUplinkCheckDelayInSecs_Object = MibScalar
physicalUplinkCheckDelayInSecs = _PhysicalUplinkCheckDelayInSecs_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7, 6),
    _PhysicalUplinkCheckDelayInSecs_Type()
)
physicalUplinkCheckDelayInSecs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    physicalUplinkCheckDelayInSecs.setStatus("mandatory")
_LogicalUplinkCheckDelayInSecs_Type = Integer32
_LogicalUplinkCheckDelayInSecs_Object = MibScalar
logicalUplinkCheckDelayInSecs = _LogicalUplinkCheckDelayInSecs_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7, 7),
    _LogicalUplinkCheckDelayInSecs_Type()
)
logicalUplinkCheckDelayInSecs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    logicalUplinkCheckDelayInSecs.setStatus("mandatory")
_LogicalUplinkIPv6Destination_Type = InetAddressIPv6
_LogicalUplinkIPv6Destination_Object = MibScalar
logicalUplinkIPv6Destination = _LogicalUplinkIPv6Destination_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7, 8),
    _LogicalUplinkIPv6Destination_Type()
)
logicalUplinkIPv6Destination.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    logicalUplinkIPv6Destination.setStatus("mandatory")


class _LogicalUplinkFailoverPolicy_Type(Integer32):
    """Custom type logicalUplinkFailoverPolicy based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("either", 1),
          ("both", 2))
    )


_LogicalUplinkFailoverPolicy_Type.__name__ = "Integer32"
_LogicalUplinkFailoverPolicy_Object = MibScalar
logicalUplinkFailoverPolicy = _LogicalUplinkFailoverPolicy_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 7, 9),
    _LogicalUplinkFailoverPolicy_Type()
)
logicalUplinkFailoverPolicy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    logicalUplinkFailoverPolicy.setStatus("mandatory")
_NtpConfig_ObjectIdentity = ObjectIdentity
ntpConfig = _NtpConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 8)
)


class _NtpEnable_Type(Integer32):
    """Custom type ntpEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_NtpEnable_Type.__name__ = "Integer32"
_NtpEnable_Object = MibScalar
ntpEnable = _NtpEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 8, 1),
    _NtpEnable_Type()
)
ntpEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ntpEnable.setStatus("mandatory")


class _NtpIpAddressHostname_Type(OctetString):
    """Custom type ntpIpAddressHostname based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 63),
    )


_NtpIpAddressHostname_Type.__name__ = "OctetString"
_NtpIpAddressHostname_Object = MibScalar
ntpIpAddressHostname = _NtpIpAddressHostname_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 8, 2),
    _NtpIpAddressHostname_Type()
)
ntpIpAddressHostname.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ntpIpAddressHostname.setStatus("mandatory")
_NtpUpdateFrequency_Type = Integer32
_NtpUpdateFrequency_Object = MibScalar
ntpUpdateFrequency = _NtpUpdateFrequency_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 8, 3),
    _NtpUpdateFrequency_Type()
)
ntpUpdateFrequency.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ntpUpdateFrequency.setStatus("mandatory")
_NtpLastUpdate_Type = OctetString
_NtpLastUpdate_Object = MibScalar
ntpLastUpdate = _NtpLastUpdate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 8, 4),
    _NtpLastUpdate_Type()
)
ntpLastUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpLastUpdate.setStatus("mandatory")


class _NtpUpdateClock_Type(Integer32):
    """Custom type ntpUpdateClock based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_NtpUpdateClock_Type.__name__ = "Integer32"
_NtpUpdateClock_Object = MibScalar
ntpUpdateClock = _NtpUpdateClock_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 8, 5),
    _NtpUpdateClock_Type()
)
ntpUpdateClock.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ntpUpdateClock.setStatus("mandatory")
_NtpAuthEntry_Type = OctetString
_NtpAuthEntry_Object = MibScalar
ntpAuthEntry = _NtpAuthEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 8, 6),
    _NtpAuthEntry_Type()
)
ntpAuthEntry.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ntpAuthEntry.setStatus("mandatory")


class _NtpAuthEnable_Type(Integer32):
    """Custom type ntpAuthEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_NtpAuthEnable_Type.__name__ = "Integer32"
_NtpAuthEnable_Object = MibScalar
ntpAuthEnable = _NtpAuthEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 8, 7),
    _NtpAuthEnable_Type()
)
ntpAuthEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ntpAuthEnable.setStatus("mandatory")
_SyslogConfig_ObjectIdentity = ObjectIdentity
syslogConfig = _SyslogConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9)
)


class _SyslogSevFilterLevel_Type(Integer32):
    """Custom type syslogSevFilterLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("error", 0),
          ("warning", 1),
          ("information", 2))
    )


_SyslogSevFilterLevel_Type.__name__ = "Integer32"
_SyslogSevFilterLevel_Object = MibScalar
syslogSevFilterLevel = _SyslogSevFilterLevel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9, 1),
    _SyslogSevFilterLevel_Type()
)
syslogSevFilterLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    syslogSevFilterLevel.setStatus("mandatory")
_SyslogCollectorConfig_ObjectIdentity = ObjectIdentity
syslogCollectorConfig = _SyslogCollectorConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9, 2)
)
_SyslogCollectorTable_Object = MibTable
syslogCollectorTable = _SyslogCollectorTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9, 2, 1)
)
if mibBuilder.loadTexts:
    syslogCollectorTable.setStatus("mandatory")
_SyslogCollectorEntry_Object = MibTableRow
syslogCollectorEntry = _SyslogCollectorEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9, 2, 1, 1)
)
syslogCollectorEntry.setIndexNames(
    (0, "CME-MIB", "syslogCollectorIndex"),
)
if mibBuilder.loadTexts:
    syslogCollectorEntry.setStatus("mandatory")


class _SyslogCollectorIndex_Type(Integer32):
    """Custom type syslogCollectorIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_SyslogCollectorIndex_Type.__name__ = "Integer32"
_SyslogCollectorIndex_Object = MibTableColumn
syslogCollectorIndex = _SyslogCollectorIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9, 2, 1, 1, 1),
    _SyslogCollectorIndex_Type()
)
syslogCollectorIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    syslogCollectorIndex.setStatus("mandatory")


class _SyslogCollectorHostnameOrIpAddress_Type(OctetString):
    """Custom type syslogCollectorHostnameOrIpAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 63),
    )


_SyslogCollectorHostnameOrIpAddress_Type.__name__ = "OctetString"
_SyslogCollectorHostnameOrIpAddress_Object = MibTableColumn
syslogCollectorHostnameOrIpAddress = _SyslogCollectorHostnameOrIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9, 2, 1, 1, 2),
    _SyslogCollectorHostnameOrIpAddress_Type()
)
syslogCollectorHostnameOrIpAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    syslogCollectorHostnameOrIpAddress.setStatus("mandatory")


class _SyslogCollectorPort_Type(Integer32):
    """Custom type syslogCollectorPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SyslogCollectorPort_Type.__name__ = "Integer32"
_SyslogCollectorPort_Object = MibTableColumn
syslogCollectorPort = _SyslogCollectorPort_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9, 2, 1, 1, 3),
    _SyslogCollectorPort_Type()
)
syslogCollectorPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    syslogCollectorPort.setStatus("mandatory")


class _SyslogCollectorEnable_Type(Integer32):
    """Custom type syslogCollectorEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SyslogCollectorEnable_Type.__name__ = "Integer32"
_SyslogCollectorEnable_Object = MibTableColumn
syslogCollectorEnable = _SyslogCollectorEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9, 2, 1, 1, 4),
    _SyslogCollectorEnable_Type()
)
syslogCollectorEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    syslogCollectorEnable.setStatus("mandatory")


class _SyslogTestPacket_Type(Integer32):
    """Custom type syslogTestPacket based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_SyslogTestPacket_Type.__name__ = "Integer32"
_SyslogTestPacket_Object = MibScalar
syslogTestPacket = _SyslogTestPacket_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 9, 3, 9, 3),
    _SyslogTestPacket_Type()
)
syslogTestPacket.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    syslogTestPacket.setStatus("mandatory")
_SolConfiguration_ObjectIdentity = ObjectIdentity
solConfiguration = _SolConfiguration_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10)
)
_SolGlobalConfig_ObjectIdentity = ObjectIdentity
solGlobalConfig = _SolGlobalConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1)
)


class _SolEnable_Type(Integer32):
    """Custom type solEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("solDisabled", 0),
          ("solEnabled", 1))
    )


_SolEnable_Type.__name__ = "Integer32"
_SolEnable_Object = MibScalar
solEnable = _SolEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1, 1),
    _SolEnable_Type()
)
solEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    solEnable.setStatus("mandatory")
_SolAccumulateTimeout_Type = Integer32
_SolAccumulateTimeout_Object = MibScalar
solAccumulateTimeout = _SolAccumulateTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1, 3),
    _SolAccumulateTimeout_Type()
)
solAccumulateTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    solAccumulateTimeout.setStatus("mandatory")
_SolCharSendThreshold_Type = Integer32
_SolCharSendThreshold_Object = MibScalar
solCharSendThreshold = _SolCharSendThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1, 4),
    _SolCharSendThreshold_Type()
)
solCharSendThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    solCharSendThreshold.setStatus("mandatory")
_SolRetry_Type = Integer32
_SolRetry_Object = MibScalar
solRetry = _SolRetry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1, 5),
    _SolRetry_Type()
)
solRetry.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    solRetry.setStatus("mandatory")
_SolRetryInterval_Type = Integer32
_SolRetryInterval_Object = MibScalar
solRetryInterval = _SolRetryInterval_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1, 6),
    _SolRetryInterval_Type()
)
solRetryInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    solRetryInterval.setStatus("mandatory")


class _SolExitToCliKeySeq_Type(OctetString):
    """Custom type solExitToCliKeySeq based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_SolExitToCliKeySeq_Type.__name__ = "OctetString"
_SolExitToCliKeySeq_Object = MibScalar
solExitToCliKeySeq = _SolExitToCliKeySeq_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1, 7),
    _SolExitToCliKeySeq_Type()
)
solExitToCliKeySeq.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    solExitToCliKeySeq.setStatus("mandatory")


class _SolResetBladeKeySeq_Type(OctetString):
    """Custom type solResetBladeKeySeq based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_SolResetBladeKeySeq_Type.__name__ = "OctetString"
_SolResetBladeKeySeq_Object = MibScalar
solResetBladeKeySeq = _SolResetBladeKeySeq_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 1, 8),
    _SolResetBladeKeySeq_Type()
)
solResetBladeKeySeq.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    solResetBladeKeySeq.setStatus("mandatory")
_SolBladeConfig_ObjectIdentity = ObjectIdentity
solBladeConfig = _SolBladeConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2)
)
_SolBladeTable_Object = MibTable
solBladeTable = _SolBladeTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1)
)
if mibBuilder.loadTexts:
    solBladeTable.setStatus("mandatory")
_SolBladeEntry_Object = MibTableRow
solBladeEntry = _SolBladeEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1)
)
solBladeEntry.setIndexNames(
    (0, "CME-MIB", "solBladeIndex"),
)
if mibBuilder.loadTexts:
    solBladeEntry.setStatus("mandatory")
_SolBladeIndex_Type = Integer32
_SolBladeIndex_Object = MibTableColumn
solBladeIndex = _SolBladeIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 1),
    _SolBladeIndex_Type()
)
solBladeIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    solBladeIndex.setStatus("mandatory")
_SolBladeName_Type = OctetString
_SolBladeName_Object = MibTableColumn
solBladeName = _SolBladeName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 2),
    _SolBladeName_Type()
)
solBladeName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    solBladeName.setStatus("mandatory")


class _SolBladeEnable_Type(Integer32):
    """Custom type solBladeEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("solBladeDisabled", 0),
          ("solBladeEnabled", 1))
    )


_SolBladeEnable_Type.__name__ = "Integer32"
_SolBladeEnable_Object = MibTableColumn
solBladeEnable = _SolBladeEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 3),
    _SolBladeEnable_Type()
)
solBladeEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    solBladeEnable.setStatus("mandatory")
_SolBladeIpAddr_Type = IpAddress
_SolBladeIpAddr_Object = MibTableColumn
solBladeIpAddr = _SolBladeIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 4),
    _SolBladeIpAddr_Type()
)
solBladeIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    solBladeIpAddr.setStatus("deprecated")


class _SolBladeSessionStatus_Type(Integer32):
    """Custom type solBladeSessionStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("solSessionNotReady", 0),
          ("solSessionReady", 1),
          ("solSessionActive", 2))
    )


_SolBladeSessionStatus_Type.__name__ = "Integer32"
_SolBladeSessionStatus_Object = MibTableColumn
solBladeSessionStatus = _SolBladeSessionStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 5),
    _SolBladeSessionStatus_Type()
)
solBladeSessionStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    solBladeSessionStatus.setStatus("mandatory")


class _SolBladeCapability_Type(Integer32):
    """Custom type solBladeCapability based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("notSupport", 0),
          ("support", 1))
    )


_SolBladeCapability_Type.__name__ = "Integer32"
_SolBladeCapability_Object = MibTableColumn
solBladeCapability = _SolBladeCapability_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 6),
    _SolBladeCapability_Type()
)
solBladeCapability.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    solBladeCapability.setStatus("mandatory")
_SolBladeIpAddr6_Type = InetAddressIPv6
_SolBladeIpAddr6_Object = MibTableColumn
solBladeIpAddr6 = _SolBladeIpAddr6_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 7),
    _SolBladeIpAddr6_Type()
)
solBladeIpAddr6.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    solBladeIpAddr6.setStatus("mandatory")
_SolBladeRetryInterval_Type = Integer32
_SolBladeRetryInterval_Object = MibTableColumn
solBladeRetryInterval = _SolBladeRetryInterval_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 8),
    _SolBladeRetryInterval_Type()
)
solBladeRetryInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    solBladeRetryInterval.setStatus("mandatory")
_SolBladeRetryCount_Type = Integer32
_SolBladeRetryCount_Object = MibTableColumn
solBladeRetryCount = _SolBladeRetryCount_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 9),
    _SolBladeRetryCount_Type()
)
solBladeRetryCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    solBladeRetryCount.setStatus("mandatory")
_SolBladeBytesSent_Type = Integer32
_SolBladeBytesSent_Object = MibTableColumn
solBladeBytesSent = _SolBladeBytesSent_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 10),
    _SolBladeBytesSent_Type()
)
solBladeBytesSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    solBladeBytesSent.setStatus("mandatory")
_SolBladeBytesReceived_Type = Integer32
_SolBladeBytesReceived_Object = MibTableColumn
solBladeBytesReceived = _SolBladeBytesReceived_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 11),
    _SolBladeBytesReceived_Type()
)
solBladeBytesReceived.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    solBladeBytesReceived.setStatus("mandatory")
_SolBladeDestinationMAC_Type = OctetString
_SolBladeDestinationMAC_Object = MibTableColumn
solBladeDestinationMAC = _SolBladeDestinationMAC_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 12),
    _SolBladeDestinationMAC_Type()
)
solBladeDestinationMAC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    solBladeDestinationMAC.setStatus("mandatory")
_SolBladeConsoleUserId_Type = OctetString
_SolBladeConsoleUserId_Object = MibTableColumn
solBladeConsoleUserId = _SolBladeConsoleUserId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 13),
    _SolBladeConsoleUserId_Type()
)
solBladeConsoleUserId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    solBladeConsoleUserId.setStatus("mandatory")
_SolBladeConsoleLoginFrom_Type = OctetString
_SolBladeConsoleLoginFrom_Object = MibTableColumn
solBladeConsoleLoginFrom = _SolBladeConsoleLoginFrom_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 14),
    _SolBladeConsoleLoginFrom_Type()
)
solBladeConsoleLoginFrom.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    solBladeConsoleLoginFrom.setStatus("mandatory")
_SolBladeConsoleLoginStart_Type = OctetString
_SolBladeConsoleLoginStart_Object = MibTableColumn
solBladeConsoleLoginStart = _SolBladeConsoleLoginStart_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 15),
    _SolBladeConsoleLoginStart_Type()
)
solBladeConsoleLoginStart.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    solBladeConsoleLoginStart.setStatus("mandatory")
_SolBladeConsoleLoginEnd_Type = OctetString
_SolBladeConsoleLoginEnd_Object = MibTableColumn
solBladeConsoleLoginEnd = _SolBladeConsoleLoginEnd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 10, 2, 1, 1, 16),
    _SolBladeConsoleLoginEnd_Type()
)
solBladeConsoleLoginEnd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    solBladeConsoleLoginEnd.setStatus("mandatory")
_ChassisInternalNetwork_ObjectIdentity = ObjectIdentity
chassisInternalNetwork = _ChassisInternalNetwork_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11)
)
_CinsSupported_Type = Integer32
_CinsSupported_Object = MibScalar
cinsSupported = _CinsSupported_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 1),
    _CinsSupported_Type()
)
cinsSupported.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cinsSupported.setStatus("mandatory")


class _CinGlobalEnable_Type(Integer32):
    """Custom type cinGlobalEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("cinDisabled", 0),
          ("cinEnabled", 1))
    )


_CinGlobalEnable_Type.__name__ = "Integer32"
_CinGlobalEnable_Object = MibScalar
cinGlobalEnable = _CinGlobalEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 2),
    _CinGlobalEnable_Type()
)
cinGlobalEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cinGlobalEnable.setStatus("mandatory")
_CinTable_Object = MibTable
cinTable = _CinTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 3)
)
if mibBuilder.loadTexts:
    cinTable.setStatus("mandatory")
_CinEntry_Object = MibTableRow
cinEntry = _CinEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 3, 1)
)
cinEntry.setIndexNames(
    (0, "CME-MIB", "cinIndex"),
)
if mibBuilder.loadTexts:
    cinEntry.setStatus("mandatory")
_CinIndex_Type = Integer32
_CinIndex_Object = MibTableColumn
cinIndex = _CinIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 3, 1, 1),
    _CinIndex_Type()
)
cinIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cinIndex.setStatus("mandatory")


class _CinDefExists_Type(Integer32):
    """Custom type cinDefExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_CinDefExists_Type.__name__ = "Integer32"
_CinDefExists_Object = MibTableColumn
cinDefExists = _CinDefExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 3, 1, 2),
    _CinDefExists_Type()
)
cinDefExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cinDefExists.setStatus("mandatory")


class _CinDelete_Type(Integer32):
    """Custom type cinDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_CinDelete_Type.__name__ = "Integer32"
_CinDelete_Object = MibTableColumn
cinDelete = _CinDelete_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 3, 1, 3),
    _CinDelete_Type()
)
cinDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cinDelete.setStatus("mandatory")


class _CinEnable_Type(Integer32):
    """Custom type cinEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_CinEnable_Type.__name__ = "Integer32"
_CinEnable_Object = MibTableColumn
cinEnable = _CinEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 3, 1, 4),
    _CinEnable_Type()
)
cinEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cinEnable.setStatus("mandatory")
_CinId_Type = Integer32
_CinId_Object = MibTableColumn
cinId = _CinId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 3, 1, 5),
    _CinId_Type()
)
cinId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cinId.setStatus("mandatory")
_CinIpAddress_Type = IpAddress
_CinIpAddress_Object = MibTableColumn
cinIpAddress = _CinIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 3, 1, 6),
    _CinIpAddress_Type()
)
cinIpAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cinIpAddress.setStatus("mandatory")
_CinIpv6Address_Type = InetAddressIPv6
_CinIpv6Address_Object = MibTableColumn
cinIpv6Address = _CinIpv6Address_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 3, 1, 7),
    _CinIpv6Address_Type()
)
cinIpv6Address.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cinIpv6Address.setStatus("mandatory")
_CinStatus_ObjectIdentity = ObjectIdentity
cinStatus = _CinStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 4)
)
_CinStatusTable_Object = MibTable
cinStatusTable = _CinStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 4, 1)
)
if mibBuilder.loadTexts:
    cinStatusTable.setStatus("mandatory")
_CinStatusEntry_Object = MibTableRow
cinStatusEntry = _CinStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 4, 1, 1)
)
cinStatusEntry.setIndexNames(
    (0, "CME-MIB", "cinStatusIndex"),
)
if mibBuilder.loadTexts:
    cinStatusEntry.setStatus("mandatory")
_CinStatusIndex_Type = Integer32
_CinStatusIndex_Object = MibTableColumn
cinStatusIndex = _CinStatusIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 4, 1, 1, 1),
    _CinStatusIndex_Type()
)
cinStatusIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cinStatusIndex.setStatus("mandatory")
_CinStatusString_Type = OctetString
_CinStatusString_Object = MibTableColumn
cinStatusString = _CinStatusString_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 4, 11, 4, 1, 1, 2),
    _CinStatusString_Type()
)
cinStatusString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cinStatusString.setStatus("mandatory")
_RestartReset_ObjectIdentity = ObjectIdentity
restartReset = _RestartReset_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 7)
)


class _RestartSPImmediately_Type(Integer32):
    """Custom type restartSPImmediately based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_RestartSPImmediately_Type.__name__ = "Integer32"
_RestartSPImmediately_Object = MibScalar
restartSPImmediately = _RestartSPImmediately_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 7, 4),
    _RestartSPImmediately_Type()
)
restartSPImmediately.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restartSPImmediately.setStatus("mandatory")


class _RestartStandbyMM_Type(Integer32):
    """Custom type restartStandbyMM based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_RestartStandbyMM_Type.__name__ = "Integer32"
_RestartStandbyMM_Object = MibScalar
restartStandbyMM = _RestartStandbyMM_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 7, 5),
    _RestartStandbyMM_Type()
)
restartStandbyMM.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restartStandbyMM.setStatus("mandatory")


class _SwitchOverRedundantMM_Type(Integer32):
    """Custom type switchOverRedundantMM based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_SwitchOverRedundantMM_Type.__name__ = "Integer32"
_SwitchOverRedundantMM_Object = MibScalar
switchOverRedundantMM = _SwitchOverRedundantMM_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 7, 7),
    _SwitchOverRedundantMM_Type()
)
switchOverRedundantMM.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    switchOverRedundantMM.setStatus("mandatory")


class _ResetSPConfigAndRestart_Type(Integer32):
    """Custom type resetSPConfigAndRestart based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_ResetSPConfigAndRestart_Type.__name__ = "Integer32"
_ResetSPConfigAndRestart_Object = MibScalar
resetSPConfigAndRestart = _ResetSPConfigAndRestart_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 7, 20),
    _ResetSPConfigAndRestart_Type()
)
resetSPConfigAndRestart.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    resetSPConfigAndRestart.setStatus("mandatory")


class _ResetSPConfigAndRestartSaveLogs_Type(Integer32):
    """Custom type resetSPConfigAndRestartSaveLogs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_ResetSPConfigAndRestartSaveLogs_Type.__name__ = "Integer32"
_ResetSPConfigAndRestartSaveLogs_Object = MibScalar
resetSPConfigAndRestartSaveLogs = _ResetSPConfigAndRestartSaveLogs_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 7, 21),
    _ResetSPConfigAndRestartSaveLogs_Type()
)
resetSPConfigAndRestartSaveLogs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    resetSPConfigAndRestartSaveLogs.setStatus("mandatory")
_Components_ObjectIdentity = ObjectIdentity
components = _Components_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22)
)
_ProcessorBlade_ObjectIdentity = ObjectIdentity
processorBlade = _ProcessorBlade_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1)
)
_BladePolicyControl_ObjectIdentity = ObjectIdentity
bladePolicyControl = _BladePolicyControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4)
)
_BladePolicyControlTable_Object = MibTable
bladePolicyControlTable = _BladePolicyControlTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1)
)
if mibBuilder.loadTexts:
    bladePolicyControlTable.setStatus("mandatory")
_BladePolicyControlEntry_Object = MibTableRow
bladePolicyControlEntry = _BladePolicyControlEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1)
)
bladePolicyControlEntry.setIndexNames(
    (0, "CME-MIB", "policyControlIndex"),
)
if mibBuilder.loadTexts:
    bladePolicyControlEntry.setStatus("mandatory")
_PolicyControlIndex_Type = Integer32
_PolicyControlIndex_Object = MibTableColumn
policyControlIndex = _PolicyControlIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 1),
    _PolicyControlIndex_Type()
)
policyControlIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    policyControlIndex.setStatus("mandatory")


class _PolicyControlBladeId_Type(Integer32):
    """Custom type policyControlBladeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_PolicyControlBladeId_Type.__name__ = "Integer32"
_PolicyControlBladeId_Object = MibTableColumn
policyControlBladeId = _PolicyControlBladeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 2),
    _PolicyControlBladeId_Type()
)
policyControlBladeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    policyControlBladeId.setStatus("mandatory")


class _PolicyControlBladeExists_Type(Integer32):
    """Custom type policyControlBladeExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_PolicyControlBladeExists_Type.__name__ = "Integer32"
_PolicyControlBladeExists_Object = MibTableColumn
policyControlBladeExists = _PolicyControlBladeExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 3),
    _PolicyControlBladeExists_Type()
)
policyControlBladeExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    policyControlBladeExists.setStatus("mandatory")


class _PolicyControlBladePowerState_Type(Integer32):
    """Custom type policyControlBladePowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("standby", 3),
          ("hibernate", 4),
          ("unknown", 255))
    )


_PolicyControlBladePowerState_Type.__name__ = "Integer32"
_PolicyControlBladePowerState_Object = MibTableColumn
policyControlBladePowerState = _PolicyControlBladePowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 4),
    _PolicyControlBladePowerState_Type()
)
policyControlBladePowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    policyControlBladePowerState.setStatus("mandatory")


class _PolicyControlBladeHealthState_Type(Integer32):
    """Custom type policyControlBladeHealthState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("good", 1),
          ("warning", 2),
          ("critical", 3),
          ("kernelMode", 4),
          ("discovering", 5),
          ("commError", 6),
          ("noPower", 7),
          ("flashing", 8),
          ("initFailure", 9),
          ("insufficientPower", 10),
          ("powerDenied", 11),
          ("maintMode", 12),
          ("firehoseDump", 13))
    )


_PolicyControlBladeHealthState_Type.__name__ = "Integer32"
_PolicyControlBladeHealthState_Object = MibTableColumn
policyControlBladeHealthState = _PolicyControlBladeHealthState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 5),
    _PolicyControlBladeHealthState_Type()
)
policyControlBladeHealthState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    policyControlBladeHealthState.setStatus("mandatory")
_PolicyControlBladeName_Type = OctetString
_PolicyControlBladeName_Object = MibTableColumn
policyControlBladeName = _PolicyControlBladeName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 6),
    _PolicyControlBladeName_Type()
)
policyControlBladeName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    policyControlBladeName.setStatus("mandatory")


class _PolicyLocalPowerControlEnable_Type(Integer32):
    """Custom type policyLocalPowerControlEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1),
          ("notApplicable", 255))
    )


_PolicyLocalPowerControlEnable_Type.__name__ = "Integer32"
_PolicyLocalPowerControlEnable_Object = MibTableColumn
policyLocalPowerControlEnable = _PolicyLocalPowerControlEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 7),
    _PolicyLocalPowerControlEnable_Type()
)
policyLocalPowerControlEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    policyLocalPowerControlEnable.setStatus("mandatory")


class _PolicyWakeOnLanControlEnable_Type(Integer32):
    """Custom type policyWakeOnLanControlEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1),
          ("notApplicable", 255))
    )


_PolicyWakeOnLanControlEnable_Type.__name__ = "Integer32"
_PolicyWakeOnLanControlEnable_Object = MibTableColumn
policyWakeOnLanControlEnable = _PolicyWakeOnLanControlEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 1, 1, 10),
    _PolicyWakeOnLanControlEnable_Type()
)
policyWakeOnLanControlEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    policyWakeOnLanControlEnable.setStatus("mandatory")
_BladePolicy_ObjectIdentity = ObjectIdentity
bladePolicy = _BladePolicy_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 2)
)


class _BladePolicyLocalPowerControlEnable_Type(Integer32):
    """Custom type bladePolicyLocalPowerControlEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_BladePolicyLocalPowerControlEnable_Type.__name__ = "Integer32"
_BladePolicyLocalPowerControlEnable_Object = MibScalar
bladePolicyLocalPowerControlEnable = _BladePolicyLocalPowerControlEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 2, 1),
    _BladePolicyLocalPowerControlEnable_Type()
)
bladePolicyLocalPowerControlEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladePolicyLocalPowerControlEnable.setStatus("mandatory")


class _BladePolicyWakeOnLanControlEnable_Type(Integer32):
    """Custom type bladePolicyWakeOnLanControlEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1),
          ("notApplicable", 255))
    )


_BladePolicyWakeOnLanControlEnable_Type.__name__ = "Integer32"
_BladePolicyWakeOnLanControlEnable_Object = MibScalar
bladePolicyWakeOnLanControlEnable = _BladePolicyWakeOnLanControlEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 4, 2, 4),
    _BladePolicyWakeOnLanControlEnable_Type()
)
bladePolicyWakeOnLanControlEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladePolicyWakeOnLanControlEnable.setStatus("mandatory")
_BladeMonitors_ObjectIdentity = ObjectIdentity
bladeMonitors = _BladeMonitors_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5)
)
_BladeSystemStatusTable_Object = MibTable
bladeSystemStatusTable = _BladeSystemStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1)
)
if mibBuilder.loadTexts:
    bladeSystemStatusTable.setStatus("mandatory")
_BladeSystemStatusEntry_Object = MibTableRow
bladeSystemStatusEntry = _BladeSystemStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1)
)
bladeSystemStatusEntry.setIndexNames(
    (0, "CME-MIB", "bladeStatusIndex"),
)
if mibBuilder.loadTexts:
    bladeSystemStatusEntry.setStatus("mandatory")
_BladeStatusIndex_Type = Integer32
_BladeStatusIndex_Object = MibTableColumn
bladeStatusIndex = _BladeStatusIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 1),
    _BladeStatusIndex_Type()
)
bladeStatusIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeStatusIndex.setStatus("mandatory")


class _BladeId_Type(Integer32):
    """Custom type bladeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_BladeId_Type.__name__ = "Integer32"
_BladeId_Object = MibTableColumn
bladeId = _BladeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 2),
    _BladeId_Type()
)
bladeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeId.setStatus("mandatory")


class _BladeExists_Type(Integer32):
    """Custom type bladeExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_BladeExists_Type.__name__ = "Integer32"
_BladeExists_Object = MibTableColumn
bladeExists = _BladeExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 3),
    _BladeExists_Type()
)
bladeExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeExists.setStatus("mandatory")


class _BladePowerState_Type(Integer32):
    """Custom type bladePowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("standby", 3),
          ("hibernate", 4),
          ("unknown", 255))
    )


_BladePowerState_Type.__name__ = "Integer32"
_BladePowerState_Object = MibTableColumn
bladePowerState = _BladePowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 4),
    _BladePowerState_Type()
)
bladePowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePowerState.setStatus("mandatory")


class _BladeHealthState_Type(Integer32):
    """Custom type bladeHealthState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("good", 1),
          ("warning", 2),
          ("critical", 3),
          ("kernelMode", 4),
          ("discovering", 5),
          ("commError", 6),
          ("noPower", 7),
          ("flashing", 8),
          ("initFailure", 9),
          ("insufficientPower", 10),
          ("powerDenied", 11),
          ("maintMode", 12),
          ("firehoseDump", 13))
    )


_BladeHealthState_Type.__name__ = "Integer32"
_BladeHealthState_Object = MibTableColumn
bladeHealthState = _BladeHealthState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 5),
    _BladeHealthState_Type()
)
bladeHealthState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHealthState.setStatus("mandatory")
_BladeName_Type = OctetString
_BladeName_Object = MibTableColumn
bladeName = _BladeName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 6),
    _BladeName_Type()
)
bladeName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeName.setStatus("mandatory")


class _BladeRemotePowerEnable_Type(Integer32):
    """Custom type bladeRemotePowerEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_BladeRemotePowerEnable_Type.__name__ = "Integer32"
_BladeRemotePowerEnable_Object = MibTableColumn
bladeRemotePowerEnable = _BladeRemotePowerEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 7),
    _BladeRemotePowerEnable_Type()
)
bladeRemotePowerEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeRemotePowerEnable.setStatus("mandatory")


class _BladeConnectionType_Type(Integer32):
    """Custom type bladeConnectionType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("ethernet", 1),
          ("fiber", 2),
          ("serial", 3),
          ("opticalPassThrough", 4),
          ("infiniband", 5),
          ("iSCSI", 6))
    )


_BladeConnectionType_Type.__name__ = "Integer32"
_BladeConnectionType_Object = MibTableColumn
bladeConnectionType = _BladeConnectionType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 10),
    _BladeConnectionType_Type()
)
bladeConnectionType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeConnectionType.setStatus("mandatory")


class _BladeRemoteWakeOnLanEnable_Type(Integer32):
    """Custom type bladeRemoteWakeOnLanEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1),
          ("notApplicable", 255))
    )


_BladeRemoteWakeOnLanEnable_Type.__name__ = "Integer32"
_BladeRemoteWakeOnLanEnable_Object = MibTableColumn
bladeRemoteWakeOnLanEnable = _BladeRemoteWakeOnLanEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 13),
    _BladeRemoteWakeOnLanEnable_Type()
)
bladeRemoteWakeOnLanEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeRemoteWakeOnLanEnable.setStatus("mandatory")


class _BladeServerExpansion_Type(Integer32):
    """Custom type bladeServerExpansion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_BladeServerExpansion_Type.__name__ = "Integer32"
_BladeServerExpansion_Object = MibTableColumn
bladeServerExpansion = _BladeServerExpansion_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 14),
    _BladeServerExpansion_Type()
)
bladeServerExpansion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeServerExpansion.setStatus("mandatory")
_BladeWidth_Type = Integer32
_BladeWidth_Object = MibTableColumn
bladeWidth = _BladeWidth_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 15),
    _BladeWidth_Type()
)
bladeWidth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeWidth.setStatus("mandatory")


class _BladeServerExpansion2_Type(Integer32):
    """Custom type bladeServerExpansion2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_BladeServerExpansion2_Type.__name__ = "Integer32"
_BladeServerExpansion2_Object = MibTableColumn
bladeServerExpansion2 = _BladeServerExpansion2_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 17),
    _BladeServerExpansion2_Type()
)
bladeServerExpansion2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeServerExpansion2.setStatus("mandatory")


class _BladeConnectionType2_Type(Integer32):
    """Custom type bladeConnectionType2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("ethernet", 1),
          ("fiber", 2),
          ("serial", 3),
          ("opticalPassThrough", 4),
          ("infiniband", 5),
          ("iSCSI", 6))
    )


_BladeConnectionType2_Type.__name__ = "Integer32"
_BladeConnectionType2_Object = MibTableColumn
bladeConnectionType2 = _BladeConnectionType2_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 22),
    _BladeConnectionType2_Type()
)
bladeConnectionType2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeConnectionType2.setStatus("mandatory")


class _BladeConnectionType3_Type(Integer32):
    """Custom type bladeConnectionType3 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("ethernet", 1),
          ("fiber", 2),
          ("serial", 3),
          ("opticalPassThrough", 4),
          ("infiniband", 5),
          ("iSCSI", 6))
    )


_BladeConnectionType3_Type.__name__ = "Integer32"
_BladeConnectionType3_Object = MibTableColumn
bladeConnectionType3 = _BladeConnectionType3_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 23),
    _BladeConnectionType3_Type()
)
bladeConnectionType3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeConnectionType3.setStatus("mandatory")


class _BladeConnectionType4_Type(Integer32):
    """Custom type bladeConnectionType4 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("ethernet", 1),
          ("fiber", 2),
          ("serial", 3),
          ("opticalPassThrough", 4),
          ("infiniband", 5),
          ("iSCSI", 6))
    )


_BladeConnectionType4_Type.__name__ = "Integer32"
_BladeConnectionType4_Object = MibTableColumn
bladeConnectionType4 = _BladeConnectionType4_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 24),
    _BladeConnectionType4_Type()
)
bladeConnectionType4.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeConnectionType4.setStatus("mandatory")


class _BladeConnectionType5_Type(Integer32):
    """Custom type bladeConnectionType5 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("ethernet", 1),
          ("fiber", 2),
          ("serial", 3),
          ("opticalPassThrough", 4),
          ("infiniband", 5),
          ("iSCSI", 6))
    )


_BladeConnectionType5_Type.__name__ = "Integer32"
_BladeConnectionType5_Object = MibTableColumn
bladeConnectionType5 = _BladeConnectionType5_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 25),
    _BladeConnectionType5_Type()
)
bladeConnectionType5.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeConnectionType5.setStatus("mandatory")


class _BladeHighSpeedConnectionType_Type(Integer32):
    """Custom type bladeHighSpeedConnectionType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("ethernet", 1),
          ("fiber", 2),
          ("serial", 3),
          ("opticalPassThrough", 4),
          ("infiniband", 5),
          ("iSCSI", 6),
          ("infinibandPassThrough", 7))
    )


_BladeHighSpeedConnectionType_Type.__name__ = "Integer32"
_BladeHighSpeedConnectionType_Object = MibTableColumn
bladeHighSpeedConnectionType = _BladeHighSpeedConnectionType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 41),
    _BladeHighSpeedConnectionType_Type()
)
bladeHighSpeedConnectionType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHighSpeedConnectionType.setStatus("mandatory")
_BladeIOCompatibility_Type = OctetString
_BladeIOCompatibility_Object = MibTableColumn
bladeIOCompatibility = _BladeIOCompatibility_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 51),
    _BladeIOCompatibility_Type()
)
bladeIOCompatibility.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeIOCompatibility.setStatus("mandatory")


class _BladeInventoryReady_Type(Integer32):
    """Custom type bladeInventoryReady based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("notReady", 0),
          ("ready", 1))
    )


_BladeInventoryReady_Type.__name__ = "Integer32"
_BladeInventoryReady_Object = MibTableColumn
bladeInventoryReady = _BladeInventoryReady_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 1, 1, 52),
    _BladeInventoryReady_Type()
)
bladeInventoryReady.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeInventoryReady.setStatus("mandatory")
_BladeHealthSummaryTable_Object = MibTable
bladeHealthSummaryTable = _BladeHealthSummaryTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 2)
)
if mibBuilder.loadTexts:
    bladeHealthSummaryTable.setStatus("mandatory")
_BladeHealthSummaryEntry_Object = MibTableRow
bladeHealthSummaryEntry = _BladeHealthSummaryEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 2, 1)
)
bladeHealthSummaryEntry.setIndexNames(
    (0, "CME-MIB", "bladeHealthSummaryIndex"),
)
if mibBuilder.loadTexts:
    bladeHealthSummaryEntry.setStatus("mandatory")
_BladeHealthSummaryIndex_Type = Integer32
_BladeHealthSummaryIndex_Object = MibTableColumn
bladeHealthSummaryIndex = _BladeHealthSummaryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 2, 1, 1),
    _BladeHealthSummaryIndex_Type()
)
bladeHealthSummaryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHealthSummaryIndex.setStatus("mandatory")


class _BladeHealthSummaryBladeId_Type(Integer32):
    """Custom type bladeHealthSummaryBladeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_BladeHealthSummaryBladeId_Type.__name__ = "Integer32"
_BladeHealthSummaryBladeId_Object = MibTableColumn
bladeHealthSummaryBladeId = _BladeHealthSummaryBladeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 2, 1, 2),
    _BladeHealthSummaryBladeId_Type()
)
bladeHealthSummaryBladeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHealthSummaryBladeId.setStatus("mandatory")
_BladeHealthSummarySeverity_Type = OctetString
_BladeHealthSummarySeverity_Object = MibTableColumn
bladeHealthSummarySeverity = _BladeHealthSummarySeverity_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 2, 1, 3),
    _BladeHealthSummarySeverity_Type()
)
bladeHealthSummarySeverity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHealthSummarySeverity.setStatus("mandatory")
_BladeHealthSummaryDescription_Type = OctetString
_BladeHealthSummaryDescription_Object = MibTableColumn
bladeHealthSummaryDescription = _BladeHealthSummaryDescription_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 2, 1, 4),
    _BladeHealthSummaryDescription_Type()
)
bladeHealthSummaryDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHealthSummaryDescription.setStatus("mandatory")
_BladeHealthSummaryDateTime_Type = OctetString
_BladeHealthSummaryDateTime_Object = MibTableColumn
bladeHealthSummaryDateTime = _BladeHealthSummaryDateTime_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 2, 1, 5),
    _BladeHealthSummaryDateTime_Type()
)
bladeHealthSummaryDateTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHealthSummaryDateTime.setStatus("mandatory")
_BladeHealthSummaryEventID_Type = OctetString
_BladeHealthSummaryEventID_Object = MibTableColumn
bladeHealthSummaryEventID = _BladeHealthSummaryEventID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 2, 1, 6),
    _BladeHealthSummaryEventID_Type()
)
bladeHealthSummaryEventID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeHealthSummaryEventID.setStatus("mandatory")
_BladeTemperaturesTable_Object = MibTable
bladeTemperaturesTable = _BladeTemperaturesTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3)
)
if mibBuilder.loadTexts:
    bladeTemperaturesTable.setStatus("mandatory")
_BladeTemperaturesEntry_Object = MibTableRow
bladeTemperaturesEntry = _BladeTemperaturesEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1)
)
bladeTemperaturesEntry.setIndexNames(
    (0, "CME-MIB", "temperatureIndex"),
)
if mibBuilder.loadTexts:
    bladeTemperaturesEntry.setStatus("mandatory")
_TemperatureIndex_Type = Integer32
_TemperatureIndex_Object = MibTableColumn
temperatureIndex = _TemperatureIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 1),
    _TemperatureIndex_Type()
)
temperatureIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureIndex.setStatus("mandatory")


class _TemperatureBladeId_Type(Integer32):
    """Custom type temperatureBladeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_TemperatureBladeId_Type.__name__ = "Integer32"
_TemperatureBladeId_Object = MibTableColumn
temperatureBladeId = _TemperatureBladeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 2),
    _TemperatureBladeId_Type()
)
temperatureBladeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureBladeId.setStatus("mandatory")


class _TemperatureBladeExists_Type(Integer32):
    """Custom type temperatureBladeExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_TemperatureBladeExists_Type.__name__ = "Integer32"
_TemperatureBladeExists_Object = MibTableColumn
temperatureBladeExists = _TemperatureBladeExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 3),
    _TemperatureBladeExists_Type()
)
temperatureBladeExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureBladeExists.setStatus("mandatory")


class _TemperatureBladePowerState_Type(Integer32):
    """Custom type temperatureBladePowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("standby", 3),
          ("hibernate", 4),
          ("unknown", 255))
    )


_TemperatureBladePowerState_Type.__name__ = "Integer32"
_TemperatureBladePowerState_Object = MibTableColumn
temperatureBladePowerState = _TemperatureBladePowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 4),
    _TemperatureBladePowerState_Type()
)
temperatureBladePowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureBladePowerState.setStatus("mandatory")
_TemperatureBladeName_Type = OctetString
_TemperatureBladeName_Object = MibTableColumn
temperatureBladeName = _TemperatureBladeName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 5),
    _TemperatureBladeName_Type()
)
temperatureBladeName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureBladeName.setStatus("mandatory")
_TemperatureCPU1_Type = OctetString
_TemperatureCPU1_Object = MibTableColumn
temperatureCPU1 = _TemperatureCPU1_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 6),
    _TemperatureCPU1_Type()
)
temperatureCPU1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureCPU1.setStatus("mandatory")
_TemperatureCPU2_Type = OctetString
_TemperatureCPU2_Object = MibTableColumn
temperatureCPU2 = _TemperatureCPU2_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 7),
    _TemperatureCPU2_Type()
)
temperatureCPU2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureCPU2.setStatus("mandatory")
_TemperatureCPU3_Type = OctetString
_TemperatureCPU3_Object = MibTableColumn
temperatureCPU3 = _TemperatureCPU3_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 8),
    _TemperatureCPU3_Type()
)
temperatureCPU3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureCPU3.setStatus("mandatory")
_TemperatureCPU4_Type = OctetString
_TemperatureCPU4_Object = MibTableColumn
temperatureCPU4 = _TemperatureCPU4_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 9),
    _TemperatureCPU4_Type()
)
temperatureCPU4.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureCPU4.setStatus("mandatory")
_TemperatureDASD1_Type = OctetString
_TemperatureDASD1_Object = MibTableColumn
temperatureDASD1 = _TemperatureDASD1_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 10),
    _TemperatureDASD1_Type()
)
temperatureDASD1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureDASD1.setStatus("mandatory")


class _BladeSensorTempCapability_Type(Integer32):
    """Custom type bladeSensorTempCapability based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_BladeSensorTempCapability_Type.__name__ = "Integer32"
_BladeSensorTempCapability_Object = MibTableColumn
bladeSensorTempCapability = _BladeSensorTempCapability_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 11),
    _BladeSensorTempCapability_Type()
)
bladeSensorTempCapability.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensorTempCapability.setStatus("mandatory")
_BladeSensor1Temp_Type = OctetString
_BladeSensor1Temp_Object = MibTableColumn
bladeSensor1Temp = _BladeSensor1Temp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 12),
    _BladeSensor1Temp_Type()
)
bladeSensor1Temp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor1Temp.setStatus("mandatory")
_BladeSensor2Temp_Type = OctetString
_BladeSensor2Temp_Object = MibTableColumn
bladeSensor2Temp = _BladeSensor2Temp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 13),
    _BladeSensor2Temp_Type()
)
bladeSensor2Temp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor2Temp.setStatus("mandatory")
_BladeSensor3Temp_Type = OctetString
_BladeSensor3Temp_Object = MibTableColumn
bladeSensor3Temp = _BladeSensor3Temp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 14),
    _BladeSensor3Temp_Type()
)
bladeSensor3Temp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor3Temp.setStatus("mandatory")
_BladeSensor4Temp_Type = OctetString
_BladeSensor4Temp_Object = MibTableColumn
bladeSensor4Temp = _BladeSensor4Temp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 15),
    _BladeSensor4Temp_Type()
)
bladeSensor4Temp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor4Temp.setStatus("mandatory")
_BladeSensor5Temp_Type = OctetString
_BladeSensor5Temp_Object = MibTableColumn
bladeSensor5Temp = _BladeSensor5Temp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 16),
    _BladeSensor5Temp_Type()
)
bladeSensor5Temp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor5Temp.setStatus("mandatory")
_BladeSensor6Temp_Type = OctetString
_BladeSensor6Temp_Object = MibTableColumn
bladeSensor6Temp = _BladeSensor6Temp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 17),
    _BladeSensor6Temp_Type()
)
bladeSensor6Temp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor6Temp.setStatus("mandatory")
_BladeSensor7Temp_Type = OctetString
_BladeSensor7Temp_Object = MibTableColumn
bladeSensor7Temp = _BladeSensor7Temp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 18),
    _BladeSensor7Temp_Type()
)
bladeSensor7Temp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor7Temp.setStatus("mandatory")
_BladeSensor8Temp_Type = OctetString
_BladeSensor8Temp_Object = MibTableColumn
bladeSensor8Temp = _BladeSensor8Temp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 19),
    _BladeSensor8Temp_Type()
)
bladeSensor8Temp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor8Temp.setStatus("mandatory")
_BladeSensor9Temp_Type = OctetString
_BladeSensor9Temp_Object = MibTableColumn
bladeSensor9Temp = _BladeSensor9Temp_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 3, 1, 20),
    _BladeSensor9Temp_Type()
)
bladeSensor9Temp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor9Temp.setStatus("mandatory")
_BladeTemperatureThresholdsTable_Object = MibTable
bladeTemperatureThresholdsTable = _BladeTemperatureThresholdsTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4)
)
if mibBuilder.loadTexts:
    bladeTemperatureThresholdsTable.setStatus("mandatory")
_BladeTemperatureThresholdsEntry_Object = MibTableRow
bladeTemperatureThresholdsEntry = _BladeTemperatureThresholdsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1)
)
bladeTemperatureThresholdsEntry.setIndexNames(
    (0, "CME-MIB", "temperatureThresholdIndex"),
)
if mibBuilder.loadTexts:
    bladeTemperatureThresholdsEntry.setStatus("mandatory")
_TemperatureThresholdIndex_Type = Integer32
_TemperatureThresholdIndex_Object = MibTableColumn
temperatureThresholdIndex = _TemperatureThresholdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 1),
    _TemperatureThresholdIndex_Type()
)
temperatureThresholdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureThresholdIndex.setStatus("mandatory")


class _TemperatureThresholdBladeId_Type(Integer32):
    """Custom type temperatureThresholdBladeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_TemperatureThresholdBladeId_Type.__name__ = "Integer32"
_TemperatureThresholdBladeId_Object = MibTableColumn
temperatureThresholdBladeId = _TemperatureThresholdBladeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 2),
    _TemperatureThresholdBladeId_Type()
)
temperatureThresholdBladeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureThresholdBladeId.setStatus("mandatory")


class _TemperatureThresholdBladeExists_Type(Integer32):
    """Custom type temperatureThresholdBladeExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_TemperatureThresholdBladeExists_Type.__name__ = "Integer32"
_TemperatureThresholdBladeExists_Object = MibTableColumn
temperatureThresholdBladeExists = _TemperatureThresholdBladeExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 3),
    _TemperatureThresholdBladeExists_Type()
)
temperatureThresholdBladeExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureThresholdBladeExists.setStatus("mandatory")


class _TemperatureThresholdBladePowerState_Type(Integer32):
    """Custom type temperatureThresholdBladePowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("standby", 3),
          ("hibernate", 4),
          ("unknown", 255))
    )


_TemperatureThresholdBladePowerState_Type.__name__ = "Integer32"
_TemperatureThresholdBladePowerState_Object = MibTableColumn
temperatureThresholdBladePowerState = _TemperatureThresholdBladePowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 4),
    _TemperatureThresholdBladePowerState_Type()
)
temperatureThresholdBladePowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureThresholdBladePowerState.setStatus("mandatory")
_TemperatureThresholdBladeName_Type = OctetString
_TemperatureThresholdBladeName_Object = MibTableColumn
temperatureThresholdBladeName = _TemperatureThresholdBladeName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 5),
    _TemperatureThresholdBladeName_Type()
)
temperatureThresholdBladeName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureThresholdBladeName.setStatus("mandatory")
_TemperatureCPU1HardShutdown_Type = OctetString
_TemperatureCPU1HardShutdown_Object = MibTableColumn
temperatureCPU1HardShutdown = _TemperatureCPU1HardShutdown_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 6),
    _TemperatureCPU1HardShutdown_Type()
)
temperatureCPU1HardShutdown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureCPU1HardShutdown.setStatus("mandatory")
_TemperatureCPU1Warning_Type = OctetString
_TemperatureCPU1Warning_Object = MibTableColumn
temperatureCPU1Warning = _TemperatureCPU1Warning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 7),
    _TemperatureCPU1Warning_Type()
)
temperatureCPU1Warning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureCPU1Warning.setStatus("mandatory")
_TemperatureCPU1WarningReset_Type = OctetString
_TemperatureCPU1WarningReset_Object = MibTableColumn
temperatureCPU1WarningReset = _TemperatureCPU1WarningReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 8),
    _TemperatureCPU1WarningReset_Type()
)
temperatureCPU1WarningReset.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureCPU1WarningReset.setStatus("mandatory")
_TemperatureCPU2HardShutdown_Type = OctetString
_TemperatureCPU2HardShutdown_Object = MibTableColumn
temperatureCPU2HardShutdown = _TemperatureCPU2HardShutdown_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 9),
    _TemperatureCPU2HardShutdown_Type()
)
temperatureCPU2HardShutdown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureCPU2HardShutdown.setStatus("mandatory")
_TemperatureCPU2Warning_Type = OctetString
_TemperatureCPU2Warning_Object = MibTableColumn
temperatureCPU2Warning = _TemperatureCPU2Warning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 10),
    _TemperatureCPU2Warning_Type()
)
temperatureCPU2Warning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureCPU2Warning.setStatus("mandatory")
_TemperatureCPU2WarningReset_Type = OctetString
_TemperatureCPU2WarningReset_Object = MibTableColumn
temperatureCPU2WarningReset = _TemperatureCPU2WarningReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 11),
    _TemperatureCPU2WarningReset_Type()
)
temperatureCPU2WarningReset.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureCPU2WarningReset.setStatus("mandatory")
_TemperatureCPU3HardShutdown_Type = OctetString
_TemperatureCPU3HardShutdown_Object = MibTableColumn
temperatureCPU3HardShutdown = _TemperatureCPU3HardShutdown_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 12),
    _TemperatureCPU3HardShutdown_Type()
)
temperatureCPU3HardShutdown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureCPU3HardShutdown.setStatus("mandatory")
_TemperatureCPU3Warning_Type = OctetString
_TemperatureCPU3Warning_Object = MibTableColumn
temperatureCPU3Warning = _TemperatureCPU3Warning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 13),
    _TemperatureCPU3Warning_Type()
)
temperatureCPU3Warning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureCPU3Warning.setStatus("mandatory")
_TemperatureCPU3WarningReset_Type = OctetString
_TemperatureCPU3WarningReset_Object = MibTableColumn
temperatureCPU3WarningReset = _TemperatureCPU3WarningReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 14),
    _TemperatureCPU3WarningReset_Type()
)
temperatureCPU3WarningReset.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureCPU3WarningReset.setStatus("mandatory")
_TemperatureCPU4HardShutdown_Type = OctetString
_TemperatureCPU4HardShutdown_Object = MibTableColumn
temperatureCPU4HardShutdown = _TemperatureCPU4HardShutdown_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 15),
    _TemperatureCPU4HardShutdown_Type()
)
temperatureCPU4HardShutdown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureCPU4HardShutdown.setStatus("mandatory")
_TemperatureCPU4Warning_Type = OctetString
_TemperatureCPU4Warning_Object = MibTableColumn
temperatureCPU4Warning = _TemperatureCPU4Warning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 16),
    _TemperatureCPU4Warning_Type()
)
temperatureCPU4Warning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureCPU4Warning.setStatus("mandatory")
_TemperatureCPU4WarningReset_Type = OctetString
_TemperatureCPU4WarningReset_Object = MibTableColumn
temperatureCPU4WarningReset = _TemperatureCPU4WarningReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 17),
    _TemperatureCPU4WarningReset_Type()
)
temperatureCPU4WarningReset.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureCPU4WarningReset.setStatus("mandatory")
_TemperatureDASD1HardShutdown_Type = OctetString
_TemperatureDASD1HardShutdown_Object = MibTableColumn
temperatureDASD1HardShutdown = _TemperatureDASD1HardShutdown_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 18),
    _TemperatureDASD1HardShutdown_Type()
)
temperatureDASD1HardShutdown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureDASD1HardShutdown.setStatus("mandatory")
_TemperatureDASD1Warning_Type = OctetString
_TemperatureDASD1Warning_Object = MibTableColumn
temperatureDASD1Warning = _TemperatureDASD1Warning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 19),
    _TemperatureDASD1Warning_Type()
)
temperatureDASD1Warning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureDASD1Warning.setStatus("mandatory")
_TemperatureDASD1WarningReset_Type = OctetString
_TemperatureDASD1WarningReset_Object = MibTableColumn
temperatureDASD1WarningReset = _TemperatureDASD1WarningReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 20),
    _TemperatureDASD1WarningReset_Type()
)
temperatureDASD1WarningReset.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureDASD1WarningReset.setStatus("mandatory")


class _BladeTempThresholdSensorCapability_Type(Integer32):
    """Custom type bladeTempThresholdSensorCapability based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_BladeTempThresholdSensorCapability_Type.__name__ = "Integer32"
_BladeTempThresholdSensorCapability_Object = MibTableColumn
bladeTempThresholdSensorCapability = _BladeTempThresholdSensorCapability_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 21),
    _BladeTempThresholdSensorCapability_Type()
)
bladeTempThresholdSensorCapability.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeTempThresholdSensorCapability.setStatus("mandatory")
_TemperatureSensor1HardShutdown_Type = OctetString
_TemperatureSensor1HardShutdown_Object = MibTableColumn
temperatureSensor1HardShutdown = _TemperatureSensor1HardShutdown_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 22),
    _TemperatureSensor1HardShutdown_Type()
)
temperatureSensor1HardShutdown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor1HardShutdown.setStatus("mandatory")
_TemperatureSensor1Warning_Type = OctetString
_TemperatureSensor1Warning_Object = MibTableColumn
temperatureSensor1Warning = _TemperatureSensor1Warning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 23),
    _TemperatureSensor1Warning_Type()
)
temperatureSensor1Warning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor1Warning.setStatus("mandatory")
_TemperatureSensor1WarningReset_Type = OctetString
_TemperatureSensor1WarningReset_Object = MibTableColumn
temperatureSensor1WarningReset = _TemperatureSensor1WarningReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 24),
    _TemperatureSensor1WarningReset_Type()
)
temperatureSensor1WarningReset.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor1WarningReset.setStatus("mandatory")
_TemperatureSensor2HardShutdown_Type = OctetString
_TemperatureSensor2HardShutdown_Object = MibTableColumn
temperatureSensor2HardShutdown = _TemperatureSensor2HardShutdown_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 25),
    _TemperatureSensor2HardShutdown_Type()
)
temperatureSensor2HardShutdown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor2HardShutdown.setStatus("mandatory")
_TemperatureSensor2Warning_Type = OctetString
_TemperatureSensor2Warning_Object = MibTableColumn
temperatureSensor2Warning = _TemperatureSensor2Warning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 26),
    _TemperatureSensor2Warning_Type()
)
temperatureSensor2Warning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor2Warning.setStatus("mandatory")
_TemperatureSensor2WarningReset_Type = OctetString
_TemperatureSensor2WarningReset_Object = MibTableColumn
temperatureSensor2WarningReset = _TemperatureSensor2WarningReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 27),
    _TemperatureSensor2WarningReset_Type()
)
temperatureSensor2WarningReset.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor2WarningReset.setStatus("mandatory")
_TemperatureSensor3HardShutdown_Type = OctetString
_TemperatureSensor3HardShutdown_Object = MibTableColumn
temperatureSensor3HardShutdown = _TemperatureSensor3HardShutdown_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 28),
    _TemperatureSensor3HardShutdown_Type()
)
temperatureSensor3HardShutdown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor3HardShutdown.setStatus("mandatory")
_TemperatureSensor3Warning_Type = OctetString
_TemperatureSensor3Warning_Object = MibTableColumn
temperatureSensor3Warning = _TemperatureSensor3Warning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 29),
    _TemperatureSensor3Warning_Type()
)
temperatureSensor3Warning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor3Warning.setStatus("mandatory")
_TemperatureSensor3WarningReset_Type = OctetString
_TemperatureSensor3WarningReset_Object = MibTableColumn
temperatureSensor3WarningReset = _TemperatureSensor3WarningReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 30),
    _TemperatureSensor3WarningReset_Type()
)
temperatureSensor3WarningReset.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor3WarningReset.setStatus("mandatory")
_TemperatureSensor4HardShutdown_Type = OctetString
_TemperatureSensor4HardShutdown_Object = MibTableColumn
temperatureSensor4HardShutdown = _TemperatureSensor4HardShutdown_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 31),
    _TemperatureSensor4HardShutdown_Type()
)
temperatureSensor4HardShutdown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor4HardShutdown.setStatus("mandatory")
_TemperatureSensor4Warning_Type = OctetString
_TemperatureSensor4Warning_Object = MibTableColumn
temperatureSensor4Warning = _TemperatureSensor4Warning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 32),
    _TemperatureSensor4Warning_Type()
)
temperatureSensor4Warning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor4Warning.setStatus("mandatory")
_TemperatureSensor4WarningReset_Type = OctetString
_TemperatureSensor4WarningReset_Object = MibTableColumn
temperatureSensor4WarningReset = _TemperatureSensor4WarningReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 33),
    _TemperatureSensor4WarningReset_Type()
)
temperatureSensor4WarningReset.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor4WarningReset.setStatus("mandatory")
_TemperatureSensor5HardShutdown_Type = OctetString
_TemperatureSensor5HardShutdown_Object = MibTableColumn
temperatureSensor5HardShutdown = _TemperatureSensor5HardShutdown_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 34),
    _TemperatureSensor5HardShutdown_Type()
)
temperatureSensor5HardShutdown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor5HardShutdown.setStatus("mandatory")
_TemperatureSensor5Warning_Type = OctetString
_TemperatureSensor5Warning_Object = MibTableColumn
temperatureSensor5Warning = _TemperatureSensor5Warning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 35),
    _TemperatureSensor5Warning_Type()
)
temperatureSensor5Warning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor5Warning.setStatus("mandatory")
_TemperatureSensor5WarningReset_Type = OctetString
_TemperatureSensor5WarningReset_Object = MibTableColumn
temperatureSensor5WarningReset = _TemperatureSensor5WarningReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 36),
    _TemperatureSensor5WarningReset_Type()
)
temperatureSensor5WarningReset.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor5WarningReset.setStatus("mandatory")
_TemperatureSensor6HardShutdown_Type = OctetString
_TemperatureSensor6HardShutdown_Object = MibTableColumn
temperatureSensor6HardShutdown = _TemperatureSensor6HardShutdown_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 37),
    _TemperatureSensor6HardShutdown_Type()
)
temperatureSensor6HardShutdown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor6HardShutdown.setStatus("mandatory")
_TemperatureSensor6Warning_Type = OctetString
_TemperatureSensor6Warning_Object = MibTableColumn
temperatureSensor6Warning = _TemperatureSensor6Warning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 38),
    _TemperatureSensor6Warning_Type()
)
temperatureSensor6Warning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor6Warning.setStatus("mandatory")
_TemperatureSensor6WarningReset_Type = OctetString
_TemperatureSensor6WarningReset_Object = MibTableColumn
temperatureSensor6WarningReset = _TemperatureSensor6WarningReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 39),
    _TemperatureSensor6WarningReset_Type()
)
temperatureSensor6WarningReset.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor6WarningReset.setStatus("mandatory")
_TemperatureSensor7HardShutdown_Type = OctetString
_TemperatureSensor7HardShutdown_Object = MibTableColumn
temperatureSensor7HardShutdown = _TemperatureSensor7HardShutdown_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 40),
    _TemperatureSensor7HardShutdown_Type()
)
temperatureSensor7HardShutdown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor7HardShutdown.setStatus("mandatory")
_TemperatureSensor7Warning_Type = OctetString
_TemperatureSensor7Warning_Object = MibTableColumn
temperatureSensor7Warning = _TemperatureSensor7Warning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 41),
    _TemperatureSensor7Warning_Type()
)
temperatureSensor7Warning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor7Warning.setStatus("mandatory")
_TemperatureSensor7WarningReset_Type = OctetString
_TemperatureSensor7WarningReset_Object = MibTableColumn
temperatureSensor7WarningReset = _TemperatureSensor7WarningReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 42),
    _TemperatureSensor7WarningReset_Type()
)
temperatureSensor7WarningReset.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor7WarningReset.setStatus("mandatory")
_TemperatureSensor8HardShutdown_Type = OctetString
_TemperatureSensor8HardShutdown_Object = MibTableColumn
temperatureSensor8HardShutdown = _TemperatureSensor8HardShutdown_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 43),
    _TemperatureSensor8HardShutdown_Type()
)
temperatureSensor8HardShutdown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor8HardShutdown.setStatus("mandatory")
_TemperatureSensor8Warning_Type = OctetString
_TemperatureSensor8Warning_Object = MibTableColumn
temperatureSensor8Warning = _TemperatureSensor8Warning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 44),
    _TemperatureSensor8Warning_Type()
)
temperatureSensor8Warning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor8Warning.setStatus("mandatory")
_TemperatureSensor8WarningReset_Type = OctetString
_TemperatureSensor8WarningReset_Object = MibTableColumn
temperatureSensor8WarningReset = _TemperatureSensor8WarningReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 45),
    _TemperatureSensor8WarningReset_Type()
)
temperatureSensor8WarningReset.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor8WarningReset.setStatus("mandatory")
_TemperatureSensor9HardShutdown_Type = OctetString
_TemperatureSensor9HardShutdown_Object = MibTableColumn
temperatureSensor9HardShutdown = _TemperatureSensor9HardShutdown_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 46),
    _TemperatureSensor9HardShutdown_Type()
)
temperatureSensor9HardShutdown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor9HardShutdown.setStatus("mandatory")
_TemperatureSensor9Warning_Type = OctetString
_TemperatureSensor9Warning_Object = MibTableColumn
temperatureSensor9Warning = _TemperatureSensor9Warning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 47),
    _TemperatureSensor9Warning_Type()
)
temperatureSensor9Warning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor9Warning.setStatus("mandatory")
_TemperatureSensor9WarningReset_Type = OctetString
_TemperatureSensor9WarningReset_Object = MibTableColumn
temperatureSensor9WarningReset = _TemperatureSensor9WarningReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 4, 1, 48),
    _TemperatureSensor9WarningReset_Type()
)
temperatureSensor9WarningReset.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSensor9WarningReset.setStatus("mandatory")
_BladeVoltagesTable_Object = MibTable
bladeVoltagesTable = _BladeVoltagesTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5)
)
if mibBuilder.loadTexts:
    bladeVoltagesTable.setStatus("mandatory")
_BladeVoltagesEntry_Object = MibTableRow
bladeVoltagesEntry = _BladeVoltagesEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1)
)
bladeVoltagesEntry.setIndexNames(
    (0, "CME-MIB", "voltageIndex"),
)
if mibBuilder.loadTexts:
    bladeVoltagesEntry.setStatus("mandatory")
_VoltageIndex_Type = Integer32
_VoltageIndex_Object = MibTableColumn
voltageIndex = _VoltageIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 1),
    _VoltageIndex_Type()
)
voltageIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voltageIndex.setStatus("mandatory")


class _VoltageBladeId_Type(Integer32):
    """Custom type voltageBladeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_VoltageBladeId_Type.__name__ = "Integer32"
_VoltageBladeId_Object = MibTableColumn
voltageBladeId = _VoltageBladeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 2),
    _VoltageBladeId_Type()
)
voltageBladeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voltageBladeId.setStatus("mandatory")


class _VoltageBladeExists_Type(Integer32):
    """Custom type voltageBladeExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_VoltageBladeExists_Type.__name__ = "Integer32"
_VoltageBladeExists_Object = MibTableColumn
voltageBladeExists = _VoltageBladeExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 3),
    _VoltageBladeExists_Type()
)
voltageBladeExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voltageBladeExists.setStatus("mandatory")


class _VoltageBladePowerState_Type(Integer32):
    """Custom type voltageBladePowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("standby", 3),
          ("hibernate", 4),
          ("unknown", 255))
    )


_VoltageBladePowerState_Type.__name__ = "Integer32"
_VoltageBladePowerState_Object = MibTableColumn
voltageBladePowerState = _VoltageBladePowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 4),
    _VoltageBladePowerState_Type()
)
voltageBladePowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voltageBladePowerState.setStatus("mandatory")
_VoltageBladeName_Type = OctetString
_VoltageBladeName_Object = MibTableColumn
voltageBladeName = _VoltageBladeName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 5),
    _VoltageBladeName_Type()
)
voltageBladeName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voltageBladeName.setStatus("mandatory")
_BladePlus5Volt_Type = OctetString
_BladePlus5Volt_Object = MibTableColumn
bladePlus5Volt = _BladePlus5Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 6),
    _BladePlus5Volt_Type()
)
bladePlus5Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePlus5Volt.setStatus("mandatory")
_BladePlus3pt3Volt_Type = OctetString
_BladePlus3pt3Volt_Object = MibTableColumn
bladePlus3pt3Volt = _BladePlus3pt3Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 7),
    _BladePlus3pt3Volt_Type()
)
bladePlus3pt3Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePlus3pt3Volt.setStatus("mandatory")
_BladePlus12Volt_Type = OctetString
_BladePlus12Volt_Object = MibTableColumn
bladePlus12Volt = _BladePlus12Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 8),
    _BladePlus12Volt_Type()
)
bladePlus12Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePlus12Volt.setStatus("mandatory")
_BladePlus2pt5Volt_Type = OctetString
_BladePlus2pt5Volt_Object = MibTableColumn
bladePlus2pt5Volt = _BladePlus2pt5Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 10),
    _BladePlus2pt5Volt_Type()
)
bladePlus2pt5Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePlus2pt5Volt.setStatus("mandatory")
_BladePlus1pt5Volt_Type = OctetString
_BladePlus1pt5Volt_Object = MibTableColumn
bladePlus1pt5Volt = _BladePlus1pt5Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 11),
    _BladePlus1pt5Volt_Type()
)
bladePlus1pt5Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePlus1pt5Volt.setStatus("mandatory")
_BladePlus1pt25Volt_Type = OctetString
_BladePlus1pt25Volt_Object = MibTableColumn
bladePlus1pt25Volt = _BladePlus1pt25Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 12),
    _BladePlus1pt25Volt_Type()
)
bladePlus1pt25Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePlus1pt25Volt.setStatus("mandatory")
_BladeVRM1Volt_Type = OctetString
_BladeVRM1Volt_Object = MibTableColumn
bladeVRM1Volt = _BladeVRM1Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 13),
    _BladeVRM1Volt_Type()
)
bladeVRM1Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeVRM1Volt.setStatus("mandatory")


class _BladeSensorVoltCapability_Type(Integer32):
    """Custom type bladeSensorVoltCapability based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_BladeSensorVoltCapability_Type.__name__ = "Integer32"
_BladeSensorVoltCapability_Object = MibTableColumn
bladeSensorVoltCapability = _BladeSensorVoltCapability_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 14),
    _BladeSensorVoltCapability_Type()
)
bladeSensorVoltCapability.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensorVoltCapability.setStatus("mandatory")
_BladeSensor1Volt_Type = OctetString
_BladeSensor1Volt_Object = MibTableColumn
bladeSensor1Volt = _BladeSensor1Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 15),
    _BladeSensor1Volt_Type()
)
bladeSensor1Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor1Volt.setStatus("mandatory")
_BladeSensor2Volt_Type = OctetString
_BladeSensor2Volt_Object = MibTableColumn
bladeSensor2Volt = _BladeSensor2Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 16),
    _BladeSensor2Volt_Type()
)
bladeSensor2Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor2Volt.setStatus("mandatory")
_BladeSensor3Volt_Type = OctetString
_BladeSensor3Volt_Object = MibTableColumn
bladeSensor3Volt = _BladeSensor3Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 17),
    _BladeSensor3Volt_Type()
)
bladeSensor3Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor3Volt.setStatus("mandatory")
_BladeSensor4Volt_Type = OctetString
_BladeSensor4Volt_Object = MibTableColumn
bladeSensor4Volt = _BladeSensor4Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 18),
    _BladeSensor4Volt_Type()
)
bladeSensor4Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor4Volt.setStatus("mandatory")
_BladeSensor5Volt_Type = OctetString
_BladeSensor5Volt_Object = MibTableColumn
bladeSensor5Volt = _BladeSensor5Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 19),
    _BladeSensor5Volt_Type()
)
bladeSensor5Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor5Volt.setStatus("mandatory")
_BladeSensor6Volt_Type = OctetString
_BladeSensor6Volt_Object = MibTableColumn
bladeSensor6Volt = _BladeSensor6Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 20),
    _BladeSensor6Volt_Type()
)
bladeSensor6Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor6Volt.setStatus("mandatory")
_BladeSensor7Volt_Type = OctetString
_BladeSensor7Volt_Object = MibTableColumn
bladeSensor7Volt = _BladeSensor7Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 21),
    _BladeSensor7Volt_Type()
)
bladeSensor7Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor7Volt.setStatus("mandatory")
_BladeSensor8Volt_Type = OctetString
_BladeSensor8Volt_Object = MibTableColumn
bladeSensor8Volt = _BladeSensor8Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 22),
    _BladeSensor8Volt_Type()
)
bladeSensor8Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor8Volt.setStatus("mandatory")
_BladeSensor9Volt_Type = OctetString
_BladeSensor9Volt_Object = MibTableColumn
bladeSensor9Volt = _BladeSensor9Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 23),
    _BladeSensor9Volt_Type()
)
bladeSensor9Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor9Volt.setStatus("mandatory")
_BladeSensor10Volt_Type = OctetString
_BladeSensor10Volt_Object = MibTableColumn
bladeSensor10Volt = _BladeSensor10Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 24),
    _BladeSensor10Volt_Type()
)
bladeSensor10Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor10Volt.setStatus("mandatory")
_BladeSensor11Volt_Type = OctetString
_BladeSensor11Volt_Object = MibTableColumn
bladeSensor11Volt = _BladeSensor11Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 25),
    _BladeSensor11Volt_Type()
)
bladeSensor11Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor11Volt.setStatus("mandatory")
_BladeSensor12Volt_Type = OctetString
_BladeSensor12Volt_Object = MibTableColumn
bladeSensor12Volt = _BladeSensor12Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 26),
    _BladeSensor12Volt_Type()
)
bladeSensor12Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor12Volt.setStatus("mandatory")
_BladeSensor13Volt_Type = OctetString
_BladeSensor13Volt_Object = MibTableColumn
bladeSensor13Volt = _BladeSensor13Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 27),
    _BladeSensor13Volt_Type()
)
bladeSensor13Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor13Volt.setStatus("mandatory")
_BladeSensor14Volt_Type = OctetString
_BladeSensor14Volt_Object = MibTableColumn
bladeSensor14Volt = _BladeSensor14Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 28),
    _BladeSensor14Volt_Type()
)
bladeSensor14Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor14Volt.setStatus("mandatory")
_BladeSensor15Volt_Type = OctetString
_BladeSensor15Volt_Object = MibTableColumn
bladeSensor15Volt = _BladeSensor15Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 29),
    _BladeSensor15Volt_Type()
)
bladeSensor15Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor15Volt.setStatus("mandatory")
_BladeSensor16Volt_Type = OctetString
_BladeSensor16Volt_Object = MibTableColumn
bladeSensor16Volt = _BladeSensor16Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 30),
    _BladeSensor16Volt_Type()
)
bladeSensor16Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor16Volt.setStatus("mandatory")
_BladeSensor17Volt_Type = OctetString
_BladeSensor17Volt_Object = MibTableColumn
bladeSensor17Volt = _BladeSensor17Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 31),
    _BladeSensor17Volt_Type()
)
bladeSensor17Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor17Volt.setStatus("mandatory")
_BladeSensor18Volt_Type = OctetString
_BladeSensor18Volt_Object = MibTableColumn
bladeSensor18Volt = _BladeSensor18Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 32),
    _BladeSensor18Volt_Type()
)
bladeSensor18Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor18Volt.setStatus("mandatory")
_BladeSensor19Volt_Type = OctetString
_BladeSensor19Volt_Object = MibTableColumn
bladeSensor19Volt = _BladeSensor19Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 33),
    _BladeSensor19Volt_Type()
)
bladeSensor19Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor19Volt.setStatus("mandatory")
_BladeSensor20Volt_Type = OctetString
_BladeSensor20Volt_Object = MibTableColumn
bladeSensor20Volt = _BladeSensor20Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 34),
    _BladeSensor20Volt_Type()
)
bladeSensor20Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor20Volt.setStatus("mandatory")
_BladeSensor21Volt_Type = OctetString
_BladeSensor21Volt_Object = MibTableColumn
bladeSensor21Volt = _BladeSensor21Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 35),
    _BladeSensor21Volt_Type()
)
bladeSensor21Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor21Volt.setStatus("mandatory")
_BladeSensor22Volt_Type = OctetString
_BladeSensor22Volt_Object = MibTableColumn
bladeSensor22Volt = _BladeSensor22Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 36),
    _BladeSensor22Volt_Type()
)
bladeSensor22Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor22Volt.setStatus("mandatory")
_BladeSensor23Volt_Type = OctetString
_BladeSensor23Volt_Object = MibTableColumn
bladeSensor23Volt = _BladeSensor23Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 37),
    _BladeSensor23Volt_Type()
)
bladeSensor23Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor23Volt.setStatus("mandatory")
_BladeSensor24Volt_Type = OctetString
_BladeSensor24Volt_Object = MibTableColumn
bladeSensor24Volt = _BladeSensor24Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 38),
    _BladeSensor24Volt_Type()
)
bladeSensor24Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor24Volt.setStatus("mandatory")
_BladeSensor25Volt_Type = OctetString
_BladeSensor25Volt_Object = MibTableColumn
bladeSensor25Volt = _BladeSensor25Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 39),
    _BladeSensor25Volt_Type()
)
bladeSensor25Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor25Volt.setStatus("mandatory")
_BladeSensor26Volt_Type = OctetString
_BladeSensor26Volt_Object = MibTableColumn
bladeSensor26Volt = _BladeSensor26Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 40),
    _BladeSensor26Volt_Type()
)
bladeSensor26Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor26Volt.setStatus("mandatory")
_BladeSensor27Volt_Type = OctetString
_BladeSensor27Volt_Object = MibTableColumn
bladeSensor27Volt = _BladeSensor27Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 41),
    _BladeSensor27Volt_Type()
)
bladeSensor27Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor27Volt.setStatus("mandatory")
_BladeSensor28Volt_Type = OctetString
_BladeSensor28Volt_Object = MibTableColumn
bladeSensor28Volt = _BladeSensor28Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 42),
    _BladeSensor28Volt_Type()
)
bladeSensor28Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor28Volt.setStatus("mandatory")
_BladeSensor29Volt_Type = OctetString
_BladeSensor29Volt_Object = MibTableColumn
bladeSensor29Volt = _BladeSensor29Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 43),
    _BladeSensor29Volt_Type()
)
bladeSensor29Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor29Volt.setStatus("mandatory")
_BladeSensor30Volt_Type = OctetString
_BladeSensor30Volt_Object = MibTableColumn
bladeSensor30Volt = _BladeSensor30Volt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 5, 1, 44),
    _BladeSensor30Volt_Type()
)
bladeSensor30Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor30Volt.setStatus("mandatory")
_BladeVoltageThresholdsTable_Object = MibTable
bladeVoltageThresholdsTable = _BladeVoltageThresholdsTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6)
)
if mibBuilder.loadTexts:
    bladeVoltageThresholdsTable.setStatus("mandatory")
_BladeVoltageThresholdsEntry_Object = MibTableRow
bladeVoltageThresholdsEntry = _BladeVoltageThresholdsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1)
)
bladeVoltageThresholdsEntry.setIndexNames(
    (0, "CME-MIB", "voltageThresholdIndex"),
)
if mibBuilder.loadTexts:
    bladeVoltageThresholdsEntry.setStatus("mandatory")
_VoltageThresholdIndex_Type = Integer32
_VoltageThresholdIndex_Object = MibTableColumn
voltageThresholdIndex = _VoltageThresholdIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 1),
    _VoltageThresholdIndex_Type()
)
voltageThresholdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voltageThresholdIndex.setStatus("mandatory")


class _VoltageThresholdBladeId_Type(Integer32):
    """Custom type voltageThresholdBladeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_VoltageThresholdBladeId_Type.__name__ = "Integer32"
_VoltageThresholdBladeId_Object = MibTableColumn
voltageThresholdBladeId = _VoltageThresholdBladeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 2),
    _VoltageThresholdBladeId_Type()
)
voltageThresholdBladeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voltageThresholdBladeId.setStatus("mandatory")


class _VoltageThresholdBladeExists_Type(Integer32):
    """Custom type voltageThresholdBladeExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_VoltageThresholdBladeExists_Type.__name__ = "Integer32"
_VoltageThresholdBladeExists_Object = MibTableColumn
voltageThresholdBladeExists = _VoltageThresholdBladeExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 3),
    _VoltageThresholdBladeExists_Type()
)
voltageThresholdBladeExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voltageThresholdBladeExists.setStatus("mandatory")


class _VoltageThresholdBladePowerState_Type(Integer32):
    """Custom type voltageThresholdBladePowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("standby", 3),
          ("hibernate", 4),
          ("unknown", 255))
    )


_VoltageThresholdBladePowerState_Type.__name__ = "Integer32"
_VoltageThresholdBladePowerState_Object = MibTableColumn
voltageThresholdBladePowerState = _VoltageThresholdBladePowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 4),
    _VoltageThresholdBladePowerState_Type()
)
voltageThresholdBladePowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voltageThresholdBladePowerState.setStatus("mandatory")
_VoltageThresholdBladeName_Type = OctetString
_VoltageThresholdBladeName_Object = MibTableColumn
voltageThresholdBladeName = _VoltageThresholdBladeName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 5),
    _VoltageThresholdBladeName_Type()
)
voltageThresholdBladeName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voltageThresholdBladeName.setStatus("mandatory")
_BladePlus5VoltHighWarning_Type = OctetString
_BladePlus5VoltHighWarning_Object = MibTableColumn
bladePlus5VoltHighWarning = _BladePlus5VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 6),
    _BladePlus5VoltHighWarning_Type()
)
bladePlus5VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePlus5VoltHighWarning.setStatus("mandatory")
_BladePlus5VoltLowWarning_Type = OctetString
_BladePlus5VoltLowWarning_Object = MibTableColumn
bladePlus5VoltLowWarning = _BladePlus5VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 7),
    _BladePlus5VoltLowWarning_Type()
)
bladePlus5VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePlus5VoltLowWarning.setStatus("mandatory")
_BladePlus3pt3VoltHighWarning_Type = OctetString
_BladePlus3pt3VoltHighWarning_Object = MibTableColumn
bladePlus3pt3VoltHighWarning = _BladePlus3pt3VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 8),
    _BladePlus3pt3VoltHighWarning_Type()
)
bladePlus3pt3VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePlus3pt3VoltHighWarning.setStatus("mandatory")
_BladePlus3pt3VoltLowWarning_Type = OctetString
_BladePlus3pt3VoltLowWarning_Object = MibTableColumn
bladePlus3pt3VoltLowWarning = _BladePlus3pt3VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 9),
    _BladePlus3pt3VoltLowWarning_Type()
)
bladePlus3pt3VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePlus3pt3VoltLowWarning.setStatus("mandatory")
_BladePlus12VoltHighWarning_Type = OctetString
_BladePlus12VoltHighWarning_Object = MibTableColumn
bladePlus12VoltHighWarning = _BladePlus12VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 10),
    _BladePlus12VoltHighWarning_Type()
)
bladePlus12VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePlus12VoltHighWarning.setStatus("mandatory")
_BladePlus12VoltLowWarning_Type = OctetString
_BladePlus12VoltLowWarning_Object = MibTableColumn
bladePlus12VoltLowWarning = _BladePlus12VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 11),
    _BladePlus12VoltLowWarning_Type()
)
bladePlus12VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePlus12VoltLowWarning.setStatus("mandatory")
_BladePlus2pt5VoltHighWarning_Type = OctetString
_BladePlus2pt5VoltHighWarning_Object = MibTableColumn
bladePlus2pt5VoltHighWarning = _BladePlus2pt5VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 14),
    _BladePlus2pt5VoltHighWarning_Type()
)
bladePlus2pt5VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePlus2pt5VoltHighWarning.setStatus("mandatory")
_BladePlus2pt5VoltLowWarning_Type = OctetString
_BladePlus2pt5VoltLowWarning_Object = MibTableColumn
bladePlus2pt5VoltLowWarning = _BladePlus2pt5VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 15),
    _BladePlus2pt5VoltLowWarning_Type()
)
bladePlus2pt5VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePlus2pt5VoltLowWarning.setStatus("mandatory")
_BladePlus1pt5VoltHighWarning_Type = OctetString
_BladePlus1pt5VoltHighWarning_Object = MibTableColumn
bladePlus1pt5VoltHighWarning = _BladePlus1pt5VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 16),
    _BladePlus1pt5VoltHighWarning_Type()
)
bladePlus1pt5VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePlus1pt5VoltHighWarning.setStatus("mandatory")
_BladePlus1pt5VoltLowWarning_Type = OctetString
_BladePlus1pt5VoltLowWarning_Object = MibTableColumn
bladePlus1pt5VoltLowWarning = _BladePlus1pt5VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 17),
    _BladePlus1pt5VoltLowWarning_Type()
)
bladePlus1pt5VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePlus1pt5VoltLowWarning.setStatus("mandatory")
_BladePlus1pt25VoltHighWarning_Type = OctetString
_BladePlus1pt25VoltHighWarning_Object = MibTableColumn
bladePlus1pt25VoltHighWarning = _BladePlus1pt25VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 18),
    _BladePlus1pt25VoltHighWarning_Type()
)
bladePlus1pt25VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePlus1pt25VoltHighWarning.setStatus("mandatory")
_BladePlus1pt25VoltLowWarning_Type = OctetString
_BladePlus1pt25VoltLowWarning_Object = MibTableColumn
bladePlus1pt25VoltLowWarning = _BladePlus1pt25VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 19),
    _BladePlus1pt25VoltLowWarning_Type()
)
bladePlus1pt25VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePlus1pt25VoltLowWarning.setStatus("mandatory")


class _BladeVoltThresholdSensorCapability_Type(Integer32):
    """Custom type bladeVoltThresholdSensorCapability based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_BladeVoltThresholdSensorCapability_Type.__name__ = "Integer32"
_BladeVoltThresholdSensorCapability_Object = MibTableColumn
bladeVoltThresholdSensorCapability = _BladeVoltThresholdSensorCapability_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 22),
    _BladeVoltThresholdSensorCapability_Type()
)
bladeVoltThresholdSensorCapability.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeVoltThresholdSensorCapability.setStatus("mandatory")
_BladeSensor1VoltHighWarning_Type = OctetString
_BladeSensor1VoltHighWarning_Object = MibTableColumn
bladeSensor1VoltHighWarning = _BladeSensor1VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 23),
    _BladeSensor1VoltHighWarning_Type()
)
bladeSensor1VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor1VoltHighWarning.setStatus("mandatory")
_BladeSensor1VoltLowWarning_Type = OctetString
_BladeSensor1VoltLowWarning_Object = MibTableColumn
bladeSensor1VoltLowWarning = _BladeSensor1VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 24),
    _BladeSensor1VoltLowWarning_Type()
)
bladeSensor1VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor1VoltLowWarning.setStatus("mandatory")
_BladeSensor2VoltHighWarning_Type = OctetString
_BladeSensor2VoltHighWarning_Object = MibTableColumn
bladeSensor2VoltHighWarning = _BladeSensor2VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 25),
    _BladeSensor2VoltHighWarning_Type()
)
bladeSensor2VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor2VoltHighWarning.setStatus("mandatory")
_BladeSensor2VoltLowWarning_Type = OctetString
_BladeSensor2VoltLowWarning_Object = MibTableColumn
bladeSensor2VoltLowWarning = _BladeSensor2VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 26),
    _BladeSensor2VoltLowWarning_Type()
)
bladeSensor2VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor2VoltLowWarning.setStatus("mandatory")
_BladeSensor3VoltHighWarning_Type = OctetString
_BladeSensor3VoltHighWarning_Object = MibTableColumn
bladeSensor3VoltHighWarning = _BladeSensor3VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 27),
    _BladeSensor3VoltHighWarning_Type()
)
bladeSensor3VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor3VoltHighWarning.setStatus("mandatory")
_BladeSensor3VoltLowWarning_Type = OctetString
_BladeSensor3VoltLowWarning_Object = MibTableColumn
bladeSensor3VoltLowWarning = _BladeSensor3VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 28),
    _BladeSensor3VoltLowWarning_Type()
)
bladeSensor3VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor3VoltLowWarning.setStatus("mandatory")
_BladeSensor4VoltHighWarning_Type = OctetString
_BladeSensor4VoltHighWarning_Object = MibTableColumn
bladeSensor4VoltHighWarning = _BladeSensor4VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 29),
    _BladeSensor4VoltHighWarning_Type()
)
bladeSensor4VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor4VoltHighWarning.setStatus("mandatory")
_BladeSensor4VoltLowWarning_Type = OctetString
_BladeSensor4VoltLowWarning_Object = MibTableColumn
bladeSensor4VoltLowWarning = _BladeSensor4VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 30),
    _BladeSensor4VoltLowWarning_Type()
)
bladeSensor4VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor4VoltLowWarning.setStatus("mandatory")
_BladeSensor5VoltHighWarning_Type = OctetString
_BladeSensor5VoltHighWarning_Object = MibTableColumn
bladeSensor5VoltHighWarning = _BladeSensor5VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 31),
    _BladeSensor5VoltHighWarning_Type()
)
bladeSensor5VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor5VoltHighWarning.setStatus("mandatory")
_BladeSensor5VoltLowWarning_Type = OctetString
_BladeSensor5VoltLowWarning_Object = MibTableColumn
bladeSensor5VoltLowWarning = _BladeSensor5VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 32),
    _BladeSensor5VoltLowWarning_Type()
)
bladeSensor5VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor5VoltLowWarning.setStatus("mandatory")
_BladeSensor6VoltHighWarning_Type = OctetString
_BladeSensor6VoltHighWarning_Object = MibTableColumn
bladeSensor6VoltHighWarning = _BladeSensor6VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 33),
    _BladeSensor6VoltHighWarning_Type()
)
bladeSensor6VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor6VoltHighWarning.setStatus("mandatory")
_BladeSensor6VoltLowWarning_Type = OctetString
_BladeSensor6VoltLowWarning_Object = MibTableColumn
bladeSensor6VoltLowWarning = _BladeSensor6VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 34),
    _BladeSensor6VoltLowWarning_Type()
)
bladeSensor6VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor6VoltLowWarning.setStatus("mandatory")
_BladeSensor7VoltHighWarning_Type = OctetString
_BladeSensor7VoltHighWarning_Object = MibTableColumn
bladeSensor7VoltHighWarning = _BladeSensor7VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 35),
    _BladeSensor7VoltHighWarning_Type()
)
bladeSensor7VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor7VoltHighWarning.setStatus("mandatory")
_BladeSensor7VoltLowWarning_Type = OctetString
_BladeSensor7VoltLowWarning_Object = MibTableColumn
bladeSensor7VoltLowWarning = _BladeSensor7VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 36),
    _BladeSensor7VoltLowWarning_Type()
)
bladeSensor7VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor7VoltLowWarning.setStatus("mandatory")
_BladeSensor8VoltHighWarning_Type = OctetString
_BladeSensor8VoltHighWarning_Object = MibTableColumn
bladeSensor8VoltHighWarning = _BladeSensor8VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 37),
    _BladeSensor8VoltHighWarning_Type()
)
bladeSensor8VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor8VoltHighWarning.setStatus("mandatory")
_BladeSensor8VoltLowWarning_Type = OctetString
_BladeSensor8VoltLowWarning_Object = MibTableColumn
bladeSensor8VoltLowWarning = _BladeSensor8VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 38),
    _BladeSensor8VoltLowWarning_Type()
)
bladeSensor8VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor8VoltLowWarning.setStatus("mandatory")
_BladeSensor9VoltHighWarning_Type = OctetString
_BladeSensor9VoltHighWarning_Object = MibTableColumn
bladeSensor9VoltHighWarning = _BladeSensor9VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 39),
    _BladeSensor9VoltHighWarning_Type()
)
bladeSensor9VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor9VoltHighWarning.setStatus("mandatory")
_BladeSensor9VoltLowWarning_Type = OctetString
_BladeSensor9VoltLowWarning_Object = MibTableColumn
bladeSensor9VoltLowWarning = _BladeSensor9VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 40),
    _BladeSensor9VoltLowWarning_Type()
)
bladeSensor9VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor9VoltLowWarning.setStatus("mandatory")
_BladeSensor10VoltHighWarning_Type = OctetString
_BladeSensor10VoltHighWarning_Object = MibTableColumn
bladeSensor10VoltHighWarning = _BladeSensor10VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 41),
    _BladeSensor10VoltHighWarning_Type()
)
bladeSensor10VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor10VoltHighWarning.setStatus("mandatory")
_BladeSensor10VoltLowWarning_Type = OctetString
_BladeSensor10VoltLowWarning_Object = MibTableColumn
bladeSensor10VoltLowWarning = _BladeSensor10VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 42),
    _BladeSensor10VoltLowWarning_Type()
)
bladeSensor10VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor10VoltLowWarning.setStatus("mandatory")
_BladeSensor11VoltHighWarning_Type = OctetString
_BladeSensor11VoltHighWarning_Object = MibTableColumn
bladeSensor11VoltHighWarning = _BladeSensor11VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 43),
    _BladeSensor11VoltHighWarning_Type()
)
bladeSensor11VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor11VoltHighWarning.setStatus("mandatory")
_BladeSensor11VoltLowWarning_Type = OctetString
_BladeSensor11VoltLowWarning_Object = MibTableColumn
bladeSensor11VoltLowWarning = _BladeSensor11VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 44),
    _BladeSensor11VoltLowWarning_Type()
)
bladeSensor11VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor11VoltLowWarning.setStatus("mandatory")
_BladeSensor12VoltHighWarning_Type = OctetString
_BladeSensor12VoltHighWarning_Object = MibTableColumn
bladeSensor12VoltHighWarning = _BladeSensor12VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 45),
    _BladeSensor12VoltHighWarning_Type()
)
bladeSensor12VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor12VoltHighWarning.setStatus("mandatory")
_BladeSensor12VoltLowWarning_Type = OctetString
_BladeSensor12VoltLowWarning_Object = MibTableColumn
bladeSensor12VoltLowWarning = _BladeSensor12VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 46),
    _BladeSensor12VoltLowWarning_Type()
)
bladeSensor12VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor12VoltLowWarning.setStatus("mandatory")
_BladeSensor13VoltHighWarning_Type = OctetString
_BladeSensor13VoltHighWarning_Object = MibTableColumn
bladeSensor13VoltHighWarning = _BladeSensor13VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 47),
    _BladeSensor13VoltHighWarning_Type()
)
bladeSensor13VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor13VoltHighWarning.setStatus("mandatory")
_BladeSensor13VoltLowWarning_Type = OctetString
_BladeSensor13VoltLowWarning_Object = MibTableColumn
bladeSensor13VoltLowWarning = _BladeSensor13VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 48),
    _BladeSensor13VoltLowWarning_Type()
)
bladeSensor13VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor13VoltLowWarning.setStatus("mandatory")
_BladeSensor14VoltHighWarning_Type = OctetString
_BladeSensor14VoltHighWarning_Object = MibTableColumn
bladeSensor14VoltHighWarning = _BladeSensor14VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 49),
    _BladeSensor14VoltHighWarning_Type()
)
bladeSensor14VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor14VoltHighWarning.setStatus("mandatory")
_BladeSensor14VoltLowWarning_Type = OctetString
_BladeSensor14VoltLowWarning_Object = MibTableColumn
bladeSensor14VoltLowWarning = _BladeSensor14VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 50),
    _BladeSensor14VoltLowWarning_Type()
)
bladeSensor14VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor14VoltLowWarning.setStatus("mandatory")
_BladeSensor15VoltHighWarning_Type = OctetString
_BladeSensor15VoltHighWarning_Object = MibTableColumn
bladeSensor15VoltHighWarning = _BladeSensor15VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 51),
    _BladeSensor15VoltHighWarning_Type()
)
bladeSensor15VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor15VoltHighWarning.setStatus("mandatory")
_BladeSensor15VoltLowWarning_Type = OctetString
_BladeSensor15VoltLowWarning_Object = MibTableColumn
bladeSensor15VoltLowWarning = _BladeSensor15VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 52),
    _BladeSensor15VoltLowWarning_Type()
)
bladeSensor15VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor15VoltLowWarning.setStatus("mandatory")
_BladeSensor16VoltHighWarning_Type = OctetString
_BladeSensor16VoltHighWarning_Object = MibTableColumn
bladeSensor16VoltHighWarning = _BladeSensor16VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 53),
    _BladeSensor16VoltHighWarning_Type()
)
bladeSensor16VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor16VoltHighWarning.setStatus("mandatory")
_BladeSensor16VoltLowWarning_Type = OctetString
_BladeSensor16VoltLowWarning_Object = MibTableColumn
bladeSensor16VoltLowWarning = _BladeSensor16VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 54),
    _BladeSensor16VoltLowWarning_Type()
)
bladeSensor16VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor16VoltLowWarning.setStatus("mandatory")
_BladeSensor17VoltHighWarning_Type = OctetString
_BladeSensor17VoltHighWarning_Object = MibTableColumn
bladeSensor17VoltHighWarning = _BladeSensor17VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 55),
    _BladeSensor17VoltHighWarning_Type()
)
bladeSensor17VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor17VoltHighWarning.setStatus("mandatory")
_BladeSensor17VoltLowWarning_Type = OctetString
_BladeSensor17VoltLowWarning_Object = MibTableColumn
bladeSensor17VoltLowWarning = _BladeSensor17VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 56),
    _BladeSensor17VoltLowWarning_Type()
)
bladeSensor17VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor17VoltLowWarning.setStatus("mandatory")
_BladeSensor18VoltHighWarning_Type = OctetString
_BladeSensor18VoltHighWarning_Object = MibTableColumn
bladeSensor18VoltHighWarning = _BladeSensor18VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 57),
    _BladeSensor18VoltHighWarning_Type()
)
bladeSensor18VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor18VoltHighWarning.setStatus("mandatory")
_BladeSensor18VoltLowWarning_Type = OctetString
_BladeSensor18VoltLowWarning_Object = MibTableColumn
bladeSensor18VoltLowWarning = _BladeSensor18VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 58),
    _BladeSensor18VoltLowWarning_Type()
)
bladeSensor18VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor18VoltLowWarning.setStatus("mandatory")
_BladeSensor19VoltHighWarning_Type = OctetString
_BladeSensor19VoltHighWarning_Object = MibTableColumn
bladeSensor19VoltHighWarning = _BladeSensor19VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 59),
    _BladeSensor19VoltHighWarning_Type()
)
bladeSensor19VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor19VoltHighWarning.setStatus("mandatory")
_BladeSensor19VoltLowWarning_Type = OctetString
_BladeSensor19VoltLowWarning_Object = MibTableColumn
bladeSensor19VoltLowWarning = _BladeSensor19VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 60),
    _BladeSensor19VoltLowWarning_Type()
)
bladeSensor19VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor19VoltLowWarning.setStatus("mandatory")
_BladeSensor20VoltHighWarning_Type = OctetString
_BladeSensor20VoltHighWarning_Object = MibTableColumn
bladeSensor20VoltHighWarning = _BladeSensor20VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 61),
    _BladeSensor20VoltHighWarning_Type()
)
bladeSensor20VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor20VoltHighWarning.setStatus("mandatory")
_BladeSensor20VoltLowWarning_Type = OctetString
_BladeSensor20VoltLowWarning_Object = MibTableColumn
bladeSensor20VoltLowWarning = _BladeSensor20VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 62),
    _BladeSensor20VoltLowWarning_Type()
)
bladeSensor20VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor20VoltLowWarning.setStatus("mandatory")
_BladeSensor21VoltHighWarning_Type = OctetString
_BladeSensor21VoltHighWarning_Object = MibTableColumn
bladeSensor21VoltHighWarning = _BladeSensor21VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 63),
    _BladeSensor21VoltHighWarning_Type()
)
bladeSensor21VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor21VoltHighWarning.setStatus("mandatory")
_BladeSensor21VoltLowWarning_Type = OctetString
_BladeSensor21VoltLowWarning_Object = MibTableColumn
bladeSensor21VoltLowWarning = _BladeSensor21VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 64),
    _BladeSensor21VoltLowWarning_Type()
)
bladeSensor21VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor21VoltLowWarning.setStatus("mandatory")
_BladeSensor22VoltHighWarning_Type = OctetString
_BladeSensor22VoltHighWarning_Object = MibTableColumn
bladeSensor22VoltHighWarning = _BladeSensor22VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 65),
    _BladeSensor22VoltHighWarning_Type()
)
bladeSensor22VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor22VoltHighWarning.setStatus("mandatory")
_BladeSensor22VoltLowWarning_Type = OctetString
_BladeSensor22VoltLowWarning_Object = MibTableColumn
bladeSensor22VoltLowWarning = _BladeSensor22VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 66),
    _BladeSensor22VoltLowWarning_Type()
)
bladeSensor22VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor22VoltLowWarning.setStatus("mandatory")
_BladeSensor23VoltHighWarning_Type = OctetString
_BladeSensor23VoltHighWarning_Object = MibTableColumn
bladeSensor23VoltHighWarning = _BladeSensor23VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 67),
    _BladeSensor23VoltHighWarning_Type()
)
bladeSensor23VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor23VoltHighWarning.setStatus("mandatory")
_BladeSensor23VoltLowWarning_Type = OctetString
_BladeSensor23VoltLowWarning_Object = MibTableColumn
bladeSensor23VoltLowWarning = _BladeSensor23VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 68),
    _BladeSensor23VoltLowWarning_Type()
)
bladeSensor23VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor23VoltLowWarning.setStatus("mandatory")
_BladeSensor24VoltHighWarning_Type = OctetString
_BladeSensor24VoltHighWarning_Object = MibTableColumn
bladeSensor24VoltHighWarning = _BladeSensor24VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 69),
    _BladeSensor24VoltHighWarning_Type()
)
bladeSensor24VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor24VoltHighWarning.setStatus("mandatory")
_BladeSensor24VoltLowWarning_Type = OctetString
_BladeSensor24VoltLowWarning_Object = MibTableColumn
bladeSensor24VoltLowWarning = _BladeSensor24VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 70),
    _BladeSensor24VoltLowWarning_Type()
)
bladeSensor24VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor24VoltLowWarning.setStatus("mandatory")
_BladeSensor25VoltHighWarning_Type = OctetString
_BladeSensor25VoltHighWarning_Object = MibTableColumn
bladeSensor25VoltHighWarning = _BladeSensor25VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 71),
    _BladeSensor25VoltHighWarning_Type()
)
bladeSensor25VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor25VoltHighWarning.setStatus("mandatory")
_BladeSensor25VoltLowWarning_Type = OctetString
_BladeSensor25VoltLowWarning_Object = MibTableColumn
bladeSensor25VoltLowWarning = _BladeSensor25VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 72),
    _BladeSensor25VoltLowWarning_Type()
)
bladeSensor25VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor25VoltLowWarning.setStatus("mandatory")
_BladeSensor26VoltHighWarning_Type = OctetString
_BladeSensor26VoltHighWarning_Object = MibTableColumn
bladeSensor26VoltHighWarning = _BladeSensor26VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 73),
    _BladeSensor26VoltHighWarning_Type()
)
bladeSensor26VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor26VoltHighWarning.setStatus("mandatory")
_BladeSensor26VoltLowWarning_Type = OctetString
_BladeSensor26VoltLowWarning_Object = MibTableColumn
bladeSensor26VoltLowWarning = _BladeSensor26VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 74),
    _BladeSensor26VoltLowWarning_Type()
)
bladeSensor26VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor26VoltLowWarning.setStatus("mandatory")
_BladeSensor27VoltHighWarning_Type = OctetString
_BladeSensor27VoltHighWarning_Object = MibTableColumn
bladeSensor27VoltHighWarning = _BladeSensor27VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 75),
    _BladeSensor27VoltHighWarning_Type()
)
bladeSensor27VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor27VoltHighWarning.setStatus("mandatory")
_BladeSensor27VoltLowWarning_Type = OctetString
_BladeSensor27VoltLowWarning_Object = MibTableColumn
bladeSensor27VoltLowWarning = _BladeSensor27VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 76),
    _BladeSensor27VoltLowWarning_Type()
)
bladeSensor27VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor27VoltLowWarning.setStatus("mandatory")
_BladeSensor28VoltHighWarning_Type = OctetString
_BladeSensor28VoltHighWarning_Object = MibTableColumn
bladeSensor28VoltHighWarning = _BladeSensor28VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 77),
    _BladeSensor28VoltHighWarning_Type()
)
bladeSensor28VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor28VoltHighWarning.setStatus("mandatory")
_BladeSensor28VoltLowWarning_Type = OctetString
_BladeSensor28VoltLowWarning_Object = MibTableColumn
bladeSensor28VoltLowWarning = _BladeSensor28VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 78),
    _BladeSensor28VoltLowWarning_Type()
)
bladeSensor28VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor28VoltLowWarning.setStatus("mandatory")
_BladeSensor29VoltHighWarning_Type = OctetString
_BladeSensor29VoltHighWarning_Object = MibTableColumn
bladeSensor29VoltHighWarning = _BladeSensor29VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 79),
    _BladeSensor29VoltHighWarning_Type()
)
bladeSensor29VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor29VoltHighWarning.setStatus("mandatory")
_BladeSensor29VoltLowWarning_Type = OctetString
_BladeSensor29VoltLowWarning_Object = MibTableColumn
bladeSensor29VoltLowWarning = _BladeSensor29VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 80),
    _BladeSensor29VoltLowWarning_Type()
)
bladeSensor29VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor29VoltLowWarning.setStatus("mandatory")
_BladeSensor30VoltHighWarning_Type = OctetString
_BladeSensor30VoltHighWarning_Object = MibTableColumn
bladeSensor30VoltHighWarning = _BladeSensor30VoltHighWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 81),
    _BladeSensor30VoltHighWarning_Type()
)
bladeSensor30VoltHighWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor30VoltHighWarning.setStatus("mandatory")
_BladeSensor30VoltLowWarning_Type = OctetString
_BladeSensor30VoltLowWarning_Object = MibTableColumn
bladeSensor30VoltLowWarning = _BladeSensor30VoltLowWarning_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 5, 6, 1, 82),
    _BladeSensor30VoltLowWarning_Type()
)
bladeSensor30VoltLowWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeSensor30VoltLowWarning.setStatus("mandatory")
_BladePowerRestart_ObjectIdentity = ObjectIdentity
bladePowerRestart = _BladePowerRestart_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6)
)
_BladePowerRestartTable_Object = MibTable
bladePowerRestartTable = _BladePowerRestartTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1)
)
if mibBuilder.loadTexts:
    bladePowerRestartTable.setStatus("mandatory")
_BladePowerRestartEntry_Object = MibTableRow
bladePowerRestartEntry = _BladePowerRestartEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1)
)
bladePowerRestartEntry.setIndexNames(
    (0, "CME-MIB", "powerRestartIndex"),
)
if mibBuilder.loadTexts:
    bladePowerRestartEntry.setStatus("mandatory")
_PowerRestartIndex_Type = Integer32
_PowerRestartIndex_Object = MibTableColumn
powerRestartIndex = _PowerRestartIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 1),
    _PowerRestartIndex_Type()
)
powerRestartIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerRestartIndex.setStatus("mandatory")


class _PowerRestartBladeId_Type(Integer32):
    """Custom type powerRestartBladeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_PowerRestartBladeId_Type.__name__ = "Integer32"
_PowerRestartBladeId_Object = MibTableColumn
powerRestartBladeId = _PowerRestartBladeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 2),
    _PowerRestartBladeId_Type()
)
powerRestartBladeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerRestartBladeId.setStatus("mandatory")


class _PowerRestartBladeExists_Type(Integer32):
    """Custom type powerRestartBladeExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_PowerRestartBladeExists_Type.__name__ = "Integer32"
_PowerRestartBladeExists_Object = MibTableColumn
powerRestartBladeExists = _PowerRestartBladeExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 3),
    _PowerRestartBladeExists_Type()
)
powerRestartBladeExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerRestartBladeExists.setStatus("mandatory")


class _PowerRestartBladePowerState_Type(Integer32):
    """Custom type powerRestartBladePowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("standby", 3),
          ("hibernate", 4),
          ("unknown", 255))
    )


_PowerRestartBladePowerState_Type.__name__ = "Integer32"
_PowerRestartBladePowerState_Object = MibTableColumn
powerRestartBladePowerState = _PowerRestartBladePowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 4),
    _PowerRestartBladePowerState_Type()
)
powerRestartBladePowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerRestartBladePowerState.setStatus("mandatory")


class _PowerRestartBladeHealthState_Type(Integer32):
    """Custom type powerRestartBladeHealthState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("good", 1),
          ("warning", 2),
          ("critical", 3),
          ("kernelMode", 4),
          ("discovering", 5),
          ("commError", 6),
          ("noPower", 7),
          ("flashing", 8),
          ("initFailure", 9),
          ("insufficientPower", 10),
          ("powerDenied", 11),
          ("maintMode", 12),
          ("firehoseDump", 13))
    )


_PowerRestartBladeHealthState_Type.__name__ = "Integer32"
_PowerRestartBladeHealthState_Object = MibTableColumn
powerRestartBladeHealthState = _PowerRestartBladeHealthState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 5),
    _PowerRestartBladeHealthState_Type()
)
powerRestartBladeHealthState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerRestartBladeHealthState.setStatus("mandatory")
_PowerRestartBladeName_Type = OctetString
_PowerRestartBladeName_Object = MibTableColumn
powerRestartBladeName = _PowerRestartBladeName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 6),
    _PowerRestartBladeName_Type()
)
powerRestartBladeName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerRestartBladeName.setStatus("mandatory")


class _PowerOnOffBlade_Type(Integer32):
    """Custom type powerOnOffBlade based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("softoff", 2))
    )


_PowerOnOffBlade_Type.__name__ = "Integer32"
_PowerOnOffBlade_Object = MibTableColumn
powerOnOffBlade = _PowerOnOffBlade_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 7),
    _PowerOnOffBlade_Type()
)
powerOnOffBlade.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    powerOnOffBlade.setStatus("mandatory")


class _RestartBlade_Type(Integer32):
    """Custom type restartBlade based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_RestartBlade_Type.__name__ = "Integer32"
_RestartBlade_Object = MibTableColumn
restartBlade = _RestartBlade_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 8),
    _RestartBlade_Type()
)
restartBlade.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restartBlade.setStatus("mandatory")


class _RestartBladeSMP_Type(Integer32):
    """Custom type restartBladeSMP based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_RestartBladeSMP_Type.__name__ = "Integer32"
_RestartBladeSMP_Object = MibTableColumn
restartBladeSMP = _RestartBladeSMP_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 9),
    _RestartBladeSMP_Type()
)
restartBladeSMP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restartBladeSMP.setStatus("mandatory")


class _RestartBladeNMI_Type(Integer32):
    """Custom type restartBladeNMI based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_RestartBladeNMI_Type.__name__ = "Integer32"
_RestartBladeNMI_Object = MibTableColumn
restartBladeNMI = _RestartBladeNMI_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 10),
    _RestartBladeNMI_Type()
)
restartBladeNMI.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restartBladeNMI.setStatus("mandatory")


class _RestartBladeClearNVRAM_Type(Integer32):
    """Custom type restartBladeClearNVRAM based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_RestartBladeClearNVRAM_Type.__name__ = "Integer32"
_RestartBladeClearNVRAM_Object = MibTableColumn
restartBladeClearNVRAM = _RestartBladeClearNVRAM_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 11),
    _RestartBladeClearNVRAM_Type()
)
restartBladeClearNVRAM.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restartBladeClearNVRAM.setStatus("mandatory")


class _RestartBladeInvokeDiags_Type(Integer32):
    """Custom type restartBladeInvokeDiags based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_RestartBladeInvokeDiags_Type.__name__ = "Integer32"
_RestartBladeInvokeDiags_Object = MibTableColumn
restartBladeInvokeDiags = _RestartBladeInvokeDiags_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 12),
    _RestartBladeInvokeDiags_Type()
)
restartBladeInvokeDiags.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restartBladeInvokeDiags.setStatus("mandatory")


class _RestartBladeInvokeDiagsFromDefaultBootList_Type(Integer32):
    """Custom type restartBladeInvokeDiagsFromDefaultBootList based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_RestartBladeInvokeDiagsFromDefaultBootList_Type.__name__ = "Integer32"
_RestartBladeInvokeDiagsFromDefaultBootList_Object = MibTableColumn
restartBladeInvokeDiagsFromDefaultBootList = _RestartBladeInvokeDiagsFromDefaultBootList_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 13),
    _RestartBladeInvokeDiagsFromDefaultBootList_Type()
)
restartBladeInvokeDiagsFromDefaultBootList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restartBladeInvokeDiagsFromDefaultBootList.setStatus("mandatory")


class _RestartBladeToSMSBootMenu_Type(Integer32):
    """Custom type restartBladeToSMSBootMenu based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_RestartBladeToSMSBootMenu_Type.__name__ = "Integer32"
_RestartBladeToSMSBootMenu_Object = MibTableColumn
restartBladeToSMSBootMenu = _RestartBladeToSMSBootMenu_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 14),
    _RestartBladeToSMSBootMenu_Type()
)
restartBladeToSMSBootMenu.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restartBladeToSMSBootMenu.setStatus("deprecated")


class _BladePowerEnableSMSBootMenu_Type(Integer32):
    """Custom type bladePowerEnableSMSBootMenu based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_BladePowerEnableSMSBootMenu_Type.__name__ = "Integer32"
_BladePowerEnableSMSBootMenu_Object = MibTableColumn
bladePowerEnableSMSBootMenu = _BladePowerEnableSMSBootMenu_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 6, 1, 1, 15),
    _BladePowerEnableSMSBootMenu_Type()
)
bladePowerEnableSMSBootMenu.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladePowerEnableSMSBootMenu.setStatus("mandatory")
_BladeConfiguration_ObjectIdentity = ObjectIdentity
bladeConfiguration = _BladeConfiguration_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7)
)
_BladeConfigurationTable_Object = MibTable
bladeConfigurationTable = _BladeConfigurationTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1)
)
if mibBuilder.loadTexts:
    bladeConfigurationTable.setStatus("mandatory")
_BladeConfigurationEntry_Object = MibTableRow
bladeConfigurationEntry = _BladeConfigurationEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1)
)
bladeConfigurationEntry.setIndexNames(
    (0, "CME-MIB", "configurationIndex"),
)
if mibBuilder.loadTexts:
    bladeConfigurationEntry.setStatus("mandatory")
_ConfigurationIndex_Type = Integer32
_ConfigurationIndex_Object = MibTableColumn
configurationIndex = _ConfigurationIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 1),
    _ConfigurationIndex_Type()
)
configurationIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    configurationIndex.setStatus("mandatory")


class _ConfigurationBladeId_Type(Integer32):
    """Custom type configurationBladeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_ConfigurationBladeId_Type.__name__ = "Integer32"
_ConfigurationBladeId_Object = MibTableColumn
configurationBladeId = _ConfigurationBladeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 2),
    _ConfigurationBladeId_Type()
)
configurationBladeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    configurationBladeId.setStatus("mandatory")


class _ConfigurationBladeExists_Type(Integer32):
    """Custom type configurationBladeExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_ConfigurationBladeExists_Type.__name__ = "Integer32"
_ConfigurationBladeExists_Object = MibTableColumn
configurationBladeExists = _ConfigurationBladeExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 3),
    _ConfigurationBladeExists_Type()
)
configurationBladeExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    configurationBladeExists.setStatus("mandatory")


class _ConfigurationBladePowerState_Type(Integer32):
    """Custom type configurationBladePowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("standby", 3),
          ("hibernate", 4),
          ("unknown", 255))
    )


_ConfigurationBladePowerState_Type.__name__ = "Integer32"
_ConfigurationBladePowerState_Object = MibTableColumn
configurationBladePowerState = _ConfigurationBladePowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 4),
    _ConfigurationBladePowerState_Type()
)
configurationBladePowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    configurationBladePowerState.setStatus("mandatory")
_ConfigurationBladeName_Type = OctetString
_ConfigurationBladeName_Object = MibTableColumn
configurationBladeName = _ConfigurationBladeName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 5),
    _ConfigurationBladeName_Type()
)
configurationBladeName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    configurationBladeName.setStatus("mandatory")


class _ConfigurationBladeActiveBootMode_Type(Integer32):
    """Custom type configurationBladeActiveBootMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("temporary", 1),
          ("permanent", 2),
          ("notApplicable", 255))
    )


_ConfigurationBladeActiveBootMode_Type.__name__ = "Integer32"
_ConfigurationBladeActiveBootMode_Object = MibTableColumn
configurationBladeActiveBootMode = _ConfigurationBladeActiveBootMode_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 7),
    _ConfigurationBladeActiveBootMode_Type()
)
configurationBladeActiveBootMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    configurationBladeActiveBootMode.setStatus("mandatory")


class _ConfigurationBladePendingBootMode_Type(Integer32):
    """Custom type configurationBladePendingBootMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("temporary", 1),
          ("permanent", 2),
          ("notApplicable", 255))
    )


_ConfigurationBladePendingBootMode_Type.__name__ = "Integer32"
_ConfigurationBladePendingBootMode_Object = MibTableColumn
configurationBladePendingBootMode = _ConfigurationBladePendingBootMode_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 8),
    _ConfigurationBladePendingBootMode_Type()
)
configurationBladePendingBootMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    configurationBladePendingBootMode.setStatus("mandatory")


class _ConfigurationBladeAutoPowerOn_Type(Integer32):
    """Custom type configurationBladeAutoPowerOn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("restore", 1),
          ("auto", 2),
          ("manual", 3),
          ("notApplicable", 255))
    )


_ConfigurationBladeAutoPowerOn_Type.__name__ = "Integer32"
_ConfigurationBladeAutoPowerOn_Object = MibTableColumn
configurationBladeAutoPowerOn = _ConfigurationBladeAutoPowerOn_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 9),
    _ConfigurationBladeAutoPowerOn_Type()
)
configurationBladeAutoPowerOn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    configurationBladeAutoPowerOn.setStatus("mandatory")


class _ConfigurationBladePowerOnRestartDelay_Type(Integer32):
    """Custom type configurationBladePowerOnRestartDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 32767),
    )


_ConfigurationBladePowerOnRestartDelay_Type.__name__ = "Integer32"
_ConfigurationBladePowerOnRestartDelay_Object = MibTableColumn
configurationBladePowerOnRestartDelay = _ConfigurationBladePowerOnRestartDelay_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 1, 1, 10),
    _ConfigurationBladePowerOnRestartDelay_Type()
)
configurationBladePowerOnRestartDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    configurationBladePowerOnRestartDelay.setStatus("mandatory")
_BladePowerManagementPolicy_ObjectIdentity = ObjectIdentity
bladePowerManagementPolicy = _BladePowerManagementPolicy_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 2)
)


class _PowerManagementPolicy_Type(Integer32):
    """Custom type powerManagementPolicy based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              16,
              17)
        )
    )
    namedValues = NamedValues(
        *(("power-module-redundancy", 0),
          ("power-module-redundancy-throttle", 1),
          ("basic", 2),
          ("power-source-redundancy", 16),
          ("power-source-redundancy-throttle", 17))
    )


_PowerManagementPolicy_Type.__name__ = "Integer32"
_PowerManagementPolicy_Object = MibScalar
powerManagementPolicy = _PowerManagementPolicy_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 2, 1),
    _PowerManagementPolicy_Type()
)
powerManagementPolicy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    powerManagementPolicy.setStatus("mandatory")


class _AcousticMode_Type(Integer32):
    """Custom type acousticMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("acoustic-quiet-level1", 1),
          ("acoustic-quiet-level2", 2),
          ("acoustic-quiet-level3", 3),
          ("acoustic-quiet-level4", 4),
          ("acoustic-quiet-level5", 5))
    )


_AcousticMode_Type.__name__ = "Integer32"
_AcousticMode_Object = MibScalar
acousticMode = _AcousticMode_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 7, 2, 3),
    _AcousticMode_Type()
)
acousticMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acousticMode.setStatus("mandatory")
_BladeBootCountPowerOnTime_ObjectIdentity = ObjectIdentity
bladeBootCountPowerOnTime = _BladeBootCountPowerOnTime_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 10)
)
_BladeBootCountPowerOnTimeTable_Object = MibTable
bladeBootCountPowerOnTimeTable = _BladeBootCountPowerOnTimeTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 10, 1)
)
if mibBuilder.loadTexts:
    bladeBootCountPowerOnTimeTable.setStatus("mandatory")
_BladeBootCountPowerOnTimeEntry_Object = MibTableRow
bladeBootCountPowerOnTimeEntry = _BladeBootCountPowerOnTimeEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 10, 1, 1)
)
bladeBootCountPowerOnTimeEntry.setIndexNames(
    (0, "CME-MIB", "bootCountPowerOnTimeBladeIndex"),
)
if mibBuilder.loadTexts:
    bladeBootCountPowerOnTimeEntry.setStatus("mandatory")
_BootCountPowerOnTimeBladeIndex_Type = Integer32
_BootCountPowerOnTimeBladeIndex_Object = MibTableColumn
bootCountPowerOnTimeBladeIndex = _BootCountPowerOnTimeBladeIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 10, 1, 1, 1),
    _BootCountPowerOnTimeBladeIndex_Type()
)
bootCountPowerOnTimeBladeIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bootCountPowerOnTimeBladeIndex.setStatus("mandatory")


class _BootCountPowerOnTimeBladeId_Type(Integer32):
    """Custom type bootCountPowerOnTimeBladeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_BootCountPowerOnTimeBladeId_Type.__name__ = "Integer32"
_BootCountPowerOnTimeBladeId_Object = MibTableColumn
bootCountPowerOnTimeBladeId = _BootCountPowerOnTimeBladeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 10, 1, 1, 2),
    _BootCountPowerOnTimeBladeId_Type()
)
bootCountPowerOnTimeBladeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bootCountPowerOnTimeBladeId.setStatus("mandatory")
_BootCountPowerOnTimeBoots_Type = Integer32
_BootCountPowerOnTimeBoots_Object = MibTableColumn
bootCountPowerOnTimeBoots = _BootCountPowerOnTimeBoots_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 10, 1, 1, 3),
    _BootCountPowerOnTimeBoots_Type()
)
bootCountPowerOnTimeBoots.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bootCountPowerOnTimeBoots.setStatus("mandatory")
_BootCountPowerOnTimeSecs_Type = Integer32
_BootCountPowerOnTimeSecs_Object = MibTableColumn
bootCountPowerOnTimeSecs = _BootCountPowerOnTimeSecs_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 10, 1, 1, 4),
    _BootCountPowerOnTimeSecs_Type()
)
bootCountPowerOnTimeSecs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bootCountPowerOnTimeSecs.setStatus("mandatory")
_BladeVlanId_Type = Integer32
_BladeVlanId_Object = MibScalar
bladeVlanId = _BladeVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 11),
    _BladeVlanId_Type()
)
bladeVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeVlanId.setStatus("mandatory")
_BladeNetworkConfiguration_ObjectIdentity = ObjectIdentity
bladeNetworkConfiguration = _BladeNetworkConfiguration_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12)
)
_BladeIPv4ConfigTable_Object = MibTable
bladeIPv4ConfigTable = _BladeIPv4ConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 5)
)
if mibBuilder.loadTexts:
    bladeIPv4ConfigTable.setStatus("mandatory")
_BladeIPv4ConfigEntry_Object = MibTableRow
bladeIPv4ConfigEntry = _BladeIPv4ConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 5, 1)
)
bladeIPv4ConfigEntry.setIndexNames(
    (0, "CME-MIB", "bladeIPv4ConfigIndex"),
    (0, "CME-MIB", "bladeIPv4ConfigPortIndex"),
)
if mibBuilder.loadTexts:
    bladeIPv4ConfigEntry.setStatus("mandatory")
_BladeIPv4ConfigIndex_Type = Integer32
_BladeIPv4ConfigIndex_Object = MibTableColumn
bladeIPv4ConfigIndex = _BladeIPv4ConfigIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 5, 1, 1),
    _BladeIPv4ConfigIndex_Type()
)
bladeIPv4ConfigIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeIPv4ConfigIndex.setStatus("mandatory")
_BladeIPv4ConfigPortIndex_Type = Integer32
_BladeIPv4ConfigPortIndex_Object = MibTableColumn
bladeIPv4ConfigPortIndex = _BladeIPv4ConfigPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 5, 1, 2),
    _BladeIPv4ConfigPortIndex_Type()
)
bladeIPv4ConfigPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeIPv4ConfigPortIndex.setStatus("mandatory")
_BladeIPv4ConfigPortLabel_Type = OctetString
_BladeIPv4ConfigPortLabel_Object = MibTableColumn
bladeIPv4ConfigPortLabel = _BladeIPv4ConfigPortLabel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 5, 1, 3),
    _BladeIPv4ConfigPortLabel_Type()
)
bladeIPv4ConfigPortLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeIPv4ConfigPortLabel.setStatus("mandatory")


class _BladeIPv4ConfigPhysicalLinkStatus_Type(Integer32):
    """Custom type bladeIPv4ConfigPhysicalLinkStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("up", 1),
          ("notApplicable", 255))
    )


_BladeIPv4ConfigPhysicalLinkStatus_Type.__name__ = "Integer32"
_BladeIPv4ConfigPhysicalLinkStatus_Object = MibTableColumn
bladeIPv4ConfigPhysicalLinkStatus = _BladeIPv4ConfigPhysicalLinkStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 5, 1, 4),
    _BladeIPv4ConfigPhysicalLinkStatus_Type()
)
bladeIPv4ConfigPhysicalLinkStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeIPv4ConfigPhysicalLinkStatus.setStatus("mandatory")


class _BladeIPv4ConfigPhysicalLinkState_Type(Integer32):
    """Custom type bladeIPv4ConfigPhysicalLinkState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("up", 1),
          ("loopback", 2),
          ("notApplicable", 255))
    )


_BladeIPv4ConfigPhysicalLinkState_Type.__name__ = "Integer32"
_BladeIPv4ConfigPhysicalLinkState_Object = MibTableColumn
bladeIPv4ConfigPhysicalLinkState = _BladeIPv4ConfigPhysicalLinkState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 5, 1, 5),
    _BladeIPv4ConfigPhysicalLinkState_Type()
)
bladeIPv4ConfigPhysicalLinkState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeIPv4ConfigPhysicalLinkState.setStatus("mandatory")
_BladeIPv4ConfigIPAddr_Type = IpAddress
_BladeIPv4ConfigIPAddr_Object = MibTableColumn
bladeIPv4ConfigIPAddr = _BladeIPv4ConfigIPAddr_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 5, 1, 6),
    _BladeIPv4ConfigIPAddr_Type()
)
bladeIPv4ConfigIPAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeIPv4ConfigIPAddr.setStatus("mandatory")
_BladeIPv4ConfigSubnetMask_Type = IpAddress
_BladeIPv4ConfigSubnetMask_Object = MibTableColumn
bladeIPv4ConfigSubnetMask = _BladeIPv4ConfigSubnetMask_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 5, 1, 7),
    _BladeIPv4ConfigSubnetMask_Type()
)
bladeIPv4ConfigSubnetMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeIPv4ConfigSubnetMask.setStatus("mandatory")
_BladeIPv4ConfigGatewayAddr_Type = IpAddress
_BladeIPv4ConfigGatewayAddr_Object = MibTableColumn
bladeIPv4ConfigGatewayAddr = _BladeIPv4ConfigGatewayAddr_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 5, 1, 8),
    _BladeIPv4ConfigGatewayAddr_Type()
)
bladeIPv4ConfigGatewayAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeIPv4ConfigGatewayAddr.setStatus("mandatory")
_BladeIPv4ConfigVlanId_Type = Integer32
_BladeIPv4ConfigVlanId_Object = MibTableColumn
bladeIPv4ConfigVlanId = _BladeIPv4ConfigVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 5, 1, 9),
    _BladeIPv4ConfigVlanId_Type()
)
bladeIPv4ConfigVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeIPv4ConfigVlanId.setStatus("mandatory")


class _BladeIPv4ConfigDHCPEnable_Type(Integer32):
    """Custom type bladeIPv4ConfigDHCPEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("useStatic", 0),
          ("useDhcp", 1),
          ("tryDhcpThenTryStatic", 2),
          ("notApplicable", 255))
    )


_BladeIPv4ConfigDHCPEnable_Type.__name__ = "Integer32"
_BladeIPv4ConfigDHCPEnable_Object = MibTableColumn
bladeIPv4ConfigDHCPEnable = _BladeIPv4ConfigDHCPEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 5, 1, 10),
    _BladeIPv4ConfigDHCPEnable_Type()
)
bladeIPv4ConfigDHCPEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeIPv4ConfigDHCPEnable.setStatus("mandatory")
_BladeIPv4ConfigMACAddr_Type = OctetString
_BladeIPv4ConfigMACAddr_Object = MibTableColumn
bladeIPv4ConfigMACAddr = _BladeIPv4ConfigMACAddr_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 5, 1, 11),
    _BladeIPv4ConfigMACAddr_Type()
)
bladeIPv4ConfigMACAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeIPv4ConfigMACAddr.setStatus("mandatory")
_BladeIPv6Config_ObjectIdentity = ObjectIdentity
bladeIPv6Config = _BladeIPv6Config_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10)
)
_BladeIPv6ConfigTable_Object = MibTable
bladeIPv6ConfigTable = _BladeIPv6ConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 1)
)
if mibBuilder.loadTexts:
    bladeIPv6ConfigTable.setStatus("mandatory")
_BladeIPv6ConfigEntry_Object = MibTableRow
bladeIPv6ConfigEntry = _BladeIPv6ConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 1, 1)
)
bladeIPv6ConfigEntry.setIndexNames(
    (0, "CME-MIB", "bladeIPv6ConfigIndex"),
    (0, "CME-MIB", "bladeIPv6ConfigPortIndex"),
)
if mibBuilder.loadTexts:
    bladeIPv6ConfigEntry.setStatus("mandatory")
_BladeIPv6ConfigIndex_Type = Integer32
_BladeIPv6ConfigIndex_Object = MibTableColumn
bladeIPv6ConfigIndex = _BladeIPv6ConfigIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 1, 1, 1),
    _BladeIPv6ConfigIndex_Type()
)
bladeIPv6ConfigIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeIPv6ConfigIndex.setStatus("mandatory")
_BladeIPv6ConfigPortIndex_Type = Integer32
_BladeIPv6ConfigPortIndex_Object = MibTableColumn
bladeIPv6ConfigPortIndex = _BladeIPv6ConfigPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 1, 1, 2),
    _BladeIPv6ConfigPortIndex_Type()
)
bladeIPv6ConfigPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeIPv6ConfigPortIndex.setStatus("mandatory")


class _BladeIPv6ConfigEnabled_Type(Integer32):
    """Custom type bladeIPv6ConfigEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_BladeIPv6ConfigEnabled_Type.__name__ = "Integer32"
_BladeIPv6ConfigEnabled_Object = MibTableColumn
bladeIPv6ConfigEnabled = _BladeIPv6ConfigEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 1, 1, 3),
    _BladeIPv6ConfigEnabled_Type()
)
bladeIPv6ConfigEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeIPv6ConfigEnabled.setStatus("mandatory")


class _BladeIPv6ConfigStatic_Type(Integer32):
    """Custom type bladeIPv6ConfigStatic based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_BladeIPv6ConfigStatic_Type.__name__ = "Integer32"
_BladeIPv6ConfigStatic_Object = MibTableColumn
bladeIPv6ConfigStatic = _BladeIPv6ConfigStatic_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 1, 1, 4),
    _BladeIPv6ConfigStatic_Type()
)
bladeIPv6ConfigStatic.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeIPv6ConfigStatic.setStatus("mandatory")


class _BladeDHCPv6ConfigEnabled_Type(Integer32):
    """Custom type bladeDHCPv6ConfigEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_BladeDHCPv6ConfigEnabled_Type.__name__ = "Integer32"
_BladeDHCPv6ConfigEnabled_Object = MibTableColumn
bladeDHCPv6ConfigEnabled = _BladeDHCPv6ConfigEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 1, 1, 5),
    _BladeDHCPv6ConfigEnabled_Type()
)
bladeDHCPv6ConfigEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeDHCPv6ConfigEnabled.setStatus("mandatory")


class _BladeIPv6ConfigStatelessEnabled_Type(Integer32):
    """Custom type bladeIPv6ConfigStatelessEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_BladeIPv6ConfigStatelessEnabled_Type.__name__ = "Integer32"
_BladeIPv6ConfigStatelessEnabled_Object = MibTableColumn
bladeIPv6ConfigStatelessEnabled = _BladeIPv6ConfigStatelessEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 1, 1, 6),
    _BladeIPv6ConfigStatelessEnabled_Type()
)
bladeIPv6ConfigStatelessEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeIPv6ConfigStatelessEnabled.setStatus("mandatory")
_BladeIPv6AddressTable_Object = MibTable
bladeIPv6AddressTable = _BladeIPv6AddressTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 2)
)
if mibBuilder.loadTexts:
    bladeIPv6AddressTable.setStatus("mandatory")
_BladeIPv6AddressEntry_Object = MibTableRow
bladeIPv6AddressEntry = _BladeIPv6AddressEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 2, 1)
)
bladeIPv6AddressEntry.setIndexNames(
    (0, "CME-MIB", "bladeIPv6AddressIndex"),
    (0, "CME-MIB", "bladeIPv6AddressPortIndex"),
    (0, "CME-MIB", "bladeIPv6AddressEntryIndex"),
)
if mibBuilder.loadTexts:
    bladeIPv6AddressEntry.setStatus("mandatory")
_BladeIPv6AddressIndex_Type = Integer32
_BladeIPv6AddressIndex_Object = MibTableColumn
bladeIPv6AddressIndex = _BladeIPv6AddressIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 2, 1, 1),
    _BladeIPv6AddressIndex_Type()
)
bladeIPv6AddressIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeIPv6AddressIndex.setStatus("mandatory")
_BladeIPv6AddressPortIndex_Type = Integer32
_BladeIPv6AddressPortIndex_Object = MibTableColumn
bladeIPv6AddressPortIndex = _BladeIPv6AddressPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 2, 1, 2),
    _BladeIPv6AddressPortIndex_Type()
)
bladeIPv6AddressPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeIPv6AddressPortIndex.setStatus("mandatory")
_BladeIPv6AddressEntryIndex_Type = Integer32
_BladeIPv6AddressEntryIndex_Object = MibTableColumn
bladeIPv6AddressEntryIndex = _BladeIPv6AddressEntryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 2, 1, 3),
    _BladeIPv6AddressEntryIndex_Type()
)
bladeIPv6AddressEntryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeIPv6AddressEntryIndex.setStatus("mandatory")


class _BladeIPv6AddressType_Type(Integer32):
    """Custom type bladeIPv6AddressType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("active-static", 1),
          ("dhcp6", 2),
          ("link-local", 3),
          ("autconfig", 4),
          ("current", 5))
    )


_BladeIPv6AddressType_Type.__name__ = "Integer32"
_BladeIPv6AddressType_Object = MibTableColumn
bladeIPv6AddressType = _BladeIPv6AddressType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 2, 1, 4),
    _BladeIPv6AddressType_Type()
)
bladeIPv6AddressType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladeIPv6AddressType.setStatus("mandatory")
_BladeIPv6Address_Type = InetAddressIPv6
_BladeIPv6Address_Object = MibTableColumn
bladeIPv6Address = _BladeIPv6Address_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 2, 1, 5),
    _BladeIPv6Address_Type()
)
bladeIPv6Address.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeIPv6Address.setStatus("mandatory")


class _BladeIPv6AddressPrefixLen_Type(Integer32):
    """Custom type bladeIPv6AddressPrefixLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_BladeIPv6AddressPrefixLen_Type.__name__ = "Integer32"
_BladeIPv6AddressPrefixLen_Object = MibTableColumn
bladeIPv6AddressPrefixLen = _BladeIPv6AddressPrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 2, 1, 6),
    _BladeIPv6AddressPrefixLen_Type()
)
bladeIPv6AddressPrefixLen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeIPv6AddressPrefixLen.setStatus("mandatory")
_BladeIPv6AddressDefaultRoute_Type = InetAddressIPv6
_BladeIPv6AddressDefaultRoute_Object = MibTableColumn
bladeIPv6AddressDefaultRoute = _BladeIPv6AddressDefaultRoute_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 12, 10, 2, 1, 7),
    _BladeIPv6AddressDefaultRoute_Type()
)
bladeIPv6AddressDefaultRoute.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladeIPv6AddressDefaultRoute.setStatus("mandatory")
_BladeBayDataTable_Object = MibTable
bladeBayDataTable = _BladeBayDataTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 13)
)
if mibBuilder.loadTexts:
    bladeBayDataTable.setStatus("mandatory")
_BladeBayDataEntry_Object = MibTableRow
bladeBayDataEntry = _BladeBayDataEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 13, 1)
)
bladeBayDataEntry.setIndexNames(
    (0, "CME-MIB", "bayDataIndex"),
)
if mibBuilder.loadTexts:
    bladeBayDataEntry.setStatus("mandatory")
_BayDataIndex_Type = Integer32
_BayDataIndex_Object = MibTableColumn
bayDataIndex = _BayDataIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 13, 1, 1),
    _BayDataIndex_Type()
)
bayDataIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bayDataIndex.setStatus("mandatory")


class _BayDataBladeId_Type(Integer32):
    """Custom type bayDataBladeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_BayDataBladeId_Type.__name__ = "Integer32"
_BayDataBladeId_Object = MibTableColumn
bayDataBladeId = _BayDataBladeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 13, 1, 2),
    _BayDataBladeId_Type()
)
bayDataBladeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bayDataBladeId.setStatus("mandatory")


class _BayDataBladeExists_Type(Integer32):
    """Custom type bayDataBladeExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_BayDataBladeExists_Type.__name__ = "Integer32"
_BayDataBladeExists_Object = MibTableColumn
bayDataBladeExists = _BayDataBladeExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 13, 1, 3),
    _BayDataBladeExists_Type()
)
bayDataBladeExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bayDataBladeExists.setStatus("mandatory")


class _BayDataBladePowerState_Type(Integer32):
    """Custom type bayDataBladePowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("standby", 3),
          ("hibernate", 4),
          ("unknown", 255))
    )


_BayDataBladePowerState_Type.__name__ = "Integer32"
_BayDataBladePowerState_Object = MibTableColumn
bayDataBladePowerState = _BayDataBladePowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 13, 1, 4),
    _BayDataBladePowerState_Type()
)
bayDataBladePowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bayDataBladePowerState.setStatus("mandatory")
_BayDataBladeName_Type = OctetString
_BayDataBladeName_Object = MibTableColumn
bayDataBladeName = _BayDataBladeName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 13, 1, 5),
    _BayDataBladeName_Type()
)
bayDataBladeName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bayDataBladeName.setStatus("mandatory")
_BayData_Type = OctetString
_BayData_Object = MibTableColumn
bayData = _BayData_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 13, 1, 6),
    _BayData_Type()
)
bayData.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bayData.setStatus("mandatory")


class _BayDataBladeStatus_Type(Integer32):
    """Custom type bayDataBladeStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("supported", 0),
          ("bsmp", 1),
          ("notPresent", 2),
          ("discovering", 3),
          ("notApplicable", 255))
    )


_BayDataBladeStatus_Type.__name__ = "Integer32"
_BayDataBladeStatus_Object = MibTableColumn
bayDataBladeStatus = _BayDataBladeStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 13, 1, 7),
    _BayDataBladeStatus_Type()
)
bayDataBladeStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bayDataBladeStatus.setStatus("mandatory")
_BladeSPEthOverUSBInterface_ObjectIdentity = ObjectIdentity
bladeSPEthOverUSBInterface = _BladeSPEthOverUSBInterface_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 14)
)
_SpEthOverUSBInterfaceTable_Object = MibTable
spEthOverUSBInterfaceTable = _SpEthOverUSBInterfaceTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 14, 1)
)
if mibBuilder.loadTexts:
    spEthOverUSBInterfaceTable.setStatus("mandatory")
_SpEthOverUSBInterfaceEntry_Object = MibTableRow
spEthOverUSBInterfaceEntry = _SpEthOverUSBInterfaceEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 14, 1, 1)
)
spEthOverUSBInterfaceEntry.setIndexNames(
    (0, "CME-MIB", "spEthOverUSBInterfaceIndex"),
)
if mibBuilder.loadTexts:
    spEthOverUSBInterfaceEntry.setStatus("mandatory")
_SpEthOverUSBInterfaceIndex_Type = Integer32
_SpEthOverUSBInterfaceIndex_Object = MibTableColumn
spEthOverUSBInterfaceIndex = _SpEthOverUSBInterfaceIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 14, 1, 1, 1),
    _SpEthOverUSBInterfaceIndex_Type()
)
spEthOverUSBInterfaceIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    spEthOverUSBInterfaceIndex.setStatus("mandatory")
_SpEthOverUSBInterfaceBladeId_Type = OctetString
_SpEthOverUSBInterfaceBladeId_Object = MibTableColumn
spEthOverUSBInterfaceBladeId = _SpEthOverUSBInterfaceBladeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 14, 1, 1, 2),
    _SpEthOverUSBInterfaceBladeId_Type()
)
spEthOverUSBInterfaceBladeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    spEthOverUSBInterfaceBladeId.setStatus("mandatory")


class _SpEthOverUSBInterfaceBladeExists_Type(Integer32):
    """Custom type spEthOverUSBInterfaceBladeExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_SpEthOverUSBInterfaceBladeExists_Type.__name__ = "Integer32"
_SpEthOverUSBInterfaceBladeExists_Object = MibTableColumn
spEthOverUSBInterfaceBladeExists = _SpEthOverUSBInterfaceBladeExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 14, 1, 1, 3),
    _SpEthOverUSBInterfaceBladeExists_Type()
)
spEthOverUSBInterfaceBladeExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    spEthOverUSBInterfaceBladeExists.setStatus("mandatory")
_SpEthOverUSBInterfaceBladeName_Type = OctetString
_SpEthOverUSBInterfaceBladeName_Object = MibTableColumn
spEthOverUSBInterfaceBladeName = _SpEthOverUSBInterfaceBladeName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 14, 1, 1, 6),
    _SpEthOverUSBInterfaceBladeName_Type()
)
spEthOverUSBInterfaceBladeName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    spEthOverUSBInterfaceBladeName.setStatus("mandatory")


class _SpEthOverUSBInterfaceEnable_Type(Integer32):
    """Custom type spEthOverUSBInterfaceEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1),
          ("notApplicable", 255))
    )


_SpEthOverUSBInterfaceEnable_Type.__name__ = "Integer32"
_SpEthOverUSBInterfaceEnable_Object = MibTableColumn
spEthOverUSBInterfaceEnable = _SpEthOverUSBInterfaceEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 14, 1, 1, 9),
    _SpEthOverUSBInterfaceEnable_Type()
)
spEthOverUSBInterfaceEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    spEthOverUSBInterfaceEnable.setStatus("mandatory")
_BootDeviceInfoTable_Object = MibTable
bootDeviceInfoTable = _BootDeviceInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 15)
)
if mibBuilder.loadTexts:
    bootDeviceInfoTable.setStatus("mandatory")
_BootDeviceInfoEntry_Object = MibTableRow
bootDeviceInfoEntry = _BootDeviceInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 15, 1)
)
bootDeviceInfoEntry.setIndexNames(
    (0, "CME-MIB", "bootInfoTopologyIndex"),
    (0, "CME-MIB", "bootDeviceIndex"),
)
if mibBuilder.loadTexts:
    bootDeviceInfoEntry.setStatus("mandatory")


class _BootInfoTopologyIndex_Type(OctetString):
    """Custom type bootInfoTopologyIndex based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_BootInfoTopologyIndex_Type.__name__ = "OctetString"
_BootInfoTopologyIndex_Object = MibTableColumn
bootInfoTopologyIndex = _BootInfoTopologyIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 15, 1, 1),
    _BootInfoTopologyIndex_Type()
)
bootInfoTopologyIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bootInfoTopologyIndex.setStatus("mandatory")


class _BootDeviceIndex_Type(Integer32):
    """Custom type bootDeviceIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_BootDeviceIndex_Type.__name__ = "Integer32"
_BootDeviceIndex_Object = MibTableColumn
bootDeviceIndex = _BootDeviceIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 15, 1, 2),
    _BootDeviceIndex_Type()
)
bootDeviceIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bootDeviceIndex.setStatus("mandatory")
_BootDeviceId_Type = OctetString
_BootDeviceId_Object = MibTableColumn
bootDeviceId = _BootDeviceId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 15, 1, 3),
    _BootDeviceId_Type()
)
bootDeviceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bootDeviceId.setStatus("mandatory")


class _BootDeviceActive_Type(Integer32):
    """Custom type bootDeviceActive based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_BootDeviceActive_Type.__name__ = "Integer32"
_BootDeviceActive_Object = MibTableColumn
bootDeviceActive = _BootDeviceActive_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 15, 1, 4),
    _BootDeviceActive_Type()
)
bootDeviceActive.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bootDeviceActive.setStatus("mandatory")


class _BootDevicePresence_Type(Integer32):
    """Custom type bootDevicePresence based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_BootDevicePresence_Type.__name__ = "Integer32"
_BootDevicePresence_Object = MibTableColumn
bootDevicePresence = _BootDevicePresence_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 15, 1, 5),
    _BootDevicePresence_Type()
)
bootDevicePresence.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bootDevicePresence.setStatus("mandatory")
_BootDeviceLabel_Type = OctetString
_BootDeviceLabel_Object = MibTableColumn
bootDeviceLabel = _BootDeviceLabel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 15, 1, 6),
    _BootDeviceLabel_Type()
)
bootDeviceLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bootDeviceLabel.setStatus("mandatory")
_BootDeviceUserLabel_Type = OctetString
_BootDeviceUserLabel_Object = MibTableColumn
bootDeviceUserLabel = _BootDeviceUserLabel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 15, 1, 7),
    _BootDeviceUserLabel_Type()
)
bootDeviceUserLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bootDeviceUserLabel.setStatus("mandatory")


class _BootDeviceOrder_Type(Integer32):
    """Custom type bootDeviceOrder based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_BootDeviceOrder_Type.__name__ = "Integer32"
_BootDeviceOrder_Object = MibTableColumn
bootDeviceOrder = _BootDeviceOrder_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 15, 1, 8),
    _BootDeviceOrder_Type()
)
bootDeviceOrder.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bootDeviceOrder.setStatus("mandatory")
_BootSequenceInfoTable_Object = MibTable
bootSequenceInfoTable = _BootSequenceInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 16)
)
if mibBuilder.loadTexts:
    bootSequenceInfoTable.setStatus("mandatory")
_BootSequenceInfoEntry_Object = MibTableRow
bootSequenceInfoEntry = _BootSequenceInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 16, 1)
)
bootSequenceInfoEntry.setIndexNames(
    (0, "CME-MIB", "bootSequenceInfoTopologyIndex"),
)
if mibBuilder.loadTexts:
    bootSequenceInfoEntry.setStatus("mandatory")


class _BootSequenceInfoTopologyIndex_Type(OctetString):
    """Custom type bootSequenceInfoTopologyIndex based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_BootSequenceInfoTopologyIndex_Type.__name__ = "OctetString"
_BootSequenceInfoTopologyIndex_Object = MibTableColumn
bootSequenceInfoTopologyIndex = _BootSequenceInfoTopologyIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 16, 1, 1),
    _BootSequenceInfoTopologyIndex_Type()
)
bootSequenceInfoTopologyIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bootSequenceInfoTopologyIndex.setStatus("mandatory")


class _BootSequenceInfoMaxBootDevices_Type(Integer32):
    """Custom type bootSequenceInfoMaxBootDevices based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_BootSequenceInfoMaxBootDevices_Type.__name__ = "Integer32"
_BootSequenceInfoMaxBootDevices_Object = MibTableColumn
bootSequenceInfoMaxBootDevices = _BootSequenceInfoMaxBootDevices_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 16, 1, 2),
    _BootSequenceInfoMaxBootDevices_Type()
)
bootSequenceInfoMaxBootDevices.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bootSequenceInfoMaxBootDevices.setStatus("mandatory")
_BootSequenceInfoBootSequence_Type = OctetString
_BootSequenceInfoBootSequence_Object = MibTableColumn
bootSequenceInfoBootSequence = _BootSequenceInfoBootSequence_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 1, 16, 1, 3),
    _BootSequenceInfoBootSequence_Type()
)
bootSequenceInfoBootSequence.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bootSequenceInfoBootSequence.setStatus("mandatory")
_SwitchModule_ObjectIdentity = ObjectIdentity
switchModule = _SwitchModule_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3)
)
_SwitchModuleControl_ObjectIdentity = ObjectIdentity
switchModuleControl = _SwitchModuleControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1)
)
_SmControlTable_Object = MibTable
smControlTable = _SmControlTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1)
)
if mibBuilder.loadTexts:
    smControlTable.setStatus("mandatory")
_SmControlEntry_Object = MibTableRow
smControlEntry = _SmControlEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1)
)
smControlEntry.setIndexNames(
    (0, "CME-MIB", "smControlIndex"),
)
if mibBuilder.loadTexts:
    smControlEntry.setStatus("mandatory")
_SmControlIndex_Type = Integer32
_SmControlIndex_Object = MibTableColumn
smControlIndex = _SmControlIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 1),
    _SmControlIndex_Type()
)
smControlIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smControlIndex.setStatus("mandatory")


class _SwitchModuleControlId_Type(Integer32):
    """Custom type switchModuleControlId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("module1", 1),
          ("module2", 2),
          ("module3", 3),
          ("module4", 4),
          ("module5", 5),
          ("module6", 6),
          ("module7", 7),
          ("module8", 8),
          ("module9", 9),
          ("module10", 10))
    )


_SwitchModuleControlId_Type.__name__ = "Integer32"
_SwitchModuleControlId_Object = MibTableColumn
switchModuleControlId = _SwitchModuleControlId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 2),
    _SwitchModuleControlId_Type()
)
switchModuleControlId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    switchModuleControlId.setStatus("mandatory")


class _SmPostResultsAvailable_Type(Integer32):
    """Custom type smPostResultsAvailable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_SmPostResultsAvailable_Type.__name__ = "Integer32"
_SmPostResultsAvailable_Object = MibTableColumn
smPostResultsAvailable = _SmPostResultsAvailable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 3),
    _SmPostResultsAvailable_Type()
)
smPostResultsAvailable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smPostResultsAvailable.setStatus("mandatory")
_SmPostResultsValue_Type = OctetString
_SmPostResultsValue_Object = MibTableColumn
smPostResultsValue = _SmPostResultsValue_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 4),
    _SmPostResultsValue_Type()
)
smPostResultsValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smPostResultsValue.setStatus("mandatory")


class _SwitchModuleMemDiagEnableDisable_Type(Integer32):
    """Custom type switchModuleMemDiagEnableDisable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 0),
          ("disabled", 1))
    )


_SwitchModuleMemDiagEnableDisable_Type.__name__ = "Integer32"
_SwitchModuleMemDiagEnableDisable_Object = MibTableColumn
switchModuleMemDiagEnableDisable = _SwitchModuleMemDiagEnableDisable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 5),
    _SwitchModuleMemDiagEnableDisable_Type()
)
switchModuleMemDiagEnableDisable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    switchModuleMemDiagEnableDisable.setStatus("deprecated")


class _SmCfgCtrlEnableDisable_Type(Integer32):
    """Custom type smCfgCtrlEnableDisable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SmCfgCtrlEnableDisable_Type.__name__ = "Integer32"
_SmCfgCtrlEnableDisable_Object = MibTableColumn
smCfgCtrlEnableDisable = _SmCfgCtrlEnableDisable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 6),
    _SmCfgCtrlEnableDisable_Type()
)
smCfgCtrlEnableDisable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smCfgCtrlEnableDisable.setStatus("mandatory")


class _SmExtEthPortsEnableDisable_Type(Integer32):
    """Custom type smExtEthPortsEnableDisable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SmExtEthPortsEnableDisable_Type.__name__ = "Integer32"
_SmExtEthPortsEnableDisable_Object = MibTableColumn
smExtEthPortsEnableDisable = _SmExtEthPortsEnableDisable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 7),
    _SmExtEthPortsEnableDisable_Type()
)
smExtEthPortsEnableDisable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smExtEthPortsEnableDisable.setStatus("mandatory")


class _SmCfgCtrlOnResetEnableDisable_Type(Integer32):
    """Custom type smCfgCtrlOnResetEnableDisable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 0),
          ("disabled", 1))
    )


_SmCfgCtrlOnResetEnableDisable_Type.__name__ = "Integer32"
_SmCfgCtrlOnResetEnableDisable_Object = MibTableColumn
smCfgCtrlOnResetEnableDisable = _SmCfgCtrlOnResetEnableDisable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 9),
    _SmCfgCtrlOnResetEnableDisable_Type()
)
smCfgCtrlOnResetEnableDisable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smCfgCtrlOnResetEnableDisable.setStatus("mandatory")


class _SmHealthState_Type(Integer32):
    """Custom type smHealthState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("good", 1),
          ("warning", 2),
          ("bad", 3))
    )


_SmHealthState_Type.__name__ = "Integer32"
_SmHealthState_Object = MibTableColumn
smHealthState = _SmHealthState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 15),
    _SmHealthState_Type()
)
smHealthState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smHealthState.setStatus("mandatory")


class _SmPMState_Type(Integer32):
    """Custom type smPMState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("pending", 1),
          ("attention", 2),
          ("active", 3),
          ("notApplicable", 255))
    )


_SmPMState_Type.__name__ = "Integer32"
_SmPMState_Object = MibTableColumn
smPMState = _SmPMState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 16),
    _SmPMState_Type()
)
smPMState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smPMState.setStatus("mandatory")


class _SmPMCtrlEnableDisable_Type(Integer32):
    """Custom type smPMCtrlEnableDisable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SmPMCtrlEnableDisable_Type.__name__ = "Integer32"
_SmPMCtrlEnableDisable_Object = MibTableColumn
smPMCtrlEnableDisable = _SmPMCtrlEnableDisable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 17),
    _SmPMCtrlEnableDisable_Type()
)
smPMCtrlEnableDisable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smPMCtrlEnableDisable.setStatus("mandatory")
_SmIOCompatibility_Type = OctetString
_SmIOCompatibility_Object = MibTableColumn
smIOCompatibility = _SmIOCompatibility_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 1, 1, 18),
    _SmIOCompatibility_Type()
)
smIOCompatibility.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smIOCompatibility.setStatus("mandatory")
_SmPingTable_Object = MibTable
smPingTable = _SmPingTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 2)
)
if mibBuilder.loadTexts:
    smPingTable.setStatus("mandatory")
_SmPingEntry_Object = MibTableRow
smPingEntry = _SmPingEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 2, 1)
)
smPingEntry.setIndexNames(
    (0, "CME-MIB", "smPingIndex"),
    (0, "CME-MIB", "smPingAddressEntryIndex"),
)
if mibBuilder.loadTexts:
    smPingEntry.setStatus("mandatory")
_SmPingIndex_Type = Integer32
_SmPingIndex_Object = MibTableColumn
smPingIndex = _SmPingIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 2, 1, 1),
    _SmPingIndex_Type()
)
smPingIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smPingIndex.setStatus("mandatory")
_SmPingAddressEntryIndex_Type = Integer32
_SmPingAddressEntryIndex_Object = MibTableColumn
smPingAddressEntryIndex = _SmPingAddressEntryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 2, 1, 2),
    _SmPingAddressEntryIndex_Type()
)
smPingAddressEntryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smPingAddressEntryIndex.setStatus("mandatory")
_SmPingAddress_Type = OctetString
_SmPingAddress_Object = MibTableColumn
smPingAddress = _SmPingAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 2, 1, 3),
    _SmPingAddress_Type()
)
smPingAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smPingAddress.setStatus("mandatory")


class _SmPingAddressExecute_Type(Integer32):
    """Custom type smPingAddressExecute based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_SmPingAddressExecute_Type.__name__ = "Integer32"
_SmPingAddressExecute_Object = MibTableColumn
smPingAddressExecute = _SmPingAddressExecute_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 2, 1, 4),
    _SmPingAddressExecute_Type()
)
smPingAddressExecute.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smPingAddressExecute.setStatus("mandatory")
_SmPowerRestartTable_Object = MibTable
smPowerRestartTable = _SmPowerRestartTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7)
)
if mibBuilder.loadTexts:
    smPowerRestartTable.setStatus("mandatory")
_SmPowerRestartEntry_Object = MibTableRow
smPowerRestartEntry = _SmPowerRestartEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1)
)
smPowerRestartEntry.setIndexNames(
    (0, "CME-MIB", "smPowerRestartIndex"),
)
if mibBuilder.loadTexts:
    smPowerRestartEntry.setStatus("mandatory")
_SmPowerRestartIndex_Type = Integer32
_SmPowerRestartIndex_Object = MibTableColumn
smPowerRestartIndex = _SmPowerRestartIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 1),
    _SmPowerRestartIndex_Type()
)
smPowerRestartIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smPowerRestartIndex.setStatus("mandatory")


class _SmPowerRestartId_Type(Integer32):
    """Custom type smPowerRestartId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("module1", 1),
          ("module2", 2),
          ("module3", 3),
          ("module4", 4),
          ("module5", 5),
          ("module6", 6),
          ("module7", 7),
          ("module8", 8),
          ("module9", 9),
          ("module10", 10))
    )


_SmPowerRestartId_Type.__name__ = "Integer32"
_SmPowerRestartId_Object = MibTableColumn
smPowerRestartId = _SmPowerRestartId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 2),
    _SmPowerRestartId_Type()
)
smPowerRestartId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smPowerRestartId.setStatus("mandatory")


class _SmSwitchExists_Type(Integer32):
    """Custom type smSwitchExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_SmSwitchExists_Type.__name__ = "Integer32"
_SmSwitchExists_Object = MibTableColumn
smSwitchExists = _SmSwitchExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 3),
    _SmSwitchExists_Type()
)
smSwitchExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smSwitchExists.setStatus("mandatory")
_SmMACAddress_Type = OctetString
_SmMACAddress_Object = MibTableColumn
smMACAddress = _SmMACAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 5),
    _SmMACAddress_Type()
)
smMACAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smMACAddress.setStatus("mandatory")
_SmIPAddress_Type = IpAddress
_SmIPAddress_Object = MibTableColumn
smIPAddress = _SmIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 6),
    _SmIPAddress_Type()
)
smIPAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smIPAddress.setStatus("mandatory")


class _SwitchModulePowerOnOff_Type(Integer32):
    """Custom type switchModulePowerOnOff based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("poweroff", 0),
          ("poweron", 1),
          ("shutdownInProgress", 2))
    )


_SwitchModulePowerOnOff_Type.__name__ = "Integer32"
_SwitchModulePowerOnOff_Object = MibTableColumn
switchModulePowerOnOff = _SwitchModulePowerOnOff_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 7),
    _SwitchModulePowerOnOff_Type()
)
switchModulePowerOnOff.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    switchModulePowerOnOff.setStatus("mandatory")


class _SmReset_Type(Integer32):
    """Custom type smReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_SmReset_Type.__name__ = "Integer32"
_SmReset_Object = MibTableColumn
smReset = _SmReset_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 8),
    _SmReset_Type()
)
smReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smReset.setStatus("mandatory")


class _SmResetToDefault_Type(Integer32):
    """Custom type smResetToDefault based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_SmResetToDefault_Type.__name__ = "Integer32"
_SmResetToDefault_Object = MibTableColumn
smResetToDefault = _SmResetToDefault_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 9),
    _SmResetToDefault_Type()
)
smResetToDefault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smResetToDefault.setStatus("mandatory")


class _SmRestartAndRunStdDiag_Type(Integer32):
    """Custom type smRestartAndRunStdDiag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_SmRestartAndRunStdDiag_Type.__name__ = "Integer32"
_SmRestartAndRunStdDiag_Object = MibTableColumn
smRestartAndRunStdDiag = _SmRestartAndRunStdDiag_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 10),
    _SmRestartAndRunStdDiag_Type()
)
smRestartAndRunStdDiag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smRestartAndRunStdDiag.setStatus("mandatory")


class _SmRestartAndRunExtDiag_Type(Integer32):
    """Custom type smRestartAndRunExtDiag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_SmRestartAndRunExtDiag_Type.__name__ = "Integer32"
_SmRestartAndRunExtDiag_Object = MibTableColumn
smRestartAndRunExtDiag = _SmRestartAndRunExtDiag_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 11),
    _SmRestartAndRunExtDiag_Type()
)
smRestartAndRunExtDiag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smRestartAndRunExtDiag.setStatus("mandatory")


class _SmRestartAndRunFullDiag_Type(Integer32):
    """Custom type smRestartAndRunFullDiag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_SmRestartAndRunFullDiag_Type.__name__ = "Integer32"
_SmRestartAndRunFullDiag_Object = MibTableColumn
smRestartAndRunFullDiag = _SmRestartAndRunFullDiag_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 12),
    _SmRestartAndRunFullDiag_Type()
)
smRestartAndRunFullDiag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smRestartAndRunFullDiag.setStatus("mandatory")


class _SmPowerOnRestartDelay_Type(Integer32):
    """Custom type smPowerOnRestartDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 32767),
    )


_SmPowerOnRestartDelay_Type.__name__ = "Integer32"
_SmPowerOnRestartDelay_Object = MibTableColumn
smPowerOnRestartDelay = _SmPowerOnRestartDelay_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 15),
    _SmPowerOnRestartDelay_Type()
)
smPowerOnRestartDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smPowerOnRestartDelay.setStatus("mandatory")
_SmSwitchWidth_Type = Integer32
_SmSwitchWidth_Object = MibTableColumn
smSwitchWidth = _SmSwitchWidth_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 21),
    _SmSwitchWidth_Type()
)
smSwitchWidth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smSwitchWidth.setStatus("mandatory")
_SmManufacturingID_Type = OctetString
_SmManufacturingID_Object = MibTableColumn
smManufacturingID = _SmManufacturingID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 22),
    _SmManufacturingID_Type()
)
smManufacturingID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smManufacturingID.setStatus("mandatory")


class _SmStackingModeState_Type(Integer32):
    """Custom type smStackingModeState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("standby", 0),
          ("member", 1),
          ("master", 2),
          ("notApplicable", 255))
    )


_SmStackingModeState_Type.__name__ = "Integer32"
_SmStackingModeState_Object = MibTableColumn
smStackingModeState = _SmStackingModeState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 23),
    _SmStackingModeState_Type()
)
smStackingModeState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smStackingModeState.setStatus("mandatory")
_SmStackingModeInfo_Type = OctetString
_SmStackingModeInfo_Object = MibTableColumn
smStackingModeInfo = _SmStackingModeInfo_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 7, 1, 24),
    _SmStackingModeInfo_Type()
)
smStackingModeInfo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smStackingModeInfo.setStatus("mandatory")
_SmIOCompatibilityTable_Object = MibTable
smIOCompatibilityTable = _SmIOCompatibilityTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 10)
)
if mibBuilder.loadTexts:
    smIOCompatibilityTable.setStatus("mandatory")
_SmIOCompatibilityEntry_Object = MibTableRow
smIOCompatibilityEntry = _SmIOCompatibilityEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 10, 1)
)
smIOCompatibilityEntry.setIndexNames(
    (0, "CME-MIB", "smIOCompatibilityIndex"),
)
if mibBuilder.loadTexts:
    smIOCompatibilityEntry.setStatus("mandatory")
_SmIOCompatibilityIndex_Type = Integer32
_SmIOCompatibilityIndex_Object = MibTableColumn
smIOCompatibilityIndex = _SmIOCompatibilityIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 10, 1, 1),
    _SmIOCompatibilityIndex_Type()
)
smIOCompatibilityIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smIOCompatibilityIndex.setStatus("mandatory")


class _SmIOCompatibilityId_Type(Integer32):
    """Custom type smIOCompatibilityId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("module1", 1),
          ("module2", 2),
          ("module3", 3),
          ("module4", 4),
          ("module5", 5),
          ("module6", 6),
          ("module7", 7),
          ("module8", 8),
          ("module9", 9),
          ("module10", 10))
    )


_SmIOCompatibilityId_Type.__name__ = "Integer32"
_SmIOCompatibilityId_Object = MibTableColumn
smIOCompatibilityId = _SmIOCompatibilityId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 10, 1, 2),
    _SmIOCompatibilityId_Type()
)
smIOCompatibilityId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smIOCompatibilityId.setStatus("mandatory")
_SmIOCompatibilityModuleBay_Type = OctetString
_SmIOCompatibilityModuleBay_Object = MibTableColumn
smIOCompatibilityModuleBay = _SmIOCompatibilityModuleBay_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 10, 1, 3),
    _SmIOCompatibilityModuleBay_Type()
)
smIOCompatibilityModuleBay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smIOCompatibilityModuleBay.setStatus("mandatory")
_SmIOCompatibilityModulePower_Type = OctetString
_SmIOCompatibilityModulePower_Object = MibTableColumn
smIOCompatibilityModulePower = _SmIOCompatibilityModulePower_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 10, 1, 4),
    _SmIOCompatibilityModulePower_Type()
)
smIOCompatibilityModulePower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smIOCompatibilityModulePower.setStatus("mandatory")
_SmIOCompatibilityModuleFabricType_Type = OctetString
_SmIOCompatibilityModuleFabricType_Object = MibTableColumn
smIOCompatibilityModuleFabricType = _SmIOCompatibilityModuleFabricType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 10, 1, 5),
    _SmIOCompatibilityModuleFabricType_Type()
)
smIOCompatibilityModuleFabricType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smIOCompatibilityModuleFabricType.setStatus("mandatory")
_SmIOCompatibilityStatus_Type = OctetString
_SmIOCompatibilityStatus_Object = MibTableColumn
smIOCompatibilityStatus = _SmIOCompatibilityStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 10, 1, 6),
    _SmIOCompatibilityStatus_Type()
)
smIOCompatibilityStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smIOCompatibilityStatus.setStatus("mandatory")


class _SmIOCompatibilityTargetTopologyPath_Type(OctetString):
    """Custom type smIOCompatibilityTargetTopologyPath based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_SmIOCompatibilityTargetTopologyPath_Type.__name__ = "OctetString"
_SmIOCompatibilityTargetTopologyPath_Object = MibTableColumn
smIOCompatibilityTargetTopologyPath = _SmIOCompatibilityTargetTopologyPath_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 1, 10, 1, 7),
    _SmIOCompatibilityTargetTopologyPath_Type()
)
smIOCompatibilityTargetTopologyPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smIOCompatibilityTargetTopologyPath.setStatus("mandatory")
_SwitchModuleConfig_ObjectIdentity = ObjectIdentity
switchModuleConfig = _SwitchModuleConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2)
)
_SwitchMgmtNetworkCfg_ObjectIdentity = ObjectIdentity
switchMgmtNetworkCfg = _SwitchMgmtNetworkCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1)
)
_SwitchCurrentNwCfg_ObjectIdentity = ObjectIdentity
switchCurrentNwCfg = _SwitchCurrentNwCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1)
)
_SmCurrentIPInfoTable_Object = MibTable
smCurrentIPInfoTable = _SmCurrentIPInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1)
)
if mibBuilder.loadTexts:
    smCurrentIPInfoTable.setStatus("mandatory")
_SmCurrentIPInfoEntry_Object = MibTableRow
smCurrentIPInfoEntry = _SmCurrentIPInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1)
)
smCurrentIPInfoEntry.setIndexNames(
    (0, "CME-MIB", "smCurrentIPInfoIndex"),
)
if mibBuilder.loadTexts:
    smCurrentIPInfoEntry.setStatus("mandatory")
_SmCurrentIPInfoIndex_Type = Integer32
_SmCurrentIPInfoIndex_Object = MibTableColumn
smCurrentIPInfoIndex = _SmCurrentIPInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 1),
    _SmCurrentIPInfoIndex_Type()
)
smCurrentIPInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smCurrentIPInfoIndex.setStatus("mandatory")


class _SmCurrentIPInfoId_Type(Integer32):
    """Custom type smCurrentIPInfoId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("module1", 1),
          ("module2", 2),
          ("module3", 3),
          ("module4", 4),
          ("module5", 5),
          ("module6", 6),
          ("module7", 7),
          ("module8", 8),
          ("module9", 9),
          ("module10", 10))
    )


_SmCurrentIPInfoId_Type.__name__ = "Integer32"
_SmCurrentIPInfoId_Object = MibTableColumn
smCurrentIPInfoId = _SmCurrentIPInfoId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 2),
    _SmCurrentIPInfoId_Type()
)
smCurrentIPInfoId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smCurrentIPInfoId.setStatus("mandatory")


class _SmCurrentIPInfoExists_Type(Integer32):
    """Custom type smCurrentIPInfoExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_SmCurrentIPInfoExists_Type.__name__ = "Integer32"
_SmCurrentIPInfoExists_Object = MibTableColumn
smCurrentIPInfoExists = _SmCurrentIPInfoExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 3),
    _SmCurrentIPInfoExists_Type()
)
smCurrentIPInfoExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smCurrentIPInfoExists.setStatus("mandatory")


class _SmCurrentIPInfoPowerState_Type(Integer32):
    """Custom type smCurrentIPInfoPowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("shutdownInProgress", 2))
    )


_SmCurrentIPInfoPowerState_Type.__name__ = "Integer32"
_SmCurrentIPInfoPowerState_Object = MibTableColumn
smCurrentIPInfoPowerState = _SmCurrentIPInfoPowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 4),
    _SmCurrentIPInfoPowerState_Type()
)
smCurrentIPInfoPowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smCurrentIPInfoPowerState.setStatus("mandatory")
_SmCurrentIPAddr_Type = IpAddress
_SmCurrentIPAddr_Object = MibTableColumn
smCurrentIPAddr = _SmCurrentIPAddr_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 6),
    _SmCurrentIPAddr_Type()
)
smCurrentIPAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smCurrentIPAddr.setStatus("mandatory")
_SmCurrentSubnetMask_Type = IpAddress
_SmCurrentSubnetMask_Object = MibTableColumn
smCurrentSubnetMask = _SmCurrentSubnetMask_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 7),
    _SmCurrentSubnetMask_Type()
)
smCurrentSubnetMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smCurrentSubnetMask.setStatus("mandatory")
_SmCurrentGateway_Type = IpAddress
_SmCurrentGateway_Object = MibTableColumn
smCurrentGateway = _SmCurrentGateway_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 8),
    _SmCurrentGateway_Type()
)
smCurrentGateway.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smCurrentGateway.setStatus("mandatory")


class _SmCurrentIPConfigMethod_Type(Integer32):
    """Custom type smCurrentIPConfigMethod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("static", 1),
          ("dhcp", 2),
          ("nat", 3),
          ("bootp", 4))
    )


_SmCurrentIPConfigMethod_Type.__name__ = "Integer32"
_SmCurrentIPConfigMethod_Object = MibTableColumn
smCurrentIPConfigMethod = _SmCurrentIPConfigMethod_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 1, 1, 1, 9),
    _SmCurrentIPConfigMethod_Type()
)
smCurrentIPConfigMethod.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smCurrentIPConfigMethod.setStatus("mandatory")
_SwitchNewNwCfg_ObjectIdentity = ObjectIdentity
switchNewNwCfg = _SwitchNewNwCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2)
)
_SmNewIPInfoTable_Object = MibTable
smNewIPInfoTable = _SmNewIPInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1)
)
if mibBuilder.loadTexts:
    smNewIPInfoTable.setStatus("mandatory")
_SmNewIPInfoEntry_Object = MibTableRow
smNewIPInfoEntry = _SmNewIPInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1)
)
smNewIPInfoEntry.setIndexNames(
    (0, "CME-MIB", "smNewIPInfoIndex"),
)
if mibBuilder.loadTexts:
    smNewIPInfoEntry.setStatus("mandatory")
_SmNewIPInfoIndex_Type = Integer32
_SmNewIPInfoIndex_Object = MibTableColumn
smNewIPInfoIndex = _SmNewIPInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 1),
    _SmNewIPInfoIndex_Type()
)
smNewIPInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNewIPInfoIndex.setStatus("mandatory")


class _SmNewIPInfoId_Type(Integer32):
    """Custom type smNewIPInfoId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("module1", 1),
          ("module2", 2),
          ("module3", 3),
          ("module4", 4),
          ("module5", 5),
          ("module6", 6),
          ("module7", 7),
          ("module8", 8),
          ("module9", 9),
          ("module10", 10))
    )


_SmNewIPInfoId_Type.__name__ = "Integer32"
_SmNewIPInfoId_Object = MibTableColumn
smNewIPInfoId = _SmNewIPInfoId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 2),
    _SmNewIPInfoId_Type()
)
smNewIPInfoId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNewIPInfoId.setStatus("mandatory")


class _SmNewIPInfoExists_Type(Integer32):
    """Custom type smNewIPInfoExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_SmNewIPInfoExists_Type.__name__ = "Integer32"
_SmNewIPInfoExists_Object = MibTableColumn
smNewIPInfoExists = _SmNewIPInfoExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 3),
    _SmNewIPInfoExists_Type()
)
smNewIPInfoExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNewIPInfoExists.setStatus("mandatory")


class _SmNewIPInfoPowerState_Type(Integer32):
    """Custom type smNewIPInfoPowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_SmNewIPInfoPowerState_Type.__name__ = "Integer32"
_SmNewIPInfoPowerState_Object = MibTableColumn
smNewIPInfoPowerState = _SmNewIPInfoPowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 4),
    _SmNewIPInfoPowerState_Type()
)
smNewIPInfoPowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smNewIPInfoPowerState.setStatus("mandatory")
_SmNewIPAddr_Type = IpAddress
_SmNewIPAddr_Object = MibTableColumn
smNewIPAddr = _SmNewIPAddr_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 6),
    _SmNewIPAddr_Type()
)
smNewIPAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNewIPAddr.setStatus("mandatory")
_SmNewSubnetMask_Type = IpAddress
_SmNewSubnetMask_Object = MibTableColumn
smNewSubnetMask = _SmNewSubnetMask_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 7),
    _SmNewSubnetMask_Type()
)
smNewSubnetMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNewSubnetMask.setStatus("mandatory")
_SmNewGateway_Type = IpAddress
_SmNewGateway_Object = MibTableColumn
smNewGateway = _SmNewGateway_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 8),
    _SmNewGateway_Type()
)
smNewGateway.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNewGateway.setStatus("mandatory")


class _SmNewIPConfigMethod_Type(Integer32):
    """Custom type smNewIPConfigMethod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("static", 1),
          ("dhcp", 2),
          ("nat", 3),
          ("bootp", 4))
    )


_SmNewIPConfigMethod_Type.__name__ = "Integer32"
_SmNewIPConfigMethod_Object = MibTableColumn
smNewIPConfigMethod = _SmNewIPConfigMethod_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 9),
    _SmNewIPConfigMethod_Type()
)
smNewIPConfigMethod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNewIPConfigMethod.setStatus("mandatory")


class _SmNewIPConfigEnableDisable_Type(Integer32):
    """Custom type smNewIPConfigEnableDisable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SmNewIPConfigEnableDisable_Type.__name__ = "Integer32"
_SmNewIPConfigEnableDisable_Object = MibTableColumn
smNewIPConfigEnableDisable = _SmNewIPConfigEnableDisable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 2, 1, 1, 10),
    _SmNewIPConfigEnableDisable_Type()
)
smNewIPConfigEnableDisable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smNewIPConfigEnableDisable.setStatus("mandatory")
_SwitchIPv6Config_ObjectIdentity = ObjectIdentity
switchIPv6Config = _SwitchIPv6Config_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4)
)
_SmIPv6ConfigTable_Object = MibTable
smIPv6ConfigTable = _SmIPv6ConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 1)
)
if mibBuilder.loadTexts:
    smIPv6ConfigTable.setStatus("mandatory")
_SmIPv6ConfigEntry_Object = MibTableRow
smIPv6ConfigEntry = _SmIPv6ConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 1, 1)
)
smIPv6ConfigEntry.setIndexNames(
    (0, "CME-MIB", "smIPv6ConfigIndex"),
)
if mibBuilder.loadTexts:
    smIPv6ConfigEntry.setStatus("mandatory")
_SmIPv6ConfigIndex_Type = Integer32
_SmIPv6ConfigIndex_Object = MibTableColumn
smIPv6ConfigIndex = _SmIPv6ConfigIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 1, 1, 1),
    _SmIPv6ConfigIndex_Type()
)
smIPv6ConfigIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smIPv6ConfigIndex.setStatus("mandatory")


class _SmIPv6ConfigEnabled_Type(Integer32):
    """Custom type smIPv6ConfigEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("enable", 1)
    )


_SmIPv6ConfigEnabled_Type.__name__ = "Integer32"
_SmIPv6ConfigEnabled_Object = MibTableColumn
smIPv6ConfigEnabled = _SmIPv6ConfigEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 1, 1, 2),
    _SmIPv6ConfigEnabled_Type()
)
smIPv6ConfigEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smIPv6ConfigEnabled.setStatus("mandatory")


class _SmIPv6ConfigStatic_Type(Integer32):
    """Custom type smIPv6ConfigStatic based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SmIPv6ConfigStatic_Type.__name__ = "Integer32"
_SmIPv6ConfigStatic_Object = MibTableColumn
smIPv6ConfigStatic = _SmIPv6ConfigStatic_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 1, 1, 3),
    _SmIPv6ConfigStatic_Type()
)
smIPv6ConfigStatic.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smIPv6ConfigStatic.setStatus("mandatory")


class _SmDHCPv6ConfigEnabled_Type(Integer32):
    """Custom type smDHCPv6ConfigEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SmDHCPv6ConfigEnabled_Type.__name__ = "Integer32"
_SmDHCPv6ConfigEnabled_Object = MibTableColumn
smDHCPv6ConfigEnabled = _SmDHCPv6ConfigEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 1, 1, 4),
    _SmDHCPv6ConfigEnabled_Type()
)
smDHCPv6ConfigEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smDHCPv6ConfigEnabled.setStatus("mandatory")


class _SmIPv6ConfigStatelessEnabled_Type(Integer32):
    """Custom type smIPv6ConfigStatelessEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_SmIPv6ConfigStatelessEnabled_Type.__name__ = "Integer32"
_SmIPv6ConfigStatelessEnabled_Object = MibTableColumn
smIPv6ConfigStatelessEnabled = _SmIPv6ConfigStatelessEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 1, 1, 5),
    _SmIPv6ConfigStatelessEnabled_Type()
)
smIPv6ConfigStatelessEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smIPv6ConfigStatelessEnabled.setStatus("mandatory")
_SmIPv6AddressTable_Object = MibTable
smIPv6AddressTable = _SmIPv6AddressTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 2)
)
if mibBuilder.loadTexts:
    smIPv6AddressTable.setStatus("mandatory")
_SmIPv6AddressEntry_Object = MibTableRow
smIPv6AddressEntry = _SmIPv6AddressEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 2, 1)
)
smIPv6AddressEntry.setIndexNames(
    (0, "CME-MIB", "smIPv6AddressIndex"),
    (0, "CME-MIB", "smIPv6AddressEntryIndex"),
)
if mibBuilder.loadTexts:
    smIPv6AddressEntry.setStatus("mandatory")
_SmIPv6AddressIndex_Type = Integer32
_SmIPv6AddressIndex_Object = MibTableColumn
smIPv6AddressIndex = _SmIPv6AddressIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 2, 1, 1),
    _SmIPv6AddressIndex_Type()
)
smIPv6AddressIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smIPv6AddressIndex.setStatus("mandatory")
_SmIPv6AddressEntryIndex_Type = Integer32
_SmIPv6AddressEntryIndex_Object = MibTableColumn
smIPv6AddressEntryIndex = _SmIPv6AddressEntryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 2, 1, 2),
    _SmIPv6AddressEntryIndex_Type()
)
smIPv6AddressEntryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smIPv6AddressEntryIndex.setStatus("mandatory")


class _SmIPv6AddressType_Type(Integer32):
    """Custom type smIPv6AddressType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("static", 1),
          ("dhcp6", 2),
          ("link-local", 3),
          ("autconfig", 4),
          ("configured-static", 5))
    )


_SmIPv6AddressType_Type.__name__ = "Integer32"
_SmIPv6AddressType_Object = MibTableColumn
smIPv6AddressType = _SmIPv6AddressType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 2, 1, 3),
    _SmIPv6AddressType_Type()
)
smIPv6AddressType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smIPv6AddressType.setStatus("mandatory")
_SmIPv6Address_Type = InetAddressIPv6
_SmIPv6Address_Object = MibTableColumn
smIPv6Address = _SmIPv6Address_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 2, 1, 4),
    _SmIPv6Address_Type()
)
smIPv6Address.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smIPv6Address.setStatus("mandatory")
_SmIPv6AddressPrefixLen_Type = Integer32
_SmIPv6AddressPrefixLen_Object = MibTableColumn
smIPv6AddressPrefixLen = _SmIPv6AddressPrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 2, 1, 5),
    _SmIPv6AddressPrefixLen_Type()
)
smIPv6AddressPrefixLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smIPv6AddressPrefixLen.setStatus("mandatory")
_SmIPv6AddressDefaultRoute_Type = InetAddressIPv6
_SmIPv6AddressDefaultRoute_Object = MibTableColumn
smIPv6AddressDefaultRoute = _SmIPv6AddressDefaultRoute_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 2, 1, 6),
    _SmIPv6AddressDefaultRoute_Type()
)
smIPv6AddressDefaultRoute.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smIPv6AddressDefaultRoute.setStatus("mandatory")
_SmIPv6StaticConfigTable_Object = MibTable
smIPv6StaticConfigTable = _SmIPv6StaticConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 3)
)
if mibBuilder.loadTexts:
    smIPv6StaticConfigTable.setStatus("mandatory")
_SmIPv6StaticConfigEntry_Object = MibTableRow
smIPv6StaticConfigEntry = _SmIPv6StaticConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 3, 1)
)
smIPv6StaticConfigEntry.setIndexNames(
    (0, "CME-MIB", "smIPv6StaticIndex"),
)
if mibBuilder.loadTexts:
    smIPv6StaticConfigEntry.setStatus("mandatory")
_SmIPv6StaticIndex_Type = Integer32
_SmIPv6StaticIndex_Object = MibTableColumn
smIPv6StaticIndex = _SmIPv6StaticIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 3, 1, 1),
    _SmIPv6StaticIndex_Type()
)
smIPv6StaticIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smIPv6StaticIndex.setStatus("mandatory")
_SmIPv6StaticAddress_Type = InetAddressIPv6
_SmIPv6StaticAddress_Object = MibTableColumn
smIPv6StaticAddress = _SmIPv6StaticAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 3, 1, 2),
    _SmIPv6StaticAddress_Type()
)
smIPv6StaticAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smIPv6StaticAddress.setStatus("mandatory")
_SmIPv6StaticAddressPrefixLen_Type = Integer32
_SmIPv6StaticAddressPrefixLen_Object = MibTableColumn
smIPv6StaticAddressPrefixLen = _SmIPv6StaticAddressPrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 3, 1, 3),
    _SmIPv6StaticAddressPrefixLen_Type()
)
smIPv6StaticAddressPrefixLen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smIPv6StaticAddressPrefixLen.setStatus("mandatory")
_SmIPv6StaticAddressDefaultRoute_Type = InetAddressIPv6
_SmIPv6StaticAddressDefaultRoute_Object = MibTableColumn
smIPv6StaticAddressDefaultRoute = _SmIPv6StaticAddressDefaultRoute_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 1, 4, 3, 1, 4),
    _SmIPv6StaticAddressDefaultRoute_Type()
)
smIPv6StaticAddressDefaultRoute.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smIPv6StaticAddressDefaultRoute.setStatus("mandatory")
_SwitchPortCfg_ObjectIdentity = ObjectIdentity
switchPortCfg = _SwitchPortCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2)
)
_SwitchModOnePortCfg_ObjectIdentity = ObjectIdentity
switchModOnePortCfg = _SwitchModOnePortCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1)
)
_SmOnePortCfgTable_Object = MibTable
smOnePortCfgTable = _SmOnePortCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1)
)
if mibBuilder.loadTexts:
    smOnePortCfgTable.setStatus("mandatory")
_SmOnePortCfgEntry_Object = MibTableRow
smOnePortCfgEntry = _SmOnePortCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1)
)
smOnePortCfgEntry.setIndexNames(
    (0, "CME-MIB", "smOnePortCfgIndex"),
)
if mibBuilder.loadTexts:
    smOnePortCfgEntry.setStatus("mandatory")
_SmOnePortCfgIndex_Type = Integer32
_SmOnePortCfgIndex_Object = MibTableColumn
smOnePortCfgIndex = _SmOnePortCfgIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 1),
    _SmOnePortCfgIndex_Type()
)
smOnePortCfgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smOnePortCfgIndex.setStatus("mandatory")
_SmOnePortCfgLabel_Type = OctetString
_SmOnePortCfgLabel_Object = MibTableColumn
smOnePortCfgLabel = _SmOnePortCfgLabel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 2),
    _SmOnePortCfgLabel_Type()
)
smOnePortCfgLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smOnePortCfgLabel.setStatus("mandatory")


class _SmOnePortCfgType_Type(Integer32):
    """Custom type smOnePortCfgType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("unused", 0),
          ("externalPort", 1),
          ("externalManagementPort", 2),
          ("externalDualPort", 3),
          ("bladePort", 4),
          ("mmManagementPort", 5),
          ("uplinkPort", 6),
          ("interModulePort", 7),
          ("interModuleManagementPort", 8),
          ("interModuleDualPort", 9),
          ("interModuleExternalBridgePort", 10),
          ("interModuleDualInternalBridgePort", 11))
    )


_SmOnePortCfgType_Type.__name__ = "Integer32"
_SmOnePortCfgType_Object = MibTableColumn
smOnePortCfgType = _SmOnePortCfgType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 3),
    _SmOnePortCfgType_Type()
)
smOnePortCfgType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smOnePortCfgType.setStatus("mandatory")


class _SmOnePortCfgLinkSetting_Type(Integer32):
    """Custom type smOnePortCfgLinkSetting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("up", 1))
    )


_SmOnePortCfgLinkSetting_Type.__name__ = "Integer32"
_SmOnePortCfgLinkSetting_Object = MibTableColumn
smOnePortCfgLinkSetting = _SmOnePortCfgLinkSetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 4),
    _SmOnePortCfgLinkSetting_Type()
)
smOnePortCfgLinkSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smOnePortCfgLinkSetting.setStatus("mandatory")


class _SmOnePortCfgLinkState_Type(Integer32):
    """Custom type smOnePortCfgLinkState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("up", 1),
          ("initialized", 2))
    )


_SmOnePortCfgLinkState_Type.__name__ = "Integer32"
_SmOnePortCfgLinkState_Object = MibTableColumn
smOnePortCfgLinkState = _SmOnePortCfgLinkState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 5),
    _SmOnePortCfgLinkState_Type()
)
smOnePortCfgLinkState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smOnePortCfgLinkState.setStatus("mandatory")
_SmOnePortCfgSpeedSetting_Type = OctetString
_SmOnePortCfgSpeedSetting_Object = MibTableColumn
smOnePortCfgSpeedSetting = _SmOnePortCfgSpeedSetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 6),
    _SmOnePortCfgSpeedSetting_Type()
)
smOnePortCfgSpeedSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smOnePortCfgSpeedSetting.setStatus("mandatory")
_SmOnePortCfgSpeedStatus_Type = OctetString
_SmOnePortCfgSpeedStatus_Object = MibTableColumn
smOnePortCfgSpeedStatus = _SmOnePortCfgSpeedStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 7),
    _SmOnePortCfgSpeedStatus_Type()
)
smOnePortCfgSpeedStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smOnePortCfgSpeedStatus.setStatus("mandatory")
_SmOnePortCfgAvailSpeeds_Type = OctetString
_SmOnePortCfgAvailSpeeds_Object = MibTableColumn
smOnePortCfgAvailSpeeds = _SmOnePortCfgAvailSpeeds_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 8),
    _SmOnePortCfgAvailSpeeds_Type()
)
smOnePortCfgAvailSpeeds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smOnePortCfgAvailSpeeds.setStatus("mandatory")


class _SmOnePortCfgMedia_Type(Integer32):
    """Custom type smOnePortCfgMedia based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              32,
              48,
              255)
        )
    )
    namedValues = NamedValues(
        *(("copper", 0),
          ("serdes", 1),
          ("opticalShortHaul", 32),
          ("opticalLongHaul", 48),
          ("notApplicable", 255))
    )


_SmOnePortCfgMedia_Type.__name__ = "Integer32"
_SmOnePortCfgMedia_Object = MibTableColumn
smOnePortCfgMedia = _SmOnePortCfgMedia_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 9),
    _SmOnePortCfgMedia_Type()
)
smOnePortCfgMedia.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smOnePortCfgMedia.setStatus("mandatory")


class _SmOnePortCfgProtocol_Type(Integer32):
    """Custom type smOnePortCfgProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(16,
              32,
              48,
              64,
              80,
              112,
              255)
        )
    )
    namedValues = NamedValues(
        *(("ethernet", 16),
          ("fibreChannel", 32),
          ("scalability", 48),
          ("infiniband", 64),
          ("pciExpress", 80),
          ("myrinet", 112),
          ("notApplicable", 255))
    )


_SmOnePortCfgProtocol_Type.__name__ = "Integer32"
_SmOnePortCfgProtocol_Object = MibTableColumn
smOnePortCfgProtocol = _SmOnePortCfgProtocol_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 10),
    _SmOnePortCfgProtocol_Type()
)
smOnePortCfgProtocol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smOnePortCfgProtocol.setStatus("mandatory")
_SmOnePortCfgWidth_Type = Integer32
_SmOnePortCfgWidth_Object = MibTableColumn
smOnePortCfgWidth = _SmOnePortCfgWidth_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 11),
    _SmOnePortCfgWidth_Type()
)
smOnePortCfgWidth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smOnePortCfgWidth.setStatus("mandatory")
_SmOnePortCfgCableLength_Type = Integer32
_SmOnePortCfgCableLength_Object = MibTableColumn
smOnePortCfgCableLength = _SmOnePortCfgCableLength_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 12),
    _SmOnePortCfgCableLength_Type()
)
smOnePortCfgCableLength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smOnePortCfgCableLength.setStatus("mandatory")
_SmOnePortCfgCableType_Type = OctetString
_SmOnePortCfgCableType_Object = MibTableColumn
smOnePortCfgCableType = _SmOnePortCfgCableType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 13),
    _SmOnePortCfgCableType_Type()
)
smOnePortCfgCableType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smOnePortCfgCableType.setStatus("mandatory")
_SmOnePortCfgVendorName_Type = OctetString
_SmOnePortCfgVendorName_Object = MibTableColumn
smOnePortCfgVendorName = _SmOnePortCfgVendorName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 14),
    _SmOnePortCfgVendorName_Type()
)
smOnePortCfgVendorName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smOnePortCfgVendorName.setStatus("mandatory")


class _SmOnePortCfgCompatibility_Type(Integer32):
    """Custom type smOnePortCfgCompatibility based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("incompatible", 0),
          ("compatible", 1),
          ("compatibleNotRecommended", 2),
          ("notApplicable", 255))
    )


_SmOnePortCfgCompatibility_Type.__name__ = "Integer32"
_SmOnePortCfgCompatibility_Object = MibTableColumn
smOnePortCfgCompatibility = _SmOnePortCfgCompatibility_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 15),
    _SmOnePortCfgCompatibility_Type()
)
smOnePortCfgCompatibility.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smOnePortCfgCompatibility.setStatus("mandatory")


class _SmOnePortCfgDataRate_Type(Integer32):
    """Custom type smOnePortCfgDataRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("sdr", 0),
          ("ddr", 1),
          ("qdr", 2),
          ("edr", 3),
          ("notApplicable", 255))
    )


_SmOnePortCfgDataRate_Type.__name__ = "Integer32"
_SmOnePortCfgDataRate_Object = MibTableColumn
smOnePortCfgDataRate = _SmOnePortCfgDataRate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 1, 1, 1, 16),
    _SmOnePortCfgDataRate_Type()
)
smOnePortCfgDataRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smOnePortCfgDataRate.setStatus("mandatory")
_SwitchModTwoPortCfg_ObjectIdentity = ObjectIdentity
switchModTwoPortCfg = _SwitchModTwoPortCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2)
)
_SmTwoPortCfgTable_Object = MibTable
smTwoPortCfgTable = _SmTwoPortCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1)
)
if mibBuilder.loadTexts:
    smTwoPortCfgTable.setStatus("mandatory")
_SmTwoPortCfgEntry_Object = MibTableRow
smTwoPortCfgEntry = _SmTwoPortCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1)
)
smTwoPortCfgEntry.setIndexNames(
    (0, "CME-MIB", "smTwoPortCfgIndex"),
)
if mibBuilder.loadTexts:
    smTwoPortCfgEntry.setStatus("mandatory")
_SmTwoPortCfgIndex_Type = Integer32
_SmTwoPortCfgIndex_Object = MibTableColumn
smTwoPortCfgIndex = _SmTwoPortCfgIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 1),
    _SmTwoPortCfgIndex_Type()
)
smTwoPortCfgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTwoPortCfgIndex.setStatus("mandatory")
_SmTwoPortCfgLabel_Type = OctetString
_SmTwoPortCfgLabel_Object = MibTableColumn
smTwoPortCfgLabel = _SmTwoPortCfgLabel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 2),
    _SmTwoPortCfgLabel_Type()
)
smTwoPortCfgLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTwoPortCfgLabel.setStatus("mandatory")


class _SmTwoPortCfgType_Type(Integer32):
    """Custom type smTwoPortCfgType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("unused", 0),
          ("externalPort", 1),
          ("externalManagementPort", 2),
          ("externalDualPort", 3),
          ("bladePort", 4),
          ("mmManagementPort", 5),
          ("uplinkPort", 6),
          ("interModulePort", 7),
          ("interModuleManagementPort", 8),
          ("interModuleDualPort", 9),
          ("interModuleExternalBridgePort", 10),
          ("interModuleDualInternalBridgePort", 11))
    )


_SmTwoPortCfgType_Type.__name__ = "Integer32"
_SmTwoPortCfgType_Object = MibTableColumn
smTwoPortCfgType = _SmTwoPortCfgType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 3),
    _SmTwoPortCfgType_Type()
)
smTwoPortCfgType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTwoPortCfgType.setStatus("mandatory")


class _SmTwoPortCfgLinkSetting_Type(Integer32):
    """Custom type smTwoPortCfgLinkSetting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("up", 1))
    )


_SmTwoPortCfgLinkSetting_Type.__name__ = "Integer32"
_SmTwoPortCfgLinkSetting_Object = MibTableColumn
smTwoPortCfgLinkSetting = _SmTwoPortCfgLinkSetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 4),
    _SmTwoPortCfgLinkSetting_Type()
)
smTwoPortCfgLinkSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smTwoPortCfgLinkSetting.setStatus("mandatory")


class _SmTwoPortCfgLinkState_Type(Integer32):
    """Custom type smTwoPortCfgLinkState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("up", 1),
          ("initialized", 2))
    )


_SmTwoPortCfgLinkState_Type.__name__ = "Integer32"
_SmTwoPortCfgLinkState_Object = MibTableColumn
smTwoPortCfgLinkState = _SmTwoPortCfgLinkState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 5),
    _SmTwoPortCfgLinkState_Type()
)
smTwoPortCfgLinkState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTwoPortCfgLinkState.setStatus("mandatory")
_SmTwoPortCfgSpeedSetting_Type = OctetString
_SmTwoPortCfgSpeedSetting_Object = MibTableColumn
smTwoPortCfgSpeedSetting = _SmTwoPortCfgSpeedSetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 6),
    _SmTwoPortCfgSpeedSetting_Type()
)
smTwoPortCfgSpeedSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smTwoPortCfgSpeedSetting.setStatus("mandatory")
_SmTwoPortCfgSpeedStatus_Type = OctetString
_SmTwoPortCfgSpeedStatus_Object = MibTableColumn
smTwoPortCfgSpeedStatus = _SmTwoPortCfgSpeedStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 7),
    _SmTwoPortCfgSpeedStatus_Type()
)
smTwoPortCfgSpeedStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTwoPortCfgSpeedStatus.setStatus("mandatory")
_SmTwoPortCfgAvailSpeeds_Type = OctetString
_SmTwoPortCfgAvailSpeeds_Object = MibTableColumn
smTwoPortCfgAvailSpeeds = _SmTwoPortCfgAvailSpeeds_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 8),
    _SmTwoPortCfgAvailSpeeds_Type()
)
smTwoPortCfgAvailSpeeds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTwoPortCfgAvailSpeeds.setStatus("mandatory")


class _SmTwoPortCfgMedia_Type(Integer32):
    """Custom type smTwoPortCfgMedia based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              32,
              48,
              255)
        )
    )
    namedValues = NamedValues(
        *(("copper", 0),
          ("serdes", 1),
          ("opticalShortHaul", 32),
          ("opticalLongHaul", 48),
          ("notApplicable", 255))
    )


_SmTwoPortCfgMedia_Type.__name__ = "Integer32"
_SmTwoPortCfgMedia_Object = MibTableColumn
smTwoPortCfgMedia = _SmTwoPortCfgMedia_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 9),
    _SmTwoPortCfgMedia_Type()
)
smTwoPortCfgMedia.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTwoPortCfgMedia.setStatus("mandatory")


class _SmTwoPortCfgProtocol_Type(Integer32):
    """Custom type smTwoPortCfgProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(16,
              32,
              48,
              64,
              80,
              112,
              255)
        )
    )
    namedValues = NamedValues(
        *(("ethernet", 16),
          ("fibreChannel", 32),
          ("scalability", 48),
          ("infiniband", 64),
          ("pciExpress", 80),
          ("myrinet", 112),
          ("notApplicable", 255))
    )


_SmTwoPortCfgProtocol_Type.__name__ = "Integer32"
_SmTwoPortCfgProtocol_Object = MibTableColumn
smTwoPortCfgProtocol = _SmTwoPortCfgProtocol_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 10),
    _SmTwoPortCfgProtocol_Type()
)
smTwoPortCfgProtocol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTwoPortCfgProtocol.setStatus("mandatory")
_SmTwoPortCfgWidth_Type = Integer32
_SmTwoPortCfgWidth_Object = MibTableColumn
smTwoPortCfgWidth = _SmTwoPortCfgWidth_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 11),
    _SmTwoPortCfgWidth_Type()
)
smTwoPortCfgWidth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTwoPortCfgWidth.setStatus("mandatory")
_SmTwoPortCfgCableLength_Type = Integer32
_SmTwoPortCfgCableLength_Object = MibTableColumn
smTwoPortCfgCableLength = _SmTwoPortCfgCableLength_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 12),
    _SmTwoPortCfgCableLength_Type()
)
smTwoPortCfgCableLength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTwoPortCfgCableLength.setStatus("mandatory")
_SmTwoPortCfgCableType_Type = OctetString
_SmTwoPortCfgCableType_Object = MibTableColumn
smTwoPortCfgCableType = _SmTwoPortCfgCableType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 13),
    _SmTwoPortCfgCableType_Type()
)
smTwoPortCfgCableType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTwoPortCfgCableType.setStatus("mandatory")
_SmTwoPortCfgVendorName_Type = OctetString
_SmTwoPortCfgVendorName_Object = MibTableColumn
smTwoPortCfgVendorName = _SmTwoPortCfgVendorName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 14),
    _SmTwoPortCfgVendorName_Type()
)
smTwoPortCfgVendorName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTwoPortCfgVendorName.setStatus("mandatory")


class _SmTwoPortCfgCompatibility_Type(Integer32):
    """Custom type smTwoPortCfgCompatibility based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("incompatible", 0),
          ("compatible", 1),
          ("compatibleNotRecommended", 2),
          ("notApplicable", 255))
    )


_SmTwoPortCfgCompatibility_Type.__name__ = "Integer32"
_SmTwoPortCfgCompatibility_Object = MibTableColumn
smTwoPortCfgCompatibility = _SmTwoPortCfgCompatibility_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 15),
    _SmTwoPortCfgCompatibility_Type()
)
smTwoPortCfgCompatibility.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTwoPortCfgCompatibility.setStatus("mandatory")


class _SmTwoPortCfgDataRate_Type(Integer32):
    """Custom type smTwoPortCfgDataRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("sdr", 0),
          ("ddr", 1),
          ("qdr", 2),
          ("edr", 3),
          ("notApplicable", 255))
    )


_SmTwoPortCfgDataRate_Type.__name__ = "Integer32"
_SmTwoPortCfgDataRate_Object = MibTableColumn
smTwoPortCfgDataRate = _SmTwoPortCfgDataRate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 2, 1, 1, 16),
    _SmTwoPortCfgDataRate_Type()
)
smTwoPortCfgDataRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smTwoPortCfgDataRate.setStatus("mandatory")
_SwitchModThreePortCfg_ObjectIdentity = ObjectIdentity
switchModThreePortCfg = _SwitchModThreePortCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3)
)
_SmThreePortCfgTable_Object = MibTable
smThreePortCfgTable = _SmThreePortCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1)
)
if mibBuilder.loadTexts:
    smThreePortCfgTable.setStatus("mandatory")
_SmThreePortCfgEntry_Object = MibTableRow
smThreePortCfgEntry = _SmThreePortCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1)
)
smThreePortCfgEntry.setIndexNames(
    (0, "CME-MIB", "smThreePortCfgIndex"),
)
if mibBuilder.loadTexts:
    smThreePortCfgEntry.setStatus("mandatory")
_SmThreePortCfgIndex_Type = Integer32
_SmThreePortCfgIndex_Object = MibTableColumn
smThreePortCfgIndex = _SmThreePortCfgIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 1),
    _SmThreePortCfgIndex_Type()
)
smThreePortCfgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smThreePortCfgIndex.setStatus("mandatory")
_SmThreePortCfgLabel_Type = OctetString
_SmThreePortCfgLabel_Object = MibTableColumn
smThreePortCfgLabel = _SmThreePortCfgLabel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 2),
    _SmThreePortCfgLabel_Type()
)
smThreePortCfgLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smThreePortCfgLabel.setStatus("mandatory")


class _SmThreePortCfgType_Type(Integer32):
    """Custom type smThreePortCfgType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("unused", 0),
          ("externalPort", 1),
          ("externalManagementPort", 2),
          ("externalDualPort", 3),
          ("bladePort", 4),
          ("mmManagementPort", 5),
          ("uplinkPort", 6),
          ("interModulePort", 7),
          ("interModuleManagementPort", 8),
          ("interModuleDualPort", 9),
          ("interModuleExternalBridgePort", 10),
          ("interModuleDualInternalBridgePort", 11))
    )


_SmThreePortCfgType_Type.__name__ = "Integer32"
_SmThreePortCfgType_Object = MibTableColumn
smThreePortCfgType = _SmThreePortCfgType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 3),
    _SmThreePortCfgType_Type()
)
smThreePortCfgType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smThreePortCfgType.setStatus("mandatory")


class _SmThreePortCfgLinkSetting_Type(Integer32):
    """Custom type smThreePortCfgLinkSetting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("up", 1))
    )


_SmThreePortCfgLinkSetting_Type.__name__ = "Integer32"
_SmThreePortCfgLinkSetting_Object = MibTableColumn
smThreePortCfgLinkSetting = _SmThreePortCfgLinkSetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 4),
    _SmThreePortCfgLinkSetting_Type()
)
smThreePortCfgLinkSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smThreePortCfgLinkSetting.setStatus("mandatory")


class _SmThreePortCfgLinkState_Type(Integer32):
    """Custom type smThreePortCfgLinkState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("up", 1),
          ("initialized", 2))
    )


_SmThreePortCfgLinkState_Type.__name__ = "Integer32"
_SmThreePortCfgLinkState_Object = MibTableColumn
smThreePortCfgLinkState = _SmThreePortCfgLinkState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 5),
    _SmThreePortCfgLinkState_Type()
)
smThreePortCfgLinkState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smThreePortCfgLinkState.setStatus("mandatory")
_SmThreePortCfgSpeedSetting_Type = OctetString
_SmThreePortCfgSpeedSetting_Object = MibTableColumn
smThreePortCfgSpeedSetting = _SmThreePortCfgSpeedSetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 6),
    _SmThreePortCfgSpeedSetting_Type()
)
smThreePortCfgSpeedSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smThreePortCfgSpeedSetting.setStatus("mandatory")
_SmThreePortCfgSpeedStatus_Type = OctetString
_SmThreePortCfgSpeedStatus_Object = MibTableColumn
smThreePortCfgSpeedStatus = _SmThreePortCfgSpeedStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 7),
    _SmThreePortCfgSpeedStatus_Type()
)
smThreePortCfgSpeedStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smThreePortCfgSpeedStatus.setStatus("mandatory")
_SmThreePortCfgAvailSpeeds_Type = OctetString
_SmThreePortCfgAvailSpeeds_Object = MibTableColumn
smThreePortCfgAvailSpeeds = _SmThreePortCfgAvailSpeeds_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 8),
    _SmThreePortCfgAvailSpeeds_Type()
)
smThreePortCfgAvailSpeeds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smThreePortCfgAvailSpeeds.setStatus("mandatory")


class _SmThreePortCfgMedia_Type(Integer32):
    """Custom type smThreePortCfgMedia based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              32,
              48,
              255)
        )
    )
    namedValues = NamedValues(
        *(("copper", 0),
          ("serdes", 1),
          ("opticalShortHaul", 32),
          ("opticalLongHaul", 48),
          ("notApplicable", 255))
    )


_SmThreePortCfgMedia_Type.__name__ = "Integer32"
_SmThreePortCfgMedia_Object = MibTableColumn
smThreePortCfgMedia = _SmThreePortCfgMedia_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 9),
    _SmThreePortCfgMedia_Type()
)
smThreePortCfgMedia.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smThreePortCfgMedia.setStatus("mandatory")


class _SmThreePortCfgProtocol_Type(Integer32):
    """Custom type smThreePortCfgProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(16,
              32,
              48,
              64,
              80,
              112,
              255)
        )
    )
    namedValues = NamedValues(
        *(("ethernet", 16),
          ("fibreChannel", 32),
          ("scalability", 48),
          ("infiniband", 64),
          ("pciExpress", 80),
          ("myrinet", 112),
          ("notApplicable", 255))
    )


_SmThreePortCfgProtocol_Type.__name__ = "Integer32"
_SmThreePortCfgProtocol_Object = MibTableColumn
smThreePortCfgProtocol = _SmThreePortCfgProtocol_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 10),
    _SmThreePortCfgProtocol_Type()
)
smThreePortCfgProtocol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smThreePortCfgProtocol.setStatus("mandatory")
_SmThreePortCfgWidth_Type = Integer32
_SmThreePortCfgWidth_Object = MibTableColumn
smThreePortCfgWidth = _SmThreePortCfgWidth_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 11),
    _SmThreePortCfgWidth_Type()
)
smThreePortCfgWidth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smThreePortCfgWidth.setStatus("mandatory")
_SmThreePortCfgCableLength_Type = Integer32
_SmThreePortCfgCableLength_Object = MibTableColumn
smThreePortCfgCableLength = _SmThreePortCfgCableLength_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 12),
    _SmThreePortCfgCableLength_Type()
)
smThreePortCfgCableLength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smThreePortCfgCableLength.setStatus("mandatory")
_SmThreePortCfgCableType_Type = OctetString
_SmThreePortCfgCableType_Object = MibTableColumn
smThreePortCfgCableType = _SmThreePortCfgCableType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 13),
    _SmThreePortCfgCableType_Type()
)
smThreePortCfgCableType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smThreePortCfgCableType.setStatus("mandatory")
_SmThreePortCfgVendorName_Type = OctetString
_SmThreePortCfgVendorName_Object = MibTableColumn
smThreePortCfgVendorName = _SmThreePortCfgVendorName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 14),
    _SmThreePortCfgVendorName_Type()
)
smThreePortCfgVendorName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smThreePortCfgVendorName.setStatus("mandatory")


class _SmThreePortCfgCompatibility_Type(Integer32):
    """Custom type smThreePortCfgCompatibility based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("incompatible", 0),
          ("compatible", 1),
          ("compatibleNotRecommended", 2),
          ("notApplicable", 255))
    )


_SmThreePortCfgCompatibility_Type.__name__ = "Integer32"
_SmThreePortCfgCompatibility_Object = MibTableColumn
smThreePortCfgCompatibility = _SmThreePortCfgCompatibility_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 15),
    _SmThreePortCfgCompatibility_Type()
)
smThreePortCfgCompatibility.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smThreePortCfgCompatibility.setStatus("mandatory")


class _SmThreePortCfgDataRate_Type(Integer32):
    """Custom type smThreePortCfgDataRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("sdr", 0),
          ("ddr", 1),
          ("qdr", 2),
          ("edr", 3),
          ("notApplicable", 255))
    )


_SmThreePortCfgDataRate_Type.__name__ = "Integer32"
_SmThreePortCfgDataRate_Object = MibTableColumn
smThreePortCfgDataRate = _SmThreePortCfgDataRate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 3, 1, 1, 16),
    _SmThreePortCfgDataRate_Type()
)
smThreePortCfgDataRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smThreePortCfgDataRate.setStatus("mandatory")
_SwitchModFourPortCfg_ObjectIdentity = ObjectIdentity
switchModFourPortCfg = _SwitchModFourPortCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4)
)
_SmFourPortCfgTable_Object = MibTable
smFourPortCfgTable = _SmFourPortCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1)
)
if mibBuilder.loadTexts:
    smFourPortCfgTable.setStatus("mandatory")
_SmFourPortCfgEntry_Object = MibTableRow
smFourPortCfgEntry = _SmFourPortCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1)
)
smFourPortCfgEntry.setIndexNames(
    (0, "CME-MIB", "smFourPortCfgIndex"),
)
if mibBuilder.loadTexts:
    smFourPortCfgEntry.setStatus("mandatory")
_SmFourPortCfgIndex_Type = Integer32
_SmFourPortCfgIndex_Object = MibTableColumn
smFourPortCfgIndex = _SmFourPortCfgIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 1),
    _SmFourPortCfgIndex_Type()
)
smFourPortCfgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFourPortCfgIndex.setStatus("mandatory")
_SmFourPortCfgLabel_Type = OctetString
_SmFourPortCfgLabel_Object = MibTableColumn
smFourPortCfgLabel = _SmFourPortCfgLabel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 2),
    _SmFourPortCfgLabel_Type()
)
smFourPortCfgLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFourPortCfgLabel.setStatus("mandatory")


class _SmFourPortCfgType_Type(Integer32):
    """Custom type smFourPortCfgType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("unused", 0),
          ("externalPort", 1),
          ("externalManagementPort", 2),
          ("externalDualPort", 3),
          ("bladePort", 4),
          ("mmManagementPort", 5),
          ("uplinkPort", 6),
          ("interModulePort", 7),
          ("interModuleManagementPort", 8),
          ("interModuleDualPort", 9),
          ("interModuleExternalBridgePort", 10),
          ("interModuleDualInternalBridgePort", 11))
    )


_SmFourPortCfgType_Type.__name__ = "Integer32"
_SmFourPortCfgType_Object = MibTableColumn
smFourPortCfgType = _SmFourPortCfgType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 3),
    _SmFourPortCfgType_Type()
)
smFourPortCfgType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFourPortCfgType.setStatus("mandatory")


class _SmFourPortCfgLinkSetting_Type(Integer32):
    """Custom type smFourPortCfgLinkSetting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("up", 1))
    )


_SmFourPortCfgLinkSetting_Type.__name__ = "Integer32"
_SmFourPortCfgLinkSetting_Object = MibTableColumn
smFourPortCfgLinkSetting = _SmFourPortCfgLinkSetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 4),
    _SmFourPortCfgLinkSetting_Type()
)
smFourPortCfgLinkSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smFourPortCfgLinkSetting.setStatus("mandatory")


class _SmFourPortCfgLinkState_Type(Integer32):
    """Custom type smFourPortCfgLinkState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("up", 1),
          ("initialized", 2))
    )


_SmFourPortCfgLinkState_Type.__name__ = "Integer32"
_SmFourPortCfgLinkState_Object = MibTableColumn
smFourPortCfgLinkState = _SmFourPortCfgLinkState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 5),
    _SmFourPortCfgLinkState_Type()
)
smFourPortCfgLinkState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFourPortCfgLinkState.setStatus("mandatory")
_SmFourPortCfgSpeedSetting_Type = OctetString
_SmFourPortCfgSpeedSetting_Object = MibTableColumn
smFourPortCfgSpeedSetting = _SmFourPortCfgSpeedSetting_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 6),
    _SmFourPortCfgSpeedSetting_Type()
)
smFourPortCfgSpeedSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smFourPortCfgSpeedSetting.setStatus("mandatory")
_SmFourPortCfgSpeedStatus_Type = OctetString
_SmFourPortCfgSpeedStatus_Object = MibTableColumn
smFourPortCfgSpeedStatus = _SmFourPortCfgSpeedStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 7),
    _SmFourPortCfgSpeedStatus_Type()
)
smFourPortCfgSpeedStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFourPortCfgSpeedStatus.setStatus("mandatory")
_SmFourPortCfgAvailSpeeds_Type = OctetString
_SmFourPortCfgAvailSpeeds_Object = MibTableColumn
smFourPortCfgAvailSpeeds = _SmFourPortCfgAvailSpeeds_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 8),
    _SmFourPortCfgAvailSpeeds_Type()
)
smFourPortCfgAvailSpeeds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFourPortCfgAvailSpeeds.setStatus("mandatory")


class _SmFourPortCfgMedia_Type(Integer32):
    """Custom type smFourPortCfgMedia based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              32,
              48,
              255)
        )
    )
    namedValues = NamedValues(
        *(("copper", 0),
          ("serdes", 1),
          ("opticalShortHaul", 32),
          ("opticalLongHaul", 48),
          ("notApplicable", 255))
    )


_SmFourPortCfgMedia_Type.__name__ = "Integer32"
_SmFourPortCfgMedia_Object = MibTableColumn
smFourPortCfgMedia = _SmFourPortCfgMedia_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 9),
    _SmFourPortCfgMedia_Type()
)
smFourPortCfgMedia.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFourPortCfgMedia.setStatus("mandatory")


class _SmFourPortCfgProtocol_Type(Integer32):
    """Custom type smFourPortCfgProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(16,
              32,
              48,
              64,
              80,
              112,
              255)
        )
    )
    namedValues = NamedValues(
        *(("ethernet", 16),
          ("fibreChannel", 32),
          ("scalability", 48),
          ("infiniband", 64),
          ("pciExpress", 80),
          ("myrinet", 112),
          ("notApplicable", 255))
    )


_SmFourPortCfgProtocol_Type.__name__ = "Integer32"
_SmFourPortCfgProtocol_Object = MibTableColumn
smFourPortCfgProtocol = _SmFourPortCfgProtocol_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 10),
    _SmFourPortCfgProtocol_Type()
)
smFourPortCfgProtocol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFourPortCfgProtocol.setStatus("mandatory")
_SmFourPortCfgWidth_Type = Integer32
_SmFourPortCfgWidth_Object = MibTableColumn
smFourPortCfgWidth = _SmFourPortCfgWidth_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 11),
    _SmFourPortCfgWidth_Type()
)
smFourPortCfgWidth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFourPortCfgWidth.setStatus("mandatory")
_SmFourPortCfgCableLength_Type = Integer32
_SmFourPortCfgCableLength_Object = MibTableColumn
smFourPortCfgCableLength = _SmFourPortCfgCableLength_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 12),
    _SmFourPortCfgCableLength_Type()
)
smFourPortCfgCableLength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFourPortCfgCableLength.setStatus("mandatory")
_SmFourPortCfgCableType_Type = OctetString
_SmFourPortCfgCableType_Object = MibTableColumn
smFourPortCfgCableType = _SmFourPortCfgCableType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 13),
    _SmFourPortCfgCableType_Type()
)
smFourPortCfgCableType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFourPortCfgCableType.setStatus("mandatory")
_SmFourPortCfgVendorName_Type = OctetString
_SmFourPortCfgVendorName_Object = MibTableColumn
smFourPortCfgVendorName = _SmFourPortCfgVendorName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 14),
    _SmFourPortCfgVendorName_Type()
)
smFourPortCfgVendorName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFourPortCfgVendorName.setStatus("mandatory")


class _SmFourPortCfgCompatibility_Type(Integer32):
    """Custom type smFourPortCfgCompatibility based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("incompatible", 0),
          ("compatible", 1),
          ("compatibleNotRecommended", 2),
          ("notApplicable", 255))
    )


_SmFourPortCfgCompatibility_Type.__name__ = "Integer32"
_SmFourPortCfgCompatibility_Object = MibTableColumn
smFourPortCfgCompatibility = _SmFourPortCfgCompatibility_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 15),
    _SmFourPortCfgCompatibility_Type()
)
smFourPortCfgCompatibility.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFourPortCfgCompatibility.setStatus("mandatory")


class _SmFourPortCfgDataRate_Type(Integer32):
    """Custom type smFourPortCfgDataRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("sdr", 0),
          ("ddr", 1),
          ("qdr", 2),
          ("edr", 3),
          ("notApplicable", 255))
    )


_SmFourPortCfgDataRate_Type.__name__ = "Integer32"
_SmFourPortCfgDataRate_Object = MibTableColumn
smFourPortCfgDataRate = _SmFourPortCfgDataRate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 3, 2, 2, 4, 1, 1, 16),
    _SmFourPortCfgDataRate_Type()
)
smFourPortCfgDataRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFourPortCfgDataRate.setStatus("mandatory")
_ChassisTopology_ObjectIdentity = ObjectIdentity
chassisTopology = _ChassisTopology_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4)
)
_ChassisResponseVersion_Type = Integer32
_ChassisResponseVersion_Object = MibScalar
chassisResponseVersion = _ChassisResponseVersion_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 1),
    _ChassisResponseVersion_Type()
)
chassisResponseVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisResponseVersion.setStatus("mandatory")


class _ChassisFlags_Type(Integer32):
    """Custom type chassisFlags based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("rackOrStandAlone", 0),
          ("serverBlade", 1))
    )


_ChassisFlags_Type.__name__ = "Integer32"
_ChassisFlags_Object = MibScalar
chassisFlags = _ChassisFlags_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 2),
    _ChassisFlags_Type()
)
chassisFlags.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFlags.setStatus("mandatory")
_ChassisNoOfFPsSupported_Type = Integer32
_ChassisNoOfFPsSupported_Object = MibScalar
chassisNoOfFPsSupported = _ChassisNoOfFPsSupported_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 18),
    _ChassisNoOfFPsSupported_Type()
)
chassisNoOfFPsSupported.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisNoOfFPsSupported.setStatus("deprecated")
_ChassisNoOfBayDevicesSupported_Type = Integer32
_ChassisNoOfBayDevicesSupported_Object = MibScalar
chassisNoOfBayDevicesSupported = _ChassisNoOfBayDevicesSupported_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 19),
    _ChassisNoOfBayDevicesSupported_Type()
)
chassisNoOfBayDevicesSupported.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisNoOfBayDevicesSupported.setStatus("mandatory")
_ChassisNoOfSMsSupported_Type = Integer32
_ChassisNoOfSMsSupported_Object = MibScalar
chassisNoOfSMsSupported = _ChassisNoOfSMsSupported_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 20),
    _ChassisNoOfSMsSupported_Type()
)
chassisNoOfSMsSupported.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisNoOfSMsSupported.setStatus("mandatory")
_ChassisNoOfMMsSupported_Type = Integer32
_ChassisNoOfMMsSupported_Object = MibScalar
chassisNoOfMMsSupported = _ChassisNoOfMMsSupported_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 21),
    _ChassisNoOfMMsSupported_Type()
)
chassisNoOfMMsSupported.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisNoOfMMsSupported.setStatus("mandatory")
_ChassisNoOfPMsSupported_Type = Integer32
_ChassisNoOfPMsSupported_Object = MibScalar
chassisNoOfPMsSupported = _ChassisNoOfPMsSupported_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 22),
    _ChassisNoOfPMsSupported_Type()
)
chassisNoOfPMsSupported.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisNoOfPMsSupported.setStatus("mandatory")
_ChassisNoOfRearLEDCardsSupported_Type = Integer32
_ChassisNoOfRearLEDCardsSupported_Object = MibScalar
chassisNoOfRearLEDCardsSupported = _ChassisNoOfRearLEDCardsSupported_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 23),
    _ChassisNoOfRearLEDCardsSupported_Type()
)
chassisNoOfRearLEDCardsSupported.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisNoOfRearLEDCardsSupported.setStatus("mandatory")
_ChassisNoOfChassisFansSupported_Type = Integer32
_ChassisNoOfChassisFansSupported_Object = MibScalar
chassisNoOfChassisFansSupported = _ChassisNoOfChassisFansSupported_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 24),
    _ChassisNoOfChassisFansSupported_Type()
)
chassisNoOfChassisFansSupported.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisNoOfChassisFansSupported.setStatus("mandatory")
_ChassisBayDevicesInstalled_Type = OctetString
_ChassisBayDevicesInstalled_Object = MibScalar
chassisBayDevicesInstalled = _ChassisBayDevicesInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 25),
    _ChassisBayDevicesInstalled_Type()
)
chassisBayDevicesInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisBayDevicesInstalled.setStatus("mandatory")
_ChassisSMsInstalled_Type = OctetString
_ChassisSMsInstalled_Object = MibScalar
chassisSMsInstalled = _ChassisSMsInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 29),
    _ChassisSMsInstalled_Type()
)
chassisSMsInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisSMsInstalled.setStatus("mandatory")
_ChassisMMsInstalled_Type = OctetString
_ChassisMMsInstalled_Object = MibScalar
chassisMMsInstalled = _ChassisMMsInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 30),
    _ChassisMMsInstalled_Type()
)
chassisMMsInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisMMsInstalled.setStatus("mandatory")
_ChassisPMsInstalled_Type = OctetString
_ChassisPMsInstalled_Object = MibScalar
chassisPMsInstalled = _ChassisPMsInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 31),
    _ChassisPMsInstalled_Type()
)
chassisPMsInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisPMsInstalled.setStatus("mandatory")


class _ChassisRearLEDCardInstalled_Type(Integer32):
    """Custom type chassisRearLEDCardInstalled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_ChassisRearLEDCardInstalled_Type.__name__ = "Integer32"
_ChassisRearLEDCardInstalled_Object = MibScalar
chassisRearLEDCardInstalled = _ChassisRearLEDCardInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 32),
    _ChassisRearLEDCardInstalled_Type()
)
chassisRearLEDCardInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisRearLEDCardInstalled.setStatus("mandatory")
_ChassisFansInstalled_Type = OctetString
_ChassisFansInstalled_Object = MibScalar
chassisFansInstalled = _ChassisFansInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 33),
    _ChassisFansInstalled_Type()
)
chassisFansInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFansInstalled.setStatus("mandatory")
_ChassisActiveMM_Type = Integer32
_ChassisActiveMM_Object = MibScalar
chassisActiveMM = _ChassisActiveMM_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 34),
    _ChassisActiveMM_Type()
)
chassisActiveMM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisActiveMM.setStatus("mandatory")
_ChassisFPsInstalled_Type = OctetString
_ChassisFPsInstalled_Object = MibScalar
chassisFPsInstalled = _ChassisFPsInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 37),
    _ChassisFPsInstalled_Type()
)
chassisFPsInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisFPsInstalled.setStatus("deprecated")


class _ChassisType_Type(Integer32):
    """Custom type chassisType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            101
        )
    )
    namedValues = NamedValues(
        ("flex", 101)
    )


_ChassisType_Type.__name__ = "Integer32"
_ChassisType_Object = MibScalar
chassisType = _ChassisType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 38),
    _ChassisType_Type()
)
chassisType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisType.setStatus("mandatory")


class _ChassisSubtype_Type(Integer32):
    """Custom type chassisSubtype based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(48,
              49,
              50,
              101,
              255)
        )
    )
    namedValues = NamedValues(
        *(("tracewell4", 48),
          ("tracewell8", 49),
          ("tracewell7", 50),
          ("flex", 101),
          ("unknown", 255))
    )


_ChassisSubtype_Type.__name__ = "Integer32"
_ChassisSubtype_Object = MibScalar
chassisSubtype = _ChassisSubtype_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 39),
    _ChassisSubtype_Type()
)
chassisSubtype.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisSubtype.setStatus("mandatory")
_ChassisNoOfRearLEDCardsInstalled_Type = OctetString
_ChassisNoOfRearLEDCardsInstalled_Object = MibScalar
chassisNoOfRearLEDCardsInstalled = _ChassisNoOfRearLEDCardsInstalled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 52),
    _ChassisNoOfRearLEDCardsInstalled_Type()
)
chassisNoOfRearLEDCardsInstalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisNoOfRearLEDCardsInstalled.setStatus("mandatory")


class _ChassisRoom_Type(OctetString):
    """Custom type chassisRoom based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 24),
    )


_ChassisRoom_Type.__name__ = "OctetString"
_ChassisRoom_Object = MibScalar
chassisRoom = _ChassisRoom_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 53),
    _ChassisRoom_Type()
)
chassisRoom.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chassisRoom.setStatus("mandatory")


class _ChassisName_Type(OctetString):
    """Custom type chassisName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_ChassisName_Type.__name__ = "OctetString"
_ChassisName_Object = MibScalar
chassisName = _ChassisName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 54),
    _ChassisName_Type()
)
chassisName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chassisName.setStatus("mandatory")


class _ChassisRack_Type(OctetString):
    """Custom type chassisRack based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 24),
    )


_ChassisRack_Type.__name__ = "OctetString"
_ChassisRack_Object = MibScalar
chassisRack = _ChassisRack_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 55),
    _ChassisRack_Type()
)
chassisRack.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chassisRack.setStatus("mandatory")
_ChassisLowestU_Type = Integer32
_ChassisLowestU_Object = MibScalar
chassisLowestU = _ChassisLowestU_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 56),
    _ChassisLowestU_Type()
)
chassisLowestU.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chassisLowestU.setStatus("mandatory")
_ChassisUHeight_Type = Integer32
_ChassisUHeight_Object = MibScalar
chassisUHeight = _ChassisUHeight_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 4, 57),
    _ChassisUHeight_Type()
)
chassisUHeight.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassisUHeight.setStatus("mandatory")
_ManagementModule_ObjectIdentity = ObjectIdentity
managementModule = _ManagementModule_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5)
)
_MmStatusTable_Object = MibTable
mmStatusTable = _MmStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5, 1)
)
if mibBuilder.loadTexts:
    mmStatusTable.setStatus("mandatory")
_MmStatusEntry_Object = MibTableRow
mmStatusEntry = _MmStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5, 1, 1)
)
mmStatusEntry.setIndexNames(
    (0, "CME-MIB", "mmStatusIndex"),
)
if mibBuilder.loadTexts:
    mmStatusEntry.setStatus("mandatory")
_MmStatusIndex_Type = Integer32
_MmStatusIndex_Object = MibTableColumn
mmStatusIndex = _MmStatusIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5, 1, 1, 1),
    _MmStatusIndex_Type()
)
mmStatusIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmStatusIndex.setStatus("mandatory")


class _MmPresent_Type(Integer32):
    """Custom type mmPresent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_MmPresent_Type.__name__ = "Integer32"
_MmPresent_Object = MibTableColumn
mmPresent = _MmPresent_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5, 1, 1, 2),
    _MmPresent_Type()
)
mmPresent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmPresent.setStatus("mandatory")
_MmExtIpAddress_Type = IpAddress
_MmExtIpAddress_Object = MibTableColumn
mmExtIpAddress = _MmExtIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5, 1, 1, 3),
    _MmExtIpAddress_Type()
)
mmExtIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmExtIpAddress.setStatus("mandatory")


class _MmPrimary_Type(Integer32):
    """Custom type mmPrimary based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_MmPrimary_Type.__name__ = "Integer32"
_MmPrimary_Object = MibTableColumn
mmPrimary = _MmPrimary_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5, 1, 1, 4),
    _MmPrimary_Type()
)
mmPrimary.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmPrimary.setStatus("mandatory")


class _MmHealthState_Type(Integer32):
    """Custom type mmHealthState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("good", 1),
          ("warning", 2),
          ("bad", 3))
    )


_MmHealthState_Type.__name__ = "Integer32"
_MmHealthState_Object = MibTableColumn
mmHealthState = _MmHealthState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 5, 1, 1, 5),
    _MmHealthState_Type()
)
mmHealthState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mmHealthState.setStatus("mandatory")
_FirmwareInformation_ObjectIdentity = ObjectIdentity
firmwareInformation = _FirmwareInformation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 8)
)
_SmFirmwareInformation_ObjectIdentity = ObjectIdentity
smFirmwareInformation = _SmFirmwareInformation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 8, 1)
)
_SmFirmwareInfoTable_Object = MibTable
smFirmwareInfoTable = _SmFirmwareInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 8, 1, 1)
)
if mibBuilder.loadTexts:
    smFirmwareInfoTable.setStatus("mandatory")
_SmFirmwareInfoEntry_Object = MibTableRow
smFirmwareInfoEntry = _SmFirmwareInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 8, 1, 1, 1)
)
smFirmwareInfoEntry.setIndexNames(
    (0, "CME-MIB", "smFirmwareInfoIndex"),
)
if mibBuilder.loadTexts:
    smFirmwareInfoEntry.setStatus("mandatory")
_SmFirmwareInfoIndex_Type = Integer32
_SmFirmwareInfoIndex_Object = MibTableColumn
smFirmwareInfoIndex = _SmFirmwareInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 8, 1, 1, 1, 1),
    _SmFirmwareInfoIndex_Type()
)
smFirmwareInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFirmwareInfoIndex.setStatus("mandatory")
_SmFirmwareInfoModIndex_Type = Integer32
_SmFirmwareInfoModIndex_Object = MibTableColumn
smFirmwareInfoModIndex = _SmFirmwareInfoModIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 8, 1, 1, 1, 2),
    _SmFirmwareInfoModIndex_Type()
)
smFirmwareInfoModIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFirmwareInfoModIndex.setStatus("mandatory")
_SmFirmwareInfoImageIndex_Type = Integer32
_SmFirmwareInfoImageIndex_Object = MibTableColumn
smFirmwareInfoImageIndex = _SmFirmwareInfoImageIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 8, 1, 1, 1, 3),
    _SmFirmwareInfoImageIndex_Type()
)
smFirmwareInfoImageIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smFirmwareInfoImageIndex.setStatus("mandatory")
_SmFirmwareInfoImageName_Type = OctetString
_SmFirmwareInfoImageName_Object = MibTableColumn
smFirmwareInfoImageName = _SmFirmwareInfoImageName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 8, 1, 1, 1, 4),
    _SmFirmwareInfoImageName_Type()
)
smFirmwareInfoImageName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smFirmwareInfoImageName.setStatus("mandatory")
_FirmwareUpdate_ObjectIdentity = ObjectIdentity
firmwareUpdate = _FirmwareUpdate_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9)
)


class _FirmwareUpdateTarget_Type(Integer32):
    """Custom type firmwareUpdateTarget based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              11,
              12,
              13,
              14,
              255)
        )
    )
    namedValues = NamedValues(
        *(("managementModule", 0),
          ("switchModule1", 11),
          ("switchModule2", 12),
          ("switchModule3", 13),
          ("switchModule4", 14),
          ("unknown", 255))
    )


_FirmwareUpdateTarget_Type.__name__ = "Integer32"
_FirmwareUpdateTarget_Object = MibScalar
firmwareUpdateTarget = _FirmwareUpdateTarget_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 1),
    _FirmwareUpdateTarget_Type()
)
firmwareUpdateTarget.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    firmwareUpdateTarget.setStatus("mandatory")


class _FirmwareUpdateTftpServer_Type(OctetString):
    """Custom type firmwareUpdateTftpServer based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 63),
    )


_FirmwareUpdateTftpServer_Type.__name__ = "OctetString"
_FirmwareUpdateTftpServer_Object = MibScalar
firmwareUpdateTftpServer = _FirmwareUpdateTftpServer_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 2),
    _FirmwareUpdateTftpServer_Type()
)
firmwareUpdateTftpServer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    firmwareUpdateTftpServer.setStatus("mandatory")


class _FirmwareUpdateFileName_Type(OctetString):
    """Custom type firmwareUpdateFileName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 254),
    )


_FirmwareUpdateFileName_Type.__name__ = "OctetString"
_FirmwareUpdateFileName_Object = MibScalar
firmwareUpdateFileName = _FirmwareUpdateFileName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 3),
    _FirmwareUpdateFileName_Type()
)
firmwareUpdateFileName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    firmwareUpdateFileName.setStatus("mandatory")


class _FirmwareUpdateStart_Type(Integer32):
    """Custom type firmwareUpdateStart based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("execute", 1),
          ("execute-with-reboot", 2),
          ("execute-nowait", 3),
          ("execute-with-reboot-nowait", 4))
    )


_FirmwareUpdateStart_Type.__name__ = "Integer32"
_FirmwareUpdateStart_Object = MibScalar
firmwareUpdateStart = _FirmwareUpdateStart_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 4),
    _FirmwareUpdateStart_Type()
)
firmwareUpdateStart.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    firmwareUpdateStart.setStatus("mandatory")
_FirmwareUpdateStatus_Type = OctetString
_FirmwareUpdateStatus_Object = MibScalar
firmwareUpdateStatus = _FirmwareUpdateStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 5),
    _FirmwareUpdateStatus_Type()
)
firmwareUpdateStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    firmwareUpdateStatus.setStatus("mandatory")
_StandbyFirmwareUpdateStatus_Type = OctetString
_StandbyFirmwareUpdateStatus_Object = MibScalar
standbyFirmwareUpdateStatus = _StandbyFirmwareUpdateStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 6),
    _StandbyFirmwareUpdateStatus_Type()
)
standbyFirmwareUpdateStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    standbyFirmwareUpdateStatus.setStatus("mandatory")
_FirmwareImageNumber_Type = Integer32
_FirmwareImageNumber_Object = MibScalar
firmwareImageNumber = _FirmwareImageNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 7),
    _FirmwareImageNumber_Type()
)
firmwareImageNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    firmwareImageNumber.setStatus("mandatory")
_FirmwareActiveImage_Type = Integer32
_FirmwareActiveImage_Object = MibScalar
firmwareActiveImage = _FirmwareActiveImage_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 8),
    _FirmwareActiveImage_Type()
)
firmwareActiveImage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    firmwareActiveImage.setStatus("mandatory")


class _FirmwareUpdateServer_Type(OctetString):
    """Custom type firmwareUpdateServer based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 254),
    )


_FirmwareUpdateServer_Type.__name__ = "OctetString"
_FirmwareUpdateServer_Object = MibScalar
firmwareUpdateServer = _FirmwareUpdateServer_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 9, 9),
    _FirmwareUpdateServer_Type()
)
firmwareUpdateServer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    firmwareUpdateServer.setStatus("mandatory")
_FileManagement_ObjectIdentity = ObjectIdentity
fileManagement = _FileManagement_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11)
)
_FileTopology_ObjectIdentity = ObjectIdentity
fileTopology = _FileTopology_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 1)
)
_CurrentDirectory_Type = OctetString
_CurrentDirectory_Object = MibScalar
currentDirectory = _CurrentDirectory_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 1, 1),
    _CurrentDirectory_Type()
)
currentDirectory.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    currentDirectory.setStatus("mandatory")
_FileDetailsTable_Object = MibTable
fileDetailsTable = _FileDetailsTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 1, 2)
)
if mibBuilder.loadTexts:
    fileDetailsTable.setStatus("mandatory")
_FileDetailsEntry_Object = MibTableRow
fileDetailsEntry = _FileDetailsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 1, 2, 1)
)
fileDetailsEntry.setIndexNames(
    (0, "CME-MIB", "fileIndex"),
)
if mibBuilder.loadTexts:
    fileDetailsEntry.setStatus("mandatory")
_FileIndex_Type = Integer32
_FileIndex_Object = MibTableColumn
fileIndex = _FileIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 1, 2, 1, 1),
    _FileIndex_Type()
)
fileIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fileIndex.setStatus("mandatory")
_FileName_Type = OctetString
_FileName_Object = MibTableColumn
fileName = _FileName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 1, 2, 1, 2),
    _FileName_Type()
)
fileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fileName.setStatus("mandatory")
_FileLastUpdate_Type = OctetString
_FileLastUpdate_Object = MibTableColumn
fileLastUpdate = _FileLastUpdate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 1, 2, 1, 3),
    _FileLastUpdate_Type()
)
fileLastUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fileLastUpdate.setStatus("mandatory")
_FileSize_Type = OctetString
_FileSize_Object = MibTableColumn
fileSize = _FileSize_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 1, 2, 1, 4),
    _FileSize_Type()
)
fileSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fileSize.setStatus("mandatory")
_FileManagementCmd_Type = OctetString
_FileManagementCmd_Object = MibScalar
fileManagementCmd = _FileManagementCmd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 3),
    _FileManagementCmd_Type()
)
fileManagementCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fileManagementCmd.setStatus("mandatory")
_FileSystemSpaceAvailable_Type = OctetString
_FileSystemSpaceAvailable_Object = MibScalar
fileSystemSpaceAvailable = _FileSystemSpaceAvailable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 11, 6),
    _FileSystemSpaceAvailable_Type()
)
fileSystemSpaceAvailable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fileSystemSpaceAvailable.setStatus("mandatory")
_CmeRemoteChassis_ObjectIdentity = ObjectIdentity
cmeRemoteChassis = _CmeRemoteChassis_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12)
)
_CmeRemoteChassisTable_Object = MibTable
cmeRemoteChassisTable = _CmeRemoteChassisTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1)
)
if mibBuilder.loadTexts:
    cmeRemoteChassisTable.setStatus("mandatory")
_CmeRemoteChassisEntry_Object = MibTableRow
cmeRemoteChassisEntry = _CmeRemoteChassisEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1)
)
cmeRemoteChassisEntry.setIndexNames(
    (0, "CME-MIB", "cmeRemoteChassisIndex"),
)
if mibBuilder.loadTexts:
    cmeRemoteChassisEntry.setStatus("mandatory")
_CmeRemoteChassisIndex_Type = Integer32
_CmeRemoteChassisIndex_Object = MibTableColumn
cmeRemoteChassisIndex = _CmeRemoteChassisIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 1),
    _CmeRemoteChassisIndex_Type()
)
cmeRemoteChassisIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmeRemoteChassisIndex.setStatus("mandatory")
_CmeSystemName_Type = OctetString
_CmeSystemName_Object = MibTableColumn
cmeSystemName = _CmeSystemName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 2),
    _CmeSystemName_Type()
)
cmeSystemName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmeSystemName.setStatus("mandatory")
_CmeType_Type = OctetString
_CmeType_Object = MibTableColumn
cmeType = _CmeType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 3),
    _CmeType_Type()
)
cmeType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmeType.setStatus("mandatory")
_CmeSerial_Type = OctetString
_CmeSerial_Object = MibTableColumn
cmeSerial = _CmeSerial_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 4),
    _CmeSerial_Type()
)
cmeSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmeSerial.setStatus("mandatory")
_CmeFru_Type = OctetString
_CmeFru_Object = MibTableColumn
cmeFru = _CmeFru_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 5),
    _CmeFru_Type()
)
cmeFru.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmeFru.setStatus("mandatory")
_CmeUuid_Type = OctetString
_CmeUuid_Object = MibTableColumn
cmeUuid = _CmeUuid_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 6),
    _CmeUuid_Type()
)
cmeUuid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmeUuid.setStatus("mandatory")
_CmeSlot_Type = OctetString
_CmeSlot_Object = MibTableColumn
cmeSlot = _CmeSlot_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 7),
    _CmeSlot_Type()
)
cmeSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmeSlot.setStatus("mandatory")
_CmeMidPid_Type = OctetString
_CmeMidPid_Object = MibTableColumn
cmeMidPid = _CmeMidPid_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 8),
    _CmeMidPid_Type()
)
cmeMidPid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmeMidPid.setStatus("mandatory")
_CmeMacAddress_Type = OctetString
_CmeMacAddress_Object = MibTableColumn
cmeMacAddress = _CmeMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 9),
    _CmeMacAddress_Type()
)
cmeMacAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmeMacAddress.setStatus("mandatory")
_CmeChassisSerial_Type = OctetString
_CmeChassisSerial_Object = MibTableColumn
cmeChassisSerial = _CmeChassisSerial_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 10),
    _CmeChassisSerial_Type()
)
cmeChassisSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmeChassisSerial.setStatus("mandatory")
_CmeChassisFru_Type = OctetString
_CmeChassisFru_Object = MibTableColumn
cmeChassisFru = _CmeChassisFru_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 11),
    _CmeChassisFru_Type()
)
cmeChassisFru.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmeChassisFru.setStatus("mandatory")
_CmeChassisMachineTypeMode_Type = OctetString
_CmeChassisMachineTypeMode_Object = MibTableColumn
cmeChassisMachineTypeMode = _CmeChassisMachineTypeMode_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 12),
    _CmeChassisMachineTypeMode_Type()
)
cmeChassisMachineTypeMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmeChassisMachineTypeMode.setStatus("mandatory")


class _CmeSystemStatus_Type(Integer32):
    """Custom type cmeSystemStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              2,
              4,
              9,
              170,
              255)
        )
    )
    namedValues = NamedValues(
        *(("critical", 0),
          ("non-Critical", 2),
          ("system-Level", 4),
          ("unknown", 9),
          ("noResponse", 170),
          ("normal", 255))
    )


_CmeSystemStatus_Type.__name__ = "Integer32"
_CmeSystemStatus_Object = MibTableColumn
cmeSystemStatus = _CmeSystemStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 13),
    _CmeSystemStatus_Type()
)
cmeSystemStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmeSystemStatus.setStatus("mandatory")
_CmeChassisUuid_Type = OctetString
_CmeChassisUuid_Object = MibTableColumn
cmeChassisUuid = _CmeChassisUuid_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 14),
    _CmeChassisUuid_Type()
)
cmeChassisUuid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmeChassisUuid.setStatus("mandatory")
_CmeChassisMidPid_Type = OctetString
_CmeChassisMidPid_Object = MibTableColumn
cmeChassisMidPid = _CmeChassisMidPid_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 15),
    _CmeChassisMidPid_Type()
)
cmeChassisMidPid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmeChassisMidPid.setStatus("mandatory")
_CmeChassisId_Type = OctetString
_CmeChassisId_Object = MibTableColumn
cmeChassisId = _CmeChassisId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 16),
    _CmeChassisId_Type()
)
cmeChassisId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmeChassisId.setStatus("mandatory")
_CmeChassisLocation_Type = OctetString
_CmeChassisLocation_Object = MibTableColumn
cmeChassisLocation = _CmeChassisLocation_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 17),
    _CmeChassisLocation_Type()
)
cmeChassisLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmeChassisLocation.setStatus("mandatory")
_CmeChassisRoomId_Type = OctetString
_CmeChassisRoomId_Object = MibTableColumn
cmeChassisRoomId = _CmeChassisRoomId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 18),
    _CmeChassisRoomId_Type()
)
cmeChassisRoomId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmeChassisRoomId.setStatus("mandatory")
_CmeChassisRackId_Type = OctetString
_CmeChassisRackId_Object = MibTableColumn
cmeChassisRackId = _CmeChassisRackId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 19),
    _CmeChassisRackId_Type()
)
cmeChassisRackId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmeChassisRackId.setStatus("mandatory")
_CmeChassisUser_Type = OctetString
_CmeChassisUser_Object = MibTableColumn
cmeChassisUser = _CmeChassisUser_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 20),
    _CmeChassisUser_Type()
)
cmeChassisUser.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmeChassisUser.setStatus("mandatory")
_CmeChassisFruList_Type = OctetString
_CmeChassisFruList_Object = MibTableColumn
cmeChassisFruList = _CmeChassisFruList_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 21),
    _CmeChassisFruList_Type()
)
cmeChassisFruList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmeChassisFruList.setStatus("mandatory")
_CmeFirmwareVersion_Type = OctetString
_CmeFirmwareVersion_Object = MibTableColumn
cmeFirmwareVersion = _CmeFirmwareVersion_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 22),
    _CmeFirmwareVersion_Type()
)
cmeFirmwareVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmeFirmwareVersion.setStatus("mandatory")
_CmeChassisType_Type = OctetString
_CmeChassisType_Object = MibTableColumn
cmeChassisType = _CmeChassisType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 23),
    _CmeChassisType_Type()
)
cmeChassisType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmeChassisType.setStatus("mandatory")


class _CmeIpv4Status_Type(Integer32):
    """Custom type cmeIpv4Status based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_CmeIpv4Status_Type.__name__ = "Integer32"
_CmeIpv4Status_Object = MibTableColumn
cmeIpv4Status = _CmeIpv4Status_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 24),
    _CmeIpv4Status_Type()
)
cmeIpv4Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmeIpv4Status.setStatus("mandatory")
_CmeIpv4Addresses_Type = OctetString
_CmeIpv4Addresses_Object = MibTableColumn
cmeIpv4Addresses = _CmeIpv4Addresses_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 25),
    _CmeIpv4Addresses_Type()
)
cmeIpv4Addresses.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmeIpv4Addresses.setStatus("mandatory")
_CmeIpv4AddressesFloat_Type = OctetString
_CmeIpv4AddressesFloat_Object = MibTableColumn
cmeIpv4AddressesFloat = _CmeIpv4AddressesFloat_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 26),
    _CmeIpv4AddressesFloat_Type()
)
cmeIpv4AddressesFloat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmeIpv4AddressesFloat.setStatus("mandatory")
_CmeIpv4Protocols_Type = OctetString
_CmeIpv4Protocols_Object = MibTableColumn
cmeIpv4Protocols = _CmeIpv4Protocols_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 27),
    _CmeIpv4Protocols_Type()
)
cmeIpv4Protocols.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmeIpv4Protocols.setStatus("mandatory")


class _CmeIpv6Status_Type(Integer32):
    """Custom type cmeIpv6Status based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_CmeIpv6Status_Type.__name__ = "Integer32"
_CmeIpv6Status_Object = MibTableColumn
cmeIpv6Status = _CmeIpv6Status_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 28),
    _CmeIpv6Status_Type()
)
cmeIpv6Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmeIpv6Status.setStatus("mandatory")
_CmeIpv6Addresses_Type = OctetString
_CmeIpv6Addresses_Object = MibTableColumn
cmeIpv6Addresses = _CmeIpv6Addresses_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 29),
    _CmeIpv6Addresses_Type()
)
cmeIpv6Addresses.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmeIpv6Addresses.setStatus("mandatory")
_CmeIpv6AddressesFloat_Type = OctetString
_CmeIpv6AddressesFloat_Object = MibTableColumn
cmeIpv6AddressesFloat = _CmeIpv6AddressesFloat_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 30),
    _CmeIpv6AddressesFloat_Type()
)
cmeIpv6AddressesFloat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmeIpv6AddressesFloat.setStatus("mandatory")
_CmeIpv6Protocols_Type = OctetString
_CmeIpv6Protocols_Object = MibTableColumn
cmeIpv6Protocols = _CmeIpv6Protocols_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 1, 1, 31),
    _CmeIpv6Protocols_Type()
)
cmeIpv6Protocols.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmeIpv6Protocols.setStatus("mandatory")


class _ChassisDiscovery_Type(Integer32):
    """Custom type chassisDiscovery based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_ChassisDiscovery_Type.__name__ = "Integer32"
_ChassisDiscovery_Object = MibScalar
chassisDiscovery = _ChassisDiscovery_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 12, 2),
    _ChassisDiscovery_Type()
)
chassisDiscovery.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chassisDiscovery.setStatus("mandatory")
_ComponentPower_ObjectIdentity = ObjectIdentity
componentPower = _ComponentPower_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31)
)
_ComponentPowerTable_Object = MibTable
componentPowerTable = _ComponentPowerTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 1)
)
if mibBuilder.loadTexts:
    componentPowerTable.setStatus("mandatory")
_ComponentPowerEntry_Object = MibTableRow
componentPowerEntry = _ComponentPowerEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 1, 1)
)
componentPowerEntry.setIndexNames(
    (0, "CME-MIB", "componentPowerTopologyPath"),
)
if mibBuilder.loadTexts:
    componentPowerEntry.setStatus("mandatory")


class _ComponentPowerTopologyPath_Type(OctetString):
    """Custom type componentPowerTopologyPath based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_ComponentPowerTopologyPath_Type.__name__ = "OctetString"
_ComponentPowerTopologyPath_Object = MibTableColumn
componentPowerTopologyPath = _ComponentPowerTopologyPath_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 1, 1, 1),
    _ComponentPowerTopologyPath_Type()
)
componentPowerTopologyPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentPowerTopologyPath.setStatus("mandatory")
_ComponentPowerName_Type = OctetString
_ComponentPowerName_Object = MibTableColumn
componentPowerName = _ComponentPowerName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 1, 1, 2),
    _ComponentPowerName_Type()
)
componentPowerName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentPowerName.setStatus("mandatory")


class _ComponentPowerState_Type(Integer32):
    """Custom type componentPowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("standby", 3),
          ("hibernate", 4),
          ("unknown", 255))
    )


_ComponentPowerState_Type.__name__ = "Integer32"
_ComponentPowerState_Object = MibTableColumn
componentPowerState = _ComponentPowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 1, 1, 3),
    _ComponentPowerState_Type()
)
componentPowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentPowerState.setStatus("mandatory")


class _ComponentPowerAction_Type(Integer32):
    """Custom type componentPowerAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("off", 1),
          ("on", 2),
          ("softoff", 3),
          ("restart", 4),
          ("restartSysMgmtProcessor", 5),
          ("restartNMI", 6))
    )


_ComponentPowerAction_Type.__name__ = "Integer32"
_ComponentPowerAction_Object = MibTableColumn
componentPowerAction = _ComponentPowerAction_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 1, 1, 4),
    _ComponentPowerAction_Type()
)
componentPowerAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    componentPowerAction.setStatus("mandatory")


class _ComponentPowerEnableSMSBootMenu_Type(Integer32):
    """Custom type componentPowerEnableSMSBootMenu based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_ComponentPowerEnableSMSBootMenu_Type.__name__ = "Integer32"
_ComponentPowerEnableSMSBootMenu_Object = MibTableColumn
componentPowerEnableSMSBootMenu = _ComponentPowerEnableSMSBootMenu_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 1, 1, 5),
    _ComponentPowerEnableSMSBootMenu_Type()
)
componentPowerEnableSMSBootMenu.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    componentPowerEnableSMSBootMenu.setStatus("mandatory")
_ComponentPowerTableCacheTimeout_Type = Integer32
_ComponentPowerTableCacheTimeout_Object = MibScalar
componentPowerTableCacheTimeout = _ComponentPowerTableCacheTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 2),
    _ComponentPowerTableCacheTimeout_Type()
)
componentPowerTableCacheTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentPowerTableCacheTimeout.setStatus("mandatory")
_ComponentPowerDetailsTable_Object = MibTable
componentPowerDetailsTable = _ComponentPowerDetailsTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 6)
)
if mibBuilder.loadTexts:
    componentPowerDetailsTable.setStatus("mandatory")
_ComponentPowerDetailsEntry_Object = MibTableRow
componentPowerDetailsEntry = _ComponentPowerDetailsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 6, 1)
)
componentPowerDetailsEntry.setIndexNames(
    (0, "CME-MIB", "componentPowerDetailsTopologyPath"),
)
if mibBuilder.loadTexts:
    componentPowerDetailsEntry.setStatus("mandatory")


class _ComponentPowerDetailsTopologyPath_Type(OctetString):
    """Custom type componentPowerDetailsTopologyPath based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_ComponentPowerDetailsTopologyPath_Type.__name__ = "OctetString"
_ComponentPowerDetailsTopologyPath_Object = MibTableColumn
componentPowerDetailsTopologyPath = _ComponentPowerDetailsTopologyPath_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 6, 1, 1),
    _ComponentPowerDetailsTopologyPath_Type()
)
componentPowerDetailsTopologyPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentPowerDetailsTopologyPath.setStatus("mandatory")
_ComponentPowerDetailsName_Type = OctetString
_ComponentPowerDetailsName_Object = MibTableColumn
componentPowerDetailsName = _ComponentPowerDetailsName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 6, 1, 2),
    _ComponentPowerDetailsName_Type()
)
componentPowerDetailsName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentPowerDetailsName.setStatus("mandatory")
_ComponentPowerDetailsMaxPowerConfig_Type = Integer32
_ComponentPowerDetailsMaxPowerConfig_Object = MibTableColumn
componentPowerDetailsMaxPowerConfig = _ComponentPowerDetailsMaxPowerConfig_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 6, 1, 3),
    _ComponentPowerDetailsMaxPowerConfig_Type()
)
componentPowerDetailsMaxPowerConfig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    componentPowerDetailsMaxPowerConfig.setStatus("mandatory")
_ComponentPowerDetailsEffectiveClockRate_Type = OctetString
_ComponentPowerDetailsEffectiveClockRate_Object = MibTableColumn
componentPowerDetailsEffectiveClockRate = _ComponentPowerDetailsEffectiveClockRate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 6, 1, 4),
    _ComponentPowerDetailsEffectiveClockRate_Type()
)
componentPowerDetailsEffectiveClockRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentPowerDetailsEffectiveClockRate.setStatus("mandatory")
_ComponentPowerDetailsMaximumClockRate_Type = OctetString
_ComponentPowerDetailsMaximumClockRate_Object = MibTableColumn
componentPowerDetailsMaximumClockRate = _ComponentPowerDetailsMaximumClockRate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 6, 1, 5),
    _ComponentPowerDetailsMaximumClockRate_Type()
)
componentPowerDetailsMaximumClockRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentPowerDetailsMaximumClockRate.setStatus("mandatory")


class _ComponentPowerDetailsPowerSaverMode_Type(Integer32):
    """Custom type componentPowerDetailsPowerSaverMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1),
          ("notApplicable", 255))
    )


_ComponentPowerDetailsPowerSaverMode_Type.__name__ = "Integer32"
_ComponentPowerDetailsPowerSaverMode_Object = MibTableColumn
componentPowerDetailsPowerSaverMode = _ComponentPowerDetailsPowerSaverMode_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 6, 1, 6),
    _ComponentPowerDetailsPowerSaverMode_Type()
)
componentPowerDetailsPowerSaverMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    componentPowerDetailsPowerSaverMode.setStatus("mandatory")


class _ComponentPowerDetailsDynamicPowerSaver_Type(Integer32):
    """Custom type componentPowerDetailsDynamicPowerSaver based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1),
          ("notApplicable", 255))
    )


_ComponentPowerDetailsDynamicPowerSaver_Type.__name__ = "Integer32"
_ComponentPowerDetailsDynamicPowerSaver_Object = MibTableColumn
componentPowerDetailsDynamicPowerSaver = _ComponentPowerDetailsDynamicPowerSaver_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 6, 1, 7),
    _ComponentPowerDetailsDynamicPowerSaver_Type()
)
componentPowerDetailsDynamicPowerSaver.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    componentPowerDetailsDynamicPowerSaver.setStatus("mandatory")


class _ComponentPowerDetailsDynamicPowerFavorPerformanceOverPower_Type(Integer32):
    """Custom type componentPowerDetailsDynamicPowerFavorPerformanceOverPower based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1),
          ("notApplicable", 255))
    )


_ComponentPowerDetailsDynamicPowerFavorPerformanceOverPower_Type.__name__ = "Integer32"
_ComponentPowerDetailsDynamicPowerFavorPerformanceOverPower_Object = MibTableColumn
componentPowerDetailsDynamicPowerFavorPerformanceOverPower = _ComponentPowerDetailsDynamicPowerFavorPerformanceOverPower_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 6, 1, 8),
    _ComponentPowerDetailsDynamicPowerFavorPerformanceOverPower_Type()
)
componentPowerDetailsDynamicPowerFavorPerformanceOverPower.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    componentPowerDetailsDynamicPowerFavorPerformanceOverPower.setStatus("mandatory")


class _ComponentPowerDetailsPowerControl_Type(Integer32):
    """Custom type componentPowerDetailsPowerControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              255)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("measurement", 1),
          ("measurementpcap", 2),
          ("psave", 3),
          ("measurementpsave", 4),
          ("measurementpcappsave", 5),
          ("notApplicable", 255))
    )


_ComponentPowerDetailsPowerControl_Type.__name__ = "Integer32"
_ComponentPowerDetailsPowerControl_Object = MibTableColumn
componentPowerDetailsPowerControl = _ComponentPowerDetailsPowerControl_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 6, 1, 9),
    _ComponentPowerDetailsPowerControl_Type()
)
componentPowerDetailsPowerControl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    componentPowerDetailsPowerControl.setStatus("mandatory")
_ComponentPowerDetailsPcapMin_Type = OctetString
_ComponentPowerDetailsPcapMin_Object = MibTableColumn
componentPowerDetailsPcapMin = _ComponentPowerDetailsPcapMin_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 6, 1, 10),
    _ComponentPowerDetailsPcapMin_Type()
)
componentPowerDetailsPcapMin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentPowerDetailsPcapMin.setStatus("mandatory")
_ComponentPowerDetailsPcapGuaranteedMin_Type = OctetString
_ComponentPowerDetailsPcapGuaranteedMin_Object = MibTableColumn
componentPowerDetailsPcapGuaranteedMin = _ComponentPowerDetailsPcapGuaranteedMin_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 6, 1, 11),
    _ComponentPowerDetailsPcapGuaranteedMin_Type()
)
componentPowerDetailsPcapGuaranteedMin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentPowerDetailsPcapGuaranteedMin.setStatus("mandatory")
_ComponentPowerDetailsPcapMax_Type = OctetString
_ComponentPowerDetailsPcapMax_Object = MibTableColumn
componentPowerDetailsPcapMax = _ComponentPowerDetailsPcapMax_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 6, 1, 12),
    _ComponentPowerDetailsPcapMax_Type()
)
componentPowerDetailsPcapMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentPowerDetailsPcapMax.setStatus("mandatory")
_ComponentPowerDetailsStaticCap_Type = OctetString
_ComponentPowerDetailsStaticCap_Object = MibTableColumn
componentPowerDetailsStaticCap = _ComponentPowerDetailsStaticCap_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 6, 1, 13),
    _ComponentPowerDetailsStaticCap_Type()
)
componentPowerDetailsStaticCap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentPowerDetailsStaticCap.setStatus("mandatory")
_ComponentPowerDetailsRuntimeCap_Type = OctetString
_ComponentPowerDetailsRuntimeCap_Object = MibTableColumn
componentPowerDetailsRuntimeCap = _ComponentPowerDetailsRuntimeCap_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 6, 1, 14),
    _ComponentPowerDetailsRuntimeCap_Type()
)
componentPowerDetailsRuntimeCap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentPowerDetailsRuntimeCap.setStatus("mandatory")
_ComponentPowerDetailsTableCacheTimeout_Type = Integer32
_ComponentPowerDetailsTableCacheTimeout_Object = MibScalar
componentPowerDetailsTableCacheTimeout = _ComponentPowerDetailsTableCacheTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 31, 7),
    _ComponentPowerDetailsTableCacheTimeout_Type()
)
componentPowerDetailsTableCacheTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentPowerDetailsTableCacheTimeout.setStatus("mandatory")
_ComponentConfiguration_ObjectIdentity = ObjectIdentity
componentConfiguration = _ComponentConfiguration_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32)
)
_ComponentBayDataTable_Object = MibTable
componentBayDataTable = _ComponentBayDataTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 1)
)
if mibBuilder.loadTexts:
    componentBayDataTable.setStatus("mandatory")
_ComponentBayDataEntry_Object = MibTableRow
componentBayDataEntry = _ComponentBayDataEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 1, 1)
)
componentBayDataEntry.setIndexNames(
    (0, "CME-MIB", "componentBayDataTopologyPath"),
)
if mibBuilder.loadTexts:
    componentBayDataEntry.setStatus("mandatory")


class _ComponentBayDataTopologyPath_Type(OctetString):
    """Custom type componentBayDataTopologyPath based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_ComponentBayDataTopologyPath_Type.__name__ = "OctetString"
_ComponentBayDataTopologyPath_Object = MibTableColumn
componentBayDataTopologyPath = _ComponentBayDataTopologyPath_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 1, 1, 1),
    _ComponentBayDataTopologyPath_Type()
)
componentBayDataTopologyPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentBayDataTopologyPath.setStatus("mandatory")
_ComponentBayDataName_Type = OctetString
_ComponentBayDataName_Object = MibTableColumn
componentBayDataName = _ComponentBayDataName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 1, 1, 2),
    _ComponentBayDataName_Type()
)
componentBayDataName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentBayDataName.setStatus("mandatory")


class _ComponentBayDataStatus_Type(Integer32):
    """Custom type componentBayDataStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("supported", 0),
          ("bsmp", 1),
          ("notPresent", 2),
          ("discovering", 3),
          ("notApplicable", 255))
    )


_ComponentBayDataStatus_Type.__name__ = "Integer32"
_ComponentBayDataStatus_Object = MibTableColumn
componentBayDataStatus = _ComponentBayDataStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 1, 1, 3),
    _ComponentBayDataStatus_Type()
)
componentBayDataStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentBayDataStatus.setStatus("mandatory")


class _ComponentBayData_Type(OctetString):
    """Custom type componentBayData based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 60),
    )


_ComponentBayData_Type.__name__ = "OctetString"
_ComponentBayData_Object = MibTableColumn
componentBayData = _ComponentBayData_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 1, 1, 4),
    _ComponentBayData_Type()
)
componentBayData.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    componentBayData.setStatus("mandatory")
_ComponentBayDataTableCacheTimeout_Type = Integer32
_ComponentBayDataTableCacheTimeout_Object = MibScalar
componentBayDataTableCacheTimeout = _ComponentBayDataTableCacheTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 2),
    _ComponentBayDataTableCacheTimeout_Type()
)
componentBayDataTableCacheTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentBayDataTableCacheTimeout.setStatus("mandatory")
_ComponentEthOverUSBInterfaceTable_Object = MibTable
componentEthOverUSBInterfaceTable = _ComponentEthOverUSBInterfaceTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 6)
)
if mibBuilder.loadTexts:
    componentEthOverUSBInterfaceTable.setStatus("mandatory")
_ComponentEthOverUSBInterfaceEntry_Object = MibTableRow
componentEthOverUSBInterfaceEntry = _ComponentEthOverUSBInterfaceEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 6, 1)
)
componentEthOverUSBInterfaceEntry.setIndexNames(
    (0, "CME-MIB", "componentEthOverUSBInterfaceTopologyPath"),
)
if mibBuilder.loadTexts:
    componentEthOverUSBInterfaceEntry.setStatus("mandatory")


class _ComponentEthOverUSBInterfaceTopologyPath_Type(OctetString):
    """Custom type componentEthOverUSBInterfaceTopologyPath based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_ComponentEthOverUSBInterfaceTopologyPath_Type.__name__ = "OctetString"
_ComponentEthOverUSBInterfaceTopologyPath_Object = MibTableColumn
componentEthOverUSBInterfaceTopologyPath = _ComponentEthOverUSBInterfaceTopologyPath_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 6, 1, 1),
    _ComponentEthOverUSBInterfaceTopologyPath_Type()
)
componentEthOverUSBInterfaceTopologyPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentEthOverUSBInterfaceTopologyPath.setStatus("mandatory")
_ComponentEthOverUSBInterfaceName_Type = OctetString
_ComponentEthOverUSBInterfaceName_Object = MibTableColumn
componentEthOverUSBInterfaceName = _ComponentEthOverUSBInterfaceName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 6, 1, 2),
    _ComponentEthOverUSBInterfaceName_Type()
)
componentEthOverUSBInterfaceName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentEthOverUSBInterfaceName.setStatus("mandatory")


class _ComponentEthOverUSBInterfaceEnable_Type(Integer32):
    """Custom type componentEthOverUSBInterfaceEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1),
          ("notApplicable", 255))
    )


_ComponentEthOverUSBInterfaceEnable_Type.__name__ = "Integer32"
_ComponentEthOverUSBInterfaceEnable_Object = MibTableColumn
componentEthOverUSBInterfaceEnable = _ComponentEthOverUSBInterfaceEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 6, 1, 3),
    _ComponentEthOverUSBInterfaceEnable_Type()
)
componentEthOverUSBInterfaceEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    componentEthOverUSBInterfaceEnable.setStatus("mandatory")
_ComponentEthOverUSBInterfaceTableCacheTimeout_Type = Integer32
_ComponentEthOverUSBInterfaceTableCacheTimeout_Object = MibScalar
componentEthOverUSBInterfaceTableCacheTimeout = _ComponentEthOverUSBInterfaceTableCacheTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 7),
    _ComponentEthOverUSBInterfaceTableCacheTimeout_Type()
)
componentEthOverUSBInterfaceTableCacheTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentEthOverUSBInterfaceTableCacheTimeout.setStatus("mandatory")
_ComponentConfigurationTable_Object = MibTable
componentConfigurationTable = _ComponentConfigurationTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 11)
)
if mibBuilder.loadTexts:
    componentConfigurationTable.setStatus("mandatory")
_ComponentConfigurationEntry_Object = MibTableRow
componentConfigurationEntry = _ComponentConfigurationEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 11, 1)
)
componentConfigurationEntry.setIndexNames(
    (0, "CME-MIB", "componentConfigurationTopologyPath"),
)
if mibBuilder.loadTexts:
    componentConfigurationEntry.setStatus("mandatory")


class _ComponentConfigurationTopologyPath_Type(OctetString):
    """Custom type componentConfigurationTopologyPath based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_ComponentConfigurationTopologyPath_Type.__name__ = "OctetString"
_ComponentConfigurationTopologyPath_Object = MibTableColumn
componentConfigurationTopologyPath = _ComponentConfigurationTopologyPath_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 11, 1, 1),
    _ComponentConfigurationTopologyPath_Type()
)
componentConfigurationTopologyPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentConfigurationTopologyPath.setStatus("mandatory")
_ComponentConfigurationName_Type = OctetString
_ComponentConfigurationName_Object = MibTableColumn
componentConfigurationName = _ComponentConfigurationName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 11, 1, 2),
    _ComponentConfigurationName_Type()
)
componentConfigurationName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    componentConfigurationName.setStatus("mandatory")


class _ComponentConfigurationActiveBootMode_Type(Integer32):
    """Custom type componentConfigurationActiveBootMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("temporary", 1),
          ("permanent", 2),
          ("notApplicable", 255))
    )


_ComponentConfigurationActiveBootMode_Type.__name__ = "Integer32"
_ComponentConfigurationActiveBootMode_Object = MibTableColumn
componentConfigurationActiveBootMode = _ComponentConfigurationActiveBootMode_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 11, 1, 3),
    _ComponentConfigurationActiveBootMode_Type()
)
componentConfigurationActiveBootMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentConfigurationActiveBootMode.setStatus("mandatory")


class _ComponentConfigurationPendingBootMode_Type(Integer32):
    """Custom type componentConfigurationPendingBootMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("temporary", 1),
          ("permanent", 2),
          ("notApplicable", 255))
    )


_ComponentConfigurationPendingBootMode_Type.__name__ = "Integer32"
_ComponentConfigurationPendingBootMode_Object = MibTableColumn
componentConfigurationPendingBootMode = _ComponentConfigurationPendingBootMode_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 11, 1, 4),
    _ComponentConfigurationPendingBootMode_Type()
)
componentConfigurationPendingBootMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    componentConfigurationPendingBootMode.setStatus("mandatory")


class _ComponentConfigurationAutoPowerOn_Type(Integer32):
    """Custom type componentConfigurationAutoPowerOn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("restore", 1),
          ("auto", 2),
          ("manual", 3),
          ("notApplicable", 255))
    )


_ComponentConfigurationAutoPowerOn_Type.__name__ = "Integer32"
_ComponentConfigurationAutoPowerOn_Object = MibTableColumn
componentConfigurationAutoPowerOn = _ComponentConfigurationAutoPowerOn_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 11, 1, 5),
    _ComponentConfigurationAutoPowerOn_Type()
)
componentConfigurationAutoPowerOn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    componentConfigurationAutoPowerOn.setStatus("mandatory")


class _ComponentConfigurationPowerOnRestartDelay_Type(Integer32):
    """Custom type componentConfigurationPowerOnRestartDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 32767),
    )


_ComponentConfigurationPowerOnRestartDelay_Type.__name__ = "Integer32"
_ComponentConfigurationPowerOnRestartDelay_Object = MibTableColumn
componentConfigurationPowerOnRestartDelay = _ComponentConfigurationPowerOnRestartDelay_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 11, 1, 6),
    _ComponentConfigurationPowerOnRestartDelay_Type()
)
componentConfigurationPowerOnRestartDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    componentConfigurationPowerOnRestartDelay.setStatus("mandatory")


class _ComponentConfigurationLocalPowerControlEnable_Type(Integer32):
    """Custom type componentConfigurationLocalPowerControlEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1),
          ("notApplicable", 255))
    )


_ComponentConfigurationLocalPowerControlEnable_Type.__name__ = "Integer32"
_ComponentConfigurationLocalPowerControlEnable_Object = MibTableColumn
componentConfigurationLocalPowerControlEnable = _ComponentConfigurationLocalPowerControlEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 11, 1, 7),
    _ComponentConfigurationLocalPowerControlEnable_Type()
)
componentConfigurationLocalPowerControlEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    componentConfigurationLocalPowerControlEnable.setStatus("mandatory")


class _ComponentConfigurationWakeOnLanControlEnable_Type(Integer32):
    """Custom type componentConfigurationWakeOnLanControlEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1),
          ("notApplicable", 255))
    )


_ComponentConfigurationWakeOnLanControlEnable_Type.__name__ = "Integer32"
_ComponentConfigurationWakeOnLanControlEnable_Object = MibTableColumn
componentConfigurationWakeOnLanControlEnable = _ComponentConfigurationWakeOnLanControlEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 11, 1, 8),
    _ComponentConfigurationWakeOnLanControlEnable_Type()
)
componentConfigurationWakeOnLanControlEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    componentConfigurationWakeOnLanControlEnable.setStatus("mandatory")
_ComponentConfigurationTableCacheTimeout_Type = Integer32
_ComponentConfigurationTableCacheTimeout_Object = MibScalar
componentConfigurationTableCacheTimeout = _ComponentConfigurationTableCacheTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 12),
    _ComponentConfigurationTableCacheTimeout_Type()
)
componentConfigurationTableCacheTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentConfigurationTableCacheTimeout.setStatus("mandatory")
_ComponentNetworkConfiguration_ObjectIdentity = ObjectIdentity
componentNetworkConfiguration = _ComponentNetworkConfiguration_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16)
)
_ComponentIPv4ConfigTable_Object = MibTable
componentIPv4ConfigTable = _ComponentIPv4ConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 1)
)
if mibBuilder.loadTexts:
    componentIPv4ConfigTable.setStatus("mandatory")
_ComponentIPv4ConfigEntry_Object = MibTableRow
componentIPv4ConfigEntry = _ComponentIPv4ConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 1, 1)
)
componentIPv4ConfigEntry.setIndexNames(
    (0, "CME-MIB", "componentIPv4ConfigTopologyPath"),
    (0, "CME-MIB", "componentIPv4ConfigPortIndex"),
)
if mibBuilder.loadTexts:
    componentIPv4ConfigEntry.setStatus("mandatory")


class _ComponentIPv4ConfigTopologyPath_Type(OctetString):
    """Custom type componentIPv4ConfigTopologyPath based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_ComponentIPv4ConfigTopologyPath_Type.__name__ = "OctetString"
_ComponentIPv4ConfigTopologyPath_Object = MibTableColumn
componentIPv4ConfigTopologyPath = _ComponentIPv4ConfigTopologyPath_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 1, 1, 1),
    _ComponentIPv4ConfigTopologyPath_Type()
)
componentIPv4ConfigTopologyPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentIPv4ConfigTopologyPath.setStatus("mandatory")
_ComponentIPv4ConfigPortIndex_Type = Integer32
_ComponentIPv4ConfigPortIndex_Object = MibTableColumn
componentIPv4ConfigPortIndex = _ComponentIPv4ConfigPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 1, 1, 2),
    _ComponentIPv4ConfigPortIndex_Type()
)
componentIPv4ConfigPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentIPv4ConfigPortIndex.setStatus("mandatory")
_ComponentIPv4ConfigName_Type = OctetString
_ComponentIPv4ConfigName_Object = MibTableColumn
componentIPv4ConfigName = _ComponentIPv4ConfigName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 1, 1, 3),
    _ComponentIPv4ConfigName_Type()
)
componentIPv4ConfigName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentIPv4ConfigName.setStatus("mandatory")
_ComponentIPv4ConfigPortLabel_Type = OctetString
_ComponentIPv4ConfigPortLabel_Object = MibTableColumn
componentIPv4ConfigPortLabel = _ComponentIPv4ConfigPortLabel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 1, 1, 4),
    _ComponentIPv4ConfigPortLabel_Type()
)
componentIPv4ConfigPortLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentIPv4ConfigPortLabel.setStatus("mandatory")


class _ComponentIPv4ConfigPhysicalLinkStatus_Type(Integer32):
    """Custom type componentIPv4ConfigPhysicalLinkStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("up", 1),
          ("notApplicable", 255))
    )


_ComponentIPv4ConfigPhysicalLinkStatus_Type.__name__ = "Integer32"
_ComponentIPv4ConfigPhysicalLinkStatus_Object = MibTableColumn
componentIPv4ConfigPhysicalLinkStatus = _ComponentIPv4ConfigPhysicalLinkStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 1, 1, 5),
    _ComponentIPv4ConfigPhysicalLinkStatus_Type()
)
componentIPv4ConfigPhysicalLinkStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentIPv4ConfigPhysicalLinkStatus.setStatus("mandatory")


class _ComponentIPv4ConfigPhysicalLinkState_Type(Integer32):
    """Custom type componentIPv4ConfigPhysicalLinkState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("up", 1),
          ("loopback", 2),
          ("notApplicable", 255))
    )


_ComponentIPv4ConfigPhysicalLinkState_Type.__name__ = "Integer32"
_ComponentIPv4ConfigPhysicalLinkState_Object = MibTableColumn
componentIPv4ConfigPhysicalLinkState = _ComponentIPv4ConfigPhysicalLinkState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 1, 1, 6),
    _ComponentIPv4ConfigPhysicalLinkState_Type()
)
componentIPv4ConfigPhysicalLinkState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    componentIPv4ConfigPhysicalLinkState.setStatus("mandatory")
_ComponentIPv4ConfigIPAddr_Type = IpAddress
_ComponentIPv4ConfigIPAddr_Object = MibTableColumn
componentIPv4ConfigIPAddr = _ComponentIPv4ConfigIPAddr_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 1, 1, 7),
    _ComponentIPv4ConfigIPAddr_Type()
)
componentIPv4ConfigIPAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    componentIPv4ConfigIPAddr.setStatus("mandatory")
_ComponentIPv4ConfigSubnetMask_Type = IpAddress
_ComponentIPv4ConfigSubnetMask_Object = MibTableColumn
componentIPv4ConfigSubnetMask = _ComponentIPv4ConfigSubnetMask_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 1, 1, 8),
    _ComponentIPv4ConfigSubnetMask_Type()
)
componentIPv4ConfigSubnetMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    componentIPv4ConfigSubnetMask.setStatus("mandatory")
_ComponentIPv4ConfigGatewayAddr_Type = IpAddress
_ComponentIPv4ConfigGatewayAddr_Object = MibTableColumn
componentIPv4ConfigGatewayAddr = _ComponentIPv4ConfigGatewayAddr_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 1, 1, 9),
    _ComponentIPv4ConfigGatewayAddr_Type()
)
componentIPv4ConfigGatewayAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    componentIPv4ConfigGatewayAddr.setStatus("mandatory")
_ComponentIPv4ConfigVlanId_Type = Integer32
_ComponentIPv4ConfigVlanId_Object = MibTableColumn
componentIPv4ConfigVlanId = _ComponentIPv4ConfigVlanId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 1, 1, 10),
    _ComponentIPv4ConfigVlanId_Type()
)
componentIPv4ConfigVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    componentIPv4ConfigVlanId.setStatus("mandatory")


class _ComponentIPv4ConfigDHCPEnable_Type(Integer32):
    """Custom type componentIPv4ConfigDHCPEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("useStatic", 0),
          ("useDhcp", 1),
          ("tryDhcpThenTryStatic", 2),
          ("notApplicable", 255))
    )


_ComponentIPv4ConfigDHCPEnable_Type.__name__ = "Integer32"
_ComponentIPv4ConfigDHCPEnable_Object = MibTableColumn
componentIPv4ConfigDHCPEnable = _ComponentIPv4ConfigDHCPEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 1, 1, 11),
    _ComponentIPv4ConfigDHCPEnable_Type()
)
componentIPv4ConfigDHCPEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    componentIPv4ConfigDHCPEnable.setStatus("mandatory")
_ComponentIPv4ConfigMACAddr_Type = OctetString
_ComponentIPv4ConfigMACAddr_Object = MibTableColumn
componentIPv4ConfigMACAddr = _ComponentIPv4ConfigMACAddr_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 1, 1, 12),
    _ComponentIPv4ConfigMACAddr_Type()
)
componentIPv4ConfigMACAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentIPv4ConfigMACAddr.setStatus("mandatory")
_ComponentIPv4ConfigTableCacheTimeout_Type = Integer32
_ComponentIPv4ConfigTableCacheTimeout_Object = MibScalar
componentIPv4ConfigTableCacheTimeout = _ComponentIPv4ConfigTableCacheTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 2),
    _ComponentIPv4ConfigTableCacheTimeout_Type()
)
componentIPv4ConfigTableCacheTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentIPv4ConfigTableCacheTimeout.setStatus("mandatory")
_ComponentIPv6Config_ObjectIdentity = ObjectIdentity
componentIPv6Config = _ComponentIPv6Config_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11)
)
_ComponentIPv6ConfigTable_Object = MibTable
componentIPv6ConfigTable = _ComponentIPv6ConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 1)
)
if mibBuilder.loadTexts:
    componentIPv6ConfigTable.setStatus("mandatory")
_ComponentIPv6ConfigEntry_Object = MibTableRow
componentIPv6ConfigEntry = _ComponentIPv6ConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 1, 1)
)
componentIPv6ConfigEntry.setIndexNames(
    (0, "CME-MIB", "componentIPv6ConfigTopologyPath"),
    (0, "CME-MIB", "componentIPv6ConfigPortIndex"),
)
if mibBuilder.loadTexts:
    componentIPv6ConfigEntry.setStatus("mandatory")


class _ComponentIPv6ConfigTopologyPath_Type(OctetString):
    """Custom type componentIPv6ConfigTopologyPath based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_ComponentIPv6ConfigTopologyPath_Type.__name__ = "OctetString"
_ComponentIPv6ConfigTopologyPath_Object = MibTableColumn
componentIPv6ConfigTopologyPath = _ComponentIPv6ConfigTopologyPath_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 1, 1, 1),
    _ComponentIPv6ConfigTopologyPath_Type()
)
componentIPv6ConfigTopologyPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentIPv6ConfigTopologyPath.setStatus("mandatory")
_ComponentIPv6ConfigPortIndex_Type = Integer32
_ComponentIPv6ConfigPortIndex_Object = MibTableColumn
componentIPv6ConfigPortIndex = _ComponentIPv6ConfigPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 1, 1, 2),
    _ComponentIPv6ConfigPortIndex_Type()
)
componentIPv6ConfigPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentIPv6ConfigPortIndex.setStatus("mandatory")
_ComponentIPv6ConfigName_Type = OctetString
_ComponentIPv6ConfigName_Object = MibTableColumn
componentIPv6ConfigName = _ComponentIPv6ConfigName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 1, 1, 3),
    _ComponentIPv6ConfigName_Type()
)
componentIPv6ConfigName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentIPv6ConfigName.setStatus("mandatory")


class _ComponentIPv6ConfigEnabled_Type(Integer32):
    """Custom type componentIPv6ConfigEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_ComponentIPv6ConfigEnabled_Type.__name__ = "Integer32"
_ComponentIPv6ConfigEnabled_Object = MibTableColumn
componentIPv6ConfigEnabled = _ComponentIPv6ConfigEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 1, 1, 4),
    _ComponentIPv6ConfigEnabled_Type()
)
componentIPv6ConfigEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    componentIPv6ConfigEnabled.setStatus("mandatory")


class _ComponentIPv6ConfigStatic_Type(Integer32):
    """Custom type componentIPv6ConfigStatic based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_ComponentIPv6ConfigStatic_Type.__name__ = "Integer32"
_ComponentIPv6ConfigStatic_Object = MibTableColumn
componentIPv6ConfigStatic = _ComponentIPv6ConfigStatic_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 1, 1, 5),
    _ComponentIPv6ConfigStatic_Type()
)
componentIPv6ConfigStatic.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    componentIPv6ConfigStatic.setStatus("mandatory")


class _ComponentDHCPv6ConfigEnabled_Type(Integer32):
    """Custom type componentDHCPv6ConfigEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_ComponentDHCPv6ConfigEnabled_Type.__name__ = "Integer32"
_ComponentDHCPv6ConfigEnabled_Object = MibTableColumn
componentDHCPv6ConfigEnabled = _ComponentDHCPv6ConfigEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 1, 1, 6),
    _ComponentDHCPv6ConfigEnabled_Type()
)
componentDHCPv6ConfigEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    componentDHCPv6ConfigEnabled.setStatus("mandatory")


class _ComponentIPv6ConfigStatelessEnabled_Type(Integer32):
    """Custom type componentIPv6ConfigStatelessEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_ComponentIPv6ConfigStatelessEnabled_Type.__name__ = "Integer32"
_ComponentIPv6ConfigStatelessEnabled_Object = MibTableColumn
componentIPv6ConfigStatelessEnabled = _ComponentIPv6ConfigStatelessEnabled_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 1, 1, 7),
    _ComponentIPv6ConfigStatelessEnabled_Type()
)
componentIPv6ConfigStatelessEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    componentIPv6ConfigStatelessEnabled.setStatus("mandatory")
_ComponentIPv6ConfigTableCacheTimeout_Type = Integer32
_ComponentIPv6ConfigTableCacheTimeout_Object = MibScalar
componentIPv6ConfigTableCacheTimeout = _ComponentIPv6ConfigTableCacheTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 2),
    _ComponentIPv6ConfigTableCacheTimeout_Type()
)
componentIPv6ConfigTableCacheTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentIPv6ConfigTableCacheTimeout.setStatus("mandatory")
_ComponentIPv6AddressTable_Object = MibTable
componentIPv6AddressTable = _ComponentIPv6AddressTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 6)
)
if mibBuilder.loadTexts:
    componentIPv6AddressTable.setStatus("mandatory")
_ComponentIPv6AddressEntry_Object = MibTableRow
componentIPv6AddressEntry = _ComponentIPv6AddressEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 6, 1)
)
componentIPv6AddressEntry.setIndexNames(
    (0, "CME-MIB", "componentIPv6AddressTopologyPath"),
    (0, "CME-MIB", "componentIPv6AddressPortIndex"),
    (0, "CME-MIB", "componentIPv6AddressEntryIndex"),
)
if mibBuilder.loadTexts:
    componentIPv6AddressEntry.setStatus("mandatory")


class _ComponentIPv6AddressTopologyPath_Type(OctetString):
    """Custom type componentIPv6AddressTopologyPath based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_ComponentIPv6AddressTopologyPath_Type.__name__ = "OctetString"
_ComponentIPv6AddressTopologyPath_Object = MibTableColumn
componentIPv6AddressTopologyPath = _ComponentIPv6AddressTopologyPath_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 6, 1, 1),
    _ComponentIPv6AddressTopologyPath_Type()
)
componentIPv6AddressTopologyPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentIPv6AddressTopologyPath.setStatus("mandatory")
_ComponentIPv6AddressPortIndex_Type = Integer32
_ComponentIPv6AddressPortIndex_Object = MibTableColumn
componentIPv6AddressPortIndex = _ComponentIPv6AddressPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 6, 1, 2),
    _ComponentIPv6AddressPortIndex_Type()
)
componentIPv6AddressPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentIPv6AddressPortIndex.setStatus("mandatory")
_ComponentIPv6AddressEntryIndex_Type = Integer32
_ComponentIPv6AddressEntryIndex_Object = MibTableColumn
componentIPv6AddressEntryIndex = _ComponentIPv6AddressEntryIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 6, 1, 3),
    _ComponentIPv6AddressEntryIndex_Type()
)
componentIPv6AddressEntryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentIPv6AddressEntryIndex.setStatus("mandatory")
_ComponentIPv6AddressName_Type = OctetString
_ComponentIPv6AddressName_Object = MibTableColumn
componentIPv6AddressName = _ComponentIPv6AddressName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 6, 1, 4),
    _ComponentIPv6AddressName_Type()
)
componentIPv6AddressName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentIPv6AddressName.setStatus("mandatory")


class _ComponentIPv6AddressType_Type(Integer32):
    """Custom type componentIPv6AddressType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("active-static", 1),
          ("dhcp6", 2),
          ("link-local", 3),
          ("autconfig", 4),
          ("current", 5))
    )


_ComponentIPv6AddressType_Type.__name__ = "Integer32"
_ComponentIPv6AddressType_Object = MibTableColumn
componentIPv6AddressType = _ComponentIPv6AddressType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 6, 1, 5),
    _ComponentIPv6AddressType_Type()
)
componentIPv6AddressType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentIPv6AddressType.setStatus("mandatory")
_ComponentIPv6Address_Type = InetAddressIPv6
_ComponentIPv6Address_Object = MibTableColumn
componentIPv6Address = _ComponentIPv6Address_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 6, 1, 6),
    _ComponentIPv6Address_Type()
)
componentIPv6Address.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    componentIPv6Address.setStatus("mandatory")


class _ComponentIPv6AddressPrefixLen_Type(Integer32):
    """Custom type componentIPv6AddressPrefixLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_ComponentIPv6AddressPrefixLen_Type.__name__ = "Integer32"
_ComponentIPv6AddressPrefixLen_Object = MibTableColumn
componentIPv6AddressPrefixLen = _ComponentIPv6AddressPrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 6, 1, 7),
    _ComponentIPv6AddressPrefixLen_Type()
)
componentIPv6AddressPrefixLen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    componentIPv6AddressPrefixLen.setStatus("mandatory")
_ComponentIPv6AddressDefaultRoute_Type = InetAddressIPv6
_ComponentIPv6AddressDefaultRoute_Object = MibTableColumn
componentIPv6AddressDefaultRoute = _ComponentIPv6AddressDefaultRoute_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 6, 1, 8),
    _ComponentIPv6AddressDefaultRoute_Type()
)
componentIPv6AddressDefaultRoute.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    componentIPv6AddressDefaultRoute.setStatus("mandatory")
_ComponentIPv6AddressTableCacheTimeout_Type = Integer32
_ComponentIPv6AddressTableCacheTimeout_Object = MibScalar
componentIPv6AddressTableCacheTimeout = _ComponentIPv6AddressTableCacheTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 16, 11, 7),
    _ComponentIPv6AddressTableCacheTimeout_Type()
)
componentIPv6AddressTableCacheTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentIPv6AddressTableCacheTimeout.setStatus("mandatory")
_ComponentTimeTable_Object = MibTable
componentTimeTable = _ComponentTimeTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 20)
)
if mibBuilder.loadTexts:
    componentTimeTable.setStatus("mandatory")
_ComponentTimeEntry_Object = MibTableRow
componentTimeEntry = _ComponentTimeEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 20, 1)
)
componentTimeEntry.setIndexNames(
    (0, "CME-MIB", "componentTimeTopologyPath"),
)
if mibBuilder.loadTexts:
    componentTimeEntry.setStatus("mandatory")


class _ComponentTimeTopologyPath_Type(OctetString):
    """Custom type componentTimeTopologyPath based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_ComponentTimeTopologyPath_Type.__name__ = "OctetString"
_ComponentTimeTopologyPath_Object = MibTableColumn
componentTimeTopologyPath = _ComponentTimeTopologyPath_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 20, 1, 1),
    _ComponentTimeTopologyPath_Type()
)
componentTimeTopologyPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentTimeTopologyPath.setStatus("mandatory")
_ComponentTimeName_Type = OctetString
_ComponentTimeName_Object = MibTableColumn
componentTimeName = _ComponentTimeName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 20, 1, 2),
    _ComponentTimeName_Type()
)
componentTimeName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentTimeName.setStatus("mandatory")


class _ComponentTimeNTPEnable_Type(Integer32):
    """Custom type componentTimeNTPEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1),
          ("notApplicable", 255))
    )


_ComponentTimeNTPEnable_Type.__name__ = "Integer32"
_ComponentTimeNTPEnable_Object = MibTableColumn
componentTimeNTPEnable = _ComponentTimeNTPEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 20, 1, 3),
    _ComponentTimeNTPEnable_Type()
)
componentTimeNTPEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    componentTimeNTPEnable.setStatus("mandatory")


class _ComponentTimeNTPFrequency_Type(Integer32):
    """Custom type componentTimeNTPFrequency based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 44640),
    )


_ComponentTimeNTPFrequency_Type.__name__ = "Integer32"
_ComponentTimeNTPFrequency_Object = MibTableColumn
componentTimeNTPFrequency = _ComponentTimeNTPFrequency_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 20, 1, 4),
    _ComponentTimeNTPFrequency_Type()
)
componentTimeNTPFrequency.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    componentTimeNTPFrequency.setStatus("mandatory")
_ComponentTimeTableCacheTimeout_Type = Integer32
_ComponentTimeTableCacheTimeout_Object = MibScalar
componentTimeTableCacheTimeout = _ComponentTimeTableCacheTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 21),
    _ComponentTimeTableCacheTimeout_Type()
)
componentTimeTableCacheTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentTimeTableCacheTimeout.setStatus("mandatory")
_ComponentSolTable_Object = MibTable
componentSolTable = _ComponentSolTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 26)
)
if mibBuilder.loadTexts:
    componentSolTable.setStatus("mandatory")
_ComponentSolEntry_Object = MibTableRow
componentSolEntry = _ComponentSolEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 26, 1)
)
componentSolEntry.setIndexNames(
    (0, "CME-MIB", "componentSolTopologyPath"),
)
if mibBuilder.loadTexts:
    componentSolEntry.setStatus("mandatory")


class _ComponentSolTopologyPath_Type(OctetString):
    """Custom type componentSolTopologyPath based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_ComponentSolTopologyPath_Type.__name__ = "OctetString"
_ComponentSolTopologyPath_Object = MibTableColumn
componentSolTopologyPath = _ComponentSolTopologyPath_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 26, 1, 1),
    _ComponentSolTopologyPath_Type()
)
componentSolTopologyPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentSolTopologyPath.setStatus("mandatory")
_ComponentSolName_Type = OctetString
_ComponentSolName_Object = MibTableColumn
componentSolName = _ComponentSolName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 26, 1, 2),
    _ComponentSolName_Type()
)
componentSolName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentSolName.setStatus("mandatory")


class _ComponentSolEnable_Type(Integer32):
    """Custom type componentSolEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("solDisabled", 0),
          ("solEnabled", 1))
    )


_ComponentSolEnable_Type.__name__ = "Integer32"
_ComponentSolEnable_Object = MibTableColumn
componentSolEnable = _ComponentSolEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 26, 1, 3),
    _ComponentSolEnable_Type()
)
componentSolEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    componentSolEnable.setStatus("mandatory")
_ComponentSolIpAddr_Type = IpAddress
_ComponentSolIpAddr_Object = MibTableColumn
componentSolIpAddr = _ComponentSolIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 26, 1, 4),
    _ComponentSolIpAddr_Type()
)
componentSolIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentSolIpAddr.setStatus("deprecated")


class _ComponentSolSessionStatus_Type(Integer32):
    """Custom type componentSolSessionStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("solSessionNotReady", 0),
          ("solSessionReady", 1),
          ("solSessionActive", 2))
    )


_ComponentSolSessionStatus_Type.__name__ = "Integer32"
_ComponentSolSessionStatus_Object = MibTableColumn
componentSolSessionStatus = _ComponentSolSessionStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 26, 1, 5),
    _ComponentSolSessionStatus_Type()
)
componentSolSessionStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentSolSessionStatus.setStatus("mandatory")


class _ComponentSolCapability_Type(Integer32):
    """Custom type componentSolCapability based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("notSupport", 0),
          ("support", 1))
    )


_ComponentSolCapability_Type.__name__ = "Integer32"
_ComponentSolCapability_Object = MibTableColumn
componentSolCapability = _ComponentSolCapability_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 26, 1, 6),
    _ComponentSolCapability_Type()
)
componentSolCapability.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentSolCapability.setStatus("mandatory")
_ComponentSolIpAddr6_Type = InetAddressIPv6
_ComponentSolIpAddr6_Object = MibTableColumn
componentSolIpAddr6 = _ComponentSolIpAddr6_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 26, 1, 7),
    _ComponentSolIpAddr6_Type()
)
componentSolIpAddr6.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentSolIpAddr6.setStatus("mandatory")
_ComponentSolRetryInterval_Type = Integer32
_ComponentSolRetryInterval_Object = MibTableColumn
componentSolRetryInterval = _ComponentSolRetryInterval_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 26, 1, 8),
    _ComponentSolRetryInterval_Type()
)
componentSolRetryInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentSolRetryInterval.setStatus("mandatory")
_ComponentSolRetryCount_Type = Integer32
_ComponentSolRetryCount_Object = MibTableColumn
componentSolRetryCount = _ComponentSolRetryCount_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 26, 1, 9),
    _ComponentSolRetryCount_Type()
)
componentSolRetryCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentSolRetryCount.setStatus("mandatory")
_ComponentSolBytesSent_Type = Integer32
_ComponentSolBytesSent_Object = MibTableColumn
componentSolBytesSent = _ComponentSolBytesSent_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 26, 1, 10),
    _ComponentSolBytesSent_Type()
)
componentSolBytesSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentSolBytesSent.setStatus("mandatory")
_ComponentSolBytesReceived_Type = Integer32
_ComponentSolBytesReceived_Object = MibTableColumn
componentSolBytesReceived = _ComponentSolBytesReceived_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 26, 1, 11),
    _ComponentSolBytesReceived_Type()
)
componentSolBytesReceived.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentSolBytesReceived.setStatus("mandatory")
_ComponentSolDestinationMAC_Type = OctetString
_ComponentSolDestinationMAC_Object = MibTableColumn
componentSolDestinationMAC = _ComponentSolDestinationMAC_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 26, 1, 12),
    _ComponentSolDestinationMAC_Type()
)
componentSolDestinationMAC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentSolDestinationMAC.setStatus("mandatory")
_ComponentSolConsoleUserId_Type = OctetString
_ComponentSolConsoleUserId_Object = MibTableColumn
componentSolConsoleUserId = _ComponentSolConsoleUserId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 26, 1, 13),
    _ComponentSolConsoleUserId_Type()
)
componentSolConsoleUserId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentSolConsoleUserId.setStatus("mandatory")
_ComponentSolConsoleLoginFrom_Type = OctetString
_ComponentSolConsoleLoginFrom_Object = MibTableColumn
componentSolConsoleLoginFrom = _ComponentSolConsoleLoginFrom_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 26, 1, 14),
    _ComponentSolConsoleLoginFrom_Type()
)
componentSolConsoleLoginFrom.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentSolConsoleLoginFrom.setStatus("mandatory")
_ComponentSolConsoleLoginStart_Type = OctetString
_ComponentSolConsoleLoginStart_Object = MibTableColumn
componentSolConsoleLoginStart = _ComponentSolConsoleLoginStart_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 26, 1, 15),
    _ComponentSolConsoleLoginStart_Type()
)
componentSolConsoleLoginStart.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentSolConsoleLoginStart.setStatus("mandatory")
_ComponentSolConsoleLoginEnd_Type = OctetString
_ComponentSolConsoleLoginEnd_Object = MibTableColumn
componentSolConsoleLoginEnd = _ComponentSolConsoleLoginEnd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 26, 1, 16),
    _ComponentSolConsoleLoginEnd_Type()
)
componentSolConsoleLoginEnd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentSolConsoleLoginEnd.setStatus("mandatory")
_ComponentSolTableCacheTimeout_Type = Integer32
_ComponentSolTableCacheTimeout_Object = MibScalar
componentSolTableCacheTimeout = _ComponentSolTableCacheTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 32, 27),
    _ComponentSolTableCacheTimeout_Type()
)
componentSolTableCacheTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentSolTableCacheTimeout.setStatus("mandatory")
_ComponentMonitors_ObjectIdentity = ObjectIdentity
componentMonitors = _ComponentMonitors_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37)
)
_ComponentSystemStatusTable_Object = MibTable
componentSystemStatusTable = _ComponentSystemStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 1)
)
if mibBuilder.loadTexts:
    componentSystemStatusTable.setStatus("mandatory")
_ComponentSystemStatusEntry_Object = MibTableRow
componentSystemStatusEntry = _ComponentSystemStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 1, 1)
)
componentSystemStatusEntry.setIndexNames(
    (0, "CME-MIB", "componentStatusTopologyPath"),
)
if mibBuilder.loadTexts:
    componentSystemStatusEntry.setStatus("mandatory")


class _ComponentStatusTopologyPath_Type(OctetString):
    """Custom type componentStatusTopologyPath based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_ComponentStatusTopologyPath_Type.__name__ = "OctetString"
_ComponentStatusTopologyPath_Object = MibTableColumn
componentStatusTopologyPath = _ComponentStatusTopologyPath_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 1, 1, 1),
    _ComponentStatusTopologyPath_Type()
)
componentStatusTopologyPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentStatusTopologyPath.setStatus("mandatory")
_ComponentStatusName_Type = OctetString
_ComponentStatusName_Object = MibTableColumn
componentStatusName = _ComponentStatusName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 1, 1, 2),
    _ComponentStatusName_Type()
)
componentStatusName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentStatusName.setStatus("mandatory")


class _ComponentStatusPowerState_Type(Integer32):
    """Custom type componentStatusPowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("standby", 3),
          ("hibernate", 4))
    )


_ComponentStatusPowerState_Type.__name__ = "Integer32"
_ComponentStatusPowerState_Object = MibTableColumn
componentStatusPowerState = _ComponentStatusPowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 1, 1, 3),
    _ComponentStatusPowerState_Type()
)
componentStatusPowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentStatusPowerState.setStatus("mandatory")


class _ComponentStatusHealthState_Type(Integer32):
    """Custom type componentStatusHealthState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("good", 1),
          ("warning", 2),
          ("critical", 3),
          ("kernelMode", 4),
          ("discovering", 5),
          ("commError", 6),
          ("noPower", 7),
          ("flashing", 8),
          ("initFailure", 9),
          ("insufficientPower", 10),
          ("powerDenied", 11),
          ("maintMode", 12),
          ("firehoseDump", 13))
    )


_ComponentStatusHealthState_Type.__name__ = "Integer32"
_ComponentStatusHealthState_Object = MibTableColumn
componentStatusHealthState = _ComponentStatusHealthState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 1, 1, 4),
    _ComponentStatusHealthState_Type()
)
componentStatusHealthState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentStatusHealthState.setStatus("mandatory")


class _ComponentStatusPowerEnable_Type(Integer32):
    """Custom type componentStatusPowerEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_ComponentStatusPowerEnable_Type.__name__ = "Integer32"
_ComponentStatusPowerEnable_Object = MibTableColumn
componentStatusPowerEnable = _ComponentStatusPowerEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 1, 1, 5),
    _ComponentStatusPowerEnable_Type()
)
componentStatusPowerEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentStatusPowerEnable.setStatus("mandatory")


class _ComponentStatusWakeOnLanEnable_Type(Integer32):
    """Custom type componentStatusWakeOnLanEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1),
          ("notApplicable", 255))
    )


_ComponentStatusWakeOnLanEnable_Type.__name__ = "Integer32"
_ComponentStatusWakeOnLanEnable_Object = MibTableColumn
componentStatusWakeOnLanEnable = _ComponentStatusWakeOnLanEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 1, 1, 6),
    _ComponentStatusWakeOnLanEnable_Type()
)
componentStatusWakeOnLanEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentStatusWakeOnLanEnable.setStatus("mandatory")
_ComponentStatusWidth_Type = Integer32
_ComponentStatusWidth_Object = MibTableColumn
componentStatusWidth = _ComponentStatusWidth_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 1, 1, 7),
    _ComponentStatusWidth_Type()
)
componentStatusWidth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentStatusWidth.setStatus("mandatory")
_ComponentStatusIOCompatibility_Type = OctetString
_ComponentStatusIOCompatibility_Object = MibTableColumn
componentStatusIOCompatibility = _ComponentStatusIOCompatibility_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 1, 1, 21),
    _ComponentStatusIOCompatibility_Type()
)
componentStatusIOCompatibility.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentStatusIOCompatibility.setStatus("mandatory")


class _ComponentStatusInventoryReady_Type(Integer32):
    """Custom type componentStatusInventoryReady based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("notReady", 0),
          ("ready", 1))
    )


_ComponentStatusInventoryReady_Type.__name__ = "Integer32"
_ComponentStatusInventoryReady_Object = MibTableColumn
componentStatusInventoryReady = _ComponentStatusInventoryReady_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 1, 1, 22),
    _ComponentStatusInventoryReady_Type()
)
componentStatusInventoryReady.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentStatusInventoryReady.setStatus("mandatory")
_ComponentStatusBootCountPowerOnTimeBoots_Type = Integer32
_ComponentStatusBootCountPowerOnTimeBoots_Object = MibTableColumn
componentStatusBootCountPowerOnTimeBoots = _ComponentStatusBootCountPowerOnTimeBoots_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 1, 1, 23),
    _ComponentStatusBootCountPowerOnTimeBoots_Type()
)
componentStatusBootCountPowerOnTimeBoots.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    componentStatusBootCountPowerOnTimeBoots.setStatus("mandatory")
_ComponentStatusBootCountPowerOnTimeSecs_Type = Integer32
_ComponentStatusBootCountPowerOnTimeSecs_Object = MibTableColumn
componentStatusBootCountPowerOnTimeSecs = _ComponentStatusBootCountPowerOnTimeSecs_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 1, 1, 24),
    _ComponentStatusBootCountPowerOnTimeSecs_Type()
)
componentStatusBootCountPowerOnTimeSecs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    componentStatusBootCountPowerOnTimeSecs.setStatus("mandatory")
_ComponentSystemStatusTableCacheTimeout_Type = Integer32
_ComponentSystemStatusTableCacheTimeout_Object = MibScalar
componentSystemStatusTableCacheTimeout = _ComponentSystemStatusTableCacheTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 2),
    _ComponentSystemStatusTableCacheTimeout_Type()
)
componentSystemStatusTableCacheTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentSystemStatusTableCacheTimeout.setStatus("mandatory")
_ComponentHealthSummaryTable_Object = MibTable
componentHealthSummaryTable = _ComponentHealthSummaryTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 6)
)
if mibBuilder.loadTexts:
    componentHealthSummaryTable.setStatus("mandatory")
_ComponentHealthSummaryEntry_Object = MibTableRow
componentHealthSummaryEntry = _ComponentHealthSummaryEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 6, 1)
)
componentHealthSummaryEntry.setIndexNames(
    (0, "CME-MIB", "componentHealthTopologyPath"),
    (0, "CME-MIB", "componentHealthEventIndex"),
)
if mibBuilder.loadTexts:
    componentHealthSummaryEntry.setStatus("mandatory")


class _ComponentHealthTopologyPath_Type(OctetString):
    """Custom type componentHealthTopologyPath based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_ComponentHealthTopologyPath_Type.__name__ = "OctetString"
_ComponentHealthTopologyPath_Object = MibTableColumn
componentHealthTopologyPath = _ComponentHealthTopologyPath_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 6, 1, 1),
    _ComponentHealthTopologyPath_Type()
)
componentHealthTopologyPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentHealthTopologyPath.setStatus("mandatory")


class _ComponentHealthEventIndex_Type(Integer32):
    """Custom type componentHealthEventIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_ComponentHealthEventIndex_Type.__name__ = "Integer32"
_ComponentHealthEventIndex_Object = MibTableColumn
componentHealthEventIndex = _ComponentHealthEventIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 6, 1, 2),
    _ComponentHealthEventIndex_Type()
)
componentHealthEventIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentHealthEventIndex.setStatus("mandatory")
_ComponentHealthSummaryName_Type = OctetString
_ComponentHealthSummaryName_Object = MibTableColumn
componentHealthSummaryName = _ComponentHealthSummaryName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 6, 1, 3),
    _ComponentHealthSummaryName_Type()
)
componentHealthSummaryName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentHealthSummaryName.setStatus("mandatory")
_ComponentHealthSummarySeverity_Type = OctetString
_ComponentHealthSummarySeverity_Object = MibTableColumn
componentHealthSummarySeverity = _ComponentHealthSummarySeverity_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 6, 1, 4),
    _ComponentHealthSummarySeverity_Type()
)
componentHealthSummarySeverity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentHealthSummarySeverity.setStatus("mandatory")
_ComponentHealthSummaryDescription_Type = OctetString
_ComponentHealthSummaryDescription_Object = MibTableColumn
componentHealthSummaryDescription = _ComponentHealthSummaryDescription_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 6, 1, 5),
    _ComponentHealthSummaryDescription_Type()
)
componentHealthSummaryDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentHealthSummaryDescription.setStatus("mandatory")
_ComponentHealthSummaryDateTime_Type = OctetString
_ComponentHealthSummaryDateTime_Object = MibTableColumn
componentHealthSummaryDateTime = _ComponentHealthSummaryDateTime_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 6, 1, 6),
    _ComponentHealthSummaryDateTime_Type()
)
componentHealthSummaryDateTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentHealthSummaryDateTime.setStatus("mandatory")
_ComponentHealthSummaryEventID_Type = OctetString
_ComponentHealthSummaryEventID_Object = MibTableColumn
componentHealthSummaryEventID = _ComponentHealthSummaryEventID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 6, 1, 7),
    _ComponentHealthSummaryEventID_Type()
)
componentHealthSummaryEventID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentHealthSummaryEventID.setStatus("mandatory")
_ComponentHealthSummaryTableCacheTimeout_Type = Integer32
_ComponentHealthSummaryTableCacheTimeout_Object = MibScalar
componentHealthSummaryTableCacheTimeout = _ComponentHealthSummaryTableCacheTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 7),
    _ComponentHealthSummaryTableCacheTimeout_Type()
)
componentHealthSummaryTableCacheTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentHealthSummaryTableCacheTimeout.setStatus("mandatory")
_ComponentMACAddressTable_Object = MibTable
componentMACAddressTable = _ComponentMACAddressTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 11)
)
if mibBuilder.loadTexts:
    componentMACAddressTable.setStatus("mandatory")
_ComponentMACAddressEntry_Object = MibTableRow
componentMACAddressEntry = _ComponentMACAddressEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 11, 1)
)
componentMACAddressEntry.setIndexNames(
    (0, "CME-MIB", "componentMACAddressTopologyPath"),
    (0, "CME-MIB", "componentMACAddressIndex"),
)
if mibBuilder.loadTexts:
    componentMACAddressEntry.setStatus("mandatory")


class _ComponentMACAddressTopologyPath_Type(OctetString):
    """Custom type componentMACAddressTopologyPath based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_ComponentMACAddressTopologyPath_Type.__name__ = "OctetString"
_ComponentMACAddressTopologyPath_Object = MibTableColumn
componentMACAddressTopologyPath = _ComponentMACAddressTopologyPath_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 11, 1, 1),
    _ComponentMACAddressTopologyPath_Type()
)
componentMACAddressTopologyPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentMACAddressTopologyPath.setStatus("mandatory")
_ComponentMACAddressIndex_Type = Integer32
_ComponentMACAddressIndex_Object = MibTableColumn
componentMACAddressIndex = _ComponentMACAddressIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 11, 1, 2),
    _ComponentMACAddressIndex_Type()
)
componentMACAddressIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentMACAddressIndex.setStatus("mandatory")
_ComponentMACAddressName_Type = OctetString
_ComponentMACAddressName_Object = MibTableColumn
componentMACAddressName = _ComponentMACAddressName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 11, 1, 3),
    _ComponentMACAddressName_Type()
)
componentMACAddressName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentMACAddressName.setStatus("mandatory")
_ComponentMACAddress_Type = OctetString
_ComponentMACAddress_Object = MibTableColumn
componentMACAddress = _ComponentMACAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 11, 1, 4),
    _ComponentMACAddress_Type()
)
componentMACAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentMACAddress.setStatus("mandatory")
_ComponentMACAddressTableCacheTimeout_Type = Integer32
_ComponentMACAddressTableCacheTimeout_Object = MibScalar
componentMACAddressTableCacheTimeout = _ComponentMACAddressTableCacheTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 12),
    _ComponentMACAddressTableCacheTimeout_Type()
)
componentMACAddressTableCacheTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentMACAddressTableCacheTimeout.setStatus("mandatory")
_ComponentUniqueIDsTable_Object = MibTable
componentUniqueIDsTable = _ComponentUniqueIDsTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 13)
)
if mibBuilder.loadTexts:
    componentUniqueIDsTable.setStatus("mandatory")
_ComponentUniqueIDsEntry_Object = MibTableRow
componentUniqueIDsEntry = _ComponentUniqueIDsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 13, 1)
)
componentUniqueIDsEntry.setIndexNames(
    (0, "CME-MIB", "componentUniqueIDsTopologyPath"),
    (0, "CME-MIB", "componentUniqueIDsIndex"),
)
if mibBuilder.loadTexts:
    componentUniqueIDsEntry.setStatus("mandatory")


class _ComponentUniqueIDsTopologyPath_Type(OctetString):
    """Custom type componentUniqueIDsTopologyPath based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_ComponentUniqueIDsTopologyPath_Type.__name__ = "OctetString"
_ComponentUniqueIDsTopologyPath_Object = MibTableColumn
componentUniqueIDsTopologyPath = _ComponentUniqueIDsTopologyPath_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 13, 1, 1),
    _ComponentUniqueIDsTopologyPath_Type()
)
componentUniqueIDsTopologyPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentUniqueIDsTopologyPath.setStatus("mandatory")
_ComponentUniqueIDsIndex_Type = Integer32
_ComponentUniqueIDsIndex_Object = MibTableColumn
componentUniqueIDsIndex = _ComponentUniqueIDsIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 13, 1, 2),
    _ComponentUniqueIDsIndex_Type()
)
componentUniqueIDsIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentUniqueIDsIndex.setStatus("mandatory")
_ComponentUniqueIDsName_Type = OctetString
_ComponentUniqueIDsName_Object = MibTableColumn
componentUniqueIDsName = _ComponentUniqueIDsName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 13, 1, 3),
    _ComponentUniqueIDsName_Type()
)
componentUniqueIDsName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentUniqueIDsName.setStatus("mandatory")


class _ComponentUniqueIDsType_Type(Integer32):
    """Custom type componentUniqueIDsType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("wwn", 1),
          ("guid", 2),
          ("sas", 3))
    )


_ComponentUniqueIDsType_Type.__name__ = "Integer32"
_ComponentUniqueIDsType_Object = MibTableColumn
componentUniqueIDsType = _ComponentUniqueIDsType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 13, 1, 4),
    _ComponentUniqueIDsType_Type()
)
componentUniqueIDsType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentUniqueIDsType.setStatus("mandatory")


class _ComponentUniqueIDsValue_Type(OctetString):
    """Custom type componentUniqueIDsValue based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_ComponentUniqueIDsValue_Type.__name__ = "OctetString"
_ComponentUniqueIDsValue_Object = MibTableColumn
componentUniqueIDsValue = _ComponentUniqueIDsValue_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 13, 1, 5),
    _ComponentUniqueIDsValue_Type()
)
componentUniqueIDsValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentUniqueIDsValue.setStatus("mandatory")
_ComponentUniqueIDsTableCacheTimeout_Type = Integer32
_ComponentUniqueIDsTableCacheTimeout_Object = MibScalar
componentUniqueIDsTableCacheTimeout = _ComponentUniqueIDsTableCacheTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 14),
    _ComponentUniqueIDsTableCacheTimeout_Type()
)
componentUniqueIDsTableCacheTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentUniqueIDsTableCacheTimeout.setStatus("mandatory")
_ComponentVoltagesTable_Object = MibTable
componentVoltagesTable = _ComponentVoltagesTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 16)
)
if mibBuilder.loadTexts:
    componentVoltagesTable.setStatus("mandatory")
_ComponentVoltagesEntry_Object = MibTableRow
componentVoltagesEntry = _ComponentVoltagesEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 16, 1)
)
componentVoltagesEntry.setIndexNames(
    (0, "CME-MIB", "componentVoltagesTopologyPath"),
    (0, "CME-MIB", "componentVoltagesSensorIndex"),
)
if mibBuilder.loadTexts:
    componentVoltagesEntry.setStatus("mandatory")


class _ComponentVoltagesTopologyPath_Type(OctetString):
    """Custom type componentVoltagesTopologyPath based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_ComponentVoltagesTopologyPath_Type.__name__ = "OctetString"
_ComponentVoltagesTopologyPath_Object = MibTableColumn
componentVoltagesTopologyPath = _ComponentVoltagesTopologyPath_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 16, 1, 1),
    _ComponentVoltagesTopologyPath_Type()
)
componentVoltagesTopologyPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentVoltagesTopologyPath.setStatus("mandatory")


class _ComponentVoltagesSensorIndex_Type(Integer32):
    """Custom type componentVoltagesSensorIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_ComponentVoltagesSensorIndex_Type.__name__ = "Integer32"
_ComponentVoltagesSensorIndex_Object = MibTableColumn
componentVoltagesSensorIndex = _ComponentVoltagesSensorIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 16, 1, 2),
    _ComponentVoltagesSensorIndex_Type()
)
componentVoltagesSensorIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentVoltagesSensorIndex.setStatus("mandatory")
_ComponentVoltagesComponentName_Type = OctetString
_ComponentVoltagesComponentName_Object = MibTableColumn
componentVoltagesComponentName = _ComponentVoltagesComponentName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 16, 1, 3),
    _ComponentVoltagesComponentName_Type()
)
componentVoltagesComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentVoltagesComponentName.setStatus("mandatory")
_ComponentVoltagesSensorLabel_Type = OctetString
_ComponentVoltagesSensorLabel_Object = MibTableColumn
componentVoltagesSensorLabel = _ComponentVoltagesSensorLabel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 16, 1, 4),
    _ComponentVoltagesSensorLabel_Type()
)
componentVoltagesSensorLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentVoltagesSensorLabel.setStatus("mandatory")
_ComponentVoltagesSensorValue_Type = OctetString
_ComponentVoltagesSensorValue_Object = MibTableColumn
componentVoltagesSensorValue = _ComponentVoltagesSensorValue_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 16, 1, 5),
    _ComponentVoltagesSensorValue_Type()
)
componentVoltagesSensorValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentVoltagesSensorValue.setStatus("mandatory")
_ComponentVoltagesLowWarningThreshold_Type = OctetString
_ComponentVoltagesLowWarningThreshold_Object = MibTableColumn
componentVoltagesLowWarningThreshold = _ComponentVoltagesLowWarningThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 16, 1, 6),
    _ComponentVoltagesLowWarningThreshold_Type()
)
componentVoltagesLowWarningThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentVoltagesLowWarningThreshold.setStatus("mandatory")
_ComponentVoltagesHighWarningThreshold_Type = OctetString
_ComponentVoltagesHighWarningThreshold_Object = MibTableColumn
componentVoltagesHighWarningThreshold = _ComponentVoltagesHighWarningThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 16, 1, 7),
    _ComponentVoltagesHighWarningThreshold_Type()
)
componentVoltagesHighWarningThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentVoltagesHighWarningThreshold.setStatus("mandatory")
_ComponentVoltagesTableCacheTimeout_Type = Integer32
_ComponentVoltagesTableCacheTimeout_Object = MibScalar
componentVoltagesTableCacheTimeout = _ComponentVoltagesTableCacheTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 17),
    _ComponentVoltagesTableCacheTimeout_Type()
)
componentVoltagesTableCacheTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentVoltagesTableCacheTimeout.setStatus("mandatory")
_ComponentTemperaturesTable_Object = MibTable
componentTemperaturesTable = _ComponentTemperaturesTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 21)
)
if mibBuilder.loadTexts:
    componentTemperaturesTable.setStatus("mandatory")
_ComponentTemperaturesEntry_Object = MibTableRow
componentTemperaturesEntry = _ComponentTemperaturesEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 21, 1)
)
componentTemperaturesEntry.setIndexNames(
    (0, "CME-MIB", "componentTemperaturesTopologyPath"),
    (0, "CME-MIB", "componentTemperaturesSensorIndex"),
)
if mibBuilder.loadTexts:
    componentTemperaturesEntry.setStatus("mandatory")


class _ComponentTemperaturesTopologyPath_Type(OctetString):
    """Custom type componentTemperaturesTopologyPath based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_ComponentTemperaturesTopologyPath_Type.__name__ = "OctetString"
_ComponentTemperaturesTopologyPath_Object = MibTableColumn
componentTemperaturesTopologyPath = _ComponentTemperaturesTopologyPath_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 21, 1, 1),
    _ComponentTemperaturesTopologyPath_Type()
)
componentTemperaturesTopologyPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentTemperaturesTopologyPath.setStatus("mandatory")


class _ComponentTemperaturesSensorIndex_Type(Integer32):
    """Custom type componentTemperaturesSensorIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_ComponentTemperaturesSensorIndex_Type.__name__ = "Integer32"
_ComponentTemperaturesSensorIndex_Object = MibTableColumn
componentTemperaturesSensorIndex = _ComponentTemperaturesSensorIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 21, 1, 2),
    _ComponentTemperaturesSensorIndex_Type()
)
componentTemperaturesSensorIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentTemperaturesSensorIndex.setStatus("mandatory")
_ComponentTemperaturesComponentName_Type = OctetString
_ComponentTemperaturesComponentName_Object = MibTableColumn
componentTemperaturesComponentName = _ComponentTemperaturesComponentName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 21, 1, 3),
    _ComponentTemperaturesComponentName_Type()
)
componentTemperaturesComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentTemperaturesComponentName.setStatus("mandatory")
_ComponentTemperaturesSensorLabel_Type = OctetString
_ComponentTemperaturesSensorLabel_Object = MibTableColumn
componentTemperaturesSensorLabel = _ComponentTemperaturesSensorLabel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 21, 1, 4),
    _ComponentTemperaturesSensorLabel_Type()
)
componentTemperaturesSensorLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentTemperaturesSensorLabel.setStatus("mandatory")
_ComponentTemperaturesSensorValue_Type = OctetString
_ComponentTemperaturesSensorValue_Object = MibTableColumn
componentTemperaturesSensorValue = _ComponentTemperaturesSensorValue_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 21, 1, 5),
    _ComponentTemperaturesSensorValue_Type()
)
componentTemperaturesSensorValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentTemperaturesSensorValue.setStatus("mandatory")
_ComponentTemperaturesWarningThreshold_Type = OctetString
_ComponentTemperaturesWarningThreshold_Object = MibTableColumn
componentTemperaturesWarningThreshold = _ComponentTemperaturesWarningThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 21, 1, 6),
    _ComponentTemperaturesWarningThreshold_Type()
)
componentTemperaturesWarningThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentTemperaturesWarningThreshold.setStatus("mandatory")
_ComponentTemperaturesShutdownThreshold_Type = OctetString
_ComponentTemperaturesShutdownThreshold_Object = MibTableColumn
componentTemperaturesShutdownThreshold = _ComponentTemperaturesShutdownThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 21, 1, 7),
    _ComponentTemperaturesShutdownThreshold_Type()
)
componentTemperaturesShutdownThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentTemperaturesShutdownThreshold.setStatus("mandatory")
_ComponentTemperaturesWarningResetThreshold_Type = OctetString
_ComponentTemperaturesWarningResetThreshold_Object = MibTableColumn
componentTemperaturesWarningResetThreshold = _ComponentTemperaturesWarningResetThreshold_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 21, 1, 8),
    _ComponentTemperaturesWarningResetThreshold_Type()
)
componentTemperaturesWarningResetThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentTemperaturesWarningResetThreshold.setStatus("mandatory")
_ComponentTemperaturesTableCacheTimeout_Type = Integer32
_ComponentTemperaturesTableCacheTimeout_Object = MibScalar
componentTemperaturesTableCacheTimeout = _ComponentTemperaturesTableCacheTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 22),
    _ComponentTemperaturesTableCacheTimeout_Type()
)
componentTemperaturesTableCacheTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentTemperaturesTableCacheTimeout.setStatus("mandatory")
_ComponentIOCompatibilityTable_Object = MibTable
componentIOCompatibilityTable = _ComponentIOCompatibilityTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 26)
)
if mibBuilder.loadTexts:
    componentIOCompatibilityTable.setStatus("mandatory")
_ComponentIOCompatibilityEntry_Object = MibTableRow
componentIOCompatibilityEntry = _ComponentIOCompatibilityEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 26, 1)
)
componentIOCompatibilityEntry.setIndexNames(
    (0, "CME-MIB", "componentIOCompatibilityTopologyPath"),
    (0, "CME-MIB", "componentIOCompatibilityIOMBay"),
)
if mibBuilder.loadTexts:
    componentIOCompatibilityEntry.setStatus("mandatory")


class _ComponentIOCompatibilityTopologyPath_Type(OctetString):
    """Custom type componentIOCompatibilityTopologyPath based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_ComponentIOCompatibilityTopologyPath_Type.__name__ = "OctetString"
_ComponentIOCompatibilityTopologyPath_Object = MibTableColumn
componentIOCompatibilityTopologyPath = _ComponentIOCompatibilityTopologyPath_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 26, 1, 1),
    _ComponentIOCompatibilityTopologyPath_Type()
)
componentIOCompatibilityTopologyPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentIOCompatibilityTopologyPath.setStatus("mandatory")


class _ComponentIOCompatibilityIOMBay_Type(Integer32):
    """Custom type componentIOCompatibilityIOMBay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_ComponentIOCompatibilityIOMBay_Type.__name__ = "Integer32"
_ComponentIOCompatibilityIOMBay_Object = MibTableColumn
componentIOCompatibilityIOMBay = _ComponentIOCompatibilityIOMBay_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 26, 1, 2),
    _ComponentIOCompatibilityIOMBay_Type()
)
componentIOCompatibilityIOMBay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentIOCompatibilityIOMBay.setStatus("mandatory")
_ComponentIOCompatibilityComponentName_Type = OctetString
_ComponentIOCompatibilityComponentName_Object = MibTableColumn
componentIOCompatibilityComponentName = _ComponentIOCompatibilityComponentName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 26, 1, 3),
    _ComponentIOCompatibilityComponentName_Type()
)
componentIOCompatibilityComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentIOCompatibilityComponentName.setStatus("mandatory")
_ComponentIOCompatibilityIOMPower_Type = OctetString
_ComponentIOCompatibilityIOMPower_Object = MibTableColumn
componentIOCompatibilityIOMPower = _ComponentIOCompatibilityIOMPower_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 26, 1, 4),
    _ComponentIOCompatibilityIOMPower_Type()
)
componentIOCompatibilityIOMPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentIOCompatibilityIOMPower.setStatus("mandatory")
_ComponentIOCompatibilityIOMFabricType_Type = OctetString
_ComponentIOCompatibilityIOMFabricType_Object = MibTableColumn
componentIOCompatibilityIOMFabricType = _ComponentIOCompatibilityIOMFabricType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 26, 1, 5),
    _ComponentIOCompatibilityIOMFabricType_Type()
)
componentIOCompatibilityIOMFabricType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentIOCompatibilityIOMFabricType.setStatus("mandatory")
_ComponentIOCompatibilityFabricOnComponent_Type = OctetString
_ComponentIOCompatibilityFabricOnComponent_Object = MibTableColumn
componentIOCompatibilityFabricOnComponent = _ComponentIOCompatibilityFabricOnComponent_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 26, 1, 6),
    _ComponentIOCompatibilityFabricOnComponent_Type()
)
componentIOCompatibilityFabricOnComponent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentIOCompatibilityFabricOnComponent.setStatus("mandatory")
_ComponentIOCompatibilityStatus_Type = OctetString
_ComponentIOCompatibilityStatus_Object = MibTableColumn
componentIOCompatibilityStatus = _ComponentIOCompatibilityStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 26, 1, 7),
    _ComponentIOCompatibilityStatus_Type()
)
componentIOCompatibilityStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentIOCompatibilityStatus.setStatus("mandatory")
_ComponentIOCompatibilityTableCacheTimeout_Type = Integer32
_ComponentIOCompatibilityTableCacheTimeout_Object = MibScalar
componentIOCompatibilityTableCacheTimeout = _ComponentIOCompatibilityTableCacheTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 27),
    _ComponentIOCompatibilityTableCacheTimeout_Type()
)
componentIOCompatibilityTableCacheTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentIOCompatibilityTableCacheTimeout.setStatus("mandatory")
_NodeConnectivityTable_Object = MibTable
nodeConnectivityTable = _NodeConnectivityTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 31)
)
if mibBuilder.loadTexts:
    nodeConnectivityTable.setStatus("mandatory")
_NodeConnectivityEntry_Object = MibTableRow
nodeConnectivityEntry = _NodeConnectivityEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 31, 1)
)
nodeConnectivityEntry.setIndexNames(
    (0, "CME-MIB", "nodeConnectivityIndex"),
)
if mibBuilder.loadTexts:
    nodeConnectivityEntry.setStatus("mandatory")


class _NodeConnectivityIndex_Type(Integer32):
    """Custom type nodeConnectivityIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_NodeConnectivityIndex_Type.__name__ = "Integer32"
_NodeConnectivityIndex_Object = MibTableColumn
nodeConnectivityIndex = _NodeConnectivityIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 31, 1, 1),
    _NodeConnectivityIndex_Type()
)
nodeConnectivityIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nodeConnectivityIndex.setStatus("mandatory")
_NodeConnectivityName_Type = OctetString
_NodeConnectivityName_Object = MibTableColumn
nodeConnectivityName = _NodeConnectivityName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 31, 1, 2),
    _NodeConnectivityName_Type()
)
nodeConnectivityName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nodeConnectivityName.setStatus("mandatory")


class _NodeConnectivityStatus_Type(Integer32):
    """Custom type nodeConnectivityStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("notcommunicating", 0),
          ("communicating", 1))
    )


_NodeConnectivityStatus_Type.__name__ = "Integer32"
_NodeConnectivityStatus_Object = MibTableColumn
nodeConnectivityStatus = _NodeConnectivityStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 37, 31, 1, 3),
    _NodeConnectivityStatus_Type()
)
nodeConnectivityStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nodeConnectivityStatus.setStatus("mandatory")
_ComponentServiceReset_ObjectIdentity = ObjectIdentity
componentServiceReset = _ComponentServiceReset_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 38)
)
_ComponentServiceResetTable_Object = MibTable
componentServiceResetTable = _ComponentServiceResetTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 38, 1)
)
if mibBuilder.loadTexts:
    componentServiceResetTable.setStatus("mandatory")
_ComponentServiceResetEntry_Object = MibTableRow
componentServiceResetEntry = _ComponentServiceResetEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 38, 1, 1)
)
componentServiceResetEntry.setIndexNames(
    (0, "CME-MIB", "componentServiceResetTopologyPath"),
)
if mibBuilder.loadTexts:
    componentServiceResetEntry.setStatus("mandatory")


class _ComponentServiceResetTopologyPath_Type(OctetString):
    """Custom type componentServiceResetTopologyPath based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_ComponentServiceResetTopologyPath_Type.__name__ = "OctetString"
_ComponentServiceResetTopologyPath_Object = MibTableColumn
componentServiceResetTopologyPath = _ComponentServiceResetTopologyPath_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 38, 1, 1, 1),
    _ComponentServiceResetTopologyPath_Type()
)
componentServiceResetTopologyPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentServiceResetTopologyPath.setStatus("mandatory")
_ComponentServiceResetName_Type = OctetString
_ComponentServiceResetName_Object = MibTableColumn
componentServiceResetName = _ComponentServiceResetName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 38, 1, 1, 2),
    _ComponentServiceResetName_Type()
)
componentServiceResetName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentServiceResetName.setStatus("mandatory")


class _ComponentServiceResetStatus_Type(Integer32):
    """Custom type componentServiceResetStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("auxPowerOff", 0),
          ("auxPowerOn", 1),
          ("unknown", 255))
    )


_ComponentServiceResetStatus_Type.__name__ = "Integer32"
_ComponentServiceResetStatus_Object = MibTableColumn
componentServiceResetStatus = _ComponentServiceResetStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 38, 1, 1, 3),
    _ComponentServiceResetStatus_Type()
)
componentServiceResetStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentServiceResetStatus.setStatus("mandatory")


class _ComponentServiceResetCmd_Type(Integer32):
    """Custom type componentServiceResetCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noOperation", 0),
          ("resetVirtualReseatOperation", 1),
          ("resetHardRestartOperation", 2))
    )


_ComponentServiceResetCmd_Type.__name__ = "Integer32"
_ComponentServiceResetCmd_Object = MibTableColumn
componentServiceResetCmd = _ComponentServiceResetCmd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 38, 1, 1, 4),
    _ComponentServiceResetCmd_Type()
)
componentServiceResetCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    componentServiceResetCmd.setStatus("mandatory")
_ComponentServiceResetTableCacheTimeout_Type = Integer32
_ComponentServiceResetTableCacheTimeout_Object = MibScalar
componentServiceResetTableCacheTimeout = _ComponentServiceResetTableCacheTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 38, 2),
    _ComponentServiceResetTableCacheTimeout_Type()
)
componentServiceResetTableCacheTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentServiceResetTableCacheTimeout.setStatus("mandatory")
_ComponentLEDs_ObjectIdentity = ObjectIdentity
componentLEDs = _ComponentLEDs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 39)
)
_ComponentLEDsTable_Object = MibTable
componentLEDsTable = _ComponentLEDsTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 39, 1)
)
if mibBuilder.loadTexts:
    componentLEDsTable.setStatus("mandatory")
_ComponentLEDsEntry_Object = MibTableRow
componentLEDsEntry = _ComponentLEDsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 39, 1, 1)
)
componentLEDsEntry.setIndexNames(
    (0, "CME-MIB", "ledComponentTopologyPath"),
)
if mibBuilder.loadTexts:
    componentLEDsEntry.setStatus("mandatory")


class _LedComponentTopologyPath_Type(OctetString):
    """Custom type ledComponentTopologyPath based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_LedComponentTopologyPath_Type.__name__ = "OctetString"
_LedComponentTopologyPath_Object = MibTableColumn
ledComponentTopologyPath = _LedComponentTopologyPath_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 39, 1, 1, 1),
    _LedComponentTopologyPath_Type()
)
ledComponentTopologyPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledComponentTopologyPath.setStatus("mandatory")
_LedComponentName_Type = OctetString
_LedComponentName_Object = MibTableColumn
ledComponentName = _LedComponentName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 39, 1, 1, 2),
    _LedComponentName_Type()
)
ledComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledComponentName.setStatus("mandatory")


class _LedComponentFault_Type(Integer32):
    """Custom type ledComponentFault based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_LedComponentFault_Type.__name__ = "Integer32"
_LedComponentFault_Object = MibTableColumn
ledComponentFault = _LedComponentFault_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 39, 1, 1, 3),
    _LedComponentFault_Type()
)
ledComponentFault.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ledComponentFault.setStatus("mandatory")


class _LedComponentCheckLog_Type(Integer32):
    """Custom type ledComponentCheckLog based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_LedComponentCheckLog_Type.__name__ = "Integer32"
_LedComponentCheckLog_Object = MibTableColumn
ledComponentCheckLog = _LedComponentCheckLog_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 39, 1, 1, 4),
    _LedComponentCheckLog_Type()
)
ledComponentCheckLog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ledComponentCheckLog.setStatus("mandatory")


class _LedComponentIdentity_Type(Integer32):
    """Custom type ledComponentIdentity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("blinking", 2))
    )


_LedComponentIdentity_Type.__name__ = "Integer32"
_LedComponentIdentity_Object = MibTableColumn
ledComponentIdentity = _LedComponentIdentity_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 39, 1, 1, 5),
    _LedComponentIdentity_Type()
)
ledComponentIdentity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ledComponentIdentity.setStatus("mandatory")
_ComponentLEDsTableCacheTimeout_Type = Integer32
_ComponentLEDsTableCacheTimeout_Object = MibScalar
componentLEDsTableCacheTimeout = _ComponentLEDsTableCacheTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 39, 2),
    _ComponentLEDsTableCacheTimeout_Type()
)
componentLEDsTableCacheTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentLEDsTableCacheTimeout.setStatus("mandatory")
_ComponentLEDsDetailsTable_Object = MibTable
componentLEDsDetailsTable = _ComponentLEDsDetailsTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 39, 9)
)
if mibBuilder.loadTexts:
    componentLEDsDetailsTable.setStatus("mandatory")
_ComponentLEDsDetailsEntry_Object = MibTableRow
componentLEDsDetailsEntry = _ComponentLEDsDetailsEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 39, 9, 1)
)
componentLEDsDetailsEntry.setIndexNames(
    (0, "CME-MIB", "componentLEDsDetailsTopologyPath"),
    (0, "CME-MIB", "componentLEDsDetailsIndex"),
)
if mibBuilder.loadTexts:
    componentLEDsDetailsEntry.setStatus("mandatory")


class _ComponentLEDsDetailsTopologyPath_Type(OctetString):
    """Custom type componentLEDsDetailsTopologyPath based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_ComponentLEDsDetailsTopologyPath_Type.__name__ = "OctetString"
_ComponentLEDsDetailsTopologyPath_Object = MibTableColumn
componentLEDsDetailsTopologyPath = _ComponentLEDsDetailsTopologyPath_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 39, 9, 1, 1),
    _ComponentLEDsDetailsTopologyPath_Type()
)
componentLEDsDetailsTopologyPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentLEDsDetailsTopologyPath.setStatus("mandatory")
_ComponentLEDsDetailsIndex_Type = Integer32
_ComponentLEDsDetailsIndex_Object = MibTableColumn
componentLEDsDetailsIndex = _ComponentLEDsDetailsIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 39, 9, 1, 2),
    _ComponentLEDsDetailsIndex_Type()
)
componentLEDsDetailsIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentLEDsDetailsIndex.setStatus("mandatory")
_ComponentLEDsDetailsComponentType_Type = OctetString
_ComponentLEDsDetailsComponentType_Object = MibTableColumn
componentLEDsDetailsComponentType = _ComponentLEDsDetailsComponentType_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 39, 9, 1, 3),
    _ComponentLEDsDetailsComponentType_Type()
)
componentLEDsDetailsComponentType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentLEDsDetailsComponentType.setStatus("mandatory")
_ComponentLEDsDetailsLabel_Type = OctetString
_ComponentLEDsDetailsLabel_Object = MibTableColumn
componentLEDsDetailsLabel = _ComponentLEDsDetailsLabel_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 39, 9, 1, 4),
    _ComponentLEDsDetailsLabel_Type()
)
componentLEDsDetailsLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentLEDsDetailsLabel.setStatus("mandatory")


class _ComponentLEDsDetailsState_Type(Integer32):
    """Custom type componentLEDsDetailsState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("blinking", 2))
    )


_ComponentLEDsDetailsState_Type.__name__ = "Integer32"
_ComponentLEDsDetailsState_Object = MibTableColumn
componentLEDsDetailsState = _ComponentLEDsDetailsState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 39, 9, 1, 5),
    _ComponentLEDsDetailsState_Type()
)
componentLEDsDetailsState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentLEDsDetailsState.setStatus("mandatory")
_ComponentLEDsDetailsLocation_Type = OctetString
_ComponentLEDsDetailsLocation_Object = MibTableColumn
componentLEDsDetailsLocation = _ComponentLEDsDetailsLocation_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 39, 9, 1, 6),
    _ComponentLEDsDetailsLocation_Type()
)
componentLEDsDetailsLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentLEDsDetailsLocation.setStatus("mandatory")
_ComponentLEDsDetailsTableCacheTimeout_Type = Integer32
_ComponentLEDsDetailsTableCacheTimeout_Object = MibScalar
componentLEDsDetailsTableCacheTimeout = _ComponentLEDsDetailsTableCacheTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 39, 10),
    _ComponentLEDsDetailsTableCacheTimeout_Type()
)
componentLEDsDetailsTableCacheTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentLEDsDetailsTableCacheTimeout.setStatus("mandatory")
_BackupRestore_ObjectIdentity = ObjectIdentity
backupRestore = _BackupRestore_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 42)
)


class _BackupRestoreAction_Type(Integer32):
    """Custom type backupRestoreAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("backup", 0),
          ("restore", 1),
          ("restoreAndRestart", 2))
    )


_BackupRestoreAction_Type.__name__ = "Integer32"
_BackupRestoreAction_Object = MibScalar
backupRestoreAction = _BackupRestoreAction_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 42, 1),
    _BackupRestoreAction_Type()
)
backupRestoreAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    backupRestoreAction.setStatus("mandatory")


class _BackupRestoreStatus_Type(Integer32):
    """Custom type backupRestoreStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("ready", 0),
          ("pending", 1))
    )


_BackupRestoreStatus_Type.__name__ = "Integer32"
_BackupRestoreStatus_Object = MibScalar
backupRestoreStatus = _BackupRestoreStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 42, 2),
    _BackupRestoreStatus_Type()
)
backupRestoreStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    backupRestoreStatus.setStatus("mandatory")
_BackupRestoreMessage_Type = OctetString
_BackupRestoreMessage_Object = MibScalar
backupRestoreMessage = _BackupRestoreMessage_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 42, 3),
    _BackupRestoreMessage_Type()
)
backupRestoreMessage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    backupRestoreMessage.setStatus("mandatory")


class _BackupRestoreURI_Type(OctetString):
    """Custom type backupRestoreURI based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 254),
    )


_BackupRestoreURI_Type.__name__ = "OctetString"
_BackupRestoreURI_Object = MibScalar
backupRestoreURI = _BackupRestoreURI_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 42, 4),
    _BackupRestoreURI_Type()
)
backupRestoreURI.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    backupRestoreURI.setStatus("mandatory")


class _BackupRestorePassword_Type(OctetString):
    """Custom type backupRestorePassword based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 63),
    )


_BackupRestorePassword_Type.__name__ = "OctetString"
_BackupRestorePassword_Object = MibScalar
backupRestorePassword = _BackupRestorePassword_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 42, 5),
    _BackupRestorePassword_Type()
)
backupRestorePassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    backupRestorePassword.setStatus("mandatory")


class _BackupRestoreLogURI_Type(OctetString):
    """Custom type backupRestoreLogURI based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 254),
    )


_BackupRestoreLogURI_Type.__name__ = "OctetString"
_BackupRestoreLogURI_Object = MibScalar
backupRestoreLogURI = _BackupRestoreLogURI_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 42, 6),
    _BackupRestoreLogURI_Type()
)
backupRestoreLogURI.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    backupRestoreLogURI.setStatus("mandatory")


class _BackupRestoreLogPush_Type(Integer32):
    """Custom type backupRestoreLogPush based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("noPush", 0),
          ("push", 1))
    )


_BackupRestoreLogPush_Type.__name__ = "Integer32"
_BackupRestoreLogPush_Object = MibScalar
backupRestoreLogPush = _BackupRestoreLogPush_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 22, 42, 7),
    _BackupRestoreLogPush_Type()
)
backupRestoreLogPush.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    backupRestoreLogPush.setStatus("mandatory")
_Service_ObjectIdentity = ObjectIdentity
service = _Service_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23)
)
_BladeServiceData_ObjectIdentity = ObjectIdentity
bladeServiceData = _BladeServiceData_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3)
)
_BladeServiceDataTable_Object = MibTable
bladeServiceDataTable = _BladeServiceDataTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1)
)
if mibBuilder.loadTexts:
    bladeServiceDataTable.setStatus("mandatory")
_BladeServiceDataEntry_Object = MibTableRow
bladeServiceDataEntry = _BladeServiceDataEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1)
)
bladeServiceDataEntry.setIndexNames(
    (0, "CME-MIB", "serviceDataIndex"),
)
if mibBuilder.loadTexts:
    bladeServiceDataEntry.setStatus("mandatory")
_ServiceDataIndex_Type = Integer32
_ServiceDataIndex_Object = MibTableColumn
serviceDataIndex = _ServiceDataIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1, 1),
    _ServiceDataIndex_Type()
)
serviceDataIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    serviceDataIndex.setStatus("mandatory")


class _ServiceDataBladeId_Type(Integer32):
    """Custom type serviceDataBladeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_ServiceDataBladeId_Type.__name__ = "Integer32"
_ServiceDataBladeId_Object = MibTableColumn
serviceDataBladeId = _ServiceDataBladeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1, 2),
    _ServiceDataBladeId_Type()
)
serviceDataBladeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    serviceDataBladeId.setStatus("mandatory")


class _ServiceDataBladeExists_Type(Integer32):
    """Custom type serviceDataBladeExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_ServiceDataBladeExists_Type.__name__ = "Integer32"
_ServiceDataBladeExists_Object = MibTableColumn
serviceDataBladeExists = _ServiceDataBladeExists_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1, 3),
    _ServiceDataBladeExists_Type()
)
serviceDataBladeExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    serviceDataBladeExists.setStatus("mandatory")


class _ServiceDataBladePowerState_Type(Integer32):
    """Custom type serviceDataBladePowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("standby", 3),
          ("hibernate", 4),
          ("unknown", 255))
    )


_ServiceDataBladePowerState_Type.__name__ = "Integer32"
_ServiceDataBladePowerState_Object = MibTableColumn
serviceDataBladePowerState = _ServiceDataBladePowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1, 4),
    _ServiceDataBladePowerState_Type()
)
serviceDataBladePowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    serviceDataBladePowerState.setStatus("mandatory")
_ServiceDataBladeName_Type = OctetString
_ServiceDataBladeName_Object = MibTableColumn
serviceDataBladeName = _ServiceDataBladeName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1, 5),
    _ServiceDataBladeName_Type()
)
serviceDataBladeName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    serviceDataBladeName.setStatus("mandatory")


class _ServiceDataDumpInitiate_Type(Integer32):
    """Custom type serviceDataDumpInitiate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("processorDump", 1),
          ("platformDump", 2),
          ("partitionDump", 3),
          ("serviceData", 4))
    )


_ServiceDataDumpInitiate_Type.__name__ = "Integer32"
_ServiceDataDumpInitiate_Object = MibTableColumn
serviceDataDumpInitiate = _ServiceDataDumpInitiate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1, 7),
    _ServiceDataDumpInitiate_Type()
)
serviceDataDumpInitiate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceDataDumpInitiate.setStatus("mandatory")


class _ServiceDataDumpRetrieve_Type(Integer32):
    """Custom type serviceDataDumpRetrieve based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("processorDump", 1),
          ("platformDump", 2),
          ("partitionDump", 3),
          ("serviceData", 4))
    )


_ServiceDataDumpRetrieve_Type.__name__ = "Integer32"
_ServiceDataDumpRetrieve_Object = MibTableColumn
serviceDataDumpRetrieve = _ServiceDataDumpRetrieve_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1, 8),
    _ServiceDataDumpRetrieve_Type()
)
serviceDataDumpRetrieve.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceDataDumpRetrieve.setStatus("mandatory")
_ServiceDataDumpCapabilityMask_Type = OctetString
_ServiceDataDumpCapabilityMask_Object = MibTableColumn
serviceDataDumpCapabilityMask = _ServiceDataDumpCapabilityMask_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1, 9),
    _ServiceDataDumpCapabilityMask_Type()
)
serviceDataDumpCapabilityMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    serviceDataDumpCapabilityMask.setStatus("mandatory")


class _ServiceDataDumpInProgress_Type(Integer32):
    """Custom type serviceDataDumpInProgress based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("inProgress", 1),
          ("notInProgress", 2),
          ("unknown", 255))
    )


_ServiceDataDumpInProgress_Type.__name__ = "Integer32"
_ServiceDataDumpInProgress_Object = MibTableColumn
serviceDataDumpInProgress = _ServiceDataDumpInProgress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 3, 1, 1, 10),
    _ServiceDataDumpInProgress_Type()
)
serviceDataDumpInProgress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    serviceDataDumpInProgress.setStatus("mandatory")
_ServiceAdvisor_ObjectIdentity = ObjectIdentity
serviceAdvisor = _ServiceAdvisor_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4)
)
_AutoCallHomeSetup_ObjectIdentity = ObjectIdentity
autoCallHomeSetup = _AutoCallHomeSetup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 1)
)


class _AcceptLicenseAgreement_Type(Integer32):
    """Custom type acceptLicenseAgreement based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_AcceptLicenseAgreement_Type.__name__ = "Integer32"
_AcceptLicenseAgreement_Object = MibScalar
acceptLicenseAgreement = _AcceptLicenseAgreement_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 1, 1),
    _AcceptLicenseAgreement_Type()
)
acceptLicenseAgreement.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acceptLicenseAgreement.setStatus("mandatory")


class _ServiceAdvisorEnable_Type(Integer32):
    """Custom type serviceAdvisorEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_ServiceAdvisorEnable_Type.__name__ = "Integer32"
_ServiceAdvisorEnable_Object = MibScalar
serviceAdvisorEnable = _ServiceAdvisorEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 1, 2),
    _ServiceAdvisorEnable_Type()
)
serviceAdvisorEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceAdvisorEnable.setStatus("mandatory")
_ServiceSupportCenter_ObjectIdentity = ObjectIdentity
serviceSupportCenter = _ServiceSupportCenter_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 2)
)
_IbmSupportCenter_Type = OctetString
_IbmSupportCenter_Object = MibScalar
ibmSupportCenter = _IbmSupportCenter_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 2, 1),
    _IbmSupportCenter_Type()
)
ibmSupportCenter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ibmSupportCenter.setStatus("mandatory")
_ContactInformation_ObjectIdentity = ObjectIdentity
contactInformation = _ContactInformation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3)
)
_CompanyName_Type = OctetString
_CompanyName_Object = MibScalar
companyName = _CompanyName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 1),
    _CompanyName_Type()
)
companyName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    companyName.setStatus("mandatory")
_ContactName_Type = OctetString
_ContactName_Object = MibScalar
contactName = _ContactName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 2),
    _ContactName_Type()
)
contactName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    contactName.setStatus("mandatory")
_PhoneNumber_Type = OctetString
_PhoneNumber_Object = MibScalar
phoneNumber = _PhoneNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 3),
    _PhoneNumber_Type()
)
phoneNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    phoneNumber.setStatus("mandatory")
_EmailAddress_Type = OctetString
_EmailAddress_Object = MibScalar
emailAddress = _EmailAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 4),
    _EmailAddress_Type()
)
emailAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emailAddress.setStatus("mandatory")
_Address_Type = OctetString
_Address_Object = MibScalar
address = _Address_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 5),
    _Address_Type()
)
address.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    address.setStatus("mandatory")
_City_Type = OctetString
_City_Object = MibScalar
city = _City_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 6),
    _City_Type()
)
city.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    city.setStatus("mandatory")
_State_Type = OctetString
_State_Object = MibScalar
state = _State_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 7),
    _State_Type()
)
state.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    state.setStatus("mandatory")
_PostalCode_Type = OctetString
_PostalCode_Object = MibScalar
postalCode = _PostalCode_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 8),
    _PostalCode_Type()
)
postalCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    postalCode.setStatus("mandatory")
_PhoneNumberExt_Type = OctetString
_PhoneNumberExt_Object = MibScalar
phoneNumberExt = _PhoneNumberExt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 9),
    _PhoneNumberExt_Type()
)
phoneNumberExt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    phoneNumberExt.setStatus("mandatory")
_AltContactName_Type = OctetString
_AltContactName_Object = MibScalar
altContactName = _AltContactName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 10),
    _AltContactName_Type()
)
altContactName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    altContactName.setStatus("mandatory")
_AltPhoneNumber_Type = OctetString
_AltPhoneNumber_Object = MibScalar
altPhoneNumber = _AltPhoneNumber_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 11),
    _AltPhoneNumber_Type()
)
altPhoneNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    altPhoneNumber.setStatus("mandatory")
_AltPhoneNumberExt_Type = OctetString
_AltPhoneNumberExt_Object = MibScalar
altPhoneNumberExt = _AltPhoneNumberExt_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 12),
    _AltPhoneNumberExt_Type()
)
altPhoneNumberExt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    altPhoneNumberExt.setStatus("mandatory")
_AltEmailAddress_Type = OctetString
_AltEmailAddress_Object = MibScalar
altEmailAddress = _AltEmailAddress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 3, 13),
    _AltEmailAddress_Type()
)
altEmailAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    altEmailAddress.setStatus("mandatory")
_HttpProxyConfig_ObjectIdentity = ObjectIdentity
httpProxyConfig = _HttpProxyConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 4)
)


class _HttpProxyEnable_Type(Integer32):
    """Custom type httpProxyEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_HttpProxyEnable_Type.__name__ = "Integer32"
_HttpProxyEnable_Object = MibScalar
httpProxyEnable = _HttpProxyEnable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 4, 1),
    _HttpProxyEnable_Type()
)
httpProxyEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    httpProxyEnable.setStatus("mandatory")
_HttpProxyLocation_Type = OctetString
_HttpProxyLocation_Object = MibScalar
httpProxyLocation = _HttpProxyLocation_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 4, 2),
    _HttpProxyLocation_Type()
)
httpProxyLocation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    httpProxyLocation.setStatus("mandatory")
_HttpProxyPort_Type = Integer32
_HttpProxyPort_Object = MibScalar
httpProxyPort = _HttpProxyPort_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 4, 3),
    _HttpProxyPort_Type()
)
httpProxyPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    httpProxyPort.setStatus("mandatory")
_HttpProxyUserName_Type = OctetString
_HttpProxyUserName_Object = MibScalar
httpProxyUserName = _HttpProxyUserName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 4, 4),
    _HttpProxyUserName_Type()
)
httpProxyUserName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    httpProxyUserName.setStatus("mandatory")
_HttpProxyPassword_Type = OctetString
_HttpProxyPassword_Object = MibScalar
httpProxyPassword = _HttpProxyPassword_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 4, 5),
    _HttpProxyPassword_Type()
)
httpProxyPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    httpProxyPassword.setStatus("mandatory")
_ActivityLogs_ObjectIdentity = ObjectIdentity
activityLogs = _ActivityLogs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 5)
)
_ActivityLogTable_Object = MibTable
activityLogTable = _ActivityLogTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 5, 1)
)
if mibBuilder.loadTexts:
    activityLogTable.setStatus("mandatory")
_ActivityLogEntry_Object = MibTableRow
activityLogEntry = _ActivityLogEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 5, 1, 1)
)
activityLogEntry.setIndexNames(
    (0, "CME-MIB", "activityLogIndex"),
)
if mibBuilder.loadTexts:
    activityLogEntry.setStatus("mandatory")
_ActivityLogIndex_Type = Integer32
_ActivityLogIndex_Object = MibTableColumn
activityLogIndex = _ActivityLogIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 5, 1, 1, 1),
    _ActivityLogIndex_Type()
)
activityLogIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    activityLogIndex.setStatus("mandatory")
_ActivityLogString_Type = OctetString
_ActivityLogString_Object = MibTableColumn
activityLogString = _ActivityLogString_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 5, 1, 1, 2),
    _ActivityLogString_Type()
)
activityLogString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    activityLogString.setStatus("mandatory")


class _ActivityLogAcknowledge_Type(Integer32):
    """Custom type activityLogAcknowledge based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_ActivityLogAcknowledge_Type.__name__ = "Integer32"
_ActivityLogAcknowledge_Object = MibTableColumn
activityLogAcknowledge = _ActivityLogAcknowledge_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 5, 1, 1, 3),
    _ActivityLogAcknowledge_Type()
)
activityLogAcknowledge.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    activityLogAcknowledge.setStatus("mandatory")
_ActivityLogAttribute_Type = OctetString
_ActivityLogAttribute_Object = MibTableColumn
activityLogAttribute = _ActivityLogAttribute_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 4, 5, 1, 1, 4),
    _ActivityLogAttribute_Type()
)
activityLogAttribute.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    activityLogAttribute.setStatus("mandatory")
_AutoFTPSetup_ObjectIdentity = ObjectIdentity
autoFTPSetup = _AutoFTPSetup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 5)
)


class _AutoFTPCallMode_Type(Integer32):
    """Custom type autoFTPCallMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("ftp", 1),
          ("tftp", 2))
    )


_AutoFTPCallMode_Type.__name__ = "Integer32"
_AutoFTPCallMode_Object = MibScalar
autoFTPCallMode = _AutoFTPCallMode_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 5, 1),
    _AutoFTPCallMode_Type()
)
autoFTPCallMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    autoFTPCallMode.setStatus("mandatory")
_AutoFTPCallAddr_Type = OctetString
_AutoFTPCallAddr_Object = MibScalar
autoFTPCallAddr = _AutoFTPCallAddr_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 5, 2),
    _AutoFTPCallAddr_Type()
)
autoFTPCallAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    autoFTPCallAddr.setStatus("mandatory")
_AutoFTPCallPort_Type = Integer32
_AutoFTPCallPort_Object = MibScalar
autoFTPCallPort = _AutoFTPCallPort_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 5, 3),
    _AutoFTPCallPort_Type()
)
autoFTPCallPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    autoFTPCallPort.setStatus("mandatory")
_AutoFTPCallUserID_Type = OctetString
_AutoFTPCallUserID_Object = MibScalar
autoFTPCallUserID = _AutoFTPCallUserID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 5, 4),
    _AutoFTPCallUserID_Type()
)
autoFTPCallUserID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    autoFTPCallUserID.setStatus("mandatory")
_AutoFTPCallPassword_Type = OctetString
_AutoFTPCallPassword_Object = MibScalar
autoFTPCallPassword = _AutoFTPCallPassword_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 5, 5),
    _AutoFTPCallPassword_Type()
)
autoFTPCallPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    autoFTPCallPassword.setStatus("mandatory")
_CallHomeExclusionEvents_ObjectIdentity = ObjectIdentity
callHomeExclusionEvents = _CallHomeExclusionEvents_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 6)
)
_ReadCallHomeExclusionEventTable_Object = MibTable
readCallHomeExclusionEventTable = _ReadCallHomeExclusionEventTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 6, 1)
)
if mibBuilder.loadTexts:
    readCallHomeExclusionEventTable.setStatus("mandatory")
_ReadCallHomeExclusionEventEntry_Object = MibTableRow
readCallHomeExclusionEventEntry = _ReadCallHomeExclusionEventEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 6, 1, 1)
)
readCallHomeExclusionEventEntry.setIndexNames(
    (0, "CME-MIB", "readCallHomeExclusionEventIndex"),
)
if mibBuilder.loadTexts:
    readCallHomeExclusionEventEntry.setStatus("mandatory")
_ReadCallHomeExclusionEventIndex_Type = Integer32
_ReadCallHomeExclusionEventIndex_Object = MibTableColumn
readCallHomeExclusionEventIndex = _ReadCallHomeExclusionEventIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 6, 1, 1, 1),
    _ReadCallHomeExclusionEventIndex_Type()
)
readCallHomeExclusionEventIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    readCallHomeExclusionEventIndex.setStatus("mandatory")
_ReadCallHomeExclusionEventID_Type = OctetString
_ReadCallHomeExclusionEventID_Object = MibTableColumn
readCallHomeExclusionEventID = _ReadCallHomeExclusionEventID_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 6, 1, 1, 2),
    _ReadCallHomeExclusionEventID_Type()
)
readCallHomeExclusionEventID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    readCallHomeExclusionEventID.setStatus("mandatory")
_AddCallHomeExclusionEvent_Type = OctetString
_AddCallHomeExclusionEvent_Object = MibScalar
addCallHomeExclusionEvent = _AddCallHomeExclusionEvent_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 6, 2),
    _AddCallHomeExclusionEvent_Type()
)
addCallHomeExclusionEvent.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    addCallHomeExclusionEvent.setStatus("mandatory")
_RmCallHomeExclusionEvent_Type = OctetString
_RmCallHomeExclusionEvent_Object = MibScalar
rmCallHomeExclusionEvent = _RmCallHomeExclusionEvent_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 6, 3),
    _RmCallHomeExclusionEvent_Type()
)
rmCallHomeExclusionEvent.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rmCallHomeExclusionEvent.setStatus("mandatory")


class _RmAllCallHomeExclusionEvent_Type(Integer32):
    """Custom type rmAllCallHomeExclusionEvent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("execute", 1)
    )


_RmAllCallHomeExclusionEvent_Type.__name__ = "Integer32"
_RmAllCallHomeExclusionEvent_Object = MibScalar
rmAllCallHomeExclusionEvent = _RmAllCallHomeExclusionEvent_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 6, 4),
    _RmAllCallHomeExclusionEvent_Type()
)
rmAllCallHomeExclusionEvent.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rmAllCallHomeExclusionEvent.setStatus("mandatory")
_ComponentPowerServiceReset_ObjectIdentity = ObjectIdentity
componentPowerServiceReset = _ComponentPowerServiceReset_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 10)
)
_BladePowerServiceResetTable_Object = MibTable
bladePowerServiceResetTable = _BladePowerServiceResetTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 10, 1)
)
if mibBuilder.loadTexts:
    bladePowerServiceResetTable.setStatus("mandatory")
_BladePowerServiceResetEntry_Object = MibTableRow
bladePowerServiceResetEntry = _BladePowerServiceResetEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 10, 1, 1)
)
bladePowerServiceResetEntry.setIndexNames(
    (0, "CME-MIB", "bladePowerServiceResetIndex"),
)
if mibBuilder.loadTexts:
    bladePowerServiceResetEntry.setStatus("mandatory")
_BladePowerServiceResetIndex_Type = Integer32
_BladePowerServiceResetIndex_Object = MibTableColumn
bladePowerServiceResetIndex = _BladePowerServiceResetIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 10, 1, 1, 1),
    _BladePowerServiceResetIndex_Type()
)
bladePowerServiceResetIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePowerServiceResetIndex.setStatus("mandatory")


class _BladePowerServiceResetBladeId_Type(Integer32):
    """Custom type bladePowerServiceResetBladeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("blade1", 1),
          ("blade2", 2),
          ("blade3", 3),
          ("blade4", 4),
          ("blade5", 5),
          ("blade6", 6),
          ("blade7", 7),
          ("blade8", 8),
          ("blade9", 9),
          ("blade10", 10),
          ("blade11", 11),
          ("blade12", 12),
          ("blade13", 13),
          ("blade14", 14))
    )


_BladePowerServiceResetBladeId_Type.__name__ = "Integer32"
_BladePowerServiceResetBladeId_Object = MibTableColumn
bladePowerServiceResetBladeId = _BladePowerServiceResetBladeId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 10, 1, 1, 2),
    _BladePowerServiceResetBladeId_Type()
)
bladePowerServiceResetBladeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePowerServiceResetBladeId.setStatus("mandatory")


class _BladePowerServiceResetStatus_Type(Integer32):
    """Custom type bladePowerServiceResetStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("auxPowerOff", 0),
          ("auxPowerOn", 1))
    )


_BladePowerServiceResetStatus_Type.__name__ = "Integer32"
_BladePowerServiceResetStatus_Object = MibTableColumn
bladePowerServiceResetStatus = _BladePowerServiceResetStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 10, 1, 1, 3),
    _BladePowerServiceResetStatus_Type()
)
bladePowerServiceResetStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bladePowerServiceResetStatus.setStatus("mandatory")


class _BladePowerServiceResetCmd_Type(Integer32):
    """Custom type bladePowerServiceResetCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noOperation", 0),
          ("resetVirtualReseatOperation", 1),
          ("resetHardRestartOperation", 2))
    )


_BladePowerServiceResetCmd_Type.__name__ = "Integer32"
_BladePowerServiceResetCmd_Object = MibTableColumn
bladePowerServiceResetCmd = _BladePowerServiceResetCmd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 10, 1, 1, 4),
    _BladePowerServiceResetCmd_Type()
)
bladePowerServiceResetCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bladePowerServiceResetCmd.setStatus("mandatory")
_SmPowerServiceResetTable_Object = MibTable
smPowerServiceResetTable = _SmPowerServiceResetTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 10, 2)
)
if mibBuilder.loadTexts:
    smPowerServiceResetTable.setStatus("mandatory")
_SmPowerServiceResetEntry_Object = MibTableRow
smPowerServiceResetEntry = _SmPowerServiceResetEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 10, 2, 1)
)
smPowerServiceResetEntry.setIndexNames(
    (0, "CME-MIB", "smPowerServiceResetIndex"),
)
if mibBuilder.loadTexts:
    smPowerServiceResetEntry.setStatus("mandatory")
_SmPowerServiceResetIndex_Type = Integer32
_SmPowerServiceResetIndex_Object = MibTableColumn
smPowerServiceResetIndex = _SmPowerServiceResetIndex_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 10, 2, 1, 1),
    _SmPowerServiceResetIndex_Type()
)
smPowerServiceResetIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smPowerServiceResetIndex.setStatus("mandatory")


class _SmPowerServiceResetSwitchId_Type(Integer32):
    """Custom type smPowerServiceResetSwitchId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("switch1", 1),
          ("switch2", 2),
          ("switch3", 3),
          ("switch4", 4))
    )


_SmPowerServiceResetSwitchId_Type.__name__ = "Integer32"
_SmPowerServiceResetSwitchId_Object = MibTableColumn
smPowerServiceResetSwitchId = _SmPowerServiceResetSwitchId_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 10, 2, 1, 2),
    _SmPowerServiceResetSwitchId_Type()
)
smPowerServiceResetSwitchId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smPowerServiceResetSwitchId.setStatus("mandatory")


class _SmPowerServiceResetStatus_Type(Integer32):
    """Custom type smPowerServiceResetStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("auxPowerOff", 0),
          ("auxPowerOn", 1))
    )


_SmPowerServiceResetStatus_Type.__name__ = "Integer32"
_SmPowerServiceResetStatus_Object = MibTableColumn
smPowerServiceResetStatus = _SmPowerServiceResetStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 10, 2, 1, 3),
    _SmPowerServiceResetStatus_Type()
)
smPowerServiceResetStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smPowerServiceResetStatus.setStatus("mandatory")


class _SmPowerServiceResetCmd_Type(Integer32):
    """Custom type smPowerServiceResetCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("noOperation", 0),
          ("resetVirtualReseatOperation", 1))
    )


_SmPowerServiceResetCmd_Type.__name__ = "Integer32"
_SmPowerServiceResetCmd_Object = MibTableColumn
smPowerServiceResetCmd = _SmPowerServiceResetCmd_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 10, 2, 1, 4),
    _SmPowerServiceResetCmd_Type()
)
smPowerServiceResetCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    smPowerServiceResetCmd.setStatus("mandatory")
_ComponentServiceData_ObjectIdentity = ObjectIdentity
componentServiceData = _ComponentServiceData_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 15)
)
_ComponentServiceDataTable_Object = MibTable
componentServiceDataTable = _ComponentServiceDataTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 15, 1)
)
if mibBuilder.loadTexts:
    componentServiceDataTable.setStatus("mandatory")
_ComponentServiceDataEntry_Object = MibTableRow
componentServiceDataEntry = _ComponentServiceDataEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 15, 1, 1)
)
componentServiceDataEntry.setIndexNames(
    (0, "CME-MIB", "componentServiceDataTopologyPath"),
)
if mibBuilder.loadTexts:
    componentServiceDataEntry.setStatus("mandatory")


class _ComponentServiceDataTopologyPath_Type(OctetString):
    """Custom type componentServiceDataTopologyPath based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_ComponentServiceDataTopologyPath_Type.__name__ = "OctetString"
_ComponentServiceDataTopologyPath_Object = MibTableColumn
componentServiceDataTopologyPath = _ComponentServiceDataTopologyPath_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 15, 1, 1, 1),
    _ComponentServiceDataTopologyPath_Type()
)
componentServiceDataTopologyPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentServiceDataTopologyPath.setStatus("mandatory")
_ComponentServiceDataComponentName_Type = OctetString
_ComponentServiceDataComponentName_Object = MibTableColumn
componentServiceDataComponentName = _ComponentServiceDataComponentName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 15, 1, 1, 2),
    _ComponentServiceDataComponentName_Type()
)
componentServiceDataComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentServiceDataComponentName.setStatus("mandatory")


class _ComponentServiceDataDumpInitiate_Type(Integer32):
    """Custom type componentServiceDataDumpInitiate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("processorDump", 1),
          ("platformDump", 2),
          ("partitionDump", 3),
          ("serviceData", 4))
    )


_ComponentServiceDataDumpInitiate_Type.__name__ = "Integer32"
_ComponentServiceDataDumpInitiate_Object = MibTableColumn
componentServiceDataDumpInitiate = _ComponentServiceDataDumpInitiate_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 15, 1, 1, 3),
    _ComponentServiceDataDumpInitiate_Type()
)
componentServiceDataDumpInitiate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    componentServiceDataDumpInitiate.setStatus("mandatory")


class _ComponentServiceDataDumpRetrieve_Type(Integer32):
    """Custom type componentServiceDataDumpRetrieve based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("processorDump", 1),
          ("platformDump", 2),
          ("partitionDump", 3),
          ("serviceData", 4))
    )


_ComponentServiceDataDumpRetrieve_Type.__name__ = "Integer32"
_ComponentServiceDataDumpRetrieve_Object = MibTableColumn
componentServiceDataDumpRetrieve = _ComponentServiceDataDumpRetrieve_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 15, 1, 1, 4),
    _ComponentServiceDataDumpRetrieve_Type()
)
componentServiceDataDumpRetrieve.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    componentServiceDataDumpRetrieve.setStatus("mandatory")
_ComponentServiceDataDumpCapabilityMask_Type = OctetString
_ComponentServiceDataDumpCapabilityMask_Object = MibTableColumn
componentServiceDataDumpCapabilityMask = _ComponentServiceDataDumpCapabilityMask_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 15, 1, 1, 5),
    _ComponentServiceDataDumpCapabilityMask_Type()
)
componentServiceDataDumpCapabilityMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentServiceDataDumpCapabilityMask.setStatus("mandatory")


class _ComponentServiceDataDumpInProgress_Type(Integer32):
    """Custom type componentServiceDataDumpInProgress based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("inProgress", 1),
          ("notInProgress", 2),
          ("unknown", 255))
    )


_ComponentServiceDataDumpInProgress_Type.__name__ = "Integer32"
_ComponentServiceDataDumpInProgress_Object = MibTableColumn
componentServiceDataDumpInProgress = _ComponentServiceDataDumpInProgress_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 15, 1, 1, 6),
    _ComponentServiceDataDumpInProgress_Type()
)
componentServiceDataDumpInProgress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentServiceDataDumpInProgress.setStatus("mandatory")
_ComponentServiceDataStatus_Type = Integer32
_ComponentServiceDataStatus_Object = MibTableColumn
componentServiceDataStatus = _ComponentServiceDataStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 15, 1, 1, 7),
    _ComponentServiceDataStatus_Type()
)
componentServiceDataStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentServiceDataStatus.setStatus("mandatory")
_ComponentServiceDataStatusDetails_Type = OctetString
_ComponentServiceDataStatusDetails_Object = MibTableColumn
componentServiceDataStatusDetails = _ComponentServiceDataStatusDetails_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 15, 1, 1, 8),
    _ComponentServiceDataStatusDetails_Type()
)
componentServiceDataStatusDetails.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentServiceDataStatusDetails.setStatus("mandatory")
_ComponentServiceDataTableCacheTimeout_Type = Integer32
_ComponentServiceDataTableCacheTimeout_Object = MibScalar
componentServiceDataTableCacheTimeout = _ComponentServiceDataTableCacheTimeout_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 15, 2),
    _ComponentServiceDataTableCacheTimeout_Type()
)
componentServiceDataTableCacheTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    componentServiceDataTableCacheTimeout.setStatus("mandatory")
_DownloadMMServiceData_ObjectIdentity = ObjectIdentity
downloadMMServiceData = _DownloadMMServiceData_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 21)
)


class _DownloadMMServiceDataFileCreateAndDownload_Type(OctetString):
    """Custom type downloadMMServiceDataFileCreateAndDownload based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 512),
    )


_DownloadMMServiceDataFileCreateAndDownload_Type.__name__ = "OctetString"
_DownloadMMServiceDataFileCreateAndDownload_Object = MibScalar
downloadMMServiceDataFileCreateAndDownload = _DownloadMMServiceDataFileCreateAndDownload_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 21, 1),
    _DownloadMMServiceDataFileCreateAndDownload_Type()
)
downloadMMServiceDataFileCreateAndDownload.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    downloadMMServiceDataFileCreateAndDownload.setStatus("mandatory")


class _DownloadMMServiceDataStatus_Type(Integer32):
    """Custom type downloadMMServiceDataStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ready", 0),
          ("fileGenerationInProgress", 1),
          ("fileDownloadInProgress", 2),
          ("cancelingDownload", 3))
    )


_DownloadMMServiceDataStatus_Type.__name__ = "Integer32"
_DownloadMMServiceDataStatus_Object = MibScalar
downloadMMServiceDataStatus = _DownloadMMServiceDataStatus_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 21, 2),
    _DownloadMMServiceDataStatus_Type()
)
downloadMMServiceDataStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    downloadMMServiceDataStatus.setStatus("mandatory")


class _DownloadMMServiceDataResult_Type(Integer32):
    """Custom type downloadMMServiceDataResult based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("permissionFailed", 1),
          ("fileGenerationFailed", 2),
          ("fileDownloadFailed", 3),
          ("canceled", 4),
          ("complete", 5))
    )


_DownloadMMServiceDataResult_Type.__name__ = "Integer32"
_DownloadMMServiceDataResult_Object = MibScalar
downloadMMServiceDataResult = _DownloadMMServiceDataResult_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 21, 3),
    _DownloadMMServiceDataResult_Type()
)
downloadMMServiceDataResult.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    downloadMMServiceDataResult.setStatus("mandatory")


class _DownloadMMServiceDataCancelDownload_Type(Integer32):
    """Custom type downloadMMServiceDataCancelDownload based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("cancel", 1))
    )


_DownloadMMServiceDataCancelDownload_Type.__name__ = "Integer32"
_DownloadMMServiceDataCancelDownload_Object = MibScalar
downloadMMServiceDataCancelDownload = _DownloadMMServiceDataCancelDownload_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 23, 21, 4),
    _DownloadMMServiceDataCancelDownload_Type()
)
downloadMMServiceDataCancelDownload.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    downloadMMServiceDataCancelDownload.setStatus("mandatory")
_Scaling_ObjectIdentity = ObjectIdentity
scaling = _Scaling_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24)
)
_ScalableComplexTable_Object = MibTable
scalableComplexTable = _ScalableComplexTable_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 1)
)
if mibBuilder.loadTexts:
    scalableComplexTable.setStatus("mandatory")
_ScalableComplexEntry_Object = MibTableRow
scalableComplexEntry = _ScalableComplexEntry_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 1, 1)
)
scalableComplexEntry.setIndexNames(
    (0, "CME-MIB", "scalableComplexTopologyPath"),
)
if mibBuilder.loadTexts:
    scalableComplexEntry.setStatus("mandatory")


class _ScalableComplexTopologyPath_Type(OctetString):
    """Custom type scalableComplexTopologyPath based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_ScalableComplexTopologyPath_Type.__name__ = "OctetString"
_ScalableComplexTopologyPath_Object = MibTableColumn
scalableComplexTopologyPath = _ScalableComplexTopologyPath_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 1, 1, 1),
    _ScalableComplexTopologyPath_Type()
)
scalableComplexTopologyPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scalableComplexTopologyPath.setStatus("mandatory")
_ScalableComplexIdentifier_Type = Integer32
_ScalableComplexIdentifier_Object = MibTableColumn
scalableComplexIdentifier = _ScalableComplexIdentifier_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 1, 1, 2),
    _ScalableComplexIdentifier_Type()
)
scalableComplexIdentifier.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scalableComplexIdentifier.setStatus("mandatory")
_ScalableComplexNodeName_Type = OctetString
_ScalableComplexNodeName_Object = MibTableColumn
scalableComplexNodeName = _ScalableComplexNodeName_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 1, 1, 3),
    _ScalableComplexNodeName_Type()
)
scalableComplexNodeName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scalableComplexNodeName.setStatus("mandatory")


class _ScalableComplexNodeHealthState_Type(Integer32):
    """Custom type scalableComplexNodeHealthState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("good", 1),
          ("warning", 2),
          ("critical", 3),
          ("kernelMode", 4),
          ("discovering", 5),
          ("commError", 6),
          ("noPower", 7),
          ("flashing", 8),
          ("initFailure", 9),
          ("insufficientPower", 10),
          ("powerDenied", 11),
          ("maintMode", 12),
          ("firehoseDump", 13))
    )


_ScalableComplexNodeHealthState_Type.__name__ = "Integer32"
_ScalableComplexNodeHealthState_Object = MibTableColumn
scalableComplexNodeHealthState = _ScalableComplexNodeHealthState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 1, 1, 4),
    _ScalableComplexNodeHealthState_Type()
)
scalableComplexNodeHealthState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scalableComplexNodeHealthState.setStatus("mandatory")


class _ScalableComplexNodePowerState_Type(Integer32):
    """Custom type scalableComplexNodePowerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("standby", 3),
          ("hibernate", 4))
    )


_ScalableComplexNodePowerState_Type.__name__ = "Integer32"
_ScalableComplexNodePowerState_Object = MibTableColumn
scalableComplexNodePowerState = _ScalableComplexNodePowerState_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 1, 1, 5),
    _ScalableComplexNodePowerState_Type()
)
scalableComplexNodePowerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scalableComplexNodePowerState.setStatus("mandatory")
_ScalableComplexNodeResources_Type = OctetString
_ScalableComplexNodeResources_Object = MibTableColumn
scalableComplexNodeResources = _ScalableComplexNodeResources_Object(
    (1, 3, 6, 1, 4, 1, 2, 3, 51, 2, 24, 1, 1, 6),
    _ScalableComplexNodeResources_Type()
)
scalableComplexNodeResources.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scalableComplexNodeResources.setStatus("mandatory")

# Managed Objects groups


# Notification objects


# Notifications groups


# Agent capabilities


# Module compliance


# Export all MIB objects to the MIB builder

mibBuilder.exportSymbols(
    "CME-MIB",
    **{"InetAddressIPv6": InetAddressIPv6,
       "EntryStatus": EntryStatus,
       "ibm": ibm,
       "ibmAgents": ibmAgents,
       "netfinitySupportProcessorAgent": netfinitySupportProcessorAgent,
       "bladeCenterSnmpMIB": bladeCenterSnmpMIB,
       "monitors": monitors,
       "temperature": temperature,
       "internalTemp": internalTemp,
       "cmmTemp": cmmTemp,
       "ambientTemp": ambientTemp,
       "rearLEDCardTempAvg": rearLEDCardTempAvg,
       "rearLEDCardTempMin": rearLEDCardTempMin,
       "rearLEDCardTempMax": rearLEDCardTempMax,
       "monitorTemp": monitorTemp,
       "hotAirRecircMonitoring": hotAirRecircMonitoring,
       "hotAirRecircTempDeltaThresh": hotAirRecircTempDeltaThresh,
       "hotAirRecircStatusTable": hotAirRecircStatusTable,
       "hotAirRecircStatusEntry": hotAirRecircStatusEntry,
       "hotAirRecircStatusTopologyPath": hotAirRecircStatusTopologyPath,
       "hotAirRecircStatusIndex": hotAirRecircStatusIndex,
       "hotAirRecircStatusName": hotAirRecircStatusName,
       "hotAirRecircStatusSensorLabel": hotAirRecircStatusSensorLabel,
       "hotAirRecircStatusSensorReading": hotAirRecircStatusSensorReading,
       "hotAirRecircStatusExceeded": hotAirRecircStatusExceeded,
       "chassisFans": chassisFans,
       "chassisFansTable": chassisFansTable,
       "chassisFansEntry": chassisFansEntry,
       "chassisFanIndex": chassisFanIndex,
       "chassisFanId": chassisFanId,
       "chassisFanSpeed": chassisFanSpeed,
       "chassisFanState": chassisFanState,
       "chassisFanSpeedRPM": chassisFanSpeedRPM,
       "chassisFanControllerState": chassisFanControllerState,
       "chassisFanCoolingZone": chassisFanCoolingZone,
       "chassisCoolingZoneTable": chassisCoolingZoneTable,
       "chassisCoolingZoneEntry": chassisCoolingZoneEntry,
       "chassisCoolingIndex": chassisCoolingIndex,
       "chassisCoolingZone": chassisCoolingZone,
       "chassisCoolingZoneStatus": chassisCoolingZoneStatus,
       "chassisCoolingZoneComponent": chassisCoolingZoneComponent,
       "powerModuleHealth": powerModuleHealth,
       "powerModuleHealthTable": powerModuleHealthTable,
       "powerModuleHealthEntry": powerModuleHealthEntry,
       "powerModuleIndex": powerModuleIndex,
       "powerModuleExists": powerModuleExists,
       "powerModuleState": powerModuleState,
       "powerModuleDetails": powerModuleDetails,
       "powerModuleDescription": powerModuleDescription,
       "spStatus": spStatus,
       "mmBistAndChassisStatus": mmBistAndChassisStatus,
       "bistRtc": bistRtc,
       "bistLocalI2CBus": bistLocalI2CBus,
       "bistPrimaryMainAppFlashImage": bistPrimaryMainAppFlashImage,
       "bistSecondaryMainAppFlashImage": bistSecondaryMainAppFlashImage,
       "bistBootRomFlashImage": bistBootRomFlashImage,
       "bistEthernetPort1": bistEthernetPort1,
       "bistExternalI2CDevices": bistExternalI2CDevices,
       "bistInternalEthernetSwitch": bistInternalEthernetSwitch,
       "bistPrimaryKernel": bistPrimaryKernel,
       "bistSecondaryKernel": bistSecondaryKernel,
       "bistPhysicalNetworkLink": bistPhysicalNetworkLink,
       "bistLogicalNetworkLink": bistLogicalNetworkLink,
       "bistBladesInstalled": bistBladesInstalled,
       "bistBladesCommunicating": bistBladesCommunicating,
       "bistChassisFansInstalled": bistChassisFansInstalled,
       "bistChassisFansFunctional": bistChassisFansFunctional,
       "bistRearLEDCardInstalled": bistRearLEDCardInstalled,
       "bistRearLEDCardCommunicating": bistRearLEDCardCommunicating,
       "bistOtherMMInstalled": bistOtherMMInstalled,
       "bistOtherMMCommunicating": bistOtherMMCommunicating,
       "bistPowerModulesInstalled": bistPowerModulesInstalled,
       "bistPowerModulesFunctional": bistPowerModulesFunctional,
       "bistSwitchModulesInstalled": bistSwitchModulesInstalled,
       "bistSwitchModulesCommunicating": bistSwitchModulesCommunicating,
       "bistChassisFansMUXAInstalled": bistChassisFansMUXAInstalled,
       "bistChassisFansMUXAFunctional": bistChassisFansMUXAFunctional,
       "bistChassisFansMUXBInstalled": bistChassisFansMUXBInstalled,
       "bistChassisFansMUXBFunctional": bistChassisFansMUXBFunctional,
       "bistLastUpdate": bistLastUpdate,
       "rmmBistAndChassisStatus": rmmBistAndChassisStatus,
       "rbistRtc": rbistRtc,
       "rbistLocalI2CBus": rbistLocalI2CBus,
       "rbistEthernetPort1": rbistEthernetPort1,
       "rbistExternalI2CDevices": rbistExternalI2CDevices,
       "rbistInternalEthernetSwitch": rbistInternalEthernetSwitch,
       "rbistPhysicalNetworkLink": rbistPhysicalNetworkLink,
       "rbistLogicalNetworkLink": rbistLogicalNetworkLink,
       "rbistBladesInstalled": rbistBladesInstalled,
       "rbistBladesCommunicating": rbistBladesCommunicating,
       "rbistChassisFansInstalled": rbistChassisFansInstalled,
       "rbistChassisFansFunctional": rbistChassisFansFunctional,
       "rbistRearLEDCardInstalled": rbistRearLEDCardInstalled,
       "rbistRearLEDCardCommunicating": rbistRearLEDCardCommunicating,
       "rbistOtherMMInstalled": rbistOtherMMInstalled,
       "rbistOtherMMCommunicating": rbistOtherMMCommunicating,
       "rbistPowerModulesInstalled": rbistPowerModulesInstalled,
       "rbistPowerModulesFunctional": rbistPowerModulesFunctional,
       "rbistSwitchModulesInstalled": rbistSwitchModulesInstalled,
       "rbistSwitchModulesCommunicating": rbistSwitchModulesCommunicating,
       "rbistChassisFansMUXAInstalled": rbistChassisFansMUXAInstalled,
       "rbistChassisFansMUXAFunctional": rbistChassisFansMUXAFunctional,
       "rbistChassisFansMUXBInstalled": rbistChassisFansMUXBInstalled,
       "rbistChassisFansMUXBFunctional": rbistChassisFansMUXBFunctional,
       "rbistUpdateTime": rbistUpdateTime,
       "rbistLastUpdatePrimary": rbistLastUpdatePrimary,
       "fanPack": fanPack,
       "fanPackTable": fanPackTable,
       "fanPackEntry": fanPackEntry,
       "fanPackIndex": fanPackIndex,
       "fanPackExists": fanPackExists,
       "fanPackState": fanPackState,
       "fanPackFanCount": fanPackFanCount,
       "fanPackAverageSpeed": fanPackAverageSpeed,
       "fanPackAverageSpeedRPM": fanPackAverageSpeedRPM,
       "fanPackControllerState": fanPackControllerState,
       "systemHealth": systemHealth,
       "systemHealthStat": systemHealthStat,
       "systemHealthSummaryTable": systemHealthSummaryTable,
       "systemHealthSummaryEntry": systemHealthSummaryEntry,
       "systemHealthSummaryIndex": systemHealthSummaryIndex,
       "systemHealthSummarySeverity": systemHealthSummarySeverity,
       "systemHealthSummaryDescription": systemHealthSummaryDescription,
       "systemHealthSummaryDateTime": systemHealthSummaryDateTime,
       "systemHealthSummaryAuxData": systemHealthSummaryAuxData,
       "systemHealthSummaryEventID": systemHealthSummaryEventID,
       "leds": leds,
       "frontPanelLEDs": frontPanelLEDs,
       "faultLED": faultLED,
       "checkLogLED": checkLogLED,
       "identifyLED": identifyLED,
       "bladeLEDs": bladeLEDs,
       "bladeLEDsTable": bladeLEDsTable,
       "bladeLEDsEntry": bladeLEDsEntry,
       "ledBladeIndex": ledBladeIndex,
       "ledBladeId": ledBladeId,
       "ledBladeExists": ledBladeExists,
       "ledBladePowerState": ledBladePowerState,
       "ledBladeHealthState": ledBladeHealthState,
       "ledBladeName": ledBladeName,
       "ledBladeFault": ledBladeFault,
       "ledBladeCheckLog": ledBladeCheckLog,
       "ledBladeIdentify": ledBladeIdentify,
       "bladeLEDsDetailsTable": bladeLEDsDetailsTable,
       "bladeLEDsDetailsEntry": bladeLEDsDetailsEntry,
       "ledIndex": ledIndex,
       "ledBladeBayNumber": ledBladeBayNumber,
       "ledBladeComponentType": ledBladeComponentType,
       "ledBladeLabel": ledBladeLabel,
       "ledBladeState": ledBladeState,
       "ledBladeLocation": ledBladeLocation,
       "smLEDs": smLEDs,
       "smLEDsTable": smLEDsTable,
       "smLEDsEntry": smLEDsEntry,
       "ledSMIndex": ledSMIndex,
       "ledSMSlot": ledSMSlot,
       "ledSMLabel": ledSMLabel,
       "ledSMState": ledSMState,
       "ledSMLocation": ledSMLocation,
       "chassisFanLEDs": chassisFanLEDs,
       "chassisFanLEDsTable": chassisFanLEDsTable,
       "chassisFanLEDsEntry": chassisFanLEDsEntry,
       "ledChassisFanIndex": ledChassisFanIndex,
       "ledChassisFanId": ledChassisFanId,
       "ledChassisFanExists": ledChassisFanExists,
       "ledChassisFanError": ledChassisFanError,
       "fanPackLEDs": fanPackLEDs,
       "fanPackLEDsTable": fanPackLEDsTable,
       "fanPackLEDsEntry": fanPackLEDsEntry,
       "ledFanPackIndex": ledFanPackIndex,
       "ledFanPackId": ledFanPackId,
       "ledFanPackExists": ledFanPackExists,
       "ledFanPackError": ledFanPackError,
       "fuelGauge": fuelGauge,
       "fuelGaugeInformation": fuelGaugeInformation,
       "fuelGaugeTable": fuelGaugeTable,
       "fuelGaugeEntry": fuelGaugeEntry,
       "fuelGaugeIndex": fuelGaugeIndex,
       "fuelGaugePowerDomainNumber": fuelGaugePowerDomainNumber,
       "fuelGaugeStatus": fuelGaugeStatus,
       "fuelGaugePowerModules": fuelGaugePowerModules,
       "fuelGaugePowerManagementPolicySetting": fuelGaugePowerManagementPolicySetting,
       "fuelGaugeTotalPower": fuelGaugeTotalPower,
       "fuelGaugeAllocatedPower": fuelGaugeAllocatedPower,
       "fuelGaugeRemainingPower": fuelGaugeRemainingPower,
       "fuelGaugePowerInUsed": fuelGaugePowerInUsed,
       "powerDomain1": powerDomain1,
       "powerDomain1Table": powerDomain1Table,
       "powerDomain1Entry": powerDomain1Entry,
       "pd1Index": pd1Index,
       "pd1BayNumber": pd1BayNumber,
       "pd1BladePrimarySlot": pd1BladePrimarySlot,
       "pd1ModuleStatus": pd1ModuleStatus,
       "pd1ModuleName": pd1ModuleName,
       "pd1ModuleState": pd1ModuleState,
       "pd1ModuleAllocatedPowerCurrent": pd1ModuleAllocatedPowerCurrent,
       "pd1ModuleAllocatedPowerMax": pd1ModuleAllocatedPowerMax,
       "pd1ModuleAllocatedPowerMin": pd1ModuleAllocatedPowerMin,
       "pd1ModuleCPUDutyCycles": pd1ModuleCPUDutyCycles,
       "pd1ModuleThrottle": pd1ModuleThrottle,
       "pd1ModulePowerCapabilities": pd1ModulePowerCapabilities,
       "pd1ModuleMeasuredOrStatic": pd1ModuleMeasuredOrStatic,
       "pd1TopologyPath": pd1TopologyPath,
       "powerDomain1PowerTrending": powerDomain1PowerTrending,
       "pd1PowerTrendingPeriod": pd1PowerTrendingPeriod,
       "pd1PowerTrendingSampleTable": pd1PowerTrendingSampleTable,
       "pd1PowerTrendingSampleEntry": pd1PowerTrendingSampleEntry,
       "pd1PowerTrendingSampleIndex": pd1PowerTrendingSampleIndex,
       "pd1PowerTrendingSampleTimeStamp": pd1PowerTrendingSampleTimeStamp,
       "pd1PowerTrendingSampleAve": pd1PowerTrendingSampleAve,
       "moduleInformation": moduleInformation,
       "bladeDetails": bladeDetails,
       "bladeDetailsTable": bladeDetailsTable,
       "bladeDetailsEntry": bladeDetailsEntry,
       "bladeDetailsIndex": bladeDetailsIndex,
       "bladeDetailsId": bladeDetailsId,
       "bladeDetailsMaxPowerConfig": bladeDetailsMaxPowerConfig,
       "bladeDetailsEffectiveClockRate": bladeDetailsEffectiveClockRate,
       "bladeDetailsMaximumClockRate": bladeDetailsMaximumClockRate,
       "bladeDetailsPowerSaverMode": bladeDetailsPowerSaverMode,
       "bladeDetailsDynamicPowerSaver": bladeDetailsDynamicPowerSaver,
       "bladeDetailsDynamicPowerFavorPerformanceOverPower": bladeDetailsDynamicPowerFavorPerformanceOverPower,
       "bladeDetailsPowerControl": bladeDetailsPowerControl,
       "bladeDetailsPcapMin": bladeDetailsPcapMin,
       "bladeDetailsPcapGuaranteedMin": bladeDetailsPcapGuaranteedMin,
       "bladeDetailsPcapMax": bladeDetailsPcapMax,
       "bladePowerTrending": bladePowerTrending,
       "bladePowerTrendingPeriod": bladePowerTrendingPeriod,
       "bladePowerTrendingBladeId": bladePowerTrendingBladeId,
       "bladePowerTrendingTopologyPath": bladePowerTrendingTopologyPath,
       "bladePowerTrendingSampleTable": bladePowerTrendingSampleTable,
       "bladePowerTrendingSampleEntry": bladePowerTrendingSampleEntry,
       "bladePowerTrendingSampleIndex": bladePowerTrendingSampleIndex,
       "bladePowerTrendingSampleId": bladePowerTrendingSampleId,
       "bladePowerTrendingSampleTimeStamp": bladePowerTrendingSampleTimeStamp,
       "bladePowerTrendingSampleMax": bladePowerTrendingSampleMax,
       "bladePowerTrendingSampleMin": bladePowerTrendingSampleMin,
       "bladePowerTrendingSampleAve": bladePowerTrendingSampleAve,
       "bladePowerTrendingSampleTopologyId": bladePowerTrendingSampleTopologyId,
       "switchDetails": switchDetails,
       "switchPowerTrending": switchPowerTrending,
       "switchPowerTrendingPeriod": switchPowerTrendingPeriod,
       "switchPowerTrendingSwitchId": switchPowerTrendingSwitchId,
       "switchPowerTrendingSampleTable": switchPowerTrendingSampleTable,
       "switchPowerTrendingSampleEntry": switchPowerTrendingSampleEntry,
       "switchPowerTrendingSampleIndex": switchPowerTrendingSampleIndex,
       "switchPowerTrendingSampleId": switchPowerTrendingSampleId,
       "switchPowerTrendingSampleTimeStamp": switchPowerTrendingSampleTimeStamp,
       "switchPowerTrendingSampleMax": switchPowerTrendingSampleMax,
       "switchPowerTrendingSampleMin": switchPowerTrendingSampleMin,
       "switchPowerTrendingSampleAve": switchPowerTrendingSampleAve,
       "chassisFanDetails": chassisFanDetails,
       "chassisFanPowerTrending": chassisFanPowerTrending,
       "chassisFanPowerTrendingPeriod": chassisFanPowerTrendingPeriod,
       "chassisFanPowerTrendingId": chassisFanPowerTrendingId,
       "chassisFanPowerTrendingSampleTable": chassisFanPowerTrendingSampleTable,
       "chassisFanPowerTrendingSampleEntry": chassisFanPowerTrendingSampleEntry,
       "chassisFanPowerTrendingSampleIndex": chassisFanPowerTrendingSampleIndex,
       "chassisFanPowerTrendingSampleId": chassisFanPowerTrendingSampleId,
       "chassisFanPowerTrendingSampleTimeStamp": chassisFanPowerTrendingSampleTimeStamp,
       "chassisFanPowerTrendingSampleMax": chassisFanPowerTrendingSampleMax,
       "chassisFanPowerTrendingSampleMin": chassisFanPowerTrendingSampleMin,
       "chassisFanPowerTrendingSampleAve": chassisFanPowerTrendingSampleAve,
       "chassisInformation": chassisInformation,
       "chassisConfiguration": chassisConfiguration,
       "chassisTotalDCPowerAvailable": chassisTotalDCPowerAvailable,
       "chassisTotalPowerInUsed": chassisTotalPowerInUsed,
       "chassisTotalThermalOutput": chassisTotalThermalOutput,
       "chassisPowerService": chassisPowerService,
       "chassisPowerTrending": chassisPowerTrending,
       "chassisPowerTrendingPeriod": chassisPowerTrendingPeriod,
       "chassisPowerTrendingSampleTable": chassisPowerTrendingSampleTable,
       "chassisPowerTrendingSampleEntry": chassisPowerTrendingSampleEntry,
       "chassisPowerTrendingSampleIndex": chassisPowerTrendingSampleIndex,
       "chassisPowerTrendingSampleTimeStamp": chassisPowerTrendingSampleTimeStamp,
       "chassisPowerTrendingSampleAve": chassisPowerTrendingSampleAve,
       "chassisThermalTrending": chassisThermalTrending,
       "chassisThermalTrendingPeriod": chassisThermalTrendingPeriod,
       "rearLEDCardThermalTrendingTable": rearLEDCardThermalTrendingTable,
       "rearLEDCardThermalTrendingEntry": rearLEDCardThermalTrendingEntry,
       "rearLEDCardThermalTrendingIndex": rearLEDCardThermalTrendingIndex,
       "rearLEDCardThermalTrendingTimeStamp": rearLEDCardThermalTrendingTimeStamp,
       "rearLEDCardThermalTrendingTemperatureAvg": rearLEDCardThermalTrendingTemperatureAvg,
       "rearLEDCardThermalTrendingTemperatureMin": rearLEDCardThermalTrendingTemperatureMin,
       "rearLEDCardThermalTrendingTemperatureMax": rearLEDCardThermalTrendingTemperatureMax,
       "cfmThermalTrendingTable": cfmThermalTrendingTable,
       "cfmThermalTrendingEntry": cfmThermalTrendingEntry,
       "cfmThermalTrendingIndex": cfmThermalTrendingIndex,
       "cfmThermalTrendingTimeStamp": cfmThermalTrendingTimeStamp,
       "cfmThermalTrendingCurrentCFM": cfmThermalTrendingCurrentCFM,
       "cfmThermalTrendingMaxCFM": cfmThermalTrendingMaxCFM,
       "ehiThermalTrendingTable": ehiThermalTrendingTable,
       "ehiThermalTrendingEntry": ehiThermalTrendingEntry,
       "ehiThermalTrendingIndex": ehiThermalTrendingIndex,
       "ehiThermalTrendingTimeStamp": ehiThermalTrendingTimeStamp,
       "ehiThermalTrendingMinEHI": ehiThermalTrendingMinEHI,
       "ehiThermalTrendingMaxEHI": ehiThermalTrendingMaxEHI,
       "ehiThermalTrendingAvgEHI": ehiThermalTrendingAvgEHI,
       "powerPolicyInformation": powerPolicyInformation,
       "powerPolicyTable": powerPolicyTable,
       "powerPolicyEntry": powerPolicyEntry,
       "powerPolicyIndex": powerPolicyIndex,
       "powerPolicyPowerDomainNumber": powerPolicyPowerDomainNumber,
       "powerPolicyName": powerPolicyName,
       "powerPolicyPwrSupplyFailureLimit": powerPolicyPwrSupplyFailureLimit,
       "powerPolicyMaxPowerLimit": powerPolicyMaxPowerLimit,
       "powerPolicyEstimatedUtilization": powerPolicyEstimatedUtilization,
       "powerPolicyActivate": powerPolicyActivate,
       "users": users,
       "mmUsers": mmUsers,
       "currentlyLoggedInTable": currentlyLoggedInTable,
       "currentlyLoggedInEntry": currentlyLoggedInEntry,
       "currentlyLoggedInEntryIndex": currentlyLoggedInEntryIndex,
       "currentlyLoggedInEntryUserId": currentlyLoggedInEntryUserId,
       "currentlyLoggedInEntryAccMethod": currentlyLoggedInEntryAccMethod,
       "vpdInformation": vpdInformation,
       "chassisInfoVpd": chassisInfoVpd,
       "chassisVpd": chassisVpd,
       "chassisVpdMachineType": chassisVpdMachineType,
       "chassisVpdMachineModel": chassisVpdMachineModel,
       "chassisSerialNumber": chassisSerialNumber,
       "chassisUUID": chassisUUID,
       "chassisManufacturingId": chassisManufacturingId,
       "chassisHardwareRevision": chassisHardwareRevision,
       "chassisFruNumber": chassisFruNumber,
       "chassisManufDate": chassisManufDate,
       "chassisPartNumber": chassisPartNumber,
       "chassisFruSerial": chassisFruSerial,
       "chassisManufacturingIDNumber": chassisManufacturingIDNumber,
       "chassisProductId": chassisProductId,
       "chassisSubManufacturerId": chassisSubManufacturerId,
       "chassisClei": chassisClei,
       "chassisHardwareRevisionString": chassisHardwareRevisionString,
       "mmHardwareVpd": mmHardwareVpd,
       "mmHardwareVpdTable": mmHardwareVpdTable,
       "mmHardwareVpdEntry": mmHardwareVpdEntry,
       "mmHardwareVpdIndex": mmHardwareVpdIndex,
       "mmHardwareVpdBayNumber": mmHardwareVpdBayNumber,
       "mmHardwareVpdManufacturingId": mmHardwareVpdManufacturingId,
       "mmHardwareVpdFruNumber": mmHardwareVpdFruNumber,
       "mmHardwareVpdHardwareRevision": mmHardwareVpdHardwareRevision,
       "mmHardwareVpdUuid": mmHardwareVpdUuid,
       "mmHardwareVpdManufDate": mmHardwareVpdManufDate,
       "mmHardwareVpdPartNumber": mmHardwareVpdPartNumber,
       "mmHardwareVpdFruSerial": mmHardwareVpdFruSerial,
       "mmHardwareVpdManufacturingIDNumber": mmHardwareVpdManufacturingIDNumber,
       "mmHardwareVpdProductId": mmHardwareVpdProductId,
       "mmHardwareVpdSubManufacturerId": mmHardwareVpdSubManufacturerId,
       "mmHardwareVpdClei": mmHardwareVpdClei,
       "mmHardwareVpdHardwareRevisionString": mmHardwareVpdHardwareRevisionString,
       "mmFirmwareVpd": mmFirmwareVpd,
       "mmMainApplVpdTable": mmMainApplVpdTable,
       "mmMainApplVpdEntry": mmMainApplVpdEntry,
       "mmMainApplVpdIndex": mmMainApplVpdIndex,
       "mmMainApplVpdName": mmMainApplVpdName,
       "mmMainApplVpdBuildId": mmMainApplVpdBuildId,
       "mmMainApplVpdRevisonNumber": mmMainApplVpdRevisonNumber,
       "mmMainApplVpdFilename": mmMainApplVpdFilename,
       "mmMainApplVpdBuildDate": mmMainApplVpdBuildDate,
       "bladeHardwareVpd": bladeHardwareVpd,
       "bladeHardwareVpdTable": bladeHardwareVpdTable,
       "bladeHardwareVpdEntry": bladeHardwareVpdEntry,
       "bladeHardwareVpdIndex": bladeHardwareVpdIndex,
       "bladeHardwareVpdBayNumber": bladeHardwareVpdBayNumber,
       "bladeHardwareVpdManufacturingId": bladeHardwareVpdManufacturingId,
       "bladeHardwareVpdFruNumber": bladeHardwareVpdFruNumber,
       "bladeHardwareVpdHardwareRevision": bladeHardwareVpdHardwareRevision,
       "bladeHardwareVpdSerialNumber": bladeHardwareVpdSerialNumber,
       "bladeHardwareVpdMachineType": bladeHardwareVpdMachineType,
       "bladeHardwareVpdUuid": bladeHardwareVpdUuid,
       "bladeHardwareVpdManufDate": bladeHardwareVpdManufDate,
       "bladeHardwareVpdPartNumber": bladeHardwareVpdPartNumber,
       "bladeHardwareVpdFruSerial": bladeHardwareVpdFruSerial,
       "bladeHardwareVpdMachineModel": bladeHardwareVpdMachineModel,
       "bladeHardwareVpdManufacturingIDNumber": bladeHardwareVpdManufacturingIDNumber,
       "bladeHardwareVpdProductId": bladeHardwareVpdProductId,
       "bladeHardwareVpdSubManufacturerId": bladeHardwareVpdSubManufacturerId,
       "bladeHardwareVpdClei": bladeHardwareVpdClei,
       "bladeHardwareVpdHardwareRevisionString": bladeHardwareVpdHardwareRevisionString,
       "bladeDaughterVpdCardType": bladeDaughterVpdCardType,
       "bladeDaughterVpdManufacturingId": bladeDaughterVpdManufacturingId,
       "bladeDaughterVpdFruNumber": bladeDaughterVpdFruNumber,
       "bladeDaughterVpdHardwareRevision": bladeDaughterVpdHardwareRevision,
       "bladeDaughterVpdSerialNumber": bladeDaughterVpdSerialNumber,
       "bladeDaughterVpdMachineType": bladeDaughterVpdMachineType,
       "bladeDaughterVpdUuid": bladeDaughterVpdUuid,
       "bladeDaughterVpdManufDate": bladeDaughterVpdManufDate,
       "bladeDaughterVpdPartNumber": bladeDaughterVpdPartNumber,
       "bladeDaughterVpdFruSerial": bladeDaughterVpdFruSerial,
       "bladeDaughterVpdManufacturingIDNumber": bladeDaughterVpdManufacturingIDNumber,
       "bladeDaughterVpdProductId": bladeDaughterVpdProductId,
       "bladeDaughterVpdSubManufacturerId": bladeDaughterVpdSubManufacturerId,
       "bladeDaughterVpdClei": bladeDaughterVpdClei,
       "bladeDaughterVpdHardwareRevisionString": bladeDaughterVpdHardwareRevisionString,
       "bladeMACAddressVpdTable": bladeMACAddressVpdTable,
       "bladeMACAddressVpdEntry": bladeMACAddressVpdEntry,
       "bladeMACAddressVpdIndex": bladeMACAddressVpdIndex,
       "bladeMACAddress1Vpd": bladeMACAddress1Vpd,
       "bladeMACAddress2Vpd": bladeMACAddress2Vpd,
       "bladeMACAddress3Vpd": bladeMACAddress3Vpd,
       "bladeMACAddress4Vpd": bladeMACAddress4Vpd,
       "bladeMACAddress5Vpd": bladeMACAddress5Vpd,
       "bladeMACAddress6Vpd": bladeMACAddress6Vpd,
       "bladeMACAddress7Vpd": bladeMACAddress7Vpd,
       "bladeMACAddress8Vpd": bladeMACAddress8Vpd,
       "bladeDaughterCard1MACAddress1Vpd": bladeDaughterCard1MACAddress1Vpd,
       "bladeDaughterCard1MACAddress2Vpd": bladeDaughterCard1MACAddress2Vpd,
       "bladeDaughterCard1MACAddress3Vpd": bladeDaughterCard1MACAddress3Vpd,
       "bladeDaughterCard1MACAddress4Vpd": bladeDaughterCard1MACAddress4Vpd,
       "bladeDaughterCard1MACAddress5Vpd": bladeDaughterCard1MACAddress5Vpd,
       "bladeDaughterCard1MACAddress6Vpd": bladeDaughterCard1MACAddress6Vpd,
       "bladeDaughterCard1MACAddress7Vpd": bladeDaughterCard1MACAddress7Vpd,
       "bladeDaughterCard1MACAddress8Vpd": bladeDaughterCard1MACAddress8Vpd,
       "bladeDaughterCard2MACAddress1Vpd": bladeDaughterCard2MACAddress1Vpd,
       "bladeDaughterCard2MACAddress2Vpd": bladeDaughterCard2MACAddress2Vpd,
       "bladeDaughterCard2MACAddress3Vpd": bladeDaughterCard2MACAddress3Vpd,
       "bladeDaughterCard2MACAddress4Vpd": bladeDaughterCard2MACAddress4Vpd,
       "bladeDaughterCard2MACAddress5Vpd": bladeDaughterCard2MACAddress5Vpd,
       "bladeDaughterCard2MACAddress6Vpd": bladeDaughterCard2MACAddress6Vpd,
       "bladeDaughterCard2MACAddress7Vpd": bladeDaughterCard2MACAddress7Vpd,
       "bladeDaughterCard2MACAddress8Vpd": bladeDaughterCard2MACAddress8Vpd,
       "bladeDaughterCard3MACAddress1Vpd": bladeDaughterCard3MACAddress1Vpd,
       "bladeDaughterCard3MACAddress2Vpd": bladeDaughterCard3MACAddress2Vpd,
       "bladeDaughterCard3MACAddress3Vpd": bladeDaughterCard3MACAddress3Vpd,
       "bladeDaughterCard3MACAddress4Vpd": bladeDaughterCard3MACAddress4Vpd,
       "bladeDaughterCard3MACAddress5Vpd": bladeDaughterCard3MACAddress5Vpd,
       "bladeDaughterCard3MACAddress6Vpd": bladeDaughterCard3MACAddress6Vpd,
       "bladeDaughterCard3MACAddress7Vpd": bladeDaughterCard3MACAddress7Vpd,
       "bladeDaughterCard3MACAddress8Vpd": bladeDaughterCard3MACAddress8Vpd,
       "bladeDaughterCard4MACAddress1Vpd": bladeDaughterCard4MACAddress1Vpd,
       "bladeDaughterCard4MACAddress2Vpd": bladeDaughterCard4MACAddress2Vpd,
       "bladeDaughterCard4MACAddress3Vpd": bladeDaughterCard4MACAddress3Vpd,
       "bladeDaughterCard4MACAddress4Vpd": bladeDaughterCard4MACAddress4Vpd,
       "bladeDaughterCard4MACAddress5Vpd": bladeDaughterCard4MACAddress5Vpd,
       "bladeDaughterCard4MACAddress6Vpd": bladeDaughterCard4MACAddress6Vpd,
       "bladeDaughterCard4MACAddress7Vpd": bladeDaughterCard4MACAddress7Vpd,
       "bladeDaughterCard4MACAddress8Vpd": bladeDaughterCard4MACAddress8Vpd,
       "bladeDaughterCard5MACAddress1Vpd": bladeDaughterCard5MACAddress1Vpd,
       "bladeDaughterCard5MACAddress2Vpd": bladeDaughterCard5MACAddress2Vpd,
       "bladeDaughterCard5MACAddress3Vpd": bladeDaughterCard5MACAddress3Vpd,
       "bladeDaughterCard5MACAddress4Vpd": bladeDaughterCard5MACAddress4Vpd,
       "bladeDaughterCard5MACAddress5Vpd": bladeDaughterCard5MACAddress5Vpd,
       "bladeDaughterCard5MACAddress6Vpd": bladeDaughterCard5MACAddress6Vpd,
       "bladeDaughterCard5MACAddress7Vpd": bladeDaughterCard5MACAddress7Vpd,
       "bladeDaughterCard5MACAddress8Vpd": bladeDaughterCard5MACAddress8Vpd,
       "bladeHSDaughterCard1MACAddress1Vpd": bladeHSDaughterCard1MACAddress1Vpd,
       "bladeHSDaughterCard1MACAddress2Vpd": bladeHSDaughterCard1MACAddress2Vpd,
       "bladeHSDaughterCard1MACAddress3Vpd": bladeHSDaughterCard1MACAddress3Vpd,
       "bladeHSDaughterCard1MACAddress4Vpd": bladeHSDaughterCard1MACAddress4Vpd,
       "bladeHSDaughterCard1MACAddress5Vpd": bladeHSDaughterCard1MACAddress5Vpd,
       "bladeHSDaughterCard1MACAddress6Vpd": bladeHSDaughterCard1MACAddress6Vpd,
       "bladeHSDaughterCard1MACAddress7Vpd": bladeHSDaughterCard1MACAddress7Vpd,
       "bladeHSDaughterCard1MACAddress8Vpd": bladeHSDaughterCard1MACAddress8Vpd,
       "bladeSideCardMACAddress1Vpd": bladeSideCardMACAddress1Vpd,
       "bladeSideCardMACAddress2Vpd": bladeSideCardMACAddress2Vpd,
       "bladeSideCardMACAddress3Vpd": bladeSideCardMACAddress3Vpd,
       "bladeSideCardMACAddress4Vpd": bladeSideCardMACAddress4Vpd,
       "bladeSideCardMACAddress5Vpd": bladeSideCardMACAddress5Vpd,
       "bladeSideCardMACAddress6Vpd": bladeSideCardMACAddress6Vpd,
       "bladeSideCardMACAddress7Vpd": bladeSideCardMACAddress7Vpd,
       "bladeSideCardMACAddress8Vpd": bladeSideCardMACAddress8Vpd,
       "bladeExpCardVpdTable": bladeExpCardVpdTable,
       "bladeExpCardVpdEntry": bladeExpCardVpdEntry,
       "bladeExpCardVpdIndex": bladeExpCardVpdIndex,
       "bladeExpCardVpdBayNumber": bladeExpCardVpdBayNumber,
       "bladeExpCardVpdManufacturingId": bladeExpCardVpdManufacturingId,
       "bladeExpCardVpdFruNumber": bladeExpCardVpdFruNumber,
       "bladeExpCardVpdHardwareRevision": bladeExpCardVpdHardwareRevision,
       "bladeExpCardVpdSerialNumber": bladeExpCardVpdSerialNumber,
       "bladeExpCardVpdMachineType": bladeExpCardVpdMachineType,
       "bladeExpCardVpdUuid": bladeExpCardVpdUuid,
       "bladeExpCardVpdManufDate": bladeExpCardVpdManufDate,
       "bladeExpCardVpdPartNumber": bladeExpCardVpdPartNumber,
       "bladeExpCardVpdFruSerial": bladeExpCardVpdFruSerial,
       "bladeExpCardVpdMachineModel": bladeExpCardVpdMachineModel,
       "bladeExpCardVpdManufacturingIDNumber": bladeExpCardVpdManufacturingIDNumber,
       "bladeExpCardVpdProductId": bladeExpCardVpdProductId,
       "bladeExpCardVpdSubManufacturerId": bladeExpCardVpdSubManufacturerId,
       "bladeExpCardVpdClei": bladeExpCardVpdClei,
       "bladeExpCardVpdBladeBayNumber": bladeExpCardVpdBladeBayNumber,
       "bladeExpCardVpdCardTypeInfo": bladeExpCardVpdCardTypeInfo,
       "bladeExpCardVpdHighSpeed": bladeExpCardVpdHighSpeed,
       "bladeExpCardVpdHardwareRevisionString": bladeExpCardVpdHardwareRevisionString,
       "bladeAndExpCardWwnGuidVpdTable": bladeAndExpCardWwnGuidVpdTable,
       "bladeAndExpCardWwnGuidVpdEntry": bladeAndExpCardWwnGuidVpdEntry,
       "bladeAndExpCardWwnGuidVpdIndex": bladeAndExpCardWwnGuidVpdIndex,
       "bladeAndExpCardWwnGuidVpdBayNumber": bladeAndExpCardWwnGuidVpdBayNumber,
       "bladeAndExpCardWwnGuidVpdName": bladeAndExpCardWwnGuidVpdName,
       "bladeAndExpCardWwnGuidVpdBladeBayNumber": bladeAndExpCardWwnGuidVpdBladeBayNumber,
       "bladeAndExpCardWwnGuidVpdType": bladeAndExpCardWwnGuidVpdType,
       "bladeAndExpCardWwnGuidVpd1": bladeAndExpCardWwnGuidVpd1,
       "bladeAndExpCardWwnGuidVpd2": bladeAndExpCardWwnGuidVpd2,
       "bladeAndExpCardWwnGuidVpd3": bladeAndExpCardWwnGuidVpd3,
       "bladeAndExpCardWwnGuidVpd4": bladeAndExpCardWwnGuidVpd4,
       "bladeAndExpCardWwnGuidVpd5": bladeAndExpCardWwnGuidVpd5,
       "bladeAndExpCardWwnGuidVpd6": bladeAndExpCardWwnGuidVpd6,
       "bladeAndExpCardWwnGuidVpd7": bladeAndExpCardWwnGuidVpd7,
       "bladeAndExpCardWwnGuidVpd8": bladeAndExpCardWwnGuidVpd8,
       "bladeManagementCardVpdTable": bladeManagementCardVpdTable,
       "bladeManagementCardVpdEntry": bladeManagementCardVpdEntry,
       "bladeManagementCardVpdIndex": bladeManagementCardVpdIndex,
       "bladeManagementCardVpdBayNumber": bladeManagementCardVpdBayNumber,
       "bladeManagementCardVpdManufacturingId": bladeManagementCardVpdManufacturingId,
       "bladeManagementCardVpdFruNumber": bladeManagementCardVpdFruNumber,
       "bladeManagementCardVpdHardwareRevision": bladeManagementCardVpdHardwareRevision,
       "bladeManagementCardVpdSerialNumber": bladeManagementCardVpdSerialNumber,
       "bladeManagementCardVpdMachineType": bladeManagementCardVpdMachineType,
       "bladeManagementCardVpdUuid": bladeManagementCardVpdUuid,
       "bladeManagementCardVpdManufDate": bladeManagementCardVpdManufDate,
       "bladeManagementCardVpdPartNumber": bladeManagementCardVpdPartNumber,
       "bladeManagementCardVpdFruSerial": bladeManagementCardVpdFruSerial,
       "bladeManagementCardVpdMachineModel": bladeManagementCardVpdMachineModel,
       "bladeManagementCardVpdManufacturingIDNumber": bladeManagementCardVpdManufacturingIDNumber,
       "bladeManagementCardVpdProductId": bladeManagementCardVpdProductId,
       "bladeManagementCardVpdSubManufacturerId": bladeManagementCardVpdSubManufacturerId,
       "bladeManagementCardVpdClei": bladeManagementCardVpdClei,
       "bladeManagementCardVpdHardwareRevisionString": bladeManagementCardVpdHardwareRevisionString,
       "bladeFirmwareVpd": bladeFirmwareVpd,
       "bladeBiosVPDTable": bladeBiosVPDTable,
       "bladeBiosVPDEntry": bladeBiosVPDEntry,
       "bladeBiosVpdIndex": bladeBiosVpdIndex,
       "bladeBiosVpdId": bladeBiosVpdId,
       "bladeBiosVpdExists": bladeBiosVpdExists,
       "bladeBiosVpdPowerState": bladeBiosVpdPowerState,
       "bladeBiosVpdName": bladeBiosVpdName,
       "bladeBiosVpdBuildId": bladeBiosVpdBuildId,
       "bladeBiosVpdRevision": bladeBiosVpdRevision,
       "bladeBiosVpdDate": bladeBiosVpdDate,
       "bladeBiosVpdLevelStatus": bladeBiosVpdLevelStatus,
       "bladeDiagsVPDTable": bladeDiagsVPDTable,
       "bladeDiagsVPDEntry": bladeDiagsVPDEntry,
       "bladeDiagsVpdIndex": bladeDiagsVpdIndex,
       "bladeDiagsVpdId": bladeDiagsVpdId,
       "bladeDiagsVpdExists": bladeDiagsVpdExists,
       "bladeDiagsVpdPowerState": bladeDiagsVpdPowerState,
       "bladeDiagsVpdName": bladeDiagsVpdName,
       "bladeDiagsVpdBuildId": bladeDiagsVpdBuildId,
       "bladeDiagsVpdRevision": bladeDiagsVpdRevision,
       "bladeDiagsVpdDate": bladeDiagsVpdDate,
       "bladeDiagsVpdLevelStatus": bladeDiagsVpdLevelStatus,
       "bladeSysMgmtProcVPDTable": bladeSysMgmtProcVPDTable,
       "bladeSysMgmtProcVPDEntry": bladeSysMgmtProcVPDEntry,
       "bladeSysMgmtProcVpdIndex": bladeSysMgmtProcVpdIndex,
       "bladeSysMgmtProcVpdId": bladeSysMgmtProcVpdId,
       "bladeSysMgmtProcVpdExists": bladeSysMgmtProcVpdExists,
       "bladeSysMgmtProcVpdPowerState": bladeSysMgmtProcVpdPowerState,
       "bladeSysMgmtProcVpdName": bladeSysMgmtProcVpdName,
       "bladeSysMgmtProcVpdBuildId": bladeSysMgmtProcVpdBuildId,
       "bladeSysMgmtProcVpdRevision": bladeSysMgmtProcVpdRevision,
       "bladeSysMgmtProcVpdLevelStatus": bladeSysMgmtProcVpdLevelStatus,
       "smHardwareVpd": smHardwareVpd,
       "smHardwareVpdTable": smHardwareVpdTable,
       "smHardwareVpdEntry": smHardwareVpdEntry,
       "smHardwareVpdIndex": smHardwareVpdIndex,
       "smHardwareVpdBayNumber": smHardwareVpdBayNumber,
       "smHardwareVpdManufacturingId": smHardwareVpdManufacturingId,
       "smHardwareVpdFruNumber": smHardwareVpdFruNumber,
       "smHardwareVpdHardwareRevision": smHardwareVpdHardwareRevision,
       "smHardwareVpdUuid": smHardwareVpdUuid,
       "smHardwareVpdManufDate": smHardwareVpdManufDate,
       "smHardwareVpdPartNumber": smHardwareVpdPartNumber,
       "smHardwareVpdFruSerial": smHardwareVpdFruSerial,
       "smHardwareVpdManufacturingIDNumber": smHardwareVpdManufacturingIDNumber,
       "smHardwareVpdProductId": smHardwareVpdProductId,
       "smHardwareVpdSubManufacturerId": smHardwareVpdSubManufacturerId,
       "smHardwareVpdClei": smHardwareVpdClei,
       "smHardwareVpdWwnGuid": smHardwareVpdWwnGuid,
       "smHardwareVpdWwnGuidType": smHardwareVpdWwnGuidType,
       "smHardwareVpdWidth": smHardwareVpdWidth,
       "smHardwareVpdHardwareRevisionString": smHardwareVpdHardwareRevisionString,
       "smFirmwareVpd": smFirmwareVpd,
       "smMainAppVpdTable": smMainAppVpdTable,
       "smMainAppVpdEntry": smMainAppVpdEntry,
       "smMainAppVpdIndex": smMainAppVpdIndex,
       "smMainAppVpdId": smMainAppVpdId,
       "smMainAppVpdExists": smMainAppVpdExists,
       "smMainAppVpdSwitchType": smMainAppVpdSwitchType,
       "smMainApp1VpdBuildId": smMainApp1VpdBuildId,
       "smMainApp1VpdBuildDate": smMainApp1VpdBuildDate,
       "smMainApp1VpdRevisionNumber": smMainApp1VpdRevisionNumber,
       "smMainApp2VpdBuildId": smMainApp2VpdBuildId,
       "smMainApp2VpdBuildDate": smMainApp2VpdBuildDate,
       "smMainApp2VpdRevisionNumber": smMainApp2VpdRevisionNumber,
       "smMainApp3VpdBuildId": smMainApp3VpdBuildId,
       "smMainApp3VpdBuildDate": smMainApp3VpdBuildDate,
       "smMainApp3VpdRevisionNumber": smMainApp3VpdRevisionNumber,
       "smMainAppVpdSwitchSubType": smMainAppVpdSwitchSubType,
       "smBootRomVpdTable": smBootRomVpdTable,
       "smBootRomVpdEntry": smBootRomVpdEntry,
       "smBootRomVpdIndex": smBootRomVpdIndex,
       "smBootRomVpdId": smBootRomVpdId,
       "smBootRomVpdExists": smBootRomVpdExists,
       "smBootRomVpdSwitchType": smBootRomVpdSwitchType,
       "smBootRomVpdBuildId": smBootRomVpdBuildId,
       "smBootRomVpdBuildDate": smBootRomVpdBuildDate,
       "smBootRomVpdRevisionNumber": smBootRomVpdRevisionNumber,
       "smBootRomVpdSwitchSubType": smBootRomVpdSwitchSubType,
       "pmHardwareVpd": pmHardwareVpd,
       "pmHardwareVpdTable": pmHardwareVpdTable,
       "pmHardwareVpdEntry": pmHardwareVpdEntry,
       "pmHardwareVpdIndex": pmHardwareVpdIndex,
       "pmHardwareVpdBayNumber": pmHardwareVpdBayNumber,
       "pmHardwareVpdManufacturingId": pmHardwareVpdManufacturingId,
       "pmHardwareVpdFruNumber": pmHardwareVpdFruNumber,
       "pmHardwareVpdHardwareRevision": pmHardwareVpdHardwareRevision,
       "pmHardwareVpdUuid": pmHardwareVpdUuid,
       "pmHardwareVpdManufDate": pmHardwareVpdManufDate,
       "pmHardwareVpdPartNumber": pmHardwareVpdPartNumber,
       "pmHardwareVpdFruSerial": pmHardwareVpdFruSerial,
       "pmHardwareVpdManufacturingIDNumber": pmHardwareVpdManufacturingIDNumber,
       "pmHardwareVpdProductId": pmHardwareVpdProductId,
       "pmHardwareVpdSubManufacturerId": pmHardwareVpdSubManufacturerId,
       "pmHardwareVpdClei": pmHardwareVpdClei,
       "pmHardwareVpdHardwareRevisionString": pmHardwareVpdHardwareRevisionString,
       "rearLEDCardHardwareVpd": rearLEDCardHardwareVpd,
       "rearLEDCardHardwareVpdManufacturingId": rearLEDCardHardwareVpdManufacturingId,
       "rearLEDCardHardwareVpdFruNumber": rearLEDCardHardwareVpdFruNumber,
       "rearLEDCardHardwareVpdHardwareRevision": rearLEDCardHardwareVpdHardwareRevision,
       "rearLEDCardHardwareVpdUuid": rearLEDCardHardwareVpdUuid,
       "rearLEDCardHardwareVpdManufacturingIDNumber": rearLEDCardHardwareVpdManufacturingIDNumber,
       "rearLEDCardHardwareVpdProductId": rearLEDCardHardwareVpdProductId,
       "rearLEDCardHardwareVpdSubManufacturerId": rearLEDCardHardwareVpdSubManufacturerId,
       "rearLEDCardHardwareVpdClei": rearLEDCardHardwareVpdClei,
       "rearLEDCardHardwareVpdHardwareRevisionString": rearLEDCardHardwareVpdHardwareRevisionString,
       "rearLEDCardHardwareVpdManufDate": rearLEDCardHardwareVpdManufDate,
       "rearLEDCardHardwareVpdPartNumber": rearLEDCardHardwareVpdPartNumber,
       "rearLEDCardHardwareVpdFruSerial": rearLEDCardHardwareVpdFruSerial,
       "chassisFanFirmwareVpd": chassisFanFirmwareVpd,
       "chassisFanControllerVPDTable": chassisFanControllerVPDTable,
       "chassisFanControllerVPDEntry": chassisFanControllerVPDEntry,
       "chassisFanControllerVpdIndex": chassisFanControllerVpdIndex,
       "chassisFanControllerVpdId": chassisFanControllerVpdId,
       "chassisFanControllerVpdExists": chassisFanControllerVpdExists,
       "chassisFanControllerVpdRevision": chassisFanControllerVpdRevision,
       "chassisFanHardwareVpd": chassisFanHardwareVpd,
       "chassisFanHardwareVpdTable": chassisFanHardwareVpdTable,
       "chassisFanHardwareVpdEntry": chassisFanHardwareVpdEntry,
       "chassisFanHardwareVpdIndex": chassisFanHardwareVpdIndex,
       "chassisFanHardwareVpdBayNumber": chassisFanHardwareVpdBayNumber,
       "chassisFanHardwareVpdManufacturingId": chassisFanHardwareVpdManufacturingId,
       "chassisFanHardwareVpdFruNumber": chassisFanHardwareVpdFruNumber,
       "chassisFanHardwareVpdHardwareRevision": chassisFanHardwareVpdHardwareRevision,
       "chassisFanHardwareVpdUuid": chassisFanHardwareVpdUuid,
       "chassisFanHardwareVpdManufDate": chassisFanHardwareVpdManufDate,
       "chassisFanHardwareVpdPartNumber": chassisFanHardwareVpdPartNumber,
       "chassisFanHardwareVpdFruSerial": chassisFanHardwareVpdFruSerial,
       "chassisFanHardwareVpdManufacturingIDNumber": chassisFanHardwareVpdManufacturingIDNumber,
       "chassisFanHardwareVpdProductId": chassisFanHardwareVpdProductId,
       "chassisFanHardwareVpdSubManufacturerId": chassisFanHardwareVpdSubManufacturerId,
       "chassisFanHardwareVpdClei": chassisFanHardwareVpdClei,
       "chassisFanHardwareVpdHardwareRevisionString": chassisFanHardwareVpdHardwareRevisionString,
       "pmFirmwareVpd": pmFirmwareVpd,
       "pmControllerVPDTable": pmControllerVPDTable,
       "pmControllerVPDEntry": pmControllerVPDEntry,
       "pmControllerVpdIndex": pmControllerVpdIndex,
       "pmControllerVpdId": pmControllerVpdId,
       "pmControllerVpdExists": pmControllerVpdExists,
       "pmControllerVpdRevision": pmControllerVpdRevision,
       "inventoryManagementActivityVpdTable": inventoryManagementActivityVpdTable,
       "inventoryManagementActivityVpdEntry": inventoryManagementActivityVpdEntry,
       "componentLevelActivityVpdIndex": componentLevelActivityVpdIndex,
       "componentLevelActivityVpdFruNumber": componentLevelActivityVpdFruNumber,
       "componentLevelActivityVpdSerialNumber": componentLevelActivityVpdSerialNumber,
       "componentLevelActivityVpdManufacturingId": componentLevelActivityVpdManufacturingId,
       "componentLevelActivityVpdBayNumber": componentLevelActivityVpdBayNumber,
       "componentLevelActivityVpdAction": componentLevelActivityVpdAction,
       "componentLevelActivityVpdTimestamp": componentLevelActivityVpdTimestamp,
       "componentLevelActivityVpdModuleName": componentLevelActivityVpdModuleName,
       "componentLevelActivityVpdTopologyPath": componentLevelActivityVpdTopologyPath,
       "reloadVpdData": reloadVpdData,
       "reloadAllVpdData": reloadAllVpdData,
       "reloadFwVpdData": reloadFwVpdData,
       "reloadHwVpdData": reloadHwVpdData,
       "reloadMACAddress": reloadMACAddress,
       "reloadWwnGuidVpdData": reloadWwnGuidVpdData,
       "airFilter": airFilter,
       "passiveAirFilter": passiveAirFilter,
       "passiveAirFilterStatus": passiveAirFilterStatus,
       "passiveAirFilterMonthFreq": passiveAirFilterMonthFreq,
       "passiveAirFilterReplaceDate": passiveAirFilterReplaceDate,
       "componentInformation": componentInformation,
       "componentInventory": componentInventory,
       "componentInventoryTable": componentInventoryTable,
       "componentInventoryEntry": componentInventoryEntry,
       "componentInventoryTopologyPath": componentInventoryTopologyPath,
       "componentInventoryInstance": componentInventoryInstance,
       "componentInventoryDescription": componentInventoryDescription,
       "componentInventoryMachineTypeModel": componentInventoryMachineTypeModel,
       "componentInventoryMachineSerial": componentInventoryMachineSerial,
       "componentInventoryAssetID": componentInventoryAssetID,
       "componentInventoryPartNumber": componentInventoryPartNumber,
       "componentInventoryFRUNumber": componentInventoryFRUNumber,
       "componentInventoryFRUSerialNumber": componentInventoryFRUSerialNumber,
       "componentInventoryManufacture": componentInventoryManufacture,
       "componentInventoryHardwareRevision": componentInventoryHardwareRevision,
       "componentInventoryManufactureDate": componentInventoryManufactureDate,
       "componentInventoryUUID": componentInventoryUUID,
       "componentInventoryProductID": componentInventoryProductID,
       "componentInventorySubManufactureID": componentInventorySubManufactureID,
       "componentInventoryCLEI": componentInventoryCLEI,
       "componentInventoryAssetTag": componentInventoryAssetTag,
       "componentInventorySpeed": componentInventorySpeed,
       "componentInventoryIdentifier": componentInventoryIdentifier,
       "componentInventorySize": componentInventorySize,
       "componentInventoryMemoryType": componentInventoryMemoryType,
       "componentInventoryProductName": componentInventoryProductName,
       "componentInventoryProductVersion": componentInventoryProductVersion,
       "componentInventoryProcessorType": componentInventoryProcessorType,
       "componentInventoryProcessorFamily": componentInventoryProcessorFamily,
       "componentInventoryProcessorCores": componentInventoryProcessorCores,
       "componentInventoryProcessorThreads": componentInventoryProcessorThreads,
       "componentInventoryProcessorL1DCache": componentInventoryProcessorL1DCache,
       "componentInventoryProcessorL1ICache": componentInventoryProcessorL1ICache,
       "componentInventoryProcessorL2Cache": componentInventoryProcessorL2Cache,
       "componentInventoryProcessorL3Cache": componentInventoryProcessorL3Cache,
       "componentInventoryProcessorVoltage": componentInventoryProcessorVoltage,
       "componentInventoryProcessorExtClock": componentInventoryProcessorExtClock,
       "componentInventoryProcessorDataWidth": componentInventoryProcessorDataWidth,
       "componentInventoryManufactureIDNum": componentInventoryManufactureIDNum,
       "componentInventoryGlobalID": componentInventoryGlobalID,
       "componentInventoryTableCacheTimeout": componentInventoryTableCacheTimeout,
       "componentFirmware": componentFirmware,
       "componentFirmwareTable": componentFirmwareTable,
       "componentFirmwareEntry": componentFirmwareEntry,
       "componentFirmwareTopologyPath": componentFirmwareTopologyPath,
       "componentFirmwareIndex": componentFirmwareIndex,
       "componentFirmwareComponentInstance": componentFirmwareComponentInstance,
       "componentFirmwareComponentDescription": componentFirmwareComponentDescription,
       "componentFirmwareType": componentFirmwareType,
       "componentFirmwareBuildID": componentFirmwareBuildID,
       "componentFirmwareReleaseDate": componentFirmwareReleaseDate,
       "componentFirmwareFilename": componentFirmwareFilename,
       "componentFirmwareRevision": componentFirmwareRevision,
       "componentFirmwareRevisionMajor": componentFirmwareRevisionMajor,
       "componentFirmwareRevisionMinor": componentFirmwareRevisionMinor,
       "componentFirmwareLevelStatus": componentFirmwareLevelStatus,
       "componentFirmwarePendingBuildID": componentFirmwarePendingBuildID,
       "componentFirmwarePendingReleaseDate": componentFirmwarePendingReleaseDate,
       "componentFirmwarePendingRevision": componentFirmwarePendingRevision,
       "componentFirmwareReleaseLevel": componentFirmwareReleaseLevel,
       "componentFirmwareImageStatus": componentFirmwareImageStatus,
       "componentFirmwareRole": componentFirmwareRole,
       "componentFirmwareTypeID": componentFirmwareTypeID,
       "componentFirmwareTableCacheTimeout": componentFirmwareTableCacheTimeout,
       "nodeFirmwareAnalysisTable": nodeFirmwareAnalysisTable,
       "nodeFirmwareAnalysisEntry": nodeFirmwareAnalysisEntry,
       "nodeFirmwareAnalysisIndex": nodeFirmwareAnalysisIndex,
       "nodeFirmwareAnalysisMachineTypeModel": nodeFirmwareAnalysisMachineTypeModel,
       "nodeFirmwareAnalysisFirmwareType": nodeFirmwareAnalysisFirmwareType,
       "nodeFirmwareAnalysisBuildId": nodeFirmwareAnalysisBuildId,
       "nodeFirmwareAnalysisReleaseDate": nodeFirmwareAnalysisReleaseDate,
       "nodeFirmwareAnalysisRevisionLevel": nodeFirmwareAnalysisRevisionLevel,
       "nodeFirmwareAnalysisTopology": nodeFirmwareAnalysisTopology,
       "nodeFirmwareAnalysisDeviceName": nodeFirmwareAnalysisDeviceName,
       "smFirmwareAnalysisTable": smFirmwareAnalysisTable,
       "smFirmwareAnalysisEntry": smFirmwareAnalysisEntry,
       "smFirmwareAnalysisIndex": smFirmwareAnalysisIndex,
       "smFirmwareAnalysisProductId": smFirmwareAnalysisProductId,
       "smFirmwareAnalysisProductName": smFirmwareAnalysisProductName,
       "smFirmwareAnalysisFirmwareType": smFirmwareAnalysisFirmwareType,
       "smFirmwareAnalysisFirmwareVersion": smFirmwareAnalysisFirmwareVersion,
       "smFirmwareAnalysisReleaseDate": smFirmwareAnalysisReleaseDate,
       "smFirmwareAnalysisTopology": smFirmwareAnalysisTopology,
       "componentInventoryReady": componentInventoryReady,
       "componentDriveTable": componentDriveTable,
       "componentDriveEntry": componentDriveEntry,
       "componentDriveTopologyPath": componentDriveTopologyPath,
       "componentDriveDescription": componentDriveDescription,
       "componentDriveTableCacheTimeout": componentDriveTableCacheTimeout,
       "licenseKeyInfo": licenseKeyInfo,
       "licenseKeyInfoTable": licenseKeyInfoTable,
       "licenseKeyInfoEntry": licenseKeyInfoEntry,
       "licenseKeyComponentIndex": licenseKeyComponentIndex,
       "licenseKeyIndex": licenseKeyIndex,
       "licenseKeyDescription": licenseKeyDescription,
       "licenseKeyTimestamp": licenseKeyTimestamp,
       "licenseKeyLicenseID": licenseKeyLicenseID,
       "licenseKeyOtherInfo": licenseKeyOtherInfo,
       "licenseKeyStatus": licenseKeyStatus,
       "chassisLicenseKeyTable": chassisLicenseKeyTable,
       "chassisLicenseKeyEntry": chassisLicenseKeyEntry,
       "chassisLicenseKeyIndex": chassisLicenseKeyIndex,
       "chassisLicenseKeyFeature": chassisLicenseKeyFeature,
       "chassisLicenseKeyFeatureType": chassisLicenseKeyFeatureType,
       "chassisLicenseKeyDescription": chassisLicenseKeyDescription,
       "chassisLicenseKeySystem": chassisLicenseKeySystem,
       "chassisLicenseKeyLicenseID": chassisLicenseKeyLicenseID,
       "chassisLicenseKeyValidation": chassisLicenseKeyValidation,
       "chassisLicenseKeyStatus": chassisLicenseKeyStatus,
       "chassisLicenseKeyTimeLimit": chassisLicenseKeyTimeLimit,
       "chassisLicenseKeyUsageLimit": chassisLicenseKeyUsageLimit,
       "errorLogs": errorLogs,
       "eventLog": eventLog,
       "readEventLogTable": readEventLogTable,
       "readEventLogEntry": readEventLogEntry,
       "readEventLogIndex": readEventLogIndex,
       "readEventLogString": readEventLogString,
       "clearEventLog": clearEventLog,
       "monitorLogStateEvents": monitorLogStateEvents,
       "readEnhancedEventLogTable": readEnhancedEventLogTable,
       "readEnhancedEventLogEntry": readEnhancedEventLogEntry,
       "readEnhancedEventLogNumber": readEnhancedEventLogNumber,
       "readEnhancedEventLogAttribute": readEnhancedEventLogAttribute,
       "readEnhancedEventLogMessage": readEnhancedEventLogMessage,
       "readEnhancedEventLogSequenceNum": readEnhancedEventLogSequenceNum,
       "readAuditLogTable": readAuditLogTable,
       "readAuditLogEntry": readAuditLogEntry,
       "readAuditLogNumber": readAuditLogNumber,
       "readAuditLogAttribute": readAuditLogAttribute,
       "readAuditLogMessage": readAuditLogMessage,
       "readAuditLogSequenceNum": readAuditLogSequenceNum,
       "clearAuditLog": clearAuditLog,
       "readSystemLogTable": readSystemLogTable,
       "readSystemLogEntry": readSystemLogEntry,
       "readSystemLogNumber": readSystemLogNumber,
       "readSystemLogAttribute": readSystemLogAttribute,
       "readSystemLogMessage": readSystemLogMessage,
       "readSystemLogSequenceNum": readSystemLogSequenceNum,
       "clearSystemLog": clearSystemLog,
       "readEventLogAuxTable": readEventLogAuxTable,
       "readEventLogAuxEntry": readEventLogAuxEntry,
       "readEventLogAuxNumber": readEventLogAuxNumber,
       "readEventLogAuxSequenceNum": readEventLogAuxSequenceNum,
       "readEventLogAuxMessage": readEventLogAuxMessage,
       "configureSP": configureSP,
       "remoteAccessConfig": remoteAccessConfig,
       "generalRemoteCfg": generalRemoteCfg,
       "remoteAlertRetryDelay": remoteAlertRetryDelay,
       "remoteAlertRetryCount": remoteAlertRetryCount,
       "userAuthenticationMethod": userAuthenticationMethod,
       "maxSessionsPerLDAPUser": maxSessionsPerLDAPUser,
       "authenticationLoggingTimeout": authenticationLoggingTimeout,
       "trackingIP": trackingIP,
       "accountSecurityManagement": accountSecurityManagement,
       "accountSecurityLevel": accountSecurityLevel,
       "customSecuritySettings": customSecuritySettings,
       "passwordExpirationPeriod": passwordExpirationPeriod,
       "defaultAdminPasswordExpired": defaultAdminPasswordExpired,
       "minimumPasswordReuseCycle": minimumPasswordReuseCycle,
       "complexPasswordRules": complexPasswordRules,
       "minimumDiffCharsPassword": minimumDiffCharsPassword,
       "changePasswordFirstAccess": changePasswordFirstAccess,
       "inactivityAlertPeriod": inactivityAlertPeriod,
       "inactivityAlertDisablePeriod": inactivityAlertDisablePeriod,
       "lockoutPeriod": lockoutPeriod,
       "maxLoginFailures": maxLoginFailures,
       "passwordChangeInterval": passwordChangeInterval,
       "serialPortCfg": serialPortCfg,
       "portBaud": portBaud,
       "portParity": portParity,
       "portStopBits": portStopBits,
       "remoteAlertIds": remoteAlertIds,
       "remoteAlertIdsTable": remoteAlertIdsTable,
       "remoteAlertIdsEntry": remoteAlertIdsEntry,
       "remoteAlertIdEntryIndex": remoteAlertIdEntryIndex,
       "remoteAlertIdEntryStatus": remoteAlertIdEntryStatus,
       "remoteAlertIdEntryIpOrHostAddress": remoteAlertIdEntryIpOrHostAddress,
       "remoteAlertIdEntryTextDescription": remoteAlertIdEntryTextDescription,
       "remoteAlertIdEntryNotificationType": remoteAlertIdEntryNotificationType,
       "remoteAlertIdEmailAddr": remoteAlertIdEmailAddr,
       "remoteAlertIdEntrySelectiveAlert": remoteAlertIdEntrySelectiveAlert,
       "generateTestAlert": generateTestAlert,
       "remoteAccessIds": remoteAccessIds,
       "remoteAccessIdsTable": remoteAccessIdsTable,
       "remoteAccessIdsEntry": remoteAccessIdsEntry,
       "remoteAccessIdEntryIndex": remoteAccessIdEntryIndex,
       "remoteAccessIdEntryUserId": remoteAccessIdEntryUserId,
       "remoteAccessIdEntryPassword": remoteAccessIdEntryPassword,
       "remoteAccessIdEntryPermgroups": remoteAccessIdEntryPermgroups,
       "remoteAccessIdEntryLoggedIn": remoteAccessIdEntryLoggedIn,
       "remoteAccessIdEntryLastLogin": remoteAccessIdEntryLastLogin,
       "remoteAccessIdEntryPwdCompliant": remoteAccessIdEntryPwdCompliant,
       "remoteAccessIdEntryPwdExp": remoteAccessIdEntryPwdExp,
       "remoteAccessIdEntryDormant": remoteAccessIdEntryDormant,
       "remoteAccessIdEntryState": remoteAccessIdEntryState,
       "remoteAccessIdEntryAction": remoteAccessIdEntryAction,
       "remoteAccessIdEntrySessionCount": remoteAccessIdEntrySessionCount,
       "remoteAccessIdEntryMaxSessions": remoteAccessIdEntryMaxSessions,
       "remoteAccessIdEntryStatus": remoteAccessIdEntryStatus,
       "remoteAccessIdEntryIPMIProvisioned": remoteAccessIdEntryIPMIProvisioned,
       "remoteAccessIdEntrySNMPv3Provisioned": remoteAccessIdEntrySNMPv3Provisioned,
       "remoteAccessRBSroleTable": remoteAccessRBSroleTable,
       "remoteAccessRBSroleEntry": remoteAccessRBSroleEntry,
       "roleIndex": roleIndex,
       "roleId": roleId,
       "rbsSupervisor": rbsSupervisor,
       "rbsOperator": rbsOperator,
       "rbsChassisOperator": rbsChassisOperator,
       "rbsChassisAccountManagement": rbsChassisAccountManagement,
       "rbsChassisLogManagement": rbsChassisLogManagement,
       "rbsChassisConfiguration": rbsChassisConfiguration,
       "rbsChassisAdministration": rbsChassisAdministration,
       "rbsBladeOperator": rbsBladeOperator,
       "rbsBladeRemotePresence": rbsBladeRemotePresence,
       "rbsBladeConfiguration": rbsBladeConfiguration,
       "rbsBladeAdministration": rbsBladeAdministration,
       "rbsSwitchModuleOperator": rbsSwitchModuleOperator,
       "rbsSwitchModuleConfiguration": rbsSwitchModuleConfiguration,
       "rbsSwitchModuleAdministration": rbsSwitchModuleAdministration,
       "rbsEntryStatus": rbsEntryStatus,
       "remoteAccessRBSscopeTable": remoteAccessRBSscopeTable,
       "remoteAccessRBSscopeEntry": remoteAccessRBSscopeEntry,
       "scopeIndex": scopeIndex,
       "scopeId": scopeId,
       "rbsChassis": rbsChassis,
       "rbsBlade1": rbsBlade1,
       "rbsBlade2": rbsBlade2,
       "rbsBlade3": rbsBlade3,
       "rbsBlade4": rbsBlade4,
       "rbsBlade5": rbsBlade5,
       "rbsBlade6": rbsBlade6,
       "rbsBlade7": rbsBlade7,
       "rbsBlade8": rbsBlade8,
       "rbsBlade9": rbsBlade9,
       "rbsBlade10": rbsBlade10,
       "rbsBlade11": rbsBlade11,
       "rbsBlade12": rbsBlade12,
       "rbsBlade13": rbsBlade13,
       "rbsBlade14": rbsBlade14,
       "rbsSwitch1": rbsSwitch1,
       "rbsSwitch2": rbsSwitch2,
       "rbsSwitch3": rbsSwitch3,
       "rbsSwitch4": rbsSwitch4,
       "rbsSwitch5": rbsSwitch5,
       "rbsSwitch6": rbsSwitch6,
       "rbsSwitch7": rbsSwitch7,
       "rbsSwitch8": rbsSwitch8,
       "rbsSwitch9": rbsSwitch9,
       "rbsSwitch10": rbsSwitch10,
       "cmmCentralManagerIPMISNMPv3": cmmCentralManagerIPMISNMPv3,
       "userInterfaces": userInterfaces,
       "cli": cli,
       "snmp": snmp,
       "tcm": tcm,
       "web": web,
       "stcm": stcm,
       "mmSshClientAuth": mmSshClientAuth,
       "mmSshClientAuthPubKeyTable": mmSshClientAuthPubKeyTable,
       "mmSshClientAuthPubKeyEntry": mmSshClientAuthPubKeyEntry,
       "mmSshClientAuthRemoteAccessIdIndex": mmSshClientAuthRemoteAccessIdIndex,
       "mmSshClientAuthPubKeyIndex": mmSshClientAuthPubKeyIndex,
       "mmSshClientAuthPubKeyType": mmSshClientAuthPubKeyType,
       "mmSshClientAuthPubKeySize": mmSshClientAuthPubKeySize,
       "mmSshClientAuthPubKeyFingerprint": mmSshClientAuthPubKeyFingerprint,
       "mmSshClientAuthPubKeyAcceptFrom": mmSshClientAuthPubKeyAcceptFrom,
       "mmSshClientAuthPubKeyComment": mmSshClientAuthPubKeyComment,
       "mmSshClientAuthPubKeyAction": mmSshClientAuthPubKeyAction,
       "mmSshClientAuthPubKeyEntryStatus": mmSshClientAuthPubKeyEntryStatus,
       "mmSshClientAuthPubKeyUserId": mmSshClientAuthPubKeyUserId,
       "mmSshClientAuthPubKeyUnused": mmSshClientAuthPubKeyUnused,
       "mmSshClientAuthPubKeyTftpServer": mmSshClientAuthPubKeyTftpServer,
       "mmSshClientAuthPubKeyFileName": mmSshClientAuthPubKeyFileName,
       "mmSshClientAuthPubKeyFileFormat": mmSshClientAuthPubKeyFileFormat,
       "groupProfiles": groupProfiles,
       "groupIdsTable": groupIdsTable,
       "groupIdsEntry": groupIdsEntry,
       "groupIndex": groupIndex,
       "groupId": groupId,
       "groupRole": groupRole,
       "groupEntryStatus": groupEntryStatus,
       "groupRBSroleTable": groupRBSroleTable,
       "groupRBSroleEntry": groupRBSroleEntry,
       "groupRBSroleIndex": groupRBSroleIndex,
       "groupRBSroleId": groupRBSroleId,
       "groupRBSSupervisor": groupRBSSupervisor,
       "groupRBSOperator": groupRBSOperator,
       "groupRBSChassisOperator": groupRBSChassisOperator,
       "groupRBSChassisAccountManagement": groupRBSChassisAccountManagement,
       "groupRBSChassisLogManagement": groupRBSChassisLogManagement,
       "groupRBSChassisConfiguration": groupRBSChassisConfiguration,
       "groupRBSChassisAdministration": groupRBSChassisAdministration,
       "groupRBSBladeOperator": groupRBSBladeOperator,
       "groupRBSBladeRemotePresence": groupRBSBladeRemotePresence,
       "groupRBSBladeConfiguration": groupRBSBladeConfiguration,
       "groupRBSBladeAdministration": groupRBSBladeAdministration,
       "groupRBSSwitchModuleOperator": groupRBSSwitchModuleOperator,
       "groupRBSSwitchModuleConfiguration": groupRBSSwitchModuleConfiguration,
       "groupRBSSwitchModuleAdministration": groupRBSSwitchModuleAdministration,
       "groupRBSscopeTable": groupRBSscopeTable,
       "groupRBSscopeEntry": groupRBSscopeEntry,
       "groupRBSscopeIndex": groupRBSscopeIndex,
       "groupRBSscopeId": groupRBSscopeId,
       "groupRBSChassis": groupRBSChassis,
       "groupRBSBlade1": groupRBSBlade1,
       "groupRBSBlade2": groupRBSBlade2,
       "groupRBSBlade3": groupRBSBlade3,
       "groupRBSBlade4": groupRBSBlade4,
       "groupRBSBlade5": groupRBSBlade5,
       "groupRBSBlade6": groupRBSBlade6,
       "groupRBSBlade7": groupRBSBlade7,
       "groupRBSBlade8": groupRBSBlade8,
       "groupRBSBlade9": groupRBSBlade9,
       "groupRBSBlade10": groupRBSBlade10,
       "groupRBSBlade11": groupRBSBlade11,
       "groupRBSBlade12": groupRBSBlade12,
       "groupRBSBlade13": groupRBSBlade13,
       "groupRBSBlade14": groupRBSBlade14,
       "groupRBSSwitch1": groupRBSSwitch1,
       "groupRBSSwitch2": groupRBSSwitch2,
       "groupRBSSwitch3": groupRBSSwitch3,
       "groupRBSSwitch4": groupRBSSwitch4,
       "groupRBSSwitch5": groupRBSSwitch5,
       "groupRBSSwitch6": groupRBSSwitch6,
       "groupRBSSwitch7": groupRBSSwitch7,
       "groupRBSSwitch8": groupRBSSwitch8,
       "groupRBSSwitch9": groupRBSSwitch9,
       "groupRBSSwitch10": groupRBSSwitch10,
       "remoteAlerts": remoteAlerts,
       "remoteAlertsCrit": remoteAlertsCrit,
       "critPower": critPower,
       "critBlade": critBlade,
       "critIO": critIO,
       "critStorage": critStorage,
       "critChassis": critChassis,
       "critFan": critFan,
       "remoteAlertsNonCrit": remoteAlertsNonCrit,
       "warnLogFull": warnLogFull,
       "warnBlade": warnBlade,
       "warnIO": warnIO,
       "warnStorage": warnStorage,
       "warnPower": warnPower,
       "warnChassis": warnChassis,
       "warnFan": warnFan,
       "remoteAlertsSystem": remoteAlertsSystem,
       "systemInventory": systemInventory,
       "systemLog75PctFull": systemLog75PctFull,
       "networkChangeNotification": networkChangeNotification,
       "systemRemoteLogin": systemRemoteLogin,
       "systemBlade": systemBlade,
       "systemIO": systemIO,
       "systemStorage": systemStorage,
       "systemPower": systemPower,
       "systemChassis": systemChassis,
       "systemFan": systemFan,
       "systemPWRDO": systemPWRDO,
       "securitySettings": securitySettings,
       "trespassWarning": trespassWarning,
       "trespassWarningDefault": trespassWarningDefault,
       "trespassMessage": trespassMessage,
       "chassisSecuritySettings": chassisSecuritySettings,
       "securityPolicySetting": securityPolicySetting,
       "securityPolicyState": securityPolicyState,
       "securityPolicyStatusTable": securityPolicyStatusTable,
       "securityPolicyStatusEntry": securityPolicyStatusEntry,
       "securityPolicyStatusIndex": securityPolicyStatusIndex,
       "securityPolicyStatusComponentType": securityPolicyStatusComponentType,
       "securityPolicyStatusBayId": securityPolicyStatusBayId,
       "securityPolicyStatusSummary": securityPolicyStatusSummary,
       "securityPolicyStatusDetails": securityPolicyStatusDetails,
       "cryptography": cryptography,
       "cryptographySummary": cryptographySummary,
       "cryptographyMode": cryptographyMode,
       "cryptographyModeDetailsTable": cryptographyModeDetailsTable,
       "cryptographyModeDetailsEntry": cryptographyModeDetailsEntry,
       "cryptographyModeDetailsIndex": cryptographyModeDetailsIndex,
       "cryptographyModeDetailsType": cryptographyModeDetailsType,
       "cryptographyModeDetailsDescription": cryptographyModeDetailsDescription,
       "cryptographyModeComponentTable": cryptographyModeComponentTable,
       "cryptographyModeComponentEntry": cryptographyModeComponentEntry,
       "cryptographyModeComponentIndex": cryptographyModeComponentIndex,
       "cryptographyModeComponentId": cryptographyModeComponentId,
       "cryptographicCipher": cryptographicCipher,
       "cryptographyCipherComponentTable": cryptographyCipherComponentTable,
       "cryptographyCipherComponentEntry": cryptographyCipherComponentEntry,
       "cryptographyCipherComponentIndex": cryptographyCipherComponentIndex,
       "cryptographyCipherComponentId": cryptographyCipherComponentId,
       "cipherStrength": cipherStrength,
       "spClock": spClock,
       "spClockDateAndTimeSetting": spClockDateAndTimeSetting,
       "spClockTimezoneSetting": spClockTimezoneSetting,
       "spClockTimezoneTable": spClockTimezoneTable,
       "spClockTimezoneEntry": spClockTimezoneEntry,
       "spClockTimezoneIndex": spClockTimezoneIndex,
       "spClockTimezoneId": spClockTimezoneId,
       "spClockTimezoneCaption": spClockTimezoneCaption,
       "spClockTimezoneDescription": spClockTimezoneDescription,
       "spClockTimezoneName": spClockTimezoneName,
       "spClockTimezoneStandardName": spClockTimezoneStandardName,
       "spClockTimezoneStandardCaption": spClockTimezoneStandardCaption,
       "spClockTimezoneDaylightName": spClockTimezoneDaylightName,
       "spClockTimezoneDaylightCaption": spClockTimezoneDaylightCaption,
       "spClockTimezoneCmmOffset": spClockTimezoneCmmOffset,
       "spClockTimezoneStandardOffsetMinutes": spClockTimezoneStandardOffsetMinutes,
       "spClockTimezoneStandardDaylightOffsetMinutes": spClockTimezoneStandardDaylightOffsetMinutes,
       "spClockTimezoneDaylightDay": spClockTimezoneDaylightDay,
       "spClockTimezoneDaylightDayOfWeek": spClockTimezoneDaylightDayOfWeek,
       "spClockTimezoneDaylightMonth": spClockTimezoneDaylightMonth,
       "spClockTimezoneDaylightStandardDay": spClockTimezoneDaylightStandardDay,
       "spClockTimezoneDaylightStandardDayOfWeek": spClockTimezoneDaylightStandardDayOfWeek,
       "spClockTimezoneDaylightStandardMonth": spClockTimezoneDaylightStandardMonth,
       "spClockTimezoneDaylightIntervalInMinutes": spClockTimezoneDaylightIntervalInMinutes,
       "spClockTimezoneDaylightStandardInMinutes": spClockTimezoneDaylightStandardInMinutes,
       "spClockTimezoneDaylightStart": spClockTimezoneDaylightStart,
       "spClockTimezoneDaylightEnd": spClockTimezoneDaylightEnd,
       "spIdentification": spIdentification,
       "spTxtId": spTxtId,
       "networkConfiguration": networkConfiguration,
       "networkInterfaces": networkInterfaces,
       "extEthernetInterface": extEthernetInterface,
       "extEthernetInterfaceType": extEthernetInterfaceType,
       "extEthernetInterfaceHostName": extEthernetInterfaceHostName,
       "extEthernetInterfaceIPAddress": extEthernetInterfaceIPAddress,
       "extEthernetInterfaceDataRate": extEthernetInterfaceDataRate,
       "extEthernetInterfaceDuplexSetting": extEthernetInterfaceDuplexSetting,
       "extEthernetInterfaceLAA": extEthernetInterfaceLAA,
       "extEthernetInterfaceDhcpEnabled": extEthernetInterfaceDhcpEnabled,
       "extEthernetInterfaceGatewayIPAddress": extEthernetInterfaceGatewayIPAddress,
       "extEthernetInterfaceBIA": extEthernetInterfaceBIA,
       "extEthernetInterfaceMTU": extEthernetInterfaceMTU,
       "extEthernetInterfaceSubnetMask": extEthernetInterfaceSubnetMask,
       "dhcpEthernetInterface": dhcpEthernetInterface,
       "dhcpHostName": dhcpHostName,
       "dhcpIPAddress": dhcpIPAddress,
       "dhcpGatewayIPAddress": dhcpGatewayIPAddress,
       "dhcpSubnetMask": dhcpSubnetMask,
       "dhcpDomainName": dhcpDomainName,
       "dhcpDHCPServer": dhcpDHCPServer,
       "dhcpPrimaryDNSServer": dhcpPrimaryDNSServer,
       "dhcpSecondaryDNSServer": dhcpSecondaryDNSServer,
       "dhcpTertiaryDNSServer": dhcpTertiaryDNSServer,
       "extEthernetInterfaceFloatingIPAddress": extEthernetInterfaceFloatingIPAddress,
       "standbyExtEthernetInterface": standbyExtEthernetInterface,
       "standbyExtEthernetInterfaceType": standbyExtEthernetInterfaceType,
       "standbyExtEthernetInterfaceHostName": standbyExtEthernetInterfaceHostName,
       "standbyExtEthernetInterfaceIPAddress": standbyExtEthernetInterfaceIPAddress,
       "standbyExtEthernetInterfaceDataRate": standbyExtEthernetInterfaceDataRate,
       "standbyExtEthernetInterfaceDuplexSetting": standbyExtEthernetInterfaceDuplexSetting,
       "standbyExtEthernetInterfaceLAA": standbyExtEthernetInterfaceLAA,
       "standbyExtEthernetInterfaceDhcpEnabled": standbyExtEthernetInterfaceDhcpEnabled,
       "standbyExtEthernetInterfaceGatewayIPAddress": standbyExtEthernetInterfaceGatewayIPAddress,
       "standbyExtEthernetInterfaceBIA": standbyExtEthernetInterfaceBIA,
       "standbyExtEthernetInterfaceMTU": standbyExtEthernetInterfaceMTU,
       "standbyExtEthernetInterfaceSubnetMask": standbyExtEthernetInterfaceSubnetMask,
       "advancedFailover": advancedFailover,
       "standbyDhcpEthernetInterface": standbyDhcpEthernetInterface,
       "standbyDhcpHostName": standbyDhcpHostName,
       "standbyDhcpIPAddress": standbyDhcpIPAddress,
       "standbyDhcpGatewayIPAddress": standbyDhcpGatewayIPAddress,
       "standbyDhcpSubnetMask": standbyDhcpSubnetMask,
       "standbyDhcpDomainName": standbyDhcpDomainName,
       "standbyDhcpDHCPServer": standbyDhcpDHCPServer,
       "standbyDhcpPrimaryDNSServer": standbyDhcpPrimaryDNSServer,
       "standbyDhcpSecondaryDNSServer": standbyDhcpSecondaryDNSServer,
       "standbyDhcpTertiaryDNSServer": standbyDhcpTertiaryDNSServer,
       "extEthernetInterfaceIPv6": extEthernetInterfaceIPv6,
       "extEthernetInterfaceIPv6Type": extEthernetInterfaceIPv6Type,
       "extEthernetInterfaceIPv6Enabled": extEthernetInterfaceIPv6Enabled,
       "extEthernetInterfaceIPv6Config": extEthernetInterfaceIPv6Config,
       "extEthernetInterfaceIPv6LocalAddress": extEthernetInterfaceIPv6LocalAddress,
       "extEthernetInterfaceIPv6LinkLocalAddress": extEthernetInterfaceIPv6LinkLocalAddress,
       "extEthernetInterfaceIPv6StaticIPConfig": extEthernetInterfaceIPv6StaticIPConfig,
       "extEthernetInterfaceIPv6StaticIPConfigEnabled": extEthernetInterfaceIPv6StaticIPConfigEnabled,
       "extEthernetInterfaceIPv6StaticIPAddress": extEthernetInterfaceIPv6StaticIPAddress,
       "extEthernetInterfaceIPv6StaticIPAddressPrefixLen": extEthernetInterfaceIPv6StaticIPAddressPrefixLen,
       "extEthernetInterfaceIPv6StaticIPDefaultRoute": extEthernetInterfaceIPv6StaticIPDefaultRoute,
       "extEthernetInterfaceIPv6LinkFloatingAddress": extEthernetInterfaceIPv6LinkFloatingAddress,
       "extEthernetInterfaceIPv6AutoIPConfig": extEthernetInterfaceIPv6AutoIPConfig,
       "extEthernetInterfaceIPv6AutoIPConfigEnabled": extEthernetInterfaceIPv6AutoIPConfigEnabled,
       "extEthernetInterfaceDHCPv6Config": extEthernetInterfaceDHCPv6Config,
       "extEthernetInterfaceDHCPv6Enabled": extEthernetInterfaceDHCPv6Enabled,
       "extEthernetInterfaceDHCPv6IPAddress": extEthernetInterfaceDHCPv6IPAddress,
       "extEthernetInterfaceDHCPv6DomainName": extEthernetInterfaceDHCPv6DomainName,
       "extEthernetInterfaceDHCPv6PrimaryDNSServer": extEthernetInterfaceDHCPv6PrimaryDNSServer,
       "extEthernetInterfaceDHCPv6SecondaryDNSServer": extEthernetInterfaceDHCPv6SecondaryDNSServer,
       "extEthernetInterfaceDHCPv6TertiaryDNSServer": extEthernetInterfaceDHCPv6TertiaryDNSServer,
       "extEthernetInterfaceDHCPv6Server": extEthernetInterfaceDHCPv6Server,
       "extEthernetInterfaceIPv6StatelessAutoConfig": extEthernetInterfaceIPv6StatelessAutoConfig,
       "extEthernetInterfaceIPv6StatelessAutoConfigEnabled": extEthernetInterfaceIPv6StatelessAutoConfigEnabled,
       "extEthernetInterfaceStatelessAutoConfigAddressesTable": extEthernetInterfaceStatelessAutoConfigAddressesTable,
       "extEthernetInterfaceStatelessAutoConfigAddressesEntry": extEthernetInterfaceStatelessAutoConfigAddressesEntry,
       "extEthernetInterfaceStatelessAutoConfigAddressesIndex": extEthernetInterfaceStatelessAutoConfigAddressesIndex,
       "extEthernetInterfaceStatelessAutoConfigAddresses": extEthernetInterfaceStatelessAutoConfigAddresses,
       "extEthernetInterfaceStatelessAutoConfigAddressesPrefixLen": extEthernetInterfaceStatelessAutoConfigAddressesPrefixLen,
       "standbyExtEthernetInterfaceIPv6": standbyExtEthernetInterfaceIPv6,
       "standbyEthernetInterfaceIPv6LocalAddress": standbyEthernetInterfaceIPv6LocalAddress,
       "standbyEthernetInterfaceIPv6LinkLocalAddress": standbyEthernetInterfaceIPv6LinkLocalAddress,
       "standbyEthernetInterfaceIPv6StaticIPConfig": standbyEthernetInterfaceIPv6StaticIPConfig,
       "standbyEthernetInterfaceIPv6StaticIPConfigEnabled": standbyEthernetInterfaceIPv6StaticIPConfigEnabled,
       "standbyEthernetInterfaceIPv6StaticIPAddress": standbyEthernetInterfaceIPv6StaticIPAddress,
       "standbyEthernetInterfaceIPv6StaticIPAddressPrefixLen": standbyEthernetInterfaceIPv6StaticIPAddressPrefixLen,
       "standbyEthernetInterfaceIPv6StaticIPDefaultRoute": standbyEthernetInterfaceIPv6StaticIPDefaultRoute,
       "standbyEthernetInterfaceDHCPv6Config": standbyEthernetInterfaceDHCPv6Config,
       "standbyEthernetInterfaceDHCPv6Enabled": standbyEthernetInterfaceDHCPv6Enabled,
       "standbyEthernetInterfaceDHCPv6IPAddress": standbyEthernetInterfaceDHCPv6IPAddress,
       "standbyEthernetInterfaceDHCPv6DomainName": standbyEthernetInterfaceDHCPv6DomainName,
       "standbyEthernetInterfaceStatelessAutoConfigAddressesTable": standbyEthernetInterfaceStatelessAutoConfigAddressesTable,
       "standbyEthernetInterfaceStatelessAutoConfigAddressesEntry": standbyEthernetInterfaceStatelessAutoConfigAddressesEntry,
       "standbyEthernetInterfaceStatelessAutoConfigAddressesIndex": standbyEthernetInterfaceStatelessAutoConfigAddressesIndex,
       "standbyEthernetInterfaceStatelessAutoConfigAddresses": standbyEthernetInterfaceStatelessAutoConfigAddresses,
       "standbyEthernetInterfaceStatelessAutoConfigAddressesPrefixLen": standbyEthernetInterfaceStatelessAutoConfigAddressesPrefixLen,
       "ddnsStatus": ddnsStatus,
       "hostName": hostName,
       "standbyHostName": standbyHostName,
       "domainName": domainName,
       "standbyDomainName": standbyDomainName,
       "activateNetworkUpdates": activateNetworkUpdates,
       "vlanConfigure": vlanConfigure,
       "vlanGlobalState": vlanGlobalState,
       "vlanCommitTimeout": vlanCommitTimeout,
       "vlanCommitState": vlanCommitState,
       "vlanCMMTable": vlanCMMTable,
       "vlanCMMEntry": vlanCMMEntry,
       "vlanCMMIndex": vlanCMMIndex,
       "vlanCMMVlanId": vlanCMMVlanId,
       "vlanCMMName": vlanCMMName,
       "vlanCMMEntryStatus": vlanCMMEntryStatus,
       "vlanCMMState": vlanCMMState,
       "vlanCMMSOLAccess": vlanCMMSOLAccess,
       "vlanCMMTagging": vlanCMMTagging,
       "vlanCMMIPv4Address": vlanCMMIPv4Address,
       "vlanCMMIPv4Gateway": vlanCMMIPv4Gateway,
       "vlanCMMIPv4Mask": vlanCMMIPv4Mask,
       "vlanCMMIPv4SubnetRoute1": vlanCMMIPv4SubnetRoute1,
       "vlanCMMIPv4SubnetRouteMask1": vlanCMMIPv4SubnetRouteMask1,
       "vlanCMMIPv4SubnetRoute2": vlanCMMIPv4SubnetRoute2,
       "vlanCMMIPv4SubnetRouteMask2": vlanCMMIPv4SubnetRouteMask2,
       "vlanCMMIPv4SubnetRoute3": vlanCMMIPv4SubnetRoute3,
       "vlanCMMIPv4SubnetRouteMask3": vlanCMMIPv4SubnetRouteMask3,
       "vlanCMMIPv6Address": vlanCMMIPv6Address,
       "vlanCMMIPv6AddressPrefixLen": vlanCMMIPv6AddressPrefixLen,
       "vlanCMMIPv6Gateway": vlanCMMIPv6Gateway,
       "vlanCMMIPv6SubnetRoute1": vlanCMMIPv6SubnetRoute1,
       "vlanCMMIPv6SubnetRoutePrefixLen1": vlanCMMIPv6SubnetRoutePrefixLen1,
       "vlanCMMIPv6SubnetRoute2": vlanCMMIPv6SubnetRoute2,
       "vlanCMMIPv6SubnetRoutePrefixLen2": vlanCMMIPv6SubnetRoutePrefixLen2,
       "vlanCMMIPv6SubnetRoute3": vlanCMMIPv6SubnetRoute3,
       "vlanCMMIPv6SubnetRoutePrefixLen3": vlanCMMIPv6SubnetRoutePrefixLen3,
       "vlanCMMTableCacheTimeout": vlanCMMTableCacheTimeout,
       "tcpProtocols": tcpProtocols,
       "snmpAgentConfig": snmpAgentConfig,
       "snmpSystemContact": snmpSystemContact,
       "snmpSystemLocation": snmpSystemLocation,
       "snmpSystemAgentTrapsDisable": snmpSystemAgentTrapsDisable,
       "snmpAgentCommunityConfig": snmpAgentCommunityConfig,
       "snmpCommunityTable": snmpCommunityTable,
       "snmpCommunityEntry": snmpCommunityEntry,
       "snmpCommunityEntryIndex": snmpCommunityEntryIndex,
       "snmpCommunityEntryCommunityName": snmpCommunityEntryCommunityName,
       "snmpCommunityEntryCommunityIpAddress1": snmpCommunityEntryCommunityIpAddress1,
       "snmpCommunityEntryCommunityIpAddress2": snmpCommunityEntryCommunityIpAddress2,
       "snmpCommunityEntryCommunityIpAddress3": snmpCommunityEntryCommunityIpAddress3,
       "snmpCommunityEntryCommunityViewType": snmpCommunityEntryCommunityViewType,
       "snmpv1SystemAgentEnable": snmpv1SystemAgentEnable,
       "snmpv3SystemAgentEnable": snmpv3SystemAgentEnable,
       "snmpAgentUserProfileConfig": snmpAgentUserProfileConfig,
       "snmpUserProfileTable": snmpUserProfileTable,
       "snmpUserProfileEntry": snmpUserProfileEntry,
       "snmpUserProfileEntryIndex": snmpUserProfileEntryIndex,
       "snmpUserProfileEntryContextName": snmpUserProfileEntryContextName,
       "snmpUserProfileEntryAuthProt": snmpUserProfileEntryAuthProt,
       "snmpUserProfileEntryPrivProt": snmpUserProfileEntryPrivProt,
       "snmpUserProfileEntryPrivPassword": snmpUserProfileEntryPrivPassword,
       "snmpUserProfileEntryViewType": snmpUserProfileEntryViewType,
       "snmpUserProfileEntryIpAddress": snmpUserProfileEntryIpAddress,
       "snmpUserProfileEntryUserId": snmpUserProfileEntryUserId,
       "dnsConfig": dnsConfig,
       "dnsEnabled": dnsEnabled,
       "dnsServerIPAddress1": dnsServerIPAddress1,
       "dnsServerIPAddress2": dnsServerIPAddress2,
       "dnsServerIPAddress3": dnsServerIPAddress3,
       "dnsServerIPv6Address1": dnsServerIPv6Address1,
       "dnsServerIPv6Address2": dnsServerIPv6Address2,
       "dnsServerIPv6Address3": dnsServerIPv6Address3,
       "dnsPriority": dnsPriority,
       "smtpConfig": smtpConfig,
       "smtpServerNameOrIPAddress": smtpServerNameOrIPAddress,
       "attachmentsToEmailAlerts": attachmentsToEmailAlerts,
       "smtpEmailDomain": smtpEmailDomain,
       "tcpApplicationConfig": tcpApplicationConfig,
       "telnetInactivityTimeout": telnetInactivityTimeout,
       "commandModeInactivityTimeout": commandModeInactivityTimeout,
       "secureCommandModeEnable": secureCommandModeEnable,
       "commandModeEnable": commandModeEnable,
       "slpAddrType": slpAddrType,
       "slpEnable": slpEnable,
       "telnetEnable": telnetEnable,
       "sshEnable": sshEnable,
       "sslServerEnable": sslServerEnable,
       "sslClientEnable": sslClientEnable,
       "ftpEnable": ftpEnable,
       "sftpEnable": sftpEnable,
       "tftpEnable": tftpEnable,
       "ftpTimeout": ftpTimeout,
       "mmSshServerConfig": mmSshServerConfig,
       "mmSshServerHostKeyTable": mmSshServerHostKeyTable,
       "mmSshServerHostKeyEntry": mmSshServerHostKeyEntry,
       "mmSshServerHostKeyIndex": mmSshServerHostKeyIndex,
       "mmSshServerHostKeyType": mmSshServerHostKeyType,
       "mmSshServerHostKeySize": mmSshServerHostKeySize,
       "mmSshServerHostKeyFingerprint": mmSshServerHostKeyFingerprint,
       "mmSshServerHostKeyGenerate": mmSshServerHostKeyGenerate,
       "mmSshServerHostKeyGenerateProgress": mmSshServerHostKeyGenerateProgress,
       "cimEnable": cimEnable,
       "tcpPortAssignmentCfg": tcpPortAssignmentCfg,
       "tcpPortsRestoreDefault": tcpPortsRestoreDefault,
       "httpPortAssignment": httpPortAssignment,
       "httpsPortAssignment": httpsPortAssignment,
       "telnetPortAssignment": telnetPortAssignment,
       "sshPortAssignment": sshPortAssignment,
       "snmpAgentPortAssignment": snmpAgentPortAssignment,
       "snmpTrapsPortAssignment": snmpTrapsPortAssignment,
       "commandModePortAssignment": commandModePortAssignment,
       "secureCommandModePortAssignment": secureCommandModePortAssignment,
       "ftpPortAssignment": ftpPortAssignment,
       "ftpDataPortAssignment": ftpDataPortAssignment,
       "tftpPortAssignment": tftpPortAssignment,
       "slpPortAssignment": slpPortAssignment,
       "cimPortAssignment": cimPortAssignment,
       "ldapClientCfg": ldapClientCfg,
       "ldapServer1NameOrIPAddress": ldapServer1NameOrIPAddress,
       "ldapServer1PortNumber": ldapServer1PortNumber,
       "ldapServer2NameOrIPAddress": ldapServer2NameOrIPAddress,
       "ldapServer2PortNumber": ldapServer2PortNumber,
       "ldapServer3NameOrIPAddress": ldapServer3NameOrIPAddress,
       "ldapServer3PortNumber": ldapServer3PortNumber,
       "ldapRootDN": ldapRootDN,
       "ldapGroupFilter": ldapGroupFilter,
       "ldapBindingMethod": ldapBindingMethod,
       "ldapClientAuthenticationDN": ldapClientAuthenticationDN,
       "ldapClientAuthenticationPassword": ldapClientAuthenticationPassword,
       "ldapUIDsearchAttribute": ldapUIDsearchAttribute,
       "ldapGroupSearchAttribute": ldapGroupSearchAttribute,
       "ldapLoginPermissionAttribute": ldapLoginPermissionAttribute,
       "ldapUseDNSOrPreConfiguredServers": ldapUseDNSOrPreConfiguredServers,
       "ldapRBSModelCfg": ldapRBSModelCfg,
       "ldapTargetName": ldapTargetName,
       "ldapAuthCfg": ldapAuthCfg,
       "ldapForestName": ldapForestName,
       "ldapDomainName": ldapDomainName,
       "ldapServer4NameOrIPAddress": ldapServer4NameOrIPAddress,
       "ldapServer4PortNumber": ldapServer4PortNumber,
       "uplinkCheckConfig": uplinkCheckConfig,
       "uplinkCheckEnabled": uplinkCheckEnabled,
       "uplinkCheckDelay": uplinkCheckDelay,
       "logicalUplinkDestination": logicalUplinkDestination,
       "logicalUplinkCheckEnabled": logicalUplinkCheckEnabled,
       "logicalUplinkCheckDelay": logicalUplinkCheckDelay,
       "physicalUplinkCheckDelayInSecs": physicalUplinkCheckDelayInSecs,
       "logicalUplinkCheckDelayInSecs": logicalUplinkCheckDelayInSecs,
       "logicalUplinkIPv6Destination": logicalUplinkIPv6Destination,
       "logicalUplinkFailoverPolicy": logicalUplinkFailoverPolicy,
       "ntpConfig": ntpConfig,
       "ntpEnable": ntpEnable,
       "ntpIpAddressHostname": ntpIpAddressHostname,
       "ntpUpdateFrequency": ntpUpdateFrequency,
       "ntpLastUpdate": ntpLastUpdate,
       "ntpUpdateClock": ntpUpdateClock,
       "ntpAuthEntry": ntpAuthEntry,
       "ntpAuthEnable": ntpAuthEnable,
       "syslogConfig": syslogConfig,
       "syslogSevFilterLevel": syslogSevFilterLevel,
       "syslogCollectorConfig": syslogCollectorConfig,
       "syslogCollectorTable": syslogCollectorTable,
       "syslogCollectorEntry": syslogCollectorEntry,
       "syslogCollectorIndex": syslogCollectorIndex,
       "syslogCollectorHostnameOrIpAddress": syslogCollectorHostnameOrIpAddress,
       "syslogCollectorPort": syslogCollectorPort,
       "syslogCollectorEnable": syslogCollectorEnable,
       "syslogTestPacket": syslogTestPacket,
       "solConfiguration": solConfiguration,
       "solGlobalConfig": solGlobalConfig,
       "solEnable": solEnable,
       "solAccumulateTimeout": solAccumulateTimeout,
       "solCharSendThreshold": solCharSendThreshold,
       "solRetry": solRetry,
       "solRetryInterval": solRetryInterval,
       "solExitToCliKeySeq": solExitToCliKeySeq,
       "solResetBladeKeySeq": solResetBladeKeySeq,
       "solBladeConfig": solBladeConfig,
       "solBladeTable": solBladeTable,
       "solBladeEntry": solBladeEntry,
       "solBladeIndex": solBladeIndex,
       "solBladeName": solBladeName,
       "solBladeEnable": solBladeEnable,
       "solBladeIpAddr": solBladeIpAddr,
       "solBladeSessionStatus": solBladeSessionStatus,
       "solBladeCapability": solBladeCapability,
       "solBladeIpAddr6": solBladeIpAddr6,
       "solBladeRetryInterval": solBladeRetryInterval,
       "solBladeRetryCount": solBladeRetryCount,
       "solBladeBytesSent": solBladeBytesSent,
       "solBladeBytesReceived": solBladeBytesReceived,
       "solBladeDestinationMAC": solBladeDestinationMAC,
       "solBladeConsoleUserId": solBladeConsoleUserId,
       "solBladeConsoleLoginFrom": solBladeConsoleLoginFrom,
       "solBladeConsoleLoginStart": solBladeConsoleLoginStart,
       "solBladeConsoleLoginEnd": solBladeConsoleLoginEnd,
       "chassisInternalNetwork": chassisInternalNetwork,
       "cinsSupported": cinsSupported,
       "cinGlobalEnable": cinGlobalEnable,
       "cinTable": cinTable,
       "cinEntry": cinEntry,
       "cinIndex": cinIndex,
       "cinDefExists": cinDefExists,
       "cinDelete": cinDelete,
       "cinEnable": cinEnable,
       "cinId": cinId,
       "cinIpAddress": cinIpAddress,
       "cinIpv6Address": cinIpv6Address,
       "cinStatus": cinStatus,
       "cinStatusTable": cinStatusTable,
       "cinStatusEntry": cinStatusEntry,
       "cinStatusIndex": cinStatusIndex,
       "cinStatusString": cinStatusString,
       "restartReset": restartReset,
       "restartSPImmediately": restartSPImmediately,
       "restartStandbyMM": restartStandbyMM,
       "switchOverRedundantMM": switchOverRedundantMM,
       "resetSPConfigAndRestart": resetSPConfigAndRestart,
       "resetSPConfigAndRestartSaveLogs": resetSPConfigAndRestartSaveLogs,
       "components": components,
       "processorBlade": processorBlade,
       "bladePolicyControl": bladePolicyControl,
       "bladePolicyControlTable": bladePolicyControlTable,
       "bladePolicyControlEntry": bladePolicyControlEntry,
       "policyControlIndex": policyControlIndex,
       "policyControlBladeId": policyControlBladeId,
       "policyControlBladeExists": policyControlBladeExists,
       "policyControlBladePowerState": policyControlBladePowerState,
       "policyControlBladeHealthState": policyControlBladeHealthState,
       "policyControlBladeName": policyControlBladeName,
       "policyLocalPowerControlEnable": policyLocalPowerControlEnable,
       "policyWakeOnLanControlEnable": policyWakeOnLanControlEnable,
       "bladePolicy": bladePolicy,
       "bladePolicyLocalPowerControlEnable": bladePolicyLocalPowerControlEnable,
       "bladePolicyWakeOnLanControlEnable": bladePolicyWakeOnLanControlEnable,
       "bladeMonitors": bladeMonitors,
       "bladeSystemStatusTable": bladeSystemStatusTable,
       "bladeSystemStatusEntry": bladeSystemStatusEntry,
       "bladeStatusIndex": bladeStatusIndex,
       "bladeId": bladeId,
       "bladeExists": bladeExists,
       "bladePowerState": bladePowerState,
       "bladeHealthState": bladeHealthState,
       "bladeName": bladeName,
       "bladeRemotePowerEnable": bladeRemotePowerEnable,
       "bladeConnectionType": bladeConnectionType,
       "bladeRemoteWakeOnLanEnable": bladeRemoteWakeOnLanEnable,
       "bladeServerExpansion": bladeServerExpansion,
       "bladeWidth": bladeWidth,
       "bladeServerExpansion2": bladeServerExpansion2,
       "bladeConnectionType2": bladeConnectionType2,
       "bladeConnectionType3": bladeConnectionType3,
       "bladeConnectionType4": bladeConnectionType4,
       "bladeConnectionType5": bladeConnectionType5,
       "bladeHighSpeedConnectionType": bladeHighSpeedConnectionType,
       "bladeIOCompatibility": bladeIOCompatibility,
       "bladeInventoryReady": bladeInventoryReady,
       "bladeHealthSummaryTable": bladeHealthSummaryTable,
       "bladeHealthSummaryEntry": bladeHealthSummaryEntry,
       "bladeHealthSummaryIndex": bladeHealthSummaryIndex,
       "bladeHealthSummaryBladeId": bladeHealthSummaryBladeId,
       "bladeHealthSummarySeverity": bladeHealthSummarySeverity,
       "bladeHealthSummaryDescription": bladeHealthSummaryDescription,
       "bladeHealthSummaryDateTime": bladeHealthSummaryDateTime,
       "bladeHealthSummaryEventID": bladeHealthSummaryEventID,
       "bladeTemperaturesTable": bladeTemperaturesTable,
       "bladeTemperaturesEntry": bladeTemperaturesEntry,
       "temperatureIndex": temperatureIndex,
       "temperatureBladeId": temperatureBladeId,
       "temperatureBladeExists": temperatureBladeExists,
       "temperatureBladePowerState": temperatureBladePowerState,
       "temperatureBladeName": temperatureBladeName,
       "temperatureCPU1": temperatureCPU1,
       "temperatureCPU2": temperatureCPU2,
       "temperatureCPU3": temperatureCPU3,
       "temperatureCPU4": temperatureCPU4,
       "temperatureDASD1": temperatureDASD1,
       "bladeSensorTempCapability": bladeSensorTempCapability,
       "bladeSensor1Temp": bladeSensor1Temp,
       "bladeSensor2Temp": bladeSensor2Temp,
       "bladeSensor3Temp": bladeSensor3Temp,
       "bladeSensor4Temp": bladeSensor4Temp,
       "bladeSensor5Temp": bladeSensor5Temp,
       "bladeSensor6Temp": bladeSensor6Temp,
       "bladeSensor7Temp": bladeSensor7Temp,
       "bladeSensor8Temp": bladeSensor8Temp,
       "bladeSensor9Temp": bladeSensor9Temp,
       "bladeTemperatureThresholdsTable": bladeTemperatureThresholdsTable,
       "bladeTemperatureThresholdsEntry": bladeTemperatureThresholdsEntry,
       "temperatureThresholdIndex": temperatureThresholdIndex,
       "temperatureThresholdBladeId": temperatureThresholdBladeId,
       "temperatureThresholdBladeExists": temperatureThresholdBladeExists,
       "temperatureThresholdBladePowerState": temperatureThresholdBladePowerState,
       "temperatureThresholdBladeName": temperatureThresholdBladeName,
       "temperatureCPU1HardShutdown": temperatureCPU1HardShutdown,
       "temperatureCPU1Warning": temperatureCPU1Warning,
       "temperatureCPU1WarningReset": temperatureCPU1WarningReset,
       "temperatureCPU2HardShutdown": temperatureCPU2HardShutdown,
       "temperatureCPU2Warning": temperatureCPU2Warning,
       "temperatureCPU2WarningReset": temperatureCPU2WarningReset,
       "temperatureCPU3HardShutdown": temperatureCPU3HardShutdown,
       "temperatureCPU3Warning": temperatureCPU3Warning,
       "temperatureCPU3WarningReset": temperatureCPU3WarningReset,
       "temperatureCPU4HardShutdown": temperatureCPU4HardShutdown,
       "temperatureCPU4Warning": temperatureCPU4Warning,
       "temperatureCPU4WarningReset": temperatureCPU4WarningReset,
       "temperatureDASD1HardShutdown": temperatureDASD1HardShutdown,
       "temperatureDASD1Warning": temperatureDASD1Warning,
       "temperatureDASD1WarningReset": temperatureDASD1WarningReset,
       "bladeTempThresholdSensorCapability": bladeTempThresholdSensorCapability,
       "temperatureSensor1HardShutdown": temperatureSensor1HardShutdown,
       "temperatureSensor1Warning": temperatureSensor1Warning,
       "temperatureSensor1WarningReset": temperatureSensor1WarningReset,
       "temperatureSensor2HardShutdown": temperatureSensor2HardShutdown,
       "temperatureSensor2Warning": temperatureSensor2Warning,
       "temperatureSensor2WarningReset": temperatureSensor2WarningReset,
       "temperatureSensor3HardShutdown": temperatureSensor3HardShutdown,
       "temperatureSensor3Warning": temperatureSensor3Warning,
       "temperatureSensor3WarningReset": temperatureSensor3WarningReset,
       "temperatureSensor4HardShutdown": temperatureSensor4HardShutdown,
       "temperatureSensor4Warning": temperatureSensor4Warning,
       "temperatureSensor4WarningReset": temperatureSensor4WarningReset,
       "temperatureSensor5HardShutdown": temperatureSensor5HardShutdown,
       "temperatureSensor5Warning": temperatureSensor5Warning,
       "temperatureSensor5WarningReset": temperatureSensor5WarningReset,
       "temperatureSensor6HardShutdown": temperatureSensor6HardShutdown,
       "temperatureSensor6Warning": temperatureSensor6Warning,
       "temperatureSensor6WarningReset": temperatureSensor6WarningReset,
       "temperatureSensor7HardShutdown": temperatureSensor7HardShutdown,
       "temperatureSensor7Warning": temperatureSensor7Warning,
       "temperatureSensor7WarningReset": temperatureSensor7WarningReset,
       "temperatureSensor8HardShutdown": temperatureSensor8HardShutdown,
       "temperatureSensor8Warning": temperatureSensor8Warning,
       "temperatureSensor8WarningReset": temperatureSensor8WarningReset,
       "temperatureSensor9HardShutdown": temperatureSensor9HardShutdown,
       "temperatureSensor9Warning": temperatureSensor9Warning,
       "temperatureSensor9WarningReset": temperatureSensor9WarningReset,
       "bladeVoltagesTable": bladeVoltagesTable,
       "bladeVoltagesEntry": bladeVoltagesEntry,
       "voltageIndex": voltageIndex,
       "voltageBladeId": voltageBladeId,
       "voltageBladeExists": voltageBladeExists,
       "voltageBladePowerState": voltageBladePowerState,
       "voltageBladeName": voltageBladeName,
       "bladePlus5Volt": bladePlus5Volt,
       "bladePlus3pt3Volt": bladePlus3pt3Volt,
       "bladePlus12Volt": bladePlus12Volt,
       "bladePlus2pt5Volt": bladePlus2pt5Volt,
       "bladePlus1pt5Volt": bladePlus1pt5Volt,
       "bladePlus1pt25Volt": bladePlus1pt25Volt,
       "bladeVRM1Volt": bladeVRM1Volt,
       "bladeSensorVoltCapability": bladeSensorVoltCapability,
       "bladeSensor1Volt": bladeSensor1Volt,
       "bladeSensor2Volt": bladeSensor2Volt,
       "bladeSensor3Volt": bladeSensor3Volt,
       "bladeSensor4Volt": bladeSensor4Volt,
       "bladeSensor5Volt": bladeSensor5Volt,
       "bladeSensor6Volt": bladeSensor6Volt,
       "bladeSensor7Volt": bladeSensor7Volt,
       "bladeSensor8Volt": bladeSensor8Volt,
       "bladeSensor9Volt": bladeSensor9Volt,
       "bladeSensor10Volt": bladeSensor10Volt,
       "bladeSensor11Volt": bladeSensor11Volt,
       "bladeSensor12Volt": bladeSensor12Volt,
       "bladeSensor13Volt": bladeSensor13Volt,
       "bladeSensor14Volt": bladeSensor14Volt,
       "bladeSensor15Volt": bladeSensor15Volt,
       "bladeSensor16Volt": bladeSensor16Volt,
       "bladeSensor17Volt": bladeSensor17Volt,
       "bladeSensor18Volt": bladeSensor18Volt,
       "bladeSensor19Volt": bladeSensor19Volt,
       "bladeSensor20Volt": bladeSensor20Volt,
       "bladeSensor21Volt": bladeSensor21Volt,
       "bladeSensor22Volt": bladeSensor22Volt,
       "bladeSensor23Volt": bladeSensor23Volt,
       "bladeSensor24Volt": bladeSensor24Volt,
       "bladeSensor25Volt": bladeSensor25Volt,
       "bladeSensor26Volt": bladeSensor26Volt,
       "bladeSensor27Volt": bladeSensor27Volt,
       "bladeSensor28Volt": bladeSensor28Volt,
       "bladeSensor29Volt": bladeSensor29Volt,
       "bladeSensor30Volt": bladeSensor30Volt,
       "bladeVoltageThresholdsTable": bladeVoltageThresholdsTable,
       "bladeVoltageThresholdsEntry": bladeVoltageThresholdsEntry,
       "voltageThresholdIndex": voltageThresholdIndex,
       "voltageThresholdBladeId": voltageThresholdBladeId,
       "voltageThresholdBladeExists": voltageThresholdBladeExists,
       "voltageThresholdBladePowerState": voltageThresholdBladePowerState,
       "voltageThresholdBladeName": voltageThresholdBladeName,
       "bladePlus5VoltHighWarning": bladePlus5VoltHighWarning,
       "bladePlus5VoltLowWarning": bladePlus5VoltLowWarning,
       "bladePlus3pt3VoltHighWarning": bladePlus3pt3VoltHighWarning,
       "bladePlus3pt3VoltLowWarning": bladePlus3pt3VoltLowWarning,
       "bladePlus12VoltHighWarning": bladePlus12VoltHighWarning,
       "bladePlus12VoltLowWarning": bladePlus12VoltLowWarning,
       "bladePlus2pt5VoltHighWarning": bladePlus2pt5VoltHighWarning,
       "bladePlus2pt5VoltLowWarning": bladePlus2pt5VoltLowWarning,
       "bladePlus1pt5VoltHighWarning": bladePlus1pt5VoltHighWarning,
       "bladePlus1pt5VoltLowWarning": bladePlus1pt5VoltLowWarning,
       "bladePlus1pt25VoltHighWarning": bladePlus1pt25VoltHighWarning,
       "bladePlus1pt25VoltLowWarning": bladePlus1pt25VoltLowWarning,
       "bladeVoltThresholdSensorCapability": bladeVoltThresholdSensorCapability,
       "bladeSensor1VoltHighWarning": bladeSensor1VoltHighWarning,
       "bladeSensor1VoltLowWarning": bladeSensor1VoltLowWarning,
       "bladeSensor2VoltHighWarning": bladeSensor2VoltHighWarning,
       "bladeSensor2VoltLowWarning": bladeSensor2VoltLowWarning,
       "bladeSensor3VoltHighWarning": bladeSensor3VoltHighWarning,
       "bladeSensor3VoltLowWarning": bladeSensor3VoltLowWarning,
       "bladeSensor4VoltHighWarning": bladeSensor4VoltHighWarning,
       "bladeSensor4VoltLowWarning": bladeSensor4VoltLowWarning,
       "bladeSensor5VoltHighWarning": bladeSensor5VoltHighWarning,
       "bladeSensor5VoltLowWarning": bladeSensor5VoltLowWarning,
       "bladeSensor6VoltHighWarning": bladeSensor6VoltHighWarning,
       "bladeSensor6VoltLowWarning": bladeSensor6VoltLowWarning,
       "bladeSensor7VoltHighWarning": bladeSensor7VoltHighWarning,
       "bladeSensor7VoltLowWarning": bladeSensor7VoltLowWarning,
       "bladeSensor8VoltHighWarning": bladeSensor8VoltHighWarning,
       "bladeSensor8VoltLowWarning": bladeSensor8VoltLowWarning,
       "bladeSensor9VoltHighWarning": bladeSensor9VoltHighWarning,
       "bladeSensor9VoltLowWarning": bladeSensor9VoltLowWarning,
       "bladeSensor10VoltHighWarning": bladeSensor10VoltHighWarning,
       "bladeSensor10VoltLowWarning": bladeSensor10VoltLowWarning,
       "bladeSensor11VoltHighWarning": bladeSensor11VoltHighWarning,
       "bladeSensor11VoltLowWarning": bladeSensor11VoltLowWarning,
       "bladeSensor12VoltHighWarning": bladeSensor12VoltHighWarning,
       "bladeSensor12VoltLowWarning": bladeSensor12VoltLowWarning,
       "bladeSensor13VoltHighWarning": bladeSensor13VoltHighWarning,
       "bladeSensor13VoltLowWarning": bladeSensor13VoltLowWarning,
       "bladeSensor14VoltHighWarning": bladeSensor14VoltHighWarning,
       "bladeSensor14VoltLowWarning": bladeSensor14VoltLowWarning,
       "bladeSensor15VoltHighWarning": bladeSensor15VoltHighWarning,
       "bladeSensor15VoltLowWarning": bladeSensor15VoltLowWarning,
       "bladeSensor16VoltHighWarning": bladeSensor16VoltHighWarning,
       "bladeSensor16VoltLowWarning": bladeSensor16VoltLowWarning,
       "bladeSensor17VoltHighWarning": bladeSensor17VoltHighWarning,
       "bladeSensor17VoltLowWarning": bladeSensor17VoltLowWarning,
       "bladeSensor18VoltHighWarning": bladeSensor18VoltHighWarning,
       "bladeSensor18VoltLowWarning": bladeSensor18VoltLowWarning,
       "bladeSensor19VoltHighWarning": bladeSensor19VoltHighWarning,
       "bladeSensor19VoltLowWarning": bladeSensor19VoltLowWarning,
       "bladeSensor20VoltHighWarning": bladeSensor20VoltHighWarning,
       "bladeSensor20VoltLowWarning": bladeSensor20VoltLowWarning,
       "bladeSensor21VoltHighWarning": bladeSensor21VoltHighWarning,
       "bladeSensor21VoltLowWarning": bladeSensor21VoltLowWarning,
       "bladeSensor22VoltHighWarning": bladeSensor22VoltHighWarning,
       "bladeSensor22VoltLowWarning": bladeSensor22VoltLowWarning,
       "bladeSensor23VoltHighWarning": bladeSensor23VoltHighWarning,
       "bladeSensor23VoltLowWarning": bladeSensor23VoltLowWarning,
       "bladeSensor24VoltHighWarning": bladeSensor24VoltHighWarning,
       "bladeSensor24VoltLowWarning": bladeSensor24VoltLowWarning,
       "bladeSensor25VoltHighWarning": bladeSensor25VoltHighWarning,
       "bladeSensor25VoltLowWarning": bladeSensor25VoltLowWarning,
       "bladeSensor26VoltHighWarning": bladeSensor26VoltHighWarning,
       "bladeSensor26VoltLowWarning": bladeSensor26VoltLowWarning,
       "bladeSensor27VoltHighWarning": bladeSensor27VoltHighWarning,
       "bladeSensor27VoltLowWarning": bladeSensor27VoltLowWarning,
       "bladeSensor28VoltHighWarning": bladeSensor28VoltHighWarning,
       "bladeSensor28VoltLowWarning": bladeSensor28VoltLowWarning,
       "bladeSensor29VoltHighWarning": bladeSensor29VoltHighWarning,
       "bladeSensor29VoltLowWarning": bladeSensor29VoltLowWarning,
       "bladeSensor30VoltHighWarning": bladeSensor30VoltHighWarning,
       "bladeSensor30VoltLowWarning": bladeSensor30VoltLowWarning,
       "bladePowerRestart": bladePowerRestart,
       "bladePowerRestartTable": bladePowerRestartTable,
       "bladePowerRestartEntry": bladePowerRestartEntry,
       "powerRestartIndex": powerRestartIndex,
       "powerRestartBladeId": powerRestartBladeId,
       "powerRestartBladeExists": powerRestartBladeExists,
       "powerRestartBladePowerState": powerRestartBladePowerState,
       "powerRestartBladeHealthState": powerRestartBladeHealthState,
       "powerRestartBladeName": powerRestartBladeName,
       "powerOnOffBlade": powerOnOffBlade,
       "restartBlade": restartBlade,
       "restartBladeSMP": restartBladeSMP,
       "restartBladeNMI": restartBladeNMI,
       "restartBladeClearNVRAM": restartBladeClearNVRAM,
       "restartBladeInvokeDiags": restartBladeInvokeDiags,
       "restartBladeInvokeDiagsFromDefaultBootList": restartBladeInvokeDiagsFromDefaultBootList,
       "restartBladeToSMSBootMenu": restartBladeToSMSBootMenu,
       "bladePowerEnableSMSBootMenu": bladePowerEnableSMSBootMenu,
       "bladeConfiguration": bladeConfiguration,
       "bladeConfigurationTable": bladeConfigurationTable,
       "bladeConfigurationEntry": bladeConfigurationEntry,
       "configurationIndex": configurationIndex,
       "configurationBladeId": configurationBladeId,
       "configurationBladeExists": configurationBladeExists,
       "configurationBladePowerState": configurationBladePowerState,
       "configurationBladeName": configurationBladeName,
       "configurationBladeActiveBootMode": configurationBladeActiveBootMode,
       "configurationBladePendingBootMode": configurationBladePendingBootMode,
       "configurationBladeAutoPowerOn": configurationBladeAutoPowerOn,
       "configurationBladePowerOnRestartDelay": configurationBladePowerOnRestartDelay,
       "bladePowerManagementPolicy": bladePowerManagementPolicy,
       "powerManagementPolicy": powerManagementPolicy,
       "acousticMode": acousticMode,
       "bladeBootCountPowerOnTime": bladeBootCountPowerOnTime,
       "bladeBootCountPowerOnTimeTable": bladeBootCountPowerOnTimeTable,
       "bladeBootCountPowerOnTimeEntry": bladeBootCountPowerOnTimeEntry,
       "bootCountPowerOnTimeBladeIndex": bootCountPowerOnTimeBladeIndex,
       "bootCountPowerOnTimeBladeId": bootCountPowerOnTimeBladeId,
       "bootCountPowerOnTimeBoots": bootCountPowerOnTimeBoots,
       "bootCountPowerOnTimeSecs": bootCountPowerOnTimeSecs,
       "bladeVlanId": bladeVlanId,
       "bladeNetworkConfiguration": bladeNetworkConfiguration,
       "bladeIPv4ConfigTable": bladeIPv4ConfigTable,
       "bladeIPv4ConfigEntry": bladeIPv4ConfigEntry,
       "bladeIPv4ConfigIndex": bladeIPv4ConfigIndex,
       "bladeIPv4ConfigPortIndex": bladeIPv4ConfigPortIndex,
       "bladeIPv4ConfigPortLabel": bladeIPv4ConfigPortLabel,
       "bladeIPv4ConfigPhysicalLinkStatus": bladeIPv4ConfigPhysicalLinkStatus,
       "bladeIPv4ConfigPhysicalLinkState": bladeIPv4ConfigPhysicalLinkState,
       "bladeIPv4ConfigIPAddr": bladeIPv4ConfigIPAddr,
       "bladeIPv4ConfigSubnetMask": bladeIPv4ConfigSubnetMask,
       "bladeIPv4ConfigGatewayAddr": bladeIPv4ConfigGatewayAddr,
       "bladeIPv4ConfigVlanId": bladeIPv4ConfigVlanId,
       "bladeIPv4ConfigDHCPEnable": bladeIPv4ConfigDHCPEnable,
       "bladeIPv4ConfigMACAddr": bladeIPv4ConfigMACAddr,
       "bladeIPv6Config": bladeIPv6Config,
       "bladeIPv6ConfigTable": bladeIPv6ConfigTable,
       "bladeIPv6ConfigEntry": bladeIPv6ConfigEntry,
       "bladeIPv6ConfigIndex": bladeIPv6ConfigIndex,
       "bladeIPv6ConfigPortIndex": bladeIPv6ConfigPortIndex,
       "bladeIPv6ConfigEnabled": bladeIPv6ConfigEnabled,
       "bladeIPv6ConfigStatic": bladeIPv6ConfigStatic,
       "bladeDHCPv6ConfigEnabled": bladeDHCPv6ConfigEnabled,
       "bladeIPv6ConfigStatelessEnabled": bladeIPv6ConfigStatelessEnabled,
       "bladeIPv6AddressTable": bladeIPv6AddressTable,
       "bladeIPv6AddressEntry": bladeIPv6AddressEntry,
       "bladeIPv6AddressIndex": bladeIPv6AddressIndex,
       "bladeIPv6AddressPortIndex": bladeIPv6AddressPortIndex,
       "bladeIPv6AddressEntryIndex": bladeIPv6AddressEntryIndex,
       "bladeIPv6AddressType": bladeIPv6AddressType,
       "bladeIPv6Address": bladeIPv6Address,
       "bladeIPv6AddressPrefixLen": bladeIPv6AddressPrefixLen,
       "bladeIPv6AddressDefaultRoute": bladeIPv6AddressDefaultRoute,
       "bladeBayDataTable": bladeBayDataTable,
       "bladeBayDataEntry": bladeBayDataEntry,
       "bayDataIndex": bayDataIndex,
       "bayDataBladeId": bayDataBladeId,
       "bayDataBladeExists": bayDataBladeExists,
       "bayDataBladePowerState": bayDataBladePowerState,
       "bayDataBladeName": bayDataBladeName,
       "bayData": bayData,
       "bayDataBladeStatus": bayDataBladeStatus,
       "bladeSPEthOverUSBInterface": bladeSPEthOverUSBInterface,
       "spEthOverUSBInterfaceTable": spEthOverUSBInterfaceTable,
       "spEthOverUSBInterfaceEntry": spEthOverUSBInterfaceEntry,
       "spEthOverUSBInterfaceIndex": spEthOverUSBInterfaceIndex,
       "spEthOverUSBInterfaceBladeId": spEthOverUSBInterfaceBladeId,
       "spEthOverUSBInterfaceBladeExists": spEthOverUSBInterfaceBladeExists,
       "spEthOverUSBInterfaceBladeName": spEthOverUSBInterfaceBladeName,
       "spEthOverUSBInterfaceEnable": spEthOverUSBInterfaceEnable,
       "bootDeviceInfoTable": bootDeviceInfoTable,
       "bootDeviceInfoEntry": bootDeviceInfoEntry,
       "bootInfoTopologyIndex": bootInfoTopologyIndex,
       "bootDeviceIndex": bootDeviceIndex,
       "bootDeviceId": bootDeviceId,
       "bootDeviceActive": bootDeviceActive,
       "bootDevicePresence": bootDevicePresence,
       "bootDeviceLabel": bootDeviceLabel,
       "bootDeviceUserLabel": bootDeviceUserLabel,
       "bootDeviceOrder": bootDeviceOrder,
       "bootSequenceInfoTable": bootSequenceInfoTable,
       "bootSequenceInfoEntry": bootSequenceInfoEntry,
       "bootSequenceInfoTopologyIndex": bootSequenceInfoTopologyIndex,
       "bootSequenceInfoMaxBootDevices": bootSequenceInfoMaxBootDevices,
       "bootSequenceInfoBootSequence": bootSequenceInfoBootSequence,
       "switchModule": switchModule,
       "switchModuleControl": switchModuleControl,
       "smControlTable": smControlTable,
       "smControlEntry": smControlEntry,
       "smControlIndex": smControlIndex,
       "switchModuleControlId": switchModuleControlId,
       "smPostResultsAvailable": smPostResultsAvailable,
       "smPostResultsValue": smPostResultsValue,
       "switchModuleMemDiagEnableDisable": switchModuleMemDiagEnableDisable,
       "smCfgCtrlEnableDisable": smCfgCtrlEnableDisable,
       "smExtEthPortsEnableDisable": smExtEthPortsEnableDisable,
       "smCfgCtrlOnResetEnableDisable": smCfgCtrlOnResetEnableDisable,
       "smHealthState": smHealthState,
       "smPMState": smPMState,
       "smPMCtrlEnableDisable": smPMCtrlEnableDisable,
       "smIOCompatibility": smIOCompatibility,
       "smPingTable": smPingTable,
       "smPingEntry": smPingEntry,
       "smPingIndex": smPingIndex,
       "smPingAddressEntryIndex": smPingAddressEntryIndex,
       "smPingAddress": smPingAddress,
       "smPingAddressExecute": smPingAddressExecute,
       "smPowerRestartTable": smPowerRestartTable,
       "smPowerRestartEntry": smPowerRestartEntry,
       "smPowerRestartIndex": smPowerRestartIndex,
       "smPowerRestartId": smPowerRestartId,
       "smSwitchExists": smSwitchExists,
       "smMACAddress": smMACAddress,
       "smIPAddress": smIPAddress,
       "switchModulePowerOnOff": switchModulePowerOnOff,
       "smReset": smReset,
       "smResetToDefault": smResetToDefault,
       "smRestartAndRunStdDiag": smRestartAndRunStdDiag,
       "smRestartAndRunExtDiag": smRestartAndRunExtDiag,
       "smRestartAndRunFullDiag": smRestartAndRunFullDiag,
       "smPowerOnRestartDelay": smPowerOnRestartDelay,
       "smSwitchWidth": smSwitchWidth,
       "smManufacturingID": smManufacturingID,
       "smStackingModeState": smStackingModeState,
       "smStackingModeInfo": smStackingModeInfo,
       "smIOCompatibilityTable": smIOCompatibilityTable,
       "smIOCompatibilityEntry": smIOCompatibilityEntry,
       "smIOCompatibilityIndex": smIOCompatibilityIndex,
       "smIOCompatibilityId": smIOCompatibilityId,
       "smIOCompatibilityModuleBay": smIOCompatibilityModuleBay,
       "smIOCompatibilityModulePower": smIOCompatibilityModulePower,
       "smIOCompatibilityModuleFabricType": smIOCompatibilityModuleFabricType,
       "smIOCompatibilityStatus": smIOCompatibilityStatus,
       "smIOCompatibilityTargetTopologyPath": smIOCompatibilityTargetTopologyPath,
       "switchModuleConfig": switchModuleConfig,
       "switchMgmtNetworkCfg": switchMgmtNetworkCfg,
       "switchCurrentNwCfg": switchCurrentNwCfg,
       "smCurrentIPInfoTable": smCurrentIPInfoTable,
       "smCurrentIPInfoEntry": smCurrentIPInfoEntry,
       "smCurrentIPInfoIndex": smCurrentIPInfoIndex,
       "smCurrentIPInfoId": smCurrentIPInfoId,
       "smCurrentIPInfoExists": smCurrentIPInfoExists,
       "smCurrentIPInfoPowerState": smCurrentIPInfoPowerState,
       "smCurrentIPAddr": smCurrentIPAddr,
       "smCurrentSubnetMask": smCurrentSubnetMask,
       "smCurrentGateway": smCurrentGateway,
       "smCurrentIPConfigMethod": smCurrentIPConfigMethod,
       "switchNewNwCfg": switchNewNwCfg,
       "smNewIPInfoTable": smNewIPInfoTable,
       "smNewIPInfoEntry": smNewIPInfoEntry,
       "smNewIPInfoIndex": smNewIPInfoIndex,
       "smNewIPInfoId": smNewIPInfoId,
       "smNewIPInfoExists": smNewIPInfoExists,
       "smNewIPInfoPowerState": smNewIPInfoPowerState,
       "smNewIPAddr": smNewIPAddr,
       "smNewSubnetMask": smNewSubnetMask,
       "smNewGateway": smNewGateway,
       "smNewIPConfigMethod": smNewIPConfigMethod,
       "smNewIPConfigEnableDisable": smNewIPConfigEnableDisable,
       "switchIPv6Config": switchIPv6Config,
       "smIPv6ConfigTable": smIPv6ConfigTable,
       "smIPv6ConfigEntry": smIPv6ConfigEntry,
       "smIPv6ConfigIndex": smIPv6ConfigIndex,
       "smIPv6ConfigEnabled": smIPv6ConfigEnabled,
       "smIPv6ConfigStatic": smIPv6ConfigStatic,
       "smDHCPv6ConfigEnabled": smDHCPv6ConfigEnabled,
       "smIPv6ConfigStatelessEnabled": smIPv6ConfigStatelessEnabled,
       "smIPv6AddressTable": smIPv6AddressTable,
       "smIPv6AddressEntry": smIPv6AddressEntry,
       "smIPv6AddressIndex": smIPv6AddressIndex,
       "smIPv6AddressEntryIndex": smIPv6AddressEntryIndex,
       "smIPv6AddressType": smIPv6AddressType,
       "smIPv6Address": smIPv6Address,
       "smIPv6AddressPrefixLen": smIPv6AddressPrefixLen,
       "smIPv6AddressDefaultRoute": smIPv6AddressDefaultRoute,
       "smIPv6StaticConfigTable": smIPv6StaticConfigTable,
       "smIPv6StaticConfigEntry": smIPv6StaticConfigEntry,
       "smIPv6StaticIndex": smIPv6StaticIndex,
       "smIPv6StaticAddress": smIPv6StaticAddress,
       "smIPv6StaticAddressPrefixLen": smIPv6StaticAddressPrefixLen,
       "smIPv6StaticAddressDefaultRoute": smIPv6StaticAddressDefaultRoute,
       "switchPortCfg": switchPortCfg,
       "switchModOnePortCfg": switchModOnePortCfg,
       "smOnePortCfgTable": smOnePortCfgTable,
       "smOnePortCfgEntry": smOnePortCfgEntry,
       "smOnePortCfgIndex": smOnePortCfgIndex,
       "smOnePortCfgLabel": smOnePortCfgLabel,
       "smOnePortCfgType": smOnePortCfgType,
       "smOnePortCfgLinkSetting": smOnePortCfgLinkSetting,
       "smOnePortCfgLinkState": smOnePortCfgLinkState,
       "smOnePortCfgSpeedSetting": smOnePortCfgSpeedSetting,
       "smOnePortCfgSpeedStatus": smOnePortCfgSpeedStatus,
       "smOnePortCfgAvailSpeeds": smOnePortCfgAvailSpeeds,
       "smOnePortCfgMedia": smOnePortCfgMedia,
       "smOnePortCfgProtocol": smOnePortCfgProtocol,
       "smOnePortCfgWidth": smOnePortCfgWidth,
       "smOnePortCfgCableLength": smOnePortCfgCableLength,
       "smOnePortCfgCableType": smOnePortCfgCableType,
       "smOnePortCfgVendorName": smOnePortCfgVendorName,
       "smOnePortCfgCompatibility": smOnePortCfgCompatibility,
       "smOnePortCfgDataRate": smOnePortCfgDataRate,
       "switchModTwoPortCfg": switchModTwoPortCfg,
       "smTwoPortCfgTable": smTwoPortCfgTable,
       "smTwoPortCfgEntry": smTwoPortCfgEntry,
       "smTwoPortCfgIndex": smTwoPortCfgIndex,
       "smTwoPortCfgLabel": smTwoPortCfgLabel,
       "smTwoPortCfgType": smTwoPortCfgType,
       "smTwoPortCfgLinkSetting": smTwoPortCfgLinkSetting,
       "smTwoPortCfgLinkState": smTwoPortCfgLinkState,
       "smTwoPortCfgSpeedSetting": smTwoPortCfgSpeedSetting,
       "smTwoPortCfgSpeedStatus": smTwoPortCfgSpeedStatus,
       "smTwoPortCfgAvailSpeeds": smTwoPortCfgAvailSpeeds,
       "smTwoPortCfgMedia": smTwoPortCfgMedia,
       "smTwoPortCfgProtocol": smTwoPortCfgProtocol,
       "smTwoPortCfgWidth": smTwoPortCfgWidth,
       "smTwoPortCfgCableLength": smTwoPortCfgCableLength,
       "smTwoPortCfgCableType": smTwoPortCfgCableType,
       "smTwoPortCfgVendorName": smTwoPortCfgVendorName,
       "smTwoPortCfgCompatibility": smTwoPortCfgCompatibility,
       "smTwoPortCfgDataRate": smTwoPortCfgDataRate,
       "switchModThreePortCfg": switchModThreePortCfg,
       "smThreePortCfgTable": smThreePortCfgTable,
       "smThreePortCfgEntry": smThreePortCfgEntry,
       "smThreePortCfgIndex": smThreePortCfgIndex,
       "smThreePortCfgLabel": smThreePortCfgLabel,
       "smThreePortCfgType": smThreePortCfgType,
       "smThreePortCfgLinkSetting": smThreePortCfgLinkSetting,
       "smThreePortCfgLinkState": smThreePortCfgLinkState,
       "smThreePortCfgSpeedSetting": smThreePortCfgSpeedSetting,
       "smThreePortCfgSpeedStatus": smThreePortCfgSpeedStatus,
       "smThreePortCfgAvailSpeeds": smThreePortCfgAvailSpeeds,
       "smThreePortCfgMedia": smThreePortCfgMedia,
       "smThreePortCfgProtocol": smThreePortCfgProtocol,
       "smThreePortCfgWidth": smThreePortCfgWidth,
       "smThreePortCfgCableLength": smThreePortCfgCableLength,
       "smThreePortCfgCableType": smThreePortCfgCableType,
       "smThreePortCfgVendorName": smThreePortCfgVendorName,
       "smThreePortCfgCompatibility": smThreePortCfgCompatibility,
       "smThreePortCfgDataRate": smThreePortCfgDataRate,
       "switchModFourPortCfg": switchModFourPortCfg,
       "smFourPortCfgTable": smFourPortCfgTable,
       "smFourPortCfgEntry": smFourPortCfgEntry,
       "smFourPortCfgIndex": smFourPortCfgIndex,
       "smFourPortCfgLabel": smFourPortCfgLabel,
       "smFourPortCfgType": smFourPortCfgType,
       "smFourPortCfgLinkSetting": smFourPortCfgLinkSetting,
       "smFourPortCfgLinkState": smFourPortCfgLinkState,
       "smFourPortCfgSpeedSetting": smFourPortCfgSpeedSetting,
       "smFourPortCfgSpeedStatus": smFourPortCfgSpeedStatus,
       "smFourPortCfgAvailSpeeds": smFourPortCfgAvailSpeeds,
       "smFourPortCfgMedia": smFourPortCfgMedia,
       "smFourPortCfgProtocol": smFourPortCfgProtocol,
       "smFourPortCfgWidth": smFourPortCfgWidth,
       "smFourPortCfgCableLength": smFourPortCfgCableLength,
       "smFourPortCfgCableType": smFourPortCfgCableType,
       "smFourPortCfgVendorName": smFourPortCfgVendorName,
       "smFourPortCfgCompatibility": smFourPortCfgCompatibility,
       "smFourPortCfgDataRate": smFourPortCfgDataRate,
       "chassisTopology": chassisTopology,
       "chassisResponseVersion": chassisResponseVersion,
       "chassisFlags": chassisFlags,
       "chassisNoOfFPsSupported": chassisNoOfFPsSupported,
       "chassisNoOfBayDevicesSupported": chassisNoOfBayDevicesSupported,
       "chassisNoOfSMsSupported": chassisNoOfSMsSupported,
       "chassisNoOfMMsSupported": chassisNoOfMMsSupported,
       "chassisNoOfPMsSupported": chassisNoOfPMsSupported,
       "chassisNoOfRearLEDCardsSupported": chassisNoOfRearLEDCardsSupported,
       "chassisNoOfChassisFansSupported": chassisNoOfChassisFansSupported,
       "chassisBayDevicesInstalled": chassisBayDevicesInstalled,
       "chassisSMsInstalled": chassisSMsInstalled,
       "chassisMMsInstalled": chassisMMsInstalled,
       "chassisPMsInstalled": chassisPMsInstalled,
       "chassisRearLEDCardInstalled": chassisRearLEDCardInstalled,
       "chassisFansInstalled": chassisFansInstalled,
       "chassisActiveMM": chassisActiveMM,
       "chassisFPsInstalled": chassisFPsInstalled,
       "chassisType": chassisType,
       "chassisSubtype": chassisSubtype,
       "chassisNoOfRearLEDCardsInstalled": chassisNoOfRearLEDCardsInstalled,
       "chassisRoom": chassisRoom,
       "chassisName": chassisName,
       "chassisRack": chassisRack,
       "chassisLowestU": chassisLowestU,
       "chassisUHeight": chassisUHeight,
       "managementModule": managementModule,
       "mmStatusTable": mmStatusTable,
       "mmStatusEntry": mmStatusEntry,
       "mmStatusIndex": mmStatusIndex,
       "mmPresent": mmPresent,
       "mmExtIpAddress": mmExtIpAddress,
       "mmPrimary": mmPrimary,
       "mmHealthState": mmHealthState,
       "firmwareInformation": firmwareInformation,
       "smFirmwareInformation": smFirmwareInformation,
       "smFirmwareInfoTable": smFirmwareInfoTable,
       "smFirmwareInfoEntry": smFirmwareInfoEntry,
       "smFirmwareInfoIndex": smFirmwareInfoIndex,
       "smFirmwareInfoModIndex": smFirmwareInfoModIndex,
       "smFirmwareInfoImageIndex": smFirmwareInfoImageIndex,
       "smFirmwareInfoImageName": smFirmwareInfoImageName,
       "firmwareUpdate": firmwareUpdate,
       "firmwareUpdateTarget": firmwareUpdateTarget,
       "firmwareUpdateTftpServer": firmwareUpdateTftpServer,
       "firmwareUpdateFileName": firmwareUpdateFileName,
       "firmwareUpdateStart": firmwareUpdateStart,
       "firmwareUpdateStatus": firmwareUpdateStatus,
       "standbyFirmwareUpdateStatus": standbyFirmwareUpdateStatus,
       "firmwareImageNumber": firmwareImageNumber,
       "firmwareActiveImage": firmwareActiveImage,
       "firmwareUpdateServer": firmwareUpdateServer,
       "fileManagement": fileManagement,
       "fileTopology": fileTopology,
       "currentDirectory": currentDirectory,
       "fileDetailsTable": fileDetailsTable,
       "fileDetailsEntry": fileDetailsEntry,
       "fileIndex": fileIndex,
       "fileName": fileName,
       "fileLastUpdate": fileLastUpdate,
       "fileSize": fileSize,
       "fileManagementCmd": fileManagementCmd,
       "fileSystemSpaceAvailable": fileSystemSpaceAvailable,
       "cmeRemoteChassis": cmeRemoteChassis,
       "cmeRemoteChassisTable": cmeRemoteChassisTable,
       "cmeRemoteChassisEntry": cmeRemoteChassisEntry,
       "cmeRemoteChassisIndex": cmeRemoteChassisIndex,
       "cmeSystemName": cmeSystemName,
       "cmeType": cmeType,
       "cmeSerial": cmeSerial,
       "cmeFru": cmeFru,
       "cmeUuid": cmeUuid,
       "cmeSlot": cmeSlot,
       "cmeMidPid": cmeMidPid,
       "cmeMacAddress": cmeMacAddress,
       "cmeChassisSerial": cmeChassisSerial,
       "cmeChassisFru": cmeChassisFru,
       "cmeChassisMachineTypeMode": cmeChassisMachineTypeMode,
       "cmeSystemStatus": cmeSystemStatus,
       "cmeChassisUuid": cmeChassisUuid,
       "cmeChassisMidPid": cmeChassisMidPid,
       "cmeChassisId": cmeChassisId,
       "cmeChassisLocation": cmeChassisLocation,
       "cmeChassisRoomId": cmeChassisRoomId,
       "cmeChassisRackId": cmeChassisRackId,
       "cmeChassisUser": cmeChassisUser,
       "cmeChassisFruList": cmeChassisFruList,
       "cmeFirmwareVersion": cmeFirmwareVersion,
       "cmeChassisType": cmeChassisType,
       "cmeIpv4Status": cmeIpv4Status,
       "cmeIpv4Addresses": cmeIpv4Addresses,
       "cmeIpv4AddressesFloat": cmeIpv4AddressesFloat,
       "cmeIpv4Protocols": cmeIpv4Protocols,
       "cmeIpv6Status": cmeIpv6Status,
       "cmeIpv6Addresses": cmeIpv6Addresses,
       "cmeIpv6AddressesFloat": cmeIpv6AddressesFloat,
       "cmeIpv6Protocols": cmeIpv6Protocols,
       "chassisDiscovery": chassisDiscovery,
       "componentPower": componentPower,
       "componentPowerTable": componentPowerTable,
       "componentPowerEntry": componentPowerEntry,
       "componentPowerTopologyPath": componentPowerTopologyPath,
       "componentPowerName": componentPowerName,
       "componentPowerState": componentPowerState,
       "componentPowerAction": componentPowerAction,
       "componentPowerEnableSMSBootMenu": componentPowerEnableSMSBootMenu,
       "componentPowerTableCacheTimeout": componentPowerTableCacheTimeout,
       "componentPowerDetailsTable": componentPowerDetailsTable,
       "componentPowerDetailsEntry": componentPowerDetailsEntry,
       "componentPowerDetailsTopologyPath": componentPowerDetailsTopologyPath,
       "componentPowerDetailsName": componentPowerDetailsName,
       "componentPowerDetailsMaxPowerConfig": componentPowerDetailsMaxPowerConfig,
       "componentPowerDetailsEffectiveClockRate": componentPowerDetailsEffectiveClockRate,
       "componentPowerDetailsMaximumClockRate": componentPowerDetailsMaximumClockRate,
       "componentPowerDetailsPowerSaverMode": componentPowerDetailsPowerSaverMode,
       "componentPowerDetailsDynamicPowerSaver": componentPowerDetailsDynamicPowerSaver,
       "componentPowerDetailsDynamicPowerFavorPerformanceOverPower": componentPowerDetailsDynamicPowerFavorPerformanceOverPower,
       "componentPowerDetailsPowerControl": componentPowerDetailsPowerControl,
       "componentPowerDetailsPcapMin": componentPowerDetailsPcapMin,
       "componentPowerDetailsPcapGuaranteedMin": componentPowerDetailsPcapGuaranteedMin,
       "componentPowerDetailsPcapMax": componentPowerDetailsPcapMax,
       "componentPowerDetailsStaticCap": componentPowerDetailsStaticCap,
       "componentPowerDetailsRuntimeCap": componentPowerDetailsRuntimeCap,
       "componentPowerDetailsTableCacheTimeout": componentPowerDetailsTableCacheTimeout,
       "componentConfiguration": componentConfiguration,
       "componentBayDataTable": componentBayDataTable,
       "componentBayDataEntry": componentBayDataEntry,
       "componentBayDataTopologyPath": componentBayDataTopologyPath,
       "componentBayDataName": componentBayDataName,
       "componentBayDataStatus": componentBayDataStatus,
       "componentBayData": componentBayData,
       "componentBayDataTableCacheTimeout": componentBayDataTableCacheTimeout,
       "componentEthOverUSBInterfaceTable": componentEthOverUSBInterfaceTable,
       "componentEthOverUSBInterfaceEntry": componentEthOverUSBInterfaceEntry,
       "componentEthOverUSBInterfaceTopologyPath": componentEthOverUSBInterfaceTopologyPath,
       "componentEthOverUSBInterfaceName": componentEthOverUSBInterfaceName,
       "componentEthOverUSBInterfaceEnable": componentEthOverUSBInterfaceEnable,
       "componentEthOverUSBInterfaceTableCacheTimeout": componentEthOverUSBInterfaceTableCacheTimeout,
       "componentConfigurationTable": componentConfigurationTable,
       "componentConfigurationEntry": componentConfigurationEntry,
       "componentConfigurationTopologyPath": componentConfigurationTopologyPath,
       "componentConfigurationName": componentConfigurationName,
       "componentConfigurationActiveBootMode": componentConfigurationActiveBootMode,
       "componentConfigurationPendingBootMode": componentConfigurationPendingBootMode,
       "componentConfigurationAutoPowerOn": componentConfigurationAutoPowerOn,
       "componentConfigurationPowerOnRestartDelay": componentConfigurationPowerOnRestartDelay,
       "componentConfigurationLocalPowerControlEnable": componentConfigurationLocalPowerControlEnable,
       "componentConfigurationWakeOnLanControlEnable": componentConfigurationWakeOnLanControlEnable,
       "componentConfigurationTableCacheTimeout": componentConfigurationTableCacheTimeout,
       "componentNetworkConfiguration": componentNetworkConfiguration,
       "componentIPv4ConfigTable": componentIPv4ConfigTable,
       "componentIPv4ConfigEntry": componentIPv4ConfigEntry,
       "componentIPv4ConfigTopologyPath": componentIPv4ConfigTopologyPath,
       "componentIPv4ConfigPortIndex": componentIPv4ConfigPortIndex,
       "componentIPv4ConfigName": componentIPv4ConfigName,
       "componentIPv4ConfigPortLabel": componentIPv4ConfigPortLabel,
       "componentIPv4ConfigPhysicalLinkStatus": componentIPv4ConfigPhysicalLinkStatus,
       "componentIPv4ConfigPhysicalLinkState": componentIPv4ConfigPhysicalLinkState,
       "componentIPv4ConfigIPAddr": componentIPv4ConfigIPAddr,
       "componentIPv4ConfigSubnetMask": componentIPv4ConfigSubnetMask,
       "componentIPv4ConfigGatewayAddr": componentIPv4ConfigGatewayAddr,
       "componentIPv4ConfigVlanId": componentIPv4ConfigVlanId,
       "componentIPv4ConfigDHCPEnable": componentIPv4ConfigDHCPEnable,
       "componentIPv4ConfigMACAddr": componentIPv4ConfigMACAddr,
       "componentIPv4ConfigTableCacheTimeout": componentIPv4ConfigTableCacheTimeout,
       "componentIPv6Config": componentIPv6Config,
       "componentIPv6ConfigTable": componentIPv6ConfigTable,
       "componentIPv6ConfigEntry": componentIPv6ConfigEntry,
       "componentIPv6ConfigTopologyPath": componentIPv6ConfigTopologyPath,
       "componentIPv6ConfigPortIndex": componentIPv6ConfigPortIndex,
       "componentIPv6ConfigName": componentIPv6ConfigName,
       "componentIPv6ConfigEnabled": componentIPv6ConfigEnabled,
       "componentIPv6ConfigStatic": componentIPv6ConfigStatic,
       "componentDHCPv6ConfigEnabled": componentDHCPv6ConfigEnabled,
       "componentIPv6ConfigStatelessEnabled": componentIPv6ConfigStatelessEnabled,
       "componentIPv6ConfigTableCacheTimeout": componentIPv6ConfigTableCacheTimeout,
       "componentIPv6AddressTable": componentIPv6AddressTable,
       "componentIPv6AddressEntry": componentIPv6AddressEntry,
       "componentIPv6AddressTopologyPath": componentIPv6AddressTopologyPath,
       "componentIPv6AddressPortIndex": componentIPv6AddressPortIndex,
       "componentIPv6AddressEntryIndex": componentIPv6AddressEntryIndex,
       "componentIPv6AddressName": componentIPv6AddressName,
       "componentIPv6AddressType": componentIPv6AddressType,
       "componentIPv6Address": componentIPv6Address,
       "componentIPv6AddressPrefixLen": componentIPv6AddressPrefixLen,
       "componentIPv6AddressDefaultRoute": componentIPv6AddressDefaultRoute,
       "componentIPv6AddressTableCacheTimeout": componentIPv6AddressTableCacheTimeout,
       "componentTimeTable": componentTimeTable,
       "componentTimeEntry": componentTimeEntry,
       "componentTimeTopologyPath": componentTimeTopologyPath,
       "componentTimeName": componentTimeName,
       "componentTimeNTPEnable": componentTimeNTPEnable,
       "componentTimeNTPFrequency": componentTimeNTPFrequency,
       "componentTimeTableCacheTimeout": componentTimeTableCacheTimeout,
       "componentSolTable": componentSolTable,
       "componentSolEntry": componentSolEntry,
       "componentSolTopologyPath": componentSolTopologyPath,
       "componentSolName": componentSolName,
       "componentSolEnable": componentSolEnable,
       "componentSolIpAddr": componentSolIpAddr,
       "componentSolSessionStatus": componentSolSessionStatus,
       "componentSolCapability": componentSolCapability,
       "componentSolIpAddr6": componentSolIpAddr6,
       "componentSolRetryInterval": componentSolRetryInterval,
       "componentSolRetryCount": componentSolRetryCount,
       "componentSolBytesSent": componentSolBytesSent,
       "componentSolBytesReceived": componentSolBytesReceived,
       "componentSolDestinationMAC": componentSolDestinationMAC,
       "componentSolConsoleUserId": componentSolConsoleUserId,
       "componentSolConsoleLoginFrom": componentSolConsoleLoginFrom,
       "componentSolConsoleLoginStart": componentSolConsoleLoginStart,
       "componentSolConsoleLoginEnd": componentSolConsoleLoginEnd,
       "componentSolTableCacheTimeout": componentSolTableCacheTimeout,
       "componentMonitors": componentMonitors,
       "componentSystemStatusTable": componentSystemStatusTable,
       "componentSystemStatusEntry": componentSystemStatusEntry,
       "componentStatusTopologyPath": componentStatusTopologyPath,
       "componentStatusName": componentStatusName,
       "componentStatusPowerState": componentStatusPowerState,
       "componentStatusHealthState": componentStatusHealthState,
       "componentStatusPowerEnable": componentStatusPowerEnable,
       "componentStatusWakeOnLanEnable": componentStatusWakeOnLanEnable,
       "componentStatusWidth": componentStatusWidth,
       "componentStatusIOCompatibility": componentStatusIOCompatibility,
       "componentStatusInventoryReady": componentStatusInventoryReady,
       "componentStatusBootCountPowerOnTimeBoots": componentStatusBootCountPowerOnTimeBoots,
       "componentStatusBootCountPowerOnTimeSecs": componentStatusBootCountPowerOnTimeSecs,
       "componentSystemStatusTableCacheTimeout": componentSystemStatusTableCacheTimeout,
       "componentHealthSummaryTable": componentHealthSummaryTable,
       "componentHealthSummaryEntry": componentHealthSummaryEntry,
       "componentHealthTopologyPath": componentHealthTopologyPath,
       "componentHealthEventIndex": componentHealthEventIndex,
       "componentHealthSummaryName": componentHealthSummaryName,
       "componentHealthSummarySeverity": componentHealthSummarySeverity,
       "componentHealthSummaryDescription": componentHealthSummaryDescription,
       "componentHealthSummaryDateTime": componentHealthSummaryDateTime,
       "componentHealthSummaryEventID": componentHealthSummaryEventID,
       "componentHealthSummaryTableCacheTimeout": componentHealthSummaryTableCacheTimeout,
       "componentMACAddressTable": componentMACAddressTable,
       "componentMACAddressEntry": componentMACAddressEntry,
       "componentMACAddressTopologyPath": componentMACAddressTopologyPath,
       "componentMACAddressIndex": componentMACAddressIndex,
       "componentMACAddressName": componentMACAddressName,
       "componentMACAddress": componentMACAddress,
       "componentMACAddressTableCacheTimeout": componentMACAddressTableCacheTimeout,
       "componentUniqueIDsTable": componentUniqueIDsTable,
       "componentUniqueIDsEntry": componentUniqueIDsEntry,
       "componentUniqueIDsTopologyPath": componentUniqueIDsTopologyPath,
       "componentUniqueIDsIndex": componentUniqueIDsIndex,
       "componentUniqueIDsName": componentUniqueIDsName,
       "componentUniqueIDsType": componentUniqueIDsType,
       "componentUniqueIDsValue": componentUniqueIDsValue,
       "componentUniqueIDsTableCacheTimeout": componentUniqueIDsTableCacheTimeout,
       "componentVoltagesTable": componentVoltagesTable,
       "componentVoltagesEntry": componentVoltagesEntry,
       "componentVoltagesTopologyPath": componentVoltagesTopologyPath,
       "componentVoltagesSensorIndex": componentVoltagesSensorIndex,
       "componentVoltagesComponentName": componentVoltagesComponentName,
       "componentVoltagesSensorLabel": componentVoltagesSensorLabel,
       "componentVoltagesSensorValue": componentVoltagesSensorValue,
       "componentVoltagesLowWarningThreshold": componentVoltagesLowWarningThreshold,
       "componentVoltagesHighWarningThreshold": componentVoltagesHighWarningThreshold,
       "componentVoltagesTableCacheTimeout": componentVoltagesTableCacheTimeout,
       "componentTemperaturesTable": componentTemperaturesTable,
       "componentTemperaturesEntry": componentTemperaturesEntry,
       "componentTemperaturesTopologyPath": componentTemperaturesTopologyPath,
       "componentTemperaturesSensorIndex": componentTemperaturesSensorIndex,
       "componentTemperaturesComponentName": componentTemperaturesComponentName,
       "componentTemperaturesSensorLabel": componentTemperaturesSensorLabel,
       "componentTemperaturesSensorValue": componentTemperaturesSensorValue,
       "componentTemperaturesWarningThreshold": componentTemperaturesWarningThreshold,
       "componentTemperaturesShutdownThreshold": componentTemperaturesShutdownThreshold,
       "componentTemperaturesWarningResetThreshold": componentTemperaturesWarningResetThreshold,
       "componentTemperaturesTableCacheTimeout": componentTemperaturesTableCacheTimeout,
       "componentIOCompatibilityTable": componentIOCompatibilityTable,
       "componentIOCompatibilityEntry": componentIOCompatibilityEntry,
       "componentIOCompatibilityTopologyPath": componentIOCompatibilityTopologyPath,
       "componentIOCompatibilityIOMBay": componentIOCompatibilityIOMBay,
       "componentIOCompatibilityComponentName": componentIOCompatibilityComponentName,
       "componentIOCompatibilityIOMPower": componentIOCompatibilityIOMPower,
       "componentIOCompatibilityIOMFabricType": componentIOCompatibilityIOMFabricType,
       "componentIOCompatibilityFabricOnComponent": componentIOCompatibilityFabricOnComponent,
       "componentIOCompatibilityStatus": componentIOCompatibilityStatus,
       "componentIOCompatibilityTableCacheTimeout": componentIOCompatibilityTableCacheTimeout,
       "nodeConnectivityTable": nodeConnectivityTable,
       "nodeConnectivityEntry": nodeConnectivityEntry,
       "nodeConnectivityIndex": nodeConnectivityIndex,
       "nodeConnectivityName": nodeConnectivityName,
       "nodeConnectivityStatus": nodeConnectivityStatus,
       "componentServiceReset": componentServiceReset,
       "componentServiceResetTable": componentServiceResetTable,
       "componentServiceResetEntry": componentServiceResetEntry,
       "componentServiceResetTopologyPath": componentServiceResetTopologyPath,
       "componentServiceResetName": componentServiceResetName,
       "componentServiceResetStatus": componentServiceResetStatus,
       "componentServiceResetCmd": componentServiceResetCmd,
       "componentServiceResetTableCacheTimeout": componentServiceResetTableCacheTimeout,
       "componentLEDs": componentLEDs,
       "componentLEDsTable": componentLEDsTable,
       "componentLEDsEntry": componentLEDsEntry,
       "ledComponentTopologyPath": ledComponentTopologyPath,
       "ledComponentName": ledComponentName,
       "ledComponentFault": ledComponentFault,
       "ledComponentCheckLog": ledComponentCheckLog,
       "ledComponentIdentity": ledComponentIdentity,
       "componentLEDsTableCacheTimeout": componentLEDsTableCacheTimeout,
       "componentLEDsDetailsTable": componentLEDsDetailsTable,
       "componentLEDsDetailsEntry": componentLEDsDetailsEntry,
       "componentLEDsDetailsTopologyPath": componentLEDsDetailsTopologyPath,
       "componentLEDsDetailsIndex": componentLEDsDetailsIndex,
       "componentLEDsDetailsComponentType": componentLEDsDetailsComponentType,
       "componentLEDsDetailsLabel": componentLEDsDetailsLabel,
       "componentLEDsDetailsState": componentLEDsDetailsState,
       "componentLEDsDetailsLocation": componentLEDsDetailsLocation,
       "componentLEDsDetailsTableCacheTimeout": componentLEDsDetailsTableCacheTimeout,
       "backupRestore": backupRestore,
       "backupRestoreAction": backupRestoreAction,
       "backupRestoreStatus": backupRestoreStatus,
       "backupRestoreMessage": backupRestoreMessage,
       "backupRestoreURI": backupRestoreURI,
       "backupRestorePassword": backupRestorePassword,
       "backupRestoreLogURI": backupRestoreLogURI,
       "backupRestoreLogPush": backupRestoreLogPush,
       "service": service,
       "bladeServiceData": bladeServiceData,
       "bladeServiceDataTable": bladeServiceDataTable,
       "bladeServiceDataEntry": bladeServiceDataEntry,
       "serviceDataIndex": serviceDataIndex,
       "serviceDataBladeId": serviceDataBladeId,
       "serviceDataBladeExists": serviceDataBladeExists,
       "serviceDataBladePowerState": serviceDataBladePowerState,
       "serviceDataBladeName": serviceDataBladeName,
       "serviceDataDumpInitiate": serviceDataDumpInitiate,
       "serviceDataDumpRetrieve": serviceDataDumpRetrieve,
       "serviceDataDumpCapabilityMask": serviceDataDumpCapabilityMask,
       "serviceDataDumpInProgress": serviceDataDumpInProgress,
       "serviceAdvisor": serviceAdvisor,
       "autoCallHomeSetup": autoCallHomeSetup,
       "acceptLicenseAgreement": acceptLicenseAgreement,
       "serviceAdvisorEnable": serviceAdvisorEnable,
       "serviceSupportCenter": serviceSupportCenter,
       "ibmSupportCenter": ibmSupportCenter,
       "contactInformation": contactInformation,
       "companyName": companyName,
       "contactName": contactName,
       "phoneNumber": phoneNumber,
       "emailAddress": emailAddress,
       "address": address,
       "city": city,
       "state": state,
       "postalCode": postalCode,
       "phoneNumberExt": phoneNumberExt,
       "altContactName": altContactName,
       "altPhoneNumber": altPhoneNumber,
       "altPhoneNumberExt": altPhoneNumberExt,
       "altEmailAddress": altEmailAddress,
       "httpProxyConfig": httpProxyConfig,
       "httpProxyEnable": httpProxyEnable,
       "httpProxyLocation": httpProxyLocation,
       "httpProxyPort": httpProxyPort,
       "httpProxyUserName": httpProxyUserName,
       "httpProxyPassword": httpProxyPassword,
       "activityLogs": activityLogs,
       "activityLogTable": activityLogTable,
       "activityLogEntry": activityLogEntry,
       "activityLogIndex": activityLogIndex,
       "activityLogString": activityLogString,
       "activityLogAcknowledge": activityLogAcknowledge,
       "activityLogAttribute": activityLogAttribute,
       "autoFTPSetup": autoFTPSetup,
       "autoFTPCallMode": autoFTPCallMode,
       "autoFTPCallAddr": autoFTPCallAddr,
       "autoFTPCallPort": autoFTPCallPort,
       "autoFTPCallUserID": autoFTPCallUserID,
       "autoFTPCallPassword": autoFTPCallPassword,
       "callHomeExclusionEvents": callHomeExclusionEvents,
       "readCallHomeExclusionEventTable": readCallHomeExclusionEventTable,
       "readCallHomeExclusionEventEntry": readCallHomeExclusionEventEntry,
       "readCallHomeExclusionEventIndex": readCallHomeExclusionEventIndex,
       "readCallHomeExclusionEventID": readCallHomeExclusionEventID,
       "addCallHomeExclusionEvent": addCallHomeExclusionEvent,
       "rmCallHomeExclusionEvent": rmCallHomeExclusionEvent,
       "rmAllCallHomeExclusionEvent": rmAllCallHomeExclusionEvent,
       "componentPowerServiceReset": componentPowerServiceReset,
       "bladePowerServiceResetTable": bladePowerServiceResetTable,
       "bladePowerServiceResetEntry": bladePowerServiceResetEntry,
       "bladePowerServiceResetIndex": bladePowerServiceResetIndex,
       "bladePowerServiceResetBladeId": bladePowerServiceResetBladeId,
       "bladePowerServiceResetStatus": bladePowerServiceResetStatus,
       "bladePowerServiceResetCmd": bladePowerServiceResetCmd,
       "smPowerServiceResetTable": smPowerServiceResetTable,
       "smPowerServiceResetEntry": smPowerServiceResetEntry,
       "smPowerServiceResetIndex": smPowerServiceResetIndex,
       "smPowerServiceResetSwitchId": smPowerServiceResetSwitchId,
       "smPowerServiceResetStatus": smPowerServiceResetStatus,
       "smPowerServiceResetCmd": smPowerServiceResetCmd,
       "componentServiceData": componentServiceData,
       "componentServiceDataTable": componentServiceDataTable,
       "componentServiceDataEntry": componentServiceDataEntry,
       "componentServiceDataTopologyPath": componentServiceDataTopologyPath,
       "componentServiceDataComponentName": componentServiceDataComponentName,
       "componentServiceDataDumpInitiate": componentServiceDataDumpInitiate,
       "componentServiceDataDumpRetrieve": componentServiceDataDumpRetrieve,
       "componentServiceDataDumpCapabilityMask": componentServiceDataDumpCapabilityMask,
       "componentServiceDataDumpInProgress": componentServiceDataDumpInProgress,
       "componentServiceDataStatus": componentServiceDataStatus,
       "componentServiceDataStatusDetails": componentServiceDataStatusDetails,
       "componentServiceDataTableCacheTimeout": componentServiceDataTableCacheTimeout,
       "downloadMMServiceData": downloadMMServiceData,
       "downloadMMServiceDataFileCreateAndDownload": downloadMMServiceDataFileCreateAndDownload,
       "downloadMMServiceDataStatus": downloadMMServiceDataStatus,
       "downloadMMServiceDataResult": downloadMMServiceDataResult,
       "downloadMMServiceDataCancelDownload": downloadMMServiceDataCancelDownload,
       "scaling": scaling,
       "scalableComplexTable": scalableComplexTable,
       "scalableComplexEntry": scalableComplexEntry,
       "scalableComplexTopologyPath": scalableComplexTopologyPath,
       "scalableComplexIdentifier": scalableComplexIdentifier,
       "scalableComplexNodeName": scalableComplexNodeName,
       "scalableComplexNodeHealthState": scalableComplexNodeHealthState,
       "scalableComplexNodePowerState": scalableComplexNodePowerState,
       "scalableComplexNodeResources": scalableComplexNodeResources}
)
