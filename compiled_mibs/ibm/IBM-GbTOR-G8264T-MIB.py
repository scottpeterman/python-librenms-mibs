# SNMP MIB module (IBM-GbTOR-G8264T-MIB) expressed in pysnmp data model.
#
# This Python module is designed to be imported and executed by the
# pysnmp library.
#
# See https://www.pysnmp.com/pysnmp for further information.
#
# Notes
# -----
# ASN.1 source file://mibs\ibm\IBM-GbTOR-G8264T-MIB
# Produced by pysmi-1.6.2 at Thu Oct  2 12:00:38 2025
# On host DESKTOP-ORUUBP9 platform Windows version 11 by user speterman
# Using Python version 3.12.8 (tags/v3.12.8:2dc476b, Dec  3 2024, 19:30:04) [MSC v.1942 64 bit (AMD64)]

if 'mibBuilder' not in globals():
    import sys

    sys.stderr.write(__doc__)
    sys.exit(1)

# Import base ASN.1 objects even if this MIB does not use it

(Integer,
 OctetString,
 ObjectIdentifier) = mibBuilder.importSymbols(
    "ASN1",
    "Integer",
    "OctetString",
    "ObjectIdentifier")

(NamedValues,) = mibBuilder.importSymbols(
    "ASN1-ENUMERATION",
    "NamedValues")
(ConstraintsIntersection,
 ConstraintsUnion,
 SingleValueConstraint,
 ValueRangeConstraint,
 ValueSizeConstraint) = mibBuilder.importSymbols(
    "ASN1-REFINEMENT",
    "ConstraintsIntersection",
    "ConstraintsUnion",
    "SingleValueConstraint",
    "ValueRangeConstraint",
    "ValueSizeConstraint")

# Import SMI symbols from the MIBs this MIB depends on

(BridgeId,
 dot1dBasePort,
 dot1dBasePortEntry,
 dot1dBridge,
 dot1dTp,
 dot1dTpPort) = mibBuilder.importSymbols(
    "BRIDGE-MIB",
    "BridgeId",
    "dot1dBasePort",
    "dot1dBasePortEntry",
    "dot1dBridge",
    "dot1dTp",
    "dot1dTpPort")

(InterfaceIndex,
 InterfaceIndexOrZero,
 ifIndex) = mibBuilder.importSymbols(
    "IF-MIB",
    "InterfaceIndex",
    "InterfaceIndexOrZero",
    "ifIndex")

(InetAddress,
 InetAddressIPv6,
 InetAddressType) = mibBuilder.importSymbols(
    "INET-ADDRESS-MIB",
    "InetAddress",
    "InetAddressIPv6",
    "InetAddressType")

(EnabledStatus,) = mibBuilder.importSymbols(
    "P-BRIDGE-MIB",
    "EnabledStatus")

(PortList,) = mibBuilder.importSymbols(
    "Q-BRIDGE-MIB",
    "PortList")

(SnmpAdminString,
 SnmpEngineID,
 SnmpMessageProcessingModel,
 SnmpSecurityLevel,
 SnmpSecurityModel) = mibBuilder.importSymbols(
    "SNMP-FRAMEWORK-MIB",
    "SnmpAdminString",
    "SnmpEngineID",
    "SnmpMessageProcessingModel",
    "SnmpSecurityLevel",
    "SnmpSecurityModel")

(usmNoAuthProtocol,
 usmNoPrivProtocol) = mibBuilder.importSymbols(
    "SNMP-USER-BASED-SM-MIB",
    "usmNoAuthProtocol",
    "usmNoPrivProtocol")

(ModuleCompliance,
 NotificationGroup,
 ObjectGroup) = mibBuilder.importSymbols(
    "SNMPv2-CONF",
    "ModuleCompliance",
    "NotificationGroup",
    "ObjectGroup")

(sysContact,
 sysLocation,
 sysName) = mibBuilder.importSymbols(
    "SNMPv2-MIB",
    "sysContact",
    "sysLocation",
    "sysName")

(Bits,
 Counter32,
 Counter64,
 Gauge32,
 Integer32,
 IpAddress,
 ModuleIdentity,
 MibIdentifier,
 NotificationType,
 ObjectIdentity,
 MibScalar,
 MibTable,
 MibTableRow,
 MibTableColumn,
 TimeTicks,
 Unsigned32,
 enterprises,
 iso,
 mib_2) = mibBuilder.importSymbols(
    "SNMPv2-SMI",
    "Bits",
    "Counter32",
    "Counter64",
    "Gauge32",
    "Integer32",
    "IpAddress",
    "ModuleIdentity",
    "MibIdentifier",
    "NotificationType",
    "ObjectIdentity",
    "MibScalar",
    "MibTable",
    "MibTableRow",
    "MibTableColumn",
    "TimeTicks",
    "Unsigned32",
    "enterprises",
    "iso",
    "mib-2")

(AutonomousType,
 DisplayString,
 MacAddress,
 PhysAddress,
 RowPointer,
 RowStatus,
 StorageType,
 TAddress,
 TDomain,
 TextualConvention,
 TimeInterval,
 TimeStamp,
 TruthValue) = mibBuilder.importSymbols(
    "SNMPv2-TC",
    "AutonomousType",
    "DisplayString",
    "MacAddress",
    "PhysAddress",
    "RowPointer",
    "RowStatus",
    "StorageType",
    "TAddress",
    "TDomain",
    "TextualConvention",
    "TimeInterval",
    "TimeStamp",
    "TruthValue")


# MODULE-IDENTITY

ibmGbTORG8264TMIB = ModuleIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 3)
)


# Types definitions


# TEXTUAL-CONVENTIONS



class PortNumber(TextualConvention, Unsigned32):
    status = "current"


class VlanId(TextualConvention, Integer32):
    status = "current"
    displayHint = "d"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )



class Timeout(TextualConvention, Integer32):
    status = "current"
    displayHint = "d4"


class IPsecKeyString(TextualConvention, OctetString):
    status = "current"
    displayHint = "1024a"
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 1024),
    )



# MIB Managed Objects in the order of their OIDs

_Ibmnetwork_ObjectIdentity = ObjectIdentity
ibmnetwork = _Ibmnetwork_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301)
)
_Registration_ObjectIdentity = ObjectIdentity
registration = _Registration_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 1)
)
_Ibm_switch_ObjectIdentity = ObjectIdentity
ibm_switch = _Ibm_switch_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 1, 7)
)
_G8264T_ObjectIdentity = ObjectIdentity
g8264T = _G8264T_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 1, 7, 13)
)
_Private_mibs_ObjectIdentity = ObjectIdentity
private_mibs = _Private_mibs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2)
)
_Ibm_switch_mgmt_ObjectIdentity = ObjectIdentity
ibm_switch_mgmt = _Ibm_switch_mgmt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7)
)
_G8264T_mgmt_ObjectIdentity = ObjectIdentity
g8264T_mgmt = _G8264T_mgmt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13)
)
_Agent_ObjectIdentity = ObjectIdentity
agent = _Agent_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1)
)
_AgentConfig_ObjectIdentity = ObjectIdentity
agentConfig = _AgentConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1)
)
_AgSystem_ObjectIdentity = ObjectIdentity
agSystem = _AgSystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1)
)


class _AgApplyConfiguration_Type(Integer32):
    """Custom type agApplyConfiguration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("apply", 2))
    )


_AgApplyConfiguration_Type.__name__ = "Integer32"
_AgApplyConfiguration_Object = MibScalar
agApplyConfiguration = _AgApplyConfiguration_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 2),
    _AgApplyConfiguration_Type()
)
agApplyConfiguration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agApplyConfiguration.setStatus("current")


class _AgSavePending_Type(Integer32):
    """Custom type agSavePending based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("saveNeeded", 1),
          ("noSaveNeeded", 2))
    )


_AgSavePending_Type.__name__ = "Integer32"
_AgSavePending_Object = MibScalar
agSavePending = _AgSavePending_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 3),
    _AgSavePending_Type()
)
agSavePending.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agSavePending.setStatus("current")


class _AgSaveConfiguration_Type(Integer32):
    """Custom type agSaveConfiguration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("saveActive", 2),
          ("notSaveActive", 3))
    )


_AgSaveConfiguration_Type.__name__ = "Integer32"
_AgSaveConfiguration_Object = MibScalar
agSaveConfiguration = _AgSaveConfiguration_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 4),
    _AgSaveConfiguration_Type()
)
agSaveConfiguration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agSaveConfiguration.setStatus("current")


class _AgRevert_Type(Integer32):
    """Custom type agRevert based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("revert", 2))
    )


_AgRevert_Type.__name__ = "Integer32"
_AgRevert_Object = MibScalar
agRevert = _AgRevert_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 5),
    _AgRevert_Type()
)
agRevert.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agRevert.setStatus("current")


class _AgReset_Type(Integer32):
    """Custom type agReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("reset", 2))
    )


_AgReset_Type.__name__ = "Integer32"
_AgReset_Object = MibScalar
agReset = _AgReset_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 7),
    _AgReset_Type()
)
agReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agReset.setStatus("current")


class _AgConfigForNxtReset_Type(Integer32):
    """Custom type agConfigForNxtReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("active", 2),
          ("backup", 3),
          ("default", 4))
    )


_AgConfigForNxtReset_Type.__name__ = "Integer32"
_AgConfigForNxtReset_Object = MibScalar
agConfigForNxtReset = _AgConfigForNxtReset_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 8),
    _AgConfigForNxtReset_Type()
)
agConfigForNxtReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agConfigForNxtReset.setStatus("current")


class _AgImageForNxtReset_Type(Integer32):
    """Custom type agImageForNxtReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("image1", 2),
          ("image2", 3))
    )


_AgImageForNxtReset_Type.__name__ = "Integer32"
_AgImageForNxtReset_Object = MibScalar
agImageForNxtReset = _AgImageForNxtReset_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 9),
    _AgImageForNxtReset_Type()
)
agImageForNxtReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agImageForNxtReset.setStatus("current")


class _AgSoftwareVersion_Type(DisplayString):
    """Custom type agSoftwareVersion based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_AgSoftwareVersion_Type.__name__ = "DisplayString"
_AgSoftwareVersion_Object = MibScalar
agSoftwareVersion = _AgSoftwareVersion_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 10),
    _AgSoftwareVersion_Type()
)
agSoftwareVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agSoftwareVersion.setStatus("current")


class _AgBootVer_Type(DisplayString):
    """Custom type agBootVer based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_AgBootVer_Type.__name__ = "DisplayString"
_AgBootVer_Object = MibScalar
agBootVer = _AgBootVer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 11),
    _AgBootVer_Type()
)
agBootVer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agBootVer.setStatus("current")


class _AgImage1Ver_Type(DisplayString):
    """Custom type agImage1Ver based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_AgImage1Ver_Type.__name__ = "DisplayString"
_AgImage1Ver_Object = MibScalar
agImage1Ver = _AgImage1Ver_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 12),
    _AgImage1Ver_Type()
)
agImage1Ver.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agImage1Ver.setStatus("current")


class _AgImage2Ver_Type(DisplayString):
    """Custom type agImage2Ver based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_AgImage2Ver_Type.__name__ = "DisplayString"
_AgImage2Ver_Object = MibScalar
agImage2Ver = _AgImage2Ver_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 13),
    _AgImage2Ver_Type()
)
agImage2Ver.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agImage2Ver.setStatus("current")


class _AgRtcDate_Type(DisplayString):
    """Custom type agRtcDate based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_AgRtcDate_Type.__name__ = "DisplayString"
_AgRtcDate_Object = MibScalar
agRtcDate = _AgRtcDate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 14),
    _AgRtcDate_Type()
)
agRtcDate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agRtcDate.setStatus("current")


class _AgRtcTime_Type(DisplayString):
    """Custom type agRtcTime based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_AgRtcTime_Type.__name__ = "DisplayString"
_AgRtcTime_Object = MibScalar
agRtcTime = _AgRtcTime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 15),
    _AgRtcTime_Type()
)
agRtcTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agRtcTime.setStatus("current")


class _AgLastSetErrorReason_Type(DisplayString):
    """Custom type agLastSetErrorReason based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_AgLastSetErrorReason_Type.__name__ = "DisplayString"
_AgLastSetErrorReason_Object = MibScalar
agLastSetErrorReason = _AgLastSetErrorReason_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 16),
    _AgLastSetErrorReason_Type()
)
agLastSetErrorReason.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agLastSetErrorReason.setStatus("current")


class _AgCurCfgHttpServerPort_Type(Integer32):
    """Custom type agCurCfgHttpServerPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_AgCurCfgHttpServerPort_Type.__name__ = "Integer32"
_AgCurCfgHttpServerPort_Object = MibScalar
agCurCfgHttpServerPort = _AgCurCfgHttpServerPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 17),
    _AgCurCfgHttpServerPort_Type()
)
agCurCfgHttpServerPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgHttpServerPort.setStatus("current")


class _AgNewCfgHttpServerPort_Type(Integer32):
    """Custom type agNewCfgHttpServerPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_AgNewCfgHttpServerPort_Type.__name__ = "Integer32"
_AgNewCfgHttpServerPort_Object = MibScalar
agNewCfgHttpServerPort = _AgNewCfgHttpServerPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 18),
    _AgNewCfgHttpServerPort_Type()
)
agNewCfgHttpServerPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgHttpServerPort.setStatus("current")


class _AgCurCfgLoginBanner_Type(DisplayString):
    """Custom type agCurCfgLoginBanner based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 80),
    )


_AgCurCfgLoginBanner_Type.__name__ = "DisplayString"
_AgCurCfgLoginBanner_Object = MibScalar
agCurCfgLoginBanner = _AgCurCfgLoginBanner_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 19),
    _AgCurCfgLoginBanner_Type()
)
agCurCfgLoginBanner.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgLoginBanner.setStatus("current")


class _AgNewCfgLoginBanner_Type(DisplayString):
    """Custom type agNewCfgLoginBanner based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 80),
    )


_AgNewCfgLoginBanner_Type.__name__ = "DisplayString"
_AgNewCfgLoginBanner_Object = MibScalar
agNewCfgLoginBanner = _AgNewCfgLoginBanner_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 20),
    _AgNewCfgLoginBanner_Type()
)
agNewCfgLoginBanner.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgLoginBanner.setStatus("current")


class _AgCurCfgConsole_Type(Integer32):
    """Custom type agCurCfgConsole based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgConsole_Type.__name__ = "Integer32"
_AgCurCfgConsole_Object = MibScalar
agCurCfgConsole = _AgCurCfgConsole_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 23),
    _AgCurCfgConsole_Type()
)
agCurCfgConsole.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgConsole.setStatus("current")


class _AgNewCfgConsole_Type(Integer32):
    """Custom type agNewCfgConsole based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgConsole_Type.__name__ = "Integer32"
_AgNewCfgConsole_Object = MibScalar
agNewCfgConsole = _AgNewCfgConsole_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 24),
    _AgNewCfgConsole_Type()
)
agNewCfgConsole.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgConsole.setStatus("current")


class _AgCurCfgBootp_Type(Integer32):
    """Custom type agCurCfgBootp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_AgCurCfgBootp_Type.__name__ = "Integer32"
_AgCurCfgBootp_Object = MibScalar
agCurCfgBootp = _AgCurCfgBootp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 29),
    _AgCurCfgBootp_Type()
)
agCurCfgBootp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgBootp.setStatus("current")


class _AgNewCfgBootp_Type(Integer32):
    """Custom type agNewCfgBootp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_AgNewCfgBootp_Type.__name__ = "Integer32"
_AgNewCfgBootp_Object = MibScalar
agNewCfgBootp = _AgNewCfgBootp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 30),
    _AgNewCfgBootp_Type()
)
agNewCfgBootp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgBootp.setStatus("current")


class _AgSlotNumber_Type(Integer32):
    """Custom type agSlotNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_AgSlotNumber_Type.__name__ = "Integer32"
_AgSlotNumber_Object = MibScalar
agSlotNumber = _AgSlotNumber_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 31),
    _AgSlotNumber_Type()
)
agSlotNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agSlotNumber.setStatus("current")


class _AgCurCfgSnmpTimeout_Type(Integer32):
    """Custom type agCurCfgSnmpTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 30),
    )


_AgCurCfgSnmpTimeout_Type.__name__ = "Integer32"
_AgCurCfgSnmpTimeout_Object = MibScalar
agCurCfgSnmpTimeout = _AgCurCfgSnmpTimeout_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 32),
    _AgCurCfgSnmpTimeout_Type()
)
agCurCfgSnmpTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSnmpTimeout.setStatus("current")


class _AgNewCfgSnmpTimeout_Type(Integer32):
    """Custom type agNewCfgSnmpTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 30),
    )


_AgNewCfgSnmpTimeout_Type.__name__ = "Integer32"
_AgNewCfgSnmpTimeout_Object = MibScalar
agNewCfgSnmpTimeout = _AgNewCfgSnmpTimeout_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 33),
    _AgNewCfgSnmpTimeout_Type()
)
agNewCfgSnmpTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSnmpTimeout.setStatus("current")


class _AgCurCfgTelnetServerPort_Type(Integer32):
    """Custom type agCurCfgTelnetServerPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_AgCurCfgTelnetServerPort_Type.__name__ = "Integer32"
_AgCurCfgTelnetServerPort_Object = MibScalar
agCurCfgTelnetServerPort = _AgCurCfgTelnetServerPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 34),
    _AgCurCfgTelnetServerPort_Type()
)
agCurCfgTelnetServerPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgTelnetServerPort.setStatus("current")


class _AgNewCfgTelnetServerPort_Type(Integer32):
    """Custom type agNewCfgTelnetServerPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_AgNewCfgTelnetServerPort_Type.__name__ = "Integer32"
_AgNewCfgTelnetServerPort_Object = MibScalar
agNewCfgTelnetServerPort = _AgNewCfgTelnetServerPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 35),
    _AgNewCfgTelnetServerPort_Type()
)
agNewCfgTelnetServerPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgTelnetServerPort.setStatus("current")


class _AgClearFlashDump_Type(Integer32):
    """Custom type agClearFlashDump based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_AgClearFlashDump_Type.__name__ = "Integer32"
_AgClearFlashDump_Object = MibScalar
agClearFlashDump = _AgClearFlashDump_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 36),
    _AgClearFlashDump_Type()
)
agClearFlashDump.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agClearFlashDump.setStatus("current")
_AgCurCfgTrapSrcIf_Type = Integer32
_AgCurCfgTrapSrcIf_Object = MibScalar
agCurCfgTrapSrcIf = _AgCurCfgTrapSrcIf_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 39),
    _AgCurCfgTrapSrcIf_Type()
)
agCurCfgTrapSrcIf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgTrapSrcIf.setStatus("current")
_AgNewCfgTrapSrcIf_Type = Integer32
_AgNewCfgTrapSrcIf_Object = MibScalar
agNewCfgTrapSrcIf = _AgNewCfgTrapSrcIf_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 40),
    _AgNewCfgTrapSrcIf_Type()
)
agNewCfgTrapSrcIf.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgTrapSrcIf.setStatus("current")


class _AgCurCfgHttpsServerPort_Type(Integer32):
    """Custom type agCurCfgHttpsServerPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_AgCurCfgHttpsServerPort_Type.__name__ = "Integer32"
_AgCurCfgHttpsServerPort_Object = MibScalar
agCurCfgHttpsServerPort = _AgCurCfgHttpsServerPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 49),
    _AgCurCfgHttpsServerPort_Type()
)
agCurCfgHttpsServerPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgHttpsServerPort.setStatus("current")


class _AgNewCfgHttpsServerPort_Type(Integer32):
    """Custom type agNewCfgHttpsServerPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_AgNewCfgHttpsServerPort_Type.__name__ = "Integer32"
_AgNewCfgHttpsServerPort_Object = MibScalar
agNewCfgHttpsServerPort = _AgNewCfgHttpsServerPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 50),
    _AgNewCfgHttpsServerPort_Type()
)
agNewCfgHttpsServerPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgHttpsServerPort.setStatus("current")


class _AgCurCfgTftpServerPort_Type(Integer32):
    """Custom type agCurCfgTftpServerPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_AgCurCfgTftpServerPort_Type.__name__ = "Integer32"
_AgCurCfgTftpServerPort_Object = MibScalar
agCurCfgTftpServerPort = _AgCurCfgTftpServerPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 51),
    _AgCurCfgTftpServerPort_Type()
)
agCurCfgTftpServerPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgTftpServerPort.setStatus("current")


class _AgNewCfgTftpServerPort_Type(Integer32):
    """Custom type agNewCfgTftpServerPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_AgNewCfgTftpServerPort_Type.__name__ = "Integer32"
_AgNewCfgTftpServerPort_Object = MibScalar
agNewCfgTftpServerPort = _AgNewCfgTftpServerPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 52),
    _AgNewCfgTftpServerPort_Type()
)
agNewCfgTftpServerPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgTftpServerPort.setStatus("current")


class _AgRackId_Type(DisplayString):
    """Custom type agRackId based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 127),
    )


_AgRackId_Type.__name__ = "DisplayString"
_AgRackId_Object = MibScalar
agRackId = _AgRackId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 53),
    _AgRackId_Type()
)
agRackId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agRackId.setStatus("current")


class _AgChassis_Type(DisplayString):
    """Custom type agChassis based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 127),
    )


_AgChassis_Type.__name__ = "DisplayString"
_AgChassis_Object = MibScalar
agChassis = _AgChassis_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 54),
    _AgChassis_Type()
)
agChassis.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agChassis.setStatus("current")


class _AgCurTimeZone_Type(Integer32):
    """Custom type agCurTimeZone based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              48,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              58,
              59,
              60,
              61,
              62,
              63,
              64,
              65,
              66,
              67,
              68,
              69,
              70,
              71,
              72,
              73,
              74,
              75,
              76,
              77,
              78,
              79,
              80,
              81,
              82,
              83,
              84,
              85,
              86,
              87,
              88,
              89,
              90,
              91,
              92,
              93,
              94,
              95,
              96,
              97,
              98,
              99,
              100,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118,
              119,
              120,
              121,
              122,
              123,
              124,
              125,
              126,
              127,
              128,
              129,
              130,
              131,
              132,
              133,
              134,
              135,
              136,
              137,
              138,
              139,
              140,
              141,
              142,
              143,
              144,
              145,
              146,
              147,
              148,
              149,
              150,
              151,
              152,
              153,
              154,
              155,
              156,
              157,
              158,
              159,
              160,
              161,
              162,
              163,
              164,
              165,
              166,
              167,
              168,
              169,
              170,
              171,
              172,
              173,
              174,
              175,
              176,
              177,
              178,
              179,
              180,
              181,
              182,
              183,
              184,
              185,
              186,
              187,
              188,
              189,
              190,
              191,
              192,
              193,
              194,
              195,
              196,
              197,
              198,
              199,
              200,
              201,
              202,
              203,
              204,
              205,
              206,
              207,
              208,
              209,
              210,
              211,
              212,
              213,
              214,
              215,
              216,
              217,
              218,
              219,
              220,
              221,
              222,
              223,
              224,
              225,
              226,
              227,
              228,
              229,
              230,
              231,
              232,
              233,
              234,
              235,
              236,
              237,
              238,
              239,
              240,
              241,
              242,
              243,
              244,
              245,
              246,
              247,
              248,
              249,
              250,
              251,
              252,
              253,
              254,
              255,
              256,
              257,
              258,
              259,
              260,
              261,
              262,
              263,
              264,
              265,
              266,
              267,
              268,
              269,
              270,
              271,
              272,
              273,
              274,
              275,
              276,
              277,
              278,
              279,
              280,
              281,
              282,
              283,
              284,
              285,
              286,
              287,
              288,
              289,
              290,
              291,
              292,
              293,
              294,
              295,
              296,
              297,
              298,
              299,
              300,
              301,
              302,
              303,
              304,
              305,
              306,
              307,
              308,
              309,
              310,
              311,
              312,
              313,
              314,
              315,
              316,
              317,
              318,
              319,
              320,
              321,
              322,
              323,
              324,
              325,
              326,
              327,
              328,
              329,
              330,
              331,
              332,
              333,
              334,
              335,
              336,
              337,
              338,
              339,
              340,
              341,
              342,
              343,
              344,
              345,
              346,
              347,
              348,
              349,
              350,
              351,
              352,
              353,
              354,
              355,
              356,
              357,
              358,
              359,
              360,
              361,
              362,
              363,
              364,
              365,
              366,
              367,
              368,
              369,
              370,
              371,
              372,
              373,
              374,
              375,
              376,
              377,
              378,
              379,
              380,
              381,
              382,
              383,
              384,
              385,
              386,
              387,
              388,
              389,
              390,
              391,
              392,
              393,
              394,
              395,
              396,
              397,
              398,
              399,
              400,
              401,
              402,
              403,
              404,
              405,
              406,
              407,
              408,
              409,
              410,
              411,
              412,
              413,
              414,
              415,
              416,
              417,
              418,
              419,
              420,
              421)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("africa-Algeria", 1),
          ("africa-Angola", 2),
          ("africa-Benin", 3),
          ("africa-Botswana", 4),
          ("africa-Burkina-Faso", 5),
          ("africa-Burundi", 6),
          ("africa-Cameroon", 7),
          ("africa-Central-African-Rep", 8),
          ("africa-Chad", 9),
          ("africa-Congo-WestDemRepCongo", 10),
          ("africa-Congo-EastDemRepCongo", 11),
          ("africa-Congo-Rep", 12),
          ("africa-Cote-dIvoire", 13),
          ("africa-Djibouti", 14),
          ("africa-Egypt", 15),
          ("africa-Equatorial-Guinea", 16),
          ("africa-Eritrea", 17),
          ("africa-Ethiopia", 18),
          ("africa-Gabon", 19),
          ("africa-Gambia", 20),
          ("africa-Ghana", 21),
          ("africa-Guinea", 22),
          ("africa-Guinea-Bissau", 23),
          ("africa-Kenya", 24),
          ("africa-Lesotho", 25),
          ("africa-Liberia", 26),
          ("africa-Libya", 27),
          ("africa-Malawi", 28),
          ("africa-Mali-SouthWestMali", 29),
          ("africa-Mali-NorthEastMali", 30),
          ("africa-Mauritania", 31),
          ("africa-Morocco", 32),
          ("africa-Mozambique", 33),
          ("africa-Namibia", 34),
          ("africa-Niger", 35),
          ("africa-Nigeria", 36),
          ("africa-Rwanda", 37),
          ("africa-SaoTome-And-Principe", 38),
          ("africa-Senegal", 39),
          ("africa-SierraLeone", 40),
          ("africa-Somalia", 41),
          ("africa-SouthAfrica", 42),
          ("africa-Spain-Mainland", 43),
          ("africa-Spain-CeutaMelilla", 44),
          ("africa-Spain-CanaryIslands", 45),
          ("africa-Sudan", 46),
          ("africa-Swaziland", 47),
          ("africa-Tanzania", 48),
          ("africa-Togo", 49),
          ("africa-Tunisia", 50),
          ("africa-Uganda", 51),
          ("africa-Western-Sahara", 52),
          ("africa-Zambia", 53),
          ("africa-Zimbabwe", 54),
          ("americas-Anguilla", 55),
          ("americas-Antigua-Barbuda", 56),
          ("americas-Argentina-EArgentina", 57),
          ("americas-Argentina-MostLocations", 58),
          ("americas-Argentina-Jujuy", 59),
          ("americas-Argentina-Catamarca", 60),
          ("americas-Argentina-Mendoza", 61),
          ("americas-Aruba", 62),
          ("americas-Bahamas", 63),
          ("americas-Barbados", 64),
          ("americas-Belize", 65),
          ("americas-Bolivia", 66),
          ("americas-Brazil-AtlanticIslands", 67),
          ("americas-Brazil-AmapaEPara", 68),
          ("americas-Brazil-NEBrazil", 69),
          ("americas-Brazil-Pernambuco", 70),
          ("americas-Brazil-Tocantins", 71),
          ("americas-Brazil-AlagoasSergipe", 72),
          ("americas-Brazil-SSEBrazil", 73),
          ("americas-Brazil-MatoGrossoDoSul", 74),
          ("americas-Brazil-WParaRondonia", 75),
          ("americas-Brazil-Roraima", 76),
          ("americas-Brazil-EAmazonas", 77),
          ("americas-Brazil-WAmazonas", 78),
          ("americas-Brazil-Acre", 79),
          ("americas-Canada-NewfoundlandIsland", 80),
          ("americas-Canada-AtlanTime-NovaScotia", 81),
          ("americas-Canada-AtlanTime-ELabrador", 82),
          ("americas-Canada-EastTime-OntarioMostlocation", 83),
          ("americas-Canada-EastTime-ThunderBay", 84),
          ("americas-Canada-EastStdTime-PangnirtungNunavut", 85),
          ("americas-Canada-EastStdTime-EastNunavut", 86),
          ("americas-Canada-EastStdTime-CenNunavut", 87),
          ("americas-Canada-CenTime-ManitobaWestOntario", 88),
          ("americas-Canada-CenTime-RainyRiver", 89),
          ("americas-Canada-CenTime-WestNunavut", 90),
          ("americas-Canada-CenStdTime-SaskatchewanMostlocation", 91),
          ("americas-Canada-CenStdTime-SaskatchewanMidwest", 92),
          ("americas-Canada-MountTime-AlbertaEastBritishColumbia", 93),
          ("americas-Canada-MountTime-CentralNorthwestTerritories", 94),
          ("americas-Canada-MountTime-WestNorthwestTerritories", 95),
          ("americas-Canada-MountStdTime-DawsonCrkStJohnBritColumbia", 96),
          ("americas-Canada-PacificTime-WestBritishColumbia", 97),
          ("americas-Canada-PacificTime-SouthYukon", 98),
          ("americas-Canada-PacificTime-NorthYukon", 99),
          ("americas-CaymanIslands", 100),
          ("americas-Chile-MostLocation", 101),
          ("americas-Chile-EasterIsland", 102),
          ("americas-Colombia", 103),
          ("americas-CostaRica", 104),
          ("americas-Cuba", 105),
          ("americas-Dominica", 106),
          ("americas-DominicanRepublic", 107),
          ("americas-Ecuador", 108),
          ("americas-ElSalvado", 109),
          ("americas-FrenchGuiana", 110),
          ("americas-Greenland-MostLocation", 111),
          ("americas-Greenland-EastCoastNorthScoresbysund", 112),
          ("americas-Greenland-ScoresbysundIttoqqortoormiit", 113),
          ("americas-Greenland-ThulePituffik", 114),
          ("americas-Grenada", 115),
          ("americas-Guadeloupe", 116),
          ("americas-Guatemala", 117),
          ("americas-Guyana", 118),
          ("americas-Haiti", 119),
          ("americas-Honduras", 120),
          ("americas-Jamaica", 121),
          ("americas-Martinique", 122),
          ("americas-Mexico-CentTime-Mostlocations", 123),
          ("americas-Mexico-CentTime-QuintanaRoo", 124),
          ("americas-Mexico-CentTime-CampecheYucatan", 125),
          ("americas-Mexico-CentTime-CoahuilaDurNuevoLeonTam", 126),
          ("americas-Mexico-MountTime-SBajaNayaritSinaloa", 127),
          ("americas-Mexico-MountTime-Chihuahua", 128),
          ("americas-Mexico-MountStdTime-Sonora", 129),
          ("americas-Mexico-PacificTime", 130),
          ("americas-Montserrat", 131),
          ("americas-NetherlandsAntilles", 132),
          ("americas-Nicaragua", 133),
          ("americas-Panama", 134),
          ("americas-Paraguay", 135),
          ("americas-Peru", 136),
          ("americas-PuertoRico", 137),
          ("americas-StKittsAndNevis", 138),
          ("americas-StLucia", 139),
          ("americas-StPierreAndMiquelon", 140),
          ("americas-StVincent", 141),
          ("americas-Suriname", 142),
          ("americas-TrinidadAndTobago", 143),
          ("americas-TurksAndCaicosIs", 144),
          ("americas-USA-EastTime", 145),
          ("americas-USA-EastTime-MichiganMostLocation", 146),
          ("americas-USA-EastTime-KentuckyLouisvilleArea", 147),
          ("americas-USA-EastTime-KentuckyWayneCounty", 148),
          ("americas-USA-EastStdTime-IndianaMostLocations", 149),
          ("americas-USA-EastStdTime-IndianaCrawfordCounty", 150),
          ("americas-USA-EastStdTime-IndianaStarkeCounty", 151),
          ("americas-USA-EastStdTime-IndianaSwitzerlandCounty", 152),
          ("americas-USA-CentTime", 153),
          ("americas-USA-CentTime-MichiganWisconsinborder", 154),
          ("americas-USA-CentTime-NorthDakotaOliverCounty", 155),
          ("americas-USA-MountTime", 156),
          ("americas-USA-MountTime-SouthIdahoAndEastOregon", 157),
          ("americas-USA-MountTime-Navajo", 158),
          ("americas-USA-MountStdTime-Arizona", 159),
          ("americas-USA-PacificTime", 160),
          ("americas-USA-AlaskaTime", 161),
          ("americas-USA-AlaskaTime-AlaskaPanhandle", 162),
          ("americas-USA-AlaskaTime-AlaskaPanhandleNeck", 163),
          ("americas-USA-AlaskaTime-WestAlaska", 164),
          ("americas-USA-AleutianIslands", 165),
          ("americas-USA-Hawaii", 166),
          ("americas-Uruguay", 167),
          ("americas-Venezuela", 168),
          ("americas-VirginIslands-UK", 169),
          ("americas-VirginIslands-US", 170),
          ("antarctica-McMurdoStationRossIsland", 171),
          ("antarctica-Amundsen-ScottStationSouthPole", 172),
          ("antarctica-PalmerStationAnversIsland", 173),
          ("antarctica-MawsonStationHolmeBay", 174),
          ("antarctica-DavisStationVestfoldHills", 175),
          ("antarctica-CaseyStationBaileyPeninsula", 176),
          ("antarctica-VostokStationSMagneticPole", 177),
          ("antarctica-Dumont-dUrvilleBaseTerreAdelie", 178),
          ("antarctica-SyowaStationEOngulI", 179),
          ("arcticOcean-Svalbard", 180),
          ("arcticOcean-JanMayen", 181),
          ("asia-Afghanistan", 182),
          ("asia-Armenia", 183),
          ("asia-Azerbaijan", 184),
          ("asia-Bahrain", 185),
          ("asia-Bangladesh", 186),
          ("asia-Bhutan", 187),
          ("asia-Brunei", 188),
          ("asia-Cambodia", 189),
          ("asia-China-EastChinaBeijingGuangdongShanghai", 190),
          ("asia-China-Heilongjiang", 191),
          ("asia-China-CentralChinaGansuGuizhouSichuanYunnan", 192),
          ("asia-China-TibetmostofXinjiangUyghur", 193),
          ("asia-China-SouthwestXinjiangUyghur", 194),
          ("asia-Cyprus", 195),
          ("asia-EastTimor", 196),
          ("asia-Georgia", 197),
          ("asia-HongKong", 198),
          ("asia-India", 199),
          ("asia-Indonesia-JavaAndSumatra", 200),
          ("asia-Indonesia-WestCentralBorneo", 201),
          ("asia-Indonesia-ESBorneoCelebesBaliNusaTengaWTimor", 202),
          ("asia-Indonesia-IrianJayaAndMoluccas", 203),
          ("asia-Iran", 204),
          ("asia-Iraq", 205),
          ("asia-Israel", 206),
          ("asia-Japan", 207),
          ("asia-Jordan", 208),
          ("asia-Kazakhstan-MostLocations", 209),
          ("asia-Kazakhstan-QyzylordaKyzylorda", 210),
          ("asia-Kazakhstan-Aqtobe", 211),
          ("asia-Kazakhstan-AtyrauMangghystau", 212),
          ("asia-Kazakhstan-WestKazakhstan", 213),
          ("asia-Korea-North", 214),
          ("asia-Korea-South", 215),
          ("asia-Kuwait", 216),
          ("asia-Kyrgyzstan", 217),
          ("asia-Laos", 218),
          ("asia-Lebanon", 219),
          ("asia-Macau", 220),
          ("asia-Malaysia-PeninsularMalaysia", 221),
          ("asia-Malaysia-SabahSarawak", 222),
          ("asia-Mongolia-MostLocations", 223),
          ("asia-Mongolia-BayanOlgiyGoviAltaiHovdUvsZavkhan", 224),
          ("asia-Mongolia-DornodSukhbaatar", 225),
          ("asia-Myanmar", 226),
          ("asia-Nepal", 227),
          ("asia-Oman", 228),
          ("asia-Pakistan", 229),
          ("asia-Palestine", 230),
          ("asia-Philippines", 231),
          ("asia-Qatar", 232),
          ("asia-Russia-Moscow-01Kaliningrad", 233),
          ("asia-Russia-Moscow00WestRussia", 234),
          ("asia-Russia-Moscow01CaspianSea", 235),
          ("asia-Russia-Moscow02Urals", 236),
          ("asia-Russia-Moscow03WestSiberia", 237),
          ("asia-Russia-Moscow03Novosibirsk", 238),
          ("asia-Russia-Moscow04YeniseiRiver", 239),
          ("asia-Russia-Moscow05LakeBaikal", 240),
          ("asia-Russia-Moscow06LenaRiver", 241),
          ("asia-Russia-Moscow07AmurRiver", 242),
          ("asia-Russia-Moscow07SakhalinIsland", 243),
          ("asia-Russia-Moscow08Magadan", 244),
          ("asia-Russia-Moscow09Kamchatka", 245),
          ("asia-Russia-Moscow10BeringSea", 246),
          ("asia-SaudiArabia", 247),
          ("asia-Singapore", 248),
          ("asia-SriLanka", 249),
          ("asia-Syria", 250),
          ("asia-Taiwan", 251),
          ("asia-Tajikistan", 252),
          ("asia-Thailand", 253),
          ("asia-Turkmenistan", 254),
          ("asia-UnitedArabEmirates", 255),
          ("asia-Uzbekistan-WestUzbekistan", 256),
          ("asia-Uzbekistan-EastUzbekistan", 257),
          ("asia-Vietnam", 258),
          ("asia-Yemen", 259),
          ("atlanticOcean-Bermuda", 260),
          ("atlanticOcean-CapeVerde", 261),
          ("atlanticOcean-FaeroeIslands", 262),
          ("atlanticOcean-FalklandIslands", 263),
          ("atlanticOcean-Iceland", 264),
          ("atlanticOcean-Portugal-Mainland", 265),
          ("atlanticOcean-Portugal-MadeiraIslands", 266),
          ("atlanticOcean-Portugal-Azores", 267),
          ("atlanticOcean-SouthGeorgia-SouthSandwichIslands", 268),
          ("atlanticOcean-Spain-Mainland", 269),
          ("atlanticOcean-Spain-CeutaMelilla", 270),
          ("atlanticOcean-Spain-CanaryIslands", 271),
          ("atlanticOcean-StHelena", 272),
          ("atlanticOcean-Svalbard-JanMayen", 273),
          ("australia-LordHoweIsland", 274),
          ("australia-Tasmania", 275),
          ("australia-Victoria", 276),
          ("australia-NewSouthWales-MostLocations", 277),
          ("australia-NewSouthWales-Yancowinna", 278),
          ("australia-Queensland-MostLocations", 279),
          ("australia-Queensland-HolidayIslands", 280),
          ("australia-SouthAustralia", 281),
          ("australia-NorthernTerritory", 282),
          ("australia-WesternAustralia", 283),
          ("europe-Albania", 284),
          ("europe-Andorra", 285),
          ("europe-Austria", 286),
          ("europe-Belarus", 287),
          ("europe-Belgium", 288),
          ("europe-BosniaHerzegovina", 289),
          ("europe-Britain-UKGreatBritain", 290),
          ("europe-Britain-UKNorthernIreland", 291),
          ("europe-Bulgaria", 292),
          ("europe-Croatia", 293),
          ("europe-CzechRepublic", 294),
          ("europe-Denmark", 295),
          ("europe-Estonia", 296),
          ("europe-Finland", 297),
          ("europe-France", 298),
          ("europe-Germany", 299),
          ("europe-Gibraltar", 300),
          ("europe-Greece", 301),
          ("europe-Hungary", 302),
          ("europe-Ireland", 303),
          ("europe-Italy", 304),
          ("europe-Latvia", 305),
          ("europe-Liechtenstein", 306),
          ("europe-Lithuania", 307),
          ("europe-Luxembourg", 308),
          ("europe-Macedonia", 309),
          ("europe-Malta", 310),
          ("europe-Moldova", 311),
          ("europe-Monaco", 312),
          ("europe-Netherlands", 313),
          ("europe-Norway", 314),
          ("europe-Poland", 315),
          ("europe-Portugal-Mainland", 316),
          ("europe-Portugal-MadeiraIslands", 317),
          ("europe-Portugal-Azores", 318),
          ("europe-Romania", 319),
          ("europe-Russia-Moscow-01Kaliningrad", 320),
          ("europe-Russia-Moscow00WestRussia", 321),
          ("europe-Russia-Moscow01CaspianSea", 322),
          ("europe-Russia-Moscow02Urals", 323),
          ("europe-Russia-Moscow03WestSiberia", 324),
          ("europe-Russia-Moscow03Novosibirsk", 325),
          ("europe-Russia-Moscow04YeniseiRiver", 326),
          ("europe-Russia-Moscow05LakeBaikal", 327),
          ("europe-Russia-Moscow06LenaRiver", 328),
          ("europe-Russia-Moscow07AmurRiver", 329),
          ("europe-Russia-Moscow07SakhalinIsland", 330),
          ("europe-Russia-Moscow08Magadan", 331),
          ("europe-Russia-Moscow09Kamchatka", 332),
          ("europe-Russia-Moscow10BeringSea", 333),
          ("europe-SanMarino", 334),
          ("europe-Slovakia", 335),
          ("europe-Slovenia", 336),
          ("europe-Spain-Mainland", 337),
          ("europe-Spain-CeutaAndMelilla", 338),
          ("europe-Spain-CanaryIslands", 339),
          ("europe-Sweden", 340),
          ("europe-Switzerland", 341),
          ("europe-Turkey", 342),
          ("europe-Ukraine-MostLocations", 343),
          ("europe-Ukraine-Ruthenia", 344),
          ("europe-Ukraine-Zaporozhye-ELugansk", 345),
          ("europe-Ukraine-CentralCrimea", 346),
          ("europe-VaticanCity", 347),
          ("europe-Serbia", 348),
          ("indianOcean-BritishIndianOceanTerritory", 349),
          ("indianOcean-ChristmasIsland", 350),
          ("indianOcean-CocosOrKeelingIslands", 351),
          ("indianOcean-Comoros", 352),
          ("indianOcean-FrenchSouthernAndAntarcticLands", 353),
          ("indianOcean-Madagascar", 354),
          ("indianOcean-Maldives", 355),
          ("indianOcean-Mauritius", 356),
          ("indianOcean-Mayotte", 357),
          ("indianOcean-Reunion", 358),
          ("indianOcean-Seychelles", 359),
          ("pacificOcean-Chile-MostLocations", 360),
          ("pacificOcean-Chile-EasterIslandSalayGomez", 361),
          ("pacificOcean-CookIslands", 362),
          ("pacificOcean-Ecuador", 363),
          ("pacificOcean-Fiji", 364),
          ("pacificOcean-FrenchPolynesia-SocietyIslands", 365),
          ("pacificOcean-FrenchPolynesia-MarquesasIslands", 366),
          ("pacificOcean-FrenchPolynesia-GambierIslands", 367),
          ("pacificOcean-Guam", 368),
          ("pacificOcean-Kiribati-GilbertIslands", 369),
          ("pacificOcean-Kiribati-PhoenixIslands", 370),
          ("pacificOcean-Kiribati-LineIslands", 371),
          ("pacificOcean-MarshallIslands-MostLocations", 372),
          ("pacificOcean-MarshallIslands-Kwajalein", 373),
          ("pacificOcean-Micronesia-Yap", 374),
          ("pacificOcean-Micronesia-TrukOrChuuk", 375),
          ("pacificOcean-Micronesia-PonapeOrPohnpei", 376),
          ("pacificOcean-Micronesia-Kosrae", 377),
          ("pacificOcean-Nauru", 378),
          ("pacificOcean-NewCaledonia", 379),
          ("pacificOcean-NewZealand-MostLocations", 380),
          ("pacificOcean-NewZealand-ChathamIslands", 381),
          ("pacificOcean-Niue", 382),
          ("pacificOcean-NorfolkIsland", 383),
          ("pacificOcean-NorthernMarianaIslands", 384),
          ("pacificOcean-Palau", 385),
          ("pacificOcean-PapuaNewGuinea", 386),
          ("pacificOcean-Pitcairn", 387),
          ("pacificOcean-SamoaAmerican", 388),
          ("pacificOcean-SamoaWestern", 389),
          ("pacificOcean-SolomonIslands", 390),
          ("pacificOcean-Tokelau", 391),
          ("pacificOcean-Tonga", 392),
          ("pacificOcean-Tuvalu", 393),
          ("pacificOceanUSA-EastTime", 394),
          ("pacificOceanUSA-EastTime-MichiganMostLocations", 395),
          ("pacificOceanUSA-EastTime-KentuckyLouisvilleArea", 396),
          ("pacificOceanUSA-EastTime-KentuckyWayneCounty", 397),
          ("pacificOceanUSA-EastStdTime-IndianaMostLocations", 398),
          ("pacificOceanUSA-EastStdTime-IndianaCrawfordCounty", 399),
          ("pacificOceanUSA-EastStdTime-IndianaStarkeCounty", 400),
          ("pacificOceanUSA-EastStdTime-IndianaSwitzerlandCounty", 401),
          ("pacificOceanUSA-CentTime", 402),
          ("pacificOceanUSA-CentTime-MichiganWisconsinborder", 403),
          ("pacificOceanUSA-CentTime-NorthDakotaOliverCounty", 404),
          ("pacificOceanUSA-MountTime", 405),
          ("pacificOceanUSA-MountTime-SouthIdahoAndEastOregon", 406),
          ("pacificOceanUSA-MountTime-Navajo", 407),
          ("pacificOceanUSA-MountStdTime-Arizona", 408),
          ("pacificOceanUSA-PacificTime", 409),
          ("pacificOceanUSA-AlaskaTime", 410),
          ("pacificOceanUSA-AlaskaTime-AlaskaPanhandle", 411),
          ("pacificOceanUSA-AlaskaTime-AlaskaPanhandleNeck", 412),
          ("pacificOceanUSA-AlaskaTime-WestAlaska", 413),
          ("pacificOceanUSA-AleutianIslands", 414),
          ("pacificOceanUSA-Hawaii", 415),
          ("pacificOcean-USMinorOutlyingIslands-JohnstonAtoll", 416),
          ("pacificOcean-USMinorOutlyingIslands-MidwayIslands", 417),
          ("pacificOcean-USMinorOutlyingIslands-WakeIsland", 418),
          ("pacificOcean-Vanuatu", 419),
          ("pacificOcean-WallisAndFutuna", 420),
          ("europe-Montenegro", 421))
    )


_AgCurTimeZone_Type.__name__ = "Integer32"
_AgCurTimeZone_Object = MibScalar
agCurTimeZone = _AgCurTimeZone_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 55),
    _AgCurTimeZone_Type()
)
agCurTimeZone.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurTimeZone.setStatus("current")


class _AgNewTimeZone_Type(Integer32):
    """Custom type agNewTimeZone based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              48,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              58,
              59,
              60,
              61,
              62,
              63,
              64,
              65,
              66,
              67,
              68,
              69,
              70,
              71,
              72,
              73,
              74,
              75,
              76,
              77,
              78,
              79,
              80,
              81,
              82,
              83,
              84,
              85,
              86,
              87,
              88,
              89,
              90,
              91,
              92,
              93,
              94,
              95,
              96,
              97,
              98,
              99,
              100,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118,
              119,
              120,
              121,
              122,
              123,
              124,
              125,
              126,
              127,
              128,
              129,
              130,
              131,
              132,
              133,
              134,
              135,
              136,
              137,
              138,
              139,
              140,
              141,
              142,
              143,
              144,
              145,
              146,
              147,
              148,
              149,
              150,
              151,
              152,
              153,
              154,
              155,
              156,
              157,
              158,
              159,
              160,
              161,
              162,
              163,
              164,
              165,
              166,
              167,
              168,
              169,
              170,
              171,
              172,
              173,
              174,
              175,
              176,
              177,
              178,
              179,
              180,
              181,
              182,
              183,
              184,
              185,
              186,
              187,
              188,
              189,
              190,
              191,
              192,
              193,
              194,
              195,
              196,
              197,
              198,
              199,
              200,
              201,
              202,
              203,
              204,
              205,
              206,
              207,
              208,
              209,
              210,
              211,
              212,
              213,
              214,
              215,
              216,
              217,
              218,
              219,
              220,
              221,
              222,
              223,
              224,
              225,
              226,
              227,
              228,
              229,
              230,
              231,
              232,
              233,
              234,
              235,
              236,
              237,
              238,
              239,
              240,
              241,
              242,
              243,
              244,
              245,
              246,
              247,
              248,
              249,
              250,
              251,
              252,
              253,
              254,
              255,
              256,
              257,
              258,
              259,
              260,
              261,
              262,
              263,
              264,
              265,
              266,
              267,
              268,
              269,
              270,
              271,
              272,
              273,
              274,
              275,
              276,
              277,
              278,
              279,
              280,
              281,
              282,
              283,
              284,
              285,
              286,
              287,
              288,
              289,
              290,
              291,
              292,
              293,
              294,
              295,
              296,
              297,
              298,
              299,
              300,
              301,
              302,
              303,
              304,
              305,
              306,
              307,
              308,
              309,
              310,
              311,
              312,
              313,
              314,
              315,
              316,
              317,
              318,
              319,
              320,
              321,
              322,
              323,
              324,
              325,
              326,
              327,
              328,
              329,
              330,
              331,
              332,
              333,
              334,
              335,
              336,
              337,
              338,
              339,
              340,
              341,
              342,
              343,
              344,
              345,
              346,
              347,
              348,
              349,
              350,
              351,
              352,
              353,
              354,
              355,
              356,
              357,
              358,
              359,
              360,
              361,
              362,
              363,
              364,
              365,
              366,
              367,
              368,
              369,
              370,
              371,
              372,
              373,
              374,
              375,
              376,
              377,
              378,
              379,
              380,
              381,
              382,
              383,
              384,
              385,
              386,
              387,
              388,
              389,
              390,
              391,
              392,
              393,
              394,
              395,
              396,
              397,
              398,
              399,
              400,
              401,
              402,
              403,
              404,
              405,
              406,
              407,
              408,
              409,
              410,
              411,
              412,
              413,
              414,
              415,
              416,
              417,
              418,
              419,
              420,
              421)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("africa-Algeria", 1),
          ("africa-Angola", 2),
          ("africa-Benin", 3),
          ("africa-Botswana", 4),
          ("africa-Burkina-Faso", 5),
          ("africa-Burundi", 6),
          ("africa-Cameroon", 7),
          ("africa-Central-African-Rep", 8),
          ("africa-Chad", 9),
          ("africa-Congo-WestDemRepCongo", 10),
          ("africa-Congo-EastDemRepCongo", 11),
          ("africa-Congo-Rep", 12),
          ("africa-Cote-dIvoire", 13),
          ("africa-Djibouti", 14),
          ("africa-Egypt", 15),
          ("africa-Equatorial-Guinea", 16),
          ("africa-Eritrea", 17),
          ("africa-Ethiopia", 18),
          ("africa-Gabon", 19),
          ("africa-Gambia", 20),
          ("africa-Ghana", 21),
          ("africa-Guinea", 22),
          ("africa-Guinea-Bissau", 23),
          ("africa-Kenya", 24),
          ("africa-Lesotho", 25),
          ("africa-Liberia", 26),
          ("africa-Libya", 27),
          ("africa-Malawi", 28),
          ("africa-Mali-SouthWestMali", 29),
          ("africa-Mali-NorthEastMali", 30),
          ("africa-Mauritania", 31),
          ("africa-Morocco", 32),
          ("africa-Mozambique", 33),
          ("africa-Namibia", 34),
          ("africa-Niger", 35),
          ("africa-Nigeria", 36),
          ("africa-Rwanda", 37),
          ("africa-SaoTome-And-Principe", 38),
          ("africa-Senegal", 39),
          ("africa-SierraLeone", 40),
          ("africa-Somalia", 41),
          ("africa-SouthAfrica", 42),
          ("africa-Spain-Mainland", 43),
          ("africa-Spain-CeutaMelilla", 44),
          ("africa-Spain-CanaryIslands", 45),
          ("africa-Sudan", 46),
          ("africa-Swaziland", 47),
          ("africa-Tanzania", 48),
          ("africa-Togo", 49),
          ("africa-Tunisia", 50),
          ("africa-Uganda", 51),
          ("africa-Western-Sahara", 52),
          ("africa-Zambia", 53),
          ("africa-Zimbabwe", 54),
          ("americas-Anguilla", 55),
          ("americas-Antigua-Barbuda", 56),
          ("americas-Argentina-EArgentina", 57),
          ("americas-Argentina-MostLocations", 58),
          ("americas-Argentina-Jujuy", 59),
          ("americas-Argentina-Catamarca", 60),
          ("americas-Argentina-Mendoza", 61),
          ("americas-Aruba", 62),
          ("americas-Bahamas", 63),
          ("americas-Barbados", 64),
          ("americas-Belize", 65),
          ("americas-Bolivia", 66),
          ("americas-Brazil-AtlanticIslands", 67),
          ("americas-Brazil-AmapaEPara", 68),
          ("americas-Brazil-NEBrazil", 69),
          ("americas-Brazil-Pernambuco", 70),
          ("americas-Brazil-Tocantins", 71),
          ("americas-Brazil-AlagoasSergipe", 72),
          ("americas-Brazil-SSEBrazil", 73),
          ("americas-Brazil-MatoGrossoDoSul", 74),
          ("americas-Brazil-WParaRondonia", 75),
          ("americas-Brazil-Roraima", 76),
          ("americas-Brazil-EAmazonas", 77),
          ("americas-Brazil-WAmazonas", 78),
          ("americas-Brazil-Acre", 79),
          ("americas-Canada-NewfoundlandIsland", 80),
          ("americas-Canada-AtlanTime-NovaScotia", 81),
          ("americas-Canada-AtlanTime-ELabrador", 82),
          ("americas-Canada-EastTime-OntarioMostlocation", 83),
          ("americas-Canada-EastTime-ThunderBay", 84),
          ("americas-Canada-EastStdTime-PangnirtungNunavut", 85),
          ("americas-Canada-EastStdTime-EastNunavut", 86),
          ("americas-Canada-EastStdTime-CenNunavut", 87),
          ("americas-Canada-CenTime-ManitobaWestOntario", 88),
          ("americas-Canada-CenTime-RainyRiver", 89),
          ("americas-Canada-CenTime-WestNunavut", 90),
          ("americas-Canada-CenStdTime-SaskatchewanMostlocation", 91),
          ("americas-Canada-CenStdTime-SaskatchewanMidwest", 92),
          ("americas-Canada-MountTime-AlbertaEastBritishColumbia", 93),
          ("americas-Canada-MountTime-CentralNorthwestTerritories", 94),
          ("americas-Canada-MountTime-WestNorthwestTerritories", 95),
          ("americas-Canada-MountStdTime-DawsonCrkStJohnBritColumbia", 96),
          ("americas-Canada-PacificTime-WestBritishColumbia", 97),
          ("americas-Canada-PacificTime-SouthYukon", 98),
          ("americas-Canada-PacificTime-NorthYukon", 99),
          ("americas-CaymanIslands", 100),
          ("americas-Chile-MostLocation", 101),
          ("americas-Chile-EasterIsland", 102),
          ("americas-Colombia", 103),
          ("americas-CostaRica", 104),
          ("americas-Cuba", 105),
          ("americas-Dominica", 106),
          ("americas-DominicanRepublic", 107),
          ("americas-Ecuador", 108),
          ("americas-ElSalvado", 109),
          ("americas-FrenchGuiana", 110),
          ("americas-Greenland-MostLocation", 111),
          ("americas-Greenland-EastCoastNorthScoresbysund", 112),
          ("americas-Greenland-ScoresbysundIttoqqortoormiit", 113),
          ("americas-Greenland-ThulePituffik", 114),
          ("americas-Grenada", 115),
          ("americas-Guadeloupe", 116),
          ("americas-Guatemala", 117),
          ("americas-Guyana", 118),
          ("americas-Haiti", 119),
          ("americas-Honduras", 120),
          ("americas-Jamaica", 121),
          ("americas-Martinique", 122),
          ("americas-Mexico-CentTime-Mostlocations", 123),
          ("americas-Mexico-CentTime-QuintanaRoo", 124),
          ("americas-Mexico-CentTime-CampecheYucatan", 125),
          ("americas-Mexico-CentTime-CoahuilaDurNuevoLeonTam", 126),
          ("americas-Mexico-MountTime-SBajaNayaritSinaloa", 127),
          ("americas-Mexico-MountTime-Chihuahua", 128),
          ("americas-Mexico-MountStdTime-Sonora", 129),
          ("americas-Mexico-PacificTime", 130),
          ("americas-Montserrat", 131),
          ("americas-NetherlandsAntilles", 132),
          ("americas-Nicaragua", 133),
          ("americas-Panama", 134),
          ("americas-Paraguay", 135),
          ("americas-Peru", 136),
          ("americas-PuertoRico", 137),
          ("americas-StKittsAndNevis", 138),
          ("americas-StLucia", 139),
          ("americas-StPierreAndMiquelon", 140),
          ("americas-StVincent", 141),
          ("americas-Suriname", 142),
          ("americas-TrinidadAndTobago", 143),
          ("americas-TurksAndCaicosIs", 144),
          ("americas-USA-EastTime", 145),
          ("americas-USA-EastTime-MichiganMostLocation", 146),
          ("americas-USA-EastTime-KentuckyLouisvilleArea", 147),
          ("americas-USA-EastTime-KentuckyWayneCounty", 148),
          ("americas-USA-EastStdTime-IndianaMostLocations", 149),
          ("americas-USA-EastStdTime-IndianaCrawfordCounty", 150),
          ("americas-USA-EastStdTime-IndianaStarkeCounty", 151),
          ("americas-USA-EastStdTime-IndianaSwitzerlandCounty", 152),
          ("americas-USA-CentTime", 153),
          ("americas-USA-CentTime-MichiganWisconsinborder", 154),
          ("americas-USA-CentTime-NorthDakotaOliverCounty", 155),
          ("americas-USA-MountTime", 156),
          ("americas-USA-MountTime-SouthIdahoAndEastOregon", 157),
          ("americas-USA-MountTime-Navajo", 158),
          ("americas-USA-MountStdTime-Arizona", 159),
          ("americas-USA-PacificTime", 160),
          ("americas-USA-AlaskaTime", 161),
          ("americas-USA-AlaskaTime-AlaskaPanhandle", 162),
          ("americas-USA-AlaskaTime-AlaskaPanhandleNeck", 163),
          ("americas-USA-AlaskaTime-WestAlaska", 164),
          ("americas-USA-AleutianIslands", 165),
          ("americas-USA-Hawaii", 166),
          ("americas-Uruguay", 167),
          ("americas-Venezuela", 168),
          ("americas-VirginIslands-UK", 169),
          ("americas-VirginIslands-US", 170),
          ("antarctica-McMurdoStationRossIsland", 171),
          ("antarctica-Amundsen-ScottStationSouthPole", 172),
          ("antarctica-PalmerStationAnversIsland", 173),
          ("antarctica-MawsonStationHolmeBay", 174),
          ("antarctica-DavisStationVestfoldHills", 175),
          ("antarctica-CaseyStationBaileyPeninsula", 176),
          ("antarctica-VostokStationSMagneticPole", 177),
          ("antarctica-Dumont-dUrvilleBaseTerreAdelie", 178),
          ("antarctica-SyowaStationEOngulI", 179),
          ("arcticOcean-Svalbard", 180),
          ("arcticOcean-JanMayen", 181),
          ("asia-Afghanistan", 182),
          ("asia-Armenia", 183),
          ("asia-Azerbaijan", 184),
          ("asia-Bahrain", 185),
          ("asia-Bangladesh", 186),
          ("asia-Bhutan", 187),
          ("asia-Brunei", 188),
          ("asia-Cambodia", 189),
          ("asia-China-EastChinaBeijingGuangdongShanghai", 190),
          ("asia-China-Heilongjiang", 191),
          ("asia-China-CentralChinaGansuGuizhouSichuanYunnan", 192),
          ("asia-China-TibetmostofXinjiangUyghur", 193),
          ("asia-China-SouthwestXinjiangUyghur", 194),
          ("asia-Cyprus", 195),
          ("asia-EastTimor", 196),
          ("asia-Georgia", 197),
          ("asia-HongKong", 198),
          ("asia-India", 199),
          ("asia-Indonesia-JavaAndSumatra", 200),
          ("asia-Indonesia-WestCentralBorneo", 201),
          ("asia-Indonesia-ESBorneoCelebesBaliNusaTengaWTimor", 202),
          ("asia-Indonesia-IrianJayaAndMoluccas", 203),
          ("asia-Iran", 204),
          ("asia-Iraq", 205),
          ("asia-Israel", 206),
          ("asia-Japan", 207),
          ("asia-Jordan", 208),
          ("asia-Kazakhstan-MostLocations", 209),
          ("asia-Kazakhstan-QyzylordaKyzylorda", 210),
          ("asia-Kazakhstan-Aqtobe", 211),
          ("asia-Kazakhstan-AtyrauMangghystau", 212),
          ("asia-Kazakhstan-WestKazakhstan", 213),
          ("asia-Korea-North", 214),
          ("asia-Korea-South", 215),
          ("asia-Kuwait", 216),
          ("asia-Kyrgyzstan", 217),
          ("asia-Laos", 218),
          ("asia-Lebanon", 219),
          ("asia-Macau", 220),
          ("asia-Malaysia-PeninsularMalaysia", 221),
          ("asia-Malaysia-SabahSarawak", 222),
          ("asia-Mongolia-MostLocations", 223),
          ("asia-Mongolia-BayanOlgiyGoviAltaiHovdUvsZavkhan", 224),
          ("asia-Mongolia-DornodSukhbaatar", 225),
          ("asia-Myanmar", 226),
          ("asia-Nepal", 227),
          ("asia-Oman", 228),
          ("asia-Pakistan", 229),
          ("asia-Palestine", 230),
          ("asia-Philippines", 231),
          ("asia-Qatar", 232),
          ("asia-Russia-Moscow-01Kaliningrad", 233),
          ("asia-Russia-Moscow00WestRussia", 234),
          ("asia-Russia-Moscow01CaspianSea", 235),
          ("asia-Russia-Moscow02Urals", 236),
          ("asia-Russia-Moscow03WestSiberia", 237),
          ("asia-Russia-Moscow03Novosibirsk", 238),
          ("asia-Russia-Moscow04YeniseiRiver", 239),
          ("asia-Russia-Moscow05LakeBaikal", 240),
          ("asia-Russia-Moscow06LenaRiver", 241),
          ("asia-Russia-Moscow07AmurRiver", 242),
          ("asia-Russia-Moscow07SakhalinIsland", 243),
          ("asia-Russia-Moscow08Magadan", 244),
          ("asia-Russia-Moscow09Kamchatka", 245),
          ("asia-Russia-Moscow10BeringSea", 246),
          ("asia-SaudiArabia", 247),
          ("asia-Singapore", 248),
          ("asia-SriLanka", 249),
          ("asia-Syria", 250),
          ("asia-Taiwan", 251),
          ("asia-Tajikistan", 252),
          ("asia-Thailand", 253),
          ("asia-Turkmenistan", 254),
          ("asia-UnitedArabEmirates", 255),
          ("asia-Uzbekistan-WestUzbekistan", 256),
          ("asia-Uzbekistan-EastUzbekistan", 257),
          ("asia-Vietnam", 258),
          ("asia-Yemen", 259),
          ("atlanticOcean-Bermuda", 260),
          ("atlanticOcean-CapeVerde", 261),
          ("atlanticOcean-FaeroeIslands", 262),
          ("atlanticOcean-FalklandIslands", 263),
          ("atlanticOcean-Iceland", 264),
          ("atlanticOcean-Portugal-Mainland", 265),
          ("atlanticOcean-Portugal-MadeiraIslands", 266),
          ("atlanticOcean-Portugal-Azores", 267),
          ("atlanticOcean-SouthGeorgia-SouthSandwichIslands", 268),
          ("atlanticOcean-Spain-Mainland", 269),
          ("atlanticOcean-Spain-CeutaMelilla", 270),
          ("atlanticOcean-Spain-CanaryIslands", 271),
          ("atlanticOcean-StHelena", 272),
          ("atlanticOcean-Svalbard-JanMayen", 273),
          ("australia-LordHoweIsland", 274),
          ("australia-Tasmania", 275),
          ("australia-Victoria", 276),
          ("australia-NewSouthWales-MostLocations", 277),
          ("australia-NewSouthWales-Yancowinna", 278),
          ("australia-Queensland-MostLocations", 279),
          ("australia-Queensland-HolidayIslands", 280),
          ("australia-SouthAustralia", 281),
          ("australia-NorthernTerritory", 282),
          ("australia-WesternAustralia", 283),
          ("europe-Albania", 284),
          ("europe-Andorra", 285),
          ("europe-Austria", 286),
          ("europe-Belarus", 287),
          ("europe-Belgium", 288),
          ("europe-BosniaHerzegovina", 289),
          ("europe-Britain-UKGreatBritain", 290),
          ("europe-Britain-UKNorthernIreland", 291),
          ("europe-Bulgaria", 292),
          ("europe-Croatia", 293),
          ("europe-CzechRepublic", 294),
          ("europe-Denmark", 295),
          ("europe-Estonia", 296),
          ("europe-Finland", 297),
          ("europe-France", 298),
          ("europe-Germany", 299),
          ("europe-Gibraltar", 300),
          ("europe-Greece", 301),
          ("europe-Hungary", 302),
          ("europe-Ireland", 303),
          ("europe-Italy", 304),
          ("europe-Latvia", 305),
          ("europe-Liechtenstein", 306),
          ("europe-Lithuania", 307),
          ("europe-Luxembourg", 308),
          ("europe-Macedonia", 309),
          ("europe-Malta", 310),
          ("europe-Moldova", 311),
          ("europe-Monaco", 312),
          ("europe-Netherlands", 313),
          ("europe-Norway", 314),
          ("europe-Poland", 315),
          ("europe-Portugal-Mainland", 316),
          ("europe-Portugal-MadeiraIslands", 317),
          ("europe-Portugal-Azores", 318),
          ("europe-Romania", 319),
          ("europe-Russia-Moscow-01Kaliningrad", 320),
          ("europe-Russia-Moscow00WestRussia", 321),
          ("europe-Russia-Moscow01CaspianSea", 322),
          ("europe-Russia-Moscow02Urals", 323),
          ("europe-Russia-Moscow03WestSiberia", 324),
          ("europe-Russia-Moscow03Novosibirsk", 325),
          ("europe-Russia-Moscow04YeniseiRiver", 326),
          ("europe-Russia-Moscow05LakeBaikal", 327),
          ("europe-Russia-Moscow06LenaRiver", 328),
          ("europe-Russia-Moscow07AmurRiver", 329),
          ("europe-Russia-Moscow07SakhalinIsland", 330),
          ("europe-Russia-Moscow08Magadan", 331),
          ("europe-Russia-Moscow09Kamchatka", 332),
          ("europe-Russia-Moscow10BeringSea", 333),
          ("europe-SanMarino", 334),
          ("europe-Slovakia", 335),
          ("europe-Slovenia", 336),
          ("europe-Spain-Mainland", 337),
          ("europe-Spain-CeutaAndMelilla", 338),
          ("europe-Spain-CanaryIslands", 339),
          ("europe-Sweden", 340),
          ("europe-Switzerland", 341),
          ("europe-Turkey", 342),
          ("europe-Ukraine-MostLocations", 343),
          ("europe-Ukraine-Ruthenia", 344),
          ("europe-Ukraine-Zaporozhye-ELugansk", 345),
          ("europe-Ukraine-CentralCrimea", 346),
          ("europe-VaticanCity", 347),
          ("europe-Serbia", 348),
          ("indianOcean-BritishIndianOceanTerritory", 349),
          ("indianOcean-ChristmasIsland", 350),
          ("indianOcean-CocosOrKeelingIslands", 351),
          ("indianOcean-Comoros", 352),
          ("indianOcean-FrenchSouthernAndAntarcticLands", 353),
          ("indianOcean-Madagascar", 354),
          ("indianOcean-Maldives", 355),
          ("indianOcean-Mauritius", 356),
          ("indianOcean-Mayotte", 357),
          ("indianOcean-Reunion", 358),
          ("indianOcean-Seychelles", 359),
          ("pacificOcean-Chile-MostLocations", 360),
          ("pacificOcean-Chile-EasterIslandSalayGomez", 361),
          ("pacificOcean-CookIslands", 362),
          ("pacificOcean-Ecuador", 363),
          ("pacificOcean-Fiji", 364),
          ("pacificOcean-FrenchPolynesia-SocietyIslands", 365),
          ("pacificOcean-FrenchPolynesia-MarquesasIslands", 366),
          ("pacificOcean-FrenchPolynesia-GambierIslands", 367),
          ("pacificOcean-Guam", 368),
          ("pacificOcean-Kiribati-GilbertIslands", 369),
          ("pacificOcean-Kiribati-PhoenixIslands", 370),
          ("pacificOcean-Kiribati-LineIslands", 371),
          ("pacificOcean-MarshallIslands-MostLocations", 372),
          ("pacificOcean-MarshallIslands-Kwajalein", 373),
          ("pacificOcean-Micronesia-Yap", 374),
          ("pacificOcean-Micronesia-TrukOrChuuk", 375),
          ("pacificOcean-Micronesia-PonapeOrPohnpei", 376),
          ("pacificOcean-Micronesia-Kosrae", 377),
          ("pacificOcean-Nauru", 378),
          ("pacificOcean-NewCaledonia", 379),
          ("pacificOcean-NewZealand-MostLocations", 380),
          ("pacificOcean-NewZealand-ChathamIslands", 381),
          ("pacificOcean-Niue", 382),
          ("pacificOcean-NorfolkIsland", 383),
          ("pacificOcean-NorthernMarianaIslands", 384),
          ("pacificOcean-Palau", 385),
          ("pacificOcean-PapuaNewGuinea", 386),
          ("pacificOcean-Pitcairn", 387),
          ("pacificOcean-SamoaAmerican", 388),
          ("pacificOcean-SamoaWestern", 389),
          ("pacificOcean-SolomonIslands", 390),
          ("pacificOcean-Tokelau", 391),
          ("pacificOcean-Tonga", 392),
          ("pacificOcean-Tuvalu", 393),
          ("pacificOceanUSA-EastTime", 394),
          ("pacificOceanUSA-EastTime-MichiganMostLocations", 395),
          ("pacificOceanUSA-EastTime-KentuckyLouisvilleArea", 396),
          ("pacificOceanUSA-EastTime-KentuckyWayneCounty", 397),
          ("pacificOceanUSA-EastStdTime-IndianaMostLocations", 398),
          ("pacificOceanUSA-EastStdTime-IndianaCrawfordCounty", 399),
          ("pacificOceanUSA-EastStdTime-IndianaStarkeCounty", 400),
          ("pacificOceanUSA-EastStdTime-IndianaSwitzerlandCounty", 401),
          ("pacificOceanUSA-CentTime", 402),
          ("pacificOceanUSA-CentTime-MichiganWisconsinborder", 403),
          ("pacificOceanUSA-CentTime-NorthDakotaOliverCounty", 404),
          ("pacificOceanUSA-MountTime", 405),
          ("pacificOceanUSA-MountTime-SouthIdahoAndEastOregon", 406),
          ("pacificOceanUSA-MountTime-Navajo", 407),
          ("pacificOceanUSA-MountStdTime-Arizona", 408),
          ("pacificOceanUSA-PacificTime", 409),
          ("pacificOceanUSA-AlaskaTime", 410),
          ("pacificOceanUSA-AlaskaTime-AlaskaPanhandle", 411),
          ("pacificOceanUSA-AlaskaTime-AlaskaPanhandleNeck", 412),
          ("pacificOceanUSA-AlaskaTime-WestAlaska", 413),
          ("pacificOceanUSA-AleutianIslands", 414),
          ("pacificOceanUSA-Hawaii", 415),
          ("pacificOcean-USMinorOutlyingIslands-JohnstonAtoll", 416),
          ("pacificOcean-USMinorOutlyingIslands-MidwayIslands", 417),
          ("pacificOcean-USMinorOutlyingIslands-WakeIsland", 418),
          ("pacificOcean-Vanuatu", 419),
          ("pacificOceanWallisAndFutuna", 420),
          ("europe-Montenegro", 421))
    )


_AgNewTimeZone_Type.__name__ = "Integer32"
_AgNewTimeZone_Object = MibScalar
agNewTimeZone = _AgNewTimeZone_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 56),
    _AgNewTimeZone_Type()
)
agNewTimeZone.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewTimeZone.setStatus("current")
_AgCurCfgIdleCLITimeout_Type = Integer32
_AgCurCfgIdleCLITimeout_Object = MibScalar
agCurCfgIdleCLITimeout = _AgCurCfgIdleCLITimeout_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 57),
    _AgCurCfgIdleCLITimeout_Type()
)
agCurCfgIdleCLITimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgIdleCLITimeout.setStatus("current")
_AgNewCfgIdleCLITimeout_Type = Integer32
_AgNewCfgIdleCLITimeout_Object = MibScalar
agNewCfgIdleCLITimeout = _AgNewCfgIdleCLITimeout_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 58),
    _AgNewCfgIdleCLITimeout_Type()
)
agNewCfgIdleCLITimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgIdleCLITimeout.setStatus("current")


class _AgCurCfgHttpsServerAccess_Type(Integer32):
    """Custom type agCurCfgHttpsServerAccess based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_AgCurCfgHttpsServerAccess_Type.__name__ = "Integer32"
_AgCurCfgHttpsServerAccess_Object = MibScalar
agCurCfgHttpsServerAccess = _AgCurCfgHttpsServerAccess_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 62),
    _AgCurCfgHttpsServerAccess_Type()
)
agCurCfgHttpsServerAccess.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgHttpsServerAccess.setStatus("current")


class _AgNewCfgHttpsServerAccess_Type(Integer32):
    """Custom type agNewCfgHttpsServerAccess based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_AgNewCfgHttpsServerAccess_Type.__name__ = "Integer32"
_AgNewCfgHttpsServerAccess_Object = MibScalar
agNewCfgHttpsServerAccess = _AgNewCfgHttpsServerAccess_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 63),
    _AgNewCfgHttpsServerAccess_Type()
)
agNewCfgHttpsServerAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgHttpsServerAccess.setStatus("current")


class _AgCurHttpAcces_Type(Integer32):
    """Custom type agCurHttpAcces based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_AgCurHttpAcces_Type.__name__ = "Integer32"
_AgCurHttpAcces_Object = MibScalar
agCurHttpAcces = _AgCurHttpAcces_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 66),
    _AgCurHttpAcces_Type()
)
agCurHttpAcces.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurHttpAcces.setStatus("current")


class _AgNewHttpAcces_Type(Integer32):
    """Custom type agNewHttpAcces based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_AgNewHttpAcces_Type.__name__ = "Integer32"
_AgNewHttpAcces_Object = MibScalar
agNewHttpAcces = _AgNewHttpAcces_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 67),
    _AgNewHttpAcces_Type()
)
agNewHttpAcces.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewHttpAcces.setStatus("current")


class _AgCurCfgDhcp_Type(Integer32):
    """Custom type agCurCfgDhcp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgDhcp_Type.__name__ = "Integer32"
_AgCurCfgDhcp_Object = MibScalar
agCurCfgDhcp = _AgCurCfgDhcp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 68),
    _AgCurCfgDhcp_Type()
)
agCurCfgDhcp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgDhcp.setStatus("current")


class _AgNewCfgDhcp_Type(Integer32):
    """Custom type agNewCfgDhcp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgDhcp_Type.__name__ = "Integer32"
_AgNewCfgDhcp_Object = MibScalar
agNewCfgDhcp = _AgNewCfgDhcp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 69),
    _AgNewCfgDhcp_Type()
)
agNewCfgDhcp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgDhcp.setStatus("current")


class _AgCurCfgHprompt_Type(Integer32):
    """Custom type agCurCfgHprompt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_AgCurCfgHprompt_Type.__name__ = "Integer32"
_AgCurCfgHprompt_Object = MibScalar
agCurCfgHprompt = _AgCurCfgHprompt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 72),
    _AgCurCfgHprompt_Type()
)
agCurCfgHprompt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgHprompt.setStatus("current")


class _AgNewCfgHprompt_Type(Integer32):
    """Custom type agNewCfgHprompt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_AgNewCfgHprompt_Type.__name__ = "Integer32"
_AgNewCfgHprompt_Object = MibScalar
agNewCfgHprompt = _AgNewCfgHprompt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 73),
    _AgNewCfgHprompt_Type()
)
agNewCfgHprompt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgHprompt.setStatus("current")


class _AgCurCfgUserBBI_Type(Integer32):
    """Custom type agCurCfgUserBBI based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_AgCurCfgUserBBI_Type.__name__ = "Integer32"
_AgCurCfgUserBBI_Object = MibScalar
agCurCfgUserBBI = _AgCurCfgUserBBI_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 74),
    _AgCurCfgUserBBI_Type()
)
agCurCfgUserBBI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgUserBBI.setStatus("current")


class _AgNewCfgUserBBI_Type(Integer32):
    """Custom type agNewCfgUserBBI based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_AgNewCfgUserBBI_Type.__name__ = "Integer32"
_AgNewCfgUserBBI_Object = MibScalar
agNewCfgUserBBI = _AgNewCfgUserBBI_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 75),
    _AgNewCfgUserBBI_Type()
)
agNewCfgUserBBI.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgUserBBI.setStatus("current")


class _AgCurCfgLoginNotice_Type(DisplayString):
    """Custom type agCurCfgLoginNotice based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 80),
    )


_AgCurCfgLoginNotice_Type.__name__ = "DisplayString"
_AgCurCfgLoginNotice_Object = MibScalar
agCurCfgLoginNotice = _AgCurCfgLoginNotice_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 78),
    _AgCurCfgLoginNotice_Type()
)
agCurCfgLoginNotice.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgLoginNotice.setStatus("current")


class _AgNewCfgLoginNotice_Type(DisplayString):
    """Custom type agNewCfgLoginNotice based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 80),
    )


_AgNewCfgLoginNotice_Type.__name__ = "DisplayString"
_AgNewCfgLoginNotice_Object = MibScalar
agNewCfgLoginNotice = _AgNewCfgLoginNotice_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 79),
    _AgNewCfgLoginNotice_Type()
)
agNewCfgLoginNotice.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgLoginNotice.setStatus("current")


class _AgCurCfgSysCustomDstState_Type(Integer32):
    """Custom type agCurCfgSysCustomDstState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSysCustomDstState_Type.__name__ = "Integer32"
_AgCurCfgSysCustomDstState_Object = MibScalar
agCurCfgSysCustomDstState = _AgCurCfgSysCustomDstState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 98),
    _AgCurCfgSysCustomDstState_Type()
)
agCurCfgSysCustomDstState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSysCustomDstState.setStatus("current")


class _AgNewCfgSysCustomDstState_Type(Integer32):
    """Custom type agNewCfgSysCustomDstState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSysCustomDstState_Type.__name__ = "Integer32"
_AgNewCfgSysCustomDstState_Object = MibScalar
agNewCfgSysCustomDstState = _AgNewCfgSysCustomDstState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 99),
    _AgNewCfgSysCustomDstState_Type()
)
agNewCfgSysCustomDstState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSysCustomDstState.setStatus("current")


class _AgCurCfgSysCustomDstStart_Type(DisplayString):
    """Custom type agCurCfgSysCustomDstStart based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_AgCurCfgSysCustomDstStart_Type.__name__ = "DisplayString"
_AgCurCfgSysCustomDstStart_Object = MibScalar
agCurCfgSysCustomDstStart = _AgCurCfgSysCustomDstStart_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 100),
    _AgCurCfgSysCustomDstStart_Type()
)
agCurCfgSysCustomDstStart.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSysCustomDstStart.setStatus("current")


class _AgNewCfgSysCustomDstStart_Type(DisplayString):
    """Custom type agNewCfgSysCustomDstStart based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_AgNewCfgSysCustomDstStart_Type.__name__ = "DisplayString"
_AgNewCfgSysCustomDstStart_Object = MibScalar
agNewCfgSysCustomDstStart = _AgNewCfgSysCustomDstStart_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 101),
    _AgNewCfgSysCustomDstStart_Type()
)
agNewCfgSysCustomDstStart.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSysCustomDstStart.setStatus("current")


class _AgCurCfgSysCustomDstEnd_Type(DisplayString):
    """Custom type agCurCfgSysCustomDstEnd based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_AgCurCfgSysCustomDstEnd_Type.__name__ = "DisplayString"
_AgCurCfgSysCustomDstEnd_Object = MibScalar
agCurCfgSysCustomDstEnd = _AgCurCfgSysCustomDstEnd_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 102),
    _AgCurCfgSysCustomDstEnd_Type()
)
agCurCfgSysCustomDstEnd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSysCustomDstEnd.setStatus("current")


class _AgNewCfgSysCustomDstEnd_Type(DisplayString):
    """Custom type agNewCfgSysCustomDstEnd based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_AgNewCfgSysCustomDstEnd_Type.__name__ = "DisplayString"
_AgNewCfgSysCustomDstEnd_Object = MibScalar
agNewCfgSysCustomDstEnd = _AgNewCfgSysCustomDstEnd_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 103),
    _AgNewCfgSysCustomDstEnd_Type()
)
agNewCfgSysCustomDstEnd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSysCustomDstEnd.setStatus("current")


class _AgHavePanicDump_Type(Integer32):
    """Custom type agHavePanicDump based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("havePanic", 1),
          ("noHavePanic", 2))
    )


_AgHavePanicDump_Type.__name__ = "Integer32"
_AgHavePanicDump_Object = MibScalar
agHavePanicDump = _AgHavePanicDump_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 104),
    _AgHavePanicDump_Type()
)
agHavePanicDump.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agHavePanicDump.setStatus("current")


class _AgCurCfgResetControl_Type(Integer32):
    """Custom type agCurCfgResetControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_AgCurCfgResetControl_Type.__name__ = "Integer32"
_AgCurCfgResetControl_Object = MibScalar
agCurCfgResetControl = _AgCurCfgResetControl_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 111),
    _AgCurCfgResetControl_Type()
)
agCurCfgResetControl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgResetControl.setStatus("current")


class _AgNewCfgResetControl_Type(Integer32):
    """Custom type agNewCfgResetControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_AgNewCfgResetControl_Type.__name__ = "Integer32"
_AgNewCfgResetControl_Object = MibScalar
agNewCfgResetControl = _AgNewCfgResetControl_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 112),
    _AgNewCfgResetControl_Type()
)
agNewCfgResetControl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgResetControl.setStatus("current")


class _AgCurCfgSysDlight_Type(Integer32):
    """Custom type agCurCfgSysDlight based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSysDlight_Type.__name__ = "Integer32"
_AgCurCfgSysDlight_Object = MibScalar
agCurCfgSysDlight = _AgCurCfgSysDlight_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 113),
    _AgCurCfgSysDlight_Type()
)
agCurCfgSysDlight.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSysDlight.setStatus("current")


class _AgNewCfgSysDlight_Type(Integer32):
    """Custom type agNewCfgSysDlight based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSysDlight_Type.__name__ = "Integer32"
_AgNewCfgSysDlight_Object = MibScalar
agNewCfgSysDlight = _AgNewCfgSysDlight_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 114),
    _AgNewCfgSysDlight_Type()
)
agNewCfgSysDlight.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSysDlight.setStatus("current")


class _AgCurCfgErrDisableRecovery_Type(Integer32):
    """Custom type agCurCfgErrDisableRecovery based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_AgCurCfgErrDisableRecovery_Type.__name__ = "Integer32"
_AgCurCfgErrDisableRecovery_Object = MibScalar
agCurCfgErrDisableRecovery = _AgCurCfgErrDisableRecovery_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 115),
    _AgCurCfgErrDisableRecovery_Type()
)
agCurCfgErrDisableRecovery.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgErrDisableRecovery.setStatus("current")


class _AgNewCfgErrDisableRecovery_Type(Integer32):
    """Custom type agNewCfgErrDisableRecovery based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_AgNewCfgErrDisableRecovery_Type.__name__ = "Integer32"
_AgNewCfgErrDisableRecovery_Object = MibScalar
agNewCfgErrDisableRecovery = _AgNewCfgErrDisableRecovery_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 116),
    _AgNewCfgErrDisableRecovery_Type()
)
agNewCfgErrDisableRecovery.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgErrDisableRecovery.setStatus("current")


class _AgCurCfgErrDisableTimeout_Type(Integer32):
    """Custom type agCurCfgErrDisableTimeout based on Integer32"""
    defaultValue = 300

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(30, 86400),
    )


_AgCurCfgErrDisableTimeout_Type.__name__ = "Integer32"
_AgCurCfgErrDisableTimeout_Object = MibScalar
agCurCfgErrDisableTimeout = _AgCurCfgErrDisableTimeout_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 117),
    _AgCurCfgErrDisableTimeout_Type()
)
agCurCfgErrDisableTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgErrDisableTimeout.setStatus("current")
if mibBuilder.loadTexts:
    agCurCfgErrDisableTimeout.setUnits("seconds")


class _AgNewCfgErrDisableTimeout_Type(Integer32):
    """Custom type agNewCfgErrDisableTimeout based on Integer32"""
    defaultValue = 300

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(30, 86400),
    )


_AgNewCfgErrDisableTimeout_Type.__name__ = "Integer32"
_AgNewCfgErrDisableTimeout_Object = MibScalar
agNewCfgErrDisableTimeout = _AgNewCfgErrDisableTimeout_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 118),
    _AgNewCfgErrDisableTimeout_Type()
)
agNewCfgErrDisableTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgErrDisableTimeout.setStatus("current")
if mibBuilder.loadTexts:
    agNewCfgErrDisableTimeout.setUnits("seconds")


class _AgCurCfgTelnetAccess_Type(Integer32):
    """Custom type agCurCfgTelnetAccess based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_AgCurCfgTelnetAccess_Type.__name__ = "Integer32"
_AgCurCfgTelnetAccess_Object = MibScalar
agCurCfgTelnetAccess = _AgCurCfgTelnetAccess_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 119),
    _AgCurCfgTelnetAccess_Type()
)
agCurCfgTelnetAccess.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgTelnetAccess.setStatus("current")


class _AgNewCfgTelnetAccess_Type(Integer32):
    """Custom type agNewCfgTelnetAccess based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_AgNewCfgTelnetAccess_Type.__name__ = "Integer32"
_AgNewCfgTelnetAccess_Object = MibScalar
agNewCfgTelnetAccess = _AgNewCfgTelnetAccess_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 120),
    _AgNewCfgTelnetAccess_Type()
)
agNewCfgTelnetAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgTelnetAccess.setStatus("current")


class _AgCurCfgDcbx_Type(Integer32):
    """Custom type agCurCfgDcbx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_AgCurCfgDcbx_Type.__name__ = "Integer32"
_AgCurCfgDcbx_Object = MibScalar
agCurCfgDcbx = _AgCurCfgDcbx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 121),
    _AgCurCfgDcbx_Type()
)
agCurCfgDcbx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgDcbx.setStatus("current")


class _AgNewCfgDcbx_Type(Integer32):
    """Custom type agNewCfgDcbx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_AgNewCfgDcbx_Type.__name__ = "Integer32"
_AgNewCfgDcbx_Object = MibScalar
agNewCfgDcbx = _AgNewCfgDcbx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 122),
    _AgNewCfgDcbx_Type()
)
agNewCfgDcbx.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgDcbx.setStatus("current")
_ServerPortsCurCfgPorts_Type = OctetString
_ServerPortsCurCfgPorts_Object = MibScalar
serverPortsCurCfgPorts = _ServerPortsCurCfgPorts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 127),
    _ServerPortsCurCfgPorts_Type()
)
serverPortsCurCfgPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    serverPortsCurCfgPorts.setStatus("current")
_ServerPortsNewCfgPorts_Type = OctetString
_ServerPortsNewCfgPorts_Object = MibScalar
serverPortsNewCfgPorts = _ServerPortsNewCfgPorts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 128),
    _ServerPortsNewCfgPorts_Type()
)
serverPortsNewCfgPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    serverPortsNewCfgPorts.setStatus("current")
_ServerPortsNewCfgAddPort_Type = PortNumber
_ServerPortsNewCfgAddPort_Object = MibScalar
serverPortsNewCfgAddPort = _ServerPortsNewCfgAddPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 129),
    _ServerPortsNewCfgAddPort_Type()
)
serverPortsNewCfgAddPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    serverPortsNewCfgAddPort.setStatus("current")
_ServerPortsNewCfgRemovePort_Type = PortNumber
_ServerPortsNewCfgRemovePort_Object = MibScalar
serverPortsNewCfgRemovePort = _ServerPortsNewCfgRemovePort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 130),
    _ServerPortsNewCfgRemovePort_Type()
)
serverPortsNewCfgRemovePort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    serverPortsNewCfgRemovePort.setStatus("current")


class _AgCurBootProfile_Type(Integer32):
    """Custom type agCurBootProfile based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("default", 0),
          ("acl", 7),
          ("ipmc-opt-acl-none", 8),
          ("ipmc-opt-acl-128", 9),
          ("ipmc-opt-acl-256", 10),
          ("ipmc-opt-acl-384", 11))
    )


_AgCurBootProfile_Type.__name__ = "Integer32"
_AgCurBootProfile_Object = MibScalar
agCurBootProfile = _AgCurBootProfile_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 131),
    _AgCurBootProfile_Type()
)
agCurBootProfile.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurBootProfile.setStatus("current")


class _AgNewBootProfile_Type(Integer32):
    """Custom type agNewBootProfile based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("default", 0),
          ("acl", 7),
          ("ipmc-opt-acl-none", 8),
          ("ipmc-opt-acl-128", 9),
          ("ipmc-opt-acl-256", 10),
          ("ipmc-opt-acl-384", 11))
    )


_AgNewBootProfile_Type.__name__ = "Integer32"
_AgNewBootProfile_Object = MibScalar
agNewBootProfile = _AgNewBootProfile_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 132),
    _AgNewBootProfile_Type()
)
agNewBootProfile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewBootProfile.setStatus("current")


class _AgNetboot_Type(Integer32):
    """Custom type agNetboot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNetboot_Type.__name__ = "Integer32"
_AgNetboot_Object = MibScalar
agNetboot = _AgNetboot_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 133),
    _AgNetboot_Type()
)
agNetboot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNetboot.setStatus("current")
_AgNetbootTftpAddr_Type = IpAddress
_AgNetbootTftpAddr_Object = MibScalar
agNetbootTftpAddr = _AgNetbootTftpAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 134),
    _AgNetbootTftpAddr_Type()
)
agNetbootTftpAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNetbootTftpAddr.setStatus("current")


class _AgNetbootCfgFile_Type(DisplayString):
    """Custom type agNetbootCfgFile based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 31),
    )


_AgNetbootCfgFile_Type.__name__ = "DisplayString"
_AgNetbootCfgFile_Object = MibScalar
agNetbootCfgFile = _AgNetbootCfgFile_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 135),
    _AgNetbootCfgFile_Type()
)
agNetbootCfgFile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNetbootCfgFile.setStatus("current")


class _AgCurCfgLinkscanMode_Type(Integer32):
    """Custom type agCurCfgLinkscanMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("normal", 1),
          ("fast", 2),
          ("slow", 3))
    )


_AgCurCfgLinkscanMode_Type.__name__ = "Integer32"
_AgCurCfgLinkscanMode_Object = MibScalar
agCurCfgLinkscanMode = _AgCurCfgLinkscanMode_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 136),
    _AgCurCfgLinkscanMode_Type()
)
agCurCfgLinkscanMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgLinkscanMode.setStatus("current")


class _AgNewCfgLinkscanMode_Type(Integer32):
    """Custom type agNewCfgLinkscanMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("normal", 1),
          ("fast", 2),
          ("slow", 3))
    )


_AgNewCfgLinkscanMode_Type.__name__ = "Integer32"
_AgNewCfgLinkscanMode_Object = MibScalar
agNewCfgLinkscanMode = _AgNewCfgLinkscanMode_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 137),
    _AgNewCfgLinkscanMode_Type()
)
agNewCfgLinkscanMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgLinkscanMode.setStatus("current")


class _AgUSBboot_Type(Integer32):
    """Custom type agUSBboot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgUSBboot_Type.__name__ = "Integer32"
_AgUSBboot_Object = MibScalar
agUSBboot = _AgUSBboot_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 138),
    _AgUSBboot_Type()
)
agUSBboot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agUSBboot.setStatus("current")


class _AgCurServiceLED_Type(Integer32):
    """Custom type agCurServiceLED based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_AgCurServiceLED_Type.__name__ = "Integer32"
_AgCurServiceLED_Object = MibScalar
agCurServiceLED = _AgCurServiceLED_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 139),
    _AgCurServiceLED_Type()
)
agCurServiceLED.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurServiceLED.setStatus("current")


class _AgNewServiceLED_Type(Integer32):
    """Custom type agNewServiceLED based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_AgNewServiceLED_Type.__name__ = "Integer32"
_AgNewServiceLED_Object = MibScalar
agNewServiceLED = _AgNewServiceLED_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 140),
    _AgNewServiceLED_Type()
)
agNewServiceLED.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewServiceLED.setStatus("current")


class _AgUSBeject_Type(Integer32):
    """Custom type agUSBeject based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("eject", 1),
          ("usbready", 2),
          ("nousb", 3))
    )


_AgUSBeject_Type.__name__ = "Integer32"
_AgUSBeject_Object = MibScalar
agUSBeject = _AgUSBeject_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 141),
    _AgUSBeject_Type()
)
agUSBeject.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agUSBeject.setStatus("current")


class _AgCurRFC4741NetconfAccess_Type(Integer32):
    """Custom type agCurRFC4741NetconfAccess based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_AgCurRFC4741NetconfAccess_Type.__name__ = "Integer32"
_AgCurRFC4741NetconfAccess_Object = MibScalar
agCurRFC4741NetconfAccess = _AgCurRFC4741NetconfAccess_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 142),
    _AgCurRFC4741NetconfAccess_Type()
)
agCurRFC4741NetconfAccess.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurRFC4741NetconfAccess.setStatus("current")


class _AgNewRFC4741NetconfAccess_Type(Integer32):
    """Custom type agNewRFC4741NetconfAccess based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_AgNewRFC4741NetconfAccess_Type.__name__ = "Integer32"
_AgNewRFC4741NetconfAccess_Object = MibScalar
agNewRFC4741NetconfAccess = _AgNewRFC4741NetconfAccess_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 143),
    _AgNewRFC4741NetconfAccess_Type()
)
agNewRFC4741NetconfAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewRFC4741NetconfAccess.setStatus("current")


class _AgCurRFC4741NetconfSessionTimeout_Type(Integer32):
    """Custom type agCurRFC4741NetconfSessionTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(60, 3600),
    )


_AgCurRFC4741NetconfSessionTimeout_Type.__name__ = "Integer32"
_AgCurRFC4741NetconfSessionTimeout_Object = MibScalar
agCurRFC4741NetconfSessionTimeout = _AgCurRFC4741NetconfSessionTimeout_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 144),
    _AgCurRFC4741NetconfSessionTimeout_Type()
)
agCurRFC4741NetconfSessionTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurRFC4741NetconfSessionTimeout.setStatus("current")


class _AgNewRFC4741NetconfSessionTimeout_Type(Integer32):
    """Custom type agNewRFC4741NetconfSessionTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(60, 3600),
    )


_AgNewRFC4741NetconfSessionTimeout_Type.__name__ = "Integer32"
_AgNewRFC4741NetconfSessionTimeout_Object = MibScalar
agNewRFC4741NetconfSessionTimeout = _AgNewRFC4741NetconfSessionTimeout_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 145),
    _AgNewRFC4741NetconfSessionTimeout_Type()
)
agNewRFC4741NetconfSessionTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewRFC4741NetconfSessionTimeout.setStatus("current")


class _AgCurRFC4741NetconfSshAccess_Type(Integer32):
    """Custom type agCurRFC4741NetconfSshAccess based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_AgCurRFC4741NetconfSshAccess_Type.__name__ = "Integer32"
_AgCurRFC4741NetconfSshAccess_Object = MibScalar
agCurRFC4741NetconfSshAccess = _AgCurRFC4741NetconfSshAccess_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 146),
    _AgCurRFC4741NetconfSshAccess_Type()
)
agCurRFC4741NetconfSshAccess.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurRFC4741NetconfSshAccess.setStatus("current")


class _AgNewRFC4741NetconfSshAccess_Type(Integer32):
    """Custom type agNewRFC4741NetconfSshAccess based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_AgNewRFC4741NetconfSshAccess_Type.__name__ = "Integer32"
_AgNewRFC4741NetconfSshAccess_Object = MibScalar
agNewRFC4741NetconfSshAccess = _AgNewRFC4741NetconfSshAccess_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 147),
    _AgNewRFC4741NetconfSshAccess_Type()
)
agNewRFC4741NetconfSshAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewRFC4741NetconfSshAccess.setStatus("current")


class _AgCurRFC4741NetconfSshPort_Type(Integer32):
    """Custom type agCurRFC4741NetconfSshPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_AgCurRFC4741NetconfSshPort_Type.__name__ = "Integer32"
_AgCurRFC4741NetconfSshPort_Object = MibScalar
agCurRFC4741NetconfSshPort = _AgCurRFC4741NetconfSshPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 148),
    _AgCurRFC4741NetconfSshPort_Type()
)
agCurRFC4741NetconfSshPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurRFC4741NetconfSshPort.setStatus("current")


class _AgNewRFC4741NetconfSshPort_Type(Integer32):
    """Custom type agNewRFC4741NetconfSshPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_AgNewRFC4741NetconfSshPort_Type.__name__ = "Integer32"
_AgNewRFC4741NetconfSshPort_Object = MibScalar
agNewRFC4741NetconfSshPort = _AgNewRFC4741NetconfSshPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 149),
    _AgNewRFC4741NetconfSshPort_Type()
)
agNewRFC4741NetconfSshPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewRFC4741NetconfSshPort.setStatus("current")


class _AgCurCfgLFDStatus_Type(Integer32):
    """Custom type agCurCfgLFDStatus based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_AgCurCfgLFDStatus_Type.__name__ = "Integer32"
_AgCurCfgLFDStatus_Object = MibScalar
agCurCfgLFDStatus = _AgCurCfgLFDStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 158),
    _AgCurCfgLFDStatus_Type()
)
agCurCfgLFDStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgLFDStatus.setStatus("current")


class _AgNewCfgLFDStatus_Type(Integer32):
    """Custom type agNewCfgLFDStatus based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_AgNewCfgLFDStatus_Type.__name__ = "Integer32"
_AgNewCfgLFDStatus_Object = MibScalar
agNewCfgLFDStatus = _AgNewCfgLFDStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 159),
    _AgNewCfgLFDStatus_Type()
)
agNewCfgLFDStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgLFDStatus.setStatus("current")


class _AgCurCfgLFDFlaps_Type(Integer32):
    """Custom type agCurCfgLFDFlaps based on Integer32"""
    defaultValue = 5

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_AgCurCfgLFDFlaps_Type.__name__ = "Integer32"
_AgCurCfgLFDFlaps_Object = MibScalar
agCurCfgLFDFlaps = _AgCurCfgLFDFlaps_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 160),
    _AgCurCfgLFDFlaps_Type()
)
agCurCfgLFDFlaps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgLFDFlaps.setStatus("current")


class _AgNewCfgLFDFlaps_Type(Integer32):
    """Custom type agNewCfgLFDFlaps based on Integer32"""
    defaultValue = 5

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_AgNewCfgLFDFlaps_Type.__name__ = "Integer32"
_AgNewCfgLFDFlaps_Object = MibScalar
agNewCfgLFDFlaps = _AgNewCfgLFDFlaps_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 161),
    _AgNewCfgLFDFlaps_Type()
)
agNewCfgLFDFlaps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgLFDFlaps.setStatus("current")


class _AgCurCfgLFDTime_Type(Integer32):
    """Custom type agCurCfgLFDTime based on Integer32"""
    defaultValue = 30

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 500),
    )


_AgCurCfgLFDTime_Type.__name__ = "Integer32"
_AgCurCfgLFDTime_Object = MibScalar
agCurCfgLFDTime = _AgCurCfgLFDTime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 162),
    _AgCurCfgLFDTime_Type()
)
agCurCfgLFDTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgLFDTime.setStatus("current")
if mibBuilder.loadTexts:
    agCurCfgLFDTime.setUnits("seconds")


class _AgNewCfgLFDTime_Type(Integer32):
    """Custom type agNewCfgLFDTime based on Integer32"""
    defaultValue = 30

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 500),
    )


_AgNewCfgLFDTime_Type.__name__ = "Integer32"
_AgNewCfgLFDTime_Object = MibScalar
agNewCfgLFDTime = _AgNewCfgLFDTime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 163),
    _AgNewCfgLFDTime_Type()
)
agNewCfgLFDTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgLFDTime.setStatus("current")
if mibBuilder.loadTexts:
    agNewCfgLFDTime.setUnits("seconds")
_AgCurCfgTrapSrcLoopIf_Type = Integer32
_AgCurCfgTrapSrcLoopIf_Object = MibScalar
agCurCfgTrapSrcLoopIf = _AgCurCfgTrapSrcLoopIf_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 164),
    _AgCurCfgTrapSrcLoopIf_Type()
)
agCurCfgTrapSrcLoopIf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgTrapSrcLoopIf.setStatus("current")
_AgNewCfgTrapSrcLoopIf_Type = Integer32
_AgNewCfgTrapSrcLoopIf_Object = MibScalar
agNewCfgTrapSrcLoopIf = _AgNewCfgTrapSrcLoopIf_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 165),
    _AgNewCfgTrapSrcLoopIf_Type()
)
agNewCfgTrapSrcLoopIf.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgTrapSrcLoopIf.setStatus("current")


class _AgCfgMtm_Type(Integer32):
    """Custom type agCfgMtm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("mtmValue1", 1),
          ("mtmValue2", 2),
          ("mtmValue3", 3),
          ("mtmValue4", 4),
          ("mtmValue5", 5),
          ("mtmValue6", 6))
    )


_AgCfgMtm_Type.__name__ = "Integer32"
_AgCfgMtm_Object = MibScalar
agCfgMtm = _AgCfgMtm_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 166),
    _AgCfgMtm_Type()
)
agCfgMtm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agCfgMtm.setStatus("current")


class _AgNewSecurityMode_Type(Integer32):
    """Custom type agNewSecurityMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("compatibility", 0),
          ("strict", 1),
          ("strictsnmpolduser", 2))
    )


_AgNewSecurityMode_Type.__name__ = "Integer32"
_AgNewSecurityMode_Object = MibScalar
agNewSecurityMode = _AgNewSecurityMode_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 177),
    _AgNewSecurityMode_Type()
)
agNewSecurityMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewSecurityMode.setStatus("current")


class _AgNewCfgSslVersionLevel_Type(Integer32):
    """Custom type agNewCfgSslVersionLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("tls10", 1),
          ("tls11", 2),
          ("tls12", 3))
    )


_AgNewCfgSslVersionLevel_Type.__name__ = "Integer32"
_AgNewCfgSslVersionLevel_Object = MibScalar
agNewCfgSslVersionLevel = _AgNewCfgSslVersionLevel_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 178),
    _AgNewCfgSslVersionLevel_Type()
)
agNewCfgSslVersionLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSslVersionLevel.setStatus("current")


class _AgCurCfgSslVersionLevel_Type(Integer32):
    """Custom type agCurCfgSslVersionLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("tls10", 1),
          ("tls11", 2),
          ("tls12", 3))
    )


_AgCurCfgSslVersionLevel_Type.__name__ = "Integer32"
_AgCurCfgSslVersionLevel_Object = MibScalar
agCurCfgSslVersionLevel = _AgCurCfgSslVersionLevel_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 179),
    _AgCurCfgSslVersionLevel_Type()
)
agCurCfgSslVersionLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSslVersionLevel.setStatus("current")


class _AgCurSecurityMode_Type(Integer32):
    """Custom type agCurSecurityMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("compatibility", 0),
          ("strict", 1),
          ("strictsnmpolduser", 2))
    )


_AgCurSecurityMode_Type.__name__ = "Integer32"
_AgCurSecurityMode_Object = MibScalar
agCurSecurityMode = _AgCurSecurityMode_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 180),
    _AgCurSecurityMode_Type()
)
agCurSecurityMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurSecurityMode.setStatus("current")
_AgCurCfgTrapHostTable_Object = MibTable
agCurCfgTrapHostTable = _AgCurCfgTrapHostTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 184)
)
if mibBuilder.loadTexts:
    agCurCfgTrapHostTable.setStatus("current")
_AgCurCfgTrapHostEntry_Object = MibTableRow
agCurCfgTrapHostEntry = _AgCurCfgTrapHostEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 184, 1)
)
agCurCfgTrapHostEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "agCurCfgTrapHostIndex"),
)
if mibBuilder.loadTexts:
    agCurCfgTrapHostEntry.setStatus("current")
_AgCurCfgTrapHostIndex_Type = Integer32
_AgCurCfgTrapHostIndex_Object = MibTableColumn
agCurCfgTrapHostIndex = _AgCurCfgTrapHostIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 184, 1, 1),
    _AgCurCfgTrapHostIndex_Type()
)
agCurCfgTrapHostIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgTrapHostIndex.setStatus("current")
_AgCurCfgTrapHostAddress_Type = DisplayString
_AgCurCfgTrapHostAddress_Object = MibTableColumn
agCurCfgTrapHostAddress = _AgCurCfgTrapHostAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 184, 1, 2),
    _AgCurCfgTrapHostAddress_Type()
)
agCurCfgTrapHostAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgTrapHostAddress.setStatus("current")


class _AgCurCfgTrapHostCommStr_Type(DisplayString):
    """Custom type agCurCfgTrapHostCommStr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_AgCurCfgTrapHostCommStr_Type.__name__ = "DisplayString"
_AgCurCfgTrapHostCommStr_Object = MibTableColumn
agCurCfgTrapHostCommStr = _AgCurCfgTrapHostCommStr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 184, 1, 3),
    _AgCurCfgTrapHostCommStr_Type()
)
agCurCfgTrapHostCommStr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgTrapHostCommStr.setStatus("current")
_AgNewCfgTrapHostTable_Object = MibTable
agNewCfgTrapHostTable = _AgNewCfgTrapHostTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 185)
)
if mibBuilder.loadTexts:
    agNewCfgTrapHostTable.setStatus("current")
_AgNewCfgTrapHostEntry_Object = MibTableRow
agNewCfgTrapHostEntry = _AgNewCfgTrapHostEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 185, 1)
)
agNewCfgTrapHostEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "agNewCfgTrapHostIndex"),
)
if mibBuilder.loadTexts:
    agNewCfgTrapHostEntry.setStatus("current")
_AgNewCfgTrapHostIndex_Type = Integer32
_AgNewCfgTrapHostIndex_Object = MibTableColumn
agNewCfgTrapHostIndex = _AgNewCfgTrapHostIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 185, 1, 1),
    _AgNewCfgTrapHostIndex_Type()
)
agNewCfgTrapHostIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agNewCfgTrapHostIndex.setStatus("current")
_AgNewCfgTrapHostAddress_Type = DisplayString
_AgNewCfgTrapHostAddress_Object = MibTableColumn
agNewCfgTrapHostAddress = _AgNewCfgTrapHostAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 185, 1, 2),
    _AgNewCfgTrapHostAddress_Type()
)
agNewCfgTrapHostAddress.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agNewCfgTrapHostAddress.setStatus("current")


class _AgNewCfgTrapHostCommStr_Type(DisplayString):
    """Custom type agNewCfgTrapHostCommStr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_AgNewCfgTrapHostCommStr_Type.__name__ = "DisplayString"
_AgNewCfgTrapHostCommStr_Object = MibTableColumn
agNewCfgTrapHostCommStr = _AgNewCfgTrapHostCommStr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 185, 1, 3),
    _AgNewCfgTrapHostCommStr_Type()
)
agNewCfgTrapHostCommStr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agNewCfgTrapHostCommStr.setStatus("current")


class _AgNewCfgTrapHostDelete_Type(Integer32):
    """Custom type agNewCfgTrapHostDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_AgNewCfgTrapHostDelete_Type.__name__ = "Integer32"
_AgNewCfgTrapHostDelete_Object = MibTableColumn
agNewCfgTrapHostDelete = _AgNewCfgTrapHostDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 1, 185, 1, 4),
    _AgNewCfgTrapHostDelete_Type()
)
agNewCfgTrapHostDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agNewCfgTrapHostDelete.setStatus("current")
_AgPortConfig_ObjectIdentity = ObjectIdentity
agPortConfig = _AgPortConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2)
)
_AgPortTableMaxEnt_Type = Integer32
_AgPortTableMaxEnt_Object = MibScalar
agPortTableMaxEnt = _AgPortTableMaxEnt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 1),
    _AgPortTableMaxEnt_Type()
)
agPortTableMaxEnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortTableMaxEnt.setStatus("current")
_AgPortCurCfgTable_Object = MibTable
agPortCurCfgTable = _AgPortCurCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2)
)
if mibBuilder.loadTexts:
    agPortCurCfgTable.setStatus("current")
_AgPortCurCfgTableEntry_Object = MibTableRow
agPortCurCfgTableEntry = _AgPortCurCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2, 1)
)
agPortCurCfgTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "agPortCurCfgIndx"),
)
if mibBuilder.loadTexts:
    agPortCurCfgTableEntry.setStatus("current")
_AgPortCurCfgIndx_Type = PortNumber
_AgPortCurCfgIndx_Object = MibTableColumn
agPortCurCfgIndx = _AgPortCurCfgIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2, 1, 1),
    _AgPortCurCfgIndx_Type()
)
agPortCurCfgIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgIndx.setStatus("current")


class _AgPortCurCfgState_Type(Integer32):
    """Custom type agPortCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_AgPortCurCfgState_Type.__name__ = "Integer32"
_AgPortCurCfgState_Object = MibTableColumn
agPortCurCfgState = _AgPortCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2, 1, 2),
    _AgPortCurCfgState_Type()
)
agPortCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgState.setStatus("current")


class _AgPortCurCfgVlanTag_Type(Integer32):
    """Custom type agPortCurCfgVlanTag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("tagged", 2),
          ("untagged", 3))
    )


_AgPortCurCfgVlanTag_Type.__name__ = "Integer32"
_AgPortCurCfgVlanTag_Object = MibTableColumn
agPortCurCfgVlanTag = _AgPortCurCfgVlanTag_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2, 1, 3),
    _AgPortCurCfgVlanTag_Type()
)
agPortCurCfgVlanTag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgVlanTag.setStatus("current")


class _AgPortCurCfgRmon_Type(Integer32):
    """Custom type agPortCurCfgRmon based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("on", 2),
          ("off", 3))
    )


_AgPortCurCfgRmon_Type.__name__ = "Integer32"
_AgPortCurCfgRmon_Object = MibTableColumn
agPortCurCfgRmon = _AgPortCurCfgRmon_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2, 1, 5),
    _AgPortCurCfgRmon_Type()
)
agPortCurCfgRmon.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgRmon.setStatus("current")
_AgPortCurCfgPVID_Type = Integer32
_AgPortCurCfgPVID_Object = MibTableColumn
agPortCurCfgPVID = _AgPortCurCfgPVID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2, 1, 6),
    _AgPortCurCfgPVID_Type()
)
agPortCurCfgPVID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgPVID.setStatus("current")


class _AgPortCurCfgGigEthAutoNeg_Type(Integer32):
    """Custom type agPortCurCfgGigEthAutoNeg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("on", 2),
          ("off", 3))
    )


_AgPortCurCfgGigEthAutoNeg_Type.__name__ = "Integer32"
_AgPortCurCfgGigEthAutoNeg_Object = MibTableColumn
agPortCurCfgGigEthAutoNeg = _AgPortCurCfgGigEthAutoNeg_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2, 1, 11),
    _AgPortCurCfgGigEthAutoNeg_Type()
)
agPortCurCfgGigEthAutoNeg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgGigEthAutoNeg.setStatus("current")


class _AgPortCurCfgGigEthFctl_Type(Integer32):
    """Custom type agPortCurCfgGigEthFctl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("transmit", 2),
          ("receive", 3),
          ("both", 4),
          ("none", 5))
    )


_AgPortCurCfgGigEthFctl_Type.__name__ = "Integer32"
_AgPortCurCfgGigEthFctl_Object = MibTableColumn
agPortCurCfgGigEthFctl = _AgPortCurCfgGigEthFctl_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2, 1, 12),
    _AgPortCurCfgGigEthFctl_Type()
)
agPortCurCfgGigEthFctl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgGigEthFctl.setStatus("current")


class _AgPortCurCfgPortName_Type(DisplayString):
    """Custom type agPortCurCfgPortName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 63),
    )


_AgPortCurCfgPortName_Type.__name__ = "DisplayString"
_AgPortCurCfgPortName_Object = MibTableColumn
agPortCurCfgPortName = _AgPortCurCfgPortName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2, 1, 13),
    _AgPortCurCfgPortName_Type()
)
agPortCurCfgPortName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgPortName.setStatus("current")


class _AgPortCurCfgLinkTrap_Type(Integer32):
    """Custom type agPortCurCfgLinkTrap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgPortCurCfgLinkTrap_Type.__name__ = "Integer32"
_AgPortCurCfgLinkTrap_Object = MibTableColumn
agPortCurCfgLinkTrap = _AgPortCurCfgLinkTrap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2, 1, 16),
    _AgPortCurCfgLinkTrap_Type()
)
agPortCurCfgLinkTrap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgLinkTrap.setStatus("current")


class _AgPortCurCfgGigEthSpeed_Type(Integer32):
    """Custom type agPortCurCfgGigEthSpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("mbs10", 2),
          ("mbs100", 3),
          ("any", 4),
          ("mbs1000", 5),
          ("mbs10000", 6),
          ("mbs40000", 7))
    )


_AgPortCurCfgGigEthSpeed_Type.__name__ = "Integer32"
_AgPortCurCfgGigEthSpeed_Object = MibTableColumn
agPortCurCfgGigEthSpeed = _AgPortCurCfgGigEthSpeed_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2, 1, 21),
    _AgPortCurCfgGigEthSpeed_Type()
)
agPortCurCfgGigEthSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgGigEthSpeed.setStatus("current")


class _AgPortCurCfgGigEthMode_Type(Integer32):
    """Custom type agPortCurCfgGigEthMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("full-duplex", 2),
          ("half-duplex", 3),
          ("any", 4))
    )


_AgPortCurCfgGigEthMode_Type.__name__ = "Integer32"
_AgPortCurCfgGigEthMode_Object = MibTableColumn
agPortCurCfgGigEthMode = _AgPortCurCfgGigEthMode_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2, 1, 22),
    _AgPortCurCfgGigEthMode_Type()
)
agPortCurCfgGigEthMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgGigEthMode.setStatus("current")


class _AgPortCurCfgDscpRemarking_Type(Integer32):
    """Custom type agPortCurCfgDscpRemarking based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgPortCurCfgDscpRemarking_Type.__name__ = "Integer32"
_AgPortCurCfgDscpRemarking_Object = MibTableColumn
agPortCurCfgDscpRemarking = _AgPortCurCfgDscpRemarking_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2, 1, 23),
    _AgPortCurCfgDscpRemarking_Type()
)
agPortCurCfgDscpRemarking.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgDscpRemarking.setStatus("current")


class _AgPortCurCfgPortAlias_Type(DisplayString):
    """Custom type agPortCurCfgPortAlias based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 15),
    )


_AgPortCurCfgPortAlias_Type.__name__ = "DisplayString"
_AgPortCurCfgPortAlias_Object = MibTableColumn
agPortCurCfgPortAlias = _AgPortCurCfgPortAlias_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2, 1, 24),
    _AgPortCurCfgPortAlias_Type()
)
agPortCurCfgPortAlias.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgPortAlias.setStatus("current")


class _AgPortCurCfgTagPVID_Type(Integer32):
    """Custom type agPortCurCfgTagPVID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("tagged", 2),
          ("untagged", 3))
    )


_AgPortCurCfgTagPVID_Type.__name__ = "Integer32"
_AgPortCurCfgTagPVID_Object = MibTableColumn
agPortCurCfgTagPVID = _AgPortCurCfgTagPVID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2, 1, 25),
    _AgPortCurCfgTagPVID_Type()
)
agPortCurCfgTagPVID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgTagPVID.setStatus("current")


class _AgPortCurCfgLearning_Type(Integer32):
    """Custom type agPortCurCfgLearning based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgPortCurCfgLearning_Type.__name__ = "Integer32"
_AgPortCurCfgLearning_Object = MibTableColumn
agPortCurCfgLearning = _AgPortCurCfgLearning_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2, 1, 26),
    _AgPortCurCfgLearning_Type()
)
agPortCurCfgLearning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgLearning.setStatus("current")


class _AgPortCurCfgFloodBlocking_Type(Integer32):
    """Custom type agPortCurCfgFloodBlocking based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgPortCurCfgFloodBlocking_Type.__name__ = "Integer32"
_AgPortCurCfgFloodBlocking_Object = MibTableColumn
agPortCurCfgFloodBlocking = _AgPortCurCfgFloodBlocking_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2, 1, 27),
    _AgPortCurCfgFloodBlocking_Type()
)
agPortCurCfgFloodBlocking.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgFloodBlocking.setStatus("current")


class _AgPortCurCfgType_Type(DisplayString):
    """Custom type agPortCurCfgType based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 7),
    )


_AgPortCurCfgType_Type.__name__ = "DisplayString"
_AgPortCurCfgType_Object = MibTableColumn
agPortCurCfgType = _AgPortCurCfgType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2, 1, 29),
    _AgPortCurCfgType_Type()
)
agPortCurCfgType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgType.setStatus("current")


class _AgPortCurCfgLinkType_Type(Integer32):
    """Custom type agPortCurCfgLinkType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("p2p", 2),
          ("shared", 3))
    )


_AgPortCurCfgLinkType_Type.__name__ = "Integer32"
_AgPortCurCfgLinkType_Object = MibTableColumn
agPortCurCfgLinkType = _AgPortCurCfgLinkType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2, 1, 30),
    _AgPortCurCfgLinkType_Type()
)
agPortCurCfgLinkType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgLinkType.setStatus("current")


class _AgPortCurCfgEdge_Type(Integer32):
    """Custom type agPortCurCfgEdge based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgPortCurCfgEdge_Type.__name__ = "Integer32"
_AgPortCurCfgEdge_Object = MibTableColumn
agPortCurCfgEdge = _AgPortCurCfgEdge_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2, 1, 31),
    _AgPortCurCfgEdge_Type()
)
agPortCurCfgEdge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgEdge.setStatus("current")


class _AgPortCurCfgErrDisableRecovery_Type(Integer32):
    """Custom type agPortCurCfgErrDisableRecovery based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_AgPortCurCfgErrDisableRecovery_Type.__name__ = "Integer32"
_AgPortCurCfgErrDisableRecovery_Object = MibTableColumn
agPortCurCfgErrDisableRecovery = _AgPortCurCfgErrDisableRecovery_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2, 1, 35),
    _AgPortCurCfgErrDisableRecovery_Type()
)
agPortCurCfgErrDisableRecovery.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgErrDisableRecovery.setStatus("current")


class _AgPortCurCfgUdld_Type(Integer32):
    """Custom type agPortCurCfgUdld based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgPortCurCfgUdld_Type.__name__ = "Integer32"
_AgPortCurCfgUdld_Object = MibTableColumn
agPortCurCfgUdld = _AgPortCurCfgUdld_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2, 1, 37),
    _AgPortCurCfgUdld_Type()
)
agPortCurCfgUdld.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgUdld.setStatus("current")


class _AgPortCurCfgUdldMode_Type(Integer32):
    """Custom type agPortCurCfgUdldMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("normal", 1),
          ("aggressive", 2))
    )


_AgPortCurCfgUdldMode_Type.__name__ = "Integer32"
_AgPortCurCfgUdldMode_Object = MibTableColumn
agPortCurCfgUdldMode = _AgPortCurCfgUdldMode_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2, 1, 38),
    _AgPortCurCfgUdldMode_Type()
)
agPortCurCfgUdldMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgUdldMode.setStatus("current")


class _AgPortCurCfgOam_Type(Integer32):
    """Custom type agPortCurCfgOam based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgPortCurCfgOam_Type.__name__ = "Integer32"
_AgPortCurCfgOam_Object = MibTableColumn
agPortCurCfgOam = _AgPortCurCfgOam_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2, 1, 39),
    _AgPortCurCfgOam_Type()
)
agPortCurCfgOam.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgOam.setStatus("current")


class _AgPortCurCfgOamMode_Type(Integer32):
    """Custom type agPortCurCfgOamMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("passive", 2))
    )


_AgPortCurCfgOamMode_Type.__name__ = "Integer32"
_AgPortCurCfgOamMode_Object = MibTableColumn
agPortCurCfgOamMode = _AgPortCurCfgOamMode_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2, 1, 40),
    _AgPortCurCfgOamMode_Type()
)
agPortCurCfgOamMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgOamMode.setStatus("current")


class _AgPortCurCfgBpduGuard_Type(Integer32):
    """Custom type agPortCurCfgBpduGuard based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgPortCurCfgBpduGuard_Type.__name__ = "Integer32"
_AgPortCurCfgBpduGuard_Object = MibTableColumn
agPortCurCfgBpduGuard = _AgPortCurCfgBpduGuard_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2, 1, 41),
    _AgPortCurCfgBpduGuard_Type()
)
agPortCurCfgBpduGuard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgBpduGuard.setStatus("current")


class _AgPortCurCfgMulticastThreshold_Type(Integer32):
    """Custom type agPortCurCfgMulticastThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgPortCurCfgMulticastThreshold_Type.__name__ = "Integer32"
_AgPortCurCfgMulticastThreshold_Object = MibTableColumn
agPortCurCfgMulticastThreshold = _AgPortCurCfgMulticastThreshold_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2, 1, 42),
    _AgPortCurCfgMulticastThreshold_Type()
)
agPortCurCfgMulticastThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgMulticastThreshold.setStatus("current")
_AgPortCurCfgMulticastThresholdRate_Type = Integer32
_AgPortCurCfgMulticastThresholdRate_Object = MibTableColumn
agPortCurCfgMulticastThresholdRate = _AgPortCurCfgMulticastThresholdRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2, 1, 43),
    _AgPortCurCfgMulticastThresholdRate_Type()
)
agPortCurCfgMulticastThresholdRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgMulticastThresholdRate.setStatus("current")


class _AgPortCurCfgBroadcastThreshold_Type(Integer32):
    """Custom type agPortCurCfgBroadcastThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgPortCurCfgBroadcastThreshold_Type.__name__ = "Integer32"
_AgPortCurCfgBroadcastThreshold_Object = MibTableColumn
agPortCurCfgBroadcastThreshold = _AgPortCurCfgBroadcastThreshold_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2, 1, 44),
    _AgPortCurCfgBroadcastThreshold_Type()
)
agPortCurCfgBroadcastThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgBroadcastThreshold.setStatus("current")
_AgPortCurCfgBroadcastThresholdRate_Type = Integer32
_AgPortCurCfgBroadcastThresholdRate_Object = MibTableColumn
agPortCurCfgBroadcastThresholdRate = _AgPortCurCfgBroadcastThresholdRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2, 1, 45),
    _AgPortCurCfgBroadcastThresholdRate_Type()
)
agPortCurCfgBroadcastThresholdRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgBroadcastThresholdRate.setStatus("current")


class _AgPortCurCfgDLFThreshold_Type(Integer32):
    """Custom type agPortCurCfgDLFThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgPortCurCfgDLFThreshold_Type.__name__ = "Integer32"
_AgPortCurCfgDLFThreshold_Object = MibTableColumn
agPortCurCfgDLFThreshold = _AgPortCurCfgDLFThreshold_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2, 1, 46),
    _AgPortCurCfgDLFThreshold_Type()
)
agPortCurCfgDLFThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgDLFThreshold.setStatus("current")
_AgPortCurCfgDLFThresholdRate_Type = Integer32
_AgPortCurCfgDLFThresholdRate_Object = MibTableColumn
agPortCurCfgDLFThresholdRate = _AgPortCurCfgDLFThresholdRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2, 1, 47),
    _AgPortCurCfgDLFThresholdRate_Type()
)
agPortCurCfgDLFThresholdRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgDLFThresholdRate.setStatus("current")


class _AgPortCurCfgMacAddrNotif_Type(Integer32):
    """Custom type agPortCurCfgMacAddrNotif based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_AgPortCurCfgMacAddrNotif_Type.__name__ = "Integer32"
_AgPortCurCfgMacAddrNotif_Object = MibTableColumn
agPortCurCfgMacAddrNotif = _AgPortCurCfgMacAddrNotif_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2, 1, 48),
    _AgPortCurCfgMacAddrNotif_Type()
)
agPortCurCfgMacAddrNotif.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgMacAddrNotif.setStatus("current")


class _AgPortCurCfgStpExtGuard_Type(Integer32):
    """Custom type agPortCurCfgStpExtGuard based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("default", 0),
          ("loop", 1),
          ("root", 2),
          ("none", 3))
    )


_AgPortCurCfgStpExtGuard_Type.__name__ = "Integer32"
_AgPortCurCfgStpExtGuard_Object = MibTableColumn
agPortCurCfgStpExtGuard = _AgPortCurCfgStpExtGuard_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2, 1, 52),
    _AgPortCurCfgStpExtGuard_Type()
)
agPortCurCfgStpExtGuard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgStpExtGuard.setStatus("current")


class _AgPortCurCfgLFDStatus_Type(Integer32):
    """Custom type agPortCurCfgLFDStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_AgPortCurCfgLFDStatus_Type.__name__ = "Integer32"
_AgPortCurCfgLFDStatus_Object = MibTableColumn
agPortCurCfgLFDStatus = _AgPortCurCfgLFDStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2, 1, 53),
    _AgPortCurCfgLFDStatus_Type()
)
agPortCurCfgLFDStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgLFDStatus.setStatus("current")


class _AgPortCurCfgPrivateVlanStatus_Type(Integer32):
    """Custom type agPortCurCfgPrivateVlanStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_AgPortCurCfgPrivateVlanStatus_Type.__name__ = "Integer32"
_AgPortCurCfgPrivateVlanStatus_Object = MibTableColumn
agPortCurCfgPrivateVlanStatus = _AgPortCurCfgPrivateVlanStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2, 1, 61),
    _AgPortCurCfgPrivateVlanStatus_Type()
)
agPortCurCfgPrivateVlanStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgPrivateVlanStatus.setStatus("current")
_AgPortCurCfgMappedPrimaryVlans_Type = OctetString
_AgPortCurCfgMappedPrimaryVlans_Object = MibTableColumn
agPortCurCfgMappedPrimaryVlans = _AgPortCurCfgMappedPrimaryVlans_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2, 1, 62),
    _AgPortCurCfgMappedPrimaryVlans_Type()
)
agPortCurCfgMappedPrimaryVlans.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgMappedPrimaryVlans.setStatus("current")
_AgPortCurCfgAssociatedSecondaryVlans_Type = OctetString
_AgPortCurCfgAssociatedSecondaryVlans_Object = MibTableColumn
agPortCurCfgAssociatedSecondaryVlans = _AgPortCurCfgAssociatedSecondaryVlans_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 2, 1, 63),
    _AgPortCurCfgAssociatedSecondaryVlans_Type()
)
agPortCurCfgAssociatedSecondaryVlans.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgAssociatedSecondaryVlans.setStatus("current")
_AgPortNewCfgTable_Object = MibTable
agPortNewCfgTable = _AgPortNewCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3)
)
if mibBuilder.loadTexts:
    agPortNewCfgTable.setStatus("current")
_AgPortNewCfgTableEntry_Object = MibTableRow
agPortNewCfgTableEntry = _AgPortNewCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1)
)
agPortNewCfgTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "agPortNewCfgIndx"),
)
if mibBuilder.loadTexts:
    agPortNewCfgTableEntry.setStatus("current")
_AgPortNewCfgIndx_Type = PortNumber
_AgPortNewCfgIndx_Object = MibTableColumn
agPortNewCfgIndx = _AgPortNewCfgIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 1),
    _AgPortNewCfgIndx_Type()
)
agPortNewCfgIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortNewCfgIndx.setStatus("current")


class _AgPortNewCfgState_Type(Integer32):
    """Custom type agPortNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_AgPortNewCfgState_Type.__name__ = "Integer32"
_AgPortNewCfgState_Object = MibTableColumn
agPortNewCfgState = _AgPortNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 2),
    _AgPortNewCfgState_Type()
)
agPortNewCfgState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgState.setStatus("current")


class _AgPortNewCfgVlanTag_Type(Integer32):
    """Custom type agPortNewCfgVlanTag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("tagged", 2),
          ("untagged", 3))
    )


_AgPortNewCfgVlanTag_Type.__name__ = "Integer32"
_AgPortNewCfgVlanTag_Object = MibTableColumn
agPortNewCfgVlanTag = _AgPortNewCfgVlanTag_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 3),
    _AgPortNewCfgVlanTag_Type()
)
agPortNewCfgVlanTag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgVlanTag.setStatus("current")


class _AgPortNewCfgRmon_Type(Integer32):
    """Custom type agPortNewCfgRmon based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("on", 2),
          ("off", 3))
    )


_AgPortNewCfgRmon_Type.__name__ = "Integer32"
_AgPortNewCfgRmon_Object = MibTableColumn
agPortNewCfgRmon = _AgPortNewCfgRmon_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 5),
    _AgPortNewCfgRmon_Type()
)
agPortNewCfgRmon.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgRmon.setStatus("current")
_AgPortNewCfgPVID_Type = Integer32
_AgPortNewCfgPVID_Object = MibTableColumn
agPortNewCfgPVID = _AgPortNewCfgPVID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 6),
    _AgPortNewCfgPVID_Type()
)
agPortNewCfgPVID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgPVID.setStatus("current")


class _AgPortNewCfgGigEthAutoNeg_Type(Integer32):
    """Custom type agPortNewCfgGigEthAutoNeg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("on", 2),
          ("off", 3))
    )


_AgPortNewCfgGigEthAutoNeg_Type.__name__ = "Integer32"
_AgPortNewCfgGigEthAutoNeg_Object = MibTableColumn
agPortNewCfgGigEthAutoNeg = _AgPortNewCfgGigEthAutoNeg_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 11),
    _AgPortNewCfgGigEthAutoNeg_Type()
)
agPortNewCfgGigEthAutoNeg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgGigEthAutoNeg.setStatus("current")


class _AgPortNewCfgGigEthFctl_Type(Integer32):
    """Custom type agPortNewCfgGigEthFctl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("transmit", 2),
          ("receive", 3),
          ("both", 4),
          ("none", 5))
    )


_AgPortNewCfgGigEthFctl_Type.__name__ = "Integer32"
_AgPortNewCfgGigEthFctl_Object = MibTableColumn
agPortNewCfgGigEthFctl = _AgPortNewCfgGigEthFctl_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 12),
    _AgPortNewCfgGigEthFctl_Type()
)
agPortNewCfgGigEthFctl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgGigEthFctl.setStatus("current")


class _AgPortNewCfgPortName_Type(DisplayString):
    """Custom type agPortNewCfgPortName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_AgPortNewCfgPortName_Type.__name__ = "DisplayString"
_AgPortNewCfgPortName_Object = MibTableColumn
agPortNewCfgPortName = _AgPortNewCfgPortName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 13),
    _AgPortNewCfgPortName_Type()
)
agPortNewCfgPortName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgPortName.setStatus("current")


class _AgPortNewCfgLinkTrap_Type(Integer32):
    """Custom type agPortNewCfgLinkTrap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgPortNewCfgLinkTrap_Type.__name__ = "Integer32"
_AgPortNewCfgLinkTrap_Object = MibTableColumn
agPortNewCfgLinkTrap = _AgPortNewCfgLinkTrap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 16),
    _AgPortNewCfgLinkTrap_Type()
)
agPortNewCfgLinkTrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgLinkTrap.setStatus("current")


class _AgPortNewCfgGigEthSpeed_Type(Integer32):
    """Custom type agPortNewCfgGigEthSpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("mbs10", 2),
          ("mbs100", 3),
          ("any", 4),
          ("mbs1000", 5),
          ("mbs10000", 6),
          ("mbs40000", 7))
    )


_AgPortNewCfgGigEthSpeed_Type.__name__ = "Integer32"
_AgPortNewCfgGigEthSpeed_Object = MibTableColumn
agPortNewCfgGigEthSpeed = _AgPortNewCfgGigEthSpeed_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 21),
    _AgPortNewCfgGigEthSpeed_Type()
)
agPortNewCfgGigEthSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgGigEthSpeed.setStatus("current")


class _AgPortNewCfgGigEthMode_Type(Integer32):
    """Custom type agPortNewCfgGigEthMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("full-duplex", 2),
          ("half-duplex", 3),
          ("any", 4))
    )


_AgPortNewCfgGigEthMode_Type.__name__ = "Integer32"
_AgPortNewCfgGigEthMode_Object = MibTableColumn
agPortNewCfgGigEthMode = _AgPortNewCfgGigEthMode_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 22),
    _AgPortNewCfgGigEthMode_Type()
)
agPortNewCfgGigEthMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgGigEthMode.setStatus("current")


class _AgPortNewCfgDscpRemarking_Type(Integer32):
    """Custom type agPortNewCfgDscpRemarking based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgPortNewCfgDscpRemarking_Type.__name__ = "Integer32"
_AgPortNewCfgDscpRemarking_Object = MibTableColumn
agPortNewCfgDscpRemarking = _AgPortNewCfgDscpRemarking_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 23),
    _AgPortNewCfgDscpRemarking_Type()
)
agPortNewCfgDscpRemarking.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgDscpRemarking.setStatus("current")


class _AgPortNewCfgTagPVID_Type(Integer32):
    """Custom type agPortNewCfgTagPVID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("tagged", 2),
          ("untagged", 3))
    )


_AgPortNewCfgTagPVID_Type.__name__ = "Integer32"
_AgPortNewCfgTagPVID_Object = MibTableColumn
agPortNewCfgTagPVID = _AgPortNewCfgTagPVID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 25),
    _AgPortNewCfgTagPVID_Type()
)
agPortNewCfgTagPVID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgTagPVID.setStatus("current")


class _AgPortNewCfgLearning_Type(Integer32):
    """Custom type agPortNewCfgLearning based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgPortNewCfgLearning_Type.__name__ = "Integer32"
_AgPortNewCfgLearning_Object = MibTableColumn
agPortNewCfgLearning = _AgPortNewCfgLearning_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 26),
    _AgPortNewCfgLearning_Type()
)
agPortNewCfgLearning.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgLearning.setStatus("current")


class _AgPortNewCfgFloodBlocking_Type(Integer32):
    """Custom type agPortNewCfgFloodBlocking based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgPortNewCfgFloodBlocking_Type.__name__ = "Integer32"
_AgPortNewCfgFloodBlocking_Object = MibTableColumn
agPortNewCfgFloodBlocking = _AgPortNewCfgFloodBlocking_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 27),
    _AgPortNewCfgFloodBlocking_Type()
)
agPortNewCfgFloodBlocking.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgFloodBlocking.setStatus("current")


class _AgPortNewCfgType_Type(DisplayString):
    """Custom type agPortNewCfgType based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 7),
    )


_AgPortNewCfgType_Type.__name__ = "DisplayString"
_AgPortNewCfgType_Object = MibTableColumn
agPortNewCfgType = _AgPortNewCfgType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 29),
    _AgPortNewCfgType_Type()
)
agPortNewCfgType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortNewCfgType.setStatus("current")


class _AgPortNewCfgLinkType_Type(Integer32):
    """Custom type agPortNewCfgLinkType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("p2p", 2),
          ("shared", 3))
    )


_AgPortNewCfgLinkType_Type.__name__ = "Integer32"
_AgPortNewCfgLinkType_Object = MibTableColumn
agPortNewCfgLinkType = _AgPortNewCfgLinkType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 30),
    _AgPortNewCfgLinkType_Type()
)
agPortNewCfgLinkType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agPortNewCfgLinkType.setStatus("current")


class _AgPortNewCfgEdge_Type(Integer32):
    """Custom type agPortNewCfgEdge based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgPortNewCfgEdge_Type.__name__ = "Integer32"
_AgPortNewCfgEdge_Object = MibTableColumn
agPortNewCfgEdge = _AgPortNewCfgEdge_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 31),
    _AgPortNewCfgEdge_Type()
)
agPortNewCfgEdge.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agPortNewCfgEdge.setStatus("current")


class _AgPortNewCfgErrDisableRecovery_Type(Integer32):
    """Custom type agPortNewCfgErrDisableRecovery based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_AgPortNewCfgErrDisableRecovery_Type.__name__ = "Integer32"
_AgPortNewCfgErrDisableRecovery_Object = MibTableColumn
agPortNewCfgErrDisableRecovery = _AgPortNewCfgErrDisableRecovery_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 35),
    _AgPortNewCfgErrDisableRecovery_Type()
)
agPortNewCfgErrDisableRecovery.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgErrDisableRecovery.setStatus("current")


class _AgPortNewCfgUdld_Type(Integer32):
    """Custom type agPortNewCfgUdld based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgPortNewCfgUdld_Type.__name__ = "Integer32"
_AgPortNewCfgUdld_Object = MibTableColumn
agPortNewCfgUdld = _AgPortNewCfgUdld_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 37),
    _AgPortNewCfgUdld_Type()
)
agPortNewCfgUdld.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgUdld.setStatus("current")


class _AgPortNewCfgUdldMode_Type(Integer32):
    """Custom type agPortNewCfgUdldMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("normal", 1),
          ("aggressive", 2))
    )


_AgPortNewCfgUdldMode_Type.__name__ = "Integer32"
_AgPortNewCfgUdldMode_Object = MibTableColumn
agPortNewCfgUdldMode = _AgPortNewCfgUdldMode_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 38),
    _AgPortNewCfgUdldMode_Type()
)
agPortNewCfgUdldMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgUdldMode.setStatus("current")


class _AgPortNewCfgOam_Type(Integer32):
    """Custom type agPortNewCfgOam based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgPortNewCfgOam_Type.__name__ = "Integer32"
_AgPortNewCfgOam_Object = MibTableColumn
agPortNewCfgOam = _AgPortNewCfgOam_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 39),
    _AgPortNewCfgOam_Type()
)
agPortNewCfgOam.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgOam.setStatus("current")


class _AgPortNewCfgOamMode_Type(Integer32):
    """Custom type agPortNewCfgOamMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("passive", 2))
    )


_AgPortNewCfgOamMode_Type.__name__ = "Integer32"
_AgPortNewCfgOamMode_Object = MibTableColumn
agPortNewCfgOamMode = _AgPortNewCfgOamMode_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 40),
    _AgPortNewCfgOamMode_Type()
)
agPortNewCfgOamMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgOamMode.setStatus("current")


class _AgPortNewCfgBpduGuard_Type(Integer32):
    """Custom type agPortNewCfgBpduGuard based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgPortNewCfgBpduGuard_Type.__name__ = "Integer32"
_AgPortNewCfgBpduGuard_Object = MibTableColumn
agPortNewCfgBpduGuard = _AgPortNewCfgBpduGuard_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 41),
    _AgPortNewCfgBpduGuard_Type()
)
agPortNewCfgBpduGuard.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgBpduGuard.setStatus("current")


class _AgPortNewCfgMulticastThreshold_Type(Integer32):
    """Custom type agPortNewCfgMulticastThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgPortNewCfgMulticastThreshold_Type.__name__ = "Integer32"
_AgPortNewCfgMulticastThreshold_Object = MibTableColumn
agPortNewCfgMulticastThreshold = _AgPortNewCfgMulticastThreshold_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 42),
    _AgPortNewCfgMulticastThreshold_Type()
)
agPortNewCfgMulticastThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgMulticastThreshold.setStatus("current")
_AgPortNewCfgMulticastThresholdRate_Type = Integer32
_AgPortNewCfgMulticastThresholdRate_Object = MibTableColumn
agPortNewCfgMulticastThresholdRate = _AgPortNewCfgMulticastThresholdRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 43),
    _AgPortNewCfgMulticastThresholdRate_Type()
)
agPortNewCfgMulticastThresholdRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgMulticastThresholdRate.setStatus("current")


class _AgPortNewCfgBroadcastThreshold_Type(Integer32):
    """Custom type agPortNewCfgBroadcastThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgPortNewCfgBroadcastThreshold_Type.__name__ = "Integer32"
_AgPortNewCfgBroadcastThreshold_Object = MibTableColumn
agPortNewCfgBroadcastThreshold = _AgPortNewCfgBroadcastThreshold_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 44),
    _AgPortNewCfgBroadcastThreshold_Type()
)
agPortNewCfgBroadcastThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgBroadcastThreshold.setStatus("current")
_AgPortNewCfgBroadcastThresholdRate_Type = Integer32
_AgPortNewCfgBroadcastThresholdRate_Object = MibTableColumn
agPortNewCfgBroadcastThresholdRate = _AgPortNewCfgBroadcastThresholdRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 45),
    _AgPortNewCfgBroadcastThresholdRate_Type()
)
agPortNewCfgBroadcastThresholdRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgBroadcastThresholdRate.setStatus("current")


class _AgPortNewCfgDLFThreshold_Type(Integer32):
    """Custom type agPortNewCfgDLFThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgPortNewCfgDLFThreshold_Type.__name__ = "Integer32"
_AgPortNewCfgDLFThreshold_Object = MibTableColumn
agPortNewCfgDLFThreshold = _AgPortNewCfgDLFThreshold_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 46),
    _AgPortNewCfgDLFThreshold_Type()
)
agPortNewCfgDLFThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgDLFThreshold.setStatus("current")
_AgPortNewCfgDLFThresholdRate_Type = Integer32
_AgPortNewCfgDLFThresholdRate_Object = MibTableColumn
agPortNewCfgDLFThresholdRate = _AgPortNewCfgDLFThresholdRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 47),
    _AgPortNewCfgDLFThresholdRate_Type()
)
agPortNewCfgDLFThresholdRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgDLFThresholdRate.setStatus("current")


class _AgPortNewCfgMacAddrNotif_Type(Integer32):
    """Custom type agPortNewCfgMacAddrNotif based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_AgPortNewCfgMacAddrNotif_Type.__name__ = "Integer32"
_AgPortNewCfgMacAddrNotif_Object = MibTableColumn
agPortNewCfgMacAddrNotif = _AgPortNewCfgMacAddrNotif_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 48),
    _AgPortNewCfgMacAddrNotif_Type()
)
agPortNewCfgMacAddrNotif.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgMacAddrNotif.setStatus("current")


class _AgPortNewCfgStpExtGuard_Type(Integer32):
    """Custom type agPortNewCfgStpExtGuard based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("default", 0),
          ("loop", 1),
          ("root", 2),
          ("none", 3))
    )


_AgPortNewCfgStpExtGuard_Type.__name__ = "Integer32"
_AgPortNewCfgStpExtGuard_Object = MibTableColumn
agPortNewCfgStpExtGuard = _AgPortNewCfgStpExtGuard_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 52),
    _AgPortNewCfgStpExtGuard_Type()
)
agPortNewCfgStpExtGuard.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgStpExtGuard.setStatus("current")


class _AgPortNewCfgLFDStatus_Type(Integer32):
    """Custom type agPortNewCfgLFDStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_AgPortNewCfgLFDStatus_Type.__name__ = "Integer32"
_AgPortNewCfgLFDStatus_Object = MibTableColumn
agPortNewCfgLFDStatus = _AgPortNewCfgLFDStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 53),
    _AgPortNewCfgLFDStatus_Type()
)
agPortNewCfgLFDStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgLFDStatus.setStatus("current")


class _AgPortNewCfgPrivateVlanStatus_Type(Integer32):
    """Custom type agPortNewCfgPrivateVlanStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_AgPortNewCfgPrivateVlanStatus_Type.__name__ = "Integer32"
_AgPortNewCfgPrivateVlanStatus_Object = MibTableColumn
agPortNewCfgPrivateVlanStatus = _AgPortNewCfgPrivateVlanStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 61),
    _AgPortNewCfgPrivateVlanStatus_Type()
)
agPortNewCfgPrivateVlanStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgPrivateVlanStatus.setStatus("current")
_AgPortNewCfgMappedPrimaryVlans_Type = OctetString
_AgPortNewCfgMappedPrimaryVlans_Object = MibTableColumn
agPortNewCfgMappedPrimaryVlans = _AgPortNewCfgMappedPrimaryVlans_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 62),
    _AgPortNewCfgMappedPrimaryVlans_Type()
)
agPortNewCfgMappedPrimaryVlans.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortNewCfgMappedPrimaryVlans.setStatus("current")
_AgPortNewCfgAddPrimaryVlan_Type = Unsigned32
_AgPortNewCfgAddPrimaryVlan_Object = MibTableColumn
agPortNewCfgAddPrimaryVlan = _AgPortNewCfgAddPrimaryVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 63),
    _AgPortNewCfgAddPrimaryVlan_Type()
)
agPortNewCfgAddPrimaryVlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgAddPrimaryVlan.setStatus("current")
_AgPortNewCfgDelPrimaryVlan_Type = Unsigned32
_AgPortNewCfgDelPrimaryVlan_Object = MibTableColumn
agPortNewCfgDelPrimaryVlan = _AgPortNewCfgDelPrimaryVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 64),
    _AgPortNewCfgDelPrimaryVlan_Type()
)
agPortNewCfgDelPrimaryVlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgDelPrimaryVlan.setStatus("current")
_AgPortNewCfgAssociatedSecondaryVlans_Type = OctetString
_AgPortNewCfgAssociatedSecondaryVlans_Object = MibTableColumn
agPortNewCfgAssociatedSecondaryVlans = _AgPortNewCfgAssociatedSecondaryVlans_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 65),
    _AgPortNewCfgAssociatedSecondaryVlans_Type()
)
agPortNewCfgAssociatedSecondaryVlans.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortNewCfgAssociatedSecondaryVlans.setStatus("current")
_AgPortNewCfgAddSecondaryVlan_Type = Unsigned32
_AgPortNewCfgAddSecondaryVlan_Object = MibTableColumn
agPortNewCfgAddSecondaryVlan = _AgPortNewCfgAddSecondaryVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 66),
    _AgPortNewCfgAddSecondaryVlan_Type()
)
agPortNewCfgAddSecondaryVlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgAddSecondaryVlan.setStatus("current")
_AgPortNewCfgDelSecondaryVlan_Type = Unsigned32
_AgPortNewCfgDelSecondaryVlan_Object = MibTableColumn
agPortNewCfgDelSecondaryVlan = _AgPortNewCfgDelSecondaryVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 2, 3, 1, 67),
    _AgPortNewCfgDelSecondaryVlan_Type()
)
agPortNewCfgDelSecondaryVlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgDelSecondaryVlan.setStatus("current")
_AgRadiusConfig_ObjectIdentity = ObjectIdentity
agRadiusConfig = _AgRadiusConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 3)
)
_RadCurCfgPrimaryServer_Type = IpAddress
_RadCurCfgPrimaryServer_Object = MibScalar
radCurCfgPrimaryServer = _RadCurCfgPrimaryServer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 3, 1),
    _RadCurCfgPrimaryServer_Type()
)
radCurCfgPrimaryServer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radCurCfgPrimaryServer.setStatus("current")
_RadNewCfgPrimaryServer_Type = IpAddress
_RadNewCfgPrimaryServer_Object = MibScalar
radNewCfgPrimaryServer = _RadNewCfgPrimaryServer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 3, 2),
    _RadNewCfgPrimaryServer_Type()
)
radNewCfgPrimaryServer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radNewCfgPrimaryServer.setStatus("current")
_RadCurCfgSecondaryServer_Type = IpAddress
_RadCurCfgSecondaryServer_Object = MibScalar
radCurCfgSecondaryServer = _RadCurCfgSecondaryServer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 3, 3),
    _RadCurCfgSecondaryServer_Type()
)
radCurCfgSecondaryServer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radCurCfgSecondaryServer.setStatus("current")
_RadNewCfgSecondaryServer_Type = IpAddress
_RadNewCfgSecondaryServer_Object = MibScalar
radNewCfgSecondaryServer = _RadNewCfgSecondaryServer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 3, 4),
    _RadNewCfgSecondaryServer_Type()
)
radNewCfgSecondaryServer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radNewCfgSecondaryServer.setStatus("current")


class _RadCurCfgPort_Type(Integer32):
    """Custom type radCurCfgPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1500, 3000),
    )


_RadCurCfgPort_Type.__name__ = "Integer32"
_RadCurCfgPort_Object = MibScalar
radCurCfgPort = _RadCurCfgPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 3, 5),
    _RadCurCfgPort_Type()
)
radCurCfgPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radCurCfgPort.setStatus("current")


class _RadNewCfgPort_Type(Integer32):
    """Custom type radNewCfgPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1500, 3000),
    )


_RadNewCfgPort_Type.__name__ = "Integer32"
_RadNewCfgPort_Object = MibScalar
radNewCfgPort = _RadNewCfgPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 3, 6),
    _RadNewCfgPort_Type()
)
radNewCfgPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radNewCfgPort.setStatus("current")


class _RadCurCfgTimeout_Type(Integer32):
    """Custom type radCurCfgTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RadCurCfgTimeout_Type.__name__ = "Integer32"
_RadCurCfgTimeout_Object = MibScalar
radCurCfgTimeout = _RadCurCfgTimeout_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 3, 7),
    _RadCurCfgTimeout_Type()
)
radCurCfgTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radCurCfgTimeout.setStatus("current")


class _RadNewCfgTimeout_Type(Integer32):
    """Custom type radNewCfgTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RadNewCfgTimeout_Type.__name__ = "Integer32"
_RadNewCfgTimeout_Object = MibScalar
radNewCfgTimeout = _RadNewCfgTimeout_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 3, 8),
    _RadNewCfgTimeout_Type()
)
radNewCfgTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radNewCfgTimeout.setStatus("current")


class _RadCurCfgRetries_Type(Integer32):
    """Custom type radCurCfgRetries based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3),
    )


_RadCurCfgRetries_Type.__name__ = "Integer32"
_RadCurCfgRetries_Object = MibScalar
radCurCfgRetries = _RadCurCfgRetries_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 3, 9),
    _RadCurCfgRetries_Type()
)
radCurCfgRetries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radCurCfgRetries.setStatus("current")


class _RadNewCfgRetries_Type(Integer32):
    """Custom type radNewCfgRetries based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3),
    )


_RadNewCfgRetries_Type.__name__ = "Integer32"
_RadNewCfgRetries_Object = MibScalar
radNewCfgRetries = _RadNewCfgRetries_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 3, 10),
    _RadNewCfgRetries_Type()
)
radNewCfgRetries.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radNewCfgRetries.setStatus("current")


class _RadCurCfgState_Type(Integer32):
    """Custom type radCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RadCurCfgState_Type.__name__ = "Integer32"
_RadCurCfgState_Object = MibScalar
radCurCfgState = _RadCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 3, 11),
    _RadCurCfgState_Type()
)
radCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radCurCfgState.setStatus("current")


class _RadNewCfgState_Type(Integer32):
    """Custom type radNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_RadNewCfgState_Type.__name__ = "Integer32"
_RadNewCfgState_Object = MibScalar
radNewCfgState = _RadNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 3, 12),
    _RadNewCfgState_Type()
)
radNewCfgState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radNewCfgState.setStatus("current")


class _RadCurCfgAuthenString_Type(DisplayString):
    """Custom type radCurCfgAuthenString based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_RadCurCfgAuthenString_Type.__name__ = "DisplayString"
_RadCurCfgAuthenString_Object = MibScalar
radCurCfgAuthenString = _RadCurCfgAuthenString_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 3, 13),
    _RadCurCfgAuthenString_Type()
)
radCurCfgAuthenString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radCurCfgAuthenString.setStatus("current")


class _RadNewCfgAuthenString_Type(DisplayString):
    """Custom type radNewCfgAuthenString based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_RadNewCfgAuthenString_Type.__name__ = "DisplayString"
_RadNewCfgAuthenString_Object = MibScalar
radNewCfgAuthenString = _RadNewCfgAuthenString_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 3, 14),
    _RadNewCfgAuthenString_Type()
)
radNewCfgAuthenString.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radNewCfgAuthenString.setStatus("current")


class _RadCurCfgBackdoor_Type(Integer32):
    """Custom type radCurCfgBackdoor based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RadCurCfgBackdoor_Type.__name__ = "Integer32"
_RadCurCfgBackdoor_Object = MibScalar
radCurCfgBackdoor = _RadCurCfgBackdoor_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 3, 15),
    _RadCurCfgBackdoor_Type()
)
radCurCfgBackdoor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radCurCfgBackdoor.setStatus("current")


class _RadNewCfgBackdoor_Type(Integer32):
    """Custom type radNewCfgBackdoor based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RadNewCfgBackdoor_Type.__name__ = "Integer32"
_RadNewCfgBackdoor_Object = MibScalar
radNewCfgBackdoor = _RadNewCfgBackdoor_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 3, 16),
    _RadNewCfgBackdoor_Type()
)
radNewCfgBackdoor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radNewCfgBackdoor.setStatus("current")


class _RadCurCfgAuthenSecondString_Type(DisplayString):
    """Custom type radCurCfgAuthenSecondString based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_RadCurCfgAuthenSecondString_Type.__name__ = "DisplayString"
_RadCurCfgAuthenSecondString_Object = MibScalar
radCurCfgAuthenSecondString = _RadCurCfgAuthenSecondString_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 3, 17),
    _RadCurCfgAuthenSecondString_Type()
)
radCurCfgAuthenSecondString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radCurCfgAuthenSecondString.setStatus("current")


class _RadNewCfgAuthenSecondString_Type(DisplayString):
    """Custom type radNewCfgAuthenSecondString based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_RadNewCfgAuthenSecondString_Type.__name__ = "DisplayString"
_RadNewCfgAuthenSecondString_Object = MibScalar
radNewCfgAuthenSecondString = _RadNewCfgAuthenSecondString_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 3, 18),
    _RadNewCfgAuthenSecondString_Type()
)
radNewCfgAuthenSecondString.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radNewCfgAuthenSecondString.setStatus("current")


class _RadCurCfgSecBd_Type(Integer32):
    """Custom type radCurCfgSecBd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RadCurCfgSecBd_Type.__name__ = "Integer32"
_RadCurCfgSecBd_Object = MibScalar
radCurCfgSecBd = _RadCurCfgSecBd_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 3, 19),
    _RadCurCfgSecBd_Type()
)
radCurCfgSecBd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radCurCfgSecBd.setStatus("current")


class _RadNewCfgSecBd_Type(Integer32):
    """Custom type radNewCfgSecBd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RadNewCfgSecBd_Type.__name__ = "Integer32"
_RadNewCfgSecBd_Object = MibScalar
radNewCfgSecBd = _RadNewCfgSecBd_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 3, 20),
    _RadNewCfgSecBd_Type()
)
radNewCfgSecBd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radNewCfgSecBd.setStatus("current")


class _RadCurCfgPorttoUse_Type(Integer32):
    """Custom type radCurCfgPorttoUse based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("data", 1),
          ("mgt", 2))
    )


_RadCurCfgPorttoUse_Type.__name__ = "Integer32"
_RadCurCfgPorttoUse_Object = MibScalar
radCurCfgPorttoUse = _RadCurCfgPorttoUse_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 3, 21),
    _RadCurCfgPorttoUse_Type()
)
radCurCfgPorttoUse.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radCurCfgPorttoUse.setStatus("current")


class _RadNewCfgPorttoUse_Type(Integer32):
    """Custom type radNewCfgPorttoUse based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("data", 1),
          ("mgt", 2))
    )


_RadNewCfgPorttoUse_Type.__name__ = "Integer32"
_RadNewCfgPorttoUse_Object = MibScalar
radNewCfgPorttoUse = _RadNewCfgPorttoUse_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 3, 22),
    _RadNewCfgPorttoUse_Type()
)
radNewCfgPorttoUse.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radNewCfgPorttoUse.setStatus("current")


class _RadCurCfgSecPorttoUse_Type(Integer32):
    """Custom type radCurCfgSecPorttoUse based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("data", 1),
          ("mgt", 2))
    )


_RadCurCfgSecPorttoUse_Type.__name__ = "Integer32"
_RadCurCfgSecPorttoUse_Object = MibScalar
radCurCfgSecPorttoUse = _RadCurCfgSecPorttoUse_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 3, 23),
    _RadCurCfgSecPorttoUse_Type()
)
radCurCfgSecPorttoUse.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radCurCfgSecPorttoUse.setStatus("current")


class _RadNewCfgSecPorttoUse_Type(Integer32):
    """Custom type radNewCfgSecPorttoUse based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("data", 1),
          ("mgt", 2))
    )


_RadNewCfgSecPorttoUse_Type.__name__ = "Integer32"
_RadNewCfgSecPorttoUse_Object = MibScalar
radNewCfgSecPorttoUse = _RadNewCfgSecPorttoUse_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 3, 24),
    _RadNewCfgSecPorttoUse_Type()
)
radNewCfgSecPorttoUse.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radNewCfgSecPorttoUse.setStatus("current")
_RadCurCfgSrcLoopIf_Type = Integer32
_RadCurCfgSrcLoopIf_Object = MibScalar
radCurCfgSrcLoopIf = _RadCurCfgSrcLoopIf_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 3, 25),
    _RadCurCfgSrcLoopIf_Type()
)
radCurCfgSrcLoopIf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radCurCfgSrcLoopIf.setStatus("current")
_RadNewCfgSrcLoopIf_Type = Integer32
_RadNewCfgSrcLoopIf_Object = MibScalar
radNewCfgSrcLoopIf = _RadNewCfgSrcLoopIf_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 3, 26),
    _RadNewCfgSrcLoopIf_Type()
)
radNewCfgSrcLoopIf.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radNewCfgSrcLoopIf.setStatus("current")
_AgNTP_ObjectIdentity = ObjectIdentity
agNTP = _AgNTP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 4)
)


class _AgCurCfgNTPServer_Type(DisplayString):
    """Custom type agCurCfgNTPServer based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 46),
    )


_AgCurCfgNTPServer_Type.__name__ = "DisplayString"
_AgCurCfgNTPServer_Object = MibScalar
agCurCfgNTPServer = _AgCurCfgNTPServer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 4, 1),
    _AgCurCfgNTPServer_Type()
)
agCurCfgNTPServer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgNTPServer.setStatus("current")


class _AgNewCfgNTPServer_Type(DisplayString):
    """Custom type agNewCfgNTPServer based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 46),
    )


_AgNewCfgNTPServer_Type.__name__ = "DisplayString"
_AgNewCfgNTPServer_Object = MibScalar
agNewCfgNTPServer = _AgNewCfgNTPServer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 4, 2),
    _AgNewCfgNTPServer_Type()
)
agNewCfgNTPServer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgNTPServer.setStatus("current")


class _AgCurCfgNTPResyncInterval_Type(Integer32):
    """Custom type agCurCfgNTPResyncInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 44640),
    )


_AgCurCfgNTPResyncInterval_Type.__name__ = "Integer32"
_AgCurCfgNTPResyncInterval_Object = MibScalar
agCurCfgNTPResyncInterval = _AgCurCfgNTPResyncInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 4, 3),
    _AgCurCfgNTPResyncInterval_Type()
)
agCurCfgNTPResyncInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgNTPResyncInterval.setStatus("current")


class _AgNewCfgNTPResyncInterval_Type(Integer32):
    """Custom type agNewCfgNTPResyncInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 44640),
    )


_AgNewCfgNTPResyncInterval_Type.__name__ = "Integer32"
_AgNewCfgNTPResyncInterval_Object = MibScalar
agNewCfgNTPResyncInterval = _AgNewCfgNTPResyncInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 4, 4),
    _AgNewCfgNTPResyncInterval_Type()
)
agNewCfgNTPResyncInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgNTPResyncInterval.setStatus("current")


class _AgCurCfgNTPService_Type(Integer32):
    """Custom type agCurCfgNTPService based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgNTPService_Type.__name__ = "Integer32"
_AgCurCfgNTPService_Object = MibScalar
agCurCfgNTPService = _AgCurCfgNTPService_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 4, 9),
    _AgCurCfgNTPService_Type()
)
agCurCfgNTPService.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgNTPService.setStatus("current")


class _AgNewCfgNTPService_Type(Integer32):
    """Custom type agNewCfgNTPService based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgNTPService_Type.__name__ = "Integer32"
_AgNewCfgNTPService_Object = MibScalar
agNewCfgNTPService = _AgNewCfgNTPService_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 4, 10),
    _AgNewCfgNTPService_Type()
)
agNewCfgNTPService.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgNTPService.setStatus("current")


class _AgCurCfgNTPSecServer_Type(DisplayString):
    """Custom type agCurCfgNTPSecServer based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 46),
    )


_AgCurCfgNTPSecServer_Type.__name__ = "DisplayString"
_AgCurCfgNTPSecServer_Object = MibScalar
agCurCfgNTPSecServer = _AgCurCfgNTPSecServer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 4, 11),
    _AgCurCfgNTPSecServer_Type()
)
agCurCfgNTPSecServer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgNTPSecServer.setStatus("current")


class _AgNewCfgNTPSecServer_Type(DisplayString):
    """Custom type agNewCfgNTPSecServer based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 46),
    )


_AgNewCfgNTPSecServer_Type.__name__ = "DisplayString"
_AgNewCfgNTPSecServer_Object = MibScalar
agNewCfgNTPSecServer = _AgNewCfgNTPSecServer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 4, 12),
    _AgNewCfgNTPSecServer_Type()
)
agNewCfgNTPSecServer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgNTPSecServer.setStatus("current")


class _AgCurCfgNTPServerPort_Type(Integer32):
    """Custom type agCurCfgNTPServerPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("data", 1),
          ("mgt", 2))
    )


_AgCurCfgNTPServerPort_Type.__name__ = "Integer32"
_AgCurCfgNTPServerPort_Object = MibScalar
agCurCfgNTPServerPort = _AgCurCfgNTPServerPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 4, 13),
    _AgCurCfgNTPServerPort_Type()
)
agCurCfgNTPServerPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgNTPServerPort.setStatus("current")


class _AgNewCfgNTPServerPort_Type(Integer32):
    """Custom type agNewCfgNTPServerPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("data", 1),
          ("mgt", 2))
    )


_AgNewCfgNTPServerPort_Type.__name__ = "Integer32"
_AgNewCfgNTPServerPort_Object = MibScalar
agNewCfgNTPServerPort = _AgNewCfgNTPServerPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 4, 14),
    _AgNewCfgNTPServerPort_Type()
)
agNewCfgNTPServerPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgNTPServerPort.setStatus("current")


class _AgCurCfgNTPSecServerPort_Type(Integer32):
    """Custom type agCurCfgNTPSecServerPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("data", 1),
          ("mgt", 2))
    )


_AgCurCfgNTPSecServerPort_Type.__name__ = "Integer32"
_AgCurCfgNTPSecServerPort_Object = MibScalar
agCurCfgNTPSecServerPort = _AgCurCfgNTPSecServerPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 4, 15),
    _AgCurCfgNTPSecServerPort_Type()
)
agCurCfgNTPSecServerPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgNTPSecServerPort.setStatus("current")


class _AgNewCfgNTPSecServerPort_Type(Integer32):
    """Custom type agNewCfgNTPSecServerPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("data", 1),
          ("mgt", 2))
    )


_AgNewCfgNTPSecServerPort_Type.__name__ = "Integer32"
_AgNewCfgNTPSecServerPort_Object = MibScalar
agNewCfgNTPSecServerPort = _AgNewCfgNTPSecServerPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 4, 16),
    _AgNewCfgNTPSecServerPort_Type()
)
agNewCfgNTPSecServerPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgNTPSecServerPort.setStatus("current")
_AgCurCfgNTPSrcLoopIf_Type = Integer32
_AgCurCfgNTPSrcLoopIf_Object = MibScalar
agCurCfgNTPSrcLoopIf = _AgCurCfgNTPSrcLoopIf_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 4, 17),
    _AgCurCfgNTPSrcLoopIf_Type()
)
agCurCfgNTPSrcLoopIf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgNTPSrcLoopIf.setStatus("current")
_AgNewCfgNTPSrcLoopIf_Type = Integer32
_AgNewCfgNTPSrcLoopIf_Object = MibScalar
agNewCfgNTPSrcLoopIf = _AgNewCfgNTPSrcLoopIf_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 4, 18),
    _AgNewCfgNTPSrcLoopIf_Type()
)
agNewCfgNTPSrcLoopIf.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgNTPSrcLoopIf.setStatus("current")
_AgSyslog_ObjectIdentity = ObjectIdentity
agSyslog = _AgSyslog_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5)
)
_AgCurCfgSyslogHost_Type = DisplayString
_AgCurCfgSyslogHost_Object = MibScalar
agCurCfgSyslogHost = _AgCurCfgSyslogHost_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 1),
    _AgCurCfgSyslogHost_Type()
)
agCurCfgSyslogHost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogHost.setStatus("current")
_AgNewCfgSyslogHost_Type = DisplayString
_AgNewCfgSyslogHost_Object = MibScalar
agNewCfgSyslogHost = _AgNewCfgSyslogHost_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 2),
    _AgNewCfgSyslogHost_Type()
)
agNewCfgSyslogHost.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogHost.setStatus("current")
_AgCurCfgSyslog2Host_Type = DisplayString
_AgCurCfgSyslog2Host_Object = MibScalar
agCurCfgSyslog2Host = _AgCurCfgSyslog2Host_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 3),
    _AgCurCfgSyslog2Host_Type()
)
agCurCfgSyslog2Host.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslog2Host.setStatus("current")
_AgNewCfgSyslog2Host_Type = DisplayString
_AgNewCfgSyslog2Host_Object = MibScalar
agNewCfgSyslog2Host = _AgNewCfgSyslog2Host_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 4),
    _AgNewCfgSyslog2Host_Type()
)
agNewCfgSyslog2Host.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslog2Host.setStatus("current")


class _AgCurCfgSyslogFac_Type(Integer32):
    """Custom type agCurCfgSyslogFac based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("local0", 1),
          ("local1", 2),
          ("local2", 3),
          ("local3", 4),
          ("local4", 5),
          ("local5", 6),
          ("local6", 7),
          ("local7", 8))
    )


_AgCurCfgSyslogFac_Type.__name__ = "Integer32"
_AgCurCfgSyslogFac_Object = MibScalar
agCurCfgSyslogFac = _AgCurCfgSyslogFac_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 5),
    _AgCurCfgSyslogFac_Type()
)
agCurCfgSyslogFac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogFac.setStatus("current")


class _AgNewCfgSyslogFac_Type(Integer32):
    """Custom type agNewCfgSyslogFac based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("local0", 1),
          ("local1", 2),
          ("local2", 3),
          ("local3", 4),
          ("local4", 5),
          ("local5", 6),
          ("local6", 7),
          ("local7", 8))
    )


_AgNewCfgSyslogFac_Type.__name__ = "Integer32"
_AgNewCfgSyslogFac_Object = MibScalar
agNewCfgSyslogFac = _AgNewCfgSyslogFac_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 6),
    _AgNewCfgSyslogFac_Type()
)
agNewCfgSyslogFac.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogFac.setStatus("current")


class _AgCurCfgSyslog2Fac_Type(Integer32):
    """Custom type agCurCfgSyslog2Fac based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("local0", 1),
          ("local1", 2),
          ("local2", 3),
          ("local3", 4),
          ("local4", 5),
          ("local5", 6),
          ("local6", 7),
          ("local7", 8))
    )


_AgCurCfgSyslog2Fac_Type.__name__ = "Integer32"
_AgCurCfgSyslog2Fac_Object = MibScalar
agCurCfgSyslog2Fac = _AgCurCfgSyslog2Fac_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 7),
    _AgCurCfgSyslog2Fac_Type()
)
agCurCfgSyslog2Fac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslog2Fac.setStatus("current")


class _AgNewCfgSyslog2Fac_Type(Integer32):
    """Custom type agNewCfgSyslog2Fac based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("local0", 1),
          ("local1", 2),
          ("local2", 3),
          ("local3", 4),
          ("local4", 5),
          ("local5", 6),
          ("local6", 7),
          ("local7", 8))
    )


_AgNewCfgSyslog2Fac_Type.__name__ = "Integer32"
_AgNewCfgSyslog2Fac_Object = MibScalar
agNewCfgSyslog2Fac = _AgNewCfgSyslog2Fac_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 8),
    _AgNewCfgSyslog2Fac_Type()
)
agNewCfgSyslog2Fac.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslog2Fac.setStatus("current")


class _AgClrSyslogMsgs_Type(Integer32):
    """Custom type agClrSyslogMsgs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("reset", 2))
    )


_AgClrSyslogMsgs_Type.__name__ = "Integer32"
_AgClrSyslogMsgs_Object = MibScalar
agClrSyslogMsgs = _AgClrSyslogMsgs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 9),
    _AgClrSyslogMsgs_Type()
)
agClrSyslogMsgs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agClrSyslogMsgs.setStatus("current")
_AgSyslogMsgTableMaxSize_Type = Integer32
_AgSyslogMsgTableMaxSize_Object = MibScalar
agSyslogMsgTableMaxSize = _AgSyslogMsgTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 10),
    _AgSyslogMsgTableMaxSize_Type()
)
agSyslogMsgTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agSyslogMsgTableMaxSize.setStatus("current")
_AgSyslogMsgTable_Object = MibTable
agSyslogMsgTable = _AgSyslogMsgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 11)
)
if mibBuilder.loadTexts:
    agSyslogMsgTable.setStatus("current")
_AgSyslogMsgTableEntry_Object = MibTableRow
agSyslogMsgTableEntry = _AgSyslogMsgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 11, 1)
)
agSyslogMsgTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "agSyslogMsgIndex"),
)
if mibBuilder.loadTexts:
    agSyslogMsgTableEntry.setStatus("current")
_AgSyslogMsgIndex_Type = Integer32
_AgSyslogMsgIndex_Object = MibTableColumn
agSyslogMsgIndex = _AgSyslogMsgIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 11, 1, 1),
    _AgSyslogMsgIndex_Type()
)
agSyslogMsgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agSyslogMsgIndex.setStatus("current")


class _AgSyslogMessage_Type(DisplayString):
    """Custom type agSyslogMessage based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_AgSyslogMessage_Type.__name__ = "DisplayString"
_AgSyslogMessage_Object = MibTableColumn
agSyslogMessage = _AgSyslogMessage_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 11, 1, 2),
    _AgSyslogMessage_Type()
)
agSyslogMessage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agSyslogMessage.setStatus("current")
_AgLog_ObjectIdentity = ObjectIdentity
agLog = _AgLog_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12)
)


class _AgNewCfgSyslogTrapConsole_Type(Integer32):
    """Custom type agNewCfgSyslogTrapConsole based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapConsole_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapConsole_Object = MibScalar
agNewCfgSyslogTrapConsole = _AgNewCfgSyslogTrapConsole_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 1),
    _AgNewCfgSyslogTrapConsole_Type()
)
agNewCfgSyslogTrapConsole.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapConsole.setStatus("current")


class _AgCurCfgSyslogTrapConsole_Type(Integer32):
    """Custom type agCurCfgSyslogTrapConsole based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapConsole_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapConsole_Object = MibScalar
agCurCfgSyslogTrapConsole = _AgCurCfgSyslogTrapConsole_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 2),
    _AgCurCfgSyslogTrapConsole_Type()
)
agCurCfgSyslogTrapConsole.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapConsole.setStatus("current")


class _AgNewCfgSyslogTrapSystem_Type(Integer32):
    """Custom type agNewCfgSyslogTrapSystem based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapSystem_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapSystem_Object = MibScalar
agNewCfgSyslogTrapSystem = _AgNewCfgSyslogTrapSystem_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 3),
    _AgNewCfgSyslogTrapSystem_Type()
)
agNewCfgSyslogTrapSystem.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapSystem.setStatus("current")


class _AgCurCfgSyslogTrapSystem_Type(Integer32):
    """Custom type agCurCfgSyslogTrapSystem based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapSystem_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapSystem_Object = MibScalar
agCurCfgSyslogTrapSystem = _AgCurCfgSyslogTrapSystem_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 4),
    _AgCurCfgSyslogTrapSystem_Type()
)
agCurCfgSyslogTrapSystem.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapSystem.setStatus("current")


class _AgNewCfgSyslogTrapMgmt_Type(Integer32):
    """Custom type agNewCfgSyslogTrapMgmt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapMgmt_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapMgmt_Object = MibScalar
agNewCfgSyslogTrapMgmt = _AgNewCfgSyslogTrapMgmt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 5),
    _AgNewCfgSyslogTrapMgmt_Type()
)
agNewCfgSyslogTrapMgmt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapMgmt.setStatus("current")


class _AgCurCfgSyslogTrapMgmt_Type(Integer32):
    """Custom type agCurCfgSyslogTrapMgmt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapMgmt_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapMgmt_Object = MibScalar
agCurCfgSyslogTrapMgmt = _AgCurCfgSyslogTrapMgmt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 6),
    _AgCurCfgSyslogTrapMgmt_Type()
)
agCurCfgSyslogTrapMgmt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapMgmt.setStatus("current")


class _AgNewCfgSyslogTrapCli_Type(Integer32):
    """Custom type agNewCfgSyslogTrapCli based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapCli_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapCli_Object = MibScalar
agNewCfgSyslogTrapCli = _AgNewCfgSyslogTrapCli_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 7),
    _AgNewCfgSyslogTrapCli_Type()
)
agNewCfgSyslogTrapCli.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapCli.setStatus("current")


class _AgCurCfgSyslogTrapCli_Type(Integer32):
    """Custom type agCurCfgSyslogTrapCli based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapCli_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapCli_Object = MibScalar
agCurCfgSyslogTrapCli = _AgCurCfgSyslogTrapCli_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 8),
    _AgCurCfgSyslogTrapCli_Type()
)
agCurCfgSyslogTrapCli.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapCli.setStatus("current")


class _AgNewCfgSyslogTrapStg_Type(Integer32):
    """Custom type agNewCfgSyslogTrapStg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapStg_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapStg_Object = MibScalar
agNewCfgSyslogTrapStg = _AgNewCfgSyslogTrapStg_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 9),
    _AgNewCfgSyslogTrapStg_Type()
)
agNewCfgSyslogTrapStg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapStg.setStatus("current")


class _AgCurCfgSyslogTrapStg_Type(Integer32):
    """Custom type agCurCfgSyslogTrapStg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapStg_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapStg_Object = MibScalar
agCurCfgSyslogTrapStg = _AgCurCfgSyslogTrapStg_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 10),
    _AgCurCfgSyslogTrapStg_Type()
)
agCurCfgSyslogTrapStg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapStg.setStatus("current")


class _AgNewCfgSyslogTrapVlan_Type(Integer32):
    """Custom type agNewCfgSyslogTrapVlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapVlan_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapVlan_Object = MibScalar
agNewCfgSyslogTrapVlan = _AgNewCfgSyslogTrapVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 11),
    _AgNewCfgSyslogTrapVlan_Type()
)
agNewCfgSyslogTrapVlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapVlan.setStatus("current")


class _AgCurCfgSyslogTrapVlan_Type(Integer32):
    """Custom type agCurCfgSyslogTrapVlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapVlan_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapVlan_Object = MibScalar
agCurCfgSyslogTrapVlan = _AgCurCfgSyslogTrapVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 12),
    _AgCurCfgSyslogTrapVlan_Type()
)
agCurCfgSyslogTrapVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapVlan.setStatus("current")


class _AgNewCfgSyslogTrapSsh_Type(Integer32):
    """Custom type agNewCfgSyslogTrapSsh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapSsh_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapSsh_Object = MibScalar
agNewCfgSyslogTrapSsh = _AgNewCfgSyslogTrapSsh_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 19),
    _AgNewCfgSyslogTrapSsh_Type()
)
agNewCfgSyslogTrapSsh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapSsh.setStatus("current")


class _AgCurCfgSyslogTrapSsh_Type(Integer32):
    """Custom type agCurCfgSyslogTrapSsh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapSsh_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapSsh_Object = MibScalar
agCurCfgSyslogTrapSsh = _AgCurCfgSyslogTrapSsh_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 20),
    _AgCurCfgSyslogTrapSsh_Type()
)
agCurCfgSyslogTrapSsh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapSsh.setStatus("current")


class _AgNewCfgSyslogTrapVrrp_Type(Integer32):
    """Custom type agNewCfgSyslogTrapVrrp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapVrrp_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapVrrp_Object = MibScalar
agNewCfgSyslogTrapVrrp = _AgNewCfgSyslogTrapVrrp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 21),
    _AgNewCfgSyslogTrapVrrp_Type()
)
agNewCfgSyslogTrapVrrp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapVrrp.setStatus("current")


class _AgCurCfgSyslogTrapVrrp_Type(Integer32):
    """Custom type agCurCfgSyslogTrapVrrp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapVrrp_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapVrrp_Object = MibScalar
agCurCfgSyslogTrapVrrp = _AgCurCfgSyslogTrapVrrp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 22),
    _AgCurCfgSyslogTrapVrrp_Type()
)
agCurCfgSyslogTrapVrrp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapVrrp.setStatus("current")


class _AgNewCfgSyslogTrapBgp_Type(Integer32):
    """Custom type agNewCfgSyslogTrapBgp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapBgp_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapBgp_Object = MibScalar
agNewCfgSyslogTrapBgp = _AgNewCfgSyslogTrapBgp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 23),
    _AgNewCfgSyslogTrapBgp_Type()
)
agNewCfgSyslogTrapBgp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapBgp.setStatus("current")


class _AgCurCfgSyslogTrapBgp_Type(Integer32):
    """Custom type agCurCfgSyslogTrapBgp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapBgp_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapBgp_Object = MibScalar
agCurCfgSyslogTrapBgp = _AgCurCfgSyslogTrapBgp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 24),
    _AgCurCfgSyslogTrapBgp_Type()
)
agCurCfgSyslogTrapBgp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapBgp.setStatus("current")


class _AgNewCfgSyslogTrapNtp_Type(Integer32):
    """Custom type agNewCfgSyslogTrapNtp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapNtp_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapNtp_Object = MibScalar
agNewCfgSyslogTrapNtp = _AgNewCfgSyslogTrapNtp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 25),
    _AgNewCfgSyslogTrapNtp_Type()
)
agNewCfgSyslogTrapNtp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapNtp.setStatus("current")


class _AgCurCfgSyslogTrapNtp_Type(Integer32):
    """Custom type agCurCfgSyslogTrapNtp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapNtp_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapNtp_Object = MibScalar
agCurCfgSyslogTrapNtp = _AgCurCfgSyslogTrapNtp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 26),
    _AgCurCfgSyslogTrapNtp_Type()
)
agCurCfgSyslogTrapNtp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapNtp.setStatus("current")


class _AgNewCfgSyslogTrapIp_Type(Integer32):
    """Custom type agNewCfgSyslogTrapIp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapIp_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapIp_Object = MibScalar
agNewCfgSyslogTrapIp = _AgNewCfgSyslogTrapIp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 31),
    _AgNewCfgSyslogTrapIp_Type()
)
agNewCfgSyslogTrapIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapIp.setStatus("current")


class _AgCurCfgSyslogTrapIp_Type(Integer32):
    """Custom type agCurCfgSyslogTrapIp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapIp_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapIp_Object = MibScalar
agCurCfgSyslogTrapIp = _AgCurCfgSyslogTrapIp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 32),
    _AgCurCfgSyslogTrapIp_Type()
)
agCurCfgSyslogTrapIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapIp.setStatus("current")


class _AgNewCfgSyslogTrapWeb_Type(Integer32):
    """Custom type agNewCfgSyslogTrapWeb based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapWeb_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapWeb_Object = MibScalar
agNewCfgSyslogTrapWeb = _AgNewCfgSyslogTrapWeb_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 35),
    _AgNewCfgSyslogTrapWeb_Type()
)
agNewCfgSyslogTrapWeb.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapWeb.setStatus("current")


class _AgCurCfgSyslogTrapWeb_Type(Integer32):
    """Custom type agCurCfgSyslogTrapWeb based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapWeb_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapWeb_Object = MibScalar
agCurCfgSyslogTrapWeb = _AgCurCfgSyslogTrapWeb_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 36),
    _AgCurCfgSyslogTrapWeb_Type()
)
agCurCfgSyslogTrapWeb.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapWeb.setStatus("current")


class _AgNewCfgSyslogTrapOspf_Type(Integer32):
    """Custom type agNewCfgSyslogTrapOspf based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapOspf_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapOspf_Object = MibScalar
agNewCfgSyslogTrapOspf = _AgNewCfgSyslogTrapOspf_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 41),
    _AgNewCfgSyslogTrapOspf_Type()
)
agNewCfgSyslogTrapOspf.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapOspf.setStatus("current")


class _AgCurCfgSyslogTrapOspf_Type(Integer32):
    """Custom type agCurCfgSyslogTrapOspf based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapOspf_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapOspf_Object = MibScalar
agCurCfgSyslogTrapOspf = _AgCurCfgSyslogTrapOspf_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 42),
    _AgCurCfgSyslogTrapOspf_Type()
)
agCurCfgSyslogTrapOspf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapOspf.setStatus("current")


class _AgNewCfgSyslogTrapRmon_Type(Integer32):
    """Custom type agNewCfgSyslogTrapRmon based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapRmon_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapRmon_Object = MibScalar
agNewCfgSyslogTrapRmon = _AgNewCfgSyslogTrapRmon_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 45),
    _AgNewCfgSyslogTrapRmon_Type()
)
agNewCfgSyslogTrapRmon.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapRmon.setStatus("current")


class _AgCurCfgSyslogTrapRmon_Type(Integer32):
    """Custom type agCurCfgSyslogTrapRmon based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapRmon_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapRmon_Object = MibScalar
agCurCfgSyslogTrapRmon = _AgCurCfgSyslogTrapRmon_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 46),
    _AgCurCfgSyslogTrapRmon_Type()
)
agCurCfgSyslogTrapRmon.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapRmon.setStatus("current")


class _AgNewCfgSyslogTrap8021x_Type(Integer32):
    """Custom type agNewCfgSyslogTrap8021x based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrap8021x_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrap8021x_Object = MibScalar
agNewCfgSyslogTrap8021x = _AgNewCfgSyslogTrap8021x_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 49),
    _AgNewCfgSyslogTrap8021x_Type()
)
agNewCfgSyslogTrap8021x.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrap8021x.setStatus("current")


class _AgCurCfgSyslogTrap8021x_Type(Integer32):
    """Custom type agCurCfgSyslogTrap8021x based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrap8021x_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrap8021x_Object = MibScalar
agCurCfgSyslogTrap8021x = _AgCurCfgSyslogTrap8021x_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 50),
    _AgCurCfgSyslogTrap8021x_Type()
)
agCurCfgSyslogTrap8021x.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrap8021x.setStatus("current")


class _AgNewCfgSyslogTrapCfg_Type(Integer32):
    """Custom type agNewCfgSyslogTrapCfg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapCfg_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapCfg_Object = MibScalar
agNewCfgSyslogTrapCfg = _AgNewCfgSyslogTrapCfg_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 53),
    _AgNewCfgSyslogTrapCfg_Type()
)
agNewCfgSyslogTrapCfg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapCfg.setStatus("current")


class _AgCurCfgSyslogTrapCfg_Type(Integer32):
    """Custom type agCurCfgSyslogTrapCfg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapCfg_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapCfg_Object = MibScalar
agCurCfgSyslogTrapCfg = _AgCurCfgSyslogTrapCfg_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 54),
    _AgCurCfgSyslogTrapCfg_Type()
)
agCurCfgSyslogTrapCfg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapCfg.setStatus("current")


class _AgNewCfgSyslogTrapServer_Type(Integer32):
    """Custom type agNewCfgSyslogTrapServer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapServer_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapServer_Object = MibScalar
agNewCfgSyslogTrapServer = _AgNewCfgSyslogTrapServer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 55),
    _AgNewCfgSyslogTrapServer_Type()
)
agNewCfgSyslogTrapServer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapServer.setStatus("current")


class _AgCurCfgSyslogTrapServer_Type(Integer32):
    """Custom type agCurCfgSyslogTrapServer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapServer_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapServer_Object = MibScalar
agCurCfgSyslogTrapServer = _AgCurCfgSyslogTrapServer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 56),
    _AgCurCfgSyslogTrapServer_Type()
)
agCurCfgSyslogTrapServer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapServer.setStatus("current")


class _AgNewCfgSyslogTrapDifftrak_Type(Integer32):
    """Custom type agNewCfgSyslogTrapDifftrak based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapDifftrak_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapDifftrak_Object = MibScalar
agNewCfgSyslogTrapDifftrak = _AgNewCfgSyslogTrapDifftrak_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 57),
    _AgNewCfgSyslogTrapDifftrak_Type()
)
agNewCfgSyslogTrapDifftrak.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapDifftrak.setStatus("current")


class _AgCurCfgSyslogTrapDifftrak_Type(Integer32):
    """Custom type agCurCfgSyslogTrapDifftrak based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapDifftrak_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapDifftrak_Object = MibScalar
agCurCfgSyslogTrapDifftrak = _AgCurCfgSyslogTrapDifftrak_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 58),
    _AgCurCfgSyslogTrapDifftrak_Type()
)
agCurCfgSyslogTrapDifftrak.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapDifftrak.setStatus("current")


class _AgNewCfgSyslogTrapHotlinks_Type(Integer32):
    """Custom type agNewCfgSyslogTrapHotlinks based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapHotlinks_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapHotlinks_Object = MibScalar
agNewCfgSyslogTrapHotlinks = _AgNewCfgSyslogTrapHotlinks_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 61),
    _AgNewCfgSyslogTrapHotlinks_Type()
)
agNewCfgSyslogTrapHotlinks.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapHotlinks.setStatus("current")


class _AgCurCfgSyslogTrapHotlinks_Type(Integer32):
    """Custom type agCurCfgSyslogTrapHotlinks based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapHotlinks_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapHotlinks_Object = MibScalar
agCurCfgSyslogTrapHotlinks = _AgCurCfgSyslogTrapHotlinks_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 62),
    _AgCurCfgSyslogTrapHotlinks_Type()
)
agCurCfgSyslogTrapHotlinks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapHotlinks.setStatus("current")


class _AgNewCfgSyslogTrapLldp_Type(Integer32):
    """Custom type agNewCfgSyslogTrapLldp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapLldp_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapLldp_Object = MibScalar
agNewCfgSyslogTrapLldp = _AgNewCfgSyslogTrapLldp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 63),
    _AgNewCfgSyslogTrapLldp_Type()
)
agNewCfgSyslogTrapLldp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapLldp.setStatus("current")


class _AgCurCfgSyslogTrapLldp_Type(Integer32):
    """Custom type agCurCfgSyslogTrapLldp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapLldp_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapLldp_Object = MibScalar
agCurCfgSyslogTrapLldp = _AgCurCfgSyslogTrapLldp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 64),
    _AgCurCfgSyslogTrapLldp_Type()
)
agCurCfgSyslogTrapLldp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapLldp.setStatus("current")


class _AgNewCfgSyslogTrapAll_Type(Integer32):
    """Custom type agNewCfgSyslogTrapAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapAll_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapAll_Object = MibScalar
agNewCfgSyslogTrapAll = _AgNewCfgSyslogTrapAll_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 65),
    _AgNewCfgSyslogTrapAll_Type()
)
agNewCfgSyslogTrapAll.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapAll.setStatus("current")


class _AgCurCfgSyslogTrapAll_Type(Integer32):
    """Custom type agCurCfgSyslogTrapAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapAll_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapAll_Object = MibScalar
agCurCfgSyslogTrapAll = _AgCurCfgSyslogTrapAll_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 66),
    _AgCurCfgSyslogTrapAll_Type()
)
agCurCfgSyslogTrapAll.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapAll.setStatus("current")


class _AgNewCfgSyslogTrapIpv6_Type(Integer32):
    """Custom type agNewCfgSyslogTrapIpv6 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapIpv6_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapIpv6_Object = MibScalar
agNewCfgSyslogTrapIpv6 = _AgNewCfgSyslogTrapIpv6_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 67),
    _AgNewCfgSyslogTrapIpv6_Type()
)
agNewCfgSyslogTrapIpv6.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapIpv6.setStatus("current")


class _AgCurCfgSyslogTrapIpv6_Type(Integer32):
    """Custom type agCurCfgSyslogTrapIpv6 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapIpv6_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapIpv6_Object = MibScalar
agCurCfgSyslogTrapIpv6 = _AgCurCfgSyslogTrapIpv6_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 68),
    _AgCurCfgSyslogTrapIpv6_Type()
)
agCurCfgSyslogTrapIpv6.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapIpv6.setStatus("current")


class _AgNewCfgSyslogTrapFailover_Type(Integer32):
    """Custom type agNewCfgSyslogTrapFailover based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapFailover_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapFailover_Object = MibScalar
agNewCfgSyslogTrapFailover = _AgNewCfgSyslogTrapFailover_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 73),
    _AgNewCfgSyslogTrapFailover_Type()
)
agNewCfgSyslogTrapFailover.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapFailover.setStatus("current")


class _AgCurCfgSyslogTrapFailover_Type(Integer32):
    """Custom type agCurCfgSyslogTrapFailover based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapFailover_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapFailover_Object = MibScalar
agCurCfgSyslogTrapFailover = _AgCurCfgSyslogTrapFailover_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 74),
    _AgCurCfgSyslogTrapFailover_Type()
)
agCurCfgSyslogTrapFailover.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapFailover.setStatus("current")


class _AgNewCfgSyslogTrapLacp_Type(Integer32):
    """Custom type agNewCfgSyslogTrapLacp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapLacp_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapLacp_Object = MibScalar
agNewCfgSyslogTrapLacp = _AgNewCfgSyslogTrapLacp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 77),
    _AgNewCfgSyslogTrapLacp_Type()
)
agNewCfgSyslogTrapLacp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapLacp.setStatus("current")


class _AgCurCfgSyslogTrapLacp_Type(Integer32):
    """Custom type agCurCfgSyslogTrapLacp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapLacp_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapLacp_Object = MibScalar
agCurCfgSyslogTrapLacp = _AgCurCfgSyslogTrapLacp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 78),
    _AgCurCfgSyslogTrapLacp_Type()
)
agCurCfgSyslogTrapLacp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapLacp.setStatus("current")


class _AgNewCfgSyslogTrapLink_Type(Integer32):
    """Custom type agNewCfgSyslogTrapLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapLink_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapLink_Object = MibScalar
agNewCfgSyslogTrapLink = _AgNewCfgSyslogTrapLink_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 79),
    _AgNewCfgSyslogTrapLink_Type()
)
agNewCfgSyslogTrapLink.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapLink.setStatus("current")


class _AgCurCfgSyslogTrapLink_Type(Integer32):
    """Custom type agCurCfgSyslogTrapLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapLink_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapLink_Object = MibScalar
agCurCfgSyslogTrapLink = _AgCurCfgSyslogTrapLink_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 80),
    _AgCurCfgSyslogTrapLink_Type()
)
agCurCfgSyslogTrapLink.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapLink.setStatus("current")


class _AgNewCfgSyslogTrapOspfv3_Type(Integer32):
    """Custom type agNewCfgSyslogTrapOspfv3 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapOspfv3_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapOspfv3_Object = MibScalar
agNewCfgSyslogTrapOspfv3 = _AgNewCfgSyslogTrapOspfv3_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 81),
    _AgNewCfgSyslogTrapOspfv3_Type()
)
agNewCfgSyslogTrapOspfv3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapOspfv3.setStatus("current")


class _AgCurCfgSyslogTrapOspfv3_Type(Integer32):
    """Custom type agCurCfgSyslogTrapOspfv3 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapOspfv3_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapOspfv3_Object = MibScalar
agCurCfgSyslogTrapOspfv3 = _AgCurCfgSyslogTrapOspfv3_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 82),
    _AgCurCfgSyslogTrapOspfv3_Type()
)
agCurCfgSyslogTrapOspfv3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapOspfv3.setStatus("current")


class _AgNewCfgSyslogTrapDcbx_Type(Integer32):
    """Custom type agNewCfgSyslogTrapDcbx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapDcbx_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapDcbx_Object = MibScalar
agNewCfgSyslogTrapDcbx = _AgNewCfgSyslogTrapDcbx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 85),
    _AgNewCfgSyslogTrapDcbx_Type()
)
agNewCfgSyslogTrapDcbx.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapDcbx.setStatus("current")


class _AgCurCfgSyslogTrapDcbx_Type(Integer32):
    """Custom type agCurCfgSyslogTrapDcbx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapDcbx_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapDcbx_Object = MibScalar
agCurCfgSyslogTrapDcbx = _AgCurCfgSyslogTrapDcbx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 86),
    _AgCurCfgSyslogTrapDcbx_Type()
)
agCurCfgSyslogTrapDcbx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapDcbx.setStatus("current")


class _AgNewCfgSyslogTrapFcoe_Type(Integer32):
    """Custom type agNewCfgSyslogTrapFcoe based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapFcoe_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapFcoe_Object = MibScalar
agNewCfgSyslogTrapFcoe = _AgNewCfgSyslogTrapFcoe_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 87),
    _AgNewCfgSyslogTrapFcoe_Type()
)
agNewCfgSyslogTrapFcoe.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapFcoe.setStatus("current")


class _AgCurCfgSyslogTrapFcoe_Type(Integer32):
    """Custom type agCurCfgSyslogTrapFcoe based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapFcoe_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapFcoe_Object = MibScalar
agCurCfgSyslogTrapFcoe = _AgCurCfgSyslogTrapFcoe_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 88),
    _AgCurCfgSyslogTrapFcoe_Type()
)
agCurCfgSyslogTrapFcoe.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapFcoe.setStatus("current")


class _AgNewCfgSyslogTrapVm_Type(Integer32):
    """Custom type agNewCfgSyslogTrapVm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapVm_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapVm_Object = MibScalar
agNewCfgSyslogTrapVm = _AgNewCfgSyslogTrapVm_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 89),
    _AgNewCfgSyslogTrapVm_Type()
)
agNewCfgSyslogTrapVm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapVm.setStatus("current")


class _AgCurCfgSyslogTrapVm_Type(Integer32):
    """Custom type agCurCfgSyslogTrapVm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapVm_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapVm_Object = MibScalar
agCurCfgSyslogTrapVm = _AgCurCfgSyslogTrapVm_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 90),
    _AgCurCfgSyslogTrapVm_Type()
)
agCurCfgSyslogTrapVm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapVm.setStatus("current")


class _AgNewCfgSyslogTrapVnic_Type(Integer32):
    """Custom type agNewCfgSyslogTrapVnic based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapVnic_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapVnic_Object = MibScalar
agNewCfgSyslogTrapVnic = _AgNewCfgSyslogTrapVnic_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 91),
    _AgNewCfgSyslogTrapVnic_Type()
)
agNewCfgSyslogTrapVnic.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapVnic.setStatus("current")


class _AgCurCfgSyslogTrapVnic_Type(Integer32):
    """Custom type agCurCfgSyslogTrapVnic based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapVnic_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapVnic_Object = MibScalar
agCurCfgSyslogTrapVnic = _AgCurCfgSyslogTrapVnic_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 92),
    _AgCurCfgSyslogTrapVnic_Type()
)
agCurCfgSyslogTrapVnic.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapVnic.setStatus("current")


class _AgNewCfgSyslogTrapCfgchg_Type(Integer32):
    """Custom type agNewCfgSyslogTrapCfgchg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapCfgchg_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapCfgchg_Object = MibScalar
agNewCfgSyslogTrapCfgchg = _AgNewCfgSyslogTrapCfgchg_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 93),
    _AgNewCfgSyslogTrapCfgchg_Type()
)
agNewCfgSyslogTrapCfgchg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapCfgchg.setStatus("current")


class _AgCurCfgSyslogTrapCfgchg_Type(Integer32):
    """Custom type agCurCfgSyslogTrapCfgchg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapCfgchg_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapCfgchg_Object = MibScalar
agCurCfgSyslogTrapCfgchg = _AgCurCfgSyslogTrapCfgchg_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 94),
    _AgCurCfgSyslogTrapCfgchg_Type()
)
agCurCfgSyslogTrapCfgchg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapCfgchg.setStatus("current")


class _AgNewCfgSyslogTrapVlag_Type(Integer32):
    """Custom type agNewCfgSyslogTrapVlag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapVlag_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapVlag_Object = MibScalar
agNewCfgSyslogTrapVlag = _AgNewCfgSyslogTrapVlag_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 95),
    _AgNewCfgSyslogTrapVlag_Type()
)
agNewCfgSyslogTrapVlag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapVlag.setStatus("current")


class _AgCurCfgSyslogTrapVlag_Type(Integer32):
    """Custom type agCurCfgSyslogTrapVlag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapVlag_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapVlag_Object = MibScalar
agCurCfgSyslogTrapVlag = _AgCurCfgSyslogTrapVlag_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 96),
    _AgCurCfgSyslogTrapVlag_Type()
)
agCurCfgSyslogTrapVlag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapVlag.setStatus("current")


class _AgNewCfgSyslogTrapIgmpGroup_Type(Integer32):
    """Custom type agNewCfgSyslogTrapIgmpGroup based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapIgmpGroup_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapIgmpGroup_Object = MibScalar
agNewCfgSyslogTrapIgmpGroup = _AgNewCfgSyslogTrapIgmpGroup_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 99),
    _AgNewCfgSyslogTrapIgmpGroup_Type()
)
agNewCfgSyslogTrapIgmpGroup.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapIgmpGroup.setStatus("current")


class _AgCurCfgSyslogTrapIgmpGroup_Type(Integer32):
    """Custom type agCurCfgSyslogTrapIgmpGroup based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapIgmpGroup_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapIgmpGroup_Object = MibScalar
agCurCfgSyslogTrapIgmpGroup = _AgCurCfgSyslogTrapIgmpGroup_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 100),
    _AgCurCfgSyslogTrapIgmpGroup_Type()
)
agCurCfgSyslogTrapIgmpGroup.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapIgmpGroup.setStatus("current")


class _AgNewCfgSyslogTrapIgmpMrouter_Type(Integer32):
    """Custom type agNewCfgSyslogTrapIgmpMrouter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapIgmpMrouter_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapIgmpMrouter_Object = MibScalar
agNewCfgSyslogTrapIgmpMrouter = _AgNewCfgSyslogTrapIgmpMrouter_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 101),
    _AgNewCfgSyslogTrapIgmpMrouter_Type()
)
agNewCfgSyslogTrapIgmpMrouter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapIgmpMrouter.setStatus("current")


class _AgCurCfgSyslogTrapIgmpMrouter_Type(Integer32):
    """Custom type agCurCfgSyslogTrapIgmpMrouter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapIgmpMrouter_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapIgmpMrouter_Object = MibScalar
agCurCfgSyslogTrapIgmpMrouter = _AgCurCfgSyslogTrapIgmpMrouter_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 102),
    _AgCurCfgSyslogTrapIgmpMrouter_Type()
)
agCurCfgSyslogTrapIgmpMrouter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapIgmpMrouter.setStatus("current")


class _AgNewCfgSyslogTrapIgmpQuerier_Type(Integer32):
    """Custom type agNewCfgSyslogTrapIgmpQuerier based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapIgmpQuerier_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapIgmpQuerier_Object = MibScalar
agNewCfgSyslogTrapIgmpQuerier = _AgNewCfgSyslogTrapIgmpQuerier_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 103),
    _AgNewCfgSyslogTrapIgmpQuerier_Type()
)
agNewCfgSyslogTrapIgmpQuerier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapIgmpQuerier.setStatus("current")


class _AgCurCfgSyslogTrapIgmpQuerier_Type(Integer32):
    """Custom type agCurCfgSyslogTrapIgmpQuerier based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapIgmpQuerier_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapIgmpQuerier_Object = MibScalar
agCurCfgSyslogTrapIgmpQuerier = _AgCurCfgSyslogTrapIgmpQuerier_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 104),
    _AgCurCfgSyslogTrapIgmpQuerier_Type()
)
agCurCfgSyslogTrapIgmpQuerier.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapIgmpQuerier.setStatus("current")


class _AgNewCfgSyslogTrapMld_Type(Integer32):
    """Custom type agNewCfgSyslogTrapMld based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapMld_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapMld_Object = MibScalar
agNewCfgSyslogTrapMld = _AgNewCfgSyslogTrapMld_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 105),
    _AgNewCfgSyslogTrapMld_Type()
)
agNewCfgSyslogTrapMld.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapMld.setStatus("current")


class _AgCurCfgSyslogTrapMld_Type(Integer32):
    """Custom type agCurCfgSyslogTrapMld based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapMld_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapMld_Object = MibScalar
agCurCfgSyslogTrapMld = _AgCurCfgSyslogTrapMld_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 106),
    _AgCurCfgSyslogTrapMld_Type()
)
agCurCfgSyslogTrapMld.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapMld.setStatus("current")


class _AgNewCfgSyslogTrapPrivateVlan_Type(Integer32):
    """Custom type agNewCfgSyslogTrapPrivateVlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapPrivateVlan_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapPrivateVlan_Object = MibScalar
agNewCfgSyslogTrapPrivateVlan = _AgNewCfgSyslogTrapPrivateVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 107),
    _AgNewCfgSyslogTrapPrivateVlan_Type()
)
agNewCfgSyslogTrapPrivateVlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapPrivateVlan.setStatus("current")


class _AgCurCfgSyslogTrapPrivateVlan_Type(Integer32):
    """Custom type agCurCfgSyslogTrapPrivateVlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapPrivateVlan_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapPrivateVlan_Object = MibScalar
agCurCfgSyslogTrapPrivateVlan = _AgCurCfgSyslogTrapPrivateVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 108),
    _AgCurCfgSyslogTrapPrivateVlan_Type()
)
agCurCfgSyslogTrapPrivateVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapPrivateVlan.setStatus("current")


class _AgNewCfgSyslogTrapSlp_Type(Integer32):
    """Custom type agNewCfgSyslogTrapSlp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapSlp_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapSlp_Object = MibScalar
agNewCfgSyslogTrapSlp = _AgNewCfgSyslogTrapSlp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 109),
    _AgNewCfgSyslogTrapSlp_Type()
)
agNewCfgSyslogTrapSlp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapSlp.setStatus("current")


class _AgCurCfgSyslogTrapSlp_Type(Integer32):
    """Custom type agCurCfgSyslogTrapSlp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapSlp_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapSlp_Object = MibScalar
agCurCfgSyslogTrapSlp = _AgCurCfgSyslogTrapSlp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 12, 110),
    _AgCurCfgSyslogTrapSlp_Type()
)
agCurCfgSyslogTrapSlp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapSlp.setStatus("current")


class _AgCurCfgSyslogSev_Type(Integer32):
    """Custom type agCurCfgSyslogSev based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("emerg0", 1),
          ("alert1", 2),
          ("crit2", 3),
          ("err3", 4),
          ("warning4", 5),
          ("notice5", 6),
          ("info6", 7),
          ("debug7", 8))
    )


_AgCurCfgSyslogSev_Type.__name__ = "Integer32"
_AgCurCfgSyslogSev_Object = MibScalar
agCurCfgSyslogSev = _AgCurCfgSyslogSev_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 13),
    _AgCurCfgSyslogSev_Type()
)
agCurCfgSyslogSev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogSev.setStatus("current")


class _AgNewCfgSyslogSev_Type(Integer32):
    """Custom type agNewCfgSyslogSev based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("emerg0", 1),
          ("alert1", 2),
          ("crit2", 3),
          ("err3", 4),
          ("warning4", 5),
          ("notice5", 6),
          ("info6", 7),
          ("debug7", 8))
    )


_AgNewCfgSyslogSev_Type.__name__ = "Integer32"
_AgNewCfgSyslogSev_Object = MibScalar
agNewCfgSyslogSev = _AgNewCfgSyslogSev_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 14),
    _AgNewCfgSyslogSev_Type()
)
agNewCfgSyslogSev.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogSev.setStatus("current")


class _AgCurCfgSyslog2Sev_Type(Integer32):
    """Custom type agCurCfgSyslog2Sev based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("emerg0", 1),
          ("alert1", 2),
          ("crit2", 3),
          ("err3", 4),
          ("warning4", 5),
          ("notice5", 6),
          ("info6", 7),
          ("debug7", 8))
    )


_AgCurCfgSyslog2Sev_Type.__name__ = "Integer32"
_AgCurCfgSyslog2Sev_Object = MibScalar
agCurCfgSyslog2Sev = _AgCurCfgSyslog2Sev_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 15),
    _AgCurCfgSyslog2Sev_Type()
)
agCurCfgSyslog2Sev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslog2Sev.setStatus("current")


class _AgNewCfgSyslog2Sev_Type(Integer32):
    """Custom type agNewCfgSyslog2Sev based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("emerg0", 1),
          ("alert1", 2),
          ("crit2", 3),
          ("err3", 4),
          ("warning4", 5),
          ("notice5", 6),
          ("info6", 7),
          ("debug7", 8))
    )


_AgNewCfgSyslog2Sev_Type.__name__ = "Integer32"
_AgNewCfgSyslog2Sev_Object = MibScalar
agNewCfgSyslog2Sev = _AgNewCfgSyslog2Sev_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 16),
    _AgNewCfgSyslog2Sev_Type()
)
agNewCfgSyslog2Sev.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslog2Sev.setStatus("current")


class _AgCurCfgSyslogHostPort_Type(Integer32):
    """Custom type agCurCfgSyslogHostPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("data", 1),
          ("mgt", 2))
    )


_AgCurCfgSyslogHostPort_Type.__name__ = "Integer32"
_AgCurCfgSyslogHostPort_Object = MibScalar
agCurCfgSyslogHostPort = _AgCurCfgSyslogHostPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 17),
    _AgCurCfgSyslogHostPort_Type()
)
agCurCfgSyslogHostPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogHostPort.setStatus("current")


class _AgNewCfgSyslogHostPort_Type(Integer32):
    """Custom type agNewCfgSyslogHostPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("data", 1),
          ("mgt", 2))
    )


_AgNewCfgSyslogHostPort_Type.__name__ = "Integer32"
_AgNewCfgSyslogHostPort_Object = MibScalar
agNewCfgSyslogHostPort = _AgNewCfgSyslogHostPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 18),
    _AgNewCfgSyslogHostPort_Type()
)
agNewCfgSyslogHostPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogHostPort.setStatus("current")


class _AgCurCfgSyslog2HostPort_Type(Integer32):
    """Custom type agCurCfgSyslog2HostPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("data", 1),
          ("mgt", 2))
    )


_AgCurCfgSyslog2HostPort_Type.__name__ = "Integer32"
_AgCurCfgSyslog2HostPort_Object = MibScalar
agCurCfgSyslog2HostPort = _AgCurCfgSyslog2HostPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 19),
    _AgCurCfgSyslog2HostPort_Type()
)
agCurCfgSyslog2HostPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslog2HostPort.setStatus("current")


class _AgNewCfgSyslog2HostPort_Type(Integer32):
    """Custom type agNewCfgSyslog2HostPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("data", 1),
          ("mgt", 2))
    )


_AgNewCfgSyslog2HostPort_Type.__name__ = "Integer32"
_AgNewCfgSyslog2HostPort_Object = MibScalar
agNewCfgSyslog2HostPort = _AgNewCfgSyslog2HostPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 20),
    _AgNewCfgSyslog2HostPort_Type()
)
agNewCfgSyslog2HostPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslog2HostPort.setStatus("current")
_AgCurCfgSyslogSrcLoopIf_Type = Integer32
_AgCurCfgSyslogSrcLoopIf_Object = MibScalar
agCurCfgSyslogSrcLoopIf = _AgCurCfgSyslogSrcLoopIf_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 21),
    _AgCurCfgSyslogSrcLoopIf_Type()
)
agCurCfgSyslogSrcLoopIf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogSrcLoopIf.setStatus("current")
_AgNewCfgSyslogSrcLoopIf_Type = Integer32
_AgNewCfgSyslogSrcLoopIf_Object = MibScalar
agNewCfgSyslogSrcLoopIf = _AgNewCfgSyslogSrcLoopIf_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 22),
    _AgNewCfgSyslogSrcLoopIf_Type()
)
agNewCfgSyslogSrcLoopIf.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogSrcLoopIf.setStatus("current")


class _AgCurCfgSyslogConsoleSev_Type(Integer32):
    """Custom type agCurCfgSyslogConsoleSev based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("emerg0", 1),
          ("alert1", 2),
          ("crit2", 3),
          ("err3", 4),
          ("warning4", 5),
          ("notice5", 6),
          ("info6", 7),
          ("debug7", 8))
    )


_AgCurCfgSyslogConsoleSev_Type.__name__ = "Integer32"
_AgCurCfgSyslogConsoleSev_Object = MibScalar
agCurCfgSyslogConsoleSev = _AgCurCfgSyslogConsoleSev_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 23),
    _AgCurCfgSyslogConsoleSev_Type()
)
agCurCfgSyslogConsoleSev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogConsoleSev.setStatus("current")


class _AgNewCfgSyslogConsoleSev_Type(Integer32):
    """Custom type agNewCfgSyslogConsoleSev based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("emerg0", 1),
          ("alert1", 2),
          ("crit2", 3),
          ("err3", 4),
          ("warning4", 5),
          ("notice5", 6),
          ("info6", 7),
          ("debug7", 8))
    )


_AgNewCfgSyslogConsoleSev_Type.__name__ = "Integer32"
_AgNewCfgSyslogConsoleSev_Object = MibScalar
agNewCfgSyslogConsoleSev = _AgNewCfgSyslogConsoleSev_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 24),
    _AgNewCfgSyslogConsoleSev_Type()
)
agNewCfgSyslogConsoleSev.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogConsoleSev.setStatus("current")


class _AgCurCfgSyslogFlashSev_Type(Integer32):
    """Custom type agCurCfgSyslogFlashSev based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("emerg0", 1),
          ("alert1", 2),
          ("crit2", 3),
          ("err3", 4),
          ("warning4", 5),
          ("notice5", 6),
          ("info6", 7),
          ("debug7", 8))
    )


_AgCurCfgSyslogFlashSev_Type.__name__ = "Integer32"
_AgCurCfgSyslogFlashSev_Object = MibScalar
agCurCfgSyslogFlashSev = _AgCurCfgSyslogFlashSev_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 25),
    _AgCurCfgSyslogFlashSev_Type()
)
agCurCfgSyslogFlashSev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogFlashSev.setStatus("current")


class _AgNewCfgSyslogFlashSev_Type(Integer32):
    """Custom type agNewCfgSyslogFlashSev based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("emerg0", 1),
          ("alert1", 2),
          ("crit2", 3),
          ("err3", 4),
          ("warning4", 5),
          ("notice5", 6),
          ("info6", 7),
          ("debug7", 8))
    )


_AgNewCfgSyslogFlashSev_Type.__name__ = "Integer32"
_AgNewCfgSyslogFlashSev_Object = MibScalar
agNewCfgSyslogFlashSev = _AgNewCfgSyslogFlashSev_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 5, 26),
    _AgNewCfgSyslogFlashSev_Type()
)
agNewCfgSyslogFlashSev.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogFlashSev.setStatus("current")
_AgTransfer_ObjectIdentity = ObjectIdentity
agTransfer = _AgTransfer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 7)
)


class _AgTransferServer_Type(DisplayString):
    """Custom type agTransferServer based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_AgTransferServer_Type.__name__ = "DisplayString"
_AgTransferServer_Object = MibScalar
agTransferServer = _AgTransferServer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 7, 1),
    _AgTransferServer_Type()
)
agTransferServer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agTransferServer.setStatus("current")


class _AgTransferImage_Type(Integer32):
    """Custom type agTransferImage based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("image1", 2),
          ("image2", 3),
          ("boot", 4))
    )


_AgTransferImage_Type.__name__ = "Integer32"
_AgTransferImage_Object = MibScalar
agTransferImage = _AgTransferImage_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 7, 2),
    _AgTransferImage_Type()
)
agTransferImage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agTransferImage.setStatus("current")


class _AgTransferImageFileName_Type(DisplayString):
    """Custom type agTransferImageFileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_AgTransferImageFileName_Type.__name__ = "DisplayString"
_AgTransferImageFileName_Object = MibScalar
agTransferImageFileName = _AgTransferImageFileName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 7, 3),
    _AgTransferImageFileName_Type()
)
agTransferImageFileName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agTransferImageFileName.setStatus("current")


class _AgTransferCfgFileName_Type(DisplayString):
    """Custom type agTransferCfgFileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_AgTransferCfgFileName_Type.__name__ = "DisplayString"
_AgTransferCfgFileName_Object = MibScalar
agTransferCfgFileName = _AgTransferCfgFileName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 7, 4),
    _AgTransferCfgFileName_Type()
)
agTransferCfgFileName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agTransferCfgFileName.setStatus("current")


class _AgTransferDumpFileName_Type(DisplayString):
    """Custom type agTransferDumpFileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_AgTransferDumpFileName_Type.__name__ = "DisplayString"
_AgTransferDumpFileName_Object = MibScalar
agTransferDumpFileName = _AgTransferDumpFileName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 7, 5),
    _AgTransferDumpFileName_Type()
)
agTransferDumpFileName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agTransferDumpFileName.setStatus("current")


class _AgTransferAction_Type(Integer32):
    """Custom type agTransferAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              7,
              8,
              14,
              15,
              16,
              17)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("img-get", 2),
          ("cfg-get", 3),
          ("cfg-put", 4),
          ("dump-put", 5),
          ("img-put", 7),
          ("tsdump-put", 8),
          ("ca-get", 14),
          ("hostcert-get", 15),
          ("hostkey-get", 16),
          ("pubkey-get", 17))
    )


_AgTransferAction_Type.__name__ = "Integer32"
_AgTransferAction_Object = MibScalar
agTransferAction = _AgTransferAction_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 7, 6),
    _AgTransferAction_Type()
)
agTransferAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agTransferAction.setStatus("current")


class _AgTransferLastActionStatus_Type(DisplayString):
    """Custom type agTransferLastActionStatus based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_AgTransferLastActionStatus_Type.__name__ = "DisplayString"
_AgTransferLastActionStatus_Object = MibScalar
agTransferLastActionStatus = _AgTransferLastActionStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 7, 7),
    _AgTransferLastActionStatus_Type()
)
agTransferLastActionStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agTransferLastActionStatus.setStatus("current")


class _AgTransferPort_Type(Integer32):
    """Custom type agTransferPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("data", 1),
          ("mgt", 2))
    )


_AgTransferPort_Type.__name__ = "Integer32"
_AgTransferPort_Object = MibScalar
agTransferPort = _AgTransferPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 7, 8),
    _AgTransferPort_Type()
)
agTransferPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agTransferPort.setStatus("current")


class _AgTransferUserName_Type(DisplayString):
    """Custom type agTransferUserName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_AgTransferUserName_Type.__name__ = "DisplayString"
_AgTransferUserName_Object = MibScalar
agTransferUserName = _AgTransferUserName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 7, 9),
    _AgTransferUserName_Type()
)
agTransferUserName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agTransferUserName.setStatus("current")


class _AgTransferPassword_Type(DisplayString):
    """Custom type agTransferPassword based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_AgTransferPassword_Type.__name__ = "DisplayString"
_AgTransferPassword_Object = MibScalar
agTransferPassword = _AgTransferPassword_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 7, 10),
    _AgTransferPassword_Type()
)
agTransferPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agTransferPassword.setStatus("current")


class _AgTransferTSDumpFileName_Type(DisplayString):
    """Custom type agTransferTSDumpFileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_AgTransferTSDumpFileName_Type.__name__ = "DisplayString"
_AgTransferTSDumpFileName_Object = MibScalar
agTransferTSDumpFileName = _AgTransferTSDumpFileName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 7, 11),
    _AgTransferTSDumpFileName_Type()
)
agTransferTSDumpFileName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agTransferTSDumpFileName.setStatus("current")


class _AgTransferLastConfigurationActionStatus_Type(Integer32):
    """Custom type agTransferLastConfigurationActionStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("successfully", 1),
          ("failed", 2))
    )


_AgTransferLastConfigurationActionStatus_Type.__name__ = "Integer32"
_AgTransferLastConfigurationActionStatus_Object = MibScalar
agTransferLastConfigurationActionStatus = _AgTransferLastConfigurationActionStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 7, 14),
    _AgTransferLastConfigurationActionStatus_Type()
)
agTransferLastConfigurationActionStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agTransferLastConfigurationActionStatus.setStatus("current")


class _AgTransferCaFileName_Type(DisplayString):
    """Custom type agTransferCaFileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_AgTransferCaFileName_Type.__name__ = "DisplayString"
_AgTransferCaFileName_Object = MibScalar
agTransferCaFileName = _AgTransferCaFileName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 7, 15),
    _AgTransferCaFileName_Type()
)
agTransferCaFileName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agTransferCaFileName.setStatus("current")


class _AgTransferHostCertFileName_Type(DisplayString):
    """Custom type agTransferHostCertFileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_AgTransferHostCertFileName_Type.__name__ = "DisplayString"
_AgTransferHostCertFileName_Object = MibScalar
agTransferHostCertFileName = _AgTransferHostCertFileName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 7, 16),
    _AgTransferHostCertFileName_Type()
)
agTransferHostCertFileName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agTransferHostCertFileName.setStatus("current")


class _AgTransferHostKeyFileName_Type(DisplayString):
    """Custom type agTransferHostKeyFileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_AgTransferHostKeyFileName_Type.__name__ = "DisplayString"
_AgTransferHostKeyFileName_Object = MibScalar
agTransferHostKeyFileName = _AgTransferHostKeyFileName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 7, 17),
    _AgTransferHostKeyFileName_Type()
)
agTransferHostKeyFileName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agTransferHostKeyFileName.setStatus("current")


class _AgTransferProtocol_Type(Integer32):
    """Custom type agTransferProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("tftp", 1),
          ("ftp", 2),
          ("sftp", 3))
    )


_AgTransferProtocol_Type.__name__ = "Integer32"
_AgTransferProtocol_Object = MibScalar
agTransferProtocol = _AgTransferProtocol_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 7, 18),
    _AgTransferProtocol_Type()
)
agTransferProtocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agTransferProtocol.setStatus("current")


class _AgServerPort_Type(Integer32):
    """Custom type agServerPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(21,
              22,
              69)
        )
    )
    namedValues = NamedValues(
        *(("ftp", 21),
          ("sftp", 22),
          ("tftp", 69))
    )


_AgServerPort_Type.__name__ = "Integer32"
_AgServerPort_Object = MibScalar
agServerPort = _AgServerPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 7, 19),
    _AgServerPort_Type()
)
agServerPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agServerPort.setStatus("current")


class _AgTransferPublicKeyUserName_Type(DisplayString):
    """Custom type agTransferPublicKeyUserName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_AgTransferPublicKeyUserName_Type.__name__ = "DisplayString"
_AgTransferPublicKeyUserName_Object = MibScalar
agTransferPublicKeyUserName = _AgTransferPublicKeyUserName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 7, 21),
    _AgTransferPublicKeyUserName_Type()
)
agTransferPublicKeyUserName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agTransferPublicKeyUserName.setStatus("current")


class _AgTransferPublicKeyFileName_Type(DisplayString):
    """Custom type agTransferPublicKeyFileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_AgTransferPublicKeyFileName_Type.__name__ = "DisplayString"
_AgTransferPublicKeyFileName_Object = MibScalar
agTransferPublicKeyFileName = _AgTransferPublicKeyFileName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 7, 22),
    _AgTransferPublicKeyFileName_Type()
)
agTransferPublicKeyFileName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agTransferPublicKeyFileName.setStatus("current")
_AgApply_ObjectIdentity = ObjectIdentity
agApply = _AgApply_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 8)
)


class _AgApplyPending_Type(Integer32):
    """Custom type agApplyPending based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("applyNeeded", 2),
          ("noApplyNeeded", 3))
    )


_AgApplyPending_Type.__name__ = "Integer32"
_AgApplyPending_Object = MibScalar
agApplyPending = _AgApplyPending_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 8, 1),
    _AgApplyPending_Type()
)
agApplyPending.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agApplyPending.setStatus("current")


class _AgApplyConfig_Type(Integer32):
    """Custom type agApplyConfig based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("apply", 1),
          ("idle", 2),
          ("inprogress", 3),
          ("complete", 4),
          ("failed", 5))
    )


_AgApplyConfig_Type.__name__ = "Integer32"
_AgApplyConfig_Object = MibScalar
agApplyConfig = _AgApplyConfig_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 8, 2),
    _AgApplyConfig_Type()
)
agApplyConfig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agApplyConfig.setStatus("current")
_AgApplyTableSize_Type = Integer32
_AgApplyTableSize_Object = MibScalar
agApplyTableSize = _AgApplyTableSize_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 8, 4),
    _AgApplyTableSize_Type()
)
agApplyTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agApplyTableSize.setStatus("current")
_AgApplyTable_Object = MibTable
agApplyTable = _AgApplyTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 8, 5)
)
if mibBuilder.loadTexts:
    agApplyTable.setStatus("current")
_AgApplyTableEntry_Object = MibTableRow
agApplyTableEntry = _AgApplyTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 8, 5, 1)
)
agApplyTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "agApplyIndex"),
)
if mibBuilder.loadTexts:
    agApplyTableEntry.setStatus("current")
_AgApplyIndex_Type = Integer32
_AgApplyIndex_Object = MibTableColumn
agApplyIndex = _AgApplyIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 8, 5, 1, 1),
    _AgApplyIndex_Type()
)
agApplyIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agApplyIndex.setStatus("current")
_AgApplyString_Type = OctetString
_AgApplyString_Object = MibTableColumn
agApplyString = _AgApplyString_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 8, 5, 1, 2),
    _AgApplyString_Type()
)
agApplyString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agApplyString.setStatus("current")
_AgTacacsConfig_ObjectIdentity = ObjectIdentity
agTacacsConfig = _AgTacacsConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11)
)
_TacCurCfgPrimaryServer_Type = IpAddress
_TacCurCfgPrimaryServer_Object = MibScalar
tacCurCfgPrimaryServer = _TacCurCfgPrimaryServer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 1),
    _TacCurCfgPrimaryServer_Type()
)
tacCurCfgPrimaryServer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tacCurCfgPrimaryServer.setStatus("current")
_TacNewCfgPrimaryServer_Type = IpAddress
_TacNewCfgPrimaryServer_Object = MibScalar
tacNewCfgPrimaryServer = _TacNewCfgPrimaryServer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 2),
    _TacNewCfgPrimaryServer_Type()
)
tacNewCfgPrimaryServer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacNewCfgPrimaryServer.setStatus("current")
_TacCurCfgSecondaryServer_Type = IpAddress
_TacCurCfgSecondaryServer_Object = MibScalar
tacCurCfgSecondaryServer = _TacCurCfgSecondaryServer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 3),
    _TacCurCfgSecondaryServer_Type()
)
tacCurCfgSecondaryServer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tacCurCfgSecondaryServer.setStatus("current")
_TacNewCfgSecondaryServer_Type = IpAddress
_TacNewCfgSecondaryServer_Object = MibScalar
tacNewCfgSecondaryServer = _TacNewCfgSecondaryServer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 4),
    _TacNewCfgSecondaryServer_Type()
)
tacNewCfgSecondaryServer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacNewCfgSecondaryServer.setStatus("current")


class _TacCurCfgPort_Type(Integer32):
    """Custom type tacCurCfgPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65000),
    )


_TacCurCfgPort_Type.__name__ = "Integer32"
_TacCurCfgPort_Object = MibScalar
tacCurCfgPort = _TacCurCfgPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 5),
    _TacCurCfgPort_Type()
)
tacCurCfgPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tacCurCfgPort.setStatus("current")


class _TacNewCfgPort_Type(Integer32):
    """Custom type tacNewCfgPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65000),
    )


_TacNewCfgPort_Type.__name__ = "Integer32"
_TacNewCfgPort_Object = MibScalar
tacNewCfgPort = _TacNewCfgPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 6),
    _TacNewCfgPort_Type()
)
tacNewCfgPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacNewCfgPort.setStatus("current")


class _TacCurCfgTimeout_Type(Integer32):
    """Custom type tacCurCfgTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 15),
    )


_TacCurCfgTimeout_Type.__name__ = "Integer32"
_TacCurCfgTimeout_Object = MibScalar
tacCurCfgTimeout = _TacCurCfgTimeout_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 7),
    _TacCurCfgTimeout_Type()
)
tacCurCfgTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tacCurCfgTimeout.setStatus("current")


class _TacNewCfgTimeout_Type(Integer32):
    """Custom type tacNewCfgTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 15),
    )


_TacNewCfgTimeout_Type.__name__ = "Integer32"
_TacNewCfgTimeout_Object = MibScalar
tacNewCfgTimeout = _TacNewCfgTimeout_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 8),
    _TacNewCfgTimeout_Type()
)
tacNewCfgTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacNewCfgTimeout.setStatus("current")


class _TacCurCfgRetries_Type(Integer32):
    """Custom type tacCurCfgRetries based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3),
    )


_TacCurCfgRetries_Type.__name__ = "Integer32"
_TacCurCfgRetries_Object = MibScalar
tacCurCfgRetries = _TacCurCfgRetries_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 9),
    _TacCurCfgRetries_Type()
)
tacCurCfgRetries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tacCurCfgRetries.setStatus("current")


class _TacNewCfgRetries_Type(Integer32):
    """Custom type tacNewCfgRetries based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3),
    )


_TacNewCfgRetries_Type.__name__ = "Integer32"
_TacNewCfgRetries_Object = MibScalar
tacNewCfgRetries = _TacNewCfgRetries_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 10),
    _TacNewCfgRetries_Type()
)
tacNewCfgRetries.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacNewCfgRetries.setStatus("current")


class _TacCurCfgState_Type(Integer32):
    """Custom type tacCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_TacCurCfgState_Type.__name__ = "Integer32"
_TacCurCfgState_Object = MibScalar
tacCurCfgState = _TacCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 11),
    _TacCurCfgState_Type()
)
tacCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tacCurCfgState.setStatus("current")


class _TacNewCfgState_Type(Integer32):
    """Custom type tacNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_TacNewCfgState_Type.__name__ = "Integer32"
_TacNewCfgState_Object = MibScalar
tacNewCfgState = _TacNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 12),
    _TacNewCfgState_Type()
)
tacNewCfgState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacNewCfgState.setStatus("current")


class _TacCurCfgAuthenString_Type(DisplayString):
    """Custom type tacCurCfgAuthenString based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_TacCurCfgAuthenString_Type.__name__ = "DisplayString"
_TacCurCfgAuthenString_Object = MibScalar
tacCurCfgAuthenString = _TacCurCfgAuthenString_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 13),
    _TacCurCfgAuthenString_Type()
)
tacCurCfgAuthenString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tacCurCfgAuthenString.setStatus("current")


class _TacNewCfgAuthenString_Type(DisplayString):
    """Custom type tacNewCfgAuthenString based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_TacNewCfgAuthenString_Type.__name__ = "DisplayString"
_TacNewCfgAuthenString_Object = MibScalar
tacNewCfgAuthenString = _TacNewCfgAuthenString_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 14),
    _TacNewCfgAuthenString_Type()
)
tacNewCfgAuthenString.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacNewCfgAuthenString.setStatus("current")


class _TacCurCfgBackdoor_Type(Integer32):
    """Custom type tacCurCfgBackdoor based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_TacCurCfgBackdoor_Type.__name__ = "Integer32"
_TacCurCfgBackdoor_Object = MibScalar
tacCurCfgBackdoor = _TacCurCfgBackdoor_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 15),
    _TacCurCfgBackdoor_Type()
)
tacCurCfgBackdoor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tacCurCfgBackdoor.setStatus("current")


class _TacNewCfgBackdoor_Type(Integer32):
    """Custom type tacNewCfgBackdoor based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_TacNewCfgBackdoor_Type.__name__ = "Integer32"
_TacNewCfgBackdoor_Object = MibScalar
tacNewCfgBackdoor = _TacNewCfgBackdoor_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 16),
    _TacNewCfgBackdoor_Type()
)
tacNewCfgBackdoor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacNewCfgBackdoor.setStatus("current")


class _TacCurCfgAuthenSecondString_Type(DisplayString):
    """Custom type tacCurCfgAuthenSecondString based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_TacCurCfgAuthenSecondString_Type.__name__ = "DisplayString"
_TacCurCfgAuthenSecondString_Object = MibScalar
tacCurCfgAuthenSecondString = _TacCurCfgAuthenSecondString_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 17),
    _TacCurCfgAuthenSecondString_Type()
)
tacCurCfgAuthenSecondString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tacCurCfgAuthenSecondString.setStatus("current")


class _TacNewCfgAuthenSecondString_Type(DisplayString):
    """Custom type tacNewCfgAuthenSecondString based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_TacNewCfgAuthenSecondString_Type.__name__ = "DisplayString"
_TacNewCfgAuthenSecondString_Object = MibScalar
tacNewCfgAuthenSecondString = _TacNewCfgAuthenSecondString_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 18),
    _TacNewCfgAuthenSecondString_Type()
)
tacNewCfgAuthenSecondString.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacNewCfgAuthenSecondString.setStatus("current")


class _TacCurCfgCmdAuthor_Type(Integer32):
    """Custom type tacCurCfgCmdAuthor based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_TacCurCfgCmdAuthor_Type.__name__ = "Integer32"
_TacCurCfgCmdAuthor_Object = MibScalar
tacCurCfgCmdAuthor = _TacCurCfgCmdAuthor_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 19),
    _TacCurCfgCmdAuthor_Type()
)
tacCurCfgCmdAuthor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tacCurCfgCmdAuthor.setStatus("current")


class _TacNewCfgCmdAuthor_Type(Integer32):
    """Custom type tacNewCfgCmdAuthor based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_TacNewCfgCmdAuthor_Type.__name__ = "Integer32"
_TacNewCfgCmdAuthor_Object = MibScalar
tacNewCfgCmdAuthor = _TacNewCfgCmdAuthor_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 20),
    _TacNewCfgCmdAuthor_Type()
)
tacNewCfgCmdAuthor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacNewCfgCmdAuthor.setStatus("current")


class _TacCurCfgCmdLogging_Type(Integer32):
    """Custom type tacCurCfgCmdLogging based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_TacCurCfgCmdLogging_Type.__name__ = "Integer32"
_TacCurCfgCmdLogging_Object = MibScalar
tacCurCfgCmdLogging = _TacCurCfgCmdLogging_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 21),
    _TacCurCfgCmdLogging_Type()
)
tacCurCfgCmdLogging.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tacCurCfgCmdLogging.setStatus("current")


class _TacNewCfgCmdLogging_Type(Integer32):
    """Custom type tacNewCfgCmdLogging based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_TacNewCfgCmdLogging_Type.__name__ = "Integer32"
_TacNewCfgCmdLogging_Object = MibScalar
tacNewCfgCmdLogging = _TacNewCfgCmdLogging_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 22),
    _TacNewCfgCmdLogging_Type()
)
tacNewCfgCmdLogging.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacNewCfgCmdLogging.setStatus("current")


class _TacCurCfgSecBd_Type(Integer32):
    """Custom type tacCurCfgSecBd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_TacCurCfgSecBd_Type.__name__ = "Integer32"
_TacCurCfgSecBd_Object = MibScalar
tacCurCfgSecBd = _TacCurCfgSecBd_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 23),
    _TacCurCfgSecBd_Type()
)
tacCurCfgSecBd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tacCurCfgSecBd.setStatus("current")


class _TacNewCfgSecBd_Type(Integer32):
    """Custom type tacNewCfgSecBd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_TacNewCfgSecBd_Type.__name__ = "Integer32"
_TacNewCfgSecBd_Object = MibScalar
tacNewCfgSecBd = _TacNewCfgSecBd_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 24),
    _TacNewCfgSecBd_Type()
)
tacNewCfgSecBd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacNewCfgSecBd.setStatus("current")


class _TacCurCfgCmap_Type(Integer32):
    """Custom type tacCurCfgCmap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_TacCurCfgCmap_Type.__name__ = "Integer32"
_TacCurCfgCmap_Object = MibScalar
tacCurCfgCmap = _TacCurCfgCmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 25),
    _TacCurCfgCmap_Type()
)
tacCurCfgCmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tacCurCfgCmap.setStatus("current")


class _TacNewCfgCmap_Type(Integer32):
    """Custom type tacNewCfgCmap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_TacNewCfgCmap_Type.__name__ = "Integer32"
_TacNewCfgCmap_Object = MibScalar
tacNewCfgCmap = _TacNewCfgCmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 26),
    _TacNewCfgCmap_Type()
)
tacNewCfgCmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacNewCfgCmap.setStatus("current")


class _TacCurCfgEnaPassChange_Type(Integer32):
    """Custom type tacCurCfgEnaPassChange based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_TacCurCfgEnaPassChange_Type.__name__ = "Integer32"
_TacCurCfgEnaPassChange_Object = MibScalar
tacCurCfgEnaPassChange = _TacCurCfgEnaPassChange_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 29),
    _TacCurCfgEnaPassChange_Type()
)
tacCurCfgEnaPassChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tacCurCfgEnaPassChange.setStatus("current")


class _TacNewCfgEnaPassChange_Type(Integer32):
    """Custom type tacNewCfgEnaPassChange based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_TacNewCfgEnaPassChange_Type.__name__ = "Integer32"
_TacNewCfgEnaPassChange_Object = MibScalar
tacNewCfgEnaPassChange = _TacNewCfgEnaPassChange_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 30),
    _TacNewCfgEnaPassChange_Type()
)
tacNewCfgEnaPassChange.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacNewCfgEnaPassChange.setStatus("current")


class _TacChangePassForUser_Type(DisplayString):
    """Custom type tacChangePassForUser based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_TacChangePassForUser_Type.__name__ = "DisplayString"
_TacChangePassForUser_Object = MibScalar
tacChangePassForUser = _TacChangePassForUser_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 31),
    _TacChangePassForUser_Type()
)
tacChangePassForUser.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacChangePassForUser.setStatus("current")


class _TacChangePassCurPass_Type(DisplayString):
    """Custom type tacChangePassCurPass based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_TacChangePassCurPass_Type.__name__ = "DisplayString"
_TacChangePassCurPass_Object = MibScalar
tacChangePassCurPass = _TacChangePassCurPass_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 32),
    _TacChangePassCurPass_Type()
)
tacChangePassCurPass.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tacChangePassCurPass.setStatus("current")


class _TacChangePassNewPass_Type(DisplayString):
    """Custom type tacChangePassNewPass based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_TacChangePassNewPass_Type.__name__ = "DisplayString"
_TacChangePassNewPass_Object = MibScalar
tacChangePassNewPass = _TacChangePassNewPass_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 33),
    _TacChangePassNewPass_Type()
)
tacChangePassNewPass.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacChangePassNewPass.setStatus("current")


class _TacChangePassForServer_Type(Integer32):
    """Custom type tacChangePassForServer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("primary", 1),
          ("secondary", 2))
    )


_TacChangePassForServer_Type.__name__ = "Integer32"
_TacChangePassForServer_Object = MibScalar
tacChangePassForServer = _TacChangePassForServer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 34),
    _TacChangePassForServer_Type()
)
tacChangePassForServer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacChangePassForServer.setStatus("current")


class _TacCurCfgPorttoUse_Type(Integer32):
    """Custom type tacCurCfgPorttoUse based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("data", 1),
          ("mgt", 2))
    )


_TacCurCfgPorttoUse_Type.__name__ = "Integer32"
_TacCurCfgPorttoUse_Object = MibScalar
tacCurCfgPorttoUse = _TacCurCfgPorttoUse_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 35),
    _TacCurCfgPorttoUse_Type()
)
tacCurCfgPorttoUse.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tacCurCfgPorttoUse.setStatus("current")


class _TacNewCfgPorttoUse_Type(Integer32):
    """Custom type tacNewCfgPorttoUse based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("data", 1),
          ("mgt", 2))
    )


_TacNewCfgPorttoUse_Type.__name__ = "Integer32"
_TacNewCfgPorttoUse_Object = MibScalar
tacNewCfgPorttoUse = _TacNewCfgPorttoUse_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 36),
    _TacNewCfgPorttoUse_Type()
)
tacNewCfgPorttoUse.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacNewCfgPorttoUse.setStatus("current")


class _TacCurCfgSecPorttoUse_Type(Integer32):
    """Custom type tacCurCfgSecPorttoUse based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("data", 1),
          ("mgt", 2))
    )


_TacCurCfgSecPorttoUse_Type.__name__ = "Integer32"
_TacCurCfgSecPorttoUse_Object = MibScalar
tacCurCfgSecPorttoUse = _TacCurCfgSecPorttoUse_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 37),
    _TacCurCfgSecPorttoUse_Type()
)
tacCurCfgSecPorttoUse.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tacCurCfgSecPorttoUse.setStatus("current")


class _TacNewCfgSecPorttoUse_Type(Integer32):
    """Custom type tacNewCfgSecPorttoUse based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("data", 1),
          ("mgt", 2))
    )


_TacNewCfgSecPorttoUse_Type.__name__ = "Integer32"
_TacNewCfgSecPorttoUse_Object = MibScalar
tacNewCfgSecPorttoUse = _TacNewCfgSecPorttoUse_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 38),
    _TacNewCfgSecPorttoUse_Type()
)
tacNewCfgSecPorttoUse.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacNewCfgSecPorttoUse.setStatus("current")
_AgTacacsUserMapCurCfgTable_Object = MibTable
agTacacsUserMapCurCfgTable = _AgTacacsUserMapCurCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 39)
)
if mibBuilder.loadTexts:
    agTacacsUserMapCurCfgTable.setStatus("current")
_AgTacacsUserMapCurCfgTableEntry_Object = MibTableRow
agTacacsUserMapCurCfgTableEntry = _AgTacacsUserMapCurCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 39, 1)
)
agTacacsUserMapCurCfgTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "agTacacsUserMapCurCfgUId"),
)
if mibBuilder.loadTexts:
    agTacacsUserMapCurCfgTableEntry.setStatus("current")
_AgTacacsUserMapCurCfgUId_Type = Integer32
_AgTacacsUserMapCurCfgUId_Object = MibTableColumn
agTacacsUserMapCurCfgUId = _AgTacacsUserMapCurCfgUId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 39, 1, 1),
    _AgTacacsUserMapCurCfgUId_Type()
)
agTacacsUserMapCurCfgUId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agTacacsUserMapCurCfgUId.setStatus("current")


class _AgTacacsUserMapCurCfgMapping_Type(Integer32):
    """Custom type agTacacsUserMapCurCfgMapping based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("user", 1),
          ("oper", 2),
          ("admin", 3))
    )


_AgTacacsUserMapCurCfgMapping_Type.__name__ = "Integer32"
_AgTacacsUserMapCurCfgMapping_Object = MibTableColumn
agTacacsUserMapCurCfgMapping = _AgTacacsUserMapCurCfgMapping_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 39, 1, 2),
    _AgTacacsUserMapCurCfgMapping_Type()
)
agTacacsUserMapCurCfgMapping.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agTacacsUserMapCurCfgMapping.setStatus("current")
_AgTacacsUserMapNewCfgTable_Object = MibTable
agTacacsUserMapNewCfgTable = _AgTacacsUserMapNewCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 40)
)
if mibBuilder.loadTexts:
    agTacacsUserMapNewCfgTable.setStatus("current")
_AgTacacsUserMapNewCfgTableEntry_Object = MibTableRow
agTacacsUserMapNewCfgTableEntry = _AgTacacsUserMapNewCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 40, 1)
)
agTacacsUserMapNewCfgTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "agTacacsUserMapNewCfgUId"),
)
if mibBuilder.loadTexts:
    agTacacsUserMapNewCfgTableEntry.setStatus("current")
_AgTacacsUserMapNewCfgUId_Type = Integer32
_AgTacacsUserMapNewCfgUId_Object = MibTableColumn
agTacacsUserMapNewCfgUId = _AgTacacsUserMapNewCfgUId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 40, 1, 1),
    _AgTacacsUserMapNewCfgUId_Type()
)
agTacacsUserMapNewCfgUId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agTacacsUserMapNewCfgUId.setStatus("current")


class _AgTacacsUserMapNewCfgMapping_Type(Integer32):
    """Custom type agTacacsUserMapNewCfgMapping based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("user", 1),
          ("oper", 2),
          ("admin", 3))
    )


_AgTacacsUserMapNewCfgMapping_Type.__name__ = "Integer32"
_AgTacacsUserMapNewCfgMapping_Object = MibTableColumn
agTacacsUserMapNewCfgMapping = _AgTacacsUserMapNewCfgMapping_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 40, 1, 2),
    _AgTacacsUserMapNewCfgMapping_Type()
)
agTacacsUserMapNewCfgMapping.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agTacacsUserMapNewCfgMapping.setStatus("current")


class _TacNewCfgDirectedRequest_Type(Integer32):
    """Custom type tacNewCfgDirectedRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("restricted", 2),
          ("no-truncate", 3))
    )


_TacNewCfgDirectedRequest_Type.__name__ = "Integer32"
_TacNewCfgDirectedRequest_Object = MibScalar
tacNewCfgDirectedRequest = _TacNewCfgDirectedRequest_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 41),
    _TacNewCfgDirectedRequest_Type()
)
tacNewCfgDirectedRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacNewCfgDirectedRequest.setStatus("current")


class _TacCurCfgDirectedRequest_Type(Integer32):
    """Custom type tacCurCfgDirectedRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("restricted", 2),
          ("no-truncate", 3))
    )


_TacCurCfgDirectedRequest_Type.__name__ = "Integer32"
_TacCurCfgDirectedRequest_Object = MibScalar
tacCurCfgDirectedRequest = _TacCurCfgDirectedRequest_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 42),
    _TacCurCfgDirectedRequest_Type()
)
tacCurCfgDirectedRequest.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tacCurCfgDirectedRequest.setStatus("current")


class _TacCurCfgAttempts_Type(Integer32):
    """Custom type tacCurCfgAttempts based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_TacCurCfgAttempts_Type.__name__ = "Integer32"
_TacCurCfgAttempts_Object = MibScalar
tacCurCfgAttempts = _TacCurCfgAttempts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 43),
    _TacCurCfgAttempts_Type()
)
tacCurCfgAttempts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tacCurCfgAttempts.setStatus("current")


class _TacNewCfgAttempts_Type(Integer32):
    """Custom type tacNewCfgAttempts based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_TacNewCfgAttempts_Type.__name__ = "Integer32"
_TacNewCfgAttempts_Object = MibScalar
tacNewCfgAttempts = _TacNewCfgAttempts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 44),
    _TacNewCfgAttempts_Type()
)
tacNewCfgAttempts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacNewCfgAttempts.setStatus("current")


class _TacCurBypassEnable_Type(Integer32):
    """Custom type tacCurBypassEnable based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_TacCurBypassEnable_Type.__name__ = "Integer32"
_TacCurBypassEnable_Object = MibScalar
tacCurBypassEnable = _TacCurBypassEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 45),
    _TacCurBypassEnable_Type()
)
tacCurBypassEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tacCurBypassEnable.setStatus("current")


class _TacNewBypassEnable_Type(Integer32):
    """Custom type tacNewBypassEnable based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_TacNewBypassEnable_Type.__name__ = "Integer32"
_TacNewBypassEnable_Object = MibScalar
tacNewBypassEnable = _TacNewBypassEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 46),
    _TacNewBypassEnable_Type()
)
tacNewBypassEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacNewBypassEnable.setStatus("current")


class _TacCurCfgEnableAccounting_Type(Integer32):
    """Custom type tacCurCfgEnableAccounting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_TacCurCfgEnableAccounting_Type.__name__ = "Integer32"
_TacCurCfgEnableAccounting_Object = MibScalar
tacCurCfgEnableAccounting = _TacCurCfgEnableAccounting_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 47),
    _TacCurCfgEnableAccounting_Type()
)
tacCurCfgEnableAccounting.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tacCurCfgEnableAccounting.setStatus("current")


class _TacNewCfgEnableAccounting_Type(Integer32):
    """Custom type tacNewCfgEnableAccounting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_TacNewCfgEnableAccounting_Type.__name__ = "Integer32"
_TacNewCfgEnableAccounting_Object = MibScalar
tacNewCfgEnableAccounting = _TacNewCfgEnableAccounting_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 48),
    _TacNewCfgEnableAccounting_Type()
)
tacNewCfgEnableAccounting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacNewCfgEnableAccounting.setStatus("current")
_TacCurCfgSrcLoopIf_Type = Integer32
_TacCurCfgSrcLoopIf_Object = MibScalar
tacCurCfgSrcLoopIf = _TacCurCfgSrcLoopIf_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 49),
    _TacCurCfgSrcLoopIf_Type()
)
tacCurCfgSrcLoopIf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tacCurCfgSrcLoopIf.setStatus("current")
_TacNewCfgSrcLoopIf_Type = Integer32
_TacNewCfgSrcLoopIf_Object = MibScalar
tacNewCfgSrcLoopIf = _TacNewCfgSrcLoopIf_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 11, 50),
    _TacNewCfgSrcLoopIf_Type()
)
tacNewCfgSrcLoopIf.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacNewCfgSrcLoopIf.setStatus("current")
_AgMgmtNetConfig_ObjectIdentity = ObjectIdentity
agMgmtNetConfig = _AgMgmtNetConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 12)
)
_AgMgmtNetTableMaxSize_Type = Integer32
_AgMgmtNetTableMaxSize_Object = MibScalar
agMgmtNetTableMaxSize = _AgMgmtNetTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 12, 1),
    _AgMgmtNetTableMaxSize_Type()
)
agMgmtNetTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agMgmtNetTableMaxSize.setStatus("current")
_AgCurCfgMgmtNetTable_Object = MibTable
agCurCfgMgmtNetTable = _AgCurCfgMgmtNetTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 12, 2)
)
if mibBuilder.loadTexts:
    agCurCfgMgmtNetTable.setStatus("current")
_AgCurCfgMgmtNetEntry_Object = MibTableRow
agCurCfgMgmtNetEntry = _AgCurCfgMgmtNetEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 12, 2, 1)
)
agCurCfgMgmtNetEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "agCurCfgMgmtNetIndex"),
)
if mibBuilder.loadTexts:
    agCurCfgMgmtNetEntry.setStatus("current")
_AgCurCfgMgmtNetIndex_Type = Integer32
_AgCurCfgMgmtNetIndex_Object = MibTableColumn
agCurCfgMgmtNetIndex = _AgCurCfgMgmtNetIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 12, 2, 1, 1),
    _AgCurCfgMgmtNetIndex_Type()
)
agCurCfgMgmtNetIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgMgmtNetIndex.setStatus("current")
_AgCurCfgMgmtNetSubnet_Type = DisplayString
_AgCurCfgMgmtNetSubnet_Object = MibTableColumn
agCurCfgMgmtNetSubnet = _AgCurCfgMgmtNetSubnet_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 12, 2, 1, 2),
    _AgCurCfgMgmtNetSubnet_Type()
)
agCurCfgMgmtNetSubnet.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgMgmtNetSubnet.setStatus("current")
_AgCurCfgMgmtNetMask_Type = DisplayString
_AgCurCfgMgmtNetMask_Object = MibTableColumn
agCurCfgMgmtNetMask = _AgCurCfgMgmtNetMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 12, 2, 1, 3),
    _AgCurCfgMgmtNetMask_Type()
)
agCurCfgMgmtNetMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgMgmtNetMask.setStatus("current")
_AgNewCfgMgmtNetTable_Object = MibTable
agNewCfgMgmtNetTable = _AgNewCfgMgmtNetTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 12, 3)
)
if mibBuilder.loadTexts:
    agNewCfgMgmtNetTable.setStatus("current")
_AgNewCfgMgmtNetEntry_Object = MibTableRow
agNewCfgMgmtNetEntry = _AgNewCfgMgmtNetEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 12, 3, 1)
)
agNewCfgMgmtNetEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "agNewCfgMgmtNetIndex"),
)
if mibBuilder.loadTexts:
    agNewCfgMgmtNetEntry.setStatus("current")
_AgNewCfgMgmtNetIndex_Type = Integer32
_AgNewCfgMgmtNetIndex_Object = MibTableColumn
agNewCfgMgmtNetIndex = _AgNewCfgMgmtNetIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 12, 3, 1, 1),
    _AgNewCfgMgmtNetIndex_Type()
)
agNewCfgMgmtNetIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agNewCfgMgmtNetIndex.setStatus("current")
_AgNewCfgMgmtNetSubnet_Type = DisplayString
_AgNewCfgMgmtNetSubnet_Object = MibTableColumn
agNewCfgMgmtNetSubnet = _AgNewCfgMgmtNetSubnet_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 12, 3, 1, 2),
    _AgNewCfgMgmtNetSubnet_Type()
)
agNewCfgMgmtNetSubnet.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agNewCfgMgmtNetSubnet.setStatus("current")
_AgNewCfgMgmtNetMask_Type = DisplayString
_AgNewCfgMgmtNetMask_Object = MibTableColumn
agNewCfgMgmtNetMask = _AgNewCfgMgmtNetMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 12, 3, 1, 3),
    _AgNewCfgMgmtNetMask_Type()
)
agNewCfgMgmtNetMask.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agNewCfgMgmtNetMask.setStatus("current")


class _AgNewCfgMgmtNetDelete_Type(Integer32):
    """Custom type agNewCfgMgmtNetDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_AgNewCfgMgmtNetDelete_Type.__name__ = "Integer32"
_AgNewCfgMgmtNetDelete_Object = MibTableColumn
agNewCfgMgmtNetDelete = _AgNewCfgMgmtNetDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 12, 3, 1, 4),
    _AgNewCfgMgmtNetDelete_Type()
)
agNewCfgMgmtNetDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agNewCfgMgmtNetDelete.setStatus("current")


class _AgMgmtNetClear_Type(Integer32):
    """Custom type agMgmtNetClear based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("clear", 2))
    )


_AgMgmtNetClear_Type.__name__ = "Integer32"
_AgMgmtNetClear_Object = MibScalar
agMgmtNetClear = _AgMgmtNetClear_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 12, 4),
    _AgMgmtNetClear_Type()
)
agMgmtNetClear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agMgmtNetClear.setStatus("current")
_AgBoot_ObjectIdentity = ObjectIdentity
agBoot = _AgBoot_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 13)
)


class _AgCfgBootResetParameters_Type(DisplayString):
    """Custom type agCfgBootResetParameters based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_AgCfgBootResetParameters_Type.__name__ = "DisplayString"
_AgCfgBootResetParameters_Object = MibScalar
agCfgBootResetParameters = _AgCfgBootResetParameters_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 13, 1),
    _AgCfgBootResetParameters_Type()
)
agCfgBootResetParameters.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agCfgBootResetParameters.setStatus("current")


class _AgCfgBootReset_Type(Integer32):
    """Custom type agCfgBootReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("cancel", 2))
    )


_AgCfgBootReset_Type.__name__ = "Integer32"
_AgCfgBootReset_Object = MibScalar
agCfgBootReset = _AgCfgBootReset_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 13, 4),
    _AgCfgBootReset_Type()
)
agCfgBootReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agCfgBootReset.setStatus("current")


class _AgCfgBootNxtResetTime_Type(DisplayString):
    """Custom type agCfgBootNxtResetTime based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_AgCfgBootNxtResetTime_Type.__name__ = "DisplayString"
_AgCfgBootNxtResetTime_Object = MibScalar
agCfgBootNxtResetTime = _AgCfgBootNxtResetTime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 13, 5),
    _AgCfgBootNxtResetTime_Type()
)
agCfgBootNxtResetTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCfgBootNxtResetTime.setStatus("current")


class _AgCfgBootPendingReset_Type(Integer32):
    """Custom type agCfgBootPendingReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("idle", 1),
          ("pending", 2))
    )


_AgCfgBootPendingReset_Type.__name__ = "Integer32"
_AgCfgBootPendingReset_Object = MibScalar
agCfgBootPendingReset = _AgCfgBootPendingReset_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 13, 6),
    _AgCfgBootPendingReset_Type()
)
agCfgBootPendingReset.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCfgBootPendingReset.setStatus("current")
_AgAccess_ObjectIdentity = ObjectIdentity
agAccess = _AgAccess_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 19)
)
_AgAccessUserMaxUserID_Type = Integer32
_AgAccessUserMaxUserID_Object = MibScalar
agAccessUserMaxUserID = _AgAccessUserMaxUserID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 19, 1),
    _AgAccessUserMaxUserID_Type()
)
agAccessUserMaxUserID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agAccessUserMaxUserID.setStatus("current")
_AgAccessUserCurCfgTable_Object = MibTable
agAccessUserCurCfgTable = _AgAccessUserCurCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 19, 2)
)
if mibBuilder.loadTexts:
    agAccessUserCurCfgTable.setStatus("current")
_AgAccessUserCurCfgTableEntry_Object = MibTableRow
agAccessUserCurCfgTableEntry = _AgAccessUserCurCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 19, 2, 1)
)
agAccessUserCurCfgTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "agAccessUserCurCfgUId"),
)
if mibBuilder.loadTexts:
    agAccessUserCurCfgTableEntry.setStatus("current")
_AgAccessUserCurCfgUId_Type = Integer32
_AgAccessUserCurCfgUId_Object = MibTableColumn
agAccessUserCurCfgUId = _AgAccessUserCurCfgUId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 19, 2, 1, 1),
    _AgAccessUserCurCfgUId_Type()
)
agAccessUserCurCfgUId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agAccessUserCurCfgUId.setStatus("current")


class _AgAccessUserCurCos_Type(Integer32):
    """Custom type agAccessUserCurCos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              3,
              6)
        )
    )
    namedValues = NamedValues(
        *(("user", 0),
          ("oper", 3),
          ("admin", 6))
    )


_AgAccessUserCurCos_Type.__name__ = "Integer32"
_AgAccessUserCurCos_Object = MibTableColumn
agAccessUserCurCos = _AgAccessUserCurCos_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 19, 2, 1, 2),
    _AgAccessUserCurCos_Type()
)
agAccessUserCurCos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agAccessUserCurCos.setStatus("current")


class _AgAccessUserCurCfgName_Type(DisplayString):
    """Custom type agAccessUserCurCfgName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_AgAccessUserCurCfgName_Type.__name__ = "DisplayString"
_AgAccessUserCurCfgName_Object = MibTableColumn
agAccessUserCurCfgName = _AgAccessUserCurCfgName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 19, 2, 1, 3),
    _AgAccessUserCurCfgName_Type()
)
agAccessUserCurCfgName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agAccessUserCurCfgName.setStatus("current")


class _AgAccessUserCurCfgPswd_Type(DisplayString):
    """Custom type agAccessUserCurCfgPswd based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_AgAccessUserCurCfgPswd_Type.__name__ = "DisplayString"
_AgAccessUserCurCfgPswd_Object = MibTableColumn
agAccessUserCurCfgPswd = _AgAccessUserCurCfgPswd_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 19, 2, 1, 4),
    _AgAccessUserCurCfgPswd_Type()
)
agAccessUserCurCfgPswd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agAccessUserCurCfgPswd.setStatus("current")


class _AgAccessUserCurCfgState_Type(Integer32):
    """Custom type agAccessUserCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_AgAccessUserCurCfgState_Type.__name__ = "Integer32"
_AgAccessUserCurCfgState_Object = MibTableColumn
agAccessUserCurCfgState = _AgAccessUserCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 19, 2, 1, 6),
    _AgAccessUserCurCfgState_Type()
)
agAccessUserCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agAccessUserCurCfgState.setStatus("current")
_AgAccessUserNewCfgTable_Object = MibTable
agAccessUserNewCfgTable = _AgAccessUserNewCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 19, 3)
)
if mibBuilder.loadTexts:
    agAccessUserNewCfgTable.setStatus("current")
_AgAccessUserNewCfgTableEntry_Object = MibTableRow
agAccessUserNewCfgTableEntry = _AgAccessUserNewCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 19, 3, 1)
)
agAccessUserNewCfgTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "agAccessUserNewCfgUId"),
)
if mibBuilder.loadTexts:
    agAccessUserNewCfgTableEntry.setStatus("current")
_AgAccessUserNewCfgUId_Type = Integer32
_AgAccessUserNewCfgUId_Object = MibTableColumn
agAccessUserNewCfgUId = _AgAccessUserNewCfgUId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 19, 3, 1, 1),
    _AgAccessUserNewCfgUId_Type()
)
agAccessUserNewCfgUId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agAccessUserNewCfgUId.setStatus("current")


class _AgAccessUserNewCos_Type(Integer32):
    """Custom type agAccessUserNewCos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              3,
              6)
        )
    )
    namedValues = NamedValues(
        *(("user", 0),
          ("oper", 3),
          ("admin", 6))
    )


_AgAccessUserNewCos_Type.__name__ = "Integer32"
_AgAccessUserNewCos_Object = MibTableColumn
agAccessUserNewCos = _AgAccessUserNewCos_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 19, 3, 1, 2),
    _AgAccessUserNewCos_Type()
)
agAccessUserNewCos.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agAccessUserNewCos.setStatus("current")


class _AgAccessUserNewCfgName_Type(DisplayString):
    """Custom type agAccessUserNewCfgName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_AgAccessUserNewCfgName_Type.__name__ = "DisplayString"
_AgAccessUserNewCfgName_Object = MibTableColumn
agAccessUserNewCfgName = _AgAccessUserNewCfgName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 19, 3, 1, 3),
    _AgAccessUserNewCfgName_Type()
)
agAccessUserNewCfgName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agAccessUserNewCfgName.setStatus("current")


class _AgAccessUserNewCfgPswd_Type(DisplayString):
    """Custom type agAccessUserNewCfgPswd based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_AgAccessUserNewCfgPswd_Type.__name__ = "DisplayString"
_AgAccessUserNewCfgPswd_Object = MibTableColumn
agAccessUserNewCfgPswd = _AgAccessUserNewCfgPswd_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 19, 3, 1, 4),
    _AgAccessUserNewCfgPswd_Type()
)
agAccessUserNewCfgPswd.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agAccessUserNewCfgPswd.setStatus("current")


class _AgAccessUserNewCfgState_Type(Integer32):
    """Custom type agAccessUserNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_AgAccessUserNewCfgState_Type.__name__ = "Integer32"
_AgAccessUserNewCfgState_Object = MibTableColumn
agAccessUserNewCfgState = _AgAccessUserNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 19, 3, 1, 7),
    _AgAccessUserNewCfgState_Type()
)
agAccessUserNewCfgState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agAccessUserNewCfgState.setStatus("current")


class _AgAccessUserNewCfgDelete_Type(Integer32):
    """Custom type agAccessUserNewCfgDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_AgAccessUserNewCfgDelete_Type.__name__ = "Integer32"
_AgAccessUserNewCfgDelete_Object = MibTableColumn
agAccessUserNewCfgDelete = _AgAccessUserNewCfgDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 19, 3, 1, 8),
    _AgAccessUserNewCfgDelete_Type()
)
agAccessUserNewCfgDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agAccessUserNewCfgDelete.setStatus("current")


class _AgAccessCurStrongPassword_Type(Integer32):
    """Custom type agAccessCurStrongPassword based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_AgAccessCurStrongPassword_Type.__name__ = "Integer32"
_AgAccessCurStrongPassword_Object = MibScalar
agAccessCurStrongPassword = _AgAccessCurStrongPassword_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 19, 4),
    _AgAccessCurStrongPassword_Type()
)
agAccessCurStrongPassword.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agAccessCurStrongPassword.setStatus("current")


class _AgAccessNewStrongPassword_Type(Integer32):
    """Custom type agAccessNewStrongPassword based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_AgAccessNewStrongPassword_Type.__name__ = "Integer32"
_AgAccessNewStrongPassword_Object = MibScalar
agAccessNewStrongPassword = _AgAccessNewStrongPassword_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 19, 5),
    _AgAccessNewStrongPassword_Type()
)
agAccessNewStrongPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agAccessNewStrongPassword.setStatus("current")


class _AgAccessCurStrongPassValidity_Type(Integer32):
    """Custom type agAccessCurStrongPassValidity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 365),
    )


_AgAccessCurStrongPassValidity_Type.__name__ = "Integer32"
_AgAccessCurStrongPassValidity_Object = MibScalar
agAccessCurStrongPassValidity = _AgAccessCurStrongPassValidity_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 19, 6),
    _AgAccessCurStrongPassValidity_Type()
)
agAccessCurStrongPassValidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agAccessCurStrongPassValidity.setStatus("current")


class _AgAccessNewStrongPassValidity_Type(Integer32):
    """Custom type agAccessNewStrongPassValidity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 365),
    )


_AgAccessNewStrongPassValidity_Type.__name__ = "Integer32"
_AgAccessNewStrongPassValidity_Object = MibScalar
agAccessNewStrongPassValidity = _AgAccessNewStrongPassValidity_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 19, 7),
    _AgAccessNewStrongPassValidity_Type()
)
agAccessNewStrongPassValidity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agAccessNewStrongPassValidity.setStatus("current")


class _AgAccessCurStrongPassWarning_Type(Integer32):
    """Custom type agAccessCurStrongPassWarning based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 365),
    )


_AgAccessCurStrongPassWarning_Type.__name__ = "Integer32"
_AgAccessCurStrongPassWarning_Object = MibScalar
agAccessCurStrongPassWarning = _AgAccessCurStrongPassWarning_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 19, 8),
    _AgAccessCurStrongPassWarning_Type()
)
agAccessCurStrongPassWarning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agAccessCurStrongPassWarning.setStatus("current")


class _AgAccessNewStrongPassWarning_Type(Integer32):
    """Custom type agAccessNewStrongPassWarning based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 365),
    )


_AgAccessNewStrongPassWarning_Type.__name__ = "Integer32"
_AgAccessNewStrongPassWarning_Object = MibScalar
agAccessNewStrongPassWarning = _AgAccessNewStrongPassWarning_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 19, 9),
    _AgAccessNewStrongPassWarning_Type()
)
agAccessNewStrongPassWarning.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agAccessNewStrongPassWarning.setStatus("current")


class _AgAccessCurStrongPassFailLog_Type(Integer32):
    """Custom type agAccessCurStrongPassFailLog based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_AgAccessCurStrongPassFailLog_Type.__name__ = "Integer32"
_AgAccessCurStrongPassFailLog_Object = MibScalar
agAccessCurStrongPassFailLog = _AgAccessCurStrongPassFailLog_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 19, 10),
    _AgAccessCurStrongPassFailLog_Type()
)
agAccessCurStrongPassFailLog.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agAccessCurStrongPassFailLog.setStatus("current")


class _AgAccessNewStrongPassFailLog_Type(Integer32):
    """Custom type agAccessNewStrongPassFailLog based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_AgAccessNewStrongPassFailLog_Type.__name__ = "Integer32"
_AgAccessNewStrongPassFailLog_Object = MibScalar
agAccessNewStrongPassFailLog = _AgAccessNewStrongPassFailLog_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 19, 11),
    _AgAccessNewStrongPassFailLog_Type()
)
agAccessNewStrongPassFailLog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agAccessNewStrongPassFailLog.setStatus("current")


class _AgAccessCurDefaultAdmin_Type(Integer32):
    """Custom type agAccessCurDefaultAdmin based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_AgAccessCurDefaultAdmin_Type.__name__ = "Integer32"
_AgAccessCurDefaultAdmin_Object = MibScalar
agAccessCurDefaultAdmin = _AgAccessCurDefaultAdmin_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 19, 12),
    _AgAccessCurDefaultAdmin_Type()
)
agAccessCurDefaultAdmin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agAccessCurDefaultAdmin.setStatus("current")


class _AgAccessNewDefaultAdmin_Type(Integer32):
    """Custom type agAccessNewDefaultAdmin based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_AgAccessNewDefaultAdmin_Type.__name__ = "Integer32"
_AgAccessNewDefaultAdmin_Object = MibScalar
agAccessNewDefaultAdmin = _AgAccessNewDefaultAdmin_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 19, 13),
    _AgAccessNewDefaultAdmin_Type()
)
agAccessNewDefaultAdmin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agAccessNewDefaultAdmin.setStatus("current")


class _AgAccessCurStrongPassLockout_Type(Integer32):
    """Custom type agAccessCurStrongPassLockout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_AgAccessCurStrongPassLockout_Type.__name__ = "Integer32"
_AgAccessCurStrongPassLockout_Object = MibScalar
agAccessCurStrongPassLockout = _AgAccessCurStrongPassLockout_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 19, 14),
    _AgAccessCurStrongPassLockout_Type()
)
agAccessCurStrongPassLockout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agAccessCurStrongPassLockout.setStatus("current")


class _AgAccessNewStrongPassLockout_Type(Integer32):
    """Custom type agAccessNewStrongPassLockout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_AgAccessNewStrongPassLockout_Type.__name__ = "Integer32"
_AgAccessNewStrongPassLockout_Object = MibScalar
agAccessNewStrongPassLockout = _AgAccessNewStrongPassLockout_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 19, 15),
    _AgAccessNewStrongPassLockout_Type()
)
agAccessNewStrongPassLockout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agAccessNewStrongPassLockout.setStatus("current")


class _AgAccessCurStrongPassAttemptsMaxFail_Type(Integer32):
    """Custom type agAccessCurStrongPassAttemptsMaxFail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_AgAccessCurStrongPassAttemptsMaxFail_Type.__name__ = "Integer32"
_AgAccessCurStrongPassAttemptsMaxFail_Object = MibScalar
agAccessCurStrongPassAttemptsMaxFail = _AgAccessCurStrongPassAttemptsMaxFail_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 19, 16),
    _AgAccessCurStrongPassAttemptsMaxFail_Type()
)
agAccessCurStrongPassAttemptsMaxFail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agAccessCurStrongPassAttemptsMaxFail.setStatus("current")


class _AgAccessNewStrongPassAttemptsMaxFail_Type(Integer32):
    """Custom type agAccessNewStrongPassAttemptsMaxFail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_AgAccessNewStrongPassAttemptsMaxFail_Type.__name__ = "Integer32"
_AgAccessNewStrongPassAttemptsMaxFail_Object = MibScalar
agAccessNewStrongPassAttemptsMaxFail = _AgAccessNewStrongPassAttemptsMaxFail_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 19, 17),
    _AgAccessNewStrongPassAttemptsMaxFail_Type()
)
agAccessNewStrongPassAttemptsMaxFail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agAccessNewStrongPassAttemptsMaxFail.setStatus("current")
_AgLdapConfig_ObjectIdentity = ObjectIdentity
agLdapConfig = _AgLdapConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 21)
)


class _LdapCurCfgPrimaryIpAddr_Type(DisplayString):
    """Custom type ldapCurCfgPrimaryIpAddr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_LdapCurCfgPrimaryIpAddr_Type.__name__ = "DisplayString"
_LdapCurCfgPrimaryIpAddr_Object = MibScalar
ldapCurCfgPrimaryIpAddr = _LdapCurCfgPrimaryIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 21, 1),
    _LdapCurCfgPrimaryIpAddr_Type()
)
ldapCurCfgPrimaryIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldapCurCfgPrimaryIpAddr.setStatus("current")


class _LdapNewCfgPrimaryIpAddr_Type(DisplayString):
    """Custom type ldapNewCfgPrimaryIpAddr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_LdapNewCfgPrimaryIpAddr_Type.__name__ = "DisplayString"
_LdapNewCfgPrimaryIpAddr_Object = MibScalar
ldapNewCfgPrimaryIpAddr = _LdapNewCfgPrimaryIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 21, 2),
    _LdapNewCfgPrimaryIpAddr_Type()
)
ldapNewCfgPrimaryIpAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapNewCfgPrimaryIpAddr.setStatus("current")


class _LdapCurCfgSecondaryIpAddr_Type(DisplayString):
    """Custom type ldapCurCfgSecondaryIpAddr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_LdapCurCfgSecondaryIpAddr_Type.__name__ = "DisplayString"
_LdapCurCfgSecondaryIpAddr_Object = MibScalar
ldapCurCfgSecondaryIpAddr = _LdapCurCfgSecondaryIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 21, 3),
    _LdapCurCfgSecondaryIpAddr_Type()
)
ldapCurCfgSecondaryIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldapCurCfgSecondaryIpAddr.setStatus("current")


class _LdapNewCfgSecondaryIpAddr_Type(DisplayString):
    """Custom type ldapNewCfgSecondaryIpAddr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_LdapNewCfgSecondaryIpAddr_Type.__name__ = "DisplayString"
_LdapNewCfgSecondaryIpAddr_Object = MibScalar
ldapNewCfgSecondaryIpAddr = _LdapNewCfgSecondaryIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 21, 4),
    _LdapNewCfgSecondaryIpAddr_Type()
)
ldapNewCfgSecondaryIpAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapNewCfgSecondaryIpAddr.setStatus("current")


class _LdapCurCfgPort_Type(Integer32):
    """Custom type ldapCurCfgPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65000),
    )


_LdapCurCfgPort_Type.__name__ = "Integer32"
_LdapCurCfgPort_Object = MibScalar
ldapCurCfgPort = _LdapCurCfgPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 21, 5),
    _LdapCurCfgPort_Type()
)
ldapCurCfgPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldapCurCfgPort.setStatus("current")


class _LdapNewCfgPort_Type(Integer32):
    """Custom type ldapNewCfgPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65000),
    )


_LdapNewCfgPort_Type.__name__ = "Integer32"
_LdapNewCfgPort_Object = MibScalar
ldapNewCfgPort = _LdapNewCfgPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 21, 6),
    _LdapNewCfgPort_Type()
)
ldapNewCfgPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapNewCfgPort.setStatus("current")


class _LdapCurCfgRetries_Type(Integer32):
    """Custom type ldapCurCfgRetries based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3),
    )


_LdapCurCfgRetries_Type.__name__ = "Integer32"
_LdapCurCfgRetries_Object = MibScalar
ldapCurCfgRetries = _LdapCurCfgRetries_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 21, 7),
    _LdapCurCfgRetries_Type()
)
ldapCurCfgRetries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldapCurCfgRetries.setStatus("current")


class _LdapNewCfgRetries_Type(Integer32):
    """Custom type ldapNewCfgRetries based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3),
    )


_LdapNewCfgRetries_Type.__name__ = "Integer32"
_LdapNewCfgRetries_Object = MibScalar
ldapNewCfgRetries = _LdapNewCfgRetries_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 21, 8),
    _LdapNewCfgRetries_Type()
)
ldapNewCfgRetries.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapNewCfgRetries.setStatus("current")


class _LdapCurCfgTimeout_Type(Integer32):
    """Custom type ldapCurCfgTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 15),
    )


_LdapCurCfgTimeout_Type.__name__ = "Integer32"
_LdapCurCfgTimeout_Object = MibScalar
ldapCurCfgTimeout = _LdapCurCfgTimeout_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 21, 9),
    _LdapCurCfgTimeout_Type()
)
ldapCurCfgTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldapCurCfgTimeout.setStatus("current")


class _LdapNewCfgTimeout_Type(Integer32):
    """Custom type ldapNewCfgTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 15),
    )


_LdapNewCfgTimeout_Type.__name__ = "Integer32"
_LdapNewCfgTimeout_Object = MibScalar
ldapNewCfgTimeout = _LdapNewCfgTimeout_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 21, 10),
    _LdapNewCfgTimeout_Type()
)
ldapNewCfgTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapNewCfgTimeout.setStatus("current")


class _LdapCurCfgDomain_Type(DisplayString):
    """Custom type ldapCurCfgDomain based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 127),
    )


_LdapCurCfgDomain_Type.__name__ = "DisplayString"
_LdapCurCfgDomain_Object = MibScalar
ldapCurCfgDomain = _LdapCurCfgDomain_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 21, 11),
    _LdapCurCfgDomain_Type()
)
ldapCurCfgDomain.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldapCurCfgDomain.setStatus("current")


class _LdapNewCfgDomain_Type(DisplayString):
    """Custom type ldapNewCfgDomain based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 127),
    )


_LdapNewCfgDomain_Type.__name__ = "DisplayString"
_LdapNewCfgDomain_Object = MibScalar
ldapNewCfgDomain = _LdapNewCfgDomain_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 21, 12),
    _LdapNewCfgDomain_Type()
)
ldapNewCfgDomain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapNewCfgDomain.setStatus("current")


class _LdapCurCfgBackdoor_Type(Integer32):
    """Custom type ldapCurCfgBackdoor based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_LdapCurCfgBackdoor_Type.__name__ = "Integer32"
_LdapCurCfgBackdoor_Object = MibScalar
ldapCurCfgBackdoor = _LdapCurCfgBackdoor_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 21, 13),
    _LdapCurCfgBackdoor_Type()
)
ldapCurCfgBackdoor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldapCurCfgBackdoor.setStatus("current")


class _LdapNewCfgBackdoor_Type(Integer32):
    """Custom type ldapNewCfgBackdoor based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_LdapNewCfgBackdoor_Type.__name__ = "Integer32"
_LdapNewCfgBackdoor_Object = MibScalar
ldapNewCfgBackdoor = _LdapNewCfgBackdoor_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 21, 14),
    _LdapNewCfgBackdoor_Type()
)
ldapNewCfgBackdoor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapNewCfgBackdoor.setStatus("current")


class _LdapCurCfgState_Type(Integer32):
    """Custom type ldapCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_LdapCurCfgState_Type.__name__ = "Integer32"
_LdapCurCfgState_Object = MibScalar
ldapCurCfgState = _LdapCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 21, 15),
    _LdapCurCfgState_Type()
)
ldapCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldapCurCfgState.setStatus("current")


class _LdapNewCfgState_Type(Integer32):
    """Custom type ldapNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_LdapNewCfgState_Type.__name__ = "Integer32"
_LdapNewCfgState_Object = MibScalar
ldapNewCfgState = _LdapNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 21, 16),
    _LdapNewCfgState_Type()
)
ldapNewCfgState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapNewCfgState.setStatus("current")


class _LdapCurCfgPorttoUse_Type(Integer32):
    """Custom type ldapCurCfgPorttoUse based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("data", 1),
          ("mgt", 2))
    )


_LdapCurCfgPorttoUse_Type.__name__ = "Integer32"
_LdapCurCfgPorttoUse_Object = MibScalar
ldapCurCfgPorttoUse = _LdapCurCfgPorttoUse_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 21, 17),
    _LdapCurCfgPorttoUse_Type()
)
ldapCurCfgPorttoUse.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldapCurCfgPorttoUse.setStatus("current")


class _LdapNewCfgPorttoUse_Type(Integer32):
    """Custom type ldapNewCfgPorttoUse based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("data", 1),
          ("mgt", 2))
    )


_LdapNewCfgPorttoUse_Type.__name__ = "Integer32"
_LdapNewCfgPorttoUse_Object = MibScalar
ldapNewCfgPorttoUse = _LdapNewCfgPorttoUse_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 21, 18),
    _LdapNewCfgPorttoUse_Type()
)
ldapNewCfgPorttoUse.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapNewCfgPorttoUse.setStatus("current")


class _LdapCurCfgSecPorttoUse_Type(Integer32):
    """Custom type ldapCurCfgSecPorttoUse based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("data", 1),
          ("mgt", 2))
    )


_LdapCurCfgSecPorttoUse_Type.__name__ = "Integer32"
_LdapCurCfgSecPorttoUse_Object = MibScalar
ldapCurCfgSecPorttoUse = _LdapCurCfgSecPorttoUse_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 21, 19),
    _LdapCurCfgSecPorttoUse_Type()
)
ldapCurCfgSecPorttoUse.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldapCurCfgSecPorttoUse.setStatus("current")


class _LdapNewCfgSecPorttoUse_Type(Integer32):
    """Custom type ldapNewCfgSecPorttoUse based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("data", 1),
          ("mgt", 2))
    )


_LdapNewCfgSecPorttoUse_Type.__name__ = "Integer32"
_LdapNewCfgSecPorttoUse_Object = MibScalar
ldapNewCfgSecPorttoUse = _LdapNewCfgSecPorttoUse_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 21, 20),
    _LdapNewCfgSecPorttoUse_Type()
)
ldapNewCfgSecPorttoUse.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapNewCfgSecPorttoUse.setStatus("current")


class _LdapCurCfgUserNameAttribute_Type(DisplayString):
    """Custom type ldapCurCfgUserNameAttribute based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 127),
    )


_LdapCurCfgUserNameAttribute_Type.__name__ = "DisplayString"
_LdapCurCfgUserNameAttribute_Object = MibScalar
ldapCurCfgUserNameAttribute = _LdapCurCfgUserNameAttribute_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 21, 21),
    _LdapCurCfgUserNameAttribute_Type()
)
ldapCurCfgUserNameAttribute.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldapCurCfgUserNameAttribute.setStatus("current")


class _LdapNewCfgUserNameAttribute_Type(DisplayString):
    """Custom type ldapNewCfgUserNameAttribute based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 127),
    )


_LdapNewCfgUserNameAttribute_Type.__name__ = "DisplayString"
_LdapNewCfgUserNameAttribute_Object = MibScalar
ldapNewCfgUserNameAttribute = _LdapNewCfgUserNameAttribute_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 21, 22),
    _LdapNewCfgUserNameAttribute_Type()
)
ldapNewCfgUserNameAttribute.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ldapNewCfgUserNameAttribute.setStatus("current")
_AgSSHConfig_ObjectIdentity = ObjectIdentity
agSSHConfig = _AgSSHConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 22)
)


class _SshCurCfgScpAdm_Type(DisplayString):
    """Custom type sshCurCfgScpAdm based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_SshCurCfgScpAdm_Type.__name__ = "DisplayString"
_SshCurCfgScpAdm_Object = MibScalar
sshCurCfgScpAdm = _SshCurCfgScpAdm_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 22, 3),
    _SshCurCfgScpAdm_Type()
)
sshCurCfgScpAdm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sshCurCfgScpAdm.setStatus("current")


class _SshNewCfgScpAdm_Type(DisplayString):
    """Custom type sshNewCfgScpAdm based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_SshNewCfgScpAdm_Type.__name__ = "DisplayString"
_SshNewCfgScpAdm_Object = MibScalar
sshNewCfgScpAdm = _SshNewCfgScpAdm_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 22, 4),
    _SshNewCfgScpAdm_Type()
)
sshNewCfgScpAdm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sshNewCfgScpAdm.setStatus("current")


class _SshNewCfgHKeyGen_Type(Integer32):
    """Custom type sshNewCfgHKeyGen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("generate", 1),
          ("other", 2))
    )


_SshNewCfgHKeyGen_Type.__name__ = "Integer32"
_SshNewCfgHKeyGen_Object = MibScalar
sshNewCfgHKeyGen = _SshNewCfgHKeyGen_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 22, 5),
    _SshNewCfgHKeyGen_Type()
)
sshNewCfgHKeyGen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sshNewCfgHKeyGen.setStatus("current")


class _SshCurCfgSSHPort_Type(Integer32):
    """Custom type sshCurCfgSSHPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SshCurCfgSSHPort_Type.__name__ = "Integer32"
_SshCurCfgSSHPort_Object = MibScalar
sshCurCfgSSHPort = _SshCurCfgSSHPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 22, 7),
    _SshCurCfgSSHPort_Type()
)
sshCurCfgSSHPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sshCurCfgSSHPort.setStatus("current")


class _SshNewCfgSSHPort_Type(Integer32):
    """Custom type sshNewCfgSSHPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SshNewCfgSSHPort_Type.__name__ = "Integer32"
_SshNewCfgSSHPort_Object = MibScalar
sshNewCfgSSHPort = _SshNewCfgSSHPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 22, 8),
    _SshNewCfgSSHPort_Type()
)
sshNewCfgSSHPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sshNewCfgSSHPort.setStatus("current")


class _SshCurCfgScpApplySave_Type(Integer32):
    """Custom type sshCurCfgScpApplySave based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_SshCurCfgScpApplySave_Type.__name__ = "Integer32"
_SshCurCfgScpApplySave_Object = MibScalar
sshCurCfgScpApplySave = _SshCurCfgScpApplySave_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 22, 9),
    _SshCurCfgScpApplySave_Type()
)
sshCurCfgScpApplySave.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sshCurCfgScpApplySave.setStatus("current")


class _SshNewCfgScpApplySave_Type(Integer32):
    """Custom type sshNewCfgScpApplySave based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_SshNewCfgScpApplySave_Type.__name__ = "Integer32"
_SshNewCfgScpApplySave_Object = MibScalar
sshNewCfgScpApplySave = _SshNewCfgScpApplySave_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 22, 10),
    _SshNewCfgScpApplySave_Type()
)
sshNewCfgScpApplySave.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sshNewCfgScpApplySave.setStatus("current")


class _SshCurCfgStatus_Type(Integer32):
    """Custom type sshCurCfgStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_SshCurCfgStatus_Type.__name__ = "Integer32"
_SshCurCfgStatus_Object = MibScalar
sshCurCfgStatus = _SshCurCfgStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 22, 11),
    _SshCurCfgStatus_Type()
)
sshCurCfgStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sshCurCfgStatus.setStatus("current")


class _SshNewCfgStatus_Type(Integer32):
    """Custom type sshNewCfgStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_SshNewCfgStatus_Type.__name__ = "Integer32"
_SshNewCfgStatus_Object = MibScalar
sshNewCfgStatus = _SshNewCfgStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 22, 12),
    _SshNewCfgStatus_Type()
)
sshNewCfgStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sshNewCfgStatus.setStatus("current")


class _SshPubKeyRemAll_Type(Integer32):
    """Custom type sshPubKeyRemAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_SshPubKeyRemAll_Type.__name__ = "Integer32"
_SshPubKeyRemAll_Object = MibScalar
sshPubKeyRemAll = _SshPubKeyRemAll_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 22, 13),
    _SshPubKeyRemAll_Type()
)
sshPubKeyRemAll.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sshPubKeyRemAll.setStatus("current")


class _SshPubKeyRemUser_Type(DisplayString):
    """Custom type sshPubKeyRemUser based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_SshPubKeyRemUser_Type.__name__ = "DisplayString"
_SshPubKeyRemUser_Object = MibScalar
sshPubKeyRemUser = _SshPubKeyRemUser_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 22, 14),
    _SshPubKeyRemUser_Type()
)
sshPubKeyRemUser.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sshPubKeyRemUser.setStatus("current")
_SshPubKeyConfigTable_Object = MibTable
sshPubKeyConfigTable = _SshPubKeyConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 22, 15)
)
if mibBuilder.loadTexts:
    sshPubKeyConfigTable.setStatus("current")
_SshPubKeyConfigEntry_Object = MibTableRow
sshPubKeyConfigEntry = _SshPubKeyConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 22, 15, 1)
)
sshPubKeyConfigEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "sshPubKeyConfigIndex"),
)
if mibBuilder.loadTexts:
    sshPubKeyConfigEntry.setStatus("current")
_SshPubKeyConfigIndex_Type = Integer32
_SshPubKeyConfigIndex_Object = MibTableColumn
sshPubKeyConfigIndex = _SshPubKeyConfigIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 22, 15, 1, 1),
    _SshPubKeyConfigIndex_Type()
)
sshPubKeyConfigIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sshPubKeyConfigIndex.setStatus("current")


class _SshPubKeyType_Type(Integer32):
    """Custom type sshPubKeyType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("rsa", 1),
          ("dsa", 2))
    )


_SshPubKeyType_Type.__name__ = "Integer32"
_SshPubKeyType_Object = MibTableColumn
sshPubKeyType = _SshPubKeyType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 22, 15, 1, 2),
    _SshPubKeyType_Type()
)
sshPubKeyType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sshPubKeyType.setStatus("current")
_SshPubKeyHashValue_Type = OctetString
_SshPubKeyHashValue_Object = MibTableColumn
sshPubKeyHashValue = _SshPubKeyHashValue_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 22, 15, 1, 3),
    _SshPubKeyHashValue_Type()
)
sshPubKeyHashValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sshPubKeyHashValue.setStatus("current")
_SshPubkeyUserBmap_Type = OctetString
_SshPubkeyUserBmap_Object = MibTableColumn
sshPubkeyUserBmap = _SshPubkeyUserBmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 22, 15, 1, 4),
    _SshPubkeyUserBmap_Type()
)
sshPubkeyUserBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sshPubkeyUserBmap.setStatus("current")


class _SshPubKeyAddUser_Type(DisplayString):
    """Custom type sshPubKeyAddUser based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_SshPubKeyAddUser_Type.__name__ = "DisplayString"
_SshPubKeyAddUser_Object = MibTableColumn
sshPubKeyAddUser = _SshPubKeyAddUser_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 22, 15, 1, 5),
    _SshPubKeyAddUser_Type()
)
sshPubKeyAddUser.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sshPubKeyAddUser.setStatus("current")


class _SshPubKeyDelUser_Type(DisplayString):
    """Custom type sshPubKeyDelUser based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_SshPubKeyDelUser_Type.__name__ = "DisplayString"
_SshPubKeyDelUser_Object = MibTableColumn
sshPubKeyDelUser = _SshPubKeyDelUser_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 22, 15, 1, 6),
    _SshPubKeyDelUser_Type()
)
sshPubKeyDelUser.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sshPubKeyDelUser.setStatus("current")


class _SshPubKeyRemEntry_Type(Integer32):
    """Custom type sshPubKeyRemEntry based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_SshPubKeyRemEntry_Type.__name__ = "Integer32"
_SshPubKeyRemEntry_Object = MibTableColumn
sshPubKeyRemEntry = _SshPubKeyRemEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 22, 15, 1, 7),
    _SshPubKeyRemEntry_Type()
)
sshPubKeyRemEntry.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sshPubKeyRemEntry.setStatus("current")


class _SshCurCfgSSHAttempts_Type(Integer32):
    """Custom type sshCurCfgSSHAttempts based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_SshCurCfgSSHAttempts_Type.__name__ = "Integer32"
_SshCurCfgSSHAttempts_Object = MibScalar
sshCurCfgSSHAttempts = _SshCurCfgSSHAttempts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 22, 16),
    _SshCurCfgSSHAttempts_Type()
)
sshCurCfgSSHAttempts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sshCurCfgSSHAttempts.setStatus("current")


class _SshNewCfgSSHAttempts_Type(Integer32):
    """Custom type sshNewCfgSSHAttempts based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_SshNewCfgSSHAttempts_Type.__name__ = "Integer32"
_SshNewCfgSSHAttempts_Object = MibScalar
sshNewCfgSSHAttempts = _SshNewCfgSSHAttempts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 22, 17),
    _SshNewCfgSSHAttempts_Type()
)
sshNewCfgSSHAttempts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sshNewCfgSSHAttempts.setStatus("current")
_AgsFlowConfig_ObjectIdentity = ObjectIdentity
agsFlowConfig = _AgsFlowConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 24)
)
_SflowCurCfgServerAddress_Type = IpAddress
_SflowCurCfgServerAddress_Object = MibScalar
sflowCurCfgServerAddress = _SflowCurCfgServerAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 24, 1),
    _SflowCurCfgServerAddress_Type()
)
sflowCurCfgServerAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sflowCurCfgServerAddress.setStatus("current")


class _SflowNewCfgServerAddress_Type(DisplayString):
    """Custom type sflowNewCfgServerAddress based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 46),
    )


_SflowNewCfgServerAddress_Type.__name__ = "DisplayString"
_SflowNewCfgServerAddress_Object = MibScalar
sflowNewCfgServerAddress = _SflowNewCfgServerAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 24, 2),
    _SflowNewCfgServerAddress_Type()
)
sflowNewCfgServerAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sflowNewCfgServerAddress.setStatus("current")


class _SflowCurCfgServerPort_Type(Integer32):
    """Custom type sflowCurCfgServerPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65000),
    )


_SflowCurCfgServerPort_Type.__name__ = "Integer32"
_SflowCurCfgServerPort_Object = MibScalar
sflowCurCfgServerPort = _SflowCurCfgServerPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 24, 3),
    _SflowCurCfgServerPort_Type()
)
sflowCurCfgServerPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sflowCurCfgServerPort.setStatus("current")


class _SflowNewCfgServerPort_Type(Integer32):
    """Custom type sflowNewCfgServerPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65000),
    )


_SflowNewCfgServerPort_Type.__name__ = "Integer32"
_SflowNewCfgServerPort_Object = MibScalar
sflowNewCfgServerPort = _SflowNewCfgServerPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 24, 4),
    _SflowNewCfgServerPort_Type()
)
sflowNewCfgServerPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sflowNewCfgServerPort.setStatus("current")


class _SflowCurCfgState_Type(Integer32):
    """Custom type sflowCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SflowCurCfgState_Type.__name__ = "Integer32"
_SflowCurCfgState_Object = MibScalar
sflowCurCfgState = _SflowCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 24, 5),
    _SflowCurCfgState_Type()
)
sflowCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sflowCurCfgState.setStatus("current")


class _SflowNewCfgState_Type(Integer32):
    """Custom type sflowNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_SflowNewCfgState_Type.__name__ = "Integer32"
_SflowNewCfgState_Object = MibScalar
sflowNewCfgState = _SflowNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 24, 6),
    _SflowNewCfgState_Type()
)
sflowNewCfgState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sflowNewCfgState.setStatus("current")
_SflowCurPortCfgTable_Object = MibTable
sflowCurPortCfgTable = _SflowCurPortCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 24, 7)
)
if mibBuilder.loadTexts:
    sflowCurPortCfgTable.setStatus("current")
_SflowCurPortCfgTableEntry_Object = MibTableRow
sflowCurPortCfgTableEntry = _SflowCurPortCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 24, 7, 1)
)
sflowCurPortCfgTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "sflowCurPortCfgTableId"),
)
if mibBuilder.loadTexts:
    sflowCurPortCfgTableEntry.setStatus("current")
_SflowCurPortCfgTableId_Type = PortNumber
_SflowCurPortCfgTableId_Object = MibTableColumn
sflowCurPortCfgTableId = _SflowCurPortCfgTableId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 24, 7, 1, 1),
    _SflowCurPortCfgTableId_Type()
)
sflowCurPortCfgTableId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sflowCurPortCfgTableId.setStatus("current")


class _SflowCurPortSampling_Type(Integer32):
    """Custom type sflowCurPortSampling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(256, 65536),
    )


_SflowCurPortSampling_Type.__name__ = "Integer32"
_SflowCurPortSampling_Object = MibTableColumn
sflowCurPortSampling = _SflowCurPortSampling_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 24, 7, 1, 2),
    _SflowCurPortSampling_Type()
)
sflowCurPortSampling.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sflowCurPortSampling.setStatus("current")


class _SflowCurPortPolling_Type(Integer32):
    """Custom type sflowCurPortPolling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 60),
    )


_SflowCurPortPolling_Type.__name__ = "Integer32"
_SflowCurPortPolling_Object = MibTableColumn
sflowCurPortPolling = _SflowCurPortPolling_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 24, 7, 1, 3),
    _SflowCurPortPolling_Type()
)
sflowCurPortPolling.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sflowCurPortPolling.setStatus("current")
_SflowNewPortCfgTable_Object = MibTable
sflowNewPortCfgTable = _SflowNewPortCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 24, 8)
)
if mibBuilder.loadTexts:
    sflowNewPortCfgTable.setStatus("current")
_SflowNewPortCfgTableEntry_Object = MibTableRow
sflowNewPortCfgTableEntry = _SflowNewPortCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 24, 8, 1)
)
sflowNewPortCfgTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "sflowNewPortCfgTableId"),
)
if mibBuilder.loadTexts:
    sflowNewPortCfgTableEntry.setStatus("current")
_SflowNewPortCfgTableId_Type = PortNumber
_SflowNewPortCfgTableId_Object = MibTableColumn
sflowNewPortCfgTableId = _SflowNewPortCfgTableId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 24, 8, 1, 1),
    _SflowNewPortCfgTableId_Type()
)
sflowNewPortCfgTableId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sflowNewPortCfgTableId.setStatus("current")


class _SflowNewPortSampling_Type(Integer32):
    """Custom type sflowNewPortSampling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(256, 65536),
    )


_SflowNewPortSampling_Type.__name__ = "Integer32"
_SflowNewPortSampling_Object = MibTableColumn
sflowNewPortSampling = _SflowNewPortSampling_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 24, 8, 1, 2),
    _SflowNewPortSampling_Type()
)
sflowNewPortSampling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sflowNewPortSampling.setStatus("current")


class _SflowNewPortPolling_Type(Integer32):
    """Custom type sflowNewPortPolling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 60),
    )


_SflowNewPortPolling_Type.__name__ = "Integer32"
_SflowNewPortPolling_Object = MibTableColumn
sflowNewPortPolling = _SflowNewPortPolling_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 24, 8, 1, 3),
    _SflowNewPortPolling_Type()
)
sflowNewPortPolling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sflowNewPortPolling.setStatus("current")


class _SflowCurCfgMgmtPort_Type(Integer32):
    """Custom type sflowCurCfgMgmtPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("data", 1),
          ("mgt", 2))
    )


_SflowCurCfgMgmtPort_Type.__name__ = "Integer32"
_SflowCurCfgMgmtPort_Object = MibScalar
sflowCurCfgMgmtPort = _SflowCurCfgMgmtPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 24, 9),
    _SflowCurCfgMgmtPort_Type()
)
sflowCurCfgMgmtPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sflowCurCfgMgmtPort.setStatus("current")


class _SflowNewCfgMgmtPort_Type(Integer32):
    """Custom type sflowNewCfgMgmtPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("data", 1),
          ("mgt", 2))
    )


_SflowNewCfgMgmtPort_Type.__name__ = "Integer32"
_SflowNewCfgMgmtPort_Object = MibScalar
sflowNewCfgMgmtPort = _SflowNewCfgMgmtPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 24, 10),
    _SflowNewCfgMgmtPort_Type()
)
sflowNewCfgMgmtPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sflowNewCfgMgmtPort.setStatus("current")
_AgUSBCopy_ObjectIdentity = ObjectIdentity
agUSBCopy = _AgUSBCopy_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 25)
)


class _AgUSBoperation_Type(Integer32):
    """Custom type agUSBoperation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fromUSB", 1),
          ("toUSB", 2))
    )


_AgUSBoperation_Type.__name__ = "Integer32"
_AgUSBoperation_Object = MibScalar
agUSBoperation = _AgUSBoperation_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 25, 1),
    _AgUSBoperation_Type()
)
agUSBoperation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agUSBoperation.setStatus("current")


class _AgUSBfile_Type(DisplayString):
    """Custom type agUSBfile based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_AgUSBfile_Type.__name__ = "DisplayString"
_AgUSBfile_Object = MibScalar
agUSBfile = _AgUSBfile_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 25, 2),
    _AgUSBfile_Type()
)
agUSBfile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agUSBfile.setStatus("current")


class _AgUSBflashFile_Type(Integer32):
    """Custom type agUSBflashFile based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("boot", 1),
          ("image1", 2),
          ("active", 3),
          ("syslog", 4),
          ("crashdump", 5),
          ("image2", 6))
    )


_AgUSBflashFile_Type.__name__ = "Integer32"
_AgUSBflashFile_Object = MibScalar
agUSBflashFile = _AgUSBflashFile_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 25, 3),
    _AgUSBflashFile_Type()
)
agUSBflashFile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agUSBflashFile.setStatus("current")


class _AgUSBcopyFile_Type(Integer32):
    """Custom type agUSBcopyFile based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("copy", 1),
          ("idle", 2),
          ("inprogress", 3),
          ("complete", 4),
          ("failed", 5))
    )


_AgUSBcopyFile_Type.__name__ = "Integer32"
_AgUSBcopyFile_Object = MibScalar
agUSBcopyFile = _AgUSBcopyFile_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 25, 4),
    _AgUSBcopyFile_Type()
)
agUSBcopyFile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agUSBcopyFile.setStatus("current")


class _AgUSBresult_Type(DisplayString):
    """Custom type agUSBresult based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_AgUSBresult_Type.__name__ = "DisplayString"
_AgUSBresult_Object = MibScalar
agUSBresult = _AgUSBresult_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 25, 5),
    _AgUSBresult_Type()
)
agUSBresult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agUSBresult.setStatus("current")
_AgQsfp40GConfig_ObjectIdentity = ObjectIdentity
agQsfp40GConfig = _AgQsfp40GConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 26)
)
_AgQsfp40GCfgTable_Object = MibTable
agQsfp40GCfgTable = _AgQsfp40GCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 26, 1)
)
if mibBuilder.loadTexts:
    agQsfp40GCfgTable.setStatus("current")
_Qsfp40GPortEntry_Object = MibTableRow
qsfp40GPortEntry = _Qsfp40GPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 26, 1, 1)
)
qsfp40GPortEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "qsfpPortNumber"),
)
if mibBuilder.loadTexts:
    qsfp40GPortEntry.setStatus("current")
_QsfpPortNumber_Type = Integer32
_QsfpPortNumber_Object = MibTableColumn
qsfpPortNumber = _QsfpPortNumber_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 26, 1, 1, 1),
    _QsfpPortNumber_Type()
)
qsfpPortNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qsfpPortNumber.setStatus("current")


class _QsfpPortBootedMode_Type(Integer32):
    """Custom type qsfpPortBootedMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("mode10G", 1),
          ("mode40G", 2))
    )


_QsfpPortBootedMode_Type.__name__ = "Integer32"
_QsfpPortBootedMode_Object = MibTableColumn
qsfpPortBootedMode = _QsfpPortBootedMode_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 26, 1, 1, 2),
    _QsfpPortBootedMode_Type()
)
qsfpPortBootedMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qsfpPortBootedMode.setStatus("current")


class _QsfpPortSavedMode_Type(Integer32):
    """Custom type qsfpPortSavedMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("mode10G", 1),
          ("mode40G", 2))
    )


_QsfpPortSavedMode_Type.__name__ = "Integer32"
_QsfpPortSavedMode_Object = MibTableColumn
qsfpPortSavedMode = _QsfpPortSavedMode_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 1, 26, 1, 1, 3),
    _QsfpPortSavedMode_Type()
)
qsfpPortSavedMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qsfpPortSavedMode.setStatus("current")
_AgentStats_ObjectIdentity = ObjectIdentity
agentStats = _AgentStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2)
)
_PktStats_ObjectIdentity = ObjectIdentity
pktStats = _PktStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 1)
)
_PktStatsAllocs_Type = Counter32
_PktStatsAllocs_Object = MibScalar
pktStatsAllocs = _PktStatsAllocs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 1, 1),
    _PktStatsAllocs_Type()
)
pktStatsAllocs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pktStatsAllocs.setStatus("current")
_PktStatsFrees_Type = Counter32
_PktStatsFrees_Object = MibScalar
pktStatsFrees = _PktStatsFrees_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 1, 2),
    _PktStatsFrees_Type()
)
pktStatsFrees.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pktStatsFrees.setStatus("current")
_PktStatsAllocFails_Type = Counter32
_PktStatsAllocFails_Object = MibScalar
pktStatsAllocFails = _PktStatsAllocFails_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 1, 3),
    _PktStatsAllocFails_Type()
)
pktStatsAllocFails.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pktStatsAllocFails.setStatus("current")
_PktStatsMediums_Type = Gauge32
_PktStatsMediums_Object = MibScalar
pktStatsMediums = _PktStatsMediums_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 1, 4),
    _PktStatsMediums_Type()
)
pktStatsMediums.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pktStatsMediums.setStatus("current")
_PktStatsJumbos_Type = Gauge32
_PktStatsJumbos_Object = MibScalar
pktStatsJumbos = _PktStatsJumbos_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 1, 5),
    _PktStatsJumbos_Type()
)
pktStatsJumbos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pktStatsJumbos.setStatus("current")
_PktStatsSmalls_Type = Gauge32
_PktStatsSmalls_Object = MibScalar
pktStatsSmalls = _PktStatsSmalls_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 1, 6),
    _PktStatsSmalls_Type()
)
pktStatsSmalls.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pktStatsSmalls.setStatus("current")
_PktStatsMediumsHiWatermark_Type = Counter32
_PktStatsMediumsHiWatermark_Object = MibScalar
pktStatsMediumsHiWatermark = _PktStatsMediumsHiWatermark_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 1, 7),
    _PktStatsMediumsHiWatermark_Type()
)
pktStatsMediumsHiWatermark.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pktStatsMediumsHiWatermark.setStatus("current")
_PktStatsJumbosHiWatermark_Type = Counter32
_PktStatsJumbosHiWatermark_Object = MibScalar
pktStatsJumbosHiWatermark = _PktStatsJumbosHiWatermark_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 1, 8),
    _PktStatsJumbosHiWatermark_Type()
)
pktStatsJumbosHiWatermark.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pktStatsJumbosHiWatermark.setStatus("current")
_PktStatsSmallsHiWatermark_Type = Counter32
_PktStatsSmallsHiWatermark_Object = MibScalar
pktStatsSmallsHiWatermark = _PktStatsSmallsHiWatermark_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 1, 9),
    _PktStatsSmallsHiWatermark_Type()
)
pktStatsSmallsHiWatermark.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pktStatsSmallsHiWatermark.setStatus("current")
_MpCpuStats_ObjectIdentity = ObjectIdentity
mpCpuStats = _MpCpuStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 2)
)


class _MpCpuStatsUtil1Second_Type(DisplayString):
    """Custom type mpCpuStatsUtil1Second based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_MpCpuStatsUtil1Second_Type.__name__ = "DisplayString"
_MpCpuStatsUtil1Second_Object = MibScalar
mpCpuStatsUtil1Second = _MpCpuStatsUtil1Second_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 2, 1),
    _MpCpuStatsUtil1Second_Type()
)
mpCpuStatsUtil1Second.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mpCpuStatsUtil1Second.setStatus("current")


class _MpCpuStatsUtil5Seconds_Type(DisplayString):
    """Custom type mpCpuStatsUtil5Seconds based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_MpCpuStatsUtil5Seconds_Type.__name__ = "DisplayString"
_MpCpuStatsUtil5Seconds_Object = MibScalar
mpCpuStatsUtil5Seconds = _MpCpuStatsUtil5Seconds_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 2, 2),
    _MpCpuStatsUtil5Seconds_Type()
)
mpCpuStatsUtil5Seconds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mpCpuStatsUtil5Seconds.setStatus("current")


class _MpCpuStatsUtil1Minute_Type(DisplayString):
    """Custom type mpCpuStatsUtil1Minute based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_MpCpuStatsUtil1Minute_Type.__name__ = "DisplayString"
_MpCpuStatsUtil1Minute_Object = MibScalar
mpCpuStatsUtil1Minute = _MpCpuStatsUtil1Minute_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 2, 3),
    _MpCpuStatsUtil1Minute_Type()
)
mpCpuStatsUtil1Minute.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mpCpuStatsUtil1Minute.setStatus("current")
_CpuUtilProcessStatsTable_Object = MibTable
cpuUtilProcessStatsTable = _CpuUtilProcessStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 2, 5)
)
if mibBuilder.loadTexts:
    cpuUtilProcessStatsTable.setStatus("current")
_CpuUtilProcessStatsTableEntry_Object = MibTableRow
cpuUtilProcessStatsTableEntry = _CpuUtilProcessStatsTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 2, 5, 1)
)
cpuUtilProcessStatsTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "processId"),
)
if mibBuilder.loadTexts:
    cpuUtilProcessStatsTableEntry.setStatus("current")
_ProcessId_Type = Integer32
_ProcessId_Object = MibTableColumn
processId = _ProcessId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 2, 5, 1, 1),
    _ProcessId_Type()
)
processId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    processId.setStatus("current")


class _ProcessName_Type(DisplayString):
    """Custom type processName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_ProcessName_Type.__name__ = "DisplayString"
_ProcessName_Object = MibTableColumn
processName = _ProcessName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 2, 5, 1, 2),
    _ProcessName_Type()
)
processName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    processName.setStatus("current")


class _CpuProcessUtil1Sec_Type(DisplayString):
    """Custom type cpuProcessUtil1Sec based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_CpuProcessUtil1Sec_Type.__name__ = "DisplayString"
_CpuProcessUtil1Sec_Object = MibTableColumn
cpuProcessUtil1Sec = _CpuProcessUtil1Sec_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 2, 5, 1, 3),
    _CpuProcessUtil1Sec_Type()
)
cpuProcessUtil1Sec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpuProcessUtil1Sec.setStatus("current")


class _CpuProcessUtil5Sec_Type(DisplayString):
    """Custom type cpuProcessUtil5Sec based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_CpuProcessUtil5Sec_Type.__name__ = "DisplayString"
_CpuProcessUtil5Sec_Object = MibTableColumn
cpuProcessUtil5Sec = _CpuProcessUtil5Sec_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 2, 5, 1, 4),
    _CpuProcessUtil5Sec_Type()
)
cpuProcessUtil5Sec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpuProcessUtil5Sec.setStatus("current")


class _CpuProcessUtil1Min_Type(DisplayString):
    """Custom type cpuProcessUtil1Min based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_CpuProcessUtil1Min_Type.__name__ = "DisplayString"
_CpuProcessUtil1Min_Object = MibTableColumn
cpuProcessUtil1Min = _CpuProcessUtil1Min_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 2, 5, 1, 5),
    _CpuProcessUtil1Min_Type()
)
cpuProcessUtil1Min.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpuProcessUtil1Min.setStatus("current")


class _CpuProcessUtil5Min_Type(DisplayString):
    """Custom type cpuProcessUtil5Min based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_CpuProcessUtil5Min_Type.__name__ = "DisplayString"
_CpuProcessUtil5Min_Object = MibTableColumn
cpuProcessUtil5Min = _CpuProcessUtil5Min_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 2, 5, 1, 6),
    _CpuProcessUtil5Min_Type()
)
cpuProcessUtil5Min.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpuProcessUtil5Min.setStatus("current")


class _ProcessStatus_Type(DisplayString):
    """Custom type processStatus based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_ProcessStatus_Type.__name__ = "DisplayString"
_ProcessStatus_Object = MibTableColumn
processStatus = _ProcessStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 2, 5, 1, 7),
    _ProcessStatus_Type()
)
processStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    processStatus.setStatus("current")


class _MpCpuStatsUtil5Minutes_Type(DisplayString):
    """Custom type mpCpuStatsUtil5Minutes based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_MpCpuStatsUtil5Minutes_Type.__name__ = "DisplayString"
_MpCpuStatsUtil5Minutes_Object = MibScalar
mpCpuStatsUtil5Minutes = _MpCpuStatsUtil5Minutes_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 2, 6),
    _MpCpuStatsUtil5Minutes_Type()
)
mpCpuStatsUtil5Minutes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mpCpuStatsUtil5Minutes.setStatus("current")
_PortStats_ObjectIdentity = ObjectIdentity
portStats = _PortStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3)
)
_PortStatsTable_Object = MibTable
portStatsTable = _PortStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1)
)
if mibBuilder.loadTexts:
    portStatsTable.setStatus("current")
_PortStatsTableEntry_Object = MibTableRow
portStatsTableEntry = _PortStatsTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1)
)
portStatsTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "portStatsIndx"),
)
if mibBuilder.loadTexts:
    portStatsTableEntry.setStatus("current")
_PortStatsIndx_Type = PortNumber
_PortStatsIndx_Object = MibTableColumn
portStatsIndx = _PortStatsIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 1),
    _PortStatsIndx_Type()
)
portStatsIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsIndx.setStatus("current")
_PortStatsPhyIfInOctets_Type = Counter32
_PortStatsPhyIfInOctets_Object = MibTableColumn
portStatsPhyIfInOctets = _PortStatsPhyIfInOctets_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 2),
    _PortStatsPhyIfInOctets_Type()
)
portStatsPhyIfInOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfInOctets.setStatus("current")
_PortStatsPhyIfInUcastPkts_Type = Counter32
_PortStatsPhyIfInUcastPkts_Object = MibTableColumn
portStatsPhyIfInUcastPkts = _PortStatsPhyIfInUcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 3),
    _PortStatsPhyIfInUcastPkts_Type()
)
portStatsPhyIfInUcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfInUcastPkts.setStatus("current")
_PortStatsPhyIfInNUcastPkts_Type = Counter32
_PortStatsPhyIfInNUcastPkts_Object = MibTableColumn
portStatsPhyIfInNUcastPkts = _PortStatsPhyIfInNUcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 4),
    _PortStatsPhyIfInNUcastPkts_Type()
)
portStatsPhyIfInNUcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfInNUcastPkts.setStatus("current")
_PortStatsPhyIfInDiscards_Type = Counter32
_PortStatsPhyIfInDiscards_Object = MibTableColumn
portStatsPhyIfInDiscards = _PortStatsPhyIfInDiscards_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 5),
    _PortStatsPhyIfInDiscards_Type()
)
portStatsPhyIfInDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfInDiscards.setStatus("current")
_PortStatsPhyIfInErrors_Type = Counter32
_PortStatsPhyIfInErrors_Object = MibTableColumn
portStatsPhyIfInErrors = _PortStatsPhyIfInErrors_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 6),
    _PortStatsPhyIfInErrors_Type()
)
portStatsPhyIfInErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfInErrors.setStatus("current")
_PortStatsPhyIfInUnknownProtos_Type = Counter32
_PortStatsPhyIfInUnknownProtos_Object = MibTableColumn
portStatsPhyIfInUnknownProtos = _PortStatsPhyIfInUnknownProtos_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 7),
    _PortStatsPhyIfInUnknownProtos_Type()
)
portStatsPhyIfInUnknownProtos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfInUnknownProtos.setStatus("current")
_PortStatsPhyIfOutOctets_Type = Counter32
_PortStatsPhyIfOutOctets_Object = MibTableColumn
portStatsPhyIfOutOctets = _PortStatsPhyIfOutOctets_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 8),
    _PortStatsPhyIfOutOctets_Type()
)
portStatsPhyIfOutOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfOutOctets.setStatus("current")
_PortStatsPhyIfOutUcastPkts_Type = Counter32
_PortStatsPhyIfOutUcastPkts_Object = MibTableColumn
portStatsPhyIfOutUcastPkts = _PortStatsPhyIfOutUcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 9),
    _PortStatsPhyIfOutUcastPkts_Type()
)
portStatsPhyIfOutUcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfOutUcastPkts.setStatus("current")
_PortStatsPhyIfOutNUcastPkts_Type = Counter32
_PortStatsPhyIfOutNUcastPkts_Object = MibTableColumn
portStatsPhyIfOutNUcastPkts = _PortStatsPhyIfOutNUcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 10),
    _PortStatsPhyIfOutNUcastPkts_Type()
)
portStatsPhyIfOutNUcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfOutNUcastPkts.setStatus("current")
_PortStatsPhyIfOutDiscards_Type = Counter32
_PortStatsPhyIfOutDiscards_Object = MibTableColumn
portStatsPhyIfOutDiscards = _PortStatsPhyIfOutDiscards_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 11),
    _PortStatsPhyIfOutDiscards_Type()
)
portStatsPhyIfOutDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfOutDiscards.setStatus("current")
_PortStatsPhyIfOutErrors_Type = Counter32
_PortStatsPhyIfOutErrors_Object = MibTableColumn
portStatsPhyIfOutErrors = _PortStatsPhyIfOutErrors_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 12),
    _PortStatsPhyIfOutErrors_Type()
)
portStatsPhyIfOutErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfOutErrors.setStatus("current")
_PortStatsPhyIfOutQLen_Type = Gauge32
_PortStatsPhyIfOutQLen_Object = MibTableColumn
portStatsPhyIfOutQLen = _PortStatsPhyIfOutQLen_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 13),
    _PortStatsPhyIfOutQLen_Type()
)
portStatsPhyIfOutQLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfOutQLen.setStatus("current")
_PortStatsPhyIfInBroadcastPkts_Type = Counter32
_PortStatsPhyIfInBroadcastPkts_Object = MibTableColumn
portStatsPhyIfInBroadcastPkts = _PortStatsPhyIfInBroadcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 14),
    _PortStatsPhyIfInBroadcastPkts_Type()
)
portStatsPhyIfInBroadcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfInBroadcastPkts.setStatus("current")
_PortStatsPhyIfOutBroadcastPkts_Type = Counter32
_PortStatsPhyIfOutBroadcastPkts_Object = MibTableColumn
portStatsPhyIfOutBroadcastPkts = _PortStatsPhyIfOutBroadcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 15),
    _PortStatsPhyIfOutBroadcastPkts_Type()
)
portStatsPhyIfOutBroadcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfOutBroadcastPkts.setStatus("current")


class _PortStatsClear_Type(Integer32):
    """Custom type portStatsClear based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_PortStatsClear_Type.__name__ = "Integer32"
_PortStatsClear_Object = MibTableColumn
portStatsClear = _PortStatsClear_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 16),
    _PortStatsClear_Type()
)
portStatsClear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portStatsClear.setStatus("current")
_PortStatsPhyIfInMulticastPkts_Type = Counter32
_PortStatsPhyIfInMulticastPkts_Object = MibTableColumn
portStatsPhyIfInMulticastPkts = _PortStatsPhyIfInMulticastPkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 17),
    _PortStatsPhyIfInMulticastPkts_Type()
)
portStatsPhyIfInMulticastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfInMulticastPkts.setStatus("current")
_PortStatsPhyIfOutMulticastPkts_Type = Counter32
_PortStatsPhyIfOutMulticastPkts_Object = MibTableColumn
portStatsPhyIfOutMulticastPkts = _PortStatsPhyIfOutMulticastPkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 18),
    _PortStatsPhyIfOutMulticastPkts_Type()
)
portStatsPhyIfOutMulticastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfOutMulticastPkts.setStatus("current")
_PortStatsLinkStateChange_Type = Counter32
_PortStatsLinkStateChange_Object = MibTableColumn
portStatsLinkStateChange = _PortStatsLinkStateChange_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 20),
    _PortStatsLinkStateChange_Type()
)
portStatsLinkStateChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsLinkStateChange.setStatus("current")
_PortStatsPhyIfInFctlPkts_Type = Counter32
_PortStatsPhyIfInFctlPkts_Object = MibTableColumn
portStatsPhyIfInFctlPkts = _PortStatsPhyIfInFctlPkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 21),
    _PortStatsPhyIfInFctlPkts_Type()
)
portStatsPhyIfInFctlPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfInFctlPkts.setStatus("current")
_PortStatsPhyIfOutFctlPkts_Type = Counter32
_PortStatsPhyIfOutFctlPkts_Object = MibTableColumn
portStatsPhyIfOutFctlPkts = _PortStatsPhyIfOutFctlPkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 22),
    _PortStatsPhyIfOutFctlPkts_Type()
)
portStatsPhyIfOutFctlPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfOutFctlPkts.setStatus("current")
_PortStatsPhyIfInFctlPktsRate_Type = Counter32
_PortStatsPhyIfInFctlPktsRate_Object = MibTableColumn
portStatsPhyIfInFctlPktsRate = _PortStatsPhyIfInFctlPktsRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 23),
    _PortStatsPhyIfInFctlPktsRate_Type()
)
portStatsPhyIfInFctlPktsRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfInFctlPktsRate.setStatus("current")
_PortStatsPhyIfOutFctlPktsRate_Type = Counter32
_PortStatsPhyIfOutFctlPktsRate_Object = MibTableColumn
portStatsPhyIfOutFctlPktsRate = _PortStatsPhyIfOutFctlPktsRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 24),
    _PortStatsPhyIfOutFctlPktsRate_Type()
)
portStatsPhyIfOutFctlPktsRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfOutFctlPktsRate.setStatus("current")
_PortStatsPhyIfIngDiscdVlan_Type = Counter32
_PortStatsPhyIfIngDiscdVlan_Object = MibTableColumn
portStatsPhyIfIngDiscdVlan = _PortStatsPhyIfIngDiscdVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 25),
    _PortStatsPhyIfIngDiscdVlan_Type()
)
portStatsPhyIfIngDiscdVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfIngDiscdVlan.setStatus("current")
_PortStatsPhyIfIngDiscdEgrMap_Type = Counter32
_PortStatsPhyIfIngDiscdEgrMap_Object = MibTableColumn
portStatsPhyIfIngDiscdEgrMap = _PortStatsPhyIfIngDiscdEgrMap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 26),
    _PortStatsPhyIfIngDiscdEgrMap_Type()
)
portStatsPhyIfIngDiscdEgrMap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfIngDiscdEgrMap.setStatus("current")
_PortStatsPhyIfIngDiscdFilter_Type = Counter32
_PortStatsPhyIfIngDiscdFilter_Object = MibTableColumn
portStatsPhyIfIngDiscdFilter = _PortStatsPhyIfIngDiscdFilter_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 27),
    _PortStatsPhyIfIngDiscdFilter_Type()
)
portStatsPhyIfIngDiscdFilter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfIngDiscdFilter.setStatus("current")
_PortStatsPhyIfIngDiscdPolicy_Type = Counter32
_PortStatsPhyIfIngDiscdPolicy_Object = MibTableColumn
portStatsPhyIfIngDiscdPolicy = _PortStatsPhyIfIngDiscdPolicy_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 28),
    _PortStatsPhyIfIngDiscdPolicy_Type()
)
portStatsPhyIfIngDiscdPolicy.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfIngDiscdPolicy.setStatus("current")
_PortStatsPhyIfIngDiscdNonFwdStat_Type = Counter32
_PortStatsPhyIfIngDiscdNonFwdStat_Object = MibTableColumn
portStatsPhyIfIngDiscdNonFwdStat = _PortStatsPhyIfIngDiscdNonFwdStat_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 29),
    _PortStatsPhyIfIngDiscdNonFwdStat_Type()
)
portStatsPhyIfIngDiscdNonFwdStat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfIngDiscdNonFwdStat.setStatus("current")
_PortStatsPhyIfIngDiscdIbpCbp_Type = Counter32
_PortStatsPhyIfIngDiscdIbpCbp_Object = MibTableColumn
portStatsPhyIfIngDiscdIbpCbp = _PortStatsPhyIfIngDiscdIbpCbp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 30),
    _PortStatsPhyIfIngDiscdIbpCbp_Type()
)
portStatsPhyIfIngDiscdIbpCbp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfIngDiscdIbpCbp.setStatus("current")
_PortStatsDot1PortInFrames_Type = Counter32
_PortStatsDot1PortInFrames_Object = MibTableColumn
portStatsDot1PortInFrames = _PortStatsDot1PortInFrames_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 31),
    _PortStatsDot1PortInFrames_Type()
)
portStatsDot1PortInFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsDot1PortInFrames.setStatus("current")
_PortStatsDot1PortOutFrames_Type = Counter32
_PortStatsDot1PortOutFrames_Object = MibTableColumn
portStatsDot1PortOutFrames = _PortStatsDot1PortOutFrames_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 32),
    _PortStatsDot1PortOutFrames_Type()
)
portStatsDot1PortOutFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsDot1PortOutFrames.setStatus("current")
_PortStatsDot1PortInDiscards_Type = Counter32
_PortStatsDot1PortInDiscards_Object = MibTableColumn
portStatsDot1PortInDiscards = _PortStatsDot1PortInDiscards_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 33),
    _PortStatsDot1PortInDiscards_Type()
)
portStatsDot1PortInDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsDot1PortInDiscards.setStatus("current")
_PortStatsDot1TpLearnedEntryDiscards_Type = Counter32
_PortStatsDot1TpLearnedEntryDiscards_Object = MibTableColumn
portStatsDot1TpLearnedEntryDiscards = _PortStatsDot1TpLearnedEntryDiscards_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 34),
    _PortStatsDot1TpLearnedEntryDiscards_Type()
)
portStatsDot1TpLearnedEntryDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsDot1TpLearnedEntryDiscards.setStatus("current")
_PortStatsDot1StpPortForwardTransitions_Type = Counter32
_PortStatsDot1StpPortForwardTransitions_Object = MibTableColumn
portStatsDot1StpPortForwardTransitions = _PortStatsDot1StpPortForwardTransitions_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 35),
    _PortStatsDot1StpPortForwardTransitions_Type()
)
portStatsDot1StpPortForwardTransitions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsDot1StpPortForwardTransitions.setStatus("current")
_PortStatsPhyIfEgrHOLBlockDiscd_Type = Counter32
_PortStatsPhyIfEgrHOLBlockDiscd_Object = MibTableColumn
portStatsPhyIfEgrHOLBlockDiscd = _PortStatsPhyIfEgrHOLBlockDiscd_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 36),
    _PortStatsPhyIfEgrHOLBlockDiscd_Type()
)
portStatsPhyIfEgrHOLBlockDiscd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfEgrHOLBlockDiscd.setStatus("current")
_PortStatsPhyIfEgrMMUDiscd_Type = Counter32
_PortStatsPhyIfEgrMMUDiscd_Object = MibTableColumn
portStatsPhyIfEgrMMUDiscd = _PortStatsPhyIfEgrMMUDiscd_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 37),
    _PortStatsPhyIfEgrMMUDiscd_Type()
)
portStatsPhyIfEgrMMUDiscd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfEgrMMUDiscd.setStatus("current")
_PortStatsPhyIfEgrCellErrDiscd_Type = Counter32
_PortStatsPhyIfEgrCellErrDiscd_Object = MibTableColumn
portStatsPhyIfEgrCellErrDiscd = _PortStatsPhyIfEgrCellErrDiscd_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 38),
    _PortStatsPhyIfEgrCellErrDiscd_Type()
)
portStatsPhyIfEgrCellErrDiscd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfEgrCellErrDiscd.setStatus("current")
_PortStatsPhyIfEgrMMUAgeDiscd_Type = Counter32
_PortStatsPhyIfEgrMMUAgeDiscd_Object = MibTableColumn
portStatsPhyIfEgrMMUAgeDiscd = _PortStatsPhyIfEgrMMUAgeDiscd_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 39),
    _PortStatsPhyIfEgrMMUAgeDiscd_Type()
)
portStatsPhyIfEgrMMUAgeDiscd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfEgrMMUAgeDiscd.setStatus("current")
_PortStatsPhyIfEgrOtherDiscd_Type = Counter32
_PortStatsPhyIfEgrOtherDiscd_Object = MibTableColumn
portStatsPhyIfEgrOtherDiscd = _PortStatsPhyIfEgrOtherDiscd_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 1, 1, 40),
    _PortStatsPhyIfEgrOtherDiscd_Type()
)
portStatsPhyIfEgrOtherDiscd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfEgrOtherDiscd.setStatus("current")
_Dot1xPortStatsTable_Object = MibTable
dot1xPortStatsTable = _Dot1xPortStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 2)
)
if mibBuilder.loadTexts:
    dot1xPortStatsTable.setStatus("current")
_Dot1xPortStatsTableEntry_Object = MibTableRow
dot1xPortStatsTableEntry = _Dot1xPortStatsTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 2, 1)
)
dot1xPortStatsTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "dot1xPortStatsIndx"),
)
if mibBuilder.loadTexts:
    dot1xPortStatsTableEntry.setStatus("current")
_Dot1xPortStatsIndx_Type = PortNumber
_Dot1xPortStatsIndx_Object = MibTableColumn
dot1xPortStatsIndx = _Dot1xPortStatsIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 2, 1, 1),
    _Dot1xPortStatsIndx_Type()
)
dot1xPortStatsIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xPortStatsIndx.setStatus("current")
_EapolFramesRx_Type = Integer32
_EapolFramesRx_Object = MibTableColumn
eapolFramesRx = _EapolFramesRx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 2, 1, 2),
    _EapolFramesRx_Type()
)
eapolFramesRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eapolFramesRx.setStatus("current")
_EapolFramesTx_Type = Integer32
_EapolFramesTx_Object = MibTableColumn
eapolFramesTx = _EapolFramesTx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 2, 1, 3),
    _EapolFramesTx_Type()
)
eapolFramesTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eapolFramesTx.setStatus("current")
_EapolStartFramesRx_Type = Integer32
_EapolStartFramesRx_Object = MibTableColumn
eapolStartFramesRx = _EapolStartFramesRx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 2, 1, 4),
    _EapolStartFramesRx_Type()
)
eapolStartFramesRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eapolStartFramesRx.setStatus("current")
_EapolLogoffFramesRx_Type = Integer32
_EapolLogoffFramesRx_Object = MibTableColumn
eapolLogoffFramesRx = _EapolLogoffFramesRx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 2, 1, 5),
    _EapolLogoffFramesRx_Type()
)
eapolLogoffFramesRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eapolLogoffFramesRx.setStatus("current")
_EapolRespIdFramesRx_Type = Integer32
_EapolRespIdFramesRx_Object = MibTableColumn
eapolRespIdFramesRx = _EapolRespIdFramesRx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 2, 1, 6),
    _EapolRespIdFramesRx_Type()
)
eapolRespIdFramesRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eapolRespIdFramesRx.setStatus("current")
_EapolRespFramesRx_Type = Integer32
_EapolRespFramesRx_Object = MibTableColumn
eapolRespFramesRx = _EapolRespFramesRx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 2, 1, 7),
    _EapolRespFramesRx_Type()
)
eapolRespFramesRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eapolRespFramesRx.setStatus("current")
_EapolReqIdFramesTx_Type = Integer32
_EapolReqIdFramesTx_Object = MibTableColumn
eapolReqIdFramesTx = _EapolReqIdFramesTx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 2, 1, 8),
    _EapolReqIdFramesTx_Type()
)
eapolReqIdFramesTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eapolReqIdFramesTx.setStatus("current")
_EapolReqFramesTx_Type = Integer32
_EapolReqFramesTx_Object = MibTableColumn
eapolReqFramesTx = _EapolReqFramesTx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 2, 1, 9),
    _EapolReqFramesTx_Type()
)
eapolReqFramesTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eapolReqFramesTx.setStatus("current")
_InvalidEapolFramesRx_Type = Integer32
_InvalidEapolFramesRx_Object = MibTableColumn
invalidEapolFramesRx = _InvalidEapolFramesRx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 2, 1, 10),
    _InvalidEapolFramesRx_Type()
)
invalidEapolFramesRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    invalidEapolFramesRx.setStatus("current")
_EapLengthErrorFramesRx_Type = Integer32
_EapLengthErrorFramesRx_Object = MibTableColumn
eapLengthErrorFramesRx = _EapLengthErrorFramesRx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 2, 1, 11),
    _EapLengthErrorFramesRx_Type()
)
eapLengthErrorFramesRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eapLengthErrorFramesRx.setStatus("current")
_AuthEntersConnecting_Type = Integer32
_AuthEntersConnecting_Object = MibTableColumn
authEntersConnecting = _AuthEntersConnecting_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 2, 1, 12),
    _AuthEntersConnecting_Type()
)
authEntersConnecting.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    authEntersConnecting.setStatus("current")
_AuthEapLogoffsWhileConnecting_Type = Integer32
_AuthEapLogoffsWhileConnecting_Object = MibTableColumn
authEapLogoffsWhileConnecting = _AuthEapLogoffsWhileConnecting_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 2, 1, 13),
    _AuthEapLogoffsWhileConnecting_Type()
)
authEapLogoffsWhileConnecting.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    authEapLogoffsWhileConnecting.setStatus("current")
_AuthEntersAuthenticating_Type = Integer32
_AuthEntersAuthenticating_Object = MibTableColumn
authEntersAuthenticating = _AuthEntersAuthenticating_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 2, 1, 14),
    _AuthEntersAuthenticating_Type()
)
authEntersAuthenticating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    authEntersAuthenticating.setStatus("current")
_AuthSuccessesWhileAuthenticating_Type = Integer32
_AuthSuccessesWhileAuthenticating_Object = MibTableColumn
authSuccessesWhileAuthenticating = _AuthSuccessesWhileAuthenticating_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 2, 1, 15),
    _AuthSuccessesWhileAuthenticating_Type()
)
authSuccessesWhileAuthenticating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    authSuccessesWhileAuthenticating.setStatus("current")
_AuthTimeoutsWhileAuthenticating_Type = Integer32
_AuthTimeoutsWhileAuthenticating_Object = MibTableColumn
authTimeoutsWhileAuthenticating = _AuthTimeoutsWhileAuthenticating_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 2, 1, 16),
    _AuthTimeoutsWhileAuthenticating_Type()
)
authTimeoutsWhileAuthenticating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    authTimeoutsWhileAuthenticating.setStatus("current")
_AuthFailWhileAuthenticating_Type = Integer32
_AuthFailWhileAuthenticating_Object = MibTableColumn
authFailWhileAuthenticating = _AuthFailWhileAuthenticating_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 2, 1, 17),
    _AuthFailWhileAuthenticating_Type()
)
authFailWhileAuthenticating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    authFailWhileAuthenticating.setStatus("current")
_AuthReauthsWhileAuthenticating_Type = Integer32
_AuthReauthsWhileAuthenticating_Object = MibTableColumn
authReauthsWhileAuthenticating = _AuthReauthsWhileAuthenticating_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 2, 1, 18),
    _AuthReauthsWhileAuthenticating_Type()
)
authReauthsWhileAuthenticating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    authReauthsWhileAuthenticating.setStatus("current")
_AuthEapStartsWhileAuthenticating_Type = Integer32
_AuthEapStartsWhileAuthenticating_Object = MibTableColumn
authEapStartsWhileAuthenticating = _AuthEapStartsWhileAuthenticating_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 2, 1, 19),
    _AuthEapStartsWhileAuthenticating_Type()
)
authEapStartsWhileAuthenticating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    authEapStartsWhileAuthenticating.setStatus("current")
_AuthEapLogoffWhileAuthenticating_Type = Integer32
_AuthEapLogoffWhileAuthenticating_Object = MibTableColumn
authEapLogoffWhileAuthenticating = _AuthEapLogoffWhileAuthenticating_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 2, 1, 20),
    _AuthEapLogoffWhileAuthenticating_Type()
)
authEapLogoffWhileAuthenticating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    authEapLogoffWhileAuthenticating.setStatus("current")
_AuthReauthsWhileAuthenticated_Type = Integer32
_AuthReauthsWhileAuthenticated_Object = MibTableColumn
authReauthsWhileAuthenticated = _AuthReauthsWhileAuthenticated_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 2, 1, 21),
    _AuthReauthsWhileAuthenticated_Type()
)
authReauthsWhileAuthenticated.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    authReauthsWhileAuthenticated.setStatus("current")
_AuthEapStartsWhileAuthenticated_Type = Integer32
_AuthEapStartsWhileAuthenticated_Object = MibTableColumn
authEapStartsWhileAuthenticated = _AuthEapStartsWhileAuthenticated_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 2, 1, 22),
    _AuthEapStartsWhileAuthenticated_Type()
)
authEapStartsWhileAuthenticated.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    authEapStartsWhileAuthenticated.setStatus("current")
_AuthEapLogoffWhileAuthenticated_Type = Integer32
_AuthEapLogoffWhileAuthenticated_Object = MibTableColumn
authEapLogoffWhileAuthenticated = _AuthEapLogoffWhileAuthenticated_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 2, 1, 23),
    _AuthEapLogoffWhileAuthenticated_Type()
)
authEapLogoffWhileAuthenticated.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    authEapLogoffWhileAuthenticated.setStatus("current")
_BackendResponses_Type = Integer32
_BackendResponses_Object = MibTableColumn
backendResponses = _BackendResponses_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 2, 1, 24),
    _BackendResponses_Type()
)
backendResponses.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    backendResponses.setStatus("current")
_BackendAccessChallenges_Type = Integer32
_BackendAccessChallenges_Object = MibTableColumn
backendAccessChallenges = _BackendAccessChallenges_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 2, 1, 25),
    _BackendAccessChallenges_Type()
)
backendAccessChallenges.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    backendAccessChallenges.setStatus("current")
_BackendOtherRequestsToSupplicant_Type = Integer32
_BackendOtherRequestsToSupplicant_Object = MibTableColumn
backendOtherRequestsToSupplicant = _BackendOtherRequestsToSupplicant_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 2, 1, 26),
    _BackendOtherRequestsToSupplicant_Type()
)
backendOtherRequestsToSupplicant.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    backendOtherRequestsToSupplicant.setStatus("current")
_BackendNonNakResponsesFromSupplicant_Type = Integer32
_BackendNonNakResponsesFromSupplicant_Object = MibTableColumn
backendNonNakResponsesFromSupplicant = _BackendNonNakResponsesFromSupplicant_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 2, 1, 27),
    _BackendNonNakResponsesFromSupplicant_Type()
)
backendNonNakResponsesFromSupplicant.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    backendNonNakResponsesFromSupplicant.setStatus("current")
_BackendAuthSuccesses_Type = Integer32
_BackendAuthSuccesses_Object = MibTableColumn
backendAuthSuccesses = _BackendAuthSuccesses_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 2, 1, 28),
    _BackendAuthSuccesses_Type()
)
backendAuthSuccesses.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    backendAuthSuccesses.setStatus("current")
_BackendAuthFails_Type = Integer32
_BackendAuthFails_Object = MibTableColumn
backendAuthFails = _BackendAuthFails_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 2, 1, 29),
    _BackendAuthFails_Type()
)
backendAuthFails.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    backendAuthFails.setStatus("current")
_LastEapolFrameVersion_Type = Integer32
_LastEapolFrameVersion_Object = MibTableColumn
lastEapolFrameVersion = _LastEapolFrameVersion_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 2, 1, 30),
    _LastEapolFrameVersion_Type()
)
lastEapolFrameVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lastEapolFrameVersion.setStatus("current")
_LastEapolFrameSource_Type = MacAddress
_LastEapolFrameSource_Object = MibTableColumn
lastEapolFrameSource = _LastEapolFrameSource_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 2, 1, 31),
    _LastEapolFrameSource_Type()
)
lastEapolFrameSource.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lastEapolFrameSource.setStatus("current")
_PortMgmtStatsTable_Object = MibTable
portMgmtStatsTable = _PortMgmtStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 3)
)
if mibBuilder.loadTexts:
    portMgmtStatsTable.setStatus("current")
_PortMgmtStatsTableEntry_Object = MibTableRow
portMgmtStatsTableEntry = _PortMgmtStatsTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 3, 1)
)
portMgmtStatsTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "portMgmtStatsIndx"),
)
if mibBuilder.loadTexts:
    portMgmtStatsTableEntry.setStatus("current")
_PortMgmtStatsIndx_Type = Integer32
_PortMgmtStatsIndx_Object = MibTableColumn
portMgmtStatsIndx = _PortMgmtStatsIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 3, 1, 1),
    _PortMgmtStatsIndx_Type()
)
portMgmtStatsIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portMgmtStatsIndx.setStatus("current")
_PortMgmtStatsRxBytes_Type = Counter32
_PortMgmtStatsRxBytes_Object = MibTableColumn
portMgmtStatsRxBytes = _PortMgmtStatsRxBytes_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 3, 1, 2),
    _PortMgmtStatsRxBytes_Type()
)
portMgmtStatsRxBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portMgmtStatsRxBytes.setStatus("current")
_PortMgmtStatsTxBytes_Type = Counter32
_PortMgmtStatsTxBytes_Object = MibTableColumn
portMgmtStatsTxBytes = _PortMgmtStatsTxBytes_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 3, 1, 3),
    _PortMgmtStatsTxBytes_Type()
)
portMgmtStatsTxBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portMgmtStatsTxBytes.setStatus("current")
_PortMgmtStatsRxpackets_Type = Counter32
_PortMgmtStatsRxpackets_Object = MibTableColumn
portMgmtStatsRxpackets = _PortMgmtStatsRxpackets_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 3, 1, 4),
    _PortMgmtStatsRxpackets_Type()
)
portMgmtStatsRxpackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portMgmtStatsRxpackets.setStatus("current")
_PortMgmtStatsTxpackets_Type = Counter32
_PortMgmtStatsTxpackets_Object = MibTableColumn
portMgmtStatsTxpackets = _PortMgmtStatsTxpackets_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 3, 1, 5),
    _PortMgmtStatsTxpackets_Type()
)
portMgmtStatsTxpackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portMgmtStatsTxpackets.setStatus("current")
_PortMgmtStatsRxErrors_Type = Counter32
_PortMgmtStatsRxErrors_Object = MibTableColumn
portMgmtStatsRxErrors = _PortMgmtStatsRxErrors_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 3, 1, 6),
    _PortMgmtStatsRxErrors_Type()
)
portMgmtStatsRxErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portMgmtStatsRxErrors.setStatus("current")
_PortMgmtStatsTxErrors_Type = Counter32
_PortMgmtStatsTxErrors_Object = MibTableColumn
portMgmtStatsTxErrors = _PortMgmtStatsTxErrors_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 3, 1, 7),
    _PortMgmtStatsTxErrors_Type()
)
portMgmtStatsTxErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portMgmtStatsTxErrors.setStatus("current")
_PortMgmtStatsRxDropped_Type = Counter32
_PortMgmtStatsRxDropped_Object = MibTableColumn
portMgmtStatsRxDropped = _PortMgmtStatsRxDropped_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 3, 1, 8),
    _PortMgmtStatsRxDropped_Type()
)
portMgmtStatsRxDropped.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portMgmtStatsRxDropped.setStatus("current")
_PortMgmtStatsTxDropped_Type = Counter32
_PortMgmtStatsTxDropped_Object = MibTableColumn
portMgmtStatsTxDropped = _PortMgmtStatsTxDropped_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 3, 1, 9),
    _PortMgmtStatsTxDropped_Type()
)
portMgmtStatsTxDropped.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portMgmtStatsTxDropped.setStatus("current")
_PortMgmtStatsRxOverruns_Type = Counter32
_PortMgmtStatsRxOverruns_Object = MibTableColumn
portMgmtStatsRxOverruns = _PortMgmtStatsRxOverruns_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 3, 1, 10),
    _PortMgmtStatsRxOverruns_Type()
)
portMgmtStatsRxOverruns.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portMgmtStatsRxOverruns.setStatus("current")
_PortMgmtStatsTxOverruns_Type = Counter32
_PortMgmtStatsTxOverruns_Object = MibTableColumn
portMgmtStatsTxOverruns = _PortMgmtStatsTxOverruns_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 3, 1, 11),
    _PortMgmtStatsTxOverruns_Type()
)
portMgmtStatsTxOverruns.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portMgmtStatsTxOverruns.setStatus("current")
_PortMgmtStatsRxFrame_Type = Counter32
_PortMgmtStatsRxFrame_Object = MibTableColumn
portMgmtStatsRxFrame = _PortMgmtStatsRxFrame_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 3, 1, 12),
    _PortMgmtStatsRxFrame_Type()
)
portMgmtStatsRxFrame.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portMgmtStatsRxFrame.setStatus("current")
_PortMgmtStatsTxCarrier_Type = Counter32
_PortMgmtStatsTxCarrier_Object = MibTableColumn
portMgmtStatsTxCarrier = _PortMgmtStatsTxCarrier_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 3, 1, 13),
    _PortMgmtStatsTxCarrier_Type()
)
portMgmtStatsTxCarrier.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portMgmtStatsTxCarrier.setStatus("current")
_PortMgmtStatsRxMulticast_Type = Counter32
_PortMgmtStatsRxMulticast_Object = MibTableColumn
portMgmtStatsRxMulticast = _PortMgmtStatsRxMulticast_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 3, 1, 14),
    _PortMgmtStatsRxMulticast_Type()
)
portMgmtStatsRxMulticast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portMgmtStatsRxMulticast.setStatus("current")
_PortMgmtStatsTxCollisions_Type = Counter32
_PortMgmtStatsTxCollisions_Object = MibTableColumn
portMgmtStatsTxCollisions = _PortMgmtStatsTxCollisions_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 3, 1, 15),
    _PortMgmtStatsTxCollisions_Type()
)
portMgmtStatsTxCollisions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portMgmtStatsTxCollisions.setStatus("current")
_AllportsStatsTable_Object = MibTable
allportsStatsTable = _AllportsStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4)
)
if mibBuilder.loadTexts:
    allportsStatsTable.setStatus("current")
_AllportsStatsTableEntry_Object = MibTableRow
allportsStatsTableEntry = _AllportsStatsTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1)
)
allportsStatsTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "allportsStatsIndx"),
)
if mibBuilder.loadTexts:
    allportsStatsTableEntry.setStatus("current")
_AllportsStatsIndx_Type = PortNumber
_AllportsStatsIndx_Object = MibTableColumn
allportsStatsIndx = _AllportsStatsIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 1),
    _AllportsStatsIndx_Type()
)
allportsStatsIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsIndx.setStatus("current")


class _AllportsStatsDescr_Type(DisplayString):
    """Custom type allportsStatsDescr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 7),
    )


_AllportsStatsDescr_Type.__name__ = "DisplayString"
_AllportsStatsDescr_Object = MibTableColumn
allportsStatsDescr = _AllportsStatsDescr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 2),
    _AllportsStatsDescr_Type()
)
allportsStatsDescr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsDescr.setStatus("current")


class _AllportsStatsSpeed_Type(Integer32):
    """Custom type allportsStatsSpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("mbs10", 2),
          ("mbs100", 3),
          ("mbs1000", 4),
          ("any", 5),
          ("mbs10000", 6),
          ("mbs40000", 7))
    )


_AllportsStatsSpeed_Type.__name__ = "Integer32"
_AllportsStatsSpeed_Object = MibTableColumn
allportsStatsSpeed = _AllportsStatsSpeed_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 3),
    _AllportsStatsSpeed_Type()
)
allportsStatsSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsSpeed.setStatus("current")
_AllportsStatsPhysAddress_Type = PhysAddress
_AllportsStatsPhysAddress_Object = MibTableColumn
allportsStatsPhysAddress = _AllportsStatsPhysAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 4),
    _AllportsStatsPhysAddress_Type()
)
allportsStatsPhysAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsPhysAddress.setStatus("current")


class _AllportsStatsAdminStatus_Type(Integer32):
    """Custom type allportsStatsAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("up", 1),
          ("down", 2),
          ("testing", 3))
    )


_AllportsStatsAdminStatus_Type.__name__ = "Integer32"
_AllportsStatsAdminStatus_Object = MibTableColumn
allportsStatsAdminStatus = _AllportsStatsAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 5),
    _AllportsStatsAdminStatus_Type()
)
allportsStatsAdminStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsAdminStatus.setStatus("current")


class _AllportsStatsOperStatus_Type(Integer32):
    """Custom type allportsStatsOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("up", 1),
          ("down", 2),
          ("testing", 3))
    )


_AllportsStatsOperStatus_Type.__name__ = "Integer32"
_AllportsStatsOperStatus_Object = MibTableColumn
allportsStatsOperStatus = _AllportsStatsOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 6),
    _AllportsStatsOperStatus_Type()
)
allportsStatsOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsOperStatus.setStatus("current")
_AllportsStatsInOctets_Type = Counter32
_AllportsStatsInOctets_Object = MibTableColumn
allportsStatsInOctets = _AllportsStatsInOctets_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 7),
    _AllportsStatsInOctets_Type()
)
allportsStatsInOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsInOctets.setStatus("current")
_AllportsStatsOutOctets_Type = Counter32
_AllportsStatsOutOctets_Object = MibTableColumn
allportsStatsOutOctets = _AllportsStatsOutOctets_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 8),
    _AllportsStatsOutOctets_Type()
)
allportsStatsOutOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsOutOctets.setStatus("current")
_AllportsStatsInPkts_Type = Counter32
_AllportsStatsInPkts_Object = MibTableColumn
allportsStatsInPkts = _AllportsStatsInPkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 9),
    _AllportsStatsInPkts_Type()
)
allportsStatsInPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsInPkts.setStatus("current")
_AllportsStatsOutPkts_Type = Counter32
_AllportsStatsOutPkts_Object = MibTableColumn
allportsStatsOutPkts = _AllportsStatsOutPkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 10),
    _AllportsStatsOutPkts_Type()
)
allportsStatsOutPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsOutPkts.setStatus("current")


class _AllportsStatsInUcast_Type(DisplayString):
    """Custom type allportsStatsInUcast based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_AllportsStatsInUcast_Type.__name__ = "DisplayString"
_AllportsStatsInUcast_Object = MibTableColumn
allportsStatsInUcast = _AllportsStatsInUcast_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 11),
    _AllportsStatsInUcast_Type()
)
allportsStatsInUcast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsInUcast.setStatus("current")


class _AllportsStatsOutUcast_Type(DisplayString):
    """Custom type allportsStatsOutUcast based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_AllportsStatsOutUcast_Type.__name__ = "DisplayString"
_AllportsStatsOutUcast_Object = MibTableColumn
allportsStatsOutUcast = _AllportsStatsOutUcast_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 12),
    _AllportsStatsOutUcast_Type()
)
allportsStatsOutUcast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsOutUcast.setStatus("current")


class _AllportsStatsInBcast_Type(DisplayString):
    """Custom type allportsStatsInBcast based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_AllportsStatsInBcast_Type.__name__ = "DisplayString"
_AllportsStatsInBcast_Object = MibTableColumn
allportsStatsInBcast = _AllportsStatsInBcast_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 13),
    _AllportsStatsInBcast_Type()
)
allportsStatsInBcast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsInBcast.setStatus("current")


class _AllportsStatsOutBcast_Type(DisplayString):
    """Custom type allportsStatsOutBcast based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_AllportsStatsOutBcast_Type.__name__ = "DisplayString"
_AllportsStatsOutBcast_Object = MibTableColumn
allportsStatsOutBcast = _AllportsStatsOutBcast_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 14),
    _AllportsStatsOutBcast_Type()
)
allportsStatsOutBcast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsOutBcast.setStatus("current")


class _AllportsStatsInMcast_Type(DisplayString):
    """Custom type allportsStatsInMcast based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_AllportsStatsInMcast_Type.__name__ = "DisplayString"
_AllportsStatsInMcast_Object = MibTableColumn
allportsStatsInMcast = _AllportsStatsInMcast_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 15),
    _AllportsStatsInMcast_Type()
)
allportsStatsInMcast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsInMcast.setStatus("current")


class _AllportsStatsOutMcast_Type(DisplayString):
    """Custom type allportsStatsOutMcast based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_AllportsStatsOutMcast_Type.__name__ = "DisplayString"
_AllportsStatsOutMcast_Object = MibTableColumn
allportsStatsOutMcast = _AllportsStatsOutMcast_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 16),
    _AllportsStatsOutMcast_Type()
)
allportsStatsOutMcast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsOutMcast.setStatus("current")
_AllportsStatsInDiscards_Type = Counter32
_AllportsStatsInDiscards_Object = MibTableColumn
allportsStatsInDiscards = _AllportsStatsInDiscards_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 17),
    _AllportsStatsInDiscards_Type()
)
allportsStatsInDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsInDiscards.setStatus("current")
_AllportsStatsOutDiscards_Type = Counter32
_AllportsStatsOutDiscards_Object = MibTableColumn
allportsStatsOutDiscards = _AllportsStatsOutDiscards_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 18),
    _AllportsStatsOutDiscards_Type()
)
allportsStatsOutDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsOutDiscards.setStatus("current")
_AllportsStatsInErrors_Type = Counter32
_AllportsStatsInErrors_Object = MibTableColumn
allportsStatsInErrors = _AllportsStatsInErrors_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 19),
    _AllportsStatsInErrors_Type()
)
allportsStatsInErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsInErrors.setStatus("current")
_AllportsStatsOutErrors_Type = Counter32
_AllportsStatsOutErrors_Object = MibTableColumn
allportsStatsOutErrors = _AllportsStatsOutErrors_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 20),
    _AllportsStatsOutErrors_Type()
)
allportsStatsOutErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsOutErrors.setStatus("current")


class _AllportsStatsInUnknownProtos_Type(DisplayString):
    """Custom type allportsStatsInUnknownProtos based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_AllportsStatsInUnknownProtos_Type.__name__ = "DisplayString"
_AllportsStatsInUnknownProtos_Object = MibTableColumn
allportsStatsInUnknownProtos = _AllportsStatsInUnknownProtos_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 21),
    _AllportsStatsInUnknownProtos_Type()
)
allportsStatsInUnknownProtos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsInUnknownProtos.setStatus("current")


class _AllportsStatsOutQLen_Type(DisplayString):
    """Custom type allportsStatsOutQLen based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_AllportsStatsOutQLen_Type.__name__ = "DisplayString"
_AllportsStatsOutQLen_Object = MibTableColumn
allportsStatsOutQLen = _AllportsStatsOutQLen_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 22),
    _AllportsStatsOutQLen_Type()
)
allportsStatsOutQLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsOutQLen.setStatus("current")
_AllportsStatsipInReceives_Type = Counter32
_AllportsStatsipInReceives_Object = MibTableColumn
allportsStatsipInReceives = _AllportsStatsipInReceives_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 23),
    _AllportsStatsipInReceives_Type()
)
allportsStatsipInReceives.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsipInReceives.setStatus("current")
_AllportsStatsipInHeaderErrors_Type = Counter32
_AllportsStatsipInHeaderErrors_Object = MibTableColumn
allportsStatsipInHeaderErrors = _AllportsStatsipInHeaderErrors_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 24),
    _AllportsStatsipInHeaderErrors_Type()
)
allportsStatsipInHeaderErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsipInHeaderErrors.setStatus("current")
_AllportsStatsipInDiscards_Type = Counter32
_AllportsStatsipInDiscards_Object = MibTableColumn
allportsStatsipInDiscards = _AllportsStatsipInDiscards_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 25),
    _AllportsStatsipInDiscards_Type()
)
allportsStatsipInDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsipInDiscards.setStatus("current")
_AllportsStatsLinkStateChange_Type = Counter32
_AllportsStatsLinkStateChange_Object = MibTableColumn
allportsStatsLinkStateChange = _AllportsStatsLinkStateChange_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 26),
    _AllportsStatsLinkStateChange_Type()
)
allportsStatsLinkStateChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsLinkStateChange.setStatus("current")
_AllportsStatsipInReceivesRate_Type = Counter32
_AllportsStatsipInReceivesRate_Object = MibTableColumn
allportsStatsipInReceivesRate = _AllportsStatsipInReceivesRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 27),
    _AllportsStatsipInReceivesRate_Type()
)
allportsStatsipInReceivesRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsipInReceivesRate.setStatus("current")
_AllportsStatsipInHeaderErrorsRate_Type = Counter32
_AllportsStatsipInHeaderErrorsRate_Object = MibTableColumn
allportsStatsipInHeaderErrorsRate = _AllportsStatsipInHeaderErrorsRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 28),
    _AllportsStatsipInHeaderErrorsRate_Type()
)
allportsStatsipInHeaderErrorsRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsipInHeaderErrorsRate.setStatus("current")
_AllportsStatsipInDiscardsRate_Type = Counter32
_AllportsStatsipInDiscardsRate_Object = MibTableColumn
allportsStatsipInDiscardsRate = _AllportsStatsipInDiscardsRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 29),
    _AllportsStatsipInDiscardsRate_Type()
)
allportsStatsipInDiscardsRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsipInDiscardsRate.setStatus("current")
_AllportsStatsInOctetsRate_Type = Counter32
_AllportsStatsInOctetsRate_Object = MibTableColumn
allportsStatsInOctetsRate = _AllportsStatsInOctetsRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 30),
    _AllportsStatsInOctetsRate_Type()
)
allportsStatsInOctetsRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsInOctetsRate.setStatus("current")
_AllportsStatsOutOctetsRate_Type = Counter32
_AllportsStatsOutOctetsRate_Object = MibTableColumn
allportsStatsOutOctetsRate = _AllportsStatsOutOctetsRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 31),
    _AllportsStatsOutOctetsRate_Type()
)
allportsStatsOutOctetsRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsOutOctetsRate.setStatus("current")


class _AllportsStatsInUcastRate_Type(DisplayString):
    """Custom type allportsStatsInUcastRate based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_AllportsStatsInUcastRate_Type.__name__ = "DisplayString"
_AllportsStatsInUcastRate_Object = MibTableColumn
allportsStatsInUcastRate = _AllportsStatsInUcastRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 32),
    _AllportsStatsInUcastRate_Type()
)
allportsStatsInUcastRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsInUcastRate.setStatus("current")


class _AllportsStatsOutUcastRate_Type(DisplayString):
    """Custom type allportsStatsOutUcastRate based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_AllportsStatsOutUcastRate_Type.__name__ = "DisplayString"
_AllportsStatsOutUcastRate_Object = MibTableColumn
allportsStatsOutUcastRate = _AllportsStatsOutUcastRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 33),
    _AllportsStatsOutUcastRate_Type()
)
allportsStatsOutUcastRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsOutUcastRate.setStatus("current")


class _AllportsStatsInBcastRate_Type(DisplayString):
    """Custom type allportsStatsInBcastRate based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_AllportsStatsInBcastRate_Type.__name__ = "DisplayString"
_AllportsStatsInBcastRate_Object = MibTableColumn
allportsStatsInBcastRate = _AllportsStatsInBcastRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 34),
    _AllportsStatsInBcastRate_Type()
)
allportsStatsInBcastRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsInBcastRate.setStatus("current")


class _AllportsStatsOutBcastRate_Type(DisplayString):
    """Custom type allportsStatsOutBcastRate based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_AllportsStatsOutBcastRate_Type.__name__ = "DisplayString"
_AllportsStatsOutBcastRate_Object = MibTableColumn
allportsStatsOutBcastRate = _AllportsStatsOutBcastRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 35),
    _AllportsStatsOutBcastRate_Type()
)
allportsStatsOutBcastRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsOutBcastRate.setStatus("current")


class _AllportsStatsInMcastRate_Type(DisplayString):
    """Custom type allportsStatsInMcastRate based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_AllportsStatsInMcastRate_Type.__name__ = "DisplayString"
_AllportsStatsInMcastRate_Object = MibTableColumn
allportsStatsInMcastRate = _AllportsStatsInMcastRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 36),
    _AllportsStatsInMcastRate_Type()
)
allportsStatsInMcastRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsInMcastRate.setStatus("current")


class _AllportsStatsOutMcastRate_Type(DisplayString):
    """Custom type allportsStatsOutMcastRate based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_AllportsStatsOutMcastRate_Type.__name__ = "DisplayString"
_AllportsStatsOutMcastRate_Object = MibTableColumn
allportsStatsOutMcastRate = _AllportsStatsOutMcastRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 37),
    _AllportsStatsOutMcastRate_Type()
)
allportsStatsOutMcastRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsOutMcastRate.setStatus("current")
_AllportsStatsInDiscardsRate_Type = Counter32
_AllportsStatsInDiscardsRate_Object = MibTableColumn
allportsStatsInDiscardsRate = _AllportsStatsInDiscardsRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 38),
    _AllportsStatsInDiscardsRate_Type()
)
allportsStatsInDiscardsRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsInDiscardsRate.setStatus("current")
_AllportsStatsOutDiscardsRate_Type = Counter32
_AllportsStatsOutDiscardsRate_Object = MibTableColumn
allportsStatsOutDiscardsRate = _AllportsStatsOutDiscardsRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 39),
    _AllportsStatsOutDiscardsRate_Type()
)
allportsStatsOutDiscardsRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsOutDiscardsRate.setStatus("current")
_AllportsStatsInErrorsRate_Type = Counter32
_AllportsStatsInErrorsRate_Object = MibTableColumn
allportsStatsInErrorsRate = _AllportsStatsInErrorsRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 40),
    _AllportsStatsInErrorsRate_Type()
)
allportsStatsInErrorsRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsInErrorsRate.setStatus("current")
_AllportsStatsOutErrorsRate_Type = Counter32
_AllportsStatsOutErrorsRate_Object = MibTableColumn
allportsStatsOutErrorsRate = _AllportsStatsOutErrorsRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 4, 1, 41),
    _AllportsStatsOutErrorsRate_Type()
)
allportsStatsOutErrorsRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsOutErrorsRate.setStatus("current")


class _ClearPortsStats_Type(Integer32):
    """Custom type clearPortsStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_ClearPortsStats_Type.__name__ = "Integer32"
_ClearPortsStats_Object = MibScalar
clearPortsStats = _ClearPortsStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 6),
    _ClearPortsStats_Type()
)
clearPortsStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    clearPortsStats.setStatus("current")
_Dot1RateStatsTable_Object = MibTable
dot1RateStatsTable = _Dot1RateStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 7)
)
if mibBuilder.loadTexts:
    dot1RateStatsTable.setStatus("current")
_Dot1RateStatsTableEntry_Object = MibTableRow
dot1RateStatsTableEntry = _Dot1RateStatsTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 7, 1)
)
dot1RateStatsTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "dot1RateStatsIndx"),
)
if mibBuilder.loadTexts:
    dot1RateStatsTableEntry.setStatus("current")
_Dot1RateStatsIndx_Type = PortNumber
_Dot1RateStatsIndx_Object = MibTableColumn
dot1RateStatsIndx = _Dot1RateStatsIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 7, 1, 1),
    _Dot1RateStatsIndx_Type()
)
dot1RateStatsIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1RateStatsIndx.setStatus("current")
_Dot1RatePortInFrames_Type = Counter32
_Dot1RatePortInFrames_Object = MibTableColumn
dot1RatePortInFrames = _Dot1RatePortInFrames_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 7, 1, 2),
    _Dot1RatePortInFrames_Type()
)
dot1RatePortInFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1RatePortInFrames.setStatus("current")
_Dot1RatePortOutFrames_Type = Counter32
_Dot1RatePortOutFrames_Object = MibTableColumn
dot1RatePortOutFrames = _Dot1RatePortOutFrames_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 7, 1, 3),
    _Dot1RatePortOutFrames_Type()
)
dot1RatePortOutFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1RatePortOutFrames.setStatus("current")
_Dot1RatePortInDiscards_Type = Counter32
_Dot1RatePortInDiscards_Object = MibTableColumn
dot1RatePortInDiscards = _Dot1RatePortInDiscards_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 7, 1, 4),
    _Dot1RatePortInDiscards_Type()
)
dot1RatePortInDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1RatePortInDiscards.setStatus("current")
_Dot1RateTpLearnedEntryDiscards_Type = Counter32
_Dot1RateTpLearnedEntryDiscards_Object = MibTableColumn
dot1RateTpLearnedEntryDiscards = _Dot1RateTpLearnedEntryDiscards_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 7, 1, 5),
    _Dot1RateTpLearnedEntryDiscards_Type()
)
dot1RateTpLearnedEntryDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1RateTpLearnedEntryDiscards.setStatus("current")
_Dot1RateStpPortForwardTransitions_Type = Counter32
_Dot1RateStpPortForwardTransitions_Object = MibTableColumn
dot1RateStpPortForwardTransitions = _Dot1RateStpPortForwardTransitions_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 7, 1, 8),
    _Dot1RateStpPortForwardTransitions_Type()
)
dot1RateStpPortForwardTransitions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1RateStpPortForwardTransitions.setStatus("current")
_Dot3RateStatsTable_Object = MibTable
dot3RateStatsTable = _Dot3RateStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 8)
)
if mibBuilder.loadTexts:
    dot3RateStatsTable.setStatus("current")
_Dot3RateStatsTableEntry_Object = MibTableRow
dot3RateStatsTableEntry = _Dot3RateStatsTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 8, 1)
)
dot3RateStatsTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "dot3RateStatsIndx"),
)
if mibBuilder.loadTexts:
    dot3RateStatsTableEntry.setStatus("current")
_Dot3RateStatsIndx_Type = PortNumber
_Dot3RateStatsIndx_Object = MibTableColumn
dot3RateStatsIndx = _Dot3RateStatsIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 8, 1, 1),
    _Dot3RateStatsIndx_Type()
)
dot3RateStatsIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot3RateStatsIndx.setStatus("current")
_Dot3RateStatsAlignmentErrors_Type = Counter32
_Dot3RateStatsAlignmentErrors_Object = MibTableColumn
dot3RateStatsAlignmentErrors = _Dot3RateStatsAlignmentErrors_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 8, 1, 2),
    _Dot3RateStatsAlignmentErrors_Type()
)
dot3RateStatsAlignmentErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot3RateStatsAlignmentErrors.setStatus("current")
_Dot3RateStatsFCSErrors_Type = Counter32
_Dot3RateStatsFCSErrors_Object = MibTableColumn
dot3RateStatsFCSErrors = _Dot3RateStatsFCSErrors_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 8, 1, 3),
    _Dot3RateStatsFCSErrors_Type()
)
dot3RateStatsFCSErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot3RateStatsFCSErrors.setStatus("current")
_Dot3RateStatsSingleCollisionFrames_Type = Counter32
_Dot3RateStatsSingleCollisionFrames_Object = MibTableColumn
dot3RateStatsSingleCollisionFrames = _Dot3RateStatsSingleCollisionFrames_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 8, 1, 4),
    _Dot3RateStatsSingleCollisionFrames_Type()
)
dot3RateStatsSingleCollisionFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot3RateStatsSingleCollisionFrames.setStatus("current")
_Dot3RateStatsMultipleCollisionFrames_Type = Counter32
_Dot3RateStatsMultipleCollisionFrames_Object = MibTableColumn
dot3RateStatsMultipleCollisionFrames = _Dot3RateStatsMultipleCollisionFrames_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 8, 1, 5),
    _Dot3RateStatsMultipleCollisionFrames_Type()
)
dot3RateStatsMultipleCollisionFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot3RateStatsMultipleCollisionFrames.setStatus("current")
_Dot3RateStatsLateCollisions_Type = Counter32
_Dot3RateStatsLateCollisions_Object = MibTableColumn
dot3RateStatsLateCollisions = _Dot3RateStatsLateCollisions_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 8, 1, 8),
    _Dot3RateStatsLateCollisions_Type()
)
dot3RateStatsLateCollisions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot3RateStatsLateCollisions.setStatus("current")
_Dot3RateStatsExcessiveCollisions_Type = Counter32
_Dot3RateStatsExcessiveCollisions_Object = MibTableColumn
dot3RateStatsExcessiveCollisions = _Dot3RateStatsExcessiveCollisions_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 8, 1, 9),
    _Dot3RateStatsExcessiveCollisions_Type()
)
dot3RateStatsExcessiveCollisions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot3RateStatsExcessiveCollisions.setStatus("current")
_Dot3RateStatsInternalMacTransmitErrors_Type = Counter32
_Dot3RateStatsInternalMacTransmitErrors_Object = MibTableColumn
dot3RateStatsInternalMacTransmitErrors = _Dot3RateStatsInternalMacTransmitErrors_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 8, 1, 10),
    _Dot3RateStatsInternalMacTransmitErrors_Type()
)
dot3RateStatsInternalMacTransmitErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot3RateStatsInternalMacTransmitErrors.setStatus("current")
_Dot3RateStatsFrameTooLongs_Type = Counter32
_Dot3RateStatsFrameTooLongs_Object = MibTableColumn
dot3RateStatsFrameTooLongs = _Dot3RateStatsFrameTooLongs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 8, 1, 12),
    _Dot3RateStatsFrameTooLongs_Type()
)
dot3RateStatsFrameTooLongs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot3RateStatsFrameTooLongs.setStatus("current")
_Dot3RateStatsInternalMacReceiveErrors_Type = Counter32
_Dot3RateStatsInternalMacReceiveErrors_Object = MibTableColumn
dot3RateStatsInternalMacReceiveErrors = _Dot3RateStatsInternalMacReceiveErrors_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 8, 1, 13),
    _Dot3RateStatsInternalMacReceiveErrors_Type()
)
dot3RateStatsInternalMacReceiveErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot3RateStatsInternalMacReceiveErrors.setStatus("current")
_PortQoSCounterTable_Object = MibTable
portQoSCounterTable = _PortQoSCounterTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 9)
)
if mibBuilder.loadTexts:
    portQoSCounterTable.setStatus("current")
_PortQoSCounterTableEntry_Object = MibTableRow
portQoSCounterTableEntry = _PortQoSCounterTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 9, 1)
)
portQoSCounterTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "portQoSIndex"),
    (0, "IBM-GbTOR-G8264T-MIB", "queueQoSIndex"),
)
if mibBuilder.loadTexts:
    portQoSCounterTableEntry.setStatus("current")
_PortQoSIndex_Type = PortNumber
_PortQoSIndex_Object = MibTableColumn
portQoSIndex = _PortQoSIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 9, 1, 1),
    _PortQoSIndex_Type()
)
portQoSIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portQoSIndex.setStatus("current")
_QueueQoSIndex_Type = Integer32
_QueueQoSIndex_Object = MibTableColumn
queueQoSIndex = _QueueQoSIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 9, 1, 2),
    _QueueQoSIndex_Type()
)
queueQoSIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    queueQoSIndex.setStatus("current")
_TxPackets_Type = Counter64
_TxPackets_Object = MibTableColumn
txPackets = _TxPackets_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 9, 1, 3),
    _TxPackets_Type()
)
txPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    txPackets.setStatus("current")
_DroppedPackets_Type = Counter64
_DroppedPackets_Object = MibTableColumn
droppedPackets = _DroppedPackets_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 9, 1, 4),
    _DroppedPackets_Type()
)
droppedPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    droppedPackets.setStatus("current")
_TxBytes_Type = Counter64
_TxBytes_Object = MibTableColumn
txBytes = _TxBytes_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 9, 1, 5),
    _TxBytes_Type()
)
txBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    txBytes.setStatus("current")
_DroppedBytes_Type = Counter64
_DroppedBytes_Object = MibTableColumn
droppedBytes = _DroppedBytes_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 9, 1, 6),
    _DroppedBytes_Type()
)
droppedBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    droppedBytes.setStatus("current")
_TxPacketsRate_Type = Counter64
_TxPacketsRate_Object = MibTableColumn
txPacketsRate = _TxPacketsRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 9, 1, 7),
    _TxPacketsRate_Type()
)
txPacketsRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    txPacketsRate.setStatus("current")
_DroppedPacketsRate_Type = Counter64
_DroppedPacketsRate_Object = MibTableColumn
droppedPacketsRate = _DroppedPacketsRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 9, 1, 8),
    _DroppedPacketsRate_Type()
)
droppedPacketsRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    droppedPacketsRate.setStatus("current")
_TxBytesRate_Type = Counter64
_TxBytesRate_Object = MibTableColumn
txBytesRate = _TxBytesRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 9, 1, 9),
    _TxBytesRate_Type()
)
txBytesRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    txBytesRate.setStatus("current")
_DroppedBytesRate_Type = Counter64
_DroppedBytesRate_Object = MibTableColumn
droppedBytesRate = _DroppedBytesRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 3, 9, 1, 10),
    _DroppedBytesRate_Type()
)
droppedBytesRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    droppedBytesRate.setStatus("current")
_AgClearStats_ObjectIdentity = ObjectIdentity
agClearStats = _AgClearStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 7)
)


class _SnmpClearStats_Type(Integer32):
    """Custom type snmpClearStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_SnmpClearStats_Type.__name__ = "Integer32"
_SnmpClearStats_Object = MibScalar
snmpClearStats = _SnmpClearStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 7, 1),
    _SnmpClearStats_Type()
)
snmpClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpClearStats.setStatus("current")
_NtpStats_ObjectIdentity = ObjectIdentity
ntpStats = _NtpStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 9)
)
_NtpPrimaryServerReqSent_Type = Integer32
_NtpPrimaryServerReqSent_Object = MibScalar
ntpPrimaryServerReqSent = _NtpPrimaryServerReqSent_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 9, 1),
    _NtpPrimaryServerReqSent_Type()
)
ntpPrimaryServerReqSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpPrimaryServerReqSent.setStatus("current")
_NtpPrimaryServerRespRcvd_Type = Integer32
_NtpPrimaryServerRespRcvd_Object = MibScalar
ntpPrimaryServerRespRcvd = _NtpPrimaryServerRespRcvd_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 9, 2),
    _NtpPrimaryServerRespRcvd_Type()
)
ntpPrimaryServerRespRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpPrimaryServerRespRcvd.setStatus("current")
_NtpPrimaryServerUpdates_Type = Integer32
_NtpPrimaryServerUpdates_Object = MibScalar
ntpPrimaryServerUpdates = _NtpPrimaryServerUpdates_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 9, 3),
    _NtpPrimaryServerUpdates_Type()
)
ntpPrimaryServerUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpPrimaryServerUpdates.setStatus("current")
_NtpSecondaryServerReqSent_Type = Integer32
_NtpSecondaryServerReqSent_Object = MibScalar
ntpSecondaryServerReqSent = _NtpSecondaryServerReqSent_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 9, 4),
    _NtpSecondaryServerReqSent_Type()
)
ntpSecondaryServerReqSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpSecondaryServerReqSent.setStatus("current")
_NtpSecondaryServerRespRcvd_Type = Integer32
_NtpSecondaryServerRespRcvd_Object = MibScalar
ntpSecondaryServerRespRcvd = _NtpSecondaryServerRespRcvd_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 9, 5),
    _NtpSecondaryServerRespRcvd_Type()
)
ntpSecondaryServerRespRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpSecondaryServerRespRcvd.setStatus("current")
_NtpSecondaryServerUpdates_Type = Integer32
_NtpSecondaryServerUpdates_Object = MibScalar
ntpSecondaryServerUpdates = _NtpSecondaryServerUpdates_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 9, 6),
    _NtpSecondaryServerUpdates_Type()
)
ntpSecondaryServerUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpSecondaryServerUpdates.setStatus("current")


class _NtpLastUpdateServer_Type(Integer32):
    """Custom type ntpLastUpdateServer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("primary", 1),
          ("secondary", 2))
    )


_NtpLastUpdateServer_Type.__name__ = "Integer32"
_NtpLastUpdateServer_Object = MibScalar
ntpLastUpdateServer = _NtpLastUpdateServer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 9, 7),
    _NtpLastUpdateServer_Type()
)
ntpLastUpdateServer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpLastUpdateServer.setStatus("current")


class _NtpLastUpdateTime_Type(DisplayString):
    """Custom type ntpLastUpdateTime based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 127),
    )


_NtpLastUpdateTime_Type.__name__ = "DisplayString"
_NtpLastUpdateTime_Object = MibScalar
ntpLastUpdateTime = _NtpLastUpdateTime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 9, 8),
    _NtpLastUpdateTime_Type()
)
ntpLastUpdateTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpLastUpdateTime.setStatus("current")


class _NtpClearStats_Type(Integer32):
    """Custom type ntpClearStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_NtpClearStats_Type.__name__ = "Integer32"
_NtpClearStats_Object = MibScalar
ntpClearStats = _NtpClearStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 9, 9),
    _NtpClearStats_Type()
)
ntpClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ntpClearStats.setStatus("current")


class _NtpSystemCurrentTime_Type(DisplayString):
    """Custom type ntpSystemCurrentTime based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 127),
    )


_NtpSystemCurrentTime_Type.__name__ = "DisplayString"
_NtpSystemCurrentTime_Object = MibScalar
ntpSystemCurrentTime = _NtpSystemCurrentTime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 9, 10),
    _NtpSystemCurrentTime_Type()
)
ntpSystemCurrentTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpSystemCurrentTime.setStatus("current")
_AclStats_ObjectIdentity = ObjectIdentity
aclStats = _AclStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 11)
)
_AclStatsTable_Object = MibTable
aclStatsTable = _AclStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 11, 1)
)
if mibBuilder.loadTexts:
    aclStatsTable.setStatus("current")
_AclStatsTableEntry_Object = MibTableRow
aclStatsTableEntry = _AclStatsTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 11, 1, 1)
)
aclStatsTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "aclStatsIndex"),
)
if mibBuilder.loadTexts:
    aclStatsTableEntry.setStatus("current")
_AclStatsIndex_Type = Integer32
_AclStatsIndex_Object = MibTableColumn
aclStatsIndex = _AclStatsIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 11, 1, 1, 1),
    _AclStatsIndex_Type()
)
aclStatsIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclStatsIndex.setStatus("current")
_AclStatsHits_Type = Counter32
_AclStatsHits_Object = MibTableColumn
aclStatsHits = _AclStatsHits_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 11, 1, 1, 2),
    _AclStatsHits_Type()
)
aclStatsHits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclStatsHits.setStatus("current")


class _AclClearStats_Type(Integer32):
    """Custom type aclClearStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_AclClearStats_Type.__name__ = "Integer32"
_AclClearStats_Object = MibTableColumn
aclClearStats = _AclClearStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 11, 1, 1, 3),
    _AclClearStats_Type()
)
aclClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclClearStats.setStatus("current")
_VmapStatsTable_Object = MibTable
vmapStatsTable = _VmapStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 11, 2)
)
if mibBuilder.loadTexts:
    vmapStatsTable.setStatus("current")
_VmapStatsTableEntry_Object = MibTableRow
vmapStatsTableEntry = _VmapStatsTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 11, 2, 1)
)
vmapStatsTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vmapStatsIndex"),
)
if mibBuilder.loadTexts:
    vmapStatsTableEntry.setStatus("current")
_VmapStatsIndex_Type = Integer32
_VmapStatsIndex_Object = MibTableColumn
vmapStatsIndex = _VmapStatsIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 11, 2, 1, 1),
    _VmapStatsIndex_Type()
)
vmapStatsIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapStatsIndex.setStatus("current")
_VmapStatsHits_Type = Counter32
_VmapStatsHits_Object = MibTableColumn
vmapStatsHits = _VmapStatsHits_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 11, 2, 1, 2),
    _VmapStatsHits_Type()
)
vmapStatsHits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapStatsHits.setStatus("current")


class _VmapClearStats_Type(Integer32):
    """Custom type vmapClearStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_VmapClearStats_Type.__name__ = "Integer32"
_VmapClearStats_Object = MibTableColumn
vmapClearStats = _VmapClearStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 11, 2, 1, 3),
    _VmapClearStats_Type()
)
vmapClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapClearStats.setStatus("current")
_Acl6StatsTable_Object = MibTable
acl6StatsTable = _Acl6StatsTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 11, 3)
)
if mibBuilder.loadTexts:
    acl6StatsTable.setStatus("current")
_Acl6StatsTableEntry_Object = MibTableRow
acl6StatsTableEntry = _Acl6StatsTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 11, 3, 1)
)
acl6StatsTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "aclStatsIndex"),
)
if mibBuilder.loadTexts:
    acl6StatsTableEntry.setStatus("current")
_Acl6StatsIndex_Type = Integer32
_Acl6StatsIndex_Object = MibTableColumn
acl6StatsIndex = _Acl6StatsIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 11, 3, 1, 1),
    _Acl6StatsIndex_Type()
)
acl6StatsIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acl6StatsIndex.setStatus("current")
_Acl6StatsHits_Type = Counter32
_Acl6StatsHits_Object = MibTableColumn
acl6StatsHits = _Acl6StatsHits_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 11, 3, 1, 2),
    _Acl6StatsHits_Type()
)
acl6StatsHits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acl6StatsHits.setStatus("current")


class _Acl6ClearStats_Type(Integer32):
    """Custom type acl6ClearStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_Acl6ClearStats_Type.__name__ = "Integer32"
_Acl6ClearStats_Object = MibTableColumn
acl6ClearStats = _Acl6ClearStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 11, 3, 1, 3),
    _Acl6ClearStats_Type()
)
acl6ClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acl6ClearStats.setStatus("current")
_MemoryStats_ObjectIdentity = ObjectIdentity
memoryStats = _MemoryStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 12)
)
_TotalMemoryStats_Type = Counter64
_TotalMemoryStats_Object = MibScalar
totalMemoryStats = _TotalMemoryStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 12, 1),
    _TotalMemoryStats_Type()
)
totalMemoryStats.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    totalMemoryStats.setStatus("current")
_MemoryFreeStats_Type = Counter64
_MemoryFreeStats_Object = MibScalar
memoryFreeStats = _MemoryFreeStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 12, 2),
    _MemoryFreeStats_Type()
)
memoryFreeStats.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memoryFreeStats.setStatus("current")
_MemorySharedStats_Type = Counter64
_MemorySharedStats_Object = MibScalar
memorySharedStats = _MemorySharedStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 12, 3),
    _MemorySharedStats_Type()
)
memorySharedStats.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memorySharedStats.setStatus("current")
_MemoryBufferStats_Type = Counter64
_MemoryBufferStats_Object = MibScalar
memoryBufferStats = _MemoryBufferStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 12, 4),
    _MemoryBufferStats_Type()
)
memoryBufferStats.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memoryBufferStats.setStatus("current")
_SwapTotalStats_Type = Counter64
_SwapTotalStats_Object = MibScalar
swapTotalStats = _SwapTotalStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 12, 5),
    _SwapTotalStats_Type()
)
swapTotalStats.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    swapTotalStats.setStatus("current")
_SwapFreeStats_Type = Counter64
_SwapFreeStats_Object = MibScalar
swapFreeStats = _SwapFreeStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 12, 6),
    _SwapFreeStats_Type()
)
swapFreeStats.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    swapFreeStats.setStatus("current")
_HighTotalStats_Type = Counter64
_HighTotalStats_Object = MibScalar
highTotalStats = _HighTotalStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 12, 7),
    _HighTotalStats_Type()
)
highTotalStats.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    highTotalStats.setStatus("current")
_HighFreeStats_Type = Counter64
_HighFreeStats_Object = MibScalar
highFreeStats = _HighFreeStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 12, 8),
    _HighFreeStats_Type()
)
highFreeStats.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    highFreeStats.setStatus("current")
_SnmpStats_ObjectIdentity = ObjectIdentity
snmpStats = _SnmpStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 20)
)
_NsnmpInPkts_Type = Counter32
_NsnmpInPkts_Object = MibScalar
nsnmpInPkts = _NsnmpInPkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 20, 1),
    _NsnmpInPkts_Type()
)
nsnmpInPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nsnmpInPkts.setStatus("current")
_NsnmpInBadCommunityNames_Type = Counter32
_NsnmpInBadCommunityNames_Object = MibScalar
nsnmpInBadCommunityNames = _NsnmpInBadCommunityNames_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 20, 2),
    _NsnmpInBadCommunityNames_Type()
)
nsnmpInBadCommunityNames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nsnmpInBadCommunityNames.setStatus("current")
_NsnmpInASNParseErrs_Type = Counter32
_NsnmpInASNParseErrs_Object = MibScalar
nsnmpInASNParseErrs = _NsnmpInASNParseErrs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 20, 3),
    _NsnmpInASNParseErrs_Type()
)
nsnmpInASNParseErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nsnmpInASNParseErrs.setStatus("current")
_NsnmpOutPkts_Type = Counter32
_NsnmpOutPkts_Object = MibScalar
nsnmpOutPkts = _NsnmpOutPkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 20, 4),
    _NsnmpOutPkts_Type()
)
nsnmpOutPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nsnmpOutPkts.setStatus("current")
_NsnmpInTooBigs_Type = Counter32
_NsnmpInTooBigs_Object = MibScalar
nsnmpInTooBigs = _NsnmpInTooBigs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 20, 5),
    _NsnmpInTooBigs_Type()
)
nsnmpInTooBigs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nsnmpInTooBigs.setStatus("current")
_NsnmpInBadValues_Type = Counter32
_NsnmpInBadValues_Object = MibScalar
nsnmpInBadValues = _NsnmpInBadValues_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 20, 6),
    _NsnmpInBadValues_Type()
)
nsnmpInBadValues.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nsnmpInBadValues.setStatus("current")
_NsnmpInGenErrs_Type = Counter32
_NsnmpInGenErrs_Object = MibScalar
nsnmpInGenErrs = _NsnmpInGenErrs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 20, 7),
    _NsnmpInGenErrs_Type()
)
nsnmpInGenErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nsnmpInGenErrs.setStatus("current")
_NsnmpInTotalSetVars_Type = Counter32
_NsnmpInTotalSetVars_Object = MibScalar
nsnmpInTotalSetVars = _NsnmpInTotalSetVars_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 20, 8),
    _NsnmpInTotalSetVars_Type()
)
nsnmpInTotalSetVars.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nsnmpInTotalSetVars.setStatus("current")
_NsnmpInGetNexts_Type = Counter32
_NsnmpInGetNexts_Object = MibScalar
nsnmpInGetNexts = _NsnmpInGetNexts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 20, 9),
    _NsnmpInGetNexts_Type()
)
nsnmpInGetNexts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nsnmpInGetNexts.setStatus("current")
_NsnmpInGetResponses_Type = Counter32
_NsnmpInGetResponses_Object = MibScalar
nsnmpInGetResponses = _NsnmpInGetResponses_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 20, 10),
    _NsnmpInGetResponses_Type()
)
nsnmpInGetResponses.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nsnmpInGetResponses.setStatus("current")
_NsnmpOutTooBigs_Type = Counter32
_NsnmpOutTooBigs_Object = MibScalar
nsnmpOutTooBigs = _NsnmpOutTooBigs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 20, 11),
    _NsnmpOutTooBigs_Type()
)
nsnmpOutTooBigs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nsnmpOutTooBigs.setStatus("current")
_NsnmpOutBadValues_Type = Counter32
_NsnmpOutBadValues_Object = MibScalar
nsnmpOutBadValues = _NsnmpOutBadValues_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 20, 12),
    _NsnmpOutBadValues_Type()
)
nsnmpOutBadValues.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nsnmpOutBadValues.setStatus("current")
_NsnmpOutGenErrs_Type = Counter32
_NsnmpOutGenErrs_Object = MibScalar
nsnmpOutGenErrs = _NsnmpOutGenErrs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 20, 13),
    _NsnmpOutGenErrs_Type()
)
nsnmpOutGenErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nsnmpOutGenErrs.setStatus("current")
_NsnmpOutGetNexts_Type = Counter32
_NsnmpOutGetNexts_Object = MibScalar
nsnmpOutGetNexts = _NsnmpOutGetNexts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 20, 14),
    _NsnmpOutGetNexts_Type()
)
nsnmpOutGetNexts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nsnmpOutGetNexts.setStatus("current")
_NsnmpOutGetResponses_Type = Counter32
_NsnmpOutGetResponses_Object = MibScalar
nsnmpOutGetResponses = _NsnmpOutGetResponses_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 20, 15),
    _NsnmpOutGetResponses_Type()
)
nsnmpOutGetResponses.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nsnmpOutGetResponses.setStatus("current")
_NsnmpSilentDrops_Type = Counter32
_NsnmpSilentDrops_Object = MibScalar
nsnmpSilentDrops = _NsnmpSilentDrops_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 20, 16),
    _NsnmpSilentDrops_Type()
)
nsnmpSilentDrops.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nsnmpSilentDrops.setStatus("current")
_NsnmpInBadVersions_Type = Counter32
_NsnmpInBadVersions_Object = MibScalar
nsnmpInBadVersions = _NsnmpInBadVersions_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 20, 17),
    _NsnmpInBadVersions_Type()
)
nsnmpInBadVersions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nsnmpInBadVersions.setStatus("current")
_NsnmpInBadCommunityUses_Type = Counter32
_NsnmpInBadCommunityUses_Object = MibScalar
nsnmpInBadCommunityUses = _NsnmpInBadCommunityUses_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 20, 18),
    _NsnmpInBadCommunityUses_Type()
)
nsnmpInBadCommunityUses.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nsnmpInBadCommunityUses.setStatus("current")
_NsnmpEnableAuthTraps_Type = Counter32
_NsnmpEnableAuthTraps_Object = MibScalar
nsnmpEnableAuthTraps = _NsnmpEnableAuthTraps_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 20, 19),
    _NsnmpEnableAuthTraps_Type()
)
nsnmpEnableAuthTraps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nsnmpEnableAuthTraps.setStatus("current")
_NsnmpInBadTypes_Type = Counter32
_NsnmpInBadTypes_Object = MibScalar
nsnmpInBadTypes = _NsnmpInBadTypes_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 20, 20),
    _NsnmpInBadTypes_Type()
)
nsnmpInBadTypes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nsnmpInBadTypes.setStatus("current")
_NsnmpInNoSuchNames_Type = Counter32
_NsnmpInNoSuchNames_Object = MibScalar
nsnmpInNoSuchNames = _NsnmpInNoSuchNames_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 20, 21),
    _NsnmpInNoSuchNames_Type()
)
nsnmpInNoSuchNames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nsnmpInNoSuchNames.setStatus("current")
_NsnmpInReadOnlys_Type = Counter32
_NsnmpInReadOnlys_Object = MibScalar
nsnmpInReadOnlys = _NsnmpInReadOnlys_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 20, 22),
    _NsnmpInReadOnlys_Type()
)
nsnmpInReadOnlys.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nsnmpInReadOnlys.setStatus("current")
_NsnmpInTotalReqVars_Type = Counter32
_NsnmpInTotalReqVars_Object = MibScalar
nsnmpInTotalReqVars = _NsnmpInTotalReqVars_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 20, 23),
    _NsnmpInTotalReqVars_Type()
)
nsnmpInTotalReqVars.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nsnmpInTotalReqVars.setStatus("current")
_NsnmpInGetRequests_Type = Counter32
_NsnmpInGetRequests_Object = MibScalar
nsnmpInGetRequests = _NsnmpInGetRequests_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 20, 24),
    _NsnmpInGetRequests_Type()
)
nsnmpInGetRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nsnmpInGetRequests.setStatus("current")
_NsnmpInSetRequests_Type = Counter32
_NsnmpInSetRequests_Object = MibScalar
nsnmpInSetRequests = _NsnmpInSetRequests_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 20, 25),
    _NsnmpInSetRequests_Type()
)
nsnmpInSetRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nsnmpInSetRequests.setStatus("current")
_NsnmpInTraps_Type = Counter32
_NsnmpInTraps_Object = MibScalar
nsnmpInTraps = _NsnmpInTraps_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 20, 26),
    _NsnmpInTraps_Type()
)
nsnmpInTraps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nsnmpInTraps.setStatus("current")
_NsnmpOutNoSuchNames_Type = Counter32
_NsnmpOutNoSuchNames_Object = MibScalar
nsnmpOutNoSuchNames = _NsnmpOutNoSuchNames_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 20, 27),
    _NsnmpOutNoSuchNames_Type()
)
nsnmpOutNoSuchNames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nsnmpOutNoSuchNames.setStatus("current")
_NsnmpOutReadOnlys_Type = Counter32
_NsnmpOutReadOnlys_Object = MibScalar
nsnmpOutReadOnlys = _NsnmpOutReadOnlys_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 20, 28),
    _NsnmpOutReadOnlys_Type()
)
nsnmpOutReadOnlys.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nsnmpOutReadOnlys.setStatus("current")
_NsnmpOutGetRequests_Type = Counter32
_NsnmpOutGetRequests_Object = MibScalar
nsnmpOutGetRequests = _NsnmpOutGetRequests_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 20, 29),
    _NsnmpOutGetRequests_Type()
)
nsnmpOutGetRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nsnmpOutGetRequests.setStatus("current")
_NsnmpOutSetRequests_Type = Counter32
_NsnmpOutSetRequests_Object = MibScalar
nsnmpOutSetRequests = _NsnmpOutSetRequests_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 20, 30),
    _NsnmpOutSetRequests_Type()
)
nsnmpOutSetRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nsnmpOutSetRequests.setStatus("current")
_NsnmpOutTraps_Type = Counter32
_NsnmpOutTraps_Object = MibScalar
nsnmpOutTraps = _NsnmpOutTraps_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 20, 31),
    _NsnmpOutTraps_Type()
)
nsnmpOutTraps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nsnmpOutTraps.setStatus("current")
_NsnmpProxyDrops_Type = Counter32
_NsnmpProxyDrops_Object = MibScalar
nsnmpProxyDrops = _NsnmpProxyDrops_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 20, 32),
    _NsnmpProxyDrops_Type()
)
nsnmpProxyDrops.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nsnmpProxyDrops.setStatus("current")
_MpTcbStats_ObjectIdentity = ObjectIdentity
mpTcbStats = _MpTcbStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 21)
)
_TcpControlBlocksTable_Object = MibTable
tcpControlBlocksTable = _TcpControlBlocksTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 21, 1)
)
if mibBuilder.loadTexts:
    tcpControlBlocksTable.setStatus("current")
_TcpControlBlocksTableEntry_Object = MibTableRow
tcpControlBlocksTableEntry = _TcpControlBlocksTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 21, 1, 1)
)
tcpControlBlocksTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "tcpControlBlocksIndx"),
)
if mibBuilder.loadTexts:
    tcpControlBlocksTableEntry.setStatus("current")
_TcpControlBlocksIndx_Type = Integer32
_TcpControlBlocksIndx_Object = MibTableColumn
tcpControlBlocksIndx = _TcpControlBlocksIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 21, 1, 1, 1),
    _TcpControlBlocksIndx_Type()
)
tcpControlBlocksIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tcpControlBlocksIndx.setStatus("current")
_DestAddr_Type = DisplayString
_DestAddr_Object = MibTableColumn
destAddr = _DestAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 21, 1, 1, 2),
    _DestAddr_Type()
)
destAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    destAddr.setStatus("current")
_RemotePort_Type = Gauge32
_RemotePort_Object = MibTableColumn
remotePort = _RemotePort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 21, 1, 1, 3),
    _RemotePort_Type()
)
remotePort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    remotePort.setStatus("current")
_SourceAddr_Type = DisplayString
_SourceAddr_Object = MibTableColumn
sourceAddr = _SourceAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 21, 1, 1, 4),
    _SourceAddr_Type()
)
sourceAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sourceAddr.setStatus("current")
_LocalPort_Type = Gauge32
_LocalPort_Object = MibTableColumn
localPort = _LocalPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 21, 1, 1, 5),
    _LocalPort_Type()
)
localPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    localPort.setStatus("current")
_State_Type = DisplayString
_State_Object = MibTableColumn
state = _State_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 21, 1, 1, 6),
    _State_Type()
)
state.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    state.setStatus("current")
_PortType_Type = DisplayString
_PortType_Object = MibTableColumn
portType = _PortType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 21, 1, 1, 7),
    _PortType_Type()
)
portType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portType.setStatus("current")
_PortState_Type = DisplayString
_PortState_Object = MibTableColumn
portState = _PortState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 21, 1, 1, 8),
    _PortState_Type()
)
portState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portState.setStatus("current")
_TcpMGMTControlBlocksTable_Object = MibTable
tcpMGMTControlBlocksTable = _TcpMGMTControlBlocksTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 21, 2)
)
if mibBuilder.loadTexts:
    tcpMGMTControlBlocksTable.setStatus("current")
_TcpMGMTTableEntry_Object = MibTableRow
tcpMGMTTableEntry = _TcpMGMTTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 21, 2, 1)
)
tcpMGMTTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "tcpMGMTIndx"),
)
if mibBuilder.loadTexts:
    tcpMGMTTableEntry.setStatus("current")
_TcpMGMTIndx_Type = Integer32
_TcpMGMTIndx_Object = MibTableColumn
tcpMGMTIndx = _TcpMGMTIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 21, 2, 1, 1),
    _TcpMGMTIndx_Type()
)
tcpMGMTIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tcpMGMTIndx.setStatus("current")
_RecvQ_Type = Integer32
_RecvQ_Object = MibTableColumn
recvQ = _RecvQ_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 21, 2, 1, 2),
    _RecvQ_Type()
)
recvQ.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recvQ.setStatus("current")
_SentQ_Type = Integer32
_SentQ_Object = MibTableColumn
sentQ = _SentQ_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 21, 2, 1, 3),
    _SentQ_Type()
)
sentQ.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sentQ.setStatus("current")
_LocalAddress_Type = DisplayString
_LocalAddress_Object = MibTableColumn
localAddress = _LocalAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 21, 2, 1, 4),
    _LocalAddress_Type()
)
localAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    localAddress.setStatus("current")
_ForeignAddress_Type = DisplayString
_ForeignAddress_Object = MibTableColumn
foreignAddress = _ForeignAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 21, 2, 1, 5),
    _ForeignAddress_Type()
)
foreignAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    foreignAddress.setStatus("current")
_StateMgmt_Type = DisplayString
_StateMgmt_Object = MibTableColumn
stateMgmt = _StateMgmt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 21, 2, 1, 6),
    _StateMgmt_Type()
)
stateMgmt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stateMgmt.setStatus("current")
_MpUdpStats_ObjectIdentity = ObjectIdentity
mpUdpStats = _MpUdpStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 22)
)
_UdpControlBlocksTable_Object = MibTable
udpControlBlocksTable = _UdpControlBlocksTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 22, 1)
)
if mibBuilder.loadTexts:
    udpControlBlocksTable.setStatus("current")
_UdpControlBlocksTableEntry_Object = MibTableRow
udpControlBlocksTableEntry = _UdpControlBlocksTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 22, 1, 1)
)
udpControlBlocksTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "udpMpLocalPort"),
)
if mibBuilder.loadTexts:
    udpControlBlocksTableEntry.setStatus("current")
_UdpMpLocalPort_Type = Integer32
_UdpMpLocalPort_Object = MibTableColumn
udpMpLocalPort = _UdpMpLocalPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 22, 1, 1, 1),
    _UdpMpLocalPort_Type()
)
udpMpLocalPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    udpMpLocalPort.setStatus("current")
_UdpMpState_Type = DisplayString
_UdpMpState_Object = MibTableColumn
udpMpState = _UdpMpState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 22, 1, 1, 2),
    _UdpMpState_Type()
)
udpMpState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    udpMpState.setStatus("current")
_UdpMGMTControlBlocksTable_Object = MibTable
udpMGMTControlBlocksTable = _UdpMGMTControlBlocksTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 22, 2)
)
if mibBuilder.loadTexts:
    udpMGMTControlBlocksTable.setStatus("current")
_UdpMGMTTableEntry_Object = MibTableRow
udpMGMTTableEntry = _UdpMGMTTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 22, 2, 1)
)
udpMGMTTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "udpMGMTIndx"),
)
if mibBuilder.loadTexts:
    udpMGMTTableEntry.setStatus("current")
_UdpMGMTIndx_Type = Integer32
_UdpMGMTIndx_Object = MibTableColumn
udpMGMTIndx = _UdpMGMTIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 22, 2, 1, 1),
    _UdpMGMTIndx_Type()
)
udpMGMTIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    udpMGMTIndx.setStatus("current")
_RecvQUdp_Type = Integer32
_RecvQUdp_Object = MibTableColumn
recvQUdp = _RecvQUdp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 22, 2, 1, 2),
    _RecvQUdp_Type()
)
recvQUdp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recvQUdp.setStatus("current")
_SentQUdp_Type = Integer32
_SentQUdp_Object = MibTableColumn
sentQUdp = _SentQUdp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 22, 2, 1, 3),
    _SentQUdp_Type()
)
sentQUdp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sentQUdp.setStatus("current")
_LocalAddressUdp_Type = DisplayString
_LocalAddressUdp_Object = MibTableColumn
localAddressUdp = _LocalAddressUdp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 22, 2, 1, 4),
    _LocalAddressUdp_Type()
)
localAddressUdp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    localAddressUdp.setStatus("current")
_ForeignAddressUdp_Type = DisplayString
_ForeignAddressUdp_Object = MibTableColumn
foreignAddressUdp = _ForeignAddressUdp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 22, 2, 1, 5),
    _ForeignAddressUdp_Type()
)
foreignAddressUdp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    foreignAddressUdp.setStatus("current")
_StateMgmtUdp_Type = DisplayString
_StateMgmtUdp_Object = MibTableColumn
stateMgmtUdp = _StateMgmtUdp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 2, 22, 2, 1, 6),
    _StateMgmtUdp_Type()
)
stateMgmtUdp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stateMgmtUdp.setStatus("current")
_AgentInfo_ObjectIdentity = ObjectIdentity
agentInfo = _AgentInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3)
)
_Hardware_ObjectIdentity = ObjectIdentity
hardware = _Hardware_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 1)
)


class _HwPartNumber_Type(DisplayString):
    """Custom type hwPartNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_HwPartNumber_Type.__name__ = "DisplayString"
_HwPartNumber_Object = MibScalar
hwPartNumber = _HwPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 1, 1),
    _HwPartNumber_Type()
)
hwPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hwPartNumber.setStatus("current")


class _HwRevision_Type(DisplayString):
    """Custom type hwRevision based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_HwRevision_Type.__name__ = "DisplayString"
_HwRevision_Object = MibScalar
hwRevision = _HwRevision_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 1, 2),
    _HwRevision_Type()
)
hwRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hwRevision.setStatus("current")


class _HwFanStatus_Type(DisplayString):
    """Custom type hwFanStatus based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_HwFanStatus_Type.__name__ = "DisplayString"
_HwFanStatus_Object = MibScalar
hwFanStatus = _HwFanStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 1, 12),
    _HwFanStatus_Type()
)
hwFanStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hwFanStatus.setStatus("current")


class _HwFanSpeed_Type(DisplayString):
    """Custom type hwFanSpeed based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_HwFanSpeed_Type.__name__ = "DisplayString"
_HwFanSpeed_Object = MibScalar
hwFanSpeed = _HwFanSpeed_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 1, 13),
    _HwFanSpeed_Type()
)
hwFanSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hwFanSpeed.setStatus("current")


class _HwTempSensors_Type(DisplayString):
    """Custom type hwTempSensors based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_HwTempSensors_Type.__name__ = "DisplayString"
_HwTempSensors_Object = MibScalar
hwTempSensors = _HwTempSensors_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 1, 14),
    _HwTempSensors_Type()
)
hwTempSensors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hwTempSensors.setStatus("current")


class _HwGlobalHealthStatus_Type(Integer32):
    """Custom type hwGlobalHealthStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("noncritical", 2),
          ("critical", 3))
    )


_HwGlobalHealthStatus_Type.__name__ = "Integer32"
_HwGlobalHealthStatus_Object = MibScalar
hwGlobalHealthStatus = _HwGlobalHealthStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 1, 15),
    _HwGlobalHealthStatus_Type()
)
hwGlobalHealthStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hwGlobalHealthStatus.setStatus("current")


class _HwESN_Type(DisplayString):
    """Custom type hwESN based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 12),
    )


_HwESN_Type.__name__ = "DisplayString"
_HwESN_Object = MibScalar
hwESN = _HwESN_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 1, 40),
    _HwESN_Type()
)
hwESN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hwESN.setStatus("current")
_PortInfo_ObjectIdentity = ObjectIdentity
portInfo = _PortInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 2)
)
_PortInfoTable_Object = MibTable
portInfoTable = _PortInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 2, 1)
)
if mibBuilder.loadTexts:
    portInfoTable.setStatus("current")
_PortInfoTableEntry_Object = MibTableRow
portInfoTableEntry = _PortInfoTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 2, 1, 1)
)
portInfoTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "portInfoIndx"),
)
if mibBuilder.loadTexts:
    portInfoTableEntry.setStatus("current")
_PortInfoIndx_Type = PortNumber
_PortInfoIndx_Object = MibTableColumn
portInfoIndx = _PortInfoIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 2, 1, 1, 1),
    _PortInfoIndx_Type()
)
portInfoIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portInfoIndx.setStatus("current")


class _PortInfoSpeed_Type(Integer32):
    """Custom type portInfoSpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("mbs10", 2),
          ("mbs100", 3),
          ("mbs1000", 4),
          ("any", 5),
          ("mbs10000", 6),
          ("mbs40000", 7))
    )


_PortInfoSpeed_Type.__name__ = "Integer32"
_PortInfoSpeed_Object = MibTableColumn
portInfoSpeed = _PortInfoSpeed_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 2, 1, 1, 2),
    _PortInfoSpeed_Type()
)
portInfoSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portInfoSpeed.setStatus("current")


class _PortInfoMode_Type(Integer32):
    """Custom type portInfoMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("full-duplex", 2),
          ("half-duplex", 3))
    )


_PortInfoMode_Type.__name__ = "Integer32"
_PortInfoMode_Object = MibTableColumn
portInfoMode = _PortInfoMode_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 2, 1, 1, 3),
    _PortInfoMode_Type()
)
portInfoMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portInfoMode.setStatus("current")


class _PortInfoFlowCtrl_Type(Integer32):
    """Custom type portInfoFlowCtrl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("transmit", 2),
          ("receive", 3),
          ("both", 4),
          ("none", 5))
    )


_PortInfoFlowCtrl_Type.__name__ = "Integer32"
_PortInfoFlowCtrl_Object = MibTableColumn
portInfoFlowCtrl = _PortInfoFlowCtrl_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 2, 1, 1, 4),
    _PortInfoFlowCtrl_Type()
)
portInfoFlowCtrl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portInfoFlowCtrl.setStatus("current")


class _PortInfoLink_Type(Integer32):
    """Custom type portInfoLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("up", 1),
          ("down", 2),
          ("disabled", 3),
          ("inoperative", 4),
          ("errdisabled", 5))
    )


_PortInfoLink_Type.__name__ = "Integer32"
_PortInfoLink_Object = MibTableColumn
portInfoLink = _PortInfoLink_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 2, 1, 1, 5),
    _PortInfoLink_Type()
)
portInfoLink.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portInfoLink.setStatus("current")


class _PortInfoPhyIfDescr_Type(DisplayString):
    """Custom type portInfoPhyIfDescr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_PortInfoPhyIfDescr_Type.__name__ = "DisplayString"
_PortInfoPhyIfDescr_Object = MibTableColumn
portInfoPhyIfDescr = _PortInfoPhyIfDescr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 2, 1, 1, 6),
    _PortInfoPhyIfDescr_Type()
)
portInfoPhyIfDescr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portInfoPhyIfDescr.setStatus("current")


class _PortInfoPhyIfType_Type(Integer32):
    """Custom type portInfoPhyIfType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("regular1822", 2),
          ("hdh1822", 3),
          ("ddn-x25", 4),
          ("rfc877-x25", 5),
          ("ethernet-csmacd", 6),
          ("iso88023-csmacd", 7),
          ("iso88024-tokenBus", 8),
          ("iso88025-tokenRing", 9),
          ("iso88026-man", 10),
          ("starLan", 11),
          ("proteon-10Mbit", 12),
          ("proteon-80Mbit", 13),
          ("hyperchannel", 14),
          ("fddi", 15),
          ("lapb", 16),
          ("sdlc", 17),
          ("ds1", 18),
          ("e1", 19),
          ("basicISDN", 20),
          ("primaryISDN", 21),
          ("propPointToPointSerial", 22),
          ("ppp", 23),
          ("softwareLoopback", 24),
          ("eon", 25),
          ("ethernet-3Mbit", 26),
          ("nsip", 27),
          ("slip", 28),
          ("ultra", 29),
          ("ds3", 30),
          ("sip", 31),
          ("frame-relay", 32))
    )


_PortInfoPhyIfType_Type.__name__ = "Integer32"
_PortInfoPhyIfType_Object = MibTableColumn
portInfoPhyIfType = _PortInfoPhyIfType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 2, 1, 1, 7),
    _PortInfoPhyIfType_Type()
)
portInfoPhyIfType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portInfoPhyIfType.setStatus("current")
_PortInfoPhyIfMtu_Type = Integer32
_PortInfoPhyIfMtu_Object = MibTableColumn
portInfoPhyIfMtu = _PortInfoPhyIfMtu_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 2, 1, 1, 8),
    _PortInfoPhyIfMtu_Type()
)
portInfoPhyIfMtu.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portInfoPhyIfMtu.setStatus("current")
_PortInfoPhyIfPhysAddress_Type = PhysAddress
_PortInfoPhyIfPhysAddress_Object = MibTableColumn
portInfoPhyIfPhysAddress = _PortInfoPhyIfPhysAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 2, 1, 1, 9),
    _PortInfoPhyIfPhysAddress_Type()
)
portInfoPhyIfPhysAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portInfoPhyIfPhysAddress.setStatus("current")


class _PortInfoPhyIfOperStatus_Type(Integer32):
    """Custom type portInfoPhyIfOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("up", 1),
          ("down", 2),
          ("testing", 3))
    )


_PortInfoPhyIfOperStatus_Type.__name__ = "Integer32"
_PortInfoPhyIfOperStatus_Object = MibTableColumn
portInfoPhyIfOperStatus = _PortInfoPhyIfOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 2, 1, 1, 10),
    _PortInfoPhyIfOperStatus_Type()
)
portInfoPhyIfOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portInfoPhyIfOperStatus.setStatus("current")
_PortInfoPhyIfLastChange_Type = TimeTicks
_PortInfoPhyIfLastChange_Object = MibTableColumn
portInfoPhyIfLastChange = _PortInfoPhyIfLastChange_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 2, 1, 1, 11),
    _PortInfoPhyIfLastChange_Type()
)
portInfoPhyIfLastChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portInfoPhyIfLastChange.setStatus("current")


class _PortInfoLearning_Type(Integer32):
    """Custom type portInfoLearning based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_PortInfoLearning_Type.__name__ = "Integer32"
_PortInfoLearning_Object = MibTableColumn
portInfoLearning = _PortInfoLearning_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 2, 1, 1, 18),
    _PortInfoLearning_Type()
)
portInfoLearning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portInfoLearning.setStatus("current")


class _PortInfoBpduGuard_Type(Integer32):
    """Custom type portInfoBpduGuard based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_PortInfoBpduGuard_Type.__name__ = "Integer32"
_PortInfoBpduGuard_Object = MibTableColumn
portInfoBpduGuard = _PortInfoBpduGuard_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 2, 1, 1, 20),
    _PortInfoBpduGuard_Type()
)
portInfoBpduGuard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portInfoBpduGuard.setStatus("current")
_PortInfoPvid_Type = Unsigned32
_PortInfoPvid_Object = MibTableColumn
portInfoPvid = _PortInfoPvid_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 2, 1, 1, 21),
    _PortInfoPvid_Type()
)
portInfoPvid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portInfoPvid.setStatus("current")


class _PortInfoVlanTag_Type(Integer32):
    """Custom type portInfoVlanTag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("untagged", 0),
          ("tagged", 1))
    )


_PortInfoVlanTag_Type.__name__ = "Integer32"
_PortInfoVlanTag_Object = MibTableColumn
portInfoVlanTag = _PortInfoVlanTag_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 2, 1, 1, 22),
    _PortInfoVlanTag_Type()
)
portInfoVlanTag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portInfoVlanTag.setStatus("current")


class _PortInfoErrDisableRecovery_Type(Integer32):
    """Custom type portInfoErrDisableRecovery based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_PortInfoErrDisableRecovery_Type.__name__ = "Integer32"
_PortInfoErrDisableRecovery_Object = MibTableColumn
portInfoErrDisableRecovery = _PortInfoErrDisableRecovery_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 2, 1, 1, 23),
    _PortInfoErrDisableRecovery_Type()
)
portInfoErrDisableRecovery.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portInfoErrDisableRecovery.setStatus("current")


class _PortInfoErrDisableTimeLeft_Type(Integer32):
    """Custom type portInfoErrDisableTimeLeft based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 86400),
    )


_PortInfoErrDisableTimeLeft_Type.__name__ = "Integer32"
_PortInfoErrDisableTimeLeft_Object = MibTableColumn
portInfoErrDisableTimeLeft = _PortInfoErrDisableTimeLeft_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 2, 1, 1, 24),
    _PortInfoErrDisableTimeLeft_Type()
)
portInfoErrDisableTimeLeft.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portInfoErrDisableTimeLeft.setStatus("current")


class _PortInfoExtGuard_Type(Integer32):
    """Custom type portInfoExtGuard based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no-guard", 0),
          ("loop", 1),
          ("root", 2),
          ("global-loop", 3))
    )


_PortInfoExtGuard_Type.__name__ = "Integer32"
_PortInfoExtGuard_Object = MibTableColumn
portInfoExtGuard = _PortInfoExtGuard_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 2, 1, 1, 25),
    _PortInfoExtGuard_Type()
)
portInfoExtGuard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portInfoExtGuard.setStatus("current")


class _PortInfoLFDState_Type(Integer32):
    """Custom type portInfoLFDState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("yes", 1),
          ("no", 2))
    )


_PortInfoLFDState_Type.__name__ = "Integer32"
_PortInfoLFDState_Object = MibTableColumn
portInfoLFDState = _PortInfoLFDState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 2, 1, 1, 26),
    _PortInfoLFDState_Type()
)
portInfoLFDState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portInfoLFDState.setStatus("current")
_AgDiff_ObjectIdentity = ObjectIdentity
agDiff = _AgDiff_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 4)
)


class _AgDiffState_Type(Integer32):
    """Custom type agDiffState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("diff", 1),
          ("flashdiff", 2),
          ("idle", 3),
          ("inprogress", 4),
          ("complete", 5))
    )


_AgDiffState_Type.__name__ = "Integer32"
_AgDiffState_Object = MibScalar
agDiffState = _AgDiffState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 4, 2),
    _AgDiffState_Type()
)
agDiffState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agDiffState.setStatus("current")
_AgDiffTableSize_Type = Integer32
_AgDiffTableSize_Object = MibScalar
agDiffTableSize = _AgDiffTableSize_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 4, 3),
    _AgDiffTableSize_Type()
)
agDiffTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agDiffTableSize.setStatus("current")
_AgDiffTable_Object = MibTable
agDiffTable = _AgDiffTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 4, 4)
)
if mibBuilder.loadTexts:
    agDiffTable.setStatus("current")
_AgDiffTableEntry_Object = MibTableRow
agDiffTableEntry = _AgDiffTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 4, 4, 1)
)
agDiffTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "agDiffIndex"),
)
if mibBuilder.loadTexts:
    agDiffTableEntry.setStatus("current")
_AgDiffIndex_Type = Integer32
_AgDiffIndex_Object = MibTableColumn
agDiffIndex = _AgDiffIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 4, 4, 1, 1),
    _AgDiffIndex_Type()
)
agDiffIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agDiffIndex.setStatus("current")
_AgDiffString_Type = OctetString
_AgDiffString_Object = MibTableColumn
agDiffString = _AgDiffString_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 4, 4, 1, 2),
    _AgDiffString_Type()
)
agDiffString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agDiffString.setStatus("current")
_AgCfgDump_ObjectIdentity = ObjectIdentity
agCfgDump = _AgCfgDump_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 5)
)


class _AgCfgDumpState_Type(Integer32):
    """Custom type agCfgDumpState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("dump", 1),
          ("idle", 2),
          ("inprogress", 3),
          ("complete", 4))
    )


_AgCfgDumpState_Type.__name__ = "Integer32"
_AgCfgDumpState_Object = MibScalar
agCfgDumpState = _AgCfgDumpState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 5, 2),
    _AgCfgDumpState_Type()
)
agCfgDumpState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agCfgDumpState.setStatus("current")
_AgCfgDumpTableSize_Type = Integer32
_AgCfgDumpTableSize_Object = MibScalar
agCfgDumpTableSize = _AgCfgDumpTableSize_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 5, 3),
    _AgCfgDumpTableSize_Type()
)
agCfgDumpTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCfgDumpTableSize.setStatus("current")
_AgCfgDumpTable_Object = MibTable
agCfgDumpTable = _AgCfgDumpTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 5, 4)
)
if mibBuilder.loadTexts:
    agCfgDumpTable.setStatus("current")
_AgCfgDumpTableEntry_Object = MibTableRow
agCfgDumpTableEntry = _AgCfgDumpTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 5, 4, 1)
)
agCfgDumpTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "agCfgDumpIndex"),
)
if mibBuilder.loadTexts:
    agCfgDumpTableEntry.setStatus("current")
_AgCfgDumpIndex_Type = Integer32
_AgCfgDumpIndex_Object = MibTableColumn
agCfgDumpIndex = _AgCfgDumpIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 5, 4, 1, 1),
    _AgCfgDumpIndex_Type()
)
agCfgDumpIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCfgDumpIndex.setStatus("current")
_AgCfgDumpString_Type = OctetString
_AgCfgDumpString_Object = MibTableColumn
agCfgDumpString = _AgCfgDumpString_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 5, 4, 1, 2),
    _AgCfgDumpString_Type()
)
agCfgDumpString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCfgDumpString.setStatus("current")
_GeaportInfo_ObjectIdentity = ObjectIdentity
geaportInfo = _GeaportInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 9)
)
_GeaportInfoTable_Object = MibTable
geaportInfoTable = _GeaportInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 9, 1)
)
if mibBuilder.loadTexts:
    geaportInfoTable.setStatus("current")
_GeaportInfoTableEntry_Object = MibTableRow
geaportInfoTableEntry = _GeaportInfoTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 9, 1, 1)
)
geaportInfoTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "geaportInfoLogicalIndex"),
)
if mibBuilder.loadTexts:
    geaportInfoTableEntry.setStatus("current")
_GeaportInfoLogicalIndex_Type = PortNumber
_GeaportInfoLogicalIndex_Object = MibTableColumn
geaportInfoLogicalIndex = _GeaportInfoLogicalIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 9, 1, 1, 1),
    _GeaportInfoLogicalIndex_Type()
)
geaportInfoLogicalIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geaportInfoLogicalIndex.setStatus("current")
_GeaportInfoAlias_Type = DisplayString
_GeaportInfoAlias_Object = MibTableColumn
geaportInfoAlias = _GeaportInfoAlias_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 9, 1, 1, 2),
    _GeaportInfoAlias_Type()
)
geaportInfoAlias.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geaportInfoAlias.setStatus("current")
_GeaportInfoPort_Type = Integer32
_GeaportInfoPort_Object = MibTableColumn
geaportInfoPort = _GeaportInfoPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 9, 1, 1, 3),
    _GeaportInfoPort_Type()
)
geaportInfoPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geaportInfoPort.setStatus("current")
_GeaportInfoUnit_Type = Integer32
_GeaportInfoUnit_Object = MibTableColumn
geaportInfoUnit = _GeaportInfoUnit_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 9, 1, 1, 4),
    _GeaportInfoUnit_Type()
)
geaportInfoUnit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geaportInfoUnit.setStatus("current")
_SfpInfo_ObjectIdentity = ObjectIdentity
sfpInfo = _SfpInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 11)
)
_SfpInfoTable_Object = MibTable
sfpInfoTable = _SfpInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 11, 1)
)
if mibBuilder.loadTexts:
    sfpInfoTable.setStatus("current")
_SfpInfoTableEntry_Object = MibTableRow
sfpInfoTableEntry = _SfpInfoTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 11, 1, 1)
)
sfpInfoTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "sfpInfoIndx"),
)
if mibBuilder.loadTexts:
    sfpInfoTableEntry.setStatus("current")
_SfpInfoIndx_Type = PortNumber
_SfpInfoIndx_Object = MibTableColumn
sfpInfoIndx = _SfpInfoIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 11, 1, 1, 1),
    _SfpInfoIndx_Type()
)
sfpInfoIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sfpInfoIndx.setStatus("current")


class _SfpInfoPort_Type(DisplayString):
    """Custom type sfpInfoPort based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 6),
    )


_SfpInfoPort_Type.__name__ = "DisplayString"
_SfpInfoPort_Object = MibTableColumn
sfpInfoPort = _SfpInfoPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 11, 1, 1, 2),
    _SfpInfoPort_Type()
)
sfpInfoPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sfpInfoPort.setStatus("current")


class _SfpInfoDevice_Type(DisplayString):
    """Custom type sfpInfoDevice based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 6),
    )


_SfpInfoDevice_Type.__name__ = "DisplayString"
_SfpInfoDevice_Object = MibTableColumn
sfpInfoDevice = _SfpInfoDevice_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 11, 1, 1, 3),
    _SfpInfoDevice_Type()
)
sfpInfoDevice.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sfpInfoDevice.setStatus("current")


class _SfpInfoTXEnable_Type(Integer32):
    """Custom type sfpInfoTXEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              5)
        )
    )
    namedValues = NamedValues(
        *(("notInstalled", 1),
          ("enabled", 2),
          ("disabled", 3),
          ("notAvailable", 5))
    )


_SfpInfoTXEnable_Type.__name__ = "Integer32"
_SfpInfoTXEnable_Object = MibTableColumn
sfpInfoTXEnable = _SfpInfoTXEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 11, 1, 1, 4),
    _SfpInfoTXEnable_Type()
)
sfpInfoTXEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sfpInfoTXEnable.setStatus("current")


class _SfpInfoRXSignal_Type(Integer32):
    """Custom type sfpInfoRXSignal based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notInstalled", 1),
          ("down", 2),
          ("link", 3),
          ("notAvailable", 4))
    )


_SfpInfoRXSignal_Type.__name__ = "Integer32"
_SfpInfoRXSignal_Object = MibTableColumn
sfpInfoRXSignal = _SfpInfoRXSignal_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 11, 1, 1, 5),
    _SfpInfoRXSignal_Type()
)
sfpInfoRXSignal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sfpInfoRXSignal.setStatus("current")


class _SfpInfoTXFault_Type(Integer32):
    """Custom type sfpInfoTXFault based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notInstalled", 1),
          ("fault", 2),
          ("none", 3),
          ("notAvailable", 4))
    )


_SfpInfoTXFault_Type.__name__ = "Integer32"
_SfpInfoTXFault_Object = MibTableColumn
sfpInfoTXFault = _SfpInfoTXFault_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 11, 1, 1, 6),
    _SfpInfoTXFault_Type()
)
sfpInfoTXFault.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sfpInfoTXFault.setStatus("current")


class _SfpInfoApproved_Type(Integer32):
    """Custom type sfpInfoApproved based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              5)
        )
    )
    namedValues = NamedValues(
        *(("notInstalled", 1),
          ("notApproved", 2),
          ("sfpApproved", 3),
          ("sfpAccepted", 5))
    )


_SfpInfoApproved_Type.__name__ = "Integer32"
_SfpInfoApproved_Object = MibTableColumn
sfpInfoApproved = _SfpInfoApproved_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 11, 1, 1, 7),
    _SfpInfoApproved_Type()
)
sfpInfoApproved.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sfpInfoApproved.setStatus("current")


class _SfpInfoVendor_Type(DisplayString):
    """Custom type sfpInfoVendor based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_SfpInfoVendor_Type.__name__ = "DisplayString"
_SfpInfoVendor_Object = MibTableColumn
sfpInfoVendor = _SfpInfoVendor_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 11, 1, 1, 8),
    _SfpInfoVendor_Type()
)
sfpInfoVendor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sfpInfoVendor.setStatus("current")


class _SfpInfoSerial_Type(DisplayString):
    """Custom type sfpInfoSerial based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_SfpInfoSerial_Type.__name__ = "DisplayString"
_SfpInfoSerial_Object = MibTableColumn
sfpInfoSerial = _SfpInfoSerial_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 11, 1, 1, 9),
    _SfpInfoSerial_Type()
)
sfpInfoSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sfpInfoSerial.setStatus("current")


class _SfpInfoPartNumber_Type(DisplayString):
    """Custom type sfpInfoPartNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_SfpInfoPartNumber_Type.__name__ = "DisplayString"
_SfpInfoPartNumber_Object = MibTableColumn
sfpInfoPartNumber = _SfpInfoPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 11, 1, 1, 10),
    _SfpInfoPartNumber_Type()
)
sfpInfoPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sfpInfoPartNumber.setStatus("current")


class _SfpInfoRevision_Type(DisplayString):
    """Custom type sfpInfoRevision based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_SfpInfoRevision_Type.__name__ = "DisplayString"
_SfpInfoRevision_Object = MibTableColumn
sfpInfoRevision = _SfpInfoRevision_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 11, 1, 1, 11),
    _SfpInfoRevision_Type()
)
sfpInfoRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sfpInfoRevision.setStatus("current")


class _SfpInfoVoltage_Type(DisplayString):
    """Custom type sfpInfoVoltage based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_SfpInfoVoltage_Type.__name__ = "DisplayString"
_SfpInfoVoltage_Object = MibTableColumn
sfpInfoVoltage = _SfpInfoVoltage_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 11, 1, 1, 12),
    _SfpInfoVoltage_Type()
)
sfpInfoVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sfpInfoVoltage.setStatus("current")


class _SfpInfoTemperature_Type(DisplayString):
    """Custom type sfpInfoTemperature based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_SfpInfoTemperature_Type.__name__ = "DisplayString"
_SfpInfoTemperature_Object = MibTableColumn
sfpInfoTemperature = _SfpInfoTemperature_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 11, 1, 1, 13),
    _SfpInfoTemperature_Type()
)
sfpInfoTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sfpInfoTemperature.setStatus("current")


class _SfpInfoWaveLength_Type(DisplayString):
    """Custom type sfpInfoWaveLength based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_SfpInfoWaveLength_Type.__name__ = "DisplayString"
_SfpInfoWaveLength_Object = MibTableColumn
sfpInfoWaveLength = _SfpInfoWaveLength_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 11, 1, 1, 14),
    _SfpInfoWaveLength_Type()
)
sfpInfoWaveLength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sfpInfoWaveLength.setStatus("current")
_AgVMGroupInfo_ObjectIdentity = ObjectIdentity
agVMGroupInfo = _AgVMGroupInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 12)
)
_VmGroupInfoTbl_Object = MibTable
vmGroupInfoTbl = _VmGroupInfoTbl_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 12, 1)
)
if mibBuilder.loadTexts:
    vmGroupInfoTbl.setStatus("current")
_VmGroupInfolistEntry_Object = MibTableRow
vmGroupInfolistEntry = _VmGroupInfolistEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 12, 1, 1)
)
vmGroupInfolistEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vmGroupInfoIdx"),
)
if mibBuilder.loadTexts:
    vmGroupInfolistEntry.setStatus("current")
_VmGroupInfoIdx_Type = Unsigned32
_VmGroupInfoIdx_Object = MibTableColumn
vmGroupInfoIdx = _VmGroupInfoIdx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 12, 1, 1, 1),
    _VmGroupInfoIdx_Type()
)
vmGroupInfoIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmGroupInfoIdx.setStatus("current")
_VmGroupInfoMac_Type = PhysAddress
_VmGroupInfoMac_Object = MibTableColumn
vmGroupInfoMac = _VmGroupInfoMac_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 12, 1, 1, 2),
    _VmGroupInfoMac_Type()
)
vmGroupInfoMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmGroupInfoMac.setStatus("current")
_VmGroupInfoIP_Type = IpAddress
_VmGroupInfoIP_Object = MibTableColumn
vmGroupInfoIP = _VmGroupInfoIP_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 12, 1, 1, 3),
    _VmGroupInfoIP_Type()
)
vmGroupInfoIP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmGroupInfoIP.setStatus("current")
_VmGroupInfoPort_Type = PortNumber
_VmGroupInfoPort_Object = MibTableColumn
vmGroupInfoPort = _VmGroupInfoPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 12, 1, 1, 4),
    _VmGroupInfoPort_Type()
)
vmGroupInfoPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmGroupInfoPort.setStatus("current")
_VmGroupInfoGroup_Type = Unsigned32
_VmGroupInfoGroup_Object = MibTableColumn
vmGroupInfoGroup = _VmGroupInfoGroup_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 12, 1, 1, 5),
    _VmGroupInfoGroup_Type()
)
vmGroupInfoGroup.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmGroupInfoGroup.setStatus("current")
_VmGroupInfoVlan_Type = Unsigned32
_VmGroupInfoVlan_Object = MibTableColumn
vmGroupInfoVlan = _VmGroupInfoVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 12, 1, 1, 6),
    _VmGroupInfoVlan_Type()
)
vmGroupInfoVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmGroupInfoVlan.setStatus("current")
_VmGroupInfoIsESXSvcCon_Type = Unsigned32
_VmGroupInfoIsESXSvcCon_Object = MibTableColumn
vmGroupInfoIsESXSvcCon = _VmGroupInfoIsESXSvcCon_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 12, 1, 1, 7),
    _VmGroupInfoIsESXSvcCon_Type()
)
vmGroupInfoIsESXSvcCon.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmGroupInfoIsESXSvcCon.setStatus("current")
_VmGroupInfoIsVMK_Type = Unsigned32
_VmGroupInfoIsVMK_Object = MibTableColumn
vmGroupInfoIsVMK = _VmGroupInfoIsVMK_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 12, 1, 1, 8),
    _VmGroupInfoIsVMK_Type()
)
vmGroupInfoIsVMK.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmGroupInfoIsVMK.setStatus("current")
_VmGroupInfoName_Type = DisplayString
_VmGroupInfoName_Object = MibTableColumn
vmGroupInfoName = _VmGroupInfoName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 12, 1, 1, 9),
    _VmGroupInfoName_Type()
)
vmGroupInfoName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmGroupInfoName.setStatus("current")
_VmGroupInfoUUID_Type = DisplayString
_VmGroupInfoUUID_Object = MibTableColumn
vmGroupInfoUUID = _VmGroupInfoUUID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 12, 1, 1, 10),
    _VmGroupInfoUUID_Type()
)
vmGroupInfoUUID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmGroupInfoUUID.setStatus("current")
_VmGroupInfoVSwitch_Type = DisplayString
_VmGroupInfoVSwitch_Object = MibTableColumn
vmGroupInfoVSwitch = _VmGroupInfoVSwitch_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 12, 1, 1, 11),
    _VmGroupInfoVSwitch_Type()
)
vmGroupInfoVSwitch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmGroupInfoVSwitch.setStatus("current")
_VmGroupInfoPortGroup_Type = DisplayString
_VmGroupInfoPortGroup_Object = MibTableColumn
vmGroupInfoPortGroup = _VmGroupInfoPortGroup_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 12, 1, 1, 12),
    _VmGroupInfoPortGroup_Type()
)
vmGroupInfoPortGroup.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmGroupInfoPortGroup.setStatus("current")
_VmGroupInfoHost_Type = DisplayString
_VmGroupInfoHost_Object = MibTableColumn
vmGroupInfoHost = _VmGroupInfoHost_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 12, 1, 1, 13),
    _VmGroupInfoHost_Type()
)
vmGroupInfoHost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmGroupInfoHost.setStatus("current")
_AccessInfo_ObjectIdentity = ObjectIdentity
accessInfo = _AccessInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 13)
)


class _AccessInfoClearAllUserFailAttempts_Type(Integer32):
    """Custom type accessInfoClearAllUserFailAttempts based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_AccessInfoClearAllUserFailAttempts_Type.__name__ = "Integer32"
_AccessInfoClearAllUserFailAttempts_Object = MibScalar
accessInfoClearAllUserFailAttempts = _AccessInfoClearAllUserFailAttempts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 13, 1),
    _AccessInfoClearAllUserFailAttempts_Type()
)
accessInfoClearAllUserFailAttempts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    accessInfoClearAllUserFailAttempts.setStatus("current")


class _AccessInfoClearAllUserLocks_Type(Integer32):
    """Custom type accessInfoClearAllUserLocks based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_AccessInfoClearAllUserLocks_Type.__name__ = "Integer32"
_AccessInfoClearAllUserLocks_Object = MibScalar
accessInfoClearAllUserLocks = _AccessInfoClearAllUserLocks_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 13, 2),
    _AccessInfoClearAllUserLocks_Type()
)
accessInfoClearAllUserLocks.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    accessInfoClearAllUserLocks.setStatus("current")
_AccessUserInfoTable_Object = MibTable
accessUserInfoTable = _AccessUserInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 13, 3)
)
if mibBuilder.loadTexts:
    accessUserInfoTable.setStatus("current")
_AccessUserInfoTableEntry_Object = MibTableRow
accessUserInfoTableEntry = _AccessUserInfoTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 13, 3, 1)
)
accessUserInfoTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "accessUserInfoIndex"),
)
if mibBuilder.loadTexts:
    accessUserInfoTableEntry.setStatus("current")
_AccessUserInfoIndex_Type = Integer32
_AccessUserInfoIndex_Object = MibTableColumn
accessUserInfoIndex = _AccessUserInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 13, 3, 1, 1),
    _AccessUserInfoIndex_Type()
)
accessUserInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    accessUserInfoIndex.setStatus("current")


class _AccessUserInfoLockState_Type(Integer32):
    """Custom type accessUserInfoLockState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unlocked", 1),
          ("locked", 2))
    )


_AccessUserInfoLockState_Type.__name__ = "Integer32"
_AccessUserInfoLockState_Object = MibTableColumn
accessUserInfoLockState = _AccessUserInfoLockState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 13, 3, 1, 2),
    _AccessUserInfoLockState_Type()
)
accessUserInfoLockState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    accessUserInfoLockState.setStatus("current")


class _AccessUserInfoClearFailAttempts_Type(Integer32):
    """Custom type accessUserInfoClearFailAttempts based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_AccessUserInfoClearFailAttempts_Type.__name__ = "Integer32"
_AccessUserInfoClearFailAttempts_Object = MibTableColumn
accessUserInfoClearFailAttempts = _AccessUserInfoClearFailAttempts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 13, 3, 1, 3),
    _AccessUserInfoClearFailAttempts_Type()
)
accessUserInfoClearFailAttempts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    accessUserInfoClearFailAttempts.setStatus("current")


class _AccessUserInfoClearLock_Type(Integer32):
    """Custom type accessUserInfoClearLock based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_AccessUserInfoClearLock_Type.__name__ = "Integer32"
_AccessUserInfoClearLock_Object = MibTableColumn
accessUserInfoClearLock = _AccessUserInfoClearLock_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 3, 13, 3, 1, 4),
    _AccessUserInfoClearLock_Type()
)
accessUserInfoClearLock.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    accessUserInfoClearLock.setStatus("current")
_AgentOper_ObjectIdentity = ObjectIdentity
agentOper = _AgentOper_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 4)
)
_AgPortOperTable_Object = MibTable
agPortOperTable = _AgPortOperTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 4, 1)
)
if mibBuilder.loadTexts:
    agPortOperTable.setStatus("current")
_AgPortOperTableEntry_Object = MibTableRow
agPortOperTableEntry = _AgPortOperTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 4, 1, 1)
)
agPortOperTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "portOperIdx"),
)
if mibBuilder.loadTexts:
    agPortOperTableEntry.setStatus("current")
_PortOperIdx_Type = PortNumber
_PortOperIdx_Object = MibTableColumn
portOperIdx = _PortOperIdx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 4, 1, 1, 1),
    _PortOperIdx_Type()
)
portOperIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portOperIdx.setStatus("current")


class _PortOperState_Type(Integer32):
    """Custom type portOperState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_PortOperState_Type.__name__ = "Integer32"
_PortOperState_Object = MibTableColumn
portOperState = _PortOperState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 4, 1, 1, 2),
    _PortOperState_Type()
)
portOperState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portOperState.setStatus("current")


class _PortOperRmon_Type(Integer32):
    """Custom type portOperRmon based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_PortOperRmon_Type.__name__ = "Integer32"
_PortOperRmon_Object = MibTableColumn
portOperRmon = _PortOperRmon_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 4, 1, 1, 3),
    _PortOperRmon_Type()
)
portOperRmon.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portOperRmon.setStatus("current")


class _PortOperLearning_Type(Integer32):
    """Custom type portOperLearning based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_PortOperLearning_Type.__name__ = "Integer32"
_PortOperLearning_Object = MibTableColumn
portOperLearning = _PortOperLearning_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 4, 1, 1, 4),
    _PortOperLearning_Type()
)
portOperLearning.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portOperLearning.setStatus("current")
_AgNTPOper_ObjectIdentity = ObjectIdentity
agNTPOper = _AgNTPOper_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 4, 2)
)


class _NtpOperSendReq_Type(Integer32):
    """Custom type ntpOperSendReq based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_NtpOperSendReq_Type.__name__ = "Integer32"
_NtpOperSendReq_Object = MibScalar
ntpOperSendReq = _NtpOperSendReq_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 4, 2, 1),
    _NtpOperSendReq_Type()
)
ntpOperSendReq.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ntpOperSendReq.setStatus("current")
_PortOperDot1xTable_Object = MibTable
portOperDot1xTable = _PortOperDot1xTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 4, 4)
)
if mibBuilder.loadTexts:
    portOperDot1xTable.setStatus("current")
_PortOperDot1xTableEntry_Object = MibTableRow
portOperDot1xTableEntry = _PortOperDot1xTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 4, 4, 1)
)
portOperDot1xTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "portOperDot1xIndx"),
)
if mibBuilder.loadTexts:
    portOperDot1xTableEntry.setStatus("current")
_PortOperDot1xIndx_Type = PortNumber
_PortOperDot1xIndx_Object = MibTableColumn
portOperDot1xIndx = _PortOperDot1xIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 4, 4, 1, 1),
    _PortOperDot1xIndx_Type()
)
portOperDot1xIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portOperDot1xIndx.setStatus("current")


class _PortOperDot1xReset_Type(Integer32):
    """Custom type portOperDot1xReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_PortOperDot1xReset_Type.__name__ = "Integer32"
_PortOperDot1xReset_Object = MibTableColumn
portOperDot1xReset = _PortOperDot1xReset_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 4, 4, 1, 2),
    _PortOperDot1xReset_Type()
)
portOperDot1xReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portOperDot1xReset.setStatus("current")


class _PortOperDot1xReauth_Type(Integer32):
    """Custom type portOperDot1xReauth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_PortOperDot1xReauth_Type.__name__ = "Integer32"
_PortOperDot1xReauth_Object = MibTableColumn
portOperDot1xReauth = _PortOperDot1xReauth_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 4, 4, 1, 3),
    _PortOperDot1xReauth_Type()
)
portOperDot1xReauth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portOperDot1xReauth.setStatus("current")
_AgSrvLedOper_ObjectIdentity = ObjectIdentity
agSrvLedOper = _AgSrvLedOper_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 4, 5)
)


class _SrvLedOper_Type(Integer32):
    """Custom type srvLedOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 0),
          ("disabled", 1))
    )


_SrvLedOper_Type.__name__ = "Integer32"
_SrvLedOper_Object = MibScalar
srvLedOper = _SrvLedOper_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 1, 4, 5, 1),
    _SrvLedOper_Type()
)
srvLedOper.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    srvLedOper.setStatus("current")
_Layer2_ObjectIdentity = ObjectIdentity
layer2 = _Layer2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2)
)
_Layer2Configs_ObjectIdentity = ObjectIdentity
layer2Configs = _Layer2Configs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1)
)
_Vlan_ObjectIdentity = ObjectIdentity
vlan = _Vlan_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1)
)
_VlanMaxEnt_Type = Integer32
_VlanMaxEnt_Object = MibScalar
vlanMaxEnt = _VlanMaxEnt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 1),
    _VlanMaxEnt_Type()
)
vlanMaxEnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanMaxEnt.setStatus("current")
_VlanCurCfgTable_Object = MibTable
vlanCurCfgTable = _VlanCurCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 2)
)
if mibBuilder.loadTexts:
    vlanCurCfgTable.setStatus("current")
_VlanCurCfgTableEntry_Object = MibTableRow
vlanCurCfgTableEntry = _VlanCurCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 2, 1)
)
vlanCurCfgTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vlanCurCfgVlanId"),
)
if mibBuilder.loadTexts:
    vlanCurCfgTableEntry.setStatus("current")
_VlanCurCfgVlanId_Type = Integer32
_VlanCurCfgVlanId_Object = MibTableColumn
vlanCurCfgVlanId = _VlanCurCfgVlanId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 2, 1, 1),
    _VlanCurCfgVlanId_Type()
)
vlanCurCfgVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanCurCfgVlanId.setStatus("current")
_VlanCurCfgPorts_Type = OctetString
_VlanCurCfgPorts_Object = MibTableColumn
vlanCurCfgPorts = _VlanCurCfgPorts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 2, 1, 2),
    _VlanCurCfgPorts_Type()
)
vlanCurCfgPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanCurCfgPorts.setStatus("current")


class _VlanCurCfgState_Type(Integer32):
    """Custom type vlanCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_VlanCurCfgState_Type.__name__ = "Integer32"
_VlanCurCfgState_Object = MibTableColumn
vlanCurCfgState = _VlanCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 2, 1, 3),
    _VlanCurCfgState_Type()
)
vlanCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanCurCfgState.setStatus("current")
_VlanCurCfgStg_Type = Integer32
_VlanCurCfgStg_Object = MibTableColumn
vlanCurCfgStg = _VlanCurCfgStg_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 2, 1, 5),
    _VlanCurCfgStg_Type()
)
vlanCurCfgStg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanCurCfgStg.setStatus("current")


class _VlanCurCfgVlanName_Type(DisplayString):
    """Custom type vlanCurCfgVlanName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_VlanCurCfgVlanName_Type.__name__ = "DisplayString"
_VlanCurCfgVlanName_Object = MibTableColumn
vlanCurCfgVlanName = _VlanCurCfgVlanName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 2, 1, 9),
    _VlanCurCfgVlanName_Type()
)
vlanCurCfgVlanName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanCurCfgVlanName.setStatus("current")


class _VlanCurCfgPrVlanType_Type(Integer32):
    """Custom type vlanCurCfgPrVlanType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("primary", 1),
          ("isolated", 2),
          ("community", 3))
    )


_VlanCurCfgPrVlanType_Type.__name__ = "Integer32"
_VlanCurCfgPrVlanType_Object = MibTableColumn
vlanCurCfgPrVlanType = _VlanCurCfgPrVlanType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 2, 1, 10),
    _VlanCurCfgPrVlanType_Type()
)
vlanCurCfgPrVlanType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanCurCfgPrVlanType.setStatus("current")
_VlanCurCfgPrVlanMapPriId_Type = Integer32
_VlanCurCfgPrVlanMapPriId_Object = MibTableColumn
vlanCurCfgPrVlanMapPriId = _VlanCurCfgPrVlanMapPriId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 2, 1, 11),
    _VlanCurCfgPrVlanMapPriId_Type()
)
vlanCurCfgPrVlanMapPriId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanCurCfgPrVlanMapPriId.setStatus("current")
_VlanNewCfgTable_Object = MibTable
vlanNewCfgTable = _VlanNewCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 3)
)
if mibBuilder.loadTexts:
    vlanNewCfgTable.setStatus("current")
_VlanNewCfgTableEntry_Object = MibTableRow
vlanNewCfgTableEntry = _VlanNewCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 3, 1)
)
vlanNewCfgTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vlanNewCfgVlanId"),
)
if mibBuilder.loadTexts:
    vlanNewCfgTableEntry.setStatus("current")
_VlanNewCfgVlanId_Type = Integer32
_VlanNewCfgVlanId_Object = MibTableColumn
vlanNewCfgVlanId = _VlanNewCfgVlanId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 3, 1, 1),
    _VlanNewCfgVlanId_Type()
)
vlanNewCfgVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanNewCfgVlanId.setStatus("current")


class _VlanNewCfgVlanName_Type(DisplayString):
    """Custom type vlanNewCfgVlanName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_VlanNewCfgVlanName_Type.__name__ = "DisplayString"
_VlanNewCfgVlanName_Object = MibTableColumn
vlanNewCfgVlanName = _VlanNewCfgVlanName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 3, 1, 2),
    _VlanNewCfgVlanName_Type()
)
vlanNewCfgVlanName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vlanNewCfgVlanName.setStatus("current")
_VlanNewCfgPorts_Type = OctetString
_VlanNewCfgPorts_Object = MibTableColumn
vlanNewCfgPorts = _VlanNewCfgPorts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 3, 1, 3),
    _VlanNewCfgPorts_Type()
)
vlanNewCfgPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanNewCfgPorts.setStatus("current")


class _VlanNewCfgState_Type(Integer32):
    """Custom type vlanNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_VlanNewCfgState_Type.__name__ = "Integer32"
_VlanNewCfgState_Object = MibTableColumn
vlanNewCfgState = _VlanNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 3, 1, 4),
    _VlanNewCfgState_Type()
)
vlanNewCfgState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vlanNewCfgState.setStatus("current")
_VlanNewCfgAddPort_Type = PortNumber
_VlanNewCfgAddPort_Object = MibTableColumn
vlanNewCfgAddPort = _VlanNewCfgAddPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 3, 1, 5),
    _VlanNewCfgAddPort_Type()
)
vlanNewCfgAddPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vlanNewCfgAddPort.setStatus("current")
_VlanNewCfgRemovePort_Type = PortNumber
_VlanNewCfgRemovePort_Object = MibTableColumn
vlanNewCfgRemovePort = _VlanNewCfgRemovePort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 3, 1, 6),
    _VlanNewCfgRemovePort_Type()
)
vlanNewCfgRemovePort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vlanNewCfgRemovePort.setStatus("current")


class _VlanNewCfgDelete_Type(Integer32):
    """Custom type vlanNewCfgDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_VlanNewCfgDelete_Type.__name__ = "Integer32"
_VlanNewCfgDelete_Object = MibTableColumn
vlanNewCfgDelete = _VlanNewCfgDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 3, 1, 7),
    _VlanNewCfgDelete_Type()
)
vlanNewCfgDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vlanNewCfgDelete.setStatus("current")
_VlanNewCfgStg_Type = Integer32
_VlanNewCfgStg_Object = MibTableColumn
vlanNewCfgStg = _VlanNewCfgStg_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 3, 1, 9),
    _VlanNewCfgStg_Type()
)
vlanNewCfgStg.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vlanNewCfgStg.setStatus("current")


class _VlanNewCfgPrVlanType_Type(Integer32):
    """Custom type vlanNewCfgPrVlanType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("primary", 1),
          ("isolated", 2),
          ("community", 3))
    )


_VlanNewCfgPrVlanType_Type.__name__ = "Integer32"
_VlanNewCfgPrVlanType_Object = MibTableColumn
vlanNewCfgPrVlanType = _VlanNewCfgPrVlanType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 3, 1, 13),
    _VlanNewCfgPrVlanType_Type()
)
vlanNewCfgPrVlanType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanNewCfgPrVlanType.setStatus("current")
_VlanNewCfgPrVlanMapPriId_Type = Integer32
_VlanNewCfgPrVlanMapPriId_Object = MibTableColumn
vlanNewCfgPrVlanMapPriId = _VlanNewCfgPrVlanMapPriId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 3, 1, 14),
    _VlanNewCfgPrVlanMapPriId_Type()
)
vlanNewCfgPrVlanMapPriId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanNewCfgPrVlanMapPriId.setStatus("current")
_VlanMaxVlanID_Type = Integer32
_VlanMaxVlanID_Object = MibScalar
vlanMaxVlanID = _VlanMaxVlanID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 4),
    _VlanMaxVlanID_Type()
)
vlanMaxVlanID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanMaxVlanID.setStatus("current")
_PvlanCurCfgTable_Object = MibTable
pvlanCurCfgTable = _PvlanCurCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 5)
)
if mibBuilder.loadTexts:
    pvlanCurCfgTable.setStatus("current")
_PvlanCurCfgTableEntry_Object = MibTableRow
pvlanCurCfgTableEntry = _PvlanCurCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 5, 1)
)
pvlanCurCfgTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "pvlanCurCfgVlanId"),
    (0, "IBM-GbTOR-G8264T-MIB", "pvlanCurCfgPvlanId"),
)
if mibBuilder.loadTexts:
    pvlanCurCfgTableEntry.setStatus("current")
_PvlanCurCfgVlanId_Type = Integer32
_PvlanCurCfgVlanId_Object = MibTableColumn
pvlanCurCfgVlanId = _PvlanCurCfgVlanId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 5, 1, 1),
    _PvlanCurCfgVlanId_Type()
)
pvlanCurCfgVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvlanCurCfgVlanId.setStatus("current")
_PvlanCurCfgPvlanId_Type = Integer32
_PvlanCurCfgPvlanId_Object = MibTableColumn
pvlanCurCfgPvlanId = _PvlanCurCfgPvlanId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 5, 1, 2),
    _PvlanCurCfgPvlanId_Type()
)
pvlanCurCfgPvlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvlanCurCfgPvlanId.setStatus("current")


class _PvlanCurCfgPvlanFrameType_Type(Integer32):
    """Custom type pvlanCurCfgPvlanFrameType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("ethernet2", 1),
          ("snap", 2),
          ("llc", 3))
    )


_PvlanCurCfgPvlanFrameType_Type.__name__ = "Integer32"
_PvlanCurCfgPvlanFrameType_Object = MibTableColumn
pvlanCurCfgPvlanFrameType = _PvlanCurCfgPvlanFrameType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 5, 1, 3),
    _PvlanCurCfgPvlanFrameType_Type()
)
pvlanCurCfgPvlanFrameType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvlanCurCfgPvlanFrameType.setStatus("current")
_PvlanCurCfgPvlanEtherType_Type = DisplayString
_PvlanCurCfgPvlanEtherType_Object = MibTableColumn
pvlanCurCfgPvlanEtherType = _PvlanCurCfgPvlanEtherType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 5, 1, 4),
    _PvlanCurCfgPvlanEtherType_Type()
)
pvlanCurCfgPvlanEtherType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvlanCurCfgPvlanEtherType.setStatus("current")
_PvlanCurCfgPvlanPorts_Type = OctetString
_PvlanCurCfgPvlanPorts_Object = MibTableColumn
pvlanCurCfgPvlanPorts = _PvlanCurCfgPvlanPorts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 5, 1, 5),
    _PvlanCurCfgPvlanPorts_Type()
)
pvlanCurCfgPvlanPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvlanCurCfgPvlanPorts.setStatus("current")
_PvlanCurCfgPvlanPrio_Type = Integer32
_PvlanCurCfgPvlanPrio_Object = MibTableColumn
pvlanCurCfgPvlanPrio = _PvlanCurCfgPvlanPrio_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 5, 1, 6),
    _PvlanCurCfgPvlanPrio_Type()
)
pvlanCurCfgPvlanPrio.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvlanCurCfgPvlanPrio.setStatus("current")


class _PvlanCurCfgPvlanState_Type(Integer32):
    """Custom type pvlanCurCfgPvlanState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_PvlanCurCfgPvlanState_Type.__name__ = "Integer32"
_PvlanCurCfgPvlanState_Object = MibTableColumn
pvlanCurCfgPvlanState = _PvlanCurCfgPvlanState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 5, 1, 7),
    _PvlanCurCfgPvlanState_Type()
)
pvlanCurCfgPvlanState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvlanCurCfgPvlanState.setStatus("current")
_PvlanCurCfgPvlanTagPorts_Type = OctetString
_PvlanCurCfgPvlanTagPorts_Object = MibTableColumn
pvlanCurCfgPvlanTagPorts = _PvlanCurCfgPvlanTagPorts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 5, 1, 8),
    _PvlanCurCfgPvlanTagPorts_Type()
)
pvlanCurCfgPvlanTagPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvlanCurCfgPvlanTagPorts.setStatus("current")


class _PvlanCurCfgPvlanPredefProto_Type(Integer32):
    """Custom type pvlanCurCfgPvlanPredefProto based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("userDefined", 0),
          ("decEther2", 1),
          ("ipv4Ether2", 2),
          ("ipv6Ether2", 3),
          ("ipx802dot2", 4),
          ("ipx802dot3", 5),
          ("ipxEther2", 6),
          ("ipxSnap", 7),
          ("netbios", 8),
          ("rarpEther2", 9),
          ("sna802dot2", 10),
          ("snaEther2", 11),
          ("vinesEther2", 12),
          ("xnsEther2", 13))
    )


_PvlanCurCfgPvlanPredefProto_Type.__name__ = "Integer32"
_PvlanCurCfgPvlanPredefProto_Object = MibTableColumn
pvlanCurCfgPvlanPredefProto = _PvlanCurCfgPvlanPredefProto_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 5, 1, 9),
    _PvlanCurCfgPvlanPredefProto_Type()
)
pvlanCurCfgPvlanPredefProto.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvlanCurCfgPvlanPredefProto.setStatus("current")
_PvlanNewCfgTable_Object = MibTable
pvlanNewCfgTable = _PvlanNewCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 6)
)
if mibBuilder.loadTexts:
    pvlanNewCfgTable.setStatus("current")
_PvlanNewCfgTableEntry_Object = MibTableRow
pvlanNewCfgTableEntry = _PvlanNewCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 6, 1)
)
pvlanNewCfgTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "pvlanNewCfgVlanId"),
    (0, "IBM-GbTOR-G8264T-MIB", "pvlanNewCfgPvlanId"),
)
if mibBuilder.loadTexts:
    pvlanNewCfgTableEntry.setStatus("current")
_PvlanNewCfgVlanId_Type = Integer32
_PvlanNewCfgVlanId_Object = MibTableColumn
pvlanNewCfgVlanId = _PvlanNewCfgVlanId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 6, 1, 1),
    _PvlanNewCfgVlanId_Type()
)
pvlanNewCfgVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvlanNewCfgVlanId.setStatus("current")
_PvlanNewCfgPvlanId_Type = Integer32
_PvlanNewCfgPvlanId_Object = MibTableColumn
pvlanNewCfgPvlanId = _PvlanNewCfgPvlanId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 6, 1, 2),
    _PvlanNewCfgPvlanId_Type()
)
pvlanNewCfgPvlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvlanNewCfgPvlanId.setStatus("current")


class _PvlanNewCfgPvlanFrameType_Type(Integer32):
    """Custom type pvlanNewCfgPvlanFrameType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("ethernet2", 1),
          ("snap", 2),
          ("llc", 3))
    )


_PvlanNewCfgPvlanFrameType_Type.__name__ = "Integer32"
_PvlanNewCfgPvlanFrameType_Object = MibTableColumn
pvlanNewCfgPvlanFrameType = _PvlanNewCfgPvlanFrameType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 6, 1, 3),
    _PvlanNewCfgPvlanFrameType_Type()
)
pvlanNewCfgPvlanFrameType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvlanNewCfgPvlanFrameType.setStatus("current")
_PvlanNewCfgPvlanEtherType_Type = DisplayString
_PvlanNewCfgPvlanEtherType_Object = MibTableColumn
pvlanNewCfgPvlanEtherType = _PvlanNewCfgPvlanEtherType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 6, 1, 4),
    _PvlanNewCfgPvlanEtherType_Type()
)
pvlanNewCfgPvlanEtherType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvlanNewCfgPvlanEtherType.setStatus("current")
_PvlanNewCfgPvlanAddPort_Type = PortNumber
_PvlanNewCfgPvlanAddPort_Object = MibTableColumn
pvlanNewCfgPvlanAddPort = _PvlanNewCfgPvlanAddPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 6, 1, 5),
    _PvlanNewCfgPvlanAddPort_Type()
)
pvlanNewCfgPvlanAddPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvlanNewCfgPvlanAddPort.setStatus("current")
_PvlanNewCfgPvlanRemovePort_Type = PortNumber
_PvlanNewCfgPvlanRemovePort_Object = MibTableColumn
pvlanNewCfgPvlanRemovePort = _PvlanNewCfgPvlanRemovePort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 6, 1, 6),
    _PvlanNewCfgPvlanRemovePort_Type()
)
pvlanNewCfgPvlanRemovePort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvlanNewCfgPvlanRemovePort.setStatus("current")
_PvlanNewCfgPvlanPrio_Type = Integer32
_PvlanNewCfgPvlanPrio_Object = MibTableColumn
pvlanNewCfgPvlanPrio = _PvlanNewCfgPvlanPrio_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 6, 1, 7),
    _PvlanNewCfgPvlanPrio_Type()
)
pvlanNewCfgPvlanPrio.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvlanNewCfgPvlanPrio.setStatus("current")


class _PvlanNewCfgPvlanState_Type(Integer32):
    """Custom type pvlanNewCfgPvlanState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_PvlanNewCfgPvlanState_Type.__name__ = "Integer32"
_PvlanNewCfgPvlanState_Object = MibTableColumn
pvlanNewCfgPvlanState = _PvlanNewCfgPvlanState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 6, 1, 8),
    _PvlanNewCfgPvlanState_Type()
)
pvlanNewCfgPvlanState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvlanNewCfgPvlanState.setStatus("current")
_PvlanNewCfgPvlanTagPort_Type = PortNumber
_PvlanNewCfgPvlanTagPort_Object = MibTableColumn
pvlanNewCfgPvlanTagPort = _PvlanNewCfgPvlanTagPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 6, 1, 9),
    _PvlanNewCfgPvlanTagPort_Type()
)
pvlanNewCfgPvlanTagPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvlanNewCfgPvlanTagPort.setStatus("current")
_PvlanNewCfgPvlanUntagPort_Type = PortNumber
_PvlanNewCfgPvlanUntagPort_Object = MibTableColumn
pvlanNewCfgPvlanUntagPort = _PvlanNewCfgPvlanUntagPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 6, 1, 10),
    _PvlanNewCfgPvlanUntagPort_Type()
)
pvlanNewCfgPvlanUntagPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvlanNewCfgPvlanUntagPort.setStatus("current")
_PvlanNewCfgPvlanPorts_Type = OctetString
_PvlanNewCfgPvlanPorts_Object = MibTableColumn
pvlanNewCfgPvlanPorts = _PvlanNewCfgPvlanPorts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 6, 1, 11),
    _PvlanNewCfgPvlanPorts_Type()
)
pvlanNewCfgPvlanPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvlanNewCfgPvlanPorts.setStatus("current")
_PvlanNewCfgPvlanTagPorts_Type = OctetString
_PvlanNewCfgPvlanTagPorts_Object = MibTableColumn
pvlanNewCfgPvlanTagPorts = _PvlanNewCfgPvlanTagPorts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 6, 1, 12),
    _PvlanNewCfgPvlanTagPorts_Type()
)
pvlanNewCfgPvlanTagPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvlanNewCfgPvlanTagPorts.setStatus("current")


class _PvlanNewCfgPvlanDelete_Type(Integer32):
    """Custom type pvlanNewCfgPvlanDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("delete", 2))
    )


_PvlanNewCfgPvlanDelete_Type.__name__ = "Integer32"
_PvlanNewCfgPvlanDelete_Object = MibTableColumn
pvlanNewCfgPvlanDelete = _PvlanNewCfgPvlanDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 6, 1, 13),
    _PvlanNewCfgPvlanDelete_Type()
)
pvlanNewCfgPvlanDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvlanNewCfgPvlanDelete.setStatus("current")


class _PvlanNewCfgPvlanPredefProto_Type(Integer32):
    """Custom type pvlanNewCfgPvlanPredefProto based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("userDefined", 0),
          ("decEther2", 1),
          ("ipv4Ether2", 2),
          ("ipv6Ether2", 3),
          ("ipx802dot2", 4),
          ("ipx802dot3", 5),
          ("ipxEther2", 6),
          ("ipxSnap", 7),
          ("netbios", 8),
          ("rarpEther2", 9),
          ("sna802dot2", 10),
          ("snaEther2", 11),
          ("vinesEther2", 12),
          ("xnsEther2", 13))
    )


_PvlanNewCfgPvlanPredefProto_Type.__name__ = "Integer32"
_PvlanNewCfgPvlanPredefProto_Object = MibTableColumn
pvlanNewCfgPvlanPredefProto = _PvlanNewCfgPvlanPredefProto_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 1, 6, 1, 14),
    _PvlanNewCfgPvlanPredefProto_Type()
)
pvlanNewCfgPvlanPredefProto.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvlanNewCfgPvlanPredefProto.setStatus("current")
_Trunkgroup_ObjectIdentity = ObjectIdentity
trunkgroup = _Trunkgroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 2)
)
_TrunkGroupTableMaxSize_Type = Integer32
_TrunkGroupTableMaxSize_Object = MibScalar
trunkGroupTableMaxSize = _TrunkGroupTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 2, 1),
    _TrunkGroupTableMaxSize_Type()
)
trunkGroupTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    trunkGroupTableMaxSize.setStatus("current")
_TrunkGroupCurCfgTable_Object = MibTable
trunkGroupCurCfgTable = _TrunkGroupCurCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 2, 2)
)
if mibBuilder.loadTexts:
    trunkGroupCurCfgTable.setStatus("current")
_TrunkGroupCurCfgTableEntry_Object = MibTableRow
trunkGroupCurCfgTableEntry = _TrunkGroupCurCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 2, 2, 1)
)
trunkGroupCurCfgTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "trunkGroupCurCfgIndex"),
)
if mibBuilder.loadTexts:
    trunkGroupCurCfgTableEntry.setStatus("current")
_TrunkGroupCurCfgIndex_Type = Integer32
_TrunkGroupCurCfgIndex_Object = MibTableColumn
trunkGroupCurCfgIndex = _TrunkGroupCurCfgIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 2, 2, 1, 1),
    _TrunkGroupCurCfgIndex_Type()
)
trunkGroupCurCfgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    trunkGroupCurCfgIndex.setStatus("current")
_TrunkGroupCurCfgPorts_Type = OctetString
_TrunkGroupCurCfgPorts_Object = MibTableColumn
trunkGroupCurCfgPorts = _TrunkGroupCurCfgPorts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 2, 2, 1, 2),
    _TrunkGroupCurCfgPorts_Type()
)
trunkGroupCurCfgPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    trunkGroupCurCfgPorts.setStatus("current")


class _TrunkGroupCurCfgState_Type(Integer32):
    """Custom type trunkGroupCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_TrunkGroupCurCfgState_Type.__name__ = "Integer32"
_TrunkGroupCurCfgState_Object = MibTableColumn
trunkGroupCurCfgState = _TrunkGroupCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 2, 2, 1, 3),
    _TrunkGroupCurCfgState_Type()
)
trunkGroupCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    trunkGroupCurCfgState.setStatus("current")
_TrunkGroupNewCfgTable_Object = MibTable
trunkGroupNewCfgTable = _TrunkGroupNewCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 2, 3)
)
if mibBuilder.loadTexts:
    trunkGroupNewCfgTable.setStatus("current")
_TrunkGroupNewCfgTableEntry_Object = MibTableRow
trunkGroupNewCfgTableEntry = _TrunkGroupNewCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 2, 3, 1)
)
trunkGroupNewCfgTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "trunkGroupNewCfgIndex"),
)
if mibBuilder.loadTexts:
    trunkGroupNewCfgTableEntry.setStatus("current")
_TrunkGroupNewCfgIndex_Type = Integer32
_TrunkGroupNewCfgIndex_Object = MibTableColumn
trunkGroupNewCfgIndex = _TrunkGroupNewCfgIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 2, 3, 1, 1),
    _TrunkGroupNewCfgIndex_Type()
)
trunkGroupNewCfgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    trunkGroupNewCfgIndex.setStatus("current")
_TrunkGroupNewCfgPorts_Type = OctetString
_TrunkGroupNewCfgPorts_Object = MibTableColumn
trunkGroupNewCfgPorts = _TrunkGroupNewCfgPorts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 2, 3, 1, 2),
    _TrunkGroupNewCfgPorts_Type()
)
trunkGroupNewCfgPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    trunkGroupNewCfgPorts.setStatus("current")
_TrunkGroupNewCfgAddPort_Type = PortNumber
_TrunkGroupNewCfgAddPort_Object = MibTableColumn
trunkGroupNewCfgAddPort = _TrunkGroupNewCfgAddPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 2, 3, 1, 3),
    _TrunkGroupNewCfgAddPort_Type()
)
trunkGroupNewCfgAddPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    trunkGroupNewCfgAddPort.setStatus("current")
_TrunkGroupNewCfgRemovePort_Type = PortNumber
_TrunkGroupNewCfgRemovePort_Object = MibTableColumn
trunkGroupNewCfgRemovePort = _TrunkGroupNewCfgRemovePort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 2, 3, 1, 4),
    _TrunkGroupNewCfgRemovePort_Type()
)
trunkGroupNewCfgRemovePort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    trunkGroupNewCfgRemovePort.setStatus("current")


class _TrunkGroupNewCfgState_Type(Integer32):
    """Custom type trunkGroupNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_TrunkGroupNewCfgState_Type.__name__ = "Integer32"
_TrunkGroupNewCfgState_Object = MibTableColumn
trunkGroupNewCfgState = _TrunkGroupNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 2, 3, 1, 5),
    _TrunkGroupNewCfgState_Type()
)
trunkGroupNewCfgState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    trunkGroupNewCfgState.setStatus("current")


class _TrunkGroupNewCfgDelete_Type(Integer32):
    """Custom type trunkGroupNewCfgDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_TrunkGroupNewCfgDelete_Type.__name__ = "Integer32"
_TrunkGroupNewCfgDelete_Object = MibTableColumn
trunkGroupNewCfgDelete = _TrunkGroupNewCfgDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 2, 3, 1, 6),
    _TrunkGroupNewCfgDelete_Type()
)
trunkGroupNewCfgDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    trunkGroupNewCfgDelete.setStatus("current")
_StgCfg_ObjectIdentity = ObjectIdentity
stgCfg = _StgCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 3)
)
_StgCurCfgTable_Object = MibTable
stgCurCfgTable = _StgCurCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 3, 1)
)
if mibBuilder.loadTexts:
    stgCurCfgTable.setStatus("current")
_StgCurCfgTableEntry_Object = MibTableRow
stgCurCfgTableEntry = _StgCurCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 3, 1, 1)
)
stgCurCfgTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "stgCurCfgIndex"),
)
if mibBuilder.loadTexts:
    stgCurCfgTableEntry.setStatus("current")
_StgCurCfgIndex_Type = Integer32
_StgCurCfgIndex_Object = MibTableColumn
stgCurCfgIndex = _StgCurCfgIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 3, 1, 1, 1),
    _StgCurCfgIndex_Type()
)
stgCurCfgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgCurCfgIndex.setStatus("current")


class _StgCurCfgState_Type(Integer32):
    """Custom type stgCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_StgCurCfgState_Type.__name__ = "Integer32"
_StgCurCfgState_Object = MibTableColumn
stgCurCfgState = _StgCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 3, 1, 1, 2),
    _StgCurCfgState_Type()
)
stgCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgCurCfgState.setStatus("current")


class _StgCurCfgPriority_Type(Integer32):
    """Custom type stgCurCfgPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_StgCurCfgPriority_Type.__name__ = "Integer32"
_StgCurCfgPriority_Object = MibTableColumn
stgCurCfgPriority = _StgCurCfgPriority_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 3, 1, 1, 5),
    _StgCurCfgPriority_Type()
)
stgCurCfgPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgCurCfgPriority.setStatus("current")


class _StgCurCfgBrgHelloTime_Type(Integer32):
    """Custom type stgCurCfgBrgHelloTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_StgCurCfgBrgHelloTime_Type.__name__ = "Integer32"
_StgCurCfgBrgHelloTime_Object = MibTableColumn
stgCurCfgBrgHelloTime = _StgCurCfgBrgHelloTime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 3, 1, 1, 6),
    _StgCurCfgBrgHelloTime_Type()
)
stgCurCfgBrgHelloTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgCurCfgBrgHelloTime.setStatus("current")


class _StgCurCfgBrgForwardDelay_Type(Integer32):
    """Custom type stgCurCfgBrgForwardDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 30),
    )


_StgCurCfgBrgForwardDelay_Type.__name__ = "Integer32"
_StgCurCfgBrgForwardDelay_Object = MibTableColumn
stgCurCfgBrgForwardDelay = _StgCurCfgBrgForwardDelay_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 3, 1, 1, 7),
    _StgCurCfgBrgForwardDelay_Type()
)
stgCurCfgBrgForwardDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgCurCfgBrgForwardDelay.setStatus("current")


class _StgCurCfgBrgMaxAge_Type(Integer32):
    """Custom type stgCurCfgBrgMaxAge based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(6, 40),
    )


_StgCurCfgBrgMaxAge_Type.__name__ = "Integer32"
_StgCurCfgBrgMaxAge_Object = MibTableColumn
stgCurCfgBrgMaxAge = _StgCurCfgBrgMaxAge_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 3, 1, 1, 8),
    _StgCurCfgBrgMaxAge_Type()
)
stgCurCfgBrgMaxAge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgCurCfgBrgMaxAge.setStatus("current")


class _StgCurCfgVlanBmap_Type(OctetString):
    """Custom type stgCurCfgVlanBmap based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 512),
    )


_StgCurCfgVlanBmap_Type.__name__ = "OctetString"
_StgCurCfgVlanBmap_Object = MibTableColumn
stgCurCfgVlanBmap = _StgCurCfgVlanBmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 3, 1, 1, 10),
    _StgCurCfgVlanBmap_Type()
)
stgCurCfgVlanBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgCurCfgVlanBmap.setStatus("current")
_StgNewCfgTable_Object = MibTable
stgNewCfgTable = _StgNewCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 3, 2)
)
if mibBuilder.loadTexts:
    stgNewCfgTable.setStatus("current")
_StgNewCfgTableEntry_Object = MibTableRow
stgNewCfgTableEntry = _StgNewCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 3, 2, 1)
)
stgNewCfgTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "stgNewCfgIndex"),
)
if mibBuilder.loadTexts:
    stgNewCfgTableEntry.setStatus("current")
_StgNewCfgIndex_Type = Integer32
_StgNewCfgIndex_Object = MibTableColumn
stgNewCfgIndex = _StgNewCfgIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 3, 2, 1, 1),
    _StgNewCfgIndex_Type()
)
stgNewCfgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgNewCfgIndex.setStatus("current")


class _StgNewCfgState_Type(Integer32):
    """Custom type stgNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_StgNewCfgState_Type.__name__ = "Integer32"
_StgNewCfgState_Object = MibTableColumn
stgNewCfgState = _StgNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 3, 2, 1, 2),
    _StgNewCfgState_Type()
)
stgNewCfgState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stgNewCfgState.setStatus("current")


class _StgNewCfgDefaultCfg_Type(Integer32):
    """Custom type stgNewCfgDefaultCfg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("default-config", 1)
    )


_StgNewCfgDefaultCfg_Type.__name__ = "Integer32"
_StgNewCfgDefaultCfg_Object = MibTableColumn
stgNewCfgDefaultCfg = _StgNewCfgDefaultCfg_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 3, 2, 1, 3),
    _StgNewCfgDefaultCfg_Type()
)
stgNewCfgDefaultCfg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stgNewCfgDefaultCfg.setStatus("current")
_StgNewCfgAddVlan_Type = Integer32
_StgNewCfgAddVlan_Object = MibTableColumn
stgNewCfgAddVlan = _StgNewCfgAddVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 3, 2, 1, 4),
    _StgNewCfgAddVlan_Type()
)
stgNewCfgAddVlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stgNewCfgAddVlan.setStatus("current")
_StgNewCfgRemoveVlan_Type = Integer32
_StgNewCfgRemoveVlan_Object = MibTableColumn
stgNewCfgRemoveVlan = _StgNewCfgRemoveVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 3, 2, 1, 5),
    _StgNewCfgRemoveVlan_Type()
)
stgNewCfgRemoveVlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stgNewCfgRemoveVlan.setStatus("current")


class _StgNewCfgPriority_Type(Integer32):
    """Custom type stgNewCfgPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_StgNewCfgPriority_Type.__name__ = "Integer32"
_StgNewCfgPriority_Object = MibTableColumn
stgNewCfgPriority = _StgNewCfgPriority_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 3, 2, 1, 8),
    _StgNewCfgPriority_Type()
)
stgNewCfgPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stgNewCfgPriority.setStatus("current")


class _StgNewCfgBrgHelloTime_Type(Integer32):
    """Custom type stgNewCfgBrgHelloTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_StgNewCfgBrgHelloTime_Type.__name__ = "Integer32"
_StgNewCfgBrgHelloTime_Object = MibTableColumn
stgNewCfgBrgHelloTime = _StgNewCfgBrgHelloTime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 3, 2, 1, 9),
    _StgNewCfgBrgHelloTime_Type()
)
stgNewCfgBrgHelloTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stgNewCfgBrgHelloTime.setStatus("current")


class _StgNewCfgBrgForwardDelay_Type(Integer32):
    """Custom type stgNewCfgBrgForwardDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 30),
    )


_StgNewCfgBrgForwardDelay_Type.__name__ = "Integer32"
_StgNewCfgBrgForwardDelay_Object = MibTableColumn
stgNewCfgBrgForwardDelay = _StgNewCfgBrgForwardDelay_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 3, 2, 1, 10),
    _StgNewCfgBrgForwardDelay_Type()
)
stgNewCfgBrgForwardDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stgNewCfgBrgForwardDelay.setStatus("current")


class _StgNewCfgBrgMaxAge_Type(Integer32):
    """Custom type stgNewCfgBrgMaxAge based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(6, 40),
    )


_StgNewCfgBrgMaxAge_Type.__name__ = "Integer32"
_StgNewCfgBrgMaxAge_Object = MibTableColumn
stgNewCfgBrgMaxAge = _StgNewCfgBrgMaxAge_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 3, 2, 1, 11),
    _StgNewCfgBrgMaxAge_Type()
)
stgNewCfgBrgMaxAge.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stgNewCfgBrgMaxAge.setStatus("current")


class _StgNewCfgVlanBmap_Type(OctetString):
    """Custom type stgNewCfgVlanBmap based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 512),
    )


_StgNewCfgVlanBmap_Type.__name__ = "OctetString"
_StgNewCfgVlanBmap_Object = MibTableColumn
stgNewCfgVlanBmap = _StgNewCfgVlanBmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 3, 2, 1, 13),
    _StgNewCfgVlanBmap_Type()
)
stgNewCfgVlanBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgNewCfgVlanBmap.setStatus("current")


class _StgNewCfgRemoveAllVlan_Type(Integer32):
    """Custom type stgNewCfgRemoveAllVlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("default-config", 1)
    )


_StgNewCfgRemoveAllVlan_Type.__name__ = "Integer32"
_StgNewCfgRemoveAllVlan_Object = MibTableColumn
stgNewCfgRemoveAllVlan = _StgNewCfgRemoveAllVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 3, 2, 1, 14),
    _StgNewCfgRemoveAllVlan_Type()
)
stgNewCfgRemoveAllVlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stgNewCfgRemoveAllVlan.setStatus("current")
_StgCurCfgPortTable_Object = MibTable
stgCurCfgPortTable = _StgCurCfgPortTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 3, 3)
)
if mibBuilder.loadTexts:
    stgCurCfgPortTable.setStatus("current")
_StgCurCfgPortTableEntry_Object = MibTableRow
stgCurCfgPortTableEntry = _StgCurCfgPortTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 3, 3, 1)
)
stgCurCfgPortTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "stgCurCfgStgIndex"),
    (0, "IBM-GbTOR-G8264T-MIB", "stgCurCfgPortIndex"),
)
if mibBuilder.loadTexts:
    stgCurCfgPortTableEntry.setStatus("current")
_StgCurCfgStgIndex_Type = Integer32
_StgCurCfgStgIndex_Object = MibTableColumn
stgCurCfgStgIndex = _StgCurCfgStgIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 3, 3, 1, 1),
    _StgCurCfgStgIndex_Type()
)
stgCurCfgStgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgCurCfgStgIndex.setStatus("current")
_StgCurCfgPortIndex_Type = PortNumber
_StgCurCfgPortIndex_Object = MibTableColumn
stgCurCfgPortIndex = _StgCurCfgPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 3, 3, 1, 2),
    _StgCurCfgPortIndex_Type()
)
stgCurCfgPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgCurCfgPortIndex.setStatus("current")


class _StgCurCfgPortState_Type(Integer32):
    """Custom type stgCurCfgPortState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_StgCurCfgPortState_Type.__name__ = "Integer32"
_StgCurCfgPortState_Object = MibTableColumn
stgCurCfgPortState = _StgCurCfgPortState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 3, 3, 1, 3),
    _StgCurCfgPortState_Type()
)
stgCurCfgPortState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgCurCfgPortState.setStatus("current")


class _StgCurCfgPortPriority_Type(Integer32):
    """Custom type stgCurCfgPortPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 240),
    )


_StgCurCfgPortPriority_Type.__name__ = "Integer32"
_StgCurCfgPortPriority_Object = MibTableColumn
stgCurCfgPortPriority = _StgCurCfgPortPriority_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 3, 3, 1, 4),
    _StgCurCfgPortPriority_Type()
)
stgCurCfgPortPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgCurCfgPortPriority.setStatus("current")
_StgCurCfgPortPathCost_Type = Integer32
_StgCurCfgPortPathCost_Object = MibTableColumn
stgCurCfgPortPathCost = _StgCurCfgPortPathCost_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 3, 3, 1, 5),
    _StgCurCfgPortPathCost_Type()
)
stgCurCfgPortPathCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgCurCfgPortPathCost.setStatus("current")
_StgNewCfgPortTable_Object = MibTable
stgNewCfgPortTable = _StgNewCfgPortTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 3, 4)
)
if mibBuilder.loadTexts:
    stgNewCfgPortTable.setStatus("current")
_StgNewCfgPortTableEntry_Object = MibTableRow
stgNewCfgPortTableEntry = _StgNewCfgPortTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 3, 4, 1)
)
stgNewCfgPortTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "stgNewCfgStgIndex"),
    (0, "IBM-GbTOR-G8264T-MIB", "stgNewCfgPortIndex"),
)
if mibBuilder.loadTexts:
    stgNewCfgPortTableEntry.setStatus("current")
_StgNewCfgStgIndex_Type = Integer32
_StgNewCfgStgIndex_Object = MibTableColumn
stgNewCfgStgIndex = _StgNewCfgStgIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 3, 4, 1, 1),
    _StgNewCfgStgIndex_Type()
)
stgNewCfgStgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgNewCfgStgIndex.setStatus("current")
_StgNewCfgPortIndex_Type = PortNumber
_StgNewCfgPortIndex_Object = MibTableColumn
stgNewCfgPortIndex = _StgNewCfgPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 3, 4, 1, 2),
    _StgNewCfgPortIndex_Type()
)
stgNewCfgPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgNewCfgPortIndex.setStatus("current")


class _StgNewCfgPortState_Type(Integer32):
    """Custom type stgNewCfgPortState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_StgNewCfgPortState_Type.__name__ = "Integer32"
_StgNewCfgPortState_Object = MibTableColumn
stgNewCfgPortState = _StgNewCfgPortState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 3, 4, 1, 3),
    _StgNewCfgPortState_Type()
)
stgNewCfgPortState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stgNewCfgPortState.setStatus("current")


class _StgNewCfgPortPriority_Type(Integer32):
    """Custom type stgNewCfgPortPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 240),
    )


_StgNewCfgPortPriority_Type.__name__ = "Integer32"
_StgNewCfgPortPriority_Object = MibTableColumn
stgNewCfgPortPriority = _StgNewCfgPortPriority_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 3, 4, 1, 4),
    _StgNewCfgPortPriority_Type()
)
stgNewCfgPortPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stgNewCfgPortPriority.setStatus("current")
_StgNewCfgPortPathCost_Type = Integer32
_StgNewCfgPortPathCost_Object = MibTableColumn
stgNewCfgPortPathCost = _StgNewCfgPortPathCost_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 3, 4, 1, 5),
    _StgNewCfgPortPathCost_Type()
)
stgNewCfgPortPathCost.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stgNewCfgPortPathCost.setStatus("current")
_Mirroring_ObjectIdentity = ObjectIdentity
mirroring = _Mirroring_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 4)
)
_MirrPortMirr_ObjectIdentity = ObjectIdentity
mirrPortMirr = _MirrPortMirr_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 4, 1)
)


class _PmCurCfgPortMirrState_Type(Integer32):
    """Custom type pmCurCfgPortMirrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_PmCurCfgPortMirrState_Type.__name__ = "Integer32"
_PmCurCfgPortMirrState_Object = MibScalar
pmCurCfgPortMirrState = _PmCurCfgPortMirrState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 4, 1, 1),
    _PmCurCfgPortMirrState_Type()
)
pmCurCfgPortMirrState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmCurCfgPortMirrState.setStatus("current")


class _PmNewCfgPortMirrState_Type(Integer32):
    """Custom type pmNewCfgPortMirrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_PmNewCfgPortMirrState_Type.__name__ = "Integer32"
_PmNewCfgPortMirrState_Object = MibScalar
pmNewCfgPortMirrState = _PmNewCfgPortMirrState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 4, 1, 2),
    _PmNewCfgPortMirrState_Type()
)
pmNewCfgPortMirrState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pmNewCfgPortMirrState.setStatus("current")
_PmCurCfgPortMonitorTable_Object = MibTable
pmCurCfgPortMonitorTable = _PmCurCfgPortMonitorTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 4, 1, 3)
)
if mibBuilder.loadTexts:
    pmCurCfgPortMonitorTable.setStatus("current")
_PmCurCfgPortMonitorEntry_Object = MibTableRow
pmCurCfgPortMonitorEntry = _PmCurCfgPortMonitorEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 4, 1, 3, 1)
)
pmCurCfgPortMonitorEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "pmCurCfgPmirrMoniPortIndex"),
    (0, "IBM-GbTOR-G8264T-MIB", "pmCurCfgPmirrMirrPortIndex"),
)
if mibBuilder.loadTexts:
    pmCurCfgPortMonitorEntry.setStatus("current")
_PmCurCfgPmirrMoniPortIndex_Type = PortNumber
_PmCurCfgPmirrMoniPortIndex_Object = MibTableColumn
pmCurCfgPmirrMoniPortIndex = _PmCurCfgPmirrMoniPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 4, 1, 3, 1, 1),
    _PmCurCfgPmirrMoniPortIndex_Type()
)
pmCurCfgPmirrMoniPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmCurCfgPmirrMoniPortIndex.setStatus("current")
_PmCurCfgPmirrMirrPortIndex_Type = PortNumber
_PmCurCfgPmirrMirrPortIndex_Object = MibTableColumn
pmCurCfgPmirrMirrPortIndex = _PmCurCfgPmirrMirrPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 4, 1, 3, 1, 2),
    _PmCurCfgPmirrMirrPortIndex_Type()
)
pmCurCfgPmirrMirrPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmCurCfgPmirrMirrPortIndex.setStatus("current")


class _PmCurCfgPmirrDirection_Type(Integer32):
    """Custom type pmCurCfgPmirrDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("in", 1),
          ("out", 2),
          ("both", 3))
    )


_PmCurCfgPmirrDirection_Type.__name__ = "Integer32"
_PmCurCfgPmirrDirection_Object = MibTableColumn
pmCurCfgPmirrDirection = _PmCurCfgPmirrDirection_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 4, 1, 3, 1, 3),
    _PmCurCfgPmirrDirection_Type()
)
pmCurCfgPmirrDirection.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmCurCfgPmirrDirection.setStatus("current")
_PmNewCfgPortMonitorTable_Object = MibTable
pmNewCfgPortMonitorTable = _PmNewCfgPortMonitorTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 4, 1, 4)
)
if mibBuilder.loadTexts:
    pmNewCfgPortMonitorTable.setStatus("current")
_PmNewCfgPortMonitorEntry_Object = MibTableRow
pmNewCfgPortMonitorEntry = _PmNewCfgPortMonitorEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 4, 1, 4, 1)
)
pmNewCfgPortMonitorEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "pmNewCfgPmirrMoniPortIndex"),
    (0, "IBM-GbTOR-G8264T-MIB", "pmNewCfgPmirrMirrPortIndex"),
)
if mibBuilder.loadTexts:
    pmNewCfgPortMonitorEntry.setStatus("current")
_PmNewCfgPmirrMoniPortIndex_Type = PortNumber
_PmNewCfgPmirrMoniPortIndex_Object = MibTableColumn
pmNewCfgPmirrMoniPortIndex = _PmNewCfgPmirrMoniPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 4, 1, 4, 1, 1),
    _PmNewCfgPmirrMoniPortIndex_Type()
)
pmNewCfgPmirrMoniPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmNewCfgPmirrMoniPortIndex.setStatus("current")
_PmNewCfgPmirrMirrPortIndex_Type = PortNumber
_PmNewCfgPmirrMirrPortIndex_Object = MibTableColumn
pmNewCfgPmirrMirrPortIndex = _PmNewCfgPmirrMirrPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 4, 1, 4, 1, 2),
    _PmNewCfgPmirrMirrPortIndex_Type()
)
pmNewCfgPmirrMirrPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmNewCfgPmirrMirrPortIndex.setStatus("current")


class _PmNewCfgPmirrDirection_Type(Integer32):
    """Custom type pmNewCfgPmirrDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("in", 1),
          ("out", 2),
          ("both", 3))
    )


_PmNewCfgPmirrDirection_Type.__name__ = "Integer32"
_PmNewCfgPmirrDirection_Object = MibTableColumn
pmNewCfgPmirrDirection = _PmNewCfgPmirrDirection_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 4, 1, 4, 1, 3),
    _PmNewCfgPmirrDirection_Type()
)
pmNewCfgPmirrDirection.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pmNewCfgPmirrDirection.setStatus("current")


class _PmNewCfgPmirrDelete_Type(Integer32):
    """Custom type pmNewCfgPmirrDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_PmNewCfgPmirrDelete_Type.__name__ = "Integer32"
_PmNewCfgPmirrDelete_Object = MibTableColumn
pmNewCfgPmirrDelete = _PmNewCfgPmirrDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 4, 1, 4, 1, 4),
    _PmNewCfgPmirrDelete_Type()
)
pmNewCfgPmirrDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pmNewCfgPmirrDelete.setStatus("current")


class _PmNewCfgPmonDelete_Type(Integer32):
    """Custom type pmNewCfgPmonDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_PmNewCfgPmonDelete_Type.__name__ = "Integer32"
_PmNewCfgPmonDelete_Object = MibTableColumn
pmNewCfgPmonDelete = _PmNewCfgPmonDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 4, 1, 4, 1, 10),
    _PmNewCfgPmonDelete_Type()
)
pmNewCfgPmonDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pmNewCfgPmonDelete.setStatus("current")
_Lacp_ObjectIdentity = ObjectIdentity
lacp = _Lacp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 5)
)


class _LacpCurSystemPriority_Type(Integer32):
    """Custom type lacpCurSystemPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_LacpCurSystemPriority_Type.__name__ = "Integer32"
_LacpCurSystemPriority_Object = MibScalar
lacpCurSystemPriority = _LacpCurSystemPriority_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 5, 1),
    _LacpCurSystemPriority_Type()
)
lacpCurSystemPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpCurSystemPriority.setStatus("current")


class _LacpNewSystemPriority_Type(Integer32):
    """Custom type lacpNewSystemPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_LacpNewSystemPriority_Type.__name__ = "Integer32"
_LacpNewSystemPriority_Object = MibScalar
lacpNewSystemPriority = _LacpNewSystemPriority_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 5, 2),
    _LacpNewSystemPriority_Type()
)
lacpNewSystemPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lacpNewSystemPriority.setStatus("current")


class _LacpCurSystemTimeoutTime_Type(Integer32):
    """Custom type lacpCurSystemTimeoutTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              90)
        )
    )
    namedValues = NamedValues(
        *(("short", 3),
          ("long", 90))
    )


_LacpCurSystemTimeoutTime_Type.__name__ = "Integer32"
_LacpCurSystemTimeoutTime_Object = MibScalar
lacpCurSystemTimeoutTime = _LacpCurSystemTimeoutTime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 5, 5),
    _LacpCurSystemTimeoutTime_Type()
)
lacpCurSystemTimeoutTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpCurSystemTimeoutTime.setStatus("current")


class _LacpNewSystemTimeoutTime_Type(Integer32):
    """Custom type lacpNewSystemTimeoutTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              90)
        )
    )
    namedValues = NamedValues(
        *(("short", 3),
          ("long", 90))
    )


_LacpNewSystemTimeoutTime_Type.__name__ = "Integer32"
_LacpNewSystemTimeoutTime_Object = MibScalar
lacpNewSystemTimeoutTime = _LacpNewSystemTimeoutTime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 5, 6),
    _LacpNewSystemTimeoutTime_Type()
)
lacpNewSystemTimeoutTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lacpNewSystemTimeoutTime.setStatus("current")
_LacpCurPortCfgTable_Object = MibTable
lacpCurPortCfgTable = _LacpCurPortCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 5, 7)
)
if mibBuilder.loadTexts:
    lacpCurPortCfgTable.setStatus("current")
_LacpCurPortCfgTableEntry_Object = MibTableRow
lacpCurPortCfgTableEntry = _LacpCurPortCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 5, 7, 1)
)
lacpCurPortCfgTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "lacpCurPortCfgTableId"),
)
if mibBuilder.loadTexts:
    lacpCurPortCfgTableEntry.setStatus("current")
_LacpCurPortCfgTableId_Type = PortNumber
_LacpCurPortCfgTableId_Object = MibTableColumn
lacpCurPortCfgTableId = _LacpCurPortCfgTableId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 5, 7, 1, 1),
    _LacpCurPortCfgTableId_Type()
)
lacpCurPortCfgTableId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpCurPortCfgTableId.setStatus("current")


class _LacpCurPortState_Type(Integer32):
    """Custom type lacpCurPortState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("active", 2),
          ("passive", 3))
    )


_LacpCurPortState_Type.__name__ = "Integer32"
_LacpCurPortState_Object = MibTableColumn
lacpCurPortState = _LacpCurPortState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 5, 7, 1, 2),
    _LacpCurPortState_Type()
)
lacpCurPortState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpCurPortState.setStatus("current")


class _LacpCurPortActorPortPriority_Type(Integer32):
    """Custom type lacpCurPortActorPortPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_LacpCurPortActorPortPriority_Type.__name__ = "Integer32"
_LacpCurPortActorPortPriority_Object = MibTableColumn
lacpCurPortActorPortPriority = _LacpCurPortActorPortPriority_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 5, 7, 1, 3),
    _LacpCurPortActorPortPriority_Type()
)
lacpCurPortActorPortPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpCurPortActorPortPriority.setStatus("current")


class _LacpCurPortActorAdminKey_Type(Integer32):
    """Custom type lacpCurPortActorAdminKey based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_LacpCurPortActorAdminKey_Type.__name__ = "Integer32"
_LacpCurPortActorAdminKey_Object = MibTableColumn
lacpCurPortActorAdminKey = _LacpCurPortActorAdminKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 5, 7, 1, 4),
    _LacpCurPortActorAdminKey_Type()
)
lacpCurPortActorAdminKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpCurPortActorAdminKey.setStatus("current")


class _LacpCurPortActorMinLinks_Type(Integer32):
    """Custom type lacpCurPortActorMinLinks based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_LacpCurPortActorMinLinks_Type.__name__ = "Integer32"
_LacpCurPortActorMinLinks_Object = MibTableColumn
lacpCurPortActorMinLinks = _LacpCurPortActorMinLinks_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 5, 7, 1, 5),
    _LacpCurPortActorMinLinks_Type()
)
lacpCurPortActorMinLinks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpCurPortActorMinLinks.setStatus("current")


class _LacpCurPortSuspendIndividual_Type(Integer32):
    """Custom type lacpCurPortSuspendIndividual based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("suspend", 1),
          ("individual", 2))
    )


_LacpCurPortSuspendIndividual_Type.__name__ = "Integer32"
_LacpCurPortSuspendIndividual_Object = MibTableColumn
lacpCurPortSuspendIndividual = _LacpCurPortSuspendIndividual_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 5, 7, 1, 6),
    _LacpCurPortSuspendIndividual_Type()
)
lacpCurPortSuspendIndividual.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpCurPortSuspendIndividual.setStatus("current")
_LacpNewPortCfgTable_Object = MibTable
lacpNewPortCfgTable = _LacpNewPortCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 5, 8)
)
if mibBuilder.loadTexts:
    lacpNewPortCfgTable.setStatus("current")
_LacpNewPortCfgTableEntry_Object = MibTableRow
lacpNewPortCfgTableEntry = _LacpNewPortCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 5, 8, 1)
)
lacpNewPortCfgTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "lacpNewPortCfgTableId"),
)
if mibBuilder.loadTexts:
    lacpNewPortCfgTableEntry.setStatus("current")
_LacpNewPortCfgTableId_Type = PortNumber
_LacpNewPortCfgTableId_Object = MibTableColumn
lacpNewPortCfgTableId = _LacpNewPortCfgTableId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 5, 8, 1, 1),
    _LacpNewPortCfgTableId_Type()
)
lacpNewPortCfgTableId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpNewPortCfgTableId.setStatus("current")


class _LacpNewPortState_Type(Integer32):
    """Custom type lacpNewPortState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("active", 2),
          ("passive", 3))
    )


_LacpNewPortState_Type.__name__ = "Integer32"
_LacpNewPortState_Object = MibTableColumn
lacpNewPortState = _LacpNewPortState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 5, 8, 1, 2),
    _LacpNewPortState_Type()
)
lacpNewPortState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lacpNewPortState.setStatus("current")


class _LacpNewPortActorPortPriority_Type(Integer32):
    """Custom type lacpNewPortActorPortPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_LacpNewPortActorPortPriority_Type.__name__ = "Integer32"
_LacpNewPortActorPortPriority_Object = MibTableColumn
lacpNewPortActorPortPriority = _LacpNewPortActorPortPriority_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 5, 8, 1, 3),
    _LacpNewPortActorPortPriority_Type()
)
lacpNewPortActorPortPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lacpNewPortActorPortPriority.setStatus("current")


class _LacpNewPortActorAdminKey_Type(Integer32):
    """Custom type lacpNewPortActorAdminKey based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_LacpNewPortActorAdminKey_Type.__name__ = "Integer32"
_LacpNewPortActorAdminKey_Object = MibTableColumn
lacpNewPortActorAdminKey = _LacpNewPortActorAdminKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 5, 8, 1, 4),
    _LacpNewPortActorAdminKey_Type()
)
lacpNewPortActorAdminKey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lacpNewPortActorAdminKey.setStatus("current")


class _LacpNewPortActorMinLinks_Type(Integer32):
    """Custom type lacpNewPortActorMinLinks based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_LacpNewPortActorMinLinks_Type.__name__ = "Integer32"
_LacpNewPortActorMinLinks_Object = MibTableColumn
lacpNewPortActorMinLinks = _LacpNewPortActorMinLinks_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 5, 8, 1, 5),
    _LacpNewPortActorMinLinks_Type()
)
lacpNewPortActorMinLinks.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lacpNewPortActorMinLinks.setStatus("current")


class _LacpNewPortSetToDefault_Type(Integer32):
    """Custom type lacpNewPortSetToDefault based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("setDefault", 2))
    )


_LacpNewPortSetToDefault_Type.__name__ = "Integer32"
_LacpNewPortSetToDefault_Object = MibTableColumn
lacpNewPortSetToDefault = _LacpNewPortSetToDefault_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 5, 8, 1, 6),
    _LacpNewPortSetToDefault_Type()
)
lacpNewPortSetToDefault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lacpNewPortSetToDefault.setStatus("current")


class _LacpNewPortSuspendIndividual_Type(Integer32):
    """Custom type lacpNewPortSuspendIndividual based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("suspend", 1),
          ("individual", 2))
    )


_LacpNewPortSuspendIndividual_Type.__name__ = "Integer32"
_LacpNewPortSuspendIndividual_Object = MibTableColumn
lacpNewPortSuspendIndividual = _LacpNewPortSuspendIndividual_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 5, 8, 1, 7),
    _LacpNewPortSuspendIndividual_Type()
)
lacpNewPortSuspendIndividual.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lacpNewPortSuspendIndividual.setStatus("current")


class _LacpDeleteTrunk_Type(Integer32):
    """Custom type lacpDeleteTrunk based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_LacpDeleteTrunk_Type.__name__ = "Integer32"
_LacpDeleteTrunk_Object = MibScalar
lacpDeleteTrunk = _LacpDeleteTrunk_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 5, 9),
    _LacpDeleteTrunk_Type()
)
lacpDeleteTrunk.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lacpDeleteTrunk.setStatus("current")


class _LacpNewSystemSetToDefault_Type(Integer32):
    """Custom type lacpNewSystemSetToDefault based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("setDefault", 2))
    )


_LacpNewSystemSetToDefault_Type.__name__ = "Integer32"
_LacpNewSystemSetToDefault_Object = MibScalar
lacpNewSystemSetToDefault = _LacpNewSystemSetToDefault_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 5, 10),
    _LacpNewSystemSetToDefault_Type()
)
lacpNewSystemSetToDefault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lacpNewSystemSetToDefault.setStatus("current")
_Thash_ObjectIdentity = ObjectIdentity
thash = _Thash_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 6)
)
_ThashL2L3_ObjectIdentity = ObjectIdentity
thashL2L3 = _ThashL2L3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 6, 1)
)


class _L2ThashCurCfgSmacState_Type(Integer32):
    """Custom type l2ThashCurCfgSmacState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_L2ThashCurCfgSmacState_Type.__name__ = "Integer32"
_L2ThashCurCfgSmacState_Object = MibScalar
l2ThashCurCfgSmacState = _L2ThashCurCfgSmacState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 6, 1, 1),
    _L2ThashCurCfgSmacState_Type()
)
l2ThashCurCfgSmacState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    l2ThashCurCfgSmacState.setStatus("current")


class _L2ThashNewCfgSmacState_Type(Integer32):
    """Custom type l2ThashNewCfgSmacState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_L2ThashNewCfgSmacState_Type.__name__ = "Integer32"
_L2ThashNewCfgSmacState_Object = MibScalar
l2ThashNewCfgSmacState = _L2ThashNewCfgSmacState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 6, 1, 2),
    _L2ThashNewCfgSmacState_Type()
)
l2ThashNewCfgSmacState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    l2ThashNewCfgSmacState.setStatus("current")


class _L2ThashCurCfgDmacState_Type(Integer32):
    """Custom type l2ThashCurCfgDmacState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_L2ThashCurCfgDmacState_Type.__name__ = "Integer32"
_L2ThashCurCfgDmacState_Object = MibScalar
l2ThashCurCfgDmacState = _L2ThashCurCfgDmacState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 6, 1, 3),
    _L2ThashCurCfgDmacState_Type()
)
l2ThashCurCfgDmacState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    l2ThashCurCfgDmacState.setStatus("current")


class _L2ThashNewCfgDmacState_Type(Integer32):
    """Custom type l2ThashNewCfgDmacState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_L2ThashNewCfgDmacState_Type.__name__ = "Integer32"
_L2ThashNewCfgDmacState_Object = MibScalar
l2ThashNewCfgDmacState = _L2ThashNewCfgDmacState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 6, 1, 4),
    _L2ThashNewCfgDmacState_Type()
)
l2ThashNewCfgDmacState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    l2ThashNewCfgDmacState.setStatus("current")


class _L3ThashCurCfgIpUseL2State_Type(Integer32):
    """Custom type l3ThashCurCfgIpUseL2State based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_L3ThashCurCfgIpUseL2State_Type.__name__ = "Integer32"
_L3ThashCurCfgIpUseL2State_Object = MibScalar
l3ThashCurCfgIpUseL2State = _L3ThashCurCfgIpUseL2State_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 6, 1, 5),
    _L3ThashCurCfgIpUseL2State_Type()
)
l3ThashCurCfgIpUseL2State.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    l3ThashCurCfgIpUseL2State.setStatus("current")


class _L3ThashNewCfgIpUseL2State_Type(Integer32):
    """Custom type l3ThashNewCfgIpUseL2State based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_L3ThashNewCfgIpUseL2State_Type.__name__ = "Integer32"
_L3ThashNewCfgIpUseL2State_Object = MibScalar
l3ThashNewCfgIpUseL2State = _L3ThashNewCfgIpUseL2State_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 6, 1, 6),
    _L3ThashNewCfgIpUseL2State_Type()
)
l3ThashNewCfgIpUseL2State.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    l3ThashNewCfgIpUseL2State.setStatus("current")


class _L3ThashCurCfgSipState_Type(Integer32):
    """Custom type l3ThashCurCfgSipState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_L3ThashCurCfgSipState_Type.__name__ = "Integer32"
_L3ThashCurCfgSipState_Object = MibScalar
l3ThashCurCfgSipState = _L3ThashCurCfgSipState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 6, 1, 7),
    _L3ThashCurCfgSipState_Type()
)
l3ThashCurCfgSipState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    l3ThashCurCfgSipState.setStatus("current")


class _L3ThashNewCfgSipState_Type(Integer32):
    """Custom type l3ThashNewCfgSipState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_L3ThashNewCfgSipState_Type.__name__ = "Integer32"
_L3ThashNewCfgSipState_Object = MibScalar
l3ThashNewCfgSipState = _L3ThashNewCfgSipState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 6, 1, 8),
    _L3ThashNewCfgSipState_Type()
)
l3ThashNewCfgSipState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    l3ThashNewCfgSipState.setStatus("current")


class _L3ThashCurCfgDipState_Type(Integer32):
    """Custom type l3ThashCurCfgDipState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_L3ThashCurCfgDipState_Type.__name__ = "Integer32"
_L3ThashCurCfgDipState_Object = MibScalar
l3ThashCurCfgDipState = _L3ThashCurCfgDipState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 6, 1, 9),
    _L3ThashCurCfgDipState_Type()
)
l3ThashCurCfgDipState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    l3ThashCurCfgDipState.setStatus("current")


class _L3ThashNewCfgDipState_Type(Integer32):
    """Custom type l3ThashNewCfgDipState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_L3ThashNewCfgDipState_Type.__name__ = "Integer32"
_L3ThashNewCfgDipState_Object = MibScalar
l3ThashNewCfgDipState = _L3ThashNewCfgDipState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 6, 1, 10),
    _L3ThashNewCfgDipState_Type()
)
l3ThashNewCfgDipState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    l3ThashNewCfgDipState.setStatus("current")


class _L2ThashCurCfgIngressState_Type(Integer32):
    """Custom type l2ThashCurCfgIngressState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_L2ThashCurCfgIngressState_Type.__name__ = "Integer32"
_L2ThashCurCfgIngressState_Object = MibScalar
l2ThashCurCfgIngressState = _L2ThashCurCfgIngressState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 6, 1, 11),
    _L2ThashCurCfgIngressState_Type()
)
l2ThashCurCfgIngressState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    l2ThashCurCfgIngressState.setStatus("current")


class _L2ThashNewCfgIngressState_Type(Integer32):
    """Custom type l2ThashNewCfgIngressState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_L2ThashNewCfgIngressState_Type.__name__ = "Integer32"
_L2ThashNewCfgIngressState_Object = MibScalar
l2ThashNewCfgIngressState = _L2ThashNewCfgIngressState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 6, 1, 12),
    _L2ThashNewCfgIngressState_Type()
)
l2ThashNewCfgIngressState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    l2ThashNewCfgIngressState.setStatus("current")


class _L3ThashCurCfgL4PortState_Type(Integer32):
    """Custom type l3ThashCurCfgL4PortState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_L3ThashCurCfgL4PortState_Type.__name__ = "Integer32"
_L3ThashCurCfgL4PortState_Object = MibScalar
l3ThashCurCfgL4PortState = _L3ThashCurCfgL4PortState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 6, 1, 13),
    _L3ThashCurCfgL4PortState_Type()
)
l3ThashCurCfgL4PortState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    l3ThashCurCfgL4PortState.setStatus("current")


class _L3ThashNewCfgL4PortState_Type(Integer32):
    """Custom type l3ThashNewCfgL4PortState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_L3ThashNewCfgL4PortState_Type.__name__ = "Integer32"
_L3ThashNewCfgL4PortState_Object = MibScalar
l3ThashNewCfgL4PortState = _L3ThashNewCfgL4PortState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 6, 1, 14),
    _L3ThashNewCfgL4PortState_Type()
)
l3ThashNewCfgL4PortState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    l3ThashNewCfgL4PortState.setStatus("current")
_ThashFcoe_ObjectIdentity = ObjectIdentity
thashFcoe = _ThashFcoe_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 6, 2)
)


class _FcoeThashCurCfgSourceState_Type(Integer32):
    """Custom type fcoeThashCurCfgSourceState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_FcoeThashCurCfgSourceState_Type.__name__ = "Integer32"
_FcoeThashCurCfgSourceState_Object = MibScalar
fcoeThashCurCfgSourceState = _FcoeThashCurCfgSourceState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 6, 2, 1),
    _FcoeThashCurCfgSourceState_Type()
)
fcoeThashCurCfgSourceState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcoeThashCurCfgSourceState.setStatus("current")


class _FcoeThashNewCfgSourceState_Type(Integer32):
    """Custom type fcoeThashNewCfgSourceState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_FcoeThashNewCfgSourceState_Type.__name__ = "Integer32"
_FcoeThashNewCfgSourceState_Object = MibScalar
fcoeThashNewCfgSourceState = _FcoeThashNewCfgSourceState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 6, 2, 2),
    _FcoeThashNewCfgSourceState_Type()
)
fcoeThashNewCfgSourceState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcoeThashNewCfgSourceState.setStatus("current")


class _FcoeThashCurCfgDestinationState_Type(Integer32):
    """Custom type fcoeThashCurCfgDestinationState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_FcoeThashCurCfgDestinationState_Type.__name__ = "Integer32"
_FcoeThashCurCfgDestinationState_Object = MibScalar
fcoeThashCurCfgDestinationState = _FcoeThashCurCfgDestinationState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 6, 2, 3),
    _FcoeThashCurCfgDestinationState_Type()
)
fcoeThashCurCfgDestinationState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcoeThashCurCfgDestinationState.setStatus("current")


class _FcoeThashNewCfgDestinationState_Type(Integer32):
    """Custom type fcoeThashNewCfgDestinationState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_FcoeThashNewCfgDestinationState_Type.__name__ = "Integer32"
_FcoeThashNewCfgDestinationState_Object = MibScalar
fcoeThashNewCfgDestinationState = _FcoeThashNewCfgDestinationState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 6, 2, 4),
    _FcoeThashNewCfgDestinationState_Type()
)
fcoeThashNewCfgDestinationState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcoeThashNewCfgDestinationState.setStatus("current")


class _FcoeThashCurCfgCntagState_Type(Integer32):
    """Custom type fcoeThashCurCfgCntagState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_FcoeThashCurCfgCntagState_Type.__name__ = "Integer32"
_FcoeThashCurCfgCntagState_Object = MibScalar
fcoeThashCurCfgCntagState = _FcoeThashCurCfgCntagState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 6, 2, 5),
    _FcoeThashCurCfgCntagState_Type()
)
fcoeThashCurCfgCntagState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcoeThashCurCfgCntagState.setStatus("current")


class _FcoeThashNewCfgCntagState_Type(Integer32):
    """Custom type fcoeThashNewCfgCntagState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_FcoeThashNewCfgCntagState_Type.__name__ = "Integer32"
_FcoeThashNewCfgCntagState_Object = MibScalar
fcoeThashNewCfgCntagState = _FcoeThashNewCfgCntagState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 6, 2, 6),
    _FcoeThashNewCfgCntagState_Type()
)
fcoeThashNewCfgCntagState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcoeThashNewCfgCntagState.setStatus("current")


class _FcoeThashCurCfgOriginatorState_Type(Integer32):
    """Custom type fcoeThashCurCfgOriginatorState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_FcoeThashCurCfgOriginatorState_Type.__name__ = "Integer32"
_FcoeThashCurCfgOriginatorState_Object = MibScalar
fcoeThashCurCfgOriginatorState = _FcoeThashCurCfgOriginatorState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 6, 2, 7),
    _FcoeThashCurCfgOriginatorState_Type()
)
fcoeThashCurCfgOriginatorState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcoeThashCurCfgOriginatorState.setStatus("current")


class _FcoeThashNewCfgOriginatorState_Type(Integer32):
    """Custom type fcoeThashNewCfgOriginatorState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_FcoeThashNewCfgOriginatorState_Type.__name__ = "Integer32"
_FcoeThashNewCfgOriginatorState_Object = MibScalar
fcoeThashNewCfgOriginatorState = _FcoeThashNewCfgOriginatorState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 6, 2, 8),
    _FcoeThashNewCfgOriginatorState_Type()
)
fcoeThashNewCfgOriginatorState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcoeThashNewCfgOriginatorState.setStatus("current")


class _FcoeThashCurCfgResponderState_Type(Integer32):
    """Custom type fcoeThashCurCfgResponderState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_FcoeThashCurCfgResponderState_Type.__name__ = "Integer32"
_FcoeThashCurCfgResponderState_Object = MibScalar
fcoeThashCurCfgResponderState = _FcoeThashCurCfgResponderState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 6, 2, 9),
    _FcoeThashCurCfgResponderState_Type()
)
fcoeThashCurCfgResponderState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcoeThashCurCfgResponderState.setStatus("current")


class _FcoeThashNewCfgResponderState_Type(Integer32):
    """Custom type fcoeThashNewCfgResponderState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_FcoeThashNewCfgResponderState_Type.__name__ = "Integer32"
_FcoeThashNewCfgResponderState_Object = MibScalar
fcoeThashNewCfgResponderState = _FcoeThashNewCfgResponderState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 6, 2, 10),
    _FcoeThashNewCfgResponderState_Type()
)
fcoeThashNewCfgResponderState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcoeThashNewCfgResponderState.setStatus("current")


class _FcoeThashCurCfgFabricState_Type(Integer32):
    """Custom type fcoeThashCurCfgFabricState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_FcoeThashCurCfgFabricState_Type.__name__ = "Integer32"
_FcoeThashCurCfgFabricState_Object = MibScalar
fcoeThashCurCfgFabricState = _FcoeThashCurCfgFabricState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 6, 2, 11),
    _FcoeThashCurCfgFabricState_Type()
)
fcoeThashCurCfgFabricState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcoeThashCurCfgFabricState.setStatus("current")


class _FcoeThashNewCfgFabricState_Type(Integer32):
    """Custom type fcoeThashNewCfgFabricState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_FcoeThashNewCfgFabricState_Type.__name__ = "Integer32"
_FcoeThashNewCfgFabricState_Object = MibScalar
fcoeThashNewCfgFabricState = _FcoeThashNewCfgFabricState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 6, 2, 12),
    _FcoeThashNewCfgFabricState_Type()
)
fcoeThashNewCfgFabricState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcoeThashNewCfgFabricState.setStatus("current")
_MstCfg_ObjectIdentity = ObjectIdentity
mstCfg = _MstCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7)
)
_MstGeneralCfg_ObjectIdentity = ObjectIdentity
mstGeneralCfg = _MstGeneralCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 1)
)


class _MstCurCfgRegionName_Type(DisplayString):
    """Custom type mstCurCfgRegionName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_MstCurCfgRegionName_Type.__name__ = "DisplayString"
_MstCurCfgRegionName_Object = MibScalar
mstCurCfgRegionName = _MstCurCfgRegionName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 1, 3),
    _MstCurCfgRegionName_Type()
)
mstCurCfgRegionName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstCurCfgRegionName.setStatus("current")


class _MstNewCfgRegionName_Type(DisplayString):
    """Custom type mstNewCfgRegionName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_MstNewCfgRegionName_Type.__name__ = "DisplayString"
_MstNewCfgRegionName_Object = MibScalar
mstNewCfgRegionName = _MstNewCfgRegionName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 1, 4),
    _MstNewCfgRegionName_Type()
)
mstNewCfgRegionName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstNewCfgRegionName.setStatus("current")


class _MstCurCfgRegionRevision_Type(Integer32):
    """Custom type mstCurCfgRegionRevision based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_MstCurCfgRegionRevision_Type.__name__ = "Integer32"
_MstCurCfgRegionRevision_Object = MibScalar
mstCurCfgRegionRevision = _MstCurCfgRegionRevision_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 1, 5),
    _MstCurCfgRegionRevision_Type()
)
mstCurCfgRegionRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstCurCfgRegionRevision.setStatus("current")


class _MstNewCfgRegionRevision_Type(Integer32):
    """Custom type mstNewCfgRegionRevision based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_MstNewCfgRegionRevision_Type.__name__ = "Integer32"
_MstNewCfgRegionRevision_Object = MibScalar
mstNewCfgRegionRevision = _MstNewCfgRegionRevision_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 1, 6),
    _MstNewCfgRegionRevision_Type()
)
mstNewCfgRegionRevision.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstNewCfgRegionRevision.setStatus("current")


class _MstCurCfgMaxHopCount_Type(Integer32):
    """Custom type mstCurCfgMaxHopCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 60),
    )


_MstCurCfgMaxHopCount_Type.__name__ = "Integer32"
_MstCurCfgMaxHopCount_Object = MibScalar
mstCurCfgMaxHopCount = _MstCurCfgMaxHopCount_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 1, 7),
    _MstCurCfgMaxHopCount_Type()
)
mstCurCfgMaxHopCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstCurCfgMaxHopCount.setStatus("current")


class _MstNewCfgMaxHopCount_Type(Integer32):
    """Custom type mstNewCfgMaxHopCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 60),
    )


_MstNewCfgMaxHopCount_Type.__name__ = "Integer32"
_MstNewCfgMaxHopCount_Object = MibScalar
mstNewCfgMaxHopCount = _MstNewCfgMaxHopCount_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 1, 8),
    _MstNewCfgMaxHopCount_Type()
)
mstNewCfgMaxHopCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstNewCfgMaxHopCount.setStatus("current")


class _MstCurCfgStpMode_Type(Integer32):
    """Custom type mstCurCfgStpMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("mstp", 1),
          ("rstp", 2),
          ("pvrst", 3))
    )


_MstCurCfgStpMode_Type.__name__ = "Integer32"
_MstCurCfgStpMode_Object = MibScalar
mstCurCfgStpMode = _MstCurCfgStpMode_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 1, 9),
    _MstCurCfgStpMode_Type()
)
mstCurCfgStpMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstCurCfgStpMode.setStatus("current")


class _MstNewCfgStpMode_Type(Integer32):
    """Custom type mstNewCfgStpMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("mstp", 1),
          ("rstp", 2),
          ("pvrst", 3))
    )


_MstNewCfgStpMode_Type.__name__ = "Integer32"
_MstNewCfgStpMode_Object = MibScalar
mstNewCfgStpMode = _MstNewCfgStpMode_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 1, 10),
    _MstNewCfgStpMode_Type()
)
mstNewCfgStpMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstNewCfgStpMode.setStatus("current")
_MstCistCfg_ObjectIdentity = ObjectIdentity
mstCistCfg = _MstCistCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 2)
)


class _MstCistDefaultCfg_Type(Integer32):
    """Custom type mstCistDefaultCfg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("default", 1)
    )


_MstCistDefaultCfg_Type.__name__ = "Integer32"
_MstCistDefaultCfg_Object = MibScalar
mstCistDefaultCfg = _MstCistDefaultCfg_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 2, 1),
    _MstCistDefaultCfg_Type()
)
mstCistDefaultCfg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstCistDefaultCfg.setStatus("current")
_MstCistBridgeCfg_ObjectIdentity = ObjectIdentity
mstCistBridgeCfg = _MstCistBridgeCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 2, 2)
)


class _MstCistCurCfgBridgePriority_Type(Integer32):
    """Custom type mstCistCurCfgBridgePriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_MstCistCurCfgBridgePriority_Type.__name__ = "Integer32"
_MstCistCurCfgBridgePriority_Object = MibScalar
mstCistCurCfgBridgePriority = _MstCistCurCfgBridgePriority_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 2, 2, 1),
    _MstCistCurCfgBridgePriority_Type()
)
mstCistCurCfgBridgePriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstCistCurCfgBridgePriority.setStatus("current")


class _MstCistNewCfgBridgePriority_Type(Integer32):
    """Custom type mstCistNewCfgBridgePriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_MstCistNewCfgBridgePriority_Type.__name__ = "Integer32"
_MstCistNewCfgBridgePriority_Object = MibScalar
mstCistNewCfgBridgePriority = _MstCistNewCfgBridgePriority_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 2, 2, 2),
    _MstCistNewCfgBridgePriority_Type()
)
mstCistNewCfgBridgePriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstCistNewCfgBridgePriority.setStatus("current")


class _MstCistCurCfgBridgeMaxAge_Type(Integer32):
    """Custom type mstCistCurCfgBridgeMaxAge based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(6, 40),
    )


_MstCistCurCfgBridgeMaxAge_Type.__name__ = "Integer32"
_MstCistCurCfgBridgeMaxAge_Object = MibScalar
mstCistCurCfgBridgeMaxAge = _MstCistCurCfgBridgeMaxAge_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 2, 2, 5),
    _MstCistCurCfgBridgeMaxAge_Type()
)
mstCistCurCfgBridgeMaxAge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstCistCurCfgBridgeMaxAge.setStatus("current")


class _MstCistNewCfgBridgeMaxAge_Type(Integer32):
    """Custom type mstCistNewCfgBridgeMaxAge based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(6, 40),
    )


_MstCistNewCfgBridgeMaxAge_Type.__name__ = "Integer32"
_MstCistNewCfgBridgeMaxAge_Object = MibScalar
mstCistNewCfgBridgeMaxAge = _MstCistNewCfgBridgeMaxAge_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 2, 2, 6),
    _MstCistNewCfgBridgeMaxAge_Type()
)
mstCistNewCfgBridgeMaxAge.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstCistNewCfgBridgeMaxAge.setStatus("current")


class _MstCistCurCfgBridgeForwardDelay_Type(Integer32):
    """Custom type mstCistCurCfgBridgeForwardDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 30),
    )


_MstCistCurCfgBridgeForwardDelay_Type.__name__ = "Integer32"
_MstCistCurCfgBridgeForwardDelay_Object = MibScalar
mstCistCurCfgBridgeForwardDelay = _MstCistCurCfgBridgeForwardDelay_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 2, 2, 7),
    _MstCistCurCfgBridgeForwardDelay_Type()
)
mstCistCurCfgBridgeForwardDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstCistCurCfgBridgeForwardDelay.setStatus("current")


class _MstCistNewCfgBridgeForwardDelay_Type(Integer32):
    """Custom type mstCistNewCfgBridgeForwardDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 30),
    )


_MstCistNewCfgBridgeForwardDelay_Type.__name__ = "Integer32"
_MstCistNewCfgBridgeForwardDelay_Object = MibScalar
mstCistNewCfgBridgeForwardDelay = _MstCistNewCfgBridgeForwardDelay_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 2, 2, 8),
    _MstCistNewCfgBridgeForwardDelay_Type()
)
mstCistNewCfgBridgeForwardDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstCistNewCfgBridgeForwardDelay.setStatus("current")


class _MstCistCurCfgVlanBmap_Type(OctetString):
    """Custom type mstCistCurCfgVlanBmap based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 512),
    )


_MstCistCurCfgVlanBmap_Type.__name__ = "OctetString"
_MstCistCurCfgVlanBmap_Object = MibScalar
mstCistCurCfgVlanBmap = _MstCistCurCfgVlanBmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 2, 2, 9),
    _MstCistCurCfgVlanBmap_Type()
)
mstCistCurCfgVlanBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstCistCurCfgVlanBmap.setStatus("current")


class _MstCistNewCfgVlanBmap_Type(OctetString):
    """Custom type mstCistNewCfgVlanBmap based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 512),
    )


_MstCistNewCfgVlanBmap_Type.__name__ = "OctetString"
_MstCistNewCfgVlanBmap_Object = MibScalar
mstCistNewCfgVlanBmap = _MstCistNewCfgVlanBmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 2, 2, 10),
    _MstCistNewCfgVlanBmap_Type()
)
mstCistNewCfgVlanBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstCistNewCfgVlanBmap.setStatus("current")
_MstCistNewCfgAddVlan_Type = Integer32
_MstCistNewCfgAddVlan_Object = MibScalar
mstCistNewCfgAddVlan = _MstCistNewCfgAddVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 2, 2, 11),
    _MstCistNewCfgAddVlan_Type()
)
mstCistNewCfgAddVlan.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mstCistNewCfgAddVlan.setStatus("current")
_MstCistCurCfgPortTable_Object = MibTable
mstCistCurCfgPortTable = _MstCistCurCfgPortTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 2, 3)
)
if mibBuilder.loadTexts:
    mstCistCurCfgPortTable.setStatus("current")
_MstCistCurCfgPortTableEntry_Object = MibTableRow
mstCistCurCfgPortTableEntry = _MstCistCurCfgPortTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 2, 3, 1)
)
mstCistCurCfgPortTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "mstCistCurCfgPortIndex"),
)
if mibBuilder.loadTexts:
    mstCistCurCfgPortTableEntry.setStatus("current")
_MstCistCurCfgPortIndex_Type = PortNumber
_MstCistCurCfgPortIndex_Object = MibTableColumn
mstCistCurCfgPortIndex = _MstCistCurCfgPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 2, 3, 1, 1),
    _MstCistCurCfgPortIndex_Type()
)
mstCistCurCfgPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstCistCurCfgPortIndex.setStatus("current")


class _MstCistCurCfgPortPriority_Type(Integer32):
    """Custom type mstCistCurCfgPortPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 240),
    )


_MstCistCurCfgPortPriority_Type.__name__ = "Integer32"
_MstCistCurCfgPortPriority_Object = MibTableColumn
mstCistCurCfgPortPriority = _MstCistCurCfgPortPriority_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 2, 3, 1, 2),
    _MstCistCurCfgPortPriority_Type()
)
mstCistCurCfgPortPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstCistCurCfgPortPriority.setStatus("current")


class _MstCistCurCfgPortPathCost_Type(Integer32):
    """Custom type mstCistCurCfgPortPathCost based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 200000000),
    )


_MstCistCurCfgPortPathCost_Type.__name__ = "Integer32"
_MstCistCurCfgPortPathCost_Object = MibTableColumn
mstCistCurCfgPortPathCost = _MstCistCurCfgPortPathCost_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 2, 3, 1, 3),
    _MstCistCurCfgPortPathCost_Type()
)
mstCistCurCfgPortPathCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstCistCurCfgPortPathCost.setStatus("current")


class _MstCistCurCfgPortLinkType_Type(Integer32):
    """Custom type mstCistCurCfgPortLinkType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("p2p", 2),
          ("shared", 3))
    )


_MstCistCurCfgPortLinkType_Type.__name__ = "Integer32"
_MstCistCurCfgPortLinkType_Object = MibTableColumn
mstCistCurCfgPortLinkType = _MstCistCurCfgPortLinkType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 2, 3, 1, 4),
    _MstCistCurCfgPortLinkType_Type()
)
mstCistCurCfgPortLinkType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstCistCurCfgPortLinkType.setStatus("current")


class _MstCistCurCfgPortEdge_Type(Integer32):
    """Custom type mstCistCurCfgPortEdge based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_MstCistCurCfgPortEdge_Type.__name__ = "Integer32"
_MstCistCurCfgPortEdge_Object = MibTableColumn
mstCistCurCfgPortEdge = _MstCistCurCfgPortEdge_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 2, 3, 1, 5),
    _MstCistCurCfgPortEdge_Type()
)
mstCistCurCfgPortEdge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstCistCurCfgPortEdge.setStatus("current")


class _MstCistCurCfgPortStpState_Type(Integer32):
    """Custom type mstCistCurCfgPortStpState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_MstCistCurCfgPortStpState_Type.__name__ = "Integer32"
_MstCistCurCfgPortStpState_Object = MibTableColumn
mstCistCurCfgPortStpState = _MstCistCurCfgPortStpState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 2, 3, 1, 6),
    _MstCistCurCfgPortStpState_Type()
)
mstCistCurCfgPortStpState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstCistCurCfgPortStpState.setStatus("current")


class _MstCistCurCfgPortHelloTime_Type(Integer32):
    """Custom type mstCistCurCfgPortHelloTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_MstCistCurCfgPortHelloTime_Type.__name__ = "Integer32"
_MstCistCurCfgPortHelloTime_Object = MibTableColumn
mstCistCurCfgPortHelloTime = _MstCistCurCfgPortHelloTime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 2, 3, 1, 7),
    _MstCistCurCfgPortHelloTime_Type()
)
mstCistCurCfgPortHelloTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstCistCurCfgPortHelloTime.setStatus("current")


class _MstCistCurCfgPortPvstProtection_Type(Integer32):
    """Custom type mstCistCurCfgPortPvstProtection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_MstCistCurCfgPortPvstProtection_Type.__name__ = "Integer32"
_MstCistCurCfgPortPvstProtection_Object = MibTableColumn
mstCistCurCfgPortPvstProtection = _MstCistCurCfgPortPvstProtection_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 2, 3, 1, 8),
    _MstCistCurCfgPortPvstProtection_Type()
)
mstCistCurCfgPortPvstProtection.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstCistCurCfgPortPvstProtection.setStatus("current")
_MstCistNewCfgPortTable_Object = MibTable
mstCistNewCfgPortTable = _MstCistNewCfgPortTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 2, 4)
)
if mibBuilder.loadTexts:
    mstCistNewCfgPortTable.setStatus("current")
_MstCistNewCfgPortTableEntry_Object = MibTableRow
mstCistNewCfgPortTableEntry = _MstCistNewCfgPortTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 2, 4, 1)
)
mstCistNewCfgPortTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "mstCistNewCfgPortIndex"),
)
if mibBuilder.loadTexts:
    mstCistNewCfgPortTableEntry.setStatus("current")
_MstCistNewCfgPortIndex_Type = PortNumber
_MstCistNewCfgPortIndex_Object = MibTableColumn
mstCistNewCfgPortIndex = _MstCistNewCfgPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 2, 4, 1, 1),
    _MstCistNewCfgPortIndex_Type()
)
mstCistNewCfgPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstCistNewCfgPortIndex.setStatus("current")


class _MstCistNewCfgPortPriority_Type(Integer32):
    """Custom type mstCistNewCfgPortPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 240),
    )


_MstCistNewCfgPortPriority_Type.__name__ = "Integer32"
_MstCistNewCfgPortPriority_Object = MibTableColumn
mstCistNewCfgPortPriority = _MstCistNewCfgPortPriority_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 2, 4, 1, 2),
    _MstCistNewCfgPortPriority_Type()
)
mstCistNewCfgPortPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstCistNewCfgPortPriority.setStatus("current")


class _MstCistNewCfgPortPathCost_Type(Integer32):
    """Custom type mstCistNewCfgPortPathCost based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 200000000),
    )


_MstCistNewCfgPortPathCost_Type.__name__ = "Integer32"
_MstCistNewCfgPortPathCost_Object = MibTableColumn
mstCistNewCfgPortPathCost = _MstCistNewCfgPortPathCost_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 2, 4, 1, 3),
    _MstCistNewCfgPortPathCost_Type()
)
mstCistNewCfgPortPathCost.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstCistNewCfgPortPathCost.setStatus("current")


class _MstCistNewCfgPortStpState_Type(Integer32):
    """Custom type mstCistNewCfgPortStpState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_MstCistNewCfgPortStpState_Type.__name__ = "Integer32"
_MstCistNewCfgPortStpState_Object = MibTableColumn
mstCistNewCfgPortStpState = _MstCistNewCfgPortStpState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 2, 4, 1, 6),
    _MstCistNewCfgPortStpState_Type()
)
mstCistNewCfgPortStpState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstCistNewCfgPortStpState.setStatus("current")


class _MstCistNewCfgPortHelloTime_Type(Integer32):
    """Custom type mstCistNewCfgPortHelloTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_MstCistNewCfgPortHelloTime_Type.__name__ = "Integer32"
_MstCistNewCfgPortHelloTime_Object = MibTableColumn
mstCistNewCfgPortHelloTime = _MstCistNewCfgPortHelloTime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 2, 4, 1, 7),
    _MstCistNewCfgPortHelloTime_Type()
)
mstCistNewCfgPortHelloTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstCistNewCfgPortHelloTime.setStatus("current")


class _MstCistNewCfgPortPvstProtection_Type(Integer32):
    """Custom type mstCistNewCfgPortPvstProtection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_MstCistNewCfgPortPvstProtection_Type.__name__ = "Integer32"
_MstCistNewCfgPortPvstProtection_Object = MibTableColumn
mstCistNewCfgPortPvstProtection = _MstCistNewCfgPortPvstProtection_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 7, 2, 4, 1, 8),
    _MstCistNewCfgPortPvstProtection_Type()
)
mstCistNewCfgPortPvstProtection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstCistNewCfgPortPvstProtection.setStatus("current")
_L2GeneralCfg_ObjectIdentity = ObjectIdentity
l2GeneralCfg = _L2GeneralCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 8)
)


class _PvstCompatibilityCurCfgState_Type(Integer32):
    """Custom type pvstCompatibilityCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_PvstCompatibilityCurCfgState_Type.__name__ = "Integer32"
_PvstCompatibilityCurCfgState_Object = MibScalar
pvstCompatibilityCurCfgState = _PvstCompatibilityCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 8, 9),
    _PvstCompatibilityCurCfgState_Type()
)
pvstCompatibilityCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvstCompatibilityCurCfgState.setStatus("current")


class _PvstCompatibilityNewCfgState_Type(Integer32):
    """Custom type pvstCompatibilityNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_PvstCompatibilityNewCfgState_Type.__name__ = "Integer32"
_PvstCompatibilityNewCfgState_Object = MibScalar
pvstCompatibilityNewCfgState = _PvstCompatibilityNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 8, 10),
    _PvstCompatibilityNewCfgState_Type()
)
pvstCompatibilityNewCfgState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvstCompatibilityNewCfgState.setStatus("current")


class _NostpCurCfgState_Type(Integer32):
    """Custom type nostpCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_NostpCurCfgState_Type.__name__ = "Integer32"
_NostpCurCfgState_Object = MibScalar
nostpCurCfgState = _NostpCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 8, 11),
    _NostpCurCfgState_Type()
)
nostpCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nostpCurCfgState.setStatus("current")


class _NostpNewCfgState_Type(Integer32):
    """Custom type nostpNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_NostpNewCfgState_Type.__name__ = "Integer32"
_NostpNewCfgState_Object = MibScalar
nostpNewCfgState = _NostpNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 8, 12),
    _NostpNewCfgState_Type()
)
nostpNewCfgState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    nostpNewCfgState.setStatus("current")


class _StpLoopGuardCurCfgState_Type(Integer32):
    """Custom type stpLoopGuardCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_StpLoopGuardCurCfgState_Type.__name__ = "Integer32"
_StpLoopGuardCurCfgState_Object = MibScalar
stpLoopGuardCurCfgState = _StpLoopGuardCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 8, 13),
    _StpLoopGuardCurCfgState_Type()
)
stpLoopGuardCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpLoopGuardCurCfgState.setStatus("current")


class _StpLoopGuardNewCfgState_Type(Integer32):
    """Custom type stpLoopGuardNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_StpLoopGuardNewCfgState_Type.__name__ = "Integer32"
_StpLoopGuardNewCfgState_Object = MibScalar
stpLoopGuardNewCfgState = _StpLoopGuardNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 8, 14),
    _StpLoopGuardNewCfgState_Type()
)
stpLoopGuardNewCfgState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    stpLoopGuardNewCfgState.setStatus("current")


class _VlanAutoStgCurCfgState_Type(Integer32):
    """Custom type vlanAutoStgCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_VlanAutoStgCurCfgState_Type.__name__ = "Integer32"
_VlanAutoStgCurCfgState_Object = MibScalar
vlanAutoStgCurCfgState = _VlanAutoStgCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 8, 15),
    _VlanAutoStgCurCfgState_Type()
)
vlanAutoStgCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanAutoStgCurCfgState.setStatus("current")


class _VlanAutoStgNewCfgState_Type(Integer32):
    """Custom type vlanAutoStgNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_VlanAutoStgNewCfgState_Type.__name__ = "Integer32"
_VlanAutoStgNewCfgState_Object = MibScalar
vlanAutoStgNewCfgState = _VlanAutoStgNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 8, 16),
    _VlanAutoStgNewCfgState_Type()
)
vlanAutoStgNewCfgState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanAutoStgNewCfgState.setStatus("current")
_FailoverCfg_ObjectIdentity = ObjectIdentity
failoverCfg = _FailoverCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10)
)


class _FailoverCurCfgOnState_Type(Integer32):
    """Custom type failoverCurCfgOnState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_FailoverCurCfgOnState_Type.__name__ = "Integer32"
_FailoverCurCfgOnState_Object = MibScalar
failoverCurCfgOnState = _FailoverCurCfgOnState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10, 1),
    _FailoverCurCfgOnState_Type()
)
failoverCurCfgOnState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    failoverCurCfgOnState.setStatus("current")


class _FailoverNewCfgOnState_Type(Integer32):
    """Custom type failoverNewCfgOnState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_FailoverNewCfgOnState_Type.__name__ = "Integer32"
_FailoverNewCfgOnState_Object = MibScalar
failoverNewCfgOnState = _FailoverNewCfgOnState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10, 2),
    _FailoverNewCfgOnState_Type()
)
failoverNewCfgOnState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    failoverNewCfgOnState.setStatus("current")
_FailoverMaxTriggerEntries_Type = Integer32
_FailoverMaxTriggerEntries_Object = MibScalar
failoverMaxTriggerEntries = _FailoverMaxTriggerEntries_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10, 5),
    _FailoverMaxTriggerEntries_Type()
)
failoverMaxTriggerEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    failoverMaxTriggerEntries.setStatus("current")
_FailoverCurCfgTriggerTable_Object = MibTable
failoverCurCfgTriggerTable = _FailoverCurCfgTriggerTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10, 6)
)
if mibBuilder.loadTexts:
    failoverCurCfgTriggerTable.setStatus("current")
_FailoverCurCfgTriggerTableEntry_Object = MibTableRow
failoverCurCfgTriggerTableEntry = _FailoverCurCfgTriggerTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10, 6, 1)
)
failoverCurCfgTriggerTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "failoverCurCfgTriggerId"),
)
if mibBuilder.loadTexts:
    failoverCurCfgTriggerTableEntry.setStatus("current")
_FailoverCurCfgTriggerId_Type = Integer32
_FailoverCurCfgTriggerId_Object = MibTableColumn
failoverCurCfgTriggerId = _FailoverCurCfgTriggerId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10, 6, 1, 1),
    _FailoverCurCfgTriggerId_Type()
)
failoverCurCfgTriggerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    failoverCurCfgTriggerId.setStatus("current")


class _FailoverCurCfgTriggerState_Type(Integer32):
    """Custom type failoverCurCfgTriggerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_FailoverCurCfgTriggerState_Type.__name__ = "Integer32"
_FailoverCurCfgTriggerState_Object = MibTableColumn
failoverCurCfgTriggerState = _FailoverCurCfgTriggerState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10, 6, 1, 2),
    _FailoverCurCfgTriggerState_Type()
)
failoverCurCfgTriggerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    failoverCurCfgTriggerState.setStatus("current")
_FailoverCurCfgTriggerLimit_Type = Integer32
_FailoverCurCfgTriggerLimit_Object = MibTableColumn
failoverCurCfgTriggerLimit = _FailoverCurCfgTriggerLimit_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10, 6, 1, 3),
    _FailoverCurCfgTriggerLimit_Type()
)
failoverCurCfgTriggerLimit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    failoverCurCfgTriggerLimit.setStatus("current")
_FailoverCurCfgTriggerMmonPort_Type = OctetString
_FailoverCurCfgTriggerMmonPort_Object = MibTableColumn
failoverCurCfgTriggerMmonPort = _FailoverCurCfgTriggerMmonPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10, 6, 1, 6),
    _FailoverCurCfgTriggerMmonPort_Type()
)
failoverCurCfgTriggerMmonPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    failoverCurCfgTriggerMmonPort.setStatus("current")
_FailoverCurCfgTriggerMmonTrunk_Type = OctetString
_FailoverCurCfgTriggerMmonTrunk_Object = MibTableColumn
failoverCurCfgTriggerMmonTrunk = _FailoverCurCfgTriggerMmonTrunk_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10, 6, 1, 7),
    _FailoverCurCfgTriggerMmonTrunk_Type()
)
failoverCurCfgTriggerMmonTrunk.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    failoverCurCfgTriggerMmonTrunk.setStatus("current")
_FailoverCurCfgTriggerMmonKey_Type = DisplayString
_FailoverCurCfgTriggerMmonKey_Object = MibTableColumn
failoverCurCfgTriggerMmonKey = _FailoverCurCfgTriggerMmonKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10, 6, 1, 8),
    _FailoverCurCfgTriggerMmonKey_Type()
)
failoverCurCfgTriggerMmonKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    failoverCurCfgTriggerMmonKey.setStatus("current")
_FailoverCurCfgTriggerMconPort_Type = OctetString
_FailoverCurCfgTriggerMconPort_Object = MibTableColumn
failoverCurCfgTriggerMconPort = _FailoverCurCfgTriggerMconPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10, 6, 1, 9),
    _FailoverCurCfgTriggerMconPort_Type()
)
failoverCurCfgTriggerMconPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    failoverCurCfgTriggerMconPort.setStatus("current")
_FailoverCurCfgTriggerMconTrunk_Type = OctetString
_FailoverCurCfgTriggerMconTrunk_Object = MibTableColumn
failoverCurCfgTriggerMconTrunk = _FailoverCurCfgTriggerMconTrunk_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10, 6, 1, 11),
    _FailoverCurCfgTriggerMconTrunk_Type()
)
failoverCurCfgTriggerMconTrunk.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    failoverCurCfgTriggerMconTrunk.setStatus("current")
_FailoverCurCfgTriggerMconKey_Type = DisplayString
_FailoverCurCfgTriggerMconKey_Object = MibTableColumn
failoverCurCfgTriggerMconKey = _FailoverCurCfgTriggerMconKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10, 6, 1, 12),
    _FailoverCurCfgTriggerMconKey_Type()
)
failoverCurCfgTriggerMconKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    failoverCurCfgTriggerMconKey.setStatus("current")
_FailoverNewCfgTriggerTable_Object = MibTable
failoverNewCfgTriggerTable = _FailoverNewCfgTriggerTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10, 7)
)
if mibBuilder.loadTexts:
    failoverNewCfgTriggerTable.setStatus("current")
_FailoverNewCfgTriggerTableEntry_Object = MibTableRow
failoverNewCfgTriggerTableEntry = _FailoverNewCfgTriggerTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10, 7, 1)
)
failoverNewCfgTriggerTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "failoverNewCfgTriggerId"),
)
if mibBuilder.loadTexts:
    failoverNewCfgTriggerTableEntry.setStatus("current")
_FailoverNewCfgTriggerId_Type = Integer32
_FailoverNewCfgTriggerId_Object = MibTableColumn
failoverNewCfgTriggerId = _FailoverNewCfgTriggerId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10, 7, 1, 1),
    _FailoverNewCfgTriggerId_Type()
)
failoverNewCfgTriggerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    failoverNewCfgTriggerId.setStatus("current")


class _FailoverNewCfgTriggerState_Type(Integer32):
    """Custom type failoverNewCfgTriggerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_FailoverNewCfgTriggerState_Type.__name__ = "Integer32"
_FailoverNewCfgTriggerState_Object = MibTableColumn
failoverNewCfgTriggerState = _FailoverNewCfgTriggerState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10, 7, 1, 2),
    _FailoverNewCfgTriggerState_Type()
)
failoverNewCfgTriggerState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    failoverNewCfgTriggerState.setStatus("current")


class _FailoverNewCfgTriggerLimit_Type(Integer32):
    """Custom type failoverNewCfgTriggerLimit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1024),
    )


_FailoverNewCfgTriggerLimit_Type.__name__ = "Integer32"
_FailoverNewCfgTriggerLimit_Object = MibTableColumn
failoverNewCfgTriggerLimit = _FailoverNewCfgTriggerLimit_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10, 7, 1, 3),
    _FailoverNewCfgTriggerLimit_Type()
)
failoverNewCfgTriggerLimit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    failoverNewCfgTriggerLimit.setStatus("current")
_FailoverNewCfgTriggerMmonPort_Type = OctetString
_FailoverNewCfgTriggerMmonPort_Object = MibTableColumn
failoverNewCfgTriggerMmonPort = _FailoverNewCfgTriggerMmonPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10, 7, 1, 10),
    _FailoverNewCfgTriggerMmonPort_Type()
)
failoverNewCfgTriggerMmonPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    failoverNewCfgTriggerMmonPort.setStatus("current")
_FailoverNewCfgTriggerMmonPortAdd_Type = PortNumber
_FailoverNewCfgTriggerMmonPortAdd_Object = MibTableColumn
failoverNewCfgTriggerMmonPortAdd = _FailoverNewCfgTriggerMmonPortAdd_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10, 7, 1, 11),
    _FailoverNewCfgTriggerMmonPortAdd_Type()
)
failoverNewCfgTriggerMmonPortAdd.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    failoverNewCfgTriggerMmonPortAdd.setStatus("current")
_FailoverNewCfgTriggerMmonPortRem_Type = PortNumber
_FailoverNewCfgTriggerMmonPortRem_Object = MibTableColumn
failoverNewCfgTriggerMmonPortRem = _FailoverNewCfgTriggerMmonPortRem_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10, 7, 1, 12),
    _FailoverNewCfgTriggerMmonPortRem_Type()
)
failoverNewCfgTriggerMmonPortRem.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    failoverNewCfgTriggerMmonPortRem.setStatus("current")
_FailoverNewCfgTriggerMmonTrunk_Type = OctetString
_FailoverNewCfgTriggerMmonTrunk_Object = MibTableColumn
failoverNewCfgTriggerMmonTrunk = _FailoverNewCfgTriggerMmonTrunk_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10, 7, 1, 13),
    _FailoverNewCfgTriggerMmonTrunk_Type()
)
failoverNewCfgTriggerMmonTrunk.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    failoverNewCfgTriggerMmonTrunk.setStatus("current")
_FailoverNewCfgTriggerMmonTrunkAdd_Type = Integer32
_FailoverNewCfgTriggerMmonTrunkAdd_Object = MibTableColumn
failoverNewCfgTriggerMmonTrunkAdd = _FailoverNewCfgTriggerMmonTrunkAdd_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10, 7, 1, 14),
    _FailoverNewCfgTriggerMmonTrunkAdd_Type()
)
failoverNewCfgTriggerMmonTrunkAdd.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    failoverNewCfgTriggerMmonTrunkAdd.setStatus("current")
_FailoverNewCfgTriggerMmonTrunkRem_Type = Integer32
_FailoverNewCfgTriggerMmonTrunkRem_Object = MibTableColumn
failoverNewCfgTriggerMmonTrunkRem = _FailoverNewCfgTriggerMmonTrunkRem_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10, 7, 1, 15),
    _FailoverNewCfgTriggerMmonTrunkRem_Type()
)
failoverNewCfgTriggerMmonTrunkRem.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    failoverNewCfgTriggerMmonTrunkRem.setStatus("current")
_FailoverNewCfgTriggerMmonKey_Type = DisplayString
_FailoverNewCfgTriggerMmonKey_Object = MibTableColumn
failoverNewCfgTriggerMmonKey = _FailoverNewCfgTriggerMmonKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10, 7, 1, 16),
    _FailoverNewCfgTriggerMmonKey_Type()
)
failoverNewCfgTriggerMmonKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    failoverNewCfgTriggerMmonKey.setStatus("current")


class _FailoverNewCfgTriggerMmonKeyAdd_Type(Integer32):
    """Custom type failoverNewCfgTriggerMmonKeyAdd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_FailoverNewCfgTriggerMmonKeyAdd_Type.__name__ = "Integer32"
_FailoverNewCfgTriggerMmonKeyAdd_Object = MibTableColumn
failoverNewCfgTriggerMmonKeyAdd = _FailoverNewCfgTriggerMmonKeyAdd_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10, 7, 1, 17),
    _FailoverNewCfgTriggerMmonKeyAdd_Type()
)
failoverNewCfgTriggerMmonKeyAdd.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    failoverNewCfgTriggerMmonKeyAdd.setStatus("current")


class _FailoverNewCfgTriggerMmonKeyRem_Type(Integer32):
    """Custom type failoverNewCfgTriggerMmonKeyRem based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_FailoverNewCfgTriggerMmonKeyRem_Type.__name__ = "Integer32"
_FailoverNewCfgTriggerMmonKeyRem_Object = MibTableColumn
failoverNewCfgTriggerMmonKeyRem = _FailoverNewCfgTriggerMmonKeyRem_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10, 7, 1, 18),
    _FailoverNewCfgTriggerMmonKeyRem_Type()
)
failoverNewCfgTriggerMmonKeyRem.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    failoverNewCfgTriggerMmonKeyRem.setStatus("current")
_FailoverNewCfgTriggerMconPort_Type = OctetString
_FailoverNewCfgTriggerMconPort_Object = MibTableColumn
failoverNewCfgTriggerMconPort = _FailoverNewCfgTriggerMconPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10, 7, 1, 19),
    _FailoverNewCfgTriggerMconPort_Type()
)
failoverNewCfgTriggerMconPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    failoverNewCfgTriggerMconPort.setStatus("current")
_FailoverNewCfgTriggerMconPortAdd_Type = PortNumber
_FailoverNewCfgTriggerMconPortAdd_Object = MibTableColumn
failoverNewCfgTriggerMconPortAdd = _FailoverNewCfgTriggerMconPortAdd_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10, 7, 1, 20),
    _FailoverNewCfgTriggerMconPortAdd_Type()
)
failoverNewCfgTriggerMconPortAdd.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    failoverNewCfgTriggerMconPortAdd.setStatus("current")
_FailoverNewCfgTriggerMconPortRem_Type = PortNumber
_FailoverNewCfgTriggerMconPortRem_Object = MibTableColumn
failoverNewCfgTriggerMconPortRem = _FailoverNewCfgTriggerMconPortRem_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10, 7, 1, 21),
    _FailoverNewCfgTriggerMconPortRem_Type()
)
failoverNewCfgTriggerMconPortRem.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    failoverNewCfgTriggerMconPortRem.setStatus("current")
_FailoverNewCfgTriggerMconTrunk_Type = OctetString
_FailoverNewCfgTriggerMconTrunk_Object = MibTableColumn
failoverNewCfgTriggerMconTrunk = _FailoverNewCfgTriggerMconTrunk_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10, 7, 1, 25),
    _FailoverNewCfgTriggerMconTrunk_Type()
)
failoverNewCfgTriggerMconTrunk.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    failoverNewCfgTriggerMconTrunk.setStatus("current")
_FailoverNewCfgTriggerMconTrunkAdd_Type = Integer32
_FailoverNewCfgTriggerMconTrunkAdd_Object = MibTableColumn
failoverNewCfgTriggerMconTrunkAdd = _FailoverNewCfgTriggerMconTrunkAdd_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10, 7, 1, 26),
    _FailoverNewCfgTriggerMconTrunkAdd_Type()
)
failoverNewCfgTriggerMconTrunkAdd.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    failoverNewCfgTriggerMconTrunkAdd.setStatus("current")
_FailoverNewCfgTriggerMconTrunkRem_Type = Integer32
_FailoverNewCfgTriggerMconTrunkRem_Object = MibTableColumn
failoverNewCfgTriggerMconTrunkRem = _FailoverNewCfgTriggerMconTrunkRem_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10, 7, 1, 27),
    _FailoverNewCfgTriggerMconTrunkRem_Type()
)
failoverNewCfgTriggerMconTrunkRem.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    failoverNewCfgTriggerMconTrunkRem.setStatus("current")
_FailoverNewCfgTriggerMconKey_Type = DisplayString
_FailoverNewCfgTriggerMconKey_Object = MibTableColumn
failoverNewCfgTriggerMconKey = _FailoverNewCfgTriggerMconKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10, 7, 1, 28),
    _FailoverNewCfgTriggerMconKey_Type()
)
failoverNewCfgTriggerMconKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    failoverNewCfgTriggerMconKey.setStatus("current")


class _FailoverNewCfgTriggerMconKeyAdd_Type(Integer32):
    """Custom type failoverNewCfgTriggerMconKeyAdd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_FailoverNewCfgTriggerMconKeyAdd_Type.__name__ = "Integer32"
_FailoverNewCfgTriggerMconKeyAdd_Object = MibTableColumn
failoverNewCfgTriggerMconKeyAdd = _FailoverNewCfgTriggerMconKeyAdd_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10, 7, 1, 29),
    _FailoverNewCfgTriggerMconKeyAdd_Type()
)
failoverNewCfgTriggerMconKeyAdd.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    failoverNewCfgTriggerMconKeyAdd.setStatus("current")


class _FailoverNewCfgTriggerMconKeyRem_Type(Integer32):
    """Custom type failoverNewCfgTriggerMconKeyRem based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_FailoverNewCfgTriggerMconKeyRem_Type.__name__ = "Integer32"
_FailoverNewCfgTriggerMconKeyRem_Object = MibTableColumn
failoverNewCfgTriggerMconKeyRem = _FailoverNewCfgTriggerMconKeyRem_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10, 7, 1, 30),
    _FailoverNewCfgTriggerMconKeyRem_Type()
)
failoverNewCfgTriggerMconKeyRem.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    failoverNewCfgTriggerMconKeyRem.setStatus("current")


class _FailoverNewCfgTriggerDelete_Type(Integer32):
    """Custom type failoverNewCfgTriggerDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_FailoverNewCfgTriggerDelete_Type.__name__ = "Integer32"
_FailoverNewCfgTriggerDelete_Object = MibTableColumn
failoverNewCfgTriggerDelete = _FailoverNewCfgTriggerDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 10, 7, 1, 31),
    _FailoverNewCfgTriggerDelete_Type()
)
failoverNewCfgTriggerDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    failoverNewCfgTriggerDelete.setStatus("current")
_Dot1x_ObjectIdentity = ObjectIdentity
dot1x = _Dot1x_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12)
)


class _Dot1xCurStatus_Type(Integer32):
    """Custom type dot1xCurStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("enable", 0),
          ("disable", 1))
    )


_Dot1xCurStatus_Type.__name__ = "Integer32"
_Dot1xCurStatus_Object = MibScalar
dot1xCurStatus = _Dot1xCurStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 1),
    _Dot1xCurStatus_Type()
)
dot1xCurStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurStatus.setStatus("current")


class _Dot1xNewStatus_Type(Integer32):
    """Custom type dot1xNewStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("enable", 0),
          ("disable", 1))
    )


_Dot1xNewStatus_Type.__name__ = "Integer32"
_Dot1xNewStatus_Object = MibScalar
dot1xNewStatus = _Dot1xNewStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 2),
    _Dot1xNewStatus_Type()
)
dot1xNewStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dot1xNewStatus.setStatus("current")
_Dot1xCurCfgPortTable_Object = MibTable
dot1xCurCfgPortTable = _Dot1xCurCfgPortTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 3)
)
if mibBuilder.loadTexts:
    dot1xCurCfgPortTable.setStatus("current")
_Dot1xCurCfgPortEntry_Object = MibTableRow
dot1xCurCfgPortEntry = _Dot1xCurCfgPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 3, 1)
)
dot1xCurCfgPortEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "dot1xCurCfgPortIndex"),
)
if mibBuilder.loadTexts:
    dot1xCurCfgPortEntry.setStatus("current")
_Dot1xCurCfgPortIndex_Type = PortNumber
_Dot1xCurCfgPortIndex_Object = MibTableColumn
dot1xCurCfgPortIndex = _Dot1xCurCfgPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 3, 1, 1),
    _Dot1xCurCfgPortIndex_Type()
)
dot1xCurCfgPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurCfgPortIndex.setStatus("current")


class _Dot1xCurCfgPortMode_Type(Integer32):
    """Custom type dot1xCurCfgPortMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("forceUnauth", 0),
          ("auto", 1),
          ("forceAuth", 2))
    )


_Dot1xCurCfgPortMode_Type.__name__ = "Integer32"
_Dot1xCurCfgPortMode_Object = MibTableColumn
dot1xCurCfgPortMode = _Dot1xCurCfgPortMode_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 3, 1, 2),
    _Dot1xCurCfgPortMode_Type()
)
dot1xCurCfgPortMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurCfgPortMode.setStatus("current")


class _Dot1xCurCfgPortQtPeriod_Type(Integer32):
    """Custom type dot1xCurCfgPortQtPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_Dot1xCurCfgPortQtPeriod_Type.__name__ = "Integer32"
_Dot1xCurCfgPortQtPeriod_Object = MibTableColumn
dot1xCurCfgPortQtPeriod = _Dot1xCurCfgPortQtPeriod_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 3, 1, 3),
    _Dot1xCurCfgPortQtPeriod_Type()
)
dot1xCurCfgPortQtPeriod.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurCfgPortQtPeriod.setStatus("current")


class _Dot1xCurCfgPortTxPeriod_Type(Integer32):
    """Custom type dot1xCurCfgPortTxPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Dot1xCurCfgPortTxPeriod_Type.__name__ = "Integer32"
_Dot1xCurCfgPortTxPeriod_Object = MibTableColumn
dot1xCurCfgPortTxPeriod = _Dot1xCurCfgPortTxPeriod_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 3, 1, 4),
    _Dot1xCurCfgPortTxPeriod_Type()
)
dot1xCurCfgPortTxPeriod.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurCfgPortTxPeriod.setStatus("current")


class _Dot1xCurCfgPortSupTmout_Type(Integer32):
    """Custom type dot1xCurCfgPortSupTmout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Dot1xCurCfgPortSupTmout_Type.__name__ = "Integer32"
_Dot1xCurCfgPortSupTmout_Object = MibTableColumn
dot1xCurCfgPortSupTmout = _Dot1xCurCfgPortSupTmout_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 3, 1, 5),
    _Dot1xCurCfgPortSupTmout_Type()
)
dot1xCurCfgPortSupTmout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurCfgPortSupTmout.setStatus("current")


class _Dot1xCurCfgPortSrvTmout_Type(Integer32):
    """Custom type dot1xCurCfgPortSrvTmout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Dot1xCurCfgPortSrvTmout_Type.__name__ = "Integer32"
_Dot1xCurCfgPortSrvTmout_Object = MibTableColumn
dot1xCurCfgPortSrvTmout = _Dot1xCurCfgPortSrvTmout_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 3, 1, 6),
    _Dot1xCurCfgPortSrvTmout_Type()
)
dot1xCurCfgPortSrvTmout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurCfgPortSrvTmout.setStatus("current")


class _Dot1xCurCfgPortMaxRq_Type(Integer32):
    """Custom type dot1xCurCfgPortMaxRq based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_Dot1xCurCfgPortMaxRq_Type.__name__ = "Integer32"
_Dot1xCurCfgPortMaxRq_Object = MibTableColumn
dot1xCurCfgPortMaxRq = _Dot1xCurCfgPortMaxRq_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 3, 1, 7),
    _Dot1xCurCfgPortMaxRq_Type()
)
dot1xCurCfgPortMaxRq.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurCfgPortMaxRq.setStatus("current")


class _Dot1xCurCfgPortRaPeriod_Type(Integer32):
    """Custom type dot1xCurCfgPortRaPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 604800),
    )


_Dot1xCurCfgPortRaPeriod_Type.__name__ = "Integer32"
_Dot1xCurCfgPortRaPeriod_Object = MibTableColumn
dot1xCurCfgPortRaPeriod = _Dot1xCurCfgPortRaPeriod_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 3, 1, 8),
    _Dot1xCurCfgPortRaPeriod_Type()
)
dot1xCurCfgPortRaPeriod.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurCfgPortRaPeriod.setStatus("current")


class _Dot1xCurCfgPortReAuth_Type(Integer32):
    """Custom type dot1xCurCfgPortReAuth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_Dot1xCurCfgPortReAuth_Type.__name__ = "Integer32"
_Dot1xCurCfgPortReAuth_Object = MibTableColumn
dot1xCurCfgPortReAuth = _Dot1xCurCfgPortReAuth_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 3, 1, 9),
    _Dot1xCurCfgPortReAuth_Type()
)
dot1xCurCfgPortReAuth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurCfgPortReAuth.setStatus("current")


class _Dot1xCurCfgPortVlanAssign_Type(Integer32):
    """Custom type dot1xCurCfgPortVlanAssign based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_Dot1xCurCfgPortVlanAssign_Type.__name__ = "Integer32"
_Dot1xCurCfgPortVlanAssign_Object = MibTableColumn
dot1xCurCfgPortVlanAssign = _Dot1xCurCfgPortVlanAssign_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 3, 1, 10),
    _Dot1xCurCfgPortVlanAssign_Type()
)
dot1xCurCfgPortVlanAssign.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurCfgPortVlanAssign.setStatus("current")
_Dot1xNewCfgPortTable_Object = MibTable
dot1xNewCfgPortTable = _Dot1xNewCfgPortTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 4)
)
if mibBuilder.loadTexts:
    dot1xNewCfgPortTable.setStatus("current")
_Dot1xNewCfgPortEntry_Object = MibTableRow
dot1xNewCfgPortEntry = _Dot1xNewCfgPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 4, 1)
)
dot1xNewCfgPortEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "dot1xNewCfgPortIndex"),
)
if mibBuilder.loadTexts:
    dot1xNewCfgPortEntry.setStatus("current")
_Dot1xNewCfgPortIndex_Type = PortNumber
_Dot1xNewCfgPortIndex_Object = MibTableColumn
dot1xNewCfgPortIndex = _Dot1xNewCfgPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 4, 1, 1),
    _Dot1xNewCfgPortIndex_Type()
)
dot1xNewCfgPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xNewCfgPortIndex.setStatus("current")


class _Dot1xNewCfgPortMode_Type(Integer32):
    """Custom type dot1xNewCfgPortMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("forceUnauth", 0),
          ("auto", 1),
          ("forceAuth", 2))
    )


_Dot1xNewCfgPortMode_Type.__name__ = "Integer32"
_Dot1xNewCfgPortMode_Object = MibTableColumn
dot1xNewCfgPortMode = _Dot1xNewCfgPortMode_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 4, 1, 2),
    _Dot1xNewCfgPortMode_Type()
)
dot1xNewCfgPortMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgPortMode.setStatus("current")


class _Dot1xNewCfgPortQtPeriod_Type(Integer32):
    """Custom type dot1xNewCfgPortQtPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_Dot1xNewCfgPortQtPeriod_Type.__name__ = "Integer32"
_Dot1xNewCfgPortQtPeriod_Object = MibTableColumn
dot1xNewCfgPortQtPeriod = _Dot1xNewCfgPortQtPeriod_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 4, 1, 3),
    _Dot1xNewCfgPortQtPeriod_Type()
)
dot1xNewCfgPortQtPeriod.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgPortQtPeriod.setStatus("current")


class _Dot1xNewCfgPortTxPeriod_Type(Integer32):
    """Custom type dot1xNewCfgPortTxPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Dot1xNewCfgPortTxPeriod_Type.__name__ = "Integer32"
_Dot1xNewCfgPortTxPeriod_Object = MibTableColumn
dot1xNewCfgPortTxPeriod = _Dot1xNewCfgPortTxPeriod_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 4, 1, 4),
    _Dot1xNewCfgPortTxPeriod_Type()
)
dot1xNewCfgPortTxPeriod.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgPortTxPeriod.setStatus("current")


class _Dot1xNewCfgPortSupTmout_Type(Integer32):
    """Custom type dot1xNewCfgPortSupTmout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Dot1xNewCfgPortSupTmout_Type.__name__ = "Integer32"
_Dot1xNewCfgPortSupTmout_Object = MibTableColumn
dot1xNewCfgPortSupTmout = _Dot1xNewCfgPortSupTmout_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 4, 1, 5),
    _Dot1xNewCfgPortSupTmout_Type()
)
dot1xNewCfgPortSupTmout.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgPortSupTmout.setStatus("current")


class _Dot1xNewCfgPortSrvTmout_Type(Integer32):
    """Custom type dot1xNewCfgPortSrvTmout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Dot1xNewCfgPortSrvTmout_Type.__name__ = "Integer32"
_Dot1xNewCfgPortSrvTmout_Object = MibTableColumn
dot1xNewCfgPortSrvTmout = _Dot1xNewCfgPortSrvTmout_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 4, 1, 6),
    _Dot1xNewCfgPortSrvTmout_Type()
)
dot1xNewCfgPortSrvTmout.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgPortSrvTmout.setStatus("current")


class _Dot1xNewCfgPortMaxRq_Type(Integer32):
    """Custom type dot1xNewCfgPortMaxRq based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_Dot1xNewCfgPortMaxRq_Type.__name__ = "Integer32"
_Dot1xNewCfgPortMaxRq_Object = MibTableColumn
dot1xNewCfgPortMaxRq = _Dot1xNewCfgPortMaxRq_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 4, 1, 7),
    _Dot1xNewCfgPortMaxRq_Type()
)
dot1xNewCfgPortMaxRq.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgPortMaxRq.setStatus("current")


class _Dot1xNewCfgPortRaPeriod_Type(Integer32):
    """Custom type dot1xNewCfgPortRaPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 604800),
    )


_Dot1xNewCfgPortRaPeriod_Type.__name__ = "Integer32"
_Dot1xNewCfgPortRaPeriod_Object = MibTableColumn
dot1xNewCfgPortRaPeriod = _Dot1xNewCfgPortRaPeriod_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 4, 1, 8),
    _Dot1xNewCfgPortRaPeriod_Type()
)
dot1xNewCfgPortRaPeriod.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgPortRaPeriod.setStatus("current")


class _Dot1xNewCfgPortReAuth_Type(Integer32):
    """Custom type dot1xNewCfgPortReAuth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_Dot1xNewCfgPortReAuth_Type.__name__ = "Integer32"
_Dot1xNewCfgPortReAuth_Object = MibTableColumn
dot1xNewCfgPortReAuth = _Dot1xNewCfgPortReAuth_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 4, 1, 9),
    _Dot1xNewCfgPortReAuth_Type()
)
dot1xNewCfgPortReAuth.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgPortReAuth.setStatus("current")


class _Dot1xNewCfgPortDefault_Type(Integer32):
    """Custom type dot1xNewCfgPortDefault based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("other", 0),
          ("apply", 1))
    )


_Dot1xNewCfgPortDefault_Type.__name__ = "Integer32"
_Dot1xNewCfgPortDefault_Object = MibTableColumn
dot1xNewCfgPortDefault = _Dot1xNewCfgPortDefault_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 4, 1, 10),
    _Dot1xNewCfgPortDefault_Type()
)
dot1xNewCfgPortDefault.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgPortDefault.setStatus("current")


class _Dot1xNewCfgPortApplyGlobal_Type(Integer32):
    """Custom type dot1xNewCfgPortApplyGlobal based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("other", 0),
          ("apply", 1))
    )


_Dot1xNewCfgPortApplyGlobal_Type.__name__ = "Integer32"
_Dot1xNewCfgPortApplyGlobal_Object = MibTableColumn
dot1xNewCfgPortApplyGlobal = _Dot1xNewCfgPortApplyGlobal_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 4, 1, 11),
    _Dot1xNewCfgPortApplyGlobal_Type()
)
dot1xNewCfgPortApplyGlobal.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgPortApplyGlobal.setStatus("current")


class _Dot1xNewCfgPortVlanAssign_Type(Integer32):
    """Custom type dot1xNewCfgPortVlanAssign based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_Dot1xNewCfgPortVlanAssign_Type.__name__ = "Integer32"
_Dot1xNewCfgPortVlanAssign_Object = MibTableColumn
dot1xNewCfgPortVlanAssign = _Dot1xNewCfgPortVlanAssign_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 4, 1, 12),
    _Dot1xNewCfgPortVlanAssign_Type()
)
dot1xNewCfgPortVlanAssign.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgPortVlanAssign.setStatus("current")
_Dot1xCurCfgGlobalTable_ObjectIdentity = ObjectIdentity
dot1xCurCfgGlobalTable = _Dot1xCurCfgGlobalTable_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 5)
)
_Dot1xCurCfgGuestVlan_ObjectIdentity = ObjectIdentity
dot1xCurCfgGuestVlan = _Dot1xCurCfgGuestVlan_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 5, 1)
)


class _Dot1xCurCfgGuestVlanNumber_Type(Integer32):
    """Custom type dot1xCurCfgGuestVlanNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_Dot1xCurCfgGuestVlanNumber_Type.__name__ = "Integer32"
_Dot1xCurCfgGuestVlanNumber_Object = MibScalar
dot1xCurCfgGuestVlanNumber = _Dot1xCurCfgGuestVlanNumber_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 5, 1, 1),
    _Dot1xCurCfgGuestVlanNumber_Type()
)
dot1xCurCfgGuestVlanNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurCfgGuestVlanNumber.setStatus("current")


class _Dot1xCurCfgGuestVlanStatus_Type(Integer32):
    """Custom type dot1xCurCfgGuestVlanStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_Dot1xCurCfgGuestVlanStatus_Type.__name__ = "Integer32"
_Dot1xCurCfgGuestVlanStatus_Object = MibScalar
dot1xCurCfgGuestVlanStatus = _Dot1xCurCfgGuestVlanStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 5, 1, 2),
    _Dot1xCurCfgGuestVlanStatus_Type()
)
dot1xCurCfgGuestVlanStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurCfgGuestVlanStatus.setStatus("current")


class _Dot1xCurCfgGlobalMode_Type(Integer32):
    """Custom type dot1xCurCfgGlobalMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("forceUnauth", 0),
          ("auto", 1),
          ("forceAuth", 2))
    )


_Dot1xCurCfgGlobalMode_Type.__name__ = "Integer32"
_Dot1xCurCfgGlobalMode_Object = MibScalar
dot1xCurCfgGlobalMode = _Dot1xCurCfgGlobalMode_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 5, 3),
    _Dot1xCurCfgGlobalMode_Type()
)
dot1xCurCfgGlobalMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurCfgGlobalMode.setStatus("current")


class _Dot1xCurCfgGlobalQtPeriod_Type(Integer32):
    """Custom type dot1xCurCfgGlobalQtPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_Dot1xCurCfgGlobalQtPeriod_Type.__name__ = "Integer32"
_Dot1xCurCfgGlobalQtPeriod_Object = MibScalar
dot1xCurCfgGlobalQtPeriod = _Dot1xCurCfgGlobalQtPeriod_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 5, 4),
    _Dot1xCurCfgGlobalQtPeriod_Type()
)
dot1xCurCfgGlobalQtPeriod.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurCfgGlobalQtPeriod.setStatus("current")


class _Dot1xCurCfgGlobalTxPeriod_Type(Integer32):
    """Custom type dot1xCurCfgGlobalTxPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Dot1xCurCfgGlobalTxPeriod_Type.__name__ = "Integer32"
_Dot1xCurCfgGlobalTxPeriod_Object = MibScalar
dot1xCurCfgGlobalTxPeriod = _Dot1xCurCfgGlobalTxPeriod_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 5, 5),
    _Dot1xCurCfgGlobalTxPeriod_Type()
)
dot1xCurCfgGlobalTxPeriod.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurCfgGlobalTxPeriod.setStatus("current")


class _Dot1xCurCfgGlobalSupTmout_Type(Integer32):
    """Custom type dot1xCurCfgGlobalSupTmout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Dot1xCurCfgGlobalSupTmout_Type.__name__ = "Integer32"
_Dot1xCurCfgGlobalSupTmout_Object = MibScalar
dot1xCurCfgGlobalSupTmout = _Dot1xCurCfgGlobalSupTmout_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 5, 6),
    _Dot1xCurCfgGlobalSupTmout_Type()
)
dot1xCurCfgGlobalSupTmout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurCfgGlobalSupTmout.setStatus("current")


class _Dot1xCurCfgGlobalSrvTmout_Type(Integer32):
    """Custom type dot1xCurCfgGlobalSrvTmout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Dot1xCurCfgGlobalSrvTmout_Type.__name__ = "Integer32"
_Dot1xCurCfgGlobalSrvTmout_Object = MibScalar
dot1xCurCfgGlobalSrvTmout = _Dot1xCurCfgGlobalSrvTmout_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 5, 7),
    _Dot1xCurCfgGlobalSrvTmout_Type()
)
dot1xCurCfgGlobalSrvTmout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurCfgGlobalSrvTmout.setStatus("current")


class _Dot1xCurCfgGlobalMaxRq_Type(Integer32):
    """Custom type dot1xCurCfgGlobalMaxRq based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_Dot1xCurCfgGlobalMaxRq_Type.__name__ = "Integer32"
_Dot1xCurCfgGlobalMaxRq_Object = MibScalar
dot1xCurCfgGlobalMaxRq = _Dot1xCurCfgGlobalMaxRq_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 5, 8),
    _Dot1xCurCfgGlobalMaxRq_Type()
)
dot1xCurCfgGlobalMaxRq.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurCfgGlobalMaxRq.setStatus("current")


class _Dot1xCurCfgGlobalRaPeriod_Type(Integer32):
    """Custom type dot1xCurCfgGlobalRaPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 604800),
    )


_Dot1xCurCfgGlobalRaPeriod_Type.__name__ = "Integer32"
_Dot1xCurCfgGlobalRaPeriod_Object = MibScalar
dot1xCurCfgGlobalRaPeriod = _Dot1xCurCfgGlobalRaPeriod_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 5, 9),
    _Dot1xCurCfgGlobalRaPeriod_Type()
)
dot1xCurCfgGlobalRaPeriod.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurCfgGlobalRaPeriod.setStatus("current")


class _Dot1xCurCfgGlobalReAuth_Type(Integer32):
    """Custom type dot1xCurCfgGlobalReAuth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_Dot1xCurCfgGlobalReAuth_Type.__name__ = "Integer32"
_Dot1xCurCfgGlobalReAuth_Object = MibScalar
dot1xCurCfgGlobalReAuth = _Dot1xCurCfgGlobalReAuth_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 5, 10),
    _Dot1xCurCfgGlobalReAuth_Type()
)
dot1xCurCfgGlobalReAuth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurCfgGlobalReAuth.setStatus("current")


class _Dot1xCurCfgGlobalVlanAssign_Type(Integer32):
    """Custom type dot1xCurCfgGlobalVlanAssign based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_Dot1xCurCfgGlobalVlanAssign_Type.__name__ = "Integer32"
_Dot1xCurCfgGlobalVlanAssign_Object = MibScalar
dot1xCurCfgGlobalVlanAssign = _Dot1xCurCfgGlobalVlanAssign_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 5, 12),
    _Dot1xCurCfgGlobalVlanAssign_Type()
)
dot1xCurCfgGlobalVlanAssign.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurCfgGlobalVlanAssign.setStatus("current")
_Dot1xNewCfgGlobalTable_ObjectIdentity = ObjectIdentity
dot1xNewCfgGlobalTable = _Dot1xNewCfgGlobalTable_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 6)
)
_Dot1xNewCfgGuestVlan_ObjectIdentity = ObjectIdentity
dot1xNewCfgGuestVlan = _Dot1xNewCfgGuestVlan_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 6, 1)
)


class _Dot1xNewCfgGuestVlanNumber_Type(Integer32):
    """Custom type dot1xNewCfgGuestVlanNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4094),
    )


_Dot1xNewCfgGuestVlanNumber_Type.__name__ = "Integer32"
_Dot1xNewCfgGuestVlanNumber_Object = MibScalar
dot1xNewCfgGuestVlanNumber = _Dot1xNewCfgGuestVlanNumber_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 6, 1, 1),
    _Dot1xNewCfgGuestVlanNumber_Type()
)
dot1xNewCfgGuestVlanNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dot1xNewCfgGuestVlanNumber.setStatus("current")


class _Dot1xNewCfgGuestVlanStatus_Type(Integer32):
    """Custom type dot1xNewCfgGuestVlanStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_Dot1xNewCfgGuestVlanStatus_Type.__name__ = "Integer32"
_Dot1xNewCfgGuestVlanStatus_Object = MibScalar
dot1xNewCfgGuestVlanStatus = _Dot1xNewCfgGuestVlanStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 6, 1, 2),
    _Dot1xNewCfgGuestVlanStatus_Type()
)
dot1xNewCfgGuestVlanStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dot1xNewCfgGuestVlanStatus.setStatus("current")


class _Dot1xNewCfgGlobalMode_Type(Integer32):
    """Custom type dot1xNewCfgGlobalMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("forceUnauth", 0),
          ("auto", 1),
          ("forceAuth", 2))
    )


_Dot1xNewCfgGlobalMode_Type.__name__ = "Integer32"
_Dot1xNewCfgGlobalMode_Object = MibScalar
dot1xNewCfgGlobalMode = _Dot1xNewCfgGlobalMode_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 6, 3),
    _Dot1xNewCfgGlobalMode_Type()
)
dot1xNewCfgGlobalMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgGlobalMode.setStatus("current")


class _Dot1xNewCfgGlobalQtPeriod_Type(Integer32):
    """Custom type dot1xNewCfgGlobalQtPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_Dot1xNewCfgGlobalQtPeriod_Type.__name__ = "Integer32"
_Dot1xNewCfgGlobalQtPeriod_Object = MibScalar
dot1xNewCfgGlobalQtPeriod = _Dot1xNewCfgGlobalQtPeriod_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 6, 4),
    _Dot1xNewCfgGlobalQtPeriod_Type()
)
dot1xNewCfgGlobalQtPeriod.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgGlobalQtPeriod.setStatus("current")


class _Dot1xNewCfgGlobalTxPeriod_Type(Integer32):
    """Custom type dot1xNewCfgGlobalTxPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Dot1xNewCfgGlobalTxPeriod_Type.__name__ = "Integer32"
_Dot1xNewCfgGlobalTxPeriod_Object = MibScalar
dot1xNewCfgGlobalTxPeriod = _Dot1xNewCfgGlobalTxPeriod_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 6, 5),
    _Dot1xNewCfgGlobalTxPeriod_Type()
)
dot1xNewCfgGlobalTxPeriod.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgGlobalTxPeriod.setStatus("current")


class _Dot1xNewCfgGlobalSupTmout_Type(Integer32):
    """Custom type dot1xNewCfgGlobalSupTmout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Dot1xNewCfgGlobalSupTmout_Type.__name__ = "Integer32"
_Dot1xNewCfgGlobalSupTmout_Object = MibScalar
dot1xNewCfgGlobalSupTmout = _Dot1xNewCfgGlobalSupTmout_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 6, 6),
    _Dot1xNewCfgGlobalSupTmout_Type()
)
dot1xNewCfgGlobalSupTmout.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgGlobalSupTmout.setStatus("current")


class _Dot1xNewCfgGlobalSrvTmout_Type(Integer32):
    """Custom type dot1xNewCfgGlobalSrvTmout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Dot1xNewCfgGlobalSrvTmout_Type.__name__ = "Integer32"
_Dot1xNewCfgGlobalSrvTmout_Object = MibScalar
dot1xNewCfgGlobalSrvTmout = _Dot1xNewCfgGlobalSrvTmout_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 6, 7),
    _Dot1xNewCfgGlobalSrvTmout_Type()
)
dot1xNewCfgGlobalSrvTmout.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgGlobalSrvTmout.setStatus("current")


class _Dot1xNewCfgGlobalMaxRq_Type(Integer32):
    """Custom type dot1xNewCfgGlobalMaxRq based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_Dot1xNewCfgGlobalMaxRq_Type.__name__ = "Integer32"
_Dot1xNewCfgGlobalMaxRq_Object = MibScalar
dot1xNewCfgGlobalMaxRq = _Dot1xNewCfgGlobalMaxRq_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 6, 8),
    _Dot1xNewCfgGlobalMaxRq_Type()
)
dot1xNewCfgGlobalMaxRq.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgGlobalMaxRq.setStatus("current")


class _Dot1xNewCfgGlobalRaPeriod_Type(Integer32):
    """Custom type dot1xNewCfgGlobalRaPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 604800),
    )


_Dot1xNewCfgGlobalRaPeriod_Type.__name__ = "Integer32"
_Dot1xNewCfgGlobalRaPeriod_Object = MibScalar
dot1xNewCfgGlobalRaPeriod = _Dot1xNewCfgGlobalRaPeriod_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 6, 9),
    _Dot1xNewCfgGlobalRaPeriod_Type()
)
dot1xNewCfgGlobalRaPeriod.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgGlobalRaPeriod.setStatus("current")


class _Dot1xNewCfgGlobalReAuth_Type(Integer32):
    """Custom type dot1xNewCfgGlobalReAuth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_Dot1xNewCfgGlobalReAuth_Type.__name__ = "Integer32"
_Dot1xNewCfgGlobalReAuth_Object = MibScalar
dot1xNewCfgGlobalReAuth = _Dot1xNewCfgGlobalReAuth_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 6, 10),
    _Dot1xNewCfgGlobalReAuth_Type()
)
dot1xNewCfgGlobalReAuth.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgGlobalReAuth.setStatus("current")


class _Dot1xNewCfgGlobalDefault_Type(Integer32):
    """Custom type dot1xNewCfgGlobalDefault based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("other", 0),
          ("apply", 1))
    )


_Dot1xNewCfgGlobalDefault_Type.__name__ = "Integer32"
_Dot1xNewCfgGlobalDefault_Object = MibScalar
dot1xNewCfgGlobalDefault = _Dot1xNewCfgGlobalDefault_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 6, 11),
    _Dot1xNewCfgGlobalDefault_Type()
)
dot1xNewCfgGlobalDefault.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgGlobalDefault.setStatus("current")


class _Dot1xNewCfgGlobalVlanAssign_Type(Integer32):
    """Custom type dot1xNewCfgGlobalVlanAssign based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_Dot1xNewCfgGlobalVlanAssign_Type.__name__ = "Integer32"
_Dot1xNewCfgGlobalVlanAssign_Object = MibScalar
dot1xNewCfgGlobalVlanAssign = _Dot1xNewCfgGlobalVlanAssign_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 12, 6, 12),
    _Dot1xNewCfgGlobalVlanAssign_Type()
)
dot1xNewCfgGlobalVlanAssign.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgGlobalVlanAssign.setStatus("current")
_Fdb_ObjectIdentity = ObjectIdentity
fdb = _Fdb_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 13)
)
_FdbGeneralCfg_ObjectIdentity = ObjectIdentity
fdbGeneralCfg = _FdbGeneralCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 13, 1)
)
_FdbCurCfgAgingTime_Type = Integer32
_FdbCurCfgAgingTime_Object = MibScalar
fdbCurCfgAgingTime = _FdbCurCfgAgingTime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 13, 1, 1),
    _FdbCurCfgAgingTime_Type()
)
fdbCurCfgAgingTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbCurCfgAgingTime.setStatus("current")
_FdbNewCfgAgingTime_Type = Integer32
_FdbNewCfgAgingTime_Object = MibScalar
fdbNewCfgAgingTime = _FdbNewCfgAgingTime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 13, 1, 2),
    _FdbNewCfgAgingTime_Type()
)
fdbNewCfgAgingTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fdbNewCfgAgingTime.setStatus("current")
_FdbCurCfgStaticTable_Object = MibTable
fdbCurCfgStaticTable = _FdbCurCfgStaticTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 13, 2)
)
if mibBuilder.loadTexts:
    fdbCurCfgStaticTable.setStatus("current")
_FdbCurCfgStaticEntry_Object = MibTableRow
fdbCurCfgStaticEntry = _FdbCurCfgStaticEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 13, 2, 1)
)
fdbCurCfgStaticEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "fdbCurCfgEntryIndex"),
)
if mibBuilder.loadTexts:
    fdbCurCfgStaticEntry.setStatus("current")
_FdbCurCfgEntryIndex_Type = Integer32
_FdbCurCfgEntryIndex_Object = MibTableColumn
fdbCurCfgEntryIndex = _FdbCurCfgEntryIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 13, 2, 1, 1),
    _FdbCurCfgEntryIndex_Type()
)
fdbCurCfgEntryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbCurCfgEntryIndex.setStatus("current")
_FdbCurCfgVlan_Type = Integer32
_FdbCurCfgVlan_Object = MibTableColumn
fdbCurCfgVlan = _FdbCurCfgVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 13, 2, 1, 2),
    _FdbCurCfgVlan_Type()
)
fdbCurCfgVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbCurCfgVlan.setStatus("current")
_FdbCurCfgPort_Type = PortNumber
_FdbCurCfgPort_Object = MibTableColumn
fdbCurCfgPort = _FdbCurCfgPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 13, 2, 1, 3),
    _FdbCurCfgPort_Type()
)
fdbCurCfgPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbCurCfgPort.setStatus("current")
_FdbCurCfgMac_Type = PhysAddress
_FdbCurCfgMac_Object = MibTableColumn
fdbCurCfgMac = _FdbCurCfgMac_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 13, 2, 1, 4),
    _FdbCurCfgMac_Type()
)
fdbCurCfgMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbCurCfgMac.setStatus("current")
_FdbCurCfgTrunk_Type = Integer32
_FdbCurCfgTrunk_Object = MibTableColumn
fdbCurCfgTrunk = _FdbCurCfgTrunk_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 13, 2, 1, 5),
    _FdbCurCfgTrunk_Type()
)
fdbCurCfgTrunk.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbCurCfgTrunk.setStatus("current")
_FdbCurCfgAdminkey_Type = Integer32
_FdbCurCfgAdminkey_Object = MibTableColumn
fdbCurCfgAdminkey = _FdbCurCfgAdminkey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 13, 2, 1, 6),
    _FdbCurCfgAdminkey_Type()
)
fdbCurCfgAdminkey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbCurCfgAdminkey.setStatus("current")
_FdbNewCfgStaticTable_Object = MibTable
fdbNewCfgStaticTable = _FdbNewCfgStaticTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 13, 3)
)
if mibBuilder.loadTexts:
    fdbNewCfgStaticTable.setStatus("current")
_FdbNewCfgStaticEntry_Object = MibTableRow
fdbNewCfgStaticEntry = _FdbNewCfgStaticEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 13, 3, 1)
)
fdbNewCfgStaticEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "fdbNewCfgEntryIndex"),
)
if mibBuilder.loadTexts:
    fdbNewCfgStaticEntry.setStatus("current")
_FdbNewCfgEntryIndex_Type = Integer32
_FdbNewCfgEntryIndex_Object = MibTableColumn
fdbNewCfgEntryIndex = _FdbNewCfgEntryIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 13, 3, 1, 1),
    _FdbNewCfgEntryIndex_Type()
)
fdbNewCfgEntryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbNewCfgEntryIndex.setStatus("current")
_FdbNewCfgAddVlan_Type = Integer32
_FdbNewCfgAddVlan_Object = MibTableColumn
fdbNewCfgAddVlan = _FdbNewCfgAddVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 13, 3, 1, 2),
    _FdbNewCfgAddVlan_Type()
)
fdbNewCfgAddVlan.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    fdbNewCfgAddVlan.setStatus("current")
_FdbNewCfgAddPort_Type = PortNumber
_FdbNewCfgAddPort_Object = MibTableColumn
fdbNewCfgAddPort = _FdbNewCfgAddPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 13, 3, 1, 3),
    _FdbNewCfgAddPort_Type()
)
fdbNewCfgAddPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    fdbNewCfgAddPort.setStatus("current")
_FdbNewCfgAddMac_Type = PhysAddress
_FdbNewCfgAddMac_Object = MibTableColumn
fdbNewCfgAddMac = _FdbNewCfgAddMac_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 13, 3, 1, 4),
    _FdbNewCfgAddMac_Type()
)
fdbNewCfgAddMac.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    fdbNewCfgAddMac.setStatus("current")


class _FdbNewCfgDelStaticEntry_Type(Integer32):
    """Custom type fdbNewCfgDelStaticEntry based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_FdbNewCfgDelStaticEntry_Type.__name__ = "Integer32"
_FdbNewCfgDelStaticEntry_Object = MibTableColumn
fdbNewCfgDelStaticEntry = _FdbNewCfgDelStaticEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 13, 3, 1, 5),
    _FdbNewCfgDelStaticEntry_Type()
)
fdbNewCfgDelStaticEntry.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    fdbNewCfgDelStaticEntry.setStatus("current")
_FdbNewCfgAddTrunk_Type = Integer32
_FdbNewCfgAddTrunk_Object = MibTableColumn
fdbNewCfgAddTrunk = _FdbNewCfgAddTrunk_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 13, 3, 1, 6),
    _FdbNewCfgAddTrunk_Type()
)
fdbNewCfgAddTrunk.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    fdbNewCfgAddTrunk.setStatus("current")
_FdbNewCfgAddAdminkey_Type = Integer32
_FdbNewCfgAddAdminkey_Object = MibTableColumn
fdbNewCfgAddAdminkey = _FdbNewCfgAddAdminkey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 13, 3, 1, 7),
    _FdbNewCfgAddAdminkey_Type()
)
fdbNewCfgAddAdminkey.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    fdbNewCfgAddAdminkey.setStatus("current")
_McastFdbCurCfgTable_Object = MibTable
mcastFdbCurCfgTable = _McastFdbCurCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 13, 8)
)
if mibBuilder.loadTexts:
    mcastFdbCurCfgTable.setStatus("current")
_McastFdbCurCfgEntry_Object = MibTableRow
mcastFdbCurCfgEntry = _McastFdbCurCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 13, 8, 1)
)
mcastFdbCurCfgEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "mcastFdbCurCfgEntryIndex"),
)
if mibBuilder.loadTexts:
    mcastFdbCurCfgEntry.setStatus("current")
_McastFdbCurCfgEntryIndex_Type = Integer32
_McastFdbCurCfgEntryIndex_Object = MibTableColumn
mcastFdbCurCfgEntryIndex = _McastFdbCurCfgEntryIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 13, 8, 1, 1),
    _McastFdbCurCfgEntryIndex_Type()
)
mcastFdbCurCfgEntryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcastFdbCurCfgEntryIndex.setStatus("current")
_McastFdbCurCfgVlan_Type = Integer32
_McastFdbCurCfgVlan_Object = MibTableColumn
mcastFdbCurCfgVlan = _McastFdbCurCfgVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 13, 8, 1, 2),
    _McastFdbCurCfgVlan_Type()
)
mcastFdbCurCfgVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcastFdbCurCfgVlan.setStatus("current")
_McastFdbCurCfgPorts_Type = PortNumber
_McastFdbCurCfgPorts_Object = MibTableColumn
mcastFdbCurCfgPorts = _McastFdbCurCfgPorts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 13, 8, 1, 3),
    _McastFdbCurCfgPorts_Type()
)
mcastFdbCurCfgPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcastFdbCurCfgPorts.setStatus("current")
_McastFdbCurCfgMac_Type = MacAddress
_McastFdbCurCfgMac_Object = MibTableColumn
mcastFdbCurCfgMac = _McastFdbCurCfgMac_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 13, 8, 1, 4),
    _McastFdbCurCfgMac_Type()
)
mcastFdbCurCfgMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcastFdbCurCfgMac.setStatus("current")
_McastFdbNewCfgTable_Object = MibTable
mcastFdbNewCfgTable = _McastFdbNewCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 13, 9)
)
if mibBuilder.loadTexts:
    mcastFdbNewCfgTable.setStatus("current")
_McastFdbNewCfgEntry_Object = MibTableRow
mcastFdbNewCfgEntry = _McastFdbNewCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 13, 9, 1)
)
mcastFdbNewCfgEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "mcastFdbNewCfgEntryIndex"),
)
if mibBuilder.loadTexts:
    mcastFdbNewCfgEntry.setStatus("current")
_McastFdbNewCfgEntryIndex_Type = Integer32
_McastFdbNewCfgEntryIndex_Object = MibTableColumn
mcastFdbNewCfgEntryIndex = _McastFdbNewCfgEntryIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 13, 9, 1, 1),
    _McastFdbNewCfgEntryIndex_Type()
)
mcastFdbNewCfgEntryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcastFdbNewCfgEntryIndex.setStatus("current")
_McastFdbNewCfgAddVlan_Type = Integer32
_McastFdbNewCfgAddVlan_Object = MibTableColumn
mcastFdbNewCfgAddVlan = _McastFdbNewCfgAddVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 13, 9, 1, 2),
    _McastFdbNewCfgAddVlan_Type()
)
mcastFdbNewCfgAddVlan.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mcastFdbNewCfgAddVlan.setStatus("current")
_McastFdbNewCfgPorts_Type = OctetString
_McastFdbNewCfgPorts_Object = MibTableColumn
mcastFdbNewCfgPorts = _McastFdbNewCfgPorts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 13, 9, 1, 3),
    _McastFdbNewCfgPorts_Type()
)
mcastFdbNewCfgPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcastFdbNewCfgPorts.setStatus("current")
_McastFdbNewCfgAddPort_Type = PortNumber
_McastFdbNewCfgAddPort_Object = MibTableColumn
mcastFdbNewCfgAddPort = _McastFdbNewCfgAddPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 13, 9, 1, 4),
    _McastFdbNewCfgAddPort_Type()
)
mcastFdbNewCfgAddPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mcastFdbNewCfgAddPort.setStatus("current")
_McastFdbNewCfgRemPort_Type = PortNumber
_McastFdbNewCfgRemPort_Object = MibTableColumn
mcastFdbNewCfgRemPort = _McastFdbNewCfgRemPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 13, 9, 1, 5),
    _McastFdbNewCfgRemPort_Type()
)
mcastFdbNewCfgRemPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mcastFdbNewCfgRemPort.setStatus("current")
_McastFdbNewCfgAddMac_Type = MacAddress
_McastFdbNewCfgAddMac_Object = MibTableColumn
mcastFdbNewCfgAddMac = _McastFdbNewCfgAddMac_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 13, 9, 1, 6),
    _McastFdbNewCfgAddMac_Type()
)
mcastFdbNewCfgAddMac.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mcastFdbNewCfgAddMac.setStatus("current")


class _McastFdbNewCfgDelStaticEntry_Type(Integer32):
    """Custom type mcastFdbNewCfgDelStaticEntry based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_McastFdbNewCfgDelStaticEntry_Type.__name__ = "Integer32"
_McastFdbNewCfgDelStaticEntry_Object = MibTableColumn
mcastFdbNewCfgDelStaticEntry = _McastFdbNewCfgDelStaticEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 13, 9, 1, 7),
    _McastFdbNewCfgDelStaticEntry_Type()
)
mcastFdbNewCfgDelStaticEntry.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mcastFdbNewCfgDelStaticEntry.setStatus("current")
_HotlinksCfg_ObjectIdentity = ObjectIdentity
hotlinksCfg = _HotlinksCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 14)
)


class _HotlinksCurCfgOnState_Type(Integer32):
    """Custom type hotlinksCurCfgOnState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_HotlinksCurCfgOnState_Type.__name__ = "Integer32"
_HotlinksCurCfgOnState_Object = MibScalar
hotlinksCurCfgOnState = _HotlinksCurCfgOnState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 14, 1),
    _HotlinksCurCfgOnState_Type()
)
hotlinksCurCfgOnState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotlinksCurCfgOnState.setStatus("current")


class _HotlinksNewCfgOnState_Type(Integer32):
    """Custom type hotlinksNewCfgOnState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_HotlinksNewCfgOnState_Type.__name__ = "Integer32"
_HotlinksNewCfgOnState_Object = MibScalar
hotlinksNewCfgOnState = _HotlinksNewCfgOnState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 14, 2),
    _HotlinksNewCfgOnState_Type()
)
hotlinksNewCfgOnState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    hotlinksNewCfgOnState.setStatus("current")


class _HotlinksCurCfgFdbUpdateState_Type(Integer32):
    """Custom type hotlinksCurCfgFdbUpdateState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_HotlinksCurCfgFdbUpdateState_Type.__name__ = "Integer32"
_HotlinksCurCfgFdbUpdateState_Object = MibScalar
hotlinksCurCfgFdbUpdateState = _HotlinksCurCfgFdbUpdateState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 14, 3),
    _HotlinksCurCfgFdbUpdateState_Type()
)
hotlinksCurCfgFdbUpdateState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotlinksCurCfgFdbUpdateState.setStatus("current")


class _HotlinksNewCfgFdbUpdateState_Type(Integer32):
    """Custom type hotlinksNewCfgFdbUpdateState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_HotlinksNewCfgFdbUpdateState_Type.__name__ = "Integer32"
_HotlinksNewCfgFdbUpdateState_Object = MibScalar
hotlinksNewCfgFdbUpdateState = _HotlinksNewCfgFdbUpdateState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 14, 4),
    _HotlinksNewCfgFdbUpdateState_Type()
)
hotlinksNewCfgFdbUpdateState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    hotlinksNewCfgFdbUpdateState.setStatus("current")
_HotlinksMaxTriggerEntries_Type = Integer32
_HotlinksMaxTriggerEntries_Object = MibScalar
hotlinksMaxTriggerEntries = _HotlinksMaxTriggerEntries_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 14, 5),
    _HotlinksMaxTriggerEntries_Type()
)
hotlinksMaxTriggerEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotlinksMaxTriggerEntries.setStatus("current")
_HotlinksCurCfgTriggerTable_Object = MibTable
hotlinksCurCfgTriggerTable = _HotlinksCurCfgTriggerTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 14, 6)
)
if mibBuilder.loadTexts:
    hotlinksCurCfgTriggerTable.setStatus("current")
_HotlinksCurCfgTriggerTableEntry_Object = MibTableRow
hotlinksCurCfgTriggerTableEntry = _HotlinksCurCfgTriggerTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 14, 6, 1)
)
hotlinksCurCfgTriggerTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "hotlinksCurCfgTriggerId"),
)
if mibBuilder.loadTexts:
    hotlinksCurCfgTriggerTableEntry.setStatus("current")
_HotlinksCurCfgTriggerId_Type = Integer32
_HotlinksCurCfgTriggerId_Object = MibTableColumn
hotlinksCurCfgTriggerId = _HotlinksCurCfgTriggerId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 14, 6, 1, 1),
    _HotlinksCurCfgTriggerId_Type()
)
hotlinksCurCfgTriggerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotlinksCurCfgTriggerId.setStatus("current")
_HotlinksCurCfgTriggerName_Type = DisplayString
_HotlinksCurCfgTriggerName_Object = MibTableColumn
hotlinksCurCfgTriggerName = _HotlinksCurCfgTriggerName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 14, 6, 1, 2),
    _HotlinksCurCfgTriggerName_Type()
)
hotlinksCurCfgTriggerName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotlinksCurCfgTriggerName.setStatus("current")


class _HotlinksCurCfgTriggerState_Type(Integer32):
    """Custom type hotlinksCurCfgTriggerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_HotlinksCurCfgTriggerState_Type.__name__ = "Integer32"
_HotlinksCurCfgTriggerState_Object = MibTableColumn
hotlinksCurCfgTriggerState = _HotlinksCurCfgTriggerState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 14, 6, 1, 3),
    _HotlinksCurCfgTriggerState_Type()
)
hotlinksCurCfgTriggerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotlinksCurCfgTriggerState.setStatus("current")


class _HotlinksCurCfgTriggerPreemptState_Type(Integer32):
    """Custom type hotlinksCurCfgTriggerPreemptState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_HotlinksCurCfgTriggerPreemptState_Type.__name__ = "Integer32"
_HotlinksCurCfgTriggerPreemptState_Object = MibTableColumn
hotlinksCurCfgTriggerPreemptState = _HotlinksCurCfgTriggerPreemptState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 14, 6, 1, 4),
    _HotlinksCurCfgTriggerPreemptState_Type()
)
hotlinksCurCfgTriggerPreemptState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotlinksCurCfgTriggerPreemptState.setStatus("current")
_HotlinksCurCfgTriggerFdelay_Type = Integer32
_HotlinksCurCfgTriggerFdelay_Object = MibTableColumn
hotlinksCurCfgTriggerFdelay = _HotlinksCurCfgTriggerFdelay_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 14, 6, 1, 5),
    _HotlinksCurCfgTriggerFdelay_Type()
)
hotlinksCurCfgTriggerFdelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotlinksCurCfgTriggerFdelay.setStatus("current")
_HotlinksCurCfgTriggerMasterPort_Type = Integer32
_HotlinksCurCfgTriggerMasterPort_Object = MibTableColumn
hotlinksCurCfgTriggerMasterPort = _HotlinksCurCfgTriggerMasterPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 14, 6, 1, 6),
    _HotlinksCurCfgTriggerMasterPort_Type()
)
hotlinksCurCfgTriggerMasterPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotlinksCurCfgTriggerMasterPort.setStatus("current")
_HotlinksCurCfgTriggerMasterTrunk_Type = Integer32
_HotlinksCurCfgTriggerMasterTrunk_Object = MibTableColumn
hotlinksCurCfgTriggerMasterTrunk = _HotlinksCurCfgTriggerMasterTrunk_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 14, 6, 1, 7),
    _HotlinksCurCfgTriggerMasterTrunk_Type()
)
hotlinksCurCfgTriggerMasterTrunk.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotlinksCurCfgTriggerMasterTrunk.setStatus("current")
_HotlinksCurCfgTriggerBackupPort_Type = Integer32
_HotlinksCurCfgTriggerBackupPort_Object = MibTableColumn
hotlinksCurCfgTriggerBackupPort = _HotlinksCurCfgTriggerBackupPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 14, 6, 1, 8),
    _HotlinksCurCfgTriggerBackupPort_Type()
)
hotlinksCurCfgTriggerBackupPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotlinksCurCfgTriggerBackupPort.setStatus("current")
_HotlinksCurCfgTriggerBackupTrunk_Type = Integer32
_HotlinksCurCfgTriggerBackupTrunk_Object = MibTableColumn
hotlinksCurCfgTriggerBackupTrunk = _HotlinksCurCfgTriggerBackupTrunk_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 14, 6, 1, 9),
    _HotlinksCurCfgTriggerBackupTrunk_Type()
)
hotlinksCurCfgTriggerBackupTrunk.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotlinksCurCfgTriggerBackupTrunk.setStatus("current")


class _HotlinksCurCfgTriggerDelete_Type(Integer32):
    """Custom type hotlinksCurCfgTriggerDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_HotlinksCurCfgTriggerDelete_Type.__name__ = "Integer32"
_HotlinksCurCfgTriggerDelete_Object = MibTableColumn
hotlinksCurCfgTriggerDelete = _HotlinksCurCfgTriggerDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 14, 6, 1, 10),
    _HotlinksCurCfgTriggerDelete_Type()
)
hotlinksCurCfgTriggerDelete.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotlinksCurCfgTriggerDelete.setStatus("current")
_HotlinksCurCfgTriggerMasterAdminkey_Type = Integer32
_HotlinksCurCfgTriggerMasterAdminkey_Object = MibTableColumn
hotlinksCurCfgTriggerMasterAdminkey = _HotlinksCurCfgTriggerMasterAdminkey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 14, 6, 1, 11),
    _HotlinksCurCfgTriggerMasterAdminkey_Type()
)
hotlinksCurCfgTriggerMasterAdminkey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotlinksCurCfgTriggerMasterAdminkey.setStatus("current")
_HotlinksCurCfgTriggerBackupAdminkey_Type = Integer32
_HotlinksCurCfgTriggerBackupAdminkey_Object = MibTableColumn
hotlinksCurCfgTriggerBackupAdminkey = _HotlinksCurCfgTriggerBackupAdminkey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 14, 6, 1, 12),
    _HotlinksCurCfgTriggerBackupAdminkey_Type()
)
hotlinksCurCfgTriggerBackupAdminkey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotlinksCurCfgTriggerBackupAdminkey.setStatus("current")
_HotlinksNewCfgTriggerTable_Object = MibTable
hotlinksNewCfgTriggerTable = _HotlinksNewCfgTriggerTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 14, 7)
)
if mibBuilder.loadTexts:
    hotlinksNewCfgTriggerTable.setStatus("current")
_HotlinksNewCfgTriggerTableEntry_Object = MibTableRow
hotlinksNewCfgTriggerTableEntry = _HotlinksNewCfgTriggerTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 14, 7, 1)
)
hotlinksNewCfgTriggerTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "hotlinksNewCfgTriggerId"),
)
if mibBuilder.loadTexts:
    hotlinksNewCfgTriggerTableEntry.setStatus("current")
_HotlinksNewCfgTriggerId_Type = Integer32
_HotlinksNewCfgTriggerId_Object = MibTableColumn
hotlinksNewCfgTriggerId = _HotlinksNewCfgTriggerId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 14, 7, 1, 1),
    _HotlinksNewCfgTriggerId_Type()
)
hotlinksNewCfgTriggerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotlinksNewCfgTriggerId.setStatus("current")


class _HotlinksNewCfgTriggerName_Type(DisplayString):
    """Custom type hotlinksNewCfgTriggerName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 33),
    )


_HotlinksNewCfgTriggerName_Type.__name__ = "DisplayString"
_HotlinksNewCfgTriggerName_Object = MibTableColumn
hotlinksNewCfgTriggerName = _HotlinksNewCfgTriggerName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 14, 7, 1, 2),
    _HotlinksNewCfgTriggerName_Type()
)
hotlinksNewCfgTriggerName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    hotlinksNewCfgTriggerName.setStatus("current")


class _HotlinksNewCfgTriggerState_Type(Integer32):
    """Custom type hotlinksNewCfgTriggerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_HotlinksNewCfgTriggerState_Type.__name__ = "Integer32"
_HotlinksNewCfgTriggerState_Object = MibTableColumn
hotlinksNewCfgTriggerState = _HotlinksNewCfgTriggerState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 14, 7, 1, 3),
    _HotlinksNewCfgTriggerState_Type()
)
hotlinksNewCfgTriggerState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    hotlinksNewCfgTriggerState.setStatus("current")


class _HotlinksNewCfgTriggerPreemptState_Type(Integer32):
    """Custom type hotlinksNewCfgTriggerPreemptState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_HotlinksNewCfgTriggerPreemptState_Type.__name__ = "Integer32"
_HotlinksNewCfgTriggerPreemptState_Object = MibTableColumn
hotlinksNewCfgTriggerPreemptState = _HotlinksNewCfgTriggerPreemptState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 14, 7, 1, 4),
    _HotlinksNewCfgTriggerPreemptState_Type()
)
hotlinksNewCfgTriggerPreemptState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    hotlinksNewCfgTriggerPreemptState.setStatus("current")
_HotlinksNewCfgTriggerFdelay_Type = Integer32
_HotlinksNewCfgTriggerFdelay_Object = MibTableColumn
hotlinksNewCfgTriggerFdelay = _HotlinksNewCfgTriggerFdelay_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 14, 7, 1, 5),
    _HotlinksNewCfgTriggerFdelay_Type()
)
hotlinksNewCfgTriggerFdelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    hotlinksNewCfgTriggerFdelay.setStatus("current")
_HotlinksNewCfgTriggerMasterPort_Type = Integer32
_HotlinksNewCfgTriggerMasterPort_Object = MibTableColumn
hotlinksNewCfgTriggerMasterPort = _HotlinksNewCfgTriggerMasterPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 14, 7, 1, 6),
    _HotlinksNewCfgTriggerMasterPort_Type()
)
hotlinksNewCfgTriggerMasterPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    hotlinksNewCfgTriggerMasterPort.setStatus("current")
_HotlinksNewCfgTriggerMasterTrunk_Type = Integer32
_HotlinksNewCfgTriggerMasterTrunk_Object = MibTableColumn
hotlinksNewCfgTriggerMasterTrunk = _HotlinksNewCfgTriggerMasterTrunk_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 14, 7, 1, 7),
    _HotlinksNewCfgTriggerMasterTrunk_Type()
)
hotlinksNewCfgTriggerMasterTrunk.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    hotlinksNewCfgTriggerMasterTrunk.setStatus("current")
_HotlinksNewCfgTriggerBackupPort_Type = Integer32
_HotlinksNewCfgTriggerBackupPort_Object = MibTableColumn
hotlinksNewCfgTriggerBackupPort = _HotlinksNewCfgTriggerBackupPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 14, 7, 1, 8),
    _HotlinksNewCfgTriggerBackupPort_Type()
)
hotlinksNewCfgTriggerBackupPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    hotlinksNewCfgTriggerBackupPort.setStatus("current")
_HotlinksNewCfgTriggerBackupTrunk_Type = Integer32
_HotlinksNewCfgTriggerBackupTrunk_Object = MibTableColumn
hotlinksNewCfgTriggerBackupTrunk = _HotlinksNewCfgTriggerBackupTrunk_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 14, 7, 1, 9),
    _HotlinksNewCfgTriggerBackupTrunk_Type()
)
hotlinksNewCfgTriggerBackupTrunk.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    hotlinksNewCfgTriggerBackupTrunk.setStatus("current")


class _HotlinksNewCfgTriggerDelete_Type(Integer32):
    """Custom type hotlinksNewCfgTriggerDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_HotlinksNewCfgTriggerDelete_Type.__name__ = "Integer32"
_HotlinksNewCfgTriggerDelete_Object = MibTableColumn
hotlinksNewCfgTriggerDelete = _HotlinksNewCfgTriggerDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 14, 7, 1, 10),
    _HotlinksNewCfgTriggerDelete_Type()
)
hotlinksNewCfgTriggerDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    hotlinksNewCfgTriggerDelete.setStatus("current")
_HotlinksNewCfgTriggerMasterAdminkey_Type = Integer32
_HotlinksNewCfgTriggerMasterAdminkey_Object = MibTableColumn
hotlinksNewCfgTriggerMasterAdminkey = _HotlinksNewCfgTriggerMasterAdminkey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 14, 7, 1, 11),
    _HotlinksNewCfgTriggerMasterAdminkey_Type()
)
hotlinksNewCfgTriggerMasterAdminkey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    hotlinksNewCfgTriggerMasterAdminkey.setStatus("current")
_HotlinksNewCfgTriggerBackupAdminkey_Type = Integer32
_HotlinksNewCfgTriggerBackupAdminkey_Object = MibTableColumn
hotlinksNewCfgTriggerBackupAdminkey = _HotlinksNewCfgTriggerBackupAdminkey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 14, 7, 1, 12),
    _HotlinksNewCfgTriggerBackupAdminkey_Type()
)
hotlinksNewCfgTriggerBackupAdminkey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    hotlinksNewCfgTriggerBackupAdminkey.setStatus("current")


class _HotlinksCurCfgBpduState_Type(Integer32):
    """Custom type hotlinksCurCfgBpduState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_HotlinksCurCfgBpduState_Type.__name__ = "Integer32"
_HotlinksCurCfgBpduState_Object = MibScalar
hotlinksCurCfgBpduState = _HotlinksCurCfgBpduState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 14, 8),
    _HotlinksCurCfgBpduState_Type()
)
hotlinksCurCfgBpduState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotlinksCurCfgBpduState.setStatus("current")


class _HotlinksNewCfgBpduState_Type(Integer32):
    """Custom type hotlinksNewCfgBpduState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_HotlinksNewCfgBpduState_Type.__name__ = "Integer32"
_HotlinksNewCfgBpduState_Object = MibScalar
hotlinksNewCfgBpduState = _HotlinksNewCfgBpduState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 14, 9),
    _HotlinksNewCfgBpduState_Type()
)
hotlinksNewCfgBpduState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    hotlinksNewCfgBpduState.setStatus("current")
_HotlinksCurCfgFdbUpdateRate_Type = Integer32
_HotlinksCurCfgFdbUpdateRate_Object = MibScalar
hotlinksCurCfgFdbUpdateRate = _HotlinksCurCfgFdbUpdateRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 14, 10),
    _HotlinksCurCfgFdbUpdateRate_Type()
)
hotlinksCurCfgFdbUpdateRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotlinksCurCfgFdbUpdateRate.setStatus("current")
_HotlinksNewCfgFdbUpdateRate_Type = Integer32
_HotlinksNewCfgFdbUpdateRate_Object = MibScalar
hotlinksNewCfgFdbUpdateRate = _HotlinksNewCfgFdbUpdateRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 14, 11),
    _HotlinksNewCfgFdbUpdateRate_Type()
)
hotlinksNewCfgFdbUpdateRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    hotlinksNewCfgFdbUpdateRate.setStatus("current")
_LldpCfg_ObjectIdentity = ObjectIdentity
lldpCfg = _LldpCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15)
)
_LldpPortTableMaxEnt_Type = Integer32
_LldpPortTableMaxEnt_Object = MibScalar
lldpPortTableMaxEnt = _LldpPortTableMaxEnt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 1),
    _LldpPortTableMaxEnt_Type()
)
lldpPortTableMaxEnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpPortTableMaxEnt.setStatus("current")
_LldpCurCfgPortTable_Object = MibTable
lldpCurCfgPortTable = _LldpCurCfgPortTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 2)
)
if mibBuilder.loadTexts:
    lldpCurCfgPortTable.setStatus("current")
_LldpCurCfgPortEntry_Object = MibTableRow
lldpCurCfgPortEntry = _LldpCurCfgPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 2, 1)
)
lldpCurCfgPortEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "lldpCurCfgPortIndx"),
)
if mibBuilder.loadTexts:
    lldpCurCfgPortEntry.setStatus("current")
_LldpCurCfgPortIndx_Type = PortNumber
_LldpCurCfgPortIndx_Object = MibTableColumn
lldpCurCfgPortIndx = _LldpCurCfgPortIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 2, 1, 1),
    _LldpCurCfgPortIndx_Type()
)
lldpCurCfgPortIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpCurCfgPortIndx.setStatus("current")


class _LldpCurCfgPortAdmStat_Type(Integer32):
    """Custom type lldpCurCfgPortAdmStat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("enabledTxOnly", 1),
          ("enabledRxOnly", 2),
          ("enabledRxTx", 3),
          ("disabled", 4))
    )


_LldpCurCfgPortAdmStat_Type.__name__ = "Integer32"
_LldpCurCfgPortAdmStat_Object = MibTableColumn
lldpCurCfgPortAdmStat = _LldpCurCfgPortAdmStat_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 2, 1, 2),
    _LldpCurCfgPortAdmStat_Type()
)
lldpCurCfgPortAdmStat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpCurCfgPortAdmStat.setStatus("current")


class _LldpCurCfgPortSnmpTrap_Type(Integer32):
    """Custom type lldpCurCfgPortSnmpTrap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpCurCfgPortSnmpTrap_Type.__name__ = "Integer32"
_LldpCurCfgPortSnmpTrap_Object = MibTableColumn
lldpCurCfgPortSnmpTrap = _LldpCurCfgPortSnmpTrap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 2, 1, 3),
    _LldpCurCfgPortSnmpTrap_Type()
)
lldpCurCfgPortSnmpTrap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpCurCfgPortSnmpTrap.setStatus("current")


class _LldpCurCfgPortportdesctlv_Type(Integer32):
    """Custom type lldpCurCfgPortportdesctlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpCurCfgPortportdesctlv_Type.__name__ = "Integer32"
_LldpCurCfgPortportdesctlv_Object = MibTableColumn
lldpCurCfgPortportdesctlv = _LldpCurCfgPortportdesctlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 2, 1, 4),
    _LldpCurCfgPortportdesctlv_Type()
)
lldpCurCfgPortportdesctlv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpCurCfgPortportdesctlv.setStatus("current")


class _LldpCurCfgPortsysnametlv_Type(Integer32):
    """Custom type lldpCurCfgPortsysnametlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpCurCfgPortsysnametlv_Type.__name__ = "Integer32"
_LldpCurCfgPortsysnametlv_Object = MibTableColumn
lldpCurCfgPortsysnametlv = _LldpCurCfgPortsysnametlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 2, 1, 5),
    _LldpCurCfgPortsysnametlv_Type()
)
lldpCurCfgPortsysnametlv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpCurCfgPortsysnametlv.setStatus("current")


class _LldpCurCfgPortsysdescrtlv_Type(Integer32):
    """Custom type lldpCurCfgPortsysdescrtlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpCurCfgPortsysdescrtlv_Type.__name__ = "Integer32"
_LldpCurCfgPortsysdescrtlv_Object = MibTableColumn
lldpCurCfgPortsysdescrtlv = _LldpCurCfgPortsysdescrtlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 2, 1, 6),
    _LldpCurCfgPortsysdescrtlv_Type()
)
lldpCurCfgPortsysdescrtlv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpCurCfgPortsysdescrtlv.setStatus("current")


class _LldpCurCfgPortsyscaptlv_Type(Integer32):
    """Custom type lldpCurCfgPortsyscaptlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpCurCfgPortsyscaptlv_Type.__name__ = "Integer32"
_LldpCurCfgPortsyscaptlv_Object = MibTableColumn
lldpCurCfgPortsyscaptlv = _LldpCurCfgPortsyscaptlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 2, 1, 7),
    _LldpCurCfgPortsyscaptlv_Type()
)
lldpCurCfgPortsyscaptlv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpCurCfgPortsyscaptlv.setStatus("current")


class _LldpCurCfgPortmgmtaddrtlv_Type(Integer32):
    """Custom type lldpCurCfgPortmgmtaddrtlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpCurCfgPortmgmtaddrtlv_Type.__name__ = "Integer32"
_LldpCurCfgPortmgmtaddrtlv_Object = MibTableColumn
lldpCurCfgPortmgmtaddrtlv = _LldpCurCfgPortmgmtaddrtlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 2, 1, 8),
    _LldpCurCfgPortmgmtaddrtlv_Type()
)
lldpCurCfgPortmgmtaddrtlv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpCurCfgPortmgmtaddrtlv.setStatus("current")


class _LldpCurCfgPortportvidtlv_Type(Integer32):
    """Custom type lldpCurCfgPortportvidtlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpCurCfgPortportvidtlv_Type.__name__ = "Integer32"
_LldpCurCfgPortportvidtlv_Object = MibTableColumn
lldpCurCfgPortportvidtlv = _LldpCurCfgPortportvidtlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 2, 1, 9),
    _LldpCurCfgPortportvidtlv_Type()
)
lldpCurCfgPortportvidtlv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpCurCfgPortportvidtlv.setStatus("current")


class _LldpCurCfgPortportprottlv_Type(Integer32):
    """Custom type lldpCurCfgPortportprottlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpCurCfgPortportprottlv_Type.__name__ = "Integer32"
_LldpCurCfgPortportprottlv_Object = MibTableColumn
lldpCurCfgPortportprottlv = _LldpCurCfgPortportprottlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 2, 1, 10),
    _LldpCurCfgPortportprottlv_Type()
)
lldpCurCfgPortportprottlv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpCurCfgPortportprottlv.setStatus("current")


class _LldpCurCfgPortvlannametlv_Type(Integer32):
    """Custom type lldpCurCfgPortvlannametlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpCurCfgPortvlannametlv_Type.__name__ = "Integer32"
_LldpCurCfgPortvlannametlv_Object = MibTableColumn
lldpCurCfgPortvlannametlv = _LldpCurCfgPortvlannametlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 2, 1, 11),
    _LldpCurCfgPortvlannametlv_Type()
)
lldpCurCfgPortvlannametlv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpCurCfgPortvlannametlv.setStatus("current")


class _LldpCurCfgPortprotidtlv_Type(Integer32):
    """Custom type lldpCurCfgPortprotidtlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpCurCfgPortprotidtlv_Type.__name__ = "Integer32"
_LldpCurCfgPortprotidtlv_Object = MibTableColumn
lldpCurCfgPortprotidtlv = _LldpCurCfgPortprotidtlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 2, 1, 12),
    _LldpCurCfgPortprotidtlv_Type()
)
lldpCurCfgPortprotidtlv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpCurCfgPortprotidtlv.setStatus("current")


class _LldpCurCfgPortmacphytlv_Type(Integer32):
    """Custom type lldpCurCfgPortmacphytlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpCurCfgPortmacphytlv_Type.__name__ = "Integer32"
_LldpCurCfgPortmacphytlv_Object = MibTableColumn
lldpCurCfgPortmacphytlv = _LldpCurCfgPortmacphytlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 2, 1, 13),
    _LldpCurCfgPortmacphytlv_Type()
)
lldpCurCfgPortmacphytlv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpCurCfgPortmacphytlv.setStatus("current")


class _LldpCurCfgPortpowermditlv_Type(Integer32):
    """Custom type lldpCurCfgPortpowermditlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpCurCfgPortpowermditlv_Type.__name__ = "Integer32"
_LldpCurCfgPortpowermditlv_Object = MibTableColumn
lldpCurCfgPortpowermditlv = _LldpCurCfgPortpowermditlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 2, 1, 14),
    _LldpCurCfgPortpowermditlv_Type()
)
lldpCurCfgPortpowermditlv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpCurCfgPortpowermditlv.setStatus("current")


class _LldpCurCfgPortlinkaggrtlv_Type(Integer32):
    """Custom type lldpCurCfgPortlinkaggrtlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpCurCfgPortlinkaggrtlv_Type.__name__ = "Integer32"
_LldpCurCfgPortlinkaggrtlv_Object = MibTableColumn
lldpCurCfgPortlinkaggrtlv = _LldpCurCfgPortlinkaggrtlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 2, 1, 15),
    _LldpCurCfgPortlinkaggrtlv_Type()
)
lldpCurCfgPortlinkaggrtlv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpCurCfgPortlinkaggrtlv.setStatus("current")


class _LldpCurCfgPortframesztlv_Type(Integer32):
    """Custom type lldpCurCfgPortframesztlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpCurCfgPortframesztlv_Type.__name__ = "Integer32"
_LldpCurCfgPortframesztlv_Object = MibTableColumn
lldpCurCfgPortframesztlv = _LldpCurCfgPortframesztlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 2, 1, 16),
    _LldpCurCfgPortframesztlv_Type()
)
lldpCurCfgPortframesztlv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpCurCfgPortframesztlv.setStatus("current")


class _LldpCurCfgPortdcbxtlv_Type(Integer32):
    """Custom type lldpCurCfgPortdcbxtlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpCurCfgPortdcbxtlv_Type.__name__ = "Integer32"
_LldpCurCfgPortdcbxtlv_Object = MibTableColumn
lldpCurCfgPortdcbxtlv = _LldpCurCfgPortdcbxtlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 2, 1, 17),
    _LldpCurCfgPortdcbxtlv_Type()
)
lldpCurCfgPortdcbxtlv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpCurCfgPortdcbxtlv.setStatus("current")
_LldpNewCfgPortTable_Object = MibTable
lldpNewCfgPortTable = _LldpNewCfgPortTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 3)
)
if mibBuilder.loadTexts:
    lldpNewCfgPortTable.setStatus("current")
_LldpNewCfgPortEntry_Object = MibTableRow
lldpNewCfgPortEntry = _LldpNewCfgPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 3, 1)
)
lldpNewCfgPortEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "lldpNewCfgPortIndx"),
)
if mibBuilder.loadTexts:
    lldpNewCfgPortEntry.setStatus("current")
_LldpNewCfgPortIndx_Type = PortNumber
_LldpNewCfgPortIndx_Object = MibTableColumn
lldpNewCfgPortIndx = _LldpNewCfgPortIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 3, 1, 1),
    _LldpNewCfgPortIndx_Type()
)
lldpNewCfgPortIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpNewCfgPortIndx.setStatus("current")


class _LldpNewCfgPortAdmStat_Type(Integer32):
    """Custom type lldpNewCfgPortAdmStat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("enabledTxOnly", 1),
          ("enabledRxOnly", 2),
          ("enabledRxTx", 3),
          ("disabled", 4))
    )


_LldpNewCfgPortAdmStat_Type.__name__ = "Integer32"
_LldpNewCfgPortAdmStat_Object = MibTableColumn
lldpNewCfgPortAdmStat = _LldpNewCfgPortAdmStat_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 3, 1, 2),
    _LldpNewCfgPortAdmStat_Type()
)
lldpNewCfgPortAdmStat.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lldpNewCfgPortAdmStat.setStatus("current")


class _LldpNewCfgPortSnmpTrap_Type(Integer32):
    """Custom type lldpNewCfgPortSnmpTrap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpNewCfgPortSnmpTrap_Type.__name__ = "Integer32"
_LldpNewCfgPortSnmpTrap_Object = MibTableColumn
lldpNewCfgPortSnmpTrap = _LldpNewCfgPortSnmpTrap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 3, 1, 3),
    _LldpNewCfgPortSnmpTrap_Type()
)
lldpNewCfgPortSnmpTrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lldpNewCfgPortSnmpTrap.setStatus("current")


class _LldpNewCfgPortportdesctlv_Type(Integer32):
    """Custom type lldpNewCfgPortportdesctlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpNewCfgPortportdesctlv_Type.__name__ = "Integer32"
_LldpNewCfgPortportdesctlv_Object = MibTableColumn
lldpNewCfgPortportdesctlv = _LldpNewCfgPortportdesctlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 3, 1, 4),
    _LldpNewCfgPortportdesctlv_Type()
)
lldpNewCfgPortportdesctlv.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lldpNewCfgPortportdesctlv.setStatus("current")


class _LldpNewCfgPortsysnametlv_Type(Integer32):
    """Custom type lldpNewCfgPortsysnametlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpNewCfgPortsysnametlv_Type.__name__ = "Integer32"
_LldpNewCfgPortsysnametlv_Object = MibTableColumn
lldpNewCfgPortsysnametlv = _LldpNewCfgPortsysnametlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 3, 1, 5),
    _LldpNewCfgPortsysnametlv_Type()
)
lldpNewCfgPortsysnametlv.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lldpNewCfgPortsysnametlv.setStatus("current")


class _LldpNewCfgPortsysdescrtlv_Type(Integer32):
    """Custom type lldpNewCfgPortsysdescrtlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpNewCfgPortsysdescrtlv_Type.__name__ = "Integer32"
_LldpNewCfgPortsysdescrtlv_Object = MibTableColumn
lldpNewCfgPortsysdescrtlv = _LldpNewCfgPortsysdescrtlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 3, 1, 6),
    _LldpNewCfgPortsysdescrtlv_Type()
)
lldpNewCfgPortsysdescrtlv.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lldpNewCfgPortsysdescrtlv.setStatus("current")


class _LldpNewCfgPortsyscaptlv_Type(Integer32):
    """Custom type lldpNewCfgPortsyscaptlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpNewCfgPortsyscaptlv_Type.__name__ = "Integer32"
_LldpNewCfgPortsyscaptlv_Object = MibTableColumn
lldpNewCfgPortsyscaptlv = _LldpNewCfgPortsyscaptlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 3, 1, 7),
    _LldpNewCfgPortsyscaptlv_Type()
)
lldpNewCfgPortsyscaptlv.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lldpNewCfgPortsyscaptlv.setStatus("current")


class _LldpNewCfgPortmgmtaddrtlv_Type(Integer32):
    """Custom type lldpNewCfgPortmgmtaddrtlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpNewCfgPortmgmtaddrtlv_Type.__name__ = "Integer32"
_LldpNewCfgPortmgmtaddrtlv_Object = MibTableColumn
lldpNewCfgPortmgmtaddrtlv = _LldpNewCfgPortmgmtaddrtlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 3, 1, 8),
    _LldpNewCfgPortmgmtaddrtlv_Type()
)
lldpNewCfgPortmgmtaddrtlv.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lldpNewCfgPortmgmtaddrtlv.setStatus("current")


class _LldpNewCfgPortportvidtlv_Type(Integer32):
    """Custom type lldpNewCfgPortportvidtlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpNewCfgPortportvidtlv_Type.__name__ = "Integer32"
_LldpNewCfgPortportvidtlv_Object = MibTableColumn
lldpNewCfgPortportvidtlv = _LldpNewCfgPortportvidtlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 3, 1, 9),
    _LldpNewCfgPortportvidtlv_Type()
)
lldpNewCfgPortportvidtlv.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lldpNewCfgPortportvidtlv.setStatus("current")


class _LldpNewCfgPortportprottlv_Type(Integer32):
    """Custom type lldpNewCfgPortportprottlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpNewCfgPortportprottlv_Type.__name__ = "Integer32"
_LldpNewCfgPortportprottlv_Object = MibTableColumn
lldpNewCfgPortportprottlv = _LldpNewCfgPortportprottlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 3, 1, 10),
    _LldpNewCfgPortportprottlv_Type()
)
lldpNewCfgPortportprottlv.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lldpNewCfgPortportprottlv.setStatus("current")


class _LldpNewCfgPortvlannametlv_Type(Integer32):
    """Custom type lldpNewCfgPortvlannametlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpNewCfgPortvlannametlv_Type.__name__ = "Integer32"
_LldpNewCfgPortvlannametlv_Object = MibTableColumn
lldpNewCfgPortvlannametlv = _LldpNewCfgPortvlannametlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 3, 1, 11),
    _LldpNewCfgPortvlannametlv_Type()
)
lldpNewCfgPortvlannametlv.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lldpNewCfgPortvlannametlv.setStatus("current")


class _LldpNewCfgPortprotidtlv_Type(Integer32):
    """Custom type lldpNewCfgPortprotidtlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpNewCfgPortprotidtlv_Type.__name__ = "Integer32"
_LldpNewCfgPortprotidtlv_Object = MibTableColumn
lldpNewCfgPortprotidtlv = _LldpNewCfgPortprotidtlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 3, 1, 12),
    _LldpNewCfgPortprotidtlv_Type()
)
lldpNewCfgPortprotidtlv.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lldpNewCfgPortprotidtlv.setStatus("current")


class _LldpNewCfgPortmacphytlv_Type(Integer32):
    """Custom type lldpNewCfgPortmacphytlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpNewCfgPortmacphytlv_Type.__name__ = "Integer32"
_LldpNewCfgPortmacphytlv_Object = MibTableColumn
lldpNewCfgPortmacphytlv = _LldpNewCfgPortmacphytlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 3, 1, 13),
    _LldpNewCfgPortmacphytlv_Type()
)
lldpNewCfgPortmacphytlv.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lldpNewCfgPortmacphytlv.setStatus("current")


class _LldpNewCfgPortpowermditlv_Type(Integer32):
    """Custom type lldpNewCfgPortpowermditlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpNewCfgPortpowermditlv_Type.__name__ = "Integer32"
_LldpNewCfgPortpowermditlv_Object = MibTableColumn
lldpNewCfgPortpowermditlv = _LldpNewCfgPortpowermditlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 3, 1, 14),
    _LldpNewCfgPortpowermditlv_Type()
)
lldpNewCfgPortpowermditlv.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lldpNewCfgPortpowermditlv.setStatus("current")


class _LldpNewCfgPortlinkaggrtlv_Type(Integer32):
    """Custom type lldpNewCfgPortlinkaggrtlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpNewCfgPortlinkaggrtlv_Type.__name__ = "Integer32"
_LldpNewCfgPortlinkaggrtlv_Object = MibTableColumn
lldpNewCfgPortlinkaggrtlv = _LldpNewCfgPortlinkaggrtlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 3, 1, 15),
    _LldpNewCfgPortlinkaggrtlv_Type()
)
lldpNewCfgPortlinkaggrtlv.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lldpNewCfgPortlinkaggrtlv.setStatus("current")


class _LldpNewCfgPortframesztlv_Type(Integer32):
    """Custom type lldpNewCfgPortframesztlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpNewCfgPortframesztlv_Type.__name__ = "Integer32"
_LldpNewCfgPortframesztlv_Object = MibTableColumn
lldpNewCfgPortframesztlv = _LldpNewCfgPortframesztlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 3, 1, 16),
    _LldpNewCfgPortframesztlv_Type()
)
lldpNewCfgPortframesztlv.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lldpNewCfgPortframesztlv.setStatus("current")


class _LldpNewCfgPortalltlv_Type(Integer32):
    """Custom type lldpNewCfgPortalltlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2),
          ("other", 3))
    )


_LldpNewCfgPortalltlv_Type.__name__ = "Integer32"
_LldpNewCfgPortalltlv_Object = MibTableColumn
lldpNewCfgPortalltlv = _LldpNewCfgPortalltlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 3, 1, 17),
    _LldpNewCfgPortalltlv_Type()
)
lldpNewCfgPortalltlv.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lldpNewCfgPortalltlv.setStatus("current")


class _LldpNewCfgPortdcbxtlv_Type(Integer32):
    """Custom type lldpNewCfgPortdcbxtlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpNewCfgPortdcbxtlv_Type.__name__ = "Integer32"
_LldpNewCfgPortdcbxtlv_Object = MibTableColumn
lldpNewCfgPortdcbxtlv = _LldpNewCfgPortdcbxtlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 3, 1, 18),
    _LldpNewCfgPortdcbxtlv_Type()
)
lldpNewCfgPortdcbxtlv.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lldpNewCfgPortdcbxtlv.setStatus("current")
_LldpGeneral_ObjectIdentity = ObjectIdentity
lldpGeneral = _LldpGeneral_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 4)
)


class _LldpCurCfgState_Type(Integer32):
    """Custom type lldpCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_LldpCurCfgState_Type.__name__ = "Integer32"
_LldpCurCfgState_Object = MibScalar
lldpCurCfgState = _LldpCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 4, 1),
    _LldpCurCfgState_Type()
)
lldpCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpCurCfgState.setStatus("current")


class _LldpNewCfgState_Type(Integer32):
    """Custom type lldpNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_LldpNewCfgState_Type.__name__ = "Integer32"
_LldpNewCfgState_Object = MibScalar
lldpNewCfgState = _LldpNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 4, 2),
    _LldpNewCfgState_Type()
)
lldpNewCfgState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lldpNewCfgState.setStatus("current")


class _LldpCurCfgMsgTxInt_Type(Integer32):
    """Custom type lldpCurCfgMsgTxInt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 32768),
    )


_LldpCurCfgMsgTxInt_Type.__name__ = "Integer32"
_LldpCurCfgMsgTxInt_Object = MibScalar
lldpCurCfgMsgTxInt = _LldpCurCfgMsgTxInt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 4, 3),
    _LldpCurCfgMsgTxInt_Type()
)
lldpCurCfgMsgTxInt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpCurCfgMsgTxInt.setStatus("current")


class _LldpNewCfgMsgTxInt_Type(Integer32):
    """Custom type lldpNewCfgMsgTxInt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 32768),
    )


_LldpNewCfgMsgTxInt_Type.__name__ = "Integer32"
_LldpNewCfgMsgTxInt_Object = MibScalar
lldpNewCfgMsgTxInt = _LldpNewCfgMsgTxInt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 4, 4),
    _LldpNewCfgMsgTxInt_Type()
)
lldpNewCfgMsgTxInt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lldpNewCfgMsgTxInt.setStatus("current")


class _LldpCurCfgMsgTxHld_Type(Integer32):
    """Custom type lldpCurCfgMsgTxHld based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 10),
    )


_LldpCurCfgMsgTxHld_Type.__name__ = "Integer32"
_LldpCurCfgMsgTxHld_Object = MibScalar
lldpCurCfgMsgTxHld = _LldpCurCfgMsgTxHld_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 4, 5),
    _LldpCurCfgMsgTxHld_Type()
)
lldpCurCfgMsgTxHld.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpCurCfgMsgTxHld.setStatus("current")


class _LldpNewCfgMsgTxHld_Type(Integer32):
    """Custom type lldpNewCfgMsgTxHld based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 10),
    )


_LldpNewCfgMsgTxHld_Type.__name__ = "Integer32"
_LldpNewCfgMsgTxHld_Object = MibScalar
lldpNewCfgMsgTxHld = _LldpNewCfgMsgTxHld_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 4, 6),
    _LldpNewCfgMsgTxHld_Type()
)
lldpNewCfgMsgTxHld.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lldpNewCfgMsgTxHld.setStatus("current")


class _LldpCurCfgNotifInt_Type(Integer32):
    """Custom type lldpCurCfgNotifInt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_LldpCurCfgNotifInt_Type.__name__ = "Integer32"
_LldpCurCfgNotifInt_Object = MibScalar
lldpCurCfgNotifInt = _LldpCurCfgNotifInt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 4, 7),
    _LldpCurCfgNotifInt_Type()
)
lldpCurCfgNotifInt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpCurCfgNotifInt.setStatus("current")


class _LldpNewCfgNotifInt_Type(Integer32):
    """Custom type lldpNewCfgNotifInt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_LldpNewCfgNotifInt_Type.__name__ = "Integer32"
_LldpNewCfgNotifInt_Object = MibScalar
lldpNewCfgNotifInt = _LldpNewCfgNotifInt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 4, 8),
    _LldpNewCfgNotifInt_Type()
)
lldpNewCfgNotifInt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lldpNewCfgNotifInt.setStatus("current")


class _LldpCurCfgTxDelay_Type(Integer32):
    """Custom type lldpCurCfgTxDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8192),
    )


_LldpCurCfgTxDelay_Type.__name__ = "Integer32"
_LldpCurCfgTxDelay_Object = MibScalar
lldpCurCfgTxDelay = _LldpCurCfgTxDelay_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 4, 9),
    _LldpCurCfgTxDelay_Type()
)
lldpCurCfgTxDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpCurCfgTxDelay.setStatus("current")


class _LldpNewCfgTxDelay_Type(Integer32):
    """Custom type lldpNewCfgTxDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8192),
    )


_LldpNewCfgTxDelay_Type.__name__ = "Integer32"
_LldpNewCfgTxDelay_Object = MibScalar
lldpNewCfgTxDelay = _LldpNewCfgTxDelay_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 4, 10),
    _LldpNewCfgTxDelay_Type()
)
lldpNewCfgTxDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lldpNewCfgTxDelay.setStatus("current")


class _LldpCurCfgReinitDelay_Type(Integer32):
    """Custom type lldpCurCfgReinitDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_LldpCurCfgReinitDelay_Type.__name__ = "Integer32"
_LldpCurCfgReinitDelay_Object = MibScalar
lldpCurCfgReinitDelay = _LldpCurCfgReinitDelay_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 4, 11),
    _LldpCurCfgReinitDelay_Type()
)
lldpCurCfgReinitDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpCurCfgReinitDelay.setStatus("current")


class _LldpNewCfgReinitDelay_Type(Integer32):
    """Custom type lldpNewCfgReinitDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_LldpNewCfgReinitDelay_Type.__name__ = "Integer32"
_LldpNewCfgReinitDelay_Object = MibScalar
lldpNewCfgReinitDelay = _LldpNewCfgReinitDelay_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 15, 4, 12),
    _LldpNewCfgReinitDelay_Type()
)
lldpNewCfgReinitDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lldpNewCfgReinitDelay.setStatus("current")
_VlagCfg_ObjectIdentity = ObjectIdentity
vlagCfg = _VlagCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18)
)
_VlagIslCfg_ObjectIdentity = ObjectIdentity
vlagIslCfg = _VlagIslCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 1)
)


class _VlagCurIslCfgPortChannel_Type(Integer32):
    """Custom type vlagCurIslCfgPortChannel based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_VlagCurIslCfgPortChannel_Type.__name__ = "Integer32"
_VlagCurIslCfgPortChannel_Object = MibScalar
vlagCurIslCfgPortChannel = _VlagCurIslCfgPortChannel_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 1, 1),
    _VlagCurIslCfgPortChannel_Type()
)
vlagCurIslCfgPortChannel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagCurIslCfgPortChannel.setStatus("current")


class _VlagNewIslCfgPortChannel_Type(Integer32):
    """Custom type vlagNewIslCfgPortChannel based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_VlagNewIslCfgPortChannel_Type.__name__ = "Integer32"
_VlagNewIslCfgPortChannel_Object = MibScalar
vlagNewIslCfgPortChannel = _VlagNewIslCfgPortChannel_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 1, 2),
    _VlagNewIslCfgPortChannel_Type()
)
vlagNewIslCfgPortChannel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlagNewIslCfgPortChannel.setStatus("current")


class _VlagCurIslCfgAdminKey_Type(Integer32):
    """Custom type vlagCurIslCfgAdminKey based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_VlagCurIslCfgAdminKey_Type.__name__ = "Integer32"
_VlagCurIslCfgAdminKey_Object = MibScalar
vlagCurIslCfgAdminKey = _VlagCurIslCfgAdminKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 1, 3),
    _VlagCurIslCfgAdminKey_Type()
)
vlagCurIslCfgAdminKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagCurIslCfgAdminKey.setStatus("current")


class _VlagNewIslCfgAdminKey_Type(Integer32):
    """Custom type vlagNewIslCfgAdminKey based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_VlagNewIslCfgAdminKey_Type.__name__ = "Integer32"
_VlagNewIslCfgAdminKey_Object = MibScalar
vlagNewIslCfgAdminKey = _VlagNewIslCfgAdminKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 1, 4),
    _VlagNewIslCfgAdminKey_Type()
)
vlagNewIslCfgAdminKey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlagNewIslCfgAdminKey.setStatus("current")


class _VlagCurCfgSwitchPriority_Type(Integer32):
    """Custom type vlagCurCfgSwitchPriority based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_VlagCurCfgSwitchPriority_Type.__name__ = "Integer32"
_VlagCurCfgSwitchPriority_Object = MibScalar
vlagCurCfgSwitchPriority = _VlagCurCfgSwitchPriority_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 4),
    _VlagCurCfgSwitchPriority_Type()
)
vlagCurCfgSwitchPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagCurCfgSwitchPriority.setStatus("current")


class _VlagNewCfgSwitchPriority_Type(Integer32):
    """Custom type vlagNewCfgSwitchPriority based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_VlagNewCfgSwitchPriority_Type.__name__ = "Integer32"
_VlagNewCfgSwitchPriority_Object = MibScalar
vlagNewCfgSwitchPriority = _VlagNewCfgSwitchPriority_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 5),
    _VlagNewCfgSwitchPriority_Type()
)
vlagNewCfgSwitchPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlagNewCfgSwitchPriority.setStatus("current")
_VlagCurCfgTrunkTable_Object = MibTable
vlagCurCfgTrunkTable = _VlagCurCfgTrunkTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 6)
)
if mibBuilder.loadTexts:
    vlagCurCfgTrunkTable.setStatus("current")
_VlagCurCfgTrunkTableEntry_Object = MibTableRow
vlagCurCfgTrunkTableEntry = _VlagCurCfgTrunkTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 6, 1)
)
vlagCurCfgTrunkTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vlagCurCfgTrunkIndex"),
)
if mibBuilder.loadTexts:
    vlagCurCfgTrunkTableEntry.setStatus("current")
_VlagCurCfgTrunkIndex_Type = Integer32
_VlagCurCfgTrunkIndex_Object = MibTableColumn
vlagCurCfgTrunkIndex = _VlagCurCfgTrunkIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 6, 1, 1),
    _VlagCurCfgTrunkIndex_Type()
)
vlagCurCfgTrunkIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagCurCfgTrunkIndex.setStatus("current")


class _VlagCurCfgTrunkState_Type(Integer32):
    """Custom type vlagCurCfgTrunkState based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VlagCurCfgTrunkState_Type.__name__ = "Integer32"
_VlagCurCfgTrunkState_Object = MibTableColumn
vlagCurCfgTrunkState = _VlagCurCfgTrunkState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 6, 1, 2),
    _VlagCurCfgTrunkState_Type()
)
vlagCurCfgTrunkState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagCurCfgTrunkState.setStatus("current")
_VlagNewCfgTrunkTable_Object = MibTable
vlagNewCfgTrunkTable = _VlagNewCfgTrunkTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 7)
)
if mibBuilder.loadTexts:
    vlagNewCfgTrunkTable.setStatus("current")
_VlagNewCfgTrunkTableEntry_Object = MibTableRow
vlagNewCfgTrunkTableEntry = _VlagNewCfgTrunkTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 7, 1)
)
vlagNewCfgTrunkTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vlagNewCfgTrunkIndex"),
)
if mibBuilder.loadTexts:
    vlagNewCfgTrunkTableEntry.setStatus("current")
_VlagNewCfgTrunkIndex_Type = Integer32
_VlagNewCfgTrunkIndex_Object = MibTableColumn
vlagNewCfgTrunkIndex = _VlagNewCfgTrunkIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 7, 1, 1),
    _VlagNewCfgTrunkIndex_Type()
)
vlagNewCfgTrunkIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlagNewCfgTrunkIndex.setStatus("current")


class _VlagNewCfgTrunkState_Type(Integer32):
    """Custom type vlagNewCfgTrunkState based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VlagNewCfgTrunkState_Type.__name__ = "Integer32"
_VlagNewCfgTrunkState_Object = MibTableColumn
vlagNewCfgTrunkState = _VlagNewCfgTrunkState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 7, 1, 2),
    _VlagNewCfgTrunkState_Type()
)
vlagNewCfgTrunkState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlagNewCfgTrunkState.setStatus("current")
_VlagCurCfgLacpTable_Object = MibTable
vlagCurCfgLacpTable = _VlagCurCfgLacpTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 8)
)
if mibBuilder.loadTexts:
    vlagCurCfgLacpTable.setStatus("current")
_VlagCurCfgLacpTableEntry_Object = MibTableRow
vlagCurCfgLacpTableEntry = _VlagCurCfgLacpTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 8, 1)
)
vlagCurCfgLacpTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vlagCurCfgLacpKey"),
)
if mibBuilder.loadTexts:
    vlagCurCfgLacpTableEntry.setStatus("current")


class _VlagCurCfgLacpKey_Type(Integer32):
    """Custom type vlagCurCfgLacpKey based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_VlagCurCfgLacpKey_Type.__name__ = "Integer32"
_VlagCurCfgLacpKey_Object = MibTableColumn
vlagCurCfgLacpKey = _VlagCurCfgLacpKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 8, 1, 1),
    _VlagCurCfgLacpKey_Type()
)
vlagCurCfgLacpKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagCurCfgLacpKey.setStatus("current")


class _VlagCurCfgLacpState_Type(Integer32):
    """Custom type vlagCurCfgLacpState based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VlagCurCfgLacpState_Type.__name__ = "Integer32"
_VlagCurCfgLacpState_Object = MibTableColumn
vlagCurCfgLacpState = _VlagCurCfgLacpState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 8, 1, 2),
    _VlagCurCfgLacpState_Type()
)
vlagCurCfgLacpState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagCurCfgLacpState.setStatus("current")
_VlagNewCfgLacpTable_Object = MibTable
vlagNewCfgLacpTable = _VlagNewCfgLacpTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 9)
)
if mibBuilder.loadTexts:
    vlagNewCfgLacpTable.setStatus("current")
_VlagNewCfgLacpTableEntry_Object = MibTableRow
vlagNewCfgLacpTableEntry = _VlagNewCfgLacpTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 9, 1)
)
vlagNewCfgLacpTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vlagNewCfgLacpKey"),
)
if mibBuilder.loadTexts:
    vlagNewCfgLacpTableEntry.setStatus("current")


class _VlagNewCfgLacpKey_Type(Integer32):
    """Custom type vlagNewCfgLacpKey based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_VlagNewCfgLacpKey_Type.__name__ = "Integer32"
_VlagNewCfgLacpKey_Object = MibTableColumn
vlagNewCfgLacpKey = _VlagNewCfgLacpKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 9, 1, 1),
    _VlagNewCfgLacpKey_Type()
)
vlagNewCfgLacpKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagNewCfgLacpKey.setStatus("current")


class _VlagNewCfgLacpState_Type(Integer32):
    """Custom type vlagNewCfgLacpState based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VlagNewCfgLacpState_Type.__name__ = "Integer32"
_VlagNewCfgLacpState_Object = MibTableColumn
vlagNewCfgLacpState = _VlagNewCfgLacpState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 9, 1, 2),
    _VlagNewCfgLacpState_Type()
)
vlagNewCfgLacpState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlagNewCfgLacpState.setStatus("current")


class _VlagCurCfgHlthchkPeerIp_Type(IpAddress):
    """Custom type vlagCurCfgHlthchkPeerIp based on IpAddress"""
    defaultHexValue = "00000000"


_VlagCurCfgHlthchkPeerIp_Type.__name__ = "IpAddress"
_VlagCurCfgHlthchkPeerIp_Object = MibScalar
vlagCurCfgHlthchkPeerIp = _VlagCurCfgHlthchkPeerIp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 10),
    _VlagCurCfgHlthchkPeerIp_Type()
)
vlagCurCfgHlthchkPeerIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagCurCfgHlthchkPeerIp.setStatus("current")


class _VlagNewCfgHlthchkPeerIp_Type(IpAddress):
    """Custom type vlagNewCfgHlthchkPeerIp based on IpAddress"""
    defaultHexValue = "00000000"


_VlagNewCfgHlthchkPeerIp_Type.__name__ = "IpAddress"
_VlagNewCfgHlthchkPeerIp_Object = MibScalar
vlagNewCfgHlthchkPeerIp = _VlagNewCfgHlthchkPeerIp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 11),
    _VlagNewCfgHlthchkPeerIp_Type()
)
vlagNewCfgHlthchkPeerIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlagNewCfgHlthchkPeerIp.setStatus("current")


class _VlagCurCfgTierId_Type(Integer32):
    """Custom type vlagCurCfgTierId based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 512),
    )


_VlagCurCfgTierId_Type.__name__ = "Integer32"
_VlagCurCfgTierId_Object = MibScalar
vlagCurCfgTierId = _VlagCurCfgTierId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 12),
    _VlagCurCfgTierId_Type()
)
vlagCurCfgTierId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagCurCfgTierId.setStatus("current")


class _VlagNewCfgTierId_Type(Integer32):
    """Custom type vlagNewCfgTierId based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 512),
    )


_VlagNewCfgTierId_Type.__name__ = "Integer32"
_VlagNewCfgTierId_Object = MibScalar
vlagNewCfgTierId = _VlagNewCfgTierId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 13),
    _VlagNewCfgTierId_Type()
)
vlagNewCfgTierId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlagNewCfgTierId.setStatus("current")


class _VlagCurCfgStartupDelayInterval_Type(Integer32):
    """Custom type vlagCurCfgStartupDelayInterval based on Integer32"""
    defaultValue = 120

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600),
    )


_VlagCurCfgStartupDelayInterval_Type.__name__ = "Integer32"
_VlagCurCfgStartupDelayInterval_Object = MibScalar
vlagCurCfgStartupDelayInterval = _VlagCurCfgStartupDelayInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 14),
    _VlagCurCfgStartupDelayInterval_Type()
)
vlagCurCfgStartupDelayInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagCurCfgStartupDelayInterval.setStatus("current")


class _VlagNewCfgStartupDelayInterval_Type(Integer32):
    """Custom type vlagNewCfgStartupDelayInterval based on Integer32"""
    defaultValue = 120

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600),
    )


_VlagNewCfgStartupDelayInterval_Type.__name__ = "Integer32"
_VlagNewCfgStartupDelayInterval_Object = MibScalar
vlagNewCfgStartupDelayInterval = _VlagNewCfgStartupDelayInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 15),
    _VlagNewCfgStartupDelayInterval_Type()
)
vlagNewCfgStartupDelayInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlagNewCfgStartupDelayInterval.setStatus("current")


class _VlagCurCfgGlobalEnable_Type(Integer32):
    """Custom type vlagCurCfgGlobalEnable based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VlagCurCfgGlobalEnable_Type.__name__ = "Integer32"
_VlagCurCfgGlobalEnable_Object = MibScalar
vlagCurCfgGlobalEnable = _VlagCurCfgGlobalEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 16),
    _VlagCurCfgGlobalEnable_Type()
)
vlagCurCfgGlobalEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagCurCfgGlobalEnable.setStatus("current")


class _VlagNewCfgGlobalEnable_Type(Integer32):
    """Custom type vlagNewCfgGlobalEnable based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VlagNewCfgGlobalEnable_Type.__name__ = "Integer32"
_VlagNewCfgGlobalEnable_Object = MibScalar
vlagNewCfgGlobalEnable = _VlagNewCfgGlobalEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 17),
    _VlagNewCfgGlobalEnable_Type()
)
vlagNewCfgGlobalEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlagNewCfgGlobalEnable.setStatus("current")


class _VlagCurCfgHlthchkConnectRetryInterval_Type(Integer32):
    """Custom type vlagCurCfgHlthchkConnectRetryInterval based on Integer32"""
    defaultValue = 30

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 300),
    )


_VlagCurCfgHlthchkConnectRetryInterval_Type.__name__ = "Integer32"
_VlagCurCfgHlthchkConnectRetryInterval_Object = MibScalar
vlagCurCfgHlthchkConnectRetryInterval = _VlagCurCfgHlthchkConnectRetryInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 18),
    _VlagCurCfgHlthchkConnectRetryInterval_Type()
)
vlagCurCfgHlthchkConnectRetryInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagCurCfgHlthchkConnectRetryInterval.setStatus("current")


class _VlagNewCfgHlthchkConnectRetryInterval_Type(Integer32):
    """Custom type vlagNewCfgHlthchkConnectRetryInterval based on Integer32"""
    defaultValue = 30

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 300),
    )


_VlagNewCfgHlthchkConnectRetryInterval_Type.__name__ = "Integer32"
_VlagNewCfgHlthchkConnectRetryInterval_Object = MibScalar
vlagNewCfgHlthchkConnectRetryInterval = _VlagNewCfgHlthchkConnectRetryInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 19),
    _VlagNewCfgHlthchkConnectRetryInterval_Type()
)
vlagNewCfgHlthchkConnectRetryInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlagNewCfgHlthchkConnectRetryInterval.setStatus("current")


class _VlagCurCfgHlthchkKeepaliveAttempts_Type(Integer32):
    """Custom type vlagCurCfgHlthchkKeepaliveAttempts based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 24),
    )


_VlagCurCfgHlthchkKeepaliveAttempts_Type.__name__ = "Integer32"
_VlagCurCfgHlthchkKeepaliveAttempts_Object = MibScalar
vlagCurCfgHlthchkKeepaliveAttempts = _VlagCurCfgHlthchkKeepaliveAttempts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 20),
    _VlagCurCfgHlthchkKeepaliveAttempts_Type()
)
vlagCurCfgHlthchkKeepaliveAttempts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagCurCfgHlthchkKeepaliveAttempts.setStatus("current")


class _VlagNewCfgHlthchkKeepaliveAttempts_Type(Integer32):
    """Custom type vlagNewCfgHlthchkKeepaliveAttempts based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 24),
    )


_VlagNewCfgHlthchkKeepaliveAttempts_Type.__name__ = "Integer32"
_VlagNewCfgHlthchkKeepaliveAttempts_Object = MibScalar
vlagNewCfgHlthchkKeepaliveAttempts = _VlagNewCfgHlthchkKeepaliveAttempts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 21),
    _VlagNewCfgHlthchkKeepaliveAttempts_Type()
)
vlagNewCfgHlthchkKeepaliveAttempts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlagNewCfgHlthchkKeepaliveAttempts.setStatus("current")


class _VlagCurCfgHlthchkKeepaliveInterval_Type(Integer32):
    """Custom type vlagCurCfgHlthchkKeepaliveInterval based on Integer32"""
    defaultValue = 5

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 300),
    )


_VlagCurCfgHlthchkKeepaliveInterval_Type.__name__ = "Integer32"
_VlagCurCfgHlthchkKeepaliveInterval_Object = MibScalar
vlagCurCfgHlthchkKeepaliveInterval = _VlagCurCfgHlthchkKeepaliveInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 22),
    _VlagCurCfgHlthchkKeepaliveInterval_Type()
)
vlagCurCfgHlthchkKeepaliveInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagCurCfgHlthchkKeepaliveInterval.setStatus("current")


class _VlagNewCfgHlthchkKeepaliveInterval_Type(Integer32):
    """Custom type vlagNewCfgHlthchkKeepaliveInterval based on Integer32"""
    defaultValue = 5

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 300),
    )


_VlagNewCfgHlthchkKeepaliveInterval_Type.__name__ = "Integer32"
_VlagNewCfgHlthchkKeepaliveInterval_Object = MibScalar
vlagNewCfgHlthchkKeepaliveInterval = _VlagNewCfgHlthchkKeepaliveInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 23),
    _VlagNewCfgHlthchkKeepaliveInterval_Type()
)
vlagNewCfgHlthchkKeepaliveInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlagNewCfgHlthchkKeepaliveInterval.setStatus("current")


class _VlagCurCfgAutoRecoveryInterval_Type(Integer32):
    """Custom type vlagCurCfgAutoRecoveryInterval based on Integer32"""
    defaultValue = 300

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(240, 3600),
    )


_VlagCurCfgAutoRecoveryInterval_Type.__name__ = "Integer32"
_VlagCurCfgAutoRecoveryInterval_Object = MibScalar
vlagCurCfgAutoRecoveryInterval = _VlagCurCfgAutoRecoveryInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 24),
    _VlagCurCfgAutoRecoveryInterval_Type()
)
vlagCurCfgAutoRecoveryInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagCurCfgAutoRecoveryInterval.setStatus("current")


class _VlagNewCfgAutoRecoveryInterval_Type(Integer32):
    """Custom type vlagNewCfgAutoRecoveryInterval based on Integer32"""
    defaultValue = 300

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(240, 3600),
    )


_VlagNewCfgAutoRecoveryInterval_Type.__name__ = "Integer32"
_VlagNewCfgAutoRecoveryInterval_Object = MibScalar
vlagNewCfgAutoRecoveryInterval = _VlagNewCfgAutoRecoveryInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 18, 25),
    _VlagNewCfgAutoRecoveryInterval_Type()
)
vlagNewCfgAutoRecoveryInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlagNewCfgAutoRecoveryInterval.setStatus("current")
_EcpCfg_ObjectIdentity = ObjectIdentity
ecpCfg = _EcpCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 19)
)
_EcpCurCfgRetrans_Type = Integer32
_EcpCurCfgRetrans_Object = MibScalar
ecpCurCfgRetrans = _EcpCurCfgRetrans_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 19, 1),
    _EcpCurCfgRetrans_Type()
)
ecpCurCfgRetrans.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ecpCurCfgRetrans.setStatus("current")


class _EcpNewCfgRetrans_Type(Integer32):
    """Custom type ecpNewCfgRetrans based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 9000),
    )


_EcpNewCfgRetrans_Type.__name__ = "Integer32"
_EcpNewCfgRetrans_Object = MibScalar
ecpNewCfgRetrans = _EcpNewCfgRetrans_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 19, 2),
    _EcpNewCfgRetrans_Type()
)
ecpNewCfgRetrans.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ecpNewCfgRetrans.setStatus("current")
_SlpCfg_ObjectIdentity = ObjectIdentity
slpCfg = _SlpCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 20)
)


class _SlpCurCfgGlobalEnable_Type(Integer32):
    """Custom type slpCurCfgGlobalEnable based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_SlpCurCfgGlobalEnable_Type.__name__ = "Integer32"
_SlpCurCfgGlobalEnable_Object = MibScalar
slpCurCfgGlobalEnable = _SlpCurCfgGlobalEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 20, 1),
    _SlpCurCfgGlobalEnable_Type()
)
slpCurCfgGlobalEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slpCurCfgGlobalEnable.setStatus("current")


class _SlpNewCfgGlobalEnable_Type(Integer32):
    """Custom type slpNewCfgGlobalEnable based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_SlpNewCfgGlobalEnable_Type.__name__ = "Integer32"
_SlpNewCfgGlobalEnable_Object = MibScalar
slpNewCfgGlobalEnable = _SlpNewCfgGlobalEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 20, 2),
    _SlpNewCfgGlobalEnable_Type()
)
slpNewCfgGlobalEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slpNewCfgGlobalEnable.setStatus("current")


class _SlpCurCfgActiveDaDisEnable_Type(Integer32):
    """Custom type slpCurCfgActiveDaDisEnable based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_SlpCurCfgActiveDaDisEnable_Type.__name__ = "Integer32"
_SlpCurCfgActiveDaDisEnable_Object = MibScalar
slpCurCfgActiveDaDisEnable = _SlpCurCfgActiveDaDisEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 20, 3),
    _SlpCurCfgActiveDaDisEnable_Type()
)
slpCurCfgActiveDaDisEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slpCurCfgActiveDaDisEnable.setStatus("current")


class _SlpNewCfgActiveDaDisEnable_Type(Integer32):
    """Custom type slpNewCfgActiveDaDisEnable based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_SlpNewCfgActiveDaDisEnable_Type.__name__ = "Integer32"
_SlpNewCfgActiveDaDisEnable_Object = MibScalar
slpNewCfgActiveDaDisEnable = _SlpNewCfgActiveDaDisEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 20, 4),
    _SlpNewCfgActiveDaDisEnable_Type()
)
slpNewCfgActiveDaDisEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slpNewCfgActiveDaDisEnable.setStatus("current")


class _SlpCurCfgActiveDaDisStartWaitTime_Type(Integer32):
    """Custom type slpCurCfgActiveDaDisStartWaitTime based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_SlpCurCfgActiveDaDisStartWaitTime_Type.__name__ = "Integer32"
_SlpCurCfgActiveDaDisStartWaitTime_Object = MibScalar
slpCurCfgActiveDaDisStartWaitTime = _SlpCurCfgActiveDaDisStartWaitTime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 20, 5),
    _SlpCurCfgActiveDaDisStartWaitTime_Type()
)
slpCurCfgActiveDaDisStartWaitTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slpCurCfgActiveDaDisStartWaitTime.setStatus("current")


class _SlpNewCfgActiveDaDisStartWaitTime_Type(Integer32):
    """Custom type slpNewCfgActiveDaDisStartWaitTime based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_SlpNewCfgActiveDaDisStartWaitTime_Type.__name__ = "Integer32"
_SlpNewCfgActiveDaDisStartWaitTime_Object = MibScalar
slpNewCfgActiveDaDisStartWaitTime = _SlpNewCfgActiveDaDisStartWaitTime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 1, 20, 6),
    _SlpNewCfgActiveDaDisStartWaitTime_Type()
)
slpNewCfgActiveDaDisStartWaitTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slpNewCfgActiveDaDisStartWaitTime.setStatus("current")
_Layer2Stats_ObjectIdentity = ObjectIdentity
layer2Stats = _Layer2Stats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2)
)
_FdbStats_ObjectIdentity = ObjectIdentity
fdbStats = _FdbStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 1)
)
_FdbStatsCurrent_Type = Gauge32
_FdbStatsCurrent_Object = MibScalar
fdbStatsCurrent = _FdbStatsCurrent_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 1, 3),
    _FdbStatsCurrent_Type()
)
fdbStatsCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbStatsCurrent.setStatus("current")
_FdbStatsHiwat_Type = Integer32
_FdbStatsHiwat_Object = MibScalar
fdbStatsHiwat = _FdbStatsHiwat_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 1, 4),
    _FdbStatsHiwat_Type()
)
fdbStatsHiwat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbStatsHiwat.setStatus("current")


class _FdbStatsClear_Type(Integer32):
    """Custom type fdbStatsClear based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_FdbStatsClear_Type.__name__ = "Integer32"
_FdbStatsClear_Object = MibScalar
fdbStatsClear = _FdbStatsClear_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 1, 11),
    _FdbStatsClear_Type()
)
fdbStatsClear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fdbStatsClear.setStatus("current")
_StpStats_ObjectIdentity = ObjectIdentity
stpStats = _StpStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 2)
)
_StgStatsPortTable_Object = MibTable
stgStatsPortTable = _StgStatsPortTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 2, 1)
)
if mibBuilder.loadTexts:
    stgStatsPortTable.setStatus("current")
_StgStatsPortTableEntry_Object = MibTableRow
stgStatsPortTableEntry = _StgStatsPortTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 2, 1, 1)
)
stgStatsPortTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "stgStatsStpIndex"),
    (0, "IBM-GbTOR-G8264T-MIB", "stgStatsPortIndex"),
)
if mibBuilder.loadTexts:
    stgStatsPortTableEntry.setStatus("current")
_StgStatsStpIndex_Type = Integer32
_StgStatsStpIndex_Object = MibTableColumn
stgStatsStpIndex = _StgStatsStpIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 2, 1, 1, 1),
    _StgStatsStpIndex_Type()
)
stgStatsStpIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgStatsStpIndex.setStatus("current")
_StgStatsPortIndex_Type = PortNumber
_StgStatsPortIndex_Object = MibTableColumn
stgStatsPortIndex = _StgStatsPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 2, 1, 1, 2),
    _StgStatsPortIndex_Type()
)
stgStatsPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgStatsPortIndex.setStatus("current")
_StgStatsPortRcvCfgBpdus_Type = Counter32
_StgStatsPortRcvCfgBpdus_Object = MibTableColumn
stgStatsPortRcvCfgBpdus = _StgStatsPortRcvCfgBpdus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 2, 1, 1, 3),
    _StgStatsPortRcvCfgBpdus_Type()
)
stgStatsPortRcvCfgBpdus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgStatsPortRcvCfgBpdus.setStatus("current")
_StgStatsPortRcvTcnBpdus_Type = Counter32
_StgStatsPortRcvTcnBpdus_Object = MibTableColumn
stgStatsPortRcvTcnBpdus = _StgStatsPortRcvTcnBpdus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 2, 1, 1, 4),
    _StgStatsPortRcvTcnBpdus_Type()
)
stgStatsPortRcvTcnBpdus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgStatsPortRcvTcnBpdus.setStatus("current")
_StgStatsPortXmtCfgBpdus_Type = Counter32
_StgStatsPortXmtCfgBpdus_Object = MibTableColumn
stgStatsPortXmtCfgBpdus = _StgStatsPortXmtCfgBpdus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 2, 1, 1, 5),
    _StgStatsPortXmtCfgBpdus_Type()
)
stgStatsPortXmtCfgBpdus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgStatsPortXmtCfgBpdus.setStatus("current")
_StgStatsPortXmtTcnBpdus_Type = Counter32
_StgStatsPortXmtTcnBpdus_Object = MibTableColumn
stgStatsPortXmtTcnBpdus = _StgStatsPortXmtTcnBpdus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 2, 1, 1, 6),
    _StgStatsPortXmtTcnBpdus_Type()
)
stgStatsPortXmtTcnBpdus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgStatsPortXmtTcnBpdus.setStatus("current")
_LacpStats_ObjectIdentity = ObjectIdentity
lacpStats = _LacpStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 4)
)
_LacpStatsTable_Object = MibTable
lacpStatsTable = _LacpStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 4, 1)
)
if mibBuilder.loadTexts:
    lacpStatsTable.setStatus("current")
_LacpStatsTableEntry_Object = MibTableRow
lacpStatsTableEntry = _LacpStatsTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 4, 1, 1)
)
lacpStatsTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "lacpStatsIndex"),
)
if mibBuilder.loadTexts:
    lacpStatsTableEntry.setStatus("current")
_LacpStatsIndex_Type = PortNumber
_LacpStatsIndex_Object = MibTableColumn
lacpStatsIndex = _LacpStatsIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 4, 1, 1, 1),
    _LacpStatsIndex_Type()
)
lacpStatsIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpStatsIndex.setStatus("current")
_LacpdusRx_Type = Integer32
_LacpdusRx_Object = MibTableColumn
lacpdusRx = _LacpdusRx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 4, 1, 1, 2),
    _LacpdusRx_Type()
)
lacpdusRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpdusRx.setStatus("current")
_MarkerpdusRx_Type = Integer32
_MarkerpdusRx_Object = MibTableColumn
markerpdusRx = _MarkerpdusRx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 4, 1, 1, 3),
    _MarkerpdusRx_Type()
)
markerpdusRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    markerpdusRx.setStatus("current")
_MarkerresponsepdusRx_Type = Integer32
_MarkerresponsepdusRx_Object = MibTableColumn
markerresponsepdusRx = _MarkerresponsepdusRx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 4, 1, 1, 4),
    _MarkerresponsepdusRx_Type()
)
markerresponsepdusRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    markerresponsepdusRx.setStatus("current")
_UnknownRx_Type = Integer32
_UnknownRx_Object = MibTableColumn
unknownRx = _UnknownRx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 4, 1, 1, 5),
    _UnknownRx_Type()
)
unknownRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    unknownRx.setStatus("current")
_IllegalRx_Type = Integer32
_IllegalRx_Object = MibTableColumn
illegalRx = _IllegalRx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 4, 1, 1, 6),
    _IllegalRx_Type()
)
illegalRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    illegalRx.setStatus("current")
_LacpdusTx_Type = Integer32
_LacpdusTx_Object = MibTableColumn
lacpdusTx = _LacpdusTx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 4, 1, 1, 7),
    _LacpdusTx_Type()
)
lacpdusTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpdusTx.setStatus("current")
_MarkerpdusTx_Type = Integer32
_MarkerpdusTx_Object = MibTableColumn
markerpdusTx = _MarkerpdusTx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 4, 1, 1, 8),
    _MarkerpdusTx_Type()
)
markerpdusTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    markerpdusTx.setStatus("current")
_MarkerresponsepdusTx_Type = Integer32
_MarkerresponsepdusTx_Object = MibTableColumn
markerresponsepdusTx = _MarkerresponsepdusTx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 4, 1, 1, 9),
    _MarkerresponsepdusTx_Type()
)
markerresponsepdusTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    markerresponsepdusTx.setStatus("current")


class _LacpClearStats_Type(Integer32):
    """Custom type lacpClearStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_LacpClearStats_Type.__name__ = "Integer32"
_LacpClearStats_Object = MibTableColumn
lacpClearStats = _LacpClearStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 4, 1, 1, 10),
    _LacpClearStats_Type()
)
lacpClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lacpClearStats.setStatus("current")
_HotlinksStats_ObjectIdentity = ObjectIdentity
hotlinksStats = _HotlinksStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 6)
)
_HotlinksStatsTriggerTable_Object = MibTable
hotlinksStatsTriggerTable = _HotlinksStatsTriggerTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 6, 1)
)
if mibBuilder.loadTexts:
    hotlinksStatsTriggerTable.setStatus("current")
_HotlinksStatsTriggerTableEntry_Object = MibTableRow
hotlinksStatsTriggerTableEntry = _HotlinksStatsTriggerTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 6, 1, 1)
)
hotlinksStatsTriggerTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "hotlinksStatsTriggerId"),
)
if mibBuilder.loadTexts:
    hotlinksStatsTriggerTableEntry.setStatus("current")
_HotlinksStatsTriggerId_Type = Integer32
_HotlinksStatsTriggerId_Object = MibTableColumn
hotlinksStatsTriggerId = _HotlinksStatsTriggerId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 6, 1, 1, 1),
    _HotlinksStatsTriggerId_Type()
)
hotlinksStatsTriggerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotlinksStatsTriggerId.setStatus("current")
_HotlinksStatsTriggerName_Type = DisplayString
_HotlinksStatsTriggerName_Object = MibTableColumn
hotlinksStatsTriggerName = _HotlinksStatsTriggerName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 6, 1, 1, 2),
    _HotlinksStatsTriggerName_Type()
)
hotlinksStatsTriggerName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotlinksStatsTriggerName.setStatus("current")
_HotlinksStatsTriggerMasterActive_Type = Integer32
_HotlinksStatsTriggerMasterActive_Object = MibTableColumn
hotlinksStatsTriggerMasterActive = _HotlinksStatsTriggerMasterActive_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 6, 1, 1, 3),
    _HotlinksStatsTriggerMasterActive_Type()
)
hotlinksStatsTriggerMasterActive.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotlinksStatsTriggerMasterActive.setStatus("current")
_HotlinksStatsTriggerBackupActive_Type = Integer32
_HotlinksStatsTriggerBackupActive_Object = MibTableColumn
hotlinksStatsTriggerBackupActive = _HotlinksStatsTriggerBackupActive_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 6, 1, 1, 4),
    _HotlinksStatsTriggerBackupActive_Type()
)
hotlinksStatsTriggerBackupActive.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotlinksStatsTriggerBackupActive.setStatus("current")
_HotlinksStatsTriggerFdbUpdate_Type = Integer32
_HotlinksStatsTriggerFdbUpdate_Object = MibTableColumn
hotlinksStatsTriggerFdbUpdate = _HotlinksStatsTriggerFdbUpdate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 6, 1, 1, 5),
    _HotlinksStatsTriggerFdbUpdate_Type()
)
hotlinksStatsTriggerFdbUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotlinksStatsTriggerFdbUpdate.setStatus("current")
_HotlinksStatsTriggerFdbFailed_Type = Integer32
_HotlinksStatsTriggerFdbFailed_Object = MibTableColumn
hotlinksStatsTriggerFdbFailed = _HotlinksStatsTriggerFdbFailed_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 6, 1, 1, 6),
    _HotlinksStatsTriggerFdbFailed_Type()
)
hotlinksStatsTriggerFdbFailed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotlinksStatsTriggerFdbFailed.setStatus("current")
_LldpStats_ObjectIdentity = ObjectIdentity
lldpStats = _LldpStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 7)
)
_LldpStatsTableMaxEnt_Type = Integer32
_LldpStatsTableMaxEnt_Object = MibScalar
lldpStatsTableMaxEnt = _LldpStatsTableMaxEnt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 7, 1),
    _LldpStatsTableMaxEnt_Type()
)
lldpStatsTableMaxEnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpStatsTableMaxEnt.setStatus("current")
_LldpStatsTable_Object = MibTable
lldpStatsTable = _LldpStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 7, 2)
)
if mibBuilder.loadTexts:
    lldpStatsTable.setStatus("current")
_LldpStatsTableEntry_Object = MibTableRow
lldpStatsTableEntry = _LldpStatsTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 7, 2, 1)
)
lldpStatsTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "lldpStatsIndex"),
)
if mibBuilder.loadTexts:
    lldpStatsTableEntry.setStatus("current")
_LldpStatsIndex_Type = PortNumber
_LldpStatsIndex_Object = MibTableColumn
lldpStatsIndex = _LldpStatsIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 7, 2, 1, 1),
    _LldpStatsIndex_Type()
)
lldpStatsIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpStatsIndex.setStatus("current")
_LldpStatsFramesOutTotal_Type = Counter32
_LldpStatsFramesOutTotal_Object = MibTableColumn
lldpStatsFramesOutTotal = _LldpStatsFramesOutTotal_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 7, 2, 1, 2),
    _LldpStatsFramesOutTotal_Type()
)
lldpStatsFramesOutTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpStatsFramesOutTotal.setStatus("current")
_LldpStatsFramesInTotal_Type = Counter32
_LldpStatsFramesInTotal_Object = MibTableColumn
lldpStatsFramesInTotal = _LldpStatsFramesInTotal_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 7, 2, 1, 3),
    _LldpStatsFramesInTotal_Type()
)
lldpStatsFramesInTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpStatsFramesInTotal.setStatus("current")
_LldpStatsFramesInErrorsTotal_Type = Counter32
_LldpStatsFramesInErrorsTotal_Object = MibTableColumn
lldpStatsFramesInErrorsTotal = _LldpStatsFramesInErrorsTotal_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 7, 2, 1, 4),
    _LldpStatsFramesInErrorsTotal_Type()
)
lldpStatsFramesInErrorsTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpStatsFramesInErrorsTotal.setStatus("current")
_LldpStatsFramesDiscardedTotal_Type = Counter32
_LldpStatsFramesDiscardedTotal_Object = MibTableColumn
lldpStatsFramesDiscardedTotal = _LldpStatsFramesDiscardedTotal_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 7, 2, 1, 5),
    _LldpStatsFramesDiscardedTotal_Type()
)
lldpStatsFramesDiscardedTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpStatsFramesDiscardedTotal.setStatus("current")
_LldpStatsTLVsUnrecognizedTotal_Type = Counter32
_LldpStatsTLVsUnrecognizedTotal_Object = MibTableColumn
lldpStatsTLVsUnrecognizedTotal = _LldpStatsTLVsUnrecognizedTotal_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 7, 2, 1, 6),
    _LldpStatsTLVsUnrecognizedTotal_Type()
)
lldpStatsTLVsUnrecognizedTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpStatsTLVsUnrecognizedTotal.setStatus("current")
_LldpStatsAgeoutsTotal_Type = Counter32
_LldpStatsAgeoutsTotal_Object = MibTableColumn
lldpStatsAgeoutsTotal = _LldpStatsAgeoutsTotal_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 7, 2, 1, 7),
    _LldpStatsAgeoutsTotal_Type()
)
lldpStatsAgeoutsTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpStatsAgeoutsTotal.setStatus("current")


class _LldpStatsClear_Type(Integer32):
    """Custom type lldpStatsClear based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_LldpStatsClear_Type.__name__ = "Integer32"
_LldpStatsClear_Object = MibTableColumn
lldpStatsClear = _LldpStatsClear_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 7, 2, 1, 8),
    _LldpStatsClear_Type()
)
lldpStatsClear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lldpStatsClear.setStatus("current")


class _LldpStatsClearAll_Type(Integer32):
    """Custom type lldpStatsClearAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_LldpStatsClearAll_Type.__name__ = "Integer32"
_LldpStatsClearAll_Object = MibScalar
lldpStatsClearAll = _LldpStatsClearAll_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 7, 3),
    _LldpStatsClearAll_Type()
)
lldpStatsClearAll.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lldpStatsClearAll.setStatus("current")
_OamStats_ObjectIdentity = ObjectIdentity
oamStats = _OamStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 8)
)
_OamStatsPortTable_Object = MibTable
oamStatsPortTable = _OamStatsPortTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 8, 1)
)
if mibBuilder.loadTexts:
    oamStatsPortTable.setStatus("current")
_OamStatsPortEntry_Object = MibTableRow
oamStatsPortEntry = _OamStatsPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 8, 1, 1)
)
oamStatsPortEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "oamStatsPortIndex"),
)
if mibBuilder.loadTexts:
    oamStatsPortEntry.setStatus("current")
_OamStatsPortIndex_Type = PortNumber
_OamStatsPortIndex_Object = MibTableColumn
oamStatsPortIndex = _OamStatsPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 8, 1, 1, 1),
    _OamStatsPortIndex_Type()
)
oamStatsPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamStatsPortIndex.setStatus("current")
_OamStatsPortInfoTx_Type = Integer32
_OamStatsPortInfoTx_Object = MibTableColumn
oamStatsPortInfoTx = _OamStatsPortInfoTx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 8, 1, 1, 2),
    _OamStatsPortInfoTx_Type()
)
oamStatsPortInfoTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamStatsPortInfoTx.setStatus("current")
_OamStatsPortInfoRx_Type = Integer32
_OamStatsPortInfoRx_Object = MibTableColumn
oamStatsPortInfoRx = _OamStatsPortInfoRx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 8, 1, 1, 3),
    _OamStatsPortInfoRx_Type()
)
oamStatsPortInfoRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamStatsPortInfoRx.setStatus("current")
_OamStatsPortUnsupTx_Type = Integer32
_OamStatsPortUnsupTx_Object = MibTableColumn
oamStatsPortUnsupTx = _OamStatsPortUnsupTx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 8, 1, 1, 4),
    _OamStatsPortUnsupTx_Type()
)
oamStatsPortUnsupTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamStatsPortUnsupTx.setStatus("current")
_OamStatsPortUnsupRx_Type = Integer32
_OamStatsPortUnsupRx_Object = MibTableColumn
oamStatsPortUnsupRx = _OamStatsPortUnsupRx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 8, 1, 1, 5),
    _OamStatsPortUnsupRx_Type()
)
oamStatsPortUnsupRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamStatsPortUnsupRx.setStatus("current")
_OamStatsPortLocalLinkFaults_Type = Integer32
_OamStatsPortLocalLinkFaults_Object = MibTableColumn
oamStatsPortLocalLinkFaults = _OamStatsPortLocalLinkFaults_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 8, 1, 1, 6),
    _OamStatsPortLocalLinkFaults_Type()
)
oamStatsPortLocalLinkFaults.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamStatsPortLocalLinkFaults.setStatus("current")
_OamStatsPortLocalCriticalEvents_Type = Integer32
_OamStatsPortLocalCriticalEvents_Object = MibTableColumn
oamStatsPortLocalCriticalEvents = _OamStatsPortLocalCriticalEvents_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 8, 1, 1, 7),
    _OamStatsPortLocalCriticalEvents_Type()
)
oamStatsPortLocalCriticalEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamStatsPortLocalCriticalEvents.setStatus("current")
_OamStatsPortLocalDyingGasps_Type = Integer32
_OamStatsPortLocalDyingGasps_Object = MibTableColumn
oamStatsPortLocalDyingGasps = _OamStatsPortLocalDyingGasps_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 8, 1, 1, 8),
    _OamStatsPortLocalDyingGasps_Type()
)
oamStatsPortLocalDyingGasps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamStatsPortLocalDyingGasps.setStatus("current")
_OamStatsPortRemoteLinkFaults_Type = Integer32
_OamStatsPortRemoteLinkFaults_Object = MibTableColumn
oamStatsPortRemoteLinkFaults = _OamStatsPortRemoteLinkFaults_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 8, 1, 1, 9),
    _OamStatsPortRemoteLinkFaults_Type()
)
oamStatsPortRemoteLinkFaults.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamStatsPortRemoteLinkFaults.setStatus("current")
_OamStatsPortRemoteCriticalEvents_Type = Integer32
_OamStatsPortRemoteCriticalEvents_Object = MibTableColumn
oamStatsPortRemoteCriticalEvents = _OamStatsPortRemoteCriticalEvents_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 8, 1, 1, 10),
    _OamStatsPortRemoteCriticalEvents_Type()
)
oamStatsPortRemoteCriticalEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamStatsPortRemoteCriticalEvents.setStatus("current")
_OamStatsPortRemoteDyingGasps_Type = Integer32
_OamStatsPortRemoteDyingGasps_Object = MibTableColumn
oamStatsPortRemoteDyingGasps = _OamStatsPortRemoteDyingGasps_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 8, 1, 1, 11),
    _OamStatsPortRemoteDyingGasps_Type()
)
oamStatsPortRemoteDyingGasps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamStatsPortRemoteDyingGasps.setStatus("current")
_VlagStats_ObjectIdentity = ObjectIdentity
vlagStats = _VlagStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 11)
)
_VlagStatsSystem_ObjectIdentity = ObjectIdentity
vlagStatsSystem = _VlagStatsSystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 11, 1)
)


class _VlagStatsClear_Type(Integer32):
    """Custom type vlagStatsClear based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("other", 2))
    )


_VlagStatsClear_Type.__name__ = "Integer32"
_VlagStatsClear_Object = MibScalar
vlagStatsClear = _VlagStatsClear_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 11, 1, 1),
    _VlagStatsClear_Type()
)
vlagStatsClear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlagStatsClear.setStatus("current")
_VlagStatsIsl_ObjectIdentity = ObjectIdentity
vlagStatsIsl = _VlagStatsIsl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 11, 2)
)
_VlagStatsIslInOctets_Type = Counter32
_VlagStatsIslInOctets_Object = MibScalar
vlagStatsIslInOctets = _VlagStatsIslInOctets_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 11, 2, 1),
    _VlagStatsIslInOctets_Type()
)
vlagStatsIslInOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagStatsIslInOctets.setStatus("current")
_VlagStatsIslInPackets_Type = Counter32
_VlagStatsIslInPackets_Object = MibScalar
vlagStatsIslInPackets = _VlagStatsIslInPackets_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 11, 2, 2),
    _VlagStatsIslInPackets_Type()
)
vlagStatsIslInPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagStatsIslInPackets.setStatus("current")
_VlagStatsIslOutOctets_Type = Counter32
_VlagStatsIslOutOctets_Object = MibScalar
vlagStatsIslOutOctets = _VlagStatsIslOutOctets_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 11, 2, 3),
    _VlagStatsIslOutOctets_Type()
)
vlagStatsIslOutOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagStatsIslOutOctets.setStatus("current")
_VlagStatsIslOutPackets_Type = Counter32
_VlagStatsIslOutPackets_Object = MibScalar
vlagStatsIslOutPackets = _VlagStatsIslOutPackets_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 11, 2, 4),
    _VlagStatsIslOutPackets_Type()
)
vlagStatsIslOutPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagStatsIslOutPackets.setStatus("current")
_VlagStatsHealth_ObjectIdentity = ObjectIdentity
vlagStatsHealth = _VlagStatsHealth_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 11, 3)
)
_VlagStatsLacp_ObjectIdentity = ObjectIdentity
vlagStatsLacp = _VlagStatsLacp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 11, 4)
)
_VlagStatsPdu_ObjectIdentity = ObjectIdentity
vlagStatsPdu = _VlagStatsPdu_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 11, 5)
)
_VlagStatsPduSentRoleElection_Type = Counter32
_VlagStatsPduSentRoleElection_Object = MibScalar
vlagStatsPduSentRoleElection = _VlagStatsPduSentRoleElection_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 11, 5, 1),
    _VlagStatsPduSentRoleElection_Type()
)
vlagStatsPduSentRoleElection.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagStatsPduSentRoleElection.setStatus("current")
_VlagStatsPduSentSystemInfo_Type = Counter32
_VlagStatsPduSentSystemInfo_Object = MibScalar
vlagStatsPduSentSystemInfo = _VlagStatsPduSentSystemInfo_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 11, 5, 2),
    _VlagStatsPduSentSystemInfo_Type()
)
vlagStatsPduSentSystemInfo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagStatsPduSentSystemInfo.setStatus("current")
_VlagStatsPduSentFdbDynamicAdd_Type = Counter32
_VlagStatsPduSentFdbDynamicAdd_Object = MibScalar
vlagStatsPduSentFdbDynamicAdd = _VlagStatsPduSentFdbDynamicAdd_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 11, 5, 7),
    _VlagStatsPduSentFdbDynamicAdd_Type()
)
vlagStatsPduSentFdbDynamicAdd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagStatsPduSentFdbDynamicAdd.setStatus("current")
_VlagStatsPduSentFdbDynamicDel_Type = Counter32
_VlagStatsPduSentFdbDynamicDel_Object = MibScalar
vlagStatsPduSentFdbDynamicDel = _VlagStatsPduSentFdbDynamicDel_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 11, 5, 8),
    _VlagStatsPduSentFdbDynamicDel_Type()
)
vlagStatsPduSentFdbDynamicDel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagStatsPduSentFdbDynamicDel.setStatus("current")
_VlagStatsPduSentFdbInactiveAdd_Type = Counter32
_VlagStatsPduSentFdbInactiveAdd_Object = MibScalar
vlagStatsPduSentFdbInactiveAdd = _VlagStatsPduSentFdbInactiveAdd_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 11, 5, 9),
    _VlagStatsPduSentFdbInactiveAdd_Type()
)
vlagStatsPduSentFdbInactiveAdd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagStatsPduSentFdbInactiveAdd.setStatus("current")
_VlagStatsPduSentFdbInactiveDel_Type = Counter32
_VlagStatsPduSentFdbInactiveDel_Object = MibScalar
vlagStatsPduSentFdbInactiveDel = _VlagStatsPduSentFdbInactiveDel_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 11, 5, 10),
    _VlagStatsPduSentFdbInactiveDel_Type()
)
vlagStatsPduSentFdbInactiveDel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagStatsPduSentFdbInactiveDel.setStatus("current")
_VlagStatsPduSentHlthCheck_Type = Counter32
_VlagStatsPduSentHlthCheck_Object = MibScalar
vlagStatsPduSentHlthCheck = _VlagStatsPduSentHlthCheck_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 11, 5, 13),
    _VlagStatsPduSentHlthCheck_Type()
)
vlagStatsPduSentHlthCheck.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagStatsPduSentHlthCheck.setStatus("current")
_VlagStatsPduSentOther_Type = Counter32
_VlagStatsPduSentOther_Object = MibScalar
vlagStatsPduSentOther = _VlagStatsPduSentOther_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 11, 5, 15),
    _VlagStatsPduSentOther_Type()
)
vlagStatsPduSentOther.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagStatsPduSentOther.setStatus("current")
_VlagStatsPduSentUnknown_Type = Counter32
_VlagStatsPduSentUnknown_Object = MibScalar
vlagStatsPduSentUnknown = _VlagStatsPduSentUnknown_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 11, 5, 16),
    _VlagStatsPduSentUnknown_Type()
)
vlagStatsPduSentUnknown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagStatsPduSentUnknown.setStatus("current")
_VlagStatsPduRcvRoleElection_Type = Counter32
_VlagStatsPduRcvRoleElection_Object = MibScalar
vlagStatsPduRcvRoleElection = _VlagStatsPduRcvRoleElection_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 11, 5, 17),
    _VlagStatsPduRcvRoleElection_Type()
)
vlagStatsPduRcvRoleElection.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagStatsPduRcvRoleElection.setStatus("current")
_VlagStatsPduRcvSystemInfo_Type = Counter32
_VlagStatsPduRcvSystemInfo_Object = MibScalar
vlagStatsPduRcvSystemInfo = _VlagStatsPduRcvSystemInfo_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 11, 5, 18),
    _VlagStatsPduRcvSystemInfo_Type()
)
vlagStatsPduRcvSystemInfo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagStatsPduRcvSystemInfo.setStatus("current")
_VlagStatsPduRcvFdbDynamicAdd_Type = Counter32
_VlagStatsPduRcvFdbDynamicAdd_Object = MibScalar
vlagStatsPduRcvFdbDynamicAdd = _VlagStatsPduRcvFdbDynamicAdd_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 11, 5, 23),
    _VlagStatsPduRcvFdbDynamicAdd_Type()
)
vlagStatsPduRcvFdbDynamicAdd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagStatsPduRcvFdbDynamicAdd.setStatus("current")
_VlagStatsPduRcvFdbDynamicDel_Type = Counter32
_VlagStatsPduRcvFdbDynamicDel_Object = MibScalar
vlagStatsPduRcvFdbDynamicDel = _VlagStatsPduRcvFdbDynamicDel_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 11, 5, 24),
    _VlagStatsPduRcvFdbDynamicDel_Type()
)
vlagStatsPduRcvFdbDynamicDel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagStatsPduRcvFdbDynamicDel.setStatus("current")
_VlagStatsPduRcvFdbInactiveAdd_Type = Counter32
_VlagStatsPduRcvFdbInactiveAdd_Object = MibScalar
vlagStatsPduRcvFdbInactiveAdd = _VlagStatsPduRcvFdbInactiveAdd_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 11, 5, 25),
    _VlagStatsPduRcvFdbInactiveAdd_Type()
)
vlagStatsPduRcvFdbInactiveAdd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagStatsPduRcvFdbInactiveAdd.setStatus("current")
_VlagStatsPduRcvFdbInactiveDel_Type = Counter32
_VlagStatsPduRcvFdbInactiveDel_Object = MibScalar
vlagStatsPduRcvFdbInactiveDel = _VlagStatsPduRcvFdbInactiveDel_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 11, 5, 26),
    _VlagStatsPduRcvFdbInactiveDel_Type()
)
vlagStatsPduRcvFdbInactiveDel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagStatsPduRcvFdbInactiveDel.setStatus("current")
_VlagStatsPduRcvHlthCheck_Type = Counter32
_VlagStatsPduRcvHlthCheck_Object = MibScalar
vlagStatsPduRcvHlthCheck = _VlagStatsPduRcvHlthCheck_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 11, 5, 29),
    _VlagStatsPduRcvHlthCheck_Type()
)
vlagStatsPduRcvHlthCheck.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagStatsPduRcvHlthCheck.setStatus("current")
_VlagStatsPduRcvOther_Type = Counter32
_VlagStatsPduRcvOther_Object = MibScalar
vlagStatsPduRcvOther = _VlagStatsPduRcvOther_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 11, 5, 31),
    _VlagStatsPduRcvOther_Type()
)
vlagStatsPduRcvOther.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagStatsPduRcvOther.setStatus("current")
_VlagStatsPduRcvUnknown_Type = Counter32
_VlagStatsPduRcvUnknown_Object = MibScalar
vlagStatsPduRcvUnknown = _VlagStatsPduRcvUnknown_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 11, 5, 32),
    _VlagStatsPduRcvUnknown_Type()
)
vlagStatsPduRcvUnknown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagStatsPduRcvUnknown.setStatus("current")
_VlagStatsPduSentPeerInstanceEnable_Type = Counter32
_VlagStatsPduSentPeerInstanceEnable_Object = MibScalar
vlagStatsPduSentPeerInstanceEnable = _VlagStatsPduSentPeerInstanceEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 11, 5, 33),
    _VlagStatsPduSentPeerInstanceEnable_Type()
)
vlagStatsPduSentPeerInstanceEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagStatsPduSentPeerInstanceEnable.setStatus("current")
_VlagStatsPduSentPeerInstanceDisable_Type = Counter32
_VlagStatsPduSentPeerInstanceDisable_Object = MibScalar
vlagStatsPduSentPeerInstanceDisable = _VlagStatsPduSentPeerInstanceDisable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 11, 5, 34),
    _VlagStatsPduSentPeerInstanceDisable_Type()
)
vlagStatsPduSentPeerInstanceDisable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagStatsPduSentPeerInstanceDisable.setStatus("current")
_VlagStatsPduSentISLHello_Type = Counter32
_VlagStatsPduSentISLHello_Object = MibScalar
vlagStatsPduSentISLHello = _VlagStatsPduSentISLHello_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 11, 5, 35),
    _VlagStatsPduSentISLHello_Type()
)
vlagStatsPduSentISLHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagStatsPduSentISLHello.setStatus("current")
_VlagStatsPduRcvISLHello_Type = Counter32
_VlagStatsPduRcvISLHello_Object = MibScalar
vlagStatsPduRcvISLHello = _VlagStatsPduRcvISLHello_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 11, 5, 36),
    _VlagStatsPduRcvISLHello_Type()
)
vlagStatsPduRcvISLHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagStatsPduRcvISLHello.setStatus("current")
_VlagStatsPduRcvPeerInstanceEnable_Type = Counter32
_VlagStatsPduRcvPeerInstanceEnable_Object = MibScalar
vlagStatsPduRcvPeerInstanceEnable = _VlagStatsPduRcvPeerInstanceEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 11, 5, 37),
    _VlagStatsPduRcvPeerInstanceEnable_Type()
)
vlagStatsPduRcvPeerInstanceEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagStatsPduRcvPeerInstanceEnable.setStatus("current")
_VlagStatsPduRcvPeerInstanceDisable_Type = Counter32
_VlagStatsPduRcvPeerInstanceDisable_Object = MibScalar
vlagStatsPduRcvPeerInstanceDisable = _VlagStatsPduRcvPeerInstanceDisable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 11, 5, 38),
    _VlagStatsPduRcvPeerInstanceDisable_Type()
)
vlagStatsPduRcvPeerInstanceDisable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagStatsPduRcvPeerInstanceDisable.setStatus("current")
_VlagStatsIgmp_ObjectIdentity = ObjectIdentity
vlagStatsIgmp = _VlagStatsIgmp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 11, 6)
)
_VlagStatsIgmpReportsForwarded_Type = Counter32
_VlagStatsIgmpReportsForwarded_Object = MibScalar
vlagStatsIgmpReportsForwarded = _VlagStatsIgmpReportsForwarded_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 11, 6, 1),
    _VlagStatsIgmpReportsForwarded_Type()
)
vlagStatsIgmpReportsForwarded.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagStatsIgmpReportsForwarded.setStatus("current")
_VlagStatsIgmpLeavesForwarded_Type = Counter32
_VlagStatsIgmpLeavesForwarded_Object = MibScalar
vlagStatsIgmpLeavesForwarded = _VlagStatsIgmpLeavesForwarded_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 11, 6, 2),
    _VlagStatsIgmpLeavesForwarded_Type()
)
vlagStatsIgmpLeavesForwarded.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagStatsIgmpLeavesForwarded.setStatus("current")
_SlpStats_ObjectIdentity = ObjectIdentity
slpStats = _SlpStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 12)
)
_SlpStatsTxCountersTable_Object = MibTable
slpStatsTxCountersTable = _SlpStatsTxCountersTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 12, 1)
)
if mibBuilder.loadTexts:
    slpStatsTxCountersTable.setStatus("current")
_SlpStatsTxCounterEntry_Object = MibTableRow
slpStatsTxCounterEntry = _SlpStatsTxCounterEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 12, 1, 1)
)
slpStatsTxCounterEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "slpTxCounterIndex"),
)
if mibBuilder.loadTexts:
    slpStatsTxCounterEntry.setStatus("current")
_SlpTxCounterIndex_Type = Integer32
_SlpTxCounterIndex_Object = MibTableColumn
slpTxCounterIndex = _SlpTxCounterIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 12, 1, 1, 1),
    _SlpTxCounterIndex_Type()
)
slpTxCounterIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slpTxCounterIndex.setStatus("current")


class _SlpTxCounterName_Type(DisplayString):
    """Custom type slpTxCounterName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_SlpTxCounterName_Type.__name__ = "DisplayString"
_SlpTxCounterName_Object = MibTableColumn
slpTxCounterName = _SlpTxCounterName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 12, 1, 1, 2),
    _SlpTxCounterName_Type()
)
slpTxCounterName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slpTxCounterName.setStatus("current")
_SlpTxCounterUnicast_Type = Integer32
_SlpTxCounterUnicast_Object = MibTableColumn
slpTxCounterUnicast = _SlpTxCounterUnicast_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 12, 1, 1, 3),
    _SlpTxCounterUnicast_Type()
)
slpTxCounterUnicast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slpTxCounterUnicast.setStatus("current")
_SlpTxCounterMulticast_Type = Integer32
_SlpTxCounterMulticast_Object = MibTableColumn
slpTxCounterMulticast = _SlpTxCounterMulticast_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 12, 1, 1, 4),
    _SlpTxCounterMulticast_Type()
)
slpTxCounterMulticast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slpTxCounterMulticast.setStatus("current")
_SlpStatsRxCountersTable_Object = MibTable
slpStatsRxCountersTable = _SlpStatsRxCountersTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 12, 2)
)
if mibBuilder.loadTexts:
    slpStatsRxCountersTable.setStatus("current")
_SlpStatsRxCounterEntry_Object = MibTableRow
slpStatsRxCounterEntry = _SlpStatsRxCounterEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 12, 2, 1)
)
slpStatsRxCounterEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "slpRxCounterIndex"),
)
if mibBuilder.loadTexts:
    slpStatsRxCounterEntry.setStatus("current")
_SlpRxCounterIndex_Type = Integer32
_SlpRxCounterIndex_Object = MibTableColumn
slpRxCounterIndex = _SlpRxCounterIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 12, 2, 1, 1),
    _SlpRxCounterIndex_Type()
)
slpRxCounterIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slpRxCounterIndex.setStatus("current")


class _SlpRxCounterName_Type(DisplayString):
    """Custom type slpRxCounterName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_SlpRxCounterName_Type.__name__ = "DisplayString"
_SlpRxCounterName_Object = MibTableColumn
slpRxCounterName = _SlpRxCounterName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 12, 2, 1, 2),
    _SlpRxCounterName_Type()
)
slpRxCounterName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slpRxCounterName.setStatus("current")
_SlpRxCounterUnicast_Type = Integer32
_SlpRxCounterUnicast_Object = MibTableColumn
slpRxCounterUnicast = _SlpRxCounterUnicast_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 12, 2, 1, 3),
    _SlpRxCounterUnicast_Type()
)
slpRxCounterUnicast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slpRxCounterUnicast.setStatus("current")
_SlpRxCounterMulticast_Type = Integer32
_SlpRxCounterMulticast_Object = MibTableColumn
slpRxCounterMulticast = _SlpRxCounterMulticast_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 12, 2, 1, 4),
    _SlpRxCounterMulticast_Type()
)
slpRxCounterMulticast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slpRxCounterMulticast.setStatus("current")


class _SlpCountersClear_Type(Integer32):
    """Custom type slpCountersClear based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("other", 2))
    )


_SlpCountersClear_Type.__name__ = "Integer32"
_SlpCountersClear_Object = MibScalar
slpCountersClear = _SlpCountersClear_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 2, 12, 3),
    _SlpCountersClear_Type()
)
slpCountersClear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slpCountersClear.setStatus("current")
_Layer2Info_ObjectIdentity = ObjectIdentity
layer2Info = _Layer2Info_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3)
)
_FdbInfo_ObjectIdentity = ObjectIdentity
fdbInfo = _FdbInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 1)
)


class _FdbClear_Type(Integer32):
    """Custom type fdbClear based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_FdbClear_Type.__name__ = "Integer32"
_FdbClear_Object = MibScalar
fdbClear = _FdbClear_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 1, 1),
    _FdbClear_Type()
)
fdbClear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fdbClear.setStatus("current")
_FdbTable_Object = MibTable
fdbTable = _FdbTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 1, 2)
)
if mibBuilder.loadTexts:
    fdbTable.setStatus("current")
_FdbEntry_Object = MibTableRow
fdbEntry = _FdbEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 1, 2, 1)
)
fdbEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "fdbMacAddr"),
)
if mibBuilder.loadTexts:
    fdbEntry.setStatus("current")
_FdbMacAddr_Type = MacAddress
_FdbMacAddr_Object = MibTableColumn
fdbMacAddr = _FdbMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 1, 2, 1, 1),
    _FdbMacAddr_Type()
)
fdbMacAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbMacAddr.setStatus("current")
_FdbVlan_Type = Integer32
_FdbVlan_Object = MibTableColumn
fdbVlan = _FdbVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 1, 2, 1, 2),
    _FdbVlan_Type()
)
fdbVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbVlan.setStatus("current")
_FdbSrcPort_Type = PortNumber
_FdbSrcPort_Object = MibTableColumn
fdbSrcPort = _FdbSrcPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 1, 2, 1, 3),
    _FdbSrcPort_Type()
)
fdbSrcPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbSrcPort.setStatus("current")


class _FdbState_Type(Integer32):
    """Custom type fdbState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 1),
          ("forward", 2),
          ("trunk", 3))
    )


_FdbState_Type.__name__ = "Integer32"
_FdbState_Object = MibTableColumn
fdbState = _FdbState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 1, 2, 1, 4),
    _FdbState_Type()
)
fdbState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbState.setStatus("current")
_FdbSrcTrunk_Type = Integer32
_FdbSrcTrunk_Object = MibTableColumn
fdbSrcTrunk = _FdbSrcTrunk_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 1, 2, 1, 7),
    _FdbSrcTrunk_Type()
)
fdbSrcTrunk.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbSrcTrunk.setStatus("current")
_FdbStatus_Type = Integer32
_FdbStatus_Object = MibTableColumn
fdbStatus = _FdbStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 1, 2, 1, 8),
    _FdbStatus_Type()
)
fdbStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbStatus.setStatus("current")
_McastFdbTable_Object = MibTable
mcastFdbTable = _McastFdbTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 1, 3)
)
if mibBuilder.loadTexts:
    mcastFdbTable.setStatus("current")
_McastFdbEntry_Object = MibTableRow
mcastFdbEntry = _McastFdbEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 1, 3, 1)
)
mcastFdbEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "mcastFdbEntryIndex"),
)
if mibBuilder.loadTexts:
    mcastFdbEntry.setStatus("current")
_McastFdbEntryIndex_Type = Integer32
_McastFdbEntryIndex_Object = MibTableColumn
mcastFdbEntryIndex = _McastFdbEntryIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 1, 3, 1, 1),
    _McastFdbEntryIndex_Type()
)
mcastFdbEntryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcastFdbEntryIndex.setStatus("current")
_McastFdbMacAddr_Type = MacAddress
_McastFdbMacAddr_Object = MibTableColumn
mcastFdbMacAddr = _McastFdbMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 1, 3, 1, 2),
    _McastFdbMacAddr_Type()
)
mcastFdbMacAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcastFdbMacAddr.setStatus("current")
_McastFdbVlan_Type = Integer32
_McastFdbVlan_Object = MibTableColumn
mcastFdbVlan = _McastFdbVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 1, 3, 1, 3),
    _McastFdbVlan_Type()
)
mcastFdbVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcastFdbVlan.setStatus("current")
_McastFdbSrcPorts_Type = PortNumber
_McastFdbSrcPorts_Object = MibTableColumn
mcastFdbSrcPorts = _McastFdbSrcPorts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 1, 3, 1, 4),
    _McastFdbSrcPorts_Type()
)
mcastFdbSrcPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcastFdbSrcPorts.setStatus("current")
_StpInfo_ObjectIdentity = ObjectIdentity
stpInfo = _StpInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 2)
)
_StpInfoTable_Object = MibTable
stpInfoTable = _StpInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 2, 1)
)
if mibBuilder.loadTexts:
    stpInfoTable.setStatus("current")
_StpInfoTableEntry_Object = MibTableRow
stpInfoTableEntry = _StpInfoTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 2, 1, 1)
)
stpInfoTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "stpInfoIndex"),
)
if mibBuilder.loadTexts:
    stpInfoTableEntry.setStatus("current")
_StpInfoIndex_Type = Integer32
_StpInfoIndex_Object = MibTableColumn
stpInfoIndex = _StpInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 2, 1, 1, 1),
    _StpInfoIndex_Type()
)
stpInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoIndex.setStatus("current")
_StpInfoTimeSinceTopChange_Type = TimeTicks
_StpInfoTimeSinceTopChange_Object = MibTableColumn
stpInfoTimeSinceTopChange = _StpInfoTimeSinceTopChange_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 2, 1, 1, 2),
    _StpInfoTimeSinceTopChange_Type()
)
stpInfoTimeSinceTopChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoTimeSinceTopChange.setStatus("current")
_StpInfoTopChanges_Type = Counter32
_StpInfoTopChanges_Object = MibTableColumn
stpInfoTopChanges = _StpInfoTopChanges_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 2, 1, 1, 3),
    _StpInfoTopChanges_Type()
)
stpInfoTopChanges.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoTopChanges.setStatus("current")
_StpInfoDesignatedRoot_Type = BridgeId
_StpInfoDesignatedRoot_Object = MibTableColumn
stpInfoDesignatedRoot = _StpInfoDesignatedRoot_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 2, 1, 1, 4),
    _StpInfoDesignatedRoot_Type()
)
stpInfoDesignatedRoot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoDesignatedRoot.setStatus("current")
_StpInfoRootCost_Type = Integer32
_StpInfoRootCost_Object = MibTableColumn
stpInfoRootCost = _StpInfoRootCost_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 2, 1, 1, 5),
    _StpInfoRootCost_Type()
)
stpInfoRootCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoRootCost.setStatus("current")
_StpInfoRootPort_Type = PortNumber
_StpInfoRootPort_Object = MibTableColumn
stpInfoRootPort = _StpInfoRootPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 2, 1, 1, 6),
    _StpInfoRootPort_Type()
)
stpInfoRootPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoRootPort.setStatus("current")
_StpInfoMaxAge_Type = Integer32
_StpInfoMaxAge_Object = MibTableColumn
stpInfoMaxAge = _StpInfoMaxAge_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 2, 1, 1, 7),
    _StpInfoMaxAge_Type()
)
stpInfoMaxAge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoMaxAge.setStatus("current")
_StpInfoHelloTime_Type = Integer32
_StpInfoHelloTime_Object = MibTableColumn
stpInfoHelloTime = _StpInfoHelloTime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 2, 1, 1, 8),
    _StpInfoHelloTime_Type()
)
stpInfoHelloTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoHelloTime.setStatus("current")
_StpInfoForwardDelay_Type = Integer32
_StpInfoForwardDelay_Object = MibTableColumn
stpInfoForwardDelay = _StpInfoForwardDelay_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 2, 1, 1, 9),
    _StpInfoForwardDelay_Type()
)
stpInfoForwardDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoForwardDelay.setStatus("current")
_StpInfoHoldTime_Type = Integer32
_StpInfoHoldTime_Object = MibTableColumn
stpInfoHoldTime = _StpInfoHoldTime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 2, 1, 1, 10),
    _StpInfoHoldTime_Type()
)
stpInfoHoldTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoHoldTime.setStatus("current")
_StpInfoPortTable_Object = MibTable
stpInfoPortTable = _StpInfoPortTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 2, 2)
)
if mibBuilder.loadTexts:
    stpInfoPortTable.setStatus("current")
_StpInfoPortTableEntry_Object = MibTableRow
stpInfoPortTableEntry = _StpInfoPortTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 2, 2, 1)
)
stpInfoPortTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "stpInfoPortStpIndex"),
    (0, "IBM-GbTOR-G8264T-MIB", "stpInfoPortIndex"),
)
if mibBuilder.loadTexts:
    stpInfoPortTableEntry.setStatus("current")
_StpInfoPortStpIndex_Type = Integer32
_StpInfoPortStpIndex_Object = MibTableColumn
stpInfoPortStpIndex = _StpInfoPortStpIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 2, 2, 1, 1),
    _StpInfoPortStpIndex_Type()
)
stpInfoPortStpIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoPortStpIndex.setStatus("current")
_StpInfoPortIndex_Type = PortNumber
_StpInfoPortIndex_Object = MibTableColumn
stpInfoPortIndex = _StpInfoPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 2, 2, 1, 2),
    _StpInfoPortIndex_Type()
)
stpInfoPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoPortIndex.setStatus("current")


class _StpInfoPortState_Type(Integer32):
    """Custom type stpInfoPortState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("blocking", 2),
          ("listening", 3),
          ("learning", 4),
          ("forwarding", 5),
          ("broken", 6),
          ("discarding", 7),
          ("na", 8))
    )


_StpInfoPortState_Type.__name__ = "Integer32"
_StpInfoPortState_Object = MibTableColumn
stpInfoPortState = _StpInfoPortState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 2, 2, 1, 3),
    _StpInfoPortState_Type()
)
stpInfoPortState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoPortState.setStatus("current")
_StpInfoPortDesignatedRoot_Type = BridgeId
_StpInfoPortDesignatedRoot_Object = MibTableColumn
stpInfoPortDesignatedRoot = _StpInfoPortDesignatedRoot_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 2, 2, 1, 4),
    _StpInfoPortDesignatedRoot_Type()
)
stpInfoPortDesignatedRoot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoPortDesignatedRoot.setStatus("current")
_StpInfoPortDesignatedCost_Type = Integer32
_StpInfoPortDesignatedCost_Object = MibTableColumn
stpInfoPortDesignatedCost = _StpInfoPortDesignatedCost_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 2, 2, 1, 5),
    _StpInfoPortDesignatedCost_Type()
)
stpInfoPortDesignatedCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoPortDesignatedCost.setStatus("current")
_StpInfoPortDesignatedBridge_Type = BridgeId
_StpInfoPortDesignatedBridge_Object = MibTableColumn
stpInfoPortDesignatedBridge = _StpInfoPortDesignatedBridge_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 2, 2, 1, 6),
    _StpInfoPortDesignatedBridge_Type()
)
stpInfoPortDesignatedBridge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoPortDesignatedBridge.setStatus("current")


class _StpInfoPortDesignatedPort_Type(OctetString):
    """Custom type stpInfoPortDesignatedPort based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )
    fixed_length = 2


_StpInfoPortDesignatedPort_Type.__name__ = "OctetString"
_StpInfoPortDesignatedPort_Object = MibTableColumn
stpInfoPortDesignatedPort = _StpInfoPortDesignatedPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 2, 2, 1, 7),
    _StpInfoPortDesignatedPort_Type()
)
stpInfoPortDesignatedPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoPortDesignatedPort.setStatus("current")
_StpInfoPortForwardTransitions_Type = Counter32
_StpInfoPortForwardTransitions_Object = MibTableColumn
stpInfoPortForwardTransitions = _StpInfoPortForwardTransitions_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 2, 2, 1, 8),
    _StpInfoPortForwardTransitions_Type()
)
stpInfoPortForwardTransitions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoPortForwardTransitions.setStatus("current")
_StpInfoPortPathCost_Type = Integer32
_StpInfoPortPathCost_Object = MibTableColumn
stpInfoPortPathCost = _StpInfoPortPathCost_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 2, 2, 1, 9),
    _StpInfoPortPathCost_Type()
)
stpInfoPortPathCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoPortPathCost.setStatus("current")


class _StpInfoPortRole_Type(Integer32):
    """Custom type stpInfoPortRole based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("alternate", 2),
          ("backup", 3),
          ("root", 4),
          ("designated", 5),
          ("master", 6),
          ("unknown", 7))
    )


_StpInfoPortRole_Type.__name__ = "Integer32"
_StpInfoPortRole_Object = MibTableColumn
stpInfoPortRole = _StpInfoPortRole_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 2, 2, 1, 10),
    _StpInfoPortRole_Type()
)
stpInfoPortRole.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoPortRole.setStatus("current")


class _StpInfoPortLinkType_Type(Integer32):
    """Custom type stpInfoPortLinkType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("p2p", 1),
          ("shared", 2),
          ("unknown", 3))
    )


_StpInfoPortLinkType_Type.__name__ = "Integer32"
_StpInfoPortLinkType_Object = MibTableColumn
stpInfoPortLinkType = _StpInfoPortLinkType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 2, 2, 1, 11),
    _StpInfoPortLinkType_Type()
)
stpInfoPortLinkType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoPortLinkType.setStatus("current")


class _StpInfoPortEdge_Type(Integer32):
    """Custom type stpInfoPortEdge based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_StpInfoPortEdge_Type.__name__ = "Integer32"
_StpInfoPortEdge_Object = MibTableColumn
stpInfoPortEdge = _StpInfoPortEdge_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 2, 2, 1, 12),
    _StpInfoPortEdge_Type()
)
stpInfoPortEdge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoPortEdge.setStatus("current")


class _StpInfoPortExtGuard_Type(Integer32):
    """Custom type stpInfoPortExtGuard based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("normal", 0),
          ("loop-inc", 1),
          ("root-inc", 2))
    )


_StpInfoPortExtGuard_Type.__name__ = "Integer32"
_StpInfoPortExtGuard_Object = MibTableColumn
stpInfoPortExtGuard = _StpInfoPortExtGuard_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 2, 2, 1, 13),
    _StpInfoPortExtGuard_Type()
)
stpInfoPortExtGuard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoPortExtGuard.setStatus("current")
_StpInfoPortPriority_Type = Integer32
_StpInfoPortPriority_Object = MibTableColumn
stpInfoPortPriority = _StpInfoPortPriority_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 2, 2, 1, 14),
    _StpInfoPortPriority_Type()
)
stpInfoPortPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoPortPriority.setStatus("current")
_LacpInfo_ObjectIdentity = ObjectIdentity
lacpInfo = _LacpInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3)
)
_LacpInfoAggrTable_Object = MibTable
lacpInfoAggrTable = _LacpInfoAggrTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 1)
)
if mibBuilder.loadTexts:
    lacpInfoAggrTable.setStatus("current")
_LacpInfoAggrTableEntry_Object = MibTableRow
lacpInfoAggrTableEntry = _LacpInfoAggrTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 1, 1)
)
lacpInfoAggrTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "lacpInfoAggrIndex"),
)
if mibBuilder.loadTexts:
    lacpInfoAggrTableEntry.setStatus("current")
_LacpInfoAggrIndex_Type = PortNumber
_LacpInfoAggrIndex_Object = MibTableColumn
lacpInfoAggrIndex = _LacpInfoAggrIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 1, 1, 1),
    _LacpInfoAggrIndex_Type()
)
lacpInfoAggrIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoAggrIndex.setStatus("current")
_LacpInfoAggrId_Type = Integer32
_LacpInfoAggrId_Object = MibTableColumn
lacpInfoAggrId = _LacpInfoAggrId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 1, 1, 2),
    _LacpInfoAggrId_Type()
)
lacpInfoAggrId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoAggrId.setStatus("current")
_LacpInfoAggrMac_Type = DisplayString
_LacpInfoAggrMac_Object = MibTableColumn
lacpInfoAggrMac = _LacpInfoAggrMac_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 1, 1, 3),
    _LacpInfoAggrMac_Type()
)
lacpInfoAggrMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoAggrMac.setStatus("current")
_LacpInfoAggrActSysPrio_Type = Integer32
_LacpInfoAggrActSysPrio_Object = MibTableColumn
lacpInfoAggrActSysPrio = _LacpInfoAggrActSysPrio_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 1, 1, 4),
    _LacpInfoAggrActSysPrio_Type()
)
lacpInfoAggrActSysPrio.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoAggrActSysPrio.setStatus("current")
_LacpInfoAggrActSysId_Type = DisplayString
_LacpInfoAggrActSysId_Object = MibTableColumn
lacpInfoAggrActSysId = _LacpInfoAggrActSysId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 1, 1, 5),
    _LacpInfoAggrActSysId_Type()
)
lacpInfoAggrActSysId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoAggrActSysId.setStatus("current")


class _LacpInfoAggrIndivState_Type(Integer32):
    """Custom type lacpInfoAggrIndivState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoAggrIndivState_Type.__name__ = "Integer32"
_LacpInfoAggrIndivState_Object = MibTableColumn
lacpInfoAggrIndivState = _LacpInfoAggrIndivState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 1, 1, 6),
    _LacpInfoAggrIndivState_Type()
)
lacpInfoAggrIndivState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoAggrIndivState.setStatus("current")
_LacpInfoAggrActAdminKey_Type = Integer32
_LacpInfoAggrActAdminKey_Object = MibTableColumn
lacpInfoAggrActAdminKey = _LacpInfoAggrActAdminKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 1, 1, 7),
    _LacpInfoAggrActAdminKey_Type()
)
lacpInfoAggrActAdminKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoAggrActAdminKey.setStatus("current")
_LacpInfoAggrActOperKey_Type = Integer32
_LacpInfoAggrActOperKey_Object = MibTableColumn
lacpInfoAggrActOperKey = _LacpInfoAggrActOperKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 1, 1, 8),
    _LacpInfoAggrActOperKey_Type()
)
lacpInfoAggrActOperKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoAggrActOperKey.setStatus("current")
_LacpInfoAggrPartSysPrio_Type = Integer32
_LacpInfoAggrPartSysPrio_Object = MibTableColumn
lacpInfoAggrPartSysPrio = _LacpInfoAggrPartSysPrio_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 1, 1, 9),
    _LacpInfoAggrPartSysPrio_Type()
)
lacpInfoAggrPartSysPrio.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoAggrPartSysPrio.setStatus("current")
_LacpInfoAggrPartSysId_Type = DisplayString
_LacpInfoAggrPartSysId_Object = MibTableColumn
lacpInfoAggrPartSysId = _LacpInfoAggrPartSysId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 1, 1, 10),
    _LacpInfoAggrPartSysId_Type()
)
lacpInfoAggrPartSysId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoAggrPartSysId.setStatus("current")
_LacpInfoAggrPartOperKey_Type = Integer32
_LacpInfoAggrPartOperKey_Object = MibTableColumn
lacpInfoAggrPartOperKey = _LacpInfoAggrPartOperKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 1, 1, 11),
    _LacpInfoAggrPartOperKey_Type()
)
lacpInfoAggrPartOperKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoAggrPartOperKey.setStatus("current")


class _LacpInfoAggrReadyState_Type(Integer32):
    """Custom type lacpInfoAggrReadyState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoAggrReadyState_Type.__name__ = "Integer32"
_LacpInfoAggrReadyState_Object = MibTableColumn
lacpInfoAggrReadyState = _LacpInfoAggrReadyState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 1, 1, 12),
    _LacpInfoAggrReadyState_Type()
)
lacpInfoAggrReadyState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoAggrReadyState.setStatus("current")
_LacpInfoAggrNumPorts_Type = Integer32
_LacpInfoAggrNumPorts_Object = MibTableColumn
lacpInfoAggrNumPorts = _LacpInfoAggrNumPorts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 1, 1, 13),
    _LacpInfoAggrNumPorts_Type()
)
lacpInfoAggrNumPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoAggrNumPorts.setStatus("current")
_LacpInfoAggrMinLinks_Type = Integer32
_LacpInfoAggrMinLinks_Object = MibTableColumn
lacpInfoAggrMinLinks = _LacpInfoAggrMinLinks_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 1, 1, 15),
    _LacpInfoAggrMinLinks_Type()
)
lacpInfoAggrMinLinks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoAggrMinLinks.setStatus("current")
_LacpInfoPort_ObjectIdentity = ObjectIdentity
lacpInfoPort = _LacpInfoPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2)
)
_LacpInfoPortGeneralTable_Object = MibTable
lacpInfoPortGeneralTable = _LacpInfoPortGeneralTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 1)
)
if mibBuilder.loadTexts:
    lacpInfoPortGeneralTable.setStatus("current")
_LacpInfoPortGeneralTableEntry_Object = MibTableRow
lacpInfoPortGeneralTableEntry = _LacpInfoPortGeneralTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 1, 1)
)
lacpInfoPortGeneralTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "lacpInfoPortGeneralIndex"),
)
if mibBuilder.loadTexts:
    lacpInfoPortGeneralTableEntry.setStatus("current")
_LacpInfoPortGeneralIndex_Type = PortNumber
_LacpInfoPortGeneralIndex_Object = MibTableColumn
lacpInfoPortGeneralIndex = _LacpInfoPortGeneralIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 1, 1, 1),
    _LacpInfoPortGeneralIndex_Type()
)
lacpInfoPortGeneralIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortGeneralIndex.setStatus("current")


class _LacpInfoPortLacpEna_Type(Integer32):
    """Custom type lacpInfoPortLacpEna based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortLacpEna_Type.__name__ = "Integer32"
_LacpInfoPortLacpEna_Object = MibTableColumn
lacpInfoPortLacpEna = _LacpInfoPortLacpEna_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 1, 1, 2),
    _LacpInfoPortLacpEna_Type()
)
lacpInfoPortLacpEna.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortLacpEna.setStatus("current")


class _LacpInfoPortAdminEna_Type(Integer32):
    """Custom type lacpInfoPortAdminEna based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortAdminEna_Type.__name__ = "Integer32"
_LacpInfoPortAdminEna_Object = MibTableColumn
lacpInfoPortAdminEna = _LacpInfoPortAdminEna_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 1, 1, 3),
    _LacpInfoPortAdminEna_Type()
)
lacpInfoPortAdminEna.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortAdminEna.setStatus("current")
_LacpInfoPortActSysId_Type = DisplayString
_LacpInfoPortActSysId_Object = MibTableColumn
lacpInfoPortActSysId = _LacpInfoPortActSysId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 1, 1, 4),
    _LacpInfoPortActSysId_Type()
)
lacpInfoPortActSysId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActSysId.setStatus("current")
_LacpInfoPortActSysPrio_Type = Integer32
_LacpInfoPortActSysPrio_Object = MibTableColumn
lacpInfoPortActSysPrio = _LacpInfoPortActSysPrio_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 1, 1, 5),
    _LacpInfoPortActSysPrio_Type()
)
lacpInfoPortActSysPrio.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActSysPrio.setStatus("current")
_LacpInfoPortActAdminKey_Type = Integer32
_LacpInfoPortActAdminKey_Object = MibTableColumn
lacpInfoPortActAdminKey = _LacpInfoPortActAdminKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 1, 1, 6),
    _LacpInfoPortActAdminKey_Type()
)
lacpInfoPortActAdminKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActAdminKey.setStatus("current")
_LacpInfoPortActOperKey_Type = Integer32
_LacpInfoPortActOperKey_Object = MibTableColumn
lacpInfoPortActOperKey = _LacpInfoPortActOperKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 1, 1, 7),
    _LacpInfoPortActOperKey_Type()
)
lacpInfoPortActOperKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActOperKey.setStatus("current")
_LacpInfoPortActPortNum_Type = Integer32
_LacpInfoPortActPortNum_Object = MibTableColumn
lacpInfoPortActPortNum = _LacpInfoPortActPortNum_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 1, 1, 8),
    _LacpInfoPortActPortNum_Type()
)
lacpInfoPortActPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActPortNum.setStatus("current")
_LacpInfoPortActPortPrio_Type = Integer32
_LacpInfoPortActPortPrio_Object = MibTableColumn
lacpInfoPortActPortPrio = _LacpInfoPortActPortPrio_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 1, 1, 9),
    _LacpInfoPortActPortPrio_Type()
)
lacpInfoPortActPortPrio.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActPortPrio.setStatus("current")


class _LacpInfoPortIndivState_Type(Integer32):
    """Custom type lacpInfoPortIndivState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortIndivState_Type.__name__ = "Integer32"
_LacpInfoPortIndivState_Object = MibTableColumn
lacpInfoPortIndivState = _LacpInfoPortIndivState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 1, 1, 10),
    _LacpInfoPortIndivState_Type()
)
lacpInfoPortIndivState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortIndivState.setStatus("current")
_LacpInfoSelAggrId_Type = Integer32
_LacpInfoSelAggrId_Object = MibTableColumn
lacpInfoSelAggrId = _LacpInfoSelAggrId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 1, 1, 11),
    _LacpInfoSelAggrId_Type()
)
lacpInfoSelAggrId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoSelAggrId.setStatus("current")
_LacpInfoAttAggrId_Type = Integer32
_LacpInfoAttAggrId_Object = MibTableColumn
lacpInfoAttAggrId = _LacpInfoAttAggrId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 1, 1, 12),
    _LacpInfoAttAggrId_Type()
)
lacpInfoAttAggrId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoAttAggrId.setStatus("current")


class _LacpInfoPortReadyN_Type(Integer32):
    """Custom type lacpInfoPortReadyN based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortReadyN_Type.__name__ = "Integer32"
_LacpInfoPortReadyN_Object = MibTableColumn
lacpInfoPortReadyN = _LacpInfoPortReadyN_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 1, 1, 13),
    _LacpInfoPortReadyN_Type()
)
lacpInfoPortReadyN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortReadyN.setStatus("current")


class _LacpInfoPortNtt_Type(Integer32):
    """Custom type lacpInfoPortNtt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortNtt_Type.__name__ = "Integer32"
_LacpInfoPortNtt_Object = MibTableColumn
lacpInfoPortNtt = _LacpInfoPortNtt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 1, 1, 14),
    _LacpInfoPortNtt_Type()
)
lacpInfoPortNtt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortNtt.setStatus("current")


class _LacpInfoPortSelected_Type(Integer32):
    """Custom type lacpInfoPortSelected based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("selected", 1),
          ("unselected", 2),
          ("standby", 3),
          ("suspended", 4),
          ("individual", 5))
    )


_LacpInfoPortSelected_Type.__name__ = "Integer32"
_LacpInfoPortSelected_Object = MibTableColumn
lacpInfoPortSelected = _LacpInfoPortSelected_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 1, 1, 15),
    _LacpInfoPortSelected_Type()
)
lacpInfoPortSelected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortSelected.setStatus("current")


class _LacpInfoPortMoved_Type(Integer32):
    """Custom type lacpInfoPortMoved based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortMoved_Type.__name__ = "Integer32"
_LacpInfoPortMoved_Object = MibTableColumn
lacpInfoPortMoved = _LacpInfoPortMoved_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 1, 1, 16),
    _LacpInfoPortMoved_Type()
)
lacpInfoPortMoved.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortMoved.setStatus("current")


class _LacpInfoCollDetState_Type(Integer32):
    """Custom type lacpInfoCollDetState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_LacpInfoCollDetState_Type.__name__ = "Integer32"
_LacpInfoCollDetState_Object = MibTableColumn
lacpInfoCollDetState = _LacpInfoCollDetState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 1, 1, 17),
    _LacpInfoCollDetState_Type()
)
lacpInfoCollDetState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoCollDetState.setStatus("current")
_LacpInfoPortRxState_Type = DisplayString
_LacpInfoPortRxState_Object = MibTableColumn
lacpInfoPortRxState = _LacpInfoPortRxState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 1, 1, 18),
    _LacpInfoPortRxState_Type()
)
lacpInfoPortRxState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortRxState.setStatus("current")
_LacpInfoPortMuxState_Type = DisplayString
_LacpInfoPortMuxState_Object = MibTableColumn
lacpInfoPortMuxState = _LacpInfoPortMuxState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 1, 1, 19),
    _LacpInfoPortMuxState_Type()
)
lacpInfoPortMuxState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortMuxState.setStatus("current")
_LacpInfoPortPerState_Type = DisplayString
_LacpInfoPortPerState_Object = MibTableColumn
lacpInfoPortPerState = _LacpInfoPortPerState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 1, 1, 20),
    _LacpInfoPortPerState_Type()
)
lacpInfoPortPerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortPerState.setStatus("current")
_LacpInfoPortPerTraTimer_Type = Integer32
_LacpInfoPortPerTraTimer_Object = MibTableColumn
lacpInfoPortPerTraTimer = _LacpInfoPortPerTraTimer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 1, 1, 21),
    _LacpInfoPortPerTraTimer_Type()
)
lacpInfoPortPerTraTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortPerTraTimer.setStatus("current")
_LacpInfoPortCurWhileTimer_Type = Integer32
_LacpInfoPortCurWhileTimer_Object = MibTableColumn
lacpInfoPortCurWhileTimer = _LacpInfoPortCurWhileTimer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 1, 1, 22),
    _LacpInfoPortCurWhileTimer_Type()
)
lacpInfoPortCurWhileTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortCurWhileTimer.setStatus("current")


class _LacpInfoPortOperState_Type(Integer32):
    """Custom type lacpInfoPortOperState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("up", 2),
          ("down", 3))
    )


_LacpInfoPortOperState_Type.__name__ = "Integer32"
_LacpInfoPortOperState_Object = MibTableColumn
lacpInfoPortOperState = _LacpInfoPortOperState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 1, 1, 23),
    _LacpInfoPortOperState_Type()
)
lacpInfoPortOperState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortOperState.setStatus("current")
_LacpInfoPortAdminTable_Object = MibTable
lacpInfoPortAdminTable = _LacpInfoPortAdminTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 2)
)
if mibBuilder.loadTexts:
    lacpInfoPortAdminTable.setStatus("current")
_LacpInfoPortAdminTableEntry_Object = MibTableRow
lacpInfoPortAdminTableEntry = _LacpInfoPortAdminTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 2, 1)
)
lacpInfoPortAdminTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "lacpInfoPortAdminIndex"),
)
if mibBuilder.loadTexts:
    lacpInfoPortAdminTableEntry.setStatus("current")
_LacpInfoPortAdminIndex_Type = PortNumber
_LacpInfoPortAdminIndex_Object = MibTableColumn
lacpInfoPortAdminIndex = _LacpInfoPortAdminIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 2, 1, 1),
    _LacpInfoPortAdminIndex_Type()
)
lacpInfoPortAdminIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortAdminIndex.setStatus("current")
_LacpInfoPortActAdPortState_Type = DisplayString
_LacpInfoPortActAdPortState_Object = MibTableColumn
lacpInfoPortActAdPortState = _LacpInfoPortActAdPortState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 2, 1, 7),
    _LacpInfoPortActAdPortState_Type()
)
lacpInfoPortActAdPortState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActAdPortState.setStatus("current")


class _LacpInfoPortActAdActiv_Type(Integer32):
    """Custom type lacpInfoPortActAdActiv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("passive", 2))
    )


_LacpInfoPortActAdActiv_Type.__name__ = "Integer32"
_LacpInfoPortActAdActiv_Object = MibTableColumn
lacpInfoPortActAdActiv = _LacpInfoPortActAdActiv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 2, 1, 8),
    _LacpInfoPortActAdActiv_Type()
)
lacpInfoPortActAdActiv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActAdActiv.setStatus("current")


class _LacpInfoPortActAdSync_Type(Integer32):
    """Custom type lacpInfoPortActAdSync based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortActAdSync_Type.__name__ = "Integer32"
_LacpInfoPortActAdSync_Object = MibTableColumn
lacpInfoPortActAdSync = _LacpInfoPortActAdSync_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 2, 1, 9),
    _LacpInfoPortActAdSync_Type()
)
lacpInfoPortActAdSync.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActAdSync.setStatus("current")


class _LacpInfoPortActAdDef_Type(Integer32):
    """Custom type lacpInfoPortActAdDef based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortActAdDef_Type.__name__ = "Integer32"
_LacpInfoPortActAdDef_Object = MibTableColumn
lacpInfoPortActAdDef = _LacpInfoPortActAdDef_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 2, 1, 10),
    _LacpInfoPortActAdDef_Type()
)
lacpInfoPortActAdDef.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActAdDef.setStatus("current")


class _LacpInfoPortActAdTimeout_Type(Integer32):
    """Custom type lacpInfoPortActAdTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("short", 1),
          ("long", 2))
    )


_LacpInfoPortActAdTimeout_Type.__name__ = "Integer32"
_LacpInfoPortActAdTimeout_Object = MibTableColumn
lacpInfoPortActAdTimeout = _LacpInfoPortActAdTimeout_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 2, 1, 11),
    _LacpInfoPortActAdTimeout_Type()
)
lacpInfoPortActAdTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActAdTimeout.setStatus("current")


class _LacpInfoPortActAdColl_Type(Integer32):
    """Custom type lacpInfoPortActAdColl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortActAdColl_Type.__name__ = "Integer32"
_LacpInfoPortActAdColl_Object = MibTableColumn
lacpInfoPortActAdColl = _LacpInfoPortActAdColl_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 2, 1, 12),
    _LacpInfoPortActAdColl_Type()
)
lacpInfoPortActAdColl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActAdColl.setStatus("current")


class _LacpInfoPortActAdExp_Type(Integer32):
    """Custom type lacpInfoPortActAdExp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortActAdExp_Type.__name__ = "Integer32"
_LacpInfoPortActAdExp_Object = MibTableColumn
lacpInfoPortActAdExp = _LacpInfoPortActAdExp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 2, 1, 13),
    _LacpInfoPortActAdExp_Type()
)
lacpInfoPortActAdExp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActAdExp.setStatus("current")


class _LacpInfoPortActAdAggr_Type(Integer32):
    """Custom type lacpInfoPortActAdAggr based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortActAdAggr_Type.__name__ = "Integer32"
_LacpInfoPortActAdAggr_Object = MibTableColumn
lacpInfoPortActAdAggr = _LacpInfoPortActAdAggr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 2, 1, 14),
    _LacpInfoPortActAdAggr_Type()
)
lacpInfoPortActAdAggr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActAdAggr.setStatus("current")


class _LacpInfoPortActAdDist_Type(Integer32):
    """Custom type lacpInfoPortActAdDist based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortActAdDist_Type.__name__ = "Integer32"
_LacpInfoPortActAdDist_Object = MibTableColumn
lacpInfoPortActAdDist = _LacpInfoPortActAdDist_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 2, 1, 15),
    _LacpInfoPortActAdDist_Type()
)
lacpInfoPortActAdDist.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActAdDist.setStatus("current")
_LacpInfoPortOperTable_Object = MibTable
lacpInfoPortOperTable = _LacpInfoPortOperTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 3)
)
if mibBuilder.loadTexts:
    lacpInfoPortOperTable.setStatus("current")
_LacpInfoPortOperTableEntry_Object = MibTableRow
lacpInfoPortOperTableEntry = _LacpInfoPortOperTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 3, 1)
)
lacpInfoPortOperTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "lacpInfoPortOperIndex"),
)
if mibBuilder.loadTexts:
    lacpInfoPortOperTableEntry.setStatus("current")
_LacpInfoPortOperIndex_Type = PortNumber
_LacpInfoPortOperIndex_Object = MibTableColumn
lacpInfoPortOperIndex = _LacpInfoPortOperIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 3, 1, 1),
    _LacpInfoPortOperIndex_Type()
)
lacpInfoPortOperIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortOperIndex.setStatus("current")
_LacpInfoPortPartOpSysPrio_Type = Integer32
_LacpInfoPortPartOpSysPrio_Object = MibTableColumn
lacpInfoPortPartOpSysPrio = _LacpInfoPortPartOpSysPrio_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 3, 1, 2),
    _LacpInfoPortPartOpSysPrio_Type()
)
lacpInfoPortPartOpSysPrio.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortPartOpSysPrio.setStatus("current")
_LacpInfoPortPartOpSysId_Type = DisplayString
_LacpInfoPortPartOpSysId_Object = MibTableColumn
lacpInfoPortPartOpSysId = _LacpInfoPortPartOpSysId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 3, 1, 3),
    _LacpInfoPortPartOpSysId_Type()
)
lacpInfoPortPartOpSysId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortPartOpSysId.setStatus("current")
_LacpInfoPortPartOpKey_Type = Integer32
_LacpInfoPortPartOpKey_Object = MibTableColumn
lacpInfoPortPartOpKey = _LacpInfoPortPartOpKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 3, 1, 4),
    _LacpInfoPortPartOpKey_Type()
)
lacpInfoPortPartOpKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortPartOpKey.setStatus("current")
_LacpInfoPortPartOpPortNum_Type = Integer32
_LacpInfoPortPartOpPortNum_Object = MibTableColumn
lacpInfoPortPartOpPortNum = _LacpInfoPortPartOpPortNum_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 3, 1, 5),
    _LacpInfoPortPartOpPortNum_Type()
)
lacpInfoPortPartOpPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortPartOpPortNum.setStatus("current")
_LacpInfoPortPartOpPortPrio_Type = Integer32
_LacpInfoPortPartOpPortPrio_Object = MibTableColumn
lacpInfoPortPartOpPortPrio = _LacpInfoPortPartOpPortPrio_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 3, 1, 6),
    _LacpInfoPortPartOpPortPrio_Type()
)
lacpInfoPortPartOpPortPrio.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortPartOpPortPrio.setStatus("current")
_LacpInfoPortActOpPortState_Type = DisplayString
_LacpInfoPortActOpPortState_Object = MibTableColumn
lacpInfoPortActOpPortState = _LacpInfoPortActOpPortState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 3, 1, 7),
    _LacpInfoPortActOpPortState_Type()
)
lacpInfoPortActOpPortState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActOpPortState.setStatus("current")


class _LacpInfoPortActOpActiv_Type(Integer32):
    """Custom type lacpInfoPortActOpActiv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("passive", 2))
    )


_LacpInfoPortActOpActiv_Type.__name__ = "Integer32"
_LacpInfoPortActOpActiv_Object = MibTableColumn
lacpInfoPortActOpActiv = _LacpInfoPortActOpActiv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 3, 1, 8),
    _LacpInfoPortActOpActiv_Type()
)
lacpInfoPortActOpActiv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActOpActiv.setStatus("current")


class _LacpInfoPortActOpSync_Type(Integer32):
    """Custom type lacpInfoPortActOpSync based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortActOpSync_Type.__name__ = "Integer32"
_LacpInfoPortActOpSync_Object = MibTableColumn
lacpInfoPortActOpSync = _LacpInfoPortActOpSync_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 3, 1, 9),
    _LacpInfoPortActOpSync_Type()
)
lacpInfoPortActOpSync.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActOpSync.setStatus("current")


class _LacpInfoPortActOpDef_Type(Integer32):
    """Custom type lacpInfoPortActOpDef based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortActOpDef_Type.__name__ = "Integer32"
_LacpInfoPortActOpDef_Object = MibTableColumn
lacpInfoPortActOpDef = _LacpInfoPortActOpDef_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 3, 1, 10),
    _LacpInfoPortActOpDef_Type()
)
lacpInfoPortActOpDef.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActOpDef.setStatus("current")


class _LacpInfoPortActOpTimeout_Type(Integer32):
    """Custom type lacpInfoPortActOpTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("short", 1),
          ("long", 2))
    )


_LacpInfoPortActOpTimeout_Type.__name__ = "Integer32"
_LacpInfoPortActOpTimeout_Object = MibTableColumn
lacpInfoPortActOpTimeout = _LacpInfoPortActOpTimeout_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 3, 1, 11),
    _LacpInfoPortActOpTimeout_Type()
)
lacpInfoPortActOpTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActOpTimeout.setStatus("current")


class _LacpInfoPortActOpColl_Type(Integer32):
    """Custom type lacpInfoPortActOpColl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortActOpColl_Type.__name__ = "Integer32"
_LacpInfoPortActOpColl_Object = MibTableColumn
lacpInfoPortActOpColl = _LacpInfoPortActOpColl_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 3, 1, 12),
    _LacpInfoPortActOpColl_Type()
)
lacpInfoPortActOpColl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActOpColl.setStatus("current")


class _LacpInfoPortActOpExp_Type(Integer32):
    """Custom type lacpInfoPortActOpExp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortActOpExp_Type.__name__ = "Integer32"
_LacpInfoPortActOpExp_Object = MibTableColumn
lacpInfoPortActOpExp = _LacpInfoPortActOpExp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 3, 1, 13),
    _LacpInfoPortActOpExp_Type()
)
lacpInfoPortActOpExp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActOpExp.setStatus("current")


class _LacpInfoPortActOpAggr_Type(Integer32):
    """Custom type lacpInfoPortActOpAggr based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortActOpAggr_Type.__name__ = "Integer32"
_LacpInfoPortActOpAggr_Object = MibTableColumn
lacpInfoPortActOpAggr = _LacpInfoPortActOpAggr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 3, 1, 14),
    _LacpInfoPortActOpAggr_Type()
)
lacpInfoPortActOpAggr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActOpAggr.setStatus("current")


class _LacpInfoPortActOpDist_Type(Integer32):
    """Custom type lacpInfoPortActOpDist based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortActOpDist_Type.__name__ = "Integer32"
_LacpInfoPortActOpDist_Object = MibTableColumn
lacpInfoPortActOpDist = _LacpInfoPortActOpDist_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 3, 1, 15),
    _LacpInfoPortActOpDist_Type()
)
lacpInfoPortActOpDist.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActOpDist.setStatus("current")
_LacpInfoPortPartOpPortState_Type = DisplayString
_LacpInfoPortPartOpPortState_Object = MibTableColumn
lacpInfoPortPartOpPortState = _LacpInfoPortPartOpPortState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 3, 1, 16),
    _LacpInfoPortPartOpPortState_Type()
)
lacpInfoPortPartOpPortState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortPartOpPortState.setStatus("current")


class _LacpInfoPortPartOpActiv_Type(Integer32):
    """Custom type lacpInfoPortPartOpActiv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("passive", 2))
    )


_LacpInfoPortPartOpActiv_Type.__name__ = "Integer32"
_LacpInfoPortPartOpActiv_Object = MibTableColumn
lacpInfoPortPartOpActiv = _LacpInfoPortPartOpActiv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 3, 1, 17),
    _LacpInfoPortPartOpActiv_Type()
)
lacpInfoPortPartOpActiv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortPartOpActiv.setStatus("current")


class _LacpInfoPortPartOpSync_Type(Integer32):
    """Custom type lacpInfoPortPartOpSync based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortPartOpSync_Type.__name__ = "Integer32"
_LacpInfoPortPartOpSync_Object = MibTableColumn
lacpInfoPortPartOpSync = _LacpInfoPortPartOpSync_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 3, 1, 18),
    _LacpInfoPortPartOpSync_Type()
)
lacpInfoPortPartOpSync.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortPartOpSync.setStatus("current")


class _LacpInfoPortPartOpDef_Type(Integer32):
    """Custom type lacpInfoPortPartOpDef based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortPartOpDef_Type.__name__ = "Integer32"
_LacpInfoPortPartOpDef_Object = MibTableColumn
lacpInfoPortPartOpDef = _LacpInfoPortPartOpDef_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 3, 1, 19),
    _LacpInfoPortPartOpDef_Type()
)
lacpInfoPortPartOpDef.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortPartOpDef.setStatus("current")


class _LacpInfoPortPartOpTimeout_Type(Integer32):
    """Custom type lacpInfoPortPartOpTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("short", 1),
          ("long", 2))
    )


_LacpInfoPortPartOpTimeout_Type.__name__ = "Integer32"
_LacpInfoPortPartOpTimeout_Object = MibTableColumn
lacpInfoPortPartOpTimeout = _LacpInfoPortPartOpTimeout_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 3, 1, 20),
    _LacpInfoPortPartOpTimeout_Type()
)
lacpInfoPortPartOpTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortPartOpTimeout.setStatus("current")


class _LacpInfoPortPartOpColl_Type(Integer32):
    """Custom type lacpInfoPortPartOpColl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortPartOpColl_Type.__name__ = "Integer32"
_LacpInfoPortPartOpColl_Object = MibTableColumn
lacpInfoPortPartOpColl = _LacpInfoPortPartOpColl_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 3, 1, 21),
    _LacpInfoPortPartOpColl_Type()
)
lacpInfoPortPartOpColl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortPartOpColl.setStatus("current")


class _LacpInfoPortPartOpExp_Type(Integer32):
    """Custom type lacpInfoPortPartOpExp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortPartOpExp_Type.__name__ = "Integer32"
_LacpInfoPortPartOpExp_Object = MibTableColumn
lacpInfoPortPartOpExp = _LacpInfoPortPartOpExp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 3, 1, 22),
    _LacpInfoPortPartOpExp_Type()
)
lacpInfoPortPartOpExp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortPartOpExp.setStatus("current")


class _LacpInfoPortPartOpAggr_Type(Integer32):
    """Custom type lacpInfoPortPartOpAggr based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortPartOpAggr_Type.__name__ = "Integer32"
_LacpInfoPortPartOpAggr_Object = MibTableColumn
lacpInfoPortPartOpAggr = _LacpInfoPortPartOpAggr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 3, 1, 23),
    _LacpInfoPortPartOpAggr_Type()
)
lacpInfoPortPartOpAggr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortPartOpAggr.setStatus("current")


class _LacpInfoPortPartOpDist_Type(Integer32):
    """Custom type lacpInfoPortPartOpDist based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortPartOpDist_Type.__name__ = "Integer32"
_LacpInfoPortPartOpDist_Object = MibTableColumn
lacpInfoPortPartOpDist = _LacpInfoPortPartOpDist_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 3, 2, 3, 1, 24),
    _LacpInfoPortPartOpDist_Type()
)
lacpInfoPortPartOpDist.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortPartOpDist.setStatus("current")
_CistInfo_ObjectIdentity = ObjectIdentity
cistInfo = _CistInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 4)
)
_CistGeneralInfo_ObjectIdentity = ObjectIdentity
cistGeneralInfo = _CistGeneralInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 4, 1)
)
_CistRoot_Type = BridgeId
_CistRoot_Object = MibScalar
cistRoot = _CistRoot_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 4, 1, 1),
    _CistRoot_Type()
)
cistRoot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cistRoot.setStatus("current")
_CistRootPathCost_Type = Integer32
_CistRootPathCost_Object = MibScalar
cistRootPathCost = _CistRootPathCost_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 4, 1, 2),
    _CistRootPathCost_Type()
)
cistRootPathCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cistRootPathCost.setStatus("current")
_CistRootPort_Type = PortNumber
_CistRootPort_Object = MibScalar
cistRootPort = _CistRootPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 4, 1, 3),
    _CistRootPort_Type()
)
cistRootPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cistRootPort.setStatus("current")
_CistBridgeHelloTime_Type = Integer32
_CistBridgeHelloTime_Object = MibScalar
cistBridgeHelloTime = _CistBridgeHelloTime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 4, 1, 4),
    _CistBridgeHelloTime_Type()
)
cistBridgeHelloTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cistBridgeHelloTime.setStatus("current")
_CistBridgeMaxAge_Type = Integer32
_CistBridgeMaxAge_Object = MibScalar
cistBridgeMaxAge = _CistBridgeMaxAge_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 4, 1, 5),
    _CistBridgeMaxAge_Type()
)
cistBridgeMaxAge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cistBridgeMaxAge.setStatus("current")
_CistBridgeForwardDelay_Type = Integer32
_CistBridgeForwardDelay_Object = MibScalar
cistBridgeForwardDelay = _CistBridgeForwardDelay_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 4, 1, 6),
    _CistBridgeForwardDelay_Type()
)
cistBridgeForwardDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cistBridgeForwardDelay.setStatus("current")
_CistRegionalRoot_Type = BridgeId
_CistRegionalRoot_Object = MibScalar
cistRegionalRoot = _CistRegionalRoot_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 4, 1, 7),
    _CistRegionalRoot_Type()
)
cistRegionalRoot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cistRegionalRoot.setStatus("current")
_CistRegionalPathCost_Type = Integer32
_CistRegionalPathCost_Object = MibScalar
cistRegionalPathCost = _CistRegionalPathCost_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 4, 1, 8),
    _CistRegionalPathCost_Type()
)
cistRegionalPathCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cistRegionalPathCost.setStatus("current")


class _MstpDigest_Type(DisplayString):
    """Custom type mstpDigest based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 63),
    )


_MstpDigest_Type.__name__ = "DisplayString"
_MstpDigest_Object = MibScalar
mstpDigest = _MstpDigest_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 4, 1, 9),
    _MstpDigest_Type()
)
mstpDigest.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpDigest.setStatus("current")
_CistInfoPortTable_Object = MibTable
cistInfoPortTable = _CistInfoPortTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 4, 2)
)
if mibBuilder.loadTexts:
    cistInfoPortTable.setStatus("current")
_CistInfoPortTableEntry_Object = MibTableRow
cistInfoPortTableEntry = _CistInfoPortTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 4, 2, 1)
)
cistInfoPortTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "cistInfoPortIndex"),
)
if mibBuilder.loadTexts:
    cistInfoPortTableEntry.setStatus("current")
_CistInfoPortIndex_Type = PortNumber
_CistInfoPortIndex_Object = MibTableColumn
cistInfoPortIndex = _CistInfoPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 4, 2, 1, 1),
    _CistInfoPortIndex_Type()
)
cistInfoPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cistInfoPortIndex.setStatus("current")
_CistInfoPortPriority_Type = Integer32
_CistInfoPortPriority_Object = MibTableColumn
cistInfoPortPriority = _CistInfoPortPriority_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 4, 2, 1, 2),
    _CistInfoPortPriority_Type()
)
cistInfoPortPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cistInfoPortPriority.setStatus("current")
_CistInfoPortPathCost_Type = Integer32
_CistInfoPortPathCost_Object = MibTableColumn
cistInfoPortPathCost = _CistInfoPortPathCost_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 4, 2, 1, 3),
    _CistInfoPortPathCost_Type()
)
cistInfoPortPathCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cistInfoPortPathCost.setStatus("current")


class _CistInfoPortState_Type(Integer32):
    """Custom type cistInfoPortState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("discarding", 2),
          ("learning", 4),
          ("forwarding", 5))
    )


_CistInfoPortState_Type.__name__ = "Integer32"
_CistInfoPortState_Object = MibTableColumn
cistInfoPortState = _CistInfoPortState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 4, 2, 1, 4),
    _CistInfoPortState_Type()
)
cistInfoPortState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cistInfoPortState.setStatus("current")


class _CistInfoPortRole_Type(Integer32):
    """Custom type cistInfoPortRole based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("alternate", 2),
          ("backup", 3),
          ("root", 4),
          ("designated", 5),
          ("master", 6),
          ("unknown", 7))
    )


_CistInfoPortRole_Type.__name__ = "Integer32"
_CistInfoPortRole_Object = MibTableColumn
cistInfoPortRole = _CistInfoPortRole_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 4, 2, 1, 5),
    _CistInfoPortRole_Type()
)
cistInfoPortRole.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cistInfoPortRole.setStatus("current")
_CistInfoPortDesignatedBridge_Type = BridgeId
_CistInfoPortDesignatedBridge_Object = MibTableColumn
cistInfoPortDesignatedBridge = _CistInfoPortDesignatedBridge_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 4, 2, 1, 6),
    _CistInfoPortDesignatedBridge_Type()
)
cistInfoPortDesignatedBridge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cistInfoPortDesignatedBridge.setStatus("current")


class _CistInfoPortDesignatedPort_Type(OctetString):
    """Custom type cistInfoPortDesignatedPort based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )
    fixed_length = 2


_CistInfoPortDesignatedPort_Type.__name__ = "OctetString"
_CistInfoPortDesignatedPort_Object = MibTableColumn
cistInfoPortDesignatedPort = _CistInfoPortDesignatedPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 4, 2, 1, 7),
    _CistInfoPortDesignatedPort_Type()
)
cistInfoPortDesignatedPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cistInfoPortDesignatedPort.setStatus("current")


class _CistInfoPortLinkType_Type(Integer32):
    """Custom type cistInfoPortLinkType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("p2p", 1),
          ("shared", 2),
          ("unknown", 3))
    )


_CistInfoPortLinkType_Type.__name__ = "Integer32"
_CistInfoPortLinkType_Object = MibTableColumn
cistInfoPortLinkType = _CistInfoPortLinkType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 4, 2, 1, 8),
    _CistInfoPortLinkType_Type()
)
cistInfoPortLinkType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cistInfoPortLinkType.setStatus("current")
_CistInfoPortHelloTime_Type = Integer32
_CistInfoPortHelloTime_Object = MibTableColumn
cistInfoPortHelloTime = _CistInfoPortHelloTime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 4, 2, 1, 9),
    _CistInfoPortHelloTime_Type()
)
cistInfoPortHelloTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cistInfoPortHelloTime.setStatus("current")


class _CistInfoPortEdge_Type(Integer32):
    """Custom type cistInfoPortEdge based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_CistInfoPortEdge_Type.__name__ = "Integer32"
_CistInfoPortEdge_Object = MibTableColumn
cistInfoPortEdge = _CistInfoPortEdge_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 4, 2, 1, 10),
    _CistInfoPortEdge_Type()
)
cistInfoPortEdge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cistInfoPortEdge.setStatus("current")
_VlanInfo_ObjectIdentity = ObjectIdentity
vlanInfo = _VlanInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 5)
)
_VlanInfoTable_Object = MibTable
vlanInfoTable = _VlanInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 5, 1)
)
if mibBuilder.loadTexts:
    vlanInfoTable.setStatus("current")
_VlanInfoTableEntry_Object = MibTableRow
vlanInfoTableEntry = _VlanInfoTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 5, 1, 1)
)
vlanInfoTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vlanInfoId"),
)
if mibBuilder.loadTexts:
    vlanInfoTableEntry.setStatus("current")


class _VlanInfoId_Type(Integer32):
    """Custom type vlanInfoId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4090),
    )


_VlanInfoId_Type.__name__ = "Integer32"
_VlanInfoId_Object = MibTableColumn
vlanInfoId = _VlanInfoId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 5, 1, 1, 1),
    _VlanInfoId_Type()
)
vlanInfoId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanInfoId.setStatus("current")


class _VlanInfoName_Type(DisplayString):
    """Custom type vlanInfoName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_VlanInfoName_Type.__name__ = "DisplayString"
_VlanInfoName_Object = MibTableColumn
vlanInfoName = _VlanInfoName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 5, 1, 1, 2),
    _VlanInfoName_Type()
)
vlanInfoName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanInfoName.setStatus("current")


class _VlanInfoStatus_Type(Integer32):
    """Custom type vlanInfoStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_VlanInfoStatus_Type.__name__ = "Integer32"
_VlanInfoStatus_Object = MibTableColumn
vlanInfoStatus = _VlanInfoStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 5, 1, 1, 3),
    _VlanInfoStatus_Type()
)
vlanInfoStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanInfoStatus.setStatus("current")
_VlanInfoPorts_Type = OctetString
_VlanInfoPorts_Object = MibTableColumn
vlanInfoPorts = _VlanInfoPorts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 5, 1, 1, 7),
    _VlanInfoPorts_Type()
)
vlanInfoPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanInfoPorts.setStatus("current")
_Dot1xInfo_ObjectIdentity = ObjectIdentity
dot1xInfo = _Dot1xInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 6)
)
_Dot1xInfoPortTable_Object = MibTable
dot1xInfoPortTable = _Dot1xInfoPortTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 6, 1)
)
if mibBuilder.loadTexts:
    dot1xInfoPortTable.setStatus("current")
_Dot1xInfoPortEntry_Object = MibTableRow
dot1xInfoPortEntry = _Dot1xInfoPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 6, 1, 1)
)
dot1xInfoPortEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "dot1xInfoPortIndex"),
)
if mibBuilder.loadTexts:
    dot1xInfoPortEntry.setStatus("current")
_Dot1xInfoPortIndex_Type = PortNumber
_Dot1xInfoPortIndex_Object = MibTableColumn
dot1xInfoPortIndex = _Dot1xInfoPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 6, 1, 1, 1),
    _Dot1xInfoPortIndex_Type()
)
dot1xInfoPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xInfoPortIndex.setStatus("current")


class _Dot1xInfoPortAuthMode_Type(Integer32):
    """Custom type dot1xInfoPortAuthMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("forceUnauth", 0),
          ("auto", 1),
          ("forceAuth", 2))
    )


_Dot1xInfoPortAuthMode_Type.__name__ = "Integer32"
_Dot1xInfoPortAuthMode_Object = MibTableColumn
dot1xInfoPortAuthMode = _Dot1xInfoPortAuthMode_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 6, 1, 1, 2),
    _Dot1xInfoPortAuthMode_Type()
)
dot1xInfoPortAuthMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xInfoPortAuthMode.setStatus("current")


class _Dot1xInfoPortAuthStatus_Type(Integer32):
    """Custom type dot1xInfoPortAuthStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("authorized", 0),
          ("unauthorized", 1))
    )


_Dot1xInfoPortAuthStatus_Type.__name__ = "Integer32"
_Dot1xInfoPortAuthStatus_Object = MibTableColumn
dot1xInfoPortAuthStatus = _Dot1xInfoPortAuthStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 6, 1, 1, 3),
    _Dot1xInfoPortAuthStatus_Type()
)
dot1xInfoPortAuthStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xInfoPortAuthStatus.setStatus("current")


class _Dot1xInfoPortAuthPAEState_Type(Integer32):
    """Custom type dot1xInfoPortAuthPAEState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("initialize", 0),
          ("disconnected", 1),
          ("connecting", 2),
          ("authenticating", 3),
          ("authenticated", 4),
          ("aborting", 5),
          ("held", 6),
          ("forceauth", 7),
          ("forceunauth", 8))
    )


_Dot1xInfoPortAuthPAEState_Type.__name__ = "Integer32"
_Dot1xInfoPortAuthPAEState_Object = MibTableColumn
dot1xInfoPortAuthPAEState = _Dot1xInfoPortAuthPAEState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 6, 1, 1, 5),
    _Dot1xInfoPortAuthPAEState_Type()
)
dot1xInfoPortAuthPAEState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xInfoPortAuthPAEState.setStatus("current")


class _Dot1xInfoPortBackAuthState_Type(Integer32):
    """Custom type dot1xInfoPortBackAuthState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("request", 0),
          ("response", 1),
          ("success", 2),
          ("fail", 3),
          ("timeout", 4),
          ("idle", 5),
          ("initialize", 6))
    )


_Dot1xInfoPortBackAuthState_Type.__name__ = "Integer32"
_Dot1xInfoPortBackAuthState_Object = MibTableColumn
dot1xInfoPortBackAuthState = _Dot1xInfoPortBackAuthState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 6, 1, 1, 6),
    _Dot1xInfoPortBackAuthState_Type()
)
dot1xInfoPortBackAuthState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xInfoPortBackAuthState.setStatus("current")
_Dot1xInfoPortAssignedVlan_Type = Integer32
_Dot1xInfoPortAssignedVlan_Object = MibTableColumn
dot1xInfoPortAssignedVlan = _Dot1xInfoPortAssignedVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 6, 1, 1, 7),
    _Dot1xInfoPortAssignedVlan_Type()
)
dot1xInfoPortAssignedVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xInfoPortAssignedVlan.setStatus("current")
_Dot1xSystemInfo_ObjectIdentity = ObjectIdentity
dot1xSystemInfo = _Dot1xSystemInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 6, 2)
)


class _Dot1xSystemCapability_Type(Integer32):
    """Custom type dot1xSystemCapability based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("authenticator", 0),
          ("supplicant", 1),
          ("authenticatorAndSupplicant", 2),
          ("unknown", 3))
    )


_Dot1xSystemCapability_Type.__name__ = "Integer32"
_Dot1xSystemCapability_Object = MibScalar
dot1xSystemCapability = _Dot1xSystemCapability_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 6, 2, 1),
    _Dot1xSystemCapability_Type()
)
dot1xSystemCapability.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xSystemCapability.setStatus("current")


class _Dot1xSystemStatus_Type(Integer32):
    """Custom type dot1xSystemStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 0),
          ("disabled", 1))
    )


_Dot1xSystemStatus_Type.__name__ = "Integer32"
_Dot1xSystemStatus_Object = MibScalar
dot1xSystemStatus = _Dot1xSystemStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 6, 2, 2),
    _Dot1xSystemStatus_Type()
)
dot1xSystemStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xSystemStatus.setStatus("current")
_Dot1xSystemProtoVersion_Type = Integer32
_Dot1xSystemProtoVersion_Object = MibScalar
dot1xSystemProtoVersion = _Dot1xSystemProtoVersion_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 6, 2, 3),
    _Dot1xSystemProtoVersion_Type()
)
dot1xSystemProtoVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xSystemProtoVersion.setStatus("current")
_GenInfo_ObjectIdentity = ObjectIdentity
genInfo = _GenInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 7)
)
_TrunkGroupInfo_ObjectIdentity = ObjectIdentity
trunkGroupInfo = _TrunkGroupInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 9)
)
_TrunkGroupInfoTable_Object = MibTable
trunkGroupInfoTable = _TrunkGroupInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 9, 1)
)
if mibBuilder.loadTexts:
    trunkGroupInfoTable.setStatus("current")
_TrunkGroupInfoTableEntry_Object = MibTableRow
trunkGroupInfoTableEntry = _TrunkGroupInfoTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 9, 1, 1)
)
trunkGroupInfoTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "trunkGroupInfoIndex"),
)
if mibBuilder.loadTexts:
    trunkGroupInfoTableEntry.setStatus("current")
_TrunkGroupInfoIndex_Type = Integer32
_TrunkGroupInfoIndex_Object = MibTableColumn
trunkGroupInfoIndex = _TrunkGroupInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 9, 1, 1, 1),
    _TrunkGroupInfoIndex_Type()
)
trunkGroupInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    trunkGroupInfoIndex.setStatus("current")


class _TrunkGroupInfoState_Type(Integer32):
    """Custom type trunkGroupInfoState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_TrunkGroupInfoState_Type.__name__ = "Integer32"
_TrunkGroupInfoState_Object = MibTableColumn
trunkGroupInfoState = _TrunkGroupInfoState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 9, 1, 1, 2),
    _TrunkGroupInfoState_Type()
)
trunkGroupInfoState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    trunkGroupInfoState.setStatus("current")
_TrunkGroupInfoPorts_Type = OctetString
_TrunkGroupInfoPorts_Object = MibTableColumn
trunkGroupInfoPorts = _TrunkGroupInfoPorts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 9, 1, 1, 3),
    _TrunkGroupInfoPorts_Type()
)
trunkGroupInfoPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    trunkGroupInfoPorts.setStatus("current")


class _TrunkGroupInfoProtocol_Type(Integer32):
    """Custom type trunkGroupInfoProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("static", 1),
          ("lacp", 2))
    )


_TrunkGroupInfoProtocol_Type.__name__ = "Integer32"
_TrunkGroupInfoProtocol_Object = MibTableColumn
trunkGroupInfoProtocol = _TrunkGroupInfoProtocol_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 9, 1, 1, 4),
    _TrunkGroupInfoProtocol_Type()
)
trunkGroupInfoProtocol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    trunkGroupInfoProtocol.setStatus("current")
_TrunkGroupInfoPortTable_Object = MibTable
trunkGroupInfoPortTable = _TrunkGroupInfoPortTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 9, 2)
)
if mibBuilder.loadTexts:
    trunkGroupInfoPortTable.setStatus("current")
_TrunkGroupInfoPortTableEntry_Object = MibTableRow
trunkGroupInfoPortTableEntry = _TrunkGroupInfoPortTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 9, 2, 1)
)
trunkGroupInfoPortTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "trunkGroupInfoPortTrunkId"),
    (0, "IBM-GbTOR-G8264T-MIB", "trunkGroupInfoPortPortId"),
)
if mibBuilder.loadTexts:
    trunkGroupInfoPortTableEntry.setStatus("current")
_TrunkGroupInfoPortTrunkId_Type = Integer32
_TrunkGroupInfoPortTrunkId_Object = MibTableColumn
trunkGroupInfoPortTrunkId = _TrunkGroupInfoPortTrunkId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 9, 2, 1, 1),
    _TrunkGroupInfoPortTrunkId_Type()
)
trunkGroupInfoPortTrunkId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    trunkGroupInfoPortTrunkId.setStatus("current")
_TrunkGroupInfoPortPortId_Type = PortNumber
_TrunkGroupInfoPortPortId_Object = MibTableColumn
trunkGroupInfoPortPortId = _TrunkGroupInfoPortPortId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 9, 2, 1, 2),
    _TrunkGroupInfoPortPortId_Type()
)
trunkGroupInfoPortPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    trunkGroupInfoPortPortId.setStatus("current")


class _TrunkGroupInfoPortStatus_Type(Integer32):
    """Custom type trunkGroupInfoPortStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("blocking", 1),
          ("forwarding", 2))
    )


_TrunkGroupInfoPortStatus_Type.__name__ = "Integer32"
_TrunkGroupInfoPortStatus_Object = MibTableColumn
trunkGroupInfoPortStatus = _TrunkGroupInfoPortStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 9, 2, 1, 3),
    _TrunkGroupInfoPortStatus_Type()
)
trunkGroupInfoPortStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    trunkGroupInfoPortStatus.setStatus("current")
_HotlinksInfo_ObjectIdentity = ObjectIdentity
hotlinksInfo = _HotlinksInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 10)
)


class _HotlinksInfoOnState_Type(Integer32):
    """Custom type hotlinksInfoOnState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_HotlinksInfoOnState_Type.__name__ = "Integer32"
_HotlinksInfoOnState_Object = MibScalar
hotlinksInfoOnState = _HotlinksInfoOnState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 10, 1),
    _HotlinksInfoOnState_Type()
)
hotlinksInfoOnState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotlinksInfoOnState.setStatus("current")


class _HotlinksInfoFdbUpdateState_Type(Integer32):
    """Custom type hotlinksInfoFdbUpdateState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_HotlinksInfoFdbUpdateState_Type.__name__ = "Integer32"
_HotlinksInfoFdbUpdateState_Object = MibScalar
hotlinksInfoFdbUpdateState = _HotlinksInfoFdbUpdateState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 10, 2),
    _HotlinksInfoFdbUpdateState_Type()
)
hotlinksInfoFdbUpdateState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotlinksInfoFdbUpdateState.setStatus("current")
_HotlinksInfoTriggerTable_Object = MibTable
hotlinksInfoTriggerTable = _HotlinksInfoTriggerTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 10, 3)
)
if mibBuilder.loadTexts:
    hotlinksInfoTriggerTable.setStatus("current")
_HotlinksInfoTriggerTableEntry_Object = MibTableRow
hotlinksInfoTriggerTableEntry = _HotlinksInfoTriggerTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 10, 3, 1)
)
hotlinksInfoTriggerTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "hotlinksInfoTriggerId"),
)
if mibBuilder.loadTexts:
    hotlinksInfoTriggerTableEntry.setStatus("current")
_HotlinksInfoTriggerId_Type = Integer32
_HotlinksInfoTriggerId_Object = MibTableColumn
hotlinksInfoTriggerId = _HotlinksInfoTriggerId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 10, 3, 1, 1),
    _HotlinksInfoTriggerId_Type()
)
hotlinksInfoTriggerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotlinksInfoTriggerId.setStatus("current")
_HotlinksInfoTriggerName_Type = DisplayString
_HotlinksInfoTriggerName_Object = MibTableColumn
hotlinksInfoTriggerName = _HotlinksInfoTriggerName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 10, 3, 1, 2),
    _HotlinksInfoTriggerName_Type()
)
hotlinksInfoTriggerName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotlinksInfoTriggerName.setStatus("current")


class _HotlinksInfoTriggerState_Type(Integer32):
    """Custom type hotlinksInfoTriggerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_HotlinksInfoTriggerState_Type.__name__ = "Integer32"
_HotlinksInfoTriggerState_Object = MibTableColumn
hotlinksInfoTriggerState = _HotlinksInfoTriggerState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 10, 3, 1, 3),
    _HotlinksInfoTriggerState_Type()
)
hotlinksInfoTriggerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotlinksInfoTriggerState.setStatus("current")


class _HotlinksInfoTriggerPreemptState_Type(Integer32):
    """Custom type hotlinksInfoTriggerPreemptState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_HotlinksInfoTriggerPreemptState_Type.__name__ = "Integer32"
_HotlinksInfoTriggerPreemptState_Object = MibTableColumn
hotlinksInfoTriggerPreemptState = _HotlinksInfoTriggerPreemptState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 10, 3, 1, 4),
    _HotlinksInfoTriggerPreemptState_Type()
)
hotlinksInfoTriggerPreemptState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotlinksInfoTriggerPreemptState.setStatus("current")
_HotlinksInfoTriggerFdelay_Type = Integer32
_HotlinksInfoTriggerFdelay_Object = MibTableColumn
hotlinksInfoTriggerFdelay = _HotlinksInfoTriggerFdelay_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 10, 3, 1, 5),
    _HotlinksInfoTriggerFdelay_Type()
)
hotlinksInfoTriggerFdelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotlinksInfoTriggerFdelay.setStatus("current")
_HotlinksInfoTriggerActive_Type = DisplayString
_HotlinksInfoTriggerActive_Object = MibTableColumn
hotlinksInfoTriggerActive = _HotlinksInfoTriggerActive_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 10, 3, 1, 6),
    _HotlinksInfoTriggerActive_Type()
)
hotlinksInfoTriggerActive.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotlinksInfoTriggerActive.setStatus("current")


class _HotlinksInfoBpduState_Type(Integer32):
    """Custom type hotlinksInfoBpduState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_HotlinksInfoBpduState_Type.__name__ = "Integer32"
_HotlinksInfoBpduState_Object = MibScalar
hotlinksInfoBpduState = _HotlinksInfoBpduState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 10, 4),
    _HotlinksInfoBpduState_Type()
)
hotlinksInfoBpduState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotlinksInfoBpduState.setStatus("current")
_HotlinksInfoFdbUpdateRate_Type = Integer32
_HotlinksInfoFdbUpdateRate_Object = MibScalar
hotlinksInfoFdbUpdateRate = _HotlinksInfoFdbUpdateRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 10, 5),
    _HotlinksInfoFdbUpdateRate_Type()
)
hotlinksInfoFdbUpdateRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hotlinksInfoFdbUpdateRate.setStatus("current")
_LldpInfo_ObjectIdentity = ObjectIdentity
lldpInfo = _LldpInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11)
)
_LldpInfoPortTable_Object = MibTable
lldpInfoPortTable = _LldpInfoPortTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 1)
)
if mibBuilder.loadTexts:
    lldpInfoPortTable.setStatus("current")
_LldpInfoPortEntry_Object = MibTableRow
lldpInfoPortEntry = _LldpInfoPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 1, 1)
)
lldpInfoPortEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "lldpInfoPortIndex"),
)
if mibBuilder.loadTexts:
    lldpInfoPortEntry.setStatus("current")
_LldpInfoPortIndex_Type = PortNumber
_LldpInfoPortIndex_Object = MibTableColumn
lldpInfoPortIndex = _LldpInfoPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 1, 1, 1),
    _LldpInfoPortIndex_Type()
)
lldpInfoPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoPortIndex.setStatus("current")


class _LldpInfoPortAlias_Type(DisplayString):
    """Custom type lldpInfoPortAlias based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_LldpInfoPortAlias_Type.__name__ = "DisplayString"
_LldpInfoPortAlias_Object = MibTableColumn
lldpInfoPortAlias = _LldpInfoPortAlias_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 1, 1, 2),
    _LldpInfoPortAlias_Type()
)
lldpInfoPortAlias.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoPortAlias.setStatus("current")
_LldpInfoPortMacAddress_Type = PhysAddress
_LldpInfoPortMacAddress_Object = MibTableColumn
lldpInfoPortMacAddress = _LldpInfoPortMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 1, 1, 3),
    _LldpInfoPortMacAddress_Type()
)
lldpInfoPortMacAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoPortMacAddress.setStatus("current")
_LldpInfoPortMtu_Type = Integer32
_LldpInfoPortMtu_Object = MibTableColumn
lldpInfoPortMtu = _LldpInfoPortMtu_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 1, 1, 4),
    _LldpInfoPortMtu_Type()
)
lldpInfoPortMtu.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoPortMtu.setStatus("current")


class _LldpInfoPortEnabled_Type(Integer32):
    """Custom type lldpInfoPortEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LldpInfoPortEnabled_Type.__name__ = "Integer32"
_LldpInfoPortEnabled_Object = MibTableColumn
lldpInfoPortEnabled = _LldpInfoPortEnabled_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 1, 1, 5),
    _LldpInfoPortEnabled_Type()
)
lldpInfoPortEnabled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoPortEnabled.setStatus("current")


class _LldpInfoPortAdminStatus_Type(Integer32):
    """Custom type lldpInfoPortAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("enabledTxOnly", 1),
          ("enabledRxOnly", 2),
          ("enabledRxTx", 3),
          ("disabled", 4))
    )


_LldpInfoPortAdminStatus_Type.__name__ = "Integer32"
_LldpInfoPortAdminStatus_Object = MibTableColumn
lldpInfoPortAdminStatus = _LldpInfoPortAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 1, 1, 6),
    _LldpInfoPortAdminStatus_Type()
)
lldpInfoPortAdminStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoPortAdminStatus.setStatus("current")


class _LldpInfoPortRxChanges_Type(Integer32):
    """Custom type lldpInfoPortRxChanges based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LldpInfoPortRxChanges_Type.__name__ = "Integer32"
_LldpInfoPortRxChanges_Object = MibTableColumn
lldpInfoPortRxChanges = _LldpInfoPortRxChanges_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 1, 1, 7),
    _LldpInfoPortRxChanges_Type()
)
lldpInfoPortRxChanges.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoPortRxChanges.setStatus("current")


class _LldpInfoPortportdesctlv_Type(Integer32):
    """Custom type lldpInfoPortportdesctlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpInfoPortportdesctlv_Type.__name__ = "Integer32"
_LldpInfoPortportdesctlv_Object = MibTableColumn
lldpInfoPortportdesctlv = _LldpInfoPortportdesctlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 1, 1, 8),
    _LldpInfoPortportdesctlv_Type()
)
lldpInfoPortportdesctlv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoPortportdesctlv.setStatus("current")


class _LldpInfoPortsysnametlv_Type(Integer32):
    """Custom type lldpInfoPortsysnametlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpInfoPortsysnametlv_Type.__name__ = "Integer32"
_LldpInfoPortsysnametlv_Object = MibTableColumn
lldpInfoPortsysnametlv = _LldpInfoPortsysnametlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 1, 1, 9),
    _LldpInfoPortsysnametlv_Type()
)
lldpInfoPortsysnametlv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoPortsysnametlv.setStatus("current")


class _LldpInfoPortsysdescrtlv_Type(Integer32):
    """Custom type lldpInfoPortsysdescrtlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpInfoPortsysdescrtlv_Type.__name__ = "Integer32"
_LldpInfoPortsysdescrtlv_Object = MibTableColumn
lldpInfoPortsysdescrtlv = _LldpInfoPortsysdescrtlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 1, 1, 10),
    _LldpInfoPortsysdescrtlv_Type()
)
lldpInfoPortsysdescrtlv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoPortsysdescrtlv.setStatus("current")


class _LldpInfoPortsyscaptlv_Type(Integer32):
    """Custom type lldpInfoPortsyscaptlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpInfoPortsyscaptlv_Type.__name__ = "Integer32"
_LldpInfoPortsyscaptlv_Object = MibTableColumn
lldpInfoPortsyscaptlv = _LldpInfoPortsyscaptlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 1, 1, 11),
    _LldpInfoPortsyscaptlv_Type()
)
lldpInfoPortsyscaptlv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoPortsyscaptlv.setStatus("current")


class _LldpInfoPortmgmtaddrtlv_Type(Integer32):
    """Custom type lldpInfoPortmgmtaddrtlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpInfoPortmgmtaddrtlv_Type.__name__ = "Integer32"
_LldpInfoPortmgmtaddrtlv_Object = MibTableColumn
lldpInfoPortmgmtaddrtlv = _LldpInfoPortmgmtaddrtlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 1, 1, 12),
    _LldpInfoPortmgmtaddrtlv_Type()
)
lldpInfoPortmgmtaddrtlv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoPortmgmtaddrtlv.setStatus("current")


class _LldpInfoPortportvidtlv_Type(Integer32):
    """Custom type lldpInfoPortportvidtlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpInfoPortportvidtlv_Type.__name__ = "Integer32"
_LldpInfoPortportvidtlv_Object = MibTableColumn
lldpInfoPortportvidtlv = _LldpInfoPortportvidtlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 1, 1, 13),
    _LldpInfoPortportvidtlv_Type()
)
lldpInfoPortportvidtlv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoPortportvidtlv.setStatus("current")


class _LldpInfoPortportprottlv_Type(Integer32):
    """Custom type lldpInfoPortportprottlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpInfoPortportprottlv_Type.__name__ = "Integer32"
_LldpInfoPortportprottlv_Object = MibTableColumn
lldpInfoPortportprottlv = _LldpInfoPortportprottlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 1, 1, 14),
    _LldpInfoPortportprottlv_Type()
)
lldpInfoPortportprottlv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoPortportprottlv.setStatus("current")


class _LldpInfoPortvlannametlv_Type(Integer32):
    """Custom type lldpInfoPortvlannametlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpInfoPortvlannametlv_Type.__name__ = "Integer32"
_LldpInfoPortvlannametlv_Object = MibTableColumn
lldpInfoPortvlannametlv = _LldpInfoPortvlannametlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 1, 1, 15),
    _LldpInfoPortvlannametlv_Type()
)
lldpInfoPortvlannametlv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoPortvlannametlv.setStatus("current")


class _LldpInfoPortprotidtlv_Type(Integer32):
    """Custom type lldpInfoPortprotidtlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpInfoPortprotidtlv_Type.__name__ = "Integer32"
_LldpInfoPortprotidtlv_Object = MibTableColumn
lldpInfoPortprotidtlv = _LldpInfoPortprotidtlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 1, 1, 16),
    _LldpInfoPortprotidtlv_Type()
)
lldpInfoPortprotidtlv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoPortprotidtlv.setStatus("current")


class _LldpInfoPortmacphytlv_Type(Integer32):
    """Custom type lldpInfoPortmacphytlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpInfoPortmacphytlv_Type.__name__ = "Integer32"
_LldpInfoPortmacphytlv_Object = MibTableColumn
lldpInfoPortmacphytlv = _LldpInfoPortmacphytlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 1, 1, 17),
    _LldpInfoPortmacphytlv_Type()
)
lldpInfoPortmacphytlv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoPortmacphytlv.setStatus("current")


class _LldpInfoPortpowermditlv_Type(Integer32):
    """Custom type lldpInfoPortpowermditlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpInfoPortpowermditlv_Type.__name__ = "Integer32"
_LldpInfoPortpowermditlv_Object = MibTableColumn
lldpInfoPortpowermditlv = _LldpInfoPortpowermditlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 1, 1, 18),
    _LldpInfoPortpowermditlv_Type()
)
lldpInfoPortpowermditlv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoPortpowermditlv.setStatus("current")


class _LldpInfoPortlinkaggrtlv_Type(Integer32):
    """Custom type lldpInfoPortlinkaggrtlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpInfoPortlinkaggrtlv_Type.__name__ = "Integer32"
_LldpInfoPortlinkaggrtlv_Object = MibTableColumn
lldpInfoPortlinkaggrtlv = _LldpInfoPortlinkaggrtlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 1, 1, 19),
    _LldpInfoPortlinkaggrtlv_Type()
)
lldpInfoPortlinkaggrtlv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoPortlinkaggrtlv.setStatus("current")


class _LldpInfoPortframesztlv_Type(Integer32):
    """Custom type lldpInfoPortframesztlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpInfoPortframesztlv_Type.__name__ = "Integer32"
_LldpInfoPortframesztlv_Object = MibTableColumn
lldpInfoPortframesztlv = _LldpInfoPortframesztlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 1, 1, 20),
    _LldpInfoPortframesztlv_Type()
)
lldpInfoPortframesztlv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoPortframesztlv.setStatus("current")


class _LldpInfoPortdcbxtlv_Type(Integer32):
    """Custom type lldpInfoPortdcbxtlv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_LldpInfoPortdcbxtlv_Type.__name__ = "Integer32"
_LldpInfoPortdcbxtlv_Object = MibTableColumn
lldpInfoPortdcbxtlv = _LldpInfoPortdcbxtlv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 1, 1, 21),
    _LldpInfoPortdcbxtlv_Type()
)
lldpInfoPortdcbxtlv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoPortdcbxtlv.setStatus("current")
_LldpInfoTxTable_Object = MibTable
lldpInfoTxTable = _LldpInfoTxTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 2)
)
if mibBuilder.loadTexts:
    lldpInfoTxTable.setStatus("current")
_LldpInfoTxEntry_Object = MibTableRow
lldpInfoTxEntry = _LldpInfoTxEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 2, 1)
)
lldpInfoTxEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "lldpInfoTxIndex"),
)
if mibBuilder.loadTexts:
    lldpInfoTxEntry.setStatus("current")
_LldpInfoTxIndex_Type = PortNumber
_LldpInfoTxIndex_Object = MibTableColumn
lldpInfoTxIndex = _LldpInfoTxIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 2, 1, 1),
    _LldpInfoTxIndex_Type()
)
lldpInfoTxIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoTxIndex.setStatus("current")


class _LldpInfoTxState_Type(Integer32):
    """Custom type lldpInfoTxState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("txLldpInitialize", 1),
          ("txIdle", 2),
          ("txShutdownFrame", 3),
          ("txInfoFrame", 4))
    )


_LldpInfoTxState_Type.__name__ = "Integer32"
_LldpInfoTxState_Object = MibTableColumn
lldpInfoTxState = _LldpInfoTxState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 2, 1, 2),
    _LldpInfoTxState_Type()
)
lldpInfoTxState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoTxState.setStatus("current")


class _LldpInfoTxLocalChanged_Type(Integer32):
    """Custom type lldpInfoTxLocalChanged based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LldpInfoTxLocalChanged_Type.__name__ = "Integer32"
_LldpInfoTxLocalChanged_Object = MibTableColumn
lldpInfoTxLocalChanged = _LldpInfoTxLocalChanged_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 2, 1, 3),
    _LldpInfoTxLocalChanged_Type()
)
lldpInfoTxLocalChanged.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoTxLocalChanged.setStatus("current")
_LldpInfoTxTTL_Type = Integer32
_LldpInfoTxTTL_Object = MibTableColumn
lldpInfoTxTTL = _LldpInfoTxTTL_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 2, 1, 4),
    _LldpInfoTxTTL_Type()
)
lldpInfoTxTTL.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoTxTTL.setStatus("current")
_LldpInfoTxTxTTR_Type = Integer32
_LldpInfoTxTxTTR_Object = MibTableColumn
lldpInfoTxTxTTR = _LldpInfoTxTxTTR_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 2, 1, 5),
    _LldpInfoTxTxTTR_Type()
)
lldpInfoTxTxTTR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoTxTxTTR.setStatus("current")
_LldpInfoTxDelayWhile_Type = Integer32
_LldpInfoTxDelayWhile_Object = MibTableColumn
lldpInfoTxDelayWhile = _LldpInfoTxDelayWhile_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 2, 1, 6),
    _LldpInfoTxDelayWhile_Type()
)
lldpInfoTxDelayWhile.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoTxDelayWhile.setStatus("current")
_LldpInfoTxShutdownWhile_Type = Integer32
_LldpInfoTxShutdownWhile_Object = MibTableColumn
lldpInfoTxShutdownWhile = _LldpInfoTxShutdownWhile_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 2, 1, 7),
    _LldpInfoTxShutdownWhile_Type()
)
lldpInfoTxShutdownWhile.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoTxShutdownWhile.setStatus("current")
_LldpInfoTxReinitDelay_Type = Integer32
_LldpInfoTxReinitDelay_Object = MibTableColumn
lldpInfoTxReinitDelay = _LldpInfoTxReinitDelay_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 2, 1, 8),
    _LldpInfoTxReinitDelay_Type()
)
lldpInfoTxReinitDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoTxReinitDelay.setStatus("current")
_LldpInfoTxHoldMultiplier_Type = Integer32
_LldpInfoTxHoldMultiplier_Object = MibTableColumn
lldpInfoTxHoldMultiplier = _LldpInfoTxHoldMultiplier_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 2, 1, 9),
    _LldpInfoTxHoldMultiplier_Type()
)
lldpInfoTxHoldMultiplier.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoTxHoldMultiplier.setStatus("current")
_LldpInfoTxTransmitInterval_Type = Integer32
_LldpInfoTxTransmitInterval_Object = MibTableColumn
lldpInfoTxTransmitInterval = _LldpInfoTxTransmitInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 2, 1, 10),
    _LldpInfoTxTransmitInterval_Type()
)
lldpInfoTxTransmitInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoTxTransmitInterval.setStatus("current")
_LldpInfoTxTransmitDelay_Type = Integer32
_LldpInfoTxTransmitDelay_Object = MibTableColumn
lldpInfoTxTransmitDelay = _LldpInfoTxTransmitDelay_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 2, 1, 11),
    _LldpInfoTxTransmitDelay_Type()
)
lldpInfoTxTransmitDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoTxTransmitDelay.setStatus("current")


class _LldpInfoTxDMAC_Type(DisplayString):
    """Custom type lldpInfoTxDMAC based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 128),
    )


_LldpInfoTxDMAC_Type.__name__ = "DisplayString"
_LldpInfoTxDMAC_Object = MibTableColumn
lldpInfoTxDMAC = _LldpInfoTxDMAC_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 2, 1, 12),
    _LldpInfoTxDMAC_Type()
)
lldpInfoTxDMAC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoTxDMAC.setStatus("current")
_LldpInfoRxTable_Object = MibTable
lldpInfoRxTable = _LldpInfoRxTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 3)
)
if mibBuilder.loadTexts:
    lldpInfoRxTable.setStatus("current")
_LldpInfoRxEntry_Object = MibTableRow
lldpInfoRxEntry = _LldpInfoRxEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 3, 1)
)
lldpInfoRxEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "lldpInfoRxIndex"),
)
if mibBuilder.loadTexts:
    lldpInfoRxEntry.setStatus("current")
_LldpInfoRxIndex_Type = PortNumber
_LldpInfoRxIndex_Object = MibTableColumn
lldpInfoRxIndex = _LldpInfoRxIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 3, 1, 1),
    _LldpInfoRxIndex_Type()
)
lldpInfoRxIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoRxIndex.setStatus("current")


class _LldpInfoRxState_Type(Integer32):
    """Custom type lldpInfoRxState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("lldpWaitPortOperational", 1),
          ("deleteAgedInfo", 2),
          ("rxLldpInitialize", 3),
          ("rxWaitForFrame", 4),
          ("rxFrame", 5),
          ("deleteInfo", 6),
          ("updateInfo", 7))
    )


_LldpInfoRxState_Type.__name__ = "Integer32"
_LldpInfoRxState_Object = MibTableColumn
lldpInfoRxState = _LldpInfoRxState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 3, 1, 2),
    _LldpInfoRxState_Type()
)
lldpInfoRxState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoRxState.setStatus("current")


class _LldpInfoRxBadFrame_Type(Integer32):
    """Custom type lldpInfoRxBadFrame based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LldpInfoRxBadFrame_Type.__name__ = "Integer32"
_LldpInfoRxBadFrame_Object = MibTableColumn
lldpInfoRxBadFrame = _LldpInfoRxBadFrame_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 3, 1, 3),
    _LldpInfoRxBadFrame_Type()
)
lldpInfoRxBadFrame.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoRxBadFrame.setStatus("current")


class _LldpInfoRxRcvFrame_Type(Integer32):
    """Custom type lldpInfoRxRcvFrame based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LldpInfoRxRcvFrame_Type.__name__ = "Integer32"
_LldpInfoRxRcvFrame_Object = MibTableColumn
lldpInfoRxRcvFrame = _LldpInfoRxRcvFrame_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 3, 1, 4),
    _LldpInfoRxRcvFrame_Type()
)
lldpInfoRxRcvFrame.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoRxRcvFrame.setStatus("current")


class _LldpInfoRxRxInfoAge_Type(Integer32):
    """Custom type lldpInfoRxRxInfoAge based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LldpInfoRxRxInfoAge_Type.__name__ = "Integer32"
_LldpInfoRxRxInfoAge_Object = MibTableColumn
lldpInfoRxRxInfoAge = _LldpInfoRxRxInfoAge_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 3, 1, 5),
    _LldpInfoRxRxInfoAge_Type()
)
lldpInfoRxRxInfoAge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoRxRxInfoAge.setStatus("current")


class _LldpInfoRxRemoteChanged_Type(Integer32):
    """Custom type lldpInfoRxRemoteChanged based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LldpInfoRxRemoteChanged_Type.__name__ = "Integer32"
_LldpInfoRxRemoteChanged_Object = MibTableColumn
lldpInfoRxRemoteChanged = _LldpInfoRxRemoteChanged_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 3, 1, 6),
    _LldpInfoRxRemoteChanged_Type()
)
lldpInfoRxRemoteChanged.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoRxRemoteChanged.setStatus("current")


class _LldpInfoRxTooManyNeighbors_Type(Integer32):
    """Custom type lldpInfoRxTooManyNeighbors based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LldpInfoRxTooManyNeighbors_Type.__name__ = "Integer32"
_LldpInfoRxTooManyNeighbors_Object = MibTableColumn
lldpInfoRxTooManyNeighbors = _LldpInfoRxTooManyNeighbors_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 3, 1, 7),
    _LldpInfoRxTooManyNeighbors_Type()
)
lldpInfoRxTooManyNeighbors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoRxTooManyNeighbors.setStatus("current")


class _LldpInfoRxSNMPNotify_Type(Integer32):
    """Custom type lldpInfoRxSNMPNotify based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LldpInfoRxSNMPNotify_Type.__name__ = "Integer32"
_LldpInfoRxSNMPNotify_Object = MibTableColumn
lldpInfoRxSNMPNotify = _LldpInfoRxSNMPNotify_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 3, 1, 8),
    _LldpInfoRxSNMPNotify_Type()
)
lldpInfoRxSNMPNotify.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoRxSNMPNotify.setStatus("current")
_LldpInfoRxRxTTL_Type = Integer32
_LldpInfoRxRxTTL_Object = MibTableColumn
lldpInfoRxRxTTL = _LldpInfoRxRxTTL_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 3, 1, 9),
    _LldpInfoRxRxTTL_Type()
)
lldpInfoRxRxTTL.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoRxRxTTL.setStatus("current")
_LldpInfoRxTooManyNeighborTimer_Type = Integer32
_LldpInfoRxTooManyNeighborTimer_Object = MibTableColumn
lldpInfoRxTooManyNeighborTimer = _LldpInfoRxTooManyNeighborTimer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 3, 1, 10),
    _LldpInfoRxTooManyNeighborTimer_Type()
)
lldpInfoRxTooManyNeighborTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoRxTooManyNeighborTimer.setStatus("current")


class _LldpInfoRxDMAC_Type(DisplayString):
    """Custom type lldpInfoRxDMAC based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 128),
    )


_LldpInfoRxDMAC_Type.__name__ = "DisplayString"
_LldpInfoRxDMAC_Object = MibTableColumn
lldpInfoRxDMAC = _LldpInfoRxDMAC_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 3, 1, 11),
    _LldpInfoRxDMAC_Type()
)
lldpInfoRxDMAC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoRxDMAC.setStatus("current")
_LldpInfoRemoteDevicesTable_Object = MibTable
lldpInfoRemoteDevicesTable = _LldpInfoRemoteDevicesTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 4)
)
if mibBuilder.loadTexts:
    lldpInfoRemoteDevicesTable.setStatus("current")
_LldpInfoRemoteDevicesEntry_Object = MibTableRow
lldpInfoRemoteDevicesEntry = _LldpInfoRemoteDevicesEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 4, 1)
)
lldpInfoRemoteDevicesEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "lldpInfoRemoteDevicesIndex"),
)
if mibBuilder.loadTexts:
    lldpInfoRemoteDevicesEntry.setStatus("current")


class _LldpInfoRemoteDevicesIndex_Type(Integer32):
    """Custom type lldpInfoRemoteDevicesIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 256),
    )


_LldpInfoRemoteDevicesIndex_Type.__name__ = "Integer32"
_LldpInfoRemoteDevicesIndex_Object = MibTableColumn
lldpInfoRemoteDevicesIndex = _LldpInfoRemoteDevicesIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 4, 1, 1),
    _LldpInfoRemoteDevicesIndex_Type()
)
lldpInfoRemoteDevicesIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoRemoteDevicesIndex.setStatus("current")
_LldpInfoRemoteDevicesRemoteTTL_Type = Integer32
_LldpInfoRemoteDevicesRemoteTTL_Object = MibTableColumn
lldpInfoRemoteDevicesRemoteTTL = _LldpInfoRemoteDevicesRemoteTTL_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 4, 1, 3),
    _LldpInfoRemoteDevicesRemoteTTL_Type()
)
lldpInfoRemoteDevicesRemoteTTL.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoRemoteDevicesRemoteTTL.setStatus("current")


class _LldpInfoRemoteDevicesRxChanges_Type(Integer32):
    """Custom type lldpInfoRemoteDevicesRxChanges based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LldpInfoRemoteDevicesRxChanges_Type.__name__ = "Integer32"
_LldpInfoRemoteDevicesRxChanges_Object = MibTableColumn
lldpInfoRemoteDevicesRxChanges = _LldpInfoRemoteDevicesRxChanges_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 4, 1, 4),
    _LldpInfoRemoteDevicesRxChanges_Type()
)
lldpInfoRemoteDevicesRxChanges.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoRemoteDevicesRxChanges.setStatus("current")


class _LldpInfoRemoteDevicesLocalPort_Type(DisplayString):
    """Custom type lldpInfoRemoteDevicesLocalPort based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 128),
    )


_LldpInfoRemoteDevicesLocalPort_Type.__name__ = "DisplayString"
_LldpInfoRemoteDevicesLocalPort_Object = MibTableColumn
lldpInfoRemoteDevicesLocalPort = _LldpInfoRemoteDevicesLocalPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 4, 1, 5),
    _LldpInfoRemoteDevicesLocalPort_Type()
)
lldpInfoRemoteDevicesLocalPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoRemoteDevicesLocalPort.setStatus("current")


class _LldpInfoRemoteDevicesChassisSubtype_Type(Integer32):
    """Custom type lldpInfoRemoteDevicesChassisSubtype based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("chassisComponent", 1),
          ("interfaceAlias", 2),
          ("portComponent", 3),
          ("macAddress", 4),
          ("networkAddress", 5),
          ("interfaceName", 6),
          ("locallyAssigned", 7))
    )


_LldpInfoRemoteDevicesChassisSubtype_Type.__name__ = "Integer32"
_LldpInfoRemoteDevicesChassisSubtype_Object = MibTableColumn
lldpInfoRemoteDevicesChassisSubtype = _LldpInfoRemoteDevicesChassisSubtype_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 4, 1, 6),
    _LldpInfoRemoteDevicesChassisSubtype_Type()
)
lldpInfoRemoteDevicesChassisSubtype.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoRemoteDevicesChassisSubtype.setStatus("current")


class _LldpInfoRemoteDevicesChassisId_Type(DisplayString):
    """Custom type lldpInfoRemoteDevicesChassisId based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 255),
    )


_LldpInfoRemoteDevicesChassisId_Type.__name__ = "DisplayString"
_LldpInfoRemoteDevicesChassisId_Object = MibTableColumn
lldpInfoRemoteDevicesChassisId = _LldpInfoRemoteDevicesChassisId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 4, 1, 7),
    _LldpInfoRemoteDevicesChassisId_Type()
)
lldpInfoRemoteDevicesChassisId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoRemoteDevicesChassisId.setStatus("current")


class _LldpInfoRemoteDevicesPortSubtype_Type(Integer32):
    """Custom type lldpInfoRemoteDevicesPortSubtype based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("interfaceAlias", 1),
          ("portComponent", 2),
          ("macAddress", 3),
          ("networkAddress", 4),
          ("interfaceName", 5),
          ("agentCircuitId", 6),
          ("locallyAssigned", 7))
    )


_LldpInfoRemoteDevicesPortSubtype_Type.__name__ = "Integer32"
_LldpInfoRemoteDevicesPortSubtype_Object = MibTableColumn
lldpInfoRemoteDevicesPortSubtype = _LldpInfoRemoteDevicesPortSubtype_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 4, 1, 8),
    _LldpInfoRemoteDevicesPortSubtype_Type()
)
lldpInfoRemoteDevicesPortSubtype.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoRemoteDevicesPortSubtype.setStatus("current")


class _LldpInfoRemoteDevicesPortId_Type(DisplayString):
    """Custom type lldpInfoRemoteDevicesPortId based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 255),
    )


_LldpInfoRemoteDevicesPortId_Type.__name__ = "DisplayString"
_LldpInfoRemoteDevicesPortId_Object = MibTableColumn
lldpInfoRemoteDevicesPortId = _LldpInfoRemoteDevicesPortId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 4, 1, 9),
    _LldpInfoRemoteDevicesPortId_Type()
)
lldpInfoRemoteDevicesPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoRemoteDevicesPortId.setStatus("current")


class _LldpInfoRemoteDevicesSystemName_Type(DisplayString):
    """Custom type lldpInfoRemoteDevicesSystemName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_LldpInfoRemoteDevicesSystemName_Type.__name__ = "DisplayString"
_LldpInfoRemoteDevicesSystemName_Object = MibTableColumn
lldpInfoRemoteDevicesSystemName = _LldpInfoRemoteDevicesSystemName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 4, 1, 10),
    _LldpInfoRemoteDevicesSystemName_Type()
)
lldpInfoRemoteDevicesSystemName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoRemoteDevicesSystemName.setStatus("current")


class _LldpInfoRemoteDevicesSystemDescription_Type(DisplayString):
    """Custom type lldpInfoRemoteDevicesSystemDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_LldpInfoRemoteDevicesSystemDescription_Type.__name__ = "DisplayString"
_LldpInfoRemoteDevicesSystemDescription_Object = MibTableColumn
lldpInfoRemoteDevicesSystemDescription = _LldpInfoRemoteDevicesSystemDescription_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 4, 1, 11),
    _LldpInfoRemoteDevicesSystemDescription_Type()
)
lldpInfoRemoteDevicesSystemDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoRemoteDevicesSystemDescription.setStatus("current")


class _LldpInfoRemoteDevicesPortDescription_Type(DisplayString):
    """Custom type lldpInfoRemoteDevicesPortDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_LldpInfoRemoteDevicesPortDescription_Type.__name__ = "DisplayString"
_LldpInfoRemoteDevicesPortDescription_Object = MibTableColumn
lldpInfoRemoteDevicesPortDescription = _LldpInfoRemoteDevicesPortDescription_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 4, 1, 12),
    _LldpInfoRemoteDevicesPortDescription_Type()
)
lldpInfoRemoteDevicesPortDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoRemoteDevicesPortDescription.setStatus("current")


class _LldpInfoRemoteDevicesSystemCapSupported_Type(DisplayString):
    """Custom type lldpInfoRemoteDevicesSystemCapSupported based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_LldpInfoRemoteDevicesSystemCapSupported_Type.__name__ = "DisplayString"
_LldpInfoRemoteDevicesSystemCapSupported_Object = MibTableColumn
lldpInfoRemoteDevicesSystemCapSupported = _LldpInfoRemoteDevicesSystemCapSupported_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 4, 1, 13),
    _LldpInfoRemoteDevicesSystemCapSupported_Type()
)
lldpInfoRemoteDevicesSystemCapSupported.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoRemoteDevicesSystemCapSupported.setStatus("current")


class _LldpInfoRemoteDevicesSystemCapEnabled_Type(DisplayString):
    """Custom type lldpInfoRemoteDevicesSystemCapEnabled based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_LldpInfoRemoteDevicesSystemCapEnabled_Type.__name__ = "DisplayString"
_LldpInfoRemoteDevicesSystemCapEnabled_Object = MibTableColumn
lldpInfoRemoteDevicesSystemCapEnabled = _LldpInfoRemoteDevicesSystemCapEnabled_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 4, 1, 14),
    _LldpInfoRemoteDevicesSystemCapEnabled_Type()
)
lldpInfoRemoteDevicesSystemCapEnabled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoRemoteDevicesSystemCapEnabled.setStatus("current")


class _LldpInfoRemoteDMAC_Type(DisplayString):
    """Custom type lldpInfoRemoteDMAC based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 128),
    )


_LldpInfoRemoteDMAC_Type.__name__ = "DisplayString"
_LldpInfoRemoteDMAC_Object = MibTableColumn
lldpInfoRemoteDMAC = _LldpInfoRemoteDMAC_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 4, 1, 15),
    _LldpInfoRemoteDMAC_Type()
)
lldpInfoRemoteDMAC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoRemoteDMAC.setStatus("current")
_LldpInfoRemoteDevicesManAddrTable_Object = MibTable
lldpInfoRemoteDevicesManAddrTable = _LldpInfoRemoteDevicesManAddrTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 5)
)
if mibBuilder.loadTexts:
    lldpInfoRemoteDevicesManAddrTable.setStatus("current")
_LldpInfoRemoteDevicesManAddrEntry_Object = MibTableRow
lldpInfoRemoteDevicesManAddrEntry = _LldpInfoRemoteDevicesManAddrEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 5, 1)
)
lldpInfoRemoteDevicesManAddrEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "lldpInfoRemoteDevicesIndex"),
    (0, "IBM-GbTOR-G8264T-MIB", "lldpInfoRemoteDevicesManAddrSubtype"),
    (0, "IBM-GbTOR-G8264T-MIB", "lldpInfoRemoteDevicesManAddr"),
)
if mibBuilder.loadTexts:
    lldpInfoRemoteDevicesManAddrEntry.setStatus("current")


class _LldpInfoRemoteDevicesManAddrSubtype_Type(Integer32):
    """Custom type lldpInfoRemoteDevicesManAddrSubtype based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              65535)
        )
    )
    namedValues = NamedValues(
        *(("other", 0),
          ("ipV4", 1),
          ("ipV6", 2),
          ("nsap", 3),
          ("hdlc", 4),
          ("bbn1822", 5),
          ("all802", 6),
          ("e163", 7),
          ("e164", 8),
          ("f69", 9),
          ("x121", 10),
          ("ipx", 11),
          ("appletalk", 12),
          ("decnetIV", 13),
          ("banyanVines", 14),
          ("e164withNsap", 15),
          ("dns", 16),
          ("distinguishedname", 17),
          ("asnumber", 18),
          ("xtpoveripv4", 19),
          ("xtpoveripv6", 20),
          ("xtpnativemodextp", 21),
          ("reserved", 65535))
    )


_LldpInfoRemoteDevicesManAddrSubtype_Type.__name__ = "Integer32"
_LldpInfoRemoteDevicesManAddrSubtype_Object = MibTableColumn
lldpInfoRemoteDevicesManAddrSubtype = _LldpInfoRemoteDevicesManAddrSubtype_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 5, 1, 1),
    _LldpInfoRemoteDevicesManAddrSubtype_Type()
)
lldpInfoRemoteDevicesManAddrSubtype.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoRemoteDevicesManAddrSubtype.setStatus("current")


class _LldpInfoRemoteDevicesManAddr_Type(DisplayString):
    """Custom type lldpInfoRemoteDevicesManAddr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_LldpInfoRemoteDevicesManAddr_Type.__name__ = "DisplayString"
_LldpInfoRemoteDevicesManAddr_Object = MibTableColumn
lldpInfoRemoteDevicesManAddr = _LldpInfoRemoteDevicesManAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 5, 1, 2),
    _LldpInfoRemoteDevicesManAddr_Type()
)
lldpInfoRemoteDevicesManAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoRemoteDevicesManAddr.setStatus("current")


class _LldpInfoRemoteDevicesManAddrIfSubtype_Type(Integer32):
    """Custom type lldpInfoRemoteDevicesManAddrIfSubtype based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 1),
          ("ifIndex", 2),
          ("systemPortNumber", 3))
    )


_LldpInfoRemoteDevicesManAddrIfSubtype_Type.__name__ = "Integer32"
_LldpInfoRemoteDevicesManAddrIfSubtype_Object = MibTableColumn
lldpInfoRemoteDevicesManAddrIfSubtype = _LldpInfoRemoteDevicesManAddrIfSubtype_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 5, 1, 3),
    _LldpInfoRemoteDevicesManAddrIfSubtype_Type()
)
lldpInfoRemoteDevicesManAddrIfSubtype.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoRemoteDevicesManAddrIfSubtype.setStatus("current")
_LldpInfoRemoteDevicesManAddrIfId_Type = Integer32
_LldpInfoRemoteDevicesManAddrIfId_Object = MibTableColumn
lldpInfoRemoteDevicesManAddrIfId = _LldpInfoRemoteDevicesManAddrIfId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 5, 1, 4),
    _LldpInfoRemoteDevicesManAddrIfId_Type()
)
lldpInfoRemoteDevicesManAddrIfId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoRemoteDevicesManAddrIfId.setStatus("current")


class _LldpInfoRemoteDevicesManAddrOID_Type(DisplayString):
    """Custom type lldpInfoRemoteDevicesManAddrOID based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_LldpInfoRemoteDevicesManAddrOID_Type.__name__ = "DisplayString"
_LldpInfoRemoteDevicesManAddrOID_Object = MibTableColumn
lldpInfoRemoteDevicesManAddrOID = _LldpInfoRemoteDevicesManAddrOID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 5, 1, 5),
    _LldpInfoRemoteDevicesManAddrOID_Type()
)
lldpInfoRemoteDevicesManAddrOID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lldpInfoRemoteDevicesManAddrOID.setStatus("current")


class _LldpClearMsap_Type(Integer32):
    """Custom type lldpClearMsap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("ok", 0),
          ("clearMsap", 1))
    )


_LldpClearMsap_Type.__name__ = "Integer32"
_LldpClearMsap_Object = MibScalar
lldpClearMsap = _LldpClearMsap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 11, 6),
    _LldpClearMsap_Type()
)
lldpClearMsap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lldpClearMsap.setStatus("current")
_OamInfo_ObjectIdentity = ObjectIdentity
oamInfo = _OamInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 12)
)
_OamInfoPortTable_Object = MibTable
oamInfoPortTable = _OamInfoPortTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 12, 1)
)
if mibBuilder.loadTexts:
    oamInfoPortTable.setStatus("current")
_OamInfoPortEntry_Object = MibTableRow
oamInfoPortEntry = _OamInfoPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 12, 1, 1)
)
oamInfoPortEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "oamInfoPortIndex"),
)
if mibBuilder.loadTexts:
    oamInfoPortEntry.setStatus("current")
_OamInfoPortIndex_Type = PortNumber
_OamInfoPortIndex_Object = MibTableColumn
oamInfoPortIndex = _OamInfoPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 12, 1, 1, 1),
    _OamInfoPortIndex_Type()
)
oamInfoPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamInfoPortIndex.setStatus("current")


class _OamInfoPortLocalState_Type(Integer32):
    """Custom type oamInfoPortLocalState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 0),
          ("disabled", 1))
    )


_OamInfoPortLocalState_Type.__name__ = "Integer32"
_OamInfoPortLocalState_Object = MibTableColumn
oamInfoPortLocalState = _OamInfoPortLocalState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 12, 1, 1, 2),
    _OamInfoPortLocalState_Type()
)
oamInfoPortLocalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamInfoPortLocalState.setStatus("current")


class _OamInfoPortLocalMode_Type(Integer32):
    """Custom type oamInfoPortLocalMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("active", 0),
          ("passive", 1))
    )


_OamInfoPortLocalMode_Type.__name__ = "Integer32"
_OamInfoPortLocalMode_Object = MibTableColumn
oamInfoPortLocalMode = _OamInfoPortLocalMode_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 12, 1, 1, 3),
    _OamInfoPortLocalMode_Type()
)
oamInfoPortLocalMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamInfoPortLocalMode.setStatus("current")


class _OamInfoPortLocalLinkStatus_Type(Integer32):
    """Custom type oamInfoPortLocalLinkStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("ok", 0),
          ("fail", 1))
    )


_OamInfoPortLocalLinkStatus_Type.__name__ = "Integer32"
_OamInfoPortLocalLinkStatus_Object = MibTableColumn
oamInfoPortLocalLinkStatus = _OamInfoPortLocalLinkStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 12, 1, 1, 4),
    _OamInfoPortLocalLinkStatus_Type()
)
oamInfoPortLocalLinkStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamInfoPortLocalLinkStatus.setStatus("current")


class _OamInfoPortLocalStable_Type(Integer32):
    """Custom type oamInfoPortLocalStable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("true", 0),
          ("false", 1))
    )


_OamInfoPortLocalStable_Type.__name__ = "Integer32"
_OamInfoPortLocalStable_Object = MibTableColumn
oamInfoPortLocalStable = _OamInfoPortLocalStable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 12, 1, 1, 5),
    _OamInfoPortLocalStable_Type()
)
oamInfoPortLocalStable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamInfoPortLocalStable.setStatus("current")


class _OamInfoPortLocalSatisfied_Type(Integer32):
    """Custom type oamInfoPortLocalSatisfied based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("true", 0),
          ("false", 1))
    )


_OamInfoPortLocalSatisfied_Type.__name__ = "Integer32"
_OamInfoPortLocalSatisfied_Object = MibTableColumn
oamInfoPortLocalSatisfied = _OamInfoPortLocalSatisfied_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 12, 1, 1, 6),
    _OamInfoPortLocalSatisfied_Type()
)
oamInfoPortLocalSatisfied.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamInfoPortLocalSatisfied.setStatus("current")


class _OamInfoPortLocalEvaluating_Type(Integer32):
    """Custom type oamInfoPortLocalEvaluating based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("true", 0),
          ("false", 1))
    )


_OamInfoPortLocalEvaluating_Type.__name__ = "Integer32"
_OamInfoPortLocalEvaluating_Object = MibTableColumn
oamInfoPortLocalEvaluating = _OamInfoPortLocalEvaluating_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 12, 1, 1, 7),
    _OamInfoPortLocalEvaluating_Type()
)
oamInfoPortLocalEvaluating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamInfoPortLocalEvaluating.setStatus("current")


class _OamInfoPortRemoteMode_Type(Integer32):
    """Custom type oamInfoPortRemoteMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("active", 0),
          ("passive", 1))
    )


_OamInfoPortRemoteMode_Type.__name__ = "Integer32"
_OamInfoPortRemoteMode_Object = MibTableColumn
oamInfoPortRemoteMode = _OamInfoPortRemoteMode_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 12, 1, 1, 8),
    _OamInfoPortRemoteMode_Type()
)
oamInfoPortRemoteMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamInfoPortRemoteMode.setStatus("current")
_OamInfoPortRemoteMAC_Type = PhysAddress
_OamInfoPortRemoteMAC_Object = MibTableColumn
oamInfoPortRemoteMAC = _OamInfoPortRemoteMAC_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 12, 1, 1, 9),
    _OamInfoPortRemoteMAC_Type()
)
oamInfoPortRemoteMAC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamInfoPortRemoteMAC.setStatus("current")


class _OamInfoPortRemoteStable_Type(Integer32):
    """Custom type oamInfoPortRemoteStable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("true", 0),
          ("false", 1))
    )


_OamInfoPortRemoteStable_Type.__name__ = "Integer32"
_OamInfoPortRemoteStable_Object = MibTableColumn
oamInfoPortRemoteStable = _OamInfoPortRemoteStable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 12, 1, 1, 10),
    _OamInfoPortRemoteStable_Type()
)
oamInfoPortRemoteStable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamInfoPortRemoteStable.setStatus("current")


class _OamInfoPortRemoteStateValid_Type(Integer32):
    """Custom type oamInfoPortRemoteStateValid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("true", 0),
          ("false", 1))
    )


_OamInfoPortRemoteStateValid_Type.__name__ = "Integer32"
_OamInfoPortRemoteStateValid_Object = MibTableColumn
oamInfoPortRemoteStateValid = _OamInfoPortRemoteStateValid_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 12, 1, 1, 11),
    _OamInfoPortRemoteStateValid_Type()
)
oamInfoPortRemoteStateValid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamInfoPortRemoteStateValid.setStatus("current")


class _OamInfoPortRemoteEvaluating_Type(Integer32):
    """Custom type oamInfoPortRemoteEvaluating based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("true", 0),
          ("false", 1))
    )


_OamInfoPortRemoteEvaluating_Type.__name__ = "Integer32"
_OamInfoPortRemoteEvaluating_Object = MibTableColumn
oamInfoPortRemoteEvaluating = _OamInfoPortRemoteEvaluating_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 12, 1, 1, 12),
    _OamInfoPortRemoteEvaluating_Type()
)
oamInfoPortRemoteEvaluating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamInfoPortRemoteEvaluating.setStatus("current")
_UdldInfo_ObjectIdentity = ObjectIdentity
udldInfo = _UdldInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 13)
)
_UdldInfoPortTable_Object = MibTable
udldInfoPortTable = _UdldInfoPortTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 13, 1)
)
if mibBuilder.loadTexts:
    udldInfoPortTable.setStatus("current")
_UdldInfoPortEntry_Object = MibTableRow
udldInfoPortEntry = _UdldInfoPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 13, 1, 1)
)
udldInfoPortEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "udldInfoPortIndex"),
)
if mibBuilder.loadTexts:
    udldInfoPortEntry.setStatus("current")
_UdldInfoPortIndex_Type = PortNumber
_UdldInfoPortIndex_Object = MibTableColumn
udldInfoPortIndex = _UdldInfoPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 13, 1, 1, 1),
    _UdldInfoPortIndex_Type()
)
udldInfoPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    udldInfoPortIndex.setStatus("current")


class _UdldInfoPortConfig_Type(Integer32):
    """Custom type udldInfoPortConfig based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_UdldInfoPortConfig_Type.__name__ = "Integer32"
_UdldInfoPortConfig_Object = MibTableColumn
udldInfoPortConfig = _UdldInfoPortConfig_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 13, 1, 1, 2),
    _UdldInfoPortConfig_Type()
)
udldInfoPortConfig.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    udldInfoPortConfig.setStatus("current")


class _UdldInfoPortMode_Type(Integer32):
    """Custom type udldInfoPortMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("aggresive", 1),
          ("normal", 2))
    )


_UdldInfoPortMode_Type.__name__ = "Integer32"
_UdldInfoPortMode_Object = MibTableColumn
udldInfoPortMode = _UdldInfoPortMode_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 13, 1, 1, 3),
    _UdldInfoPortMode_Type()
)
udldInfoPortMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    udldInfoPortMode.setStatus("current")


class _UdldInfoPortLink_Type(Integer32):
    """Custom type udldInfoPortLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("up", 1),
          ("down", 2))
    )


_UdldInfoPortLink_Type.__name__ = "Integer32"
_UdldInfoPortLink_Object = MibTableColumn
udldInfoPortLink = _UdldInfoPortLink_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 13, 1, 1, 4),
    _UdldInfoPortLink_Type()
)
udldInfoPortLink.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    udldInfoPortLink.setStatus("current")


class _UdldInfoPortOperationalStatus_Type(Integer32):
    """Custom type udldInfoPortOperationalStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("init", 1),
          ("inactive", 2),
          ("linkup", 3),
          ("advertisement", 4),
          ("detection", 5),
          ("extDetection", 6),
          ("shutdown", 7))
    )


_UdldInfoPortOperationalStatus_Type.__name__ = "Integer32"
_UdldInfoPortOperationalStatus_Object = MibTableColumn
udldInfoPortOperationalStatus = _UdldInfoPortOperationalStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 13, 1, 1, 5),
    _UdldInfoPortOperationalStatus_Type()
)
udldInfoPortOperationalStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    udldInfoPortOperationalStatus.setStatus("current")


class _UdldInfoPortBidirectionalStatus_Type(Integer32):
    """Custom type udldInfoPortBidirectionalStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 1),
          ("unidirectional", 2),
          ("bidirectional", 3),
          ("loop", 4),
          ("neighborMismatch", 5))
    )


_UdldInfoPortBidirectionalStatus_Type.__name__ = "Integer32"
_UdldInfoPortBidirectionalStatus_Object = MibTableColumn
udldInfoPortBidirectionalStatus = _UdldInfoPortBidirectionalStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 13, 1, 1, 6),
    _UdldInfoPortBidirectionalStatus_Type()
)
udldInfoPortBidirectionalStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    udldInfoPortBidirectionalStatus.setStatus("current")
_UdldInfoPortInterval_Type = Integer32
_UdldInfoPortInterval_Object = MibTableColumn
udldInfoPortInterval = _UdldInfoPortInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 13, 1, 1, 7),
    _UdldInfoPortInterval_Type()
)
udldInfoPortInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    udldInfoPortInterval.setStatus("current")
_UdldInfoPortTimeout_Type = Integer32
_UdldInfoPortTimeout_Object = MibTableColumn
udldInfoPortTimeout = _UdldInfoPortTimeout_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 13, 1, 1, 8),
    _UdldInfoPortTimeout_Type()
)
udldInfoPortTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    udldInfoPortTimeout.setStatus("current")
_UdldInfoPortNeighborCount_Type = Integer32
_UdldInfoPortNeighborCount_Object = MibTableColumn
udldInfoPortNeighborCount = _UdldInfoPortNeighborCount_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 13, 1, 1, 9),
    _UdldInfoPortNeighborCount_Type()
)
udldInfoPortNeighborCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    udldInfoPortNeighborCount.setStatus("current")
_UdldInfoNeighborTable_Object = MibTable
udldInfoNeighborTable = _UdldInfoNeighborTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 13, 2)
)
if mibBuilder.loadTexts:
    udldInfoNeighborTable.setStatus("current")
_UdldInfoNeighborEntry_Object = MibTableRow
udldInfoNeighborEntry = _UdldInfoNeighborEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 13, 2, 1)
)
udldInfoNeighborEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "udldInfoNeighborLocalPortIndex"),
    (0, "IBM-GbTOR-G8264T-MIB", "udldInfoNeighborIndex"),
)
if mibBuilder.loadTexts:
    udldInfoNeighborEntry.setStatus("current")
_UdldInfoNeighborLocalPortIndex_Type = PortNumber
_UdldInfoNeighborLocalPortIndex_Object = MibTableColumn
udldInfoNeighborLocalPortIndex = _UdldInfoNeighborLocalPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 13, 2, 1, 1),
    _UdldInfoNeighborLocalPortIndex_Type()
)
udldInfoNeighborLocalPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    udldInfoNeighborLocalPortIndex.setStatus("current")
_UdldInfoNeighborIndex_Type = Integer32
_UdldInfoNeighborIndex_Object = MibTableColumn
udldInfoNeighborIndex = _UdldInfoNeighborIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 13, 2, 1, 2),
    _UdldInfoNeighborIndex_Type()
)
udldInfoNeighborIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    udldInfoNeighborIndex.setStatus("current")
_UdldInfoNeighborExpiration_Type = Integer32
_UdldInfoNeighborExpiration_Object = MibTableColumn
udldInfoNeighborExpiration = _UdldInfoNeighborExpiration_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 13, 2, 1, 3),
    _UdldInfoNeighborExpiration_Type()
)
udldInfoNeighborExpiration.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    udldInfoNeighborExpiration.setStatus("current")
_UdldInfoNeighborDeviceName_Type = DisplayString
_UdldInfoNeighborDeviceName_Object = MibTableColumn
udldInfoNeighborDeviceName = _UdldInfoNeighborDeviceName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 13, 2, 1, 4),
    _UdldInfoNeighborDeviceName_Type()
)
udldInfoNeighborDeviceName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    udldInfoNeighborDeviceName.setStatus("current")
_UdldInfoNeighborDeviceID_Type = DisplayString
_UdldInfoNeighborDeviceID_Object = MibTableColumn
udldInfoNeighborDeviceID = _UdldInfoNeighborDeviceID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 13, 2, 1, 5),
    _UdldInfoNeighborDeviceID_Type()
)
udldInfoNeighborDeviceID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    udldInfoNeighborDeviceID.setStatus("current")
_UdldInfoNeighborPortID_Type = DisplayString
_UdldInfoNeighborPortID_Object = MibTableColumn
udldInfoNeighborPortID = _UdldInfoNeighborPortID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 13, 2, 1, 6),
    _UdldInfoNeighborPortID_Type()
)
udldInfoNeighborPortID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    udldInfoNeighborPortID.setStatus("current")
_FailoverInfo_ObjectIdentity = ObjectIdentity
failoverInfo = _FailoverInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 14)
)


class _FailoverInfoState_Type(Integer32):
    """Custom type failoverInfoState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_FailoverInfoState_Type.__name__ = "Integer32"
_FailoverInfoState_Object = MibScalar
failoverInfoState = _FailoverInfoState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 14, 1),
    _FailoverInfoState_Type()
)
failoverInfoState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    failoverInfoState.setStatus("current")
_FailoverInfoTriggerTable_Object = MibTable
failoverInfoTriggerTable = _FailoverInfoTriggerTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 14, 3)
)
if mibBuilder.loadTexts:
    failoverInfoTriggerTable.setStatus("current")
_FailoverInfoTriggerEntry_Object = MibTableRow
failoverInfoTriggerEntry = _FailoverInfoTriggerEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 14, 3, 1)
)
failoverInfoTriggerEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "failoverInfoTriggerId"),
)
if mibBuilder.loadTexts:
    failoverInfoTriggerEntry.setStatus("current")
_FailoverInfoTriggerId_Type = Integer32
_FailoverInfoTriggerId_Object = MibTableColumn
failoverInfoTriggerId = _FailoverInfoTriggerId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 14, 3, 1, 1),
    _FailoverInfoTriggerId_Type()
)
failoverInfoTriggerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    failoverInfoTriggerId.setStatus("current")


class _FailoverInfoTriggerState_Type(Integer32):
    """Custom type failoverInfoTriggerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_FailoverInfoTriggerState_Type.__name__ = "Integer32"
_FailoverInfoTriggerState_Object = MibTableColumn
failoverInfoTriggerState = _FailoverInfoTriggerState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 14, 3, 1, 2),
    _FailoverInfoTriggerState_Type()
)
failoverInfoTriggerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    failoverInfoTriggerState.setStatus("current")
_FailoverInfoTriggerLimit_Type = Integer32
_FailoverInfoTriggerLimit_Object = MibTableColumn
failoverInfoTriggerLimit = _FailoverInfoTriggerLimit_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 14, 3, 1, 3),
    _FailoverInfoTriggerLimit_Type()
)
failoverInfoTriggerLimit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    failoverInfoTriggerLimit.setStatus("current")


class _FailoverInfoTriggerMonitorState_Type(Integer32):
    """Custom type failoverInfoTriggerMonitorState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("up", 1),
          ("down", 2))
    )


_FailoverInfoTriggerMonitorState_Type.__name__ = "Integer32"
_FailoverInfoTriggerMonitorState_Object = MibTableColumn
failoverInfoTriggerMonitorState = _FailoverInfoTriggerMonitorState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 14, 3, 1, 4),
    _FailoverInfoTriggerMonitorState_Type()
)
failoverInfoTriggerMonitorState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    failoverInfoTriggerMonitorState.setStatus("current")
_FailoverInfoTriggerMonitorPorts_Type = OctetString
_FailoverInfoTriggerMonitorPorts_Object = MibTableColumn
failoverInfoTriggerMonitorPorts = _FailoverInfoTriggerMonitorPorts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 14, 3, 1, 5),
    _FailoverInfoTriggerMonitorPorts_Type()
)
failoverInfoTriggerMonitorPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    failoverInfoTriggerMonitorPorts.setStatus("current")


class _FailoverInfoTriggerControlState_Type(Integer32):
    """Custom type failoverInfoTriggerControlState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("auto-controlled", 1),
          ("auto-disabled", 2))
    )


_FailoverInfoTriggerControlState_Type.__name__ = "Integer32"
_FailoverInfoTriggerControlState_Object = MibTableColumn
failoverInfoTriggerControlState = _FailoverInfoTriggerControlState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 14, 3, 1, 6),
    _FailoverInfoTriggerControlState_Type()
)
failoverInfoTriggerControlState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    failoverInfoTriggerControlState.setStatus("current")
_FailoverInfoTriggerControlPorts_Type = OctetString
_FailoverInfoTriggerControlPorts_Object = MibTableColumn
failoverInfoTriggerControlPorts = _FailoverInfoTriggerControlPorts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 14, 3, 1, 7),
    _FailoverInfoTriggerControlPorts_Type()
)
failoverInfoTriggerControlPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    failoverInfoTriggerControlPorts.setStatus("current")
_FailoverInfoMonPortStateTable_Object = MibTable
failoverInfoMonPortStateTable = _FailoverInfoMonPortStateTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 14, 4)
)
if mibBuilder.loadTexts:
    failoverInfoMonPortStateTable.setStatus("current")
_FailoverInfoTriggerMonPortEntry_Object = MibTableRow
failoverInfoTriggerMonPortEntry = _FailoverInfoTriggerMonPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 14, 4, 1)
)
failoverInfoTriggerMonPortEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "failoverInfoTriggerMonId"),
    (0, "IBM-GbTOR-G8264T-MIB", "failoverInfoTriggerMonPortId"),
)
if mibBuilder.loadTexts:
    failoverInfoTriggerMonPortEntry.setStatus("current")
_FailoverInfoTriggerMonId_Type = Integer32
_FailoverInfoTriggerMonId_Object = MibTableColumn
failoverInfoTriggerMonId = _FailoverInfoTriggerMonId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 14, 4, 1, 1),
    _FailoverInfoTriggerMonId_Type()
)
failoverInfoTriggerMonId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    failoverInfoTriggerMonId.setStatus("current")
_FailoverInfoTriggerMonPortId_Type = PortNumber
_FailoverInfoTriggerMonPortId_Object = MibTableColumn
failoverInfoTriggerMonPortId = _FailoverInfoTriggerMonPortId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 14, 4, 1, 2),
    _FailoverInfoTriggerMonPortId_Type()
)
failoverInfoTriggerMonPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    failoverInfoTriggerMonPortId.setStatus("current")


class _FailoverInfoTriggerMonPortStatus_Type(Integer32):
    """Custom type failoverInfoTriggerMonPortStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("failed", 0),
          ("operational", 1))
    )


_FailoverInfoTriggerMonPortStatus_Type.__name__ = "Integer32"
_FailoverInfoTriggerMonPortStatus_Object = MibTableColumn
failoverInfoTriggerMonPortStatus = _FailoverInfoTriggerMonPortStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 14, 4, 1, 3),
    _FailoverInfoTriggerMonPortStatus_Type()
)
failoverInfoTriggerMonPortStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    failoverInfoTriggerMonPortStatus.setStatus("current")
_FailoverInfoCtlPortStateTable_Object = MibTable
failoverInfoCtlPortStateTable = _FailoverInfoCtlPortStateTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 14, 5)
)
if mibBuilder.loadTexts:
    failoverInfoCtlPortStateTable.setStatus("current")
_FailoverInfoTriggerCtlPortEntry_Object = MibTableRow
failoverInfoTriggerCtlPortEntry = _FailoverInfoTriggerCtlPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 14, 5, 1)
)
failoverInfoTriggerCtlPortEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "failoverInfoTriggerCtlId"),
    (0, "IBM-GbTOR-G8264T-MIB", "failoverInfoTriggerCtlPortId"),
)
if mibBuilder.loadTexts:
    failoverInfoTriggerCtlPortEntry.setStatus("current")
_FailoverInfoTriggerCtlId_Type = Integer32
_FailoverInfoTriggerCtlId_Object = MibTableColumn
failoverInfoTriggerCtlId = _FailoverInfoTriggerCtlId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 14, 5, 1, 1),
    _FailoverInfoTriggerCtlId_Type()
)
failoverInfoTriggerCtlId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    failoverInfoTriggerCtlId.setStatus("current")
_FailoverInfoTriggerCtlPortId_Type = PortNumber
_FailoverInfoTriggerCtlPortId_Object = MibTableColumn
failoverInfoTriggerCtlPortId = _FailoverInfoTriggerCtlPortId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 14, 5, 1, 2),
    _FailoverInfoTriggerCtlPortId_Type()
)
failoverInfoTriggerCtlPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    failoverInfoTriggerCtlPortId.setStatus("current")


class _FailoverInfoTriggerCtlPortStatus_Type(Integer32):
    """Custom type failoverInfoTriggerCtlPortStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("failed", 0),
          ("operational", 1))
    )


_FailoverInfoTriggerCtlPortStatus_Type.__name__ = "Integer32"
_FailoverInfoTriggerCtlPortStatus_Object = MibTableColumn
failoverInfoTriggerCtlPortStatus = _FailoverInfoTriggerCtlPortStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 14, 5, 1, 3),
    _FailoverInfoTriggerCtlPortStatus_Type()
)
failoverInfoTriggerCtlPortStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    failoverInfoTriggerCtlPortStatus.setStatus("current")
_VlagInfo_ObjectIdentity = ObjectIdentity
vlagInfo = _VlagInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 16)
)
_VlagInfoSystem_ObjectIdentity = ObjectIdentity
vlagInfoSystem = _VlagInfoSystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 16, 1)
)


class _VlagInfoState_Type(Integer32):
    """Custom type vlagInfoState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_VlagInfoState_Type.__name__ = "Integer32"
_VlagInfoState_Object = MibScalar
vlagInfoState = _VlagInfoState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 16, 1, 1),
    _VlagInfoState_Type()
)
vlagInfoState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagInfoState.setStatus("current")


class _VlagInfoAdminRole_Type(Integer32):
    """Custom type vlagInfoAdminRole based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unelected", 0),
          ("primary", 1),
          ("secondary", 2))
    )


_VlagInfoAdminRole_Type.__name__ = "Integer32"
_VlagInfoAdminRole_Object = MibScalar
vlagInfoAdminRole = _VlagInfoAdminRole_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 16, 1, 2),
    _VlagInfoAdminRole_Type()
)
vlagInfoAdminRole.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagInfoAdminRole.setStatus("current")
_VlagInfoISLId_Type = Integer32
_VlagInfoISLId_Object = MibScalar
vlagInfoISLId = _VlagInfoISLId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 16, 1, 3),
    _VlagInfoISLId_Type()
)
vlagInfoISLId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagInfoISLId.setStatus("current")
_VlagInfoLocalMac_Type = PhysAddress
_VlagInfoLocalMac_Object = MibScalar
vlagInfoLocalMac = _VlagInfoLocalMac_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 16, 1, 4),
    _VlagInfoLocalMac_Type()
)
vlagInfoLocalMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagInfoLocalMac.setStatus("current")
_VlagInfoLocalPriority_Type = Integer32
_VlagInfoLocalPriority_Object = MibScalar
vlagInfoLocalPriority = _VlagInfoLocalPriority_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 16, 1, 5),
    _VlagInfoLocalPriority_Type()
)
vlagInfoLocalPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagInfoLocalPriority.setStatus("current")
_VlagInfoRemoteMac_Type = PhysAddress
_VlagInfoRemoteMac_Object = MibScalar
vlagInfoRemoteMac = _VlagInfoRemoteMac_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 16, 1, 6),
    _VlagInfoRemoteMac_Type()
)
vlagInfoRemoteMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagInfoRemoteMac.setStatus("current")
_VlagInfoRemotePriority_Type = Integer32
_VlagInfoRemotePriority_Object = MibScalar
vlagInfoRemotePriority = _VlagInfoRemotePriority_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 16, 1, 7),
    _VlagInfoRemotePriority_Type()
)
vlagInfoRemotePriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagInfoRemotePriority.setStatus("current")


class _VlagInfoHlthchkStatus_Type(Integer32):
    """Custom type vlagInfoHlthchkStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_VlagInfoHlthchkStatus_Type.__name__ = "Integer32"
_VlagInfoHlthchkStatus_Object = MibScalar
vlagInfoHlthchkStatus = _VlagInfoHlthchkStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 16, 1, 8),
    _VlagInfoHlthchkStatus_Type()
)
vlagInfoHlthchkStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagInfoHlthchkStatus.setStatus("current")
_VlagInfoStartupDelayInterval_Type = Integer32
_VlagInfoStartupDelayInterval_Object = MibScalar
vlagInfoStartupDelayInterval = _VlagInfoStartupDelayInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 16, 1, 9),
    _VlagInfoStartupDelayInterval_Type()
)
vlagInfoStartupDelayInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagInfoStartupDelayInterval.setStatus("current")


class _VlagInfoStartupDelayStatus_Type(Integer32):
    """Custom type vlagInfoStartupDelayStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unstarted", 1),
          ("running", 2),
          ("finished", 3))
    )


_VlagInfoStartupDelayStatus_Type.__name__ = "Integer32"
_VlagInfoStartupDelayStatus_Object = MibScalar
vlagInfoStartupDelayStatus = _VlagInfoStartupDelayStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 16, 1, 10),
    _VlagInfoStartupDelayStatus_Type()
)
vlagInfoStartupDelayStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagInfoStartupDelayStatus.setStatus("current")
_VlagInfoSystemMac_Type = PhysAddress
_VlagInfoSystemMac_Object = MibScalar
vlagInfoSystemMac = _VlagInfoSystemMac_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 16, 1, 11),
    _VlagInfoSystemMac_Type()
)
vlagInfoSystemMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagInfoSystemMac.setStatus("current")


class _VlagInfoOperaRole_Type(Integer32):
    """Custom type vlagInfoOperaRole based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unelected", 0),
          ("primary", 1),
          ("secondary", 2))
    )


_VlagInfoOperaRole_Type.__name__ = "Integer32"
_VlagInfoOperaRole_Object = MibScalar
vlagInfoOperaRole = _VlagInfoOperaRole_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 16, 1, 12),
    _VlagInfoOperaRole_Type()
)
vlagInfoOperaRole.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagInfoOperaRole.setStatus("current")
_VlagInfoAutoRecoveryInterval_Type = Integer32
_VlagInfoAutoRecoveryInterval_Object = MibScalar
vlagInfoAutoRecoveryInterval = _VlagInfoAutoRecoveryInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 16, 1, 13),
    _VlagInfoAutoRecoveryInterval_Type()
)
vlagInfoAutoRecoveryInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagInfoAutoRecoveryInterval.setStatus("current")


class _VlagInfoAutoRecoveryStatus_Type(Integer32):
    """Custom type vlagInfoAutoRecoveryStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unstarted", 1),
          ("running", 2),
          ("finished", 3))
    )


_VlagInfoAutoRecoveryStatus_Type.__name__ = "Integer32"
_VlagInfoAutoRecoveryStatus_Object = MibScalar
vlagInfoAutoRecoveryStatus = _VlagInfoAutoRecoveryStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 16, 1, 14),
    _VlagInfoAutoRecoveryStatus_Type()
)
vlagInfoAutoRecoveryStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagInfoAutoRecoveryStatus.setStatus("current")
_VlagInfoGroup_ObjectIdentity = ObjectIdentity
vlagInfoGroup = _VlagInfoGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 16, 2)
)
_VlagInfoInstanceTable_Object = MibTable
vlagInfoInstanceTable = _VlagInfoInstanceTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 16, 2, 1)
)
if mibBuilder.loadTexts:
    vlagInfoInstanceTable.setStatus("current")
_VlagInfoInstanceEntry_Object = MibTableRow
vlagInfoInstanceEntry = _VlagInfoInstanceEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 16, 2, 1, 1)
)
vlagInfoInstanceEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vlagInstanceId"),
)
if mibBuilder.loadTexts:
    vlagInfoInstanceEntry.setStatus("current")
_VlagInstanceId_Type = Integer32
_VlagInstanceId_Object = MibTableColumn
vlagInstanceId = _VlagInstanceId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 16, 2, 1, 1, 1),
    _VlagInstanceId_Type()
)
vlagInstanceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagInstanceId.setStatus("current")
_VlagInstanceTrunkId_Type = Integer32
_VlagInstanceTrunkId_Object = MibTableColumn
vlagInstanceTrunkId = _VlagInstanceTrunkId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 16, 2, 1, 1, 2),
    _VlagInstanceTrunkId_Type()
)
vlagInstanceTrunkId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagInstanceTrunkId.setStatus("current")
_VlagInstanceAdminKey_Type = Integer32
_VlagInstanceAdminKey_Object = MibTableColumn
vlagInstanceAdminKey = _VlagInstanceAdminKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 16, 2, 1, 1, 3),
    _VlagInstanceAdminKey_Type()
)
vlagInstanceAdminKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagInstanceAdminKey.setStatus("current")


class _VlagInstanceState_Type(Integer32):
    """Custom type vlagInstanceState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("down", 1),
          ("localUp", 2),
          ("remoteUp", 3),
          ("formed", 4))
    )


_VlagInstanceState_Type.__name__ = "Integer32"
_VlagInstanceState_Object = MibTableColumn
vlagInstanceState = _VlagInstanceState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 16, 2, 1, 1, 4),
    _VlagInstanceState_Type()
)
vlagInstanceState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagInstanceState.setStatus("current")
_VlagInfoIslGroup_ObjectIdentity = ObjectIdentity
vlagInfoIslGroup = _VlagInfoIslGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 16, 2, 2)
)
_VlagInfoIslId_Type = Integer32
_VlagInfoIslId_Object = MibScalar
vlagInfoIslId = _VlagInfoIslId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 16, 2, 2, 1),
    _VlagInfoIslId_Type()
)
vlagInfoIslId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagInfoIslId.setStatus("current")


class _VlagInfoIslProtocol_Type(Integer32):
    """Custom type vlagInfoIslProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("static", 1),
          ("lacp", 2))
    )


_VlagInfoIslProtocol_Type.__name__ = "Integer32"
_VlagInfoIslProtocol_Object = MibScalar
vlagInfoIslProtocol = _VlagInfoIslProtocol_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 16, 2, 2, 3),
    _VlagInfoIslProtocol_Type()
)
vlagInfoIslProtocol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagInfoIslProtocol.setStatus("current")
_VlagInfoIslPortchannel_Type = Integer32
_VlagInfoIslPortchannel_Object = MibScalar
vlagInfoIslPortchannel = _VlagInfoIslPortchannel_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 16, 2, 2, 4),
    _VlagInfoIslPortchannel_Type()
)
vlagInfoIslPortchannel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagInfoIslPortchannel.setStatus("current")
_VlagInfoIslAdminkey_Type = Integer32
_VlagInfoIslAdminkey_Object = MibScalar
vlagInfoIslAdminkey = _VlagInfoIslAdminkey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 16, 2, 2, 5),
    _VlagInfoIslAdminkey_Type()
)
vlagInfoIslAdminkey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagInfoIslAdminkey.setStatus("current")
_VlagInfoIslPorts_Type = OctetString
_VlagInfoIslPorts_Object = MibScalar
vlagInfoIslPorts = _VlagInfoIslPorts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 16, 2, 2, 6),
    _VlagInfoIslPorts_Type()
)
vlagInfoIslPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagInfoIslPorts.setStatus("current")
_VlagInfoIslPortState_Type = OctetString
_VlagInfoIslPortState_Object = MibScalar
vlagInfoIslPortState = _VlagInfoIslPortState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 16, 2, 2, 7),
    _VlagInfoIslPortState_Type()
)
vlagInfoIslPortState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagInfoIslPortState.setStatus("current")
_VlagInfoIslPortLinkState_Type = OctetString
_VlagInfoIslPortLinkState_Object = MibScalar
vlagInfoIslPortLinkState = _VlagInfoIslPortLinkState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 16, 2, 2, 8),
    _VlagInfoIslPortLinkState_Type()
)
vlagInfoIslPortLinkState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlagInfoIslPortLinkState.setStatus("current")
_EcpInfo_ObjectIdentity = ObjectIdentity
ecpInfo = _EcpInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 17)
)
_EcpChnlInfoTable_Object = MibTable
ecpChnlInfoTable = _EcpChnlInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 17, 1)
)
if mibBuilder.loadTexts:
    ecpChnlInfoTable.setStatus("current")
_EcpChnlInfoEntry_Object = MibTableRow
ecpChnlInfoEntry = _EcpChnlInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 17, 1, 1)
)
ecpChnlInfoEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ecpChnlInfoEntryIndex"),
)
if mibBuilder.loadTexts:
    ecpChnlInfoEntry.setStatus("current")
_EcpChnlInfoEntryIndex_Type = Integer32
_EcpChnlInfoEntryIndex_Object = MibTableColumn
ecpChnlInfoEntryIndex = _EcpChnlInfoEntryIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 17, 1, 1, 1),
    _EcpChnlInfoEntryIndex_Type()
)
ecpChnlInfoEntryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ecpChnlInfoEntryIndex.setStatus("current")
_EcpChnlPort_Type = Integer32
_EcpChnlPort_Object = MibTableColumn
ecpChnlPort = _EcpChnlPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 17, 1, 1, 2),
    _EcpChnlPort_Type()
)
ecpChnlPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ecpChnlPort.setStatus("current")
_EcpChnlStag_Type = Integer32
_EcpChnlStag_Object = MibTableColumn
ecpChnlStag = _EcpChnlStag_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 17, 1, 1, 3),
    _EcpChnlStag_Type()
)
ecpChnlStag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ecpChnlStag.setStatus("current")
_EcpChnlSndlen_Type = Integer32
_EcpChnlSndlen_Object = MibTableColumn
ecpChnlSndlen = _EcpChnlSndlen_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 17, 1, 1, 4),
    _EcpChnlSndlen_Type()
)
ecpChnlSndlen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ecpChnlSndlen.setStatus("current")
_EcpChnlSndnxt_Type = Integer32
_EcpChnlSndnxt_Object = MibTableColumn
ecpChnlSndnxt = _EcpChnlSndnxt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 17, 1, 1, 5),
    _EcpChnlSndnxt_Type()
)
ecpChnlSndnxt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ecpChnlSndnxt.setStatus("current")
_EcpChnlRcvlast_Type = Integer32
_EcpChnlRcvlast_Object = MibTableColumn
ecpChnlRcvlast = _EcpChnlRcvlast_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 17, 1, 1, 6),
    _EcpChnlRcvlast_Type()
)
ecpChnlRcvlast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ecpChnlRcvlast.setStatus("current")
_EcpChnlStateMachine_Type = Integer32
_EcpChnlStateMachine_Object = MibTableColumn
ecpChnlStateMachine = _EcpChnlStateMachine_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 17, 1, 1, 7),
    _EcpChnlStateMachine_Type()
)
ecpChnlStateMachine.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ecpChnlStateMachine.setStatus("current")
_EcpChnlRxCnt_Type = Integer32
_EcpChnlRxCnt_Object = MibTableColumn
ecpChnlRxCnt = _EcpChnlRxCnt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 17, 1, 1, 8),
    _EcpChnlRxCnt_Type()
)
ecpChnlRxCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ecpChnlRxCnt.setStatus("current")
_EcpChnlTxCnt_Type = Integer32
_EcpChnlTxCnt_Object = MibTableColumn
ecpChnlTxCnt = _EcpChnlTxCnt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 17, 1, 1, 9),
    _EcpChnlTxCnt_Type()
)
ecpChnlTxCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ecpChnlTxCnt.setStatus("current")
_EcpChnlRxDrop_Type = Integer32
_EcpChnlRxDrop_Object = MibTableColumn
ecpChnlRxDrop = _EcpChnlRxDrop_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 17, 1, 1, 10),
    _EcpChnlRxDrop_Type()
)
ecpChnlRxDrop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ecpChnlRxDrop.setStatus("current")
_EcpChnlTxDrop_Type = Integer32
_EcpChnlTxDrop_Object = MibTableColumn
ecpChnlTxDrop = _EcpChnlTxDrop_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 17, 1, 1, 11),
    _EcpChnlTxDrop_Type()
)
ecpChnlTxDrop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ecpChnlTxDrop.setStatus("current")


class _EcpChnlState_Type(Integer32):
    """Custom type ecpChnlState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_EcpChnlState_Type.__name__ = "Integer32"
_EcpChnlState_Object = MibTableColumn
ecpChnlState = _EcpChnlState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 17, 1, 1, 12),
    _EcpChnlState_Type()
)
ecpChnlState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ecpChnlState.setStatus("current")
_EcpChnlAckErr_Type = Integer32
_EcpChnlAckErr_Object = MibTableColumn
ecpChnlAckErr = _EcpChnlAckErr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 17, 1, 1, 13),
    _EcpChnlAckErr_Type()
)
ecpChnlAckErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ecpChnlAckErr.setStatus("current")
_SlpInfo_ObjectIdentity = ObjectIdentity
slpInfo = _SlpInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 18)
)
_SlpInfoSystem_ObjectIdentity = ObjectIdentity
slpInfoSystem = _SlpInfoSystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 18, 1)
)


class _SlpInfoProtocolVersion_Type(Integer32):
    """Custom type slpInfoProtocolVersion based on Integer32"""
    defaultValue = 2


_SlpInfoProtocolVersion_Type.__name__ = "Integer32"
_SlpInfoProtocolVersion_Object = MibScalar
slpInfoProtocolVersion = _SlpInfoProtocolVersion_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 18, 1, 1),
    _SlpInfoProtocolVersion_Type()
)
slpInfoProtocolVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slpInfoProtocolVersion.setStatus("current")


class _SlpInfoListeningPort_Type(Integer32):
    """Custom type slpInfoListeningPort based on Integer32"""
    defaultValue = 427

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_SlpInfoListeningPort_Type.__name__ = "Integer32"
_SlpInfoListeningPort_Object = MibScalar
slpInfoListeningPort = _SlpInfoListeningPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 18, 1, 2),
    _SlpInfoListeningPort_Type()
)
slpInfoListeningPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slpInfoListeningPort.setStatus("current")
_SlpInfoListeningIPInterfaceTable_Object = MibTable
slpInfoListeningIPInterfaceTable = _SlpInfoListeningIPInterfaceTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 18, 1, 3)
)
if mibBuilder.loadTexts:
    slpInfoListeningIPInterfaceTable.setStatus("current")
_SlpInfoListeningIPInterfaceEntry_Object = MibTableRow
slpInfoListeningIPInterfaceEntry = _SlpInfoListeningIPInterfaceEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 18, 1, 3, 1)
)
slpInfoListeningIPInterfaceEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "listeningIPInterfaceId"),
)
if mibBuilder.loadTexts:
    slpInfoListeningIPInterfaceEntry.setStatus("current")
_ListeningIPInterfaceId_Type = Integer32
_ListeningIPInterfaceId_Object = MibTableColumn
listeningIPInterfaceId = _ListeningIPInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 18, 1, 3, 1, 1),
    _ListeningIPInterfaceId_Type()
)
listeningIPInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    listeningIPInterfaceId.setStatus("current")
_ListeningIPInterfaceAddress_Type = IpAddress
_ListeningIPInterfaceAddress_Object = MibTableColumn
listeningIPInterfaceAddress = _ListeningIPInterfaceAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 18, 1, 3, 1, 2),
    _ListeningIPInterfaceAddress_Type()
)
listeningIPInterfaceAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    listeningIPInterfaceAddress.setStatus("current")
_SlpInfoDirectoryAgents_ObjectIdentity = ObjectIdentity
slpInfoDirectoryAgents = _SlpInfoDirectoryAgents_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 18, 2)
)
_SlpInfoDirectoryAgentsTable_Object = MibTable
slpInfoDirectoryAgentsTable = _SlpInfoDirectoryAgentsTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 18, 2, 1)
)
if mibBuilder.loadTexts:
    slpInfoDirectoryAgentsTable.setStatus("current")
_SlpInfoDirectoryAgentEntry_Object = MibTableRow
slpInfoDirectoryAgentEntry = _SlpInfoDirectoryAgentEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 18, 2, 1, 1)
)
slpInfoDirectoryAgentEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "directoryAgentAddress"),
)
if mibBuilder.loadTexts:
    slpInfoDirectoryAgentEntry.setStatus("current")
_DirectoryAgentAddress_Type = IpAddress
_DirectoryAgentAddress_Object = MibTableColumn
directoryAgentAddress = _DirectoryAgentAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 18, 2, 1, 1, 1),
    _DirectoryAgentAddress_Type()
)
directoryAgentAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    directoryAgentAddress.setStatus("current")
_DirectoryAgentPort_Type = Integer32
_DirectoryAgentPort_Object = MibTableColumn
directoryAgentPort = _DirectoryAgentPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 18, 2, 1, 1, 2),
    _DirectoryAgentPort_Type()
)
directoryAgentPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    directoryAgentPort.setStatus("current")
_DirectoryAgentTime_Type = Integer32
_DirectoryAgentTime_Object = MibTableColumn
directoryAgentTime = _DirectoryAgentTime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 18, 2, 1, 1, 3),
    _DirectoryAgentTime_Type()
)
directoryAgentTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    directoryAgentTime.setStatus("current")
_SlpInfoUserAgents_ObjectIdentity = ObjectIdentity
slpInfoUserAgents = _SlpInfoUserAgents_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 18, 3)
)
_SlpInfoUserAgentsTable_Object = MibTable
slpInfoUserAgentsTable = _SlpInfoUserAgentsTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 18, 3, 1)
)
if mibBuilder.loadTexts:
    slpInfoUserAgentsTable.setStatus("current")
_SlpInfoUserAgentEntry_Object = MibTableRow
slpInfoUserAgentEntry = _SlpInfoUserAgentEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 18, 3, 1, 1)
)
slpInfoUserAgentEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "userAgentAddress"),
)
if mibBuilder.loadTexts:
    slpInfoUserAgentEntry.setStatus("current")
_UserAgentAddress_Type = IpAddress
_UserAgentAddress_Object = MibTableColumn
userAgentAddress = _UserAgentAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 18, 3, 1, 1, 1),
    _UserAgentAddress_Type()
)
userAgentAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    userAgentAddress.setStatus("current")
_UserAgentPort_Type = Integer32
_UserAgentPort_Object = MibTableColumn
userAgentPort = _UserAgentPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 18, 3, 1, 1, 2),
    _UserAgentPort_Type()
)
userAgentPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    userAgentPort.setStatus("current")
_UserAgentTime_Type = Integer32
_UserAgentTime_Object = MibTableColumn
userAgentTime = _UserAgentTime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 18, 3, 1, 1, 3),
    _UserAgentTime_Type()
)
userAgentTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    userAgentTime.setStatus("current")


class _SlpDirectoryAgentsClear_Type(Integer32):
    """Custom type slpDirectoryAgentsClear based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("other", 2))
    )


_SlpDirectoryAgentsClear_Type.__name__ = "Integer32"
_SlpDirectoryAgentsClear_Object = MibScalar
slpDirectoryAgentsClear = _SlpDirectoryAgentsClear_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 3, 18, 4),
    _SlpDirectoryAgentsClear_Type()
)
slpDirectoryAgentsClear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slpDirectoryAgentsClear.setStatus("current")
_Layer2Oper_ObjectIdentity = ObjectIdentity
layer2Oper = _Layer2Oper_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 2, 4)
)
_Layer3_ObjectIdentity = ObjectIdentity
layer3 = _Layer3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3)
)
_Layer3Configs_ObjectIdentity = ObjectIdentity
layer3Configs = _Layer3Configs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1)
)
_IpInterfaceCfg_ObjectIdentity = ObjectIdentity
ipInterfaceCfg = _IpInterfaceCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1)
)
_IpInterfaceTableMax_Type = Integer32
_IpInterfaceTableMax_Object = MibScalar
ipInterfaceTableMax = _IpInterfaceTableMax_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 1),
    _IpInterfaceTableMax_Type()
)
ipInterfaceTableMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInterfaceTableMax.setStatus("current")
_IpCurCfgIntfTable_Object = MibTable
ipCurCfgIntfTable = _IpCurCfgIntfTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 2)
)
if mibBuilder.loadTexts:
    ipCurCfgIntfTable.setStatus("current")
_IpCurCfgIntfEntry_Object = MibTableRow
ipCurCfgIntfEntry = _IpCurCfgIntfEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 2, 1)
)
ipCurCfgIntfEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipCurCfgIntfIndex"),
)
if mibBuilder.loadTexts:
    ipCurCfgIntfEntry.setStatus("current")
_IpCurCfgIntfIndex_Type = Integer32
_IpCurCfgIntfIndex_Object = MibTableColumn
ipCurCfgIntfIndex = _IpCurCfgIntfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 2, 1, 1),
    _IpCurCfgIntfIndex_Type()
)
ipCurCfgIntfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgIntfIndex.setStatus("current")


class _IpCurCfgIntfAddr_Type(DisplayString):
    """Custom type ipCurCfgIntfAddr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_IpCurCfgIntfAddr_Type.__name__ = "DisplayString"
_IpCurCfgIntfAddr_Object = MibTableColumn
ipCurCfgIntfAddr = _IpCurCfgIntfAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 2, 1, 2),
    _IpCurCfgIntfAddr_Type()
)
ipCurCfgIntfAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgIntfAddr.setStatus("current")


class _IpCurCfgIntfMask_Type(DisplayString):
    """Custom type ipCurCfgIntfMask based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 15),
    )


_IpCurCfgIntfMask_Type.__name__ = "DisplayString"
_IpCurCfgIntfMask_Object = MibTableColumn
ipCurCfgIntfMask = _IpCurCfgIntfMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 2, 1, 3),
    _IpCurCfgIntfMask_Type()
)
ipCurCfgIntfMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgIntfMask.setStatus("current")
_IpCurCfgIntfBroadcast_Type = IpAddress
_IpCurCfgIntfBroadcast_Object = MibTableColumn
ipCurCfgIntfBroadcast = _IpCurCfgIntfBroadcast_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 2, 1, 4),
    _IpCurCfgIntfBroadcast_Type()
)
ipCurCfgIntfBroadcast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgIntfBroadcast.setStatus("obsolete")
_IpCurCfgIntfVlan_Type = Integer32
_IpCurCfgIntfVlan_Object = MibTableColumn
ipCurCfgIntfVlan = _IpCurCfgIntfVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 2, 1, 5),
    _IpCurCfgIntfVlan_Type()
)
ipCurCfgIntfVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgIntfVlan.setStatus("current")


class _IpCurCfgIntfState_Type(Integer32):
    """Custom type ipCurCfgIntfState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_IpCurCfgIntfState_Type.__name__ = "Integer32"
_IpCurCfgIntfState_Object = MibTableColumn
ipCurCfgIntfState = _IpCurCfgIntfState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 2, 1, 6),
    _IpCurCfgIntfState_Type()
)
ipCurCfgIntfState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgIntfState.setStatus("current")


class _IpCurCfgIntfBootpRelay_Type(Integer32):
    """Custom type ipCurCfgIntfBootpRelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IpCurCfgIntfBootpRelay_Type.__name__ = "Integer32"
_IpCurCfgIntfBootpRelay_Object = MibTableColumn
ipCurCfgIntfBootpRelay = _IpCurCfgIntfBootpRelay_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 2, 1, 7),
    _IpCurCfgIntfBootpRelay_Type()
)
ipCurCfgIntfBootpRelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgIntfBootpRelay.setStatus("current")


class _IpCurCfgIntfRouteAdv_Type(Integer32):
    """Custom type ipCurCfgIntfRouteAdv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IpCurCfgIntfRouteAdv_Type.__name__ = "Integer32"
_IpCurCfgIntfRouteAdv_Object = MibTableColumn
ipCurCfgIntfRouteAdv = _IpCurCfgIntfRouteAdv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 2, 1, 12),
    _IpCurCfgIntfRouteAdv_Type()
)
ipCurCfgIntfRouteAdv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgIntfRouteAdv.setStatus("current")


class _IpCurCfgIntfManagedCfg_Type(Integer32):
    """Custom type ipCurCfgIntfManagedCfg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IpCurCfgIntfManagedCfg_Type.__name__ = "Integer32"
_IpCurCfgIntfManagedCfg_Object = MibTableColumn
ipCurCfgIntfManagedCfg = _IpCurCfgIntfManagedCfg_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 2, 1, 13),
    _IpCurCfgIntfManagedCfg_Type()
)
ipCurCfgIntfManagedCfg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgIntfManagedCfg.setStatus("current")


class _IpCurCfgIntfOtherCfg_Type(Integer32):
    """Custom type ipCurCfgIntfOtherCfg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IpCurCfgIntfOtherCfg_Type.__name__ = "Integer32"
_IpCurCfgIntfOtherCfg_Object = MibTableColumn
ipCurCfgIntfOtherCfg = _IpCurCfgIntfOtherCfg_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 2, 1, 14),
    _IpCurCfgIntfOtherCfg_Type()
)
ipCurCfgIntfOtherCfg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgIntfOtherCfg.setStatus("current")


class _IpCurCfgIntfAdvLifetime_Type(Integer32):
    """Custom type ipCurCfgIntfAdvLifetime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 9000),
    )


_IpCurCfgIntfAdvLifetime_Type.__name__ = "Integer32"
_IpCurCfgIntfAdvLifetime_Object = MibTableColumn
ipCurCfgIntfAdvLifetime = _IpCurCfgIntfAdvLifetime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 2, 1, 15),
    _IpCurCfgIntfAdvLifetime_Type()
)
ipCurCfgIntfAdvLifetime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgIntfAdvLifetime.setStatus("current")


class _IpCurCfgIntfDadAttempts_Type(Integer32):
    """Custom type ipCurCfgIntfDadAttempts based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_IpCurCfgIntfDadAttempts_Type.__name__ = "Integer32"
_IpCurCfgIntfDadAttempts_Object = MibTableColumn
ipCurCfgIntfDadAttempts = _IpCurCfgIntfDadAttempts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 2, 1, 16),
    _IpCurCfgIntfDadAttempts_Type()
)
ipCurCfgIntfDadAttempts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgIntfDadAttempts.setStatus("current")


class _IpCurCfgIntfReachTime_Type(Gauge32):
    """Custom type ipCurCfgIntfReachTime based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600000),
    )


_IpCurCfgIntfReachTime_Type.__name__ = "Gauge32"
_IpCurCfgIntfReachTime_Object = MibTableColumn
ipCurCfgIntfReachTime = _IpCurCfgIntfReachTime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 2, 1, 17),
    _IpCurCfgIntfReachTime_Type()
)
ipCurCfgIntfReachTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgIntfReachTime.setStatus("current")


class _IpCurCfgIntfAdvInterval_Type(Integer32):
    """Custom type ipCurCfgIntfAdvInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 1800),
    )


_IpCurCfgIntfAdvInterval_Type.__name__ = "Integer32"
_IpCurCfgIntfAdvInterval_Object = MibTableColumn
ipCurCfgIntfAdvInterval = _IpCurCfgIntfAdvInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 2, 1, 18),
    _IpCurCfgIntfAdvInterval_Type()
)
ipCurCfgIntfAdvInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgIntfAdvInterval.setStatus("current")


class _IpCurCfgIntfAdvIntervalMin_Type(Integer32):
    """Custom type ipCurCfgIntfAdvIntervalMin based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 1350),
    )


_IpCurCfgIntfAdvIntervalMin_Type.__name__ = "Integer32"
_IpCurCfgIntfAdvIntervalMin_Object = MibTableColumn
ipCurCfgIntfAdvIntervalMin = _IpCurCfgIntfAdvIntervalMin_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 2, 1, 19),
    _IpCurCfgIntfAdvIntervalMin_Type()
)
ipCurCfgIntfAdvIntervalMin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgIntfAdvIntervalMin.setStatus("current")


class _IpCurCfgIntfRetransmitTimer_Type(Gauge32):
    """Custom type ipCurCfgIntfRetransmitTimer based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_IpCurCfgIntfRetransmitTimer_Type.__name__ = "Gauge32"
_IpCurCfgIntfRetransmitTimer_Object = MibTableColumn
ipCurCfgIntfRetransmitTimer = _IpCurCfgIntfRetransmitTimer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 2, 1, 20),
    _IpCurCfgIntfRetransmitTimer_Type()
)
ipCurCfgIntfRetransmitTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgIntfRetransmitTimer.setStatus("current")


class _IpCurCfgIntfHopLimit_Type(Integer32):
    """Custom type ipCurCfgIntfHopLimit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_IpCurCfgIntfHopLimit_Type.__name__ = "Integer32"
_IpCurCfgIntfHopLimit_Object = MibTableColumn
ipCurCfgIntfHopLimit = _IpCurCfgIntfHopLimit_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 2, 1, 21),
    _IpCurCfgIntfHopLimit_Type()
)
ipCurCfgIntfHopLimit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgIntfHopLimit.setStatus("current")


class _IpCurCfgIntfAdvMtu_Type(Integer32):
    """Custom type ipCurCfgIntfAdvMtu based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IpCurCfgIntfAdvMtu_Type.__name__ = "Integer32"
_IpCurCfgIntfAdvMtu_Object = MibTableColumn
ipCurCfgIntfAdvMtu = _IpCurCfgIntfAdvMtu_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 2, 1, 22),
    _IpCurCfgIntfAdvMtu_Type()
)
ipCurCfgIntfAdvMtu.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgIntfAdvMtu.setStatus("current")


class _IpCurCfgIntfIp6Host_Type(Integer32):
    """Custom type ipCurCfgIntfIp6Host based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IpCurCfgIntfIp6Host_Type.__name__ = "Integer32"
_IpCurCfgIntfIp6Host_Object = MibTableColumn
ipCurCfgIntfIp6Host = _IpCurCfgIntfIp6Host_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 2, 1, 23),
    _IpCurCfgIntfIp6Host_Type()
)
ipCurCfgIntfIp6Host.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgIntfIp6Host.setStatus("current")


class _IpCurCfgSecIntfAddr_Type(DisplayString):
    """Custom type ipCurCfgSecIntfAddr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_IpCurCfgSecIntfAddr_Type.__name__ = "DisplayString"
_IpCurCfgSecIntfAddr_Object = MibTableColumn
ipCurCfgSecIntfAddr = _IpCurCfgSecIntfAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 2, 1, 25),
    _IpCurCfgSecIntfAddr_Type()
)
ipCurCfgSecIntfAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgSecIntfAddr.setStatus("current")
_IpCurCfgSecIntfPrefix_Type = Integer32
_IpCurCfgSecIntfPrefix_Object = MibTableColumn
ipCurCfgSecIntfPrefix = _IpCurCfgSecIntfPrefix_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 2, 1, 26),
    _IpCurCfgSecIntfPrefix_Type()
)
ipCurCfgSecIntfPrefix.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgSecIntfPrefix.setStatus("current")


class _IpCurCfgIntfAnycast_Type(Integer32):
    """Custom type ipCurCfgIntfAnycast based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("anycast", 1),
          ("none", 2))
    )


_IpCurCfgIntfAnycast_Type.__name__ = "Integer32"
_IpCurCfgIntfAnycast_Object = MibTableColumn
ipCurCfgIntfAnycast = _IpCurCfgIntfAnycast_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 2, 1, 27),
    _IpCurCfgIntfAnycast_Type()
)
ipCurCfgIntfAnycast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgIntfAnycast.setStatus("current")


class _IpCurCfgSecIntfAnycast_Type(Integer32):
    """Custom type ipCurCfgSecIntfAnycast based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("anycast", 1),
          ("none", 2))
    )


_IpCurCfgSecIntfAnycast_Type.__name__ = "Integer32"
_IpCurCfgSecIntfAnycast_Object = MibTableColumn
ipCurCfgSecIntfAnycast = _IpCurCfgSecIntfAnycast_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 2, 1, 28),
    _IpCurCfgSecIntfAnycast_Type()
)
ipCurCfgSecIntfAnycast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgSecIntfAnycast.setStatus("current")


class _IpCurCfgIntfIp6Dstun_Type(Integer32):
    """Custom type ipCurCfgIntfIp6Dstun based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IpCurCfgIntfIp6Dstun_Type.__name__ = "Integer32"
_IpCurCfgIntfIp6Dstun_Object = MibTableColumn
ipCurCfgIntfIp6Dstun = _IpCurCfgIntfIp6Dstun_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 2, 1, 29),
    _IpCurCfgIntfIp6Dstun_Type()
)
ipCurCfgIntfIp6Dstun.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgIntfIp6Dstun.setStatus("current")
_IpNewCfgIntfTable_Object = MibTable
ipNewCfgIntfTable = _IpNewCfgIntfTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 3)
)
if mibBuilder.loadTexts:
    ipNewCfgIntfTable.setStatus("current")
_IpNewCfgIntfEntry_Object = MibTableRow
ipNewCfgIntfEntry = _IpNewCfgIntfEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 3, 1)
)
ipNewCfgIntfEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipNewCfgIntfIndex"),
)
if mibBuilder.loadTexts:
    ipNewCfgIntfEntry.setStatus("current")
_IpNewCfgIntfIndex_Type = Integer32
_IpNewCfgIntfIndex_Object = MibTableColumn
ipNewCfgIntfIndex = _IpNewCfgIntfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 3, 1, 1),
    _IpNewCfgIntfIndex_Type()
)
ipNewCfgIntfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipNewCfgIntfIndex.setStatus("current")


class _IpNewCfgIntfAddr_Type(DisplayString):
    """Custom type ipNewCfgIntfAddr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_IpNewCfgIntfAddr_Type.__name__ = "DisplayString"
_IpNewCfgIntfAddr_Object = MibTableColumn
ipNewCfgIntfAddr = _IpNewCfgIntfAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 3, 1, 2),
    _IpNewCfgIntfAddr_Type()
)
ipNewCfgIntfAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgIntfAddr.setStatus("current")


class _IpNewCfgIntfMask_Type(DisplayString):
    """Custom type ipNewCfgIntfMask based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 15),
    )


_IpNewCfgIntfMask_Type.__name__ = "DisplayString"
_IpNewCfgIntfMask_Object = MibTableColumn
ipNewCfgIntfMask = _IpNewCfgIntfMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 3, 1, 3),
    _IpNewCfgIntfMask_Type()
)
ipNewCfgIntfMask.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgIntfMask.setStatus("current")
_IpNewCfgIntfVlan_Type = Integer32
_IpNewCfgIntfVlan_Object = MibTableColumn
ipNewCfgIntfVlan = _IpNewCfgIntfVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 3, 1, 5),
    _IpNewCfgIntfVlan_Type()
)
ipNewCfgIntfVlan.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgIntfVlan.setStatus("current")


class _IpNewCfgIntfState_Type(Integer32):
    """Custom type ipNewCfgIntfState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_IpNewCfgIntfState_Type.__name__ = "Integer32"
_IpNewCfgIntfState_Object = MibTableColumn
ipNewCfgIntfState = _IpNewCfgIntfState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 3, 1, 6),
    _IpNewCfgIntfState_Type()
)
ipNewCfgIntfState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgIntfState.setStatus("current")


class _IpNewCfgIntfDelete_Type(Integer32):
    """Custom type ipNewCfgIntfDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_IpNewCfgIntfDelete_Type.__name__ = "Integer32"
_IpNewCfgIntfDelete_Object = MibTableColumn
ipNewCfgIntfDelete = _IpNewCfgIntfDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 3, 1, 7),
    _IpNewCfgIntfDelete_Type()
)
ipNewCfgIntfDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgIntfDelete.setStatus("current")


class _IpNewCfgIntfBootpRelay_Type(Integer32):
    """Custom type ipNewCfgIntfBootpRelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IpNewCfgIntfBootpRelay_Type.__name__ = "Integer32"
_IpNewCfgIntfBootpRelay_Object = MibTableColumn
ipNewCfgIntfBootpRelay = _IpNewCfgIntfBootpRelay_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 3, 1, 8),
    _IpNewCfgIntfBootpRelay_Type()
)
ipNewCfgIntfBootpRelay.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgIntfBootpRelay.setStatus("current")


class _IpNewCfgIntfRouteAdv_Type(Integer32):
    """Custom type ipNewCfgIntfRouteAdv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IpNewCfgIntfRouteAdv_Type.__name__ = "Integer32"
_IpNewCfgIntfRouteAdv_Object = MibTableColumn
ipNewCfgIntfRouteAdv = _IpNewCfgIntfRouteAdv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 3, 1, 13),
    _IpNewCfgIntfRouteAdv_Type()
)
ipNewCfgIntfRouteAdv.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgIntfRouteAdv.setStatus("current")


class _IpNewCfgIntfManagedCfg_Type(Integer32):
    """Custom type ipNewCfgIntfManagedCfg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IpNewCfgIntfManagedCfg_Type.__name__ = "Integer32"
_IpNewCfgIntfManagedCfg_Object = MibTableColumn
ipNewCfgIntfManagedCfg = _IpNewCfgIntfManagedCfg_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 3, 1, 14),
    _IpNewCfgIntfManagedCfg_Type()
)
ipNewCfgIntfManagedCfg.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgIntfManagedCfg.setStatus("current")


class _IpNewCfgIntfOtherCfg_Type(Integer32):
    """Custom type ipNewCfgIntfOtherCfg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IpNewCfgIntfOtherCfg_Type.__name__ = "Integer32"
_IpNewCfgIntfOtherCfg_Object = MibTableColumn
ipNewCfgIntfOtherCfg = _IpNewCfgIntfOtherCfg_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 3, 1, 15),
    _IpNewCfgIntfOtherCfg_Type()
)
ipNewCfgIntfOtherCfg.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgIntfOtherCfg.setStatus("current")


class _IpNewCfgIntfAdvLifetime_Type(Integer32):
    """Custom type ipNewCfgIntfAdvLifetime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 9000),
    )


_IpNewCfgIntfAdvLifetime_Type.__name__ = "Integer32"
_IpNewCfgIntfAdvLifetime_Object = MibTableColumn
ipNewCfgIntfAdvLifetime = _IpNewCfgIntfAdvLifetime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 3, 1, 16),
    _IpNewCfgIntfAdvLifetime_Type()
)
ipNewCfgIntfAdvLifetime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgIntfAdvLifetime.setStatus("current")


class _IpNewCfgIntfDadAttempts_Type(Integer32):
    """Custom type ipNewCfgIntfDadAttempts based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_IpNewCfgIntfDadAttempts_Type.__name__ = "Integer32"
_IpNewCfgIntfDadAttempts_Object = MibTableColumn
ipNewCfgIntfDadAttempts = _IpNewCfgIntfDadAttempts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 3, 1, 17),
    _IpNewCfgIntfDadAttempts_Type()
)
ipNewCfgIntfDadAttempts.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgIntfDadAttempts.setStatus("current")


class _IpNewCfgIntfReachTime_Type(Gauge32):
    """Custom type ipNewCfgIntfReachTime based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600000),
    )


_IpNewCfgIntfReachTime_Type.__name__ = "Gauge32"
_IpNewCfgIntfReachTime_Object = MibTableColumn
ipNewCfgIntfReachTime = _IpNewCfgIntfReachTime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 3, 1, 18),
    _IpNewCfgIntfReachTime_Type()
)
ipNewCfgIntfReachTime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgIntfReachTime.setStatus("current")


class _IpNewCfgIntfAdvInterval_Type(Integer32):
    """Custom type ipNewCfgIntfAdvInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 1800),
    )


_IpNewCfgIntfAdvInterval_Type.__name__ = "Integer32"
_IpNewCfgIntfAdvInterval_Object = MibTableColumn
ipNewCfgIntfAdvInterval = _IpNewCfgIntfAdvInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 3, 1, 19),
    _IpNewCfgIntfAdvInterval_Type()
)
ipNewCfgIntfAdvInterval.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgIntfAdvInterval.setStatus("current")


class _IpNewCfgIntfAdvIntervalMin_Type(Integer32):
    """Custom type ipNewCfgIntfAdvIntervalMin based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 1350),
    )


_IpNewCfgIntfAdvIntervalMin_Type.__name__ = "Integer32"
_IpNewCfgIntfAdvIntervalMin_Object = MibTableColumn
ipNewCfgIntfAdvIntervalMin = _IpNewCfgIntfAdvIntervalMin_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 3, 1, 20),
    _IpNewCfgIntfAdvIntervalMin_Type()
)
ipNewCfgIntfAdvIntervalMin.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgIntfAdvIntervalMin.setStatus("current")


class _IpNewCfgIntfRetransmitTimer_Type(Gauge32):
    """Custom type ipNewCfgIntfRetransmitTimer based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_IpNewCfgIntfRetransmitTimer_Type.__name__ = "Gauge32"
_IpNewCfgIntfRetransmitTimer_Object = MibTableColumn
ipNewCfgIntfRetransmitTimer = _IpNewCfgIntfRetransmitTimer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 3, 1, 21),
    _IpNewCfgIntfRetransmitTimer_Type()
)
ipNewCfgIntfRetransmitTimer.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgIntfRetransmitTimer.setStatus("current")


class _IpNewCfgIntfHopLimit_Type(Integer32):
    """Custom type ipNewCfgIntfHopLimit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_IpNewCfgIntfHopLimit_Type.__name__ = "Integer32"
_IpNewCfgIntfHopLimit_Object = MibTableColumn
ipNewCfgIntfHopLimit = _IpNewCfgIntfHopLimit_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 3, 1, 22),
    _IpNewCfgIntfHopLimit_Type()
)
ipNewCfgIntfHopLimit.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgIntfHopLimit.setStatus("current")


class _IpNewCfgIntfAdvMtu_Type(Integer32):
    """Custom type ipNewCfgIntfAdvMtu based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IpNewCfgIntfAdvMtu_Type.__name__ = "Integer32"
_IpNewCfgIntfAdvMtu_Object = MibTableColumn
ipNewCfgIntfAdvMtu = _IpNewCfgIntfAdvMtu_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 3, 1, 23),
    _IpNewCfgIntfAdvMtu_Type()
)
ipNewCfgIntfAdvMtu.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgIntfAdvMtu.setStatus("current")


class _IpNewCfgIntfIp6Host_Type(Integer32):
    """Custom type ipNewCfgIntfIp6Host based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IpNewCfgIntfIp6Host_Type.__name__ = "Integer32"
_IpNewCfgIntfIp6Host_Object = MibTableColumn
ipNewCfgIntfIp6Host = _IpNewCfgIntfIp6Host_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 3, 1, 24),
    _IpNewCfgIntfIp6Host_Type()
)
ipNewCfgIntfIp6Host.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgIntfIp6Host.setStatus("current")


class _IpNewCfgSecIntfAddr_Type(DisplayString):
    """Custom type ipNewCfgSecIntfAddr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_IpNewCfgSecIntfAddr_Type.__name__ = "DisplayString"
_IpNewCfgSecIntfAddr_Object = MibTableColumn
ipNewCfgSecIntfAddr = _IpNewCfgSecIntfAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 3, 1, 26),
    _IpNewCfgSecIntfAddr_Type()
)
ipNewCfgSecIntfAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipNewCfgSecIntfAddr.setStatus("current")
_IpNewCfgSecIntfPrefix_Type = Integer32
_IpNewCfgSecIntfPrefix_Object = MibTableColumn
ipNewCfgSecIntfPrefix = _IpNewCfgSecIntfPrefix_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 3, 1, 27),
    _IpNewCfgSecIntfPrefix_Type()
)
ipNewCfgSecIntfPrefix.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipNewCfgSecIntfPrefix.setStatus("current")


class _IpNewCfgIntfAnycast_Type(Integer32):
    """Custom type ipNewCfgIntfAnycast based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("anycast", 1),
          ("none", 2))
    )


_IpNewCfgIntfAnycast_Type.__name__ = "Integer32"
_IpNewCfgIntfAnycast_Object = MibTableColumn
ipNewCfgIntfAnycast = _IpNewCfgIntfAnycast_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 3, 1, 28),
    _IpNewCfgIntfAnycast_Type()
)
ipNewCfgIntfAnycast.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipNewCfgIntfAnycast.setStatus("current")


class _IpNewCfgSecIntfAnycast_Type(Integer32):
    """Custom type ipNewCfgSecIntfAnycast based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("anycast", 1),
          ("none", 2))
    )


_IpNewCfgSecIntfAnycast_Type.__name__ = "Integer32"
_IpNewCfgSecIntfAnycast_Object = MibTableColumn
ipNewCfgSecIntfAnycast = _IpNewCfgSecIntfAnycast_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 3, 1, 29),
    _IpNewCfgSecIntfAnycast_Type()
)
ipNewCfgSecIntfAnycast.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipNewCfgSecIntfAnycast.setStatus("current")


class _IpNewCfgIntfIp6Dstun_Type(Integer32):
    """Custom type ipNewCfgIntfIp6Dstun based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IpNewCfgIntfIp6Dstun_Type.__name__ = "Integer32"
_IpNewCfgIntfIp6Dstun_Object = MibTableColumn
ipNewCfgIntfIp6Dstun = _IpNewCfgIntfIp6Dstun_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 1, 3, 1, 30),
    _IpNewCfgIntfIp6Dstun_Type()
)
ipNewCfgIntfIp6Dstun.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgIntfIp6Dstun.setStatus("current")
_IpGatewayCfg_ObjectIdentity = ObjectIdentity
ipGatewayCfg = _IpGatewayCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 2)
)
_IpGatewayTableMax_Type = Integer32
_IpGatewayTableMax_Object = MibScalar
ipGatewayTableMax = _IpGatewayTableMax_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 2, 3),
    _IpGatewayTableMax_Type()
)
ipGatewayTableMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipGatewayTableMax.setStatus("current")
_IpCurCfgGwTable_Object = MibTable
ipCurCfgGwTable = _IpCurCfgGwTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 2, 4)
)
if mibBuilder.loadTexts:
    ipCurCfgGwTable.setStatus("current")
_IpCurCfgGwEntry_Object = MibTableRow
ipCurCfgGwEntry = _IpCurCfgGwEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 2, 4, 1)
)
ipCurCfgGwEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipCurCfgGwIndex"),
)
if mibBuilder.loadTexts:
    ipCurCfgGwEntry.setStatus("current")
_IpCurCfgGwIndex_Type = Integer32
_IpCurCfgGwIndex_Object = MibTableColumn
ipCurCfgGwIndex = _IpCurCfgGwIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 2, 4, 1, 1),
    _IpCurCfgGwIndex_Type()
)
ipCurCfgGwIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgGwIndex.setStatus("current")
_IpCurCfgGwAddr_Type = IpAddress
_IpCurCfgGwAddr_Object = MibTableColumn
ipCurCfgGwAddr = _IpCurCfgGwAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 2, 4, 1, 2),
    _IpCurCfgGwAddr_Type()
)
ipCurCfgGwAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgGwAddr.setStatus("current")


class _IpCurCfgGwInterval_Type(Integer32):
    """Custom type ipCurCfgGwInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 60),
    )


_IpCurCfgGwInterval_Type.__name__ = "Integer32"
_IpCurCfgGwInterval_Object = MibTableColumn
ipCurCfgGwInterval = _IpCurCfgGwInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 2, 4, 1, 3),
    _IpCurCfgGwInterval_Type()
)
ipCurCfgGwInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgGwInterval.setStatus("current")


class _IpCurCfgGwRetry_Type(Integer32):
    """Custom type ipCurCfgGwRetry based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 120),
    )


_IpCurCfgGwRetry_Type.__name__ = "Integer32"
_IpCurCfgGwRetry_Object = MibTableColumn
ipCurCfgGwRetry = _IpCurCfgGwRetry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 2, 4, 1, 4),
    _IpCurCfgGwRetry_Type()
)
ipCurCfgGwRetry.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgGwRetry.setStatus("current")


class _IpCurCfgGwState_Type(Integer32):
    """Custom type ipCurCfgGwState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_IpCurCfgGwState_Type.__name__ = "Integer32"
_IpCurCfgGwState_Object = MibTableColumn
ipCurCfgGwState = _IpCurCfgGwState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 2, 4, 1, 5),
    _IpCurCfgGwState_Type()
)
ipCurCfgGwState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgGwState.setStatus("current")


class _IpCurCfgGwArp_Type(Integer32):
    """Custom type ipCurCfgGwArp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_IpCurCfgGwArp_Type.__name__ = "Integer32"
_IpCurCfgGwArp_Object = MibTableColumn
ipCurCfgGwArp = _IpCurCfgGwArp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 2, 4, 1, 6),
    _IpCurCfgGwArp_Type()
)
ipCurCfgGwArp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgGwArp.setStatus("current")
_IpNewCfgGwTable_Object = MibTable
ipNewCfgGwTable = _IpNewCfgGwTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 2, 5)
)
if mibBuilder.loadTexts:
    ipNewCfgGwTable.setStatus("current")
_IpNewCfgGwEntry_Object = MibTableRow
ipNewCfgGwEntry = _IpNewCfgGwEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 2, 5, 1)
)
ipNewCfgGwEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipNewCfgGwIndex"),
)
if mibBuilder.loadTexts:
    ipNewCfgGwEntry.setStatus("current")
_IpNewCfgGwIndex_Type = Integer32
_IpNewCfgGwIndex_Object = MibTableColumn
ipNewCfgGwIndex = _IpNewCfgGwIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 2, 5, 1, 1),
    _IpNewCfgGwIndex_Type()
)
ipNewCfgGwIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipNewCfgGwIndex.setStatus("current")
_IpNewCfgGwAddr_Type = IpAddress
_IpNewCfgGwAddr_Object = MibTableColumn
ipNewCfgGwAddr = _IpNewCfgGwAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 2, 5, 1, 2),
    _IpNewCfgGwAddr_Type()
)
ipNewCfgGwAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgGwAddr.setStatus("current")


class _IpNewCfgGwInterval_Type(Integer32):
    """Custom type ipNewCfgGwInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 60),
    )


_IpNewCfgGwInterval_Type.__name__ = "Integer32"
_IpNewCfgGwInterval_Object = MibTableColumn
ipNewCfgGwInterval = _IpNewCfgGwInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 2, 5, 1, 3),
    _IpNewCfgGwInterval_Type()
)
ipNewCfgGwInterval.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgGwInterval.setStatus("current")


class _IpNewCfgGwRetry_Type(Integer32):
    """Custom type ipNewCfgGwRetry based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 120),
    )


_IpNewCfgGwRetry_Type.__name__ = "Integer32"
_IpNewCfgGwRetry_Object = MibTableColumn
ipNewCfgGwRetry = _IpNewCfgGwRetry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 2, 5, 1, 4),
    _IpNewCfgGwRetry_Type()
)
ipNewCfgGwRetry.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgGwRetry.setStatus("current")


class _IpNewCfgGwState_Type(Integer32):
    """Custom type ipNewCfgGwState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_IpNewCfgGwState_Type.__name__ = "Integer32"
_IpNewCfgGwState_Object = MibTableColumn
ipNewCfgGwState = _IpNewCfgGwState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 2, 5, 1, 5),
    _IpNewCfgGwState_Type()
)
ipNewCfgGwState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgGwState.setStatus("current")


class _IpNewCfgGwDelete_Type(Integer32):
    """Custom type ipNewCfgGwDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_IpNewCfgGwDelete_Type.__name__ = "Integer32"
_IpNewCfgGwDelete_Object = MibTableColumn
ipNewCfgGwDelete = _IpNewCfgGwDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 2, 5, 1, 6),
    _IpNewCfgGwDelete_Type()
)
ipNewCfgGwDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgGwDelete.setStatus("current")


class _IpNewCfgGwArp_Type(Integer32):
    """Custom type ipNewCfgGwArp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_IpNewCfgGwArp_Type.__name__ = "Integer32"
_IpNewCfgGwArp_Object = MibTableColumn
ipNewCfgGwArp = _IpNewCfgGwArp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 2, 5, 1, 7),
    _IpNewCfgGwArp_Type()
)
ipNewCfgGwArp.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgGwArp.setStatus("current")
_IpStaticRouteCfg_ObjectIdentity = ObjectIdentity
ipStaticRouteCfg = _IpStaticRouteCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 3)
)
_IpStaticRouteTableMaxSize_Type = Integer32
_IpStaticRouteTableMaxSize_Object = MibScalar
ipStaticRouteTableMaxSize = _IpStaticRouteTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 3, 1),
    _IpStaticRouteTableMaxSize_Type()
)
ipStaticRouteTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipStaticRouteTableMaxSize.setStatus("current")
_IpCurCfgStaticRouteTable_Object = MibTable
ipCurCfgStaticRouteTable = _IpCurCfgStaticRouteTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 3, 2)
)
if mibBuilder.loadTexts:
    ipCurCfgStaticRouteTable.setStatus("current")
_IpCurCfgStaticRouteEntry_Object = MibTableRow
ipCurCfgStaticRouteEntry = _IpCurCfgStaticRouteEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 3, 2, 1)
)
ipCurCfgStaticRouteEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipCurCfgStaticRouteIndx"),
)
if mibBuilder.loadTexts:
    ipCurCfgStaticRouteEntry.setStatus("current")
_IpCurCfgStaticRouteIndx_Type = Integer32
_IpCurCfgStaticRouteIndx_Object = MibTableColumn
ipCurCfgStaticRouteIndx = _IpCurCfgStaticRouteIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 3, 2, 1, 1),
    _IpCurCfgStaticRouteIndx_Type()
)
ipCurCfgStaticRouteIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgStaticRouteIndx.setStatus("current")
_IpCurCfgStaticRouteDestIp_Type = IpAddress
_IpCurCfgStaticRouteDestIp_Object = MibTableColumn
ipCurCfgStaticRouteDestIp = _IpCurCfgStaticRouteDestIp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 3, 2, 1, 2),
    _IpCurCfgStaticRouteDestIp_Type()
)
ipCurCfgStaticRouteDestIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgStaticRouteDestIp.setStatus("current")
_IpCurCfgStaticRouteMask_Type = IpAddress
_IpCurCfgStaticRouteMask_Object = MibTableColumn
ipCurCfgStaticRouteMask = _IpCurCfgStaticRouteMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 3, 2, 1, 3),
    _IpCurCfgStaticRouteMask_Type()
)
ipCurCfgStaticRouteMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgStaticRouteMask.setStatus("current")
_IpCurCfgStaticRouteGateway_Type = IpAddress
_IpCurCfgStaticRouteGateway_Object = MibTableColumn
ipCurCfgStaticRouteGateway = _IpCurCfgStaticRouteGateway_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 3, 2, 1, 4),
    _IpCurCfgStaticRouteGateway_Type()
)
ipCurCfgStaticRouteGateway.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgStaticRouteGateway.setStatus("current")
_IpCurCfgStaticRouteInterface_Type = Integer32
_IpCurCfgStaticRouteInterface_Object = MibTableColumn
ipCurCfgStaticRouteInterface = _IpCurCfgStaticRouteInterface_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 3, 2, 1, 5),
    _IpCurCfgStaticRouteInterface_Type()
)
ipCurCfgStaticRouteInterface.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgStaticRouteInterface.setStatus("current")
_IpNewCfgStaticRouteTable_Object = MibTable
ipNewCfgStaticRouteTable = _IpNewCfgStaticRouteTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 3, 3)
)
if mibBuilder.loadTexts:
    ipNewCfgStaticRouteTable.setStatus("current")
_IpNewCfgStaticRouteEntry_Object = MibTableRow
ipNewCfgStaticRouteEntry = _IpNewCfgStaticRouteEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 3, 3, 1)
)
ipNewCfgStaticRouteEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipNewCfgStaticRouteIndx"),
)
if mibBuilder.loadTexts:
    ipNewCfgStaticRouteEntry.setStatus("current")
_IpNewCfgStaticRouteIndx_Type = Integer32
_IpNewCfgStaticRouteIndx_Object = MibTableColumn
ipNewCfgStaticRouteIndx = _IpNewCfgStaticRouteIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 3, 3, 1, 1),
    _IpNewCfgStaticRouteIndx_Type()
)
ipNewCfgStaticRouteIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipNewCfgStaticRouteIndx.setStatus("current")
_IpNewCfgStaticRouteDestIp_Type = IpAddress
_IpNewCfgStaticRouteDestIp_Object = MibTableColumn
ipNewCfgStaticRouteDestIp = _IpNewCfgStaticRouteDestIp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 3, 3, 1, 2),
    _IpNewCfgStaticRouteDestIp_Type()
)
ipNewCfgStaticRouteDestIp.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgStaticRouteDestIp.setStatus("current")
_IpNewCfgStaticRouteMask_Type = IpAddress
_IpNewCfgStaticRouteMask_Object = MibTableColumn
ipNewCfgStaticRouteMask = _IpNewCfgStaticRouteMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 3, 3, 1, 3),
    _IpNewCfgStaticRouteMask_Type()
)
ipNewCfgStaticRouteMask.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgStaticRouteMask.setStatus("current")
_IpNewCfgStaticRouteGateway_Type = IpAddress
_IpNewCfgStaticRouteGateway_Object = MibTableColumn
ipNewCfgStaticRouteGateway = _IpNewCfgStaticRouteGateway_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 3, 3, 1, 4),
    _IpNewCfgStaticRouteGateway_Type()
)
ipNewCfgStaticRouteGateway.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgStaticRouteGateway.setStatus("current")


class _IpNewCfgStaticRouteAction_Type(Integer32):
    """Custom type ipNewCfgStaticRouteAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_IpNewCfgStaticRouteAction_Type.__name__ = "Integer32"
_IpNewCfgStaticRouteAction_Object = MibTableColumn
ipNewCfgStaticRouteAction = _IpNewCfgStaticRouteAction_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 3, 3, 1, 5),
    _IpNewCfgStaticRouteAction_Type()
)
ipNewCfgStaticRouteAction.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgStaticRouteAction.setStatus("current")
_IpNewCfgStaticRouteInterface_Type = Integer32
_IpNewCfgStaticRouteInterface_Object = MibTableColumn
ipNewCfgStaticRouteInterface = _IpNewCfgStaticRouteInterface_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 3, 3, 1, 6),
    _IpNewCfgStaticRouteInterface_Type()
)
ipNewCfgStaticRouteInterface.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgStaticRouteInterface.setStatus("current")
_IpStaticRouteClearAllByDestIp_Type = IpAddress
_IpStaticRouteClearAllByDestIp_Object = MibScalar
ipStaticRouteClearAllByDestIp = _IpStaticRouteClearAllByDestIp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 3, 4),
    _IpStaticRouteClearAllByDestIp_Type()
)
ipStaticRouteClearAllByDestIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipStaticRouteClearAllByDestIp.setStatus("current")
_IpStaticRouteClearAllByGatewayIp_Type = IpAddress
_IpStaticRouteClearAllByGatewayIp_Object = MibScalar
ipStaticRouteClearAllByGatewayIp = _IpStaticRouteClearAllByGatewayIp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 3, 5),
    _IpStaticRouteClearAllByGatewayIp_Type()
)
ipStaticRouteClearAllByGatewayIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipStaticRouteClearAllByGatewayIp.setStatus("current")
_IpStaticRouteClearAllByInterface_Type = Integer32
_IpStaticRouteClearAllByInterface_Object = MibScalar
ipStaticRouteClearAllByInterface = _IpStaticRouteClearAllByInterface_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 3, 6),
    _IpStaticRouteClearAllByInterface_Type()
)
ipStaticRouteClearAllByInterface.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipStaticRouteClearAllByInterface.setStatus("current")


class _IpStaticRouteClearAll_Type(Integer32):
    """Custom type ipStaticRouteClearAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_IpStaticRouteClearAll_Type.__name__ = "Integer32"
_IpStaticRouteClearAll_Object = MibScalar
ipStaticRouteClearAll = _IpStaticRouteClearAll_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 3, 7),
    _IpStaticRouteClearAll_Type()
)
ipStaticRouteClearAll.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipStaticRouteClearAll.setStatus("current")
_IpStaticRouteCurPingInterval_Type = Integer32
_IpStaticRouteCurPingInterval_Object = MibScalar
ipStaticRouteCurPingInterval = _IpStaticRouteCurPingInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 3, 8),
    _IpStaticRouteCurPingInterval_Type()
)
ipStaticRouteCurPingInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipStaticRouteCurPingInterval.setStatus("current")
_IpStaticRouteNewPingInterval_Type = Integer32
_IpStaticRouteNewPingInterval_Object = MibScalar
ipStaticRouteNewPingInterval = _IpStaticRouteNewPingInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 3, 9),
    _IpStaticRouteNewPingInterval_Type()
)
ipStaticRouteNewPingInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipStaticRouteNewPingInterval.setStatus("current")
_IpStaticRouteCurPingRetries_Type = Integer32
_IpStaticRouteCurPingRetries_Object = MibScalar
ipStaticRouteCurPingRetries = _IpStaticRouteCurPingRetries_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 3, 10),
    _IpStaticRouteCurPingRetries_Type()
)
ipStaticRouteCurPingRetries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipStaticRouteCurPingRetries.setStatus("current")
_IpStaticRouteNewPingRetries_Type = Integer32
_IpStaticRouteNewPingRetries_Object = MibScalar
ipStaticRouteNewPingRetries = _IpStaticRouteNewPingRetries_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 3, 11),
    _IpStaticRouteNewPingRetries_Type()
)
ipStaticRouteNewPingRetries.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipStaticRouteNewPingRetries.setStatus("current")


class _IpStaticRouteCurEcmpHash_Type(Integer32):
    """Custom type ipStaticRouteCurEcmpHash based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("dipsip", 0),
          ("sip", 1))
    )


_IpStaticRouteCurEcmpHash_Type.__name__ = "Integer32"
_IpStaticRouteCurEcmpHash_Object = MibScalar
ipStaticRouteCurEcmpHash = _IpStaticRouteCurEcmpHash_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 3, 12),
    _IpStaticRouteCurEcmpHash_Type()
)
ipStaticRouteCurEcmpHash.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipStaticRouteCurEcmpHash.setStatus("current")


class _IpStaticRouteNewEcmpHash_Type(Integer32):
    """Custom type ipStaticRouteNewEcmpHash based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("dipsip", 0),
          ("sip", 1))
    )


_IpStaticRouteNewEcmpHash_Type.__name__ = "Integer32"
_IpStaticRouteNewEcmpHash_Object = MibScalar
ipStaticRouteNewEcmpHash = _IpStaticRouteNewEcmpHash_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 3, 13),
    _IpStaticRouteNewEcmpHash_Type()
)
ipStaticRouteNewEcmpHash.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipStaticRouteNewEcmpHash.setStatus("current")


class _IpStaticRouteCurHealthcheck_Type(Integer32):
    """Custom type ipStaticRouteCurHealthcheck based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_IpStaticRouteCurHealthcheck_Type.__name__ = "Integer32"
_IpStaticRouteCurHealthcheck_Object = MibScalar
ipStaticRouteCurHealthcheck = _IpStaticRouteCurHealthcheck_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 3, 16),
    _IpStaticRouteCurHealthcheck_Type()
)
ipStaticRouteCurHealthcheck.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipStaticRouteCurHealthcheck.setStatus("current")


class _IpStaticRouteNewHealthcheck_Type(Integer32):
    """Custom type ipStaticRouteNewHealthcheck based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_IpStaticRouteNewHealthcheck_Type.__name__ = "Integer32"
_IpStaticRouteNewHealthcheck_Object = MibScalar
ipStaticRouteNewHealthcheck = _IpStaticRouteNewHealthcheck_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 3, 17),
    _IpStaticRouteNewHealthcheck_Type()
)
ipStaticRouteNewHealthcheck.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipStaticRouteNewHealthcheck.setStatus("current")
_IpForwardCfg_ObjectIdentity = ObjectIdentity
ipForwardCfg = _IpForwardCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 4)
)
_IpFwdGeneralCfg_ObjectIdentity = ObjectIdentity
ipFwdGeneralCfg = _IpFwdGeneralCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 4, 1)
)


class _IpFwdCurCfgState_Type(Integer32):
    """Custom type ipFwdCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("on", 2),
          ("off", 3))
    )


_IpFwdCurCfgState_Type.__name__ = "Integer32"
_IpFwdCurCfgState_Object = MibScalar
ipFwdCurCfgState = _IpFwdCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 4, 1, 1),
    _IpFwdCurCfgState_Type()
)
ipFwdCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipFwdCurCfgState.setStatus("current")


class _IpFwdNewCfgState_Type(Integer32):
    """Custom type ipFwdNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("on", 2),
          ("off", 3))
    )


_IpFwdNewCfgState_Type.__name__ = "Integer32"
_IpFwdNewCfgState_Object = MibScalar
ipFwdNewCfgState = _IpFwdNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 4, 1, 2),
    _IpFwdNewCfgState_Type()
)
ipFwdNewCfgState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipFwdNewCfgState.setStatus("current")


class _IpFwdCurCfgDirectedBcast_Type(Integer32):
    """Custom type ipFwdCurCfgDirectedBcast based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_IpFwdCurCfgDirectedBcast_Type.__name__ = "Integer32"
_IpFwdCurCfgDirectedBcast_Object = MibScalar
ipFwdCurCfgDirectedBcast = _IpFwdCurCfgDirectedBcast_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 4, 1, 3),
    _IpFwdCurCfgDirectedBcast_Type()
)
ipFwdCurCfgDirectedBcast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipFwdCurCfgDirectedBcast.setStatus("current")


class _IpFwdNewCfgDirectedBcast_Type(Integer32):
    """Custom type ipFwdNewCfgDirectedBcast based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_IpFwdNewCfgDirectedBcast_Type.__name__ = "Integer32"
_IpFwdNewCfgDirectedBcast_Object = MibScalar
ipFwdNewCfgDirectedBcast = _IpFwdNewCfgDirectedBcast_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 4, 1, 4),
    _IpFwdNewCfgDirectedBcast_Type()
)
ipFwdNewCfgDirectedBcast.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipFwdNewCfgDirectedBcast.setStatus("current")


class _IpFwdCurCfgNoICMPRedirect_Type(Integer32):
    """Custom type ipFwdCurCfgNoICMPRedirect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_IpFwdCurCfgNoICMPRedirect_Type.__name__ = "Integer32"
_IpFwdCurCfgNoICMPRedirect_Object = MibScalar
ipFwdCurCfgNoICMPRedirect = _IpFwdCurCfgNoICMPRedirect_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 4, 1, 5),
    _IpFwdCurCfgNoICMPRedirect_Type()
)
ipFwdCurCfgNoICMPRedirect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipFwdCurCfgNoICMPRedirect.setStatus("current")


class _IpFwdNewCfgNoICMPRedirect_Type(Integer32):
    """Custom type ipFwdNewCfgNoICMPRedirect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_IpFwdNewCfgNoICMPRedirect_Type.__name__ = "Integer32"
_IpFwdNewCfgNoICMPRedirect_Object = MibScalar
ipFwdNewCfgNoICMPRedirect = _IpFwdNewCfgNoICMPRedirect_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 4, 1, 6),
    _IpFwdNewCfgNoICMPRedirect_Type()
)
ipFwdNewCfgNoICMPRedirect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipFwdNewCfgNoICMPRedirect.setStatus("current")


class _IpFwdCurCfgICMP6Redirect_Type(Integer32):
    """Custom type ipFwdCurCfgICMP6Redirect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_IpFwdCurCfgICMP6Redirect_Type.__name__ = "Integer32"
_IpFwdCurCfgICMP6Redirect_Object = MibScalar
ipFwdCurCfgICMP6Redirect = _IpFwdCurCfgICMP6Redirect_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 4, 1, 7),
    _IpFwdCurCfgICMP6Redirect_Type()
)
ipFwdCurCfgICMP6Redirect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipFwdCurCfgICMP6Redirect.setStatus("current")


class _IpFwdNewCfgICMP6Redirect_Type(Integer32):
    """Custom type ipFwdNewCfgICMP6Redirect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_IpFwdNewCfgICMP6Redirect_Type.__name__ = "Integer32"
_IpFwdNewCfgICMP6Redirect_Object = MibScalar
ipFwdNewCfgICMP6Redirect = _IpFwdNewCfgICMP6Redirect_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 4, 1, 8),
    _IpFwdNewCfgICMP6Redirect_Type()
)
ipFwdNewCfgICMP6Redirect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipFwdNewCfgICMP6Redirect.setStatus("current")
_VrrpCfg_ObjectIdentity = ObjectIdentity
vrrpCfg = _VrrpCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6)
)
_VrrpGeneral_ObjectIdentity = ObjectIdentity
vrrpGeneral = _VrrpGeneral_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 1)
)


class _VrrpCurCfgGenState_Type(Integer32):
    """Custom type vrrpCurCfgGenState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpCurCfgGenState_Type.__name__ = "Integer32"
_VrrpCurCfgGenState_Object = MibScalar
vrrpCurCfgGenState = _VrrpCurCfgGenState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 1, 1),
    _VrrpCurCfgGenState_Type()
)
vrrpCurCfgGenState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgGenState.setStatus("current")


class _VrrpNewCfgGenState_Type(Integer32):
    """Custom type vrrpNewCfgGenState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpNewCfgGenState_Type.__name__ = "Integer32"
_VrrpNewCfgGenState_Object = MibScalar
vrrpNewCfgGenState = _VrrpNewCfgGenState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 1, 2),
    _VrrpNewCfgGenState_Type()
)
vrrpNewCfgGenState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vrrpNewCfgGenState.setStatus("current")


class _VrrpCurCfgGenTckVirtRtrInc_Type(Integer32):
    """Custom type vrrpCurCfgGenTckVirtRtrInc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 254),
    )


_VrrpCurCfgGenTckVirtRtrInc_Type.__name__ = "Integer32"
_VrrpCurCfgGenTckVirtRtrInc_Object = MibScalar
vrrpCurCfgGenTckVirtRtrInc = _VrrpCurCfgGenTckVirtRtrInc_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 1, 3),
    _VrrpCurCfgGenTckVirtRtrInc_Type()
)
vrrpCurCfgGenTckVirtRtrInc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgGenTckVirtRtrInc.setStatus("current")


class _VrrpNewCfgGenTckVirtRtrInc_Type(Integer32):
    """Custom type vrrpNewCfgGenTckVirtRtrInc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 254),
    )


_VrrpNewCfgGenTckVirtRtrInc_Type.__name__ = "Integer32"
_VrrpNewCfgGenTckVirtRtrInc_Object = MibScalar
vrrpNewCfgGenTckVirtRtrInc = _VrrpNewCfgGenTckVirtRtrInc_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 1, 4),
    _VrrpNewCfgGenTckVirtRtrInc_Type()
)
vrrpNewCfgGenTckVirtRtrInc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vrrpNewCfgGenTckVirtRtrInc.setStatus("current")


class _VrrpCurCfgGenTckIpIntfInc_Type(Integer32):
    """Custom type vrrpCurCfgGenTckIpIntfInc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 254),
    )


_VrrpCurCfgGenTckIpIntfInc_Type.__name__ = "Integer32"
_VrrpCurCfgGenTckIpIntfInc_Object = MibScalar
vrrpCurCfgGenTckIpIntfInc = _VrrpCurCfgGenTckIpIntfInc_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 1, 5),
    _VrrpCurCfgGenTckIpIntfInc_Type()
)
vrrpCurCfgGenTckIpIntfInc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgGenTckIpIntfInc.setStatus("current")


class _VrrpNewCfgGenTckIpIntfInc_Type(Integer32):
    """Custom type vrrpNewCfgGenTckIpIntfInc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 254),
    )


_VrrpNewCfgGenTckIpIntfInc_Type.__name__ = "Integer32"
_VrrpNewCfgGenTckIpIntfInc_Object = MibScalar
vrrpNewCfgGenTckIpIntfInc = _VrrpNewCfgGenTckIpIntfInc_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 1, 6),
    _VrrpNewCfgGenTckIpIntfInc_Type()
)
vrrpNewCfgGenTckIpIntfInc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vrrpNewCfgGenTckIpIntfInc.setStatus("current")


class _VrrpCurCfgGenTckVlanPortInc_Type(Integer32):
    """Custom type vrrpCurCfgGenTckVlanPortInc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 254),
    )


_VrrpCurCfgGenTckVlanPortInc_Type.__name__ = "Integer32"
_VrrpCurCfgGenTckVlanPortInc_Object = MibScalar
vrrpCurCfgGenTckVlanPortInc = _VrrpCurCfgGenTckVlanPortInc_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 1, 7),
    _VrrpCurCfgGenTckVlanPortInc_Type()
)
vrrpCurCfgGenTckVlanPortInc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgGenTckVlanPortInc.setStatus("current")


class _VrrpNewCfgGenTckVlanPortInc_Type(Integer32):
    """Custom type vrrpNewCfgGenTckVlanPortInc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 254),
    )


_VrrpNewCfgGenTckVlanPortInc_Type.__name__ = "Integer32"
_VrrpNewCfgGenTckVlanPortInc_Object = MibScalar
vrrpNewCfgGenTckVlanPortInc = _VrrpNewCfgGenTckVlanPortInc_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 1, 8),
    _VrrpNewCfgGenTckVlanPortInc_Type()
)
vrrpNewCfgGenTckVlanPortInc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vrrpNewCfgGenTckVlanPortInc.setStatus("current")


class _VrrpCurCfgGenHoldoff_Type(Integer32):
    """Custom type vrrpCurCfgGenHoldoff based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_VrrpCurCfgGenHoldoff_Type.__name__ = "Integer32"
_VrrpCurCfgGenHoldoff_Object = MibScalar
vrrpCurCfgGenHoldoff = _VrrpCurCfgGenHoldoff_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 1, 19),
    _VrrpCurCfgGenHoldoff_Type()
)
vrrpCurCfgGenHoldoff.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgGenHoldoff.setStatus("current")


class _VrrpNewCfgGenHoldoff_Type(Integer32):
    """Custom type vrrpNewCfgGenHoldoff based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_VrrpNewCfgGenHoldoff_Type.__name__ = "Integer32"
_VrrpNewCfgGenHoldoff_Object = MibScalar
vrrpNewCfgGenHoldoff = _VrrpNewCfgGenHoldoff_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 1, 20),
    _VrrpNewCfgGenHoldoff_Type()
)
vrrpNewCfgGenHoldoff.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vrrpNewCfgGenHoldoff.setStatus("current")
_VrrpVirtRtrTableMaxSize_Type = Integer32
_VrrpVirtRtrTableMaxSize_Object = MibScalar
vrrpVirtRtrTableMaxSize = _VrrpVirtRtrTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 2),
    _VrrpVirtRtrTableMaxSize_Type()
)
vrrpVirtRtrTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpVirtRtrTableMaxSize.setStatus("current")
_VrrpCurCfgVirtRtrTable_Object = MibTable
vrrpCurCfgVirtRtrTable = _VrrpCurCfgVirtRtrTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 3)
)
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrTable.setStatus("current")
_VrrpCurCfgVirtRtrTableEntry_Object = MibTableRow
vrrpCurCfgVirtRtrTableEntry = _VrrpCurCfgVirtRtrTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 3, 1)
)
vrrpCurCfgVirtRtrTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vrrpCurCfgVirtRtrIndx"),
)
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrTableEntry.setStatus("current")
_VrrpCurCfgVirtRtrIndx_Type = Integer32
_VrrpCurCfgVirtRtrIndx_Object = MibTableColumn
vrrpCurCfgVirtRtrIndx = _VrrpCurCfgVirtRtrIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 3, 1, 1),
    _VrrpCurCfgVirtRtrIndx_Type()
)
vrrpCurCfgVirtRtrIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrIndx.setStatus("current")


class _VrrpCurCfgVirtRtrID_Type(Integer32):
    """Custom type vrrpCurCfgVirtRtrID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_VrrpCurCfgVirtRtrID_Type.__name__ = "Integer32"
_VrrpCurCfgVirtRtrID_Object = MibTableColumn
vrrpCurCfgVirtRtrID = _VrrpCurCfgVirtRtrID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 3, 1, 2),
    _VrrpCurCfgVirtRtrID_Type()
)
vrrpCurCfgVirtRtrID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrID.setStatus("current")
_VrrpCurCfgVirtRtrAddr_Type = IpAddress
_VrrpCurCfgVirtRtrAddr_Object = MibTableColumn
vrrpCurCfgVirtRtrAddr = _VrrpCurCfgVirtRtrAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 3, 1, 3),
    _VrrpCurCfgVirtRtrAddr_Type()
)
vrrpCurCfgVirtRtrAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrAddr.setStatus("current")
_VrrpCurCfgVirtRtrIfIndex_Type = Integer32
_VrrpCurCfgVirtRtrIfIndex_Object = MibTableColumn
vrrpCurCfgVirtRtrIfIndex = _VrrpCurCfgVirtRtrIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 3, 1, 4),
    _VrrpCurCfgVirtRtrIfIndex_Type()
)
vrrpCurCfgVirtRtrIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrIfIndex.setStatus("current")


class _VrrpCurCfgVirtRtrInterval_Type(Integer32):
    """Custom type vrrpCurCfgVirtRtrInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_VrrpCurCfgVirtRtrInterval_Type.__name__ = "Integer32"
_VrrpCurCfgVirtRtrInterval_Object = MibTableColumn
vrrpCurCfgVirtRtrInterval = _VrrpCurCfgVirtRtrInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 3, 1, 5),
    _VrrpCurCfgVirtRtrInterval_Type()
)
vrrpCurCfgVirtRtrInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrInterval.setStatus("current")


class _VrrpCurCfgVirtRtrPriority_Type(Integer32):
    """Custom type vrrpCurCfgVirtRtrPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 254),
    )


_VrrpCurCfgVirtRtrPriority_Type.__name__ = "Integer32"
_VrrpCurCfgVirtRtrPriority_Object = MibTableColumn
vrrpCurCfgVirtRtrPriority = _VrrpCurCfgVirtRtrPriority_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 3, 1, 6),
    _VrrpCurCfgVirtRtrPriority_Type()
)
vrrpCurCfgVirtRtrPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrPriority.setStatus("current")


class _VrrpCurCfgVirtRtrPreempt_Type(Integer32):
    """Custom type vrrpCurCfgVirtRtrPreempt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpCurCfgVirtRtrPreempt_Type.__name__ = "Integer32"
_VrrpCurCfgVirtRtrPreempt_Object = MibTableColumn
vrrpCurCfgVirtRtrPreempt = _VrrpCurCfgVirtRtrPreempt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 3, 1, 7),
    _VrrpCurCfgVirtRtrPreempt_Type()
)
vrrpCurCfgVirtRtrPreempt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrPreempt.setStatus("current")


class _VrrpCurCfgVirtRtrTckVirtRtr_Type(Integer32):
    """Custom type vrrpCurCfgVirtRtrTckVirtRtr based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpCurCfgVirtRtrTckVirtRtr_Type.__name__ = "Integer32"
_VrrpCurCfgVirtRtrTckVirtRtr_Object = MibTableColumn
vrrpCurCfgVirtRtrTckVirtRtr = _VrrpCurCfgVirtRtrTckVirtRtr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 3, 1, 9),
    _VrrpCurCfgVirtRtrTckVirtRtr_Type()
)
vrrpCurCfgVirtRtrTckVirtRtr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrTckVirtRtr.setStatus("current")


class _VrrpCurCfgVirtRtrTckIpIntf_Type(Integer32):
    """Custom type vrrpCurCfgVirtRtrTckIpIntf based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpCurCfgVirtRtrTckIpIntf_Type.__name__ = "Integer32"
_VrrpCurCfgVirtRtrTckIpIntf_Object = MibTableColumn
vrrpCurCfgVirtRtrTckIpIntf = _VrrpCurCfgVirtRtrTckIpIntf_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 3, 1, 10),
    _VrrpCurCfgVirtRtrTckIpIntf_Type()
)
vrrpCurCfgVirtRtrTckIpIntf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrTckIpIntf.setStatus("current")


class _VrrpCurCfgVirtRtrTckVlanPort_Type(Integer32):
    """Custom type vrrpCurCfgVirtRtrTckVlanPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpCurCfgVirtRtrTckVlanPort_Type.__name__ = "Integer32"
_VrrpCurCfgVirtRtrTckVlanPort_Object = MibTableColumn
vrrpCurCfgVirtRtrTckVlanPort = _VrrpCurCfgVirtRtrTckVlanPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 3, 1, 15),
    _VrrpCurCfgVirtRtrTckVlanPort_Type()
)
vrrpCurCfgVirtRtrTckVlanPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrTckVlanPort.setStatus("current")


class _VrrpCurCfgVirtRtrState_Type(Integer32):
    """Custom type vrrpCurCfgVirtRtrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpCurCfgVirtRtrState_Type.__name__ = "Integer32"
_VrrpCurCfgVirtRtrState_Object = MibTableColumn
vrrpCurCfgVirtRtrState = _VrrpCurCfgVirtRtrState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 3, 1, 16),
    _VrrpCurCfgVirtRtrState_Type()
)
vrrpCurCfgVirtRtrState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrState.setStatus("current")


class _VrrpCurCfgVirtRtrFastAdvertisement_Type(Integer32):
    """Custom type vrrpCurCfgVirtRtrFastAdvertisement based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpCurCfgVirtRtrFastAdvertisement_Type.__name__ = "Integer32"
_VrrpCurCfgVirtRtrFastAdvertisement_Object = MibTableColumn
vrrpCurCfgVirtRtrFastAdvertisement = _VrrpCurCfgVirtRtrFastAdvertisement_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 3, 1, 17),
    _VrrpCurCfgVirtRtrFastAdvertisement_Type()
)
vrrpCurCfgVirtRtrFastAdvertisement.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrFastAdvertisement.setStatus("current")


class _VrrpCurCfgVirtRtrPreDelay_Type(Integer32):
    """Custom type vrrpCurCfgVirtRtrPreDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_VrrpCurCfgVirtRtrPreDelay_Type.__name__ = "Integer32"
_VrrpCurCfgVirtRtrPreDelay_Object = MibTableColumn
vrrpCurCfgVirtRtrPreDelay = _VrrpCurCfgVirtRtrPreDelay_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 3, 1, 18),
    _VrrpCurCfgVirtRtrPreDelay_Type()
)
vrrpCurCfgVirtRtrPreDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrPreDelay.setStatus("current")
_VrrpNewCfgVirtRtrTable_Object = MibTable
vrrpNewCfgVirtRtrTable = _VrrpNewCfgVirtRtrTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 4)
)
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrTable.setStatus("current")
_VrrpNewCfgVirtRtrTableEntry_Object = MibTableRow
vrrpNewCfgVirtRtrTableEntry = _VrrpNewCfgVirtRtrTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 4, 1)
)
vrrpNewCfgVirtRtrTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vrrpNewCfgVirtRtrIndx"),
)
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrTableEntry.setStatus("current")
_VrrpNewCfgVirtRtrIndx_Type = Integer32
_VrrpNewCfgVirtRtrIndx_Object = MibTableColumn
vrrpNewCfgVirtRtrIndx = _VrrpNewCfgVirtRtrIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 4, 1, 1),
    _VrrpNewCfgVirtRtrIndx_Type()
)
vrrpNewCfgVirtRtrIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrIndx.setStatus("current")


class _VrrpNewCfgVirtRtrID_Type(Integer32):
    """Custom type vrrpNewCfgVirtRtrID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_VrrpNewCfgVirtRtrID_Type.__name__ = "Integer32"
_VrrpNewCfgVirtRtrID_Object = MibTableColumn
vrrpNewCfgVirtRtrID = _VrrpNewCfgVirtRtrID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 4, 1, 2),
    _VrrpNewCfgVirtRtrID_Type()
)
vrrpNewCfgVirtRtrID.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrID.setStatus("current")
_VrrpNewCfgVirtRtrAddr_Type = IpAddress
_VrrpNewCfgVirtRtrAddr_Object = MibTableColumn
vrrpNewCfgVirtRtrAddr = _VrrpNewCfgVirtRtrAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 4, 1, 3),
    _VrrpNewCfgVirtRtrAddr_Type()
)
vrrpNewCfgVirtRtrAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrAddr.setStatus("current")
_VrrpNewCfgVirtRtrIfIndex_Type = Integer32
_VrrpNewCfgVirtRtrIfIndex_Object = MibTableColumn
vrrpNewCfgVirtRtrIfIndex = _VrrpNewCfgVirtRtrIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 4, 1, 4),
    _VrrpNewCfgVirtRtrIfIndex_Type()
)
vrrpNewCfgVirtRtrIfIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrIfIndex.setStatus("current")


class _VrrpNewCfgVirtRtrInterval_Type(Integer32):
    """Custom type vrrpNewCfgVirtRtrInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_VrrpNewCfgVirtRtrInterval_Type.__name__ = "Integer32"
_VrrpNewCfgVirtRtrInterval_Object = MibTableColumn
vrrpNewCfgVirtRtrInterval = _VrrpNewCfgVirtRtrInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 4, 1, 5),
    _VrrpNewCfgVirtRtrInterval_Type()
)
vrrpNewCfgVirtRtrInterval.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrInterval.setStatus("current")


class _VrrpNewCfgVirtRtrPriority_Type(Integer32):
    """Custom type vrrpNewCfgVirtRtrPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 254),
    )


_VrrpNewCfgVirtRtrPriority_Type.__name__ = "Integer32"
_VrrpNewCfgVirtRtrPriority_Object = MibTableColumn
vrrpNewCfgVirtRtrPriority = _VrrpNewCfgVirtRtrPriority_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 4, 1, 6),
    _VrrpNewCfgVirtRtrPriority_Type()
)
vrrpNewCfgVirtRtrPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrPriority.setStatus("current")


class _VrrpNewCfgVirtRtrPreempt_Type(Integer32):
    """Custom type vrrpNewCfgVirtRtrPreempt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpNewCfgVirtRtrPreempt_Type.__name__ = "Integer32"
_VrrpNewCfgVirtRtrPreempt_Object = MibTableColumn
vrrpNewCfgVirtRtrPreempt = _VrrpNewCfgVirtRtrPreempt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 4, 1, 7),
    _VrrpNewCfgVirtRtrPreempt_Type()
)
vrrpNewCfgVirtRtrPreempt.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrPreempt.setStatus("current")


class _VrrpNewCfgVirtRtrDelete_Type(Integer32):
    """Custom type vrrpNewCfgVirtRtrDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_VrrpNewCfgVirtRtrDelete_Type.__name__ = "Integer32"
_VrrpNewCfgVirtRtrDelete_Object = MibTableColumn
vrrpNewCfgVirtRtrDelete = _VrrpNewCfgVirtRtrDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 4, 1, 8),
    _VrrpNewCfgVirtRtrDelete_Type()
)
vrrpNewCfgVirtRtrDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrDelete.setStatus("current")


class _VrrpNewCfgVirtRtrTckVirtRtr_Type(Integer32):
    """Custom type vrrpNewCfgVirtRtrTckVirtRtr based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpNewCfgVirtRtrTckVirtRtr_Type.__name__ = "Integer32"
_VrrpNewCfgVirtRtrTckVirtRtr_Object = MibTableColumn
vrrpNewCfgVirtRtrTckVirtRtr = _VrrpNewCfgVirtRtrTckVirtRtr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 4, 1, 10),
    _VrrpNewCfgVirtRtrTckVirtRtr_Type()
)
vrrpNewCfgVirtRtrTckVirtRtr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrTckVirtRtr.setStatus("current")


class _VrrpNewCfgVirtRtrTckIpIntf_Type(Integer32):
    """Custom type vrrpNewCfgVirtRtrTckIpIntf based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpNewCfgVirtRtrTckIpIntf_Type.__name__ = "Integer32"
_VrrpNewCfgVirtRtrTckIpIntf_Object = MibTableColumn
vrrpNewCfgVirtRtrTckIpIntf = _VrrpNewCfgVirtRtrTckIpIntf_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 4, 1, 11),
    _VrrpNewCfgVirtRtrTckIpIntf_Type()
)
vrrpNewCfgVirtRtrTckIpIntf.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrTckIpIntf.setStatus("current")


class _VrrpNewCfgVirtRtrTckVlanPort_Type(Integer32):
    """Custom type vrrpNewCfgVirtRtrTckVlanPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpNewCfgVirtRtrTckVlanPort_Type.__name__ = "Integer32"
_VrrpNewCfgVirtRtrTckVlanPort_Object = MibTableColumn
vrrpNewCfgVirtRtrTckVlanPort = _VrrpNewCfgVirtRtrTckVlanPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 4, 1, 12),
    _VrrpNewCfgVirtRtrTckVlanPort_Type()
)
vrrpNewCfgVirtRtrTckVlanPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrTckVlanPort.setStatus("current")


class _VrrpNewCfgVirtRtrState_Type(Integer32):
    """Custom type vrrpNewCfgVirtRtrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpNewCfgVirtRtrState_Type.__name__ = "Integer32"
_VrrpNewCfgVirtRtrState_Object = MibTableColumn
vrrpNewCfgVirtRtrState = _VrrpNewCfgVirtRtrState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 4, 1, 17),
    _VrrpNewCfgVirtRtrState_Type()
)
vrrpNewCfgVirtRtrState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrState.setStatus("current")


class _VrrpNewCfgVirtRtrFastAdvertisement_Type(Integer32):
    """Custom type vrrpNewCfgVirtRtrFastAdvertisement based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpNewCfgVirtRtrFastAdvertisement_Type.__name__ = "Integer32"
_VrrpNewCfgVirtRtrFastAdvertisement_Object = MibTableColumn
vrrpNewCfgVirtRtrFastAdvertisement = _VrrpNewCfgVirtRtrFastAdvertisement_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 4, 1, 18),
    _VrrpNewCfgVirtRtrFastAdvertisement_Type()
)
vrrpNewCfgVirtRtrFastAdvertisement.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrFastAdvertisement.setStatus("current")


class _VrrpNewCfgVirtRtrPreDelay_Type(Integer32):
    """Custom type vrrpNewCfgVirtRtrPreDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_VrrpNewCfgVirtRtrPreDelay_Type.__name__ = "Integer32"
_VrrpNewCfgVirtRtrPreDelay_Object = MibTableColumn
vrrpNewCfgVirtRtrPreDelay = _VrrpNewCfgVirtRtrPreDelay_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 4, 1, 19),
    _VrrpNewCfgVirtRtrPreDelay_Type()
)
vrrpNewCfgVirtRtrPreDelay.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrPreDelay.setStatus("current")
_VrrpIfTableMaxSize_Type = Integer32
_VrrpIfTableMaxSize_Object = MibScalar
vrrpIfTableMaxSize = _VrrpIfTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 5),
    _VrrpIfTableMaxSize_Type()
)
vrrpIfTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpIfTableMaxSize.setStatus("current")
_VrrpCurCfgIfTable_Object = MibTable
vrrpCurCfgIfTable = _VrrpCurCfgIfTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 6)
)
if mibBuilder.loadTexts:
    vrrpCurCfgIfTable.setStatus("current")
_VrrpCurCfgIfTableEntry_Object = MibTableRow
vrrpCurCfgIfTableEntry = _VrrpCurCfgIfTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 6, 1)
)
vrrpCurCfgIfTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vrrpCurCfgIfIndx"),
)
if mibBuilder.loadTexts:
    vrrpCurCfgIfTableEntry.setStatus("current")
_VrrpCurCfgIfIndx_Type = Integer32
_VrrpCurCfgIfIndx_Object = MibTableColumn
vrrpCurCfgIfIndx = _VrrpCurCfgIfIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 6, 1, 1),
    _VrrpCurCfgIfIndx_Type()
)
vrrpCurCfgIfIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgIfIndx.setStatus("current")


class _VrrpCurCfgIfAuthType_Type(Integer32):
    """Custom type vrrpCurCfgIfAuthType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("simple-text-password", 2))
    )


_VrrpCurCfgIfAuthType_Type.__name__ = "Integer32"
_VrrpCurCfgIfAuthType_Object = MibTableColumn
vrrpCurCfgIfAuthType = _VrrpCurCfgIfAuthType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 6, 1, 2),
    _VrrpCurCfgIfAuthType_Type()
)
vrrpCurCfgIfAuthType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgIfAuthType.setStatus("current")


class _VrrpCurCfgIfPasswd_Type(DisplayString):
    """Custom type vrrpCurCfgIfPasswd based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 7),
    )


_VrrpCurCfgIfPasswd_Type.__name__ = "DisplayString"
_VrrpCurCfgIfPasswd_Object = MibTableColumn
vrrpCurCfgIfPasswd = _VrrpCurCfgIfPasswd_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 6, 1, 3),
    _VrrpCurCfgIfPasswd_Type()
)
vrrpCurCfgIfPasswd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgIfPasswd.setStatus("current")
_VrrpNewCfgIfTable_Object = MibTable
vrrpNewCfgIfTable = _VrrpNewCfgIfTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 7)
)
if mibBuilder.loadTexts:
    vrrpNewCfgIfTable.setStatus("current")
_VrrpNewCfgIfTableEntry_Object = MibTableRow
vrrpNewCfgIfTableEntry = _VrrpNewCfgIfTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 7, 1)
)
vrrpNewCfgIfTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vrrpNewCfgIfIndx"),
)
if mibBuilder.loadTexts:
    vrrpNewCfgIfTableEntry.setStatus("current")
_VrrpNewCfgIfIndx_Type = Integer32
_VrrpNewCfgIfIndx_Object = MibTableColumn
vrrpNewCfgIfIndx = _VrrpNewCfgIfIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 7, 1, 1),
    _VrrpNewCfgIfIndx_Type()
)
vrrpNewCfgIfIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpNewCfgIfIndx.setStatus("current")


class _VrrpNewCfgIfAuthType_Type(Integer32):
    """Custom type vrrpNewCfgIfAuthType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("simple-text-password", 2))
    )


_VrrpNewCfgIfAuthType_Type.__name__ = "Integer32"
_VrrpNewCfgIfAuthType_Object = MibTableColumn
vrrpNewCfgIfAuthType = _VrrpNewCfgIfAuthType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 7, 1, 2),
    _VrrpNewCfgIfAuthType_Type()
)
vrrpNewCfgIfAuthType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgIfAuthType.setStatus("current")


class _VrrpNewCfgIfPasswd_Type(DisplayString):
    """Custom type vrrpNewCfgIfPasswd based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_VrrpNewCfgIfPasswd_Type.__name__ = "DisplayString"
_VrrpNewCfgIfPasswd_Object = MibTableColumn
vrrpNewCfgIfPasswd = _VrrpNewCfgIfPasswd_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 7, 1, 3),
    _VrrpNewCfgIfPasswd_Type()
)
vrrpNewCfgIfPasswd.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgIfPasswd.setStatus("current")


class _VrrpNewCfgIfDelete_Type(Integer32):
    """Custom type vrrpNewCfgIfDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_VrrpNewCfgIfDelete_Type.__name__ = "Integer32"
_VrrpNewCfgIfDelete_Object = MibTableColumn
vrrpNewCfgIfDelete = _VrrpNewCfgIfDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 7, 1, 4),
    _VrrpNewCfgIfDelete_Type()
)
vrrpNewCfgIfDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgIfDelete.setStatus("current")
_VrrpVirtRtrGrpTableMaxSize_Type = Integer32
_VrrpVirtRtrGrpTableMaxSize_Object = MibScalar
vrrpVirtRtrGrpTableMaxSize = _VrrpVirtRtrGrpTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 8),
    _VrrpVirtRtrGrpTableMaxSize_Type()
)
vrrpVirtRtrGrpTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpVirtRtrGrpTableMaxSize.setStatus("current")
_VrrpCurCfgVirtRtrGrpTable_Object = MibTable
vrrpCurCfgVirtRtrGrpTable = _VrrpCurCfgVirtRtrGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 9)
)
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrGrpTable.setStatus("current")
_VrrpCurCfgVirtRtrGrpTableEntry_Object = MibTableRow
vrrpCurCfgVirtRtrGrpTableEntry = _VrrpCurCfgVirtRtrGrpTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 9, 1)
)
vrrpCurCfgVirtRtrGrpTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vrrpCurCfgVirtRtrGrpIndx"),
)
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrGrpTableEntry.setStatus("current")
_VrrpCurCfgVirtRtrGrpIndx_Type = Integer32
_VrrpCurCfgVirtRtrGrpIndx_Object = MibTableColumn
vrrpCurCfgVirtRtrGrpIndx = _VrrpCurCfgVirtRtrGrpIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 9, 1, 1),
    _VrrpCurCfgVirtRtrGrpIndx_Type()
)
vrrpCurCfgVirtRtrGrpIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrGrpIndx.setStatus("current")


class _VrrpCurCfgVirtRtrGrpID_Type(Integer32):
    """Custom type vrrpCurCfgVirtRtrGrpID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_VrrpCurCfgVirtRtrGrpID_Type.__name__ = "Integer32"
_VrrpCurCfgVirtRtrGrpID_Object = MibTableColumn
vrrpCurCfgVirtRtrGrpID = _VrrpCurCfgVirtRtrGrpID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 9, 1, 2),
    _VrrpCurCfgVirtRtrGrpID_Type()
)
vrrpCurCfgVirtRtrGrpID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrGrpID.setStatus("current")
_VrrpCurCfgVirtRtrGrpIfIndex_Type = Integer32
_VrrpCurCfgVirtRtrGrpIfIndex_Object = MibTableColumn
vrrpCurCfgVirtRtrGrpIfIndex = _VrrpCurCfgVirtRtrGrpIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 9, 1, 3),
    _VrrpCurCfgVirtRtrGrpIfIndex_Type()
)
vrrpCurCfgVirtRtrGrpIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrGrpIfIndex.setStatus("current")


class _VrrpCurCfgVirtRtrGrpInterval_Type(Integer32):
    """Custom type vrrpCurCfgVirtRtrGrpInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_VrrpCurCfgVirtRtrGrpInterval_Type.__name__ = "Integer32"
_VrrpCurCfgVirtRtrGrpInterval_Object = MibTableColumn
vrrpCurCfgVirtRtrGrpInterval = _VrrpCurCfgVirtRtrGrpInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 9, 1, 4),
    _VrrpCurCfgVirtRtrGrpInterval_Type()
)
vrrpCurCfgVirtRtrGrpInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrGrpInterval.setStatus("current")


class _VrrpCurCfgVirtRtrGrpPriority_Type(Integer32):
    """Custom type vrrpCurCfgVirtRtrGrpPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 254),
    )


_VrrpCurCfgVirtRtrGrpPriority_Type.__name__ = "Integer32"
_VrrpCurCfgVirtRtrGrpPriority_Object = MibTableColumn
vrrpCurCfgVirtRtrGrpPriority = _VrrpCurCfgVirtRtrGrpPriority_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 9, 1, 5),
    _VrrpCurCfgVirtRtrGrpPriority_Type()
)
vrrpCurCfgVirtRtrGrpPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrGrpPriority.setStatus("current")


class _VrrpCurCfgVirtRtrGrpPreempt_Type(Integer32):
    """Custom type vrrpCurCfgVirtRtrGrpPreempt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpCurCfgVirtRtrGrpPreempt_Type.__name__ = "Integer32"
_VrrpCurCfgVirtRtrGrpPreempt_Object = MibTableColumn
vrrpCurCfgVirtRtrGrpPreempt = _VrrpCurCfgVirtRtrGrpPreempt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 9, 1, 6),
    _VrrpCurCfgVirtRtrGrpPreempt_Type()
)
vrrpCurCfgVirtRtrGrpPreempt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrGrpPreempt.setStatus("current")


class _VrrpCurCfgVirtRtrGrpState_Type(Integer32):
    """Custom type vrrpCurCfgVirtRtrGrpState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpCurCfgVirtRtrGrpState_Type.__name__ = "Integer32"
_VrrpCurCfgVirtRtrGrpState_Object = MibTableColumn
vrrpCurCfgVirtRtrGrpState = _VrrpCurCfgVirtRtrGrpState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 9, 1, 7),
    _VrrpCurCfgVirtRtrGrpState_Type()
)
vrrpCurCfgVirtRtrGrpState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrGrpState.setStatus("current")


class _VrrpCurCfgVirtRtrGrpTckIpIntf_Type(Integer32):
    """Custom type vrrpCurCfgVirtRtrGrpTckIpIntf based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpCurCfgVirtRtrGrpTckIpIntf_Type.__name__ = "Integer32"
_VrrpCurCfgVirtRtrGrpTckIpIntf_Object = MibTableColumn
vrrpCurCfgVirtRtrGrpTckIpIntf = _VrrpCurCfgVirtRtrGrpTckIpIntf_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 9, 1, 10),
    _VrrpCurCfgVirtRtrGrpTckIpIntf_Type()
)
vrrpCurCfgVirtRtrGrpTckIpIntf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrGrpTckIpIntf.setStatus("current")


class _VrrpCurCfgVirtRtrGrpTckVlanPort_Type(Integer32):
    """Custom type vrrpCurCfgVirtRtrGrpTckVlanPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpCurCfgVirtRtrGrpTckVlanPort_Type.__name__ = "Integer32"
_VrrpCurCfgVirtRtrGrpTckVlanPort_Object = MibTableColumn
vrrpCurCfgVirtRtrGrpTckVlanPort = _VrrpCurCfgVirtRtrGrpTckVlanPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 9, 1, 11),
    _VrrpCurCfgVirtRtrGrpTckVlanPort_Type()
)
vrrpCurCfgVirtRtrGrpTckVlanPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrGrpTckVlanPort.setStatus("current")


class _VrrpCurCfgVirtRtrGrpFastAdvertisement_Type(Integer32):
    """Custom type vrrpCurCfgVirtRtrGrpFastAdvertisement based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpCurCfgVirtRtrGrpFastAdvertisement_Type.__name__ = "Integer32"
_VrrpCurCfgVirtRtrGrpFastAdvertisement_Object = MibTableColumn
vrrpCurCfgVirtRtrGrpFastAdvertisement = _VrrpCurCfgVirtRtrGrpFastAdvertisement_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 9, 1, 16),
    _VrrpCurCfgVirtRtrGrpFastAdvertisement_Type()
)
vrrpCurCfgVirtRtrGrpFastAdvertisement.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrGrpFastAdvertisement.setStatus("current")


class _VrrpCurCfgVirtRtrGrpPredelay_Type(Integer32):
    """Custom type vrrpCurCfgVirtRtrGrpPredelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_VrrpCurCfgVirtRtrGrpPredelay_Type.__name__ = "Integer32"
_VrrpCurCfgVirtRtrGrpPredelay_Object = MibTableColumn
vrrpCurCfgVirtRtrGrpPredelay = _VrrpCurCfgVirtRtrGrpPredelay_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 9, 1, 21),
    _VrrpCurCfgVirtRtrGrpPredelay_Type()
)
vrrpCurCfgVirtRtrGrpPredelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrGrpPredelay.setStatus("current")
_VrrpNewCfgVirtRtrGrpTable_Object = MibTable
vrrpNewCfgVirtRtrGrpTable = _VrrpNewCfgVirtRtrGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 10)
)
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrGrpTable.setStatus("current")
_VrrpNewCfgVirtRtrGrpTableEntry_Object = MibTableRow
vrrpNewCfgVirtRtrGrpTableEntry = _VrrpNewCfgVirtRtrGrpTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 10, 1)
)
vrrpNewCfgVirtRtrGrpTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vrrpNewCfgVirtRtrGrpIndx"),
)
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrGrpTableEntry.setStatus("current")
_VrrpNewCfgVirtRtrGrpIndx_Type = Integer32
_VrrpNewCfgVirtRtrGrpIndx_Object = MibTableColumn
vrrpNewCfgVirtRtrGrpIndx = _VrrpNewCfgVirtRtrGrpIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 10, 1, 1),
    _VrrpNewCfgVirtRtrGrpIndx_Type()
)
vrrpNewCfgVirtRtrGrpIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrGrpIndx.setStatus("current")


class _VrrpNewCfgVirtRtrGrpID_Type(Integer32):
    """Custom type vrrpNewCfgVirtRtrGrpID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_VrrpNewCfgVirtRtrGrpID_Type.__name__ = "Integer32"
_VrrpNewCfgVirtRtrGrpID_Object = MibTableColumn
vrrpNewCfgVirtRtrGrpID = _VrrpNewCfgVirtRtrGrpID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 10, 1, 2),
    _VrrpNewCfgVirtRtrGrpID_Type()
)
vrrpNewCfgVirtRtrGrpID.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrGrpID.setStatus("current")
_VrrpNewCfgVirtRtrGrpIfIndex_Type = Integer32
_VrrpNewCfgVirtRtrGrpIfIndex_Object = MibTableColumn
vrrpNewCfgVirtRtrGrpIfIndex = _VrrpNewCfgVirtRtrGrpIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 10, 1, 3),
    _VrrpNewCfgVirtRtrGrpIfIndex_Type()
)
vrrpNewCfgVirtRtrGrpIfIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrGrpIfIndex.setStatus("current")


class _VrrpNewCfgVirtRtrGrpInterval_Type(Integer32):
    """Custom type vrrpNewCfgVirtRtrGrpInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_VrrpNewCfgVirtRtrGrpInterval_Type.__name__ = "Integer32"
_VrrpNewCfgVirtRtrGrpInterval_Object = MibTableColumn
vrrpNewCfgVirtRtrGrpInterval = _VrrpNewCfgVirtRtrGrpInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 10, 1, 4),
    _VrrpNewCfgVirtRtrGrpInterval_Type()
)
vrrpNewCfgVirtRtrGrpInterval.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrGrpInterval.setStatus("current")


class _VrrpNewCfgVirtRtrGrpPriority_Type(Integer32):
    """Custom type vrrpNewCfgVirtRtrGrpPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 254),
    )


_VrrpNewCfgVirtRtrGrpPriority_Type.__name__ = "Integer32"
_VrrpNewCfgVirtRtrGrpPriority_Object = MibTableColumn
vrrpNewCfgVirtRtrGrpPriority = _VrrpNewCfgVirtRtrGrpPriority_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 10, 1, 5),
    _VrrpNewCfgVirtRtrGrpPriority_Type()
)
vrrpNewCfgVirtRtrGrpPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrGrpPriority.setStatus("current")


class _VrrpNewCfgVirtRtrGrpPreempt_Type(Integer32):
    """Custom type vrrpNewCfgVirtRtrGrpPreempt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpNewCfgVirtRtrGrpPreempt_Type.__name__ = "Integer32"
_VrrpNewCfgVirtRtrGrpPreempt_Object = MibTableColumn
vrrpNewCfgVirtRtrGrpPreempt = _VrrpNewCfgVirtRtrGrpPreempt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 10, 1, 6),
    _VrrpNewCfgVirtRtrGrpPreempt_Type()
)
vrrpNewCfgVirtRtrGrpPreempt.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrGrpPreempt.setStatus("current")


class _VrrpNewCfgVirtRtrGrpState_Type(Integer32):
    """Custom type vrrpNewCfgVirtRtrGrpState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpNewCfgVirtRtrGrpState_Type.__name__ = "Integer32"
_VrrpNewCfgVirtRtrGrpState_Object = MibTableColumn
vrrpNewCfgVirtRtrGrpState = _VrrpNewCfgVirtRtrGrpState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 10, 1, 7),
    _VrrpNewCfgVirtRtrGrpState_Type()
)
vrrpNewCfgVirtRtrGrpState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrGrpState.setStatus("current")


class _VrrpNewCfgVirtRtrGrpDelete_Type(Integer32):
    """Custom type vrrpNewCfgVirtRtrGrpDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_VrrpNewCfgVirtRtrGrpDelete_Type.__name__ = "Integer32"
_VrrpNewCfgVirtRtrGrpDelete_Object = MibTableColumn
vrrpNewCfgVirtRtrGrpDelete = _VrrpNewCfgVirtRtrGrpDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 10, 1, 8),
    _VrrpNewCfgVirtRtrGrpDelete_Type()
)
vrrpNewCfgVirtRtrGrpDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrGrpDelete.setStatus("current")


class _VrrpNewCfgVirtRtrGrpTckIpIntf_Type(Integer32):
    """Custom type vrrpNewCfgVirtRtrGrpTckIpIntf based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpNewCfgVirtRtrGrpTckIpIntf_Type.__name__ = "Integer32"
_VrrpNewCfgVirtRtrGrpTckIpIntf_Object = MibTableColumn
vrrpNewCfgVirtRtrGrpTckIpIntf = _VrrpNewCfgVirtRtrGrpTckIpIntf_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 10, 1, 11),
    _VrrpNewCfgVirtRtrGrpTckIpIntf_Type()
)
vrrpNewCfgVirtRtrGrpTckIpIntf.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrGrpTckIpIntf.setStatus("current")


class _VrrpNewCfgVirtRtrGrpTckVlanPort_Type(Integer32):
    """Custom type vrrpNewCfgVirtRtrGrpTckVlanPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpNewCfgVirtRtrGrpTckVlanPort_Type.__name__ = "Integer32"
_VrrpNewCfgVirtRtrGrpTckVlanPort_Object = MibTableColumn
vrrpNewCfgVirtRtrGrpTckVlanPort = _VrrpNewCfgVirtRtrGrpTckVlanPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 10, 1, 12),
    _VrrpNewCfgVirtRtrGrpTckVlanPort_Type()
)
vrrpNewCfgVirtRtrGrpTckVlanPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrGrpTckVlanPort.setStatus("current")


class _VrrpNewCfgVirtRtrGrpFastAdvertisement_Type(Integer32):
    """Custom type vrrpNewCfgVirtRtrGrpFastAdvertisement based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpNewCfgVirtRtrGrpFastAdvertisement_Type.__name__ = "Integer32"
_VrrpNewCfgVirtRtrGrpFastAdvertisement_Object = MibTableColumn
vrrpNewCfgVirtRtrGrpFastAdvertisement = _VrrpNewCfgVirtRtrGrpFastAdvertisement_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 10, 1, 17),
    _VrrpNewCfgVirtRtrGrpFastAdvertisement_Type()
)
vrrpNewCfgVirtRtrGrpFastAdvertisement.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrGrpFastAdvertisement.setStatus("current")


class _VrrpNewCfgVirtRtrGrpPredelay_Type(Integer32):
    """Custom type vrrpNewCfgVirtRtrGrpPredelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_VrrpNewCfgVirtRtrGrpPredelay_Type.__name__ = "Integer32"
_VrrpNewCfgVirtRtrGrpPredelay_Object = MibTableColumn
vrrpNewCfgVirtRtrGrpPredelay = _VrrpNewCfgVirtRtrGrpPredelay_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 6, 10, 1, 21),
    _VrrpNewCfgVirtRtrGrpPredelay_Type()
)
vrrpNewCfgVirtRtrGrpPredelay.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrGrpPredelay.setStatus("current")
_ArpCfg_ObjectIdentity = ObjectIdentity
arpCfg = _ArpCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 7)
)


class _ArpCurCfgReARPPeriod_Type(Integer32):
    """Custom type arpCurCfgReARPPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 120),
    )


_ArpCurCfgReARPPeriod_Type.__name__ = "Integer32"
_ArpCurCfgReARPPeriod_Object = MibScalar
arpCurCfgReARPPeriod = _ArpCurCfgReARPPeriod_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 7, 1),
    _ArpCurCfgReARPPeriod_Type()
)
arpCurCfgReARPPeriod.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    arpCurCfgReARPPeriod.setStatus("current")


class _ArpNewCfgReARPPeriod_Type(Integer32):
    """Custom type arpNewCfgReARPPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 120),
    )


_ArpNewCfgReARPPeriod_Type.__name__ = "Integer32"
_ArpNewCfgReARPPeriod_Object = MibScalar
arpNewCfgReARPPeriod = _ArpNewCfgReARPPeriod_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 7, 2),
    _ArpNewCfgReARPPeriod_Type()
)
arpNewCfgReARPPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    arpNewCfgReARPPeriod.setStatus("current")
_IpBootpCfg_ObjectIdentity = ObjectIdentity
ipBootpCfg = _IpBootpCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8)
)
_IpCurCfgBootpAddr_Type = IpAddress
_IpCurCfgBootpAddr_Object = MibScalar
ipCurCfgBootpAddr = _IpCurCfgBootpAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 1),
    _IpCurCfgBootpAddr_Type()
)
ipCurCfgBootpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgBootpAddr.setStatus("current")
_IpNewCfgBootpAddr_Type = IpAddress
_IpNewCfgBootpAddr_Object = MibScalar
ipNewCfgBootpAddr = _IpNewCfgBootpAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 2),
    _IpNewCfgBootpAddr_Type()
)
ipNewCfgBootpAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipNewCfgBootpAddr.setStatus("current")
_IpCurCfgBootpAddr2_Type = IpAddress
_IpCurCfgBootpAddr2_Object = MibScalar
ipCurCfgBootpAddr2 = _IpCurCfgBootpAddr2_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 3),
    _IpCurCfgBootpAddr2_Type()
)
ipCurCfgBootpAddr2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgBootpAddr2.setStatus("current")
_IpNewCfgBootpAddr2_Type = IpAddress
_IpNewCfgBootpAddr2_Object = MibScalar
ipNewCfgBootpAddr2 = _IpNewCfgBootpAddr2_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 4),
    _IpNewCfgBootpAddr2_Type()
)
ipNewCfgBootpAddr2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipNewCfgBootpAddr2.setStatus("current")


class _IpCurCfgBootpState_Type(Integer32):
    """Custom type ipCurCfgBootpState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_IpCurCfgBootpState_Type.__name__ = "Integer32"
_IpCurCfgBootpState_Object = MibScalar
ipCurCfgBootpState = _IpCurCfgBootpState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 5),
    _IpCurCfgBootpState_Type()
)
ipCurCfgBootpState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgBootpState.setStatus("current")


class _IpNewCfgBootpState_Type(Integer32):
    """Custom type ipNewCfgBootpState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_IpNewCfgBootpState_Type.__name__ = "Integer32"
_IpNewCfgBootpState_Object = MibScalar
ipNewCfgBootpState = _IpNewCfgBootpState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 6),
    _IpNewCfgBootpState_Type()
)
ipNewCfgBootpState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipNewCfgBootpState.setStatus("current")
_IpCurCfgBootpGlobalServerTable_Object = MibTable
ipCurCfgBootpGlobalServerTable = _IpCurCfgBootpGlobalServerTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 20)
)
if mibBuilder.loadTexts:
    ipCurCfgBootpGlobalServerTable.setStatus("current")
_IpCurCfgBootpGlobalServerEntry_Object = MibTableRow
ipCurCfgBootpGlobalServerEntry = _IpCurCfgBootpGlobalServerEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 20, 1)
)
ipCurCfgBootpGlobalServerEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipCurCfgBootpGlobalServerIndex"),
)
if mibBuilder.loadTexts:
    ipCurCfgBootpGlobalServerEntry.setStatus("current")
_IpCurCfgBootpGlobalServerIndex_Type = Integer32
_IpCurCfgBootpGlobalServerIndex_Object = MibTableColumn
ipCurCfgBootpGlobalServerIndex = _IpCurCfgBootpGlobalServerIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 20, 1, 1),
    _IpCurCfgBootpGlobalServerIndex_Type()
)
ipCurCfgBootpGlobalServerIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgBootpGlobalServerIndex.setStatus("current")
_IpCurCfgBootpGlobalServerAddress_Type = IpAddress
_IpCurCfgBootpGlobalServerAddress_Object = MibTableColumn
ipCurCfgBootpGlobalServerAddress = _IpCurCfgBootpGlobalServerAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 20, 1, 2),
    _IpCurCfgBootpGlobalServerAddress_Type()
)
ipCurCfgBootpGlobalServerAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgBootpGlobalServerAddress.setStatus("current")
_IpNewCfgBootpGlobalServerTable_Object = MibTable
ipNewCfgBootpGlobalServerTable = _IpNewCfgBootpGlobalServerTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 21)
)
if mibBuilder.loadTexts:
    ipNewCfgBootpGlobalServerTable.setStatus("current")
_IpNewCfgBootpGlobalServerEntry_Object = MibTableRow
ipNewCfgBootpGlobalServerEntry = _IpNewCfgBootpGlobalServerEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 21, 1)
)
ipNewCfgBootpGlobalServerEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipNewCfgBootpGlobalServerIndex"),
)
if mibBuilder.loadTexts:
    ipNewCfgBootpGlobalServerEntry.setStatus("current")
_IpNewCfgBootpGlobalServerIndex_Type = Integer32
_IpNewCfgBootpGlobalServerIndex_Object = MibTableColumn
ipNewCfgBootpGlobalServerIndex = _IpNewCfgBootpGlobalServerIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 21, 1, 1),
    _IpNewCfgBootpGlobalServerIndex_Type()
)
ipNewCfgBootpGlobalServerIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipNewCfgBootpGlobalServerIndex.setStatus("current")
_IpNewCfgBootpGlobalServerAddress_Type = IpAddress
_IpNewCfgBootpGlobalServerAddress_Object = MibTableColumn
ipNewCfgBootpGlobalServerAddress = _IpNewCfgBootpGlobalServerAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 21, 1, 2),
    _IpNewCfgBootpGlobalServerAddress_Type()
)
ipNewCfgBootpGlobalServerAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipNewCfgBootpGlobalServerAddress.setStatus("current")
_IpCurCfgBootpBcastDomainTable_Object = MibTable
ipCurCfgBootpBcastDomainTable = _IpCurCfgBootpBcastDomainTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 22)
)
if mibBuilder.loadTexts:
    ipCurCfgBootpBcastDomainTable.setStatus("current")
_IpCurCfgBootpBcastDomainEntry_Object = MibTableRow
ipCurCfgBootpBcastDomainEntry = _IpCurCfgBootpBcastDomainEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 22, 1)
)
ipCurCfgBootpBcastDomainEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipCurCfgBootpBcastDomainIndex"),
)
if mibBuilder.loadTexts:
    ipCurCfgBootpBcastDomainEntry.setStatus("current")
_IpCurCfgBootpBcastDomainIndex_Type = Integer32
_IpCurCfgBootpBcastDomainIndex_Object = MibTableColumn
ipCurCfgBootpBcastDomainIndex = _IpCurCfgBootpBcastDomainIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 22, 1, 1),
    _IpCurCfgBootpBcastDomainIndex_Type()
)
ipCurCfgBootpBcastDomainIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgBootpBcastDomainIndex.setStatus("current")
_IpCurCfgBootpBcastDomainVlan_Type = Integer32
_IpCurCfgBootpBcastDomainVlan_Object = MibTableColumn
ipCurCfgBootpBcastDomainVlan = _IpCurCfgBootpBcastDomainVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 22, 1, 2),
    _IpCurCfgBootpBcastDomainVlan_Type()
)
ipCurCfgBootpBcastDomainVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgBootpBcastDomainVlan.setStatus("current")


class _IpCurCfgBootpBcastDomainEnable_Type(Integer32):
    """Custom type ipCurCfgBootpBcastDomainEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_IpCurCfgBootpBcastDomainEnable_Type.__name__ = "Integer32"
_IpCurCfgBootpBcastDomainEnable_Object = MibTableColumn
ipCurCfgBootpBcastDomainEnable = _IpCurCfgBootpBcastDomainEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 22, 1, 3),
    _IpCurCfgBootpBcastDomainEnable_Type()
)
ipCurCfgBootpBcastDomainEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgBootpBcastDomainEnable.setStatus("current")
_IpNewCfgBootpBcastDomainTable_Object = MibTable
ipNewCfgBootpBcastDomainTable = _IpNewCfgBootpBcastDomainTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 23)
)
if mibBuilder.loadTexts:
    ipNewCfgBootpBcastDomainTable.setStatus("current")
_IpNewCfgBootpBcastDomainEntry_Object = MibTableRow
ipNewCfgBootpBcastDomainEntry = _IpNewCfgBootpBcastDomainEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 23, 1)
)
ipNewCfgBootpBcastDomainEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipNewCfgBootpBcastDomainIndex"),
)
if mibBuilder.loadTexts:
    ipNewCfgBootpBcastDomainEntry.setStatus("current")
_IpNewCfgBootpBcastDomainIndex_Type = Integer32
_IpNewCfgBootpBcastDomainIndex_Object = MibTableColumn
ipNewCfgBootpBcastDomainIndex = _IpNewCfgBootpBcastDomainIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 23, 1, 1),
    _IpNewCfgBootpBcastDomainIndex_Type()
)
ipNewCfgBootpBcastDomainIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipNewCfgBootpBcastDomainIndex.setStatus("current")
_IpNewCfgBootpBcastDomainVlan_Type = Integer32
_IpNewCfgBootpBcastDomainVlan_Object = MibTableColumn
ipNewCfgBootpBcastDomainVlan = _IpNewCfgBootpBcastDomainVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 23, 1, 2),
    _IpNewCfgBootpBcastDomainVlan_Type()
)
ipNewCfgBootpBcastDomainVlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipNewCfgBootpBcastDomainVlan.setStatus("current")


class _IpNewCfgBootpBcastDomainEnable_Type(Integer32):
    """Custom type ipNewCfgBootpBcastDomainEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_IpNewCfgBootpBcastDomainEnable_Type.__name__ = "Integer32"
_IpNewCfgBootpBcastDomainEnable_Object = MibTableColumn
ipNewCfgBootpBcastDomainEnable = _IpNewCfgBootpBcastDomainEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 23, 1, 3),
    _IpNewCfgBootpBcastDomainEnable_Type()
)
ipNewCfgBootpBcastDomainEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipNewCfgBootpBcastDomainEnable.setStatus("current")


class _IpNewCfgBootpBcastDomainAction_Type(Integer32):
    """Custom type ipNewCfgBootpBcastDomainAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_IpNewCfgBootpBcastDomainAction_Type.__name__ = "Integer32"
_IpNewCfgBootpBcastDomainAction_Object = MibTableColumn
ipNewCfgBootpBcastDomainAction = _IpNewCfgBootpBcastDomainAction_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 23, 1, 4),
    _IpNewCfgBootpBcastDomainAction_Type()
)
ipNewCfgBootpBcastDomainAction.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgBootpBcastDomainAction.setStatus("current")
_IpCurCfgBootpBcastDomainServerTable_Object = MibTable
ipCurCfgBootpBcastDomainServerTable = _IpCurCfgBootpBcastDomainServerTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 24)
)
if mibBuilder.loadTexts:
    ipCurCfgBootpBcastDomainServerTable.setStatus("current")
_IpCurCfgBootpBcastDomainServerEntry_Object = MibTableRow
ipCurCfgBootpBcastDomainServerEntry = _IpCurCfgBootpBcastDomainServerEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 24, 1)
)
ipCurCfgBootpBcastDomainServerEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipCurCfgBootpBcastDomainBDIndex"),
    (0, "IBM-GbTOR-G8264T-MIB", "ipCurCfgBootpBcastDomainServIndex"),
)
if mibBuilder.loadTexts:
    ipCurCfgBootpBcastDomainServerEntry.setStatus("current")
_IpCurCfgBootpBcastDomainBDIndex_Type = Integer32
_IpCurCfgBootpBcastDomainBDIndex_Object = MibTableColumn
ipCurCfgBootpBcastDomainBDIndex = _IpCurCfgBootpBcastDomainBDIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 24, 1, 1),
    _IpCurCfgBootpBcastDomainBDIndex_Type()
)
ipCurCfgBootpBcastDomainBDIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgBootpBcastDomainBDIndex.setStatus("current")
_IpCurCfgBootpBcastDomainServIndex_Type = Integer32
_IpCurCfgBootpBcastDomainServIndex_Object = MibTableColumn
ipCurCfgBootpBcastDomainServIndex = _IpCurCfgBootpBcastDomainServIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 24, 1, 2),
    _IpCurCfgBootpBcastDomainServIndex_Type()
)
ipCurCfgBootpBcastDomainServIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgBootpBcastDomainServIndex.setStatus("current")
_IpCurCfgBootpBcastDomainServerIP_Type = IpAddress
_IpCurCfgBootpBcastDomainServerIP_Object = MibTableColumn
ipCurCfgBootpBcastDomainServerIP = _IpCurCfgBootpBcastDomainServerIP_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 24, 1, 3),
    _IpCurCfgBootpBcastDomainServerIP_Type()
)
ipCurCfgBootpBcastDomainServerIP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgBootpBcastDomainServerIP.setStatus("current")
_IpNewCfgBootpBcastDomainServerTable_Object = MibTable
ipNewCfgBootpBcastDomainServerTable = _IpNewCfgBootpBcastDomainServerTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 25)
)
if mibBuilder.loadTexts:
    ipNewCfgBootpBcastDomainServerTable.setStatus("current")
_IpNewCfgBootpBcastDomainServerEntry_Object = MibTableRow
ipNewCfgBootpBcastDomainServerEntry = _IpNewCfgBootpBcastDomainServerEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 25, 1)
)
ipNewCfgBootpBcastDomainServerEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipNewCfgBootpBcastDomainBDIndex"),
    (0, "IBM-GbTOR-G8264T-MIB", "ipNewCfgBootpBcastDomainServIndex"),
)
if mibBuilder.loadTexts:
    ipNewCfgBootpBcastDomainServerEntry.setStatus("current")
_IpNewCfgBootpBcastDomainBDIndex_Type = Integer32
_IpNewCfgBootpBcastDomainBDIndex_Object = MibTableColumn
ipNewCfgBootpBcastDomainBDIndex = _IpNewCfgBootpBcastDomainBDIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 25, 1, 1),
    _IpNewCfgBootpBcastDomainBDIndex_Type()
)
ipNewCfgBootpBcastDomainBDIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipNewCfgBootpBcastDomainBDIndex.setStatus("current")
_IpNewCfgBootpBcastDomainServIndex_Type = Integer32
_IpNewCfgBootpBcastDomainServIndex_Object = MibTableColumn
ipNewCfgBootpBcastDomainServIndex = _IpNewCfgBootpBcastDomainServIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 25, 1, 2),
    _IpNewCfgBootpBcastDomainServIndex_Type()
)
ipNewCfgBootpBcastDomainServIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipNewCfgBootpBcastDomainServIndex.setStatus("current")
_IpNewCfgBootpBcastDomainServerIP_Type = IpAddress
_IpNewCfgBootpBcastDomainServerIP_Object = MibTableColumn
ipNewCfgBootpBcastDomainServerIP = _IpNewCfgBootpBcastDomainServerIP_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 25, 1, 3),
    _IpNewCfgBootpBcastDomainServerIP_Type()
)
ipNewCfgBootpBcastDomainServerIP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipNewCfgBootpBcastDomainServerIP.setStatus("current")


class _IpCurCfgBootpOpt82State_Type(Integer32):
    """Custom type ipCurCfgBootpOpt82State based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_IpCurCfgBootpOpt82State_Type.__name__ = "Integer32"
_IpCurCfgBootpOpt82State_Object = MibScalar
ipCurCfgBootpOpt82State = _IpCurCfgBootpOpt82State_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 26),
    _IpCurCfgBootpOpt82State_Type()
)
ipCurCfgBootpOpt82State.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgBootpOpt82State.setStatus("current")


class _IpNewCfgBootpOpt82State_Type(Integer32):
    """Custom type ipNewCfgBootpOpt82State based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_IpNewCfgBootpOpt82State_Type.__name__ = "Integer32"
_IpNewCfgBootpOpt82State_Object = MibScalar
ipNewCfgBootpOpt82State = _IpNewCfgBootpOpt82State_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 27),
    _IpNewCfgBootpOpt82State_Type()
)
ipNewCfgBootpOpt82State.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipNewCfgBootpOpt82State.setStatus("current")


class _IpCurCfgBootpOpt82Policy_Type(Integer32):
    """Custom type ipCurCfgBootpOpt82Policy based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("replace", 0),
          ("drop", 1),
          ("keep", 2))
    )


_IpCurCfgBootpOpt82Policy_Type.__name__ = "Integer32"
_IpCurCfgBootpOpt82Policy_Object = MibScalar
ipCurCfgBootpOpt82Policy = _IpCurCfgBootpOpt82Policy_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 28),
    _IpCurCfgBootpOpt82Policy_Type()
)
ipCurCfgBootpOpt82Policy.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgBootpOpt82Policy.setStatus("current")


class _IpNewCfgBootpOpt82Policy_Type(Integer32):
    """Custom type ipNewCfgBootpOpt82Policy based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("replace", 0),
          ("drop", 1),
          ("keep", 2))
    )


_IpNewCfgBootpOpt82Policy_Type.__name__ = "Integer32"
_IpNewCfgBootpOpt82Policy_Object = MibScalar
ipNewCfgBootpOpt82Policy = _IpNewCfgBootpOpt82Policy_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 8, 29),
    _IpNewCfgBootpOpt82Policy_Type()
)
ipNewCfgBootpOpt82Policy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipNewCfgBootpOpt82Policy.setStatus("current")
_DnsCfg_ObjectIdentity = ObjectIdentity
dnsCfg = _DnsCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 9)
)
_DnsCurCfgPrimaryIpAddr_Type = DisplayString
_DnsCurCfgPrimaryIpAddr_Object = MibScalar
dnsCurCfgPrimaryIpAddr = _DnsCurCfgPrimaryIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 9, 1),
    _DnsCurCfgPrimaryIpAddr_Type()
)
dnsCurCfgPrimaryIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dnsCurCfgPrimaryIpAddr.setStatus("current")
_DnsNewCfgPrimaryIpAddr_Type = DisplayString
_DnsNewCfgPrimaryIpAddr_Object = MibScalar
dnsNewCfgPrimaryIpAddr = _DnsNewCfgPrimaryIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 9, 2),
    _DnsNewCfgPrimaryIpAddr_Type()
)
dnsNewCfgPrimaryIpAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dnsNewCfgPrimaryIpAddr.setStatus("current")
_DnsCurCfgSecondaryIpAddr_Type = DisplayString
_DnsCurCfgSecondaryIpAddr_Object = MibScalar
dnsCurCfgSecondaryIpAddr = _DnsCurCfgSecondaryIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 9, 3),
    _DnsCurCfgSecondaryIpAddr_Type()
)
dnsCurCfgSecondaryIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dnsCurCfgSecondaryIpAddr.setStatus("current")
_DnsNewCfgSecondaryIpAddr_Type = DisplayString
_DnsNewCfgSecondaryIpAddr_Object = MibScalar
dnsNewCfgSecondaryIpAddr = _DnsNewCfgSecondaryIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 9, 4),
    _DnsNewCfgSecondaryIpAddr_Type()
)
dnsNewCfgSecondaryIpAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dnsNewCfgSecondaryIpAddr.setStatus("current")


class _DnsCurCfgDomainName_Type(DisplayString):
    """Custom type dnsCurCfgDomainName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 191),
    )


_DnsCurCfgDomainName_Type.__name__ = "DisplayString"
_DnsCurCfgDomainName_Object = MibScalar
dnsCurCfgDomainName = _DnsCurCfgDomainName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 9, 5),
    _DnsCurCfgDomainName_Type()
)
dnsCurCfgDomainName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dnsCurCfgDomainName.setStatus("current")


class _DnsNewCfgDomainName_Type(DisplayString):
    """Custom type dnsNewCfgDomainName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 191),
    )


_DnsNewCfgDomainName_Type.__name__ = "DisplayString"
_DnsNewCfgDomainName_Object = MibScalar
dnsNewCfgDomainName = _DnsNewCfgDomainName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 9, 6),
    _DnsNewCfgDomainName_Type()
)
dnsNewCfgDomainName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dnsNewCfgDomainName.setStatus("current")


class _DnsNewCfgFirstRequestAddr_Type(Integer32):
    """Custom type dnsNewCfgFirstRequestAddr based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ipv4", 1),
          ("ipv6", 2))
    )


_DnsNewCfgFirstRequestAddr_Type.__name__ = "Integer32"
_DnsNewCfgFirstRequestAddr_Object = MibScalar
dnsNewCfgFirstRequestAddr = _DnsNewCfgFirstRequestAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 9, 9),
    _DnsNewCfgFirstRequestAddr_Type()
)
dnsNewCfgFirstRequestAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dnsNewCfgFirstRequestAddr.setStatus("current")


class _DnsCurCfgFirstRequestAddr_Type(Integer32):
    """Custom type dnsCurCfgFirstRequestAddr based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ipv4", 1),
          ("ipv6", 2))
    )


_DnsCurCfgFirstRequestAddr_Type.__name__ = "Integer32"
_DnsCurCfgFirstRequestAddr_Object = MibScalar
dnsCurCfgFirstRequestAddr = _DnsCurCfgFirstRequestAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 9, 10),
    _DnsCurCfgFirstRequestAddr_Type()
)
dnsCurCfgFirstRequestAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dnsCurCfgFirstRequestAddr.setStatus("current")


class _DnsCurCfgPriServerPort_Type(Integer32):
    """Custom type dnsCurCfgPriServerPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("data", 1),
          ("mgt", 2))
    )


_DnsCurCfgPriServerPort_Type.__name__ = "Integer32"
_DnsCurCfgPriServerPort_Object = MibScalar
dnsCurCfgPriServerPort = _DnsCurCfgPriServerPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 9, 11),
    _DnsCurCfgPriServerPort_Type()
)
dnsCurCfgPriServerPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dnsCurCfgPriServerPort.setStatus("current")


class _DnsNewCfgPriServerPort_Type(Integer32):
    """Custom type dnsNewCfgPriServerPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("data", 1),
          ("mgt", 2))
    )


_DnsNewCfgPriServerPort_Type.__name__ = "Integer32"
_DnsNewCfgPriServerPort_Object = MibScalar
dnsNewCfgPriServerPort = _DnsNewCfgPriServerPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 9, 12),
    _DnsNewCfgPriServerPort_Type()
)
dnsNewCfgPriServerPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dnsNewCfgPriServerPort.setStatus("current")


class _DnsCurCfgSecServerPort_Type(Integer32):
    """Custom type dnsCurCfgSecServerPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("data", 1),
          ("mgt", 2))
    )


_DnsCurCfgSecServerPort_Type.__name__ = "Integer32"
_DnsCurCfgSecServerPort_Object = MibScalar
dnsCurCfgSecServerPort = _DnsCurCfgSecServerPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 9, 13),
    _DnsCurCfgSecServerPort_Type()
)
dnsCurCfgSecServerPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dnsCurCfgSecServerPort.setStatus("current")


class _DnsNewCfgSecServerPort_Type(Integer32):
    """Custom type dnsNewCfgSecServerPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("data", 1),
          ("mgt", 2))
    )


_DnsNewCfgSecServerPort_Type.__name__ = "Integer32"
_DnsNewCfgSecServerPort_Object = MibScalar
dnsNewCfgSecServerPort = _DnsNewCfgSecServerPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 9, 14),
    _DnsNewCfgSecServerPort_Type()
)
dnsNewCfgSecServerPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dnsNewCfgSecServerPort.setStatus("current")
_IpNwfCfg_ObjectIdentity = ObjectIdentity
ipNwfCfg = _IpNwfCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 10)
)
_IpNwfTableMax_Type = Integer32
_IpNwfTableMax_Object = MibScalar
ipNwfTableMax = _IpNwfTableMax_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 10, 1),
    _IpNwfTableMax_Type()
)
ipNwfTableMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipNwfTableMax.setStatus("current")
_IpCurCfgNwfTable_Object = MibTable
ipCurCfgNwfTable = _IpCurCfgNwfTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 10, 2)
)
if mibBuilder.loadTexts:
    ipCurCfgNwfTable.setStatus("current")
_IpCurCfgNwfEntry_Object = MibTableRow
ipCurCfgNwfEntry = _IpCurCfgNwfEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 10, 2, 1)
)
ipCurCfgNwfEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipCurCfgNwfIndex"),
)
if mibBuilder.loadTexts:
    ipCurCfgNwfEntry.setStatus("current")
_IpCurCfgNwfIndex_Type = Integer32
_IpCurCfgNwfIndex_Object = MibTableColumn
ipCurCfgNwfIndex = _IpCurCfgNwfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 10, 2, 1, 1),
    _IpCurCfgNwfIndex_Type()
)
ipCurCfgNwfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgNwfIndex.setStatus("current")
_IpCurCfgNwfAddr_Type = IpAddress
_IpCurCfgNwfAddr_Object = MibTableColumn
ipCurCfgNwfAddr = _IpCurCfgNwfAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 10, 2, 1, 2),
    _IpCurCfgNwfAddr_Type()
)
ipCurCfgNwfAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgNwfAddr.setStatus("current")
_IpCurCfgNwfMask_Type = IpAddress
_IpCurCfgNwfMask_Object = MibTableColumn
ipCurCfgNwfMask = _IpCurCfgNwfMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 10, 2, 1, 3),
    _IpCurCfgNwfMask_Type()
)
ipCurCfgNwfMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgNwfMask.setStatus("current")


class _IpCurCfgNwfState_Type(Integer32):
    """Custom type ipCurCfgNwfState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IpCurCfgNwfState_Type.__name__ = "Integer32"
_IpCurCfgNwfState_Object = MibTableColumn
ipCurCfgNwfState = _IpCurCfgNwfState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 10, 2, 1, 4),
    _IpCurCfgNwfState_Type()
)
ipCurCfgNwfState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgNwfState.setStatus("current")
_IpNewCfgNwfTable_Object = MibTable
ipNewCfgNwfTable = _IpNewCfgNwfTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 10, 3)
)
if mibBuilder.loadTexts:
    ipNewCfgNwfTable.setStatus("current")
_IpNewCfgNwfEntry_Object = MibTableRow
ipNewCfgNwfEntry = _IpNewCfgNwfEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 10, 3, 1)
)
ipNewCfgNwfEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipNewCfgNwfIndex"),
)
if mibBuilder.loadTexts:
    ipNewCfgNwfEntry.setStatus("current")
_IpNewCfgNwfIndex_Type = Integer32
_IpNewCfgNwfIndex_Object = MibTableColumn
ipNewCfgNwfIndex = _IpNewCfgNwfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 10, 3, 1, 1),
    _IpNewCfgNwfIndex_Type()
)
ipNewCfgNwfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipNewCfgNwfIndex.setStatus("current")
_IpNewCfgNwfAddr_Type = IpAddress
_IpNewCfgNwfAddr_Object = MibTableColumn
ipNewCfgNwfAddr = _IpNewCfgNwfAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 10, 3, 1, 2),
    _IpNewCfgNwfAddr_Type()
)
ipNewCfgNwfAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgNwfAddr.setStatus("current")
_IpNewCfgNwfMask_Type = IpAddress
_IpNewCfgNwfMask_Object = MibTableColumn
ipNewCfgNwfMask = _IpNewCfgNwfMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 10, 3, 1, 3),
    _IpNewCfgNwfMask_Type()
)
ipNewCfgNwfMask.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgNwfMask.setStatus("current")


class _IpNewCfgNwfState_Type(Integer32):
    """Custom type ipNewCfgNwfState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IpNewCfgNwfState_Type.__name__ = "Integer32"
_IpNewCfgNwfState_Object = MibTableColumn
ipNewCfgNwfState = _IpNewCfgNwfState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 10, 3, 1, 4),
    _IpNewCfgNwfState_Type()
)
ipNewCfgNwfState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgNwfState.setStatus("current")


class _IpNewCfgNwfDelete_Type(Integer32):
    """Custom type ipNewCfgNwfDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_IpNewCfgNwfDelete_Type.__name__ = "Integer32"
_IpNewCfgNwfDelete_Object = MibTableColumn
ipNewCfgNwfDelete = _IpNewCfgNwfDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 10, 3, 1, 5),
    _IpNewCfgNwfDelete_Type()
)
ipNewCfgNwfDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgNwfDelete.setStatus("current")
_IpRmapCfg_ObjectIdentity = ObjectIdentity
ipRmapCfg = _IpRmapCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11)
)
_IpRmapTableMax_Type = Integer32
_IpRmapTableMax_Object = MibScalar
ipRmapTableMax = _IpRmapTableMax_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 1),
    _IpRmapTableMax_Type()
)
ipRmapTableMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipRmapTableMax.setStatus("current")
_IpCurCfgRmapTable_Object = MibTable
ipCurCfgRmapTable = _IpCurCfgRmapTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 2)
)
if mibBuilder.loadTexts:
    ipCurCfgRmapTable.setStatus("current")
_IpCurCfgRmapEntry_Object = MibTableRow
ipCurCfgRmapEntry = _IpCurCfgRmapEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 2, 1)
)
ipCurCfgRmapEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipCurCfgRmapIndex"),
)
if mibBuilder.loadTexts:
    ipCurCfgRmapEntry.setStatus("current")
_IpCurCfgRmapIndex_Type = Integer32
_IpCurCfgRmapIndex_Object = MibTableColumn
ipCurCfgRmapIndex = _IpCurCfgRmapIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 2, 1, 1),
    _IpCurCfgRmapIndex_Type()
)
ipCurCfgRmapIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgRmapIndex.setStatus("current")


class _IpCurCfgRmapLp_Type(Unsigned32):
    """Custom type ipCurCfgRmapLp based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_IpCurCfgRmapLp_Type.__name__ = "Unsigned32"
_IpCurCfgRmapLp_Object = MibTableColumn
ipCurCfgRmapLp = _IpCurCfgRmapLp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 2, 1, 2),
    _IpCurCfgRmapLp_Type()
)
ipCurCfgRmapLp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgRmapLp.setStatus("current")


class _IpCurCfgRmapMetric_Type(Unsigned32):
    """Custom type ipCurCfgRmapMetric based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4294967295),
    )


_IpCurCfgRmapMetric_Type.__name__ = "Unsigned32"
_IpCurCfgRmapMetric_Object = MibTableColumn
ipCurCfgRmapMetric = _IpCurCfgRmapMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 2, 1, 3),
    _IpCurCfgRmapMetric_Type()
)
ipCurCfgRmapMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgRmapMetric.setStatus("current")


class _IpCurCfgRmapPrec_Type(Integer32):
    """Custom type ipCurCfgRmapPrec based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_IpCurCfgRmapPrec_Type.__name__ = "Integer32"
_IpCurCfgRmapPrec_Object = MibTableColumn
ipCurCfgRmapPrec = _IpCurCfgRmapPrec_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 2, 1, 4),
    _IpCurCfgRmapPrec_Type()
)
ipCurCfgRmapPrec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgRmapPrec.setStatus("current")


class _IpCurCfgRmapWeight_Type(Integer32):
    """Custom type ipCurCfgRmapWeight based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_IpCurCfgRmapWeight_Type.__name__ = "Integer32"
_IpCurCfgRmapWeight_Object = MibTableColumn
ipCurCfgRmapWeight = _IpCurCfgRmapWeight_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 2, 1, 5),
    _IpCurCfgRmapWeight_Type()
)
ipCurCfgRmapWeight.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgRmapWeight.setStatus("current")


class _IpCurCfgRmapState_Type(Integer32):
    """Custom type ipCurCfgRmapState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IpCurCfgRmapState_Type.__name__ = "Integer32"
_IpCurCfgRmapState_Object = MibTableColumn
ipCurCfgRmapState = _IpCurCfgRmapState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 2, 1, 6),
    _IpCurCfgRmapState_Type()
)
ipCurCfgRmapState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgRmapState.setStatus("current")


class _IpCurCfgRmapAp_Type(DisplayString):
    """Custom type ipCurCfgRmapAp based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 17),
    )


_IpCurCfgRmapAp_Type.__name__ = "DisplayString"
_IpCurCfgRmapAp_Object = MibTableColumn
ipCurCfgRmapAp = _IpCurCfgRmapAp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 2, 1, 7),
    _IpCurCfgRmapAp_Type()
)
ipCurCfgRmapAp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgRmapAp.setStatus("current")


class _IpCurCfgRmapMetricType_Type(Integer32):
    """Custom type ipCurCfgRmapMetricType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("type1", 2),
          ("type2", 3))
    )


_IpCurCfgRmapMetricType_Type.__name__ = "Integer32"
_IpCurCfgRmapMetricType_Object = MibTableColumn
ipCurCfgRmapMetricType = _IpCurCfgRmapMetricType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 2, 1, 8),
    _IpCurCfgRmapMetricType_Type()
)
ipCurCfgRmapMetricType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgRmapMetricType.setStatus("current")


class _IpCurCfgRmapNexthop_Type(Integer32):
    """Custom type ipCurCfgRmapNexthop based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IpCurCfgRmapNexthop_Type.__name__ = "Integer32"
_IpCurCfgRmapNexthop_Object = MibTableColumn
ipCurCfgRmapNexthop = _IpCurCfgRmapNexthop_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 2, 1, 9),
    _IpCurCfgRmapNexthop_Type()
)
ipCurCfgRmapNexthop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgRmapNexthop.setStatus("current")
_IpNewCfgRmapTable_Object = MibTable
ipNewCfgRmapTable = _IpNewCfgRmapTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 3)
)
if mibBuilder.loadTexts:
    ipNewCfgRmapTable.setStatus("current")
_IpNewCfgRmapEntry_Object = MibTableRow
ipNewCfgRmapEntry = _IpNewCfgRmapEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 3, 1)
)
ipNewCfgRmapEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipNewCfgRmapIndex"),
)
if mibBuilder.loadTexts:
    ipNewCfgRmapEntry.setStatus("current")
_IpNewCfgRmapIndex_Type = Integer32
_IpNewCfgRmapIndex_Object = MibTableColumn
ipNewCfgRmapIndex = _IpNewCfgRmapIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 3, 1, 1),
    _IpNewCfgRmapIndex_Type()
)
ipNewCfgRmapIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipNewCfgRmapIndex.setStatus("current")


class _IpNewCfgRmapLp_Type(Unsigned32):
    """Custom type ipNewCfgRmapLp based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_IpNewCfgRmapLp_Type.__name__ = "Unsigned32"
_IpNewCfgRmapLp_Object = MibTableColumn
ipNewCfgRmapLp = _IpNewCfgRmapLp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 3, 1, 2),
    _IpNewCfgRmapLp_Type()
)
ipNewCfgRmapLp.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgRmapLp.setStatus("current")


class _IpNewCfgRmapMetric_Type(Unsigned32):
    """Custom type ipNewCfgRmapMetric based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4294967295),
    )


_IpNewCfgRmapMetric_Type.__name__ = "Unsigned32"
_IpNewCfgRmapMetric_Object = MibTableColumn
ipNewCfgRmapMetric = _IpNewCfgRmapMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 3, 1, 3),
    _IpNewCfgRmapMetric_Type()
)
ipNewCfgRmapMetric.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgRmapMetric.setStatus("current")


class _IpNewCfgRmapPrec_Type(Integer32):
    """Custom type ipNewCfgRmapPrec based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_IpNewCfgRmapPrec_Type.__name__ = "Integer32"
_IpNewCfgRmapPrec_Object = MibTableColumn
ipNewCfgRmapPrec = _IpNewCfgRmapPrec_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 3, 1, 4),
    _IpNewCfgRmapPrec_Type()
)
ipNewCfgRmapPrec.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgRmapPrec.setStatus("current")


class _IpNewCfgRmapWeight_Type(Integer32):
    """Custom type ipNewCfgRmapWeight based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_IpNewCfgRmapWeight_Type.__name__ = "Integer32"
_IpNewCfgRmapWeight_Object = MibTableColumn
ipNewCfgRmapWeight = _IpNewCfgRmapWeight_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 3, 1, 5),
    _IpNewCfgRmapWeight_Type()
)
ipNewCfgRmapWeight.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgRmapWeight.setStatus("current")


class _IpNewCfgRmapState_Type(Integer32):
    """Custom type ipNewCfgRmapState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IpNewCfgRmapState_Type.__name__ = "Integer32"
_IpNewCfgRmapState_Object = MibTableColumn
ipNewCfgRmapState = _IpNewCfgRmapState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 3, 1, 6),
    _IpNewCfgRmapState_Type()
)
ipNewCfgRmapState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgRmapState.setStatus("current")


class _IpNewCfgRmapAp_Type(DisplayString):
    """Custom type ipNewCfgRmapAp based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 17),
    )


_IpNewCfgRmapAp_Type.__name__ = "DisplayString"
_IpNewCfgRmapAp_Object = MibTableColumn
ipNewCfgRmapAp = _IpNewCfgRmapAp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 3, 1, 7),
    _IpNewCfgRmapAp_Type()
)
ipNewCfgRmapAp.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgRmapAp.setStatus("current")


class _IpNewCfgRmapMetricType_Type(Integer32):
    """Custom type ipNewCfgRmapMetricType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("type1", 2),
          ("type2", 3))
    )


_IpNewCfgRmapMetricType_Type.__name__ = "Integer32"
_IpNewCfgRmapMetricType_Object = MibTableColumn
ipNewCfgRmapMetricType = _IpNewCfgRmapMetricType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 3, 1, 8),
    _IpNewCfgRmapMetricType_Type()
)
ipNewCfgRmapMetricType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgRmapMetricType.setStatus("current")


class _IpNewCfgRmapDelete_Type(Integer32):
    """Custom type ipNewCfgRmapDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_IpNewCfgRmapDelete_Type.__name__ = "Integer32"
_IpNewCfgRmapDelete_Object = MibTableColumn
ipNewCfgRmapDelete = _IpNewCfgRmapDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 3, 1, 9),
    _IpNewCfgRmapDelete_Type()
)
ipNewCfgRmapDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgRmapDelete.setStatus("current")


class _IpNewCfgRmapNexthop_Type(Integer32):
    """Custom type ipNewCfgRmapNexthop based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IpNewCfgRmapNexthop_Type.__name__ = "Integer32"
_IpNewCfgRmapNexthop_Object = MibTableColumn
ipNewCfgRmapNexthop = _IpNewCfgRmapNexthop_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 3, 1, 10),
    _IpNewCfgRmapNexthop_Type()
)
ipNewCfgRmapNexthop.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgRmapNexthop.setStatus("current")
_IpAlistTableMax_Type = Integer32
_IpAlistTableMax_Object = MibScalar
ipAlistTableMax = _IpAlistTableMax_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 4),
    _IpAlistTableMax_Type()
)
ipAlistTableMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipAlistTableMax.setStatus("current")
_IpCurCfgAlistTable_Object = MibTable
ipCurCfgAlistTable = _IpCurCfgAlistTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 5)
)
if mibBuilder.loadTexts:
    ipCurCfgAlistTable.setStatus("current")
_IpCurCfgAlistEntry_Object = MibTableRow
ipCurCfgAlistEntry = _IpCurCfgAlistEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 5, 1)
)
ipCurCfgAlistEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipCurCfgAlistRmapIndex"),
    (0, "IBM-GbTOR-G8264T-MIB", "ipCurCfgAlistIndex"),
)
if mibBuilder.loadTexts:
    ipCurCfgAlistEntry.setStatus("current")
_IpCurCfgAlistRmapIndex_Type = Integer32
_IpCurCfgAlistRmapIndex_Object = MibTableColumn
ipCurCfgAlistRmapIndex = _IpCurCfgAlistRmapIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 5, 1, 1),
    _IpCurCfgAlistRmapIndex_Type()
)
ipCurCfgAlistRmapIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgAlistRmapIndex.setStatus("current")
_IpCurCfgAlistIndex_Type = Integer32
_IpCurCfgAlistIndex_Object = MibTableColumn
ipCurCfgAlistIndex = _IpCurCfgAlistIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 5, 1, 2),
    _IpCurCfgAlistIndex_Type()
)
ipCurCfgAlistIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgAlistIndex.setStatus("current")


class _IpCurCfgAlistNwf_Type(Integer32):
    """Custom type ipCurCfgAlistNwf based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 256),
    )


_IpCurCfgAlistNwf_Type.__name__ = "Integer32"
_IpCurCfgAlistNwf_Object = MibTableColumn
ipCurCfgAlistNwf = _IpCurCfgAlistNwf_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 5, 1, 3),
    _IpCurCfgAlistNwf_Type()
)
ipCurCfgAlistNwf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgAlistNwf.setStatus("current")


class _IpCurCfgAlistMetric_Type(Unsigned32):
    """Custom type ipCurCfgAlistMetric based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4294967295),
    )


_IpCurCfgAlistMetric_Type.__name__ = "Unsigned32"
_IpCurCfgAlistMetric_Object = MibTableColumn
ipCurCfgAlistMetric = _IpCurCfgAlistMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 5, 1, 4),
    _IpCurCfgAlistMetric_Type()
)
ipCurCfgAlistMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgAlistMetric.setStatus("current")


class _IpCurCfgAlistAction_Type(Integer32):
    """Custom type ipCurCfgAlistAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("permit", 1),
          ("deny", 2))
    )


_IpCurCfgAlistAction_Type.__name__ = "Integer32"
_IpCurCfgAlistAction_Object = MibTableColumn
ipCurCfgAlistAction = _IpCurCfgAlistAction_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 5, 1, 5),
    _IpCurCfgAlistAction_Type()
)
ipCurCfgAlistAction.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgAlistAction.setStatus("current")


class _IpCurCfgAlistState_Type(Integer32):
    """Custom type ipCurCfgAlistState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IpCurCfgAlistState_Type.__name__ = "Integer32"
_IpCurCfgAlistState_Object = MibTableColumn
ipCurCfgAlistState = _IpCurCfgAlistState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 5, 1, 6),
    _IpCurCfgAlistState_Type()
)
ipCurCfgAlistState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgAlistState.setStatus("current")
_IpNewCfgAlistTable_Object = MibTable
ipNewCfgAlistTable = _IpNewCfgAlistTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 6)
)
if mibBuilder.loadTexts:
    ipNewCfgAlistTable.setStatus("current")
_IpNewCfgAlistEntry_Object = MibTableRow
ipNewCfgAlistEntry = _IpNewCfgAlistEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 6, 1)
)
ipNewCfgAlistEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipNewCfgAlistRmapIndex"),
    (0, "IBM-GbTOR-G8264T-MIB", "ipNewCfgAlistIndex"),
)
if mibBuilder.loadTexts:
    ipNewCfgAlistEntry.setStatus("current")
_IpNewCfgAlistRmapIndex_Type = Integer32
_IpNewCfgAlistRmapIndex_Object = MibTableColumn
ipNewCfgAlistRmapIndex = _IpNewCfgAlistRmapIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 6, 1, 1),
    _IpNewCfgAlistRmapIndex_Type()
)
ipNewCfgAlistRmapIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipNewCfgAlistRmapIndex.setStatus("current")
_IpNewCfgAlistIndex_Type = Integer32
_IpNewCfgAlistIndex_Object = MibTableColumn
ipNewCfgAlistIndex = _IpNewCfgAlistIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 6, 1, 2),
    _IpNewCfgAlistIndex_Type()
)
ipNewCfgAlistIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipNewCfgAlistIndex.setStatus("current")


class _IpNewCfgAlistNwf_Type(Integer32):
    """Custom type ipNewCfgAlistNwf based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 256),
    )


_IpNewCfgAlistNwf_Type.__name__ = "Integer32"
_IpNewCfgAlistNwf_Object = MibTableColumn
ipNewCfgAlistNwf = _IpNewCfgAlistNwf_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 6, 1, 3),
    _IpNewCfgAlistNwf_Type()
)
ipNewCfgAlistNwf.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgAlistNwf.setStatus("current")


class _IpNewCfgAlistMetric_Type(Unsigned32):
    """Custom type ipNewCfgAlistMetric based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4294967295),
    )


_IpNewCfgAlistMetric_Type.__name__ = "Unsigned32"
_IpNewCfgAlistMetric_Object = MibTableColumn
ipNewCfgAlistMetric = _IpNewCfgAlistMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 6, 1, 4),
    _IpNewCfgAlistMetric_Type()
)
ipNewCfgAlistMetric.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgAlistMetric.setStatus("current")


class _IpNewCfgAlistAction_Type(Integer32):
    """Custom type ipNewCfgAlistAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("permit", 1),
          ("deny", 2))
    )


_IpNewCfgAlistAction_Type.__name__ = "Integer32"
_IpNewCfgAlistAction_Object = MibTableColumn
ipNewCfgAlistAction = _IpNewCfgAlistAction_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 6, 1, 5),
    _IpNewCfgAlistAction_Type()
)
ipNewCfgAlistAction.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgAlistAction.setStatus("current")


class _IpNewCfgAlistState_Type(Integer32):
    """Custom type ipNewCfgAlistState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IpNewCfgAlistState_Type.__name__ = "Integer32"
_IpNewCfgAlistState_Object = MibTableColumn
ipNewCfgAlistState = _IpNewCfgAlistState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 6, 1, 6),
    _IpNewCfgAlistState_Type()
)
ipNewCfgAlistState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgAlistState.setStatus("current")


class _IpNewCfgAlistDelete_Type(Integer32):
    """Custom type ipNewCfgAlistDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_IpNewCfgAlistDelete_Type.__name__ = "Integer32"
_IpNewCfgAlistDelete_Object = MibTableColumn
ipNewCfgAlistDelete = _IpNewCfgAlistDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 6, 1, 7),
    _IpNewCfgAlistDelete_Type()
)
ipNewCfgAlistDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgAlistDelete.setStatus("current")
_IpAspathTableMax_Type = Integer32
_IpAspathTableMax_Object = MibScalar
ipAspathTableMax = _IpAspathTableMax_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 7),
    _IpAspathTableMax_Type()
)
ipAspathTableMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipAspathTableMax.setStatus("current")
_IpCurCfgAspathTable_Object = MibTable
ipCurCfgAspathTable = _IpCurCfgAspathTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 8)
)
if mibBuilder.loadTexts:
    ipCurCfgAspathTable.setStatus("current")
_IpCurCfgAspathEntry_Object = MibTableRow
ipCurCfgAspathEntry = _IpCurCfgAspathEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 8, 1)
)
ipCurCfgAspathEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipCurCfgAspathRmapIndex"),
    (0, "IBM-GbTOR-G8264T-MIB", "ipCurCfgAlistIndex"),
)
if mibBuilder.loadTexts:
    ipCurCfgAspathEntry.setStatus("current")
_IpCurCfgAspathRmapIndex_Type = Integer32
_IpCurCfgAspathRmapIndex_Object = MibTableColumn
ipCurCfgAspathRmapIndex = _IpCurCfgAspathRmapIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 8, 1, 1),
    _IpCurCfgAspathRmapIndex_Type()
)
ipCurCfgAspathRmapIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgAspathRmapIndex.setStatus("current")
_IpCurCfgAspathIndex_Type = Integer32
_IpCurCfgAspathIndex_Object = MibTableColumn
ipCurCfgAspathIndex = _IpCurCfgAspathIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 8, 1, 2),
    _IpCurCfgAspathIndex_Type()
)
ipCurCfgAspathIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgAspathIndex.setStatus("current")


class _IpCurCfgAspathAS_Type(Integer32):
    """Custom type ipCurCfgAspathAS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_IpCurCfgAspathAS_Type.__name__ = "Integer32"
_IpCurCfgAspathAS_Object = MibTableColumn
ipCurCfgAspathAS = _IpCurCfgAspathAS_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 8, 1, 3),
    _IpCurCfgAspathAS_Type()
)
ipCurCfgAspathAS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgAspathAS.setStatus("current")


class _IpCurCfgAspathAction_Type(Integer32):
    """Custom type ipCurCfgAspathAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("permit", 1),
          ("deny", 2))
    )


_IpCurCfgAspathAction_Type.__name__ = "Integer32"
_IpCurCfgAspathAction_Object = MibTableColumn
ipCurCfgAspathAction = _IpCurCfgAspathAction_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 8, 1, 4),
    _IpCurCfgAspathAction_Type()
)
ipCurCfgAspathAction.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgAspathAction.setStatus("current")


class _IpCurCfgAspathState_Type(Integer32):
    """Custom type ipCurCfgAspathState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IpCurCfgAspathState_Type.__name__ = "Integer32"
_IpCurCfgAspathState_Object = MibTableColumn
ipCurCfgAspathState = _IpCurCfgAspathState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 8, 1, 5),
    _IpCurCfgAspathState_Type()
)
ipCurCfgAspathState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgAspathState.setStatus("current")
_IpNewCfgAspathTable_Object = MibTable
ipNewCfgAspathTable = _IpNewCfgAspathTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 9)
)
if mibBuilder.loadTexts:
    ipNewCfgAspathTable.setStatus("current")
_IpNewCfgAspathEntry_Object = MibTableRow
ipNewCfgAspathEntry = _IpNewCfgAspathEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 9, 1)
)
ipNewCfgAspathEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipNewCfgAspathRmapIndex"),
    (0, "IBM-GbTOR-G8264T-MIB", "ipNewCfgAspathIndex"),
)
if mibBuilder.loadTexts:
    ipNewCfgAspathEntry.setStatus("current")
_IpNewCfgAspathRmapIndex_Type = Integer32
_IpNewCfgAspathRmapIndex_Object = MibTableColumn
ipNewCfgAspathRmapIndex = _IpNewCfgAspathRmapIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 9, 1, 1),
    _IpNewCfgAspathRmapIndex_Type()
)
ipNewCfgAspathRmapIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipNewCfgAspathRmapIndex.setStatus("current")
_IpNewCfgAspathIndex_Type = Integer32
_IpNewCfgAspathIndex_Object = MibTableColumn
ipNewCfgAspathIndex = _IpNewCfgAspathIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 9, 1, 2),
    _IpNewCfgAspathIndex_Type()
)
ipNewCfgAspathIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipNewCfgAspathIndex.setStatus("current")


class _IpNewCfgAspathAS_Type(Integer32):
    """Custom type ipNewCfgAspathAS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_IpNewCfgAspathAS_Type.__name__ = "Integer32"
_IpNewCfgAspathAS_Object = MibTableColumn
ipNewCfgAspathAS = _IpNewCfgAspathAS_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 9, 1, 3),
    _IpNewCfgAspathAS_Type()
)
ipNewCfgAspathAS.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgAspathAS.setStatus("current")


class _IpNewCfgAspathAction_Type(Integer32):
    """Custom type ipNewCfgAspathAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("permit", 1),
          ("deny", 2))
    )


_IpNewCfgAspathAction_Type.__name__ = "Integer32"
_IpNewCfgAspathAction_Object = MibTableColumn
ipNewCfgAspathAction = _IpNewCfgAspathAction_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 9, 1, 4),
    _IpNewCfgAspathAction_Type()
)
ipNewCfgAspathAction.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgAspathAction.setStatus("current")


class _IpNewCfgAspathState_Type(Integer32):
    """Custom type ipNewCfgAspathState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IpNewCfgAspathState_Type.__name__ = "Integer32"
_IpNewCfgAspathState_Object = MibTableColumn
ipNewCfgAspathState = _IpNewCfgAspathState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 9, 1, 5),
    _IpNewCfgAspathState_Type()
)
ipNewCfgAspathState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgAspathState.setStatus("current")


class _IpNewCfgAspathDelete_Type(Integer32):
    """Custom type ipNewCfgAspathDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_IpNewCfgAspathDelete_Type.__name__ = "Integer32"
_IpNewCfgAspathDelete_Object = MibTableColumn
ipNewCfgAspathDelete = _IpNewCfgAspathDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 11, 9, 1, 6),
    _IpNewCfgAspathDelete_Type()
)
ipNewCfgAspathDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgAspathDelete.setStatus("current")
_BgpCfg_ObjectIdentity = ObjectIdentity
bgpCfg = _BgpCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12)
)
_BgpGeneral_ObjectIdentity = ObjectIdentity
bgpGeneral = _BgpGeneral_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 1)
)


class _BgpCurCfgState_Type(Integer32):
    """Custom type bgpCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_BgpCurCfgState_Type.__name__ = "Integer32"
_BgpCurCfgState_Object = MibScalar
bgpCurCfgState = _BgpCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 1, 1),
    _BgpCurCfgState_Type()
)
bgpCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgState.setStatus("current")


class _BgpNewCfgState_Type(Integer32):
    """Custom type bgpNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_BgpNewCfgState_Type.__name__ = "Integer32"
_BgpNewCfgState_Object = MibScalar
bgpNewCfgState = _BgpNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 1, 2),
    _BgpNewCfgState_Type()
)
bgpNewCfgState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bgpNewCfgState.setStatus("current")


class _BgpCurCfgLocalPref_Type(Unsigned32):
    """Custom type bgpCurCfgLocalPref based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967294),
    )


_BgpCurCfgLocalPref_Type.__name__ = "Unsigned32"
_BgpCurCfgLocalPref_Object = MibScalar
bgpCurCfgLocalPref = _BgpCurCfgLocalPref_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 1, 3),
    _BgpCurCfgLocalPref_Type()
)
bgpCurCfgLocalPref.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgLocalPref.setStatus("current")


class _BgpNewCfgLocalPref_Type(Unsigned32):
    """Custom type bgpNewCfgLocalPref based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967294),
    )


_BgpNewCfgLocalPref_Type.__name__ = "Unsigned32"
_BgpNewCfgLocalPref_Object = MibScalar
bgpNewCfgLocalPref = _BgpNewCfgLocalPref_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 1, 4),
    _BgpNewCfgLocalPref_Type()
)
bgpNewCfgLocalPref.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bgpNewCfgLocalPref.setStatus("current")


class _BgpCurCfgASNumber_Type(Integer32):
    """Custom type bgpCurCfgASNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_BgpCurCfgASNumber_Type.__name__ = "Integer32"
_BgpCurCfgASNumber_Object = MibScalar
bgpCurCfgASNumber = _BgpCurCfgASNumber_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 1, 5),
    _BgpCurCfgASNumber_Type()
)
bgpCurCfgASNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgASNumber.setStatus("current")


class _BgpNewCfgASNumber_Type(Integer32):
    """Custom type bgpNewCfgASNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_BgpNewCfgASNumber_Type.__name__ = "Integer32"
_BgpNewCfgASNumber_Object = MibScalar
bgpNewCfgASNumber = _BgpNewCfgASNumber_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 1, 6),
    _BgpNewCfgASNumber_Type()
)
bgpNewCfgASNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bgpNewCfgASNumber.setStatus("current")


class _BgpCurCfgEbgpMaxPaths_Type(Unsigned32):
    """Custom type bgpCurCfgEbgpMaxPaths based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967294),
    )


_BgpCurCfgEbgpMaxPaths_Type.__name__ = "Unsigned32"
_BgpCurCfgEbgpMaxPaths_Object = MibScalar
bgpCurCfgEbgpMaxPaths = _BgpCurCfgEbgpMaxPaths_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 1, 7),
    _BgpCurCfgEbgpMaxPaths_Type()
)
bgpCurCfgEbgpMaxPaths.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgEbgpMaxPaths.setStatus("current")


class _BgpNewCfgEbgpMaxPaths_Type(Unsigned32):
    """Custom type bgpNewCfgEbgpMaxPaths based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967294),
    )


_BgpNewCfgEbgpMaxPaths_Type.__name__ = "Unsigned32"
_BgpNewCfgEbgpMaxPaths_Object = MibScalar
bgpNewCfgEbgpMaxPaths = _BgpNewCfgEbgpMaxPaths_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 1, 8),
    _BgpNewCfgEbgpMaxPaths_Type()
)
bgpNewCfgEbgpMaxPaths.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bgpNewCfgEbgpMaxPaths.setStatus("current")


class _BgpCurCfgIbgpMaxPaths_Type(Unsigned32):
    """Custom type bgpCurCfgIbgpMaxPaths based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967294),
    )


_BgpCurCfgIbgpMaxPaths_Type.__name__ = "Unsigned32"
_BgpCurCfgIbgpMaxPaths_Object = MibScalar
bgpCurCfgIbgpMaxPaths = _BgpCurCfgIbgpMaxPaths_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 1, 9),
    _BgpCurCfgIbgpMaxPaths_Type()
)
bgpCurCfgIbgpMaxPaths.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgIbgpMaxPaths.setStatus("current")


class _BgpNewCfgIbgpMaxPaths_Type(Unsigned32):
    """Custom type bgpNewCfgIbgpMaxPaths based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967294),
    )


_BgpNewCfgIbgpMaxPaths_Type.__name__ = "Unsigned32"
_BgpNewCfgIbgpMaxPaths_Object = MibScalar
bgpNewCfgIbgpMaxPaths = _BgpNewCfgIbgpMaxPaths_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 1, 10),
    _BgpNewCfgIbgpMaxPaths_Type()
)
bgpNewCfgIbgpMaxPaths.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bgpNewCfgIbgpMaxPaths.setStatus("current")


class _BgpCurCfgAsn4Comp_Type(Integer32):
    """Custom type bgpCurCfgAsn4Comp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_BgpCurCfgAsn4Comp_Type.__name__ = "Integer32"
_BgpCurCfgAsn4Comp_Object = MibScalar
bgpCurCfgAsn4Comp = _BgpCurCfgAsn4Comp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 1, 11),
    _BgpCurCfgAsn4Comp_Type()
)
bgpCurCfgAsn4Comp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgAsn4Comp.setStatus("current")


class _BgpNewCfgAsn4Comp_Type(Integer32):
    """Custom type bgpNewCfgAsn4Comp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_BgpNewCfgAsn4Comp_Type.__name__ = "Integer32"
_BgpNewCfgAsn4Comp_Object = MibScalar
bgpNewCfgAsn4Comp = _BgpNewCfgAsn4Comp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 1, 12),
    _BgpNewCfgAsn4Comp_Type()
)
bgpNewCfgAsn4Comp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bgpNewCfgAsn4Comp.setStatus("current")


class _BgpCurCfgDscp_Type(Integer32):
    """Custom type bgpCurCfgDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_BgpCurCfgDscp_Type.__name__ = "Integer32"
_BgpCurCfgDscp_Object = MibScalar
bgpCurCfgDscp = _BgpCurCfgDscp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 1, 13),
    _BgpCurCfgDscp_Type()
)
bgpCurCfgDscp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgDscp.setStatus("current")


class _BgpNewCfgDscp_Type(Integer32):
    """Custom type bgpNewCfgDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_BgpNewCfgDscp_Type.__name__ = "Integer32"
_BgpNewCfgDscp_Object = MibScalar
bgpNewCfgDscp = _BgpNewCfgDscp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 1, 14),
    _BgpNewCfgDscp_Type()
)
bgpNewCfgDscp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bgpNewCfgDscp.setStatus("current")
_BgpNewCfgClusterId_Type = IpAddress
_BgpNewCfgClusterId_Object = MibScalar
bgpNewCfgClusterId = _BgpNewCfgClusterId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 1, 15),
    _BgpNewCfgClusterId_Type()
)
bgpNewCfgClusterId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bgpNewCfgClusterId.setStatus("current")
_BgpCurCfgClusterId_Type = IpAddress
_BgpCurCfgClusterId_Object = MibScalar
bgpCurCfgClusterId = _BgpCurCfgClusterId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 1, 16),
    _BgpCurCfgClusterId_Type()
)
bgpCurCfgClusterId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgClusterId.setStatus("current")


class _BgpNewCfgClientToClientReflection_Type(Integer32):
    """Custom type bgpNewCfgClientToClientReflection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_BgpNewCfgClientToClientReflection_Type.__name__ = "Integer32"
_BgpNewCfgClientToClientReflection_Object = MibScalar
bgpNewCfgClientToClientReflection = _BgpNewCfgClientToClientReflection_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 1, 17),
    _BgpNewCfgClientToClientReflection_Type()
)
bgpNewCfgClientToClientReflection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bgpNewCfgClientToClientReflection.setStatus("current")


class _BgpCurCfgClientToClientReflection_Type(Integer32):
    """Custom type bgpCurCfgClientToClientReflection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_BgpCurCfgClientToClientReflection_Type.__name__ = "Integer32"
_BgpCurCfgClientToClientReflection_Object = MibScalar
bgpCurCfgClientToClientReflection = _BgpCurCfgClientToClientReflection_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 1, 18),
    _BgpCurCfgClientToClientReflection_Type()
)
bgpCurCfgClientToClientReflection.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgClientToClientReflection.setStatus("current")
_BgpPeerTableMax_Type = Integer32
_BgpPeerTableMax_Object = MibScalar
bgpPeerTableMax = _BgpPeerTableMax_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 2),
    _BgpPeerTableMax_Type()
)
bgpPeerTableMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpPeerTableMax.setStatus("current")
_BgpCurCfgPeerTable_Object = MibTable
bgpCurCfgPeerTable = _BgpCurCfgPeerTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 3)
)
if mibBuilder.loadTexts:
    bgpCurCfgPeerTable.setStatus("current")
_BgpCurCfgPeerEntry_Object = MibTableRow
bgpCurCfgPeerEntry = _BgpCurCfgPeerEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 3, 1)
)
bgpCurCfgPeerEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "bgpCurCfgPeerIndex"),
)
if mibBuilder.loadTexts:
    bgpCurCfgPeerEntry.setStatus("current")
_BgpCurCfgPeerIndex_Type = Integer32
_BgpCurCfgPeerIndex_Object = MibTableColumn
bgpCurCfgPeerIndex = _BgpCurCfgPeerIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 3, 1, 1),
    _BgpCurCfgPeerIndex_Type()
)
bgpCurCfgPeerIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgPeerIndex.setStatus("current")
_BgpCurCfgPeerRemoteAddr_Type = IpAddress
_BgpCurCfgPeerRemoteAddr_Object = MibTableColumn
bgpCurCfgPeerRemoteAddr = _BgpCurCfgPeerRemoteAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 3, 1, 2),
    _BgpCurCfgPeerRemoteAddr_Type()
)
bgpCurCfgPeerRemoteAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgPeerRemoteAddr.setStatus("current")


class _BgpCurCfgPeerRemoteAs_Type(Integer32):
    """Custom type bgpCurCfgPeerRemoteAs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_BgpCurCfgPeerRemoteAs_Type.__name__ = "Integer32"
_BgpCurCfgPeerRemoteAs_Object = MibTableColumn
bgpCurCfgPeerRemoteAs = _BgpCurCfgPeerRemoteAs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 3, 1, 3),
    _BgpCurCfgPeerRemoteAs_Type()
)
bgpCurCfgPeerRemoteAs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgPeerRemoteAs.setStatus("current")


class _BgpCurCfgPeerTtl_Type(Integer32):
    """Custom type bgpCurCfgPeerTtl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_BgpCurCfgPeerTtl_Type.__name__ = "Integer32"
_BgpCurCfgPeerTtl_Object = MibTableColumn
bgpCurCfgPeerTtl = _BgpCurCfgPeerTtl_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 3, 1, 4),
    _BgpCurCfgPeerTtl_Type()
)
bgpCurCfgPeerTtl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgPeerTtl.setStatus("current")


class _BgpCurCfgPeerState_Type(Integer32):
    """Custom type bgpCurCfgPeerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_BgpCurCfgPeerState_Type.__name__ = "Integer32"
_BgpCurCfgPeerState_Object = MibTableColumn
bgpCurCfgPeerState = _BgpCurCfgPeerState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 3, 1, 5),
    _BgpCurCfgPeerState_Type()
)
bgpCurCfgPeerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgPeerState.setStatus("current")


class _BgpCurCfgPeerMetric_Type(Unsigned32):
    """Custom type bgpCurCfgPeerMetric based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967294),
    )


_BgpCurCfgPeerMetric_Type.__name__ = "Unsigned32"
_BgpCurCfgPeerMetric_Object = MibTableColumn
bgpCurCfgPeerMetric = _BgpCurCfgPeerMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 3, 1, 10),
    _BgpCurCfgPeerMetric_Type()
)
bgpCurCfgPeerMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgPeerMetric.setStatus("current")


class _BgpCurCfgPeerDefaultAction_Type(Integer32):
    """Custom type bgpCurCfgPeerDefaultAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("import", 2),
          ("originate", 3),
          ("redistribute", 4))
    )


_BgpCurCfgPeerDefaultAction_Type.__name__ = "Integer32"
_BgpCurCfgPeerDefaultAction_Object = MibTableColumn
bgpCurCfgPeerDefaultAction = _BgpCurCfgPeerDefaultAction_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 3, 1, 11),
    _BgpCurCfgPeerDefaultAction_Type()
)
bgpCurCfgPeerDefaultAction.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgPeerDefaultAction.setStatus("current")


class _BgpCurCfgPeerOspfState_Type(Integer32):
    """Custom type bgpCurCfgPeerOspfState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_BgpCurCfgPeerOspfState_Type.__name__ = "Integer32"
_BgpCurCfgPeerOspfState_Object = MibTableColumn
bgpCurCfgPeerOspfState = _BgpCurCfgPeerOspfState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 3, 1, 12),
    _BgpCurCfgPeerOspfState_Type()
)
bgpCurCfgPeerOspfState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgPeerOspfState.setStatus("current")


class _BgpCurCfgPeerFixedState_Type(Integer32):
    """Custom type bgpCurCfgPeerFixedState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_BgpCurCfgPeerFixedState_Type.__name__ = "Integer32"
_BgpCurCfgPeerFixedState_Object = MibTableColumn
bgpCurCfgPeerFixedState = _BgpCurCfgPeerFixedState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 3, 1, 13),
    _BgpCurCfgPeerFixedState_Type()
)
bgpCurCfgPeerFixedState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgPeerFixedState.setStatus("current")


class _BgpCurCfgPeerStaticState_Type(Integer32):
    """Custom type bgpCurCfgPeerStaticState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_BgpCurCfgPeerStaticState_Type.__name__ = "Integer32"
_BgpCurCfgPeerStaticState_Object = MibTableColumn
bgpCurCfgPeerStaticState = _BgpCurCfgPeerStaticState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 3, 1, 14),
    _BgpCurCfgPeerStaticState_Type()
)
bgpCurCfgPeerStaticState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgPeerStaticState.setStatus("current")
_BgpCurCfgPeerInRmapList_Type = OctetString
_BgpCurCfgPeerInRmapList_Object = MibTableColumn
bgpCurCfgPeerInRmapList = _BgpCurCfgPeerInRmapList_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 3, 1, 16),
    _BgpCurCfgPeerInRmapList_Type()
)
bgpCurCfgPeerInRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgPeerInRmapList.setStatus("current")
_BgpCurCfgPeerOutRmapList_Type = OctetString
_BgpCurCfgPeerOutRmapList_Object = MibTableColumn
bgpCurCfgPeerOutRmapList = _BgpCurCfgPeerOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 3, 1, 17),
    _BgpCurCfgPeerOutRmapList_Type()
)
bgpCurCfgPeerOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgPeerOutRmapList.setStatus("current")


class _BgpCurCfgPeerHold_Type(Integer32):
    """Custom type bgpCurCfgPeerHold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_BgpCurCfgPeerHold_Type.__name__ = "Integer32"
_BgpCurCfgPeerHold_Object = MibTableColumn
bgpCurCfgPeerHold = _BgpCurCfgPeerHold_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 3, 1, 18),
    _BgpCurCfgPeerHold_Type()
)
bgpCurCfgPeerHold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgPeerHold.setStatus("current")


class _BgpCurCfgPeerAlive_Type(Integer32):
    """Custom type bgpCurCfgPeerAlive based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 21845),
    )


_BgpCurCfgPeerAlive_Type.__name__ = "Integer32"
_BgpCurCfgPeerAlive_Object = MibTableColumn
bgpCurCfgPeerAlive = _BgpCurCfgPeerAlive_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 3, 1, 19),
    _BgpCurCfgPeerAlive_Type()
)
bgpCurCfgPeerAlive.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgPeerAlive.setStatus("current")


class _BgpCurCfgPeerAdvert_Type(Integer32):
    """Custom type bgpCurCfgPeerAdvert based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_BgpCurCfgPeerAdvert_Type.__name__ = "Integer32"
_BgpCurCfgPeerAdvert_Object = MibTableColumn
bgpCurCfgPeerAdvert = _BgpCurCfgPeerAdvert_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 3, 1, 20),
    _BgpCurCfgPeerAdvert_Type()
)
bgpCurCfgPeerAdvert.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgPeerAdvert.setStatus("current")


class _BgpCurCfgPeerRetry_Type(Integer32):
    """Custom type bgpCurCfgPeerRetry based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_BgpCurCfgPeerRetry_Type.__name__ = "Integer32"
_BgpCurCfgPeerRetry_Object = MibTableColumn
bgpCurCfgPeerRetry = _BgpCurCfgPeerRetry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 3, 1, 21),
    _BgpCurCfgPeerRetry_Type()
)
bgpCurCfgPeerRetry.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgPeerRetry.setStatus("current")


class _BgpCurCfgPeerOrig_Type(Integer32):
    """Custom type bgpCurCfgPeerOrig based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_BgpCurCfgPeerOrig_Type.__name__ = "Integer32"
_BgpCurCfgPeerOrig_Object = MibTableColumn
bgpCurCfgPeerOrig = _BgpCurCfgPeerOrig_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 3, 1, 22),
    _BgpCurCfgPeerOrig_Type()
)
bgpCurCfgPeerOrig.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgPeerOrig.setStatus("current")


class _BgpCurCfgPeerRipState_Type(Integer32):
    """Custom type bgpCurCfgPeerRipState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_BgpCurCfgPeerRipState_Type.__name__ = "Integer32"
_BgpCurCfgPeerRipState_Object = MibTableColumn
bgpCurCfgPeerRipState = _BgpCurCfgPeerRipState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 3, 1, 23),
    _BgpCurCfgPeerRipState_Type()
)
bgpCurCfgPeerRipState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgPeerRipState.setStatus("current")


class _BgpCurCfgPeerPassword_Type(DisplayString):
    """Custom type bgpCurCfgPeerPassword based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_BgpCurCfgPeerPassword_Type.__name__ = "DisplayString"
_BgpCurCfgPeerPassword_Object = MibTableColumn
bgpCurCfgPeerPassword = _BgpCurCfgPeerPassword_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 3, 1, 24),
    _BgpCurCfgPeerPassword_Type()
)
bgpCurCfgPeerPassword.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgPeerPassword.setStatus("current")


class _BgpCurCfgPeerPassive_Type(Integer32):
    """Custom type bgpCurCfgPeerPassive based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_BgpCurCfgPeerPassive_Type.__name__ = "Integer32"
_BgpCurCfgPeerPassive_Object = MibTableColumn
bgpCurCfgPeerPassive = _BgpCurCfgPeerPassive_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 3, 1, 25),
    _BgpCurCfgPeerPassive_Type()
)
bgpCurCfgPeerPassive.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgPeerPassive.setStatus("current")
_BgpCurCfgPeerUpdateSrcIf_Type = Integer32
_BgpCurCfgPeerUpdateSrcIf_Object = MibTableColumn
bgpCurCfgPeerUpdateSrcIf = _BgpCurCfgPeerUpdateSrcIf_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 3, 1, 30),
    _BgpCurCfgPeerUpdateSrcIf_Type()
)
bgpCurCfgPeerUpdateSrcIf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgPeerUpdateSrcIf.setStatus("current")
_BgpCurCfgPeerUpdateSrcLoopIf_Type = Integer32
_BgpCurCfgPeerUpdateSrcLoopIf_Object = MibTableColumn
bgpCurCfgPeerUpdateSrcLoopIf = _BgpCurCfgPeerUpdateSrcLoopIf_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 3, 1, 31),
    _BgpCurCfgPeerUpdateSrcLoopIf_Type()
)
bgpCurCfgPeerUpdateSrcLoopIf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgPeerUpdateSrcLoopIf.setStatus("current")


class _BgpCurCfgPeerTtlSecHops_Type(Integer32):
    """Custom type bgpCurCfgPeerTtlSecHops based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 254),
    )


_BgpCurCfgPeerTtlSecHops_Type.__name__ = "Integer32"
_BgpCurCfgPeerTtlSecHops_Object = MibTableColumn
bgpCurCfgPeerTtlSecHops = _BgpCurCfgPeerTtlSecHops_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 3, 1, 32),
    _BgpCurCfgPeerTtlSecHops_Type()
)
bgpCurCfgPeerTtlSecHops.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgPeerTtlSecHops.setStatus("current")


class _BgpCurCfgPeerNexthopSelf_Type(Integer32):
    """Custom type bgpCurCfgPeerNexthopSelf based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_BgpCurCfgPeerNexthopSelf_Type.__name__ = "Integer32"
_BgpCurCfgPeerNexthopSelf_Object = MibTableColumn
bgpCurCfgPeerNexthopSelf = _BgpCurCfgPeerNexthopSelf_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 3, 1, 33),
    _BgpCurCfgPeerNexthopSelf_Type()
)
bgpCurCfgPeerNexthopSelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgPeerNexthopSelf.setStatus("current")


class _BgpCurCfgPeerClient_Type(Integer32):
    """Custom type bgpCurCfgPeerClient based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_BgpCurCfgPeerClient_Type.__name__ = "Integer32"
_BgpCurCfgPeerClient_Object = MibTableColumn
bgpCurCfgPeerClient = _BgpCurCfgPeerClient_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 3, 1, 34),
    _BgpCurCfgPeerClient_Type()
)
bgpCurCfgPeerClient.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgPeerClient.setStatus("current")
_BgpNewCfgPeerTable_Object = MibTable
bgpNewCfgPeerTable = _BgpNewCfgPeerTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 4)
)
if mibBuilder.loadTexts:
    bgpNewCfgPeerTable.setStatus("current")
_BgpNewCfgPeerEntry_Object = MibTableRow
bgpNewCfgPeerEntry = _BgpNewCfgPeerEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 4, 1)
)
bgpNewCfgPeerEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "bgpNewCfgPeerIndex"),
)
if mibBuilder.loadTexts:
    bgpNewCfgPeerEntry.setStatus("current")
_BgpNewCfgPeerIndex_Type = Integer32
_BgpNewCfgPeerIndex_Object = MibTableColumn
bgpNewCfgPeerIndex = _BgpNewCfgPeerIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 4, 1, 1),
    _BgpNewCfgPeerIndex_Type()
)
bgpNewCfgPeerIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpNewCfgPeerIndex.setStatus("current")
_BgpNewCfgPeerRemoteAddr_Type = IpAddress
_BgpNewCfgPeerRemoteAddr_Object = MibTableColumn
bgpNewCfgPeerRemoteAddr = _BgpNewCfgPeerRemoteAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 4, 1, 2),
    _BgpNewCfgPeerRemoteAddr_Type()
)
bgpNewCfgPeerRemoteAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgPeerRemoteAddr.setStatus("current")


class _BgpNewCfgPeerRemoteAs_Type(Integer32):
    """Custom type bgpNewCfgPeerRemoteAs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_BgpNewCfgPeerRemoteAs_Type.__name__ = "Integer32"
_BgpNewCfgPeerRemoteAs_Object = MibTableColumn
bgpNewCfgPeerRemoteAs = _BgpNewCfgPeerRemoteAs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 4, 1, 3),
    _BgpNewCfgPeerRemoteAs_Type()
)
bgpNewCfgPeerRemoteAs.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgPeerRemoteAs.setStatus("current")


class _BgpNewCfgPeerTtl_Type(Integer32):
    """Custom type bgpNewCfgPeerTtl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_BgpNewCfgPeerTtl_Type.__name__ = "Integer32"
_BgpNewCfgPeerTtl_Object = MibTableColumn
bgpNewCfgPeerTtl = _BgpNewCfgPeerTtl_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 4, 1, 4),
    _BgpNewCfgPeerTtl_Type()
)
bgpNewCfgPeerTtl.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgPeerTtl.setStatus("current")


class _BgpNewCfgPeerState_Type(Integer32):
    """Custom type bgpNewCfgPeerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_BgpNewCfgPeerState_Type.__name__ = "Integer32"
_BgpNewCfgPeerState_Object = MibTableColumn
bgpNewCfgPeerState = _BgpNewCfgPeerState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 4, 1, 5),
    _BgpNewCfgPeerState_Type()
)
bgpNewCfgPeerState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgPeerState.setStatus("current")


class _BgpNewCfgPeerDelete_Type(Integer32):
    """Custom type bgpNewCfgPeerDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_BgpNewCfgPeerDelete_Type.__name__ = "Integer32"
_BgpNewCfgPeerDelete_Object = MibTableColumn
bgpNewCfgPeerDelete = _BgpNewCfgPeerDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 4, 1, 6),
    _BgpNewCfgPeerDelete_Type()
)
bgpNewCfgPeerDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgPeerDelete.setStatus("current")


class _BgpNewCfgPeerMetric_Type(Unsigned32):
    """Custom type bgpNewCfgPeerMetric based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967294),
    )


_BgpNewCfgPeerMetric_Type.__name__ = "Unsigned32"
_BgpNewCfgPeerMetric_Object = MibTableColumn
bgpNewCfgPeerMetric = _BgpNewCfgPeerMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 4, 1, 10),
    _BgpNewCfgPeerMetric_Type()
)
bgpNewCfgPeerMetric.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgPeerMetric.setStatus("current")


class _BgpNewCfgPeerDefaultAction_Type(Integer32):
    """Custom type bgpNewCfgPeerDefaultAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("import", 2),
          ("originate", 3),
          ("redistribute", 4))
    )


_BgpNewCfgPeerDefaultAction_Type.__name__ = "Integer32"
_BgpNewCfgPeerDefaultAction_Object = MibTableColumn
bgpNewCfgPeerDefaultAction = _BgpNewCfgPeerDefaultAction_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 4, 1, 11),
    _BgpNewCfgPeerDefaultAction_Type()
)
bgpNewCfgPeerDefaultAction.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgPeerDefaultAction.setStatus("current")


class _BgpNewCfgPeerOspfState_Type(Integer32):
    """Custom type bgpNewCfgPeerOspfState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_BgpNewCfgPeerOspfState_Type.__name__ = "Integer32"
_BgpNewCfgPeerOspfState_Object = MibTableColumn
bgpNewCfgPeerOspfState = _BgpNewCfgPeerOspfState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 4, 1, 12),
    _BgpNewCfgPeerOspfState_Type()
)
bgpNewCfgPeerOspfState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgPeerOspfState.setStatus("current")


class _BgpNewCfgPeerFixedState_Type(Integer32):
    """Custom type bgpNewCfgPeerFixedState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_BgpNewCfgPeerFixedState_Type.__name__ = "Integer32"
_BgpNewCfgPeerFixedState_Object = MibTableColumn
bgpNewCfgPeerFixedState = _BgpNewCfgPeerFixedState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 4, 1, 13),
    _BgpNewCfgPeerFixedState_Type()
)
bgpNewCfgPeerFixedState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgPeerFixedState.setStatus("current")


class _BgpNewCfgPeerStaticState_Type(Integer32):
    """Custom type bgpNewCfgPeerStaticState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_BgpNewCfgPeerStaticState_Type.__name__ = "Integer32"
_BgpNewCfgPeerStaticState_Object = MibTableColumn
bgpNewCfgPeerStaticState = _BgpNewCfgPeerStaticState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 4, 1, 14),
    _BgpNewCfgPeerStaticState_Type()
)
bgpNewCfgPeerStaticState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgPeerStaticState.setStatus("current")
_BgpNewCfgPeerInRmapList_Type = OctetString
_BgpNewCfgPeerInRmapList_Object = MibTableColumn
bgpNewCfgPeerInRmapList = _BgpNewCfgPeerInRmapList_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 4, 1, 16),
    _BgpNewCfgPeerInRmapList_Type()
)
bgpNewCfgPeerInRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpNewCfgPeerInRmapList.setStatus("current")
_BgpNewCfgPeerOutRmapList_Type = OctetString
_BgpNewCfgPeerOutRmapList_Object = MibTableColumn
bgpNewCfgPeerOutRmapList = _BgpNewCfgPeerOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 4, 1, 17),
    _BgpNewCfgPeerOutRmapList_Type()
)
bgpNewCfgPeerOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpNewCfgPeerOutRmapList.setStatus("current")
_BgpNewCfgPeerAddInRmap_Type = Integer32
_BgpNewCfgPeerAddInRmap_Object = MibTableColumn
bgpNewCfgPeerAddInRmap = _BgpNewCfgPeerAddInRmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 4, 1, 18),
    _BgpNewCfgPeerAddInRmap_Type()
)
bgpNewCfgPeerAddInRmap.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgPeerAddInRmap.setStatus("current")
_BgpNewCfgPeerAddOutRmap_Type = Integer32
_BgpNewCfgPeerAddOutRmap_Object = MibTableColumn
bgpNewCfgPeerAddOutRmap = _BgpNewCfgPeerAddOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 4, 1, 19),
    _BgpNewCfgPeerAddOutRmap_Type()
)
bgpNewCfgPeerAddOutRmap.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgPeerAddOutRmap.setStatus("current")
_BgpNewCfgPeerRemoveInRmap_Type = Integer32
_BgpNewCfgPeerRemoveInRmap_Object = MibTableColumn
bgpNewCfgPeerRemoveInRmap = _BgpNewCfgPeerRemoveInRmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 4, 1, 20),
    _BgpNewCfgPeerRemoveInRmap_Type()
)
bgpNewCfgPeerRemoveInRmap.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgPeerRemoveInRmap.setStatus("current")
_BgpNewCfgPeerRemoveOutRmap_Type = Integer32
_BgpNewCfgPeerRemoveOutRmap_Object = MibTableColumn
bgpNewCfgPeerRemoveOutRmap = _BgpNewCfgPeerRemoveOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 4, 1, 21),
    _BgpNewCfgPeerRemoveOutRmap_Type()
)
bgpNewCfgPeerRemoveOutRmap.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgPeerRemoveOutRmap.setStatus("current")


class _BgpNewCfgPeerHold_Type(Integer32):
    """Custom type bgpNewCfgPeerHold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_BgpNewCfgPeerHold_Type.__name__ = "Integer32"
_BgpNewCfgPeerHold_Object = MibTableColumn
bgpNewCfgPeerHold = _BgpNewCfgPeerHold_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 4, 1, 22),
    _BgpNewCfgPeerHold_Type()
)
bgpNewCfgPeerHold.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgPeerHold.setStatus("current")


class _BgpNewCfgPeerAlive_Type(Integer32):
    """Custom type bgpNewCfgPeerAlive based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 21845),
    )


_BgpNewCfgPeerAlive_Type.__name__ = "Integer32"
_BgpNewCfgPeerAlive_Object = MibTableColumn
bgpNewCfgPeerAlive = _BgpNewCfgPeerAlive_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 4, 1, 23),
    _BgpNewCfgPeerAlive_Type()
)
bgpNewCfgPeerAlive.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgPeerAlive.setStatus("current")


class _BgpNewCfgPeerAdvert_Type(Integer32):
    """Custom type bgpNewCfgPeerAdvert based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_BgpNewCfgPeerAdvert_Type.__name__ = "Integer32"
_BgpNewCfgPeerAdvert_Object = MibTableColumn
bgpNewCfgPeerAdvert = _BgpNewCfgPeerAdvert_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 4, 1, 24),
    _BgpNewCfgPeerAdvert_Type()
)
bgpNewCfgPeerAdvert.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgPeerAdvert.setStatus("current")


class _BgpNewCfgPeerRetry_Type(Integer32):
    """Custom type bgpNewCfgPeerRetry based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_BgpNewCfgPeerRetry_Type.__name__ = "Integer32"
_BgpNewCfgPeerRetry_Object = MibTableColumn
bgpNewCfgPeerRetry = _BgpNewCfgPeerRetry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 4, 1, 25),
    _BgpNewCfgPeerRetry_Type()
)
bgpNewCfgPeerRetry.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgPeerRetry.setStatus("current")


class _BgpNewCfgPeerOrig_Type(Integer32):
    """Custom type bgpNewCfgPeerOrig based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_BgpNewCfgPeerOrig_Type.__name__ = "Integer32"
_BgpNewCfgPeerOrig_Object = MibTableColumn
bgpNewCfgPeerOrig = _BgpNewCfgPeerOrig_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 4, 1, 26),
    _BgpNewCfgPeerOrig_Type()
)
bgpNewCfgPeerOrig.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgPeerOrig.setStatus("current")


class _BgpNewCfgPeerRipState_Type(Integer32):
    """Custom type bgpNewCfgPeerRipState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_BgpNewCfgPeerRipState_Type.__name__ = "Integer32"
_BgpNewCfgPeerRipState_Object = MibTableColumn
bgpNewCfgPeerRipState = _BgpNewCfgPeerRipState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 4, 1, 27),
    _BgpNewCfgPeerRipState_Type()
)
bgpNewCfgPeerRipState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgPeerRipState.setStatus("current")


class _BgpNewCfgPeerPassword_Type(DisplayString):
    """Custom type bgpNewCfgPeerPassword based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_BgpNewCfgPeerPassword_Type.__name__ = "DisplayString"
_BgpNewCfgPeerPassword_Object = MibTableColumn
bgpNewCfgPeerPassword = _BgpNewCfgPeerPassword_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 4, 1, 28),
    _BgpNewCfgPeerPassword_Type()
)
bgpNewCfgPeerPassword.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgPeerPassword.setStatus("current")


class _BgpNewCfgPeerPassive_Type(Integer32):
    """Custom type bgpNewCfgPeerPassive based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_BgpNewCfgPeerPassive_Type.__name__ = "Integer32"
_BgpNewCfgPeerPassive_Object = MibTableColumn
bgpNewCfgPeerPassive = _BgpNewCfgPeerPassive_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 4, 1, 29),
    _BgpNewCfgPeerPassive_Type()
)
bgpNewCfgPeerPassive.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgPeerPassive.setStatus("current")
_BgpNewCfgPeerUpdateSrcIf_Type = Integer32
_BgpNewCfgPeerUpdateSrcIf_Object = MibTableColumn
bgpNewCfgPeerUpdateSrcIf = _BgpNewCfgPeerUpdateSrcIf_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 4, 1, 30),
    _BgpNewCfgPeerUpdateSrcIf_Type()
)
bgpNewCfgPeerUpdateSrcIf.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgPeerUpdateSrcIf.setStatus("current")
_BgpNewCfgPeerUpdateSrcLoopIf_Type = Integer32
_BgpNewCfgPeerUpdateSrcLoopIf_Object = MibTableColumn
bgpNewCfgPeerUpdateSrcLoopIf = _BgpNewCfgPeerUpdateSrcLoopIf_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 4, 1, 31),
    _BgpNewCfgPeerUpdateSrcLoopIf_Type()
)
bgpNewCfgPeerUpdateSrcLoopIf.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgPeerUpdateSrcLoopIf.setStatus("current")


class _BgpNewCfgPeerTtlSecHops_Type(Integer32):
    """Custom type bgpNewCfgPeerTtlSecHops based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 254),
    )


_BgpNewCfgPeerTtlSecHops_Type.__name__ = "Integer32"
_BgpNewCfgPeerTtlSecHops_Object = MibTableColumn
bgpNewCfgPeerTtlSecHops = _BgpNewCfgPeerTtlSecHops_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 4, 1, 32),
    _BgpNewCfgPeerTtlSecHops_Type()
)
bgpNewCfgPeerTtlSecHops.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgPeerTtlSecHops.setStatus("current")


class _BgpNewCfgPeerNexthopSelf_Type(Integer32):
    """Custom type bgpNewCfgPeerNexthopSelf based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_BgpNewCfgPeerNexthopSelf_Type.__name__ = "Integer32"
_BgpNewCfgPeerNexthopSelf_Object = MibTableColumn
bgpNewCfgPeerNexthopSelf = _BgpNewCfgPeerNexthopSelf_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 4, 1, 33),
    _BgpNewCfgPeerNexthopSelf_Type()
)
bgpNewCfgPeerNexthopSelf.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgPeerNexthopSelf.setStatus("current")


class _BgpNewCfgPeerClient_Type(Integer32):
    """Custom type bgpNewCfgPeerClient based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_BgpNewCfgPeerClient_Type.__name__ = "Integer32"
_BgpNewCfgPeerClient_Object = MibTableColumn
bgpNewCfgPeerClient = _BgpNewCfgPeerClient_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 4, 1, 34),
    _BgpNewCfgPeerClient_Type()
)
bgpNewCfgPeerClient.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgPeerClient.setStatus("current")
_BgpAggrTableMax_Type = Integer32
_BgpAggrTableMax_Object = MibScalar
bgpAggrTableMax = _BgpAggrTableMax_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 5),
    _BgpAggrTableMax_Type()
)
bgpAggrTableMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpAggrTableMax.setStatus("current")
_BgpCurCfgAggrTable_Object = MibTable
bgpCurCfgAggrTable = _BgpCurCfgAggrTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 6)
)
if mibBuilder.loadTexts:
    bgpCurCfgAggrTable.setStatus("current")
_BgpCurCfgAggrEntry_Object = MibTableRow
bgpCurCfgAggrEntry = _BgpCurCfgAggrEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 6, 1)
)
bgpCurCfgAggrEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "bgpCurCfgAggrIndex"),
)
if mibBuilder.loadTexts:
    bgpCurCfgAggrEntry.setStatus("current")
_BgpCurCfgAggrIndex_Type = Integer32
_BgpCurCfgAggrIndex_Object = MibTableColumn
bgpCurCfgAggrIndex = _BgpCurCfgAggrIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 6, 1, 1),
    _BgpCurCfgAggrIndex_Type()
)
bgpCurCfgAggrIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgAggrIndex.setStatus("current")
_BgpCurCfgAggrAddr_Type = IpAddress
_BgpCurCfgAggrAddr_Object = MibTableColumn
bgpCurCfgAggrAddr = _BgpCurCfgAggrAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 6, 1, 2),
    _BgpCurCfgAggrAddr_Type()
)
bgpCurCfgAggrAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgAggrAddr.setStatus("current")
_BgpCurCfgAggrMask_Type = IpAddress
_BgpCurCfgAggrMask_Object = MibTableColumn
bgpCurCfgAggrMask = _BgpCurCfgAggrMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 6, 1, 3),
    _BgpCurCfgAggrMask_Type()
)
bgpCurCfgAggrMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgAggrMask.setStatus("current")


class _BgpCurCfgAggrState_Type(Integer32):
    """Custom type bgpCurCfgAggrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_BgpCurCfgAggrState_Type.__name__ = "Integer32"
_BgpCurCfgAggrState_Object = MibTableColumn
bgpCurCfgAggrState = _BgpCurCfgAggrState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 6, 1, 4),
    _BgpCurCfgAggrState_Type()
)
bgpCurCfgAggrState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgAggrState.setStatus("current")
_BgpNewCfgAggrTable_Object = MibTable
bgpNewCfgAggrTable = _BgpNewCfgAggrTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 7)
)
if mibBuilder.loadTexts:
    bgpNewCfgAggrTable.setStatus("current")
_BgpNewCfgAggrEntry_Object = MibTableRow
bgpNewCfgAggrEntry = _BgpNewCfgAggrEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 7, 1)
)
bgpNewCfgAggrEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "bgpNewCfgAggrIndex"),
)
if mibBuilder.loadTexts:
    bgpNewCfgAggrEntry.setStatus("current")
_BgpNewCfgAggrIndex_Type = Integer32
_BgpNewCfgAggrIndex_Object = MibTableColumn
bgpNewCfgAggrIndex = _BgpNewCfgAggrIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 7, 1, 1),
    _BgpNewCfgAggrIndex_Type()
)
bgpNewCfgAggrIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpNewCfgAggrIndex.setStatus("current")
_BgpNewCfgAggrAddr_Type = IpAddress
_BgpNewCfgAggrAddr_Object = MibTableColumn
bgpNewCfgAggrAddr = _BgpNewCfgAggrAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 7, 1, 2),
    _BgpNewCfgAggrAddr_Type()
)
bgpNewCfgAggrAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgAggrAddr.setStatus("current")
_BgpNewCfgAggrMask_Type = IpAddress
_BgpNewCfgAggrMask_Object = MibTableColumn
bgpNewCfgAggrMask = _BgpNewCfgAggrMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 7, 1, 3),
    _BgpNewCfgAggrMask_Type()
)
bgpNewCfgAggrMask.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgAggrMask.setStatus("current")


class _BgpNewCfgAggrState_Type(Integer32):
    """Custom type bgpNewCfgAggrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_BgpNewCfgAggrState_Type.__name__ = "Integer32"
_BgpNewCfgAggrState_Object = MibTableColumn
bgpNewCfgAggrState = _BgpNewCfgAggrState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 7, 1, 4),
    _BgpNewCfgAggrState_Type()
)
bgpNewCfgAggrState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgAggrState.setStatus("current")


class _BgpNewCfgAggrDelete_Type(Integer32):
    """Custom type bgpNewCfgAggrDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_BgpNewCfgAggrDelete_Type.__name__ = "Integer32"
_BgpNewCfgAggrDelete_Object = MibTableColumn
bgpNewCfgAggrDelete = _BgpNewCfgAggrDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 7, 1, 5),
    _BgpNewCfgAggrDelete_Type()
)
bgpNewCfgAggrDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgAggrDelete.setStatus("current")
_BgpGroupTableMax_Type = Integer32
_BgpGroupTableMax_Object = MibScalar
bgpGroupTableMax = _BgpGroupTableMax_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 8),
    _BgpGroupTableMax_Type()
)
bgpGroupTableMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpGroupTableMax.setStatus("current")
_BgpCurCfgGroupTable_Object = MibTable
bgpCurCfgGroupTable = _BgpCurCfgGroupTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 9)
)
if mibBuilder.loadTexts:
    bgpCurCfgGroupTable.setStatus("current")
_BgpCurCfgGroupEntry_Object = MibTableRow
bgpCurCfgGroupEntry = _BgpCurCfgGroupEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 9, 1)
)
bgpCurCfgGroupEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "bgpCurCfgGroupIndex"),
)
if mibBuilder.loadTexts:
    bgpCurCfgGroupEntry.setStatus("current")
_BgpCurCfgGroupIndex_Type = Integer32
_BgpCurCfgGroupIndex_Object = MibTableColumn
bgpCurCfgGroupIndex = _BgpCurCfgGroupIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 9, 1, 1),
    _BgpCurCfgGroupIndex_Type()
)
bgpCurCfgGroupIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgGroupIndex.setStatus("current")


class _BgpCurCfgGroupName_Type(DisplayString):
    """Custom type bgpCurCfgGroupName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_BgpCurCfgGroupName_Type.__name__ = "DisplayString"
_BgpCurCfgGroupName_Object = MibTableColumn
bgpCurCfgGroupName = _BgpCurCfgGroupName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 9, 1, 2),
    _BgpCurCfgGroupName_Type()
)
bgpCurCfgGroupName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgGroupName.setStatus("current")
_BgpCurCfgGroupRemoteAddr_Type = IpAddress
_BgpCurCfgGroupRemoteAddr_Object = MibTableColumn
bgpCurCfgGroupRemoteAddr = _BgpCurCfgGroupRemoteAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 9, 1, 3),
    _BgpCurCfgGroupRemoteAddr_Type()
)
bgpCurCfgGroupRemoteAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgGroupRemoteAddr.setStatus("current")
_BgpCurCfgGroupRemoteMask_Type = IpAddress
_BgpCurCfgGroupRemoteMask_Object = MibTableColumn
bgpCurCfgGroupRemoteMask = _BgpCurCfgGroupRemoteMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 9, 1, 4),
    _BgpCurCfgGroupRemoteMask_Type()
)
bgpCurCfgGroupRemoteMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgGroupRemoteMask.setStatus("current")


class _BgpCurCfgGroupLimit_Type(Integer32):
    """Custom type bgpCurCfgGroupLimit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_BgpCurCfgGroupLimit_Type.__name__ = "Integer32"
_BgpCurCfgGroupLimit_Object = MibTableColumn
bgpCurCfgGroupLimit = _BgpCurCfgGroupLimit_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 9, 1, 5),
    _BgpCurCfgGroupLimit_Type()
)
bgpCurCfgGroupLimit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgGroupLimit.setStatus("current")
_BgpCurCfgGroupUpdateSrcIf_Type = Integer32
_BgpCurCfgGroupUpdateSrcIf_Object = MibTableColumn
bgpCurCfgGroupUpdateSrcIf = _BgpCurCfgGroupUpdateSrcIf_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 9, 1, 6),
    _BgpCurCfgGroupUpdateSrcIf_Type()
)
bgpCurCfgGroupUpdateSrcIf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgGroupUpdateSrcIf.setStatus("current")
_BgpCurCfgGroupUpdateSrcLoopIf_Type = Integer32
_BgpCurCfgGroupUpdateSrcLoopIf_Object = MibTableColumn
bgpCurCfgGroupUpdateSrcLoopIf = _BgpCurCfgGroupUpdateSrcLoopIf_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 9, 1, 7),
    _BgpCurCfgGroupUpdateSrcLoopIf_Type()
)
bgpCurCfgGroupUpdateSrcLoopIf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgGroupUpdateSrcLoopIf.setStatus("current")


class _BgpCurCfgGroupHold_Type(Integer32):
    """Custom type bgpCurCfgGroupHold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_BgpCurCfgGroupHold_Type.__name__ = "Integer32"
_BgpCurCfgGroupHold_Object = MibTableColumn
bgpCurCfgGroupHold = _BgpCurCfgGroupHold_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 9, 1, 8),
    _BgpCurCfgGroupHold_Type()
)
bgpCurCfgGroupHold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgGroupHold.setStatus("current")


class _BgpCurCfgGroupAlive_Type(Integer32):
    """Custom type bgpCurCfgGroupAlive based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 21845),
    )


_BgpCurCfgGroupAlive_Type.__name__ = "Integer32"
_BgpCurCfgGroupAlive_Object = MibTableColumn
bgpCurCfgGroupAlive = _BgpCurCfgGroupAlive_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 9, 1, 9),
    _BgpCurCfgGroupAlive_Type()
)
bgpCurCfgGroupAlive.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgGroupAlive.setStatus("current")


class _BgpCurCfgGroupAdvert_Type(Integer32):
    """Custom type bgpCurCfgGroupAdvert based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_BgpCurCfgGroupAdvert_Type.__name__ = "Integer32"
_BgpCurCfgGroupAdvert_Object = MibTableColumn
bgpCurCfgGroupAdvert = _BgpCurCfgGroupAdvert_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 9, 1, 10),
    _BgpCurCfgGroupAdvert_Type()
)
bgpCurCfgGroupAdvert.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgGroupAdvert.setStatus("current")


class _BgpCurCfgGroupOrig_Type(Integer32):
    """Custom type bgpCurCfgGroupOrig based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_BgpCurCfgGroupOrig_Type.__name__ = "Integer32"
_BgpCurCfgGroupOrig_Object = MibTableColumn
bgpCurCfgGroupOrig = _BgpCurCfgGroupOrig_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 9, 1, 11),
    _BgpCurCfgGroupOrig_Type()
)
bgpCurCfgGroupOrig.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgGroupOrig.setStatus("current")


class _BgpCurCfgGroupMetric_Type(Unsigned32):
    """Custom type bgpCurCfgGroupMetric based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967294),
    )


_BgpCurCfgGroupMetric_Type.__name__ = "Unsigned32"
_BgpCurCfgGroupMetric_Object = MibTableColumn
bgpCurCfgGroupMetric = _BgpCurCfgGroupMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 9, 1, 12),
    _BgpCurCfgGroupMetric_Type()
)
bgpCurCfgGroupMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgGroupMetric.setStatus("current")


class _BgpCurCfgGroupTtl_Type(Integer32):
    """Custom type bgpCurCfgGroupTtl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_BgpCurCfgGroupTtl_Type.__name__ = "Integer32"
_BgpCurCfgGroupTtl_Object = MibTableColumn
bgpCurCfgGroupTtl = _BgpCurCfgGroupTtl_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 9, 1, 13),
    _BgpCurCfgGroupTtl_Type()
)
bgpCurCfgGroupTtl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgGroupTtl.setStatus("current")


class _BgpCurCfgGroupDefaultAction_Type(Integer32):
    """Custom type bgpCurCfgGroupDefaultAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("import", 2),
          ("originate", 3),
          ("redistribute", 4))
    )


_BgpCurCfgGroupDefaultAction_Type.__name__ = "Integer32"
_BgpCurCfgGroupDefaultAction_Object = MibTableColumn
bgpCurCfgGroupDefaultAction = _BgpCurCfgGroupDefaultAction_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 9, 1, 14),
    _BgpCurCfgGroupDefaultAction_Type()
)
bgpCurCfgGroupDefaultAction.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgGroupDefaultAction.setStatus("current")


class _BgpCurCfgGroupOspfState_Type(Integer32):
    """Custom type bgpCurCfgGroupOspfState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_BgpCurCfgGroupOspfState_Type.__name__ = "Integer32"
_BgpCurCfgGroupOspfState_Object = MibTableColumn
bgpCurCfgGroupOspfState = _BgpCurCfgGroupOspfState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 9, 1, 15),
    _BgpCurCfgGroupOspfState_Type()
)
bgpCurCfgGroupOspfState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgGroupOspfState.setStatus("current")


class _BgpCurCfgGroupRipState_Type(Integer32):
    """Custom type bgpCurCfgGroupRipState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_BgpCurCfgGroupRipState_Type.__name__ = "Integer32"
_BgpCurCfgGroupRipState_Object = MibTableColumn
bgpCurCfgGroupRipState = _BgpCurCfgGroupRipState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 9, 1, 16),
    _BgpCurCfgGroupRipState_Type()
)
bgpCurCfgGroupRipState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgGroupRipState.setStatus("current")


class _BgpCurCfgGroupFixedState_Type(Integer32):
    """Custom type bgpCurCfgGroupFixedState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_BgpCurCfgGroupFixedState_Type.__name__ = "Integer32"
_BgpCurCfgGroupFixedState_Object = MibTableColumn
bgpCurCfgGroupFixedState = _BgpCurCfgGroupFixedState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 9, 1, 17),
    _BgpCurCfgGroupFixedState_Type()
)
bgpCurCfgGroupFixedState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgGroupFixedState.setStatus("current")


class _BgpCurCfgGroupStaticState_Type(Integer32):
    """Custom type bgpCurCfgGroupStaticState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_BgpCurCfgGroupStaticState_Type.__name__ = "Integer32"
_BgpCurCfgGroupStaticState_Object = MibTableColumn
bgpCurCfgGroupStaticState = _BgpCurCfgGroupStaticState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 9, 1, 18),
    _BgpCurCfgGroupStaticState_Type()
)
bgpCurCfgGroupStaticState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgGroupStaticState.setStatus("current")
_BgpCurCfgGroupInRmapList_Type = OctetString
_BgpCurCfgGroupInRmapList_Object = MibTableColumn
bgpCurCfgGroupInRmapList = _BgpCurCfgGroupInRmapList_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 9, 1, 19),
    _BgpCurCfgGroupInRmapList_Type()
)
bgpCurCfgGroupInRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgGroupInRmapList.setStatus("current")
_BgpCurCfgGroupOutRmapList_Type = OctetString
_BgpCurCfgGroupOutRmapList_Object = MibTableColumn
bgpCurCfgGroupOutRmapList = _BgpCurCfgGroupOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 9, 1, 20),
    _BgpCurCfgGroupOutRmapList_Type()
)
bgpCurCfgGroupOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgGroupOutRmapList.setStatus("current")


class _BgpCurCfgGroupPassword_Type(DisplayString):
    """Custom type bgpCurCfgGroupPassword based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_BgpCurCfgGroupPassword_Type.__name__ = "DisplayString"
_BgpCurCfgGroupPassword_Object = MibTableColumn
bgpCurCfgGroupPassword = _BgpCurCfgGroupPassword_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 9, 1, 21),
    _BgpCurCfgGroupPassword_Type()
)
bgpCurCfgGroupPassword.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgGroupPassword.setStatus("current")


class _BgpCurCfgGroupState_Type(Integer32):
    """Custom type bgpCurCfgGroupState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_BgpCurCfgGroupState_Type.__name__ = "Integer32"
_BgpCurCfgGroupState_Object = MibTableColumn
bgpCurCfgGroupState = _BgpCurCfgGroupState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 9, 1, 22),
    _BgpCurCfgGroupState_Type()
)
bgpCurCfgGroupState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgGroupState.setStatus("current")


class _BgpCurCfgGroupTtlSecHops_Type(Integer32):
    """Custom type bgpCurCfgGroupTtlSecHops based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 254),
    )


_BgpCurCfgGroupTtlSecHops_Type.__name__ = "Integer32"
_BgpCurCfgGroupTtlSecHops_Object = MibTableColumn
bgpCurCfgGroupTtlSecHops = _BgpCurCfgGroupTtlSecHops_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 9, 1, 23),
    _BgpCurCfgGroupTtlSecHops_Type()
)
bgpCurCfgGroupTtlSecHops.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgGroupTtlSecHops.setStatus("current")


class _BgpCurCfgGroupNexthopSelf_Type(Integer32):
    """Custom type bgpCurCfgGroupNexthopSelf based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_BgpCurCfgGroupNexthopSelf_Type.__name__ = "Integer32"
_BgpCurCfgGroupNexthopSelf_Object = MibTableColumn
bgpCurCfgGroupNexthopSelf = _BgpCurCfgGroupNexthopSelf_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 9, 1, 24),
    _BgpCurCfgGroupNexthopSelf_Type()
)
bgpCurCfgGroupNexthopSelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgGroupNexthopSelf.setStatus("current")


class _BgpCurCfgGroupClient_Type(Integer32):
    """Custom type bgpCurCfgGroupClient based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_BgpCurCfgGroupClient_Type.__name__ = "Integer32"
_BgpCurCfgGroupClient_Object = MibTableColumn
bgpCurCfgGroupClient = _BgpCurCfgGroupClient_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 9, 1, 25),
    _BgpCurCfgGroupClient_Type()
)
bgpCurCfgGroupClient.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgGroupClient.setStatus("current")
_BgpNewCfgGroupTable_Object = MibTable
bgpNewCfgGroupTable = _BgpNewCfgGroupTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 10)
)
if mibBuilder.loadTexts:
    bgpNewCfgGroupTable.setStatus("current")
_BgpNewCfgGroupEntry_Object = MibTableRow
bgpNewCfgGroupEntry = _BgpNewCfgGroupEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 10, 1)
)
bgpNewCfgGroupEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "bgpNewCfgGroupIndex"),
)
if mibBuilder.loadTexts:
    bgpNewCfgGroupEntry.setStatus("current")
_BgpNewCfgGroupIndex_Type = Integer32
_BgpNewCfgGroupIndex_Object = MibTableColumn
bgpNewCfgGroupIndex = _BgpNewCfgGroupIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 10, 1, 1),
    _BgpNewCfgGroupIndex_Type()
)
bgpNewCfgGroupIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgGroupIndex.setStatus("current")


class _BgpNewCfgGroupName_Type(DisplayString):
    """Custom type bgpNewCfgGroupName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_BgpNewCfgGroupName_Type.__name__ = "DisplayString"
_BgpNewCfgGroupName_Object = MibTableColumn
bgpNewCfgGroupName = _BgpNewCfgGroupName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 10, 1, 2),
    _BgpNewCfgGroupName_Type()
)
bgpNewCfgGroupName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgGroupName.setStatus("current")
_BgpNewCfgGroupRemoteAddr_Type = IpAddress
_BgpNewCfgGroupRemoteAddr_Object = MibTableColumn
bgpNewCfgGroupRemoteAddr = _BgpNewCfgGroupRemoteAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 10, 1, 3),
    _BgpNewCfgGroupRemoteAddr_Type()
)
bgpNewCfgGroupRemoteAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgGroupRemoteAddr.setStatus("current")
_BgpNewCfgGroupRemoteMask_Type = IpAddress
_BgpNewCfgGroupRemoteMask_Object = MibTableColumn
bgpNewCfgGroupRemoteMask = _BgpNewCfgGroupRemoteMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 10, 1, 4),
    _BgpNewCfgGroupRemoteMask_Type()
)
bgpNewCfgGroupRemoteMask.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgGroupRemoteMask.setStatus("current")


class _BgpNewCfgGroupLimit_Type(Integer32):
    """Custom type bgpNewCfgGroupLimit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_BgpNewCfgGroupLimit_Type.__name__ = "Integer32"
_BgpNewCfgGroupLimit_Object = MibTableColumn
bgpNewCfgGroupLimit = _BgpNewCfgGroupLimit_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 10, 1, 5),
    _BgpNewCfgGroupLimit_Type()
)
bgpNewCfgGroupLimit.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgGroupLimit.setStatus("current")
_BgpNewCfgGroupUpdateSrcIf_Type = Integer32
_BgpNewCfgGroupUpdateSrcIf_Object = MibTableColumn
bgpNewCfgGroupUpdateSrcIf = _BgpNewCfgGroupUpdateSrcIf_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 10, 1, 6),
    _BgpNewCfgGroupUpdateSrcIf_Type()
)
bgpNewCfgGroupUpdateSrcIf.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgGroupUpdateSrcIf.setStatus("current")
_BgpNewCfgGroupUpdateSrcLoopIf_Type = Integer32
_BgpNewCfgGroupUpdateSrcLoopIf_Object = MibTableColumn
bgpNewCfgGroupUpdateSrcLoopIf = _BgpNewCfgGroupUpdateSrcLoopIf_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 10, 1, 7),
    _BgpNewCfgGroupUpdateSrcLoopIf_Type()
)
bgpNewCfgGroupUpdateSrcLoopIf.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgGroupUpdateSrcLoopIf.setStatus("current")


class _BgpNewCfgGroupHold_Type(Integer32):
    """Custom type bgpNewCfgGroupHold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_BgpNewCfgGroupHold_Type.__name__ = "Integer32"
_BgpNewCfgGroupHold_Object = MibTableColumn
bgpNewCfgGroupHold = _BgpNewCfgGroupHold_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 10, 1, 8),
    _BgpNewCfgGroupHold_Type()
)
bgpNewCfgGroupHold.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgGroupHold.setStatus("current")


class _BgpNewCfgGroupAlive_Type(Integer32):
    """Custom type bgpNewCfgGroupAlive based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 21845),
    )


_BgpNewCfgGroupAlive_Type.__name__ = "Integer32"
_BgpNewCfgGroupAlive_Object = MibTableColumn
bgpNewCfgGroupAlive = _BgpNewCfgGroupAlive_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 10, 1, 9),
    _BgpNewCfgGroupAlive_Type()
)
bgpNewCfgGroupAlive.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgGroupAlive.setStatus("current")


class _BgpNewCfgGroupAdvert_Type(Integer32):
    """Custom type bgpNewCfgGroupAdvert based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_BgpNewCfgGroupAdvert_Type.__name__ = "Integer32"
_BgpNewCfgGroupAdvert_Object = MibTableColumn
bgpNewCfgGroupAdvert = _BgpNewCfgGroupAdvert_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 10, 1, 10),
    _BgpNewCfgGroupAdvert_Type()
)
bgpNewCfgGroupAdvert.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgGroupAdvert.setStatus("current")


class _BgpNewCfgGroupOrig_Type(Integer32):
    """Custom type bgpNewCfgGroupOrig based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_BgpNewCfgGroupOrig_Type.__name__ = "Integer32"
_BgpNewCfgGroupOrig_Object = MibTableColumn
bgpNewCfgGroupOrig = _BgpNewCfgGroupOrig_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 10, 1, 11),
    _BgpNewCfgGroupOrig_Type()
)
bgpNewCfgGroupOrig.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgGroupOrig.setStatus("current")


class _BgpNewCfgGroupMetric_Type(Unsigned32):
    """Custom type bgpNewCfgGroupMetric based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967294),
    )


_BgpNewCfgGroupMetric_Type.__name__ = "Unsigned32"
_BgpNewCfgGroupMetric_Object = MibTableColumn
bgpNewCfgGroupMetric = _BgpNewCfgGroupMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 10, 1, 12),
    _BgpNewCfgGroupMetric_Type()
)
bgpNewCfgGroupMetric.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgGroupMetric.setStatus("current")


class _BgpNewCfgGroupTtl_Type(Integer32):
    """Custom type bgpNewCfgGroupTtl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_BgpNewCfgGroupTtl_Type.__name__ = "Integer32"
_BgpNewCfgGroupTtl_Object = MibTableColumn
bgpNewCfgGroupTtl = _BgpNewCfgGroupTtl_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 10, 1, 13),
    _BgpNewCfgGroupTtl_Type()
)
bgpNewCfgGroupTtl.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgGroupTtl.setStatus("current")


class _BgpNewCfgGroupDefaultAction_Type(Integer32):
    """Custom type bgpNewCfgGroupDefaultAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("import", 2),
          ("originate", 3),
          ("redistribute", 4))
    )


_BgpNewCfgGroupDefaultAction_Type.__name__ = "Integer32"
_BgpNewCfgGroupDefaultAction_Object = MibTableColumn
bgpNewCfgGroupDefaultAction = _BgpNewCfgGroupDefaultAction_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 10, 1, 14),
    _BgpNewCfgGroupDefaultAction_Type()
)
bgpNewCfgGroupDefaultAction.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgGroupDefaultAction.setStatus("current")


class _BgpNewCfgGroupOspfState_Type(Integer32):
    """Custom type bgpNewCfgGroupOspfState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_BgpNewCfgGroupOspfState_Type.__name__ = "Integer32"
_BgpNewCfgGroupOspfState_Object = MibTableColumn
bgpNewCfgGroupOspfState = _BgpNewCfgGroupOspfState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 10, 1, 15),
    _BgpNewCfgGroupOspfState_Type()
)
bgpNewCfgGroupOspfState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgGroupOspfState.setStatus("current")


class _BgpNewCfgGroupRipState_Type(Integer32):
    """Custom type bgpNewCfgGroupRipState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_BgpNewCfgGroupRipState_Type.__name__ = "Integer32"
_BgpNewCfgGroupRipState_Object = MibTableColumn
bgpNewCfgGroupRipState = _BgpNewCfgGroupRipState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 10, 1, 16),
    _BgpNewCfgGroupRipState_Type()
)
bgpNewCfgGroupRipState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgGroupRipState.setStatus("current")


class _BgpNewCfgGroupFixedState_Type(Integer32):
    """Custom type bgpNewCfgGroupFixedState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_BgpNewCfgGroupFixedState_Type.__name__ = "Integer32"
_BgpNewCfgGroupFixedState_Object = MibTableColumn
bgpNewCfgGroupFixedState = _BgpNewCfgGroupFixedState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 10, 1, 17),
    _BgpNewCfgGroupFixedState_Type()
)
bgpNewCfgGroupFixedState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgGroupFixedState.setStatus("current")


class _BgpNewCfgGroupStaticState_Type(Integer32):
    """Custom type bgpNewCfgGroupStaticState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_BgpNewCfgGroupStaticState_Type.__name__ = "Integer32"
_BgpNewCfgGroupStaticState_Object = MibTableColumn
bgpNewCfgGroupStaticState = _BgpNewCfgGroupStaticState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 10, 1, 18),
    _BgpNewCfgGroupStaticState_Type()
)
bgpNewCfgGroupStaticState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgGroupStaticState.setStatus("current")
_BgpNewCfgGroupInRmapList_Type = OctetString
_BgpNewCfgGroupInRmapList_Object = MibTableColumn
bgpNewCfgGroupInRmapList = _BgpNewCfgGroupInRmapList_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 10, 1, 19),
    _BgpNewCfgGroupInRmapList_Type()
)
bgpNewCfgGroupInRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpNewCfgGroupInRmapList.setStatus("current")
_BgpNewCfgGroupOutRmapList_Type = OctetString
_BgpNewCfgGroupOutRmapList_Object = MibTableColumn
bgpNewCfgGroupOutRmapList = _BgpNewCfgGroupOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 10, 1, 20),
    _BgpNewCfgGroupOutRmapList_Type()
)
bgpNewCfgGroupOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpNewCfgGroupOutRmapList.setStatus("current")
_BgpNewCfgGroupAddInRmap_Type = Integer32
_BgpNewCfgGroupAddInRmap_Object = MibTableColumn
bgpNewCfgGroupAddInRmap = _BgpNewCfgGroupAddInRmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 10, 1, 21),
    _BgpNewCfgGroupAddInRmap_Type()
)
bgpNewCfgGroupAddInRmap.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgGroupAddInRmap.setStatus("current")
_BgpNewCfgGroupAddOutRmap_Type = Integer32
_BgpNewCfgGroupAddOutRmap_Object = MibTableColumn
bgpNewCfgGroupAddOutRmap = _BgpNewCfgGroupAddOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 10, 1, 22),
    _BgpNewCfgGroupAddOutRmap_Type()
)
bgpNewCfgGroupAddOutRmap.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgGroupAddOutRmap.setStatus("current")
_BgpNewCfgGroupRemoveInRmap_Type = Integer32
_BgpNewCfgGroupRemoveInRmap_Object = MibTableColumn
bgpNewCfgGroupRemoveInRmap = _BgpNewCfgGroupRemoveInRmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 10, 1, 23),
    _BgpNewCfgGroupRemoveInRmap_Type()
)
bgpNewCfgGroupRemoveInRmap.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgGroupRemoveInRmap.setStatus("current")
_BgpNewCfgGroupRemoveOutRmap_Type = Integer32
_BgpNewCfgGroupRemoveOutRmap_Object = MibTableColumn
bgpNewCfgGroupRemoveOutRmap = _BgpNewCfgGroupRemoveOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 10, 1, 24),
    _BgpNewCfgGroupRemoveOutRmap_Type()
)
bgpNewCfgGroupRemoveOutRmap.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgGroupRemoveOutRmap.setStatus("current")


class _BgpNewCfgGroupPassword_Type(DisplayString):
    """Custom type bgpNewCfgGroupPassword based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_BgpNewCfgGroupPassword_Type.__name__ = "DisplayString"
_BgpNewCfgGroupPassword_Object = MibTableColumn
bgpNewCfgGroupPassword = _BgpNewCfgGroupPassword_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 10, 1, 25),
    _BgpNewCfgGroupPassword_Type()
)
bgpNewCfgGroupPassword.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgGroupPassword.setStatus("current")


class _BgpNewCfgGroupDelete_Type(Integer32):
    """Custom type bgpNewCfgGroupDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_BgpNewCfgGroupDelete_Type.__name__ = "Integer32"
_BgpNewCfgGroupDelete_Object = MibTableColumn
bgpNewCfgGroupDelete = _BgpNewCfgGroupDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 10, 1, 26),
    _BgpNewCfgGroupDelete_Type()
)
bgpNewCfgGroupDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgGroupDelete.setStatus("current")


class _BgpNewCfgGroupState_Type(Integer32):
    """Custom type bgpNewCfgGroupState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_BgpNewCfgGroupState_Type.__name__ = "Integer32"
_BgpNewCfgGroupState_Object = MibTableColumn
bgpNewCfgGroupState = _BgpNewCfgGroupState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 10, 1, 27),
    _BgpNewCfgGroupState_Type()
)
bgpNewCfgGroupState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgGroupState.setStatus("current")


class _BgpNewCfgGroupTtlSecHops_Type(Integer32):
    """Custom type bgpNewCfgGroupTtlSecHops based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 254),
    )


_BgpNewCfgGroupTtlSecHops_Type.__name__ = "Integer32"
_BgpNewCfgGroupTtlSecHops_Object = MibTableColumn
bgpNewCfgGroupTtlSecHops = _BgpNewCfgGroupTtlSecHops_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 10, 1, 28),
    _BgpNewCfgGroupTtlSecHops_Type()
)
bgpNewCfgGroupTtlSecHops.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgGroupTtlSecHops.setStatus("current")


class _BgpNewCfgGroupNexthopSelf_Type(Integer32):
    """Custom type bgpNewCfgGroupNexthopSelf based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_BgpNewCfgGroupNexthopSelf_Type.__name__ = "Integer32"
_BgpNewCfgGroupNexthopSelf_Object = MibTableColumn
bgpNewCfgGroupNexthopSelf = _BgpNewCfgGroupNexthopSelf_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 10, 1, 29),
    _BgpNewCfgGroupNexthopSelf_Type()
)
bgpNewCfgGroupNexthopSelf.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgGroupNexthopSelf.setStatus("current")


class _BgpNewCfgGroupClient_Type(Integer32):
    """Custom type bgpNewCfgGroupClient based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_BgpNewCfgGroupClient_Type.__name__ = "Integer32"
_BgpNewCfgGroupClient_Object = MibTableColumn
bgpNewCfgGroupClient = _BgpNewCfgGroupClient_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 10, 1, 30),
    _BgpNewCfgGroupClient_Type()
)
bgpNewCfgGroupClient.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgGroupClient.setStatus("current")
_BgpCurCfgGroupRASTable_Object = MibTable
bgpCurCfgGroupRASTable = _BgpCurCfgGroupRASTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 11)
)
if mibBuilder.loadTexts:
    bgpCurCfgGroupRASTable.setStatus("current")
_BgpCurCfgGroupRASEntry_Object = MibTableRow
bgpCurCfgGroupRASEntry = _BgpCurCfgGroupRASEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 11, 1)
)
bgpCurCfgGroupRASEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "bgpCurCfgGroupIndex"),
    (0, "IBM-GbTOR-G8264T-MIB", "bgpCurCfgGroupRASIndex"),
)
if mibBuilder.loadTexts:
    bgpCurCfgGroupRASEntry.setStatus("current")
_BgpCurCfgGroupRASIndex_Type = Integer32
_BgpCurCfgGroupRASIndex_Object = MibTableColumn
bgpCurCfgGroupRASIndex = _BgpCurCfgGroupRASIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 11, 1, 1),
    _BgpCurCfgGroupRASIndex_Type()
)
bgpCurCfgGroupRASIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgGroupRASIndex.setStatus("current")


class _BgpCurCfgGroupRAS_Type(Integer32):
    """Custom type bgpCurCfgGroupRAS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_BgpCurCfgGroupRAS_Type.__name__ = "Integer32"
_BgpCurCfgGroupRAS_Object = MibTableColumn
bgpCurCfgGroupRAS = _BgpCurCfgGroupRAS_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 11, 1, 2),
    _BgpCurCfgGroupRAS_Type()
)
bgpCurCfgGroupRAS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpCurCfgGroupRAS.setStatus("current")
_BgpNewCfgGroupRASTable_Object = MibTable
bgpNewCfgGroupRASTable = _BgpNewCfgGroupRASTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 12)
)
if mibBuilder.loadTexts:
    bgpNewCfgGroupRASTable.setStatus("current")
_BgpNewCfgGroupRASEntry_Object = MibTableRow
bgpNewCfgGroupRASEntry = _BgpNewCfgGroupRASEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 12, 1)
)
bgpNewCfgGroupRASEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "bgpNewCfgGroupIndex"),
    (0, "IBM-GbTOR-G8264T-MIB", "bgpNewCfgGroupRASIndex"),
)
if mibBuilder.loadTexts:
    bgpNewCfgGroupRASEntry.setStatus("current")
_BgpNewCfgGroupRASIndex_Type = Integer32
_BgpNewCfgGroupRASIndex_Object = MibTableColumn
bgpNewCfgGroupRASIndex = _BgpNewCfgGroupRASIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 12, 1, 1),
    _BgpNewCfgGroupRASIndex_Type()
)
bgpNewCfgGroupRASIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpNewCfgGroupRASIndex.setStatus("current")


class _BgpNewCfgGroupRAS_Type(Integer32):
    """Custom type bgpNewCfgGroupRAS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_BgpNewCfgGroupRAS_Type.__name__ = "Integer32"
_BgpNewCfgGroupRAS_Object = MibTableColumn
bgpNewCfgGroupRAS = _BgpNewCfgGroupRAS_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 12, 12, 1, 2),
    _BgpNewCfgGroupRAS_Type()
)
bgpNewCfgGroupRAS.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    bgpNewCfgGroupRAS.setStatus("current")
_OspfCfg_ObjectIdentity = ObjectIdentity
ospfCfg = _OspfCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13)
)
_OspfGeneral_ObjectIdentity = ObjectIdentity
ospfGeneral = _OspfGeneral_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 1)
)


class _OspfCurCfgDefaultRouteMetric_Type(Integer32):
    """Custom type ospfCurCfgDefaultRouteMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777214),
    )


_OspfCurCfgDefaultRouteMetric_Type.__name__ = "Integer32"
_OspfCurCfgDefaultRouteMetric_Object = MibScalar
ospfCurCfgDefaultRouteMetric = _OspfCurCfgDefaultRouteMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 1, 1),
    _OspfCurCfgDefaultRouteMetric_Type()
)
ospfCurCfgDefaultRouteMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgDefaultRouteMetric.setStatus("current")


class _OspfNewCfgDefaultRouteMetric_Type(Integer32):
    """Custom type ospfNewCfgDefaultRouteMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777214),
    )


_OspfNewCfgDefaultRouteMetric_Type.__name__ = "Integer32"
_OspfNewCfgDefaultRouteMetric_Object = MibScalar
ospfNewCfgDefaultRouteMetric = _OspfNewCfgDefaultRouteMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 1, 2),
    _OspfNewCfgDefaultRouteMetric_Type()
)
ospfNewCfgDefaultRouteMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgDefaultRouteMetric.setStatus("current")


class _OspfCurCfgDefaultRouteMetricType_Type(Integer32):
    """Custom type ospfCurCfgDefaultRouteMetricType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("type1", 2),
          ("type2", 3))
    )


_OspfCurCfgDefaultRouteMetricType_Type.__name__ = "Integer32"
_OspfCurCfgDefaultRouteMetricType_Object = MibScalar
ospfCurCfgDefaultRouteMetricType = _OspfCurCfgDefaultRouteMetricType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 1, 3),
    _OspfCurCfgDefaultRouteMetricType_Type()
)
ospfCurCfgDefaultRouteMetricType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgDefaultRouteMetricType.setStatus("current")


class _OspfNewCfgDefaultRouteMetricType_Type(Integer32):
    """Custom type ospfNewCfgDefaultRouteMetricType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("type1", 2),
          ("type2", 3))
    )


_OspfNewCfgDefaultRouteMetricType_Type.__name__ = "Integer32"
_OspfNewCfgDefaultRouteMetricType_Object = MibScalar
ospfNewCfgDefaultRouteMetricType = _OspfNewCfgDefaultRouteMetricType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 1, 4),
    _OspfNewCfgDefaultRouteMetricType_Type()
)
ospfNewCfgDefaultRouteMetricType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgDefaultRouteMetricType.setStatus("current")
_OspfIntfTableMaxSize_Type = Integer32
_OspfIntfTableMaxSize_Object = MibScalar
ospfIntfTableMaxSize = _OspfIntfTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 1, 5),
    _OspfIntfTableMaxSize_Type()
)
ospfIntfTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfTableMaxSize.setStatus("current")
_OspfAreaTableMaxSize_Type = Integer32
_OspfAreaTableMaxSize_Object = MibScalar
ospfAreaTableMaxSize = _OspfAreaTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 1, 6),
    _OspfAreaTableMaxSize_Type()
)
ospfAreaTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaTableMaxSize.setStatus("current")
_OspfRangeTableMaxSize_Type = Integer32
_OspfRangeTableMaxSize_Object = MibScalar
ospfRangeTableMaxSize = _OspfRangeTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 1, 7),
    _OspfRangeTableMaxSize_Type()
)
ospfRangeTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfRangeTableMaxSize.setStatus("current")
_OspfVirtIntfTableMaxSize_Type = Integer32
_OspfVirtIntfTableMaxSize_Object = MibScalar
ospfVirtIntfTableMaxSize = _OspfVirtIntfTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 1, 8),
    _OspfVirtIntfTableMaxSize_Type()
)
ospfVirtIntfTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVirtIntfTableMaxSize.setStatus("current")
_OspfHostTableMaxSize_Type = Integer32
_OspfHostTableMaxSize_Object = MibScalar
ospfHostTableMaxSize = _OspfHostTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 1, 9),
    _OspfHostTableMaxSize_Type()
)
ospfHostTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfHostTableMaxSize.setStatus("current")


class _OspfCurCfgState_Type(Integer32):
    """Custom type ospfCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_OspfCurCfgState_Type.__name__ = "Integer32"
_OspfCurCfgState_Object = MibScalar
ospfCurCfgState = _OspfCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 1, 10),
    _OspfCurCfgState_Type()
)
ospfCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgState.setStatus("current")


class _OspfNewCfgState_Type(Integer32):
    """Custom type ospfNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_OspfNewCfgState_Type.__name__ = "Integer32"
_OspfNewCfgState_Object = MibScalar
ospfNewCfgState = _OspfNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 1, 11),
    _OspfNewCfgState_Type()
)
ospfNewCfgState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgState.setStatus("current")
_OspfCurCfgLSDB_Type = Integer32
_OspfCurCfgLSDB_Object = MibScalar
ospfCurCfgLSDB = _OspfCurCfgLSDB_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 1, 12),
    _OspfCurCfgLSDB_Type()
)
ospfCurCfgLSDB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgLSDB.setStatus("current")
_OspfNewCfgLSDB_Type = Integer32
_OspfNewCfgLSDB_Object = MibScalar
ospfNewCfgLSDB = _OspfNewCfgLSDB_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 1, 13),
    _OspfNewCfgLSDB_Type()
)
ospfNewCfgLSDB.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgLSDB.setStatus("current")
_OspfCurCfgAreaTable_Object = MibTable
ospfCurCfgAreaTable = _OspfCurCfgAreaTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 2)
)
if mibBuilder.loadTexts:
    ospfCurCfgAreaTable.setStatus("current")
_OspfCurCfgAreaEntry_Object = MibTableRow
ospfCurCfgAreaEntry = _OspfCurCfgAreaEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 2, 1)
)
ospfCurCfgAreaEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospfCurCfgAreaIndex"),
)
if mibBuilder.loadTexts:
    ospfCurCfgAreaEntry.setStatus("current")
_OspfCurCfgAreaIndex_Type = Integer32
_OspfCurCfgAreaIndex_Object = MibTableColumn
ospfCurCfgAreaIndex = _OspfCurCfgAreaIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 2, 1, 1),
    _OspfCurCfgAreaIndex_Type()
)
ospfCurCfgAreaIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgAreaIndex.setStatus("current")
_OspfCurCfgAreaId_Type = IpAddress
_OspfCurCfgAreaId_Object = MibTableColumn
ospfCurCfgAreaId = _OspfCurCfgAreaId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 2, 1, 2),
    _OspfCurCfgAreaId_Type()
)
ospfCurCfgAreaId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgAreaId.setStatus("current")


class _OspfCurCfgAreaSpfInterval_Type(Integer32):
    """Custom type ospfCurCfgAreaSpfInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_OspfCurCfgAreaSpfInterval_Type.__name__ = "Integer32"
_OspfCurCfgAreaSpfInterval_Object = MibTableColumn
ospfCurCfgAreaSpfInterval = _OspfCurCfgAreaSpfInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 2, 1, 3),
    _OspfCurCfgAreaSpfInterval_Type()
)
ospfCurCfgAreaSpfInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgAreaSpfInterval.setStatus("current")


class _OspfCurCfgAreaAuthType_Type(Integer32):
    """Custom type ospfCurCfgAreaAuthType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("password", 2),
          ("md5", 3))
    )


_OspfCurCfgAreaAuthType_Type.__name__ = "Integer32"
_OspfCurCfgAreaAuthType_Object = MibTableColumn
ospfCurCfgAreaAuthType = _OspfCurCfgAreaAuthType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 2, 1, 4),
    _OspfCurCfgAreaAuthType_Type()
)
ospfCurCfgAreaAuthType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgAreaAuthType.setStatus("current")


class _OspfCurCfgAreaType_Type(Integer32):
    """Custom type ospfCurCfgAreaType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("transit", 0),
          ("stub", 1),
          ("nssa", 2))
    )


_OspfCurCfgAreaType_Type.__name__ = "Integer32"
_OspfCurCfgAreaType_Object = MibTableColumn
ospfCurCfgAreaType = _OspfCurCfgAreaType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 2, 1, 5),
    _OspfCurCfgAreaType_Type()
)
ospfCurCfgAreaType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgAreaType.setStatus("current")


class _OspfCurCfgAreaMetric_Type(Integer32):
    """Custom type ospfCurCfgAreaMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfCurCfgAreaMetric_Type.__name__ = "Integer32"
_OspfCurCfgAreaMetric_Object = MibTableColumn
ospfCurCfgAreaMetric = _OspfCurCfgAreaMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 2, 1, 6),
    _OspfCurCfgAreaMetric_Type()
)
ospfCurCfgAreaMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgAreaMetric.setStatus("current")


class _OspfCurCfgAreaStatus_Type(Integer32):
    """Custom type ospfCurCfgAreaStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_OspfCurCfgAreaStatus_Type.__name__ = "Integer32"
_OspfCurCfgAreaStatus_Object = MibTableColumn
ospfCurCfgAreaStatus = _OspfCurCfgAreaStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 2, 1, 7),
    _OspfCurCfgAreaStatus_Type()
)
ospfCurCfgAreaStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgAreaStatus.setStatus("current")
_OspfNewCfgAreaTable_Object = MibTable
ospfNewCfgAreaTable = _OspfNewCfgAreaTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 3)
)
if mibBuilder.loadTexts:
    ospfNewCfgAreaTable.setStatus("current")
_OspfNewCfgAreaEntry_Object = MibTableRow
ospfNewCfgAreaEntry = _OspfNewCfgAreaEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 3, 1)
)
ospfNewCfgAreaEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospfNewCfgAreaIndex"),
)
if mibBuilder.loadTexts:
    ospfNewCfgAreaEntry.setStatus("current")
_OspfNewCfgAreaIndex_Type = Integer32
_OspfNewCfgAreaIndex_Object = MibTableColumn
ospfNewCfgAreaIndex = _OspfNewCfgAreaIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 3, 1, 1),
    _OspfNewCfgAreaIndex_Type()
)
ospfNewCfgAreaIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNewCfgAreaIndex.setStatus("current")
_OspfNewCfgAreaId_Type = IpAddress
_OspfNewCfgAreaId_Object = MibTableColumn
ospfNewCfgAreaId = _OspfNewCfgAreaId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 3, 1, 2),
    _OspfNewCfgAreaId_Type()
)
ospfNewCfgAreaId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgAreaId.setStatus("current")


class _OspfNewCfgAreaSpfInterval_Type(Integer32):
    """Custom type ospfNewCfgAreaSpfInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_OspfNewCfgAreaSpfInterval_Type.__name__ = "Integer32"
_OspfNewCfgAreaSpfInterval_Object = MibTableColumn
ospfNewCfgAreaSpfInterval = _OspfNewCfgAreaSpfInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 3, 1, 3),
    _OspfNewCfgAreaSpfInterval_Type()
)
ospfNewCfgAreaSpfInterval.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgAreaSpfInterval.setStatus("current")


class _OspfNewCfgAreaAuthType_Type(Integer32):
    """Custom type ospfNewCfgAreaAuthType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("password", 2),
          ("md5", 3))
    )


_OspfNewCfgAreaAuthType_Type.__name__ = "Integer32"
_OspfNewCfgAreaAuthType_Object = MibTableColumn
ospfNewCfgAreaAuthType = _OspfNewCfgAreaAuthType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 3, 1, 4),
    _OspfNewCfgAreaAuthType_Type()
)
ospfNewCfgAreaAuthType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgAreaAuthType.setStatus("current")


class _OspfNewCfgAreaType_Type(Integer32):
    """Custom type ospfNewCfgAreaType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("transit", 0),
          ("stub", 1),
          ("nssa", 2))
    )


_OspfNewCfgAreaType_Type.__name__ = "Integer32"
_OspfNewCfgAreaType_Object = MibTableColumn
ospfNewCfgAreaType = _OspfNewCfgAreaType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 3, 1, 5),
    _OspfNewCfgAreaType_Type()
)
ospfNewCfgAreaType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgAreaType.setStatus("current")


class _OspfNewCfgAreaMetric_Type(Integer32):
    """Custom type ospfNewCfgAreaMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfNewCfgAreaMetric_Type.__name__ = "Integer32"
_OspfNewCfgAreaMetric_Object = MibTableColumn
ospfNewCfgAreaMetric = _OspfNewCfgAreaMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 3, 1, 6),
    _OspfNewCfgAreaMetric_Type()
)
ospfNewCfgAreaMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgAreaMetric.setStatus("current")


class _OspfNewCfgAreaStatus_Type(Integer32):
    """Custom type ospfNewCfgAreaStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_OspfNewCfgAreaStatus_Type.__name__ = "Integer32"
_OspfNewCfgAreaStatus_Object = MibTableColumn
ospfNewCfgAreaStatus = _OspfNewCfgAreaStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 3, 1, 7),
    _OspfNewCfgAreaStatus_Type()
)
ospfNewCfgAreaStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgAreaStatus.setStatus("current")


class _OspfNewCfgAreaDelete_Type(Integer32):
    """Custom type ospfNewCfgAreaDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_OspfNewCfgAreaDelete_Type.__name__ = "Integer32"
_OspfNewCfgAreaDelete_Object = MibTableColumn
ospfNewCfgAreaDelete = _OspfNewCfgAreaDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 3, 1, 8),
    _OspfNewCfgAreaDelete_Type()
)
ospfNewCfgAreaDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgAreaDelete.setStatus("current")
_OspfRouteRedistribution_ObjectIdentity = ObjectIdentity
ospfRouteRedistribution = _OspfRouteRedistribution_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4)
)
_OspfRedistributeStatic_ObjectIdentity = ObjectIdentity
ospfRedistributeStatic = _OspfRedistributeStatic_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 1)
)


class _OspfCurCfgStaticMetric_Type(Integer32):
    """Custom type ospfCurCfgStaticMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777214),
    )


_OspfCurCfgStaticMetric_Type.__name__ = "Integer32"
_OspfCurCfgStaticMetric_Object = MibScalar
ospfCurCfgStaticMetric = _OspfCurCfgStaticMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 1, 1),
    _OspfCurCfgStaticMetric_Type()
)
ospfCurCfgStaticMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgStaticMetric.setStatus("current")


class _OspfNewCfgStaticMetric_Type(Integer32):
    """Custom type ospfNewCfgStaticMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777214),
    )


_OspfNewCfgStaticMetric_Type.__name__ = "Integer32"
_OspfNewCfgStaticMetric_Object = MibScalar
ospfNewCfgStaticMetric = _OspfNewCfgStaticMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 1, 2),
    _OspfNewCfgStaticMetric_Type()
)
ospfNewCfgStaticMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgStaticMetric.setStatus("current")


class _OspfCurCfgStaticMetricType_Type(Integer32):
    """Custom type ospfCurCfgStaticMetricType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("type1", 2),
          ("type2", 3))
    )


_OspfCurCfgStaticMetricType_Type.__name__ = "Integer32"
_OspfCurCfgStaticMetricType_Object = MibScalar
ospfCurCfgStaticMetricType = _OspfCurCfgStaticMetricType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 1, 3),
    _OspfCurCfgStaticMetricType_Type()
)
ospfCurCfgStaticMetricType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgStaticMetricType.setStatus("current")


class _OspfNewCfgStaticMetricType_Type(Integer32):
    """Custom type ospfNewCfgStaticMetricType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("type1", 2),
          ("type2", 3))
    )


_OspfNewCfgStaticMetricType_Type.__name__ = "Integer32"
_OspfNewCfgStaticMetricType_Object = MibScalar
ospfNewCfgStaticMetricType = _OspfNewCfgStaticMetricType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 1, 4),
    _OspfNewCfgStaticMetricType_Type()
)
ospfNewCfgStaticMetricType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgStaticMetricType.setStatus("current")
_OspfCurCfgStaticOutRmapList_Type = OctetString
_OspfCurCfgStaticOutRmapList_Object = MibScalar
ospfCurCfgStaticOutRmapList = _OspfCurCfgStaticOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 1, 5),
    _OspfCurCfgStaticOutRmapList_Type()
)
ospfCurCfgStaticOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgStaticOutRmapList.setStatus("current")
_OspfNewCfgStaticOutRmapList_Type = OctetString
_OspfNewCfgStaticOutRmapList_Object = MibScalar
ospfNewCfgStaticOutRmapList = _OspfNewCfgStaticOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 1, 6),
    _OspfNewCfgStaticOutRmapList_Type()
)
ospfNewCfgStaticOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNewCfgStaticOutRmapList.setStatus("current")
_OspfNewCfgStaticAddOutRmap_Type = Integer32
_OspfNewCfgStaticAddOutRmap_Object = MibScalar
ospfNewCfgStaticAddOutRmap = _OspfNewCfgStaticAddOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 1, 7),
    _OspfNewCfgStaticAddOutRmap_Type()
)
ospfNewCfgStaticAddOutRmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgStaticAddOutRmap.setStatus("current")
_OspfNewCfgStaticRemoveOutRmap_Type = Integer32
_OspfNewCfgStaticRemoveOutRmap_Object = MibScalar
ospfNewCfgStaticRemoveOutRmap = _OspfNewCfgStaticRemoveOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 1, 8),
    _OspfNewCfgStaticRemoveOutRmap_Type()
)
ospfNewCfgStaticRemoveOutRmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgStaticRemoveOutRmap.setStatus("current")
_OspfRedistributeEbgp_ObjectIdentity = ObjectIdentity
ospfRedistributeEbgp = _OspfRedistributeEbgp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 2)
)


class _OspfCurCfgEbgpMetric_Type(Integer32):
    """Custom type ospfCurCfgEbgpMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777214),
    )


_OspfCurCfgEbgpMetric_Type.__name__ = "Integer32"
_OspfCurCfgEbgpMetric_Object = MibScalar
ospfCurCfgEbgpMetric = _OspfCurCfgEbgpMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 2, 1),
    _OspfCurCfgEbgpMetric_Type()
)
ospfCurCfgEbgpMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgEbgpMetric.setStatus("current")


class _OspfNewCfgEbgpMetric_Type(Integer32):
    """Custom type ospfNewCfgEbgpMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777214),
    )


_OspfNewCfgEbgpMetric_Type.__name__ = "Integer32"
_OspfNewCfgEbgpMetric_Object = MibScalar
ospfNewCfgEbgpMetric = _OspfNewCfgEbgpMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 2, 2),
    _OspfNewCfgEbgpMetric_Type()
)
ospfNewCfgEbgpMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgEbgpMetric.setStatus("current")


class _OspfCurCfgEbgpMetricType_Type(Integer32):
    """Custom type ospfCurCfgEbgpMetricType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("type1", 2),
          ("type2", 3))
    )


_OspfCurCfgEbgpMetricType_Type.__name__ = "Integer32"
_OspfCurCfgEbgpMetricType_Object = MibScalar
ospfCurCfgEbgpMetricType = _OspfCurCfgEbgpMetricType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 2, 3),
    _OspfCurCfgEbgpMetricType_Type()
)
ospfCurCfgEbgpMetricType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgEbgpMetricType.setStatus("current")


class _OspfNewCfgEbgpMetricType_Type(Integer32):
    """Custom type ospfNewCfgEbgpMetricType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("type1", 2),
          ("type2", 3))
    )


_OspfNewCfgEbgpMetricType_Type.__name__ = "Integer32"
_OspfNewCfgEbgpMetricType_Object = MibScalar
ospfNewCfgEbgpMetricType = _OspfNewCfgEbgpMetricType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 2, 4),
    _OspfNewCfgEbgpMetricType_Type()
)
ospfNewCfgEbgpMetricType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgEbgpMetricType.setStatus("current")
_OspfCurCfgEbgpOutRmapList_Type = OctetString
_OspfCurCfgEbgpOutRmapList_Object = MibScalar
ospfCurCfgEbgpOutRmapList = _OspfCurCfgEbgpOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 2, 5),
    _OspfCurCfgEbgpOutRmapList_Type()
)
ospfCurCfgEbgpOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgEbgpOutRmapList.setStatus("current")
_OspfNewCfgEbgpOutRmapList_Type = OctetString
_OspfNewCfgEbgpOutRmapList_Object = MibScalar
ospfNewCfgEbgpOutRmapList = _OspfNewCfgEbgpOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 2, 6),
    _OspfNewCfgEbgpOutRmapList_Type()
)
ospfNewCfgEbgpOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNewCfgEbgpOutRmapList.setStatus("current")
_OspfNewCfgEbgpAddOutRmap_Type = Integer32
_OspfNewCfgEbgpAddOutRmap_Object = MibScalar
ospfNewCfgEbgpAddOutRmap = _OspfNewCfgEbgpAddOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 2, 7),
    _OspfNewCfgEbgpAddOutRmap_Type()
)
ospfNewCfgEbgpAddOutRmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgEbgpAddOutRmap.setStatus("current")
_OspfNewCfgEbgpRemoveOutRmap_Type = Integer32
_OspfNewCfgEbgpRemoveOutRmap_Object = MibScalar
ospfNewCfgEbgpRemoveOutRmap = _OspfNewCfgEbgpRemoveOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 2, 8),
    _OspfNewCfgEbgpRemoveOutRmap_Type()
)
ospfNewCfgEbgpRemoveOutRmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgEbgpRemoveOutRmap.setStatus("current")
_OspfRedistributeIbgp_ObjectIdentity = ObjectIdentity
ospfRedistributeIbgp = _OspfRedistributeIbgp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 3)
)


class _OspfCurCfgIbgpMetric_Type(Integer32):
    """Custom type ospfCurCfgIbgpMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777214),
    )


_OspfCurCfgIbgpMetric_Type.__name__ = "Integer32"
_OspfCurCfgIbgpMetric_Object = MibScalar
ospfCurCfgIbgpMetric = _OspfCurCfgIbgpMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 3, 1),
    _OspfCurCfgIbgpMetric_Type()
)
ospfCurCfgIbgpMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgIbgpMetric.setStatus("current")


class _OspfNewCfgIbgpMetric_Type(Integer32):
    """Custom type ospfNewCfgIbgpMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777214),
    )


_OspfNewCfgIbgpMetric_Type.__name__ = "Integer32"
_OspfNewCfgIbgpMetric_Object = MibScalar
ospfNewCfgIbgpMetric = _OspfNewCfgIbgpMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 3, 2),
    _OspfNewCfgIbgpMetric_Type()
)
ospfNewCfgIbgpMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgIbgpMetric.setStatus("current")


class _OspfCurCfgIbgpMetricType_Type(Integer32):
    """Custom type ospfCurCfgIbgpMetricType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("type1", 2),
          ("type2", 3))
    )


_OspfCurCfgIbgpMetricType_Type.__name__ = "Integer32"
_OspfCurCfgIbgpMetricType_Object = MibScalar
ospfCurCfgIbgpMetricType = _OspfCurCfgIbgpMetricType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 3, 3),
    _OspfCurCfgIbgpMetricType_Type()
)
ospfCurCfgIbgpMetricType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgIbgpMetricType.setStatus("current")


class _OspfNewCfgIbgpMetricType_Type(Integer32):
    """Custom type ospfNewCfgIbgpMetricType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("type1", 2),
          ("type2", 3))
    )


_OspfNewCfgIbgpMetricType_Type.__name__ = "Integer32"
_OspfNewCfgIbgpMetricType_Object = MibScalar
ospfNewCfgIbgpMetricType = _OspfNewCfgIbgpMetricType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 3, 4),
    _OspfNewCfgIbgpMetricType_Type()
)
ospfNewCfgIbgpMetricType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgIbgpMetricType.setStatus("current")
_OspfCurCfgIbgpOutRmapList_Type = OctetString
_OspfCurCfgIbgpOutRmapList_Object = MibScalar
ospfCurCfgIbgpOutRmapList = _OspfCurCfgIbgpOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 3, 5),
    _OspfCurCfgIbgpOutRmapList_Type()
)
ospfCurCfgIbgpOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgIbgpOutRmapList.setStatus("current")
_OspfNewCfgIbgpOutRmapList_Type = OctetString
_OspfNewCfgIbgpOutRmapList_Object = MibScalar
ospfNewCfgIbgpOutRmapList = _OspfNewCfgIbgpOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 3, 6),
    _OspfNewCfgIbgpOutRmapList_Type()
)
ospfNewCfgIbgpOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNewCfgIbgpOutRmapList.setStatus("current")
_OspfNewCfgIbgpAddOutRmap_Type = Integer32
_OspfNewCfgIbgpAddOutRmap_Object = MibScalar
ospfNewCfgIbgpAddOutRmap = _OspfNewCfgIbgpAddOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 3, 7),
    _OspfNewCfgIbgpAddOutRmap_Type()
)
ospfNewCfgIbgpAddOutRmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgIbgpAddOutRmap.setStatus("current")
_OspfNewCfgIbgpRemoveOutRmap_Type = Integer32
_OspfNewCfgIbgpRemoveOutRmap_Object = MibScalar
ospfNewCfgIbgpRemoveOutRmap = _OspfNewCfgIbgpRemoveOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 3, 8),
    _OspfNewCfgIbgpRemoveOutRmap_Type()
)
ospfNewCfgIbgpRemoveOutRmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgIbgpRemoveOutRmap.setStatus("current")
_OspfRedistributeFixed_ObjectIdentity = ObjectIdentity
ospfRedistributeFixed = _OspfRedistributeFixed_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 4)
)


class _OspfCurCfgFixedMetric_Type(Integer32):
    """Custom type ospfCurCfgFixedMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777214),
    )


_OspfCurCfgFixedMetric_Type.__name__ = "Integer32"
_OspfCurCfgFixedMetric_Object = MibScalar
ospfCurCfgFixedMetric = _OspfCurCfgFixedMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 4, 1),
    _OspfCurCfgFixedMetric_Type()
)
ospfCurCfgFixedMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgFixedMetric.setStatus("current")


class _OspfNewCfgFixedMetric_Type(Integer32):
    """Custom type ospfNewCfgFixedMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777214),
    )


_OspfNewCfgFixedMetric_Type.__name__ = "Integer32"
_OspfNewCfgFixedMetric_Object = MibScalar
ospfNewCfgFixedMetric = _OspfNewCfgFixedMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 4, 2),
    _OspfNewCfgFixedMetric_Type()
)
ospfNewCfgFixedMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgFixedMetric.setStatus("current")


class _OspfCurCfgFixedMetricType_Type(Integer32):
    """Custom type ospfCurCfgFixedMetricType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("type1", 2),
          ("type2", 3))
    )


_OspfCurCfgFixedMetricType_Type.__name__ = "Integer32"
_OspfCurCfgFixedMetricType_Object = MibScalar
ospfCurCfgFixedMetricType = _OspfCurCfgFixedMetricType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 4, 3),
    _OspfCurCfgFixedMetricType_Type()
)
ospfCurCfgFixedMetricType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgFixedMetricType.setStatus("current")


class _OspfNewCfgFixedMetricType_Type(Integer32):
    """Custom type ospfNewCfgFixedMetricType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("type1", 2),
          ("type2", 3))
    )


_OspfNewCfgFixedMetricType_Type.__name__ = "Integer32"
_OspfNewCfgFixedMetricType_Object = MibScalar
ospfNewCfgFixedMetricType = _OspfNewCfgFixedMetricType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 4, 4),
    _OspfNewCfgFixedMetricType_Type()
)
ospfNewCfgFixedMetricType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgFixedMetricType.setStatus("current")
_OspfCurCfgFixedOutRmapList_Type = OctetString
_OspfCurCfgFixedOutRmapList_Object = MibScalar
ospfCurCfgFixedOutRmapList = _OspfCurCfgFixedOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 4, 5),
    _OspfCurCfgFixedOutRmapList_Type()
)
ospfCurCfgFixedOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgFixedOutRmapList.setStatus("current")
_OspfNewCfgFixedOutRmapList_Type = OctetString
_OspfNewCfgFixedOutRmapList_Object = MibScalar
ospfNewCfgFixedOutRmapList = _OspfNewCfgFixedOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 4, 6),
    _OspfNewCfgFixedOutRmapList_Type()
)
ospfNewCfgFixedOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNewCfgFixedOutRmapList.setStatus("current")
_OspfNewCfgFixedAddOutRmap_Type = Integer32
_OspfNewCfgFixedAddOutRmap_Object = MibScalar
ospfNewCfgFixedAddOutRmap = _OspfNewCfgFixedAddOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 4, 7),
    _OspfNewCfgFixedAddOutRmap_Type()
)
ospfNewCfgFixedAddOutRmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgFixedAddOutRmap.setStatus("current")
_OspfNewCfgFixedRemoveOutRmap_Type = Integer32
_OspfNewCfgFixedRemoveOutRmap_Object = MibScalar
ospfNewCfgFixedRemoveOutRmap = _OspfNewCfgFixedRemoveOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 4, 8),
    _OspfNewCfgFixedRemoveOutRmap_Type()
)
ospfNewCfgFixedRemoveOutRmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgFixedRemoveOutRmap.setStatus("current")
_OspfRedistributeRip_ObjectIdentity = ObjectIdentity
ospfRedistributeRip = _OspfRedistributeRip_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 5)
)


class _OspfCurCfgRipMetric_Type(Integer32):
    """Custom type ospfCurCfgRipMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777214),
    )


_OspfCurCfgRipMetric_Type.__name__ = "Integer32"
_OspfCurCfgRipMetric_Object = MibScalar
ospfCurCfgRipMetric = _OspfCurCfgRipMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 5, 1),
    _OspfCurCfgRipMetric_Type()
)
ospfCurCfgRipMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgRipMetric.setStatus("current")


class _OspfNewCfgRipMetric_Type(Integer32):
    """Custom type ospfNewCfgRipMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777214),
    )


_OspfNewCfgRipMetric_Type.__name__ = "Integer32"
_OspfNewCfgRipMetric_Object = MibScalar
ospfNewCfgRipMetric = _OspfNewCfgRipMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 5, 2),
    _OspfNewCfgRipMetric_Type()
)
ospfNewCfgRipMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgRipMetric.setStatus("current")


class _OspfCurCfgRipMetricType_Type(Integer32):
    """Custom type ospfCurCfgRipMetricType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("type1", 2),
          ("type2", 3))
    )


_OspfCurCfgRipMetricType_Type.__name__ = "Integer32"
_OspfCurCfgRipMetricType_Object = MibScalar
ospfCurCfgRipMetricType = _OspfCurCfgRipMetricType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 5, 3),
    _OspfCurCfgRipMetricType_Type()
)
ospfCurCfgRipMetricType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgRipMetricType.setStatus("current")


class _OspfNewCfgRipMetricType_Type(Integer32):
    """Custom type ospfNewCfgRipMetricType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("type1", 2),
          ("type2", 3))
    )


_OspfNewCfgRipMetricType_Type.__name__ = "Integer32"
_OspfNewCfgRipMetricType_Object = MibScalar
ospfNewCfgRipMetricType = _OspfNewCfgRipMetricType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 5, 4),
    _OspfNewCfgRipMetricType_Type()
)
ospfNewCfgRipMetricType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgRipMetricType.setStatus("current")
_OspfCurCfgRipOutRmapList_Type = OctetString
_OspfCurCfgRipOutRmapList_Object = MibScalar
ospfCurCfgRipOutRmapList = _OspfCurCfgRipOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 5, 5),
    _OspfCurCfgRipOutRmapList_Type()
)
ospfCurCfgRipOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgRipOutRmapList.setStatus("current")
_OspfNewCfgRipOutRmapList_Type = OctetString
_OspfNewCfgRipOutRmapList_Object = MibScalar
ospfNewCfgRipOutRmapList = _OspfNewCfgRipOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 5, 6),
    _OspfNewCfgRipOutRmapList_Type()
)
ospfNewCfgRipOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNewCfgRipOutRmapList.setStatus("current")
_OspfNewCfgRipAddOutRmap_Type = Integer32
_OspfNewCfgRipAddOutRmap_Object = MibScalar
ospfNewCfgRipAddOutRmap = _OspfNewCfgRipAddOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 5, 7),
    _OspfNewCfgRipAddOutRmap_Type()
)
ospfNewCfgRipAddOutRmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgRipAddOutRmap.setStatus("current")
_OspfNewCfgRipRemoveOutRmap_Type = Integer32
_OspfNewCfgRipRemoveOutRmap_Object = MibScalar
ospfNewCfgRipRemoveOutRmap = _OspfNewCfgRipRemoveOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 4, 5, 8),
    _OspfNewCfgRipRemoveOutRmap_Type()
)
ospfNewCfgRipRemoveOutRmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgRipRemoveOutRmap.setStatus("current")
_OspfCurCfgMdkeyTable_Object = MibTable
ospfCurCfgMdkeyTable = _OspfCurCfgMdkeyTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 5)
)
if mibBuilder.loadTexts:
    ospfCurCfgMdkeyTable.setStatus("current")
_OspfCurCfgMdkeyEntry_Object = MibTableRow
ospfCurCfgMdkeyEntry = _OspfCurCfgMdkeyEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 5, 1)
)
ospfCurCfgMdkeyEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospfCurCfgMdkeyIndex"),
)
if mibBuilder.loadTexts:
    ospfCurCfgMdkeyEntry.setStatus("current")
_OspfCurCfgMdkeyIndex_Type = Integer32
_OspfCurCfgMdkeyIndex_Object = MibTableColumn
ospfCurCfgMdkeyIndex = _OspfCurCfgMdkeyIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 5, 1, 1),
    _OspfCurCfgMdkeyIndex_Type()
)
ospfCurCfgMdkeyIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgMdkeyIndex.setStatus("current")


class _OspfCurCfgMdkeyKey_Type(DisplayString):
    """Custom type ospfCurCfgMdkeyKey based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_OspfCurCfgMdkeyKey_Type.__name__ = "DisplayString"
_OspfCurCfgMdkeyKey_Object = MibTableColumn
ospfCurCfgMdkeyKey = _OspfCurCfgMdkeyKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 5, 1, 2),
    _OspfCurCfgMdkeyKey_Type()
)
ospfCurCfgMdkeyKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgMdkeyKey.setStatus("current")
_OspfNewCfgMdkeyTable_Object = MibTable
ospfNewCfgMdkeyTable = _OspfNewCfgMdkeyTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 6)
)
if mibBuilder.loadTexts:
    ospfNewCfgMdkeyTable.setStatus("current")
_OspfNewCfgMdkeyEntry_Object = MibTableRow
ospfNewCfgMdkeyEntry = _OspfNewCfgMdkeyEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 6, 1)
)
ospfNewCfgMdkeyEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospfNewCfgMdkeyIndex"),
)
if mibBuilder.loadTexts:
    ospfNewCfgMdkeyEntry.setStatus("current")
_OspfNewCfgMdkeyIndex_Type = Integer32
_OspfNewCfgMdkeyIndex_Object = MibTableColumn
ospfNewCfgMdkeyIndex = _OspfNewCfgMdkeyIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 6, 1, 1),
    _OspfNewCfgMdkeyIndex_Type()
)
ospfNewCfgMdkeyIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNewCfgMdkeyIndex.setStatus("current")


class _OspfNewCfgMdkeyKey_Type(DisplayString):
    """Custom type ospfNewCfgMdkeyKey based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_OspfNewCfgMdkeyKey_Type.__name__ = "DisplayString"
_OspfNewCfgMdkeyKey_Object = MibTableColumn
ospfNewCfgMdkeyKey = _OspfNewCfgMdkeyKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 6, 1, 2),
    _OspfNewCfgMdkeyKey_Type()
)
ospfNewCfgMdkeyKey.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgMdkeyKey.setStatus("current")


class _OspfNewCfgMdkeyDelete_Type(Integer32):
    """Custom type ospfNewCfgMdkeyDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_OspfNewCfgMdkeyDelete_Type.__name__ = "Integer32"
_OspfNewCfgMdkeyDelete_Object = MibTableColumn
ospfNewCfgMdkeyDelete = _OspfNewCfgMdkeyDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 6, 1, 3),
    _OspfNewCfgMdkeyDelete_Type()
)
ospfNewCfgMdkeyDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgMdkeyDelete.setStatus("current")
_OspfCurCfgIntfTable_Object = MibTable
ospfCurCfgIntfTable = _OspfCurCfgIntfTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 7)
)
if mibBuilder.loadTexts:
    ospfCurCfgIntfTable.setStatus("current")
_OspfCurCfgIntfEntry_Object = MibTableRow
ospfCurCfgIntfEntry = _OspfCurCfgIntfEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 7, 1)
)
ospfCurCfgIntfEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospfCurCfgIntfIndex"),
)
if mibBuilder.loadTexts:
    ospfCurCfgIntfEntry.setStatus("current")
_OspfCurCfgIntfIndex_Type = Integer32
_OspfCurCfgIntfIndex_Object = MibTableColumn
ospfCurCfgIntfIndex = _OspfCurCfgIntfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 7, 1, 1),
    _OspfCurCfgIntfIndex_Type()
)
ospfCurCfgIntfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgIntfIndex.setStatus("current")


class _OspfCurCfgIntfArea_Type(Integer32):
    """Custom type ospfCurCfgIntfArea based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2),
    )


_OspfCurCfgIntfArea_Type.__name__ = "Integer32"
_OspfCurCfgIntfArea_Object = MibTableColumn
ospfCurCfgIntfArea = _OspfCurCfgIntfArea_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 7, 1, 2),
    _OspfCurCfgIntfArea_Type()
)
ospfCurCfgIntfArea.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgIntfArea.setStatus("current")


class _OspfCurCfgIntfMdkey_Type(Integer32):
    """Custom type ospfCurCfgIntfMdkey based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_OspfCurCfgIntfMdkey_Type.__name__ = "Integer32"
_OspfCurCfgIntfMdkey_Object = MibTableColumn
ospfCurCfgIntfMdkey = _OspfCurCfgIntfMdkey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 7, 1, 3),
    _OspfCurCfgIntfMdkey_Type()
)
ospfCurCfgIntfMdkey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgIntfMdkey.setStatus("current")


class _OspfCurCfgIntfCost_Type(Integer32):
    """Custom type ospfCurCfgIntfCost based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfCurCfgIntfCost_Type.__name__ = "Integer32"
_OspfCurCfgIntfCost_Object = MibTableColumn
ospfCurCfgIntfCost = _OspfCurCfgIntfCost_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 7, 1, 4),
    _OspfCurCfgIntfCost_Type()
)
ospfCurCfgIntfCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgIntfCost.setStatus("current")


class _OspfCurCfgIntfPrio_Type(Integer32):
    """Custom type ospfCurCfgIntfPrio based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_OspfCurCfgIntfPrio_Type.__name__ = "Integer32"
_OspfCurCfgIntfPrio_Object = MibTableColumn
ospfCurCfgIntfPrio = _OspfCurCfgIntfPrio_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 7, 1, 5),
    _OspfCurCfgIntfPrio_Type()
)
ospfCurCfgIntfPrio.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgIntfPrio.setStatus("current")


class _OspfCurCfgIntfHello_Type(Integer32):
    """Custom type ospfCurCfgIntfHello based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfCurCfgIntfHello_Type.__name__ = "Integer32"
_OspfCurCfgIntfHello_Object = MibTableColumn
ospfCurCfgIntfHello = _OspfCurCfgIntfHello_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 7, 1, 6),
    _OspfCurCfgIntfHello_Type()
)
ospfCurCfgIntfHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgIntfHello.setStatus("current")


class _OspfCurCfgIntfHelloMS_Type(Integer32):
    """Custom type ospfCurCfgIntfHelloMS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("seconds", 0),
          ("milliseconds", 1))
    )


_OspfCurCfgIntfHelloMS_Type.__name__ = "Integer32"
_OspfCurCfgIntfHelloMS_Object = MibTableColumn
ospfCurCfgIntfHelloMS = _OspfCurCfgIntfHelloMS_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 7, 1, 7),
    _OspfCurCfgIntfHelloMS_Type()
)
ospfCurCfgIntfHelloMS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgIntfHelloMS.setStatus("current")


class _OspfCurCfgIntfDead_Type(Integer32):
    """Custom type ospfCurCfgIntfDead based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfCurCfgIntfDead_Type.__name__ = "Integer32"
_OspfCurCfgIntfDead_Object = MibTableColumn
ospfCurCfgIntfDead = _OspfCurCfgIntfDead_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 7, 1, 8),
    _OspfCurCfgIntfDead_Type()
)
ospfCurCfgIntfDead.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgIntfDead.setStatus("current")


class _OspfCurCfgIntfDeadMS_Type(Integer32):
    """Custom type ospfCurCfgIntfDeadMS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("seconds", 0),
          ("milliseconds", 1))
    )


_OspfCurCfgIntfDeadMS_Type.__name__ = "Integer32"
_OspfCurCfgIntfDeadMS_Object = MibTableColumn
ospfCurCfgIntfDeadMS = _OspfCurCfgIntfDeadMS_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 7, 1, 9),
    _OspfCurCfgIntfDeadMS_Type()
)
ospfCurCfgIntfDeadMS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgIntfDeadMS.setStatus("current")


class _OspfCurCfgIntfTrans_Type(Integer32):
    """Custom type ospfCurCfgIntfTrans based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_OspfCurCfgIntfTrans_Type.__name__ = "Integer32"
_OspfCurCfgIntfTrans_Object = MibTableColumn
ospfCurCfgIntfTrans = _OspfCurCfgIntfTrans_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 7, 1, 10),
    _OspfCurCfgIntfTrans_Type()
)
ospfCurCfgIntfTrans.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgIntfTrans.setStatus("current")


class _OspfCurCfgIntfRetra_Type(Integer32):
    """Custom type ospfCurCfgIntfRetra based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_OspfCurCfgIntfRetra_Type.__name__ = "Integer32"
_OspfCurCfgIntfRetra_Object = MibTableColumn
ospfCurCfgIntfRetra = _OspfCurCfgIntfRetra_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 7, 1, 11),
    _OspfCurCfgIntfRetra_Type()
)
ospfCurCfgIntfRetra.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgIntfRetra.setStatus("current")


class _OspfCurCfgIntfAuthKey_Type(DisplayString):
    """Custom type ospfCurCfgIntfAuthKey based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_OspfCurCfgIntfAuthKey_Type.__name__ = "DisplayString"
_OspfCurCfgIntfAuthKey_Object = MibTableColumn
ospfCurCfgIntfAuthKey = _OspfCurCfgIntfAuthKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 7, 1, 12),
    _OspfCurCfgIntfAuthKey_Type()
)
ospfCurCfgIntfAuthKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgIntfAuthKey.setStatus("current")


class _OspfCurCfgIntfPassive_Type(Integer32):
    """Custom type ospfCurCfgIntfPassive based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_OspfCurCfgIntfPassive_Type.__name__ = "Integer32"
_OspfCurCfgIntfPassive_Object = MibTableColumn
ospfCurCfgIntfPassive = _OspfCurCfgIntfPassive_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 7, 1, 13),
    _OspfCurCfgIntfPassive_Type()
)
ospfCurCfgIntfPassive.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgIntfPassive.setStatus("current")


class _OspfCurCfgIntfStatus_Type(Integer32):
    """Custom type ospfCurCfgIntfStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_OspfCurCfgIntfStatus_Type.__name__ = "Integer32"
_OspfCurCfgIntfStatus_Object = MibTableColumn
ospfCurCfgIntfStatus = _OspfCurCfgIntfStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 7, 1, 14),
    _OspfCurCfgIntfStatus_Type()
)
ospfCurCfgIntfStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgIntfStatus.setStatus("current")


class _OspfCurCfgIntfPtop_Type(Integer32):
    """Custom type ospfCurCfgIntfPtop based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_OspfCurCfgIntfPtop_Type.__name__ = "Integer32"
_OspfCurCfgIntfPtop_Object = MibTableColumn
ospfCurCfgIntfPtop = _OspfCurCfgIntfPtop_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 7, 1, 15),
    _OspfCurCfgIntfPtop_Type()
)
ospfCurCfgIntfPtop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgIntfPtop.setStatus("current")
_OspfNewCfgIntfTable_Object = MibTable
ospfNewCfgIntfTable = _OspfNewCfgIntfTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 8)
)
if mibBuilder.loadTexts:
    ospfNewCfgIntfTable.setStatus("current")
_OspfNewCfgIntfEntry_Object = MibTableRow
ospfNewCfgIntfEntry = _OspfNewCfgIntfEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 8, 1)
)
ospfNewCfgIntfEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospfNewCfgIntfIndex"),
)
if mibBuilder.loadTexts:
    ospfNewCfgIntfEntry.setStatus("current")
_OspfNewCfgIntfIndex_Type = Integer32
_OspfNewCfgIntfIndex_Object = MibTableColumn
ospfNewCfgIntfIndex = _OspfNewCfgIntfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 8, 1, 1),
    _OspfNewCfgIntfIndex_Type()
)
ospfNewCfgIntfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNewCfgIntfIndex.setStatus("current")


class _OspfNewCfgIntfArea_Type(Integer32):
    """Custom type ospfNewCfgIntfArea based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 19),
    )


_OspfNewCfgIntfArea_Type.__name__ = "Integer32"
_OspfNewCfgIntfArea_Object = MibTableColumn
ospfNewCfgIntfArea = _OspfNewCfgIntfArea_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 8, 1, 2),
    _OspfNewCfgIntfArea_Type()
)
ospfNewCfgIntfArea.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgIntfArea.setStatus("current")


class _OspfNewCfgIntfMdkey_Type(Integer32):
    """Custom type ospfNewCfgIntfMdkey based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_OspfNewCfgIntfMdkey_Type.__name__ = "Integer32"
_OspfNewCfgIntfMdkey_Object = MibTableColumn
ospfNewCfgIntfMdkey = _OspfNewCfgIntfMdkey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 8, 1, 3),
    _OspfNewCfgIntfMdkey_Type()
)
ospfNewCfgIntfMdkey.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgIntfMdkey.setStatus("current")


class _OspfNewCfgIntfCost_Type(Integer32):
    """Custom type ospfNewCfgIntfCost based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfNewCfgIntfCost_Type.__name__ = "Integer32"
_OspfNewCfgIntfCost_Object = MibTableColumn
ospfNewCfgIntfCost = _OspfNewCfgIntfCost_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 8, 1, 4),
    _OspfNewCfgIntfCost_Type()
)
ospfNewCfgIntfCost.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgIntfCost.setStatus("current")


class _OspfNewCfgIntfPrio_Type(Integer32):
    """Custom type ospfNewCfgIntfPrio based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_OspfNewCfgIntfPrio_Type.__name__ = "Integer32"
_OspfNewCfgIntfPrio_Object = MibTableColumn
ospfNewCfgIntfPrio = _OspfNewCfgIntfPrio_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 8, 1, 5),
    _OspfNewCfgIntfPrio_Type()
)
ospfNewCfgIntfPrio.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgIntfPrio.setStatus("current")


class _OspfNewCfgIntfHello_Type(Integer32):
    """Custom type ospfNewCfgIntfHello based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfNewCfgIntfHello_Type.__name__ = "Integer32"
_OspfNewCfgIntfHello_Object = MibTableColumn
ospfNewCfgIntfHello = _OspfNewCfgIntfHello_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 8, 1, 6),
    _OspfNewCfgIntfHello_Type()
)
ospfNewCfgIntfHello.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgIntfHello.setStatus("current")


class _OspfNewCfgIntfHelloMS_Type(Integer32):
    """Custom type ospfNewCfgIntfHelloMS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("seconds", 0),
          ("milliseconds", 1))
    )


_OspfNewCfgIntfHelloMS_Type.__name__ = "Integer32"
_OspfNewCfgIntfHelloMS_Object = MibTableColumn
ospfNewCfgIntfHelloMS = _OspfNewCfgIntfHelloMS_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 8, 1, 7),
    _OspfNewCfgIntfHelloMS_Type()
)
ospfNewCfgIntfHelloMS.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgIntfHelloMS.setStatus("current")


class _OspfNewCfgIntfDead_Type(Integer32):
    """Custom type ospfNewCfgIntfDead based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfNewCfgIntfDead_Type.__name__ = "Integer32"
_OspfNewCfgIntfDead_Object = MibTableColumn
ospfNewCfgIntfDead = _OspfNewCfgIntfDead_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 8, 1, 8),
    _OspfNewCfgIntfDead_Type()
)
ospfNewCfgIntfDead.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgIntfDead.setStatus("current")


class _OspfNewCfgIntfDeadMS_Type(Integer32):
    """Custom type ospfNewCfgIntfDeadMS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("seconds", 0),
          ("milliseconds", 1))
    )


_OspfNewCfgIntfDeadMS_Type.__name__ = "Integer32"
_OspfNewCfgIntfDeadMS_Object = MibTableColumn
ospfNewCfgIntfDeadMS = _OspfNewCfgIntfDeadMS_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 8, 1, 9),
    _OspfNewCfgIntfDeadMS_Type()
)
ospfNewCfgIntfDeadMS.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgIntfDeadMS.setStatus("current")


class _OspfNewCfgIntfTrans_Type(Integer32):
    """Custom type ospfNewCfgIntfTrans based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_OspfNewCfgIntfTrans_Type.__name__ = "Integer32"
_OspfNewCfgIntfTrans_Object = MibTableColumn
ospfNewCfgIntfTrans = _OspfNewCfgIntfTrans_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 8, 1, 10),
    _OspfNewCfgIntfTrans_Type()
)
ospfNewCfgIntfTrans.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgIntfTrans.setStatus("current")


class _OspfNewCfgIntfRetra_Type(Integer32):
    """Custom type ospfNewCfgIntfRetra based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_OspfNewCfgIntfRetra_Type.__name__ = "Integer32"
_OspfNewCfgIntfRetra_Object = MibTableColumn
ospfNewCfgIntfRetra = _OspfNewCfgIntfRetra_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 8, 1, 11),
    _OspfNewCfgIntfRetra_Type()
)
ospfNewCfgIntfRetra.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgIntfRetra.setStatus("current")


class _OspfNewCfgIntfAuthKey_Type(DisplayString):
    """Custom type ospfNewCfgIntfAuthKey based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_OspfNewCfgIntfAuthKey_Type.__name__ = "DisplayString"
_OspfNewCfgIntfAuthKey_Object = MibTableColumn
ospfNewCfgIntfAuthKey = _OspfNewCfgIntfAuthKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 8, 1, 12),
    _OspfNewCfgIntfAuthKey_Type()
)
ospfNewCfgIntfAuthKey.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgIntfAuthKey.setStatus("current")


class _OspfNewCfgIntfPassive_Type(Integer32):
    """Custom type ospfNewCfgIntfPassive based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_OspfNewCfgIntfPassive_Type.__name__ = "Integer32"
_OspfNewCfgIntfPassive_Object = MibTableColumn
ospfNewCfgIntfPassive = _OspfNewCfgIntfPassive_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 8, 1, 13),
    _OspfNewCfgIntfPassive_Type()
)
ospfNewCfgIntfPassive.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgIntfPassive.setStatus("current")


class _OspfNewCfgIntfStatus_Type(Integer32):
    """Custom type ospfNewCfgIntfStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_OspfNewCfgIntfStatus_Type.__name__ = "Integer32"
_OspfNewCfgIntfStatus_Object = MibTableColumn
ospfNewCfgIntfStatus = _OspfNewCfgIntfStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 8, 1, 14),
    _OspfNewCfgIntfStatus_Type()
)
ospfNewCfgIntfStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgIntfStatus.setStatus("current")


class _OspfNewCfgIntfDelete_Type(Integer32):
    """Custom type ospfNewCfgIntfDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("other", 0),
          ("delete", 1))
    )


_OspfNewCfgIntfDelete_Type.__name__ = "Integer32"
_OspfNewCfgIntfDelete_Object = MibTableColumn
ospfNewCfgIntfDelete = _OspfNewCfgIntfDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 8, 1, 15),
    _OspfNewCfgIntfDelete_Type()
)
ospfNewCfgIntfDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgIntfDelete.setStatus("current")


class _OspfNewCfgIntfPtop_Type(Integer32):
    """Custom type ospfNewCfgIntfPtop based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_OspfNewCfgIntfPtop_Type.__name__ = "Integer32"
_OspfNewCfgIntfPtop_Object = MibTableColumn
ospfNewCfgIntfPtop = _OspfNewCfgIntfPtop_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 8, 1, 16),
    _OspfNewCfgIntfPtop_Type()
)
ospfNewCfgIntfPtop.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgIntfPtop.setStatus("current")
_OspfCurCfgVirtIntfTable_Object = MibTable
ospfCurCfgVirtIntfTable = _OspfCurCfgVirtIntfTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 9)
)
if mibBuilder.loadTexts:
    ospfCurCfgVirtIntfTable.setStatus("current")
_OspfCurCfgVirtIntfEntry_Object = MibTableRow
ospfCurCfgVirtIntfEntry = _OspfCurCfgVirtIntfEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 9, 1)
)
ospfCurCfgVirtIntfEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospfCurCfgVirtIntfIndex"),
)
if mibBuilder.loadTexts:
    ospfCurCfgVirtIntfEntry.setStatus("current")
_OspfCurCfgVirtIntfIndex_Type = Integer32
_OspfCurCfgVirtIntfIndex_Object = MibTableColumn
ospfCurCfgVirtIntfIndex = _OspfCurCfgVirtIntfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 9, 1, 1),
    _OspfCurCfgVirtIntfIndex_Type()
)
ospfCurCfgVirtIntfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgVirtIntfIndex.setStatus("current")


class _OspfCurCfgVirtIntfAreaId_Type(Integer32):
    """Custom type ospfCurCfgVirtIntfAreaId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 19),
    )


_OspfCurCfgVirtIntfAreaId_Type.__name__ = "Integer32"
_OspfCurCfgVirtIntfAreaId_Object = MibTableColumn
ospfCurCfgVirtIntfAreaId = _OspfCurCfgVirtIntfAreaId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 9, 1, 2),
    _OspfCurCfgVirtIntfAreaId_Type()
)
ospfCurCfgVirtIntfAreaId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgVirtIntfAreaId.setStatus("current")
_OspfCurCfgVirtIntfNbr_Type = IpAddress
_OspfCurCfgVirtIntfNbr_Object = MibTableColumn
ospfCurCfgVirtIntfNbr = _OspfCurCfgVirtIntfNbr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 9, 1, 3),
    _OspfCurCfgVirtIntfNbr_Type()
)
ospfCurCfgVirtIntfNbr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgVirtIntfNbr.setStatus("current")


class _OspfCurCfgVirtIntfMdkey_Type(Integer32):
    """Custom type ospfCurCfgVirtIntfMdkey based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_OspfCurCfgVirtIntfMdkey_Type.__name__ = "Integer32"
_OspfCurCfgVirtIntfMdkey_Object = MibTableColumn
ospfCurCfgVirtIntfMdkey = _OspfCurCfgVirtIntfMdkey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 9, 1, 4),
    _OspfCurCfgVirtIntfMdkey_Type()
)
ospfCurCfgVirtIntfMdkey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgVirtIntfMdkey.setStatus("current")


class _OspfCurCfgVirtIntfHello_Type(Integer32):
    """Custom type ospfCurCfgVirtIntfHello based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfCurCfgVirtIntfHello_Type.__name__ = "Integer32"
_OspfCurCfgVirtIntfHello_Object = MibTableColumn
ospfCurCfgVirtIntfHello = _OspfCurCfgVirtIntfHello_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 9, 1, 5),
    _OspfCurCfgVirtIntfHello_Type()
)
ospfCurCfgVirtIntfHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgVirtIntfHello.setStatus("current")


class _OspfCurCfgVirtIntfHelloMS_Type(Integer32):
    """Custom type ospfCurCfgVirtIntfHelloMS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("seconds", 0),
          ("milliseconds", 1))
    )


_OspfCurCfgVirtIntfHelloMS_Type.__name__ = "Integer32"
_OspfCurCfgVirtIntfHelloMS_Object = MibTableColumn
ospfCurCfgVirtIntfHelloMS = _OspfCurCfgVirtIntfHelloMS_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 9, 1, 6),
    _OspfCurCfgVirtIntfHelloMS_Type()
)
ospfCurCfgVirtIntfHelloMS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgVirtIntfHelloMS.setStatus("current")


class _OspfCurCfgVirtIntfDead_Type(Integer32):
    """Custom type ospfCurCfgVirtIntfDead based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfCurCfgVirtIntfDead_Type.__name__ = "Integer32"
_OspfCurCfgVirtIntfDead_Object = MibTableColumn
ospfCurCfgVirtIntfDead = _OspfCurCfgVirtIntfDead_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 9, 1, 7),
    _OspfCurCfgVirtIntfDead_Type()
)
ospfCurCfgVirtIntfDead.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgVirtIntfDead.setStatus("current")


class _OspfCurCfgVirtIntfDeadMS_Type(Integer32):
    """Custom type ospfCurCfgVirtIntfDeadMS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("seconds", 0),
          ("milliseconds", 1))
    )


_OspfCurCfgVirtIntfDeadMS_Type.__name__ = "Integer32"
_OspfCurCfgVirtIntfDeadMS_Object = MibTableColumn
ospfCurCfgVirtIntfDeadMS = _OspfCurCfgVirtIntfDeadMS_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 9, 1, 8),
    _OspfCurCfgVirtIntfDeadMS_Type()
)
ospfCurCfgVirtIntfDeadMS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgVirtIntfDeadMS.setStatus("current")


class _OspfCurCfgVirtIntfTrans_Type(Integer32):
    """Custom type ospfCurCfgVirtIntfTrans based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_OspfCurCfgVirtIntfTrans_Type.__name__ = "Integer32"
_OspfCurCfgVirtIntfTrans_Object = MibTableColumn
ospfCurCfgVirtIntfTrans = _OspfCurCfgVirtIntfTrans_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 9, 1, 9),
    _OspfCurCfgVirtIntfTrans_Type()
)
ospfCurCfgVirtIntfTrans.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgVirtIntfTrans.setStatus("current")


class _OspfCurCfgVirtIntfRetra_Type(Integer32):
    """Custom type ospfCurCfgVirtIntfRetra based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_OspfCurCfgVirtIntfRetra_Type.__name__ = "Integer32"
_OspfCurCfgVirtIntfRetra_Object = MibTableColumn
ospfCurCfgVirtIntfRetra = _OspfCurCfgVirtIntfRetra_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 9, 1, 10),
    _OspfCurCfgVirtIntfRetra_Type()
)
ospfCurCfgVirtIntfRetra.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgVirtIntfRetra.setStatus("current")


class _OspfCurCfgVirtIntfAuthKey_Type(DisplayString):
    """Custom type ospfCurCfgVirtIntfAuthKey based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_OspfCurCfgVirtIntfAuthKey_Type.__name__ = "DisplayString"
_OspfCurCfgVirtIntfAuthKey_Object = MibTableColumn
ospfCurCfgVirtIntfAuthKey = _OspfCurCfgVirtIntfAuthKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 9, 1, 11),
    _OspfCurCfgVirtIntfAuthKey_Type()
)
ospfCurCfgVirtIntfAuthKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgVirtIntfAuthKey.setStatus("current")


class _OspfCurCfgVirtIntfStatus_Type(Integer32):
    """Custom type ospfCurCfgVirtIntfStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_OspfCurCfgVirtIntfStatus_Type.__name__ = "Integer32"
_OspfCurCfgVirtIntfStatus_Object = MibTableColumn
ospfCurCfgVirtIntfStatus = _OspfCurCfgVirtIntfStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 9, 1, 12),
    _OspfCurCfgVirtIntfStatus_Type()
)
ospfCurCfgVirtIntfStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgVirtIntfStatus.setStatus("current")
_OspfNewCfgVirtIntfTable_Object = MibTable
ospfNewCfgVirtIntfTable = _OspfNewCfgVirtIntfTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 10)
)
if mibBuilder.loadTexts:
    ospfNewCfgVirtIntfTable.setStatus("current")
_OspfNewCfgVirtIntfEntry_Object = MibTableRow
ospfNewCfgVirtIntfEntry = _OspfNewCfgVirtIntfEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 10, 1)
)
ospfNewCfgVirtIntfEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospfNewCfgVirtIntfIndex"),
)
if mibBuilder.loadTexts:
    ospfNewCfgVirtIntfEntry.setStatus("current")
_OspfNewCfgVirtIntfIndex_Type = Integer32
_OspfNewCfgVirtIntfIndex_Object = MibTableColumn
ospfNewCfgVirtIntfIndex = _OspfNewCfgVirtIntfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 10, 1, 1),
    _OspfNewCfgVirtIntfIndex_Type()
)
ospfNewCfgVirtIntfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNewCfgVirtIntfIndex.setStatus("current")


class _OspfNewCfgVirtIntfAreaId_Type(Integer32):
    """Custom type ospfNewCfgVirtIntfAreaId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 19),
    )


_OspfNewCfgVirtIntfAreaId_Type.__name__ = "Integer32"
_OspfNewCfgVirtIntfAreaId_Object = MibTableColumn
ospfNewCfgVirtIntfAreaId = _OspfNewCfgVirtIntfAreaId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 10, 1, 2),
    _OspfNewCfgVirtIntfAreaId_Type()
)
ospfNewCfgVirtIntfAreaId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgVirtIntfAreaId.setStatus("current")
_OspfNewCfgVirtIntfNbr_Type = IpAddress
_OspfNewCfgVirtIntfNbr_Object = MibTableColumn
ospfNewCfgVirtIntfNbr = _OspfNewCfgVirtIntfNbr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 10, 1, 3),
    _OspfNewCfgVirtIntfNbr_Type()
)
ospfNewCfgVirtIntfNbr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgVirtIntfNbr.setStatus("current")


class _OspfNewCfgVirtIntfMdkey_Type(Integer32):
    """Custom type ospfNewCfgVirtIntfMdkey based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_OspfNewCfgVirtIntfMdkey_Type.__name__ = "Integer32"
_OspfNewCfgVirtIntfMdkey_Object = MibTableColumn
ospfNewCfgVirtIntfMdkey = _OspfNewCfgVirtIntfMdkey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 10, 1, 4),
    _OspfNewCfgVirtIntfMdkey_Type()
)
ospfNewCfgVirtIntfMdkey.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgVirtIntfMdkey.setStatus("current")


class _OspfNewCfgVirtIntfHello_Type(Integer32):
    """Custom type ospfNewCfgVirtIntfHello based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfNewCfgVirtIntfHello_Type.__name__ = "Integer32"
_OspfNewCfgVirtIntfHello_Object = MibTableColumn
ospfNewCfgVirtIntfHello = _OspfNewCfgVirtIntfHello_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 10, 1, 5),
    _OspfNewCfgVirtIntfHello_Type()
)
ospfNewCfgVirtIntfHello.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgVirtIntfHello.setStatus("current")


class _OspfNewCfgVirtIntfHelloMS_Type(Integer32):
    """Custom type ospfNewCfgVirtIntfHelloMS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("seconds", 0),
          ("milliseconds", 1))
    )


_OspfNewCfgVirtIntfHelloMS_Type.__name__ = "Integer32"
_OspfNewCfgVirtIntfHelloMS_Object = MibTableColumn
ospfNewCfgVirtIntfHelloMS = _OspfNewCfgVirtIntfHelloMS_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 10, 1, 6),
    _OspfNewCfgVirtIntfHelloMS_Type()
)
ospfNewCfgVirtIntfHelloMS.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgVirtIntfHelloMS.setStatus("current")


class _OspfNewCfgVirtIntfDead_Type(Integer32):
    """Custom type ospfNewCfgVirtIntfDead based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfNewCfgVirtIntfDead_Type.__name__ = "Integer32"
_OspfNewCfgVirtIntfDead_Object = MibTableColumn
ospfNewCfgVirtIntfDead = _OspfNewCfgVirtIntfDead_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 10, 1, 7),
    _OspfNewCfgVirtIntfDead_Type()
)
ospfNewCfgVirtIntfDead.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgVirtIntfDead.setStatus("current")


class _OspfNewCfgVirtIntfDeadMS_Type(Integer32):
    """Custom type ospfNewCfgVirtIntfDeadMS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("seconds", 0),
          ("milliseconds", 1))
    )


_OspfNewCfgVirtIntfDeadMS_Type.__name__ = "Integer32"
_OspfNewCfgVirtIntfDeadMS_Object = MibTableColumn
ospfNewCfgVirtIntfDeadMS = _OspfNewCfgVirtIntfDeadMS_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 10, 1, 8),
    _OspfNewCfgVirtIntfDeadMS_Type()
)
ospfNewCfgVirtIntfDeadMS.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgVirtIntfDeadMS.setStatus("current")


class _OspfNewCfgVirtIntfTrans_Type(Integer32):
    """Custom type ospfNewCfgVirtIntfTrans based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_OspfNewCfgVirtIntfTrans_Type.__name__ = "Integer32"
_OspfNewCfgVirtIntfTrans_Object = MibTableColumn
ospfNewCfgVirtIntfTrans = _OspfNewCfgVirtIntfTrans_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 10, 1, 9),
    _OspfNewCfgVirtIntfTrans_Type()
)
ospfNewCfgVirtIntfTrans.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgVirtIntfTrans.setStatus("current")


class _OspfNewCfgVirtIntfRetra_Type(Integer32):
    """Custom type ospfNewCfgVirtIntfRetra based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_OspfNewCfgVirtIntfRetra_Type.__name__ = "Integer32"
_OspfNewCfgVirtIntfRetra_Object = MibTableColumn
ospfNewCfgVirtIntfRetra = _OspfNewCfgVirtIntfRetra_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 10, 1, 10),
    _OspfNewCfgVirtIntfRetra_Type()
)
ospfNewCfgVirtIntfRetra.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgVirtIntfRetra.setStatus("current")


class _OspfNewCfgVirtIntfAuthKey_Type(DisplayString):
    """Custom type ospfNewCfgVirtIntfAuthKey based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_OspfNewCfgVirtIntfAuthKey_Type.__name__ = "DisplayString"
_OspfNewCfgVirtIntfAuthKey_Object = MibTableColumn
ospfNewCfgVirtIntfAuthKey = _OspfNewCfgVirtIntfAuthKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 10, 1, 11),
    _OspfNewCfgVirtIntfAuthKey_Type()
)
ospfNewCfgVirtIntfAuthKey.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgVirtIntfAuthKey.setStatus("current")


class _OspfNewCfgVirtIntfStatus_Type(Integer32):
    """Custom type ospfNewCfgVirtIntfStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_OspfNewCfgVirtIntfStatus_Type.__name__ = "Integer32"
_OspfNewCfgVirtIntfStatus_Object = MibTableColumn
ospfNewCfgVirtIntfStatus = _OspfNewCfgVirtIntfStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 10, 1, 12),
    _OspfNewCfgVirtIntfStatus_Type()
)
ospfNewCfgVirtIntfStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgVirtIntfStatus.setStatus("current")


class _OspfNewCfgVirtIntfDelete_Type(Integer32):
    """Custom type ospfNewCfgVirtIntfDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("other", 0),
          ("delete", 1))
    )


_OspfNewCfgVirtIntfDelete_Type.__name__ = "Integer32"
_OspfNewCfgVirtIntfDelete_Object = MibTableColumn
ospfNewCfgVirtIntfDelete = _OspfNewCfgVirtIntfDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 10, 1, 13),
    _OspfNewCfgVirtIntfDelete_Type()
)
ospfNewCfgVirtIntfDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgVirtIntfDelete.setStatus("current")
_OspfMdkeyTableMaxSize_Type = Integer32
_OspfMdkeyTableMaxSize_Object = MibScalar
ospfMdkeyTableMaxSize = _OspfMdkeyTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 11),
    _OspfMdkeyTableMaxSize_Type()
)
ospfMdkeyTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfMdkeyTableMaxSize.setStatus("current")
_OspfCurCfgHostTable_Object = MibTable
ospfCurCfgHostTable = _OspfCurCfgHostTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 12)
)
if mibBuilder.loadTexts:
    ospfCurCfgHostTable.setStatus("current")
_OspfCurCfgHostEntry_Object = MibTableRow
ospfCurCfgHostEntry = _OspfCurCfgHostEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 12, 1)
)
ospfCurCfgHostEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospfCurCfgHostIndex"),
)
if mibBuilder.loadTexts:
    ospfCurCfgHostEntry.setStatus("current")
_OspfCurCfgHostIndex_Type = Integer32
_OspfCurCfgHostIndex_Object = MibTableColumn
ospfCurCfgHostIndex = _OspfCurCfgHostIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 12, 1, 1),
    _OspfCurCfgHostIndex_Type()
)
ospfCurCfgHostIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgHostIndex.setStatus("current")
_OspfCurCfgHostIpAddr_Type = IpAddress
_OspfCurCfgHostIpAddr_Object = MibTableColumn
ospfCurCfgHostIpAddr = _OspfCurCfgHostIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 12, 1, 2),
    _OspfCurCfgHostIpAddr_Type()
)
ospfCurCfgHostIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgHostIpAddr.setStatus("current")
_OspfCurCfgHostAreaIndex_Type = Integer32
_OspfCurCfgHostAreaIndex_Object = MibTableColumn
ospfCurCfgHostAreaIndex = _OspfCurCfgHostAreaIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 12, 1, 3),
    _OspfCurCfgHostAreaIndex_Type()
)
ospfCurCfgHostAreaIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgHostAreaIndex.setStatus("current")


class _OspfCurCfgHostCost_Type(Integer32):
    """Custom type ospfCurCfgHostCost based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfCurCfgHostCost_Type.__name__ = "Integer32"
_OspfCurCfgHostCost_Object = MibTableColumn
ospfCurCfgHostCost = _OspfCurCfgHostCost_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 12, 1, 4),
    _OspfCurCfgHostCost_Type()
)
ospfCurCfgHostCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgHostCost.setStatus("current")


class _OspfCurCfgHostState_Type(Integer32):
    """Custom type ospfCurCfgHostState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_OspfCurCfgHostState_Type.__name__ = "Integer32"
_OspfCurCfgHostState_Object = MibTableColumn
ospfCurCfgHostState = _OspfCurCfgHostState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 12, 1, 5),
    _OspfCurCfgHostState_Type()
)
ospfCurCfgHostState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgHostState.setStatus("current")
_OspfNewCfgHostTable_Object = MibTable
ospfNewCfgHostTable = _OspfNewCfgHostTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 13)
)
if mibBuilder.loadTexts:
    ospfNewCfgHostTable.setStatus("current")
_OspfNewCfgHostEntry_Object = MibTableRow
ospfNewCfgHostEntry = _OspfNewCfgHostEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 13, 1)
)
ospfNewCfgHostEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospfNewCfgHostIndex"),
)
if mibBuilder.loadTexts:
    ospfNewCfgHostEntry.setStatus("current")
_OspfNewCfgHostIndex_Type = Integer32
_OspfNewCfgHostIndex_Object = MibTableColumn
ospfNewCfgHostIndex = _OspfNewCfgHostIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 13, 1, 1),
    _OspfNewCfgHostIndex_Type()
)
ospfNewCfgHostIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNewCfgHostIndex.setStatus("current")
_OspfNewCfgHostIpAddr_Type = IpAddress
_OspfNewCfgHostIpAddr_Object = MibTableColumn
ospfNewCfgHostIpAddr = _OspfNewCfgHostIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 13, 1, 2),
    _OspfNewCfgHostIpAddr_Type()
)
ospfNewCfgHostIpAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgHostIpAddr.setStatus("current")
_OspfNewCfgHostAreaIndex_Type = Integer32
_OspfNewCfgHostAreaIndex_Object = MibTableColumn
ospfNewCfgHostAreaIndex = _OspfNewCfgHostAreaIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 13, 1, 3),
    _OspfNewCfgHostAreaIndex_Type()
)
ospfNewCfgHostAreaIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgHostAreaIndex.setStatus("current")


class _OspfNewCfgHostCost_Type(Integer32):
    """Custom type ospfNewCfgHostCost based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfNewCfgHostCost_Type.__name__ = "Integer32"
_OspfNewCfgHostCost_Object = MibTableColumn
ospfNewCfgHostCost = _OspfNewCfgHostCost_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 13, 1, 4),
    _OspfNewCfgHostCost_Type()
)
ospfNewCfgHostCost.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgHostCost.setStatus("current")


class _OspfNewCfgHostState_Type(Integer32):
    """Custom type ospfNewCfgHostState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_OspfNewCfgHostState_Type.__name__ = "Integer32"
_OspfNewCfgHostState_Object = MibTableColumn
ospfNewCfgHostState = _OspfNewCfgHostState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 13, 1, 5),
    _OspfNewCfgHostState_Type()
)
ospfNewCfgHostState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgHostState.setStatus("current")


class _OspfNewCfgHostDelete_Type(Integer32):
    """Custom type ospfNewCfgHostDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_OspfNewCfgHostDelete_Type.__name__ = "Integer32"
_OspfNewCfgHostDelete_Object = MibTableColumn
ospfNewCfgHostDelete = _OspfNewCfgHostDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 13, 1, 6),
    _OspfNewCfgHostDelete_Type()
)
ospfNewCfgHostDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgHostDelete.setStatus("current")
_OspfCurCfgRangeTable_Object = MibTable
ospfCurCfgRangeTable = _OspfCurCfgRangeTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 14)
)
if mibBuilder.loadTexts:
    ospfCurCfgRangeTable.setStatus("current")
_OspfCurCfgRangeEntry_Object = MibTableRow
ospfCurCfgRangeEntry = _OspfCurCfgRangeEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 14, 1)
)
ospfCurCfgRangeEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospfCurCfgRangeIndex"),
)
if mibBuilder.loadTexts:
    ospfCurCfgRangeEntry.setStatus("current")
_OspfCurCfgRangeIndex_Type = Integer32
_OspfCurCfgRangeIndex_Object = MibTableColumn
ospfCurCfgRangeIndex = _OspfCurCfgRangeIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 14, 1, 1),
    _OspfCurCfgRangeIndex_Type()
)
ospfCurCfgRangeIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgRangeIndex.setStatus("current")
_OspfCurCfgRangeAddr_Type = IpAddress
_OspfCurCfgRangeAddr_Object = MibTableColumn
ospfCurCfgRangeAddr = _OspfCurCfgRangeAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 14, 1, 2),
    _OspfCurCfgRangeAddr_Type()
)
ospfCurCfgRangeAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgRangeAddr.setStatus("current")
_OspfCurCfgRangeMask_Type = IpAddress
_OspfCurCfgRangeMask_Object = MibTableColumn
ospfCurCfgRangeMask = _OspfCurCfgRangeMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 14, 1, 3),
    _OspfCurCfgRangeMask_Type()
)
ospfCurCfgRangeMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgRangeMask.setStatus("current")
_OspfCurCfgRangeAreaIndex_Type = Integer32
_OspfCurCfgRangeAreaIndex_Object = MibTableColumn
ospfCurCfgRangeAreaIndex = _OspfCurCfgRangeAreaIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 14, 1, 4),
    _OspfCurCfgRangeAreaIndex_Type()
)
ospfCurCfgRangeAreaIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgRangeAreaIndex.setStatus("current")


class _OspfCurCfgRangeHideState_Type(Integer32):
    """Custom type ospfCurCfgRangeHideState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_OspfCurCfgRangeHideState_Type.__name__ = "Integer32"
_OspfCurCfgRangeHideState_Object = MibTableColumn
ospfCurCfgRangeHideState = _OspfCurCfgRangeHideState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 14, 1, 5),
    _OspfCurCfgRangeHideState_Type()
)
ospfCurCfgRangeHideState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgRangeHideState.setStatus("current")


class _OspfCurCfgRangeState_Type(Integer32):
    """Custom type ospfCurCfgRangeState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_OspfCurCfgRangeState_Type.__name__ = "Integer32"
_OspfCurCfgRangeState_Object = MibTableColumn
ospfCurCfgRangeState = _OspfCurCfgRangeState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 14, 1, 6),
    _OspfCurCfgRangeState_Type()
)
ospfCurCfgRangeState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgRangeState.setStatus("current")
_OspfNewCfgRangeTable_Object = MibTable
ospfNewCfgRangeTable = _OspfNewCfgRangeTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 15)
)
if mibBuilder.loadTexts:
    ospfNewCfgRangeTable.setStatus("current")
_OspfNewCfgRangeEntry_Object = MibTableRow
ospfNewCfgRangeEntry = _OspfNewCfgRangeEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 15, 1)
)
ospfNewCfgRangeEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospfNewCfgRangeIndex"),
)
if mibBuilder.loadTexts:
    ospfNewCfgRangeEntry.setStatus("current")
_OspfNewCfgRangeIndex_Type = Integer32
_OspfNewCfgRangeIndex_Object = MibTableColumn
ospfNewCfgRangeIndex = _OspfNewCfgRangeIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 15, 1, 1),
    _OspfNewCfgRangeIndex_Type()
)
ospfNewCfgRangeIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNewCfgRangeIndex.setStatus("current")
_OspfNewCfgRangeAddr_Type = IpAddress
_OspfNewCfgRangeAddr_Object = MibTableColumn
ospfNewCfgRangeAddr = _OspfNewCfgRangeAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 15, 1, 2),
    _OspfNewCfgRangeAddr_Type()
)
ospfNewCfgRangeAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgRangeAddr.setStatus("current")
_OspfNewCfgRangeMask_Type = IpAddress
_OspfNewCfgRangeMask_Object = MibTableColumn
ospfNewCfgRangeMask = _OspfNewCfgRangeMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 15, 1, 3),
    _OspfNewCfgRangeMask_Type()
)
ospfNewCfgRangeMask.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgRangeMask.setStatus("current")
_OspfNewCfgRangeAreaIndex_Type = Integer32
_OspfNewCfgRangeAreaIndex_Object = MibTableColumn
ospfNewCfgRangeAreaIndex = _OspfNewCfgRangeAreaIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 15, 1, 4),
    _OspfNewCfgRangeAreaIndex_Type()
)
ospfNewCfgRangeAreaIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgRangeAreaIndex.setStatus("current")


class _OspfNewCfgRangeHideState_Type(Integer32):
    """Custom type ospfNewCfgRangeHideState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_OspfNewCfgRangeHideState_Type.__name__ = "Integer32"
_OspfNewCfgRangeHideState_Object = MibTableColumn
ospfNewCfgRangeHideState = _OspfNewCfgRangeHideState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 15, 1, 5),
    _OspfNewCfgRangeHideState_Type()
)
ospfNewCfgRangeHideState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgRangeHideState.setStatus("current")


class _OspfNewCfgRangeState_Type(Integer32):
    """Custom type ospfNewCfgRangeState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_OspfNewCfgRangeState_Type.__name__ = "Integer32"
_OspfNewCfgRangeState_Object = MibTableColumn
ospfNewCfgRangeState = _OspfNewCfgRangeState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 15, 1, 6),
    _OspfNewCfgRangeState_Type()
)
ospfNewCfgRangeState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgRangeState.setStatus("current")


class _OspfNewCfgRangeDelete_Type(Integer32):
    """Custom type ospfNewCfgRangeDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_OspfNewCfgRangeDelete_Type.__name__ = "Integer32"
_OspfNewCfgRangeDelete_Object = MibTableColumn
ospfNewCfgRangeDelete = _OspfNewCfgRangeDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 15, 1, 7),
    _OspfNewCfgRangeDelete_Type()
)
ospfNewCfgRangeDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgRangeDelete.setStatus("current")
_OspfCurCfgLoopIfTable_Object = MibTable
ospfCurCfgLoopIfTable = _OspfCurCfgLoopIfTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 20)
)
if mibBuilder.loadTexts:
    ospfCurCfgLoopIfTable.setStatus("current")
_OspfCurCfgLoopIfEntry_Object = MibTableRow
ospfCurCfgLoopIfEntry = _OspfCurCfgLoopIfEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 20, 1)
)
ospfCurCfgLoopIfEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospfCurCfgLoopIfIndex"),
)
if mibBuilder.loadTexts:
    ospfCurCfgLoopIfEntry.setStatus("current")
_OspfCurCfgLoopIfIndex_Type = Integer32
_OspfCurCfgLoopIfIndex_Object = MibTableColumn
ospfCurCfgLoopIfIndex = _OspfCurCfgLoopIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 20, 1, 1),
    _OspfCurCfgLoopIfIndex_Type()
)
ospfCurCfgLoopIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgLoopIfIndex.setStatus("current")
_OspfCurCfgLoopIfArea_Type = Integer32
_OspfCurCfgLoopIfArea_Object = MibTableColumn
ospfCurCfgLoopIfArea = _OspfCurCfgLoopIfArea_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 20, 1, 2),
    _OspfCurCfgLoopIfArea_Type()
)
ospfCurCfgLoopIfArea.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgLoopIfArea.setStatus("current")


class _OspfCurCfgLoopIfStatus_Type(Integer32):
    """Custom type ospfCurCfgLoopIfStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_OspfCurCfgLoopIfStatus_Type.__name__ = "Integer32"
_OspfCurCfgLoopIfStatus_Object = MibTableColumn
ospfCurCfgLoopIfStatus = _OspfCurCfgLoopIfStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 20, 1, 3),
    _OspfCurCfgLoopIfStatus_Type()
)
ospfCurCfgLoopIfStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgLoopIfStatus.setStatus("current")
_OspfNewCfgLoopIfTable_Object = MibTable
ospfNewCfgLoopIfTable = _OspfNewCfgLoopIfTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 21)
)
if mibBuilder.loadTexts:
    ospfNewCfgLoopIfTable.setStatus("current")
_OspfNewCfgLoopIfEntry_Object = MibTableRow
ospfNewCfgLoopIfEntry = _OspfNewCfgLoopIfEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 21, 1)
)
ospfNewCfgLoopIfEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospfNewCfgLoopIfIndex"),
)
if mibBuilder.loadTexts:
    ospfNewCfgLoopIfEntry.setStatus("current")
_OspfNewCfgLoopIfIndex_Type = Integer32
_OspfNewCfgLoopIfIndex_Object = MibTableColumn
ospfNewCfgLoopIfIndex = _OspfNewCfgLoopIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 21, 1, 1),
    _OspfNewCfgLoopIfIndex_Type()
)
ospfNewCfgLoopIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNewCfgLoopIfIndex.setStatus("current")


class _OspfNewCfgLoopIfArea_Type(Integer32):
    """Custom type ospfNewCfgLoopIfArea based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2),
    )


_OspfNewCfgLoopIfArea_Type.__name__ = "Integer32"
_OspfNewCfgLoopIfArea_Object = MibTableColumn
ospfNewCfgLoopIfArea = _OspfNewCfgLoopIfArea_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 21, 1, 2),
    _OspfNewCfgLoopIfArea_Type()
)
ospfNewCfgLoopIfArea.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgLoopIfArea.setStatus("current")


class _OspfNewCfgLoopIfStatus_Type(Integer32):
    """Custom type ospfNewCfgLoopIfStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_OspfNewCfgLoopIfStatus_Type.__name__ = "Integer32"
_OspfNewCfgLoopIfStatus_Object = MibTableColumn
ospfNewCfgLoopIfStatus = _OspfNewCfgLoopIfStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 21, 1, 3),
    _OspfNewCfgLoopIfStatus_Type()
)
ospfNewCfgLoopIfStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgLoopIfStatus.setStatus("current")


class _OspfNewCfgLoopIfDelete_Type(Integer32):
    """Custom type ospfNewCfgLoopIfDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("other", 0),
          ("delete", 1))
    )


_OspfNewCfgLoopIfDelete_Type.__name__ = "Integer32"
_OspfNewCfgLoopIfDelete_Object = MibTableColumn
ospfNewCfgLoopIfDelete = _OspfNewCfgLoopIfDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 13, 21, 1, 4),
    _OspfNewCfgLoopIfDelete_Type()
)
ospfNewCfgLoopIfDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgLoopIfDelete.setStatus("current")
_IpGeneralCfg_ObjectIdentity = ObjectIdentity
ipGeneralCfg = _IpGeneralCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 14)
)
_IpCurCfgRouterID_Type = IpAddress
_IpCurCfgRouterID_Object = MibScalar
ipCurCfgRouterID = _IpCurCfgRouterID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 14, 1),
    _IpCurCfgRouterID_Type()
)
ipCurCfgRouterID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgRouterID.setStatus("current")
_IpNewCfgRouterID_Type = IpAddress
_IpNewCfgRouterID_Object = MibScalar
ipNewCfgRouterID = _IpNewCfgRouterID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 14, 2),
    _IpNewCfgRouterID_Type()
)
ipNewCfgRouterID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipNewCfgRouterID.setStatus("current")
_IpStaticArpCfg_ObjectIdentity = ObjectIdentity
ipStaticArpCfg = _IpStaticArpCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 15)
)
_IpStaticArpTableMaxSize_Type = Integer32
_IpStaticArpTableMaxSize_Object = MibScalar
ipStaticArpTableMaxSize = _IpStaticArpTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 15, 1),
    _IpStaticArpTableMaxSize_Type()
)
ipStaticArpTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipStaticArpTableMaxSize.setStatus("current")
_IpCurCfgStaticArpTable_Object = MibTable
ipCurCfgStaticArpTable = _IpCurCfgStaticArpTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 15, 2)
)
if mibBuilder.loadTexts:
    ipCurCfgStaticArpTable.setStatus("current")
_IpCurCfgStaticArpEntry_Object = MibTableRow
ipCurCfgStaticArpEntry = _IpCurCfgStaticArpEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 15, 2, 1)
)
ipCurCfgStaticArpEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipCurCfgStaticArpIndx"),
)
if mibBuilder.loadTexts:
    ipCurCfgStaticArpEntry.setStatus("current")
_IpCurCfgStaticArpIndx_Type = Integer32
_IpCurCfgStaticArpIndx_Object = MibTableColumn
ipCurCfgStaticArpIndx = _IpCurCfgStaticArpIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 15, 2, 1, 1),
    _IpCurCfgStaticArpIndx_Type()
)
ipCurCfgStaticArpIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgStaticArpIndx.setStatus("current")
_IpCurCfgStaticArpIp_Type = IpAddress
_IpCurCfgStaticArpIp_Object = MibTableColumn
ipCurCfgStaticArpIp = _IpCurCfgStaticArpIp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 15, 2, 1, 2),
    _IpCurCfgStaticArpIp_Type()
)
ipCurCfgStaticArpIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgStaticArpIp.setStatus("current")
_IpCurCfgStaticArpMAC_Type = DisplayString
_IpCurCfgStaticArpMAC_Object = MibTableColumn
ipCurCfgStaticArpMAC = _IpCurCfgStaticArpMAC_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 15, 2, 1, 3),
    _IpCurCfgStaticArpMAC_Type()
)
ipCurCfgStaticArpMAC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgStaticArpMAC.setStatus("current")
_IpCurCfgStaticArpVlan_Type = Integer32
_IpCurCfgStaticArpVlan_Object = MibTableColumn
ipCurCfgStaticArpVlan = _IpCurCfgStaticArpVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 15, 2, 1, 4),
    _IpCurCfgStaticArpVlan_Type()
)
ipCurCfgStaticArpVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgStaticArpVlan.setStatus("current")
_IpCurCfgStaticArpPort_Type = PortNumber
_IpCurCfgStaticArpPort_Object = MibTableColumn
ipCurCfgStaticArpPort = _IpCurCfgStaticArpPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 15, 2, 1, 5),
    _IpCurCfgStaticArpPort_Type()
)
ipCurCfgStaticArpPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgStaticArpPort.setStatus("current")
_IpNewCfgStaticArpTable_Object = MibTable
ipNewCfgStaticArpTable = _IpNewCfgStaticArpTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 15, 3)
)
if mibBuilder.loadTexts:
    ipNewCfgStaticArpTable.setStatus("current")
_IpNewCfgStaticArpEntry_Object = MibTableRow
ipNewCfgStaticArpEntry = _IpNewCfgStaticArpEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 15, 3, 1)
)
ipNewCfgStaticArpEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipNewCfgStaticArpIndx"),
)
if mibBuilder.loadTexts:
    ipNewCfgStaticArpEntry.setStatus("current")
_IpNewCfgStaticArpIndx_Type = Integer32
_IpNewCfgStaticArpIndx_Object = MibTableColumn
ipNewCfgStaticArpIndx = _IpNewCfgStaticArpIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 15, 3, 1, 1),
    _IpNewCfgStaticArpIndx_Type()
)
ipNewCfgStaticArpIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipNewCfgStaticArpIndx.setStatus("current")
_IpNewCfgStaticArpIp_Type = IpAddress
_IpNewCfgStaticArpIp_Object = MibTableColumn
ipNewCfgStaticArpIp = _IpNewCfgStaticArpIp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 15, 3, 1, 2),
    _IpNewCfgStaticArpIp_Type()
)
ipNewCfgStaticArpIp.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgStaticArpIp.setStatus("current")
_IpNewCfgStaticArpMAC_Type = DisplayString
_IpNewCfgStaticArpMAC_Object = MibTableColumn
ipNewCfgStaticArpMAC = _IpNewCfgStaticArpMAC_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 15, 3, 1, 3),
    _IpNewCfgStaticArpMAC_Type()
)
ipNewCfgStaticArpMAC.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgStaticArpMAC.setStatus("current")
_IpNewCfgStaticArpVlan_Type = Integer32
_IpNewCfgStaticArpVlan_Object = MibTableColumn
ipNewCfgStaticArpVlan = _IpNewCfgStaticArpVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 15, 3, 1, 4),
    _IpNewCfgStaticArpVlan_Type()
)
ipNewCfgStaticArpVlan.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgStaticArpVlan.setStatus("current")
_IpNewCfgStaticArpPort_Type = PortNumber
_IpNewCfgStaticArpPort_Object = MibTableColumn
ipNewCfgStaticArpPort = _IpNewCfgStaticArpPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 15, 3, 1, 5),
    _IpNewCfgStaticArpPort_Type()
)
ipNewCfgStaticArpPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgStaticArpPort.setStatus("current")


class _IpNewCfgStaticArpAction_Type(Integer32):
    """Custom type ipNewCfgStaticArpAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_IpNewCfgStaticArpAction_Type.__name__ = "Integer32"
_IpNewCfgStaticArpAction_Object = MibTableColumn
ipNewCfgStaticArpAction = _IpNewCfgStaticArpAction_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 15, 3, 1, 6),
    _IpNewCfgStaticArpAction_Type()
)
ipNewCfgStaticArpAction.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgStaticArpAction.setStatus("current")


class _IpStaticArpClearAll_Type(Integer32):
    """Custom type ipStaticArpClearAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_IpStaticArpClearAll_Type.__name__ = "Integer32"
_IpStaticArpClearAll_Object = MibScalar
ipStaticArpClearAll = _IpStaticArpClearAll_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 15, 4),
    _IpStaticArpClearAll_Type()
)
ipStaticArpClearAll.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipStaticArpClearAll.setStatus("current")
_Rip2Cfg_ObjectIdentity = ObjectIdentity
rip2Cfg = _Rip2Cfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18)
)
_RipCurCfgIntfTable_Object = MibTable
ripCurCfgIntfTable = _RipCurCfgIntfTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 1)
)
if mibBuilder.loadTexts:
    ripCurCfgIntfTable.setStatus("current")
_RipCurCfgIntfEntry_Object = MibTableRow
ripCurCfgIntfEntry = _RipCurCfgIntfEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 1, 1)
)
ripCurCfgIntfEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ripCurCfgIntfIndex"),
)
if mibBuilder.loadTexts:
    ripCurCfgIntfEntry.setStatus("current")
_RipCurCfgIntfIndex_Type = Integer32
_RipCurCfgIntfIndex_Object = MibTableColumn
ripCurCfgIntfIndex = _RipCurCfgIntfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 1, 1, 1),
    _RipCurCfgIntfIndex_Type()
)
ripCurCfgIntfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgIntfIndex.setStatus("current")


class _RipCurCfgIntfVersion_Type(Integer32):
    """Custom type ripCurCfgIntfVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ripVersion1", 1),
          ("ripVersion2", 2),
          ("ripVersionBoth", 3))
    )


_RipCurCfgIntfVersion_Type.__name__ = "Integer32"
_RipCurCfgIntfVersion_Object = MibTableColumn
ripCurCfgIntfVersion = _RipCurCfgIntfVersion_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 1, 1, 2),
    _RipCurCfgIntfVersion_Type()
)
ripCurCfgIntfVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgIntfVersion.setStatus("current")


class _RipCurCfgIntfState_Type(Integer32):
    """Custom type ripCurCfgIntfState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RipCurCfgIntfState_Type.__name__ = "Integer32"
_RipCurCfgIntfState_Object = MibTableColumn
ripCurCfgIntfState = _RipCurCfgIntfState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 1, 1, 3),
    _RipCurCfgIntfState_Type()
)
ripCurCfgIntfState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgIntfState.setStatus("current")


class _RipCurCfgIntfListen_Type(Integer32):
    """Custom type ripCurCfgIntfListen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RipCurCfgIntfListen_Type.__name__ = "Integer32"
_RipCurCfgIntfListen_Object = MibTableColumn
ripCurCfgIntfListen = _RipCurCfgIntfListen_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 1, 1, 4),
    _RipCurCfgIntfListen_Type()
)
ripCurCfgIntfListen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgIntfListen.setStatus("current")


class _RipCurCfgIntfTrigUpdate_Type(Integer32):
    """Custom type ripCurCfgIntfTrigUpdate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RipCurCfgIntfTrigUpdate_Type.__name__ = "Integer32"
_RipCurCfgIntfTrigUpdate_Object = MibTableColumn
ripCurCfgIntfTrigUpdate = _RipCurCfgIntfTrigUpdate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 1, 1, 6),
    _RipCurCfgIntfTrigUpdate_Type()
)
ripCurCfgIntfTrigUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgIntfTrigUpdate.setStatus("current")


class _RipCurCfgIntfMcastUpdate_Type(Integer32):
    """Custom type ripCurCfgIntfMcastUpdate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RipCurCfgIntfMcastUpdate_Type.__name__ = "Integer32"
_RipCurCfgIntfMcastUpdate_Object = MibTableColumn
ripCurCfgIntfMcastUpdate = _RipCurCfgIntfMcastUpdate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 1, 1, 7),
    _RipCurCfgIntfMcastUpdate_Type()
)
ripCurCfgIntfMcastUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgIntfMcastUpdate.setStatus("current")


class _RipCurCfgIntfPoisonReverse_Type(Integer32):
    """Custom type ripCurCfgIntfPoisonReverse based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RipCurCfgIntfPoisonReverse_Type.__name__ = "Integer32"
_RipCurCfgIntfPoisonReverse_Object = MibTableColumn
ripCurCfgIntfPoisonReverse = _RipCurCfgIntfPoisonReverse_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 1, 1, 8),
    _RipCurCfgIntfPoisonReverse_Type()
)
ripCurCfgIntfPoisonReverse.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgIntfPoisonReverse.setStatus("current")


class _RipCurCfgIntfSupply_Type(Integer32):
    """Custom type ripCurCfgIntfSupply based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RipCurCfgIntfSupply_Type.__name__ = "Integer32"
_RipCurCfgIntfSupply_Object = MibTableColumn
ripCurCfgIntfSupply = _RipCurCfgIntfSupply_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 1, 1, 9),
    _RipCurCfgIntfSupply_Type()
)
ripCurCfgIntfSupply.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgIntfSupply.setStatus("current")


class _RipCurCfgIntfMetric_Type(Integer32):
    """Custom type ripCurCfgIntfMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_RipCurCfgIntfMetric_Type.__name__ = "Integer32"
_RipCurCfgIntfMetric_Object = MibTableColumn
ripCurCfgIntfMetric = _RipCurCfgIntfMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 1, 1, 10),
    _RipCurCfgIntfMetric_Type()
)
ripCurCfgIntfMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgIntfMetric.setStatus("current")


class _RipCurCfgIntfAuth_Type(Integer32):
    """Custom type ripCurCfgIntfAuth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("password", 2))
    )


_RipCurCfgIntfAuth_Type.__name__ = "Integer32"
_RipCurCfgIntfAuth_Object = MibTableColumn
ripCurCfgIntfAuth = _RipCurCfgIntfAuth_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 1, 1, 11),
    _RipCurCfgIntfAuth_Type()
)
ripCurCfgIntfAuth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgIntfAuth.setStatus("current")


class _RipCurCfgIntfKey_Type(DisplayString):
    """Custom type ripCurCfgIntfKey based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_RipCurCfgIntfKey_Type.__name__ = "DisplayString"
_RipCurCfgIntfKey_Object = MibTableColumn
ripCurCfgIntfKey = _RipCurCfgIntfKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 1, 1, 12),
    _RipCurCfgIntfKey_Type()
)
ripCurCfgIntfKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgIntfKey.setStatus("current")


class _RipCurCfgIntfDefault_Type(Integer32):
    """Custom type ripCurCfgIntfDefault based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("both", 1),
          ("listen", 2),
          ("supply", 3),
          ("none", 4))
    )


_RipCurCfgIntfDefault_Type.__name__ = "Integer32"
_RipCurCfgIntfDefault_Object = MibTableColumn
ripCurCfgIntfDefault = _RipCurCfgIntfDefault_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 1, 1, 13),
    _RipCurCfgIntfDefault_Type()
)
ripCurCfgIntfDefault.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgIntfDefault.setStatus("current")


class _RipCurCfgIntfSplitHorizon_Type(Integer32):
    """Custom type ripCurCfgIntfSplitHorizon based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_RipCurCfgIntfSplitHorizon_Type.__name__ = "Integer32"
_RipCurCfgIntfSplitHorizon_Object = MibTableColumn
ripCurCfgIntfSplitHorizon = _RipCurCfgIntfSplitHorizon_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 1, 1, 14),
    _RipCurCfgIntfSplitHorizon_Type()
)
ripCurCfgIntfSplitHorizon.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgIntfSplitHorizon.setStatus("current")
_RipNewCfgIntfTable_Object = MibTable
ripNewCfgIntfTable = _RipNewCfgIntfTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 2)
)
if mibBuilder.loadTexts:
    ripNewCfgIntfTable.setStatus("current")
_RipNewCfgIntfEntry_Object = MibTableRow
ripNewCfgIntfEntry = _RipNewCfgIntfEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 2, 1)
)
ripNewCfgIntfEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ripNewCfgIntfIndex"),
)
if mibBuilder.loadTexts:
    ripNewCfgIntfEntry.setStatus("current")
_RipNewCfgIntfIndex_Type = Integer32
_RipNewCfgIntfIndex_Object = MibTableColumn
ripNewCfgIntfIndex = _RipNewCfgIntfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 2, 1, 1),
    _RipNewCfgIntfIndex_Type()
)
ripNewCfgIntfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripNewCfgIntfIndex.setStatus("current")


class _RipNewCfgIntfVersion_Type(Integer32):
    """Custom type ripNewCfgIntfVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ripVersion1", 1),
          ("ripVersion2", 2),
          ("ripVersionBoth", 3))
    )


_RipNewCfgIntfVersion_Type.__name__ = "Integer32"
_RipNewCfgIntfVersion_Object = MibTableColumn
ripNewCfgIntfVersion = _RipNewCfgIntfVersion_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 2, 1, 2),
    _RipNewCfgIntfVersion_Type()
)
ripNewCfgIntfVersion.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ripNewCfgIntfVersion.setStatus("current")


class _RipNewCfgIntfSupply_Type(Integer32):
    """Custom type ripNewCfgIntfSupply based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RipNewCfgIntfSupply_Type.__name__ = "Integer32"
_RipNewCfgIntfSupply_Object = MibTableColumn
ripNewCfgIntfSupply = _RipNewCfgIntfSupply_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 2, 1, 3),
    _RipNewCfgIntfSupply_Type()
)
ripNewCfgIntfSupply.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ripNewCfgIntfSupply.setStatus("current")


class _RipNewCfgIntfListen_Type(Integer32):
    """Custom type ripNewCfgIntfListen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RipNewCfgIntfListen_Type.__name__ = "Integer32"
_RipNewCfgIntfListen_Object = MibTableColumn
ripNewCfgIntfListen = _RipNewCfgIntfListen_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 2, 1, 4),
    _RipNewCfgIntfListen_Type()
)
ripNewCfgIntfListen.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ripNewCfgIntfListen.setStatus("current")


class _RipNewCfgIntfTrigUpdate_Type(Integer32):
    """Custom type ripNewCfgIntfTrigUpdate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RipNewCfgIntfTrigUpdate_Type.__name__ = "Integer32"
_RipNewCfgIntfTrigUpdate_Object = MibTableColumn
ripNewCfgIntfTrigUpdate = _RipNewCfgIntfTrigUpdate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 2, 1, 6),
    _RipNewCfgIntfTrigUpdate_Type()
)
ripNewCfgIntfTrigUpdate.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ripNewCfgIntfTrigUpdate.setStatus("current")


class _RipNewCfgIntfMcastUpdate_Type(Integer32):
    """Custom type ripNewCfgIntfMcastUpdate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RipNewCfgIntfMcastUpdate_Type.__name__ = "Integer32"
_RipNewCfgIntfMcastUpdate_Object = MibTableColumn
ripNewCfgIntfMcastUpdate = _RipNewCfgIntfMcastUpdate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 2, 1, 7),
    _RipNewCfgIntfMcastUpdate_Type()
)
ripNewCfgIntfMcastUpdate.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ripNewCfgIntfMcastUpdate.setStatus("current")


class _RipNewCfgIntfPoisonReverse_Type(Integer32):
    """Custom type ripNewCfgIntfPoisonReverse based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RipNewCfgIntfPoisonReverse_Type.__name__ = "Integer32"
_RipNewCfgIntfPoisonReverse_Object = MibTableColumn
ripNewCfgIntfPoisonReverse = _RipNewCfgIntfPoisonReverse_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 2, 1, 8),
    _RipNewCfgIntfPoisonReverse_Type()
)
ripNewCfgIntfPoisonReverse.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ripNewCfgIntfPoisonReverse.setStatus("current")


class _RipNewCfgIntfState_Type(Integer32):
    """Custom type ripNewCfgIntfState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RipNewCfgIntfState_Type.__name__ = "Integer32"
_RipNewCfgIntfState_Object = MibTableColumn
ripNewCfgIntfState = _RipNewCfgIntfState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 2, 1, 9),
    _RipNewCfgIntfState_Type()
)
ripNewCfgIntfState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ripNewCfgIntfState.setStatus("current")


class _RipNewCfgIntfMetric_Type(Integer32):
    """Custom type ripNewCfgIntfMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_RipNewCfgIntfMetric_Type.__name__ = "Integer32"
_RipNewCfgIntfMetric_Object = MibTableColumn
ripNewCfgIntfMetric = _RipNewCfgIntfMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 2, 1, 10),
    _RipNewCfgIntfMetric_Type()
)
ripNewCfgIntfMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgIntfMetric.setStatus("current")


class _RipNewCfgIntfAuth_Type(Integer32):
    """Custom type ripNewCfgIntfAuth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("password", 2))
    )


_RipNewCfgIntfAuth_Type.__name__ = "Integer32"
_RipNewCfgIntfAuth_Object = MibTableColumn
ripNewCfgIntfAuth = _RipNewCfgIntfAuth_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 2, 1, 11),
    _RipNewCfgIntfAuth_Type()
)
ripNewCfgIntfAuth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgIntfAuth.setStatus("current")


class _RipNewCfgIntfKey_Type(DisplayString):
    """Custom type ripNewCfgIntfKey based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_RipNewCfgIntfKey_Type.__name__ = "DisplayString"
_RipNewCfgIntfKey_Object = MibTableColumn
ripNewCfgIntfKey = _RipNewCfgIntfKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 2, 1, 12),
    _RipNewCfgIntfKey_Type()
)
ripNewCfgIntfKey.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ripNewCfgIntfKey.setStatus("current")


class _RipNewCfgIntfDefault_Type(Integer32):
    """Custom type ripNewCfgIntfDefault based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("both", 1),
          ("listen", 2),
          ("supply", 3),
          ("none", 4))
    )


_RipNewCfgIntfDefault_Type.__name__ = "Integer32"
_RipNewCfgIntfDefault_Object = MibTableColumn
ripNewCfgIntfDefault = _RipNewCfgIntfDefault_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 2, 1, 13),
    _RipNewCfgIntfDefault_Type()
)
ripNewCfgIntfDefault.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ripNewCfgIntfDefault.setStatus("current")


class _RipNewCfgIntfSplitHorizon_Type(Integer32):
    """Custom type ripNewCfgIntfSplitHorizon based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_RipNewCfgIntfSplitHorizon_Type.__name__ = "Integer32"
_RipNewCfgIntfSplitHorizon_Object = MibTableColumn
ripNewCfgIntfSplitHorizon = _RipNewCfgIntfSplitHorizon_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 2, 1, 14),
    _RipNewCfgIntfSplitHorizon_Type()
)
ripNewCfgIntfSplitHorizon.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgIntfSplitHorizon.setStatus("current")
_RipGeneral_ObjectIdentity = ObjectIdentity
ripGeneral = _RipGeneral_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 3)
)


class _Rip2CurCfgState_Type(Integer32):
    """Custom type rip2CurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_Rip2CurCfgState_Type.__name__ = "Integer32"
_Rip2CurCfgState_Object = MibScalar
rip2CurCfgState = _Rip2CurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 3, 1),
    _Rip2CurCfgState_Type()
)
rip2CurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rip2CurCfgState.setStatus("current")


class _Rip2NewCfgState_Type(Integer32):
    """Custom type rip2NewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_Rip2NewCfgState_Type.__name__ = "Integer32"
_Rip2NewCfgState_Object = MibScalar
rip2NewCfgState = _Rip2NewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 3, 2),
    _Rip2NewCfgState_Type()
)
rip2NewCfgState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rip2NewCfgState.setStatus("current")


class _Rip2CurCfgUpdatePeriod_Type(Integer32):
    """Custom type rip2CurCfgUpdatePeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 120),
    )


_Rip2CurCfgUpdatePeriod_Type.__name__ = "Integer32"
_Rip2CurCfgUpdatePeriod_Object = MibScalar
rip2CurCfgUpdatePeriod = _Rip2CurCfgUpdatePeriod_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 3, 3),
    _Rip2CurCfgUpdatePeriod_Type()
)
rip2CurCfgUpdatePeriod.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rip2CurCfgUpdatePeriod.setStatus("current")


class _Rip2NewCfgUpdatePeriod_Type(Integer32):
    """Custom type rip2NewCfgUpdatePeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 120),
    )


_Rip2NewCfgUpdatePeriod_Type.__name__ = "Integer32"
_Rip2NewCfgUpdatePeriod_Object = MibScalar
rip2NewCfgUpdatePeriod = _Rip2NewCfgUpdatePeriod_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 3, 4),
    _Rip2NewCfgUpdatePeriod_Type()
)
rip2NewCfgUpdatePeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rip2NewCfgUpdatePeriod.setStatus("current")
_RipRouteRedistribution_ObjectIdentity = ObjectIdentity
ripRouteRedistribution = _RipRouteRedistribution_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4)
)
_RipRedistributeStatic_ObjectIdentity = ObjectIdentity
ripRedistributeStatic = _RipRedistributeStatic_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 1)
)


class _RipCurCfgStaticMetric_Type(Integer32):
    """Custom type ripCurCfgStaticMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_RipCurCfgStaticMetric_Type.__name__ = "Integer32"
_RipCurCfgStaticMetric_Object = MibScalar
ripCurCfgStaticMetric = _RipCurCfgStaticMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 1, 1),
    _RipCurCfgStaticMetric_Type()
)
ripCurCfgStaticMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgStaticMetric.setStatus("current")


class _RipNewCfgStaticMetric_Type(Integer32):
    """Custom type ripNewCfgStaticMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_RipNewCfgStaticMetric_Type.__name__ = "Integer32"
_RipNewCfgStaticMetric_Object = MibScalar
ripNewCfgStaticMetric = _RipNewCfgStaticMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 1, 2),
    _RipNewCfgStaticMetric_Type()
)
ripNewCfgStaticMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgStaticMetric.setStatus("current")
_RipCurCfgStaticOutRmapList_Type = OctetString
_RipCurCfgStaticOutRmapList_Object = MibScalar
ripCurCfgStaticOutRmapList = _RipCurCfgStaticOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 1, 5),
    _RipCurCfgStaticOutRmapList_Type()
)
ripCurCfgStaticOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgStaticOutRmapList.setStatus("current")
_RipNewCfgStaticOutRmapList_Type = OctetString
_RipNewCfgStaticOutRmapList_Object = MibScalar
ripNewCfgStaticOutRmapList = _RipNewCfgStaticOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 1, 6),
    _RipNewCfgStaticOutRmapList_Type()
)
ripNewCfgStaticOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripNewCfgStaticOutRmapList.setStatus("current")
_RipNewCfgStaticAddOutRmap_Type = Integer32
_RipNewCfgStaticAddOutRmap_Object = MibScalar
ripNewCfgStaticAddOutRmap = _RipNewCfgStaticAddOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 1, 7),
    _RipNewCfgStaticAddOutRmap_Type()
)
ripNewCfgStaticAddOutRmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgStaticAddOutRmap.setStatus("current")
_RipNewCfgStaticRemoveOutRmap_Type = Integer32
_RipNewCfgStaticRemoveOutRmap_Object = MibScalar
ripNewCfgStaticRemoveOutRmap = _RipNewCfgStaticRemoveOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 1, 8),
    _RipNewCfgStaticRemoveOutRmap_Type()
)
ripNewCfgStaticRemoveOutRmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgStaticRemoveOutRmap.setStatus("current")
_RipRedistributeEbgp_ObjectIdentity = ObjectIdentity
ripRedistributeEbgp = _RipRedistributeEbgp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 2)
)


class _RipCurCfgEbgpMetric_Type(Integer32):
    """Custom type ripCurCfgEbgpMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_RipCurCfgEbgpMetric_Type.__name__ = "Integer32"
_RipCurCfgEbgpMetric_Object = MibScalar
ripCurCfgEbgpMetric = _RipCurCfgEbgpMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 2, 1),
    _RipCurCfgEbgpMetric_Type()
)
ripCurCfgEbgpMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgEbgpMetric.setStatus("current")


class _RipNewCfgEbgpMetric_Type(Integer32):
    """Custom type ripNewCfgEbgpMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_RipNewCfgEbgpMetric_Type.__name__ = "Integer32"
_RipNewCfgEbgpMetric_Object = MibScalar
ripNewCfgEbgpMetric = _RipNewCfgEbgpMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 2, 2),
    _RipNewCfgEbgpMetric_Type()
)
ripNewCfgEbgpMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgEbgpMetric.setStatus("current")
_RipCurCfgEbgpOutRmapList_Type = OctetString
_RipCurCfgEbgpOutRmapList_Object = MibScalar
ripCurCfgEbgpOutRmapList = _RipCurCfgEbgpOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 2, 5),
    _RipCurCfgEbgpOutRmapList_Type()
)
ripCurCfgEbgpOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgEbgpOutRmapList.setStatus("current")
_RipNewCfgEbgpOutRmapList_Type = OctetString
_RipNewCfgEbgpOutRmapList_Object = MibScalar
ripNewCfgEbgpOutRmapList = _RipNewCfgEbgpOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 2, 6),
    _RipNewCfgEbgpOutRmapList_Type()
)
ripNewCfgEbgpOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripNewCfgEbgpOutRmapList.setStatus("current")
_RipNewCfgEbgpAddOutRmap_Type = Integer32
_RipNewCfgEbgpAddOutRmap_Object = MibScalar
ripNewCfgEbgpAddOutRmap = _RipNewCfgEbgpAddOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 2, 7),
    _RipNewCfgEbgpAddOutRmap_Type()
)
ripNewCfgEbgpAddOutRmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgEbgpAddOutRmap.setStatus("current")
_RipNewCfgEbgpRemoveOutRmap_Type = Integer32
_RipNewCfgEbgpRemoveOutRmap_Object = MibScalar
ripNewCfgEbgpRemoveOutRmap = _RipNewCfgEbgpRemoveOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 2, 8),
    _RipNewCfgEbgpRemoveOutRmap_Type()
)
ripNewCfgEbgpRemoveOutRmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgEbgpRemoveOutRmap.setStatus("current")
_RipRedistributeIbgp_ObjectIdentity = ObjectIdentity
ripRedistributeIbgp = _RipRedistributeIbgp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 3)
)


class _RipCurCfgIbgpMetric_Type(Integer32):
    """Custom type ripCurCfgIbgpMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_RipCurCfgIbgpMetric_Type.__name__ = "Integer32"
_RipCurCfgIbgpMetric_Object = MibScalar
ripCurCfgIbgpMetric = _RipCurCfgIbgpMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 3, 1),
    _RipCurCfgIbgpMetric_Type()
)
ripCurCfgIbgpMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgIbgpMetric.setStatus("current")


class _RipNewCfgIbgpMetric_Type(Integer32):
    """Custom type ripNewCfgIbgpMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_RipNewCfgIbgpMetric_Type.__name__ = "Integer32"
_RipNewCfgIbgpMetric_Object = MibScalar
ripNewCfgIbgpMetric = _RipNewCfgIbgpMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 3, 2),
    _RipNewCfgIbgpMetric_Type()
)
ripNewCfgIbgpMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgIbgpMetric.setStatus("current")
_RipCurCfgIbgpOutRmapList_Type = OctetString
_RipCurCfgIbgpOutRmapList_Object = MibScalar
ripCurCfgIbgpOutRmapList = _RipCurCfgIbgpOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 3, 5),
    _RipCurCfgIbgpOutRmapList_Type()
)
ripCurCfgIbgpOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgIbgpOutRmapList.setStatus("current")
_RipNewCfgIbgpOutRmapList_Type = OctetString
_RipNewCfgIbgpOutRmapList_Object = MibScalar
ripNewCfgIbgpOutRmapList = _RipNewCfgIbgpOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 3, 6),
    _RipNewCfgIbgpOutRmapList_Type()
)
ripNewCfgIbgpOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripNewCfgIbgpOutRmapList.setStatus("current")
_RipNewCfgIbgpAddOutRmap_Type = Integer32
_RipNewCfgIbgpAddOutRmap_Object = MibScalar
ripNewCfgIbgpAddOutRmap = _RipNewCfgIbgpAddOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 3, 7),
    _RipNewCfgIbgpAddOutRmap_Type()
)
ripNewCfgIbgpAddOutRmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgIbgpAddOutRmap.setStatus("current")
_RipNewCfgIbgpRemoveOutRmap_Type = Integer32
_RipNewCfgIbgpRemoveOutRmap_Object = MibScalar
ripNewCfgIbgpRemoveOutRmap = _RipNewCfgIbgpRemoveOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 3, 8),
    _RipNewCfgIbgpRemoveOutRmap_Type()
)
ripNewCfgIbgpRemoveOutRmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgIbgpRemoveOutRmap.setStatus("current")
_RipRedistributeFixed_ObjectIdentity = ObjectIdentity
ripRedistributeFixed = _RipRedistributeFixed_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 4)
)


class _RipCurCfgFixedMetric_Type(Integer32):
    """Custom type ripCurCfgFixedMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_RipCurCfgFixedMetric_Type.__name__ = "Integer32"
_RipCurCfgFixedMetric_Object = MibScalar
ripCurCfgFixedMetric = _RipCurCfgFixedMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 4, 1),
    _RipCurCfgFixedMetric_Type()
)
ripCurCfgFixedMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgFixedMetric.setStatus("current")


class _RipNewCfgFixedMetric_Type(Integer32):
    """Custom type ripNewCfgFixedMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_RipNewCfgFixedMetric_Type.__name__ = "Integer32"
_RipNewCfgFixedMetric_Object = MibScalar
ripNewCfgFixedMetric = _RipNewCfgFixedMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 4, 2),
    _RipNewCfgFixedMetric_Type()
)
ripNewCfgFixedMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgFixedMetric.setStatus("current")
_RipCurCfgFixedOutRmapList_Type = OctetString
_RipCurCfgFixedOutRmapList_Object = MibScalar
ripCurCfgFixedOutRmapList = _RipCurCfgFixedOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 4, 5),
    _RipCurCfgFixedOutRmapList_Type()
)
ripCurCfgFixedOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgFixedOutRmapList.setStatus("current")
_RipNewCfgFixedOutRmapList_Type = OctetString
_RipNewCfgFixedOutRmapList_Object = MibScalar
ripNewCfgFixedOutRmapList = _RipNewCfgFixedOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 4, 6),
    _RipNewCfgFixedOutRmapList_Type()
)
ripNewCfgFixedOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripNewCfgFixedOutRmapList.setStatus("current")
_RipNewCfgFixedAddOutRmap_Type = Integer32
_RipNewCfgFixedAddOutRmap_Object = MibScalar
ripNewCfgFixedAddOutRmap = _RipNewCfgFixedAddOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 4, 7),
    _RipNewCfgFixedAddOutRmap_Type()
)
ripNewCfgFixedAddOutRmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgFixedAddOutRmap.setStatus("current")
_RipNewCfgFixedRemoveOutRmap_Type = Integer32
_RipNewCfgFixedRemoveOutRmap_Object = MibScalar
ripNewCfgFixedRemoveOutRmap = _RipNewCfgFixedRemoveOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 4, 8),
    _RipNewCfgFixedRemoveOutRmap_Type()
)
ripNewCfgFixedRemoveOutRmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgFixedRemoveOutRmap.setStatus("current")
_RipRedistributeOspf_ObjectIdentity = ObjectIdentity
ripRedistributeOspf = _RipRedistributeOspf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 5)
)


class _RipCurCfgOspfMetric_Type(Integer32):
    """Custom type ripCurCfgOspfMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_RipCurCfgOspfMetric_Type.__name__ = "Integer32"
_RipCurCfgOspfMetric_Object = MibScalar
ripCurCfgOspfMetric = _RipCurCfgOspfMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 5, 1),
    _RipCurCfgOspfMetric_Type()
)
ripCurCfgOspfMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgOspfMetric.setStatus("current")


class _RipNewCfgOspfMetric_Type(Integer32):
    """Custom type ripNewCfgOspfMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_RipNewCfgOspfMetric_Type.__name__ = "Integer32"
_RipNewCfgOspfMetric_Object = MibScalar
ripNewCfgOspfMetric = _RipNewCfgOspfMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 5, 2),
    _RipNewCfgOspfMetric_Type()
)
ripNewCfgOspfMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgOspfMetric.setStatus("current")
_RipCurCfgOspfOutRmapList_Type = OctetString
_RipCurCfgOspfOutRmapList_Object = MibScalar
ripCurCfgOspfOutRmapList = _RipCurCfgOspfOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 5, 5),
    _RipCurCfgOspfOutRmapList_Type()
)
ripCurCfgOspfOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgOspfOutRmapList.setStatus("current")
_RipNewCfgOspfOutRmapList_Type = OctetString
_RipNewCfgOspfOutRmapList_Object = MibScalar
ripNewCfgOspfOutRmapList = _RipNewCfgOspfOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 5, 6),
    _RipNewCfgOspfOutRmapList_Type()
)
ripNewCfgOspfOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripNewCfgOspfOutRmapList.setStatus("current")
_RipNewCfgOspfAddOutRmap_Type = Integer32
_RipNewCfgOspfAddOutRmap_Object = MibScalar
ripNewCfgOspfAddOutRmap = _RipNewCfgOspfAddOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 5, 7),
    _RipNewCfgOspfAddOutRmap_Type()
)
ripNewCfgOspfAddOutRmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgOspfAddOutRmap.setStatus("current")
_RipNewCfgOspfRemoveOutRmap_Type = Integer32
_RipNewCfgOspfRemoveOutRmap_Object = MibScalar
ripNewCfgOspfRemoveOutRmap = _RipNewCfgOspfRemoveOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 5, 8),
    _RipNewCfgOspfRemoveOutRmap_Type()
)
ripNewCfgOspfRemoveOutRmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgOspfRemoveOutRmap.setStatus("current")
_RipRedistributeEospf_ObjectIdentity = ObjectIdentity
ripRedistributeEospf = _RipRedistributeEospf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 6)
)


class _RipCurCfgEospfMetric_Type(Integer32):
    """Custom type ripCurCfgEospfMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_RipCurCfgEospfMetric_Type.__name__ = "Integer32"
_RipCurCfgEospfMetric_Object = MibScalar
ripCurCfgEospfMetric = _RipCurCfgEospfMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 6, 1),
    _RipCurCfgEospfMetric_Type()
)
ripCurCfgEospfMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgEospfMetric.setStatus("current")


class _RipNewCfgEospfMetric_Type(Integer32):
    """Custom type ripNewCfgEospfMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_RipNewCfgEospfMetric_Type.__name__ = "Integer32"
_RipNewCfgEospfMetric_Object = MibScalar
ripNewCfgEospfMetric = _RipNewCfgEospfMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 6, 2),
    _RipNewCfgEospfMetric_Type()
)
ripNewCfgEospfMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgEospfMetric.setStatus("current")
_RipCurCfgEospfOutRmapList_Type = OctetString
_RipCurCfgEospfOutRmapList_Object = MibScalar
ripCurCfgEospfOutRmapList = _RipCurCfgEospfOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 6, 5),
    _RipCurCfgEospfOutRmapList_Type()
)
ripCurCfgEospfOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgEospfOutRmapList.setStatus("current")
_RipNewCfgEospfOutRmapList_Type = OctetString
_RipNewCfgEospfOutRmapList_Object = MibScalar
ripNewCfgEospfOutRmapList = _RipNewCfgEospfOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 6, 6),
    _RipNewCfgEospfOutRmapList_Type()
)
ripNewCfgEospfOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripNewCfgEospfOutRmapList.setStatus("current")
_RipNewCfgEospfAddOutRmap_Type = Integer32
_RipNewCfgEospfAddOutRmap_Object = MibScalar
ripNewCfgEospfAddOutRmap = _RipNewCfgEospfAddOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 6, 7),
    _RipNewCfgEospfAddOutRmap_Type()
)
ripNewCfgEospfAddOutRmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgEospfAddOutRmap.setStatus("current")
_RipNewCfgEospfRemoveOutRmap_Type = Integer32
_RipNewCfgEospfRemoveOutRmap_Object = MibScalar
ripNewCfgEospfRemoveOutRmap = _RipNewCfgEospfRemoveOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 18, 4, 6, 8),
    _RipNewCfgEospfRemoveOutRmap_Type()
)
ripNewCfgEospfRemoveOutRmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgEospfRemoveOutRmap.setStatus("current")
_IgmpCfg_ObjectIdentity = ObjectIdentity
igmpCfg = _IgmpCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19)
)


class _IgmpCurCfgOnOff_Type(Integer32):
    """Custom type igmpCurCfgOnOff based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_IgmpCurCfgOnOff_Type.__name__ = "Integer32"
_IgmpCurCfgOnOff_Object = MibScalar
igmpCurCfgOnOff = _IgmpCurCfgOnOff_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 1),
    _IgmpCurCfgOnOff_Type()
)
igmpCurCfgOnOff.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpCurCfgOnOff.setStatus("current")


class _IgmpNewCfgOnOff_Type(Integer32):
    """Custom type igmpNewCfgOnOff based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_IgmpNewCfgOnOff_Type.__name__ = "Integer32"
_IgmpNewCfgOnOff_Object = MibScalar
igmpNewCfgOnOff = _IgmpNewCfgOnOff_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 2),
    _IgmpNewCfgOnOff_Type()
)
igmpNewCfgOnOff.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpNewCfgOnOff.setStatus("current")
_IgmpSnoopCfg_ObjectIdentity = ObjectIdentity
igmpSnoopCfg = _IgmpSnoopCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 9)
)
_IgmpSnoopCurCfgMrto_Type = Integer32
_IgmpSnoopCurCfgMrto_Object = MibScalar
igmpSnoopCurCfgMrto = _IgmpSnoopCurCfgMrto_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 9, 7),
    _IgmpSnoopCurCfgMrto_Type()
)
igmpSnoopCurCfgMrto.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpSnoopCurCfgMrto.setStatus("current")
_IgmpSnoopNewCfgMrto_Type = Integer32
_IgmpSnoopNewCfgMrto_Object = MibScalar
igmpSnoopNewCfgMrto = _IgmpSnoopNewCfgMrto_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 9, 8),
    _IgmpSnoopNewCfgMrto_Type()
)
igmpSnoopNewCfgMrto.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpSnoopNewCfgMrto.setStatus("current")


class _IgmpSnoopCurCfgAggrEnaDis_Type(Integer32):
    """Custom type igmpSnoopCurCfgAggrEnaDis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_IgmpSnoopCurCfgAggrEnaDis_Type.__name__ = "Integer32"
_IgmpSnoopCurCfgAggrEnaDis_Object = MibScalar
igmpSnoopCurCfgAggrEnaDis = _IgmpSnoopCurCfgAggrEnaDis_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 9, 9),
    _IgmpSnoopCurCfgAggrEnaDis_Type()
)
igmpSnoopCurCfgAggrEnaDis.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpSnoopCurCfgAggrEnaDis.setStatus("current")


class _IgmpSnoopNewCfgAggrEnaDis_Type(Integer32):
    """Custom type igmpSnoopNewCfgAggrEnaDis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_IgmpSnoopNewCfgAggrEnaDis_Type.__name__ = "Integer32"
_IgmpSnoopNewCfgAggrEnaDis_Object = MibScalar
igmpSnoopNewCfgAggrEnaDis = _IgmpSnoopNewCfgAggrEnaDis_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 9, 10),
    _IgmpSnoopNewCfgAggrEnaDis_Type()
)
igmpSnoopNewCfgAggrEnaDis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpSnoopNewCfgAggrEnaDis.setStatus("current")


class _IgmpSnoopCurCfgEnaDis_Type(Integer32):
    """Custom type igmpSnoopCurCfgEnaDis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IgmpSnoopCurCfgEnaDis_Type.__name__ = "Integer32"
_IgmpSnoopCurCfgEnaDis_Object = MibScalar
igmpSnoopCurCfgEnaDis = _IgmpSnoopCurCfgEnaDis_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 9, 11),
    _IgmpSnoopCurCfgEnaDis_Type()
)
igmpSnoopCurCfgEnaDis.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpSnoopCurCfgEnaDis.setStatus("current")


class _IgmpSnoopNewCfgEnaDis_Type(Integer32):
    """Custom type igmpSnoopNewCfgEnaDis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_IgmpSnoopNewCfgEnaDis_Type.__name__ = "Integer32"
_IgmpSnoopNewCfgEnaDis_Object = MibScalar
igmpSnoopNewCfgEnaDis = _IgmpSnoopNewCfgEnaDis_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 9, 12),
    _IgmpSnoopNewCfgEnaDis_Type()
)
igmpSnoopNewCfgEnaDis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpSnoopNewCfgEnaDis.setStatus("current")
_IgmpSnoopNewCfgVlanAdd_Type = Integer32
_IgmpSnoopNewCfgVlanAdd_Object = MibScalar
igmpSnoopNewCfgVlanAdd = _IgmpSnoopNewCfgVlanAdd_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 9, 13),
    _IgmpSnoopNewCfgVlanAdd_Type()
)
igmpSnoopNewCfgVlanAdd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpSnoopNewCfgVlanAdd.setStatus("current")
_IgmpSnoopNewCfgVlanRem_Type = Integer32
_IgmpSnoopNewCfgVlanRem_Object = MibScalar
igmpSnoopNewCfgVlanRem = _IgmpSnoopNewCfgVlanRem_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 9, 14),
    _IgmpSnoopNewCfgVlanRem_Type()
)
igmpSnoopNewCfgVlanRem.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpSnoopNewCfgVlanRem.setStatus("current")


class _IgmpSnoopNewCfgVlanClear_Type(Integer32):
    """Custom type igmpSnoopNewCfgVlanClear based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("ok", 2))
    )


_IgmpSnoopNewCfgVlanClear_Type.__name__ = "Integer32"
_IgmpSnoopNewCfgVlanClear_Object = MibScalar
igmpSnoopNewCfgVlanClear = _IgmpSnoopNewCfgVlanClear_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 9, 15),
    _IgmpSnoopNewCfgVlanClear_Type()
)
igmpSnoopNewCfgVlanClear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpSnoopNewCfgVlanClear.setStatus("current")
_IgmpSnoopCurCfgVlanBmap_Type = OctetString
_IgmpSnoopCurCfgVlanBmap_Object = MibScalar
igmpSnoopCurCfgVlanBmap = _IgmpSnoopCurCfgVlanBmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 9, 16),
    _IgmpSnoopCurCfgVlanBmap_Type()
)
igmpSnoopCurCfgVlanBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpSnoopCurCfgVlanBmap.setStatus("current")
_IgmpSnoopNewCfgVlanBmap_Type = OctetString
_IgmpSnoopNewCfgVlanBmap_Object = MibScalar
igmpSnoopNewCfgVlanBmap = _IgmpSnoopNewCfgVlanBmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 9, 17),
    _IgmpSnoopNewCfgVlanBmap_Type()
)
igmpSnoopNewCfgVlanBmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpSnoopNewCfgVlanBmap.setStatus("current")
_IgmpSnoopCurCfgSrcIp_Type = IpAddress
_IgmpSnoopCurCfgSrcIp_Object = MibScalar
igmpSnoopCurCfgSrcIp = _IgmpSnoopCurCfgSrcIp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 9, 26),
    _IgmpSnoopCurCfgSrcIp_Type()
)
igmpSnoopCurCfgSrcIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpSnoopCurCfgSrcIp.setStatus("current")
_IgmpSnoopNewCfgSrcIp_Type = IpAddress
_IgmpSnoopNewCfgSrcIp_Object = MibScalar
igmpSnoopNewCfgSrcIp = _IgmpSnoopNewCfgSrcIp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 9, 27),
    _IgmpSnoopNewCfgSrcIp_Type()
)
igmpSnoopNewCfgSrcIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpSnoopNewCfgSrcIp.setStatus("current")


class _IgmpSnoopSetToDefault_Type(Integer32):
    """Custom type igmpSnoopSetToDefault based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("setDefault", 2))
    )


_IgmpSnoopSetToDefault_Type.__name__ = "Integer32"
_IgmpSnoopSetToDefault_Object = MibScalar
igmpSnoopSetToDefault = _IgmpSnoopSetToDefault_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 9, 33),
    _IgmpSnoopSetToDefault_Type()
)
igmpSnoopSetToDefault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpSnoopSetToDefault.setStatus("current")
_IgmpStaticMrtrCfg_ObjectIdentity = ObjectIdentity
igmpStaticMrtrCfg = _IgmpStaticMrtrCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 10)
)
_IgmpStaticMrtrCurCfgTable_Object = MibTable
igmpStaticMrtrCurCfgTable = _IgmpStaticMrtrCurCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 10, 1)
)
if mibBuilder.loadTexts:
    igmpStaticMrtrCurCfgTable.setStatus("current")
_IgmpStaticMrtrCurCfgTableEntry_Object = MibTableRow
igmpStaticMrtrCurCfgTableEntry = _IgmpStaticMrtrCurCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 10, 1, 1)
)
igmpStaticMrtrCurCfgTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "igmpStaticMrtrCurCfgIndx"),
)
if mibBuilder.loadTexts:
    igmpStaticMrtrCurCfgTableEntry.setStatus("current")
_IgmpStaticMrtrCurCfgIndx_Type = Integer32
_IgmpStaticMrtrCurCfgIndx_Object = MibTableColumn
igmpStaticMrtrCurCfgIndx = _IgmpStaticMrtrCurCfgIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 10, 1, 1, 1),
    _IgmpStaticMrtrCurCfgIndx_Type()
)
igmpStaticMrtrCurCfgIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpStaticMrtrCurCfgIndx.setStatus("current")
_IgmpStaticMrtrCurCfgPortId_Type = PortNumber
_IgmpStaticMrtrCurCfgPortId_Object = MibTableColumn
igmpStaticMrtrCurCfgPortId = _IgmpStaticMrtrCurCfgPortId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 10, 1, 1, 2),
    _IgmpStaticMrtrCurCfgPortId_Type()
)
igmpStaticMrtrCurCfgPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpStaticMrtrCurCfgPortId.setStatus("current")
_IgmpStaticMrtrCurCfgVlanId_Type = Integer32
_IgmpStaticMrtrCurCfgVlanId_Object = MibTableColumn
igmpStaticMrtrCurCfgVlanId = _IgmpStaticMrtrCurCfgVlanId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 10, 1, 1, 3),
    _IgmpStaticMrtrCurCfgVlanId_Type()
)
igmpStaticMrtrCurCfgVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpStaticMrtrCurCfgVlanId.setStatus("current")


class _IgmpStaticMrtrCurCfgVersion_Type(Integer32):
    """Custom type igmpStaticMrtrCurCfgVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("version1", 1),
          ("version2", 2),
          ("version3", 3))
    )


_IgmpStaticMrtrCurCfgVersion_Type.__name__ = "Integer32"
_IgmpStaticMrtrCurCfgVersion_Object = MibTableColumn
igmpStaticMrtrCurCfgVersion = _IgmpStaticMrtrCurCfgVersion_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 10, 1, 1, 4),
    _IgmpStaticMrtrCurCfgVersion_Type()
)
igmpStaticMrtrCurCfgVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpStaticMrtrCurCfgVersion.setStatus("current")
_IgmpStaticMrtrNewCfgTable_Object = MibTable
igmpStaticMrtrNewCfgTable = _IgmpStaticMrtrNewCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 10, 2)
)
if mibBuilder.loadTexts:
    igmpStaticMrtrNewCfgTable.setStatus("current")
_IgmpStaticMrtrNewCfgTableEntry_Object = MibTableRow
igmpStaticMrtrNewCfgTableEntry = _IgmpStaticMrtrNewCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 10, 2, 1)
)
igmpStaticMrtrNewCfgTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "igmpStaticMrtrNewCfgIndx"),
)
if mibBuilder.loadTexts:
    igmpStaticMrtrNewCfgTableEntry.setStatus("current")
_IgmpStaticMrtrNewCfgIndx_Type = Integer32
_IgmpStaticMrtrNewCfgIndx_Object = MibTableColumn
igmpStaticMrtrNewCfgIndx = _IgmpStaticMrtrNewCfgIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 10, 2, 1, 1),
    _IgmpStaticMrtrNewCfgIndx_Type()
)
igmpStaticMrtrNewCfgIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpStaticMrtrNewCfgIndx.setStatus("current")
_IgmpStaticMrtrNewCfgPortId_Type = PortNumber
_IgmpStaticMrtrNewCfgPortId_Object = MibTableColumn
igmpStaticMrtrNewCfgPortId = _IgmpStaticMrtrNewCfgPortId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 10, 2, 1, 2),
    _IgmpStaticMrtrNewCfgPortId_Type()
)
igmpStaticMrtrNewCfgPortId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpStaticMrtrNewCfgPortId.setStatus("current")
_IgmpStaticMrtrNewCfgVlanId_Type = Integer32
_IgmpStaticMrtrNewCfgVlanId_Object = MibTableColumn
igmpStaticMrtrNewCfgVlanId = _IgmpStaticMrtrNewCfgVlanId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 10, 2, 1, 3),
    _IgmpStaticMrtrNewCfgVlanId_Type()
)
igmpStaticMrtrNewCfgVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpStaticMrtrNewCfgVlanId.setStatus("current")


class _IgmpStaticMrtrNewCfgVersion_Type(Integer32):
    """Custom type igmpStaticMrtrNewCfgVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("version1", 1),
          ("version2", 2),
          ("version3", 3))
    )


_IgmpStaticMrtrNewCfgVersion_Type.__name__ = "Integer32"
_IgmpStaticMrtrNewCfgVersion_Object = MibTableColumn
igmpStaticMrtrNewCfgVersion = _IgmpStaticMrtrNewCfgVersion_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 10, 2, 1, 4),
    _IgmpStaticMrtrNewCfgVersion_Type()
)
igmpStaticMrtrNewCfgVersion.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpStaticMrtrNewCfgVersion.setStatus("current")


class _IgmpStaticMrtrNewCfgDelete_Type(Integer32):
    """Custom type igmpStaticMrtrNewCfgDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_IgmpStaticMrtrNewCfgDelete_Type.__name__ = "Integer32"
_IgmpStaticMrtrNewCfgDelete_Object = MibTableColumn
igmpStaticMrtrNewCfgDelete = _IgmpStaticMrtrNewCfgDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 10, 2, 1, 5),
    _IgmpStaticMrtrNewCfgDelete_Type()
)
igmpStaticMrtrNewCfgDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpStaticMrtrNewCfgDelete.setStatus("current")


class _IgmpStaticMrtrNewCfgClear_Type(Integer32):
    """Custom type igmpStaticMrtrNewCfgClear based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("clear", 2))
    )


_IgmpStaticMrtrNewCfgClear_Type.__name__ = "Integer32"
_IgmpStaticMrtrNewCfgClear_Object = MibScalar
igmpStaticMrtrNewCfgClear = _IgmpStaticMrtrNewCfgClear_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 10, 3),
    _IgmpStaticMrtrNewCfgClear_Type()
)
igmpStaticMrtrNewCfgClear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpStaticMrtrNewCfgClear.setStatus("current")
_IgmpFilterCfg_ObjectIdentity = ObjectIdentity
igmpFilterCfg = _IgmpFilterCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 11)
)
_IgmpFltCurCfgTable_Object = MibTable
igmpFltCurCfgTable = _IgmpFltCurCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 11, 1)
)
if mibBuilder.loadTexts:
    igmpFltCurCfgTable.setStatus("current")
_IgmpFltCurCfgTableEntry_Object = MibTableRow
igmpFltCurCfgTableEntry = _IgmpFltCurCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 11, 1, 1)
)
igmpFltCurCfgTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "igmpFltCurCfgIndx"),
)
if mibBuilder.loadTexts:
    igmpFltCurCfgTableEntry.setStatus("current")
_IgmpFltCurCfgIndx_Type = Integer32
_IgmpFltCurCfgIndx_Object = MibTableColumn
igmpFltCurCfgIndx = _IgmpFltCurCfgIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 11, 1, 1, 1),
    _IgmpFltCurCfgIndx_Type()
)
igmpFltCurCfgIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpFltCurCfgIndx.setStatus("current")
_IgmpFltCurCfgMcastIp1_Type = IpAddress
_IgmpFltCurCfgMcastIp1_Object = MibTableColumn
igmpFltCurCfgMcastIp1 = _IgmpFltCurCfgMcastIp1_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 11, 1, 1, 2),
    _IgmpFltCurCfgMcastIp1_Type()
)
igmpFltCurCfgMcastIp1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpFltCurCfgMcastIp1.setStatus("current")
_IgmpFltCurCfgMcastIp2_Type = IpAddress
_IgmpFltCurCfgMcastIp2_Object = MibTableColumn
igmpFltCurCfgMcastIp2 = _IgmpFltCurCfgMcastIp2_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 11, 1, 1, 3),
    _IgmpFltCurCfgMcastIp2_Type()
)
igmpFltCurCfgMcastIp2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpFltCurCfgMcastIp2.setStatus("current")


class _IgmpFltCurCfgAction_Type(Integer32):
    """Custom type igmpFltCurCfgAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("allow", 1),
          ("deny", 2))
    )


_IgmpFltCurCfgAction_Type.__name__ = "Integer32"
_IgmpFltCurCfgAction_Object = MibTableColumn
igmpFltCurCfgAction = _IgmpFltCurCfgAction_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 11, 1, 1, 4),
    _IgmpFltCurCfgAction_Type()
)
igmpFltCurCfgAction.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpFltCurCfgAction.setStatus("current")


class _IgmpFltCurCfgState_Type(Integer32):
    """Custom type igmpFltCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IgmpFltCurCfgState_Type.__name__ = "Integer32"
_IgmpFltCurCfgState_Object = MibTableColumn
igmpFltCurCfgState = _IgmpFltCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 11, 1, 1, 5),
    _IgmpFltCurCfgState_Type()
)
igmpFltCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpFltCurCfgState.setStatus("current")
_IgmpFltNewCfgTable_Object = MibTable
igmpFltNewCfgTable = _IgmpFltNewCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 11, 2)
)
if mibBuilder.loadTexts:
    igmpFltNewCfgTable.setStatus("current")
_IgmpFltNewCfgTableEntry_Object = MibTableRow
igmpFltNewCfgTableEntry = _IgmpFltNewCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 11, 2, 1)
)
igmpFltNewCfgTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "igmpFltNewCfgIndx"),
)
if mibBuilder.loadTexts:
    igmpFltNewCfgTableEntry.setStatus("current")
_IgmpFltNewCfgIndx_Type = Integer32
_IgmpFltNewCfgIndx_Object = MibTableColumn
igmpFltNewCfgIndx = _IgmpFltNewCfgIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 11, 2, 1, 1),
    _IgmpFltNewCfgIndx_Type()
)
igmpFltNewCfgIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpFltNewCfgIndx.setStatus("current")
_IgmpFltNewCfgMcastIp1_Type = IpAddress
_IgmpFltNewCfgMcastIp1_Object = MibTableColumn
igmpFltNewCfgMcastIp1 = _IgmpFltNewCfgMcastIp1_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 11, 2, 1, 2),
    _IgmpFltNewCfgMcastIp1_Type()
)
igmpFltNewCfgMcastIp1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpFltNewCfgMcastIp1.setStatus("current")
_IgmpFltNewCfgMcastIp2_Type = IpAddress
_IgmpFltNewCfgMcastIp2_Object = MibTableColumn
igmpFltNewCfgMcastIp2 = _IgmpFltNewCfgMcastIp2_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 11, 2, 1, 3),
    _IgmpFltNewCfgMcastIp2_Type()
)
igmpFltNewCfgMcastIp2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpFltNewCfgMcastIp2.setStatus("current")


class _IgmpFltNewCfgAction_Type(Integer32):
    """Custom type igmpFltNewCfgAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("allow", 1),
          ("deny", 2))
    )


_IgmpFltNewCfgAction_Type.__name__ = "Integer32"
_IgmpFltNewCfgAction_Object = MibTableColumn
igmpFltNewCfgAction = _IgmpFltNewCfgAction_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 11, 2, 1, 4),
    _IgmpFltNewCfgAction_Type()
)
igmpFltNewCfgAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpFltNewCfgAction.setStatus("current")


class _IgmpFltNewCfgState_Type(Integer32):
    """Custom type igmpFltNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IgmpFltNewCfgState_Type.__name__ = "Integer32"
_IgmpFltNewCfgState_Object = MibTableColumn
igmpFltNewCfgState = _IgmpFltNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 11, 2, 1, 5),
    _IgmpFltNewCfgState_Type()
)
igmpFltNewCfgState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpFltNewCfgState.setStatus("current")


class _IgmpFltNewCfgDelete_Type(Integer32):
    """Custom type igmpFltNewCfgDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_IgmpFltNewCfgDelete_Type.__name__ = "Integer32"
_IgmpFltNewCfgDelete_Object = MibTableColumn
igmpFltNewCfgDelete = _IgmpFltNewCfgDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 11, 2, 1, 6),
    _IgmpFltNewCfgDelete_Type()
)
igmpFltNewCfgDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpFltNewCfgDelete.setStatus("current")
_IgmpFltCurCfgPortTable_Object = MibTable
igmpFltCurCfgPortTable = _IgmpFltCurCfgPortTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 11, 3)
)
if mibBuilder.loadTexts:
    igmpFltCurCfgPortTable.setStatus("current")
_IgmpFltCurCfgPortTableEntry_Object = MibTableRow
igmpFltCurCfgPortTableEntry = _IgmpFltCurCfgPortTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 11, 3, 1)
)
igmpFltCurCfgPortTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "igmpFltCurCfgPortIndx"),
)
if mibBuilder.loadTexts:
    igmpFltCurCfgPortTableEntry.setStatus("current")
_IgmpFltCurCfgPortIndx_Type = PortNumber
_IgmpFltCurCfgPortIndx_Object = MibTableColumn
igmpFltCurCfgPortIndx = _IgmpFltCurCfgPortIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 11, 3, 1, 1),
    _IgmpFltCurCfgPortIndx_Type()
)
igmpFltCurCfgPortIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpFltCurCfgPortIndx.setStatus("current")


class _IgmpFltCurCfgPortState_Type(Integer32):
    """Custom type igmpFltCurCfgPortState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IgmpFltCurCfgPortState_Type.__name__ = "Integer32"
_IgmpFltCurCfgPortState_Object = MibTableColumn
igmpFltCurCfgPortState = _IgmpFltCurCfgPortState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 11, 3, 1, 2),
    _IgmpFltCurCfgPortState_Type()
)
igmpFltCurCfgPortState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpFltCurCfgPortState.setStatus("current")


class _IgmpFltCurCfgPortFiltBmap_Type(OctetString):
    """Custom type igmpFltCurCfgPortFiltBmap based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 256),
    )


_IgmpFltCurCfgPortFiltBmap_Type.__name__ = "OctetString"
_IgmpFltCurCfgPortFiltBmap_Object = MibTableColumn
igmpFltCurCfgPortFiltBmap = _IgmpFltCurCfgPortFiltBmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 11, 3, 1, 3),
    _IgmpFltCurCfgPortFiltBmap_Type()
)
igmpFltCurCfgPortFiltBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpFltCurCfgPortFiltBmap.setStatus("current")
_IgmpFltNewCfgPortTable_Object = MibTable
igmpFltNewCfgPortTable = _IgmpFltNewCfgPortTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 11, 4)
)
if mibBuilder.loadTexts:
    igmpFltNewCfgPortTable.setStatus("current")
_IgmpFltNewCfgPortTableEntry_Object = MibTableRow
igmpFltNewCfgPortTableEntry = _IgmpFltNewCfgPortTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 11, 4, 1)
)
igmpFltNewCfgPortTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "igmpFltNewCfgPortIndx"),
)
if mibBuilder.loadTexts:
    igmpFltNewCfgPortTableEntry.setStatus("current")
_IgmpFltNewCfgPortIndx_Type = PortNumber
_IgmpFltNewCfgPortIndx_Object = MibTableColumn
igmpFltNewCfgPortIndx = _IgmpFltNewCfgPortIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 11, 4, 1, 1),
    _IgmpFltNewCfgPortIndx_Type()
)
igmpFltNewCfgPortIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpFltNewCfgPortIndx.setStatus("current")


class _IgmpFltNewCfgPortState_Type(Integer32):
    """Custom type igmpFltNewCfgPortState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IgmpFltNewCfgPortState_Type.__name__ = "Integer32"
_IgmpFltNewCfgPortState_Object = MibTableColumn
igmpFltNewCfgPortState = _IgmpFltNewCfgPortState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 11, 4, 1, 2),
    _IgmpFltNewCfgPortState_Type()
)
igmpFltNewCfgPortState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpFltNewCfgPortState.setStatus("current")


class _IgmpFltNewCfgPortFiltBmap_Type(OctetString):
    """Custom type igmpFltNewCfgPortFiltBmap based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 256),
    )


_IgmpFltNewCfgPortFiltBmap_Type.__name__ = "OctetString"
_IgmpFltNewCfgPortFiltBmap_Object = MibTableColumn
igmpFltNewCfgPortFiltBmap = _IgmpFltNewCfgPortFiltBmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 11, 4, 1, 3),
    _IgmpFltNewCfgPortFiltBmap_Type()
)
igmpFltNewCfgPortFiltBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpFltNewCfgPortFiltBmap.setStatus("current")
_IgmpFltNewCfgPortAddFiltRule_Type = Integer32
_IgmpFltNewCfgPortAddFiltRule_Object = MibTableColumn
igmpFltNewCfgPortAddFiltRule = _IgmpFltNewCfgPortAddFiltRule_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 11, 4, 1, 4),
    _IgmpFltNewCfgPortAddFiltRule_Type()
)
igmpFltNewCfgPortAddFiltRule.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpFltNewCfgPortAddFiltRule.setStatus("current")
_IgmpFltNewCfgPortRemFiltRule_Type = Integer32
_IgmpFltNewCfgPortRemFiltRule_Object = MibTableColumn
igmpFltNewCfgPortRemFiltRule = _IgmpFltNewCfgPortRemFiltRule_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 11, 4, 1, 5),
    _IgmpFltNewCfgPortRemFiltRule_Type()
)
igmpFltNewCfgPortRemFiltRule.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpFltNewCfgPortRemFiltRule.setStatus("current")


class _IgmpFltCurCfgEnaDis_Type(Integer32):
    """Custom type igmpFltCurCfgEnaDis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_IgmpFltCurCfgEnaDis_Type.__name__ = "Integer32"
_IgmpFltCurCfgEnaDis_Object = MibScalar
igmpFltCurCfgEnaDis = _IgmpFltCurCfgEnaDis_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 11, 5),
    _IgmpFltCurCfgEnaDis_Type()
)
igmpFltCurCfgEnaDis.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpFltCurCfgEnaDis.setStatus("current")


class _IgmpFltNewCfgEnaDis_Type(Integer32):
    """Custom type igmpFltNewCfgEnaDis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_IgmpFltNewCfgEnaDis_Type.__name__ = "Integer32"
_IgmpFltNewCfgEnaDis_Object = MibScalar
igmpFltNewCfgEnaDis = _IgmpFltNewCfgEnaDis_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 11, 6),
    _IgmpFltNewCfgEnaDis_Type()
)
igmpFltNewCfgEnaDis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpFltNewCfgEnaDis.setStatus("current")
_IgmpRelayCfg_ObjectIdentity = ObjectIdentity
igmpRelayCfg = _IgmpRelayCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 12)
)


class _IgmpRelayCurCfgEnaDis_Type(Integer32):
    """Custom type igmpRelayCurCfgEnaDis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IgmpRelayCurCfgEnaDis_Type.__name__ = "Integer32"
_IgmpRelayCurCfgEnaDis_Object = MibScalar
igmpRelayCurCfgEnaDis = _IgmpRelayCurCfgEnaDis_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 12, 1),
    _IgmpRelayCurCfgEnaDis_Type()
)
igmpRelayCurCfgEnaDis.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpRelayCurCfgEnaDis.setStatus("current")


class _IgmpRelayNewCfgEnaDis_Type(Integer32):
    """Custom type igmpRelayNewCfgEnaDis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_IgmpRelayNewCfgEnaDis_Type.__name__ = "Integer32"
_IgmpRelayNewCfgEnaDis_Object = MibScalar
igmpRelayNewCfgEnaDis = _IgmpRelayNewCfgEnaDis_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 12, 2),
    _IgmpRelayNewCfgEnaDis_Type()
)
igmpRelayNewCfgEnaDis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpRelayNewCfgEnaDis.setStatus("current")
_IgmpRelayNewCfgAddVlan_Type = Integer32
_IgmpRelayNewCfgAddVlan_Object = MibScalar
igmpRelayNewCfgAddVlan = _IgmpRelayNewCfgAddVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 12, 3),
    _IgmpRelayNewCfgAddVlan_Type()
)
igmpRelayNewCfgAddVlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpRelayNewCfgAddVlan.setStatus("current")
_IgmpRelayNewCfgRemVlan_Type = Integer32
_IgmpRelayNewCfgRemVlan_Object = MibScalar
igmpRelayNewCfgRemVlan = _IgmpRelayNewCfgRemVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 12, 4),
    _IgmpRelayNewCfgRemVlan_Type()
)
igmpRelayNewCfgRemVlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpRelayNewCfgRemVlan.setStatus("current")


class _IgmpRelayNewCfgClearVlan_Type(Integer32):
    """Custom type igmpRelayNewCfgClearVlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("ok", 2))
    )


_IgmpRelayNewCfgClearVlan_Type.__name__ = "Integer32"
_IgmpRelayNewCfgClearVlan_Object = MibScalar
igmpRelayNewCfgClearVlan = _IgmpRelayNewCfgClearVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 12, 5),
    _IgmpRelayNewCfgClearVlan_Type()
)
igmpRelayNewCfgClearVlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpRelayNewCfgClearVlan.setStatus("current")
_IgmpRelayCurCfgVlanBmap_Type = OctetString
_IgmpRelayCurCfgVlanBmap_Object = MibScalar
igmpRelayCurCfgVlanBmap = _IgmpRelayCurCfgVlanBmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 12, 6),
    _IgmpRelayCurCfgVlanBmap_Type()
)
igmpRelayCurCfgVlanBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpRelayCurCfgVlanBmap.setStatus("current")
_IgmpRelayNewCfgVlanBmap_Type = OctetString
_IgmpRelayNewCfgVlanBmap_Object = MibScalar
igmpRelayNewCfgVlanBmap = _IgmpRelayNewCfgVlanBmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 12, 7),
    _IgmpRelayNewCfgVlanBmap_Type()
)
igmpRelayNewCfgVlanBmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpRelayNewCfgVlanBmap.setStatus("current")


class _IgmpRelayCurCfgReport_Type(Integer32):
    """Custom type igmpRelayCurCfgReport based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 150),
    )


_IgmpRelayCurCfgReport_Type.__name__ = "Integer32"
_IgmpRelayCurCfgReport_Object = MibScalar
igmpRelayCurCfgReport = _IgmpRelayCurCfgReport_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 12, 8),
    _IgmpRelayCurCfgReport_Type()
)
igmpRelayCurCfgReport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpRelayCurCfgReport.setStatus("current")


class _IgmpRelayNewCfgReport_Type(Integer32):
    """Custom type igmpRelayNewCfgReport based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 150),
    )


_IgmpRelayNewCfgReport_Type.__name__ = "Integer32"
_IgmpRelayNewCfgReport_Object = MibScalar
igmpRelayNewCfgReport = _IgmpRelayNewCfgReport_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 12, 9),
    _IgmpRelayNewCfgReport_Type()
)
igmpRelayNewCfgReport.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpRelayNewCfgReport.setStatus("current")
_IgmpRelayMrtrCurCfgTable_Object = MibTable
igmpRelayMrtrCurCfgTable = _IgmpRelayMrtrCurCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 12, 10)
)
if mibBuilder.loadTexts:
    igmpRelayMrtrCurCfgTable.setStatus("current")
_IgmpRelayMrtrCurCfgTableEntry_Object = MibTableRow
igmpRelayMrtrCurCfgTableEntry = _IgmpRelayMrtrCurCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 12, 10, 1)
)
igmpRelayMrtrCurCfgTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "igmpRelayMrtrCurCfgIndx"),
)
if mibBuilder.loadTexts:
    igmpRelayMrtrCurCfgTableEntry.setStatus("current")


class _IgmpRelayMrtrCurCfgIndx_Type(Integer32):
    """Custom type igmpRelayMrtrCurCfgIndx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_IgmpRelayMrtrCurCfgIndx_Type.__name__ = "Integer32"
_IgmpRelayMrtrCurCfgIndx_Object = MibTableColumn
igmpRelayMrtrCurCfgIndx = _IgmpRelayMrtrCurCfgIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 12, 10, 1, 1),
    _IgmpRelayMrtrCurCfgIndx_Type()
)
igmpRelayMrtrCurCfgIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpRelayMrtrCurCfgIndx.setStatus("current")
_IgmpRelayMrtrCurCfgAddr_Type = IpAddress
_IgmpRelayMrtrCurCfgAddr_Object = MibTableColumn
igmpRelayMrtrCurCfgAddr = _IgmpRelayMrtrCurCfgAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 12, 10, 1, 2),
    _IgmpRelayMrtrCurCfgAddr_Type()
)
igmpRelayMrtrCurCfgAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpRelayMrtrCurCfgAddr.setStatus("current")


class _IgmpRelayMrtrCurCfgEnaDis_Type(Integer32):
    """Custom type igmpRelayMrtrCurCfgEnaDis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IgmpRelayMrtrCurCfgEnaDis_Type.__name__ = "Integer32"
_IgmpRelayMrtrCurCfgEnaDis_Object = MibTableColumn
igmpRelayMrtrCurCfgEnaDis = _IgmpRelayMrtrCurCfgEnaDis_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 12, 10, 1, 3),
    _IgmpRelayMrtrCurCfgEnaDis_Type()
)
igmpRelayMrtrCurCfgEnaDis.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpRelayMrtrCurCfgEnaDis.setStatus("current")


class _IgmpRelayMrtrCurCfgInterval_Type(Integer32):
    """Custom type igmpRelayMrtrCurCfgInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 60),
    )


_IgmpRelayMrtrCurCfgInterval_Type.__name__ = "Integer32"
_IgmpRelayMrtrCurCfgInterval_Object = MibTableColumn
igmpRelayMrtrCurCfgInterval = _IgmpRelayMrtrCurCfgInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 12, 10, 1, 4),
    _IgmpRelayMrtrCurCfgInterval_Type()
)
igmpRelayMrtrCurCfgInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpRelayMrtrCurCfgInterval.setStatus("current")


class _IgmpRelayMrtrCurCfgRetry_Type(Integer32):
    """Custom type igmpRelayMrtrCurCfgRetry based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 120),
    )


_IgmpRelayMrtrCurCfgRetry_Type.__name__ = "Integer32"
_IgmpRelayMrtrCurCfgRetry_Object = MibTableColumn
igmpRelayMrtrCurCfgRetry = _IgmpRelayMrtrCurCfgRetry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 12, 10, 1, 5),
    _IgmpRelayMrtrCurCfgRetry_Type()
)
igmpRelayMrtrCurCfgRetry.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpRelayMrtrCurCfgRetry.setStatus("current")


class _IgmpRelayMrtrCurCfgRestr_Type(Integer32):
    """Custom type igmpRelayMrtrCurCfgRestr based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_IgmpRelayMrtrCurCfgRestr_Type.__name__ = "Integer32"
_IgmpRelayMrtrCurCfgRestr_Object = MibTableColumn
igmpRelayMrtrCurCfgRestr = _IgmpRelayMrtrCurCfgRestr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 12, 10, 1, 6),
    _IgmpRelayMrtrCurCfgRestr_Type()
)
igmpRelayMrtrCurCfgRestr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpRelayMrtrCurCfgRestr.setStatus("current")


class _IgmpRelayMrtrCurCfgVersion_Type(Integer32):
    """Custom type igmpRelayMrtrCurCfgVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("igmpv1", 1),
          ("igmpv2", 2))
    )


_IgmpRelayMrtrCurCfgVersion_Type.__name__ = "Integer32"
_IgmpRelayMrtrCurCfgVersion_Object = MibTableColumn
igmpRelayMrtrCurCfgVersion = _IgmpRelayMrtrCurCfgVersion_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 12, 10, 1, 7),
    _IgmpRelayMrtrCurCfgVersion_Type()
)
igmpRelayMrtrCurCfgVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpRelayMrtrCurCfgVersion.setStatus("current")
_IgmpRelayMrtrNewCfgTable_Object = MibTable
igmpRelayMrtrNewCfgTable = _IgmpRelayMrtrNewCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 12, 11)
)
if mibBuilder.loadTexts:
    igmpRelayMrtrNewCfgTable.setStatus("current")
_IgmpRelayMrtrNewCfgTableEntry_Object = MibTableRow
igmpRelayMrtrNewCfgTableEntry = _IgmpRelayMrtrNewCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 12, 11, 1)
)
igmpRelayMrtrNewCfgTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "igmpRelayMrtrNewCfgIndx"),
)
if mibBuilder.loadTexts:
    igmpRelayMrtrNewCfgTableEntry.setStatus("current")


class _IgmpRelayMrtrNewCfgIndx_Type(Integer32):
    """Custom type igmpRelayMrtrNewCfgIndx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_IgmpRelayMrtrNewCfgIndx_Type.__name__ = "Integer32"
_IgmpRelayMrtrNewCfgIndx_Object = MibTableColumn
igmpRelayMrtrNewCfgIndx = _IgmpRelayMrtrNewCfgIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 12, 11, 1, 1),
    _IgmpRelayMrtrNewCfgIndx_Type()
)
igmpRelayMrtrNewCfgIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpRelayMrtrNewCfgIndx.setStatus("current")
_IgmpRelayMrtrNewCfgAddr_Type = IpAddress
_IgmpRelayMrtrNewCfgAddr_Object = MibTableColumn
igmpRelayMrtrNewCfgAddr = _IgmpRelayMrtrNewCfgAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 12, 11, 1, 2),
    _IgmpRelayMrtrNewCfgAddr_Type()
)
igmpRelayMrtrNewCfgAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpRelayMrtrNewCfgAddr.setStatus("current")


class _IgmpRelayMrtrNewCfgEnaDis_Type(Integer32):
    """Custom type igmpRelayMrtrNewCfgEnaDis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_IgmpRelayMrtrNewCfgEnaDis_Type.__name__ = "Integer32"
_IgmpRelayMrtrNewCfgEnaDis_Object = MibTableColumn
igmpRelayMrtrNewCfgEnaDis = _IgmpRelayMrtrNewCfgEnaDis_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 12, 11, 1, 3),
    _IgmpRelayMrtrNewCfgEnaDis_Type()
)
igmpRelayMrtrNewCfgEnaDis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpRelayMrtrNewCfgEnaDis.setStatus("current")


class _IgmpRelayMrtrNewCfgInterval_Type(Integer32):
    """Custom type igmpRelayMrtrNewCfgInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 60),
    )


_IgmpRelayMrtrNewCfgInterval_Type.__name__ = "Integer32"
_IgmpRelayMrtrNewCfgInterval_Object = MibTableColumn
igmpRelayMrtrNewCfgInterval = _IgmpRelayMrtrNewCfgInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 12, 11, 1, 4),
    _IgmpRelayMrtrNewCfgInterval_Type()
)
igmpRelayMrtrNewCfgInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpRelayMrtrNewCfgInterval.setStatus("current")


class _IgmpRelayMrtrNewCfgRetry_Type(Integer32):
    """Custom type igmpRelayMrtrNewCfgRetry based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 120),
    )


_IgmpRelayMrtrNewCfgRetry_Type.__name__ = "Integer32"
_IgmpRelayMrtrNewCfgRetry_Object = MibTableColumn
igmpRelayMrtrNewCfgRetry = _IgmpRelayMrtrNewCfgRetry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 12, 11, 1, 5),
    _IgmpRelayMrtrNewCfgRetry_Type()
)
igmpRelayMrtrNewCfgRetry.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpRelayMrtrNewCfgRetry.setStatus("current")


class _IgmpRelayMrtrNewCfgRestr_Type(Integer32):
    """Custom type igmpRelayMrtrNewCfgRestr based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_IgmpRelayMrtrNewCfgRestr_Type.__name__ = "Integer32"
_IgmpRelayMrtrNewCfgRestr_Object = MibTableColumn
igmpRelayMrtrNewCfgRestr = _IgmpRelayMrtrNewCfgRestr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 12, 11, 1, 6),
    _IgmpRelayMrtrNewCfgRestr_Type()
)
igmpRelayMrtrNewCfgRestr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpRelayMrtrNewCfgRestr.setStatus("current")


class _IgmpRelayMrtrNewCfgVersion_Type(Integer32):
    """Custom type igmpRelayMrtrNewCfgVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("igmpv1", 1),
          ("igmpv2", 2))
    )


_IgmpRelayMrtrNewCfgVersion_Type.__name__ = "Integer32"
_IgmpRelayMrtrNewCfgVersion_Object = MibTableColumn
igmpRelayMrtrNewCfgVersion = _IgmpRelayMrtrNewCfgVersion_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 12, 11, 1, 7),
    _IgmpRelayMrtrNewCfgVersion_Type()
)
igmpRelayMrtrNewCfgVersion.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpRelayMrtrNewCfgVersion.setStatus("current")


class _IgmpRelayMrtrNewCfgRemove_Type(Integer32):
    """Custom type igmpRelayMrtrNewCfgRemove based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("ok", 2))
    )


_IgmpRelayMrtrNewCfgRemove_Type.__name__ = "Integer32"
_IgmpRelayMrtrNewCfgRemove_Object = MibTableColumn
igmpRelayMrtrNewCfgRemove = _IgmpRelayMrtrNewCfgRemove_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 12, 11, 1, 8),
    _IgmpRelayMrtrNewCfgRemove_Type()
)
igmpRelayMrtrNewCfgRemove.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpRelayMrtrNewCfgRemove.setStatus("current")
_IgmpAdvCfg_ObjectIdentity = ObjectIdentity
igmpAdvCfg = _IgmpAdvCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 13)
)


class _IgmpAdvCurCfgQInterval_Type(Integer32):
    """Custom type igmpAdvCurCfgQInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 600),
    )


_IgmpAdvCurCfgQInterval_Type.__name__ = "Integer32"
_IgmpAdvCurCfgQInterval_Object = MibScalar
igmpAdvCurCfgQInterval = _IgmpAdvCurCfgQInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 13, 1),
    _IgmpAdvCurCfgQInterval_Type()
)
igmpAdvCurCfgQInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpAdvCurCfgQInterval.setStatus("current")


class _IgmpAdvNewCfgQInterval_Type(Integer32):
    """Custom type igmpAdvNewCfgQInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 600),
    )


_IgmpAdvNewCfgQInterval_Type.__name__ = "Integer32"
_IgmpAdvNewCfgQInterval_Object = MibScalar
igmpAdvNewCfgQInterval = _IgmpAdvNewCfgQInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 13, 2),
    _IgmpAdvNewCfgQInterval_Type()
)
igmpAdvNewCfgQInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpAdvNewCfgQInterval.setStatus("current")


class _IgmpAdvCurCfgRobust_Type(Integer32):
    """Custom type igmpAdvCurCfgRobust based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_IgmpAdvCurCfgRobust_Type.__name__ = "Integer32"
_IgmpAdvCurCfgRobust_Object = MibScalar
igmpAdvCurCfgRobust = _IgmpAdvCurCfgRobust_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 13, 3),
    _IgmpAdvCurCfgRobust_Type()
)
igmpAdvCurCfgRobust.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpAdvCurCfgRobust.setStatus("current")


class _IgmpAdvNewCfgRobust_Type(Integer32):
    """Custom type igmpAdvNewCfgRobust based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_IgmpAdvNewCfgRobust_Type.__name__ = "Integer32"
_IgmpAdvNewCfgRobust_Object = MibScalar
igmpAdvNewCfgRobust = _IgmpAdvNewCfgRobust_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 13, 4),
    _IgmpAdvNewCfgRobust_Type()
)
igmpAdvNewCfgRobust.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpAdvNewCfgRobust.setStatus("current")


class _IgmpAdvCurCfgTimeout_Type(Integer32):
    """Custom type igmpAdvCurCfgTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_IgmpAdvCurCfgTimeout_Type.__name__ = "Integer32"
_IgmpAdvCurCfgTimeout_Object = MibScalar
igmpAdvCurCfgTimeout = _IgmpAdvCurCfgTimeout_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 13, 5),
    _IgmpAdvCurCfgTimeout_Type()
)
igmpAdvCurCfgTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpAdvCurCfgTimeout.setStatus("current")


class _IgmpAdvNewCfgTimeout_Type(Integer32):
    """Custom type igmpAdvNewCfgTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_IgmpAdvNewCfgTimeout_Type.__name__ = "Integer32"
_IgmpAdvNewCfgTimeout_Object = MibScalar
igmpAdvNewCfgTimeout = _IgmpAdvNewCfgTimeout_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 13, 6),
    _IgmpAdvNewCfgTimeout_Type()
)
igmpAdvNewCfgTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpAdvNewCfgTimeout.setStatus("current")
_IgmpAdvNewCfgVlanFastlvAdd_Type = Integer32
_IgmpAdvNewCfgVlanFastlvAdd_Object = MibScalar
igmpAdvNewCfgVlanFastlvAdd = _IgmpAdvNewCfgVlanFastlvAdd_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 13, 7),
    _IgmpAdvNewCfgVlanFastlvAdd_Type()
)
igmpAdvNewCfgVlanFastlvAdd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpAdvNewCfgVlanFastlvAdd.setStatus("current")
_IgmpAdvNewCfgVlanFastlvRem_Type = Integer32
_IgmpAdvNewCfgVlanFastlvRem_Object = MibScalar
igmpAdvNewCfgVlanFastlvRem = _IgmpAdvNewCfgVlanFastlvRem_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 13, 8),
    _IgmpAdvNewCfgVlanFastlvRem_Type()
)
igmpAdvNewCfgVlanFastlvRem.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpAdvNewCfgVlanFastlvRem.setStatus("current")
_IgmpAdvCurCfgVlanFastlvBmap_Type = OctetString
_IgmpAdvCurCfgVlanFastlvBmap_Object = MibScalar
igmpAdvCurCfgVlanFastlvBmap = _IgmpAdvCurCfgVlanFastlvBmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 13, 9),
    _IgmpAdvCurCfgVlanFastlvBmap_Type()
)
igmpAdvCurCfgVlanFastlvBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpAdvCurCfgVlanFastlvBmap.setStatus("current")
_IgmpAdvNewCfgVlanFastlvBmap_Type = OctetString
_IgmpAdvNewCfgVlanFastlvBmap_Object = MibScalar
igmpAdvNewCfgVlanFastlvBmap = _IgmpAdvNewCfgVlanFastlvBmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 13, 10),
    _IgmpAdvNewCfgVlanFastlvBmap_Type()
)
igmpAdvNewCfgVlanFastlvBmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpAdvNewCfgVlanFastlvBmap.setStatus("current")


class _IgmpAdvCurCfgRtrAlert_Type(Integer32):
    """Custom type igmpAdvCurCfgRtrAlert based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IgmpAdvCurCfgRtrAlert_Type.__name__ = "Integer32"
_IgmpAdvCurCfgRtrAlert_Object = MibScalar
igmpAdvCurCfgRtrAlert = _IgmpAdvCurCfgRtrAlert_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 13, 15),
    _IgmpAdvCurCfgRtrAlert_Type()
)
igmpAdvCurCfgRtrAlert.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpAdvCurCfgRtrAlert.setStatus("current")


class _IgmpAdvNewCfgRtrAlert_Type(Integer32):
    """Custom type igmpAdvNewCfgRtrAlert based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IgmpAdvNewCfgRtrAlert_Type.__name__ = "Integer32"
_IgmpAdvNewCfgRtrAlert_Object = MibScalar
igmpAdvNewCfgRtrAlert = _IgmpAdvNewCfgRtrAlert_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 13, 16),
    _IgmpAdvNewCfgRtrAlert_Type()
)
igmpAdvNewCfgRtrAlert.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpAdvNewCfgRtrAlert.setStatus("current")
_IgmpV3SnoopCfg_ObjectIdentity = ObjectIdentity
igmpV3SnoopCfg = _IgmpV3SnoopCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 14)
)
_IgmpV3SnoopCurCfgSources_Type = Integer32
_IgmpV3SnoopCurCfgSources_Object = MibScalar
igmpV3SnoopCurCfgSources = _IgmpV3SnoopCurCfgSources_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 14, 1),
    _IgmpV3SnoopCurCfgSources_Type()
)
igmpV3SnoopCurCfgSources.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpV3SnoopCurCfgSources.setStatus("current")
_IgmpV3SnoopNewCfgSources_Type = Integer32
_IgmpV3SnoopNewCfgSources_Object = MibScalar
igmpV3SnoopNewCfgSources = _IgmpV3SnoopNewCfgSources_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 14, 2),
    _IgmpV3SnoopNewCfgSources_Type()
)
igmpV3SnoopNewCfgSources.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpV3SnoopNewCfgSources.setStatus("current")


class _IgmpV3SnoopCurCfgEnaDis_Type(Integer32):
    """Custom type igmpV3SnoopCurCfgEnaDis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IgmpV3SnoopCurCfgEnaDis_Type.__name__ = "Integer32"
_IgmpV3SnoopCurCfgEnaDis_Object = MibScalar
igmpV3SnoopCurCfgEnaDis = _IgmpV3SnoopCurCfgEnaDis_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 14, 3),
    _IgmpV3SnoopCurCfgEnaDis_Type()
)
igmpV3SnoopCurCfgEnaDis.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpV3SnoopCurCfgEnaDis.setStatus("current")


class _IgmpV3SnoopNewCfgEnaDis_Type(Integer32):
    """Custom type igmpV3SnoopNewCfgEnaDis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_IgmpV3SnoopNewCfgEnaDis_Type.__name__ = "Integer32"
_IgmpV3SnoopNewCfgEnaDis_Object = MibScalar
igmpV3SnoopNewCfgEnaDis = _IgmpV3SnoopNewCfgEnaDis_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 14, 4),
    _IgmpV3SnoopNewCfgEnaDis_Type()
)
igmpV3SnoopNewCfgEnaDis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpV3SnoopNewCfgEnaDis.setStatus("current")


class _IgmpV3SnoopCurCfgExcludeEnaDis_Type(Integer32):
    """Custom type igmpV3SnoopCurCfgExcludeEnaDis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IgmpV3SnoopCurCfgExcludeEnaDis_Type.__name__ = "Integer32"
_IgmpV3SnoopCurCfgExcludeEnaDis_Object = MibScalar
igmpV3SnoopCurCfgExcludeEnaDis = _IgmpV3SnoopCurCfgExcludeEnaDis_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 14, 5),
    _IgmpV3SnoopCurCfgExcludeEnaDis_Type()
)
igmpV3SnoopCurCfgExcludeEnaDis.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpV3SnoopCurCfgExcludeEnaDis.setStatus("current")


class _IgmpV3SnoopNewCfgExcludeEnaDis_Type(Integer32):
    """Custom type igmpV3SnoopNewCfgExcludeEnaDis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_IgmpV3SnoopNewCfgExcludeEnaDis_Type.__name__ = "Integer32"
_IgmpV3SnoopNewCfgExcludeEnaDis_Object = MibScalar
igmpV3SnoopNewCfgExcludeEnaDis = _IgmpV3SnoopNewCfgExcludeEnaDis_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 14, 6),
    _IgmpV3SnoopNewCfgExcludeEnaDis_Type()
)
igmpV3SnoopNewCfgExcludeEnaDis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpV3SnoopNewCfgExcludeEnaDis.setStatus("current")


class _IgmpV3SnoopCurCfgV1V2EnaDis_Type(Integer32):
    """Custom type igmpV3SnoopCurCfgV1V2EnaDis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IgmpV3SnoopCurCfgV1V2EnaDis_Type.__name__ = "Integer32"
_IgmpV3SnoopCurCfgV1V2EnaDis_Object = MibScalar
igmpV3SnoopCurCfgV1V2EnaDis = _IgmpV3SnoopCurCfgV1V2EnaDis_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 14, 7),
    _IgmpV3SnoopCurCfgV1V2EnaDis_Type()
)
igmpV3SnoopCurCfgV1V2EnaDis.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpV3SnoopCurCfgV1V2EnaDis.setStatus("current")


class _IgmpV3SnoopNewCfgV1V2EnaDis_Type(Integer32):
    """Custom type igmpV3SnoopNewCfgV1V2EnaDis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_IgmpV3SnoopNewCfgV1V2EnaDis_Type.__name__ = "Integer32"
_IgmpV3SnoopNewCfgV1V2EnaDis_Object = MibScalar
igmpV3SnoopNewCfgV1V2EnaDis = _IgmpV3SnoopNewCfgV1V2EnaDis_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 14, 8),
    _IgmpV3SnoopNewCfgV1V2EnaDis_Type()
)
igmpV3SnoopNewCfgV1V2EnaDis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpV3SnoopNewCfgV1V2EnaDis.setStatus("current")
_IgmpCurQurCfgTable_Object = MibTable
igmpCurQurCfgTable = _IgmpCurQurCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 15)
)
if mibBuilder.loadTexts:
    igmpCurQurCfgTable.setStatus("current")
_IgmpCurQurCfgEntry_Object = MibTableRow
igmpCurQurCfgEntry = _IgmpCurQurCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 15, 1)
)
igmpCurQurCfgEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "igmpCurQurCfgVlanIndex"),
)
if mibBuilder.loadTexts:
    igmpCurQurCfgEntry.setStatus("current")


class _IgmpCurQurCfgVlanIndex_Type(Integer32):
    """Custom type igmpCurQurCfgVlanIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_IgmpCurQurCfgVlanIndex_Type.__name__ = "Integer32"
_IgmpCurQurCfgVlanIndex_Object = MibTableColumn
igmpCurQurCfgVlanIndex = _IgmpCurQurCfgVlanIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 15, 1, 1),
    _IgmpCurQurCfgVlanIndex_Type()
)
igmpCurQurCfgVlanIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpCurQurCfgVlanIndex.setStatus("current")


class _IgmpCurQuerierState_Type(Integer32):
    """Custom type igmpCurQuerierState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("querier", 1),
          ("nonQuerier", 2),
          ("checkingMembership", 3))
    )


_IgmpCurQuerierState_Type.__name__ = "Integer32"
_IgmpCurQuerierState_Object = MibTableColumn
igmpCurQuerierState = _IgmpCurQuerierState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 15, 1, 2),
    _IgmpCurQuerierState_Type()
)
igmpCurQuerierState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpCurQuerierState.setStatus("current")


class _IgmpCurCfgQuerier_Type(Integer32):
    """Custom type igmpCurCfgQuerier based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IgmpCurCfgQuerier_Type.__name__ = "Integer32"
_IgmpCurCfgQuerier_Object = MibTableColumn
igmpCurCfgQuerier = _IgmpCurCfgQuerier_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 15, 1, 3),
    _IgmpCurCfgQuerier_Type()
)
igmpCurCfgQuerier.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpCurCfgQuerier.setStatus("current")


class _IgmpCurCfgQueryInterval_Type(Integer32):
    """Custom type igmpCurCfgQueryInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 608),
    )


_IgmpCurCfgQueryInterval_Type.__name__ = "Integer32"
_IgmpCurCfgQueryInterval_Object = MibTableColumn
igmpCurCfgQueryInterval = _IgmpCurCfgQueryInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 15, 1, 4),
    _IgmpCurCfgQueryInterval_Type()
)
igmpCurCfgQueryInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpCurCfgQueryInterval.setStatus("current")
_IgmpCurCfgQurSrcIp_Type = IpAddress
_IgmpCurCfgQurSrcIp_Object = MibTableColumn
igmpCurCfgQurSrcIp = _IgmpCurCfgQurSrcIp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 15, 1, 5),
    _IgmpCurCfgQurSrcIp_Type()
)
igmpCurCfgQurSrcIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpCurCfgQurSrcIp.setStatus("current")


class _IgmpCurCfgElectionType_Type(Integer32):
    """Custom type igmpCurCfgElectionType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ipv4", 1),
          ("macaddr", 2))
    )


_IgmpCurCfgElectionType_Type.__name__ = "Integer32"
_IgmpCurCfgElectionType_Object = MibTableColumn
igmpCurCfgElectionType = _IgmpCurCfgElectionType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 15, 1, 6),
    _IgmpCurCfgElectionType_Type()
)
igmpCurCfgElectionType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpCurCfgElectionType.setStatus("current")


class _IgmpCurCfgQurRobustness_Type(Integer32):
    """Custom type igmpCurCfgQurRobustness based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_IgmpCurCfgQurRobustness_Type.__name__ = "Integer32"
_IgmpCurCfgQurRobustness_Object = MibTableColumn
igmpCurCfgQurRobustness = _IgmpCurCfgQurRobustness_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 15, 1, 7),
    _IgmpCurCfgQurRobustness_Type()
)
igmpCurCfgQurRobustness.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpCurCfgQurRobustness.setStatus("current")


class _IgmpCurCfgQurStartupCnt_Type(Integer32):
    """Custom type igmpCurCfgQurStartupCnt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_IgmpCurCfgQurStartupCnt_Type.__name__ = "Integer32"
_IgmpCurCfgQurStartupCnt_Object = MibTableColumn
igmpCurCfgQurStartupCnt = _IgmpCurCfgQurStartupCnt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 15, 1, 8),
    _IgmpCurCfgQurStartupCnt_Type()
)
igmpCurCfgQurStartupCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpCurCfgQurStartupCnt.setStatus("current")


class _IgmpCurCfgQurStartupInt_Type(Integer32):
    """Custom type igmpCurCfgQurStartupInt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 608),
    )


_IgmpCurCfgQurStartupInt_Type.__name__ = "Integer32"
_IgmpCurCfgQurStartupInt_Object = MibTableColumn
igmpCurCfgQurStartupInt = _IgmpCurCfgQurStartupInt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 15, 1, 9),
    _IgmpCurCfgQurStartupInt_Type()
)
igmpCurCfgQurStartupInt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpCurCfgQurStartupInt.setStatus("current")


class _IgmpCurCfgQurMaxRespTime_Type(Integer32):
    """Custom type igmpCurCfgQurMaxRespTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 256),
    )


_IgmpCurCfgQurMaxRespTime_Type.__name__ = "Integer32"
_IgmpCurCfgQurMaxRespTime_Object = MibTableColumn
igmpCurCfgQurMaxRespTime = _IgmpCurCfgQurMaxRespTime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 15, 1, 10),
    _IgmpCurCfgQurMaxRespTime_Type()
)
igmpCurCfgQurMaxRespTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpCurCfgQurMaxRespTime.setStatus("current")


class _IgmpCurCfgOtherQurAddress_Type(DisplayString):
    """Custom type igmpCurCfgOtherQurAddress based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_IgmpCurCfgOtherQurAddress_Type.__name__ = "DisplayString"
_IgmpCurCfgOtherQurAddress_Object = MibTableColumn
igmpCurCfgOtherQurAddress = _IgmpCurCfgOtherQurAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 15, 1, 11),
    _IgmpCurCfgOtherQurAddress_Type()
)
igmpCurCfgOtherQurAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpCurCfgOtherQurAddress.setStatus("current")


class _IgmpCurCfgOtherQurPresentInt_Type(DisplayString):
    """Custom type igmpCurCfgOtherQurPresentInt based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_IgmpCurCfgOtherQurPresentInt_Type.__name__ = "DisplayString"
_IgmpCurCfgOtherQurPresentInt_Object = MibTableColumn
igmpCurCfgOtherQurPresentInt = _IgmpCurCfgOtherQurPresentInt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 15, 1, 12),
    _IgmpCurCfgOtherQurPresentInt_Type()
)
igmpCurCfgOtherQurPresentInt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpCurCfgOtherQurPresentInt.setStatus("current")


class _IgmpCurCfgVlanOperVersion_Type(Integer32):
    """Custom type igmpCurCfgVlanOperVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("igmpV1", 1),
          ("igmpV2", 2),
          ("igmpV3", 3))
    )


_IgmpCurCfgVlanOperVersion_Type.__name__ = "Integer32"
_IgmpCurCfgVlanOperVersion_Object = MibTableColumn
igmpCurCfgVlanOperVersion = _IgmpCurCfgVlanOperVersion_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 15, 1, 13),
    _IgmpCurCfgVlanOperVersion_Type()
)
igmpCurCfgVlanOperVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpCurCfgVlanOperVersion.setStatus("current")


class _IgmpCurVlanOperVersion_Type(Integer32):
    """Custom type igmpCurVlanOperVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("igmpV1", 1),
          ("igmpV2", 2),
          ("igmpV3", 3))
    )


_IgmpCurVlanOperVersion_Type.__name__ = "Integer32"
_IgmpCurVlanOperVersion_Object = MibTableColumn
igmpCurVlanOperVersion = _IgmpCurVlanOperVersion_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 15, 1, 14),
    _IgmpCurVlanOperVersion_Type()
)
igmpCurVlanOperVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpCurVlanOperVersion.setStatus("current")


class _IgmpCurVlanOlderVerTimer_Type(DisplayString):
    """Custom type igmpCurVlanOlderVerTimer based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_IgmpCurVlanOlderVerTimer_Type.__name__ = "DisplayString"
_IgmpCurVlanOlderVerTimer_Object = MibTableColumn
igmpCurVlanOlderVerTimer = _IgmpCurVlanOlderVerTimer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 15, 1, 15),
    _IgmpCurVlanOlderVerTimer_Type()
)
igmpCurVlanOlderVerTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpCurVlanOlderVerTimer.setStatus("current")
_IgmpNewQurCfgTable_Object = MibTable
igmpNewQurCfgTable = _IgmpNewQurCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 16)
)
if mibBuilder.loadTexts:
    igmpNewQurCfgTable.setStatus("current")
_IgmpNewQurCfgEntry_Object = MibTableRow
igmpNewQurCfgEntry = _IgmpNewQurCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 16, 1)
)
igmpNewQurCfgEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "igmpNewQurCfgVlanIndex"),
)
if mibBuilder.loadTexts:
    igmpNewQurCfgEntry.setStatus("current")


class _IgmpNewQurCfgVlanIndex_Type(Integer32):
    """Custom type igmpNewQurCfgVlanIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_IgmpNewQurCfgVlanIndex_Type.__name__ = "Integer32"
_IgmpNewQurCfgVlanIndex_Object = MibTableColumn
igmpNewQurCfgVlanIndex = _IgmpNewQurCfgVlanIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 16, 1, 1),
    _IgmpNewQurCfgVlanIndex_Type()
)
igmpNewQurCfgVlanIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpNewQurCfgVlanIndex.setStatus("current")


class _IgmpNewQuerierState_Type(Integer32):
    """Custom type igmpNewQuerierState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("querier", 1),
          ("nonQuerier", 2),
          ("checkingMembership", 3))
    )


_IgmpNewQuerierState_Type.__name__ = "Integer32"
_IgmpNewQuerierState_Object = MibTableColumn
igmpNewQuerierState = _IgmpNewQuerierState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 16, 1, 2),
    _IgmpNewQuerierState_Type()
)
igmpNewQuerierState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpNewQuerierState.setStatus("current")


class _IgmpNewCfgQuerier_Type(Integer32):
    """Custom type igmpNewCfgQuerier based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IgmpNewCfgQuerier_Type.__name__ = "Integer32"
_IgmpNewCfgQuerier_Object = MibTableColumn
igmpNewCfgQuerier = _IgmpNewCfgQuerier_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 16, 1, 3),
    _IgmpNewCfgQuerier_Type()
)
igmpNewCfgQuerier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpNewCfgQuerier.setStatus("current")


class _IgmpNewCfgQueryInterval_Type(Integer32):
    """Custom type igmpNewCfgQueryInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 608),
    )


_IgmpNewCfgQueryInterval_Type.__name__ = "Integer32"
_IgmpNewCfgQueryInterval_Object = MibTableColumn
igmpNewCfgQueryInterval = _IgmpNewCfgQueryInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 16, 1, 4),
    _IgmpNewCfgQueryInterval_Type()
)
igmpNewCfgQueryInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpNewCfgQueryInterval.setStatus("current")
_IgmpNewCfgQurSrcIp_Type = IpAddress
_IgmpNewCfgQurSrcIp_Object = MibTableColumn
igmpNewCfgQurSrcIp = _IgmpNewCfgQurSrcIp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 16, 1, 5),
    _IgmpNewCfgQurSrcIp_Type()
)
igmpNewCfgQurSrcIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpNewCfgQurSrcIp.setStatus("current")


class _IgmpNewCfgElectionType_Type(Integer32):
    """Custom type igmpNewCfgElectionType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ipv4", 1),
          ("macaddr", 2))
    )


_IgmpNewCfgElectionType_Type.__name__ = "Integer32"
_IgmpNewCfgElectionType_Object = MibTableColumn
igmpNewCfgElectionType = _IgmpNewCfgElectionType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 16, 1, 6),
    _IgmpNewCfgElectionType_Type()
)
igmpNewCfgElectionType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpNewCfgElectionType.setStatus("current")


class _IgmpNewCfgQurRobustness_Type(Integer32):
    """Custom type igmpNewCfgQurRobustness based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_IgmpNewCfgQurRobustness_Type.__name__ = "Integer32"
_IgmpNewCfgQurRobustness_Object = MibTableColumn
igmpNewCfgQurRobustness = _IgmpNewCfgQurRobustness_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 16, 1, 7),
    _IgmpNewCfgQurRobustness_Type()
)
igmpNewCfgQurRobustness.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpNewCfgQurRobustness.setStatus("current")


class _IgmpNewCfgQurStartupCnt_Type(Integer32):
    """Custom type igmpNewCfgQurStartupCnt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_IgmpNewCfgQurStartupCnt_Type.__name__ = "Integer32"
_IgmpNewCfgQurStartupCnt_Object = MibTableColumn
igmpNewCfgQurStartupCnt = _IgmpNewCfgQurStartupCnt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 16, 1, 8),
    _IgmpNewCfgQurStartupCnt_Type()
)
igmpNewCfgQurStartupCnt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpNewCfgQurStartupCnt.setStatus("current")


class _IgmpNewCfgQurStartupInt_Type(Integer32):
    """Custom type igmpNewCfgQurStartupInt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 608),
    )


_IgmpNewCfgQurStartupInt_Type.__name__ = "Integer32"
_IgmpNewCfgQurStartupInt_Object = MibTableColumn
igmpNewCfgQurStartupInt = _IgmpNewCfgQurStartupInt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 16, 1, 9),
    _IgmpNewCfgQurStartupInt_Type()
)
igmpNewCfgQurStartupInt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpNewCfgQurStartupInt.setStatus("current")


class _IgmpNewCfgQurMaxRespTime_Type(Integer32):
    """Custom type igmpNewCfgQurMaxRespTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 256),
    )


_IgmpNewCfgQurMaxRespTime_Type.__name__ = "Integer32"
_IgmpNewCfgQurMaxRespTime_Object = MibTableColumn
igmpNewCfgQurMaxRespTime = _IgmpNewCfgQurMaxRespTime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 16, 1, 10),
    _IgmpNewCfgQurMaxRespTime_Type()
)
igmpNewCfgQurMaxRespTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpNewCfgQurMaxRespTime.setStatus("current")


class _IgmpNewCfgOtherQurAddress_Type(DisplayString):
    """Custom type igmpNewCfgOtherQurAddress based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_IgmpNewCfgOtherQurAddress_Type.__name__ = "DisplayString"
_IgmpNewCfgOtherQurAddress_Object = MibTableColumn
igmpNewCfgOtherQurAddress = _IgmpNewCfgOtherQurAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 16, 1, 11),
    _IgmpNewCfgOtherQurAddress_Type()
)
igmpNewCfgOtherQurAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpNewCfgOtherQurAddress.setStatus("current")


class _IgmpNewCfgOtherQurPresentInt_Type(DisplayString):
    """Custom type igmpNewCfgOtherQurPresentInt based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_IgmpNewCfgOtherQurPresentInt_Type.__name__ = "DisplayString"
_IgmpNewCfgOtherQurPresentInt_Object = MibTableColumn
igmpNewCfgOtherQurPresentInt = _IgmpNewCfgOtherQurPresentInt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 16, 1, 12),
    _IgmpNewCfgOtherQurPresentInt_Type()
)
igmpNewCfgOtherQurPresentInt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpNewCfgOtherQurPresentInt.setStatus("current")


class _IgmpNewCfgVlanOperVersion_Type(Integer32):
    """Custom type igmpNewCfgVlanOperVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("igmpV1", 1),
          ("igmpV2", 2),
          ("igmpV3", 3))
    )


_IgmpNewCfgVlanOperVersion_Type.__name__ = "Integer32"
_IgmpNewCfgVlanOperVersion_Object = MibTableColumn
igmpNewCfgVlanOperVersion = _IgmpNewCfgVlanOperVersion_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 16, 1, 13),
    _IgmpNewCfgVlanOperVersion_Type()
)
igmpNewCfgVlanOperVersion.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpNewCfgVlanOperVersion.setStatus("current")


class _IgmpNewVlanOperVersion_Type(Integer32):
    """Custom type igmpNewVlanOperVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("igmpV1", 1),
          ("igmpV2", 2),
          ("igmpV3", 3))
    )


_IgmpNewVlanOperVersion_Type.__name__ = "Integer32"
_IgmpNewVlanOperVersion_Object = MibTableColumn
igmpNewVlanOperVersion = _IgmpNewVlanOperVersion_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 16, 1, 14),
    _IgmpNewVlanOperVersion_Type()
)
igmpNewVlanOperVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpNewVlanOperVersion.setStatus("current")


class _IgmpNewVlanOlderVerTimer_Type(DisplayString):
    """Custom type igmpNewVlanOlderVerTimer based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_IgmpNewVlanOlderVerTimer_Type.__name__ = "DisplayString"
_IgmpNewVlanOlderVerTimer_Object = MibTableColumn
igmpNewVlanOlderVerTimer = _IgmpNewVlanOlderVerTimer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 16, 1, 15),
    _IgmpNewVlanOlderVerTimer_Type()
)
igmpNewVlanOlderVerTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpNewVlanOlderVerTimer.setStatus("current")


class _IgmpNewCfgQuerierDefault_Type(Integer32):
    """Custom type igmpNewCfgQuerierDefault based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("default", 2))
    )


_IgmpNewCfgQuerierDefault_Type.__name__ = "Integer32"
_IgmpNewCfgQuerierDefault_Object = MibTableColumn
igmpNewCfgQuerierDefault = _IgmpNewCfgQuerierDefault_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 16, 1, 16),
    _IgmpNewCfgQuerierDefault_Type()
)
igmpNewCfgQuerierDefault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpNewCfgQuerierDefault.setStatus("current")


class _IgmpCurCfgQuerierOnOff_Type(Integer32):
    """Custom type igmpCurCfgQuerierOnOff based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_IgmpCurCfgQuerierOnOff_Type.__name__ = "Integer32"
_IgmpCurCfgQuerierOnOff_Object = MibScalar
igmpCurCfgQuerierOnOff = _IgmpCurCfgQuerierOnOff_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 17),
    _IgmpCurCfgQuerierOnOff_Type()
)
igmpCurCfgQuerierOnOff.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpCurCfgQuerierOnOff.setStatus("current")


class _IgmpNewCfgQuerierOnOff_Type(Integer32):
    """Custom type igmpNewCfgQuerierOnOff based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_IgmpNewCfgQuerierOnOff_Type.__name__ = "Integer32"
_IgmpNewCfgQuerierOnOff_Object = MibScalar
igmpNewCfgQuerierOnOff = _IgmpNewCfgQuerierOnOff_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 19, 18),
    _IgmpNewCfgQuerierOnOff_Type()
)
igmpNewCfgQuerierOnOff.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpNewCfgQuerierOnOff.setStatus("current")
_IpmcStaticRouteCfg_ObjectIdentity = ObjectIdentity
ipmcStaticRouteCfg = _IpmcStaticRouteCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 20)
)
_IpmcStaticRouteTableMaxSize_Type = Integer32
_IpmcStaticRouteTableMaxSize_Object = MibScalar
ipmcStaticRouteTableMaxSize = _IpmcStaticRouteTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 20, 1),
    _IpmcStaticRouteTableMaxSize_Type()
)
ipmcStaticRouteTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipmcStaticRouteTableMaxSize.setStatus("current")
_IpmcCurCfgStaticRouteTable_Object = MibTable
ipmcCurCfgStaticRouteTable = _IpmcCurCfgStaticRouteTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 20, 2)
)
if mibBuilder.loadTexts:
    ipmcCurCfgStaticRouteTable.setStatus("current")
_IpmcCurCfgStaticRouteEntry_Object = MibTableRow
ipmcCurCfgStaticRouteEntry = _IpmcCurCfgStaticRouteEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 20, 2, 1)
)
ipmcCurCfgStaticRouteEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipmcCurCfgStaticRouteIndx"),
)
if mibBuilder.loadTexts:
    ipmcCurCfgStaticRouteEntry.setStatus("current")
_IpmcCurCfgStaticRouteIndx_Type = Integer32
_IpmcCurCfgStaticRouteIndx_Object = MibTableColumn
ipmcCurCfgStaticRouteIndx = _IpmcCurCfgStaticRouteIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 20, 2, 1, 1),
    _IpmcCurCfgStaticRouteIndx_Type()
)
ipmcCurCfgStaticRouteIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipmcCurCfgStaticRouteIndx.setStatus("current")
_IpmcCurCfgStaticRouteDestIp_Type = IpAddress
_IpmcCurCfgStaticRouteDestIp_Object = MibTableColumn
ipmcCurCfgStaticRouteDestIp = _IpmcCurCfgStaticRouteDestIp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 20, 2, 1, 2),
    _IpmcCurCfgStaticRouteDestIp_Type()
)
ipmcCurCfgStaticRouteDestIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipmcCurCfgStaticRouteDestIp.setStatus("current")
_IpmcCurCfgStaticRouteVlanId_Type = Integer32
_IpmcCurCfgStaticRouteVlanId_Object = MibTableColumn
ipmcCurCfgStaticRouteVlanId = _IpmcCurCfgStaticRouteVlanId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 20, 2, 1, 3),
    _IpmcCurCfgStaticRouteVlanId_Type()
)
ipmcCurCfgStaticRouteVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipmcCurCfgStaticRouteVlanId.setStatus("current")
_IpmcCurCfgStaticRouteHostBmap_Type = OctetString
_IpmcCurCfgStaticRouteHostBmap_Object = MibTableColumn
ipmcCurCfgStaticRouteHostBmap = _IpmcCurCfgStaticRouteHostBmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 20, 2, 1, 4),
    _IpmcCurCfgStaticRouteHostBmap_Type()
)
ipmcCurCfgStaticRouteHostBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipmcCurCfgStaticRouteHostBmap.setStatus("current")
_IpmcCurCfgStaticRoutePMrtrBmap_Type = OctetString
_IpmcCurCfgStaticRoutePMrtrBmap_Object = MibTableColumn
ipmcCurCfgStaticRoutePMrtrBmap = _IpmcCurCfgStaticRoutePMrtrBmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 20, 2, 1, 5),
    _IpmcCurCfgStaticRoutePMrtrBmap_Type()
)
ipmcCurCfgStaticRoutePMrtrBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipmcCurCfgStaticRoutePMrtrBmap.setStatus("current")
_IpmcCurCfgStaticRouteBMrtrBmap_Type = OctetString
_IpmcCurCfgStaticRouteBMrtrBmap_Object = MibTableColumn
ipmcCurCfgStaticRouteBMrtrBmap = _IpmcCurCfgStaticRouteBMrtrBmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 20, 2, 1, 6),
    _IpmcCurCfgStaticRouteBMrtrBmap_Type()
)
ipmcCurCfgStaticRouteBMrtrBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipmcCurCfgStaticRouteBMrtrBmap.setStatus("current")
_IpmcCurCfgStaticRouteVrid_Type = Integer32
_IpmcCurCfgStaticRouteVrid_Object = MibTableColumn
ipmcCurCfgStaticRouteVrid = _IpmcCurCfgStaticRouteVrid_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 20, 2, 1, 7),
    _IpmcCurCfgStaticRouteVrid_Type()
)
ipmcCurCfgStaticRouteVrid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipmcCurCfgStaticRouteVrid.setStatus("current")


class _IpmcCurCfgStaticRouteAdminkeys_Type(DisplayString):
    """Custom type ipmcCurCfgStaticRouteAdminkeys based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 128),
    )


_IpmcCurCfgStaticRouteAdminkeys_Type.__name__ = "DisplayString"
_IpmcCurCfgStaticRouteAdminkeys_Object = MibTableColumn
ipmcCurCfgStaticRouteAdminkeys = _IpmcCurCfgStaticRouteAdminkeys_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 20, 2, 1, 8),
    _IpmcCurCfgStaticRouteAdminkeys_Type()
)
ipmcCurCfgStaticRouteAdminkeys.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipmcCurCfgStaticRouteAdminkeys.setStatus("current")
_IpmcCurCfgStaticRouteTrunks_Type = OctetString
_IpmcCurCfgStaticRouteTrunks_Object = MibTableColumn
ipmcCurCfgStaticRouteTrunks = _IpmcCurCfgStaticRouteTrunks_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 20, 2, 1, 9),
    _IpmcCurCfgStaticRouteTrunks_Type()
)
ipmcCurCfgStaticRouteTrunks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipmcCurCfgStaticRouteTrunks.setStatus("current")
_IpmcNewCfgStaticRouteTable_Object = MibTable
ipmcNewCfgStaticRouteTable = _IpmcNewCfgStaticRouteTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 20, 3)
)
if mibBuilder.loadTexts:
    ipmcNewCfgStaticRouteTable.setStatus("current")
_IpmcNewCfgStaticRouteEntry_Object = MibTableRow
ipmcNewCfgStaticRouteEntry = _IpmcNewCfgStaticRouteEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 20, 3, 1)
)
ipmcNewCfgStaticRouteEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipmcNewCfgStaticRouteIndx"),
)
if mibBuilder.loadTexts:
    ipmcNewCfgStaticRouteEntry.setStatus("current")
_IpmcNewCfgStaticRouteIndx_Type = Integer32
_IpmcNewCfgStaticRouteIndx_Object = MibTableColumn
ipmcNewCfgStaticRouteIndx = _IpmcNewCfgStaticRouteIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 20, 3, 1, 1),
    _IpmcNewCfgStaticRouteIndx_Type()
)
ipmcNewCfgStaticRouteIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipmcNewCfgStaticRouteIndx.setStatus("current")
_IpmcNewCfgStaticRouteDestIp_Type = IpAddress
_IpmcNewCfgStaticRouteDestIp_Object = MibTableColumn
ipmcNewCfgStaticRouteDestIp = _IpmcNewCfgStaticRouteDestIp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 20, 3, 1, 2),
    _IpmcNewCfgStaticRouteDestIp_Type()
)
ipmcNewCfgStaticRouteDestIp.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipmcNewCfgStaticRouteDestIp.setStatus("current")
_IpmcNewCfgStaticRouteVlanId_Type = Integer32
_IpmcNewCfgStaticRouteVlanId_Object = MibTableColumn
ipmcNewCfgStaticRouteVlanId = _IpmcNewCfgStaticRouteVlanId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 20, 3, 1, 3),
    _IpmcNewCfgStaticRouteVlanId_Type()
)
ipmcNewCfgStaticRouteVlanId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipmcNewCfgStaticRouteVlanId.setStatus("current")
_IpmcNewCfgStaticRouteHostBmap_Type = OctetString
_IpmcNewCfgStaticRouteHostBmap_Object = MibTableColumn
ipmcNewCfgStaticRouteHostBmap = _IpmcNewCfgStaticRouteHostBmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 20, 3, 1, 4),
    _IpmcNewCfgStaticRouteHostBmap_Type()
)
ipmcNewCfgStaticRouteHostBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipmcNewCfgStaticRouteHostBmap.setStatus("current")
_IpmcNewCfgStaticRoutePMrtrBmap_Type = OctetString
_IpmcNewCfgStaticRoutePMrtrBmap_Object = MibTableColumn
ipmcNewCfgStaticRoutePMrtrBmap = _IpmcNewCfgStaticRoutePMrtrBmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 20, 3, 1, 5),
    _IpmcNewCfgStaticRoutePMrtrBmap_Type()
)
ipmcNewCfgStaticRoutePMrtrBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipmcNewCfgStaticRoutePMrtrBmap.setStatus("current")
_IpmcNewCfgStaticRouteBMrtrBmap_Type = OctetString
_IpmcNewCfgStaticRouteBMrtrBmap_Object = MibTableColumn
ipmcNewCfgStaticRouteBMrtrBmap = _IpmcNewCfgStaticRouteBMrtrBmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 20, 3, 1, 6),
    _IpmcNewCfgStaticRouteBMrtrBmap_Type()
)
ipmcNewCfgStaticRouteBMrtrBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipmcNewCfgStaticRouteBMrtrBmap.setStatus("current")
_IpmcNewCfgStaticRouteAddPort_Type = Integer32
_IpmcNewCfgStaticRouteAddPort_Object = MibTableColumn
ipmcNewCfgStaticRouteAddPort = _IpmcNewCfgStaticRouteAddPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 20, 3, 1, 7),
    _IpmcNewCfgStaticRouteAddPort_Type()
)
ipmcNewCfgStaticRouteAddPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipmcNewCfgStaticRouteAddPort.setStatus("current")
_IpmcNewCfgStaticRouteTrunks_Type = OctetString
_IpmcNewCfgStaticRouteTrunks_Object = MibTableColumn
ipmcNewCfgStaticRouteTrunks = _IpmcNewCfgStaticRouteTrunks_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 20, 3, 1, 8),
    _IpmcNewCfgStaticRouteTrunks_Type()
)
ipmcNewCfgStaticRouteTrunks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipmcNewCfgStaticRouteTrunks.setStatus("current")
_IpmcNewCfgStaticRouteAddTrunk_Type = Integer32
_IpmcNewCfgStaticRouteAddTrunk_Object = MibTableColumn
ipmcNewCfgStaticRouteAddTrunk = _IpmcNewCfgStaticRouteAddTrunk_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 20, 3, 1, 9),
    _IpmcNewCfgStaticRouteAddTrunk_Type()
)
ipmcNewCfgStaticRouteAddTrunk.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipmcNewCfgStaticRouteAddTrunk.setStatus("current")
_IpmcNewCfgStaticRouteRemTrunk_Type = Integer32
_IpmcNewCfgStaticRouteRemTrunk_Object = MibTableColumn
ipmcNewCfgStaticRouteRemTrunk = _IpmcNewCfgStaticRouteRemTrunk_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 20, 3, 1, 10),
    _IpmcNewCfgStaticRouteRemTrunk_Type()
)
ipmcNewCfgStaticRouteRemTrunk.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipmcNewCfgStaticRouteRemTrunk.setStatus("current")


class _IpmcNewCfgStaticRouteAdminkeys_Type(DisplayString):
    """Custom type ipmcNewCfgStaticRouteAdminkeys based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 128),
    )


_IpmcNewCfgStaticRouteAdminkeys_Type.__name__ = "DisplayString"
_IpmcNewCfgStaticRouteAdminkeys_Object = MibTableColumn
ipmcNewCfgStaticRouteAdminkeys = _IpmcNewCfgStaticRouteAdminkeys_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 20, 3, 1, 11),
    _IpmcNewCfgStaticRouteAdminkeys_Type()
)
ipmcNewCfgStaticRouteAdminkeys.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipmcNewCfgStaticRouteAdminkeys.setStatus("current")
_IpmcNewCfgStaticRouteAddAdminkey_Type = Integer32
_IpmcNewCfgStaticRouteAddAdminkey_Object = MibTableColumn
ipmcNewCfgStaticRouteAddAdminkey = _IpmcNewCfgStaticRouteAddAdminkey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 20, 3, 1, 12),
    _IpmcNewCfgStaticRouteAddAdminkey_Type()
)
ipmcNewCfgStaticRouteAddAdminkey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipmcNewCfgStaticRouteAddAdminkey.setStatus("current")
_IpmcNewCfgStaticRouteRemAdminkey_Type = Integer32
_IpmcNewCfgStaticRouteRemAdminkey_Object = MibTableColumn
ipmcNewCfgStaticRouteRemAdminkey = _IpmcNewCfgStaticRouteRemAdminkey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 20, 3, 1, 13),
    _IpmcNewCfgStaticRouteRemAdminkey_Type()
)
ipmcNewCfgStaticRouteRemAdminkey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipmcNewCfgStaticRouteRemAdminkey.setStatus("current")


class _IpmcNewCfgStaticRoutePortInfo_Type(Integer32):
    """Custom type ipmcNewCfgStaticRoutePortInfo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("host", 1),
          ("primary", 2),
          ("backup", 3))
    )


_IpmcNewCfgStaticRoutePortInfo_Type.__name__ = "Integer32"
_IpmcNewCfgStaticRoutePortInfo_Object = MibTableColumn
ipmcNewCfgStaticRoutePortInfo = _IpmcNewCfgStaticRoutePortInfo_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 20, 3, 1, 14),
    _IpmcNewCfgStaticRoutePortInfo_Type()
)
ipmcNewCfgStaticRoutePortInfo.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipmcNewCfgStaticRoutePortInfo.setStatus("current")
_IpmcNewCfgStaticRouteVrid_Type = Integer32
_IpmcNewCfgStaticRouteVrid_Object = MibTableColumn
ipmcNewCfgStaticRouteVrid = _IpmcNewCfgStaticRouteVrid_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 20, 3, 1, 15),
    _IpmcNewCfgStaticRouteVrid_Type()
)
ipmcNewCfgStaticRouteVrid.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipmcNewCfgStaticRouteVrid.setStatus("current")


class _IpmcNewCfgStaticRouteDelete_Type(Integer32):
    """Custom type ipmcNewCfgStaticRouteDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("delete", 2),
          ("deletehost", 3),
          ("deleteprimary", 4),
          ("deletebackup", 5))
    )


_IpmcNewCfgStaticRouteDelete_Type.__name__ = "Integer32"
_IpmcNewCfgStaticRouteDelete_Object = MibTableColumn
ipmcNewCfgStaticRouteDelete = _IpmcNewCfgStaticRouteDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 20, 3, 1, 16),
    _IpmcNewCfgStaticRouteDelete_Type()
)
ipmcNewCfgStaticRouteDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipmcNewCfgStaticRouteDelete.setStatus("current")
_IpmcNewCfgStaticRouteRemPort_Type = Integer32
_IpmcNewCfgStaticRouteRemPort_Object = MibTableColumn
ipmcNewCfgStaticRouteRemPort = _IpmcNewCfgStaticRouteRemPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 20, 3, 1, 17),
    _IpmcNewCfgStaticRouteRemPort_Type()
)
ipmcNewCfgStaticRouteRemPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipmcNewCfgStaticRouteRemPort.setStatus("current")


class _IpmcStaticRouteClearAll_Type(Integer32):
    """Custom type ipmcStaticRouteClearAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_IpmcStaticRouteClearAll_Type.__name__ = "Integer32"
_IpmcStaticRouteClearAll_Object = MibScalar
ipmcStaticRouteClearAll = _IpmcStaticRouteClearAll_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 20, 4),
    _IpmcStaticRouteClearAll_Type()
)
ipmcStaticRouteClearAll.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipmcStaticRouteClearAll.setStatus("current")
_IpStaticNbrCfg_ObjectIdentity = ObjectIdentity
ipStaticNbrCfg = _IpStaticNbrCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 21)
)
_IpStaticNbrTableMaxSize_Type = Integer32
_IpStaticNbrTableMaxSize_Object = MibScalar
ipStaticNbrTableMaxSize = _IpStaticNbrTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 21, 1),
    _IpStaticNbrTableMaxSize_Type()
)
ipStaticNbrTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipStaticNbrTableMaxSize.setStatus("current")
_IpCurCfgStaticNbrTable_Object = MibTable
ipCurCfgStaticNbrTable = _IpCurCfgStaticNbrTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 21, 2)
)
if mibBuilder.loadTexts:
    ipCurCfgStaticNbrTable.setStatus("current")
_IpCurCfgStaticNbrEntry_Object = MibTableRow
ipCurCfgStaticNbrEntry = _IpCurCfgStaticNbrEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 21, 2, 1)
)
ipCurCfgStaticNbrEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipCurCfgStaticNbrIndx"),
)
if mibBuilder.loadTexts:
    ipCurCfgStaticNbrEntry.setStatus("current")
_IpCurCfgStaticNbrIndx_Type = Integer32
_IpCurCfgStaticNbrIndx_Object = MibTableColumn
ipCurCfgStaticNbrIndx = _IpCurCfgStaticNbrIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 21, 2, 1, 1),
    _IpCurCfgStaticNbrIndx_Type()
)
ipCurCfgStaticNbrIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgStaticNbrIndx.setStatus("current")
_IpCurCfgStaticNbrIp_Type = DisplayString
_IpCurCfgStaticNbrIp_Object = MibTableColumn
ipCurCfgStaticNbrIp = _IpCurCfgStaticNbrIp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 21, 2, 1, 2),
    _IpCurCfgStaticNbrIp_Type()
)
ipCurCfgStaticNbrIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgStaticNbrIp.setStatus("current")
_IpCurCfgStaticNbrMAC_Type = DisplayString
_IpCurCfgStaticNbrMAC_Object = MibTableColumn
ipCurCfgStaticNbrMAC = _IpCurCfgStaticNbrMAC_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 21, 2, 1, 3),
    _IpCurCfgStaticNbrMAC_Type()
)
ipCurCfgStaticNbrMAC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgStaticNbrMAC.setStatus("current")
_IpCurCfgStaticNbrVlan_Type = Integer32
_IpCurCfgStaticNbrVlan_Object = MibTableColumn
ipCurCfgStaticNbrVlan = _IpCurCfgStaticNbrVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 21, 2, 1, 4),
    _IpCurCfgStaticNbrVlan_Type()
)
ipCurCfgStaticNbrVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgStaticNbrVlan.setStatus("current")
_IpCurCfgStaticNbrPort_Type = PortNumber
_IpCurCfgStaticNbrPort_Object = MibTableColumn
ipCurCfgStaticNbrPort = _IpCurCfgStaticNbrPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 21, 2, 1, 5),
    _IpCurCfgStaticNbrPort_Type()
)
ipCurCfgStaticNbrPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgStaticNbrPort.setStatus("current")
_IpNewCfgStaticNbrTable_Object = MibTable
ipNewCfgStaticNbrTable = _IpNewCfgStaticNbrTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 21, 3)
)
if mibBuilder.loadTexts:
    ipNewCfgStaticNbrTable.setStatus("current")
_IpNewCfgStaticNbrEntry_Object = MibTableRow
ipNewCfgStaticNbrEntry = _IpNewCfgStaticNbrEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 21, 3, 1)
)
ipNewCfgStaticNbrEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipNewCfgStaticNbrIndx"),
)
if mibBuilder.loadTexts:
    ipNewCfgStaticNbrEntry.setStatus("current")
_IpNewCfgStaticNbrIndx_Type = Integer32
_IpNewCfgStaticNbrIndx_Object = MibTableColumn
ipNewCfgStaticNbrIndx = _IpNewCfgStaticNbrIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 21, 3, 1, 1),
    _IpNewCfgStaticNbrIndx_Type()
)
ipNewCfgStaticNbrIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipNewCfgStaticNbrIndx.setStatus("current")


class _IpNewCfgStaticNbrIp_Type(DisplayString):
    """Custom type ipNewCfgStaticNbrIp based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_IpNewCfgStaticNbrIp_Type.__name__ = "DisplayString"
_IpNewCfgStaticNbrIp_Object = MibTableColumn
ipNewCfgStaticNbrIp = _IpNewCfgStaticNbrIp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 21, 3, 1, 2),
    _IpNewCfgStaticNbrIp_Type()
)
ipNewCfgStaticNbrIp.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgStaticNbrIp.setStatus("current")
_IpNewCfgStaticNbrMAC_Type = DisplayString
_IpNewCfgStaticNbrMAC_Object = MibTableColumn
ipNewCfgStaticNbrMAC = _IpNewCfgStaticNbrMAC_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 21, 3, 1, 3),
    _IpNewCfgStaticNbrMAC_Type()
)
ipNewCfgStaticNbrMAC.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgStaticNbrMAC.setStatus("current")
_IpNewCfgStaticNbrVlan_Type = Integer32
_IpNewCfgStaticNbrVlan_Object = MibTableColumn
ipNewCfgStaticNbrVlan = _IpNewCfgStaticNbrVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 21, 3, 1, 4),
    _IpNewCfgStaticNbrVlan_Type()
)
ipNewCfgStaticNbrVlan.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgStaticNbrVlan.setStatus("current")
_IpNewCfgStaticNbrPort_Type = PortNumber
_IpNewCfgStaticNbrPort_Object = MibTableColumn
ipNewCfgStaticNbrPort = _IpNewCfgStaticNbrPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 21, 3, 1, 5),
    _IpNewCfgStaticNbrPort_Type()
)
ipNewCfgStaticNbrPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgStaticNbrPort.setStatus("current")


class _IpNewCfgStaticNbrAction_Type(Integer32):
    """Custom type ipNewCfgStaticNbrAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_IpNewCfgStaticNbrAction_Type.__name__ = "Integer32"
_IpNewCfgStaticNbrAction_Object = MibTableColumn
ipNewCfgStaticNbrAction = _IpNewCfgStaticNbrAction_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 21, 3, 1, 6),
    _IpNewCfgStaticNbrAction_Type()
)
ipNewCfgStaticNbrAction.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgStaticNbrAction.setStatus("current")


class _IpStaticNbrClearAll_Type(Integer32):
    """Custom type ipStaticNbrClearAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_IpStaticNbrClearAll_Type.__name__ = "Integer32"
_IpStaticNbrClearAll_Object = MibScalar
ipStaticNbrClearAll = _IpStaticNbrClearAll_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 21, 4),
    _IpStaticNbrClearAll_Type()
)
ipStaticNbrClearAll.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipStaticNbrClearAll.setStatus("current")
_IpGatewayIpv6Cfg_ObjectIdentity = ObjectIdentity
ipGatewayIpv6Cfg = _IpGatewayIpv6Cfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 22)
)
_IpGatewayIpv6TableMax_Type = Integer32
_IpGatewayIpv6TableMax_Object = MibScalar
ipGatewayIpv6TableMax = _IpGatewayIpv6TableMax_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 22, 1),
    _IpGatewayIpv6TableMax_Type()
)
ipGatewayIpv6TableMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipGatewayIpv6TableMax.setStatus("current")
_IpCurCfgGwIpv6Table_Object = MibTable
ipCurCfgGwIpv6Table = _IpCurCfgGwIpv6Table_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 22, 2)
)
if mibBuilder.loadTexts:
    ipCurCfgGwIpv6Table.setStatus("current")
_IpCurCfgGwIpv6Entry_Object = MibTableRow
ipCurCfgGwIpv6Entry = _IpCurCfgGwIpv6Entry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 22, 2, 1)
)
ipCurCfgGwIpv6Entry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipCurCfgGwIpv6Index"),
)
if mibBuilder.loadTexts:
    ipCurCfgGwIpv6Entry.setStatus("current")
_IpCurCfgGwIpv6Index_Type = Integer32
_IpCurCfgGwIpv6Index_Object = MibTableColumn
ipCurCfgGwIpv6Index = _IpCurCfgGwIpv6Index_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 22, 2, 1, 1),
    _IpCurCfgGwIpv6Index_Type()
)
ipCurCfgGwIpv6Index.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgGwIpv6Index.setStatus("current")


class _IpCurCfgGwIpv6Addr_Type(DisplayString):
    """Custom type ipCurCfgGwIpv6Addr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_IpCurCfgGwIpv6Addr_Type.__name__ = "DisplayString"
_IpCurCfgGwIpv6Addr_Object = MibTableColumn
ipCurCfgGwIpv6Addr = _IpCurCfgGwIpv6Addr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 22, 2, 1, 2),
    _IpCurCfgGwIpv6Addr_Type()
)
ipCurCfgGwIpv6Addr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgGwIpv6Addr.setStatus("current")


class _IpCurCfgGwIpv6State_Type(Integer32):
    """Custom type ipCurCfgGwIpv6State based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_IpCurCfgGwIpv6State_Type.__name__ = "Integer32"
_IpCurCfgGwIpv6State_Object = MibTableColumn
ipCurCfgGwIpv6State = _IpCurCfgGwIpv6State_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 22, 2, 1, 3),
    _IpCurCfgGwIpv6State_Type()
)
ipCurCfgGwIpv6State.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgGwIpv6State.setStatus("current")
_IpNewCfgGwIpv6Table_Object = MibTable
ipNewCfgGwIpv6Table = _IpNewCfgGwIpv6Table_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 22, 3)
)
if mibBuilder.loadTexts:
    ipNewCfgGwIpv6Table.setStatus("current")
_IpNewCfgGwIpv6Entry_Object = MibTableRow
ipNewCfgGwIpv6Entry = _IpNewCfgGwIpv6Entry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 22, 3, 1)
)
ipNewCfgGwIpv6Entry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipNewCfgGwIpv6Index"),
)
if mibBuilder.loadTexts:
    ipNewCfgGwIpv6Entry.setStatus("current")
_IpNewCfgGwIpv6Index_Type = Integer32
_IpNewCfgGwIpv6Index_Object = MibTableColumn
ipNewCfgGwIpv6Index = _IpNewCfgGwIpv6Index_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 22, 3, 1, 1),
    _IpNewCfgGwIpv6Index_Type()
)
ipNewCfgGwIpv6Index.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipNewCfgGwIpv6Index.setStatus("current")


class _IpNewCfgGwIpv6Addr_Type(DisplayString):
    """Custom type ipNewCfgGwIpv6Addr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_IpNewCfgGwIpv6Addr_Type.__name__ = "DisplayString"
_IpNewCfgGwIpv6Addr_Object = MibTableColumn
ipNewCfgGwIpv6Addr = _IpNewCfgGwIpv6Addr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 22, 3, 1, 2),
    _IpNewCfgGwIpv6Addr_Type()
)
ipNewCfgGwIpv6Addr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgGwIpv6Addr.setStatus("current")


class _IpNewCfgGwIpv6State_Type(Integer32):
    """Custom type ipNewCfgGwIpv6State based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_IpNewCfgGwIpv6State_Type.__name__ = "Integer32"
_IpNewCfgGwIpv6State_Object = MibTableColumn
ipNewCfgGwIpv6State = _IpNewCfgGwIpv6State_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 22, 3, 1, 3),
    _IpNewCfgGwIpv6State_Type()
)
ipNewCfgGwIpv6State.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgGwIpv6State.setStatus("current")


class _IpNewCfgGwIpv6Delete_Type(Integer32):
    """Custom type ipNewCfgGwIpv6Delete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_IpNewCfgGwIpv6Delete_Type.__name__ = "Integer32"
_IpNewCfgGwIpv6Delete_Object = MibTableColumn
ipNewCfgGwIpv6Delete = _IpNewCfgGwIpv6Delete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 22, 3, 1, 4),
    _IpNewCfgGwIpv6Delete_Type()
)
ipNewCfgGwIpv6Delete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgGwIpv6Delete.setStatus("current")
_IpStaticRoute6Cfg_ObjectIdentity = ObjectIdentity
ipStaticRoute6Cfg = _IpStaticRoute6Cfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 23)
)
_IpStaticRoute6TableMaxSize_Type = Integer32
_IpStaticRoute6TableMaxSize_Object = MibScalar
ipStaticRoute6TableMaxSize = _IpStaticRoute6TableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 23, 1),
    _IpStaticRoute6TableMaxSize_Type()
)
ipStaticRoute6TableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipStaticRoute6TableMaxSize.setStatus("current")
_IpCurCfgStaticRoute6Table_Object = MibTable
ipCurCfgStaticRoute6Table = _IpCurCfgStaticRoute6Table_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 23, 2)
)
if mibBuilder.loadTexts:
    ipCurCfgStaticRoute6Table.setStatus("current")
_IpCurCfgStaticRoute6Entry_Object = MibTableRow
ipCurCfgStaticRoute6Entry = _IpCurCfgStaticRoute6Entry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 23, 2, 1)
)
ipCurCfgStaticRoute6Entry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipCurCfgStaticRoute6Indx"),
)
if mibBuilder.loadTexts:
    ipCurCfgStaticRoute6Entry.setStatus("current")
_IpCurCfgStaticRoute6Indx_Type = Integer32
_IpCurCfgStaticRoute6Indx_Object = MibTableColumn
ipCurCfgStaticRoute6Indx = _IpCurCfgStaticRoute6Indx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 23, 2, 1, 1),
    _IpCurCfgStaticRoute6Indx_Type()
)
ipCurCfgStaticRoute6Indx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgStaticRoute6Indx.setStatus("current")
_IpCurCfgStaticRoute6DestIp_Type = DisplayString
_IpCurCfgStaticRoute6DestIp_Object = MibTableColumn
ipCurCfgStaticRoute6DestIp = _IpCurCfgStaticRoute6DestIp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 23, 2, 1, 2),
    _IpCurCfgStaticRoute6DestIp_Type()
)
ipCurCfgStaticRoute6DestIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgStaticRoute6DestIp.setStatus("current")


class _IpCurCfgStaticRoute6Mask_Type(Integer32):
    """Custom type ipCurCfgStaticRoute6Mask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_IpCurCfgStaticRoute6Mask_Type.__name__ = "Integer32"
_IpCurCfgStaticRoute6Mask_Object = MibTableColumn
ipCurCfgStaticRoute6Mask = _IpCurCfgStaticRoute6Mask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 23, 2, 1, 3),
    _IpCurCfgStaticRoute6Mask_Type()
)
ipCurCfgStaticRoute6Mask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgStaticRoute6Mask.setStatus("current")
_IpCurCfgStaticRoute6Gateway_Type = DisplayString
_IpCurCfgStaticRoute6Gateway_Object = MibTableColumn
ipCurCfgStaticRoute6Gateway = _IpCurCfgStaticRoute6Gateway_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 23, 2, 1, 4),
    _IpCurCfgStaticRoute6Gateway_Type()
)
ipCurCfgStaticRoute6Gateway.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgStaticRoute6Gateway.setStatus("current")
_IpCurCfgStaticRoute6Interface_Type = Integer32
_IpCurCfgStaticRoute6Interface_Object = MibTableColumn
ipCurCfgStaticRoute6Interface = _IpCurCfgStaticRoute6Interface_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 23, 2, 1, 5),
    _IpCurCfgStaticRoute6Interface_Type()
)
ipCurCfgStaticRoute6Interface.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgStaticRoute6Interface.setStatus("current")
_IpNewCfgStaticRoute6Table_Object = MibTable
ipNewCfgStaticRoute6Table = _IpNewCfgStaticRoute6Table_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 23, 3)
)
if mibBuilder.loadTexts:
    ipNewCfgStaticRoute6Table.setStatus("current")
_IpNewCfgStaticRoute6Entry_Object = MibTableRow
ipNewCfgStaticRoute6Entry = _IpNewCfgStaticRoute6Entry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 23, 3, 1)
)
ipNewCfgStaticRoute6Entry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipNewCfgStaticRoute6Indx"),
)
if mibBuilder.loadTexts:
    ipNewCfgStaticRoute6Entry.setStatus("current")
_IpNewCfgStaticRoute6Indx_Type = Integer32
_IpNewCfgStaticRoute6Indx_Object = MibTableColumn
ipNewCfgStaticRoute6Indx = _IpNewCfgStaticRoute6Indx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 23, 3, 1, 1),
    _IpNewCfgStaticRoute6Indx_Type()
)
ipNewCfgStaticRoute6Indx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipNewCfgStaticRoute6Indx.setStatus("current")


class _IpNewCfgStaticRoute6DestIp_Type(DisplayString):
    """Custom type ipNewCfgStaticRoute6DestIp based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_IpNewCfgStaticRoute6DestIp_Type.__name__ = "DisplayString"
_IpNewCfgStaticRoute6DestIp_Object = MibTableColumn
ipNewCfgStaticRoute6DestIp = _IpNewCfgStaticRoute6DestIp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 23, 3, 1, 2),
    _IpNewCfgStaticRoute6DestIp_Type()
)
ipNewCfgStaticRoute6DestIp.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgStaticRoute6DestIp.setStatus("current")


class _IpNewCfgStaticRoute6Mask_Type(Integer32):
    """Custom type ipNewCfgStaticRoute6Mask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_IpNewCfgStaticRoute6Mask_Type.__name__ = "Integer32"
_IpNewCfgStaticRoute6Mask_Object = MibTableColumn
ipNewCfgStaticRoute6Mask = _IpNewCfgStaticRoute6Mask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 23, 3, 1, 3),
    _IpNewCfgStaticRoute6Mask_Type()
)
ipNewCfgStaticRoute6Mask.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgStaticRoute6Mask.setStatus("current")


class _IpNewCfgStaticRoute6Gateway_Type(DisplayString):
    """Custom type ipNewCfgStaticRoute6Gateway based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_IpNewCfgStaticRoute6Gateway_Type.__name__ = "DisplayString"
_IpNewCfgStaticRoute6Gateway_Object = MibTableColumn
ipNewCfgStaticRoute6Gateway = _IpNewCfgStaticRoute6Gateway_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 23, 3, 1, 4),
    _IpNewCfgStaticRoute6Gateway_Type()
)
ipNewCfgStaticRoute6Gateway.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgStaticRoute6Gateway.setStatus("current")


class _IpNewCfgStaticRoute6Action_Type(Integer32):
    """Custom type ipNewCfgStaticRoute6Action based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_IpNewCfgStaticRoute6Action_Type.__name__ = "Integer32"
_IpNewCfgStaticRoute6Action_Object = MibTableColumn
ipNewCfgStaticRoute6Action = _IpNewCfgStaticRoute6Action_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 23, 3, 1, 5),
    _IpNewCfgStaticRoute6Action_Type()
)
ipNewCfgStaticRoute6Action.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgStaticRoute6Action.setStatus("current")
_IpNewCfgStaticRoute6Interface_Type = Integer32
_IpNewCfgStaticRoute6Interface_Object = MibTableColumn
ipNewCfgStaticRoute6Interface = _IpNewCfgStaticRoute6Interface_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 23, 3, 1, 6),
    _IpNewCfgStaticRoute6Interface_Type()
)
ipNewCfgStaticRoute6Interface.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgStaticRoute6Interface.setStatus("current")
_IpStaticRoute6ClearAllByDestIp_Type = DisplayString
_IpStaticRoute6ClearAllByDestIp_Object = MibScalar
ipStaticRoute6ClearAllByDestIp = _IpStaticRoute6ClearAllByDestIp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 23, 4),
    _IpStaticRoute6ClearAllByDestIp_Type()
)
ipStaticRoute6ClearAllByDestIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipStaticRoute6ClearAllByDestIp.setStatus("current")
_IpStaticRoute6ClearAllByGatewayIp_Type = DisplayString
_IpStaticRoute6ClearAllByGatewayIp_Object = MibScalar
ipStaticRoute6ClearAllByGatewayIp = _IpStaticRoute6ClearAllByGatewayIp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 23, 5),
    _IpStaticRoute6ClearAllByGatewayIp_Type()
)
ipStaticRoute6ClearAllByGatewayIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipStaticRoute6ClearAllByGatewayIp.setStatus("current")
_IpStaticRoute6ClearAllByInterface_Type = Integer32
_IpStaticRoute6ClearAllByInterface_Object = MibScalar
ipStaticRoute6ClearAllByInterface = _IpStaticRoute6ClearAllByInterface_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 23, 6),
    _IpStaticRoute6ClearAllByInterface_Type()
)
ipStaticRoute6ClearAllByInterface.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipStaticRoute6ClearAllByInterface.setStatus("current")


class _IpStaticRoute6ClearAll_Type(Integer32):
    """Custom type ipStaticRoute6ClearAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_IpStaticRoute6ClearAll_Type.__name__ = "Integer32"
_IpStaticRoute6ClearAll_Object = MibScalar
ipStaticRoute6ClearAll = _IpStaticRoute6ClearAll_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 23, 7),
    _IpStaticRoute6ClearAll_Type()
)
ipStaticRoute6ClearAll.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipStaticRoute6ClearAll.setStatus("current")
_IpInterfaceLoopbackCfg_ObjectIdentity = ObjectIdentity
ipInterfaceLoopbackCfg = _IpInterfaceLoopbackCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 24)
)
_IpInterfaceLoopbackTableMax_Type = Integer32
_IpInterfaceLoopbackTableMax_Object = MibScalar
ipInterfaceLoopbackTableMax = _IpInterfaceLoopbackTableMax_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 24, 1),
    _IpInterfaceLoopbackTableMax_Type()
)
ipInterfaceLoopbackTableMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInterfaceLoopbackTableMax.setStatus("current")
_IpCurCfgIntfLoopbackTable_Object = MibTable
ipCurCfgIntfLoopbackTable = _IpCurCfgIntfLoopbackTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 24, 2)
)
if mibBuilder.loadTexts:
    ipCurCfgIntfLoopbackTable.setStatus("current")
_IpCurCfgIntfLoopbackEntry_Object = MibTableRow
ipCurCfgIntfLoopbackEntry = _IpCurCfgIntfLoopbackEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 24, 2, 1)
)
ipCurCfgIntfLoopbackEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipCurCfgIntfLoopbackIndex"),
)
if mibBuilder.loadTexts:
    ipCurCfgIntfLoopbackEntry.setStatus("current")
_IpCurCfgIntfLoopbackIndex_Type = Integer32
_IpCurCfgIntfLoopbackIndex_Object = MibTableColumn
ipCurCfgIntfLoopbackIndex = _IpCurCfgIntfLoopbackIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 24, 2, 1, 1),
    _IpCurCfgIntfLoopbackIndex_Type()
)
ipCurCfgIntfLoopbackIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgIntfLoopbackIndex.setStatus("current")
_IpCurCfgIntfLoopbackAddr_Type = IpAddress
_IpCurCfgIntfLoopbackAddr_Object = MibTableColumn
ipCurCfgIntfLoopbackAddr = _IpCurCfgIntfLoopbackAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 24, 2, 1, 2),
    _IpCurCfgIntfLoopbackAddr_Type()
)
ipCurCfgIntfLoopbackAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgIntfLoopbackAddr.setStatus("current")
_IpCurCfgIntfLoopbackMask_Type = IpAddress
_IpCurCfgIntfLoopbackMask_Object = MibTableColumn
ipCurCfgIntfLoopbackMask = _IpCurCfgIntfLoopbackMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 24, 2, 1, 3),
    _IpCurCfgIntfLoopbackMask_Type()
)
ipCurCfgIntfLoopbackMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgIntfLoopbackMask.setStatus("current")
_IpCurCfgIntfLoopbackBroadcast_Type = IpAddress
_IpCurCfgIntfLoopbackBroadcast_Object = MibTableColumn
ipCurCfgIntfLoopbackBroadcast = _IpCurCfgIntfLoopbackBroadcast_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 24, 2, 1, 4),
    _IpCurCfgIntfLoopbackBroadcast_Type()
)
ipCurCfgIntfLoopbackBroadcast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgIntfLoopbackBroadcast.setStatus("current")


class _IpCurCfgIntfLoopbackState_Type(Integer32):
    """Custom type ipCurCfgIntfLoopbackState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_IpCurCfgIntfLoopbackState_Type.__name__ = "Integer32"
_IpCurCfgIntfLoopbackState_Object = MibTableColumn
ipCurCfgIntfLoopbackState = _IpCurCfgIntfLoopbackState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 24, 2, 1, 6),
    _IpCurCfgIntfLoopbackState_Type()
)
ipCurCfgIntfLoopbackState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgIntfLoopbackState.setStatus("current")
_IpNewCfgIntfLoopbackTable_Object = MibTable
ipNewCfgIntfLoopbackTable = _IpNewCfgIntfLoopbackTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 24, 3)
)
if mibBuilder.loadTexts:
    ipNewCfgIntfLoopbackTable.setStatus("current")
_IpNewCfgIntfLoopbackEntry_Object = MibTableRow
ipNewCfgIntfLoopbackEntry = _IpNewCfgIntfLoopbackEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 24, 3, 1)
)
ipNewCfgIntfLoopbackEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipNewCfgIntfLoopbackIndex"),
)
if mibBuilder.loadTexts:
    ipNewCfgIntfLoopbackEntry.setStatus("current")
_IpNewCfgIntfLoopbackIndex_Type = Integer32
_IpNewCfgIntfLoopbackIndex_Object = MibTableColumn
ipNewCfgIntfLoopbackIndex = _IpNewCfgIntfLoopbackIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 24, 3, 1, 1),
    _IpNewCfgIntfLoopbackIndex_Type()
)
ipNewCfgIntfLoopbackIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipNewCfgIntfLoopbackIndex.setStatus("current")
_IpNewCfgIntfLoopbackAddr_Type = IpAddress
_IpNewCfgIntfLoopbackAddr_Object = MibTableColumn
ipNewCfgIntfLoopbackAddr = _IpNewCfgIntfLoopbackAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 24, 3, 1, 2),
    _IpNewCfgIntfLoopbackAddr_Type()
)
ipNewCfgIntfLoopbackAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgIntfLoopbackAddr.setStatus("current")
_IpNewCfgIntfLoopbackMask_Type = IpAddress
_IpNewCfgIntfLoopbackMask_Object = MibTableColumn
ipNewCfgIntfLoopbackMask = _IpNewCfgIntfLoopbackMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 24, 3, 1, 3),
    _IpNewCfgIntfLoopbackMask_Type()
)
ipNewCfgIntfLoopbackMask.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgIntfLoopbackMask.setStatus("current")


class _IpNewCfgIntfLoopbackState_Type(Integer32):
    """Custom type ipNewCfgIntfLoopbackState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_IpNewCfgIntfLoopbackState_Type.__name__ = "Integer32"
_IpNewCfgIntfLoopbackState_Object = MibTableColumn
ipNewCfgIntfLoopbackState = _IpNewCfgIntfLoopbackState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 24, 3, 1, 6),
    _IpNewCfgIntfLoopbackState_Type()
)
ipNewCfgIntfLoopbackState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgIntfLoopbackState.setStatus("current")


class _IpNewCfgIntfLoopbackDelete_Type(Integer32):
    """Custom type ipNewCfgIntfLoopbackDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_IpNewCfgIntfLoopbackDelete_Type.__name__ = "Integer32"
_IpNewCfgIntfLoopbackDelete_Object = MibTableColumn
ipNewCfgIntfLoopbackDelete = _IpNewCfgIntfLoopbackDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 24, 3, 1, 7),
    _IpNewCfgIntfLoopbackDelete_Type()
)
ipNewCfgIntfLoopbackDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgIntfLoopbackDelete.setStatus("current")
_Ospf3Cfg_ObjectIdentity = ObjectIdentity
ospf3Cfg = _Ospf3Cfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26)
)
_Ospf3General_ObjectIdentity = ObjectIdentity
ospf3General = _Ospf3General_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 1)
)
_Ospf3IntfTableMaxSize_Type = Integer32
_Ospf3IntfTableMaxSize_Object = MibScalar
ospf3IntfTableMaxSize = _Ospf3IntfTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 1, 1),
    _Ospf3IntfTableMaxSize_Type()
)
ospf3IntfTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfTableMaxSize.setStatus("current")
_Ospf3AreaTableMaxSize_Type = Integer32
_Ospf3AreaTableMaxSize_Object = MibScalar
ospf3AreaTableMaxSize = _Ospf3AreaTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 1, 2),
    _Ospf3AreaTableMaxSize_Type()
)
ospf3AreaTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaTableMaxSize.setStatus("current")
_Ospf3RangeTableMaxSize_Type = Integer32
_Ospf3RangeTableMaxSize_Object = MibScalar
ospf3RangeTableMaxSize = _Ospf3RangeTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 1, 3),
    _Ospf3RangeTableMaxSize_Type()
)
ospf3RangeTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3RangeTableMaxSize.setStatus("current")
_Ospf3ExtRangeTableMaxSize_Type = Integer32
_Ospf3ExtRangeTableMaxSize_Object = MibScalar
ospf3ExtRangeTableMaxSize = _Ospf3ExtRangeTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 1, 4),
    _Ospf3ExtRangeTableMaxSize_Type()
)
ospf3ExtRangeTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3ExtRangeTableMaxSize.setStatus("current")
_Ospf3RedistTableMaxSize_Type = Integer32
_Ospf3RedistTableMaxSize_Object = MibScalar
ospf3RedistTableMaxSize = _Ospf3RedistTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 1, 5),
    _Ospf3RedistTableMaxSize_Type()
)
ospf3RedistTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3RedistTableMaxSize.setStatus("current")
_Ospf3VirtIntfTableMaxSize_Type = Integer32
_Ospf3VirtIntfTableMaxSize_Object = MibScalar
ospf3VirtIntfTableMaxSize = _Ospf3VirtIntfTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 1, 6),
    _Ospf3VirtIntfTableMaxSize_Type()
)
ospf3VirtIntfTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3VirtIntfTableMaxSize.setStatus("current")
_Ospf3HostTableMaxSize_Type = Integer32
_Ospf3HostTableMaxSize_Object = MibScalar
ospf3HostTableMaxSize = _Ospf3HostTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 1, 7),
    _Ospf3HostTableMaxSize_Type()
)
ospf3HostTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3HostTableMaxSize.setStatus("current")
_Ospf3NbrTableMaxSize_Type = Integer32
_Ospf3NbrTableMaxSize_Object = MibScalar
ospf3NbrTableMaxSize = _Ospf3NbrTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 1, 8),
    _Ospf3NbrTableMaxSize_Type()
)
ospf3NbrTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3NbrTableMaxSize.setStatus("current")


class _Ospf3CurCfgState_Type(Integer32):
    """Custom type ospf3CurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_Ospf3CurCfgState_Type.__name__ = "Integer32"
_Ospf3CurCfgState_Object = MibScalar
ospf3CurCfgState = _Ospf3CurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 1, 9),
    _Ospf3CurCfgState_Type()
)
ospf3CurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgState.setStatus("current")


class _Ospf3NewCfgState_Type(Integer32):
    """Custom type ospf3NewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_Ospf3NewCfgState_Type.__name__ = "Integer32"
_Ospf3NewCfgState_Object = MibScalar
ospf3NewCfgState = _Ospf3NewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 1, 10),
    _Ospf3NewCfgState_Type()
)
ospf3NewCfgState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospf3NewCfgState.setStatus("current")
_Ospf3CurCfgRouterId_Type = IpAddress
_Ospf3CurCfgRouterId_Object = MibScalar
ospf3CurCfgRouterId = _Ospf3CurCfgRouterId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 1, 11),
    _Ospf3CurCfgRouterId_Type()
)
ospf3CurCfgRouterId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgRouterId.setStatus("current")
_Ospf3NewCfgRouterId_Type = IpAddress
_Ospf3NewCfgRouterId_Object = MibScalar
ospf3NewCfgRouterId = _Ospf3NewCfgRouterId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 1, 12),
    _Ospf3NewCfgRouterId_Type()
)
ospf3NewCfgRouterId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgRouterId.setStatus("current")


class _Ospf3CurCfgAbrType_Type(Integer32):
    """Custom type ospf3CurCfgAbrType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("standard", 1),
          ("cisco", 2),
          ("ibm", 3))
    )


_Ospf3CurCfgAbrType_Type.__name__ = "Integer32"
_Ospf3CurCfgAbrType_Object = MibScalar
ospf3CurCfgAbrType = _Ospf3CurCfgAbrType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 1, 13),
    _Ospf3CurCfgAbrType_Type()
)
ospf3CurCfgAbrType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgAbrType.setStatus("current")


class _Ospf3NewCfgAbrType_Type(Integer32):
    """Custom type ospf3NewCfgAbrType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("standard", 1),
          ("cisco", 2),
          ("ibm", 3))
    )


_Ospf3NewCfgAbrType_Type.__name__ = "Integer32"
_Ospf3NewCfgAbrType_Object = MibScalar
ospf3NewCfgAbrType = _Ospf3NewCfgAbrType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 1, 14),
    _Ospf3NewCfgAbrType_Type()
)
ospf3NewCfgAbrType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospf3NewCfgAbrType.setStatus("current")


class _Ospf3CurCfgLSDB_Type(Integer32):
    """Custom type ospf3CurCfgLSDB based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, 2147483647),
    )


_Ospf3CurCfgLSDB_Type.__name__ = "Integer32"
_Ospf3CurCfgLSDB_Object = MibScalar
ospf3CurCfgLSDB = _Ospf3CurCfgLSDB_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 1, 15),
    _Ospf3CurCfgLSDB_Type()
)
ospf3CurCfgLSDB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgLSDB.setStatus("current")


class _Ospf3NewCfgLSDB_Type(Integer32):
    """Custom type ospf3NewCfgLSDB based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, 2147483647),
    )


_Ospf3NewCfgLSDB_Type.__name__ = "Integer32"
_Ospf3NewCfgLSDB_Object = MibScalar
ospf3NewCfgLSDB = _Ospf3NewCfgLSDB_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 1, 16),
    _Ospf3NewCfgLSDB_Type()
)
ospf3NewCfgLSDB.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospf3NewCfgLSDB.setStatus("current")


class _Ospf3CurCfgExitOverflow_Type(Unsigned32):
    """Custom type ospf3CurCfgExitOverflow based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_Ospf3CurCfgExitOverflow_Type.__name__ = "Unsigned32"
_Ospf3CurCfgExitOverflow_Object = MibScalar
ospf3CurCfgExitOverflow = _Ospf3CurCfgExitOverflow_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 1, 17),
    _Ospf3CurCfgExitOverflow_Type()
)
ospf3CurCfgExitOverflow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgExitOverflow.setStatus("current")


class _Ospf3NewCfgExitOverflow_Type(Unsigned32):
    """Custom type ospf3NewCfgExitOverflow based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_Ospf3NewCfgExitOverflow_Type.__name__ = "Unsigned32"
_Ospf3NewCfgExitOverflow_Object = MibScalar
ospf3NewCfgExitOverflow = _Ospf3NewCfgExitOverflow_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 1, 18),
    _Ospf3NewCfgExitOverflow_Type()
)
ospf3NewCfgExitOverflow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospf3NewCfgExitOverflow.setStatus("current")


class _Ospf3CurCfgReferenceBw_Type(Unsigned32):
    """Custom type ospf3CurCfgReferenceBw based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_Ospf3CurCfgReferenceBw_Type.__name__ = "Unsigned32"
_Ospf3CurCfgReferenceBw_Object = MibScalar
ospf3CurCfgReferenceBw = _Ospf3CurCfgReferenceBw_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 1, 19),
    _Ospf3CurCfgReferenceBw_Type()
)
ospf3CurCfgReferenceBw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgReferenceBw.setStatus("current")


class _Ospf3NewCfgReferenceBw_Type(Unsigned32):
    """Custom type ospf3NewCfgReferenceBw based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_Ospf3NewCfgReferenceBw_Type.__name__ = "Unsigned32"
_Ospf3NewCfgReferenceBw_Object = MibScalar
ospf3NewCfgReferenceBw = _Ospf3NewCfgReferenceBw_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 1, 20),
    _Ospf3NewCfgReferenceBw_Type()
)
ospf3NewCfgReferenceBw.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospf3NewCfgReferenceBw.setStatus("current")


class _Ospf3CurCfgSpfDelay_Type(Integer32):
    """Custom type ospf3CurCfgSpfDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_Ospf3CurCfgSpfDelay_Type.__name__ = "Integer32"
_Ospf3CurCfgSpfDelay_Object = MibScalar
ospf3CurCfgSpfDelay = _Ospf3CurCfgSpfDelay_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 1, 21),
    _Ospf3CurCfgSpfDelay_Type()
)
ospf3CurCfgSpfDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgSpfDelay.setStatus("current")


class _Ospf3NewCfgSpfDelay_Type(Integer32):
    """Custom type ospf3NewCfgSpfDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_Ospf3NewCfgSpfDelay_Type.__name__ = "Integer32"
_Ospf3NewCfgSpfDelay_Object = MibScalar
ospf3NewCfgSpfDelay = _Ospf3NewCfgSpfDelay_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 1, 22),
    _Ospf3NewCfgSpfDelay_Type()
)
ospf3NewCfgSpfDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospf3NewCfgSpfDelay.setStatus("current")


class _Ospf3CurCfgSpfHold_Type(Integer32):
    """Custom type ospf3CurCfgSpfHold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_Ospf3CurCfgSpfHold_Type.__name__ = "Integer32"
_Ospf3CurCfgSpfHold_Object = MibScalar
ospf3CurCfgSpfHold = _Ospf3CurCfgSpfHold_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 1, 23),
    _Ospf3CurCfgSpfHold_Type()
)
ospf3CurCfgSpfHold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgSpfHold.setStatus("current")


class _Ospf3NewCfgSpfHold_Type(Integer32):
    """Custom type ospf3NewCfgSpfHold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_Ospf3NewCfgSpfHold_Type.__name__ = "Integer32"
_Ospf3NewCfgSpfHold_Object = MibScalar
ospf3NewCfgSpfHold = _Ospf3NewCfgSpfHold_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 1, 24),
    _Ospf3NewCfgSpfHold_Type()
)
ospf3NewCfgSpfHold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospf3NewCfgSpfHold.setStatus("current")


class _Ospf3CurCfgNssaAsbrDfRtTrans_Type(Integer32):
    """Custom type ospf3CurCfgNssaAsbrDfRtTrans based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_Ospf3CurCfgNssaAsbrDfRtTrans_Type.__name__ = "Integer32"
_Ospf3CurCfgNssaAsbrDfRtTrans_Object = MibScalar
ospf3CurCfgNssaAsbrDfRtTrans = _Ospf3CurCfgNssaAsbrDfRtTrans_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 1, 29),
    _Ospf3CurCfgNssaAsbrDfRtTrans_Type()
)
ospf3CurCfgNssaAsbrDfRtTrans.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgNssaAsbrDfRtTrans.setStatus("current")


class _Ospf3NewCfgNssaAsbrDfRtTrans_Type(Integer32):
    """Custom type ospf3NewCfgNssaAsbrDfRtTrans based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_Ospf3NewCfgNssaAsbrDfRtTrans_Type.__name__ = "Integer32"
_Ospf3NewCfgNssaAsbrDfRtTrans_Object = MibScalar
ospf3NewCfgNssaAsbrDfRtTrans = _Ospf3NewCfgNssaAsbrDfRtTrans_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 1, 30),
    _Ospf3NewCfgNssaAsbrDfRtTrans_Type()
)
ospf3NewCfgNssaAsbrDfRtTrans.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospf3NewCfgNssaAsbrDfRtTrans.setStatus("current")
_Ospf3CurCfgAreaTable_Object = MibTable
ospf3CurCfgAreaTable = _Ospf3CurCfgAreaTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 2)
)
if mibBuilder.loadTexts:
    ospf3CurCfgAreaTable.setStatus("current")
_Ospf3CurCfgAreaEntry_Object = MibTableRow
ospf3CurCfgAreaEntry = _Ospf3CurCfgAreaEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 2, 1)
)
ospf3CurCfgAreaEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospf3CurCfgAreaIndex"),
)
if mibBuilder.loadTexts:
    ospf3CurCfgAreaEntry.setStatus("current")
_Ospf3CurCfgAreaIndex_Type = Integer32
_Ospf3CurCfgAreaIndex_Object = MibTableColumn
ospf3CurCfgAreaIndex = _Ospf3CurCfgAreaIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 2, 1, 1),
    _Ospf3CurCfgAreaIndex_Type()
)
ospf3CurCfgAreaIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgAreaIndex.setStatus("current")
_Ospf3CurCfgAreaId_Type = IpAddress
_Ospf3CurCfgAreaId_Object = MibTableColumn
ospf3CurCfgAreaId = _Ospf3CurCfgAreaId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 2, 1, 2),
    _Ospf3CurCfgAreaId_Type()
)
ospf3CurCfgAreaId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgAreaId.setStatus("current")


class _Ospf3CurCfgAreaStbInterval_Type(Integer32):
    """Custom type ospf3CurCfgAreaStbInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_Ospf3CurCfgAreaStbInterval_Type.__name__ = "Integer32"
_Ospf3CurCfgAreaStbInterval_Object = MibTableColumn
ospf3CurCfgAreaStbInterval = _Ospf3CurCfgAreaStbInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 2, 1, 3),
    _Ospf3CurCfgAreaStbInterval_Type()
)
ospf3CurCfgAreaStbInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgAreaStbInterval.setStatus("current")


class _Ospf3CurCfgAreaType_Type(Integer32):
    """Custom type ospf3CurCfgAreaType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("transit", 1),
          ("stub", 2),
          ("nssa", 3))
    )


_Ospf3CurCfgAreaType_Type.__name__ = "Integer32"
_Ospf3CurCfgAreaType_Object = MibTableColumn
ospf3CurCfgAreaType = _Ospf3CurCfgAreaType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 2, 1, 4),
    _Ospf3CurCfgAreaType_Type()
)
ospf3CurCfgAreaType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgAreaType.setStatus("current")


class _Ospf3CurCfgAreaNoSumm_Type(Integer32):
    """Custom type ospf3CurCfgAreaNoSumm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_Ospf3CurCfgAreaNoSumm_Type.__name__ = "Integer32"
_Ospf3CurCfgAreaNoSumm_Object = MibTableColumn
ospf3CurCfgAreaNoSumm = _Ospf3CurCfgAreaNoSumm_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 2, 1, 5),
    _Ospf3CurCfgAreaNoSumm_Type()
)
ospf3CurCfgAreaNoSumm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgAreaNoSumm.setStatus("current")


class _Ospf3CurCfgAreaDefaultMetric_Type(Integer32):
    """Custom type ospf3CurCfgAreaDefaultMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16777215),
    )


_Ospf3CurCfgAreaDefaultMetric_Type.__name__ = "Integer32"
_Ospf3CurCfgAreaDefaultMetric_Object = MibTableColumn
ospf3CurCfgAreaDefaultMetric = _Ospf3CurCfgAreaDefaultMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 2, 1, 6),
    _Ospf3CurCfgAreaDefaultMetric_Type()
)
ospf3CurCfgAreaDefaultMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgAreaDefaultMetric.setStatus("current")


class _Ospf3CurCfgAreaDefaultMetricType_Type(Integer32):
    """Custom type ospf3CurCfgAreaDefaultMetricType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3),
    )


_Ospf3CurCfgAreaDefaultMetricType_Type.__name__ = "Integer32"
_Ospf3CurCfgAreaDefaultMetricType_Object = MibTableColumn
ospf3CurCfgAreaDefaultMetricType = _Ospf3CurCfgAreaDefaultMetricType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 2, 1, 7),
    _Ospf3CurCfgAreaDefaultMetricType_Type()
)
ospf3CurCfgAreaDefaultMetricType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgAreaDefaultMetricType.setStatus("current")


class _Ospf3CurCfgAreaTranslRole_Type(Integer32):
    """Custom type ospf3CurCfgAreaTranslRole based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("always", 1),
          ("candidate", 2))
    )


_Ospf3CurCfgAreaTranslRole_Type.__name__ = "Integer32"
_Ospf3CurCfgAreaTranslRole_Object = MibTableColumn
ospf3CurCfgAreaTranslRole = _Ospf3CurCfgAreaTranslRole_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 2, 1, 8),
    _Ospf3CurCfgAreaTranslRole_Type()
)
ospf3CurCfgAreaTranslRole.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgAreaTranslRole.setStatus("current")


class _Ospf3CurCfgAreaStatus_Type(Integer32):
    """Custom type ospf3CurCfgAreaStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_Ospf3CurCfgAreaStatus_Type.__name__ = "Integer32"
_Ospf3CurCfgAreaStatus_Object = MibTableColumn
ospf3CurCfgAreaStatus = _Ospf3CurCfgAreaStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 2, 1, 9),
    _Ospf3CurCfgAreaStatus_Type()
)
ospf3CurCfgAreaStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgAreaStatus.setStatus("current")
_Ospf3NewCfgAreaTable_Object = MibTable
ospf3NewCfgAreaTable = _Ospf3NewCfgAreaTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 3)
)
if mibBuilder.loadTexts:
    ospf3NewCfgAreaTable.setStatus("current")
_Ospf3NewCfgAreaEntry_Object = MibTableRow
ospf3NewCfgAreaEntry = _Ospf3NewCfgAreaEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 3, 1)
)
ospf3NewCfgAreaEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospf3NewCfgAreaIndex"),
)
if mibBuilder.loadTexts:
    ospf3NewCfgAreaEntry.setStatus("current")
_Ospf3NewCfgAreaIndex_Type = Integer32
_Ospf3NewCfgAreaIndex_Object = MibTableColumn
ospf3NewCfgAreaIndex = _Ospf3NewCfgAreaIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 3, 1, 1),
    _Ospf3NewCfgAreaIndex_Type()
)
ospf3NewCfgAreaIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3NewCfgAreaIndex.setStatus("current")
_Ospf3NewCfgAreaId_Type = IpAddress
_Ospf3NewCfgAreaId_Object = MibTableColumn
ospf3NewCfgAreaId = _Ospf3NewCfgAreaId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 3, 1, 2),
    _Ospf3NewCfgAreaId_Type()
)
ospf3NewCfgAreaId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgAreaId.setStatus("current")


class _Ospf3NewCfgAreaStbInterval_Type(Integer32):
    """Custom type ospf3NewCfgAreaStbInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_Ospf3NewCfgAreaStbInterval_Type.__name__ = "Integer32"
_Ospf3NewCfgAreaStbInterval_Object = MibTableColumn
ospf3NewCfgAreaStbInterval = _Ospf3NewCfgAreaStbInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 3, 1, 3),
    _Ospf3NewCfgAreaStbInterval_Type()
)
ospf3NewCfgAreaStbInterval.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgAreaStbInterval.setStatus("current")


class _Ospf3NewCfgAreaType_Type(Integer32):
    """Custom type ospf3NewCfgAreaType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("transit", 1),
          ("stub", 2),
          ("nssa", 3))
    )


_Ospf3NewCfgAreaType_Type.__name__ = "Integer32"
_Ospf3NewCfgAreaType_Object = MibTableColumn
ospf3NewCfgAreaType = _Ospf3NewCfgAreaType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 3, 1, 4),
    _Ospf3NewCfgAreaType_Type()
)
ospf3NewCfgAreaType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospf3NewCfgAreaType.setStatus("current")


class _Ospf3NewCfgAreaNoSumm_Type(Integer32):
    """Custom type ospf3NewCfgAreaNoSumm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_Ospf3NewCfgAreaNoSumm_Type.__name__ = "Integer32"
_Ospf3NewCfgAreaNoSumm_Object = MibTableColumn
ospf3NewCfgAreaNoSumm = _Ospf3NewCfgAreaNoSumm_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 3, 1, 5),
    _Ospf3NewCfgAreaNoSumm_Type()
)
ospf3NewCfgAreaNoSumm.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgAreaNoSumm.setStatus("current")


class _Ospf3NewCfgAreaDefaultMetric_Type(Integer32):
    """Custom type ospf3NewCfgAreaDefaultMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16777215),
    )


_Ospf3NewCfgAreaDefaultMetric_Type.__name__ = "Integer32"
_Ospf3NewCfgAreaDefaultMetric_Object = MibTableColumn
ospf3NewCfgAreaDefaultMetric = _Ospf3NewCfgAreaDefaultMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 3, 1, 6),
    _Ospf3NewCfgAreaDefaultMetric_Type()
)
ospf3NewCfgAreaDefaultMetric.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgAreaDefaultMetric.setStatus("current")


class _Ospf3NewCfgAreaDefaultMetricType_Type(Integer32):
    """Custom type ospf3NewCfgAreaDefaultMetricType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3),
    )


_Ospf3NewCfgAreaDefaultMetricType_Type.__name__ = "Integer32"
_Ospf3NewCfgAreaDefaultMetricType_Object = MibTableColumn
ospf3NewCfgAreaDefaultMetricType = _Ospf3NewCfgAreaDefaultMetricType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 3, 1, 7),
    _Ospf3NewCfgAreaDefaultMetricType_Type()
)
ospf3NewCfgAreaDefaultMetricType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgAreaDefaultMetricType.setStatus("current")


class _Ospf3NewCfgAreaTranslRole_Type(Integer32):
    """Custom type ospf3NewCfgAreaTranslRole based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("always", 1),
          ("candidate", 2))
    )


_Ospf3NewCfgAreaTranslRole_Type.__name__ = "Integer32"
_Ospf3NewCfgAreaTranslRole_Object = MibTableColumn
ospf3NewCfgAreaTranslRole = _Ospf3NewCfgAreaTranslRole_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 3, 1, 8),
    _Ospf3NewCfgAreaTranslRole_Type()
)
ospf3NewCfgAreaTranslRole.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgAreaTranslRole.setStatus("current")


class _Ospf3NewCfgAreaStatus_Type(Integer32):
    """Custom type ospf3NewCfgAreaStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_Ospf3NewCfgAreaStatus_Type.__name__ = "Integer32"
_Ospf3NewCfgAreaStatus_Object = MibTableColumn
ospf3NewCfgAreaStatus = _Ospf3NewCfgAreaStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 3, 1, 9),
    _Ospf3NewCfgAreaStatus_Type()
)
ospf3NewCfgAreaStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospf3NewCfgAreaStatus.setStatus("current")


class _Ospf3NewCfgAreaDelete_Type(Integer32):
    """Custom type ospf3NewCfgAreaDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_Ospf3NewCfgAreaDelete_Type.__name__ = "Integer32"
_Ospf3NewCfgAreaDelete_Object = MibTableColumn
ospf3NewCfgAreaDelete = _Ospf3NewCfgAreaDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 3, 1, 10),
    _Ospf3NewCfgAreaDelete_Type()
)
ospf3NewCfgAreaDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospf3NewCfgAreaDelete.setStatus("current")
_Ospf3CurCfgHostTable_Object = MibTable
ospf3CurCfgHostTable = _Ospf3CurCfgHostTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 4)
)
if mibBuilder.loadTexts:
    ospf3CurCfgHostTable.setStatus("current")
_Ospf3CurCfgHostEntry_Object = MibTableRow
ospf3CurCfgHostEntry = _Ospf3CurCfgHostEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 4, 1)
)
ospf3CurCfgHostEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospf3CurCfgHostIndex"),
)
if mibBuilder.loadTexts:
    ospf3CurCfgHostEntry.setStatus("current")
_Ospf3CurCfgHostIndex_Type = Integer32
_Ospf3CurCfgHostIndex_Object = MibTableColumn
ospf3CurCfgHostIndex = _Ospf3CurCfgHostIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 4, 1, 1),
    _Ospf3CurCfgHostIndex_Type()
)
ospf3CurCfgHostIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgHostIndex.setStatus("current")
_Ospf3CurCfgHostIpAddr_Type = DisplayString
_Ospf3CurCfgHostIpAddr_Object = MibTableColumn
ospf3CurCfgHostIpAddr = _Ospf3CurCfgHostIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 4, 1, 2),
    _Ospf3CurCfgHostIpAddr_Type()
)
ospf3CurCfgHostIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgHostIpAddr.setStatus("current")
_Ospf3CurCfgHostAreaIndex_Type = Integer32
_Ospf3CurCfgHostAreaIndex_Object = MibTableColumn
ospf3CurCfgHostAreaIndex = _Ospf3CurCfgHostAreaIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 4, 1, 3),
    _Ospf3CurCfgHostAreaIndex_Type()
)
ospf3CurCfgHostAreaIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgHostAreaIndex.setStatus("current")


class _Ospf3CurCfgHostCost_Type(Integer32):
    """Custom type ospf3CurCfgHostCost based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Ospf3CurCfgHostCost_Type.__name__ = "Integer32"
_Ospf3CurCfgHostCost_Object = MibTableColumn
ospf3CurCfgHostCost = _Ospf3CurCfgHostCost_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 4, 1, 4),
    _Ospf3CurCfgHostCost_Type()
)
ospf3CurCfgHostCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgHostCost.setStatus("current")


class _Ospf3CurCfgHostState_Type(Integer32):
    """Custom type ospf3CurCfgHostState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_Ospf3CurCfgHostState_Type.__name__ = "Integer32"
_Ospf3CurCfgHostState_Object = MibTableColumn
ospf3CurCfgHostState = _Ospf3CurCfgHostState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 4, 1, 5),
    _Ospf3CurCfgHostState_Type()
)
ospf3CurCfgHostState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgHostState.setStatus("current")
_Ospf3NewCfgHostTable_Object = MibTable
ospf3NewCfgHostTable = _Ospf3NewCfgHostTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 5)
)
if mibBuilder.loadTexts:
    ospf3NewCfgHostTable.setStatus("current")
_Ospf3NewCfgHostEntry_Object = MibTableRow
ospf3NewCfgHostEntry = _Ospf3NewCfgHostEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 5, 1)
)
ospf3NewCfgHostEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospf3NewCfgHostIndex"),
)
if mibBuilder.loadTexts:
    ospf3NewCfgHostEntry.setStatus("current")
_Ospf3NewCfgHostIndex_Type = Integer32
_Ospf3NewCfgHostIndex_Object = MibTableColumn
ospf3NewCfgHostIndex = _Ospf3NewCfgHostIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 5, 1, 1),
    _Ospf3NewCfgHostIndex_Type()
)
ospf3NewCfgHostIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3NewCfgHostIndex.setStatus("current")


class _Ospf3NewCfgHostIpAddr_Type(DisplayString):
    """Custom type ospf3NewCfgHostIpAddr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_Ospf3NewCfgHostIpAddr_Type.__name__ = "DisplayString"
_Ospf3NewCfgHostIpAddr_Object = MibTableColumn
ospf3NewCfgHostIpAddr = _Ospf3NewCfgHostIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 5, 1, 2),
    _Ospf3NewCfgHostIpAddr_Type()
)
ospf3NewCfgHostIpAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgHostIpAddr.setStatus("current")
_Ospf3NewCfgHostAreaIndex_Type = Integer32
_Ospf3NewCfgHostAreaIndex_Object = MibTableColumn
ospf3NewCfgHostAreaIndex = _Ospf3NewCfgHostAreaIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 5, 1, 3),
    _Ospf3NewCfgHostAreaIndex_Type()
)
ospf3NewCfgHostAreaIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgHostAreaIndex.setStatus("current")


class _Ospf3NewCfgHostCost_Type(Integer32):
    """Custom type ospf3NewCfgHostCost based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Ospf3NewCfgHostCost_Type.__name__ = "Integer32"
_Ospf3NewCfgHostCost_Object = MibTableColumn
ospf3NewCfgHostCost = _Ospf3NewCfgHostCost_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 5, 1, 4),
    _Ospf3NewCfgHostCost_Type()
)
ospf3NewCfgHostCost.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgHostCost.setStatus("current")


class _Ospf3NewCfgHostState_Type(Integer32):
    """Custom type ospf3NewCfgHostState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_Ospf3NewCfgHostState_Type.__name__ = "Integer32"
_Ospf3NewCfgHostState_Object = MibTableColumn
ospf3NewCfgHostState = _Ospf3NewCfgHostState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 5, 1, 5),
    _Ospf3NewCfgHostState_Type()
)
ospf3NewCfgHostState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgHostState.setStatus("current")


class _Ospf3NewCfgHostDelete_Type(Integer32):
    """Custom type ospf3NewCfgHostDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_Ospf3NewCfgHostDelete_Type.__name__ = "Integer32"
_Ospf3NewCfgHostDelete_Object = MibTableColumn
ospf3NewCfgHostDelete = _Ospf3NewCfgHostDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 5, 1, 6),
    _Ospf3NewCfgHostDelete_Type()
)
ospf3NewCfgHostDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospf3NewCfgHostDelete.setStatus("current")
_Ospf3CurCfgNbrTable_Object = MibTable
ospf3CurCfgNbrTable = _Ospf3CurCfgNbrTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 6)
)
if mibBuilder.loadTexts:
    ospf3CurCfgNbrTable.setStatus("current")
_Ospf3CurCfgNbrEntry_Object = MibTableRow
ospf3CurCfgNbrEntry = _Ospf3CurCfgNbrEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 6, 1)
)
ospf3CurCfgNbrEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospf3CurCfgNbrIndex"),
)
if mibBuilder.loadTexts:
    ospf3CurCfgNbrEntry.setStatus("current")
_Ospf3CurCfgNbrIndex_Type = Integer32
_Ospf3CurCfgNbrIndex_Object = MibTableColumn
ospf3CurCfgNbrIndex = _Ospf3CurCfgNbrIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 6, 1, 1),
    _Ospf3CurCfgNbrIndex_Type()
)
ospf3CurCfgNbrIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgNbrIndex.setStatus("current")
_Ospf3CurCfgNbrIpAddr_Type = DisplayString
_Ospf3CurCfgNbrIpAddr_Object = MibTableColumn
ospf3CurCfgNbrIpAddr = _Ospf3CurCfgNbrIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 6, 1, 2),
    _Ospf3CurCfgNbrIpAddr_Type()
)
ospf3CurCfgNbrIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgNbrIpAddr.setStatus("current")
_Ospf3CurCfgNbrIntfIndex_Type = Integer32
_Ospf3CurCfgNbrIntfIndex_Object = MibTableColumn
ospf3CurCfgNbrIntfIndex = _Ospf3CurCfgNbrIntfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 6, 1, 3),
    _Ospf3CurCfgNbrIntfIndex_Type()
)
ospf3CurCfgNbrIntfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgNbrIntfIndex.setStatus("current")


class _Ospf3CurCfgNbrPriority_Type(Integer32):
    """Custom type ospf3CurCfgNbrPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_Ospf3CurCfgNbrPriority_Type.__name__ = "Integer32"
_Ospf3CurCfgNbrPriority_Object = MibTableColumn
ospf3CurCfgNbrPriority = _Ospf3CurCfgNbrPriority_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 6, 1, 4),
    _Ospf3CurCfgNbrPriority_Type()
)
ospf3CurCfgNbrPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgNbrPriority.setStatus("current")


class _Ospf3CurCfgNbrState_Type(Integer32):
    """Custom type ospf3CurCfgNbrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_Ospf3CurCfgNbrState_Type.__name__ = "Integer32"
_Ospf3CurCfgNbrState_Object = MibTableColumn
ospf3CurCfgNbrState = _Ospf3CurCfgNbrState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 6, 1, 5),
    _Ospf3CurCfgNbrState_Type()
)
ospf3CurCfgNbrState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgNbrState.setStatus("current")
_Ospf3NewCfgNbrTable_Object = MibTable
ospf3NewCfgNbrTable = _Ospf3NewCfgNbrTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 7)
)
if mibBuilder.loadTexts:
    ospf3NewCfgNbrTable.setStatus("current")
_Ospf3NewCfgNbrEntry_Object = MibTableRow
ospf3NewCfgNbrEntry = _Ospf3NewCfgNbrEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 7, 1)
)
ospf3NewCfgNbrEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospf3NewCfgNbrIndex"),
)
if mibBuilder.loadTexts:
    ospf3NewCfgNbrEntry.setStatus("current")
_Ospf3NewCfgNbrIndex_Type = Integer32
_Ospf3NewCfgNbrIndex_Object = MibTableColumn
ospf3NewCfgNbrIndex = _Ospf3NewCfgNbrIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 7, 1, 1),
    _Ospf3NewCfgNbrIndex_Type()
)
ospf3NewCfgNbrIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3NewCfgNbrIndex.setStatus("current")


class _Ospf3NewCfgNbrIpAddr_Type(DisplayString):
    """Custom type ospf3NewCfgNbrIpAddr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_Ospf3NewCfgNbrIpAddr_Type.__name__ = "DisplayString"
_Ospf3NewCfgNbrIpAddr_Object = MibTableColumn
ospf3NewCfgNbrIpAddr = _Ospf3NewCfgNbrIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 7, 1, 2),
    _Ospf3NewCfgNbrIpAddr_Type()
)
ospf3NewCfgNbrIpAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgNbrIpAddr.setStatus("current")
_Ospf3NewCfgNbrIntfIndex_Type = Integer32
_Ospf3NewCfgNbrIntfIndex_Object = MibTableColumn
ospf3NewCfgNbrIntfIndex = _Ospf3NewCfgNbrIntfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 7, 1, 3),
    _Ospf3NewCfgNbrIntfIndex_Type()
)
ospf3NewCfgNbrIntfIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgNbrIntfIndex.setStatus("current")


class _Ospf3NewCfgNbrPriority_Type(Integer32):
    """Custom type ospf3NewCfgNbrPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_Ospf3NewCfgNbrPriority_Type.__name__ = "Integer32"
_Ospf3NewCfgNbrPriority_Object = MibTableColumn
ospf3NewCfgNbrPriority = _Ospf3NewCfgNbrPriority_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 7, 1, 4),
    _Ospf3NewCfgNbrPriority_Type()
)
ospf3NewCfgNbrPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgNbrPriority.setStatus("current")


class _Ospf3NewCfgNbrState_Type(Integer32):
    """Custom type ospf3NewCfgNbrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_Ospf3NewCfgNbrState_Type.__name__ = "Integer32"
_Ospf3NewCfgNbrState_Object = MibTableColumn
ospf3NewCfgNbrState = _Ospf3NewCfgNbrState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 7, 1, 5),
    _Ospf3NewCfgNbrState_Type()
)
ospf3NewCfgNbrState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgNbrState.setStatus("current")


class _Ospf3NewCfgNbrDelete_Type(Integer32):
    """Custom type ospf3NewCfgNbrDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_Ospf3NewCfgNbrDelete_Type.__name__ = "Integer32"
_Ospf3NewCfgNbrDelete_Object = MibTableColumn
ospf3NewCfgNbrDelete = _Ospf3NewCfgNbrDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 7, 1, 6),
    _Ospf3NewCfgNbrDelete_Type()
)
ospf3NewCfgNbrDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospf3NewCfgNbrDelete.setStatus("current")
_Ospf3CurCfgIntfTable_Object = MibTable
ospf3CurCfgIntfTable = _Ospf3CurCfgIntfTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 8)
)
if mibBuilder.loadTexts:
    ospf3CurCfgIntfTable.setStatus("current")
_Ospf3CurCfgIntfEntry_Object = MibTableRow
ospf3CurCfgIntfEntry = _Ospf3CurCfgIntfEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 8, 1)
)
ospf3CurCfgIntfEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospf3CurCfgIntfIndex"),
)
if mibBuilder.loadTexts:
    ospf3CurCfgIntfEntry.setStatus("current")
_Ospf3CurCfgIntfIndex_Type = Integer32
_Ospf3CurCfgIntfIndex_Object = MibTableColumn
ospf3CurCfgIntfIndex = _Ospf3CurCfgIntfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 8, 1, 1),
    _Ospf3CurCfgIntfIndex_Type()
)
ospf3CurCfgIntfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgIntfIndex.setStatus("current")


class _Ospf3CurCfgIntfInstId_Type(Integer32):
    """Custom type ospf3CurCfgIntfInstId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_Ospf3CurCfgIntfInstId_Type.__name__ = "Integer32"
_Ospf3CurCfgIntfInstId_Object = MibTableColumn
ospf3CurCfgIntfInstId = _Ospf3CurCfgIntfInstId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 8, 1, 2),
    _Ospf3CurCfgIntfInstId_Type()
)
ospf3CurCfgIntfInstId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgIntfInstId.setStatus("current")


class _Ospf3CurCfgIntfArea_Type(Integer32):
    """Custom type ospf3CurCfgIntfArea based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2),
    )


_Ospf3CurCfgIntfArea_Type.__name__ = "Integer32"
_Ospf3CurCfgIntfArea_Object = MibTableColumn
ospf3CurCfgIntfArea = _Ospf3CurCfgIntfArea_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 8, 1, 3),
    _Ospf3CurCfgIntfArea_Type()
)
ospf3CurCfgIntfArea.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgIntfArea.setStatus("current")


class _Ospf3CurCfgIntfCost_Type(Integer32):
    """Custom type ospf3CurCfgIntfCost based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_Ospf3CurCfgIntfCost_Type.__name__ = "Integer32"
_Ospf3CurCfgIntfCost_Object = MibTableColumn
ospf3CurCfgIntfCost = _Ospf3CurCfgIntfCost_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 8, 1, 4),
    _Ospf3CurCfgIntfCost_Type()
)
ospf3CurCfgIntfCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgIntfCost.setStatus("current")


class _Ospf3CurCfgIntfPrio_Type(Integer32):
    """Custom type ospf3CurCfgIntfPrio based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_Ospf3CurCfgIntfPrio_Type.__name__ = "Integer32"
_Ospf3CurCfgIntfPrio_Object = MibTableColumn
ospf3CurCfgIntfPrio = _Ospf3CurCfgIntfPrio_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 8, 1, 5),
    _Ospf3CurCfgIntfPrio_Type()
)
ospf3CurCfgIntfPrio.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgIntfPrio.setStatus("current")


class _Ospf3CurCfgIntfHello_Type(Integer32):
    """Custom type ospf3CurCfgIntfHello based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Ospf3CurCfgIntfHello_Type.__name__ = "Integer32"
_Ospf3CurCfgIntfHello_Object = MibTableColumn
ospf3CurCfgIntfHello = _Ospf3CurCfgIntfHello_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 8, 1, 6),
    _Ospf3CurCfgIntfHello_Type()
)
ospf3CurCfgIntfHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgIntfHello.setStatus("current")


class _Ospf3CurCfgIntfDead_Type(Integer32):
    """Custom type ospf3CurCfgIntfDead based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Ospf3CurCfgIntfDead_Type.__name__ = "Integer32"
_Ospf3CurCfgIntfDead_Object = MibTableColumn
ospf3CurCfgIntfDead = _Ospf3CurCfgIntfDead_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 8, 1, 7),
    _Ospf3CurCfgIntfDead_Type()
)
ospf3CurCfgIntfDead.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgIntfDead.setStatus("current")


class _Ospf3CurCfgIntfPoll_Type(Unsigned32):
    """Custom type ospf3CurCfgIntfPoll based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4294967295),
    )


_Ospf3CurCfgIntfPoll_Type.__name__ = "Unsigned32"
_Ospf3CurCfgIntfPoll_Object = MibTableColumn
ospf3CurCfgIntfPoll = _Ospf3CurCfgIntfPoll_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 8, 1, 8),
    _Ospf3CurCfgIntfPoll_Type()
)
ospf3CurCfgIntfPoll.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgIntfPoll.setStatus("current")


class _Ospf3CurCfgIntfTrans_Type(Integer32):
    """Custom type ospf3CurCfgIntfTrans based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1800),
    )


_Ospf3CurCfgIntfTrans_Type.__name__ = "Integer32"
_Ospf3CurCfgIntfTrans_Object = MibTableColumn
ospf3CurCfgIntfTrans = _Ospf3CurCfgIntfTrans_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 8, 1, 9),
    _Ospf3CurCfgIntfTrans_Type()
)
ospf3CurCfgIntfTrans.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgIntfTrans.setStatus("current")


class _Ospf3CurCfgIntfRetra_Type(Integer32):
    """Custom type ospf3CurCfgIntfRetra based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1800),
    )


_Ospf3CurCfgIntfRetra_Type.__name__ = "Integer32"
_Ospf3CurCfgIntfRetra_Object = MibTableColumn
ospf3CurCfgIntfRetra = _Ospf3CurCfgIntfRetra_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 8, 1, 10),
    _Ospf3CurCfgIntfRetra_Type()
)
ospf3CurCfgIntfRetra.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgIntfRetra.setStatus("current")


class _Ospf3CurCfgIntfPassive_Type(Integer32):
    """Custom type ospf3CurCfgIntfPassive based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_Ospf3CurCfgIntfPassive_Type.__name__ = "Integer32"
_Ospf3CurCfgIntfPassive_Object = MibTableColumn
ospf3CurCfgIntfPassive = _Ospf3CurCfgIntfPassive_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 8, 1, 11),
    _Ospf3CurCfgIntfPassive_Type()
)
ospf3CurCfgIntfPassive.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgIntfPassive.setStatus("current")


class _Ospf3CurCfgIntfNetworkType_Type(Integer32):
    """Custom type ospf3CurCfgIntfNetworkType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("broadcast", 1),
          ("non-broadcast", 2),
          ("point-to-point", 3),
          ("point-to-multipoint", 4))
    )


_Ospf3CurCfgIntfNetworkType_Type.__name__ = "Integer32"
_Ospf3CurCfgIntfNetworkType_Object = MibTableColumn
ospf3CurCfgIntfNetworkType = _Ospf3CurCfgIntfNetworkType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 8, 1, 12),
    _Ospf3CurCfgIntfNetworkType_Type()
)
ospf3CurCfgIntfNetworkType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgIntfNetworkType.setStatus("current")


class _Ospf3CurCfgIntfStatus_Type(Integer32):
    """Custom type ospf3CurCfgIntfStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_Ospf3CurCfgIntfStatus_Type.__name__ = "Integer32"
_Ospf3CurCfgIntfStatus_Object = MibTableColumn
ospf3CurCfgIntfStatus = _Ospf3CurCfgIntfStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 8, 1, 16),
    _Ospf3CurCfgIntfStatus_Type()
)
ospf3CurCfgIntfStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgIntfStatus.setStatus("current")


class _Ospf3CurCfgIntfAuthSpi_Type(Unsigned32):
    """Custom type ospf3CurCfgIntfAuthSpi based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(256, 4294967295),
    )


_Ospf3CurCfgIntfAuthSpi_Type.__name__ = "Unsigned32"
_Ospf3CurCfgIntfAuthSpi_Object = MibTableColumn
ospf3CurCfgIntfAuthSpi = _Ospf3CurCfgIntfAuthSpi_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 8, 1, 17),
    _Ospf3CurCfgIntfAuthSpi_Type()
)
ospf3CurCfgIntfAuthSpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgIntfAuthSpi.setStatus("current")


class _Ospf3CurCfgIntfAuthEnable_Type(Integer32):
    """Custom type ospf3CurCfgIntfAuthEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_Ospf3CurCfgIntfAuthEnable_Type.__name__ = "Integer32"
_Ospf3CurCfgIntfAuthEnable_Object = MibTableColumn
ospf3CurCfgIntfAuthEnable = _Ospf3CurCfgIntfAuthEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 8, 1, 18),
    _Ospf3CurCfgIntfAuthEnable_Type()
)
ospf3CurCfgIntfAuthEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgIntfAuthEnable.setStatus("current")


class _Ospf3CurCfgIntfAuthType_Type(Integer32):
    """Custom type ospf3CurCfgIntfAuthType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("sha1", 1),
          ("md5", 2))
    )


_Ospf3CurCfgIntfAuthType_Type.__name__ = "Integer32"
_Ospf3CurCfgIntfAuthType_Object = MibTableColumn
ospf3CurCfgIntfAuthType = _Ospf3CurCfgIntfAuthType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 8, 1, 19),
    _Ospf3CurCfgIntfAuthType_Type()
)
ospf3CurCfgIntfAuthType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgIntfAuthType.setStatus("current")


class _Ospf3CurCfgIntfAuthKey_Type(OctetString):
    """Custom type ospf3CurCfgIntfAuthKey based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 40),
    )


_Ospf3CurCfgIntfAuthKey_Type.__name__ = "OctetString"
_Ospf3CurCfgIntfAuthKey_Object = MibTableColumn
ospf3CurCfgIntfAuthKey = _Ospf3CurCfgIntfAuthKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 8, 1, 20),
    _Ospf3CurCfgIntfAuthKey_Type()
)
ospf3CurCfgIntfAuthKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgIntfAuthKey.setStatus("current")


class _Ospf3CurCfgIntfEncrySpi_Type(Unsigned32):
    """Custom type ospf3CurCfgIntfEncrySpi based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(256, 4294967295),
    )


_Ospf3CurCfgIntfEncrySpi_Type.__name__ = "Unsigned32"
_Ospf3CurCfgIntfEncrySpi_Object = MibTableColumn
ospf3CurCfgIntfEncrySpi = _Ospf3CurCfgIntfEncrySpi_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 8, 1, 21),
    _Ospf3CurCfgIntfEncrySpi_Type()
)
ospf3CurCfgIntfEncrySpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgIntfEncrySpi.setStatus("current")


class _Ospf3CurCfgIntfEncryEnable_Type(Integer32):
    """Custom type ospf3CurCfgIntfEncryEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_Ospf3CurCfgIntfEncryEnable_Type.__name__ = "Integer32"
_Ospf3CurCfgIntfEncryEnable_Object = MibTableColumn
ospf3CurCfgIntfEncryEnable = _Ospf3CurCfgIntfEncryEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 8, 1, 22),
    _Ospf3CurCfgIntfEncryEnable_Type()
)
ospf3CurCfgIntfEncryEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgIntfEncryEnable.setStatus("current")


class _Ospf3CurCfgIntfEncryType_Type(Integer32):
    """Custom type ospf3CurCfgIntfEncryType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("tripledes", 2),
          ("aes", 3))
    )


_Ospf3CurCfgIntfEncryType_Type.__name__ = "Integer32"
_Ospf3CurCfgIntfEncryType_Object = MibTableColumn
ospf3CurCfgIntfEncryType = _Ospf3CurCfgIntfEncryType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 8, 1, 23),
    _Ospf3CurCfgIntfEncryType_Type()
)
ospf3CurCfgIntfEncryType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgIntfEncryType.setStatus("current")


class _Ospf3CurCfgIntfEncryKey_Type(OctetString):
    """Custom type ospf3CurCfgIntfEncryKey based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 48),
    )


_Ospf3CurCfgIntfEncryKey_Type.__name__ = "OctetString"
_Ospf3CurCfgIntfEncryKey_Object = MibTableColumn
ospf3CurCfgIntfEncryKey = _Ospf3CurCfgIntfEncryKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 8, 1, 24),
    _Ospf3CurCfgIntfEncryKey_Type()
)
ospf3CurCfgIntfEncryKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgIntfEncryKey.setStatus("current")


class _Ospf3CurCfgIntfEncryAuthType_Type(Integer32):
    """Custom type ospf3CurCfgIntfEncryAuthType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("sha1", 1),
          ("md5", 2))
    )


_Ospf3CurCfgIntfEncryAuthType_Type.__name__ = "Integer32"
_Ospf3CurCfgIntfEncryAuthType_Object = MibTableColumn
ospf3CurCfgIntfEncryAuthType = _Ospf3CurCfgIntfEncryAuthType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 8, 1, 25),
    _Ospf3CurCfgIntfEncryAuthType_Type()
)
ospf3CurCfgIntfEncryAuthType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgIntfEncryAuthType.setStatus("current")


class _Ospf3CurCfgIntfEncryAuthKey_Type(OctetString):
    """Custom type ospf3CurCfgIntfEncryAuthKey based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 40),
    )


_Ospf3CurCfgIntfEncryAuthKey_Type.__name__ = "OctetString"
_Ospf3CurCfgIntfEncryAuthKey_Object = MibTableColumn
ospf3CurCfgIntfEncryAuthKey = _Ospf3CurCfgIntfEncryAuthKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 8, 1, 26),
    _Ospf3CurCfgIntfEncryAuthKey_Type()
)
ospf3CurCfgIntfEncryAuthKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgIntfEncryAuthKey.setStatus("current")


class _Ospf3CurCfgIntfLsaSupress_Type(Integer32):
    """Custom type ospf3CurCfgIntfLsaSupress based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_Ospf3CurCfgIntfLsaSupress_Type.__name__ = "Integer32"
_Ospf3CurCfgIntfLsaSupress_Object = MibTableColumn
ospf3CurCfgIntfLsaSupress = _Ospf3CurCfgIntfLsaSupress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 8, 1, 27),
    _Ospf3CurCfgIntfLsaSupress_Type()
)
ospf3CurCfgIntfLsaSupress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgIntfLsaSupress.setStatus("current")
_Ospf3NewCfgIntfTable_Object = MibTable
ospf3NewCfgIntfTable = _Ospf3NewCfgIntfTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 9)
)
if mibBuilder.loadTexts:
    ospf3NewCfgIntfTable.setStatus("current")
_Ospf3NewCfgIntfEntry_Object = MibTableRow
ospf3NewCfgIntfEntry = _Ospf3NewCfgIntfEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 9, 1)
)
ospf3NewCfgIntfEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospf3NewCfgIntfIndex"),
)
if mibBuilder.loadTexts:
    ospf3NewCfgIntfEntry.setStatus("current")
_Ospf3NewCfgIntfIndex_Type = Integer32
_Ospf3NewCfgIntfIndex_Object = MibTableColumn
ospf3NewCfgIntfIndex = _Ospf3NewCfgIntfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 9, 1, 1),
    _Ospf3NewCfgIntfIndex_Type()
)
ospf3NewCfgIntfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3NewCfgIntfIndex.setStatus("current")


class _Ospf3NewCfgIntfInstId_Type(Integer32):
    """Custom type ospf3NewCfgIntfInstId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_Ospf3NewCfgIntfInstId_Type.__name__ = "Integer32"
_Ospf3NewCfgIntfInstId_Object = MibTableColumn
ospf3NewCfgIntfInstId = _Ospf3NewCfgIntfInstId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 9, 1, 2),
    _Ospf3NewCfgIntfInstId_Type()
)
ospf3NewCfgIntfInstId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgIntfInstId.setStatus("current")


class _Ospf3NewCfgIntfArea_Type(Integer32):
    """Custom type ospf3NewCfgIntfArea based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2),
    )


_Ospf3NewCfgIntfArea_Type.__name__ = "Integer32"
_Ospf3NewCfgIntfArea_Object = MibTableColumn
ospf3NewCfgIntfArea = _Ospf3NewCfgIntfArea_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 9, 1, 3),
    _Ospf3NewCfgIntfArea_Type()
)
ospf3NewCfgIntfArea.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgIntfArea.setStatus("current")


class _Ospf3NewCfgIntfCost_Type(Integer32):
    """Custom type ospf3NewCfgIntfCost based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_Ospf3NewCfgIntfCost_Type.__name__ = "Integer32"
_Ospf3NewCfgIntfCost_Object = MibTableColumn
ospf3NewCfgIntfCost = _Ospf3NewCfgIntfCost_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 9, 1, 4),
    _Ospf3NewCfgIntfCost_Type()
)
ospf3NewCfgIntfCost.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgIntfCost.setStatus("current")


class _Ospf3NewCfgIntfPrio_Type(Integer32):
    """Custom type ospf3NewCfgIntfPrio based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_Ospf3NewCfgIntfPrio_Type.__name__ = "Integer32"
_Ospf3NewCfgIntfPrio_Object = MibTableColumn
ospf3NewCfgIntfPrio = _Ospf3NewCfgIntfPrio_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 9, 1, 5),
    _Ospf3NewCfgIntfPrio_Type()
)
ospf3NewCfgIntfPrio.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgIntfPrio.setStatus("current")


class _Ospf3NewCfgIntfHello_Type(Integer32):
    """Custom type ospf3NewCfgIntfHello based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Ospf3NewCfgIntfHello_Type.__name__ = "Integer32"
_Ospf3NewCfgIntfHello_Object = MibTableColumn
ospf3NewCfgIntfHello = _Ospf3NewCfgIntfHello_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 9, 1, 6),
    _Ospf3NewCfgIntfHello_Type()
)
ospf3NewCfgIntfHello.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgIntfHello.setStatus("current")


class _Ospf3NewCfgIntfDead_Type(Integer32):
    """Custom type ospf3NewCfgIntfDead based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Ospf3NewCfgIntfDead_Type.__name__ = "Integer32"
_Ospf3NewCfgIntfDead_Object = MibTableColumn
ospf3NewCfgIntfDead = _Ospf3NewCfgIntfDead_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 9, 1, 7),
    _Ospf3NewCfgIntfDead_Type()
)
ospf3NewCfgIntfDead.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgIntfDead.setStatus("current")


class _Ospf3NewCfgIntfPoll_Type(Unsigned32):
    """Custom type ospf3NewCfgIntfPoll based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4294967295),
    )


_Ospf3NewCfgIntfPoll_Type.__name__ = "Unsigned32"
_Ospf3NewCfgIntfPoll_Object = MibTableColumn
ospf3NewCfgIntfPoll = _Ospf3NewCfgIntfPoll_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 9, 1, 8),
    _Ospf3NewCfgIntfPoll_Type()
)
ospf3NewCfgIntfPoll.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgIntfPoll.setStatus("current")


class _Ospf3NewCfgIntfTrans_Type(Integer32):
    """Custom type ospf3NewCfgIntfTrans based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1800),
    )


_Ospf3NewCfgIntfTrans_Type.__name__ = "Integer32"
_Ospf3NewCfgIntfTrans_Object = MibTableColumn
ospf3NewCfgIntfTrans = _Ospf3NewCfgIntfTrans_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 9, 1, 9),
    _Ospf3NewCfgIntfTrans_Type()
)
ospf3NewCfgIntfTrans.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgIntfTrans.setStatus("current")


class _Ospf3NewCfgIntfRetra_Type(Integer32):
    """Custom type ospf3NewCfgIntfRetra based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1800),
    )


_Ospf3NewCfgIntfRetra_Type.__name__ = "Integer32"
_Ospf3NewCfgIntfRetra_Object = MibTableColumn
ospf3NewCfgIntfRetra = _Ospf3NewCfgIntfRetra_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 9, 1, 10),
    _Ospf3NewCfgIntfRetra_Type()
)
ospf3NewCfgIntfRetra.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgIntfRetra.setStatus("current")


class _Ospf3NewCfgIntfPassive_Type(Integer32):
    """Custom type ospf3NewCfgIntfPassive based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_Ospf3NewCfgIntfPassive_Type.__name__ = "Integer32"
_Ospf3NewCfgIntfPassive_Object = MibTableColumn
ospf3NewCfgIntfPassive = _Ospf3NewCfgIntfPassive_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 9, 1, 11),
    _Ospf3NewCfgIntfPassive_Type()
)
ospf3NewCfgIntfPassive.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgIntfPassive.setStatus("current")


class _Ospf3NewCfgIntfNetworkType_Type(Integer32):
    """Custom type ospf3NewCfgIntfNetworkType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("broadcast", 1),
          ("non-broadcast", 2),
          ("point-to-point", 3),
          ("point-to-multipoint", 4))
    )


_Ospf3NewCfgIntfNetworkType_Type.__name__ = "Integer32"
_Ospf3NewCfgIntfNetworkType_Object = MibTableColumn
ospf3NewCfgIntfNetworkType = _Ospf3NewCfgIntfNetworkType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 9, 1, 12),
    _Ospf3NewCfgIntfNetworkType_Type()
)
ospf3NewCfgIntfNetworkType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgIntfNetworkType.setStatus("current")


class _Ospf3NewCfgIntfStatus_Type(Integer32):
    """Custom type ospf3NewCfgIntfStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_Ospf3NewCfgIntfStatus_Type.__name__ = "Integer32"
_Ospf3NewCfgIntfStatus_Object = MibTableColumn
ospf3NewCfgIntfStatus = _Ospf3NewCfgIntfStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 9, 1, 16),
    _Ospf3NewCfgIntfStatus_Type()
)
ospf3NewCfgIntfStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgIntfStatus.setStatus("current")


class _Ospf3NewCfgIntfDelete_Type(Integer32):
    """Custom type ospf3NewCfgIntfDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("other", 0),
          ("delete", 1))
    )


_Ospf3NewCfgIntfDelete_Type.__name__ = "Integer32"
_Ospf3NewCfgIntfDelete_Object = MibTableColumn
ospf3NewCfgIntfDelete = _Ospf3NewCfgIntfDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 9, 1, 17),
    _Ospf3NewCfgIntfDelete_Type()
)
ospf3NewCfgIntfDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospf3NewCfgIntfDelete.setStatus("current")


class _Ospf3NewCfgIntfAuthSpi_Type(Unsigned32):
    """Custom type ospf3NewCfgIntfAuthSpi based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(256, 4294967295),
    )


_Ospf3NewCfgIntfAuthSpi_Type.__name__ = "Unsigned32"
_Ospf3NewCfgIntfAuthSpi_Object = MibTableColumn
ospf3NewCfgIntfAuthSpi = _Ospf3NewCfgIntfAuthSpi_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 9, 1, 18),
    _Ospf3NewCfgIntfAuthSpi_Type()
)
ospf3NewCfgIntfAuthSpi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospf3NewCfgIntfAuthSpi.setStatus("current")


class _Ospf3NewCfgIntfAuthEnable_Type(Integer32):
    """Custom type ospf3NewCfgIntfAuthEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_Ospf3NewCfgIntfAuthEnable_Type.__name__ = "Integer32"
_Ospf3NewCfgIntfAuthEnable_Object = MibTableColumn
ospf3NewCfgIntfAuthEnable = _Ospf3NewCfgIntfAuthEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 9, 1, 19),
    _Ospf3NewCfgIntfAuthEnable_Type()
)
ospf3NewCfgIntfAuthEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospf3NewCfgIntfAuthEnable.setStatus("current")


class _Ospf3NewCfgIntfAuthType_Type(Integer32):
    """Custom type ospf3NewCfgIntfAuthType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("sha1", 1),
          ("md5", 2))
    )


_Ospf3NewCfgIntfAuthType_Type.__name__ = "Integer32"
_Ospf3NewCfgIntfAuthType_Object = MibTableColumn
ospf3NewCfgIntfAuthType = _Ospf3NewCfgIntfAuthType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 9, 1, 20),
    _Ospf3NewCfgIntfAuthType_Type()
)
ospf3NewCfgIntfAuthType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospf3NewCfgIntfAuthType.setStatus("current")


class _Ospf3NewCfgIntfAuthKey_Type(OctetString):
    """Custom type ospf3NewCfgIntfAuthKey based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 40),
    )


_Ospf3NewCfgIntfAuthKey_Type.__name__ = "OctetString"
_Ospf3NewCfgIntfAuthKey_Object = MibTableColumn
ospf3NewCfgIntfAuthKey = _Ospf3NewCfgIntfAuthKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 9, 1, 21),
    _Ospf3NewCfgIntfAuthKey_Type()
)
ospf3NewCfgIntfAuthKey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospf3NewCfgIntfAuthKey.setStatus("current")


class _Ospf3NewCfgIntfAuthReset_Type(Integer32):
    """Custom type ospf3NewCfgIntfAuthReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("other", 0),
          ("reset", 1))
    )


_Ospf3NewCfgIntfAuthReset_Type.__name__ = "Integer32"
_Ospf3NewCfgIntfAuthReset_Object = MibTableColumn
ospf3NewCfgIntfAuthReset = _Ospf3NewCfgIntfAuthReset_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 9, 1, 22),
    _Ospf3NewCfgIntfAuthReset_Type()
)
ospf3NewCfgIntfAuthReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospf3NewCfgIntfAuthReset.setStatus("current")


class _Ospf3NewCfgIntfEncrySpi_Type(Unsigned32):
    """Custom type ospf3NewCfgIntfEncrySpi based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(256, 4294967295),
    )


_Ospf3NewCfgIntfEncrySpi_Type.__name__ = "Unsigned32"
_Ospf3NewCfgIntfEncrySpi_Object = MibTableColumn
ospf3NewCfgIntfEncrySpi = _Ospf3NewCfgIntfEncrySpi_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 9, 1, 23),
    _Ospf3NewCfgIntfEncrySpi_Type()
)
ospf3NewCfgIntfEncrySpi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospf3NewCfgIntfEncrySpi.setStatus("current")


class _Ospf3NewCfgIntfEncryEnable_Type(Integer32):
    """Custom type ospf3NewCfgIntfEncryEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_Ospf3NewCfgIntfEncryEnable_Type.__name__ = "Integer32"
_Ospf3NewCfgIntfEncryEnable_Object = MibTableColumn
ospf3NewCfgIntfEncryEnable = _Ospf3NewCfgIntfEncryEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 9, 1, 24),
    _Ospf3NewCfgIntfEncryEnable_Type()
)
ospf3NewCfgIntfEncryEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospf3NewCfgIntfEncryEnable.setStatus("current")


class _Ospf3NewCfgIntfEncryType_Type(Integer32):
    """Custom type ospf3NewCfgIntfEncryType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("tripledes", 2),
          ("aes", 3))
    )


_Ospf3NewCfgIntfEncryType_Type.__name__ = "Integer32"
_Ospf3NewCfgIntfEncryType_Object = MibTableColumn
ospf3NewCfgIntfEncryType = _Ospf3NewCfgIntfEncryType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 9, 1, 25),
    _Ospf3NewCfgIntfEncryType_Type()
)
ospf3NewCfgIntfEncryType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospf3NewCfgIntfEncryType.setStatus("current")


class _Ospf3NewCfgIntfEncryKey_Type(OctetString):
    """Custom type ospf3NewCfgIntfEncryKey based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 48),
    )


_Ospf3NewCfgIntfEncryKey_Type.__name__ = "OctetString"
_Ospf3NewCfgIntfEncryKey_Object = MibTableColumn
ospf3NewCfgIntfEncryKey = _Ospf3NewCfgIntfEncryKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 9, 1, 26),
    _Ospf3NewCfgIntfEncryKey_Type()
)
ospf3NewCfgIntfEncryKey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospf3NewCfgIntfEncryKey.setStatus("current")


class _Ospf3NewCfgIntfEncryAuthType_Type(Integer32):
    """Custom type ospf3NewCfgIntfEncryAuthType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("sha1", 1),
          ("md5", 2))
    )


_Ospf3NewCfgIntfEncryAuthType_Type.__name__ = "Integer32"
_Ospf3NewCfgIntfEncryAuthType_Object = MibTableColumn
ospf3NewCfgIntfEncryAuthType = _Ospf3NewCfgIntfEncryAuthType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 9, 1, 27),
    _Ospf3NewCfgIntfEncryAuthType_Type()
)
ospf3NewCfgIntfEncryAuthType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospf3NewCfgIntfEncryAuthType.setStatus("current")


class _Ospf3NewCfgIntfEncryAuthKey_Type(OctetString):
    """Custom type ospf3NewCfgIntfEncryAuthKey based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 40),
    )


_Ospf3NewCfgIntfEncryAuthKey_Type.__name__ = "OctetString"
_Ospf3NewCfgIntfEncryAuthKey_Object = MibTableColumn
ospf3NewCfgIntfEncryAuthKey = _Ospf3NewCfgIntfEncryAuthKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 9, 1, 28),
    _Ospf3NewCfgIntfEncryAuthKey_Type()
)
ospf3NewCfgIntfEncryAuthKey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospf3NewCfgIntfEncryAuthKey.setStatus("current")


class _Ospf3NewCfgIntfEncryReset_Type(Integer32):
    """Custom type ospf3NewCfgIntfEncryReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("other", 0),
          ("reset", 1))
    )


_Ospf3NewCfgIntfEncryReset_Type.__name__ = "Integer32"
_Ospf3NewCfgIntfEncryReset_Object = MibTableColumn
ospf3NewCfgIntfEncryReset = _Ospf3NewCfgIntfEncryReset_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 9, 1, 29),
    _Ospf3NewCfgIntfEncryReset_Type()
)
ospf3NewCfgIntfEncryReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospf3NewCfgIntfEncryReset.setStatus("current")


class _Ospf3NewCfgIntfLsaSupress_Type(Integer32):
    """Custom type ospf3NewCfgIntfLsaSupress based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_Ospf3NewCfgIntfLsaSupress_Type.__name__ = "Integer32"
_Ospf3NewCfgIntfLsaSupress_Object = MibTableColumn
ospf3NewCfgIntfLsaSupress = _Ospf3NewCfgIntfLsaSupress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 9, 1, 30),
    _Ospf3NewCfgIntfLsaSupress_Type()
)
ospf3NewCfgIntfLsaSupress.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgIntfLsaSupress.setStatus("current")
_Ospf3CurCfgVirtIntfTable_Object = MibTable
ospf3CurCfgVirtIntfTable = _Ospf3CurCfgVirtIntfTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 10)
)
if mibBuilder.loadTexts:
    ospf3CurCfgVirtIntfTable.setStatus("current")
_Ospf3CurCfgVirtIntfEntry_Object = MibTableRow
ospf3CurCfgVirtIntfEntry = _Ospf3CurCfgVirtIntfEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 10, 1)
)
ospf3CurCfgVirtIntfEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospf3CurCfgVirtIntfIndex"),
)
if mibBuilder.loadTexts:
    ospf3CurCfgVirtIntfEntry.setStatus("current")
_Ospf3CurCfgVirtIntfIndex_Type = Integer32
_Ospf3CurCfgVirtIntfIndex_Object = MibTableColumn
ospf3CurCfgVirtIntfIndex = _Ospf3CurCfgVirtIntfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 10, 1, 1),
    _Ospf3CurCfgVirtIntfIndex_Type()
)
ospf3CurCfgVirtIntfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgVirtIntfIndex.setStatus("current")


class _Ospf3CurCfgVirtIntfAreaId_Type(Integer32):
    """Custom type ospf3CurCfgVirtIntfAreaId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2),
    )


_Ospf3CurCfgVirtIntfAreaId_Type.__name__ = "Integer32"
_Ospf3CurCfgVirtIntfAreaId_Object = MibTableColumn
ospf3CurCfgVirtIntfAreaId = _Ospf3CurCfgVirtIntfAreaId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 10, 1, 3),
    _Ospf3CurCfgVirtIntfAreaId_Type()
)
ospf3CurCfgVirtIntfAreaId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgVirtIntfAreaId.setStatus("current")
_Ospf3CurCfgVirtIntfNbr_Type = IpAddress
_Ospf3CurCfgVirtIntfNbr_Object = MibTableColumn
ospf3CurCfgVirtIntfNbr = _Ospf3CurCfgVirtIntfNbr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 10, 1, 4),
    _Ospf3CurCfgVirtIntfNbr_Type()
)
ospf3CurCfgVirtIntfNbr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgVirtIntfNbr.setStatus("current")


class _Ospf3CurCfgVirtIntfHello_Type(Integer32):
    """Custom type ospf3CurCfgVirtIntfHello based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Ospf3CurCfgVirtIntfHello_Type.__name__ = "Integer32"
_Ospf3CurCfgVirtIntfHello_Object = MibTableColumn
ospf3CurCfgVirtIntfHello = _Ospf3CurCfgVirtIntfHello_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 10, 1, 5),
    _Ospf3CurCfgVirtIntfHello_Type()
)
ospf3CurCfgVirtIntfHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgVirtIntfHello.setStatus("current")


class _Ospf3CurCfgVirtIntfDead_Type(Integer32):
    """Custom type ospf3CurCfgVirtIntfDead based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Ospf3CurCfgVirtIntfDead_Type.__name__ = "Integer32"
_Ospf3CurCfgVirtIntfDead_Object = MibTableColumn
ospf3CurCfgVirtIntfDead = _Ospf3CurCfgVirtIntfDead_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 10, 1, 6),
    _Ospf3CurCfgVirtIntfDead_Type()
)
ospf3CurCfgVirtIntfDead.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgVirtIntfDead.setStatus("current")


class _Ospf3CurCfgVirtIntfTrans_Type(Integer32):
    """Custom type ospf3CurCfgVirtIntfTrans based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_Ospf3CurCfgVirtIntfTrans_Type.__name__ = "Integer32"
_Ospf3CurCfgVirtIntfTrans_Object = MibTableColumn
ospf3CurCfgVirtIntfTrans = _Ospf3CurCfgVirtIntfTrans_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 10, 1, 7),
    _Ospf3CurCfgVirtIntfTrans_Type()
)
ospf3CurCfgVirtIntfTrans.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgVirtIntfTrans.setStatus("current")


class _Ospf3CurCfgVirtIntfRetra_Type(Integer32):
    """Custom type ospf3CurCfgVirtIntfRetra based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_Ospf3CurCfgVirtIntfRetra_Type.__name__ = "Integer32"
_Ospf3CurCfgVirtIntfRetra_Object = MibTableColumn
ospf3CurCfgVirtIntfRetra = _Ospf3CurCfgVirtIntfRetra_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 10, 1, 8),
    _Ospf3CurCfgVirtIntfRetra_Type()
)
ospf3CurCfgVirtIntfRetra.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgVirtIntfRetra.setStatus("current")


class _Ospf3CurCfgVirtIntfStatus_Type(Integer32):
    """Custom type ospf3CurCfgVirtIntfStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_Ospf3CurCfgVirtIntfStatus_Type.__name__ = "Integer32"
_Ospf3CurCfgVirtIntfStatus_Object = MibTableColumn
ospf3CurCfgVirtIntfStatus = _Ospf3CurCfgVirtIntfStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 10, 1, 9),
    _Ospf3CurCfgVirtIntfStatus_Type()
)
ospf3CurCfgVirtIntfStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgVirtIntfStatus.setStatus("current")
_Ospf3NewCfgVirtIntfTable_Object = MibTable
ospf3NewCfgVirtIntfTable = _Ospf3NewCfgVirtIntfTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 11)
)
if mibBuilder.loadTexts:
    ospf3NewCfgVirtIntfTable.setStatus("current")
_Ospf3NewCfgVirtIntfEntry_Object = MibTableRow
ospf3NewCfgVirtIntfEntry = _Ospf3NewCfgVirtIntfEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 11, 1)
)
ospf3NewCfgVirtIntfEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospf3NewCfgVirtIntfIndex"),
)
if mibBuilder.loadTexts:
    ospf3NewCfgVirtIntfEntry.setStatus("current")
_Ospf3NewCfgVirtIntfIndex_Type = Integer32
_Ospf3NewCfgVirtIntfIndex_Object = MibTableColumn
ospf3NewCfgVirtIntfIndex = _Ospf3NewCfgVirtIntfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 11, 1, 1),
    _Ospf3NewCfgVirtIntfIndex_Type()
)
ospf3NewCfgVirtIntfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3NewCfgVirtIntfIndex.setStatus("current")


class _Ospf3NewCfgVirtIntfAreaId_Type(Integer32):
    """Custom type ospf3NewCfgVirtIntfAreaId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2),
    )


_Ospf3NewCfgVirtIntfAreaId_Type.__name__ = "Integer32"
_Ospf3NewCfgVirtIntfAreaId_Object = MibTableColumn
ospf3NewCfgVirtIntfAreaId = _Ospf3NewCfgVirtIntfAreaId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 11, 1, 3),
    _Ospf3NewCfgVirtIntfAreaId_Type()
)
ospf3NewCfgVirtIntfAreaId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgVirtIntfAreaId.setStatus("current")
_Ospf3NewCfgVirtIntfNbr_Type = IpAddress
_Ospf3NewCfgVirtIntfNbr_Object = MibTableColumn
ospf3NewCfgVirtIntfNbr = _Ospf3NewCfgVirtIntfNbr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 11, 1, 4),
    _Ospf3NewCfgVirtIntfNbr_Type()
)
ospf3NewCfgVirtIntfNbr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgVirtIntfNbr.setStatus("current")


class _Ospf3NewCfgVirtIntfHello_Type(Integer32):
    """Custom type ospf3NewCfgVirtIntfHello based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Ospf3NewCfgVirtIntfHello_Type.__name__ = "Integer32"
_Ospf3NewCfgVirtIntfHello_Object = MibTableColumn
ospf3NewCfgVirtIntfHello = _Ospf3NewCfgVirtIntfHello_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 11, 1, 5),
    _Ospf3NewCfgVirtIntfHello_Type()
)
ospf3NewCfgVirtIntfHello.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgVirtIntfHello.setStatus("current")


class _Ospf3NewCfgVirtIntfDead_Type(Integer32):
    """Custom type ospf3NewCfgVirtIntfDead based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Ospf3NewCfgVirtIntfDead_Type.__name__ = "Integer32"
_Ospf3NewCfgVirtIntfDead_Object = MibTableColumn
ospf3NewCfgVirtIntfDead = _Ospf3NewCfgVirtIntfDead_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 11, 1, 6),
    _Ospf3NewCfgVirtIntfDead_Type()
)
ospf3NewCfgVirtIntfDead.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgVirtIntfDead.setStatus("current")


class _Ospf3NewCfgVirtIntfTrans_Type(Integer32):
    """Custom type ospf3NewCfgVirtIntfTrans based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_Ospf3NewCfgVirtIntfTrans_Type.__name__ = "Integer32"
_Ospf3NewCfgVirtIntfTrans_Object = MibTableColumn
ospf3NewCfgVirtIntfTrans = _Ospf3NewCfgVirtIntfTrans_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 11, 1, 7),
    _Ospf3NewCfgVirtIntfTrans_Type()
)
ospf3NewCfgVirtIntfTrans.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgVirtIntfTrans.setStatus("current")


class _Ospf3NewCfgVirtIntfRetra_Type(Integer32):
    """Custom type ospf3NewCfgVirtIntfRetra based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_Ospf3NewCfgVirtIntfRetra_Type.__name__ = "Integer32"
_Ospf3NewCfgVirtIntfRetra_Object = MibTableColumn
ospf3NewCfgVirtIntfRetra = _Ospf3NewCfgVirtIntfRetra_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 11, 1, 8),
    _Ospf3NewCfgVirtIntfRetra_Type()
)
ospf3NewCfgVirtIntfRetra.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgVirtIntfRetra.setStatus("current")


class _Ospf3NewCfgVirtIntfStatus_Type(Integer32):
    """Custom type ospf3NewCfgVirtIntfStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_Ospf3NewCfgVirtIntfStatus_Type.__name__ = "Integer32"
_Ospf3NewCfgVirtIntfStatus_Object = MibTableColumn
ospf3NewCfgVirtIntfStatus = _Ospf3NewCfgVirtIntfStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 11, 1, 9),
    _Ospf3NewCfgVirtIntfStatus_Type()
)
ospf3NewCfgVirtIntfStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgVirtIntfStatus.setStatus("current")


class _Ospf3NewCfgVirtIntfDelete_Type(Integer32):
    """Custom type ospf3NewCfgVirtIntfDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("other", 0),
          ("delete", 1))
    )


_Ospf3NewCfgVirtIntfDelete_Type.__name__ = "Integer32"
_Ospf3NewCfgVirtIntfDelete_Object = MibTableColumn
ospf3NewCfgVirtIntfDelete = _Ospf3NewCfgVirtIntfDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 11, 1, 10),
    _Ospf3NewCfgVirtIntfDelete_Type()
)
ospf3NewCfgVirtIntfDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospf3NewCfgVirtIntfDelete.setStatus("current")
_Ospf3CurCfgRangeTable_Object = MibTable
ospf3CurCfgRangeTable = _Ospf3CurCfgRangeTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 12)
)
if mibBuilder.loadTexts:
    ospf3CurCfgRangeTable.setStatus("current")
_Ospf3CurCfgRangeEntry_Object = MibTableRow
ospf3CurCfgRangeEntry = _Ospf3CurCfgRangeEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 12, 1)
)
ospf3CurCfgRangeEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospf3CurCfgRangeIndex"),
)
if mibBuilder.loadTexts:
    ospf3CurCfgRangeEntry.setStatus("current")
_Ospf3CurCfgRangeIndex_Type = Integer32
_Ospf3CurCfgRangeIndex_Object = MibTableColumn
ospf3CurCfgRangeIndex = _Ospf3CurCfgRangeIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 12, 1, 1),
    _Ospf3CurCfgRangeIndex_Type()
)
ospf3CurCfgRangeIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgRangeIndex.setStatus("current")
_Ospf3CurCfgRangeAddr_Type = DisplayString
_Ospf3CurCfgRangeAddr_Object = MibTableColumn
ospf3CurCfgRangeAddr = _Ospf3CurCfgRangeAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 12, 1, 2),
    _Ospf3CurCfgRangeAddr_Type()
)
ospf3CurCfgRangeAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgRangeAddr.setStatus("current")


class _Ospf3CurCfgRangePrefixLen_Type(Integer32):
    """Custom type ospf3CurCfgRangePrefixLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_Ospf3CurCfgRangePrefixLen_Type.__name__ = "Integer32"
_Ospf3CurCfgRangePrefixLen_Object = MibTableColumn
ospf3CurCfgRangePrefixLen = _Ospf3CurCfgRangePrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 12, 1, 3),
    _Ospf3CurCfgRangePrefixLen_Type()
)
ospf3CurCfgRangePrefixLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgRangePrefixLen.setStatus("current")
_Ospf3CurCfgRangeAreaIndex_Type = Integer32
_Ospf3CurCfgRangeAreaIndex_Object = MibTableColumn
ospf3CurCfgRangeAreaIndex = _Ospf3CurCfgRangeAreaIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 12, 1, 4),
    _Ospf3CurCfgRangeAreaIndex_Type()
)
ospf3CurCfgRangeAreaIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgRangeAreaIndex.setStatus("current")


class _Ospf3CurCfgRangeHideState_Type(Integer32):
    """Custom type ospf3CurCfgRangeHideState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_Ospf3CurCfgRangeHideState_Type.__name__ = "Integer32"
_Ospf3CurCfgRangeHideState_Object = MibTableColumn
ospf3CurCfgRangeHideState = _Ospf3CurCfgRangeHideState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 12, 1, 5),
    _Ospf3CurCfgRangeHideState_Type()
)
ospf3CurCfgRangeHideState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgRangeHideState.setStatus("current")


class _Ospf3CurCfgRangeLsaType_Type(Integer32):
    """Custom type ospf3CurCfgRangeLsaType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(8195,
              8199)
        )
    )
    namedValues = NamedValues(
        *(("summary", 8195),
          ("type7", 8199))
    )


_Ospf3CurCfgRangeLsaType_Type.__name__ = "Integer32"
_Ospf3CurCfgRangeLsaType_Object = MibTableColumn
ospf3CurCfgRangeLsaType = _Ospf3CurCfgRangeLsaType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 12, 1, 6),
    _Ospf3CurCfgRangeLsaType_Type()
)
ospf3CurCfgRangeLsaType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgRangeLsaType.setStatus("current")


class _Ospf3CurCfgRangeRouteTag_Type(Unsigned32):
    """Custom type ospf3CurCfgRangeRouteTag based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_Ospf3CurCfgRangeRouteTag_Type.__name__ = "Unsigned32"
_Ospf3CurCfgRangeRouteTag_Object = MibTableColumn
ospf3CurCfgRangeRouteTag = _Ospf3CurCfgRangeRouteTag_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 12, 1, 7),
    _Ospf3CurCfgRangeRouteTag_Type()
)
ospf3CurCfgRangeRouteTag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgRangeRouteTag.setStatus("current")


class _Ospf3CurCfgRangeState_Type(Integer32):
    """Custom type ospf3CurCfgRangeState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_Ospf3CurCfgRangeState_Type.__name__ = "Integer32"
_Ospf3CurCfgRangeState_Object = MibTableColumn
ospf3CurCfgRangeState = _Ospf3CurCfgRangeState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 12, 1, 8),
    _Ospf3CurCfgRangeState_Type()
)
ospf3CurCfgRangeState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgRangeState.setStatus("current")
_Ospf3NewCfgRangeTable_Object = MibTable
ospf3NewCfgRangeTable = _Ospf3NewCfgRangeTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 13)
)
if mibBuilder.loadTexts:
    ospf3NewCfgRangeTable.setStatus("current")
_Ospf3NewCfgRangeEntry_Object = MibTableRow
ospf3NewCfgRangeEntry = _Ospf3NewCfgRangeEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 13, 1)
)
ospf3NewCfgRangeEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospf3NewCfgRangeIndex"),
)
if mibBuilder.loadTexts:
    ospf3NewCfgRangeEntry.setStatus("current")
_Ospf3NewCfgRangeIndex_Type = Integer32
_Ospf3NewCfgRangeIndex_Object = MibTableColumn
ospf3NewCfgRangeIndex = _Ospf3NewCfgRangeIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 13, 1, 1),
    _Ospf3NewCfgRangeIndex_Type()
)
ospf3NewCfgRangeIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3NewCfgRangeIndex.setStatus("current")


class _Ospf3NewCfgRangeAddr_Type(DisplayString):
    """Custom type ospf3NewCfgRangeAddr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_Ospf3NewCfgRangeAddr_Type.__name__ = "DisplayString"
_Ospf3NewCfgRangeAddr_Object = MibTableColumn
ospf3NewCfgRangeAddr = _Ospf3NewCfgRangeAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 13, 1, 2),
    _Ospf3NewCfgRangeAddr_Type()
)
ospf3NewCfgRangeAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgRangeAddr.setStatus("current")


class _Ospf3NewCfgRangePrefixLen_Type(Integer32):
    """Custom type ospf3NewCfgRangePrefixLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_Ospf3NewCfgRangePrefixLen_Type.__name__ = "Integer32"
_Ospf3NewCfgRangePrefixLen_Object = MibTableColumn
ospf3NewCfgRangePrefixLen = _Ospf3NewCfgRangePrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 13, 1, 3),
    _Ospf3NewCfgRangePrefixLen_Type()
)
ospf3NewCfgRangePrefixLen.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgRangePrefixLen.setStatus("current")
_Ospf3NewCfgRangeAreaIndex_Type = Integer32
_Ospf3NewCfgRangeAreaIndex_Object = MibTableColumn
ospf3NewCfgRangeAreaIndex = _Ospf3NewCfgRangeAreaIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 13, 1, 4),
    _Ospf3NewCfgRangeAreaIndex_Type()
)
ospf3NewCfgRangeAreaIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgRangeAreaIndex.setStatus("current")


class _Ospf3NewCfgRangeHideState_Type(Integer32):
    """Custom type ospf3NewCfgRangeHideState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_Ospf3NewCfgRangeHideState_Type.__name__ = "Integer32"
_Ospf3NewCfgRangeHideState_Object = MibTableColumn
ospf3NewCfgRangeHideState = _Ospf3NewCfgRangeHideState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 13, 1, 5),
    _Ospf3NewCfgRangeHideState_Type()
)
ospf3NewCfgRangeHideState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgRangeHideState.setStatus("current")


class _Ospf3NewCfgRangeLsaType_Type(Integer32):
    """Custom type ospf3NewCfgRangeLsaType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(8195,
              8199)
        )
    )
    namedValues = NamedValues(
        *(("summary", 8195),
          ("type7", 8199))
    )


_Ospf3NewCfgRangeLsaType_Type.__name__ = "Integer32"
_Ospf3NewCfgRangeLsaType_Object = MibTableColumn
ospf3NewCfgRangeLsaType = _Ospf3NewCfgRangeLsaType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 13, 1, 6),
    _Ospf3NewCfgRangeLsaType_Type()
)
ospf3NewCfgRangeLsaType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgRangeLsaType.setStatus("current")


class _Ospf3NewCfgRangeRouteTag_Type(Unsigned32):
    """Custom type ospf3NewCfgRangeRouteTag based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_Ospf3NewCfgRangeRouteTag_Type.__name__ = "Unsigned32"
_Ospf3NewCfgRangeRouteTag_Object = MibTableColumn
ospf3NewCfgRangeRouteTag = _Ospf3NewCfgRangeRouteTag_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 13, 1, 7),
    _Ospf3NewCfgRangeRouteTag_Type()
)
ospf3NewCfgRangeRouteTag.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgRangeRouteTag.setStatus("current")


class _Ospf3NewCfgRangeState_Type(Integer32):
    """Custom type ospf3NewCfgRangeState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_Ospf3NewCfgRangeState_Type.__name__ = "Integer32"
_Ospf3NewCfgRangeState_Object = MibTableColumn
ospf3NewCfgRangeState = _Ospf3NewCfgRangeState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 13, 1, 8),
    _Ospf3NewCfgRangeState_Type()
)
ospf3NewCfgRangeState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgRangeState.setStatus("current")


class _Ospf3NewCfgRangeDelete_Type(Integer32):
    """Custom type ospf3NewCfgRangeDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_Ospf3NewCfgRangeDelete_Type.__name__ = "Integer32"
_Ospf3NewCfgRangeDelete_Object = MibTableColumn
ospf3NewCfgRangeDelete = _Ospf3NewCfgRangeDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 13, 1, 9),
    _Ospf3NewCfgRangeDelete_Type()
)
ospf3NewCfgRangeDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgRangeDelete.setStatus("current")
_Ospf3CurCfgExtRangeTable_Object = MibTable
ospf3CurCfgExtRangeTable = _Ospf3CurCfgExtRangeTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 14)
)
if mibBuilder.loadTexts:
    ospf3CurCfgExtRangeTable.setStatus("current")
_Ospf3CurCfgExtRangeEntry_Object = MibTableRow
ospf3CurCfgExtRangeEntry = _Ospf3CurCfgExtRangeEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 14, 1)
)
ospf3CurCfgExtRangeEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospf3CurCfgExtRangeIndex"),
)
if mibBuilder.loadTexts:
    ospf3CurCfgExtRangeEntry.setStatus("current")
_Ospf3CurCfgExtRangeIndex_Type = Integer32
_Ospf3CurCfgExtRangeIndex_Object = MibTableColumn
ospf3CurCfgExtRangeIndex = _Ospf3CurCfgExtRangeIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 14, 1, 1),
    _Ospf3CurCfgExtRangeIndex_Type()
)
ospf3CurCfgExtRangeIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgExtRangeIndex.setStatus("current")
_Ospf3CurCfgExtRangeAddr_Type = DisplayString
_Ospf3CurCfgExtRangeAddr_Object = MibTableColumn
ospf3CurCfgExtRangeAddr = _Ospf3CurCfgExtRangeAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 14, 1, 2),
    _Ospf3CurCfgExtRangeAddr_Type()
)
ospf3CurCfgExtRangeAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgExtRangeAddr.setStatus("current")


class _Ospf3CurCfgExtRangePrefixLen_Type(Integer32):
    """Custom type ospf3CurCfgExtRangePrefixLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_Ospf3CurCfgExtRangePrefixLen_Type.__name__ = "Integer32"
_Ospf3CurCfgExtRangePrefixLen_Object = MibTableColumn
ospf3CurCfgExtRangePrefixLen = _Ospf3CurCfgExtRangePrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 14, 1, 3),
    _Ospf3CurCfgExtRangePrefixLen_Type()
)
ospf3CurCfgExtRangePrefixLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgExtRangePrefixLen.setStatus("current")
_Ospf3CurCfgExtRangeAreaIndex_Type = Integer32
_Ospf3CurCfgExtRangeAreaIndex_Object = MibTableColumn
ospf3CurCfgExtRangeAreaIndex = _Ospf3CurCfgExtRangeAreaIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 14, 1, 4),
    _Ospf3CurCfgExtRangeAreaIndex_Type()
)
ospf3CurCfgExtRangeAreaIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgExtRangeAreaIndex.setStatus("current")


class _Ospf3CurCfgExtRangeTranslation_Type(Integer32):
    """Custom type ospf3CurCfgExtRangeTranslation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_Ospf3CurCfgExtRangeTranslation_Type.__name__ = "Integer32"
_Ospf3CurCfgExtRangeTranslation_Object = MibTableColumn
ospf3CurCfgExtRangeTranslation = _Ospf3CurCfgExtRangeTranslation_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 14, 1, 5),
    _Ospf3CurCfgExtRangeTranslation_Type()
)
ospf3CurCfgExtRangeTranslation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgExtRangeTranslation.setStatus("current")


class _Ospf3CurCfgExtRangeAggrEffect_Type(Integer32):
    """Custom type ospf3CurCfgExtRangeAggrEffect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("advertise", 1),
          ("not-advertise", 2),
          ("allowAll", 3),
          ("denyAll", 4))
    )


_Ospf3CurCfgExtRangeAggrEffect_Type.__name__ = "Integer32"
_Ospf3CurCfgExtRangeAggrEffect_Object = MibTableColumn
ospf3CurCfgExtRangeAggrEffect = _Ospf3CurCfgExtRangeAggrEffect_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 14, 1, 6),
    _Ospf3CurCfgExtRangeAggrEffect_Type()
)
ospf3CurCfgExtRangeAggrEffect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgExtRangeAggrEffect.setStatus("current")


class _Ospf3CurCfgExtRangeState_Type(Integer32):
    """Custom type ospf3CurCfgExtRangeState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_Ospf3CurCfgExtRangeState_Type.__name__ = "Integer32"
_Ospf3CurCfgExtRangeState_Object = MibTableColumn
ospf3CurCfgExtRangeState = _Ospf3CurCfgExtRangeState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 14, 1, 7),
    _Ospf3CurCfgExtRangeState_Type()
)
ospf3CurCfgExtRangeState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgExtRangeState.setStatus("current")
_Ospf3NewCfgExtRangeTable_Object = MibTable
ospf3NewCfgExtRangeTable = _Ospf3NewCfgExtRangeTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 15)
)
if mibBuilder.loadTexts:
    ospf3NewCfgExtRangeTable.setStatus("current")
_Ospf3NewCfgExtRangeEntry_Object = MibTableRow
ospf3NewCfgExtRangeEntry = _Ospf3NewCfgExtRangeEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 15, 1)
)
ospf3NewCfgExtRangeEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospf3NewCfgExtRangeIndex"),
)
if mibBuilder.loadTexts:
    ospf3NewCfgExtRangeEntry.setStatus("current")
_Ospf3NewCfgExtRangeIndex_Type = Integer32
_Ospf3NewCfgExtRangeIndex_Object = MibTableColumn
ospf3NewCfgExtRangeIndex = _Ospf3NewCfgExtRangeIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 15, 1, 1),
    _Ospf3NewCfgExtRangeIndex_Type()
)
ospf3NewCfgExtRangeIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3NewCfgExtRangeIndex.setStatus("current")


class _Ospf3NewCfgExtRangeAddr_Type(DisplayString):
    """Custom type ospf3NewCfgExtRangeAddr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_Ospf3NewCfgExtRangeAddr_Type.__name__ = "DisplayString"
_Ospf3NewCfgExtRangeAddr_Object = MibTableColumn
ospf3NewCfgExtRangeAddr = _Ospf3NewCfgExtRangeAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 15, 1, 2),
    _Ospf3NewCfgExtRangeAddr_Type()
)
ospf3NewCfgExtRangeAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgExtRangeAddr.setStatus("current")


class _Ospf3NewCfgExtRangePrefixLen_Type(Integer32):
    """Custom type ospf3NewCfgExtRangePrefixLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_Ospf3NewCfgExtRangePrefixLen_Type.__name__ = "Integer32"
_Ospf3NewCfgExtRangePrefixLen_Object = MibTableColumn
ospf3NewCfgExtRangePrefixLen = _Ospf3NewCfgExtRangePrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 15, 1, 3),
    _Ospf3NewCfgExtRangePrefixLen_Type()
)
ospf3NewCfgExtRangePrefixLen.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgExtRangePrefixLen.setStatus("current")
_Ospf3NewCfgExtRangeAreaIndex_Type = Integer32
_Ospf3NewCfgExtRangeAreaIndex_Object = MibTableColumn
ospf3NewCfgExtRangeAreaIndex = _Ospf3NewCfgExtRangeAreaIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 15, 1, 4),
    _Ospf3NewCfgExtRangeAreaIndex_Type()
)
ospf3NewCfgExtRangeAreaIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgExtRangeAreaIndex.setStatus("current")


class _Ospf3NewCfgExtRangeTranslation_Type(Integer32):
    """Custom type ospf3NewCfgExtRangeTranslation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_Ospf3NewCfgExtRangeTranslation_Type.__name__ = "Integer32"
_Ospf3NewCfgExtRangeTranslation_Object = MibTableColumn
ospf3NewCfgExtRangeTranslation = _Ospf3NewCfgExtRangeTranslation_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 15, 1, 5),
    _Ospf3NewCfgExtRangeTranslation_Type()
)
ospf3NewCfgExtRangeTranslation.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgExtRangeTranslation.setStatus("current")


class _Ospf3NewCfgExtRangeAggrEffect_Type(Integer32):
    """Custom type ospf3NewCfgExtRangeAggrEffect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("advertise", 1),
          ("not-advertise", 2),
          ("allowAll", 3),
          ("denyAll", 4))
    )


_Ospf3NewCfgExtRangeAggrEffect_Type.__name__ = "Integer32"
_Ospf3NewCfgExtRangeAggrEffect_Object = MibTableColumn
ospf3NewCfgExtRangeAggrEffect = _Ospf3NewCfgExtRangeAggrEffect_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 15, 1, 6),
    _Ospf3NewCfgExtRangeAggrEffect_Type()
)
ospf3NewCfgExtRangeAggrEffect.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgExtRangeAggrEffect.setStatus("current")


class _Ospf3NewCfgExtRangeState_Type(Integer32):
    """Custom type ospf3NewCfgExtRangeState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_Ospf3NewCfgExtRangeState_Type.__name__ = "Integer32"
_Ospf3NewCfgExtRangeState_Object = MibTableColumn
ospf3NewCfgExtRangeState = _Ospf3NewCfgExtRangeState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 15, 1, 7),
    _Ospf3NewCfgExtRangeState_Type()
)
ospf3NewCfgExtRangeState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgExtRangeState.setStatus("current")


class _Ospf3NewCfgExtRangeDelete_Type(Integer32):
    """Custom type ospf3NewCfgExtRangeDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_Ospf3NewCfgExtRangeDelete_Type.__name__ = "Integer32"
_Ospf3NewCfgExtRangeDelete_Object = MibTableColumn
ospf3NewCfgExtRangeDelete = _Ospf3NewCfgExtRangeDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 15, 1, 8),
    _Ospf3NewCfgExtRangeDelete_Type()
)
ospf3NewCfgExtRangeDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgExtRangeDelete.setStatus("current")
_Ospf3CurCfgRedistTable_Object = MibTable
ospf3CurCfgRedistTable = _Ospf3CurCfgRedistTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 16)
)
if mibBuilder.loadTexts:
    ospf3CurCfgRedistTable.setStatus("current")
_Ospf3CurCfgRedistEntry_Object = MibTableRow
ospf3CurCfgRedistEntry = _Ospf3CurCfgRedistEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 16, 1)
)
ospf3CurCfgRedistEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospf3CurCfgRedistIndex"),
)
if mibBuilder.loadTexts:
    ospf3CurCfgRedistEntry.setStatus("current")
_Ospf3CurCfgRedistIndex_Type = Integer32
_Ospf3CurCfgRedistIndex_Object = MibTableColumn
ospf3CurCfgRedistIndex = _Ospf3CurCfgRedistIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 16, 1, 1),
    _Ospf3CurCfgRedistIndex_Type()
)
ospf3CurCfgRedistIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgRedistIndex.setStatus("current")
_Ospf3CurCfgRedistAddr_Type = DisplayString
_Ospf3CurCfgRedistAddr_Object = MibTableColumn
ospf3CurCfgRedistAddr = _Ospf3CurCfgRedistAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 16, 1, 2),
    _Ospf3CurCfgRedistAddr_Type()
)
ospf3CurCfgRedistAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgRedistAddr.setStatus("current")


class _Ospf3CurCfgRedistPrefixLen_Type(Integer32):
    """Custom type ospf3CurCfgRedistPrefixLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_Ospf3CurCfgRedistPrefixLen_Type.__name__ = "Integer32"
_Ospf3CurCfgRedistPrefixLen_Object = MibTableColumn
ospf3CurCfgRedistPrefixLen = _Ospf3CurCfgRedistPrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 16, 1, 3),
    _Ospf3CurCfgRedistPrefixLen_Type()
)
ospf3CurCfgRedistPrefixLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgRedistPrefixLen.setStatus("current")


class _Ospf3CurCfgRedistMetric_Type(Integer32):
    """Custom type ospf3CurCfgRedistMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16777215),
    )


_Ospf3CurCfgRedistMetric_Type.__name__ = "Integer32"
_Ospf3CurCfgRedistMetric_Object = MibTableColumn
ospf3CurCfgRedistMetric = _Ospf3CurCfgRedistMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 16, 1, 4),
    _Ospf3CurCfgRedistMetric_Type()
)
ospf3CurCfgRedistMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgRedistMetric.setStatus("current")


class _Ospf3CurCfgRedistMetricType_Type(Integer32):
    """Custom type ospf3CurCfgRedistMetricType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("asExttype1", 3),
          ("asExttype2", 4))
    )


_Ospf3CurCfgRedistMetricType_Type.__name__ = "Integer32"
_Ospf3CurCfgRedistMetricType_Object = MibTableColumn
ospf3CurCfgRedistMetricType = _Ospf3CurCfgRedistMetricType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 16, 1, 5),
    _Ospf3CurCfgRedistMetricType_Type()
)
ospf3CurCfgRedistMetricType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgRedistMetricType.setStatus("current")


class _Ospf3CurCfgRedistRouteTag_Type(Unsigned32):
    """Custom type ospf3CurCfgRedistRouteTag based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_Ospf3CurCfgRedistRouteTag_Type.__name__ = "Unsigned32"
_Ospf3CurCfgRedistRouteTag_Object = MibTableColumn
ospf3CurCfgRedistRouteTag = _Ospf3CurCfgRedistRouteTag_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 16, 1, 6),
    _Ospf3CurCfgRedistRouteTag_Type()
)
ospf3CurCfgRedistRouteTag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgRedistRouteTag.setStatus("current")


class _Ospf3CurCfgRedistRouteTagTypeManual_Type(Integer32):
    """Custom type ospf3CurCfgRedistRouteTagTypeManual based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("auto", 0),
          ("manual", 1))
    )


_Ospf3CurCfgRedistRouteTagTypeManual_Type.__name__ = "Integer32"
_Ospf3CurCfgRedistRouteTagTypeManual_Object = MibTableColumn
ospf3CurCfgRedistRouteTagTypeManual = _Ospf3CurCfgRedistRouteTagTypeManual_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 16, 1, 7),
    _Ospf3CurCfgRedistRouteTagTypeManual_Type()
)
ospf3CurCfgRedistRouteTagTypeManual.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgRedistRouteTagTypeManual.setStatus("current")


class _Ospf3CurCfgRedistState_Type(Integer32):
    """Custom type ospf3CurCfgRedistState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_Ospf3CurCfgRedistState_Type.__name__ = "Integer32"
_Ospf3CurCfgRedistState_Object = MibTableColumn
ospf3CurCfgRedistState = _Ospf3CurCfgRedistState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 16, 1, 8),
    _Ospf3CurCfgRedistState_Type()
)
ospf3CurCfgRedistState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgRedistState.setStatus("current")
_Ospf3NewCfgRedistTable_Object = MibTable
ospf3NewCfgRedistTable = _Ospf3NewCfgRedistTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 17)
)
if mibBuilder.loadTexts:
    ospf3NewCfgRedistTable.setStatus("current")
_Ospf3NewCfgRedistEntry_Object = MibTableRow
ospf3NewCfgRedistEntry = _Ospf3NewCfgRedistEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 17, 1)
)
ospf3NewCfgRedistEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospf3NewCfgRedistIndex"),
)
if mibBuilder.loadTexts:
    ospf3NewCfgRedistEntry.setStatus("current")
_Ospf3NewCfgRedistIndex_Type = Integer32
_Ospf3NewCfgRedistIndex_Object = MibTableColumn
ospf3NewCfgRedistIndex = _Ospf3NewCfgRedistIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 17, 1, 1),
    _Ospf3NewCfgRedistIndex_Type()
)
ospf3NewCfgRedistIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3NewCfgRedistIndex.setStatus("current")


class _Ospf3NewCfgRedistAddr_Type(DisplayString):
    """Custom type ospf3NewCfgRedistAddr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_Ospf3NewCfgRedistAddr_Type.__name__ = "DisplayString"
_Ospf3NewCfgRedistAddr_Object = MibTableColumn
ospf3NewCfgRedistAddr = _Ospf3NewCfgRedistAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 17, 1, 2),
    _Ospf3NewCfgRedistAddr_Type()
)
ospf3NewCfgRedistAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgRedistAddr.setStatus("current")


class _Ospf3NewCfgRedistPrefixLen_Type(Integer32):
    """Custom type ospf3NewCfgRedistPrefixLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_Ospf3NewCfgRedistPrefixLen_Type.__name__ = "Integer32"
_Ospf3NewCfgRedistPrefixLen_Object = MibTableColumn
ospf3NewCfgRedistPrefixLen = _Ospf3NewCfgRedistPrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 17, 1, 3),
    _Ospf3NewCfgRedistPrefixLen_Type()
)
ospf3NewCfgRedistPrefixLen.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgRedistPrefixLen.setStatus("current")


class _Ospf3NewCfgRedistMetric_Type(Integer32):
    """Custom type ospf3NewCfgRedistMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16777215),
    )


_Ospf3NewCfgRedistMetric_Type.__name__ = "Integer32"
_Ospf3NewCfgRedistMetric_Object = MibTableColumn
ospf3NewCfgRedistMetric = _Ospf3NewCfgRedistMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 17, 1, 4),
    _Ospf3NewCfgRedistMetric_Type()
)
ospf3NewCfgRedistMetric.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgRedistMetric.setStatus("current")


class _Ospf3NewCfgRedistMetricType_Type(Integer32):
    """Custom type ospf3NewCfgRedistMetricType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("asExttype1", 3),
          ("asExttype2", 4))
    )


_Ospf3NewCfgRedistMetricType_Type.__name__ = "Integer32"
_Ospf3NewCfgRedistMetricType_Object = MibTableColumn
ospf3NewCfgRedistMetricType = _Ospf3NewCfgRedistMetricType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 17, 1, 5),
    _Ospf3NewCfgRedistMetricType_Type()
)
ospf3NewCfgRedistMetricType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgRedistMetricType.setStatus("current")


class _Ospf3NewCfgRedistRouteTag_Type(Unsigned32):
    """Custom type ospf3NewCfgRedistRouteTag based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_Ospf3NewCfgRedistRouteTag_Type.__name__ = "Unsigned32"
_Ospf3NewCfgRedistRouteTag_Object = MibTableColumn
ospf3NewCfgRedistRouteTag = _Ospf3NewCfgRedistRouteTag_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 17, 1, 6),
    _Ospf3NewCfgRedistRouteTag_Type()
)
ospf3NewCfgRedistRouteTag.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgRedistRouteTag.setStatus("current")


class _Ospf3NewCfgRedistRouteTagTypeManual_Type(Integer32):
    """Custom type ospf3NewCfgRedistRouteTagTypeManual based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("auto", 0),
          ("manual", 1))
    )


_Ospf3NewCfgRedistRouteTagTypeManual_Type.__name__ = "Integer32"
_Ospf3NewCfgRedistRouteTagTypeManual_Object = MibTableColumn
ospf3NewCfgRedistRouteTagTypeManual = _Ospf3NewCfgRedistRouteTagTypeManual_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 17, 1, 7),
    _Ospf3NewCfgRedistRouteTagTypeManual_Type()
)
ospf3NewCfgRedistRouteTagTypeManual.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospf3NewCfgRedistRouteTagTypeManual.setStatus("current")


class _Ospf3NewCfgRedistState_Type(Integer32):
    """Custom type ospf3NewCfgRedistState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_Ospf3NewCfgRedistState_Type.__name__ = "Integer32"
_Ospf3NewCfgRedistState_Object = MibTableColumn
ospf3NewCfgRedistState = _Ospf3NewCfgRedistState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 17, 1, 8),
    _Ospf3NewCfgRedistState_Type()
)
ospf3NewCfgRedistState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgRedistState.setStatus("current")


class _Ospf3NewCfgRedistDelete_Type(Integer32):
    """Custom type ospf3NewCfgRedistDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_Ospf3NewCfgRedistDelete_Type.__name__ = "Integer32"
_Ospf3NewCfgRedistDelete_Object = MibTableColumn
ospf3NewCfgRedistDelete = _Ospf3NewCfgRedistDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 17, 1, 9),
    _Ospf3NewCfgRedistDelete_Type()
)
ospf3NewCfgRedistDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospf3NewCfgRedistDelete.setStatus("current")
_Ospf3RouteRedistribution_ObjectIdentity = ObjectIdentity
ospf3RouteRedistribution = _Ospf3RouteRedistribution_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 18)
)
_Ospf3RedistributeConnected_ObjectIdentity = ObjectIdentity
ospf3RedistributeConnected = _Ospf3RedistributeConnected_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 18, 1)
)


class _Ospf3CurCfgConnectedMetric_Type(Integer32):
    """Custom type ospf3CurCfgConnectedMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_Ospf3CurCfgConnectedMetric_Type.__name__ = "Integer32"
_Ospf3CurCfgConnectedMetric_Object = MibScalar
ospf3CurCfgConnectedMetric = _Ospf3CurCfgConnectedMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 18, 1, 1),
    _Ospf3CurCfgConnectedMetric_Type()
)
ospf3CurCfgConnectedMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgConnectedMetric.setStatus("current")


class _Ospf3NewCfgConnectedMetric_Type(Integer32):
    """Custom type ospf3NewCfgConnectedMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_Ospf3NewCfgConnectedMetric_Type.__name__ = "Integer32"
_Ospf3NewCfgConnectedMetric_Object = MibScalar
ospf3NewCfgConnectedMetric = _Ospf3NewCfgConnectedMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 18, 1, 2),
    _Ospf3NewCfgConnectedMetric_Type()
)
ospf3NewCfgConnectedMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospf3NewCfgConnectedMetric.setStatus("current")


class _Ospf3CurCfgConnectedMetricType_Type(Integer32):
    """Custom type ospf3CurCfgConnectedMetricType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("type1", 2),
          ("type2", 3))
    )


_Ospf3CurCfgConnectedMetricType_Type.__name__ = "Integer32"
_Ospf3CurCfgConnectedMetricType_Object = MibScalar
ospf3CurCfgConnectedMetricType = _Ospf3CurCfgConnectedMetricType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 18, 1, 3),
    _Ospf3CurCfgConnectedMetricType_Type()
)
ospf3CurCfgConnectedMetricType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgConnectedMetricType.setStatus("current")


class _Ospf3NewCfgConnectedMetricType_Type(Integer32):
    """Custom type ospf3NewCfgConnectedMetricType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("type1", 2),
          ("type2", 3))
    )


_Ospf3NewCfgConnectedMetricType_Type.__name__ = "Integer32"
_Ospf3NewCfgConnectedMetricType_Object = MibScalar
ospf3NewCfgConnectedMetricType = _Ospf3NewCfgConnectedMetricType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 18, 1, 4),
    _Ospf3NewCfgConnectedMetricType_Type()
)
ospf3NewCfgConnectedMetricType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospf3NewCfgConnectedMetricType.setStatus("current")


class _Ospf3CurCfgConnectedRouteTag_Type(Unsigned32):
    """Custom type ospf3CurCfgConnectedRouteTag based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_Ospf3CurCfgConnectedRouteTag_Type.__name__ = "Unsigned32"
_Ospf3CurCfgConnectedRouteTag_Object = MibScalar
ospf3CurCfgConnectedRouteTag = _Ospf3CurCfgConnectedRouteTag_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 18, 1, 5),
    _Ospf3CurCfgConnectedRouteTag_Type()
)
ospf3CurCfgConnectedRouteTag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgConnectedRouteTag.setStatus("current")


class _Ospf3NewCfgConnectedRouteTag_Type(Unsigned32):
    """Custom type ospf3NewCfgConnectedRouteTag based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_Ospf3NewCfgConnectedRouteTag_Type.__name__ = "Unsigned32"
_Ospf3NewCfgConnectedRouteTag_Object = MibScalar
ospf3NewCfgConnectedRouteTag = _Ospf3NewCfgConnectedRouteTag_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 18, 1, 6),
    _Ospf3NewCfgConnectedRouteTag_Type()
)
ospf3NewCfgConnectedRouteTag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospf3NewCfgConnectedRouteTag.setStatus("current")


class _Ospf3CurCfgConnectedRouteTagTypeManual_Type(Integer32):
    """Custom type ospf3CurCfgConnectedRouteTagTypeManual based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("auto", 0),
          ("manual", 1))
    )


_Ospf3CurCfgConnectedRouteTagTypeManual_Type.__name__ = "Integer32"
_Ospf3CurCfgConnectedRouteTagTypeManual_Object = MibScalar
ospf3CurCfgConnectedRouteTagTypeManual = _Ospf3CurCfgConnectedRouteTagTypeManual_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 18, 1, 7),
    _Ospf3CurCfgConnectedRouteTagTypeManual_Type()
)
ospf3CurCfgConnectedRouteTagTypeManual.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgConnectedRouteTagTypeManual.setStatus("current")


class _Ospf3NewCfgConnectedRouteTagTypeManual_Type(Integer32):
    """Custom type ospf3NewCfgConnectedRouteTagTypeManual based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("auto", 0),
          ("manual", 1))
    )


_Ospf3NewCfgConnectedRouteTagTypeManual_Type.__name__ = "Integer32"
_Ospf3NewCfgConnectedRouteTagTypeManual_Object = MibScalar
ospf3NewCfgConnectedRouteTagTypeManual = _Ospf3NewCfgConnectedRouteTagTypeManual_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 18, 1, 8),
    _Ospf3NewCfgConnectedRouteTagTypeManual_Type()
)
ospf3NewCfgConnectedRouteTagTypeManual.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospf3NewCfgConnectedRouteTagTypeManual.setStatus("current")
_Ospf3RedistributeStatic_ObjectIdentity = ObjectIdentity
ospf3RedistributeStatic = _Ospf3RedistributeStatic_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 18, 2)
)


class _Ospf3CurCfgStaticMetric_Type(Integer32):
    """Custom type ospf3CurCfgStaticMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_Ospf3CurCfgStaticMetric_Type.__name__ = "Integer32"
_Ospf3CurCfgStaticMetric_Object = MibScalar
ospf3CurCfgStaticMetric = _Ospf3CurCfgStaticMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 18, 2, 1),
    _Ospf3CurCfgStaticMetric_Type()
)
ospf3CurCfgStaticMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgStaticMetric.setStatus("current")


class _Ospf3NewCfgStaticMetric_Type(Integer32):
    """Custom type ospf3NewCfgStaticMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_Ospf3NewCfgStaticMetric_Type.__name__ = "Integer32"
_Ospf3NewCfgStaticMetric_Object = MibScalar
ospf3NewCfgStaticMetric = _Ospf3NewCfgStaticMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 18, 2, 2),
    _Ospf3NewCfgStaticMetric_Type()
)
ospf3NewCfgStaticMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospf3NewCfgStaticMetric.setStatus("current")


class _Ospf3CurCfgStaticMetricType_Type(Integer32):
    """Custom type ospf3CurCfgStaticMetricType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("type1", 2),
          ("type2", 3))
    )


_Ospf3CurCfgStaticMetricType_Type.__name__ = "Integer32"
_Ospf3CurCfgStaticMetricType_Object = MibScalar
ospf3CurCfgStaticMetricType = _Ospf3CurCfgStaticMetricType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 18, 2, 3),
    _Ospf3CurCfgStaticMetricType_Type()
)
ospf3CurCfgStaticMetricType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgStaticMetricType.setStatus("current")


class _Ospf3NewCfgStaticMetricType_Type(Integer32):
    """Custom type ospf3NewCfgStaticMetricType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("type1", 2),
          ("type2", 3))
    )


_Ospf3NewCfgStaticMetricType_Type.__name__ = "Integer32"
_Ospf3NewCfgStaticMetricType_Object = MibScalar
ospf3NewCfgStaticMetricType = _Ospf3NewCfgStaticMetricType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 18, 2, 4),
    _Ospf3NewCfgStaticMetricType_Type()
)
ospf3NewCfgStaticMetricType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospf3NewCfgStaticMetricType.setStatus("current")


class _Ospf3CurCfgStaticRouteTag_Type(Unsigned32):
    """Custom type ospf3CurCfgStaticRouteTag based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_Ospf3CurCfgStaticRouteTag_Type.__name__ = "Unsigned32"
_Ospf3CurCfgStaticRouteTag_Object = MibScalar
ospf3CurCfgStaticRouteTag = _Ospf3CurCfgStaticRouteTag_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 18, 2, 5),
    _Ospf3CurCfgStaticRouteTag_Type()
)
ospf3CurCfgStaticRouteTag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgStaticRouteTag.setStatus("current")


class _Ospf3NewCfgStaticRouteTag_Type(Unsigned32):
    """Custom type ospf3NewCfgStaticRouteTag based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_Ospf3NewCfgStaticRouteTag_Type.__name__ = "Unsigned32"
_Ospf3NewCfgStaticRouteTag_Object = MibScalar
ospf3NewCfgStaticRouteTag = _Ospf3NewCfgStaticRouteTag_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 18, 2, 6),
    _Ospf3NewCfgStaticRouteTag_Type()
)
ospf3NewCfgStaticRouteTag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospf3NewCfgStaticRouteTag.setStatus("current")


class _Ospf3CurCfgStaticRouteTagTypeManual_Type(Integer32):
    """Custom type ospf3CurCfgStaticRouteTagTypeManual based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("auto", 0),
          ("manual", 1))
    )


_Ospf3CurCfgStaticRouteTagTypeManual_Type.__name__ = "Integer32"
_Ospf3CurCfgStaticRouteTagTypeManual_Object = MibScalar
ospf3CurCfgStaticRouteTagTypeManual = _Ospf3CurCfgStaticRouteTagTypeManual_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 18, 2, 7),
    _Ospf3CurCfgStaticRouteTagTypeManual_Type()
)
ospf3CurCfgStaticRouteTagTypeManual.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CurCfgStaticRouteTagTypeManual.setStatus("current")


class _Ospf3NewCfgStaticRouteTagTypeManual_Type(Integer32):
    """Custom type ospf3NewCfgStaticRouteTagTypeManual based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("auto", 0),
          ("manual", 1))
    )


_Ospf3NewCfgStaticRouteTagTypeManual_Type.__name__ = "Integer32"
_Ospf3NewCfgStaticRouteTagTypeManual_Object = MibScalar
ospf3NewCfgStaticRouteTagTypeManual = _Ospf3NewCfgStaticRouteTagTypeManual_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 26, 18, 2, 8),
    _Ospf3NewCfgStaticRouteTagTypeManual_Type()
)
ospf3NewCfgStaticRouteTagTypeManual.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospf3NewCfgStaticRouteTagTypeManual.setStatus("current")
_PptCfg_ObjectIdentity = ObjectIdentity
pptCfg = _PptCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 27)
)
_PptTableMaxSize_Type = Integer32
_PptTableMaxSize_Object = MibScalar
pptTableMaxSize = _PptTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 27, 1),
    _PptTableMaxSize_Type()
)
pptTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pptTableMaxSize.setStatus("current")
_PptCurCfgTable_Object = MibTable
pptCurCfgTable = _PptCurCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 27, 2)
)
if mibBuilder.loadTexts:
    pptCurCfgTable.setStatus("current")
_PptCurCfgEntry_Object = MibTableRow
pptCurCfgEntry = _PptCurCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 27, 2, 1)
)
pptCurCfgEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "pptCurCfgIndx"),
)
if mibBuilder.loadTexts:
    pptCurCfgEntry.setStatus("current")
_PptCurCfgIndx_Type = Integer32
_PptCurCfgIndx_Object = MibTableColumn
pptCurCfgIndx = _PptCurCfgIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 27, 2, 1, 1),
    _PptCurCfgIndx_Type()
)
pptCurCfgIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pptCurCfgIndx.setStatus("current")
_PptCurCfgPrefix_Type = DisplayString
_PptCurCfgPrefix_Object = MibTableColumn
pptCurCfgPrefix = _PptCurCfgPrefix_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 27, 2, 1, 2),
    _PptCurCfgPrefix_Type()
)
pptCurCfgPrefix.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pptCurCfgPrefix.setStatus("current")
_PptCurCfgPrefixLen_Type = Integer32
_PptCurCfgPrefixLen_Object = MibTableColumn
pptCurCfgPrefixLen = _PptCurCfgPrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 27, 2, 1, 3),
    _PptCurCfgPrefixLen_Type()
)
pptCurCfgPrefixLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pptCurCfgPrefixLen.setStatus("current")
_PptCurCfgPrecedence_Type = Integer32
_PptCurCfgPrecedence_Object = MibTableColumn
pptCurCfgPrecedence = _PptCurCfgPrecedence_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 27, 2, 1, 4),
    _PptCurCfgPrecedence_Type()
)
pptCurCfgPrecedence.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pptCurCfgPrecedence.setStatus("current")
_PptCurCfgLabel_Type = Integer32
_PptCurCfgLabel_Object = MibTableColumn
pptCurCfgLabel = _PptCurCfgLabel_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 27, 2, 1, 5),
    _PptCurCfgLabel_Type()
)
pptCurCfgLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pptCurCfgLabel.setStatus("current")
_PptNewCfgTable_Object = MibTable
pptNewCfgTable = _PptNewCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 27, 3)
)
if mibBuilder.loadTexts:
    pptNewCfgTable.setStatus("current")
_PptNewCfgEntry_Object = MibTableRow
pptNewCfgEntry = _PptNewCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 27, 3, 1)
)
pptNewCfgEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "pptNewCfgIndx"),
)
if mibBuilder.loadTexts:
    pptNewCfgEntry.setStatus("current")
_PptNewCfgIndx_Type = Integer32
_PptNewCfgIndx_Object = MibTableColumn
pptNewCfgIndx = _PptNewCfgIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 27, 3, 1, 1),
    _PptNewCfgIndx_Type()
)
pptNewCfgIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pptNewCfgIndx.setStatus("current")


class _PptNewCfgPrefix_Type(DisplayString):
    """Custom type pptNewCfgPrefix based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_PptNewCfgPrefix_Type.__name__ = "DisplayString"
_PptNewCfgPrefix_Object = MibTableColumn
pptNewCfgPrefix = _PptNewCfgPrefix_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 27, 3, 1, 2),
    _PptNewCfgPrefix_Type()
)
pptNewCfgPrefix.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pptNewCfgPrefix.setStatus("current")
_PptNewCfgPrefixLen_Type = Integer32
_PptNewCfgPrefixLen_Object = MibTableColumn
pptNewCfgPrefixLen = _PptNewCfgPrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 27, 3, 1, 3),
    _PptNewCfgPrefixLen_Type()
)
pptNewCfgPrefixLen.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pptNewCfgPrefixLen.setStatus("current")
_PptNewCfgPrecedence_Type = Integer32
_PptNewCfgPrecedence_Object = MibTableColumn
pptNewCfgPrecedence = _PptNewCfgPrecedence_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 27, 3, 1, 4),
    _PptNewCfgPrecedence_Type()
)
pptNewCfgPrecedence.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pptNewCfgPrecedence.setStatus("current")
_PptNewCfgLabel_Type = Integer32
_PptNewCfgLabel_Object = MibTableColumn
pptNewCfgLabel = _PptNewCfgLabel_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 27, 3, 1, 5),
    _PptNewCfgLabel_Type()
)
pptNewCfgLabel.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pptNewCfgLabel.setStatus("current")


class _PptNewCfgAction_Type(Integer32):
    """Custom type pptNewCfgAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_PptNewCfgAction_Type.__name__ = "Integer32"
_PptNewCfgAction_Object = MibTableColumn
pptNewCfgAction = _PptNewCfgAction_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 27, 3, 1, 6),
    _PptNewCfgAction_Type()
)
pptNewCfgAction.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pptNewCfgAction.setStatus("current")
_Ipv6pmtuCfg_ObjectIdentity = ObjectIdentity
ipv6pmtuCfg = _Ipv6pmtuCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 28)
)
_Ipv6PmtuCurTimeout_Type = Integer32
_Ipv6PmtuCurTimeout_Object = MibScalar
ipv6PmtuCurTimeout = _Ipv6PmtuCurTimeout_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 28, 1),
    _Ipv6PmtuCurTimeout_Type()
)
ipv6PmtuCurTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6PmtuCurTimeout.setStatus("current")
_Ipv6PmtuNewTimeout_Type = Integer32
_Ipv6PmtuNewTimeout_Object = MibScalar
ipv6PmtuNewTimeout = _Ipv6PmtuNewTimeout_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 28, 2),
    _Ipv6PmtuNewTimeout_Type()
)
ipv6PmtuNewTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipv6PmtuNewTimeout.setStatus("current")


class _Ipv6PmtuEntriesClearAll_Type(Integer32):
    """Custom type ipv6PmtuEntriesClearAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_Ipv6PmtuEntriesClearAll_Type.__name__ = "Integer32"
_Ipv6PmtuEntriesClearAll_Object = MibScalar
ipv6PmtuEntriesClearAll = _Ipv6PmtuEntriesClearAll_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 28, 3),
    _Ipv6PmtuEntriesClearAll_Type()
)
ipv6PmtuEntriesClearAll.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipv6PmtuEntriesClearAll.setStatus("current")
_FloodingCfg_ObjectIdentity = ObjectIdentity
floodingCfg = _FloodingCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 29)
)
_VlanFloodCurCfgTable_Object = MibTable
vlanFloodCurCfgTable = _VlanFloodCurCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 29, 1)
)
if mibBuilder.loadTexts:
    vlanFloodCurCfgTable.setStatus("current")
_VlanFloodCurCfgTableEntry_Object = MibTableRow
vlanFloodCurCfgTableEntry = _VlanFloodCurCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 29, 1, 1)
)
vlanFloodCurCfgTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vlanFloodCurCfgVlanId"),
)
if mibBuilder.loadTexts:
    vlanFloodCurCfgTableEntry.setStatus("current")
_VlanFloodCurCfgVlanId_Type = Integer32
_VlanFloodCurCfgVlanId_Object = MibTableColumn
vlanFloodCurCfgVlanId = _VlanFloodCurCfgVlanId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 29, 1, 1, 1),
    _VlanFloodCurCfgVlanId_Type()
)
vlanFloodCurCfgVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanFloodCurCfgVlanId.setStatus("current")


class _VlanFloodCurCfgFlood_Type(Integer32):
    """Custom type vlanFloodCurCfgFlood based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_VlanFloodCurCfgFlood_Type.__name__ = "Integer32"
_VlanFloodCurCfgFlood_Object = MibTableColumn
vlanFloodCurCfgFlood = _VlanFloodCurCfgFlood_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 29, 1, 1, 2),
    _VlanFloodCurCfgFlood_Type()
)
vlanFloodCurCfgFlood.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanFloodCurCfgFlood.setStatus("current")


class _VlanFloodCurCfgCpu_Type(Integer32):
    """Custom type vlanFloodCurCfgCpu based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_VlanFloodCurCfgCpu_Type.__name__ = "Integer32"
_VlanFloodCurCfgCpu_Object = MibTableColumn
vlanFloodCurCfgCpu = _VlanFloodCurCfgCpu_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 29, 1, 1, 3),
    _VlanFloodCurCfgCpu_Type()
)
vlanFloodCurCfgCpu.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanFloodCurCfgCpu.setStatus("current")


class _VlanFloodCurCfgOptFlood_Type(Integer32):
    """Custom type vlanFloodCurCfgOptFlood based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_VlanFloodCurCfgOptFlood_Type.__name__ = "Integer32"
_VlanFloodCurCfgOptFlood_Object = MibTableColumn
vlanFloodCurCfgOptFlood = _VlanFloodCurCfgOptFlood_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 29, 1, 1, 4),
    _VlanFloodCurCfgOptFlood_Type()
)
vlanFloodCurCfgOptFlood.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanFloodCurCfgOptFlood.setStatus("current")
_VlanFloodNewCfgTable_Object = MibTable
vlanFloodNewCfgTable = _VlanFloodNewCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 29, 2)
)
if mibBuilder.loadTexts:
    vlanFloodNewCfgTable.setStatus("current")
_VlanFloodNewCfgTableEntry_Object = MibTableRow
vlanFloodNewCfgTableEntry = _VlanFloodNewCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 29, 2, 1)
)
vlanFloodNewCfgTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vlanFloodNewCfgVlanId"),
)
if mibBuilder.loadTexts:
    vlanFloodNewCfgTableEntry.setStatus("current")
_VlanFloodNewCfgVlanId_Type = Integer32
_VlanFloodNewCfgVlanId_Object = MibTableColumn
vlanFloodNewCfgVlanId = _VlanFloodNewCfgVlanId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 29, 2, 1, 1),
    _VlanFloodNewCfgVlanId_Type()
)
vlanFloodNewCfgVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanFloodNewCfgVlanId.setStatus("current")


class _VlanFloodNewCfgFlood_Type(Integer32):
    """Custom type vlanFloodNewCfgFlood based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_VlanFloodNewCfgFlood_Type.__name__ = "Integer32"
_VlanFloodNewCfgFlood_Object = MibTableColumn
vlanFloodNewCfgFlood = _VlanFloodNewCfgFlood_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 29, 2, 1, 2),
    _VlanFloodNewCfgFlood_Type()
)
vlanFloodNewCfgFlood.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanFloodNewCfgFlood.setStatus("current")


class _VlanFloodNewCfgCpu_Type(Integer32):
    """Custom type vlanFloodNewCfgCpu based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_VlanFloodNewCfgCpu_Type.__name__ = "Integer32"
_VlanFloodNewCfgCpu_Object = MibTableColumn
vlanFloodNewCfgCpu = _VlanFloodNewCfgCpu_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 29, 2, 1, 3),
    _VlanFloodNewCfgCpu_Type()
)
vlanFloodNewCfgCpu.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanFloodNewCfgCpu.setStatus("current")


class _VlanFloodNewCfgOptFlood_Type(Integer32):
    """Custom type vlanFloodNewCfgOptFlood based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_VlanFloodNewCfgOptFlood_Type.__name__ = "Integer32"
_VlanFloodNewCfgOptFlood_Object = MibTableColumn
vlanFloodNewCfgOptFlood = _VlanFloodNewCfgOptFlood_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 29, 2, 1, 4),
    _VlanFloodNewCfgOptFlood_Type()
)
vlanFloodNewCfgOptFlood.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vlanFloodNewCfgOptFlood.setStatus("current")
_MldCfg_ObjectIdentity = ObjectIdentity
mldCfg = _MldCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 30)
)


class _MldCurCfgState_Type(Integer32):
    """Custom type mldCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_MldCurCfgState_Type.__name__ = "Integer32"
_MldCurCfgState_Object = MibScalar
mldCurCfgState = _MldCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 30, 1),
    _MldCurCfgState_Type()
)
mldCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldCurCfgState.setStatus("current")


class _MldNewCfgState_Type(Integer32):
    """Custom type mldNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_MldNewCfgState_Type.__name__ = "Integer32"
_MldNewCfgState_Object = MibScalar
mldNewCfgState = _MldNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 30, 2),
    _MldNewCfgState_Type()
)
mldNewCfgState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mldNewCfgState.setStatus("current")
_MldCurInterfaceTable_Object = MibTable
mldCurInterfaceTable = _MldCurInterfaceTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 30, 3)
)
if mibBuilder.loadTexts:
    mldCurInterfaceTable.setStatus("current")
_MldCurInterfaceEntry_Object = MibTableRow
mldCurInterfaceEntry = _MldCurInterfaceEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 30, 3, 1)
)
mldCurInterfaceEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "mldCurInterfaceIfIndex"),
)
if mibBuilder.loadTexts:
    mldCurInterfaceEntry.setStatus("current")
_MldCurInterfaceIfIndex_Type = Integer32
_MldCurInterfaceIfIndex_Object = MibTableColumn
mldCurInterfaceIfIndex = _MldCurInterfaceIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 30, 3, 1, 1),
    _MldCurInterfaceIfIndex_Type()
)
mldCurInterfaceIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldCurInterfaceIfIndex.setStatus("current")


class _MldCurInterfaceQueryInterval_Type(Integer32):
    """Custom type mldCurInterfaceQueryInterval based on Integer32"""
    defaultValue = 125


_MldCurInterfaceQueryInterval_Type.__name__ = "Integer32"
_MldCurInterfaceQueryInterval_Object = MibTableColumn
mldCurInterfaceQueryInterval = _MldCurInterfaceQueryInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 30, 3, 1, 2),
    _MldCurInterfaceQueryInterval_Type()
)
mldCurInterfaceQueryInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldCurInterfaceQueryInterval.setStatus("current")
if mibBuilder.loadTexts:
    mldCurInterfaceQueryInterval.setUnits("seconds")


class _MldCurInterfaceVersion_Type(Integer32):
    """Custom type mldCurInterfaceVersion based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("mldv1", 1),
          ("mldv2", 2))
    )


_MldCurInterfaceVersion_Type.__name__ = "Integer32"
_MldCurInterfaceVersion_Object = MibTableColumn
mldCurInterfaceVersion = _MldCurInterfaceVersion_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 30, 3, 1, 3),
    _MldCurInterfaceVersion_Type()
)
mldCurInterfaceVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldCurInterfaceVersion.setStatus("current")


class _MldCurInterfaceQueryMaxResponseIntvl_Type(Integer32):
    """Custom type mldCurInterfaceQueryMaxResponseIntvl based on Integer32"""
    defaultValue = 1000


_MldCurInterfaceQueryMaxResponseIntvl_Type.__name__ = "Integer32"
_MldCurInterfaceQueryMaxResponseIntvl_Object = MibTableColumn
mldCurInterfaceQueryMaxResponseIntvl = _MldCurInterfaceQueryMaxResponseIntvl_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 30, 3, 1, 4),
    _MldCurInterfaceQueryMaxResponseIntvl_Type()
)
mldCurInterfaceQueryMaxResponseIntvl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldCurInterfaceQueryMaxResponseIntvl.setStatus("current")
if mibBuilder.loadTexts:
    mldCurInterfaceQueryMaxResponseIntvl.setUnits("seconds")


class _MldCurInterfaceRobustness_Type(Integer32):
    """Custom type mldCurInterfaceRobustness based on Integer32"""
    defaultValue = 2


_MldCurInterfaceRobustness_Type.__name__ = "Integer32"
_MldCurInterfaceRobustness_Object = MibTableColumn
mldCurInterfaceRobustness = _MldCurInterfaceRobustness_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 30, 3, 1, 5),
    _MldCurInterfaceRobustness_Type()
)
mldCurInterfaceRobustness.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldCurInterfaceRobustness.setStatus("current")


class _MldCurInterfaceLastListenQueryIntvl_Type(Integer32):
    """Custom type mldCurInterfaceLastListenQueryIntvl based on Integer32"""
    defaultValue = 1


_MldCurInterfaceLastListenQueryIntvl_Type.__name__ = "Integer32"
_MldCurInterfaceLastListenQueryIntvl_Object = MibTableColumn
mldCurInterfaceLastListenQueryIntvl = _MldCurInterfaceLastListenQueryIntvl_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 30, 3, 1, 6),
    _MldCurInterfaceLastListenQueryIntvl_Type()
)
mldCurInterfaceLastListenQueryIntvl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldCurInterfaceLastListenQueryIntvl.setStatus("current")
if mibBuilder.loadTexts:
    mldCurInterfaceLastListenQueryIntvl.setUnits("seconds")


class _MldCurInterfaceDMrtrEna_Type(Integer32):
    """Custom type mldCurInterfaceDMrtrEna based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MldCurInterfaceDMrtrEna_Type.__name__ = "Integer32"
_MldCurInterfaceDMrtrEna_Object = MibTableColumn
mldCurInterfaceDMrtrEna = _MldCurInterfaceDMrtrEna_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 30, 3, 1, 7),
    _MldCurInterfaceDMrtrEna_Type()
)
mldCurInterfaceDMrtrEna.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldCurInterfaceDMrtrEna.setStatus("current")


class _MldCurInterfaceState_Type(Integer32):
    """Custom type mldCurInterfaceState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MldCurInterfaceState_Type.__name__ = "Integer32"
_MldCurInterfaceState_Object = MibTableColumn
mldCurInterfaceState = _MldCurInterfaceState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 30, 3, 1, 8),
    _MldCurInterfaceState_Type()
)
mldCurInterfaceState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldCurInterfaceState.setStatus("current")
_MldNewInterfaceTable_Object = MibTable
mldNewInterfaceTable = _MldNewInterfaceTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 30, 4)
)
if mibBuilder.loadTexts:
    mldNewInterfaceTable.setStatus("current")
_MldNewInterfaceEntry_Object = MibTableRow
mldNewInterfaceEntry = _MldNewInterfaceEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 30, 4, 1)
)
mldNewInterfaceEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "mldNewInterfaceIfIndex"),
)
if mibBuilder.loadTexts:
    mldNewInterfaceEntry.setStatus("current")
_MldNewInterfaceIfIndex_Type = Integer32
_MldNewInterfaceIfIndex_Object = MibTableColumn
mldNewInterfaceIfIndex = _MldNewInterfaceIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 30, 4, 1, 1),
    _MldNewInterfaceIfIndex_Type()
)
mldNewInterfaceIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldNewInterfaceIfIndex.setStatus("current")


class _MldNewInterfaceQueryInterval_Type(Integer32):
    """Custom type mldNewInterfaceQueryInterval based on Integer32"""
    defaultValue = 125

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 65535),
    )


_MldNewInterfaceQueryInterval_Type.__name__ = "Integer32"
_MldNewInterfaceQueryInterval_Object = MibTableColumn
mldNewInterfaceQueryInterval = _MldNewInterfaceQueryInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 30, 4, 1, 2),
    _MldNewInterfaceQueryInterval_Type()
)
mldNewInterfaceQueryInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mldNewInterfaceQueryInterval.setStatus("current")
if mibBuilder.loadTexts:
    mldNewInterfaceQueryInterval.setUnits("seconds")


class _MldNewInterfaceVersion_Type(Integer32):
    """Custom type mldNewInterfaceVersion based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("mldv1", 1),
          ("mldv2", 2))
    )


_MldNewInterfaceVersion_Type.__name__ = "Integer32"
_MldNewInterfaceVersion_Object = MibTableColumn
mldNewInterfaceVersion = _MldNewInterfaceVersion_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 30, 4, 1, 3),
    _MldNewInterfaceVersion_Type()
)
mldNewInterfaceVersion.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mldNewInterfaceVersion.setStatus("current")


class _MldNewInterfaceQueryMaxResponseIntvl_Type(Integer32):
    """Custom type mldNewInterfaceQueryMaxResponseIntvl based on Integer32"""
    defaultValue = 10000

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1000, 65535),
    )


_MldNewInterfaceQueryMaxResponseIntvl_Type.__name__ = "Integer32"
_MldNewInterfaceQueryMaxResponseIntvl_Object = MibTableColumn
mldNewInterfaceQueryMaxResponseIntvl = _MldNewInterfaceQueryMaxResponseIntvl_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 30, 4, 1, 4),
    _MldNewInterfaceQueryMaxResponseIntvl_Type()
)
mldNewInterfaceQueryMaxResponseIntvl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mldNewInterfaceQueryMaxResponseIntvl.setStatus("current")
if mibBuilder.loadTexts:
    mldNewInterfaceQueryMaxResponseIntvl.setUnits("seconds")


class _MldNewInterfaceRobustness_Type(Integer32):
    """Custom type mldNewInterfaceRobustness based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_MldNewInterfaceRobustness_Type.__name__ = "Integer32"
_MldNewInterfaceRobustness_Object = MibTableColumn
mldNewInterfaceRobustness = _MldNewInterfaceRobustness_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 30, 4, 1, 5),
    _MldNewInterfaceRobustness_Type()
)
mldNewInterfaceRobustness.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mldNewInterfaceRobustness.setStatus("current")


class _MldNewInterfaceLastListenQueryIntvl_Type(Integer32):
    """Custom type mldNewInterfaceLastListenQueryIntvl based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_MldNewInterfaceLastListenQueryIntvl_Type.__name__ = "Integer32"
_MldNewInterfaceLastListenQueryIntvl_Object = MibTableColumn
mldNewInterfaceLastListenQueryIntvl = _MldNewInterfaceLastListenQueryIntvl_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 30, 4, 1, 6),
    _MldNewInterfaceLastListenQueryIntvl_Type()
)
mldNewInterfaceLastListenQueryIntvl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mldNewInterfaceLastListenQueryIntvl.setStatus("current")
if mibBuilder.loadTexts:
    mldNewInterfaceLastListenQueryIntvl.setUnits("seconds")


class _MldNewInterfaceDMrtrEna_Type(Integer32):
    """Custom type mldNewInterfaceDMrtrEna based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MldNewInterfaceDMrtrEna_Type.__name__ = "Integer32"
_MldNewInterfaceDMrtrEna_Object = MibTableColumn
mldNewInterfaceDMrtrEna = _MldNewInterfaceDMrtrEna_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 30, 4, 1, 7),
    _MldNewInterfaceDMrtrEna_Type()
)
mldNewInterfaceDMrtrEna.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mldNewInterfaceDMrtrEna.setStatus("current")


class _MldNewInterfaceState_Type(Integer32):
    """Custom type mldNewInterfaceState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MldNewInterfaceState_Type.__name__ = "Integer32"
_MldNewInterfaceState_Object = MibTableColumn
mldNewInterfaceState = _MldNewInterfaceState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 30, 4, 1, 8),
    _MldNewInterfaceState_Type()
)
mldNewInterfaceState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mldNewInterfaceState.setStatus("current")


class _MldNewInterfaceDefault_Type(Integer32):
    """Custom type mldNewInterfaceDefault based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("default", 2))
    )


_MldNewInterfaceDefault_Type.__name__ = "Integer32"
_MldNewInterfaceDefault_Object = MibTableColumn
mldNewInterfaceDefault = _MldNewInterfaceDefault_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 30, 4, 1, 9),
    _MldNewInterfaceDefault_Type()
)
mldNewInterfaceDefault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mldNewInterfaceDefault.setStatus("current")


class _MldDefaultCfgState_Type(Integer32):
    """Custom type mldDefaultCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("default", 2))
    )


_MldDefaultCfgState_Type.__name__ = "Integer32"
_MldDefaultCfgState_Object = MibScalar
mldDefaultCfgState = _MldDefaultCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 30, 5),
    _MldDefaultCfgState_Type()
)
mldDefaultCfgState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mldDefaultCfgState.setStatus("current")
_NdprefixCfg_ObjectIdentity = ObjectIdentity
ndprefixCfg = _NdprefixCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 31)
)
_NdprefixTableMaxSize_Type = Integer32
_NdprefixTableMaxSize_Object = MibScalar
ndprefixTableMaxSize = _NdprefixTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 31, 1),
    _NdprefixTableMaxSize_Type()
)
ndprefixTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ndprefixTableMaxSize.setStatus("current")
_NdprefixCurCfgTable_Object = MibTable
ndprefixCurCfgTable = _NdprefixCurCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 31, 2)
)
if mibBuilder.loadTexts:
    ndprefixCurCfgTable.setStatus("current")
_NdprefixCurCfgEntry_Object = MibTableRow
ndprefixCurCfgEntry = _NdprefixCurCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 31, 2, 1)
)
ndprefixCurCfgEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ndprefixCurCfgIndx"),
)
if mibBuilder.loadTexts:
    ndprefixCurCfgEntry.setStatus("current")


class _NdprefixCurCfgIndx_Type(Integer32):
    """Custom type ndprefixCurCfgIndx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_NdprefixCurCfgIndx_Type.__name__ = "Integer32"
_NdprefixCurCfgIndx_Object = MibTableColumn
ndprefixCurCfgIndx = _NdprefixCurCfgIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 31, 2, 1, 1),
    _NdprefixCurCfgIndx_Type()
)
ndprefixCurCfgIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ndprefixCurCfgIndx.setStatus("current")
_NdprefixCurCfgPrefix_Type = DisplayString
_NdprefixCurCfgPrefix_Object = MibTableColumn
ndprefixCurCfgPrefix = _NdprefixCurCfgPrefix_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 31, 2, 1, 2),
    _NdprefixCurCfgPrefix_Type()
)
ndprefixCurCfgPrefix.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ndprefixCurCfgPrefix.setStatus("current")


class _NdprefixCurCfgPrefixLen_Type(Integer32):
    """Custom type ndprefixCurCfgPrefixLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_NdprefixCurCfgPrefixLen_Type.__name__ = "Integer32"
_NdprefixCurCfgPrefixLen_Object = MibTableColumn
ndprefixCurCfgPrefixLen = _NdprefixCurCfgPrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 31, 2, 1, 3),
    _NdprefixCurCfgPrefixLen_Type()
)
ndprefixCurCfgPrefixLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ndprefixCurCfgPrefixLen.setStatus("current")
_NdprefixCurCfgInterfaceIndex_Type = Integer32
_NdprefixCurCfgInterfaceIndex_Object = MibTableColumn
ndprefixCurCfgInterfaceIndex = _NdprefixCurCfgInterfaceIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 31, 2, 1, 4),
    _NdprefixCurCfgInterfaceIndex_Type()
)
ndprefixCurCfgInterfaceIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ndprefixCurCfgInterfaceIndex.setStatus("current")


class _NdprefixCurCfgProfileIndex_Type(Integer32):
    """Custom type ndprefixCurCfgProfileIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 127),
    )


_NdprefixCurCfgProfileIndex_Type.__name__ = "Integer32"
_NdprefixCurCfgProfileIndex_Object = MibTableColumn
ndprefixCurCfgProfileIndex = _NdprefixCurCfgProfileIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 31, 2, 1, 5),
    _NdprefixCurCfgProfileIndex_Type()
)
ndprefixCurCfgProfileIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ndprefixCurCfgProfileIndex.setStatus("current")


class _NdprefixCurCfgValidLifetime_Type(Gauge32):
    """Custom type ndprefixCurCfgValidLifetime based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_NdprefixCurCfgValidLifetime_Type.__name__ = "Gauge32"
_NdprefixCurCfgValidLifetime_Object = MibTableColumn
ndprefixCurCfgValidLifetime = _NdprefixCurCfgValidLifetime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 31, 2, 1, 6),
    _NdprefixCurCfgValidLifetime_Type()
)
ndprefixCurCfgValidLifetime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ndprefixCurCfgValidLifetime.setStatus("current")


class _NdprefixCurCfgValidLifetimeFlag_Type(Integer32):
    """Custom type ndprefixCurCfgValidLifetimeFlag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_NdprefixCurCfgValidLifetimeFlag_Type.__name__ = "Integer32"
_NdprefixCurCfgValidLifetimeFlag_Object = MibTableColumn
ndprefixCurCfgValidLifetimeFlag = _NdprefixCurCfgValidLifetimeFlag_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 31, 2, 1, 7),
    _NdprefixCurCfgValidLifetimeFlag_Type()
)
ndprefixCurCfgValidLifetimeFlag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ndprefixCurCfgValidLifetimeFlag.setStatus("current")


class _NdprefixCurCfgPreferredLifetime_Type(Gauge32):
    """Custom type ndprefixCurCfgPreferredLifetime based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_NdprefixCurCfgPreferredLifetime_Type.__name__ = "Gauge32"
_NdprefixCurCfgPreferredLifetime_Object = MibTableColumn
ndprefixCurCfgPreferredLifetime = _NdprefixCurCfgPreferredLifetime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 31, 2, 1, 8),
    _NdprefixCurCfgPreferredLifetime_Type()
)
ndprefixCurCfgPreferredLifetime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ndprefixCurCfgPreferredLifetime.setStatus("current")


class _NdprefixCurCfgPreferredLifetimeFlag_Type(Integer32):
    """Custom type ndprefixCurCfgPreferredLifetimeFlag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_NdprefixCurCfgPreferredLifetimeFlag_Type.__name__ = "Integer32"
_NdprefixCurCfgPreferredLifetimeFlag_Object = MibTableColumn
ndprefixCurCfgPreferredLifetimeFlag = _NdprefixCurCfgPreferredLifetimeFlag_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 31, 2, 1, 9),
    _NdprefixCurCfgPreferredLifetimeFlag_Type()
)
ndprefixCurCfgPreferredLifetimeFlag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ndprefixCurCfgPreferredLifetimeFlag.setStatus("current")


class _NdprefixCurCfgOnlinkFlag_Type(Integer32):
    """Custom type ndprefixCurCfgOnlinkFlag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_NdprefixCurCfgOnlinkFlag_Type.__name__ = "Integer32"
_NdprefixCurCfgOnlinkFlag_Object = MibTableColumn
ndprefixCurCfgOnlinkFlag = _NdprefixCurCfgOnlinkFlag_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 31, 2, 1, 10),
    _NdprefixCurCfgOnlinkFlag_Type()
)
ndprefixCurCfgOnlinkFlag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ndprefixCurCfgOnlinkFlag.setStatus("current")


class _NdprefixCurCfgAutonomousFlag_Type(Integer32):
    """Custom type ndprefixCurCfgAutonomousFlag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_NdprefixCurCfgAutonomousFlag_Type.__name__ = "Integer32"
_NdprefixCurCfgAutonomousFlag_Object = MibTableColumn
ndprefixCurCfgAutonomousFlag = _NdprefixCurCfgAutonomousFlag_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 31, 2, 1, 11),
    _NdprefixCurCfgAutonomousFlag_Type()
)
ndprefixCurCfgAutonomousFlag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ndprefixCurCfgAutonomousFlag.setStatus("current")


class _NdprefixCurCfgState_Type(Integer32):
    """Custom type ndprefixCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_NdprefixCurCfgState_Type.__name__ = "Integer32"
_NdprefixCurCfgState_Object = MibTableColumn
ndprefixCurCfgState = _NdprefixCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 31, 2, 1, 12),
    _NdprefixCurCfgState_Type()
)
ndprefixCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ndprefixCurCfgState.setStatus("current")
_NdprefixNewCfgTable_Object = MibTable
ndprefixNewCfgTable = _NdprefixNewCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 31, 3)
)
if mibBuilder.loadTexts:
    ndprefixNewCfgTable.setStatus("current")
_NdprefixNewCfgEntry_Object = MibTableRow
ndprefixNewCfgEntry = _NdprefixNewCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 31, 3, 1)
)
ndprefixNewCfgEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ndprefixNewCfgIndx"),
)
if mibBuilder.loadTexts:
    ndprefixNewCfgEntry.setStatus("current")
_NdprefixNewCfgIndx_Type = Integer32
_NdprefixNewCfgIndx_Object = MibTableColumn
ndprefixNewCfgIndx = _NdprefixNewCfgIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 31, 3, 1, 1),
    _NdprefixNewCfgIndx_Type()
)
ndprefixNewCfgIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ndprefixNewCfgIndx.setStatus("current")
_NdprefixNewCfgPrefix_Type = DisplayString
_NdprefixNewCfgPrefix_Object = MibTableColumn
ndprefixNewCfgPrefix = _NdprefixNewCfgPrefix_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 31, 3, 1, 2),
    _NdprefixNewCfgPrefix_Type()
)
ndprefixNewCfgPrefix.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ndprefixNewCfgPrefix.setStatus("current")


class _NdprefixNewCfgPrefixLen_Type(Integer32):
    """Custom type ndprefixNewCfgPrefixLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_NdprefixNewCfgPrefixLen_Type.__name__ = "Integer32"
_NdprefixNewCfgPrefixLen_Object = MibTableColumn
ndprefixNewCfgPrefixLen = _NdprefixNewCfgPrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 31, 3, 1, 3),
    _NdprefixNewCfgPrefixLen_Type()
)
ndprefixNewCfgPrefixLen.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ndprefixNewCfgPrefixLen.setStatus("current")
_NdprefixNewCfgInterfaceIndex_Type = Integer32
_NdprefixNewCfgInterfaceIndex_Object = MibTableColumn
ndprefixNewCfgInterfaceIndex = _NdprefixNewCfgInterfaceIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 31, 3, 1, 4),
    _NdprefixNewCfgInterfaceIndex_Type()
)
ndprefixNewCfgInterfaceIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ndprefixNewCfgInterfaceIndex.setStatus("current")


class _NdprefixNewCfgProfileIndex_Type(Integer32):
    """Custom type ndprefixNewCfgProfileIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 127),
    )


_NdprefixNewCfgProfileIndex_Type.__name__ = "Integer32"
_NdprefixNewCfgProfileIndex_Object = MibTableColumn
ndprefixNewCfgProfileIndex = _NdprefixNewCfgProfileIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 31, 3, 1, 5),
    _NdprefixNewCfgProfileIndex_Type()
)
ndprefixNewCfgProfileIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ndprefixNewCfgProfileIndex.setStatus("current")


class _NdprefixNewCfgValidLifetime_Type(Gauge32):
    """Custom type ndprefixNewCfgValidLifetime based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_NdprefixNewCfgValidLifetime_Type.__name__ = "Gauge32"
_NdprefixNewCfgValidLifetime_Object = MibTableColumn
ndprefixNewCfgValidLifetime = _NdprefixNewCfgValidLifetime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 31, 3, 1, 6),
    _NdprefixNewCfgValidLifetime_Type()
)
ndprefixNewCfgValidLifetime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ndprefixNewCfgValidLifetime.setStatus("current")


class _NdprefixNewCfgValidLifetimeFlag_Type(Integer32):
    """Custom type ndprefixNewCfgValidLifetimeFlag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_NdprefixNewCfgValidLifetimeFlag_Type.__name__ = "Integer32"
_NdprefixNewCfgValidLifetimeFlag_Object = MibTableColumn
ndprefixNewCfgValidLifetimeFlag = _NdprefixNewCfgValidLifetimeFlag_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 31, 3, 1, 7),
    _NdprefixNewCfgValidLifetimeFlag_Type()
)
ndprefixNewCfgValidLifetimeFlag.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ndprefixNewCfgValidLifetimeFlag.setStatus("current")


class _NdprefixNewCfgPreferredLifetime_Type(Gauge32):
    """Custom type ndprefixNewCfgPreferredLifetime based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_NdprefixNewCfgPreferredLifetime_Type.__name__ = "Gauge32"
_NdprefixNewCfgPreferredLifetime_Object = MibTableColumn
ndprefixNewCfgPreferredLifetime = _NdprefixNewCfgPreferredLifetime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 31, 3, 1, 8),
    _NdprefixNewCfgPreferredLifetime_Type()
)
ndprefixNewCfgPreferredLifetime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ndprefixNewCfgPreferredLifetime.setStatus("current")


class _NdprefixNewCfgPreferredLifetimeFlag_Type(Integer32):
    """Custom type ndprefixNewCfgPreferredLifetimeFlag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_NdprefixNewCfgPreferredLifetimeFlag_Type.__name__ = "Integer32"
_NdprefixNewCfgPreferredLifetimeFlag_Object = MibTableColumn
ndprefixNewCfgPreferredLifetimeFlag = _NdprefixNewCfgPreferredLifetimeFlag_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 31, 3, 1, 9),
    _NdprefixNewCfgPreferredLifetimeFlag_Type()
)
ndprefixNewCfgPreferredLifetimeFlag.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ndprefixNewCfgPreferredLifetimeFlag.setStatus("current")


class _NdprefixNewCfgOnlinkFlag_Type(Integer32):
    """Custom type ndprefixNewCfgOnlinkFlag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_NdprefixNewCfgOnlinkFlag_Type.__name__ = "Integer32"
_NdprefixNewCfgOnlinkFlag_Object = MibTableColumn
ndprefixNewCfgOnlinkFlag = _NdprefixNewCfgOnlinkFlag_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 31, 3, 1, 10),
    _NdprefixNewCfgOnlinkFlag_Type()
)
ndprefixNewCfgOnlinkFlag.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ndprefixNewCfgOnlinkFlag.setStatus("current")


class _NdprefixNewCfgAutonomousFlag_Type(Integer32):
    """Custom type ndprefixNewCfgAutonomousFlag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_NdprefixNewCfgAutonomousFlag_Type.__name__ = "Integer32"
_NdprefixNewCfgAutonomousFlag_Object = MibTableColumn
ndprefixNewCfgAutonomousFlag = _NdprefixNewCfgAutonomousFlag_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 31, 3, 1, 11),
    _NdprefixNewCfgAutonomousFlag_Type()
)
ndprefixNewCfgAutonomousFlag.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ndprefixNewCfgAutonomousFlag.setStatus("current")


class _NdprefixNewCfgState_Type(Integer32):
    """Custom type ndprefixNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_NdprefixNewCfgState_Type.__name__ = "Integer32"
_NdprefixNewCfgState_Object = MibTableColumn
ndprefixNewCfgState = _NdprefixNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 31, 3, 1, 12),
    _NdprefixNewCfgState_Type()
)
ndprefixNewCfgState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ndprefixNewCfgState.setStatus("current")


class _NdprefixNewCfgAction_Type(Integer32):
    """Custom type ndprefixNewCfgAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2),
          ("deleteall", 3))
    )


_NdprefixNewCfgAction_Type.__name__ = "Integer32"
_NdprefixNewCfgAction_Object = MibTableColumn
ndprefixNewCfgAction = _NdprefixNewCfgAction_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 31, 3, 1, 13),
    _NdprefixNewCfgAction_Type()
)
ndprefixNewCfgAction.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ndprefixNewCfgAction.setStatus("current")
_IpsecCfg_ObjectIdentity = ObjectIdentity
ipsecCfg = _IpsecCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32)
)
_IkeGroup_ObjectIdentity = ObjectIdentity
ikeGroup = _IkeGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 1)
)
_IkeCurCfgProposal_ObjectIdentity = ObjectIdentity
ikeCurCfgProposal = _IkeCurCfgProposal_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 1, 1)
)


class _IkeCurCfgPropCipher_Type(Integer32):
    """Custom type ikeCurCfgPropCipher based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("des", 1),
          ("triple-des", 2),
          ("aes-cbc", 3))
    )


_IkeCurCfgPropCipher_Type.__name__ = "Integer32"
_IkeCurCfgPropCipher_Object = MibScalar
ikeCurCfgPropCipher = _IkeCurCfgPropCipher_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 1, 1, 1),
    _IkeCurCfgPropCipher_Type()
)
ikeCurCfgPropCipher.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ikeCurCfgPropCipher.setStatus("current")


class _IkeCurCfgPropAuth_Type(Integer32):
    """Custom type ikeCurCfgPropAuth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("sha1", 1),
          ("md5", 2))
    )


_IkeCurCfgPropAuth_Type.__name__ = "Integer32"
_IkeCurCfgPropAuth_Object = MibScalar
ikeCurCfgPropAuth = _IkeCurCfgPropAuth_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 1, 1, 2),
    _IkeCurCfgPropAuth_Type()
)
ikeCurCfgPropAuth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ikeCurCfgPropAuth.setStatus("current")


class _IkeCurCfgPropGroup_Type(Integer32):
    """Custom type ikeCurCfgPropGroup based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("dhGroup1", 1),
          ("dhGroup2", 2),
          ("dhGroup5", 3),
          ("dhGroup14", 4),
          ("dhGroup24", 5))
    )


_IkeCurCfgPropGroup_Type.__name__ = "Integer32"
_IkeCurCfgPropGroup_Object = MibScalar
ikeCurCfgPropGroup = _IkeCurCfgPropGroup_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 1, 1, 3),
    _IkeCurCfgPropGroup_Type()
)
ikeCurCfgPropGroup.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ikeCurCfgPropGroup.setStatus("current")
_IkeNewCfgProposal_ObjectIdentity = ObjectIdentity
ikeNewCfgProposal = _IkeNewCfgProposal_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 1, 2)
)


class _IkeNewCfgPropCipher_Type(Integer32):
    """Custom type ikeNewCfgPropCipher based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("des", 1),
          ("triple-des", 2),
          ("aes-cbc", 3))
    )


_IkeNewCfgPropCipher_Type.__name__ = "Integer32"
_IkeNewCfgPropCipher_Object = MibScalar
ikeNewCfgPropCipher = _IkeNewCfgPropCipher_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 1, 2, 1),
    _IkeNewCfgPropCipher_Type()
)
ikeNewCfgPropCipher.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ikeNewCfgPropCipher.setStatus("current")


class _IkeNewCfgPropAuth_Type(Integer32):
    """Custom type ikeNewCfgPropAuth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("sha1", 1),
          ("md5", 2))
    )


_IkeNewCfgPropAuth_Type.__name__ = "Integer32"
_IkeNewCfgPropAuth_Object = MibScalar
ikeNewCfgPropAuth = _IkeNewCfgPropAuth_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 1, 2, 2),
    _IkeNewCfgPropAuth_Type()
)
ikeNewCfgPropAuth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ikeNewCfgPropAuth.setStatus("current")


class _IkeNewCfgPropGroup_Type(Integer32):
    """Custom type ikeNewCfgPropGroup based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("dhGroup1", 1),
          ("dhGroup2", 2),
          ("dhGroup5", 3),
          ("dhGroup14", 4),
          ("dhGroup24", 5))
    )


_IkeNewCfgPropGroup_Type.__name__ = "Integer32"
_IkeNewCfgPropGroup_Object = MibScalar
ikeNewCfgPropGroup = _IkeNewCfgPropGroup_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 1, 2, 3),
    _IkeNewCfgPropGroup_Type()
)
ikeNewCfgPropGroup.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ikeNewCfgPropGroup.setStatus("current")
_IkeCurCfgPsk_ObjectIdentity = ObjectIdentity
ikeCurCfgPsk = _IkeCurCfgPsk_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 1, 3)
)


class _IkeCurCfgPskLocalKey_Type(IPsecKeyString):
    """Custom type ikeCurCfgPskLocalKey based on IPsecKeyString"""
    subtypeSpec = IPsecKeyString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 256),
    )


_IkeCurCfgPskLocalKey_Type.__name__ = "IPsecKeyString"
_IkeCurCfgPskLocalKey_Object = MibScalar
ikeCurCfgPskLocalKey = _IkeCurCfgPskLocalKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 1, 3, 1),
    _IkeCurCfgPskLocalKey_Type()
)
ikeCurCfgPskLocalKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ikeCurCfgPskLocalKey.setStatus("current")
_IkeCurCfgPskRemoteTable_Object = MibTable
ikeCurCfgPskRemoteTable = _IkeCurCfgPskRemoteTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 1, 3, 2)
)
if mibBuilder.loadTexts:
    ikeCurCfgPskRemoteTable.setStatus("current")
_IkeCurCfgPskRemoteEntry_Object = MibTableRow
ikeCurCfgPskRemoteEntry = _IkeCurCfgPskRemoteEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 1, 3, 2, 1)
)
ikeCurCfgPskRemoteEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ikeCurCfgPskRemoteIndex"),
)
if mibBuilder.loadTexts:
    ikeCurCfgPskRemoteEntry.setStatus("current")


class _IkeCurCfgPskRemoteIndex_Type(Unsigned32):
    """Custom type ikeCurCfgPskRemoteIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_IkeCurCfgPskRemoteIndex_Type.__name__ = "Unsigned32"
_IkeCurCfgPskRemoteIndex_Object = MibTableColumn
ikeCurCfgPskRemoteIndex = _IkeCurCfgPskRemoteIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 1, 3, 2, 1, 1),
    _IkeCurCfgPskRemoteIndex_Type()
)
ikeCurCfgPskRemoteIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ikeCurCfgPskRemoteIndex.setStatus("current")


class _IkeCurCfgPskRemoteAddr_Type(OctetString):
    """Custom type ikeCurCfgPskRemoteAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(16, 16),
    )
    fixed_length = 16


_IkeCurCfgPskRemoteAddr_Type.__name__ = "OctetString"
_IkeCurCfgPskRemoteAddr_Object = MibTableColumn
ikeCurCfgPskRemoteAddr = _IkeCurCfgPskRemoteAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 1, 3, 2, 1, 2),
    _IkeCurCfgPskRemoteAddr_Type()
)
ikeCurCfgPskRemoteAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ikeCurCfgPskRemoteAddr.setStatus("current")


class _IkeCurCfgPskRemoteKey_Type(IPsecKeyString):
    """Custom type ikeCurCfgPskRemoteKey based on IPsecKeyString"""
    subtypeSpec = IPsecKeyString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 256),
    )


_IkeCurCfgPskRemoteKey_Type.__name__ = "IPsecKeyString"
_IkeCurCfgPskRemoteKey_Object = MibTableColumn
ikeCurCfgPskRemoteKey = _IkeCurCfgPskRemoteKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 1, 3, 2, 1, 3),
    _IkeCurCfgPskRemoteKey_Type()
)
ikeCurCfgPskRemoteKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ikeCurCfgPskRemoteKey.setStatus("current")


class _IkeCurCfgPskRemoteDelete_Type(Integer32):
    """Custom type ikeCurCfgPskRemoteDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_IkeCurCfgPskRemoteDelete_Type.__name__ = "Integer32"
_IkeCurCfgPskRemoteDelete_Object = MibTableColumn
ikeCurCfgPskRemoteDelete = _IkeCurCfgPskRemoteDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 1, 3, 2, 1, 4),
    _IkeCurCfgPskRemoteDelete_Type()
)
ikeCurCfgPskRemoteDelete.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ikeCurCfgPskRemoteDelete.setStatus("current")
_IkeNewCfgPsk_ObjectIdentity = ObjectIdentity
ikeNewCfgPsk = _IkeNewCfgPsk_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 1, 4)
)


class _IkeNewCfgPskLocalKey_Type(IPsecKeyString):
    """Custom type ikeNewCfgPskLocalKey based on IPsecKeyString"""
    subtypeSpec = IPsecKeyString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 256),
    )


_IkeNewCfgPskLocalKey_Type.__name__ = "IPsecKeyString"
_IkeNewCfgPskLocalKey_Object = MibScalar
ikeNewCfgPskLocalKey = _IkeNewCfgPskLocalKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 1, 4, 1),
    _IkeNewCfgPskLocalKey_Type()
)
ikeNewCfgPskLocalKey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ikeNewCfgPskLocalKey.setStatus("current")
_IkeNewCfgPskRemoteTable_Object = MibTable
ikeNewCfgPskRemoteTable = _IkeNewCfgPskRemoteTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 1, 4, 2)
)
if mibBuilder.loadTexts:
    ikeNewCfgPskRemoteTable.setStatus("current")
_IkeNewCfgPskRemoteEntry_Object = MibTableRow
ikeNewCfgPskRemoteEntry = _IkeNewCfgPskRemoteEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 1, 4, 2, 1)
)
ikeNewCfgPskRemoteEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ikeNewCfgPskRemoteIndex"),
)
if mibBuilder.loadTexts:
    ikeNewCfgPskRemoteEntry.setStatus("current")


class _IkeNewCfgPskRemoteIndex_Type(Unsigned32):
    """Custom type ikeNewCfgPskRemoteIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_IkeNewCfgPskRemoteIndex_Type.__name__ = "Unsigned32"
_IkeNewCfgPskRemoteIndex_Object = MibTableColumn
ikeNewCfgPskRemoteIndex = _IkeNewCfgPskRemoteIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 1, 4, 2, 1, 1),
    _IkeNewCfgPskRemoteIndex_Type()
)
ikeNewCfgPskRemoteIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ikeNewCfgPskRemoteIndex.setStatus("current")


class _IkeNewCfgPskRemoteAddr_Type(OctetString):
    """Custom type ikeNewCfgPskRemoteAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(16, 16),
    )
    fixed_length = 16


_IkeNewCfgPskRemoteAddr_Type.__name__ = "OctetString"
_IkeNewCfgPskRemoteAddr_Object = MibTableColumn
ikeNewCfgPskRemoteAddr = _IkeNewCfgPskRemoteAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 1, 4, 2, 1, 2),
    _IkeNewCfgPskRemoteAddr_Type()
)
ikeNewCfgPskRemoteAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ikeNewCfgPskRemoteAddr.setStatus("current")


class _IkeNewCfgPskRemoteKey_Type(IPsecKeyString):
    """Custom type ikeNewCfgPskRemoteKey based on IPsecKeyString"""
    subtypeSpec = IPsecKeyString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 256),
    )


_IkeNewCfgPskRemoteKey_Type.__name__ = "IPsecKeyString"
_IkeNewCfgPskRemoteKey_Object = MibTableColumn
ikeNewCfgPskRemoteKey = _IkeNewCfgPskRemoteKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 1, 4, 2, 1, 3),
    _IkeNewCfgPskRemoteKey_Type()
)
ikeNewCfgPskRemoteKey.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ikeNewCfgPskRemoteKey.setStatus("current")


class _IkeNewCfgPskRemoteDelete_Type(Integer32):
    """Custom type ikeNewCfgPskRemoteDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_IkeNewCfgPskRemoteDelete_Type.__name__ = "Integer32"
_IkeNewCfgPskRemoteDelete_Object = MibTableColumn
ikeNewCfgPskRemoteDelete = _IkeNewCfgPskRemoteDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 1, 4, 2, 1, 4),
    _IkeNewCfgPskRemoteDelete_Type()
)
ikeNewCfgPskRemoteDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ikeNewCfgPskRemoteDelete.setStatus("current")
_IkeCurCfgIdentity_ObjectIdentity = ObjectIdentity
ikeCurCfgIdentity = _IkeCurCfgIdentity_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 1, 5)
)


class _IkeCurCfgIdType_Type(Integer32):
    """Custom type ikeCurCfgIdType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ipv6-addr", 0),
          ("fqdn", 1),
          ("email", 2))
    )


_IkeCurCfgIdType_Type.__name__ = "Integer32"
_IkeCurCfgIdType_Object = MibScalar
ikeCurCfgIdType = _IkeCurCfgIdType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 1, 5, 1),
    _IkeCurCfgIdType_Type()
)
ikeCurCfgIdType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ikeCurCfgIdType.setStatus("current")


class _IkeCurCfgIdData_Type(DisplayString):
    """Custom type ikeCurCfgIdData based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 100),
    )


_IkeCurCfgIdData_Type.__name__ = "DisplayString"
_IkeCurCfgIdData_Object = MibScalar
ikeCurCfgIdData = _IkeCurCfgIdData_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 1, 5, 2),
    _IkeCurCfgIdData_Type()
)
ikeCurCfgIdData.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ikeCurCfgIdData.setStatus("current")
_IkeNewCfgIdentity_ObjectIdentity = ObjectIdentity
ikeNewCfgIdentity = _IkeNewCfgIdentity_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 1, 6)
)


class _IkeNewCfgIdType_Type(Integer32):
    """Custom type ikeNewCfgIdType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ipv6-addr", 0),
          ("fqdn", 1),
          ("email", 2))
    )


_IkeNewCfgIdType_Type.__name__ = "Integer32"
_IkeNewCfgIdType_Object = MibScalar
ikeNewCfgIdType = _IkeNewCfgIdType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 1, 6, 1),
    _IkeNewCfgIdType_Type()
)
ikeNewCfgIdType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ikeNewCfgIdType.setStatus("current")


class _IkeNewCfgIdData_Type(DisplayString):
    """Custom type ikeNewCfgIdData based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 100),
    )


_IkeNewCfgIdData_Type.__name__ = "DisplayString"
_IkeNewCfgIdData_Object = MibScalar
ikeNewCfgIdData = _IkeNewCfgIdData_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 1, 6, 2),
    _IkeNewCfgIdData_Type()
)
ikeNewCfgIdData.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ikeNewCfgIdData.setStatus("current")


class _IkeCurCfgTxTimeout_Type(Unsigned32):
    """Custom type ikeCurCfgTxTimeout based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_IkeCurCfgTxTimeout_Type.__name__ = "Unsigned32"
_IkeCurCfgTxTimeout_Object = MibScalar
ikeCurCfgTxTimeout = _IkeCurCfgTxTimeout_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 1, 7),
    _IkeCurCfgTxTimeout_Type()
)
ikeCurCfgTxTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ikeCurCfgTxTimeout.setStatus("current")


class _IkeNewCfgTxTimeout_Type(Unsigned32):
    """Custom type ikeNewCfgTxTimeout based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_IkeNewCfgTxTimeout_Type.__name__ = "Unsigned32"
_IkeNewCfgTxTimeout_Object = MibScalar
ikeNewCfgTxTimeout = _IkeNewCfgTxTimeout_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 1, 8),
    _IkeNewCfgTxTimeout_Type()
)
ikeNewCfgTxTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ikeNewCfgTxTimeout.setStatus("current")


class _IkeCurCfgCookie_Type(Integer32):
    """Custom type ikeCurCfgCookie based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_IkeCurCfgCookie_Type.__name__ = "Integer32"
_IkeCurCfgCookie_Object = MibScalar
ikeCurCfgCookie = _IkeCurCfgCookie_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 1, 9),
    _IkeCurCfgCookie_Type()
)
ikeCurCfgCookie.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ikeCurCfgCookie.setStatus("current")


class _IkeNewCfgCookie_Type(Integer32):
    """Custom type ikeNewCfgCookie based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_IkeNewCfgCookie_Type.__name__ = "Integer32"
_IkeNewCfgCookie_Object = MibScalar
ikeNewCfgCookie = _IkeNewCfgCookie_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 1, 10),
    _IkeNewCfgCookie_Type()
)
ikeNewCfgCookie.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ikeNewCfgCookie.setStatus("current")
_IpsecGroup_ObjectIdentity = ObjectIdentity
ipsecGroup = _IpsecGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2)
)


class _IpsecCurCfgState_Type(Integer32):
    """Custom type ipsecCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_IpsecCurCfgState_Type.__name__ = "Integer32"
_IpsecCurCfgState_Object = MibScalar
ipsecCurCfgState = _IpsecCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 1),
    _IpsecCurCfgState_Type()
)
ipsecCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgState.setStatus("current")


class _IpsecNewCfgState_Type(Integer32):
    """Custom type ipsecNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_IpsecNewCfgState_Type.__name__ = "Integer32"
_IpsecNewCfgState_Object = MibScalar
ipsecNewCfgState = _IpsecNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 2),
    _IpsecNewCfgState_Type()
)
ipsecNewCfgState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipsecNewCfgState.setStatus("current")
_IpsecCurCfgTxformTable_Object = MibTable
ipsecCurCfgTxformTable = _IpsecCurCfgTxformTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 3)
)
if mibBuilder.loadTexts:
    ipsecCurCfgTxformTable.setStatus("current")
_IpsecCurCfgTxformEntry_Object = MibTableRow
ipsecCurCfgTxformEntry = _IpsecCurCfgTxformEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 3, 1)
)
ipsecCurCfgTxformEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipsecCurCfgTxformIndex"),
)
if mibBuilder.loadTexts:
    ipsecCurCfgTxformEntry.setStatus("current")


class _IpsecCurCfgTxformIndex_Type(Unsigned32):
    """Custom type ipsecCurCfgTxformIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_IpsecCurCfgTxformIndex_Type.__name__ = "Unsigned32"
_IpsecCurCfgTxformIndex_Object = MibTableColumn
ipsecCurCfgTxformIndex = _IpsecCurCfgTxformIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 3, 1, 1),
    _IpsecCurCfgTxformIndex_Type()
)
ipsecCurCfgTxformIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgTxformIndex.setStatus("current")


class _IpsecCurCfgTxformAuth_Type(Integer32):
    """Custom type ipsecCurCfgTxformAuth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("ah-sha1", 1),
          ("ah-md5", 2))
    )


_IpsecCurCfgTxformAuth_Type.__name__ = "Integer32"
_IpsecCurCfgTxformAuth_Object = MibTableColumn
ipsecCurCfgTxformAuth = _IpsecCurCfgTxformAuth_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 3, 1, 2),
    _IpsecCurCfgTxformAuth_Type()
)
ipsecCurCfgTxformAuth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgTxformAuth.setStatus("current")


class _IpsecCurCfgTxformCipher_Type(Integer32):
    """Custom type ipsecCurCfgTxformCipher based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("esp-null", 0),
          ("esp-des", 1),
          ("esp-3des", 2),
          ("esp-aes-cbc", 3),
          ("unspecified", 4))
    )


_IpsecCurCfgTxformCipher_Type.__name__ = "Integer32"
_IpsecCurCfgTxformCipher_Object = MibTableColumn
ipsecCurCfgTxformCipher = _IpsecCurCfgTxformCipher_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 3, 1, 3),
    _IpsecCurCfgTxformCipher_Type()
)
ipsecCurCfgTxformCipher.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgTxformCipher.setStatus("current")


class _IpsecCurCfgTxformIntegrity_Type(Integer32):
    """Custom type ipsecCurCfgTxformIntegrity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("esp-sha1", 1),
          ("esp-md5", 2))
    )


_IpsecCurCfgTxformIntegrity_Type.__name__ = "Integer32"
_IpsecCurCfgTxformIntegrity_Object = MibTableColumn
ipsecCurCfgTxformIntegrity = _IpsecCurCfgTxformIntegrity_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 3, 1, 4),
    _IpsecCurCfgTxformIntegrity_Type()
)
ipsecCurCfgTxformIntegrity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgTxformIntegrity.setStatus("current")


class _IpsecCurCfgTxformMode_Type(Integer32):
    """Custom type ipsecCurCfgTxformMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("transport", 1),
          ("tunnel", 2))
    )


_IpsecCurCfgTxformMode_Type.__name__ = "Integer32"
_IpsecCurCfgTxformMode_Object = MibTableColumn
ipsecCurCfgTxformMode = _IpsecCurCfgTxformMode_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 3, 1, 5),
    _IpsecCurCfgTxformMode_Type()
)
ipsecCurCfgTxformMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgTxformMode.setStatus("current")


class _IpsecCurCfgTxformDelete_Type(Integer32):
    """Custom type ipsecCurCfgTxformDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_IpsecCurCfgTxformDelete_Type.__name__ = "Integer32"
_IpsecCurCfgTxformDelete_Object = MibTableColumn
ipsecCurCfgTxformDelete = _IpsecCurCfgTxformDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 3, 1, 6),
    _IpsecCurCfgTxformDelete_Type()
)
ipsecCurCfgTxformDelete.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgTxformDelete.setStatus("current")
_IpsecNewCfgTxformTable_Object = MibTable
ipsecNewCfgTxformTable = _IpsecNewCfgTxformTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 4)
)
if mibBuilder.loadTexts:
    ipsecNewCfgTxformTable.setStatus("current")
_IpsecNewCfgTxformEntry_Object = MibTableRow
ipsecNewCfgTxformEntry = _IpsecNewCfgTxformEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 4, 1)
)
ipsecNewCfgTxformEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipsecNewCfgTxformIndex"),
)
if mibBuilder.loadTexts:
    ipsecNewCfgTxformEntry.setStatus("current")


class _IpsecNewCfgTxformIndex_Type(Unsigned32):
    """Custom type ipsecNewCfgTxformIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_IpsecNewCfgTxformIndex_Type.__name__ = "Unsigned32"
_IpsecNewCfgTxformIndex_Object = MibTableColumn
ipsecNewCfgTxformIndex = _IpsecNewCfgTxformIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 4, 1, 1),
    _IpsecNewCfgTxformIndex_Type()
)
ipsecNewCfgTxformIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecNewCfgTxformIndex.setStatus("current")


class _IpsecNewCfgTxformAuth_Type(Integer32):
    """Custom type ipsecNewCfgTxformAuth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("ah-sha1", 1),
          ("ah-md5", 2))
    )


_IpsecNewCfgTxformAuth_Type.__name__ = "Integer32"
_IpsecNewCfgTxformAuth_Object = MibTableColumn
ipsecNewCfgTxformAuth = _IpsecNewCfgTxformAuth_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 4, 1, 2),
    _IpsecNewCfgTxformAuth_Type()
)
ipsecNewCfgTxformAuth.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipsecNewCfgTxformAuth.setStatus("current")


class _IpsecNewCfgTxformCipher_Type(Integer32):
    """Custom type ipsecNewCfgTxformCipher based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("esp-null", 0),
          ("esp-des", 1),
          ("esp-3des", 2),
          ("esp-aes-cbc", 3),
          ("unspecified", 4))
    )


_IpsecNewCfgTxformCipher_Type.__name__ = "Integer32"
_IpsecNewCfgTxformCipher_Object = MibTableColumn
ipsecNewCfgTxformCipher = _IpsecNewCfgTxformCipher_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 4, 1, 3),
    _IpsecNewCfgTxformCipher_Type()
)
ipsecNewCfgTxformCipher.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipsecNewCfgTxformCipher.setStatus("current")


class _IpsecNewCfgTxformIntegrity_Type(Integer32):
    """Custom type ipsecNewCfgTxformIntegrity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("esp-sha1", 1),
          ("esp-md5", 2))
    )


_IpsecNewCfgTxformIntegrity_Type.__name__ = "Integer32"
_IpsecNewCfgTxformIntegrity_Object = MibTableColumn
ipsecNewCfgTxformIntegrity = _IpsecNewCfgTxformIntegrity_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 4, 1, 4),
    _IpsecNewCfgTxformIntegrity_Type()
)
ipsecNewCfgTxformIntegrity.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipsecNewCfgTxformIntegrity.setStatus("current")


class _IpsecNewCfgTxformMode_Type(Integer32):
    """Custom type ipsecNewCfgTxformMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("transport", 1),
          ("tunnel", 2))
    )


_IpsecNewCfgTxformMode_Type.__name__ = "Integer32"
_IpsecNewCfgTxformMode_Object = MibTableColumn
ipsecNewCfgTxformMode = _IpsecNewCfgTxformMode_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 4, 1, 5),
    _IpsecNewCfgTxformMode_Type()
)
ipsecNewCfgTxformMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipsecNewCfgTxformMode.setStatus("current")


class _IpsecNewCfgTxformDelete_Type(Integer32):
    """Custom type ipsecNewCfgTxformDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_IpsecNewCfgTxformDelete_Type.__name__ = "Integer32"
_IpsecNewCfgTxformDelete_Object = MibTableColumn
ipsecNewCfgTxformDelete = _IpsecNewCfgTxformDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 4, 1, 6),
    _IpsecNewCfgTxformDelete_Type()
)
ipsecNewCfgTxformDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipsecNewCfgTxformDelete.setStatus("current")
_IpsecCurCfgSelectorTable_Object = MibTable
ipsecCurCfgSelectorTable = _IpsecCurCfgSelectorTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 5)
)
if mibBuilder.loadTexts:
    ipsecCurCfgSelectorTable.setStatus("current")
_IpsecCurCfgSelectorEntry_Object = MibTableRow
ipsecCurCfgSelectorEntry = _IpsecCurCfgSelectorEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 5, 1)
)
ipsecCurCfgSelectorEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipsecCurCfgSelectorIndex"),
)
if mibBuilder.loadTexts:
    ipsecCurCfgSelectorEntry.setStatus("current")


class _IpsecCurCfgSelectorIndex_Type(Unsigned32):
    """Custom type ipsecCurCfgSelectorIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_IpsecCurCfgSelectorIndex_Type.__name__ = "Unsigned32"
_IpsecCurCfgSelectorIndex_Object = MibTableColumn
ipsecCurCfgSelectorIndex = _IpsecCurCfgSelectorIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 5, 1, 1),
    _IpsecCurCfgSelectorIndex_Type()
)
ipsecCurCfgSelectorIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgSelectorIndex.setStatus("current")


class _IpsecCurCfgSelectorAction_Type(Integer32):
    """Custom type ipsecCurCfgSelectorAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unspecified", 0),
          ("permit", 1),
          ("deny", 2))
    )


_IpsecCurCfgSelectorAction_Type.__name__ = "Integer32"
_IpsecCurCfgSelectorAction_Object = MibTableColumn
ipsecCurCfgSelectorAction = _IpsecCurCfgSelectorAction_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 5, 1, 2),
    _IpsecCurCfgSelectorAction_Type()
)
ipsecCurCfgSelectorAction.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgSelectorAction.setStatus("current")


class _IpsecCurCfgSelectorProto_Type(Integer32):
    """Custom type ipsecCurCfgSelectorProto based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unspecified", 0),
          ("tcp", 1),
          ("icmp", 2),
          ("any", 3))
    )


_IpsecCurCfgSelectorProto_Type.__name__ = "Integer32"
_IpsecCurCfgSelectorProto_Object = MibTableColumn
ipsecCurCfgSelectorProto = _IpsecCurCfgSelectorProto_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 5, 1, 3),
    _IpsecCurCfgSelectorProto_Type()
)
ipsecCurCfgSelectorProto.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgSelectorProto.setStatus("current")


class _IpsecCurCfgSelectorIcmpType_Type(Unsigned32):
    """Custom type ipsecCurCfgSelectorIcmpType based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_IpsecCurCfgSelectorIcmpType_Type.__name__ = "Unsigned32"
_IpsecCurCfgSelectorIcmpType_Object = MibTableColumn
ipsecCurCfgSelectorIcmpType = _IpsecCurCfgSelectorIcmpType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 5, 1, 4),
    _IpsecCurCfgSelectorIcmpType_Type()
)
ipsecCurCfgSelectorIcmpType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgSelectorIcmpType.setStatus("current")


class _IpsecCurCfgSelectorDst_Type(OctetString):
    """Custom type ipsecCurCfgSelectorDst based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(16, 16),
    )
    fixed_length = 16


_IpsecCurCfgSelectorDst_Type.__name__ = "OctetString"
_IpsecCurCfgSelectorDst_Object = MibTableColumn
ipsecCurCfgSelectorDst = _IpsecCurCfgSelectorDst_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 5, 1, 6),
    _IpsecCurCfgSelectorDst_Type()
)
ipsecCurCfgSelectorDst.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgSelectorDst.setStatus("current")


class _IpsecCurCfgSelectorDstPrefix_Type(Unsigned32):
    """Custom type ipsecCurCfgSelectorDstPrefix based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_IpsecCurCfgSelectorDstPrefix_Type.__name__ = "Unsigned32"
_IpsecCurCfgSelectorDstPrefix_Object = MibTableColumn
ipsecCurCfgSelectorDstPrefix = _IpsecCurCfgSelectorDstPrefix_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 5, 1, 7),
    _IpsecCurCfgSelectorDstPrefix_Type()
)
ipsecCurCfgSelectorDstPrefix.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgSelectorDstPrefix.setStatus("current")


class _IpsecCurCfgSelectorSrc_Type(OctetString):
    """Custom type ipsecCurCfgSelectorSrc based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(16, 16),
    )
    fixed_length = 16


_IpsecCurCfgSelectorSrc_Type.__name__ = "OctetString"
_IpsecCurCfgSelectorSrc_Object = MibTableColumn
ipsecCurCfgSelectorSrc = _IpsecCurCfgSelectorSrc_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 5, 1, 8),
    _IpsecCurCfgSelectorSrc_Type()
)
ipsecCurCfgSelectorSrc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgSelectorSrc.setStatus("current")


class _IpsecCurCfgSelectorDelete_Type(Integer32):
    """Custom type ipsecCurCfgSelectorDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_IpsecCurCfgSelectorDelete_Type.__name__ = "Integer32"
_IpsecCurCfgSelectorDelete_Object = MibTableColumn
ipsecCurCfgSelectorDelete = _IpsecCurCfgSelectorDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 5, 1, 9),
    _IpsecCurCfgSelectorDelete_Type()
)
ipsecCurCfgSelectorDelete.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgSelectorDelete.setStatus("current")
_IpsecNewCfgSelectorTable_Object = MibTable
ipsecNewCfgSelectorTable = _IpsecNewCfgSelectorTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 6)
)
if mibBuilder.loadTexts:
    ipsecNewCfgSelectorTable.setStatus("current")
_IpsecNewCfgSelectorEntry_Object = MibTableRow
ipsecNewCfgSelectorEntry = _IpsecNewCfgSelectorEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 6, 1)
)
ipsecNewCfgSelectorEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipsecNewCfgSelectorIndex"),
)
if mibBuilder.loadTexts:
    ipsecNewCfgSelectorEntry.setStatus("current")


class _IpsecNewCfgSelectorIndex_Type(Unsigned32):
    """Custom type ipsecNewCfgSelectorIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_IpsecNewCfgSelectorIndex_Type.__name__ = "Unsigned32"
_IpsecNewCfgSelectorIndex_Object = MibTableColumn
ipsecNewCfgSelectorIndex = _IpsecNewCfgSelectorIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 6, 1, 1),
    _IpsecNewCfgSelectorIndex_Type()
)
ipsecNewCfgSelectorIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecNewCfgSelectorIndex.setStatus("current")


class _IpsecNewCfgSelectorAction_Type(Integer32):
    """Custom type ipsecNewCfgSelectorAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unspecified", 0),
          ("permit", 1),
          ("deny", 2))
    )


_IpsecNewCfgSelectorAction_Type.__name__ = "Integer32"
_IpsecNewCfgSelectorAction_Object = MibTableColumn
ipsecNewCfgSelectorAction = _IpsecNewCfgSelectorAction_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 6, 1, 2),
    _IpsecNewCfgSelectorAction_Type()
)
ipsecNewCfgSelectorAction.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipsecNewCfgSelectorAction.setStatus("current")


class _IpsecNewCfgSelectorProto_Type(Integer32):
    """Custom type ipsecNewCfgSelectorProto based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unspecified", 0),
          ("tcp", 1),
          ("icmp", 2),
          ("any", 3))
    )


_IpsecNewCfgSelectorProto_Type.__name__ = "Integer32"
_IpsecNewCfgSelectorProto_Object = MibTableColumn
ipsecNewCfgSelectorProto = _IpsecNewCfgSelectorProto_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 6, 1, 3),
    _IpsecNewCfgSelectorProto_Type()
)
ipsecNewCfgSelectorProto.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipsecNewCfgSelectorProto.setStatus("current")


class _IpsecNewCfgSelectorIcmpType_Type(Unsigned32):
    """Custom type ipsecNewCfgSelectorIcmpType based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_IpsecNewCfgSelectorIcmpType_Type.__name__ = "Unsigned32"
_IpsecNewCfgSelectorIcmpType_Object = MibTableColumn
ipsecNewCfgSelectorIcmpType = _IpsecNewCfgSelectorIcmpType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 6, 1, 4),
    _IpsecNewCfgSelectorIcmpType_Type()
)
ipsecNewCfgSelectorIcmpType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipsecNewCfgSelectorIcmpType.setStatus("current")


class _IpsecNewCfgSelectorDst_Type(OctetString):
    """Custom type ipsecNewCfgSelectorDst based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(16, 16),
    )
    fixed_length = 16


_IpsecNewCfgSelectorDst_Type.__name__ = "OctetString"
_IpsecNewCfgSelectorDst_Object = MibTableColumn
ipsecNewCfgSelectorDst = _IpsecNewCfgSelectorDst_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 6, 1, 6),
    _IpsecNewCfgSelectorDst_Type()
)
ipsecNewCfgSelectorDst.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipsecNewCfgSelectorDst.setStatus("current")


class _IpsecNewCfgSelectorDstPrefix_Type(Unsigned32):
    """Custom type ipsecNewCfgSelectorDstPrefix based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_IpsecNewCfgSelectorDstPrefix_Type.__name__ = "Unsigned32"
_IpsecNewCfgSelectorDstPrefix_Object = MibTableColumn
ipsecNewCfgSelectorDstPrefix = _IpsecNewCfgSelectorDstPrefix_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 6, 1, 7),
    _IpsecNewCfgSelectorDstPrefix_Type()
)
ipsecNewCfgSelectorDstPrefix.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipsecNewCfgSelectorDstPrefix.setStatus("current")


class _IpsecNewCfgSelectorSrc_Type(OctetString):
    """Custom type ipsecNewCfgSelectorSrc based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(16, 16),
    )
    fixed_length = 16


_IpsecNewCfgSelectorSrc_Type.__name__ = "OctetString"
_IpsecNewCfgSelectorSrc_Object = MibTableColumn
ipsecNewCfgSelectorSrc = _IpsecNewCfgSelectorSrc_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 6, 1, 8),
    _IpsecNewCfgSelectorSrc_Type()
)
ipsecNewCfgSelectorSrc.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipsecNewCfgSelectorSrc.setStatus("current")


class _IpsecNewCfgSelectorDelete_Type(Integer32):
    """Custom type ipsecNewCfgSelectorDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_IpsecNewCfgSelectorDelete_Type.__name__ = "Integer32"
_IpsecNewCfgSelectorDelete_Object = MibTableColumn
ipsecNewCfgSelectorDelete = _IpsecNewCfgSelectorDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 6, 1, 9),
    _IpsecNewCfgSelectorDelete_Type()
)
ipsecNewCfgSelectorDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipsecNewCfgSelectorDelete.setStatus("current")
_IpsecCurCfgDynamicPolicyTable_Object = MibTable
ipsecCurCfgDynamicPolicyTable = _IpsecCurCfgDynamicPolicyTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 7)
)
if mibBuilder.loadTexts:
    ipsecCurCfgDynamicPolicyTable.setStatus("current")
_IpsecCurCfgDynamicPolicyEntry_Object = MibTableRow
ipsecCurCfgDynamicPolicyEntry = _IpsecCurCfgDynamicPolicyEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 7, 1)
)
ipsecCurCfgDynamicPolicyEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipsecCurCfgDynamicPolicyIndex"),
)
if mibBuilder.loadTexts:
    ipsecCurCfgDynamicPolicyEntry.setStatus("current")


class _IpsecCurCfgDynamicPolicyIndex_Type(Unsigned32):
    """Custom type ipsecCurCfgDynamicPolicyIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_IpsecCurCfgDynamicPolicyIndex_Type.__name__ = "Unsigned32"
_IpsecCurCfgDynamicPolicyIndex_Object = MibTableColumn
ipsecCurCfgDynamicPolicyIndex = _IpsecCurCfgDynamicPolicyIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 7, 1, 1),
    _IpsecCurCfgDynamicPolicyIndex_Type()
)
ipsecCurCfgDynamicPolicyIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgDynamicPolicyIndex.setStatus("current")


class _IpsecCurCfgDynamicPolicyPeer_Type(OctetString):
    """Custom type ipsecCurCfgDynamicPolicyPeer based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(16, 16),
    )
    fixed_length = 16


_IpsecCurCfgDynamicPolicyPeer_Type.__name__ = "OctetString"
_IpsecCurCfgDynamicPolicyPeer_Object = MibTableColumn
ipsecCurCfgDynamicPolicyPeer = _IpsecCurCfgDynamicPolicyPeer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 7, 1, 2),
    _IpsecCurCfgDynamicPolicyPeer_Type()
)
ipsecCurCfgDynamicPolicyPeer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgDynamicPolicyPeer.setStatus("current")


class _IpsecCurCfgDynamicPolicySelector_Type(Unsigned32):
    """Custom type ipsecCurCfgDynamicPolicySelector based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_IpsecCurCfgDynamicPolicySelector_Type.__name__ = "Unsigned32"
_IpsecCurCfgDynamicPolicySelector_Object = MibTableColumn
ipsecCurCfgDynamicPolicySelector = _IpsecCurCfgDynamicPolicySelector_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 7, 1, 3),
    _IpsecCurCfgDynamicPolicySelector_Type()
)
ipsecCurCfgDynamicPolicySelector.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgDynamicPolicySelector.setStatus("current")


class _IpsecCurCfgDynamicPolicyTxform_Type(Unsigned32):
    """Custom type ipsecCurCfgDynamicPolicyTxform based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_IpsecCurCfgDynamicPolicyTxform_Type.__name__ = "Unsigned32"
_IpsecCurCfgDynamicPolicyTxform_Object = MibTableColumn
ipsecCurCfgDynamicPolicyTxform = _IpsecCurCfgDynamicPolicyTxform_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 7, 1, 4),
    _IpsecCurCfgDynamicPolicyTxform_Type()
)
ipsecCurCfgDynamicPolicyTxform.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgDynamicPolicyTxform.setStatus("current")


class _IpsecCurCfgDynamicPolicyLifetime_Type(Unsigned32):
    """Custom type ipsecCurCfgDynamicPolicyLifetime based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(120, 86400),
    )


_IpsecCurCfgDynamicPolicyLifetime_Type.__name__ = "Unsigned32"
_IpsecCurCfgDynamicPolicyLifetime_Object = MibTableColumn
ipsecCurCfgDynamicPolicyLifetime = _IpsecCurCfgDynamicPolicyLifetime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 7, 1, 5),
    _IpsecCurCfgDynamicPolicyLifetime_Type()
)
ipsecCurCfgDynamicPolicyLifetime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgDynamicPolicyLifetime.setStatus("current")


class _IpsecCurCfgDynamicPolicyPfs_Type(Integer32):
    """Custom type ipsecCurCfgDynamicPolicyPfs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_IpsecCurCfgDynamicPolicyPfs_Type.__name__ = "Integer32"
_IpsecCurCfgDynamicPolicyPfs_Object = MibTableColumn
ipsecCurCfgDynamicPolicyPfs = _IpsecCurCfgDynamicPolicyPfs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 7, 1, 6),
    _IpsecCurCfgDynamicPolicyPfs_Type()
)
ipsecCurCfgDynamicPolicyPfs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgDynamicPolicyPfs.setStatus("current")


class _IpsecCurCfgDynamicPolicyDelete_Type(Integer32):
    """Custom type ipsecCurCfgDynamicPolicyDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_IpsecCurCfgDynamicPolicyDelete_Type.__name__ = "Integer32"
_IpsecCurCfgDynamicPolicyDelete_Object = MibTableColumn
ipsecCurCfgDynamicPolicyDelete = _IpsecCurCfgDynamicPolicyDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 7, 1, 7),
    _IpsecCurCfgDynamicPolicyDelete_Type()
)
ipsecCurCfgDynamicPolicyDelete.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgDynamicPolicyDelete.setStatus("current")
_IpsecNewCfgDynamicPolicyTable_Object = MibTable
ipsecNewCfgDynamicPolicyTable = _IpsecNewCfgDynamicPolicyTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 8)
)
if mibBuilder.loadTexts:
    ipsecNewCfgDynamicPolicyTable.setStatus("current")
_IpsecNewCfgDynamicPolicyEntry_Object = MibTableRow
ipsecNewCfgDynamicPolicyEntry = _IpsecNewCfgDynamicPolicyEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 8, 1)
)
ipsecNewCfgDynamicPolicyEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipsecNewCfgDynamicPolicyIndex"),
)
if mibBuilder.loadTexts:
    ipsecNewCfgDynamicPolicyEntry.setStatus("current")


class _IpsecNewCfgDynamicPolicyIndex_Type(Unsigned32):
    """Custom type ipsecNewCfgDynamicPolicyIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_IpsecNewCfgDynamicPolicyIndex_Type.__name__ = "Unsigned32"
_IpsecNewCfgDynamicPolicyIndex_Object = MibTableColumn
ipsecNewCfgDynamicPolicyIndex = _IpsecNewCfgDynamicPolicyIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 8, 1, 1),
    _IpsecNewCfgDynamicPolicyIndex_Type()
)
ipsecNewCfgDynamicPolicyIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecNewCfgDynamicPolicyIndex.setStatus("current")


class _IpsecNewCfgDynamicPolicyPeer_Type(OctetString):
    """Custom type ipsecNewCfgDynamicPolicyPeer based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(16, 16),
    )
    fixed_length = 16


_IpsecNewCfgDynamicPolicyPeer_Type.__name__ = "OctetString"
_IpsecNewCfgDynamicPolicyPeer_Object = MibTableColumn
ipsecNewCfgDynamicPolicyPeer = _IpsecNewCfgDynamicPolicyPeer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 8, 1, 2),
    _IpsecNewCfgDynamicPolicyPeer_Type()
)
ipsecNewCfgDynamicPolicyPeer.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipsecNewCfgDynamicPolicyPeer.setStatus("current")


class _IpsecNewCfgDynamicPolicySelector_Type(Unsigned32):
    """Custom type ipsecNewCfgDynamicPolicySelector based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_IpsecNewCfgDynamicPolicySelector_Type.__name__ = "Unsigned32"
_IpsecNewCfgDynamicPolicySelector_Object = MibTableColumn
ipsecNewCfgDynamicPolicySelector = _IpsecNewCfgDynamicPolicySelector_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 8, 1, 3),
    _IpsecNewCfgDynamicPolicySelector_Type()
)
ipsecNewCfgDynamicPolicySelector.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipsecNewCfgDynamicPolicySelector.setStatus("current")


class _IpsecNewCfgDynamicPolicyTxform_Type(Unsigned32):
    """Custom type ipsecNewCfgDynamicPolicyTxform based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_IpsecNewCfgDynamicPolicyTxform_Type.__name__ = "Unsigned32"
_IpsecNewCfgDynamicPolicyTxform_Object = MibTableColumn
ipsecNewCfgDynamicPolicyTxform = _IpsecNewCfgDynamicPolicyTxform_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 8, 1, 4),
    _IpsecNewCfgDynamicPolicyTxform_Type()
)
ipsecNewCfgDynamicPolicyTxform.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipsecNewCfgDynamicPolicyTxform.setStatus("current")


class _IpsecNewCfgDynamicPolicyLifetime_Type(Unsigned32):
    """Custom type ipsecNewCfgDynamicPolicyLifetime based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(120, 86400),
    )


_IpsecNewCfgDynamicPolicyLifetime_Type.__name__ = "Unsigned32"
_IpsecNewCfgDynamicPolicyLifetime_Object = MibTableColumn
ipsecNewCfgDynamicPolicyLifetime = _IpsecNewCfgDynamicPolicyLifetime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 8, 1, 5),
    _IpsecNewCfgDynamicPolicyLifetime_Type()
)
ipsecNewCfgDynamicPolicyLifetime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipsecNewCfgDynamicPolicyLifetime.setStatus("current")


class _IpsecNewCfgDynamicPolicyPfs_Type(Integer32):
    """Custom type ipsecNewCfgDynamicPolicyPfs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_IpsecNewCfgDynamicPolicyPfs_Type.__name__ = "Integer32"
_IpsecNewCfgDynamicPolicyPfs_Object = MibTableColumn
ipsecNewCfgDynamicPolicyPfs = _IpsecNewCfgDynamicPolicyPfs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 8, 1, 6),
    _IpsecNewCfgDynamicPolicyPfs_Type()
)
ipsecNewCfgDynamicPolicyPfs.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipsecNewCfgDynamicPolicyPfs.setStatus("current")


class _IpsecNewCfgDynamicPolicyDelete_Type(Integer32):
    """Custom type ipsecNewCfgDynamicPolicyDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_IpsecNewCfgDynamicPolicyDelete_Type.__name__ = "Integer32"
_IpsecNewCfgDynamicPolicyDelete_Object = MibTableColumn
ipsecNewCfgDynamicPolicyDelete = _IpsecNewCfgDynamicPolicyDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 8, 1, 7),
    _IpsecNewCfgDynamicPolicyDelete_Type()
)
ipsecNewCfgDynamicPolicyDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipsecNewCfgDynamicPolicyDelete.setStatus("current")
_IpsecCurCfgManualPolicyTable_Object = MibTable
ipsecCurCfgManualPolicyTable = _IpsecCurCfgManualPolicyTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 9)
)
if mibBuilder.loadTexts:
    ipsecCurCfgManualPolicyTable.setStatus("current")
_IpsecCurCfgManualPolicyEntry_Object = MibTableRow
ipsecCurCfgManualPolicyEntry = _IpsecCurCfgManualPolicyEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 9, 1)
)
ipsecCurCfgManualPolicyEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipsecCurCfgManualPolicyIndex"),
)
if mibBuilder.loadTexts:
    ipsecCurCfgManualPolicyEntry.setStatus("current")


class _IpsecCurCfgManualPolicyIndex_Type(Unsigned32):
    """Custom type ipsecCurCfgManualPolicyIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_IpsecCurCfgManualPolicyIndex_Type.__name__ = "Unsigned32"
_IpsecCurCfgManualPolicyIndex_Object = MibTableColumn
ipsecCurCfgManualPolicyIndex = _IpsecCurCfgManualPolicyIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 9, 1, 1),
    _IpsecCurCfgManualPolicyIndex_Type()
)
ipsecCurCfgManualPolicyIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgManualPolicyIndex.setStatus("current")


class _IpsecCurCfgManualPolicyPeer_Type(OctetString):
    """Custom type ipsecCurCfgManualPolicyPeer based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(16, 16),
    )
    fixed_length = 16


_IpsecCurCfgManualPolicyPeer_Type.__name__ = "OctetString"
_IpsecCurCfgManualPolicyPeer_Object = MibTableColumn
ipsecCurCfgManualPolicyPeer = _IpsecCurCfgManualPolicyPeer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 9, 1, 2),
    _IpsecCurCfgManualPolicyPeer_Type()
)
ipsecCurCfgManualPolicyPeer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgManualPolicyPeer.setStatus("current")


class _IpsecCurCfgManualPolicySelector_Type(Unsigned32):
    """Custom type ipsecCurCfgManualPolicySelector based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_IpsecCurCfgManualPolicySelector_Type.__name__ = "Unsigned32"
_IpsecCurCfgManualPolicySelector_Object = MibTableColumn
ipsecCurCfgManualPolicySelector = _IpsecCurCfgManualPolicySelector_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 9, 1, 3),
    _IpsecCurCfgManualPolicySelector_Type()
)
ipsecCurCfgManualPolicySelector.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgManualPolicySelector.setStatus("current")


class _IpsecCurCfgManualPolicyTxform_Type(Unsigned32):
    """Custom type ipsecCurCfgManualPolicyTxform based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_IpsecCurCfgManualPolicyTxform_Type.__name__ = "Unsigned32"
_IpsecCurCfgManualPolicyTxform_Object = MibTableColumn
ipsecCurCfgManualPolicyTxform = _IpsecCurCfgManualPolicyTxform_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 9, 1, 4),
    _IpsecCurCfgManualPolicyTxform_Type()
)
ipsecCurCfgManualPolicyTxform.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgManualPolicyTxform.setStatus("current")


class _IpsecCurCfgManualPolicyInAhKey_Type(OctetString):
    """Custom type ipsecCurCfgManualPolicyInAhKey based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_IpsecCurCfgManualPolicyInAhKey_Type.__name__ = "OctetString"
_IpsecCurCfgManualPolicyInAhKey_Object = MibTableColumn
ipsecCurCfgManualPolicyInAhKey = _IpsecCurCfgManualPolicyInAhKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 9, 1, 5),
    _IpsecCurCfgManualPolicyInAhKey_Type()
)
ipsecCurCfgManualPolicyInAhKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgManualPolicyInAhKey.setStatus("current")


class _IpsecCurCfgManualPolicyInAhSpi_Type(Unsigned32):
    """Custom type ipsecCurCfgManualPolicyInAhSpi based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(256, 4294967295),
    )


_IpsecCurCfgManualPolicyInAhSpi_Type.__name__ = "Unsigned32"
_IpsecCurCfgManualPolicyInAhSpi_Object = MibTableColumn
ipsecCurCfgManualPolicyInAhSpi = _IpsecCurCfgManualPolicyInAhSpi_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 9, 1, 6),
    _IpsecCurCfgManualPolicyInAhSpi_Type()
)
ipsecCurCfgManualPolicyInAhSpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgManualPolicyInAhSpi.setStatus("current")


class _IpsecCurCfgManualPolicyOutAhKey_Type(OctetString):
    """Custom type ipsecCurCfgManualPolicyOutAhKey based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_IpsecCurCfgManualPolicyOutAhKey_Type.__name__ = "OctetString"
_IpsecCurCfgManualPolicyOutAhKey_Object = MibTableColumn
ipsecCurCfgManualPolicyOutAhKey = _IpsecCurCfgManualPolicyOutAhKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 9, 1, 7),
    _IpsecCurCfgManualPolicyOutAhKey_Type()
)
ipsecCurCfgManualPolicyOutAhKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgManualPolicyOutAhKey.setStatus("current")


class _IpsecCurCfgManualPolicyOutAhSpi_Type(Unsigned32):
    """Custom type ipsecCurCfgManualPolicyOutAhSpi based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(256, 4294967295),
    )


_IpsecCurCfgManualPolicyOutAhSpi_Type.__name__ = "Unsigned32"
_IpsecCurCfgManualPolicyOutAhSpi_Object = MibTableColumn
ipsecCurCfgManualPolicyOutAhSpi = _IpsecCurCfgManualPolicyOutAhSpi_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 9, 1, 8),
    _IpsecCurCfgManualPolicyOutAhSpi_Type()
)
ipsecCurCfgManualPolicyOutAhSpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgManualPolicyOutAhSpi.setStatus("current")


class _IpsecCurCfgManualPolicyInEspEncKey_Type(OctetString):
    """Custom type ipsecCurCfgManualPolicyInEspEncKey based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_IpsecCurCfgManualPolicyInEspEncKey_Type.__name__ = "OctetString"
_IpsecCurCfgManualPolicyInEspEncKey_Object = MibTableColumn
ipsecCurCfgManualPolicyInEspEncKey = _IpsecCurCfgManualPolicyInEspEncKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 9, 1, 9),
    _IpsecCurCfgManualPolicyInEspEncKey_Type()
)
ipsecCurCfgManualPolicyInEspEncKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgManualPolicyInEspEncKey.setStatus("current")


class _IpsecCurCfgManualPolicyInEspAuthKey_Type(OctetString):
    """Custom type ipsecCurCfgManualPolicyInEspAuthKey based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_IpsecCurCfgManualPolicyInEspAuthKey_Type.__name__ = "OctetString"
_IpsecCurCfgManualPolicyInEspAuthKey_Object = MibTableColumn
ipsecCurCfgManualPolicyInEspAuthKey = _IpsecCurCfgManualPolicyInEspAuthKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 9, 1, 10),
    _IpsecCurCfgManualPolicyInEspAuthKey_Type()
)
ipsecCurCfgManualPolicyInEspAuthKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgManualPolicyInEspAuthKey.setStatus("current")


class _IpsecCurCfgManualPolicyInEspSpi_Type(Unsigned32):
    """Custom type ipsecCurCfgManualPolicyInEspSpi based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(256, 4294967295),
    )


_IpsecCurCfgManualPolicyInEspSpi_Type.__name__ = "Unsigned32"
_IpsecCurCfgManualPolicyInEspSpi_Object = MibTableColumn
ipsecCurCfgManualPolicyInEspSpi = _IpsecCurCfgManualPolicyInEspSpi_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 9, 1, 11),
    _IpsecCurCfgManualPolicyInEspSpi_Type()
)
ipsecCurCfgManualPolicyInEspSpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgManualPolicyInEspSpi.setStatus("current")


class _IpsecCurCfgManualPolicyOutEspEncKey_Type(OctetString):
    """Custom type ipsecCurCfgManualPolicyOutEspEncKey based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_IpsecCurCfgManualPolicyOutEspEncKey_Type.__name__ = "OctetString"
_IpsecCurCfgManualPolicyOutEspEncKey_Object = MibTableColumn
ipsecCurCfgManualPolicyOutEspEncKey = _IpsecCurCfgManualPolicyOutEspEncKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 9, 1, 12),
    _IpsecCurCfgManualPolicyOutEspEncKey_Type()
)
ipsecCurCfgManualPolicyOutEspEncKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgManualPolicyOutEspEncKey.setStatus("current")


class _IpsecCurCfgManualPolicyOutEspAuthKey_Type(OctetString):
    """Custom type ipsecCurCfgManualPolicyOutEspAuthKey based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_IpsecCurCfgManualPolicyOutEspAuthKey_Type.__name__ = "OctetString"
_IpsecCurCfgManualPolicyOutEspAuthKey_Object = MibTableColumn
ipsecCurCfgManualPolicyOutEspAuthKey = _IpsecCurCfgManualPolicyOutEspAuthKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 9, 1, 13),
    _IpsecCurCfgManualPolicyOutEspAuthKey_Type()
)
ipsecCurCfgManualPolicyOutEspAuthKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgManualPolicyOutEspAuthKey.setStatus("current")


class _IpsecCurCfgManualPolicyOutEspSpi_Type(Unsigned32):
    """Custom type ipsecCurCfgManualPolicyOutEspSpi based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(256, 4294967295),
    )


_IpsecCurCfgManualPolicyOutEspSpi_Type.__name__ = "Unsigned32"
_IpsecCurCfgManualPolicyOutEspSpi_Object = MibTableColumn
ipsecCurCfgManualPolicyOutEspSpi = _IpsecCurCfgManualPolicyOutEspSpi_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 9, 1, 14),
    _IpsecCurCfgManualPolicyOutEspSpi_Type()
)
ipsecCurCfgManualPolicyOutEspSpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgManualPolicyOutEspSpi.setStatus("current")


class _IpsecCurCfgManualPolicyDelete_Type(Integer32):
    """Custom type ipsecCurCfgManualPolicyDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_IpsecCurCfgManualPolicyDelete_Type.__name__ = "Integer32"
_IpsecCurCfgManualPolicyDelete_Object = MibTableColumn
ipsecCurCfgManualPolicyDelete = _IpsecCurCfgManualPolicyDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 9, 1, 15),
    _IpsecCurCfgManualPolicyDelete_Type()
)
ipsecCurCfgManualPolicyDelete.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgManualPolicyDelete.setStatus("current")
_IpsecNewCfgManualPolicyTable_Object = MibTable
ipsecNewCfgManualPolicyTable = _IpsecNewCfgManualPolicyTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 10)
)
if mibBuilder.loadTexts:
    ipsecNewCfgManualPolicyTable.setStatus("current")
_IpsecNewCfgManualPolicyEntry_Object = MibTableRow
ipsecNewCfgManualPolicyEntry = _IpsecNewCfgManualPolicyEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 10, 1)
)
ipsecNewCfgManualPolicyEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipsecNewCfgManualPolicyIndex"),
)
if mibBuilder.loadTexts:
    ipsecNewCfgManualPolicyEntry.setStatus("current")


class _IpsecNewCfgManualPolicyIndex_Type(Unsigned32):
    """Custom type ipsecNewCfgManualPolicyIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_IpsecNewCfgManualPolicyIndex_Type.__name__ = "Unsigned32"
_IpsecNewCfgManualPolicyIndex_Object = MibTableColumn
ipsecNewCfgManualPolicyIndex = _IpsecNewCfgManualPolicyIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 10, 1, 1),
    _IpsecNewCfgManualPolicyIndex_Type()
)
ipsecNewCfgManualPolicyIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecNewCfgManualPolicyIndex.setStatus("current")


class _IpsecNewCfgManualPolicyPeer_Type(OctetString):
    """Custom type ipsecNewCfgManualPolicyPeer based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(16, 16),
    )
    fixed_length = 16


_IpsecNewCfgManualPolicyPeer_Type.__name__ = "OctetString"
_IpsecNewCfgManualPolicyPeer_Object = MibTableColumn
ipsecNewCfgManualPolicyPeer = _IpsecNewCfgManualPolicyPeer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 10, 1, 2),
    _IpsecNewCfgManualPolicyPeer_Type()
)
ipsecNewCfgManualPolicyPeer.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipsecNewCfgManualPolicyPeer.setStatus("current")


class _IpsecNewCfgManualPolicySelector_Type(Unsigned32):
    """Custom type ipsecNewCfgManualPolicySelector based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_IpsecNewCfgManualPolicySelector_Type.__name__ = "Unsigned32"
_IpsecNewCfgManualPolicySelector_Object = MibTableColumn
ipsecNewCfgManualPolicySelector = _IpsecNewCfgManualPolicySelector_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 10, 1, 3),
    _IpsecNewCfgManualPolicySelector_Type()
)
ipsecNewCfgManualPolicySelector.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipsecNewCfgManualPolicySelector.setStatus("current")


class _IpsecNewCfgManualPolicyTxform_Type(Unsigned32):
    """Custom type ipsecNewCfgManualPolicyTxform based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_IpsecNewCfgManualPolicyTxform_Type.__name__ = "Unsigned32"
_IpsecNewCfgManualPolicyTxform_Object = MibTableColumn
ipsecNewCfgManualPolicyTxform = _IpsecNewCfgManualPolicyTxform_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 10, 1, 4),
    _IpsecNewCfgManualPolicyTxform_Type()
)
ipsecNewCfgManualPolicyTxform.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipsecNewCfgManualPolicyTxform.setStatus("current")


class _IpsecNewCfgManualPolicyInAhKey_Type(OctetString):
    """Custom type ipsecNewCfgManualPolicyInAhKey based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_IpsecNewCfgManualPolicyInAhKey_Type.__name__ = "OctetString"
_IpsecNewCfgManualPolicyInAhKey_Object = MibTableColumn
ipsecNewCfgManualPolicyInAhKey = _IpsecNewCfgManualPolicyInAhKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 10, 1, 5),
    _IpsecNewCfgManualPolicyInAhKey_Type()
)
ipsecNewCfgManualPolicyInAhKey.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipsecNewCfgManualPolicyInAhKey.setStatus("current")


class _IpsecNewCfgManualPolicyInAhSpi_Type(Unsigned32):
    """Custom type ipsecNewCfgManualPolicyInAhSpi based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(256, 4294967295),
    )


_IpsecNewCfgManualPolicyInAhSpi_Type.__name__ = "Unsigned32"
_IpsecNewCfgManualPolicyInAhSpi_Object = MibTableColumn
ipsecNewCfgManualPolicyInAhSpi = _IpsecNewCfgManualPolicyInAhSpi_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 10, 1, 6),
    _IpsecNewCfgManualPolicyInAhSpi_Type()
)
ipsecNewCfgManualPolicyInAhSpi.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipsecNewCfgManualPolicyInAhSpi.setStatus("current")


class _IpsecNewCfgManualPolicyOutAhKey_Type(OctetString):
    """Custom type ipsecNewCfgManualPolicyOutAhKey based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_IpsecNewCfgManualPolicyOutAhKey_Type.__name__ = "OctetString"
_IpsecNewCfgManualPolicyOutAhKey_Object = MibTableColumn
ipsecNewCfgManualPolicyOutAhKey = _IpsecNewCfgManualPolicyOutAhKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 10, 1, 7),
    _IpsecNewCfgManualPolicyOutAhKey_Type()
)
ipsecNewCfgManualPolicyOutAhKey.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipsecNewCfgManualPolicyOutAhKey.setStatus("current")


class _IpsecNewCfgManualPolicyOutAhSpi_Type(Unsigned32):
    """Custom type ipsecNewCfgManualPolicyOutAhSpi based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(256, 4294967295),
    )


_IpsecNewCfgManualPolicyOutAhSpi_Type.__name__ = "Unsigned32"
_IpsecNewCfgManualPolicyOutAhSpi_Object = MibTableColumn
ipsecNewCfgManualPolicyOutAhSpi = _IpsecNewCfgManualPolicyOutAhSpi_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 10, 1, 8),
    _IpsecNewCfgManualPolicyOutAhSpi_Type()
)
ipsecNewCfgManualPolicyOutAhSpi.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipsecNewCfgManualPolicyOutAhSpi.setStatus("current")


class _IpsecNewCfgManualPolicyInEspEncKey_Type(OctetString):
    """Custom type ipsecNewCfgManualPolicyInEspEncKey based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_IpsecNewCfgManualPolicyInEspEncKey_Type.__name__ = "OctetString"
_IpsecNewCfgManualPolicyInEspEncKey_Object = MibTableColumn
ipsecNewCfgManualPolicyInEspEncKey = _IpsecNewCfgManualPolicyInEspEncKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 10, 1, 9),
    _IpsecNewCfgManualPolicyInEspEncKey_Type()
)
ipsecNewCfgManualPolicyInEspEncKey.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipsecNewCfgManualPolicyInEspEncKey.setStatus("current")


class _IpsecNewCfgManualPolicyInEspAuthKey_Type(OctetString):
    """Custom type ipsecNewCfgManualPolicyInEspAuthKey based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_IpsecNewCfgManualPolicyInEspAuthKey_Type.__name__ = "OctetString"
_IpsecNewCfgManualPolicyInEspAuthKey_Object = MibTableColumn
ipsecNewCfgManualPolicyInEspAuthKey = _IpsecNewCfgManualPolicyInEspAuthKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 10, 1, 10),
    _IpsecNewCfgManualPolicyInEspAuthKey_Type()
)
ipsecNewCfgManualPolicyInEspAuthKey.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipsecNewCfgManualPolicyInEspAuthKey.setStatus("current")


class _IpsecNewCfgManualPolicyInEspSpi_Type(Unsigned32):
    """Custom type ipsecNewCfgManualPolicyInEspSpi based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(256, 4294967295),
    )


_IpsecNewCfgManualPolicyInEspSpi_Type.__name__ = "Unsigned32"
_IpsecNewCfgManualPolicyInEspSpi_Object = MibTableColumn
ipsecNewCfgManualPolicyInEspSpi = _IpsecNewCfgManualPolicyInEspSpi_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 10, 1, 11),
    _IpsecNewCfgManualPolicyInEspSpi_Type()
)
ipsecNewCfgManualPolicyInEspSpi.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipsecNewCfgManualPolicyInEspSpi.setStatus("current")


class _IpsecNewCfgManualPolicyOutEspEncKey_Type(OctetString):
    """Custom type ipsecNewCfgManualPolicyOutEspEncKey based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_IpsecNewCfgManualPolicyOutEspEncKey_Type.__name__ = "OctetString"
_IpsecNewCfgManualPolicyOutEspEncKey_Object = MibTableColumn
ipsecNewCfgManualPolicyOutEspEncKey = _IpsecNewCfgManualPolicyOutEspEncKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 10, 1, 12),
    _IpsecNewCfgManualPolicyOutEspEncKey_Type()
)
ipsecNewCfgManualPolicyOutEspEncKey.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipsecNewCfgManualPolicyOutEspEncKey.setStatus("current")


class _IpsecNewCfgManualPolicyOutEspAuthKey_Type(OctetString):
    """Custom type ipsecNewCfgManualPolicyOutEspAuthKey based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_IpsecNewCfgManualPolicyOutEspAuthKey_Type.__name__ = "OctetString"
_IpsecNewCfgManualPolicyOutEspAuthKey_Object = MibTableColumn
ipsecNewCfgManualPolicyOutEspAuthKey = _IpsecNewCfgManualPolicyOutEspAuthKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 10, 1, 13),
    _IpsecNewCfgManualPolicyOutEspAuthKey_Type()
)
ipsecNewCfgManualPolicyOutEspAuthKey.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipsecNewCfgManualPolicyOutEspAuthKey.setStatus("current")


class _IpsecNewCfgManualPolicyOutEspSpi_Type(Unsigned32):
    """Custom type ipsecNewCfgManualPolicyOutEspSpi based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(256, 4294967295),
    )


_IpsecNewCfgManualPolicyOutEspSpi_Type.__name__ = "Unsigned32"
_IpsecNewCfgManualPolicyOutEspSpi_Object = MibTableColumn
ipsecNewCfgManualPolicyOutEspSpi = _IpsecNewCfgManualPolicyOutEspSpi_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 10, 1, 14),
    _IpsecNewCfgManualPolicyOutEspSpi_Type()
)
ipsecNewCfgManualPolicyOutEspSpi.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipsecNewCfgManualPolicyOutEspSpi.setStatus("current")


class _IpsecNewCfgManualPolicyDelete_Type(Integer32):
    """Custom type ipsecNewCfgManualPolicyDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_IpsecNewCfgManualPolicyDelete_Type.__name__ = "Integer32"
_IpsecNewCfgManualPolicyDelete_Object = MibTableColumn
ipsecNewCfgManualPolicyDelete = _IpsecNewCfgManualPolicyDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 10, 1, 15),
    _IpsecNewCfgManualPolicyDelete_Type()
)
ipsecNewCfgManualPolicyDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipsecNewCfgManualPolicyDelete.setStatus("current")
_IpsecCurCfgIfTable_Object = MibTable
ipsecCurCfgIfTable = _IpsecCurCfgIfTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 11)
)
if mibBuilder.loadTexts:
    ipsecCurCfgIfTable.setStatus("current")
_IpsecCurCfgIfEntry_Object = MibTableRow
ipsecCurCfgIfEntry = _IpsecCurCfgIfEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 11, 1)
)
ipsecCurCfgIfEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipsecCurCfgIfIndex"),
)
if mibBuilder.loadTexts:
    ipsecCurCfgIfEntry.setStatus("current")
_IpsecCurCfgIfIndex_Type = Unsigned32
_IpsecCurCfgIfIndex_Object = MibTableColumn
ipsecCurCfgIfIndex = _IpsecCurCfgIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 11, 1, 1),
    _IpsecCurCfgIfIndex_Type()
)
ipsecCurCfgIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgIfIndex.setStatus("current")


class _IpsecCurCfgIfDynamicPolicyBmap_Type(OctetString):
    """Custom type ipsecCurCfgIfDynamicPolicyBmap based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 4),
    )


_IpsecCurCfgIfDynamicPolicyBmap_Type.__name__ = "OctetString"
_IpsecCurCfgIfDynamicPolicyBmap_Object = MibTableColumn
ipsecCurCfgIfDynamicPolicyBmap = _IpsecCurCfgIfDynamicPolicyBmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 11, 1, 2),
    _IpsecCurCfgIfDynamicPolicyBmap_Type()
)
ipsecCurCfgIfDynamicPolicyBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgIfDynamicPolicyBmap.setStatus("current")


class _IpsecCurCfgIfManualPolicyBmap_Type(OctetString):
    """Custom type ipsecCurCfgIfManualPolicyBmap based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 4),
    )


_IpsecCurCfgIfManualPolicyBmap_Type.__name__ = "OctetString"
_IpsecCurCfgIfManualPolicyBmap_Object = MibTableColumn
ipsecCurCfgIfManualPolicyBmap = _IpsecCurCfgIfManualPolicyBmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 11, 1, 5),
    _IpsecCurCfgIfManualPolicyBmap_Type()
)
ipsecCurCfgIfManualPolicyBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgIfManualPolicyBmap.setStatus("current")


class _IpsecCurCfgIfDelete_Type(Integer32):
    """Custom type ipsecCurCfgIfDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_IpsecCurCfgIfDelete_Type.__name__ = "Integer32"
_IpsecCurCfgIfDelete_Object = MibTableColumn
ipsecCurCfgIfDelete = _IpsecCurCfgIfDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 11, 1, 8),
    _IpsecCurCfgIfDelete_Type()
)
ipsecCurCfgIfDelete.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecCurCfgIfDelete.setStatus("current")
_IpsecNewCfgIfTable_Object = MibTable
ipsecNewCfgIfTable = _IpsecNewCfgIfTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 12)
)
if mibBuilder.loadTexts:
    ipsecNewCfgIfTable.setStatus("current")
_IpsecNewCfgIfEntry_Object = MibTableRow
ipsecNewCfgIfEntry = _IpsecNewCfgIfEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 12, 1)
)
ipsecNewCfgIfEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipsecNewCfgIfIndex"),
)
if mibBuilder.loadTexts:
    ipsecNewCfgIfEntry.setStatus("current")
_IpsecNewCfgIfIndex_Type = Unsigned32
_IpsecNewCfgIfIndex_Object = MibTableColumn
ipsecNewCfgIfIndex = _IpsecNewCfgIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 12, 1, 1),
    _IpsecNewCfgIfIndex_Type()
)
ipsecNewCfgIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecNewCfgIfIndex.setStatus("current")


class _IpsecNewCfgIfDynamicPolicyBmap_Type(OctetString):
    """Custom type ipsecNewCfgIfDynamicPolicyBmap based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 4),
    )


_IpsecNewCfgIfDynamicPolicyBmap_Type.__name__ = "OctetString"
_IpsecNewCfgIfDynamicPolicyBmap_Object = MibTableColumn
ipsecNewCfgIfDynamicPolicyBmap = _IpsecNewCfgIfDynamicPolicyBmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 12, 1, 2),
    _IpsecNewCfgIfDynamicPolicyBmap_Type()
)
ipsecNewCfgIfDynamicPolicyBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecNewCfgIfDynamicPolicyBmap.setStatus("current")


class _IpsecNewCfgIfAddDynamicPolicy_Type(Unsigned32):
    """Custom type ipsecNewCfgIfAddDynamicPolicy based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_IpsecNewCfgIfAddDynamicPolicy_Type.__name__ = "Unsigned32"
_IpsecNewCfgIfAddDynamicPolicy_Object = MibTableColumn
ipsecNewCfgIfAddDynamicPolicy = _IpsecNewCfgIfAddDynamicPolicy_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 12, 1, 3),
    _IpsecNewCfgIfAddDynamicPolicy_Type()
)
ipsecNewCfgIfAddDynamicPolicy.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipsecNewCfgIfAddDynamicPolicy.setStatus("current")


class _IpsecNewCfgIfDelDynamicPolicy_Type(Unsigned32):
    """Custom type ipsecNewCfgIfDelDynamicPolicy based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_IpsecNewCfgIfDelDynamicPolicy_Type.__name__ = "Unsigned32"
_IpsecNewCfgIfDelDynamicPolicy_Object = MibTableColumn
ipsecNewCfgIfDelDynamicPolicy = _IpsecNewCfgIfDelDynamicPolicy_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 12, 1, 4),
    _IpsecNewCfgIfDelDynamicPolicy_Type()
)
ipsecNewCfgIfDelDynamicPolicy.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipsecNewCfgIfDelDynamicPolicy.setStatus("current")


class _IpsecNewCfgIfManualPolicyBmap_Type(OctetString):
    """Custom type ipsecNewCfgIfManualPolicyBmap based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 4),
    )


_IpsecNewCfgIfManualPolicyBmap_Type.__name__ = "OctetString"
_IpsecNewCfgIfManualPolicyBmap_Object = MibTableColumn
ipsecNewCfgIfManualPolicyBmap = _IpsecNewCfgIfManualPolicyBmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 12, 1, 5),
    _IpsecNewCfgIfManualPolicyBmap_Type()
)
ipsecNewCfgIfManualPolicyBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecNewCfgIfManualPolicyBmap.setStatus("current")


class _IpsecNewCfgIfAddManualPolicy_Type(Unsigned32):
    """Custom type ipsecNewCfgIfAddManualPolicy based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_IpsecNewCfgIfAddManualPolicy_Type.__name__ = "Unsigned32"
_IpsecNewCfgIfAddManualPolicy_Object = MibTableColumn
ipsecNewCfgIfAddManualPolicy = _IpsecNewCfgIfAddManualPolicy_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 12, 1, 6),
    _IpsecNewCfgIfAddManualPolicy_Type()
)
ipsecNewCfgIfAddManualPolicy.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipsecNewCfgIfAddManualPolicy.setStatus("current")


class _IpsecNewCfgIfDelManualPolicy_Type(Unsigned32):
    """Custom type ipsecNewCfgIfDelManualPolicy based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_IpsecNewCfgIfDelManualPolicy_Type.__name__ = "Unsigned32"
_IpsecNewCfgIfDelManualPolicy_Object = MibTableColumn
ipsecNewCfgIfDelManualPolicy = _IpsecNewCfgIfDelManualPolicy_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 12, 1, 7),
    _IpsecNewCfgIfDelManualPolicy_Type()
)
ipsecNewCfgIfDelManualPolicy.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipsecNewCfgIfDelManualPolicy.setStatus("current")


class _IpsecNewCfgIfDelete_Type(Integer32):
    """Custom type ipsecNewCfgIfDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_IpsecNewCfgIfDelete_Type.__name__ = "Integer32"
_IpsecNewCfgIfDelete_Object = MibTableColumn
ipsecNewCfgIfDelete = _IpsecNewCfgIfDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 32, 2, 12, 1, 8),
    _IpsecNewCfgIfDelete_Type()
)
ipsecNewCfgIfDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipsecNewCfgIfDelete.setStatus("current")
_DhcpsnpCfg_ObjectIdentity = ObjectIdentity
dhcpsnpCfg = _DhcpsnpCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 33)
)


class _DhcpSnoopingCurCfgOnState_Type(Integer32):
    """Custom type dhcpSnoopingCurCfgOnState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_DhcpSnoopingCurCfgOnState_Type.__name__ = "Integer32"
_DhcpSnoopingCurCfgOnState_Object = MibScalar
dhcpSnoopingCurCfgOnState = _DhcpSnoopingCurCfgOnState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 33, 1),
    _DhcpSnoopingCurCfgOnState_Type()
)
dhcpSnoopingCurCfgOnState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopingCurCfgOnState.setStatus("current")


class _DhcpSnoopingNewCfgOnState_Type(Integer32):
    """Custom type dhcpSnoopingNewCfgOnState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_DhcpSnoopingNewCfgOnState_Type.__name__ = "Integer32"
_DhcpSnoopingNewCfgOnState_Object = MibScalar
dhcpSnoopingNewCfgOnState = _DhcpSnoopingNewCfgOnState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 33, 2),
    _DhcpSnoopingNewCfgOnState_Type()
)
dhcpSnoopingNewCfgOnState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dhcpSnoopingNewCfgOnState.setStatus("current")


class _DhcpSnoopingCurCfgOption82OnState_Type(Integer32):
    """Custom type dhcpSnoopingCurCfgOption82OnState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_DhcpSnoopingCurCfgOption82OnState_Type.__name__ = "Integer32"
_DhcpSnoopingCurCfgOption82OnState_Object = MibScalar
dhcpSnoopingCurCfgOption82OnState = _DhcpSnoopingCurCfgOption82OnState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 33, 3),
    _DhcpSnoopingCurCfgOption82OnState_Type()
)
dhcpSnoopingCurCfgOption82OnState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopingCurCfgOption82OnState.setStatus("current")


class _DhcpSnoopingNewCfgOption82OnState_Type(Integer32):
    """Custom type dhcpSnoopingNewCfgOption82OnState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_DhcpSnoopingNewCfgOption82OnState_Type.__name__ = "Integer32"
_DhcpSnoopingNewCfgOption82OnState_Object = MibScalar
dhcpSnoopingNewCfgOption82OnState = _DhcpSnoopingNewCfgOption82OnState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 33, 4),
    _DhcpSnoopingNewCfgOption82OnState_Type()
)
dhcpSnoopingNewCfgOption82OnState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dhcpSnoopingNewCfgOption82OnState.setStatus("current")
_DhcpSnoopingCurCfgPortTable_Object = MibTable
dhcpSnoopingCurCfgPortTable = _DhcpSnoopingCurCfgPortTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 33, 5)
)
if mibBuilder.loadTexts:
    dhcpSnoopingCurCfgPortTable.setStatus("current")
_DhcpSnoopingCurCfgPortTableEntry_Object = MibTableRow
dhcpSnoopingCurCfgPortTableEntry = _DhcpSnoopingCurCfgPortTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 33, 5, 1)
)
dhcpSnoopingCurCfgPortTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "dhcpSnoopingCurCfgPortId"),
)
if mibBuilder.loadTexts:
    dhcpSnoopingCurCfgPortTableEntry.setStatus("current")
_DhcpSnoopingCurCfgPortId_Type = Integer32
_DhcpSnoopingCurCfgPortId_Object = MibTableColumn
dhcpSnoopingCurCfgPortId = _DhcpSnoopingCurCfgPortId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 33, 5, 1, 1),
    _DhcpSnoopingCurCfgPortId_Type()
)
dhcpSnoopingCurCfgPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopingCurCfgPortId.setStatus("current")


class _DhcpSnoopingCurCfgPortTrusted_Type(Integer32):
    """Custom type dhcpSnoopingCurCfgPortTrusted based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("trusted", 1),
          ("untrusted", 2))
    )


_DhcpSnoopingCurCfgPortTrusted_Type.__name__ = "Integer32"
_DhcpSnoopingCurCfgPortTrusted_Object = MibTableColumn
dhcpSnoopingCurCfgPortTrusted = _DhcpSnoopingCurCfgPortTrusted_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 33, 5, 1, 2),
    _DhcpSnoopingCurCfgPortTrusted_Type()
)
dhcpSnoopingCurCfgPortTrusted.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopingCurCfgPortTrusted.setStatus("current")
_DhcpSnoopingCurCfgPortRateLimit_Type = Integer32
_DhcpSnoopingCurCfgPortRateLimit_Object = MibTableColumn
dhcpSnoopingCurCfgPortRateLimit = _DhcpSnoopingCurCfgPortRateLimit_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 33, 5, 1, 3),
    _DhcpSnoopingCurCfgPortRateLimit_Type()
)
dhcpSnoopingCurCfgPortRateLimit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopingCurCfgPortRateLimit.setStatus("current")
_DhcpSnoopingNewCfgPortTable_Object = MibTable
dhcpSnoopingNewCfgPortTable = _DhcpSnoopingNewCfgPortTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 33, 6)
)
if mibBuilder.loadTexts:
    dhcpSnoopingNewCfgPortTable.setStatus("current")
_DhcpSnoopingNewCfgPortTableEntry_Object = MibTableRow
dhcpSnoopingNewCfgPortTableEntry = _DhcpSnoopingNewCfgPortTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 33, 6, 1)
)
dhcpSnoopingNewCfgPortTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "dhcpSnoopingNewCfgportId"),
)
if mibBuilder.loadTexts:
    dhcpSnoopingNewCfgPortTableEntry.setStatus("current")
_DhcpSnoopingNewCfgportId_Type = Integer32
_DhcpSnoopingNewCfgportId_Object = MibTableColumn
dhcpSnoopingNewCfgportId = _DhcpSnoopingNewCfgportId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 33, 6, 1, 1),
    _DhcpSnoopingNewCfgportId_Type()
)
dhcpSnoopingNewCfgportId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopingNewCfgportId.setStatus("current")


class _DhcpSnoopingNewCfgportTrusted_Type(Integer32):
    """Custom type dhcpSnoopingNewCfgportTrusted based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("trusted", 1),
          ("untrusted", 2))
    )


_DhcpSnoopingNewCfgportTrusted_Type.__name__ = "Integer32"
_DhcpSnoopingNewCfgportTrusted_Object = MibTableColumn
dhcpSnoopingNewCfgportTrusted = _DhcpSnoopingNewCfgportTrusted_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 33, 6, 1, 2),
    _DhcpSnoopingNewCfgportTrusted_Type()
)
dhcpSnoopingNewCfgportTrusted.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dhcpSnoopingNewCfgportTrusted.setStatus("current")
_DhcpSnoopingNewCfgportRateLimit_Type = Integer32
_DhcpSnoopingNewCfgportRateLimit_Object = MibTableColumn
dhcpSnoopingNewCfgportRateLimit = _DhcpSnoopingNewCfgportRateLimit_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 33, 6, 1, 3),
    _DhcpSnoopingNewCfgportRateLimit_Type()
)
dhcpSnoopingNewCfgportRateLimit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dhcpSnoopingNewCfgportRateLimit.setStatus("current")
_DhcpSnoopingCurCfgVlanTable_Object = MibTable
dhcpSnoopingCurCfgVlanTable = _DhcpSnoopingCurCfgVlanTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 33, 7)
)
if mibBuilder.loadTexts:
    dhcpSnoopingCurCfgVlanTable.setStatus("current")
_DhcpSnoopingCurCfgVlanTableEntry_Object = MibTableRow
dhcpSnoopingCurCfgVlanTableEntry = _DhcpSnoopingCurCfgVlanTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 33, 7, 1)
)
dhcpSnoopingCurCfgVlanTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "dhcpSnoopingCurCfgVlanId"),
)
if mibBuilder.loadTexts:
    dhcpSnoopingCurCfgVlanTableEntry.setStatus("current")


class _DhcpSnoopingCurCfgVlanId_Type(Integer32):
    """Custom type dhcpSnoopingCurCfgVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_DhcpSnoopingCurCfgVlanId_Type.__name__ = "Integer32"
_DhcpSnoopingCurCfgVlanId_Object = MibTableColumn
dhcpSnoopingCurCfgVlanId = _DhcpSnoopingCurCfgVlanId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 33, 7, 1, 1),
    _DhcpSnoopingCurCfgVlanId_Type()
)
dhcpSnoopingCurCfgVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopingCurCfgVlanId.setStatus("current")


class _DhcpSnoopingCurCfgVlanOnState_Type(Integer32):
    """Custom type dhcpSnoopingCurCfgVlanOnState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_DhcpSnoopingCurCfgVlanOnState_Type.__name__ = "Integer32"
_DhcpSnoopingCurCfgVlanOnState_Object = MibTableColumn
dhcpSnoopingCurCfgVlanOnState = _DhcpSnoopingCurCfgVlanOnState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 33, 7, 1, 2),
    _DhcpSnoopingCurCfgVlanOnState_Type()
)
dhcpSnoopingCurCfgVlanOnState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopingCurCfgVlanOnState.setStatus("current")
_DhcpSnoopingNewCfgVlanTable_Object = MibTable
dhcpSnoopingNewCfgVlanTable = _DhcpSnoopingNewCfgVlanTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 33, 8)
)
if mibBuilder.loadTexts:
    dhcpSnoopingNewCfgVlanTable.setStatus("current")
_DhcpSnoopingNewCfgVlanTableEntry_Object = MibTableRow
dhcpSnoopingNewCfgVlanTableEntry = _DhcpSnoopingNewCfgVlanTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 33, 8, 1)
)
dhcpSnoopingNewCfgVlanTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "dhcpSnoopingNewCfgVlanId"),
)
if mibBuilder.loadTexts:
    dhcpSnoopingNewCfgVlanTableEntry.setStatus("current")


class _DhcpSnoopingNewCfgVlanId_Type(Integer32):
    """Custom type dhcpSnoopingNewCfgVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_DhcpSnoopingNewCfgVlanId_Type.__name__ = "Integer32"
_DhcpSnoopingNewCfgVlanId_Object = MibTableColumn
dhcpSnoopingNewCfgVlanId = _DhcpSnoopingNewCfgVlanId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 33, 8, 1, 1),
    _DhcpSnoopingNewCfgVlanId_Type()
)
dhcpSnoopingNewCfgVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopingNewCfgVlanId.setStatus("current")


class _DhcpSnoopingNewCfgVlanOnState_Type(Integer32):
    """Custom type dhcpSnoopingNewCfgVlanOnState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_DhcpSnoopingNewCfgVlanOnState_Type.__name__ = "Integer32"
_DhcpSnoopingNewCfgVlanOnState_Object = MibTableColumn
dhcpSnoopingNewCfgVlanOnState = _DhcpSnoopingNewCfgVlanOnState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 1, 33, 8, 1, 2),
    _DhcpSnoopingNewCfgVlanOnState_Type()
)
dhcpSnoopingNewCfgVlanOnState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dhcpSnoopingNewCfgVlanOnState.setStatus("current")
_Layer3Stats_ObjectIdentity = ObjectIdentity
layer3Stats = _Layer3Stats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2)
)
_ArpStats_ObjectIdentity = ObjectIdentity
arpStats = _ArpStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 2)
)
_ArpStatEntries_Type = Gauge32
_ArpStatEntries_Object = MibScalar
arpStatEntries = _ArpStatEntries_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 2, 1),
    _ArpStatEntries_Type()
)
arpStatEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    arpStatEntries.setStatus("current")
_ArpStatHighWater_Type = Gauge32
_ArpStatHighWater_Object = MibScalar
arpStatHighWater = _ArpStatHighWater_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 2, 2),
    _ArpStatHighWater_Type()
)
arpStatHighWater.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    arpStatHighWater.setStatus("current")
_ArpStatMaxEntries_Type = Gauge32
_ArpStatMaxEntries_Object = MibScalar
arpStatMaxEntries = _ArpStatMaxEntries_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 2, 3),
    _ArpStatMaxEntries_Type()
)
arpStatMaxEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    arpStatMaxEntries.setStatus("current")
_RouteStats_ObjectIdentity = ObjectIdentity
routeStats = _RouteStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 3)
)
_RouteStatEntries_Type = Gauge32
_RouteStatEntries_Object = MibScalar
routeStatEntries = _RouteStatEntries_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 3, 1),
    _RouteStatEntries_Type()
)
routeStatEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    routeStatEntries.setStatus("current")
_RouteStatHighWater_Type = Gauge32
_RouteStatHighWater_Object = MibScalar
routeStatHighWater = _RouteStatHighWater_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 3, 2),
    _RouteStatHighWater_Type()
)
routeStatHighWater.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    routeStatHighWater.setStatus("current")
_RouteStatStaticEntries_Type = Gauge32
_RouteStatStaticEntries_Object = MibScalar
routeStatStaticEntries = _RouteStatStaticEntries_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 3, 3),
    _RouteStatStaticEntries_Type()
)
routeStatStaticEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    routeStatStaticEntries.setStatus("current")
_RouteStatRipEntries_Type = Gauge32
_RouteStatRipEntries_Object = MibScalar
routeStatRipEntries = _RouteStatRipEntries_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 3, 4),
    _RouteStatRipEntries_Type()
)
routeStatRipEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    routeStatRipEntries.setStatus("current")
_RouteStatOspfEntries_Type = Gauge32
_RouteStatOspfEntries_Object = MibScalar
routeStatOspfEntries = _RouteStatOspfEntries_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 3, 5),
    _RouteStatOspfEntries_Type()
)
routeStatOspfEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    routeStatOspfEntries.setStatus("current")
_RouteStatBgpEntries_Type = Gauge32
_RouteStatBgpEntries_Object = MibScalar
routeStatBgpEntries = _RouteStatBgpEntries_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 3, 6),
    _RouteStatBgpEntries_Type()
)
routeStatBgpEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    routeStatBgpEntries.setStatus("current")
_RouteStatMaxEntries_Type = Gauge32
_RouteStatMaxEntries_Object = MibScalar
routeStatMaxEntries = _RouteStatMaxEntries_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 3, 7),
    _RouteStatMaxEntries_Type()
)
routeStatMaxEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    routeStatMaxEntries.setStatus("current")
_RouteStatEcmpMaxEntries_Type = Gauge32
_RouteStatEcmpMaxEntries_Object = MibScalar
routeStatEcmpMaxEntries = _RouteStatEcmpMaxEntries_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 3, 8),
    _RouteStatEcmpMaxEntries_Type()
)
routeStatEcmpMaxEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    routeStatEcmpMaxEntries.setStatus("current")
_RouteStatEcmpMaxStaticEntries_Type = Gauge32
_RouteStatEcmpMaxStaticEntries_Object = MibScalar
routeStatEcmpMaxStaticEntries = _RouteStatEcmpMaxStaticEntries_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 3, 9),
    _RouteStatEcmpMaxStaticEntries_Type()
)
routeStatEcmpMaxStaticEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    routeStatEcmpMaxStaticEntries.setStatus("current")
_RouteStatEcmpPathsEntries_Type = Gauge32
_RouteStatEcmpPathsEntries_Object = MibScalar
routeStatEcmpPathsEntries = _RouteStatEcmpPathsEntries_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 3, 11),
    _RouteStatEcmpPathsEntries_Type()
)
routeStatEcmpPathsEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    routeStatEcmpPathsEntries.setStatus("current")
_DnsStats_ObjectIdentity = ObjectIdentity
dnsStats = _DnsStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 4)
)
_DnsStatInGoodDnsRequests_Type = Counter32
_DnsStatInGoodDnsRequests_Object = MibScalar
dnsStatInGoodDnsRequests = _DnsStatInGoodDnsRequests_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 4, 1),
    _DnsStatInGoodDnsRequests_Type()
)
dnsStatInGoodDnsRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dnsStatInGoodDnsRequests.setStatus("current")
_DnsStatInBadDnsRequests_Type = Counter32
_DnsStatInBadDnsRequests_Object = MibScalar
dnsStatInBadDnsRequests = _DnsStatInBadDnsRequests_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 4, 2),
    _DnsStatInBadDnsRequests_Type()
)
dnsStatInBadDnsRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dnsStatInBadDnsRequests.setStatus("current")
_DnsStatOutDnsRequests_Type = Counter32
_DnsStatOutDnsRequests_Object = MibScalar
dnsStatOutDnsRequests = _DnsStatOutDnsRequests_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 4, 3),
    _DnsStatOutDnsRequests_Type()
)
dnsStatOutDnsRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dnsStatOutDnsRequests.setStatus("current")
_VrrpStats_ObjectIdentity = ObjectIdentity
vrrpStats = _VrrpStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 5)
)
_VrrpStatInAdvers_Type = Counter32
_VrrpStatInAdvers_Object = MibScalar
vrrpStatInAdvers = _VrrpStatInAdvers_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 5, 1),
    _VrrpStatInAdvers_Type()
)
vrrpStatInAdvers.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpStatInAdvers.setStatus("current")
_VrrpStatOutAdvers_Type = Counter32
_VrrpStatOutAdvers_Object = MibScalar
vrrpStatOutAdvers = _VrrpStatOutAdvers_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 5, 2),
    _VrrpStatOutAdvers_Type()
)
vrrpStatOutAdvers.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpStatOutAdvers.setStatus("current")
_VrrpStatBadAdvers_Type = Counter32
_VrrpStatBadAdvers_Object = MibScalar
vrrpStatBadAdvers = _VrrpStatBadAdvers_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 5, 3),
    _VrrpStatBadAdvers_Type()
)
vrrpStatBadAdvers.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpStatBadAdvers.setStatus("current")
_VrrpStatBadVersion_Type = Counter32
_VrrpStatBadVersion_Object = MibScalar
vrrpStatBadVersion = _VrrpStatBadVersion_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 5, 4),
    _VrrpStatBadVersion_Type()
)
vrrpStatBadVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpStatBadVersion.setStatus("current")
_VrrpStatBadAddress_Type = Counter32
_VrrpStatBadAddress_Object = MibScalar
vrrpStatBadAddress = _VrrpStatBadAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 5, 5),
    _VrrpStatBadAddress_Type()
)
vrrpStatBadAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpStatBadAddress.setStatus("current")
_VrrpStatBadPassword_Type = Counter32
_VrrpStatBadPassword_Object = MibScalar
vrrpStatBadPassword = _VrrpStatBadPassword_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 5, 6),
    _VrrpStatBadPassword_Type()
)
vrrpStatBadPassword.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpStatBadPassword.setStatus("current")
_VrrpStatBadVrid_Type = Counter32
_VrrpStatBadVrid_Object = MibScalar
vrrpStatBadVrid = _VrrpStatBadVrid_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 5, 7),
    _VrrpStatBadVrid_Type()
)
vrrpStatBadVrid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpStatBadVrid.setStatus("current")
_VrrpStatBadData_Type = Counter32
_VrrpStatBadData_Object = MibScalar
vrrpStatBadData = _VrrpStatBadData_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 5, 8),
    _VrrpStatBadData_Type()
)
vrrpStatBadData.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpStatBadData.setStatus("current")
_VrrpStatBadInterval_Type = Counter32
_VrrpStatBadInterval_Object = MibScalar
vrrpStatBadInterval = _VrrpStatBadInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 5, 9),
    _VrrpStatBadInterval_Type()
)
vrrpStatBadInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpStatBadInterval.setStatus("current")
_VrrpStatOutGratuitousARPs_Type = Counter32
_VrrpStatOutGratuitousARPs_Object = MibScalar
vrrpStatOutGratuitousARPs = _VrrpStatOutGratuitousARPs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 5, 10),
    _VrrpStatOutGratuitousARPs_Type()
)
vrrpStatOutGratuitousARPs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpStatOutGratuitousARPs.setStatus("current")
_OspfStats_ObjectIdentity = ObjectIdentity
ospfStats = _OspfStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6)
)
_OspfGeneralStats_ObjectIdentity = ObjectIdentity
ospfGeneralStats = _OspfGeneralStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1)
)
_OspfCumRxTxStats_ObjectIdentity = ObjectIdentity
ospfCumRxTxStats = _OspfCumRxTxStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 1)
)
_OspfCumRxPkts_Type = Counter32
_OspfCumRxPkts_Object = MibScalar
ospfCumRxPkts = _OspfCumRxPkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 1, 1),
    _OspfCumRxPkts_Type()
)
ospfCumRxPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumRxPkts.setStatus("current")
_OspfCumTxPkts_Type = Counter32
_OspfCumTxPkts_Object = MibScalar
ospfCumTxPkts = _OspfCumTxPkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 1, 2),
    _OspfCumTxPkts_Type()
)
ospfCumTxPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumTxPkts.setStatus("current")
_OspfCumRxHello_Type = Counter32
_OspfCumRxHello_Object = MibScalar
ospfCumRxHello = _OspfCumRxHello_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 1, 3),
    _OspfCumRxHello_Type()
)
ospfCumRxHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumRxHello.setStatus("current")
_OspfCumTxHello_Type = Counter32
_OspfCumTxHello_Object = MibScalar
ospfCumTxHello = _OspfCumTxHello_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 1, 4),
    _OspfCumTxHello_Type()
)
ospfCumTxHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumTxHello.setStatus("current")
_OspfCumRxDatabase_Type = Counter32
_OspfCumRxDatabase_Object = MibScalar
ospfCumRxDatabase = _OspfCumRxDatabase_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 1, 5),
    _OspfCumRxDatabase_Type()
)
ospfCumRxDatabase.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumRxDatabase.setStatus("current")
_OspfCumTxDatabase_Type = Counter32
_OspfCumTxDatabase_Object = MibScalar
ospfCumTxDatabase = _OspfCumTxDatabase_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 1, 6),
    _OspfCumTxDatabase_Type()
)
ospfCumTxDatabase.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumTxDatabase.setStatus("current")
_OspfCumRxlsReqs_Type = Counter32
_OspfCumRxlsReqs_Object = MibScalar
ospfCumRxlsReqs = _OspfCumRxlsReqs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 1, 7),
    _OspfCumRxlsReqs_Type()
)
ospfCumRxlsReqs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumRxlsReqs.setStatus("current")
_OspfCumTxlsReqs_Type = Counter32
_OspfCumTxlsReqs_Object = MibScalar
ospfCumTxlsReqs = _OspfCumTxlsReqs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 1, 8),
    _OspfCumTxlsReqs_Type()
)
ospfCumTxlsReqs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumTxlsReqs.setStatus("current")
_OspfCumRxlsAcks_Type = Counter32
_OspfCumRxlsAcks_Object = MibScalar
ospfCumRxlsAcks = _OspfCumRxlsAcks_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 1, 9),
    _OspfCumRxlsAcks_Type()
)
ospfCumRxlsAcks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumRxlsAcks.setStatus("current")
_OspfCumTxlsAcks_Type = Counter32
_OspfCumTxlsAcks_Object = MibScalar
ospfCumTxlsAcks = _OspfCumTxlsAcks_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 1, 10),
    _OspfCumTxlsAcks_Type()
)
ospfCumTxlsAcks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumTxlsAcks.setStatus("current")
_OspfCumRxlsUpdates_Type = Counter32
_OspfCumRxlsUpdates_Object = MibScalar
ospfCumRxlsUpdates = _OspfCumRxlsUpdates_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 1, 11),
    _OspfCumRxlsUpdates_Type()
)
ospfCumRxlsUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumRxlsUpdates.setStatus("current")
_OspfCumTxlsUpdates_Type = Counter32
_OspfCumTxlsUpdates_Object = MibScalar
ospfCumTxlsUpdates = _OspfCumTxlsUpdates_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 1, 12),
    _OspfCumTxlsUpdates_Type()
)
ospfCumTxlsUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumTxlsUpdates.setStatus("current")
_OspfCumNbrChangeStats_ObjectIdentity = ObjectIdentity
ospfCumNbrChangeStats = _OspfCumNbrChangeStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 2)
)
_OspfCumNbrhello_Type = Counter32
_OspfCumNbrhello_Object = MibScalar
ospfCumNbrhello = _OspfCumNbrhello_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 2, 1),
    _OspfCumNbrhello_Type()
)
ospfCumNbrhello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumNbrhello.setStatus("current")
_OspfCumNbrStart_Type = Counter32
_OspfCumNbrStart_Object = MibScalar
ospfCumNbrStart = _OspfCumNbrStart_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 2, 2),
    _OspfCumNbrStart_Type()
)
ospfCumNbrStart.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumNbrStart.setStatus("current")
_OspfCumNbrAdjointOk_Type = Counter32
_OspfCumNbrAdjointOk_Object = MibScalar
ospfCumNbrAdjointOk = _OspfCumNbrAdjointOk_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 2, 3),
    _OspfCumNbrAdjointOk_Type()
)
ospfCumNbrAdjointOk.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumNbrAdjointOk.setStatus("current")
_OspfCumNbrNegotiationDone_Type = Counter32
_OspfCumNbrNegotiationDone_Object = MibScalar
ospfCumNbrNegotiationDone = _OspfCumNbrNegotiationDone_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 2, 4),
    _OspfCumNbrNegotiationDone_Type()
)
ospfCumNbrNegotiationDone.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumNbrNegotiationDone.setStatus("current")
_OspfCumNbrExchangeDone_Type = Counter32
_OspfCumNbrExchangeDone_Object = MibScalar
ospfCumNbrExchangeDone = _OspfCumNbrExchangeDone_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 2, 5),
    _OspfCumNbrExchangeDone_Type()
)
ospfCumNbrExchangeDone.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumNbrExchangeDone.setStatus("current")
_OspfCumNbrBadRequests_Type = Counter32
_OspfCumNbrBadRequests_Object = MibScalar
ospfCumNbrBadRequests = _OspfCumNbrBadRequests_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 2, 6),
    _OspfCumNbrBadRequests_Type()
)
ospfCumNbrBadRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumNbrBadRequests.setStatus("current")
_OspfCumNbrBadSequence_Type = Counter32
_OspfCumNbrBadSequence_Object = MibScalar
ospfCumNbrBadSequence = _OspfCumNbrBadSequence_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 2, 7),
    _OspfCumNbrBadSequence_Type()
)
ospfCumNbrBadSequence.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumNbrBadSequence.setStatus("current")
_OspfCumNbrLoadingDone_Type = Counter32
_OspfCumNbrLoadingDone_Object = MibScalar
ospfCumNbrLoadingDone = _OspfCumNbrLoadingDone_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 2, 8),
    _OspfCumNbrLoadingDone_Type()
)
ospfCumNbrLoadingDone.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumNbrLoadingDone.setStatus("current")
_OspfCumNbrN1way_Type = Counter32
_OspfCumNbrN1way_Object = MibScalar
ospfCumNbrN1way = _OspfCumNbrN1way_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 2, 9),
    _OspfCumNbrN1way_Type()
)
ospfCumNbrN1way.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumNbrN1way.setStatus("current")
_OspfCumNbrRstAd_Type = Counter32
_OspfCumNbrRstAd_Object = MibScalar
ospfCumNbrRstAd = _OspfCumNbrRstAd_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 2, 10),
    _OspfCumNbrRstAd_Type()
)
ospfCumNbrRstAd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumNbrRstAd.setStatus("current")
_OspfCumNbrDown_Type = Counter32
_OspfCumNbrDown_Object = MibScalar
ospfCumNbrDown = _OspfCumNbrDown_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 2, 11),
    _OspfCumNbrDown_Type()
)
ospfCumNbrDown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumNbrDown.setStatus("current")
_OspfCumNbrN2way_Type = Counter32
_OspfCumNbrN2way_Object = MibScalar
ospfCumNbrN2way = _OspfCumNbrN2way_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 2, 12),
    _OspfCumNbrN2way_Type()
)
ospfCumNbrN2way.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumNbrN2way.setStatus("current")
_OspfCumIntfChangeStats_ObjectIdentity = ObjectIdentity
ospfCumIntfChangeStats = _OspfCumIntfChangeStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 3)
)
_OspfCumIntfHello_Type = Counter32
_OspfCumIntfHello_Object = MibScalar
ospfCumIntfHello = _OspfCumIntfHello_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 3, 1),
    _OspfCumIntfHello_Type()
)
ospfCumIntfHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumIntfHello.setStatus("current")
_OspfCumIntfDown_Type = Counter32
_OspfCumIntfDown_Object = MibScalar
ospfCumIntfDown = _OspfCumIntfDown_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 3, 2),
    _OspfCumIntfDown_Type()
)
ospfCumIntfDown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumIntfDown.setStatus("current")
_OspfCumIntfLoop_Type = Counter32
_OspfCumIntfLoop_Object = MibScalar
ospfCumIntfLoop = _OspfCumIntfLoop_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 3, 3),
    _OspfCumIntfLoop_Type()
)
ospfCumIntfLoop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumIntfLoop.setStatus("current")
_OspfCumIntfUnloop_Type = Counter32
_OspfCumIntfUnloop_Object = MibScalar
ospfCumIntfUnloop = _OspfCumIntfUnloop_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 3, 4),
    _OspfCumIntfUnloop_Type()
)
ospfCumIntfUnloop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumIntfUnloop.setStatus("current")
_OspfCumIntfWaitTimer_Type = Counter32
_OspfCumIntfWaitTimer_Object = MibScalar
ospfCumIntfWaitTimer = _OspfCumIntfWaitTimer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 3, 5),
    _OspfCumIntfWaitTimer_Type()
)
ospfCumIntfWaitTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumIntfWaitTimer.setStatus("current")
_OspfCumIntfBackup_Type = Counter32
_OspfCumIntfBackup_Object = MibScalar
ospfCumIntfBackup = _OspfCumIntfBackup_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 3, 6),
    _OspfCumIntfBackup_Type()
)
ospfCumIntfBackup.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumIntfBackup.setStatus("current")
_OspfCumIntfNbrChange_Type = Counter32
_OspfCumIntfNbrChange_Object = MibScalar
ospfCumIntfNbrChange = _OspfCumIntfNbrChange_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 3, 7),
    _OspfCumIntfNbrChange_Type()
)
ospfCumIntfNbrChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumIntfNbrChange.setStatus("current")
_OspfTimersKickOffStats_ObjectIdentity = ObjectIdentity
ospfTimersKickOffStats = _OspfTimersKickOffStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 4)
)
_OspfTmrsKckOffHello_Type = Counter32
_OspfTmrsKckOffHello_Object = MibScalar
ospfTmrsKckOffHello = _OspfTmrsKckOffHello_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 4, 1),
    _OspfTmrsKckOffHello_Type()
)
ospfTmrsKckOffHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfTmrsKckOffHello.setStatus("current")
_OspfTmrsKckOffRetransmit_Type = Counter32
_OspfTmrsKckOffRetransmit_Object = MibScalar
ospfTmrsKckOffRetransmit = _OspfTmrsKckOffRetransmit_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 4, 2),
    _OspfTmrsKckOffRetransmit_Type()
)
ospfTmrsKckOffRetransmit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfTmrsKckOffRetransmit.setStatus("current")
_OspfTmrsKckOffLsaLock_Type = Counter32
_OspfTmrsKckOffLsaLock_Object = MibScalar
ospfTmrsKckOffLsaLock = _OspfTmrsKckOffLsaLock_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 4, 3),
    _OspfTmrsKckOffLsaLock_Type()
)
ospfTmrsKckOffLsaLock.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfTmrsKckOffLsaLock.setStatus("current")
_OspfTmrsKckOffLsaAck_Type = Counter32
_OspfTmrsKckOffLsaAck_Object = MibScalar
ospfTmrsKckOffLsaAck = _OspfTmrsKckOffLsaAck_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 4, 4),
    _OspfTmrsKckOffLsaAck_Type()
)
ospfTmrsKckOffLsaAck.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfTmrsKckOffLsaAck.setStatus("current")
_OspfTmrsKckOffDbage_Type = Counter32
_OspfTmrsKckOffDbage_Object = MibScalar
ospfTmrsKckOffDbage = _OspfTmrsKckOffDbage_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 4, 5),
    _OspfTmrsKckOffDbage_Type()
)
ospfTmrsKckOffDbage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfTmrsKckOffDbage.setStatus("current")
_OspfTmrsKckOffSummary_Type = Counter32
_OspfTmrsKckOffSummary_Object = MibScalar
ospfTmrsKckOffSummary = _OspfTmrsKckOffSummary_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 4, 6),
    _OspfTmrsKckOffSummary_Type()
)
ospfTmrsKckOffSummary.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfTmrsKckOffSummary.setStatus("current")
_OspfTmrsKckOffAseExport_Type = Counter32
_OspfTmrsKckOffAseExport_Object = MibScalar
ospfTmrsKckOffAseExport = _OspfTmrsKckOffAseExport_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 1, 4, 7),
    _OspfTmrsKckOffAseExport_Type()
)
ospfTmrsKckOffAseExport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfTmrsKckOffAseExport.setStatus("current")
_OspfArea_ObjectIdentity = ObjectIdentity
ospfArea = _OspfArea_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2)
)
_OspfAreaRxTxStats_Object = MibTable
ospfAreaRxTxStats = _OspfAreaRxTxStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 1)
)
if mibBuilder.loadTexts:
    ospfAreaRxTxStats.setStatus("current")
_OspfAreaRxTxStatsEntry_Object = MibTableRow
ospfAreaRxTxStatsEntry = _OspfAreaRxTxStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 1, 1)
)
ospfAreaRxTxStatsEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospfAreaRxTxIndex"),
)
if mibBuilder.loadTexts:
    ospfAreaRxTxStatsEntry.setStatus("current")
_OspfAreaRxTxIndex_Type = Integer32
_OspfAreaRxTxIndex_Object = MibTableColumn
ospfAreaRxTxIndex = _OspfAreaRxTxIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 1, 1, 1),
    _OspfAreaRxTxIndex_Type()
)
ospfAreaRxTxIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaRxTxIndex.setStatus("current")
_OspfAreaRxPkts_Type = Counter32
_OspfAreaRxPkts_Object = MibTableColumn
ospfAreaRxPkts = _OspfAreaRxPkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 1, 1, 2),
    _OspfAreaRxPkts_Type()
)
ospfAreaRxPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaRxPkts.setStatus("current")
_OspfAreaTxPkts_Type = Counter32
_OspfAreaTxPkts_Object = MibTableColumn
ospfAreaTxPkts = _OspfAreaTxPkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 1, 1, 3),
    _OspfAreaTxPkts_Type()
)
ospfAreaTxPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaTxPkts.setStatus("current")
_OspfAreaRxHello_Type = Counter32
_OspfAreaRxHello_Object = MibTableColumn
ospfAreaRxHello = _OspfAreaRxHello_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 1, 1, 4),
    _OspfAreaRxHello_Type()
)
ospfAreaRxHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaRxHello.setStatus("current")
_OspfAreaTxHello_Type = Counter32
_OspfAreaTxHello_Object = MibTableColumn
ospfAreaTxHello = _OspfAreaTxHello_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 1, 1, 5),
    _OspfAreaTxHello_Type()
)
ospfAreaTxHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaTxHello.setStatus("current")
_OspfAreaRxDatabase_Type = Counter32
_OspfAreaRxDatabase_Object = MibTableColumn
ospfAreaRxDatabase = _OspfAreaRxDatabase_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 1, 1, 6),
    _OspfAreaRxDatabase_Type()
)
ospfAreaRxDatabase.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaRxDatabase.setStatus("current")
_OspfAreaTxDatabase_Type = Counter32
_OspfAreaTxDatabase_Object = MibTableColumn
ospfAreaTxDatabase = _OspfAreaTxDatabase_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 1, 1, 7),
    _OspfAreaTxDatabase_Type()
)
ospfAreaTxDatabase.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaTxDatabase.setStatus("current")
_OspfAreaRxlsReqs_Type = Counter32
_OspfAreaRxlsReqs_Object = MibTableColumn
ospfAreaRxlsReqs = _OspfAreaRxlsReqs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 1, 1, 8),
    _OspfAreaRxlsReqs_Type()
)
ospfAreaRxlsReqs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaRxlsReqs.setStatus("current")
_OspfAreaTxlsReqs_Type = Counter32
_OspfAreaTxlsReqs_Object = MibTableColumn
ospfAreaTxlsReqs = _OspfAreaTxlsReqs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 1, 1, 9),
    _OspfAreaTxlsReqs_Type()
)
ospfAreaTxlsReqs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaTxlsReqs.setStatus("current")
_OspfAreaRxlsAcks_Type = Counter32
_OspfAreaRxlsAcks_Object = MibTableColumn
ospfAreaRxlsAcks = _OspfAreaRxlsAcks_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 1, 1, 10),
    _OspfAreaRxlsAcks_Type()
)
ospfAreaRxlsAcks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaRxlsAcks.setStatus("current")
_OspfAreaTxlsAcks_Type = Counter32
_OspfAreaTxlsAcks_Object = MibTableColumn
ospfAreaTxlsAcks = _OspfAreaTxlsAcks_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 1, 1, 11),
    _OspfAreaTxlsAcks_Type()
)
ospfAreaTxlsAcks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaTxlsAcks.setStatus("current")
_OspfAreaRxlsUpdates_Type = Counter32
_OspfAreaRxlsUpdates_Object = MibTableColumn
ospfAreaRxlsUpdates = _OspfAreaRxlsUpdates_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 1, 1, 12),
    _OspfAreaRxlsUpdates_Type()
)
ospfAreaRxlsUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaRxlsUpdates.setStatus("current")
_OspfAreaTxlsUpdates_Type = Counter32
_OspfAreaTxlsUpdates_Object = MibTableColumn
ospfAreaTxlsUpdates = _OspfAreaTxlsUpdates_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 1, 1, 13),
    _OspfAreaTxlsUpdates_Type()
)
ospfAreaTxlsUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaTxlsUpdates.setStatus("current")
_OspfAreaNbrChangeStats_Object = MibTable
ospfAreaNbrChangeStats = _OspfAreaNbrChangeStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 2)
)
if mibBuilder.loadTexts:
    ospfAreaNbrChangeStats.setStatus("current")
_OspfAreaNbrChangeStatsEntry_Object = MibTableRow
ospfAreaNbrChangeStatsEntry = _OspfAreaNbrChangeStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 2, 1)
)
ospfAreaNbrChangeStatsEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospfAreaNbrIndex"),
)
if mibBuilder.loadTexts:
    ospfAreaNbrChangeStatsEntry.setStatus("current")
_OspfAreaNbrIndex_Type = Integer32
_OspfAreaNbrIndex_Object = MibTableColumn
ospfAreaNbrIndex = _OspfAreaNbrIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 2, 1, 1),
    _OspfAreaNbrIndex_Type()
)
ospfAreaNbrIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaNbrIndex.setStatus("current")
_OspfAreaNbrhello_Type = Counter32
_OspfAreaNbrhello_Object = MibTableColumn
ospfAreaNbrhello = _OspfAreaNbrhello_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 2, 1, 2),
    _OspfAreaNbrhello_Type()
)
ospfAreaNbrhello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaNbrhello.setStatus("current")
_OspfAreaNbrStart_Type = Counter32
_OspfAreaNbrStart_Object = MibTableColumn
ospfAreaNbrStart = _OspfAreaNbrStart_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 2, 1, 3),
    _OspfAreaNbrStart_Type()
)
ospfAreaNbrStart.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaNbrStart.setStatus("current")
_OspfAreaNbrAdjointOk_Type = Counter32
_OspfAreaNbrAdjointOk_Object = MibTableColumn
ospfAreaNbrAdjointOk = _OspfAreaNbrAdjointOk_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 2, 1, 4),
    _OspfAreaNbrAdjointOk_Type()
)
ospfAreaNbrAdjointOk.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaNbrAdjointOk.setStatus("current")
_OspfAreaNbrNegotiationDone_Type = Counter32
_OspfAreaNbrNegotiationDone_Object = MibTableColumn
ospfAreaNbrNegotiationDone = _OspfAreaNbrNegotiationDone_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 2, 1, 5),
    _OspfAreaNbrNegotiationDone_Type()
)
ospfAreaNbrNegotiationDone.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaNbrNegotiationDone.setStatus("current")
_OspfAreaNbrExchangeDone_Type = Counter32
_OspfAreaNbrExchangeDone_Object = MibTableColumn
ospfAreaNbrExchangeDone = _OspfAreaNbrExchangeDone_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 2, 1, 6),
    _OspfAreaNbrExchangeDone_Type()
)
ospfAreaNbrExchangeDone.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaNbrExchangeDone.setStatus("current")
_OspfAreaNbrBadRequests_Type = Counter32
_OspfAreaNbrBadRequests_Object = MibTableColumn
ospfAreaNbrBadRequests = _OspfAreaNbrBadRequests_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 2, 1, 7),
    _OspfAreaNbrBadRequests_Type()
)
ospfAreaNbrBadRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaNbrBadRequests.setStatus("current")
_OspfAreaNbrBadSequence_Type = Counter32
_OspfAreaNbrBadSequence_Object = MibTableColumn
ospfAreaNbrBadSequence = _OspfAreaNbrBadSequence_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 2, 1, 8),
    _OspfAreaNbrBadSequence_Type()
)
ospfAreaNbrBadSequence.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaNbrBadSequence.setStatus("current")
_OspfAreaNbrLoadingDone_Type = Counter32
_OspfAreaNbrLoadingDone_Object = MibTableColumn
ospfAreaNbrLoadingDone = _OspfAreaNbrLoadingDone_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 2, 1, 9),
    _OspfAreaNbrLoadingDone_Type()
)
ospfAreaNbrLoadingDone.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaNbrLoadingDone.setStatus("current")
_OspfAreaNbrN1way_Type = Counter32
_OspfAreaNbrN1way_Object = MibTableColumn
ospfAreaNbrN1way = _OspfAreaNbrN1way_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 2, 1, 10),
    _OspfAreaNbrN1way_Type()
)
ospfAreaNbrN1way.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaNbrN1way.setStatus("current")
_OspfAreaNbrRstAd_Type = Counter32
_OspfAreaNbrRstAd_Object = MibTableColumn
ospfAreaNbrRstAd = _OspfAreaNbrRstAd_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 2, 1, 11),
    _OspfAreaNbrRstAd_Type()
)
ospfAreaNbrRstAd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaNbrRstAd.setStatus("current")
_OspfAreaNbrDown_Type = Counter32
_OspfAreaNbrDown_Object = MibTableColumn
ospfAreaNbrDown = _OspfAreaNbrDown_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 2, 1, 12),
    _OspfAreaNbrDown_Type()
)
ospfAreaNbrDown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaNbrDown.setStatus("current")
_OspfAreaNbrN2way_Type = Counter32
_OspfAreaNbrN2way_Object = MibTableColumn
ospfAreaNbrN2way = _OspfAreaNbrN2way_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 2, 1, 13),
    _OspfAreaNbrN2way_Type()
)
ospfAreaNbrN2way.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaNbrN2way.setStatus("current")
_OspfAreaChangeStats_Object = MibTable
ospfAreaChangeStats = _OspfAreaChangeStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 3)
)
if mibBuilder.loadTexts:
    ospfAreaChangeStats.setStatus("current")
_OspfAreaChangeStatsEntry_Object = MibTableRow
ospfAreaChangeStatsEntry = _OspfAreaChangeStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 3, 1)
)
ospfAreaChangeStatsEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospfAreaIntfIndex"),
)
if mibBuilder.loadTexts:
    ospfAreaChangeStatsEntry.setStatus("current")
_OspfAreaIntfIndex_Type = Integer32
_OspfAreaIntfIndex_Object = MibTableColumn
ospfAreaIntfIndex = _OspfAreaIntfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 3, 1, 1),
    _OspfAreaIntfIndex_Type()
)
ospfAreaIntfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaIntfIndex.setStatus("current")
_OspfAreaIntfHello_Type = Counter32
_OspfAreaIntfHello_Object = MibTableColumn
ospfAreaIntfHello = _OspfAreaIntfHello_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 3, 1, 2),
    _OspfAreaIntfHello_Type()
)
ospfAreaIntfHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaIntfHello.setStatus("current")
_OspfAreaIntfDown_Type = Counter32
_OspfAreaIntfDown_Object = MibTableColumn
ospfAreaIntfDown = _OspfAreaIntfDown_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 3, 1, 3),
    _OspfAreaIntfDown_Type()
)
ospfAreaIntfDown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaIntfDown.setStatus("current")
_OspfAreaIntfLoop_Type = Counter32
_OspfAreaIntfLoop_Object = MibTableColumn
ospfAreaIntfLoop = _OspfAreaIntfLoop_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 3, 1, 4),
    _OspfAreaIntfLoop_Type()
)
ospfAreaIntfLoop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaIntfLoop.setStatus("current")
_OspfAreaIntfUnloop_Type = Counter32
_OspfAreaIntfUnloop_Object = MibTableColumn
ospfAreaIntfUnloop = _OspfAreaIntfUnloop_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 3, 1, 5),
    _OspfAreaIntfUnloop_Type()
)
ospfAreaIntfUnloop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaIntfUnloop.setStatus("current")
_OspfAreaIntfWaitTimer_Type = Counter32
_OspfAreaIntfWaitTimer_Object = MibTableColumn
ospfAreaIntfWaitTimer = _OspfAreaIntfWaitTimer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 3, 1, 6),
    _OspfAreaIntfWaitTimer_Type()
)
ospfAreaIntfWaitTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaIntfWaitTimer.setStatus("current")
_OspfAreaIntfBackup_Type = Counter32
_OspfAreaIntfBackup_Object = MibTableColumn
ospfAreaIntfBackup = _OspfAreaIntfBackup_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 3, 1, 7),
    _OspfAreaIntfBackup_Type()
)
ospfAreaIntfBackup.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaIntfBackup.setStatus("current")
_OspfAreaIntfNbrChange_Type = Counter32
_OspfAreaIntfNbrChange_Object = MibTableColumn
ospfAreaIntfNbrChange = _OspfAreaIntfNbrChange_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 3, 1, 8),
    _OspfAreaIntfNbrChange_Type()
)
ospfAreaIntfNbrChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaIntfNbrChange.setStatus("current")
_OspfAreaErrorStats_Object = MibTable
ospfAreaErrorStats = _OspfAreaErrorStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 4)
)
if mibBuilder.loadTexts:
    ospfAreaErrorStats.setStatus("current")
_OspfAreaErrorStatsEntry_Object = MibTableRow
ospfAreaErrorStatsEntry = _OspfAreaErrorStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 4, 1)
)
ospfAreaErrorStatsEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospfAreaErrIndex"),
)
if mibBuilder.loadTexts:
    ospfAreaErrorStatsEntry.setStatus("current")
_OspfAreaErrIndex_Type = Integer32
_OspfAreaErrIndex_Object = MibTableColumn
ospfAreaErrIndex = _OspfAreaErrIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 4, 1, 1),
    _OspfAreaErrIndex_Type()
)
ospfAreaErrIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaErrIndex.setStatus("current")
_OspfAreaErrAuthFailure_Type = Counter32
_OspfAreaErrAuthFailure_Object = MibTableColumn
ospfAreaErrAuthFailure = _OspfAreaErrAuthFailure_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 4, 1, 2),
    _OspfAreaErrAuthFailure_Type()
)
ospfAreaErrAuthFailure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaErrAuthFailure.setStatus("current")
_OspfAreaErrNetmaskMismatch_Type = Counter32
_OspfAreaErrNetmaskMismatch_Object = MibTableColumn
ospfAreaErrNetmaskMismatch = _OspfAreaErrNetmaskMismatch_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 4, 1, 3),
    _OspfAreaErrNetmaskMismatch_Type()
)
ospfAreaErrNetmaskMismatch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaErrNetmaskMismatch.setStatus("current")
_OspfAreaErrHelloMismatch_Type = Counter32
_OspfAreaErrHelloMismatch_Object = MibTableColumn
ospfAreaErrHelloMismatch = _OspfAreaErrHelloMismatch_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 4, 1, 4),
    _OspfAreaErrHelloMismatch_Type()
)
ospfAreaErrHelloMismatch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaErrHelloMismatch.setStatus("current")
_OspfAreaErrDeadMismatch_Type = Counter32
_OspfAreaErrDeadMismatch_Object = MibTableColumn
ospfAreaErrDeadMismatch = _OspfAreaErrDeadMismatch_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 4, 1, 5),
    _OspfAreaErrDeadMismatch_Type()
)
ospfAreaErrDeadMismatch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaErrDeadMismatch.setStatus("current")
_OspfAreaErrOptionsMismatch_Type = Counter32
_OspfAreaErrOptionsMismatch_Object = MibTableColumn
ospfAreaErrOptionsMismatch = _OspfAreaErrOptionsMismatch_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 4, 1, 6),
    _OspfAreaErrOptionsMismatch_Type()
)
ospfAreaErrOptionsMismatch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaErrOptionsMismatch.setStatus("current")
_OspfAreaErrUnknownNbr_Type = Counter32
_OspfAreaErrUnknownNbr_Object = MibTableColumn
ospfAreaErrUnknownNbr = _OspfAreaErrUnknownNbr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 4, 1, 7),
    _OspfAreaErrUnknownNbr_Type()
)
ospfAreaErrUnknownNbr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaErrUnknownNbr.setStatus("current")
_OspfAreaErrAreaMismatch_Type = Counter32
_OspfAreaErrAreaMismatch_Object = MibTableColumn
ospfAreaErrAreaMismatch = _OspfAreaErrAreaMismatch_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 4, 1, 8),
    _OspfAreaErrAreaMismatch_Type()
)
ospfAreaErrAreaMismatch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaErrAreaMismatch.setStatus("current")
_OspfAreaErrInvalidSelfOrigLsa_Type = Counter32
_OspfAreaErrInvalidSelfOrigLsa_Object = MibTableColumn
ospfAreaErrInvalidSelfOrigLsa = _OspfAreaErrInvalidSelfOrigLsa_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 2, 4, 1, 9),
    _OspfAreaErrInvalidSelfOrigLsa_Type()
)
ospfAreaErrInvalidSelfOrigLsa.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaErrInvalidSelfOrigLsa.setStatus("current")
_OspfInterface_ObjectIdentity = ObjectIdentity
ospfInterface = _OspfInterface_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3)
)
_OspfIntfRxTxStats_Object = MibTable
ospfIntfRxTxStats = _OspfIntfRxTxStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 1)
)
if mibBuilder.loadTexts:
    ospfIntfRxTxStats.setStatus("current")
_OspfIntfRxTxStatsEntry_Object = MibTableRow
ospfIntfRxTxStatsEntry = _OspfIntfRxTxStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 1, 1)
)
ospfIntfRxTxStatsEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospfIntfRxTxIndex"),
)
if mibBuilder.loadTexts:
    ospfIntfRxTxStatsEntry.setStatus("current")
_OspfIntfRxTxIndex_Type = Integer32
_OspfIntfRxTxIndex_Object = MibTableColumn
ospfIntfRxTxIndex = _OspfIntfRxTxIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 1, 1, 1),
    _OspfIntfRxTxIndex_Type()
)
ospfIntfRxTxIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfRxTxIndex.setStatus("current")
_OspfIntfRxPkts_Type = Counter32
_OspfIntfRxPkts_Object = MibTableColumn
ospfIntfRxPkts = _OspfIntfRxPkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 1, 1, 2),
    _OspfIntfRxPkts_Type()
)
ospfIntfRxPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfRxPkts.setStatus("current")
_OspfIntfTxPkts_Type = Counter32
_OspfIntfTxPkts_Object = MibTableColumn
ospfIntfTxPkts = _OspfIntfTxPkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 1, 1, 3),
    _OspfIntfTxPkts_Type()
)
ospfIntfTxPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfTxPkts.setStatus("current")
_OspfIntfRxHello_Type = Counter32
_OspfIntfRxHello_Object = MibTableColumn
ospfIntfRxHello = _OspfIntfRxHello_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 1, 1, 4),
    _OspfIntfRxHello_Type()
)
ospfIntfRxHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfRxHello.setStatus("current")
_OspfIntfTxHello_Type = Counter32
_OspfIntfTxHello_Object = MibTableColumn
ospfIntfTxHello = _OspfIntfTxHello_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 1, 1, 5),
    _OspfIntfTxHello_Type()
)
ospfIntfTxHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfTxHello.setStatus("current")
_OspfIntfRxDatabase_Type = Counter32
_OspfIntfRxDatabase_Object = MibTableColumn
ospfIntfRxDatabase = _OspfIntfRxDatabase_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 1, 1, 6),
    _OspfIntfRxDatabase_Type()
)
ospfIntfRxDatabase.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfRxDatabase.setStatus("current")
_OspfIntfTxDatabase_Type = Counter32
_OspfIntfTxDatabase_Object = MibTableColumn
ospfIntfTxDatabase = _OspfIntfTxDatabase_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 1, 1, 7),
    _OspfIntfTxDatabase_Type()
)
ospfIntfTxDatabase.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfTxDatabase.setStatus("current")
_OspfIntfRxlsReqs_Type = Counter32
_OspfIntfRxlsReqs_Object = MibTableColumn
ospfIntfRxlsReqs = _OspfIntfRxlsReqs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 1, 1, 8),
    _OspfIntfRxlsReqs_Type()
)
ospfIntfRxlsReqs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfRxlsReqs.setStatus("current")
_OspfIntfTxlsReqs_Type = Counter32
_OspfIntfTxlsReqs_Object = MibTableColumn
ospfIntfTxlsReqs = _OspfIntfTxlsReqs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 1, 1, 9),
    _OspfIntfTxlsReqs_Type()
)
ospfIntfTxlsReqs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfTxlsReqs.setStatus("current")
_OspfIntfRxlsAcks_Type = Counter32
_OspfIntfRxlsAcks_Object = MibTableColumn
ospfIntfRxlsAcks = _OspfIntfRxlsAcks_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 1, 1, 10),
    _OspfIntfRxlsAcks_Type()
)
ospfIntfRxlsAcks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfRxlsAcks.setStatus("current")
_OspfIntfTxlsAcks_Type = Counter32
_OspfIntfTxlsAcks_Object = MibTableColumn
ospfIntfTxlsAcks = _OspfIntfTxlsAcks_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 1, 1, 11),
    _OspfIntfTxlsAcks_Type()
)
ospfIntfTxlsAcks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfTxlsAcks.setStatus("current")
_OspfIntfRxlsUpdates_Type = Counter32
_OspfIntfRxlsUpdates_Object = MibTableColumn
ospfIntfRxlsUpdates = _OspfIntfRxlsUpdates_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 1, 1, 12),
    _OspfIntfRxlsUpdates_Type()
)
ospfIntfRxlsUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfRxlsUpdates.setStatus("current")
_OspfIntfTxlsUpdates_Type = Counter32
_OspfIntfTxlsUpdates_Object = MibTableColumn
ospfIntfTxlsUpdates = _OspfIntfTxlsUpdates_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 1, 1, 13),
    _OspfIntfTxlsUpdates_Type()
)
ospfIntfTxlsUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfTxlsUpdates.setStatus("current")
_OspfIntfNbrChangeStats_Object = MibTable
ospfIntfNbrChangeStats = _OspfIntfNbrChangeStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 2)
)
if mibBuilder.loadTexts:
    ospfIntfNbrChangeStats.setStatus("current")
_OspfIntfNbrChangeStatsEntry_Object = MibTableRow
ospfIntfNbrChangeStatsEntry = _OspfIntfNbrChangeStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 2, 1)
)
ospfIntfNbrChangeStatsEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospfIntfNbrIndex"),
)
if mibBuilder.loadTexts:
    ospfIntfNbrChangeStatsEntry.setStatus("current")
_OspfIntfNbrIndex_Type = Integer32
_OspfIntfNbrIndex_Object = MibTableColumn
ospfIntfNbrIndex = _OspfIntfNbrIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 2, 1, 1),
    _OspfIntfNbrIndex_Type()
)
ospfIntfNbrIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfNbrIndex.setStatus("current")
_OspfIntfNbrhello_Type = Counter32
_OspfIntfNbrhello_Object = MibTableColumn
ospfIntfNbrhello = _OspfIntfNbrhello_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 2, 1, 2),
    _OspfIntfNbrhello_Type()
)
ospfIntfNbrhello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfNbrhello.setStatus("current")
_OspfIntfNbrStart_Type = Counter32
_OspfIntfNbrStart_Object = MibTableColumn
ospfIntfNbrStart = _OspfIntfNbrStart_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 2, 1, 3),
    _OspfIntfNbrStart_Type()
)
ospfIntfNbrStart.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfNbrStart.setStatus("current")
_OspfIntfNbrAdjointOk_Type = Counter32
_OspfIntfNbrAdjointOk_Object = MibTableColumn
ospfIntfNbrAdjointOk = _OspfIntfNbrAdjointOk_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 2, 1, 4),
    _OspfIntfNbrAdjointOk_Type()
)
ospfIntfNbrAdjointOk.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfNbrAdjointOk.setStatus("current")
_OspfIntfNbrNegotiationDone_Type = Counter32
_OspfIntfNbrNegotiationDone_Object = MibTableColumn
ospfIntfNbrNegotiationDone = _OspfIntfNbrNegotiationDone_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 2, 1, 5),
    _OspfIntfNbrNegotiationDone_Type()
)
ospfIntfNbrNegotiationDone.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfNbrNegotiationDone.setStatus("current")
_OspfIntfNbrExchangeDone_Type = Counter32
_OspfIntfNbrExchangeDone_Object = MibTableColumn
ospfIntfNbrExchangeDone = _OspfIntfNbrExchangeDone_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 2, 1, 6),
    _OspfIntfNbrExchangeDone_Type()
)
ospfIntfNbrExchangeDone.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfNbrExchangeDone.setStatus("current")
_OspfIntfNbrBadRequests_Type = Counter32
_OspfIntfNbrBadRequests_Object = MibTableColumn
ospfIntfNbrBadRequests = _OspfIntfNbrBadRequests_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 2, 1, 7),
    _OspfIntfNbrBadRequests_Type()
)
ospfIntfNbrBadRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfNbrBadRequests.setStatus("current")
_OspfIntfNbrBadSequence_Type = Counter32
_OspfIntfNbrBadSequence_Object = MibTableColumn
ospfIntfNbrBadSequence = _OspfIntfNbrBadSequence_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 2, 1, 8),
    _OspfIntfNbrBadSequence_Type()
)
ospfIntfNbrBadSequence.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfNbrBadSequence.setStatus("current")
_OspfIntfNbrLoadingDone_Type = Counter32
_OspfIntfNbrLoadingDone_Object = MibTableColumn
ospfIntfNbrLoadingDone = _OspfIntfNbrLoadingDone_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 2, 1, 9),
    _OspfIntfNbrLoadingDone_Type()
)
ospfIntfNbrLoadingDone.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfNbrLoadingDone.setStatus("current")
_OspfIntfNbrN1way_Type = Counter32
_OspfIntfNbrN1way_Object = MibTableColumn
ospfIntfNbrN1way = _OspfIntfNbrN1way_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 2, 1, 10),
    _OspfIntfNbrN1way_Type()
)
ospfIntfNbrN1way.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfNbrN1way.setStatus("current")
_OspfIntfNbrRstAd_Type = Counter32
_OspfIntfNbrRstAd_Object = MibTableColumn
ospfIntfNbrRstAd = _OspfIntfNbrRstAd_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 2, 1, 11),
    _OspfIntfNbrRstAd_Type()
)
ospfIntfNbrRstAd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfNbrRstAd.setStatus("current")
_OspfIntfNbrDown_Type = Counter32
_OspfIntfNbrDown_Object = MibTableColumn
ospfIntfNbrDown = _OspfIntfNbrDown_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 2, 1, 12),
    _OspfIntfNbrDown_Type()
)
ospfIntfNbrDown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfNbrDown.setStatus("current")
_OspfIntfNbrN2way_Type = Counter32
_OspfIntfNbrN2way_Object = MibTableColumn
ospfIntfNbrN2way = _OspfIntfNbrN2way_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 2, 1, 13),
    _OspfIntfNbrN2way_Type()
)
ospfIntfNbrN2way.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfNbrN2way.setStatus("current")
_OspfIntfChangeStats_Object = MibTable
ospfIntfChangeStats = _OspfIntfChangeStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 3)
)
if mibBuilder.loadTexts:
    ospfIntfChangeStats.setStatus("current")
_OspfIntfChangeStatsEntry_Object = MibTableRow
ospfIntfChangeStatsEntry = _OspfIntfChangeStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 3, 1)
)
ospfIntfChangeStatsEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospfIntfIndex"),
)
if mibBuilder.loadTexts:
    ospfIntfChangeStatsEntry.setStatus("current")
_OspfIntfIndex_Type = Integer32
_OspfIntfIndex_Object = MibTableColumn
ospfIntfIndex = _OspfIntfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 3, 1, 1),
    _OspfIntfIndex_Type()
)
ospfIntfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfIndex.setStatus("current")
_OspfIntfHello_Type = Counter32
_OspfIntfHello_Object = MibTableColumn
ospfIntfHello = _OspfIntfHello_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 3, 1, 2),
    _OspfIntfHello_Type()
)
ospfIntfHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfHello.setStatus("current")
_OspfIntfDown_Type = Counter32
_OspfIntfDown_Object = MibTableColumn
ospfIntfDown = _OspfIntfDown_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 3, 1, 3),
    _OspfIntfDown_Type()
)
ospfIntfDown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfDown.setStatus("current")
_OspfIntfLoop_Type = Counter32
_OspfIntfLoop_Object = MibTableColumn
ospfIntfLoop = _OspfIntfLoop_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 3, 1, 4),
    _OspfIntfLoop_Type()
)
ospfIntfLoop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfLoop.setStatus("current")
_OspfIntfUnloop_Type = Counter32
_OspfIntfUnloop_Object = MibTableColumn
ospfIntfUnloop = _OspfIntfUnloop_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 3, 1, 5),
    _OspfIntfUnloop_Type()
)
ospfIntfUnloop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfUnloop.setStatus("current")
_OspfIntfWaitTimer_Type = Counter32
_OspfIntfWaitTimer_Object = MibTableColumn
ospfIntfWaitTimer = _OspfIntfWaitTimer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 3, 1, 6),
    _OspfIntfWaitTimer_Type()
)
ospfIntfWaitTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfWaitTimer.setStatus("current")
_OspfIntfBackup_Type = Counter32
_OspfIntfBackup_Object = MibTableColumn
ospfIntfBackup = _OspfIntfBackup_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 3, 1, 7),
    _OspfIntfBackup_Type()
)
ospfIntfBackup.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfBackup.setStatus("current")
_OspfIntfNbrChange_Type = Counter32
_OspfIntfNbrChange_Object = MibTableColumn
ospfIntfNbrChange = _OspfIntfNbrChange_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 3, 1, 8),
    _OspfIntfNbrChange_Type()
)
ospfIntfNbrChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfNbrChange.setStatus("current")
_OspfIntfErrorStats_Object = MibTable
ospfIntfErrorStats = _OspfIntfErrorStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 4)
)
if mibBuilder.loadTexts:
    ospfIntfErrorStats.setStatus("current")
_OspfIntfErrorStatsEntry_Object = MibTableRow
ospfIntfErrorStatsEntry = _OspfIntfErrorStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 4, 1)
)
ospfIntfErrorStatsEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospfIntfErrIndex"),
)
if mibBuilder.loadTexts:
    ospfIntfErrorStatsEntry.setStatus("current")
_OspfIntfErrIndex_Type = Integer32
_OspfIntfErrIndex_Object = MibTableColumn
ospfIntfErrIndex = _OspfIntfErrIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 4, 1, 1),
    _OspfIntfErrIndex_Type()
)
ospfIntfErrIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfErrIndex.setStatus("current")
_OspfIntfErrAuthFailure_Type = Counter32
_OspfIntfErrAuthFailure_Object = MibTableColumn
ospfIntfErrAuthFailure = _OspfIntfErrAuthFailure_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 4, 1, 2),
    _OspfIntfErrAuthFailure_Type()
)
ospfIntfErrAuthFailure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfErrAuthFailure.setStatus("current")
_OspfIntfErrNetmaskMismatch_Type = Counter32
_OspfIntfErrNetmaskMismatch_Object = MibTableColumn
ospfIntfErrNetmaskMismatch = _OspfIntfErrNetmaskMismatch_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 4, 1, 3),
    _OspfIntfErrNetmaskMismatch_Type()
)
ospfIntfErrNetmaskMismatch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfErrNetmaskMismatch.setStatus("current")
_OspfIntfErrHelloMismatch_Type = Counter32
_OspfIntfErrHelloMismatch_Object = MibTableColumn
ospfIntfErrHelloMismatch = _OspfIntfErrHelloMismatch_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 4, 1, 4),
    _OspfIntfErrHelloMismatch_Type()
)
ospfIntfErrHelloMismatch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfErrHelloMismatch.setStatus("current")
_OspfIntfErrDeadMismatch_Type = Counter32
_OspfIntfErrDeadMismatch_Object = MibTableColumn
ospfIntfErrDeadMismatch = _OspfIntfErrDeadMismatch_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 4, 1, 5),
    _OspfIntfErrDeadMismatch_Type()
)
ospfIntfErrDeadMismatch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfErrDeadMismatch.setStatus("current")
_OspfIntfErrOptionsMismatch_Type = Counter32
_OspfIntfErrOptionsMismatch_Object = MibTableColumn
ospfIntfErrOptionsMismatch = _OspfIntfErrOptionsMismatch_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 4, 1, 6),
    _OspfIntfErrOptionsMismatch_Type()
)
ospfIntfErrOptionsMismatch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfErrOptionsMismatch.setStatus("current")
_OspfIntfErrUnknownNbr_Type = Counter32
_OspfIntfErrUnknownNbr_Object = MibTableColumn
ospfIntfErrUnknownNbr = _OspfIntfErrUnknownNbr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 4, 1, 7),
    _OspfIntfErrUnknownNbr_Type()
)
ospfIntfErrUnknownNbr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfErrUnknownNbr.setStatus("current")
_OspfIntfErrAreaMismatch_Type = Counter32
_OspfIntfErrAreaMismatch_Object = MibTableColumn
ospfIntfErrAreaMismatch = _OspfIntfErrAreaMismatch_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 4, 1, 8),
    _OspfIntfErrAreaMismatch_Type()
)
ospfIntfErrAreaMismatch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfErrAreaMismatch.setStatus("current")
_OspfIntfErrInvalidSelfOrigLSA_Type = Counter32
_OspfIntfErrInvalidSelfOrigLSA_Object = MibTableColumn
ospfIntfErrInvalidSelfOrigLSA = _OspfIntfErrInvalidSelfOrigLSA_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 6, 3, 4, 1, 9),
    _OspfIntfErrInvalidSelfOrigLSA_Type()
)
ospfIntfErrInvalidSelfOrigLSA.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfErrInvalidSelfOrigLSA.setStatus("current")
_ClearStats_ObjectIdentity = ObjectIdentity
clearStats = _ClearStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 7)
)


class _IpClearStats_Type(Integer32):
    """Custom type ipClearStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_IpClearStats_Type.__name__ = "Integer32"
_IpClearStats_Object = MibScalar
ipClearStats = _IpClearStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 7, 1),
    _IpClearStats_Type()
)
ipClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipClearStats.setStatus("current")


class _VrrpClearStats_Type(Integer32):
    """Custom type vrrpClearStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_VrrpClearStats_Type.__name__ = "Integer32"
_VrrpClearStats_Object = MibScalar
vrrpClearStats = _VrrpClearStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 7, 2),
    _VrrpClearStats_Type()
)
vrrpClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vrrpClearStats.setStatus("current")


class _OspfClearStats_Type(Integer32):
    """Custom type ospfClearStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("ok", 2))
    )


_OspfClearStats_Type.__name__ = "Integer32"
_OspfClearStats_Object = MibScalar
ospfClearStats = _OspfClearStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 7, 4),
    _OspfClearStats_Type()
)
ospfClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfClearStats.setStatus("current")


class _TcpClearStats_Type(Integer32):
    """Custom type tcpClearStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("ok", 2))
    )


_TcpClearStats_Type.__name__ = "Integer32"
_TcpClearStats_Object = MibScalar
tcpClearStats = _TcpClearStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 7, 5),
    _TcpClearStats_Type()
)
tcpClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tcpClearStats.setStatus("current")


class _UdpClearStats_Type(Integer32):
    """Custom type udpClearStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("ok", 2))
    )


_UdpClearStats_Type.__name__ = "Integer32"
_UdpClearStats_Object = MibScalar
udpClearStats = _UdpClearStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 7, 6),
    _UdpClearStats_Type()
)
udpClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    udpClearStats.setStatus("current")


class _DnsClearStats_Type(Integer32):
    """Custom type dnsClearStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("ok", 2))
    )


_DnsClearStats_Type.__name__ = "Integer32"
_DnsClearStats_Object = MibScalar
dnsClearStats = _DnsClearStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 7, 7),
    _DnsClearStats_Type()
)
dnsClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dnsClearStats.setStatus("current")


class _ArpClearStats_Type(Integer32):
    """Custom type arpClearStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("ok", 2))
    )


_ArpClearStats_Type.__name__ = "Integer32"
_ArpClearStats_Object = MibScalar
arpClearStats = _ArpClearStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 7, 8),
    _ArpClearStats_Type()
)
arpClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    arpClearStats.setStatus("current")


class _IcmpClearStats_Type(Integer32):
    """Custom type icmpClearStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("ok", 2))
    )


_IcmpClearStats_Type.__name__ = "Integer32"
_IcmpClearStats_Object = MibScalar
icmpClearStats = _IcmpClearStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 7, 9),
    _IcmpClearStats_Type()
)
icmpClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    icmpClearStats.setStatus("current")


class _RouteClearStats_Type(Integer32):
    """Custom type routeClearStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("ok", 2))
    )


_RouteClearStats_Type.__name__ = "Integer32"
_RouteClearStats_Object = MibScalar
routeClearStats = _RouteClearStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 7, 10),
    _RouteClearStats_Type()
)
routeClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    routeClearStats.setStatus("current")


class _Ipv6ClearStats_Type(Integer32):
    """Custom type ipv6ClearStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("ok", 2))
    )


_Ipv6ClearStats_Type.__name__ = "Integer32"
_Ipv6ClearStats_Object = MibScalar
ipv6ClearStats = _Ipv6ClearStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 7, 13),
    _Ipv6ClearStats_Type()
)
ipv6ClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipv6ClearStats.setStatus("current")


class _Ipv6ClearIcmpStats_Type(Integer32):
    """Custom type ipv6ClearIcmpStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("ok", 2))
    )


_Ipv6ClearIcmpStats_Type.__name__ = "Integer32"
_Ipv6ClearIcmpStats_Object = MibScalar
ipv6ClearIcmpStats = _Ipv6ClearIcmpStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 7, 14),
    _Ipv6ClearIcmpStats_Type()
)
ipv6ClearIcmpStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipv6ClearIcmpStats.setStatus("current")


class _Ipv6ClearUdpStats_Type(Integer32):
    """Custom type ipv6ClearUdpStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("ok", 2))
    )


_Ipv6ClearUdpStats_Type.__name__ = "Integer32"
_Ipv6ClearUdpStats_Object = MibScalar
ipv6ClearUdpStats = _Ipv6ClearUdpStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 7, 15),
    _Ipv6ClearUdpStats_Type()
)
ipv6ClearUdpStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipv6ClearUdpStats.setStatus("current")


class _Ospf3ClearStats_Type(Integer32):
    """Custom type ospf3ClearStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("ok", 2))
    )


_Ospf3ClearStats_Type.__name__ = "Integer32"
_Ospf3ClearStats_Object = MibScalar
ospf3ClearStats = _Ospf3ClearStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 7, 16),
    _Ospf3ClearStats_Type()
)
ospf3ClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospf3ClearStats.setStatus("current")


class _RipClearStats_Type(Integer32):
    """Custom type ripClearStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("ok", 2))
    )


_RipClearStats_Type.__name__ = "Integer32"
_RipClearStats_Object = MibScalar
ripClearStats = _RipClearStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 7, 17),
    _RipClearStats_Type()
)
ripClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripClearStats.setStatus("current")


class _Ipv6NbrClearStats_Type(Integer32):
    """Custom type ipv6NbrClearStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("ok", 2))
    )


_Ipv6NbrClearStats_Type.__name__ = "Integer32"
_Ipv6NbrClearStats_Object = MibScalar
ipv6NbrClearStats = _Ipv6NbrClearStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 7, 18),
    _Ipv6NbrClearStats_Type()
)
ipv6NbrClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipv6NbrClearStats.setStatus("current")
_IgmpStats_ObjectIdentity = ObjectIdentity
igmpStats = _IgmpStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 9)
)
_IgmpSnoopStats_Object = MibTable
igmpSnoopStats = _IgmpSnoopStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 9, 1)
)
if mibBuilder.loadTexts:
    igmpSnoopStats.setStatus("current")
_IgmpSnoopStatsEntry_Object = MibTableRow
igmpSnoopStatsEntry = _IgmpSnoopStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 9, 1, 1)
)
igmpSnoopStatsEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "igmpSnoopVlanIndex"),
)
if mibBuilder.loadTexts:
    igmpSnoopStatsEntry.setStatus("current")
_IgmpSnoopVlanIndex_Type = Integer32
_IgmpSnoopVlanIndex_Object = MibTableColumn
igmpSnoopVlanIndex = _IgmpSnoopVlanIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 9, 1, 1, 1),
    _IgmpSnoopVlanIndex_Type()
)
igmpSnoopVlanIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpSnoopVlanIndex.setStatus("current")
_RxIgmpValidPkts_Type = Counter32
_RxIgmpValidPkts_Object = MibTableColumn
rxIgmpValidPkts = _RxIgmpValidPkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 9, 1, 1, 2),
    _RxIgmpValidPkts_Type()
)
rxIgmpValidPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxIgmpValidPkts.setStatus("current")
_RxIgmpInvalidPkts_Type = Counter32
_RxIgmpInvalidPkts_Object = MibTableColumn
rxIgmpInvalidPkts = _RxIgmpInvalidPkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 9, 1, 1, 3),
    _RxIgmpInvalidPkts_Type()
)
rxIgmpInvalidPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxIgmpInvalidPkts.setStatus("current")
_RxIgmpGenQueries_Type = Counter32
_RxIgmpGenQueries_Object = MibTableColumn
rxIgmpGenQueries = _RxIgmpGenQueries_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 9, 1, 1, 4),
    _RxIgmpGenQueries_Type()
)
rxIgmpGenQueries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxIgmpGenQueries.setStatus("current")
_RxIgmpGrpSpecificQueries_Type = Counter32
_RxIgmpGrpSpecificQueries_Object = MibTableColumn
rxIgmpGrpSpecificQueries = _RxIgmpGrpSpecificQueries_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 9, 1, 1, 5),
    _RxIgmpGrpSpecificQueries_Type()
)
rxIgmpGrpSpecificQueries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxIgmpGrpSpecificQueries.setStatus("current")
_RxIgmpLeaves_Type = Counter32
_RxIgmpLeaves_Object = MibTableColumn
rxIgmpLeaves = _RxIgmpLeaves_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 9, 1, 1, 6),
    _RxIgmpLeaves_Type()
)
rxIgmpLeaves.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxIgmpLeaves.setStatus("current")
_RxIgmpReports_Type = Counter32
_RxIgmpReports_Object = MibTableColumn
rxIgmpReports = _RxIgmpReports_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 9, 1, 1, 7),
    _RxIgmpReports_Type()
)
rxIgmpReports.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxIgmpReports.setStatus("current")
_TxIgmpGrpSpecificQueries_Type = Counter32
_TxIgmpGrpSpecificQueries_Object = MibTableColumn
txIgmpGrpSpecificQueries = _TxIgmpGrpSpecificQueries_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 9, 1, 1, 8),
    _TxIgmpGrpSpecificQueries_Type()
)
txIgmpGrpSpecificQueries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    txIgmpGrpSpecificQueries.setStatus("current")
_TxIgmpReports_Type = Counter32
_TxIgmpReports_Object = MibTableColumn
txIgmpReports = _TxIgmpReports_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 9, 1, 1, 9),
    _TxIgmpReports_Type()
)
txIgmpReports.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    txIgmpReports.setStatus("current")
_TxIgmpLeaves_Type = Counter32
_TxIgmpLeaves_Object = MibTableColumn
txIgmpLeaves = _TxIgmpLeaves_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 9, 1, 1, 10),
    _TxIgmpLeaves_Type()
)
txIgmpLeaves.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    txIgmpLeaves.setStatus("current")
_RxIgmpGroupSourceSpecificQueries_Type = Counter32
_RxIgmpGroupSourceSpecificQueries_Object = MibTableColumn
rxIgmpGroupSourceSpecificQueries = _RxIgmpGroupSourceSpecificQueries_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 9, 1, 1, 11),
    _RxIgmpGroupSourceSpecificQueries_Type()
)
rxIgmpGroupSourceSpecificQueries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxIgmpGroupSourceSpecificQueries.setStatus("current")
_RxIgmpV3CurrentStateRecords_Type = Counter32
_RxIgmpV3CurrentStateRecords_Object = MibTableColumn
rxIgmpV3CurrentStateRecords = _RxIgmpV3CurrentStateRecords_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 9, 1, 1, 12),
    _RxIgmpV3CurrentStateRecords_Type()
)
rxIgmpV3CurrentStateRecords.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxIgmpV3CurrentStateRecords.setStatus("current")
_RxIgmpV3SourceListChangeRecords_Type = Counter32
_RxIgmpV3SourceListChangeRecords_Object = MibTableColumn
rxIgmpV3SourceListChangeRecords = _RxIgmpV3SourceListChangeRecords_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 9, 1, 1, 13),
    _RxIgmpV3SourceListChangeRecords_Type()
)
rxIgmpV3SourceListChangeRecords.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxIgmpV3SourceListChangeRecords.setStatus("current")
_RxIgmpV3FilterChangeRecords_Type = Counter32
_RxIgmpV3FilterChangeRecords_Object = MibTableColumn
rxIgmpV3FilterChangeRecords = _RxIgmpV3FilterChangeRecords_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 9, 1, 1, 14),
    _RxIgmpV3FilterChangeRecords_Type()
)
rxIgmpV3FilterChangeRecords.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxIgmpV3FilterChangeRecords.setStatus("current")
_TxIgmpGenQueries_Type = Counter32
_TxIgmpGenQueries_Object = MibTableColumn
txIgmpGenQueries = _TxIgmpGenQueries_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 9, 1, 1, 16),
    _TxIgmpGenQueries_Type()
)
txIgmpGenQueries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    txIgmpGenQueries.setStatus("current")
_RxIgmpDiscardPkts_Type = Counter32
_RxIgmpDiscardPkts_Object = MibTableColumn
rxIgmpDiscardPkts = _RxIgmpDiscardPkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 9, 1, 1, 17),
    _RxIgmpDiscardPkts_Type()
)
rxIgmpDiscardPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxIgmpDiscardPkts.setStatus("current")
_RxIgmpPimHellos_Type = Counter32
_RxIgmpPimHellos_Object = MibTableColumn
rxIgmpPimHellos = _RxIgmpPimHellos_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 9, 1, 1, 18),
    _RxIgmpPimHellos_Type()
)
rxIgmpPimHellos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxIgmpPimHellos.setStatus("current")


class _IgmpClearVlanStats_Type(Integer32):
    """Custom type igmpClearVlanStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("ok", 2))
    )


_IgmpClearVlanStats_Type.__name__ = "Integer32"
_IgmpClearVlanStats_Object = MibTableColumn
igmpClearVlanStats = _IgmpClearVlanStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 9, 1, 1, 19),
    _IgmpClearVlanStats_Type()
)
igmpClearVlanStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpClearVlanStats.setStatus("current")


class _IgmpClearAllStats_Type(Integer32):
    """Custom type igmpClearAllStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("ok", 2))
    )


_IgmpClearAllStats_Type.__name__ = "Integer32"
_IgmpClearAllStats_Object = MibScalar
igmpClearAllStats = _IgmpClearAllStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 9, 2),
    _IgmpClearAllStats_Type()
)
igmpClearAllStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpClearAllStats.setStatus("current")
_IgmpStatsTotalIgmpGroups_Type = Counter32
_IgmpStatsTotalIgmpGroups_Object = MibScalar
igmpStatsTotalIgmpGroups = _IgmpStatsTotalIgmpGroups_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 9, 3),
    _IgmpStatsTotalIgmpGroups_Type()
)
igmpStatsTotalIgmpGroups.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpStatsTotalIgmpGroups.setStatus("current")
_IgmpStatsTotalIpmcGroups_Type = Counter32
_IgmpStatsTotalIpmcGroups_Object = MibScalar
igmpStatsTotalIpmcGroups = _IgmpStatsTotalIpmcGroups_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 9, 4),
    _IgmpStatsTotalIpmcGroups_Type()
)
igmpStatsTotalIpmcGroups.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpStatsTotalIpmcGroups.setStatus("current")
_Ipv6Stats_ObjectIdentity = ObjectIdentity
ipv6Stats = _Ipv6Stats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10)
)
_Ipv6InReceives_Type = Counter32
_Ipv6InReceives_Object = MibScalar
ipv6InReceives = _Ipv6InReceives_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 1),
    _Ipv6InReceives_Type()
)
ipv6InReceives.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6InReceives.setStatus("current")
_Ipv6InMcasts_Type = Counter32
_Ipv6InMcasts_Object = MibScalar
ipv6InMcasts = _Ipv6InMcasts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 2),
    _Ipv6InMcasts_Type()
)
ipv6InMcasts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6InMcasts.setStatus("current")
_Ipv6InDelivers_Type = Counter32
_Ipv6InDelivers_Object = MibScalar
ipv6InDelivers = _Ipv6InDelivers_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 3),
    _Ipv6InDelivers_Type()
)
ipv6InDelivers.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6InDelivers.setStatus("current")
_Ipv6InDiscards_Type = Counter32
_Ipv6InDiscards_Object = MibScalar
ipv6InDiscards = _Ipv6InDiscards_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 4),
    _Ipv6InDiscards_Type()
)
ipv6InDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6InDiscards.setStatus("current")
_Ipv6InHdrerrs_Type = Counter32
_Ipv6InHdrerrs_Object = MibScalar
ipv6InHdrerrs = _Ipv6InHdrerrs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 5),
    _Ipv6InHdrerrs_Type()
)
ipv6InHdrerrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6InHdrerrs.setStatus("current")
_Ipv6InAddrerrs_Type = Counter32
_Ipv6InAddrerrs_Object = MibScalar
ipv6InAddrerrs = _Ipv6InAddrerrs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 6),
    _Ipv6InAddrerrs_Type()
)
ipv6InAddrerrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6InAddrerrs.setStatus("current")
_Ipv6InUnkprots_Type = Counter32
_Ipv6InUnkprots_Object = MibScalar
ipv6InUnkprots = _Ipv6InUnkprots_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 7),
    _Ipv6InUnkprots_Type()
)
ipv6InUnkprots.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6InUnkprots.setStatus("current")
_Ipv6InTruncs_Type = Counter32
_Ipv6InTruncs_Object = MibScalar
ipv6InTruncs = _Ipv6InTruncs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 8),
    _Ipv6InTruncs_Type()
)
ipv6InTruncs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6InTruncs.setStatus("current")
_Ipv6OutMcasts_Type = Counter32
_Ipv6OutMcasts_Object = MibScalar
ipv6OutMcasts = _Ipv6OutMcasts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 10),
    _Ipv6OutMcasts_Type()
)
ipv6OutMcasts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6OutMcasts.setStatus("current")
_Ipv6ForwDgrams_Type = Counter32
_Ipv6ForwDgrams_Object = MibScalar
ipv6ForwDgrams = _Ipv6ForwDgrams_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 11),
    _Ipv6ForwDgrams_Type()
)
ipv6ForwDgrams.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6ForwDgrams.setStatus("current")
_Ipv6TooBigerrs_Type = Counter32
_Ipv6TooBigerrs_Object = MibScalar
ipv6TooBigerrs = _Ipv6TooBigerrs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 12),
    _Ipv6TooBigerrs_Type()
)
ipv6TooBigerrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6TooBigerrs.setStatus("current")
_Ipv6OutReqs_Type = Counter32
_Ipv6OutReqs_Object = MibScalar
ipv6OutReqs = _Ipv6OutReqs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 13),
    _Ipv6OutReqs_Type()
)
ipv6OutReqs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6OutReqs.setStatus("current")
_Ipv6OutDiscards_Type = Counter32
_Ipv6OutDiscards_Object = MibScalar
ipv6OutDiscards = _Ipv6OutDiscards_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 14),
    _Ipv6OutDiscards_Type()
)
ipv6OutDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6OutDiscards.setStatus("current")
_Ipv6OutNorts_Type = Counter32
_Ipv6OutNorts_Object = MibScalar
ipv6OutNorts = _Ipv6OutNorts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 15),
    _Ipv6OutNorts_Type()
)
ipv6OutNorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6OutNorts.setStatus("current")
_Ipv6Reasmreqs_Type = Counter32
_Ipv6Reasmreqs_Object = MibScalar
ipv6Reasmreqs = _Ipv6Reasmreqs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 16),
    _Ipv6Reasmreqs_Type()
)
ipv6Reasmreqs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6Reasmreqs.setStatus("current")
_Ipv6Reasmoks_Type = Counter32
_Ipv6Reasmoks_Object = MibScalar
ipv6Reasmoks = _Ipv6Reasmoks_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 17),
    _Ipv6Reasmoks_Type()
)
ipv6Reasmoks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6Reasmoks.setStatus("current")
_Ipv6Reasmfails_Type = Counter32
_Ipv6Reasmfails_Object = MibScalar
ipv6Reasmfails = _Ipv6Reasmfails_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 18),
    _Ipv6Reasmfails_Type()
)
ipv6Reasmfails.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6Reasmfails.setStatus("current")
_Ipv6Fragoks_Type = Counter32
_Ipv6Fragoks_Object = MibScalar
ipv6Fragoks = _Ipv6Fragoks_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 19),
    _Ipv6Fragoks_Type()
)
ipv6Fragoks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6Fragoks.setStatus("current")
_Ipv6Fragfails_Type = Counter32
_Ipv6Fragfails_Object = MibScalar
ipv6Fragfails = _Ipv6Fragfails_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 20),
    _Ipv6Fragfails_Type()
)
ipv6Fragfails.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6Fragfails.setStatus("current")
_Ipv6Fragcreates_Type = Counter32
_Ipv6Fragcreates_Object = MibScalar
ipv6Fragcreates = _Ipv6Fragcreates_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 21),
    _Ipv6Fragcreates_Type()
)
ipv6Fragcreates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6Fragcreates.setStatus("current")
_Ipv6InNsols_Type = Counter32
_Ipv6InNsols_Object = MibScalar
ipv6InNsols = _Ipv6InNsols_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 22),
    _Ipv6InNsols_Type()
)
ipv6InNsols.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6InNsols.setStatus("current")
_Ipv6InNadvs_Type = Counter32
_Ipv6InNadvs_Object = MibScalar
ipv6InNadvs = _Ipv6InNadvs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 23),
    _Ipv6InNadvs_Type()
)
ipv6InNadvs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6InNadvs.setStatus("current")
_Ipv6InRoutsols_Type = Counter32
_Ipv6InRoutsols_Object = MibScalar
ipv6InRoutsols = _Ipv6InRoutsols_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 25),
    _Ipv6InRoutsols_Type()
)
ipv6InRoutsols.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6InRoutsols.setStatus("current")
_Ipv6InRoutadvs_Type = Counter32
_Ipv6InRoutadvs_Object = MibScalar
ipv6InRoutadvs = _Ipv6InRoutadvs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 26),
    _Ipv6InRoutadvs_Type()
)
ipv6InRoutadvs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6InRoutadvs.setStatus("current")
_Ipv6InRoutRedirs_Type = Counter32
_Ipv6InRoutRedirs_Object = MibScalar
ipv6InRoutRedirs = _Ipv6InRoutRedirs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 27),
    _Ipv6InRoutRedirs_Type()
)
ipv6InRoutRedirs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6InRoutRedirs.setStatus("current")
_Ipv6OutNsols_Type = Counter32
_Ipv6OutNsols_Object = MibScalar
ipv6OutNsols = _Ipv6OutNsols_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 28),
    _Ipv6OutNsols_Type()
)
ipv6OutNsols.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6OutNsols.setStatus("current")
_Ipv6OutNadvs_Type = Counter32
_Ipv6OutNadvs_Object = MibScalar
ipv6OutNadvs = _Ipv6OutNadvs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 29),
    _Ipv6OutNadvs_Type()
)
ipv6OutNadvs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6OutNadvs.setStatus("current")
_Ipv6OutRoutadvs_Type = Counter32
_Ipv6OutRoutadvs_Object = MibScalar
ipv6OutRoutadvs = _Ipv6OutRoutadvs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 30),
    _Ipv6OutRoutadvs_Type()
)
ipv6OutRoutadvs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6OutRoutadvs.setStatus("current")
_Ipv6OutRedirs_Type = Counter32
_Ipv6OutRedirs_Object = MibScalar
ipv6OutRedirs = _Ipv6OutRedirs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 31),
    _Ipv6OutRedirs_Type()
)
ipv6OutRedirs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6OutRedirs.setStatus("current")
_Ipv6OutRoutSols_Type = Counter32
_Ipv6OutRoutSols_Object = MibScalar
ipv6OutRoutSols = _Ipv6OutRoutSols_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 32),
    _Ipv6OutRoutSols_Type()
)
ipv6OutRoutSols.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6OutRoutSols.setStatus("current")
_Ipv6icmpInMsgs_Type = Counter32
_Ipv6icmpInMsgs_Object = MibScalar
ipv6icmpInMsgs = _Ipv6icmpInMsgs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 39),
    _Ipv6icmpInMsgs_Type()
)
ipv6icmpInMsgs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6icmpInMsgs.setStatus("current")
_Ipv6icmpInErrs_Type = Counter32
_Ipv6icmpInErrs_Object = MibScalar
ipv6icmpInErrs = _Ipv6icmpInErrs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 40),
    _Ipv6icmpInErrs_Type()
)
ipv6icmpInErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6icmpInErrs.setStatus("current")
_Ipv6icmpInBadcode_Type = Counter32
_Ipv6icmpInBadcode_Object = MibScalar
ipv6icmpInBadcode = _Ipv6icmpInBadcode_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 41),
    _Ipv6icmpInBadcode_Type()
)
ipv6icmpInBadcode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6icmpInBadcode.setStatus("current")
_Ipv6icmpInToobig_Type = Counter32
_Ipv6icmpInToobig_Object = MibScalar
ipv6icmpInToobig = _Ipv6icmpInToobig_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 42),
    _Ipv6icmpInToobig_Type()
)
ipv6icmpInToobig.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6icmpInToobig.setStatus("current")
_Ipv6icmpInDstUnreach_Type = Counter32
_Ipv6icmpInDstUnreach_Object = MibScalar
ipv6icmpInDstUnreach = _Ipv6icmpInDstUnreach_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 43),
    _Ipv6icmpInDstUnreach_Type()
)
ipv6icmpInDstUnreach.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6icmpInDstUnreach.setStatus("current")
_Ipv6icmpInTmexceeded_Type = Counter32
_Ipv6icmpInTmexceeded_Object = MibScalar
ipv6icmpInTmexceeded = _Ipv6icmpInTmexceeded_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 44),
    _Ipv6icmpInTmexceeded_Type()
)
ipv6icmpInTmexceeded.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6icmpInTmexceeded.setStatus("current")
_Ipv6icmpInParamprob_Type = Counter32
_Ipv6icmpInParamprob_Object = MibScalar
ipv6icmpInParamprob = _Ipv6icmpInParamprob_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 45),
    _Ipv6icmpInParamprob_Type()
)
ipv6icmpInParamprob.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6icmpInParamprob.setStatus("current")
_Ipv6icmpInEchoReq_Type = Counter32
_Ipv6icmpInEchoReq_Object = MibScalar
ipv6icmpInEchoReq = _Ipv6icmpInEchoReq_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 46),
    _Ipv6icmpInEchoReq_Type()
)
ipv6icmpInEchoReq.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6icmpInEchoReq.setStatus("current")
_Ipv6icmpInEchoResp_Type = Counter32
_Ipv6icmpInEchoResp_Object = MibScalar
ipv6icmpInEchoResp = _Ipv6icmpInEchoResp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 47),
    _Ipv6icmpInEchoResp_Type()
)
ipv6icmpInEchoResp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6icmpInEchoResp.setStatus("current")
_Ipv6icmpOutMsgs_Type = Counter32
_Ipv6icmpOutMsgs_Object = MibScalar
ipv6icmpOutMsgs = _Ipv6icmpOutMsgs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 48),
    _Ipv6icmpOutMsgs_Type()
)
ipv6icmpOutMsgs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6icmpOutMsgs.setStatus("current")
_Ipv6icmpOutErrs_Type = Counter32
_Ipv6icmpOutErrs_Object = MibScalar
ipv6icmpOutErrs = _Ipv6icmpOutErrs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 49),
    _Ipv6icmpOutErrs_Type()
)
ipv6icmpOutErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6icmpOutErrs.setStatus("current")
_Ipv6icmpOutDstUnreach_Type = Counter32
_Ipv6icmpOutDstUnreach_Object = MibScalar
ipv6icmpOutDstUnreach = _Ipv6icmpOutDstUnreach_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 50),
    _Ipv6icmpOutDstUnreach_Type()
)
ipv6icmpOutDstUnreach.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6icmpOutDstUnreach.setStatus("current")
_Ipv6icmpOutToobig_Type = Counter32
_Ipv6icmpOutToobig_Object = MibScalar
ipv6icmpOutToobig = _Ipv6icmpOutToobig_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 51),
    _Ipv6icmpOutToobig_Type()
)
ipv6icmpOutToobig.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6icmpOutToobig.setStatus("current")
_Ipv6icmpOutTmexceeded_Type = Counter32
_Ipv6icmpOutTmexceeded_Object = MibScalar
ipv6icmpOutTmexceeded = _Ipv6icmpOutTmexceeded_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 52),
    _Ipv6icmpOutTmexceeded_Type()
)
ipv6icmpOutTmexceeded.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6icmpOutTmexceeded.setStatus("current")
_Ipv6icmpOutParamprob_Type = Counter32
_Ipv6icmpOutParamprob_Object = MibScalar
ipv6icmpOutParamprob = _Ipv6icmpOutParamprob_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 53),
    _Ipv6icmpOutParamprob_Type()
)
ipv6icmpOutParamprob.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6icmpOutParamprob.setStatus("current")
_Ipv6icmpOutEchoReq_Type = Counter32
_Ipv6icmpOutEchoReq_Object = MibScalar
ipv6icmpOutEchoReq = _Ipv6icmpOutEchoReq_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 54),
    _Ipv6icmpOutEchoReq_Type()
)
ipv6icmpOutEchoReq.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6icmpOutEchoReq.setStatus("current")
_Ipv6icmpOutEchoResp_Type = Counter32
_Ipv6icmpOutEchoResp_Object = MibScalar
ipv6icmpOutEchoResp = _Ipv6icmpOutEchoResp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 55),
    _Ipv6icmpOutEchoResp_Type()
)
ipv6icmpOutEchoResp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6icmpOutEchoResp.setStatus("current")
_Ipv6icmpInRouterSol_Type = Counter32
_Ipv6icmpInRouterSol_Object = MibScalar
ipv6icmpInRouterSol = _Ipv6icmpInRouterSol_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 56),
    _Ipv6icmpInRouterSol_Type()
)
ipv6icmpInRouterSol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6icmpInRouterSol.setStatus("current")
_Ipv6icmpInRouterAdv_Type = Counter32
_Ipv6icmpInRouterAdv_Object = MibScalar
ipv6icmpInRouterAdv = _Ipv6icmpInRouterAdv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 57),
    _Ipv6icmpInRouterAdv_Type()
)
ipv6icmpInRouterAdv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6icmpInRouterAdv.setStatus("current")
_Ipv6icmpInNeighSol_Type = Counter32
_Ipv6icmpInNeighSol_Object = MibScalar
ipv6icmpInNeighSol = _Ipv6icmpInNeighSol_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 58),
    _Ipv6icmpInNeighSol_Type()
)
ipv6icmpInNeighSol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6icmpInNeighSol.setStatus("current")
_Ipv6icmpInNeighAdv_Type = Counter32
_Ipv6icmpInNeighAdv_Object = MibScalar
ipv6icmpInNeighAdv = _Ipv6icmpInNeighAdv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 59),
    _Ipv6icmpInNeighAdv_Type()
)
ipv6icmpInNeighAdv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6icmpInNeighAdv.setStatus("current")
_Ipv6icmpInRedir_Type = Counter32
_Ipv6icmpInRedir_Object = MibScalar
ipv6icmpInRedir = _Ipv6icmpInRedir_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 60),
    _Ipv6icmpInRedir_Type()
)
ipv6icmpInRedir.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6icmpInRedir.setStatus("current")
_Ipv6icmpOutRouterSol_Type = Counter32
_Ipv6icmpOutRouterSol_Object = MibScalar
ipv6icmpOutRouterSol = _Ipv6icmpOutRouterSol_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 61),
    _Ipv6icmpOutRouterSol_Type()
)
ipv6icmpOutRouterSol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6icmpOutRouterSol.setStatus("current")
_Ipv6icmpOutRouterAdv_Type = Counter32
_Ipv6icmpOutRouterAdv_Object = MibScalar
ipv6icmpOutRouterAdv = _Ipv6icmpOutRouterAdv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 62),
    _Ipv6icmpOutRouterAdv_Type()
)
ipv6icmpOutRouterAdv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6icmpOutRouterAdv.setStatus("current")
_Ipv6icmpOutNeighSol_Type = Counter32
_Ipv6icmpOutNeighSol_Object = MibScalar
ipv6icmpOutNeighSol = _Ipv6icmpOutNeighSol_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 63),
    _Ipv6icmpOutNeighSol_Type()
)
ipv6icmpOutNeighSol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6icmpOutNeighSol.setStatus("current")
_Ipv6icmpOutNeighAdv_Type = Counter32
_Ipv6icmpOutNeighAdv_Object = MibScalar
ipv6icmpOutNeighAdv = _Ipv6icmpOutNeighAdv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 64),
    _Ipv6icmpOutNeighAdv_Type()
)
ipv6icmpOutNeighAdv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6icmpOutNeighAdv.setStatus("current")
_Ipv6icmpOutRedir_Type = Counter32
_Ipv6icmpOutRedir_Object = MibScalar
ipv6icmpOutRedir = _Ipv6icmpOutRedir_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 65),
    _Ipv6icmpOutRedir_Type()
)
ipv6icmpOutRedir.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6icmpOutRedir.setStatus("current")
_Ipv6udpInDgrams_Type = Counter32
_Ipv6udpInDgrams_Object = MibScalar
ipv6udpInDgrams = _Ipv6udpInDgrams_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 66),
    _Ipv6udpInDgrams_Type()
)
ipv6udpInDgrams.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6udpInDgrams.setStatus("current")
_Ipv6udpInErrs_Type = Counter32
_Ipv6udpInErrs_Object = MibScalar
ipv6udpInErrs = _Ipv6udpInErrs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 67),
    _Ipv6udpInErrs_Type()
)
ipv6udpInErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6udpInErrs.setStatus("current")
_Ipv6udpOutDgrams_Type = Counter32
_Ipv6udpOutDgrams_Object = MibScalar
ipv6udpOutDgrams = _Ipv6udpOutDgrams_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 68),
    _Ipv6udpOutDgrams_Type()
)
ipv6udpOutDgrams.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6udpOutDgrams.setStatus("current")
_Ipv6udpNumPorts_Type = Counter32
_Ipv6udpNumPorts_Object = MibScalar
ipv6udpNumPorts = _Ipv6udpNumPorts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 69),
    _Ipv6udpNumPorts_Type()
)
ipv6udpNumPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6udpNumPorts.setStatus("current")
_Ipv6icmpInAdminProhib_Type = Counter32
_Ipv6icmpInAdminProhib_Object = MibScalar
ipv6icmpInAdminProhib = _Ipv6icmpInAdminProhib_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 70),
    _Ipv6icmpInAdminProhib_Type()
)
ipv6icmpInAdminProhib.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6icmpInAdminProhib.setStatus("current")
_Ipv6icmpOutAdminProhib_Type = Counter32
_Ipv6icmpOutAdminProhib_Object = MibScalar
ipv6icmpOutAdminProhib = _Ipv6icmpOutAdminProhib_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 10, 71),
    _Ipv6icmpOutAdminProhib_Type()
)
ipv6icmpOutAdminProhib.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6icmpOutAdminProhib.setStatus("current")
_Rip2Stats_ObjectIdentity = ObjectIdentity
rip2Stats = _Rip2Stats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 13)
)
_RipStatInPackets_Type = Counter32
_RipStatInPackets_Object = MibScalar
ripStatInPackets = _RipStatInPackets_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 13, 1),
    _RipStatInPackets_Type()
)
ripStatInPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripStatInPackets.setStatus("current")
_RipStatOutPackets_Type = Counter32
_RipStatOutPackets_Object = MibScalar
ripStatOutPackets = _RipStatOutPackets_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 13, 2),
    _RipStatOutPackets_Type()
)
ripStatOutPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripStatOutPackets.setStatus("current")
_RipStatInRequestPkts_Type = Counter32
_RipStatInRequestPkts_Object = MibScalar
ripStatInRequestPkts = _RipStatInRequestPkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 13, 3),
    _RipStatInRequestPkts_Type()
)
ripStatInRequestPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripStatInRequestPkts.setStatus("current")
_RipStatInResponsePkts_Type = Counter32
_RipStatInResponsePkts_Object = MibScalar
ripStatInResponsePkts = _RipStatInResponsePkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 13, 4),
    _RipStatInResponsePkts_Type()
)
ripStatInResponsePkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripStatInResponsePkts.setStatus("current")
_RipStatOutRequestPkts_Type = Counter32
_RipStatOutRequestPkts_Object = MibScalar
ripStatOutRequestPkts = _RipStatOutRequestPkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 13, 5),
    _RipStatOutRequestPkts_Type()
)
ripStatOutRequestPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripStatOutRequestPkts.setStatus("current")
_RipStatOutResponsePkts_Type = Counter32
_RipStatOutResponsePkts_Object = MibScalar
ripStatOutResponsePkts = _RipStatOutResponsePkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 13, 6),
    _RipStatOutResponsePkts_Type()
)
ripStatOutResponsePkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripStatOutResponsePkts.setStatus("current")
_RipStatRouteTimeout_Type = Counter32
_RipStatRouteTimeout_Object = MibScalar
ripStatRouteTimeout = _RipStatRouteTimeout_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 13, 7),
    _RipStatRouteTimeout_Type()
)
ripStatRouteTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripStatRouteTimeout.setStatus("current")
_RipStatInBadSizePkts_Type = Counter32
_RipStatInBadSizePkts_Object = MibScalar
ripStatInBadSizePkts = _RipStatInBadSizePkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 13, 8),
    _RipStatInBadSizePkts_Type()
)
ripStatInBadSizePkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripStatInBadSizePkts.setStatus("current")
_RipStatInBadVersion_Type = Counter32
_RipStatInBadVersion_Object = MibScalar
ripStatInBadVersion = _RipStatInBadVersion_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 13, 9),
    _RipStatInBadVersion_Type()
)
ripStatInBadVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripStatInBadVersion.setStatus("current")
_RipStatInBadZeros_Type = Counter32
_RipStatInBadZeros_Object = MibScalar
ripStatInBadZeros = _RipStatInBadZeros_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 13, 10),
    _RipStatInBadZeros_Type()
)
ripStatInBadZeros.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripStatInBadZeros.setStatus("current")
_RipStatInBadSourcePort_Type = Counter32
_RipStatInBadSourcePort_Object = MibScalar
ripStatInBadSourcePort = _RipStatInBadSourcePort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 13, 11),
    _RipStatInBadSourcePort_Type()
)
ripStatInBadSourcePort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripStatInBadSourcePort.setStatus("current")
_RipStatInBadSourceIP_Type = Counter32
_RipStatInBadSourceIP_Object = MibScalar
ripStatInBadSourceIP = _RipStatInBadSourceIP_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 13, 12),
    _RipStatInBadSourceIP_Type()
)
ripStatInBadSourceIP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripStatInBadSourceIP.setStatus("current")
_RipStatInSelfRcvPkts_Type = Counter32
_RipStatInSelfRcvPkts_Object = MibScalar
ripStatInSelfRcvPkts = _RipStatInSelfRcvPkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 13, 13),
    _RipStatInSelfRcvPkts_Type()
)
ripStatInSelfRcvPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripStatInSelfRcvPkts.setStatus("current")
_IpStats_ObjectIdentity = ObjectIdentity
ipStats = _IpStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 16)
)
_IpStatsInReceives_Type = Counter32
_IpStatsInReceives_Object = MibScalar
ipStatsInReceives = _IpStatsInReceives_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 16, 1),
    _IpStatsInReceives_Type()
)
ipStatsInReceives.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipStatsInReceives.setStatus("current")
_IpStatsInHdrErrors_Type = Counter32
_IpStatsInHdrErrors_Object = MibScalar
ipStatsInHdrErrors = _IpStatsInHdrErrors_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 16, 2),
    _IpStatsInHdrErrors_Type()
)
ipStatsInHdrErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipStatsInHdrErrors.setStatus("current")
_IpStatsInAddrErrors_Type = Counter32
_IpStatsInAddrErrors_Object = MibScalar
ipStatsInAddrErrors = _IpStatsInAddrErrors_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 16, 3),
    _IpStatsInAddrErrors_Type()
)
ipStatsInAddrErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipStatsInAddrErrors.setStatus("current")
_IpStatsInUnknownProtos_Type = Counter32
_IpStatsInUnknownProtos_Object = MibScalar
ipStatsInUnknownProtos = _IpStatsInUnknownProtos_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 16, 5),
    _IpStatsInUnknownProtos_Type()
)
ipStatsInUnknownProtos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipStatsInUnknownProtos.setStatus("current")
_IpStatsInDiscards_Type = Counter32
_IpStatsInDiscards_Object = MibScalar
ipStatsInDiscards = _IpStatsInDiscards_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 16, 6),
    _IpStatsInDiscards_Type()
)
ipStatsInDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipStatsInDiscards.setStatus("current")
_IpStatsInDelivers_Type = Counter32
_IpStatsInDelivers_Object = MibScalar
ipStatsInDelivers = _IpStatsInDelivers_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 16, 7),
    _IpStatsInDelivers_Type()
)
ipStatsInDelivers.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipStatsInDelivers.setStatus("current")
_IpStatsOutRequests_Type = Counter32
_IpStatsOutRequests_Object = MibScalar
ipStatsOutRequests = _IpStatsOutRequests_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 16, 8),
    _IpStatsOutRequests_Type()
)
ipStatsOutRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipStatsOutRequests.setStatus("current")
_IpStatsOutDiscards_Type = Counter32
_IpStatsOutDiscards_Object = MibScalar
ipStatsOutDiscards = _IpStatsOutDiscards_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 16, 9),
    _IpStatsOutDiscards_Type()
)
ipStatsOutDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipStatsOutDiscards.setStatus("current")
_IpStatsDefaultTTL_Type = Counter32
_IpStatsDefaultTTL_Object = MibScalar
ipStatsDefaultTTL = _IpStatsDefaultTTL_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 16, 19),
    _IpStatsDefaultTTL_Type()
)
ipStatsDefaultTTL.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipStatsDefaultTTL.setStatus("current")
_IcmpStats_ObjectIdentity = ObjectIdentity
icmpStats = _IcmpStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 17)
)
_IcmpStatsInMsgs_Type = Counter32
_IcmpStatsInMsgs_Object = MibScalar
icmpStatsInMsgs = _IcmpStatsInMsgs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 17, 1),
    _IcmpStatsInMsgs_Type()
)
icmpStatsInMsgs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpStatsInMsgs.setStatus("current")
_IcmpStatsInErrors_Type = Counter32
_IcmpStatsInErrors_Object = MibScalar
icmpStatsInErrors = _IcmpStatsInErrors_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 17, 2),
    _IcmpStatsInErrors_Type()
)
icmpStatsInErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpStatsInErrors.setStatus("current")
_IcmpStatsInDestUnreachs_Type = Counter32
_IcmpStatsInDestUnreachs_Object = MibScalar
icmpStatsInDestUnreachs = _IcmpStatsInDestUnreachs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 17, 3),
    _IcmpStatsInDestUnreachs_Type()
)
icmpStatsInDestUnreachs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpStatsInDestUnreachs.setStatus("current")
_IcmpStatsInTimeExcds_Type = Counter32
_IcmpStatsInTimeExcds_Object = MibScalar
icmpStatsInTimeExcds = _IcmpStatsInTimeExcds_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 17, 4),
    _IcmpStatsInTimeExcds_Type()
)
icmpStatsInTimeExcds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpStatsInTimeExcds.setStatus("current")
_IcmpStatsInParmProbs_Type = Counter32
_IcmpStatsInParmProbs_Object = MibScalar
icmpStatsInParmProbs = _IcmpStatsInParmProbs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 17, 5),
    _IcmpStatsInParmProbs_Type()
)
icmpStatsInParmProbs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpStatsInParmProbs.setStatus("current")
_IcmpStatsInSrcQuenchs_Type = Counter32
_IcmpStatsInSrcQuenchs_Object = MibScalar
icmpStatsInSrcQuenchs = _IcmpStatsInSrcQuenchs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 17, 6),
    _IcmpStatsInSrcQuenchs_Type()
)
icmpStatsInSrcQuenchs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpStatsInSrcQuenchs.setStatus("current")
_IcmpStatsInRedirects_Type = Counter32
_IcmpStatsInRedirects_Object = MibScalar
icmpStatsInRedirects = _IcmpStatsInRedirects_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 17, 7),
    _IcmpStatsInRedirects_Type()
)
icmpStatsInRedirects.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpStatsInRedirects.setStatus("current")
_IcmpStatsInEchos_Type = Counter32
_IcmpStatsInEchos_Object = MibScalar
icmpStatsInEchos = _IcmpStatsInEchos_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 17, 8),
    _IcmpStatsInEchos_Type()
)
icmpStatsInEchos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpStatsInEchos.setStatus("current")
_IcmpStatsInEchoReps_Type = Counter32
_IcmpStatsInEchoReps_Object = MibScalar
icmpStatsInEchoReps = _IcmpStatsInEchoReps_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 17, 9),
    _IcmpStatsInEchoReps_Type()
)
icmpStatsInEchoReps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpStatsInEchoReps.setStatus("current")
_IcmpStatsInTimestamps_Type = Counter32
_IcmpStatsInTimestamps_Object = MibScalar
icmpStatsInTimestamps = _IcmpStatsInTimestamps_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 17, 10),
    _IcmpStatsInTimestamps_Type()
)
icmpStatsInTimestamps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpStatsInTimestamps.setStatus("current")
_IcmpStatsInTimestampReps_Type = Counter32
_IcmpStatsInTimestampReps_Object = MibScalar
icmpStatsInTimestampReps = _IcmpStatsInTimestampReps_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 17, 11),
    _IcmpStatsInTimestampReps_Type()
)
icmpStatsInTimestampReps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpStatsInTimestampReps.setStatus("current")
_IcmpStatsInAddrMasks_Type = Counter32
_IcmpStatsInAddrMasks_Object = MibScalar
icmpStatsInAddrMasks = _IcmpStatsInAddrMasks_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 17, 12),
    _IcmpStatsInAddrMasks_Type()
)
icmpStatsInAddrMasks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpStatsInAddrMasks.setStatus("current")
_IcmpStatsInAddrMaskReps_Type = Counter32
_IcmpStatsInAddrMaskReps_Object = MibScalar
icmpStatsInAddrMaskReps = _IcmpStatsInAddrMaskReps_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 17, 13),
    _IcmpStatsInAddrMaskReps_Type()
)
icmpStatsInAddrMaskReps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpStatsInAddrMaskReps.setStatus("current")
_IcmpStatsOutMsgs_Type = Counter32
_IcmpStatsOutMsgs_Object = MibScalar
icmpStatsOutMsgs = _IcmpStatsOutMsgs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 17, 14),
    _IcmpStatsOutMsgs_Type()
)
icmpStatsOutMsgs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpStatsOutMsgs.setStatus("current")
_IcmpStatsOutErrors_Type = Counter32
_IcmpStatsOutErrors_Object = MibScalar
icmpStatsOutErrors = _IcmpStatsOutErrors_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 17, 15),
    _IcmpStatsOutErrors_Type()
)
icmpStatsOutErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpStatsOutErrors.setStatus("current")
_IcmpStatsOutDestUnreachs_Type = Counter32
_IcmpStatsOutDestUnreachs_Object = MibScalar
icmpStatsOutDestUnreachs = _IcmpStatsOutDestUnreachs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 17, 16),
    _IcmpStatsOutDestUnreachs_Type()
)
icmpStatsOutDestUnreachs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpStatsOutDestUnreachs.setStatus("current")
_IcmpStatsOutTimeExcds_Type = Counter32
_IcmpStatsOutTimeExcds_Object = MibScalar
icmpStatsOutTimeExcds = _IcmpStatsOutTimeExcds_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 17, 17),
    _IcmpStatsOutTimeExcds_Type()
)
icmpStatsOutTimeExcds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpStatsOutTimeExcds.setStatus("current")
_IcmpStatsOutParmProbs_Type = Counter32
_IcmpStatsOutParmProbs_Object = MibScalar
icmpStatsOutParmProbs = _IcmpStatsOutParmProbs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 17, 18),
    _IcmpStatsOutParmProbs_Type()
)
icmpStatsOutParmProbs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpStatsOutParmProbs.setStatus("current")
_IcmpStatsOutSrcQuenchs_Type = Counter32
_IcmpStatsOutSrcQuenchs_Object = MibScalar
icmpStatsOutSrcQuenchs = _IcmpStatsOutSrcQuenchs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 17, 19),
    _IcmpStatsOutSrcQuenchs_Type()
)
icmpStatsOutSrcQuenchs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpStatsOutSrcQuenchs.setStatus("current")
_IcmpStatsOutRedirects_Type = Counter32
_IcmpStatsOutRedirects_Object = MibScalar
icmpStatsOutRedirects = _IcmpStatsOutRedirects_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 17, 20),
    _IcmpStatsOutRedirects_Type()
)
icmpStatsOutRedirects.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpStatsOutRedirects.setStatus("current")
_IcmpStatsOutEchos_Type = Counter32
_IcmpStatsOutEchos_Object = MibScalar
icmpStatsOutEchos = _IcmpStatsOutEchos_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 17, 21),
    _IcmpStatsOutEchos_Type()
)
icmpStatsOutEchos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpStatsOutEchos.setStatus("current")
_IcmpStatsOutEchoReps_Type = Counter32
_IcmpStatsOutEchoReps_Object = MibScalar
icmpStatsOutEchoReps = _IcmpStatsOutEchoReps_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 17, 22),
    _IcmpStatsOutEchoReps_Type()
)
icmpStatsOutEchoReps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpStatsOutEchoReps.setStatus("current")
_IcmpStatsOutTimestamps_Type = Counter32
_IcmpStatsOutTimestamps_Object = MibScalar
icmpStatsOutTimestamps = _IcmpStatsOutTimestamps_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 17, 23),
    _IcmpStatsOutTimestamps_Type()
)
icmpStatsOutTimestamps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpStatsOutTimestamps.setStatus("current")
_IcmpStatsOutTimestampReps_Type = Counter32
_IcmpStatsOutTimestampReps_Object = MibScalar
icmpStatsOutTimestampReps = _IcmpStatsOutTimestampReps_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 17, 24),
    _IcmpStatsOutTimestampReps_Type()
)
icmpStatsOutTimestampReps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpStatsOutTimestampReps.setStatus("current")
_IcmpStatsOutAddrMasks_Type = Counter32
_IcmpStatsOutAddrMasks_Object = MibScalar
icmpStatsOutAddrMasks = _IcmpStatsOutAddrMasks_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 17, 25),
    _IcmpStatsOutAddrMasks_Type()
)
icmpStatsOutAddrMasks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpStatsOutAddrMasks.setStatus("current")
_IcmpStatsOutAddrMaskReps_Type = Counter32
_IcmpStatsOutAddrMaskReps_Object = MibScalar
icmpStatsOutAddrMaskReps = _IcmpStatsOutAddrMaskReps_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 17, 26),
    _IcmpStatsOutAddrMaskReps_Type()
)
icmpStatsOutAddrMaskReps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    icmpStatsOutAddrMaskReps.setStatus("current")
_TcpStats_ObjectIdentity = ObjectIdentity
tcpStats = _TcpStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 18)
)
_TcpStatsRtoAlgorithm_Type = Counter32
_TcpStatsRtoAlgorithm_Object = MibScalar
tcpStatsRtoAlgorithm = _TcpStatsRtoAlgorithm_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 18, 1),
    _TcpStatsRtoAlgorithm_Type()
)
tcpStatsRtoAlgorithm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tcpStatsRtoAlgorithm.setStatus("current")
_TcpStatsRtoMin_Type = Counter32
_TcpStatsRtoMin_Object = MibScalar
tcpStatsRtoMin = _TcpStatsRtoMin_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 18, 2),
    _TcpStatsRtoMin_Type()
)
tcpStatsRtoMin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tcpStatsRtoMin.setStatus("current")
_TcpStatsRtoMax_Type = Counter32
_TcpStatsRtoMax_Object = MibScalar
tcpStatsRtoMax = _TcpStatsRtoMax_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 18, 3),
    _TcpStatsRtoMax_Type()
)
tcpStatsRtoMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tcpStatsRtoMax.setStatus("current")
_TcpStatsMaxConn_Type = Counter32
_TcpStatsMaxConn_Object = MibScalar
tcpStatsMaxConn = _TcpStatsMaxConn_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 18, 4),
    _TcpStatsMaxConn_Type()
)
tcpStatsMaxConn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tcpStatsMaxConn.setStatus("current")
_TcpStatsActiveOpens_Type = Counter32
_TcpStatsActiveOpens_Object = MibScalar
tcpStatsActiveOpens = _TcpStatsActiveOpens_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 18, 5),
    _TcpStatsActiveOpens_Type()
)
tcpStatsActiveOpens.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tcpStatsActiveOpens.setStatus("current")
_TcpStatsPassiveOpens_Type = Counter32
_TcpStatsPassiveOpens_Object = MibScalar
tcpStatsPassiveOpens = _TcpStatsPassiveOpens_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 18, 6),
    _TcpStatsPassiveOpens_Type()
)
tcpStatsPassiveOpens.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tcpStatsPassiveOpens.setStatus("current")
_TcpStatsAttemptFails_Type = Counter32
_TcpStatsAttemptFails_Object = MibScalar
tcpStatsAttemptFails = _TcpStatsAttemptFails_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 18, 7),
    _TcpStatsAttemptFails_Type()
)
tcpStatsAttemptFails.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tcpStatsAttemptFails.setStatus("current")
_TcpStatsEstabResets_Type = Counter32
_TcpStatsEstabResets_Object = MibScalar
tcpStatsEstabResets = _TcpStatsEstabResets_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 18, 8),
    _TcpStatsEstabResets_Type()
)
tcpStatsEstabResets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tcpStatsEstabResets.setStatus("current")
_TcpStatsInSegs_Type = Counter32
_TcpStatsInSegs_Object = MibScalar
tcpStatsInSegs = _TcpStatsInSegs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 18, 9),
    _TcpStatsInSegs_Type()
)
tcpStatsInSegs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tcpStatsInSegs.setStatus("current")
_TcpStatsOutSegs_Type = Counter32
_TcpStatsOutSegs_Object = MibScalar
tcpStatsOutSegs = _TcpStatsOutSegs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 18, 10),
    _TcpStatsOutSegs_Type()
)
tcpStatsOutSegs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tcpStatsOutSegs.setStatus("current")
_TcpStatsRetransSegs_Type = Counter32
_TcpStatsRetransSegs_Object = MibScalar
tcpStatsRetransSegs = _TcpStatsRetransSegs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 18, 11),
    _TcpStatsRetransSegs_Type()
)
tcpStatsRetransSegs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tcpStatsRetransSegs.setStatus("current")
_TcpStatsInErrs_Type = Counter32
_TcpStatsInErrs_Object = MibScalar
tcpStatsInErrs = _TcpStatsInErrs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 18, 12),
    _TcpStatsInErrs_Type()
)
tcpStatsInErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tcpStatsInErrs.setStatus("current")
_TcpStatsCurrEstab_Type = Counter32
_TcpStatsCurrEstab_Object = MibScalar
tcpStatsCurrEstab = _TcpStatsCurrEstab_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 18, 13),
    _TcpStatsCurrEstab_Type()
)
tcpStatsCurrEstab.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tcpStatsCurrEstab.setStatus("current")
_TcpStatsCurrConn_Type = Counter32
_TcpStatsCurrConn_Object = MibScalar
tcpStatsCurrConn = _TcpStatsCurrConn_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 18, 14),
    _TcpStatsCurrConn_Type()
)
tcpStatsCurrConn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tcpStatsCurrConn.setStatus("current")
_TcpStatsOutRsts_Type = Counter32
_TcpStatsOutRsts_Object = MibScalar
tcpStatsOutRsts = _TcpStatsOutRsts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 18, 15),
    _TcpStatsOutRsts_Type()
)
tcpStatsOutRsts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tcpStatsOutRsts.setStatus("current")
_UdpStats_ObjectIdentity = ObjectIdentity
udpStats = _UdpStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 19)
)
_UdpStatsInDatagrams_Type = Counter32
_UdpStatsInDatagrams_Object = MibScalar
udpStatsInDatagrams = _UdpStatsInDatagrams_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 19, 1),
    _UdpStatsInDatagrams_Type()
)
udpStatsInDatagrams.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    udpStatsInDatagrams.setStatus("current")
_UdpStatsOutDatagrams_Type = Counter32
_UdpStatsOutDatagrams_Object = MibScalar
udpStatsOutDatagrams = _UdpStatsOutDatagrams_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 19, 2),
    _UdpStatsOutDatagrams_Type()
)
udpStatsOutDatagrams.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    udpStatsOutDatagrams.setStatus("current")
_UdpStatsInErrors_Type = Counter32
_UdpStatsInErrors_Object = MibScalar
udpStatsInErrors = _UdpStatsInErrors_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 19, 3),
    _UdpStatsInErrors_Type()
)
udpStatsInErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    udpStatsInErrors.setStatus("current")
_UdpStatsNoPorts_Type = Counter32
_UdpStatsNoPorts_Object = MibScalar
udpStatsNoPorts = _UdpStatsNoPorts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 19, 4),
    _UdpStatsNoPorts_Type()
)
udpStatsNoPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    udpStatsNoPorts.setStatus("current")
_BootpStats_ObjectIdentity = ObjectIdentity
bootpStats = _BootpStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 20)
)
_BootpRelayStatsTable_Object = MibTable
bootpRelayStatsTable = _BootpRelayStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 20, 1)
)
if mibBuilder.loadTexts:
    bootpRelayStatsTable.setStatus("current")
_BootpRelayStatsTableEntry_Object = MibTableRow
bootpRelayStatsTableEntry = _BootpRelayStatsTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 20, 1, 1)
)
bootpRelayStatsTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "bootpRelayStatsIndex"),
)
if mibBuilder.loadTexts:
    bootpRelayStatsTableEntry.setStatus("current")
_BootpRelayStatsIndex_Type = PortNumber
_BootpRelayStatsIndex_Object = MibTableColumn
bootpRelayStatsIndex = _BootpRelayStatsIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 20, 1, 1, 1),
    _BootpRelayStatsIndex_Type()
)
bootpRelayStatsIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bootpRelayStatsIndex.setStatus("current")
_BootpRelayStatsRequestsReceived_Type = Counter32
_BootpRelayStatsRequestsReceived_Object = MibTableColumn
bootpRelayStatsRequestsReceived = _BootpRelayStatsRequestsReceived_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 20, 1, 1, 2),
    _BootpRelayStatsRequestsReceived_Type()
)
bootpRelayStatsRequestsReceived.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bootpRelayStatsRequestsReceived.setStatus("current")
_BootpRelayStatsRequestsRelayed_Type = Counter32
_BootpRelayStatsRequestsRelayed_Object = MibTableColumn
bootpRelayStatsRequestsRelayed = _BootpRelayStatsRequestsRelayed_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 20, 1, 1, 3),
    _BootpRelayStatsRequestsRelayed_Type()
)
bootpRelayStatsRequestsRelayed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bootpRelayStatsRequestsRelayed.setStatus("current")
_BootpRelayStatsRequestsDroppedNoRelay_Type = Counter32
_BootpRelayStatsRequestsDroppedNoRelay_Object = MibTableColumn
bootpRelayStatsRequestsDroppedNoRelay = _BootpRelayStatsRequestsDroppedNoRelay_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 20, 1, 1, 5),
    _BootpRelayStatsRequestsDroppedNoRelay_Type()
)
bootpRelayStatsRequestsDroppedNoRelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bootpRelayStatsRequestsDroppedNoRelay.setStatus("current")
_BootpRelayStatsRequestsDroppedNoServer_Type = Counter32
_BootpRelayStatsRequestsDroppedNoServer_Object = MibTableColumn
bootpRelayStatsRequestsDroppedNoServer = _BootpRelayStatsRequestsDroppedNoServer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 20, 1, 1, 6),
    _BootpRelayStatsRequestsDroppedNoServer_Type()
)
bootpRelayStatsRequestsDroppedNoServer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bootpRelayStatsRequestsDroppedNoServer.setStatus("current")
_BootpRelayStatsRequestsDroppedError_Type = Counter32
_BootpRelayStatsRequestsDroppedError_Object = MibTableColumn
bootpRelayStatsRequestsDroppedError = _BootpRelayStatsRequestsDroppedError_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 20, 1, 1, 7),
    _BootpRelayStatsRequestsDroppedError_Type()
)
bootpRelayStatsRequestsDroppedError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bootpRelayStatsRequestsDroppedError.setStatus("current")
_BootpRelayStatsRepliesReceived_Type = Counter32
_BootpRelayStatsRepliesReceived_Object = MibTableColumn
bootpRelayStatsRepliesReceived = _BootpRelayStatsRepliesReceived_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 20, 1, 1, 8),
    _BootpRelayStatsRepliesReceived_Type()
)
bootpRelayStatsRepliesReceived.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bootpRelayStatsRepliesReceived.setStatus("current")
_BootpRelayStatsRepliesRelayed_Type = Counter32
_BootpRelayStatsRepliesRelayed_Object = MibTableColumn
bootpRelayStatsRepliesRelayed = _BootpRelayStatsRepliesRelayed_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 20, 1, 1, 9),
    _BootpRelayStatsRepliesRelayed_Type()
)
bootpRelayStatsRepliesRelayed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bootpRelayStatsRepliesRelayed.setStatus("current")
_BootpRelayStatsRepliesDroppedError_Type = Counter32
_BootpRelayStatsRepliesDroppedError_Object = MibTableColumn
bootpRelayStatsRepliesDroppedError = _BootpRelayStatsRepliesDroppedError_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 20, 1, 1, 10),
    _BootpRelayStatsRepliesDroppedError_Type()
)
bootpRelayStatsRepliesDroppedError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bootpRelayStatsRepliesDroppedError.setStatus("current")
_Ospf3Stats_ObjectIdentity = ObjectIdentity
ospf3Stats = _Ospf3Stats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22)
)
_Ospf3GeneralStats_ObjectIdentity = ObjectIdentity
ospf3GeneralStats = _Ospf3GeneralStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1)
)
_Ospf3CumRxTxDisdStats_ObjectIdentity = ObjectIdentity
ospf3CumRxTxDisdStats = _Ospf3CumRxTxDisdStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 1)
)
_Ospf3CumRxPkts_Type = Counter32
_Ospf3CumRxPkts_Object = MibScalar
ospf3CumRxPkts = _Ospf3CumRxPkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 1, 1),
    _Ospf3CumRxPkts_Type()
)
ospf3CumRxPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CumRxPkts.setStatus("current")
_Ospf3CumTxPkts_Type = Counter32
_Ospf3CumTxPkts_Object = MibScalar
ospf3CumTxPkts = _Ospf3CumTxPkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 1, 2),
    _Ospf3CumTxPkts_Type()
)
ospf3CumTxPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CumTxPkts.setStatus("current")
_Ospf3CumDisdPkts_Type = Counter32
_Ospf3CumDisdPkts_Object = MibScalar
ospf3CumDisdPkts = _Ospf3CumDisdPkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 1, 3),
    _Ospf3CumDisdPkts_Type()
)
ospf3CumDisdPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CumDisdPkts.setStatus("current")
_Ospf3CumRxHello_Type = Counter32
_Ospf3CumRxHello_Object = MibScalar
ospf3CumRxHello = _Ospf3CumRxHello_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 1, 4),
    _Ospf3CumRxHello_Type()
)
ospf3CumRxHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CumRxHello.setStatus("current")
_Ospf3CumTxHello_Type = Counter32
_Ospf3CumTxHello_Object = MibScalar
ospf3CumTxHello = _Ospf3CumTxHello_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 1, 5),
    _Ospf3CumTxHello_Type()
)
ospf3CumTxHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CumTxHello.setStatus("current")
_Ospf3CumDisdHello_Type = Counter32
_Ospf3CumDisdHello_Object = MibScalar
ospf3CumDisdHello = _Ospf3CumDisdHello_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 1, 6),
    _Ospf3CumDisdHello_Type()
)
ospf3CumDisdHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CumDisdHello.setStatus("current")
_Ospf3CumRxDatabase_Type = Counter32
_Ospf3CumRxDatabase_Object = MibScalar
ospf3CumRxDatabase = _Ospf3CumRxDatabase_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 1, 7),
    _Ospf3CumRxDatabase_Type()
)
ospf3CumRxDatabase.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CumRxDatabase.setStatus("current")
_Ospf3CumTxDatabase_Type = Counter32
_Ospf3CumTxDatabase_Object = MibScalar
ospf3CumTxDatabase = _Ospf3CumTxDatabase_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 1, 8),
    _Ospf3CumTxDatabase_Type()
)
ospf3CumTxDatabase.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CumTxDatabase.setStatus("current")
_Ospf3CumDisdDatabase_Type = Counter32
_Ospf3CumDisdDatabase_Object = MibScalar
ospf3CumDisdDatabase = _Ospf3CumDisdDatabase_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 1, 9),
    _Ospf3CumDisdDatabase_Type()
)
ospf3CumDisdDatabase.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CumDisdDatabase.setStatus("current")
_Ospf3CumRxlsReqs_Type = Counter32
_Ospf3CumRxlsReqs_Object = MibScalar
ospf3CumRxlsReqs = _Ospf3CumRxlsReqs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 1, 10),
    _Ospf3CumRxlsReqs_Type()
)
ospf3CumRxlsReqs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CumRxlsReqs.setStatus("current")
_Ospf3CumTxlsReqs_Type = Counter32
_Ospf3CumTxlsReqs_Object = MibScalar
ospf3CumTxlsReqs = _Ospf3CumTxlsReqs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 1, 11),
    _Ospf3CumTxlsReqs_Type()
)
ospf3CumTxlsReqs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CumTxlsReqs.setStatus("current")
_Ospf3CumDisdlsReqs_Type = Counter32
_Ospf3CumDisdlsReqs_Object = MibScalar
ospf3CumDisdlsReqs = _Ospf3CumDisdlsReqs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 1, 12),
    _Ospf3CumDisdlsReqs_Type()
)
ospf3CumDisdlsReqs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CumDisdlsReqs.setStatus("current")
_Ospf3CumRxlsAcks_Type = Counter32
_Ospf3CumRxlsAcks_Object = MibScalar
ospf3CumRxlsAcks = _Ospf3CumRxlsAcks_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 1, 13),
    _Ospf3CumRxlsAcks_Type()
)
ospf3CumRxlsAcks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CumRxlsAcks.setStatus("current")
_Ospf3CumTxlsAcks_Type = Counter32
_Ospf3CumTxlsAcks_Object = MibScalar
ospf3CumTxlsAcks = _Ospf3CumTxlsAcks_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 1, 14),
    _Ospf3CumTxlsAcks_Type()
)
ospf3CumTxlsAcks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CumTxlsAcks.setStatus("current")
_Ospf3CumDisdlsAcks_Type = Counter32
_Ospf3CumDisdlsAcks_Object = MibScalar
ospf3CumDisdlsAcks = _Ospf3CumDisdlsAcks_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 1, 15),
    _Ospf3CumDisdlsAcks_Type()
)
ospf3CumDisdlsAcks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CumDisdlsAcks.setStatus("current")
_Ospf3CumRxlsUpdates_Type = Counter32
_Ospf3CumRxlsUpdates_Object = MibScalar
ospf3CumRxlsUpdates = _Ospf3CumRxlsUpdates_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 1, 16),
    _Ospf3CumRxlsUpdates_Type()
)
ospf3CumRxlsUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CumRxlsUpdates.setStatus("current")
_Ospf3CumTxlsUpdates_Type = Counter32
_Ospf3CumTxlsUpdates_Object = MibScalar
ospf3CumTxlsUpdates = _Ospf3CumTxlsUpdates_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 1, 17),
    _Ospf3CumTxlsUpdates_Type()
)
ospf3CumTxlsUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CumTxlsUpdates.setStatus("current")
_Ospf3CumDisdlsUpdates_Type = Counter32
_Ospf3CumDisdlsUpdates_Object = MibScalar
ospf3CumDisdlsUpdates = _Ospf3CumDisdlsUpdates_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 1, 18),
    _Ospf3CumDisdlsUpdates_Type()
)
ospf3CumDisdlsUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CumDisdlsUpdates.setStatus("current")
_Ospf3CumNbrChangeStats_ObjectIdentity = ObjectIdentity
ospf3CumNbrChangeStats = _Ospf3CumNbrChangeStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 2)
)
_Ospf3CumNbrDown_Type = Counter32
_Ospf3CumNbrDown_Object = MibScalar
ospf3CumNbrDown = _Ospf3CumNbrDown_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 2, 1),
    _Ospf3CumNbrDown_Type()
)
ospf3CumNbrDown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CumNbrDown.setStatus("current")
_Ospf3CumNbrAttempt_Type = Counter32
_Ospf3CumNbrAttempt_Object = MibScalar
ospf3CumNbrAttempt = _Ospf3CumNbrAttempt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 2, 2),
    _Ospf3CumNbrAttempt_Type()
)
ospf3CumNbrAttempt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CumNbrAttempt.setStatus("current")
_Ospf3CumNbrInit_Type = Counter32
_Ospf3CumNbrInit_Object = MibScalar
ospf3CumNbrInit = _Ospf3CumNbrInit_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 2, 3),
    _Ospf3CumNbrInit_Type()
)
ospf3CumNbrInit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CumNbrInit.setStatus("current")
_Ospf3CumNbrN2way_Type = Counter32
_Ospf3CumNbrN2way_Object = MibScalar
ospf3CumNbrN2way = _Ospf3CumNbrN2way_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 2, 4),
    _Ospf3CumNbrN2way_Type()
)
ospf3CumNbrN2way.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CumNbrN2way.setStatus("current")
_Ospf3CumNbrExStart_Type = Counter32
_Ospf3CumNbrExStart_Object = MibScalar
ospf3CumNbrExStart = _Ospf3CumNbrExStart_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 2, 5),
    _Ospf3CumNbrExStart_Type()
)
ospf3CumNbrExStart.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CumNbrExStart.setStatus("current")
_Ospf3CumNbrExchange_Type = Counter32
_Ospf3CumNbrExchange_Object = MibScalar
ospf3CumNbrExchange = _Ospf3CumNbrExchange_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 2, 6),
    _Ospf3CumNbrExchange_Type()
)
ospf3CumNbrExchange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CumNbrExchange.setStatus("current")
_Ospf3CumNbrLoading_Type = Counter32
_Ospf3CumNbrLoading_Object = MibScalar
ospf3CumNbrLoading = _Ospf3CumNbrLoading_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 2, 7),
    _Ospf3CumNbrLoading_Type()
)
ospf3CumNbrLoading.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CumNbrLoading.setStatus("current")
_Ospf3CumNbrFull_Type = Counter32
_Ospf3CumNbrFull_Object = MibScalar
ospf3CumNbrFull = _Ospf3CumNbrFull_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 2, 8),
    _Ospf3CumNbrFull_Type()
)
ospf3CumNbrFull.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CumNbrFull.setStatus("current")
_Ospf3CumNbrAllEvents_Type = Counter32
_Ospf3CumNbrAllEvents_Object = MibScalar
ospf3CumNbrAllEvents = _Ospf3CumNbrAllEvents_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 2, 9),
    _Ospf3CumNbrAllEvents_Type()
)
ospf3CumNbrAllEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CumNbrAllEvents.setStatus("current")
_Ospf3CumIntfChangeStats_ObjectIdentity = ObjectIdentity
ospf3CumIntfChangeStats = _Ospf3CumIntfChangeStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 3)
)
_Ospf3CumIntfDown_Type = Counter32
_Ospf3CumIntfDown_Object = MibScalar
ospf3CumIntfDown = _Ospf3CumIntfDown_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 3, 1),
    _Ospf3CumIntfDown_Type()
)
ospf3CumIntfDown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CumIntfDown.setStatus("current")
_Ospf3CumIntfLoop_Type = Counter32
_Ospf3CumIntfLoop_Object = MibScalar
ospf3CumIntfLoop = _Ospf3CumIntfLoop_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 3, 2),
    _Ospf3CumIntfLoop_Type()
)
ospf3CumIntfLoop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CumIntfLoop.setStatus("current")
_Ospf3CumIntfWaiting_Type = Counter32
_Ospf3CumIntfWaiting_Object = MibScalar
ospf3CumIntfWaiting = _Ospf3CumIntfWaiting_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 3, 3),
    _Ospf3CumIntfWaiting_Type()
)
ospf3CumIntfWaiting.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CumIntfWaiting.setStatus("current")
_Ospf3CumIntfPtop_Type = Counter32
_Ospf3CumIntfPtop_Object = MibScalar
ospf3CumIntfPtop = _Ospf3CumIntfPtop_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 3, 4),
    _Ospf3CumIntfPtop_Type()
)
ospf3CumIntfPtop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CumIntfPtop.setStatus("current")
_Ospf3CumIntfDr_Type = Counter32
_Ospf3CumIntfDr_Object = MibScalar
ospf3CumIntfDr = _Ospf3CumIntfDr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 3, 5),
    _Ospf3CumIntfDr_Type()
)
ospf3CumIntfDr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CumIntfDr.setStatus("current")
_Ospf3CumIntfBackup_Type = Counter32
_Ospf3CumIntfBackup_Object = MibScalar
ospf3CumIntfBackup = _Ospf3CumIntfBackup_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 3, 6),
    _Ospf3CumIntfBackup_Type()
)
ospf3CumIntfBackup.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CumIntfBackup.setStatus("current")
_Ospf3CumIntfDrOther_Type = Counter32
_Ospf3CumIntfDrOther_Object = MibScalar
ospf3CumIntfDrOther = _Ospf3CumIntfDrOther_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 3, 7),
    _Ospf3CumIntfDrOther_Type()
)
ospf3CumIntfDrOther.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CumIntfDrOther.setStatus("current")
_Ospf3CumIntfAllEvents_Type = Counter32
_Ospf3CumIntfAllEvents_Object = MibScalar
ospf3CumIntfAllEvents = _Ospf3CumIntfAllEvents_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 3, 8),
    _Ospf3CumIntfAllEvents_Type()
)
ospf3CumIntfAllEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3CumIntfAllEvents.setStatus("current")
_Ospf3TimersKickOffStats_ObjectIdentity = ObjectIdentity
ospf3TimersKickOffStats = _Ospf3TimersKickOffStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 4)
)
_Ospf3TmrsKckOffHello_Type = Counter32
_Ospf3TmrsKckOffHello_Object = MibScalar
ospf3TmrsKckOffHello = _Ospf3TmrsKckOffHello_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 4, 1),
    _Ospf3TmrsKckOffHello_Type()
)
ospf3TmrsKckOffHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3TmrsKckOffHello.setStatus("current")
_Ospf3TmrsKckOffWait_Type = Counter32
_Ospf3TmrsKckOffWait_Object = MibScalar
ospf3TmrsKckOffWait = _Ospf3TmrsKckOffWait_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 4, 2),
    _Ospf3TmrsKckOffWait_Type()
)
ospf3TmrsKckOffWait.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3TmrsKckOffWait.setStatus("current")
_Ospf3TmrsKckOffPoll_Type = Counter32
_Ospf3TmrsKckOffPoll_Object = MibScalar
ospf3TmrsKckOffPoll = _Ospf3TmrsKckOffPoll_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 4, 3),
    _Ospf3TmrsKckOffPoll_Type()
)
ospf3TmrsKckOffPoll.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3TmrsKckOffPoll.setStatus("current")
_Ospf3TmrsKckOffNbrProbe_Type = Counter32
_Ospf3TmrsKckOffNbrProbe_Object = MibScalar
ospf3TmrsKckOffNbrProbe = _Ospf3TmrsKckOffNbrProbe_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 1, 4, 4),
    _Ospf3TmrsKckOffNbrProbe_Type()
)
ospf3TmrsKckOffNbrProbe.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3TmrsKckOffNbrProbe.setStatus("current")
_Ospf3Area_ObjectIdentity = ObjectIdentity
ospf3Area = _Ospf3Area_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2)
)
_Ospf3AreaRxTxDisdStats_Object = MibTable
ospf3AreaRxTxDisdStats = _Ospf3AreaRxTxDisdStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 1)
)
if mibBuilder.loadTexts:
    ospf3AreaRxTxDisdStats.setStatus("current")
_Ospf3AreaRxTxDisdStatsEntry_Object = MibTableRow
ospf3AreaRxTxDisdStatsEntry = _Ospf3AreaRxTxDisdStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 1, 1)
)
ospf3AreaRxTxDisdStatsEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospf3AreaRxTxDisdIndex"),
)
if mibBuilder.loadTexts:
    ospf3AreaRxTxDisdStatsEntry.setStatus("current")
_Ospf3AreaRxTxDisdIndex_Type = Integer32
_Ospf3AreaRxTxDisdIndex_Object = MibTableColumn
ospf3AreaRxTxDisdIndex = _Ospf3AreaRxTxDisdIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 1, 1, 1),
    _Ospf3AreaRxTxDisdIndex_Type()
)
ospf3AreaRxTxDisdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaRxTxDisdIndex.setStatus("current")
_Ospf3AreaRxPkts_Type = Counter32
_Ospf3AreaRxPkts_Object = MibTableColumn
ospf3AreaRxPkts = _Ospf3AreaRxPkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 1, 1, 2),
    _Ospf3AreaRxPkts_Type()
)
ospf3AreaRxPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaRxPkts.setStatus("current")
_Ospf3AreaTxPkts_Type = Counter32
_Ospf3AreaTxPkts_Object = MibTableColumn
ospf3AreaTxPkts = _Ospf3AreaTxPkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 1, 1, 3),
    _Ospf3AreaTxPkts_Type()
)
ospf3AreaTxPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaTxPkts.setStatus("current")
_Ospf3AreaDisdPkts_Type = Counter32
_Ospf3AreaDisdPkts_Object = MibTableColumn
ospf3AreaDisdPkts = _Ospf3AreaDisdPkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 1, 1, 4),
    _Ospf3AreaDisdPkts_Type()
)
ospf3AreaDisdPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaDisdPkts.setStatus("current")
_Ospf3AreaRxHello_Type = Counter32
_Ospf3AreaRxHello_Object = MibTableColumn
ospf3AreaRxHello = _Ospf3AreaRxHello_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 1, 1, 5),
    _Ospf3AreaRxHello_Type()
)
ospf3AreaRxHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaRxHello.setStatus("current")
_Ospf3AreaTxHello_Type = Counter32
_Ospf3AreaTxHello_Object = MibTableColumn
ospf3AreaTxHello = _Ospf3AreaTxHello_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 1, 1, 6),
    _Ospf3AreaTxHello_Type()
)
ospf3AreaTxHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaTxHello.setStatus("current")
_Ospf3AreaDisdHello_Type = Counter32
_Ospf3AreaDisdHello_Object = MibTableColumn
ospf3AreaDisdHello = _Ospf3AreaDisdHello_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 1, 1, 7),
    _Ospf3AreaDisdHello_Type()
)
ospf3AreaDisdHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaDisdHello.setStatus("current")
_Ospf3AreaRxDatabase_Type = Counter32
_Ospf3AreaRxDatabase_Object = MibTableColumn
ospf3AreaRxDatabase = _Ospf3AreaRxDatabase_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 1, 1, 8),
    _Ospf3AreaRxDatabase_Type()
)
ospf3AreaRxDatabase.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaRxDatabase.setStatus("current")
_Ospf3AreaTxDatabase_Type = Counter32
_Ospf3AreaTxDatabase_Object = MibTableColumn
ospf3AreaTxDatabase = _Ospf3AreaTxDatabase_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 1, 1, 9),
    _Ospf3AreaTxDatabase_Type()
)
ospf3AreaTxDatabase.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaTxDatabase.setStatus("current")
_Ospf3AreaDisdDatabase_Type = Counter32
_Ospf3AreaDisdDatabase_Object = MibTableColumn
ospf3AreaDisdDatabase = _Ospf3AreaDisdDatabase_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 1, 1, 10),
    _Ospf3AreaDisdDatabase_Type()
)
ospf3AreaDisdDatabase.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaDisdDatabase.setStatus("current")
_Ospf3AreaRxlsReqs_Type = Counter32
_Ospf3AreaRxlsReqs_Object = MibTableColumn
ospf3AreaRxlsReqs = _Ospf3AreaRxlsReqs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 1, 1, 11),
    _Ospf3AreaRxlsReqs_Type()
)
ospf3AreaRxlsReqs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaRxlsReqs.setStatus("current")
_Ospf3AreaTxlsReqs_Type = Counter32
_Ospf3AreaTxlsReqs_Object = MibTableColumn
ospf3AreaTxlsReqs = _Ospf3AreaTxlsReqs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 1, 1, 12),
    _Ospf3AreaTxlsReqs_Type()
)
ospf3AreaTxlsReqs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaTxlsReqs.setStatus("current")
_Ospf3AreaDisdlsReqs_Type = Counter32
_Ospf3AreaDisdlsReqs_Object = MibTableColumn
ospf3AreaDisdlsReqs = _Ospf3AreaDisdlsReqs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 1, 1, 13),
    _Ospf3AreaDisdlsReqs_Type()
)
ospf3AreaDisdlsReqs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaDisdlsReqs.setStatus("current")
_Ospf3AreaRxlsAcks_Type = Counter32
_Ospf3AreaRxlsAcks_Object = MibTableColumn
ospf3AreaRxlsAcks = _Ospf3AreaRxlsAcks_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 1, 1, 14),
    _Ospf3AreaRxlsAcks_Type()
)
ospf3AreaRxlsAcks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaRxlsAcks.setStatus("current")
_Ospf3AreaTxlsAcks_Type = Counter32
_Ospf3AreaTxlsAcks_Object = MibTableColumn
ospf3AreaTxlsAcks = _Ospf3AreaTxlsAcks_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 1, 1, 15),
    _Ospf3AreaTxlsAcks_Type()
)
ospf3AreaTxlsAcks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaTxlsAcks.setStatus("current")
_Ospf3AreaDisdlsAcks_Type = Counter32
_Ospf3AreaDisdlsAcks_Object = MibTableColumn
ospf3AreaDisdlsAcks = _Ospf3AreaDisdlsAcks_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 1, 1, 16),
    _Ospf3AreaDisdlsAcks_Type()
)
ospf3AreaDisdlsAcks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaDisdlsAcks.setStatus("current")
_Ospf3AreaRxlsUpdates_Type = Counter32
_Ospf3AreaRxlsUpdates_Object = MibTableColumn
ospf3AreaRxlsUpdates = _Ospf3AreaRxlsUpdates_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 1, 1, 17),
    _Ospf3AreaRxlsUpdates_Type()
)
ospf3AreaRxlsUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaRxlsUpdates.setStatus("current")
_Ospf3AreaTxlsUpdates_Type = Counter32
_Ospf3AreaTxlsUpdates_Object = MibTableColumn
ospf3AreaTxlsUpdates = _Ospf3AreaTxlsUpdates_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 1, 1, 18),
    _Ospf3AreaTxlsUpdates_Type()
)
ospf3AreaTxlsUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaTxlsUpdates.setStatus("current")
_Ospf3AreaDisdlsUpdates_Type = Counter32
_Ospf3AreaDisdlsUpdates_Object = MibTableColumn
ospf3AreaDisdlsUpdates = _Ospf3AreaDisdlsUpdates_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 1, 1, 19),
    _Ospf3AreaDisdlsUpdates_Type()
)
ospf3AreaDisdlsUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaDisdlsUpdates.setStatus("current")
_Ospf3AreaNbrChangeStats_Object = MibTable
ospf3AreaNbrChangeStats = _Ospf3AreaNbrChangeStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 2)
)
if mibBuilder.loadTexts:
    ospf3AreaNbrChangeStats.setStatus("current")
_Ospf3AreaNbrChangeStatsEntry_Object = MibTableRow
ospf3AreaNbrChangeStatsEntry = _Ospf3AreaNbrChangeStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 2, 1)
)
ospf3AreaNbrChangeStatsEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospf3AreaNbrIndex"),
)
if mibBuilder.loadTexts:
    ospf3AreaNbrChangeStatsEntry.setStatus("current")
_Ospf3AreaNbrIndex_Type = Integer32
_Ospf3AreaNbrIndex_Object = MibTableColumn
ospf3AreaNbrIndex = _Ospf3AreaNbrIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 2, 1, 1),
    _Ospf3AreaNbrIndex_Type()
)
ospf3AreaNbrIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaNbrIndex.setStatus("current")
_Ospf3AreaNbrDown_Type = Counter32
_Ospf3AreaNbrDown_Object = MibTableColumn
ospf3AreaNbrDown = _Ospf3AreaNbrDown_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 2, 1, 2),
    _Ospf3AreaNbrDown_Type()
)
ospf3AreaNbrDown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaNbrDown.setStatus("current")
_Ospf3AreaNbrAttempt_Type = Counter32
_Ospf3AreaNbrAttempt_Object = MibTableColumn
ospf3AreaNbrAttempt = _Ospf3AreaNbrAttempt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 2, 1, 3),
    _Ospf3AreaNbrAttempt_Type()
)
ospf3AreaNbrAttempt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaNbrAttempt.setStatus("current")
_Ospf3AreaNbrInit_Type = Counter32
_Ospf3AreaNbrInit_Object = MibTableColumn
ospf3AreaNbrInit = _Ospf3AreaNbrInit_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 2, 1, 4),
    _Ospf3AreaNbrInit_Type()
)
ospf3AreaNbrInit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaNbrInit.setStatus("current")
_Ospf3AreaNbrN2way_Type = Counter32
_Ospf3AreaNbrN2way_Object = MibTableColumn
ospf3AreaNbrN2way = _Ospf3AreaNbrN2way_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 2, 1, 5),
    _Ospf3AreaNbrN2way_Type()
)
ospf3AreaNbrN2way.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaNbrN2way.setStatus("current")
_Ospf3AreaNbrExStart_Type = Counter32
_Ospf3AreaNbrExStart_Object = MibTableColumn
ospf3AreaNbrExStart = _Ospf3AreaNbrExStart_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 2, 1, 6),
    _Ospf3AreaNbrExStart_Type()
)
ospf3AreaNbrExStart.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaNbrExStart.setStatus("current")
_Ospf3AreaNbrExchange_Type = Counter32
_Ospf3AreaNbrExchange_Object = MibTableColumn
ospf3AreaNbrExchange = _Ospf3AreaNbrExchange_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 2, 1, 7),
    _Ospf3AreaNbrExchange_Type()
)
ospf3AreaNbrExchange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaNbrExchange.setStatus("current")
_Ospf3AreaNbrLoading_Type = Counter32
_Ospf3AreaNbrLoading_Object = MibTableColumn
ospf3AreaNbrLoading = _Ospf3AreaNbrLoading_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 2, 1, 8),
    _Ospf3AreaNbrLoading_Type()
)
ospf3AreaNbrLoading.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaNbrLoading.setStatus("current")
_Ospf3AreaNbrFull_Type = Counter32
_Ospf3AreaNbrFull_Object = MibTableColumn
ospf3AreaNbrFull = _Ospf3AreaNbrFull_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 2, 1, 9),
    _Ospf3AreaNbrFull_Type()
)
ospf3AreaNbrFull.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaNbrFull.setStatus("current")
_Ospf3AreaNbrAllEvents_Type = Counter32
_Ospf3AreaNbrAllEvents_Object = MibTableColumn
ospf3AreaNbrAllEvents = _Ospf3AreaNbrAllEvents_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 2, 1, 10),
    _Ospf3AreaNbrAllEvents_Type()
)
ospf3AreaNbrAllEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaNbrAllEvents.setStatus("current")
_Ospf3AreaIntfChangeStats_Object = MibTable
ospf3AreaIntfChangeStats = _Ospf3AreaIntfChangeStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 3)
)
if mibBuilder.loadTexts:
    ospf3AreaIntfChangeStats.setStatus("current")
_Ospf3AreaIntfChangeStatsEntry_Object = MibTableRow
ospf3AreaIntfChangeStatsEntry = _Ospf3AreaIntfChangeStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 3, 1)
)
ospf3AreaIntfChangeStatsEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospf3AreaIntfIndex"),
)
if mibBuilder.loadTexts:
    ospf3AreaIntfChangeStatsEntry.setStatus("current")
_Ospf3AreaIntfIndex_Type = Integer32
_Ospf3AreaIntfIndex_Object = MibTableColumn
ospf3AreaIntfIndex = _Ospf3AreaIntfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 3, 1, 1),
    _Ospf3AreaIntfIndex_Type()
)
ospf3AreaIntfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaIntfIndex.setStatus("current")
_Ospf3AreaIntfDown_Type = Counter32
_Ospf3AreaIntfDown_Object = MibTableColumn
ospf3AreaIntfDown = _Ospf3AreaIntfDown_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 3, 1, 2),
    _Ospf3AreaIntfDown_Type()
)
ospf3AreaIntfDown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaIntfDown.setStatus("current")
_Ospf3AreaIntfLoop_Type = Counter32
_Ospf3AreaIntfLoop_Object = MibTableColumn
ospf3AreaIntfLoop = _Ospf3AreaIntfLoop_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 3, 1, 3),
    _Ospf3AreaIntfLoop_Type()
)
ospf3AreaIntfLoop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaIntfLoop.setStatus("current")
_Ospf3AreaIntfWaiting_Type = Counter32
_Ospf3AreaIntfWaiting_Object = MibTableColumn
ospf3AreaIntfWaiting = _Ospf3AreaIntfWaiting_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 3, 1, 4),
    _Ospf3AreaIntfWaiting_Type()
)
ospf3AreaIntfWaiting.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaIntfWaiting.setStatus("current")
_Ospf3AreaIntfPtop_Type = Counter32
_Ospf3AreaIntfPtop_Object = MibTableColumn
ospf3AreaIntfPtop = _Ospf3AreaIntfPtop_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 3, 1, 5),
    _Ospf3AreaIntfPtop_Type()
)
ospf3AreaIntfPtop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaIntfPtop.setStatus("current")
_Ospf3AreaIntfDr_Type = Counter32
_Ospf3AreaIntfDr_Object = MibTableColumn
ospf3AreaIntfDr = _Ospf3AreaIntfDr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 3, 1, 6),
    _Ospf3AreaIntfDr_Type()
)
ospf3AreaIntfDr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaIntfDr.setStatus("current")
_Ospf3AreaIntfBackup_Type = Counter32
_Ospf3AreaIntfBackup_Object = MibTableColumn
ospf3AreaIntfBackup = _Ospf3AreaIntfBackup_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 3, 1, 7),
    _Ospf3AreaIntfBackup_Type()
)
ospf3AreaIntfBackup.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaIntfBackup.setStatus("current")
_Ospf3AreaIntfDrOther_Type = Counter32
_Ospf3AreaIntfDrOther_Object = MibTableColumn
ospf3AreaIntfDrOther = _Ospf3AreaIntfDrOther_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 3, 1, 8),
    _Ospf3AreaIntfDrOther_Type()
)
ospf3AreaIntfDrOther.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaIntfDrOther.setStatus("current")
_Ospf3AreaIntfAllEvents_Type = Counter32
_Ospf3AreaIntfAllEvents_Object = MibTableColumn
ospf3AreaIntfAllEvents = _Ospf3AreaIntfAllEvents_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 3, 1, 9),
    _Ospf3AreaIntfAllEvents_Type()
)
ospf3AreaIntfAllEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaIntfAllEvents.setStatus("current")
_Ospf3AreaErrorStats_Object = MibTable
ospf3AreaErrorStats = _Ospf3AreaErrorStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 4)
)
if mibBuilder.loadTexts:
    ospf3AreaErrorStats.setStatus("current")
_Ospf3AreaErrorStatsEntry_Object = MibTableRow
ospf3AreaErrorStatsEntry = _Ospf3AreaErrorStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 4, 1)
)
ospf3AreaErrorStatsEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospf3AreaErrIndex"),
)
if mibBuilder.loadTexts:
    ospf3AreaErrorStatsEntry.setStatus("current")
_Ospf3AreaErrIndex_Type = Integer32
_Ospf3AreaErrIndex_Object = MibTableColumn
ospf3AreaErrIndex = _Ospf3AreaErrIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 4, 1, 1),
    _Ospf3AreaErrIndex_Type()
)
ospf3AreaErrIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaErrIndex.setStatus("current")
_Ospf3AreaErrRxOnPasv_Type = Counter32
_Ospf3AreaErrRxOnPasv_Object = MibTableColumn
ospf3AreaErrRxOnPasv = _Ospf3AreaErrRxOnPasv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 4, 1, 2),
    _Ospf3AreaErrRxOnPasv_Type()
)
ospf3AreaErrRxOnPasv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaErrRxOnPasv.setStatus("current")
_Ospf3AreaErrRxOspfOff_Type = Counter32
_Ospf3AreaErrRxOspfOff_Object = MibTableColumn
ospf3AreaErrRxOspfOff = _Ospf3AreaErrRxOspfOff_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 4, 1, 3),
    _Ospf3AreaErrRxOspfOff_Type()
)
ospf3AreaErrRxOspfOff.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaErrRxOspfOff.setStatus("current")
_Ospf3AreaErrRxOnNotup_Type = Counter32
_Ospf3AreaErrRxOnNotup_Object = MibTableColumn
ospf3AreaErrRxOnNotup = _Ospf3AreaErrRxOnNotup_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 4, 1, 4),
    _Ospf3AreaErrRxOnNotup_Type()
)
ospf3AreaErrRxOnNotup.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaErrRxOnNotup.setStatus("current")
_Ospf3AreaErrRxVerMismatch_Type = Counter32
_Ospf3AreaErrRxVerMismatch_Object = MibTableColumn
ospf3AreaErrRxVerMismatch = _Ospf3AreaErrRxVerMismatch_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 4, 1, 5),
    _Ospf3AreaErrRxVerMismatch_Type()
)
ospf3AreaErrRxVerMismatch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaErrRxVerMismatch.setStatus("current")
_Ospf3AreaErrRxZeroRTRID_Type = Counter32
_Ospf3AreaErrRxZeroRTRID_Object = MibTableColumn
ospf3AreaErrRxZeroRTRID = _Ospf3AreaErrRxZeroRTRID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 4, 1, 6),
    _Ospf3AreaErrRxZeroRTRID_Type()
)
ospf3AreaErrRxZeroRTRID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaErrRxZeroRTRID.setStatus("current")
_Ospf3AreaErrRxSameRTRID_Type = Counter32
_Ospf3AreaErrRxSameRTRID_Object = MibTableColumn
ospf3AreaErrRxSameRTRID = _Ospf3AreaErrRxSameRTRID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 4, 1, 7),
    _Ospf3AreaErrRxSameRTRID_Type()
)
ospf3AreaErrRxSameRTRID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaErrRxSameRTRID.setStatus("current")
_Ospf3AreaErrRxMismatchInstID_Type = Counter32
_Ospf3AreaErrRxMismatchInstID_Object = MibTableColumn
ospf3AreaErrRxMismatchInstID = _Ospf3AreaErrRxMismatchInstID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 4, 1, 8),
    _Ospf3AreaErrRxMismatchInstID_Type()
)
ospf3AreaErrRxMismatchInstID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaErrRxMismatchInstID.setStatus("current")
_Ospf3AreaErrBadAreaID_Type = Counter32
_Ospf3AreaErrBadAreaID_Object = MibTableColumn
ospf3AreaErrBadAreaID = _Ospf3AreaErrBadAreaID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 4, 1, 9),
    _Ospf3AreaErrBadAreaID_Type()
)
ospf3AreaErrBadAreaID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaErrBadAreaID.setStatus("current")
_Ospf3AreaErrBadDestAddr_Type = Counter32
_Ospf3AreaErrBadDestAddr_Object = MibTableColumn
ospf3AreaErrBadDestAddr = _Ospf3AreaErrBadDestAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 4, 1, 10),
    _Ospf3AreaErrBadDestAddr_Type()
)
ospf3AreaErrBadDestAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaErrBadDestAddr.setStatus("current")
_Ospf3AreaErrBadChecksum_Type = Counter32
_Ospf3AreaErrBadChecksum_Object = MibTableColumn
ospf3AreaErrBadChecksum = _Ospf3AreaErrBadChecksum_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 4, 1, 11),
    _Ospf3AreaErrBadChecksum_Type()
)
ospf3AreaErrBadChecksum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaErrBadChecksum.setStatus("current")
_Ospf3AreaErrBadNeighbour_Type = Counter32
_Ospf3AreaErrBadNeighbour_Object = MibTableColumn
ospf3AreaErrBadNeighbour = _Ospf3AreaErrBadNeighbour_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 4, 1, 12),
    _Ospf3AreaErrBadNeighbour_Type()
)
ospf3AreaErrBadNeighbour.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaErrBadNeighbour.setStatus("current")
_Ospf3AreaErrBadPktType_Type = Counter32
_Ospf3AreaErrBadPktType_Object = MibTableColumn
ospf3AreaErrBadPktType = _Ospf3AreaErrBadPktType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 4, 1, 13),
    _Ospf3AreaErrBadPktType_Type()
)
ospf3AreaErrBadPktType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaErrBadPktType.setStatus("current")
_Ospf3AreaErrHelloMismatch_Type = Counter32
_Ospf3AreaErrHelloMismatch_Object = MibTableColumn
ospf3AreaErrHelloMismatch = _Ospf3AreaErrHelloMismatch_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 4, 1, 14),
    _Ospf3AreaErrHelloMismatch_Type()
)
ospf3AreaErrHelloMismatch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaErrHelloMismatch.setStatus("current")
_Ospf3AreaErrOptionsMismatch_Type = Counter32
_Ospf3AreaErrOptionsMismatch_Object = MibTableColumn
ospf3AreaErrOptionsMismatch = _Ospf3AreaErrOptionsMismatch_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 4, 1, 15),
    _Ospf3AreaErrOptionsMismatch_Type()
)
ospf3AreaErrOptionsMismatch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaErrOptionsMismatch.setStatus("current")
_Ospf3AreaErrDeadMismatch_Type = Counter32
_Ospf3AreaErrDeadMismatch_Object = MibTableColumn
ospf3AreaErrDeadMismatch = _Ospf3AreaErrDeadMismatch_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 4, 1, 16),
    _Ospf3AreaErrDeadMismatch_Type()
)
ospf3AreaErrDeadMismatch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaErrDeadMismatch.setStatus("current")
_Ospf3AreaErrHelloNoNbr_Type = Counter32
_Ospf3AreaErrHelloNoNbr_Object = MibTableColumn
ospf3AreaErrHelloNoNbr = _Ospf3AreaErrHelloNoNbr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 2, 4, 1, 17),
    _Ospf3AreaErrHelloNoNbr_Type()
)
ospf3AreaErrHelloNoNbr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaErrHelloNoNbr.setStatus("current")
_Ospf3Interface_ObjectIdentity = ObjectIdentity
ospf3Interface = _Ospf3Interface_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3)
)
_Ospf3IntfRxTxDisdStats_Object = MibTable
ospf3IntfRxTxDisdStats = _Ospf3IntfRxTxDisdStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 1)
)
if mibBuilder.loadTexts:
    ospf3IntfRxTxDisdStats.setStatus("current")
_Ospf3IntfRxTxDisdStatsEntry_Object = MibTableRow
ospf3IntfRxTxDisdStatsEntry = _Ospf3IntfRxTxDisdStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 1, 1)
)
ospf3IntfRxTxDisdStatsEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospf3IntfRxTxDisdIndex"),
)
if mibBuilder.loadTexts:
    ospf3IntfRxTxDisdStatsEntry.setStatus("current")
_Ospf3IntfRxTxDisdIndex_Type = Integer32
_Ospf3IntfRxTxDisdIndex_Object = MibTableColumn
ospf3IntfRxTxDisdIndex = _Ospf3IntfRxTxDisdIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 1, 1, 1),
    _Ospf3IntfRxTxDisdIndex_Type()
)
ospf3IntfRxTxDisdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfRxTxDisdIndex.setStatus("current")
_Ospf3IntfRxPkts_Type = Counter32
_Ospf3IntfRxPkts_Object = MibTableColumn
ospf3IntfRxPkts = _Ospf3IntfRxPkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 1, 1, 2),
    _Ospf3IntfRxPkts_Type()
)
ospf3IntfRxPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfRxPkts.setStatus("current")
_Ospf3IntfTxPkts_Type = Counter32
_Ospf3IntfTxPkts_Object = MibTableColumn
ospf3IntfTxPkts = _Ospf3IntfTxPkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 1, 1, 3),
    _Ospf3IntfTxPkts_Type()
)
ospf3IntfTxPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfTxPkts.setStatus("current")
_Ospf3IntfDisdPkts_Type = Counter32
_Ospf3IntfDisdPkts_Object = MibTableColumn
ospf3IntfDisdPkts = _Ospf3IntfDisdPkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 1, 1, 4),
    _Ospf3IntfDisdPkts_Type()
)
ospf3IntfDisdPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfDisdPkts.setStatus("current")
_Ospf3IntfRxHello_Type = Counter32
_Ospf3IntfRxHello_Object = MibTableColumn
ospf3IntfRxHello = _Ospf3IntfRxHello_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 1, 1, 5),
    _Ospf3IntfRxHello_Type()
)
ospf3IntfRxHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfRxHello.setStatus("current")
_Ospf3IntfTxHello_Type = Counter32
_Ospf3IntfTxHello_Object = MibTableColumn
ospf3IntfTxHello = _Ospf3IntfTxHello_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 1, 1, 6),
    _Ospf3IntfTxHello_Type()
)
ospf3IntfTxHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfTxHello.setStatus("current")
_Ospf3IntfDisdHello_Type = Counter32
_Ospf3IntfDisdHello_Object = MibTableColumn
ospf3IntfDisdHello = _Ospf3IntfDisdHello_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 1, 1, 7),
    _Ospf3IntfDisdHello_Type()
)
ospf3IntfDisdHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfDisdHello.setStatus("current")
_Ospf3IntfRxDatabase_Type = Counter32
_Ospf3IntfRxDatabase_Object = MibTableColumn
ospf3IntfRxDatabase = _Ospf3IntfRxDatabase_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 1, 1, 8),
    _Ospf3IntfRxDatabase_Type()
)
ospf3IntfRxDatabase.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfRxDatabase.setStatus("current")
_Ospf3IntfTxDatabase_Type = Counter32
_Ospf3IntfTxDatabase_Object = MibTableColumn
ospf3IntfTxDatabase = _Ospf3IntfTxDatabase_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 1, 1, 9),
    _Ospf3IntfTxDatabase_Type()
)
ospf3IntfTxDatabase.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfTxDatabase.setStatus("current")
_Ospf3IntfDisdDatabase_Type = Counter32
_Ospf3IntfDisdDatabase_Object = MibTableColumn
ospf3IntfDisdDatabase = _Ospf3IntfDisdDatabase_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 1, 1, 10),
    _Ospf3IntfDisdDatabase_Type()
)
ospf3IntfDisdDatabase.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfDisdDatabase.setStatus("current")
_Ospf3IntfRxlsReqs_Type = Counter32
_Ospf3IntfRxlsReqs_Object = MibTableColumn
ospf3IntfRxlsReqs = _Ospf3IntfRxlsReqs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 1, 1, 11),
    _Ospf3IntfRxlsReqs_Type()
)
ospf3IntfRxlsReqs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfRxlsReqs.setStatus("current")
_Ospf3IntfTxlsReqs_Type = Counter32
_Ospf3IntfTxlsReqs_Object = MibTableColumn
ospf3IntfTxlsReqs = _Ospf3IntfTxlsReqs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 1, 1, 12),
    _Ospf3IntfTxlsReqs_Type()
)
ospf3IntfTxlsReqs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfTxlsReqs.setStatus("current")
_Ospf3IntfDisdlsReqs_Type = Counter32
_Ospf3IntfDisdlsReqs_Object = MibTableColumn
ospf3IntfDisdlsReqs = _Ospf3IntfDisdlsReqs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 1, 1, 13),
    _Ospf3IntfDisdlsReqs_Type()
)
ospf3IntfDisdlsReqs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfDisdlsReqs.setStatus("current")
_Ospf3IntfRxlsAcks_Type = Counter32
_Ospf3IntfRxlsAcks_Object = MibTableColumn
ospf3IntfRxlsAcks = _Ospf3IntfRxlsAcks_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 1, 1, 14),
    _Ospf3IntfRxlsAcks_Type()
)
ospf3IntfRxlsAcks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfRxlsAcks.setStatus("current")
_Ospf3IntfTxlsAcks_Type = Counter32
_Ospf3IntfTxlsAcks_Object = MibTableColumn
ospf3IntfTxlsAcks = _Ospf3IntfTxlsAcks_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 1, 1, 15),
    _Ospf3IntfTxlsAcks_Type()
)
ospf3IntfTxlsAcks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfTxlsAcks.setStatus("current")
_Ospf3IntfDisdlsAcks_Type = Counter32
_Ospf3IntfDisdlsAcks_Object = MibTableColumn
ospf3IntfDisdlsAcks = _Ospf3IntfDisdlsAcks_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 1, 1, 16),
    _Ospf3IntfDisdlsAcks_Type()
)
ospf3IntfDisdlsAcks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfDisdlsAcks.setStatus("current")
_Ospf3IntfRxlsUpdates_Type = Counter32
_Ospf3IntfRxlsUpdates_Object = MibTableColumn
ospf3IntfRxlsUpdates = _Ospf3IntfRxlsUpdates_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 1, 1, 17),
    _Ospf3IntfRxlsUpdates_Type()
)
ospf3IntfRxlsUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfRxlsUpdates.setStatus("current")
_Ospf3IntfTxlsUpdates_Type = Counter32
_Ospf3IntfTxlsUpdates_Object = MibTableColumn
ospf3IntfTxlsUpdates = _Ospf3IntfTxlsUpdates_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 1, 1, 18),
    _Ospf3IntfTxlsUpdates_Type()
)
ospf3IntfTxlsUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfTxlsUpdates.setStatus("current")
_Ospf3IntfDisdlsUpdates_Type = Counter32
_Ospf3IntfDisdlsUpdates_Object = MibTableColumn
ospf3IntfDisdlsUpdates = _Ospf3IntfDisdlsUpdates_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 1, 1, 19),
    _Ospf3IntfDisdlsUpdates_Type()
)
ospf3IntfDisdlsUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfDisdlsUpdates.setStatus("current")
_Ospf3IntfNbrChangeStats_Object = MibTable
ospf3IntfNbrChangeStats = _Ospf3IntfNbrChangeStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 2)
)
if mibBuilder.loadTexts:
    ospf3IntfNbrChangeStats.setStatus("current")
_Ospf3IntfNbrChangeStatsEntry_Object = MibTableRow
ospf3IntfNbrChangeStatsEntry = _Ospf3IntfNbrChangeStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 2, 1)
)
ospf3IntfNbrChangeStatsEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospf3IntfNbrIndex"),
)
if mibBuilder.loadTexts:
    ospf3IntfNbrChangeStatsEntry.setStatus("current")
_Ospf3IntfNbrIndex_Type = Integer32
_Ospf3IntfNbrIndex_Object = MibTableColumn
ospf3IntfNbrIndex = _Ospf3IntfNbrIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 2, 1, 1),
    _Ospf3IntfNbrIndex_Type()
)
ospf3IntfNbrIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfNbrIndex.setStatus("current")
_Ospf3IntfNbrDown_Type = Counter32
_Ospf3IntfNbrDown_Object = MibTableColumn
ospf3IntfNbrDown = _Ospf3IntfNbrDown_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 2, 1, 2),
    _Ospf3IntfNbrDown_Type()
)
ospf3IntfNbrDown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfNbrDown.setStatus("current")
_Ospf3IntfNbrAttempt_Type = Counter32
_Ospf3IntfNbrAttempt_Object = MibTableColumn
ospf3IntfNbrAttempt = _Ospf3IntfNbrAttempt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 2, 1, 3),
    _Ospf3IntfNbrAttempt_Type()
)
ospf3IntfNbrAttempt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfNbrAttempt.setStatus("current")
_Ospf3IntfNbrInit_Type = Counter32
_Ospf3IntfNbrInit_Object = MibTableColumn
ospf3IntfNbrInit = _Ospf3IntfNbrInit_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 2, 1, 4),
    _Ospf3IntfNbrInit_Type()
)
ospf3IntfNbrInit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfNbrInit.setStatus("current")
_Ospf3IntfNbrN2way_Type = Counter32
_Ospf3IntfNbrN2way_Object = MibTableColumn
ospf3IntfNbrN2way = _Ospf3IntfNbrN2way_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 2, 1, 5),
    _Ospf3IntfNbrN2way_Type()
)
ospf3IntfNbrN2way.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfNbrN2way.setStatus("current")
_Ospf3IntfNbrExStart_Type = Counter32
_Ospf3IntfNbrExStart_Object = MibTableColumn
ospf3IntfNbrExStart = _Ospf3IntfNbrExStart_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 2, 1, 6),
    _Ospf3IntfNbrExStart_Type()
)
ospf3IntfNbrExStart.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfNbrExStart.setStatus("current")
_Ospf3IntfNbrExchange_Type = Counter32
_Ospf3IntfNbrExchange_Object = MibTableColumn
ospf3IntfNbrExchange = _Ospf3IntfNbrExchange_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 2, 1, 7),
    _Ospf3IntfNbrExchange_Type()
)
ospf3IntfNbrExchange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfNbrExchange.setStatus("current")
_Ospf3IntfNbrLoading_Type = Counter32
_Ospf3IntfNbrLoading_Object = MibTableColumn
ospf3IntfNbrLoading = _Ospf3IntfNbrLoading_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 2, 1, 8),
    _Ospf3IntfNbrLoading_Type()
)
ospf3IntfNbrLoading.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfNbrLoading.setStatus("current")
_Ospf3IntfNbrFull_Type = Counter32
_Ospf3IntfNbrFull_Object = MibTableColumn
ospf3IntfNbrFull = _Ospf3IntfNbrFull_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 2, 1, 9),
    _Ospf3IntfNbrFull_Type()
)
ospf3IntfNbrFull.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfNbrFull.setStatus("current")
_Ospf3IntfNbrAllEvents_Type = Counter32
_Ospf3IntfNbrAllEvents_Object = MibTableColumn
ospf3IntfNbrAllEvents = _Ospf3IntfNbrAllEvents_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 2, 1, 10),
    _Ospf3IntfNbrAllEvents_Type()
)
ospf3IntfNbrAllEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfNbrAllEvents.setStatus("current")
_Ospf3IntfChangeStats_Object = MibTable
ospf3IntfChangeStats = _Ospf3IntfChangeStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 3)
)
if mibBuilder.loadTexts:
    ospf3IntfChangeStats.setStatus("current")
_Ospf3IntfChangeStatsEntry_Object = MibTableRow
ospf3IntfChangeStatsEntry = _Ospf3IntfChangeStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 3, 1)
)
ospf3IntfChangeStatsEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospf3IntfIndex"),
)
if mibBuilder.loadTexts:
    ospf3IntfChangeStatsEntry.setStatus("current")
_Ospf3IntfIndex_Type = Integer32
_Ospf3IntfIndex_Object = MibTableColumn
ospf3IntfIndex = _Ospf3IntfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 3, 1, 1),
    _Ospf3IntfIndex_Type()
)
ospf3IntfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfIndex.setStatus("current")
_Ospf3IntfDown_Type = Counter32
_Ospf3IntfDown_Object = MibTableColumn
ospf3IntfDown = _Ospf3IntfDown_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 3, 1, 2),
    _Ospf3IntfDown_Type()
)
ospf3IntfDown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfDown.setStatus("current")
_Ospf3IntfLoop_Type = Counter32
_Ospf3IntfLoop_Object = MibTableColumn
ospf3IntfLoop = _Ospf3IntfLoop_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 3, 1, 3),
    _Ospf3IntfLoop_Type()
)
ospf3IntfLoop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfLoop.setStatus("current")
_Ospf3IntfWaiting_Type = Counter32
_Ospf3IntfWaiting_Object = MibTableColumn
ospf3IntfWaiting = _Ospf3IntfWaiting_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 3, 1, 4),
    _Ospf3IntfWaiting_Type()
)
ospf3IntfWaiting.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfWaiting.setStatus("current")
_Ospf3IntfPtop_Type = Counter32
_Ospf3IntfPtop_Object = MibTableColumn
ospf3IntfPtop = _Ospf3IntfPtop_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 3, 1, 5),
    _Ospf3IntfPtop_Type()
)
ospf3IntfPtop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfPtop.setStatus("current")
_Ospf3IntfDr_Type = Counter32
_Ospf3IntfDr_Object = MibTableColumn
ospf3IntfDr = _Ospf3IntfDr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 3, 1, 6),
    _Ospf3IntfDr_Type()
)
ospf3IntfDr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfDr.setStatus("current")
_Ospf3IntfBackup_Type = Counter32
_Ospf3IntfBackup_Object = MibTableColumn
ospf3IntfBackup = _Ospf3IntfBackup_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 3, 1, 7),
    _Ospf3IntfBackup_Type()
)
ospf3IntfBackup.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfBackup.setStatus("current")
_Ospf3IntfDrOther_Type = Counter32
_Ospf3IntfDrOther_Object = MibTableColumn
ospf3IntfDrOther = _Ospf3IntfDrOther_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 3, 1, 8),
    _Ospf3IntfDrOther_Type()
)
ospf3IntfDrOther.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfDrOther.setStatus("current")
_Ospf3IntfAllEvents_Type = Counter32
_Ospf3IntfAllEvents_Object = MibTableColumn
ospf3IntfAllEvents = _Ospf3IntfAllEvents_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 3, 1, 9),
    _Ospf3IntfAllEvents_Type()
)
ospf3IntfAllEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfAllEvents.setStatus("current")
_Ospf3IntfErrorStats_Object = MibTable
ospf3IntfErrorStats = _Ospf3IntfErrorStats_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 4)
)
if mibBuilder.loadTexts:
    ospf3IntfErrorStats.setStatus("current")
_Ospf3IntfErrorStatsEntry_Object = MibTableRow
ospf3IntfErrorStatsEntry = _Ospf3IntfErrorStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 4, 1)
)
ospf3IntfErrorStatsEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospf3IntfErrIndex"),
)
if mibBuilder.loadTexts:
    ospf3IntfErrorStatsEntry.setStatus("current")
_Ospf3IntfErrIndex_Type = Integer32
_Ospf3IntfErrIndex_Object = MibTableColumn
ospf3IntfErrIndex = _Ospf3IntfErrIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 4, 1, 1),
    _Ospf3IntfErrIndex_Type()
)
ospf3IntfErrIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfErrIndex.setStatus("current")
_Ospf3IntfErrRxOnPasv_Type = Counter32
_Ospf3IntfErrRxOnPasv_Object = MibTableColumn
ospf3IntfErrRxOnPasv = _Ospf3IntfErrRxOnPasv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 4, 1, 2),
    _Ospf3IntfErrRxOnPasv_Type()
)
ospf3IntfErrRxOnPasv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfErrRxOnPasv.setStatus("current")
_Ospf3IntfErrRxOspfOff_Type = Counter32
_Ospf3IntfErrRxOspfOff_Object = MibTableColumn
ospf3IntfErrRxOspfOff = _Ospf3IntfErrRxOspfOff_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 4, 1, 3),
    _Ospf3IntfErrRxOspfOff_Type()
)
ospf3IntfErrRxOspfOff.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfErrRxOspfOff.setStatus("current")
_Ospf3IntfErrRxOnNotup_Type = Counter32
_Ospf3IntfErrRxOnNotup_Object = MibTableColumn
ospf3IntfErrRxOnNotup = _Ospf3IntfErrRxOnNotup_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 4, 1, 4),
    _Ospf3IntfErrRxOnNotup_Type()
)
ospf3IntfErrRxOnNotup.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfErrRxOnNotup.setStatus("current")
_Ospf3IntfErrRxVerMismatch_Type = Counter32
_Ospf3IntfErrRxVerMismatch_Object = MibTableColumn
ospf3IntfErrRxVerMismatch = _Ospf3IntfErrRxVerMismatch_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 4, 1, 5),
    _Ospf3IntfErrRxVerMismatch_Type()
)
ospf3IntfErrRxVerMismatch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfErrRxVerMismatch.setStatus("current")
_Ospf3IntfErrRxZeroRTRID_Type = Counter32
_Ospf3IntfErrRxZeroRTRID_Object = MibTableColumn
ospf3IntfErrRxZeroRTRID = _Ospf3IntfErrRxZeroRTRID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 4, 1, 6),
    _Ospf3IntfErrRxZeroRTRID_Type()
)
ospf3IntfErrRxZeroRTRID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfErrRxZeroRTRID.setStatus("current")
_Ospf3IntfErrRxSameRTRID_Type = Counter32
_Ospf3IntfErrRxSameRTRID_Object = MibTableColumn
ospf3IntfErrRxSameRTRID = _Ospf3IntfErrRxSameRTRID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 4, 1, 7),
    _Ospf3IntfErrRxSameRTRID_Type()
)
ospf3IntfErrRxSameRTRID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfErrRxSameRTRID.setStatus("current")
_Ospf3IntfErrRxMismatchInstID_Type = Counter32
_Ospf3IntfErrRxMismatchInstID_Object = MibTableColumn
ospf3IntfErrRxMismatchInstID = _Ospf3IntfErrRxMismatchInstID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 4, 1, 8),
    _Ospf3IntfErrRxMismatchInstID_Type()
)
ospf3IntfErrRxMismatchInstID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfErrRxMismatchInstID.setStatus("current")
_Ospf3IntfErrBadAreaID_Type = Counter32
_Ospf3IntfErrBadAreaID_Object = MibTableColumn
ospf3IntfErrBadAreaID = _Ospf3IntfErrBadAreaID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 4, 1, 9),
    _Ospf3IntfErrBadAreaID_Type()
)
ospf3IntfErrBadAreaID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfErrBadAreaID.setStatus("current")
_Ospf3IntfErrBadDestAddr_Type = Counter32
_Ospf3IntfErrBadDestAddr_Object = MibTableColumn
ospf3IntfErrBadDestAddr = _Ospf3IntfErrBadDestAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 4, 1, 10),
    _Ospf3IntfErrBadDestAddr_Type()
)
ospf3IntfErrBadDestAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfErrBadDestAddr.setStatus("current")
_Ospf3IntfErrBadChecksum_Type = Counter32
_Ospf3IntfErrBadChecksum_Object = MibTableColumn
ospf3IntfErrBadChecksum = _Ospf3IntfErrBadChecksum_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 4, 1, 11),
    _Ospf3IntfErrBadChecksum_Type()
)
ospf3IntfErrBadChecksum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfErrBadChecksum.setStatus("current")
_Ospf3IntfErrBadNeighbour_Type = Counter32
_Ospf3IntfErrBadNeighbour_Object = MibTableColumn
ospf3IntfErrBadNeighbour = _Ospf3IntfErrBadNeighbour_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 4, 1, 12),
    _Ospf3IntfErrBadNeighbour_Type()
)
ospf3IntfErrBadNeighbour.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfErrBadNeighbour.setStatus("current")
_Ospf3IntfErrBadPktType_Type = Counter32
_Ospf3IntfErrBadPktType_Object = MibTableColumn
ospf3IntfErrBadPktType = _Ospf3IntfErrBadPktType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 4, 1, 13),
    _Ospf3IntfErrBadPktType_Type()
)
ospf3IntfErrBadPktType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfErrBadPktType.setStatus("current")
_Ospf3IntfErrHelloMismatch_Type = Counter32
_Ospf3IntfErrHelloMismatch_Object = MibTableColumn
ospf3IntfErrHelloMismatch = _Ospf3IntfErrHelloMismatch_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 4, 1, 14),
    _Ospf3IntfErrHelloMismatch_Type()
)
ospf3IntfErrHelloMismatch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfErrHelloMismatch.setStatus("current")
_Ospf3IntfErrOptionsMismatch_Type = Counter32
_Ospf3IntfErrOptionsMismatch_Object = MibTableColumn
ospf3IntfErrOptionsMismatch = _Ospf3IntfErrOptionsMismatch_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 4, 1, 15),
    _Ospf3IntfErrOptionsMismatch_Type()
)
ospf3IntfErrOptionsMismatch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfErrOptionsMismatch.setStatus("current")
_Ospf3IntfErrDeadMismatch_Type = Counter32
_Ospf3IntfErrDeadMismatch_Object = MibTableColumn
ospf3IntfErrDeadMismatch = _Ospf3IntfErrDeadMismatch_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 4, 1, 16),
    _Ospf3IntfErrDeadMismatch_Type()
)
ospf3IntfErrDeadMismatch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfErrDeadMismatch.setStatus("current")
_Ospf3IntfErrMTUMismatch_Type = Counter32
_Ospf3IntfErrMTUMismatch_Object = MibTableColumn
ospf3IntfErrMTUMismatch = _Ospf3IntfErrMTUMismatch_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 4, 1, 17),
    _Ospf3IntfErrMTUMismatch_Type()
)
ospf3IntfErrMTUMismatch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfErrMTUMismatch.setStatus("current")
_Ospf3IntfErrHelloNoNbr_Type = Counter32
_Ospf3IntfErrHelloNoNbr_Object = MibTableColumn
ospf3IntfErrHelloNoNbr = _Ospf3IntfErrHelloNoNbr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 22, 3, 4, 1, 18),
    _Ospf3IntfErrHelloNoNbr_Type()
)
ospf3IntfErrHelloNoNbr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfErrHelloNoNbr.setStatus("current")
_MldStats_ObjectIdentity = ObjectIdentity
mldStats = _MldStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23)
)
_MldIfStatsTable_Object = MibTable
mldIfStatsTable = _MldIfStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1)
)
if mibBuilder.loadTexts:
    mldIfStatsTable.setStatus("current")
_MldIfStatsEntry_Object = MibTableRow
mldIfStatsEntry = _MldIfStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1, 1)
)
mldIfStatsEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "mldIfStatsIfIndex"),
)
if mibBuilder.loadTexts:
    mldIfStatsEntry.setStatus("current")
_MldIfStatsIfIndex_Type = Integer32
_MldIfStatsIfIndex_Object = MibTableColumn
mldIfStatsIfIndex = _MldIfStatsIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1, 1, 1),
    _MldIfStatsIfIndex_Type()
)
mldIfStatsIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldIfStatsIfIndex.setStatus("current")
_RxMldIfStatsGeneralQuery_Type = Counter32
_RxMldIfStatsGeneralQuery_Object = MibTableColumn
rxMldIfStatsGeneralQuery = _RxMldIfStatsGeneralQuery_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1, 1, 2),
    _RxMldIfStatsGeneralQuery_Type()
)
rxMldIfStatsGeneralQuery.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxMldIfStatsGeneralQuery.setStatus("current")
_RxMldIfStatsMASQuery_Type = Counter32
_RxMldIfStatsMASQuery_Object = MibTableColumn
rxMldIfStatsMASQuery = _RxMldIfStatsMASQuery_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1, 1, 3),
    _RxMldIfStatsMASQuery_Type()
)
rxMldIfStatsMASQuery.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxMldIfStatsMASQuery.setStatus("current")
_RxMldIfStatsMASSQQuery_Type = Counter32
_RxMldIfStatsMASSQQuery_Object = MibTableColumn
rxMldIfStatsMASSQQuery = _RxMldIfStatsMASSQQuery_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1, 1, 4),
    _RxMldIfStatsMASSQQuery_Type()
)
rxMldIfStatsMASSQQuery.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxMldIfStatsMASSQQuery.setStatus("current")
_RxMldIfStatsMLDv1Report_Type = Counter32
_RxMldIfStatsMLDv1Report_Object = MibTableColumn
rxMldIfStatsMLDv1Report = _RxMldIfStatsMLDv1Report_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1, 1, 5),
    _RxMldIfStatsMLDv1Report_Type()
)
rxMldIfStatsMLDv1Report.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxMldIfStatsMLDv1Report.setStatus("current")
_RxMldIfStatsMLDv1Done_Type = Counter32
_RxMldIfStatsMLDv1Done_Object = MibTableColumn
rxMldIfStatsMLDv1Done = _RxMldIfStatsMLDv1Done_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1, 1, 6),
    _RxMldIfStatsMLDv1Done_Type()
)
rxMldIfStatsMLDv1Done.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxMldIfStatsMLDv1Done.setStatus("current")
_RxMldIfStatsMLDv2Report_Type = Counter32
_RxMldIfStatsMLDv2Report_Object = MibTableColumn
rxMldIfStatsMLDv2Report = _RxMldIfStatsMLDv2Report_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1, 1, 7),
    _RxMldIfStatsMLDv2Report_Type()
)
rxMldIfStatsMLDv2Report.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxMldIfStatsMLDv2Report.setStatus("current")
_RxMldIfStatsIncCrsv2_Type = Counter32
_RxMldIfStatsIncCrsv2_Object = MibTableColumn
rxMldIfStatsIncCrsv2 = _RxMldIfStatsIncCrsv2_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1, 1, 8),
    _RxMldIfStatsIncCrsv2_Type()
)
rxMldIfStatsIncCrsv2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxMldIfStatsIncCrsv2.setStatus("current")
_RxMldIfStatsExcCrsv2_Type = Counter32
_RxMldIfStatsExcCrsv2_Object = MibTableColumn
rxMldIfStatsExcCrsv2 = _RxMldIfStatsExcCrsv2_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1, 1, 9),
    _RxMldIfStatsExcCrsv2_Type()
)
rxMldIfStatsExcCrsv2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxMldIfStatsExcCrsv2.setStatus("current")
_RxMldIfStatsToIncFmcrsv2_Type = Counter32
_RxMldIfStatsToIncFmcrsv2_Object = MibTableColumn
rxMldIfStatsToIncFmcrsv2 = _RxMldIfStatsToIncFmcrsv2_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1, 1, 10),
    _RxMldIfStatsToIncFmcrsv2_Type()
)
rxMldIfStatsToIncFmcrsv2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxMldIfStatsToIncFmcrsv2.setStatus("current")
_RxMldIfStatsToExcFmcrsv2_Type = Counter32
_RxMldIfStatsToExcFmcrsv2_Object = MibTableColumn
rxMldIfStatsToExcFmcrsv2 = _RxMldIfStatsToExcFmcrsv2_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1, 1, 11),
    _RxMldIfStatsToExcFmcrsv2_Type()
)
rxMldIfStatsToExcFmcrsv2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxMldIfStatsToExcFmcrsv2.setStatus("current")
_RxMldIfStatsAllowSlcrsv2_Type = Counter32
_RxMldIfStatsAllowSlcrsv2_Object = MibTableColumn
rxMldIfStatsAllowSlcrsv2 = _RxMldIfStatsAllowSlcrsv2_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1, 1, 12),
    _RxMldIfStatsAllowSlcrsv2_Type()
)
rxMldIfStatsAllowSlcrsv2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxMldIfStatsAllowSlcrsv2.setStatus("current")
_RxMldIfStatsBlockSlcrsv2_Type = Counter32
_RxMldIfStatsBlockSlcrsv2_Object = MibTableColumn
rxMldIfStatsBlockSlcrsv2 = _RxMldIfStatsBlockSlcrsv2_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1, 1, 13),
    _RxMldIfStatsBlockSlcrsv2_Type()
)
rxMldIfStatsBlockSlcrsv2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxMldIfStatsBlockSlcrsv2.setStatus("current")
_TxMldIfStatsGeneralQuery_Type = Counter32
_TxMldIfStatsGeneralQuery_Object = MibTableColumn
txMldIfStatsGeneralQuery = _TxMldIfStatsGeneralQuery_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1, 1, 14),
    _TxMldIfStatsGeneralQuery_Type()
)
txMldIfStatsGeneralQuery.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    txMldIfStatsGeneralQuery.setStatus("current")
_TxMldIfStatsMASQuery_Type = Counter32
_TxMldIfStatsMASQuery_Object = MibTableColumn
txMldIfStatsMASQuery = _TxMldIfStatsMASQuery_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1, 1, 15),
    _TxMldIfStatsMASQuery_Type()
)
txMldIfStatsMASQuery.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    txMldIfStatsMASQuery.setStatus("current")
_TxMldIfStatsMASSQQuery_Type = Counter32
_TxMldIfStatsMASSQQuery_Object = MibTableColumn
txMldIfStatsMASSQQuery = _TxMldIfStatsMASSQQuery_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1, 1, 16),
    _TxMldIfStatsMASSQQuery_Type()
)
txMldIfStatsMASSQQuery.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    txMldIfStatsMASSQQuery.setStatus("current")
_TxMldIfStatsMLDv1Report_Type = Counter32
_TxMldIfStatsMLDv1Report_Object = MibTableColumn
txMldIfStatsMLDv1Report = _TxMldIfStatsMLDv1Report_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1, 1, 17),
    _TxMldIfStatsMLDv1Report_Type()
)
txMldIfStatsMLDv1Report.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    txMldIfStatsMLDv1Report.setStatus("current")
_TxMldIfStatsMLDv1Done_Type = Counter32
_TxMldIfStatsMLDv1Done_Object = MibTableColumn
txMldIfStatsMLDv1Done = _TxMldIfStatsMLDv1Done_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1, 1, 18),
    _TxMldIfStatsMLDv1Done_Type()
)
txMldIfStatsMLDv1Done.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    txMldIfStatsMLDv1Done.setStatus("current")
_TxMldIfStatsMLDv2Report_Type = Counter32
_TxMldIfStatsMLDv2Report_Object = MibTableColumn
txMldIfStatsMLDv2Report = _TxMldIfStatsMLDv2Report_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1, 1, 19),
    _TxMldIfStatsMLDv2Report_Type()
)
txMldIfStatsMLDv2Report.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    txMldIfStatsMLDv2Report.setStatus("current")
_TxMldIfStatsIncCrsv2_Type = Counter32
_TxMldIfStatsIncCrsv2_Object = MibTableColumn
txMldIfStatsIncCrsv2 = _TxMldIfStatsIncCrsv2_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1, 1, 20),
    _TxMldIfStatsIncCrsv2_Type()
)
txMldIfStatsIncCrsv2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    txMldIfStatsIncCrsv2.setStatus("current")
_TxMldIfStatsExcCrsv2_Type = Counter32
_TxMldIfStatsExcCrsv2_Object = MibTableColumn
txMldIfStatsExcCrsv2 = _TxMldIfStatsExcCrsv2_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1, 1, 21),
    _TxMldIfStatsExcCrsv2_Type()
)
txMldIfStatsExcCrsv2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    txMldIfStatsExcCrsv2.setStatus("current")
_TxMldIfStatsToIncFmcrsv2_Type = Counter32
_TxMldIfStatsToIncFmcrsv2_Object = MibTableColumn
txMldIfStatsToIncFmcrsv2 = _TxMldIfStatsToIncFmcrsv2_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1, 1, 22),
    _TxMldIfStatsToIncFmcrsv2_Type()
)
txMldIfStatsToIncFmcrsv2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    txMldIfStatsToIncFmcrsv2.setStatus("current")
_TxMldIfStatsToExcFmcrsv2_Type = Counter32
_TxMldIfStatsToExcFmcrsv2_Object = MibTableColumn
txMldIfStatsToExcFmcrsv2 = _TxMldIfStatsToExcFmcrsv2_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1, 1, 23),
    _TxMldIfStatsToExcFmcrsv2_Type()
)
txMldIfStatsToExcFmcrsv2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    txMldIfStatsToExcFmcrsv2.setStatus("current")
_TxMldIfStatsAllowSlcrsv2_Type = Counter32
_TxMldIfStatsAllowSlcrsv2_Object = MibTableColumn
txMldIfStatsAllowSlcrsv2 = _TxMldIfStatsAllowSlcrsv2_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1, 1, 24),
    _TxMldIfStatsAllowSlcrsv2_Type()
)
txMldIfStatsAllowSlcrsv2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    txMldIfStatsAllowSlcrsv2.setStatus("current")
_TxMldIfStatsBlockSlcrsv2_Type = Counter32
_TxMldIfStatsBlockSlcrsv2_Object = MibTableColumn
txMldIfStatsBlockSlcrsv2 = _TxMldIfStatsBlockSlcrsv2_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1, 1, 25),
    _TxMldIfStatsBlockSlcrsv2_Type()
)
txMldIfStatsBlockSlcrsv2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    txMldIfStatsBlockSlcrsv2.setStatus("current")
_ErrMldIfStatsGeneralQuery_Type = Counter32
_ErrMldIfStatsGeneralQuery_Object = MibTableColumn
errMldIfStatsGeneralQuery = _ErrMldIfStatsGeneralQuery_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1, 1, 27),
    _ErrMldIfStatsGeneralQuery_Type()
)
errMldIfStatsGeneralQuery.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    errMldIfStatsGeneralQuery.setStatus("current")
_ErrMldIfStatsMASQuery_Type = Counter32
_ErrMldIfStatsMASQuery_Object = MibTableColumn
errMldIfStatsMASQuery = _ErrMldIfStatsMASQuery_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1, 1, 28),
    _ErrMldIfStatsMASQuery_Type()
)
errMldIfStatsMASQuery.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    errMldIfStatsMASQuery.setStatus("current")
_ErrMldIfStatsMASSQQuery_Type = Counter32
_ErrMldIfStatsMASSQQuery_Object = MibTableColumn
errMldIfStatsMASSQQuery = _ErrMldIfStatsMASSQQuery_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1, 1, 29),
    _ErrMldIfStatsMASSQQuery_Type()
)
errMldIfStatsMASSQQuery.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    errMldIfStatsMASSQQuery.setStatus("current")
_ErrMldIfStatsMLDv1Report_Type = Counter32
_ErrMldIfStatsMLDv1Report_Object = MibTableColumn
errMldIfStatsMLDv1Report = _ErrMldIfStatsMLDv1Report_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1, 1, 30),
    _ErrMldIfStatsMLDv1Report_Type()
)
errMldIfStatsMLDv1Report.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    errMldIfStatsMLDv1Report.setStatus("current")
_ErrMldIfStatsMLDv1Done_Type = Counter32
_ErrMldIfStatsMLDv1Done_Object = MibTableColumn
errMldIfStatsMLDv1Done = _ErrMldIfStatsMLDv1Done_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1, 1, 31),
    _ErrMldIfStatsMLDv1Done_Type()
)
errMldIfStatsMLDv1Done.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    errMldIfStatsMLDv1Done.setStatus("current")
_ErrMldIfStatsMLDv2Report_Type = Counter32
_ErrMldIfStatsMLDv2Report_Object = MibTableColumn
errMldIfStatsMLDv2Report = _ErrMldIfStatsMLDv2Report_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1, 1, 32),
    _ErrMldIfStatsMLDv2Report_Type()
)
errMldIfStatsMLDv2Report.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    errMldIfStatsMLDv2Report.setStatus("current")
_ErrMldIfStatsIncCrsv2_Type = Counter32
_ErrMldIfStatsIncCrsv2_Object = MibTableColumn
errMldIfStatsIncCrsv2 = _ErrMldIfStatsIncCrsv2_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1, 1, 33),
    _ErrMldIfStatsIncCrsv2_Type()
)
errMldIfStatsIncCrsv2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    errMldIfStatsIncCrsv2.setStatus("current")
_ErrMldIfStatsExcCrsv2_Type = Counter32
_ErrMldIfStatsExcCrsv2_Object = MibTableColumn
errMldIfStatsExcCrsv2 = _ErrMldIfStatsExcCrsv2_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1, 1, 34),
    _ErrMldIfStatsExcCrsv2_Type()
)
errMldIfStatsExcCrsv2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    errMldIfStatsExcCrsv2.setStatus("current")
_ErrMldIfStatsToIncFmcrsv2_Type = Counter32
_ErrMldIfStatsToIncFmcrsv2_Object = MibTableColumn
errMldIfStatsToIncFmcrsv2 = _ErrMldIfStatsToIncFmcrsv2_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1, 1, 35),
    _ErrMldIfStatsToIncFmcrsv2_Type()
)
errMldIfStatsToIncFmcrsv2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    errMldIfStatsToIncFmcrsv2.setStatus("current")
_ErrMldIfStatsToExcFmcrsv2_Type = Counter32
_ErrMldIfStatsToExcFmcrsv2_Object = MibTableColumn
errMldIfStatsToExcFmcrsv2 = _ErrMldIfStatsToExcFmcrsv2_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1, 1, 36),
    _ErrMldIfStatsToExcFmcrsv2_Type()
)
errMldIfStatsToExcFmcrsv2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    errMldIfStatsToExcFmcrsv2.setStatus("current")
_ErrMldIfStatsAllowSlcrsv2_Type = Counter32
_ErrMldIfStatsAllowSlcrsv2_Object = MibTableColumn
errMldIfStatsAllowSlcrsv2 = _ErrMldIfStatsAllowSlcrsv2_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1, 1, 37),
    _ErrMldIfStatsAllowSlcrsv2_Type()
)
errMldIfStatsAllowSlcrsv2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    errMldIfStatsAllowSlcrsv2.setStatus("current")
_ErrMldIfStatsBlockSlcrsv2_Type = Counter32
_ErrMldIfStatsBlockSlcrsv2_Object = MibTableColumn
errMldIfStatsBlockSlcrsv2 = _ErrMldIfStatsBlockSlcrsv2_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 1, 1, 38),
    _ErrMldIfStatsBlockSlcrsv2_Type()
)
errMldIfStatsBlockSlcrsv2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    errMldIfStatsBlockSlcrsv2.setStatus("current")
_MldStatBadLength_Type = Counter32
_MldStatBadLength_Object = MibScalar
mldStatBadLength = _MldStatBadLength_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 2),
    _MldStatBadLength_Type()
)
mldStatBadLength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldStatBadLength.setStatus("current")
_MldStatBadChecksum_Type = Counter32
_MldStatBadChecksum_Object = MibScalar
mldStatBadChecksum = _MldStatBadChecksum_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 3),
    _MldStatBadChecksum_Type()
)
mldStatBadChecksum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldStatBadChecksum.setStatus("current")
_MldStatBadReceiveIf_Type = Counter32
_MldStatBadReceiveIf_Object = MibScalar
mldStatBadReceiveIf = _MldStatBadReceiveIf_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 4),
    _MldStatBadReceiveIf_Type()
)
mldStatBadReceiveIf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldStatBadReceiveIf.setStatus("current")
_MldStatReceiveNonLocal_Type = Counter32
_MldStatReceiveNonLocal_Object = MibScalar
mldStatReceiveNonLocal = _MldStatReceiveNonLocal_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 5),
    _MldStatReceiveNonLocal_Type()
)
mldStatReceiveNonLocal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldStatReceiveNonLocal.setStatus("current")
_MldStatInvalidPkts_Type = Counter32
_MldStatInvalidPkts_Object = MibScalar
mldStatInvalidPkts = _MldStatInvalidPkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 6),
    _MldStatInvalidPkts_Type()
)
mldStatInvalidPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldStatInvalidPkts.setStatus("current")
_MldStatTotalL3Ipv6SgvEntries_Type = Counter32
_MldStatTotalL3Ipv6SgvEntries_Object = MibScalar
mldStatTotalL3Ipv6SgvEntries = _MldStatTotalL3Ipv6SgvEntries_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 7),
    _MldStatTotalL3Ipv6SgvEntries_Type()
)
mldStatTotalL3Ipv6SgvEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldStatTotalL3Ipv6SgvEntries.setStatus("current")
_MldStatTotalMLDGroups_Type = Counter32
_MldStatTotalMLDGroups_Object = MibScalar
mldStatTotalMLDGroups = _MldStatTotalMLDGroups_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 8),
    _MldStatTotalMLDGroups_Type()
)
mldStatTotalMLDGroups.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldStatTotalMLDGroups.setStatus("current")


class _MldStatClearAll_Type(Integer32):
    """Custom type mldStatClearAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("clear", 2))
    )


_MldStatClearAll_Type.__name__ = "Integer32"
_MldStatClearAll_Object = MibScalar
mldStatClearAll = _MldStatClearAll_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 23, 9),
    _MldStatClearAll_Type()
)
mldStatClearAll.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mldStatClearAll.setStatus("current")
_IpsecStats_ObjectIdentity = ObjectIdentity
ipsecStats = _IpsecStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 24)
)
_IpsecSaStatsTable_Object = MibTable
ipsecSaStatsTable = _IpsecSaStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 24, 1)
)
if mibBuilder.loadTexts:
    ipsecSaStatsTable.setStatus("current")
_IpsecSaStatsEntry_Object = MibTableRow
ipsecSaStatsEntry = _IpsecSaStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 24, 1, 1)
)
ipsecSaStatsEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipsecSaStatsIndex"),
)
if mibBuilder.loadTexts:
    ipsecSaStatsEntry.setStatus("current")
_IpsecSaStatsIndex_Type = Unsigned32
_IpsecSaStatsIndex_Object = MibTableColumn
ipsecSaStatsIndex = _IpsecSaStatsIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 24, 1, 1, 1),
    _IpsecSaStatsIndex_Type()
)
ipsecSaStatsIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecSaStatsIndex.setStatus("current")
_IpsecSaStatsSpi_Type = Unsigned32
_IpsecSaStatsSpi_Object = MibTableColumn
ipsecSaStatsSpi = _IpsecSaStatsSpi_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 24, 1, 1, 2),
    _IpsecSaStatsSpi_Type()
)
ipsecSaStatsSpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecSaStatsSpi.setStatus("current")


class _IpsecSaStatsProto_Type(Integer32):
    """Custom type ipsecSaStatsProto based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("any", 0),
          ("ah", 1),
          ("esp", 2))
    )


_IpsecSaStatsProto_Type.__name__ = "Integer32"
_IpsecSaStatsProto_Object = MibTableColumn
ipsecSaStatsProto = _IpsecSaStatsProto_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 24, 1, 1, 3),
    _IpsecSaStatsProto_Type()
)
ipsecSaStatsProto.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecSaStatsProto.setStatus("current")


class _IpsecSaStatsDstAddr_Type(OctetString):
    """Custom type ipsecSaStatsDstAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(16, 16),
    )
    fixed_length = 16


_IpsecSaStatsDstAddr_Type.__name__ = "OctetString"
_IpsecSaStatsDstAddr_Object = MibTableColumn
ipsecSaStatsDstAddr = _IpsecSaStatsDstAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 24, 1, 1, 4),
    _IpsecSaStatsDstAddr_Type()
)
ipsecSaStatsDstAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecSaStatsDstAddr.setStatus("current")
_IpsecSaStatsUsageTime_Type = Unsigned32
_IpsecSaStatsUsageTime_Object = MibTableColumn
ipsecSaStatsUsageTime = _IpsecSaStatsUsageTime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 24, 1, 1, 5),
    _IpsecSaStatsUsageTime_Type()
)
ipsecSaStatsUsageTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecSaStatsUsageTime.setStatus("current")
_IpsecSaStatsBytes_Type = Unsigned32
_IpsecSaStatsBytes_Object = MibTableColumn
ipsecSaStatsBytes = _IpsecSaStatsBytes_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 24, 1, 1, 6),
    _IpsecSaStatsBytes_Type()
)
ipsecSaStatsBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecSaStatsBytes.setStatus("current")
_IpsecSaStatsPkts_Type = Unsigned32
_IpsecSaStatsPkts_Object = MibTableColumn
ipsecSaStatsPkts = _IpsecSaStatsPkts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 24, 1, 1, 7),
    _IpsecSaStatsPkts_Type()
)
ipsecSaStatsPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecSaStatsPkts.setStatus("current")
_DhcpsnpStats_ObjectIdentity = ObjectIdentity
dhcpsnpStats = _DhcpsnpStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 25)
)
_DhcpSnoopingStatInPacketRequest_Type = Integer32
_DhcpSnoopingStatInPacketRequest_Object = MibScalar
dhcpSnoopingStatInPacketRequest = _DhcpSnoopingStatInPacketRequest_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 25, 1),
    _DhcpSnoopingStatInPacketRequest_Type()
)
dhcpSnoopingStatInPacketRequest.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopingStatInPacketRequest.setStatus("current")
_DhcpSnoopingStatInPacketReply_Type = Integer32
_DhcpSnoopingStatInPacketReply_Object = MibScalar
dhcpSnoopingStatInPacketReply = _DhcpSnoopingStatInPacketReply_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 25, 2),
    _DhcpSnoopingStatInPacketReply_Type()
)
dhcpSnoopingStatInPacketReply.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopingStatInPacketReply.setStatus("current")
_DhcpSnoopingStatDroppedPacketInvalid_Type = Integer32
_DhcpSnoopingStatDroppedPacketInvalid_Object = MibScalar
dhcpSnoopingStatDroppedPacketInvalid = _DhcpSnoopingStatDroppedPacketInvalid_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 25, 3),
    _DhcpSnoopingStatDroppedPacketInvalid_Type()
)
dhcpSnoopingStatDroppedPacketInvalid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopingStatDroppedPacketInvalid.setStatus("current")
_DhcpSnoopingStatDroppedPacketRateLimit_Type = Integer32
_DhcpSnoopingStatDroppedPacketRateLimit_Object = MibScalar
dhcpSnoopingStatDroppedPacketRateLimit = _DhcpSnoopingStatDroppedPacketRateLimit_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 25, 4),
    _DhcpSnoopingStatDroppedPacketRateLimit_Type()
)
dhcpSnoopingStatDroppedPacketRateLimit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopingStatDroppedPacketRateLimit.setStatus("current")
_DhcpSnoopingStatDroppedPacketOther_Type = Integer32
_DhcpSnoopingStatDroppedPacketOther_Object = MibScalar
dhcpSnoopingStatDroppedPacketOther = _DhcpSnoopingStatDroppedPacketOther_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 25, 5),
    _DhcpSnoopingStatDroppedPacketOther_Type()
)
dhcpSnoopingStatDroppedPacketOther.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopingStatDroppedPacketOther.setStatus("current")
_NbrStats_ObjectIdentity = ObjectIdentity
nbrStats = _NbrStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 26)
)
_NbrStatEntries_Type = Gauge32
_NbrStatEntries_Object = MibScalar
nbrStatEntries = _NbrStatEntries_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 26, 1),
    _NbrStatEntries_Type()
)
nbrStatEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nbrStatEntries.setStatus("current")
_NbrStatHighWater_Type = Integer32
_NbrStatHighWater_Object = MibScalar
nbrStatHighWater = _NbrStatHighWater_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 26, 2),
    _NbrStatHighWater_Type()
)
nbrStatHighWater.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nbrStatHighWater.setStatus("current")
_NbrStatMaxEntries_Type = Integer32
_NbrStatMaxEntries_Object = MibScalar
nbrStatMaxEntries = _NbrStatMaxEntries_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 2, 26, 3),
    _NbrStatMaxEntries_Type()
)
nbrStatMaxEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nbrStatMaxEntries.setStatus("current")
_Layer3Info_ObjectIdentity = ObjectIdentity
layer3Info = _Layer3Info_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3)
)
_IpRoutingInfo_ObjectIdentity = ObjectIdentity
ipRoutingInfo = _IpRoutingInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 1)
)
_IpDataRouteInfoTable_Object = MibTable
ipDataRouteInfoTable = _IpDataRouteInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 1, 1)
)
if mibBuilder.loadTexts:
    ipDataRouteInfoTable.setStatus("current")
_IpDataRouteInfoEntry_Object = MibTableRow
ipDataRouteInfoEntry = _IpDataRouteInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 1, 1, 1)
)
ipDataRouteInfoEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipDataRouteInfoIndx"),
)
if mibBuilder.loadTexts:
    ipDataRouteInfoEntry.setStatus("current")
_IpDataRouteInfoIndx_Type = Integer32
_IpDataRouteInfoIndx_Object = MibTableColumn
ipDataRouteInfoIndx = _IpDataRouteInfoIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 1, 1, 1, 1),
    _IpDataRouteInfoIndx_Type()
)
ipDataRouteInfoIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipDataRouteInfoIndx.setStatus("current")
_IpDataRouteInfoDestIp_Type = IpAddress
_IpDataRouteInfoDestIp_Object = MibTableColumn
ipDataRouteInfoDestIp = _IpDataRouteInfoDestIp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 1, 1, 1, 2),
    _IpDataRouteInfoDestIp_Type()
)
ipDataRouteInfoDestIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipDataRouteInfoDestIp.setStatus("current")
_IpDataRouteInfoMask_Type = IpAddress
_IpDataRouteInfoMask_Object = MibTableColumn
ipDataRouteInfoMask = _IpDataRouteInfoMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 1, 1, 1, 3),
    _IpDataRouteInfoMask_Type()
)
ipDataRouteInfoMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipDataRouteInfoMask.setStatus("current")
_IpDataRouteInfoGateway_Type = IpAddress
_IpDataRouteInfoGateway_Object = MibTableColumn
ipDataRouteInfoGateway = _IpDataRouteInfoGateway_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 1, 1, 1, 4),
    _IpDataRouteInfoGateway_Type()
)
ipDataRouteInfoGateway.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipDataRouteInfoGateway.setStatus("current")


class _IpDataRouteInfoTag_Type(Integer32):
    """Custom type ipDataRouteInfoTag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("fixed", 1),
          ("static", 2),
          ("addr", 3),
          ("rip", 4),
          ("broadcast", 5),
          ("martian", 6),
          ("multicast", 7),
          ("vip", 8),
          ("bgp", 9),
          ("ospf", 10),
          ("none", 11))
    )


_IpDataRouteInfoTag_Type.__name__ = "Integer32"
_IpDataRouteInfoTag_Object = MibTableColumn
ipDataRouteInfoTag = _IpDataRouteInfoTag_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 1, 1, 1, 5),
    _IpDataRouteInfoTag_Type()
)
ipDataRouteInfoTag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipDataRouteInfoTag.setStatus("current")


class _IpDataRouteInfoType_Type(Integer32):
    """Custom type ipDataRouteInfoType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("indirect", 1),
          ("direct", 2),
          ("local", 3),
          ("broadcast", 4),
          ("martian", 5),
          ("multicast", 6),
          ("other", 7))
    )


_IpDataRouteInfoType_Type.__name__ = "Integer32"
_IpDataRouteInfoType_Object = MibTableColumn
ipDataRouteInfoType = _IpDataRouteInfoType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 1, 1, 1, 6),
    _IpDataRouteInfoType_Type()
)
ipDataRouteInfoType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipDataRouteInfoType.setStatus("current")
_IpDataRouteInfoInterface_Type = Integer32
_IpDataRouteInfoInterface_Object = MibTableColumn
ipDataRouteInfoInterface = _IpDataRouteInfoInterface_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 1, 1, 1, 7),
    _IpDataRouteInfoInterface_Type()
)
ipDataRouteInfoInterface.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipDataRouteInfoInterface.setStatus("current")
_IpDataRouteInfoGateway1_Type = IpAddress
_IpDataRouteInfoGateway1_Object = MibTableColumn
ipDataRouteInfoGateway1 = _IpDataRouteInfoGateway1_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 1, 1, 1, 8),
    _IpDataRouteInfoGateway1_Type()
)
ipDataRouteInfoGateway1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipDataRouteInfoGateway1.setStatus("current")
_IpDataRouteInfoGateway2_Type = IpAddress
_IpDataRouteInfoGateway2_Object = MibTableColumn
ipDataRouteInfoGateway2 = _IpDataRouteInfoGateway2_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 1, 1, 1, 9),
    _IpDataRouteInfoGateway2_Type()
)
ipDataRouteInfoGateway2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipDataRouteInfoGateway2.setStatus("current")
_IpDataRouteInfoMetric_Type = Integer32
_IpDataRouteInfoMetric_Object = MibTableColumn
ipDataRouteInfoMetric = _IpDataRouteInfoMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 1, 1, 1, 10),
    _IpDataRouteInfoMetric_Type()
)
ipDataRouteInfoMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipDataRouteInfoMetric.setStatus("current")


class _RouteTableClear_Type(Integer32):
    """Custom type routeTableClear based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_RouteTableClear_Type.__name__ = "Integer32"
_RouteTableClear_Object = MibScalar
routeTableClear = _RouteTableClear_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 1, 2),
    _RouteTableClear_Type()
)
routeTableClear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    routeTableClear.setStatus("current")
_IpMgmtRouteInfoTable_Object = MibTable
ipMgmtRouteInfoTable = _IpMgmtRouteInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 1, 3)
)
if mibBuilder.loadTexts:
    ipMgmtRouteInfoTable.setStatus("current")
_IpMgmtRouteInfoEntry_Object = MibTableRow
ipMgmtRouteInfoEntry = _IpMgmtRouteInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 1, 3, 1)
)
ipMgmtRouteInfoEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipMgmtRouteInfoIndx"),
)
if mibBuilder.loadTexts:
    ipMgmtRouteInfoEntry.setStatus("current")
_IpMgmtRouteInfoIndx_Type = Integer32
_IpMgmtRouteInfoIndx_Object = MibTableColumn
ipMgmtRouteInfoIndx = _IpMgmtRouteInfoIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 1, 3, 1, 1),
    _IpMgmtRouteInfoIndx_Type()
)
ipMgmtRouteInfoIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipMgmtRouteInfoIndx.setStatus("current")
_IpMgmtRouteInfoDestIp_Type = IpAddress
_IpMgmtRouteInfoDestIp_Object = MibTableColumn
ipMgmtRouteInfoDestIp = _IpMgmtRouteInfoDestIp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 1, 3, 1, 2),
    _IpMgmtRouteInfoDestIp_Type()
)
ipMgmtRouteInfoDestIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipMgmtRouteInfoDestIp.setStatus("current")
_IpMgmtRouteInfoMask_Type = IpAddress
_IpMgmtRouteInfoMask_Object = MibTableColumn
ipMgmtRouteInfoMask = _IpMgmtRouteInfoMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 1, 3, 1, 3),
    _IpMgmtRouteInfoMask_Type()
)
ipMgmtRouteInfoMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipMgmtRouteInfoMask.setStatus("current")
_IpMgmtRouteInfoGateway_Type = IpAddress
_IpMgmtRouteInfoGateway_Object = MibTableColumn
ipMgmtRouteInfoGateway = _IpMgmtRouteInfoGateway_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 1, 3, 1, 4),
    _IpMgmtRouteInfoGateway_Type()
)
ipMgmtRouteInfoGateway.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipMgmtRouteInfoGateway.setStatus("current")


class _IpMgmtRouteInfoTag_Type(Integer32):
    """Custom type ipMgmtRouteInfoTag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("fixed", 1),
          ("static", 2),
          ("addr", 3),
          ("rip", 4),
          ("broadcast", 5),
          ("martian", 6),
          ("multicast", 7),
          ("vip", 8),
          ("bgp", 9),
          ("ospf", 10),
          ("none", 11))
    )


_IpMgmtRouteInfoTag_Type.__name__ = "Integer32"
_IpMgmtRouteInfoTag_Object = MibTableColumn
ipMgmtRouteInfoTag = _IpMgmtRouteInfoTag_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 1, 3, 1, 5),
    _IpMgmtRouteInfoTag_Type()
)
ipMgmtRouteInfoTag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipMgmtRouteInfoTag.setStatus("current")


class _IpMgmtRouteInfoType_Type(Integer32):
    """Custom type ipMgmtRouteInfoType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("indirect", 1),
          ("direct", 2),
          ("local", 3),
          ("broadcast", 4),
          ("martian", 5),
          ("multicast", 6),
          ("other", 7))
    )


_IpMgmtRouteInfoType_Type.__name__ = "Integer32"
_IpMgmtRouteInfoType_Object = MibTableColumn
ipMgmtRouteInfoType = _IpMgmtRouteInfoType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 1, 3, 1, 6),
    _IpMgmtRouteInfoType_Type()
)
ipMgmtRouteInfoType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipMgmtRouteInfoType.setStatus("current")
_IpMgmtRouteInfoInterface_Type = Integer32
_IpMgmtRouteInfoInterface_Object = MibTableColumn
ipMgmtRouteInfoInterface = _IpMgmtRouteInfoInterface_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 1, 3, 1, 7),
    _IpMgmtRouteInfoInterface_Type()
)
ipMgmtRouteInfoInterface.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipMgmtRouteInfoInterface.setStatus("current")
_IpMgmtRouteInfoGateway1_Type = IpAddress
_IpMgmtRouteInfoGateway1_Object = MibTableColumn
ipMgmtRouteInfoGateway1 = _IpMgmtRouteInfoGateway1_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 1, 3, 1, 8),
    _IpMgmtRouteInfoGateway1_Type()
)
ipMgmtRouteInfoGateway1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipMgmtRouteInfoGateway1.setStatus("current")
_IpMgmtRouteInfoGateway2_Type = IpAddress
_IpMgmtRouteInfoGateway2_Object = MibTableColumn
ipMgmtRouteInfoGateway2 = _IpMgmtRouteInfoGateway2_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 1, 3, 1, 9),
    _IpMgmtRouteInfoGateway2_Type()
)
ipMgmtRouteInfoGateway2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipMgmtRouteInfoGateway2.setStatus("current")
_IpMgmtRouteInfoMetric_Type = Integer32
_IpMgmtRouteInfoMetric_Object = MibTableColumn
ipMgmtRouteInfoMetric = _IpMgmtRouteInfoMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 1, 3, 1, 10),
    _IpMgmtRouteInfoMetric_Type()
)
ipMgmtRouteInfoMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipMgmtRouteInfoMetric.setStatus("current")
_ArpInfo_ObjectIdentity = ObjectIdentity
arpInfo = _ArpInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 2)
)
_ArpInfoTable_Object = MibTable
arpInfoTable = _ArpInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 2, 1)
)
if mibBuilder.loadTexts:
    arpInfoTable.setStatus("current")
_ArpInfoEntry_Object = MibTableRow
arpInfoEntry = _ArpInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 2, 1, 1)
)
arpInfoEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "arpInfoDestIp"),
)
if mibBuilder.loadTexts:
    arpInfoEntry.setStatus("current")
_ArpInfoDestIp_Type = IpAddress
_ArpInfoDestIp_Object = MibTableColumn
arpInfoDestIp = _ArpInfoDestIp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 2, 1, 1, 1),
    _ArpInfoDestIp_Type()
)
arpInfoDestIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    arpInfoDestIp.setStatus("current")
_ArpInfoMacAddr_Type = PhysAddress
_ArpInfoMacAddr_Object = MibTableColumn
arpInfoMacAddr = _ArpInfoMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 2, 1, 1, 2),
    _ArpInfoMacAddr_Type()
)
arpInfoMacAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    arpInfoMacAddr.setStatus("current")
_ArpInfoVLAN_Type = Integer32
_ArpInfoVLAN_Object = MibTableColumn
arpInfoVLAN = _ArpInfoVLAN_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 2, 1, 1, 3),
    _ArpInfoVLAN_Type()
)
arpInfoVLAN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    arpInfoVLAN.setStatus("current")
_ArpInfoSrcPort_Type = PortNumber
_ArpInfoSrcPort_Object = MibTableColumn
arpInfoSrcPort = _ArpInfoSrcPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 2, 1, 1, 4),
    _ArpInfoSrcPort_Type()
)
arpInfoSrcPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    arpInfoSrcPort.setStatus("current")


class _ArpInfoFlag_Type(Integer32):
    """Custom type arpInfoFlag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("unresolved", 2),
          ("permanent", 3),
          ("indirect", 4),
          ("layer4", 5))
    )


_ArpInfoFlag_Type.__name__ = "Integer32"
_ArpInfoFlag_Object = MibTableColumn
arpInfoFlag = _ArpInfoFlag_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 2, 1, 1, 6),
    _ArpInfoFlag_Type()
)
arpInfoFlag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    arpInfoFlag.setStatus("current")


class _ArpCacheClear_Type(Integer32):
    """Custom type arpCacheClear based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_ArpCacheClear_Type.__name__ = "Integer32"
_ArpCacheClear_Object = MibScalar
arpCacheClear = _ArpCacheClear_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 2, 2),
    _ArpCacheClear_Type()
)
arpCacheClear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    arpCacheClear.setStatus("current")
_VrrpInfo_ObjectIdentity = ObjectIdentity
vrrpInfo = _VrrpInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 3)
)
_VrrpInfoVirtRtrTable_Object = MibTable
vrrpInfoVirtRtrTable = _VrrpInfoVirtRtrTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 3, 1)
)
if mibBuilder.loadTexts:
    vrrpInfoVirtRtrTable.setStatus("current")
_VrrpInfoVirtRtrTableEntry_Object = MibTableRow
vrrpInfoVirtRtrTableEntry = _VrrpInfoVirtRtrTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 3, 1, 1)
)
vrrpInfoVirtRtrTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vrrpInfoVirtRtrIndex"),
)
if mibBuilder.loadTexts:
    vrrpInfoVirtRtrTableEntry.setStatus("current")
_VrrpInfoVirtRtrIndex_Type = Integer32
_VrrpInfoVirtRtrIndex_Object = MibTableColumn
vrrpInfoVirtRtrIndex = _VrrpInfoVirtRtrIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 3, 1, 1, 1),
    _VrrpInfoVirtRtrIndex_Type()
)
vrrpInfoVirtRtrIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpInfoVirtRtrIndex.setStatus("current")


class _VrrpInfoVirtRtrState_Type(Integer32):
    """Custom type vrrpInfoVirtRtrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("init", 1),
          ("master", 2),
          ("backup", 3),
          ("holdoff", 4))
    )


_VrrpInfoVirtRtrState_Type.__name__ = "Integer32"
_VrrpInfoVirtRtrState_Object = MibTableColumn
vrrpInfoVirtRtrState = _VrrpInfoVirtRtrState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 3, 1, 1, 2),
    _VrrpInfoVirtRtrState_Type()
)
vrrpInfoVirtRtrState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpInfoVirtRtrState.setStatus("current")


class _VrrpInfoVirtRtrOwnership_Type(Integer32):
    """Custom type vrrpInfoVirtRtrOwnership based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("owner", 1),
          ("renter", 2))
    )


_VrrpInfoVirtRtrOwnership_Type.__name__ = "Integer32"
_VrrpInfoVirtRtrOwnership_Object = MibTableColumn
vrrpInfoVirtRtrOwnership = _VrrpInfoVirtRtrOwnership_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 3, 1, 1, 3),
    _VrrpInfoVirtRtrOwnership_Type()
)
vrrpInfoVirtRtrOwnership.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpInfoVirtRtrOwnership.setStatus("current")


class _VrrpInfoVirtRtrConfig_Type(Integer32):
    """Custom type vrrpInfoVirtRtrConfig based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpInfoVirtRtrConfig_Type.__name__ = "Integer32"
_VrrpInfoVirtRtrConfig_Object = MibTableColumn
vrrpInfoVirtRtrConfig = _VrrpInfoVirtRtrConfig_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 3, 1, 1, 4),
    _VrrpInfoVirtRtrConfig_Type()
)
vrrpInfoVirtRtrConfig.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpInfoVirtRtrConfig.setStatus("current")


class _VrrpInfoVirtRtrID_Type(Integer32):
    """Custom type vrrpInfoVirtRtrID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_VrrpInfoVirtRtrID_Type.__name__ = "Integer32"
_VrrpInfoVirtRtrID_Object = MibTableColumn
vrrpInfoVirtRtrID = _VrrpInfoVirtRtrID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 3, 1, 1, 5),
    _VrrpInfoVirtRtrID_Type()
)
vrrpInfoVirtRtrID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpInfoVirtRtrID.setStatus("current")
_VrrpInfoVirtRtrAddr_Type = IpAddress
_VrrpInfoVirtRtrAddr_Object = MibTableColumn
vrrpInfoVirtRtrAddr = _VrrpInfoVirtRtrAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 3, 1, 1, 6),
    _VrrpInfoVirtRtrAddr_Type()
)
vrrpInfoVirtRtrAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpInfoVirtRtrAddr.setStatus("current")
_VrrpInfoVirtRtrIfIndex_Type = Integer32
_VrrpInfoVirtRtrIfIndex_Object = MibTableColumn
vrrpInfoVirtRtrIfIndex = _VrrpInfoVirtRtrIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 3, 1, 1, 7),
    _VrrpInfoVirtRtrIfIndex_Type()
)
vrrpInfoVirtRtrIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpInfoVirtRtrIfIndex.setStatus("current")


class _VrrpInfoVirtRtrPriority_Type(Integer32):
    """Custom type vrrpInfoVirtRtrPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 254),
    )


_VrrpInfoVirtRtrPriority_Type.__name__ = "Integer32"
_VrrpInfoVirtRtrPriority_Object = MibTableColumn
vrrpInfoVirtRtrPriority = _VrrpInfoVirtRtrPriority_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 3, 1, 1, 8),
    _VrrpInfoVirtRtrPriority_Type()
)
vrrpInfoVirtRtrPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpInfoVirtRtrPriority.setStatus("current")


class _VrrpInfoVirtGroupState_Type(DisplayString):
    """Custom type vrrpInfoVirtGroupState based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 128),
    )


_VrrpInfoVirtGroupState_Type.__name__ = "DisplayString"
_VrrpInfoVirtGroupState_Object = MibScalar
vrrpInfoVirtGroupState = _VrrpInfoVirtGroupState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 3, 2),
    _VrrpInfoVirtGroupState_Type()
)
vrrpInfoVirtGroupState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpInfoVirtGroupState.setStatus("current")
_VrrpInfoVirtGroupPriority_Type = Integer32
_VrrpInfoVirtGroupPriority_Object = MibScalar
vrrpInfoVirtGroupPriority = _VrrpInfoVirtGroupPriority_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 3, 3),
    _VrrpInfoVirtGroupPriority_Type()
)
vrrpInfoVirtGroupPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpInfoVirtGroupPriority.setStatus("current")
_Ospfinfo_ObjectIdentity = ObjectIdentity
ospfinfo = _Ospfinfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4)
)
_OspfGeneralInfo_ObjectIdentity = ObjectIdentity
ospfGeneralInfo = _OspfGeneralInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 1)
)
_OspfStartTime_Type = TimeTicks
_OspfStartTime_Object = MibScalar
ospfStartTime = _OspfStartTime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 1, 1),
    _OspfStartTime_Type()
)
ospfStartTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfStartTime.setStatus("current")
_OspfProcessUptime_Type = TimeTicks
_OspfProcessUptime_Object = MibScalar
ospfProcessUptime = _OspfProcessUptime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 1, 2),
    _OspfProcessUptime_Type()
)
ospfProcessUptime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfProcessUptime.setStatus("current")
_OspfLsTypesSupported_Type = Integer32
_OspfLsTypesSupported_Object = MibScalar
ospfLsTypesSupported = _OspfLsTypesSupported_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 1, 3),
    _OspfLsTypesSupported_Type()
)
ospfLsTypesSupported.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLsTypesSupported.setStatus("current")
_OspfIntfCountForRouter_Type = Integer32
_OspfIntfCountForRouter_Object = MibScalar
ospfIntfCountForRouter = _OspfIntfCountForRouter_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 1, 4),
    _OspfIntfCountForRouter_Type()
)
ospfIntfCountForRouter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfCountForRouter.setStatus("current")
_OspfVlinkCountForRouter_Type = Integer32
_OspfVlinkCountForRouter_Object = MibScalar
ospfVlinkCountForRouter = _OspfVlinkCountForRouter_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 1, 5),
    _OspfVlinkCountForRouter_Type()
)
ospfVlinkCountForRouter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVlinkCountForRouter.setStatus("current")
_OspfTotalNeighbours_Type = Integer32
_OspfTotalNeighbours_Object = MibScalar
ospfTotalNeighbours = _OspfTotalNeighbours_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 1, 6),
    _OspfTotalNeighbours_Type()
)
ospfTotalNeighbours.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfTotalNeighbours.setStatus("current")
_OspfNbrInInitState_Type = Integer32
_OspfNbrInInitState_Object = MibScalar
ospfNbrInInitState = _OspfNbrInInitState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 1, 7),
    _OspfNbrInInitState_Type()
)
ospfNbrInInitState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNbrInInitState.setStatus("current")
_OspfNbrInExchState_Type = Integer32
_OspfNbrInExchState_Object = MibScalar
ospfNbrInExchState = _OspfNbrInExchState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 1, 8),
    _OspfNbrInExchState_Type()
)
ospfNbrInExchState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNbrInExchState.setStatus("current")
_OspfNbrInFullState_Type = Integer32
_OspfNbrInFullState_Object = MibScalar
ospfNbrInFullState = _OspfNbrInFullState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 1, 9),
    _OspfNbrInFullState_Type()
)
ospfNbrInFullState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNbrInFullState.setStatus("current")
_OspfTotalAreas_Type = Integer32
_OspfTotalAreas_Object = MibScalar
ospfTotalAreas = _OspfTotalAreas_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 1, 10),
    _OspfTotalAreas_Type()
)
ospfTotalAreas.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfTotalAreas.setStatus("current")
_OspfTotalTransitAreas_Type = Integer32
_OspfTotalTransitAreas_Object = MibScalar
ospfTotalTransitAreas = _OspfTotalTransitAreas_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 1, 11),
    _OspfTotalTransitAreas_Type()
)
ospfTotalTransitAreas.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfTotalTransitAreas.setStatus("current")
_OspfTotalNssaAreas_Type = Integer32
_OspfTotalNssaAreas_Object = MibScalar
ospfTotalNssaAreas = _OspfTotalNssaAreas_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 1, 12),
    _OspfTotalNssaAreas_Type()
)
ospfTotalNssaAreas.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfTotalNssaAreas.setStatus("current")
_OspfTotalStubAreas_Type = Integer32
_OspfTotalStubAreas_Object = MibScalar
ospfTotalStubAreas = _OspfTotalStubAreas_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 1, 13),
    _OspfTotalStubAreas_Type()
)
ospfTotalStubAreas.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfTotalStubAreas.setStatus("current")
_OspfAreaInfoTable_Object = MibTable
ospfAreaInfoTable = _OspfAreaInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 2)
)
if mibBuilder.loadTexts:
    ospfAreaInfoTable.setStatus("current")
_OspfAreaInfoEntry_Object = MibTableRow
ospfAreaInfoEntry = _OspfAreaInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 2, 1)
)
ospfAreaInfoEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospfAreaInfoIndex"),
)
if mibBuilder.loadTexts:
    ospfAreaInfoEntry.setStatus("current")
_OspfAreaInfoIndex_Type = Integer32
_OspfAreaInfoIndex_Object = MibTableColumn
ospfAreaInfoIndex = _OspfAreaInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 2, 1, 1),
    _OspfAreaInfoIndex_Type()
)
ospfAreaInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaInfoIndex.setStatus("current")
_OspfAreaInfoId_Type = IpAddress
_OspfAreaInfoId_Object = MibTableColumn
ospfAreaInfoId = _OspfAreaInfoId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 2, 1, 2),
    _OspfAreaInfoId_Type()
)
ospfAreaInfoId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaInfoId.setStatus("current")
_OspfTotalNumberOfInterfaces_Type = Integer32
_OspfTotalNumberOfInterfaces_Object = MibTableColumn
ospfTotalNumberOfInterfaces = _OspfTotalNumberOfInterfaces_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 2, 1, 3),
    _OspfTotalNumberOfInterfaces_Type()
)
ospfTotalNumberOfInterfaces.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfTotalNumberOfInterfaces.setStatus("current")
_OspfNumberOfInterfacesUp_Type = Integer32
_OspfNumberOfInterfacesUp_Object = MibTableColumn
ospfNumberOfInterfacesUp = _OspfNumberOfInterfacesUp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 2, 1, 4),
    _OspfNumberOfInterfacesUp_Type()
)
ospfNumberOfInterfacesUp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNumberOfInterfacesUp.setStatus("current")
_OspfNumberOfLsdbEntries_Type = Integer32
_OspfNumberOfLsdbEntries_Object = MibTableColumn
ospfNumberOfLsdbEntries = _OspfNumberOfLsdbEntries_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 2, 1, 5),
    _OspfNumberOfLsdbEntries_Type()
)
ospfNumberOfLsdbEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNumberOfLsdbEntries.setStatus("current")


class _OspfAreaInfoAuthType_Type(Integer32):
    """Custom type ospfAreaInfoAuthType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("password", 2),
          ("md5", 3))
    )


_OspfAreaInfoAuthType_Type.__name__ = "Integer32"
_OspfAreaInfoAuthType_Object = MibTableColumn
ospfAreaInfoAuthType = _OspfAreaInfoAuthType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 2, 1, 6),
    _OspfAreaInfoAuthType_Type()
)
ospfAreaInfoAuthType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaInfoAuthType.setStatus("current")


class _OspfAreaInfoLsTypesAccepted_Type(DisplayString):
    """Custom type ospfAreaInfoLsTypesAccepted based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_OspfAreaInfoLsTypesAccepted_Type.__name__ = "DisplayString"
_OspfAreaInfoLsTypesAccepted_Object = MibTableColumn
ospfAreaInfoLsTypesAccepted = _OspfAreaInfoLsTypesAccepted_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 2, 1, 7),
    _OspfAreaInfoLsTypesAccepted_Type()
)
ospfAreaInfoLsTypesAccepted.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaInfoLsTypesAccepted.setStatus("current")
_OspfAreaInfoSPF_Type = Integer32
_OspfAreaInfoSPF_Object = MibTableColumn
ospfAreaInfoSPF = _OspfAreaInfoSPF_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 2, 1, 8),
    _OspfAreaInfoSPF_Type()
)
ospfAreaInfoSPF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaInfoSPF.setStatus("current")
_OspfAreaInfoAreaBorderRouter_Type = Integer32
_OspfAreaInfoAreaBorderRouter_Object = MibTableColumn
ospfAreaInfoAreaBorderRouter = _OspfAreaInfoAreaBorderRouter_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 2, 1, 9),
    _OspfAreaInfoAreaBorderRouter_Type()
)
ospfAreaInfoAreaBorderRouter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaInfoAreaBorderRouter.setStatus("current")
_OspfAreaInfoASBoundaryRouter_Type = Integer32
_OspfAreaInfoASBoundaryRouter_Object = MibTableColumn
ospfAreaInfoASBoundaryRouter = _OspfAreaInfoASBoundaryRouter_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 2, 1, 10),
    _OspfAreaInfoASBoundaryRouter_Type()
)
ospfAreaInfoASBoundaryRouter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaInfoASBoundaryRouter.setStatus("current")
_OspfAreaInfoTotalNeighbours_Type = Integer32
_OspfAreaInfoTotalNeighbours_Object = MibTableColumn
ospfAreaInfoTotalNeighbours = _OspfAreaInfoTotalNeighbours_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 2, 1, 11),
    _OspfAreaInfoTotalNeighbours_Type()
)
ospfAreaInfoTotalNeighbours.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaInfoTotalNeighbours.setStatus("current")
_OspfAreaInfoNeighborsINITstate_Type = Integer32
_OspfAreaInfoNeighborsINITstate_Object = MibTableColumn
ospfAreaInfoNeighborsINITstate = _OspfAreaInfoNeighborsINITstate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 2, 1, 12),
    _OspfAreaInfoNeighborsINITstate_Type()
)
ospfAreaInfoNeighborsINITstate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaInfoNeighborsINITstate.setStatus("current")
_OspfAreaInfoNeighborsEXCHstate_Type = Integer32
_OspfAreaInfoNeighborsEXCHstate_Object = MibTableColumn
ospfAreaInfoNeighborsEXCHstate = _OspfAreaInfoNeighborsEXCHstate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 2, 1, 13),
    _OspfAreaInfoNeighborsEXCHstate_Type()
)
ospfAreaInfoNeighborsEXCHstate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaInfoNeighborsEXCHstate.setStatus("current")
_OspfAreaInfoNeighborsFULLstate_Type = Integer32
_OspfAreaInfoNeighborsFULLstate_Object = MibTableColumn
ospfAreaInfoNeighborsFULLstate = _OspfAreaInfoNeighborsFULLstate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 2, 1, 14),
    _OspfAreaInfoNeighborsFULLstate_Type()
)
ospfAreaInfoNeighborsFULLstate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaInfoNeighborsFULLstate.setStatus("current")
_OspfIntfInfoTable_Object = MibTable
ospfIntfInfoTable = _OspfIntfInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 3)
)
if mibBuilder.loadTexts:
    ospfIntfInfoTable.setStatus("current")
_OspfIntfInfoEntry_Object = MibTableRow
ospfIntfInfoEntry = _OspfIntfInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 3, 1)
)
ospfIntfInfoEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospfIfInfoIndex"),
)
if mibBuilder.loadTexts:
    ospfIntfInfoEntry.setStatus("current")
_OspfIfInfoIndex_Type = Integer32
_OspfIfInfoIndex_Object = MibTableColumn
ospfIfInfoIndex = _OspfIfInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 3, 1, 1),
    _OspfIfInfoIndex_Type()
)
ospfIfInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoIndex.setStatus("current")
_OspfIfInfoIpAddress_Type = IpAddress
_OspfIfInfoIpAddress_Object = MibTableColumn
ospfIfInfoIpAddress = _OspfIfInfoIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 3, 1, 2),
    _OspfIfInfoIpAddress_Type()
)
ospfIfInfoIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoIpAddress.setStatus("current")


class _OspfIfInfoArea_Type(Integer32):
    """Custom type ospfIfInfoArea based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2),
    )


_OspfIfInfoArea_Type.__name__ = "Integer32"
_OspfIfInfoArea_Object = MibTableColumn
ospfIfInfoArea = _OspfIfInfoArea_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 3, 1, 3),
    _OspfIfInfoArea_Type()
)
ospfIfInfoArea.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoArea.setStatus("current")


class _OspfIfInfoAdminStatus_Type(Integer32):
    """Custom type ospfIfInfoAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("up", 1))
    )


_OspfIfInfoAdminStatus_Type.__name__ = "Integer32"
_OspfIfInfoAdminStatus_Object = MibTableColumn
ospfIfInfoAdminStatus = _OspfIfInfoAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 3, 1, 4),
    _OspfIfInfoAdminStatus_Type()
)
ospfIfInfoAdminStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoAdminStatus.setStatus("current")


class _OspfIfInfoPassive_Type(Integer32):
    """Custom type ospfIfInfoPassive based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_OspfIfInfoPassive_Type.__name__ = "Integer32"
_OspfIfInfoPassive_Object = MibTableColumn
ospfIfInfoPassive = _OspfIfInfoPassive_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 3, 1, 5),
    _OspfIfInfoPassive_Type()
)
ospfIfInfoPassive.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoPassive.setStatus("current")
_OspfIfInfoRouterIP_Type = IpAddress
_OspfIfInfoRouterIP_Object = MibTableColumn
ospfIfInfoRouterIP = _OspfIfInfoRouterIP_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 3, 1, 6),
    _OspfIfInfoRouterIP_Type()
)
ospfIfInfoRouterIP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoRouterIP.setStatus("current")


class _OspfIfInfoState_Type(Integer32):
    """Custom type ospfIfInfoState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("loopback", 1),
          ("waiting", 2),
          ("ptop", 3),
          ("dr", 4),
          ("backupdr", 5),
          ("drother", 6))
    )


_OspfIfInfoState_Type.__name__ = "Integer32"
_OspfIfInfoState_Object = MibTableColumn
ospfIfInfoState = _OspfIfInfoState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 3, 1, 7),
    _OspfIfInfoState_Type()
)
ospfIfInfoState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoState.setStatus("current")


class _OspfIfInfoPriority_Type(Integer32):
    """Custom type ospfIfInfoPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_OspfIfInfoPriority_Type.__name__ = "Integer32"
_OspfIfInfoPriority_Object = MibTableColumn
ospfIfInfoPriority = _OspfIfInfoPriority_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 3, 1, 8),
    _OspfIfInfoPriority_Type()
)
ospfIfInfoPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoPriority.setStatus("current")
_OspfIfInfoDesignatedRouterIP_Type = IpAddress
_OspfIfInfoDesignatedRouterIP_Object = MibTableColumn
ospfIfInfoDesignatedRouterIP = _OspfIfInfoDesignatedRouterIP_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 3, 1, 9),
    _OspfIfInfoDesignatedRouterIP_Type()
)
ospfIfInfoDesignatedRouterIP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoDesignatedRouterIP.setStatus("current")
_OspfIfInfoDesignatedRouterIpAddress_Type = IpAddress
_OspfIfInfoDesignatedRouterIpAddress_Object = MibTableColumn
ospfIfInfoDesignatedRouterIpAddress = _OspfIfInfoDesignatedRouterIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 3, 1, 10),
    _OspfIfInfoDesignatedRouterIpAddress_Type()
)
ospfIfInfoDesignatedRouterIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoDesignatedRouterIpAddress.setStatus("current")
_OspfIfInfoBackupDesignatedRouterIP_Type = IpAddress
_OspfIfInfoBackupDesignatedRouterIP_Object = MibTableColumn
ospfIfInfoBackupDesignatedRouterIP = _OspfIfInfoBackupDesignatedRouterIP_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 3, 1, 11),
    _OspfIfInfoBackupDesignatedRouterIP_Type()
)
ospfIfInfoBackupDesignatedRouterIP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoBackupDesignatedRouterIP.setStatus("current")
_OspfIfInfoBackupDesignatedRouterIpAddress_Type = IpAddress
_OspfIfInfoBackupDesignatedRouterIpAddress_Object = MibTableColumn
ospfIfInfoBackupDesignatedRouterIpAddress = _OspfIfInfoBackupDesignatedRouterIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 3, 1, 12),
    _OspfIfInfoBackupDesignatedRouterIpAddress_Type()
)
ospfIfInfoBackupDesignatedRouterIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoBackupDesignatedRouterIpAddress.setStatus("current")


class _OspfIfInfoHello_Type(Integer32):
    """Custom type ospfIfInfoHello based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfIfInfoHello_Type.__name__ = "Integer32"
_OspfIfInfoHello_Object = MibTableColumn
ospfIfInfoHello = _OspfIfInfoHello_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 3, 1, 13),
    _OspfIfInfoHello_Type()
)
ospfIfInfoHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoHello.setStatus("current")


class _OspfIfInfoHelloMS_Type(Integer32):
    """Custom type ospfIfInfoHelloMS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("seconds", 0),
          ("milliseconds", 1))
    )


_OspfIfInfoHelloMS_Type.__name__ = "Integer32"
_OspfIfInfoHelloMS_Object = MibTableColumn
ospfIfInfoHelloMS = _OspfIfInfoHelloMS_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 3, 1, 14),
    _OspfIfInfoHelloMS_Type()
)
ospfIfInfoHelloMS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoHelloMS.setStatus("current")


class _OspfIfInfoDead_Type(Integer32):
    """Custom type ospfIfInfoDead based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfIfInfoDead_Type.__name__ = "Integer32"
_OspfIfInfoDead_Object = MibTableColumn
ospfIfInfoDead = _OspfIfInfoDead_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 3, 1, 15),
    _OspfIfInfoDead_Type()
)
ospfIfInfoDead.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoDead.setStatus("current")


class _OspfIfInfoDeadMS_Type(Integer32):
    """Custom type ospfIfInfoDeadMS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("seconds", 0),
          ("milliseconds", 1))
    )


_OspfIfInfoDeadMS_Type.__name__ = "Integer32"
_OspfIfInfoDeadMS_Object = MibTableColumn
ospfIfInfoDeadMS = _OspfIfInfoDeadMS_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 3, 1, 16),
    _OspfIfInfoDeadMS_Type()
)
ospfIfInfoDeadMS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoDeadMS.setStatus("current")
_OspfIfInfoWaitInterval_Type = Integer32
_OspfIfInfoWaitInterval_Object = MibTableColumn
ospfIfInfoWaitInterval = _OspfIfInfoWaitInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 3, 1, 17),
    _OspfIfInfoWaitInterval_Type()
)
ospfIfInfoWaitInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoWaitInterval.setStatus("current")


class _OspfIfInfoWaitIntervalMS_Type(Integer32):
    """Custom type ospfIfInfoWaitIntervalMS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("seconds", 0),
          ("milliseconds", 1))
    )


_OspfIfInfoWaitIntervalMS_Type.__name__ = "Integer32"
_OspfIfInfoWaitIntervalMS_Object = MibTableColumn
ospfIfInfoWaitIntervalMS = _OspfIfInfoWaitIntervalMS_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 3, 1, 18),
    _OspfIfInfoWaitIntervalMS_Type()
)
ospfIfInfoWaitIntervalMS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoWaitIntervalMS.setStatus("current")


class _OspfIfInfoRetransmit_Type(Integer32):
    """Custom type ospfIfInfoRetransmit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_OspfIfInfoRetransmit_Type.__name__ = "Integer32"
_OspfIfInfoRetransmit_Object = MibTableColumn
ospfIfInfoRetransmit = _OspfIfInfoRetransmit_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 3, 1, 19),
    _OspfIfInfoRetransmit_Type()
)
ospfIfInfoRetransmit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoRetransmit.setStatus("current")


class _OspfIfInfoTransitDelay_Type(Integer32):
    """Custom type ospfIfInfoTransitDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_OspfIfInfoTransitDelay_Type.__name__ = "Integer32"
_OspfIfInfoTransitDelay_Object = MibTableColumn
ospfIfInfoTransitDelay = _OspfIfInfoTransitDelay_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 3, 1, 20),
    _OspfIfInfoTransitDelay_Type()
)
ospfIfInfoTransitDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoTransitDelay.setStatus("current")
_OspfIfInfoTotalNeighbours_Type = Integer32
_OspfIfInfoTotalNeighbours_Object = MibTableColumn
ospfIfInfoTotalNeighbours = _OspfIfInfoTotalNeighbours_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 3, 1, 21),
    _OspfIfInfoTotalNeighbours_Type()
)
ospfIfInfoTotalNeighbours.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoTotalNeighbours.setStatus("current")
_OspfIfInfoEvents_Type = Integer32
_OspfIfInfoEvents_Object = MibTableColumn
ospfIfInfoEvents = _OspfIfInfoEvents_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 3, 1, 22),
    _OspfIfInfoEvents_Type()
)
ospfIfInfoEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoEvents.setStatus("current")


class _OspfIfInfoAuthType_Type(Integer32):
    """Custom type ospfIfInfoAuthType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("password", 2),
          ("md5", 3))
    )


_OspfIfInfoAuthType_Type.__name__ = "Integer32"
_OspfIfInfoAuthType_Object = MibTableColumn
ospfIfInfoAuthType = _OspfIfInfoAuthType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 3, 1, 23),
    _OspfIfInfoAuthType_Type()
)
ospfIfInfoAuthType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoAuthType.setStatus("current")


class _OspfIfInfoPtop_Type(Integer32):
    """Custom type ospfIfInfoPtop based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_OspfIfInfoPtop_Type.__name__ = "Integer32"
_OspfIfInfoPtop_Object = MibTableColumn
ospfIfInfoPtop = _OspfIfInfoPtop_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 3, 1, 24),
    _OspfIfInfoPtop_Type()
)
ospfIfInfoPtop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoPtop.setStatus("current")
_OspfVirtIntfInfoTable_Object = MibTable
ospfVirtIntfInfoTable = _OspfVirtIntfInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 4)
)
if mibBuilder.loadTexts:
    ospfVirtIntfInfoTable.setStatus("current")
_OspfVirtIntfInfoEntry_Object = MibTableRow
ospfVirtIntfInfoEntry = _OspfVirtIntfInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 4, 1)
)
ospfVirtIntfInfoEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospfVirtIntfInfoIndex"),
)
if mibBuilder.loadTexts:
    ospfVirtIntfInfoEntry.setStatus("current")
_OspfVirtIntfInfoIndex_Type = Integer32
_OspfVirtIntfInfoIndex_Object = MibTableColumn
ospfVirtIntfInfoIndex = _OspfVirtIntfInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 4, 1, 1),
    _OspfVirtIntfInfoIndex_Type()
)
ospfVirtIntfInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVirtIntfInfoIndex.setStatus("current")
_OspfVirtIntfInfoIpAddr_Type = IpAddress
_OspfVirtIntfInfoIpAddr_Object = MibTableColumn
ospfVirtIntfInfoIpAddr = _OspfVirtIntfInfoIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 4, 1, 2),
    _OspfVirtIntfInfoIpAddr_Type()
)
ospfVirtIntfInfoIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVirtIntfInfoIpAddr.setStatus("current")


class _OspfVirtIntfInfoArea_Type(Integer32):
    """Custom type ospfVirtIntfInfoArea based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2),
    )


_OspfVirtIntfInfoArea_Type.__name__ = "Integer32"
_OspfVirtIntfInfoArea_Object = MibTableColumn
ospfVirtIntfInfoArea = _OspfVirtIntfInfoArea_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 4, 1, 3),
    _OspfVirtIntfInfoArea_Type()
)
ospfVirtIntfInfoArea.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVirtIntfInfoArea.setStatus("current")
_OspfVirtIntfInfoRouterId_Type = IpAddress
_OspfVirtIntfInfoRouterId_Object = MibTableColumn
ospfVirtIntfInfoRouterId = _OspfVirtIntfInfoRouterId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 4, 1, 4),
    _OspfVirtIntfInfoRouterId_Type()
)
ospfVirtIntfInfoRouterId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVirtIntfInfoRouterId.setStatus("current")


class _OspfVirtIntfInfoState_Type(Integer32):
    """Custom type ospfVirtIntfInfoState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_OspfVirtIntfInfoState_Type.__name__ = "Integer32"
_OspfVirtIntfInfoState_Object = MibTableColumn
ospfVirtIntfInfoState = _OspfVirtIntfInfoState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 4, 1, 5),
    _OspfVirtIntfInfoState_Type()
)
ospfVirtIntfInfoState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVirtIntfInfoState.setStatus("current")
_OspfVirtIntfInfoCost_Type = Integer32
_OspfVirtIntfInfoCost_Object = MibTableColumn
ospfVirtIntfInfoCost = _OspfVirtIntfInfoCost_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 4, 1, 6),
    _OspfVirtIntfInfoCost_Type()
)
ospfVirtIntfInfoCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVirtIntfInfoCost.setStatus("current")
_OspfVirtIntfInfoTrans_Type = Integer32
_OspfVirtIntfInfoTrans_Object = MibTableColumn
ospfVirtIntfInfoTrans = _OspfVirtIntfInfoTrans_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 4, 1, 7),
    _OspfVirtIntfInfoTrans_Type()
)
ospfVirtIntfInfoTrans.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVirtIntfInfoTrans.setStatus("current")


class _OspfVirtIntfInfoHello_Type(Integer32):
    """Custom type ospfVirtIntfInfoHello based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfVirtIntfInfoHello_Type.__name__ = "Integer32"
_OspfVirtIntfInfoHello_Object = MibTableColumn
ospfVirtIntfInfoHello = _OspfVirtIntfInfoHello_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 4, 1, 8),
    _OspfVirtIntfInfoHello_Type()
)
ospfVirtIntfInfoHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVirtIntfInfoHello.setStatus("current")


class _OspfVirtIntfInfoHelloMS_Type(Integer32):
    """Custom type ospfVirtIntfInfoHelloMS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("seconds", 0),
          ("milliseconds", 1))
    )


_OspfVirtIntfInfoHelloMS_Type.__name__ = "Integer32"
_OspfVirtIntfInfoHelloMS_Object = MibTableColumn
ospfVirtIntfInfoHelloMS = _OspfVirtIntfInfoHelloMS_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 4, 1, 9),
    _OspfVirtIntfInfoHelloMS_Type()
)
ospfVirtIntfInfoHelloMS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVirtIntfInfoHelloMS.setStatus("current")


class _OspfVirtIntfInfoDead_Type(Integer32):
    """Custom type ospfVirtIntfInfoDead based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfVirtIntfInfoDead_Type.__name__ = "Integer32"
_OspfVirtIntfInfoDead_Object = MibTableColumn
ospfVirtIntfInfoDead = _OspfVirtIntfInfoDead_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 4, 1, 10),
    _OspfVirtIntfInfoDead_Type()
)
ospfVirtIntfInfoDead.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVirtIntfInfoDead.setStatus("current")


class _OspfVirtIntfInfoDeadMS_Type(Integer32):
    """Custom type ospfVirtIntfInfoDeadMS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("seconds", 0),
          ("milliseconds", 1))
    )


_OspfVirtIntfInfoDeadMS_Type.__name__ = "Integer32"
_OspfVirtIntfInfoDeadMS_Object = MibTableColumn
ospfVirtIntfInfoDeadMS = _OspfVirtIntfInfoDeadMS_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 4, 1, 11),
    _OspfVirtIntfInfoDeadMS_Type()
)
ospfVirtIntfInfoDeadMS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVirtIntfInfoDeadMS.setStatus("current")


class _OspfVirtIntfInfoWait_Type(Integer32):
    """Custom type ospfVirtIntfInfoWait based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfVirtIntfInfoWait_Type.__name__ = "Integer32"
_OspfVirtIntfInfoWait_Object = MibTableColumn
ospfVirtIntfInfoWait = _OspfVirtIntfInfoWait_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 4, 1, 12),
    _OspfVirtIntfInfoWait_Type()
)
ospfVirtIntfInfoWait.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVirtIntfInfoWait.setStatus("current")


class _OspfVirtIntfInfoWaitMS_Type(Integer32):
    """Custom type ospfVirtIntfInfoWaitMS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("seconds", 0),
          ("milliseconds", 1))
    )


_OspfVirtIntfInfoWaitMS_Type.__name__ = "Integer32"
_OspfVirtIntfInfoWaitMS_Object = MibTableColumn
ospfVirtIntfInfoWaitMS = _OspfVirtIntfInfoWaitMS_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 4, 1, 13),
    _OspfVirtIntfInfoWaitMS_Type()
)
ospfVirtIntfInfoWaitMS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVirtIntfInfoWaitMS.setStatus("current")


class _OspfVirtIntfInfoRetra_Type(Integer32):
    """Custom type ospfVirtIntfInfoRetra based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_OspfVirtIntfInfoRetra_Type.__name__ = "Integer32"
_OspfVirtIntfInfoRetra_Object = MibTableColumn
ospfVirtIntfInfoRetra = _OspfVirtIntfInfoRetra_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 4, 1, 14),
    _OspfVirtIntfInfoRetra_Type()
)
ospfVirtIntfInfoRetra.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVirtIntfInfoRetra.setStatus("current")


class _OspfVirtIntfInfoAuth_Type(DisplayString):
    """Custom type ospfVirtIntfInfoAuth based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_OspfVirtIntfInfoAuth_Type.__name__ = "DisplayString"
_OspfVirtIntfInfoAuth_Object = MibTableColumn
ospfVirtIntfInfoAuth = _OspfVirtIntfInfoAuth_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 4, 1, 15),
    _OspfVirtIntfInfoAuth_Type()
)
ospfVirtIntfInfoAuth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVirtIntfInfoAuth.setStatus("current")
_OspfVirtIntfInfoEvents_Type = Integer32
_OspfVirtIntfInfoEvents_Object = MibTableColumn
ospfVirtIntfInfoEvents = _OspfVirtIntfInfoEvents_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 4, 1, 16),
    _OspfVirtIntfInfoEvents_Type()
)
ospfVirtIntfInfoEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVirtIntfInfoEvents.setStatus("current")
_OspfVirtIntfInfoNbr_Type = IpAddress
_OspfVirtIntfInfoNbr_Object = MibTableColumn
ospfVirtIntfInfoNbr = _OspfVirtIntfInfoNbr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 4, 1, 17),
    _OspfVirtIntfInfoNbr_Type()
)
ospfVirtIntfInfoNbr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVirtIntfInfoNbr.setStatus("current")


class _OspfVirtIntfInfoNbrState_Type(Integer32):
    """Custom type ospfVirtIntfInfoNbrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("attempt", 1),
          ("init", 2),
          ("twoway", 3),
          ("exstart", 4),
          ("exchange", 5),
          ("loading", 6),
          ("full", 7))
    )


_OspfVirtIntfInfoNbrState_Type.__name__ = "Integer32"
_OspfVirtIntfInfoNbrState_Object = MibTableColumn
ospfVirtIntfInfoNbrState = _OspfVirtIntfInfoNbrState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 4, 1, 18),
    _OspfVirtIntfInfoNbrState_Type()
)
ospfVirtIntfInfoNbrState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVirtIntfInfoNbrState.setStatus("current")
_OspfVirtIntfInfoAreaId_Type = IpAddress
_OspfVirtIntfInfoAreaId_Object = MibTableColumn
ospfVirtIntfInfoAreaId = _OspfVirtIntfInfoAreaId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 4, 1, 19),
    _OspfVirtIntfInfoAreaId_Type()
)
ospfVirtIntfInfoAreaId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVirtIntfInfoAreaId.setStatus("current")
_OspfIfNbrTable_Object = MibTable
ospfIfNbrTable = _OspfIfNbrTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 5)
)
if mibBuilder.loadTexts:
    ospfIfNbrTable.setStatus("current")
_OspfIfNbrEntry_Object = MibTableRow
ospfIfNbrEntry = _OspfIfNbrEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 5, 1)
)
ospfIfNbrEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospfIfNbrIntfIndex"),
    (0, "IBM-GbTOR-G8264T-MIB", "ospfIfNbrIpAddr"),
)
if mibBuilder.loadTexts:
    ospfIfNbrEntry.setStatus("current")
_OspfIfNbrIntfIndex_Type = Integer32
_OspfIfNbrIntfIndex_Object = MibTableColumn
ospfIfNbrIntfIndex = _OspfIfNbrIntfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 5, 1, 1),
    _OspfIfNbrIntfIndex_Type()
)
ospfIfNbrIntfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfNbrIntfIndex.setStatus("current")
_OspfIfNbrIpAddr_Type = IpAddress
_OspfIfNbrIpAddr_Object = MibTableColumn
ospfIfNbrIpAddr = _OspfIfNbrIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 5, 1, 2),
    _OspfIfNbrIpAddr_Type()
)
ospfIfNbrIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfNbrIpAddr.setStatus("current")
_OspfIfNbrPriority_Type = Integer32
_OspfIfNbrPriority_Object = MibTableColumn
ospfIfNbrPriority = _OspfIfNbrPriority_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 5, 1, 3),
    _OspfIfNbrPriority_Type()
)
ospfIfNbrPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfNbrPriority.setStatus("current")


class _OspfIfNbrState_Type(Integer32):
    """Custom type ospfIfNbrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("down", 1),
          ("attempt", 2),
          ("init", 3),
          ("twoway", 4),
          ("exStart", 5),
          ("exchange", 6),
          ("loading", 7),
          ("full", 8))
    )


_OspfIfNbrState_Type.__name__ = "Integer32"
_OspfIfNbrState_Object = MibTableColumn
ospfIfNbrState = _OspfIfNbrState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 5, 1, 4),
    _OspfIfNbrState_Type()
)
ospfIfNbrState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfNbrState.setStatus("current")
_OspfIfNbrDesignatedRtr_Type = IpAddress
_OspfIfNbrDesignatedRtr_Object = MibTableColumn
ospfIfNbrDesignatedRtr = _OspfIfNbrDesignatedRtr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 5, 1, 5),
    _OspfIfNbrDesignatedRtr_Type()
)
ospfIfNbrDesignatedRtr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfNbrDesignatedRtr.setStatus("current")
_OspfIfNbrBackupDesignatedRtr_Type = IpAddress
_OspfIfNbrBackupDesignatedRtr_Object = MibTableColumn
ospfIfNbrBackupDesignatedRtr = _OspfIfNbrBackupDesignatedRtr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 5, 1, 6),
    _OspfIfNbrBackupDesignatedRtr_Type()
)
ospfIfNbrBackupDesignatedRtr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfNbrBackupDesignatedRtr.setStatus("current")
_OspfIfNbrIpAddress_Type = IpAddress
_OspfIfNbrIpAddress_Object = MibTableColumn
ospfIfNbrIpAddress = _OspfIfNbrIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 5, 1, 7),
    _OspfIfNbrIpAddress_Type()
)
ospfIfNbrIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfNbrIpAddress.setStatus("current")
_OspfSumRangesInfoTable_Object = MibTable
ospfSumRangesInfoTable = _OspfSumRangesInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 6)
)
if mibBuilder.loadTexts:
    ospfSumRangesInfoTable.setStatus("current")
_OspfSumRangesInfoEntry_Object = MibTableRow
ospfSumRangesInfoEntry = _OspfSumRangesInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 6, 1)
)
ospfSumRangesInfoEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospfSumRangesInfoIndex"),
)
if mibBuilder.loadTexts:
    ospfSumRangesInfoEntry.setStatus("current")
_OspfSumRangesInfoIndex_Type = Integer32
_OspfSumRangesInfoIndex_Object = MibTableColumn
ospfSumRangesInfoIndex = _OspfSumRangesInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 6, 1, 1),
    _OspfSumRangesInfoIndex_Type()
)
ospfSumRangesInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfSumRangesInfoIndex.setStatus("current")


class _OspfSumRangesInfoArea_Type(Integer32):
    """Custom type ospfSumRangesInfoArea based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2),
    )


_OspfSumRangesInfoArea_Type.__name__ = "Integer32"
_OspfSumRangesInfoArea_Object = MibTableColumn
ospfSumRangesInfoArea = _OspfSumRangesInfoArea_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 6, 1, 2),
    _OspfSumRangesInfoArea_Type()
)
ospfSumRangesInfoArea.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfSumRangesInfoArea.setStatus("current")
_OspfSumRangesInfoNetwork_Type = IpAddress
_OspfSumRangesInfoNetwork_Object = MibTableColumn
ospfSumRangesInfoNetwork = _OspfSumRangesInfoNetwork_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 6, 1, 3),
    _OspfSumRangesInfoNetwork_Type()
)
ospfSumRangesInfoNetwork.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfSumRangesInfoNetwork.setStatus("current")
_OspfSumRangesInfoMask_Type = IpAddress
_OspfSumRangesInfoMask_Object = MibTableColumn
ospfSumRangesInfoMask = _OspfSumRangesInfoMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 6, 1, 4),
    _OspfSumRangesInfoMask_Type()
)
ospfSumRangesInfoMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfSumRangesInfoMask.setStatus("current")


class _OspfSumRangesInfoAction_Type(Integer32):
    """Custom type ospfSumRangesInfoAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("propagate", 0),
          ("hide", 1))
    )


_OspfSumRangesInfoAction_Type.__name__ = "Integer32"
_OspfSumRangesInfoAction_Object = MibTableColumn
ospfSumRangesInfoAction = _OspfSumRangesInfoAction_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 6, 1, 5),
    _OspfSumRangesInfoAction_Type()
)
ospfSumRangesInfoAction.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfSumRangesInfoAction.setStatus("current")


class _OspfSumRangesInfoListType_Type(Integer32):
    """Custom type ospfSumRangesInfoListType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("non-nssa", 0),
          ("nssa", 1))
    )


_OspfSumRangesInfoListType_Type.__name__ = "Integer32"
_OspfSumRangesInfoListType_Object = MibTableColumn
ospfSumRangesInfoListType = _OspfSumRangesInfoListType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 6, 1, 6),
    _OspfSumRangesInfoListType_Type()
)
ospfSumRangesInfoListType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfSumRangesInfoListType.setStatus("current")
_OspfRoutesInfoTable_Object = MibTable
ospfRoutesInfoTable = _OspfRoutesInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 7)
)
if mibBuilder.loadTexts:
    ospfRoutesInfoTable.setStatus("current")
_OspfRoutesInfoEntry_Object = MibTableRow
ospfRoutesInfoEntry = _OspfRoutesInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 7, 1)
)
ospfRoutesInfoEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospfRoutesInfoIndex"),
)
if mibBuilder.loadTexts:
    ospfRoutesInfoEntry.setStatus("current")
_OspfRoutesInfoIndex_Type = Integer32
_OspfRoutesInfoIndex_Object = MibTableColumn
ospfRoutesInfoIndex = _OspfRoutesInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 7, 1, 1),
    _OspfRoutesInfoIndex_Type()
)
ospfRoutesInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfRoutesInfoIndex.setStatus("current")
_OspfRoutesInfoDestination_Type = IpAddress
_OspfRoutesInfoDestination_Object = MibTableColumn
ospfRoutesInfoDestination = _OspfRoutesInfoDestination_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 7, 1, 2),
    _OspfRoutesInfoDestination_Type()
)
ospfRoutesInfoDestination.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfRoutesInfoDestination.setStatus("current")
_OspfRoutesInfoMask_Type = IpAddress
_OspfRoutesInfoMask_Object = MibTableColumn
ospfRoutesInfoMask = _OspfRoutesInfoMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 7, 1, 3),
    _OspfRoutesInfoMask_Type()
)
ospfRoutesInfoMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfRoutesInfoMask.setStatus("current")
_OspfRoutesInfoVia_Type = IpAddress
_OspfRoutesInfoVia_Object = MibTableColumn
ospfRoutesInfoVia = _OspfRoutesInfoVia_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 7, 1, 4),
    _OspfRoutesInfoVia_Type()
)
ospfRoutesInfoVia.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfRoutesInfoVia.setStatus("current")


class _OspfRoutesInfoType_Type(DisplayString):
    """Custom type ospfRoutesInfoType based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_OspfRoutesInfoType_Type.__name__ = "DisplayString"
_OspfRoutesInfoType_Object = MibTableColumn
ospfRoutesInfoType = _OspfRoutesInfoType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 7, 1, 5),
    _OspfRoutesInfoType_Type()
)
ospfRoutesInfoType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfRoutesInfoType.setStatus("current")
_OspfLsdbInfoTable_Object = MibTable
ospfLsdbInfoTable = _OspfLsdbInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 8)
)
if mibBuilder.loadTexts:
    ospfLsdbInfoTable.setStatus("current")
_OspfLsdbInfoEntry_Object = MibTableRow
ospfLsdbInfoEntry = _OspfLsdbInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 8, 1)
)
ospfLsdbInfoEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospfLsdbInfoIndex"),
)
if mibBuilder.loadTexts:
    ospfLsdbInfoEntry.setStatus("current")
_OspfLsdbInfoIndex_Type = Integer32
_OspfLsdbInfoIndex_Object = MibTableColumn
ospfLsdbInfoIndex = _OspfLsdbInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 8, 1, 1),
    _OspfLsdbInfoIndex_Type()
)
ospfLsdbInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLsdbInfoIndex.setStatus("current")
_OspfLsdbInfoAreaId_Type = IpAddress
_OspfLsdbInfoAreaId_Object = MibTableColumn
ospfLsdbInfoAreaId = _OspfLsdbInfoAreaId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 8, 1, 2),
    _OspfLsdbInfoAreaId_Type()
)
ospfLsdbInfoAreaId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLsdbInfoAreaId.setStatus("current")


class _OspfLsdbInfoType_Type(Integer32):
    """Custom type ospfLsdbInfoType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("routerLink", 1),
          ("networkLink", 2),
          ("summaryLink", 3),
          ("asSummaryLink", 4),
          ("asExternalLink", 5),
          ("multicastLink", 6),
          ("nssaExternalLink", 7))
    )


_OspfLsdbInfoType_Type.__name__ = "Integer32"
_OspfLsdbInfoType_Object = MibTableColumn
ospfLsdbInfoType = _OspfLsdbInfoType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 8, 1, 3),
    _OspfLsdbInfoType_Type()
)
ospfLsdbInfoType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLsdbInfoType.setStatus("current")
_OspfLsdbInfoLsid_Type = IpAddress
_OspfLsdbInfoLsid_Object = MibTableColumn
ospfLsdbInfoLsid = _OspfLsdbInfoLsid_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 8, 1, 4),
    _OspfLsdbInfoLsid_Type()
)
ospfLsdbInfoLsid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLsdbInfoLsid.setStatus("current")
_OspfLsdbInfoRouterId_Type = IpAddress
_OspfLsdbInfoRouterId_Object = MibTableColumn
ospfLsdbInfoRouterId = _OspfLsdbInfoRouterId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 8, 1, 5),
    _OspfLsdbInfoRouterId_Type()
)
ospfLsdbInfoRouterId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLsdbInfoRouterId.setStatus("current")


class _OspfLsdbInfoSequence_Type(OctetString):
    """Custom type ospfLsdbInfoSequence based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(10, 10),
    )
    fixed_length = 10


_OspfLsdbInfoSequence_Type.__name__ = "OctetString"
_OspfLsdbInfoSequence_Object = MibTableColumn
ospfLsdbInfoSequence = _OspfLsdbInfoSequence_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 8, 1, 6),
    _OspfLsdbInfoSequence_Type()
)
ospfLsdbInfoSequence.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLsdbInfoSequence.setStatus("current")
_OspfLsdbInfoAge_Type = Integer32
_OspfLsdbInfoAge_Object = MibTableColumn
ospfLsdbInfoAge = _OspfLsdbInfoAge_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 8, 1, 7),
    _OspfLsdbInfoAge_Type()
)
ospfLsdbInfoAge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLsdbInfoAge.setStatus("current")
_OspfLsdbInfoChecksum_Type = Integer32
_OspfLsdbInfoChecksum_Object = MibTableColumn
ospfLsdbInfoChecksum = _OspfLsdbInfoChecksum_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 8, 1, 8),
    _OspfLsdbInfoChecksum_Type()
)
ospfLsdbInfoChecksum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLsdbInfoChecksum.setStatus("current")


class _OspfLsdbInfoAdvertisement_Type(OctetString):
    """Custom type ospfLsdbInfoAdvertisement based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(36, 36),
    )
    fixed_length = 36


_OspfLsdbInfoAdvertisement_Type.__name__ = "OctetString"
_OspfLsdbInfoAdvertisement_Object = MibTableColumn
ospfLsdbInfoAdvertisement = _OspfLsdbInfoAdvertisement_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 8, 1, 9),
    _OspfLsdbInfoAdvertisement_Type()
)
ospfLsdbInfoAdvertisement.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLsdbInfoAdvertisement.setStatus("current")
_OspfExtLsdbInfoTable_Object = MibTable
ospfExtLsdbInfoTable = _OspfExtLsdbInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 9)
)
if mibBuilder.loadTexts:
    ospfExtLsdbInfoTable.setStatus("current")
_OspfExtLsdbInfoEntry_Object = MibTableRow
ospfExtLsdbInfoEntry = _OspfExtLsdbInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 9, 1)
)
ospfExtLsdbInfoEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospfExtLsdbInfoIndex"),
)
if mibBuilder.loadTexts:
    ospfExtLsdbInfoEntry.setStatus("current")
_OspfExtLsdbInfoIndex_Type = Integer32
_OspfExtLsdbInfoIndex_Object = MibTableColumn
ospfExtLsdbInfoIndex = _OspfExtLsdbInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 9, 1, 1),
    _OspfExtLsdbInfoIndex_Type()
)
ospfExtLsdbInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfExtLsdbInfoIndex.setStatus("current")


class _OspfExtLsdbInfoType_Type(Integer32):
    """Custom type ospfExtLsdbInfoType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            5
        )
    )
    namedValues = NamedValues(
        ("asExternalLink", 5)
    )


_OspfExtLsdbInfoType_Type.__name__ = "Integer32"
_OspfExtLsdbInfoType_Object = MibTableColumn
ospfExtLsdbInfoType = _OspfExtLsdbInfoType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 9, 1, 2),
    _OspfExtLsdbInfoType_Type()
)
ospfExtLsdbInfoType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfExtLsdbInfoType.setStatus("current")
_OspfExtLsdbInfoLsid_Type = IpAddress
_OspfExtLsdbInfoLsid_Object = MibTableColumn
ospfExtLsdbInfoLsid = _OspfExtLsdbInfoLsid_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 9, 1, 3),
    _OspfExtLsdbInfoLsid_Type()
)
ospfExtLsdbInfoLsid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfExtLsdbInfoLsid.setStatus("current")
_OspfExtLsdbInfoRouterId_Type = IpAddress
_OspfExtLsdbInfoRouterId_Object = MibTableColumn
ospfExtLsdbInfoRouterId = _OspfExtLsdbInfoRouterId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 9, 1, 4),
    _OspfExtLsdbInfoRouterId_Type()
)
ospfExtLsdbInfoRouterId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfExtLsdbInfoRouterId.setStatus("current")


class _OspfExtLsdbInfoSequence_Type(OctetString):
    """Custom type ospfExtLsdbInfoSequence based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(10, 10),
    )
    fixed_length = 10


_OspfExtLsdbInfoSequence_Type.__name__ = "OctetString"
_OspfExtLsdbInfoSequence_Object = MibTableColumn
ospfExtLsdbInfoSequence = _OspfExtLsdbInfoSequence_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 9, 1, 5),
    _OspfExtLsdbInfoSequence_Type()
)
ospfExtLsdbInfoSequence.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfExtLsdbInfoSequence.setStatus("current")
_OspfExtLsdbInfoAge_Type = Integer32
_OspfExtLsdbInfoAge_Object = MibTableColumn
ospfExtLsdbInfoAge = _OspfExtLsdbInfoAge_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 9, 1, 6),
    _OspfExtLsdbInfoAge_Type()
)
ospfExtLsdbInfoAge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfExtLsdbInfoAge.setStatus("current")
_OspfExtLsdbInfoChecksum_Type = Integer32
_OspfExtLsdbInfoChecksum_Object = MibTableColumn
ospfExtLsdbInfoChecksum = _OspfExtLsdbInfoChecksum_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 9, 1, 7),
    _OspfExtLsdbInfoChecksum_Type()
)
ospfExtLsdbInfoChecksum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfExtLsdbInfoChecksum.setStatus("current")


class _OspfExtLsdbInfoAdvertisement_Type(OctetString):
    """Custom type ospfExtLsdbInfoAdvertisement based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(36, 36),
    )
    fixed_length = 36


_OspfExtLsdbInfoAdvertisement_Type.__name__ = "OctetString"
_OspfExtLsdbInfoAdvertisement_Object = MibTableColumn
ospfExtLsdbInfoAdvertisement = _OspfExtLsdbInfoAdvertisement_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 9, 1, 8),
    _OspfExtLsdbInfoAdvertisement_Type()
)
ospfExtLsdbInfoAdvertisement.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfExtLsdbInfoAdvertisement.setStatus("current")
_OspfLoopIfInfoTable_Object = MibTable
ospfLoopIfInfoTable = _OspfLoopIfInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 10)
)
if mibBuilder.loadTexts:
    ospfLoopIfInfoTable.setStatus("current")
_OspfLoopIfInfoEntry_Object = MibTableRow
ospfLoopIfInfoEntry = _OspfLoopIfInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 10, 1)
)
ospfLoopIfInfoEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospfLoopIfInfoIndex"),
)
if mibBuilder.loadTexts:
    ospfLoopIfInfoEntry.setStatus("current")
_OspfLoopIfInfoIndex_Type = Integer32
_OspfLoopIfInfoIndex_Object = MibTableColumn
ospfLoopIfInfoIndex = _OspfLoopIfInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 10, 1, 1),
    _OspfLoopIfInfoIndex_Type()
)
ospfLoopIfInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLoopIfInfoIndex.setStatus("current")
_OspfLoopIfInfoIpAddress_Type = IpAddress
_OspfLoopIfInfoIpAddress_Object = MibTableColumn
ospfLoopIfInfoIpAddress = _OspfLoopIfInfoIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 10, 1, 2),
    _OspfLoopIfInfoIpAddress_Type()
)
ospfLoopIfInfoIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLoopIfInfoIpAddress.setStatus("current")
_OspfLoopIfInfoArea_Type = Integer32
_OspfLoopIfInfoArea_Object = MibTableColumn
ospfLoopIfInfoArea = _OspfLoopIfInfoArea_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 10, 1, 3),
    _OspfLoopIfInfoArea_Type()
)
ospfLoopIfInfoArea.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLoopIfInfoArea.setStatus("current")


class _OspfLoopIfInfoAdminStatus_Type(Integer32):
    """Custom type ospfLoopIfInfoAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("up", 1))
    )


_OspfLoopIfInfoAdminStatus_Type.__name__ = "Integer32"
_OspfLoopIfInfoAdminStatus_Object = MibTableColumn
ospfLoopIfInfoAdminStatus = _OspfLoopIfInfoAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 10, 1, 4),
    _OspfLoopIfInfoAdminStatus_Type()
)
ospfLoopIfInfoAdminStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLoopIfInfoAdminStatus.setStatus("current")


class _OspfLoopIfInfoPassive_Type(Integer32):
    """Custom type ospfLoopIfInfoPassive based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_OspfLoopIfInfoPassive_Type.__name__ = "Integer32"
_OspfLoopIfInfoPassive_Object = MibTableColumn
ospfLoopIfInfoPassive = _OspfLoopIfInfoPassive_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 10, 1, 5),
    _OspfLoopIfInfoPassive_Type()
)
ospfLoopIfInfoPassive.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLoopIfInfoPassive.setStatus("current")
_OspfLoopIfInfoRouterIP_Type = IpAddress
_OspfLoopIfInfoRouterIP_Object = MibTableColumn
ospfLoopIfInfoRouterIP = _OspfLoopIfInfoRouterIP_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 10, 1, 6),
    _OspfLoopIfInfoRouterIP_Type()
)
ospfLoopIfInfoRouterIP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLoopIfInfoRouterIP.setStatus("current")


class _OspfLoopIfInfoState_Type(Integer32):
    """Custom type ospfLoopIfInfoState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("loopback", 1),
          ("waiting", 2),
          ("ptop", 3),
          ("dr", 4),
          ("backupdr", 5),
          ("drother", 6))
    )


_OspfLoopIfInfoState_Type.__name__ = "Integer32"
_OspfLoopIfInfoState_Object = MibTableColumn
ospfLoopIfInfoState = _OspfLoopIfInfoState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 10, 1, 7),
    _OspfLoopIfInfoState_Type()
)
ospfLoopIfInfoState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLoopIfInfoState.setStatus("current")


class _OspfLoopIfInfoPriority_Type(Integer32):
    """Custom type ospfLoopIfInfoPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_OspfLoopIfInfoPriority_Type.__name__ = "Integer32"
_OspfLoopIfInfoPriority_Object = MibTableColumn
ospfLoopIfInfoPriority = _OspfLoopIfInfoPriority_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 10, 1, 8),
    _OspfLoopIfInfoPriority_Type()
)
ospfLoopIfInfoPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLoopIfInfoPriority.setStatus("current")
_OspfLoopIfInfoDesignatedRouterIP_Type = IpAddress
_OspfLoopIfInfoDesignatedRouterIP_Object = MibTableColumn
ospfLoopIfInfoDesignatedRouterIP = _OspfLoopIfInfoDesignatedRouterIP_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 10, 1, 9),
    _OspfLoopIfInfoDesignatedRouterIP_Type()
)
ospfLoopIfInfoDesignatedRouterIP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLoopIfInfoDesignatedRouterIP.setStatus("current")
_OspfLoopIfInfoDesignatedRouterIpAddress_Type = IpAddress
_OspfLoopIfInfoDesignatedRouterIpAddress_Object = MibTableColumn
ospfLoopIfInfoDesignatedRouterIpAddress = _OspfLoopIfInfoDesignatedRouterIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 10, 1, 10),
    _OspfLoopIfInfoDesignatedRouterIpAddress_Type()
)
ospfLoopIfInfoDesignatedRouterIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLoopIfInfoDesignatedRouterIpAddress.setStatus("current")
_OspfLoopIfInfoBackupDesignatedRouterIP_Type = IpAddress
_OspfLoopIfInfoBackupDesignatedRouterIP_Object = MibTableColumn
ospfLoopIfInfoBackupDesignatedRouterIP = _OspfLoopIfInfoBackupDesignatedRouterIP_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 10, 1, 11),
    _OspfLoopIfInfoBackupDesignatedRouterIP_Type()
)
ospfLoopIfInfoBackupDesignatedRouterIP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLoopIfInfoBackupDesignatedRouterIP.setStatus("current")
_OspfLoopIfInfoBackupDesignatedRouterIpAddress_Type = IpAddress
_OspfLoopIfInfoBackupDesignatedRouterIpAddress_Object = MibTableColumn
ospfLoopIfInfoBackupDesignatedRouterIpAddress = _OspfLoopIfInfoBackupDesignatedRouterIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 10, 1, 12),
    _OspfLoopIfInfoBackupDesignatedRouterIpAddress_Type()
)
ospfLoopIfInfoBackupDesignatedRouterIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLoopIfInfoBackupDesignatedRouterIpAddress.setStatus("current")


class _OspfLoopIfInfoHello_Type(Integer32):
    """Custom type ospfLoopIfInfoHello based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfLoopIfInfoHello_Type.__name__ = "Integer32"
_OspfLoopIfInfoHello_Object = MibTableColumn
ospfLoopIfInfoHello = _OspfLoopIfInfoHello_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 10, 1, 13),
    _OspfLoopIfInfoHello_Type()
)
ospfLoopIfInfoHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLoopIfInfoHello.setStatus("current")


class _OspfLoopIfInfoHelloMS_Type(Integer32):
    """Custom type ospfLoopIfInfoHelloMS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("seconds", 0),
          ("milliseconds", 1))
    )


_OspfLoopIfInfoHelloMS_Type.__name__ = "Integer32"
_OspfLoopIfInfoHelloMS_Object = MibTableColumn
ospfLoopIfInfoHelloMS = _OspfLoopIfInfoHelloMS_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 10, 1, 14),
    _OspfLoopIfInfoHelloMS_Type()
)
ospfLoopIfInfoHelloMS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLoopIfInfoHelloMS.setStatus("current")


class _OspfLoopIfInfoDead_Type(Integer32):
    """Custom type ospfLoopIfInfoDead based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfLoopIfInfoDead_Type.__name__ = "Integer32"
_OspfLoopIfInfoDead_Object = MibTableColumn
ospfLoopIfInfoDead = _OspfLoopIfInfoDead_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 10, 1, 15),
    _OspfLoopIfInfoDead_Type()
)
ospfLoopIfInfoDead.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLoopIfInfoDead.setStatus("current")


class _OspfLoopIfInfoDeadMS_Type(Integer32):
    """Custom type ospfLoopIfInfoDeadMS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("seconds", 0),
          ("milliseconds", 1))
    )


_OspfLoopIfInfoDeadMS_Type.__name__ = "Integer32"
_OspfLoopIfInfoDeadMS_Object = MibTableColumn
ospfLoopIfInfoDeadMS = _OspfLoopIfInfoDeadMS_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 10, 1, 16),
    _OspfLoopIfInfoDeadMS_Type()
)
ospfLoopIfInfoDeadMS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLoopIfInfoDeadMS.setStatus("current")
_OspfLoopIfInfoWaitInterval_Type = Integer32
_OspfLoopIfInfoWaitInterval_Object = MibTableColumn
ospfLoopIfInfoWaitInterval = _OspfLoopIfInfoWaitInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 10, 1, 17),
    _OspfLoopIfInfoWaitInterval_Type()
)
ospfLoopIfInfoWaitInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLoopIfInfoWaitInterval.setStatus("current")


class _OspfLoopIfInfoWaitIntervalMS_Type(Integer32):
    """Custom type ospfLoopIfInfoWaitIntervalMS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("seconds", 0),
          ("milliseconds", 1))
    )


_OspfLoopIfInfoWaitIntervalMS_Type.__name__ = "Integer32"
_OspfLoopIfInfoWaitIntervalMS_Object = MibTableColumn
ospfLoopIfInfoWaitIntervalMS = _OspfLoopIfInfoWaitIntervalMS_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 10, 1, 18),
    _OspfLoopIfInfoWaitIntervalMS_Type()
)
ospfLoopIfInfoWaitIntervalMS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLoopIfInfoWaitIntervalMS.setStatus("current")


class _OspfLoopIfInfoRetransmit_Type(Integer32):
    """Custom type ospfLoopIfInfoRetransmit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_OspfLoopIfInfoRetransmit_Type.__name__ = "Integer32"
_OspfLoopIfInfoRetransmit_Object = MibTableColumn
ospfLoopIfInfoRetransmit = _OspfLoopIfInfoRetransmit_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 10, 1, 19),
    _OspfLoopIfInfoRetransmit_Type()
)
ospfLoopIfInfoRetransmit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLoopIfInfoRetransmit.setStatus("current")


class _OspfLoopIfInfoTransitDelay_Type(Integer32):
    """Custom type ospfLoopIfInfoTransitDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_OspfLoopIfInfoTransitDelay_Type.__name__ = "Integer32"
_OspfLoopIfInfoTransitDelay_Object = MibTableColumn
ospfLoopIfInfoTransitDelay = _OspfLoopIfInfoTransitDelay_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 10, 1, 20),
    _OspfLoopIfInfoTransitDelay_Type()
)
ospfLoopIfInfoTransitDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLoopIfInfoTransitDelay.setStatus("current")
_OspfLoopIfInfoTotalNeighbours_Type = Integer32
_OspfLoopIfInfoTotalNeighbours_Object = MibTableColumn
ospfLoopIfInfoTotalNeighbours = _OspfLoopIfInfoTotalNeighbours_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 10, 1, 21),
    _OspfLoopIfInfoTotalNeighbours_Type()
)
ospfLoopIfInfoTotalNeighbours.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLoopIfInfoTotalNeighbours.setStatus("current")
_OspfLoopIfInfoEvents_Type = Integer32
_OspfLoopIfInfoEvents_Object = MibTableColumn
ospfLoopIfInfoEvents = _OspfLoopIfInfoEvents_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 10, 1, 22),
    _OspfLoopIfInfoEvents_Type()
)
ospfLoopIfInfoEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLoopIfInfoEvents.setStatus("current")


class _OspfLoopIfInfoAuthType_Type(Integer32):
    """Custom type ospfLoopIfInfoAuthType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("password", 2),
          ("md5", 3))
    )


_OspfLoopIfInfoAuthType_Type.__name__ = "Integer32"
_OspfLoopIfInfoAuthType_Object = MibTableColumn
ospfLoopIfInfoAuthType = _OspfLoopIfInfoAuthType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 10, 1, 23),
    _OspfLoopIfInfoAuthType_Type()
)
ospfLoopIfInfoAuthType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLoopIfInfoAuthType.setStatus("current")


class _OspfLoopIfInfoPtop_Type(Integer32):
    """Custom type ospfLoopIfInfoPtop based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_OspfLoopIfInfoPtop_Type.__name__ = "Integer32"
_OspfLoopIfInfoPtop_Object = MibTableColumn
ospfLoopIfInfoPtop = _OspfLoopIfInfoPtop_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 4, 10, 1, 24),
    _OspfLoopIfInfoPtop_Type()
)
ospfLoopIfInfoPtop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLoopIfInfoPtop.setStatus("current")
_GatewayInfo_ObjectIdentity = ObjectIdentity
gatewayInfo = _GatewayInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 5)
)
_GatewayInfoTable_Object = MibTable
gatewayInfoTable = _GatewayInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 5, 1)
)
if mibBuilder.loadTexts:
    gatewayInfoTable.setStatus("current")
_GatewayInfoEntry_Object = MibTableRow
gatewayInfoEntry = _GatewayInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 5, 1, 1)
)
gatewayInfoEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "gatewayInfoIndex"),
)
if mibBuilder.loadTexts:
    gatewayInfoEntry.setStatus("current")
_GatewayInfoIndex_Type = Integer32
_GatewayInfoIndex_Object = MibTableColumn
gatewayInfoIndex = _GatewayInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 5, 1, 1, 1),
    _GatewayInfoIndex_Type()
)
gatewayInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    gatewayInfoIndex.setStatus("current")
_GatewayInfoAddr_Type = IpAddress
_GatewayInfoAddr_Object = MibTableColumn
gatewayInfoAddr = _GatewayInfoAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 5, 1, 1, 2),
    _GatewayInfoAddr_Type()
)
gatewayInfoAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    gatewayInfoAddr.setStatus("current")


class _GatewayInfoStatus_Type(Integer32):
    """Custom type gatewayInfoStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("up", 1),
          ("failed", 2))
    )


_GatewayInfoStatus_Type.__name__ = "Integer32"
_GatewayInfoStatus_Object = MibTableColumn
gatewayInfoStatus = _GatewayInfoStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 5, 1, 1, 4),
    _GatewayInfoStatus_Type()
)
gatewayInfoStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    gatewayInfoStatus.setStatus("current")
_IgmpInfo_ObjectIdentity = ObjectIdentity
igmpInfo = _IgmpInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 6)
)
_IgmpInfoTable_Object = MibTable
igmpInfoTable = _IgmpInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 6, 1)
)
if mibBuilder.loadTexts:
    igmpInfoTable.setStatus("current")
_IgmpInfoEntry_Object = MibTableRow
igmpInfoEntry = _IgmpInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 6, 1, 1)
)
igmpInfoEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "igmpInfoIndex"),
)
if mibBuilder.loadTexts:
    igmpInfoEntry.setStatus("current")
_IgmpInfoIndex_Type = Integer32
_IgmpInfoIndex_Object = MibTableColumn
igmpInfoIndex = _IgmpInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 6, 1, 1, 1),
    _IgmpInfoIndex_Type()
)
igmpInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpInfoIndex.setStatus("current")
_IgmpInfoGroupId_Type = IpAddress
_IgmpInfoGroupId_Object = MibTableColumn
igmpInfoGroupId = _IgmpInfoGroupId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 6, 1, 1, 2),
    _IgmpInfoGroupId_Type()
)
igmpInfoGroupId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpInfoGroupId.setStatus("current")
_IgmpInfoVlanId_Type = Integer32
_IgmpInfoVlanId_Object = MibTableColumn
igmpInfoVlanId = _IgmpInfoVlanId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 6, 1, 1, 3),
    _IgmpInfoVlanId_Type()
)
igmpInfoVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpInfoVlanId.setStatus("current")
_IgmpInfoSrcTrunk_Type = Unsigned32
_IgmpInfoSrcTrunk_Object = MibTableColumn
igmpInfoSrcTrunk = _IgmpInfoSrcTrunk_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 6, 1, 1, 4),
    _IgmpInfoSrcTrunk_Type()
)
igmpInfoSrcTrunk.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpInfoSrcTrunk.setStatus("current")
_IgmpInfoSrcPort_Type = PortNumber
_IgmpInfoSrcPort_Object = MibTableColumn
igmpInfoSrcPort = _IgmpInfoSrcPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 6, 1, 1, 5),
    _IgmpInfoSrcPort_Type()
)
igmpInfoSrcPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpInfoSrcPort.setStatus("current")


class _IgmpInfoVersion_Type(Integer32):
    """Custom type igmpInfoVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("v3", 1),
          ("v2", 2),
          ("v1", 3))
    )


_IgmpInfoVersion_Type.__name__ = "Integer32"
_IgmpInfoVersion_Object = MibTableColumn
igmpInfoVersion = _IgmpInfoVersion_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 6, 1, 1, 6),
    _IgmpInfoVersion_Type()
)
igmpInfoVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpInfoVersion.setStatus("current")
_IgmpInfoExpires_Type = DisplayString
_IgmpInfoExpires_Object = MibTableColumn
igmpInfoExpires = _IgmpInfoExpires_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 6, 1, 1, 7),
    _IgmpInfoExpires_Type()
)
igmpInfoExpires.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpInfoExpires.setStatus("current")


class _IgmpInfoMode_Type(Integer32):
    """Custom type igmpInfoMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("exclude", 1),
          ("include", 2),
          ("na", 3))
    )


_IgmpInfoMode_Type.__name__ = "Integer32"
_IgmpInfoMode_Object = MibTableColumn
igmpInfoMode = _IgmpInfoMode_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 6, 1, 1, 8),
    _IgmpInfoMode_Type()
)
igmpInfoMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpInfoMode.setStatus("current")
_IgmpInfoSourceIp_Type = IpAddress
_IgmpInfoSourceIp_Object = MibTableColumn
igmpInfoSourceIp = _IgmpInfoSourceIp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 6, 1, 1, 9),
    _IgmpInfoSourceIp_Type()
)
igmpInfoSourceIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpInfoSourceIp.setStatus("current")


class _IgmpInfoFwd_Type(Integer32):
    """Custom type igmpInfoFwd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("yes", 1),
          ("no", 2))
    )


_IgmpInfoFwd_Type.__name__ = "Integer32"
_IgmpInfoFwd_Object = MibTableColumn
igmpInfoFwd = _IgmpInfoFwd_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 6, 1, 1, 10),
    _IgmpInfoFwd_Type()
)
igmpInfoFwd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpInfoFwd.setStatus("current")
_IgmpInfoGrpExpires_Type = DisplayString
_IgmpInfoGrpExpires_Object = MibTableColumn
igmpInfoGrpExpires = _IgmpInfoGrpExpires_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 6, 1, 1, 11),
    _IgmpInfoGrpExpires_Type()
)
igmpInfoGrpExpires.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpInfoGrpExpires.setStatus("current")
_IgmpMrtrInfoTable_Object = MibTable
igmpMrtrInfoTable = _IgmpMrtrInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 6, 2)
)
if mibBuilder.loadTexts:
    igmpMrtrInfoTable.setStatus("current")
_IgmpMrtrInfoEntry_Object = MibTableRow
igmpMrtrInfoEntry = _IgmpMrtrInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 6, 2, 1)
)
igmpMrtrInfoEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "igmpMrtrInfoIndex"),
)
if mibBuilder.loadTexts:
    igmpMrtrInfoEntry.setStatus("current")
_IgmpMrtrInfoIndex_Type = Integer32
_IgmpMrtrInfoIndex_Object = MibTableColumn
igmpMrtrInfoIndex = _IgmpMrtrInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 6, 2, 1, 1),
    _IgmpMrtrInfoIndex_Type()
)
igmpMrtrInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpMrtrInfoIndex.setStatus("current")
_IgmpMrtrInfoVlanId_Type = Integer32
_IgmpMrtrInfoVlanId_Object = MibTableColumn
igmpMrtrInfoVlanId = _IgmpMrtrInfoVlanId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 6, 2, 1, 2),
    _IgmpMrtrInfoVlanId_Type()
)
igmpMrtrInfoVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpMrtrInfoVlanId.setStatus("current")
_IgmpMrtrInfoPortId_Type = DisplayString
_IgmpMrtrInfoPortId_Object = MibTableColumn
igmpMrtrInfoPortId = _IgmpMrtrInfoPortId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 6, 2, 1, 3),
    _IgmpMrtrInfoPortId_Type()
)
igmpMrtrInfoPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpMrtrInfoPortId.setStatus("current")


class _IgmpMrtrInfoVersion_Type(Integer32):
    """Custom type igmpMrtrInfoVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("v1", 1),
          ("v2", 2),
          ("v3", 3),
          ("pim", 4))
    )


_IgmpMrtrInfoVersion_Type.__name__ = "Integer32"
_IgmpMrtrInfoVersion_Object = MibTableColumn
igmpMrtrInfoVersion = _IgmpMrtrInfoVersion_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 6, 2, 1, 4),
    _IgmpMrtrInfoVersion_Type()
)
igmpMrtrInfoVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpMrtrInfoVersion.setStatus("current")
_IgmpMrtrInfoExpires_Type = DisplayString
_IgmpMrtrInfoExpires_Object = MibTableColumn
igmpMrtrInfoExpires = _IgmpMrtrInfoExpires_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 6, 2, 1, 5),
    _IgmpMrtrInfoExpires_Type()
)
igmpMrtrInfoExpires.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpMrtrInfoExpires.setStatus("current")
_IgmpMrtrInfoMrt_Type = Integer32
_IgmpMrtrInfoMrt_Object = MibTableColumn
igmpMrtrInfoMrt = _IgmpMrtrInfoMrt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 6, 2, 1, 6),
    _IgmpMrtrInfoMrt_Type()
)
igmpMrtrInfoMrt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpMrtrInfoMrt.setStatus("current")
_IgmpMrtrInfoQrv_Type = Integer32
_IgmpMrtrInfoQrv_Object = MibTableColumn
igmpMrtrInfoQrv = _IgmpMrtrInfoQrv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 6, 2, 1, 7),
    _IgmpMrtrInfoQrv_Type()
)
igmpMrtrInfoQrv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpMrtrInfoQrv.setStatus("current")
_IgmpMrtrInfoQqic_Type = Integer32
_IgmpMrtrInfoQqic_Object = MibTableColumn
igmpMrtrInfoQqic = _IgmpMrtrInfoQqic_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 6, 2, 1, 8),
    _IgmpMrtrInfoQqic_Type()
)
igmpMrtrInfoQqic.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpMrtrInfoQqic.setStatus("current")
_IgmpMrtrInfoSrcIp_Type = IpAddress
_IgmpMrtrInfoSrcIp_Object = MibTableColumn
igmpMrtrInfoSrcIp = _IgmpMrtrInfoSrcIp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 6, 2, 1, 10),
    _IgmpMrtrInfoSrcIp_Type()
)
igmpMrtrInfoSrcIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpMrtrInfoSrcIp.setStatus("current")


class _IgmpClearTables_Type(Integer32):
    """Custom type igmpClearTables based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ok", 0),
          ("clearGroups", 1),
          ("clearMrouters", 2),
          ("clearAll", 3))
    )


_IgmpClearTables_Type.__name__ = "Integer32"
_IgmpClearTables_Object = MibScalar
igmpClearTables = _IgmpClearTables_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 6, 3),
    _IgmpClearTables_Type()
)
igmpClearTables.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpClearTables.setStatus("current")
_IpInfo_ObjectIdentity = ObjectIdentity
ipInfo = _IpInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 8)
)
_IpInfoRouterID_Type = IpAddress
_IpInfoRouterID_Object = MibScalar
ipInfoRouterID = _IpInfoRouterID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 8, 1),
    _IpInfoRouterID_Type()
)
ipInfoRouterID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInfoRouterID.setStatus("current")


class _IpInfoBootpRelayState_Type(Integer32):
    """Custom type ipInfoBootpRelayState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_IpInfoBootpRelayState_Type.__name__ = "Integer32"
_IpInfoBootpRelayState_Object = MibScalar
ipInfoBootpRelayState = _IpInfoBootpRelayState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 8, 4),
    _IpInfoBootpRelayState_Type()
)
ipInfoBootpRelayState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInfoBootpRelayState.setStatus("current")
_IpInfoBootpRelayAddr_Type = IpAddress
_IpInfoBootpRelayAddr_Object = MibScalar
ipInfoBootpRelayAddr = _IpInfoBootpRelayAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 8, 5),
    _IpInfoBootpRelayAddr_Type()
)
ipInfoBootpRelayAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInfoBootpRelayAddr.setStatus("current")
_IpInfoBootpRelayAddr2_Type = IpAddress
_IpInfoBootpRelayAddr2_Object = MibScalar
ipInfoBootpRelayAddr2 = _IpInfoBootpRelayAddr2_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 8, 6),
    _IpInfoBootpRelayAddr2_Type()
)
ipInfoBootpRelayAddr2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInfoBootpRelayAddr2.setStatus("current")


class _IpInfoFwdState_Type(Integer32):
    """Custom type ipInfoFwdState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_IpInfoFwdState_Type.__name__ = "Integer32"
_IpInfoFwdState_Object = MibScalar
ipInfoFwdState = _IpInfoFwdState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 8, 7),
    _IpInfoFwdState_Type()
)
ipInfoFwdState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInfoFwdState.setStatus("current")


class _IpInfoFwdDirectedBcast_Type(Integer32):
    """Custom type ipInfoFwdDirectedBcast based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_IpInfoFwdDirectedBcast_Type.__name__ = "Integer32"
_IpInfoFwdDirectedBcast_Object = MibScalar
ipInfoFwdDirectedBcast = _IpInfoFwdDirectedBcast_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 8, 8),
    _IpInfoFwdDirectedBcast_Type()
)
ipInfoFwdDirectedBcast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInfoFwdDirectedBcast.setStatus("current")
_IpIntfInfo_ObjectIdentity = ObjectIdentity
ipIntfInfo = _IpIntfInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 9)
)
_IpIntfInfoTable_Object = MibTable
ipIntfInfoTable = _IpIntfInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 9, 1)
)
if mibBuilder.loadTexts:
    ipIntfInfoTable.setStatus("current")
_IntfInfoEntry_Object = MibTableRow
intfInfoEntry = _IntfInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 9, 1, 1)
)
intfInfoEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "intfInfoIndex"),
)
if mibBuilder.loadTexts:
    intfInfoEntry.setStatus("current")
_IntfInfoIndex_Type = Integer32
_IntfInfoIndex_Object = MibTableColumn
intfInfoIndex = _IntfInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 9, 1, 1, 1),
    _IntfInfoIndex_Type()
)
intfInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    intfInfoIndex.setStatus("current")
_IntfInfoAddr_Type = DisplayString
_IntfInfoAddr_Object = MibTableColumn
intfInfoAddr = _IntfInfoAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 9, 1, 1, 3),
    _IntfInfoAddr_Type()
)
intfInfoAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    intfInfoAddr.setStatus("current")
_IntfInfoNetMask_Type = DisplayString
_IntfInfoNetMask_Object = MibTableColumn
intfInfoNetMask = _IntfInfoNetMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 9, 1, 1, 4),
    _IntfInfoNetMask_Type()
)
intfInfoNetMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    intfInfoNetMask.setStatus("current")
_IntfInfoBcastAddr_Type = DisplayString
_IntfInfoBcastAddr_Object = MibTableColumn
intfInfoBcastAddr = _IntfInfoBcastAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 9, 1, 1, 5),
    _IntfInfoBcastAddr_Type()
)
intfInfoBcastAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    intfInfoBcastAddr.setStatus("current")
_IntfInfoVlan_Type = Integer32
_IntfInfoVlan_Object = MibTableColumn
intfInfoVlan = _IntfInfoVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 9, 1, 1, 6),
    _IntfInfoVlan_Type()
)
intfInfoVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    intfInfoVlan.setStatus("current")


class _IntfInfoStatus_Type(Integer32):
    """Custom type intfInfoStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("up", 1),
          ("down", 2),
          ("disabled", 3))
    )


_IntfInfoStatus_Type.__name__ = "Integer32"
_IntfInfoStatus_Object = MibTableColumn
intfInfoStatus = _IntfInfoStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 9, 1, 1, 7),
    _IntfInfoStatus_Type()
)
intfInfoStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    intfInfoStatus.setStatus("current")
_Rip2Info_ObjectIdentity = ObjectIdentity
rip2Info = _Rip2Info_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 10)
)
_Rip2GeneralInfo_ObjectIdentity = ObjectIdentity
rip2GeneralInfo = _Rip2GeneralInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 10, 1)
)


class _RipInfoState_Type(Integer32):
    """Custom type ripInfoState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_RipInfoState_Type.__name__ = "Integer32"
_RipInfoState_Object = MibScalar
ripInfoState = _RipInfoState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 10, 1, 1),
    _RipInfoState_Type()
)
ripInfoState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripInfoState.setStatus("current")


class _RipInfoUpdatePeriod_Type(Integer32):
    """Custom type ripInfoUpdatePeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 120),
    )


_RipInfoUpdatePeriod_Type.__name__ = "Integer32"
_RipInfoUpdatePeriod_Object = MibScalar
ripInfoUpdatePeriod = _RipInfoUpdatePeriod_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 10, 1, 2),
    _RipInfoUpdatePeriod_Type()
)
ripInfoUpdatePeriod.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripInfoUpdatePeriod.setStatus("current")
_Rip2InfoIntfTable_Object = MibTable
rip2InfoIntfTable = _Rip2InfoIntfTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 10, 2)
)
if mibBuilder.loadTexts:
    rip2InfoIntfTable.setStatus("current")
_RipInfoIntfEntry_Object = MibTableRow
ripInfoIntfEntry = _RipInfoIntfEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 10, 2, 1)
)
ripInfoIntfEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ripInfoIntfIndex"),
)
if mibBuilder.loadTexts:
    ripInfoIntfEntry.setStatus("current")
_RipInfoIntfIndex_Type = Integer32
_RipInfoIntfIndex_Object = MibTableColumn
ripInfoIntfIndex = _RipInfoIntfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 10, 2, 1, 1),
    _RipInfoIntfIndex_Type()
)
ripInfoIntfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripInfoIntfIndex.setStatus("current")


class _RipInfoIntfVersion_Type(Integer32):
    """Custom type ripInfoIntfVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ripVersion1", 1),
          ("ripVersion2", 2),
          ("ripVersionBoth", 3))
    )


_RipInfoIntfVersion_Type.__name__ = "Integer32"
_RipInfoIntfVersion_Object = MibTableColumn
ripInfoIntfVersion = _RipInfoIntfVersion_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 10, 2, 1, 2),
    _RipInfoIntfVersion_Type()
)
ripInfoIntfVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripInfoIntfVersion.setStatus("current")
_RipInfoIntfAddress_Type = IpAddress
_RipInfoIntfAddress_Object = MibTableColumn
ripInfoIntfAddress = _RipInfoIntfAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 10, 2, 1, 3),
    _RipInfoIntfAddress_Type()
)
ripInfoIntfAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripInfoIntfAddress.setStatus("current")


class _RipInfoIntfState_Type(Integer32):
    """Custom type ripInfoIntfState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RipInfoIntfState_Type.__name__ = "Integer32"
_RipInfoIntfState_Object = MibTableColumn
ripInfoIntfState = _RipInfoIntfState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 10, 2, 1, 4),
    _RipInfoIntfState_Type()
)
ripInfoIntfState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripInfoIntfState.setStatus("current")


class _RipInfoIntfListen_Type(Integer32):
    """Custom type ripInfoIntfListen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RipInfoIntfListen_Type.__name__ = "Integer32"
_RipInfoIntfListen_Object = MibTableColumn
ripInfoIntfListen = _RipInfoIntfListen_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 10, 2, 1, 5),
    _RipInfoIntfListen_Type()
)
ripInfoIntfListen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripInfoIntfListen.setStatus("current")


class _RipInfoIntfTrigUpdate_Type(Integer32):
    """Custom type ripInfoIntfTrigUpdate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RipInfoIntfTrigUpdate_Type.__name__ = "Integer32"
_RipInfoIntfTrigUpdate_Object = MibTableColumn
ripInfoIntfTrigUpdate = _RipInfoIntfTrigUpdate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 10, 2, 1, 6),
    _RipInfoIntfTrigUpdate_Type()
)
ripInfoIntfTrigUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripInfoIntfTrigUpdate.setStatus("current")


class _RipInfoIntfMcastUpdate_Type(Integer32):
    """Custom type ripInfoIntfMcastUpdate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RipInfoIntfMcastUpdate_Type.__name__ = "Integer32"
_RipInfoIntfMcastUpdate_Object = MibTableColumn
ripInfoIntfMcastUpdate = _RipInfoIntfMcastUpdate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 10, 2, 1, 7),
    _RipInfoIntfMcastUpdate_Type()
)
ripInfoIntfMcastUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripInfoIntfMcastUpdate.setStatus("current")


class _RipInfoIntfPoisonReverse_Type(Integer32):
    """Custom type ripInfoIntfPoisonReverse based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RipInfoIntfPoisonReverse_Type.__name__ = "Integer32"
_RipInfoIntfPoisonReverse_Object = MibTableColumn
ripInfoIntfPoisonReverse = _RipInfoIntfPoisonReverse_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 10, 2, 1, 8),
    _RipInfoIntfPoisonReverse_Type()
)
ripInfoIntfPoisonReverse.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripInfoIntfPoisonReverse.setStatus("current")


class _RipInfoIntfSupply_Type(Integer32):
    """Custom type ripInfoIntfSupply based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RipInfoIntfSupply_Type.__name__ = "Integer32"
_RipInfoIntfSupply_Object = MibTableColumn
ripInfoIntfSupply = _RipInfoIntfSupply_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 10, 2, 1, 9),
    _RipInfoIntfSupply_Type()
)
ripInfoIntfSupply.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripInfoIntfSupply.setStatus("current")


class _RipInfoIntfMetric_Type(Integer32):
    """Custom type ripInfoIntfMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_RipInfoIntfMetric_Type.__name__ = "Integer32"
_RipInfoIntfMetric_Object = MibTableColumn
ripInfoIntfMetric = _RipInfoIntfMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 10, 2, 1, 10),
    _RipInfoIntfMetric_Type()
)
ripInfoIntfMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripInfoIntfMetric.setStatus("current")


class _RipInfoIntfAuth_Type(Integer32):
    """Custom type ripInfoIntfAuth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("password", 2))
    )


_RipInfoIntfAuth_Type.__name__ = "Integer32"
_RipInfoIntfAuth_Object = MibTableColumn
ripInfoIntfAuth = _RipInfoIntfAuth_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 10, 2, 1, 11),
    _RipInfoIntfAuth_Type()
)
ripInfoIntfAuth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripInfoIntfAuth.setStatus("current")


class _RipInfoIntfKey_Type(DisplayString):
    """Custom type ripInfoIntfKey based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_RipInfoIntfKey_Type.__name__ = "DisplayString"
_RipInfoIntfKey_Object = MibTableColumn
ripInfoIntfKey = _RipInfoIntfKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 10, 2, 1, 12),
    _RipInfoIntfKey_Type()
)
ripInfoIntfKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripInfoIntfKey.setStatus("current")


class _RipInfoIntfDefault_Type(Integer32):
    """Custom type ripInfoIntfDefault based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("both", 1),
          ("listen", 2),
          ("supply", 3),
          ("none", 4))
    )


_RipInfoIntfDefault_Type.__name__ = "Integer32"
_RipInfoIntfDefault_Object = MibTableColumn
ripInfoIntfDefault = _RipInfoIntfDefault_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 10, 2, 1, 13),
    _RipInfoIntfDefault_Type()
)
ripInfoIntfDefault.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripInfoIntfDefault.setStatus("current")
_Rip2InfoRtrTable_Object = MibTable
rip2InfoRtrTable = _Rip2InfoRtrTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 10, 3)
)
if mibBuilder.loadTexts:
    rip2InfoRtrTable.setStatus("current")
_RipInfoRtrEntry_Object = MibTableRow
ripInfoRtrEntry = _RipInfoRtrEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 10, 3, 1)
)
ripInfoRtrEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ripInfoRtrIndex"),
)
if mibBuilder.loadTexts:
    ripInfoRtrEntry.setStatus("current")
_RipInfoRtrIndex_Type = Integer32
_RipInfoRtrIndex_Object = MibTableColumn
ripInfoRtrIndex = _RipInfoRtrIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 10, 3, 1, 1),
    _RipInfoRtrIndex_Type()
)
ripInfoRtrIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripInfoRtrIndex.setStatus("current")
_RipInfoRtrDestIp_Type = IpAddress
_RipInfoRtrDestIp_Object = MibTableColumn
ripInfoRtrDestIp = _RipInfoRtrDestIp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 10, 3, 1, 2),
    _RipInfoRtrDestIp_Type()
)
ripInfoRtrDestIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripInfoRtrDestIp.setStatus("current")
_RipInfoRtrMask_Type = IpAddress
_RipInfoRtrMask_Object = MibTableColumn
ripInfoRtrMask = _RipInfoRtrMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 10, 3, 1, 3),
    _RipInfoRtrMask_Type()
)
ripInfoRtrMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripInfoRtrMask.setStatus("current")
_RipInfoRtrGateway_Type = IpAddress
_RipInfoRtrGateway_Object = MibTableColumn
ripInfoRtrGateway = _RipInfoRtrGateway_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 10, 3, 1, 4),
    _RipInfoRtrGateway_Type()
)
ripInfoRtrGateway.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripInfoRtrGateway.setStatus("current")
_RipInfoRtrMetric_Type = Integer32
_RipInfoRtrMetric_Object = MibTableColumn
ripInfoRtrMetric = _RipInfoRtrMetric_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 10, 3, 1, 10),
    _RipInfoRtrMetric_Type()
)
ripInfoRtrMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripInfoRtrMetric.setStatus("current")
_BgpInfo_ObjectIdentity = ObjectIdentity
bgpInfo = _BgpInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11)
)
_BgpInfoPeerTable_Object = MibTable
bgpInfoPeerTable = _BgpInfoPeerTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 1)
)
if mibBuilder.loadTexts:
    bgpInfoPeerTable.setStatus("current")
_BgpInfoPeerEntry_Object = MibTableRow
bgpInfoPeerEntry = _BgpInfoPeerEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 1, 1)
)
bgpInfoPeerEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "bgpInfoPeerIndex"),
)
if mibBuilder.loadTexts:
    bgpInfoPeerEntry.setStatus("current")
_BgpInfoPeerIndex_Type = Integer32
_BgpInfoPeerIndex_Object = MibTableColumn
bgpInfoPeerIndex = _BgpInfoPeerIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 1, 1, 1),
    _BgpInfoPeerIndex_Type()
)
bgpInfoPeerIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoPeerIndex.setStatus("current")
_BgpInfoPeerRemoteAddr_Type = IpAddress
_BgpInfoPeerRemoteAddr_Object = MibTableColumn
bgpInfoPeerRemoteAddr = _BgpInfoPeerRemoteAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 1, 1, 2),
    _BgpInfoPeerRemoteAddr_Type()
)
bgpInfoPeerRemoteAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoPeerRemoteAddr.setStatus("current")
_BgpInfoPeerVersion_Type = Integer32
_BgpInfoPeerVersion_Object = MibTableColumn
bgpInfoPeerVersion = _BgpInfoPeerVersion_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 1, 1, 3),
    _BgpInfoPeerVersion_Type()
)
bgpInfoPeerVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoPeerVersion.setStatus("current")
_BgpInfoPeerTtl_Type = Integer32
_BgpInfoPeerTtl_Object = MibTableColumn
bgpInfoPeerTtl = _BgpInfoPeerTtl_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 1, 1, 4),
    _BgpInfoPeerTtl_Type()
)
bgpInfoPeerTtl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoPeerTtl.setStatus("current")
_BgpInfoPeerRemoteAs_Type = Integer32
_BgpInfoPeerRemoteAs_Object = MibTableColumn
bgpInfoPeerRemoteAs = _BgpInfoPeerRemoteAs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 1, 1, 5),
    _BgpInfoPeerRemoteAs_Type()
)
bgpInfoPeerRemoteAs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoPeerRemoteAs.setStatus("current")
_BgpInfoPeerRouterId_Type = IpAddress
_BgpInfoPeerRouterId_Object = MibTableColumn
bgpInfoPeerRouterId = _BgpInfoPeerRouterId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 1, 1, 6),
    _BgpInfoPeerRouterId_Type()
)
bgpInfoPeerRouterId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoPeerRouterId.setStatus("current")


class _BgpInfoPeerState_Type(Integer32):
    """Custom type bgpInfoPeerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("idle", 1),
          ("connect", 2),
          ("active", 3),
          ("openSent", 4),
          ("openConfirm", 5),
          ("established", 6))
    )


_BgpInfoPeerState_Type.__name__ = "Integer32"
_BgpInfoPeerState_Object = MibTableColumn
bgpInfoPeerState = _BgpInfoPeerState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 1, 1, 7),
    _BgpInfoPeerState_Type()
)
bgpInfoPeerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoPeerState.setStatus("current")


class _BgpInfoPeerLastState_Type(Integer32):
    """Custom type bgpInfoPeerLastState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("idle", 1),
          ("connect", 2),
          ("active", 3),
          ("openSent", 4),
          ("openConfirm", 5),
          ("established", 6))
    )


_BgpInfoPeerLastState_Type.__name__ = "Integer32"
_BgpInfoPeerLastState_Object = MibTableColumn
bgpInfoPeerLastState = _BgpInfoPeerLastState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 1, 1, 8),
    _BgpInfoPeerLastState_Type()
)
bgpInfoPeerLastState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoPeerLastState.setStatus("current")
_BgpInfoTotalReceivedPackets_Type = Integer32
_BgpInfoTotalReceivedPackets_Object = MibTableColumn
bgpInfoTotalReceivedPackets = _BgpInfoTotalReceivedPackets_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 1, 1, 9),
    _BgpInfoTotalReceivedPackets_Type()
)
bgpInfoTotalReceivedPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoTotalReceivedPackets.setStatus("current")
_BgpInfoTotalSentPackets_Type = Integer32
_BgpInfoTotalSentPackets_Object = MibTableColumn
bgpInfoTotalSentPackets = _BgpInfoTotalSentPackets_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 1, 1, 10),
    _BgpInfoTotalSentPackets_Type()
)
bgpInfoTotalSentPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoTotalSentPackets.setStatus("current")
_BgpInfoReceivedUpdates_Type = Integer32
_BgpInfoReceivedUpdates_Object = MibTableColumn
bgpInfoReceivedUpdates = _BgpInfoReceivedUpdates_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 1, 1, 11),
    _BgpInfoReceivedUpdates_Type()
)
bgpInfoReceivedUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoReceivedUpdates.setStatus("current")
_BgpInfoSentUpdates_Type = Integer32
_BgpInfoSentUpdates_Object = MibTableColumn
bgpInfoSentUpdates = _BgpInfoSentUpdates_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 1, 1, 12),
    _BgpInfoSentUpdates_Type()
)
bgpInfoSentUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoSentUpdates.setStatus("current")
_BgpInfoKeepalive_Type = Integer32
_BgpInfoKeepalive_Object = MibTableColumn
bgpInfoKeepalive = _BgpInfoKeepalive_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 1, 1, 13),
    _BgpInfoKeepalive_Type()
)
bgpInfoKeepalive.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoKeepalive.setStatus("current")
_BgpInfoHoldtime_Type = Integer32
_BgpInfoHoldtime_Object = MibTableColumn
bgpInfoHoldtime = _BgpInfoHoldtime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 1, 1, 14),
    _BgpInfoHoldtime_Type()
)
bgpInfoHoldtime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoHoldtime.setStatus("current")
_BgpInfoMinAdvTime_Type = Integer32
_BgpInfoMinAdvTime_Object = MibTableColumn
bgpInfoMinAdvTime = _BgpInfoMinAdvTime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 1, 1, 15),
    _BgpInfoMinAdvTime_Type()
)
bgpInfoMinAdvTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoMinAdvTime.setStatus("current")
_BgpInfoLastErrorCode_Type = Integer32
_BgpInfoLastErrorCode_Object = MibTableColumn
bgpInfoLastErrorCode = _BgpInfoLastErrorCode_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 1, 1, 16),
    _BgpInfoLastErrorCode_Type()
)
bgpInfoLastErrorCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoLastErrorCode.setStatus("current")
_BgpInfoLastErrorSubCode_Type = Integer32
_BgpInfoLastErrorSubCode_Object = MibTableColumn
bgpInfoLastErrorSubCode = _BgpInfoLastErrorSubCode_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 1, 1, 17),
    _BgpInfoLastErrorSubCode_Type()
)
bgpInfoLastErrorSubCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoLastErrorSubCode.setStatus("current")
_BgpInfoEstTransitions_Type = Integer32
_BgpInfoEstTransitions_Object = MibTableColumn
bgpInfoEstTransitions = _BgpInfoEstTransitions_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 1, 1, 18),
    _BgpInfoEstTransitions_Type()
)
bgpInfoEstTransitions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoEstTransitions.setStatus("current")
_BgpInfoSummaryTable_Object = MibTable
bgpInfoSummaryTable = _BgpInfoSummaryTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 2)
)
if mibBuilder.loadTexts:
    bgpInfoSummaryTable.setStatus("current")
_BgpInfoSummaryEntry_Object = MibTableRow
bgpInfoSummaryEntry = _BgpInfoSummaryEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 2, 1)
)
bgpInfoSummaryEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "bgpInfoSummaryIndex"),
)
if mibBuilder.loadTexts:
    bgpInfoSummaryEntry.setStatus("current")
_BgpInfoSummaryIndex_Type = Integer32
_BgpInfoSummaryIndex_Object = MibTableColumn
bgpInfoSummaryIndex = _BgpInfoSummaryIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 2, 1, 1),
    _BgpInfoSummaryIndex_Type()
)
bgpInfoSummaryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoSummaryIndex.setStatus("current")
_BgpInfoSummaryRemoteAddr_Type = IpAddress
_BgpInfoSummaryRemoteAddr_Object = MibTableColumn
bgpInfoSummaryRemoteAddr = _BgpInfoSummaryRemoteAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 2, 1, 2),
    _BgpInfoSummaryRemoteAddr_Type()
)
bgpInfoSummaryRemoteAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoSummaryRemoteAddr.setStatus("current")
_BgpInfoSummaryVersion_Type = Integer32
_BgpInfoSummaryVersion_Object = MibTableColumn
bgpInfoSummaryVersion = _BgpInfoSummaryVersion_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 2, 1, 3),
    _BgpInfoSummaryVersion_Type()
)
bgpInfoSummaryVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoSummaryVersion.setStatus("current")
_BgpInfoSummaryRemoteAs_Type = Integer32
_BgpInfoSummaryRemoteAs_Object = MibTableColumn
bgpInfoSummaryRemoteAs = _BgpInfoSummaryRemoteAs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 2, 1, 4),
    _BgpInfoSummaryRemoteAs_Type()
)
bgpInfoSummaryRemoteAs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoSummaryRemoteAs.setStatus("current")


class _BgpInfoSummaryState_Type(Integer32):
    """Custom type bgpInfoSummaryState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("idle", 1),
          ("connect", 2),
          ("active", 3),
          ("openSent", 4),
          ("openConfirm", 5),
          ("established", 6))
    )


_BgpInfoSummaryState_Type.__name__ = "Integer32"
_BgpInfoSummaryState_Object = MibTableColumn
bgpInfoSummaryState = _BgpInfoSummaryState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 2, 1, 5),
    _BgpInfoSummaryState_Type()
)
bgpInfoSummaryState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoSummaryState.setStatus("current")
_BgpInfoSummaryTotalReceivedPackets_Type = Integer32
_BgpInfoSummaryTotalReceivedPackets_Object = MibTableColumn
bgpInfoSummaryTotalReceivedPackets = _BgpInfoSummaryTotalReceivedPackets_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 2, 1, 6),
    _BgpInfoSummaryTotalReceivedPackets_Type()
)
bgpInfoSummaryTotalReceivedPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoSummaryTotalReceivedPackets.setStatus("current")
_BgpInfoSummaryTotalSentPackets_Type = Integer32
_BgpInfoSummaryTotalSentPackets_Object = MibTableColumn
bgpInfoSummaryTotalSentPackets = _BgpInfoSummaryTotalSentPackets_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 2, 1, 7),
    _BgpInfoSummaryTotalSentPackets_Type()
)
bgpInfoSummaryTotalSentPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoSummaryTotalSentPackets.setStatus("current")
_BgpInfoRtrTable_Object = MibTable
bgpInfoRtrTable = _BgpInfoRtrTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 3)
)
if mibBuilder.loadTexts:
    bgpInfoRtrTable.setStatus("current")
_BgpInfoRtrTableEntry_Object = MibTableRow
bgpInfoRtrTableEntry = _BgpInfoRtrTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 3, 1)
)
bgpInfoRtrTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "bgpInfoIndex"),
)
if mibBuilder.loadTexts:
    bgpInfoRtrTableEntry.setStatus("current")
_BgpInfoIndex_Type = IpAddress
_BgpInfoIndex_Object = MibTableColumn
bgpInfoIndex = _BgpInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 3, 1, 1),
    _BgpInfoIndex_Type()
)
bgpInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoIndex.setStatus("current")
_BgpInfoNetwork_Type = IpAddress
_BgpInfoNetwork_Object = MibTableColumn
bgpInfoNetwork = _BgpInfoNetwork_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 3, 1, 2),
    _BgpInfoNetwork_Type()
)
bgpInfoNetwork.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoNetwork.setStatus("current")
_BgpInfoNextHop_Type = DisplayString
_BgpInfoNextHop_Object = MibTableColumn
bgpInfoNextHop = _BgpInfoNextHop_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 3, 1, 3),
    _BgpInfoNextHop_Type()
)
bgpInfoNextHop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoNextHop.setStatus("current")
_BgpInfoMetr_Type = DisplayString
_BgpInfoMetr_Object = MibTableColumn
bgpInfoMetr = _BgpInfoMetr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 3, 1, 4),
    _BgpInfoMetr_Type()
)
bgpInfoMetr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoMetr.setStatus("current")
_BgpInfoLcPrf_Type = DisplayString
_BgpInfoLcPrf_Object = MibTableColumn
bgpInfoLcPrf = _BgpInfoLcPrf_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 3, 1, 5),
    _BgpInfoLcPrf_Type()
)
bgpInfoLcPrf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoLcPrf.setStatus("current")
_BgpInfoWght_Type = DisplayString
_BgpInfoWght_Object = MibTableColumn
bgpInfoWght = _BgpInfoWght_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 3, 1, 6),
    _BgpInfoWght_Type()
)
bgpInfoWght.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoWght.setStatus("current")
_BgpInfoPath_Type = DisplayString
_BgpInfoPath_Object = MibTableColumn
bgpInfoPath = _BgpInfoPath_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 3, 1, 7),
    _BgpInfoPath_Type()
)
bgpInfoPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoPath.setStatus("current")
_BgpInfoOrigin_Type = DisplayString
_BgpInfoOrigin_Object = MibTableColumn
bgpInfoOrigin = _BgpInfoOrigin_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 3, 1, 8),
    _BgpInfoOrigin_Type()
)
bgpInfoOrigin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoOrigin.setStatus("current")
_BgpInfoMask_Type = DisplayString
_BgpInfoMask_Object = MibTableColumn
bgpInfoMask = _BgpInfoMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 3, 1, 9),
    _BgpInfoMask_Type()
)
bgpInfoMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoMask.setStatus("current")
_BgpInfoGroupTable_Object = MibTable
bgpInfoGroupTable = _BgpInfoGroupTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 4)
)
if mibBuilder.loadTexts:
    bgpInfoGroupTable.setStatus("current")
_BgpInfoGroupEntry_Object = MibTableRow
bgpInfoGroupEntry = _BgpInfoGroupEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 4, 1)
)
bgpInfoGroupEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "bgpInfoGroupIndex"),
)
if mibBuilder.loadTexts:
    bgpInfoGroupEntry.setStatus("current")
_BgpInfoGroupIndex_Type = Integer32
_BgpInfoGroupIndex_Object = MibTableColumn
bgpInfoGroupIndex = _BgpInfoGroupIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 4, 1, 1),
    _BgpInfoGroupIndex_Type()
)
bgpInfoGroupIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoGroupIndex.setStatus("current")
_BgpInfoGroupName_Type = DisplayString
_BgpInfoGroupName_Object = MibTableColumn
bgpInfoGroupName = _BgpInfoGroupName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 4, 1, 2),
    _BgpInfoGroupName_Type()
)
bgpInfoGroupName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoGroupName.setStatus("current")
_BgpInfoGroupRemoteAddr_Type = IpAddress
_BgpInfoGroupRemoteAddr_Object = MibTableColumn
bgpInfoGroupRemoteAddr = _BgpInfoGroupRemoteAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 4, 1, 3),
    _BgpInfoGroupRemoteAddr_Type()
)
bgpInfoGroupRemoteAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoGroupRemoteAddr.setStatus("current")
_BgpInfoGroupRemoteMask_Type = IpAddress
_BgpInfoGroupRemoteMask_Object = MibTableColumn
bgpInfoGroupRemoteMask = _BgpInfoGroupRemoteMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 4, 1, 4),
    _BgpInfoGroupRemoteMask_Type()
)
bgpInfoGroupRemoteMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoGroupRemoteMask.setStatus("current")
_BgpInfoGroupLimit_Type = Integer32
_BgpInfoGroupLimit_Object = MibTableColumn
bgpInfoGroupLimit = _BgpInfoGroupLimit_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 4, 1, 5),
    _BgpInfoGroupLimit_Type()
)
bgpInfoGroupLimit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoGroupLimit.setStatus("current")
_BgpInfoGroupPeersNum_Type = Integer32
_BgpInfoGroupPeersNum_Object = MibTableColumn
bgpInfoGroupPeersNum = _BgpInfoGroupPeersNum_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 4, 1, 6),
    _BgpInfoGroupPeersNum_Type()
)
bgpInfoGroupPeersNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoGroupPeersNum.setStatus("current")


class _BgpInfoGroupState_Type(Integer32):
    """Custom type bgpInfoGroupState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_BgpInfoGroupState_Type.__name__ = "Integer32"
_BgpInfoGroupState_Object = MibTableColumn
bgpInfoGroupState = _BgpInfoGroupState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 4, 1, 7),
    _BgpInfoGroupState_Type()
)
bgpInfoGroupState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoGroupState.setStatus("current")
_BgpInfoGroupRASTable_Object = MibTable
bgpInfoGroupRASTable = _BgpInfoGroupRASTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 5)
)
if mibBuilder.loadTexts:
    bgpInfoGroupRASTable.setStatus("current")
_BgpInfoGroupRASEntry_Object = MibTableRow
bgpInfoGroupRASEntry = _BgpInfoGroupRASEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 5, 1)
)
bgpInfoGroupRASEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "bgpInfoGroupIndex"),
    (0, "IBM-GbTOR-G8264T-MIB", "bgpInfoGroupRASIndex"),
)
if mibBuilder.loadTexts:
    bgpInfoGroupRASEntry.setStatus("current")
_BgpInfoGroupRASIndex_Type = Integer32
_BgpInfoGroupRASIndex_Object = MibTableColumn
bgpInfoGroupRASIndex = _BgpInfoGroupRASIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 5, 1, 1),
    _BgpInfoGroupRASIndex_Type()
)
bgpInfoGroupRASIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoGroupRASIndex.setStatus("current")
_BgpInfoGroupRAS_Type = Integer32
_BgpInfoGroupRAS_Object = MibTableColumn
bgpInfoGroupRAS = _BgpInfoGroupRAS_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 5, 1, 2),
    _BgpInfoGroupRAS_Type()
)
bgpInfoGroupRAS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoGroupRAS.setStatus("current")
_BgpInfoDynamicPeerTable_Object = MibTable
bgpInfoDynamicPeerTable = _BgpInfoDynamicPeerTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 6)
)
if mibBuilder.loadTexts:
    bgpInfoDynamicPeerTable.setStatus("current")
_BgpInfoDynamicPeerEntry_Object = MibTableRow
bgpInfoDynamicPeerEntry = _BgpInfoDynamicPeerEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 6, 1)
)
bgpInfoDynamicPeerEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "bgpInfoDynamicPeerIndex"),
)
if mibBuilder.loadTexts:
    bgpInfoDynamicPeerEntry.setStatus("current")
_BgpInfoDynamicPeerIndex_Type = Integer32
_BgpInfoDynamicPeerIndex_Object = MibTableColumn
bgpInfoDynamicPeerIndex = _BgpInfoDynamicPeerIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 6, 1, 1),
    _BgpInfoDynamicPeerIndex_Type()
)
bgpInfoDynamicPeerIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoDynamicPeerIndex.setStatus("current")
_BgpInfoDynamicPeerRemoteAddr_Type = IpAddress
_BgpInfoDynamicPeerRemoteAddr_Object = MibTableColumn
bgpInfoDynamicPeerRemoteAddr = _BgpInfoDynamicPeerRemoteAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 6, 1, 2),
    _BgpInfoDynamicPeerRemoteAddr_Type()
)
bgpInfoDynamicPeerRemoteAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoDynamicPeerRemoteAddr.setStatus("current")
_BgpInfoDynamicPeerGroup_Type = Integer32
_BgpInfoDynamicPeerGroup_Object = MibTableColumn
bgpInfoDynamicPeerGroup = _BgpInfoDynamicPeerGroup_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 6, 1, 3),
    _BgpInfoDynamicPeerGroup_Type()
)
bgpInfoDynamicPeerGroup.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoDynamicPeerGroup.setStatus("current")
_BgpInfoDynamicPeerVersion_Type = Integer32
_BgpInfoDynamicPeerVersion_Object = MibTableColumn
bgpInfoDynamicPeerVersion = _BgpInfoDynamicPeerVersion_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 6, 1, 4),
    _BgpInfoDynamicPeerVersion_Type()
)
bgpInfoDynamicPeerVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoDynamicPeerVersion.setStatus("current")
_BgpInfoDynamicPeerTtl_Type = Integer32
_BgpInfoDynamicPeerTtl_Object = MibTableColumn
bgpInfoDynamicPeerTtl = _BgpInfoDynamicPeerTtl_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 6, 1, 5),
    _BgpInfoDynamicPeerTtl_Type()
)
bgpInfoDynamicPeerTtl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoDynamicPeerTtl.setStatus("current")
_BgpInfoDynamicPeerRemoteAs_Type = Integer32
_BgpInfoDynamicPeerRemoteAs_Object = MibTableColumn
bgpInfoDynamicPeerRemoteAs = _BgpInfoDynamicPeerRemoteAs_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 6, 1, 6),
    _BgpInfoDynamicPeerRemoteAs_Type()
)
bgpInfoDynamicPeerRemoteAs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoDynamicPeerRemoteAs.setStatus("current")
_BgpInfoDynamicPeerRouterId_Type = IpAddress
_BgpInfoDynamicPeerRouterId_Object = MibTableColumn
bgpInfoDynamicPeerRouterId = _BgpInfoDynamicPeerRouterId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 6, 1, 7),
    _BgpInfoDynamicPeerRouterId_Type()
)
bgpInfoDynamicPeerRouterId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoDynamicPeerRouterId.setStatus("current")
_BgpInfoDynamicTotalReceivedPackets_Type = Integer32
_BgpInfoDynamicTotalReceivedPackets_Object = MibTableColumn
bgpInfoDynamicTotalReceivedPackets = _BgpInfoDynamicTotalReceivedPackets_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 6, 1, 8),
    _BgpInfoDynamicTotalReceivedPackets_Type()
)
bgpInfoDynamicTotalReceivedPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoDynamicTotalReceivedPackets.setStatus("current")
_BgpInfoDynamicTotalSentPackets_Type = Integer32
_BgpInfoDynamicTotalSentPackets_Object = MibTableColumn
bgpInfoDynamicTotalSentPackets = _BgpInfoDynamicTotalSentPackets_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 6, 1, 9),
    _BgpInfoDynamicTotalSentPackets_Type()
)
bgpInfoDynamicTotalSentPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoDynamicTotalSentPackets.setStatus("current")
_BgpInfoDynamicReceivedUpdates_Type = Integer32
_BgpInfoDynamicReceivedUpdates_Object = MibTableColumn
bgpInfoDynamicReceivedUpdates = _BgpInfoDynamicReceivedUpdates_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 6, 1, 10),
    _BgpInfoDynamicReceivedUpdates_Type()
)
bgpInfoDynamicReceivedUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoDynamicReceivedUpdates.setStatus("current")
_BgpInfoDynamicSentUpdates_Type = Integer32
_BgpInfoDynamicSentUpdates_Object = MibTableColumn
bgpInfoDynamicSentUpdates = _BgpInfoDynamicSentUpdates_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 6, 1, 11),
    _BgpInfoDynamicSentUpdates_Type()
)
bgpInfoDynamicSentUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoDynamicSentUpdates.setStatus("current")
_BgpInfoDynamicKeepalive_Type = Integer32
_BgpInfoDynamicKeepalive_Object = MibTableColumn
bgpInfoDynamicKeepalive = _BgpInfoDynamicKeepalive_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 6, 1, 12),
    _BgpInfoDynamicKeepalive_Type()
)
bgpInfoDynamicKeepalive.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoDynamicKeepalive.setStatus("current")
_BgpInfoDynamicHoldtime_Type = Integer32
_BgpInfoDynamicHoldtime_Object = MibTableColumn
bgpInfoDynamicHoldtime = _BgpInfoDynamicHoldtime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 6, 1, 13),
    _BgpInfoDynamicHoldtime_Type()
)
bgpInfoDynamicHoldtime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoDynamicHoldtime.setStatus("current")
_BgpInfoDynamicMinAdvTime_Type = Integer32
_BgpInfoDynamicMinAdvTime_Object = MibTableColumn
bgpInfoDynamicMinAdvTime = _BgpInfoDynamicMinAdvTime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 11, 6, 1, 14),
    _BgpInfoDynamicMinAdvTime_Type()
)
bgpInfoDynamicMinAdvTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bgpInfoDynamicMinAdvTime.setStatus("current")
_NbrInfo_ObjectIdentity = ObjectIdentity
nbrInfo = _NbrInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 12)
)
_NbrInfoTable_Object = MibTable
nbrInfoTable = _NbrInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 12, 1)
)
if mibBuilder.loadTexts:
    nbrInfoTable.setStatus("current")
_NbrInfoEntry_Object = MibTableRow
nbrInfoEntry = _NbrInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 12, 1, 1)
)
nbrInfoEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "nbrInfoIndex"),
)
if mibBuilder.loadTexts:
    nbrInfoEntry.setStatus("current")
_NbrInfoIndex_Type = Integer32
_NbrInfoIndex_Object = MibTableColumn
nbrInfoIndex = _NbrInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 12, 1, 1, 1),
    _NbrInfoIndex_Type()
)
nbrInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nbrInfoIndex.setStatus("current")
_NbrInfoDestIp_Type = DisplayString
_NbrInfoDestIp_Object = MibTableColumn
nbrInfoDestIp = _NbrInfoDestIp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 12, 1, 1, 2),
    _NbrInfoDestIp_Type()
)
nbrInfoDestIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nbrInfoDestIp.setStatus("current")


class _NbrInfoState_Type(Integer32):
    """Custom type nbrInfoState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("static", 1),
          ("reach", 2),
          ("incomplete", 3),
          ("stale", 4),
          ("delay", 5),
          ("probe", 6),
          ("unknown", 7))
    )


_NbrInfoState_Type.__name__ = "Integer32"
_NbrInfoState_Object = MibTableColumn
nbrInfoState = _NbrInfoState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 12, 1, 1, 3),
    _NbrInfoState_Type()
)
nbrInfoState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nbrInfoState.setStatus("current")
_NbrInfoMacAddr_Type = PhysAddress
_NbrInfoMacAddr_Object = MibTableColumn
nbrInfoMacAddr = _NbrInfoMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 12, 1, 1, 4),
    _NbrInfoMacAddr_Type()
)
nbrInfoMacAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nbrInfoMacAddr.setStatus("current")
_NbrInfoVlanId_Type = Integer32
_NbrInfoVlanId_Object = MibTableColumn
nbrInfoVlanId = _NbrInfoVlanId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 12, 1, 1, 5),
    _NbrInfoVlanId_Type()
)
nbrInfoVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nbrInfoVlanId.setStatus("current")
_NbrInfoPortNum_Type = Integer32
_NbrInfoPortNum_Object = MibTableColumn
nbrInfoPortNum = _NbrInfoPortNum_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 12, 1, 1, 6),
    _NbrInfoPortNum_Type()
)
nbrInfoPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nbrInfoPortNum.setStatus("current")
_NbrInfoAge_Type = Integer32
_NbrInfoAge_Object = MibTableColumn
nbrInfoAge = _NbrInfoAge_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 12, 1, 1, 7),
    _NbrInfoAge_Type()
)
nbrInfoAge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nbrInfoAge.setStatus("current")
_NbrInfoInterface_Type = Integer32
_NbrInfoInterface_Object = MibTableColumn
nbrInfoInterface = _NbrInfoInterface_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 12, 1, 1, 8),
    _NbrInfoInterface_Type()
)
nbrInfoInterface.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nbrInfoInterface.setStatus("current")


class _NbrClear_Type(Integer32):
    """Custom type nbrClear based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_NbrClear_Type.__name__ = "Integer32"
_NbrClear_Object = MibScalar
nbrClear = _NbrClear_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 12, 2),
    _NbrClear_Type()
)
nbrClear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    nbrClear.setStatus("current")
_GatewayIPv6Info_ObjectIdentity = ObjectIdentity
gatewayIPv6Info = _GatewayIPv6Info_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 13)
)
_GatewayIPv6InfoTable_Object = MibTable
gatewayIPv6InfoTable = _GatewayIPv6InfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 13, 1)
)
if mibBuilder.loadTexts:
    gatewayIPv6InfoTable.setStatus("current")
_GatewayIPv6InfoEntry_Object = MibTableRow
gatewayIPv6InfoEntry = _GatewayIPv6InfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 13, 1, 1)
)
gatewayIPv6InfoEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipGatewayIPv6InfoIndex"),
)
if mibBuilder.loadTexts:
    gatewayIPv6InfoEntry.setStatus("current")
_IpGatewayIPv6InfoIndex_Type = Integer32
_IpGatewayIPv6InfoIndex_Object = MibTableColumn
ipGatewayIPv6InfoIndex = _IpGatewayIPv6InfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 13, 1, 1, 1),
    _IpGatewayIPv6InfoIndex_Type()
)
ipGatewayIPv6InfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipGatewayIPv6InfoIndex.setStatus("current")
_IpGatewayIPv6InfoAddr_Type = IpAddress
_IpGatewayIPv6InfoAddr_Object = MibTableColumn
ipGatewayIPv6InfoAddr = _IpGatewayIPv6InfoAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 13, 1, 1, 2),
    _IpGatewayIPv6InfoAddr_Type()
)
ipGatewayIPv6InfoAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipGatewayIPv6InfoAddr.setStatus("current")


class _IpGatewayIPv6InfoState_Type(Integer32):
    """Custom type ipGatewayIPv6InfoState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_IpGatewayIPv6InfoState_Type.__name__ = "Integer32"
_IpGatewayIPv6InfoState_Object = MibTableColumn
ipGatewayIPv6InfoState = _IpGatewayIPv6InfoState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 13, 1, 1, 3),
    _IpGatewayIPv6InfoState_Type()
)
ipGatewayIPv6InfoState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipGatewayIPv6InfoState.setStatus("current")
_IpRoute6Info_ObjectIdentity = ObjectIdentity
ipRoute6Info = _IpRoute6Info_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 14)
)
_IpRoute6InfoTable_Object = MibTable
ipRoute6InfoTable = _IpRoute6InfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 14, 1)
)
if mibBuilder.loadTexts:
    ipRoute6InfoTable.setStatus("current")
_IpRoute6InfoEntry_Object = MibTableRow
ipRoute6InfoEntry = _IpRoute6InfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 14, 1, 1)
)
ipRoute6InfoEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipRoute6InfoIndx"),
)
if mibBuilder.loadTexts:
    ipRoute6InfoEntry.setStatus("current")
_IpRoute6InfoIndx_Type = Integer32
_IpRoute6InfoIndx_Object = MibTableColumn
ipRoute6InfoIndx = _IpRoute6InfoIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 14, 1, 1, 1),
    _IpRoute6InfoIndx_Type()
)
ipRoute6InfoIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipRoute6InfoIndx.setStatus("current")
_IpRoute6InfoDestIp_Type = DisplayString
_IpRoute6InfoDestIp_Object = MibTableColumn
ipRoute6InfoDestIp = _IpRoute6InfoDestIp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 14, 1, 1, 2),
    _IpRoute6InfoDestIp_Type()
)
ipRoute6InfoDestIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipRoute6InfoDestIp.setStatus("current")


class _IpRoute6InfoPrefLen_Type(Integer32):
    """Custom type ipRoute6InfoPrefLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_IpRoute6InfoPrefLen_Type.__name__ = "Integer32"
_IpRoute6InfoPrefLen_Object = MibTableColumn
ipRoute6InfoPrefLen = _IpRoute6InfoPrefLen_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 14, 1, 1, 3),
    _IpRoute6InfoPrefLen_Type()
)
ipRoute6InfoPrefLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipRoute6InfoPrefLen.setStatus("current")
_IpRoute6InfoInterface_Type = Integer32
_IpRoute6InfoInterface_Object = MibTableColumn
ipRoute6InfoInterface = _IpRoute6InfoInterface_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 14, 1, 1, 4),
    _IpRoute6InfoInterface_Type()
)
ipRoute6InfoInterface.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipRoute6InfoInterface.setStatus("current")
_IpRoute6InfoNextHop_Type = DisplayString
_IpRoute6InfoNextHop_Object = MibTableColumn
ipRoute6InfoNextHop = _IpRoute6InfoNextHop_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 14, 1, 1, 5),
    _IpRoute6InfoNextHop_Type()
)
ipRoute6InfoNextHop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipRoute6InfoNextHop.setStatus("current")


class _IpRoute6InfoProto_Type(Integer32):
    """Custom type ipRoute6InfoProto based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("local", 2),
          ("static", 3),
          ("nbrdis", 4),
          ("ripng", 5),
          ("ospf", 6),
          ("intmgmt", 10),
          ("extmgmt", 11),
          ("intmgmtND", 12),
          ("extmgmtND", 13))
    )


_IpRoute6InfoProto_Type.__name__ = "Integer32"
_IpRoute6InfoProto_Object = MibTableColumn
ipRoute6InfoProto = _IpRoute6InfoProto_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 14, 1, 1, 6),
    _IpRoute6InfoProto_Type()
)
ipRoute6InfoProto.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipRoute6InfoProto.setStatus("current")
_DhcpInfo_ObjectIdentity = ObjectIdentity
dhcpInfo = _DhcpInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 15)
)
_DhcpInfoMacAddr_Type = DisplayString
_DhcpInfoMacAddr_Object = MibScalar
dhcpInfoMacAddr = _DhcpInfoMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 15, 1),
    _DhcpInfoMacAddr_Type()
)
dhcpInfoMacAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpInfoMacAddr.setStatus("current")
_DhcpInfoAddr_Type = IpAddress
_DhcpInfoAddr_Object = MibScalar
dhcpInfoAddr = _DhcpInfoAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 15, 2),
    _DhcpInfoAddr_Type()
)
dhcpInfoAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpInfoAddr.setStatus("current")
_DhcpInfoSubnetMask_Type = IpAddress
_DhcpInfoSubnetMask_Object = MibScalar
dhcpInfoSubnetMask = _DhcpInfoSubnetMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 15, 3),
    _DhcpInfoSubnetMask_Type()
)
dhcpInfoSubnetMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpInfoSubnetMask.setStatus("current")
_DhcpInfoDefaultGateway_Type = IpAddress
_DhcpInfoDefaultGateway_Object = MibScalar
dhcpInfoDefaultGateway = _DhcpInfoDefaultGateway_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 15, 4),
    _DhcpInfoDefaultGateway_Type()
)
dhcpInfoDefaultGateway.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpInfoDefaultGateway.setStatus("current")
_DhcpInfoServer_Type = IpAddress
_DhcpInfoServer_Object = MibScalar
dhcpInfoServer = _DhcpInfoServer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 15, 5),
    _DhcpInfoServer_Type()
)
dhcpInfoServer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpInfoServer.setStatus("current")


class _DhcpInfoLeaseObtained_Type(DisplayString):
    """Custom type dhcpInfoLeaseObtained based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_DhcpInfoLeaseObtained_Type.__name__ = "DisplayString"
_DhcpInfoLeaseObtained_Object = MibScalar
dhcpInfoLeaseObtained = _DhcpInfoLeaseObtained_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 15, 6),
    _DhcpInfoLeaseObtained_Type()
)
dhcpInfoLeaseObtained.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpInfoLeaseObtained.setStatus("current")


class _DhcpInfoLeaseExpires_Type(DisplayString):
    """Custom type dhcpInfoLeaseExpires based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_DhcpInfoLeaseExpires_Type.__name__ = "DisplayString"
_DhcpInfoLeaseExpires_Object = MibScalar
dhcpInfoLeaseExpires = _DhcpInfoLeaseExpires_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 15, 7),
    _DhcpInfoLeaseExpires_Type()
)
dhcpInfoLeaseExpires.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpInfoLeaseExpires.setStatus("current")
_IpIntfLoopbackInfo_ObjectIdentity = ObjectIdentity
ipIntfLoopbackInfo = _IpIntfLoopbackInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 16)
)
_IpIntfLoopbackInfoTable_Object = MibTable
ipIntfLoopbackInfoTable = _IpIntfLoopbackInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 16, 1)
)
if mibBuilder.loadTexts:
    ipIntfLoopbackInfoTable.setStatus("current")
_IntfLoopbackInfoEntry_Object = MibTableRow
intfLoopbackInfoEntry = _IntfLoopbackInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 16, 1, 1)
)
intfLoopbackInfoEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "intfLoopbackInfoIndex"),
)
if mibBuilder.loadTexts:
    intfLoopbackInfoEntry.setStatus("current")
_IntfLoopbackInfoIndex_Type = Integer32
_IntfLoopbackInfoIndex_Object = MibTableColumn
intfLoopbackInfoIndex = _IntfLoopbackInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 16, 1, 1, 1),
    _IntfLoopbackInfoIndex_Type()
)
intfLoopbackInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    intfLoopbackInfoIndex.setStatus("current")
_IntfLoopbackInfoAddr_Type = DisplayString
_IntfLoopbackInfoAddr_Object = MibTableColumn
intfLoopbackInfoAddr = _IntfLoopbackInfoAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 16, 1, 1, 3),
    _IntfLoopbackInfoAddr_Type()
)
intfLoopbackInfoAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    intfLoopbackInfoAddr.setStatus("current")
_IntfLoopbackInfoNetMask_Type = DisplayString
_IntfLoopbackInfoNetMask_Object = MibTableColumn
intfLoopbackInfoNetMask = _IntfLoopbackInfoNetMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 16, 1, 1, 4),
    _IntfLoopbackInfoNetMask_Type()
)
intfLoopbackInfoNetMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    intfLoopbackInfoNetMask.setStatus("current")
_IntfLoopbackInfoBcastAddr_Type = DisplayString
_IntfLoopbackInfoBcastAddr_Object = MibTableColumn
intfLoopbackInfoBcastAddr = _IntfLoopbackInfoBcastAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 16, 1, 1, 5),
    _IntfLoopbackInfoBcastAddr_Type()
)
intfLoopbackInfoBcastAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    intfLoopbackInfoBcastAddr.setStatus("current")


class _IntfLoopbackInfoStatus_Type(Integer32):
    """Custom type intfLoopbackInfoStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("up", 1),
          ("down", 2),
          ("disabled", 3))
    )


_IntfLoopbackInfoStatus_Type.__name__ = "Integer32"
_IntfLoopbackInfoStatus_Object = MibTableColumn
intfLoopbackInfoStatus = _IntfLoopbackInfoStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 16, 1, 1, 7),
    _IntfLoopbackInfoStatus_Type()
)
intfLoopbackInfoStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    intfLoopbackInfoStatus.setStatus("current")
_Ospf3Info_ObjectIdentity = ObjectIdentity
ospf3Info = _Ospf3Info_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18)
)
_Ospf3GeneralInfo_ObjectIdentity = ObjectIdentity
ospf3GeneralInfo = _Ospf3GeneralInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 1)
)


class _Ospf3Version_Type(Integer32):
    """Custom type ospf3Version based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            3
        )
    )
    namedValues = NamedValues(
        ("ospfVersion3", 3)
    )


_Ospf3Version_Type.__name__ = "Integer32"
_Ospf3Version_Object = MibScalar
ospf3Version = _Ospf3Version_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 1, 1),
    _Ospf3Version_Type()
)
ospf3Version.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3Version.setStatus("current")
_Ospf3RouterID_Type = IpAddress
_Ospf3RouterID_Object = MibScalar
ospf3RouterID = _Ospf3RouterID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 1, 2),
    _Ospf3RouterID_Type()
)
ospf3RouterID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3RouterID.setStatus("current")
_Ospf3StartTime_Type = Integer32
_Ospf3StartTime_Object = MibScalar
ospf3StartTime = _Ospf3StartTime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 1, 3),
    _Ospf3StartTime_Type()
)
ospf3StartTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3StartTime.setStatus("current")
_Ospf3ProcessUptime_Type = Counter32
_Ospf3ProcessUptime_Object = MibScalar
ospf3ProcessUptime = _Ospf3ProcessUptime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 1, 4),
    _Ospf3ProcessUptime_Type()
)
ospf3ProcessUptime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3ProcessUptime.setStatus("current")


class _Ospf3AreaBorderRouter_Type(Integer32):
    """Custom type ospf3AreaBorderRouter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("yes", 1),
          ("no", 2))
    )


_Ospf3AreaBorderRouter_Type.__name__ = "Integer32"
_Ospf3AreaBorderRouter_Object = MibScalar
ospf3AreaBorderRouter = _Ospf3AreaBorderRouter_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 1, 5),
    _Ospf3AreaBorderRouter_Type()
)
ospf3AreaBorderRouter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaBorderRouter.setStatus("current")


class _Ospf3ASBoundaryRouter_Type(Integer32):
    """Custom type ospf3ASBoundaryRouter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("yes", 1),
          ("no", 2))
    )


_Ospf3ASBoundaryRouter_Type.__name__ = "Integer32"
_Ospf3ASBoundaryRouter_Object = MibScalar
ospf3ASBoundaryRouter = _Ospf3ASBoundaryRouter_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 1, 6),
    _Ospf3ASBoundaryRouter_Type()
)
ospf3ASBoundaryRouter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3ASBoundaryRouter.setStatus("current")
_Ospf3ExternalLsa_Type = Integer32
_Ospf3ExternalLsa_Object = MibScalar
ospf3ExternalLsa = _Ospf3ExternalLsa_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 1, 7),
    _Ospf3ExternalLsa_Type()
)
ospf3ExternalLsa.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3ExternalLsa.setStatus("current")
_Ospf3IntfCountForRouter_Type = Integer32
_Ospf3IntfCountForRouter_Object = MibScalar
ospf3IntfCountForRouter = _Ospf3IntfCountForRouter_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 1, 8),
    _Ospf3IntfCountForRouter_Type()
)
ospf3IntfCountForRouter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IntfCountForRouter.setStatus("current")
_Ospf3VlinkCountForRouter_Type = Integer32
_Ospf3VlinkCountForRouter_Object = MibScalar
ospf3VlinkCountForRouter = _Ospf3VlinkCountForRouter_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 1, 9),
    _Ospf3VlinkCountForRouter_Type()
)
ospf3VlinkCountForRouter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3VlinkCountForRouter.setStatus("current")
_Ospf3NewLsaReceived_Type = Integer32
_Ospf3NewLsaReceived_Object = MibScalar
ospf3NewLsaReceived = _Ospf3NewLsaReceived_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 1, 10),
    _Ospf3NewLsaReceived_Type()
)
ospf3NewLsaReceived.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3NewLsaReceived.setStatus("current")
_Ospf3TotalLsaOriginated_Type = Integer32
_Ospf3TotalLsaOriginated_Object = MibScalar
ospf3TotalLsaOriginated = _Ospf3TotalLsaOriginated_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 1, 11),
    _Ospf3TotalLsaOriginated_Type()
)
ospf3TotalLsaOriginated.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3TotalLsaOriginated.setStatus("current")
_Ospf3TotalNumberOfAsScopeLsas_Type = Integer32
_Ospf3TotalNumberOfAsScopeLsas_Object = MibScalar
ospf3TotalNumberOfAsScopeLsas = _Ospf3TotalNumberOfAsScopeLsas_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 1, 12),
    _Ospf3TotalNumberOfAsScopeLsas_Type()
)
ospf3TotalNumberOfAsScopeLsas.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3TotalNumberOfAsScopeLsas.setStatus("current")
_Ospf3TotalNeighbours_Type = Integer32
_Ospf3TotalNeighbours_Object = MibScalar
ospf3TotalNeighbours = _Ospf3TotalNeighbours_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 1, 13),
    _Ospf3TotalNeighbours_Type()
)
ospf3TotalNeighbours.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3TotalNeighbours.setStatus("current")
_Ospf3NbrInXchgOrLoadState_Type = Integer32
_Ospf3NbrInXchgOrLoadState_Object = MibScalar
ospf3NbrInXchgOrLoadState = _Ospf3NbrInXchgOrLoadState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 1, 14),
    _Ospf3NbrInXchgOrLoadState_Type()
)
ospf3NbrInXchgOrLoadState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3NbrInXchgOrLoadState.setStatus("current")
_Ospf3TotalAreas_Type = Integer32
_Ospf3TotalAreas_Object = MibScalar
ospf3TotalAreas = _Ospf3TotalAreas_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 1, 15),
    _Ospf3TotalAreas_Type()
)
ospf3TotalAreas.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3TotalAreas.setStatus("current")
_Ospf3TotalActiveAreas_Type = Integer32
_Ospf3TotalActiveAreas_Object = MibScalar
ospf3TotalActiveAreas = _Ospf3TotalActiveAreas_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 1, 16),
    _Ospf3TotalActiveAreas_Type()
)
ospf3TotalActiveAreas.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3TotalActiveAreas.setStatus("current")
_Ospf3TotalNssaAreas_Type = Integer32
_Ospf3TotalNssaAreas_Object = MibScalar
ospf3TotalNssaAreas = _Ospf3TotalNssaAreas_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 1, 17),
    _Ospf3TotalNssaAreas_Type()
)
ospf3TotalNssaAreas.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3TotalNssaAreas.setStatus("current")


class _Ospf3OverFlowState_Type(Integer32):
    """Custom type ospf3OverFlowState based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_Ospf3OverFlowState_Type.__name__ = "Integer32"
_Ospf3OverFlowState_Object = MibScalar
ospf3OverFlowState = _Ospf3OverFlowState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 1, 18),
    _Ospf3OverFlowState_Type()
)
ospf3OverFlowState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3OverFlowState.setStatus("current")


class _Ospf3SpfDelay_Type(Integer32):
    """Custom type ospf3SpfDelay based on Integer32"""
    defaultValue = 5

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_Ospf3SpfDelay_Type.__name__ = "Integer32"
_Ospf3SpfDelay_Object = MibScalar
ospf3SpfDelay = _Ospf3SpfDelay_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 1, 19),
    _Ospf3SpfDelay_Type()
)
ospf3SpfDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3SpfDelay.setStatus("current")


class _Ospf3SpfHoldTime_Type(Integer32):
    """Custom type ospf3SpfHoldTime based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_Ospf3SpfHoldTime_Type.__name__ = "Integer32"
_Ospf3SpfHoldTime_Object = MibScalar
ospf3SpfHoldTime = _Ospf3SpfHoldTime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 1, 20),
    _Ospf3SpfHoldTime_Type()
)
ospf3SpfHoldTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3SpfHoldTime.setStatus("current")


class _Ospf3ABRType_Type(Integer32):
    """Custom type ospf3ABRType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("standardABR", 1),
          ("ciscoABR", 2),
          ("ibmABR", 3))
    )


_Ospf3ABRType_Type.__name__ = "Integer32"
_Ospf3ABRType_Object = MibScalar
ospf3ABRType = _Ospf3ABRType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 1, 21),
    _Ospf3ABRType_Type()
)
ospf3ABRType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3ABRType.setStatus("current")


class _Ospf3NssaAsbrDefRtTrans_Type(Integer32):
    """Custom type ospf3NssaAsbrDefRtTrans based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_Ospf3NssaAsbrDefRtTrans_Type.__name__ = "Integer32"
_Ospf3NssaAsbrDefRtTrans_Object = MibScalar
ospf3NssaAsbrDefRtTrans = _Ospf3NssaAsbrDefRtTrans_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 1, 22),
    _Ospf3NssaAsbrDefRtTrans_Type()
)
ospf3NssaAsbrDefRtTrans.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3NssaAsbrDefRtTrans.setStatus("current")
_Ospf3AreaInfoTable_Object = MibTable
ospf3AreaInfoTable = _Ospf3AreaInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 2)
)
if mibBuilder.loadTexts:
    ospf3AreaInfoTable.setStatus("current")
_Ospf3AreaInfoEntry_Object = MibTableRow
ospf3AreaInfoEntry = _Ospf3AreaInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 2, 1)
)
ospf3AreaInfoEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospf3AreaInfoIndex"),
)
if mibBuilder.loadTexts:
    ospf3AreaInfoEntry.setStatus("current")
_Ospf3AreaInfoIndex_Type = Integer32
_Ospf3AreaInfoIndex_Object = MibTableColumn
ospf3AreaInfoIndex = _Ospf3AreaInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 2, 1, 1),
    _Ospf3AreaInfoIndex_Type()
)
ospf3AreaInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaInfoIndex.setStatus("current")
_Ospf3AreaInfoId_Type = IpAddress
_Ospf3AreaInfoId_Object = MibTableColumn
ospf3AreaInfoId = _Ospf3AreaInfoId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 2, 1, 2),
    _Ospf3AreaInfoId_Type()
)
ospf3AreaInfoId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaInfoId.setStatus("current")


class _Ospf3AreaInfoStatus_Type(Integer32):
    """Custom type ospf3AreaInfoStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("notInService", 2),
          ("notReady", 3),
          ("createAndGo", 4),
          ("createAndWait", 5),
          ("destroy", 6))
    )


_Ospf3AreaInfoStatus_Type.__name__ = "Integer32"
_Ospf3AreaInfoStatus_Object = MibTableColumn
ospf3AreaInfoStatus = _Ospf3AreaInfoStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 2, 1, 3),
    _Ospf3AreaInfoStatus_Type()
)
ospf3AreaInfoStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaInfoStatus.setStatus("current")
_Ospf3TotalNumberOfInterfaces_Type = Integer32
_Ospf3TotalNumberOfInterfaces_Object = MibTableColumn
ospf3TotalNumberOfInterfaces = _Ospf3TotalNumberOfInterfaces_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 2, 1, 4),
    _Ospf3TotalNumberOfInterfaces_Type()
)
ospf3TotalNumberOfInterfaces.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3TotalNumberOfInterfaces.setStatus("current")
_Ospf3NumberOfInterfacesUp_Type = Integer32
_Ospf3NumberOfInterfacesUp_Object = MibTableColumn
ospf3NumberOfInterfacesUp = _Ospf3NumberOfInterfacesUp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 2, 1, 5),
    _Ospf3NumberOfInterfacesUp_Type()
)
ospf3NumberOfInterfacesUp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3NumberOfInterfacesUp.setStatus("current")
_Ospf3AreaInfoSPF_Type = Integer32
_Ospf3AreaInfoSPF_Object = MibTableColumn
ospf3AreaInfoSPF = _Ospf3AreaInfoSPF_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 2, 1, 6),
    _Ospf3AreaInfoSPF_Type()
)
ospf3AreaInfoSPF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaInfoSPF.setStatus("current")
_Ospf3NumberOfLsdbEntries_Type = Integer32
_Ospf3NumberOfLsdbEntries_Object = MibTableColumn
ospf3NumberOfLsdbEntries = _Ospf3NumberOfLsdbEntries_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 2, 1, 7),
    _Ospf3NumberOfLsdbEntries_Type()
)
ospf3NumberOfLsdbEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3NumberOfLsdbEntries.setStatus("current")
_Ospf3AreaInfoAreaBorderRouter_Type = Integer32
_Ospf3AreaInfoAreaBorderRouter_Object = MibTableColumn
ospf3AreaInfoAreaBorderRouter = _Ospf3AreaInfoAreaBorderRouter_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 2, 1, 8),
    _Ospf3AreaInfoAreaBorderRouter_Type()
)
ospf3AreaInfoAreaBorderRouter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaInfoAreaBorderRouter.setStatus("current")
_Ospf3AreaInfoASBoundaryRouter_Type = Integer32
_Ospf3AreaInfoASBoundaryRouter_Object = MibTableColumn
ospf3AreaInfoASBoundaryRouter = _Ospf3AreaInfoASBoundaryRouter_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 2, 1, 9),
    _Ospf3AreaInfoASBoundaryRouter_Type()
)
ospf3AreaInfoASBoundaryRouter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaInfoASBoundaryRouter.setStatus("current")
_Ospf3AreaInfoNeighborsFULLstate_Type = Integer32
_Ospf3AreaInfoNeighborsFULLstate_Object = MibTableColumn
ospf3AreaInfoNeighborsFULLstate = _Ospf3AreaInfoNeighborsFULLstate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 2, 1, 10),
    _Ospf3AreaInfoNeighborsFULLstate_Type()
)
ospf3AreaInfoNeighborsFULLstate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaInfoNeighborsFULLstate.setStatus("current")
_Ospf3AreaInfoVirtNeighborsFULLstate_Type = Integer32
_Ospf3AreaInfoVirtNeighborsFULLstate_Object = MibTableColumn
ospf3AreaInfoVirtNeighborsFULLstate = _Ospf3AreaInfoVirtNeighborsFULLstate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 2, 1, 11),
    _Ospf3AreaInfoVirtNeighborsFULLstate_Type()
)
ospf3AreaInfoVirtNeighborsFULLstate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3AreaInfoVirtNeighborsFULLstate.setStatus("current")
_Ospf3IntfInfoTable_Object = MibTable
ospf3IntfInfoTable = _Ospf3IntfInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 3)
)
if mibBuilder.loadTexts:
    ospf3IntfInfoTable.setStatus("current")
_Ospf3IntfInfoEntry_Object = MibTableRow
ospf3IntfInfoEntry = _Ospf3IntfInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 3, 1)
)
ospf3IntfInfoEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospf3IfInfoIndex"),
)
if mibBuilder.loadTexts:
    ospf3IntfInfoEntry.setStatus("current")
_Ospf3IfInfoIndex_Type = Integer32
_Ospf3IfInfoIndex_Object = MibTableColumn
ospf3IfInfoIndex = _Ospf3IfInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 3, 1, 1),
    _Ospf3IfInfoIndex_Type()
)
ospf3IfInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IfInfoIndex.setStatus("current")
_Ospf3IfInfoInstanceID_Type = Unsigned32
_Ospf3IfInfoInstanceID_Object = MibTableColumn
ospf3IfInfoInstanceID = _Ospf3IfInfoInstanceID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 3, 1, 2),
    _Ospf3IfInfoInstanceID_Type()
)
ospf3IfInfoInstanceID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IfInfoInstanceID.setStatus("current")
_Ospf3IfInfoLLocalAddress_Type = DisplayString
_Ospf3IfInfoLLocalAddress_Object = MibTableColumn
ospf3IfInfoLLocalAddress = _Ospf3IfInfoLLocalAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 3, 1, 3),
    _Ospf3IfInfoLLocalAddress_Type()
)
ospf3IfInfoLLocalAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IfInfoLLocalAddress.setStatus("current")
_Ospf3IfInfoAreaID_Type = IpAddress
_Ospf3IfInfoAreaID_Object = MibTableColumn
ospf3IfInfoAreaID = _Ospf3IfInfoAreaID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 3, 1, 4),
    _Ospf3IfInfoAreaID_Type()
)
ospf3IfInfoAreaID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IfInfoAreaID.setStatus("current")


class _Ospf3IfInfoAdminStatus_Type(Integer32):
    """Custom type ospf3IfInfoAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("up", 1))
    )


_Ospf3IfInfoAdminStatus_Type.__name__ = "Integer32"
_Ospf3IfInfoAdminStatus_Object = MibTableColumn
ospf3IfInfoAdminStatus = _Ospf3IfInfoAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 3, 1, 5),
    _Ospf3IfInfoAdminStatus_Type()
)
ospf3IfInfoAdminStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IfInfoAdminStatus.setStatus("current")


class _Ospf3IfInfoPassive_Type(Integer32):
    """Custom type ospf3IfInfoPassive based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_Ospf3IfInfoPassive_Type.__name__ = "Integer32"
_Ospf3IfInfoPassive_Object = MibTableColumn
ospf3IfInfoPassive = _Ospf3IfInfoPassive_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 3, 1, 6),
    _Ospf3IfInfoPassive_Type()
)
ospf3IfInfoPassive.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IfInfoPassive.setStatus("current")


class _Ospf3IfInfoNetworkType_Type(Integer32):
    """Custom type ospf3IfInfoNetworkType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              5)
        )
    )
    namedValues = NamedValues(
        *(("broadcast", 1),
          ("nbma", 2),
          ("pointToPoint", 3),
          ("pointToMultipoint", 5))
    )


_Ospf3IfInfoNetworkType_Type.__name__ = "Integer32"
_Ospf3IfInfoNetworkType_Object = MibTableColumn
ospf3IfInfoNetworkType = _Ospf3IfInfoNetworkType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 3, 1, 7),
    _Ospf3IfInfoNetworkType_Type()
)
ospf3IfInfoNetworkType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IfInfoNetworkType.setStatus("current")


class _Ospf3IfInfoState_Type(Integer32):
    """Custom type ospf3IfInfoState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("down", 1),
          ("loopback", 2),
          ("waiting", 3),
          ("pointToPoint", 4),
          ("designatedRouter", 5),
          ("backupDesignatedRouter", 6),
          ("otherDesignatedRouter", 7),
          ("standby", 8))
    )


_Ospf3IfInfoState_Type.__name__ = "Integer32"
_Ospf3IfInfoState_Object = MibTableColumn
ospf3IfInfoState = _Ospf3IfInfoState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 3, 1, 8),
    _Ospf3IfInfoState_Type()
)
ospf3IfInfoState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IfInfoState.setStatus("current")


class _Ospf3IfInfoPriority_Type(Integer32):
    """Custom type ospf3IfInfoPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_Ospf3IfInfoPriority_Type.__name__ = "Integer32"
_Ospf3IfInfoPriority_Object = MibTableColumn
ospf3IfInfoPriority = _Ospf3IfInfoPriority_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 3, 1, 9),
    _Ospf3IfInfoPriority_Type()
)
ospf3IfInfoPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IfInfoPriority.setStatus("current")
_Ospf3IfInfoDesignatedRouterID_Type = IpAddress
_Ospf3IfInfoDesignatedRouterID_Object = MibTableColumn
ospf3IfInfoDesignatedRouterID = _Ospf3IfInfoDesignatedRouterID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 3, 1, 10),
    _Ospf3IfInfoDesignatedRouterID_Type()
)
ospf3IfInfoDesignatedRouterID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IfInfoDesignatedRouterID.setStatus("current")
_Ospf3IfInfoBackupDesignatedRouterID_Type = IpAddress
_Ospf3IfInfoBackupDesignatedRouterID_Object = MibTableColumn
ospf3IfInfoBackupDesignatedRouterID = _Ospf3IfInfoBackupDesignatedRouterID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 3, 1, 11),
    _Ospf3IfInfoBackupDesignatedRouterID_Type()
)
ospf3IfInfoBackupDesignatedRouterID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IfInfoBackupDesignatedRouterID.setStatus("current")


class _Ospf3IfInfoHello_Type(Integer32):
    """Custom type ospf3IfInfoHello based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Ospf3IfInfoHello_Type.__name__ = "Integer32"
_Ospf3IfInfoHello_Object = MibTableColumn
ospf3IfInfoHello = _Ospf3IfInfoHello_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 3, 1, 12),
    _Ospf3IfInfoHello_Type()
)
ospf3IfInfoHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IfInfoHello.setStatus("current")


class _Ospf3IfInfoDead_Type(Integer32):
    """Custom type ospf3IfInfoDead based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Ospf3IfInfoDead_Type.__name__ = "Integer32"
_Ospf3IfInfoDead_Object = MibTableColumn
ospf3IfInfoDead = _Ospf3IfInfoDead_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 3, 1, 13),
    _Ospf3IfInfoDead_Type()
)
ospf3IfInfoDead.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IfInfoDead.setStatus("current")
_Ospf3IfInfoPoll_Type = Integer32
_Ospf3IfInfoPoll_Object = MibTableColumn
ospf3IfInfoPoll = _Ospf3IfInfoPoll_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 3, 1, 14),
    _Ospf3IfInfoPoll_Type()
)
ospf3IfInfoPoll.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IfInfoPoll.setStatus("current")


class _Ospf3IfInfoRetransmit_Type(Integer32):
    """Custom type ospf3IfInfoRetransmit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_Ospf3IfInfoRetransmit_Type.__name__ = "Integer32"
_Ospf3IfInfoRetransmit_Object = MibTableColumn
ospf3IfInfoRetransmit = _Ospf3IfInfoRetransmit_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 3, 1, 15),
    _Ospf3IfInfoRetransmit_Type()
)
ospf3IfInfoRetransmit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IfInfoRetransmit.setStatus("current")


class _Ospf3IfInfoTransitDelay_Type(Integer32):
    """Custom type ospf3IfInfoTransitDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_Ospf3IfInfoTransitDelay_Type.__name__ = "Integer32"
_Ospf3IfInfoTransitDelay_Object = MibTableColumn
ospf3IfInfoTransitDelay = _Ospf3IfInfoTransitDelay_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 3, 1, 16),
    _Ospf3IfInfoTransitDelay_Type()
)
ospf3IfInfoTransitDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IfInfoTransitDelay.setStatus("current")
_Ospf3IfInfoTotalNeighbours_Type = Integer32
_Ospf3IfInfoTotalNeighbours_Object = MibTableColumn
ospf3IfInfoTotalNeighbours = _Ospf3IfInfoTotalNeighbours_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 3, 1, 17),
    _Ospf3IfInfoTotalNeighbours_Type()
)
ospf3IfInfoTotalNeighbours.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IfInfoTotalNeighbours.setStatus("current")
_Ospf3IfInfoEvents_Type = Integer32
_Ospf3IfInfoEvents_Object = MibTableColumn
ospf3IfInfoEvents = _Ospf3IfInfoEvents_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 3, 1, 18),
    _Ospf3IfInfoEvents_Type()
)
ospf3IfInfoEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IfInfoEvents.setStatus("current")
_Ospf3IfInfoMetricCost_Type = Integer32
_Ospf3IfInfoMetricCost_Object = MibTableColumn
ospf3IfInfoMetricCost = _Ospf3IfInfoMetricCost_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 3, 1, 19),
    _Ospf3IfInfoMetricCost_Type()
)
ospf3IfInfoMetricCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IfInfoMetricCost.setStatus("current")


class _Ospf3IfInfoAuthSpi_Type(Unsigned32):
    """Custom type ospf3IfInfoAuthSpi based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(256, 4294967295),
    )


_Ospf3IfInfoAuthSpi_Type.__name__ = "Unsigned32"
_Ospf3IfInfoAuthSpi_Object = MibTableColumn
ospf3IfInfoAuthSpi = _Ospf3IfInfoAuthSpi_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 3, 1, 20),
    _Ospf3IfInfoAuthSpi_Type()
)
ospf3IfInfoAuthSpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IfInfoAuthSpi.setStatus("current")


class _Ospf3IfInfoAuthEnable_Type(Integer32):
    """Custom type ospf3IfInfoAuthEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_Ospf3IfInfoAuthEnable_Type.__name__ = "Integer32"
_Ospf3IfInfoAuthEnable_Object = MibTableColumn
ospf3IfInfoAuthEnable = _Ospf3IfInfoAuthEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 3, 1, 21),
    _Ospf3IfInfoAuthEnable_Type()
)
ospf3IfInfoAuthEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IfInfoAuthEnable.setStatus("current")


class _Ospf3IfInfoAuthType_Type(Integer32):
    """Custom type ospf3IfInfoAuthType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("sha1", 1),
          ("md5", 2))
    )


_Ospf3IfInfoAuthType_Type.__name__ = "Integer32"
_Ospf3IfInfoAuthType_Object = MibTableColumn
ospf3IfInfoAuthType = _Ospf3IfInfoAuthType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 3, 1, 22),
    _Ospf3IfInfoAuthType_Type()
)
ospf3IfInfoAuthType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IfInfoAuthType.setStatus("current")


class _Ospf3IfInfoAuthKey_Type(OctetString):
    """Custom type ospf3IfInfoAuthKey based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 40),
    )


_Ospf3IfInfoAuthKey_Type.__name__ = "OctetString"
_Ospf3IfInfoAuthKey_Object = MibTableColumn
ospf3IfInfoAuthKey = _Ospf3IfInfoAuthKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 3, 1, 23),
    _Ospf3IfInfoAuthKey_Type()
)
ospf3IfInfoAuthKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IfInfoAuthKey.setStatus("current")


class _Ospf3IfInfoEncrySpi_Type(Unsigned32):
    """Custom type ospf3IfInfoEncrySpi based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(256, 4294967295),
    )


_Ospf3IfInfoEncrySpi_Type.__name__ = "Unsigned32"
_Ospf3IfInfoEncrySpi_Object = MibTableColumn
ospf3IfInfoEncrySpi = _Ospf3IfInfoEncrySpi_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 3, 1, 24),
    _Ospf3IfInfoEncrySpi_Type()
)
ospf3IfInfoEncrySpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IfInfoEncrySpi.setStatus("current")


class _Ospf3IfInfoEncryEnable_Type(Integer32):
    """Custom type ospf3IfInfoEncryEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_Ospf3IfInfoEncryEnable_Type.__name__ = "Integer32"
_Ospf3IfInfoEncryEnable_Object = MibTableColumn
ospf3IfInfoEncryEnable = _Ospf3IfInfoEncryEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 3, 1, 25),
    _Ospf3IfInfoEncryEnable_Type()
)
ospf3IfInfoEncryEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IfInfoEncryEnable.setStatus("current")


class _Ospf3IfInfoEncryType_Type(Integer32):
    """Custom type ospf3IfInfoEncryType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("tripledes", 2),
          ("aes", 3))
    )


_Ospf3IfInfoEncryType_Type.__name__ = "Integer32"
_Ospf3IfInfoEncryType_Object = MibTableColumn
ospf3IfInfoEncryType = _Ospf3IfInfoEncryType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 3, 1, 26),
    _Ospf3IfInfoEncryType_Type()
)
ospf3IfInfoEncryType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IfInfoEncryType.setStatus("current")


class _Ospf3IfInfoEncryKey_Type(OctetString):
    """Custom type ospf3IfInfoEncryKey based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 48),
    )


_Ospf3IfInfoEncryKey_Type.__name__ = "OctetString"
_Ospf3IfInfoEncryKey_Object = MibTableColumn
ospf3IfInfoEncryKey = _Ospf3IfInfoEncryKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 3, 1, 27),
    _Ospf3IfInfoEncryKey_Type()
)
ospf3IfInfoEncryKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IfInfoEncryKey.setStatus("current")


class _Ospf3IfInfoEncryAuthType_Type(Integer32):
    """Custom type ospf3IfInfoEncryAuthType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("sha1", 1),
          ("md5", 2))
    )


_Ospf3IfInfoEncryAuthType_Type.__name__ = "Integer32"
_Ospf3IfInfoEncryAuthType_Object = MibTableColumn
ospf3IfInfoEncryAuthType = _Ospf3IfInfoEncryAuthType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 3, 1, 28),
    _Ospf3IfInfoEncryAuthType_Type()
)
ospf3IfInfoEncryAuthType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IfInfoEncryAuthType.setStatus("current")


class _Ospf3IfInfoEncryAuthKey_Type(OctetString):
    """Custom type ospf3IfInfoEncryAuthKey based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 40),
    )


_Ospf3IfInfoEncryAuthKey_Type.__name__ = "OctetString"
_Ospf3IfInfoEncryAuthKey_Object = MibTableColumn
ospf3IfInfoEncryAuthKey = _Ospf3IfInfoEncryAuthKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 3, 1, 29),
    _Ospf3IfInfoEncryAuthKey_Type()
)
ospf3IfInfoEncryAuthKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IfInfoEncryAuthKey.setStatus("current")


class _Ospf3IfInfoLsaSupress_Type(Integer32):
    """Custom type ospf3IfInfoLsaSupress based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_Ospf3IfInfoLsaSupress_Type.__name__ = "Integer32"
_Ospf3IfInfoLsaSupress_Object = MibTableColumn
ospf3IfInfoLsaSupress = _Ospf3IfInfoLsaSupress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 3, 1, 30),
    _Ospf3IfInfoLsaSupress_Type()
)
ospf3IfInfoLsaSupress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IfInfoLsaSupress.setStatus("current")
_Ospf3VirtIntfInfoTable_Object = MibTable
ospf3VirtIntfInfoTable = _Ospf3VirtIntfInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 4)
)
if mibBuilder.loadTexts:
    ospf3VirtIntfInfoTable.setStatus("current")
_Ospf3VirtIntfInfoEntry_Object = MibTableRow
ospf3VirtIntfInfoEntry = _Ospf3VirtIntfInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 4, 1)
)
ospf3VirtIntfInfoEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospf3VirtIfInfoIndex"),
)
if mibBuilder.loadTexts:
    ospf3VirtIntfInfoEntry.setStatus("current")
_Ospf3VirtIfInfoIndex_Type = Integer32
_Ospf3VirtIfInfoIndex_Object = MibTableColumn
ospf3VirtIfInfoIndex = _Ospf3VirtIfInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 4, 1, 1),
    _Ospf3VirtIfInfoIndex_Type()
)
ospf3VirtIfInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3VirtIfInfoIndex.setStatus("current")
_Ospf3VirtIfInfoAreaId_Type = IpAddress
_Ospf3VirtIfInfoAreaId_Object = MibTableColumn
ospf3VirtIfInfoAreaId = _Ospf3VirtIfInfoAreaId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 4, 1, 2),
    _Ospf3VirtIfInfoAreaId_Type()
)
ospf3VirtIfInfoAreaId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3VirtIfInfoAreaId.setStatus("current")
_Ospf3VirtIfInfoNeighbor_Type = IpAddress
_Ospf3VirtIfInfoNeighbor_Object = MibTableColumn
ospf3VirtIfInfoNeighbor = _Ospf3VirtIfInfoNeighbor_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 4, 1, 3),
    _Ospf3VirtIfInfoNeighbor_Type()
)
ospf3VirtIfInfoNeighbor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3VirtIfInfoNeighbor.setStatus("current")


class _Ospf3VirtIfInfoTransitDelay_Type(Integer32):
    """Custom type ospf3VirtIfInfoTransitDelay based on Integer32"""
    defaultValue = 1


_Ospf3VirtIfInfoTransitDelay_Type.__name__ = "Integer32"
_Ospf3VirtIfInfoTransitDelay_Object = MibTableColumn
ospf3VirtIfInfoTransitDelay = _Ospf3VirtIfInfoTransitDelay_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 4, 1, 5),
    _Ospf3VirtIfInfoTransitDelay_Type()
)
ospf3VirtIfInfoTransitDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3VirtIfInfoTransitDelay.setStatus("current")
if mibBuilder.loadTexts:
    ospf3VirtIfInfoTransitDelay.setUnits("seconds")


class _Ospf3VirtIfInfoRetransInterval_Type(Integer32):
    """Custom type ospf3VirtIfInfoRetransInterval based on Integer32"""
    defaultValue = 5


_Ospf3VirtIfInfoRetransInterval_Type.__name__ = "Integer32"
_Ospf3VirtIfInfoRetransInterval_Object = MibTableColumn
ospf3VirtIfInfoRetransInterval = _Ospf3VirtIfInfoRetransInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 4, 1, 6),
    _Ospf3VirtIfInfoRetransInterval_Type()
)
ospf3VirtIfInfoRetransInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3VirtIfInfoRetransInterval.setStatus("current")
if mibBuilder.loadTexts:
    ospf3VirtIfInfoRetransInterval.setUnits("seconds")


class _Ospf3VirtIfInfoHelloInterval_Type(Integer32):
    """Custom type ospf3VirtIfInfoHelloInterval based on Integer32"""
    defaultValue = 10


_Ospf3VirtIfInfoHelloInterval_Type.__name__ = "Integer32"
_Ospf3VirtIfInfoHelloInterval_Object = MibTableColumn
ospf3VirtIfInfoHelloInterval = _Ospf3VirtIfInfoHelloInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 4, 1, 7),
    _Ospf3VirtIfInfoHelloInterval_Type()
)
ospf3VirtIfInfoHelloInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3VirtIfInfoHelloInterval.setStatus("current")
if mibBuilder.loadTexts:
    ospf3VirtIfInfoHelloInterval.setUnits("seconds")


class _Ospf3VirtIfInfoRtrDeadInterval_Type(Integer32):
    """Custom type ospf3VirtIfInfoRtrDeadInterval based on Integer32"""
    defaultValue = 60


_Ospf3VirtIfInfoRtrDeadInterval_Type.__name__ = "Integer32"
_Ospf3VirtIfInfoRtrDeadInterval_Object = MibTableColumn
ospf3VirtIfInfoRtrDeadInterval = _Ospf3VirtIfInfoRtrDeadInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 4, 1, 8),
    _Ospf3VirtIfInfoRtrDeadInterval_Type()
)
ospf3VirtIfInfoRtrDeadInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3VirtIfInfoRtrDeadInterval.setStatus("current")
if mibBuilder.loadTexts:
    ospf3VirtIfInfoRtrDeadInterval.setUnits("seconds")


class _Ospf3VirtIfInfoState_Type(Integer32):
    """Custom type ospf3VirtIfInfoState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              4)
        )
    )
    namedValues = NamedValues(
        *(("down", 1),
          ("pointToPoint", 4))
    )


_Ospf3VirtIfInfoState_Type.__name__ = "Integer32"
_Ospf3VirtIfInfoState_Object = MibTableColumn
ospf3VirtIfInfoState = _Ospf3VirtIfInfoState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 4, 1, 9),
    _Ospf3VirtIfInfoState_Type()
)
ospf3VirtIfInfoState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3VirtIfInfoState.setStatus("current")
_Ospf3VirtIfInfoEvents_Type = Integer32
_Ospf3VirtIfInfoEvents_Object = MibTableColumn
ospf3VirtIfInfoEvents = _Ospf3VirtIfInfoEvents_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 4, 1, 10),
    _Ospf3VirtIfInfoEvents_Type()
)
ospf3VirtIfInfoEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3VirtIfInfoEvents.setStatus("current")
_Ospf3VirtIfInfoStatus_Type = Integer32
_Ospf3VirtIfInfoStatus_Object = MibTableColumn
ospf3VirtIfInfoStatus = _Ospf3VirtIfInfoStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 4, 1, 11),
    _Ospf3VirtIfInfoStatus_Type()
)
ospf3VirtIfInfoStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3VirtIfInfoStatus.setStatus("current")
_Ospf3VirtIfInfoLinkScopeLsaCount_Type = Integer32
_Ospf3VirtIfInfoLinkScopeLsaCount_Object = MibTableColumn
ospf3VirtIfInfoLinkScopeLsaCount = _Ospf3VirtIfInfoLinkScopeLsaCount_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 4, 1, 12),
    _Ospf3VirtIfInfoLinkScopeLsaCount_Type()
)
ospf3VirtIfInfoLinkScopeLsaCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3VirtIfInfoLinkScopeLsaCount.setStatus("current")
_Ospf3VirtIfInfoLinkLsaCksumSum_Type = Integer32
_Ospf3VirtIfInfoLinkLsaCksumSum_Object = MibTableColumn
ospf3VirtIfInfoLinkLsaCksumSum = _Ospf3VirtIfInfoLinkLsaCksumSum_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 4, 1, 13),
    _Ospf3VirtIfInfoLinkLsaCksumSum_Type()
)
ospf3VirtIfInfoLinkLsaCksumSum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3VirtIfInfoLinkLsaCksumSum.setStatus("current")
_Ospf3IfNbrTable_Object = MibTable
ospf3IfNbrTable = _Ospf3IfNbrTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 5)
)
if mibBuilder.loadTexts:
    ospf3IfNbrTable.setStatus("current")
_Ospf3IfNbrEntry_Object = MibTableRow
ospf3IfNbrEntry = _Ospf3IfNbrEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 5, 1)
)
ospf3IfNbrEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospf3IfNbrInfoIndex"),
)
if mibBuilder.loadTexts:
    ospf3IfNbrEntry.setStatus("current")
_Ospf3IfNbrInfoIndex_Type = Integer32
_Ospf3IfNbrInfoIndex_Object = MibTableColumn
ospf3IfNbrInfoIndex = _Ospf3IfNbrInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 5, 1, 1),
    _Ospf3IfNbrInfoIndex_Type()
)
ospf3IfNbrInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IfNbrInfoIndex.setStatus("current")
_Ospf3IfNbrIntfIndex_Type = Integer32
_Ospf3IfNbrIntfIndex_Object = MibTableColumn
ospf3IfNbrIntfIndex = _Ospf3IfNbrIntfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 5, 1, 2),
    _Ospf3IfNbrIntfIndex_Type()
)
ospf3IfNbrIntfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IfNbrIntfIndex.setStatus("current")
_Ospf3IfNbrIntfInstanceID_Type = Unsigned32
_Ospf3IfNbrIntfInstanceID_Object = MibTableColumn
ospf3IfNbrIntfInstanceID = _Ospf3IfNbrIntfInstanceID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 5, 1, 3),
    _Ospf3IfNbrIntfInstanceID_Type()
)
ospf3IfNbrIntfInstanceID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IfNbrIntfInstanceID.setStatus("current")
_Ospf3IfNbrRtrID_Type = IpAddress
_Ospf3IfNbrRtrID_Object = MibTableColumn
ospf3IfNbrRtrID = _Ospf3IfNbrRtrID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 5, 1, 4),
    _Ospf3IfNbrRtrID_Type()
)
ospf3IfNbrRtrID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IfNbrRtrID.setStatus("current")
_Ospf3IfNbrIpAddress_Type = DisplayString
_Ospf3IfNbrIpAddress_Object = MibTableColumn
ospf3IfNbrIpAddress = _Ospf3IfNbrIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 5, 1, 5),
    _Ospf3IfNbrIpAddress_Type()
)
ospf3IfNbrIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IfNbrIpAddress.setStatus("current")
_Ospf3IfNbrPriority_Type = Integer32
_Ospf3IfNbrPriority_Object = MibTableColumn
ospf3IfNbrPriority = _Ospf3IfNbrPriority_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 5, 1, 6),
    _Ospf3IfNbrPriority_Type()
)
ospf3IfNbrPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IfNbrPriority.setStatus("current")


class _Ospf3IfNbrState_Type(Integer32):
    """Custom type ospf3IfNbrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("down", 1),
          ("attempt", 2),
          ("init", 3),
          ("twoWay", 4),
          ("exchangeStart", 5),
          ("exchange", 6),
          ("loading", 7),
          ("full", 8))
    )


_Ospf3IfNbrState_Type.__name__ = "Integer32"
_Ospf3IfNbrState_Object = MibTableColumn
ospf3IfNbrState = _Ospf3IfNbrState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 5, 1, 7),
    _Ospf3IfNbrState_Type()
)
ospf3IfNbrState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IfNbrState.setStatus("current")
_Ospf3IfNbrEvents_Type = Integer32
_Ospf3IfNbrEvents_Object = MibTableColumn
ospf3IfNbrEvents = _Ospf3IfNbrEvents_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 5, 1, 8),
    _Ospf3IfNbrEvents_Type()
)
ospf3IfNbrEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3IfNbrEvents.setStatus("current")
_Ospf3RoutesInfoTable_Object = MibTable
ospf3RoutesInfoTable = _Ospf3RoutesInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 6)
)
if mibBuilder.loadTexts:
    ospf3RoutesInfoTable.setStatus("current")
_Ospf3RoutesInfoEntry_Object = MibTableRow
ospf3RoutesInfoEntry = _Ospf3RoutesInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 6, 1)
)
ospf3RoutesInfoEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ospf3RoutesInfoIndex"),
)
if mibBuilder.loadTexts:
    ospf3RoutesInfoEntry.setStatus("current")
_Ospf3RoutesInfoIndex_Type = Integer32
_Ospf3RoutesInfoIndex_Object = MibTableColumn
ospf3RoutesInfoIndex = _Ospf3RoutesInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 6, 1, 1),
    _Ospf3RoutesInfoIndex_Type()
)
ospf3RoutesInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3RoutesInfoIndex.setStatus("current")
_Ospf3RoutesInfoDestination_Type = DisplayString
_Ospf3RoutesInfoDestination_Object = MibTableColumn
ospf3RoutesInfoDestination = _Ospf3RoutesInfoDestination_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 6, 1, 2),
    _Ospf3RoutesInfoDestination_Type()
)
ospf3RoutesInfoDestination.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3RoutesInfoDestination.setStatus("current")


class _Ospf3RoutesInfoPrefixLen_Type(Integer32):
    """Custom type ospf3RoutesInfoPrefixLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_Ospf3RoutesInfoPrefixLen_Type.__name__ = "Integer32"
_Ospf3RoutesInfoPrefixLen_Object = MibTableColumn
ospf3RoutesInfoPrefixLen = _Ospf3RoutesInfoPrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 6, 1, 3),
    _Ospf3RoutesInfoPrefixLen_Type()
)
ospf3RoutesInfoPrefixLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3RoutesInfoPrefixLen.setStatus("current")
_Ospf3RoutesInfoNextHop_Type = DisplayString
_Ospf3RoutesInfoNextHop_Object = MibTableColumn
ospf3RoutesInfoNextHop = _Ospf3RoutesInfoNextHop_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 6, 1, 4),
    _Ospf3RoutesInfoNextHop_Type()
)
ospf3RoutesInfoNextHop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3RoutesInfoNextHop.setStatus("current")


class _Ospf3RoutesInfoType_Type(Integer32):
    """Custom type ospf3RoutesInfoType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("intraArea", 1),
          ("interArea", 2),
          ("type1External", 3),
          ("type2External", 4))
    )


_Ospf3RoutesInfoType_Type.__name__ = "Integer32"
_Ospf3RoutesInfoType_Object = MibTableColumn
ospf3RoutesInfoType = _Ospf3RoutesInfoType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 6, 1, 5),
    _Ospf3RoutesInfoType_Type()
)
ospf3RoutesInfoType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3RoutesInfoType.setStatus("current")
_Ospf3RoutesInfoAreaId_Type = IpAddress
_Ospf3RoutesInfoAreaId_Object = MibTableColumn
ospf3RoutesInfoAreaId = _Ospf3RoutesInfoAreaId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 6, 1, 6),
    _Ospf3RoutesInfoAreaId_Type()
)
ospf3RoutesInfoAreaId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3RoutesInfoAreaId.setStatus("current")


class _Ospf3RoutesInfoCost_Type(Integer32):
    """Custom type ospf3RoutesInfoCost based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16777215),
    )


_Ospf3RoutesInfoCost_Type.__name__ = "Integer32"
_Ospf3RoutesInfoCost_Object = MibTableColumn
ospf3RoutesInfoCost = _Ospf3RoutesInfoCost_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 6, 1, 7),
    _Ospf3RoutesInfoCost_Type()
)
ospf3RoutesInfoCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3RoutesInfoCost.setStatus("current")


class _Ospf3RoutesInfoType2Cost_Type(Integer32):
    """Custom type ospf3RoutesInfoType2Cost based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16777215),
    )


_Ospf3RoutesInfoType2Cost_Type.__name__ = "Integer32"
_Ospf3RoutesInfoType2Cost_Object = MibTableColumn
ospf3RoutesInfoType2Cost = _Ospf3RoutesInfoType2Cost_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 6, 1, 8),
    _Ospf3RoutesInfoType2Cost_Type()
)
ospf3RoutesInfoType2Cost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3RoutesInfoType2Cost.setStatus("current")


class _Ospf3RoutesInfoInterfaceIndex_Type(Integer32):
    """Custom type ospf3RoutesInfoInterfaceIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_Ospf3RoutesInfoInterfaceIndex_Type.__name__ = "Integer32"
_Ospf3RoutesInfoInterfaceIndex_Object = MibTableColumn
ospf3RoutesInfoInterfaceIndex = _Ospf3RoutesInfoInterfaceIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 18, 6, 1, 9),
    _Ospf3RoutesInfoInterfaceIndex_Type()
)
ospf3RoutesInfoInterfaceIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospf3RoutesInfoInterfaceIndex.setStatus("current")
_IpEcmpRoutingInfo_ObjectIdentity = ObjectIdentity
ipEcmpRoutingInfo = _IpEcmpRoutingInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 19)
)
_IpRouteEcmpInfoTable_Object = MibTable
ipRouteEcmpInfoTable = _IpRouteEcmpInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 19, 1)
)
if mibBuilder.loadTexts:
    ipRouteEcmpInfoTable.setStatus("current")
_IpRouteEcmpInfoEntry_Object = MibTableRow
ipRouteEcmpInfoEntry = _IpRouteEcmpInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 19, 1, 1)
)
ipRouteEcmpInfoEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipRouteEcmpInfoDestIndx"),
    (0, "IBM-GbTOR-G8264T-MIB", "ipRouteEcmpInfoGwIndx"),
)
if mibBuilder.loadTexts:
    ipRouteEcmpInfoEntry.setStatus("current")
_IpRouteEcmpInfoDestIndx_Type = Integer32
_IpRouteEcmpInfoDestIndx_Object = MibTableColumn
ipRouteEcmpInfoDestIndx = _IpRouteEcmpInfoDestIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 19, 1, 1, 1),
    _IpRouteEcmpInfoDestIndx_Type()
)
ipRouteEcmpInfoDestIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipRouteEcmpInfoDestIndx.setStatus("current")
_IpRouteEcmpInfoGwIndx_Type = Integer32
_IpRouteEcmpInfoGwIndx_Object = MibTableColumn
ipRouteEcmpInfoGwIndx = _IpRouteEcmpInfoGwIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 19, 1, 1, 2),
    _IpRouteEcmpInfoGwIndx_Type()
)
ipRouteEcmpInfoGwIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipRouteEcmpInfoGwIndx.setStatus("current")
_IpRouteEcmpInfoDest_Type = IpAddress
_IpRouteEcmpInfoDest_Object = MibTableColumn
ipRouteEcmpInfoDest = _IpRouteEcmpInfoDest_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 19, 1, 1, 3),
    _IpRouteEcmpInfoDest_Type()
)
ipRouteEcmpInfoDest.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipRouteEcmpInfoDest.setStatus("current")
_IpRouteEcmpInfoMask_Type = IpAddress
_IpRouteEcmpInfoMask_Object = MibTableColumn
ipRouteEcmpInfoMask = _IpRouteEcmpInfoMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 19, 1, 1, 4),
    _IpRouteEcmpInfoMask_Type()
)
ipRouteEcmpInfoMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipRouteEcmpInfoMask.setStatus("current")
_IpRouteEcmpInfoGateway_Type = IpAddress
_IpRouteEcmpInfoGateway_Object = MibTableColumn
ipRouteEcmpInfoGateway = _IpRouteEcmpInfoGateway_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 19, 1, 1, 5),
    _IpRouteEcmpInfoGateway_Type()
)
ipRouteEcmpInfoGateway.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipRouteEcmpInfoGateway.setStatus("current")
_IpRouteEcmpInfoInterface_Type = Integer32
_IpRouteEcmpInfoInterface_Object = MibTableColumn
ipRouteEcmpInfoInterface = _IpRouteEcmpInfoInterface_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 19, 1, 1, 6),
    _IpRouteEcmpInfoInterface_Type()
)
ipRouteEcmpInfoInterface.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipRouteEcmpInfoInterface.setStatus("current")


class _IpRouteEcmpInfoGwStatus_Type(Integer32):
    """Custom type ipRouteEcmpInfoGwStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("up", 1),
          ("down", 2))
    )


_IpRouteEcmpInfoGwStatus_Type.__name__ = "Integer32"
_IpRouteEcmpInfoGwStatus_Object = MibTableColumn
ipRouteEcmpInfoGwStatus = _IpRouteEcmpInfoGwStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 19, 1, 1, 7),
    _IpRouteEcmpInfoGwStatus_Type()
)
ipRouteEcmpInfoGwStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipRouteEcmpInfoGwStatus.setStatus("current")
_IpEcmpHash_ObjectIdentity = ObjectIdentity
ipEcmpHash = _IpEcmpHash_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 20)
)
_IpEcmpHashSIPAddr_Type = IpAddress
_IpEcmpHashSIPAddr_Object = MibScalar
ipEcmpHashSIPAddr = _IpEcmpHashSIPAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 20, 1),
    _IpEcmpHashSIPAddr_Type()
)
ipEcmpHashSIPAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipEcmpHashSIPAddr.setStatus("current")
_IpEcmpHashDIPAddr_Type = IpAddress
_IpEcmpHashDIPAddr_Object = MibScalar
ipEcmpHashDIPAddr = _IpEcmpHashDIPAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 20, 2),
    _IpEcmpHashDIPAddr_Type()
)
ipEcmpHashDIPAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipEcmpHashDIPAddr.setStatus("current")


class _IpEcmpHashNumberPaths_Type(Integer32):
    """Custom type ipEcmpHashNumberPaths based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 5),
    )


_IpEcmpHashNumberPaths_Type.__name__ = "Integer32"
_IpEcmpHashNumberPaths_Object = MibScalar
ipEcmpHashNumberPaths = _IpEcmpHashNumberPaths_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 20, 3),
    _IpEcmpHashNumberPaths_Type()
)
ipEcmpHashNumberPaths.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipEcmpHashNumberPaths.setStatus("current")
_IpEcmpHashRouteNumber_Type = Integer32
_IpEcmpHashRouteNumber_Object = MibScalar
ipEcmpHashRouteNumber = _IpEcmpHashRouteNumber_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 20, 4),
    _IpEcmpHashRouteNumber_Type()
)
ipEcmpHashRouteNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipEcmpHashRouteNumber.setStatus("current")
_Ipv6PmtuInfo_ObjectIdentity = ObjectIdentity
ipv6PmtuInfo = _Ipv6PmtuInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 21)
)
_Ipv6PmtuInfoTable_Object = MibTable
ipv6PmtuInfoTable = _Ipv6PmtuInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 21, 1)
)
if mibBuilder.loadTexts:
    ipv6PmtuInfoTable.setStatus("current")
_Ipv6PmtuInfoEntry_Object = MibTableRow
ipv6PmtuInfoEntry = _Ipv6PmtuInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 21, 1, 1)
)
ipv6PmtuInfoEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipv6PmtuInfoIndx"),
)
if mibBuilder.loadTexts:
    ipv6PmtuInfoEntry.setStatus("current")
_Ipv6PmtuInfoIndx_Type = Integer32
_Ipv6PmtuInfoIndx_Object = MibTableColumn
ipv6PmtuInfoIndx = _Ipv6PmtuInfoIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 21, 1, 1, 1),
    _Ipv6PmtuInfoIndx_Type()
)
ipv6PmtuInfoIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6PmtuInfoIndx.setStatus("current")
_Ipv6PmtuInfoDestIp_Type = DisplayString
_Ipv6PmtuInfoDestIp_Object = MibTableColumn
ipv6PmtuInfoDestIp = _Ipv6PmtuInfoDestIp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 21, 1, 1, 2),
    _Ipv6PmtuInfoDestIp_Type()
)
ipv6PmtuInfoDestIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6PmtuInfoDestIp.setStatus("current")
_Ipv6PmtuInfoSinceTime_Type = DisplayString
_Ipv6PmtuInfoSinceTime_Object = MibTableColumn
ipv6PmtuInfoSinceTime = _Ipv6PmtuInfoSinceTime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 21, 1, 1, 3),
    _Ipv6PmtuInfoSinceTime_Type()
)
ipv6PmtuInfoSinceTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6PmtuInfoSinceTime.setStatus("current")
_Ipv6PmtuInfoValue_Type = Integer32
_Ipv6PmtuInfoValue_Object = MibTableColumn
ipv6PmtuInfoValue = _Ipv6PmtuInfoValue_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 21, 1, 1, 4),
    _Ipv6PmtuInfoValue_Type()
)
ipv6PmtuInfoValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipv6PmtuInfoValue.setStatus("current")
_MldInfo_ObjectIdentity = ObjectIdentity
mldInfo = _MldInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 22)
)
_MldInfoGroupsTable_Object = MibTable
mldInfoGroupsTable = _MldInfoGroupsTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 22, 1)
)
if mibBuilder.loadTexts:
    mldInfoGroupsTable.setStatus("current")
_MldInfoGroupEntry_Object = MibTableRow
mldInfoGroupEntry = _MldInfoGroupEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 22, 1, 1)
)
mldInfoGroupEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "mldInfoGroupId"),
)
if mibBuilder.loadTexts:
    mldInfoGroupEntry.setStatus("current")
_MldInfoGroupIfIndex_Type = Integer32
_MldInfoGroupIfIndex_Object = MibTableColumn
mldInfoGroupIfIndex = _MldInfoGroupIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 22, 1, 1, 1),
    _MldInfoGroupIfIndex_Type()
)
mldInfoGroupIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldInfoGroupIfIndex.setStatus("current")
_MldInfoGroupAddress_Type = InetAddressIPv6
_MldInfoGroupAddress_Object = MibTableColumn
mldInfoGroupAddress = _MldInfoGroupAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 22, 1, 1, 2),
    _MldInfoGroupAddress_Type()
)
mldInfoGroupAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldInfoGroupAddress.setStatus("current")
_MldInfoGroupPortNumber_Type = Integer32
_MldInfoGroupPortNumber_Object = MibTableColumn
mldInfoGroupPortNumber = _MldInfoGroupPortNumber_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 22, 1, 1, 3),
    _MldInfoGroupPortNumber_Type()
)
mldInfoGroupPortNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldInfoGroupPortNumber.setStatus("current")
_MldInfoGroupVlanID_Type = Integer32
_MldInfoGroupVlanID_Object = MibTableColumn
mldInfoGroupVlanID = _MldInfoGroupVlanID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 22, 1, 1, 4),
    _MldInfoGroupVlanID_Type()
)
mldInfoGroupVlanID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldInfoGroupVlanID.setStatus("current")
_MldInfoGroupLastReporter_Type = InetAddressIPv6
_MldInfoGroupLastReporter_Object = MibTableColumn
mldInfoGroupLastReporter = _MldInfoGroupLastReporter_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 22, 1, 1, 5),
    _MldInfoGroupLastReporter_Type()
)
mldInfoGroupLastReporter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldInfoGroupLastReporter.setStatus("current")
_MldInfoGroupSource_Type = InetAddressIPv6
_MldInfoGroupSource_Object = MibTableColumn
mldInfoGroupSource = _MldInfoGroupSource_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 22, 1, 1, 6),
    _MldInfoGroupSource_Type()
)
mldInfoGroupSource.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldInfoGroupSource.setStatus("current")
_MldInfoGroupFilterType_Type = DisplayString
_MldInfoGroupFilterType_Object = MibTableColumn
mldInfoGroupFilterType = _MldInfoGroupFilterType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 22, 1, 1, 7),
    _MldInfoGroupFilterType_Type()
)
mldInfoGroupFilterType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldInfoGroupFilterType.setStatus("current")
_MldInfoGroupExpiryTime_Type = DisplayString
_MldInfoGroupExpiryTime_Object = MibTableColumn
mldInfoGroupExpiryTime = _MldInfoGroupExpiryTime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 22, 1, 1, 8),
    _MldInfoGroupExpiryTime_Type()
)
mldInfoGroupExpiryTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldInfoGroupExpiryTime.setStatus("current")
_MldInfoGroupVersion_Type = Integer32
_MldInfoGroupVersion_Object = MibTableColumn
mldInfoGroupVersion = _MldInfoGroupVersion_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 22, 1, 1, 9),
    _MldInfoGroupVersion_Type()
)
mldInfoGroupVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldInfoGroupVersion.setStatus("current")
_MldInfoGroupFwd_Type = Integer32
_MldInfoGroupFwd_Object = MibTableColumn
mldInfoGroupFwd = _MldInfoGroupFwd_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 22, 1, 1, 10),
    _MldInfoGroupFwd_Type()
)
mldInfoGroupFwd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldInfoGroupFwd.setStatus("current")
_MldInfoGroupId_Type = Integer32
_MldInfoGroupId_Object = MibTableColumn
mldInfoGroupId = _MldInfoGroupId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 22, 1, 1, 11),
    _MldInfoGroupId_Type()
)
mldInfoGroupId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldInfoGroupId.setStatus("current")
_MldInfoMRoutersTable_Object = MibTable
mldInfoMRoutersTable = _MldInfoMRoutersTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 22, 2)
)
if mibBuilder.loadTexts:
    mldInfoMRoutersTable.setStatus("current")
_MldInfoMRouterEntry_Object = MibTableRow
mldInfoMRouterEntry = _MldInfoMRouterEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 22, 2, 1)
)
mldInfoMRouterEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "mldInfoMRouterId"),
)
if mibBuilder.loadTexts:
    mldInfoMRouterEntry.setStatus("current")
_MldInfoMRouterIfIndex_Type = Integer32
_MldInfoMRouterIfIndex_Object = MibTableColumn
mldInfoMRouterIfIndex = _MldInfoMRouterIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 22, 2, 1, 1),
    _MldInfoMRouterIfIndex_Type()
)
mldInfoMRouterIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldInfoMRouterIfIndex.setStatus("current")
_MldInfoMRouterSrcIp_Type = InetAddressIPv6
_MldInfoMRouterSrcIp_Object = MibTableColumn
mldInfoMRouterSrcIp = _MldInfoMRouterSrcIp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 22, 2, 1, 2),
    _MldInfoMRouterSrcIp_Type()
)
mldInfoMRouterSrcIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldInfoMRouterSrcIp.setStatus("current")
_MldInfoMRouterPortNumber_Type = Integer32
_MldInfoMRouterPortNumber_Object = MibTableColumn
mldInfoMRouterPortNumber = _MldInfoMRouterPortNumber_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 22, 2, 1, 3),
    _MldInfoMRouterPortNumber_Type()
)
mldInfoMRouterPortNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldInfoMRouterPortNumber.setStatus("current")
_MldInfoMRouterVlan_Type = Integer32
_MldInfoMRouterVlan_Object = MibTableColumn
mldInfoMRouterVlan = _MldInfoMRouterVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 22, 2, 1, 4),
    _MldInfoMRouterVlan_Type()
)
mldInfoMRouterVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldInfoMRouterVlan.setStatus("current")
_MldInfoMRouterQrv_Type = Integer32
_MldInfoMRouterQrv_Object = MibTableColumn
mldInfoMRouterQrv = _MldInfoMRouterQrv_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 22, 2, 1, 5),
    _MldInfoMRouterQrv_Type()
)
mldInfoMRouterQrv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldInfoMRouterQrv.setStatus("current")
_MldInfoMRouterQqic_Type = Integer32
_MldInfoMRouterQqic_Object = MibTableColumn
mldInfoMRouterQqic = _MldInfoMRouterQqic_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 22, 2, 1, 6),
    _MldInfoMRouterQqic_Type()
)
mldInfoMRouterQqic.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldInfoMRouterQqic.setStatus("current")
_MldInfoMRouterMaxRespDelay_Type = Integer32
_MldInfoMRouterMaxRespDelay_Object = MibTableColumn
mldInfoMRouterMaxRespDelay = _MldInfoMRouterMaxRespDelay_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 22, 2, 1, 7),
    _MldInfoMRouterMaxRespDelay_Type()
)
mldInfoMRouterMaxRespDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldInfoMRouterMaxRespDelay.setStatus("current")
_MldInfoMRouterVersion_Type = Integer32
_MldInfoMRouterVersion_Object = MibTableColumn
mldInfoMRouterVersion = _MldInfoMRouterVersion_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 22, 2, 1, 8),
    _MldInfoMRouterVersion_Type()
)
mldInfoMRouterVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldInfoMRouterVersion.setStatus("current")
_MldInfoMRouterExpiryTime_Type = DisplayString
_MldInfoMRouterExpiryTime_Object = MibTableColumn
mldInfoMRouterExpiryTime = _MldInfoMRouterExpiryTime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 22, 2, 1, 9),
    _MldInfoMRouterExpiryTime_Type()
)
mldInfoMRouterExpiryTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldInfoMRouterExpiryTime.setStatus("current")
_MldInfoMRouterId_Type = Integer32
_MldInfoMRouterId_Object = MibTableColumn
mldInfoMRouterId = _MldInfoMRouterId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 22, 2, 1, 10),
    _MldInfoMRouterId_Type()
)
mldInfoMRouterId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldInfoMRouterId.setStatus("current")


class _MldClearTables_Type(Integer32):
    """Custom type mldClearTables based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("clearGroups", 1),
          ("clearMrouters", 2),
          ("clearAll", 3))
    )


_MldClearTables_Type.__name__ = "Integer32"
_MldClearTables_Object = MibScalar
mldClearTables = _MldClearTables_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 22, 3),
    _MldClearTables_Type()
)
mldClearTables.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mldClearTables.setStatus("current")
_MldInfoInterfaceTable_Object = MibTable
mldInfoInterfaceTable = _MldInfoInterfaceTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 22, 4)
)
if mibBuilder.loadTexts:
    mldInfoInterfaceTable.setStatus("current")
_MldInfoInterfaceEntry_Object = MibTableRow
mldInfoInterfaceEntry = _MldInfoInterfaceEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 22, 4, 1)
)
mldInfoInterfaceEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "mldInfoInterfaceIfIndex"),
)
if mibBuilder.loadTexts:
    mldInfoInterfaceEntry.setStatus("current")
_MldInfoInterfaceIfIndex_Type = Integer32
_MldInfoInterfaceIfIndex_Object = MibTableColumn
mldInfoInterfaceIfIndex = _MldInfoInterfaceIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 22, 4, 1, 1),
    _MldInfoInterfaceIfIndex_Type()
)
mldInfoInterfaceIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldInfoInterfaceIfIndex.setStatus("current")


class _MldInfoInterfaceState_Type(Integer32):
    """Custom type mldInfoInterfaceState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("up", 1),
          ("down", 2))
    )


_MldInfoInterfaceState_Type.__name__ = "Integer32"
_MldInfoInterfaceState_Object = MibTableColumn
mldInfoInterfaceState = _MldInfoInterfaceState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 22, 4, 1, 2),
    _MldInfoInterfaceState_Type()
)
mldInfoInterfaceState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldInfoInterfaceState.setStatus("current")


class _MldInfoInterfaceVersion_Type(Integer32):
    """Custom type mldInfoInterfaceVersion based on Integer32"""
    defaultValue = 1


_MldInfoInterfaceVersion_Type.__name__ = "Integer32"
_MldInfoInterfaceVersion_Object = MibTableColumn
mldInfoInterfaceVersion = _MldInfoInterfaceVersion_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 22, 4, 1, 3),
    _MldInfoInterfaceVersion_Type()
)
mldInfoInterfaceVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldInfoInterfaceVersion.setStatus("current")
_MldInfoInterfaceQuerierStatus_Type = Integer32
_MldInfoInterfaceQuerierStatus_Object = MibTableColumn
mldInfoInterfaceQuerierStatus = _MldInfoInterfaceQuerierStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 22, 4, 1, 4),
    _MldInfoInterfaceQuerierStatus_Type()
)
mldInfoInterfaceQuerierStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldInfoInterfaceQuerierStatus.setStatus("current")
_MldInfoInterfaceQuerier_Type = InetAddressIPv6
_MldInfoInterfaceQuerier_Object = MibTableColumn
mldInfoInterfaceQuerier = _MldInfoInterfaceQuerier_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 22, 4, 1, 5),
    _MldInfoInterfaceQuerier_Type()
)
mldInfoInterfaceQuerier.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldInfoInterfaceQuerier.setStatus("current")
_MldInfoInterfaceQuerierExpiryTime_Type = DisplayString
_MldInfoInterfaceQuerierExpiryTime_Object = MibTableColumn
mldInfoInterfaceQuerierExpiryTime = _MldInfoInterfaceQuerierExpiryTime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 22, 4, 1, 6),
    _MldInfoInterfaceQuerierExpiryTime_Type()
)
mldInfoInterfaceQuerierExpiryTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldInfoInterfaceQuerierExpiryTime.setStatus("current")
_MldInfoInterfaceQuerierPort_Type = Integer32
_MldInfoInterfaceQuerierPort_Object = MibTableColumn
mldInfoInterfaceQuerierPort = _MldInfoInterfaceQuerierPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 22, 4, 1, 7),
    _MldInfoInterfaceQuerierPort_Type()
)
mldInfoInterfaceQuerierPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldInfoInterfaceQuerierPort.setStatus("current")
_MldInfoInterfaceGroups_Type = Integer32
_MldInfoInterfaceGroups_Object = MibTableColumn
mldInfoInterfaceGroups = _MldInfoInterfaceGroups_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 22, 4, 1, 8),
    _MldInfoInterfaceGroups_Type()
)
mldInfoInterfaceGroups.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mldInfoInterfaceGroups.setStatus("current")
_IpsecInfo_ObjectIdentity = ObjectIdentity
ipsecInfo = _IpsecInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 23)
)
_IpsecSaInfoTable_Object = MibTable
ipsecSaInfoTable = _IpsecSaInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 23, 1)
)
if mibBuilder.loadTexts:
    ipsecSaInfoTable.setStatus("current")
_IpsecSaInfoEntry_Object = MibTableRow
ipsecSaInfoEntry = _IpsecSaInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 23, 1, 1)
)
ipsecSaInfoEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipsecSaInfoIndex"),
)
if mibBuilder.loadTexts:
    ipsecSaInfoEntry.setStatus("current")
_IpsecSaInfoIndex_Type = Unsigned32
_IpsecSaInfoIndex_Object = MibTableColumn
ipsecSaInfoIndex = _IpsecSaInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 23, 1, 1, 1),
    _IpsecSaInfoIndex_Type()
)
ipsecSaInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecSaInfoIndex.setStatus("current")
_IpsecSaInfoSpi_Type = Unsigned32
_IpsecSaInfoSpi_Object = MibTableColumn
ipsecSaInfoSpi = _IpsecSaInfoSpi_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 23, 1, 1, 2),
    _IpsecSaInfoSpi_Type()
)
ipsecSaInfoSpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecSaInfoSpi.setStatus("current")


class _IpsecSaInfoProto_Type(Integer32):
    """Custom type ipsecSaInfoProto based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              50,
              51)
        )
    )
    namedValues = NamedValues(
        *(("any", 0),
          ("esp", 50),
          ("ah", 51))
    )


_IpsecSaInfoProto_Type.__name__ = "Integer32"
_IpsecSaInfoProto_Object = MibTableColumn
ipsecSaInfoProto = _IpsecSaInfoProto_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 23, 1, 1, 3),
    _IpsecSaInfoProto_Type()
)
ipsecSaInfoProto.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecSaInfoProto.setStatus("current")


class _IpsecSaInfoDstAddr_Type(OctetString):
    """Custom type ipsecSaInfoDstAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(16, 16),
    )
    fixed_length = 16


_IpsecSaInfoDstAddr_Type.__name__ = "OctetString"
_IpsecSaInfoDstAddr_Object = MibTableColumn
ipsecSaInfoDstAddr = _IpsecSaInfoDstAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 23, 1, 1, 4),
    _IpsecSaInfoDstAddr_Type()
)
ipsecSaInfoDstAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecSaInfoDstAddr.setStatus("current")


class _IpsecSaInfoSrcAddr_Type(OctetString):
    """Custom type ipsecSaInfoSrcAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(16, 16),
    )
    fixed_length = 16


_IpsecSaInfoSrcAddr_Type.__name__ = "OctetString"
_IpsecSaInfoSrcAddr_Object = MibTableColumn
ipsecSaInfoSrcAddr = _IpsecSaInfoSrcAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 23, 1, 1, 5),
    _IpsecSaInfoSrcAddr_Type()
)
ipsecSaInfoSrcAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecSaInfoSrcAddr.setStatus("current")
_IpsecSaInfoFlags_Type = Unsigned32
_IpsecSaInfoFlags_Object = MibTableColumn
ipsecSaInfoFlags = _IpsecSaInfoFlags_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 23, 1, 1, 6),
    _IpsecSaInfoFlags_Type()
)
ipsecSaInfoFlags.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecSaInfoFlags.setStatus("current")
_IpsecSaInfoUlp_Type = Unsigned32
_IpsecSaInfoUlp_Object = MibTableColumn
ipsecSaInfoUlp = _IpsecSaInfoUlp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 23, 1, 1, 7),
    _IpsecSaInfoUlp_Type()
)
ipsecSaInfoUlp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecSaInfoUlp.setStatus("current")


class _IpsecSaInfoMode_Type(Integer32):
    """Custom type ipsecSaInfoMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("any", 0),
          ("transport", 1),
          ("tunnel", 2))
    )


_IpsecSaInfoMode_Type.__name__ = "Integer32"
_IpsecSaInfoMode_Object = MibTableColumn
ipsecSaInfoMode = _IpsecSaInfoMode_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 23, 1, 1, 8),
    _IpsecSaInfoMode_Type()
)
ipsecSaInfoMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecSaInfoMode.setStatus("current")


class _IpsecSaInfoAuthAlg_Type(Integer32):
    """Custom type ipsecSaInfoAuthAlg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("any", 0),
          ("md5", 1),
          ("sha1", 2))
    )


_IpsecSaInfoAuthAlg_Type.__name__ = "Integer32"
_IpsecSaInfoAuthAlg_Object = MibTableColumn
ipsecSaInfoAuthAlg = _IpsecSaInfoAuthAlg_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 23, 1, 1, 9),
    _IpsecSaInfoAuthAlg_Type()
)
ipsecSaInfoAuthAlg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecSaInfoAuthAlg.setStatus("current")


class _IpsecSaInfoAuthKey_Type(OctetString):
    """Custom type ipsecSaInfoAuthKey based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(20, 64),
    )


_IpsecSaInfoAuthKey_Type.__name__ = "OctetString"
_IpsecSaInfoAuthKey_Object = MibTableColumn
ipsecSaInfoAuthKey = _IpsecSaInfoAuthKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 23, 1, 1, 10),
    _IpsecSaInfoAuthKey_Type()
)
ipsecSaInfoAuthKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecSaInfoAuthKey.setStatus("current")


class _IpsecSaInfoEncrAlg_Type(Integer32):
    """Custom type ipsecSaInfoEncrAlg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("any", 0),
          ("des", 1),
          ("triple-des", 2),
          ("blowfish", 3),
          ("aes", 4))
    )


_IpsecSaInfoEncrAlg_Type.__name__ = "Integer32"
_IpsecSaInfoEncrAlg_Object = MibTableColumn
ipsecSaInfoEncrAlg = _IpsecSaInfoEncrAlg_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 23, 1, 1, 11),
    _IpsecSaInfoEncrAlg_Type()
)
ipsecSaInfoEncrAlg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecSaInfoEncrAlg.setStatus("current")


class _IpsecSaInfoEncrKey_Type(OctetString):
    """Custom type ipsecSaInfoEncrKey based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(20, 64),
    )


_IpsecSaInfoEncrKey_Type.__name__ = "OctetString"
_IpsecSaInfoEncrKey_Object = MibTableColumn
ipsecSaInfoEncrKey = _IpsecSaInfoEncrKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 23, 1, 1, 12),
    _IpsecSaInfoEncrKey_Type()
)
ipsecSaInfoEncrKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecSaInfoEncrKey.setStatus("current")
_IpsecSpdInfoTable_Object = MibTable
ipsecSpdInfoTable = _IpsecSpdInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 23, 2)
)
if mibBuilder.loadTexts:
    ipsecSpdInfoTable.setStatus("current")
_IpsecSpdInfoEntry_Object = MibTableRow
ipsecSpdInfoEntry = _IpsecSpdInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 23, 2, 1)
)
ipsecSpdInfoEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipsecSpdInfoIndex"),
)
if mibBuilder.loadTexts:
    ipsecSpdInfoEntry.setStatus("current")
_IpsecSpdInfoIndex_Type = Unsigned32
_IpsecSpdInfoIndex_Object = MibTableColumn
ipsecSpdInfoIndex = _IpsecSpdInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 23, 2, 1, 1),
    _IpsecSpdInfoIndex_Type()
)
ipsecSpdInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecSpdInfoIndex.setStatus("current")
_IpsecSpdInfoFlags_Type = Unsigned32
_IpsecSpdInfoFlags_Object = MibTableColumn
ipsecSpdInfoFlags = _IpsecSpdInfoFlags_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 23, 2, 1, 2),
    _IpsecSpdInfoFlags_Type()
)
ipsecSpdInfoFlags.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecSpdInfoFlags.setStatus("current")
_IpsecSpdInfoULP_Type = Unsigned32
_IpsecSpdInfoULP_Object = MibTableColumn
ipsecSpdInfoULP = _IpsecSpdInfoULP_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 23, 2, 1, 3),
    _IpsecSpdInfoULP_Type()
)
ipsecSpdInfoULP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecSpdInfoULP.setStatus("current")


class _IpsecSpdInfoAction_Type(Integer32):
    """Custom type ipsecSpdInfoAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("drop", 1),
          ("apply", 2),
          ("permit", 3),
          ("bypass", 4))
    )


_IpsecSpdInfoAction_Type.__name__ = "Integer32"
_IpsecSpdInfoAction_Object = MibTableColumn
ipsecSpdInfoAction = _IpsecSpdInfoAction_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 23, 2, 1, 4),
    _IpsecSpdInfoAction_Type()
)
ipsecSpdInfoAction.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecSpdInfoAction.setStatus("current")


class _IpsecSpdInfoDstAddr_Type(OctetString):
    """Custom type ipsecSpdInfoDstAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(16, 16),
    )
    fixed_length = 16


_IpsecSpdInfoDstAddr_Type.__name__ = "OctetString"
_IpsecSpdInfoDstAddr_Object = MibTableColumn
ipsecSpdInfoDstAddr = _IpsecSpdInfoDstAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 23, 2, 1, 5),
    _IpsecSpdInfoDstAddr_Type()
)
ipsecSpdInfoDstAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecSpdInfoDstAddr.setStatus("current")


class _IpsecSpdInfoSrcAddr_Type(OctetString):
    """Custom type ipsecSpdInfoSrcAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(16, 16),
    )
    fixed_length = 16


_IpsecSpdInfoSrcAddr_Type.__name__ = "OctetString"
_IpsecSpdInfoSrcAddr_Object = MibTableColumn
ipsecSpdInfoSrcAddr = _IpsecSpdInfoSrcAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 23, 2, 1, 6),
    _IpsecSpdInfoSrcAddr_Type()
)
ipsecSpdInfoSrcAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecSpdInfoSrcAddr.setStatus("current")


class _IpsecSpdInfoMode_Type(Integer32):
    """Custom type ipsecSpdInfoMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("any", 0),
          ("transport", 1),
          ("tunnel", 2))
    )


_IpsecSpdInfoMode_Type.__name__ = "Integer32"
_IpsecSpdInfoMode_Object = MibTableColumn
ipsecSpdInfoMode = _IpsecSpdInfoMode_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 23, 2, 1, 7),
    _IpsecSpdInfoMode_Type()
)
ipsecSpdInfoMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecSpdInfoMode.setStatus("current")
_IpsecSpdInfoSaSize_Type = Unsigned32
_IpsecSpdInfoSaSize_Object = MibTableColumn
ipsecSpdInfoSaSize = _IpsecSpdInfoSaSize_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 23, 2, 1, 8),
    _IpsecSpdInfoSaSize_Type()
)
ipsecSpdInfoSaSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecSpdInfoSaSize.setStatus("current")
_IpsecSpdInfoSaTable_Object = MibTable
ipsecSpdInfoSaTable = _IpsecSpdInfoSaTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 23, 3)
)
if mibBuilder.loadTexts:
    ipsecSpdInfoSaTable.setStatus("current")
_IpsecSpdInfoSaEntry_Object = MibTableRow
ipsecSpdInfoSaEntry = _IpsecSpdInfoSaEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 23, 3, 1)
)
ipsecSpdInfoSaEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ipsecSpdInfoIndex"),
    (0, "IBM-GbTOR-G8264T-MIB", "ipsecSpdInfoSaIndex"),
)
if mibBuilder.loadTexts:
    ipsecSpdInfoSaEntry.setStatus("current")
_IpsecSpdInfoSaIndex_Type = Unsigned32
_IpsecSpdInfoSaIndex_Object = MibTableColumn
ipsecSpdInfoSaIndex = _IpsecSpdInfoSaIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 23, 3, 1, 1),
    _IpsecSpdInfoSaIndex_Type()
)
ipsecSpdInfoSaIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecSpdInfoSaIndex.setStatus("current")


class _IpsecSpdInfoSaSecuProto_Type(Integer32):
    """Custom type ipsecSpdInfoSaSecuProto based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ah", 0),
          ("esp", 1),
          ("esp-auth", 2),
          ("esp-null", 3))
    )


_IpsecSpdInfoSaSecuProto_Type.__name__ = "Integer32"
_IpsecSpdInfoSaSecuProto_Object = MibTableColumn
ipsecSpdInfoSaSecuProto = _IpsecSpdInfoSaSecuProto_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 23, 3, 1, 2),
    _IpsecSpdInfoSaSecuProto_Type()
)
ipsecSpdInfoSaSecuProto.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecSpdInfoSaSecuProto.setStatus("current")


class _IpsecSpdInfoSaAuthAlg_Type(Integer32):
    """Custom type ipsecSpdInfoSaAuthAlg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("any", 0),
          ("md5", 1),
          ("sha1", 2))
    )


_IpsecSpdInfoSaAuthAlg_Type.__name__ = "Integer32"
_IpsecSpdInfoSaAuthAlg_Object = MibTableColumn
ipsecSpdInfoSaAuthAlg = _IpsecSpdInfoSaAuthAlg_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 23, 3, 1, 3),
    _IpsecSpdInfoSaAuthAlg_Type()
)
ipsecSpdInfoSaAuthAlg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecSpdInfoSaAuthAlg.setStatus("current")


class _IpsecSpdInfoSaEncrAlg_Type(Integer32):
    """Custom type ipsecSpdInfoSaEncrAlg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("any", 0),
          ("des", 1),
          ("triple-des", 2),
          ("blowfish", 3),
          ("aes", 4))
    )


_IpsecSpdInfoSaEncrAlg_Type.__name__ = "Integer32"
_IpsecSpdInfoSaEncrAlg_Object = MibTableColumn
ipsecSpdInfoSaEncrAlg = _IpsecSpdInfoSaEncrAlg_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 23, 3, 1, 4),
    _IpsecSpdInfoSaEncrAlg_Type()
)
ipsecSpdInfoSaEncrAlg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecSpdInfoSaEncrAlg.setStatus("current")
_IpsecSpdInfoSaEncrKeyLen_Type = Unsigned32
_IpsecSpdInfoSaEncrKeyLen_Object = MibTableColumn
ipsecSpdInfoSaEncrKeyLen = _IpsecSpdInfoSaEncrKeyLen_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 23, 3, 1, 5),
    _IpsecSpdInfoSaEncrKeyLen_Type()
)
ipsecSpdInfoSaEncrKeyLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipsecSpdInfoSaEncrKeyLen.setStatus("current")
_DhcpsnpInfo_ObjectIdentity = ObjectIdentity
dhcpsnpInfo = _DhcpsnpInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 24)
)
_DhcpSnoopingBindingInfoTable_Object = MibTable
dhcpSnoopingBindingInfoTable = _DhcpSnoopingBindingInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 24, 1)
)
if mibBuilder.loadTexts:
    dhcpSnoopingBindingInfoTable.setStatus("current")
_DhcpSnoopingBindingInfoEntry_Object = MibTableRow
dhcpSnoopingBindingInfoEntry = _DhcpSnoopingBindingInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 24, 1, 1)
)
dhcpSnoopingBindingInfoEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "dhcpSnoopingBindingInfoIndex"),
)
if mibBuilder.loadTexts:
    dhcpSnoopingBindingInfoEntry.setStatus("current")
_DhcpSnoopingBindingInfoIndex_Type = Integer32
_DhcpSnoopingBindingInfoIndex_Object = MibTableColumn
dhcpSnoopingBindingInfoIndex = _DhcpSnoopingBindingInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 24, 1, 1, 1),
    _DhcpSnoopingBindingInfoIndex_Type()
)
dhcpSnoopingBindingInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpSnoopingBindingInfoIndex.setStatus("current")
_DhcpSnoopingBindingInfoMac_Type = OctetString
_DhcpSnoopingBindingInfoMac_Object = MibTableColumn
dhcpSnoopingBindingInfoMac = _DhcpSnoopingBindingInfoMac_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 24, 1, 1, 2),
    _DhcpSnoopingBindingInfoMac_Type()
)
dhcpSnoopingBindingInfoMac.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpSnoopingBindingInfoMac.setStatus("current")
_DhcpSnoopingBindingInfoIp_Type = IpAddress
_DhcpSnoopingBindingInfoIp_Object = MibTableColumn
dhcpSnoopingBindingInfoIp = _DhcpSnoopingBindingInfoIp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 24, 1, 1, 3),
    _DhcpSnoopingBindingInfoIp_Type()
)
dhcpSnoopingBindingInfoIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dhcpSnoopingBindingInfoIp.setStatus("current")
_DhcpSnoopingBindingInfoVLAN_Type = Integer32
_DhcpSnoopingBindingInfoVLAN_Object = MibTableColumn
dhcpSnoopingBindingInfoVLAN = _DhcpSnoopingBindingInfoVLAN_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 24, 1, 1, 4),
    _DhcpSnoopingBindingInfoVLAN_Type()
)
dhcpSnoopingBindingInfoVLAN.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dhcpSnoopingBindingInfoVLAN.setStatus("current")
_DhcpSnoopingBindingInfoPort_Type = Integer32
_DhcpSnoopingBindingInfoPort_Object = MibTableColumn
dhcpSnoopingBindingInfoPort = _DhcpSnoopingBindingInfoPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 24, 1, 1, 5),
    _DhcpSnoopingBindingInfoPort_Type()
)
dhcpSnoopingBindingInfoPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dhcpSnoopingBindingInfoPort.setStatus("current")
_DhcpSnoopingBindingInfoExpiry_Type = Unsigned32
_DhcpSnoopingBindingInfoExpiry_Object = MibTableColumn
dhcpSnoopingBindingInfoExpiry = _DhcpSnoopingBindingInfoExpiry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 24, 1, 1, 6),
    _DhcpSnoopingBindingInfoExpiry_Type()
)
dhcpSnoopingBindingInfoExpiry.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dhcpSnoopingBindingInfoExpiry.setStatus("current")


class _DhcpSnoopingBindingInfoType_Type(Integer32):
    """Custom type dhcpSnoopingBindingInfoType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("static", 1),
          ("dynamic", 2))
    )


_DhcpSnoopingBindingInfoType_Type.__name__ = "Integer32"
_DhcpSnoopingBindingInfoType_Object = MibTableColumn
dhcpSnoopingBindingInfoType = _DhcpSnoopingBindingInfoType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 3, 24, 1, 1, 7),
    _DhcpSnoopingBindingInfoType_Type()
)
dhcpSnoopingBindingInfoType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dhcpSnoopingBindingInfoType.setStatus("current")
_Layer3Oper_ObjectIdentity = ObjectIdentity
layer3Oper = _Layer3Oper_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 4)
)
_VrrpOper_ObjectIdentity = ObjectIdentity
vrrpOper = _VrrpOper_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 4, 1)
)
_VrrpOperVirtRtrTable_Object = MibTable
vrrpOperVirtRtrTable = _VrrpOperVirtRtrTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 4, 1, 1)
)
if mibBuilder.loadTexts:
    vrrpOperVirtRtrTable.setStatus("current")
_VrrpOperVirtRtrEntry_Object = MibTableRow
vrrpOperVirtRtrEntry = _VrrpOperVirtRtrEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 4, 1, 1, 1)
)
vrrpOperVirtRtrEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vrrpOperVirtRtrIndex"),
)
if mibBuilder.loadTexts:
    vrrpOperVirtRtrEntry.setStatus("current")
_VrrpOperVirtRtrIndex_Type = Integer32
_VrrpOperVirtRtrIndex_Object = MibTableColumn
vrrpOperVirtRtrIndex = _VrrpOperVirtRtrIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 4, 1, 1, 1, 1),
    _VrrpOperVirtRtrIndex_Type()
)
vrrpOperVirtRtrIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpOperVirtRtrIndex.setStatus("current")


class _VrrpOperVirtRtrBackup_Type(Integer32):
    """Custom type vrrpOperVirtRtrBackup based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("backup", 2))
    )


_VrrpOperVirtRtrBackup_Type.__name__ = "Integer32"
_VrrpOperVirtRtrBackup_Object = MibTableColumn
vrrpOperVirtRtrBackup = _VrrpOperVirtRtrBackup_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 4, 1, 1, 1, 2),
    _VrrpOperVirtRtrBackup_Type()
)
vrrpOperVirtRtrBackup.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vrrpOperVirtRtrBackup.setStatus("current")


class _VrrpOperVirtRtrGroupBackup_Type(Integer32):
    """Custom type vrrpOperVirtRtrGroupBackup based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("backup", 2))
    )


_VrrpOperVirtRtrGroupBackup_Type.__name__ = "Integer32"
_VrrpOperVirtRtrGroupBackup_Object = MibScalar
vrrpOperVirtRtrGroupBackup = _VrrpOperVirtRtrGroupBackup_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 3, 4, 1, 2),
    _VrrpOperVirtRtrGroupBackup_Type()
)
vrrpOperVirtRtrGroupBackup.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vrrpOperVirtRtrGroupBackup.setStatus("current")
_Traps_ObjectIdentity = ObjectIdentity
traps = _Traps_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7)
)
_IbmSNMPv2Notifications_ObjectIdentity = ObjectIdentity
ibmSNMPv2Notifications = _IbmSNMPv2Notifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0)
)


class _SwTrapDisplayString_Type(DisplayString):
    """Custom type swTrapDisplayString based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_SwTrapDisplayString_Type.__name__ = "DisplayString"
_SwTrapDisplayString_Object = MibScalar
swTrapDisplayString = _SwTrapDisplayString_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 1000),
    _SwTrapDisplayString_Type()
)
swTrapDisplayString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    swTrapDisplayString.setStatus("current")
_Qos_ObjectIdentity = ObjectIdentity
qos = _Qos_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8)
)
_QosConfig_ObjectIdentity = ObjectIdentity
qosConfig = _QosConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1)
)
_Qos8021p_ObjectIdentity = ObjectIdentity
qos8021p = _Qos8021p_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 1)
)
_QosCurCfgPortPriorityTable_Object = MibTable
qosCurCfgPortPriorityTable = _QosCurCfgPortPriorityTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 1, 1)
)
if mibBuilder.loadTexts:
    qosCurCfgPortPriorityTable.setStatus("current")
_QosCurCfgPortPriorityEntry_Object = MibTableRow
qosCurCfgPortPriorityEntry = _QosCurCfgPortPriorityEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 1, 1, 1)
)
qosCurCfgPortPriorityEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "qosCurCfgPortIndex"),
)
if mibBuilder.loadTexts:
    qosCurCfgPortPriorityEntry.setStatus("current")
_QosCurCfgPortIndex_Type = PortNumber
_QosCurCfgPortIndex_Object = MibTableColumn
qosCurCfgPortIndex = _QosCurCfgPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 1, 1, 1, 1),
    _QosCurCfgPortIndex_Type()
)
qosCurCfgPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgPortIndex.setStatus("current")


class _QosCurCfgPortPriority_Type(Integer32):
    """Custom type qosCurCfgPortPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_QosCurCfgPortPriority_Type.__name__ = "Integer32"
_QosCurCfgPortPriority_Object = MibTableColumn
qosCurCfgPortPriority = _QosCurCfgPortPriority_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 1, 1, 1, 2),
    _QosCurCfgPortPriority_Type()
)
qosCurCfgPortPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgPortPriority.setStatus("current")
_QosNewCfgPortPriorityTable_Object = MibTable
qosNewCfgPortPriorityTable = _QosNewCfgPortPriorityTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 1, 2)
)
if mibBuilder.loadTexts:
    qosNewCfgPortPriorityTable.setStatus("current")
_QosNewCfgPortPriorityEntry_Object = MibTableRow
qosNewCfgPortPriorityEntry = _QosNewCfgPortPriorityEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 1, 2, 1)
)
qosNewCfgPortPriorityEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "qosNewCfgPortIndex"),
)
if mibBuilder.loadTexts:
    qosNewCfgPortPriorityEntry.setStatus("current")
_QosNewCfgPortIndex_Type = PortNumber
_QosNewCfgPortIndex_Object = MibTableColumn
qosNewCfgPortIndex = _QosNewCfgPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 1, 2, 1, 1),
    _QosNewCfgPortIndex_Type()
)
qosNewCfgPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosNewCfgPortIndex.setStatus("current")


class _QosNewCfgPortPriority_Type(Integer32):
    """Custom type qosNewCfgPortPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_QosNewCfgPortPriority_Type.__name__ = "Integer32"
_QosNewCfgPortPriority_Object = MibTableColumn
qosNewCfgPortPriority = _QosNewCfgPortPriority_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 1, 2, 1, 2),
    _QosNewCfgPortPriority_Type()
)
qosNewCfgPortPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qosNewCfgPortPriority.setStatus("current")
_QosCurCfgPriorityCoSTable_Object = MibTable
qosCurCfgPriorityCoSTable = _QosCurCfgPriorityCoSTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 1, 3)
)
if mibBuilder.loadTexts:
    qosCurCfgPriorityCoSTable.setStatus("current")
_QosCurCfgPriorityCoSEntry_Object = MibTableRow
qosCurCfgPriorityCoSEntry = _QosCurCfgPriorityCoSEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 1, 3, 1)
)
qosCurCfgPriorityCoSEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "qosCurCfgPriorityIndex"),
)
if mibBuilder.loadTexts:
    qosCurCfgPriorityCoSEntry.setStatus("current")


class _QosCurCfgPriorityIndex_Type(Integer32):
    """Custom type qosCurCfgPriorityIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_QosCurCfgPriorityIndex_Type.__name__ = "Integer32"
_QosCurCfgPriorityIndex_Object = MibTableColumn
qosCurCfgPriorityIndex = _QosCurCfgPriorityIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 1, 3, 1, 1),
    _QosCurCfgPriorityIndex_Type()
)
qosCurCfgPriorityIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgPriorityIndex.setStatus("current")


class _QosCurCfgPriorityCoSq_Type(Integer32):
    """Custom type qosCurCfgPriorityCoSq based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_QosCurCfgPriorityCoSq_Type.__name__ = "Integer32"
_QosCurCfgPriorityCoSq_Object = MibTableColumn
qosCurCfgPriorityCoSq = _QosCurCfgPriorityCoSq_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 1, 3, 1, 2),
    _QosCurCfgPriorityCoSq_Type()
)
qosCurCfgPriorityCoSq.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgPriorityCoSq.setStatus("current")
_QosNewCfgPriorityCoSTable_Object = MibTable
qosNewCfgPriorityCoSTable = _QosNewCfgPriorityCoSTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 1, 4)
)
if mibBuilder.loadTexts:
    qosNewCfgPriorityCoSTable.setStatus("current")
_QosNewCfgPriorityCoSEntry_Object = MibTableRow
qosNewCfgPriorityCoSEntry = _QosNewCfgPriorityCoSEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 1, 4, 1)
)
qosNewCfgPriorityCoSEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "qosNewCfgPriorityIndex"),
)
if mibBuilder.loadTexts:
    qosNewCfgPriorityCoSEntry.setStatus("current")


class _QosNewCfgPriorityIndex_Type(Integer32):
    """Custom type qosNewCfgPriorityIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_QosNewCfgPriorityIndex_Type.__name__ = "Integer32"
_QosNewCfgPriorityIndex_Object = MibTableColumn
qosNewCfgPriorityIndex = _QosNewCfgPriorityIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 1, 4, 1, 1),
    _QosNewCfgPriorityIndex_Type()
)
qosNewCfgPriorityIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosNewCfgPriorityIndex.setStatus("current")


class _QosNewCfgPriorityCoSq_Type(Integer32):
    """Custom type qosNewCfgPriorityCoSq based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_QosNewCfgPriorityCoSq_Type.__name__ = "Integer32"
_QosNewCfgPriorityCoSq_Object = MibTableColumn
qosNewCfgPriorityCoSq = _QosNewCfgPriorityCoSq_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 1, 4, 1, 2),
    _QosNewCfgPriorityCoSq_Type()
)
qosNewCfgPriorityCoSq.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qosNewCfgPriorityCoSq.setStatus("current")
_QosCurCfgCosWeightTable_Object = MibTable
qosCurCfgCosWeightTable = _QosCurCfgCosWeightTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 1, 5)
)
if mibBuilder.loadTexts:
    qosCurCfgCosWeightTable.setStatus("current")
_QosCurCfgCosWeightEntry_Object = MibTableRow
qosCurCfgCosWeightEntry = _QosCurCfgCosWeightEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 1, 5, 1)
)
qosCurCfgCosWeightEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "qosCurCfgCosIndex"),
)
if mibBuilder.loadTexts:
    qosCurCfgCosWeightEntry.setStatus("current")


class _QosCurCfgCosIndex_Type(Integer32):
    """Custom type qosCurCfgCosIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_QosCurCfgCosIndex_Type.__name__ = "Integer32"
_QosCurCfgCosIndex_Object = MibTableColumn
qosCurCfgCosIndex = _QosCurCfgCosIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 1, 5, 1, 1),
    _QosCurCfgCosIndex_Type()
)
qosCurCfgCosIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgCosIndex.setStatus("current")


class _QosCurCfgCosWeight_Type(Integer32):
    """Custom type qosCurCfgCosWeight based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_QosCurCfgCosWeight_Type.__name__ = "Integer32"
_QosCurCfgCosWeight_Object = MibTableColumn
qosCurCfgCosWeight = _QosCurCfgCosWeight_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 1, 5, 1, 2),
    _QosCurCfgCosWeight_Type()
)
qosCurCfgCosWeight.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgCosWeight.setStatus("current")
_QosNewCfgCosWeightTable_Object = MibTable
qosNewCfgCosWeightTable = _QosNewCfgCosWeightTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 1, 6)
)
if mibBuilder.loadTexts:
    qosNewCfgCosWeightTable.setStatus("current")
_QosNewCfgCosWeightEntry_Object = MibTableRow
qosNewCfgCosWeightEntry = _QosNewCfgCosWeightEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 1, 6, 1)
)
qosNewCfgCosWeightEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "qosNewCfgCosIndex"),
)
if mibBuilder.loadTexts:
    qosNewCfgCosWeightEntry.setStatus("current")


class _QosNewCfgCosIndex_Type(Integer32):
    """Custom type qosNewCfgCosIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_QosNewCfgCosIndex_Type.__name__ = "Integer32"
_QosNewCfgCosIndex_Object = MibTableColumn
qosNewCfgCosIndex = _QosNewCfgCosIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 1, 6, 1, 1),
    _QosNewCfgCosIndex_Type()
)
qosNewCfgCosIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosNewCfgCosIndex.setStatus("current")


class _QosNewCfgCosWeight_Type(Integer32):
    """Custom type qosNewCfgCosWeight based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_QosNewCfgCosWeight_Type.__name__ = "Integer32"
_QosNewCfgCosWeight_Object = MibTableColumn
qosNewCfgCosWeight = _QosNewCfgCosWeight_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 1, 6, 1, 2),
    _QosNewCfgCosWeight_Type()
)
qosNewCfgCosWeight.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qosNewCfgCosWeight.setStatus("current")


class _QosCurCfgCosNum_Type(Integer32):
    """Custom type qosCurCfgCosNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              8)
        )
    )
    namedValues = NamedValues(
        *(("num2", 2),
          ("num8", 8))
    )


_QosCurCfgCosNum_Type.__name__ = "Integer32"
_QosCurCfgCosNum_Object = MibScalar
qosCurCfgCosNum = _QosCurCfgCosNum_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 1, 7),
    _QosCurCfgCosNum_Type()
)
qosCurCfgCosNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgCosNum.setStatus("current")


class _QosDefaultCfg_Type(Integer32):
    """Custom type qosDefaultCfg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("defaultCosNum", 1),
          ("defaultWeight", 2),
          ("defaultPriority", 3))
    )


_QosDefaultCfg_Type.__name__ = "Integer32"
_QosDefaultCfg_Object = MibScalar
qosDefaultCfg = _QosDefaultCfg_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 1, 9),
    _QosDefaultCfg_Type()
)
qosDefaultCfg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qosDefaultCfg.setStatus("current")
_Qosdscp_ObjectIdentity = ObjectIdentity
qosdscp = _Qosdscp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 2)
)
_QosCurCfgDscpTable_Object = MibTable
qosCurCfgDscpTable = _QosCurCfgDscpTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 2, 1)
)
if mibBuilder.loadTexts:
    qosCurCfgDscpTable.setStatus("current")
_QosCurCfgDscpEntry_Object = MibTableRow
qosCurCfgDscpEntry = _QosCurCfgDscpEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 2, 1, 1)
)
qosCurCfgDscpEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "qosCurCfgDscpIndex"),
)
if mibBuilder.loadTexts:
    qosCurCfgDscpEntry.setStatus("current")


class _QosCurCfgDscpIndex_Type(Integer32):
    """Custom type qosCurCfgDscpIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_QosCurCfgDscpIndex_Type.__name__ = "Integer32"
_QosCurCfgDscpIndex_Object = MibTableColumn
qosCurCfgDscpIndex = _QosCurCfgDscpIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 2, 1, 1, 1),
    _QosCurCfgDscpIndex_Type()
)
qosCurCfgDscpIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgDscpIndex.setStatus("current")


class _QosCurCfgMapDscp_Type(Integer32):
    """Custom type qosCurCfgMapDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_QosCurCfgMapDscp_Type.__name__ = "Integer32"
_QosCurCfgMapDscp_Object = MibTableColumn
qosCurCfgMapDscp = _QosCurCfgMapDscp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 2, 1, 1, 2),
    _QosCurCfgMapDscp_Type()
)
qosCurCfgMapDscp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgMapDscp.setStatus("current")


class _QosCurCfgMap8021p_Type(Integer32):
    """Custom type qosCurCfgMap8021p based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_QosCurCfgMap8021p_Type.__name__ = "Integer32"
_QosCurCfgMap8021p_Object = MibTableColumn
qosCurCfgMap8021p = _QosCurCfgMap8021p_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 2, 1, 1, 3),
    _QosCurCfgMap8021p_Type()
)
qosCurCfgMap8021p.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgMap8021p.setStatus("current")
_QosNewCfgDscpTable_Object = MibTable
qosNewCfgDscpTable = _QosNewCfgDscpTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 2, 2)
)
if mibBuilder.loadTexts:
    qosNewCfgDscpTable.setStatus("current")
_QosNewCfgDscpEntry_Object = MibTableRow
qosNewCfgDscpEntry = _QosNewCfgDscpEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 2, 2, 1)
)
qosNewCfgDscpEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "qosNewCfgDscpIndex"),
)
if mibBuilder.loadTexts:
    qosNewCfgDscpEntry.setStatus("current")


class _QosNewCfgDscpIndex_Type(Integer32):
    """Custom type qosNewCfgDscpIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_QosNewCfgDscpIndex_Type.__name__ = "Integer32"
_QosNewCfgDscpIndex_Object = MibTableColumn
qosNewCfgDscpIndex = _QosNewCfgDscpIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 2, 2, 1, 1),
    _QosNewCfgDscpIndex_Type()
)
qosNewCfgDscpIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosNewCfgDscpIndex.setStatus("current")


class _QosNewCfgMapDscp_Type(Integer32):
    """Custom type qosNewCfgMapDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_QosNewCfgMapDscp_Type.__name__ = "Integer32"
_QosNewCfgMapDscp_Object = MibTableColumn
qosNewCfgMapDscp = _QosNewCfgMapDscp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 2, 2, 1, 2),
    _QosNewCfgMapDscp_Type()
)
qosNewCfgMapDscp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qosNewCfgMapDscp.setStatus("current")


class _QosNewCfgMap8021p_Type(Integer32):
    """Custom type qosNewCfgMap8021p based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_QosNewCfgMap8021p_Type.__name__ = "Integer32"
_QosNewCfgMap8021p_Object = MibTableColumn
qosNewCfgMap8021p = _QosNewCfgMap8021p_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 2, 2, 1, 3),
    _QosNewCfgMap8021p_Type()
)
qosNewCfgMap8021p.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qosNewCfgMap8021p.setStatus("current")


class _QosCurCfgDscpState_Type(Integer32):
    """Custom type qosCurCfgDscpState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_QosCurCfgDscpState_Type.__name__ = "Integer32"
_QosCurCfgDscpState_Object = MibScalar
qosCurCfgDscpState = _QosCurCfgDscpState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 2, 3),
    _QosCurCfgDscpState_Type()
)
qosCurCfgDscpState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgDscpState.setStatus("current")


class _QosNewCfgDscpState_Type(Integer32):
    """Custom type qosNewCfgDscpState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_QosNewCfgDscpState_Type.__name__ = "Integer32"
_QosNewCfgDscpState_Object = MibScalar
qosNewCfgDscpState = _QosNewCfgDscpState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 2, 4),
    _QosNewCfgDscpState_Type()
)
qosNewCfgDscpState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qosNewCfgDscpState.setStatus("current")
_Qoswredecn_ObjectIdentity = ObjectIdentity
qoswredecn = _Qoswredecn_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3)
)
_QosCurCfgPortProfileTable_Object = MibTable
qosCurCfgPortProfileTable = _QosCurCfgPortProfileTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 1)
)
if mibBuilder.loadTexts:
    qosCurCfgPortProfileTable.setStatus("current")
_QoSCurCfgPortProfileEntry_Object = MibTableRow
qoSCurCfgPortProfileEntry = _QoSCurCfgPortProfileEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 1, 1)
)
qoSCurCfgPortProfileEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "qosCurCfgProfilePortIndex"),
    (0, "IBM-GbTOR-G8264T-MIB", "qosCurCfgTrqIndex"),
)
if mibBuilder.loadTexts:
    qoSCurCfgPortProfileEntry.setStatus("current")
_QosCurCfgProfilePortIndex_Type = PortNumber
_QosCurCfgProfilePortIndex_Object = MibTableColumn
qosCurCfgProfilePortIndex = _QosCurCfgProfilePortIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 1, 1, 1),
    _QosCurCfgProfilePortIndex_Type()
)
qosCurCfgProfilePortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgProfilePortIndex.setStatus("current")


class _QosCurCfgTrqIndex_Type(Integer32):
    """Custom type qosCurCfgTrqIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_QosCurCfgTrqIndex_Type.__name__ = "Integer32"
_QosCurCfgTrqIndex_Object = MibTableColumn
qosCurCfgTrqIndex = _QosCurCfgTrqIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 1, 1, 2),
    _QosCurCfgTrqIndex_Type()
)
qosCurCfgTrqIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgTrqIndex.setStatus("current")


class _QosCurCfgTrqNonTcpMin_Type(Integer32):
    """Custom type qosCurCfgTrqNonTcpMin based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_QosCurCfgTrqNonTcpMin_Type.__name__ = "Integer32"
_QosCurCfgTrqNonTcpMin_Object = MibTableColumn
qosCurCfgTrqNonTcpMin = _QosCurCfgTrqNonTcpMin_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 1, 1, 3),
    _QosCurCfgTrqNonTcpMin_Type()
)
qosCurCfgTrqNonTcpMin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgTrqNonTcpMin.setStatus("current")


class _QosCurCfgTrqNonTcpMax_Type(Integer32):
    """Custom type qosCurCfgTrqNonTcpMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_QosCurCfgTrqNonTcpMax_Type.__name__ = "Integer32"
_QosCurCfgTrqNonTcpMax_Object = MibTableColumn
qosCurCfgTrqNonTcpMax = _QosCurCfgTrqNonTcpMax_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 1, 1, 4),
    _QosCurCfgTrqNonTcpMax_Type()
)
qosCurCfgTrqNonTcpMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgTrqNonTcpMax.setStatus("current")


class _QosCurCfgTrqNonTcpRate_Type(Integer32):
    """Custom type qosCurCfgTrqNonTcpRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_QosCurCfgTrqNonTcpRate_Type.__name__ = "Integer32"
_QosCurCfgTrqNonTcpRate_Object = MibTableColumn
qosCurCfgTrqNonTcpRate = _QosCurCfgTrqNonTcpRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 1, 1, 5),
    _QosCurCfgTrqNonTcpRate_Type()
)
qosCurCfgTrqNonTcpRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgTrqNonTcpRate.setStatus("current")


class _QosCurCfgTrqTcpMin_Type(Integer32):
    """Custom type qosCurCfgTrqTcpMin based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_QosCurCfgTrqTcpMin_Type.__name__ = "Integer32"
_QosCurCfgTrqTcpMin_Object = MibTableColumn
qosCurCfgTrqTcpMin = _QosCurCfgTrqTcpMin_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 1, 1, 6),
    _QosCurCfgTrqTcpMin_Type()
)
qosCurCfgTrqTcpMin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgTrqTcpMin.setStatus("current")


class _QosCurCfgTrqTcpMax_Type(Integer32):
    """Custom type qosCurCfgTrqTcpMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_QosCurCfgTrqTcpMax_Type.__name__ = "Integer32"
_QosCurCfgTrqTcpMax_Object = MibTableColumn
qosCurCfgTrqTcpMax = _QosCurCfgTrqTcpMax_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 1, 1, 7),
    _QosCurCfgTrqTcpMax_Type()
)
qosCurCfgTrqTcpMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgTrqTcpMax.setStatus("current")


class _QosCurCfgTrqTcpRate_Type(Integer32):
    """Custom type qosCurCfgTrqTcpRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_QosCurCfgTrqTcpRate_Type.__name__ = "Integer32"
_QosCurCfgTrqTcpRate_Object = MibTableColumn
qosCurCfgTrqTcpRate = _QosCurCfgTrqTcpRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 1, 1, 8),
    _QosCurCfgTrqTcpRate_Type()
)
qosCurCfgTrqTcpRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgTrqTcpRate.setStatus("current")


class _QosCurCfgPortTrqWredState_Type(Integer32):
    """Custom type qosCurCfgPortTrqWredState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_QosCurCfgPortTrqWredState_Type.__name__ = "Integer32"
_QosCurCfgPortTrqWredState_Object = MibTableColumn
qosCurCfgPortTrqWredState = _QosCurCfgPortTrqWredState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 1, 1, 9),
    _QosCurCfgPortTrqWredState_Type()
)
qosCurCfgPortTrqWredState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgPortTrqWredState.setStatus("current")
_QosNewCfgPortProfileTable_Object = MibTable
qosNewCfgPortProfileTable = _QosNewCfgPortProfileTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 2)
)
if mibBuilder.loadTexts:
    qosNewCfgPortProfileTable.setStatus("current")
_QoSNewCfgPortProfileEntry_Object = MibTableRow
qoSNewCfgPortProfileEntry = _QoSNewCfgPortProfileEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 2, 1)
)
qoSNewCfgPortProfileEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "qosNewCfgProfilePortIndex"),
    (0, "IBM-GbTOR-G8264T-MIB", "qosNewCfgTrqIndex"),
)
if mibBuilder.loadTexts:
    qoSNewCfgPortProfileEntry.setStatus("current")
_QosNewCfgProfilePortIndex_Type = PortNumber
_QosNewCfgProfilePortIndex_Object = MibTableColumn
qosNewCfgProfilePortIndex = _QosNewCfgProfilePortIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 2, 1, 1),
    _QosNewCfgProfilePortIndex_Type()
)
qosNewCfgProfilePortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosNewCfgProfilePortIndex.setStatus("current")


class _QosNewCfgTrqIndex_Type(Integer32):
    """Custom type qosNewCfgTrqIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_QosNewCfgTrqIndex_Type.__name__ = "Integer32"
_QosNewCfgTrqIndex_Object = MibTableColumn
qosNewCfgTrqIndex = _QosNewCfgTrqIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 2, 1, 2),
    _QosNewCfgTrqIndex_Type()
)
qosNewCfgTrqIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosNewCfgTrqIndex.setStatus("current")


class _QosNewCfgTrqNonTcpMin_Type(Integer32):
    """Custom type qosNewCfgTrqNonTcpMin based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_QosNewCfgTrqNonTcpMin_Type.__name__ = "Integer32"
_QosNewCfgTrqNonTcpMin_Object = MibTableColumn
qosNewCfgTrqNonTcpMin = _QosNewCfgTrqNonTcpMin_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 2, 1, 3),
    _QosNewCfgTrqNonTcpMin_Type()
)
qosNewCfgTrqNonTcpMin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qosNewCfgTrqNonTcpMin.setStatus("current")


class _QosNewCfgTrqNonTcpMax_Type(Integer32):
    """Custom type qosNewCfgTrqNonTcpMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_QosNewCfgTrqNonTcpMax_Type.__name__ = "Integer32"
_QosNewCfgTrqNonTcpMax_Object = MibTableColumn
qosNewCfgTrqNonTcpMax = _QosNewCfgTrqNonTcpMax_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 2, 1, 4),
    _QosNewCfgTrqNonTcpMax_Type()
)
qosNewCfgTrqNonTcpMax.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qosNewCfgTrqNonTcpMax.setStatus("current")


class _QosNewCfgTrqNonTcpRate_Type(Integer32):
    """Custom type qosNewCfgTrqNonTcpRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_QosNewCfgTrqNonTcpRate_Type.__name__ = "Integer32"
_QosNewCfgTrqNonTcpRate_Object = MibTableColumn
qosNewCfgTrqNonTcpRate = _QosNewCfgTrqNonTcpRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 2, 1, 5),
    _QosNewCfgTrqNonTcpRate_Type()
)
qosNewCfgTrqNonTcpRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qosNewCfgTrqNonTcpRate.setStatus("current")


class _QosNewCfgTrqTcpMin_Type(Integer32):
    """Custom type qosNewCfgTrqTcpMin based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_QosNewCfgTrqTcpMin_Type.__name__ = "Integer32"
_QosNewCfgTrqTcpMin_Object = MibTableColumn
qosNewCfgTrqTcpMin = _QosNewCfgTrqTcpMin_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 2, 1, 6),
    _QosNewCfgTrqTcpMin_Type()
)
qosNewCfgTrqTcpMin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qosNewCfgTrqTcpMin.setStatus("current")


class _QosNewCfgTrqTcpMax_Type(Integer32):
    """Custom type qosNewCfgTrqTcpMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_QosNewCfgTrqTcpMax_Type.__name__ = "Integer32"
_QosNewCfgTrqTcpMax_Object = MibTableColumn
qosNewCfgTrqTcpMax = _QosNewCfgTrqTcpMax_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 2, 1, 7),
    _QosNewCfgTrqTcpMax_Type()
)
qosNewCfgTrqTcpMax.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qosNewCfgTrqTcpMax.setStatus("current")


class _QosNewCfgTrqTcpRate_Type(Integer32):
    """Custom type qosNewCfgTrqTcpRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_QosNewCfgTrqTcpRate_Type.__name__ = "Integer32"
_QosNewCfgTrqTcpRate_Object = MibTableColumn
qosNewCfgTrqTcpRate = _QosNewCfgTrqTcpRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 2, 1, 8),
    _QosNewCfgTrqTcpRate_Type()
)
qosNewCfgTrqTcpRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qosNewCfgTrqTcpRate.setStatus("current")


class _QosNewCfgPortTrqWredState_Type(Integer32):
    """Custom type qosNewCfgPortTrqWredState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_QosNewCfgPortTrqWredState_Type.__name__ = "Integer32"
_QosNewCfgPortTrqWredState_Object = MibTableColumn
qosNewCfgPortTrqWredState = _QosNewCfgPortTrqWredState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 2, 1, 9),
    _QosNewCfgPortTrqWredState_Type()
)
qosNewCfgPortTrqWredState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qosNewCfgPortTrqWredState.setStatus("current")
_QosCurCfgPortStateTable_Object = MibTable
qosCurCfgPortStateTable = _QosCurCfgPortStateTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 3)
)
if mibBuilder.loadTexts:
    qosCurCfgPortStateTable.setStatus("current")
_QoSCurCfgPortStateEntry_Object = MibTableRow
qoSCurCfgPortStateEntry = _QoSCurCfgPortStateEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 3, 1)
)
qoSCurCfgPortStateEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "qosCurCfgStatePortIndex"),
)
if mibBuilder.loadTexts:
    qoSCurCfgPortStateEntry.setStatus("current")
_QosCurCfgStatePortIndex_Type = PortNumber
_QosCurCfgStatePortIndex_Object = MibTableColumn
qosCurCfgStatePortIndex = _QosCurCfgStatePortIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 3, 1, 1),
    _QosCurCfgStatePortIndex_Type()
)
qosCurCfgStatePortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgStatePortIndex.setStatus("current")


class _QosCurCfgPortWredState_Type(Integer32):
    """Custom type qosCurCfgPortWredState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_QosCurCfgPortWredState_Type.__name__ = "Integer32"
_QosCurCfgPortWredState_Object = MibTableColumn
qosCurCfgPortWredState = _QosCurCfgPortWredState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 3, 1, 2),
    _QosCurCfgPortWredState_Type()
)
qosCurCfgPortWredState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgPortWredState.setStatus("current")


class _QosCurCfgPortEcnState_Type(Integer32):
    """Custom type qosCurCfgPortEcnState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_QosCurCfgPortEcnState_Type.__name__ = "Integer32"
_QosCurCfgPortEcnState_Object = MibTableColumn
qosCurCfgPortEcnState = _QosCurCfgPortEcnState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 3, 1, 3),
    _QosCurCfgPortEcnState_Type()
)
qosCurCfgPortEcnState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgPortEcnState.setStatus("current")
_QosNewCfgPortStateTable_Object = MibTable
qosNewCfgPortStateTable = _QosNewCfgPortStateTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 4)
)
if mibBuilder.loadTexts:
    qosNewCfgPortStateTable.setStatus("current")
_QoSNewCfgPortStateEntry_Object = MibTableRow
qoSNewCfgPortStateEntry = _QoSNewCfgPortStateEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 4, 1)
)
qoSNewCfgPortStateEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "qosNewCfgStatePortIndex"),
)
if mibBuilder.loadTexts:
    qoSNewCfgPortStateEntry.setStatus("current")
_QosNewCfgStatePortIndex_Type = PortNumber
_QosNewCfgStatePortIndex_Object = MibTableColumn
qosNewCfgStatePortIndex = _QosNewCfgStatePortIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 4, 1, 1),
    _QosNewCfgStatePortIndex_Type()
)
qosNewCfgStatePortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosNewCfgStatePortIndex.setStatus("current")


class _QosNewCfgPortWredState_Type(Integer32):
    """Custom type qosNewCfgPortWredState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_QosNewCfgPortWredState_Type.__name__ = "Integer32"
_QosNewCfgPortWredState_Object = MibTableColumn
qosNewCfgPortWredState = _QosNewCfgPortWredState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 4, 1, 2),
    _QosNewCfgPortWredState_Type()
)
qosNewCfgPortWredState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qosNewCfgPortWredState.setStatus("current")


class _QosNewCfgPortEcnState_Type(Integer32):
    """Custom type qosNewCfgPortEcnState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_QosNewCfgPortEcnState_Type.__name__ = "Integer32"
_QosNewCfgPortEcnState_Object = MibTableColumn
qosNewCfgPortEcnState = _QosNewCfgPortEcnState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 4, 1, 3),
    _QosNewCfgPortEcnState_Type()
)
qosNewCfgPortEcnState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qosNewCfgPortEcnState.setStatus("current")
_QosCurCfgGlobalProfileTable_Object = MibTable
qosCurCfgGlobalProfileTable = _QosCurCfgGlobalProfileTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 5)
)
if mibBuilder.loadTexts:
    qosCurCfgGlobalProfileTable.setStatus("current")
_QoSCurCfgGlobalProfileEntry_Object = MibTableRow
qoSCurCfgGlobalProfileEntry = _QoSCurCfgGlobalProfileEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 5, 1)
)
qoSCurCfgGlobalProfileEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "qosCurCfgGlobalTrqIndex"),
)
if mibBuilder.loadTexts:
    qoSCurCfgGlobalProfileEntry.setStatus("current")


class _QosCurCfgGlobalTrqIndex_Type(Integer32):
    """Custom type qosCurCfgGlobalTrqIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_QosCurCfgGlobalTrqIndex_Type.__name__ = "Integer32"
_QosCurCfgGlobalTrqIndex_Object = MibTableColumn
qosCurCfgGlobalTrqIndex = _QosCurCfgGlobalTrqIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 5, 1, 1),
    _QosCurCfgGlobalTrqIndex_Type()
)
qosCurCfgGlobalTrqIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgGlobalTrqIndex.setStatus("current")


class _QosCurCfgGlobalTrqNonTcpMin_Type(Integer32):
    """Custom type qosCurCfgGlobalTrqNonTcpMin based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_QosCurCfgGlobalTrqNonTcpMin_Type.__name__ = "Integer32"
_QosCurCfgGlobalTrqNonTcpMin_Object = MibTableColumn
qosCurCfgGlobalTrqNonTcpMin = _QosCurCfgGlobalTrqNonTcpMin_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 5, 1, 2),
    _QosCurCfgGlobalTrqNonTcpMin_Type()
)
qosCurCfgGlobalTrqNonTcpMin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgGlobalTrqNonTcpMin.setStatus("current")


class _QosCurCfgGlobalTrqNonTcpMax_Type(Integer32):
    """Custom type qosCurCfgGlobalTrqNonTcpMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_QosCurCfgGlobalTrqNonTcpMax_Type.__name__ = "Integer32"
_QosCurCfgGlobalTrqNonTcpMax_Object = MibTableColumn
qosCurCfgGlobalTrqNonTcpMax = _QosCurCfgGlobalTrqNonTcpMax_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 5, 1, 3),
    _QosCurCfgGlobalTrqNonTcpMax_Type()
)
qosCurCfgGlobalTrqNonTcpMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgGlobalTrqNonTcpMax.setStatus("current")


class _QosCurCfgGlobalTrqNonTcpRate_Type(Integer32):
    """Custom type qosCurCfgGlobalTrqNonTcpRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_QosCurCfgGlobalTrqNonTcpRate_Type.__name__ = "Integer32"
_QosCurCfgGlobalTrqNonTcpRate_Object = MibTableColumn
qosCurCfgGlobalTrqNonTcpRate = _QosCurCfgGlobalTrqNonTcpRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 5, 1, 4),
    _QosCurCfgGlobalTrqNonTcpRate_Type()
)
qosCurCfgGlobalTrqNonTcpRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgGlobalTrqNonTcpRate.setStatus("current")


class _QosCurCfgGlobalTrqTcpMin_Type(Integer32):
    """Custom type qosCurCfgGlobalTrqTcpMin based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_QosCurCfgGlobalTrqTcpMin_Type.__name__ = "Integer32"
_QosCurCfgGlobalTrqTcpMin_Object = MibTableColumn
qosCurCfgGlobalTrqTcpMin = _QosCurCfgGlobalTrqTcpMin_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 5, 1, 5),
    _QosCurCfgGlobalTrqTcpMin_Type()
)
qosCurCfgGlobalTrqTcpMin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgGlobalTrqTcpMin.setStatus("current")


class _QosCurCfgGlobalTrqTcpMax_Type(Integer32):
    """Custom type qosCurCfgGlobalTrqTcpMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_QosCurCfgGlobalTrqTcpMax_Type.__name__ = "Integer32"
_QosCurCfgGlobalTrqTcpMax_Object = MibTableColumn
qosCurCfgGlobalTrqTcpMax = _QosCurCfgGlobalTrqTcpMax_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 5, 1, 6),
    _QosCurCfgGlobalTrqTcpMax_Type()
)
qosCurCfgGlobalTrqTcpMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgGlobalTrqTcpMax.setStatus("current")


class _QosCurCfgGlobalTrqTcpRate_Type(Integer32):
    """Custom type qosCurCfgGlobalTrqTcpRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_QosCurCfgGlobalTrqTcpRate_Type.__name__ = "Integer32"
_QosCurCfgGlobalTrqTcpRate_Object = MibTableColumn
qosCurCfgGlobalTrqTcpRate = _QosCurCfgGlobalTrqTcpRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 5, 1, 7),
    _QosCurCfgGlobalTrqTcpRate_Type()
)
qosCurCfgGlobalTrqTcpRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgGlobalTrqTcpRate.setStatus("current")


class _QosCurCfgGlobalTrqWredState_Type(Integer32):
    """Custom type qosCurCfgGlobalTrqWredState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_QosCurCfgGlobalTrqWredState_Type.__name__ = "Integer32"
_QosCurCfgGlobalTrqWredState_Object = MibTableColumn
qosCurCfgGlobalTrqWredState = _QosCurCfgGlobalTrqWredState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 5, 1, 8),
    _QosCurCfgGlobalTrqWredState_Type()
)
qosCurCfgGlobalTrqWredState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgGlobalTrqWredState.setStatus("current")
_QosNewCfgGlobalProfileTable_Object = MibTable
qosNewCfgGlobalProfileTable = _QosNewCfgGlobalProfileTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 6)
)
if mibBuilder.loadTexts:
    qosNewCfgGlobalProfileTable.setStatus("current")
_QoSNewCfgGlobalProfileEntry_Object = MibTableRow
qoSNewCfgGlobalProfileEntry = _QoSNewCfgGlobalProfileEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 6, 1)
)
qoSNewCfgGlobalProfileEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "qosNewCfgGlobalTrqIndex"),
)
if mibBuilder.loadTexts:
    qoSNewCfgGlobalProfileEntry.setStatus("current")


class _QosNewCfgGlobalTrqIndex_Type(Integer32):
    """Custom type qosNewCfgGlobalTrqIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_QosNewCfgGlobalTrqIndex_Type.__name__ = "Integer32"
_QosNewCfgGlobalTrqIndex_Object = MibTableColumn
qosNewCfgGlobalTrqIndex = _QosNewCfgGlobalTrqIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 6, 1, 1),
    _QosNewCfgGlobalTrqIndex_Type()
)
qosNewCfgGlobalTrqIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosNewCfgGlobalTrqIndex.setStatus("current")


class _QosNewCfgGlobalTrqNonTcpMin_Type(Integer32):
    """Custom type qosNewCfgGlobalTrqNonTcpMin based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_QosNewCfgGlobalTrqNonTcpMin_Type.__name__ = "Integer32"
_QosNewCfgGlobalTrqNonTcpMin_Object = MibTableColumn
qosNewCfgGlobalTrqNonTcpMin = _QosNewCfgGlobalTrqNonTcpMin_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 6, 1, 2),
    _QosNewCfgGlobalTrqNonTcpMin_Type()
)
qosNewCfgGlobalTrqNonTcpMin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qosNewCfgGlobalTrqNonTcpMin.setStatus("current")


class _QosNewCfgGlobalTrqNonTcpMax_Type(Integer32):
    """Custom type qosNewCfgGlobalTrqNonTcpMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_QosNewCfgGlobalTrqNonTcpMax_Type.__name__ = "Integer32"
_QosNewCfgGlobalTrqNonTcpMax_Object = MibTableColumn
qosNewCfgGlobalTrqNonTcpMax = _QosNewCfgGlobalTrqNonTcpMax_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 6, 1, 3),
    _QosNewCfgGlobalTrqNonTcpMax_Type()
)
qosNewCfgGlobalTrqNonTcpMax.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qosNewCfgGlobalTrqNonTcpMax.setStatus("current")


class _QosNewCfgGlobalTrqNonTcpRate_Type(Integer32):
    """Custom type qosNewCfgGlobalTrqNonTcpRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_QosNewCfgGlobalTrqNonTcpRate_Type.__name__ = "Integer32"
_QosNewCfgGlobalTrqNonTcpRate_Object = MibTableColumn
qosNewCfgGlobalTrqNonTcpRate = _QosNewCfgGlobalTrqNonTcpRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 6, 1, 4),
    _QosNewCfgGlobalTrqNonTcpRate_Type()
)
qosNewCfgGlobalTrqNonTcpRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qosNewCfgGlobalTrqNonTcpRate.setStatus("current")


class _QosNewCfgGlobalTrqTcpMin_Type(Integer32):
    """Custom type qosNewCfgGlobalTrqTcpMin based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_QosNewCfgGlobalTrqTcpMin_Type.__name__ = "Integer32"
_QosNewCfgGlobalTrqTcpMin_Object = MibTableColumn
qosNewCfgGlobalTrqTcpMin = _QosNewCfgGlobalTrqTcpMin_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 6, 1, 5),
    _QosNewCfgGlobalTrqTcpMin_Type()
)
qosNewCfgGlobalTrqTcpMin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qosNewCfgGlobalTrqTcpMin.setStatus("current")


class _QosNewCfgGlobalTrqTcpMax_Type(Integer32):
    """Custom type qosNewCfgGlobalTrqTcpMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_QosNewCfgGlobalTrqTcpMax_Type.__name__ = "Integer32"
_QosNewCfgGlobalTrqTcpMax_Object = MibTableColumn
qosNewCfgGlobalTrqTcpMax = _QosNewCfgGlobalTrqTcpMax_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 6, 1, 6),
    _QosNewCfgGlobalTrqTcpMax_Type()
)
qosNewCfgGlobalTrqTcpMax.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qosNewCfgGlobalTrqTcpMax.setStatus("current")


class _QosNewCfgGlobalTrqTcpRate_Type(Integer32):
    """Custom type qosNewCfgGlobalTrqTcpRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_QosNewCfgGlobalTrqTcpRate_Type.__name__ = "Integer32"
_QosNewCfgGlobalTrqTcpRate_Object = MibTableColumn
qosNewCfgGlobalTrqTcpRate = _QosNewCfgGlobalTrqTcpRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 6, 1, 7),
    _QosNewCfgGlobalTrqTcpRate_Type()
)
qosNewCfgGlobalTrqTcpRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qosNewCfgGlobalTrqTcpRate.setStatus("current")


class _QosNewCfgGlobalTrqWredState_Type(Integer32):
    """Custom type qosNewCfgGlobalTrqWredState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_QosNewCfgGlobalTrqWredState_Type.__name__ = "Integer32"
_QosNewCfgGlobalTrqWredState_Object = MibTableColumn
qosNewCfgGlobalTrqWredState = _QosNewCfgGlobalTrqWredState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 6, 1, 8),
    _QosNewCfgGlobalTrqWredState_Type()
)
qosNewCfgGlobalTrqWredState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qosNewCfgGlobalTrqWredState.setStatus("current")


class _QosCurCfgGlobalWredState_Type(Integer32):
    """Custom type qosCurCfgGlobalWredState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_QosCurCfgGlobalWredState_Type.__name__ = "Integer32"
_QosCurCfgGlobalWredState_Object = MibScalar
qosCurCfgGlobalWredState = _QosCurCfgGlobalWredState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 7),
    _QosCurCfgGlobalWredState_Type()
)
qosCurCfgGlobalWredState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgGlobalWredState.setStatus("current")


class _QosCurCfgGlobalEcnState_Type(Integer32):
    """Custom type qosCurCfgGlobalEcnState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_QosCurCfgGlobalEcnState_Type.__name__ = "Integer32"
_QosCurCfgGlobalEcnState_Object = MibScalar
qosCurCfgGlobalEcnState = _QosCurCfgGlobalEcnState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 8),
    _QosCurCfgGlobalEcnState_Type()
)
qosCurCfgGlobalEcnState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgGlobalEcnState.setStatus("current")


class _QosNewCfgGlobalWredState_Type(Integer32):
    """Custom type qosNewCfgGlobalWredState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_QosNewCfgGlobalWredState_Type.__name__ = "Integer32"
_QosNewCfgGlobalWredState_Object = MibScalar
qosNewCfgGlobalWredState = _QosNewCfgGlobalWredState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 9),
    _QosNewCfgGlobalWredState_Type()
)
qosNewCfgGlobalWredState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qosNewCfgGlobalWredState.setStatus("current")


class _QosNewCfgGlobalEcnState_Type(Integer32):
    """Custom type qosNewCfgGlobalEcnState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_QosNewCfgGlobalEcnState_Type.__name__ = "Integer32"
_QosNewCfgGlobalEcnState_Object = MibScalar
qosNewCfgGlobalEcnState = _QosNewCfgGlobalEcnState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 8, 1, 3, 10),
    _QosNewCfgGlobalEcnState_Type()
)
qosNewCfgGlobalEcnState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qosNewCfgGlobalEcnState.setStatus("current")
_Acl_ObjectIdentity = ObjectIdentity
acl = _Acl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9)
)
_AcConfig_ObjectIdentity = ObjectIdentity
acConfig = _AcConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1)
)
_AcList_ObjectIdentity = ObjectIdentity
acList = _AcList_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1)
)
_AclCurCfgTable_Object = MibTable
aclCurCfgTable = _AclCurCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1)
)
if mibBuilder.loadTexts:
    aclCurCfgTable.setStatus("current")
_AclCurCfgEntry_Object = MibTableRow
aclCurCfgEntry = _AclCurCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1)
)
aclCurCfgEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "aclCurCfgIndex"),
)
if mibBuilder.loadTexts:
    aclCurCfgEntry.setStatus("current")
_AclCurCfgIndex_Type = Unsigned32
_AclCurCfgIndex_Object = MibTableColumn
aclCurCfgIndex = _AclCurCfgIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 1),
    _AclCurCfgIndex_Type()
)
aclCurCfgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgIndex.setStatus("current")
_AclCurCfgGroup_Type = Unsigned32
_AclCurCfgGroup_Object = MibTableColumn
aclCurCfgGroup = _AclCurCfgGroup_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 3),
    _AclCurCfgGroup_Type()
)
aclCurCfgGroup.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgGroup.setStatus("current")


class _AclCurCfgFilterAction_Type(Integer32):
    """Custom type aclCurCfgFilterAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("permit", 1),
          ("deny", 2),
          ("setprio", 3))
    )


_AclCurCfgFilterAction_Type.__name__ = "Integer32"
_AclCurCfgFilterAction_Object = MibTableColumn
aclCurCfgFilterAction = _AclCurCfgFilterAction_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 4),
    _AclCurCfgFilterAction_Type()
)
aclCurCfgFilterAction.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgFilterAction.setStatus("current")


class _AclCurCfgFilterActionSetPrio_Type(Integer32):
    """Custom type aclCurCfgFilterActionSetPrio based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("prio0", 1),
          ("prio1", 2),
          ("prio2", 3),
          ("prio3", 4),
          ("prio4", 5),
          ("prio5", 6),
          ("prio6", 7),
          ("prio7", 8))
    )


_AclCurCfgFilterActionSetPrio_Type.__name__ = "Integer32"
_AclCurCfgFilterActionSetPrio_Object = MibTableColumn
aclCurCfgFilterActionSetPrio = _AclCurCfgFilterActionSetPrio_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 5),
    _AclCurCfgFilterActionSetPrio_Type()
)
aclCurCfgFilterActionSetPrio.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgFilterActionSetPrio.setStatus("current")


class _AclCurCfgEthFmt_Type(Integer32):
    """Custom type aclCurCfgEthFmt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("ethernet2", 1),
          ("snap", 2),
          ("llc", 3))
    )


_AclCurCfgEthFmt_Type.__name__ = "Integer32"
_AclCurCfgEthFmt_Object = MibTableColumn
aclCurCfgEthFmt = _AclCurCfgEthFmt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 6),
    _AclCurCfgEthFmt_Type()
)
aclCurCfgEthFmt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgEthFmt.setStatus("current")


class _AclCurCfgTagFmt_Type(Integer32):
    """Custom type aclCurCfgTagFmt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("any", 2),
          ("untagged", 3),
          ("tagged", 4))
    )


_AclCurCfgTagFmt_Type.__name__ = "Integer32"
_AclCurCfgTagFmt_Object = MibTableColumn
aclCurCfgTagFmt = _AclCurCfgTagFmt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 7),
    _AclCurCfgTagFmt_Type()
)
aclCurCfgTagFmt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgTagFmt.setStatus("current")


class _AclCurCfgIPFmt_Type(Integer32):
    """Custom type aclCurCfgIPFmt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("ipv4", 2),
          ("ipv6", 3))
    )


_AclCurCfgIPFmt_Type.__name__ = "Integer32"
_AclCurCfgIPFmt_Object = MibTableColumn
aclCurCfgIPFmt = _AclCurCfgIPFmt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 8),
    _AclCurCfgIPFmt_Type()
)
aclCurCfgIPFmt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgIPFmt.setStatus("current")
_AclCurCfgSrcMACAddress_Type = MacAddress
_AclCurCfgSrcMACAddress_Object = MibTableColumn
aclCurCfgSrcMACAddress = _AclCurCfgSrcMACAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 9),
    _AclCurCfgSrcMACAddress_Type()
)
aclCurCfgSrcMACAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgSrcMACAddress.setStatus("current")
_AclCurCfgSrcMACMask_Type = MacAddress
_AclCurCfgSrcMACMask_Object = MibTableColumn
aclCurCfgSrcMACMask = _AclCurCfgSrcMACMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 10),
    _AclCurCfgSrcMACMask_Type()
)
aclCurCfgSrcMACMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgSrcMACMask.setStatus("current")
_AclCurCfgDstMACAddress_Type = MacAddress
_AclCurCfgDstMACAddress_Object = MibTableColumn
aclCurCfgDstMACAddress = _AclCurCfgDstMACAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 11),
    _AclCurCfgDstMACAddress_Type()
)
aclCurCfgDstMACAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgDstMACAddress.setStatus("current")
_AclCurCfgDstMACMask_Type = MacAddress
_AclCurCfgDstMACMask_Object = MibTableColumn
aclCurCfgDstMACMask = _AclCurCfgDstMACMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 12),
    _AclCurCfgDstMACMask_Type()
)
aclCurCfgDstMACMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgDstMACMask.setStatus("current")


class _AclCurCfgEthernetTypeName_Type(Integer32):
    """Custom type aclCurCfgEthernetTypeName based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("arp", 1),
          ("ipv4", 2),
          ("ipv6", 3),
          ("mpls", 4),
          ("rarp", 5),
          ("any", 6),
          ("other", 7))
    )


_AclCurCfgEthernetTypeName_Type.__name__ = "Integer32"
_AclCurCfgEthernetTypeName_Object = MibTableColumn
aclCurCfgEthernetTypeName = _AclCurCfgEthernetTypeName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 13),
    _AclCurCfgEthernetTypeName_Type()
)
aclCurCfgEthernetTypeName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgEthernetTypeName.setStatus("current")


class _AclCurCfgEthernetTypeValue_Type(Integer32):
    """Custom type aclCurCfgEthernetTypeValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1536, 65535),
    )


_AclCurCfgEthernetTypeValue_Type.__name__ = "Integer32"
_AclCurCfgEthernetTypeValue_Object = MibTableColumn
aclCurCfgEthernetTypeValue = _AclCurCfgEthernetTypeValue_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 14),
    _AclCurCfgEthernetTypeValue_Type()
)
aclCurCfgEthernetTypeValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgEthernetTypeValue.setStatus("current")


class _AclCurCfgVLanId_Type(Integer32):
    """Custom type aclCurCfgVLanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_AclCurCfgVLanId_Type.__name__ = "Integer32"
_AclCurCfgVLanId_Object = MibTableColumn
aclCurCfgVLanId = _AclCurCfgVLanId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 15),
    _AclCurCfgVLanId_Type()
)
aclCurCfgVLanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgVLanId.setStatus("current")
_AclCurCfgVLanMask_Type = DisplayString
_AclCurCfgVLanMask_Object = MibTableColumn
aclCurCfgVLanMask = _AclCurCfgVLanMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 16),
    _AclCurCfgVLanMask_Type()
)
aclCurCfgVLanMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgVLanMask.setStatus("current")


class _AclCurCfg8021pPriority_Type(Integer32):
    """Custom type aclCurCfg8021pPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("priority0", 1),
          ("priority1", 2),
          ("priority2", 3),
          ("priority3", 4),
          ("priority4", 5),
          ("priority5", 6),
          ("priority6", 7),
          ("priority7", 8))
    )


_AclCurCfg8021pPriority_Type.__name__ = "Integer32"
_AclCurCfg8021pPriority_Object = MibTableColumn
aclCurCfg8021pPriority = _AclCurCfg8021pPriority_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 17),
    _AclCurCfg8021pPriority_Type()
)
aclCurCfg8021pPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfg8021pPriority.setStatus("current")
_AclCurCfgTypeOfService_Type = DisplayString
_AclCurCfgTypeOfService_Object = MibTableColumn
aclCurCfgTypeOfService = _AclCurCfgTypeOfService_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 18),
    _AclCurCfgTypeOfService_Type()
)
aclCurCfgTypeOfService.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgTypeOfService.setStatus("current")
_AclCurCfgProtocol_Type = DisplayString
_AclCurCfgProtocol_Object = MibTableColumn
aclCurCfgProtocol = _AclCurCfgProtocol_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 19),
    _AclCurCfgProtocol_Type()
)
aclCurCfgProtocol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgProtocol.setStatus("current")
_AclCurCfgSrcIPAddress_Type = IpAddress
_AclCurCfgSrcIPAddress_Object = MibTableColumn
aclCurCfgSrcIPAddress = _AclCurCfgSrcIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 20),
    _AclCurCfgSrcIPAddress_Type()
)
aclCurCfgSrcIPAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgSrcIPAddress.setStatus("current")
_AclCurCfgSrcIPMask_Type = IpAddress
_AclCurCfgSrcIPMask_Object = MibTableColumn
aclCurCfgSrcIPMask = _AclCurCfgSrcIPMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 21),
    _AclCurCfgSrcIPMask_Type()
)
aclCurCfgSrcIPMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgSrcIPMask.setStatus("current")
_AclCurCfgDstIPAddress_Type = IpAddress
_AclCurCfgDstIPAddress_Object = MibTableColumn
aclCurCfgDstIPAddress = _AclCurCfgDstIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 22),
    _AclCurCfgDstIPAddress_Type()
)
aclCurCfgDstIPAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgDstIPAddress.setStatus("current")
_AclCurCfgDstIPMask_Type = IpAddress
_AclCurCfgDstIPMask_Object = MibTableColumn
aclCurCfgDstIPMask = _AclCurCfgDstIPMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 23),
    _AclCurCfgDstIPMask_Type()
)
aclCurCfgDstIPMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgDstIPMask.setStatus("current")


class _AclCurCfgSrcPort_Type(Integer32):
    """Custom type aclCurCfgSrcPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_AclCurCfgSrcPort_Type.__name__ = "Integer32"
_AclCurCfgSrcPort_Object = MibTableColumn
aclCurCfgSrcPort = _AclCurCfgSrcPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 24),
    _AclCurCfgSrcPort_Type()
)
aclCurCfgSrcPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgSrcPort.setStatus("current")
_AclCurCfgSrcPortMask_Type = DisplayString
_AclCurCfgSrcPortMask_Object = MibTableColumn
aclCurCfgSrcPortMask = _AclCurCfgSrcPortMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 25),
    _AclCurCfgSrcPortMask_Type()
)
aclCurCfgSrcPortMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgSrcPortMask.setStatus("current")


class _AclCurCfgDstPort_Type(Integer32):
    """Custom type aclCurCfgDstPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_AclCurCfgDstPort_Type.__name__ = "Integer32"
_AclCurCfgDstPort_Object = MibTableColumn
aclCurCfgDstPort = _AclCurCfgDstPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 26),
    _AclCurCfgDstPort_Type()
)
aclCurCfgDstPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgDstPort.setStatus("current")
_AclCurCfgDstPortMask_Type = DisplayString
_AclCurCfgDstPortMask_Object = MibTableColumn
aclCurCfgDstPortMask = _AclCurCfgDstPortMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 27),
    _AclCurCfgDstPortMask_Type()
)
aclCurCfgDstPortMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgDstPortMask.setStatus("current")


class _AclCurCfgTCPFlags_Type(Bits):
    """Custom type aclCurCfgTCPFlags based on Bits"""
    namedValues = NamedValues(
        *(("reserved1", 0),
          ("reserved2", 1),
          ("tcpURG", 2),
          ("tcpACK", 3),
          ("tcpPSH", 4),
          ("tcpRST", 5),
          ("tcpSYN", 6),
          ("tcpFIN", 7))
    )

_AclCurCfgTCPFlags_Type.__name__ = "Bits"
_AclCurCfgTCPFlags_Object = MibTableColumn
aclCurCfgTCPFlags = _AclCurCfgTCPFlags_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 28),
    _AclCurCfgTCPFlags_Type()
)
aclCurCfgTCPFlags.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgTCPFlags.setStatus("current")
_AclCurCfgEgressPorts_Type = OctetString
_AclCurCfgEgressPorts_Object = MibTableColumn
aclCurCfgEgressPorts = _AclCurCfgEgressPorts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 29),
    _AclCurCfgEgressPorts_Type()
)
aclCurCfgEgressPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgEgressPorts.setStatus("current")


class _AclCurCfgStatistics_Type(Integer32):
    """Custom type aclCurCfgStatistics based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_AclCurCfgStatistics_Type.__name__ = "Integer32"
_AclCurCfgStatistics_Object = MibTableColumn
aclCurCfgStatistics = _AclCurCfgStatistics_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 30),
    _AclCurCfgStatistics_Type()
)
aclCurCfgStatistics.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgStatistics.setStatus("current")


class _AclCurCfgTCPFlagsMask_Type(Bits):
    """Custom type aclCurCfgTCPFlagsMask based on Bits"""
    namedValues = NamedValues(
        *(("reserved1", 0),
          ("reserved2", 1),
          ("tcpURG", 2),
          ("tcpACK", 3),
          ("tcpPSH", 4),
          ("tcpRST", 5),
          ("tcpSYN", 6),
          ("tcpFIN", 7))
    )

_AclCurCfgTCPFlagsMask_Type.__name__ = "Bits"
_AclCurCfgTCPFlagsMask_Object = MibTableColumn
aclCurCfgTCPFlagsMask = _AclCurCfgTCPFlagsMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 39),
    _AclCurCfgTCPFlagsMask_Type()
)
aclCurCfgTCPFlagsMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgTCPFlagsMask.setStatus("current")


class _AclCurCfgMeterAction_Type(Integer32):
    """Custom type aclCurCfgMeterAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unconfigured", 0),
          ("outdrop", 1),
          ("outpass", 2))
    )


_AclCurCfgMeterAction_Type.__name__ = "Integer32"
_AclCurCfgMeterAction_Object = MibTableColumn
aclCurCfgMeterAction = _AclCurCfgMeterAction_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 41),
    _AclCurCfgMeterAction_Type()
)
aclCurCfgMeterAction.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgMeterAction.setStatus("current")


class _AclCurCfgMeterEnable_Type(Integer32):
    """Custom type aclCurCfgMeterEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 0),
          ("disabled", 1))
    )


_AclCurCfgMeterEnable_Type.__name__ = "Integer32"
_AclCurCfgMeterEnable_Object = MibTableColumn
aclCurCfgMeterEnable = _AclCurCfgMeterEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 42),
    _AclCurCfgMeterEnable_Type()
)
aclCurCfgMeterEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgMeterEnable.setStatus("current")


class _AclCurCfgKbitsSec_Type(Unsigned32):
    """Custom type aclCurCfgKbitsSec based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(64, 40000000),
    )


_AclCurCfgKbitsSec_Type.__name__ = "Unsigned32"
_AclCurCfgKbitsSec_Object = MibTableColumn
aclCurCfgKbitsSec = _AclCurCfgKbitsSec_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 43),
    _AclCurCfgKbitsSec_Type()
)
aclCurCfgKbitsSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgKbitsSec.setStatus("current")


class _AclCurCfgKbitsBurst_Type(Integer32):
    """Custom type aclCurCfgKbitsBurst based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(32,
              64,
              128,
              256,
              512,
              1024,
              2048,
              4096)
        )
    )
    namedValues = NamedValues(
        *(("kbits32", 32),
          ("kbits64", 64),
          ("kbits128", 128),
          ("kbits256", 256),
          ("kbits512", 512),
          ("kbits1024", 1024),
          ("kbits2048", 2048),
          ("kbits4096", 4096))
    )


_AclCurCfgKbitsBurst_Type.__name__ = "Integer32"
_AclCurCfgKbitsBurst_Object = MibTableColumn
aclCurCfgKbitsBurst = _AclCurCfgKbitsBurst_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 44),
    _AclCurCfgKbitsBurst_Type()
)
aclCurCfgKbitsBurst.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgKbitsBurst.setStatus("current")


class _AclCurCfgUser_Type(Integer32):
    """Custom type aclCurCfgUser based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_AclCurCfgUser_Type.__name__ = "Integer32"
_AclCurCfgUser_Object = MibTableColumn
aclCurCfgUser = _AclCurCfgUser_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 45),
    _AclCurCfgUser_Type()
)
aclCurCfgUser.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgUser.setStatus("current")


class _AclCurCfgInprofDscp_Type(Integer32):
    """Custom type aclCurCfgInprofDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_AclCurCfgInprofDscp_Type.__name__ = "Integer32"
_AclCurCfgInprofDscp_Object = MibTableColumn
aclCurCfgInprofDscp = _AclCurCfgInprofDscp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 46),
    _AclCurCfgInprofDscp_Type()
)
aclCurCfgInprofDscp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgInprofDscp.setStatus("current")


class _AclCurCfgTos_Type(Integer32):
    """Custom type aclCurCfgTos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_AclCurCfgTos_Type.__name__ = "Integer32"
_AclCurCfgTos_Object = MibTableColumn
aclCurCfgTos = _AclCurCfgTos_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 47),
    _AclCurCfgTos_Type()
)
aclCurCfgTos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgTos.setStatus("current")


class _AclCurCfgOutprofDscp_Type(Integer32):
    """Custom type aclCurCfgOutprofDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_AclCurCfgOutprofDscp_Type.__name__ = "Integer32"
_AclCurCfgOutprofDscp_Object = MibTableColumn
aclCurCfgOutprofDscp = _AclCurCfgOutprofDscp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 48),
    _AclCurCfgOutprofDscp_Type()
)
aclCurCfgOutprofDscp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgOutprofDscp.setStatus("current")


class _AclCurCfgUserEnable_Type(Integer32):
    """Custom type aclCurCfgUserEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("userdefined", 1))
    )


_AclCurCfgUserEnable_Type.__name__ = "Integer32"
_AclCurCfgUserEnable_Object = MibTableColumn
aclCurCfgUserEnable = _AclCurCfgUserEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 49),
    _AclCurCfgUserEnable_Type()
)
aclCurCfgUserEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgUserEnable.setStatus("current")


class _AclCurCfgInprofDscpEnable_Type(Integer32):
    """Custom type aclCurCfgInprofDscpEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_AclCurCfgInprofDscpEnable_Type.__name__ = "Integer32"
_AclCurCfgInprofDscpEnable_Object = MibTableColumn
aclCurCfgInprofDscpEnable = _AclCurCfgInprofDscpEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 50),
    _AclCurCfgInprofDscpEnable_Type()
)
aclCurCfgInprofDscpEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgInprofDscpEnable.setStatus("current")


class _AclCurCfgOutprofDscpEnable_Type(Integer32):
    """Custom type aclCurCfgOutprofDscpEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_AclCurCfgOutprofDscpEnable_Type.__name__ = "Integer32"
_AclCurCfgOutprofDscpEnable_Object = MibTableColumn
aclCurCfgOutprofDscpEnable = _AclCurCfgOutprofDscpEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 51),
    _AclCurCfgOutprofDscpEnable_Type()
)
aclCurCfgOutprofDscpEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgOutprofDscpEnable.setStatus("current")
_AclCurCfgMirrorPort_Type = Integer32
_AclCurCfgMirrorPort_Object = MibTableColumn
aclCurCfgMirrorPort = _AclCurCfgMirrorPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 74),
    _AclCurCfgMirrorPort_Type()
)
aclCurCfgMirrorPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgMirrorPort.setStatus("current")


class _AclCurCfgLog_Type(Integer32):
    """Custom type aclCurCfgLog based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_AclCurCfgLog_Type.__name__ = "Integer32"
_AclCurCfgLog_Object = MibTableColumn
aclCurCfgLog = _AclCurCfgLog_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 1, 1, 81),
    _AclCurCfgLog_Type()
)
aclCurCfgLog.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgLog.setStatus("current")
_AclNewCfgTable_Object = MibTable
aclNewCfgTable = _AclNewCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2)
)
if mibBuilder.loadTexts:
    aclNewCfgTable.setStatus("current")
_AclNewCfgEntry_Object = MibTableRow
aclNewCfgEntry = _AclNewCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1)
)
aclNewCfgEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "aclNewCfgIndex"),
)
if mibBuilder.loadTexts:
    aclNewCfgEntry.setStatus("current")
_AclNewCfgIndex_Type = Unsigned32
_AclNewCfgIndex_Object = MibTableColumn
aclNewCfgIndex = _AclNewCfgIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 1),
    _AclNewCfgIndex_Type()
)
aclNewCfgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclNewCfgIndex.setStatus("current")
_AclNewCfgGroup_Type = Unsigned32
_AclNewCfgGroup_Object = MibTableColumn
aclNewCfgGroup = _AclNewCfgGroup_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 3),
    _AclNewCfgGroup_Type()
)
aclNewCfgGroup.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclNewCfgGroup.setStatus("current")


class _AclNewCfgFilterAction_Type(Integer32):
    """Custom type aclNewCfgFilterAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("permit", 1),
          ("deny", 2),
          ("setprio", 3))
    )


_AclNewCfgFilterAction_Type.__name__ = "Integer32"
_AclNewCfgFilterAction_Object = MibTableColumn
aclNewCfgFilterAction = _AclNewCfgFilterAction_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 4),
    _AclNewCfgFilterAction_Type()
)
aclNewCfgFilterAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgFilterAction.setStatus("current")


class _AclNewCfgFilterActionSetPrio_Type(Integer32):
    """Custom type aclNewCfgFilterActionSetPrio based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("prio0", 1),
          ("prio1", 2),
          ("prio2", 3),
          ("prio3", 4),
          ("prio4", 5),
          ("prio5", 6),
          ("prio6", 7),
          ("prio7", 8))
    )


_AclNewCfgFilterActionSetPrio_Type.__name__ = "Integer32"
_AclNewCfgFilterActionSetPrio_Object = MibTableColumn
aclNewCfgFilterActionSetPrio = _AclNewCfgFilterActionSetPrio_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 5),
    _AclNewCfgFilterActionSetPrio_Type()
)
aclNewCfgFilterActionSetPrio.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgFilterActionSetPrio.setStatus("current")


class _AclNewCfgEthFmt_Type(Integer32):
    """Custom type aclNewCfgEthFmt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("ethernet2", 1),
          ("snap", 2),
          ("llc", 3))
    )


_AclNewCfgEthFmt_Type.__name__ = "Integer32"
_AclNewCfgEthFmt_Object = MibTableColumn
aclNewCfgEthFmt = _AclNewCfgEthFmt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 6),
    _AclNewCfgEthFmt_Type()
)
aclNewCfgEthFmt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgEthFmt.setStatus("current")


class _AclNewCfgTagFmt_Type(Integer32):
    """Custom type aclNewCfgTagFmt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("any", 2),
          ("none", 3),
          ("tagged", 4))
    )


_AclNewCfgTagFmt_Type.__name__ = "Integer32"
_AclNewCfgTagFmt_Object = MibTableColumn
aclNewCfgTagFmt = _AclNewCfgTagFmt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 7),
    _AclNewCfgTagFmt_Type()
)
aclNewCfgTagFmt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgTagFmt.setStatus("current")


class _AclNewCfgIPFmt_Type(Integer32):
    """Custom type aclNewCfgIPFmt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("ipv4", 2),
          ("ipv6", 3))
    )


_AclNewCfgIPFmt_Type.__name__ = "Integer32"
_AclNewCfgIPFmt_Object = MibTableColumn
aclNewCfgIPFmt = _AclNewCfgIPFmt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 8),
    _AclNewCfgIPFmt_Type()
)
aclNewCfgIPFmt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgIPFmt.setStatus("current")
_AclNewCfgSrcMACAddress_Type = MacAddress
_AclNewCfgSrcMACAddress_Object = MibTableColumn
aclNewCfgSrcMACAddress = _AclNewCfgSrcMACAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 9),
    _AclNewCfgSrcMACAddress_Type()
)
aclNewCfgSrcMACAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgSrcMACAddress.setStatus("current")
_AclNewCfgSrcMACMask_Type = MacAddress
_AclNewCfgSrcMACMask_Object = MibTableColumn
aclNewCfgSrcMACMask = _AclNewCfgSrcMACMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 10),
    _AclNewCfgSrcMACMask_Type()
)
aclNewCfgSrcMACMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgSrcMACMask.setStatus("current")
_AclNewCfgDstMACAddress_Type = MacAddress
_AclNewCfgDstMACAddress_Object = MibTableColumn
aclNewCfgDstMACAddress = _AclNewCfgDstMACAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 11),
    _AclNewCfgDstMACAddress_Type()
)
aclNewCfgDstMACAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgDstMACAddress.setStatus("current")
_AclNewCfgDstMACMask_Type = MacAddress
_AclNewCfgDstMACMask_Object = MibTableColumn
aclNewCfgDstMACMask = _AclNewCfgDstMACMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 12),
    _AclNewCfgDstMACMask_Type()
)
aclNewCfgDstMACMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgDstMACMask.setStatus("current")


class _AclNewCfgEthernetTypeName_Type(Integer32):
    """Custom type aclNewCfgEthernetTypeName based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("arp", 1),
          ("ipv4", 2),
          ("ipv6", 3),
          ("mpls", 4),
          ("rarp", 5),
          ("any", 6),
          ("other", 7))
    )


_AclNewCfgEthernetTypeName_Type.__name__ = "Integer32"
_AclNewCfgEthernetTypeName_Object = MibTableColumn
aclNewCfgEthernetTypeName = _AclNewCfgEthernetTypeName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 13),
    _AclNewCfgEthernetTypeName_Type()
)
aclNewCfgEthernetTypeName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgEthernetTypeName.setStatus("current")


class _AclNewCfgEthernetTypeValue_Type(Integer32):
    """Custom type aclNewCfgEthernetTypeValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1536, 65535),
    )


_AclNewCfgEthernetTypeValue_Type.__name__ = "Integer32"
_AclNewCfgEthernetTypeValue_Object = MibTableColumn
aclNewCfgEthernetTypeValue = _AclNewCfgEthernetTypeValue_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 14),
    _AclNewCfgEthernetTypeValue_Type()
)
aclNewCfgEthernetTypeValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgEthernetTypeValue.setStatus("current")


class _AclNewCfgVLanId_Type(Integer32):
    """Custom type aclNewCfgVLanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_AclNewCfgVLanId_Type.__name__ = "Integer32"
_AclNewCfgVLanId_Object = MibTableColumn
aclNewCfgVLanId = _AclNewCfgVLanId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 15),
    _AclNewCfgVLanId_Type()
)
aclNewCfgVLanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgVLanId.setStatus("current")
_AclNewCfgVLanMask_Type = DisplayString
_AclNewCfgVLanMask_Object = MibTableColumn
aclNewCfgVLanMask = _AclNewCfgVLanMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 16),
    _AclNewCfgVLanMask_Type()
)
aclNewCfgVLanMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgVLanMask.setStatus("current")


class _AclNewCfg8021pPriority_Type(Integer32):
    """Custom type aclNewCfg8021pPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("priority0", 1),
          ("priority1", 2),
          ("priority2", 3),
          ("priority3", 4),
          ("priority4", 5),
          ("priority5", 6),
          ("priority6", 7),
          ("priority7", 8))
    )


_AclNewCfg8021pPriority_Type.__name__ = "Integer32"
_AclNewCfg8021pPriority_Object = MibTableColumn
aclNewCfg8021pPriority = _AclNewCfg8021pPriority_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 17),
    _AclNewCfg8021pPriority_Type()
)
aclNewCfg8021pPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfg8021pPriority.setStatus("current")
_AclNewCfgTypeOfService_Type = DisplayString
_AclNewCfgTypeOfService_Object = MibTableColumn
aclNewCfgTypeOfService = _AclNewCfgTypeOfService_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 18),
    _AclNewCfgTypeOfService_Type()
)
aclNewCfgTypeOfService.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgTypeOfService.setStatus("current")
_AclNewCfgProtocol_Type = DisplayString
_AclNewCfgProtocol_Object = MibTableColumn
aclNewCfgProtocol = _AclNewCfgProtocol_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 19),
    _AclNewCfgProtocol_Type()
)
aclNewCfgProtocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgProtocol.setStatus("current")
_AclNewCfgSrcIPAddress_Type = IpAddress
_AclNewCfgSrcIPAddress_Object = MibTableColumn
aclNewCfgSrcIPAddress = _AclNewCfgSrcIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 20),
    _AclNewCfgSrcIPAddress_Type()
)
aclNewCfgSrcIPAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgSrcIPAddress.setStatus("current")
_AclNewCfgSrcIPMask_Type = IpAddress
_AclNewCfgSrcIPMask_Object = MibTableColumn
aclNewCfgSrcIPMask = _AclNewCfgSrcIPMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 21),
    _AclNewCfgSrcIPMask_Type()
)
aclNewCfgSrcIPMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgSrcIPMask.setStatus("current")
_AclNewCfgDstIPAddress_Type = IpAddress
_AclNewCfgDstIPAddress_Object = MibTableColumn
aclNewCfgDstIPAddress = _AclNewCfgDstIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 22),
    _AclNewCfgDstIPAddress_Type()
)
aclNewCfgDstIPAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgDstIPAddress.setStatus("current")
_AclNewCfgDstIPMask_Type = IpAddress
_AclNewCfgDstIPMask_Object = MibTableColumn
aclNewCfgDstIPMask = _AclNewCfgDstIPMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 23),
    _AclNewCfgDstIPMask_Type()
)
aclNewCfgDstIPMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgDstIPMask.setStatus("current")


class _AclNewCfgSrcPort_Type(Integer32):
    """Custom type aclNewCfgSrcPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_AclNewCfgSrcPort_Type.__name__ = "Integer32"
_AclNewCfgSrcPort_Object = MibTableColumn
aclNewCfgSrcPort = _AclNewCfgSrcPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 24),
    _AclNewCfgSrcPort_Type()
)
aclNewCfgSrcPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgSrcPort.setStatus("current")
_AclNewCfgSrcPortMask_Type = DisplayString
_AclNewCfgSrcPortMask_Object = MibTableColumn
aclNewCfgSrcPortMask = _AclNewCfgSrcPortMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 25),
    _AclNewCfgSrcPortMask_Type()
)
aclNewCfgSrcPortMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgSrcPortMask.setStatus("current")


class _AclNewCfgDstPort_Type(Integer32):
    """Custom type aclNewCfgDstPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_AclNewCfgDstPort_Type.__name__ = "Integer32"
_AclNewCfgDstPort_Object = MibTableColumn
aclNewCfgDstPort = _AclNewCfgDstPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 26),
    _AclNewCfgDstPort_Type()
)
aclNewCfgDstPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgDstPort.setStatus("current")
_AclNewCfgDstPortMask_Type = DisplayString
_AclNewCfgDstPortMask_Object = MibTableColumn
aclNewCfgDstPortMask = _AclNewCfgDstPortMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 27),
    _AclNewCfgDstPortMask_Type()
)
aclNewCfgDstPortMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgDstPortMask.setStatus("current")


class _AclNewCfgTCPFlags_Type(Bits):
    """Custom type aclNewCfgTCPFlags based on Bits"""
    namedValues = NamedValues(
        *(("reserved1", 0),
          ("reserved2", 1),
          ("tcpURG", 2),
          ("tcpACK", 3),
          ("tcpPSH", 4),
          ("tcpRST", 5),
          ("tcpSYN", 6),
          ("tcpFIN", 7))
    )

_AclNewCfgTCPFlags_Type.__name__ = "Bits"
_AclNewCfgTCPFlags_Object = MibTableColumn
aclNewCfgTCPFlags = _AclNewCfgTCPFlags_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 28),
    _AclNewCfgTCPFlags_Type()
)
aclNewCfgTCPFlags.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgTCPFlags.setStatus("current")
_AclNewCfgEgressPorts_Type = OctetString
_AclNewCfgEgressPorts_Object = MibTableColumn
aclNewCfgEgressPorts = _AclNewCfgEgressPorts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 29),
    _AclNewCfgEgressPorts_Type()
)
aclNewCfgEgressPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclNewCfgEgressPorts.setStatus("current")


class _AclNewCfgStatistics_Type(Integer32):
    """Custom type aclNewCfgStatistics based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_AclNewCfgStatistics_Type.__name__ = "Integer32"
_AclNewCfgStatistics_Object = MibTableColumn
aclNewCfgStatistics = _AclNewCfgStatistics_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 30),
    _AclNewCfgStatistics_Type()
)
aclNewCfgStatistics.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgStatistics.setStatus("current")
_AclNewCfgAddEgressPort_Type = PortNumber
_AclNewCfgAddEgressPort_Object = MibTableColumn
aclNewCfgAddEgressPort = _AclNewCfgAddEgressPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 31),
    _AclNewCfgAddEgressPort_Type()
)
aclNewCfgAddEgressPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgAddEgressPort.setStatus("current")
_AclNewCfgRemoveEgressPort_Type = PortNumber
_AclNewCfgRemoveEgressPort_Object = MibTableColumn
aclNewCfgRemoveEgressPort = _AclNewCfgRemoveEgressPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 32),
    _AclNewCfgRemoveEgressPort_Type()
)
aclNewCfgRemoveEgressPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgRemoveEgressPort.setStatus("current")


class _AclNewCfgDelete_Type(Integer32):
    """Custom type aclNewCfgDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_AclNewCfgDelete_Type.__name__ = "Integer32"
_AclNewCfgDelete_Object = MibTableColumn
aclNewCfgDelete = _AclNewCfgDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 33),
    _AclNewCfgDelete_Type()
)
aclNewCfgDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgDelete.setStatus("current")


class _AclNewCfgTCPFlagsMask_Type(Bits):
    """Custom type aclNewCfgTCPFlagsMask based on Bits"""
    namedValues = NamedValues(
        *(("reserved1", 0),
          ("reserved2", 1),
          ("tcpURG", 2),
          ("tcpACK", 3),
          ("tcpPSH", 4),
          ("tcpRST", 5),
          ("tcpSYN", 6),
          ("tcpFIN", 7))
    )

_AclNewCfgTCPFlagsMask_Type.__name__ = "Bits"
_AclNewCfgTCPFlagsMask_Object = MibTableColumn
aclNewCfgTCPFlagsMask = _AclNewCfgTCPFlagsMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 39),
    _AclNewCfgTCPFlagsMask_Type()
)
aclNewCfgTCPFlagsMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgTCPFlagsMask.setStatus("current")


class _AclNewCfgMeterAction_Type(Integer32):
    """Custom type aclNewCfgMeterAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unconfigured", 0),
          ("outdrop", 1),
          ("outpass", 2))
    )


_AclNewCfgMeterAction_Type.__name__ = "Integer32"
_AclNewCfgMeterAction_Object = MibTableColumn
aclNewCfgMeterAction = _AclNewCfgMeterAction_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 41),
    _AclNewCfgMeterAction_Type()
)
aclNewCfgMeterAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgMeterAction.setStatus("current")


class _AclNewCfgMeterEnable_Type(Integer32):
    """Custom type aclNewCfgMeterEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 0),
          ("disabled", 1))
    )


_AclNewCfgMeterEnable_Type.__name__ = "Integer32"
_AclNewCfgMeterEnable_Object = MibTableColumn
aclNewCfgMeterEnable = _AclNewCfgMeterEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 42),
    _AclNewCfgMeterEnable_Type()
)
aclNewCfgMeterEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgMeterEnable.setStatus("current")


class _AclNewCfgKbitsSec_Type(Unsigned32):
    """Custom type aclNewCfgKbitsSec based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(64, 40000000),
    )


_AclNewCfgKbitsSec_Type.__name__ = "Unsigned32"
_AclNewCfgKbitsSec_Object = MibTableColumn
aclNewCfgKbitsSec = _AclNewCfgKbitsSec_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 43),
    _AclNewCfgKbitsSec_Type()
)
aclNewCfgKbitsSec.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgKbitsSec.setStatus("current")


class _AclNewCfgKbitsBurst_Type(Integer32):
    """Custom type aclNewCfgKbitsBurst based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(32,
              64,
              128,
              256,
              512,
              1024,
              2048,
              4096)
        )
    )
    namedValues = NamedValues(
        *(("kbits32", 32),
          ("kbits64", 64),
          ("kbits128", 128),
          ("kbits256", 256),
          ("kbits512", 512),
          ("kbits1024", 1024),
          ("kbits2048", 2048),
          ("kbits4096", 4096))
    )


_AclNewCfgKbitsBurst_Type.__name__ = "Integer32"
_AclNewCfgKbitsBurst_Object = MibTableColumn
aclNewCfgKbitsBurst = _AclNewCfgKbitsBurst_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 44),
    _AclNewCfgKbitsBurst_Type()
)
aclNewCfgKbitsBurst.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgKbitsBurst.setStatus("current")


class _AclNewCfgUser_Type(Integer32):
    """Custom type aclNewCfgUser based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_AclNewCfgUser_Type.__name__ = "Integer32"
_AclNewCfgUser_Object = MibTableColumn
aclNewCfgUser = _AclNewCfgUser_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 45),
    _AclNewCfgUser_Type()
)
aclNewCfgUser.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgUser.setStatus("current")


class _AclNewCfgInprofDscp_Type(Integer32):
    """Custom type aclNewCfgInprofDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_AclNewCfgInprofDscp_Type.__name__ = "Integer32"
_AclNewCfgInprofDscp_Object = MibTableColumn
aclNewCfgInprofDscp = _AclNewCfgInprofDscp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 46),
    _AclNewCfgInprofDscp_Type()
)
aclNewCfgInprofDscp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgInprofDscp.setStatus("current")


class _AclNewCfgTos_Type(Integer32):
    """Custom type aclNewCfgTos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_AclNewCfgTos_Type.__name__ = "Integer32"
_AclNewCfgTos_Object = MibTableColumn
aclNewCfgTos = _AclNewCfgTos_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 47),
    _AclNewCfgTos_Type()
)
aclNewCfgTos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgTos.setStatus("current")


class _AclNewCfgOutprofDscp_Type(Integer32):
    """Custom type aclNewCfgOutprofDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_AclNewCfgOutprofDscp_Type.__name__ = "Integer32"
_AclNewCfgOutprofDscp_Object = MibTableColumn
aclNewCfgOutprofDscp = _AclNewCfgOutprofDscp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 48),
    _AclNewCfgOutprofDscp_Type()
)
aclNewCfgOutprofDscp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgOutprofDscp.setStatus("current")


class _AclNewCfgUserEnable_Type(Integer32):
    """Custom type aclNewCfgUserEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("userdefined", 1))
    )


_AclNewCfgUserEnable_Type.__name__ = "Integer32"
_AclNewCfgUserEnable_Object = MibTableColumn
aclNewCfgUserEnable = _AclNewCfgUserEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 49),
    _AclNewCfgUserEnable_Type()
)
aclNewCfgUserEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgUserEnable.setStatus("current")


class _AclNewCfgInprofDscpEnable_Type(Integer32):
    """Custom type aclNewCfgInprofDscpEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_AclNewCfgInprofDscpEnable_Type.__name__ = "Integer32"
_AclNewCfgInprofDscpEnable_Object = MibTableColumn
aclNewCfgInprofDscpEnable = _AclNewCfgInprofDscpEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 50),
    _AclNewCfgInprofDscpEnable_Type()
)
aclNewCfgInprofDscpEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgInprofDscpEnable.setStatus("current")


class _AclNewCfgOutprofDscpEnable_Type(Integer32):
    """Custom type aclNewCfgOutprofDscpEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_AclNewCfgOutprofDscpEnable_Type.__name__ = "Integer32"
_AclNewCfgOutprofDscpEnable_Object = MibTableColumn
aclNewCfgOutprofDscpEnable = _AclNewCfgOutprofDscpEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 51),
    _AclNewCfgOutprofDscpEnable_Type()
)
aclNewCfgOutprofDscpEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgOutprofDscpEnable.setStatus("current")


class _AclNewCfgReset_Type(Integer32):
    """Custom type aclNewCfgReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("reset", 2))
    )


_AclNewCfgReset_Type.__name__ = "Integer32"
_AclNewCfgReset_Object = MibTableColumn
aclNewCfgReset = _AclNewCfgReset_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 52),
    _AclNewCfgReset_Type()
)
aclNewCfgReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgReset.setStatus("current")


class _AclNewCfgEthernetReset_Type(Integer32):
    """Custom type aclNewCfgEthernetReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("reset", 2))
    )


_AclNewCfgEthernetReset_Type.__name__ = "Integer32"
_AclNewCfgEthernetReset_Object = MibTableColumn
aclNewCfgEthernetReset = _AclNewCfgEthernetReset_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 53),
    _AclNewCfgEthernetReset_Type()
)
aclNewCfgEthernetReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgEthernetReset.setStatus("current")


class _AclNewCfgIpv4Reset_Type(Integer32):
    """Custom type aclNewCfgIpv4Reset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("reset", 2))
    )


_AclNewCfgIpv4Reset_Type.__name__ = "Integer32"
_AclNewCfgIpv4Reset_Object = MibTableColumn
aclNewCfgIpv4Reset = _AclNewCfgIpv4Reset_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 54),
    _AclNewCfgIpv4Reset_Type()
)
aclNewCfgIpv4Reset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgIpv4Reset.setStatus("current")


class _AclNewCfgTcpudpReset_Type(Integer32):
    """Custom type aclNewCfgTcpudpReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("reset", 2))
    )


_AclNewCfgTcpudpReset_Type.__name__ = "Integer32"
_AclNewCfgTcpudpReset_Object = MibTableColumn
aclNewCfgTcpudpReset = _AclNewCfgTcpudpReset_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 55),
    _AclNewCfgTcpudpReset_Type()
)
aclNewCfgTcpudpReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgTcpudpReset.setStatus("current")


class _AclNewCfgMeterReset_Type(Integer32):
    """Custom type aclNewCfgMeterReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("reset", 2))
    )


_AclNewCfgMeterReset_Type.__name__ = "Integer32"
_AclNewCfgMeterReset_Object = MibTableColumn
aclNewCfgMeterReset = _AclNewCfgMeterReset_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 56),
    _AclNewCfgMeterReset_Type()
)
aclNewCfgMeterReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgMeterReset.setStatus("current")


class _AclNewCfgRemarkReset_Type(Integer32):
    """Custom type aclNewCfgRemarkReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("reset", 2))
    )


_AclNewCfgRemarkReset_Type.__name__ = "Integer32"
_AclNewCfgRemarkReset_Object = MibTableColumn
aclNewCfgRemarkReset = _AclNewCfgRemarkReset_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 57),
    _AclNewCfgRemarkReset_Type()
)
aclNewCfgRemarkReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgRemarkReset.setStatus("current")


class _AclNewCfgRemarkInprofReset_Type(Integer32):
    """Custom type aclNewCfgRemarkInprofReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("reset", 2))
    )


_AclNewCfgRemarkInprofReset_Type.__name__ = "Integer32"
_AclNewCfgRemarkInprofReset_Object = MibTableColumn
aclNewCfgRemarkInprofReset = _AclNewCfgRemarkInprofReset_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 58),
    _AclNewCfgRemarkInprofReset_Type()
)
aclNewCfgRemarkInprofReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgRemarkInprofReset.setStatus("current")


class _AclNewCfgRemarkOutprofReset_Type(Integer32):
    """Custom type aclNewCfgRemarkOutprofReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("reset", 2))
    )


_AclNewCfgRemarkOutprofReset_Type.__name__ = "Integer32"
_AclNewCfgRemarkOutprofReset_Object = MibTableColumn
aclNewCfgRemarkOutprofReset = _AclNewCfgRemarkOutprofReset_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 59),
    _AclNewCfgRemarkOutprofReset_Type()
)
aclNewCfgRemarkOutprofReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgRemarkOutprofReset.setStatus("current")


class _AclNewCfgPktfmtReset_Type(Integer32):
    """Custom type aclNewCfgPktfmtReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("reset", 2))
    )


_AclNewCfgPktfmtReset_Type.__name__ = "Integer32"
_AclNewCfgPktfmtReset_Object = MibTableColumn
aclNewCfgPktfmtReset = _AclNewCfgPktfmtReset_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 60),
    _AclNewCfgPktfmtReset_Type()
)
aclNewCfgPktfmtReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgPktfmtReset.setStatus("current")
_AclNewCfgMirrorPort_Type = Integer32
_AclNewCfgMirrorPort_Object = MibTableColumn
aclNewCfgMirrorPort = _AclNewCfgMirrorPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 74),
    _AclNewCfgMirrorPort_Type()
)
aclNewCfgMirrorPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgMirrorPort.setStatus("current")


class _AclNewCfgLog_Type(Integer32):
    """Custom type aclNewCfgLog based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_AclNewCfgLog_Type.__name__ = "Integer32"
_AclNewCfgLog_Object = MibTableColumn
aclNewCfgLog = _AclNewCfgLog_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 2, 1, 81),
    _AclNewCfgLog_Type()
)
aclNewCfgLog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgLog.setStatus("current")
_AclTableMaxSize_Type = Integer32
_AclTableMaxSize_Object = MibScalar
aclTableMaxSize = _AclTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 1, 5),
    _AclTableMaxSize_Type()
)
aclTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclTableMaxSize.setStatus("current")
_AclGroup_ObjectIdentity = ObjectIdentity
aclGroup = _AclGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 3)
)
_AclGroupCurCfgTable_Object = MibTable
aclGroupCurCfgTable = _AclGroupCurCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 3, 1)
)
if mibBuilder.loadTexts:
    aclGroupCurCfgTable.setStatus("current")
_AclGroupCurCfgEntry_Object = MibTableRow
aclGroupCurCfgEntry = _AclGroupCurCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 3, 1, 1)
)
aclGroupCurCfgEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "aclGroupCurCfgIndex"),
)
if mibBuilder.loadTexts:
    aclGroupCurCfgEntry.setStatus("current")
_AclGroupCurCfgIndex_Type = Unsigned32
_AclGroupCurCfgIndex_Object = MibTableColumn
aclGroupCurCfgIndex = _AclGroupCurCfgIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 3, 1, 1, 1),
    _AclGroupCurCfgIndex_Type()
)
aclGroupCurCfgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclGroupCurCfgIndex.setStatus("current")
_AclGroupCurCfgMemberAcls_Type = OctetString
_AclGroupCurCfgMemberAcls_Object = MibTableColumn
aclGroupCurCfgMemberAcls = _AclGroupCurCfgMemberAcls_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 3, 1, 1, 2),
    _AclGroupCurCfgMemberAcls_Type()
)
aclGroupCurCfgMemberAcls.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclGroupCurCfgMemberAcls.setStatus("current")
_AclGroupCurCfgMemberAcl6s_Type = OctetString
_AclGroupCurCfgMemberAcl6s_Object = MibTableColumn
aclGroupCurCfgMemberAcl6s = _AclGroupCurCfgMemberAcl6s_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 3, 1, 1, 9),
    _AclGroupCurCfgMemberAcl6s_Type()
)
aclGroupCurCfgMemberAcl6s.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclGroupCurCfgMemberAcl6s.setStatus("current")
_AclGroupNewCfgTable_Object = MibTable
aclGroupNewCfgTable = _AclGroupNewCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 3, 2)
)
if mibBuilder.loadTexts:
    aclGroupNewCfgTable.setStatus("current")
_AclGroupNewCfgEntry_Object = MibTableRow
aclGroupNewCfgEntry = _AclGroupNewCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 3, 2, 1)
)
aclGroupNewCfgEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "aclGroupNewCfgIndex"),
)
if mibBuilder.loadTexts:
    aclGroupNewCfgEntry.setStatus("current")
_AclGroupNewCfgIndex_Type = Unsigned32
_AclGroupNewCfgIndex_Object = MibTableColumn
aclGroupNewCfgIndex = _AclGroupNewCfgIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 3, 2, 1, 1),
    _AclGroupNewCfgIndex_Type()
)
aclGroupNewCfgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclGroupNewCfgIndex.setStatus("current")
_AclGroupNewCfgMemberAcls_Type = OctetString
_AclGroupNewCfgMemberAcls_Object = MibTableColumn
aclGroupNewCfgMemberAcls = _AclGroupNewCfgMemberAcls_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 3, 2, 1, 2),
    _AclGroupNewCfgMemberAcls_Type()
)
aclGroupNewCfgMemberAcls.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclGroupNewCfgMemberAcls.setStatus("current")
_AclGroupNewCfgAddAcl_Type = Unsigned32
_AclGroupNewCfgAddAcl_Object = MibTableColumn
aclGroupNewCfgAddAcl = _AclGroupNewCfgAddAcl_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 3, 2, 1, 4),
    _AclGroupNewCfgAddAcl_Type()
)
aclGroupNewCfgAddAcl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclGroupNewCfgAddAcl.setStatus("current")
_AclGroupNewCfgRemoveAcl_Type = Unsigned32
_AclGroupNewCfgRemoveAcl_Object = MibTableColumn
aclGroupNewCfgRemoveAcl = _AclGroupNewCfgRemoveAcl_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 3, 2, 1, 5),
    _AclGroupNewCfgRemoveAcl_Type()
)
aclGroupNewCfgRemoveAcl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclGroupNewCfgRemoveAcl.setStatus("current")


class _AclGroupNewCfgDelete_Type(Integer32):
    """Custom type aclGroupNewCfgDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_AclGroupNewCfgDelete_Type.__name__ = "Integer32"
_AclGroupNewCfgDelete_Object = MibTableColumn
aclGroupNewCfgDelete = _AclGroupNewCfgDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 3, 2, 1, 8),
    _AclGroupNewCfgDelete_Type()
)
aclGroupNewCfgDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclGroupNewCfgDelete.setStatus("current")
_AclGroupNewCfgMemberAcl6s_Type = OctetString
_AclGroupNewCfgMemberAcl6s_Object = MibTableColumn
aclGroupNewCfgMemberAcl6s = _AclGroupNewCfgMemberAcl6s_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 3, 2, 1, 9),
    _AclGroupNewCfgMemberAcl6s_Type()
)
aclGroupNewCfgMemberAcl6s.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclGroupNewCfgMemberAcl6s.setStatus("current")
_AclGroupNewCfgAddAcl6_Type = Unsigned32
_AclGroupNewCfgAddAcl6_Object = MibTableColumn
aclGroupNewCfgAddAcl6 = _AclGroupNewCfgAddAcl6_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 3, 2, 1, 10),
    _AclGroupNewCfgAddAcl6_Type()
)
aclGroupNewCfgAddAcl6.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclGroupNewCfgAddAcl6.setStatus("current")
_AclGroupNewCfgRemoveAcl6_Type = Unsigned32
_AclGroupNewCfgRemoveAcl6_Object = MibTableColumn
aclGroupNewCfgRemoveAcl6 = _AclGroupNewCfgRemoveAcl6_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 3, 2, 1, 11),
    _AclGroupNewCfgRemoveAcl6_Type()
)
aclGroupNewCfgRemoveAcl6.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclGroupNewCfgRemoveAcl6.setStatus("current")
_AclCfg_ObjectIdentity = ObjectIdentity
aclCfg = _AclCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 4)
)
_AclCurCfgPortTable_Object = MibTable
aclCurCfgPortTable = _AclCurCfgPortTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 4, 1)
)
if mibBuilder.loadTexts:
    aclCurCfgPortTable.setStatus("current")
_AclCurCfgPortTableEntry_Object = MibTableRow
aclCurCfgPortTableEntry = _AclCurCfgPortTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 4, 1, 1)
)
aclCurCfgPortTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "aclCurCfgPortIndex"),
)
if mibBuilder.loadTexts:
    aclCurCfgPortTableEntry.setStatus("current")
_AclCurCfgPortIndex_Type = PortNumber
_AclCurCfgPortIndex_Object = MibTableColumn
aclCurCfgPortIndex = _AclCurCfgPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 4, 1, 1, 1),
    _AclCurCfgPortIndex_Type()
)
aclCurCfgPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgPortIndex.setStatus("current")


class _AclCurCfgPortAclBmap_Type(OctetString):
    """Custom type aclCurCfgPortAclBmap based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 512),
    )


_AclCurCfgPortAclBmap_Type.__name__ = "OctetString"
_AclCurCfgPortAclBmap_Object = MibTableColumn
aclCurCfgPortAclBmap = _AclCurCfgPortAclBmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 4, 1, 1, 2),
    _AclCurCfgPortAclBmap_Type()
)
aclCurCfgPortAclBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgPortAclBmap.setStatus("current")


class _AclCurCfgPortAclGrpBmap_Type(OctetString):
    """Custom type aclCurCfgPortAclGrpBmap based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 512),
    )


_AclCurCfgPortAclGrpBmap_Type.__name__ = "OctetString"
_AclCurCfgPortAclGrpBmap_Object = MibTableColumn
aclCurCfgPortAclGrpBmap = _AclCurCfgPortAclGrpBmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 4, 1, 1, 4),
    _AclCurCfgPortAclGrpBmap_Type()
)
aclCurCfgPortAclGrpBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgPortAclGrpBmap.setStatus("current")


class _AclCurCfgPortAcl6Bmap_Type(OctetString):
    """Custom type aclCurCfgPortAcl6Bmap based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_AclCurCfgPortAcl6Bmap_Type.__name__ = "OctetString"
_AclCurCfgPortAcl6Bmap_Object = MibTableColumn
aclCurCfgPortAcl6Bmap = _AclCurCfgPortAcl6Bmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 4, 1, 1, 13),
    _AclCurCfgPortAcl6Bmap_Type()
)
aclCurCfgPortAcl6Bmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgPortAcl6Bmap.setStatus("current")
_AclNewCfgPortTable_Object = MibTable
aclNewCfgPortTable = _AclNewCfgPortTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 4, 2)
)
if mibBuilder.loadTexts:
    aclNewCfgPortTable.setStatus("current")
_AclNewCfgPortTableEntry_Object = MibTableRow
aclNewCfgPortTableEntry = _AclNewCfgPortTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 4, 2, 1)
)
aclNewCfgPortTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "aclNewCfgPortIndex"),
)
if mibBuilder.loadTexts:
    aclNewCfgPortTableEntry.setStatus("current")
_AclNewCfgPortIndex_Type = PortNumber
_AclNewCfgPortIndex_Object = MibTableColumn
aclNewCfgPortIndex = _AclNewCfgPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 4, 2, 1, 1),
    _AclNewCfgPortIndex_Type()
)
aclNewCfgPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclNewCfgPortIndex.setStatus("current")
_AclNewCfgPortAddAcl_Type = Unsigned32
_AclNewCfgPortAddAcl_Object = MibTableColumn
aclNewCfgPortAddAcl = _AclNewCfgPortAddAcl_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 4, 2, 1, 2),
    _AclNewCfgPortAddAcl_Type()
)
aclNewCfgPortAddAcl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgPortAddAcl.setStatus("current")
_AclNewCfgPortAddAclGrp_Type = Unsigned32
_AclNewCfgPortAddAclGrp_Object = MibTableColumn
aclNewCfgPortAddAclGrp = _AclNewCfgPortAddAclGrp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 4, 2, 1, 4),
    _AclNewCfgPortAddAclGrp_Type()
)
aclNewCfgPortAddAclGrp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgPortAddAclGrp.setStatus("current")
_AclNewCfgPortRemoveAcl_Type = Unsigned32
_AclNewCfgPortRemoveAcl_Object = MibTableColumn
aclNewCfgPortRemoveAcl = _AclNewCfgPortRemoveAcl_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 4, 2, 1, 5),
    _AclNewCfgPortRemoveAcl_Type()
)
aclNewCfgPortRemoveAcl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgPortRemoveAcl.setStatus("current")
_AclNewCfgPortRemoveAclGrp_Type = Unsigned32
_AclNewCfgPortRemoveAclGrp_Object = MibTableColumn
aclNewCfgPortRemoveAclGrp = _AclNewCfgPortRemoveAclGrp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 4, 2, 1, 7),
    _AclNewCfgPortRemoveAclGrp_Type()
)
aclNewCfgPortRemoveAclGrp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgPortRemoveAclGrp.setStatus("current")


class _AclNewCfgPortAclBmap_Type(OctetString):
    """Custom type aclNewCfgPortAclBmap based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 512),
    )


_AclNewCfgPortAclBmap_Type.__name__ = "OctetString"
_AclNewCfgPortAclBmap_Object = MibTableColumn
aclNewCfgPortAclBmap = _AclNewCfgPortAclBmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 4, 2, 1, 8),
    _AclNewCfgPortAclBmap_Type()
)
aclNewCfgPortAclBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclNewCfgPortAclBmap.setStatus("current")


class _AclNewCfgPortAclGrpBmap_Type(OctetString):
    """Custom type aclNewCfgPortAclGrpBmap based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 512),
    )


_AclNewCfgPortAclGrpBmap_Type.__name__ = "OctetString"
_AclNewCfgPortAclGrpBmap_Object = MibTableColumn
aclNewCfgPortAclGrpBmap = _AclNewCfgPortAclGrpBmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 4, 2, 1, 10),
    _AclNewCfgPortAclGrpBmap_Type()
)
aclNewCfgPortAclGrpBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclNewCfgPortAclGrpBmap.setStatus("current")
_AclNewCfgPortAddAcl6_Type = Unsigned32
_AclNewCfgPortAddAcl6_Object = MibTableColumn
aclNewCfgPortAddAcl6 = _AclNewCfgPortAddAcl6_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 4, 2, 1, 11),
    _AclNewCfgPortAddAcl6_Type()
)
aclNewCfgPortAddAcl6.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgPortAddAcl6.setStatus("current")
_AclNewCfgPortRemoveAcl6_Type = Unsigned32
_AclNewCfgPortRemoveAcl6_Object = MibTableColumn
aclNewCfgPortRemoveAcl6 = _AclNewCfgPortRemoveAcl6_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 4, 2, 1, 12),
    _AclNewCfgPortRemoveAcl6_Type()
)
aclNewCfgPortRemoveAcl6.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgPortRemoveAcl6.setStatus("current")


class _AclNewCfgPortAcl6Bmap_Type(OctetString):
    """Custom type aclNewCfgPortAcl6Bmap based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 512),
    )


_AclNewCfgPortAcl6Bmap_Type.__name__ = "OctetString"
_AclNewCfgPortAcl6Bmap_Object = MibTableColumn
aclNewCfgPortAcl6Bmap = _AclNewCfgPortAcl6Bmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 4, 2, 1, 13),
    _AclNewCfgPortAcl6Bmap_Type()
)
aclNewCfgPortAcl6Bmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclNewCfgPortAcl6Bmap.setStatus("current")
_Acl6List_ObjectIdentity = ObjectIdentity
acl6List = _Acl6List_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5)
)
_Acl6CurCfgTable_Object = MibTable
acl6CurCfgTable = _Acl6CurCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 1)
)
if mibBuilder.loadTexts:
    acl6CurCfgTable.setStatus("current")
_Acl6CurCfgEntry_Object = MibTableRow
acl6CurCfgEntry = _Acl6CurCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 1, 1)
)
acl6CurCfgEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "acl6CurCfgIndex"),
)
if mibBuilder.loadTexts:
    acl6CurCfgEntry.setStatus("current")
_Acl6CurCfgIndex_Type = Unsigned32
_Acl6CurCfgIndex_Object = MibTableColumn
acl6CurCfgIndex = _Acl6CurCfgIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 1, 1, 1),
    _Acl6CurCfgIndex_Type()
)
acl6CurCfgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acl6CurCfgIndex.setStatus("current")
_Acl6CurCfgGroup_Type = Unsigned32
_Acl6CurCfgGroup_Object = MibTableColumn
acl6CurCfgGroup = _Acl6CurCfgGroup_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 1, 1, 2),
    _Acl6CurCfgGroup_Type()
)
acl6CurCfgGroup.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acl6CurCfgGroup.setStatus("current")


class _Acl6CurCfgFilterAction_Type(Integer32):
    """Custom type acl6CurCfgFilterAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("permit", 1),
          ("deny", 2),
          ("setprio", 3))
    )


_Acl6CurCfgFilterAction_Type.__name__ = "Integer32"
_Acl6CurCfgFilterAction_Object = MibTableColumn
acl6CurCfgFilterAction = _Acl6CurCfgFilterAction_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 1, 1, 3),
    _Acl6CurCfgFilterAction_Type()
)
acl6CurCfgFilterAction.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acl6CurCfgFilterAction.setStatus("current")


class _Acl6CurCfgFilterActionSetPrio_Type(Integer32):
    """Custom type acl6CurCfgFilterActionSetPrio based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("prio0", 1),
          ("prio1", 2),
          ("prio2", 3),
          ("prio3", 4),
          ("prio4", 5),
          ("prio5", 6),
          ("prio6", 7),
          ("prio7", 8))
    )


_Acl6CurCfgFilterActionSetPrio_Type.__name__ = "Integer32"
_Acl6CurCfgFilterActionSetPrio_Object = MibTableColumn
acl6CurCfgFilterActionSetPrio = _Acl6CurCfgFilterActionSetPrio_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 1, 1, 4),
    _Acl6CurCfgFilterActionSetPrio_Type()
)
acl6CurCfgFilterActionSetPrio.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acl6CurCfgFilterActionSetPrio.setStatus("current")


class _Acl6CurCfgSrcIPv6Address_Type(DisplayString):
    """Custom type acl6CurCfgSrcIPv6Address based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_Acl6CurCfgSrcIPv6Address_Type.__name__ = "DisplayString"
_Acl6CurCfgSrcIPv6Address_Object = MibTableColumn
acl6CurCfgSrcIPv6Address = _Acl6CurCfgSrcIPv6Address_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 1, 1, 5),
    _Acl6CurCfgSrcIPv6Address_Type()
)
acl6CurCfgSrcIPv6Address.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acl6CurCfgSrcIPv6Address.setStatus("current")


class _Acl6CurCfgSrcIPv6PrefixLen_Type(Integer32):
    """Custom type acl6CurCfgSrcIPv6PrefixLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_Acl6CurCfgSrcIPv6PrefixLen_Type.__name__ = "Integer32"
_Acl6CurCfgSrcIPv6PrefixLen_Object = MibTableColumn
acl6CurCfgSrcIPv6PrefixLen = _Acl6CurCfgSrcIPv6PrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 1, 1, 6),
    _Acl6CurCfgSrcIPv6PrefixLen_Type()
)
acl6CurCfgSrcIPv6PrefixLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acl6CurCfgSrcIPv6PrefixLen.setStatus("current")


class _Acl6CurCfgDstIPv6Address_Type(DisplayString):
    """Custom type acl6CurCfgDstIPv6Address based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_Acl6CurCfgDstIPv6Address_Type.__name__ = "DisplayString"
_Acl6CurCfgDstIPv6Address_Object = MibTableColumn
acl6CurCfgDstIPv6Address = _Acl6CurCfgDstIPv6Address_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 1, 1, 7),
    _Acl6CurCfgDstIPv6Address_Type()
)
acl6CurCfgDstIPv6Address.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acl6CurCfgDstIPv6Address.setStatus("current")


class _Acl6CurCfgDstIPv6PrefixLen_Type(Integer32):
    """Custom type acl6CurCfgDstIPv6PrefixLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_Acl6CurCfgDstIPv6PrefixLen_Type.__name__ = "Integer32"
_Acl6CurCfgDstIPv6PrefixLen_Object = MibTableColumn
acl6CurCfgDstIPv6PrefixLen = _Acl6CurCfgDstIPv6PrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 1, 1, 8),
    _Acl6CurCfgDstIPv6PrefixLen_Type()
)
acl6CurCfgDstIPv6PrefixLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acl6CurCfgDstIPv6PrefixLen.setStatus("current")
_Acl6CurCfgIPv6FlowLabel_Type = DisplayString
_Acl6CurCfgIPv6FlowLabel_Object = MibTableColumn
acl6CurCfgIPv6FlowLabel = _Acl6CurCfgIPv6FlowLabel_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 1, 1, 9),
    _Acl6CurCfgIPv6FlowLabel_Type()
)
acl6CurCfgIPv6FlowLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acl6CurCfgIPv6FlowLabel.setStatus("current")
_Acl6CurCfgIPv6TrafficClass_Type = DisplayString
_Acl6CurCfgIPv6TrafficClass_Object = MibTableColumn
acl6CurCfgIPv6TrafficClass = _Acl6CurCfgIPv6TrafficClass_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 1, 1, 10),
    _Acl6CurCfgIPv6TrafficClass_Type()
)
acl6CurCfgIPv6TrafficClass.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acl6CurCfgIPv6TrafficClass.setStatus("current")
_Acl6CurCfgIPv6NextHeader_Type = DisplayString
_Acl6CurCfgIPv6NextHeader_Object = MibTableColumn
acl6CurCfgIPv6NextHeader = _Acl6CurCfgIPv6NextHeader_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 1, 1, 11),
    _Acl6CurCfgIPv6NextHeader_Type()
)
acl6CurCfgIPv6NextHeader.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acl6CurCfgIPv6NextHeader.setStatus("current")


class _Acl6CurCfgSrcPort_Type(Integer32):
    """Custom type acl6CurCfgSrcPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Acl6CurCfgSrcPort_Type.__name__ = "Integer32"
_Acl6CurCfgSrcPort_Object = MibTableColumn
acl6CurCfgSrcPort = _Acl6CurCfgSrcPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 1, 1, 12),
    _Acl6CurCfgSrcPort_Type()
)
acl6CurCfgSrcPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acl6CurCfgSrcPort.setStatus("current")
_Acl6CurCfgSrcPortMask_Type = DisplayString
_Acl6CurCfgSrcPortMask_Object = MibTableColumn
acl6CurCfgSrcPortMask = _Acl6CurCfgSrcPortMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 1, 1, 13),
    _Acl6CurCfgSrcPortMask_Type()
)
acl6CurCfgSrcPortMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acl6CurCfgSrcPortMask.setStatus("current")


class _Acl6CurCfgDstPort_Type(Integer32):
    """Custom type acl6CurCfgDstPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Acl6CurCfgDstPort_Type.__name__ = "Integer32"
_Acl6CurCfgDstPort_Object = MibTableColumn
acl6CurCfgDstPort = _Acl6CurCfgDstPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 1, 1, 14),
    _Acl6CurCfgDstPort_Type()
)
acl6CurCfgDstPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acl6CurCfgDstPort.setStatus("current")
_Acl6CurCfgDstPortMask_Type = DisplayString
_Acl6CurCfgDstPortMask_Object = MibTableColumn
acl6CurCfgDstPortMask = _Acl6CurCfgDstPortMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 1, 1, 15),
    _Acl6CurCfgDstPortMask_Type()
)
acl6CurCfgDstPortMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acl6CurCfgDstPortMask.setStatus("current")


class _Acl6CurCfgTCPFlags_Type(Bits):
    """Custom type acl6CurCfgTCPFlags based on Bits"""
    namedValues = NamedValues(
        *(("reserved1", 0),
          ("reserved2", 1),
          ("tcpURG", 2),
          ("tcpACK", 3),
          ("tcpPSH", 4),
          ("tcpRST", 5),
          ("tcpSYN", 6),
          ("tcpFIN", 7))
    )

_Acl6CurCfgTCPFlags_Type.__name__ = "Bits"
_Acl6CurCfgTCPFlags_Object = MibTableColumn
acl6CurCfgTCPFlags = _Acl6CurCfgTCPFlags_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 1, 1, 16),
    _Acl6CurCfgTCPFlags_Type()
)
acl6CurCfgTCPFlags.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acl6CurCfgTCPFlags.setStatus("current")


class _Acl6CurCfgTCPFlagsMask_Type(Bits):
    """Custom type acl6CurCfgTCPFlagsMask based on Bits"""
    namedValues = NamedValues(
        *(("reserved1", 0),
          ("reserved2", 1),
          ("tcpURG", 2),
          ("tcpACK", 3),
          ("tcpPSH", 4),
          ("tcpRST", 5),
          ("tcpSYN", 6),
          ("tcpFIN", 7))
    )

_Acl6CurCfgTCPFlagsMask_Type.__name__ = "Bits"
_Acl6CurCfgTCPFlagsMask_Object = MibTableColumn
acl6CurCfgTCPFlagsMask = _Acl6CurCfgTCPFlagsMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 1, 1, 17),
    _Acl6CurCfgTCPFlagsMask_Type()
)
acl6CurCfgTCPFlagsMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acl6CurCfgTCPFlagsMask.setStatus("current")
_Acl6CurCfgEgressPorts_Type = OctetString
_Acl6CurCfgEgressPorts_Object = MibTableColumn
acl6CurCfgEgressPorts = _Acl6CurCfgEgressPorts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 1, 1, 18),
    _Acl6CurCfgEgressPorts_Type()
)
acl6CurCfgEgressPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acl6CurCfgEgressPorts.setStatus("current")


class _Acl6CurCfgStatistics_Type(Integer32):
    """Custom type acl6CurCfgStatistics based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Acl6CurCfgStatistics_Type.__name__ = "Integer32"
_Acl6CurCfgStatistics_Object = MibTableColumn
acl6CurCfgStatistics = _Acl6CurCfgStatistics_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 1, 1, 19),
    _Acl6CurCfgStatistics_Type()
)
acl6CurCfgStatistics.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acl6CurCfgStatistics.setStatus("current")


class _Acl6CurCfgUser_Type(Integer32):
    """Custom type acl6CurCfgUser based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Acl6CurCfgUser_Type.__name__ = "Integer32"
_Acl6CurCfgUser_Object = MibTableColumn
acl6CurCfgUser = _Acl6CurCfgUser_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 1, 1, 20),
    _Acl6CurCfgUser_Type()
)
acl6CurCfgUser.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acl6CurCfgUser.setStatus("current")


class _Acl6CurCfgInprofDscp_Type(Integer32):
    """Custom type acl6CurCfgInprofDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_Acl6CurCfgInprofDscp_Type.__name__ = "Integer32"
_Acl6CurCfgInprofDscp_Object = MibTableColumn
acl6CurCfgInprofDscp = _Acl6CurCfgInprofDscp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 1, 1, 21),
    _Acl6CurCfgInprofDscp_Type()
)
acl6CurCfgInprofDscp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acl6CurCfgInprofDscp.setStatus("current")


class _Acl6CurCfgTos_Type(Integer32):
    """Custom type acl6CurCfgTos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Acl6CurCfgTos_Type.__name__ = "Integer32"
_Acl6CurCfgTos_Object = MibTableColumn
acl6CurCfgTos = _Acl6CurCfgTos_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 1, 1, 22),
    _Acl6CurCfgTos_Type()
)
acl6CurCfgTos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acl6CurCfgTos.setStatus("current")


class _Acl6CurCfgUserEnable_Type(Integer32):
    """Custom type acl6CurCfgUserEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("userdefined", 1))
    )


_Acl6CurCfgUserEnable_Type.__name__ = "Integer32"
_Acl6CurCfgUserEnable_Object = MibTableColumn
acl6CurCfgUserEnable = _Acl6CurCfgUserEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 1, 1, 24),
    _Acl6CurCfgUserEnable_Type()
)
acl6CurCfgUserEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acl6CurCfgUserEnable.setStatus("current")


class _Acl6CurCfgInprofDscpEnable_Type(Integer32):
    """Custom type acl6CurCfgInprofDscpEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Acl6CurCfgInprofDscpEnable_Type.__name__ = "Integer32"
_Acl6CurCfgInprofDscpEnable_Object = MibTableColumn
acl6CurCfgInprofDscpEnable = _Acl6CurCfgInprofDscpEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 1, 1, 25),
    _Acl6CurCfgInprofDscpEnable_Type()
)
acl6CurCfgInprofDscpEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acl6CurCfgInprofDscpEnable.setStatus("current")


class _Acl6CurCfgLog_Type(Integer32):
    """Custom type acl6CurCfgLog based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Acl6CurCfgLog_Type.__name__ = "Integer32"
_Acl6CurCfgLog_Object = MibTableColumn
acl6CurCfgLog = _Acl6CurCfgLog_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 1, 1, 26),
    _Acl6CurCfgLog_Type()
)
acl6CurCfgLog.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acl6CurCfgLog.setStatus("current")


class _Acl6CurCfgMeterAction_Type(Integer32):
    """Custom type acl6CurCfgMeterAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unconfigured", 0),
          ("outdrop", 1),
          ("outpass", 2))
    )


_Acl6CurCfgMeterAction_Type.__name__ = "Integer32"
_Acl6CurCfgMeterAction_Object = MibTableColumn
acl6CurCfgMeterAction = _Acl6CurCfgMeterAction_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 1, 1, 28),
    _Acl6CurCfgMeterAction_Type()
)
acl6CurCfgMeterAction.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acl6CurCfgMeterAction.setStatus("current")


class _Acl6CurCfgMeterEnable_Type(Integer32):
    """Custom type acl6CurCfgMeterEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 0),
          ("disabled", 1))
    )


_Acl6CurCfgMeterEnable_Type.__name__ = "Integer32"
_Acl6CurCfgMeterEnable_Object = MibTableColumn
acl6CurCfgMeterEnable = _Acl6CurCfgMeterEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 1, 1, 29),
    _Acl6CurCfgMeterEnable_Type()
)
acl6CurCfgMeterEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acl6CurCfgMeterEnable.setStatus("current")


class _Acl6CurCfgKbitsSec_Type(Unsigned32):
    """Custom type acl6CurCfgKbitsSec based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(64, 40000000),
    )


_Acl6CurCfgKbitsSec_Type.__name__ = "Unsigned32"
_Acl6CurCfgKbitsSec_Object = MibTableColumn
acl6CurCfgKbitsSec = _Acl6CurCfgKbitsSec_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 1, 1, 30),
    _Acl6CurCfgKbitsSec_Type()
)
acl6CurCfgKbitsSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acl6CurCfgKbitsSec.setStatus("current")


class _Acl6CurCfgKbitsBurst_Type(Integer32):
    """Custom type acl6CurCfgKbitsBurst based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(32,
              64,
              128,
              256,
              512,
              1024,
              2048,
              4096)
        )
    )
    namedValues = NamedValues(
        *(("kbits32", 32),
          ("kbits64", 64),
          ("kbits128", 128),
          ("kbits256", 256),
          ("kbits512", 512),
          ("kbits1024", 1024),
          ("kbits2048", 2048),
          ("kbits4096", 4096))
    )


_Acl6CurCfgKbitsBurst_Type.__name__ = "Integer32"
_Acl6CurCfgKbitsBurst_Object = MibTableColumn
acl6CurCfgKbitsBurst = _Acl6CurCfgKbitsBurst_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 1, 1, 31),
    _Acl6CurCfgKbitsBurst_Type()
)
acl6CurCfgKbitsBurst.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acl6CurCfgKbitsBurst.setStatus("current")


class _Acl6CurCfgOutprofDscp_Type(Integer32):
    """Custom type acl6CurCfgOutprofDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_Acl6CurCfgOutprofDscp_Type.__name__ = "Integer32"
_Acl6CurCfgOutprofDscp_Object = MibTableColumn
acl6CurCfgOutprofDscp = _Acl6CurCfgOutprofDscp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 1, 1, 32),
    _Acl6CurCfgOutprofDscp_Type()
)
acl6CurCfgOutprofDscp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acl6CurCfgOutprofDscp.setStatus("current")


class _Acl6CurCfgOutprofDscpEnable_Type(Integer32):
    """Custom type acl6CurCfgOutprofDscpEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Acl6CurCfgOutprofDscpEnable_Type.__name__ = "Integer32"
_Acl6CurCfgOutprofDscpEnable_Object = MibTableColumn
acl6CurCfgOutprofDscpEnable = _Acl6CurCfgOutprofDscpEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 1, 1, 33),
    _Acl6CurCfgOutprofDscpEnable_Type()
)
acl6CurCfgOutprofDscpEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acl6CurCfgOutprofDscpEnable.setStatus("current")
_Acl6NewCfgTable_Object = MibTable
acl6NewCfgTable = _Acl6NewCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2)
)
if mibBuilder.loadTexts:
    acl6NewCfgTable.setStatus("current")
_Acl6NewCfgEntry_Object = MibTableRow
acl6NewCfgEntry = _Acl6NewCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1)
)
acl6NewCfgEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "acl6NewCfgIndex"),
)
if mibBuilder.loadTexts:
    acl6NewCfgEntry.setStatus("current")
_Acl6NewCfgIndex_Type = Unsigned32
_Acl6NewCfgIndex_Object = MibTableColumn
acl6NewCfgIndex = _Acl6NewCfgIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 1),
    _Acl6NewCfgIndex_Type()
)
acl6NewCfgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acl6NewCfgIndex.setStatus("current")
_Acl6NewCfgGroup_Type = Unsigned32
_Acl6NewCfgGroup_Object = MibTableColumn
acl6NewCfgGroup = _Acl6NewCfgGroup_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 2),
    _Acl6NewCfgGroup_Type()
)
acl6NewCfgGroup.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acl6NewCfgGroup.setStatus("current")


class _Acl6NewCfgFilterAction_Type(Integer32):
    """Custom type acl6NewCfgFilterAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("permit", 1),
          ("deny", 2),
          ("setprio", 3))
    )


_Acl6NewCfgFilterAction_Type.__name__ = "Integer32"
_Acl6NewCfgFilterAction_Object = MibTableColumn
acl6NewCfgFilterAction = _Acl6NewCfgFilterAction_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 3),
    _Acl6NewCfgFilterAction_Type()
)
acl6NewCfgFilterAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acl6NewCfgFilterAction.setStatus("current")


class _Acl6NewCfgFilterActionSetPrio_Type(Integer32):
    """Custom type acl6NewCfgFilterActionSetPrio based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("prio0", 1),
          ("prio1", 2),
          ("prio2", 3),
          ("prio3", 4),
          ("prio4", 5),
          ("prio5", 6),
          ("prio6", 7),
          ("prio7", 8))
    )


_Acl6NewCfgFilterActionSetPrio_Type.__name__ = "Integer32"
_Acl6NewCfgFilterActionSetPrio_Object = MibTableColumn
acl6NewCfgFilterActionSetPrio = _Acl6NewCfgFilterActionSetPrio_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 4),
    _Acl6NewCfgFilterActionSetPrio_Type()
)
acl6NewCfgFilterActionSetPrio.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acl6NewCfgFilterActionSetPrio.setStatus("current")


class _Acl6NewCfgSrcIPv6Address_Type(DisplayString):
    """Custom type acl6NewCfgSrcIPv6Address based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_Acl6NewCfgSrcIPv6Address_Type.__name__ = "DisplayString"
_Acl6NewCfgSrcIPv6Address_Object = MibTableColumn
acl6NewCfgSrcIPv6Address = _Acl6NewCfgSrcIPv6Address_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 5),
    _Acl6NewCfgSrcIPv6Address_Type()
)
acl6NewCfgSrcIPv6Address.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acl6NewCfgSrcIPv6Address.setStatus("current")


class _Acl6NewCfgSrcIPv6PrefixLen_Type(Integer32):
    """Custom type acl6NewCfgSrcIPv6PrefixLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_Acl6NewCfgSrcIPv6PrefixLen_Type.__name__ = "Integer32"
_Acl6NewCfgSrcIPv6PrefixLen_Object = MibTableColumn
acl6NewCfgSrcIPv6PrefixLen = _Acl6NewCfgSrcIPv6PrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 6),
    _Acl6NewCfgSrcIPv6PrefixLen_Type()
)
acl6NewCfgSrcIPv6PrefixLen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acl6NewCfgSrcIPv6PrefixLen.setStatus("current")


class _Acl6NewCfgDstIPv6Address_Type(DisplayString):
    """Custom type acl6NewCfgDstIPv6Address based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_Acl6NewCfgDstIPv6Address_Type.__name__ = "DisplayString"
_Acl6NewCfgDstIPv6Address_Object = MibTableColumn
acl6NewCfgDstIPv6Address = _Acl6NewCfgDstIPv6Address_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 7),
    _Acl6NewCfgDstIPv6Address_Type()
)
acl6NewCfgDstIPv6Address.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acl6NewCfgDstIPv6Address.setStatus("current")


class _Acl6NewCfgDstIPv6PrefixLen_Type(Integer32):
    """Custom type acl6NewCfgDstIPv6PrefixLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_Acl6NewCfgDstIPv6PrefixLen_Type.__name__ = "Integer32"
_Acl6NewCfgDstIPv6PrefixLen_Object = MibTableColumn
acl6NewCfgDstIPv6PrefixLen = _Acl6NewCfgDstIPv6PrefixLen_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 8),
    _Acl6NewCfgDstIPv6PrefixLen_Type()
)
acl6NewCfgDstIPv6PrefixLen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acl6NewCfgDstIPv6PrefixLen.setStatus("current")
_Acl6NewCfgIPv6FlowLabel_Type = DisplayString
_Acl6NewCfgIPv6FlowLabel_Object = MibTableColumn
acl6NewCfgIPv6FlowLabel = _Acl6NewCfgIPv6FlowLabel_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 9),
    _Acl6NewCfgIPv6FlowLabel_Type()
)
acl6NewCfgIPv6FlowLabel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acl6NewCfgIPv6FlowLabel.setStatus("current")
_Acl6NewCfgIPv6TrafficClass_Type = DisplayString
_Acl6NewCfgIPv6TrafficClass_Object = MibTableColumn
acl6NewCfgIPv6TrafficClass = _Acl6NewCfgIPv6TrafficClass_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 10),
    _Acl6NewCfgIPv6TrafficClass_Type()
)
acl6NewCfgIPv6TrafficClass.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acl6NewCfgIPv6TrafficClass.setStatus("current")
_Acl6NewCfgIPv6NextHeader_Type = DisplayString
_Acl6NewCfgIPv6NextHeader_Object = MibTableColumn
acl6NewCfgIPv6NextHeader = _Acl6NewCfgIPv6NextHeader_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 11),
    _Acl6NewCfgIPv6NextHeader_Type()
)
acl6NewCfgIPv6NextHeader.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acl6NewCfgIPv6NextHeader.setStatus("current")


class _Acl6NewCfgSrcPort_Type(Integer32):
    """Custom type acl6NewCfgSrcPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Acl6NewCfgSrcPort_Type.__name__ = "Integer32"
_Acl6NewCfgSrcPort_Object = MibTableColumn
acl6NewCfgSrcPort = _Acl6NewCfgSrcPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 12),
    _Acl6NewCfgSrcPort_Type()
)
acl6NewCfgSrcPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acl6NewCfgSrcPort.setStatus("current")
_Acl6NewCfgSrcPortMask_Type = DisplayString
_Acl6NewCfgSrcPortMask_Object = MibTableColumn
acl6NewCfgSrcPortMask = _Acl6NewCfgSrcPortMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 13),
    _Acl6NewCfgSrcPortMask_Type()
)
acl6NewCfgSrcPortMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acl6NewCfgSrcPortMask.setStatus("current")


class _Acl6NewCfgDstPort_Type(Integer32):
    """Custom type acl6NewCfgDstPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Acl6NewCfgDstPort_Type.__name__ = "Integer32"
_Acl6NewCfgDstPort_Object = MibTableColumn
acl6NewCfgDstPort = _Acl6NewCfgDstPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 14),
    _Acl6NewCfgDstPort_Type()
)
acl6NewCfgDstPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acl6NewCfgDstPort.setStatus("current")
_Acl6NewCfgDstPortMask_Type = DisplayString
_Acl6NewCfgDstPortMask_Object = MibTableColumn
acl6NewCfgDstPortMask = _Acl6NewCfgDstPortMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 15),
    _Acl6NewCfgDstPortMask_Type()
)
acl6NewCfgDstPortMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acl6NewCfgDstPortMask.setStatus("current")


class _Acl6NewCfgTCPFlags_Type(Bits):
    """Custom type acl6NewCfgTCPFlags based on Bits"""
    namedValues = NamedValues(
        *(("reserved1", 0),
          ("reserved2", 1),
          ("tcpURG", 2),
          ("tcpACK", 3),
          ("tcpPSH", 4),
          ("tcpRST", 5),
          ("tcpSYN", 6),
          ("tcpFIN", 7))
    )

_Acl6NewCfgTCPFlags_Type.__name__ = "Bits"
_Acl6NewCfgTCPFlags_Object = MibTableColumn
acl6NewCfgTCPFlags = _Acl6NewCfgTCPFlags_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 16),
    _Acl6NewCfgTCPFlags_Type()
)
acl6NewCfgTCPFlags.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acl6NewCfgTCPFlags.setStatus("current")


class _Acl6NewCfgTCPFlagsMask_Type(Bits):
    """Custom type acl6NewCfgTCPFlagsMask based on Bits"""
    namedValues = NamedValues(
        *(("reserved1", 0),
          ("reserved2", 1),
          ("tcpURG", 2),
          ("tcpACK", 3),
          ("tcpPSH", 4),
          ("tcpRST", 5),
          ("tcpSYN", 6),
          ("tcpFIN", 7))
    )

_Acl6NewCfgTCPFlagsMask_Type.__name__ = "Bits"
_Acl6NewCfgTCPFlagsMask_Object = MibTableColumn
acl6NewCfgTCPFlagsMask = _Acl6NewCfgTCPFlagsMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 17),
    _Acl6NewCfgTCPFlagsMask_Type()
)
acl6NewCfgTCPFlagsMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acl6NewCfgTCPFlagsMask.setStatus("current")
_Acl6NewCfgEgressPorts_Type = OctetString
_Acl6NewCfgEgressPorts_Object = MibTableColumn
acl6NewCfgEgressPorts = _Acl6NewCfgEgressPorts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 18),
    _Acl6NewCfgEgressPorts_Type()
)
acl6NewCfgEgressPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acl6NewCfgEgressPorts.setStatus("current")


class _Acl6NewCfgStatistics_Type(Integer32):
    """Custom type acl6NewCfgStatistics based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Acl6NewCfgStatistics_Type.__name__ = "Integer32"
_Acl6NewCfgStatistics_Object = MibTableColumn
acl6NewCfgStatistics = _Acl6NewCfgStatistics_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 19),
    _Acl6NewCfgStatistics_Type()
)
acl6NewCfgStatistics.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acl6NewCfgStatistics.setStatus("current")
_Acl6NewCfgAddEgressPort_Type = PortNumber
_Acl6NewCfgAddEgressPort_Object = MibTableColumn
acl6NewCfgAddEgressPort = _Acl6NewCfgAddEgressPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 20),
    _Acl6NewCfgAddEgressPort_Type()
)
acl6NewCfgAddEgressPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acl6NewCfgAddEgressPort.setStatus("current")
_Acl6NewCfgRemoveEgressPort_Type = PortNumber
_Acl6NewCfgRemoveEgressPort_Object = MibTableColumn
acl6NewCfgRemoveEgressPort = _Acl6NewCfgRemoveEgressPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 21),
    _Acl6NewCfgRemoveEgressPort_Type()
)
acl6NewCfgRemoveEgressPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acl6NewCfgRemoveEgressPort.setStatus("current")


class _Acl6NewCfgDelete_Type(Integer32):
    """Custom type acl6NewCfgDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_Acl6NewCfgDelete_Type.__name__ = "Integer32"
_Acl6NewCfgDelete_Object = MibTableColumn
acl6NewCfgDelete = _Acl6NewCfgDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 22),
    _Acl6NewCfgDelete_Type()
)
acl6NewCfgDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acl6NewCfgDelete.setStatus("current")


class _Acl6NewCfgUser_Type(Integer32):
    """Custom type acl6NewCfgUser based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Acl6NewCfgUser_Type.__name__ = "Integer32"
_Acl6NewCfgUser_Object = MibTableColumn
acl6NewCfgUser = _Acl6NewCfgUser_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 23),
    _Acl6NewCfgUser_Type()
)
acl6NewCfgUser.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acl6NewCfgUser.setStatus("current")


class _Acl6NewCfgInprofDscp_Type(Integer32):
    """Custom type acl6NewCfgInprofDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_Acl6NewCfgInprofDscp_Type.__name__ = "Integer32"
_Acl6NewCfgInprofDscp_Object = MibTableColumn
acl6NewCfgInprofDscp = _Acl6NewCfgInprofDscp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 24),
    _Acl6NewCfgInprofDscp_Type()
)
acl6NewCfgInprofDscp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acl6NewCfgInprofDscp.setStatus("current")


class _Acl6NewCfgTos_Type(Integer32):
    """Custom type acl6NewCfgTos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Acl6NewCfgTos_Type.__name__ = "Integer32"
_Acl6NewCfgTos_Object = MibTableColumn
acl6NewCfgTos = _Acl6NewCfgTos_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 25),
    _Acl6NewCfgTos_Type()
)
acl6NewCfgTos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acl6NewCfgTos.setStatus("current")


class _Acl6NewCfgUserEnable_Type(Integer32):
    """Custom type acl6NewCfgUserEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("userdefined", 1))
    )


_Acl6NewCfgUserEnable_Type.__name__ = "Integer32"
_Acl6NewCfgUserEnable_Object = MibTableColumn
acl6NewCfgUserEnable = _Acl6NewCfgUserEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 27),
    _Acl6NewCfgUserEnable_Type()
)
acl6NewCfgUserEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acl6NewCfgUserEnable.setStatus("current")


class _Acl6NewCfgInprofDscpEnable_Type(Integer32):
    """Custom type acl6NewCfgInprofDscpEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Acl6NewCfgInprofDscpEnable_Type.__name__ = "Integer32"
_Acl6NewCfgInprofDscpEnable_Object = MibTableColumn
acl6NewCfgInprofDscpEnable = _Acl6NewCfgInprofDscpEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 28),
    _Acl6NewCfgInprofDscpEnable_Type()
)
acl6NewCfgInprofDscpEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acl6NewCfgInprofDscpEnable.setStatus("current")


class _Acl6NewCfgIPv6Reset_Type(Integer32):
    """Custom type acl6NewCfgIPv6Reset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("reset", 2))
    )


_Acl6NewCfgIPv6Reset_Type.__name__ = "Integer32"
_Acl6NewCfgIPv6Reset_Object = MibTableColumn
acl6NewCfgIPv6Reset = _Acl6NewCfgIPv6Reset_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 30),
    _Acl6NewCfgIPv6Reset_Type()
)
acl6NewCfgIPv6Reset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acl6NewCfgIPv6Reset.setStatus("current")


class _Acl6NewCfgTcpudpReset_Type(Integer32):
    """Custom type acl6NewCfgTcpudpReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("reset", 2))
    )


_Acl6NewCfgTcpudpReset_Type.__name__ = "Integer32"
_Acl6NewCfgTcpudpReset_Object = MibTableColumn
acl6NewCfgTcpudpReset = _Acl6NewCfgTcpudpReset_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 31),
    _Acl6NewCfgTcpudpReset_Type()
)
acl6NewCfgTcpudpReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acl6NewCfgTcpudpReset.setStatus("current")


class _Acl6NewCfgRemarkInprofReset_Type(Integer32):
    """Custom type acl6NewCfgRemarkInprofReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("reset", 2))
    )


_Acl6NewCfgRemarkInprofReset_Type.__name__ = "Integer32"
_Acl6NewCfgRemarkInprofReset_Object = MibTableColumn
acl6NewCfgRemarkInprofReset = _Acl6NewCfgRemarkInprofReset_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 32),
    _Acl6NewCfgRemarkInprofReset_Type()
)
acl6NewCfgRemarkInprofReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acl6NewCfgRemarkInprofReset.setStatus("current")


class _Acl6NewCfgLog_Type(Integer32):
    """Custom type acl6NewCfgLog based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Acl6NewCfgLog_Type.__name__ = "Integer32"
_Acl6NewCfgLog_Object = MibTableColumn
acl6NewCfgLog = _Acl6NewCfgLog_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 33),
    _Acl6NewCfgLog_Type()
)
acl6NewCfgLog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acl6NewCfgLog.setStatus("current")


class _Acl6NewCfgMeterAction_Type(Integer32):
    """Custom type acl6NewCfgMeterAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unconfigured", 0),
          ("outdrop", 1),
          ("outpass", 2))
    )


_Acl6NewCfgMeterAction_Type.__name__ = "Integer32"
_Acl6NewCfgMeterAction_Object = MibTableColumn
acl6NewCfgMeterAction = _Acl6NewCfgMeterAction_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 35),
    _Acl6NewCfgMeterAction_Type()
)
acl6NewCfgMeterAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acl6NewCfgMeterAction.setStatus("current")


class _Acl6NewCfgMeterEnable_Type(Integer32):
    """Custom type acl6NewCfgMeterEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 0),
          ("disabled", 1))
    )


_Acl6NewCfgMeterEnable_Type.__name__ = "Integer32"
_Acl6NewCfgMeterEnable_Object = MibTableColumn
acl6NewCfgMeterEnable = _Acl6NewCfgMeterEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 36),
    _Acl6NewCfgMeterEnable_Type()
)
acl6NewCfgMeterEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acl6NewCfgMeterEnable.setStatus("current")


class _Acl6NewCfgKbitsSec_Type(Unsigned32):
    """Custom type acl6NewCfgKbitsSec based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(64, 40000000),
    )


_Acl6NewCfgKbitsSec_Type.__name__ = "Unsigned32"
_Acl6NewCfgKbitsSec_Object = MibTableColumn
acl6NewCfgKbitsSec = _Acl6NewCfgKbitsSec_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 37),
    _Acl6NewCfgKbitsSec_Type()
)
acl6NewCfgKbitsSec.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acl6NewCfgKbitsSec.setStatus("current")


class _Acl6NewCfgKbitsBurst_Type(Integer32):
    """Custom type acl6NewCfgKbitsBurst based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(32,
              64,
              128,
              256,
              512,
              1024,
              2048,
              4096)
        )
    )
    namedValues = NamedValues(
        *(("kbits32", 32),
          ("kbits64", 64),
          ("kbits128", 128),
          ("kbits256", 256),
          ("kbits512", 512),
          ("kbits1024", 1024),
          ("kbits2048", 2048),
          ("kbits4096", 4096))
    )


_Acl6NewCfgKbitsBurst_Type.__name__ = "Integer32"
_Acl6NewCfgKbitsBurst_Object = MibTableColumn
acl6NewCfgKbitsBurst = _Acl6NewCfgKbitsBurst_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 38),
    _Acl6NewCfgKbitsBurst_Type()
)
acl6NewCfgKbitsBurst.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acl6NewCfgKbitsBurst.setStatus("current")


class _Acl6NewCfgMeterReset_Type(Integer32):
    """Custom type acl6NewCfgMeterReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("reset", 2))
    )


_Acl6NewCfgMeterReset_Type.__name__ = "Integer32"
_Acl6NewCfgMeterReset_Object = MibTableColumn
acl6NewCfgMeterReset = _Acl6NewCfgMeterReset_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 39),
    _Acl6NewCfgMeterReset_Type()
)
acl6NewCfgMeterReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acl6NewCfgMeterReset.setStatus("current")


class _Acl6NewCfgOutprofDscp_Type(Integer32):
    """Custom type acl6NewCfgOutprofDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_Acl6NewCfgOutprofDscp_Type.__name__ = "Integer32"
_Acl6NewCfgOutprofDscp_Object = MibTableColumn
acl6NewCfgOutprofDscp = _Acl6NewCfgOutprofDscp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 40),
    _Acl6NewCfgOutprofDscp_Type()
)
acl6NewCfgOutprofDscp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acl6NewCfgOutprofDscp.setStatus("current")


class _Acl6NewCfgOutprofDscpEnable_Type(Integer32):
    """Custom type acl6NewCfgOutprofDscpEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Acl6NewCfgOutprofDscpEnable_Type.__name__ = "Integer32"
_Acl6NewCfgOutprofDscpEnable_Object = MibTableColumn
acl6NewCfgOutprofDscpEnable = _Acl6NewCfgOutprofDscpEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 41),
    _Acl6NewCfgOutprofDscpEnable_Type()
)
acl6NewCfgOutprofDscpEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acl6NewCfgOutprofDscpEnable.setStatus("current")


class _Acl6NewCfgRemarkOutprofReset_Type(Integer32):
    """Custom type acl6NewCfgRemarkOutprofReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("reset", 2))
    )


_Acl6NewCfgRemarkOutprofReset_Type.__name__ = "Integer32"
_Acl6NewCfgRemarkOutprofReset_Object = MibTableColumn
acl6NewCfgRemarkOutprofReset = _Acl6NewCfgRemarkOutprofReset_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 2, 1, 42),
    _Acl6NewCfgRemarkOutprofReset_Type()
)
acl6NewCfgRemarkOutprofReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acl6NewCfgRemarkOutprofReset.setStatus("current")
_Acl6TableMaxSize_Type = Integer32
_Acl6TableMaxSize_Object = MibScalar
acl6TableMaxSize = _Acl6TableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 5, 3),
    _Acl6TableMaxSize_Type()
)
acl6TableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acl6TableMaxSize.setStatus("current")
_AclLog_ObjectIdentity = ObjectIdentity
aclLog = _AclLog_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 6)
)


class _AclLogCurInterval_Type(Integer32):
    """Custom type aclLogCurInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 600),
    )


_AclLogCurInterval_Type.__name__ = "Integer32"
_AclLogCurInterval_Object = MibScalar
aclLogCurInterval = _AclLogCurInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 6, 1),
    _AclLogCurInterval_Type()
)
aclLogCurInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclLogCurInterval.setStatus("current")


class _AclLogNewInterval_Type(Integer32):
    """Custom type aclLogNewInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 600),
    )


_AclLogNewInterval_Type.__name__ = "Integer32"
_AclLogNewInterval_Object = MibScalar
aclLogNewInterval = _AclLogNewInterval_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 6, 2),
    _AclLogNewInterval_Type()
)
aclLogNewInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclLogNewInterval.setStatus("current")


class _AclLogCurRateLimit_Type(Integer32):
    """Custom type aclLogCurRateLimit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_AclLogCurRateLimit_Type.__name__ = "Integer32"
_AclLogCurRateLimit_Object = MibScalar
aclLogCurRateLimit = _AclLogCurRateLimit_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 6, 3),
    _AclLogCurRateLimit_Type()
)
aclLogCurRateLimit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclLogCurRateLimit.setStatus("current")


class _AclLogNewRateLimit_Type(Integer32):
    """Custom type aclLogNewRateLimit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_AclLogNewRateLimit_Type.__name__ = "Integer32"
_AclLogNewRateLimit_Object = MibScalar
aclLogNewRateLimit = _AclLogNewRateLimit_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 1, 6, 4),
    _AclLogNewRateLimit_Type()
)
aclLogNewRateLimit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclLogNewRateLimit.setStatus("current")
_VmapConfig_ObjectIdentity = ObjectIdentity
vmapConfig = _VmapConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3)
)
_VmapList_ObjectIdentity = ObjectIdentity
vmapList = _VmapList_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1)
)
_VmapCurCfgTable_Object = MibTable
vmapCurCfgTable = _VmapCurCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1)
)
if mibBuilder.loadTexts:
    vmapCurCfgTable.setStatus("current")
_VmapCurCfgEntry_Object = MibTableRow
vmapCurCfgEntry = _VmapCurCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1)
)
vmapCurCfgEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vmapCurCfgIndex"),
)
if mibBuilder.loadTexts:
    vmapCurCfgEntry.setStatus("current")
_VmapCurCfgIndex_Type = Unsigned32
_VmapCurCfgIndex_Object = MibTableColumn
vmapCurCfgIndex = _VmapCurCfgIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 1),
    _VmapCurCfgIndex_Type()
)
vmapCurCfgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfgIndex.setStatus("current")


class _VmapCurCfgFilterAction_Type(Integer32):
    """Custom type vmapCurCfgFilterAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("permit", 1),
          ("deny", 2),
          ("setprio", 3))
    )


_VmapCurCfgFilterAction_Type.__name__ = "Integer32"
_VmapCurCfgFilterAction_Object = MibTableColumn
vmapCurCfgFilterAction = _VmapCurCfgFilterAction_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 2),
    _VmapCurCfgFilterAction_Type()
)
vmapCurCfgFilterAction.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfgFilterAction.setStatus("current")


class _VmapCurCfgFilterActionSetPrio_Type(Integer32):
    """Custom type vmapCurCfgFilterActionSetPrio based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("prio0", 1),
          ("prio1", 2),
          ("prio2", 3),
          ("prio3", 4),
          ("prio4", 5),
          ("prio5", 6),
          ("prio6", 7),
          ("prio7", 8))
    )


_VmapCurCfgFilterActionSetPrio_Type.__name__ = "Integer32"
_VmapCurCfgFilterActionSetPrio_Object = MibTableColumn
vmapCurCfgFilterActionSetPrio = _VmapCurCfgFilterActionSetPrio_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 3),
    _VmapCurCfgFilterActionSetPrio_Type()
)
vmapCurCfgFilterActionSetPrio.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfgFilterActionSetPrio.setStatus("current")


class _VmapCurCfgEthFmt_Type(Integer32):
    """Custom type vmapCurCfgEthFmt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("ethernet2", 1),
          ("snap", 2),
          ("llc", 3))
    )


_VmapCurCfgEthFmt_Type.__name__ = "Integer32"
_VmapCurCfgEthFmt_Object = MibTableColumn
vmapCurCfgEthFmt = _VmapCurCfgEthFmt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 4),
    _VmapCurCfgEthFmt_Type()
)
vmapCurCfgEthFmt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfgEthFmt.setStatus("current")


class _VmapCurCfgTagFmt_Type(Integer32):
    """Custom type vmapCurCfgTagFmt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("any", 2),
          ("untagged", 3),
          ("tagged", 4))
    )


_VmapCurCfgTagFmt_Type.__name__ = "Integer32"
_VmapCurCfgTagFmt_Object = MibTableColumn
vmapCurCfgTagFmt = _VmapCurCfgTagFmt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 5),
    _VmapCurCfgTagFmt_Type()
)
vmapCurCfgTagFmt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfgTagFmt.setStatus("current")


class _VmapCurCfgIPFmt_Type(Integer32):
    """Custom type vmapCurCfgIPFmt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("ipv4", 2),
          ("ipv6", 3))
    )


_VmapCurCfgIPFmt_Type.__name__ = "Integer32"
_VmapCurCfgIPFmt_Object = MibTableColumn
vmapCurCfgIPFmt = _VmapCurCfgIPFmt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 6),
    _VmapCurCfgIPFmt_Type()
)
vmapCurCfgIPFmt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfgIPFmt.setStatus("current")
_VmapCurCfgSrcMACAddress_Type = MacAddress
_VmapCurCfgSrcMACAddress_Object = MibTableColumn
vmapCurCfgSrcMACAddress = _VmapCurCfgSrcMACAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 7),
    _VmapCurCfgSrcMACAddress_Type()
)
vmapCurCfgSrcMACAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfgSrcMACAddress.setStatus("current")
_VmapCurCfgSrcMACMask_Type = MacAddress
_VmapCurCfgSrcMACMask_Object = MibTableColumn
vmapCurCfgSrcMACMask = _VmapCurCfgSrcMACMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 8),
    _VmapCurCfgSrcMACMask_Type()
)
vmapCurCfgSrcMACMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfgSrcMACMask.setStatus("current")
_VmapCurCfgDstMACAddress_Type = MacAddress
_VmapCurCfgDstMACAddress_Object = MibTableColumn
vmapCurCfgDstMACAddress = _VmapCurCfgDstMACAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 9),
    _VmapCurCfgDstMACAddress_Type()
)
vmapCurCfgDstMACAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfgDstMACAddress.setStatus("current")
_VmapCurCfgDstMACMask_Type = MacAddress
_VmapCurCfgDstMACMask_Object = MibTableColumn
vmapCurCfgDstMACMask = _VmapCurCfgDstMACMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 10),
    _VmapCurCfgDstMACMask_Type()
)
vmapCurCfgDstMACMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfgDstMACMask.setStatus("current")


class _VmapCurCfgEthernetTypeName_Type(Integer32):
    """Custom type vmapCurCfgEthernetTypeName based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("arp", 1),
          ("ipv4", 2),
          ("ipv6", 3),
          ("mpls", 4),
          ("rarp", 5),
          ("any", 6),
          ("other", 7))
    )


_VmapCurCfgEthernetTypeName_Type.__name__ = "Integer32"
_VmapCurCfgEthernetTypeName_Object = MibTableColumn
vmapCurCfgEthernetTypeName = _VmapCurCfgEthernetTypeName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 11),
    _VmapCurCfgEthernetTypeName_Type()
)
vmapCurCfgEthernetTypeName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfgEthernetTypeName.setStatus("current")


class _VmapCurCfgEthernetTypeValue_Type(Integer32):
    """Custom type vmapCurCfgEthernetTypeValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1536, 65535),
    )


_VmapCurCfgEthernetTypeValue_Type.__name__ = "Integer32"
_VmapCurCfgEthernetTypeValue_Object = MibTableColumn
vmapCurCfgEthernetTypeValue = _VmapCurCfgEthernetTypeValue_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 12),
    _VmapCurCfgEthernetTypeValue_Type()
)
vmapCurCfgEthernetTypeValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfgEthernetTypeValue.setStatus("current")


class _VmapCurCfg8021pPriority_Type(Integer32):
    """Custom type vmapCurCfg8021pPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("priority0", 1),
          ("priority1", 2),
          ("priority2", 3),
          ("priority3", 4),
          ("priority4", 5),
          ("priority5", 6),
          ("priority6", 7),
          ("priority7", 8))
    )


_VmapCurCfg8021pPriority_Type.__name__ = "Integer32"
_VmapCurCfg8021pPriority_Object = MibTableColumn
vmapCurCfg8021pPriority = _VmapCurCfg8021pPriority_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 13),
    _VmapCurCfg8021pPriority_Type()
)
vmapCurCfg8021pPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfg8021pPriority.setStatus("current")
_VmapCurCfgTypeOfService_Type = DisplayString
_VmapCurCfgTypeOfService_Object = MibTableColumn
vmapCurCfgTypeOfService = _VmapCurCfgTypeOfService_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 14),
    _VmapCurCfgTypeOfService_Type()
)
vmapCurCfgTypeOfService.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfgTypeOfService.setStatus("current")
_VmapCurCfgProtocol_Type = DisplayString
_VmapCurCfgProtocol_Object = MibTableColumn
vmapCurCfgProtocol = _VmapCurCfgProtocol_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 15),
    _VmapCurCfgProtocol_Type()
)
vmapCurCfgProtocol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfgProtocol.setStatus("current")
_VmapCurCfgSrcIPAddress_Type = IpAddress
_VmapCurCfgSrcIPAddress_Object = MibTableColumn
vmapCurCfgSrcIPAddress = _VmapCurCfgSrcIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 16),
    _VmapCurCfgSrcIPAddress_Type()
)
vmapCurCfgSrcIPAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfgSrcIPAddress.setStatus("current")
_VmapCurCfgSrcIPMask_Type = IpAddress
_VmapCurCfgSrcIPMask_Object = MibTableColumn
vmapCurCfgSrcIPMask = _VmapCurCfgSrcIPMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 17),
    _VmapCurCfgSrcIPMask_Type()
)
vmapCurCfgSrcIPMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfgSrcIPMask.setStatus("current")
_VmapCurCfgDstIPAddress_Type = IpAddress
_VmapCurCfgDstIPAddress_Object = MibTableColumn
vmapCurCfgDstIPAddress = _VmapCurCfgDstIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 18),
    _VmapCurCfgDstIPAddress_Type()
)
vmapCurCfgDstIPAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfgDstIPAddress.setStatus("current")
_VmapCurCfgDstIPMask_Type = IpAddress
_VmapCurCfgDstIPMask_Object = MibTableColumn
vmapCurCfgDstIPMask = _VmapCurCfgDstIPMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 19),
    _VmapCurCfgDstIPMask_Type()
)
vmapCurCfgDstIPMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfgDstIPMask.setStatus("current")


class _VmapCurCfgSrcPort_Type(Integer32):
    """Custom type vmapCurCfgSrcPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_VmapCurCfgSrcPort_Type.__name__ = "Integer32"
_VmapCurCfgSrcPort_Object = MibTableColumn
vmapCurCfgSrcPort = _VmapCurCfgSrcPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 20),
    _VmapCurCfgSrcPort_Type()
)
vmapCurCfgSrcPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfgSrcPort.setStatus("current")
_VmapCurCfgSrcPortMask_Type = DisplayString
_VmapCurCfgSrcPortMask_Object = MibTableColumn
vmapCurCfgSrcPortMask = _VmapCurCfgSrcPortMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 21),
    _VmapCurCfgSrcPortMask_Type()
)
vmapCurCfgSrcPortMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfgSrcPortMask.setStatus("current")


class _VmapCurCfgDstPort_Type(Integer32):
    """Custom type vmapCurCfgDstPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_VmapCurCfgDstPort_Type.__name__ = "Integer32"
_VmapCurCfgDstPort_Object = MibTableColumn
vmapCurCfgDstPort = _VmapCurCfgDstPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 22),
    _VmapCurCfgDstPort_Type()
)
vmapCurCfgDstPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfgDstPort.setStatus("current")
_VmapCurCfgDstPortMask_Type = DisplayString
_VmapCurCfgDstPortMask_Object = MibTableColumn
vmapCurCfgDstPortMask = _VmapCurCfgDstPortMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 23),
    _VmapCurCfgDstPortMask_Type()
)
vmapCurCfgDstPortMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfgDstPortMask.setStatus("current")


class _VmapCurCfgTCPFlags_Type(Bits):
    """Custom type vmapCurCfgTCPFlags based on Bits"""
    namedValues = NamedValues(
        *(("reserved1", 0),
          ("reserved2", 1),
          ("tcpURG", 2),
          ("tcpACK", 3),
          ("tcpPSH", 4),
          ("tcpRST", 5),
          ("tcpSYN", 6),
          ("tcpFIN", 7))
    )

_VmapCurCfgTCPFlags_Type.__name__ = "Bits"
_VmapCurCfgTCPFlags_Object = MibTableColumn
vmapCurCfgTCPFlags = _VmapCurCfgTCPFlags_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 24),
    _VmapCurCfgTCPFlags_Type()
)
vmapCurCfgTCPFlags.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfgTCPFlags.setStatus("current")


class _VmapCurCfgTCPFlagsMask_Type(Bits):
    """Custom type vmapCurCfgTCPFlagsMask based on Bits"""
    namedValues = NamedValues(
        *(("reserved1", 0),
          ("reserved2", 1),
          ("tcpURG", 2),
          ("tcpACK", 3),
          ("tcpPSH", 4),
          ("tcpRST", 5),
          ("tcpSYN", 6),
          ("tcpFIN", 7))
    )

_VmapCurCfgTCPFlagsMask_Type.__name__ = "Bits"
_VmapCurCfgTCPFlagsMask_Object = MibTableColumn
vmapCurCfgTCPFlagsMask = _VmapCurCfgTCPFlagsMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 25),
    _VmapCurCfgTCPFlagsMask_Type()
)
vmapCurCfgTCPFlagsMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfgTCPFlagsMask.setStatus("current")
_VmapCurCfgEgressPorts_Type = OctetString
_VmapCurCfgEgressPorts_Object = MibTableColumn
vmapCurCfgEgressPorts = _VmapCurCfgEgressPorts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 26),
    _VmapCurCfgEgressPorts_Type()
)
vmapCurCfgEgressPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfgEgressPorts.setStatus("current")


class _VmapCurCfgStatistics_Type(Integer32):
    """Custom type vmapCurCfgStatistics based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_VmapCurCfgStatistics_Type.__name__ = "Integer32"
_VmapCurCfgStatistics_Object = MibTableColumn
vmapCurCfgStatistics = _VmapCurCfgStatistics_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 27),
    _VmapCurCfgStatistics_Type()
)
vmapCurCfgStatistics.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfgStatistics.setStatus("current")


class _VmapCurCfgMeterAction_Type(Integer32):
    """Custom type vmapCurCfgMeterAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unconfigured", 0),
          ("outdrop", 1),
          ("outpass", 2))
    )


_VmapCurCfgMeterAction_Type.__name__ = "Integer32"
_VmapCurCfgMeterAction_Object = MibTableColumn
vmapCurCfgMeterAction = _VmapCurCfgMeterAction_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 31),
    _VmapCurCfgMeterAction_Type()
)
vmapCurCfgMeterAction.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfgMeterAction.setStatus("current")


class _VmapCurCfgMeterEnable_Type(Integer32):
    """Custom type vmapCurCfgMeterEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 0),
          ("disabled", 1))
    )


_VmapCurCfgMeterEnable_Type.__name__ = "Integer32"
_VmapCurCfgMeterEnable_Object = MibTableColumn
vmapCurCfgMeterEnable = _VmapCurCfgMeterEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 32),
    _VmapCurCfgMeterEnable_Type()
)
vmapCurCfgMeterEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfgMeterEnable.setStatus("current")


class _VmapCurCfgKbitsSec_Type(Unsigned32):
    """Custom type vmapCurCfgKbitsSec based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(64, 10000000),
    )


_VmapCurCfgKbitsSec_Type.__name__ = "Unsigned32"
_VmapCurCfgKbitsSec_Object = MibTableColumn
vmapCurCfgKbitsSec = _VmapCurCfgKbitsSec_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 33),
    _VmapCurCfgKbitsSec_Type()
)
vmapCurCfgKbitsSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfgKbitsSec.setStatus("current")


class _VmapCurCfgKbitsBurst_Type(Integer32):
    """Custom type vmapCurCfgKbitsBurst based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(32,
              64,
              128,
              256,
              512,
              1024,
              2048,
              4096)
        )
    )
    namedValues = NamedValues(
        *(("kbits32", 32),
          ("kbits64", 64),
          ("kbits128", 128),
          ("kbits256", 256),
          ("kbits512", 512),
          ("kbits1024", 1024),
          ("kbits2048", 2048),
          ("kbits4096", 4096))
    )


_VmapCurCfgKbitsBurst_Type.__name__ = "Integer32"
_VmapCurCfgKbitsBurst_Object = MibTableColumn
vmapCurCfgKbitsBurst = _VmapCurCfgKbitsBurst_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 34),
    _VmapCurCfgKbitsBurst_Type()
)
vmapCurCfgKbitsBurst.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfgKbitsBurst.setStatus("current")


class _VmapCurCfgUser_Type(Integer32):
    """Custom type vmapCurCfgUser based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_VmapCurCfgUser_Type.__name__ = "Integer32"
_VmapCurCfgUser_Object = MibTableColumn
vmapCurCfgUser = _VmapCurCfgUser_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 35),
    _VmapCurCfgUser_Type()
)
vmapCurCfgUser.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfgUser.setStatus("current")


class _VmapCurCfgInprofDscp_Type(Integer32):
    """Custom type vmapCurCfgInprofDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_VmapCurCfgInprofDscp_Type.__name__ = "Integer32"
_VmapCurCfgInprofDscp_Object = MibTableColumn
vmapCurCfgInprofDscp = _VmapCurCfgInprofDscp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 36),
    _VmapCurCfgInprofDscp_Type()
)
vmapCurCfgInprofDscp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfgInprofDscp.setStatus("current")


class _VmapCurCfgTos_Type(Integer32):
    """Custom type vmapCurCfgTos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_VmapCurCfgTos_Type.__name__ = "Integer32"
_VmapCurCfgTos_Object = MibTableColumn
vmapCurCfgTos = _VmapCurCfgTos_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 37),
    _VmapCurCfgTos_Type()
)
vmapCurCfgTos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfgTos.setStatus("current")


class _VmapCurCfgOutprofDscp_Type(Integer32):
    """Custom type vmapCurCfgOutprofDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_VmapCurCfgOutprofDscp_Type.__name__ = "Integer32"
_VmapCurCfgOutprofDscp_Object = MibTableColumn
vmapCurCfgOutprofDscp = _VmapCurCfgOutprofDscp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 38),
    _VmapCurCfgOutprofDscp_Type()
)
vmapCurCfgOutprofDscp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfgOutprofDscp.setStatus("current")


class _VmapCurCfgUserEnable_Type(Integer32):
    """Custom type vmapCurCfgUserEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("userdefined", 1))
    )


_VmapCurCfgUserEnable_Type.__name__ = "Integer32"
_VmapCurCfgUserEnable_Object = MibTableColumn
vmapCurCfgUserEnable = _VmapCurCfgUserEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 39),
    _VmapCurCfgUserEnable_Type()
)
vmapCurCfgUserEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfgUserEnable.setStatus("current")


class _VmapCurCfgInprofDscpEnable_Type(Integer32):
    """Custom type vmapCurCfgInprofDscpEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_VmapCurCfgInprofDscpEnable_Type.__name__ = "Integer32"
_VmapCurCfgInprofDscpEnable_Object = MibTableColumn
vmapCurCfgInprofDscpEnable = _VmapCurCfgInprofDscpEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 40),
    _VmapCurCfgInprofDscpEnable_Type()
)
vmapCurCfgInprofDscpEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfgInprofDscpEnable.setStatus("current")


class _VmapCurCfgOutprofDscpEnable_Type(Integer32):
    """Custom type vmapCurCfgOutprofDscpEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_VmapCurCfgOutprofDscpEnable_Type.__name__ = "Integer32"
_VmapCurCfgOutprofDscpEnable_Object = MibTableColumn
vmapCurCfgOutprofDscpEnable = _VmapCurCfgOutprofDscpEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 41),
    _VmapCurCfgOutprofDscpEnable_Type()
)
vmapCurCfgOutprofDscpEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfgOutprofDscpEnable.setStatus("current")
_VmapCurCfgMirrorPort_Type = Integer32
_VmapCurCfgMirrorPort_Object = MibTableColumn
vmapCurCfgMirrorPort = _VmapCurCfgMirrorPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 1, 1, 51),
    _VmapCurCfgMirrorPort_Type()
)
vmapCurCfgMirrorPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapCurCfgMirrorPort.setStatus("current")
_VmapNewCfgTable_Object = MibTable
vmapNewCfgTable = _VmapNewCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2)
)
if mibBuilder.loadTexts:
    vmapNewCfgTable.setStatus("current")
_VmapNewCfgEntry_Object = MibTableRow
vmapNewCfgEntry = _VmapNewCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1)
)
vmapNewCfgEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vmapNewCfgIndex"),
)
if mibBuilder.loadTexts:
    vmapNewCfgEntry.setStatus("current")
_VmapNewCfgIndex_Type = Unsigned32
_VmapNewCfgIndex_Object = MibTableColumn
vmapNewCfgIndex = _VmapNewCfgIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 1),
    _VmapNewCfgIndex_Type()
)
vmapNewCfgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapNewCfgIndex.setStatus("current")


class _VmapNewCfgFilterAction_Type(Integer32):
    """Custom type vmapNewCfgFilterAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("permit", 1),
          ("deny", 2),
          ("setprio", 3))
    )


_VmapNewCfgFilterAction_Type.__name__ = "Integer32"
_VmapNewCfgFilterAction_Object = MibTableColumn
vmapNewCfgFilterAction = _VmapNewCfgFilterAction_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 2),
    _VmapNewCfgFilterAction_Type()
)
vmapNewCfgFilterAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgFilterAction.setStatus("current")


class _VmapNewCfgFilterActionSetPrio_Type(Integer32):
    """Custom type vmapNewCfgFilterActionSetPrio based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("prio0", 1),
          ("prio1", 2),
          ("prio2", 3),
          ("prio3", 4),
          ("prio4", 5),
          ("prio5", 6),
          ("prio6", 7),
          ("prio7", 8))
    )


_VmapNewCfgFilterActionSetPrio_Type.__name__ = "Integer32"
_VmapNewCfgFilterActionSetPrio_Object = MibTableColumn
vmapNewCfgFilterActionSetPrio = _VmapNewCfgFilterActionSetPrio_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 3),
    _VmapNewCfgFilterActionSetPrio_Type()
)
vmapNewCfgFilterActionSetPrio.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgFilterActionSetPrio.setStatus("current")


class _VmapNewCfgEthFmt_Type(Integer32):
    """Custom type vmapNewCfgEthFmt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("ethernet2", 1),
          ("snap", 2),
          ("llc", 3))
    )


_VmapNewCfgEthFmt_Type.__name__ = "Integer32"
_VmapNewCfgEthFmt_Object = MibTableColumn
vmapNewCfgEthFmt = _VmapNewCfgEthFmt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 4),
    _VmapNewCfgEthFmt_Type()
)
vmapNewCfgEthFmt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgEthFmt.setStatus("current")


class _VmapNewCfgTagFmt_Type(Integer32):
    """Custom type vmapNewCfgTagFmt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("any", 2),
          ("none", 3),
          ("tagged", 4))
    )


_VmapNewCfgTagFmt_Type.__name__ = "Integer32"
_VmapNewCfgTagFmt_Object = MibTableColumn
vmapNewCfgTagFmt = _VmapNewCfgTagFmt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 5),
    _VmapNewCfgTagFmt_Type()
)
vmapNewCfgTagFmt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgTagFmt.setStatus("current")


class _VmapNewCfgIPFmt_Type(Integer32):
    """Custom type vmapNewCfgIPFmt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("ipv4", 2),
          ("ipv6", 3))
    )


_VmapNewCfgIPFmt_Type.__name__ = "Integer32"
_VmapNewCfgIPFmt_Object = MibTableColumn
vmapNewCfgIPFmt = _VmapNewCfgIPFmt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 6),
    _VmapNewCfgIPFmt_Type()
)
vmapNewCfgIPFmt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgIPFmt.setStatus("current")
_VmapNewCfgSrcMACAddress_Type = MacAddress
_VmapNewCfgSrcMACAddress_Object = MibTableColumn
vmapNewCfgSrcMACAddress = _VmapNewCfgSrcMACAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 7),
    _VmapNewCfgSrcMACAddress_Type()
)
vmapNewCfgSrcMACAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgSrcMACAddress.setStatus("current")
_VmapNewCfgSrcMACMask_Type = MacAddress
_VmapNewCfgSrcMACMask_Object = MibTableColumn
vmapNewCfgSrcMACMask = _VmapNewCfgSrcMACMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 8),
    _VmapNewCfgSrcMACMask_Type()
)
vmapNewCfgSrcMACMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgSrcMACMask.setStatus("current")
_VmapNewCfgDstMACAddress_Type = MacAddress
_VmapNewCfgDstMACAddress_Object = MibTableColumn
vmapNewCfgDstMACAddress = _VmapNewCfgDstMACAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 9),
    _VmapNewCfgDstMACAddress_Type()
)
vmapNewCfgDstMACAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgDstMACAddress.setStatus("current")
_VmapNewCfgDstMACMask_Type = MacAddress
_VmapNewCfgDstMACMask_Object = MibTableColumn
vmapNewCfgDstMACMask = _VmapNewCfgDstMACMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 10),
    _VmapNewCfgDstMACMask_Type()
)
vmapNewCfgDstMACMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgDstMACMask.setStatus("current")


class _VmapNewCfgEthernetTypeName_Type(Integer32):
    """Custom type vmapNewCfgEthernetTypeName based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("arp", 1),
          ("ipv4", 2),
          ("ipv6", 3),
          ("mpls", 4),
          ("rarp", 5),
          ("any", 6),
          ("other", 7))
    )


_VmapNewCfgEthernetTypeName_Type.__name__ = "Integer32"
_VmapNewCfgEthernetTypeName_Object = MibTableColumn
vmapNewCfgEthernetTypeName = _VmapNewCfgEthernetTypeName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 11),
    _VmapNewCfgEthernetTypeName_Type()
)
vmapNewCfgEthernetTypeName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgEthernetTypeName.setStatus("current")


class _VmapNewCfgEthernetTypeValue_Type(Integer32):
    """Custom type vmapNewCfgEthernetTypeValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1536, 65535),
    )


_VmapNewCfgEthernetTypeValue_Type.__name__ = "Integer32"
_VmapNewCfgEthernetTypeValue_Object = MibTableColumn
vmapNewCfgEthernetTypeValue = _VmapNewCfgEthernetTypeValue_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 12),
    _VmapNewCfgEthernetTypeValue_Type()
)
vmapNewCfgEthernetTypeValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgEthernetTypeValue.setStatus("current")


class _VmapNewCfg8021pPriority_Type(Integer32):
    """Custom type vmapNewCfg8021pPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("priority0", 1),
          ("priority1", 2),
          ("priority2", 3),
          ("priority3", 4),
          ("priority4", 5),
          ("priority5", 6),
          ("priority6", 7),
          ("priority7", 8))
    )


_VmapNewCfg8021pPriority_Type.__name__ = "Integer32"
_VmapNewCfg8021pPriority_Object = MibTableColumn
vmapNewCfg8021pPriority = _VmapNewCfg8021pPriority_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 13),
    _VmapNewCfg8021pPriority_Type()
)
vmapNewCfg8021pPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfg8021pPriority.setStatus("current")
_VmapNewCfgTypeOfService_Type = DisplayString
_VmapNewCfgTypeOfService_Object = MibTableColumn
vmapNewCfgTypeOfService = _VmapNewCfgTypeOfService_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 14),
    _VmapNewCfgTypeOfService_Type()
)
vmapNewCfgTypeOfService.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgTypeOfService.setStatus("current")
_VmapNewCfgProtocol_Type = DisplayString
_VmapNewCfgProtocol_Object = MibTableColumn
vmapNewCfgProtocol = _VmapNewCfgProtocol_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 15),
    _VmapNewCfgProtocol_Type()
)
vmapNewCfgProtocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgProtocol.setStatus("current")
_VmapNewCfgSrcIPAddress_Type = IpAddress
_VmapNewCfgSrcIPAddress_Object = MibTableColumn
vmapNewCfgSrcIPAddress = _VmapNewCfgSrcIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 16),
    _VmapNewCfgSrcIPAddress_Type()
)
vmapNewCfgSrcIPAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgSrcIPAddress.setStatus("current")
_VmapNewCfgSrcIPMask_Type = IpAddress
_VmapNewCfgSrcIPMask_Object = MibTableColumn
vmapNewCfgSrcIPMask = _VmapNewCfgSrcIPMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 17),
    _VmapNewCfgSrcIPMask_Type()
)
vmapNewCfgSrcIPMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgSrcIPMask.setStatus("current")
_VmapNewCfgDstIPAddress_Type = IpAddress
_VmapNewCfgDstIPAddress_Object = MibTableColumn
vmapNewCfgDstIPAddress = _VmapNewCfgDstIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 18),
    _VmapNewCfgDstIPAddress_Type()
)
vmapNewCfgDstIPAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgDstIPAddress.setStatus("current")
_VmapNewCfgDstIPMask_Type = IpAddress
_VmapNewCfgDstIPMask_Object = MibTableColumn
vmapNewCfgDstIPMask = _VmapNewCfgDstIPMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 19),
    _VmapNewCfgDstIPMask_Type()
)
vmapNewCfgDstIPMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgDstIPMask.setStatus("current")


class _VmapNewCfgSrcPort_Type(Integer32):
    """Custom type vmapNewCfgSrcPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_VmapNewCfgSrcPort_Type.__name__ = "Integer32"
_VmapNewCfgSrcPort_Object = MibTableColumn
vmapNewCfgSrcPort = _VmapNewCfgSrcPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 20),
    _VmapNewCfgSrcPort_Type()
)
vmapNewCfgSrcPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgSrcPort.setStatus("current")
_VmapNewCfgSrcPortMask_Type = DisplayString
_VmapNewCfgSrcPortMask_Object = MibTableColumn
vmapNewCfgSrcPortMask = _VmapNewCfgSrcPortMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 21),
    _VmapNewCfgSrcPortMask_Type()
)
vmapNewCfgSrcPortMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgSrcPortMask.setStatus("current")


class _VmapNewCfgDstPort_Type(Integer32):
    """Custom type vmapNewCfgDstPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_VmapNewCfgDstPort_Type.__name__ = "Integer32"
_VmapNewCfgDstPort_Object = MibTableColumn
vmapNewCfgDstPort = _VmapNewCfgDstPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 22),
    _VmapNewCfgDstPort_Type()
)
vmapNewCfgDstPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgDstPort.setStatus("current")
_VmapNewCfgDstPortMask_Type = DisplayString
_VmapNewCfgDstPortMask_Object = MibTableColumn
vmapNewCfgDstPortMask = _VmapNewCfgDstPortMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 23),
    _VmapNewCfgDstPortMask_Type()
)
vmapNewCfgDstPortMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgDstPortMask.setStatus("current")


class _VmapNewCfgTCPFlags_Type(Bits):
    """Custom type vmapNewCfgTCPFlags based on Bits"""
    namedValues = NamedValues(
        *(("reserved1", 0),
          ("reserved2", 1),
          ("tcpURG", 2),
          ("tcpACK", 3),
          ("tcpPSH", 4),
          ("tcpRST", 5),
          ("tcpSYN", 6),
          ("tcpFIN", 7))
    )

_VmapNewCfgTCPFlags_Type.__name__ = "Bits"
_VmapNewCfgTCPFlags_Object = MibTableColumn
vmapNewCfgTCPFlags = _VmapNewCfgTCPFlags_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 24),
    _VmapNewCfgTCPFlags_Type()
)
vmapNewCfgTCPFlags.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgTCPFlags.setStatus("current")


class _VmapNewCfgTCPFlagsMask_Type(Bits):
    """Custom type vmapNewCfgTCPFlagsMask based on Bits"""
    namedValues = NamedValues(
        *(("reserved1", 0),
          ("reserved2", 1),
          ("tcpURG", 2),
          ("tcpACK", 3),
          ("tcpPSH", 4),
          ("tcpRST", 5),
          ("tcpSYN", 6),
          ("tcpFIN", 7))
    )

_VmapNewCfgTCPFlagsMask_Type.__name__ = "Bits"
_VmapNewCfgTCPFlagsMask_Object = MibTableColumn
vmapNewCfgTCPFlagsMask = _VmapNewCfgTCPFlagsMask_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 25),
    _VmapNewCfgTCPFlagsMask_Type()
)
vmapNewCfgTCPFlagsMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgTCPFlagsMask.setStatus("current")
_VmapNewCfgEgressPorts_Type = OctetString
_VmapNewCfgEgressPorts_Object = MibTableColumn
vmapNewCfgEgressPorts = _VmapNewCfgEgressPorts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 26),
    _VmapNewCfgEgressPorts_Type()
)
vmapNewCfgEgressPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapNewCfgEgressPorts.setStatus("current")


class _VmapNewCfgStatistics_Type(Integer32):
    """Custom type vmapNewCfgStatistics based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_VmapNewCfgStatistics_Type.__name__ = "Integer32"
_VmapNewCfgStatistics_Object = MibTableColumn
vmapNewCfgStatistics = _VmapNewCfgStatistics_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 27),
    _VmapNewCfgStatistics_Type()
)
vmapNewCfgStatistics.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgStatistics.setStatus("current")
_VmapNewCfgAddEgressPort_Type = PortNumber
_VmapNewCfgAddEgressPort_Object = MibTableColumn
vmapNewCfgAddEgressPort = _VmapNewCfgAddEgressPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 28),
    _VmapNewCfgAddEgressPort_Type()
)
vmapNewCfgAddEgressPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgAddEgressPort.setStatus("current")
_VmapNewCfgRemoveEgressPort_Type = PortNumber
_VmapNewCfgRemoveEgressPort_Object = MibTableColumn
vmapNewCfgRemoveEgressPort = _VmapNewCfgRemoveEgressPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 29),
    _VmapNewCfgRemoveEgressPort_Type()
)
vmapNewCfgRemoveEgressPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgRemoveEgressPort.setStatus("current")


class _VmapNewCfgDelete_Type(Integer32):
    """Custom type vmapNewCfgDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_VmapNewCfgDelete_Type.__name__ = "Integer32"
_VmapNewCfgDelete_Object = MibTableColumn
vmapNewCfgDelete = _VmapNewCfgDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 30),
    _VmapNewCfgDelete_Type()
)
vmapNewCfgDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgDelete.setStatus("current")


class _VmapNewCfgMeterAction_Type(Integer32):
    """Custom type vmapNewCfgMeterAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unconfigured", 0),
          ("outdrop", 1),
          ("outpass", 2))
    )


_VmapNewCfgMeterAction_Type.__name__ = "Integer32"
_VmapNewCfgMeterAction_Object = MibTableColumn
vmapNewCfgMeterAction = _VmapNewCfgMeterAction_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 31),
    _VmapNewCfgMeterAction_Type()
)
vmapNewCfgMeterAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgMeterAction.setStatus("current")


class _VmapNewCfgMeterEnable_Type(Integer32):
    """Custom type vmapNewCfgMeterEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 0),
          ("disabled", 1))
    )


_VmapNewCfgMeterEnable_Type.__name__ = "Integer32"
_VmapNewCfgMeterEnable_Object = MibTableColumn
vmapNewCfgMeterEnable = _VmapNewCfgMeterEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 32),
    _VmapNewCfgMeterEnable_Type()
)
vmapNewCfgMeterEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgMeterEnable.setStatus("current")


class _VmapNewCfgKbitsSec_Type(Unsigned32):
    """Custom type vmapNewCfgKbitsSec based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(64, 10000000),
    )


_VmapNewCfgKbitsSec_Type.__name__ = "Unsigned32"
_VmapNewCfgKbitsSec_Object = MibTableColumn
vmapNewCfgKbitsSec = _VmapNewCfgKbitsSec_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 33),
    _VmapNewCfgKbitsSec_Type()
)
vmapNewCfgKbitsSec.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgKbitsSec.setStatus("current")


class _VmapNewCfgKbitsBurst_Type(Integer32):
    """Custom type vmapNewCfgKbitsBurst based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(32,
              64,
              128,
              256,
              512,
              1024,
              2048,
              4096)
        )
    )
    namedValues = NamedValues(
        *(("kbits32", 32),
          ("kbits64", 64),
          ("kbits128", 128),
          ("kbits256", 256),
          ("kbits512", 512),
          ("kbits1024", 1024),
          ("kbits2048", 2048),
          ("kbits4096", 4096))
    )


_VmapNewCfgKbitsBurst_Type.__name__ = "Integer32"
_VmapNewCfgKbitsBurst_Object = MibTableColumn
vmapNewCfgKbitsBurst = _VmapNewCfgKbitsBurst_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 34),
    _VmapNewCfgKbitsBurst_Type()
)
vmapNewCfgKbitsBurst.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgKbitsBurst.setStatus("current")


class _VmapNewCfgUser_Type(Integer32):
    """Custom type vmapNewCfgUser based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_VmapNewCfgUser_Type.__name__ = "Integer32"
_VmapNewCfgUser_Object = MibTableColumn
vmapNewCfgUser = _VmapNewCfgUser_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 35),
    _VmapNewCfgUser_Type()
)
vmapNewCfgUser.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgUser.setStatus("current")


class _VmapNewCfgInprofDscp_Type(Integer32):
    """Custom type vmapNewCfgInprofDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_VmapNewCfgInprofDscp_Type.__name__ = "Integer32"
_VmapNewCfgInprofDscp_Object = MibTableColumn
vmapNewCfgInprofDscp = _VmapNewCfgInprofDscp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 36),
    _VmapNewCfgInprofDscp_Type()
)
vmapNewCfgInprofDscp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgInprofDscp.setStatus("current")


class _VmapNewCfgTos_Type(Integer32):
    """Custom type vmapNewCfgTos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_VmapNewCfgTos_Type.__name__ = "Integer32"
_VmapNewCfgTos_Object = MibTableColumn
vmapNewCfgTos = _VmapNewCfgTos_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 37),
    _VmapNewCfgTos_Type()
)
vmapNewCfgTos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgTos.setStatus("current")


class _VmapNewCfgOutprofDscp_Type(Integer32):
    """Custom type vmapNewCfgOutprofDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_VmapNewCfgOutprofDscp_Type.__name__ = "Integer32"
_VmapNewCfgOutprofDscp_Object = MibTableColumn
vmapNewCfgOutprofDscp = _VmapNewCfgOutprofDscp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 38),
    _VmapNewCfgOutprofDscp_Type()
)
vmapNewCfgOutprofDscp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgOutprofDscp.setStatus("current")


class _VmapNewCfgUserEnable_Type(Integer32):
    """Custom type vmapNewCfgUserEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("userdefined", 1))
    )


_VmapNewCfgUserEnable_Type.__name__ = "Integer32"
_VmapNewCfgUserEnable_Object = MibTableColumn
vmapNewCfgUserEnable = _VmapNewCfgUserEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 39),
    _VmapNewCfgUserEnable_Type()
)
vmapNewCfgUserEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgUserEnable.setStatus("current")


class _VmapNewCfgInprofDscpEnable_Type(Integer32):
    """Custom type vmapNewCfgInprofDscpEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_VmapNewCfgInprofDscpEnable_Type.__name__ = "Integer32"
_VmapNewCfgInprofDscpEnable_Object = MibTableColumn
vmapNewCfgInprofDscpEnable = _VmapNewCfgInprofDscpEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 40),
    _VmapNewCfgInprofDscpEnable_Type()
)
vmapNewCfgInprofDscpEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgInprofDscpEnable.setStatus("current")


class _VmapNewCfgOutprofDscpEnable_Type(Integer32):
    """Custom type vmapNewCfgOutprofDscpEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_VmapNewCfgOutprofDscpEnable_Type.__name__ = "Integer32"
_VmapNewCfgOutprofDscpEnable_Object = MibTableColumn
vmapNewCfgOutprofDscpEnable = _VmapNewCfgOutprofDscpEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 41),
    _VmapNewCfgOutprofDscpEnable_Type()
)
vmapNewCfgOutprofDscpEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgOutprofDscpEnable.setStatus("current")


class _VmapNewCfgReset_Type(Integer32):
    """Custom type vmapNewCfgReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("reset", 2))
    )


_VmapNewCfgReset_Type.__name__ = "Integer32"
_VmapNewCfgReset_Object = MibTableColumn
vmapNewCfgReset = _VmapNewCfgReset_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 42),
    _VmapNewCfgReset_Type()
)
vmapNewCfgReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgReset.setStatus("current")


class _VmapNewCfgEthernetReset_Type(Integer32):
    """Custom type vmapNewCfgEthernetReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("reset", 2))
    )


_VmapNewCfgEthernetReset_Type.__name__ = "Integer32"
_VmapNewCfgEthernetReset_Object = MibTableColumn
vmapNewCfgEthernetReset = _VmapNewCfgEthernetReset_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 43),
    _VmapNewCfgEthernetReset_Type()
)
vmapNewCfgEthernetReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgEthernetReset.setStatus("current")


class _VmapNewCfgIpv4Reset_Type(Integer32):
    """Custom type vmapNewCfgIpv4Reset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("reset", 2))
    )


_VmapNewCfgIpv4Reset_Type.__name__ = "Integer32"
_VmapNewCfgIpv4Reset_Object = MibTableColumn
vmapNewCfgIpv4Reset = _VmapNewCfgIpv4Reset_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 44),
    _VmapNewCfgIpv4Reset_Type()
)
vmapNewCfgIpv4Reset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgIpv4Reset.setStatus("current")


class _VmapNewCfgTcpudpReset_Type(Integer32):
    """Custom type vmapNewCfgTcpudpReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("reset", 2))
    )


_VmapNewCfgTcpudpReset_Type.__name__ = "Integer32"
_VmapNewCfgTcpudpReset_Object = MibTableColumn
vmapNewCfgTcpudpReset = _VmapNewCfgTcpudpReset_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 45),
    _VmapNewCfgTcpudpReset_Type()
)
vmapNewCfgTcpudpReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgTcpudpReset.setStatus("current")


class _VmapNewCfgMeterReset_Type(Integer32):
    """Custom type vmapNewCfgMeterReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("reset", 2))
    )


_VmapNewCfgMeterReset_Type.__name__ = "Integer32"
_VmapNewCfgMeterReset_Object = MibTableColumn
vmapNewCfgMeterReset = _VmapNewCfgMeterReset_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 46),
    _VmapNewCfgMeterReset_Type()
)
vmapNewCfgMeterReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgMeterReset.setStatus("current")


class _VmapNewCfgRemarkReset_Type(Integer32):
    """Custom type vmapNewCfgRemarkReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("reset", 2))
    )


_VmapNewCfgRemarkReset_Type.__name__ = "Integer32"
_VmapNewCfgRemarkReset_Object = MibTableColumn
vmapNewCfgRemarkReset = _VmapNewCfgRemarkReset_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 47),
    _VmapNewCfgRemarkReset_Type()
)
vmapNewCfgRemarkReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgRemarkReset.setStatus("current")


class _VmapNewCfgRemarkInprofReset_Type(Integer32):
    """Custom type vmapNewCfgRemarkInprofReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("reset", 2))
    )


_VmapNewCfgRemarkInprofReset_Type.__name__ = "Integer32"
_VmapNewCfgRemarkInprofReset_Object = MibTableColumn
vmapNewCfgRemarkInprofReset = _VmapNewCfgRemarkInprofReset_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 48),
    _VmapNewCfgRemarkInprofReset_Type()
)
vmapNewCfgRemarkInprofReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgRemarkInprofReset.setStatus("current")


class _VmapNewCfgRemarkOutprofReset_Type(Integer32):
    """Custom type vmapNewCfgRemarkOutprofReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("reset", 2))
    )


_VmapNewCfgRemarkOutprofReset_Type.__name__ = "Integer32"
_VmapNewCfgRemarkOutprofReset_Object = MibTableColumn
vmapNewCfgRemarkOutprofReset = _VmapNewCfgRemarkOutprofReset_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 49),
    _VmapNewCfgRemarkOutprofReset_Type()
)
vmapNewCfgRemarkOutprofReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgRemarkOutprofReset.setStatus("current")


class _VmapNewCfgPktfmtReset_Type(Integer32):
    """Custom type vmapNewCfgPktfmtReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("reset", 2))
    )


_VmapNewCfgPktfmtReset_Type.__name__ = "Integer32"
_VmapNewCfgPktfmtReset_Object = MibTableColumn
vmapNewCfgPktfmtReset = _VmapNewCfgPktfmtReset_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 50),
    _VmapNewCfgPktfmtReset_Type()
)
vmapNewCfgPktfmtReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgPktfmtReset.setStatus("current")
_VmapNewCfgMirrorPort_Type = Integer32
_VmapNewCfgMirrorPort_Object = MibTableColumn
vmapNewCfgMirrorPort = _VmapNewCfgMirrorPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 1, 2, 1, 51),
    _VmapNewCfgMirrorPort_Type()
)
vmapNewCfgMirrorPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapNewCfgMirrorPort.setStatus("current")
_VmapCfg_ObjectIdentity = ObjectIdentity
vmapCfg = _VmapCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2)
)
_VmapVlanCfg_ObjectIdentity = ObjectIdentity
vmapVlanCfg = _VmapVlanCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 1)
)
_VmapVlanCfgNonServerPorts_ObjectIdentity = ObjectIdentity
vmapVlanCfgNonServerPorts = _VmapVlanCfgNonServerPorts_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 1, 1)
)
_VmapVlanCurCfgNonServerPortsTable_Object = MibTable
vmapVlanCurCfgNonServerPortsTable = _VmapVlanCurCfgNonServerPortsTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 1, 1, 1)
)
if mibBuilder.loadTexts:
    vmapVlanCurCfgNonServerPortsTable.setStatus("current")
_VmapVlanCurCfgNonServerPortsTableEntry_Object = MibTableRow
vmapVlanCurCfgNonServerPortsTableEntry = _VmapVlanCurCfgNonServerPortsTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 1, 1, 1, 1)
)
vmapVlanCurCfgNonServerPortsTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vmapVlanCurCfgNonServerPortsVlanIdx"),
)
if mibBuilder.loadTexts:
    vmapVlanCurCfgNonServerPortsTableEntry.setStatus("current")
_VmapVlanCurCfgNonServerPortsVlanIdx_Type = Integer32
_VmapVlanCurCfgNonServerPortsVlanIdx_Object = MibTableColumn
vmapVlanCurCfgNonServerPortsVlanIdx = _VmapVlanCurCfgNonServerPortsVlanIdx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 1, 1, 1, 1, 1),
    _VmapVlanCurCfgNonServerPortsVlanIdx_Type()
)
vmapVlanCurCfgNonServerPortsVlanIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapVlanCurCfgNonServerPortsVlanIdx.setStatus("current")
_VmapVlanCurCfgNonServerPortsVmapBitmap_Type = OctetString
_VmapVlanCurCfgNonServerPortsVmapBitmap_Object = MibTableColumn
vmapVlanCurCfgNonServerPortsVmapBitmap = _VmapVlanCurCfgNonServerPortsVmapBitmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 1, 1, 1, 1, 2),
    _VmapVlanCurCfgNonServerPortsVmapBitmap_Type()
)
vmapVlanCurCfgNonServerPortsVmapBitmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapVlanCurCfgNonServerPortsVmapBitmap.setStatus("current")
_VmapVlanNewCfgNonServerPortsTable_Object = MibTable
vmapVlanNewCfgNonServerPortsTable = _VmapVlanNewCfgNonServerPortsTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 1, 1, 2)
)
if mibBuilder.loadTexts:
    vmapVlanNewCfgNonServerPortsTable.setStatus("current")
_VmapVlanNewCfgNonServerPortsTableEntry_Object = MibTableRow
vmapVlanNewCfgNonServerPortsTableEntry = _VmapVlanNewCfgNonServerPortsTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 1, 1, 2, 1)
)
vmapVlanNewCfgNonServerPortsTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vmapVlanNewCfgNonServerPortsVlanIdx"),
)
if mibBuilder.loadTexts:
    vmapVlanNewCfgNonServerPortsTableEntry.setStatus("current")
_VmapVlanNewCfgNonServerPortsVlanIdx_Type = Integer32
_VmapVlanNewCfgNonServerPortsVlanIdx_Object = MibTableColumn
vmapVlanNewCfgNonServerPortsVlanIdx = _VmapVlanNewCfgNonServerPortsVlanIdx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 1, 1, 2, 1, 1),
    _VmapVlanNewCfgNonServerPortsVlanIdx_Type()
)
vmapVlanNewCfgNonServerPortsVlanIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapVlanNewCfgNonServerPortsVlanIdx.setStatus("current")
_VmapVlanNewCfgNonServerPortsVmapBitmap_Type = OctetString
_VmapVlanNewCfgNonServerPortsVmapBitmap_Object = MibTableColumn
vmapVlanNewCfgNonServerPortsVmapBitmap = _VmapVlanNewCfgNonServerPortsVmapBitmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 1, 1, 2, 1, 2),
    _VmapVlanNewCfgNonServerPortsVmapBitmap_Type()
)
vmapVlanNewCfgNonServerPortsVmapBitmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapVlanNewCfgNonServerPortsVmapBitmap.setStatus("current")
_VmapVlanNewCfgNonServerPortsAddVmap_Type = Unsigned32
_VmapVlanNewCfgNonServerPortsAddVmap_Object = MibTableColumn
vmapVlanNewCfgNonServerPortsAddVmap = _VmapVlanNewCfgNonServerPortsAddVmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 1, 1, 2, 1, 3),
    _VmapVlanNewCfgNonServerPortsAddVmap_Type()
)
vmapVlanNewCfgNonServerPortsAddVmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapVlanNewCfgNonServerPortsAddVmap.setStatus("current")
_VmapVlanNewCfgNonServerPortsRemVmap_Type = Unsigned32
_VmapVlanNewCfgNonServerPortsRemVmap_Object = MibTableColumn
vmapVlanNewCfgNonServerPortsRemVmap = _VmapVlanNewCfgNonServerPortsRemVmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 1, 1, 2, 1, 4),
    _VmapVlanNewCfgNonServerPortsRemVmap_Type()
)
vmapVlanNewCfgNonServerPortsRemVmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapVlanNewCfgNonServerPortsRemVmap.setStatus("current")
_VmapVlanCfgServerPorts_ObjectIdentity = ObjectIdentity
vmapVlanCfgServerPorts = _VmapVlanCfgServerPorts_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 1, 2)
)
_VmapVlanCurCfgServerPortsTable_Object = MibTable
vmapVlanCurCfgServerPortsTable = _VmapVlanCurCfgServerPortsTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 1, 2, 1)
)
if mibBuilder.loadTexts:
    vmapVlanCurCfgServerPortsTable.setStatus("current")
_VmapVlanCurCfgServerPortsTableEntry_Object = MibTableRow
vmapVlanCurCfgServerPortsTableEntry = _VmapVlanCurCfgServerPortsTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 1, 2, 1, 1)
)
vmapVlanCurCfgServerPortsTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vmapVlanCurCfgServerPortsVlanIdx"),
)
if mibBuilder.loadTexts:
    vmapVlanCurCfgServerPortsTableEntry.setStatus("current")
_VmapVlanCurCfgServerPortsVlanIdx_Type = Integer32
_VmapVlanCurCfgServerPortsVlanIdx_Object = MibTableColumn
vmapVlanCurCfgServerPortsVlanIdx = _VmapVlanCurCfgServerPortsVlanIdx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 1, 2, 1, 1, 1),
    _VmapVlanCurCfgServerPortsVlanIdx_Type()
)
vmapVlanCurCfgServerPortsVlanIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapVlanCurCfgServerPortsVlanIdx.setStatus("current")
_VmapVlanCurCfgServerPortsVmapBitmap_Type = OctetString
_VmapVlanCurCfgServerPortsVmapBitmap_Object = MibTableColumn
vmapVlanCurCfgServerPortsVmapBitmap = _VmapVlanCurCfgServerPortsVmapBitmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 1, 2, 1, 1, 2),
    _VmapVlanCurCfgServerPortsVmapBitmap_Type()
)
vmapVlanCurCfgServerPortsVmapBitmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapVlanCurCfgServerPortsVmapBitmap.setStatus("current")
_VmapVlanNewCfgServerPortsTable_Object = MibTable
vmapVlanNewCfgServerPortsTable = _VmapVlanNewCfgServerPortsTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 1, 2, 2)
)
if mibBuilder.loadTexts:
    vmapVlanNewCfgServerPortsTable.setStatus("current")
_VmapVlanNewCfgServerPortsTableEntry_Object = MibTableRow
vmapVlanNewCfgServerPortsTableEntry = _VmapVlanNewCfgServerPortsTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 1, 2, 2, 1)
)
vmapVlanNewCfgServerPortsTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vmapVlanNewCfgServerPortsVlanIdx"),
)
if mibBuilder.loadTexts:
    vmapVlanNewCfgServerPortsTableEntry.setStatus("current")
_VmapVlanNewCfgServerPortsVlanIdx_Type = Integer32
_VmapVlanNewCfgServerPortsVlanIdx_Object = MibTableColumn
vmapVlanNewCfgServerPortsVlanIdx = _VmapVlanNewCfgServerPortsVlanIdx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 1, 2, 2, 1, 1),
    _VmapVlanNewCfgServerPortsVlanIdx_Type()
)
vmapVlanNewCfgServerPortsVlanIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapVlanNewCfgServerPortsVlanIdx.setStatus("current")
_VmapVlanNewCfgServerPortsVmapBitmap_Type = OctetString
_VmapVlanNewCfgServerPortsVmapBitmap_Object = MibTableColumn
vmapVlanNewCfgServerPortsVmapBitmap = _VmapVlanNewCfgServerPortsVmapBitmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 1, 2, 2, 1, 2),
    _VmapVlanNewCfgServerPortsVmapBitmap_Type()
)
vmapVlanNewCfgServerPortsVmapBitmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapVlanNewCfgServerPortsVmapBitmap.setStatus("current")
_VmapVlanNewCfgServerPortsAddVmap_Type = Unsigned32
_VmapVlanNewCfgServerPortsAddVmap_Object = MibTableColumn
vmapVlanNewCfgServerPortsAddVmap = _VmapVlanNewCfgServerPortsAddVmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 1, 2, 2, 1, 3),
    _VmapVlanNewCfgServerPortsAddVmap_Type()
)
vmapVlanNewCfgServerPortsAddVmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapVlanNewCfgServerPortsAddVmap.setStatus("current")
_VmapVlanNewCfgServerPortsRemVmap_Type = Unsigned32
_VmapVlanNewCfgServerPortsRemVmap_Object = MibTableColumn
vmapVlanNewCfgServerPortsRemVmap = _VmapVlanNewCfgServerPortsRemVmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 1, 2, 2, 1, 4),
    _VmapVlanNewCfgServerPortsRemVmap_Type()
)
vmapVlanNewCfgServerPortsRemVmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapVlanNewCfgServerPortsRemVmap.setStatus("current")
_VmapVlanCfgAllPorts_ObjectIdentity = ObjectIdentity
vmapVlanCfgAllPorts = _VmapVlanCfgAllPorts_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 1, 3)
)
_VmapVlanCurCfgAllPortsTable_Object = MibTable
vmapVlanCurCfgAllPortsTable = _VmapVlanCurCfgAllPortsTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 1, 3, 1)
)
if mibBuilder.loadTexts:
    vmapVlanCurCfgAllPortsTable.setStatus("current")
_VmapVlanCurCfgAllPortsTableEntry_Object = MibTableRow
vmapVlanCurCfgAllPortsTableEntry = _VmapVlanCurCfgAllPortsTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 1, 3, 1, 1)
)
vmapVlanCurCfgAllPortsTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vmapVlanCurCfgAllPortsVlanIdx"),
)
if mibBuilder.loadTexts:
    vmapVlanCurCfgAllPortsTableEntry.setStatus("current")
_VmapVlanCurCfgAllPortsVlanIdx_Type = Integer32
_VmapVlanCurCfgAllPortsVlanIdx_Object = MibTableColumn
vmapVlanCurCfgAllPortsVlanIdx = _VmapVlanCurCfgAllPortsVlanIdx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 1, 3, 1, 1, 1),
    _VmapVlanCurCfgAllPortsVlanIdx_Type()
)
vmapVlanCurCfgAllPortsVlanIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapVlanCurCfgAllPortsVlanIdx.setStatus("current")
_VmapVlanCurCfgAllPortsVmapBitmap_Type = OctetString
_VmapVlanCurCfgAllPortsVmapBitmap_Object = MibTableColumn
vmapVlanCurCfgAllPortsVmapBitmap = _VmapVlanCurCfgAllPortsVmapBitmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 1, 3, 1, 1, 2),
    _VmapVlanCurCfgAllPortsVmapBitmap_Type()
)
vmapVlanCurCfgAllPortsVmapBitmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapVlanCurCfgAllPortsVmapBitmap.setStatus("current")
_VmapVlanNewCfgAllPortsTable_Object = MibTable
vmapVlanNewCfgAllPortsTable = _VmapVlanNewCfgAllPortsTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 1, 3, 2)
)
if mibBuilder.loadTexts:
    vmapVlanNewCfgAllPortsTable.setStatus("current")
_VmapVlanNewCfgAllPortsTableEntry_Object = MibTableRow
vmapVlanNewCfgAllPortsTableEntry = _VmapVlanNewCfgAllPortsTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 1, 3, 2, 1)
)
vmapVlanNewCfgAllPortsTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vmapVlanNewCfgAllPortsVlanIdx"),
)
if mibBuilder.loadTexts:
    vmapVlanNewCfgAllPortsTableEntry.setStatus("current")
_VmapVlanNewCfgAllPortsVlanIdx_Type = Integer32
_VmapVlanNewCfgAllPortsVlanIdx_Object = MibTableColumn
vmapVlanNewCfgAllPortsVlanIdx = _VmapVlanNewCfgAllPortsVlanIdx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 1, 3, 2, 1, 1),
    _VmapVlanNewCfgAllPortsVlanIdx_Type()
)
vmapVlanNewCfgAllPortsVlanIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapVlanNewCfgAllPortsVlanIdx.setStatus("current")
_VmapVlanNewCfgAllPortsVmapBitmap_Type = OctetString
_VmapVlanNewCfgAllPortsVmapBitmap_Object = MibTableColumn
vmapVlanNewCfgAllPortsVmapBitmap = _VmapVlanNewCfgAllPortsVmapBitmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 1, 3, 2, 1, 2),
    _VmapVlanNewCfgAllPortsVmapBitmap_Type()
)
vmapVlanNewCfgAllPortsVmapBitmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapVlanNewCfgAllPortsVmapBitmap.setStatus("current")
_VmapVlanNewCfgAllPortsAddVmap_Type = Unsigned32
_VmapVlanNewCfgAllPortsAddVmap_Object = MibTableColumn
vmapVlanNewCfgAllPortsAddVmap = _VmapVlanNewCfgAllPortsAddVmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 1, 3, 2, 1, 3),
    _VmapVlanNewCfgAllPortsAddVmap_Type()
)
vmapVlanNewCfgAllPortsAddVmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapVlanNewCfgAllPortsAddVmap.setStatus("current")
_VmapVlanNewCfgAllPortsRemVmap_Type = Unsigned32
_VmapVlanNewCfgAllPortsRemVmap_Object = MibTableColumn
vmapVlanNewCfgAllPortsRemVmap = _VmapVlanNewCfgAllPortsRemVmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 1, 3, 2, 1, 4),
    _VmapVlanNewCfgAllPortsRemVmap_Type()
)
vmapVlanNewCfgAllPortsRemVmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapVlanNewCfgAllPortsRemVmap.setStatus("current")
_VmapGroupCfg_ObjectIdentity = ObjectIdentity
vmapGroupCfg = _VmapGroupCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 2)
)
_VmapGroupCfgNonServerPorts_ObjectIdentity = ObjectIdentity
vmapGroupCfgNonServerPorts = _VmapGroupCfgNonServerPorts_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 2, 1)
)
_VmapGroupCurCfgNonServerPortsTable_Object = MibTable
vmapGroupCurCfgNonServerPortsTable = _VmapGroupCurCfgNonServerPortsTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 2, 1, 1)
)
if mibBuilder.loadTexts:
    vmapGroupCurCfgNonServerPortsTable.setStatus("current")
_VmapGroupCurCfgNonServerPortsTableEntry_Object = MibTableRow
vmapGroupCurCfgNonServerPortsTableEntry = _VmapGroupCurCfgNonServerPortsTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 2, 1, 1, 1)
)
vmapGroupCurCfgNonServerPortsTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vmapGroupCurCfgNonServerPortsGroupIdx"),
)
if mibBuilder.loadTexts:
    vmapGroupCurCfgNonServerPortsTableEntry.setStatus("current")
_VmapGroupCurCfgNonServerPortsGroupIdx_Type = Integer32
_VmapGroupCurCfgNonServerPortsGroupIdx_Object = MibTableColumn
vmapGroupCurCfgNonServerPortsGroupIdx = _VmapGroupCurCfgNonServerPortsGroupIdx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 2, 1, 1, 1, 1),
    _VmapGroupCurCfgNonServerPortsGroupIdx_Type()
)
vmapGroupCurCfgNonServerPortsGroupIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapGroupCurCfgNonServerPortsGroupIdx.setStatus("current")
_VmapGroupCurCfgNonServerPortsVmapBitmap_Type = OctetString
_VmapGroupCurCfgNonServerPortsVmapBitmap_Object = MibTableColumn
vmapGroupCurCfgNonServerPortsVmapBitmap = _VmapGroupCurCfgNonServerPortsVmapBitmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 2, 1, 1, 1, 2),
    _VmapGroupCurCfgNonServerPortsVmapBitmap_Type()
)
vmapGroupCurCfgNonServerPortsVmapBitmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapGroupCurCfgNonServerPortsVmapBitmap.setStatus("current")
_VmapGroupNewCfgNonServerPortsTable_Object = MibTable
vmapGroupNewCfgNonServerPortsTable = _VmapGroupNewCfgNonServerPortsTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 2, 1, 2)
)
if mibBuilder.loadTexts:
    vmapGroupNewCfgNonServerPortsTable.setStatus("current")
_VmapGroupNewCfgNonServerPortsTableEntry_Object = MibTableRow
vmapGroupNewCfgNonServerPortsTableEntry = _VmapGroupNewCfgNonServerPortsTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 2, 1, 2, 1)
)
vmapGroupNewCfgNonServerPortsTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vmapGroupNewCfgNonServerPortsGroupIdx"),
)
if mibBuilder.loadTexts:
    vmapGroupNewCfgNonServerPortsTableEntry.setStatus("current")
_VmapGroupNewCfgNonServerPortsGroupIdx_Type = Integer32
_VmapGroupNewCfgNonServerPortsGroupIdx_Object = MibTableColumn
vmapGroupNewCfgNonServerPortsGroupIdx = _VmapGroupNewCfgNonServerPortsGroupIdx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 2, 1, 2, 1, 1),
    _VmapGroupNewCfgNonServerPortsGroupIdx_Type()
)
vmapGroupNewCfgNonServerPortsGroupIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapGroupNewCfgNonServerPortsGroupIdx.setStatus("current")
_VmapGroupNewCfgNonServerPortsVmapBitmap_Type = OctetString
_VmapGroupNewCfgNonServerPortsVmapBitmap_Object = MibTableColumn
vmapGroupNewCfgNonServerPortsVmapBitmap = _VmapGroupNewCfgNonServerPortsVmapBitmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 2, 1, 2, 1, 2),
    _VmapGroupNewCfgNonServerPortsVmapBitmap_Type()
)
vmapGroupNewCfgNonServerPortsVmapBitmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapGroupNewCfgNonServerPortsVmapBitmap.setStatus("current")
_VmapGroupNewCfgNonServerPortsAddVmap_Type = Unsigned32
_VmapGroupNewCfgNonServerPortsAddVmap_Object = MibTableColumn
vmapGroupNewCfgNonServerPortsAddVmap = _VmapGroupNewCfgNonServerPortsAddVmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 2, 1, 2, 1, 3),
    _VmapGroupNewCfgNonServerPortsAddVmap_Type()
)
vmapGroupNewCfgNonServerPortsAddVmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapGroupNewCfgNonServerPortsAddVmap.setStatus("current")
_VmapGroupNewCfgNonServerPortsRemVmap_Type = Unsigned32
_VmapGroupNewCfgNonServerPortsRemVmap_Object = MibTableColumn
vmapGroupNewCfgNonServerPortsRemVmap = _VmapGroupNewCfgNonServerPortsRemVmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 2, 1, 2, 1, 4),
    _VmapGroupNewCfgNonServerPortsRemVmap_Type()
)
vmapGroupNewCfgNonServerPortsRemVmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapGroupNewCfgNonServerPortsRemVmap.setStatus("current")
_VmapGroupCfgServerPorts_ObjectIdentity = ObjectIdentity
vmapGroupCfgServerPorts = _VmapGroupCfgServerPorts_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 2, 2)
)
_VmapGroupCurCfgServerPortsTable_Object = MibTable
vmapGroupCurCfgServerPortsTable = _VmapGroupCurCfgServerPortsTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 2, 2, 1)
)
if mibBuilder.loadTexts:
    vmapGroupCurCfgServerPortsTable.setStatus("current")
_VmapGroupCurCfgServerPortsTableEntry_Object = MibTableRow
vmapGroupCurCfgServerPortsTableEntry = _VmapGroupCurCfgServerPortsTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 2, 2, 1, 1)
)
vmapGroupCurCfgServerPortsTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vmapGroupCurCfgServerPortsGroupIdx"),
)
if mibBuilder.loadTexts:
    vmapGroupCurCfgServerPortsTableEntry.setStatus("current")
_VmapGroupCurCfgServerPortsGroupIdx_Type = Integer32
_VmapGroupCurCfgServerPortsGroupIdx_Object = MibTableColumn
vmapGroupCurCfgServerPortsGroupIdx = _VmapGroupCurCfgServerPortsGroupIdx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 2, 2, 1, 1, 1),
    _VmapGroupCurCfgServerPortsGroupIdx_Type()
)
vmapGroupCurCfgServerPortsGroupIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapGroupCurCfgServerPortsGroupIdx.setStatus("current")
_VmapGroupCurCfgServerPortsVmapBitmap_Type = OctetString
_VmapGroupCurCfgServerPortsVmapBitmap_Object = MibTableColumn
vmapGroupCurCfgServerPortsVmapBitmap = _VmapGroupCurCfgServerPortsVmapBitmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 2, 2, 1, 1, 2),
    _VmapGroupCurCfgServerPortsVmapBitmap_Type()
)
vmapGroupCurCfgServerPortsVmapBitmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapGroupCurCfgServerPortsVmapBitmap.setStatus("current")
_VmapGroupNewCfgServerPortsTable_Object = MibTable
vmapGroupNewCfgServerPortsTable = _VmapGroupNewCfgServerPortsTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 2, 2, 2)
)
if mibBuilder.loadTexts:
    vmapGroupNewCfgServerPortsTable.setStatus("current")
_VmapGroupNewCfgServerPortsTableEntry_Object = MibTableRow
vmapGroupNewCfgServerPortsTableEntry = _VmapGroupNewCfgServerPortsTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 2, 2, 2, 1)
)
vmapGroupNewCfgServerPortsTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vmapGroupNewCfgServerPortsGroupIdx"),
)
if mibBuilder.loadTexts:
    vmapGroupNewCfgServerPortsTableEntry.setStatus("current")
_VmapGroupNewCfgServerPortsGroupIdx_Type = Integer32
_VmapGroupNewCfgServerPortsGroupIdx_Object = MibTableColumn
vmapGroupNewCfgServerPortsGroupIdx = _VmapGroupNewCfgServerPortsGroupIdx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 2, 2, 2, 1, 1),
    _VmapGroupNewCfgServerPortsGroupIdx_Type()
)
vmapGroupNewCfgServerPortsGroupIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapGroupNewCfgServerPortsGroupIdx.setStatus("current")
_VmapGroupNewCfgServerPortsVmapBitmap_Type = OctetString
_VmapGroupNewCfgServerPortsVmapBitmap_Object = MibTableColumn
vmapGroupNewCfgServerPortsVmapBitmap = _VmapGroupNewCfgServerPortsVmapBitmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 2, 2, 2, 1, 2),
    _VmapGroupNewCfgServerPortsVmapBitmap_Type()
)
vmapGroupNewCfgServerPortsVmapBitmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapGroupNewCfgServerPortsVmapBitmap.setStatus("current")
_VmapGroupNewCfgServerPortsAddVmap_Type = Unsigned32
_VmapGroupNewCfgServerPortsAddVmap_Object = MibTableColumn
vmapGroupNewCfgServerPortsAddVmap = _VmapGroupNewCfgServerPortsAddVmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 2, 2, 2, 1, 3),
    _VmapGroupNewCfgServerPortsAddVmap_Type()
)
vmapGroupNewCfgServerPortsAddVmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapGroupNewCfgServerPortsAddVmap.setStatus("current")
_VmapGroupNewCfgServerPortsRemVmap_Type = Unsigned32
_VmapGroupNewCfgServerPortsRemVmap_Object = MibTableColumn
vmapGroupNewCfgServerPortsRemVmap = _VmapGroupNewCfgServerPortsRemVmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 2, 2, 2, 1, 4),
    _VmapGroupNewCfgServerPortsRemVmap_Type()
)
vmapGroupNewCfgServerPortsRemVmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapGroupNewCfgServerPortsRemVmap.setStatus("current")
_VmapGroupCfgAllPorts_ObjectIdentity = ObjectIdentity
vmapGroupCfgAllPorts = _VmapGroupCfgAllPorts_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 2, 3)
)
_VmapGroupCurCfgAllPortsTable_Object = MibTable
vmapGroupCurCfgAllPortsTable = _VmapGroupCurCfgAllPortsTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 2, 3, 1)
)
if mibBuilder.loadTexts:
    vmapGroupCurCfgAllPortsTable.setStatus("current")
_VmapGroupCurCfgAllPortsTableEntry_Object = MibTableRow
vmapGroupCurCfgAllPortsTableEntry = _VmapGroupCurCfgAllPortsTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 2, 3, 1, 1)
)
vmapGroupCurCfgAllPortsTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vmapGroupCurCfgAllPortsGroupIdx"),
)
if mibBuilder.loadTexts:
    vmapGroupCurCfgAllPortsTableEntry.setStatus("current")
_VmapGroupCurCfgAllPortsGroupIdx_Type = Integer32
_VmapGroupCurCfgAllPortsGroupIdx_Object = MibTableColumn
vmapGroupCurCfgAllPortsGroupIdx = _VmapGroupCurCfgAllPortsGroupIdx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 2, 3, 1, 1, 1),
    _VmapGroupCurCfgAllPortsGroupIdx_Type()
)
vmapGroupCurCfgAllPortsGroupIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapGroupCurCfgAllPortsGroupIdx.setStatus("current")
_VmapGroupCurCfgAllPortsVmapBitmap_Type = OctetString
_VmapGroupCurCfgAllPortsVmapBitmap_Object = MibTableColumn
vmapGroupCurCfgAllPortsVmapBitmap = _VmapGroupCurCfgAllPortsVmapBitmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 2, 3, 1, 1, 2),
    _VmapGroupCurCfgAllPortsVmapBitmap_Type()
)
vmapGroupCurCfgAllPortsVmapBitmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapGroupCurCfgAllPortsVmapBitmap.setStatus("current")
_VmapGroupNewCfgAllPortsTable_Object = MibTable
vmapGroupNewCfgAllPortsTable = _VmapGroupNewCfgAllPortsTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 2, 3, 2)
)
if mibBuilder.loadTexts:
    vmapGroupNewCfgAllPortsTable.setStatus("current")
_VmapGroupNewCfgAllPortsTableEntry_Object = MibTableRow
vmapGroupNewCfgAllPortsTableEntry = _VmapGroupNewCfgAllPortsTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 2, 3, 2, 1)
)
vmapGroupNewCfgAllPortsTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vmapGroupNewCfgAllPortsGroupIdx"),
)
if mibBuilder.loadTexts:
    vmapGroupNewCfgAllPortsTableEntry.setStatus("current")
_VmapGroupNewCfgAllPortsGroupIdx_Type = Integer32
_VmapGroupNewCfgAllPortsGroupIdx_Object = MibTableColumn
vmapGroupNewCfgAllPortsGroupIdx = _VmapGroupNewCfgAllPortsGroupIdx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 2, 3, 2, 1, 1),
    _VmapGroupNewCfgAllPortsGroupIdx_Type()
)
vmapGroupNewCfgAllPortsGroupIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapGroupNewCfgAllPortsGroupIdx.setStatus("current")
_VmapGroupNewCfgAllPortsVmapBitmap_Type = OctetString
_VmapGroupNewCfgAllPortsVmapBitmap_Object = MibTableColumn
vmapGroupNewCfgAllPortsVmapBitmap = _VmapGroupNewCfgAllPortsVmapBitmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 2, 3, 2, 1, 2),
    _VmapGroupNewCfgAllPortsVmapBitmap_Type()
)
vmapGroupNewCfgAllPortsVmapBitmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmapGroupNewCfgAllPortsVmapBitmap.setStatus("current")
_VmapGroupNewCfgAllPortsAddVmap_Type = Unsigned32
_VmapGroupNewCfgAllPortsAddVmap_Object = MibTableColumn
vmapGroupNewCfgAllPortsAddVmap = _VmapGroupNewCfgAllPortsAddVmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 2, 3, 2, 1, 3),
    _VmapGroupNewCfgAllPortsAddVmap_Type()
)
vmapGroupNewCfgAllPortsAddVmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapGroupNewCfgAllPortsAddVmap.setStatus("current")
_VmapGroupNewCfgAllPortsRemVmap_Type = Unsigned32
_VmapGroupNewCfgAllPortsRemVmap_Object = MibTableColumn
vmapGroupNewCfgAllPortsRemVmap = _VmapGroupNewCfgAllPortsRemVmap_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 9, 3, 2, 2, 3, 2, 1, 4),
    _VmapGroupNewCfgAllPortsRemVmap_Type()
)
vmapGroupNewCfgAllPortsRemVmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmapGroupNewCfgAllPortsRemVmap.setStatus("current")
_Cee_ObjectIdentity = ObjectIdentity
cee = _Cee_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 13)
)
_CeeConfig_ObjectIdentity = ObjectIdentity
ceeConfig = _CeeConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 13, 1)
)


class _CeeCurCfgState_Type(Integer32):
    """Custom type ceeCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_CeeCurCfgState_Type.__name__ = "Integer32"
_CeeCurCfgState_Object = MibScalar
ceeCurCfgState = _CeeCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 13, 1, 1),
    _CeeCurCfgState_Type()
)
ceeCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ceeCurCfgState.setStatus("current")


class _CeeNewCfgState_Type(Integer32):
    """Custom type ceeNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_CeeNewCfgState_Type.__name__ = "Integer32"
_CeeNewCfgState_Object = MibScalar
ceeNewCfgState = _CeeNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 13, 1, 2),
    _CeeNewCfgState_Type()
)
ceeNewCfgState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ceeNewCfgState.setStatus("current")
_Fcoe_ObjectIdentity = ObjectIdentity
fcoe = _Fcoe_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14)
)
_FcoeConfig_ObjectIdentity = ObjectIdentity
fcoeConfig = _FcoeConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 1)
)
_FipsCfg_ObjectIdentity = ObjectIdentity
fipsCfg = _FipsCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 1, 3)
)


class _FipsCurCfgState_Type(Integer32):
    """Custom type fipsCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_FipsCurCfgState_Type.__name__ = "Integer32"
_FipsCurCfgState_Object = MibScalar
fipsCurCfgState = _FipsCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 1, 3, 1),
    _FipsCurCfgState_Type()
)
fipsCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fipsCurCfgState.setStatus("current")


class _FipsNewCfgState_Type(Integer32):
    """Custom type fipsNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_FipsNewCfgState_Type.__name__ = "Integer32"
_FipsNewCfgState_Object = MibScalar
fipsNewCfgState = _FipsNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 1, 3, 2),
    _FipsNewCfgState_Type()
)
fipsNewCfgState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    fipsNewCfgState.setStatus("current")


class _FipsCurAclTimeout_Type(Integer32):
    """Custom type fipsCurAclTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_FipsCurAclTimeout_Type.__name__ = "Integer32"
_FipsCurAclTimeout_Object = MibScalar
fipsCurAclTimeout = _FipsCurAclTimeout_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 1, 3, 3),
    _FipsCurAclTimeout_Type()
)
fipsCurAclTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fipsCurAclTimeout.setStatus("current")


class _FipsNewAclTimeout_Type(Integer32):
    """Custom type fipsNewAclTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_FipsNewAclTimeout_Type.__name__ = "Integer32"
_FipsNewAclTimeout_Object = MibScalar
fipsNewAclTimeout = _FipsNewAclTimeout_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 1, 3, 4),
    _FipsNewAclTimeout_Type()
)
fipsNewAclTimeout.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    fipsNewAclTimeout.setStatus("current")


class _FipsCurAutoVlan_Type(Integer32):
    """Custom type fipsCurAutoVlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_FipsCurAutoVlan_Type.__name__ = "Integer32"
_FipsCurAutoVlan_Object = MibScalar
fipsCurAutoVlan = _FipsCurAutoVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 1, 3, 5),
    _FipsCurAutoVlan_Type()
)
fipsCurAutoVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fipsCurAutoVlan.setStatus("current")


class _FipsNewAutoVlan_Type(Integer32):
    """Custom type fipsNewAutoVlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_FipsNewAutoVlan_Type.__name__ = "Integer32"
_FipsNewAutoVlan_Object = MibScalar
fipsNewAutoVlan = _FipsNewAutoVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 1, 3, 6),
    _FipsNewAutoVlan_Type()
)
fipsNewAutoVlan.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    fipsNewAutoVlan.setStatus("current")
_FipsPortCurCfgTable_Object = MibTable
fipsPortCurCfgTable = _FipsPortCurCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 1, 3, 7)
)
if mibBuilder.loadTexts:
    fipsPortCurCfgTable.setStatus("current")
_FipsPortCurCfgEntry_Object = MibTableRow
fipsPortCurCfgEntry = _FipsPortCurCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 1, 3, 7, 1)
)
fipsPortCurCfgEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "fipsPortCurCfgIndex"),
)
if mibBuilder.loadTexts:
    fipsPortCurCfgEntry.setStatus("current")
_FipsPortCurCfgIndex_Type = PortNumber
_FipsPortCurCfgIndex_Object = MibTableColumn
fipsPortCurCfgIndex = _FipsPortCurCfgIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 1, 3, 7, 1, 1),
    _FipsPortCurCfgIndex_Type()
)
fipsPortCurCfgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fipsPortCurCfgIndex.setStatus("current")


class _FipsPortCurCfgFcfMode_Type(Integer32):
    """Custom type fipsPortCurCfgFcfMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("auto", 0),
          ("on", 1),
          ("off", 2))
    )


_FipsPortCurCfgFcfMode_Type.__name__ = "Integer32"
_FipsPortCurCfgFcfMode_Object = MibTableColumn
fipsPortCurCfgFcfMode = _FipsPortCurCfgFcfMode_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 1, 3, 7, 1, 2),
    _FipsPortCurCfgFcfMode_Type()
)
fipsPortCurCfgFcfMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fipsPortCurCfgFcfMode.setStatus("current")


class _FipsPortCurCfgFipsEna_Type(Integer32):
    """Custom type fipsPortCurCfgFipsEna based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_FipsPortCurCfgFipsEna_Type.__name__ = "Integer32"
_FipsPortCurCfgFipsEna_Object = MibTableColumn
fipsPortCurCfgFipsEna = _FipsPortCurCfgFipsEna_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 1, 3, 7, 1, 3),
    _FipsPortCurCfgFipsEna_Type()
)
fipsPortCurCfgFipsEna.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fipsPortCurCfgFipsEna.setStatus("current")
_FipsPortNewCfgTable_Object = MibTable
fipsPortNewCfgTable = _FipsPortNewCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 1, 3, 8)
)
if mibBuilder.loadTexts:
    fipsPortNewCfgTable.setStatus("current")
_FipsPortNewCfgEntry_Object = MibTableRow
fipsPortNewCfgEntry = _FipsPortNewCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 1, 3, 8, 1)
)
fipsPortNewCfgEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "fipsPortNewCfgIndex"),
)
if mibBuilder.loadTexts:
    fipsPortNewCfgEntry.setStatus("current")
_FipsPortNewCfgIndex_Type = PortNumber
_FipsPortNewCfgIndex_Object = MibTableColumn
fipsPortNewCfgIndex = _FipsPortNewCfgIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 1, 3, 8, 1, 1),
    _FipsPortNewCfgIndex_Type()
)
fipsPortNewCfgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fipsPortNewCfgIndex.setStatus("current")


class _FipsPortNewCfgFcfMode_Type(Integer32):
    """Custom type fipsPortNewCfgFcfMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("auto", 0),
          ("on", 1),
          ("off", 2))
    )


_FipsPortNewCfgFcfMode_Type.__name__ = "Integer32"
_FipsPortNewCfgFcfMode_Object = MibTableColumn
fipsPortNewCfgFcfMode = _FipsPortNewCfgFcfMode_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 1, 3, 8, 1, 2),
    _FipsPortNewCfgFcfMode_Type()
)
fipsPortNewCfgFcfMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    fipsPortNewCfgFcfMode.setStatus("current")


class _FipsPortNewCfgFipsEna_Type(Integer32):
    """Custom type fipsPortNewCfgFipsEna based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_FipsPortNewCfgFipsEna_Type.__name__ = "Integer32"
_FipsPortNewCfgFipsEna_Object = MibTableColumn
fipsPortNewCfgFipsEna = _FipsPortNewCfgFipsEna_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 1, 3, 8, 1, 3),
    _FipsPortNewCfgFipsEna_Type()
)
fipsPortNewCfgFipsEna.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    fipsPortNewCfgFipsEna.setStatus("current")
_FcoeStats_ObjectIdentity = ObjectIdentity
fcoeStats = _FcoeStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 2)
)
_FcoeStatsTable_Object = MibTable
fcoeStatsTable = _FcoeStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 2, 1)
)
if mibBuilder.loadTexts:
    fcoeStatsTable.setStatus("current")
_FcoeStatsEntry_Object = MibTableRow
fcoeStatsEntry = _FcoeStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 2, 1, 1)
)
fcoeStatsEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "fcoeStatsIndex"),
)
if mibBuilder.loadTexts:
    fcoeStatsEntry.setStatus("current")
_FcoeStatsIndex_Type = Integer32
_FcoeStatsIndex_Object = MibTableColumn
fcoeStatsIndex = _FcoeStatsIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 2, 1, 1, 1),
    _FcoeStatsIndex_Type()
)
fcoeStatsIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcoeStatsIndex.setStatus("current")
_FcoeStatsFcfAdded_Type = Integer32
_FcoeStatsFcfAdded_Object = MibTableColumn
fcoeStatsFcfAdded = _FcoeStatsFcfAdded_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 2, 1, 1, 2),
    _FcoeStatsFcfAdded_Type()
)
fcoeStatsFcfAdded.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcoeStatsFcfAdded.setStatus("current")
_FcoeStatsFcfRemoved_Type = Integer32
_FcoeStatsFcfRemoved_Object = MibTableColumn
fcoeStatsFcfRemoved = _FcoeStatsFcfRemoved_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 2, 1, 1, 3),
    _FcoeStatsFcfRemoved_Type()
)
fcoeStatsFcfRemoved.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcoeStatsFcfRemoved.setStatus("current")
_FcoeStatsFcoeAdded_Type = Integer32
_FcoeStatsFcoeAdded_Object = MibTableColumn
fcoeStatsFcoeAdded = _FcoeStatsFcoeAdded_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 2, 1, 1, 4),
    _FcoeStatsFcoeAdded_Type()
)
fcoeStatsFcoeAdded.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcoeStatsFcoeAdded.setStatus("current")
_FcoeStatsFcoeRemoved_Type = Integer32
_FcoeStatsFcoeRemoved_Object = MibTableColumn
fcoeStatsFcoeRemoved = _FcoeStatsFcoeRemoved_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 2, 1, 1, 5),
    _FcoeStatsFcoeRemoved_Type()
)
fcoeStatsFcoeRemoved.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcoeStatsFcoeRemoved.setStatus("current")
_FcoeStatsKeepAliveTable_Object = MibTable
fcoeStatsKeepAliveTable = _FcoeStatsKeepAliveTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 2, 2)
)
if mibBuilder.loadTexts:
    fcoeStatsKeepAliveTable.setStatus("current")
_FcoeStatsKeepAliveEntry_Object = MibTableRow
fcoeStatsKeepAliveEntry = _FcoeStatsKeepAliveEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 2, 2, 1)
)
fcoeStatsKeepAliveEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "fcoeStatsKeepAliveIndex"),
)
if mibBuilder.loadTexts:
    fcoeStatsKeepAliveEntry.setStatus("current")
_FcoeStatsKeepAliveIndex_Type = Integer32
_FcoeStatsKeepAliveIndex_Object = MibTableColumn
fcoeStatsKeepAliveIndex = _FcoeStatsKeepAliveIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 2, 2, 1, 1),
    _FcoeStatsKeepAliveIndex_Type()
)
fcoeStatsKeepAliveIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcoeStatsKeepAliveIndex.setStatus("current")
_FcoeStatsKeepAliveFcfMac_Type = DisplayString
_FcoeStatsKeepAliveFcfMac_Object = MibTableColumn
fcoeStatsKeepAliveFcfMac = _FcoeStatsKeepAliveFcfMac_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 2, 2, 1, 2),
    _FcoeStatsKeepAliveFcfMac_Type()
)
fcoeStatsKeepAliveFcfMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcoeStatsKeepAliveFcfMac.setStatus("current")
_FcoeStatsKeepAliveCount_Type = Integer32
_FcoeStatsKeepAliveCount_Object = MibTableColumn
fcoeStatsKeepAliveCount = _FcoeStatsKeepAliveCount_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 2, 2, 1, 3),
    _FcoeStatsKeepAliveCount_Type()
)
fcoeStatsKeepAliveCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcoeStatsKeepAliveCount.setStatus("current")


class _FcoeStatsResetAllCounters_Type(Integer32):
    """Custom type fcoeStatsResetAllCounters based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("reset", 1),
          ("others", 2))
    )


_FcoeStatsResetAllCounters_Type.__name__ = "Integer32"
_FcoeStatsResetAllCounters_Object = MibScalar
fcoeStatsResetAllCounters = _FcoeStatsResetAllCounters_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 2, 3),
    _FcoeStatsResetAllCounters_Type()
)
fcoeStatsResetAllCounters.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcoeStatsResetAllCounters.setStatus("current")
_FcoeInfo_ObjectIdentity = ObjectIdentity
fcoeInfo = _FcoeInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 3)
)
_FipsInfo_ObjectIdentity = ObjectIdentity
fipsInfo = _FipsInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 3, 1)
)
_FipsInfoPortTable_Object = MibTable
fipsInfoPortTable = _FipsInfoPortTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 3, 1, 1)
)
if mibBuilder.loadTexts:
    fipsInfoPortTable.setStatus("current")
_FipsInfoPortEntry_Object = MibTableRow
fipsInfoPortEntry = _FipsInfoPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 3, 1, 1, 1)
)
fipsInfoPortEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "fipsInfoPortIndex"),
    (0, "IBM-GbTOR-G8264T-MIB", "fipsInfoAclSequencer"),
)
if mibBuilder.loadTexts:
    fipsInfoPortEntry.setStatus("current")
_FipsInfoPortIndex_Type = PortNumber
_FipsInfoPortIndex_Object = MibTableColumn
fipsInfoPortIndex = _FipsInfoPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 3, 1, 1, 1, 1),
    _FipsInfoPortIndex_Type()
)
fipsInfoPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fipsInfoPortIndex.setStatus("current")
_FipsInfoAclSequencer_Type = Integer32
_FipsInfoAclSequencer_Object = MibTableColumn
fipsInfoAclSequencer = _FipsInfoAclSequencer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 3, 1, 1, 1, 2),
    _FipsInfoAclSequencer_Type()
)
fipsInfoAclSequencer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fipsInfoAclSequencer.setStatus("current")


class _FipsInfoAcl_Type(DisplayString):
    """Custom type fipsInfoAcl based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 31),
    )


_FipsInfoAcl_Type.__name__ = "DisplayString"
_FipsInfoAcl_Object = MibTableColumn
fipsInfoAcl = _FipsInfoAcl_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 3, 1, 1, 1, 3),
    _FipsInfoAcl_Type()
)
fipsInfoAcl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fipsInfoAcl.setStatus("current")
_FipsInfoFcf_ObjectIdentity = ObjectIdentity
fipsInfoFcf = _FipsInfoFcf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 3, 1, 2)
)
_FipsInfoFcfCount_Type = Integer32
_FipsInfoFcfCount_Object = MibScalar
fipsInfoFcfCount = _FipsInfoFcfCount_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 3, 1, 2, 1),
    _FipsInfoFcfCount_Type()
)
fipsInfoFcfCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fipsInfoFcfCount.setStatus("current")
_FipsInfoFcfTable_Object = MibTable
fipsInfoFcfTable = _FipsInfoFcfTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 3, 1, 2, 2)
)
if mibBuilder.loadTexts:
    fipsInfoFcfTable.setStatus("current")
_FipsInfoFcfEntry_Object = MibTableRow
fipsInfoFcfEntry = _FipsInfoFcfEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 3, 1, 2, 2, 1)
)
fipsInfoFcfEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "fipsInfoFcfIndex"),
)
if mibBuilder.loadTexts:
    fipsInfoFcfEntry.setStatus("current")
_FipsInfoFcfIndex_Type = Integer32
_FipsInfoFcfIndex_Object = MibTableColumn
fipsInfoFcfIndex = _FipsInfoFcfIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 3, 1, 2, 2, 1, 1),
    _FipsInfoFcfIndex_Type()
)
fipsInfoFcfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fipsInfoFcfIndex.setStatus("current")
_FipsInfoFcfMac_Type = DisplayString
_FipsInfoFcfMac_Object = MibTableColumn
fipsInfoFcfMac = _FipsInfoFcfMac_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 3, 1, 2, 2, 1, 2),
    _FipsInfoFcfMac_Type()
)
fipsInfoFcfMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fipsInfoFcfMac.setStatus("current")
_FipsInfoFcfPort_Type = DisplayString
_FipsInfoFcfPort_Object = MibTableColumn
fipsInfoFcfPort = _FipsInfoFcfPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 3, 1, 2, 2, 1, 3),
    _FipsInfoFcfPort_Type()
)
fipsInfoFcfPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fipsInfoFcfPort.setStatus("current")
_FipsInfoFcfVlan_Type = Integer32
_FipsInfoFcfVlan_Object = MibTableColumn
fipsInfoFcfVlan = _FipsInfoFcfVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 3, 1, 2, 2, 1, 4),
    _FipsInfoFcfVlan_Type()
)
fipsInfoFcfVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fipsInfoFcfVlan.setStatus("current")
_FipsInfoFcoe_ObjectIdentity = ObjectIdentity
fipsInfoFcoe = _FipsInfoFcoe_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 3, 1, 3)
)
_FipsInfoFcoeCount_Type = Integer32
_FipsInfoFcoeCount_Object = MibScalar
fipsInfoFcoeCount = _FipsInfoFcoeCount_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 3, 1, 3, 1),
    _FipsInfoFcoeCount_Type()
)
fipsInfoFcoeCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fipsInfoFcoeCount.setStatus("current")
_FipsInfoFcoeTable_Object = MibTable
fipsInfoFcoeTable = _FipsInfoFcoeTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 3, 1, 3, 2)
)
if mibBuilder.loadTexts:
    fipsInfoFcoeTable.setStatus("current")
_FipsInfoFcoeEntry_Object = MibTableRow
fipsInfoFcoeEntry = _FipsInfoFcoeEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 3, 1, 3, 2, 1)
)
fipsInfoFcoeEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "fipsInfoFcoeIndex"),
)
if mibBuilder.loadTexts:
    fipsInfoFcoeEntry.setStatus("current")
_FipsInfoFcoeIndex_Type = Integer32
_FipsInfoFcoeIndex_Object = MibTableColumn
fipsInfoFcoeIndex = _FipsInfoFcoeIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 3, 1, 3, 2, 1, 1),
    _FipsInfoFcoeIndex_Type()
)
fipsInfoFcoeIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fipsInfoFcoeIndex.setStatus("current")
_FipsInfoFcoeVNPortMac_Type = DisplayString
_FipsInfoFcoeVNPortMac_Object = MibTableColumn
fipsInfoFcoeVNPortMac = _FipsInfoFcoeVNPortMac_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 3, 1, 3, 2, 1, 2),
    _FipsInfoFcoeVNPortMac_Type()
)
fipsInfoFcoeVNPortMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fipsInfoFcoeVNPortMac.setStatus("current")
_FipsInfoFcoeFcfMac_Type = DisplayString
_FipsInfoFcoeFcfMac_Object = MibTableColumn
fipsInfoFcoeFcfMac = _FipsInfoFcoeFcfMac_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 3, 1, 3, 2, 1, 3),
    _FipsInfoFcoeFcfMac_Type()
)
fipsInfoFcoeFcfMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fipsInfoFcoeFcfMac.setStatus("current")
_FipsInfoFcoePort_Type = DisplayString
_FipsInfoFcoePort_Object = MibTableColumn
fipsInfoFcoePort = _FipsInfoFcoePort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 3, 1, 3, 2, 1, 4),
    _FipsInfoFcoePort_Type()
)
fipsInfoFcoePort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fipsInfoFcoePort.setStatus("current")
_FipsInfoFcoeVlan_Type = Integer32
_FipsInfoFcoeVlan_Object = MibTableColumn
fipsInfoFcoeVlan = _FipsInfoFcoeVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 3, 1, 3, 2, 1, 5),
    _FipsInfoFcoeVlan_Type()
)
fipsInfoFcoeVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fipsInfoFcoeVlan.setStatus("current")
_FipsInfoVlans_ObjectIdentity = ObjectIdentity
fipsInfoVlans = _FipsInfoVlans_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 3, 1, 4)
)
_FipsInfoVlansTable_Object = MibTable
fipsInfoVlansTable = _FipsInfoVlansTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 3, 1, 4, 1)
)
if mibBuilder.loadTexts:
    fipsInfoVlansTable.setStatus("current")
_FipsInfoVlansEntry_Object = MibTableRow
fipsInfoVlansEntry = _FipsInfoVlansEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 3, 1, 4, 1, 1)
)
fipsInfoVlansEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "fipsInfoVlansId"),
    (0, "IBM-GbTOR-G8264T-MIB", "fipsInfoVlansFeatureIndex"),
)
if mibBuilder.loadTexts:
    fipsInfoVlansEntry.setStatus("current")


class _FipsInfoVlansId_Type(Integer32):
    """Custom type fipsInfoVlansId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4095),
    )


_FipsInfoVlansId_Type.__name__ = "Integer32"
_FipsInfoVlansId_Object = MibTableColumn
fipsInfoVlansId = _FipsInfoVlansId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 3, 1, 4, 1, 1, 1),
    _FipsInfoVlansId_Type()
)
fipsInfoVlansId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fipsInfoVlansId.setStatus("current")


class _FipsInfoVlansFeatureIndex_Type(Integer32):
    """Custom type fipsInfoVlansFeatureIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 8),
    )


_FipsInfoVlansFeatureIndex_Type.__name__ = "Integer32"
_FipsInfoVlansFeatureIndex_Object = MibTableColumn
fipsInfoVlansFeatureIndex = _FipsInfoVlansFeatureIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 3, 1, 4, 1, 1, 2),
    _FipsInfoVlansFeatureIndex_Type()
)
fipsInfoVlansFeatureIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fipsInfoVlansFeatureIndex.setStatus("current")


class _FipsInfoVlansCreator_Type(DisplayString):
    """Custom type fipsInfoVlansCreator based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_FipsInfoVlansCreator_Type.__name__ = "DisplayString"
_FipsInfoVlansCreator_Object = MibTableColumn
fipsInfoVlansCreator = _FipsInfoVlansCreator_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 3, 1, 4, 1, 1, 3),
    _FipsInfoVlansCreator_Type()
)
fipsInfoVlansCreator.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fipsInfoVlansCreator.setStatus("current")
_FipsInfoVlansPorts_Type = OctetString
_FipsInfoVlansPorts_Object = MibTableColumn
fipsInfoVlansPorts = _FipsInfoVlansPorts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 3, 1, 4, 1, 1, 4),
    _FipsInfoVlansPorts_Type()
)
fipsInfoVlansPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fipsInfoVlansPorts.setStatus("current")
_FipsInfoVlansTrunks_Type = DisplayString
_FipsInfoVlansTrunks_Object = MibTableColumn
fipsInfoVlansTrunks = _FipsInfoVlansTrunks_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 3, 1, 4, 1, 1, 5),
    _FipsInfoVlansTrunks_Type()
)
fipsInfoVlansTrunks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fipsInfoVlansTrunks.setStatus("current")
_FcoeOper_ObjectIdentity = ObjectIdentity
fcoeOper = _FcoeOper_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 4)
)
_FipsOper_ObjectIdentity = ObjectIdentity
fipsOper = _FipsOper_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 4, 1)
)


class _FipsOperFcfDelete_Type(DisplayString):
    """Custom type fipsOperFcfDelete based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 31),
    )


_FipsOperFcfDelete_Type.__name__ = "DisplayString"
_FipsOperFcfDelete_Object = MibScalar
fipsOperFcfDelete = _FipsOperFcfDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 14, 4, 1, 1),
    _FipsOperFcfDelete_Type()
)
fipsOperFcfDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fipsOperFcfDelete.setStatus("current")
_Virt_ObjectIdentity = ObjectIdentity
virt = _Virt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15)
)
_VirtGeneral_ObjectIdentity = ObjectIdentity
virtGeneral = _VirtGeneral_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 1)
)


class _VirtCurCfgState_Type(Integer32):
    """Custom type virtCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VirtCurCfgState_Type.__name__ = "Integer32"
_VirtCurCfgState_Object = MibScalar
virtCurCfgState = _VirtCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 1, 1),
    _VirtCurCfgState_Type()
)
virtCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtCurCfgState.setStatus("current")


class _VirtNewCfgState_Type(Integer32):
    """Custom type virtNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VirtNewCfgState_Type.__name__ = "Integer32"
_VirtNewCfgState_Object = MibScalar
virtNewCfgState = _VirtNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 1, 2),
    _VirtNewCfgState_Type()
)
virtNewCfgState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    virtNewCfgState.setStatus("current")


class _VirtCurCfgHbPort_Type(Integer32):
    """Custom type virtCurCfgHbPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_VirtCurCfgHbPort_Type.__name__ = "Integer32"
_VirtCurCfgHbPort_Object = MibScalar
virtCurCfgHbPort = _VirtCurCfgHbPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 1, 3),
    _VirtCurCfgHbPort_Type()
)
virtCurCfgHbPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtCurCfgHbPort.setStatus("current")


class _VirtNewCfgHbPort_Type(Integer32):
    """Custom type virtNewCfgHbPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_VirtNewCfgHbPort_Type.__name__ = "Integer32"
_VirtNewCfgHbPort_Object = MibScalar
virtNewCfgHbPort = _VirtNewCfgHbPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 1, 4),
    _VirtNewCfgHbPort_Type()
)
virtNewCfgHbPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    virtNewCfgHbPort.setStatus("current")
_VirtCurCfgVirtCenterIp_Type = IpAddress
_VirtCurCfgVirtCenterIp_Object = MibScalar
virtCurCfgVirtCenterIp = _VirtCurCfgVirtCenterIp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 1, 5),
    _VirtCurCfgVirtCenterIp_Type()
)
virtCurCfgVirtCenterIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtCurCfgVirtCenterIp.setStatus("current")
_VirtNewCfgVirtCenterIp_Type = IpAddress
_VirtNewCfgVirtCenterIp_Object = MibScalar
virtNewCfgVirtCenterIp = _VirtNewCfgVirtCenterIp_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 1, 6),
    _VirtNewCfgVirtCenterIp_Type()
)
virtNewCfgVirtCenterIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    virtNewCfgVirtCenterIp.setStatus("current")


class _VirtCurCfgVirtCenterUser_Type(DisplayString):
    """Custom type virtCurCfgVirtCenterUser based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_VirtCurCfgVirtCenterUser_Type.__name__ = "DisplayString"
_VirtCurCfgVirtCenterUser_Object = MibScalar
virtCurCfgVirtCenterUser = _VirtCurCfgVirtCenterUser_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 1, 7),
    _VirtCurCfgVirtCenterUser_Type()
)
virtCurCfgVirtCenterUser.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtCurCfgVirtCenterUser.setStatus("current")


class _VirtNewCfgVirtCenterUser_Type(DisplayString):
    """Custom type virtNewCfgVirtCenterUser based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_VirtNewCfgVirtCenterUser_Type.__name__ = "DisplayString"
_VirtNewCfgVirtCenterUser_Object = MibScalar
virtNewCfgVirtCenterUser = _VirtNewCfgVirtCenterUser_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 1, 8),
    _VirtNewCfgVirtCenterUser_Type()
)
virtNewCfgVirtCenterUser.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    virtNewCfgVirtCenterUser.setStatus("current")


class _VirtCurCfgVirtCenterSSLAuth_Type(Integer32):
    """Custom type virtCurCfgVirtCenterSSLAuth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VirtCurCfgVirtCenterSSLAuth_Type.__name__ = "Integer32"
_VirtCurCfgVirtCenterSSLAuth_Object = MibScalar
virtCurCfgVirtCenterSSLAuth = _VirtCurCfgVirtCenterSSLAuth_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 1, 9),
    _VirtCurCfgVirtCenterSSLAuth_Type()
)
virtCurCfgVirtCenterSSLAuth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtCurCfgVirtCenterSSLAuth.setStatus("current")


class _VirtNewCfgVirtCenterSSLAuth_Type(Integer32):
    """Custom type virtNewCfgVirtCenterSSLAuth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VirtNewCfgVirtCenterSSLAuth_Type.__name__ = "Integer32"
_VirtNewCfgVirtCenterSSLAuth_Object = MibScalar
virtNewCfgVirtCenterSSLAuth = _VirtNewCfgVirtCenterSSLAuth_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 1, 10),
    _VirtNewCfgVirtCenterSSLAuth_Type()
)
virtNewCfgVirtCenterSSLAuth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    virtNewCfgVirtCenterSSLAuth.setStatus("current")


class _VirtNewCfgVirtCenterPasswd_Type(DisplayString):
    """Custom type virtNewCfgVirtCenterPasswd based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 129),
    )


_VirtNewCfgVirtCenterPasswd_Type.__name__ = "DisplayString"
_VirtNewCfgVirtCenterPasswd_Object = MibScalar
virtNewCfgVirtCenterPasswd = _VirtNewCfgVirtCenterPasswd_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 1, 11),
    _VirtNewCfgVirtCenterPasswd_Type()
)
virtNewCfgVirtCenterPasswd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    virtNewCfgVirtCenterPasswd.setStatus("current")


class _VirtNewCfgVirtCenterDelete_Type(Integer32):
    """Custom type virtNewCfgVirtCenterDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("delete", 2))
    )


_VirtNewCfgVirtCenterDelete_Type.__name__ = "Integer32"
_VirtNewCfgVirtCenterDelete_Object = MibScalar
virtNewCfgVirtCenterDelete = _VirtNewCfgVirtCenterDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 1, 12),
    _VirtNewCfgVirtCenterDelete_Type()
)
virtNewCfgVirtCenterDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    virtNewCfgVirtCenterDelete.setStatus("current")
_VmGroups_ObjectIdentity = ObjectIdentity
vmGroups = _VmGroups_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2)
)
_VmCurCfgGroupTable_Object = MibTable
vmCurCfgGroupTable = _VmCurCfgGroupTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 1)
)
if mibBuilder.loadTexts:
    vmCurCfgGroupTable.setStatus("current")
_VmCurCfgGroupEntry_Object = MibTableRow
vmCurCfgGroupEntry = _VmCurCfgGroupEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 1, 1)
)
vmCurCfgGroupEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vmCurCfgGroupIndex"),
)
if mibBuilder.loadTexts:
    vmCurCfgGroupEntry.setStatus("current")
_VmCurCfgGroupIndex_Type = Integer32
_VmCurCfgGroupIndex_Object = MibTableColumn
vmCurCfgGroupIndex = _VmCurCfgGroupIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 1, 1, 1),
    _VmCurCfgGroupIndex_Type()
)
vmCurCfgGroupIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmCurCfgGroupIndex.setStatus("current")
_VmCurCfgGroupVlan_Type = Integer32
_VmCurCfgGroupVlan_Object = MibTableColumn
vmCurCfgGroupVlan = _VmCurCfgGroupVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 1, 1, 2),
    _VmCurCfgGroupVlan_Type()
)
vmCurCfgGroupVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmCurCfgGroupVlan.setStatus("current")
_VmCurCfgGroupPorts_Type = OctetString
_VmCurCfgGroupPorts_Object = MibTableColumn
vmCurCfgGroupPorts = _VmCurCfgGroupPorts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 1, 1, 3),
    _VmCurCfgGroupPorts_Type()
)
vmCurCfgGroupPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmCurCfgGroupPorts.setStatus("current")


class _VmCurCfgGroupTagState_Type(Integer32):
    """Custom type vmCurCfgGroupTagState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_VmCurCfgGroupTagState_Type.__name__ = "Integer32"
_VmCurCfgGroupTagState_Object = MibTableColumn
vmCurCfgGroupTagState = _VmCurCfgGroupTagState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 1, 1, 4),
    _VmCurCfgGroupTagState_Type()
)
vmCurCfgGroupTagState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmCurCfgGroupTagState.setStatus("current")
_VmCurCfgGroupStg_Type = Integer32
_VmCurCfgGroupStg_Object = MibTableColumn
vmCurCfgGroupStg = _VmCurCfgGroupStg_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 1, 1, 5),
    _VmCurCfgGroupStg_Type()
)
vmCurCfgGroupStg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmCurCfgGroupStg.setStatus("current")


class _VmCurCfgGroupProfileName_Type(DisplayString):
    """Custom type vmCurCfgGroupProfileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_VmCurCfgGroupProfileName_Type.__name__ = "DisplayString"
_VmCurCfgGroupProfileName_Object = MibTableColumn
vmCurCfgGroupProfileName = _VmCurCfgGroupProfileName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 1, 1, 17),
    _VmCurCfgGroupProfileName_Type()
)
vmCurCfgGroupProfileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmCurCfgGroupProfileName.setStatus("current")
_VmCurCfgGroupValidateMode_Type = Integer32
_VmCurCfgGroupValidateMode_Object = MibTableColumn
vmCurCfgGroupValidateMode = _VmCurCfgGroupValidateMode_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 1, 1, 18),
    _VmCurCfgGroupValidateMode_Type()
)
vmCurCfgGroupValidateMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmCurCfgGroupValidateMode.setStatus("current")
_VmNewCfgGroupTable_Object = MibTable
vmNewCfgGroupTable = _VmNewCfgGroupTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 2)
)
if mibBuilder.loadTexts:
    vmNewCfgGroupTable.setStatus("current")
_VmNewCfgGroupEntry_Object = MibTableRow
vmNewCfgGroupEntry = _VmNewCfgGroupEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 2, 1)
)
vmNewCfgGroupEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vmNewCfgGroupIndex"),
)
if mibBuilder.loadTexts:
    vmNewCfgGroupEntry.setStatus("current")
_VmNewCfgGroupIndex_Type = Integer32
_VmNewCfgGroupIndex_Object = MibTableColumn
vmNewCfgGroupIndex = _VmNewCfgGroupIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 2, 1, 1),
    _VmNewCfgGroupIndex_Type()
)
vmNewCfgGroupIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmNewCfgGroupIndex.setStatus("current")
_VmNewCfgGroupVlan_Type = Integer32
_VmNewCfgGroupVlan_Object = MibTableColumn
vmNewCfgGroupVlan = _VmNewCfgGroupVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 2, 1, 2),
    _VmNewCfgGroupVlan_Type()
)
vmNewCfgGroupVlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmNewCfgGroupVlan.setStatus("current")
_VmNewCfgGroupPorts_Type = OctetString
_VmNewCfgGroupPorts_Object = MibTableColumn
vmNewCfgGroupPorts = _VmNewCfgGroupPorts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 2, 1, 3),
    _VmNewCfgGroupPorts_Type()
)
vmNewCfgGroupPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmNewCfgGroupPorts.setStatus("current")
_VmNewCfgGroupAddVm_Type = DisplayString
_VmNewCfgGroupAddVm_Object = MibTableColumn
vmNewCfgGroupAddVm = _VmNewCfgGroupAddVm_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 2, 1, 4),
    _VmNewCfgGroupAddVm_Type()
)
vmNewCfgGroupAddVm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmNewCfgGroupAddVm.setStatus("current")
_VmNewCfgGroupRemVm_Type = DisplayString
_VmNewCfgGroupRemVm_Object = MibTableColumn
vmNewCfgGroupRemVm = _VmNewCfgGroupRemVm_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 2, 1, 5),
    _VmNewCfgGroupRemVm_Type()
)
vmNewCfgGroupRemVm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmNewCfgGroupRemVm.setStatus("current")
_VmNewCfgGroupAddVmIdx_Type = Integer32
_VmNewCfgGroupAddVmIdx_Object = MibTableColumn
vmNewCfgGroupAddVmIdx = _VmNewCfgGroupAddVmIdx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 2, 1, 6),
    _VmNewCfgGroupAddVmIdx_Type()
)
vmNewCfgGroupAddVmIdx.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmNewCfgGroupAddVmIdx.setStatus("current")
_VmNewCfgGroupRemVmIdx_Type = Integer32
_VmNewCfgGroupRemVmIdx_Object = MibTableColumn
vmNewCfgGroupRemVmIdx = _VmNewCfgGroupRemVmIdx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 2, 1, 7),
    _VmNewCfgGroupRemVmIdx_Type()
)
vmNewCfgGroupRemVmIdx.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmNewCfgGroupRemVmIdx.setStatus("current")
_VmNewCfgGroupAddPort_Type = PortNumber
_VmNewCfgGroupAddPort_Object = MibTableColumn
vmNewCfgGroupAddPort = _VmNewCfgGroupAddPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 2, 1, 8),
    _VmNewCfgGroupAddPort_Type()
)
vmNewCfgGroupAddPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmNewCfgGroupAddPort.setStatus("current")
_VmNewCfgGroupRemPort_Type = PortNumber
_VmNewCfgGroupRemPort_Object = MibTableColumn
vmNewCfgGroupRemPort = _VmNewCfgGroupRemPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 2, 1, 9),
    _VmNewCfgGroupRemPort_Type()
)
vmNewCfgGroupRemPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmNewCfgGroupRemPort.setStatus("current")
_VmNewCfgGroupAddTrunk_Type = Integer32
_VmNewCfgGroupAddTrunk_Object = MibTableColumn
vmNewCfgGroupAddTrunk = _VmNewCfgGroupAddTrunk_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 2, 1, 10),
    _VmNewCfgGroupAddTrunk_Type()
)
vmNewCfgGroupAddTrunk.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmNewCfgGroupAddTrunk.setStatus("current")
_VmNewCfgGroupRemTrunk_Type = Integer32
_VmNewCfgGroupRemTrunk_Object = MibTableColumn
vmNewCfgGroupRemTrunk = _VmNewCfgGroupRemTrunk_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 2, 1, 11),
    _VmNewCfgGroupRemTrunk_Type()
)
vmNewCfgGroupRemTrunk.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmNewCfgGroupRemTrunk.setStatus("current")


class _VmNewCfgGroupTagState_Type(Integer32):
    """Custom type vmNewCfgGroupTagState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_VmNewCfgGroupTagState_Type.__name__ = "Integer32"
_VmNewCfgGroupTagState_Object = MibTableColumn
vmNewCfgGroupTagState = _VmNewCfgGroupTagState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 2, 1, 12),
    _VmNewCfgGroupTagState_Type()
)
vmNewCfgGroupTagState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmNewCfgGroupTagState.setStatus("current")


class _VmNewCfgGroupAddLacpKey_Type(Unsigned32):
    """Custom type vmNewCfgGroupAddLacpKey based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_VmNewCfgGroupAddLacpKey_Type.__name__ = "Unsigned32"
_VmNewCfgGroupAddLacpKey_Object = MibTableColumn
vmNewCfgGroupAddLacpKey = _VmNewCfgGroupAddLacpKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 2, 1, 13),
    _VmNewCfgGroupAddLacpKey_Type()
)
vmNewCfgGroupAddLacpKey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmNewCfgGroupAddLacpKey.setStatus("current")


class _VmNewCfgGroupRemLacpKey_Type(Unsigned32):
    """Custom type vmNewCfgGroupRemLacpKey based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_VmNewCfgGroupRemLacpKey_Type.__name__ = "Unsigned32"
_VmNewCfgGroupRemLacpKey_Object = MibTableColumn
vmNewCfgGroupRemLacpKey = _VmNewCfgGroupRemLacpKey_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 2, 1, 14),
    _VmNewCfgGroupRemLacpKey_Type()
)
vmNewCfgGroupRemLacpKey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmNewCfgGroupRemLacpKey.setStatus("current")


class _VmNewCfgGroupAddProfile_Type(DisplayString):
    """Custom type vmNewCfgGroupAddProfile based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_VmNewCfgGroupAddProfile_Type.__name__ = "DisplayString"
_VmNewCfgGroupAddProfile_Object = MibTableColumn
vmNewCfgGroupAddProfile = _VmNewCfgGroupAddProfile_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 2, 1, 15),
    _VmNewCfgGroupAddProfile_Type()
)
vmNewCfgGroupAddProfile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmNewCfgGroupAddProfile.setStatus("current")


class _VmNewCfgGroupRemProfile_Type(Integer32):
    """Custom type vmNewCfgGroupRemProfile based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("remove", 1)
    )


_VmNewCfgGroupRemProfile_Type.__name__ = "Integer32"
_VmNewCfgGroupRemProfile_Object = MibTableColumn
vmNewCfgGroupRemProfile = _VmNewCfgGroupRemProfile_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 2, 1, 16),
    _VmNewCfgGroupRemProfile_Type()
)
vmNewCfgGroupRemProfile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmNewCfgGroupRemProfile.setStatus("current")


class _VmNewCfgGroupProfileName_Type(DisplayString):
    """Custom type vmNewCfgGroupProfileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_VmNewCfgGroupProfileName_Type.__name__ = "DisplayString"
_VmNewCfgGroupProfileName_Object = MibTableColumn
vmNewCfgGroupProfileName = _VmNewCfgGroupProfileName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 2, 1, 17),
    _VmNewCfgGroupProfileName_Type()
)
vmNewCfgGroupProfileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmNewCfgGroupProfileName.setStatus("current")


class _VmNewCfgGroupDelete_Type(Integer32):
    """Custom type vmNewCfgGroupDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("delete", 1)
    )


_VmNewCfgGroupDelete_Type.__name__ = "Integer32"
_VmNewCfgGroupDelete_Object = MibTableColumn
vmNewCfgGroupDelete = _VmNewCfgGroupDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 2, 1, 18),
    _VmNewCfgGroupDelete_Type()
)
vmNewCfgGroupDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmNewCfgGroupDelete.setStatus("current")
_VmNewCfgGroupStg_Type = Integer32
_VmNewCfgGroupStg_Object = MibTableColumn
vmNewCfgGroupStg = _VmNewCfgGroupStg_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 2, 1, 19),
    _VmNewCfgGroupStg_Type()
)
vmNewCfgGroupStg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmNewCfgGroupStg.setStatus("current")


class _VmNewCfgGroupValidateMode_Type(Integer32):
    """Custom type vmNewCfgGroupValidateMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noValidation", 0),
          ("basicCheck", 1),
          ("advancedCheck", 2))
    )


_VmNewCfgGroupValidateMode_Type.__name__ = "Integer32"
_VmNewCfgGroupValidateMode_Object = MibTableColumn
vmNewCfgGroupValidateMode = _VmNewCfgGroupValidateMode_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 2, 1, 20),
    _VmNewCfgGroupValidateMode_Type()
)
vmNewCfgGroupValidateMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmNewCfgGroupValidateMode.setStatus("current")
_VmCurCfgGroupMacTable_Object = MibTable
vmCurCfgGroupMacTable = _VmCurCfgGroupMacTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 3)
)
if mibBuilder.loadTexts:
    vmCurCfgGroupMacTable.setStatus("current")
_VmCurCfgGroupMaclistEntry_Object = MibTableRow
vmCurCfgGroupMaclistEntry = _VmCurCfgGroupMaclistEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 3, 1)
)
vmCurCfgGroupMaclistEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vmCurCfgGroupMacGroupIndex"),
    (0, "IBM-GbTOR-G8264T-MIB", "vmCurCfgGroupMacVMIndex"),
)
if mibBuilder.loadTexts:
    vmCurCfgGroupMaclistEntry.setStatus("current")
_VmCurCfgGroupMacGroupIndex_Type = Unsigned32
_VmCurCfgGroupMacGroupIndex_Object = MibTableColumn
vmCurCfgGroupMacGroupIndex = _VmCurCfgGroupMacGroupIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 3, 1, 1),
    _VmCurCfgGroupMacGroupIndex_Type()
)
vmCurCfgGroupMacGroupIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmCurCfgGroupMacGroupIndex.setStatus("current")
_VmCurCfgGroupMacVMIndex_Type = Unsigned32
_VmCurCfgGroupMacVMIndex_Object = MibTableColumn
vmCurCfgGroupMacVMIndex = _VmCurCfgGroupMacVMIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 3, 1, 2),
    _VmCurCfgGroupMacVMIndex_Type()
)
vmCurCfgGroupMacVMIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmCurCfgGroupMacVMIndex.setStatus("current")
_VmCurCfgGroupMacVMMac_Type = PhysAddress
_VmCurCfgGroupMacVMMac_Object = MibTableColumn
vmCurCfgGroupMacVMMac = _VmCurCfgGroupMacVMMac_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 3, 1, 3),
    _VmCurCfgGroupMacVMMac_Type()
)
vmCurCfgGroupMacVMMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmCurCfgGroupMacVMMac.setStatus("current")
_VmNewCfgGroupMacTable_Object = MibTable
vmNewCfgGroupMacTable = _VmNewCfgGroupMacTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 4)
)
if mibBuilder.loadTexts:
    vmNewCfgGroupMacTable.setStatus("current")
_VmNewCfgGroupMaclistEntry_Object = MibTableRow
vmNewCfgGroupMaclistEntry = _VmNewCfgGroupMaclistEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 4, 1)
)
vmNewCfgGroupMaclistEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vmNewCfgGroupMacGroupIndex"),
    (0, "IBM-GbTOR-G8264T-MIB", "vmNewCfgGroupMacVMIndex"),
)
if mibBuilder.loadTexts:
    vmNewCfgGroupMaclistEntry.setStatus("current")
_VmNewCfgGroupMacGroupIndex_Type = Unsigned32
_VmNewCfgGroupMacGroupIndex_Object = MibTableColumn
vmNewCfgGroupMacGroupIndex = _VmNewCfgGroupMacGroupIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 4, 1, 1),
    _VmNewCfgGroupMacGroupIndex_Type()
)
vmNewCfgGroupMacGroupIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmNewCfgGroupMacGroupIndex.setStatus("current")
_VmNewCfgGroupMacVMIndex_Type = Unsigned32
_VmNewCfgGroupMacVMIndex_Object = MibTableColumn
vmNewCfgGroupMacVMIndex = _VmNewCfgGroupMacVMIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 4, 1, 2),
    _VmNewCfgGroupMacVMIndex_Type()
)
vmNewCfgGroupMacVMIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmNewCfgGroupMacVMIndex.setStatus("current")
_VmNewCfgGroupMacVMMac_Type = PhysAddress
_VmNewCfgGroupMacVMMac_Object = MibTableColumn
vmNewCfgGroupMacVMMac = _VmNewCfgGroupMacVMMac_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 2, 4, 1, 3),
    _VmNewCfgGroupMacVMMac_Type()
)
vmNewCfgGroupMacVMMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmNewCfgGroupMacVMMac.setStatus("current")
_VmPolicy_ObjectIdentity = ObjectIdentity
vmPolicy = _VmPolicy_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 3)
)
_Vmbw_ObjectIdentity = ObjectIdentity
vmbw = _Vmbw_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 3, 1)
)
_VmbwCurCfgTable_Object = MibTable
vmbwCurCfgTable = _VmbwCurCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 3, 1, 1)
)
if mibBuilder.loadTexts:
    vmbwCurCfgTable.setStatus("current")
_VmbwCurCfgEntry_Object = MibTableRow
vmbwCurCfgEntry = _VmbwCurCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 3, 1, 1, 1)
)
vmbwCurCfgEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vmbwCurCfgMac"),
)
if mibBuilder.loadTexts:
    vmbwCurCfgEntry.setStatus("current")
_VmbwCurCfgMac_Type = MacAddress
_VmbwCurCfgMac_Object = MibTableColumn
vmbwCurCfgMac = _VmbwCurCfgMac_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 3, 1, 1, 1, 1),
    _VmbwCurCfgMac_Type()
)
vmbwCurCfgMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmbwCurCfgMac.setStatus("current")
_VmbwCurCfgTxRate_Type = Unsigned32
_VmbwCurCfgTxRate_Object = MibTableColumn
vmbwCurCfgTxRate = _VmbwCurCfgTxRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 3, 1, 1, 1, 2),
    _VmbwCurCfgTxRate_Type()
)
vmbwCurCfgTxRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmbwCurCfgTxRate.setStatus("current")
_VmbwCurCfgTxBurst_Type = Unsigned32
_VmbwCurCfgTxBurst_Object = MibTableColumn
vmbwCurCfgTxBurst = _VmbwCurCfgTxBurst_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 3, 1, 1, 1, 3),
    _VmbwCurCfgTxBurst_Type()
)
vmbwCurCfgTxBurst.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmbwCurCfgTxBurst.setStatus("current")
_VmbwCurCfgTxAclId_Type = Unsigned32
_VmbwCurCfgTxAclId_Object = MibTableColumn
vmbwCurCfgTxAclId = _VmbwCurCfgTxAclId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 3, 1, 1, 1, 4),
    _VmbwCurCfgTxAclId_Type()
)
vmbwCurCfgTxAclId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmbwCurCfgTxAclId.setStatus("current")
_VmbwCurCfgRxRate_Type = Unsigned32
_VmbwCurCfgRxRate_Object = MibTableColumn
vmbwCurCfgRxRate = _VmbwCurCfgRxRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 3, 1, 1, 1, 5),
    _VmbwCurCfgRxRate_Type()
)
vmbwCurCfgRxRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmbwCurCfgRxRate.setStatus("current")
_VmbwCurCfgRxBurst_Type = Unsigned32
_VmbwCurCfgRxBurst_Object = MibTableColumn
vmbwCurCfgRxBurst = _VmbwCurCfgRxBurst_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 3, 1, 1, 1, 6),
    _VmbwCurCfgRxBurst_Type()
)
vmbwCurCfgRxBurst.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmbwCurCfgRxBurst.setStatus("current")


class _VmbwCurCfgCtrl_Type(Integer32):
    """Custom type vmbwCurCfgCtrl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VmbwCurCfgCtrl_Type.__name__ = "Integer32"
_VmbwCurCfgCtrl_Object = MibTableColumn
vmbwCurCfgCtrl = _VmbwCurCfgCtrl_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 3, 1, 1, 1, 7),
    _VmbwCurCfgCtrl_Type()
)
vmbwCurCfgCtrl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmbwCurCfgCtrl.setStatus("current")
_VmbwNewCfgTable_Object = MibTable
vmbwNewCfgTable = _VmbwNewCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 3, 1, 2)
)
if mibBuilder.loadTexts:
    vmbwNewCfgTable.setStatus("current")
_VmbwNewCfgEntry_Object = MibTableRow
vmbwNewCfgEntry = _VmbwNewCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 3, 1, 2, 1)
)
vmbwNewCfgEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vmbwNewCfgMac"),
)
if mibBuilder.loadTexts:
    vmbwNewCfgEntry.setStatus("current")
_VmbwNewCfgMac_Type = MacAddress
_VmbwNewCfgMac_Object = MibTableColumn
vmbwNewCfgMac = _VmbwNewCfgMac_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 3, 1, 2, 1, 1),
    _VmbwNewCfgMac_Type()
)
vmbwNewCfgMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmbwNewCfgMac.setStatus("current")
_VmbwNewCfgTxRate_Type = Unsigned32
_VmbwNewCfgTxRate_Object = MibTableColumn
vmbwNewCfgTxRate = _VmbwNewCfgTxRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 3, 1, 2, 1, 2),
    _VmbwNewCfgTxRate_Type()
)
vmbwNewCfgTxRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmbwNewCfgTxRate.setStatus("current")
_VmbwNewCfgTxBurst_Type = Unsigned32
_VmbwNewCfgTxBurst_Object = MibTableColumn
vmbwNewCfgTxBurst = _VmbwNewCfgTxBurst_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 3, 1, 2, 1, 3),
    _VmbwNewCfgTxBurst_Type()
)
vmbwNewCfgTxBurst.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmbwNewCfgTxBurst.setStatus("current")
_VmbwNewCfgTxAclId_Type = Unsigned32
_VmbwNewCfgTxAclId_Object = MibTableColumn
vmbwNewCfgTxAclId = _VmbwNewCfgTxAclId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 3, 1, 2, 1, 4),
    _VmbwNewCfgTxAclId_Type()
)
vmbwNewCfgTxAclId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmbwNewCfgTxAclId.setStatus("current")
_VmbwNewCfgRxRate_Type = Unsigned32
_VmbwNewCfgRxRate_Object = MibTableColumn
vmbwNewCfgRxRate = _VmbwNewCfgRxRate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 3, 1, 2, 1, 5),
    _VmbwNewCfgRxRate_Type()
)
vmbwNewCfgRxRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmbwNewCfgRxRate.setStatus("current")
_VmbwNewCfgRxBurst_Type = Unsigned32
_VmbwNewCfgRxBurst_Object = MibTableColumn
vmbwNewCfgRxBurst = _VmbwNewCfgRxBurst_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 3, 1, 2, 1, 6),
    _VmbwNewCfgRxBurst_Type()
)
vmbwNewCfgRxBurst.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmbwNewCfgRxBurst.setStatus("current")


class _VmbwNewCfgCtrl_Type(Integer32):
    """Custom type vmbwNewCfgCtrl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VmbwNewCfgCtrl_Type.__name__ = "Integer32"
_VmbwNewCfgCtrl_Object = MibTableColumn
vmbwNewCfgCtrl = _VmbwNewCfgCtrl_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 3, 1, 2, 1, 7),
    _VmbwNewCfgCtrl_Type()
)
vmbwNewCfgCtrl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmbwNewCfgCtrl.setStatus("current")


class _VmbwNewCfgDelete_Type(Integer32):
    """Custom type vmbwNewCfgDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_VmbwNewCfgDelete_Type.__name__ = "Integer32"
_VmbwNewCfgDelete_Object = MibTableColumn
vmbwNewCfgDelete = _VmbwNewCfgDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 3, 1, 2, 1, 8),
    _VmbwNewCfgDelete_Type()
)
vmbwNewCfgDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmbwNewCfgDelete.setStatus("current")
_VmProfiles_ObjectIdentity = ObjectIdentity
vmProfiles = _VmProfiles_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 4)
)
_VmCurCfgProfilesTable_Object = MibTable
vmCurCfgProfilesTable = _VmCurCfgProfilesTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 4, 1)
)
if mibBuilder.loadTexts:
    vmCurCfgProfilesTable.setStatus("current")
_VmCurCfgProfileEntry_Object = MibTableRow
vmCurCfgProfileEntry = _VmCurCfgProfileEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 4, 1, 1)
)
vmCurCfgProfileEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vmCurCfgProfileIndex"),
)
if mibBuilder.loadTexts:
    vmCurCfgProfileEntry.setStatus("current")
_VmCurCfgProfileIndex_Type = Integer32
_VmCurCfgProfileIndex_Object = MibTableColumn
vmCurCfgProfileIndex = _VmCurCfgProfileIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 4, 1, 1, 1),
    _VmCurCfgProfileIndex_Type()
)
vmCurCfgProfileIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmCurCfgProfileIndex.setStatus("current")


class _VmCurCfgProfileName_Type(DisplayString):
    """Custom type vmCurCfgProfileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_VmCurCfgProfileName_Type.__name__ = "DisplayString"
_VmCurCfgProfileName_Object = MibTableColumn
vmCurCfgProfileName = _VmCurCfgProfileName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 4, 1, 1, 2),
    _VmCurCfgProfileName_Type()
)
vmCurCfgProfileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmCurCfgProfileName.setStatus("current")
_VmCurCfgProfileVlan_Type = Integer32
_VmCurCfgProfileVlan_Object = MibTableColumn
vmCurCfgProfileVlan = _VmCurCfgProfileVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 4, 1, 1, 3),
    _VmCurCfgProfileVlan_Type()
)
vmCurCfgProfileVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmCurCfgProfileVlan.setStatus("current")
_VmCurCfgProfileShapingAverage_Type = Integer32
_VmCurCfgProfileShapingAverage_Object = MibTableColumn
vmCurCfgProfileShapingAverage = _VmCurCfgProfileShapingAverage_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 4, 1, 1, 4),
    _VmCurCfgProfileShapingAverage_Type()
)
vmCurCfgProfileShapingAverage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmCurCfgProfileShapingAverage.setStatus("current")
_VmCurCfgProfileShapingBurst_Type = Integer32
_VmCurCfgProfileShapingBurst_Object = MibTableColumn
vmCurCfgProfileShapingBurst = _VmCurCfgProfileShapingBurst_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 4, 1, 1, 5),
    _VmCurCfgProfileShapingBurst_Type()
)
vmCurCfgProfileShapingBurst.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmCurCfgProfileShapingBurst.setStatus("current")
_VmCurCfgProfileShapingPeak_Type = Integer32
_VmCurCfgProfileShapingPeak_Object = MibTableColumn
vmCurCfgProfileShapingPeak = _VmCurCfgProfileShapingPeak_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 4, 1, 1, 6),
    _VmCurCfgProfileShapingPeak_Type()
)
vmCurCfgProfileShapingPeak.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmCurCfgProfileShapingPeak.setStatus("current")
_VmCurCfgProfileEgressShapingAverage_Type = Integer32
_VmCurCfgProfileEgressShapingAverage_Object = MibTableColumn
vmCurCfgProfileEgressShapingAverage = _VmCurCfgProfileEgressShapingAverage_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 4, 1, 1, 7),
    _VmCurCfgProfileEgressShapingAverage_Type()
)
vmCurCfgProfileEgressShapingAverage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmCurCfgProfileEgressShapingAverage.setStatus("current")
_VmCurCfgProfileEgressShapingBurst_Type = Integer32
_VmCurCfgProfileEgressShapingBurst_Object = MibTableColumn
vmCurCfgProfileEgressShapingBurst = _VmCurCfgProfileEgressShapingBurst_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 4, 1, 1, 8),
    _VmCurCfgProfileEgressShapingBurst_Type()
)
vmCurCfgProfileEgressShapingBurst.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmCurCfgProfileEgressShapingBurst.setStatus("current")
_VmCurCfgProfileEgressShapingPeak_Type = Integer32
_VmCurCfgProfileEgressShapingPeak_Object = MibTableColumn
vmCurCfgProfileEgressShapingPeak = _VmCurCfgProfileEgressShapingPeak_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 4, 1, 1, 9),
    _VmCurCfgProfileEgressShapingPeak_Type()
)
vmCurCfgProfileEgressShapingPeak.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmCurCfgProfileEgressShapingPeak.setStatus("current")
_VmNewCfgProfilesTable_Object = MibTable
vmNewCfgProfilesTable = _VmNewCfgProfilesTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 4, 2)
)
if mibBuilder.loadTexts:
    vmNewCfgProfilesTable.setStatus("current")
_VmNewCfgProfileEntry_Object = MibTableRow
vmNewCfgProfileEntry = _VmNewCfgProfileEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 4, 2, 1)
)
vmNewCfgProfileEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vmNewCfgProfileIndex"),
)
if mibBuilder.loadTexts:
    vmNewCfgProfileEntry.setStatus("current")
_VmNewCfgProfileIndex_Type = Integer32
_VmNewCfgProfileIndex_Object = MibTableColumn
vmNewCfgProfileIndex = _VmNewCfgProfileIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 4, 2, 1, 1),
    _VmNewCfgProfileIndex_Type()
)
vmNewCfgProfileIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmNewCfgProfileIndex.setStatus("current")


class _VmNewCfgProfileName_Type(DisplayString):
    """Custom type vmNewCfgProfileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 39),
    )


_VmNewCfgProfileName_Type.__name__ = "DisplayString"
_VmNewCfgProfileName_Object = MibTableColumn
vmNewCfgProfileName = _VmNewCfgProfileName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 4, 2, 1, 2),
    _VmNewCfgProfileName_Type()
)
vmNewCfgProfileName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmNewCfgProfileName.setStatus("current")
_VmNewCfgProfileVlan_Type = Integer32
_VmNewCfgProfileVlan_Object = MibTableColumn
vmNewCfgProfileVlan = _VmNewCfgProfileVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 4, 2, 1, 3),
    _VmNewCfgProfileVlan_Type()
)
vmNewCfgProfileVlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmNewCfgProfileVlan.setStatus("current")
_VmNewCfgProfileShapingAverage_Type = Integer32
_VmNewCfgProfileShapingAverage_Object = MibTableColumn
vmNewCfgProfileShapingAverage = _VmNewCfgProfileShapingAverage_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 4, 2, 1, 4),
    _VmNewCfgProfileShapingAverage_Type()
)
vmNewCfgProfileShapingAverage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmNewCfgProfileShapingAverage.setStatus("current")
_VmNewCfgProfileShapingBurst_Type = Integer32
_VmNewCfgProfileShapingBurst_Object = MibTableColumn
vmNewCfgProfileShapingBurst = _VmNewCfgProfileShapingBurst_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 4, 2, 1, 5),
    _VmNewCfgProfileShapingBurst_Type()
)
vmNewCfgProfileShapingBurst.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmNewCfgProfileShapingBurst.setStatus("current")
_VmNewCfgProfileShapingPeak_Type = Integer32
_VmNewCfgProfileShapingPeak_Object = MibTableColumn
vmNewCfgProfileShapingPeak = _VmNewCfgProfileShapingPeak_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 4, 2, 1, 6),
    _VmNewCfgProfileShapingPeak_Type()
)
vmNewCfgProfileShapingPeak.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmNewCfgProfileShapingPeak.setStatus("current")


class _VmNewCfgProfileDelete_Type(Integer32):
    """Custom type vmNewCfgProfileDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("delete", 2))
    )


_VmNewCfgProfileDelete_Type.__name__ = "Integer32"
_VmNewCfgProfileDelete_Object = MibTableColumn
vmNewCfgProfileDelete = _VmNewCfgProfileDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 4, 2, 1, 7),
    _VmNewCfgProfileDelete_Type()
)
vmNewCfgProfileDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmNewCfgProfileDelete.setStatus("current")
_VmNewCfgProfileEgressShapingAverage_Type = Integer32
_VmNewCfgProfileEgressShapingAverage_Object = MibTableColumn
vmNewCfgProfileEgressShapingAverage = _VmNewCfgProfileEgressShapingAverage_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 4, 2, 1, 8),
    _VmNewCfgProfileEgressShapingAverage_Type()
)
vmNewCfgProfileEgressShapingAverage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmNewCfgProfileEgressShapingAverage.setStatus("current")
_VmNewCfgProfileEgressShapingBurst_Type = Integer32
_VmNewCfgProfileEgressShapingBurst_Object = MibTableColumn
vmNewCfgProfileEgressShapingBurst = _VmNewCfgProfileEgressShapingBurst_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 4, 2, 1, 9),
    _VmNewCfgProfileEgressShapingBurst_Type()
)
vmNewCfgProfileEgressShapingBurst.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmNewCfgProfileEgressShapingBurst.setStatus("current")
_VmNewCfgProfileEgressShapingPeak_Type = Integer32
_VmNewCfgProfileEgressShapingPeak_Object = MibTableColumn
vmNewCfgProfileEgressShapingPeak = _VmNewCfgProfileEgressShapingPeak_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 4, 2, 1, 10),
    _VmNewCfgProfileEgressShapingPeak_Type()
)
vmNewCfgProfileEgressShapingPeak.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmNewCfgProfileEgressShapingPeak.setStatus("current")
_VirtVMware_ObjectIdentity = ObjectIdentity
virtVMware = _VirtVMware_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5)
)


class _VirtVMwareNameTableUpdate_Type(Integer32):
    """Custom type virtVMwareNameTableUpdate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("get", 2))
    )


_VirtVMwareNameTableUpdate_Type.__name__ = "Integer32"
_VirtVMwareNameTableUpdate_Object = MibScalar
virtVMwareNameTableUpdate = _VirtVMwareNameTableUpdate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 1),
    _VirtVMwareNameTableUpdate_Type()
)
virtVMwareNameTableUpdate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    virtVMwareNameTableUpdate.setStatus("current")
_VirtVMwareHostNameTable_Object = MibTable
virtVMwareHostNameTable = _VirtVMwareHostNameTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 2)
)
if mibBuilder.loadTexts:
    virtVMwareHostNameTable.setStatus("current")
_VirtVMwareHostNameEntry_Object = MibTableRow
virtVMwareHostNameEntry = _VirtVMwareHostNameEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 2, 1)
)
virtVMwareHostNameEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "virtVMwareHostNameIndex"),
)
if mibBuilder.loadTexts:
    virtVMwareHostNameEntry.setStatus("current")
_VirtVMwareHostNameIndex_Type = Integer32
_VirtVMwareHostNameIndex_Object = MibTableColumn
virtVMwareHostNameIndex = _VirtVMwareHostNameIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 2, 1, 1),
    _VirtVMwareHostNameIndex_Type()
)
virtVMwareHostNameIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareHostNameIndex.setStatus("current")


class _VirtVMwareHostNameUUID_Type(DisplayString):
    """Custom type virtVMwareHostNameUUID based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_VirtVMwareHostNameUUID_Type.__name__ = "DisplayString"
_VirtVMwareHostNameUUID_Object = MibTableColumn
virtVMwareHostNameUUID = _VirtVMwareHostNameUUID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 2, 1, 2),
    _VirtVMwareHostNameUUID_Type()
)
virtVMwareHostNameUUID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareHostNameUUID.setStatus("current")


class _VirtVMwareHostNameIpAddress_Type(DisplayString):
    """Custom type virtVMwareHostNameIpAddress based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_VirtVMwareHostNameIpAddress_Type.__name__ = "DisplayString"
_VirtVMwareHostNameIpAddress_Object = MibTableColumn
virtVMwareHostNameIpAddress = _VirtVMwareHostNameIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 2, 1, 3),
    _VirtVMwareHostNameIpAddress_Type()
)
virtVMwareHostNameIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareHostNameIpAddress.setStatus("current")


class _VirtVMwareHostNameName_Type(DisplayString):
    """Custom type virtVMwareHostNameName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_VirtVMwareHostNameName_Type.__name__ = "DisplayString"
_VirtVMwareHostNameName_Object = MibTableColumn
virtVMwareHostNameName = _VirtVMwareHostNameName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 2, 1, 4),
    _VirtVMwareHostNameName_Type()
)
virtVMwareHostNameName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareHostNameName.setStatus("current")
_VirtVMwareVMNameTable_Object = MibTable
virtVMwareVMNameTable = _VirtVMwareVMNameTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 3)
)
if mibBuilder.loadTexts:
    virtVMwareVMNameTable.setStatus("current")
_VirtVMwareVMNameEntry_Object = MibTableRow
virtVMwareVMNameEntry = _VirtVMwareVMNameEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 3, 1)
)
virtVMwareVMNameEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "virtVMwareVMNameIndex"),
)
if mibBuilder.loadTexts:
    virtVMwareVMNameEntry.setStatus("current")
_VirtVMwareVMNameIndex_Type = Integer32
_VirtVMwareVMNameIndex_Object = MibTableColumn
virtVMwareVMNameIndex = _VirtVMwareVMNameIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 3, 1, 1),
    _VirtVMwareVMNameIndex_Type()
)
virtVMwareVMNameIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareVMNameIndex.setStatus("current")


class _VirtVMwareVMNameUUID_Type(DisplayString):
    """Custom type virtVMwareVMNameUUID based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_VirtVMwareVMNameUUID_Type.__name__ = "DisplayString"
_VirtVMwareVMNameUUID_Object = MibTableColumn
virtVMwareVMNameUUID = _VirtVMwareVMNameUUID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 3, 1, 2),
    _VirtVMwareVMNameUUID_Type()
)
virtVMwareVMNameUUID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareVMNameUUID.setStatus("current")


class _VirtVMwareVMNameVMwareName_Type(DisplayString):
    """Custom type virtVMwareVMNameVMwareName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_VirtVMwareVMNameVMwareName_Type.__name__ = "DisplayString"
_VirtVMwareVMNameVMwareName_Object = MibTableColumn
virtVMwareVMNameVMwareName = _VirtVMwareVMNameVMwareName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 3, 1, 3),
    _VirtVMwareVMNameVMwareName_Type()
)
virtVMwareVMNameVMwareName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareVMNameVMwareName.setStatus("current")


class _VirtVMwareVMNameOsName_Type(DisplayString):
    """Custom type virtVMwareVMNameOsName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_VirtVMwareVMNameOsName_Type.__name__ = "DisplayString"
_VirtVMwareVMNameOsName_Object = MibTableColumn
virtVMwareVMNameOsName = _VirtVMwareVMNameOsName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 3, 1, 4),
    _VirtVMwareVMNameOsName_Type()
)
virtVMwareVMNameOsName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareVMNameOsName.setStatus("current")


class _VirtVMwareVMNameIpAddress_Type(DisplayString):
    """Custom type virtVMwareVMNameIpAddress based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_VirtVMwareVMNameIpAddress_Type.__name__ = "DisplayString"
_VirtVMwareVMNameIpAddress_Object = MibTableColumn
virtVMwareVMNameIpAddress = _VirtVMwareVMNameIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 3, 1, 5),
    _VirtVMwareVMNameIpAddress_Type()
)
virtVMwareVMNameIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareVMNameIpAddress.setStatus("current")
_VirtVMwareHost_Type = DisplayString
_VirtVMwareHost_Object = MibScalar
virtVMwareHost = _VirtVMwareHost_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 4),
    _VirtVMwareHost_Type()
)
virtVMwareHost.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    virtVMwareHost.setStatus("current")
_VirtVMwareHostVswitchTable_Object = MibTable
virtVMwareHostVswitchTable = _VirtVMwareHostVswitchTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 5)
)
if mibBuilder.loadTexts:
    virtVMwareHostVswitchTable.setStatus("current")
_VirtVMwareHostVswitchEntry_Object = MibTableRow
virtVMwareHostVswitchEntry = _VirtVMwareHostVswitchEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 5, 1)
)
virtVMwareHostVswitchEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "virtVMwareHostVswitchIndex"),
)
if mibBuilder.loadTexts:
    virtVMwareHostVswitchEntry.setStatus("current")
_VirtVMwareHostVswitchIndex_Type = Integer32
_VirtVMwareHostVswitchIndex_Object = MibTableColumn
virtVMwareHostVswitchIndex = _VirtVMwareHostVswitchIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 5, 1, 1),
    _VirtVMwareHostVswitchIndex_Type()
)
virtVMwareHostVswitchIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareHostVswitchIndex.setStatus("current")
_VirtVMwareHostVswitchName_Type = DisplayString
_VirtVMwareHostVswitchName_Object = MibTableColumn
virtVMwareHostVswitchName = _VirtVMwareHostVswitchName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 5, 1, 2),
    _VirtVMwareHostVswitchName_Type()
)
virtVMwareHostVswitchName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareHostVswitchName.setStatus("current")
_VirtVMwareHostPGTable_Object = MibTable
virtVMwareHostPGTable = _VirtVMwareHostPGTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 6)
)
if mibBuilder.loadTexts:
    virtVMwareHostPGTable.setStatus("current")
_VirtVMwareHostPGEntry_Object = MibTableRow
virtVMwareHostPGEntry = _VirtVMwareHostPGEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 6, 1)
)
virtVMwareHostPGEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "virtVMwareHostPGIndex"),
)
if mibBuilder.loadTexts:
    virtVMwareHostPGEntry.setStatus("current")
_VirtVMwareHostPGIndex_Type = Integer32
_VirtVMwareHostPGIndex_Object = MibTableColumn
virtVMwareHostPGIndex = _VirtVMwareHostPGIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 6, 1, 1),
    _VirtVMwareHostPGIndex_Type()
)
virtVMwareHostPGIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareHostPGIndex.setStatus("current")
_VirtVMwareHostPGName_Type = DisplayString
_VirtVMwareHostPGName_Object = MibTableColumn
virtVMwareHostPGName = _VirtVMwareHostPGName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 6, 1, 2),
    _VirtVMwareHostPGName_Type()
)
virtVMwareHostPGName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareHostPGName.setStatus("current")
_VirtVMwareHostPGVswitchName_Type = DisplayString
_VirtVMwareHostPGVswitchName_Object = MibTableColumn
virtVMwareHostPGVswitchName = _VirtVMwareHostPGVswitchName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 6, 1, 3),
    _VirtVMwareHostPGVswitchName_Type()
)
virtVMwareHostPGVswitchName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareHostPGVswitchName.setStatus("current")
_VirtVMwareHostDetailInfoTable_Object = MibTable
virtVMwareHostDetailInfoTable = _VirtVMwareHostDetailInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 7)
)
if mibBuilder.loadTexts:
    virtVMwareHostDetailInfoTable.setStatus("current")
_VirtVMwareHostDetailInfoEntry_Object = MibTableRow
virtVMwareHostDetailInfoEntry = _VirtVMwareHostDetailInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 7, 1)
)
virtVMwareHostDetailInfoEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "virtVMwareHostDetailInfoIndex"),
)
if mibBuilder.loadTexts:
    virtVMwareHostDetailInfoEntry.setStatus("current")
_VirtVMwareHostDetailInfoIndex_Type = Integer32
_VirtVMwareHostDetailInfoIndex_Object = MibTableColumn
virtVMwareHostDetailInfoIndex = _VirtVMwareHostDetailInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 7, 1, 1),
    _VirtVMwareHostDetailInfoIndex_Type()
)
virtVMwareHostDetailInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareHostDetailInfoIndex.setStatus("current")
_VirtVMwareHostDetailInfoMACAddr_Type = DisplayString
_VirtVMwareHostDetailInfoMACAddr_Object = MibTableColumn
virtVMwareHostDetailInfoMACAddr = _VirtVMwareHostDetailInfoMACAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 7, 1, 2),
    _VirtVMwareHostDetailInfoMACAddr_Type()
)
virtVMwareHostDetailInfoMACAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareHostDetailInfoMACAddr.setStatus("current")
_VirtVMwareHostDetailInfoPort_Type = DisplayString
_VirtVMwareHostDetailInfoPort_Object = MibTableColumn
virtVMwareHostDetailInfoPort = _VirtVMwareHostDetailInfoPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 7, 1, 3),
    _VirtVMwareHostDetailInfoPort_Type()
)
virtVMwareHostDetailInfoPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareHostDetailInfoPort.setStatus("current")
_VirtVMwareHostDetailInfoType_Type = DisplayString
_VirtVMwareHostDetailInfoType_Object = MibTableColumn
virtVMwareHostDetailInfoType = _VirtVMwareHostDetailInfoType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 7, 1, 4),
    _VirtVMwareHostDetailInfoType_Type()
)
virtVMwareHostDetailInfoType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareHostDetailInfoType.setStatus("current")
_VirtVMwareHostDetailInfoIPAddr_Type = DisplayString
_VirtVMwareHostDetailInfoIPAddr_Object = MibTableColumn
virtVMwareHostDetailInfoIPAddr = _VirtVMwareHostDetailInfoIPAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 7, 1, 5),
    _VirtVMwareHostDetailInfoIPAddr_Type()
)
virtVMwareHostDetailInfoIPAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareHostDetailInfoIPAddr.setStatus("current")
_VirtVMwareHostDetailInfoUUID_Type = DisplayString
_VirtVMwareHostDetailInfoUUID_Object = MibTableColumn
virtVMwareHostDetailInfoUUID = _VirtVMwareHostDetailInfoUUID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 7, 1, 6),
    _VirtVMwareHostDetailInfoUUID_Type()
)
virtVMwareHostDetailInfoUUID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareHostDetailInfoUUID.setStatus("current")
_VirtVMwareHostDetailInfoVswitch_Type = DisplayString
_VirtVMwareHostDetailInfoVswitch_Object = MibTableColumn
virtVMwareHostDetailInfoVswitch = _VirtVMwareHostDetailInfoVswitch_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 7, 1, 7),
    _VirtVMwareHostDetailInfoVswitch_Type()
)
virtVMwareHostDetailInfoVswitch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareHostDetailInfoVswitch.setStatus("current")
_VirtVMwareHostDetailInfoPortGroup_Type = DisplayString
_VirtVMwareHostDetailInfoPortGroup_Object = MibTableColumn
virtVMwareHostDetailInfoPortGroup = _VirtVMwareHostDetailInfoPortGroup_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 7, 1, 8),
    _VirtVMwareHostDetailInfoPortGroup_Type()
)
virtVMwareHostDetailInfoPortGroup.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareHostDetailInfoPortGroup.setStatus("current")
_VirtVMwareHostDetailInfoVlanID_Type = DisplayString
_VirtVMwareHostDetailInfoVlanID_Object = MibTableColumn
virtVMwareHostDetailInfoVlanID = _VirtVMwareHostDetailInfoVlanID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 7, 1, 9),
    _VirtVMwareHostDetailInfoVlanID_Type()
)
virtVMwareHostDetailInfoVlanID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareHostDetailInfoVlanID.setStatus("current")
_VirtVMwareHostDetailInfoHostName_Type = DisplayString
_VirtVMwareHostDetailInfoHostName_Object = MibTableColumn
virtVMwareHostDetailInfoHostName = _VirtVMwareHostDetailInfoHostName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 7, 1, 10),
    _VirtVMwareHostDetailInfoHostName_Type()
)
virtVMwareHostDetailInfoHostName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareHostDetailInfoHostName.setStatus("current")
_VirtVMwareHostDetailInfoVMVCenterName_Type = DisplayString
_VirtVMwareHostDetailInfoVMVCenterName_Object = MibTableColumn
virtVMwareHostDetailInfoVMVCenterName = _VirtVMwareHostDetailInfoVMVCenterName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 7, 1, 11),
    _VirtVMwareHostDetailInfoVMVCenterName_Type()
)
virtVMwareHostDetailInfoVMVCenterName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareHostDetailInfoVMVCenterName.setStatus("current")
_VirtVMwareHostDetailInfoVMOSHostName_Type = DisplayString
_VirtVMwareHostDetailInfoVMOSHostName_Object = MibTableColumn
virtVMwareHostDetailInfoVMOSHostName = _VirtVMwareHostDetailInfoVMOSHostName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 7, 1, 12),
    _VirtVMwareHostDetailInfoVMOSHostName_Type()
)
virtVMwareHostDetailInfoVMOSHostName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareHostDetailInfoVMOSHostName.setStatus("current")
_VirtVMwareHostDetailInfoVMCurrentHost_Type = DisplayString
_VirtVMwareHostDetailInfoVMCurrentHost_Object = MibTableColumn
virtVMwareHostDetailInfoVMCurrentHost = _VirtVMwareHostDetailInfoVMCurrentHost_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 7, 1, 13),
    _VirtVMwareHostDetailInfoVMCurrentHost_Type()
)
virtVMwareHostDetailInfoVMCurrentHost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareHostDetailInfoVMCurrentHost.setStatus("current")
_VirtVMwareVM_Type = DisplayString
_VirtVMwareVM_Object = MibScalar
virtVMwareVM = _VirtVMwareVM_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 8),
    _VirtVMwareVM_Type()
)
virtVMwareVM.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    virtVMwareVM.setStatus("current")
_VirtVMwareVMInfoTable_Object = MibTable
virtVMwareVMInfoTable = _VirtVMwareVMInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 9)
)
if mibBuilder.loadTexts:
    virtVMwareVMInfoTable.setStatus("current")
_VirtVMwareVMInfoEntry_Object = MibTableRow
virtVMwareVMInfoEntry = _VirtVMwareVMInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 9, 1)
)
virtVMwareVMInfoEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "virtVMwareVMInfoIndex"),
)
if mibBuilder.loadTexts:
    virtVMwareVMInfoEntry.setStatus("current")
_VirtVMwareVMInfoIndex_Type = Integer32
_VirtVMwareVMInfoIndex_Object = MibTableColumn
virtVMwareVMInfoIndex = _VirtVMwareVMInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 9, 1, 1),
    _VirtVMwareVMInfoIndex_Type()
)
virtVMwareVMInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareVMInfoIndex.setStatus("current")
_VirtVMwareVMInfoMACAddr_Type = DisplayString
_VirtVMwareVMInfoMACAddr_Object = MibTableColumn
virtVMwareVMInfoMACAddr = _VirtVMwareVMInfoMACAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 9, 1, 2),
    _VirtVMwareVMInfoMACAddr_Type()
)
virtVMwareVMInfoMACAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareVMInfoMACAddr.setStatus("current")
_VirtVMwareVMInfoPort_Type = DisplayString
_VirtVMwareVMInfoPort_Object = MibTableColumn
virtVMwareVMInfoPort = _VirtVMwareVMInfoPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 9, 1, 3),
    _VirtVMwareVMInfoPort_Type()
)
virtVMwareVMInfoPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareVMInfoPort.setStatus("current")
_VirtVMwareVMInfoType_Type = DisplayString
_VirtVMwareVMInfoType_Object = MibTableColumn
virtVMwareVMInfoType = _VirtVMwareVMInfoType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 9, 1, 4),
    _VirtVMwareVMInfoType_Type()
)
virtVMwareVMInfoType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareVMInfoType.setStatus("current")
_VirtVMwareVMInfoIPAddr_Type = DisplayString
_VirtVMwareVMInfoIPAddr_Object = MibTableColumn
virtVMwareVMInfoIPAddr = _VirtVMwareVMInfoIPAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 9, 1, 5),
    _VirtVMwareVMInfoIPAddr_Type()
)
virtVMwareVMInfoIPAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareVMInfoIPAddr.setStatus("current")
_VirtVMwareVMInfoUUID_Type = DisplayString
_VirtVMwareVMInfoUUID_Object = MibTableColumn
virtVMwareVMInfoUUID = _VirtVMwareVMInfoUUID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 9, 1, 6),
    _VirtVMwareVMInfoUUID_Type()
)
virtVMwareVMInfoUUID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareVMInfoUUID.setStatus("current")
_VirtVMwareVMInfoVswitch_Type = DisplayString
_VirtVMwareVMInfoVswitch_Object = MibTableColumn
virtVMwareVMInfoVswitch = _VirtVMwareVMInfoVswitch_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 9, 1, 7),
    _VirtVMwareVMInfoVswitch_Type()
)
virtVMwareVMInfoVswitch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareVMInfoVswitch.setStatus("current")
_VirtVMwareVMInfoPortGroup_Type = DisplayString
_VirtVMwareVMInfoPortGroup_Object = MibTableColumn
virtVMwareVMInfoPortGroup = _VirtVMwareVMInfoPortGroup_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 9, 1, 8),
    _VirtVMwareVMInfoPortGroup_Type()
)
virtVMwareVMInfoPortGroup.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareVMInfoPortGroup.setStatus("current")
_VirtVMwareVMInfoVlanID_Type = DisplayString
_VirtVMwareVMInfoVlanID_Object = MibTableColumn
virtVMwareVMInfoVlanID = _VirtVMwareVMInfoVlanID_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 9, 1, 9),
    _VirtVMwareVMInfoVlanID_Type()
)
virtVMwareVMInfoVlanID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareVMInfoVlanID.setStatus("current")
_VirtVMwareVMInfoVMVCenterName_Type = DisplayString
_VirtVMwareVMInfoVMVCenterName_Object = MibTableColumn
virtVMwareVMInfoVMVCenterName = _VirtVMwareVMInfoVMVCenterName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 9, 1, 10),
    _VirtVMwareVMInfoVMVCenterName_Type()
)
virtVMwareVMInfoVMVCenterName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareVMInfoVMVCenterName.setStatus("current")
_VirtVMwareVMInfoVMOSHostName_Type = DisplayString
_VirtVMwareVMInfoVMOSHostName_Object = MibTableColumn
virtVMwareVMInfoVMOSHostName = _VirtVMwareVMInfoVMOSHostName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 9, 1, 11),
    _VirtVMwareVMInfoVMOSHostName_Type()
)
virtVMwareVMInfoVMOSHostName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareVMInfoVMOSHostName.setStatus("current")
_VirtVMwareVMInfoVMCurrentHost_Type = DisplayString
_VirtVMwareVMInfoVMCurrentHost_Object = MibTableColumn
virtVMwareVMInfoVMCurrentHost = _VirtVMwareVMInfoVMCurrentHost_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 9, 1, 12),
    _VirtVMwareVMInfoVMCurrentHost_Type()
)
virtVMwareVMInfoVMCurrentHost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtVMwareVMInfoVMCurrentHost.setStatus("current")
_VirtCurCfgVMwareHello_ObjectIdentity = ObjectIdentity
virtCurCfgVMwareHello = _VirtCurCfgVMwareHello_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 10)
)


class _VirtCurCfgVMwareHelloEnable_Type(Integer32):
    """Custom type virtCurCfgVMwareHelloEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_VirtCurCfgVMwareHelloEnable_Type.__name__ = "Integer32"
_VirtCurCfgVMwareHelloEnable_Object = MibScalar
virtCurCfgVMwareHelloEnable = _VirtCurCfgVMwareHelloEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 10, 1),
    _VirtCurCfgVMwareHelloEnable_Type()
)
virtCurCfgVMwareHelloEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtCurCfgVMwareHelloEnable.setStatus("current")
_VirtCurCfgVMwareHelloTimer_Type = Integer32
_VirtCurCfgVMwareHelloTimer_Object = MibScalar
virtCurCfgVMwareHelloTimer = _VirtCurCfgVMwareHelloTimer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 10, 2),
    _VirtCurCfgVMwareHelloTimer_Type()
)
virtCurCfgVMwareHelloTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtCurCfgVMwareHelloTimer.setStatus("current")
_VirtCurCfgVMwareHelloPorts_Type = OctetString
_VirtCurCfgVMwareHelloPorts_Object = MibScalar
virtCurCfgVMwareHelloPorts = _VirtCurCfgVMwareHelloPorts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 10, 3),
    _VirtCurCfgVMwareHelloPorts_Type()
)
virtCurCfgVMwareHelloPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtCurCfgVMwareHelloPorts.setStatus("current")
_VirtCurCfgVMwareHelloAddr_Type = IpAddress
_VirtCurCfgVMwareHelloAddr_Object = MibScalar
virtCurCfgVMwareHelloAddr = _VirtCurCfgVMwareHelloAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 10, 4),
    _VirtCurCfgVMwareHelloAddr_Type()
)
virtCurCfgVMwareHelloAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtCurCfgVMwareHelloAddr.setStatus("current")
_VirtNewCfgVMwareHello_ObjectIdentity = ObjectIdentity
virtNewCfgVMwareHello = _VirtNewCfgVMwareHello_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 11)
)


class _VirtNewCfgVMwareHelloEnable_Type(Integer32):
    """Custom type virtNewCfgVMwareHelloEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_VirtNewCfgVMwareHelloEnable_Type.__name__ = "Integer32"
_VirtNewCfgVMwareHelloEnable_Object = MibScalar
virtNewCfgVMwareHelloEnable = _VirtNewCfgVMwareHelloEnable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 11, 1),
    _VirtNewCfgVMwareHelloEnable_Type()
)
virtNewCfgVMwareHelloEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    virtNewCfgVMwareHelloEnable.setStatus("current")
_VirtNewCfgVMwareHelloTimer_Type = Integer32
_VirtNewCfgVMwareHelloTimer_Object = MibScalar
virtNewCfgVMwareHelloTimer = _VirtNewCfgVMwareHelloTimer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 11, 2),
    _VirtNewCfgVMwareHelloTimer_Type()
)
virtNewCfgVMwareHelloTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    virtNewCfgVMwareHelloTimer.setStatus("current")
_VirtNewCfgVMwareHelloPorts_Type = OctetString
_VirtNewCfgVMwareHelloPorts_Object = MibScalar
virtNewCfgVMwareHelloPorts = _VirtNewCfgVMwareHelloPorts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 11, 3),
    _VirtNewCfgVMwareHelloPorts_Type()
)
virtNewCfgVMwareHelloPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    virtNewCfgVMwareHelloPorts.setStatus("current")
_VirtNewCfgVMwareHelloAddPort_Type = PortNumber
_VirtNewCfgVMwareHelloAddPort_Object = MibScalar
virtNewCfgVMwareHelloAddPort = _VirtNewCfgVMwareHelloAddPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 11, 4),
    _VirtNewCfgVMwareHelloAddPort_Type()
)
virtNewCfgVMwareHelloAddPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    virtNewCfgVMwareHelloAddPort.setStatus("current")
_VirtNewCfgVMwareHelloRemovePort_Type = PortNumber
_VirtNewCfgVMwareHelloRemovePort_Object = MibScalar
virtNewCfgVMwareHelloRemovePort = _VirtNewCfgVMwareHelloRemovePort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 11, 5),
    _VirtNewCfgVMwareHelloRemovePort_Type()
)
virtNewCfgVMwareHelloRemovePort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    virtNewCfgVMwareHelloRemovePort.setStatus("current")
_VirtNewCfgVMwareHelloAddr_Type = IpAddress
_VirtNewCfgVMwareHelloAddr_Object = MibScalar
virtNewCfgVMwareHelloAddr = _VirtNewCfgVMwareHelloAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 5, 11, 6),
    _VirtNewCfgVMwareHelloAddr_Type()
)
virtNewCfgVMwareHelloAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    virtNewCfgVMwareHelloAddr.setStatus("current")
_VmCheck_ObjectIdentity = ObjectIdentity
vmCheck = _VmCheck_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 7)
)
_VmCurCfgCheck_ObjectIdentity = ObjectIdentity
vmCurCfgCheck = _VmCurCfgCheck_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 7, 1)
)


class _VmCurCfgCheckActionBasic_Type(Integer32):
    """Custom type vmCurCfgCheckActionBasic based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("log", 1),
          ("link", 2))
    )


_VmCurCfgCheckActionBasic_Type.__name__ = "Integer32"
_VmCurCfgCheckActionBasic_Object = MibScalar
vmCurCfgCheckActionBasic = _VmCurCfgCheckActionBasic_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 7, 1, 1),
    _VmCurCfgCheckActionBasic_Type()
)
vmCurCfgCheckActionBasic.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmCurCfgCheckActionBasic.setStatus("current")


class _VmCurCfgCheckActionAdvanced_Type(Integer32):
    """Custom type vmCurCfgCheckActionAdvanced based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("log", 1),
          ("link", 2),
          ("acl", 3))
    )


_VmCurCfgCheckActionAdvanced_Type.__name__ = "Integer32"
_VmCurCfgCheckActionAdvanced_Object = MibScalar
vmCurCfgCheckActionAdvanced = _VmCurCfgCheckActionAdvanced_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 7, 1, 2),
    _VmCurCfgCheckActionAdvanced_Type()
)
vmCurCfgCheckActionAdvanced.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmCurCfgCheckActionAdvanced.setStatus("current")
_VmCurCfgCheckAclsMax_Type = Integer32
_VmCurCfgCheckAclsMax_Object = MibScalar
vmCurCfgCheckAclsMax = _VmCurCfgCheckAclsMax_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 7, 1, 3),
    _VmCurCfgCheckAclsMax_Type()
)
vmCurCfgCheckAclsMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmCurCfgCheckAclsMax.setStatus("current")
_VmCurCfgCheckTrust_Type = OctetString
_VmCurCfgCheckTrust_Object = MibScalar
vmCurCfgCheckTrust = _VmCurCfgCheckTrust_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 7, 1, 4),
    _VmCurCfgCheckTrust_Type()
)
vmCurCfgCheckTrust.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmCurCfgCheckTrust.setStatus("current")
_VmNewCfgCheck_ObjectIdentity = ObjectIdentity
vmNewCfgCheck = _VmNewCfgCheck_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 7, 2)
)


class _VmNewCfgCheckActionBasic_Type(Integer32):
    """Custom type vmNewCfgCheckActionBasic based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("log", 1),
          ("link", 2))
    )


_VmNewCfgCheckActionBasic_Type.__name__ = "Integer32"
_VmNewCfgCheckActionBasic_Object = MibScalar
vmNewCfgCheckActionBasic = _VmNewCfgCheckActionBasic_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 7, 2, 1),
    _VmNewCfgCheckActionBasic_Type()
)
vmNewCfgCheckActionBasic.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmNewCfgCheckActionBasic.setStatus("current")


class _VmNewCfgCheckActionAdvanced_Type(Integer32):
    """Custom type vmNewCfgCheckActionAdvanced based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("log", 1),
          ("link", 2),
          ("acl", 3))
    )


_VmNewCfgCheckActionAdvanced_Type.__name__ = "Integer32"
_VmNewCfgCheckActionAdvanced_Object = MibScalar
vmNewCfgCheckActionAdvanced = _VmNewCfgCheckActionAdvanced_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 7, 2, 2),
    _VmNewCfgCheckActionAdvanced_Type()
)
vmNewCfgCheckActionAdvanced.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmNewCfgCheckActionAdvanced.setStatus("current")
_VmNewCfgCheckAclsMax_Type = Integer32
_VmNewCfgCheckAclsMax_Object = MibScalar
vmNewCfgCheckAclsMax = _VmNewCfgCheckAclsMax_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 7, 2, 3),
    _VmNewCfgCheckAclsMax_Type()
)
vmNewCfgCheckAclsMax.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmNewCfgCheckAclsMax.setStatus("current")
_VmNewCfgCheckTrust_Type = OctetString
_VmNewCfgCheckTrust_Object = MibScalar
vmNewCfgCheckTrust = _VmNewCfgCheckTrust_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 7, 2, 4),
    _VmNewCfgCheckTrust_Type()
)
vmNewCfgCheckTrust.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmNewCfgCheckTrust.setStatus("current")
_VmNewCfgCheckTrustAddPort_Type = PortNumber
_VmNewCfgCheckTrustAddPort_Object = MibScalar
vmNewCfgCheckTrustAddPort = _VmNewCfgCheckTrustAddPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 7, 2, 5),
    _VmNewCfgCheckTrustAddPort_Type()
)
vmNewCfgCheckTrustAddPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmNewCfgCheckTrustAddPort.setStatus("current")
_VmNewCfgCheckTrustRemPort_Type = PortNumber
_VmNewCfgCheckTrustRemPort_Object = MibScalar
vmNewCfgCheckTrustRemPort = _VmNewCfgCheckTrustRemPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 7, 2, 6),
    _VmNewCfgCheckTrustRemPort_Type()
)
vmNewCfgCheckTrustRemPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmNewCfgCheckTrustRemPort.setStatus("current")
_VmReadyMisc_ObjectIdentity = ObjectIdentity
vmReadyMisc = _VmReadyMisc_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 8)
)


class _VmReadyLocalAdmMac_Type(Integer32):
    """Custom type vmReadyLocalAdmMac based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_VmReadyLocalAdmMac_Type.__name__ = "Integer32"
_VmReadyLocalAdmMac_Object = MibScalar
vmReadyLocalAdmMac = _VmReadyLocalAdmMac_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 8, 1),
    _VmReadyLocalAdmMac_Type()
)
vmReadyLocalAdmMac.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmReadyLocalAdmMac.setStatus("current")
_VmReadyCurCfgOuiTbl_Object = MibTable
vmReadyCurCfgOuiTbl = _VmReadyCurCfgOuiTbl_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 8, 2)
)
if mibBuilder.loadTexts:
    vmReadyCurCfgOuiTbl.setStatus("current")
_VmReadyCurCfgOuiEntry_Object = MibTableRow
vmReadyCurCfgOuiEntry = _VmReadyCurCfgOuiEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 8, 2, 1)
)
vmReadyCurCfgOuiEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vmReadyCurCfgOuiMacIdx"),
)
if mibBuilder.loadTexts:
    vmReadyCurCfgOuiEntry.setStatus("current")
_VmReadyCurCfgOuiMacIdx_Type = Unsigned32
_VmReadyCurCfgOuiMacIdx_Object = MibTableColumn
vmReadyCurCfgOuiMacIdx = _VmReadyCurCfgOuiMacIdx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 8, 2, 1, 1),
    _VmReadyCurCfgOuiMacIdx_Type()
)
vmReadyCurCfgOuiMacIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmReadyCurCfgOuiMacIdx.setStatus("current")
_VmReadyCurCfgOuiMac_Type = PhysAddress
_VmReadyCurCfgOuiMac_Object = MibTableColumn
vmReadyCurCfgOuiMac = _VmReadyCurCfgOuiMac_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 8, 2, 1, 2),
    _VmReadyCurCfgOuiMac_Type()
)
vmReadyCurCfgOuiMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmReadyCurCfgOuiMac.setStatus("current")
_VmReadyCurCfgVendor_Type = DisplayString
_VmReadyCurCfgVendor_Object = MibTableColumn
vmReadyCurCfgVendor = _VmReadyCurCfgVendor_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 8, 2, 1, 3),
    _VmReadyCurCfgVendor_Type()
)
vmReadyCurCfgVendor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmReadyCurCfgVendor.setStatus("current")
_VmReadyNewCfgOuiTbl_Object = MibTable
vmReadyNewCfgOuiTbl = _VmReadyNewCfgOuiTbl_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 8, 3)
)
if mibBuilder.loadTexts:
    vmReadyNewCfgOuiTbl.setStatus("current")
_VmReadyNewCfgOuiEntry_Object = MibTableRow
vmReadyNewCfgOuiEntry = _VmReadyNewCfgOuiEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 8, 3, 1)
)
vmReadyNewCfgOuiEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vmReadyNewCfgOuiMacIdx"),
)
if mibBuilder.loadTexts:
    vmReadyNewCfgOuiEntry.setStatus("current")
_VmReadyNewCfgOuiMacIdx_Type = Unsigned32
_VmReadyNewCfgOuiMacIdx_Object = MibTableColumn
vmReadyNewCfgOuiMacIdx = _VmReadyNewCfgOuiMacIdx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 8, 3, 1, 1),
    _VmReadyNewCfgOuiMacIdx_Type()
)
vmReadyNewCfgOuiMacIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vmReadyNewCfgOuiMacIdx.setStatus("current")
_VmReadyNewCfgOuiMac_Type = DisplayString
_VmReadyNewCfgOuiMac_Object = MibTableColumn
vmReadyNewCfgOuiMac = _VmReadyNewCfgOuiMac_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 8, 3, 1, 2),
    _VmReadyNewCfgOuiMac_Type()
)
vmReadyNewCfgOuiMac.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmReadyNewCfgOuiMac.setStatus("current")
_VmReadyNewCfgVendor_Type = DisplayString
_VmReadyNewCfgVendor_Object = MibTableColumn
vmReadyNewCfgVendor = _VmReadyNewCfgVendor_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 8, 3, 1, 3),
    _VmReadyNewCfgVendor_Type()
)
vmReadyNewCfgVendor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmReadyNewCfgVendor.setStatus("current")


class _VmReadyNewCfgDelete_Type(Integer32):
    """Custom type vmReadyNewCfgDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("other", 0),
          ("delete", 1))
    )


_VmReadyNewCfgDelete_Type.__name__ = "Integer32"
_VmReadyNewCfgDelete_Object = MibTableColumn
vmReadyNewCfgDelete = _VmReadyNewCfgDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 15, 8, 3, 1, 4),
    _VmReadyNewCfgDelete_Type()
)
vmReadyNewCfgDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vmReadyNewCfgDelete.setStatus("current")
_Vnic_ObjectIdentity = ObjectIdentity
vnic = _Vnic_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16)
)


class _VnicCurCfgState_Type(Integer32):
    """Custom type vnicCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VnicCurCfgState_Type.__name__ = "Integer32"
_VnicCurCfgState_Object = MibScalar
vnicCurCfgState = _VnicCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 1),
    _VnicCurCfgState_Type()
)
vnicCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vnicCurCfgState.setStatus("current")


class _VnicNewCfgState_Type(Integer32):
    """Custom type vnicNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VnicNewCfgState_Type.__name__ = "Integer32"
_VnicNewCfgState_Object = MibScalar
vnicNewCfgState = _VnicNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 2),
    _VnicNewCfgState_Type()
)
vnicNewCfgState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vnicNewCfgState.setStatus("current")
_VnicCurCfgVnicTable_Object = MibTable
vnicCurCfgVnicTable = _VnicCurCfgVnicTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 7)
)
if mibBuilder.loadTexts:
    vnicCurCfgVnicTable.setStatus("current")
_VnicCurCfgVnicEntry_Object = MibTableRow
vnicCurCfgVnicEntry = _VnicCurCfgVnicEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 7, 1)
)
vnicCurCfgVnicEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vnicCurCfgVnicPortIndex"),
    (0, "IBM-GbTOR-G8264T-MIB", "vnicCurCfgVnicIndex"),
)
if mibBuilder.loadTexts:
    vnicCurCfgVnicEntry.setStatus("current")
_VnicCurCfgVnicPortIndex_Type = PortNumber
_VnicCurCfgVnicPortIndex_Object = MibTableColumn
vnicCurCfgVnicPortIndex = _VnicCurCfgVnicPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 7, 1, 1),
    _VnicCurCfgVnicPortIndex_Type()
)
vnicCurCfgVnicPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vnicCurCfgVnicPortIndex.setStatus("current")
_VnicCurCfgVnicIndex_Type = Integer32
_VnicCurCfgVnicIndex_Object = MibTableColumn
vnicCurCfgVnicIndex = _VnicCurCfgVnicIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 7, 1, 2),
    _VnicCurCfgVnicIndex_Type()
)
vnicCurCfgVnicIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vnicCurCfgVnicIndex.setStatus("current")


class _VnicCurCfgVnicState_Type(Integer32):
    """Custom type vnicCurCfgVnicState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VnicCurCfgVnicState_Type.__name__ = "Integer32"
_VnicCurCfgVnicState_Object = MibTableColumn
vnicCurCfgVnicState = _VnicCurCfgVnicState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 7, 1, 3),
    _VnicCurCfgVnicState_Type()
)
vnicCurCfgVnicState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vnicCurCfgVnicState.setStatus("current")


class _VnicCurCfgVnicBw_Type(Integer32):
    """Custom type vnicCurCfgVnicBw based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_VnicCurCfgVnicBw_Type.__name__ = "Integer32"
_VnicCurCfgVnicBw_Object = MibTableColumn
vnicCurCfgVnicBw = _VnicCurCfgVnicBw_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 7, 1, 4),
    _VnicCurCfgVnicBw_Type()
)
vnicCurCfgVnicBw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vnicCurCfgVnicBw.setStatus("current")


class _VnicCurCfgVnicType_Type(Integer32):
    """Custom type vnicCurCfgVnicType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("default", 1),
          ("fcoe", 2),
          ("iscsi", 3))
    )


_VnicCurCfgVnicType_Type.__name__ = "Integer32"
_VnicCurCfgVnicType_Object = MibTableColumn
vnicCurCfgVnicType = _VnicCurCfgVnicType_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 7, 1, 5),
    _VnicCurCfgVnicType_Type()
)
vnicCurCfgVnicType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vnicCurCfgVnicType.setStatus("current")
_VnicCurCfgVnicMAC_Type = DisplayString
_VnicCurCfgVnicMAC_Object = MibTableColumn
vnicCurCfgVnicMAC = _VnicCurCfgVnicMAC_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 7, 1, 6),
    _VnicCurCfgVnicMAC_Type()
)
vnicCurCfgVnicMAC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vnicCurCfgVnicMAC.setStatus("current")
_VnicNewCfgVnicTable_Object = MibTable
vnicNewCfgVnicTable = _VnicNewCfgVnicTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 8)
)
if mibBuilder.loadTexts:
    vnicNewCfgVnicTable.setStatus("current")
_VnicNewCfgVnicEntry_Object = MibTableRow
vnicNewCfgVnicEntry = _VnicNewCfgVnicEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 8, 1)
)
vnicNewCfgVnicEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vnicNewCfgVnicPortIndex"),
    (0, "IBM-GbTOR-G8264T-MIB", "vnicNewCfgVnicIndex"),
)
if mibBuilder.loadTexts:
    vnicNewCfgVnicEntry.setStatus("current")
_VnicNewCfgVnicPortIndex_Type = PortNumber
_VnicNewCfgVnicPortIndex_Object = MibTableColumn
vnicNewCfgVnicPortIndex = _VnicNewCfgVnicPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 8, 1, 1),
    _VnicNewCfgVnicPortIndex_Type()
)
vnicNewCfgVnicPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vnicNewCfgVnicPortIndex.setStatus("current")
_VnicNewCfgVnicIndex_Type = Integer32
_VnicNewCfgVnicIndex_Object = MibTableColumn
vnicNewCfgVnicIndex = _VnicNewCfgVnicIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 8, 1, 2),
    _VnicNewCfgVnicIndex_Type()
)
vnicNewCfgVnicIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vnicNewCfgVnicIndex.setStatus("current")


class _VnicNewCfgVnicState_Type(Integer32):
    """Custom type vnicNewCfgVnicState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VnicNewCfgVnicState_Type.__name__ = "Integer32"
_VnicNewCfgVnicState_Object = MibTableColumn
vnicNewCfgVnicState = _VnicNewCfgVnicState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 8, 1, 3),
    _VnicNewCfgVnicState_Type()
)
vnicNewCfgVnicState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vnicNewCfgVnicState.setStatus("current")


class _VnicNewCfgVnicBw_Type(Integer32):
    """Custom type vnicNewCfgVnicBw based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_VnicNewCfgVnicBw_Type.__name__ = "Integer32"
_VnicNewCfgVnicBw_Object = MibTableColumn
vnicNewCfgVnicBw = _VnicNewCfgVnicBw_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 8, 1, 4),
    _VnicNewCfgVnicBw_Type()
)
vnicNewCfgVnicBw.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vnicNewCfgVnicBw.setStatus("current")
_VnicCurCfgGroupTable_Object = MibTable
vnicCurCfgGroupTable = _VnicCurCfgGroupTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 9)
)
if mibBuilder.loadTexts:
    vnicCurCfgGroupTable.setStatus("current")
_VnicCurCfgGroupEntry_Object = MibTableRow
vnicCurCfgGroupEntry = _VnicCurCfgGroupEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 9, 1)
)
vnicCurCfgGroupEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vnicCurCfgGroupIndex"),
)
if mibBuilder.loadTexts:
    vnicCurCfgGroupEntry.setStatus("current")
_VnicCurCfgGroupIndex_Type = Integer32
_VnicCurCfgGroupIndex_Object = MibTableColumn
vnicCurCfgGroupIndex = _VnicCurCfgGroupIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 9, 1, 1),
    _VnicCurCfgGroupIndex_Type()
)
vnicCurCfgGroupIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vnicCurCfgGroupIndex.setStatus("current")


class _VnicCurCfgGroupState_Type(Integer32):
    """Custom type vnicCurCfgGroupState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VnicCurCfgGroupState_Type.__name__ = "Integer32"
_VnicCurCfgGroupState_Object = MibTableColumn
vnicCurCfgGroupState = _VnicCurCfgGroupState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 9, 1, 2),
    _VnicCurCfgGroupState_Type()
)
vnicCurCfgGroupState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vnicCurCfgGroupState.setStatus("current")
_VnicCurCfgGroupVlan_Type = Integer32
_VnicCurCfgGroupVlan_Object = MibTableColumn
vnicCurCfgGroupVlan = _VnicCurCfgGroupVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 9, 1, 3),
    _VnicCurCfgGroupVlan_Type()
)
vnicCurCfgGroupVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vnicCurCfgGroupVlan.setStatus("current")


class _VnicCurCfgGroupFailoverState_Type(Integer32):
    """Custom type vnicCurCfgGroupFailoverState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VnicCurCfgGroupFailoverState_Type.__name__ = "Integer32"
_VnicCurCfgGroupFailoverState_Object = MibTableColumn
vnicCurCfgGroupFailoverState = _VnicCurCfgGroupFailoverState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 9, 1, 4),
    _VnicCurCfgGroupFailoverState_Type()
)
vnicCurCfgGroupFailoverState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vnicCurCfgGroupFailoverState.setStatus("current")
_VnicCurCfgGroupVnics_Type = DisplayString
_VnicCurCfgGroupVnics_Object = MibTableColumn
vnicCurCfgGroupVnics = _VnicCurCfgGroupVnics_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 9, 1, 5),
    _VnicCurCfgGroupVnics_Type()
)
vnicCurCfgGroupVnics.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vnicCurCfgGroupVnics.setStatus("current")
_VnicCurCfgGroupPorts_Type = DisplayString
_VnicCurCfgGroupPorts_Object = MibTableColumn
vnicCurCfgGroupPorts = _VnicCurCfgGroupPorts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 9, 1, 6),
    _VnicCurCfgGroupPorts_Type()
)
vnicCurCfgGroupPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vnicCurCfgGroupPorts.setStatus("current")
_VnicCurCfgGroupTrunk_Type = Integer32
_VnicCurCfgGroupTrunk_Object = MibTableColumn
vnicCurCfgGroupTrunk = _VnicCurCfgGroupTrunk_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 9, 1, 7),
    _VnicCurCfgGroupTrunk_Type()
)
vnicCurCfgGroupTrunk.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vnicCurCfgGroupTrunk.setStatus("current")
_VnicNewCfgGroupTable_Object = MibTable
vnicNewCfgGroupTable = _VnicNewCfgGroupTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 10)
)
if mibBuilder.loadTexts:
    vnicNewCfgGroupTable.setStatus("current")
_VnicNewCfgGroupEntry_Object = MibTableRow
vnicNewCfgGroupEntry = _VnicNewCfgGroupEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 10, 1)
)
vnicNewCfgGroupEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "vnicNewCfgGroupIndex"),
)
if mibBuilder.loadTexts:
    vnicNewCfgGroupEntry.setStatus("current")
_VnicNewCfgGroupIndex_Type = Integer32
_VnicNewCfgGroupIndex_Object = MibTableColumn
vnicNewCfgGroupIndex = _VnicNewCfgGroupIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 10, 1, 1),
    _VnicNewCfgGroupIndex_Type()
)
vnicNewCfgGroupIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vnicNewCfgGroupIndex.setStatus("current")


class _VnicNewCfgGroupState_Type(Integer32):
    """Custom type vnicNewCfgGroupState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VnicNewCfgGroupState_Type.__name__ = "Integer32"
_VnicNewCfgGroupState_Object = MibTableColumn
vnicNewCfgGroupState = _VnicNewCfgGroupState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 10, 1, 2),
    _VnicNewCfgGroupState_Type()
)
vnicNewCfgGroupState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vnicNewCfgGroupState.setStatus("current")
_VnicNewCfgGroupVlan_Type = Integer32
_VnicNewCfgGroupVlan_Object = MibTableColumn
vnicNewCfgGroupVlan = _VnicNewCfgGroupVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 10, 1, 3),
    _VnicNewCfgGroupVlan_Type()
)
vnicNewCfgGroupVlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vnicNewCfgGroupVlan.setStatus("current")


class _VnicNewCfgGroupFailoverState_Type(Integer32):
    """Custom type vnicNewCfgGroupFailoverState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VnicNewCfgGroupFailoverState_Type.__name__ = "Integer32"
_VnicNewCfgGroupFailoverState_Object = MibTableColumn
vnicNewCfgGroupFailoverState = _VnicNewCfgGroupFailoverState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 10, 1, 4),
    _VnicNewCfgGroupFailoverState_Type()
)
vnicNewCfgGroupFailoverState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vnicNewCfgGroupFailoverState.setStatus("current")
_VnicNewCfgGroupAddVnic_Type = DisplayString
_VnicNewCfgGroupAddVnic_Object = MibTableColumn
vnicNewCfgGroupAddVnic = _VnicNewCfgGroupAddVnic_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 10, 1, 5),
    _VnicNewCfgGroupAddVnic_Type()
)
vnicNewCfgGroupAddVnic.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vnicNewCfgGroupAddVnic.setStatus("current")
_VnicNewCfgGroupRemVnic_Type = DisplayString
_VnicNewCfgGroupRemVnic_Object = MibTableColumn
vnicNewCfgGroupRemVnic = _VnicNewCfgGroupRemVnic_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 10, 1, 6),
    _VnicNewCfgGroupRemVnic_Type()
)
vnicNewCfgGroupRemVnic.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vnicNewCfgGroupRemVnic.setStatus("current")
_VnicNewCfgGroupAddPort_Type = Integer32
_VnicNewCfgGroupAddPort_Object = MibTableColumn
vnicNewCfgGroupAddPort = _VnicNewCfgGroupAddPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 10, 1, 7),
    _VnicNewCfgGroupAddPort_Type()
)
vnicNewCfgGroupAddPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vnicNewCfgGroupAddPort.setStatus("current")
_VnicNewCfgGroupRemPort_Type = Integer32
_VnicNewCfgGroupRemPort_Object = MibTableColumn
vnicNewCfgGroupRemPort = _VnicNewCfgGroupRemPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 10, 1, 8),
    _VnicNewCfgGroupRemPort_Type()
)
vnicNewCfgGroupRemPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vnicNewCfgGroupRemPort.setStatus("current")
_VnicNewCfgGroupAddTrunk_Type = Integer32
_VnicNewCfgGroupAddTrunk_Object = MibTableColumn
vnicNewCfgGroupAddTrunk = _VnicNewCfgGroupAddTrunk_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 10, 1, 9),
    _VnicNewCfgGroupAddTrunk_Type()
)
vnicNewCfgGroupAddTrunk.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vnicNewCfgGroupAddTrunk.setStatus("current")


class _VnicNewCfgGroupRemTrunk_Type(Integer32):
    """Custom type vnicNewCfgGroupRemTrunk based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_VnicNewCfgGroupRemTrunk_Type.__name__ = "Integer32"
_VnicNewCfgGroupRemTrunk_Object = MibTableColumn
vnicNewCfgGroupRemTrunk = _VnicNewCfgGroupRemTrunk_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 10, 1, 10),
    _VnicNewCfgGroupRemTrunk_Type()
)
vnicNewCfgGroupRemTrunk.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vnicNewCfgGroupRemTrunk.setStatus("current")


class _VnicNewCfgGroupDelete_Type(Integer32):
    """Custom type vnicNewCfgGroupDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_VnicNewCfgGroupDelete_Type.__name__ = "Integer32"
_VnicNewCfgGroupDelete_Object = MibTableColumn
vnicNewCfgGroupDelete = _VnicNewCfgGroupDelete_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 10, 1, 13),
    _VnicNewCfgGroupDelete_Type()
)
vnicNewCfgGroupDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vnicNewCfgGroupDelete.setStatus("current")
_VnicNewCfgGroupVnics_Type = DisplayString
_VnicNewCfgGroupVnics_Object = MibTableColumn
vnicNewCfgGroupVnics = _VnicNewCfgGroupVnics_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 10, 1, 14),
    _VnicNewCfgGroupVnics_Type()
)
vnicNewCfgGroupVnics.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vnicNewCfgGroupVnics.setStatus("current")
_VnicNewCfgGroupPorts_Type = DisplayString
_VnicNewCfgGroupPorts_Object = MibTableColumn
vnicNewCfgGroupPorts = _VnicNewCfgGroupPorts_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 10, 1, 15),
    _VnicNewCfgGroupPorts_Type()
)
vnicNewCfgGroupPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vnicNewCfgGroupPorts.setStatus("current")
_VnicNewCfgGroupTrunk_Type = Integer32
_VnicNewCfgGroupTrunk_Object = MibTableColumn
vnicNewCfgGroupTrunk = _VnicNewCfgGroupTrunk_Object(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 16, 10, 1, 16),
    _VnicNewCfgGroupTrunk_Type()
)
vnicNewCfgGroupTrunk.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vnicNewCfgGroupTrunk.setStatus("current")
_Ibmnos_BladeSwitch_ObjectIdentity = ObjectIdentity
ibmnos_BladeSwitch = _Ibmnos_BladeSwitch_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 100)
)
_Ibmnoscfa_ObjectIdentity = ObjectIdentity
ibmnoscfa = _Ibmnoscfa_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 100, 27)
)
__pysmi_if_ObjectIdentity = ObjectIdentity
_pysmi_if = __pysmi_if_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 100, 27, 1)
)
_IfMainTable_Object = MibTable
ifMainTable = _IfMainTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 27, 1, 4)
)
if mibBuilder.loadTexts:
    ifMainTable.setStatus("current")
_IfMainEntry_Object = MibTableRow
ifMainEntry = _IfMainEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 27, 1, 4, 1)
)
ifMainEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ifMainIndex"),
)
if mibBuilder.loadTexts:
    ifMainEntry.setStatus("current")
_IfMainIndex_Type = InterfaceIndex
_IfMainIndex_Object = MibTableColumn
ifMainIndex = _IfMainIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 27, 1, 4, 1, 1),
    _IfMainIndex_Type()
)
ifMainIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ifMainIndex.setStatus("current")
_IfMainPortName_Type = DisplayString
_IfMainPortName_Object = MibTableColumn
ifMainPortName = _IfMainPortName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 27, 1, 4, 1, 9),
    _IfMainPortName_Type()
)
ifMainPortName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ifMainPortName.setStatus("current")
_Ibmnos_ObjectIdentity = ObjectIdentity
ibmnos = _Ibmnos_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 100, 81)
)
_IbmnosSystem_ObjectIdentity = ObjectIdentity
ibmnosSystem = _IbmnosSystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 100, 81, 1)
)


class _IbmnosConfigSaveOption_Type(Integer32):
    """Custom type ibmnosConfigSaveOption based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("noSave", 1),
          ("flashSave", 2),
          ("remoteTftpSave", 3),
          ("startupConfig", 4),
          ("backupConfig", 5),
          ("remoteTftpRestore", 6))
    )


_IbmnosConfigSaveOption_Type.__name__ = "Integer32"
_IbmnosConfigSaveOption_Object = MibScalar
ibmnosConfigSaveOption = _IbmnosConfigSaveOption_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 81, 1, 10),
    _IbmnosConfigSaveOption_Type()
)
ibmnosConfigSaveOption.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ibmnosConfigSaveOption.setStatus("current")


class _IbmnosConfigSaveFileName_Type(DisplayString):
    """Custom type ibmnosConfigSaveFileName based on DisplayString"""
    defaultValue = OctetString("iss.conf")

    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 128),
    )


_IbmnosConfigSaveFileName_Type.__name__ = "DisplayString"
_IbmnosConfigSaveFileName_Object = MibScalar
ibmnosConfigSaveFileName = _IbmnosConfigSaveFileName_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 81, 1, 12),
    _IbmnosConfigSaveFileName_Type()
)
ibmnosConfigSaveFileName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ibmnosConfigSaveFileName.setStatus("current")


class _IbmnosInitiateConfigSave_Type(TruthValue):
    """Custom type ibmnosInitiateConfigSave based on TruthValue"""
    defaultValue = 2


_IbmnosInitiateConfigSave_Type.__name__ = "TruthValue"
_IbmnosInitiateConfigSave_Object = MibScalar
ibmnosInitiateConfigSave = _IbmnosInitiateConfigSave_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 81, 1, 13),
    _IbmnosInitiateConfigSave_Type()
)
ibmnosInitiateConfigSave.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ibmnosInitiateConfigSave.setStatus("current")


class _IbmnosConfigSaveStatus_Type(Integer32):
    """Custom type ibmnosConfigSaveStatus based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("saveInProgress", 1),
          ("saveSuccessful", 2),
          ("saveFailed", 3),
          ("notInitiated", 4),
          ("saveNotRequired", 5))
    )


_IbmnosConfigSaveStatus_Type.__name__ = "Integer32"
_IbmnosConfigSaveStatus_Object = MibScalar
ibmnosConfigSaveStatus = _IbmnosConfigSaveStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 81, 1, 14),
    _IbmnosConfigSaveStatus_Type()
)
ibmnosConfigSaveStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ibmnosConfigSaveStatus.setStatus("current")


class _IbmnosConfigRestoreOption_Type(Integer32):
    """Custom type ibmnosConfigRestoreOption based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("factory", 1),
          ("activeConfig", 2),
          ("backupConfig", 3))
    )


_IbmnosConfigRestoreOption_Type.__name__ = "Integer32"
_IbmnosConfigRestoreOption_Object = MibScalar
ibmnosConfigRestoreOption = _IbmnosConfigRestoreOption_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 81, 1, 15),
    _IbmnosConfigRestoreOption_Type()
)
ibmnosConfigRestoreOption.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ibmnosConfigRestoreOption.setStatus("current")


class _IbmnosLoggingOption_Type(Integer32):
    """Custom type ibmnosLoggingOption based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("console", 1)
    )


_IbmnosLoggingOption_Type.__name__ = "Integer32"
_IbmnosLoggingOption_Object = MibScalar
ibmnosLoggingOption = _IbmnosLoggingOption_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 81, 1, 26),
    _IbmnosLoggingOption_Type()
)
ibmnosLoggingOption.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ibmnosLoggingOption.setStatus("current")


class _IbmnosLoginAuthentication_Type(Integer32):
    """Custom type ibmnosLoginAuthentication based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("local", 1),
          ("remoteRadius", 2),
          ("remoteTacacs", 3))
    )


_IbmnosLoginAuthentication_Type.__name__ = "Integer32"
_IbmnosLoginAuthentication_Object = MibScalar
ibmnosLoginAuthentication = _IbmnosLoginAuthentication_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 81, 1, 32),
    _IbmnosLoginAuthentication_Type()
)
ibmnosLoginAuthentication.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ibmnosLoginAuthentication.setStatus("current")


class _IbmnosConfigRestoreFileVersion_Type(DisplayString):
    """Custom type ibmnosConfigRestoreFileVersion based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 12),
    )


_IbmnosConfigRestoreFileVersion_Type.__name__ = "DisplayString"
_IbmnosConfigRestoreFileVersion_Object = MibScalar
ibmnosConfigRestoreFileVersion = _IbmnosConfigRestoreFileVersion_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 81, 1, 40),
    _IbmnosConfigRestoreFileVersion_Type()
)
ibmnosConfigRestoreFileVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ibmnosConfigRestoreFileVersion.setStatus("current")
_IbmnosConfigControl_ObjectIdentity = ObjectIdentity
ibmnosConfigControl = _IbmnosConfigControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 100, 81, 2)
)
_IbmnosPortCtrlTable_Object = MibTable
ibmnosPortCtrlTable = _IbmnosPortCtrlTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 81, 2, 2)
)
if mibBuilder.loadTexts:
    ibmnosPortCtrlTable.setStatus("current")
_IbmnosPortCtrlEntry_Object = MibTableRow
ibmnosPortCtrlEntry = _IbmnosPortCtrlEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 81, 2, 2, 1)
)
ibmnosPortCtrlEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ibmnosPortCtrlIndex"),
)
if mibBuilder.loadTexts:
    ibmnosPortCtrlEntry.setStatus("current")


class _IbmnosPortCtrlIndex_Type(Integer32):
    """Custom type ibmnosPortCtrlIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_IbmnosPortCtrlIndex_Type.__name__ = "Integer32"
_IbmnosPortCtrlIndex_Object = MibTableColumn
ibmnosPortCtrlIndex = _IbmnosPortCtrlIndex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 81, 2, 2, 1, 1),
    _IbmnosPortCtrlIndex_Type()
)
ibmnosPortCtrlIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ibmnosPortCtrlIndex.setStatus("current")


class _IbmnosPortCtrlMode_Type(Integer32):
    """Custom type ibmnosPortCtrlMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("noNegotiation", 2))
    )


_IbmnosPortCtrlMode_Type.__name__ = "Integer32"
_IbmnosPortCtrlMode_Object = MibTableColumn
ibmnosPortCtrlMode = _IbmnosPortCtrlMode_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 81, 2, 2, 1, 2),
    _IbmnosPortCtrlMode_Type()
)
ibmnosPortCtrlMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ibmnosPortCtrlMode.setStatus("current")


class _IbmnosPortCtrlDuplex_Type(Integer32):
    """Custom type ibmnosPortCtrlDuplex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("full", 1),
          ("half", 2),
          ("any", 3))
    )


_IbmnosPortCtrlDuplex_Type.__name__ = "Integer32"
_IbmnosPortCtrlDuplex_Object = MibTableColumn
ibmnosPortCtrlDuplex = _IbmnosPortCtrlDuplex_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 81, 2, 2, 1, 3),
    _IbmnosPortCtrlDuplex_Type()
)
ibmnosPortCtrlDuplex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ibmnosPortCtrlDuplex.setStatus("current")


class _IbmnosPortCtrlSpeed_Type(Integer32):
    """Custom type ibmnosPortCtrlSpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("tenMBPS", 1),
          ("hundredMBPS", 2),
          ("oneGB", 3),
          ("tenGB", 4),
          ("any", 5))
    )


_IbmnosPortCtrlSpeed_Type.__name__ = "Integer32"
_IbmnosPortCtrlSpeed_Object = MibTableColumn
ibmnosPortCtrlSpeed = _IbmnosPortCtrlSpeed_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 81, 2, 2, 1, 4),
    _IbmnosPortCtrlSpeed_Type()
)
ibmnosPortCtrlSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ibmnosPortCtrlSpeed.setStatus("current")


class _IbmnosPortCtrlFlowControl_Type(Integer32):
    """Custom type ibmnosPortCtrlFlowControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2),
          ("send", 3),
          ("receive", 4))
    )


_IbmnosPortCtrlFlowControl_Type.__name__ = "Integer32"
_IbmnosPortCtrlFlowControl_Object = MibTableColumn
ibmnosPortCtrlFlowControl = _IbmnosPortCtrlFlowControl_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 81, 2, 2, 1, 5),
    _IbmnosPortCtrlFlowControl_Type()
)
ibmnosPortCtrlFlowControl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ibmnosPortCtrlFlowControl.setStatus("current")
_Toraddon_ObjectIdentity = ObjectIdentity
toraddon = _Toraddon_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100)
)
_Cfa_ObjectIdentity = ObjectIdentity
cfa = _Cfa_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 2)
)
_IbmnosPortCfgTable_Object = MibTable
ibmnosPortCfgTable = _IbmnosPortCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 2, 1)
)
if mibBuilder.loadTexts:
    ibmnosPortCfgTable.setStatus("current")
_IbmnosPortCfgTableEntry_Object = MibTableRow
ibmnosPortCfgTableEntry = _IbmnosPortCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 2, 1, 1)
)
ibmnosPortCfgTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ibmnosPortCfgIndx"),
)
if mibBuilder.loadTexts:
    ibmnosPortCfgTableEntry.setStatus("current")
_IbmnosPortCfgIndx_Type = Integer32
_IbmnosPortCfgIndx_Object = MibTableColumn
ibmnosPortCfgIndx = _IbmnosPortCfgIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 2, 1, 1, 1),
    _IbmnosPortCfgIndx_Type()
)
ibmnosPortCfgIndx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ibmnosPortCfgIndx.setStatus("current")


class _IbmnosPortCfgVlanTag_Type(Integer32):
    """Custom type ibmnosPortCfgVlanTag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_IbmnosPortCfgVlanTag_Type.__name__ = "Integer32"
_IbmnosPortCfgVlanTag_Object = MibTableColumn
ibmnosPortCfgVlanTag = _IbmnosPortCfgVlanTag_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 2, 1, 1, 2),
    _IbmnosPortCfgVlanTag_Type()
)
ibmnosPortCfgVlanTag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ibmnosPortCfgVlanTag.setStatus("current")
_Sys_ObjectIdentity = ObjectIdentity
sys = _Sys_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 7)
)


class _AgImageForNextReset_Type(Integer32):
    """Custom type agImageForNextReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("image1", 2),
          ("image2", 3))
    )


_AgImageForNextReset_Type.__name__ = "Integer32"
_AgImageForNextReset_Object = MibScalar
agImageForNextReset = _AgImageForNextReset_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 7, 2),
    _AgImageForNextReset_Type()
)
agImageForNextReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agImageForNextReset.setStatus("current")
_IbmnosFdb_ObjectIdentity = ObjectIdentity
ibmnosFdb = _IbmnosFdb_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 13)
)
_IbmnosFdbTable_Object = MibTable
ibmnosFdbTable = _IbmnosFdbTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 13, 5)
)
if mibBuilder.loadTexts:
    ibmnosFdbTable.setStatus("current")
_IbmnosFdbEntry_Object = MibTableRow
ibmnosFdbEntry = _IbmnosFdbEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 13, 5, 1)
)
ibmnosFdbEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ibmnosFdbVlan"),
    (0, "IBM-GbTOR-G8264T-MIB", "ibmnosFdbMacAddr"),
)
if mibBuilder.loadTexts:
    ibmnosFdbEntry.setStatus("current")
_IbmnosFdbVlan_Type = Integer32
_IbmnosFdbVlan_Object = MibTableColumn
ibmnosFdbVlan = _IbmnosFdbVlan_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 13, 5, 1, 1),
    _IbmnosFdbVlan_Type()
)
ibmnosFdbVlan.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ibmnosFdbVlan.setStatus("current")
_IbmnosFdbMacAddr_Type = PhysAddress
_IbmnosFdbMacAddr_Object = MibTableColumn
ibmnosFdbMacAddr = _IbmnosFdbMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 13, 5, 1, 2),
    _IbmnosFdbMacAddr_Type()
)
ibmnosFdbMacAddr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ibmnosFdbMacAddr.setStatus("current")


class _IbmnosFdbMacAddrStr_Type(DisplayString):
    """Custom type ibmnosFdbMacAddrStr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_IbmnosFdbMacAddrStr_Type.__name__ = "DisplayString"
_IbmnosFdbMacAddrStr_Object = MibTableColumn
ibmnosFdbMacAddrStr = _IbmnosFdbMacAddrStr_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 13, 5, 1, 3),
    _IbmnosFdbMacAddrStr_Type()
)
ibmnosFdbMacAddrStr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ibmnosFdbMacAddrStr.setStatus("current")
_IbmnosFdbVlanId_Type = Integer32
_IbmnosFdbVlanId_Object = MibTableColumn
ibmnosFdbVlanId = _IbmnosFdbVlanId_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 13, 5, 1, 4),
    _IbmnosFdbVlanId_Type()
)
ibmnosFdbVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ibmnosFdbVlanId.setStatus("current")
_IbmnosFdbSrcPort_Type = Integer32
_IbmnosFdbSrcPort_Object = MibTableColumn
ibmnosFdbSrcPort = _IbmnosFdbSrcPort_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 13, 5, 1, 5),
    _IbmnosFdbSrcPort_Type()
)
ibmnosFdbSrcPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ibmnosFdbSrcPort.setStatus("current")
_IbmnosFdbSrcTrunk_Type = Integer32
_IbmnosFdbSrcTrunk_Object = MibTableColumn
ibmnosFdbSrcTrunk = _IbmnosFdbSrcTrunk_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 13, 5, 1, 6),
    _IbmnosFdbSrcTrunk_Type()
)
ibmnosFdbSrcTrunk.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ibmnosFdbSrcTrunk.setStatus("current")


class _IbmnosFdbState_Type(Integer32):
    """Custom type ibmnosFdbState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 1),
          ("forward", 2),
          ("trunk", 3))
    )


_IbmnosFdbState_Type.__name__ = "Integer32"
_IbmnosFdbState_Object = MibTableColumn
ibmnosFdbState = _IbmnosFdbState_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 13, 5, 1, 7),
    _IbmnosFdbState_Type()
)
ibmnosFdbState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ibmnosFdbState.setStatus("current")
_IbmnosFdbStatus_Type = Integer32
_IbmnosFdbStatus_Object = MibTableColumn
ibmnosFdbStatus = _IbmnosFdbStatus_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 13, 5, 1, 10),
    _IbmnosFdbStatus_Type()
)
ibmnosFdbStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ibmnosFdbStatus.setStatus("current")


class _IbmnosFdbClearMac_Type(Integer32):
    """Custom type ibmnosFdbClearMac based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_IbmnosFdbClearMac_Type.__name__ = "Integer32"
_IbmnosFdbClearMac_Object = MibTableColumn
ibmnosFdbClearMac = _IbmnosFdbClearMac_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 13, 5, 1, 11),
    _IbmnosFdbClearMac_Type()
)
ibmnosFdbClearMac.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ibmnosFdbClearMac.setStatus("current")
_Tor_switch_ObjectIdentity = ObjectIdentity
tor_switch = _Tor_switch_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 14)
)


class _HardwarePartNumber_Type(DisplayString):
    """Custom type hardwarePartNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_HardwarePartNumber_Type.__name__ = "DisplayString"
_HardwarePartNumber_Object = MibScalar
hardwarePartNumber = _HardwarePartNumber_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 14, 1),
    _HardwarePartNumber_Type()
)
hardwarePartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hardwarePartNumber.setStatus("current")


class _HardwareRevision_Type(DisplayString):
    """Custom type hardwareRevision based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_HardwareRevision_Type.__name__ = "DisplayString"
_HardwareRevision_Object = MibScalar
hardwareRevision = _HardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 14, 2),
    _HardwareRevision_Type()
)
hardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hardwareRevision.setStatus("current")


class _HardwareLastBoot_Type(Integer32):
    """Custom type hardwareLastBoot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("unkownReason", 0),
          ("powerCycle", 1),
          ("resetFromConsole", 2),
          ("resetFromTelnetOrSSH", 3),
          ("resetFromSNMP", 4),
          ("resetFromWEBUI", 5),
          ("resetFromScheduled", 6),
          ("resetFromWatchdogTimer", 7),
          ("resetFromSWPANIC", 8))
    )


_HardwareLastBoot_Type.__name__ = "Integer32"
_HardwareLastBoot_Object = MibScalar
hardwareLastBoot = _HardwareLastBoot_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 14, 3),
    _HardwareLastBoot_Type()
)
hardwareLastBoot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hardwareLastBoot.setStatus("current")


class _HardwareMACAddress_Type(DisplayString):
    """Custom type hardwareMACAddress based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 48),
    )


_HardwareMACAddress_Type.__name__ = "DisplayString"
_HardwareMACAddress_Object = MibScalar
hardwareMACAddress = _HardwareMACAddress_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 14, 4),
    _HardwareMACAddress_Type()
)
hardwareMACAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hardwareMACAddress.setStatus("current")


class _HardwareSwitchRunningSwVersion_Type(DisplayString):
    """Custom type hardwareSwitchRunningSwVersion based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_HardwareSwitchRunningSwVersion_Type.__name__ = "DisplayString"
_HardwareSwitchRunningSwVersion_Object = MibScalar
hardwareSwitchRunningSwVersion = _HardwareSwitchRunningSwVersion_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 14, 5),
    _HardwareSwitchRunningSwVersion_Type()
)
hardwareSwitchRunningSwVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hardwareSwitchRunningSwVersion.setStatus("current")


class _HardwareFlashConfiguration_Type(Integer32):
    """Custom type hardwareFlashConfiguration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("factory", 0),
          ("active", 1),
          ("backup", 2))
    )


_HardwareFlashConfiguration_Type.__name__ = "Integer32"
_HardwareFlashConfiguration_Object = MibScalar
hardwareFlashConfiguration = _HardwareFlashConfiguration_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 14, 6),
    _HardwareFlashConfiguration_Type()
)
hardwareFlashConfiguration.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hardwareFlashConfiguration.setStatus("current")


class _HardwarePCBAPartNumber_Type(DisplayString):
    """Custom type hardwarePCBAPartNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_HardwarePCBAPartNumber_Type.__name__ = "DisplayString"
_HardwarePCBAPartNumber_Object = MibScalar
hardwarePCBAPartNumber = _HardwarePCBAPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 14, 7),
    _HardwarePCBAPartNumber_Type()
)
hardwarePCBAPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hardwarePCBAPartNumber.setStatus("current")


class _HardwareFABNumber_Type(DisplayString):
    """Custom type hardwareFABNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_HardwareFABNumber_Type.__name__ = "DisplayString"
_HardwareFABNumber_Object = MibScalar
hardwareFABNumber = _HardwareFABNumber_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 14, 8),
    _HardwareFABNumber_Type()
)
hardwareFABNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hardwareFABNumber.setStatus("current")


class _HardwareSerialNumber_Type(DisplayString):
    """Custom type hardwareSerialNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_HardwareSerialNumber_Type.__name__ = "DisplayString"
_HardwareSerialNumber_Object = MibScalar
hardwareSerialNumber = _HardwareSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 14, 9),
    _HardwareSerialNumber_Type()
)
hardwareSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hardwareSerialNumber.setStatus("current")


class _HardwareManufacturingDate_Type(DisplayString):
    """Custom type hardwareManufacturingDate based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_HardwareManufacturingDate_Type.__name__ = "DisplayString"
_HardwareManufacturingDate_Object = MibScalar
hardwareManufacturingDate = _HardwareManufacturingDate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 14, 10),
    _HardwareManufacturingDate_Type()
)
hardwareManufacturingDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hardwareManufacturingDate.setStatus("current")


class _HwTemperatureSensor1_Type(DisplayString):
    """Custom type hwTemperatureSensor1 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_HwTemperatureSensor1_Type.__name__ = "DisplayString"
_HwTemperatureSensor1_Object = MibScalar
hwTemperatureSensor1 = _HwTemperatureSensor1_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 14, 11),
    _HwTemperatureSensor1_Type()
)
hwTemperatureSensor1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hwTemperatureSensor1.setStatus("current")


class _HwTemperatureSensor2_Type(DisplayString):
    """Custom type hwTemperatureSensor2 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_HwTemperatureSensor2_Type.__name__ = "DisplayString"
_HwTemperatureSensor2_Object = MibScalar
hwTemperatureSensor2 = _HwTemperatureSensor2_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 14, 12),
    _HwTemperatureSensor2_Type()
)
hwTemperatureSensor2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hwTemperatureSensor2.setStatus("current")


class _HwTemperatureSensor3_Type(DisplayString):
    """Custom type hwTemperatureSensor3 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_HwTemperatureSensor3_Type.__name__ = "DisplayString"
_HwTemperatureSensor3_Object = MibScalar
hwTemperatureSensor3 = _HwTemperatureSensor3_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 14, 13),
    _HwTemperatureSensor3_Type()
)
hwTemperatureSensor3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hwTemperatureSensor3.setStatus("current")


class _HwFan1RPMValue_Type(DisplayString):
    """Custom type hwFan1RPMValue based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_HwFan1RPMValue_Type.__name__ = "DisplayString"
_HwFan1RPMValue_Object = MibScalar
hwFan1RPMValue = _HwFan1RPMValue_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 14, 14),
    _HwFan1RPMValue_Type()
)
hwFan1RPMValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hwFan1RPMValue.setStatus("current")


class _HwFan2RPMValue_Type(DisplayString):
    """Custom type hwFan2RPMValue based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 48),
    )


_HwFan2RPMValue_Type.__name__ = "DisplayString"
_HwFan2RPMValue_Object = MibScalar
hwFan2RPMValue = _HwFan2RPMValue_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 14, 15),
    _HwFan2RPMValue_Type()
)
hwFan2RPMValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hwFan2RPMValue.setStatus("current")


class _HwFan3RPMValue_Type(DisplayString):
    """Custom type hwFan3RPMValue based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 48),
    )


_HwFan3RPMValue_Type.__name__ = "DisplayString"
_HwFan3RPMValue_Object = MibScalar
hwFan3RPMValue = _HwFan3RPMValue_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 14, 16),
    _HwFan3RPMValue_Type()
)
hwFan3RPMValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hwFan3RPMValue.setStatus("current")


class _HwFan4RPMValue_Type(DisplayString):
    """Custom type hwFan4RPMValue based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 48),
    )


_HwFan4RPMValue_Type.__name__ = "DisplayString"
_HwFan4RPMValue_Object = MibScalar
hwFan4RPMValue = _HwFan4RPMValue_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 14, 17),
    _HwFan4RPMValue_Type()
)
hwFan4RPMValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hwFan4RPMValue.setStatus("current")


class _HwFan5RPMValue_Type(DisplayString):
    """Custom type hwFan5RPMValue based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 48),
    )


_HwFan5RPMValue_Type.__name__ = "DisplayString"
_HwFan5RPMValue_Object = MibScalar
hwFan5RPMValue = _HwFan5RPMValue_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 14, 18),
    _HwFan5RPMValue_Type()
)
hwFan5RPMValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hwFan5RPMValue.setStatus("current")


class _HwBoardRevision_Type(DisplayString):
    """Custom type hwBoardRevision based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 48),
    )


_HwBoardRevision_Type.__name__ = "DisplayString"
_HwBoardRevision_Object = MibScalar
hwBoardRevision = _HwBoardRevision_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 14, 19),
    _HwBoardRevision_Type()
)
hwBoardRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hwBoardRevision.setStatus("current")


class _HwPowerSupply1State_Type(Integer32):
    """Custom type hwPowerSupply1State based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("absent", 2))
    )


_HwPowerSupply1State_Type.__name__ = "Integer32"
_HwPowerSupply1State_Object = MibScalar
hwPowerSupply1State = _HwPowerSupply1State_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 14, 20),
    _HwPowerSupply1State_Type()
)
hwPowerSupply1State.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hwPowerSupply1State.setStatus("current")


class _HwPowerSupply2State_Type(Integer32):
    """Custom type hwPowerSupply2State based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1),
          ("absent", 2))
    )


_HwPowerSupply2State_Type.__name__ = "Integer32"
_HwPowerSupply2State_Object = MibScalar
hwPowerSupply2State = _HwPowerSupply2State_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 14, 21),
    _HwPowerSupply2State_Type()
)
hwPowerSupply2State.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hwPowerSupply2State.setStatus("current")
_IbmnosSfpInfoTable_Object = MibTable
ibmnosSfpInfoTable = _IbmnosSfpInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 14, 22)
)
if mibBuilder.loadTexts:
    ibmnosSfpInfoTable.setStatus("current")
_IbmnosSfpInfoTableEntry_Object = MibTableRow
ibmnosSfpInfoTableEntry = _IbmnosSfpInfoTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 14, 22, 1)
)
ibmnosSfpInfoTableEntry.setIndexNames(
    (0, "IBM-GbTOR-G8264T-MIB", "ibmnosSfpInfoIndx"),
)
if mibBuilder.loadTexts:
    ibmnosSfpInfoTableEntry.setStatus("current")
_IbmnosSfpInfoIndx_Type = Integer32
_IbmnosSfpInfoIndx_Object = MibTableColumn
ibmnosSfpInfoIndx = _IbmnosSfpInfoIndx_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 14, 22, 1, 1),
    _IbmnosSfpInfoIndx_Type()
)
ibmnosSfpInfoIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ibmnosSfpInfoIndx.setStatus("current")


class _IbmnosSfpInfoDescription_Type(Integer32):
    """Custom type ibmnosSfpInfoDescription based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              6)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("sfp", 1),
          ("cx4", 2),
          ("sfpplus", 3),
          ("dac", 6))
    )


_IbmnosSfpInfoDescription_Type.__name__ = "Integer32"
_IbmnosSfpInfoDescription_Object = MibTableColumn
ibmnosSfpInfoDescription = _IbmnosSfpInfoDescription_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 14, 22, 1, 2),
    _IbmnosSfpInfoDescription_Type()
)
ibmnosSfpInfoDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ibmnosSfpInfoDescription.setStatus("current")


class _IbmnosSfpInfoSerialNumber_Type(DisplayString):
    """Custom type ibmnosSfpInfoSerialNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_IbmnosSfpInfoSerialNumber_Type.__name__ = "DisplayString"
_IbmnosSfpInfoSerialNumber_Object = MibTableColumn
ibmnosSfpInfoSerialNumber = _IbmnosSfpInfoSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 14, 22, 1, 3),
    _IbmnosSfpInfoSerialNumber_Type()
)
ibmnosSfpInfoSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ibmnosSfpInfoSerialNumber.setStatus("current")


class _IbmnosSfpInfoPartNumber_Type(DisplayString):
    """Custom type ibmnosSfpInfoPartNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_IbmnosSfpInfoPartNumber_Type.__name__ = "DisplayString"
_IbmnosSfpInfoPartNumber_Object = MibTableColumn
ibmnosSfpInfoPartNumber = _IbmnosSfpInfoPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 14, 22, 1, 4),
    _IbmnosSfpInfoPartNumber_Type()
)
ibmnosSfpInfoPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ibmnosSfpInfoPartNumber.setStatus("current")


class _IbmnosSfpInfoHWRevision_Type(DisplayString):
    """Custom type ibmnosSfpInfoHWRevision based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_IbmnosSfpInfoHWRevision_Type.__name__ = "DisplayString"
_IbmnosSfpInfoHWRevision_Object = MibTableColumn
ibmnosSfpInfoHWRevision = _IbmnosSfpInfoHWRevision_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 14, 22, 1, 5),
    _IbmnosSfpInfoHWRevision_Type()
)
ibmnosSfpInfoHWRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ibmnosSfpInfoHWRevision.setStatus("current")


class _SwImage1Version_Type(DisplayString):
    """Custom type swImage1Version based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_SwImage1Version_Type.__name__ = "DisplayString"
_SwImage1Version_Object = MibScalar
swImage1Version = _SwImage1Version_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 14, 24),
    _SwImage1Version_Type()
)
swImage1Version.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    swImage1Version.setStatus("current")


class _SwImage2Version_Type(DisplayString):
    """Custom type swImage2Version based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_SwImage2Version_Type.__name__ = "DisplayString"
_SwImage2Version_Object = MibScalar
swImage2Version = _SwImage2Version_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 14, 25),
    _SwImage2Version_Type()
)
swImage2Version.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    swImage2Version.setStatus("current")


class _SwBootVersion_Type(DisplayString):
    """Custom type swBootVersion based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_SwBootVersion_Type.__name__ = "DisplayString"
_SwBootVersion_Object = MibScalar
swBootVersion = _SwBootVersion_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 14, 26),
    _SwBootVersion_Type()
)
swBootVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    swBootVersion.setStatus("current")


class _HwFan6RPMValue_Type(DisplayString):
    """Custom type hwFan6RPMValue based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 48),
    )


_HwFan6RPMValue_Type.__name__ = "DisplayString"
_HwFan6RPMValue_Object = MibScalar
hwFan6RPMValue = _HwFan6RPMValue_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 14, 27),
    _HwFan6RPMValue_Type()
)
hwFan6RPMValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hwFan6RPMValue.setStatus("current")


class _HwTemperatureSensor4_Type(DisplayString):
    """Custom type hwTemperatureSensor4 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_HwTemperatureSensor4_Type.__name__ = "DisplayString"
_HwTemperatureSensor4_Object = MibScalar
hwTemperatureSensor4 = _HwTemperatureSensor4_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 14, 32),
    _HwTemperatureSensor4_Type()
)
hwTemperatureSensor4.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hwTemperatureSensor4.setStatus("current")


class _HwFan7RPMValue_Type(DisplayString):
    """Custom type hwFan7RPMValue based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 48),
    )


_HwFan7RPMValue_Type.__name__ = "DisplayString"
_HwFan7RPMValue_Object = MibScalar
hwFan7RPMValue = _HwFan7RPMValue_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 14, 40),
    _HwFan7RPMValue_Type()
)
hwFan7RPMValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hwFan7RPMValue.setStatus("current")


class _HwFan8RPMValue_Type(DisplayString):
    """Custom type hwFan8RPMValue based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 48),
    )


_HwFan8RPMValue_Type.__name__ = "DisplayString"
_HwFan8RPMValue_Object = MibScalar
hwFan8RPMValue = _HwFan8RPMValue_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 14, 41),
    _HwFan8RPMValue_Type()
)
hwFan8RPMValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hwFan8RPMValue.setStatus("current")


class _HwBootTime_Type(DisplayString):
    """Custom type hwBootTime based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 48),
    )


_HwBootTime_Type.__name__ = "DisplayString"
_HwBootTime_Object = MibScalar
hwBootTime = _HwBootTime_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 14, 42),
    _HwBootTime_Type()
)
hwBootTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hwBootTime.setStatus("current")
_IbmnosBladeHarmony_ObjectIdentity = ObjectIdentity
ibmnosBladeHarmony = _IbmnosBladeHarmony_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 17)
)
_DataCollection_ObjectIdentity = ObjectIdentity
dataCollection = _DataCollection_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 17, 1)
)
_IbmnosPortTableMaxEnt_Type = Integer32
_IbmnosPortTableMaxEnt_Object = MibScalar
ibmnosPortTableMaxEnt = _IbmnosPortTableMaxEnt_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 17, 1, 1),
    _IbmnosPortTableMaxEnt_Type()
)
ibmnosPortTableMaxEnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ibmnosPortTableMaxEnt.setStatus("current")


class _IbmnosImage1Ver_Type(DisplayString):
    """Custom type ibmnosImage1Ver based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_IbmnosImage1Ver_Type.__name__ = "DisplayString"
_IbmnosImage1Ver_Object = MibScalar
ibmnosImage1Ver = _IbmnosImage1Ver_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 17, 1, 3),
    _IbmnosImage1Ver_Type()
)
ibmnosImage1Ver.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ibmnosImage1Ver.setStatus("current")


class _IbmnosImage2Ver_Type(DisplayString):
    """Custom type ibmnosImage2Ver based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_IbmnosImage2Ver_Type.__name__ = "DisplayString"
_IbmnosImage2Ver_Object = MibScalar
ibmnosImage2Ver = _IbmnosImage2Ver_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 17, 1, 4),
    _IbmnosImage2Ver_Type()
)
ibmnosImage2Ver.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ibmnosImage2Ver.setStatus("current")


class _HwSwitchSoftwareVersion_Type(DisplayString):
    """Custom type hwSwitchSoftwareVersion based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_HwSwitchSoftwareVersion_Type.__name__ = "DisplayString"
_HwSwitchSoftwareVersion_Object = MibScalar
hwSwitchSoftwareVersion = _HwSwitchSoftwareVersion_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 17, 1, 5),
    _HwSwitchSoftwareVersion_Type()
)
hwSwitchSoftwareVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hwSwitchSoftwareVersion.setStatus("current")


class _HwSerialNum_Type(DisplayString):
    """Custom type hwSerialNum based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 48),
    )


_HwSerialNum_Type.__name__ = "DisplayString"
_HwSerialNum_Object = MibScalar
hwSerialNum = _HwSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 17, 1, 6),
    _HwSerialNum_Type()
)
hwSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hwSerialNum.setStatus("current")


class _HwManufacturingDate_Type(DisplayString):
    """Custom type hwManufacturingDate based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 48),
    )


_HwManufacturingDate_Type.__name__ = "DisplayString"
_HwManufacturingDate_Object = MibScalar
hwManufacturingDate = _HwManufacturingDate_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 17, 1, 7),
    _HwManufacturingDate_Type()
)
hwManufacturingDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hwManufacturingDate.setStatus("current")


class _IbmnosReset_Type(Integer32):
    """Custom type ibmnosReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("reset", 2))
    )


_IbmnosReset_Type.__name__ = "Integer32"
_IbmnosReset_Object = MibScalar
ibmnosReset = _IbmnosReset_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 17, 1, 8),
    _IbmnosReset_Type()
)
ibmnosReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ibmnosReset.setStatus("current")


class _IbmnosBootVer_Type(DisplayString):
    """Custom type ibmnosBootVer based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_IbmnosBootVer_Type.__name__ = "DisplayString"
_IbmnosBootVer_Object = MibScalar
ibmnosBootVer = _IbmnosBootVer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 17, 1, 9),
    _IbmnosBootVer_Type()
)
ibmnosBootVer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ibmnosBootVer.setStatus("current")


class _IbmnosConfigForNxtReset_Type(Integer32):
    """Custom type ibmnosConfigForNxtReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("active", 2),
          ("backup", 3),
          ("default", 4))
    )


_IbmnosConfigForNxtReset_Type.__name__ = "Integer32"
_IbmnosConfigForNxtReset_Object = MibScalar
ibmnosConfigForNxtReset = _IbmnosConfigForNxtReset_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 17, 1, 10),
    _IbmnosConfigForNxtReset_Type()
)
ibmnosConfigForNxtReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ibmnosConfigForNxtReset.setStatus("current")


class _IbmnosSoftwareVersion_Type(DisplayString):
    """Custom type ibmnosSoftwareVersion based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_IbmnosSoftwareVersion_Type.__name__ = "DisplayString"
_IbmnosSoftwareVersion_Object = MibScalar
ibmnosSoftwareVersion = _IbmnosSoftwareVersion_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 17, 1, 11),
    _IbmnosSoftwareVersion_Type()
)
ibmnosSoftwareVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ibmnosSoftwareVersion.setStatus("current")
_ImageConfigTransfer_ObjectIdentity = ObjectIdentity
imageConfigTransfer = _ImageConfigTransfer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 17, 3)
)


class _AgTftpServer_Type(DisplayString):
    """Custom type agTftpServer based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_AgTftpServer_Type.__name__ = "DisplayString"
_AgTftpServer_Object = MibScalar
agTftpServer = _AgTftpServer_Object(
    (1, 3, 6, 1, 4, 1, 20301, 100, 100, 17, 3, 1),
    _AgTftpServer_Type()
)
agTftpServer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agTftpServer.setStatus("current")

# Managed Objects groups


# Notification objects

swPrimaryPowerSupplyFailureNotify = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 1)
)
swPrimaryPowerSupplyFailureNotify.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swPrimaryPowerSupplyFailureNotify.setStatus(
        "current"
    )

swPrimaryPowerSupplyFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 1)
)
swPrimaryPowerSupplyFailure.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swPrimaryPowerSupplyFailure.setStatus(
        ""
    )

swDefGwUp = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 2)
)
swDefGwUp.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("IBM-GbTOR-G8264T-MIB", "ipCurCfgGwIndex"),
        ("IBM-GbTOR-G8264T-MIB", "ipCurCfgGwAddr"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swDefGwUp.setStatus(
        ""
    )

swDefGwDown = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 3)
)
swDefGwDown.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("IBM-GbTOR-G8264T-MIB", "ipCurCfgGwIndex"),
        ("IBM-GbTOR-G8264T-MIB", "ipCurCfgGwAddr"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swDefGwDown.setStatus(
        ""
    )

swDefGwInService = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 4)
)
swDefGwInService.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("IBM-GbTOR-G8264T-MIB", "ipCurCfgGwIndex"),
        ("IBM-GbTOR-G8264T-MIB", "ipCurCfgGwAddr"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swDefGwInService.setStatus(
        ""
    )

swDefGwNotInService = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 5)
)
swDefGwNotInService.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("IBM-GbTOR-G8264T-MIB", "ipCurCfgGwIndex"),
        ("IBM-GbTOR-G8264T-MIB", "ipCurCfgGwAddr"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swDefGwNotInService.setStatus(
        ""
    )

swVrrpNewMaster = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 16)
)
swVrrpNewMaster.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("IBM-GbTOR-G8264T-MIB", "vrrpCurCfgVirtRtrIndx"),
        ("IBM-GbTOR-G8264T-MIB", "vrrpCurCfgVirtRtrAddr"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swVrrpNewMaster.setStatus(
        ""
    )

swVrrpNewBackup = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 17)
)
swVrrpNewBackup.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("IBM-GbTOR-G8264T-MIB", "vrrpCurCfgVirtRtrIndx"),
        ("IBM-GbTOR-G8264T-MIB", "vrrpCurCfgVirtRtrAddr"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swVrrpNewBackup.setStatus(
        ""
    )

swVrrpAuthFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 18)
)
swVrrpAuthFailure.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("IBM-GbTOR-G8264T-MIB", "vrrpCurCfgIfIndx"),
        ("IBM-GbTOR-G8264T-MIB", "vrrpCurCfgIfPasswd"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swVrrpAuthFailure.setStatus(
        ""
    )

swLoginFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 19)
)
swLoginFailure.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swLoginFailure.setStatus(
        ""
    )

swTempExceedThreshold = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 22)
)
swTempExceedThreshold.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swTempExceedThreshold.setStatus(
        ""
    )

swFanFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 24)
)
swFanFailure.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swFanFailure.setStatus(
        ""
    )

swValidLogin = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 25)
)
swValidLogin.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swValidLogin.setStatus(
        ""
    )

swApplyComplete = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 27)
)
swApplyComplete.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swApplyComplete.setStatus(
        ""
    )

swSaveComplete = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 28)
)
swSaveComplete.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swSaveComplete.setStatus(
        ""
    )

swFwDownloadSucess = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 29)
)
swFwDownloadSucess.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swFwDownloadSucess.setStatus(
        ""
    )

swFwDownloadFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 30)
)
swFwDownloadFailure.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swFwDownloadFailure.setStatus(
        ""
    )

swTempReturnThreshold = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 31)
)
swTempReturnThreshold.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swTempReturnThreshold.setStatus(
        ""
    )

swFanFailureFixed = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 33)
)
swFanFailureFixed.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swFanFailureFixed.setStatus(
        ""
    )

swStgNewRoot = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 42)
)
swStgNewRoot.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("IBM-GbTOR-G8264T-MIB", "stgCurCfgIndex"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swStgNewRoot.setStatus(
        ""
    )

swCistNewRoot = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 43)
)
swCistNewRoot.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swCistNewRoot.setStatus(
        ""
    )

swStgTopologyChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 44)
)
swStgTopologyChanged.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("IBM-GbTOR-G8264T-MIB", "stgCurCfgIndex"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swStgTopologyChanged.setStatus(
        ""
    )

swCistTopologyChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 45)
)
swCistTopologyChanged.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swCistTopologyChanged.setStatus(
        ""
    )

swHotlinksMasterUp = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 46)
)
swHotlinksMasterUp.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swHotlinksMasterUp.setStatus(
        ""
    )

swHotlinksMasterDn = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 47)
)
swHotlinksMasterDn.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swHotlinksMasterDn.setStatus(
        ""
    )

swHotlinksBackupUp = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 48)
)
swHotlinksBackupUp.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swHotlinksBackupUp.setStatus(
        ""
    )

swHotlinksBackupDn = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 49)
)
swHotlinksBackupDn.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swHotlinksBackupDn.setStatus(
        ""
    )

swHotlinksNone = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 50)
)
swHotlinksNone.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swHotlinksNone.setStatus(
        ""
    )

sfpInserted = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 51)
)
sfpInserted.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("IF-MIB", "ifIndex"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    sfpInserted.setStatus(
        ""
    )

sfpRemoved = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 52)
)
sfpRemoved.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("IF-MIB", "ifIndex"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    sfpRemoved.setStatus(
        ""
    )

swNTPSyncFailed = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 61)
)
swNTPSyncFailed.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swNTPSyncFailed.setStatus(
        ""
    )

swNTPUpdateClock = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 62)
)
swNTPUpdateClock.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swNTPUpdateClock.setStatus(
        ""
    )

swValidLogout = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 63)
)
swValidLogout.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swValidLogout.setStatus(
        ""
    )

swECMPGatewayUp = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 65)
)
swECMPGatewayUp.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swECMPGatewayUp.setStatus(
        ""
    )

swECMPGatewayDown = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 66)
)
swECMPGatewayDown.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swECMPGatewayDown.setStatus(
        ""
    )

swTeamingCtrlUp = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 67)
)
swTeamingCtrlUp.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swTeamingCtrlUp.setStatus(
        ""
    )

swTeamingCtrlDown = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 68)
)
swTeamingCtrlDown.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swTeamingCtrlDown.setStatus(
        ""
    )

swTeamingCtrlDownTearDownBlked = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 69)
)
swTeamingCtrlDownTearDownBlked.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swTeamingCtrlDownTearDownBlked.setStatus(
        ""
    )

swTeamingCtrlError = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 70)
)
swTeamingCtrlError.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swTeamingCtrlError.setStatus(
        ""
    )

swLACPPortBlocked = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 71)
)
swLACPPortBlocked.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swLACPPortBlocked.setStatus(
        ""
    )

swLACPPortUnblocked = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 72)
)
swLACPPortUnblocked.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swLACPPortUnblocked.setStatus(
        ""
    )

swVMGroupVMotion = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 77)
)
swVMGroupVMotion.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swVMGroupVMotion.setStatus(
        ""
    )

swVMGroupVMOnline = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 78)
)
swVMGroupVMOnline.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swVMGroupVMOnline.setStatus(
        ""
    )

swVMGroupVMVlanChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 79)
)
swVMGroupVMVlanChange.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swVMGroupVMVlanChange.setStatus(
        ""
    )

swPrimaryPowerSupplyFixedNotify = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 97)
)
swPrimaryPowerSupplyFixedNotify.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swPrimaryPowerSupplyFixedNotify.setStatus(
        "current"
    )

swPrimaryPowerSupplyFixed = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 97)
)
swPrimaryPowerSupplyFixed.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swPrimaryPowerSupplyFixed.setStatus(
        ""
    )

swLFDPortErrdisabled = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 103)
)
swLFDPortErrdisabled.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swLFDPortErrdisabled.setStatus(
        ""
    )

swVlagInstanceUp = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 106)
)
swVlagInstanceUp.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swVlagInstanceUp.setStatus(
        ""
    )

swVlagInstanceRemoteUp = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 107)
)
swVlagInstanceRemoteUp.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swVlagInstanceRemoteUp.setStatus(
        ""
    )

swVlagInstanceLocalUp = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 108)
)
swVlagInstanceLocalUp.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swVlagInstanceLocalUp.setStatus(
        ""
    )

swVlagInstanceDown = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 109)
)
swVlagInstanceDown.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swVlagInstanceDown.setStatus(
        ""
    )

swVlagIslUp = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 110)
)
swVlagIslUp.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swVlagIslUp.setStatus(
        ""
    )

swVlagIslDown = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 111)
)
swVlagIslDown.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swVlagIslDown.setStatus(
        ""
    )

swOflowConnectControllerFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 144)
)
swOflowConnectControllerFailure.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swOflowConnectControllerFailure.setStatus(
        ""
    )

swOflowConnectControllerSuccess = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 145)
)
swOflowConnectControllerSuccess.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swOflowConnectControllerSuccess.setStatus(
        ""
    )

swOflowEmergencyState = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 146)
)
swOflowEmergencyState.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swOflowEmergencyState.setStatus(
        ""
    )

swOflowNoEmergencyState = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 147)
)
swOflowNoEmergencyState.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swOflowNoEmergencyState.setStatus(
        ""
    )

swOflowSwitchOflowMode = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 148)
)
swOflowSwitchOflowMode.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swOflowSwitchOflowMode.setStatus(
        ""
    )

swOflowSwitcNormalMode = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 149)
)
swOflowSwitcNormalMode.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swOflowSwitcNormalMode.setStatus(
        ""
    )

swOflowSwitcFlowtableClr = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 150)
)
swOflowSwitcFlowtableClr.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swOflowSwitcFlowtableClr.setStatus(
        ""
    )

swOflowSwitcStatsClr = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 151)
)
swOflowSwitcStatsClr.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swOflowSwitcStatsClr.setStatus(
        ""
    )

swOflowFlowtableEntryUnavail = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 152)
)
swOflowFlowtableEntryUnavail.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swOflowFlowtableEntryUnavail.setStatus(
        ""
    )

swOflowFlowtableLimit = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 153)
)
swOflowFlowtableLimit.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swOflowFlowtableLimit.setStatus(
        ""
    )

swOflowPortDownController = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 154)
)
swOflowPortDownController.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swOflowPortDownController.setStatus(
        ""
    )

swOflowPortUpController = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 155)
)
swOflowPortUpController.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swOflowPortUpController.setStatus(
        ""
    )

swOflowVersionNegotiationError = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 156)
)
swOflowVersionNegotiationError.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swOflowVersionNegotiationError.setStatus(
        ""
    )

sw8021x = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 158)
)
sw8021x.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    sw8021x.setStatus(
        ""
    )

swDefAdminDisable = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 162)
)
swDefAdminDisable.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swDefAdminDisable.setStatus(
        ""
    )

swAcntStrngPswdNotMet = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 163)
)
swAcntStrngPswdNotMet.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swAcntStrngPswdNotMet.setStatus(
        ""
    )

swAcntLocked = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 164)
)
swAcntLocked.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swAcntLocked.setStatus(
        ""
    )

swAcntUnlocked = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 165)
)
swAcntUnlocked.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swAcntUnlocked.setStatus(
        ""
    )

swARPtablefull = NotificationType(
    (1, 3, 6, 1, 4, 1, 20301, 2, 7, 13, 7, 0, 184)
)
swARPtablefull.setObjects(
      *(("IBM-GbTOR-G8264T-MIB", "swTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    swARPtablefull.setStatus(
        ""
    )


# Notifications groups


# Agent capabilities


# Module compliance


# Export all MIB objects to the MIB builder

mibBuilder.exportSymbols(
    "IBM-GbTOR-G8264T-MIB",
    **{"PortNumber": PortNumber,
       "VlanId": VlanId,
       "Timeout": Timeout,
       "IPsecKeyString": IPsecKeyString,
       "ibmnetwork": ibmnetwork,
       "registration": registration,
       "ibm-switch": ibm_switch,
       "g8264T": g8264T,
       "private-mibs": private_mibs,
       "ibm-switch-mgmt": ibm_switch_mgmt,
       "g8264T-mgmt": g8264T_mgmt,
       "agent": agent,
       "agentConfig": agentConfig,
       "agSystem": agSystem,
       "agApplyConfiguration": agApplyConfiguration,
       "agSavePending": agSavePending,
       "agSaveConfiguration": agSaveConfiguration,
       "agRevert": agRevert,
       "agReset": agReset,
       "agConfigForNxtReset": agConfigForNxtReset,
       "agImageForNxtReset": agImageForNxtReset,
       "agSoftwareVersion": agSoftwareVersion,
       "agBootVer": agBootVer,
       "agImage1Ver": agImage1Ver,
       "agImage2Ver": agImage2Ver,
       "agRtcDate": agRtcDate,
       "agRtcTime": agRtcTime,
       "agLastSetErrorReason": agLastSetErrorReason,
       "agCurCfgHttpServerPort": agCurCfgHttpServerPort,
       "agNewCfgHttpServerPort": agNewCfgHttpServerPort,
       "agCurCfgLoginBanner": agCurCfgLoginBanner,
       "agNewCfgLoginBanner": agNewCfgLoginBanner,
       "agCurCfgConsole": agCurCfgConsole,
       "agNewCfgConsole": agNewCfgConsole,
       "agCurCfgBootp": agCurCfgBootp,
       "agNewCfgBootp": agNewCfgBootp,
       "agSlotNumber": agSlotNumber,
       "agCurCfgSnmpTimeout": agCurCfgSnmpTimeout,
       "agNewCfgSnmpTimeout": agNewCfgSnmpTimeout,
       "agCurCfgTelnetServerPort": agCurCfgTelnetServerPort,
       "agNewCfgTelnetServerPort": agNewCfgTelnetServerPort,
       "agClearFlashDump": agClearFlashDump,
       "agCurCfgTrapSrcIf": agCurCfgTrapSrcIf,
       "agNewCfgTrapSrcIf": agNewCfgTrapSrcIf,
       "agCurCfgHttpsServerPort": agCurCfgHttpsServerPort,
       "agNewCfgHttpsServerPort": agNewCfgHttpsServerPort,
       "agCurCfgTftpServerPort": agCurCfgTftpServerPort,
       "agNewCfgTftpServerPort": agNewCfgTftpServerPort,
       "agRackId": agRackId,
       "agChassis": agChassis,
       "agCurTimeZone": agCurTimeZone,
       "agNewTimeZone": agNewTimeZone,
       "agCurCfgIdleCLITimeout": agCurCfgIdleCLITimeout,
       "agNewCfgIdleCLITimeout": agNewCfgIdleCLITimeout,
       "agCurCfgHttpsServerAccess": agCurCfgHttpsServerAccess,
       "agNewCfgHttpsServerAccess": agNewCfgHttpsServerAccess,
       "agCurHttpAcces": agCurHttpAcces,
       "agNewHttpAcces": agNewHttpAcces,
       "agCurCfgDhcp": agCurCfgDhcp,
       "agNewCfgDhcp": agNewCfgDhcp,
       "agCurCfgHprompt": agCurCfgHprompt,
       "agNewCfgHprompt": agNewCfgHprompt,
       "agCurCfgUserBBI": agCurCfgUserBBI,
       "agNewCfgUserBBI": agNewCfgUserBBI,
       "agCurCfgLoginNotice": agCurCfgLoginNotice,
       "agNewCfgLoginNotice": agNewCfgLoginNotice,
       "agCurCfgSysCustomDstState": agCurCfgSysCustomDstState,
       "agNewCfgSysCustomDstState": agNewCfgSysCustomDstState,
       "agCurCfgSysCustomDstStart": agCurCfgSysCustomDstStart,
       "agNewCfgSysCustomDstStart": agNewCfgSysCustomDstStart,
       "agCurCfgSysCustomDstEnd": agCurCfgSysCustomDstEnd,
       "agNewCfgSysCustomDstEnd": agNewCfgSysCustomDstEnd,
       "agHavePanicDump": agHavePanicDump,
       "agCurCfgResetControl": agCurCfgResetControl,
       "agNewCfgResetControl": agNewCfgResetControl,
       "agCurCfgSysDlight": agCurCfgSysDlight,
       "agNewCfgSysDlight": agNewCfgSysDlight,
       "agCurCfgErrDisableRecovery": agCurCfgErrDisableRecovery,
       "agNewCfgErrDisableRecovery": agNewCfgErrDisableRecovery,
       "agCurCfgErrDisableTimeout": agCurCfgErrDisableTimeout,
       "agNewCfgErrDisableTimeout": agNewCfgErrDisableTimeout,
       "agCurCfgTelnetAccess": agCurCfgTelnetAccess,
       "agNewCfgTelnetAccess": agNewCfgTelnetAccess,
       "agCurCfgDcbx": agCurCfgDcbx,
       "agNewCfgDcbx": agNewCfgDcbx,
       "serverPortsCurCfgPorts": serverPortsCurCfgPorts,
       "serverPortsNewCfgPorts": serverPortsNewCfgPorts,
       "serverPortsNewCfgAddPort": serverPortsNewCfgAddPort,
       "serverPortsNewCfgRemovePort": serverPortsNewCfgRemovePort,
       "agCurBootProfile": agCurBootProfile,
       "agNewBootProfile": agNewBootProfile,
       "agNetboot": agNetboot,
       "agNetbootTftpAddr": agNetbootTftpAddr,
       "agNetbootCfgFile": agNetbootCfgFile,
       "agCurCfgLinkscanMode": agCurCfgLinkscanMode,
       "agNewCfgLinkscanMode": agNewCfgLinkscanMode,
       "agUSBboot": agUSBboot,
       "agCurServiceLED": agCurServiceLED,
       "agNewServiceLED": agNewServiceLED,
       "agUSBeject": agUSBeject,
       "agCurRFC4741NetconfAccess": agCurRFC4741NetconfAccess,
       "agNewRFC4741NetconfAccess": agNewRFC4741NetconfAccess,
       "agCurRFC4741NetconfSessionTimeout": agCurRFC4741NetconfSessionTimeout,
       "agNewRFC4741NetconfSessionTimeout": agNewRFC4741NetconfSessionTimeout,
       "agCurRFC4741NetconfSshAccess": agCurRFC4741NetconfSshAccess,
       "agNewRFC4741NetconfSshAccess": agNewRFC4741NetconfSshAccess,
       "agCurRFC4741NetconfSshPort": agCurRFC4741NetconfSshPort,
       "agNewRFC4741NetconfSshPort": agNewRFC4741NetconfSshPort,
       "agCurCfgLFDStatus": agCurCfgLFDStatus,
       "agNewCfgLFDStatus": agNewCfgLFDStatus,
       "agCurCfgLFDFlaps": agCurCfgLFDFlaps,
       "agNewCfgLFDFlaps": agNewCfgLFDFlaps,
       "agCurCfgLFDTime": agCurCfgLFDTime,
       "agNewCfgLFDTime": agNewCfgLFDTime,
       "agCurCfgTrapSrcLoopIf": agCurCfgTrapSrcLoopIf,
       "agNewCfgTrapSrcLoopIf": agNewCfgTrapSrcLoopIf,
       "agCfgMtm": agCfgMtm,
       "agNewSecurityMode": agNewSecurityMode,
       "agNewCfgSslVersionLevel": agNewCfgSslVersionLevel,
       "agCurCfgSslVersionLevel": agCurCfgSslVersionLevel,
       "agCurSecurityMode": agCurSecurityMode,
       "agCurCfgTrapHostTable": agCurCfgTrapHostTable,
       "agCurCfgTrapHostEntry": agCurCfgTrapHostEntry,
       "agCurCfgTrapHostIndex": agCurCfgTrapHostIndex,
       "agCurCfgTrapHostAddress": agCurCfgTrapHostAddress,
       "agCurCfgTrapHostCommStr": agCurCfgTrapHostCommStr,
       "agNewCfgTrapHostTable": agNewCfgTrapHostTable,
       "agNewCfgTrapHostEntry": agNewCfgTrapHostEntry,
       "agNewCfgTrapHostIndex": agNewCfgTrapHostIndex,
       "agNewCfgTrapHostAddress": agNewCfgTrapHostAddress,
       "agNewCfgTrapHostCommStr": agNewCfgTrapHostCommStr,
       "agNewCfgTrapHostDelete": agNewCfgTrapHostDelete,
       "agPortConfig": agPortConfig,
       "agPortTableMaxEnt": agPortTableMaxEnt,
       "agPortCurCfgTable": agPortCurCfgTable,
       "agPortCurCfgTableEntry": agPortCurCfgTableEntry,
       "agPortCurCfgIndx": agPortCurCfgIndx,
       "agPortCurCfgState": agPortCurCfgState,
       "agPortCurCfgVlanTag": agPortCurCfgVlanTag,
       "agPortCurCfgRmon": agPortCurCfgRmon,
       "agPortCurCfgPVID": agPortCurCfgPVID,
       "agPortCurCfgGigEthAutoNeg": agPortCurCfgGigEthAutoNeg,
       "agPortCurCfgGigEthFctl": agPortCurCfgGigEthFctl,
       "agPortCurCfgPortName": agPortCurCfgPortName,
       "agPortCurCfgLinkTrap": agPortCurCfgLinkTrap,
       "agPortCurCfgGigEthSpeed": agPortCurCfgGigEthSpeed,
       "agPortCurCfgGigEthMode": agPortCurCfgGigEthMode,
       "agPortCurCfgDscpRemarking": agPortCurCfgDscpRemarking,
       "agPortCurCfgPortAlias": agPortCurCfgPortAlias,
       "agPortCurCfgTagPVID": agPortCurCfgTagPVID,
       "agPortCurCfgLearning": agPortCurCfgLearning,
       "agPortCurCfgFloodBlocking": agPortCurCfgFloodBlocking,
       "agPortCurCfgType": agPortCurCfgType,
       "agPortCurCfgLinkType": agPortCurCfgLinkType,
       "agPortCurCfgEdge": agPortCurCfgEdge,
       "agPortCurCfgErrDisableRecovery": agPortCurCfgErrDisableRecovery,
       "agPortCurCfgUdld": agPortCurCfgUdld,
       "agPortCurCfgUdldMode": agPortCurCfgUdldMode,
       "agPortCurCfgOam": agPortCurCfgOam,
       "agPortCurCfgOamMode": agPortCurCfgOamMode,
       "agPortCurCfgBpduGuard": agPortCurCfgBpduGuard,
       "agPortCurCfgMulticastThreshold": agPortCurCfgMulticastThreshold,
       "agPortCurCfgMulticastThresholdRate": agPortCurCfgMulticastThresholdRate,
       "agPortCurCfgBroadcastThreshold": agPortCurCfgBroadcastThreshold,
       "agPortCurCfgBroadcastThresholdRate": agPortCurCfgBroadcastThresholdRate,
       "agPortCurCfgDLFThreshold": agPortCurCfgDLFThreshold,
       "agPortCurCfgDLFThresholdRate": agPortCurCfgDLFThresholdRate,
       "agPortCurCfgMacAddrNotif": agPortCurCfgMacAddrNotif,
       "agPortCurCfgStpExtGuard": agPortCurCfgStpExtGuard,
       "agPortCurCfgLFDStatus": agPortCurCfgLFDStatus,
       "agPortCurCfgPrivateVlanStatus": agPortCurCfgPrivateVlanStatus,
       "agPortCurCfgMappedPrimaryVlans": agPortCurCfgMappedPrimaryVlans,
       "agPortCurCfgAssociatedSecondaryVlans": agPortCurCfgAssociatedSecondaryVlans,
       "agPortNewCfgTable": agPortNewCfgTable,
       "agPortNewCfgTableEntry": agPortNewCfgTableEntry,
       "agPortNewCfgIndx": agPortNewCfgIndx,
       "agPortNewCfgState": agPortNewCfgState,
       "agPortNewCfgVlanTag": agPortNewCfgVlanTag,
       "agPortNewCfgRmon": agPortNewCfgRmon,
       "agPortNewCfgPVID": agPortNewCfgPVID,
       "agPortNewCfgGigEthAutoNeg": agPortNewCfgGigEthAutoNeg,
       "agPortNewCfgGigEthFctl": agPortNewCfgGigEthFctl,
       "agPortNewCfgPortName": agPortNewCfgPortName,
       "agPortNewCfgLinkTrap": agPortNewCfgLinkTrap,
       "agPortNewCfgGigEthSpeed": agPortNewCfgGigEthSpeed,
       "agPortNewCfgGigEthMode": agPortNewCfgGigEthMode,
       "agPortNewCfgDscpRemarking": agPortNewCfgDscpRemarking,
       "agPortNewCfgTagPVID": agPortNewCfgTagPVID,
       "agPortNewCfgLearning": agPortNewCfgLearning,
       "agPortNewCfgFloodBlocking": agPortNewCfgFloodBlocking,
       "agPortNewCfgType": agPortNewCfgType,
       "agPortNewCfgLinkType": agPortNewCfgLinkType,
       "agPortNewCfgEdge": agPortNewCfgEdge,
       "agPortNewCfgErrDisableRecovery": agPortNewCfgErrDisableRecovery,
       "agPortNewCfgUdld": agPortNewCfgUdld,
       "agPortNewCfgUdldMode": agPortNewCfgUdldMode,
       "agPortNewCfgOam": agPortNewCfgOam,
       "agPortNewCfgOamMode": agPortNewCfgOamMode,
       "agPortNewCfgBpduGuard": agPortNewCfgBpduGuard,
       "agPortNewCfgMulticastThreshold": agPortNewCfgMulticastThreshold,
       "agPortNewCfgMulticastThresholdRate": agPortNewCfgMulticastThresholdRate,
       "agPortNewCfgBroadcastThreshold": agPortNewCfgBroadcastThreshold,
       "agPortNewCfgBroadcastThresholdRate": agPortNewCfgBroadcastThresholdRate,
       "agPortNewCfgDLFThreshold": agPortNewCfgDLFThreshold,
       "agPortNewCfgDLFThresholdRate": agPortNewCfgDLFThresholdRate,
       "agPortNewCfgMacAddrNotif": agPortNewCfgMacAddrNotif,
       "agPortNewCfgStpExtGuard": agPortNewCfgStpExtGuard,
       "agPortNewCfgLFDStatus": agPortNewCfgLFDStatus,
       "agPortNewCfgPrivateVlanStatus": agPortNewCfgPrivateVlanStatus,
       "agPortNewCfgMappedPrimaryVlans": agPortNewCfgMappedPrimaryVlans,
       "agPortNewCfgAddPrimaryVlan": agPortNewCfgAddPrimaryVlan,
       "agPortNewCfgDelPrimaryVlan": agPortNewCfgDelPrimaryVlan,
       "agPortNewCfgAssociatedSecondaryVlans": agPortNewCfgAssociatedSecondaryVlans,
       "agPortNewCfgAddSecondaryVlan": agPortNewCfgAddSecondaryVlan,
       "agPortNewCfgDelSecondaryVlan": agPortNewCfgDelSecondaryVlan,
       "agRadiusConfig": agRadiusConfig,
       "radCurCfgPrimaryServer": radCurCfgPrimaryServer,
       "radNewCfgPrimaryServer": radNewCfgPrimaryServer,
       "radCurCfgSecondaryServer": radCurCfgSecondaryServer,
       "radNewCfgSecondaryServer": radNewCfgSecondaryServer,
       "radCurCfgPort": radCurCfgPort,
       "radNewCfgPort": radNewCfgPort,
       "radCurCfgTimeout": radCurCfgTimeout,
       "radNewCfgTimeout": radNewCfgTimeout,
       "radCurCfgRetries": radCurCfgRetries,
       "radNewCfgRetries": radNewCfgRetries,
       "radCurCfgState": radCurCfgState,
       "radNewCfgState": radNewCfgState,
       "radCurCfgAuthenString": radCurCfgAuthenString,
       "radNewCfgAuthenString": radNewCfgAuthenString,
       "radCurCfgBackdoor": radCurCfgBackdoor,
       "radNewCfgBackdoor": radNewCfgBackdoor,
       "radCurCfgAuthenSecondString": radCurCfgAuthenSecondString,
       "radNewCfgAuthenSecondString": radNewCfgAuthenSecondString,
       "radCurCfgSecBd": radCurCfgSecBd,
       "radNewCfgSecBd": radNewCfgSecBd,
       "radCurCfgPorttoUse": radCurCfgPorttoUse,
       "radNewCfgPorttoUse": radNewCfgPorttoUse,
       "radCurCfgSecPorttoUse": radCurCfgSecPorttoUse,
       "radNewCfgSecPorttoUse": radNewCfgSecPorttoUse,
       "radCurCfgSrcLoopIf": radCurCfgSrcLoopIf,
       "radNewCfgSrcLoopIf": radNewCfgSrcLoopIf,
       "agNTP": agNTP,
       "agCurCfgNTPServer": agCurCfgNTPServer,
       "agNewCfgNTPServer": agNewCfgNTPServer,
       "agCurCfgNTPResyncInterval": agCurCfgNTPResyncInterval,
       "agNewCfgNTPResyncInterval": agNewCfgNTPResyncInterval,
       "agCurCfgNTPService": agCurCfgNTPService,
       "agNewCfgNTPService": agNewCfgNTPService,
       "agCurCfgNTPSecServer": agCurCfgNTPSecServer,
       "agNewCfgNTPSecServer": agNewCfgNTPSecServer,
       "agCurCfgNTPServerPort": agCurCfgNTPServerPort,
       "agNewCfgNTPServerPort": agNewCfgNTPServerPort,
       "agCurCfgNTPSecServerPort": agCurCfgNTPSecServerPort,
       "agNewCfgNTPSecServerPort": agNewCfgNTPSecServerPort,
       "agCurCfgNTPSrcLoopIf": agCurCfgNTPSrcLoopIf,
       "agNewCfgNTPSrcLoopIf": agNewCfgNTPSrcLoopIf,
       "agSyslog": agSyslog,
       "agCurCfgSyslogHost": agCurCfgSyslogHost,
       "agNewCfgSyslogHost": agNewCfgSyslogHost,
       "agCurCfgSyslog2Host": agCurCfgSyslog2Host,
       "agNewCfgSyslog2Host": agNewCfgSyslog2Host,
       "agCurCfgSyslogFac": agCurCfgSyslogFac,
       "agNewCfgSyslogFac": agNewCfgSyslogFac,
       "agCurCfgSyslog2Fac": agCurCfgSyslog2Fac,
       "agNewCfgSyslog2Fac": agNewCfgSyslog2Fac,
       "agClrSyslogMsgs": agClrSyslogMsgs,
       "agSyslogMsgTableMaxSize": agSyslogMsgTableMaxSize,
       "agSyslogMsgTable": agSyslogMsgTable,
       "agSyslogMsgTableEntry": agSyslogMsgTableEntry,
       "agSyslogMsgIndex": agSyslogMsgIndex,
       "agSyslogMessage": agSyslogMessage,
       "agLog": agLog,
       "agNewCfgSyslogTrapConsole": agNewCfgSyslogTrapConsole,
       "agCurCfgSyslogTrapConsole": agCurCfgSyslogTrapConsole,
       "agNewCfgSyslogTrapSystem": agNewCfgSyslogTrapSystem,
       "agCurCfgSyslogTrapSystem": agCurCfgSyslogTrapSystem,
       "agNewCfgSyslogTrapMgmt": agNewCfgSyslogTrapMgmt,
       "agCurCfgSyslogTrapMgmt": agCurCfgSyslogTrapMgmt,
       "agNewCfgSyslogTrapCli": agNewCfgSyslogTrapCli,
       "agCurCfgSyslogTrapCli": agCurCfgSyslogTrapCli,
       "agNewCfgSyslogTrapStg": agNewCfgSyslogTrapStg,
       "agCurCfgSyslogTrapStg": agCurCfgSyslogTrapStg,
       "agNewCfgSyslogTrapVlan": agNewCfgSyslogTrapVlan,
       "agCurCfgSyslogTrapVlan": agCurCfgSyslogTrapVlan,
       "agNewCfgSyslogTrapSsh": agNewCfgSyslogTrapSsh,
       "agCurCfgSyslogTrapSsh": agCurCfgSyslogTrapSsh,
       "agNewCfgSyslogTrapVrrp": agNewCfgSyslogTrapVrrp,
       "agCurCfgSyslogTrapVrrp": agCurCfgSyslogTrapVrrp,
       "agNewCfgSyslogTrapBgp": agNewCfgSyslogTrapBgp,
       "agCurCfgSyslogTrapBgp": agCurCfgSyslogTrapBgp,
       "agNewCfgSyslogTrapNtp": agNewCfgSyslogTrapNtp,
       "agCurCfgSyslogTrapNtp": agCurCfgSyslogTrapNtp,
       "agNewCfgSyslogTrapIp": agNewCfgSyslogTrapIp,
       "agCurCfgSyslogTrapIp": agCurCfgSyslogTrapIp,
       "agNewCfgSyslogTrapWeb": agNewCfgSyslogTrapWeb,
       "agCurCfgSyslogTrapWeb": agCurCfgSyslogTrapWeb,
       "agNewCfgSyslogTrapOspf": agNewCfgSyslogTrapOspf,
       "agCurCfgSyslogTrapOspf": agCurCfgSyslogTrapOspf,
       "agNewCfgSyslogTrapRmon": agNewCfgSyslogTrapRmon,
       "agCurCfgSyslogTrapRmon": agCurCfgSyslogTrapRmon,
       "agNewCfgSyslogTrap8021x": agNewCfgSyslogTrap8021x,
       "agCurCfgSyslogTrap8021x": agCurCfgSyslogTrap8021x,
       "agNewCfgSyslogTrapCfg": agNewCfgSyslogTrapCfg,
       "agCurCfgSyslogTrapCfg": agCurCfgSyslogTrapCfg,
       "agNewCfgSyslogTrapServer": agNewCfgSyslogTrapServer,
       "agCurCfgSyslogTrapServer": agCurCfgSyslogTrapServer,
       "agNewCfgSyslogTrapDifftrak": agNewCfgSyslogTrapDifftrak,
       "agCurCfgSyslogTrapDifftrak": agCurCfgSyslogTrapDifftrak,
       "agNewCfgSyslogTrapHotlinks": agNewCfgSyslogTrapHotlinks,
       "agCurCfgSyslogTrapHotlinks": agCurCfgSyslogTrapHotlinks,
       "agNewCfgSyslogTrapLldp": agNewCfgSyslogTrapLldp,
       "agCurCfgSyslogTrapLldp": agCurCfgSyslogTrapLldp,
       "agNewCfgSyslogTrapAll": agNewCfgSyslogTrapAll,
       "agCurCfgSyslogTrapAll": agCurCfgSyslogTrapAll,
       "agNewCfgSyslogTrapIpv6": agNewCfgSyslogTrapIpv6,
       "agCurCfgSyslogTrapIpv6": agCurCfgSyslogTrapIpv6,
       "agNewCfgSyslogTrapFailover": agNewCfgSyslogTrapFailover,
       "agCurCfgSyslogTrapFailover": agCurCfgSyslogTrapFailover,
       "agNewCfgSyslogTrapLacp": agNewCfgSyslogTrapLacp,
       "agCurCfgSyslogTrapLacp": agCurCfgSyslogTrapLacp,
       "agNewCfgSyslogTrapLink": agNewCfgSyslogTrapLink,
       "agCurCfgSyslogTrapLink": agCurCfgSyslogTrapLink,
       "agNewCfgSyslogTrapOspfv3": agNewCfgSyslogTrapOspfv3,
       "agCurCfgSyslogTrapOspfv3": agCurCfgSyslogTrapOspfv3,
       "agNewCfgSyslogTrapDcbx": agNewCfgSyslogTrapDcbx,
       "agCurCfgSyslogTrapDcbx": agCurCfgSyslogTrapDcbx,
       "agNewCfgSyslogTrapFcoe": agNewCfgSyslogTrapFcoe,
       "agCurCfgSyslogTrapFcoe": agCurCfgSyslogTrapFcoe,
       "agNewCfgSyslogTrapVm": agNewCfgSyslogTrapVm,
       "agCurCfgSyslogTrapVm": agCurCfgSyslogTrapVm,
       "agNewCfgSyslogTrapVnic": agNewCfgSyslogTrapVnic,
       "agCurCfgSyslogTrapVnic": agCurCfgSyslogTrapVnic,
       "agNewCfgSyslogTrapCfgchg": agNewCfgSyslogTrapCfgchg,
       "agCurCfgSyslogTrapCfgchg": agCurCfgSyslogTrapCfgchg,
       "agNewCfgSyslogTrapVlag": agNewCfgSyslogTrapVlag,
       "agCurCfgSyslogTrapVlag": agCurCfgSyslogTrapVlag,
       "agNewCfgSyslogTrapIgmpGroup": agNewCfgSyslogTrapIgmpGroup,
       "agCurCfgSyslogTrapIgmpGroup": agCurCfgSyslogTrapIgmpGroup,
       "agNewCfgSyslogTrapIgmpMrouter": agNewCfgSyslogTrapIgmpMrouter,
       "agCurCfgSyslogTrapIgmpMrouter": agCurCfgSyslogTrapIgmpMrouter,
       "agNewCfgSyslogTrapIgmpQuerier": agNewCfgSyslogTrapIgmpQuerier,
       "agCurCfgSyslogTrapIgmpQuerier": agCurCfgSyslogTrapIgmpQuerier,
       "agNewCfgSyslogTrapMld": agNewCfgSyslogTrapMld,
       "agCurCfgSyslogTrapMld": agCurCfgSyslogTrapMld,
       "agNewCfgSyslogTrapPrivateVlan": agNewCfgSyslogTrapPrivateVlan,
       "agCurCfgSyslogTrapPrivateVlan": agCurCfgSyslogTrapPrivateVlan,
       "agNewCfgSyslogTrapSlp": agNewCfgSyslogTrapSlp,
       "agCurCfgSyslogTrapSlp": agCurCfgSyslogTrapSlp,
       "agCurCfgSyslogSev": agCurCfgSyslogSev,
       "agNewCfgSyslogSev": agNewCfgSyslogSev,
       "agCurCfgSyslog2Sev": agCurCfgSyslog2Sev,
       "agNewCfgSyslog2Sev": agNewCfgSyslog2Sev,
       "agCurCfgSyslogHostPort": agCurCfgSyslogHostPort,
       "agNewCfgSyslogHostPort": agNewCfgSyslogHostPort,
       "agCurCfgSyslog2HostPort": agCurCfgSyslog2HostPort,
       "agNewCfgSyslog2HostPort": agNewCfgSyslog2HostPort,
       "agCurCfgSyslogSrcLoopIf": agCurCfgSyslogSrcLoopIf,
       "agNewCfgSyslogSrcLoopIf": agNewCfgSyslogSrcLoopIf,
       "agCurCfgSyslogConsoleSev": agCurCfgSyslogConsoleSev,
       "agNewCfgSyslogConsoleSev": agNewCfgSyslogConsoleSev,
       "agCurCfgSyslogFlashSev": agCurCfgSyslogFlashSev,
       "agNewCfgSyslogFlashSev": agNewCfgSyslogFlashSev,
       "agTransfer": agTransfer,
       "agTransferServer": agTransferServer,
       "agTransferImage": agTransferImage,
       "agTransferImageFileName": agTransferImageFileName,
       "agTransferCfgFileName": agTransferCfgFileName,
       "agTransferDumpFileName": agTransferDumpFileName,
       "agTransferAction": agTransferAction,
       "agTransferLastActionStatus": agTransferLastActionStatus,
       "agTransferPort": agTransferPort,
       "agTransferUserName": agTransferUserName,
       "agTransferPassword": agTransferPassword,
       "agTransferTSDumpFileName": agTransferTSDumpFileName,
       "agTransferLastConfigurationActionStatus": agTransferLastConfigurationActionStatus,
       "agTransferCaFileName": agTransferCaFileName,
       "agTransferHostCertFileName": agTransferHostCertFileName,
       "agTransferHostKeyFileName": agTransferHostKeyFileName,
       "agTransferProtocol": agTransferProtocol,
       "agServerPort": agServerPort,
       "agTransferPublicKeyUserName": agTransferPublicKeyUserName,
       "agTransferPublicKeyFileName": agTransferPublicKeyFileName,
       "agApply": agApply,
       "agApplyPending": agApplyPending,
       "agApplyConfig": agApplyConfig,
       "agApplyTableSize": agApplyTableSize,
       "agApplyTable": agApplyTable,
       "agApplyTableEntry": agApplyTableEntry,
       "agApplyIndex": agApplyIndex,
       "agApplyString": agApplyString,
       "agTacacsConfig": agTacacsConfig,
       "tacCurCfgPrimaryServer": tacCurCfgPrimaryServer,
       "tacNewCfgPrimaryServer": tacNewCfgPrimaryServer,
       "tacCurCfgSecondaryServer": tacCurCfgSecondaryServer,
       "tacNewCfgSecondaryServer": tacNewCfgSecondaryServer,
       "tacCurCfgPort": tacCurCfgPort,
       "tacNewCfgPort": tacNewCfgPort,
       "tacCurCfgTimeout": tacCurCfgTimeout,
       "tacNewCfgTimeout": tacNewCfgTimeout,
       "tacCurCfgRetries": tacCurCfgRetries,
       "tacNewCfgRetries": tacNewCfgRetries,
       "tacCurCfgState": tacCurCfgState,
       "tacNewCfgState": tacNewCfgState,
       "tacCurCfgAuthenString": tacCurCfgAuthenString,
       "tacNewCfgAuthenString": tacNewCfgAuthenString,
       "tacCurCfgBackdoor": tacCurCfgBackdoor,
       "tacNewCfgBackdoor": tacNewCfgBackdoor,
       "tacCurCfgAuthenSecondString": tacCurCfgAuthenSecondString,
       "tacNewCfgAuthenSecondString": tacNewCfgAuthenSecondString,
       "tacCurCfgCmdAuthor": tacCurCfgCmdAuthor,
       "tacNewCfgCmdAuthor": tacNewCfgCmdAuthor,
       "tacCurCfgCmdLogging": tacCurCfgCmdLogging,
       "tacNewCfgCmdLogging": tacNewCfgCmdLogging,
       "tacCurCfgSecBd": tacCurCfgSecBd,
       "tacNewCfgSecBd": tacNewCfgSecBd,
       "tacCurCfgCmap": tacCurCfgCmap,
       "tacNewCfgCmap": tacNewCfgCmap,
       "tacCurCfgEnaPassChange": tacCurCfgEnaPassChange,
       "tacNewCfgEnaPassChange": tacNewCfgEnaPassChange,
       "tacChangePassForUser": tacChangePassForUser,
       "tacChangePassCurPass": tacChangePassCurPass,
       "tacChangePassNewPass": tacChangePassNewPass,
       "tacChangePassForServer": tacChangePassForServer,
       "tacCurCfgPorttoUse": tacCurCfgPorttoUse,
       "tacNewCfgPorttoUse": tacNewCfgPorttoUse,
       "tacCurCfgSecPorttoUse": tacCurCfgSecPorttoUse,
       "tacNewCfgSecPorttoUse": tacNewCfgSecPorttoUse,
       "agTacacsUserMapCurCfgTable": agTacacsUserMapCurCfgTable,
       "agTacacsUserMapCurCfgTableEntry": agTacacsUserMapCurCfgTableEntry,
       "agTacacsUserMapCurCfgUId": agTacacsUserMapCurCfgUId,
       "agTacacsUserMapCurCfgMapping": agTacacsUserMapCurCfgMapping,
       "agTacacsUserMapNewCfgTable": agTacacsUserMapNewCfgTable,
       "agTacacsUserMapNewCfgTableEntry": agTacacsUserMapNewCfgTableEntry,
       "agTacacsUserMapNewCfgUId": agTacacsUserMapNewCfgUId,
       "agTacacsUserMapNewCfgMapping": agTacacsUserMapNewCfgMapping,
       "tacNewCfgDirectedRequest": tacNewCfgDirectedRequest,
       "tacCurCfgDirectedRequest": tacCurCfgDirectedRequest,
       "tacCurCfgAttempts": tacCurCfgAttempts,
       "tacNewCfgAttempts": tacNewCfgAttempts,
       "tacCurBypassEnable": tacCurBypassEnable,
       "tacNewBypassEnable": tacNewBypassEnable,
       "tacCurCfgEnableAccounting": tacCurCfgEnableAccounting,
       "tacNewCfgEnableAccounting": tacNewCfgEnableAccounting,
       "tacCurCfgSrcLoopIf": tacCurCfgSrcLoopIf,
       "tacNewCfgSrcLoopIf": tacNewCfgSrcLoopIf,
       "agMgmtNetConfig": agMgmtNetConfig,
       "agMgmtNetTableMaxSize": agMgmtNetTableMaxSize,
       "agCurCfgMgmtNetTable": agCurCfgMgmtNetTable,
       "agCurCfgMgmtNetEntry": agCurCfgMgmtNetEntry,
       "agCurCfgMgmtNetIndex": agCurCfgMgmtNetIndex,
       "agCurCfgMgmtNetSubnet": agCurCfgMgmtNetSubnet,
       "agCurCfgMgmtNetMask": agCurCfgMgmtNetMask,
       "agNewCfgMgmtNetTable": agNewCfgMgmtNetTable,
       "agNewCfgMgmtNetEntry": agNewCfgMgmtNetEntry,
       "agNewCfgMgmtNetIndex": agNewCfgMgmtNetIndex,
       "agNewCfgMgmtNetSubnet": agNewCfgMgmtNetSubnet,
       "agNewCfgMgmtNetMask": agNewCfgMgmtNetMask,
       "agNewCfgMgmtNetDelete": agNewCfgMgmtNetDelete,
       "agMgmtNetClear": agMgmtNetClear,
       "agBoot": agBoot,
       "agCfgBootResetParameters": agCfgBootResetParameters,
       "agCfgBootReset": agCfgBootReset,
       "agCfgBootNxtResetTime": agCfgBootNxtResetTime,
       "agCfgBootPendingReset": agCfgBootPendingReset,
       "agAccess": agAccess,
       "agAccessUserMaxUserID": agAccessUserMaxUserID,
       "agAccessUserCurCfgTable": agAccessUserCurCfgTable,
       "agAccessUserCurCfgTableEntry": agAccessUserCurCfgTableEntry,
       "agAccessUserCurCfgUId": agAccessUserCurCfgUId,
       "agAccessUserCurCos": agAccessUserCurCos,
       "agAccessUserCurCfgName": agAccessUserCurCfgName,
       "agAccessUserCurCfgPswd": agAccessUserCurCfgPswd,
       "agAccessUserCurCfgState": agAccessUserCurCfgState,
       "agAccessUserNewCfgTable": agAccessUserNewCfgTable,
       "agAccessUserNewCfgTableEntry": agAccessUserNewCfgTableEntry,
       "agAccessUserNewCfgUId": agAccessUserNewCfgUId,
       "agAccessUserNewCos": agAccessUserNewCos,
       "agAccessUserNewCfgName": agAccessUserNewCfgName,
       "agAccessUserNewCfgPswd": agAccessUserNewCfgPswd,
       "agAccessUserNewCfgState": agAccessUserNewCfgState,
       "agAccessUserNewCfgDelete": agAccessUserNewCfgDelete,
       "agAccessCurStrongPassword": agAccessCurStrongPassword,
       "agAccessNewStrongPassword": agAccessNewStrongPassword,
       "agAccessCurStrongPassValidity": agAccessCurStrongPassValidity,
       "agAccessNewStrongPassValidity": agAccessNewStrongPassValidity,
       "agAccessCurStrongPassWarning": agAccessCurStrongPassWarning,
       "agAccessNewStrongPassWarning": agAccessNewStrongPassWarning,
       "agAccessCurStrongPassFailLog": agAccessCurStrongPassFailLog,
       "agAccessNewStrongPassFailLog": agAccessNewStrongPassFailLog,
       "agAccessCurDefaultAdmin": agAccessCurDefaultAdmin,
       "agAccessNewDefaultAdmin": agAccessNewDefaultAdmin,
       "agAccessCurStrongPassLockout": agAccessCurStrongPassLockout,
       "agAccessNewStrongPassLockout": agAccessNewStrongPassLockout,
       "agAccessCurStrongPassAttemptsMaxFail": agAccessCurStrongPassAttemptsMaxFail,
       "agAccessNewStrongPassAttemptsMaxFail": agAccessNewStrongPassAttemptsMaxFail,
       "agLdapConfig": agLdapConfig,
       "ldapCurCfgPrimaryIpAddr": ldapCurCfgPrimaryIpAddr,
       "ldapNewCfgPrimaryIpAddr": ldapNewCfgPrimaryIpAddr,
       "ldapCurCfgSecondaryIpAddr": ldapCurCfgSecondaryIpAddr,
       "ldapNewCfgSecondaryIpAddr": ldapNewCfgSecondaryIpAddr,
       "ldapCurCfgPort": ldapCurCfgPort,
       "ldapNewCfgPort": ldapNewCfgPort,
       "ldapCurCfgRetries": ldapCurCfgRetries,
       "ldapNewCfgRetries": ldapNewCfgRetries,
       "ldapCurCfgTimeout": ldapCurCfgTimeout,
       "ldapNewCfgTimeout": ldapNewCfgTimeout,
       "ldapCurCfgDomain": ldapCurCfgDomain,
       "ldapNewCfgDomain": ldapNewCfgDomain,
       "ldapCurCfgBackdoor": ldapCurCfgBackdoor,
       "ldapNewCfgBackdoor": ldapNewCfgBackdoor,
       "ldapCurCfgState": ldapCurCfgState,
       "ldapNewCfgState": ldapNewCfgState,
       "ldapCurCfgPorttoUse": ldapCurCfgPorttoUse,
       "ldapNewCfgPorttoUse": ldapNewCfgPorttoUse,
       "ldapCurCfgSecPorttoUse": ldapCurCfgSecPorttoUse,
       "ldapNewCfgSecPorttoUse": ldapNewCfgSecPorttoUse,
       "ldapCurCfgUserNameAttribute": ldapCurCfgUserNameAttribute,
       "ldapNewCfgUserNameAttribute": ldapNewCfgUserNameAttribute,
       "agSSHConfig": agSSHConfig,
       "sshCurCfgScpAdm": sshCurCfgScpAdm,
       "sshNewCfgScpAdm": sshNewCfgScpAdm,
       "sshNewCfgHKeyGen": sshNewCfgHKeyGen,
       "sshCurCfgSSHPort": sshCurCfgSSHPort,
       "sshNewCfgSSHPort": sshNewCfgSSHPort,
       "sshCurCfgScpApplySave": sshCurCfgScpApplySave,
       "sshNewCfgScpApplySave": sshNewCfgScpApplySave,
       "sshCurCfgStatus": sshCurCfgStatus,
       "sshNewCfgStatus": sshNewCfgStatus,
       "sshPubKeyRemAll": sshPubKeyRemAll,
       "sshPubKeyRemUser": sshPubKeyRemUser,
       "sshPubKeyConfigTable": sshPubKeyConfigTable,
       "sshPubKeyConfigEntry": sshPubKeyConfigEntry,
       "sshPubKeyConfigIndex": sshPubKeyConfigIndex,
       "sshPubKeyType": sshPubKeyType,
       "sshPubKeyHashValue": sshPubKeyHashValue,
       "sshPubkeyUserBmap": sshPubkeyUserBmap,
       "sshPubKeyAddUser": sshPubKeyAddUser,
       "sshPubKeyDelUser": sshPubKeyDelUser,
       "sshPubKeyRemEntry": sshPubKeyRemEntry,
       "sshCurCfgSSHAttempts": sshCurCfgSSHAttempts,
       "sshNewCfgSSHAttempts": sshNewCfgSSHAttempts,
       "agsFlowConfig": agsFlowConfig,
       "sflowCurCfgServerAddress": sflowCurCfgServerAddress,
       "sflowNewCfgServerAddress": sflowNewCfgServerAddress,
       "sflowCurCfgServerPort": sflowCurCfgServerPort,
       "sflowNewCfgServerPort": sflowNewCfgServerPort,
       "sflowCurCfgState": sflowCurCfgState,
       "sflowNewCfgState": sflowNewCfgState,
       "sflowCurPortCfgTable": sflowCurPortCfgTable,
       "sflowCurPortCfgTableEntry": sflowCurPortCfgTableEntry,
       "sflowCurPortCfgTableId": sflowCurPortCfgTableId,
       "sflowCurPortSampling": sflowCurPortSampling,
       "sflowCurPortPolling": sflowCurPortPolling,
       "sflowNewPortCfgTable": sflowNewPortCfgTable,
       "sflowNewPortCfgTableEntry": sflowNewPortCfgTableEntry,
       "sflowNewPortCfgTableId": sflowNewPortCfgTableId,
       "sflowNewPortSampling": sflowNewPortSampling,
       "sflowNewPortPolling": sflowNewPortPolling,
       "sflowCurCfgMgmtPort": sflowCurCfgMgmtPort,
       "sflowNewCfgMgmtPort": sflowNewCfgMgmtPort,
       "agUSBCopy": agUSBCopy,
       "agUSBoperation": agUSBoperation,
       "agUSBfile": agUSBfile,
       "agUSBflashFile": agUSBflashFile,
       "agUSBcopyFile": agUSBcopyFile,
       "agUSBresult": agUSBresult,
       "agQsfp40GConfig": agQsfp40GConfig,
       "agQsfp40GCfgTable": agQsfp40GCfgTable,
       "qsfp40GPortEntry": qsfp40GPortEntry,
       "qsfpPortNumber": qsfpPortNumber,
       "qsfpPortBootedMode": qsfpPortBootedMode,
       "qsfpPortSavedMode": qsfpPortSavedMode,
       "agentStats": agentStats,
       "pktStats": pktStats,
       "pktStatsAllocs": pktStatsAllocs,
       "pktStatsFrees": pktStatsFrees,
       "pktStatsAllocFails": pktStatsAllocFails,
       "pktStatsMediums": pktStatsMediums,
       "pktStatsJumbos": pktStatsJumbos,
       "pktStatsSmalls": pktStatsSmalls,
       "pktStatsMediumsHiWatermark": pktStatsMediumsHiWatermark,
       "pktStatsJumbosHiWatermark": pktStatsJumbosHiWatermark,
       "pktStatsSmallsHiWatermark": pktStatsSmallsHiWatermark,
       "mpCpuStats": mpCpuStats,
       "mpCpuStatsUtil1Second": mpCpuStatsUtil1Second,
       "mpCpuStatsUtil5Seconds": mpCpuStatsUtil5Seconds,
       "mpCpuStatsUtil1Minute": mpCpuStatsUtil1Minute,
       "cpuUtilProcessStatsTable": cpuUtilProcessStatsTable,
       "cpuUtilProcessStatsTableEntry": cpuUtilProcessStatsTableEntry,
       "processId": processId,
       "processName": processName,
       "cpuProcessUtil1Sec": cpuProcessUtil1Sec,
       "cpuProcessUtil5Sec": cpuProcessUtil5Sec,
       "cpuProcessUtil1Min": cpuProcessUtil1Min,
       "cpuProcessUtil5Min": cpuProcessUtil5Min,
       "processStatus": processStatus,
       "mpCpuStatsUtil5Minutes": mpCpuStatsUtil5Minutes,
       "portStats": portStats,
       "portStatsTable": portStatsTable,
       "portStatsTableEntry": portStatsTableEntry,
       "portStatsIndx": portStatsIndx,
       "portStatsPhyIfInOctets": portStatsPhyIfInOctets,
       "portStatsPhyIfInUcastPkts": portStatsPhyIfInUcastPkts,
       "portStatsPhyIfInNUcastPkts": portStatsPhyIfInNUcastPkts,
       "portStatsPhyIfInDiscards": portStatsPhyIfInDiscards,
       "portStatsPhyIfInErrors": portStatsPhyIfInErrors,
       "portStatsPhyIfInUnknownProtos": portStatsPhyIfInUnknownProtos,
       "portStatsPhyIfOutOctets": portStatsPhyIfOutOctets,
       "portStatsPhyIfOutUcastPkts": portStatsPhyIfOutUcastPkts,
       "portStatsPhyIfOutNUcastPkts": portStatsPhyIfOutNUcastPkts,
       "portStatsPhyIfOutDiscards": portStatsPhyIfOutDiscards,
       "portStatsPhyIfOutErrors": portStatsPhyIfOutErrors,
       "portStatsPhyIfOutQLen": portStatsPhyIfOutQLen,
       "portStatsPhyIfInBroadcastPkts": portStatsPhyIfInBroadcastPkts,
       "portStatsPhyIfOutBroadcastPkts": portStatsPhyIfOutBroadcastPkts,
       "portStatsClear": portStatsClear,
       "portStatsPhyIfInMulticastPkts": portStatsPhyIfInMulticastPkts,
       "portStatsPhyIfOutMulticastPkts": portStatsPhyIfOutMulticastPkts,
       "portStatsLinkStateChange": portStatsLinkStateChange,
       "portStatsPhyIfInFctlPkts": portStatsPhyIfInFctlPkts,
       "portStatsPhyIfOutFctlPkts": portStatsPhyIfOutFctlPkts,
       "portStatsPhyIfInFctlPktsRate": portStatsPhyIfInFctlPktsRate,
       "portStatsPhyIfOutFctlPktsRate": portStatsPhyIfOutFctlPktsRate,
       "portStatsPhyIfIngDiscdVlan": portStatsPhyIfIngDiscdVlan,
       "portStatsPhyIfIngDiscdEgrMap": portStatsPhyIfIngDiscdEgrMap,
       "portStatsPhyIfIngDiscdFilter": portStatsPhyIfIngDiscdFilter,
       "portStatsPhyIfIngDiscdPolicy": portStatsPhyIfIngDiscdPolicy,
       "portStatsPhyIfIngDiscdNonFwdStat": portStatsPhyIfIngDiscdNonFwdStat,
       "portStatsPhyIfIngDiscdIbpCbp": portStatsPhyIfIngDiscdIbpCbp,
       "portStatsDot1PortInFrames": portStatsDot1PortInFrames,
       "portStatsDot1PortOutFrames": portStatsDot1PortOutFrames,
       "portStatsDot1PortInDiscards": portStatsDot1PortInDiscards,
       "portStatsDot1TpLearnedEntryDiscards": portStatsDot1TpLearnedEntryDiscards,
       "portStatsDot1StpPortForwardTransitions": portStatsDot1StpPortForwardTransitions,
       "portStatsPhyIfEgrHOLBlockDiscd": portStatsPhyIfEgrHOLBlockDiscd,
       "portStatsPhyIfEgrMMUDiscd": portStatsPhyIfEgrMMUDiscd,
       "portStatsPhyIfEgrCellErrDiscd": portStatsPhyIfEgrCellErrDiscd,
       "portStatsPhyIfEgrMMUAgeDiscd": portStatsPhyIfEgrMMUAgeDiscd,
       "portStatsPhyIfEgrOtherDiscd": portStatsPhyIfEgrOtherDiscd,
       "dot1xPortStatsTable": dot1xPortStatsTable,
       "dot1xPortStatsTableEntry": dot1xPortStatsTableEntry,
       "dot1xPortStatsIndx": dot1xPortStatsIndx,
       "eapolFramesRx": eapolFramesRx,
       "eapolFramesTx": eapolFramesTx,
       "eapolStartFramesRx": eapolStartFramesRx,
       "eapolLogoffFramesRx": eapolLogoffFramesRx,
       "eapolRespIdFramesRx": eapolRespIdFramesRx,
       "eapolRespFramesRx": eapolRespFramesRx,
       "eapolReqIdFramesTx": eapolReqIdFramesTx,
       "eapolReqFramesTx": eapolReqFramesTx,
       "invalidEapolFramesRx": invalidEapolFramesRx,
       "eapLengthErrorFramesRx": eapLengthErrorFramesRx,
       "authEntersConnecting": authEntersConnecting,
       "authEapLogoffsWhileConnecting": authEapLogoffsWhileConnecting,
       "authEntersAuthenticating": authEntersAuthenticating,
       "authSuccessesWhileAuthenticating": authSuccessesWhileAuthenticating,
       "authTimeoutsWhileAuthenticating": authTimeoutsWhileAuthenticating,
       "authFailWhileAuthenticating": authFailWhileAuthenticating,
       "authReauthsWhileAuthenticating": authReauthsWhileAuthenticating,
       "authEapStartsWhileAuthenticating": authEapStartsWhileAuthenticating,
       "authEapLogoffWhileAuthenticating": authEapLogoffWhileAuthenticating,
       "authReauthsWhileAuthenticated": authReauthsWhileAuthenticated,
       "authEapStartsWhileAuthenticated": authEapStartsWhileAuthenticated,
       "authEapLogoffWhileAuthenticated": authEapLogoffWhileAuthenticated,
       "backendResponses": backendResponses,
       "backendAccessChallenges": backendAccessChallenges,
       "backendOtherRequestsToSupplicant": backendOtherRequestsToSupplicant,
       "backendNonNakResponsesFromSupplicant": backendNonNakResponsesFromSupplicant,
       "backendAuthSuccesses": backendAuthSuccesses,
       "backendAuthFails": backendAuthFails,
       "lastEapolFrameVersion": lastEapolFrameVersion,
       "lastEapolFrameSource": lastEapolFrameSource,
       "portMgmtStatsTable": portMgmtStatsTable,
       "portMgmtStatsTableEntry": portMgmtStatsTableEntry,
       "portMgmtStatsIndx": portMgmtStatsIndx,
       "portMgmtStatsRxBytes": portMgmtStatsRxBytes,
       "portMgmtStatsTxBytes": portMgmtStatsTxBytes,
       "portMgmtStatsRxpackets": portMgmtStatsRxpackets,
       "portMgmtStatsTxpackets": portMgmtStatsTxpackets,
       "portMgmtStatsRxErrors": portMgmtStatsRxErrors,
       "portMgmtStatsTxErrors": portMgmtStatsTxErrors,
       "portMgmtStatsRxDropped": portMgmtStatsRxDropped,
       "portMgmtStatsTxDropped": portMgmtStatsTxDropped,
       "portMgmtStatsRxOverruns": portMgmtStatsRxOverruns,
       "portMgmtStatsTxOverruns": portMgmtStatsTxOverruns,
       "portMgmtStatsRxFrame": portMgmtStatsRxFrame,
       "portMgmtStatsTxCarrier": portMgmtStatsTxCarrier,
       "portMgmtStatsRxMulticast": portMgmtStatsRxMulticast,
       "portMgmtStatsTxCollisions": portMgmtStatsTxCollisions,
       "allportsStatsTable": allportsStatsTable,
       "allportsStatsTableEntry": allportsStatsTableEntry,
       "allportsStatsIndx": allportsStatsIndx,
       "allportsStatsDescr": allportsStatsDescr,
       "allportsStatsSpeed": allportsStatsSpeed,
       "allportsStatsPhysAddress": allportsStatsPhysAddress,
       "allportsStatsAdminStatus": allportsStatsAdminStatus,
       "allportsStatsOperStatus": allportsStatsOperStatus,
       "allportsStatsInOctets": allportsStatsInOctets,
       "allportsStatsOutOctets": allportsStatsOutOctets,
       "allportsStatsInPkts": allportsStatsInPkts,
       "allportsStatsOutPkts": allportsStatsOutPkts,
       "allportsStatsInUcast": allportsStatsInUcast,
       "allportsStatsOutUcast": allportsStatsOutUcast,
       "allportsStatsInBcast": allportsStatsInBcast,
       "allportsStatsOutBcast": allportsStatsOutBcast,
       "allportsStatsInMcast": allportsStatsInMcast,
       "allportsStatsOutMcast": allportsStatsOutMcast,
       "allportsStatsInDiscards": allportsStatsInDiscards,
       "allportsStatsOutDiscards": allportsStatsOutDiscards,
       "allportsStatsInErrors": allportsStatsInErrors,
       "allportsStatsOutErrors": allportsStatsOutErrors,
       "allportsStatsInUnknownProtos": allportsStatsInUnknownProtos,
       "allportsStatsOutQLen": allportsStatsOutQLen,
       "allportsStatsipInReceives": allportsStatsipInReceives,
       "allportsStatsipInHeaderErrors": allportsStatsipInHeaderErrors,
       "allportsStatsipInDiscards": allportsStatsipInDiscards,
       "allportsStatsLinkStateChange": allportsStatsLinkStateChange,
       "allportsStatsipInReceivesRate": allportsStatsipInReceivesRate,
       "allportsStatsipInHeaderErrorsRate": allportsStatsipInHeaderErrorsRate,
       "allportsStatsipInDiscardsRate": allportsStatsipInDiscardsRate,
       "allportsStatsInOctetsRate": allportsStatsInOctetsRate,
       "allportsStatsOutOctetsRate": allportsStatsOutOctetsRate,
       "allportsStatsInUcastRate": allportsStatsInUcastRate,
       "allportsStatsOutUcastRate": allportsStatsOutUcastRate,
       "allportsStatsInBcastRate": allportsStatsInBcastRate,
       "allportsStatsOutBcastRate": allportsStatsOutBcastRate,
       "allportsStatsInMcastRate": allportsStatsInMcastRate,
       "allportsStatsOutMcastRate": allportsStatsOutMcastRate,
       "allportsStatsInDiscardsRate": allportsStatsInDiscardsRate,
       "allportsStatsOutDiscardsRate": allportsStatsOutDiscardsRate,
       "allportsStatsInErrorsRate": allportsStatsInErrorsRate,
       "allportsStatsOutErrorsRate": allportsStatsOutErrorsRate,
       "clearPortsStats": clearPortsStats,
       "dot1RateStatsTable": dot1RateStatsTable,
       "dot1RateStatsTableEntry": dot1RateStatsTableEntry,
       "dot1RateStatsIndx": dot1RateStatsIndx,
       "dot1RatePortInFrames": dot1RatePortInFrames,
       "dot1RatePortOutFrames": dot1RatePortOutFrames,
       "dot1RatePortInDiscards": dot1RatePortInDiscards,
       "dot1RateTpLearnedEntryDiscards": dot1RateTpLearnedEntryDiscards,
       "dot1RateStpPortForwardTransitions": dot1RateStpPortForwardTransitions,
       "dot3RateStatsTable": dot3RateStatsTable,
       "dot3RateStatsTableEntry": dot3RateStatsTableEntry,
       "dot3RateStatsIndx": dot3RateStatsIndx,
       "dot3RateStatsAlignmentErrors": dot3RateStatsAlignmentErrors,
       "dot3RateStatsFCSErrors": dot3RateStatsFCSErrors,
       "dot3RateStatsSingleCollisionFrames": dot3RateStatsSingleCollisionFrames,
       "dot3RateStatsMultipleCollisionFrames": dot3RateStatsMultipleCollisionFrames,
       "dot3RateStatsLateCollisions": dot3RateStatsLateCollisions,
       "dot3RateStatsExcessiveCollisions": dot3RateStatsExcessiveCollisions,
       "dot3RateStatsInternalMacTransmitErrors": dot3RateStatsInternalMacTransmitErrors,
       "dot3RateStatsFrameTooLongs": dot3RateStatsFrameTooLongs,
       "dot3RateStatsInternalMacReceiveErrors": dot3RateStatsInternalMacReceiveErrors,
       "portQoSCounterTable": portQoSCounterTable,
       "portQoSCounterTableEntry": portQoSCounterTableEntry,
       "portQoSIndex": portQoSIndex,
       "queueQoSIndex": queueQoSIndex,
       "txPackets": txPackets,
       "droppedPackets": droppedPackets,
       "txBytes": txBytes,
       "droppedBytes": droppedBytes,
       "txPacketsRate": txPacketsRate,
       "droppedPacketsRate": droppedPacketsRate,
       "txBytesRate": txBytesRate,
       "droppedBytesRate": droppedBytesRate,
       "agClearStats": agClearStats,
       "snmpClearStats": snmpClearStats,
       "ntpStats": ntpStats,
       "ntpPrimaryServerReqSent": ntpPrimaryServerReqSent,
       "ntpPrimaryServerRespRcvd": ntpPrimaryServerRespRcvd,
       "ntpPrimaryServerUpdates": ntpPrimaryServerUpdates,
       "ntpSecondaryServerReqSent": ntpSecondaryServerReqSent,
       "ntpSecondaryServerRespRcvd": ntpSecondaryServerRespRcvd,
       "ntpSecondaryServerUpdates": ntpSecondaryServerUpdates,
       "ntpLastUpdateServer": ntpLastUpdateServer,
       "ntpLastUpdateTime": ntpLastUpdateTime,
       "ntpClearStats": ntpClearStats,
       "ntpSystemCurrentTime": ntpSystemCurrentTime,
       "aclStats": aclStats,
       "aclStatsTable": aclStatsTable,
       "aclStatsTableEntry": aclStatsTableEntry,
       "aclStatsIndex": aclStatsIndex,
       "aclStatsHits": aclStatsHits,
       "aclClearStats": aclClearStats,
       "vmapStatsTable": vmapStatsTable,
       "vmapStatsTableEntry": vmapStatsTableEntry,
       "vmapStatsIndex": vmapStatsIndex,
       "vmapStatsHits": vmapStatsHits,
       "vmapClearStats": vmapClearStats,
       "acl6StatsTable": acl6StatsTable,
       "acl6StatsTableEntry": acl6StatsTableEntry,
       "acl6StatsIndex": acl6StatsIndex,
       "acl6StatsHits": acl6StatsHits,
       "acl6ClearStats": acl6ClearStats,
       "memoryStats": memoryStats,
       "totalMemoryStats": totalMemoryStats,
       "memoryFreeStats": memoryFreeStats,
       "memorySharedStats": memorySharedStats,
       "memoryBufferStats": memoryBufferStats,
       "swapTotalStats": swapTotalStats,
       "swapFreeStats": swapFreeStats,
       "highTotalStats": highTotalStats,
       "highFreeStats": highFreeStats,
       "snmpStats": snmpStats,
       "nsnmpInPkts": nsnmpInPkts,
       "nsnmpInBadCommunityNames": nsnmpInBadCommunityNames,
       "nsnmpInASNParseErrs": nsnmpInASNParseErrs,
       "nsnmpOutPkts": nsnmpOutPkts,
       "nsnmpInTooBigs": nsnmpInTooBigs,
       "nsnmpInBadValues": nsnmpInBadValues,
       "nsnmpInGenErrs": nsnmpInGenErrs,
       "nsnmpInTotalSetVars": nsnmpInTotalSetVars,
       "nsnmpInGetNexts": nsnmpInGetNexts,
       "nsnmpInGetResponses": nsnmpInGetResponses,
       "nsnmpOutTooBigs": nsnmpOutTooBigs,
       "nsnmpOutBadValues": nsnmpOutBadValues,
       "nsnmpOutGenErrs": nsnmpOutGenErrs,
       "nsnmpOutGetNexts": nsnmpOutGetNexts,
       "nsnmpOutGetResponses": nsnmpOutGetResponses,
       "nsnmpSilentDrops": nsnmpSilentDrops,
       "nsnmpInBadVersions": nsnmpInBadVersions,
       "nsnmpInBadCommunityUses": nsnmpInBadCommunityUses,
       "nsnmpEnableAuthTraps": nsnmpEnableAuthTraps,
       "nsnmpInBadTypes": nsnmpInBadTypes,
       "nsnmpInNoSuchNames": nsnmpInNoSuchNames,
       "nsnmpInReadOnlys": nsnmpInReadOnlys,
       "nsnmpInTotalReqVars": nsnmpInTotalReqVars,
       "nsnmpInGetRequests": nsnmpInGetRequests,
       "nsnmpInSetRequests": nsnmpInSetRequests,
       "nsnmpInTraps": nsnmpInTraps,
       "nsnmpOutNoSuchNames": nsnmpOutNoSuchNames,
       "nsnmpOutReadOnlys": nsnmpOutReadOnlys,
       "nsnmpOutGetRequests": nsnmpOutGetRequests,
       "nsnmpOutSetRequests": nsnmpOutSetRequests,
       "nsnmpOutTraps": nsnmpOutTraps,
       "nsnmpProxyDrops": nsnmpProxyDrops,
       "mpTcbStats": mpTcbStats,
       "tcpControlBlocksTable": tcpControlBlocksTable,
       "tcpControlBlocksTableEntry": tcpControlBlocksTableEntry,
       "tcpControlBlocksIndx": tcpControlBlocksIndx,
       "destAddr": destAddr,
       "remotePort": remotePort,
       "sourceAddr": sourceAddr,
       "localPort": localPort,
       "state": state,
       "portType": portType,
       "portState": portState,
       "tcpMGMTControlBlocksTable": tcpMGMTControlBlocksTable,
       "tcpMGMTTableEntry": tcpMGMTTableEntry,
       "tcpMGMTIndx": tcpMGMTIndx,
       "recvQ": recvQ,
       "sentQ": sentQ,
       "localAddress": localAddress,
       "foreignAddress": foreignAddress,
       "stateMgmt": stateMgmt,
       "mpUdpStats": mpUdpStats,
       "udpControlBlocksTable": udpControlBlocksTable,
       "udpControlBlocksTableEntry": udpControlBlocksTableEntry,
       "udpMpLocalPort": udpMpLocalPort,
       "udpMpState": udpMpState,
       "udpMGMTControlBlocksTable": udpMGMTControlBlocksTable,
       "udpMGMTTableEntry": udpMGMTTableEntry,
       "udpMGMTIndx": udpMGMTIndx,
       "recvQUdp": recvQUdp,
       "sentQUdp": sentQUdp,
       "localAddressUdp": localAddressUdp,
       "foreignAddressUdp": foreignAddressUdp,
       "stateMgmtUdp": stateMgmtUdp,
       "agentInfo": agentInfo,
       "hardware": hardware,
       "hwPartNumber": hwPartNumber,
       "hwRevision": hwRevision,
       "hwFanStatus": hwFanStatus,
       "hwFanSpeed": hwFanSpeed,
       "hwTempSensors": hwTempSensors,
       "hwGlobalHealthStatus": hwGlobalHealthStatus,
       "hwESN": hwESN,
       "portInfo": portInfo,
       "portInfoTable": portInfoTable,
       "portInfoTableEntry": portInfoTableEntry,
       "portInfoIndx": portInfoIndx,
       "portInfoSpeed": portInfoSpeed,
       "portInfoMode": portInfoMode,
       "portInfoFlowCtrl": portInfoFlowCtrl,
       "portInfoLink": portInfoLink,
       "portInfoPhyIfDescr": portInfoPhyIfDescr,
       "portInfoPhyIfType": portInfoPhyIfType,
       "portInfoPhyIfMtu": portInfoPhyIfMtu,
       "portInfoPhyIfPhysAddress": portInfoPhyIfPhysAddress,
       "portInfoPhyIfOperStatus": portInfoPhyIfOperStatus,
       "portInfoPhyIfLastChange": portInfoPhyIfLastChange,
       "portInfoLearning": portInfoLearning,
       "portInfoBpduGuard": portInfoBpduGuard,
       "portInfoPvid": portInfoPvid,
       "portInfoVlanTag": portInfoVlanTag,
       "portInfoErrDisableRecovery": portInfoErrDisableRecovery,
       "portInfoErrDisableTimeLeft": portInfoErrDisableTimeLeft,
       "portInfoExtGuard": portInfoExtGuard,
       "portInfoLFDState": portInfoLFDState,
       "agDiff": agDiff,
       "agDiffState": agDiffState,
       "agDiffTableSize": agDiffTableSize,
       "agDiffTable": agDiffTable,
       "agDiffTableEntry": agDiffTableEntry,
       "agDiffIndex": agDiffIndex,
       "agDiffString": agDiffString,
       "agCfgDump": agCfgDump,
       "agCfgDumpState": agCfgDumpState,
       "agCfgDumpTableSize": agCfgDumpTableSize,
       "agCfgDumpTable": agCfgDumpTable,
       "agCfgDumpTableEntry": agCfgDumpTableEntry,
       "agCfgDumpIndex": agCfgDumpIndex,
       "agCfgDumpString": agCfgDumpString,
       "geaportInfo": geaportInfo,
       "geaportInfoTable": geaportInfoTable,
       "geaportInfoTableEntry": geaportInfoTableEntry,
       "geaportInfoLogicalIndex": geaportInfoLogicalIndex,
       "geaportInfoAlias": geaportInfoAlias,
       "geaportInfoPort": geaportInfoPort,
       "geaportInfoUnit": geaportInfoUnit,
       "sfpInfo": sfpInfo,
       "sfpInfoTable": sfpInfoTable,
       "sfpInfoTableEntry": sfpInfoTableEntry,
       "sfpInfoIndx": sfpInfoIndx,
       "sfpInfoPort": sfpInfoPort,
       "sfpInfoDevice": sfpInfoDevice,
       "sfpInfoTXEnable": sfpInfoTXEnable,
       "sfpInfoRXSignal": sfpInfoRXSignal,
       "sfpInfoTXFault": sfpInfoTXFault,
       "sfpInfoApproved": sfpInfoApproved,
       "sfpInfoVendor": sfpInfoVendor,
       "sfpInfoSerial": sfpInfoSerial,
       "sfpInfoPartNumber": sfpInfoPartNumber,
       "sfpInfoRevision": sfpInfoRevision,
       "sfpInfoVoltage": sfpInfoVoltage,
       "sfpInfoTemperature": sfpInfoTemperature,
       "sfpInfoWaveLength": sfpInfoWaveLength,
       "agVMGroupInfo": agVMGroupInfo,
       "vmGroupInfoTbl": vmGroupInfoTbl,
       "vmGroupInfolistEntry": vmGroupInfolistEntry,
       "vmGroupInfoIdx": vmGroupInfoIdx,
       "vmGroupInfoMac": vmGroupInfoMac,
       "vmGroupInfoIP": vmGroupInfoIP,
       "vmGroupInfoPort": vmGroupInfoPort,
       "vmGroupInfoGroup": vmGroupInfoGroup,
       "vmGroupInfoVlan": vmGroupInfoVlan,
       "vmGroupInfoIsESXSvcCon": vmGroupInfoIsESXSvcCon,
       "vmGroupInfoIsVMK": vmGroupInfoIsVMK,
       "vmGroupInfoName": vmGroupInfoName,
       "vmGroupInfoUUID": vmGroupInfoUUID,
       "vmGroupInfoVSwitch": vmGroupInfoVSwitch,
       "vmGroupInfoPortGroup": vmGroupInfoPortGroup,
       "vmGroupInfoHost": vmGroupInfoHost,
       "accessInfo": accessInfo,
       "accessInfoClearAllUserFailAttempts": accessInfoClearAllUserFailAttempts,
       "accessInfoClearAllUserLocks": accessInfoClearAllUserLocks,
       "accessUserInfoTable": accessUserInfoTable,
       "accessUserInfoTableEntry": accessUserInfoTableEntry,
       "accessUserInfoIndex": accessUserInfoIndex,
       "accessUserInfoLockState": accessUserInfoLockState,
       "accessUserInfoClearFailAttempts": accessUserInfoClearFailAttempts,
       "accessUserInfoClearLock": accessUserInfoClearLock,
       "agentOper": agentOper,
       "agPortOperTable": agPortOperTable,
       "agPortOperTableEntry": agPortOperTableEntry,
       "portOperIdx": portOperIdx,
       "portOperState": portOperState,
       "portOperRmon": portOperRmon,
       "portOperLearning": portOperLearning,
       "agNTPOper": agNTPOper,
       "ntpOperSendReq": ntpOperSendReq,
       "portOperDot1xTable": portOperDot1xTable,
       "portOperDot1xTableEntry": portOperDot1xTableEntry,
       "portOperDot1xIndx": portOperDot1xIndx,
       "portOperDot1xReset": portOperDot1xReset,
       "portOperDot1xReauth": portOperDot1xReauth,
       "agSrvLedOper": agSrvLedOper,
       "srvLedOper": srvLedOper,
       "layer2": layer2,
       "layer2Configs": layer2Configs,
       "vlan": vlan,
       "vlanMaxEnt": vlanMaxEnt,
       "vlanCurCfgTable": vlanCurCfgTable,
       "vlanCurCfgTableEntry": vlanCurCfgTableEntry,
       "vlanCurCfgVlanId": vlanCurCfgVlanId,
       "vlanCurCfgPorts": vlanCurCfgPorts,
       "vlanCurCfgState": vlanCurCfgState,
       "vlanCurCfgStg": vlanCurCfgStg,
       "vlanCurCfgVlanName": vlanCurCfgVlanName,
       "vlanCurCfgPrVlanType": vlanCurCfgPrVlanType,
       "vlanCurCfgPrVlanMapPriId": vlanCurCfgPrVlanMapPriId,
       "vlanNewCfgTable": vlanNewCfgTable,
       "vlanNewCfgTableEntry": vlanNewCfgTableEntry,
       "vlanNewCfgVlanId": vlanNewCfgVlanId,
       "vlanNewCfgVlanName": vlanNewCfgVlanName,
       "vlanNewCfgPorts": vlanNewCfgPorts,
       "vlanNewCfgState": vlanNewCfgState,
       "vlanNewCfgAddPort": vlanNewCfgAddPort,
       "vlanNewCfgRemovePort": vlanNewCfgRemovePort,
       "vlanNewCfgDelete": vlanNewCfgDelete,
       "vlanNewCfgStg": vlanNewCfgStg,
       "vlanNewCfgPrVlanType": vlanNewCfgPrVlanType,
       "vlanNewCfgPrVlanMapPriId": vlanNewCfgPrVlanMapPriId,
       "vlanMaxVlanID": vlanMaxVlanID,
       "pvlanCurCfgTable": pvlanCurCfgTable,
       "pvlanCurCfgTableEntry": pvlanCurCfgTableEntry,
       "pvlanCurCfgVlanId": pvlanCurCfgVlanId,
       "pvlanCurCfgPvlanId": pvlanCurCfgPvlanId,
       "pvlanCurCfgPvlanFrameType": pvlanCurCfgPvlanFrameType,
       "pvlanCurCfgPvlanEtherType": pvlanCurCfgPvlanEtherType,
       "pvlanCurCfgPvlanPorts": pvlanCurCfgPvlanPorts,
       "pvlanCurCfgPvlanPrio": pvlanCurCfgPvlanPrio,
       "pvlanCurCfgPvlanState": pvlanCurCfgPvlanState,
       "pvlanCurCfgPvlanTagPorts": pvlanCurCfgPvlanTagPorts,
       "pvlanCurCfgPvlanPredefProto": pvlanCurCfgPvlanPredefProto,
       "pvlanNewCfgTable": pvlanNewCfgTable,
       "pvlanNewCfgTableEntry": pvlanNewCfgTableEntry,
       "pvlanNewCfgVlanId": pvlanNewCfgVlanId,
       "pvlanNewCfgPvlanId": pvlanNewCfgPvlanId,
       "pvlanNewCfgPvlanFrameType": pvlanNewCfgPvlanFrameType,
       "pvlanNewCfgPvlanEtherType": pvlanNewCfgPvlanEtherType,
       "pvlanNewCfgPvlanAddPort": pvlanNewCfgPvlanAddPort,
       "pvlanNewCfgPvlanRemovePort": pvlanNewCfgPvlanRemovePort,
       "pvlanNewCfgPvlanPrio": pvlanNewCfgPvlanPrio,
       "pvlanNewCfgPvlanState": pvlanNewCfgPvlanState,
       "pvlanNewCfgPvlanTagPort": pvlanNewCfgPvlanTagPort,
       "pvlanNewCfgPvlanUntagPort": pvlanNewCfgPvlanUntagPort,
       "pvlanNewCfgPvlanPorts": pvlanNewCfgPvlanPorts,
       "pvlanNewCfgPvlanTagPorts": pvlanNewCfgPvlanTagPorts,
       "pvlanNewCfgPvlanDelete": pvlanNewCfgPvlanDelete,
       "pvlanNewCfgPvlanPredefProto": pvlanNewCfgPvlanPredefProto,
       "trunkgroup": trunkgroup,
       "trunkGroupTableMaxSize": trunkGroupTableMaxSize,
       "trunkGroupCurCfgTable": trunkGroupCurCfgTable,
       "trunkGroupCurCfgTableEntry": trunkGroupCurCfgTableEntry,
       "trunkGroupCurCfgIndex": trunkGroupCurCfgIndex,
       "trunkGroupCurCfgPorts": trunkGroupCurCfgPorts,
       "trunkGroupCurCfgState": trunkGroupCurCfgState,
       "trunkGroupNewCfgTable": trunkGroupNewCfgTable,
       "trunkGroupNewCfgTableEntry": trunkGroupNewCfgTableEntry,
       "trunkGroupNewCfgIndex": trunkGroupNewCfgIndex,
       "trunkGroupNewCfgPorts": trunkGroupNewCfgPorts,
       "trunkGroupNewCfgAddPort": trunkGroupNewCfgAddPort,
       "trunkGroupNewCfgRemovePort": trunkGroupNewCfgRemovePort,
       "trunkGroupNewCfgState": trunkGroupNewCfgState,
       "trunkGroupNewCfgDelete": trunkGroupNewCfgDelete,
       "stgCfg": stgCfg,
       "stgCurCfgTable": stgCurCfgTable,
       "stgCurCfgTableEntry": stgCurCfgTableEntry,
       "stgCurCfgIndex": stgCurCfgIndex,
       "stgCurCfgState": stgCurCfgState,
       "stgCurCfgPriority": stgCurCfgPriority,
       "stgCurCfgBrgHelloTime": stgCurCfgBrgHelloTime,
       "stgCurCfgBrgForwardDelay": stgCurCfgBrgForwardDelay,
       "stgCurCfgBrgMaxAge": stgCurCfgBrgMaxAge,
       "stgCurCfgVlanBmap": stgCurCfgVlanBmap,
       "stgNewCfgTable": stgNewCfgTable,
       "stgNewCfgTableEntry": stgNewCfgTableEntry,
       "stgNewCfgIndex": stgNewCfgIndex,
       "stgNewCfgState": stgNewCfgState,
       "stgNewCfgDefaultCfg": stgNewCfgDefaultCfg,
       "stgNewCfgAddVlan": stgNewCfgAddVlan,
       "stgNewCfgRemoveVlan": stgNewCfgRemoveVlan,
       "stgNewCfgPriority": stgNewCfgPriority,
       "stgNewCfgBrgHelloTime": stgNewCfgBrgHelloTime,
       "stgNewCfgBrgForwardDelay": stgNewCfgBrgForwardDelay,
       "stgNewCfgBrgMaxAge": stgNewCfgBrgMaxAge,
       "stgNewCfgVlanBmap": stgNewCfgVlanBmap,
       "stgNewCfgRemoveAllVlan": stgNewCfgRemoveAllVlan,
       "stgCurCfgPortTable": stgCurCfgPortTable,
       "stgCurCfgPortTableEntry": stgCurCfgPortTableEntry,
       "stgCurCfgStgIndex": stgCurCfgStgIndex,
       "stgCurCfgPortIndex": stgCurCfgPortIndex,
       "stgCurCfgPortState": stgCurCfgPortState,
       "stgCurCfgPortPriority": stgCurCfgPortPriority,
       "stgCurCfgPortPathCost": stgCurCfgPortPathCost,
       "stgNewCfgPortTable": stgNewCfgPortTable,
       "stgNewCfgPortTableEntry": stgNewCfgPortTableEntry,
       "stgNewCfgStgIndex": stgNewCfgStgIndex,
       "stgNewCfgPortIndex": stgNewCfgPortIndex,
       "stgNewCfgPortState": stgNewCfgPortState,
       "stgNewCfgPortPriority": stgNewCfgPortPriority,
       "stgNewCfgPortPathCost": stgNewCfgPortPathCost,
       "mirroring": mirroring,
       "mirrPortMirr": mirrPortMirr,
       "pmCurCfgPortMirrState": pmCurCfgPortMirrState,
       "pmNewCfgPortMirrState": pmNewCfgPortMirrState,
       "pmCurCfgPortMonitorTable": pmCurCfgPortMonitorTable,
       "pmCurCfgPortMonitorEntry": pmCurCfgPortMonitorEntry,
       "pmCurCfgPmirrMoniPortIndex": pmCurCfgPmirrMoniPortIndex,
       "pmCurCfgPmirrMirrPortIndex": pmCurCfgPmirrMirrPortIndex,
       "pmCurCfgPmirrDirection": pmCurCfgPmirrDirection,
       "pmNewCfgPortMonitorTable": pmNewCfgPortMonitorTable,
       "pmNewCfgPortMonitorEntry": pmNewCfgPortMonitorEntry,
       "pmNewCfgPmirrMoniPortIndex": pmNewCfgPmirrMoniPortIndex,
       "pmNewCfgPmirrMirrPortIndex": pmNewCfgPmirrMirrPortIndex,
       "pmNewCfgPmirrDirection": pmNewCfgPmirrDirection,
       "pmNewCfgPmirrDelete": pmNewCfgPmirrDelete,
       "pmNewCfgPmonDelete": pmNewCfgPmonDelete,
       "lacp": lacp,
       "lacpCurSystemPriority": lacpCurSystemPriority,
       "lacpNewSystemPriority": lacpNewSystemPriority,
       "lacpCurSystemTimeoutTime": lacpCurSystemTimeoutTime,
       "lacpNewSystemTimeoutTime": lacpNewSystemTimeoutTime,
       "lacpCurPortCfgTable": lacpCurPortCfgTable,
       "lacpCurPortCfgTableEntry": lacpCurPortCfgTableEntry,
       "lacpCurPortCfgTableId": lacpCurPortCfgTableId,
       "lacpCurPortState": lacpCurPortState,
       "lacpCurPortActorPortPriority": lacpCurPortActorPortPriority,
       "lacpCurPortActorAdminKey": lacpCurPortActorAdminKey,
       "lacpCurPortActorMinLinks": lacpCurPortActorMinLinks,
       "lacpCurPortSuspendIndividual": lacpCurPortSuspendIndividual,
       "lacpNewPortCfgTable": lacpNewPortCfgTable,
       "lacpNewPortCfgTableEntry": lacpNewPortCfgTableEntry,
       "lacpNewPortCfgTableId": lacpNewPortCfgTableId,
       "lacpNewPortState": lacpNewPortState,
       "lacpNewPortActorPortPriority": lacpNewPortActorPortPriority,
       "lacpNewPortActorAdminKey": lacpNewPortActorAdminKey,
       "lacpNewPortActorMinLinks": lacpNewPortActorMinLinks,
       "lacpNewPortSetToDefault": lacpNewPortSetToDefault,
       "lacpNewPortSuspendIndividual": lacpNewPortSuspendIndividual,
       "lacpDeleteTrunk": lacpDeleteTrunk,
       "lacpNewSystemSetToDefault": lacpNewSystemSetToDefault,
       "thash": thash,
       "thashL2L3": thashL2L3,
       "l2ThashCurCfgSmacState": l2ThashCurCfgSmacState,
       "l2ThashNewCfgSmacState": l2ThashNewCfgSmacState,
       "l2ThashCurCfgDmacState": l2ThashCurCfgDmacState,
       "l2ThashNewCfgDmacState": l2ThashNewCfgDmacState,
       "l3ThashCurCfgIpUseL2State": l3ThashCurCfgIpUseL2State,
       "l3ThashNewCfgIpUseL2State": l3ThashNewCfgIpUseL2State,
       "l3ThashCurCfgSipState": l3ThashCurCfgSipState,
       "l3ThashNewCfgSipState": l3ThashNewCfgSipState,
       "l3ThashCurCfgDipState": l3ThashCurCfgDipState,
       "l3ThashNewCfgDipState": l3ThashNewCfgDipState,
       "l2ThashCurCfgIngressState": l2ThashCurCfgIngressState,
       "l2ThashNewCfgIngressState": l2ThashNewCfgIngressState,
       "l3ThashCurCfgL4PortState": l3ThashCurCfgL4PortState,
       "l3ThashNewCfgL4PortState": l3ThashNewCfgL4PortState,
       "thashFcoe": thashFcoe,
       "fcoeThashCurCfgSourceState": fcoeThashCurCfgSourceState,
       "fcoeThashNewCfgSourceState": fcoeThashNewCfgSourceState,
       "fcoeThashCurCfgDestinationState": fcoeThashCurCfgDestinationState,
       "fcoeThashNewCfgDestinationState": fcoeThashNewCfgDestinationState,
       "fcoeThashCurCfgCntagState": fcoeThashCurCfgCntagState,
       "fcoeThashNewCfgCntagState": fcoeThashNewCfgCntagState,
       "fcoeThashCurCfgOriginatorState": fcoeThashCurCfgOriginatorState,
       "fcoeThashNewCfgOriginatorState": fcoeThashNewCfgOriginatorState,
       "fcoeThashCurCfgResponderState": fcoeThashCurCfgResponderState,
       "fcoeThashNewCfgResponderState": fcoeThashNewCfgResponderState,
       "fcoeThashCurCfgFabricState": fcoeThashCurCfgFabricState,
       "fcoeThashNewCfgFabricState": fcoeThashNewCfgFabricState,
       "mstCfg": mstCfg,
       "mstGeneralCfg": mstGeneralCfg,
       "mstCurCfgRegionName": mstCurCfgRegionName,
       "mstNewCfgRegionName": mstNewCfgRegionName,
       "mstCurCfgRegionRevision": mstCurCfgRegionRevision,
       "mstNewCfgRegionRevision": mstNewCfgRegionRevision,
       "mstCurCfgMaxHopCount": mstCurCfgMaxHopCount,
       "mstNewCfgMaxHopCount": mstNewCfgMaxHopCount,
       "mstCurCfgStpMode": mstCurCfgStpMode,
       "mstNewCfgStpMode": mstNewCfgStpMode,
       "mstCistCfg": mstCistCfg,
       "mstCistDefaultCfg": mstCistDefaultCfg,
       "mstCistBridgeCfg": mstCistBridgeCfg,
       "mstCistCurCfgBridgePriority": mstCistCurCfgBridgePriority,
       "mstCistNewCfgBridgePriority": mstCistNewCfgBridgePriority,
       "mstCistCurCfgBridgeMaxAge": mstCistCurCfgBridgeMaxAge,
       "mstCistNewCfgBridgeMaxAge": mstCistNewCfgBridgeMaxAge,
       "mstCistCurCfgBridgeForwardDelay": mstCistCurCfgBridgeForwardDelay,
       "mstCistNewCfgBridgeForwardDelay": mstCistNewCfgBridgeForwardDelay,
       "mstCistCurCfgVlanBmap": mstCistCurCfgVlanBmap,
       "mstCistNewCfgVlanBmap": mstCistNewCfgVlanBmap,
       "mstCistNewCfgAddVlan": mstCistNewCfgAddVlan,
       "mstCistCurCfgPortTable": mstCistCurCfgPortTable,
       "mstCistCurCfgPortTableEntry": mstCistCurCfgPortTableEntry,
       "mstCistCurCfgPortIndex": mstCistCurCfgPortIndex,
       "mstCistCurCfgPortPriority": mstCistCurCfgPortPriority,
       "mstCistCurCfgPortPathCost": mstCistCurCfgPortPathCost,
       "mstCistCurCfgPortLinkType": mstCistCurCfgPortLinkType,
       "mstCistCurCfgPortEdge": mstCistCurCfgPortEdge,
       "mstCistCurCfgPortStpState": mstCistCurCfgPortStpState,
       "mstCistCurCfgPortHelloTime": mstCistCurCfgPortHelloTime,
       "mstCistCurCfgPortPvstProtection": mstCistCurCfgPortPvstProtection,
       "mstCistNewCfgPortTable": mstCistNewCfgPortTable,
       "mstCistNewCfgPortTableEntry": mstCistNewCfgPortTableEntry,
       "mstCistNewCfgPortIndex": mstCistNewCfgPortIndex,
       "mstCistNewCfgPortPriority": mstCistNewCfgPortPriority,
       "mstCistNewCfgPortPathCost": mstCistNewCfgPortPathCost,
       "mstCistNewCfgPortStpState": mstCistNewCfgPortStpState,
       "mstCistNewCfgPortHelloTime": mstCistNewCfgPortHelloTime,
       "mstCistNewCfgPortPvstProtection": mstCistNewCfgPortPvstProtection,
       "l2GeneralCfg": l2GeneralCfg,
       "pvstCompatibilityCurCfgState": pvstCompatibilityCurCfgState,
       "pvstCompatibilityNewCfgState": pvstCompatibilityNewCfgState,
       "nostpCurCfgState": nostpCurCfgState,
       "nostpNewCfgState": nostpNewCfgState,
       "stpLoopGuardCurCfgState": stpLoopGuardCurCfgState,
       "stpLoopGuardNewCfgState": stpLoopGuardNewCfgState,
       "vlanAutoStgCurCfgState": vlanAutoStgCurCfgState,
       "vlanAutoStgNewCfgState": vlanAutoStgNewCfgState,
       "failoverCfg": failoverCfg,
       "failoverCurCfgOnState": failoverCurCfgOnState,
       "failoverNewCfgOnState": failoverNewCfgOnState,
       "failoverMaxTriggerEntries": failoverMaxTriggerEntries,
       "failoverCurCfgTriggerTable": failoverCurCfgTriggerTable,
       "failoverCurCfgTriggerTableEntry": failoverCurCfgTriggerTableEntry,
       "failoverCurCfgTriggerId": failoverCurCfgTriggerId,
       "failoverCurCfgTriggerState": failoverCurCfgTriggerState,
       "failoverCurCfgTriggerLimit": failoverCurCfgTriggerLimit,
       "failoverCurCfgTriggerMmonPort": failoverCurCfgTriggerMmonPort,
       "failoverCurCfgTriggerMmonTrunk": failoverCurCfgTriggerMmonTrunk,
       "failoverCurCfgTriggerMmonKey": failoverCurCfgTriggerMmonKey,
       "failoverCurCfgTriggerMconPort": failoverCurCfgTriggerMconPort,
       "failoverCurCfgTriggerMconTrunk": failoverCurCfgTriggerMconTrunk,
       "failoverCurCfgTriggerMconKey": failoverCurCfgTriggerMconKey,
       "failoverNewCfgTriggerTable": failoverNewCfgTriggerTable,
       "failoverNewCfgTriggerTableEntry": failoverNewCfgTriggerTableEntry,
       "failoverNewCfgTriggerId": failoverNewCfgTriggerId,
       "failoverNewCfgTriggerState": failoverNewCfgTriggerState,
       "failoverNewCfgTriggerLimit": failoverNewCfgTriggerLimit,
       "failoverNewCfgTriggerMmonPort": failoverNewCfgTriggerMmonPort,
       "failoverNewCfgTriggerMmonPortAdd": failoverNewCfgTriggerMmonPortAdd,
       "failoverNewCfgTriggerMmonPortRem": failoverNewCfgTriggerMmonPortRem,
       "failoverNewCfgTriggerMmonTrunk": failoverNewCfgTriggerMmonTrunk,
       "failoverNewCfgTriggerMmonTrunkAdd": failoverNewCfgTriggerMmonTrunkAdd,
       "failoverNewCfgTriggerMmonTrunkRem": failoverNewCfgTriggerMmonTrunkRem,
       "failoverNewCfgTriggerMmonKey": failoverNewCfgTriggerMmonKey,
       "failoverNewCfgTriggerMmonKeyAdd": failoverNewCfgTriggerMmonKeyAdd,
       "failoverNewCfgTriggerMmonKeyRem": failoverNewCfgTriggerMmonKeyRem,
       "failoverNewCfgTriggerMconPort": failoverNewCfgTriggerMconPort,
       "failoverNewCfgTriggerMconPortAdd": failoverNewCfgTriggerMconPortAdd,
       "failoverNewCfgTriggerMconPortRem": failoverNewCfgTriggerMconPortRem,
       "failoverNewCfgTriggerMconTrunk": failoverNewCfgTriggerMconTrunk,
       "failoverNewCfgTriggerMconTrunkAdd": failoverNewCfgTriggerMconTrunkAdd,
       "failoverNewCfgTriggerMconTrunkRem": failoverNewCfgTriggerMconTrunkRem,
       "failoverNewCfgTriggerMconKey": failoverNewCfgTriggerMconKey,
       "failoverNewCfgTriggerMconKeyAdd": failoverNewCfgTriggerMconKeyAdd,
       "failoverNewCfgTriggerMconKeyRem": failoverNewCfgTriggerMconKeyRem,
       "failoverNewCfgTriggerDelete": failoverNewCfgTriggerDelete,
       "dot1x": dot1x,
       "dot1xCurStatus": dot1xCurStatus,
       "dot1xNewStatus": dot1xNewStatus,
       "dot1xCurCfgPortTable": dot1xCurCfgPortTable,
       "dot1xCurCfgPortEntry": dot1xCurCfgPortEntry,
       "dot1xCurCfgPortIndex": dot1xCurCfgPortIndex,
       "dot1xCurCfgPortMode": dot1xCurCfgPortMode,
       "dot1xCurCfgPortQtPeriod": dot1xCurCfgPortQtPeriod,
       "dot1xCurCfgPortTxPeriod": dot1xCurCfgPortTxPeriod,
       "dot1xCurCfgPortSupTmout": dot1xCurCfgPortSupTmout,
       "dot1xCurCfgPortSrvTmout": dot1xCurCfgPortSrvTmout,
       "dot1xCurCfgPortMaxRq": dot1xCurCfgPortMaxRq,
       "dot1xCurCfgPortRaPeriod": dot1xCurCfgPortRaPeriod,
       "dot1xCurCfgPortReAuth": dot1xCurCfgPortReAuth,
       "dot1xCurCfgPortVlanAssign": dot1xCurCfgPortVlanAssign,
       "dot1xNewCfgPortTable": dot1xNewCfgPortTable,
       "dot1xNewCfgPortEntry": dot1xNewCfgPortEntry,
       "dot1xNewCfgPortIndex": dot1xNewCfgPortIndex,
       "dot1xNewCfgPortMode": dot1xNewCfgPortMode,
       "dot1xNewCfgPortQtPeriod": dot1xNewCfgPortQtPeriod,
       "dot1xNewCfgPortTxPeriod": dot1xNewCfgPortTxPeriod,
       "dot1xNewCfgPortSupTmout": dot1xNewCfgPortSupTmout,
       "dot1xNewCfgPortSrvTmout": dot1xNewCfgPortSrvTmout,
       "dot1xNewCfgPortMaxRq": dot1xNewCfgPortMaxRq,
       "dot1xNewCfgPortRaPeriod": dot1xNewCfgPortRaPeriod,
       "dot1xNewCfgPortReAuth": dot1xNewCfgPortReAuth,
       "dot1xNewCfgPortDefault": dot1xNewCfgPortDefault,
       "dot1xNewCfgPortApplyGlobal": dot1xNewCfgPortApplyGlobal,
       "dot1xNewCfgPortVlanAssign": dot1xNewCfgPortVlanAssign,
       "dot1xCurCfgGlobalTable": dot1xCurCfgGlobalTable,
       "dot1xCurCfgGuestVlan": dot1xCurCfgGuestVlan,
       "dot1xCurCfgGuestVlanNumber": dot1xCurCfgGuestVlanNumber,
       "dot1xCurCfgGuestVlanStatus": dot1xCurCfgGuestVlanStatus,
       "dot1xCurCfgGlobalMode": dot1xCurCfgGlobalMode,
       "dot1xCurCfgGlobalQtPeriod": dot1xCurCfgGlobalQtPeriod,
       "dot1xCurCfgGlobalTxPeriod": dot1xCurCfgGlobalTxPeriod,
       "dot1xCurCfgGlobalSupTmout": dot1xCurCfgGlobalSupTmout,
       "dot1xCurCfgGlobalSrvTmout": dot1xCurCfgGlobalSrvTmout,
       "dot1xCurCfgGlobalMaxRq": dot1xCurCfgGlobalMaxRq,
       "dot1xCurCfgGlobalRaPeriod": dot1xCurCfgGlobalRaPeriod,
       "dot1xCurCfgGlobalReAuth": dot1xCurCfgGlobalReAuth,
       "dot1xCurCfgGlobalVlanAssign": dot1xCurCfgGlobalVlanAssign,
       "dot1xNewCfgGlobalTable": dot1xNewCfgGlobalTable,
       "dot1xNewCfgGuestVlan": dot1xNewCfgGuestVlan,
       "dot1xNewCfgGuestVlanNumber": dot1xNewCfgGuestVlanNumber,
       "dot1xNewCfgGuestVlanStatus": dot1xNewCfgGuestVlanStatus,
       "dot1xNewCfgGlobalMode": dot1xNewCfgGlobalMode,
       "dot1xNewCfgGlobalQtPeriod": dot1xNewCfgGlobalQtPeriod,
       "dot1xNewCfgGlobalTxPeriod": dot1xNewCfgGlobalTxPeriod,
       "dot1xNewCfgGlobalSupTmout": dot1xNewCfgGlobalSupTmout,
       "dot1xNewCfgGlobalSrvTmout": dot1xNewCfgGlobalSrvTmout,
       "dot1xNewCfgGlobalMaxRq": dot1xNewCfgGlobalMaxRq,
       "dot1xNewCfgGlobalRaPeriod": dot1xNewCfgGlobalRaPeriod,
       "dot1xNewCfgGlobalReAuth": dot1xNewCfgGlobalReAuth,
       "dot1xNewCfgGlobalDefault": dot1xNewCfgGlobalDefault,
       "dot1xNewCfgGlobalVlanAssign": dot1xNewCfgGlobalVlanAssign,
       "fdb": fdb,
       "fdbGeneralCfg": fdbGeneralCfg,
       "fdbCurCfgAgingTime": fdbCurCfgAgingTime,
       "fdbNewCfgAgingTime": fdbNewCfgAgingTime,
       "fdbCurCfgStaticTable": fdbCurCfgStaticTable,
       "fdbCurCfgStaticEntry": fdbCurCfgStaticEntry,
       "fdbCurCfgEntryIndex": fdbCurCfgEntryIndex,
       "fdbCurCfgVlan": fdbCurCfgVlan,
       "fdbCurCfgPort": fdbCurCfgPort,
       "fdbCurCfgMac": fdbCurCfgMac,
       "fdbCurCfgTrunk": fdbCurCfgTrunk,
       "fdbCurCfgAdminkey": fdbCurCfgAdminkey,
       "fdbNewCfgStaticTable": fdbNewCfgStaticTable,
       "fdbNewCfgStaticEntry": fdbNewCfgStaticEntry,
       "fdbNewCfgEntryIndex": fdbNewCfgEntryIndex,
       "fdbNewCfgAddVlan": fdbNewCfgAddVlan,
       "fdbNewCfgAddPort": fdbNewCfgAddPort,
       "fdbNewCfgAddMac": fdbNewCfgAddMac,
       "fdbNewCfgDelStaticEntry": fdbNewCfgDelStaticEntry,
       "fdbNewCfgAddTrunk": fdbNewCfgAddTrunk,
       "fdbNewCfgAddAdminkey": fdbNewCfgAddAdminkey,
       "mcastFdbCurCfgTable": mcastFdbCurCfgTable,
       "mcastFdbCurCfgEntry": mcastFdbCurCfgEntry,
       "mcastFdbCurCfgEntryIndex": mcastFdbCurCfgEntryIndex,
       "mcastFdbCurCfgVlan": mcastFdbCurCfgVlan,
       "mcastFdbCurCfgPorts": mcastFdbCurCfgPorts,
       "mcastFdbCurCfgMac": mcastFdbCurCfgMac,
       "mcastFdbNewCfgTable": mcastFdbNewCfgTable,
       "mcastFdbNewCfgEntry": mcastFdbNewCfgEntry,
       "mcastFdbNewCfgEntryIndex": mcastFdbNewCfgEntryIndex,
       "mcastFdbNewCfgAddVlan": mcastFdbNewCfgAddVlan,
       "mcastFdbNewCfgPorts": mcastFdbNewCfgPorts,
       "mcastFdbNewCfgAddPort": mcastFdbNewCfgAddPort,
       "mcastFdbNewCfgRemPort": mcastFdbNewCfgRemPort,
       "mcastFdbNewCfgAddMac": mcastFdbNewCfgAddMac,
       "mcastFdbNewCfgDelStaticEntry": mcastFdbNewCfgDelStaticEntry,
       "hotlinksCfg": hotlinksCfg,
       "hotlinksCurCfgOnState": hotlinksCurCfgOnState,
       "hotlinksNewCfgOnState": hotlinksNewCfgOnState,
       "hotlinksCurCfgFdbUpdateState": hotlinksCurCfgFdbUpdateState,
       "hotlinksNewCfgFdbUpdateState": hotlinksNewCfgFdbUpdateState,
       "hotlinksMaxTriggerEntries": hotlinksMaxTriggerEntries,
       "hotlinksCurCfgTriggerTable": hotlinksCurCfgTriggerTable,
       "hotlinksCurCfgTriggerTableEntry": hotlinksCurCfgTriggerTableEntry,
       "hotlinksCurCfgTriggerId": hotlinksCurCfgTriggerId,
       "hotlinksCurCfgTriggerName": hotlinksCurCfgTriggerName,
       "hotlinksCurCfgTriggerState": hotlinksCurCfgTriggerState,
       "hotlinksCurCfgTriggerPreemptState": hotlinksCurCfgTriggerPreemptState,
       "hotlinksCurCfgTriggerFdelay": hotlinksCurCfgTriggerFdelay,
       "hotlinksCurCfgTriggerMasterPort": hotlinksCurCfgTriggerMasterPort,
       "hotlinksCurCfgTriggerMasterTrunk": hotlinksCurCfgTriggerMasterTrunk,
       "hotlinksCurCfgTriggerBackupPort": hotlinksCurCfgTriggerBackupPort,
       "hotlinksCurCfgTriggerBackupTrunk": hotlinksCurCfgTriggerBackupTrunk,
       "hotlinksCurCfgTriggerDelete": hotlinksCurCfgTriggerDelete,
       "hotlinksCurCfgTriggerMasterAdminkey": hotlinksCurCfgTriggerMasterAdminkey,
       "hotlinksCurCfgTriggerBackupAdminkey": hotlinksCurCfgTriggerBackupAdminkey,
       "hotlinksNewCfgTriggerTable": hotlinksNewCfgTriggerTable,
       "hotlinksNewCfgTriggerTableEntry": hotlinksNewCfgTriggerTableEntry,
       "hotlinksNewCfgTriggerId": hotlinksNewCfgTriggerId,
       "hotlinksNewCfgTriggerName": hotlinksNewCfgTriggerName,
       "hotlinksNewCfgTriggerState": hotlinksNewCfgTriggerState,
       "hotlinksNewCfgTriggerPreemptState": hotlinksNewCfgTriggerPreemptState,
       "hotlinksNewCfgTriggerFdelay": hotlinksNewCfgTriggerFdelay,
       "hotlinksNewCfgTriggerMasterPort": hotlinksNewCfgTriggerMasterPort,
       "hotlinksNewCfgTriggerMasterTrunk": hotlinksNewCfgTriggerMasterTrunk,
       "hotlinksNewCfgTriggerBackupPort": hotlinksNewCfgTriggerBackupPort,
       "hotlinksNewCfgTriggerBackupTrunk": hotlinksNewCfgTriggerBackupTrunk,
       "hotlinksNewCfgTriggerDelete": hotlinksNewCfgTriggerDelete,
       "hotlinksNewCfgTriggerMasterAdminkey": hotlinksNewCfgTriggerMasterAdminkey,
       "hotlinksNewCfgTriggerBackupAdminkey": hotlinksNewCfgTriggerBackupAdminkey,
       "hotlinksCurCfgBpduState": hotlinksCurCfgBpduState,
       "hotlinksNewCfgBpduState": hotlinksNewCfgBpduState,
       "hotlinksCurCfgFdbUpdateRate": hotlinksCurCfgFdbUpdateRate,
       "hotlinksNewCfgFdbUpdateRate": hotlinksNewCfgFdbUpdateRate,
       "lldpCfg": lldpCfg,
       "lldpPortTableMaxEnt": lldpPortTableMaxEnt,
       "lldpCurCfgPortTable": lldpCurCfgPortTable,
       "lldpCurCfgPortEntry": lldpCurCfgPortEntry,
       "lldpCurCfgPortIndx": lldpCurCfgPortIndx,
       "lldpCurCfgPortAdmStat": lldpCurCfgPortAdmStat,
       "lldpCurCfgPortSnmpTrap": lldpCurCfgPortSnmpTrap,
       "lldpCurCfgPortportdesctlv": lldpCurCfgPortportdesctlv,
       "lldpCurCfgPortsysnametlv": lldpCurCfgPortsysnametlv,
       "lldpCurCfgPortsysdescrtlv": lldpCurCfgPortsysdescrtlv,
       "lldpCurCfgPortsyscaptlv": lldpCurCfgPortsyscaptlv,
       "lldpCurCfgPortmgmtaddrtlv": lldpCurCfgPortmgmtaddrtlv,
       "lldpCurCfgPortportvidtlv": lldpCurCfgPortportvidtlv,
       "lldpCurCfgPortportprottlv": lldpCurCfgPortportprottlv,
       "lldpCurCfgPortvlannametlv": lldpCurCfgPortvlannametlv,
       "lldpCurCfgPortprotidtlv": lldpCurCfgPortprotidtlv,
       "lldpCurCfgPortmacphytlv": lldpCurCfgPortmacphytlv,
       "lldpCurCfgPortpowermditlv": lldpCurCfgPortpowermditlv,
       "lldpCurCfgPortlinkaggrtlv": lldpCurCfgPortlinkaggrtlv,
       "lldpCurCfgPortframesztlv": lldpCurCfgPortframesztlv,
       "lldpCurCfgPortdcbxtlv": lldpCurCfgPortdcbxtlv,
       "lldpNewCfgPortTable": lldpNewCfgPortTable,
       "lldpNewCfgPortEntry": lldpNewCfgPortEntry,
       "lldpNewCfgPortIndx": lldpNewCfgPortIndx,
       "lldpNewCfgPortAdmStat": lldpNewCfgPortAdmStat,
       "lldpNewCfgPortSnmpTrap": lldpNewCfgPortSnmpTrap,
       "lldpNewCfgPortportdesctlv": lldpNewCfgPortportdesctlv,
       "lldpNewCfgPortsysnametlv": lldpNewCfgPortsysnametlv,
       "lldpNewCfgPortsysdescrtlv": lldpNewCfgPortsysdescrtlv,
       "lldpNewCfgPortsyscaptlv": lldpNewCfgPortsyscaptlv,
       "lldpNewCfgPortmgmtaddrtlv": lldpNewCfgPortmgmtaddrtlv,
       "lldpNewCfgPortportvidtlv": lldpNewCfgPortportvidtlv,
       "lldpNewCfgPortportprottlv": lldpNewCfgPortportprottlv,
       "lldpNewCfgPortvlannametlv": lldpNewCfgPortvlannametlv,
       "lldpNewCfgPortprotidtlv": lldpNewCfgPortprotidtlv,
       "lldpNewCfgPortmacphytlv": lldpNewCfgPortmacphytlv,
       "lldpNewCfgPortpowermditlv": lldpNewCfgPortpowermditlv,
       "lldpNewCfgPortlinkaggrtlv": lldpNewCfgPortlinkaggrtlv,
       "lldpNewCfgPortframesztlv": lldpNewCfgPortframesztlv,
       "lldpNewCfgPortalltlv": lldpNewCfgPortalltlv,
       "lldpNewCfgPortdcbxtlv": lldpNewCfgPortdcbxtlv,
       "lldpGeneral": lldpGeneral,
       "lldpCurCfgState": lldpCurCfgState,
       "lldpNewCfgState": lldpNewCfgState,
       "lldpCurCfgMsgTxInt": lldpCurCfgMsgTxInt,
       "lldpNewCfgMsgTxInt": lldpNewCfgMsgTxInt,
       "lldpCurCfgMsgTxHld": lldpCurCfgMsgTxHld,
       "lldpNewCfgMsgTxHld": lldpNewCfgMsgTxHld,
       "lldpCurCfgNotifInt": lldpCurCfgNotifInt,
       "lldpNewCfgNotifInt": lldpNewCfgNotifInt,
       "lldpCurCfgTxDelay": lldpCurCfgTxDelay,
       "lldpNewCfgTxDelay": lldpNewCfgTxDelay,
       "lldpCurCfgReinitDelay": lldpCurCfgReinitDelay,
       "lldpNewCfgReinitDelay": lldpNewCfgReinitDelay,
       "vlagCfg": vlagCfg,
       "vlagIslCfg": vlagIslCfg,
       "vlagCurIslCfgPortChannel": vlagCurIslCfgPortChannel,
       "vlagNewIslCfgPortChannel": vlagNewIslCfgPortChannel,
       "vlagCurIslCfgAdminKey": vlagCurIslCfgAdminKey,
       "vlagNewIslCfgAdminKey": vlagNewIslCfgAdminKey,
       "vlagCurCfgSwitchPriority": vlagCurCfgSwitchPriority,
       "vlagNewCfgSwitchPriority": vlagNewCfgSwitchPriority,
       "vlagCurCfgTrunkTable": vlagCurCfgTrunkTable,
       "vlagCurCfgTrunkTableEntry": vlagCurCfgTrunkTableEntry,
       "vlagCurCfgTrunkIndex": vlagCurCfgTrunkIndex,
       "vlagCurCfgTrunkState": vlagCurCfgTrunkState,
       "vlagNewCfgTrunkTable": vlagNewCfgTrunkTable,
       "vlagNewCfgTrunkTableEntry": vlagNewCfgTrunkTableEntry,
       "vlagNewCfgTrunkIndex": vlagNewCfgTrunkIndex,
       "vlagNewCfgTrunkState": vlagNewCfgTrunkState,
       "vlagCurCfgLacpTable": vlagCurCfgLacpTable,
       "vlagCurCfgLacpTableEntry": vlagCurCfgLacpTableEntry,
       "vlagCurCfgLacpKey": vlagCurCfgLacpKey,
       "vlagCurCfgLacpState": vlagCurCfgLacpState,
       "vlagNewCfgLacpTable": vlagNewCfgLacpTable,
       "vlagNewCfgLacpTableEntry": vlagNewCfgLacpTableEntry,
       "vlagNewCfgLacpKey": vlagNewCfgLacpKey,
       "vlagNewCfgLacpState": vlagNewCfgLacpState,
       "vlagCurCfgHlthchkPeerIp": vlagCurCfgHlthchkPeerIp,
       "vlagNewCfgHlthchkPeerIp": vlagNewCfgHlthchkPeerIp,
       "vlagCurCfgTierId": vlagCurCfgTierId,
       "vlagNewCfgTierId": vlagNewCfgTierId,
       "vlagCurCfgStartupDelayInterval": vlagCurCfgStartupDelayInterval,
       "vlagNewCfgStartupDelayInterval": vlagNewCfgStartupDelayInterval,
       "vlagCurCfgGlobalEnable": vlagCurCfgGlobalEnable,
       "vlagNewCfgGlobalEnable": vlagNewCfgGlobalEnable,
       "vlagCurCfgHlthchkConnectRetryInterval": vlagCurCfgHlthchkConnectRetryInterval,
       "vlagNewCfgHlthchkConnectRetryInterval": vlagNewCfgHlthchkConnectRetryInterval,
       "vlagCurCfgHlthchkKeepaliveAttempts": vlagCurCfgHlthchkKeepaliveAttempts,
       "vlagNewCfgHlthchkKeepaliveAttempts": vlagNewCfgHlthchkKeepaliveAttempts,
       "vlagCurCfgHlthchkKeepaliveInterval": vlagCurCfgHlthchkKeepaliveInterval,
       "vlagNewCfgHlthchkKeepaliveInterval": vlagNewCfgHlthchkKeepaliveInterval,
       "vlagCurCfgAutoRecoveryInterval": vlagCurCfgAutoRecoveryInterval,
       "vlagNewCfgAutoRecoveryInterval": vlagNewCfgAutoRecoveryInterval,
       "ecpCfg": ecpCfg,
       "ecpCurCfgRetrans": ecpCurCfgRetrans,
       "ecpNewCfgRetrans": ecpNewCfgRetrans,
       "slpCfg": slpCfg,
       "slpCurCfgGlobalEnable": slpCurCfgGlobalEnable,
       "slpNewCfgGlobalEnable": slpNewCfgGlobalEnable,
       "slpCurCfgActiveDaDisEnable": slpCurCfgActiveDaDisEnable,
       "slpNewCfgActiveDaDisEnable": slpNewCfgActiveDaDisEnable,
       "slpCurCfgActiveDaDisStartWaitTime": slpCurCfgActiveDaDisStartWaitTime,
       "slpNewCfgActiveDaDisStartWaitTime": slpNewCfgActiveDaDisStartWaitTime,
       "layer2Stats": layer2Stats,
       "fdbStats": fdbStats,
       "fdbStatsCurrent": fdbStatsCurrent,
       "fdbStatsHiwat": fdbStatsHiwat,
       "fdbStatsClear": fdbStatsClear,
       "stpStats": stpStats,
       "stgStatsPortTable": stgStatsPortTable,
       "stgStatsPortTableEntry": stgStatsPortTableEntry,
       "stgStatsStpIndex": stgStatsStpIndex,
       "stgStatsPortIndex": stgStatsPortIndex,
       "stgStatsPortRcvCfgBpdus": stgStatsPortRcvCfgBpdus,
       "stgStatsPortRcvTcnBpdus": stgStatsPortRcvTcnBpdus,
       "stgStatsPortXmtCfgBpdus": stgStatsPortXmtCfgBpdus,
       "stgStatsPortXmtTcnBpdus": stgStatsPortXmtTcnBpdus,
       "lacpStats": lacpStats,
       "lacpStatsTable": lacpStatsTable,
       "lacpStatsTableEntry": lacpStatsTableEntry,
       "lacpStatsIndex": lacpStatsIndex,
       "lacpdusRx": lacpdusRx,
       "markerpdusRx": markerpdusRx,
       "markerresponsepdusRx": markerresponsepdusRx,
       "unknownRx": unknownRx,
       "illegalRx": illegalRx,
       "lacpdusTx": lacpdusTx,
       "markerpdusTx": markerpdusTx,
       "markerresponsepdusTx": markerresponsepdusTx,
       "lacpClearStats": lacpClearStats,
       "hotlinksStats": hotlinksStats,
       "hotlinksStatsTriggerTable": hotlinksStatsTriggerTable,
       "hotlinksStatsTriggerTableEntry": hotlinksStatsTriggerTableEntry,
       "hotlinksStatsTriggerId": hotlinksStatsTriggerId,
       "hotlinksStatsTriggerName": hotlinksStatsTriggerName,
       "hotlinksStatsTriggerMasterActive": hotlinksStatsTriggerMasterActive,
       "hotlinksStatsTriggerBackupActive": hotlinksStatsTriggerBackupActive,
       "hotlinksStatsTriggerFdbUpdate": hotlinksStatsTriggerFdbUpdate,
       "hotlinksStatsTriggerFdbFailed": hotlinksStatsTriggerFdbFailed,
       "lldpStats": lldpStats,
       "lldpStatsTableMaxEnt": lldpStatsTableMaxEnt,
       "lldpStatsTable": lldpStatsTable,
       "lldpStatsTableEntry": lldpStatsTableEntry,
       "lldpStatsIndex": lldpStatsIndex,
       "lldpStatsFramesOutTotal": lldpStatsFramesOutTotal,
       "lldpStatsFramesInTotal": lldpStatsFramesInTotal,
       "lldpStatsFramesInErrorsTotal": lldpStatsFramesInErrorsTotal,
       "lldpStatsFramesDiscardedTotal": lldpStatsFramesDiscardedTotal,
       "lldpStatsTLVsUnrecognizedTotal": lldpStatsTLVsUnrecognizedTotal,
       "lldpStatsAgeoutsTotal": lldpStatsAgeoutsTotal,
       "lldpStatsClear": lldpStatsClear,
       "lldpStatsClearAll": lldpStatsClearAll,
       "oamStats": oamStats,
       "oamStatsPortTable": oamStatsPortTable,
       "oamStatsPortEntry": oamStatsPortEntry,
       "oamStatsPortIndex": oamStatsPortIndex,
       "oamStatsPortInfoTx": oamStatsPortInfoTx,
       "oamStatsPortInfoRx": oamStatsPortInfoRx,
       "oamStatsPortUnsupTx": oamStatsPortUnsupTx,
       "oamStatsPortUnsupRx": oamStatsPortUnsupRx,
       "oamStatsPortLocalLinkFaults": oamStatsPortLocalLinkFaults,
       "oamStatsPortLocalCriticalEvents": oamStatsPortLocalCriticalEvents,
       "oamStatsPortLocalDyingGasps": oamStatsPortLocalDyingGasps,
       "oamStatsPortRemoteLinkFaults": oamStatsPortRemoteLinkFaults,
       "oamStatsPortRemoteCriticalEvents": oamStatsPortRemoteCriticalEvents,
       "oamStatsPortRemoteDyingGasps": oamStatsPortRemoteDyingGasps,
       "vlagStats": vlagStats,
       "vlagStatsSystem": vlagStatsSystem,
       "vlagStatsClear": vlagStatsClear,
       "vlagStatsIsl": vlagStatsIsl,
       "vlagStatsIslInOctets": vlagStatsIslInOctets,
       "vlagStatsIslInPackets": vlagStatsIslInPackets,
       "vlagStatsIslOutOctets": vlagStatsIslOutOctets,
       "vlagStatsIslOutPackets": vlagStatsIslOutPackets,
       "vlagStatsHealth": vlagStatsHealth,
       "vlagStatsLacp": vlagStatsLacp,
       "vlagStatsPdu": vlagStatsPdu,
       "vlagStatsPduSentRoleElection": vlagStatsPduSentRoleElection,
       "vlagStatsPduSentSystemInfo": vlagStatsPduSentSystemInfo,
       "vlagStatsPduSentFdbDynamicAdd": vlagStatsPduSentFdbDynamicAdd,
       "vlagStatsPduSentFdbDynamicDel": vlagStatsPduSentFdbDynamicDel,
       "vlagStatsPduSentFdbInactiveAdd": vlagStatsPduSentFdbInactiveAdd,
       "vlagStatsPduSentFdbInactiveDel": vlagStatsPduSentFdbInactiveDel,
       "vlagStatsPduSentHlthCheck": vlagStatsPduSentHlthCheck,
       "vlagStatsPduSentOther": vlagStatsPduSentOther,
       "vlagStatsPduSentUnknown": vlagStatsPduSentUnknown,
       "vlagStatsPduRcvRoleElection": vlagStatsPduRcvRoleElection,
       "vlagStatsPduRcvSystemInfo": vlagStatsPduRcvSystemInfo,
       "vlagStatsPduRcvFdbDynamicAdd": vlagStatsPduRcvFdbDynamicAdd,
       "vlagStatsPduRcvFdbDynamicDel": vlagStatsPduRcvFdbDynamicDel,
       "vlagStatsPduRcvFdbInactiveAdd": vlagStatsPduRcvFdbInactiveAdd,
       "vlagStatsPduRcvFdbInactiveDel": vlagStatsPduRcvFdbInactiveDel,
       "vlagStatsPduRcvHlthCheck": vlagStatsPduRcvHlthCheck,
       "vlagStatsPduRcvOther": vlagStatsPduRcvOther,
       "vlagStatsPduRcvUnknown": vlagStatsPduRcvUnknown,
       "vlagStatsPduSentPeerInstanceEnable": vlagStatsPduSentPeerInstanceEnable,
       "vlagStatsPduSentPeerInstanceDisable": vlagStatsPduSentPeerInstanceDisable,
       "vlagStatsPduSentISLHello": vlagStatsPduSentISLHello,
       "vlagStatsPduRcvISLHello": vlagStatsPduRcvISLHello,
       "vlagStatsPduRcvPeerInstanceEnable": vlagStatsPduRcvPeerInstanceEnable,
       "vlagStatsPduRcvPeerInstanceDisable": vlagStatsPduRcvPeerInstanceDisable,
       "vlagStatsIgmp": vlagStatsIgmp,
       "vlagStatsIgmpReportsForwarded": vlagStatsIgmpReportsForwarded,
       "vlagStatsIgmpLeavesForwarded": vlagStatsIgmpLeavesForwarded,
       "slpStats": slpStats,
       "slpStatsTxCountersTable": slpStatsTxCountersTable,
       "slpStatsTxCounterEntry": slpStatsTxCounterEntry,
       "slpTxCounterIndex": slpTxCounterIndex,
       "slpTxCounterName": slpTxCounterName,
       "slpTxCounterUnicast": slpTxCounterUnicast,
       "slpTxCounterMulticast": slpTxCounterMulticast,
       "slpStatsRxCountersTable": slpStatsRxCountersTable,
       "slpStatsRxCounterEntry": slpStatsRxCounterEntry,
       "slpRxCounterIndex": slpRxCounterIndex,
       "slpRxCounterName": slpRxCounterName,
       "slpRxCounterUnicast": slpRxCounterUnicast,
       "slpRxCounterMulticast": slpRxCounterMulticast,
       "slpCountersClear": slpCountersClear,
       "layer2Info": layer2Info,
       "fdbInfo": fdbInfo,
       "fdbClear": fdbClear,
       "fdbTable": fdbTable,
       "fdbEntry": fdbEntry,
       "fdbMacAddr": fdbMacAddr,
       "fdbVlan": fdbVlan,
       "fdbSrcPort": fdbSrcPort,
       "fdbState": fdbState,
       "fdbSrcTrunk": fdbSrcTrunk,
       "fdbStatus": fdbStatus,
       "mcastFdbTable": mcastFdbTable,
       "mcastFdbEntry": mcastFdbEntry,
       "mcastFdbEntryIndex": mcastFdbEntryIndex,
       "mcastFdbMacAddr": mcastFdbMacAddr,
       "mcastFdbVlan": mcastFdbVlan,
       "mcastFdbSrcPorts": mcastFdbSrcPorts,
       "stpInfo": stpInfo,
       "stpInfoTable": stpInfoTable,
       "stpInfoTableEntry": stpInfoTableEntry,
       "stpInfoIndex": stpInfoIndex,
       "stpInfoTimeSinceTopChange": stpInfoTimeSinceTopChange,
       "stpInfoTopChanges": stpInfoTopChanges,
       "stpInfoDesignatedRoot": stpInfoDesignatedRoot,
       "stpInfoRootCost": stpInfoRootCost,
       "stpInfoRootPort": stpInfoRootPort,
       "stpInfoMaxAge": stpInfoMaxAge,
       "stpInfoHelloTime": stpInfoHelloTime,
       "stpInfoForwardDelay": stpInfoForwardDelay,
       "stpInfoHoldTime": stpInfoHoldTime,
       "stpInfoPortTable": stpInfoPortTable,
       "stpInfoPortTableEntry": stpInfoPortTableEntry,
       "stpInfoPortStpIndex": stpInfoPortStpIndex,
       "stpInfoPortIndex": stpInfoPortIndex,
       "stpInfoPortState": stpInfoPortState,
       "stpInfoPortDesignatedRoot": stpInfoPortDesignatedRoot,
       "stpInfoPortDesignatedCost": stpInfoPortDesignatedCost,
       "stpInfoPortDesignatedBridge": stpInfoPortDesignatedBridge,
       "stpInfoPortDesignatedPort": stpInfoPortDesignatedPort,
       "stpInfoPortForwardTransitions": stpInfoPortForwardTransitions,
       "stpInfoPortPathCost": stpInfoPortPathCost,
       "stpInfoPortRole": stpInfoPortRole,
       "stpInfoPortLinkType": stpInfoPortLinkType,
       "stpInfoPortEdge": stpInfoPortEdge,
       "stpInfoPortExtGuard": stpInfoPortExtGuard,
       "stpInfoPortPriority": stpInfoPortPriority,
       "lacpInfo": lacpInfo,
       "lacpInfoAggrTable": lacpInfoAggrTable,
       "lacpInfoAggrTableEntry": lacpInfoAggrTableEntry,
       "lacpInfoAggrIndex": lacpInfoAggrIndex,
       "lacpInfoAggrId": lacpInfoAggrId,
       "lacpInfoAggrMac": lacpInfoAggrMac,
       "lacpInfoAggrActSysPrio": lacpInfoAggrActSysPrio,
       "lacpInfoAggrActSysId": lacpInfoAggrActSysId,
       "lacpInfoAggrIndivState": lacpInfoAggrIndivState,
       "lacpInfoAggrActAdminKey": lacpInfoAggrActAdminKey,
       "lacpInfoAggrActOperKey": lacpInfoAggrActOperKey,
       "lacpInfoAggrPartSysPrio": lacpInfoAggrPartSysPrio,
       "lacpInfoAggrPartSysId": lacpInfoAggrPartSysId,
       "lacpInfoAggrPartOperKey": lacpInfoAggrPartOperKey,
       "lacpInfoAggrReadyState": lacpInfoAggrReadyState,
       "lacpInfoAggrNumPorts": lacpInfoAggrNumPorts,
       "lacpInfoAggrMinLinks": lacpInfoAggrMinLinks,
       "lacpInfoPort": lacpInfoPort,
       "lacpInfoPortGeneralTable": lacpInfoPortGeneralTable,
       "lacpInfoPortGeneralTableEntry": lacpInfoPortGeneralTableEntry,
       "lacpInfoPortGeneralIndex": lacpInfoPortGeneralIndex,
       "lacpInfoPortLacpEna": lacpInfoPortLacpEna,
       "lacpInfoPortAdminEna": lacpInfoPortAdminEna,
       "lacpInfoPortActSysId": lacpInfoPortActSysId,
       "lacpInfoPortActSysPrio": lacpInfoPortActSysPrio,
       "lacpInfoPortActAdminKey": lacpInfoPortActAdminKey,
       "lacpInfoPortActOperKey": lacpInfoPortActOperKey,
       "lacpInfoPortActPortNum": lacpInfoPortActPortNum,
       "lacpInfoPortActPortPrio": lacpInfoPortActPortPrio,
       "lacpInfoPortIndivState": lacpInfoPortIndivState,
       "lacpInfoSelAggrId": lacpInfoSelAggrId,
       "lacpInfoAttAggrId": lacpInfoAttAggrId,
       "lacpInfoPortReadyN": lacpInfoPortReadyN,
       "lacpInfoPortNtt": lacpInfoPortNtt,
       "lacpInfoPortSelected": lacpInfoPortSelected,
       "lacpInfoPortMoved": lacpInfoPortMoved,
       "lacpInfoCollDetState": lacpInfoCollDetState,
       "lacpInfoPortRxState": lacpInfoPortRxState,
       "lacpInfoPortMuxState": lacpInfoPortMuxState,
       "lacpInfoPortPerState": lacpInfoPortPerState,
       "lacpInfoPortPerTraTimer": lacpInfoPortPerTraTimer,
       "lacpInfoPortCurWhileTimer": lacpInfoPortCurWhileTimer,
       "lacpInfoPortOperState": lacpInfoPortOperState,
       "lacpInfoPortAdminTable": lacpInfoPortAdminTable,
       "lacpInfoPortAdminTableEntry": lacpInfoPortAdminTableEntry,
       "lacpInfoPortAdminIndex": lacpInfoPortAdminIndex,
       "lacpInfoPortActAdPortState": lacpInfoPortActAdPortState,
       "lacpInfoPortActAdActiv": lacpInfoPortActAdActiv,
       "lacpInfoPortActAdSync": lacpInfoPortActAdSync,
       "lacpInfoPortActAdDef": lacpInfoPortActAdDef,
       "lacpInfoPortActAdTimeout": lacpInfoPortActAdTimeout,
       "lacpInfoPortActAdColl": lacpInfoPortActAdColl,
       "lacpInfoPortActAdExp": lacpInfoPortActAdExp,
       "lacpInfoPortActAdAggr": lacpInfoPortActAdAggr,
       "lacpInfoPortActAdDist": lacpInfoPortActAdDist,
       "lacpInfoPortOperTable": lacpInfoPortOperTable,
       "lacpInfoPortOperTableEntry": lacpInfoPortOperTableEntry,
       "lacpInfoPortOperIndex": lacpInfoPortOperIndex,
       "lacpInfoPortPartOpSysPrio": lacpInfoPortPartOpSysPrio,
       "lacpInfoPortPartOpSysId": lacpInfoPortPartOpSysId,
       "lacpInfoPortPartOpKey": lacpInfoPortPartOpKey,
       "lacpInfoPortPartOpPortNum": lacpInfoPortPartOpPortNum,
       "lacpInfoPortPartOpPortPrio": lacpInfoPortPartOpPortPrio,
       "lacpInfoPortActOpPortState": lacpInfoPortActOpPortState,
       "lacpInfoPortActOpActiv": lacpInfoPortActOpActiv,
       "lacpInfoPortActOpSync": lacpInfoPortActOpSync,
       "lacpInfoPortActOpDef": lacpInfoPortActOpDef,
       "lacpInfoPortActOpTimeout": lacpInfoPortActOpTimeout,
       "lacpInfoPortActOpColl": lacpInfoPortActOpColl,
       "lacpInfoPortActOpExp": lacpInfoPortActOpExp,
       "lacpInfoPortActOpAggr": lacpInfoPortActOpAggr,
       "lacpInfoPortActOpDist": lacpInfoPortActOpDist,
       "lacpInfoPortPartOpPortState": lacpInfoPortPartOpPortState,
       "lacpInfoPortPartOpActiv": lacpInfoPortPartOpActiv,
       "lacpInfoPortPartOpSync": lacpInfoPortPartOpSync,
       "lacpInfoPortPartOpDef": lacpInfoPortPartOpDef,
       "lacpInfoPortPartOpTimeout": lacpInfoPortPartOpTimeout,
       "lacpInfoPortPartOpColl": lacpInfoPortPartOpColl,
       "lacpInfoPortPartOpExp": lacpInfoPortPartOpExp,
       "lacpInfoPortPartOpAggr": lacpInfoPortPartOpAggr,
       "lacpInfoPortPartOpDist": lacpInfoPortPartOpDist,
       "cistInfo": cistInfo,
       "cistGeneralInfo": cistGeneralInfo,
       "cistRoot": cistRoot,
       "cistRootPathCost": cistRootPathCost,
       "cistRootPort": cistRootPort,
       "cistBridgeHelloTime": cistBridgeHelloTime,
       "cistBridgeMaxAge": cistBridgeMaxAge,
       "cistBridgeForwardDelay": cistBridgeForwardDelay,
       "cistRegionalRoot": cistRegionalRoot,
       "cistRegionalPathCost": cistRegionalPathCost,
       "mstpDigest": mstpDigest,
       "cistInfoPortTable": cistInfoPortTable,
       "cistInfoPortTableEntry": cistInfoPortTableEntry,
       "cistInfoPortIndex": cistInfoPortIndex,
       "cistInfoPortPriority": cistInfoPortPriority,
       "cistInfoPortPathCost": cistInfoPortPathCost,
       "cistInfoPortState": cistInfoPortState,
       "cistInfoPortRole": cistInfoPortRole,
       "cistInfoPortDesignatedBridge": cistInfoPortDesignatedBridge,
       "cistInfoPortDesignatedPort": cistInfoPortDesignatedPort,
       "cistInfoPortLinkType": cistInfoPortLinkType,
       "cistInfoPortHelloTime": cistInfoPortHelloTime,
       "cistInfoPortEdge": cistInfoPortEdge,
       "vlanInfo": vlanInfo,
       "vlanInfoTable": vlanInfoTable,
       "vlanInfoTableEntry": vlanInfoTableEntry,
       "vlanInfoId": vlanInfoId,
       "vlanInfoName": vlanInfoName,
       "vlanInfoStatus": vlanInfoStatus,
       "vlanInfoPorts": vlanInfoPorts,
       "dot1xInfo": dot1xInfo,
       "dot1xInfoPortTable": dot1xInfoPortTable,
       "dot1xInfoPortEntry": dot1xInfoPortEntry,
       "dot1xInfoPortIndex": dot1xInfoPortIndex,
       "dot1xInfoPortAuthMode": dot1xInfoPortAuthMode,
       "dot1xInfoPortAuthStatus": dot1xInfoPortAuthStatus,
       "dot1xInfoPortAuthPAEState": dot1xInfoPortAuthPAEState,
       "dot1xInfoPortBackAuthState": dot1xInfoPortBackAuthState,
       "dot1xInfoPortAssignedVlan": dot1xInfoPortAssignedVlan,
       "dot1xSystemInfo": dot1xSystemInfo,
       "dot1xSystemCapability": dot1xSystemCapability,
       "dot1xSystemStatus": dot1xSystemStatus,
       "dot1xSystemProtoVersion": dot1xSystemProtoVersion,
       "genInfo": genInfo,
       "trunkGroupInfo": trunkGroupInfo,
       "trunkGroupInfoTable": trunkGroupInfoTable,
       "trunkGroupInfoTableEntry": trunkGroupInfoTableEntry,
       "trunkGroupInfoIndex": trunkGroupInfoIndex,
       "trunkGroupInfoState": trunkGroupInfoState,
       "trunkGroupInfoPorts": trunkGroupInfoPorts,
       "trunkGroupInfoProtocol": trunkGroupInfoProtocol,
       "trunkGroupInfoPortTable": trunkGroupInfoPortTable,
       "trunkGroupInfoPortTableEntry": trunkGroupInfoPortTableEntry,
       "trunkGroupInfoPortTrunkId": trunkGroupInfoPortTrunkId,
       "trunkGroupInfoPortPortId": trunkGroupInfoPortPortId,
       "trunkGroupInfoPortStatus": trunkGroupInfoPortStatus,
       "hotlinksInfo": hotlinksInfo,
       "hotlinksInfoOnState": hotlinksInfoOnState,
       "hotlinksInfoFdbUpdateState": hotlinksInfoFdbUpdateState,
       "hotlinksInfoTriggerTable": hotlinksInfoTriggerTable,
       "hotlinksInfoTriggerTableEntry": hotlinksInfoTriggerTableEntry,
       "hotlinksInfoTriggerId": hotlinksInfoTriggerId,
       "hotlinksInfoTriggerName": hotlinksInfoTriggerName,
       "hotlinksInfoTriggerState": hotlinksInfoTriggerState,
       "hotlinksInfoTriggerPreemptState": hotlinksInfoTriggerPreemptState,
       "hotlinksInfoTriggerFdelay": hotlinksInfoTriggerFdelay,
       "hotlinksInfoTriggerActive": hotlinksInfoTriggerActive,
       "hotlinksInfoBpduState": hotlinksInfoBpduState,
       "hotlinksInfoFdbUpdateRate": hotlinksInfoFdbUpdateRate,
       "lldpInfo": lldpInfo,
       "lldpInfoPortTable": lldpInfoPortTable,
       "lldpInfoPortEntry": lldpInfoPortEntry,
       "lldpInfoPortIndex": lldpInfoPortIndex,
       "lldpInfoPortAlias": lldpInfoPortAlias,
       "lldpInfoPortMacAddress": lldpInfoPortMacAddress,
       "lldpInfoPortMtu": lldpInfoPortMtu,
       "lldpInfoPortEnabled": lldpInfoPortEnabled,
       "lldpInfoPortAdminStatus": lldpInfoPortAdminStatus,
       "lldpInfoPortRxChanges": lldpInfoPortRxChanges,
       "lldpInfoPortportdesctlv": lldpInfoPortportdesctlv,
       "lldpInfoPortsysnametlv": lldpInfoPortsysnametlv,
       "lldpInfoPortsysdescrtlv": lldpInfoPortsysdescrtlv,
       "lldpInfoPortsyscaptlv": lldpInfoPortsyscaptlv,
       "lldpInfoPortmgmtaddrtlv": lldpInfoPortmgmtaddrtlv,
       "lldpInfoPortportvidtlv": lldpInfoPortportvidtlv,
       "lldpInfoPortportprottlv": lldpInfoPortportprottlv,
       "lldpInfoPortvlannametlv": lldpInfoPortvlannametlv,
       "lldpInfoPortprotidtlv": lldpInfoPortprotidtlv,
       "lldpInfoPortmacphytlv": lldpInfoPortmacphytlv,
       "lldpInfoPortpowermditlv": lldpInfoPortpowermditlv,
       "lldpInfoPortlinkaggrtlv": lldpInfoPortlinkaggrtlv,
       "lldpInfoPortframesztlv": lldpInfoPortframesztlv,
       "lldpInfoPortdcbxtlv": lldpInfoPortdcbxtlv,
       "lldpInfoTxTable": lldpInfoTxTable,
       "lldpInfoTxEntry": lldpInfoTxEntry,
       "lldpInfoTxIndex": lldpInfoTxIndex,
       "lldpInfoTxState": lldpInfoTxState,
       "lldpInfoTxLocalChanged": lldpInfoTxLocalChanged,
       "lldpInfoTxTTL": lldpInfoTxTTL,
       "lldpInfoTxTxTTR": lldpInfoTxTxTTR,
       "lldpInfoTxDelayWhile": lldpInfoTxDelayWhile,
       "lldpInfoTxShutdownWhile": lldpInfoTxShutdownWhile,
       "lldpInfoTxReinitDelay": lldpInfoTxReinitDelay,
       "lldpInfoTxHoldMultiplier": lldpInfoTxHoldMultiplier,
       "lldpInfoTxTransmitInterval": lldpInfoTxTransmitInterval,
       "lldpInfoTxTransmitDelay": lldpInfoTxTransmitDelay,
       "lldpInfoTxDMAC": lldpInfoTxDMAC,
       "lldpInfoRxTable": lldpInfoRxTable,
       "lldpInfoRxEntry": lldpInfoRxEntry,
       "lldpInfoRxIndex": lldpInfoRxIndex,
       "lldpInfoRxState": lldpInfoRxState,
       "lldpInfoRxBadFrame": lldpInfoRxBadFrame,
       "lldpInfoRxRcvFrame": lldpInfoRxRcvFrame,
       "lldpInfoRxRxInfoAge": lldpInfoRxRxInfoAge,
       "lldpInfoRxRemoteChanged": lldpInfoRxRemoteChanged,
       "lldpInfoRxTooManyNeighbors": lldpInfoRxTooManyNeighbors,
       "lldpInfoRxSNMPNotify": lldpInfoRxSNMPNotify,
       "lldpInfoRxRxTTL": lldpInfoRxRxTTL,
       "lldpInfoRxTooManyNeighborTimer": lldpInfoRxTooManyNeighborTimer,
       "lldpInfoRxDMAC": lldpInfoRxDMAC,
       "lldpInfoRemoteDevicesTable": lldpInfoRemoteDevicesTable,
       "lldpInfoRemoteDevicesEntry": lldpInfoRemoteDevicesEntry,
       "lldpInfoRemoteDevicesIndex": lldpInfoRemoteDevicesIndex,
       "lldpInfoRemoteDevicesRemoteTTL": lldpInfoRemoteDevicesRemoteTTL,
       "lldpInfoRemoteDevicesRxChanges": lldpInfoRemoteDevicesRxChanges,
       "lldpInfoRemoteDevicesLocalPort": lldpInfoRemoteDevicesLocalPort,
       "lldpInfoRemoteDevicesChassisSubtype": lldpInfoRemoteDevicesChassisSubtype,
       "lldpInfoRemoteDevicesChassisId": lldpInfoRemoteDevicesChassisId,
       "lldpInfoRemoteDevicesPortSubtype": lldpInfoRemoteDevicesPortSubtype,
       "lldpInfoRemoteDevicesPortId": lldpInfoRemoteDevicesPortId,
       "lldpInfoRemoteDevicesSystemName": lldpInfoRemoteDevicesSystemName,
       "lldpInfoRemoteDevicesSystemDescription": lldpInfoRemoteDevicesSystemDescription,
       "lldpInfoRemoteDevicesPortDescription": lldpInfoRemoteDevicesPortDescription,
       "lldpInfoRemoteDevicesSystemCapSupported": lldpInfoRemoteDevicesSystemCapSupported,
       "lldpInfoRemoteDevicesSystemCapEnabled": lldpInfoRemoteDevicesSystemCapEnabled,
       "lldpInfoRemoteDMAC": lldpInfoRemoteDMAC,
       "lldpInfoRemoteDevicesManAddrTable": lldpInfoRemoteDevicesManAddrTable,
       "lldpInfoRemoteDevicesManAddrEntry": lldpInfoRemoteDevicesManAddrEntry,
       "lldpInfoRemoteDevicesManAddrSubtype": lldpInfoRemoteDevicesManAddrSubtype,
       "lldpInfoRemoteDevicesManAddr": lldpInfoRemoteDevicesManAddr,
       "lldpInfoRemoteDevicesManAddrIfSubtype": lldpInfoRemoteDevicesManAddrIfSubtype,
       "lldpInfoRemoteDevicesManAddrIfId": lldpInfoRemoteDevicesManAddrIfId,
       "lldpInfoRemoteDevicesManAddrOID": lldpInfoRemoteDevicesManAddrOID,
       "lldpClearMsap": lldpClearMsap,
       "oamInfo": oamInfo,
       "oamInfoPortTable": oamInfoPortTable,
       "oamInfoPortEntry": oamInfoPortEntry,
       "oamInfoPortIndex": oamInfoPortIndex,
       "oamInfoPortLocalState": oamInfoPortLocalState,
       "oamInfoPortLocalMode": oamInfoPortLocalMode,
       "oamInfoPortLocalLinkStatus": oamInfoPortLocalLinkStatus,
       "oamInfoPortLocalStable": oamInfoPortLocalStable,
       "oamInfoPortLocalSatisfied": oamInfoPortLocalSatisfied,
       "oamInfoPortLocalEvaluating": oamInfoPortLocalEvaluating,
       "oamInfoPortRemoteMode": oamInfoPortRemoteMode,
       "oamInfoPortRemoteMAC": oamInfoPortRemoteMAC,
       "oamInfoPortRemoteStable": oamInfoPortRemoteStable,
       "oamInfoPortRemoteStateValid": oamInfoPortRemoteStateValid,
       "oamInfoPortRemoteEvaluating": oamInfoPortRemoteEvaluating,
       "udldInfo": udldInfo,
       "udldInfoPortTable": udldInfoPortTable,
       "udldInfoPortEntry": udldInfoPortEntry,
       "udldInfoPortIndex": udldInfoPortIndex,
       "udldInfoPortConfig": udldInfoPortConfig,
       "udldInfoPortMode": udldInfoPortMode,
       "udldInfoPortLink": udldInfoPortLink,
       "udldInfoPortOperationalStatus": udldInfoPortOperationalStatus,
       "udldInfoPortBidirectionalStatus": udldInfoPortBidirectionalStatus,
       "udldInfoPortInterval": udldInfoPortInterval,
       "udldInfoPortTimeout": udldInfoPortTimeout,
       "udldInfoPortNeighborCount": udldInfoPortNeighborCount,
       "udldInfoNeighborTable": udldInfoNeighborTable,
       "udldInfoNeighborEntry": udldInfoNeighborEntry,
       "udldInfoNeighborLocalPortIndex": udldInfoNeighborLocalPortIndex,
       "udldInfoNeighborIndex": udldInfoNeighborIndex,
       "udldInfoNeighborExpiration": udldInfoNeighborExpiration,
       "udldInfoNeighborDeviceName": udldInfoNeighborDeviceName,
       "udldInfoNeighborDeviceID": udldInfoNeighborDeviceID,
       "udldInfoNeighborPortID": udldInfoNeighborPortID,
       "failoverInfo": failoverInfo,
       "failoverInfoState": failoverInfoState,
       "failoverInfoTriggerTable": failoverInfoTriggerTable,
       "failoverInfoTriggerEntry": failoverInfoTriggerEntry,
       "failoverInfoTriggerId": failoverInfoTriggerId,
       "failoverInfoTriggerState": failoverInfoTriggerState,
       "failoverInfoTriggerLimit": failoverInfoTriggerLimit,
       "failoverInfoTriggerMonitorState": failoverInfoTriggerMonitorState,
       "failoverInfoTriggerMonitorPorts": failoverInfoTriggerMonitorPorts,
       "failoverInfoTriggerControlState": failoverInfoTriggerControlState,
       "failoverInfoTriggerControlPorts": failoverInfoTriggerControlPorts,
       "failoverInfoMonPortStateTable": failoverInfoMonPortStateTable,
       "failoverInfoTriggerMonPortEntry": failoverInfoTriggerMonPortEntry,
       "failoverInfoTriggerMonId": failoverInfoTriggerMonId,
       "failoverInfoTriggerMonPortId": failoverInfoTriggerMonPortId,
       "failoverInfoTriggerMonPortStatus": failoverInfoTriggerMonPortStatus,
       "failoverInfoCtlPortStateTable": failoverInfoCtlPortStateTable,
       "failoverInfoTriggerCtlPortEntry": failoverInfoTriggerCtlPortEntry,
       "failoverInfoTriggerCtlId": failoverInfoTriggerCtlId,
       "failoverInfoTriggerCtlPortId": failoverInfoTriggerCtlPortId,
       "failoverInfoTriggerCtlPortStatus": failoverInfoTriggerCtlPortStatus,
       "vlagInfo": vlagInfo,
       "vlagInfoSystem": vlagInfoSystem,
       "vlagInfoState": vlagInfoState,
       "vlagInfoAdminRole": vlagInfoAdminRole,
       "vlagInfoISLId": vlagInfoISLId,
       "vlagInfoLocalMac": vlagInfoLocalMac,
       "vlagInfoLocalPriority": vlagInfoLocalPriority,
       "vlagInfoRemoteMac": vlagInfoRemoteMac,
       "vlagInfoRemotePriority": vlagInfoRemotePriority,
       "vlagInfoHlthchkStatus": vlagInfoHlthchkStatus,
       "vlagInfoStartupDelayInterval": vlagInfoStartupDelayInterval,
       "vlagInfoStartupDelayStatus": vlagInfoStartupDelayStatus,
       "vlagInfoSystemMac": vlagInfoSystemMac,
       "vlagInfoOperaRole": vlagInfoOperaRole,
       "vlagInfoAutoRecoveryInterval": vlagInfoAutoRecoveryInterval,
       "vlagInfoAutoRecoveryStatus": vlagInfoAutoRecoveryStatus,
       "vlagInfoGroup": vlagInfoGroup,
       "vlagInfoInstanceTable": vlagInfoInstanceTable,
       "vlagInfoInstanceEntry": vlagInfoInstanceEntry,
       "vlagInstanceId": vlagInstanceId,
       "vlagInstanceTrunkId": vlagInstanceTrunkId,
       "vlagInstanceAdminKey": vlagInstanceAdminKey,
       "vlagInstanceState": vlagInstanceState,
       "vlagInfoIslGroup": vlagInfoIslGroup,
       "vlagInfoIslId": vlagInfoIslId,
       "vlagInfoIslProtocol": vlagInfoIslProtocol,
       "vlagInfoIslPortchannel": vlagInfoIslPortchannel,
       "vlagInfoIslAdminkey": vlagInfoIslAdminkey,
       "vlagInfoIslPorts": vlagInfoIslPorts,
       "vlagInfoIslPortState": vlagInfoIslPortState,
       "vlagInfoIslPortLinkState": vlagInfoIslPortLinkState,
       "ecpInfo": ecpInfo,
       "ecpChnlInfoTable": ecpChnlInfoTable,
       "ecpChnlInfoEntry": ecpChnlInfoEntry,
       "ecpChnlInfoEntryIndex": ecpChnlInfoEntryIndex,
       "ecpChnlPort": ecpChnlPort,
       "ecpChnlStag": ecpChnlStag,
       "ecpChnlSndlen": ecpChnlSndlen,
       "ecpChnlSndnxt": ecpChnlSndnxt,
       "ecpChnlRcvlast": ecpChnlRcvlast,
       "ecpChnlStateMachine": ecpChnlStateMachine,
       "ecpChnlRxCnt": ecpChnlRxCnt,
       "ecpChnlTxCnt": ecpChnlTxCnt,
       "ecpChnlRxDrop": ecpChnlRxDrop,
       "ecpChnlTxDrop": ecpChnlTxDrop,
       "ecpChnlState": ecpChnlState,
       "ecpChnlAckErr": ecpChnlAckErr,
       "slpInfo": slpInfo,
       "slpInfoSystem": slpInfoSystem,
       "slpInfoProtocolVersion": slpInfoProtocolVersion,
       "slpInfoListeningPort": slpInfoListeningPort,
       "slpInfoListeningIPInterfaceTable": slpInfoListeningIPInterfaceTable,
       "slpInfoListeningIPInterfaceEntry": slpInfoListeningIPInterfaceEntry,
       "listeningIPInterfaceId": listeningIPInterfaceId,
       "listeningIPInterfaceAddress": listeningIPInterfaceAddress,
       "slpInfoDirectoryAgents": slpInfoDirectoryAgents,
       "slpInfoDirectoryAgentsTable": slpInfoDirectoryAgentsTable,
       "slpInfoDirectoryAgentEntry": slpInfoDirectoryAgentEntry,
       "directoryAgentAddress": directoryAgentAddress,
       "directoryAgentPort": directoryAgentPort,
       "directoryAgentTime": directoryAgentTime,
       "slpInfoUserAgents": slpInfoUserAgents,
       "slpInfoUserAgentsTable": slpInfoUserAgentsTable,
       "slpInfoUserAgentEntry": slpInfoUserAgentEntry,
       "userAgentAddress": userAgentAddress,
       "userAgentPort": userAgentPort,
       "userAgentTime": userAgentTime,
       "slpDirectoryAgentsClear": slpDirectoryAgentsClear,
       "layer2Oper": layer2Oper,
       "layer3": layer3,
       "layer3Configs": layer3Configs,
       "ipInterfaceCfg": ipInterfaceCfg,
       "ipInterfaceTableMax": ipInterfaceTableMax,
       "ipCurCfgIntfTable": ipCurCfgIntfTable,
       "ipCurCfgIntfEntry": ipCurCfgIntfEntry,
       "ipCurCfgIntfIndex": ipCurCfgIntfIndex,
       "ipCurCfgIntfAddr": ipCurCfgIntfAddr,
       "ipCurCfgIntfMask": ipCurCfgIntfMask,
       "ipCurCfgIntfBroadcast": ipCurCfgIntfBroadcast,
       "ipCurCfgIntfVlan": ipCurCfgIntfVlan,
       "ipCurCfgIntfState": ipCurCfgIntfState,
       "ipCurCfgIntfBootpRelay": ipCurCfgIntfBootpRelay,
       "ipCurCfgIntfRouteAdv": ipCurCfgIntfRouteAdv,
       "ipCurCfgIntfManagedCfg": ipCurCfgIntfManagedCfg,
       "ipCurCfgIntfOtherCfg": ipCurCfgIntfOtherCfg,
       "ipCurCfgIntfAdvLifetime": ipCurCfgIntfAdvLifetime,
       "ipCurCfgIntfDadAttempts": ipCurCfgIntfDadAttempts,
       "ipCurCfgIntfReachTime": ipCurCfgIntfReachTime,
       "ipCurCfgIntfAdvInterval": ipCurCfgIntfAdvInterval,
       "ipCurCfgIntfAdvIntervalMin": ipCurCfgIntfAdvIntervalMin,
       "ipCurCfgIntfRetransmitTimer": ipCurCfgIntfRetransmitTimer,
       "ipCurCfgIntfHopLimit": ipCurCfgIntfHopLimit,
       "ipCurCfgIntfAdvMtu": ipCurCfgIntfAdvMtu,
       "ipCurCfgIntfIp6Host": ipCurCfgIntfIp6Host,
       "ipCurCfgSecIntfAddr": ipCurCfgSecIntfAddr,
       "ipCurCfgSecIntfPrefix": ipCurCfgSecIntfPrefix,
       "ipCurCfgIntfAnycast": ipCurCfgIntfAnycast,
       "ipCurCfgSecIntfAnycast": ipCurCfgSecIntfAnycast,
       "ipCurCfgIntfIp6Dstun": ipCurCfgIntfIp6Dstun,
       "ipNewCfgIntfTable": ipNewCfgIntfTable,
       "ipNewCfgIntfEntry": ipNewCfgIntfEntry,
       "ipNewCfgIntfIndex": ipNewCfgIntfIndex,
       "ipNewCfgIntfAddr": ipNewCfgIntfAddr,
       "ipNewCfgIntfMask": ipNewCfgIntfMask,
       "ipNewCfgIntfVlan": ipNewCfgIntfVlan,
       "ipNewCfgIntfState": ipNewCfgIntfState,
       "ipNewCfgIntfDelete": ipNewCfgIntfDelete,
       "ipNewCfgIntfBootpRelay": ipNewCfgIntfBootpRelay,
       "ipNewCfgIntfRouteAdv": ipNewCfgIntfRouteAdv,
       "ipNewCfgIntfManagedCfg": ipNewCfgIntfManagedCfg,
       "ipNewCfgIntfOtherCfg": ipNewCfgIntfOtherCfg,
       "ipNewCfgIntfAdvLifetime": ipNewCfgIntfAdvLifetime,
       "ipNewCfgIntfDadAttempts": ipNewCfgIntfDadAttempts,
       "ipNewCfgIntfReachTime": ipNewCfgIntfReachTime,
       "ipNewCfgIntfAdvInterval": ipNewCfgIntfAdvInterval,
       "ipNewCfgIntfAdvIntervalMin": ipNewCfgIntfAdvIntervalMin,
       "ipNewCfgIntfRetransmitTimer": ipNewCfgIntfRetransmitTimer,
       "ipNewCfgIntfHopLimit": ipNewCfgIntfHopLimit,
       "ipNewCfgIntfAdvMtu": ipNewCfgIntfAdvMtu,
       "ipNewCfgIntfIp6Host": ipNewCfgIntfIp6Host,
       "ipNewCfgSecIntfAddr": ipNewCfgSecIntfAddr,
       "ipNewCfgSecIntfPrefix": ipNewCfgSecIntfPrefix,
       "ipNewCfgIntfAnycast": ipNewCfgIntfAnycast,
       "ipNewCfgSecIntfAnycast": ipNewCfgSecIntfAnycast,
       "ipNewCfgIntfIp6Dstun": ipNewCfgIntfIp6Dstun,
       "ipGatewayCfg": ipGatewayCfg,
       "ipGatewayTableMax": ipGatewayTableMax,
       "ipCurCfgGwTable": ipCurCfgGwTable,
       "ipCurCfgGwEntry": ipCurCfgGwEntry,
       "ipCurCfgGwIndex": ipCurCfgGwIndex,
       "ipCurCfgGwAddr": ipCurCfgGwAddr,
       "ipCurCfgGwInterval": ipCurCfgGwInterval,
       "ipCurCfgGwRetry": ipCurCfgGwRetry,
       "ipCurCfgGwState": ipCurCfgGwState,
       "ipCurCfgGwArp": ipCurCfgGwArp,
       "ipNewCfgGwTable": ipNewCfgGwTable,
       "ipNewCfgGwEntry": ipNewCfgGwEntry,
       "ipNewCfgGwIndex": ipNewCfgGwIndex,
       "ipNewCfgGwAddr": ipNewCfgGwAddr,
       "ipNewCfgGwInterval": ipNewCfgGwInterval,
       "ipNewCfgGwRetry": ipNewCfgGwRetry,
       "ipNewCfgGwState": ipNewCfgGwState,
       "ipNewCfgGwDelete": ipNewCfgGwDelete,
       "ipNewCfgGwArp": ipNewCfgGwArp,
       "ipStaticRouteCfg": ipStaticRouteCfg,
       "ipStaticRouteTableMaxSize": ipStaticRouteTableMaxSize,
       "ipCurCfgStaticRouteTable": ipCurCfgStaticRouteTable,
       "ipCurCfgStaticRouteEntry": ipCurCfgStaticRouteEntry,
       "ipCurCfgStaticRouteIndx": ipCurCfgStaticRouteIndx,
       "ipCurCfgStaticRouteDestIp": ipCurCfgStaticRouteDestIp,
       "ipCurCfgStaticRouteMask": ipCurCfgStaticRouteMask,
       "ipCurCfgStaticRouteGateway": ipCurCfgStaticRouteGateway,
       "ipCurCfgStaticRouteInterface": ipCurCfgStaticRouteInterface,
       "ipNewCfgStaticRouteTable": ipNewCfgStaticRouteTable,
       "ipNewCfgStaticRouteEntry": ipNewCfgStaticRouteEntry,
       "ipNewCfgStaticRouteIndx": ipNewCfgStaticRouteIndx,
       "ipNewCfgStaticRouteDestIp": ipNewCfgStaticRouteDestIp,
       "ipNewCfgStaticRouteMask": ipNewCfgStaticRouteMask,
       "ipNewCfgStaticRouteGateway": ipNewCfgStaticRouteGateway,
       "ipNewCfgStaticRouteAction": ipNewCfgStaticRouteAction,
       "ipNewCfgStaticRouteInterface": ipNewCfgStaticRouteInterface,
       "ipStaticRouteClearAllByDestIp": ipStaticRouteClearAllByDestIp,
       "ipStaticRouteClearAllByGatewayIp": ipStaticRouteClearAllByGatewayIp,
       "ipStaticRouteClearAllByInterface": ipStaticRouteClearAllByInterface,
       "ipStaticRouteClearAll": ipStaticRouteClearAll,
       "ipStaticRouteCurPingInterval": ipStaticRouteCurPingInterval,
       "ipStaticRouteNewPingInterval": ipStaticRouteNewPingInterval,
       "ipStaticRouteCurPingRetries": ipStaticRouteCurPingRetries,
       "ipStaticRouteNewPingRetries": ipStaticRouteNewPingRetries,
       "ipStaticRouteCurEcmpHash": ipStaticRouteCurEcmpHash,
       "ipStaticRouteNewEcmpHash": ipStaticRouteNewEcmpHash,
       "ipStaticRouteCurHealthcheck": ipStaticRouteCurHealthcheck,
       "ipStaticRouteNewHealthcheck": ipStaticRouteNewHealthcheck,
       "ipForwardCfg": ipForwardCfg,
       "ipFwdGeneralCfg": ipFwdGeneralCfg,
       "ipFwdCurCfgState": ipFwdCurCfgState,
       "ipFwdNewCfgState": ipFwdNewCfgState,
       "ipFwdCurCfgDirectedBcast": ipFwdCurCfgDirectedBcast,
       "ipFwdNewCfgDirectedBcast": ipFwdNewCfgDirectedBcast,
       "ipFwdCurCfgNoICMPRedirect": ipFwdCurCfgNoICMPRedirect,
       "ipFwdNewCfgNoICMPRedirect": ipFwdNewCfgNoICMPRedirect,
       "ipFwdCurCfgICMP6Redirect": ipFwdCurCfgICMP6Redirect,
       "ipFwdNewCfgICMP6Redirect": ipFwdNewCfgICMP6Redirect,
       "vrrpCfg": vrrpCfg,
       "vrrpGeneral": vrrpGeneral,
       "vrrpCurCfgGenState": vrrpCurCfgGenState,
       "vrrpNewCfgGenState": vrrpNewCfgGenState,
       "vrrpCurCfgGenTckVirtRtrInc": vrrpCurCfgGenTckVirtRtrInc,
       "vrrpNewCfgGenTckVirtRtrInc": vrrpNewCfgGenTckVirtRtrInc,
       "vrrpCurCfgGenTckIpIntfInc": vrrpCurCfgGenTckIpIntfInc,
       "vrrpNewCfgGenTckIpIntfInc": vrrpNewCfgGenTckIpIntfInc,
       "vrrpCurCfgGenTckVlanPortInc": vrrpCurCfgGenTckVlanPortInc,
       "vrrpNewCfgGenTckVlanPortInc": vrrpNewCfgGenTckVlanPortInc,
       "vrrpCurCfgGenHoldoff": vrrpCurCfgGenHoldoff,
       "vrrpNewCfgGenHoldoff": vrrpNewCfgGenHoldoff,
       "vrrpVirtRtrTableMaxSize": vrrpVirtRtrTableMaxSize,
       "vrrpCurCfgVirtRtrTable": vrrpCurCfgVirtRtrTable,
       "vrrpCurCfgVirtRtrTableEntry": vrrpCurCfgVirtRtrTableEntry,
       "vrrpCurCfgVirtRtrIndx": vrrpCurCfgVirtRtrIndx,
       "vrrpCurCfgVirtRtrID": vrrpCurCfgVirtRtrID,
       "vrrpCurCfgVirtRtrAddr": vrrpCurCfgVirtRtrAddr,
       "vrrpCurCfgVirtRtrIfIndex": vrrpCurCfgVirtRtrIfIndex,
       "vrrpCurCfgVirtRtrInterval": vrrpCurCfgVirtRtrInterval,
       "vrrpCurCfgVirtRtrPriority": vrrpCurCfgVirtRtrPriority,
       "vrrpCurCfgVirtRtrPreempt": vrrpCurCfgVirtRtrPreempt,
       "vrrpCurCfgVirtRtrTckVirtRtr": vrrpCurCfgVirtRtrTckVirtRtr,
       "vrrpCurCfgVirtRtrTckIpIntf": vrrpCurCfgVirtRtrTckIpIntf,
       "vrrpCurCfgVirtRtrTckVlanPort": vrrpCurCfgVirtRtrTckVlanPort,
       "vrrpCurCfgVirtRtrState": vrrpCurCfgVirtRtrState,
       "vrrpCurCfgVirtRtrFastAdvertisement": vrrpCurCfgVirtRtrFastAdvertisement,
       "vrrpCurCfgVirtRtrPreDelay": vrrpCurCfgVirtRtrPreDelay,
       "vrrpNewCfgVirtRtrTable": vrrpNewCfgVirtRtrTable,
       "vrrpNewCfgVirtRtrTableEntry": vrrpNewCfgVirtRtrTableEntry,
       "vrrpNewCfgVirtRtrIndx": vrrpNewCfgVirtRtrIndx,
       "vrrpNewCfgVirtRtrID": vrrpNewCfgVirtRtrID,
       "vrrpNewCfgVirtRtrAddr": vrrpNewCfgVirtRtrAddr,
       "vrrpNewCfgVirtRtrIfIndex": vrrpNewCfgVirtRtrIfIndex,
       "vrrpNewCfgVirtRtrInterval": vrrpNewCfgVirtRtrInterval,
       "vrrpNewCfgVirtRtrPriority": vrrpNewCfgVirtRtrPriority,
       "vrrpNewCfgVirtRtrPreempt": vrrpNewCfgVirtRtrPreempt,
       "vrrpNewCfgVirtRtrDelete": vrrpNewCfgVirtRtrDelete,
       "vrrpNewCfgVirtRtrTckVirtRtr": vrrpNewCfgVirtRtrTckVirtRtr,
       "vrrpNewCfgVirtRtrTckIpIntf": vrrpNewCfgVirtRtrTckIpIntf,
       "vrrpNewCfgVirtRtrTckVlanPort": vrrpNewCfgVirtRtrTckVlanPort,
       "vrrpNewCfgVirtRtrState": vrrpNewCfgVirtRtrState,
       "vrrpNewCfgVirtRtrFastAdvertisement": vrrpNewCfgVirtRtrFastAdvertisement,
       "vrrpNewCfgVirtRtrPreDelay": vrrpNewCfgVirtRtrPreDelay,
       "vrrpIfTableMaxSize": vrrpIfTableMaxSize,
       "vrrpCurCfgIfTable": vrrpCurCfgIfTable,
       "vrrpCurCfgIfTableEntry": vrrpCurCfgIfTableEntry,
       "vrrpCurCfgIfIndx": vrrpCurCfgIfIndx,
       "vrrpCurCfgIfAuthType": vrrpCurCfgIfAuthType,
       "vrrpCurCfgIfPasswd": vrrpCurCfgIfPasswd,
       "vrrpNewCfgIfTable": vrrpNewCfgIfTable,
       "vrrpNewCfgIfTableEntry": vrrpNewCfgIfTableEntry,
       "vrrpNewCfgIfIndx": vrrpNewCfgIfIndx,
       "vrrpNewCfgIfAuthType": vrrpNewCfgIfAuthType,
       "vrrpNewCfgIfPasswd": vrrpNewCfgIfPasswd,
       "vrrpNewCfgIfDelete": vrrpNewCfgIfDelete,
       "vrrpVirtRtrGrpTableMaxSize": vrrpVirtRtrGrpTableMaxSize,
       "vrrpCurCfgVirtRtrGrpTable": vrrpCurCfgVirtRtrGrpTable,
       "vrrpCurCfgVirtRtrGrpTableEntry": vrrpCurCfgVirtRtrGrpTableEntry,
       "vrrpCurCfgVirtRtrGrpIndx": vrrpCurCfgVirtRtrGrpIndx,
       "vrrpCurCfgVirtRtrGrpID": vrrpCurCfgVirtRtrGrpID,
       "vrrpCurCfgVirtRtrGrpIfIndex": vrrpCurCfgVirtRtrGrpIfIndex,
       "vrrpCurCfgVirtRtrGrpInterval": vrrpCurCfgVirtRtrGrpInterval,
       "vrrpCurCfgVirtRtrGrpPriority": vrrpCurCfgVirtRtrGrpPriority,
       "vrrpCurCfgVirtRtrGrpPreempt": vrrpCurCfgVirtRtrGrpPreempt,
       "vrrpCurCfgVirtRtrGrpState": vrrpCurCfgVirtRtrGrpState,
       "vrrpCurCfgVirtRtrGrpTckIpIntf": vrrpCurCfgVirtRtrGrpTckIpIntf,
       "vrrpCurCfgVirtRtrGrpTckVlanPort": vrrpCurCfgVirtRtrGrpTckVlanPort,
       "vrrpCurCfgVirtRtrGrpFastAdvertisement": vrrpCurCfgVirtRtrGrpFastAdvertisement,
       "vrrpCurCfgVirtRtrGrpPredelay": vrrpCurCfgVirtRtrGrpPredelay,
       "vrrpNewCfgVirtRtrGrpTable": vrrpNewCfgVirtRtrGrpTable,
       "vrrpNewCfgVirtRtrGrpTableEntry": vrrpNewCfgVirtRtrGrpTableEntry,
       "vrrpNewCfgVirtRtrGrpIndx": vrrpNewCfgVirtRtrGrpIndx,
       "vrrpNewCfgVirtRtrGrpID": vrrpNewCfgVirtRtrGrpID,
       "vrrpNewCfgVirtRtrGrpIfIndex": vrrpNewCfgVirtRtrGrpIfIndex,
       "vrrpNewCfgVirtRtrGrpInterval": vrrpNewCfgVirtRtrGrpInterval,
       "vrrpNewCfgVirtRtrGrpPriority": vrrpNewCfgVirtRtrGrpPriority,
       "vrrpNewCfgVirtRtrGrpPreempt": vrrpNewCfgVirtRtrGrpPreempt,
       "vrrpNewCfgVirtRtrGrpState": vrrpNewCfgVirtRtrGrpState,
       "vrrpNewCfgVirtRtrGrpDelete": vrrpNewCfgVirtRtrGrpDelete,
       "vrrpNewCfgVirtRtrGrpTckIpIntf": vrrpNewCfgVirtRtrGrpTckIpIntf,
       "vrrpNewCfgVirtRtrGrpTckVlanPort": vrrpNewCfgVirtRtrGrpTckVlanPort,
       "vrrpNewCfgVirtRtrGrpFastAdvertisement": vrrpNewCfgVirtRtrGrpFastAdvertisement,
       "vrrpNewCfgVirtRtrGrpPredelay": vrrpNewCfgVirtRtrGrpPredelay,
       "arpCfg": arpCfg,
       "arpCurCfgReARPPeriod": arpCurCfgReARPPeriod,
       "arpNewCfgReARPPeriod": arpNewCfgReARPPeriod,
       "ipBootpCfg": ipBootpCfg,
       "ipCurCfgBootpAddr": ipCurCfgBootpAddr,
       "ipNewCfgBootpAddr": ipNewCfgBootpAddr,
       "ipCurCfgBootpAddr2": ipCurCfgBootpAddr2,
       "ipNewCfgBootpAddr2": ipNewCfgBootpAddr2,
       "ipCurCfgBootpState": ipCurCfgBootpState,
       "ipNewCfgBootpState": ipNewCfgBootpState,
       "ipCurCfgBootpGlobalServerTable": ipCurCfgBootpGlobalServerTable,
       "ipCurCfgBootpGlobalServerEntry": ipCurCfgBootpGlobalServerEntry,
       "ipCurCfgBootpGlobalServerIndex": ipCurCfgBootpGlobalServerIndex,
       "ipCurCfgBootpGlobalServerAddress": ipCurCfgBootpGlobalServerAddress,
       "ipNewCfgBootpGlobalServerTable": ipNewCfgBootpGlobalServerTable,
       "ipNewCfgBootpGlobalServerEntry": ipNewCfgBootpGlobalServerEntry,
       "ipNewCfgBootpGlobalServerIndex": ipNewCfgBootpGlobalServerIndex,
       "ipNewCfgBootpGlobalServerAddress": ipNewCfgBootpGlobalServerAddress,
       "ipCurCfgBootpBcastDomainTable": ipCurCfgBootpBcastDomainTable,
       "ipCurCfgBootpBcastDomainEntry": ipCurCfgBootpBcastDomainEntry,
       "ipCurCfgBootpBcastDomainIndex": ipCurCfgBootpBcastDomainIndex,
       "ipCurCfgBootpBcastDomainVlan": ipCurCfgBootpBcastDomainVlan,
       "ipCurCfgBootpBcastDomainEnable": ipCurCfgBootpBcastDomainEnable,
       "ipNewCfgBootpBcastDomainTable": ipNewCfgBootpBcastDomainTable,
       "ipNewCfgBootpBcastDomainEntry": ipNewCfgBootpBcastDomainEntry,
       "ipNewCfgBootpBcastDomainIndex": ipNewCfgBootpBcastDomainIndex,
       "ipNewCfgBootpBcastDomainVlan": ipNewCfgBootpBcastDomainVlan,
       "ipNewCfgBootpBcastDomainEnable": ipNewCfgBootpBcastDomainEnable,
       "ipNewCfgBootpBcastDomainAction": ipNewCfgBootpBcastDomainAction,
       "ipCurCfgBootpBcastDomainServerTable": ipCurCfgBootpBcastDomainServerTable,
       "ipCurCfgBootpBcastDomainServerEntry": ipCurCfgBootpBcastDomainServerEntry,
       "ipCurCfgBootpBcastDomainBDIndex": ipCurCfgBootpBcastDomainBDIndex,
       "ipCurCfgBootpBcastDomainServIndex": ipCurCfgBootpBcastDomainServIndex,
       "ipCurCfgBootpBcastDomainServerIP": ipCurCfgBootpBcastDomainServerIP,
       "ipNewCfgBootpBcastDomainServerTable": ipNewCfgBootpBcastDomainServerTable,
       "ipNewCfgBootpBcastDomainServerEntry": ipNewCfgBootpBcastDomainServerEntry,
       "ipNewCfgBootpBcastDomainBDIndex": ipNewCfgBootpBcastDomainBDIndex,
       "ipNewCfgBootpBcastDomainServIndex": ipNewCfgBootpBcastDomainServIndex,
       "ipNewCfgBootpBcastDomainServerIP": ipNewCfgBootpBcastDomainServerIP,
       "ipCurCfgBootpOpt82State": ipCurCfgBootpOpt82State,
       "ipNewCfgBootpOpt82State": ipNewCfgBootpOpt82State,
       "ipCurCfgBootpOpt82Policy": ipCurCfgBootpOpt82Policy,
       "ipNewCfgBootpOpt82Policy": ipNewCfgBootpOpt82Policy,
       "dnsCfg": dnsCfg,
       "dnsCurCfgPrimaryIpAddr": dnsCurCfgPrimaryIpAddr,
       "dnsNewCfgPrimaryIpAddr": dnsNewCfgPrimaryIpAddr,
       "dnsCurCfgSecondaryIpAddr": dnsCurCfgSecondaryIpAddr,
       "dnsNewCfgSecondaryIpAddr": dnsNewCfgSecondaryIpAddr,
       "dnsCurCfgDomainName": dnsCurCfgDomainName,
       "dnsNewCfgDomainName": dnsNewCfgDomainName,
       "dnsNewCfgFirstRequestAddr": dnsNewCfgFirstRequestAddr,
       "dnsCurCfgFirstRequestAddr": dnsCurCfgFirstRequestAddr,
       "dnsCurCfgPriServerPort": dnsCurCfgPriServerPort,
       "dnsNewCfgPriServerPort": dnsNewCfgPriServerPort,
       "dnsCurCfgSecServerPort": dnsCurCfgSecServerPort,
       "dnsNewCfgSecServerPort": dnsNewCfgSecServerPort,
       "ipNwfCfg": ipNwfCfg,
       "ipNwfTableMax": ipNwfTableMax,
       "ipCurCfgNwfTable": ipCurCfgNwfTable,
       "ipCurCfgNwfEntry": ipCurCfgNwfEntry,
       "ipCurCfgNwfIndex": ipCurCfgNwfIndex,
       "ipCurCfgNwfAddr": ipCurCfgNwfAddr,
       "ipCurCfgNwfMask": ipCurCfgNwfMask,
       "ipCurCfgNwfState": ipCurCfgNwfState,
       "ipNewCfgNwfTable": ipNewCfgNwfTable,
       "ipNewCfgNwfEntry": ipNewCfgNwfEntry,
       "ipNewCfgNwfIndex": ipNewCfgNwfIndex,
       "ipNewCfgNwfAddr": ipNewCfgNwfAddr,
       "ipNewCfgNwfMask": ipNewCfgNwfMask,
       "ipNewCfgNwfState": ipNewCfgNwfState,
       "ipNewCfgNwfDelete": ipNewCfgNwfDelete,
       "ipRmapCfg": ipRmapCfg,
       "ipRmapTableMax": ipRmapTableMax,
       "ipCurCfgRmapTable": ipCurCfgRmapTable,
       "ipCurCfgRmapEntry": ipCurCfgRmapEntry,
       "ipCurCfgRmapIndex": ipCurCfgRmapIndex,
       "ipCurCfgRmapLp": ipCurCfgRmapLp,
       "ipCurCfgRmapMetric": ipCurCfgRmapMetric,
       "ipCurCfgRmapPrec": ipCurCfgRmapPrec,
       "ipCurCfgRmapWeight": ipCurCfgRmapWeight,
       "ipCurCfgRmapState": ipCurCfgRmapState,
       "ipCurCfgRmapAp": ipCurCfgRmapAp,
       "ipCurCfgRmapMetricType": ipCurCfgRmapMetricType,
       "ipCurCfgRmapNexthop": ipCurCfgRmapNexthop,
       "ipNewCfgRmapTable": ipNewCfgRmapTable,
       "ipNewCfgRmapEntry": ipNewCfgRmapEntry,
       "ipNewCfgRmapIndex": ipNewCfgRmapIndex,
       "ipNewCfgRmapLp": ipNewCfgRmapLp,
       "ipNewCfgRmapMetric": ipNewCfgRmapMetric,
       "ipNewCfgRmapPrec": ipNewCfgRmapPrec,
       "ipNewCfgRmapWeight": ipNewCfgRmapWeight,
       "ipNewCfgRmapState": ipNewCfgRmapState,
       "ipNewCfgRmapAp": ipNewCfgRmapAp,
       "ipNewCfgRmapMetricType": ipNewCfgRmapMetricType,
       "ipNewCfgRmapDelete": ipNewCfgRmapDelete,
       "ipNewCfgRmapNexthop": ipNewCfgRmapNexthop,
       "ipAlistTableMax": ipAlistTableMax,
       "ipCurCfgAlistTable": ipCurCfgAlistTable,
       "ipCurCfgAlistEntry": ipCurCfgAlistEntry,
       "ipCurCfgAlistRmapIndex": ipCurCfgAlistRmapIndex,
       "ipCurCfgAlistIndex": ipCurCfgAlistIndex,
       "ipCurCfgAlistNwf": ipCurCfgAlistNwf,
       "ipCurCfgAlistMetric": ipCurCfgAlistMetric,
       "ipCurCfgAlistAction": ipCurCfgAlistAction,
       "ipCurCfgAlistState": ipCurCfgAlistState,
       "ipNewCfgAlistTable": ipNewCfgAlistTable,
       "ipNewCfgAlistEntry": ipNewCfgAlistEntry,
       "ipNewCfgAlistRmapIndex": ipNewCfgAlistRmapIndex,
       "ipNewCfgAlistIndex": ipNewCfgAlistIndex,
       "ipNewCfgAlistNwf": ipNewCfgAlistNwf,
       "ipNewCfgAlistMetric": ipNewCfgAlistMetric,
       "ipNewCfgAlistAction": ipNewCfgAlistAction,
       "ipNewCfgAlistState": ipNewCfgAlistState,
       "ipNewCfgAlistDelete": ipNewCfgAlistDelete,
       "ipAspathTableMax": ipAspathTableMax,
       "ipCurCfgAspathTable": ipCurCfgAspathTable,
       "ipCurCfgAspathEntry": ipCurCfgAspathEntry,
       "ipCurCfgAspathRmapIndex": ipCurCfgAspathRmapIndex,
       "ipCurCfgAspathIndex": ipCurCfgAspathIndex,
       "ipCurCfgAspathAS": ipCurCfgAspathAS,
       "ipCurCfgAspathAction": ipCurCfgAspathAction,
       "ipCurCfgAspathState": ipCurCfgAspathState,
       "ipNewCfgAspathTable": ipNewCfgAspathTable,
       "ipNewCfgAspathEntry": ipNewCfgAspathEntry,
       "ipNewCfgAspathRmapIndex": ipNewCfgAspathRmapIndex,
       "ipNewCfgAspathIndex": ipNewCfgAspathIndex,
       "ipNewCfgAspathAS": ipNewCfgAspathAS,
       "ipNewCfgAspathAction": ipNewCfgAspathAction,
       "ipNewCfgAspathState": ipNewCfgAspathState,
       "ipNewCfgAspathDelete": ipNewCfgAspathDelete,
       "bgpCfg": bgpCfg,
       "bgpGeneral": bgpGeneral,
       "bgpCurCfgState": bgpCurCfgState,
       "bgpNewCfgState": bgpNewCfgState,
       "bgpCurCfgLocalPref": bgpCurCfgLocalPref,
       "bgpNewCfgLocalPref": bgpNewCfgLocalPref,
       "bgpCurCfgASNumber": bgpCurCfgASNumber,
       "bgpNewCfgASNumber": bgpNewCfgASNumber,
       "bgpCurCfgEbgpMaxPaths": bgpCurCfgEbgpMaxPaths,
       "bgpNewCfgEbgpMaxPaths": bgpNewCfgEbgpMaxPaths,
       "bgpCurCfgIbgpMaxPaths": bgpCurCfgIbgpMaxPaths,
       "bgpNewCfgIbgpMaxPaths": bgpNewCfgIbgpMaxPaths,
       "bgpCurCfgAsn4Comp": bgpCurCfgAsn4Comp,
       "bgpNewCfgAsn4Comp": bgpNewCfgAsn4Comp,
       "bgpCurCfgDscp": bgpCurCfgDscp,
       "bgpNewCfgDscp": bgpNewCfgDscp,
       "bgpNewCfgClusterId": bgpNewCfgClusterId,
       "bgpCurCfgClusterId": bgpCurCfgClusterId,
       "bgpNewCfgClientToClientReflection": bgpNewCfgClientToClientReflection,
       "bgpCurCfgClientToClientReflection": bgpCurCfgClientToClientReflection,
       "bgpPeerTableMax": bgpPeerTableMax,
       "bgpCurCfgPeerTable": bgpCurCfgPeerTable,
       "bgpCurCfgPeerEntry": bgpCurCfgPeerEntry,
       "bgpCurCfgPeerIndex": bgpCurCfgPeerIndex,
       "bgpCurCfgPeerRemoteAddr": bgpCurCfgPeerRemoteAddr,
       "bgpCurCfgPeerRemoteAs": bgpCurCfgPeerRemoteAs,
       "bgpCurCfgPeerTtl": bgpCurCfgPeerTtl,
       "bgpCurCfgPeerState": bgpCurCfgPeerState,
       "bgpCurCfgPeerMetric": bgpCurCfgPeerMetric,
       "bgpCurCfgPeerDefaultAction": bgpCurCfgPeerDefaultAction,
       "bgpCurCfgPeerOspfState": bgpCurCfgPeerOspfState,
       "bgpCurCfgPeerFixedState": bgpCurCfgPeerFixedState,
       "bgpCurCfgPeerStaticState": bgpCurCfgPeerStaticState,
       "bgpCurCfgPeerInRmapList": bgpCurCfgPeerInRmapList,
       "bgpCurCfgPeerOutRmapList": bgpCurCfgPeerOutRmapList,
       "bgpCurCfgPeerHold": bgpCurCfgPeerHold,
       "bgpCurCfgPeerAlive": bgpCurCfgPeerAlive,
       "bgpCurCfgPeerAdvert": bgpCurCfgPeerAdvert,
       "bgpCurCfgPeerRetry": bgpCurCfgPeerRetry,
       "bgpCurCfgPeerOrig": bgpCurCfgPeerOrig,
       "bgpCurCfgPeerRipState": bgpCurCfgPeerRipState,
       "bgpCurCfgPeerPassword": bgpCurCfgPeerPassword,
       "bgpCurCfgPeerPassive": bgpCurCfgPeerPassive,
       "bgpCurCfgPeerUpdateSrcIf": bgpCurCfgPeerUpdateSrcIf,
       "bgpCurCfgPeerUpdateSrcLoopIf": bgpCurCfgPeerUpdateSrcLoopIf,
       "bgpCurCfgPeerTtlSecHops": bgpCurCfgPeerTtlSecHops,
       "bgpCurCfgPeerNexthopSelf": bgpCurCfgPeerNexthopSelf,
       "bgpCurCfgPeerClient": bgpCurCfgPeerClient,
       "bgpNewCfgPeerTable": bgpNewCfgPeerTable,
       "bgpNewCfgPeerEntry": bgpNewCfgPeerEntry,
       "bgpNewCfgPeerIndex": bgpNewCfgPeerIndex,
       "bgpNewCfgPeerRemoteAddr": bgpNewCfgPeerRemoteAddr,
       "bgpNewCfgPeerRemoteAs": bgpNewCfgPeerRemoteAs,
       "bgpNewCfgPeerTtl": bgpNewCfgPeerTtl,
       "bgpNewCfgPeerState": bgpNewCfgPeerState,
       "bgpNewCfgPeerDelete": bgpNewCfgPeerDelete,
       "bgpNewCfgPeerMetric": bgpNewCfgPeerMetric,
       "bgpNewCfgPeerDefaultAction": bgpNewCfgPeerDefaultAction,
       "bgpNewCfgPeerOspfState": bgpNewCfgPeerOspfState,
       "bgpNewCfgPeerFixedState": bgpNewCfgPeerFixedState,
       "bgpNewCfgPeerStaticState": bgpNewCfgPeerStaticState,
       "bgpNewCfgPeerInRmapList": bgpNewCfgPeerInRmapList,
       "bgpNewCfgPeerOutRmapList": bgpNewCfgPeerOutRmapList,
       "bgpNewCfgPeerAddInRmap": bgpNewCfgPeerAddInRmap,
       "bgpNewCfgPeerAddOutRmap": bgpNewCfgPeerAddOutRmap,
       "bgpNewCfgPeerRemoveInRmap": bgpNewCfgPeerRemoveInRmap,
       "bgpNewCfgPeerRemoveOutRmap": bgpNewCfgPeerRemoveOutRmap,
       "bgpNewCfgPeerHold": bgpNewCfgPeerHold,
       "bgpNewCfgPeerAlive": bgpNewCfgPeerAlive,
       "bgpNewCfgPeerAdvert": bgpNewCfgPeerAdvert,
       "bgpNewCfgPeerRetry": bgpNewCfgPeerRetry,
       "bgpNewCfgPeerOrig": bgpNewCfgPeerOrig,
       "bgpNewCfgPeerRipState": bgpNewCfgPeerRipState,
       "bgpNewCfgPeerPassword": bgpNewCfgPeerPassword,
       "bgpNewCfgPeerPassive": bgpNewCfgPeerPassive,
       "bgpNewCfgPeerUpdateSrcIf": bgpNewCfgPeerUpdateSrcIf,
       "bgpNewCfgPeerUpdateSrcLoopIf": bgpNewCfgPeerUpdateSrcLoopIf,
       "bgpNewCfgPeerTtlSecHops": bgpNewCfgPeerTtlSecHops,
       "bgpNewCfgPeerNexthopSelf": bgpNewCfgPeerNexthopSelf,
       "bgpNewCfgPeerClient": bgpNewCfgPeerClient,
       "bgpAggrTableMax": bgpAggrTableMax,
       "bgpCurCfgAggrTable": bgpCurCfgAggrTable,
       "bgpCurCfgAggrEntry": bgpCurCfgAggrEntry,
       "bgpCurCfgAggrIndex": bgpCurCfgAggrIndex,
       "bgpCurCfgAggrAddr": bgpCurCfgAggrAddr,
       "bgpCurCfgAggrMask": bgpCurCfgAggrMask,
       "bgpCurCfgAggrState": bgpCurCfgAggrState,
       "bgpNewCfgAggrTable": bgpNewCfgAggrTable,
       "bgpNewCfgAggrEntry": bgpNewCfgAggrEntry,
       "bgpNewCfgAggrIndex": bgpNewCfgAggrIndex,
       "bgpNewCfgAggrAddr": bgpNewCfgAggrAddr,
       "bgpNewCfgAggrMask": bgpNewCfgAggrMask,
       "bgpNewCfgAggrState": bgpNewCfgAggrState,
       "bgpNewCfgAggrDelete": bgpNewCfgAggrDelete,
       "bgpGroupTableMax": bgpGroupTableMax,
       "bgpCurCfgGroupTable": bgpCurCfgGroupTable,
       "bgpCurCfgGroupEntry": bgpCurCfgGroupEntry,
       "bgpCurCfgGroupIndex": bgpCurCfgGroupIndex,
       "bgpCurCfgGroupName": bgpCurCfgGroupName,
       "bgpCurCfgGroupRemoteAddr": bgpCurCfgGroupRemoteAddr,
       "bgpCurCfgGroupRemoteMask": bgpCurCfgGroupRemoteMask,
       "bgpCurCfgGroupLimit": bgpCurCfgGroupLimit,
       "bgpCurCfgGroupUpdateSrcIf": bgpCurCfgGroupUpdateSrcIf,
       "bgpCurCfgGroupUpdateSrcLoopIf": bgpCurCfgGroupUpdateSrcLoopIf,
       "bgpCurCfgGroupHold": bgpCurCfgGroupHold,
       "bgpCurCfgGroupAlive": bgpCurCfgGroupAlive,
       "bgpCurCfgGroupAdvert": bgpCurCfgGroupAdvert,
       "bgpCurCfgGroupOrig": bgpCurCfgGroupOrig,
       "bgpCurCfgGroupMetric": bgpCurCfgGroupMetric,
       "bgpCurCfgGroupTtl": bgpCurCfgGroupTtl,
       "bgpCurCfgGroupDefaultAction": bgpCurCfgGroupDefaultAction,
       "bgpCurCfgGroupOspfState": bgpCurCfgGroupOspfState,
       "bgpCurCfgGroupRipState": bgpCurCfgGroupRipState,
       "bgpCurCfgGroupFixedState": bgpCurCfgGroupFixedState,
       "bgpCurCfgGroupStaticState": bgpCurCfgGroupStaticState,
       "bgpCurCfgGroupInRmapList": bgpCurCfgGroupInRmapList,
       "bgpCurCfgGroupOutRmapList": bgpCurCfgGroupOutRmapList,
       "bgpCurCfgGroupPassword": bgpCurCfgGroupPassword,
       "bgpCurCfgGroupState": bgpCurCfgGroupState,
       "bgpCurCfgGroupTtlSecHops": bgpCurCfgGroupTtlSecHops,
       "bgpCurCfgGroupNexthopSelf": bgpCurCfgGroupNexthopSelf,
       "bgpCurCfgGroupClient": bgpCurCfgGroupClient,
       "bgpNewCfgGroupTable": bgpNewCfgGroupTable,
       "bgpNewCfgGroupEntry": bgpNewCfgGroupEntry,
       "bgpNewCfgGroupIndex": bgpNewCfgGroupIndex,
       "bgpNewCfgGroupName": bgpNewCfgGroupName,
       "bgpNewCfgGroupRemoteAddr": bgpNewCfgGroupRemoteAddr,
       "bgpNewCfgGroupRemoteMask": bgpNewCfgGroupRemoteMask,
       "bgpNewCfgGroupLimit": bgpNewCfgGroupLimit,
       "bgpNewCfgGroupUpdateSrcIf": bgpNewCfgGroupUpdateSrcIf,
       "bgpNewCfgGroupUpdateSrcLoopIf": bgpNewCfgGroupUpdateSrcLoopIf,
       "bgpNewCfgGroupHold": bgpNewCfgGroupHold,
       "bgpNewCfgGroupAlive": bgpNewCfgGroupAlive,
       "bgpNewCfgGroupAdvert": bgpNewCfgGroupAdvert,
       "bgpNewCfgGroupOrig": bgpNewCfgGroupOrig,
       "bgpNewCfgGroupMetric": bgpNewCfgGroupMetric,
       "bgpNewCfgGroupTtl": bgpNewCfgGroupTtl,
       "bgpNewCfgGroupDefaultAction": bgpNewCfgGroupDefaultAction,
       "bgpNewCfgGroupOspfState": bgpNewCfgGroupOspfState,
       "bgpNewCfgGroupRipState": bgpNewCfgGroupRipState,
       "bgpNewCfgGroupFixedState": bgpNewCfgGroupFixedState,
       "bgpNewCfgGroupStaticState": bgpNewCfgGroupStaticState,
       "bgpNewCfgGroupInRmapList": bgpNewCfgGroupInRmapList,
       "bgpNewCfgGroupOutRmapList": bgpNewCfgGroupOutRmapList,
       "bgpNewCfgGroupAddInRmap": bgpNewCfgGroupAddInRmap,
       "bgpNewCfgGroupAddOutRmap": bgpNewCfgGroupAddOutRmap,
       "bgpNewCfgGroupRemoveInRmap": bgpNewCfgGroupRemoveInRmap,
       "bgpNewCfgGroupRemoveOutRmap": bgpNewCfgGroupRemoveOutRmap,
       "bgpNewCfgGroupPassword": bgpNewCfgGroupPassword,
       "bgpNewCfgGroupDelete": bgpNewCfgGroupDelete,
       "bgpNewCfgGroupState": bgpNewCfgGroupState,
       "bgpNewCfgGroupTtlSecHops": bgpNewCfgGroupTtlSecHops,
       "bgpNewCfgGroupNexthopSelf": bgpNewCfgGroupNexthopSelf,
       "bgpNewCfgGroupClient": bgpNewCfgGroupClient,
       "bgpCurCfgGroupRASTable": bgpCurCfgGroupRASTable,
       "bgpCurCfgGroupRASEntry": bgpCurCfgGroupRASEntry,
       "bgpCurCfgGroupRASIndex": bgpCurCfgGroupRASIndex,
       "bgpCurCfgGroupRAS": bgpCurCfgGroupRAS,
       "bgpNewCfgGroupRASTable": bgpNewCfgGroupRASTable,
       "bgpNewCfgGroupRASEntry": bgpNewCfgGroupRASEntry,
       "bgpNewCfgGroupRASIndex": bgpNewCfgGroupRASIndex,
       "bgpNewCfgGroupRAS": bgpNewCfgGroupRAS,
       "ospfCfg": ospfCfg,
       "ospfGeneral": ospfGeneral,
       "ospfCurCfgDefaultRouteMetric": ospfCurCfgDefaultRouteMetric,
       "ospfNewCfgDefaultRouteMetric": ospfNewCfgDefaultRouteMetric,
       "ospfCurCfgDefaultRouteMetricType": ospfCurCfgDefaultRouteMetricType,
       "ospfNewCfgDefaultRouteMetricType": ospfNewCfgDefaultRouteMetricType,
       "ospfIntfTableMaxSize": ospfIntfTableMaxSize,
       "ospfAreaTableMaxSize": ospfAreaTableMaxSize,
       "ospfRangeTableMaxSize": ospfRangeTableMaxSize,
       "ospfVirtIntfTableMaxSize": ospfVirtIntfTableMaxSize,
       "ospfHostTableMaxSize": ospfHostTableMaxSize,
       "ospfCurCfgState": ospfCurCfgState,
       "ospfNewCfgState": ospfNewCfgState,
       "ospfCurCfgLSDB": ospfCurCfgLSDB,
       "ospfNewCfgLSDB": ospfNewCfgLSDB,
       "ospfCurCfgAreaTable": ospfCurCfgAreaTable,
       "ospfCurCfgAreaEntry": ospfCurCfgAreaEntry,
       "ospfCurCfgAreaIndex": ospfCurCfgAreaIndex,
       "ospfCurCfgAreaId": ospfCurCfgAreaId,
       "ospfCurCfgAreaSpfInterval": ospfCurCfgAreaSpfInterval,
       "ospfCurCfgAreaAuthType": ospfCurCfgAreaAuthType,
       "ospfCurCfgAreaType": ospfCurCfgAreaType,
       "ospfCurCfgAreaMetric": ospfCurCfgAreaMetric,
       "ospfCurCfgAreaStatus": ospfCurCfgAreaStatus,
       "ospfNewCfgAreaTable": ospfNewCfgAreaTable,
       "ospfNewCfgAreaEntry": ospfNewCfgAreaEntry,
       "ospfNewCfgAreaIndex": ospfNewCfgAreaIndex,
       "ospfNewCfgAreaId": ospfNewCfgAreaId,
       "ospfNewCfgAreaSpfInterval": ospfNewCfgAreaSpfInterval,
       "ospfNewCfgAreaAuthType": ospfNewCfgAreaAuthType,
       "ospfNewCfgAreaType": ospfNewCfgAreaType,
       "ospfNewCfgAreaMetric": ospfNewCfgAreaMetric,
       "ospfNewCfgAreaStatus": ospfNewCfgAreaStatus,
       "ospfNewCfgAreaDelete": ospfNewCfgAreaDelete,
       "ospfRouteRedistribution": ospfRouteRedistribution,
       "ospfRedistributeStatic": ospfRedistributeStatic,
       "ospfCurCfgStaticMetric": ospfCurCfgStaticMetric,
       "ospfNewCfgStaticMetric": ospfNewCfgStaticMetric,
       "ospfCurCfgStaticMetricType": ospfCurCfgStaticMetricType,
       "ospfNewCfgStaticMetricType": ospfNewCfgStaticMetricType,
       "ospfCurCfgStaticOutRmapList": ospfCurCfgStaticOutRmapList,
       "ospfNewCfgStaticOutRmapList": ospfNewCfgStaticOutRmapList,
       "ospfNewCfgStaticAddOutRmap": ospfNewCfgStaticAddOutRmap,
       "ospfNewCfgStaticRemoveOutRmap": ospfNewCfgStaticRemoveOutRmap,
       "ospfRedistributeEbgp": ospfRedistributeEbgp,
       "ospfCurCfgEbgpMetric": ospfCurCfgEbgpMetric,
       "ospfNewCfgEbgpMetric": ospfNewCfgEbgpMetric,
       "ospfCurCfgEbgpMetricType": ospfCurCfgEbgpMetricType,
       "ospfNewCfgEbgpMetricType": ospfNewCfgEbgpMetricType,
       "ospfCurCfgEbgpOutRmapList": ospfCurCfgEbgpOutRmapList,
       "ospfNewCfgEbgpOutRmapList": ospfNewCfgEbgpOutRmapList,
       "ospfNewCfgEbgpAddOutRmap": ospfNewCfgEbgpAddOutRmap,
       "ospfNewCfgEbgpRemoveOutRmap": ospfNewCfgEbgpRemoveOutRmap,
       "ospfRedistributeIbgp": ospfRedistributeIbgp,
       "ospfCurCfgIbgpMetric": ospfCurCfgIbgpMetric,
       "ospfNewCfgIbgpMetric": ospfNewCfgIbgpMetric,
       "ospfCurCfgIbgpMetricType": ospfCurCfgIbgpMetricType,
       "ospfNewCfgIbgpMetricType": ospfNewCfgIbgpMetricType,
       "ospfCurCfgIbgpOutRmapList": ospfCurCfgIbgpOutRmapList,
       "ospfNewCfgIbgpOutRmapList": ospfNewCfgIbgpOutRmapList,
       "ospfNewCfgIbgpAddOutRmap": ospfNewCfgIbgpAddOutRmap,
       "ospfNewCfgIbgpRemoveOutRmap": ospfNewCfgIbgpRemoveOutRmap,
       "ospfRedistributeFixed": ospfRedistributeFixed,
       "ospfCurCfgFixedMetric": ospfCurCfgFixedMetric,
       "ospfNewCfgFixedMetric": ospfNewCfgFixedMetric,
       "ospfCurCfgFixedMetricType": ospfCurCfgFixedMetricType,
       "ospfNewCfgFixedMetricType": ospfNewCfgFixedMetricType,
       "ospfCurCfgFixedOutRmapList": ospfCurCfgFixedOutRmapList,
       "ospfNewCfgFixedOutRmapList": ospfNewCfgFixedOutRmapList,
       "ospfNewCfgFixedAddOutRmap": ospfNewCfgFixedAddOutRmap,
       "ospfNewCfgFixedRemoveOutRmap": ospfNewCfgFixedRemoveOutRmap,
       "ospfRedistributeRip": ospfRedistributeRip,
       "ospfCurCfgRipMetric": ospfCurCfgRipMetric,
       "ospfNewCfgRipMetric": ospfNewCfgRipMetric,
       "ospfCurCfgRipMetricType": ospfCurCfgRipMetricType,
       "ospfNewCfgRipMetricType": ospfNewCfgRipMetricType,
       "ospfCurCfgRipOutRmapList": ospfCurCfgRipOutRmapList,
       "ospfNewCfgRipOutRmapList": ospfNewCfgRipOutRmapList,
       "ospfNewCfgRipAddOutRmap": ospfNewCfgRipAddOutRmap,
       "ospfNewCfgRipRemoveOutRmap": ospfNewCfgRipRemoveOutRmap,
       "ospfCurCfgMdkeyTable": ospfCurCfgMdkeyTable,
       "ospfCurCfgMdkeyEntry": ospfCurCfgMdkeyEntry,
       "ospfCurCfgMdkeyIndex": ospfCurCfgMdkeyIndex,
       "ospfCurCfgMdkeyKey": ospfCurCfgMdkeyKey,
       "ospfNewCfgMdkeyTable": ospfNewCfgMdkeyTable,
       "ospfNewCfgMdkeyEntry": ospfNewCfgMdkeyEntry,
       "ospfNewCfgMdkeyIndex": ospfNewCfgMdkeyIndex,
       "ospfNewCfgMdkeyKey": ospfNewCfgMdkeyKey,
       "ospfNewCfgMdkeyDelete": ospfNewCfgMdkeyDelete,
       "ospfCurCfgIntfTable": ospfCurCfgIntfTable,
       "ospfCurCfgIntfEntry": ospfCurCfgIntfEntry,
       "ospfCurCfgIntfIndex": ospfCurCfgIntfIndex,
       "ospfCurCfgIntfArea": ospfCurCfgIntfArea,
       "ospfCurCfgIntfMdkey": ospfCurCfgIntfMdkey,
       "ospfCurCfgIntfCost": ospfCurCfgIntfCost,
       "ospfCurCfgIntfPrio": ospfCurCfgIntfPrio,
       "ospfCurCfgIntfHello": ospfCurCfgIntfHello,
       "ospfCurCfgIntfHelloMS": ospfCurCfgIntfHelloMS,
       "ospfCurCfgIntfDead": ospfCurCfgIntfDead,
       "ospfCurCfgIntfDeadMS": ospfCurCfgIntfDeadMS,
       "ospfCurCfgIntfTrans": ospfCurCfgIntfTrans,
       "ospfCurCfgIntfRetra": ospfCurCfgIntfRetra,
       "ospfCurCfgIntfAuthKey": ospfCurCfgIntfAuthKey,
       "ospfCurCfgIntfPassive": ospfCurCfgIntfPassive,
       "ospfCurCfgIntfStatus": ospfCurCfgIntfStatus,
       "ospfCurCfgIntfPtop": ospfCurCfgIntfPtop,
       "ospfNewCfgIntfTable": ospfNewCfgIntfTable,
       "ospfNewCfgIntfEntry": ospfNewCfgIntfEntry,
       "ospfNewCfgIntfIndex": ospfNewCfgIntfIndex,
       "ospfNewCfgIntfArea": ospfNewCfgIntfArea,
       "ospfNewCfgIntfMdkey": ospfNewCfgIntfMdkey,
       "ospfNewCfgIntfCost": ospfNewCfgIntfCost,
       "ospfNewCfgIntfPrio": ospfNewCfgIntfPrio,
       "ospfNewCfgIntfHello": ospfNewCfgIntfHello,
       "ospfNewCfgIntfHelloMS": ospfNewCfgIntfHelloMS,
       "ospfNewCfgIntfDead": ospfNewCfgIntfDead,
       "ospfNewCfgIntfDeadMS": ospfNewCfgIntfDeadMS,
       "ospfNewCfgIntfTrans": ospfNewCfgIntfTrans,
       "ospfNewCfgIntfRetra": ospfNewCfgIntfRetra,
       "ospfNewCfgIntfAuthKey": ospfNewCfgIntfAuthKey,
       "ospfNewCfgIntfPassive": ospfNewCfgIntfPassive,
       "ospfNewCfgIntfStatus": ospfNewCfgIntfStatus,
       "ospfNewCfgIntfDelete": ospfNewCfgIntfDelete,
       "ospfNewCfgIntfPtop": ospfNewCfgIntfPtop,
       "ospfCurCfgVirtIntfTable": ospfCurCfgVirtIntfTable,
       "ospfCurCfgVirtIntfEntry": ospfCurCfgVirtIntfEntry,
       "ospfCurCfgVirtIntfIndex": ospfCurCfgVirtIntfIndex,
       "ospfCurCfgVirtIntfAreaId": ospfCurCfgVirtIntfAreaId,
       "ospfCurCfgVirtIntfNbr": ospfCurCfgVirtIntfNbr,
       "ospfCurCfgVirtIntfMdkey": ospfCurCfgVirtIntfMdkey,
       "ospfCurCfgVirtIntfHello": ospfCurCfgVirtIntfHello,
       "ospfCurCfgVirtIntfHelloMS": ospfCurCfgVirtIntfHelloMS,
       "ospfCurCfgVirtIntfDead": ospfCurCfgVirtIntfDead,
       "ospfCurCfgVirtIntfDeadMS": ospfCurCfgVirtIntfDeadMS,
       "ospfCurCfgVirtIntfTrans": ospfCurCfgVirtIntfTrans,
       "ospfCurCfgVirtIntfRetra": ospfCurCfgVirtIntfRetra,
       "ospfCurCfgVirtIntfAuthKey": ospfCurCfgVirtIntfAuthKey,
       "ospfCurCfgVirtIntfStatus": ospfCurCfgVirtIntfStatus,
       "ospfNewCfgVirtIntfTable": ospfNewCfgVirtIntfTable,
       "ospfNewCfgVirtIntfEntry": ospfNewCfgVirtIntfEntry,
       "ospfNewCfgVirtIntfIndex": ospfNewCfgVirtIntfIndex,
       "ospfNewCfgVirtIntfAreaId": ospfNewCfgVirtIntfAreaId,
       "ospfNewCfgVirtIntfNbr": ospfNewCfgVirtIntfNbr,
       "ospfNewCfgVirtIntfMdkey": ospfNewCfgVirtIntfMdkey,
       "ospfNewCfgVirtIntfHello": ospfNewCfgVirtIntfHello,
       "ospfNewCfgVirtIntfHelloMS": ospfNewCfgVirtIntfHelloMS,
       "ospfNewCfgVirtIntfDead": ospfNewCfgVirtIntfDead,
       "ospfNewCfgVirtIntfDeadMS": ospfNewCfgVirtIntfDeadMS,
       "ospfNewCfgVirtIntfTrans": ospfNewCfgVirtIntfTrans,
       "ospfNewCfgVirtIntfRetra": ospfNewCfgVirtIntfRetra,
       "ospfNewCfgVirtIntfAuthKey": ospfNewCfgVirtIntfAuthKey,
       "ospfNewCfgVirtIntfStatus": ospfNewCfgVirtIntfStatus,
       "ospfNewCfgVirtIntfDelete": ospfNewCfgVirtIntfDelete,
       "ospfMdkeyTableMaxSize": ospfMdkeyTableMaxSize,
       "ospfCurCfgHostTable": ospfCurCfgHostTable,
       "ospfCurCfgHostEntry": ospfCurCfgHostEntry,
       "ospfCurCfgHostIndex": ospfCurCfgHostIndex,
       "ospfCurCfgHostIpAddr": ospfCurCfgHostIpAddr,
       "ospfCurCfgHostAreaIndex": ospfCurCfgHostAreaIndex,
       "ospfCurCfgHostCost": ospfCurCfgHostCost,
       "ospfCurCfgHostState": ospfCurCfgHostState,
       "ospfNewCfgHostTable": ospfNewCfgHostTable,
       "ospfNewCfgHostEntry": ospfNewCfgHostEntry,
       "ospfNewCfgHostIndex": ospfNewCfgHostIndex,
       "ospfNewCfgHostIpAddr": ospfNewCfgHostIpAddr,
       "ospfNewCfgHostAreaIndex": ospfNewCfgHostAreaIndex,
       "ospfNewCfgHostCost": ospfNewCfgHostCost,
       "ospfNewCfgHostState": ospfNewCfgHostState,
       "ospfNewCfgHostDelete": ospfNewCfgHostDelete,
       "ospfCurCfgRangeTable": ospfCurCfgRangeTable,
       "ospfCurCfgRangeEntry": ospfCurCfgRangeEntry,
       "ospfCurCfgRangeIndex": ospfCurCfgRangeIndex,
       "ospfCurCfgRangeAddr": ospfCurCfgRangeAddr,
       "ospfCurCfgRangeMask": ospfCurCfgRangeMask,
       "ospfCurCfgRangeAreaIndex": ospfCurCfgRangeAreaIndex,
       "ospfCurCfgRangeHideState": ospfCurCfgRangeHideState,
       "ospfCurCfgRangeState": ospfCurCfgRangeState,
       "ospfNewCfgRangeTable": ospfNewCfgRangeTable,
       "ospfNewCfgRangeEntry": ospfNewCfgRangeEntry,
       "ospfNewCfgRangeIndex": ospfNewCfgRangeIndex,
       "ospfNewCfgRangeAddr": ospfNewCfgRangeAddr,
       "ospfNewCfgRangeMask": ospfNewCfgRangeMask,
       "ospfNewCfgRangeAreaIndex": ospfNewCfgRangeAreaIndex,
       "ospfNewCfgRangeHideState": ospfNewCfgRangeHideState,
       "ospfNewCfgRangeState": ospfNewCfgRangeState,
       "ospfNewCfgRangeDelete": ospfNewCfgRangeDelete,
       "ospfCurCfgLoopIfTable": ospfCurCfgLoopIfTable,
       "ospfCurCfgLoopIfEntry": ospfCurCfgLoopIfEntry,
       "ospfCurCfgLoopIfIndex": ospfCurCfgLoopIfIndex,
       "ospfCurCfgLoopIfArea": ospfCurCfgLoopIfArea,
       "ospfCurCfgLoopIfStatus": ospfCurCfgLoopIfStatus,
       "ospfNewCfgLoopIfTable": ospfNewCfgLoopIfTable,
       "ospfNewCfgLoopIfEntry": ospfNewCfgLoopIfEntry,
       "ospfNewCfgLoopIfIndex": ospfNewCfgLoopIfIndex,
       "ospfNewCfgLoopIfArea": ospfNewCfgLoopIfArea,
       "ospfNewCfgLoopIfStatus": ospfNewCfgLoopIfStatus,
       "ospfNewCfgLoopIfDelete": ospfNewCfgLoopIfDelete,
       "ipGeneralCfg": ipGeneralCfg,
       "ipCurCfgRouterID": ipCurCfgRouterID,
       "ipNewCfgRouterID": ipNewCfgRouterID,
       "ipStaticArpCfg": ipStaticArpCfg,
       "ipStaticArpTableMaxSize": ipStaticArpTableMaxSize,
       "ipCurCfgStaticArpTable": ipCurCfgStaticArpTable,
       "ipCurCfgStaticArpEntry": ipCurCfgStaticArpEntry,
       "ipCurCfgStaticArpIndx": ipCurCfgStaticArpIndx,
       "ipCurCfgStaticArpIp": ipCurCfgStaticArpIp,
       "ipCurCfgStaticArpMAC": ipCurCfgStaticArpMAC,
       "ipCurCfgStaticArpVlan": ipCurCfgStaticArpVlan,
       "ipCurCfgStaticArpPort": ipCurCfgStaticArpPort,
       "ipNewCfgStaticArpTable": ipNewCfgStaticArpTable,
       "ipNewCfgStaticArpEntry": ipNewCfgStaticArpEntry,
       "ipNewCfgStaticArpIndx": ipNewCfgStaticArpIndx,
       "ipNewCfgStaticArpIp": ipNewCfgStaticArpIp,
       "ipNewCfgStaticArpMAC": ipNewCfgStaticArpMAC,
       "ipNewCfgStaticArpVlan": ipNewCfgStaticArpVlan,
       "ipNewCfgStaticArpPort": ipNewCfgStaticArpPort,
       "ipNewCfgStaticArpAction": ipNewCfgStaticArpAction,
       "ipStaticArpClearAll": ipStaticArpClearAll,
       "rip2Cfg": rip2Cfg,
       "ripCurCfgIntfTable": ripCurCfgIntfTable,
       "ripCurCfgIntfEntry": ripCurCfgIntfEntry,
       "ripCurCfgIntfIndex": ripCurCfgIntfIndex,
       "ripCurCfgIntfVersion": ripCurCfgIntfVersion,
       "ripCurCfgIntfState": ripCurCfgIntfState,
       "ripCurCfgIntfListen": ripCurCfgIntfListen,
       "ripCurCfgIntfTrigUpdate": ripCurCfgIntfTrigUpdate,
       "ripCurCfgIntfMcastUpdate": ripCurCfgIntfMcastUpdate,
       "ripCurCfgIntfPoisonReverse": ripCurCfgIntfPoisonReverse,
       "ripCurCfgIntfSupply": ripCurCfgIntfSupply,
       "ripCurCfgIntfMetric": ripCurCfgIntfMetric,
       "ripCurCfgIntfAuth": ripCurCfgIntfAuth,
       "ripCurCfgIntfKey": ripCurCfgIntfKey,
       "ripCurCfgIntfDefault": ripCurCfgIntfDefault,
       "ripCurCfgIntfSplitHorizon": ripCurCfgIntfSplitHorizon,
       "ripNewCfgIntfTable": ripNewCfgIntfTable,
       "ripNewCfgIntfEntry": ripNewCfgIntfEntry,
       "ripNewCfgIntfIndex": ripNewCfgIntfIndex,
       "ripNewCfgIntfVersion": ripNewCfgIntfVersion,
       "ripNewCfgIntfSupply": ripNewCfgIntfSupply,
       "ripNewCfgIntfListen": ripNewCfgIntfListen,
       "ripNewCfgIntfTrigUpdate": ripNewCfgIntfTrigUpdate,
       "ripNewCfgIntfMcastUpdate": ripNewCfgIntfMcastUpdate,
       "ripNewCfgIntfPoisonReverse": ripNewCfgIntfPoisonReverse,
       "ripNewCfgIntfState": ripNewCfgIntfState,
       "ripNewCfgIntfMetric": ripNewCfgIntfMetric,
       "ripNewCfgIntfAuth": ripNewCfgIntfAuth,
       "ripNewCfgIntfKey": ripNewCfgIntfKey,
       "ripNewCfgIntfDefault": ripNewCfgIntfDefault,
       "ripNewCfgIntfSplitHorizon": ripNewCfgIntfSplitHorizon,
       "ripGeneral": ripGeneral,
       "rip2CurCfgState": rip2CurCfgState,
       "rip2NewCfgState": rip2NewCfgState,
       "rip2CurCfgUpdatePeriod": rip2CurCfgUpdatePeriod,
       "rip2NewCfgUpdatePeriod": rip2NewCfgUpdatePeriod,
       "ripRouteRedistribution": ripRouteRedistribution,
       "ripRedistributeStatic": ripRedistributeStatic,
       "ripCurCfgStaticMetric": ripCurCfgStaticMetric,
       "ripNewCfgStaticMetric": ripNewCfgStaticMetric,
       "ripCurCfgStaticOutRmapList": ripCurCfgStaticOutRmapList,
       "ripNewCfgStaticOutRmapList": ripNewCfgStaticOutRmapList,
       "ripNewCfgStaticAddOutRmap": ripNewCfgStaticAddOutRmap,
       "ripNewCfgStaticRemoveOutRmap": ripNewCfgStaticRemoveOutRmap,
       "ripRedistributeEbgp": ripRedistributeEbgp,
       "ripCurCfgEbgpMetric": ripCurCfgEbgpMetric,
       "ripNewCfgEbgpMetric": ripNewCfgEbgpMetric,
       "ripCurCfgEbgpOutRmapList": ripCurCfgEbgpOutRmapList,
       "ripNewCfgEbgpOutRmapList": ripNewCfgEbgpOutRmapList,
       "ripNewCfgEbgpAddOutRmap": ripNewCfgEbgpAddOutRmap,
       "ripNewCfgEbgpRemoveOutRmap": ripNewCfgEbgpRemoveOutRmap,
       "ripRedistributeIbgp": ripRedistributeIbgp,
       "ripCurCfgIbgpMetric": ripCurCfgIbgpMetric,
       "ripNewCfgIbgpMetric": ripNewCfgIbgpMetric,
       "ripCurCfgIbgpOutRmapList": ripCurCfgIbgpOutRmapList,
       "ripNewCfgIbgpOutRmapList": ripNewCfgIbgpOutRmapList,
       "ripNewCfgIbgpAddOutRmap": ripNewCfgIbgpAddOutRmap,
       "ripNewCfgIbgpRemoveOutRmap": ripNewCfgIbgpRemoveOutRmap,
       "ripRedistributeFixed": ripRedistributeFixed,
       "ripCurCfgFixedMetric": ripCurCfgFixedMetric,
       "ripNewCfgFixedMetric": ripNewCfgFixedMetric,
       "ripCurCfgFixedOutRmapList": ripCurCfgFixedOutRmapList,
       "ripNewCfgFixedOutRmapList": ripNewCfgFixedOutRmapList,
       "ripNewCfgFixedAddOutRmap": ripNewCfgFixedAddOutRmap,
       "ripNewCfgFixedRemoveOutRmap": ripNewCfgFixedRemoveOutRmap,
       "ripRedistributeOspf": ripRedistributeOspf,
       "ripCurCfgOspfMetric": ripCurCfgOspfMetric,
       "ripNewCfgOspfMetric": ripNewCfgOspfMetric,
       "ripCurCfgOspfOutRmapList": ripCurCfgOspfOutRmapList,
       "ripNewCfgOspfOutRmapList": ripNewCfgOspfOutRmapList,
       "ripNewCfgOspfAddOutRmap": ripNewCfgOspfAddOutRmap,
       "ripNewCfgOspfRemoveOutRmap": ripNewCfgOspfRemoveOutRmap,
       "ripRedistributeEospf": ripRedistributeEospf,
       "ripCurCfgEospfMetric": ripCurCfgEospfMetric,
       "ripNewCfgEospfMetric": ripNewCfgEospfMetric,
       "ripCurCfgEospfOutRmapList": ripCurCfgEospfOutRmapList,
       "ripNewCfgEospfOutRmapList": ripNewCfgEospfOutRmapList,
       "ripNewCfgEospfAddOutRmap": ripNewCfgEospfAddOutRmap,
       "ripNewCfgEospfRemoveOutRmap": ripNewCfgEospfRemoveOutRmap,
       "igmpCfg": igmpCfg,
       "igmpCurCfgOnOff": igmpCurCfgOnOff,
       "igmpNewCfgOnOff": igmpNewCfgOnOff,
       "igmpSnoopCfg": igmpSnoopCfg,
       "igmpSnoopCurCfgMrto": igmpSnoopCurCfgMrto,
       "igmpSnoopNewCfgMrto": igmpSnoopNewCfgMrto,
       "igmpSnoopCurCfgAggrEnaDis": igmpSnoopCurCfgAggrEnaDis,
       "igmpSnoopNewCfgAggrEnaDis": igmpSnoopNewCfgAggrEnaDis,
       "igmpSnoopCurCfgEnaDis": igmpSnoopCurCfgEnaDis,
       "igmpSnoopNewCfgEnaDis": igmpSnoopNewCfgEnaDis,
       "igmpSnoopNewCfgVlanAdd": igmpSnoopNewCfgVlanAdd,
       "igmpSnoopNewCfgVlanRem": igmpSnoopNewCfgVlanRem,
       "igmpSnoopNewCfgVlanClear": igmpSnoopNewCfgVlanClear,
       "igmpSnoopCurCfgVlanBmap": igmpSnoopCurCfgVlanBmap,
       "igmpSnoopNewCfgVlanBmap": igmpSnoopNewCfgVlanBmap,
       "igmpSnoopCurCfgSrcIp": igmpSnoopCurCfgSrcIp,
       "igmpSnoopNewCfgSrcIp": igmpSnoopNewCfgSrcIp,
       "igmpSnoopSetToDefault": igmpSnoopSetToDefault,
       "igmpStaticMrtrCfg": igmpStaticMrtrCfg,
       "igmpStaticMrtrCurCfgTable": igmpStaticMrtrCurCfgTable,
       "igmpStaticMrtrCurCfgTableEntry": igmpStaticMrtrCurCfgTableEntry,
       "igmpStaticMrtrCurCfgIndx": igmpStaticMrtrCurCfgIndx,
       "igmpStaticMrtrCurCfgPortId": igmpStaticMrtrCurCfgPortId,
       "igmpStaticMrtrCurCfgVlanId": igmpStaticMrtrCurCfgVlanId,
       "igmpStaticMrtrCurCfgVersion": igmpStaticMrtrCurCfgVersion,
       "igmpStaticMrtrNewCfgTable": igmpStaticMrtrNewCfgTable,
       "igmpStaticMrtrNewCfgTableEntry": igmpStaticMrtrNewCfgTableEntry,
       "igmpStaticMrtrNewCfgIndx": igmpStaticMrtrNewCfgIndx,
       "igmpStaticMrtrNewCfgPortId": igmpStaticMrtrNewCfgPortId,
       "igmpStaticMrtrNewCfgVlanId": igmpStaticMrtrNewCfgVlanId,
       "igmpStaticMrtrNewCfgVersion": igmpStaticMrtrNewCfgVersion,
       "igmpStaticMrtrNewCfgDelete": igmpStaticMrtrNewCfgDelete,
       "igmpStaticMrtrNewCfgClear": igmpStaticMrtrNewCfgClear,
       "igmpFilterCfg": igmpFilterCfg,
       "igmpFltCurCfgTable": igmpFltCurCfgTable,
       "igmpFltCurCfgTableEntry": igmpFltCurCfgTableEntry,
       "igmpFltCurCfgIndx": igmpFltCurCfgIndx,
       "igmpFltCurCfgMcastIp1": igmpFltCurCfgMcastIp1,
       "igmpFltCurCfgMcastIp2": igmpFltCurCfgMcastIp2,
       "igmpFltCurCfgAction": igmpFltCurCfgAction,
       "igmpFltCurCfgState": igmpFltCurCfgState,
       "igmpFltNewCfgTable": igmpFltNewCfgTable,
       "igmpFltNewCfgTableEntry": igmpFltNewCfgTableEntry,
       "igmpFltNewCfgIndx": igmpFltNewCfgIndx,
       "igmpFltNewCfgMcastIp1": igmpFltNewCfgMcastIp1,
       "igmpFltNewCfgMcastIp2": igmpFltNewCfgMcastIp2,
       "igmpFltNewCfgAction": igmpFltNewCfgAction,
       "igmpFltNewCfgState": igmpFltNewCfgState,
       "igmpFltNewCfgDelete": igmpFltNewCfgDelete,
       "igmpFltCurCfgPortTable": igmpFltCurCfgPortTable,
       "igmpFltCurCfgPortTableEntry": igmpFltCurCfgPortTableEntry,
       "igmpFltCurCfgPortIndx": igmpFltCurCfgPortIndx,
       "igmpFltCurCfgPortState": igmpFltCurCfgPortState,
       "igmpFltCurCfgPortFiltBmap": igmpFltCurCfgPortFiltBmap,
       "igmpFltNewCfgPortTable": igmpFltNewCfgPortTable,
       "igmpFltNewCfgPortTableEntry": igmpFltNewCfgPortTableEntry,
       "igmpFltNewCfgPortIndx": igmpFltNewCfgPortIndx,
       "igmpFltNewCfgPortState": igmpFltNewCfgPortState,
       "igmpFltNewCfgPortFiltBmap": igmpFltNewCfgPortFiltBmap,
       "igmpFltNewCfgPortAddFiltRule": igmpFltNewCfgPortAddFiltRule,
       "igmpFltNewCfgPortRemFiltRule": igmpFltNewCfgPortRemFiltRule,
       "igmpFltCurCfgEnaDis": igmpFltCurCfgEnaDis,
       "igmpFltNewCfgEnaDis": igmpFltNewCfgEnaDis,
       "igmpRelayCfg": igmpRelayCfg,
       "igmpRelayCurCfgEnaDis": igmpRelayCurCfgEnaDis,
       "igmpRelayNewCfgEnaDis": igmpRelayNewCfgEnaDis,
       "igmpRelayNewCfgAddVlan": igmpRelayNewCfgAddVlan,
       "igmpRelayNewCfgRemVlan": igmpRelayNewCfgRemVlan,
       "igmpRelayNewCfgClearVlan": igmpRelayNewCfgClearVlan,
       "igmpRelayCurCfgVlanBmap": igmpRelayCurCfgVlanBmap,
       "igmpRelayNewCfgVlanBmap": igmpRelayNewCfgVlanBmap,
       "igmpRelayCurCfgReport": igmpRelayCurCfgReport,
       "igmpRelayNewCfgReport": igmpRelayNewCfgReport,
       "igmpRelayMrtrCurCfgTable": igmpRelayMrtrCurCfgTable,
       "igmpRelayMrtrCurCfgTableEntry": igmpRelayMrtrCurCfgTableEntry,
       "igmpRelayMrtrCurCfgIndx": igmpRelayMrtrCurCfgIndx,
       "igmpRelayMrtrCurCfgAddr": igmpRelayMrtrCurCfgAddr,
       "igmpRelayMrtrCurCfgEnaDis": igmpRelayMrtrCurCfgEnaDis,
       "igmpRelayMrtrCurCfgInterval": igmpRelayMrtrCurCfgInterval,
       "igmpRelayMrtrCurCfgRetry": igmpRelayMrtrCurCfgRetry,
       "igmpRelayMrtrCurCfgRestr": igmpRelayMrtrCurCfgRestr,
       "igmpRelayMrtrCurCfgVersion": igmpRelayMrtrCurCfgVersion,
       "igmpRelayMrtrNewCfgTable": igmpRelayMrtrNewCfgTable,
       "igmpRelayMrtrNewCfgTableEntry": igmpRelayMrtrNewCfgTableEntry,
       "igmpRelayMrtrNewCfgIndx": igmpRelayMrtrNewCfgIndx,
       "igmpRelayMrtrNewCfgAddr": igmpRelayMrtrNewCfgAddr,
       "igmpRelayMrtrNewCfgEnaDis": igmpRelayMrtrNewCfgEnaDis,
       "igmpRelayMrtrNewCfgInterval": igmpRelayMrtrNewCfgInterval,
       "igmpRelayMrtrNewCfgRetry": igmpRelayMrtrNewCfgRetry,
       "igmpRelayMrtrNewCfgRestr": igmpRelayMrtrNewCfgRestr,
       "igmpRelayMrtrNewCfgVersion": igmpRelayMrtrNewCfgVersion,
       "igmpRelayMrtrNewCfgRemove": igmpRelayMrtrNewCfgRemove,
       "igmpAdvCfg": igmpAdvCfg,
       "igmpAdvCurCfgQInterval": igmpAdvCurCfgQInterval,
       "igmpAdvNewCfgQInterval": igmpAdvNewCfgQInterval,
       "igmpAdvCurCfgRobust": igmpAdvCurCfgRobust,
       "igmpAdvNewCfgRobust": igmpAdvNewCfgRobust,
       "igmpAdvCurCfgTimeout": igmpAdvCurCfgTimeout,
       "igmpAdvNewCfgTimeout": igmpAdvNewCfgTimeout,
       "igmpAdvNewCfgVlanFastlvAdd": igmpAdvNewCfgVlanFastlvAdd,
       "igmpAdvNewCfgVlanFastlvRem": igmpAdvNewCfgVlanFastlvRem,
       "igmpAdvCurCfgVlanFastlvBmap": igmpAdvCurCfgVlanFastlvBmap,
       "igmpAdvNewCfgVlanFastlvBmap": igmpAdvNewCfgVlanFastlvBmap,
       "igmpAdvCurCfgRtrAlert": igmpAdvCurCfgRtrAlert,
       "igmpAdvNewCfgRtrAlert": igmpAdvNewCfgRtrAlert,
       "igmpV3SnoopCfg": igmpV3SnoopCfg,
       "igmpV3SnoopCurCfgSources": igmpV3SnoopCurCfgSources,
       "igmpV3SnoopNewCfgSources": igmpV3SnoopNewCfgSources,
       "igmpV3SnoopCurCfgEnaDis": igmpV3SnoopCurCfgEnaDis,
       "igmpV3SnoopNewCfgEnaDis": igmpV3SnoopNewCfgEnaDis,
       "igmpV3SnoopCurCfgExcludeEnaDis": igmpV3SnoopCurCfgExcludeEnaDis,
       "igmpV3SnoopNewCfgExcludeEnaDis": igmpV3SnoopNewCfgExcludeEnaDis,
       "igmpV3SnoopCurCfgV1V2EnaDis": igmpV3SnoopCurCfgV1V2EnaDis,
       "igmpV3SnoopNewCfgV1V2EnaDis": igmpV3SnoopNewCfgV1V2EnaDis,
       "igmpCurQurCfgTable": igmpCurQurCfgTable,
       "igmpCurQurCfgEntry": igmpCurQurCfgEntry,
       "igmpCurQurCfgVlanIndex": igmpCurQurCfgVlanIndex,
       "igmpCurQuerierState": igmpCurQuerierState,
       "igmpCurCfgQuerier": igmpCurCfgQuerier,
       "igmpCurCfgQueryInterval": igmpCurCfgQueryInterval,
       "igmpCurCfgQurSrcIp": igmpCurCfgQurSrcIp,
       "igmpCurCfgElectionType": igmpCurCfgElectionType,
       "igmpCurCfgQurRobustness": igmpCurCfgQurRobustness,
       "igmpCurCfgQurStartupCnt": igmpCurCfgQurStartupCnt,
       "igmpCurCfgQurStartupInt": igmpCurCfgQurStartupInt,
       "igmpCurCfgQurMaxRespTime": igmpCurCfgQurMaxRespTime,
       "igmpCurCfgOtherQurAddress": igmpCurCfgOtherQurAddress,
       "igmpCurCfgOtherQurPresentInt": igmpCurCfgOtherQurPresentInt,
       "igmpCurCfgVlanOperVersion": igmpCurCfgVlanOperVersion,
       "igmpCurVlanOperVersion": igmpCurVlanOperVersion,
       "igmpCurVlanOlderVerTimer": igmpCurVlanOlderVerTimer,
       "igmpNewQurCfgTable": igmpNewQurCfgTable,
       "igmpNewQurCfgEntry": igmpNewQurCfgEntry,
       "igmpNewQurCfgVlanIndex": igmpNewQurCfgVlanIndex,
       "igmpNewQuerierState": igmpNewQuerierState,
       "igmpNewCfgQuerier": igmpNewCfgQuerier,
       "igmpNewCfgQueryInterval": igmpNewCfgQueryInterval,
       "igmpNewCfgQurSrcIp": igmpNewCfgQurSrcIp,
       "igmpNewCfgElectionType": igmpNewCfgElectionType,
       "igmpNewCfgQurRobustness": igmpNewCfgQurRobustness,
       "igmpNewCfgQurStartupCnt": igmpNewCfgQurStartupCnt,
       "igmpNewCfgQurStartupInt": igmpNewCfgQurStartupInt,
       "igmpNewCfgQurMaxRespTime": igmpNewCfgQurMaxRespTime,
       "igmpNewCfgOtherQurAddress": igmpNewCfgOtherQurAddress,
       "igmpNewCfgOtherQurPresentInt": igmpNewCfgOtherQurPresentInt,
       "igmpNewCfgVlanOperVersion": igmpNewCfgVlanOperVersion,
       "igmpNewVlanOperVersion": igmpNewVlanOperVersion,
       "igmpNewVlanOlderVerTimer": igmpNewVlanOlderVerTimer,
       "igmpNewCfgQuerierDefault": igmpNewCfgQuerierDefault,
       "igmpCurCfgQuerierOnOff": igmpCurCfgQuerierOnOff,
       "igmpNewCfgQuerierOnOff": igmpNewCfgQuerierOnOff,
       "ipmcStaticRouteCfg": ipmcStaticRouteCfg,
       "ipmcStaticRouteTableMaxSize": ipmcStaticRouteTableMaxSize,
       "ipmcCurCfgStaticRouteTable": ipmcCurCfgStaticRouteTable,
       "ipmcCurCfgStaticRouteEntry": ipmcCurCfgStaticRouteEntry,
       "ipmcCurCfgStaticRouteIndx": ipmcCurCfgStaticRouteIndx,
       "ipmcCurCfgStaticRouteDestIp": ipmcCurCfgStaticRouteDestIp,
       "ipmcCurCfgStaticRouteVlanId": ipmcCurCfgStaticRouteVlanId,
       "ipmcCurCfgStaticRouteHostBmap": ipmcCurCfgStaticRouteHostBmap,
       "ipmcCurCfgStaticRoutePMrtrBmap": ipmcCurCfgStaticRoutePMrtrBmap,
       "ipmcCurCfgStaticRouteBMrtrBmap": ipmcCurCfgStaticRouteBMrtrBmap,
       "ipmcCurCfgStaticRouteVrid": ipmcCurCfgStaticRouteVrid,
       "ipmcCurCfgStaticRouteAdminkeys": ipmcCurCfgStaticRouteAdminkeys,
       "ipmcCurCfgStaticRouteTrunks": ipmcCurCfgStaticRouteTrunks,
       "ipmcNewCfgStaticRouteTable": ipmcNewCfgStaticRouteTable,
       "ipmcNewCfgStaticRouteEntry": ipmcNewCfgStaticRouteEntry,
       "ipmcNewCfgStaticRouteIndx": ipmcNewCfgStaticRouteIndx,
       "ipmcNewCfgStaticRouteDestIp": ipmcNewCfgStaticRouteDestIp,
       "ipmcNewCfgStaticRouteVlanId": ipmcNewCfgStaticRouteVlanId,
       "ipmcNewCfgStaticRouteHostBmap": ipmcNewCfgStaticRouteHostBmap,
       "ipmcNewCfgStaticRoutePMrtrBmap": ipmcNewCfgStaticRoutePMrtrBmap,
       "ipmcNewCfgStaticRouteBMrtrBmap": ipmcNewCfgStaticRouteBMrtrBmap,
       "ipmcNewCfgStaticRouteAddPort": ipmcNewCfgStaticRouteAddPort,
       "ipmcNewCfgStaticRouteTrunks": ipmcNewCfgStaticRouteTrunks,
       "ipmcNewCfgStaticRouteAddTrunk": ipmcNewCfgStaticRouteAddTrunk,
       "ipmcNewCfgStaticRouteRemTrunk": ipmcNewCfgStaticRouteRemTrunk,
       "ipmcNewCfgStaticRouteAdminkeys": ipmcNewCfgStaticRouteAdminkeys,
       "ipmcNewCfgStaticRouteAddAdminkey": ipmcNewCfgStaticRouteAddAdminkey,
       "ipmcNewCfgStaticRouteRemAdminkey": ipmcNewCfgStaticRouteRemAdminkey,
       "ipmcNewCfgStaticRoutePortInfo": ipmcNewCfgStaticRoutePortInfo,
       "ipmcNewCfgStaticRouteVrid": ipmcNewCfgStaticRouteVrid,
       "ipmcNewCfgStaticRouteDelete": ipmcNewCfgStaticRouteDelete,
       "ipmcNewCfgStaticRouteRemPort": ipmcNewCfgStaticRouteRemPort,
       "ipmcStaticRouteClearAll": ipmcStaticRouteClearAll,
       "ipStaticNbrCfg": ipStaticNbrCfg,
       "ipStaticNbrTableMaxSize": ipStaticNbrTableMaxSize,
       "ipCurCfgStaticNbrTable": ipCurCfgStaticNbrTable,
       "ipCurCfgStaticNbrEntry": ipCurCfgStaticNbrEntry,
       "ipCurCfgStaticNbrIndx": ipCurCfgStaticNbrIndx,
       "ipCurCfgStaticNbrIp": ipCurCfgStaticNbrIp,
       "ipCurCfgStaticNbrMAC": ipCurCfgStaticNbrMAC,
       "ipCurCfgStaticNbrVlan": ipCurCfgStaticNbrVlan,
       "ipCurCfgStaticNbrPort": ipCurCfgStaticNbrPort,
       "ipNewCfgStaticNbrTable": ipNewCfgStaticNbrTable,
       "ipNewCfgStaticNbrEntry": ipNewCfgStaticNbrEntry,
       "ipNewCfgStaticNbrIndx": ipNewCfgStaticNbrIndx,
       "ipNewCfgStaticNbrIp": ipNewCfgStaticNbrIp,
       "ipNewCfgStaticNbrMAC": ipNewCfgStaticNbrMAC,
       "ipNewCfgStaticNbrVlan": ipNewCfgStaticNbrVlan,
       "ipNewCfgStaticNbrPort": ipNewCfgStaticNbrPort,
       "ipNewCfgStaticNbrAction": ipNewCfgStaticNbrAction,
       "ipStaticNbrClearAll": ipStaticNbrClearAll,
       "ipGatewayIpv6Cfg": ipGatewayIpv6Cfg,
       "ipGatewayIpv6TableMax": ipGatewayIpv6TableMax,
       "ipCurCfgGwIpv6Table": ipCurCfgGwIpv6Table,
       "ipCurCfgGwIpv6Entry": ipCurCfgGwIpv6Entry,
       "ipCurCfgGwIpv6Index": ipCurCfgGwIpv6Index,
       "ipCurCfgGwIpv6Addr": ipCurCfgGwIpv6Addr,
       "ipCurCfgGwIpv6State": ipCurCfgGwIpv6State,
       "ipNewCfgGwIpv6Table": ipNewCfgGwIpv6Table,
       "ipNewCfgGwIpv6Entry": ipNewCfgGwIpv6Entry,
       "ipNewCfgGwIpv6Index": ipNewCfgGwIpv6Index,
       "ipNewCfgGwIpv6Addr": ipNewCfgGwIpv6Addr,
       "ipNewCfgGwIpv6State": ipNewCfgGwIpv6State,
       "ipNewCfgGwIpv6Delete": ipNewCfgGwIpv6Delete,
       "ipStaticRoute6Cfg": ipStaticRoute6Cfg,
       "ipStaticRoute6TableMaxSize": ipStaticRoute6TableMaxSize,
       "ipCurCfgStaticRoute6Table": ipCurCfgStaticRoute6Table,
       "ipCurCfgStaticRoute6Entry": ipCurCfgStaticRoute6Entry,
       "ipCurCfgStaticRoute6Indx": ipCurCfgStaticRoute6Indx,
       "ipCurCfgStaticRoute6DestIp": ipCurCfgStaticRoute6DestIp,
       "ipCurCfgStaticRoute6Mask": ipCurCfgStaticRoute6Mask,
       "ipCurCfgStaticRoute6Gateway": ipCurCfgStaticRoute6Gateway,
       "ipCurCfgStaticRoute6Interface": ipCurCfgStaticRoute6Interface,
       "ipNewCfgStaticRoute6Table": ipNewCfgStaticRoute6Table,
       "ipNewCfgStaticRoute6Entry": ipNewCfgStaticRoute6Entry,
       "ipNewCfgStaticRoute6Indx": ipNewCfgStaticRoute6Indx,
       "ipNewCfgStaticRoute6DestIp": ipNewCfgStaticRoute6DestIp,
       "ipNewCfgStaticRoute6Mask": ipNewCfgStaticRoute6Mask,
       "ipNewCfgStaticRoute6Gateway": ipNewCfgStaticRoute6Gateway,
       "ipNewCfgStaticRoute6Action": ipNewCfgStaticRoute6Action,
       "ipNewCfgStaticRoute6Interface": ipNewCfgStaticRoute6Interface,
       "ipStaticRoute6ClearAllByDestIp": ipStaticRoute6ClearAllByDestIp,
       "ipStaticRoute6ClearAllByGatewayIp": ipStaticRoute6ClearAllByGatewayIp,
       "ipStaticRoute6ClearAllByInterface": ipStaticRoute6ClearAllByInterface,
       "ipStaticRoute6ClearAll": ipStaticRoute6ClearAll,
       "ipInterfaceLoopbackCfg": ipInterfaceLoopbackCfg,
       "ipInterfaceLoopbackTableMax": ipInterfaceLoopbackTableMax,
       "ipCurCfgIntfLoopbackTable": ipCurCfgIntfLoopbackTable,
       "ipCurCfgIntfLoopbackEntry": ipCurCfgIntfLoopbackEntry,
       "ipCurCfgIntfLoopbackIndex": ipCurCfgIntfLoopbackIndex,
       "ipCurCfgIntfLoopbackAddr": ipCurCfgIntfLoopbackAddr,
       "ipCurCfgIntfLoopbackMask": ipCurCfgIntfLoopbackMask,
       "ipCurCfgIntfLoopbackBroadcast": ipCurCfgIntfLoopbackBroadcast,
       "ipCurCfgIntfLoopbackState": ipCurCfgIntfLoopbackState,
       "ipNewCfgIntfLoopbackTable": ipNewCfgIntfLoopbackTable,
       "ipNewCfgIntfLoopbackEntry": ipNewCfgIntfLoopbackEntry,
       "ipNewCfgIntfLoopbackIndex": ipNewCfgIntfLoopbackIndex,
       "ipNewCfgIntfLoopbackAddr": ipNewCfgIntfLoopbackAddr,
       "ipNewCfgIntfLoopbackMask": ipNewCfgIntfLoopbackMask,
       "ipNewCfgIntfLoopbackState": ipNewCfgIntfLoopbackState,
       "ipNewCfgIntfLoopbackDelete": ipNewCfgIntfLoopbackDelete,
       "ospf3Cfg": ospf3Cfg,
       "ospf3General": ospf3General,
       "ospf3IntfTableMaxSize": ospf3IntfTableMaxSize,
       "ospf3AreaTableMaxSize": ospf3AreaTableMaxSize,
       "ospf3RangeTableMaxSize": ospf3RangeTableMaxSize,
       "ospf3ExtRangeTableMaxSize": ospf3ExtRangeTableMaxSize,
       "ospf3RedistTableMaxSize": ospf3RedistTableMaxSize,
       "ospf3VirtIntfTableMaxSize": ospf3VirtIntfTableMaxSize,
       "ospf3HostTableMaxSize": ospf3HostTableMaxSize,
       "ospf3NbrTableMaxSize": ospf3NbrTableMaxSize,
       "ospf3CurCfgState": ospf3CurCfgState,
       "ospf3NewCfgState": ospf3NewCfgState,
       "ospf3CurCfgRouterId": ospf3CurCfgRouterId,
       "ospf3NewCfgRouterId": ospf3NewCfgRouterId,
       "ospf3CurCfgAbrType": ospf3CurCfgAbrType,
       "ospf3NewCfgAbrType": ospf3NewCfgAbrType,
       "ospf3CurCfgLSDB": ospf3CurCfgLSDB,
       "ospf3NewCfgLSDB": ospf3NewCfgLSDB,
       "ospf3CurCfgExitOverflow": ospf3CurCfgExitOverflow,
       "ospf3NewCfgExitOverflow": ospf3NewCfgExitOverflow,
       "ospf3CurCfgReferenceBw": ospf3CurCfgReferenceBw,
       "ospf3NewCfgReferenceBw": ospf3NewCfgReferenceBw,
       "ospf3CurCfgSpfDelay": ospf3CurCfgSpfDelay,
       "ospf3NewCfgSpfDelay": ospf3NewCfgSpfDelay,
       "ospf3CurCfgSpfHold": ospf3CurCfgSpfHold,
       "ospf3NewCfgSpfHold": ospf3NewCfgSpfHold,
       "ospf3CurCfgNssaAsbrDfRtTrans": ospf3CurCfgNssaAsbrDfRtTrans,
       "ospf3NewCfgNssaAsbrDfRtTrans": ospf3NewCfgNssaAsbrDfRtTrans,
       "ospf3CurCfgAreaTable": ospf3CurCfgAreaTable,
       "ospf3CurCfgAreaEntry": ospf3CurCfgAreaEntry,
       "ospf3CurCfgAreaIndex": ospf3CurCfgAreaIndex,
       "ospf3CurCfgAreaId": ospf3CurCfgAreaId,
       "ospf3CurCfgAreaStbInterval": ospf3CurCfgAreaStbInterval,
       "ospf3CurCfgAreaType": ospf3CurCfgAreaType,
       "ospf3CurCfgAreaNoSumm": ospf3CurCfgAreaNoSumm,
       "ospf3CurCfgAreaDefaultMetric": ospf3CurCfgAreaDefaultMetric,
       "ospf3CurCfgAreaDefaultMetricType": ospf3CurCfgAreaDefaultMetricType,
       "ospf3CurCfgAreaTranslRole": ospf3CurCfgAreaTranslRole,
       "ospf3CurCfgAreaStatus": ospf3CurCfgAreaStatus,
       "ospf3NewCfgAreaTable": ospf3NewCfgAreaTable,
       "ospf3NewCfgAreaEntry": ospf3NewCfgAreaEntry,
       "ospf3NewCfgAreaIndex": ospf3NewCfgAreaIndex,
       "ospf3NewCfgAreaId": ospf3NewCfgAreaId,
       "ospf3NewCfgAreaStbInterval": ospf3NewCfgAreaStbInterval,
       "ospf3NewCfgAreaType": ospf3NewCfgAreaType,
       "ospf3NewCfgAreaNoSumm": ospf3NewCfgAreaNoSumm,
       "ospf3NewCfgAreaDefaultMetric": ospf3NewCfgAreaDefaultMetric,
       "ospf3NewCfgAreaDefaultMetricType": ospf3NewCfgAreaDefaultMetricType,
       "ospf3NewCfgAreaTranslRole": ospf3NewCfgAreaTranslRole,
       "ospf3NewCfgAreaStatus": ospf3NewCfgAreaStatus,
       "ospf3NewCfgAreaDelete": ospf3NewCfgAreaDelete,
       "ospf3CurCfgHostTable": ospf3CurCfgHostTable,
       "ospf3CurCfgHostEntry": ospf3CurCfgHostEntry,
       "ospf3CurCfgHostIndex": ospf3CurCfgHostIndex,
       "ospf3CurCfgHostIpAddr": ospf3CurCfgHostIpAddr,
       "ospf3CurCfgHostAreaIndex": ospf3CurCfgHostAreaIndex,
       "ospf3CurCfgHostCost": ospf3CurCfgHostCost,
       "ospf3CurCfgHostState": ospf3CurCfgHostState,
       "ospf3NewCfgHostTable": ospf3NewCfgHostTable,
       "ospf3NewCfgHostEntry": ospf3NewCfgHostEntry,
       "ospf3NewCfgHostIndex": ospf3NewCfgHostIndex,
       "ospf3NewCfgHostIpAddr": ospf3NewCfgHostIpAddr,
       "ospf3NewCfgHostAreaIndex": ospf3NewCfgHostAreaIndex,
       "ospf3NewCfgHostCost": ospf3NewCfgHostCost,
       "ospf3NewCfgHostState": ospf3NewCfgHostState,
       "ospf3NewCfgHostDelete": ospf3NewCfgHostDelete,
       "ospf3CurCfgNbrTable": ospf3CurCfgNbrTable,
       "ospf3CurCfgNbrEntry": ospf3CurCfgNbrEntry,
       "ospf3CurCfgNbrIndex": ospf3CurCfgNbrIndex,
       "ospf3CurCfgNbrIpAddr": ospf3CurCfgNbrIpAddr,
       "ospf3CurCfgNbrIntfIndex": ospf3CurCfgNbrIntfIndex,
       "ospf3CurCfgNbrPriority": ospf3CurCfgNbrPriority,
       "ospf3CurCfgNbrState": ospf3CurCfgNbrState,
       "ospf3NewCfgNbrTable": ospf3NewCfgNbrTable,
       "ospf3NewCfgNbrEntry": ospf3NewCfgNbrEntry,
       "ospf3NewCfgNbrIndex": ospf3NewCfgNbrIndex,
       "ospf3NewCfgNbrIpAddr": ospf3NewCfgNbrIpAddr,
       "ospf3NewCfgNbrIntfIndex": ospf3NewCfgNbrIntfIndex,
       "ospf3NewCfgNbrPriority": ospf3NewCfgNbrPriority,
       "ospf3NewCfgNbrState": ospf3NewCfgNbrState,
       "ospf3NewCfgNbrDelete": ospf3NewCfgNbrDelete,
       "ospf3CurCfgIntfTable": ospf3CurCfgIntfTable,
       "ospf3CurCfgIntfEntry": ospf3CurCfgIntfEntry,
       "ospf3CurCfgIntfIndex": ospf3CurCfgIntfIndex,
       "ospf3CurCfgIntfInstId": ospf3CurCfgIntfInstId,
       "ospf3CurCfgIntfArea": ospf3CurCfgIntfArea,
       "ospf3CurCfgIntfCost": ospf3CurCfgIntfCost,
       "ospf3CurCfgIntfPrio": ospf3CurCfgIntfPrio,
       "ospf3CurCfgIntfHello": ospf3CurCfgIntfHello,
       "ospf3CurCfgIntfDead": ospf3CurCfgIntfDead,
       "ospf3CurCfgIntfPoll": ospf3CurCfgIntfPoll,
       "ospf3CurCfgIntfTrans": ospf3CurCfgIntfTrans,
       "ospf3CurCfgIntfRetra": ospf3CurCfgIntfRetra,
       "ospf3CurCfgIntfPassive": ospf3CurCfgIntfPassive,
       "ospf3CurCfgIntfNetworkType": ospf3CurCfgIntfNetworkType,
       "ospf3CurCfgIntfStatus": ospf3CurCfgIntfStatus,
       "ospf3CurCfgIntfAuthSpi": ospf3CurCfgIntfAuthSpi,
       "ospf3CurCfgIntfAuthEnable": ospf3CurCfgIntfAuthEnable,
       "ospf3CurCfgIntfAuthType": ospf3CurCfgIntfAuthType,
       "ospf3CurCfgIntfAuthKey": ospf3CurCfgIntfAuthKey,
       "ospf3CurCfgIntfEncrySpi": ospf3CurCfgIntfEncrySpi,
       "ospf3CurCfgIntfEncryEnable": ospf3CurCfgIntfEncryEnable,
       "ospf3CurCfgIntfEncryType": ospf3CurCfgIntfEncryType,
       "ospf3CurCfgIntfEncryKey": ospf3CurCfgIntfEncryKey,
       "ospf3CurCfgIntfEncryAuthType": ospf3CurCfgIntfEncryAuthType,
       "ospf3CurCfgIntfEncryAuthKey": ospf3CurCfgIntfEncryAuthKey,
       "ospf3CurCfgIntfLsaSupress": ospf3CurCfgIntfLsaSupress,
       "ospf3NewCfgIntfTable": ospf3NewCfgIntfTable,
       "ospf3NewCfgIntfEntry": ospf3NewCfgIntfEntry,
       "ospf3NewCfgIntfIndex": ospf3NewCfgIntfIndex,
       "ospf3NewCfgIntfInstId": ospf3NewCfgIntfInstId,
       "ospf3NewCfgIntfArea": ospf3NewCfgIntfArea,
       "ospf3NewCfgIntfCost": ospf3NewCfgIntfCost,
       "ospf3NewCfgIntfPrio": ospf3NewCfgIntfPrio,
       "ospf3NewCfgIntfHello": ospf3NewCfgIntfHello,
       "ospf3NewCfgIntfDead": ospf3NewCfgIntfDead,
       "ospf3NewCfgIntfPoll": ospf3NewCfgIntfPoll,
       "ospf3NewCfgIntfTrans": ospf3NewCfgIntfTrans,
       "ospf3NewCfgIntfRetra": ospf3NewCfgIntfRetra,
       "ospf3NewCfgIntfPassive": ospf3NewCfgIntfPassive,
       "ospf3NewCfgIntfNetworkType": ospf3NewCfgIntfNetworkType,
       "ospf3NewCfgIntfStatus": ospf3NewCfgIntfStatus,
       "ospf3NewCfgIntfDelete": ospf3NewCfgIntfDelete,
       "ospf3NewCfgIntfAuthSpi": ospf3NewCfgIntfAuthSpi,
       "ospf3NewCfgIntfAuthEnable": ospf3NewCfgIntfAuthEnable,
       "ospf3NewCfgIntfAuthType": ospf3NewCfgIntfAuthType,
       "ospf3NewCfgIntfAuthKey": ospf3NewCfgIntfAuthKey,
       "ospf3NewCfgIntfAuthReset": ospf3NewCfgIntfAuthReset,
       "ospf3NewCfgIntfEncrySpi": ospf3NewCfgIntfEncrySpi,
       "ospf3NewCfgIntfEncryEnable": ospf3NewCfgIntfEncryEnable,
       "ospf3NewCfgIntfEncryType": ospf3NewCfgIntfEncryType,
       "ospf3NewCfgIntfEncryKey": ospf3NewCfgIntfEncryKey,
       "ospf3NewCfgIntfEncryAuthType": ospf3NewCfgIntfEncryAuthType,
       "ospf3NewCfgIntfEncryAuthKey": ospf3NewCfgIntfEncryAuthKey,
       "ospf3NewCfgIntfEncryReset": ospf3NewCfgIntfEncryReset,
       "ospf3NewCfgIntfLsaSupress": ospf3NewCfgIntfLsaSupress,
       "ospf3CurCfgVirtIntfTable": ospf3CurCfgVirtIntfTable,
       "ospf3CurCfgVirtIntfEntry": ospf3CurCfgVirtIntfEntry,
       "ospf3CurCfgVirtIntfIndex": ospf3CurCfgVirtIntfIndex,
       "ospf3CurCfgVirtIntfAreaId": ospf3CurCfgVirtIntfAreaId,
       "ospf3CurCfgVirtIntfNbr": ospf3CurCfgVirtIntfNbr,
       "ospf3CurCfgVirtIntfHello": ospf3CurCfgVirtIntfHello,
       "ospf3CurCfgVirtIntfDead": ospf3CurCfgVirtIntfDead,
       "ospf3CurCfgVirtIntfTrans": ospf3CurCfgVirtIntfTrans,
       "ospf3CurCfgVirtIntfRetra": ospf3CurCfgVirtIntfRetra,
       "ospf3CurCfgVirtIntfStatus": ospf3CurCfgVirtIntfStatus,
       "ospf3NewCfgVirtIntfTable": ospf3NewCfgVirtIntfTable,
       "ospf3NewCfgVirtIntfEntry": ospf3NewCfgVirtIntfEntry,
       "ospf3NewCfgVirtIntfIndex": ospf3NewCfgVirtIntfIndex,
       "ospf3NewCfgVirtIntfAreaId": ospf3NewCfgVirtIntfAreaId,
       "ospf3NewCfgVirtIntfNbr": ospf3NewCfgVirtIntfNbr,
       "ospf3NewCfgVirtIntfHello": ospf3NewCfgVirtIntfHello,
       "ospf3NewCfgVirtIntfDead": ospf3NewCfgVirtIntfDead,
       "ospf3NewCfgVirtIntfTrans": ospf3NewCfgVirtIntfTrans,
       "ospf3NewCfgVirtIntfRetra": ospf3NewCfgVirtIntfRetra,
       "ospf3NewCfgVirtIntfStatus": ospf3NewCfgVirtIntfStatus,
       "ospf3NewCfgVirtIntfDelete": ospf3NewCfgVirtIntfDelete,
       "ospf3CurCfgRangeTable": ospf3CurCfgRangeTable,
       "ospf3CurCfgRangeEntry": ospf3CurCfgRangeEntry,
       "ospf3CurCfgRangeIndex": ospf3CurCfgRangeIndex,
       "ospf3CurCfgRangeAddr": ospf3CurCfgRangeAddr,
       "ospf3CurCfgRangePrefixLen": ospf3CurCfgRangePrefixLen,
       "ospf3CurCfgRangeAreaIndex": ospf3CurCfgRangeAreaIndex,
       "ospf3CurCfgRangeHideState": ospf3CurCfgRangeHideState,
       "ospf3CurCfgRangeLsaType": ospf3CurCfgRangeLsaType,
       "ospf3CurCfgRangeRouteTag": ospf3CurCfgRangeRouteTag,
       "ospf3CurCfgRangeState": ospf3CurCfgRangeState,
       "ospf3NewCfgRangeTable": ospf3NewCfgRangeTable,
       "ospf3NewCfgRangeEntry": ospf3NewCfgRangeEntry,
       "ospf3NewCfgRangeIndex": ospf3NewCfgRangeIndex,
       "ospf3NewCfgRangeAddr": ospf3NewCfgRangeAddr,
       "ospf3NewCfgRangePrefixLen": ospf3NewCfgRangePrefixLen,
       "ospf3NewCfgRangeAreaIndex": ospf3NewCfgRangeAreaIndex,
       "ospf3NewCfgRangeHideState": ospf3NewCfgRangeHideState,
       "ospf3NewCfgRangeLsaType": ospf3NewCfgRangeLsaType,
       "ospf3NewCfgRangeRouteTag": ospf3NewCfgRangeRouteTag,
       "ospf3NewCfgRangeState": ospf3NewCfgRangeState,
       "ospf3NewCfgRangeDelete": ospf3NewCfgRangeDelete,
       "ospf3CurCfgExtRangeTable": ospf3CurCfgExtRangeTable,
       "ospf3CurCfgExtRangeEntry": ospf3CurCfgExtRangeEntry,
       "ospf3CurCfgExtRangeIndex": ospf3CurCfgExtRangeIndex,
       "ospf3CurCfgExtRangeAddr": ospf3CurCfgExtRangeAddr,
       "ospf3CurCfgExtRangePrefixLen": ospf3CurCfgExtRangePrefixLen,
       "ospf3CurCfgExtRangeAreaIndex": ospf3CurCfgExtRangeAreaIndex,
       "ospf3CurCfgExtRangeTranslation": ospf3CurCfgExtRangeTranslation,
       "ospf3CurCfgExtRangeAggrEffect": ospf3CurCfgExtRangeAggrEffect,
       "ospf3CurCfgExtRangeState": ospf3CurCfgExtRangeState,
       "ospf3NewCfgExtRangeTable": ospf3NewCfgExtRangeTable,
       "ospf3NewCfgExtRangeEntry": ospf3NewCfgExtRangeEntry,
       "ospf3NewCfgExtRangeIndex": ospf3NewCfgExtRangeIndex,
       "ospf3NewCfgExtRangeAddr": ospf3NewCfgExtRangeAddr,
       "ospf3NewCfgExtRangePrefixLen": ospf3NewCfgExtRangePrefixLen,
       "ospf3NewCfgExtRangeAreaIndex": ospf3NewCfgExtRangeAreaIndex,
       "ospf3NewCfgExtRangeTranslation": ospf3NewCfgExtRangeTranslation,
       "ospf3NewCfgExtRangeAggrEffect": ospf3NewCfgExtRangeAggrEffect,
       "ospf3NewCfgExtRangeState": ospf3NewCfgExtRangeState,
       "ospf3NewCfgExtRangeDelete": ospf3NewCfgExtRangeDelete,
       "ospf3CurCfgRedistTable": ospf3CurCfgRedistTable,
       "ospf3CurCfgRedistEntry": ospf3CurCfgRedistEntry,
       "ospf3CurCfgRedistIndex": ospf3CurCfgRedistIndex,
       "ospf3CurCfgRedistAddr": ospf3CurCfgRedistAddr,
       "ospf3CurCfgRedistPrefixLen": ospf3CurCfgRedistPrefixLen,
       "ospf3CurCfgRedistMetric": ospf3CurCfgRedistMetric,
       "ospf3CurCfgRedistMetricType": ospf3CurCfgRedistMetricType,
       "ospf3CurCfgRedistRouteTag": ospf3CurCfgRedistRouteTag,
       "ospf3CurCfgRedistRouteTagTypeManual": ospf3CurCfgRedistRouteTagTypeManual,
       "ospf3CurCfgRedistState": ospf3CurCfgRedistState,
       "ospf3NewCfgRedistTable": ospf3NewCfgRedistTable,
       "ospf3NewCfgRedistEntry": ospf3NewCfgRedistEntry,
       "ospf3NewCfgRedistIndex": ospf3NewCfgRedistIndex,
       "ospf3NewCfgRedistAddr": ospf3NewCfgRedistAddr,
       "ospf3NewCfgRedistPrefixLen": ospf3NewCfgRedistPrefixLen,
       "ospf3NewCfgRedistMetric": ospf3NewCfgRedistMetric,
       "ospf3NewCfgRedistMetricType": ospf3NewCfgRedistMetricType,
       "ospf3NewCfgRedistRouteTag": ospf3NewCfgRedistRouteTag,
       "ospf3NewCfgRedistRouteTagTypeManual": ospf3NewCfgRedistRouteTagTypeManual,
       "ospf3NewCfgRedistState": ospf3NewCfgRedistState,
       "ospf3NewCfgRedistDelete": ospf3NewCfgRedistDelete,
       "ospf3RouteRedistribution": ospf3RouteRedistribution,
       "ospf3RedistributeConnected": ospf3RedistributeConnected,
       "ospf3CurCfgConnectedMetric": ospf3CurCfgConnectedMetric,
       "ospf3NewCfgConnectedMetric": ospf3NewCfgConnectedMetric,
       "ospf3CurCfgConnectedMetricType": ospf3CurCfgConnectedMetricType,
       "ospf3NewCfgConnectedMetricType": ospf3NewCfgConnectedMetricType,
       "ospf3CurCfgConnectedRouteTag": ospf3CurCfgConnectedRouteTag,
       "ospf3NewCfgConnectedRouteTag": ospf3NewCfgConnectedRouteTag,
       "ospf3CurCfgConnectedRouteTagTypeManual": ospf3CurCfgConnectedRouteTagTypeManual,
       "ospf3NewCfgConnectedRouteTagTypeManual": ospf3NewCfgConnectedRouteTagTypeManual,
       "ospf3RedistributeStatic": ospf3RedistributeStatic,
       "ospf3CurCfgStaticMetric": ospf3CurCfgStaticMetric,
       "ospf3NewCfgStaticMetric": ospf3NewCfgStaticMetric,
       "ospf3CurCfgStaticMetricType": ospf3CurCfgStaticMetricType,
       "ospf3NewCfgStaticMetricType": ospf3NewCfgStaticMetricType,
       "ospf3CurCfgStaticRouteTag": ospf3CurCfgStaticRouteTag,
       "ospf3NewCfgStaticRouteTag": ospf3NewCfgStaticRouteTag,
       "ospf3CurCfgStaticRouteTagTypeManual": ospf3CurCfgStaticRouteTagTypeManual,
       "ospf3NewCfgStaticRouteTagTypeManual": ospf3NewCfgStaticRouteTagTypeManual,
       "pptCfg": pptCfg,
       "pptTableMaxSize": pptTableMaxSize,
       "pptCurCfgTable": pptCurCfgTable,
       "pptCurCfgEntry": pptCurCfgEntry,
       "pptCurCfgIndx": pptCurCfgIndx,
       "pptCurCfgPrefix": pptCurCfgPrefix,
       "pptCurCfgPrefixLen": pptCurCfgPrefixLen,
       "pptCurCfgPrecedence": pptCurCfgPrecedence,
       "pptCurCfgLabel": pptCurCfgLabel,
       "pptNewCfgTable": pptNewCfgTable,
       "pptNewCfgEntry": pptNewCfgEntry,
       "pptNewCfgIndx": pptNewCfgIndx,
       "pptNewCfgPrefix": pptNewCfgPrefix,
       "pptNewCfgPrefixLen": pptNewCfgPrefixLen,
       "pptNewCfgPrecedence": pptNewCfgPrecedence,
       "pptNewCfgLabel": pptNewCfgLabel,
       "pptNewCfgAction": pptNewCfgAction,
       "ipv6pmtuCfg": ipv6pmtuCfg,
       "ipv6PmtuCurTimeout": ipv6PmtuCurTimeout,
       "ipv6PmtuNewTimeout": ipv6PmtuNewTimeout,
       "ipv6PmtuEntriesClearAll": ipv6PmtuEntriesClearAll,
       "floodingCfg": floodingCfg,
       "vlanFloodCurCfgTable": vlanFloodCurCfgTable,
       "vlanFloodCurCfgTableEntry": vlanFloodCurCfgTableEntry,
       "vlanFloodCurCfgVlanId": vlanFloodCurCfgVlanId,
       "vlanFloodCurCfgFlood": vlanFloodCurCfgFlood,
       "vlanFloodCurCfgCpu": vlanFloodCurCfgCpu,
       "vlanFloodCurCfgOptFlood": vlanFloodCurCfgOptFlood,
       "vlanFloodNewCfgTable": vlanFloodNewCfgTable,
       "vlanFloodNewCfgTableEntry": vlanFloodNewCfgTableEntry,
       "vlanFloodNewCfgVlanId": vlanFloodNewCfgVlanId,
       "vlanFloodNewCfgFlood": vlanFloodNewCfgFlood,
       "vlanFloodNewCfgCpu": vlanFloodNewCfgCpu,
       "vlanFloodNewCfgOptFlood": vlanFloodNewCfgOptFlood,
       "mldCfg": mldCfg,
       "mldCurCfgState": mldCurCfgState,
       "mldNewCfgState": mldNewCfgState,
       "mldCurInterfaceTable": mldCurInterfaceTable,
       "mldCurInterfaceEntry": mldCurInterfaceEntry,
       "mldCurInterfaceIfIndex": mldCurInterfaceIfIndex,
       "mldCurInterfaceQueryInterval": mldCurInterfaceQueryInterval,
       "mldCurInterfaceVersion": mldCurInterfaceVersion,
       "mldCurInterfaceQueryMaxResponseIntvl": mldCurInterfaceQueryMaxResponseIntvl,
       "mldCurInterfaceRobustness": mldCurInterfaceRobustness,
       "mldCurInterfaceLastListenQueryIntvl": mldCurInterfaceLastListenQueryIntvl,
       "mldCurInterfaceDMrtrEna": mldCurInterfaceDMrtrEna,
       "mldCurInterfaceState": mldCurInterfaceState,
       "mldNewInterfaceTable": mldNewInterfaceTable,
       "mldNewInterfaceEntry": mldNewInterfaceEntry,
       "mldNewInterfaceIfIndex": mldNewInterfaceIfIndex,
       "mldNewInterfaceQueryInterval": mldNewInterfaceQueryInterval,
       "mldNewInterfaceVersion": mldNewInterfaceVersion,
       "mldNewInterfaceQueryMaxResponseIntvl": mldNewInterfaceQueryMaxResponseIntvl,
       "mldNewInterfaceRobustness": mldNewInterfaceRobustness,
       "mldNewInterfaceLastListenQueryIntvl": mldNewInterfaceLastListenQueryIntvl,
       "mldNewInterfaceDMrtrEna": mldNewInterfaceDMrtrEna,
       "mldNewInterfaceState": mldNewInterfaceState,
       "mldNewInterfaceDefault": mldNewInterfaceDefault,
       "mldDefaultCfgState": mldDefaultCfgState,
       "ndprefixCfg": ndprefixCfg,
       "ndprefixTableMaxSize": ndprefixTableMaxSize,
       "ndprefixCurCfgTable": ndprefixCurCfgTable,
       "ndprefixCurCfgEntry": ndprefixCurCfgEntry,
       "ndprefixCurCfgIndx": ndprefixCurCfgIndx,
       "ndprefixCurCfgPrefix": ndprefixCurCfgPrefix,
       "ndprefixCurCfgPrefixLen": ndprefixCurCfgPrefixLen,
       "ndprefixCurCfgInterfaceIndex": ndprefixCurCfgInterfaceIndex,
       "ndprefixCurCfgProfileIndex": ndprefixCurCfgProfileIndex,
       "ndprefixCurCfgValidLifetime": ndprefixCurCfgValidLifetime,
       "ndprefixCurCfgValidLifetimeFlag": ndprefixCurCfgValidLifetimeFlag,
       "ndprefixCurCfgPreferredLifetime": ndprefixCurCfgPreferredLifetime,
       "ndprefixCurCfgPreferredLifetimeFlag": ndprefixCurCfgPreferredLifetimeFlag,
       "ndprefixCurCfgOnlinkFlag": ndprefixCurCfgOnlinkFlag,
       "ndprefixCurCfgAutonomousFlag": ndprefixCurCfgAutonomousFlag,
       "ndprefixCurCfgState": ndprefixCurCfgState,
       "ndprefixNewCfgTable": ndprefixNewCfgTable,
       "ndprefixNewCfgEntry": ndprefixNewCfgEntry,
       "ndprefixNewCfgIndx": ndprefixNewCfgIndx,
       "ndprefixNewCfgPrefix": ndprefixNewCfgPrefix,
       "ndprefixNewCfgPrefixLen": ndprefixNewCfgPrefixLen,
       "ndprefixNewCfgInterfaceIndex": ndprefixNewCfgInterfaceIndex,
       "ndprefixNewCfgProfileIndex": ndprefixNewCfgProfileIndex,
       "ndprefixNewCfgValidLifetime": ndprefixNewCfgValidLifetime,
       "ndprefixNewCfgValidLifetimeFlag": ndprefixNewCfgValidLifetimeFlag,
       "ndprefixNewCfgPreferredLifetime": ndprefixNewCfgPreferredLifetime,
       "ndprefixNewCfgPreferredLifetimeFlag": ndprefixNewCfgPreferredLifetimeFlag,
       "ndprefixNewCfgOnlinkFlag": ndprefixNewCfgOnlinkFlag,
       "ndprefixNewCfgAutonomousFlag": ndprefixNewCfgAutonomousFlag,
       "ndprefixNewCfgState": ndprefixNewCfgState,
       "ndprefixNewCfgAction": ndprefixNewCfgAction,
       "ipsecCfg": ipsecCfg,
       "ikeGroup": ikeGroup,
       "ikeCurCfgProposal": ikeCurCfgProposal,
       "ikeCurCfgPropCipher": ikeCurCfgPropCipher,
       "ikeCurCfgPropAuth": ikeCurCfgPropAuth,
       "ikeCurCfgPropGroup": ikeCurCfgPropGroup,
       "ikeNewCfgProposal": ikeNewCfgProposal,
       "ikeNewCfgPropCipher": ikeNewCfgPropCipher,
       "ikeNewCfgPropAuth": ikeNewCfgPropAuth,
       "ikeNewCfgPropGroup": ikeNewCfgPropGroup,
       "ikeCurCfgPsk": ikeCurCfgPsk,
       "ikeCurCfgPskLocalKey": ikeCurCfgPskLocalKey,
       "ikeCurCfgPskRemoteTable": ikeCurCfgPskRemoteTable,
       "ikeCurCfgPskRemoteEntry": ikeCurCfgPskRemoteEntry,
       "ikeCurCfgPskRemoteIndex": ikeCurCfgPskRemoteIndex,
       "ikeCurCfgPskRemoteAddr": ikeCurCfgPskRemoteAddr,
       "ikeCurCfgPskRemoteKey": ikeCurCfgPskRemoteKey,
       "ikeCurCfgPskRemoteDelete": ikeCurCfgPskRemoteDelete,
       "ikeNewCfgPsk": ikeNewCfgPsk,
       "ikeNewCfgPskLocalKey": ikeNewCfgPskLocalKey,
       "ikeNewCfgPskRemoteTable": ikeNewCfgPskRemoteTable,
       "ikeNewCfgPskRemoteEntry": ikeNewCfgPskRemoteEntry,
       "ikeNewCfgPskRemoteIndex": ikeNewCfgPskRemoteIndex,
       "ikeNewCfgPskRemoteAddr": ikeNewCfgPskRemoteAddr,
       "ikeNewCfgPskRemoteKey": ikeNewCfgPskRemoteKey,
       "ikeNewCfgPskRemoteDelete": ikeNewCfgPskRemoteDelete,
       "ikeCurCfgIdentity": ikeCurCfgIdentity,
       "ikeCurCfgIdType": ikeCurCfgIdType,
       "ikeCurCfgIdData": ikeCurCfgIdData,
       "ikeNewCfgIdentity": ikeNewCfgIdentity,
       "ikeNewCfgIdType": ikeNewCfgIdType,
       "ikeNewCfgIdData": ikeNewCfgIdData,
       "ikeCurCfgTxTimeout": ikeCurCfgTxTimeout,
       "ikeNewCfgTxTimeout": ikeNewCfgTxTimeout,
       "ikeCurCfgCookie": ikeCurCfgCookie,
       "ikeNewCfgCookie": ikeNewCfgCookie,
       "ipsecGroup": ipsecGroup,
       "ipsecCurCfgState": ipsecCurCfgState,
       "ipsecNewCfgState": ipsecNewCfgState,
       "ipsecCurCfgTxformTable": ipsecCurCfgTxformTable,
       "ipsecCurCfgTxformEntry": ipsecCurCfgTxformEntry,
       "ipsecCurCfgTxformIndex": ipsecCurCfgTxformIndex,
       "ipsecCurCfgTxformAuth": ipsecCurCfgTxformAuth,
       "ipsecCurCfgTxformCipher": ipsecCurCfgTxformCipher,
       "ipsecCurCfgTxformIntegrity": ipsecCurCfgTxformIntegrity,
       "ipsecCurCfgTxformMode": ipsecCurCfgTxformMode,
       "ipsecCurCfgTxformDelete": ipsecCurCfgTxformDelete,
       "ipsecNewCfgTxformTable": ipsecNewCfgTxformTable,
       "ipsecNewCfgTxformEntry": ipsecNewCfgTxformEntry,
       "ipsecNewCfgTxformIndex": ipsecNewCfgTxformIndex,
       "ipsecNewCfgTxformAuth": ipsecNewCfgTxformAuth,
       "ipsecNewCfgTxformCipher": ipsecNewCfgTxformCipher,
       "ipsecNewCfgTxformIntegrity": ipsecNewCfgTxformIntegrity,
       "ipsecNewCfgTxformMode": ipsecNewCfgTxformMode,
       "ipsecNewCfgTxformDelete": ipsecNewCfgTxformDelete,
       "ipsecCurCfgSelectorTable": ipsecCurCfgSelectorTable,
       "ipsecCurCfgSelectorEntry": ipsecCurCfgSelectorEntry,
       "ipsecCurCfgSelectorIndex": ipsecCurCfgSelectorIndex,
       "ipsecCurCfgSelectorAction": ipsecCurCfgSelectorAction,
       "ipsecCurCfgSelectorProto": ipsecCurCfgSelectorProto,
       "ipsecCurCfgSelectorIcmpType": ipsecCurCfgSelectorIcmpType,
       "ipsecCurCfgSelectorDst": ipsecCurCfgSelectorDst,
       "ipsecCurCfgSelectorDstPrefix": ipsecCurCfgSelectorDstPrefix,
       "ipsecCurCfgSelectorSrc": ipsecCurCfgSelectorSrc,
       "ipsecCurCfgSelectorDelete": ipsecCurCfgSelectorDelete,
       "ipsecNewCfgSelectorTable": ipsecNewCfgSelectorTable,
       "ipsecNewCfgSelectorEntry": ipsecNewCfgSelectorEntry,
       "ipsecNewCfgSelectorIndex": ipsecNewCfgSelectorIndex,
       "ipsecNewCfgSelectorAction": ipsecNewCfgSelectorAction,
       "ipsecNewCfgSelectorProto": ipsecNewCfgSelectorProto,
       "ipsecNewCfgSelectorIcmpType": ipsecNewCfgSelectorIcmpType,
       "ipsecNewCfgSelectorDst": ipsecNewCfgSelectorDst,
       "ipsecNewCfgSelectorDstPrefix": ipsecNewCfgSelectorDstPrefix,
       "ipsecNewCfgSelectorSrc": ipsecNewCfgSelectorSrc,
       "ipsecNewCfgSelectorDelete": ipsecNewCfgSelectorDelete,
       "ipsecCurCfgDynamicPolicyTable": ipsecCurCfgDynamicPolicyTable,
       "ipsecCurCfgDynamicPolicyEntry": ipsecCurCfgDynamicPolicyEntry,
       "ipsecCurCfgDynamicPolicyIndex": ipsecCurCfgDynamicPolicyIndex,
       "ipsecCurCfgDynamicPolicyPeer": ipsecCurCfgDynamicPolicyPeer,
       "ipsecCurCfgDynamicPolicySelector": ipsecCurCfgDynamicPolicySelector,
       "ipsecCurCfgDynamicPolicyTxform": ipsecCurCfgDynamicPolicyTxform,
       "ipsecCurCfgDynamicPolicyLifetime": ipsecCurCfgDynamicPolicyLifetime,
       "ipsecCurCfgDynamicPolicyPfs": ipsecCurCfgDynamicPolicyPfs,
       "ipsecCurCfgDynamicPolicyDelete": ipsecCurCfgDynamicPolicyDelete,
       "ipsecNewCfgDynamicPolicyTable": ipsecNewCfgDynamicPolicyTable,
       "ipsecNewCfgDynamicPolicyEntry": ipsecNewCfgDynamicPolicyEntry,
       "ipsecNewCfgDynamicPolicyIndex": ipsecNewCfgDynamicPolicyIndex,
       "ipsecNewCfgDynamicPolicyPeer": ipsecNewCfgDynamicPolicyPeer,
       "ipsecNewCfgDynamicPolicySelector": ipsecNewCfgDynamicPolicySelector,
       "ipsecNewCfgDynamicPolicyTxform": ipsecNewCfgDynamicPolicyTxform,
       "ipsecNewCfgDynamicPolicyLifetime": ipsecNewCfgDynamicPolicyLifetime,
       "ipsecNewCfgDynamicPolicyPfs": ipsecNewCfgDynamicPolicyPfs,
       "ipsecNewCfgDynamicPolicyDelete": ipsecNewCfgDynamicPolicyDelete,
       "ipsecCurCfgManualPolicyTable": ipsecCurCfgManualPolicyTable,
       "ipsecCurCfgManualPolicyEntry": ipsecCurCfgManualPolicyEntry,
       "ipsecCurCfgManualPolicyIndex": ipsecCurCfgManualPolicyIndex,
       "ipsecCurCfgManualPolicyPeer": ipsecCurCfgManualPolicyPeer,
       "ipsecCurCfgManualPolicySelector": ipsecCurCfgManualPolicySelector,
       "ipsecCurCfgManualPolicyTxform": ipsecCurCfgManualPolicyTxform,
       "ipsecCurCfgManualPolicyInAhKey": ipsecCurCfgManualPolicyInAhKey,
       "ipsecCurCfgManualPolicyInAhSpi": ipsecCurCfgManualPolicyInAhSpi,
       "ipsecCurCfgManualPolicyOutAhKey": ipsecCurCfgManualPolicyOutAhKey,
       "ipsecCurCfgManualPolicyOutAhSpi": ipsecCurCfgManualPolicyOutAhSpi,
       "ipsecCurCfgManualPolicyInEspEncKey": ipsecCurCfgManualPolicyInEspEncKey,
       "ipsecCurCfgManualPolicyInEspAuthKey": ipsecCurCfgManualPolicyInEspAuthKey,
       "ipsecCurCfgManualPolicyInEspSpi": ipsecCurCfgManualPolicyInEspSpi,
       "ipsecCurCfgManualPolicyOutEspEncKey": ipsecCurCfgManualPolicyOutEspEncKey,
       "ipsecCurCfgManualPolicyOutEspAuthKey": ipsecCurCfgManualPolicyOutEspAuthKey,
       "ipsecCurCfgManualPolicyOutEspSpi": ipsecCurCfgManualPolicyOutEspSpi,
       "ipsecCurCfgManualPolicyDelete": ipsecCurCfgManualPolicyDelete,
       "ipsecNewCfgManualPolicyTable": ipsecNewCfgManualPolicyTable,
       "ipsecNewCfgManualPolicyEntry": ipsecNewCfgManualPolicyEntry,
       "ipsecNewCfgManualPolicyIndex": ipsecNewCfgManualPolicyIndex,
       "ipsecNewCfgManualPolicyPeer": ipsecNewCfgManualPolicyPeer,
       "ipsecNewCfgManualPolicySelector": ipsecNewCfgManualPolicySelector,
       "ipsecNewCfgManualPolicyTxform": ipsecNewCfgManualPolicyTxform,
       "ipsecNewCfgManualPolicyInAhKey": ipsecNewCfgManualPolicyInAhKey,
       "ipsecNewCfgManualPolicyInAhSpi": ipsecNewCfgManualPolicyInAhSpi,
       "ipsecNewCfgManualPolicyOutAhKey": ipsecNewCfgManualPolicyOutAhKey,
       "ipsecNewCfgManualPolicyOutAhSpi": ipsecNewCfgManualPolicyOutAhSpi,
       "ipsecNewCfgManualPolicyInEspEncKey": ipsecNewCfgManualPolicyInEspEncKey,
       "ipsecNewCfgManualPolicyInEspAuthKey": ipsecNewCfgManualPolicyInEspAuthKey,
       "ipsecNewCfgManualPolicyInEspSpi": ipsecNewCfgManualPolicyInEspSpi,
       "ipsecNewCfgManualPolicyOutEspEncKey": ipsecNewCfgManualPolicyOutEspEncKey,
       "ipsecNewCfgManualPolicyOutEspAuthKey": ipsecNewCfgManualPolicyOutEspAuthKey,
       "ipsecNewCfgManualPolicyOutEspSpi": ipsecNewCfgManualPolicyOutEspSpi,
       "ipsecNewCfgManualPolicyDelete": ipsecNewCfgManualPolicyDelete,
       "ipsecCurCfgIfTable": ipsecCurCfgIfTable,
       "ipsecCurCfgIfEntry": ipsecCurCfgIfEntry,
       "ipsecCurCfgIfIndex": ipsecCurCfgIfIndex,
       "ipsecCurCfgIfDynamicPolicyBmap": ipsecCurCfgIfDynamicPolicyBmap,
       "ipsecCurCfgIfManualPolicyBmap": ipsecCurCfgIfManualPolicyBmap,
       "ipsecCurCfgIfDelete": ipsecCurCfgIfDelete,
       "ipsecNewCfgIfTable": ipsecNewCfgIfTable,
       "ipsecNewCfgIfEntry": ipsecNewCfgIfEntry,
       "ipsecNewCfgIfIndex": ipsecNewCfgIfIndex,
       "ipsecNewCfgIfDynamicPolicyBmap": ipsecNewCfgIfDynamicPolicyBmap,
       "ipsecNewCfgIfAddDynamicPolicy": ipsecNewCfgIfAddDynamicPolicy,
       "ipsecNewCfgIfDelDynamicPolicy": ipsecNewCfgIfDelDynamicPolicy,
       "ipsecNewCfgIfManualPolicyBmap": ipsecNewCfgIfManualPolicyBmap,
       "ipsecNewCfgIfAddManualPolicy": ipsecNewCfgIfAddManualPolicy,
       "ipsecNewCfgIfDelManualPolicy": ipsecNewCfgIfDelManualPolicy,
       "ipsecNewCfgIfDelete": ipsecNewCfgIfDelete,
       "dhcpsnpCfg": dhcpsnpCfg,
       "dhcpSnoopingCurCfgOnState": dhcpSnoopingCurCfgOnState,
       "dhcpSnoopingNewCfgOnState": dhcpSnoopingNewCfgOnState,
       "dhcpSnoopingCurCfgOption82OnState": dhcpSnoopingCurCfgOption82OnState,
       "dhcpSnoopingNewCfgOption82OnState": dhcpSnoopingNewCfgOption82OnState,
       "dhcpSnoopingCurCfgPortTable": dhcpSnoopingCurCfgPortTable,
       "dhcpSnoopingCurCfgPortTableEntry": dhcpSnoopingCurCfgPortTableEntry,
       "dhcpSnoopingCurCfgPortId": dhcpSnoopingCurCfgPortId,
       "dhcpSnoopingCurCfgPortTrusted": dhcpSnoopingCurCfgPortTrusted,
       "dhcpSnoopingCurCfgPortRateLimit": dhcpSnoopingCurCfgPortRateLimit,
       "dhcpSnoopingNewCfgPortTable": dhcpSnoopingNewCfgPortTable,
       "dhcpSnoopingNewCfgPortTableEntry": dhcpSnoopingNewCfgPortTableEntry,
       "dhcpSnoopingNewCfgportId": dhcpSnoopingNewCfgportId,
       "dhcpSnoopingNewCfgportTrusted": dhcpSnoopingNewCfgportTrusted,
       "dhcpSnoopingNewCfgportRateLimit": dhcpSnoopingNewCfgportRateLimit,
       "dhcpSnoopingCurCfgVlanTable": dhcpSnoopingCurCfgVlanTable,
       "dhcpSnoopingCurCfgVlanTableEntry": dhcpSnoopingCurCfgVlanTableEntry,
       "dhcpSnoopingCurCfgVlanId": dhcpSnoopingCurCfgVlanId,
       "dhcpSnoopingCurCfgVlanOnState": dhcpSnoopingCurCfgVlanOnState,
       "dhcpSnoopingNewCfgVlanTable": dhcpSnoopingNewCfgVlanTable,
       "dhcpSnoopingNewCfgVlanTableEntry": dhcpSnoopingNewCfgVlanTableEntry,
       "dhcpSnoopingNewCfgVlanId": dhcpSnoopingNewCfgVlanId,
       "dhcpSnoopingNewCfgVlanOnState": dhcpSnoopingNewCfgVlanOnState,
       "layer3Stats": layer3Stats,
       "arpStats": arpStats,
       "arpStatEntries": arpStatEntries,
       "arpStatHighWater": arpStatHighWater,
       "arpStatMaxEntries": arpStatMaxEntries,
       "routeStats": routeStats,
       "routeStatEntries": routeStatEntries,
       "routeStatHighWater": routeStatHighWater,
       "routeStatStaticEntries": routeStatStaticEntries,
       "routeStatRipEntries": routeStatRipEntries,
       "routeStatOspfEntries": routeStatOspfEntries,
       "routeStatBgpEntries": routeStatBgpEntries,
       "routeStatMaxEntries": routeStatMaxEntries,
       "routeStatEcmpMaxEntries": routeStatEcmpMaxEntries,
       "routeStatEcmpMaxStaticEntries": routeStatEcmpMaxStaticEntries,
       "routeStatEcmpPathsEntries": routeStatEcmpPathsEntries,
       "dnsStats": dnsStats,
       "dnsStatInGoodDnsRequests": dnsStatInGoodDnsRequests,
       "dnsStatInBadDnsRequests": dnsStatInBadDnsRequests,
       "dnsStatOutDnsRequests": dnsStatOutDnsRequests,
       "vrrpStats": vrrpStats,
       "vrrpStatInAdvers": vrrpStatInAdvers,
       "vrrpStatOutAdvers": vrrpStatOutAdvers,
       "vrrpStatBadAdvers": vrrpStatBadAdvers,
       "vrrpStatBadVersion": vrrpStatBadVersion,
       "vrrpStatBadAddress": vrrpStatBadAddress,
       "vrrpStatBadPassword": vrrpStatBadPassword,
       "vrrpStatBadVrid": vrrpStatBadVrid,
       "vrrpStatBadData": vrrpStatBadData,
       "vrrpStatBadInterval": vrrpStatBadInterval,
       "vrrpStatOutGratuitousARPs": vrrpStatOutGratuitousARPs,
       "ospfStats": ospfStats,
       "ospfGeneralStats": ospfGeneralStats,
       "ospfCumRxTxStats": ospfCumRxTxStats,
       "ospfCumRxPkts": ospfCumRxPkts,
       "ospfCumTxPkts": ospfCumTxPkts,
       "ospfCumRxHello": ospfCumRxHello,
       "ospfCumTxHello": ospfCumTxHello,
       "ospfCumRxDatabase": ospfCumRxDatabase,
       "ospfCumTxDatabase": ospfCumTxDatabase,
       "ospfCumRxlsReqs": ospfCumRxlsReqs,
       "ospfCumTxlsReqs": ospfCumTxlsReqs,
       "ospfCumRxlsAcks": ospfCumRxlsAcks,
       "ospfCumTxlsAcks": ospfCumTxlsAcks,
       "ospfCumRxlsUpdates": ospfCumRxlsUpdates,
       "ospfCumTxlsUpdates": ospfCumTxlsUpdates,
       "ospfCumNbrChangeStats": ospfCumNbrChangeStats,
       "ospfCumNbrhello": ospfCumNbrhello,
       "ospfCumNbrStart": ospfCumNbrStart,
       "ospfCumNbrAdjointOk": ospfCumNbrAdjointOk,
       "ospfCumNbrNegotiationDone": ospfCumNbrNegotiationDone,
       "ospfCumNbrExchangeDone": ospfCumNbrExchangeDone,
       "ospfCumNbrBadRequests": ospfCumNbrBadRequests,
       "ospfCumNbrBadSequence": ospfCumNbrBadSequence,
       "ospfCumNbrLoadingDone": ospfCumNbrLoadingDone,
       "ospfCumNbrN1way": ospfCumNbrN1way,
       "ospfCumNbrRstAd": ospfCumNbrRstAd,
       "ospfCumNbrDown": ospfCumNbrDown,
       "ospfCumNbrN2way": ospfCumNbrN2way,
       "ospfCumIntfChangeStats": ospfCumIntfChangeStats,
       "ospfCumIntfHello": ospfCumIntfHello,
       "ospfCumIntfDown": ospfCumIntfDown,
       "ospfCumIntfLoop": ospfCumIntfLoop,
       "ospfCumIntfUnloop": ospfCumIntfUnloop,
       "ospfCumIntfWaitTimer": ospfCumIntfWaitTimer,
       "ospfCumIntfBackup": ospfCumIntfBackup,
       "ospfCumIntfNbrChange": ospfCumIntfNbrChange,
       "ospfTimersKickOffStats": ospfTimersKickOffStats,
       "ospfTmrsKckOffHello": ospfTmrsKckOffHello,
       "ospfTmrsKckOffRetransmit": ospfTmrsKckOffRetransmit,
       "ospfTmrsKckOffLsaLock": ospfTmrsKckOffLsaLock,
       "ospfTmrsKckOffLsaAck": ospfTmrsKckOffLsaAck,
       "ospfTmrsKckOffDbage": ospfTmrsKckOffDbage,
       "ospfTmrsKckOffSummary": ospfTmrsKckOffSummary,
       "ospfTmrsKckOffAseExport": ospfTmrsKckOffAseExport,
       "ospfArea": ospfArea,
       "ospfAreaRxTxStats": ospfAreaRxTxStats,
       "ospfAreaRxTxStatsEntry": ospfAreaRxTxStatsEntry,
       "ospfAreaRxTxIndex": ospfAreaRxTxIndex,
       "ospfAreaRxPkts": ospfAreaRxPkts,
       "ospfAreaTxPkts": ospfAreaTxPkts,
       "ospfAreaRxHello": ospfAreaRxHello,
       "ospfAreaTxHello": ospfAreaTxHello,
       "ospfAreaRxDatabase": ospfAreaRxDatabase,
       "ospfAreaTxDatabase": ospfAreaTxDatabase,
       "ospfAreaRxlsReqs": ospfAreaRxlsReqs,
       "ospfAreaTxlsReqs": ospfAreaTxlsReqs,
       "ospfAreaRxlsAcks": ospfAreaRxlsAcks,
       "ospfAreaTxlsAcks": ospfAreaTxlsAcks,
       "ospfAreaRxlsUpdates": ospfAreaRxlsUpdates,
       "ospfAreaTxlsUpdates": ospfAreaTxlsUpdates,
       "ospfAreaNbrChangeStats": ospfAreaNbrChangeStats,
       "ospfAreaNbrChangeStatsEntry": ospfAreaNbrChangeStatsEntry,
       "ospfAreaNbrIndex": ospfAreaNbrIndex,
       "ospfAreaNbrhello": ospfAreaNbrhello,
       "ospfAreaNbrStart": ospfAreaNbrStart,
       "ospfAreaNbrAdjointOk": ospfAreaNbrAdjointOk,
       "ospfAreaNbrNegotiationDone": ospfAreaNbrNegotiationDone,
       "ospfAreaNbrExchangeDone": ospfAreaNbrExchangeDone,
       "ospfAreaNbrBadRequests": ospfAreaNbrBadRequests,
       "ospfAreaNbrBadSequence": ospfAreaNbrBadSequence,
       "ospfAreaNbrLoadingDone": ospfAreaNbrLoadingDone,
       "ospfAreaNbrN1way": ospfAreaNbrN1way,
       "ospfAreaNbrRstAd": ospfAreaNbrRstAd,
       "ospfAreaNbrDown": ospfAreaNbrDown,
       "ospfAreaNbrN2way": ospfAreaNbrN2way,
       "ospfAreaChangeStats": ospfAreaChangeStats,
       "ospfAreaChangeStatsEntry": ospfAreaChangeStatsEntry,
       "ospfAreaIntfIndex": ospfAreaIntfIndex,
       "ospfAreaIntfHello": ospfAreaIntfHello,
       "ospfAreaIntfDown": ospfAreaIntfDown,
       "ospfAreaIntfLoop": ospfAreaIntfLoop,
       "ospfAreaIntfUnloop": ospfAreaIntfUnloop,
       "ospfAreaIntfWaitTimer": ospfAreaIntfWaitTimer,
       "ospfAreaIntfBackup": ospfAreaIntfBackup,
       "ospfAreaIntfNbrChange": ospfAreaIntfNbrChange,
       "ospfAreaErrorStats": ospfAreaErrorStats,
       "ospfAreaErrorStatsEntry": ospfAreaErrorStatsEntry,
       "ospfAreaErrIndex": ospfAreaErrIndex,
       "ospfAreaErrAuthFailure": ospfAreaErrAuthFailure,
       "ospfAreaErrNetmaskMismatch": ospfAreaErrNetmaskMismatch,
       "ospfAreaErrHelloMismatch": ospfAreaErrHelloMismatch,
       "ospfAreaErrDeadMismatch": ospfAreaErrDeadMismatch,
       "ospfAreaErrOptionsMismatch": ospfAreaErrOptionsMismatch,
       "ospfAreaErrUnknownNbr": ospfAreaErrUnknownNbr,
       "ospfAreaErrAreaMismatch": ospfAreaErrAreaMismatch,
       "ospfAreaErrInvalidSelfOrigLsa": ospfAreaErrInvalidSelfOrigLsa,
       "ospfInterface": ospfInterface,
       "ospfIntfRxTxStats": ospfIntfRxTxStats,
       "ospfIntfRxTxStatsEntry": ospfIntfRxTxStatsEntry,
       "ospfIntfRxTxIndex": ospfIntfRxTxIndex,
       "ospfIntfRxPkts": ospfIntfRxPkts,
       "ospfIntfTxPkts": ospfIntfTxPkts,
       "ospfIntfRxHello": ospfIntfRxHello,
       "ospfIntfTxHello": ospfIntfTxHello,
       "ospfIntfRxDatabase": ospfIntfRxDatabase,
       "ospfIntfTxDatabase": ospfIntfTxDatabase,
       "ospfIntfRxlsReqs": ospfIntfRxlsReqs,
       "ospfIntfTxlsReqs": ospfIntfTxlsReqs,
       "ospfIntfRxlsAcks": ospfIntfRxlsAcks,
       "ospfIntfTxlsAcks": ospfIntfTxlsAcks,
       "ospfIntfRxlsUpdates": ospfIntfRxlsUpdates,
       "ospfIntfTxlsUpdates": ospfIntfTxlsUpdates,
       "ospfIntfNbrChangeStats": ospfIntfNbrChangeStats,
       "ospfIntfNbrChangeStatsEntry": ospfIntfNbrChangeStatsEntry,
       "ospfIntfNbrIndex": ospfIntfNbrIndex,
       "ospfIntfNbrhello": ospfIntfNbrhello,
       "ospfIntfNbrStart": ospfIntfNbrStart,
       "ospfIntfNbrAdjointOk": ospfIntfNbrAdjointOk,
       "ospfIntfNbrNegotiationDone": ospfIntfNbrNegotiationDone,
       "ospfIntfNbrExchangeDone": ospfIntfNbrExchangeDone,
       "ospfIntfNbrBadRequests": ospfIntfNbrBadRequests,
       "ospfIntfNbrBadSequence": ospfIntfNbrBadSequence,
       "ospfIntfNbrLoadingDone": ospfIntfNbrLoadingDone,
       "ospfIntfNbrN1way": ospfIntfNbrN1way,
       "ospfIntfNbrRstAd": ospfIntfNbrRstAd,
       "ospfIntfNbrDown": ospfIntfNbrDown,
       "ospfIntfNbrN2way": ospfIntfNbrN2way,
       "ospfIntfChangeStats": ospfIntfChangeStats,
       "ospfIntfChangeStatsEntry": ospfIntfChangeStatsEntry,
       "ospfIntfIndex": ospfIntfIndex,
       "ospfIntfHello": ospfIntfHello,
       "ospfIntfDown": ospfIntfDown,
       "ospfIntfLoop": ospfIntfLoop,
       "ospfIntfUnloop": ospfIntfUnloop,
       "ospfIntfWaitTimer": ospfIntfWaitTimer,
       "ospfIntfBackup": ospfIntfBackup,
       "ospfIntfNbrChange": ospfIntfNbrChange,
       "ospfIntfErrorStats": ospfIntfErrorStats,
       "ospfIntfErrorStatsEntry": ospfIntfErrorStatsEntry,
       "ospfIntfErrIndex": ospfIntfErrIndex,
       "ospfIntfErrAuthFailure": ospfIntfErrAuthFailure,
       "ospfIntfErrNetmaskMismatch": ospfIntfErrNetmaskMismatch,
       "ospfIntfErrHelloMismatch": ospfIntfErrHelloMismatch,
       "ospfIntfErrDeadMismatch": ospfIntfErrDeadMismatch,
       "ospfIntfErrOptionsMismatch": ospfIntfErrOptionsMismatch,
       "ospfIntfErrUnknownNbr": ospfIntfErrUnknownNbr,
       "ospfIntfErrAreaMismatch": ospfIntfErrAreaMismatch,
       "ospfIntfErrInvalidSelfOrigLSA": ospfIntfErrInvalidSelfOrigLSA,
       "clearStats": clearStats,
       "ipClearStats": ipClearStats,
       "vrrpClearStats": vrrpClearStats,
       "ospfClearStats": ospfClearStats,
       "tcpClearStats": tcpClearStats,
       "udpClearStats": udpClearStats,
       "dnsClearStats": dnsClearStats,
       "arpClearStats": arpClearStats,
       "icmpClearStats": icmpClearStats,
       "routeClearStats": routeClearStats,
       "ipv6ClearStats": ipv6ClearStats,
       "ipv6ClearIcmpStats": ipv6ClearIcmpStats,
       "ipv6ClearUdpStats": ipv6ClearUdpStats,
       "ospf3ClearStats": ospf3ClearStats,
       "ripClearStats": ripClearStats,
       "ipv6NbrClearStats": ipv6NbrClearStats,
       "igmpStats": igmpStats,
       "igmpSnoopStats": igmpSnoopStats,
       "igmpSnoopStatsEntry": igmpSnoopStatsEntry,
       "igmpSnoopVlanIndex": igmpSnoopVlanIndex,
       "rxIgmpValidPkts": rxIgmpValidPkts,
       "rxIgmpInvalidPkts": rxIgmpInvalidPkts,
       "rxIgmpGenQueries": rxIgmpGenQueries,
       "rxIgmpGrpSpecificQueries": rxIgmpGrpSpecificQueries,
       "rxIgmpLeaves": rxIgmpLeaves,
       "rxIgmpReports": rxIgmpReports,
       "txIgmpGrpSpecificQueries": txIgmpGrpSpecificQueries,
       "txIgmpReports": txIgmpReports,
       "txIgmpLeaves": txIgmpLeaves,
       "rxIgmpGroupSourceSpecificQueries": rxIgmpGroupSourceSpecificQueries,
       "rxIgmpV3CurrentStateRecords": rxIgmpV3CurrentStateRecords,
       "rxIgmpV3SourceListChangeRecords": rxIgmpV3SourceListChangeRecords,
       "rxIgmpV3FilterChangeRecords": rxIgmpV3FilterChangeRecords,
       "txIgmpGenQueries": txIgmpGenQueries,
       "rxIgmpDiscardPkts": rxIgmpDiscardPkts,
       "rxIgmpPimHellos": rxIgmpPimHellos,
       "igmpClearVlanStats": igmpClearVlanStats,
       "igmpClearAllStats": igmpClearAllStats,
       "igmpStatsTotalIgmpGroups": igmpStatsTotalIgmpGroups,
       "igmpStatsTotalIpmcGroups": igmpStatsTotalIpmcGroups,
       "ipv6Stats": ipv6Stats,
       "ipv6InReceives": ipv6InReceives,
       "ipv6InMcasts": ipv6InMcasts,
       "ipv6InDelivers": ipv6InDelivers,
       "ipv6InDiscards": ipv6InDiscards,
       "ipv6InHdrerrs": ipv6InHdrerrs,
       "ipv6InAddrerrs": ipv6InAddrerrs,
       "ipv6InUnkprots": ipv6InUnkprots,
       "ipv6InTruncs": ipv6InTruncs,
       "ipv6OutMcasts": ipv6OutMcasts,
       "ipv6ForwDgrams": ipv6ForwDgrams,
       "ipv6TooBigerrs": ipv6TooBigerrs,
       "ipv6OutReqs": ipv6OutReqs,
       "ipv6OutDiscards": ipv6OutDiscards,
       "ipv6OutNorts": ipv6OutNorts,
       "ipv6Reasmreqs": ipv6Reasmreqs,
       "ipv6Reasmoks": ipv6Reasmoks,
       "ipv6Reasmfails": ipv6Reasmfails,
       "ipv6Fragoks": ipv6Fragoks,
       "ipv6Fragfails": ipv6Fragfails,
       "ipv6Fragcreates": ipv6Fragcreates,
       "ipv6InNsols": ipv6InNsols,
       "ipv6InNadvs": ipv6InNadvs,
       "ipv6InRoutsols": ipv6InRoutsols,
       "ipv6InRoutadvs": ipv6InRoutadvs,
       "ipv6InRoutRedirs": ipv6InRoutRedirs,
       "ipv6OutNsols": ipv6OutNsols,
       "ipv6OutNadvs": ipv6OutNadvs,
       "ipv6OutRoutadvs": ipv6OutRoutadvs,
       "ipv6OutRedirs": ipv6OutRedirs,
       "ipv6OutRoutSols": ipv6OutRoutSols,
       "ipv6icmpInMsgs": ipv6icmpInMsgs,
       "ipv6icmpInErrs": ipv6icmpInErrs,
       "ipv6icmpInBadcode": ipv6icmpInBadcode,
       "ipv6icmpInToobig": ipv6icmpInToobig,
       "ipv6icmpInDstUnreach": ipv6icmpInDstUnreach,
       "ipv6icmpInTmexceeded": ipv6icmpInTmexceeded,
       "ipv6icmpInParamprob": ipv6icmpInParamprob,
       "ipv6icmpInEchoReq": ipv6icmpInEchoReq,
       "ipv6icmpInEchoResp": ipv6icmpInEchoResp,
       "ipv6icmpOutMsgs": ipv6icmpOutMsgs,
       "ipv6icmpOutErrs": ipv6icmpOutErrs,
       "ipv6icmpOutDstUnreach": ipv6icmpOutDstUnreach,
       "ipv6icmpOutToobig": ipv6icmpOutToobig,
       "ipv6icmpOutTmexceeded": ipv6icmpOutTmexceeded,
       "ipv6icmpOutParamprob": ipv6icmpOutParamprob,
       "ipv6icmpOutEchoReq": ipv6icmpOutEchoReq,
       "ipv6icmpOutEchoResp": ipv6icmpOutEchoResp,
       "ipv6icmpInRouterSol": ipv6icmpInRouterSol,
       "ipv6icmpInRouterAdv": ipv6icmpInRouterAdv,
       "ipv6icmpInNeighSol": ipv6icmpInNeighSol,
       "ipv6icmpInNeighAdv": ipv6icmpInNeighAdv,
       "ipv6icmpInRedir": ipv6icmpInRedir,
       "ipv6icmpOutRouterSol": ipv6icmpOutRouterSol,
       "ipv6icmpOutRouterAdv": ipv6icmpOutRouterAdv,
       "ipv6icmpOutNeighSol": ipv6icmpOutNeighSol,
       "ipv6icmpOutNeighAdv": ipv6icmpOutNeighAdv,
       "ipv6icmpOutRedir": ipv6icmpOutRedir,
       "ipv6udpInDgrams": ipv6udpInDgrams,
       "ipv6udpInErrs": ipv6udpInErrs,
       "ipv6udpOutDgrams": ipv6udpOutDgrams,
       "ipv6udpNumPorts": ipv6udpNumPorts,
       "ipv6icmpInAdminProhib": ipv6icmpInAdminProhib,
       "ipv6icmpOutAdminProhib": ipv6icmpOutAdminProhib,
       "rip2Stats": rip2Stats,
       "ripStatInPackets": ripStatInPackets,
       "ripStatOutPackets": ripStatOutPackets,
       "ripStatInRequestPkts": ripStatInRequestPkts,
       "ripStatInResponsePkts": ripStatInResponsePkts,
       "ripStatOutRequestPkts": ripStatOutRequestPkts,
       "ripStatOutResponsePkts": ripStatOutResponsePkts,
       "ripStatRouteTimeout": ripStatRouteTimeout,
       "ripStatInBadSizePkts": ripStatInBadSizePkts,
       "ripStatInBadVersion": ripStatInBadVersion,
       "ripStatInBadZeros": ripStatInBadZeros,
       "ripStatInBadSourcePort": ripStatInBadSourcePort,
       "ripStatInBadSourceIP": ripStatInBadSourceIP,
       "ripStatInSelfRcvPkts": ripStatInSelfRcvPkts,
       "ipStats": ipStats,
       "ipStatsInReceives": ipStatsInReceives,
       "ipStatsInHdrErrors": ipStatsInHdrErrors,
       "ipStatsInAddrErrors": ipStatsInAddrErrors,
       "ipStatsInUnknownProtos": ipStatsInUnknownProtos,
       "ipStatsInDiscards": ipStatsInDiscards,
       "ipStatsInDelivers": ipStatsInDelivers,
       "ipStatsOutRequests": ipStatsOutRequests,
       "ipStatsOutDiscards": ipStatsOutDiscards,
       "ipStatsDefaultTTL": ipStatsDefaultTTL,
       "icmpStats": icmpStats,
       "icmpStatsInMsgs": icmpStatsInMsgs,
       "icmpStatsInErrors": icmpStatsInErrors,
       "icmpStatsInDestUnreachs": icmpStatsInDestUnreachs,
       "icmpStatsInTimeExcds": icmpStatsInTimeExcds,
       "icmpStatsInParmProbs": icmpStatsInParmProbs,
       "icmpStatsInSrcQuenchs": icmpStatsInSrcQuenchs,
       "icmpStatsInRedirects": icmpStatsInRedirects,
       "icmpStatsInEchos": icmpStatsInEchos,
       "icmpStatsInEchoReps": icmpStatsInEchoReps,
       "icmpStatsInTimestamps": icmpStatsInTimestamps,
       "icmpStatsInTimestampReps": icmpStatsInTimestampReps,
       "icmpStatsInAddrMasks": icmpStatsInAddrMasks,
       "icmpStatsInAddrMaskReps": icmpStatsInAddrMaskReps,
       "icmpStatsOutMsgs": icmpStatsOutMsgs,
       "icmpStatsOutErrors": icmpStatsOutErrors,
       "icmpStatsOutDestUnreachs": icmpStatsOutDestUnreachs,
       "icmpStatsOutTimeExcds": icmpStatsOutTimeExcds,
       "icmpStatsOutParmProbs": icmpStatsOutParmProbs,
       "icmpStatsOutSrcQuenchs": icmpStatsOutSrcQuenchs,
       "icmpStatsOutRedirects": icmpStatsOutRedirects,
       "icmpStatsOutEchos": icmpStatsOutEchos,
       "icmpStatsOutEchoReps": icmpStatsOutEchoReps,
       "icmpStatsOutTimestamps": icmpStatsOutTimestamps,
       "icmpStatsOutTimestampReps": icmpStatsOutTimestampReps,
       "icmpStatsOutAddrMasks": icmpStatsOutAddrMasks,
       "icmpStatsOutAddrMaskReps": icmpStatsOutAddrMaskReps,
       "tcpStats": tcpStats,
       "tcpStatsRtoAlgorithm": tcpStatsRtoAlgorithm,
       "tcpStatsRtoMin": tcpStatsRtoMin,
       "tcpStatsRtoMax": tcpStatsRtoMax,
       "tcpStatsMaxConn": tcpStatsMaxConn,
       "tcpStatsActiveOpens": tcpStatsActiveOpens,
       "tcpStatsPassiveOpens": tcpStatsPassiveOpens,
       "tcpStatsAttemptFails": tcpStatsAttemptFails,
       "tcpStatsEstabResets": tcpStatsEstabResets,
       "tcpStatsInSegs": tcpStatsInSegs,
       "tcpStatsOutSegs": tcpStatsOutSegs,
       "tcpStatsRetransSegs": tcpStatsRetransSegs,
       "tcpStatsInErrs": tcpStatsInErrs,
       "tcpStatsCurrEstab": tcpStatsCurrEstab,
       "tcpStatsCurrConn": tcpStatsCurrConn,
       "tcpStatsOutRsts": tcpStatsOutRsts,
       "udpStats": udpStats,
       "udpStatsInDatagrams": udpStatsInDatagrams,
       "udpStatsOutDatagrams": udpStatsOutDatagrams,
       "udpStatsInErrors": udpStatsInErrors,
       "udpStatsNoPorts": udpStatsNoPorts,
       "bootpStats": bootpStats,
       "bootpRelayStatsTable": bootpRelayStatsTable,
       "bootpRelayStatsTableEntry": bootpRelayStatsTableEntry,
       "bootpRelayStatsIndex": bootpRelayStatsIndex,
       "bootpRelayStatsRequestsReceived": bootpRelayStatsRequestsReceived,
       "bootpRelayStatsRequestsRelayed": bootpRelayStatsRequestsRelayed,
       "bootpRelayStatsRequestsDroppedNoRelay": bootpRelayStatsRequestsDroppedNoRelay,
       "bootpRelayStatsRequestsDroppedNoServer": bootpRelayStatsRequestsDroppedNoServer,
       "bootpRelayStatsRequestsDroppedError": bootpRelayStatsRequestsDroppedError,
       "bootpRelayStatsRepliesReceived": bootpRelayStatsRepliesReceived,
       "bootpRelayStatsRepliesRelayed": bootpRelayStatsRepliesRelayed,
       "bootpRelayStatsRepliesDroppedError": bootpRelayStatsRepliesDroppedError,
       "ospf3Stats": ospf3Stats,
       "ospf3GeneralStats": ospf3GeneralStats,
       "ospf3CumRxTxDisdStats": ospf3CumRxTxDisdStats,
       "ospf3CumRxPkts": ospf3CumRxPkts,
       "ospf3CumTxPkts": ospf3CumTxPkts,
       "ospf3CumDisdPkts": ospf3CumDisdPkts,
       "ospf3CumRxHello": ospf3CumRxHello,
       "ospf3CumTxHello": ospf3CumTxHello,
       "ospf3CumDisdHello": ospf3CumDisdHello,
       "ospf3CumRxDatabase": ospf3CumRxDatabase,
       "ospf3CumTxDatabase": ospf3CumTxDatabase,
       "ospf3CumDisdDatabase": ospf3CumDisdDatabase,
       "ospf3CumRxlsReqs": ospf3CumRxlsReqs,
       "ospf3CumTxlsReqs": ospf3CumTxlsReqs,
       "ospf3CumDisdlsReqs": ospf3CumDisdlsReqs,
       "ospf3CumRxlsAcks": ospf3CumRxlsAcks,
       "ospf3CumTxlsAcks": ospf3CumTxlsAcks,
       "ospf3CumDisdlsAcks": ospf3CumDisdlsAcks,
       "ospf3CumRxlsUpdates": ospf3CumRxlsUpdates,
       "ospf3CumTxlsUpdates": ospf3CumTxlsUpdates,
       "ospf3CumDisdlsUpdates": ospf3CumDisdlsUpdates,
       "ospf3CumNbrChangeStats": ospf3CumNbrChangeStats,
       "ospf3CumNbrDown": ospf3CumNbrDown,
       "ospf3CumNbrAttempt": ospf3CumNbrAttempt,
       "ospf3CumNbrInit": ospf3CumNbrInit,
       "ospf3CumNbrN2way": ospf3CumNbrN2way,
       "ospf3CumNbrExStart": ospf3CumNbrExStart,
       "ospf3CumNbrExchange": ospf3CumNbrExchange,
       "ospf3CumNbrLoading": ospf3CumNbrLoading,
       "ospf3CumNbrFull": ospf3CumNbrFull,
       "ospf3CumNbrAllEvents": ospf3CumNbrAllEvents,
       "ospf3CumIntfChangeStats": ospf3CumIntfChangeStats,
       "ospf3CumIntfDown": ospf3CumIntfDown,
       "ospf3CumIntfLoop": ospf3CumIntfLoop,
       "ospf3CumIntfWaiting": ospf3CumIntfWaiting,
       "ospf3CumIntfPtop": ospf3CumIntfPtop,
       "ospf3CumIntfDr": ospf3CumIntfDr,
       "ospf3CumIntfBackup": ospf3CumIntfBackup,
       "ospf3CumIntfDrOther": ospf3CumIntfDrOther,
       "ospf3CumIntfAllEvents": ospf3CumIntfAllEvents,
       "ospf3TimersKickOffStats": ospf3TimersKickOffStats,
       "ospf3TmrsKckOffHello": ospf3TmrsKckOffHello,
       "ospf3TmrsKckOffWait": ospf3TmrsKckOffWait,
       "ospf3TmrsKckOffPoll": ospf3TmrsKckOffPoll,
       "ospf3TmrsKckOffNbrProbe": ospf3TmrsKckOffNbrProbe,
       "ospf3Area": ospf3Area,
       "ospf3AreaRxTxDisdStats": ospf3AreaRxTxDisdStats,
       "ospf3AreaRxTxDisdStatsEntry": ospf3AreaRxTxDisdStatsEntry,
       "ospf3AreaRxTxDisdIndex": ospf3AreaRxTxDisdIndex,
       "ospf3AreaRxPkts": ospf3AreaRxPkts,
       "ospf3AreaTxPkts": ospf3AreaTxPkts,
       "ospf3AreaDisdPkts": ospf3AreaDisdPkts,
       "ospf3AreaRxHello": ospf3AreaRxHello,
       "ospf3AreaTxHello": ospf3AreaTxHello,
       "ospf3AreaDisdHello": ospf3AreaDisdHello,
       "ospf3AreaRxDatabase": ospf3AreaRxDatabase,
       "ospf3AreaTxDatabase": ospf3AreaTxDatabase,
       "ospf3AreaDisdDatabase": ospf3AreaDisdDatabase,
       "ospf3AreaRxlsReqs": ospf3AreaRxlsReqs,
       "ospf3AreaTxlsReqs": ospf3AreaTxlsReqs,
       "ospf3AreaDisdlsReqs": ospf3AreaDisdlsReqs,
       "ospf3AreaRxlsAcks": ospf3AreaRxlsAcks,
       "ospf3AreaTxlsAcks": ospf3AreaTxlsAcks,
       "ospf3AreaDisdlsAcks": ospf3AreaDisdlsAcks,
       "ospf3AreaRxlsUpdates": ospf3AreaRxlsUpdates,
       "ospf3AreaTxlsUpdates": ospf3AreaTxlsUpdates,
       "ospf3AreaDisdlsUpdates": ospf3AreaDisdlsUpdates,
       "ospf3AreaNbrChangeStats": ospf3AreaNbrChangeStats,
       "ospf3AreaNbrChangeStatsEntry": ospf3AreaNbrChangeStatsEntry,
       "ospf3AreaNbrIndex": ospf3AreaNbrIndex,
       "ospf3AreaNbrDown": ospf3AreaNbrDown,
       "ospf3AreaNbrAttempt": ospf3AreaNbrAttempt,
       "ospf3AreaNbrInit": ospf3AreaNbrInit,
       "ospf3AreaNbrN2way": ospf3AreaNbrN2way,
       "ospf3AreaNbrExStart": ospf3AreaNbrExStart,
       "ospf3AreaNbrExchange": ospf3AreaNbrExchange,
       "ospf3AreaNbrLoading": ospf3AreaNbrLoading,
       "ospf3AreaNbrFull": ospf3AreaNbrFull,
       "ospf3AreaNbrAllEvents": ospf3AreaNbrAllEvents,
       "ospf3AreaIntfChangeStats": ospf3AreaIntfChangeStats,
       "ospf3AreaIntfChangeStatsEntry": ospf3AreaIntfChangeStatsEntry,
       "ospf3AreaIntfIndex": ospf3AreaIntfIndex,
       "ospf3AreaIntfDown": ospf3AreaIntfDown,
       "ospf3AreaIntfLoop": ospf3AreaIntfLoop,
       "ospf3AreaIntfWaiting": ospf3AreaIntfWaiting,
       "ospf3AreaIntfPtop": ospf3AreaIntfPtop,
       "ospf3AreaIntfDr": ospf3AreaIntfDr,
       "ospf3AreaIntfBackup": ospf3AreaIntfBackup,
       "ospf3AreaIntfDrOther": ospf3AreaIntfDrOther,
       "ospf3AreaIntfAllEvents": ospf3AreaIntfAllEvents,
       "ospf3AreaErrorStats": ospf3AreaErrorStats,
       "ospf3AreaErrorStatsEntry": ospf3AreaErrorStatsEntry,
       "ospf3AreaErrIndex": ospf3AreaErrIndex,
       "ospf3AreaErrRxOnPasv": ospf3AreaErrRxOnPasv,
       "ospf3AreaErrRxOspfOff": ospf3AreaErrRxOspfOff,
       "ospf3AreaErrRxOnNotup": ospf3AreaErrRxOnNotup,
       "ospf3AreaErrRxVerMismatch": ospf3AreaErrRxVerMismatch,
       "ospf3AreaErrRxZeroRTRID": ospf3AreaErrRxZeroRTRID,
       "ospf3AreaErrRxSameRTRID": ospf3AreaErrRxSameRTRID,
       "ospf3AreaErrRxMismatchInstID": ospf3AreaErrRxMismatchInstID,
       "ospf3AreaErrBadAreaID": ospf3AreaErrBadAreaID,
       "ospf3AreaErrBadDestAddr": ospf3AreaErrBadDestAddr,
       "ospf3AreaErrBadChecksum": ospf3AreaErrBadChecksum,
       "ospf3AreaErrBadNeighbour": ospf3AreaErrBadNeighbour,
       "ospf3AreaErrBadPktType": ospf3AreaErrBadPktType,
       "ospf3AreaErrHelloMismatch": ospf3AreaErrHelloMismatch,
       "ospf3AreaErrOptionsMismatch": ospf3AreaErrOptionsMismatch,
       "ospf3AreaErrDeadMismatch": ospf3AreaErrDeadMismatch,
       "ospf3AreaErrHelloNoNbr": ospf3AreaErrHelloNoNbr,
       "ospf3Interface": ospf3Interface,
       "ospf3IntfRxTxDisdStats": ospf3IntfRxTxDisdStats,
       "ospf3IntfRxTxDisdStatsEntry": ospf3IntfRxTxDisdStatsEntry,
       "ospf3IntfRxTxDisdIndex": ospf3IntfRxTxDisdIndex,
       "ospf3IntfRxPkts": ospf3IntfRxPkts,
       "ospf3IntfTxPkts": ospf3IntfTxPkts,
       "ospf3IntfDisdPkts": ospf3IntfDisdPkts,
       "ospf3IntfRxHello": ospf3IntfRxHello,
       "ospf3IntfTxHello": ospf3IntfTxHello,
       "ospf3IntfDisdHello": ospf3IntfDisdHello,
       "ospf3IntfRxDatabase": ospf3IntfRxDatabase,
       "ospf3IntfTxDatabase": ospf3IntfTxDatabase,
       "ospf3IntfDisdDatabase": ospf3IntfDisdDatabase,
       "ospf3IntfRxlsReqs": ospf3IntfRxlsReqs,
       "ospf3IntfTxlsReqs": ospf3IntfTxlsReqs,
       "ospf3IntfDisdlsReqs": ospf3IntfDisdlsReqs,
       "ospf3IntfRxlsAcks": ospf3IntfRxlsAcks,
       "ospf3IntfTxlsAcks": ospf3IntfTxlsAcks,
       "ospf3IntfDisdlsAcks": ospf3IntfDisdlsAcks,
       "ospf3IntfRxlsUpdates": ospf3IntfRxlsUpdates,
       "ospf3IntfTxlsUpdates": ospf3IntfTxlsUpdates,
       "ospf3IntfDisdlsUpdates": ospf3IntfDisdlsUpdates,
       "ospf3IntfNbrChangeStats": ospf3IntfNbrChangeStats,
       "ospf3IntfNbrChangeStatsEntry": ospf3IntfNbrChangeStatsEntry,
       "ospf3IntfNbrIndex": ospf3IntfNbrIndex,
       "ospf3IntfNbrDown": ospf3IntfNbrDown,
       "ospf3IntfNbrAttempt": ospf3IntfNbrAttempt,
       "ospf3IntfNbrInit": ospf3IntfNbrInit,
       "ospf3IntfNbrN2way": ospf3IntfNbrN2way,
       "ospf3IntfNbrExStart": ospf3IntfNbrExStart,
       "ospf3IntfNbrExchange": ospf3IntfNbrExchange,
       "ospf3IntfNbrLoading": ospf3IntfNbrLoading,
       "ospf3IntfNbrFull": ospf3IntfNbrFull,
       "ospf3IntfNbrAllEvents": ospf3IntfNbrAllEvents,
       "ospf3IntfChangeStats": ospf3IntfChangeStats,
       "ospf3IntfChangeStatsEntry": ospf3IntfChangeStatsEntry,
       "ospf3IntfIndex": ospf3IntfIndex,
       "ospf3IntfDown": ospf3IntfDown,
       "ospf3IntfLoop": ospf3IntfLoop,
       "ospf3IntfWaiting": ospf3IntfWaiting,
       "ospf3IntfPtop": ospf3IntfPtop,
       "ospf3IntfDr": ospf3IntfDr,
       "ospf3IntfBackup": ospf3IntfBackup,
       "ospf3IntfDrOther": ospf3IntfDrOther,
       "ospf3IntfAllEvents": ospf3IntfAllEvents,
       "ospf3IntfErrorStats": ospf3IntfErrorStats,
       "ospf3IntfErrorStatsEntry": ospf3IntfErrorStatsEntry,
       "ospf3IntfErrIndex": ospf3IntfErrIndex,
       "ospf3IntfErrRxOnPasv": ospf3IntfErrRxOnPasv,
       "ospf3IntfErrRxOspfOff": ospf3IntfErrRxOspfOff,
       "ospf3IntfErrRxOnNotup": ospf3IntfErrRxOnNotup,
       "ospf3IntfErrRxVerMismatch": ospf3IntfErrRxVerMismatch,
       "ospf3IntfErrRxZeroRTRID": ospf3IntfErrRxZeroRTRID,
       "ospf3IntfErrRxSameRTRID": ospf3IntfErrRxSameRTRID,
       "ospf3IntfErrRxMismatchInstID": ospf3IntfErrRxMismatchInstID,
       "ospf3IntfErrBadAreaID": ospf3IntfErrBadAreaID,
       "ospf3IntfErrBadDestAddr": ospf3IntfErrBadDestAddr,
       "ospf3IntfErrBadChecksum": ospf3IntfErrBadChecksum,
       "ospf3IntfErrBadNeighbour": ospf3IntfErrBadNeighbour,
       "ospf3IntfErrBadPktType": ospf3IntfErrBadPktType,
       "ospf3IntfErrHelloMismatch": ospf3IntfErrHelloMismatch,
       "ospf3IntfErrOptionsMismatch": ospf3IntfErrOptionsMismatch,
       "ospf3IntfErrDeadMismatch": ospf3IntfErrDeadMismatch,
       "ospf3IntfErrMTUMismatch": ospf3IntfErrMTUMismatch,
       "ospf3IntfErrHelloNoNbr": ospf3IntfErrHelloNoNbr,
       "mldStats": mldStats,
       "mldIfStatsTable": mldIfStatsTable,
       "mldIfStatsEntry": mldIfStatsEntry,
       "mldIfStatsIfIndex": mldIfStatsIfIndex,
       "rxMldIfStatsGeneralQuery": rxMldIfStatsGeneralQuery,
       "rxMldIfStatsMASQuery": rxMldIfStatsMASQuery,
       "rxMldIfStatsMASSQQuery": rxMldIfStatsMASSQQuery,
       "rxMldIfStatsMLDv1Report": rxMldIfStatsMLDv1Report,
       "rxMldIfStatsMLDv1Done": rxMldIfStatsMLDv1Done,
       "rxMldIfStatsMLDv2Report": rxMldIfStatsMLDv2Report,
       "rxMldIfStatsIncCrsv2": rxMldIfStatsIncCrsv2,
       "rxMldIfStatsExcCrsv2": rxMldIfStatsExcCrsv2,
       "rxMldIfStatsToIncFmcrsv2": rxMldIfStatsToIncFmcrsv2,
       "rxMldIfStatsToExcFmcrsv2": rxMldIfStatsToExcFmcrsv2,
       "rxMldIfStatsAllowSlcrsv2": rxMldIfStatsAllowSlcrsv2,
       "rxMldIfStatsBlockSlcrsv2": rxMldIfStatsBlockSlcrsv2,
       "txMldIfStatsGeneralQuery": txMldIfStatsGeneralQuery,
       "txMldIfStatsMASQuery": txMldIfStatsMASQuery,
       "txMldIfStatsMASSQQuery": txMldIfStatsMASSQQuery,
       "txMldIfStatsMLDv1Report": txMldIfStatsMLDv1Report,
       "txMldIfStatsMLDv1Done": txMldIfStatsMLDv1Done,
       "txMldIfStatsMLDv2Report": txMldIfStatsMLDv2Report,
       "txMldIfStatsIncCrsv2": txMldIfStatsIncCrsv2,
       "txMldIfStatsExcCrsv2": txMldIfStatsExcCrsv2,
       "txMldIfStatsToIncFmcrsv2": txMldIfStatsToIncFmcrsv2,
       "txMldIfStatsToExcFmcrsv2": txMldIfStatsToExcFmcrsv2,
       "txMldIfStatsAllowSlcrsv2": txMldIfStatsAllowSlcrsv2,
       "txMldIfStatsBlockSlcrsv2": txMldIfStatsBlockSlcrsv2,
       "errMldIfStatsGeneralQuery": errMldIfStatsGeneralQuery,
       "errMldIfStatsMASQuery": errMldIfStatsMASQuery,
       "errMldIfStatsMASSQQuery": errMldIfStatsMASSQQuery,
       "errMldIfStatsMLDv1Report": errMldIfStatsMLDv1Report,
       "errMldIfStatsMLDv1Done": errMldIfStatsMLDv1Done,
       "errMldIfStatsMLDv2Report": errMldIfStatsMLDv2Report,
       "errMldIfStatsIncCrsv2": errMldIfStatsIncCrsv2,
       "errMldIfStatsExcCrsv2": errMldIfStatsExcCrsv2,
       "errMldIfStatsToIncFmcrsv2": errMldIfStatsToIncFmcrsv2,
       "errMldIfStatsToExcFmcrsv2": errMldIfStatsToExcFmcrsv2,
       "errMldIfStatsAllowSlcrsv2": errMldIfStatsAllowSlcrsv2,
       "errMldIfStatsBlockSlcrsv2": errMldIfStatsBlockSlcrsv2,
       "mldStatBadLength": mldStatBadLength,
       "mldStatBadChecksum": mldStatBadChecksum,
       "mldStatBadReceiveIf": mldStatBadReceiveIf,
       "mldStatReceiveNonLocal": mldStatReceiveNonLocal,
       "mldStatInvalidPkts": mldStatInvalidPkts,
       "mldStatTotalL3Ipv6SgvEntries": mldStatTotalL3Ipv6SgvEntries,
       "mldStatTotalMLDGroups": mldStatTotalMLDGroups,
       "mldStatClearAll": mldStatClearAll,
       "ipsecStats": ipsecStats,
       "ipsecSaStatsTable": ipsecSaStatsTable,
       "ipsecSaStatsEntry": ipsecSaStatsEntry,
       "ipsecSaStatsIndex": ipsecSaStatsIndex,
       "ipsecSaStatsSpi": ipsecSaStatsSpi,
       "ipsecSaStatsProto": ipsecSaStatsProto,
       "ipsecSaStatsDstAddr": ipsecSaStatsDstAddr,
       "ipsecSaStatsUsageTime": ipsecSaStatsUsageTime,
       "ipsecSaStatsBytes": ipsecSaStatsBytes,
       "ipsecSaStatsPkts": ipsecSaStatsPkts,
       "dhcpsnpStats": dhcpsnpStats,
       "dhcpSnoopingStatInPacketRequest": dhcpSnoopingStatInPacketRequest,
       "dhcpSnoopingStatInPacketReply": dhcpSnoopingStatInPacketReply,
       "dhcpSnoopingStatDroppedPacketInvalid": dhcpSnoopingStatDroppedPacketInvalid,
       "dhcpSnoopingStatDroppedPacketRateLimit": dhcpSnoopingStatDroppedPacketRateLimit,
       "dhcpSnoopingStatDroppedPacketOther": dhcpSnoopingStatDroppedPacketOther,
       "nbrStats": nbrStats,
       "nbrStatEntries": nbrStatEntries,
       "nbrStatHighWater": nbrStatHighWater,
       "nbrStatMaxEntries": nbrStatMaxEntries,
       "layer3Info": layer3Info,
       "ipRoutingInfo": ipRoutingInfo,
       "ipDataRouteInfoTable": ipDataRouteInfoTable,
       "ipDataRouteInfoEntry": ipDataRouteInfoEntry,
       "ipDataRouteInfoIndx": ipDataRouteInfoIndx,
       "ipDataRouteInfoDestIp": ipDataRouteInfoDestIp,
       "ipDataRouteInfoMask": ipDataRouteInfoMask,
       "ipDataRouteInfoGateway": ipDataRouteInfoGateway,
       "ipDataRouteInfoTag": ipDataRouteInfoTag,
       "ipDataRouteInfoType": ipDataRouteInfoType,
       "ipDataRouteInfoInterface": ipDataRouteInfoInterface,
       "ipDataRouteInfoGateway1": ipDataRouteInfoGateway1,
       "ipDataRouteInfoGateway2": ipDataRouteInfoGateway2,
       "ipDataRouteInfoMetric": ipDataRouteInfoMetric,
       "routeTableClear": routeTableClear,
       "ipMgmtRouteInfoTable": ipMgmtRouteInfoTable,
       "ipMgmtRouteInfoEntry": ipMgmtRouteInfoEntry,
       "ipMgmtRouteInfoIndx": ipMgmtRouteInfoIndx,
       "ipMgmtRouteInfoDestIp": ipMgmtRouteInfoDestIp,
       "ipMgmtRouteInfoMask": ipMgmtRouteInfoMask,
       "ipMgmtRouteInfoGateway": ipMgmtRouteInfoGateway,
       "ipMgmtRouteInfoTag": ipMgmtRouteInfoTag,
       "ipMgmtRouteInfoType": ipMgmtRouteInfoType,
       "ipMgmtRouteInfoInterface": ipMgmtRouteInfoInterface,
       "ipMgmtRouteInfoGateway1": ipMgmtRouteInfoGateway1,
       "ipMgmtRouteInfoGateway2": ipMgmtRouteInfoGateway2,
       "ipMgmtRouteInfoMetric": ipMgmtRouteInfoMetric,
       "arpInfo": arpInfo,
       "arpInfoTable": arpInfoTable,
       "arpInfoEntry": arpInfoEntry,
       "arpInfoDestIp": arpInfoDestIp,
       "arpInfoMacAddr": arpInfoMacAddr,
       "arpInfoVLAN": arpInfoVLAN,
       "arpInfoSrcPort": arpInfoSrcPort,
       "arpInfoFlag": arpInfoFlag,
       "arpCacheClear": arpCacheClear,
       "vrrpInfo": vrrpInfo,
       "vrrpInfoVirtRtrTable": vrrpInfoVirtRtrTable,
       "vrrpInfoVirtRtrTableEntry": vrrpInfoVirtRtrTableEntry,
       "vrrpInfoVirtRtrIndex": vrrpInfoVirtRtrIndex,
       "vrrpInfoVirtRtrState": vrrpInfoVirtRtrState,
       "vrrpInfoVirtRtrOwnership": vrrpInfoVirtRtrOwnership,
       "vrrpInfoVirtRtrConfig": vrrpInfoVirtRtrConfig,
       "vrrpInfoVirtRtrID": vrrpInfoVirtRtrID,
       "vrrpInfoVirtRtrAddr": vrrpInfoVirtRtrAddr,
       "vrrpInfoVirtRtrIfIndex": vrrpInfoVirtRtrIfIndex,
       "vrrpInfoVirtRtrPriority": vrrpInfoVirtRtrPriority,
       "vrrpInfoVirtGroupState": vrrpInfoVirtGroupState,
       "vrrpInfoVirtGroupPriority": vrrpInfoVirtGroupPriority,
       "ospfinfo": ospfinfo,
       "ospfGeneralInfo": ospfGeneralInfo,
       "ospfStartTime": ospfStartTime,
       "ospfProcessUptime": ospfProcessUptime,
       "ospfLsTypesSupported": ospfLsTypesSupported,
       "ospfIntfCountForRouter": ospfIntfCountForRouter,
       "ospfVlinkCountForRouter": ospfVlinkCountForRouter,
       "ospfTotalNeighbours": ospfTotalNeighbours,
       "ospfNbrInInitState": ospfNbrInInitState,
       "ospfNbrInExchState": ospfNbrInExchState,
       "ospfNbrInFullState": ospfNbrInFullState,
       "ospfTotalAreas": ospfTotalAreas,
       "ospfTotalTransitAreas": ospfTotalTransitAreas,
       "ospfTotalNssaAreas": ospfTotalNssaAreas,
       "ospfTotalStubAreas": ospfTotalStubAreas,
       "ospfAreaInfoTable": ospfAreaInfoTable,
       "ospfAreaInfoEntry": ospfAreaInfoEntry,
       "ospfAreaInfoIndex": ospfAreaInfoIndex,
       "ospfAreaInfoId": ospfAreaInfoId,
       "ospfTotalNumberOfInterfaces": ospfTotalNumberOfInterfaces,
       "ospfNumberOfInterfacesUp": ospfNumberOfInterfacesUp,
       "ospfNumberOfLsdbEntries": ospfNumberOfLsdbEntries,
       "ospfAreaInfoAuthType": ospfAreaInfoAuthType,
       "ospfAreaInfoLsTypesAccepted": ospfAreaInfoLsTypesAccepted,
       "ospfAreaInfoSPF": ospfAreaInfoSPF,
       "ospfAreaInfoAreaBorderRouter": ospfAreaInfoAreaBorderRouter,
       "ospfAreaInfoASBoundaryRouter": ospfAreaInfoASBoundaryRouter,
       "ospfAreaInfoTotalNeighbours": ospfAreaInfoTotalNeighbours,
       "ospfAreaInfoNeighborsINITstate": ospfAreaInfoNeighborsINITstate,
       "ospfAreaInfoNeighborsEXCHstate": ospfAreaInfoNeighborsEXCHstate,
       "ospfAreaInfoNeighborsFULLstate": ospfAreaInfoNeighborsFULLstate,
       "ospfIntfInfoTable": ospfIntfInfoTable,
       "ospfIntfInfoEntry": ospfIntfInfoEntry,
       "ospfIfInfoIndex": ospfIfInfoIndex,
       "ospfIfInfoIpAddress": ospfIfInfoIpAddress,
       "ospfIfInfoArea": ospfIfInfoArea,
       "ospfIfInfoAdminStatus": ospfIfInfoAdminStatus,
       "ospfIfInfoPassive": ospfIfInfoPassive,
       "ospfIfInfoRouterIP": ospfIfInfoRouterIP,
       "ospfIfInfoState": ospfIfInfoState,
       "ospfIfInfoPriority": ospfIfInfoPriority,
       "ospfIfInfoDesignatedRouterIP": ospfIfInfoDesignatedRouterIP,
       "ospfIfInfoDesignatedRouterIpAddress": ospfIfInfoDesignatedRouterIpAddress,
       "ospfIfInfoBackupDesignatedRouterIP": ospfIfInfoBackupDesignatedRouterIP,
       "ospfIfInfoBackupDesignatedRouterIpAddress": ospfIfInfoBackupDesignatedRouterIpAddress,
       "ospfIfInfoHello": ospfIfInfoHello,
       "ospfIfInfoHelloMS": ospfIfInfoHelloMS,
       "ospfIfInfoDead": ospfIfInfoDead,
       "ospfIfInfoDeadMS": ospfIfInfoDeadMS,
       "ospfIfInfoWaitInterval": ospfIfInfoWaitInterval,
       "ospfIfInfoWaitIntervalMS": ospfIfInfoWaitIntervalMS,
       "ospfIfInfoRetransmit": ospfIfInfoRetransmit,
       "ospfIfInfoTransitDelay": ospfIfInfoTransitDelay,
       "ospfIfInfoTotalNeighbours": ospfIfInfoTotalNeighbours,
       "ospfIfInfoEvents": ospfIfInfoEvents,
       "ospfIfInfoAuthType": ospfIfInfoAuthType,
       "ospfIfInfoPtop": ospfIfInfoPtop,
       "ospfVirtIntfInfoTable": ospfVirtIntfInfoTable,
       "ospfVirtIntfInfoEntry": ospfVirtIntfInfoEntry,
       "ospfVirtIntfInfoIndex": ospfVirtIntfInfoIndex,
       "ospfVirtIntfInfoIpAddr": ospfVirtIntfInfoIpAddr,
       "ospfVirtIntfInfoArea": ospfVirtIntfInfoArea,
       "ospfVirtIntfInfoRouterId": ospfVirtIntfInfoRouterId,
       "ospfVirtIntfInfoState": ospfVirtIntfInfoState,
       "ospfVirtIntfInfoCost": ospfVirtIntfInfoCost,
       "ospfVirtIntfInfoTrans": ospfVirtIntfInfoTrans,
       "ospfVirtIntfInfoHello": ospfVirtIntfInfoHello,
       "ospfVirtIntfInfoHelloMS": ospfVirtIntfInfoHelloMS,
       "ospfVirtIntfInfoDead": ospfVirtIntfInfoDead,
       "ospfVirtIntfInfoDeadMS": ospfVirtIntfInfoDeadMS,
       "ospfVirtIntfInfoWait": ospfVirtIntfInfoWait,
       "ospfVirtIntfInfoWaitMS": ospfVirtIntfInfoWaitMS,
       "ospfVirtIntfInfoRetra": ospfVirtIntfInfoRetra,
       "ospfVirtIntfInfoAuth": ospfVirtIntfInfoAuth,
       "ospfVirtIntfInfoEvents": ospfVirtIntfInfoEvents,
       "ospfVirtIntfInfoNbr": ospfVirtIntfInfoNbr,
       "ospfVirtIntfInfoNbrState": ospfVirtIntfInfoNbrState,
       "ospfVirtIntfInfoAreaId": ospfVirtIntfInfoAreaId,
       "ospfIfNbrTable": ospfIfNbrTable,
       "ospfIfNbrEntry": ospfIfNbrEntry,
       "ospfIfNbrIntfIndex": ospfIfNbrIntfIndex,
       "ospfIfNbrIpAddr": ospfIfNbrIpAddr,
       "ospfIfNbrPriority": ospfIfNbrPriority,
       "ospfIfNbrState": ospfIfNbrState,
       "ospfIfNbrDesignatedRtr": ospfIfNbrDesignatedRtr,
       "ospfIfNbrBackupDesignatedRtr": ospfIfNbrBackupDesignatedRtr,
       "ospfIfNbrIpAddress": ospfIfNbrIpAddress,
       "ospfSumRangesInfoTable": ospfSumRangesInfoTable,
       "ospfSumRangesInfoEntry": ospfSumRangesInfoEntry,
       "ospfSumRangesInfoIndex": ospfSumRangesInfoIndex,
       "ospfSumRangesInfoArea": ospfSumRangesInfoArea,
       "ospfSumRangesInfoNetwork": ospfSumRangesInfoNetwork,
       "ospfSumRangesInfoMask": ospfSumRangesInfoMask,
       "ospfSumRangesInfoAction": ospfSumRangesInfoAction,
       "ospfSumRangesInfoListType": ospfSumRangesInfoListType,
       "ospfRoutesInfoTable": ospfRoutesInfoTable,
       "ospfRoutesInfoEntry": ospfRoutesInfoEntry,
       "ospfRoutesInfoIndex": ospfRoutesInfoIndex,
       "ospfRoutesInfoDestination": ospfRoutesInfoDestination,
       "ospfRoutesInfoMask": ospfRoutesInfoMask,
       "ospfRoutesInfoVia": ospfRoutesInfoVia,
       "ospfRoutesInfoType": ospfRoutesInfoType,
       "ospfLsdbInfoTable": ospfLsdbInfoTable,
       "ospfLsdbInfoEntry": ospfLsdbInfoEntry,
       "ospfLsdbInfoIndex": ospfLsdbInfoIndex,
       "ospfLsdbInfoAreaId": ospfLsdbInfoAreaId,
       "ospfLsdbInfoType": ospfLsdbInfoType,
       "ospfLsdbInfoLsid": ospfLsdbInfoLsid,
       "ospfLsdbInfoRouterId": ospfLsdbInfoRouterId,
       "ospfLsdbInfoSequence": ospfLsdbInfoSequence,
       "ospfLsdbInfoAge": ospfLsdbInfoAge,
       "ospfLsdbInfoChecksum": ospfLsdbInfoChecksum,
       "ospfLsdbInfoAdvertisement": ospfLsdbInfoAdvertisement,
       "ospfExtLsdbInfoTable": ospfExtLsdbInfoTable,
       "ospfExtLsdbInfoEntry": ospfExtLsdbInfoEntry,
       "ospfExtLsdbInfoIndex": ospfExtLsdbInfoIndex,
       "ospfExtLsdbInfoType": ospfExtLsdbInfoType,
       "ospfExtLsdbInfoLsid": ospfExtLsdbInfoLsid,
       "ospfExtLsdbInfoRouterId": ospfExtLsdbInfoRouterId,
       "ospfExtLsdbInfoSequence": ospfExtLsdbInfoSequence,
       "ospfExtLsdbInfoAge": ospfExtLsdbInfoAge,
       "ospfExtLsdbInfoChecksum": ospfExtLsdbInfoChecksum,
       "ospfExtLsdbInfoAdvertisement": ospfExtLsdbInfoAdvertisement,
       "ospfLoopIfInfoTable": ospfLoopIfInfoTable,
       "ospfLoopIfInfoEntry": ospfLoopIfInfoEntry,
       "ospfLoopIfInfoIndex": ospfLoopIfInfoIndex,
       "ospfLoopIfInfoIpAddress": ospfLoopIfInfoIpAddress,
       "ospfLoopIfInfoArea": ospfLoopIfInfoArea,
       "ospfLoopIfInfoAdminStatus": ospfLoopIfInfoAdminStatus,
       "ospfLoopIfInfoPassive": ospfLoopIfInfoPassive,
       "ospfLoopIfInfoRouterIP": ospfLoopIfInfoRouterIP,
       "ospfLoopIfInfoState": ospfLoopIfInfoState,
       "ospfLoopIfInfoPriority": ospfLoopIfInfoPriority,
       "ospfLoopIfInfoDesignatedRouterIP": ospfLoopIfInfoDesignatedRouterIP,
       "ospfLoopIfInfoDesignatedRouterIpAddress": ospfLoopIfInfoDesignatedRouterIpAddress,
       "ospfLoopIfInfoBackupDesignatedRouterIP": ospfLoopIfInfoBackupDesignatedRouterIP,
       "ospfLoopIfInfoBackupDesignatedRouterIpAddress": ospfLoopIfInfoBackupDesignatedRouterIpAddress,
       "ospfLoopIfInfoHello": ospfLoopIfInfoHello,
       "ospfLoopIfInfoHelloMS": ospfLoopIfInfoHelloMS,
       "ospfLoopIfInfoDead": ospfLoopIfInfoDead,
       "ospfLoopIfInfoDeadMS": ospfLoopIfInfoDeadMS,
       "ospfLoopIfInfoWaitInterval": ospfLoopIfInfoWaitInterval,
       "ospfLoopIfInfoWaitIntervalMS": ospfLoopIfInfoWaitIntervalMS,
       "ospfLoopIfInfoRetransmit": ospfLoopIfInfoRetransmit,
       "ospfLoopIfInfoTransitDelay": ospfLoopIfInfoTransitDelay,
       "ospfLoopIfInfoTotalNeighbours": ospfLoopIfInfoTotalNeighbours,
       "ospfLoopIfInfoEvents": ospfLoopIfInfoEvents,
       "ospfLoopIfInfoAuthType": ospfLoopIfInfoAuthType,
       "ospfLoopIfInfoPtop": ospfLoopIfInfoPtop,
       "gatewayInfo": gatewayInfo,
       "gatewayInfoTable": gatewayInfoTable,
       "gatewayInfoEntry": gatewayInfoEntry,
       "gatewayInfoIndex": gatewayInfoIndex,
       "gatewayInfoAddr": gatewayInfoAddr,
       "gatewayInfoStatus": gatewayInfoStatus,
       "igmpInfo": igmpInfo,
       "igmpInfoTable": igmpInfoTable,
       "igmpInfoEntry": igmpInfoEntry,
       "igmpInfoIndex": igmpInfoIndex,
       "igmpInfoGroupId": igmpInfoGroupId,
       "igmpInfoVlanId": igmpInfoVlanId,
       "igmpInfoSrcTrunk": igmpInfoSrcTrunk,
       "igmpInfoSrcPort": igmpInfoSrcPort,
       "igmpInfoVersion": igmpInfoVersion,
       "igmpInfoExpires": igmpInfoExpires,
       "igmpInfoMode": igmpInfoMode,
       "igmpInfoSourceIp": igmpInfoSourceIp,
       "igmpInfoFwd": igmpInfoFwd,
       "igmpInfoGrpExpires": igmpInfoGrpExpires,
       "igmpMrtrInfoTable": igmpMrtrInfoTable,
       "igmpMrtrInfoEntry": igmpMrtrInfoEntry,
       "igmpMrtrInfoIndex": igmpMrtrInfoIndex,
       "igmpMrtrInfoVlanId": igmpMrtrInfoVlanId,
       "igmpMrtrInfoPortId": igmpMrtrInfoPortId,
       "igmpMrtrInfoVersion": igmpMrtrInfoVersion,
       "igmpMrtrInfoExpires": igmpMrtrInfoExpires,
       "igmpMrtrInfoMrt": igmpMrtrInfoMrt,
       "igmpMrtrInfoQrv": igmpMrtrInfoQrv,
       "igmpMrtrInfoQqic": igmpMrtrInfoQqic,
       "igmpMrtrInfoSrcIp": igmpMrtrInfoSrcIp,
       "igmpClearTables": igmpClearTables,
       "ipInfo": ipInfo,
       "ipInfoRouterID": ipInfoRouterID,
       "ipInfoBootpRelayState": ipInfoBootpRelayState,
       "ipInfoBootpRelayAddr": ipInfoBootpRelayAddr,
       "ipInfoBootpRelayAddr2": ipInfoBootpRelayAddr2,
       "ipInfoFwdState": ipInfoFwdState,
       "ipInfoFwdDirectedBcast": ipInfoFwdDirectedBcast,
       "ipIntfInfo": ipIntfInfo,
       "ipIntfInfoTable": ipIntfInfoTable,
       "intfInfoEntry": intfInfoEntry,
       "intfInfoIndex": intfInfoIndex,
       "intfInfoAddr": intfInfoAddr,
       "intfInfoNetMask": intfInfoNetMask,
       "intfInfoBcastAddr": intfInfoBcastAddr,
       "intfInfoVlan": intfInfoVlan,
       "intfInfoStatus": intfInfoStatus,
       "rip2Info": rip2Info,
       "rip2GeneralInfo": rip2GeneralInfo,
       "ripInfoState": ripInfoState,
       "ripInfoUpdatePeriod": ripInfoUpdatePeriod,
       "rip2InfoIntfTable": rip2InfoIntfTable,
       "ripInfoIntfEntry": ripInfoIntfEntry,
       "ripInfoIntfIndex": ripInfoIntfIndex,
       "ripInfoIntfVersion": ripInfoIntfVersion,
       "ripInfoIntfAddress": ripInfoIntfAddress,
       "ripInfoIntfState": ripInfoIntfState,
       "ripInfoIntfListen": ripInfoIntfListen,
       "ripInfoIntfTrigUpdate": ripInfoIntfTrigUpdate,
       "ripInfoIntfMcastUpdate": ripInfoIntfMcastUpdate,
       "ripInfoIntfPoisonReverse": ripInfoIntfPoisonReverse,
       "ripInfoIntfSupply": ripInfoIntfSupply,
       "ripInfoIntfMetric": ripInfoIntfMetric,
       "ripInfoIntfAuth": ripInfoIntfAuth,
       "ripInfoIntfKey": ripInfoIntfKey,
       "ripInfoIntfDefault": ripInfoIntfDefault,
       "rip2InfoRtrTable": rip2InfoRtrTable,
       "ripInfoRtrEntry": ripInfoRtrEntry,
       "ripInfoRtrIndex": ripInfoRtrIndex,
       "ripInfoRtrDestIp": ripInfoRtrDestIp,
       "ripInfoRtrMask": ripInfoRtrMask,
       "ripInfoRtrGateway": ripInfoRtrGateway,
       "ripInfoRtrMetric": ripInfoRtrMetric,
       "bgpInfo": bgpInfo,
       "bgpInfoPeerTable": bgpInfoPeerTable,
       "bgpInfoPeerEntry": bgpInfoPeerEntry,
       "bgpInfoPeerIndex": bgpInfoPeerIndex,
       "bgpInfoPeerRemoteAddr": bgpInfoPeerRemoteAddr,
       "bgpInfoPeerVersion": bgpInfoPeerVersion,
       "bgpInfoPeerTtl": bgpInfoPeerTtl,
       "bgpInfoPeerRemoteAs": bgpInfoPeerRemoteAs,
       "bgpInfoPeerRouterId": bgpInfoPeerRouterId,
       "bgpInfoPeerState": bgpInfoPeerState,
       "bgpInfoPeerLastState": bgpInfoPeerLastState,
       "bgpInfoTotalReceivedPackets": bgpInfoTotalReceivedPackets,
       "bgpInfoTotalSentPackets": bgpInfoTotalSentPackets,
       "bgpInfoReceivedUpdates": bgpInfoReceivedUpdates,
       "bgpInfoSentUpdates": bgpInfoSentUpdates,
       "bgpInfoKeepalive": bgpInfoKeepalive,
       "bgpInfoHoldtime": bgpInfoHoldtime,
       "bgpInfoMinAdvTime": bgpInfoMinAdvTime,
       "bgpInfoLastErrorCode": bgpInfoLastErrorCode,
       "bgpInfoLastErrorSubCode": bgpInfoLastErrorSubCode,
       "bgpInfoEstTransitions": bgpInfoEstTransitions,
       "bgpInfoSummaryTable": bgpInfoSummaryTable,
       "bgpInfoSummaryEntry": bgpInfoSummaryEntry,
       "bgpInfoSummaryIndex": bgpInfoSummaryIndex,
       "bgpInfoSummaryRemoteAddr": bgpInfoSummaryRemoteAddr,
       "bgpInfoSummaryVersion": bgpInfoSummaryVersion,
       "bgpInfoSummaryRemoteAs": bgpInfoSummaryRemoteAs,
       "bgpInfoSummaryState": bgpInfoSummaryState,
       "bgpInfoSummaryTotalReceivedPackets": bgpInfoSummaryTotalReceivedPackets,
       "bgpInfoSummaryTotalSentPackets": bgpInfoSummaryTotalSentPackets,
       "bgpInfoRtrTable": bgpInfoRtrTable,
       "bgpInfoRtrTableEntry": bgpInfoRtrTableEntry,
       "bgpInfoIndex": bgpInfoIndex,
       "bgpInfoNetwork": bgpInfoNetwork,
       "bgpInfoNextHop": bgpInfoNextHop,
       "bgpInfoMetr": bgpInfoMetr,
       "bgpInfoLcPrf": bgpInfoLcPrf,
       "bgpInfoWght": bgpInfoWght,
       "bgpInfoPath": bgpInfoPath,
       "bgpInfoOrigin": bgpInfoOrigin,
       "bgpInfoMask": bgpInfoMask,
       "bgpInfoGroupTable": bgpInfoGroupTable,
       "bgpInfoGroupEntry": bgpInfoGroupEntry,
       "bgpInfoGroupIndex": bgpInfoGroupIndex,
       "bgpInfoGroupName": bgpInfoGroupName,
       "bgpInfoGroupRemoteAddr": bgpInfoGroupRemoteAddr,
       "bgpInfoGroupRemoteMask": bgpInfoGroupRemoteMask,
       "bgpInfoGroupLimit": bgpInfoGroupLimit,
       "bgpInfoGroupPeersNum": bgpInfoGroupPeersNum,
       "bgpInfoGroupState": bgpInfoGroupState,
       "bgpInfoGroupRASTable": bgpInfoGroupRASTable,
       "bgpInfoGroupRASEntry": bgpInfoGroupRASEntry,
       "bgpInfoGroupRASIndex": bgpInfoGroupRASIndex,
       "bgpInfoGroupRAS": bgpInfoGroupRAS,
       "bgpInfoDynamicPeerTable": bgpInfoDynamicPeerTable,
       "bgpInfoDynamicPeerEntry": bgpInfoDynamicPeerEntry,
       "bgpInfoDynamicPeerIndex": bgpInfoDynamicPeerIndex,
       "bgpInfoDynamicPeerRemoteAddr": bgpInfoDynamicPeerRemoteAddr,
       "bgpInfoDynamicPeerGroup": bgpInfoDynamicPeerGroup,
       "bgpInfoDynamicPeerVersion": bgpInfoDynamicPeerVersion,
       "bgpInfoDynamicPeerTtl": bgpInfoDynamicPeerTtl,
       "bgpInfoDynamicPeerRemoteAs": bgpInfoDynamicPeerRemoteAs,
       "bgpInfoDynamicPeerRouterId": bgpInfoDynamicPeerRouterId,
       "bgpInfoDynamicTotalReceivedPackets": bgpInfoDynamicTotalReceivedPackets,
       "bgpInfoDynamicTotalSentPackets": bgpInfoDynamicTotalSentPackets,
       "bgpInfoDynamicReceivedUpdates": bgpInfoDynamicReceivedUpdates,
       "bgpInfoDynamicSentUpdates": bgpInfoDynamicSentUpdates,
       "bgpInfoDynamicKeepalive": bgpInfoDynamicKeepalive,
       "bgpInfoDynamicHoldtime": bgpInfoDynamicHoldtime,
       "bgpInfoDynamicMinAdvTime": bgpInfoDynamicMinAdvTime,
       "nbrInfo": nbrInfo,
       "nbrInfoTable": nbrInfoTable,
       "nbrInfoEntry": nbrInfoEntry,
       "nbrInfoIndex": nbrInfoIndex,
       "nbrInfoDestIp": nbrInfoDestIp,
       "nbrInfoState": nbrInfoState,
       "nbrInfoMacAddr": nbrInfoMacAddr,
       "nbrInfoVlanId": nbrInfoVlanId,
       "nbrInfoPortNum": nbrInfoPortNum,
       "nbrInfoAge": nbrInfoAge,
       "nbrInfoInterface": nbrInfoInterface,
       "nbrClear": nbrClear,
       "gatewayIPv6Info": gatewayIPv6Info,
       "gatewayIPv6InfoTable": gatewayIPv6InfoTable,
       "gatewayIPv6InfoEntry": gatewayIPv6InfoEntry,
       "ipGatewayIPv6InfoIndex": ipGatewayIPv6InfoIndex,
       "ipGatewayIPv6InfoAddr": ipGatewayIPv6InfoAddr,
       "ipGatewayIPv6InfoState": ipGatewayIPv6InfoState,
       "ipRoute6Info": ipRoute6Info,
       "ipRoute6InfoTable": ipRoute6InfoTable,
       "ipRoute6InfoEntry": ipRoute6InfoEntry,
       "ipRoute6InfoIndx": ipRoute6InfoIndx,
       "ipRoute6InfoDestIp": ipRoute6InfoDestIp,
       "ipRoute6InfoPrefLen": ipRoute6InfoPrefLen,
       "ipRoute6InfoInterface": ipRoute6InfoInterface,
       "ipRoute6InfoNextHop": ipRoute6InfoNextHop,
       "ipRoute6InfoProto": ipRoute6InfoProto,
       "dhcpInfo": dhcpInfo,
       "dhcpInfoMacAddr": dhcpInfoMacAddr,
       "dhcpInfoAddr": dhcpInfoAddr,
       "dhcpInfoSubnetMask": dhcpInfoSubnetMask,
       "dhcpInfoDefaultGateway": dhcpInfoDefaultGateway,
       "dhcpInfoServer": dhcpInfoServer,
       "dhcpInfoLeaseObtained": dhcpInfoLeaseObtained,
       "dhcpInfoLeaseExpires": dhcpInfoLeaseExpires,
       "ipIntfLoopbackInfo": ipIntfLoopbackInfo,
       "ipIntfLoopbackInfoTable": ipIntfLoopbackInfoTable,
       "intfLoopbackInfoEntry": intfLoopbackInfoEntry,
       "intfLoopbackInfoIndex": intfLoopbackInfoIndex,
       "intfLoopbackInfoAddr": intfLoopbackInfoAddr,
       "intfLoopbackInfoNetMask": intfLoopbackInfoNetMask,
       "intfLoopbackInfoBcastAddr": intfLoopbackInfoBcastAddr,
       "intfLoopbackInfoStatus": intfLoopbackInfoStatus,
       "ospf3Info": ospf3Info,
       "ospf3GeneralInfo": ospf3GeneralInfo,
       "ospf3Version": ospf3Version,
       "ospf3RouterID": ospf3RouterID,
       "ospf3StartTime": ospf3StartTime,
       "ospf3ProcessUptime": ospf3ProcessUptime,
       "ospf3AreaBorderRouter": ospf3AreaBorderRouter,
       "ospf3ASBoundaryRouter": ospf3ASBoundaryRouter,
       "ospf3ExternalLsa": ospf3ExternalLsa,
       "ospf3IntfCountForRouter": ospf3IntfCountForRouter,
       "ospf3VlinkCountForRouter": ospf3VlinkCountForRouter,
       "ospf3NewLsaReceived": ospf3NewLsaReceived,
       "ospf3TotalLsaOriginated": ospf3TotalLsaOriginated,
       "ospf3TotalNumberOfAsScopeLsas": ospf3TotalNumberOfAsScopeLsas,
       "ospf3TotalNeighbours": ospf3TotalNeighbours,
       "ospf3NbrInXchgOrLoadState": ospf3NbrInXchgOrLoadState,
       "ospf3TotalAreas": ospf3TotalAreas,
       "ospf3TotalActiveAreas": ospf3TotalActiveAreas,
       "ospf3TotalNssaAreas": ospf3TotalNssaAreas,
       "ospf3OverFlowState": ospf3OverFlowState,
       "ospf3SpfDelay": ospf3SpfDelay,
       "ospf3SpfHoldTime": ospf3SpfHoldTime,
       "ospf3ABRType": ospf3ABRType,
       "ospf3NssaAsbrDefRtTrans": ospf3NssaAsbrDefRtTrans,
       "ospf3AreaInfoTable": ospf3AreaInfoTable,
       "ospf3AreaInfoEntry": ospf3AreaInfoEntry,
       "ospf3AreaInfoIndex": ospf3AreaInfoIndex,
       "ospf3AreaInfoId": ospf3AreaInfoId,
       "ospf3AreaInfoStatus": ospf3AreaInfoStatus,
       "ospf3TotalNumberOfInterfaces": ospf3TotalNumberOfInterfaces,
       "ospf3NumberOfInterfacesUp": ospf3NumberOfInterfacesUp,
       "ospf3AreaInfoSPF": ospf3AreaInfoSPF,
       "ospf3NumberOfLsdbEntries": ospf3NumberOfLsdbEntries,
       "ospf3AreaInfoAreaBorderRouter": ospf3AreaInfoAreaBorderRouter,
       "ospf3AreaInfoASBoundaryRouter": ospf3AreaInfoASBoundaryRouter,
       "ospf3AreaInfoNeighborsFULLstate": ospf3AreaInfoNeighborsFULLstate,
       "ospf3AreaInfoVirtNeighborsFULLstate": ospf3AreaInfoVirtNeighborsFULLstate,
       "ospf3IntfInfoTable": ospf3IntfInfoTable,
       "ospf3IntfInfoEntry": ospf3IntfInfoEntry,
       "ospf3IfInfoIndex": ospf3IfInfoIndex,
       "ospf3IfInfoInstanceID": ospf3IfInfoInstanceID,
       "ospf3IfInfoLLocalAddress": ospf3IfInfoLLocalAddress,
       "ospf3IfInfoAreaID": ospf3IfInfoAreaID,
       "ospf3IfInfoAdminStatus": ospf3IfInfoAdminStatus,
       "ospf3IfInfoPassive": ospf3IfInfoPassive,
       "ospf3IfInfoNetworkType": ospf3IfInfoNetworkType,
       "ospf3IfInfoState": ospf3IfInfoState,
       "ospf3IfInfoPriority": ospf3IfInfoPriority,
       "ospf3IfInfoDesignatedRouterID": ospf3IfInfoDesignatedRouterID,
       "ospf3IfInfoBackupDesignatedRouterID": ospf3IfInfoBackupDesignatedRouterID,
       "ospf3IfInfoHello": ospf3IfInfoHello,
       "ospf3IfInfoDead": ospf3IfInfoDead,
       "ospf3IfInfoPoll": ospf3IfInfoPoll,
       "ospf3IfInfoRetransmit": ospf3IfInfoRetransmit,
       "ospf3IfInfoTransitDelay": ospf3IfInfoTransitDelay,
       "ospf3IfInfoTotalNeighbours": ospf3IfInfoTotalNeighbours,
       "ospf3IfInfoEvents": ospf3IfInfoEvents,
       "ospf3IfInfoMetricCost": ospf3IfInfoMetricCost,
       "ospf3IfInfoAuthSpi": ospf3IfInfoAuthSpi,
       "ospf3IfInfoAuthEnable": ospf3IfInfoAuthEnable,
       "ospf3IfInfoAuthType": ospf3IfInfoAuthType,
       "ospf3IfInfoAuthKey": ospf3IfInfoAuthKey,
       "ospf3IfInfoEncrySpi": ospf3IfInfoEncrySpi,
       "ospf3IfInfoEncryEnable": ospf3IfInfoEncryEnable,
       "ospf3IfInfoEncryType": ospf3IfInfoEncryType,
       "ospf3IfInfoEncryKey": ospf3IfInfoEncryKey,
       "ospf3IfInfoEncryAuthType": ospf3IfInfoEncryAuthType,
       "ospf3IfInfoEncryAuthKey": ospf3IfInfoEncryAuthKey,
       "ospf3IfInfoLsaSupress": ospf3IfInfoLsaSupress,
       "ospf3VirtIntfInfoTable": ospf3VirtIntfInfoTable,
       "ospf3VirtIntfInfoEntry": ospf3VirtIntfInfoEntry,
       "ospf3VirtIfInfoIndex": ospf3VirtIfInfoIndex,
       "ospf3VirtIfInfoAreaId": ospf3VirtIfInfoAreaId,
       "ospf3VirtIfInfoNeighbor": ospf3VirtIfInfoNeighbor,
       "ospf3VirtIfInfoTransitDelay": ospf3VirtIfInfoTransitDelay,
       "ospf3VirtIfInfoRetransInterval": ospf3VirtIfInfoRetransInterval,
       "ospf3VirtIfInfoHelloInterval": ospf3VirtIfInfoHelloInterval,
       "ospf3VirtIfInfoRtrDeadInterval": ospf3VirtIfInfoRtrDeadInterval,
       "ospf3VirtIfInfoState": ospf3VirtIfInfoState,
       "ospf3VirtIfInfoEvents": ospf3VirtIfInfoEvents,
       "ospf3VirtIfInfoStatus": ospf3VirtIfInfoStatus,
       "ospf3VirtIfInfoLinkScopeLsaCount": ospf3VirtIfInfoLinkScopeLsaCount,
       "ospf3VirtIfInfoLinkLsaCksumSum": ospf3VirtIfInfoLinkLsaCksumSum,
       "ospf3IfNbrTable": ospf3IfNbrTable,
       "ospf3IfNbrEntry": ospf3IfNbrEntry,
       "ospf3IfNbrInfoIndex": ospf3IfNbrInfoIndex,
       "ospf3IfNbrIntfIndex": ospf3IfNbrIntfIndex,
       "ospf3IfNbrIntfInstanceID": ospf3IfNbrIntfInstanceID,
       "ospf3IfNbrRtrID": ospf3IfNbrRtrID,
       "ospf3IfNbrIpAddress": ospf3IfNbrIpAddress,
       "ospf3IfNbrPriority": ospf3IfNbrPriority,
       "ospf3IfNbrState": ospf3IfNbrState,
       "ospf3IfNbrEvents": ospf3IfNbrEvents,
       "ospf3RoutesInfoTable": ospf3RoutesInfoTable,
       "ospf3RoutesInfoEntry": ospf3RoutesInfoEntry,
       "ospf3RoutesInfoIndex": ospf3RoutesInfoIndex,
       "ospf3RoutesInfoDestination": ospf3RoutesInfoDestination,
       "ospf3RoutesInfoPrefixLen": ospf3RoutesInfoPrefixLen,
       "ospf3RoutesInfoNextHop": ospf3RoutesInfoNextHop,
       "ospf3RoutesInfoType": ospf3RoutesInfoType,
       "ospf3RoutesInfoAreaId": ospf3RoutesInfoAreaId,
       "ospf3RoutesInfoCost": ospf3RoutesInfoCost,
       "ospf3RoutesInfoType2Cost": ospf3RoutesInfoType2Cost,
       "ospf3RoutesInfoInterfaceIndex": ospf3RoutesInfoInterfaceIndex,
       "ipEcmpRoutingInfo": ipEcmpRoutingInfo,
       "ipRouteEcmpInfoTable": ipRouteEcmpInfoTable,
       "ipRouteEcmpInfoEntry": ipRouteEcmpInfoEntry,
       "ipRouteEcmpInfoDestIndx": ipRouteEcmpInfoDestIndx,
       "ipRouteEcmpInfoGwIndx": ipRouteEcmpInfoGwIndx,
       "ipRouteEcmpInfoDest": ipRouteEcmpInfoDest,
       "ipRouteEcmpInfoMask": ipRouteEcmpInfoMask,
       "ipRouteEcmpInfoGateway": ipRouteEcmpInfoGateway,
       "ipRouteEcmpInfoInterface": ipRouteEcmpInfoInterface,
       "ipRouteEcmpInfoGwStatus": ipRouteEcmpInfoGwStatus,
       "ipEcmpHash": ipEcmpHash,
       "ipEcmpHashSIPAddr": ipEcmpHashSIPAddr,
       "ipEcmpHashDIPAddr": ipEcmpHashDIPAddr,
       "ipEcmpHashNumberPaths": ipEcmpHashNumberPaths,
       "ipEcmpHashRouteNumber": ipEcmpHashRouteNumber,
       "ipv6PmtuInfo": ipv6PmtuInfo,
       "ipv6PmtuInfoTable": ipv6PmtuInfoTable,
       "ipv6PmtuInfoEntry": ipv6PmtuInfoEntry,
       "ipv6PmtuInfoIndx": ipv6PmtuInfoIndx,
       "ipv6PmtuInfoDestIp": ipv6PmtuInfoDestIp,
       "ipv6PmtuInfoSinceTime": ipv6PmtuInfoSinceTime,
       "ipv6PmtuInfoValue": ipv6PmtuInfoValue,
       "mldInfo": mldInfo,
       "mldInfoGroupsTable": mldInfoGroupsTable,
       "mldInfoGroupEntry": mldInfoGroupEntry,
       "mldInfoGroupIfIndex": mldInfoGroupIfIndex,
       "mldInfoGroupAddress": mldInfoGroupAddress,
       "mldInfoGroupPortNumber": mldInfoGroupPortNumber,
       "mldInfoGroupVlanID": mldInfoGroupVlanID,
       "mldInfoGroupLastReporter": mldInfoGroupLastReporter,
       "mldInfoGroupSource": mldInfoGroupSource,
       "mldInfoGroupFilterType": mldInfoGroupFilterType,
       "mldInfoGroupExpiryTime": mldInfoGroupExpiryTime,
       "mldInfoGroupVersion": mldInfoGroupVersion,
       "mldInfoGroupFwd": mldInfoGroupFwd,
       "mldInfoGroupId": mldInfoGroupId,
       "mldInfoMRoutersTable": mldInfoMRoutersTable,
       "mldInfoMRouterEntry": mldInfoMRouterEntry,
       "mldInfoMRouterIfIndex": mldInfoMRouterIfIndex,
       "mldInfoMRouterSrcIp": mldInfoMRouterSrcIp,
       "mldInfoMRouterPortNumber": mldInfoMRouterPortNumber,
       "mldInfoMRouterVlan": mldInfoMRouterVlan,
       "mldInfoMRouterQrv": mldInfoMRouterQrv,
       "mldInfoMRouterQqic": mldInfoMRouterQqic,
       "mldInfoMRouterMaxRespDelay": mldInfoMRouterMaxRespDelay,
       "mldInfoMRouterVersion": mldInfoMRouterVersion,
       "mldInfoMRouterExpiryTime": mldInfoMRouterExpiryTime,
       "mldInfoMRouterId": mldInfoMRouterId,
       "mldClearTables": mldClearTables,
       "mldInfoInterfaceTable": mldInfoInterfaceTable,
       "mldInfoInterfaceEntry": mldInfoInterfaceEntry,
       "mldInfoInterfaceIfIndex": mldInfoInterfaceIfIndex,
       "mldInfoInterfaceState": mldInfoInterfaceState,
       "mldInfoInterfaceVersion": mldInfoInterfaceVersion,
       "mldInfoInterfaceQuerierStatus": mldInfoInterfaceQuerierStatus,
       "mldInfoInterfaceQuerier": mldInfoInterfaceQuerier,
       "mldInfoInterfaceQuerierExpiryTime": mldInfoInterfaceQuerierExpiryTime,
       "mldInfoInterfaceQuerierPort": mldInfoInterfaceQuerierPort,
       "mldInfoInterfaceGroups": mldInfoInterfaceGroups,
       "ipsecInfo": ipsecInfo,
       "ipsecSaInfoTable": ipsecSaInfoTable,
       "ipsecSaInfoEntry": ipsecSaInfoEntry,
       "ipsecSaInfoIndex": ipsecSaInfoIndex,
       "ipsecSaInfoSpi": ipsecSaInfoSpi,
       "ipsecSaInfoProto": ipsecSaInfoProto,
       "ipsecSaInfoDstAddr": ipsecSaInfoDstAddr,
       "ipsecSaInfoSrcAddr": ipsecSaInfoSrcAddr,
       "ipsecSaInfoFlags": ipsecSaInfoFlags,
       "ipsecSaInfoUlp": ipsecSaInfoUlp,
       "ipsecSaInfoMode": ipsecSaInfoMode,
       "ipsecSaInfoAuthAlg": ipsecSaInfoAuthAlg,
       "ipsecSaInfoAuthKey": ipsecSaInfoAuthKey,
       "ipsecSaInfoEncrAlg": ipsecSaInfoEncrAlg,
       "ipsecSaInfoEncrKey": ipsecSaInfoEncrKey,
       "ipsecSpdInfoTable": ipsecSpdInfoTable,
       "ipsecSpdInfoEntry": ipsecSpdInfoEntry,
       "ipsecSpdInfoIndex": ipsecSpdInfoIndex,
       "ipsecSpdInfoFlags": ipsecSpdInfoFlags,
       "ipsecSpdInfoULP": ipsecSpdInfoULP,
       "ipsecSpdInfoAction": ipsecSpdInfoAction,
       "ipsecSpdInfoDstAddr": ipsecSpdInfoDstAddr,
       "ipsecSpdInfoSrcAddr": ipsecSpdInfoSrcAddr,
       "ipsecSpdInfoMode": ipsecSpdInfoMode,
       "ipsecSpdInfoSaSize": ipsecSpdInfoSaSize,
       "ipsecSpdInfoSaTable": ipsecSpdInfoSaTable,
       "ipsecSpdInfoSaEntry": ipsecSpdInfoSaEntry,
       "ipsecSpdInfoSaIndex": ipsecSpdInfoSaIndex,
       "ipsecSpdInfoSaSecuProto": ipsecSpdInfoSaSecuProto,
       "ipsecSpdInfoSaAuthAlg": ipsecSpdInfoSaAuthAlg,
       "ipsecSpdInfoSaEncrAlg": ipsecSpdInfoSaEncrAlg,
       "ipsecSpdInfoSaEncrKeyLen": ipsecSpdInfoSaEncrKeyLen,
       "dhcpsnpInfo": dhcpsnpInfo,
       "dhcpSnoopingBindingInfoTable": dhcpSnoopingBindingInfoTable,
       "dhcpSnoopingBindingInfoEntry": dhcpSnoopingBindingInfoEntry,
       "dhcpSnoopingBindingInfoIndex": dhcpSnoopingBindingInfoIndex,
       "dhcpSnoopingBindingInfoMac": dhcpSnoopingBindingInfoMac,
       "dhcpSnoopingBindingInfoIp": dhcpSnoopingBindingInfoIp,
       "dhcpSnoopingBindingInfoVLAN": dhcpSnoopingBindingInfoVLAN,
       "dhcpSnoopingBindingInfoPort": dhcpSnoopingBindingInfoPort,
       "dhcpSnoopingBindingInfoExpiry": dhcpSnoopingBindingInfoExpiry,
       "dhcpSnoopingBindingInfoType": dhcpSnoopingBindingInfoType,
       "layer3Oper": layer3Oper,
       "vrrpOper": vrrpOper,
       "vrrpOperVirtRtrTable": vrrpOperVirtRtrTable,
       "vrrpOperVirtRtrEntry": vrrpOperVirtRtrEntry,
       "vrrpOperVirtRtrIndex": vrrpOperVirtRtrIndex,
       "vrrpOperVirtRtrBackup": vrrpOperVirtRtrBackup,
       "vrrpOperVirtRtrGroupBackup": vrrpOperVirtRtrGroupBackup,
       "traps": traps,
       "ibmSNMPv2Notifications": ibmSNMPv2Notifications,
       "swPrimaryPowerSupplyFailureNotify": swPrimaryPowerSupplyFailureNotify,
       "swPrimaryPowerSupplyFailure": swPrimaryPowerSupplyFailure,
       "swDefGwUp": swDefGwUp,
       "swDefGwDown": swDefGwDown,
       "swDefGwInService": swDefGwInService,
       "swDefGwNotInService": swDefGwNotInService,
       "swVrrpNewMaster": swVrrpNewMaster,
       "swVrrpNewBackup": swVrrpNewBackup,
       "swVrrpAuthFailure": swVrrpAuthFailure,
       "swLoginFailure": swLoginFailure,
       "swTempExceedThreshold": swTempExceedThreshold,
       "swFanFailure": swFanFailure,
       "swValidLogin": swValidLogin,
       "swApplyComplete": swApplyComplete,
       "swSaveComplete": swSaveComplete,
       "swFwDownloadSucess": swFwDownloadSucess,
       "swFwDownloadFailure": swFwDownloadFailure,
       "swTempReturnThreshold": swTempReturnThreshold,
       "swFanFailureFixed": swFanFailureFixed,
       "swStgNewRoot": swStgNewRoot,
       "swCistNewRoot": swCistNewRoot,
       "swStgTopologyChanged": swStgTopologyChanged,
       "swCistTopologyChanged": swCistTopologyChanged,
       "swHotlinksMasterUp": swHotlinksMasterUp,
       "swHotlinksMasterDn": swHotlinksMasterDn,
       "swHotlinksBackupUp": swHotlinksBackupUp,
       "swHotlinksBackupDn": swHotlinksBackupDn,
       "swHotlinksNone": swHotlinksNone,
       "sfpInserted": sfpInserted,
       "sfpRemoved": sfpRemoved,
       "swNTPSyncFailed": swNTPSyncFailed,
       "swNTPUpdateClock": swNTPUpdateClock,
       "swValidLogout": swValidLogout,
       "swECMPGatewayUp": swECMPGatewayUp,
       "swECMPGatewayDown": swECMPGatewayDown,
       "swTeamingCtrlUp": swTeamingCtrlUp,
       "swTeamingCtrlDown": swTeamingCtrlDown,
       "swTeamingCtrlDownTearDownBlked": swTeamingCtrlDownTearDownBlked,
       "swTeamingCtrlError": swTeamingCtrlError,
       "swLACPPortBlocked": swLACPPortBlocked,
       "swLACPPortUnblocked": swLACPPortUnblocked,
       "swVMGroupVMotion": swVMGroupVMotion,
       "swVMGroupVMOnline": swVMGroupVMOnline,
       "swVMGroupVMVlanChange": swVMGroupVMVlanChange,
       "swPrimaryPowerSupplyFixedNotify": swPrimaryPowerSupplyFixedNotify,
       "swPrimaryPowerSupplyFixed": swPrimaryPowerSupplyFixed,
       "swLFDPortErrdisabled": swLFDPortErrdisabled,
       "swVlagInstanceUp": swVlagInstanceUp,
       "swVlagInstanceRemoteUp": swVlagInstanceRemoteUp,
       "swVlagInstanceLocalUp": swVlagInstanceLocalUp,
       "swVlagInstanceDown": swVlagInstanceDown,
       "swVlagIslUp": swVlagIslUp,
       "swVlagIslDown": swVlagIslDown,
       "swOflowConnectControllerFailure": swOflowConnectControllerFailure,
       "swOflowConnectControllerSuccess": swOflowConnectControllerSuccess,
       "swOflowEmergencyState": swOflowEmergencyState,
       "swOflowNoEmergencyState": swOflowNoEmergencyState,
       "swOflowSwitchOflowMode": swOflowSwitchOflowMode,
       "swOflowSwitcNormalMode": swOflowSwitcNormalMode,
       "swOflowSwitcFlowtableClr": swOflowSwitcFlowtableClr,
       "swOflowSwitcStatsClr": swOflowSwitcStatsClr,
       "swOflowFlowtableEntryUnavail": swOflowFlowtableEntryUnavail,
       "swOflowFlowtableLimit": swOflowFlowtableLimit,
       "swOflowPortDownController": swOflowPortDownController,
       "swOflowPortUpController": swOflowPortUpController,
       "swOflowVersionNegotiationError": swOflowVersionNegotiationError,
       "sw8021x": sw8021x,
       "swDefAdminDisable": swDefAdminDisable,
       "swAcntStrngPswdNotMet": swAcntStrngPswdNotMet,
       "swAcntLocked": swAcntLocked,
       "swAcntUnlocked": swAcntUnlocked,
       "swARPtablefull": swARPtablefull,
       "swTrapDisplayString": swTrapDisplayString,
       "qos": qos,
       "qosConfig": qosConfig,
       "qos8021p": qos8021p,
       "qosCurCfgPortPriorityTable": qosCurCfgPortPriorityTable,
       "qosCurCfgPortPriorityEntry": qosCurCfgPortPriorityEntry,
       "qosCurCfgPortIndex": qosCurCfgPortIndex,
       "qosCurCfgPortPriority": qosCurCfgPortPriority,
       "qosNewCfgPortPriorityTable": qosNewCfgPortPriorityTable,
       "qosNewCfgPortPriorityEntry": qosNewCfgPortPriorityEntry,
       "qosNewCfgPortIndex": qosNewCfgPortIndex,
       "qosNewCfgPortPriority": qosNewCfgPortPriority,
       "qosCurCfgPriorityCoSTable": qosCurCfgPriorityCoSTable,
       "qosCurCfgPriorityCoSEntry": qosCurCfgPriorityCoSEntry,
       "qosCurCfgPriorityIndex": qosCurCfgPriorityIndex,
       "qosCurCfgPriorityCoSq": qosCurCfgPriorityCoSq,
       "qosNewCfgPriorityCoSTable": qosNewCfgPriorityCoSTable,
       "qosNewCfgPriorityCoSEntry": qosNewCfgPriorityCoSEntry,
       "qosNewCfgPriorityIndex": qosNewCfgPriorityIndex,
       "qosNewCfgPriorityCoSq": qosNewCfgPriorityCoSq,
       "qosCurCfgCosWeightTable": qosCurCfgCosWeightTable,
       "qosCurCfgCosWeightEntry": qosCurCfgCosWeightEntry,
       "qosCurCfgCosIndex": qosCurCfgCosIndex,
       "qosCurCfgCosWeight": qosCurCfgCosWeight,
       "qosNewCfgCosWeightTable": qosNewCfgCosWeightTable,
       "qosNewCfgCosWeightEntry": qosNewCfgCosWeightEntry,
       "qosNewCfgCosIndex": qosNewCfgCosIndex,
       "qosNewCfgCosWeight": qosNewCfgCosWeight,
       "qosCurCfgCosNum": qosCurCfgCosNum,
       "qosDefaultCfg": qosDefaultCfg,
       "qosdscp": qosdscp,
       "qosCurCfgDscpTable": qosCurCfgDscpTable,
       "qosCurCfgDscpEntry": qosCurCfgDscpEntry,
       "qosCurCfgDscpIndex": qosCurCfgDscpIndex,
       "qosCurCfgMapDscp": qosCurCfgMapDscp,
       "qosCurCfgMap8021p": qosCurCfgMap8021p,
       "qosNewCfgDscpTable": qosNewCfgDscpTable,
       "qosNewCfgDscpEntry": qosNewCfgDscpEntry,
       "qosNewCfgDscpIndex": qosNewCfgDscpIndex,
       "qosNewCfgMapDscp": qosNewCfgMapDscp,
       "qosNewCfgMap8021p": qosNewCfgMap8021p,
       "qosCurCfgDscpState": qosCurCfgDscpState,
       "qosNewCfgDscpState": qosNewCfgDscpState,
       "qoswredecn": qoswredecn,
       "qosCurCfgPortProfileTable": qosCurCfgPortProfileTable,
       "qoSCurCfgPortProfileEntry": qoSCurCfgPortProfileEntry,
       "qosCurCfgProfilePortIndex": qosCurCfgProfilePortIndex,
       "qosCurCfgTrqIndex": qosCurCfgTrqIndex,
       "qosCurCfgTrqNonTcpMin": qosCurCfgTrqNonTcpMin,
       "qosCurCfgTrqNonTcpMax": qosCurCfgTrqNonTcpMax,
       "qosCurCfgTrqNonTcpRate": qosCurCfgTrqNonTcpRate,
       "qosCurCfgTrqTcpMin": qosCurCfgTrqTcpMin,
       "qosCurCfgTrqTcpMax": qosCurCfgTrqTcpMax,
       "qosCurCfgTrqTcpRate": qosCurCfgTrqTcpRate,
       "qosCurCfgPortTrqWredState": qosCurCfgPortTrqWredState,
       "qosNewCfgPortProfileTable": qosNewCfgPortProfileTable,
       "qoSNewCfgPortProfileEntry": qoSNewCfgPortProfileEntry,
       "qosNewCfgProfilePortIndex": qosNewCfgProfilePortIndex,
       "qosNewCfgTrqIndex": qosNewCfgTrqIndex,
       "qosNewCfgTrqNonTcpMin": qosNewCfgTrqNonTcpMin,
       "qosNewCfgTrqNonTcpMax": qosNewCfgTrqNonTcpMax,
       "qosNewCfgTrqNonTcpRate": qosNewCfgTrqNonTcpRate,
       "qosNewCfgTrqTcpMin": qosNewCfgTrqTcpMin,
       "qosNewCfgTrqTcpMax": qosNewCfgTrqTcpMax,
       "qosNewCfgTrqTcpRate": qosNewCfgTrqTcpRate,
       "qosNewCfgPortTrqWredState": qosNewCfgPortTrqWredState,
       "qosCurCfgPortStateTable": qosCurCfgPortStateTable,
       "qoSCurCfgPortStateEntry": qoSCurCfgPortStateEntry,
       "qosCurCfgStatePortIndex": qosCurCfgStatePortIndex,
       "qosCurCfgPortWredState": qosCurCfgPortWredState,
       "qosCurCfgPortEcnState": qosCurCfgPortEcnState,
       "qosNewCfgPortStateTable": qosNewCfgPortStateTable,
       "qoSNewCfgPortStateEntry": qoSNewCfgPortStateEntry,
       "qosNewCfgStatePortIndex": qosNewCfgStatePortIndex,
       "qosNewCfgPortWredState": qosNewCfgPortWredState,
       "qosNewCfgPortEcnState": qosNewCfgPortEcnState,
       "qosCurCfgGlobalProfileTable": qosCurCfgGlobalProfileTable,
       "qoSCurCfgGlobalProfileEntry": qoSCurCfgGlobalProfileEntry,
       "qosCurCfgGlobalTrqIndex": qosCurCfgGlobalTrqIndex,
       "qosCurCfgGlobalTrqNonTcpMin": qosCurCfgGlobalTrqNonTcpMin,
       "qosCurCfgGlobalTrqNonTcpMax": qosCurCfgGlobalTrqNonTcpMax,
       "qosCurCfgGlobalTrqNonTcpRate": qosCurCfgGlobalTrqNonTcpRate,
       "qosCurCfgGlobalTrqTcpMin": qosCurCfgGlobalTrqTcpMin,
       "qosCurCfgGlobalTrqTcpMax": qosCurCfgGlobalTrqTcpMax,
       "qosCurCfgGlobalTrqTcpRate": qosCurCfgGlobalTrqTcpRate,
       "qosCurCfgGlobalTrqWredState": qosCurCfgGlobalTrqWredState,
       "qosNewCfgGlobalProfileTable": qosNewCfgGlobalProfileTable,
       "qoSNewCfgGlobalProfileEntry": qoSNewCfgGlobalProfileEntry,
       "qosNewCfgGlobalTrqIndex": qosNewCfgGlobalTrqIndex,
       "qosNewCfgGlobalTrqNonTcpMin": qosNewCfgGlobalTrqNonTcpMin,
       "qosNewCfgGlobalTrqNonTcpMax": qosNewCfgGlobalTrqNonTcpMax,
       "qosNewCfgGlobalTrqNonTcpRate": qosNewCfgGlobalTrqNonTcpRate,
       "qosNewCfgGlobalTrqTcpMin": qosNewCfgGlobalTrqTcpMin,
       "qosNewCfgGlobalTrqTcpMax": qosNewCfgGlobalTrqTcpMax,
       "qosNewCfgGlobalTrqTcpRate": qosNewCfgGlobalTrqTcpRate,
       "qosNewCfgGlobalTrqWredState": qosNewCfgGlobalTrqWredState,
       "qosCurCfgGlobalWredState": qosCurCfgGlobalWredState,
       "qosCurCfgGlobalEcnState": qosCurCfgGlobalEcnState,
       "qosNewCfgGlobalWredState": qosNewCfgGlobalWredState,
       "qosNewCfgGlobalEcnState": qosNewCfgGlobalEcnState,
       "acl": acl,
       "acConfig": acConfig,
       "acList": acList,
       "aclCurCfgTable": aclCurCfgTable,
       "aclCurCfgEntry": aclCurCfgEntry,
       "aclCurCfgIndex": aclCurCfgIndex,
       "aclCurCfgGroup": aclCurCfgGroup,
       "aclCurCfgFilterAction": aclCurCfgFilterAction,
       "aclCurCfgFilterActionSetPrio": aclCurCfgFilterActionSetPrio,
       "aclCurCfgEthFmt": aclCurCfgEthFmt,
       "aclCurCfgTagFmt": aclCurCfgTagFmt,
       "aclCurCfgIPFmt": aclCurCfgIPFmt,
       "aclCurCfgSrcMACAddress": aclCurCfgSrcMACAddress,
       "aclCurCfgSrcMACMask": aclCurCfgSrcMACMask,
       "aclCurCfgDstMACAddress": aclCurCfgDstMACAddress,
       "aclCurCfgDstMACMask": aclCurCfgDstMACMask,
       "aclCurCfgEthernetTypeName": aclCurCfgEthernetTypeName,
       "aclCurCfgEthernetTypeValue": aclCurCfgEthernetTypeValue,
       "aclCurCfgVLanId": aclCurCfgVLanId,
       "aclCurCfgVLanMask": aclCurCfgVLanMask,
       "aclCurCfg8021pPriority": aclCurCfg8021pPriority,
       "aclCurCfgTypeOfService": aclCurCfgTypeOfService,
       "aclCurCfgProtocol": aclCurCfgProtocol,
       "aclCurCfgSrcIPAddress": aclCurCfgSrcIPAddress,
       "aclCurCfgSrcIPMask": aclCurCfgSrcIPMask,
       "aclCurCfgDstIPAddress": aclCurCfgDstIPAddress,
       "aclCurCfgDstIPMask": aclCurCfgDstIPMask,
       "aclCurCfgSrcPort": aclCurCfgSrcPort,
       "aclCurCfgSrcPortMask": aclCurCfgSrcPortMask,
       "aclCurCfgDstPort": aclCurCfgDstPort,
       "aclCurCfgDstPortMask": aclCurCfgDstPortMask,
       "aclCurCfgTCPFlags": aclCurCfgTCPFlags,
       "aclCurCfgEgressPorts": aclCurCfgEgressPorts,
       "aclCurCfgStatistics": aclCurCfgStatistics,
       "aclCurCfgTCPFlagsMask": aclCurCfgTCPFlagsMask,
       "aclCurCfgMeterAction": aclCurCfgMeterAction,
       "aclCurCfgMeterEnable": aclCurCfgMeterEnable,
       "aclCurCfgKbitsSec": aclCurCfgKbitsSec,
       "aclCurCfgKbitsBurst": aclCurCfgKbitsBurst,
       "aclCurCfgUser": aclCurCfgUser,
       "aclCurCfgInprofDscp": aclCurCfgInprofDscp,
       "aclCurCfgTos": aclCurCfgTos,
       "aclCurCfgOutprofDscp": aclCurCfgOutprofDscp,
       "aclCurCfgUserEnable": aclCurCfgUserEnable,
       "aclCurCfgInprofDscpEnable": aclCurCfgInprofDscpEnable,
       "aclCurCfgOutprofDscpEnable": aclCurCfgOutprofDscpEnable,
       "aclCurCfgMirrorPort": aclCurCfgMirrorPort,
       "aclCurCfgLog": aclCurCfgLog,
       "aclNewCfgTable": aclNewCfgTable,
       "aclNewCfgEntry": aclNewCfgEntry,
       "aclNewCfgIndex": aclNewCfgIndex,
       "aclNewCfgGroup": aclNewCfgGroup,
       "aclNewCfgFilterAction": aclNewCfgFilterAction,
       "aclNewCfgFilterActionSetPrio": aclNewCfgFilterActionSetPrio,
       "aclNewCfgEthFmt": aclNewCfgEthFmt,
       "aclNewCfgTagFmt": aclNewCfgTagFmt,
       "aclNewCfgIPFmt": aclNewCfgIPFmt,
       "aclNewCfgSrcMACAddress": aclNewCfgSrcMACAddress,
       "aclNewCfgSrcMACMask": aclNewCfgSrcMACMask,
       "aclNewCfgDstMACAddress": aclNewCfgDstMACAddress,
       "aclNewCfgDstMACMask": aclNewCfgDstMACMask,
       "aclNewCfgEthernetTypeName": aclNewCfgEthernetTypeName,
       "aclNewCfgEthernetTypeValue": aclNewCfgEthernetTypeValue,
       "aclNewCfgVLanId": aclNewCfgVLanId,
       "aclNewCfgVLanMask": aclNewCfgVLanMask,
       "aclNewCfg8021pPriority": aclNewCfg8021pPriority,
       "aclNewCfgTypeOfService": aclNewCfgTypeOfService,
       "aclNewCfgProtocol": aclNewCfgProtocol,
       "aclNewCfgSrcIPAddress": aclNewCfgSrcIPAddress,
       "aclNewCfgSrcIPMask": aclNewCfgSrcIPMask,
       "aclNewCfgDstIPAddress": aclNewCfgDstIPAddress,
       "aclNewCfgDstIPMask": aclNewCfgDstIPMask,
       "aclNewCfgSrcPort": aclNewCfgSrcPort,
       "aclNewCfgSrcPortMask": aclNewCfgSrcPortMask,
       "aclNewCfgDstPort": aclNewCfgDstPort,
       "aclNewCfgDstPortMask": aclNewCfgDstPortMask,
       "aclNewCfgTCPFlags": aclNewCfgTCPFlags,
       "aclNewCfgEgressPorts": aclNewCfgEgressPorts,
       "aclNewCfgStatistics": aclNewCfgStatistics,
       "aclNewCfgAddEgressPort": aclNewCfgAddEgressPort,
       "aclNewCfgRemoveEgressPort": aclNewCfgRemoveEgressPort,
       "aclNewCfgDelete": aclNewCfgDelete,
       "aclNewCfgTCPFlagsMask": aclNewCfgTCPFlagsMask,
       "aclNewCfgMeterAction": aclNewCfgMeterAction,
       "aclNewCfgMeterEnable": aclNewCfgMeterEnable,
       "aclNewCfgKbitsSec": aclNewCfgKbitsSec,
       "aclNewCfgKbitsBurst": aclNewCfgKbitsBurst,
       "aclNewCfgUser": aclNewCfgUser,
       "aclNewCfgInprofDscp": aclNewCfgInprofDscp,
       "aclNewCfgTos": aclNewCfgTos,
       "aclNewCfgOutprofDscp": aclNewCfgOutprofDscp,
       "aclNewCfgUserEnable": aclNewCfgUserEnable,
       "aclNewCfgInprofDscpEnable": aclNewCfgInprofDscpEnable,
       "aclNewCfgOutprofDscpEnable": aclNewCfgOutprofDscpEnable,
       "aclNewCfgReset": aclNewCfgReset,
       "aclNewCfgEthernetReset": aclNewCfgEthernetReset,
       "aclNewCfgIpv4Reset": aclNewCfgIpv4Reset,
       "aclNewCfgTcpudpReset": aclNewCfgTcpudpReset,
       "aclNewCfgMeterReset": aclNewCfgMeterReset,
       "aclNewCfgRemarkReset": aclNewCfgRemarkReset,
       "aclNewCfgRemarkInprofReset": aclNewCfgRemarkInprofReset,
       "aclNewCfgRemarkOutprofReset": aclNewCfgRemarkOutprofReset,
       "aclNewCfgPktfmtReset": aclNewCfgPktfmtReset,
       "aclNewCfgMirrorPort": aclNewCfgMirrorPort,
       "aclNewCfgLog": aclNewCfgLog,
       "aclTableMaxSize": aclTableMaxSize,
       "aclGroup": aclGroup,
       "aclGroupCurCfgTable": aclGroupCurCfgTable,
       "aclGroupCurCfgEntry": aclGroupCurCfgEntry,
       "aclGroupCurCfgIndex": aclGroupCurCfgIndex,
       "aclGroupCurCfgMemberAcls": aclGroupCurCfgMemberAcls,
       "aclGroupCurCfgMemberAcl6s": aclGroupCurCfgMemberAcl6s,
       "aclGroupNewCfgTable": aclGroupNewCfgTable,
       "aclGroupNewCfgEntry": aclGroupNewCfgEntry,
       "aclGroupNewCfgIndex": aclGroupNewCfgIndex,
       "aclGroupNewCfgMemberAcls": aclGroupNewCfgMemberAcls,
       "aclGroupNewCfgAddAcl": aclGroupNewCfgAddAcl,
       "aclGroupNewCfgRemoveAcl": aclGroupNewCfgRemoveAcl,
       "aclGroupNewCfgDelete": aclGroupNewCfgDelete,
       "aclGroupNewCfgMemberAcl6s": aclGroupNewCfgMemberAcl6s,
       "aclGroupNewCfgAddAcl6": aclGroupNewCfgAddAcl6,
       "aclGroupNewCfgRemoveAcl6": aclGroupNewCfgRemoveAcl6,
       "aclCfg": aclCfg,
       "aclCurCfgPortTable": aclCurCfgPortTable,
       "aclCurCfgPortTableEntry": aclCurCfgPortTableEntry,
       "aclCurCfgPortIndex": aclCurCfgPortIndex,
       "aclCurCfgPortAclBmap": aclCurCfgPortAclBmap,
       "aclCurCfgPortAclGrpBmap": aclCurCfgPortAclGrpBmap,
       "aclCurCfgPortAcl6Bmap": aclCurCfgPortAcl6Bmap,
       "aclNewCfgPortTable": aclNewCfgPortTable,
       "aclNewCfgPortTableEntry": aclNewCfgPortTableEntry,
       "aclNewCfgPortIndex": aclNewCfgPortIndex,
       "aclNewCfgPortAddAcl": aclNewCfgPortAddAcl,
       "aclNewCfgPortAddAclGrp": aclNewCfgPortAddAclGrp,
       "aclNewCfgPortRemoveAcl": aclNewCfgPortRemoveAcl,
       "aclNewCfgPortRemoveAclGrp": aclNewCfgPortRemoveAclGrp,
       "aclNewCfgPortAclBmap": aclNewCfgPortAclBmap,
       "aclNewCfgPortAclGrpBmap": aclNewCfgPortAclGrpBmap,
       "aclNewCfgPortAddAcl6": aclNewCfgPortAddAcl6,
       "aclNewCfgPortRemoveAcl6": aclNewCfgPortRemoveAcl6,
       "aclNewCfgPortAcl6Bmap": aclNewCfgPortAcl6Bmap,
       "acl6List": acl6List,
       "acl6CurCfgTable": acl6CurCfgTable,
       "acl6CurCfgEntry": acl6CurCfgEntry,
       "acl6CurCfgIndex": acl6CurCfgIndex,
       "acl6CurCfgGroup": acl6CurCfgGroup,
       "acl6CurCfgFilterAction": acl6CurCfgFilterAction,
       "acl6CurCfgFilterActionSetPrio": acl6CurCfgFilterActionSetPrio,
       "acl6CurCfgSrcIPv6Address": acl6CurCfgSrcIPv6Address,
       "acl6CurCfgSrcIPv6PrefixLen": acl6CurCfgSrcIPv6PrefixLen,
       "acl6CurCfgDstIPv6Address": acl6CurCfgDstIPv6Address,
       "acl6CurCfgDstIPv6PrefixLen": acl6CurCfgDstIPv6PrefixLen,
       "acl6CurCfgIPv6FlowLabel": acl6CurCfgIPv6FlowLabel,
       "acl6CurCfgIPv6TrafficClass": acl6CurCfgIPv6TrafficClass,
       "acl6CurCfgIPv6NextHeader": acl6CurCfgIPv6NextHeader,
       "acl6CurCfgSrcPort": acl6CurCfgSrcPort,
       "acl6CurCfgSrcPortMask": acl6CurCfgSrcPortMask,
       "acl6CurCfgDstPort": acl6CurCfgDstPort,
       "acl6CurCfgDstPortMask": acl6CurCfgDstPortMask,
       "acl6CurCfgTCPFlags": acl6CurCfgTCPFlags,
       "acl6CurCfgTCPFlagsMask": acl6CurCfgTCPFlagsMask,
       "acl6CurCfgEgressPorts": acl6CurCfgEgressPorts,
       "acl6CurCfgStatistics": acl6CurCfgStatistics,
       "acl6CurCfgUser": acl6CurCfgUser,
       "acl6CurCfgInprofDscp": acl6CurCfgInprofDscp,
       "acl6CurCfgTos": acl6CurCfgTos,
       "acl6CurCfgUserEnable": acl6CurCfgUserEnable,
       "acl6CurCfgInprofDscpEnable": acl6CurCfgInprofDscpEnable,
       "acl6CurCfgLog": acl6CurCfgLog,
       "acl6CurCfgMeterAction": acl6CurCfgMeterAction,
       "acl6CurCfgMeterEnable": acl6CurCfgMeterEnable,
       "acl6CurCfgKbitsSec": acl6CurCfgKbitsSec,
       "acl6CurCfgKbitsBurst": acl6CurCfgKbitsBurst,
       "acl6CurCfgOutprofDscp": acl6CurCfgOutprofDscp,
       "acl6CurCfgOutprofDscpEnable": acl6CurCfgOutprofDscpEnable,
       "acl6NewCfgTable": acl6NewCfgTable,
       "acl6NewCfgEntry": acl6NewCfgEntry,
       "acl6NewCfgIndex": acl6NewCfgIndex,
       "acl6NewCfgGroup": acl6NewCfgGroup,
       "acl6NewCfgFilterAction": acl6NewCfgFilterAction,
       "acl6NewCfgFilterActionSetPrio": acl6NewCfgFilterActionSetPrio,
       "acl6NewCfgSrcIPv6Address": acl6NewCfgSrcIPv6Address,
       "acl6NewCfgSrcIPv6PrefixLen": acl6NewCfgSrcIPv6PrefixLen,
       "acl6NewCfgDstIPv6Address": acl6NewCfgDstIPv6Address,
       "acl6NewCfgDstIPv6PrefixLen": acl6NewCfgDstIPv6PrefixLen,
       "acl6NewCfgIPv6FlowLabel": acl6NewCfgIPv6FlowLabel,
       "acl6NewCfgIPv6TrafficClass": acl6NewCfgIPv6TrafficClass,
       "acl6NewCfgIPv6NextHeader": acl6NewCfgIPv6NextHeader,
       "acl6NewCfgSrcPort": acl6NewCfgSrcPort,
       "acl6NewCfgSrcPortMask": acl6NewCfgSrcPortMask,
       "acl6NewCfgDstPort": acl6NewCfgDstPort,
       "acl6NewCfgDstPortMask": acl6NewCfgDstPortMask,
       "acl6NewCfgTCPFlags": acl6NewCfgTCPFlags,
       "acl6NewCfgTCPFlagsMask": acl6NewCfgTCPFlagsMask,
       "acl6NewCfgEgressPorts": acl6NewCfgEgressPorts,
       "acl6NewCfgStatistics": acl6NewCfgStatistics,
       "acl6NewCfgAddEgressPort": acl6NewCfgAddEgressPort,
       "acl6NewCfgRemoveEgressPort": acl6NewCfgRemoveEgressPort,
       "acl6NewCfgDelete": acl6NewCfgDelete,
       "acl6NewCfgUser": acl6NewCfgUser,
       "acl6NewCfgInprofDscp": acl6NewCfgInprofDscp,
       "acl6NewCfgTos": acl6NewCfgTos,
       "acl6NewCfgUserEnable": acl6NewCfgUserEnable,
       "acl6NewCfgInprofDscpEnable": acl6NewCfgInprofDscpEnable,
       "acl6NewCfgIPv6Reset": acl6NewCfgIPv6Reset,
       "acl6NewCfgTcpudpReset": acl6NewCfgTcpudpReset,
       "acl6NewCfgRemarkInprofReset": acl6NewCfgRemarkInprofReset,
       "acl6NewCfgLog": acl6NewCfgLog,
       "acl6NewCfgMeterAction": acl6NewCfgMeterAction,
       "acl6NewCfgMeterEnable": acl6NewCfgMeterEnable,
       "acl6NewCfgKbitsSec": acl6NewCfgKbitsSec,
       "acl6NewCfgKbitsBurst": acl6NewCfgKbitsBurst,
       "acl6NewCfgMeterReset": acl6NewCfgMeterReset,
       "acl6NewCfgOutprofDscp": acl6NewCfgOutprofDscp,
       "acl6NewCfgOutprofDscpEnable": acl6NewCfgOutprofDscpEnable,
       "acl6NewCfgRemarkOutprofReset": acl6NewCfgRemarkOutprofReset,
       "acl6TableMaxSize": acl6TableMaxSize,
       "aclLog": aclLog,
       "aclLogCurInterval": aclLogCurInterval,
       "aclLogNewInterval": aclLogNewInterval,
       "aclLogCurRateLimit": aclLogCurRateLimit,
       "aclLogNewRateLimit": aclLogNewRateLimit,
       "vmapConfig": vmapConfig,
       "vmapList": vmapList,
       "vmapCurCfgTable": vmapCurCfgTable,
       "vmapCurCfgEntry": vmapCurCfgEntry,
       "vmapCurCfgIndex": vmapCurCfgIndex,
       "vmapCurCfgFilterAction": vmapCurCfgFilterAction,
       "vmapCurCfgFilterActionSetPrio": vmapCurCfgFilterActionSetPrio,
       "vmapCurCfgEthFmt": vmapCurCfgEthFmt,
       "vmapCurCfgTagFmt": vmapCurCfgTagFmt,
       "vmapCurCfgIPFmt": vmapCurCfgIPFmt,
       "vmapCurCfgSrcMACAddress": vmapCurCfgSrcMACAddress,
       "vmapCurCfgSrcMACMask": vmapCurCfgSrcMACMask,
       "vmapCurCfgDstMACAddress": vmapCurCfgDstMACAddress,
       "vmapCurCfgDstMACMask": vmapCurCfgDstMACMask,
       "vmapCurCfgEthernetTypeName": vmapCurCfgEthernetTypeName,
       "vmapCurCfgEthernetTypeValue": vmapCurCfgEthernetTypeValue,
       "vmapCurCfg8021pPriority": vmapCurCfg8021pPriority,
       "vmapCurCfgTypeOfService": vmapCurCfgTypeOfService,
       "vmapCurCfgProtocol": vmapCurCfgProtocol,
       "vmapCurCfgSrcIPAddress": vmapCurCfgSrcIPAddress,
       "vmapCurCfgSrcIPMask": vmapCurCfgSrcIPMask,
       "vmapCurCfgDstIPAddress": vmapCurCfgDstIPAddress,
       "vmapCurCfgDstIPMask": vmapCurCfgDstIPMask,
       "vmapCurCfgSrcPort": vmapCurCfgSrcPort,
       "vmapCurCfgSrcPortMask": vmapCurCfgSrcPortMask,
       "vmapCurCfgDstPort": vmapCurCfgDstPort,
       "vmapCurCfgDstPortMask": vmapCurCfgDstPortMask,
       "vmapCurCfgTCPFlags": vmapCurCfgTCPFlags,
       "vmapCurCfgTCPFlagsMask": vmapCurCfgTCPFlagsMask,
       "vmapCurCfgEgressPorts": vmapCurCfgEgressPorts,
       "vmapCurCfgStatistics": vmapCurCfgStatistics,
       "vmapCurCfgMeterAction": vmapCurCfgMeterAction,
       "vmapCurCfgMeterEnable": vmapCurCfgMeterEnable,
       "vmapCurCfgKbitsSec": vmapCurCfgKbitsSec,
       "vmapCurCfgKbitsBurst": vmapCurCfgKbitsBurst,
       "vmapCurCfgUser": vmapCurCfgUser,
       "vmapCurCfgInprofDscp": vmapCurCfgInprofDscp,
       "vmapCurCfgTos": vmapCurCfgTos,
       "vmapCurCfgOutprofDscp": vmapCurCfgOutprofDscp,
       "vmapCurCfgUserEnable": vmapCurCfgUserEnable,
       "vmapCurCfgInprofDscpEnable": vmapCurCfgInprofDscpEnable,
       "vmapCurCfgOutprofDscpEnable": vmapCurCfgOutprofDscpEnable,
       "vmapCurCfgMirrorPort": vmapCurCfgMirrorPort,
       "vmapNewCfgTable": vmapNewCfgTable,
       "vmapNewCfgEntry": vmapNewCfgEntry,
       "vmapNewCfgIndex": vmapNewCfgIndex,
       "vmapNewCfgFilterAction": vmapNewCfgFilterAction,
       "vmapNewCfgFilterActionSetPrio": vmapNewCfgFilterActionSetPrio,
       "vmapNewCfgEthFmt": vmapNewCfgEthFmt,
       "vmapNewCfgTagFmt": vmapNewCfgTagFmt,
       "vmapNewCfgIPFmt": vmapNewCfgIPFmt,
       "vmapNewCfgSrcMACAddress": vmapNewCfgSrcMACAddress,
       "vmapNewCfgSrcMACMask": vmapNewCfgSrcMACMask,
       "vmapNewCfgDstMACAddress": vmapNewCfgDstMACAddress,
       "vmapNewCfgDstMACMask": vmapNewCfgDstMACMask,
       "vmapNewCfgEthernetTypeName": vmapNewCfgEthernetTypeName,
       "vmapNewCfgEthernetTypeValue": vmapNewCfgEthernetTypeValue,
       "vmapNewCfg8021pPriority": vmapNewCfg8021pPriority,
       "vmapNewCfgTypeOfService": vmapNewCfgTypeOfService,
       "vmapNewCfgProtocol": vmapNewCfgProtocol,
       "vmapNewCfgSrcIPAddress": vmapNewCfgSrcIPAddress,
       "vmapNewCfgSrcIPMask": vmapNewCfgSrcIPMask,
       "vmapNewCfgDstIPAddress": vmapNewCfgDstIPAddress,
       "vmapNewCfgDstIPMask": vmapNewCfgDstIPMask,
       "vmapNewCfgSrcPort": vmapNewCfgSrcPort,
       "vmapNewCfgSrcPortMask": vmapNewCfgSrcPortMask,
       "vmapNewCfgDstPort": vmapNewCfgDstPort,
       "vmapNewCfgDstPortMask": vmapNewCfgDstPortMask,
       "vmapNewCfgTCPFlags": vmapNewCfgTCPFlags,
       "vmapNewCfgTCPFlagsMask": vmapNewCfgTCPFlagsMask,
       "vmapNewCfgEgressPorts": vmapNewCfgEgressPorts,
       "vmapNewCfgStatistics": vmapNewCfgStatistics,
       "vmapNewCfgAddEgressPort": vmapNewCfgAddEgressPort,
       "vmapNewCfgRemoveEgressPort": vmapNewCfgRemoveEgressPort,
       "vmapNewCfgDelete": vmapNewCfgDelete,
       "vmapNewCfgMeterAction": vmapNewCfgMeterAction,
       "vmapNewCfgMeterEnable": vmapNewCfgMeterEnable,
       "vmapNewCfgKbitsSec": vmapNewCfgKbitsSec,
       "vmapNewCfgKbitsBurst": vmapNewCfgKbitsBurst,
       "vmapNewCfgUser": vmapNewCfgUser,
       "vmapNewCfgInprofDscp": vmapNewCfgInprofDscp,
       "vmapNewCfgTos": vmapNewCfgTos,
       "vmapNewCfgOutprofDscp": vmapNewCfgOutprofDscp,
       "vmapNewCfgUserEnable": vmapNewCfgUserEnable,
       "vmapNewCfgInprofDscpEnable": vmapNewCfgInprofDscpEnable,
       "vmapNewCfgOutprofDscpEnable": vmapNewCfgOutprofDscpEnable,
       "vmapNewCfgReset": vmapNewCfgReset,
       "vmapNewCfgEthernetReset": vmapNewCfgEthernetReset,
       "vmapNewCfgIpv4Reset": vmapNewCfgIpv4Reset,
       "vmapNewCfgTcpudpReset": vmapNewCfgTcpudpReset,
       "vmapNewCfgMeterReset": vmapNewCfgMeterReset,
       "vmapNewCfgRemarkReset": vmapNewCfgRemarkReset,
       "vmapNewCfgRemarkInprofReset": vmapNewCfgRemarkInprofReset,
       "vmapNewCfgRemarkOutprofReset": vmapNewCfgRemarkOutprofReset,
       "vmapNewCfgPktfmtReset": vmapNewCfgPktfmtReset,
       "vmapNewCfgMirrorPort": vmapNewCfgMirrorPort,
       "vmapCfg": vmapCfg,
       "vmapVlanCfg": vmapVlanCfg,
       "vmapVlanCfgNonServerPorts": vmapVlanCfgNonServerPorts,
       "vmapVlanCurCfgNonServerPortsTable": vmapVlanCurCfgNonServerPortsTable,
       "vmapVlanCurCfgNonServerPortsTableEntry": vmapVlanCurCfgNonServerPortsTableEntry,
       "vmapVlanCurCfgNonServerPortsVlanIdx": vmapVlanCurCfgNonServerPortsVlanIdx,
       "vmapVlanCurCfgNonServerPortsVmapBitmap": vmapVlanCurCfgNonServerPortsVmapBitmap,
       "vmapVlanNewCfgNonServerPortsTable": vmapVlanNewCfgNonServerPortsTable,
       "vmapVlanNewCfgNonServerPortsTableEntry": vmapVlanNewCfgNonServerPortsTableEntry,
       "vmapVlanNewCfgNonServerPortsVlanIdx": vmapVlanNewCfgNonServerPortsVlanIdx,
       "vmapVlanNewCfgNonServerPortsVmapBitmap": vmapVlanNewCfgNonServerPortsVmapBitmap,
       "vmapVlanNewCfgNonServerPortsAddVmap": vmapVlanNewCfgNonServerPortsAddVmap,
       "vmapVlanNewCfgNonServerPortsRemVmap": vmapVlanNewCfgNonServerPortsRemVmap,
       "vmapVlanCfgServerPorts": vmapVlanCfgServerPorts,
       "vmapVlanCurCfgServerPortsTable": vmapVlanCurCfgServerPortsTable,
       "vmapVlanCurCfgServerPortsTableEntry": vmapVlanCurCfgServerPortsTableEntry,
       "vmapVlanCurCfgServerPortsVlanIdx": vmapVlanCurCfgServerPortsVlanIdx,
       "vmapVlanCurCfgServerPortsVmapBitmap": vmapVlanCurCfgServerPortsVmapBitmap,
       "vmapVlanNewCfgServerPortsTable": vmapVlanNewCfgServerPortsTable,
       "vmapVlanNewCfgServerPortsTableEntry": vmapVlanNewCfgServerPortsTableEntry,
       "vmapVlanNewCfgServerPortsVlanIdx": vmapVlanNewCfgServerPortsVlanIdx,
       "vmapVlanNewCfgServerPortsVmapBitmap": vmapVlanNewCfgServerPortsVmapBitmap,
       "vmapVlanNewCfgServerPortsAddVmap": vmapVlanNewCfgServerPortsAddVmap,
       "vmapVlanNewCfgServerPortsRemVmap": vmapVlanNewCfgServerPortsRemVmap,
       "vmapVlanCfgAllPorts": vmapVlanCfgAllPorts,
       "vmapVlanCurCfgAllPortsTable": vmapVlanCurCfgAllPortsTable,
       "vmapVlanCurCfgAllPortsTableEntry": vmapVlanCurCfgAllPortsTableEntry,
       "vmapVlanCurCfgAllPortsVlanIdx": vmapVlanCurCfgAllPortsVlanIdx,
       "vmapVlanCurCfgAllPortsVmapBitmap": vmapVlanCurCfgAllPortsVmapBitmap,
       "vmapVlanNewCfgAllPortsTable": vmapVlanNewCfgAllPortsTable,
       "vmapVlanNewCfgAllPortsTableEntry": vmapVlanNewCfgAllPortsTableEntry,
       "vmapVlanNewCfgAllPortsVlanIdx": vmapVlanNewCfgAllPortsVlanIdx,
       "vmapVlanNewCfgAllPortsVmapBitmap": vmapVlanNewCfgAllPortsVmapBitmap,
       "vmapVlanNewCfgAllPortsAddVmap": vmapVlanNewCfgAllPortsAddVmap,
       "vmapVlanNewCfgAllPortsRemVmap": vmapVlanNewCfgAllPortsRemVmap,
       "vmapGroupCfg": vmapGroupCfg,
       "vmapGroupCfgNonServerPorts": vmapGroupCfgNonServerPorts,
       "vmapGroupCurCfgNonServerPortsTable": vmapGroupCurCfgNonServerPortsTable,
       "vmapGroupCurCfgNonServerPortsTableEntry": vmapGroupCurCfgNonServerPortsTableEntry,
       "vmapGroupCurCfgNonServerPortsGroupIdx": vmapGroupCurCfgNonServerPortsGroupIdx,
       "vmapGroupCurCfgNonServerPortsVmapBitmap": vmapGroupCurCfgNonServerPortsVmapBitmap,
       "vmapGroupNewCfgNonServerPortsTable": vmapGroupNewCfgNonServerPortsTable,
       "vmapGroupNewCfgNonServerPortsTableEntry": vmapGroupNewCfgNonServerPortsTableEntry,
       "vmapGroupNewCfgNonServerPortsGroupIdx": vmapGroupNewCfgNonServerPortsGroupIdx,
       "vmapGroupNewCfgNonServerPortsVmapBitmap": vmapGroupNewCfgNonServerPortsVmapBitmap,
       "vmapGroupNewCfgNonServerPortsAddVmap": vmapGroupNewCfgNonServerPortsAddVmap,
       "vmapGroupNewCfgNonServerPortsRemVmap": vmapGroupNewCfgNonServerPortsRemVmap,
       "vmapGroupCfgServerPorts": vmapGroupCfgServerPorts,
       "vmapGroupCurCfgServerPortsTable": vmapGroupCurCfgServerPortsTable,
       "vmapGroupCurCfgServerPortsTableEntry": vmapGroupCurCfgServerPortsTableEntry,
       "vmapGroupCurCfgServerPortsGroupIdx": vmapGroupCurCfgServerPortsGroupIdx,
       "vmapGroupCurCfgServerPortsVmapBitmap": vmapGroupCurCfgServerPortsVmapBitmap,
       "vmapGroupNewCfgServerPortsTable": vmapGroupNewCfgServerPortsTable,
       "vmapGroupNewCfgServerPortsTableEntry": vmapGroupNewCfgServerPortsTableEntry,
       "vmapGroupNewCfgServerPortsGroupIdx": vmapGroupNewCfgServerPortsGroupIdx,
       "vmapGroupNewCfgServerPortsVmapBitmap": vmapGroupNewCfgServerPortsVmapBitmap,
       "vmapGroupNewCfgServerPortsAddVmap": vmapGroupNewCfgServerPortsAddVmap,
       "vmapGroupNewCfgServerPortsRemVmap": vmapGroupNewCfgServerPortsRemVmap,
       "vmapGroupCfgAllPorts": vmapGroupCfgAllPorts,
       "vmapGroupCurCfgAllPortsTable": vmapGroupCurCfgAllPortsTable,
       "vmapGroupCurCfgAllPortsTableEntry": vmapGroupCurCfgAllPortsTableEntry,
       "vmapGroupCurCfgAllPortsGroupIdx": vmapGroupCurCfgAllPortsGroupIdx,
       "vmapGroupCurCfgAllPortsVmapBitmap": vmapGroupCurCfgAllPortsVmapBitmap,
       "vmapGroupNewCfgAllPortsTable": vmapGroupNewCfgAllPortsTable,
       "vmapGroupNewCfgAllPortsTableEntry": vmapGroupNewCfgAllPortsTableEntry,
       "vmapGroupNewCfgAllPortsGroupIdx": vmapGroupNewCfgAllPortsGroupIdx,
       "vmapGroupNewCfgAllPortsVmapBitmap": vmapGroupNewCfgAllPortsVmapBitmap,
       "vmapGroupNewCfgAllPortsAddVmap": vmapGroupNewCfgAllPortsAddVmap,
       "vmapGroupNewCfgAllPortsRemVmap": vmapGroupNewCfgAllPortsRemVmap,
       "cee": cee,
       "ceeConfig": ceeConfig,
       "ceeCurCfgState": ceeCurCfgState,
       "ceeNewCfgState": ceeNewCfgState,
       "fcoe": fcoe,
       "fcoeConfig": fcoeConfig,
       "fipsCfg": fipsCfg,
       "fipsCurCfgState": fipsCurCfgState,
       "fipsNewCfgState": fipsNewCfgState,
       "fipsCurAclTimeout": fipsCurAclTimeout,
       "fipsNewAclTimeout": fipsNewAclTimeout,
       "fipsCurAutoVlan": fipsCurAutoVlan,
       "fipsNewAutoVlan": fipsNewAutoVlan,
       "fipsPortCurCfgTable": fipsPortCurCfgTable,
       "fipsPortCurCfgEntry": fipsPortCurCfgEntry,
       "fipsPortCurCfgIndex": fipsPortCurCfgIndex,
       "fipsPortCurCfgFcfMode": fipsPortCurCfgFcfMode,
       "fipsPortCurCfgFipsEna": fipsPortCurCfgFipsEna,
       "fipsPortNewCfgTable": fipsPortNewCfgTable,
       "fipsPortNewCfgEntry": fipsPortNewCfgEntry,
       "fipsPortNewCfgIndex": fipsPortNewCfgIndex,
       "fipsPortNewCfgFcfMode": fipsPortNewCfgFcfMode,
       "fipsPortNewCfgFipsEna": fipsPortNewCfgFipsEna,
       "fcoeStats": fcoeStats,
       "fcoeStatsTable": fcoeStatsTable,
       "fcoeStatsEntry": fcoeStatsEntry,
       "fcoeStatsIndex": fcoeStatsIndex,
       "fcoeStatsFcfAdded": fcoeStatsFcfAdded,
       "fcoeStatsFcfRemoved": fcoeStatsFcfRemoved,
       "fcoeStatsFcoeAdded": fcoeStatsFcoeAdded,
       "fcoeStatsFcoeRemoved": fcoeStatsFcoeRemoved,
       "fcoeStatsKeepAliveTable": fcoeStatsKeepAliveTable,
       "fcoeStatsKeepAliveEntry": fcoeStatsKeepAliveEntry,
       "fcoeStatsKeepAliveIndex": fcoeStatsKeepAliveIndex,
       "fcoeStatsKeepAliveFcfMac": fcoeStatsKeepAliveFcfMac,
       "fcoeStatsKeepAliveCount": fcoeStatsKeepAliveCount,
       "fcoeStatsResetAllCounters": fcoeStatsResetAllCounters,
       "fcoeInfo": fcoeInfo,
       "fipsInfo": fipsInfo,
       "fipsInfoPortTable": fipsInfoPortTable,
       "fipsInfoPortEntry": fipsInfoPortEntry,
       "fipsInfoPortIndex": fipsInfoPortIndex,
       "fipsInfoAclSequencer": fipsInfoAclSequencer,
       "fipsInfoAcl": fipsInfoAcl,
       "fipsInfoFcf": fipsInfoFcf,
       "fipsInfoFcfCount": fipsInfoFcfCount,
       "fipsInfoFcfTable": fipsInfoFcfTable,
       "fipsInfoFcfEntry": fipsInfoFcfEntry,
       "fipsInfoFcfIndex": fipsInfoFcfIndex,
       "fipsInfoFcfMac": fipsInfoFcfMac,
       "fipsInfoFcfPort": fipsInfoFcfPort,
       "fipsInfoFcfVlan": fipsInfoFcfVlan,
       "fipsInfoFcoe": fipsInfoFcoe,
       "fipsInfoFcoeCount": fipsInfoFcoeCount,
       "fipsInfoFcoeTable": fipsInfoFcoeTable,
       "fipsInfoFcoeEntry": fipsInfoFcoeEntry,
       "fipsInfoFcoeIndex": fipsInfoFcoeIndex,
       "fipsInfoFcoeVNPortMac": fipsInfoFcoeVNPortMac,
       "fipsInfoFcoeFcfMac": fipsInfoFcoeFcfMac,
       "fipsInfoFcoePort": fipsInfoFcoePort,
       "fipsInfoFcoeVlan": fipsInfoFcoeVlan,
       "fipsInfoVlans": fipsInfoVlans,
       "fipsInfoVlansTable": fipsInfoVlansTable,
       "fipsInfoVlansEntry": fipsInfoVlansEntry,
       "fipsInfoVlansId": fipsInfoVlansId,
       "fipsInfoVlansFeatureIndex": fipsInfoVlansFeatureIndex,
       "fipsInfoVlansCreator": fipsInfoVlansCreator,
       "fipsInfoVlansPorts": fipsInfoVlansPorts,
       "fipsInfoVlansTrunks": fipsInfoVlansTrunks,
       "fcoeOper": fcoeOper,
       "fipsOper": fipsOper,
       "fipsOperFcfDelete": fipsOperFcfDelete,
       "virt": virt,
       "virtGeneral": virtGeneral,
       "virtCurCfgState": virtCurCfgState,
       "virtNewCfgState": virtNewCfgState,
       "virtCurCfgHbPort": virtCurCfgHbPort,
       "virtNewCfgHbPort": virtNewCfgHbPort,
       "virtCurCfgVirtCenterIp": virtCurCfgVirtCenterIp,
       "virtNewCfgVirtCenterIp": virtNewCfgVirtCenterIp,
       "virtCurCfgVirtCenterUser": virtCurCfgVirtCenterUser,
       "virtNewCfgVirtCenterUser": virtNewCfgVirtCenterUser,
       "virtCurCfgVirtCenterSSLAuth": virtCurCfgVirtCenterSSLAuth,
       "virtNewCfgVirtCenterSSLAuth": virtNewCfgVirtCenterSSLAuth,
       "virtNewCfgVirtCenterPasswd": virtNewCfgVirtCenterPasswd,
       "virtNewCfgVirtCenterDelete": virtNewCfgVirtCenterDelete,
       "vmGroups": vmGroups,
       "vmCurCfgGroupTable": vmCurCfgGroupTable,
       "vmCurCfgGroupEntry": vmCurCfgGroupEntry,
       "vmCurCfgGroupIndex": vmCurCfgGroupIndex,
       "vmCurCfgGroupVlan": vmCurCfgGroupVlan,
       "vmCurCfgGroupPorts": vmCurCfgGroupPorts,
       "vmCurCfgGroupTagState": vmCurCfgGroupTagState,
       "vmCurCfgGroupStg": vmCurCfgGroupStg,
       "vmCurCfgGroupProfileName": vmCurCfgGroupProfileName,
       "vmCurCfgGroupValidateMode": vmCurCfgGroupValidateMode,
       "vmNewCfgGroupTable": vmNewCfgGroupTable,
       "vmNewCfgGroupEntry": vmNewCfgGroupEntry,
       "vmNewCfgGroupIndex": vmNewCfgGroupIndex,
       "vmNewCfgGroupVlan": vmNewCfgGroupVlan,
       "vmNewCfgGroupPorts": vmNewCfgGroupPorts,
       "vmNewCfgGroupAddVm": vmNewCfgGroupAddVm,
       "vmNewCfgGroupRemVm": vmNewCfgGroupRemVm,
       "vmNewCfgGroupAddVmIdx": vmNewCfgGroupAddVmIdx,
       "vmNewCfgGroupRemVmIdx": vmNewCfgGroupRemVmIdx,
       "vmNewCfgGroupAddPort": vmNewCfgGroupAddPort,
       "vmNewCfgGroupRemPort": vmNewCfgGroupRemPort,
       "vmNewCfgGroupAddTrunk": vmNewCfgGroupAddTrunk,
       "vmNewCfgGroupRemTrunk": vmNewCfgGroupRemTrunk,
       "vmNewCfgGroupTagState": vmNewCfgGroupTagState,
       "vmNewCfgGroupAddLacpKey": vmNewCfgGroupAddLacpKey,
       "vmNewCfgGroupRemLacpKey": vmNewCfgGroupRemLacpKey,
       "vmNewCfgGroupAddProfile": vmNewCfgGroupAddProfile,
       "vmNewCfgGroupRemProfile": vmNewCfgGroupRemProfile,
       "vmNewCfgGroupProfileName": vmNewCfgGroupProfileName,
       "vmNewCfgGroupDelete": vmNewCfgGroupDelete,
       "vmNewCfgGroupStg": vmNewCfgGroupStg,
       "vmNewCfgGroupValidateMode": vmNewCfgGroupValidateMode,
       "vmCurCfgGroupMacTable": vmCurCfgGroupMacTable,
       "vmCurCfgGroupMaclistEntry": vmCurCfgGroupMaclistEntry,
       "vmCurCfgGroupMacGroupIndex": vmCurCfgGroupMacGroupIndex,
       "vmCurCfgGroupMacVMIndex": vmCurCfgGroupMacVMIndex,
       "vmCurCfgGroupMacVMMac": vmCurCfgGroupMacVMMac,
       "vmNewCfgGroupMacTable": vmNewCfgGroupMacTable,
       "vmNewCfgGroupMaclistEntry": vmNewCfgGroupMaclistEntry,
       "vmNewCfgGroupMacGroupIndex": vmNewCfgGroupMacGroupIndex,
       "vmNewCfgGroupMacVMIndex": vmNewCfgGroupMacVMIndex,
       "vmNewCfgGroupMacVMMac": vmNewCfgGroupMacVMMac,
       "vmPolicy": vmPolicy,
       "vmbw": vmbw,
       "vmbwCurCfgTable": vmbwCurCfgTable,
       "vmbwCurCfgEntry": vmbwCurCfgEntry,
       "vmbwCurCfgMac": vmbwCurCfgMac,
       "vmbwCurCfgTxRate": vmbwCurCfgTxRate,
       "vmbwCurCfgTxBurst": vmbwCurCfgTxBurst,
       "vmbwCurCfgTxAclId": vmbwCurCfgTxAclId,
       "vmbwCurCfgRxRate": vmbwCurCfgRxRate,
       "vmbwCurCfgRxBurst": vmbwCurCfgRxBurst,
       "vmbwCurCfgCtrl": vmbwCurCfgCtrl,
       "vmbwNewCfgTable": vmbwNewCfgTable,
       "vmbwNewCfgEntry": vmbwNewCfgEntry,
       "vmbwNewCfgMac": vmbwNewCfgMac,
       "vmbwNewCfgTxRate": vmbwNewCfgTxRate,
       "vmbwNewCfgTxBurst": vmbwNewCfgTxBurst,
       "vmbwNewCfgTxAclId": vmbwNewCfgTxAclId,
       "vmbwNewCfgRxRate": vmbwNewCfgRxRate,
       "vmbwNewCfgRxBurst": vmbwNewCfgRxBurst,
       "vmbwNewCfgCtrl": vmbwNewCfgCtrl,
       "vmbwNewCfgDelete": vmbwNewCfgDelete,
       "vmProfiles": vmProfiles,
       "vmCurCfgProfilesTable": vmCurCfgProfilesTable,
       "vmCurCfgProfileEntry": vmCurCfgProfileEntry,
       "vmCurCfgProfileIndex": vmCurCfgProfileIndex,
       "vmCurCfgProfileName": vmCurCfgProfileName,
       "vmCurCfgProfileVlan": vmCurCfgProfileVlan,
       "vmCurCfgProfileShapingAverage": vmCurCfgProfileShapingAverage,
       "vmCurCfgProfileShapingBurst": vmCurCfgProfileShapingBurst,
       "vmCurCfgProfileShapingPeak": vmCurCfgProfileShapingPeak,
       "vmCurCfgProfileEgressShapingAverage": vmCurCfgProfileEgressShapingAverage,
       "vmCurCfgProfileEgressShapingBurst": vmCurCfgProfileEgressShapingBurst,
       "vmCurCfgProfileEgressShapingPeak": vmCurCfgProfileEgressShapingPeak,
       "vmNewCfgProfilesTable": vmNewCfgProfilesTable,
       "vmNewCfgProfileEntry": vmNewCfgProfileEntry,
       "vmNewCfgProfileIndex": vmNewCfgProfileIndex,
       "vmNewCfgProfileName": vmNewCfgProfileName,
       "vmNewCfgProfileVlan": vmNewCfgProfileVlan,
       "vmNewCfgProfileShapingAverage": vmNewCfgProfileShapingAverage,
       "vmNewCfgProfileShapingBurst": vmNewCfgProfileShapingBurst,
       "vmNewCfgProfileShapingPeak": vmNewCfgProfileShapingPeak,
       "vmNewCfgProfileDelete": vmNewCfgProfileDelete,
       "vmNewCfgProfileEgressShapingAverage": vmNewCfgProfileEgressShapingAverage,
       "vmNewCfgProfileEgressShapingBurst": vmNewCfgProfileEgressShapingBurst,
       "vmNewCfgProfileEgressShapingPeak": vmNewCfgProfileEgressShapingPeak,
       "virtVMware": virtVMware,
       "virtVMwareNameTableUpdate": virtVMwareNameTableUpdate,
       "virtVMwareHostNameTable": virtVMwareHostNameTable,
       "virtVMwareHostNameEntry": virtVMwareHostNameEntry,
       "virtVMwareHostNameIndex": virtVMwareHostNameIndex,
       "virtVMwareHostNameUUID": virtVMwareHostNameUUID,
       "virtVMwareHostNameIpAddress": virtVMwareHostNameIpAddress,
       "virtVMwareHostNameName": virtVMwareHostNameName,
       "virtVMwareVMNameTable": virtVMwareVMNameTable,
       "virtVMwareVMNameEntry": virtVMwareVMNameEntry,
       "virtVMwareVMNameIndex": virtVMwareVMNameIndex,
       "virtVMwareVMNameUUID": virtVMwareVMNameUUID,
       "virtVMwareVMNameVMwareName": virtVMwareVMNameVMwareName,
       "virtVMwareVMNameOsName": virtVMwareVMNameOsName,
       "virtVMwareVMNameIpAddress": virtVMwareVMNameIpAddress,
       "virtVMwareHost": virtVMwareHost,
       "virtVMwareHostVswitchTable": virtVMwareHostVswitchTable,
       "virtVMwareHostVswitchEntry": virtVMwareHostVswitchEntry,
       "virtVMwareHostVswitchIndex": virtVMwareHostVswitchIndex,
       "virtVMwareHostVswitchName": virtVMwareHostVswitchName,
       "virtVMwareHostPGTable": virtVMwareHostPGTable,
       "virtVMwareHostPGEntry": virtVMwareHostPGEntry,
       "virtVMwareHostPGIndex": virtVMwareHostPGIndex,
       "virtVMwareHostPGName": virtVMwareHostPGName,
       "virtVMwareHostPGVswitchName": virtVMwareHostPGVswitchName,
       "virtVMwareHostDetailInfoTable": virtVMwareHostDetailInfoTable,
       "virtVMwareHostDetailInfoEntry": virtVMwareHostDetailInfoEntry,
       "virtVMwareHostDetailInfoIndex": virtVMwareHostDetailInfoIndex,
       "virtVMwareHostDetailInfoMACAddr": virtVMwareHostDetailInfoMACAddr,
       "virtVMwareHostDetailInfoPort": virtVMwareHostDetailInfoPort,
       "virtVMwareHostDetailInfoType": virtVMwareHostDetailInfoType,
       "virtVMwareHostDetailInfoIPAddr": virtVMwareHostDetailInfoIPAddr,
       "virtVMwareHostDetailInfoUUID": virtVMwareHostDetailInfoUUID,
       "virtVMwareHostDetailInfoVswitch": virtVMwareHostDetailInfoVswitch,
       "virtVMwareHostDetailInfoPortGroup": virtVMwareHostDetailInfoPortGroup,
       "virtVMwareHostDetailInfoVlanID": virtVMwareHostDetailInfoVlanID,
       "virtVMwareHostDetailInfoHostName": virtVMwareHostDetailInfoHostName,
       "virtVMwareHostDetailInfoVMVCenterName": virtVMwareHostDetailInfoVMVCenterName,
       "virtVMwareHostDetailInfoVMOSHostName": virtVMwareHostDetailInfoVMOSHostName,
       "virtVMwareHostDetailInfoVMCurrentHost": virtVMwareHostDetailInfoVMCurrentHost,
       "virtVMwareVM": virtVMwareVM,
       "virtVMwareVMInfoTable": virtVMwareVMInfoTable,
       "virtVMwareVMInfoEntry": virtVMwareVMInfoEntry,
       "virtVMwareVMInfoIndex": virtVMwareVMInfoIndex,
       "virtVMwareVMInfoMACAddr": virtVMwareVMInfoMACAddr,
       "virtVMwareVMInfoPort": virtVMwareVMInfoPort,
       "virtVMwareVMInfoType": virtVMwareVMInfoType,
       "virtVMwareVMInfoIPAddr": virtVMwareVMInfoIPAddr,
       "virtVMwareVMInfoUUID": virtVMwareVMInfoUUID,
       "virtVMwareVMInfoVswitch": virtVMwareVMInfoVswitch,
       "virtVMwareVMInfoPortGroup": virtVMwareVMInfoPortGroup,
       "virtVMwareVMInfoVlanID": virtVMwareVMInfoVlanID,
       "virtVMwareVMInfoVMVCenterName": virtVMwareVMInfoVMVCenterName,
       "virtVMwareVMInfoVMOSHostName": virtVMwareVMInfoVMOSHostName,
       "virtVMwareVMInfoVMCurrentHost": virtVMwareVMInfoVMCurrentHost,
       "virtCurCfgVMwareHello": virtCurCfgVMwareHello,
       "virtCurCfgVMwareHelloEnable": virtCurCfgVMwareHelloEnable,
       "virtCurCfgVMwareHelloTimer": virtCurCfgVMwareHelloTimer,
       "virtCurCfgVMwareHelloPorts": virtCurCfgVMwareHelloPorts,
       "virtCurCfgVMwareHelloAddr": virtCurCfgVMwareHelloAddr,
       "virtNewCfgVMwareHello": virtNewCfgVMwareHello,
       "virtNewCfgVMwareHelloEnable": virtNewCfgVMwareHelloEnable,
       "virtNewCfgVMwareHelloTimer": virtNewCfgVMwareHelloTimer,
       "virtNewCfgVMwareHelloPorts": virtNewCfgVMwareHelloPorts,
       "virtNewCfgVMwareHelloAddPort": virtNewCfgVMwareHelloAddPort,
       "virtNewCfgVMwareHelloRemovePort": virtNewCfgVMwareHelloRemovePort,
       "virtNewCfgVMwareHelloAddr": virtNewCfgVMwareHelloAddr,
       "vmCheck": vmCheck,
       "vmCurCfgCheck": vmCurCfgCheck,
       "vmCurCfgCheckActionBasic": vmCurCfgCheckActionBasic,
       "vmCurCfgCheckActionAdvanced": vmCurCfgCheckActionAdvanced,
       "vmCurCfgCheckAclsMax": vmCurCfgCheckAclsMax,
       "vmCurCfgCheckTrust": vmCurCfgCheckTrust,
       "vmNewCfgCheck": vmNewCfgCheck,
       "vmNewCfgCheckActionBasic": vmNewCfgCheckActionBasic,
       "vmNewCfgCheckActionAdvanced": vmNewCfgCheckActionAdvanced,
       "vmNewCfgCheckAclsMax": vmNewCfgCheckAclsMax,
       "vmNewCfgCheckTrust": vmNewCfgCheckTrust,
       "vmNewCfgCheckTrustAddPort": vmNewCfgCheckTrustAddPort,
       "vmNewCfgCheckTrustRemPort": vmNewCfgCheckTrustRemPort,
       "vmReadyMisc": vmReadyMisc,
       "vmReadyLocalAdmMac": vmReadyLocalAdmMac,
       "vmReadyCurCfgOuiTbl": vmReadyCurCfgOuiTbl,
       "vmReadyCurCfgOuiEntry": vmReadyCurCfgOuiEntry,
       "vmReadyCurCfgOuiMacIdx": vmReadyCurCfgOuiMacIdx,
       "vmReadyCurCfgOuiMac": vmReadyCurCfgOuiMac,
       "vmReadyCurCfgVendor": vmReadyCurCfgVendor,
       "vmReadyNewCfgOuiTbl": vmReadyNewCfgOuiTbl,
       "vmReadyNewCfgOuiEntry": vmReadyNewCfgOuiEntry,
       "vmReadyNewCfgOuiMacIdx": vmReadyNewCfgOuiMacIdx,
       "vmReadyNewCfgOuiMac": vmReadyNewCfgOuiMac,
       "vmReadyNewCfgVendor": vmReadyNewCfgVendor,
       "vmReadyNewCfgDelete": vmReadyNewCfgDelete,
       "vnic": vnic,
       "vnicCurCfgState": vnicCurCfgState,
       "vnicNewCfgState": vnicNewCfgState,
       "vnicCurCfgVnicTable": vnicCurCfgVnicTable,
       "vnicCurCfgVnicEntry": vnicCurCfgVnicEntry,
       "vnicCurCfgVnicPortIndex": vnicCurCfgVnicPortIndex,
       "vnicCurCfgVnicIndex": vnicCurCfgVnicIndex,
       "vnicCurCfgVnicState": vnicCurCfgVnicState,
       "vnicCurCfgVnicBw": vnicCurCfgVnicBw,
       "vnicCurCfgVnicType": vnicCurCfgVnicType,
       "vnicCurCfgVnicMAC": vnicCurCfgVnicMAC,
       "vnicNewCfgVnicTable": vnicNewCfgVnicTable,
       "vnicNewCfgVnicEntry": vnicNewCfgVnicEntry,
       "vnicNewCfgVnicPortIndex": vnicNewCfgVnicPortIndex,
       "vnicNewCfgVnicIndex": vnicNewCfgVnicIndex,
       "vnicNewCfgVnicState": vnicNewCfgVnicState,
       "vnicNewCfgVnicBw": vnicNewCfgVnicBw,
       "vnicCurCfgGroupTable": vnicCurCfgGroupTable,
       "vnicCurCfgGroupEntry": vnicCurCfgGroupEntry,
       "vnicCurCfgGroupIndex": vnicCurCfgGroupIndex,
       "vnicCurCfgGroupState": vnicCurCfgGroupState,
       "vnicCurCfgGroupVlan": vnicCurCfgGroupVlan,
       "vnicCurCfgGroupFailoverState": vnicCurCfgGroupFailoverState,
       "vnicCurCfgGroupVnics": vnicCurCfgGroupVnics,
       "vnicCurCfgGroupPorts": vnicCurCfgGroupPorts,
       "vnicCurCfgGroupTrunk": vnicCurCfgGroupTrunk,
       "vnicNewCfgGroupTable": vnicNewCfgGroupTable,
       "vnicNewCfgGroupEntry": vnicNewCfgGroupEntry,
       "vnicNewCfgGroupIndex": vnicNewCfgGroupIndex,
       "vnicNewCfgGroupState": vnicNewCfgGroupState,
       "vnicNewCfgGroupVlan": vnicNewCfgGroupVlan,
       "vnicNewCfgGroupFailoverState": vnicNewCfgGroupFailoverState,
       "vnicNewCfgGroupAddVnic": vnicNewCfgGroupAddVnic,
       "vnicNewCfgGroupRemVnic": vnicNewCfgGroupRemVnic,
       "vnicNewCfgGroupAddPort": vnicNewCfgGroupAddPort,
       "vnicNewCfgGroupRemPort": vnicNewCfgGroupRemPort,
       "vnicNewCfgGroupAddTrunk": vnicNewCfgGroupAddTrunk,
       "vnicNewCfgGroupRemTrunk": vnicNewCfgGroupRemTrunk,
       "vnicNewCfgGroupDelete": vnicNewCfgGroupDelete,
       "vnicNewCfgGroupVnics": vnicNewCfgGroupVnics,
       "vnicNewCfgGroupPorts": vnicNewCfgGroupPorts,
       "vnicNewCfgGroupTrunk": vnicNewCfgGroupTrunk,
       "ibmGbTORG8264TMIB": ibmGbTORG8264TMIB,
       "ibmnos-BladeSwitch": ibmnos_BladeSwitch,
       "ibmnoscfa": ibmnoscfa,
       "if": _pysmi_if,
       "ifMainTable": ifMainTable,
       "ifMainEntry": ifMainEntry,
       "ifMainIndex": ifMainIndex,
       "ifMainPortName": ifMainPortName,
       "ibmnos": ibmnos,
       "ibmnosSystem": ibmnosSystem,
       "ibmnosConfigSaveOption": ibmnosConfigSaveOption,
       "ibmnosConfigSaveFileName": ibmnosConfigSaveFileName,
       "ibmnosInitiateConfigSave": ibmnosInitiateConfigSave,
       "ibmnosConfigSaveStatus": ibmnosConfigSaveStatus,
       "ibmnosConfigRestoreOption": ibmnosConfigRestoreOption,
       "ibmnosLoggingOption": ibmnosLoggingOption,
       "ibmnosLoginAuthentication": ibmnosLoginAuthentication,
       "ibmnosConfigRestoreFileVersion": ibmnosConfigRestoreFileVersion,
       "ibmnosConfigControl": ibmnosConfigControl,
       "ibmnosPortCtrlTable": ibmnosPortCtrlTable,
       "ibmnosPortCtrlEntry": ibmnosPortCtrlEntry,
       "ibmnosPortCtrlIndex": ibmnosPortCtrlIndex,
       "ibmnosPortCtrlMode": ibmnosPortCtrlMode,
       "ibmnosPortCtrlDuplex": ibmnosPortCtrlDuplex,
       "ibmnosPortCtrlSpeed": ibmnosPortCtrlSpeed,
       "ibmnosPortCtrlFlowControl": ibmnosPortCtrlFlowControl,
       "toraddon": toraddon,
       "cfa": cfa,
       "ibmnosPortCfgTable": ibmnosPortCfgTable,
       "ibmnosPortCfgTableEntry": ibmnosPortCfgTableEntry,
       "ibmnosPortCfgIndx": ibmnosPortCfgIndx,
       "ibmnosPortCfgVlanTag": ibmnosPortCfgVlanTag,
       "sys": sys,
       "agImageForNextReset": agImageForNextReset,
       "ibmnosFdb": ibmnosFdb,
       "ibmnosFdbTable": ibmnosFdbTable,
       "ibmnosFdbEntry": ibmnosFdbEntry,
       "ibmnosFdbVlan": ibmnosFdbVlan,
       "ibmnosFdbMacAddr": ibmnosFdbMacAddr,
       "ibmnosFdbMacAddrStr": ibmnosFdbMacAddrStr,
       "ibmnosFdbVlanId": ibmnosFdbVlanId,
       "ibmnosFdbSrcPort": ibmnosFdbSrcPort,
       "ibmnosFdbSrcTrunk": ibmnosFdbSrcTrunk,
       "ibmnosFdbState": ibmnosFdbState,
       "ibmnosFdbStatus": ibmnosFdbStatus,
       "ibmnosFdbClearMac": ibmnosFdbClearMac,
       "tor-switch": tor_switch,
       "hardwarePartNumber": hardwarePartNumber,
       "hardwareRevision": hardwareRevision,
       "hardwareLastBoot": hardwareLastBoot,
       "hardwareMACAddress": hardwareMACAddress,
       "hardwareSwitchRunningSwVersion": hardwareSwitchRunningSwVersion,
       "hardwareFlashConfiguration": hardwareFlashConfiguration,
       "hardwarePCBAPartNumber": hardwarePCBAPartNumber,
       "hardwareFABNumber": hardwareFABNumber,
       "hardwareSerialNumber": hardwareSerialNumber,
       "hardwareManufacturingDate": hardwareManufacturingDate,
       "hwTemperatureSensor1": hwTemperatureSensor1,
       "hwTemperatureSensor2": hwTemperatureSensor2,
       "hwTemperatureSensor3": hwTemperatureSensor3,
       "hwFan1RPMValue": hwFan1RPMValue,
       "hwFan2RPMValue": hwFan2RPMValue,
       "hwFan3RPMValue": hwFan3RPMValue,
       "hwFan4RPMValue": hwFan4RPMValue,
       "hwFan5RPMValue": hwFan5RPMValue,
       "hwBoardRevision": hwBoardRevision,
       "hwPowerSupply1State": hwPowerSupply1State,
       "hwPowerSupply2State": hwPowerSupply2State,
       "ibmnosSfpInfoTable": ibmnosSfpInfoTable,
       "ibmnosSfpInfoTableEntry": ibmnosSfpInfoTableEntry,
       "ibmnosSfpInfoIndx": ibmnosSfpInfoIndx,
       "ibmnosSfpInfoDescription": ibmnosSfpInfoDescription,
       "ibmnosSfpInfoSerialNumber": ibmnosSfpInfoSerialNumber,
       "ibmnosSfpInfoPartNumber": ibmnosSfpInfoPartNumber,
       "ibmnosSfpInfoHWRevision": ibmnosSfpInfoHWRevision,
       "swImage1Version": swImage1Version,
       "swImage2Version": swImage2Version,
       "swBootVersion": swBootVersion,
       "hwFan6RPMValue": hwFan6RPMValue,
       "hwTemperatureSensor4": hwTemperatureSensor4,
       "hwFan7RPMValue": hwFan7RPMValue,
       "hwFan8RPMValue": hwFan8RPMValue,
       "hwBootTime": hwBootTime,
       "ibmnosBladeHarmony": ibmnosBladeHarmony,
       "dataCollection": dataCollection,
       "ibmnosPortTableMaxEnt": ibmnosPortTableMaxEnt,
       "ibmnosImage1Ver": ibmnosImage1Ver,
       "ibmnosImage2Ver": ibmnosImage2Ver,
       "hwSwitchSoftwareVersion": hwSwitchSoftwareVersion,
       "hwSerialNum": hwSerialNum,
       "hwManufacturingDate": hwManufacturingDate,
       "ibmnosReset": ibmnosReset,
       "ibmnosBootVer": ibmnosBootVer,
       "ibmnosConfigForNxtReset": ibmnosConfigForNxtReset,
       "ibmnosSoftwareVersion": ibmnosSoftwareVersion,
       "imageConfigTransfer": imageConfigTransfer,
       "agTftpServer": agTftpServer}
)
