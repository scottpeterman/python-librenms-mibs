# SNMP MIB module (TREDESS-FS-MIB) expressed in pysnmp data model.
#
# This Python module is designed to be imported and executed by the
# pysnmp library.
#
# See https://www.pysnmp.com/pysnmp for further information.
#
# Notes
# -----
# ASN.1 source file://mibs\tredess\TREDESS-FS-MIB
# Produced by pysmi-1.6.2 at Thu Oct  2 12:32:43 2025
# On host DESKTOP-ORUUBP9 platform Windows version 11 by user speterman
# Using Python version 3.12.8 (tags/v3.12.8:2dc476b, Dec  3 2024, 19:30:04) [MSC v.1942 64 bit (AMD64)]

if 'mibBuilder' not in globals():
    import sys

    sys.stderr.write(__doc__)
    sys.exit(1)

# Import base ASN.1 objects even if this MIB does not use it

(Integer,
 OctetString,
 ObjectIdentifier) = mibBuilder.importSymbols(
    "ASN1",
    "Integer",
    "OctetString",
    "ObjectIdentifier")

(NamedValues,) = mibBuilder.importSymbols(
    "ASN1-ENUMERATION",
    "NamedValues")
(ConstraintsIntersection,
 ConstraintsUnion,
 SingleValueConstraint,
 ValueRangeConstraint,
 ValueSizeConstraint) = mibBuilder.importSymbols(
    "ASN1-REFINEMENT",
    "ConstraintsIntersection",
    "ConstraintsUnion",
    "SingleValueConstraint",
    "ValueRangeConstraint",
    "ValueSizeConstraint")

# Import SMI symbols from the MIBs this MIB depends on

(ModuleCompliance,
 NotificationGroup,
 ObjectGroup) = mibBuilder.importSymbols(
    "SNMPv2-CONF",
    "ModuleCompliance",
    "NotificationGroup",
    "ObjectGroup")

(Bits,
 Counter32,
 Counter64,
 Gauge32,
 Integer32,
 IpAddress,
 ModuleIdentity,
 MibIdentifier,
 NotificationType,
 ObjectIdentity,
 MibScalar,
 MibTable,
 MibTableRow,
 MibTableColumn,
 TimeTicks,
 Unsigned32,
 enterprises,
 iso) = mibBuilder.importSymbols(
    "SNMPv2-SMI",
    "Bits",
    "Counter32",
    "Counter64",
    "Gauge32",
    "Integer32",
    "IpAddress",
    "ModuleIdentity",
    "MibIdentifier",
    "NotificationType",
    "ObjectIdentity",
    "MibScalar",
    "MibTable",
    "MibTableRow",
    "MibTableColumn",
    "TimeTicks",
    "Unsigned32",
    "enterprises",
    "iso")

(DisplayString,
 MacAddress,
 PhysAddress,
 TextualConvention,
 TruthValue) = mibBuilder.importSymbols(
    "SNMPv2-TC",
    "DisplayString",
    "MacAddress",
    "PhysAddress",
    "TextualConvention",
    "TruthValue")


# MODULE-IDENTITY

fsTredessMIB = ModuleIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2)
)
if mibBuilder.loadTexts:
    fsTredessMIB.setRevisions(
        ("2023-11-30 13:35",
         "2023-06-12 14:16",
         "2023-06-06 15:22",
         "2023-04-26 14:08",
         "2023-02-27 14:17",
         "2023-02-07 15:39",
         "2023-01-11 17:27",
         "2022-12-16 13:10",
         "2022-09-02 14:27",
         "2022-05-20 09:06",
         "2022-03-17 15:59",
         "2022-02-10 07:28",
         "2021-12-01 10:27",
         "2021-11-25 11:04",
         "2021-09-27 11:41",
         "2021-06-14 08:52",
         "2021-05-05 11:30",
         "2021-03-23 12:03",
         "2021-03-01 13:35",
         "2021-02-25 13:09",
         "2021-01-26 11:16",
         "2020-11-19 14:31",
         "2020-10-02 19:03",
         "2020-10-01 16:21",
         "2020-09-14 08:30",
         "2020-09-08 10:46",
         "2020-03-23 08:55",
         "2020-02-13 14:30",
         "2020-02-12 10:51",
         "2020-01-22 10:21",
         "2019-12-23 09:23",
         "2019-11-20 08:31",
         "2019-10-18 08:10",
         "2019-09-13 12:31",
         "2019-07-29 09:01",
         "2019-07-08 08:37",
         "2019-06-28 14:23",
         "2019-04-24 10:12",
         "2019-04-08 08:31",
         "2019-03-28 13:15",
         "2019-03-25 08:30",
         "2019-02-11 17:33",
         "2019-02-11 10:20",
         "2019-02-03 15:53",
         "2019-01-09 12:11",
         "2018-12-14 10:11",
         "2018-11-27 08:49",
         "2018-09-26 13:00",
         "2018-08-28 11:01",
         "2018-07-11 08:11",
         "2018-07-03 11:46",
         "2018-06-18 10:05",
         "2018-02-26 08:01",
         "2018-01-25 10:01",
         "2017-12-19 08:13",
         "2017-11-03 09:01",
         "2017-09-21 07:52",
         "2017-09-20 08:30",
         "2017-09-07 09:46",
         "2017-09-06 11:31",
         "2017-06-26 09:13",
         "2017-06-21 08:21",
         "2017-06-19 13:40",
         "2017-06-07 19:10",
         "2017-05-12 08:43",
         "2017-04-26 11:17",
         "2017-04-19 09:30",
         "2017-03-09 12:36",
         "2017-02-22 09:34",
         "2016-11-11 09:31",
         "2016-09-27 10:32",
         "2016-05-18 09:58",
         "2016-05-12 10:05",
         "2016-04-06 18:01",
         "2016-03-16 12:14",
         "2016-01-15 18:04",
         "2015-10-09 10:47")
    )


# Types definitions


# TEXTUAL-CONVENTIONS



class RedundancyDeviceStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("notReadyInitializing", 1),
          ("loadNotReadyNotVerified", 2),
          ("loadNotReadyVerifing", 3),
          ("loadNotReadyLastVerificationNok", 4),
          ("loadNotReadyLastVerification", 5),
          ("loadTestingInput", 6),
          ("loadReady", 7),
          ("antennaNok", 8),
          ("antennaOk", 9),
          ("disabled", 10),
          ("loadManual", 11),
          ("antennaManual", 12),
          ("unknownManual", 13),
          ("commError", 14),
          ("powerOff", 15),
          ("commInitError", 16),
          ("unknownAuto", 17),
          ("swVersionError", 18),
          ("loadNotReady", 19),
          ("loadNotReadyMaxSwitchings", 20),
          ("antennaNokMaxRestorations", 21),
          ("antennaOkMaxRestorations", 22),
          ("loadNotReadyMaxVerifications", 23),
          ("maintenanceMode", 24),
          ("dummyAntenna", 25),
          ("priorityDisabled", 26),
          ("loadReadyVerifing", 27),
          ("loadNotReadyMaxRestorations", 28))
    )



class RedundancyRfSwitchStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("ok", 1),
          ("errorNoPosition", 2),
          ("errorBlocked", 3))
    )



class FloatingPoint(TextualConvention, OctetString):
    status = "current"
    displayHint = "255a"
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 63),
    )



class AlarmStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              6)
        )
    )
    namedValues = NamedValues(
        *(("desactivedAlarm", 0),
          ("activedAlarm", 1),
          ("disabledAlarm", 2),
          ("noApplyAlarm", 3),
          ("uninitiatedAlarm", 6))
    )



class EventStatus(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 0),
          ("noAlarm", 1),
          ("alarmTriggered", 2),
          ("notApplyAlarm", 3),
          ("disabledAlarm", 4),
          ("information", 5))
    )



class DisabledEnabled(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )



class NoYes(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )



class SyncNotSync(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("notSync", 0),
          ("sync", 1))
    )



class NullApply(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("apply", 1))
    )



class OptionHw(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notInstalled", 0),
          ("installed", 1),
          ("versionError", 2),
          ("hardwareError", 3))
    )



class OptionSw(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("notInstalled", 0),
          ("installed", 1))
    )



class OpenClose(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("open", 0),
          ("close", 1))
    )



class IsdbtLayerConstellation(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("dqpsk", 1),
          ("qam16", 2),
          ("qam64", 3),
          ("reserved4", 4),
          ("reserved5", 5),
          ("reserved6", 6),
          ("reserved7", 7))
    )



class IsdbtLayerCodeRate(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("codeRate1div2", 1),
          ("codeRate2div3", 2),
          ("codeRate3div4", 3),
          ("codeRate5div6", 4),
          ("codeRate7div8", 5),
          ("reserved5", 6),
          ("reserved6", 7),
          ("reserved7", 8))
    )



class NokOk(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("nok", 0),
          ("ok", 1))
    )



class LinkStatusValue(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("eth10MFullDuplex", 0),
          ("eth100MFullDuplex", 1),
          ("eth1000MFullDuplex", 2),
          ("ethDown", 3),
          ("disabled", 4),
          ("eth10MHalfDuplex", 5),
          ("eth100MHalfDuplex", 6),
          ("eth1000MHalfDuplex", 7))
    )



class LinkConfigurationValue(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("auto", 0),
          ("eth10MFullDuplex", 1),
          ("eth10MHalfDuplex", 2),
          ("eth100MFullDuplex", 3),
          ("eth100MHalfDuplex", 4),
          ("eth1000MFullDuplex", 5))
    )



class DabOutputChannelType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37)
        )
    )
    namedValues = NamedValues(
        *(("ch5A", 0),
          ("ch5B", 1),
          ("ch5C", 2),
          ("ch5D", 3),
          ("ch6A", 4),
          ("ch6B", 5),
          ("ch6C", 6),
          ("ch6D", 7),
          ("ch7A", 8),
          ("ch7B", 9),
          ("ch7C", 10),
          ("ch7D", 11),
          ("ch8A", 12),
          ("ch8B", 13),
          ("ch8C", 14),
          ("ch8D", 15),
          ("ch9A", 16),
          ("ch9B", 17),
          ("ch9C", 18),
          ("ch9D", 19),
          ("ch10A", 20),
          ("ch10B", 21),
          ("ch10C", 22),
          ("ch10D", 23),
          ("ch11A", 24),
          ("ch11B", 25),
          ("ch11C", 26),
          ("ch11D", 27),
          ("ch12A", 28),
          ("ch12B", 29),
          ("ch12C", 30),
          ("ch12D", 31),
          ("ch13A", 32),
          ("ch13B", 33),
          ("ch13C", 34),
          ("ch13D", 35),
          ("ch13E", 36),
          ("ch13F", 37))
    )



# MIB Managed Objects in the order of their OIDs

_Televes_ObjectIdentity = ObjectIdentity
televes = _Televes_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180)
)
_TelevesGroup_ObjectIdentity = ObjectIdentity
televesGroup = _TelevesGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2)
)
_Tredess_ObjectIdentity = ObjectIdentity
tredess = _Tredess_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1)
)
_TredessProducts_ObjectIdentity = ObjectIdentity
tredessProducts = _TredessProducts_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1)
)
_System_ObjectIdentity = ObjectIdentity
system = _System_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1)
)
_General_ObjectIdentity = ObjectIdentity
general = _General_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 1)
)


class _Language_Type(Integer32):
    """Custom type language based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("spanish", 0),
          ("english", 1),
          ("french", 2))
    )


_Language_Type.__name__ = "Integer32"
_Language_Object = MibScalar
language = _Language_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 1, 1),
    _Language_Type()
)
language.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    language.setStatus("current")


class _Name_Type(DisplayString):
    """Custom type name based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_Name_Type.__name__ = "DisplayString"
_Name_Object = MibScalar
name = _Name_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 1, 2),
    _Name_Type()
)
name.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    name.setStatus("current")


class _Temperature_Type(DisplayString):
    """Custom type temperature based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_Temperature_Type.__name__ = "DisplayString"
_Temperature_Object = MibScalar
temperature = _Temperature_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 1, 3),
    _Temperature_Type()
)
temperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperature.setStatus("current")


class _Location_Type(DisplayString):
    """Custom type location based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_Location_Type.__name__ = "DisplayString"
_Location_Object = MibScalar
location = _Location_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 1, 4),
    _Location_Type()
)
location.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    location.setStatus("current")


class _OperationMode_Type(Integer32):
    """Custom type operationMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("local", 0),
          ("remote", 1))
    )


_OperationMode_Type.__name__ = "Integer32"
_OperationMode_Object = MibScalar
operationMode = _OperationMode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 1, 5),
    _OperationMode_Type()
)
operationMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    operationMode.setStatus("current")


class _AutoreturnToRemote_Type(Integer32):
    """Custom type autoreturnToRemote based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              2,
              6,
              15)
        )
    )
    namedValues = NamedValues(
        *(("auto30minutes", 0),
          ("auto2minutes", 2),
          ("auto12hours", 6),
          ("autoDisabled", 15))
    )


_AutoreturnToRemote_Type.__name__ = "Integer32"
_AutoreturnToRemote_Object = MibScalar
autoreturnToRemote = _AutoreturnToRemote_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 1, 6),
    _AutoreturnToRemote_Type()
)
autoreturnToRemote.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    autoreturnToRemote.setStatus("current")
_DateTime_ObjectIdentity = ObjectIdentity
dateTime = _DateTime_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 1, 10)
)


class _DateTimeSource_Type(Integer32):
    """Custom type dateTimeSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("manual", 0),
          ("ntp", 1),
          ("gnss", 2),
          ("input", 3))
    )


_DateTimeSource_Type.__name__ = "Integer32"
_DateTimeSource_Object = MibScalar
dateTimeSource = _DateTimeSource_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 1, 10, 1),
    _DateTimeSource_Type()
)
dateTimeSource.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dateTimeSource.setStatus("current")


class _DateTimeStatus_Type(Integer32):
    """Custom type dateTimeStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("desynchronized", 0),
          ("synchronized", 1))
    )


_DateTimeStatus_Type.__name__ = "Integer32"
_DateTimeStatus_Object = MibScalar
dateTimeStatus = _DateTimeStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 1, 10, 2),
    _DateTimeStatus_Type()
)
dateTimeStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dateTimeStatus.setStatus("current")


class _DateTime1_Type(Integer32):
    """Custom type dateTime1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("manual", 0),
          ("ntp", 1),
          ("gnss", 2),
          ("input", 3))
    )


_DateTime1_Type.__name__ = "Integer32"
_DateTime1_Object = MibScalar
dateTime1 = _DateTime1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 1, 10, 3),
    _DateTime1_Type()
)
dateTime1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dateTime1.setStatus("current")


class _DateTime2_Type(Integer32):
    """Custom type dateTime2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("ntp", 1),
          ("gnss", 2),
          ("input", 3))
    )


_DateTime2_Type.__name__ = "Integer32"
_DateTime2_Object = MibScalar
dateTime2 = _DateTime2_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 1, 10, 4),
    _DateTime2_Type()
)
dateTime2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dateTime2.setStatus("current")
_LocalTime_Type = DisplayString
_LocalTime_Object = MibScalar
localTime = _LocalTime_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 1, 10, 5),
    _LocalTime_Type()
)
localTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    localTime.setStatus("current")


class _UtcOffset_Type(Integer32):
    """Custom type utcOffset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-11, 12),
    )


_UtcOffset_Type.__name__ = "Integer32"
_UtcOffset_Object = MibScalar
utcOffset = _UtcOffset_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 1, 10, 6),
    _UtcOffset_Type()
)
utcOffset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    utcOffset.setStatus("current")
_NtpServer_Type = DisplayString
_NtpServer_Object = MibScalar
ntpServer = _NtpServer_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 1, 10, 7),
    _NtpServer_Type()
)
ntpServer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ntpServer.setStatus("current")


class _NtpRefresh_Type(Unsigned32):
    """Custom type ntpRefresh based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 180),
    )


_NtpRefresh_Type.__name__ = "Unsigned32"
_NtpRefresh_Object = MibScalar
ntpRefresh = _NtpRefresh_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 1, 10, 8),
    _NtpRefresh_Type()
)
ntpRefresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ntpRefresh.setStatus("current")


class _NtpClient_Type(Integer32):
    """Custom type ntpClient based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("synchronized", 0),
          ("syntaxisError", 1),
          ("serverConnectionError", 2),
          ("serverDroppedLeapNotInSync", 3),
          ("serverDroppedLeapNotInSyncNoData", 4),
          ("serverDroppedStrataTooHigh", 5),
          ("serverDroppedStepTimeServer", 6),
          ("notServerSuitableForSync", 7),
          ("unknownError", 8),
          ("notSynchronized", 9),
          ("notConfigured", 10),
          ("synchronizedAlternative", 11))
    )


_NtpClient_Type.__name__ = "Integer32"
_NtpClient_Object = MibScalar
ntpClient = _NtpClient_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 1, 10, 9),
    _NtpClient_Type()
)
ntpClient.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpClient.setStatus("current")


class _NtpServerStatus_Type(Integer32):
    """Custom type ntpServerStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("notRunning", 0),
          ("running", 1))
    )


_NtpServerStatus_Type.__name__ = "Integer32"
_NtpServerStatus_Object = MibScalar
ntpServerStatus = _NtpServerStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 1, 10, 10),
    _NtpServerStatus_Type()
)
ntpServerStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpServerStatus.setStatus("current")
_NtpServerAlternative_Type = DisplayString
_NtpServerAlternative_Object = MibScalar
ntpServerAlternative = _NtpServerAlternative_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 1, 10, 11),
    _NtpServerAlternative_Type()
)
ntpServerAlternative.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ntpServerAlternative.setStatus("current")


class _Timezone_Type(Integer32):
    """Custom type timezone based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              4,
              8,
              12,
              16,
              20,
              24,
              28,
              32,
              36,
              40,
              44,
              48,
              52,
              56,
              60,
              64,
              68,
              72,
              76,
              80,
              84,
              88,
              92,
              96,
              100,
              102,
              104,
              106,
              107,
              108,
              109,
              112,
              114,
              116,
              120,
              124,
              128,
              132,
              136,
              140,
              144,
              148,
              152,
              156,
              160,
              164,
              168,
              172,
              176,
              180,
              184,
              188,
              192,
              196,
              200,
              204,
              208,
              212,
              216,
              220,
              224,
              228,
              232,
              236,
              240,
              244)
        )
    )
    namedValues = NamedValues(
        *(("deshabilitado", 0),
          ("pacificNiueNUT", 4),
          ("pacificHonoluluUSHawaii", 8),
          ("americaAnchorageUSAlask", 12),
          ("americaLosAngelesUSPacific", 16),
          ("americaTijuana", 20),
          ("americaPhoenixUSArizona", 24),
          ("americaDenverUSMountain", 28),
          ("americaMazatlan", 32),
          ("americaChicagoUSCentral", 36),
          ("americaReginaCanadaSaskatchewan", 40),
          ("americaMexicoCity", 44),
          ("americaBogota", 48),
          ("americaNewYorkUSEastern", 52),
          ("americaCaracas", 56),
          ("americaHalifaxCanadaAtlantic", 60),
          ("americaSantiago", 64),
          ("americaLaPaz", 68),
          ("americaStJohnsCandaNewfoundland", 72),
          ("americaSaoPauloBrazilEast", 76),
          ("americaBuenosAires", 80),
          ("americaMontevideo", 84),
          ("atlanticSouthGeorgiaKingEdward", 88),
          ("atlanticAzores", 92),
          ("atlanticCapeVerdePraia", 96),
          ("africaCasablanca", 100),
          ("europeLisbonAtalancticCanaryFaro", 102),
          ("europeLondon", 104),
          ("europeAmsterdamBerlinRomeStockho", 106),
          ("europeBelgradeBratislavaBudapest", 107),
          ("europeBrusselsCopenhagenMadridPa", 108),
          ("europeSarajevoSkopjeWarsawZagreb", 109),
          ("africaKinshasa", 112),
          ("europeAthensBucharestHelsinki", 114),
          ("africaCairo", 116),
          ("asiaJerusalem", 120),
          ("africaJohannesburg", 124),
          ("europeIstanbul", 128),
          ("europeMoscow", 132),
          ("africaNairobi", 136),
          ("asiaBaghdad", 140),
          ("asiaTehran", 144),
          ("asiaMuscat", 148),
          ("asiaBaku", 152),
          ("asiaKabul", 156),
          ("asiaKarachi", 160),
          ("asiaKolkata", 164),
          ("asiaKatmandu", 168),
          ("asiaAlmaty", 172),
          ("asiaDhaka", 176),
          ("asiaRangoonAsiaNaypyidaw", 180),
          ("asiaBangkok", 184),
          ("asiaHongKong", 188),
          ("asiaSingapore", 192),
          ("australiaPerth", 196),
          ("asiaTaipei", 200),
          ("asiaTokyo", 204),
          ("asiaSeoul", 208),
          ("australiaAdelaide", 212),
          ("australiaDarwin", 216),
          ("australiaSydney", 220),
          ("australiaBrisbane", 224),
          ("pacificNoumea", 228),
          ("pacificAuckland", 232),
          ("pacificKwajalein", 236),
          ("pacificApiaSamoa", 240),
          ("pacificLineIslands", 244))
    )


_Timezone_Type.__name__ = "Integer32"
_Timezone_Object = MibScalar
timezone = _Timezone_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 1, 10, 15),
    _Timezone_Type()
)
timezone.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    timezone.setStatus("current")
_NetworkInterfaces_ObjectIdentity = ObjectIdentity
networkInterfaces = _NetworkInterfaces_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 2)
)
_RemoteInterfaz_ObjectIdentity = ObjectIdentity
remoteInterfaz = _RemoteInterfaz_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 2, 1)
)
_Dhcp_Type = DisabledEnabled
_Dhcp_Object = MibScalar
dhcp = _Dhcp_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 2, 1, 1),
    _Dhcp_Type()
)
dhcp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dhcp.setStatus("current")
_RemoteIp_Type = IpAddress
_RemoteIp_Object = MibScalar
remoteIp = _RemoteIp_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 2, 1, 2),
    _RemoteIp_Type()
)
remoteIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remoteIp.setStatus("current")
_RemoteNetmask_Type = IpAddress
_RemoteNetmask_Object = MibScalar
remoteNetmask = _RemoteNetmask_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 2, 1, 3),
    _RemoteNetmask_Type()
)
remoteNetmask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remoteNetmask.setStatus("current")
_RemoteGateway_Type = IpAddress
_RemoteGateway_Object = MibScalar
remoteGateway = _RemoteGateway_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 2, 1, 4),
    _RemoteGateway_Type()
)
remoteGateway.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    remoteGateway.setStatus("current")
_DnsServer_Type = IpAddress
_DnsServer_Object = MibScalar
dnsServer = _DnsServer_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 2, 1, 5),
    _DnsServer_Type()
)
dnsServer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dnsServer.setStatus("current")
_MacAddr_Type = MacAddress
_MacAddr_Object = MibScalar
macAddr = _MacAddr_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 2, 1, 6),
    _MacAddr_Type()
)
macAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    macAddr.setStatus("current")
_LocalInterfaz_ObjectIdentity = ObjectIdentity
localInterfaz = _LocalInterfaz_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 2, 2)
)
_LocalIp_Type = IpAddress
_LocalIp_Object = MibScalar
localIp = _LocalIp_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 2, 2, 1),
    _LocalIp_Type()
)
localIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    localIp.setStatus("current")
_LocalNetmask_Type = IpAddress
_LocalNetmask_Object = MibScalar
localNetmask = _LocalNetmask_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 2, 2, 2),
    _LocalNetmask_Type()
)
localNetmask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    localNetmask.setStatus("current")
_LocalMacAddr_Type = MacAddress
_LocalMacAddr_Object = MibScalar
localMacAddr = _LocalMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 2, 2, 5),
    _LocalMacAddr_Type()
)
localMacAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    localMacAddr.setStatus("current")
_LinkStatus_ObjectIdentity = ObjectIdentity
linkStatus = _LinkStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 2, 3)
)
_Gbe1_Type = LinkStatusValue
_Gbe1_Object = MibScalar
gbe1 = _Gbe1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 2, 3, 1),
    _Gbe1_Type()
)
gbe1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    gbe1.setStatus("current")
_Gbe2_Type = LinkStatusValue
_Gbe2_Object = MibScalar
gbe2 = _Gbe2_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 2, 3, 2),
    _Gbe2_Type()
)
gbe2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    gbe2.setStatus("current")
_Gbe3_Type = LinkStatusValue
_Gbe3_Object = MibScalar
gbe3 = _Gbe3_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 2, 3, 3),
    _Gbe3_Type()
)
gbe3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    gbe3.setStatus("current")
_Gbe4_Type = LinkStatusValue
_Gbe4_Object = MibScalar
gbe4 = _Gbe4_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 2, 3, 4),
    _Gbe4_Type()
)
gbe4.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    gbe4.setStatus("current")
_LinkConfiguration_ObjectIdentity = ObjectIdentity
linkConfiguration = _LinkConfiguration_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 2, 5)
)
_Gbe1LinkConfiguration_Type = LinkConfigurationValue
_Gbe1LinkConfiguration_Object = MibScalar
gbe1LinkConfiguration = _Gbe1LinkConfiguration_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 2, 5, 1),
    _Gbe1LinkConfiguration_Type()
)
gbe1LinkConfiguration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    gbe1LinkConfiguration.setStatus("current")
_Gbe2LinkConfiguration_Type = LinkConfigurationValue
_Gbe2LinkConfiguration_Object = MibScalar
gbe2LinkConfiguration = _Gbe2LinkConfiguration_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 2, 5, 2),
    _Gbe2LinkConfiguration_Type()
)
gbe2LinkConfiguration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    gbe2LinkConfiguration.setStatus("current")
_Gbe3LinkConfiguration_Type = LinkConfigurationValue
_Gbe3LinkConfiguration_Object = MibScalar
gbe3LinkConfiguration = _Gbe3LinkConfiguration_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 2, 5, 3),
    _Gbe3LinkConfiguration_Type()
)
gbe3LinkConfiguration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    gbe3LinkConfiguration.setStatus("current")
_Gbe4LinkConfiguration_Type = LinkConfigurationValue
_Gbe4LinkConfiguration_Object = MibScalar
gbe4LinkConfiguration = _Gbe4LinkConfiguration_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 2, 5, 4),
    _Gbe4LinkConfiguration_Type()
)
gbe4LinkConfiguration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    gbe4LinkConfiguration.setStatus("current")
_WebInterface_ObjectIdentity = ObjectIdentity
webInterface = _WebInterface_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 3)
)
_AutorefreshWeb_ObjectIdentity = ObjectIdentity
autorefreshWeb = _AutorefreshWeb_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 3, 1)
)
_AutorefreshWebConfig_Type = DisabledEnabled
_AutorefreshWebConfig_Object = MibScalar
autorefreshWebConfig = _AutorefreshWebConfig_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 3, 1, 1),
    _AutorefreshWebConfig_Type()
)
autorefreshWebConfig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    autorefreshWebConfig.setStatus("current")


class _AutorefreshWebTime_Type(Unsigned32):
    """Custom type autorefreshWebTime based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_AutorefreshWebTime_Type.__name__ = "Unsigned32"
_AutorefreshWebTime_Object = MibScalar
autorefreshWebTime = _AutorefreshWebTime_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 3, 1, 2),
    _AutorefreshWebTime_Type()
)
autorefreshWebTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    autorefreshWebTime.setStatus("current")
if mibBuilder.loadTexts:
    autorefreshWebTime.setUnits("seconds")
_ConnectedWebUsers_Type = Unsigned32
_ConnectedWebUsers_Object = MibScalar
connectedWebUsers = _ConnectedWebUsers_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 3, 1, 10),
    _ConnectedWebUsers_Type()
)
connectedWebUsers.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    connectedWebUsers.setStatus("current")
_UsersControl_ObjectIdentity = ObjectIdentity
usersControl = _UsersControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 3, 2)
)


class _User_Type(Integer32):
    """Custom type user based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("admin", 0),
          ("public", 1))
    )


_User_Type.__name__ = "Integer32"
_User_Object = MibScalar
user = _User_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 3, 2, 1),
    _User_Type()
)
user.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    user.setStatus("current")


class _ActualPassword_Type(DisplayString):
    """Custom type actualPassword based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 8),
    )


_ActualPassword_Type.__name__ = "DisplayString"
_ActualPassword_Object = MibScalar
actualPassword = _ActualPassword_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 3, 2, 2),
    _ActualPassword_Type()
)
actualPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    actualPassword.setStatus("current")


class _NewPassword_Type(DisplayString):
    """Custom type newPassword based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 8),
    )


_NewPassword_Type.__name__ = "DisplayString"
_NewPassword_Object = MibScalar
newPassword = _NewPassword_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 3, 2, 3),
    _NewPassword_Type()
)
newPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    newPassword.setStatus("current")


class _ConfirmNewPassword_Type(DisplayString):
    """Custom type confirmNewPassword based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 8),
    )


_ConfirmNewPassword_Type.__name__ = "DisplayString"
_ConfirmNewPassword_Object = MibScalar
confirmNewPassword = _ConfirmNewPassword_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 3, 2, 4),
    _ConfirmNewPassword_Type()
)
confirmNewPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    confirmNewPassword.setStatus("current")
_SetDefaultPasswords_ObjectIdentity = ObjectIdentity
setDefaultPasswords = _SetDefaultPasswords_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 3, 3)
)


class _AdminUserPassword_Type(Integer32):
    """Custom type adminUserPassword based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("reset", 1))
    )


_AdminUserPassword_Type.__name__ = "Integer32"
_AdminUserPassword_Object = MibScalar
adminUserPassword = _AdminUserPassword_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 3, 3, 1),
    _AdminUserPassword_Type()
)
adminUserPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    adminUserPassword.setStatus("current")


class _PublicUserPassword_Type(Integer32):
    """Custom type publicUserPassword based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("reset", 1))
    )


_PublicUserPassword_Type.__name__ = "Integer32"
_PublicUserPassword_Object = MibScalar
publicUserPassword = _PublicUserPassword_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 3, 3, 2),
    _PublicUserPassword_Type()
)
publicUserPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    publicUserPassword.setStatus("current")
_EventConfiguration_ObjectIdentity = ObjectIdentity
eventConfiguration = _EventConfiguration_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4)
)
_AlarmsConfiguration_ObjectIdentity = ObjectIdentity
alarmsConfiguration = _AlarmsConfiguration_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1)
)
_GeralTable_Object = MibTable
geralTable = _GeralTable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 1)
)
if mibBuilder.loadTexts:
    geralTable.setStatus("current")
_GeralEntry_Object = MibTableRow
geralEntry = _GeralEntry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 1, 1)
)
geralEntry.setIndexNames(
    (0, "TREDESS-FS-MIB", "geralIndex"),
)
if mibBuilder.loadTexts:
    geralEntry.setStatus("current")


class _GeralIndex_Type(Unsigned32):
    """Custom type geralIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_GeralIndex_Type.__name__ = "Unsigned32"
_GeralIndex_Object = MibTableColumn
geralIndex = _GeralIndex_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 1, 1, 1),
    _GeralIndex_Type()
)
geralIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    geralIndex.setStatus("current")
_GeralAlarmName_Type = DisplayString
_GeralAlarmName_Object = MibTableColumn
geralAlarmName = _GeralAlarmName_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 1, 1, 2),
    _GeralAlarmName_Type()
)
geralAlarmName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geralAlarmName.setStatus("current")
_GeralAlarmStatus_Type = AlarmStatus
_GeralAlarmStatus_Object = MibTableColumn
geralAlarmStatus = _GeralAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 1, 1, 3),
    _GeralAlarmStatus_Type()
)
geralAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geralAlarmStatus.setStatus("current")
_GeralOn_Type = TruthValue
_GeralOn_Object = MibTableColumn
geralOn = _GeralOn_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 1, 1, 4),
    _GeralOn_Type()
)
geralOn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geralOn.setStatus("current")
_GeralLog_Type = TruthValue
_GeralLog_Object = MibTableColumn
geralLog = _GeralLog_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 1, 1, 5),
    _GeralLog_Type()
)
geralLog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geralLog.setStatus("current")
_GeralFault_Type = TruthValue
_GeralFault_Object = MibTableColumn
geralFault = _GeralFault_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 1, 1, 6),
    _GeralFault_Type()
)
geralFault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geralFault.setStatus("current")
_GeralWarning_Type = TruthValue
_GeralWarning_Object = MibTableColumn
geralWarning = _GeralWarning_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 1, 1, 7),
    _GeralWarning_Type()
)
geralWarning.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geralWarning.setStatus("current")
_GeralLed_Type = TruthValue
_GeralLed_Object = MibTableColumn
geralLed = _GeralLed_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 1, 1, 8),
    _GeralLed_Type()
)
geralLed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geralLed.setStatus("current")
_Geral1p1_Type = TruthValue
_Geral1p1_Object = MibTableColumn
geral1p1 = _Geral1p1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 1, 1, 9),
    _Geral1p1_Type()
)
geral1p1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geral1p1.setStatus("current")
_GeralExt1_Type = TruthValue
_GeralExt1_Object = MibTableColumn
geralExt1 = _GeralExt1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 1, 1, 10),
    _GeralExt1_Type()
)
geralExt1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geralExt1.setStatus("current")
_GeralExt2_Type = TruthValue
_GeralExt2_Object = MibTableColumn
geralExt2 = _GeralExt2_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 1, 1, 11),
    _GeralExt2_Type()
)
geralExt2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geralExt2.setStatus("current")
_GeralTrap_Type = TruthValue
_GeralTrap_Object = MibTableColumn
geralTrap = _GeralTrap_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 1, 1, 12),
    _GeralTrap_Type()
)
geralTrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geralTrap.setStatus("current")
_GeralDD_Type = TruthValue
_GeralDD_Object = MibTableColumn
geralDD = _GeralDD_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 1, 1, 13),
    _GeralDD_Type()
)
geralDD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geralDD.setStatus("current")


class _GeralTrapHysteresis_Type(Unsigned32):
    """Custom type geralTrapHysteresis based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_GeralTrapHysteresis_Type.__name__ = "Unsigned32"
_GeralTrapHysteresis_Object = MibTableColumn
geralTrapHysteresis = _GeralTrapHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 1, 1, 14),
    _GeralTrapHysteresis_Type()
)
geralTrapHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    geralTrapHysteresis.setStatus("current")
_AmplifierTable_Object = MibTable
amplifierTable = _AmplifierTable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 5)
)
if mibBuilder.loadTexts:
    amplifierTable.setStatus("current")
_AmplifierEntry_Object = MibTableRow
amplifierEntry = _AmplifierEntry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 5, 1)
)
amplifierEntry.setIndexNames(
    (0, "TREDESS-FS-MIB", "amplifierIndex"),
)
if mibBuilder.loadTexts:
    amplifierEntry.setStatus("current")


class _AmplifierIndex_Type(Unsigned32):
    """Custom type amplifierIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5),
    )


_AmplifierIndex_Type.__name__ = "Unsigned32"
_AmplifierIndex_Object = MibTableColumn
amplifierIndex = _AmplifierIndex_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 5, 1, 1),
    _AmplifierIndex_Type()
)
amplifierIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    amplifierIndex.setStatus("current")
_AmplifierAlarmName_Type = DisplayString
_AmplifierAlarmName_Object = MibTableColumn
amplifierAlarmName = _AmplifierAlarmName_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 5, 1, 2),
    _AmplifierAlarmName_Type()
)
amplifierAlarmName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amplifierAlarmName.setStatus("current")
_AmplifierAlarmStatus_Type = AlarmStatus
_AmplifierAlarmStatus_Object = MibTableColumn
amplifierAlarmStatus = _AmplifierAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 5, 1, 3),
    _AmplifierAlarmStatus_Type()
)
amplifierAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amplifierAlarmStatus.setStatus("current")
_AmplifierOn_Type = TruthValue
_AmplifierOn_Object = MibTableColumn
amplifierOn = _AmplifierOn_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 5, 1, 4),
    _AmplifierOn_Type()
)
amplifierOn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierOn.setStatus("current")
_AmplifierLog_Type = TruthValue
_AmplifierLog_Object = MibTableColumn
amplifierLog = _AmplifierLog_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 5, 1, 5),
    _AmplifierLog_Type()
)
amplifierLog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierLog.setStatus("current")
_AmplifierFault_Type = TruthValue
_AmplifierFault_Object = MibTableColumn
amplifierFault = _AmplifierFault_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 5, 1, 6),
    _AmplifierFault_Type()
)
amplifierFault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierFault.setStatus("current")
_AmplifierWarning_Type = TruthValue
_AmplifierWarning_Object = MibTableColumn
amplifierWarning = _AmplifierWarning_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 5, 1, 7),
    _AmplifierWarning_Type()
)
amplifierWarning.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierWarning.setStatus("current")
_AmplifierLed_Type = TruthValue
_AmplifierLed_Object = MibTableColumn
amplifierLed = _AmplifierLed_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 5, 1, 8),
    _AmplifierLed_Type()
)
amplifierLed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierLed.setStatus("current")
_Amplifier1p1_Type = TruthValue
_Amplifier1p1_Object = MibTableColumn
amplifier1p1 = _Amplifier1p1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 5, 1, 9),
    _Amplifier1p1_Type()
)
amplifier1p1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifier1p1.setStatus("current")
_AmplifierExt1_Type = TruthValue
_AmplifierExt1_Object = MibTableColumn
amplifierExt1 = _AmplifierExt1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 5, 1, 10),
    _AmplifierExt1_Type()
)
amplifierExt1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierExt1.setStatus("current")
_AmplifierExt2_Type = TruthValue
_AmplifierExt2_Object = MibTableColumn
amplifierExt2 = _AmplifierExt2_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 5, 1, 11),
    _AmplifierExt2_Type()
)
amplifierExt2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierExt2.setStatus("current")
_AmplifierTrap_Type = TruthValue
_AmplifierTrap_Object = MibTableColumn
amplifierTrap = _AmplifierTrap_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 5, 1, 12),
    _AmplifierTrap_Type()
)
amplifierTrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierTrap.setStatus("current")
_AmplifierDD_Type = TruthValue
_AmplifierDD_Object = MibTableColumn
amplifierDD = _AmplifierDD_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 5, 1, 13),
    _AmplifierDD_Type()
)
amplifierDD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierDD.setStatus("current")


class _AmplifierTrapHysteresis_Type(Unsigned32):
    """Custom type amplifierTrapHysteresis based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_AmplifierTrapHysteresis_Type.__name__ = "Unsigned32"
_AmplifierTrapHysteresis_Object = MibTableColumn
amplifierTrapHysteresis = _AmplifierTrapHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 5, 1, 14),
    _AmplifierTrapHysteresis_Type()
)
amplifierTrapHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierTrapHysteresis.setStatus("current")
_AmplifierStage1Table_Object = MibTable
amplifierStage1Table = _AmplifierStage1Table_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 6)
)
if mibBuilder.loadTexts:
    amplifierStage1Table.setStatus("current")
_AmplifierStage1Entry_Object = MibTableRow
amplifierStage1Entry = _AmplifierStage1Entry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 6, 1)
)
amplifierStage1Entry.setIndexNames(
    (0, "TREDESS-FS-MIB", "amplifierStage1Index"),
)
if mibBuilder.loadTexts:
    amplifierStage1Entry.setStatus("current")


class _AmplifierStage1Index_Type(Unsigned32):
    """Custom type amplifierStage1Index based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5),
    )


_AmplifierStage1Index_Type.__name__ = "Unsigned32"
_AmplifierStage1Index_Object = MibTableColumn
amplifierStage1Index = _AmplifierStage1Index_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 6, 1, 1),
    _AmplifierStage1Index_Type()
)
amplifierStage1Index.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    amplifierStage1Index.setStatus("current")
_AmplifierStage1AlarmName_Type = DisplayString
_AmplifierStage1AlarmName_Object = MibTableColumn
amplifierStage1AlarmName = _AmplifierStage1AlarmName_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 6, 1, 2),
    _AmplifierStage1AlarmName_Type()
)
amplifierStage1AlarmName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amplifierStage1AlarmName.setStatus("current")
_AmplifierStage1AlarmStatus_Type = AlarmStatus
_AmplifierStage1AlarmStatus_Object = MibTableColumn
amplifierStage1AlarmStatus = _AmplifierStage1AlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 6, 1, 3),
    _AmplifierStage1AlarmStatus_Type()
)
amplifierStage1AlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amplifierStage1AlarmStatus.setStatus("current")
_AmplifierStage1On_Type = TruthValue
_AmplifierStage1On_Object = MibTableColumn
amplifierStage1On = _AmplifierStage1On_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 6, 1, 4),
    _AmplifierStage1On_Type()
)
amplifierStage1On.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage1On.setStatus("current")
_AmplifierStage1Log_Type = TruthValue
_AmplifierStage1Log_Object = MibTableColumn
amplifierStage1Log = _AmplifierStage1Log_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 6, 1, 5),
    _AmplifierStage1Log_Type()
)
amplifierStage1Log.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage1Log.setStatus("current")
_AmplifierStage1Fault_Type = TruthValue
_AmplifierStage1Fault_Object = MibTableColumn
amplifierStage1Fault = _AmplifierStage1Fault_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 6, 1, 6),
    _AmplifierStage1Fault_Type()
)
amplifierStage1Fault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage1Fault.setStatus("current")
_AmplifierStage1Warning_Type = TruthValue
_AmplifierStage1Warning_Object = MibTableColumn
amplifierStage1Warning = _AmplifierStage1Warning_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 6, 1, 7),
    _AmplifierStage1Warning_Type()
)
amplifierStage1Warning.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage1Warning.setStatus("current")
_AmplifierStage1Led_Type = TruthValue
_AmplifierStage1Led_Object = MibTableColumn
amplifierStage1Led = _AmplifierStage1Led_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 6, 1, 8),
    _AmplifierStage1Led_Type()
)
amplifierStage1Led.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage1Led.setStatus("current")
_AmplifierStage11p1_Type = TruthValue
_AmplifierStage11p1_Object = MibTableColumn
amplifierStage11p1 = _AmplifierStage11p1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 6, 1, 9),
    _AmplifierStage11p1_Type()
)
amplifierStage11p1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage11p1.setStatus("current")
_AmplifierStage1Ext1_Type = TruthValue
_AmplifierStage1Ext1_Object = MibTableColumn
amplifierStage1Ext1 = _AmplifierStage1Ext1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 6, 1, 10),
    _AmplifierStage1Ext1_Type()
)
amplifierStage1Ext1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage1Ext1.setStatus("current")
_AmplifierStage1Ext2_Type = TruthValue
_AmplifierStage1Ext2_Object = MibTableColumn
amplifierStage1Ext2 = _AmplifierStage1Ext2_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 6, 1, 11),
    _AmplifierStage1Ext2_Type()
)
amplifierStage1Ext2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage1Ext2.setStatus("current")
_AmplifierStage1Trap_Type = TruthValue
_AmplifierStage1Trap_Object = MibTableColumn
amplifierStage1Trap = _AmplifierStage1Trap_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 6, 1, 12),
    _AmplifierStage1Trap_Type()
)
amplifierStage1Trap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage1Trap.setStatus("current")
_AmplifierStage1DD_Type = TruthValue
_AmplifierStage1DD_Object = MibTableColumn
amplifierStage1DD = _AmplifierStage1DD_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 6, 1, 13),
    _AmplifierStage1DD_Type()
)
amplifierStage1DD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage1DD.setStatus("current")


class _AmplifierStage1TrapHysteresis_Type(Unsigned32):
    """Custom type amplifierStage1TrapHysteresis based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_AmplifierStage1TrapHysteresis_Type.__name__ = "Unsigned32"
_AmplifierStage1TrapHysteresis_Object = MibTableColumn
amplifierStage1TrapHysteresis = _AmplifierStage1TrapHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 6, 1, 14),
    _AmplifierStage1TrapHysteresis_Type()
)
amplifierStage1TrapHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage1TrapHysteresis.setStatus("current")
_AmplifierStage2Table_Object = MibTable
amplifierStage2Table = _AmplifierStage2Table_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 7)
)
if mibBuilder.loadTexts:
    amplifierStage2Table.setStatus("current")
_AmplifierStage2Entry_Object = MibTableRow
amplifierStage2Entry = _AmplifierStage2Entry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 7, 1)
)
amplifierStage2Entry.setIndexNames(
    (0, "TREDESS-FS-MIB", "amplifierStage2Index"),
)
if mibBuilder.loadTexts:
    amplifierStage2Entry.setStatus("current")


class _AmplifierStage2Index_Type(Unsigned32):
    """Custom type amplifierStage2Index based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5),
    )


_AmplifierStage2Index_Type.__name__ = "Unsigned32"
_AmplifierStage2Index_Object = MibTableColumn
amplifierStage2Index = _AmplifierStage2Index_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 7, 1, 1),
    _AmplifierStage2Index_Type()
)
amplifierStage2Index.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    amplifierStage2Index.setStatus("current")
_AmplifierStage2AlarmName_Type = DisplayString
_AmplifierStage2AlarmName_Object = MibTableColumn
amplifierStage2AlarmName = _AmplifierStage2AlarmName_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 7, 1, 2),
    _AmplifierStage2AlarmName_Type()
)
amplifierStage2AlarmName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amplifierStage2AlarmName.setStatus("current")
_AmplifierStage2AlarmStatus_Type = AlarmStatus
_AmplifierStage2AlarmStatus_Object = MibTableColumn
amplifierStage2AlarmStatus = _AmplifierStage2AlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 7, 1, 3),
    _AmplifierStage2AlarmStatus_Type()
)
amplifierStage2AlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amplifierStage2AlarmStatus.setStatus("current")
_AmplifierStage2On_Type = TruthValue
_AmplifierStage2On_Object = MibTableColumn
amplifierStage2On = _AmplifierStage2On_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 7, 1, 4),
    _AmplifierStage2On_Type()
)
amplifierStage2On.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage2On.setStatus("current")
_AmplifierStage2Log_Type = TruthValue
_AmplifierStage2Log_Object = MibTableColumn
amplifierStage2Log = _AmplifierStage2Log_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 7, 1, 5),
    _AmplifierStage2Log_Type()
)
amplifierStage2Log.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage2Log.setStatus("current")
_AmplifierStage2Fault_Type = TruthValue
_AmplifierStage2Fault_Object = MibTableColumn
amplifierStage2Fault = _AmplifierStage2Fault_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 7, 1, 6),
    _AmplifierStage2Fault_Type()
)
amplifierStage2Fault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage2Fault.setStatus("current")
_AmplifierStage2Warning_Type = TruthValue
_AmplifierStage2Warning_Object = MibTableColumn
amplifierStage2Warning = _AmplifierStage2Warning_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 7, 1, 7),
    _AmplifierStage2Warning_Type()
)
amplifierStage2Warning.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage2Warning.setStatus("current")
_AmplifierStage2Led_Type = TruthValue
_AmplifierStage2Led_Object = MibTableColumn
amplifierStage2Led = _AmplifierStage2Led_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 7, 1, 8),
    _AmplifierStage2Led_Type()
)
amplifierStage2Led.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage2Led.setStatus("current")
_AmplifierStage21p1_Type = TruthValue
_AmplifierStage21p1_Object = MibTableColumn
amplifierStage21p1 = _AmplifierStage21p1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 7, 1, 9),
    _AmplifierStage21p1_Type()
)
amplifierStage21p1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage21p1.setStatus("current")
_AmplifierStage2Ext1_Type = TruthValue
_AmplifierStage2Ext1_Object = MibTableColumn
amplifierStage2Ext1 = _AmplifierStage2Ext1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 7, 1, 10),
    _AmplifierStage2Ext1_Type()
)
amplifierStage2Ext1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage2Ext1.setStatus("current")
_AmplifierStage2Ext2_Type = TruthValue
_AmplifierStage2Ext2_Object = MibTableColumn
amplifierStage2Ext2 = _AmplifierStage2Ext2_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 7, 1, 11),
    _AmplifierStage2Ext2_Type()
)
amplifierStage2Ext2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage2Ext2.setStatus("current")
_AmplifierStage2Trap_Type = TruthValue
_AmplifierStage2Trap_Object = MibTableColumn
amplifierStage2Trap = _AmplifierStage2Trap_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 7, 1, 12),
    _AmplifierStage2Trap_Type()
)
amplifierStage2Trap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage2Trap.setStatus("current")
_AmplifierStage2DD_Type = TruthValue
_AmplifierStage2DD_Object = MibTableColumn
amplifierStage2DD = _AmplifierStage2DD_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 7, 1, 13),
    _AmplifierStage2DD_Type()
)
amplifierStage2DD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage2DD.setStatus("current")


class _AmplifierStage2TrapHysteresis_Type(Unsigned32):
    """Custom type amplifierStage2TrapHysteresis based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_AmplifierStage2TrapHysteresis_Type.__name__ = "Unsigned32"
_AmplifierStage2TrapHysteresis_Object = MibTableColumn
amplifierStage2TrapHysteresis = _AmplifierStage2TrapHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 7, 1, 14),
    _AmplifierStage2TrapHysteresis_Type()
)
amplifierStage2TrapHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage2TrapHysteresis.setStatus("current")
_AmplifierStage3Table_Object = MibTable
amplifierStage3Table = _AmplifierStage3Table_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 8)
)
if mibBuilder.loadTexts:
    amplifierStage3Table.setStatus("current")
_AmplifierStage3Entry_Object = MibTableRow
amplifierStage3Entry = _AmplifierStage3Entry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 8, 1)
)
amplifierStage3Entry.setIndexNames(
    (0, "TREDESS-FS-MIB", "amplifierStage3Index"),
)
if mibBuilder.loadTexts:
    amplifierStage3Entry.setStatus("current")


class _AmplifierStage3Index_Type(Unsigned32):
    """Custom type amplifierStage3Index based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5),
    )


_AmplifierStage3Index_Type.__name__ = "Unsigned32"
_AmplifierStage3Index_Object = MibTableColumn
amplifierStage3Index = _AmplifierStage3Index_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 8, 1, 1),
    _AmplifierStage3Index_Type()
)
amplifierStage3Index.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    amplifierStage3Index.setStatus("current")
_AmplifierStage3AlarmName_Type = DisplayString
_AmplifierStage3AlarmName_Object = MibTableColumn
amplifierStage3AlarmName = _AmplifierStage3AlarmName_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 8, 1, 2),
    _AmplifierStage3AlarmName_Type()
)
amplifierStage3AlarmName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amplifierStage3AlarmName.setStatus("current")
_AmplifierStage3AlarmStatus_Type = AlarmStatus
_AmplifierStage3AlarmStatus_Object = MibTableColumn
amplifierStage3AlarmStatus = _AmplifierStage3AlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 8, 1, 3),
    _AmplifierStage3AlarmStatus_Type()
)
amplifierStage3AlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amplifierStage3AlarmStatus.setStatus("current")
_AmplifierStage3On_Type = TruthValue
_AmplifierStage3On_Object = MibTableColumn
amplifierStage3On = _AmplifierStage3On_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 8, 1, 4),
    _AmplifierStage3On_Type()
)
amplifierStage3On.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage3On.setStatus("current")
_AmplifierStage3Log_Type = TruthValue
_AmplifierStage3Log_Object = MibTableColumn
amplifierStage3Log = _AmplifierStage3Log_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 8, 1, 5),
    _AmplifierStage3Log_Type()
)
amplifierStage3Log.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage3Log.setStatus("current")
_AmplifierStage3Fault_Type = TruthValue
_AmplifierStage3Fault_Object = MibTableColumn
amplifierStage3Fault = _AmplifierStage3Fault_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 8, 1, 6),
    _AmplifierStage3Fault_Type()
)
amplifierStage3Fault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage3Fault.setStatus("current")
_AmplifierStage3Warning_Type = TruthValue
_AmplifierStage3Warning_Object = MibTableColumn
amplifierStage3Warning = _AmplifierStage3Warning_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 8, 1, 7),
    _AmplifierStage3Warning_Type()
)
amplifierStage3Warning.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage3Warning.setStatus("current")
_AmplifierStage3Led_Type = TruthValue
_AmplifierStage3Led_Object = MibTableColumn
amplifierStage3Led = _AmplifierStage3Led_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 8, 1, 8),
    _AmplifierStage3Led_Type()
)
amplifierStage3Led.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage3Led.setStatus("current")
_AmplifierStage31p1_Type = TruthValue
_AmplifierStage31p1_Object = MibTableColumn
amplifierStage31p1 = _AmplifierStage31p1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 8, 1, 9),
    _AmplifierStage31p1_Type()
)
amplifierStage31p1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage31p1.setStatus("current")
_AmplifierStage3Ext1_Type = TruthValue
_AmplifierStage3Ext1_Object = MibTableColumn
amplifierStage3Ext1 = _AmplifierStage3Ext1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 8, 1, 10),
    _AmplifierStage3Ext1_Type()
)
amplifierStage3Ext1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage3Ext1.setStatus("current")
_AmplifierStage3Ext2_Type = TruthValue
_AmplifierStage3Ext2_Object = MibTableColumn
amplifierStage3Ext2 = _AmplifierStage3Ext2_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 8, 1, 11),
    _AmplifierStage3Ext2_Type()
)
amplifierStage3Ext2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage3Ext2.setStatus("current")
_AmplifierStage3Trap_Type = TruthValue
_AmplifierStage3Trap_Object = MibTableColumn
amplifierStage3Trap = _AmplifierStage3Trap_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 8, 1, 12),
    _AmplifierStage3Trap_Type()
)
amplifierStage3Trap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage3Trap.setStatus("current")
_AmplifierStage3DD_Type = TruthValue
_AmplifierStage3DD_Object = MibTableColumn
amplifierStage3DD = _AmplifierStage3DD_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 8, 1, 13),
    _AmplifierStage3DD_Type()
)
amplifierStage3DD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage3DD.setStatus("current")


class _AmplifierStage3TrapHysteresis_Type(Unsigned32):
    """Custom type amplifierStage3TrapHysteresis based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_AmplifierStage3TrapHysteresis_Type.__name__ = "Unsigned32"
_AmplifierStage3TrapHysteresis_Object = MibTableColumn
amplifierStage3TrapHysteresis = _AmplifierStage3TrapHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 8, 1, 14),
    _AmplifierStage3TrapHysteresis_Type()
)
amplifierStage3TrapHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage3TrapHysteresis.setStatus("current")
_AmplifierStage4Table_Object = MibTable
amplifierStage4Table = _AmplifierStage4Table_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 9)
)
if mibBuilder.loadTexts:
    amplifierStage4Table.setStatus("current")
_AmplifierStage4Entry_Object = MibTableRow
amplifierStage4Entry = _AmplifierStage4Entry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 9, 1)
)
amplifierStage4Entry.setIndexNames(
    (0, "TREDESS-FS-MIB", "amplifierStage4Index"),
)
if mibBuilder.loadTexts:
    amplifierStage4Entry.setStatus("current")


class _AmplifierStage4Index_Type(Unsigned32):
    """Custom type amplifierStage4Index based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5),
    )


_AmplifierStage4Index_Type.__name__ = "Unsigned32"
_AmplifierStage4Index_Object = MibTableColumn
amplifierStage4Index = _AmplifierStage4Index_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 9, 1, 1),
    _AmplifierStage4Index_Type()
)
amplifierStage4Index.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    amplifierStage4Index.setStatus("current")
_AmplifierStage4AlarmName_Type = DisplayString
_AmplifierStage4AlarmName_Object = MibTableColumn
amplifierStage4AlarmName = _AmplifierStage4AlarmName_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 9, 1, 2),
    _AmplifierStage4AlarmName_Type()
)
amplifierStage4AlarmName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amplifierStage4AlarmName.setStatus("current")
_AmplifierStage4AlarmStatus_Type = AlarmStatus
_AmplifierStage4AlarmStatus_Object = MibTableColumn
amplifierStage4AlarmStatus = _AmplifierStage4AlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 9, 1, 3),
    _AmplifierStage4AlarmStatus_Type()
)
amplifierStage4AlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amplifierStage4AlarmStatus.setStatus("current")
_AmplifierStage4On_Type = TruthValue
_AmplifierStage4On_Object = MibTableColumn
amplifierStage4On = _AmplifierStage4On_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 9, 1, 4),
    _AmplifierStage4On_Type()
)
amplifierStage4On.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage4On.setStatus("current")
_AmplifierStage4Log_Type = TruthValue
_AmplifierStage4Log_Object = MibTableColumn
amplifierStage4Log = _AmplifierStage4Log_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 9, 1, 5),
    _AmplifierStage4Log_Type()
)
amplifierStage4Log.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage4Log.setStatus("current")
_AmplifierStage4Fault_Type = TruthValue
_AmplifierStage4Fault_Object = MibTableColumn
amplifierStage4Fault = _AmplifierStage4Fault_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 9, 1, 6),
    _AmplifierStage4Fault_Type()
)
amplifierStage4Fault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage4Fault.setStatus("current")
_AmplifierStage4Warning_Type = TruthValue
_AmplifierStage4Warning_Object = MibTableColumn
amplifierStage4Warning = _AmplifierStage4Warning_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 9, 1, 7),
    _AmplifierStage4Warning_Type()
)
amplifierStage4Warning.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage4Warning.setStatus("current")
_AmplifierStage4Led_Type = TruthValue
_AmplifierStage4Led_Object = MibTableColumn
amplifierStage4Led = _AmplifierStage4Led_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 9, 1, 8),
    _AmplifierStage4Led_Type()
)
amplifierStage4Led.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage4Led.setStatus("current")
_AmplifierStage41p1_Type = TruthValue
_AmplifierStage41p1_Object = MibTableColumn
amplifierStage41p1 = _AmplifierStage41p1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 9, 1, 9),
    _AmplifierStage41p1_Type()
)
amplifierStage41p1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage41p1.setStatus("current")
_AmplifierStage4Ext1_Type = TruthValue
_AmplifierStage4Ext1_Object = MibTableColumn
amplifierStage4Ext1 = _AmplifierStage4Ext1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 9, 1, 10),
    _AmplifierStage4Ext1_Type()
)
amplifierStage4Ext1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage4Ext1.setStatus("current")
_AmplifierStage4Ext2_Type = TruthValue
_AmplifierStage4Ext2_Object = MibTableColumn
amplifierStage4Ext2 = _AmplifierStage4Ext2_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 9, 1, 11),
    _AmplifierStage4Ext2_Type()
)
amplifierStage4Ext2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage4Ext2.setStatus("current")
_AmplifierStage4Trap_Type = TruthValue
_AmplifierStage4Trap_Object = MibTableColumn
amplifierStage4Trap = _AmplifierStage4Trap_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 9, 1, 12),
    _AmplifierStage4Trap_Type()
)
amplifierStage4Trap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage4Trap.setStatus("current")
_AmplifierStage4DD_Type = TruthValue
_AmplifierStage4DD_Object = MibTableColumn
amplifierStage4DD = _AmplifierStage4DD_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 9, 1, 13),
    _AmplifierStage4DD_Type()
)
amplifierStage4DD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage4DD.setStatus("current")


class _AmplifierStage4TrapHysteresis_Type(Unsigned32):
    """Custom type amplifierStage4TrapHysteresis based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_AmplifierStage4TrapHysteresis_Type.__name__ = "Unsigned32"
_AmplifierStage4TrapHysteresis_Object = MibTableColumn
amplifierStage4TrapHysteresis = _AmplifierStage4TrapHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 9, 1, 14),
    _AmplifierStage4TrapHysteresis_Type()
)
amplifierStage4TrapHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStage4TrapHysteresis.setStatus("current")
_AsiTable_Object = MibTable
asiTable = _AsiTable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 10)
)
if mibBuilder.loadTexts:
    asiTable.setStatus("current")
_AsiEntry_Object = MibTableRow
asiEntry = _AsiEntry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 10, 1)
)
asiEntry.setIndexNames(
    (0, "TREDESS-FS-MIB", "asiIndex"),
)
if mibBuilder.loadTexts:
    asiEntry.setStatus("current")


class _AsiIndex_Type(Unsigned32):
    """Custom type asiIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3),
    )


_AsiIndex_Type.__name__ = "Unsigned32"
_AsiIndex_Object = MibTableColumn
asiIndex = _AsiIndex_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 10, 1, 1),
    _AsiIndex_Type()
)
asiIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    asiIndex.setStatus("current")
_AsiAlarmName_Type = DisplayString
_AsiAlarmName_Object = MibTableColumn
asiAlarmName = _AsiAlarmName_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 10, 1, 2),
    _AsiAlarmName_Type()
)
asiAlarmName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    asiAlarmName.setStatus("current")
_AsiAlarmStatus_Type = AlarmStatus
_AsiAlarmStatus_Object = MibTableColumn
asiAlarmStatus = _AsiAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 10, 1, 3),
    _AsiAlarmStatus_Type()
)
asiAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    asiAlarmStatus.setStatus("current")
_AsiOn_Type = TruthValue
_AsiOn_Object = MibTableColumn
asiOn = _AsiOn_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 10, 1, 4),
    _AsiOn_Type()
)
asiOn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    asiOn.setStatus("current")
_AsiLog_Type = TruthValue
_AsiLog_Object = MibTableColumn
asiLog = _AsiLog_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 10, 1, 5),
    _AsiLog_Type()
)
asiLog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    asiLog.setStatus("current")
_AsiFault_Type = TruthValue
_AsiFault_Object = MibTableColumn
asiFault = _AsiFault_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 10, 1, 6),
    _AsiFault_Type()
)
asiFault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    asiFault.setStatus("current")
_AsiWarning_Type = TruthValue
_AsiWarning_Object = MibTableColumn
asiWarning = _AsiWarning_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 10, 1, 7),
    _AsiWarning_Type()
)
asiWarning.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    asiWarning.setStatus("current")
_AsiLed_Type = TruthValue
_AsiLed_Object = MibTableColumn
asiLed = _AsiLed_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 10, 1, 8),
    _AsiLed_Type()
)
asiLed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    asiLed.setStatus("current")
_Asi1p1_Type = TruthValue
_Asi1p1_Object = MibTableColumn
asi1p1 = _Asi1p1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 10, 1, 9),
    _Asi1p1_Type()
)
asi1p1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    asi1p1.setStatus("current")
_AsiExt1_Type = TruthValue
_AsiExt1_Object = MibTableColumn
asiExt1 = _AsiExt1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 10, 1, 10),
    _AsiExt1_Type()
)
asiExt1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    asiExt1.setStatus("current")
_AsiExt2_Type = TruthValue
_AsiExt2_Object = MibTableColumn
asiExt2 = _AsiExt2_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 10, 1, 11),
    _AsiExt2_Type()
)
asiExt2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    asiExt2.setStatus("current")
_AsiTrap_Type = TruthValue
_AsiTrap_Object = MibTableColumn
asiTrap = _AsiTrap_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 10, 1, 12),
    _AsiTrap_Type()
)
asiTrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    asiTrap.setStatus("current")
_AsiDD_Type = TruthValue
_AsiDD_Object = MibTableColumn
asiDD = _AsiDD_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 10, 1, 13),
    _AsiDD_Type()
)
asiDD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    asiDD.setStatus("current")


class _AsiTrapHysteresis_Type(Unsigned32):
    """Custom type asiTrapHysteresis based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_AsiTrapHysteresis_Type.__name__ = "Unsigned32"
_AsiTrapHysteresis_Object = MibTableColumn
asiTrapHysteresis = _AsiTrapHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 10, 1, 14),
    _AsiTrapHysteresis_Type()
)
asiTrapHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    asiTrapHysteresis.setStatus("current")
_EtiTable_Object = MibTable
etiTable = _EtiTable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 11)
)
if mibBuilder.loadTexts:
    etiTable.setStatus("current")
_EtiEntry_Object = MibTableRow
etiEntry = _EtiEntry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 11, 1)
)
etiEntry.setIndexNames(
    (0, "TREDESS-FS-MIB", "etiIndex"),
)
if mibBuilder.loadTexts:
    etiEntry.setStatus("current")


class _EtiIndex_Type(Unsigned32):
    """Custom type etiIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3),
    )


_EtiIndex_Type.__name__ = "Unsigned32"
_EtiIndex_Object = MibTableColumn
etiIndex = _EtiIndex_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 11, 1, 1),
    _EtiIndex_Type()
)
etiIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    etiIndex.setStatus("current")
_EtiAlarmName_Type = DisplayString
_EtiAlarmName_Object = MibTableColumn
etiAlarmName = _EtiAlarmName_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 11, 1, 2),
    _EtiAlarmName_Type()
)
etiAlarmName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    etiAlarmName.setStatus("current")
_EtiAlarmStatus_Type = AlarmStatus
_EtiAlarmStatus_Object = MibTableColumn
etiAlarmStatus = _EtiAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 11, 1, 3),
    _EtiAlarmStatus_Type()
)
etiAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    etiAlarmStatus.setStatus("current")
_EtiOn_Type = TruthValue
_EtiOn_Object = MibTableColumn
etiOn = _EtiOn_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 11, 1, 4),
    _EtiOn_Type()
)
etiOn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    etiOn.setStatus("current")
_EtiLog_Type = TruthValue
_EtiLog_Object = MibTableColumn
etiLog = _EtiLog_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 11, 1, 5),
    _EtiLog_Type()
)
etiLog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    etiLog.setStatus("current")
_EtiFault_Type = TruthValue
_EtiFault_Object = MibTableColumn
etiFault = _EtiFault_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 11, 1, 6),
    _EtiFault_Type()
)
etiFault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    etiFault.setStatus("current")
_EtiWarning_Type = TruthValue
_EtiWarning_Object = MibTableColumn
etiWarning = _EtiWarning_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 11, 1, 7),
    _EtiWarning_Type()
)
etiWarning.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    etiWarning.setStatus("current")
_EtiLed_Type = TruthValue
_EtiLed_Object = MibTableColumn
etiLed = _EtiLed_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 11, 1, 8),
    _EtiLed_Type()
)
etiLed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    etiLed.setStatus("current")
_Eti1p1_Type = TruthValue
_Eti1p1_Object = MibTableColumn
eti1p1 = _Eti1p1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 11, 1, 9),
    _Eti1p1_Type()
)
eti1p1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    eti1p1.setStatus("current")
_EtiExt1_Type = TruthValue
_EtiExt1_Object = MibTableColumn
etiExt1 = _EtiExt1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 11, 1, 10),
    _EtiExt1_Type()
)
etiExt1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    etiExt1.setStatus("current")
_EtiExt2_Type = TruthValue
_EtiExt2_Object = MibTableColumn
etiExt2 = _EtiExt2_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 11, 1, 11),
    _EtiExt2_Type()
)
etiExt2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    etiExt2.setStatus("current")
_EtiTrap_Type = TruthValue
_EtiTrap_Object = MibTableColumn
etiTrap = _EtiTrap_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 11, 1, 12),
    _EtiTrap_Type()
)
etiTrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    etiTrap.setStatus("current")
_EtiDD_Type = TruthValue
_EtiDD_Object = MibTableColumn
etiDD = _EtiDD_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 11, 1, 13),
    _EtiDD_Type()
)
etiDD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    etiDD.setStatus("current")


class _EtiTrapHysteresis_Type(Unsigned32):
    """Custom type etiTrapHysteresis based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_EtiTrapHysteresis_Type.__name__ = "Unsigned32"
_EtiTrapHysteresis_Object = MibTableColumn
etiTrapHysteresis = _EtiTrapHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 11, 1, 14),
    _EtiTrapHysteresis_Type()
)
etiTrapHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    etiTrapHysteresis.setStatus("current")
_AmplifierStagesTable_Object = MibTable
amplifierStagesTable = _AmplifierStagesTable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 13)
)
if mibBuilder.loadTexts:
    amplifierStagesTable.setStatus("current")
_AmplifierStagesEntry_Object = MibTableRow
amplifierStagesEntry = _AmplifierStagesEntry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 13, 1)
)
amplifierStagesEntry.setIndexNames(
    (0, "TREDESS-FS-MIB", "amplifierStagesIndex"),
)
if mibBuilder.loadTexts:
    amplifierStagesEntry.setStatus("current")


class _AmplifierStagesIndex_Type(Unsigned32):
    """Custom type amplifierStagesIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5),
    )


_AmplifierStagesIndex_Type.__name__ = "Unsigned32"
_AmplifierStagesIndex_Object = MibTableColumn
amplifierStagesIndex = _AmplifierStagesIndex_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 13, 1, 1),
    _AmplifierStagesIndex_Type()
)
amplifierStagesIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    amplifierStagesIndex.setStatus("current")
_AmplifierStagesAlarmName_Type = DisplayString
_AmplifierStagesAlarmName_Object = MibTableColumn
amplifierStagesAlarmName = _AmplifierStagesAlarmName_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 13, 1, 2),
    _AmplifierStagesAlarmName_Type()
)
amplifierStagesAlarmName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amplifierStagesAlarmName.setStatus("current")
_AmplifierStagesAlarmStatus_Type = AlarmStatus
_AmplifierStagesAlarmStatus_Object = MibTableColumn
amplifierStagesAlarmStatus = _AmplifierStagesAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 13, 1, 3),
    _AmplifierStagesAlarmStatus_Type()
)
amplifierStagesAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amplifierStagesAlarmStatus.setStatus("current")
_AmplifierStagesOn_Type = TruthValue
_AmplifierStagesOn_Object = MibTableColumn
amplifierStagesOn = _AmplifierStagesOn_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 13, 1, 4),
    _AmplifierStagesOn_Type()
)
amplifierStagesOn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStagesOn.setStatus("current")
_AmplifierStagesLog_Type = TruthValue
_AmplifierStagesLog_Object = MibTableColumn
amplifierStagesLog = _AmplifierStagesLog_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 13, 1, 5),
    _AmplifierStagesLog_Type()
)
amplifierStagesLog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStagesLog.setStatus("current")
_AmplifierStagesFault_Type = TruthValue
_AmplifierStagesFault_Object = MibTableColumn
amplifierStagesFault = _AmplifierStagesFault_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 13, 1, 6),
    _AmplifierStagesFault_Type()
)
amplifierStagesFault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStagesFault.setStatus("current")
_AmplifierStagesWarning_Type = TruthValue
_AmplifierStagesWarning_Object = MibTableColumn
amplifierStagesWarning = _AmplifierStagesWarning_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 13, 1, 7),
    _AmplifierStagesWarning_Type()
)
amplifierStagesWarning.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStagesWarning.setStatus("current")
_AmplifierStagesLed_Type = TruthValue
_AmplifierStagesLed_Object = MibTableColumn
amplifierStagesLed = _AmplifierStagesLed_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 13, 1, 8),
    _AmplifierStagesLed_Type()
)
amplifierStagesLed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStagesLed.setStatus("current")
_AmplifierStages1p1_Type = TruthValue
_AmplifierStages1p1_Object = MibTableColumn
amplifierStages1p1 = _AmplifierStages1p1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 13, 1, 9),
    _AmplifierStages1p1_Type()
)
amplifierStages1p1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStages1p1.setStatus("current")
_AmplifierStagesExt1_Type = TruthValue
_AmplifierStagesExt1_Object = MibTableColumn
amplifierStagesExt1 = _AmplifierStagesExt1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 13, 1, 10),
    _AmplifierStagesExt1_Type()
)
amplifierStagesExt1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStagesExt1.setStatus("current")
_AmplifierStagesExt2_Type = TruthValue
_AmplifierStagesExt2_Object = MibTableColumn
amplifierStagesExt2 = _AmplifierStagesExt2_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 13, 1, 11),
    _AmplifierStagesExt2_Type()
)
amplifierStagesExt2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStagesExt2.setStatus("current")
_AmplifierStagesTrap_Type = TruthValue
_AmplifierStagesTrap_Object = MibTableColumn
amplifierStagesTrap = _AmplifierStagesTrap_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 13, 1, 12),
    _AmplifierStagesTrap_Type()
)
amplifierStagesTrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStagesTrap.setStatus("current")
_AmplifierStagesDD_Type = TruthValue
_AmplifierStagesDD_Object = MibTableColumn
amplifierStagesDD = _AmplifierStagesDD_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 13, 1, 13),
    _AmplifierStagesDD_Type()
)
amplifierStagesDD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStagesDD.setStatus("current")


class _AmplifierStagesTrapHysteresis_Type(Unsigned32):
    """Custom type amplifierStagesTrapHysteresis based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_AmplifierStagesTrapHysteresis_Type.__name__ = "Unsigned32"
_AmplifierStagesTrapHysteresis_Object = MibTableColumn
amplifierStagesTrapHysteresis = _AmplifierStagesTrapHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 13, 1, 14),
    _AmplifierStagesTrapHysteresis_Type()
)
amplifierStagesTrapHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amplifierStagesTrapHysteresis.setStatus("current")
_IpInputTable_Object = MibTable
ipInputTable = _IpInputTable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 15)
)
if mibBuilder.loadTexts:
    ipInputTable.setStatus("current")
_IpInputEntry_Object = MibTableRow
ipInputEntry = _IpInputEntry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 15, 1)
)
ipInputEntry.setIndexNames(
    (0, "TREDESS-FS-MIB", "ipInputIndex"),
)
if mibBuilder.loadTexts:
    ipInputEntry.setStatus("current")


class _IpInputIndex_Type(Unsigned32):
    """Custom type ipInputIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3),
    )


_IpInputIndex_Type.__name__ = "Unsigned32"
_IpInputIndex_Object = MibTableColumn
ipInputIndex = _IpInputIndex_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 15, 1, 1),
    _IpInputIndex_Type()
)
ipInputIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ipInputIndex.setStatus("current")
_IpInputAlarmName_Type = DisplayString
_IpInputAlarmName_Object = MibTableColumn
ipInputAlarmName = _IpInputAlarmName_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 15, 1, 2),
    _IpInputAlarmName_Type()
)
ipInputAlarmName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInputAlarmName.setStatus("current")
_IpInputAlarmStatus_Type = AlarmStatus
_IpInputAlarmStatus_Object = MibTableColumn
ipInputAlarmStatus = _IpInputAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 15, 1, 3),
    _IpInputAlarmStatus_Type()
)
ipInputAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInputAlarmStatus.setStatus("current")
_IpInputOn_Type = TruthValue
_IpInputOn_Object = MibTableColumn
ipInputOn = _IpInputOn_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 15, 1, 4),
    _IpInputOn_Type()
)
ipInputOn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipInputOn.setStatus("current")
_IpInputLog_Type = TruthValue
_IpInputLog_Object = MibTableColumn
ipInputLog = _IpInputLog_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 15, 1, 5),
    _IpInputLog_Type()
)
ipInputLog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipInputLog.setStatus("current")
_IpInputFault_Type = TruthValue
_IpInputFault_Object = MibTableColumn
ipInputFault = _IpInputFault_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 15, 1, 6),
    _IpInputFault_Type()
)
ipInputFault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipInputFault.setStatus("current")
_IpInputWarning_Type = TruthValue
_IpInputWarning_Object = MibTableColumn
ipInputWarning = _IpInputWarning_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 15, 1, 7),
    _IpInputWarning_Type()
)
ipInputWarning.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipInputWarning.setStatus("current")
_IpInputLed_Type = TruthValue
_IpInputLed_Object = MibTableColumn
ipInputLed = _IpInputLed_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 15, 1, 8),
    _IpInputLed_Type()
)
ipInputLed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipInputLed.setStatus("current")
_IpInput1p1_Type = TruthValue
_IpInput1p1_Object = MibTableColumn
ipInput1p1 = _IpInput1p1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 15, 1, 9),
    _IpInput1p1_Type()
)
ipInput1p1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipInput1p1.setStatus("current")
_IpInputExt1_Type = TruthValue
_IpInputExt1_Object = MibTableColumn
ipInputExt1 = _IpInputExt1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 15, 1, 10),
    _IpInputExt1_Type()
)
ipInputExt1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipInputExt1.setStatus("current")
_IpInputExt2_Type = TruthValue
_IpInputExt2_Object = MibTableColumn
ipInputExt2 = _IpInputExt2_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 15, 1, 11),
    _IpInputExt2_Type()
)
ipInputExt2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipInputExt2.setStatus("current")
_IpInputTrap_Type = TruthValue
_IpInputTrap_Object = MibTableColumn
ipInputTrap = _IpInputTrap_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 15, 1, 12),
    _IpInputTrap_Type()
)
ipInputTrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipInputTrap.setStatus("current")
_IpInputDD_Type = TruthValue
_IpInputDD_Object = MibTableColumn
ipInputDD = _IpInputDD_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 15, 1, 13),
    _IpInputDD_Type()
)
ipInputDD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipInputDD.setStatus("current")


class _IpInputTrapHysteresis_Type(Unsigned32):
    """Custom type ipInputTrapHysteresis based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_IpInputTrapHysteresis_Type.__name__ = "Unsigned32"
_IpInputTrapHysteresis_Object = MibTableColumn
ipInputTrapHysteresis = _IpInputTrapHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 15, 1, 14),
    _IpInputTrapHysteresis_Type()
)
ipInputTrapHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipInputTrapHysteresis.setStatus("current")
_RxSat1Table_Object = MibTable
rxSat1Table = _RxSat1Table_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 20)
)
if mibBuilder.loadTexts:
    rxSat1Table.setStatus("current")
_RxSat1Entry_Object = MibTableRow
rxSat1Entry = _RxSat1Entry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 20, 1)
)
rxSat1Entry.setIndexNames(
    (0, "TREDESS-FS-MIB", "rxSat1Index"),
)
if mibBuilder.loadTexts:
    rxSat1Entry.setStatus("current")


class _RxSat1Index_Type(Unsigned32):
    """Custom type rxSat1Index based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5),
    )


_RxSat1Index_Type.__name__ = "Unsigned32"
_RxSat1Index_Object = MibTableColumn
rxSat1Index = _RxSat1Index_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 20, 1, 1),
    _RxSat1Index_Type()
)
rxSat1Index.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rxSat1Index.setStatus("current")
_RxSat1AlarmName_Type = DisplayString
_RxSat1AlarmName_Object = MibTableColumn
rxSat1AlarmName = _RxSat1AlarmName_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 20, 1, 2),
    _RxSat1AlarmName_Type()
)
rxSat1AlarmName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxSat1AlarmName.setStatus("current")
_RxSat1AlarmStatus_Type = AlarmStatus
_RxSat1AlarmStatus_Object = MibTableColumn
rxSat1AlarmStatus = _RxSat1AlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 20, 1, 3),
    _RxSat1AlarmStatus_Type()
)
rxSat1AlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxSat1AlarmStatus.setStatus("current")
_RxSat1InputOn_Type = TruthValue
_RxSat1InputOn_Object = MibTableColumn
rxSat1InputOn = _RxSat1InputOn_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 20, 1, 4),
    _RxSat1InputOn_Type()
)
rxSat1InputOn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxSat1InputOn.setStatus("current")
_RxSat1Log_Type = TruthValue
_RxSat1Log_Object = MibTableColumn
rxSat1Log = _RxSat1Log_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 20, 1, 5),
    _RxSat1Log_Type()
)
rxSat1Log.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxSat1Log.setStatus("current")
_RxSat1Fault_Type = TruthValue
_RxSat1Fault_Object = MibTableColumn
rxSat1Fault = _RxSat1Fault_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 20, 1, 6),
    _RxSat1Fault_Type()
)
rxSat1Fault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxSat1Fault.setStatus("current")
_RxSat1Warning_Type = TruthValue
_RxSat1Warning_Object = MibTableColumn
rxSat1Warning = _RxSat1Warning_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 20, 1, 7),
    _RxSat1Warning_Type()
)
rxSat1Warning.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxSat1Warning.setStatus("current")
_RxSat1Led_Type = TruthValue
_RxSat1Led_Object = MibTableColumn
rxSat1Led = _RxSat1Led_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 20, 1, 8),
    _RxSat1Led_Type()
)
rxSat1Led.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxSat1Led.setStatus("current")
_RxSat11p1_Type = TruthValue
_RxSat11p1_Object = MibTableColumn
rxSat11p1 = _RxSat11p1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 20, 1, 9),
    _RxSat11p1_Type()
)
rxSat11p1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxSat11p1.setStatus("current")
_RxSat1Ext1_Type = TruthValue
_RxSat1Ext1_Object = MibTableColumn
rxSat1Ext1 = _RxSat1Ext1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 20, 1, 10),
    _RxSat1Ext1_Type()
)
rxSat1Ext1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxSat1Ext1.setStatus("current")
_RxSat1Ext2_Type = TruthValue
_RxSat1Ext2_Object = MibTableColumn
rxSat1Ext2 = _RxSat1Ext2_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 20, 1, 11),
    _RxSat1Ext2_Type()
)
rxSat1Ext2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxSat1Ext2.setStatus("current")
_RxSat1Trap_Type = TruthValue
_RxSat1Trap_Object = MibTableColumn
rxSat1Trap = _RxSat1Trap_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 20, 1, 12),
    _RxSat1Trap_Type()
)
rxSat1Trap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxSat1Trap.setStatus("current")
_RxSat1DD_Type = TruthValue
_RxSat1DD_Object = MibTableColumn
rxSat1DD = _RxSat1DD_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 20, 1, 13),
    _RxSat1DD_Type()
)
rxSat1DD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxSat1DD.setStatus("current")


class _RxSat1TrapHysteresis_Type(Unsigned32):
    """Custom type rxSat1TrapHysteresis based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RxSat1TrapHysteresis_Type.__name__ = "Unsigned32"
_RxSat1TrapHysteresis_Object = MibTableColumn
rxSat1TrapHysteresis = _RxSat1TrapHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 20, 1, 14),
    _RxSat1TrapHysteresis_Type()
)
rxSat1TrapHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxSat1TrapHysteresis.setStatus("current")
_RxSat2Table_Object = MibTable
rxSat2Table = _RxSat2Table_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 21)
)
if mibBuilder.loadTexts:
    rxSat2Table.setStatus("current")
_RxSat2Entry_Object = MibTableRow
rxSat2Entry = _RxSat2Entry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 21, 1)
)
rxSat2Entry.setIndexNames(
    (0, "TREDESS-FS-MIB", "rxSat2Index"),
)
if mibBuilder.loadTexts:
    rxSat2Entry.setStatus("current")


class _RxSat2Index_Type(Unsigned32):
    """Custom type rxSat2Index based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5),
    )


_RxSat2Index_Type.__name__ = "Unsigned32"
_RxSat2Index_Object = MibTableColumn
rxSat2Index = _RxSat2Index_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 21, 1, 1),
    _RxSat2Index_Type()
)
rxSat2Index.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rxSat2Index.setStatus("current")
_RxSat2AlarmName_Type = DisplayString
_RxSat2AlarmName_Object = MibTableColumn
rxSat2AlarmName = _RxSat2AlarmName_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 21, 1, 2),
    _RxSat2AlarmName_Type()
)
rxSat2AlarmName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxSat2AlarmName.setStatus("current")
_RxSat2AlarmStatus_Type = AlarmStatus
_RxSat2AlarmStatus_Object = MibTableColumn
rxSat2AlarmStatus = _RxSat2AlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 21, 1, 3),
    _RxSat2AlarmStatus_Type()
)
rxSat2AlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxSat2AlarmStatus.setStatus("current")
_RxSat2InputOn_Type = TruthValue
_RxSat2InputOn_Object = MibTableColumn
rxSat2InputOn = _RxSat2InputOn_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 21, 1, 4),
    _RxSat2InputOn_Type()
)
rxSat2InputOn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxSat2InputOn.setStatus("current")
_RxSat2Log_Type = TruthValue
_RxSat2Log_Object = MibTableColumn
rxSat2Log = _RxSat2Log_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 21, 1, 5),
    _RxSat2Log_Type()
)
rxSat2Log.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxSat2Log.setStatus("current")
_RxSat2Fault_Type = TruthValue
_RxSat2Fault_Object = MibTableColumn
rxSat2Fault = _RxSat2Fault_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 21, 1, 6),
    _RxSat2Fault_Type()
)
rxSat2Fault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxSat2Fault.setStatus("current")
_RxSat2Warning_Type = TruthValue
_RxSat2Warning_Object = MibTableColumn
rxSat2Warning = _RxSat2Warning_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 21, 1, 7),
    _RxSat2Warning_Type()
)
rxSat2Warning.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxSat2Warning.setStatus("current")
_RxSat2Led_Type = TruthValue
_RxSat2Led_Object = MibTableColumn
rxSat2Led = _RxSat2Led_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 21, 1, 8),
    _RxSat2Led_Type()
)
rxSat2Led.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxSat2Led.setStatus("current")
_RxSat21p1_Type = TruthValue
_RxSat21p1_Object = MibTableColumn
rxSat21p1 = _RxSat21p1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 21, 1, 9),
    _RxSat21p1_Type()
)
rxSat21p1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxSat21p1.setStatus("current")
_RxSat2Ext1_Type = TruthValue
_RxSat2Ext1_Object = MibTableColumn
rxSat2Ext1 = _RxSat2Ext1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 21, 1, 10),
    _RxSat2Ext1_Type()
)
rxSat2Ext1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxSat2Ext1.setStatus("current")
_RxSat2Ext2_Type = TruthValue
_RxSat2Ext2_Object = MibTableColumn
rxSat2Ext2 = _RxSat2Ext2_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 21, 1, 11),
    _RxSat2Ext2_Type()
)
rxSat2Ext2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxSat2Ext2.setStatus("current")
_RxSat2Trap_Type = TruthValue
_RxSat2Trap_Object = MibTableColumn
rxSat2Trap = _RxSat2Trap_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 21, 1, 12),
    _RxSat2Trap_Type()
)
rxSat2Trap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxSat2Trap.setStatus("current")
_RxSat2DD_Type = TruthValue
_RxSat2DD_Object = MibTableColumn
rxSat2DD = _RxSat2DD_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 21, 1, 13),
    _RxSat2DD_Type()
)
rxSat2DD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxSat2DD.setStatus("current")


class _RxSat2TrapHysteresis_Type(Unsigned32):
    """Custom type rxSat2TrapHysteresis based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RxSat2TrapHysteresis_Type.__name__ = "Unsigned32"
_RxSat2TrapHysteresis_Object = MibTableColumn
rxSat2TrapHysteresis = _RxSat2TrapHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 21, 1, 14),
    _RxSat2TrapHysteresis_Type()
)
rxSat2TrapHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxSat2TrapHysteresis.setStatus("current")
_RxDtt1Table_Object = MibTable
rxDtt1Table = _RxDtt1Table_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 25)
)
if mibBuilder.loadTexts:
    rxDtt1Table.setStatus("current")
_RxDtt1Entry_Object = MibTableRow
rxDtt1Entry = _RxDtt1Entry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 25, 1)
)
rxDtt1Entry.setIndexNames(
    (0, "TREDESS-FS-MIB", "rxDtt1Index"),
)
if mibBuilder.loadTexts:
    rxDtt1Entry.setStatus("current")


class _RxDtt1Index_Type(Unsigned32):
    """Custom type rxDtt1Index based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_RxDtt1Index_Type.__name__ = "Unsigned32"
_RxDtt1Index_Object = MibTableColumn
rxDtt1Index = _RxDtt1Index_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 25, 1, 1),
    _RxDtt1Index_Type()
)
rxDtt1Index.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rxDtt1Index.setStatus("current")
_RxDtt1AlarmName_Type = DisplayString
_RxDtt1AlarmName_Object = MibTableColumn
rxDtt1AlarmName = _RxDtt1AlarmName_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 25, 1, 2),
    _RxDtt1AlarmName_Type()
)
rxDtt1AlarmName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxDtt1AlarmName.setStatus("current")
_RxDtt1AlarmStatus_Type = AlarmStatus
_RxDtt1AlarmStatus_Object = MibTableColumn
rxDtt1AlarmStatus = _RxDtt1AlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 25, 1, 3),
    _RxDtt1AlarmStatus_Type()
)
rxDtt1AlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxDtt1AlarmStatus.setStatus("current")
_RxDtt1InputOn_Type = TruthValue
_RxDtt1InputOn_Object = MibTableColumn
rxDtt1InputOn = _RxDtt1InputOn_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 25, 1, 4),
    _RxDtt1InputOn_Type()
)
rxDtt1InputOn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxDtt1InputOn.setStatus("current")
_RxDtt1Log_Type = TruthValue
_RxDtt1Log_Object = MibTableColumn
rxDtt1Log = _RxDtt1Log_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 25, 1, 5),
    _RxDtt1Log_Type()
)
rxDtt1Log.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxDtt1Log.setStatus("current")
_RxDtt1Fault_Type = TruthValue
_RxDtt1Fault_Object = MibTableColumn
rxDtt1Fault = _RxDtt1Fault_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 25, 1, 6),
    _RxDtt1Fault_Type()
)
rxDtt1Fault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxDtt1Fault.setStatus("current")
_RxDtt1Warning_Type = TruthValue
_RxDtt1Warning_Object = MibTableColumn
rxDtt1Warning = _RxDtt1Warning_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 25, 1, 7),
    _RxDtt1Warning_Type()
)
rxDtt1Warning.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxDtt1Warning.setStatus("current")
_RxDtt1Led_Type = TruthValue
_RxDtt1Led_Object = MibTableColumn
rxDtt1Led = _RxDtt1Led_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 25, 1, 8),
    _RxDtt1Led_Type()
)
rxDtt1Led.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxDtt1Led.setStatus("current")
_RxDtt11p1_Type = TruthValue
_RxDtt11p1_Object = MibTableColumn
rxDtt11p1 = _RxDtt11p1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 25, 1, 9),
    _RxDtt11p1_Type()
)
rxDtt11p1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxDtt11p1.setStatus("current")
_RxDtt1Ext1_Type = TruthValue
_RxDtt1Ext1_Object = MibTableColumn
rxDtt1Ext1 = _RxDtt1Ext1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 25, 1, 10),
    _RxDtt1Ext1_Type()
)
rxDtt1Ext1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxDtt1Ext1.setStatus("current")
_RxDtt1Ext2_Type = TruthValue
_RxDtt1Ext2_Object = MibTableColumn
rxDtt1Ext2 = _RxDtt1Ext2_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 25, 1, 11),
    _RxDtt1Ext2_Type()
)
rxDtt1Ext2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxDtt1Ext2.setStatus("current")
_RxDtt1Trap_Type = TruthValue
_RxDtt1Trap_Object = MibTableColumn
rxDtt1Trap = _RxDtt1Trap_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 25, 1, 12),
    _RxDtt1Trap_Type()
)
rxDtt1Trap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxDtt1Trap.setStatus("current")
_RxDtt1DD_Type = TruthValue
_RxDtt1DD_Object = MibTableColumn
rxDtt1DD = _RxDtt1DD_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 25, 1, 13),
    _RxDtt1DD_Type()
)
rxDtt1DD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxDtt1DD.setStatus("current")


class _RxDtt1TrapHysteresis_Type(Unsigned32):
    """Custom type rxDtt1TrapHysteresis based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RxDtt1TrapHysteresis_Type.__name__ = "Unsigned32"
_RxDtt1TrapHysteresis_Object = MibTableColumn
rxDtt1TrapHysteresis = _RxDtt1TrapHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 25, 1, 14),
    _RxDtt1TrapHysteresis_Type()
)
rxDtt1TrapHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxDtt1TrapHysteresis.setStatus("current")
_RxDtt2Table_Object = MibTable
rxDtt2Table = _RxDtt2Table_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 26)
)
if mibBuilder.loadTexts:
    rxDtt2Table.setStatus("current")
_RxDtt2Entry_Object = MibTableRow
rxDtt2Entry = _RxDtt2Entry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 26, 1)
)
rxDtt2Entry.setIndexNames(
    (0, "TREDESS-FS-MIB", "rxDtt2Index"),
)
if mibBuilder.loadTexts:
    rxDtt2Entry.setStatus("current")


class _RxDtt2Index_Type(Unsigned32):
    """Custom type rxDtt2Index based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_RxDtt2Index_Type.__name__ = "Unsigned32"
_RxDtt2Index_Object = MibTableColumn
rxDtt2Index = _RxDtt2Index_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 26, 1, 1),
    _RxDtt2Index_Type()
)
rxDtt2Index.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rxDtt2Index.setStatus("current")
_RxDtt2AlarmName_Type = DisplayString
_RxDtt2AlarmName_Object = MibTableColumn
rxDtt2AlarmName = _RxDtt2AlarmName_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 26, 1, 2),
    _RxDtt2AlarmName_Type()
)
rxDtt2AlarmName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxDtt2AlarmName.setStatus("current")
_RxDtt2AlarmStatus_Type = AlarmStatus
_RxDtt2AlarmStatus_Object = MibTableColumn
rxDtt2AlarmStatus = _RxDtt2AlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 26, 1, 3),
    _RxDtt2AlarmStatus_Type()
)
rxDtt2AlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxDtt2AlarmStatus.setStatus("current")
_RxDtt2InputOn_Type = TruthValue
_RxDtt2InputOn_Object = MibTableColumn
rxDtt2InputOn = _RxDtt2InputOn_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 26, 1, 4),
    _RxDtt2InputOn_Type()
)
rxDtt2InputOn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxDtt2InputOn.setStatus("current")
_RxDtt2Log_Type = TruthValue
_RxDtt2Log_Object = MibTableColumn
rxDtt2Log = _RxDtt2Log_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 26, 1, 5),
    _RxDtt2Log_Type()
)
rxDtt2Log.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxDtt2Log.setStatus("current")
_RxDtt2Fault_Type = TruthValue
_RxDtt2Fault_Object = MibTableColumn
rxDtt2Fault = _RxDtt2Fault_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 26, 1, 6),
    _RxDtt2Fault_Type()
)
rxDtt2Fault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxDtt2Fault.setStatus("current")
_RxDtt2Warning_Type = TruthValue
_RxDtt2Warning_Object = MibTableColumn
rxDtt2Warning = _RxDtt2Warning_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 26, 1, 7),
    _RxDtt2Warning_Type()
)
rxDtt2Warning.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxDtt2Warning.setStatus("current")
_RxDtt2Led_Type = TruthValue
_RxDtt2Led_Object = MibTableColumn
rxDtt2Led = _RxDtt2Led_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 26, 1, 8),
    _RxDtt2Led_Type()
)
rxDtt2Led.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxDtt2Led.setStatus("current")
_RxDtt21p1_Type = TruthValue
_RxDtt21p1_Object = MibTableColumn
rxDtt21p1 = _RxDtt21p1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 26, 1, 9),
    _RxDtt21p1_Type()
)
rxDtt21p1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxDtt21p1.setStatus("current")
_RxDtt2Ext1_Type = TruthValue
_RxDtt2Ext1_Object = MibTableColumn
rxDtt2Ext1 = _RxDtt2Ext1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 26, 1, 10),
    _RxDtt2Ext1_Type()
)
rxDtt2Ext1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxDtt2Ext1.setStatus("current")
_RxDtt2Ext2_Type = TruthValue
_RxDtt2Ext2_Object = MibTableColumn
rxDtt2Ext2 = _RxDtt2Ext2_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 26, 1, 11),
    _RxDtt2Ext2_Type()
)
rxDtt2Ext2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxDtt2Ext2.setStatus("current")
_RxDtt2Trap_Type = TruthValue
_RxDtt2Trap_Object = MibTableColumn
rxDtt2Trap = _RxDtt2Trap_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 26, 1, 12),
    _RxDtt2Trap_Type()
)
rxDtt2Trap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxDtt2Trap.setStatus("current")
_RxDtt2DD_Type = TruthValue
_RxDtt2DD_Object = MibTableColumn
rxDtt2DD = _RxDtt2DD_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 26, 1, 13),
    _RxDtt2DD_Type()
)
rxDtt2DD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxDtt2DD.setStatus("current")


class _RxDtt2TrapHysteresis_Type(Unsigned32):
    """Custom type rxDtt2TrapHysteresis based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RxDtt2TrapHysteresis_Type.__name__ = "Unsigned32"
_RxDtt2TrapHysteresis_Object = MibTableColumn
rxDtt2TrapHysteresis = _RxDtt2TrapHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 26, 1, 14),
    _RxDtt2TrapHysteresis_Type()
)
rxDtt2TrapHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rxDtt2TrapHysteresis.setStatus("current")
_RfInTable_Object = MibTable
rfInTable = _RfInTable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 30)
)
if mibBuilder.loadTexts:
    rfInTable.setStatus("current")
_RfInEntry_Object = MibTableRow
rfInEntry = _RfInEntry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 30, 1)
)
rfInEntry.setIndexNames(
    (0, "TREDESS-FS-MIB", "rfInIndex"),
)
if mibBuilder.loadTexts:
    rfInEntry.setStatus("current")


class _RfInIndex_Type(Unsigned32):
    """Custom type rfInIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
    )


_RfInIndex_Type.__name__ = "Unsigned32"
_RfInIndex_Object = MibTableColumn
rfInIndex = _RfInIndex_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 30, 1, 1),
    _RfInIndex_Type()
)
rfInIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rfInIndex.setStatus("current")
_RfInAlarmName_Type = DisplayString
_RfInAlarmName_Object = MibTableColumn
rfInAlarmName = _RfInAlarmName_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 30, 1, 2),
    _RfInAlarmName_Type()
)
rfInAlarmName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rfInAlarmName.setStatus("current")
_RfInAlarmStatus_Type = AlarmStatus
_RfInAlarmStatus_Object = MibTableColumn
rfInAlarmStatus = _RfInAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 30, 1, 3),
    _RfInAlarmStatus_Type()
)
rfInAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rfInAlarmStatus.setStatus("current")
_RfInInputOn_Type = TruthValue
_RfInInputOn_Object = MibTableColumn
rfInInputOn = _RfInInputOn_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 30, 1, 4),
    _RfInInputOn_Type()
)
rfInInputOn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rfInInputOn.setStatus("current")
_RfInLog_Type = TruthValue
_RfInLog_Object = MibTableColumn
rfInLog = _RfInLog_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 30, 1, 5),
    _RfInLog_Type()
)
rfInLog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rfInLog.setStatus("current")
_RfInFault_Type = TruthValue
_RfInFault_Object = MibTableColumn
rfInFault = _RfInFault_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 30, 1, 6),
    _RfInFault_Type()
)
rfInFault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rfInFault.setStatus("current")
_RfInWarning_Type = TruthValue
_RfInWarning_Object = MibTableColumn
rfInWarning = _RfInWarning_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 30, 1, 7),
    _RfInWarning_Type()
)
rfInWarning.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rfInWarning.setStatus("current")
_RfInLed_Type = TruthValue
_RfInLed_Object = MibTableColumn
rfInLed = _RfInLed_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 30, 1, 8),
    _RfInLed_Type()
)
rfInLed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rfInLed.setStatus("current")
_RfIn1p1_Type = TruthValue
_RfIn1p1_Object = MibTableColumn
rfIn1p1 = _RfIn1p1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 30, 1, 9),
    _RfIn1p1_Type()
)
rfIn1p1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rfIn1p1.setStatus("current")
_RfInExt1_Type = TruthValue
_RfInExt1_Object = MibTableColumn
rfInExt1 = _RfInExt1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 30, 1, 10),
    _RfInExt1_Type()
)
rfInExt1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rfInExt1.setStatus("current")
_RfInExt2_Type = TruthValue
_RfInExt2_Object = MibTableColumn
rfInExt2 = _RfInExt2_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 30, 1, 11),
    _RfInExt2_Type()
)
rfInExt2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rfInExt2.setStatus("current")
_RfInTrap_Type = TruthValue
_RfInTrap_Object = MibTableColumn
rfInTrap = _RfInTrap_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 30, 1, 12),
    _RfInTrap_Type()
)
rfInTrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rfInTrap.setStatus("current")
_RfInDD_Type = TruthValue
_RfInDD_Object = MibTableColumn
rfInDD = _RfInDD_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 30, 1, 13),
    _RfInDD_Type()
)
rfInDD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rfInDD.setStatus("current")


class _RfInTrapHysteresis_Type(Unsigned32):
    """Custom type rfInTrapHysteresis based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RfInTrapHysteresis_Type.__name__ = "Unsigned32"
_RfInTrapHysteresis_Object = MibTableColumn
rfInTrapHysteresis = _RfInTrapHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 30, 1, 14),
    _RfInTrapHysteresis_Type()
)
rfInTrapHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rfInTrapHysteresis.setStatus("current")
_RackCoolingAlarmConfTable_Object = MibTable
rackCoolingAlarmConfTable = _RackCoolingAlarmConfTable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 34)
)
if mibBuilder.loadTexts:
    rackCoolingAlarmConfTable.setStatus("current")
_RackCoolingAlarmConfEntry_Object = MibTableRow
rackCoolingAlarmConfEntry = _RackCoolingAlarmConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 34, 1)
)
rackCoolingAlarmConfEntry.setIndexNames(
    (0, "TREDESS-FS-MIB", "rackCoolingACIndex"),
)
if mibBuilder.loadTexts:
    rackCoolingAlarmConfEntry.setStatus("current")


class _RackCoolingACIndex_Type(Unsigned32):
    """Custom type rackCoolingACIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3),
    )


_RackCoolingACIndex_Type.__name__ = "Unsigned32"
_RackCoolingACIndex_Object = MibTableColumn
rackCoolingACIndex = _RackCoolingACIndex_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 34, 1, 1),
    _RackCoolingACIndex_Type()
)
rackCoolingACIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rackCoolingACIndex.setStatus("current")
_RackCoolingAlarmName_Type = DisplayString
_RackCoolingAlarmName_Object = MibTableColumn
rackCoolingAlarmName = _RackCoolingAlarmName_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 34, 1, 2),
    _RackCoolingAlarmName_Type()
)
rackCoolingAlarmName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rackCoolingAlarmName.setStatus("current")
_RackCoolingAlarmStatus_Type = AlarmStatus
_RackCoolingAlarmStatus_Object = MibTableColumn
rackCoolingAlarmStatus = _RackCoolingAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 34, 1, 3),
    _RackCoolingAlarmStatus_Type()
)
rackCoolingAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rackCoolingAlarmStatus.setStatus("current")
_RackCoolingInputOn_Type = TruthValue
_RackCoolingInputOn_Object = MibTableColumn
rackCoolingInputOn = _RackCoolingInputOn_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 34, 1, 4),
    _RackCoolingInputOn_Type()
)
rackCoolingInputOn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rackCoolingInputOn.setStatus("current")
_RackCoolingLog_Type = TruthValue
_RackCoolingLog_Object = MibTableColumn
rackCoolingLog = _RackCoolingLog_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 34, 1, 5),
    _RackCoolingLog_Type()
)
rackCoolingLog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rackCoolingLog.setStatus("current")
_RackCoolingFault_Type = TruthValue
_RackCoolingFault_Object = MibTableColumn
rackCoolingFault = _RackCoolingFault_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 34, 1, 6),
    _RackCoolingFault_Type()
)
rackCoolingFault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rackCoolingFault.setStatus("current")
_RackCoolingWarning_Type = TruthValue
_RackCoolingWarning_Object = MibTableColumn
rackCoolingWarning = _RackCoolingWarning_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 34, 1, 7),
    _RackCoolingWarning_Type()
)
rackCoolingWarning.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rackCoolingWarning.setStatus("current")
_RackCoolingLed_Type = TruthValue
_RackCoolingLed_Object = MibTableColumn
rackCoolingLed = _RackCoolingLed_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 34, 1, 8),
    _RackCoolingLed_Type()
)
rackCoolingLed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rackCoolingLed.setStatus("current")
_RackCooling1p1_Type = TruthValue
_RackCooling1p1_Object = MibTableColumn
rackCooling1p1 = _RackCooling1p1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 34, 1, 9),
    _RackCooling1p1_Type()
)
rackCooling1p1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rackCooling1p1.setStatus("current")
_RackCoolingExt1_Type = TruthValue
_RackCoolingExt1_Object = MibTableColumn
rackCoolingExt1 = _RackCoolingExt1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 34, 1, 10),
    _RackCoolingExt1_Type()
)
rackCoolingExt1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rackCoolingExt1.setStatus("current")
_RackCoolingExt2_Type = TruthValue
_RackCoolingExt2_Object = MibTableColumn
rackCoolingExt2 = _RackCoolingExt2_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 34, 1, 11),
    _RackCoolingExt2_Type()
)
rackCoolingExt2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rackCoolingExt2.setStatus("current")
_RackCoolingTrap_Type = TruthValue
_RackCoolingTrap_Object = MibTableColumn
rackCoolingTrap = _RackCoolingTrap_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 34, 1, 12),
    _RackCoolingTrap_Type()
)
rackCoolingTrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rackCoolingTrap.setStatus("current")
_RackCoolingDD_Type = TruthValue
_RackCoolingDD_Object = MibTableColumn
rackCoolingDD = _RackCoolingDD_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 34, 1, 13),
    _RackCoolingDD_Type()
)
rackCoolingDD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rackCoolingDD.setStatus("current")


class _RackCoolingTrapHysteresis_Type(Unsigned32):
    """Custom type rackCoolingTrapHysteresis based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RackCoolingTrapHysteresis_Type.__name__ = "Unsigned32"
_RackCoolingTrapHysteresis_Object = MibTableColumn
rackCoolingTrapHysteresis = _RackCoolingTrapHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 34, 1, 14),
    _RackCoolingTrapHysteresis_Type()
)
rackCoolingTrapHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rackCoolingTrapHysteresis.setStatus("current")
_CancellerTable_Object = MibTable
cancellerTable = _CancellerTable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 35)
)
if mibBuilder.loadTexts:
    cancellerTable.setStatus("current")
_CancellerEntry_Object = MibTableRow
cancellerEntry = _CancellerEntry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 35, 1)
)
cancellerEntry.setIndexNames(
    (0, "TREDESS-FS-MIB", "cancellerIndex"),
)
if mibBuilder.loadTexts:
    cancellerEntry.setStatus("current")


class _CancellerIndex_Type(Unsigned32):
    """Custom type cancellerIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3),
    )


_CancellerIndex_Type.__name__ = "Unsigned32"
_CancellerIndex_Object = MibTableColumn
cancellerIndex = _CancellerIndex_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 35, 1, 1),
    _CancellerIndex_Type()
)
cancellerIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cancellerIndex.setStatus("current")
_CancellerAlarmName_Type = DisplayString
_CancellerAlarmName_Object = MibTableColumn
cancellerAlarmName = _CancellerAlarmName_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 35, 1, 2),
    _CancellerAlarmName_Type()
)
cancellerAlarmName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cancellerAlarmName.setStatus("current")
_CancellerAlarmStatus_Type = AlarmStatus
_CancellerAlarmStatus_Object = MibTableColumn
cancellerAlarmStatus = _CancellerAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 35, 1, 3),
    _CancellerAlarmStatus_Type()
)
cancellerAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cancellerAlarmStatus.setStatus("current")
_CancellerInputOn_Type = TruthValue
_CancellerInputOn_Object = MibTableColumn
cancellerInputOn = _CancellerInputOn_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 35, 1, 4),
    _CancellerInputOn_Type()
)
cancellerInputOn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cancellerInputOn.setStatus("current")
_CancellerLog_Type = TruthValue
_CancellerLog_Object = MibTableColumn
cancellerLog = _CancellerLog_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 35, 1, 5),
    _CancellerLog_Type()
)
cancellerLog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cancellerLog.setStatus("current")
_CancellerFault_Type = TruthValue
_CancellerFault_Object = MibTableColumn
cancellerFault = _CancellerFault_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 35, 1, 6),
    _CancellerFault_Type()
)
cancellerFault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cancellerFault.setStatus("current")
_CancellerWarning_Type = TruthValue
_CancellerWarning_Object = MibTableColumn
cancellerWarning = _CancellerWarning_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 35, 1, 7),
    _CancellerWarning_Type()
)
cancellerWarning.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cancellerWarning.setStatus("current")
_CancellerLed_Type = TruthValue
_CancellerLed_Object = MibTableColumn
cancellerLed = _CancellerLed_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 35, 1, 8),
    _CancellerLed_Type()
)
cancellerLed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cancellerLed.setStatus("current")
_Canceller1p1_Type = TruthValue
_Canceller1p1_Object = MibTableColumn
canceller1p1 = _Canceller1p1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 35, 1, 9),
    _Canceller1p1_Type()
)
canceller1p1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    canceller1p1.setStatus("current")
_CancellerExt1_Type = TruthValue
_CancellerExt1_Object = MibTableColumn
cancellerExt1 = _CancellerExt1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 35, 1, 10),
    _CancellerExt1_Type()
)
cancellerExt1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cancellerExt1.setStatus("current")
_CancellerExt2_Type = TruthValue
_CancellerExt2_Object = MibTableColumn
cancellerExt2 = _CancellerExt2_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 35, 1, 11),
    _CancellerExt2_Type()
)
cancellerExt2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cancellerExt2.setStatus("current")
_CancellerTrap_Type = TruthValue
_CancellerTrap_Object = MibTableColumn
cancellerTrap = _CancellerTrap_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 35, 1, 12),
    _CancellerTrap_Type()
)
cancellerTrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cancellerTrap.setStatus("current")
_CancellerDD_Type = TruthValue
_CancellerDD_Object = MibTableColumn
cancellerDD = _CancellerDD_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 35, 1, 13),
    _CancellerDD_Type()
)
cancellerDD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cancellerDD.setStatus("current")


class _CancellerTrapHysteresis_Type(Unsigned32):
    """Custom type cancellerTrapHysteresis based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_CancellerTrapHysteresis_Type.__name__ = "Unsigned32"
_CancellerTrapHysteresis_Object = MibTableColumn
cancellerTrapHysteresis = _CancellerTrapHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 35, 1, 14),
    _CancellerTrapHysteresis_Type()
)
cancellerTrapHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cancellerTrapHysteresis.setStatus("current")
_ModulatorTable_Object = MibTable
modulatorTable = _ModulatorTable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 40)
)
if mibBuilder.loadTexts:
    modulatorTable.setStatus("current")
_ModulatorEntry_Object = MibTableRow
modulatorEntry = _ModulatorEntry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 40, 1)
)
modulatorEntry.setIndexNames(
    (0, "TREDESS-FS-MIB", "modulatorIndex"),
)
if mibBuilder.loadTexts:
    modulatorEntry.setStatus("current")


class _ModulatorIndex_Type(Unsigned32):
    """Custom type modulatorIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_ModulatorIndex_Type.__name__ = "Unsigned32"
_ModulatorIndex_Object = MibTableColumn
modulatorIndex = _ModulatorIndex_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 40, 1, 1),
    _ModulatorIndex_Type()
)
modulatorIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    modulatorIndex.setStatus("current")
_ModulatorAlarmName_Type = DisplayString
_ModulatorAlarmName_Object = MibTableColumn
modulatorAlarmName = _ModulatorAlarmName_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 40, 1, 2),
    _ModulatorAlarmName_Type()
)
modulatorAlarmName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    modulatorAlarmName.setStatus("current")
_ModulatorAlarmStatus_Type = AlarmStatus
_ModulatorAlarmStatus_Object = MibTableColumn
modulatorAlarmStatus = _ModulatorAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 40, 1, 3),
    _ModulatorAlarmStatus_Type()
)
modulatorAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    modulatorAlarmStatus.setStatus("current")
_ModulatorInputOn_Type = TruthValue
_ModulatorInputOn_Object = MibTableColumn
modulatorInputOn = _ModulatorInputOn_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 40, 1, 4),
    _ModulatorInputOn_Type()
)
modulatorInputOn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    modulatorInputOn.setStatus("current")
_ModulatorLog_Type = TruthValue
_ModulatorLog_Object = MibTableColumn
modulatorLog = _ModulatorLog_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 40, 1, 5),
    _ModulatorLog_Type()
)
modulatorLog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    modulatorLog.setStatus("current")
_ModulatorFault_Type = TruthValue
_ModulatorFault_Object = MibTableColumn
modulatorFault = _ModulatorFault_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 40, 1, 6),
    _ModulatorFault_Type()
)
modulatorFault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    modulatorFault.setStatus("current")
_ModulatorWarning_Type = TruthValue
_ModulatorWarning_Object = MibTableColumn
modulatorWarning = _ModulatorWarning_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 40, 1, 7),
    _ModulatorWarning_Type()
)
modulatorWarning.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    modulatorWarning.setStatus("current")
_ModulatorLed_Type = TruthValue
_ModulatorLed_Object = MibTableColumn
modulatorLed = _ModulatorLed_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 40, 1, 8),
    _ModulatorLed_Type()
)
modulatorLed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    modulatorLed.setStatus("current")
_Modulator1p1_Type = TruthValue
_Modulator1p1_Object = MibTableColumn
modulator1p1 = _Modulator1p1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 40, 1, 9),
    _Modulator1p1_Type()
)
modulator1p1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    modulator1p1.setStatus("current")
_ModulatorExt1_Type = TruthValue
_ModulatorExt1_Object = MibTableColumn
modulatorExt1 = _ModulatorExt1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 40, 1, 10),
    _ModulatorExt1_Type()
)
modulatorExt1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    modulatorExt1.setStatus("current")
_ModulatorExt2_Type = TruthValue
_ModulatorExt2_Object = MibTableColumn
modulatorExt2 = _ModulatorExt2_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 40, 1, 11),
    _ModulatorExt2_Type()
)
modulatorExt2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    modulatorExt2.setStatus("current")
_ModulatorTrap_Type = TruthValue
_ModulatorTrap_Object = MibTableColumn
modulatorTrap = _ModulatorTrap_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 40, 1, 12),
    _ModulatorTrap_Type()
)
modulatorTrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    modulatorTrap.setStatus("current")
_ModulatorDD_Type = TruthValue
_ModulatorDD_Object = MibTableColumn
modulatorDD = _ModulatorDD_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 40, 1, 13),
    _ModulatorDD_Type()
)
modulatorDD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    modulatorDD.setStatus("current")


class _ModulatorTrapHysteresis_Type(Unsigned32):
    """Custom type modulatorTrapHysteresis based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_ModulatorTrapHysteresis_Type.__name__ = "Unsigned32"
_ModulatorTrapHysteresis_Object = MibTableColumn
modulatorTrapHysteresis = _ModulatorTrapHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 40, 1, 14),
    _ModulatorTrapHysteresis_Type()
)
modulatorTrapHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    modulatorTrapHysteresis.setStatus("current")
_RfOutTable_Object = MibTable
rfOutTable = _RfOutTable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 45)
)
if mibBuilder.loadTexts:
    rfOutTable.setStatus("current")
_RfOutEntry_Object = MibTableRow
rfOutEntry = _RfOutEntry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 45, 1)
)
rfOutEntry.setIndexNames(
    (0, "TREDESS-FS-MIB", "rfOutIndex"),
)
if mibBuilder.loadTexts:
    rfOutEntry.setStatus("current")


class _RfOutIndex_Type(Unsigned32):
    """Custom type rfOutIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 11),
    )


_RfOutIndex_Type.__name__ = "Unsigned32"
_RfOutIndex_Object = MibTableColumn
rfOutIndex = _RfOutIndex_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 45, 1, 1),
    _RfOutIndex_Type()
)
rfOutIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rfOutIndex.setStatus("current")
_RfOutAlarmName_Type = DisplayString
_RfOutAlarmName_Object = MibTableColumn
rfOutAlarmName = _RfOutAlarmName_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 45, 1, 2),
    _RfOutAlarmName_Type()
)
rfOutAlarmName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rfOutAlarmName.setStatus("current")
_RfOutAlarmStatus_Type = AlarmStatus
_RfOutAlarmStatus_Object = MibTableColumn
rfOutAlarmStatus = _RfOutAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 45, 1, 3),
    _RfOutAlarmStatus_Type()
)
rfOutAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rfOutAlarmStatus.setStatus("current")
_RfOutInputOn_Type = TruthValue
_RfOutInputOn_Object = MibTableColumn
rfOutInputOn = _RfOutInputOn_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 45, 1, 4),
    _RfOutInputOn_Type()
)
rfOutInputOn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rfOutInputOn.setStatus("current")
_RfOutLog_Type = TruthValue
_RfOutLog_Object = MibTableColumn
rfOutLog = _RfOutLog_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 45, 1, 5),
    _RfOutLog_Type()
)
rfOutLog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rfOutLog.setStatus("current")
_RfOutFault_Type = TruthValue
_RfOutFault_Object = MibTableColumn
rfOutFault = _RfOutFault_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 45, 1, 6),
    _RfOutFault_Type()
)
rfOutFault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rfOutFault.setStatus("current")
_RfOutWarning_Type = TruthValue
_RfOutWarning_Object = MibTableColumn
rfOutWarning = _RfOutWarning_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 45, 1, 7),
    _RfOutWarning_Type()
)
rfOutWarning.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rfOutWarning.setStatus("current")
_RfOutLed_Type = TruthValue
_RfOutLed_Object = MibTableColumn
rfOutLed = _RfOutLed_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 45, 1, 8),
    _RfOutLed_Type()
)
rfOutLed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rfOutLed.setStatus("current")
_RfOut1p1_Type = TruthValue
_RfOut1p1_Object = MibTableColumn
rfOut1p1 = _RfOut1p1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 45, 1, 9),
    _RfOut1p1_Type()
)
rfOut1p1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rfOut1p1.setStatus("current")
_RfOutExt1_Type = TruthValue
_RfOutExt1_Object = MibTableColumn
rfOutExt1 = _RfOutExt1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 45, 1, 10),
    _RfOutExt1_Type()
)
rfOutExt1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rfOutExt1.setStatus("current")
_RfOutExt2_Type = TruthValue
_RfOutExt2_Object = MibTableColumn
rfOutExt2 = _RfOutExt2_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 45, 1, 11),
    _RfOutExt2_Type()
)
rfOutExt2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rfOutExt2.setStatus("current")
_RfOutTrap_Type = TruthValue
_RfOutTrap_Object = MibTableColumn
rfOutTrap = _RfOutTrap_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 45, 1, 12),
    _RfOutTrap_Type()
)
rfOutTrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rfOutTrap.setStatus("current")
_RfOutDD_Type = TruthValue
_RfOutDD_Object = MibTableColumn
rfOutDD = _RfOutDD_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 45, 1, 13),
    _RfOutDD_Type()
)
rfOutDD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rfOutDD.setStatus("current")


class _RfOutTrapHysteresis_Type(Unsigned32):
    """Custom type rfOutTrapHysteresis based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RfOutTrapHysteresis_Type.__name__ = "Unsigned32"
_RfOutTrapHysteresis_Object = MibTableColumn
rfOutTrapHysteresis = _RfOutTrapHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 45, 1, 14),
    _RfOutTrapHysteresis_Type()
)
rfOutTrapHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rfOutTrapHysteresis.setStatus("current")
_SynchronizationTable_Object = MibTable
synchronizationTable = _SynchronizationTable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 55)
)
if mibBuilder.loadTexts:
    synchronizationTable.setStatus("current")
_SynchronizationEntry_Object = MibTableRow
synchronizationEntry = _SynchronizationEntry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 55, 1)
)
synchronizationEntry.setIndexNames(
    (0, "TREDESS-FS-MIB", "synchronizationIndex"),
)
if mibBuilder.loadTexts:
    synchronizationEntry.setStatus("current")


class _SynchronizationIndex_Type(Unsigned32):
    """Custom type synchronizationIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 6),
    )


_SynchronizationIndex_Type.__name__ = "Unsigned32"
_SynchronizationIndex_Object = MibTableColumn
synchronizationIndex = _SynchronizationIndex_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 55, 1, 1),
    _SynchronizationIndex_Type()
)
synchronizationIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    synchronizationIndex.setStatus("current")
_SynchronizationAlarmName_Type = DisplayString
_SynchronizationAlarmName_Object = MibTableColumn
synchronizationAlarmName = _SynchronizationAlarmName_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 55, 1, 2),
    _SynchronizationAlarmName_Type()
)
synchronizationAlarmName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    synchronizationAlarmName.setStatus("current")
_SynchronizationAlarmStatus_Type = AlarmStatus
_SynchronizationAlarmStatus_Object = MibTableColumn
synchronizationAlarmStatus = _SynchronizationAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 55, 1, 3),
    _SynchronizationAlarmStatus_Type()
)
synchronizationAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    synchronizationAlarmStatus.setStatus("current")
_SynchronizationOn_Type = TruthValue
_SynchronizationOn_Object = MibTableColumn
synchronizationOn = _SynchronizationOn_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 55, 1, 4),
    _SynchronizationOn_Type()
)
synchronizationOn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    synchronizationOn.setStatus("current")
_SynchronizationLog_Type = TruthValue
_SynchronizationLog_Object = MibTableColumn
synchronizationLog = _SynchronizationLog_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 55, 1, 5),
    _SynchronizationLog_Type()
)
synchronizationLog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    synchronizationLog.setStatus("current")
_SynchronizationFault_Type = TruthValue
_SynchronizationFault_Object = MibTableColumn
synchronizationFault = _SynchronizationFault_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 55, 1, 6),
    _SynchronizationFault_Type()
)
synchronizationFault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    synchronizationFault.setStatus("current")
_SynchronizationWarning_Type = TruthValue
_SynchronizationWarning_Object = MibTableColumn
synchronizationWarning = _SynchronizationWarning_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 55, 1, 7),
    _SynchronizationWarning_Type()
)
synchronizationWarning.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    synchronizationWarning.setStatus("current")
_SynchronizationLed_Type = TruthValue
_SynchronizationLed_Object = MibTableColumn
synchronizationLed = _SynchronizationLed_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 55, 1, 8),
    _SynchronizationLed_Type()
)
synchronizationLed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    synchronizationLed.setStatus("current")
_Synchronization1p1_Type = TruthValue
_Synchronization1p1_Object = MibTableColumn
synchronization1p1 = _Synchronization1p1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 55, 1, 9),
    _Synchronization1p1_Type()
)
synchronization1p1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    synchronization1p1.setStatus("current")
_SynchronizationExt1_Type = TruthValue
_SynchronizationExt1_Object = MibTableColumn
synchronizationExt1 = _SynchronizationExt1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 55, 1, 10),
    _SynchronizationExt1_Type()
)
synchronizationExt1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    synchronizationExt1.setStatus("current")
_SynchronizationExt2_Type = TruthValue
_SynchronizationExt2_Object = MibTableColumn
synchronizationExt2 = _SynchronizationExt2_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 55, 1, 11),
    _SynchronizationExt2_Type()
)
synchronizationExt2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    synchronizationExt2.setStatus("current")
_SynchronizationTrap_Type = TruthValue
_SynchronizationTrap_Object = MibTableColumn
synchronizationTrap = _SynchronizationTrap_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 55, 1, 12),
    _SynchronizationTrap_Type()
)
synchronizationTrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    synchronizationTrap.setStatus("current")
_SynchronizationDD_Type = TruthValue
_SynchronizationDD_Object = MibTableColumn
synchronizationDD = _SynchronizationDD_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 55, 1, 13),
    _SynchronizationDD_Type()
)
synchronizationDD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    synchronizationDD.setStatus("current")


class _SynchronizationTrapHysteresis_Type(Unsigned32):
    """Custom type synchronizationTrapHysteresis based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_SynchronizationTrapHysteresis_Type.__name__ = "Unsigned32"
_SynchronizationTrapHysteresis_Object = MibTableColumn
synchronizationTrapHysteresis = _SynchronizationTrapHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 55, 1, 14),
    _SynchronizationTrapHysteresis_Type()
)
synchronizationTrapHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    synchronizationTrapHysteresis.setStatus("current")
_ErrorHwTable_Object = MibTable
errorHwTable = _ErrorHwTable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 65)
)
if mibBuilder.loadTexts:
    errorHwTable.setStatus("current")
_ErrorHwEntry_Object = MibTableRow
errorHwEntry = _ErrorHwEntry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 65, 1)
)
errorHwEntry.setIndexNames(
    (0, "TREDESS-FS-MIB", "errorHwIndex"),
)
if mibBuilder.loadTexts:
    errorHwEntry.setStatus("current")


class _ErrorHwIndex_Type(Unsigned32):
    """Custom type errorHwIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5),
    )


_ErrorHwIndex_Type.__name__ = "Unsigned32"
_ErrorHwIndex_Object = MibTableColumn
errorHwIndex = _ErrorHwIndex_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 65, 1, 1),
    _ErrorHwIndex_Type()
)
errorHwIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    errorHwIndex.setStatus("current")
_ErrorHwAlarmName_Type = DisplayString
_ErrorHwAlarmName_Object = MibTableColumn
errorHwAlarmName = _ErrorHwAlarmName_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 65, 1, 2),
    _ErrorHwAlarmName_Type()
)
errorHwAlarmName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    errorHwAlarmName.setStatus("current")
_ErrorHwAlarmStatus_Type = AlarmStatus
_ErrorHwAlarmStatus_Object = MibTableColumn
errorHwAlarmStatus = _ErrorHwAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 65, 1, 3),
    _ErrorHwAlarmStatus_Type()
)
errorHwAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    errorHwAlarmStatus.setStatus("current")
_ErrorHwOn_Type = TruthValue
_ErrorHwOn_Object = MibTableColumn
errorHwOn = _ErrorHwOn_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 65, 1, 4),
    _ErrorHwOn_Type()
)
errorHwOn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    errorHwOn.setStatus("current")
_ErrorHwLog_Type = TruthValue
_ErrorHwLog_Object = MibTableColumn
errorHwLog = _ErrorHwLog_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 65, 1, 5),
    _ErrorHwLog_Type()
)
errorHwLog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    errorHwLog.setStatus("current")
_ErrorHwFault_Type = TruthValue
_ErrorHwFault_Object = MibTableColumn
errorHwFault = _ErrorHwFault_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 65, 1, 6),
    _ErrorHwFault_Type()
)
errorHwFault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    errorHwFault.setStatus("current")
_ErrorHwWarning_Type = TruthValue
_ErrorHwWarning_Object = MibTableColumn
errorHwWarning = _ErrorHwWarning_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 65, 1, 7),
    _ErrorHwWarning_Type()
)
errorHwWarning.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    errorHwWarning.setStatus("current")
_ErrorHwLed_Type = TruthValue
_ErrorHwLed_Object = MibTableColumn
errorHwLed = _ErrorHwLed_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 65, 1, 8),
    _ErrorHwLed_Type()
)
errorHwLed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    errorHwLed.setStatus("current")
_ErrorHw1p1_Type = TruthValue
_ErrorHw1p1_Object = MibTableColumn
errorHw1p1 = _ErrorHw1p1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 65, 1, 9),
    _ErrorHw1p1_Type()
)
errorHw1p1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    errorHw1p1.setStatus("current")
_ErrorHwExt1_Type = TruthValue
_ErrorHwExt1_Object = MibTableColumn
errorHwExt1 = _ErrorHwExt1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 65, 1, 10),
    _ErrorHwExt1_Type()
)
errorHwExt1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    errorHwExt1.setStatus("current")
_ErrorHwExt2_Type = TruthValue
_ErrorHwExt2_Object = MibTableColumn
errorHwExt2 = _ErrorHwExt2_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 65, 1, 11),
    _ErrorHwExt2_Type()
)
errorHwExt2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    errorHwExt2.setStatus("current")
_ErrorHwTrap_Type = TruthValue
_ErrorHwTrap_Object = MibTableColumn
errorHwTrap = _ErrorHwTrap_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 65, 1, 12),
    _ErrorHwTrap_Type()
)
errorHwTrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    errorHwTrap.setStatus("current")
_ErrorHwDD_Type = TruthValue
_ErrorHwDD_Object = MibTableColumn
errorHwDD = _ErrorHwDD_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 65, 1, 13),
    _ErrorHwDD_Type()
)
errorHwDD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    errorHwDD.setStatus("current")


class _ErrorHwTrapHysteresis_Type(Unsigned32):
    """Custom type errorHwTrapHysteresis based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_ErrorHwTrapHysteresis_Type.__name__ = "Unsigned32"
_ErrorHwTrapHysteresis_Object = MibTableColumn
errorHwTrapHysteresis = _ErrorHwTrapHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 65, 1, 14),
    _ErrorHwTrapHysteresis_Type()
)
errorHwTrapHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    errorHwTrapHysteresis.setStatus("current")
_FanTable_Object = MibTable
fanTable = _FanTable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 70)
)
if mibBuilder.loadTexts:
    fanTable.setStatus("current")
_FanEntry_Object = MibTableRow
fanEntry = _FanEntry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 70, 1)
)
fanEntry.setIndexNames(
    (0, "TREDESS-FS-MIB", "fanIndex"),
)
if mibBuilder.loadTexts:
    fanEntry.setStatus("current")


class _FanIndex_Type(Unsigned32):
    """Custom type fanIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_FanIndex_Type.__name__ = "Unsigned32"
_FanIndex_Object = MibTableColumn
fanIndex = _FanIndex_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 70, 1, 1),
    _FanIndex_Type()
)
fanIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fanIndex.setStatus("current")
_FanAlarmName_Type = DisplayString
_FanAlarmName_Object = MibTableColumn
fanAlarmName = _FanAlarmName_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 70, 1, 2),
    _FanAlarmName_Type()
)
fanAlarmName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fanAlarmName.setStatus("current")
_FanAlarmStatus_Type = AlarmStatus
_FanAlarmStatus_Object = MibTableColumn
fanAlarmStatus = _FanAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 70, 1, 3),
    _FanAlarmStatus_Type()
)
fanAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fanAlarmStatus.setStatus("current")
_FanOn_Type = TruthValue
_FanOn_Object = MibTableColumn
fanOn = _FanOn_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 70, 1, 4),
    _FanOn_Type()
)
fanOn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fanOn.setStatus("current")
_FanLog_Type = TruthValue
_FanLog_Object = MibTableColumn
fanLog = _FanLog_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 70, 1, 5),
    _FanLog_Type()
)
fanLog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fanLog.setStatus("current")
_FanFault_Type = TruthValue
_FanFault_Object = MibTableColumn
fanFault = _FanFault_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 70, 1, 6),
    _FanFault_Type()
)
fanFault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fanFault.setStatus("current")
_FanWarning_Type = TruthValue
_FanWarning_Object = MibTableColumn
fanWarning = _FanWarning_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 70, 1, 7),
    _FanWarning_Type()
)
fanWarning.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fanWarning.setStatus("current")
_FanLed_Type = TruthValue
_FanLed_Object = MibTableColumn
fanLed = _FanLed_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 70, 1, 8),
    _FanLed_Type()
)
fanLed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fanLed.setStatus("current")
_Fan1p1_Type = TruthValue
_Fan1p1_Object = MibTableColumn
fan1p1 = _Fan1p1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 70, 1, 9),
    _Fan1p1_Type()
)
fan1p1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fan1p1.setStatus("current")
_FanExt1_Type = TruthValue
_FanExt1_Object = MibTableColumn
fanExt1 = _FanExt1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 70, 1, 10),
    _FanExt1_Type()
)
fanExt1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fanExt1.setStatus("current")
_FanExt2_Type = TruthValue
_FanExt2_Object = MibTableColumn
fanExt2 = _FanExt2_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 70, 1, 11),
    _FanExt2_Type()
)
fanExt2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fanExt2.setStatus("current")
_FanTrap_Type = TruthValue
_FanTrap_Object = MibTableColumn
fanTrap = _FanTrap_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 70, 1, 12),
    _FanTrap_Type()
)
fanTrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fanTrap.setStatus("current")
_FanDD_Type = TruthValue
_FanDD_Object = MibTableColumn
fanDD = _FanDD_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 70, 1, 13),
    _FanDD_Type()
)
fanDD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fanDD.setStatus("current")


class _FanTrapHysteresis_Type(Unsigned32):
    """Custom type fanTrapHysteresis based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FanTrapHysteresis_Type.__name__ = "Unsigned32"
_FanTrapHysteresis_Object = MibTableColumn
fanTrapHysteresis = _FanTrapHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 70, 1, 14),
    _FanTrapHysteresis_Type()
)
fanTrapHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fanTrapHysteresis.setStatus("current")
_ExternalTable_Object = MibTable
externalTable = _ExternalTable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 75)
)
if mibBuilder.loadTexts:
    externalTable.setStatus("current")
_ExternalEntry_Object = MibTableRow
externalEntry = _ExternalEntry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 75, 1)
)
externalEntry.setIndexNames(
    (0, "TREDESS-FS-MIB", "externalIndex"),
)
if mibBuilder.loadTexts:
    externalEntry.setStatus("current")


class _ExternalIndex_Type(Unsigned32):
    """Custom type externalIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3),
    )


_ExternalIndex_Type.__name__ = "Unsigned32"
_ExternalIndex_Object = MibTableColumn
externalIndex = _ExternalIndex_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 75, 1, 1),
    _ExternalIndex_Type()
)
externalIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    externalIndex.setStatus("current")
_ExternalAlarmName_Type = DisplayString
_ExternalAlarmName_Object = MibTableColumn
externalAlarmName = _ExternalAlarmName_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 75, 1, 2),
    _ExternalAlarmName_Type()
)
externalAlarmName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    externalAlarmName.setStatus("current")
_ExternalAlarmStatus_Type = AlarmStatus
_ExternalAlarmStatus_Object = MibTableColumn
externalAlarmStatus = _ExternalAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 75, 1, 3),
    _ExternalAlarmStatus_Type()
)
externalAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    externalAlarmStatus.setStatus("current")
_ExternalOn_Type = TruthValue
_ExternalOn_Object = MibTableColumn
externalOn = _ExternalOn_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 75, 1, 4),
    _ExternalOn_Type()
)
externalOn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    externalOn.setStatus("current")
_ExternalLog_Type = TruthValue
_ExternalLog_Object = MibTableColumn
externalLog = _ExternalLog_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 75, 1, 5),
    _ExternalLog_Type()
)
externalLog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    externalLog.setStatus("current")
_ExternalFault_Type = TruthValue
_ExternalFault_Object = MibTableColumn
externalFault = _ExternalFault_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 75, 1, 6),
    _ExternalFault_Type()
)
externalFault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    externalFault.setStatus("current")
_ExternalWarning_Type = TruthValue
_ExternalWarning_Object = MibTableColumn
externalWarning = _ExternalWarning_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 75, 1, 7),
    _ExternalWarning_Type()
)
externalWarning.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    externalWarning.setStatus("current")
_ExternalLed_Type = TruthValue
_ExternalLed_Object = MibTableColumn
externalLed = _ExternalLed_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 75, 1, 8),
    _ExternalLed_Type()
)
externalLed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    externalLed.setStatus("current")
_External1p1_Type = TruthValue
_External1p1_Object = MibTableColumn
external1p1 = _External1p1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 75, 1, 9),
    _External1p1_Type()
)
external1p1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    external1p1.setStatus("current")
_ExternalExt1_Type = TruthValue
_ExternalExt1_Object = MibTableColumn
externalExt1 = _ExternalExt1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 75, 1, 10),
    _ExternalExt1_Type()
)
externalExt1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    externalExt1.setStatus("current")
_ExternalExt2_Type = TruthValue
_ExternalExt2_Object = MibTableColumn
externalExt2 = _ExternalExt2_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 75, 1, 11),
    _ExternalExt2_Type()
)
externalExt2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    externalExt2.setStatus("current")
_ExternalTrap_Type = TruthValue
_ExternalTrap_Object = MibTableColumn
externalTrap = _ExternalTrap_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 75, 1, 12),
    _ExternalTrap_Type()
)
externalTrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    externalTrap.setStatus("current")
_ExternalDD_Type = TruthValue
_ExternalDD_Object = MibTableColumn
externalDD = _ExternalDD_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 75, 1, 13),
    _ExternalDD_Type()
)
externalDD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    externalDD.setStatus("current")


class _ExternalTrapHysteresis_Type(Unsigned32):
    """Custom type externalTrapHysteresis based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_ExternalTrapHysteresis_Type.__name__ = "Unsigned32"
_ExternalTrapHysteresis_Object = MibTableColumn
externalTrapHysteresis = _ExternalTrapHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 75, 1, 14),
    _ExternalTrapHysteresis_Type()
)
externalTrapHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    externalTrapHysteresis.setStatus("current")
_PowerSupplyTable_Object = MibTable
powerSupplyTable = _PowerSupplyTable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 80)
)
if mibBuilder.loadTexts:
    powerSupplyTable.setStatus("current")
_PowerSupplyEntry_Object = MibTableRow
powerSupplyEntry = _PowerSupplyEntry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 80, 1)
)
powerSupplyEntry.setIndexNames(
    (0, "TREDESS-FS-MIB", "powerSupplyIndex"),
)
if mibBuilder.loadTexts:
    powerSupplyEntry.setStatus("current")


class _PowerSupplyIndex_Type(Unsigned32):
    """Custom type powerSupplyIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3),
    )


_PowerSupplyIndex_Type.__name__ = "Unsigned32"
_PowerSupplyIndex_Object = MibTableColumn
powerSupplyIndex = _PowerSupplyIndex_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 80, 1, 1),
    _PowerSupplyIndex_Type()
)
powerSupplyIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    powerSupplyIndex.setStatus("current")
_PowerSupplyAlarmName_Type = DisplayString
_PowerSupplyAlarmName_Object = MibTableColumn
powerSupplyAlarmName = _PowerSupplyAlarmName_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 80, 1, 2),
    _PowerSupplyAlarmName_Type()
)
powerSupplyAlarmName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerSupplyAlarmName.setStatus("current")
_PowerSupplyAlarmStatus_Type = AlarmStatus
_PowerSupplyAlarmStatus_Object = MibTableColumn
powerSupplyAlarmStatus = _PowerSupplyAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 80, 1, 3),
    _PowerSupplyAlarmStatus_Type()
)
powerSupplyAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerSupplyAlarmStatus.setStatus("current")
_PowerSupplyOn_Type = TruthValue
_PowerSupplyOn_Object = MibTableColumn
powerSupplyOn = _PowerSupplyOn_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 80, 1, 4),
    _PowerSupplyOn_Type()
)
powerSupplyOn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    powerSupplyOn.setStatus("current")
_PowerSupplyLog_Type = TruthValue
_PowerSupplyLog_Object = MibTableColumn
powerSupplyLog = _PowerSupplyLog_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 80, 1, 5),
    _PowerSupplyLog_Type()
)
powerSupplyLog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    powerSupplyLog.setStatus("current")
_PowerSupplyFault_Type = TruthValue
_PowerSupplyFault_Object = MibTableColumn
powerSupplyFault = _PowerSupplyFault_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 80, 1, 6),
    _PowerSupplyFault_Type()
)
powerSupplyFault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    powerSupplyFault.setStatus("current")
_PowerSupplyWarning_Type = TruthValue
_PowerSupplyWarning_Object = MibTableColumn
powerSupplyWarning = _PowerSupplyWarning_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 80, 1, 7),
    _PowerSupplyWarning_Type()
)
powerSupplyWarning.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    powerSupplyWarning.setStatus("current")
_PowerSupplyLed_Type = TruthValue
_PowerSupplyLed_Object = MibTableColumn
powerSupplyLed = _PowerSupplyLed_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 80, 1, 8),
    _PowerSupplyLed_Type()
)
powerSupplyLed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    powerSupplyLed.setStatus("current")
_PowerSupply1p1_Type = TruthValue
_PowerSupply1p1_Object = MibTableColumn
powerSupply1p1 = _PowerSupply1p1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 80, 1, 9),
    _PowerSupply1p1_Type()
)
powerSupply1p1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    powerSupply1p1.setStatus("current")
_PowerSupplyExt1_Type = TruthValue
_PowerSupplyExt1_Object = MibTableColumn
powerSupplyExt1 = _PowerSupplyExt1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 80, 1, 10),
    _PowerSupplyExt1_Type()
)
powerSupplyExt1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    powerSupplyExt1.setStatus("current")
_PowerSupplyExt2_Type = TruthValue
_PowerSupplyExt2_Object = MibTableColumn
powerSupplyExt2 = _PowerSupplyExt2_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 80, 1, 11),
    _PowerSupplyExt2_Type()
)
powerSupplyExt2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    powerSupplyExt2.setStatus("current")
_PowerSupplyTrap_Type = TruthValue
_PowerSupplyTrap_Object = MibTableColumn
powerSupplyTrap = _PowerSupplyTrap_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 80, 1, 12),
    _PowerSupplyTrap_Type()
)
powerSupplyTrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    powerSupplyTrap.setStatus("current")
_PowerSupplyDD_Type = TruthValue
_PowerSupplyDD_Object = MibTableColumn
powerSupplyDD = _PowerSupplyDD_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 80, 1, 13),
    _PowerSupplyDD_Type()
)
powerSupplyDD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    powerSupplyDD.setStatus("current")


class _PowerSupplyTrapHysteresis_Type(Unsigned32):
    """Custom type powerSupplyTrapHysteresis based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_PowerSupplyTrapHysteresis_Type.__name__ = "Unsigned32"
_PowerSupplyTrapHysteresis_Object = MibTableColumn
powerSupplyTrapHysteresis = _PowerSupplyTrapHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 80, 1, 14),
    _PowerSupplyTrapHysteresis_Type()
)
powerSupplyTrapHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    powerSupplyTrapHysteresis.setStatus("current")
_DcInputTable_Object = MibTable
dcInputTable = _DcInputTable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 85)
)
if mibBuilder.loadTexts:
    dcInputTable.setStatus("current")
_DcInputEntry_Object = MibTableRow
dcInputEntry = _DcInputEntry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 85, 1)
)
dcInputEntry.setIndexNames(
    (0, "TREDESS-FS-MIB", "dcInputIndex"),
)
if mibBuilder.loadTexts:
    dcInputEntry.setStatus("current")


class _DcInputIndex_Type(Unsigned32):
    """Custom type dcInputIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3),
    )


_DcInputIndex_Type.__name__ = "Unsigned32"
_DcInputIndex_Object = MibTableColumn
dcInputIndex = _DcInputIndex_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 85, 1, 1),
    _DcInputIndex_Type()
)
dcInputIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dcInputIndex.setStatus("current")
_DcInputAlarmName_Type = DisplayString
_DcInputAlarmName_Object = MibTableColumn
dcInputAlarmName = _DcInputAlarmName_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 85, 1, 2),
    _DcInputAlarmName_Type()
)
dcInputAlarmName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcInputAlarmName.setStatus("current")
_DcInputAlarmStatus_Type = AlarmStatus
_DcInputAlarmStatus_Object = MibTableColumn
dcInputAlarmStatus = _DcInputAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 85, 1, 3),
    _DcInputAlarmStatus_Type()
)
dcInputAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcInputAlarmStatus.setStatus("current")
_DcInputOn_Type = TruthValue
_DcInputOn_Object = MibTableColumn
dcInputOn = _DcInputOn_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 85, 1, 4),
    _DcInputOn_Type()
)
dcInputOn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcInputOn.setStatus("current")
_DcInputLog_Type = TruthValue
_DcInputLog_Object = MibTableColumn
dcInputLog = _DcInputLog_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 85, 1, 5),
    _DcInputLog_Type()
)
dcInputLog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcInputLog.setStatus("current")
_DcInputFault_Type = TruthValue
_DcInputFault_Object = MibTableColumn
dcInputFault = _DcInputFault_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 85, 1, 6),
    _DcInputFault_Type()
)
dcInputFault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcInputFault.setStatus("current")
_DcInputWarning_Type = TruthValue
_DcInputWarning_Object = MibTableColumn
dcInputWarning = _DcInputWarning_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 85, 1, 7),
    _DcInputWarning_Type()
)
dcInputWarning.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcInputWarning.setStatus("current")
_DcInputLed_Type = TruthValue
_DcInputLed_Object = MibTableColumn
dcInputLed = _DcInputLed_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 85, 1, 8),
    _DcInputLed_Type()
)
dcInputLed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcInputLed.setStatus("current")
_DcInput1p1_Type = TruthValue
_DcInput1p1_Object = MibTableColumn
dcInput1p1 = _DcInput1p1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 85, 1, 9),
    _DcInput1p1_Type()
)
dcInput1p1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcInput1p1.setStatus("current")
_DcInputExt1_Type = TruthValue
_DcInputExt1_Object = MibTableColumn
dcInputExt1 = _DcInputExt1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 85, 1, 10),
    _DcInputExt1_Type()
)
dcInputExt1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcInputExt1.setStatus("current")
_DcInputExt2_Type = TruthValue
_DcInputExt2_Object = MibTableColumn
dcInputExt2 = _DcInputExt2_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 85, 1, 11),
    _DcInputExt2_Type()
)
dcInputExt2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcInputExt2.setStatus("current")
_DcInputTrap_Type = TruthValue
_DcInputTrap_Object = MibTableColumn
dcInputTrap = _DcInputTrap_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 85, 1, 12),
    _DcInputTrap_Type()
)
dcInputTrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcInputTrap.setStatus("current")
_DcInputDD_Type = TruthValue
_DcInputDD_Object = MibTableColumn
dcInputDD = _DcInputDD_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 85, 1, 13),
    _DcInputDD_Type()
)
dcInputDD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcInputDD.setStatus("current")


class _DcInputTrapHysteresis_Type(Unsigned32):
    """Custom type dcInputTrapHysteresis based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_DcInputTrapHysteresis_Type.__name__ = "Unsigned32"
_DcInputTrapHysteresis_Object = MibTableColumn
dcInputTrapHysteresis = _DcInputTrapHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 85, 1, 14),
    _DcInputTrapHysteresis_Type()
)
dcInputTrapHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcInputTrapHysteresis.setStatus("current")
_RedundancySysTable_Object = MibTable
redundancySysTable = _RedundancySysTable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 90)
)
if mibBuilder.loadTexts:
    redundancySysTable.setStatus("current")
_RedundancySysEntry_Object = MibTableRow
redundancySysEntry = _RedundancySysEntry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 90, 1)
)
redundancySysEntry.setIndexNames(
    (0, "TREDESS-FS-MIB", "redundancySysIndex"),
)
if mibBuilder.loadTexts:
    redundancySysEntry.setStatus("current")


class _RedundancySysIndex_Type(Unsigned32):
    """Custom type redundancySysIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3),
    )


_RedundancySysIndex_Type.__name__ = "Unsigned32"
_RedundancySysIndex_Object = MibTableColumn
redundancySysIndex = _RedundancySysIndex_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 90, 1, 1),
    _RedundancySysIndex_Type()
)
redundancySysIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    redundancySysIndex.setStatus("current")
_RedundancySysAlarmName_Type = DisplayString
_RedundancySysAlarmName_Object = MibTableColumn
redundancySysAlarmName = _RedundancySysAlarmName_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 90, 1, 2),
    _RedundancySysAlarmName_Type()
)
redundancySysAlarmName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    redundancySysAlarmName.setStatus("current")
_RedundancySysAlarmStatus_Type = AlarmStatus
_RedundancySysAlarmStatus_Object = MibTableColumn
redundancySysAlarmStatus = _RedundancySysAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 90, 1, 3),
    _RedundancySysAlarmStatus_Type()
)
redundancySysAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    redundancySysAlarmStatus.setStatus("current")
_RedundancySysOn_Type = TruthValue
_RedundancySysOn_Object = MibTableColumn
redundancySysOn = _RedundancySysOn_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 90, 1, 4),
    _RedundancySysOn_Type()
)
redundancySysOn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    redundancySysOn.setStatus("current")
_RedundancySysLog_Type = TruthValue
_RedundancySysLog_Object = MibTableColumn
redundancySysLog = _RedundancySysLog_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 90, 1, 5),
    _RedundancySysLog_Type()
)
redundancySysLog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    redundancySysLog.setStatus("current")
_RedundancySysFault_Type = TruthValue
_RedundancySysFault_Object = MibTableColumn
redundancySysFault = _RedundancySysFault_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 90, 1, 6),
    _RedundancySysFault_Type()
)
redundancySysFault.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    redundancySysFault.setStatus("current")
_RedundancySysWarning_Type = TruthValue
_RedundancySysWarning_Object = MibTableColumn
redundancySysWarning = _RedundancySysWarning_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 90, 1, 7),
    _RedundancySysWarning_Type()
)
redundancySysWarning.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    redundancySysWarning.setStatus("current")
_RedundancySysLed_Type = TruthValue
_RedundancySysLed_Object = MibTableColumn
redundancySysLed = _RedundancySysLed_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 90, 1, 8),
    _RedundancySysLed_Type()
)
redundancySysLed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    redundancySysLed.setStatus("current")
_RedundancySys1p1_Type = TruthValue
_RedundancySys1p1_Object = MibTableColumn
redundancySys1p1 = _RedundancySys1p1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 90, 1, 9),
    _RedundancySys1p1_Type()
)
redundancySys1p1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    redundancySys1p1.setStatus("current")
_RedundancySysExt1_Type = TruthValue
_RedundancySysExt1_Object = MibTableColumn
redundancySysExt1 = _RedundancySysExt1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 90, 1, 10),
    _RedundancySysExt1_Type()
)
redundancySysExt1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    redundancySysExt1.setStatus("current")
_RedundancySysExt2_Type = TruthValue
_RedundancySysExt2_Object = MibTableColumn
redundancySysExt2 = _RedundancySysExt2_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 90, 1, 11),
    _RedundancySysExt2_Type()
)
redundancySysExt2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    redundancySysExt2.setStatus("current")
_RedundancySysTrap_Type = TruthValue
_RedundancySysTrap_Object = MibTableColumn
redundancySysTrap = _RedundancySysTrap_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 90, 1, 12),
    _RedundancySysTrap_Type()
)
redundancySysTrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    redundancySysTrap.setStatus("current")
_RedundancySysDD_Type = TruthValue
_RedundancySysDD_Object = MibTableColumn
redundancySysDD = _RedundancySysDD_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 90, 1, 13),
    _RedundancySysDD_Type()
)
redundancySysDD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    redundancySysDD.setStatus("current")


class _RedundancySysTrapHysteresis_Type(Unsigned32):
    """Custom type redundancySysTrapHysteresis based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RedundancySysTrapHysteresis_Type.__name__ = "Unsigned32"
_RedundancySysTrapHysteresis_Object = MibTableColumn
redundancySysTrapHysteresis = _RedundancySysTrapHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 1, 90, 1, 14),
    _RedundancySysTrapHysteresis_Type()
)
redundancySysTrapHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    redundancySysTrapHysteresis.setStatus("current")
_EventsConfiguration_ObjectIdentity = ObjectIdentity
eventsConfiguration = _EventsConfiguration_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 2)
)
_EventsTable_Object = MibTable
eventsTable = _EventsTable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 2, 1)
)
if mibBuilder.loadTexts:
    eventsTable.setStatus("current")
_EventsEntry_Object = MibTableRow
eventsEntry = _EventsEntry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 2, 1, 1)
)
eventsEntry.setIndexNames(
    (0, "TREDESS-FS-MIB", "eventsIndex"),
)
if mibBuilder.loadTexts:
    eventsEntry.setStatus("current")


class _EventsIndex_Type(Unsigned32):
    """Custom type eventsIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_EventsIndex_Type.__name__ = "Unsigned32"
_EventsIndex_Object = MibTableColumn
eventsIndex = _EventsIndex_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 2, 1, 1, 1),
    _EventsIndex_Type()
)
eventsIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    eventsIndex.setStatus("current")
_EventName_Type = DisplayString
_EventName_Object = MibTableColumn
eventName = _EventName_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 2, 1, 1, 2),
    _EventName_Type()
)
eventName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eventName.setStatus("current")
_EventOn_Type = TruthValue
_EventOn_Object = MibTableColumn
eventOn = _EventOn_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 2, 1, 1, 3),
    _EventOn_Type()
)
eventOn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    eventOn.setStatus("current")
_EventLog_Type = TruthValue
_EventLog_Object = MibTableColumn
eventLog = _EventLog_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 2, 1, 1, 4),
    _EventLog_Type()
)
eventLog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    eventLog.setStatus("current")
_EventTrap_Type = TruthValue
_EventTrap_Object = MibTableColumn
eventTrap = _EventTrap_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 2, 1, 1, 5),
    _EventTrap_Type()
)
eventTrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    eventTrap.setStatus("current")
_IoInterface_ObjectIdentity = ObjectIdentity
ioInterface = _IoInterface_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 3)
)
_Input01_ObjectIdentity = ObjectIdentity
input01 = _Input01_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 3, 1)
)


class _Input01Status_Type(Integer32):
    """Custom type input01Status based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("open", 0),
          ("closed", 1),
          ("redundancy", 2))
    )


_Input01Status_Type.__name__ = "Integer32"
_Input01Status_Object = MibScalar
input01Status = _Input01Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 3, 1, 1),
    _Input01Status_Type()
)
input01Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    input01Status.setStatus("current")


class _Input01Description_Type(OctetString):
    """Custom type input01Description based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_Input01Description_Type.__name__ = "OctetString"
_Input01Description_Object = MibScalar
input01Description = _Input01Description_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 3, 1, 2),
    _Input01Description_Type()
)
input01Description.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    input01Description.setStatus("current")


class _Input01StandByStatus_Type(Integer32):
    """Custom type input01StandByStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("open", 0),
          ("closed", 1))
    )


_Input01StandByStatus_Type.__name__ = "Integer32"
_Input01StandByStatus_Object = MibScalar
input01StandByStatus = _Input01StandByStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 3, 1, 3),
    _Input01StandByStatus_Type()
)
input01StandByStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    input01StandByStatus.setStatus("current")


class _Input01Mode_Type(Integer32):
    """Custom type input01Mode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("level", 0),
          ("pulse", 1),
          ("interlock", 2),
          ("systemReset", 3),
          ("minimumPower", 4))
    )


_Input01Mode_Type.__name__ = "Integer32"
_Input01Mode_Object = MibScalar
input01Mode = _Input01Mode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 3, 1, 4),
    _Input01Mode_Type()
)
input01Mode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    input01Mode.setStatus("current")


class _Input01Duration_Type(Unsigned32):
    """Custom type input01Duration based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 99),
    )


_Input01Duration_Type.__name__ = "Unsigned32"
_Input01Duration_Object = MibScalar
input01Duration = _Input01Duration_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 3, 1, 5),
    _Input01Duration_Type()
)
input01Duration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    input01Duration.setStatus("current")
if mibBuilder.loadTexts:
    input01Duration.setUnits("s")
_Input02_ObjectIdentity = ObjectIdentity
input02 = _Input02_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 3, 2)
)


class _Input02Status_Type(Integer32):
    """Custom type input02Status based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("open", 0),
          ("closed", 1),
          ("redundancy", 2))
    )


_Input02Status_Type.__name__ = "Integer32"
_Input02Status_Object = MibScalar
input02Status = _Input02Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 3, 2, 1),
    _Input02Status_Type()
)
input02Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    input02Status.setStatus("current")


class _Input02Description_Type(OctetString):
    """Custom type input02Description based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_Input02Description_Type.__name__ = "OctetString"
_Input02Description_Object = MibScalar
input02Description = _Input02Description_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 3, 2, 2),
    _Input02Description_Type()
)
input02Description.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    input02Description.setStatus("current")


class _Input02StandByStatus_Type(Integer32):
    """Custom type input02StandByStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("open", 0),
          ("closed", 1))
    )


_Input02StandByStatus_Type.__name__ = "Integer32"
_Input02StandByStatus_Object = MibScalar
input02StandByStatus = _Input02StandByStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 3, 2, 3),
    _Input02StandByStatus_Type()
)
input02StandByStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    input02StandByStatus.setStatus("current")


class _Input02Mode_Type(Integer32):
    """Custom type input02Mode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("level", 0),
          ("pulse", 1),
          ("interlock", 2),
          ("systemReset", 3),
          ("minimumPower", 4))
    )


_Input02Mode_Type.__name__ = "Integer32"
_Input02Mode_Object = MibScalar
input02Mode = _Input02Mode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 3, 2, 4),
    _Input02Mode_Type()
)
input02Mode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    input02Mode.setStatus("current")


class _Input02Duration_Type(Unsigned32):
    """Custom type input02Duration based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 99),
    )


_Input02Duration_Type.__name__ = "Unsigned32"
_Input02Duration_Object = MibScalar
input02Duration = _Input02Duration_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 3, 2, 5),
    _Input02Duration_Type()
)
input02Duration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    input02Duration.setStatus("current")
if mibBuilder.loadTexts:
    input02Duration.setUnits("s")
_Output01_ObjectIdentity = ObjectIdentity
output01 = _Output01_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 3, 11)
)


class _Output01Status_Type(Integer32):
    """Custom type output01Status based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("open", 0),
          ("closed", 1),
          ("redundancy", 2))
    )


_Output01Status_Type.__name__ = "Integer32"
_Output01Status_Object = MibScalar
output01Status = _Output01Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 3, 11, 1),
    _Output01Status_Type()
)
output01Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    output01Status.setStatus("current")


class _Output01Description_Type(OctetString):
    """Custom type output01Description based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 30),
    )


_Output01Description_Type.__name__ = "OctetString"
_Output01Description_Object = MibScalar
output01Description = _Output01Description_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 3, 11, 2),
    _Output01Description_Type()
)
output01Description.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    output01Description.setStatus("current")


class _Output01StandByStatus_Type(Integer32):
    """Custom type output01StandByStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("open", 0),
          ("closed", 1))
    )


_Output01StandByStatus_Type.__name__ = "Integer32"
_Output01StandByStatus_Object = MibScalar
output01StandByStatus = _Output01StandByStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 3, 11, 3),
    _Output01StandByStatus_Type()
)
output01StandByStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    output01StandByStatus.setStatus("current")


class _Output01Mode_Type(Integer32):
    """Custom type output01Mode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("level", 0),
          ("pulse", 1))
    )


_Output01Mode_Type.__name__ = "Integer32"
_Output01Mode_Object = MibScalar
output01Mode = _Output01Mode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 3, 11, 4),
    _Output01Mode_Type()
)
output01Mode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    output01Mode.setStatus("current")


class _Output01Duration_Type(Unsigned32):
    """Custom type output01Duration based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 99),
    )


_Output01Duration_Type.__name__ = "Unsigned32"
_Output01Duration_Object = MibScalar
output01Duration = _Output01Duration_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 3, 11, 5),
    _Output01Duration_Type()
)
output01Duration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    output01Duration.setStatus("current")
if mibBuilder.loadTexts:
    output01Duration.setUnits("s")
_Output02_ObjectIdentity = ObjectIdentity
output02 = _Output02_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 3, 12)
)


class _Output02Status_Type(Integer32):
    """Custom type output02Status based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("open", 0),
          ("closed", 1),
          ("redundancy", 2))
    )


_Output02Status_Type.__name__ = "Integer32"
_Output02Status_Object = MibScalar
output02Status = _Output02Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 3, 12, 1),
    _Output02Status_Type()
)
output02Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    output02Status.setStatus("current")


class _Output02Description_Type(OctetString):
    """Custom type output02Description based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 30),
    )


_Output02Description_Type.__name__ = "OctetString"
_Output02Description_Object = MibScalar
output02Description = _Output02Description_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 3, 12, 2),
    _Output02Description_Type()
)
output02Description.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    output02Description.setStatus("current")


class _Output02StandByStatus_Type(Integer32):
    """Custom type output02StandByStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("open", 0),
          ("closed", 1))
    )


_Output02StandByStatus_Type.__name__ = "Integer32"
_Output02StandByStatus_Object = MibScalar
output02StandByStatus = _Output02StandByStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 3, 12, 3),
    _Output02StandByStatus_Type()
)
output02StandByStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    output02StandByStatus.setStatus("current")


class _Output02Mode_Type(Integer32):
    """Custom type output02Mode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("level", 0),
          ("pulse", 1))
    )


_Output02Mode_Type.__name__ = "Integer32"
_Output02Mode_Object = MibScalar
output02Mode = _Output02Mode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 3, 12, 4),
    _Output02Mode_Type()
)
output02Mode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    output02Mode.setStatus("current")


class _Output02Duration_Type(Unsigned32):
    """Custom type output02Duration based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 99),
    )


_Output02Duration_Type.__name__ = "Unsigned32"
_Output02Duration_Object = MibScalar
output02Duration = _Output02Duration_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 4, 3, 12, 5),
    _Output02Duration_Type()
)
output02Duration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    output02Duration.setStatus("current")
if mibBuilder.loadTexts:
    output02Duration.setUnits("s")
_Snmp_ObjectIdentity = ObjectIdentity
snmp = _Snmp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 5)
)
_ReadCommunity1_Type = DisplayString
_ReadCommunity1_Object = MibScalar
readCommunity1 = _ReadCommunity1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 5, 1),
    _ReadCommunity1_Type()
)
readCommunity1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    readCommunity1.setStatus("current")
_WriteCommunity1_Type = DisplayString
_WriteCommunity1_Object = MibScalar
writeCommunity1 = _WriteCommunity1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 5, 2),
    _WriteCommunity1_Type()
)
writeCommunity1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    writeCommunity1.setStatus("current")
_FastTrapSync_Type = NullApply
_FastTrapSync_Object = MibScalar
fastTrapSync = _FastTrapSync_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 5, 4),
    _FastTrapSync_Type()
)
fastTrapSync.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fastTrapSync.setStatus("current")
_EnableAuthenTraps_Type = TruthValue
_EnableAuthenTraps_Object = MibScalar
enableAuthenTraps = _EnableAuthenTraps_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 5, 5),
    _EnableAuthenTraps_Type()
)
enableAuthenTraps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    enableAuthenTraps.setStatus("current")
_TrapKeepaliveEnable_Type = TruthValue
_TrapKeepaliveEnable_Object = MibScalar
trapKeepaliveEnable = _TrapKeepaliveEnable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 5, 6),
    _TrapKeepaliveEnable_Type()
)
trapKeepaliveEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    trapKeepaliveEnable.setStatus("current")


class _TrapKeepalive_Type(Unsigned32):
    """Custom type trapKeepalive based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 43200),
    )


_TrapKeepalive_Type.__name__ = "Unsigned32"
_TrapKeepalive_Object = MibScalar
trapKeepalive = _TrapKeepalive_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 5, 7),
    _TrapKeepalive_Type()
)
trapKeepalive.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    trapKeepalive.setStatus("current")
if mibBuilder.loadTexts:
    trapKeepalive.setUnits("seconds")
_SendTestTrap_Type = NullApply
_SendTestTrap_Object = MibScalar
sendTestTrap = _SendTestTrap_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 5, 8),
    _SendTestTrap_Type()
)
sendTestTrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sendTestTrap.setStatus("current")


class _LastUpdate_Type(DisplayString):
    """Custom type lastUpdate based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(12, 12),
    )
    fixed_length = 12


_LastUpdate_Type.__name__ = "DisplayString"
_LastUpdate_Object = MibScalar
lastUpdate = _LastUpdate_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 5, 9),
    _LastUpdate_Type()
)
lastUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lastUpdate.setStatus("current")
_ReadCommunity2_Type = DisplayString
_ReadCommunity2_Object = MibScalar
readCommunity2 = _ReadCommunity2_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 5, 10),
    _ReadCommunity2_Type()
)
readCommunity2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    readCommunity2.setStatus("current")
_WriteCommunity2_Type = DisplayString
_WriteCommunity2_Object = MibScalar
writeCommunity2 = _WriteCommunity2_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 5, 11),
    _WriteCommunity2_Type()
)
writeCommunity2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    writeCommunity2.setStatus("current")
_TrapsLocalMode_Type = TruthValue
_TrapsLocalMode_Object = MibScalar
trapsLocalMode = _TrapsLocalMode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 5, 15),
    _TrapsLocalMode_Type()
)
trapsLocalMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    trapsLocalMode.setStatus("current")
_TrapsInitialStatus_Type = TruthValue
_TrapsInitialStatus_Object = MibScalar
trapsInitialStatus = _TrapsInitialStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 5, 16),
    _TrapsInitialStatus_Type()
)
trapsInitialStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    trapsInitialStatus.setStatus("current")
_SendAllTraps_Type = NullApply
_SendAllTraps_Object = MibScalar
sendAllTraps = _SendAllTraps_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 5, 17),
    _SendAllTraps_Type()
)
sendAllTraps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sendAllTraps.setStatus("current")
_TrapSinkTable_Object = MibTable
trapSinkTable = _TrapSinkTable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 5, 20)
)
if mibBuilder.loadTexts:
    trapSinkTable.setStatus("current")
_TrapSinkEntry_Object = MibTableRow
trapSinkEntry = _TrapSinkEntry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 5, 20, 1)
)
trapSinkEntry.setIndexNames(
    (0, "TREDESS-FS-MIB", "trapSinkIndex"),
)
if mibBuilder.loadTexts:
    trapSinkEntry.setStatus("current")


class _TrapSinkIndex_Type(Unsigned32):
    """Custom type trapSinkIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_TrapSinkIndex_Type.__name__ = "Unsigned32"
_TrapSinkIndex_Object = MibTableColumn
trapSinkIndex = _TrapSinkIndex_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 5, 20, 1, 1),
    _TrapSinkIndex_Type()
)
trapSinkIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    trapSinkIndex.setStatus("current")
_TrapSinkEnable_Type = TruthValue
_TrapSinkEnable_Object = MibTableColumn
trapSinkEnable = _TrapSinkEnable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 5, 20, 1, 2),
    _TrapSinkEnable_Type()
)
trapSinkEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    trapSinkEnable.setStatus("current")


class _TrapSinkVersion_Type(Integer32):
    """Custom type trapSinkVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("v1Trap", 1),
          ("v2Trap", 2),
          ("v2Inform", 3))
    )


_TrapSinkVersion_Type.__name__ = "Integer32"
_TrapSinkVersion_Object = MibTableColumn
trapSinkVersion = _TrapSinkVersion_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 5, 20, 1, 3),
    _TrapSinkVersion_Type()
)
trapSinkVersion.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    trapSinkVersion.setStatus("current")
_TrapSinkIpAddress_Type = IpAddress
_TrapSinkIpAddress_Object = MibTableColumn
trapSinkIpAddress = _TrapSinkIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 5, 20, 1, 4),
    _TrapSinkIpAddress_Type()
)
trapSinkIpAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    trapSinkIpAddress.setStatus("current")


class _TrapSinkPort_Type(Unsigned32):
    """Custom type trapSinkPort based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_TrapSinkPort_Type.__name__ = "Unsigned32"
_TrapSinkPort_Object = MibTableColumn
trapSinkPort = _TrapSinkPort_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 5, 20, 1, 5),
    _TrapSinkPort_Type()
)
trapSinkPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    trapSinkPort.setStatus("current")
_TrapSinkInformTimeout_Type = Unsigned32
_TrapSinkInformTimeout_Object = MibTableColumn
trapSinkInformTimeout = _TrapSinkInformTimeout_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 5, 20, 1, 6),
    _TrapSinkInformTimeout_Type()
)
trapSinkInformTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    trapSinkInformTimeout.setStatus("current")
_TrapSinkInformRetry_Type = Unsigned32
_TrapSinkInformRetry_Object = MibTableColumn
trapSinkInformRetry = _TrapSinkInformRetry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 5, 20, 1, 7),
    _TrapSinkInformRetry_Type()
)
trapSinkInformRetry.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    trapSinkInformRetry.setStatus("current")


class _TrapSinkCommunity_Type(DisplayString):
    """Custom type trapSinkCommunity based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_TrapSinkCommunity_Type.__name__ = "DisplayString"
_TrapSinkCommunity_Object = MibTableColumn
trapSinkCommunity = _TrapSinkCommunity_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 5, 20, 1, 8),
    _TrapSinkCommunity_Type()
)
trapSinkCommunity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    trapSinkCommunity.setStatus("current")
_DeviceInfo_ObjectIdentity = ObjectIdentity
deviceInfo = _DeviceInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6)
)


class _PartNumber_Type(DisplayString):
    """Custom type partNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(12, 12),
    )
    fixed_length = 12


_PartNumber_Type.__name__ = "DisplayString"
_PartNumber_Object = MibScalar
partNumber = _PartNumber_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 1),
    _PartNumber_Type()
)
partNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    partNumber.setStatus("current")


class _SerialNumber_Type(DisplayString):
    """Custom type serialNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(12, 12),
    )
    fixed_length = 12


_SerialNumber_Type.__name__ = "DisplayString"
_SerialNumber_Object = MibScalar
serialNumber = _SerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 2),
    _SerialNumber_Type()
)
serialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    serialNumber.setStatus("current")


class _SoftwareVersion_Type(DisplayString):
    """Custom type softwareVersion based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(16, 16),
    )
    fixed_length = 16


_SoftwareVersion_Type.__name__ = "DisplayString"
_SoftwareVersion_Object = MibScalar
softwareVersion = _SoftwareVersion_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 3),
    _SoftwareVersion_Type()
)
softwareVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    softwareVersion.setStatus("current")
_SoftwareId_Type = Unsigned32
_SoftwareId_Object = MibScalar
softwareId = _SoftwareId_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 4),
    _SoftwareId_Type()
)
softwareId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    softwareId.setStatus("current")
_HardwareBasis_ObjectIdentity = ObjectIdentity
hardwareBasis = _HardwareBasis_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 20)
)
_CtrlBoard_Type = OptionHw
_CtrlBoard_Object = MibScalar
ctrlBoard = _CtrlBoard_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 20, 1),
    _CtrlBoard_Type()
)
ctrlBoard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ctrlBoard.setStatus("current")
_CtrlCBoard_Type = OptionHw
_CtrlCBoard_Object = MibScalar
ctrlCBoard = _CtrlCBoard_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 20, 2),
    _CtrlCBoard_Type()
)
ctrlCBoard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ctrlCBoard.setStatus("current")
_CtrlMBoard_Type = OptionHw
_CtrlMBoard_Object = MibScalar
ctrlMBoard = _CtrlMBoard_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 20, 3),
    _CtrlMBoard_Type()
)
ctrlMBoard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ctrlMBoard.setStatus("current")
_SignalBoardGf_Type = OptionHw
_SignalBoardGf_Object = MibScalar
signalBoardGf = _SignalBoardGf_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 20, 11),
    _SignalBoardGf_Type()
)
signalBoardGf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    signalBoardGf.setStatus("current")
_SignalBoardTx_Type = OptionHw
_SignalBoardTx_Object = MibScalar
signalBoardTx = _SignalBoardTx_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 20, 12),
    _SignalBoardTx_Type()
)
signalBoardTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    signalBoardTx.setStatus("current")
_ExtraDigitalDacModulator_Type = OptionHw
_ExtraDigitalDacModulator_Object = MibScalar
extraDigitalDacModulator = _ExtraDigitalDacModulator_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 20, 13),
    _ExtraDigitalDacModulator_Type()
)
extraDigitalDacModulator.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    extraDigitalDacModulator.setStatus("current")
_SatelliteBoard_Type = OptionHw
_SatelliteBoard_Object = MibScalar
satelliteBoard = _SatelliteBoard_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 20, 14),
    _SatelliteBoard_Type()
)
satelliteBoard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    satelliteBoard.setStatus("current")
_DabBoard_Type = OptionHw
_DabBoard_Object = MibScalar
dabBoard = _DabBoard_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 20, 15),
    _DabBoard_Type()
)
dabBoard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dabBoard.setStatus("current")
_DabGfBoard_Type = OptionHw
_DabGfBoard_Object = MibScalar
dabGfBoard = _DabGfBoard_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 20, 16),
    _DabGfBoard_Type()
)
dabGfBoard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dabGfBoard.setStatus("current")
_DabEti2_Type = OptionSw
_DabEti2_Object = MibScalar
dabEti2 = _DabEti2_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 20, 17),
    _DabEti2_Type()
)
dabEti2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dabEti2.setStatus("current")
_TerrestialReceiver1Board_Type = OptionHw
_TerrestialReceiver1Board_Object = MibScalar
terrestialReceiver1Board = _TerrestialReceiver1Board_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 20, 21),
    _TerrestialReceiver1Board_Type()
)
terrestialReceiver1Board.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    terrestialReceiver1Board.setStatus("current")
_TerrestialReceiver2Board_Type = OptionHw
_TerrestialReceiver2Board_Object = MibScalar
terrestialReceiver2Board = _TerrestialReceiver2Board_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 20, 22),
    _TerrestialReceiver2Board_Type()
)
terrestialReceiver2Board.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    terrestialReceiver2Board.setStatus("current")
_SatelliteReceiver1Board_Type = OptionHw
_SatelliteReceiver1Board_Object = MibScalar
satelliteReceiver1Board = _SatelliteReceiver1Board_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 20, 23),
    _SatelliteReceiver1Board_Type()
)
satelliteReceiver1Board.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    satelliteReceiver1Board.setStatus("current")
_SatelliteReceiver2Board_Type = OptionHw
_SatelliteReceiver2Board_Object = MibScalar
satelliteReceiver2Board = _SatelliteReceiver2Board_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 20, 24),
    _SatelliteReceiver2Board_Type()
)
satelliteReceiver2Board.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    satelliteReceiver2Board.setStatus("current")
_CtrlBusInterface_Type = OptionHw
_CtrlBusInterface_Object = MibScalar
ctrlBusInterface = _CtrlBusInterface_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 20, 25),
    _CtrlBusInterface_Type()
)
ctrlBusInterface.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ctrlBusInterface.setStatus("current")
_OnePlusOneRedundancy_Type = OptionHw
_OnePlusOneRedundancy_Object = MibScalar
onePlusOneRedundancy = _OnePlusOneRedundancy_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 20, 31),
    _OnePlusOneRedundancy_Type()
)
onePlusOneRedundancy.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    onePlusOneRedundancy.setStatus("current")
_ExternalFeedback_Type = OptionHw
_ExternalFeedback_Object = MibScalar
externalFeedback = _ExternalFeedback_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 20, 41),
    _ExternalFeedback_Type()
)
externalFeedback.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    externalFeedback.setStatus("current")


class _Relay1p1Interface_Type(Integer32):
    """Custom type relay1p1Interface based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(25,
              26,
              254,
              255)
        )
    )
    namedValues = NamedValues(
        *(("db9", 25),
          ("db25", 26),
          ("notConfigured", 254),
          ("error", 255))
    )


_Relay1p1Interface_Type.__name__ = "Integer32"
_Relay1p1Interface_Object = MibScalar
relay1p1Interface = _Relay1p1Interface_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 20, 42),
    _Relay1p1Interface_Type()
)
relay1p1Interface.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    relay1p1Interface.setStatus("current")
_I2o8Interface_Type = OptionHw
_I2o8Interface_Object = MibScalar
i2o8Interface = _I2o8Interface_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 20, 43),
    _I2o8Interface_Type()
)
i2o8Interface.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    i2o8Interface.setStatus("current")
_ExternalInterlock_Type = OptionHw
_ExternalInterlock_Object = MibScalar
externalInterlock = _ExternalInterlock_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 20, 44),
    _ExternalInterlock_Type()
)
externalInterlock.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    externalInterlock.setStatus("current")
_I4o10Interface_Type = OptionHw
_I4o10Interface_Object = MibScalar
i4o10Interface = _I4o10Interface_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 20, 45),
    _I4o10Interface_Type()
)
i4o10Interface.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    i4o10Interface.setStatus("current")
_DcConnector_Type = OptionHw
_DcConnector_Object = MibScalar
dcConnector = _DcConnector_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 20, 46),
    _DcConnector_Type()
)
dcConnector.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcConnector.setStatus("current")
_RfBooster_Type = OptionHw
_RfBooster_Object = MibScalar
rfBooster = _RfBooster_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 20, 47),
    _RfBooster_Type()
)
rfBooster.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rfBooster.setStatus("current")


class _AmplifierHw_Type(Integer32):
    """Custom type amplifierHw based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32)
        )
    )
    namedValues = NamedValues(
        *(("pw1A", 0),
          ("pw1B", 1),
          ("pw1C", 2),
          ("pw1D", 3),
          ("pw1E", 4),
          ("pw2A", 5),
          ("pw2B", 6),
          ("pw2C", 7),
          ("pw2D", 8),
          ("pw2E", 9),
          ("pw3A", 10),
          ("pw3B", 11),
          ("pw3C", 12),
          ("pw3D", 13),
          ("pw3E", 14),
          ("pwEXT", 15),
          ("pwNONE", 16),
          ("pw1F", 17),
          ("pw1G", 18),
          ("pw1H", 19),
          ("pw21", 20),
          ("pw22", 21),
          ("pw23", 22),
          ("pw24", 23),
          ("pw25", 24),
          ("pw26", 25),
          ("pw27", 26),
          ("pw28", 27),
          ("pw29", 28),
          ("pw30", 29),
          ("pw31", 30),
          ("pw32", 31),
          ("error", 32))
    )


_AmplifierHw_Type.__name__ = "Integer32"
_AmplifierHw_Object = MibScalar
amplifierHw = _AmplifierHw_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 20, 50),
    _AmplifierHw_Type()
)
amplifierHw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amplifierHw.setStatus("current")


class _AmplifierHwRevision_Type(Integer32):
    """Custom type amplifierHwRevision based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("ref0", 0),
          ("ref1", 1))
    )


_AmplifierHwRevision_Type.__name__ = "Integer32"
_AmplifierHwRevision_Object = MibScalar
amplifierHwRevision = _AmplifierHwRevision_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 20, 52),
    _AmplifierHwRevision_Type()
)
amplifierHwRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amplifierHwRevision.setStatus("current")
_AmplifierStageInfoTable_Object = MibTable
amplifierStageInfoTable = _AmplifierStageInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 20, 60)
)
if mibBuilder.loadTexts:
    amplifierStageInfoTable.setStatus("current")
_AmplifierStageInfoEntry_Object = MibTableRow
amplifierStageInfoEntry = _AmplifierStageInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 20, 60, 1)
)
amplifierStageInfoEntry.setIndexNames(
    (0, "TREDESS-FS-MIB", "amplifierStageInfoIndex"),
)
if mibBuilder.loadTexts:
    amplifierStageInfoEntry.setStatus("current")


class _AmplifierStageInfoIndex_Type(Unsigned32):
    """Custom type amplifierStageInfoIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_AmplifierStageInfoIndex_Type.__name__ = "Unsigned32"
_AmplifierStageInfoIndex_Object = MibTableColumn
amplifierStageInfoIndex = _AmplifierStageInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 20, 60, 1, 1),
    _AmplifierStageInfoIndex_Type()
)
amplifierStageInfoIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    amplifierStageInfoIndex.setStatus("current")


class _AmplifierStageType_Type(Integer32):
    """Custom type amplifierStageType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("pw4A", 1),
          ("pw4B", 2),
          ("pw4C", 3),
          ("pw4D", 4),
          ("pw4E", 5),
          ("pw4F", 6))
    )


_AmplifierStageType_Type.__name__ = "Integer32"
_AmplifierStageType_Object = MibTableColumn
amplifierStageType = _AmplifierStageType_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 20, 60, 1, 2),
    _AmplifierStageType_Type()
)
amplifierStageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amplifierStageType.setStatus("current")
_AmplifierStageSN_Type = OctetString
_AmplifierStageSN_Object = MibTableColumn
amplifierStageSN = _AmplifierStageSN_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 20, 60, 1, 3),
    _AmplifierStageSN_Type()
)
amplifierStageSN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amplifierStageSN.setStatus("current")
_HardwareOptions_ObjectIdentity = ObjectIdentity
hardwareOptions = _HardwareOptions_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 25)
)
_GnssReceiverHw_Type = OptionHw
_GnssReceiverHw_Object = MibScalar
gnssReceiverHw = _GnssReceiverHw_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 25, 1),
    _GnssReceiverHw_Type()
)
gnssReceiverHw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    gnssReceiverHw.setStatus("current")
_ExternalReferenceHw_Type = OptionHw
_ExternalReferenceHw_Object = MibScalar
externalReferenceHw = _ExternalReferenceHw_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 25, 2),
    _ExternalReferenceHw_Type()
)
externalReferenceHw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    externalReferenceHw.setStatus("current")
_RedundantPsuHw_Type = OptionSw
_RedundantPsuHw_Object = MibScalar
redundantPsuHw = _RedundantPsuHw_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 25, 3),
    _RedundantPsuHw_Type()
)
redundantPsuHw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    redundantPsuHw.setStatus("current")
_OcxoReferenceHw_Type = OptionHw
_OcxoReferenceHw_Object = MibScalar
ocxoReferenceHw = _OcxoReferenceHw_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 25, 4),
    _OcxoReferenceHw_Type()
)
ocxoReferenceHw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocxoReferenceHw.setStatus("current")


class _ReferenceHwSerialNumber_Type(DisplayString):
    """Custom type referenceHwSerialNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(14, 14),
    )
    fixed_length = 14


_ReferenceHwSerialNumber_Type.__name__ = "DisplayString"
_ReferenceHwSerialNumber_Object = MibScalar
referenceHwSerialNumber = _ReferenceHwSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 25, 7),
    _ReferenceHwSerialNumber_Type()
)
referenceHwSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    referenceHwSerialNumber.setStatus("current")
_RackCooling1Hw_Type = OptionHw
_RackCooling1Hw_Object = MibScalar
rackCooling1Hw = _RackCooling1Hw_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 25, 10),
    _RackCooling1Hw_Type()
)
rackCooling1Hw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rackCooling1Hw.setStatus("current")
_RackCooling2Hw_Type = OptionHw
_RackCooling2Hw_Object = MibScalar
rackCooling2Hw = _RackCooling2Hw_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 25, 11),
    _RackCooling2Hw_Type()
)
rackCooling2Hw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rackCooling2Hw.setStatus("current")
_RackCooling3Hw_Type = OptionHw
_RackCooling3Hw_Object = MibScalar
rackCooling3Hw = _RackCooling3Hw_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 25, 12),
    _RackCooling3Hw_Type()
)
rackCooling3Hw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rackCooling3Hw.setStatus("current")
_RackCooling4Hw_Type = OptionHw
_RackCooling4Hw_Object = MibScalar
rackCooling4Hw = _RackCooling4Hw_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 25, 13),
    _RackCooling4Hw_Type()
)
rackCooling4Hw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rackCooling4Hw.setStatus("current")
_Asi1Matrix1Hw_Type = OptionHw
_Asi1Matrix1Hw_Object = MibScalar
asi1Matrix1Hw = _Asi1Matrix1Hw_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 25, 15),
    _Asi1Matrix1Hw_Type()
)
asi1Matrix1Hw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    asi1Matrix1Hw.setStatus("current")
_Asi1Matrix2Hw_Type = OptionHw
_Asi1Matrix2Hw_Object = MibScalar
asi1Matrix2Hw = _Asi1Matrix2Hw_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 25, 16),
    _Asi1Matrix2Hw_Type()
)
asi1Matrix2Hw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    asi1Matrix2Hw.setStatus("current")
_Asi2Matrix1Hw_Type = OptionHw
_Asi2Matrix1Hw_Object = MibScalar
asi2Matrix1Hw = _Asi2Matrix1Hw_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 25, 17),
    _Asi2Matrix1Hw_Type()
)
asi2Matrix1Hw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    asi2Matrix1Hw.setStatus("current")
_Asi2Matrix2Hw_Type = OptionHw
_Asi2Matrix2Hw_Object = MibScalar
asi2Matrix2Hw = _Asi2Matrix2Hw_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 25, 18),
    _Asi2Matrix2Hw_Type()
)
asi2Matrix2Hw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    asi2Matrix2Hw.setStatus("current")
_RackCooling5Hw_Type = OptionHw
_RackCooling5Hw_Object = MibScalar
rackCooling5Hw = _RackCooling5Hw_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 25, 20),
    _RackCooling5Hw_Type()
)
rackCooling5Hw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rackCooling5Hw.setStatus("current")
_RackCooling6Hw_Type = OptionHw
_RackCooling6Hw_Object = MibScalar
rackCooling6Hw = _RackCooling6Hw_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 25, 21),
    _RackCooling6Hw_Type()
)
rackCooling6Hw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rackCooling6Hw.setStatus("current")
_RfMatrix1Hw_Type = OptionHw
_RfMatrix1Hw_Object = MibScalar
rfMatrix1Hw = _RfMatrix1Hw_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 25, 22),
    _RfMatrix1Hw_Type()
)
rfMatrix1Hw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rfMatrix1Hw.setStatus("current")
_RfMatrix2Hw_Type = OptionHw
_RfMatrix2Hw_Object = MibScalar
rfMatrix2Hw = _RfMatrix2Hw_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 25, 23),
    _RfMatrix2Hw_Type()
)
rfMatrix2Hw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rfMatrix2Hw.setStatus("current")
_RackCooling7Hw_Type = OptionHw
_RackCooling7Hw_Object = MibScalar
rackCooling7Hw = _RackCooling7Hw_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 25, 24),
    _RackCooling7Hw_Type()
)
rackCooling7Hw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rackCooling7Hw.setStatus("current")
_Eti1Matrix1Hw_Type = OptionHw
_Eti1Matrix1Hw_Object = MibScalar
eti1Matrix1Hw = _Eti1Matrix1Hw_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 25, 25),
    _Eti1Matrix1Hw_Type()
)
eti1Matrix1Hw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eti1Matrix1Hw.setStatus("current")
_Eti1Matrix2Hw_Type = OptionHw
_Eti1Matrix2Hw_Object = MibScalar
eti1Matrix2Hw = _Eti1Matrix2Hw_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 25, 26),
    _Eti1Matrix2Hw_Type()
)
eti1Matrix2Hw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eti1Matrix2Hw.setStatus("current")
_Eti2Matrix1Hw_Type = OptionHw
_Eti2Matrix1Hw_Object = MibScalar
eti2Matrix1Hw = _Eti2Matrix1Hw_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 25, 27),
    _Eti2Matrix1Hw_Type()
)
eti2Matrix1Hw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eti2Matrix1Hw.setStatus("current")
_Eti2Matrix2Hw_Type = OptionHw
_Eti2Matrix2Hw_Object = MibScalar
eti2Matrix2Hw = _Eti2Matrix2Hw_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 25, 28),
    _Eti2Matrix2Hw_Type()
)
eti2Matrix2Hw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eti2Matrix2Hw.setStatus("current")
_SoftwareOptions_ObjectIdentity = ObjectIdentity
softwareOptions = _SoftwareOptions_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 30)
)
_SnmpSw_Type = OptionSw
_SnmpSw_Object = MibScalar
snmpSw = _SnmpSw_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 30, 1),
    _SnmpSw_Type()
)
snmpSw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    snmpSw.setStatus("current")
_DvbtSw_Type = OptionSw
_DvbtSw_Object = MibScalar
dvbtSw = _DvbtSw_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 30, 2),
    _DvbtSw_Type()
)
dvbtSw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvbtSw.setStatus("current")
_Dvbt2Sw_Type = OptionSw
_Dvbt2Sw_Object = MibScalar
dvbt2Sw = _Dvbt2Sw_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 30, 3),
    _Dvbt2Sw_Type()
)
dvbt2Sw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvbt2Sw.setStatus("current")
_IsdbtSw_Type = OptionSw
_IsdbtSw_Object = MibScalar
isdbtSw = _IsdbtSw_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 30, 4),
    _IsdbtSw_Type()
)
isdbtSw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isdbtSw.setStatus("current")
_DeecSw_Type = OptionSw
_DeecSw_Object = MibScalar
deecSw = _DeecSw_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 30, 5),
    _DeecSw_Type()
)
deecSw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    deecSw.setStatus("current")
_IsdbtRemuxSw_Type = OptionSw
_IsdbtRemuxSw_Object = MibScalar
isdbtRemuxSw = _IsdbtRemuxSw_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 30, 6),
    _IsdbtRemuxSw_Type()
)
isdbtRemuxSw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isdbtRemuxSw.setStatus("current")
_OnePlusOneSw_Type = OptionSw
_OnePlusOneSw_Object = MibScalar
onePlusOneSw = _OnePlusOneSw_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 30, 7),
    _OnePlusOneSw_Type()
)
onePlusOneSw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    onePlusOneSw.setStatus("current")
_DualDriveSw_Type = OptionSw
_DualDriveSw_Object = MibScalar
dualDriveSw = _DualDriveSw_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 30, 8),
    _DualDriveSw_Type()
)
dualDriveSw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dualDriveSw.setStatus("current")
_Atsc1Sw_Type = OptionSw
_Atsc1Sw_Object = MibScalar
atsc1Sw = _Atsc1Sw_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 30, 9),
    _Atsc1Sw_Type()
)
atsc1Sw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsc1Sw.setStatus("current")
_DabSw_Type = OptionSw
_DabSw_Object = MibScalar
dabSw = _DabSw_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 30, 10),
    _DabSw_Type()
)
dabSw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dabSw.setStatus("current")
_UnlimitedPowerSw_Type = OptionSw
_UnlimitedPowerSw_Object = MibScalar
unlimitedPowerSw = _UnlimitedPowerSw_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 30, 11),
    _UnlimitedPowerSw_Type()
)
unlimitedPowerSw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    unlimitedPowerSw.setStatus("current")
_MonitoringSw_Type = OptionSw
_MonitoringSw_Object = MibScalar
monitoringSw = _MonitoringSw_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 30, 12),
    _MonitoringSw_Type()
)
monitoringSw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    monitoringSw.setStatus("current")
_Np1Sw_Type = OptionSw
_Np1Sw_Object = MibScalar
np1Sw = _Np1Sw_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 30, 13),
    _Np1Sw_Type()
)
np1Sw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    np1Sw.setStatus("current")
_BissDecription_Type = OptionSw
_BissDecription_Object = MibScalar
bissDecription = _BissDecription_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 30, 14),
    _BissDecription_Type()
)
bissDecription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bissDecription.setStatus("current")
_BtsDecompressionRma_Type = OptionSw
_BtsDecompressionRma_Object = MibScalar
btsDecompressionRma = _BtsDecompressionRma_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 6, 30, 15),
    _BtsDecompressionRma_Type()
)
btsDecompressionRma.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    btsDecompressionRma.setStatus("current")
_Service_ObjectIdentity = ObjectIdentity
service = _Service_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7)
)
_ServiceReset_ObjectIdentity = ObjectIdentity
serviceReset = _ServiceReset_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 1)
)
_SystemReset_Type = NullApply
_SystemReset_Object = MibScalar
systemReset = _SystemReset_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 1, 1),
    _SystemReset_Type()
)
systemReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemReset.setStatus("current")
_RfReset_Type = NullApply
_RfReset_Object = MibScalar
rfReset = _RfReset_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 1, 2),
    _RfReset_Type()
)
rfReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rfReset.setStatus("current")
_ServiceSystemCalibration_ObjectIdentity = ObjectIdentity
serviceSystemCalibration = _ServiceSystemCalibration_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 5)
)
_InputCalibration_ObjectIdentity = ObjectIdentity
inputCalibration = _InputCalibration_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 5, 1)
)


class _InputStatusCalibration_Type(Integer32):
    """Custom type inputStatusCalibration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("noCalibrated", 0),
          ("recalibratedChannel", 1))
    )


_InputStatusCalibration_Type.__name__ = "Integer32"
_InputStatusCalibration_Object = MibScalar
inputStatusCalibration = _InputStatusCalibration_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 5, 1, 1),
    _InputStatusCalibration_Type()
)
inputStatusCalibration.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    inputStatusCalibration.setStatus("current")
_CancelInputCalibration_Type = NullApply
_CancelInputCalibration_Object = MibScalar
cancelInputCalibration = _CancelInputCalibration_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 5, 1, 2),
    _CancelInputCalibration_Type()
)
cancelInputCalibration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cancelInputCalibration.setStatus("obsolete")


class _InputLevelMeasureCalibration_Type(Integer32):
    """Custom type inputLevelMeasureCalibration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-85, -15),
    )


_InputLevelMeasureCalibration_Type.__name__ = "Integer32"
_InputLevelMeasureCalibration_Object = MibScalar
inputLevelMeasureCalibration = _InputLevelMeasureCalibration_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 5, 1, 3),
    _InputLevelMeasureCalibration_Type()
)
inputLevelMeasureCalibration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    inputLevelMeasureCalibration.setStatus("current")
if mibBuilder.loadTexts:
    inputLevelMeasureCalibration.setUnits("dBm")
_PowerCalibration_ObjectIdentity = ObjectIdentity
powerCalibration = _PowerCalibration_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 5, 5)
)


class _PowerStatusCalibration_Type(Integer32):
    """Custom type powerStatusCalibration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("noCalibrated", 0),
          ("recalibratedChannel", 1))
    )


_PowerStatusCalibration_Type.__name__ = "Integer32"
_PowerStatusCalibration_Object = MibScalar
powerStatusCalibration = _PowerStatusCalibration_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 5, 5, 1),
    _PowerStatusCalibration_Type()
)
powerStatusCalibration.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerStatusCalibration.setStatus("current")


class _PowerLevelMeasureCalibration_Type(OctetString):
    """Custom type powerLevelMeasureCalibration based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 5),
    )


_PowerLevelMeasureCalibration_Type.__name__ = "OctetString"
_PowerLevelMeasureCalibration_Object = MibScalar
powerLevelMeasureCalibration = _PowerLevelMeasureCalibration_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 5, 5, 3),
    _PowerLevelMeasureCalibration_Type()
)
powerLevelMeasureCalibration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    powerLevelMeasureCalibration.setStatus("current")
if mibBuilder.loadTexts:
    powerLevelMeasureCalibration.setUnits("dBm")
_PhaseRf_ObjectIdentity = ObjectIdentity
phaseRf = _PhaseRf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 5, 7)
)
_AutomaticRfPhaseAdjustment_Type = NullApply
_AutomaticRfPhaseAdjustment_Object = MibScalar
automaticRfPhaseAdjustment = _AutomaticRfPhaseAdjustment_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 5, 7, 5),
    _AutomaticRfPhaseAdjustment_Type()
)
automaticRfPhaseAdjustment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    automaticRfPhaseAdjustment.setStatus("current")
_LinearPrecorrection_ObjectIdentity = ObjectIdentity
linearPrecorrection = _LinearPrecorrection_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 5, 9)
)


class _LinearStatusPrecorrection_Type(Integer32):
    """Custom type linearStatusPrecorrection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noCalibrated", 0),
          ("calibratedBeforeBPF", 1),
          ("calibratedAfterBPF", 2))
    )


_LinearStatusPrecorrection_Type.__name__ = "Integer32"
_LinearStatusPrecorrection_Object = MibScalar
linearStatusPrecorrection = _LinearStatusPrecorrection_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 5, 9, 1),
    _LinearStatusPrecorrection_Type()
)
linearStatusPrecorrection.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    linearStatusPrecorrection.setStatus("current")
_StartLinearPrecorrectionBBPF_Type = NullApply
_StartLinearPrecorrectionBBPF_Object = MibScalar
startLinearPrecorrectionBBPF = _StartLinearPrecorrectionBBPF_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 5, 9, 2),
    _StartLinearPrecorrectionBBPF_Type()
)
startLinearPrecorrectionBBPF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    startLinearPrecorrectionBBPF.setStatus("current")
_StartLinearPrecorrectionABPF_Type = NullApply
_StartLinearPrecorrectionABPF_Object = MibScalar
startLinearPrecorrectionABPF = _StartLinearPrecorrectionABPF_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 5, 9, 3),
    _StartLinearPrecorrectionABPF_Type()
)
startLinearPrecorrectionABPF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    startLinearPrecorrectionABPF.setStatus("current")
_NonLinearPrecorrection_ObjectIdentity = ObjectIdentity
nonLinearPrecorrection = _NonLinearPrecorrection_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 5, 10)
)


class _NonLinearStatusPrecorrection_Type(Integer32):
    """Custom type nonLinearStatusPrecorrection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("noCalibrated", 0),
          ("recalibratedChannel", 1))
    )


_NonLinearStatusPrecorrection_Type.__name__ = "Integer32"
_NonLinearStatusPrecorrection_Object = MibScalar
nonLinearStatusPrecorrection = _NonLinearStatusPrecorrection_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 5, 10, 1),
    _NonLinearStatusPrecorrection_Type()
)
nonLinearStatusPrecorrection.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nonLinearStatusPrecorrection.setStatus("current")
_CancelNonLinearPrecorrection_Type = NullApply
_CancelNonLinearPrecorrection_Object = MibScalar
cancelNonLinearPrecorrection = _CancelNonLinearPrecorrection_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 5, 10, 2),
    _CancelNonLinearPrecorrection_Type()
)
cancelNonLinearPrecorrection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cancelNonLinearPrecorrection.setStatus("current")
_StartNonLinearPrecorrection_Type = NullApply
_StartNonLinearPrecorrection_Object = MibScalar
startNonLinearPrecorrection = _StartNonLinearPrecorrection_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 5, 10, 3),
    _StartNonLinearPrecorrection_Type()
)
startNonLinearPrecorrection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    startNonLinearPrecorrection.setStatus("current")
_EfficiencyCalibration_ObjectIdentity = ObjectIdentity
efficiencyCalibration = _EfficiencyCalibration_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 5, 15)
)
_AcApparentPower_Type = DisplayString
_AcApparentPower_Object = MibScalar
acApparentPower = _AcApparentPower_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 5, 15, 5),
    _AcApparentPower_Type()
)
acApparentPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acApparentPower.setStatus("current")
if mibBuilder.loadTexts:
    acApparentPower.setUnits("VA")
_AcEfficiency_Type = DisplayString
_AcEfficiency_Object = MibScalar
acEfficiency = _AcEfficiency_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 5, 15, 6),
    _AcEfficiency_Type()
)
acEfficiency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acEfficiency.setStatus("current")
if mibBuilder.loadTexts:
    acEfficiency.setUnits("%")
_EfficiencyImprovement_ObjectIdentity = ObjectIdentity
efficiencyImprovement = _EfficiencyImprovement_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 5, 15, 20)
)


class _EfficiencyStatusCalibration_Type(Integer32):
    """Custom type efficiencyStatusCalibration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("noCalibrated", 0),
          ("recalibratedChannel", 1))
    )


_EfficiencyStatusCalibration_Type.__name__ = "Integer32"
_EfficiencyStatusCalibration_Object = MibScalar
efficiencyStatusCalibration = _EfficiencyStatusCalibration_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 5, 15, 20, 1),
    _EfficiencyStatusCalibration_Type()
)
efficiencyStatusCalibration.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    efficiencyStatusCalibration.setStatus("current")
_CancelEfficiencyCalibration_Type = NullApply
_CancelEfficiencyCalibration_Object = MibScalar
cancelEfficiencyCalibration = _CancelEfficiencyCalibration_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 5, 15, 20, 2),
    _CancelEfficiencyCalibration_Type()
)
cancelEfficiencyCalibration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cancelEfficiencyCalibration.setStatus("current")


class _EfficiencyShoulderMeasure_Type(OctetString):
    """Custom type efficiencyShoulderMeasure based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 4),
    )


_EfficiencyShoulderMeasure_Type.__name__ = "OctetString"
_EfficiencyShoulderMeasure_Object = MibScalar
efficiencyShoulderMeasure = _EfficiencyShoulderMeasure_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 5, 15, 20, 4),
    _EfficiencyShoulderMeasure_Type()
)
efficiencyShoulderMeasure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    efficiencyShoulderMeasure.setStatus("current")
if mibBuilder.loadTexts:
    efficiencyShoulderMeasure.setUnits("dB")


class _EfficiencyShoulderTarget_Type(OctetString):
    """Custom type efficiencyShoulderTarget based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 4),
    )


_EfficiencyShoulderTarget_Type.__name__ = "OctetString"
_EfficiencyShoulderTarget_Object = MibScalar
efficiencyShoulderTarget = _EfficiencyShoulderTarget_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 5, 15, 20, 5),
    _EfficiencyShoulderTarget_Type()
)
efficiencyShoulderTarget.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    efficiencyShoulderTarget.setStatus("current")
if mibBuilder.loadTexts:
    efficiencyShoulderTarget.setUnits("dB")


class _EfficiencyMerMeasure_Type(OctetString):
    """Custom type efficiencyMerMeasure based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 4),
    )


_EfficiencyMerMeasure_Type.__name__ = "OctetString"
_EfficiencyMerMeasure_Object = MibScalar
efficiencyMerMeasure = _EfficiencyMerMeasure_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 5, 15, 20, 7),
    _EfficiencyMerMeasure_Type()
)
efficiencyMerMeasure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    efficiencyMerMeasure.setStatus("current")
if mibBuilder.loadTexts:
    efficiencyMerMeasure.setUnits("dB")


class _EfficiencyMerTarget_Type(OctetString):
    """Custom type efficiencyMerTarget based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 4),
    )


_EfficiencyMerTarget_Type.__name__ = "OctetString"
_EfficiencyMerTarget_Object = MibScalar
efficiencyMerTarget = _EfficiencyMerTarget_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 5, 15, 20, 8),
    _EfficiencyMerTarget_Type()
)
efficiencyMerTarget.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    efficiencyMerTarget.setStatus("current")
if mibBuilder.loadTexts:
    efficiencyMerTarget.setUnits("dB")
_ServiceCooling_ObjectIdentity = ObjectIdentity
serviceCooling = _ServiceCooling_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10)
)
_Fan01_ObjectIdentity = ObjectIdentity
fan01 = _Fan01_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 1)
)


class _Fan01Status_Type(Integer32):
    """Custom type fan01Status based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("standBy", 0),
          ("running", 1),
          ("failed", 2))
    )


_Fan01Status_Type.__name__ = "Integer32"
_Fan01Status_Object = MibScalar
fan01Status = _Fan01Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 1, 1),
    _Fan01Status_Type()
)
fan01Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fan01Status.setStatus("current")
_Fan01OperatingTime_Type = Unsigned32
_Fan01OperatingTime_Object = MibScalar
fan01OperatingTime = _Fan01OperatingTime_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 1, 2),
    _Fan01OperatingTime_Type()
)
fan01OperatingTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fan01OperatingTime.setStatus("current")
if mibBuilder.loadTexts:
    fan01OperatingTime.setUnits("Hours")
_Fan01Reset_Type = NullApply
_Fan01Reset_Object = MibScalar
fan01Reset = _Fan01Reset_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 1, 3),
    _Fan01Reset_Type()
)
fan01Reset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fan01Reset.setStatus("current")
_Fan02_ObjectIdentity = ObjectIdentity
fan02 = _Fan02_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 2)
)


class _Fan02Status_Type(Integer32):
    """Custom type fan02Status based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("standBy", 0),
          ("running", 1),
          ("failed", 2))
    )


_Fan02Status_Type.__name__ = "Integer32"
_Fan02Status_Object = MibScalar
fan02Status = _Fan02Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 2, 1),
    _Fan02Status_Type()
)
fan02Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fan02Status.setStatus("current")
_Fan02OperatingTime_Type = Unsigned32
_Fan02OperatingTime_Object = MibScalar
fan02OperatingTime = _Fan02OperatingTime_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 2, 2),
    _Fan02OperatingTime_Type()
)
fan02OperatingTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fan02OperatingTime.setStatus("current")
if mibBuilder.loadTexts:
    fan02OperatingTime.setUnits("Hours")
_Fan02Reset_Type = NullApply
_Fan02Reset_Object = MibScalar
fan02Reset = _Fan02Reset_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 2, 3),
    _Fan02Reset_Type()
)
fan02Reset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fan02Reset.setStatus("current")
_Fan03_ObjectIdentity = ObjectIdentity
fan03 = _Fan03_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 3)
)


class _Fan03Status_Type(Integer32):
    """Custom type fan03Status based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("standBy", 0),
          ("running", 1),
          ("failed", 2))
    )


_Fan03Status_Type.__name__ = "Integer32"
_Fan03Status_Object = MibScalar
fan03Status = _Fan03Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 3, 1),
    _Fan03Status_Type()
)
fan03Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fan03Status.setStatus("current")
_Fan03OperatingTime_Type = Unsigned32
_Fan03OperatingTime_Object = MibScalar
fan03OperatingTime = _Fan03OperatingTime_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 3, 2),
    _Fan03OperatingTime_Type()
)
fan03OperatingTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fan03OperatingTime.setStatus("current")
if mibBuilder.loadTexts:
    fan03OperatingTime.setUnits("Hours")
_Fan03Reset_Type = NullApply
_Fan03Reset_Object = MibScalar
fan03Reset = _Fan03Reset_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 3, 3),
    _Fan03Reset_Type()
)
fan03Reset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fan03Reset.setStatus("current")
_FanSpeed_Type = DisplayString
_FanSpeed_Object = MibScalar
fanSpeed = _FanSpeed_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 10),
    _FanSpeed_Type()
)
fanSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fanSpeed.setStatus("current")
if mibBuilder.loadTexts:
    fanSpeed.setUnits("% percent")
_ExternalAmplifierCooling_ObjectIdentity = ObjectIdentity
externalAmplifierCooling = _ExternalAmplifierCooling_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 20)
)
_ExternalAmplifierCoolingTable_Object = MibTable
externalAmplifierCoolingTable = _ExternalAmplifierCoolingTable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 20, 1)
)
if mibBuilder.loadTexts:
    externalAmplifierCoolingTable.setStatus("current")
_ExternalAmplifierCoolingEntry_Object = MibTableRow
externalAmplifierCoolingEntry = _ExternalAmplifierCoolingEntry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 20, 1, 1)
)
externalAmplifierCoolingEntry.setIndexNames(
    (0, "TREDESS-FS-MIB", "externalAmplifierCoolingIndex"),
)
if mibBuilder.loadTexts:
    externalAmplifierCoolingEntry.setStatus("current")


class _ExternalAmplifierCoolingIndex_Type(Unsigned32):
    """Custom type externalAmplifierCoolingIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_ExternalAmplifierCoolingIndex_Type.__name__ = "Unsigned32"
_ExternalAmplifierCoolingIndex_Object = MibTableColumn
externalAmplifierCoolingIndex = _ExternalAmplifierCoolingIndex_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 20, 1, 1, 1),
    _ExternalAmplifierCoolingIndex_Type()
)
externalAmplifierCoolingIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    externalAmplifierCoolingIndex.setStatus("current")
_AmStFanSpeed_Type = DisplayString
_AmStFanSpeed_Object = MibTableColumn
amStFanSpeed = _AmStFanSpeed_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 20, 1, 1, 2),
    _AmStFanSpeed_Type()
)
amStFanSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amStFanSpeed.setStatus("current")
_AmStFan1OperatingTime_Type = Unsigned32
_AmStFan1OperatingTime_Object = MibTableColumn
amStFan1OperatingTime = _AmStFan1OperatingTime_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 20, 1, 1, 3),
    _AmStFan1OperatingTime_Type()
)
amStFan1OperatingTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amStFan1OperatingTime.setStatus("current")
if mibBuilder.loadTexts:
    amStFan1OperatingTime.setUnits("hours")
_AmStFan2OperatingTime_Type = Unsigned32
_AmStFan2OperatingTime_Object = MibTableColumn
amStFan2OperatingTime = _AmStFan2OperatingTime_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 20, 1, 1, 4),
    _AmStFan2OperatingTime_Type()
)
amStFan2OperatingTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amStFan2OperatingTime.setStatus("current")
if mibBuilder.loadTexts:
    amStFan2OperatingTime.setUnits("hours")
_AmStFan1rpm_Type = Unsigned32
_AmStFan1rpm_Object = MibTableColumn
amStFan1rpm = _AmStFan1rpm_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 20, 1, 1, 5),
    _AmStFan1rpm_Type()
)
amStFan1rpm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amStFan1rpm.setStatus("current")
if mibBuilder.loadTexts:
    amStFan1rpm.setUnits("rpm")
_AmStFan2rpm_Type = Unsigned32
_AmStFan2rpm_Object = MibTableColumn
amStFan2rpm = _AmStFan2rpm_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 20, 1, 1, 6),
    _AmStFan2rpm_Type()
)
amStFan2rpm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amStFan2rpm.setStatus("current")
if mibBuilder.loadTexts:
    amStFan2rpm.setUnits("rpm")
_RackCooling_ObjectIdentity = ObjectIdentity
rackCooling = _RackCooling_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 30)
)
_RackCoolingTable_Object = MibTable
rackCoolingTable = _RackCoolingTable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 30, 1)
)
if mibBuilder.loadTexts:
    rackCoolingTable.setStatus("current")
_RackCoolingEntry_Object = MibTableRow
rackCoolingEntry = _RackCoolingEntry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 30, 1, 1)
)
rackCoolingEntry.setIndexNames(
    (0, "TREDESS-FS-MIB", "rcIndex"),
)
if mibBuilder.loadTexts:
    rackCoolingEntry.setStatus("current")


class _RcIndex_Type(Unsigned32):
    """Custom type rcIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 7),
    )


_RcIndex_Type.__name__ = "Unsigned32"
_RcIndex_Object = MibTableColumn
rcIndex = _RcIndex_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 30, 1, 1, 1),
    _RcIndex_Type()
)
rcIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rcIndex.setStatus("current")


class _RcTag_Type(DisplayString):
    """Custom type rcTag based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 31),
    )


_RcTag_Type.__name__ = "DisplayString"
_RcTag_Object = MibTableColumn
rcTag = _RcTag_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 30, 1, 1, 2),
    _RcTag_Type()
)
rcTag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcTag.setStatus("current")


class _RcControlStatus_Type(Integer32):
    """Custom type rcControlStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("communicationError", 0),
          ("ok", 1),
          ("errorSwVersion", 2),
          ("errorNoSwVersion", 3),
          ("errorNoAddress", 4),
          ("errorCollision", 5))
    )


_RcControlStatus_Type.__name__ = "Integer32"
_RcControlStatus_Object = MibTableColumn
rcControlStatus = _RcControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 30, 1, 1, 3),
    _RcControlStatus_Type()
)
rcControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcControlStatus.setStatus("current")
_RcHwStatus_Type = DisplayString
_RcHwStatus_Object = MibTableColumn
rcHwStatus = _RcHwStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 30, 1, 1, 4),
    _RcHwStatus_Type()
)
rcHwStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcHwStatus.setStatus("current")


class _RcCoolingMode_Type(Integer32):
    """Custom type rcCoolingMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("temperatue", 0),
          ("pressure", 1),
          ("manual", 2))
    )


_RcCoolingMode_Type.__name__ = "Integer32"
_RcCoolingMode_Object = MibTableColumn
rcCoolingMode = _RcCoolingMode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 30, 1, 1, 5),
    _RcCoolingMode_Type()
)
rcCoolingMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcCoolingMode.setStatus("current")
_RcFan1_Type = DisabledEnabled
_RcFan1_Object = MibTableColumn
rcFan1 = _RcFan1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 30, 1, 1, 6),
    _RcFan1_Type()
)
rcFan1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcFan1.setStatus("current")
_RcFan2_Type = DisabledEnabled
_RcFan2_Object = MibTableColumn
rcFan2 = _RcFan2_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 30, 1, 1, 7),
    _RcFan2_Type()
)
rcFan2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcFan2.setStatus("current")
_RcTemperature_Type = FloatingPoint
_RcTemperature_Object = MibTableColumn
rcTemperature = _RcTemperature_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 30, 1, 1, 8),
    _RcTemperature_Type()
)
rcTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcTemperature.setStatus("current")


class _RcTemperatureTarget_Type(Unsigned32):
    """Custom type rcTemperatureTarget based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_RcTemperatureTarget_Type.__name__ = "Unsigned32"
_RcTemperatureTarget_Object = MibTableColumn
rcTemperatureTarget = _RcTemperatureTarget_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 30, 1, 1, 9),
    _RcTemperatureTarget_Type()
)
rcTemperatureTarget.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcTemperatureTarget.setStatus("current")
_RcFan1SpeedManual_Type = FloatingPoint
_RcFan1SpeedManual_Object = MibTableColumn
rcFan1SpeedManual = _RcFan1SpeedManual_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 30, 1, 1, 10),
    _RcFan1SpeedManual_Type()
)
rcFan1SpeedManual.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcFan1SpeedManual.setStatus("current")
if mibBuilder.loadTexts:
    rcFan1SpeedManual.setUnits("%")
_RcFan2SpeedManual_Type = FloatingPoint
_RcFan2SpeedManual_Object = MibTableColumn
rcFan2SpeedManual = _RcFan2SpeedManual_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 30, 1, 1, 11),
    _RcFan2SpeedManual_Type()
)
rcFan2SpeedManual.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcFan2SpeedManual.setStatus("current")
if mibBuilder.loadTexts:
    rcFan2SpeedManual.setUnits("%")
_RcFan1Speed_Type = FloatingPoint
_RcFan1Speed_Object = MibTableColumn
rcFan1Speed = _RcFan1Speed_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 30, 1, 1, 12),
    _RcFan1Speed_Type()
)
rcFan1Speed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcFan1Speed.setStatus("current")
if mibBuilder.loadTexts:
    rcFan1Speed.setUnits("%")
_RcFan1Tachometer_Type = Unsigned32
_RcFan1Tachometer_Object = MibTableColumn
rcFan1Tachometer = _RcFan1Tachometer_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 30, 1, 1, 13),
    _RcFan1Tachometer_Type()
)
rcFan1Tachometer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcFan1Tachometer.setStatus("current")
if mibBuilder.loadTexts:
    rcFan1Tachometer.setUnits("rpm")
_RcFan1OperatingTime_Type = Unsigned32
_RcFan1OperatingTime_Object = MibTableColumn
rcFan1OperatingTime = _RcFan1OperatingTime_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 30, 1, 1, 14),
    _RcFan1OperatingTime_Type()
)
rcFan1OperatingTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcFan1OperatingTime.setStatus("current")
if mibBuilder.loadTexts:
    rcFan1OperatingTime.setUnits("h")
_RcFan1Reset_Type = NullApply
_RcFan1Reset_Object = MibTableColumn
rcFan1Reset = _RcFan1Reset_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 30, 1, 1, 15),
    _RcFan1Reset_Type()
)
rcFan1Reset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcFan1Reset.setStatus("current")
_RcFan2Speed_Type = FloatingPoint
_RcFan2Speed_Object = MibTableColumn
rcFan2Speed = _RcFan2Speed_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 30, 1, 1, 16),
    _RcFan2Speed_Type()
)
rcFan2Speed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcFan2Speed.setStatus("current")
if mibBuilder.loadTexts:
    rcFan2Speed.setUnits("%")
_RcFan2Tachometer_Type = Unsigned32
_RcFan2Tachometer_Object = MibTableColumn
rcFan2Tachometer = _RcFan2Tachometer_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 30, 1, 1, 17),
    _RcFan2Tachometer_Type()
)
rcFan2Tachometer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcFan2Tachometer.setStatus("current")
if mibBuilder.loadTexts:
    rcFan2Tachometer.setUnits("rpm")
_RcFan2OperatingTime_Type = Unsigned32
_RcFan2OperatingTime_Object = MibTableColumn
rcFan2OperatingTime = _RcFan2OperatingTime_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 30, 1, 1, 18),
    _RcFan2OperatingTime_Type()
)
rcFan2OperatingTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcFan2OperatingTime.setStatus("current")
if mibBuilder.loadTexts:
    rcFan2OperatingTime.setUnits("h")
_RcFan2Reset_Type = NullApply
_RcFan2Reset_Object = MibTableColumn
rcFan2Reset = _RcFan2Reset_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 30, 1, 1, 19),
    _RcFan2Reset_Type()
)
rcFan2Reset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcFan2Reset.setStatus("current")
_RcIdentifyBoard_Type = NullApply
_RcIdentifyBoard_Object = MibTableColumn
rcIdentifyBoard = _RcIdentifyBoard_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 30, 1, 1, 20),
    _RcIdentifyBoard_Type()
)
rcIdentifyBoard.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rcIdentifyBoard.setStatus("current")
_RcExternalSensor1_Type = OpenClose
_RcExternalSensor1_Object = MibTableColumn
rcExternalSensor1 = _RcExternalSensor1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 30, 1, 1, 21),
    _RcExternalSensor1_Type()
)
rcExternalSensor1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcExternalSensor1.setStatus("current")
_RcExternalSensor2_Type = OpenClose
_RcExternalSensor2_Object = MibTableColumn
rcExternalSensor2 = _RcExternalSensor2_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 10, 30, 1, 1, 22),
    _RcExternalSensor2_Type()
)
rcExternalSensor2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcExternalSensor2.setStatus("current")
_ServicePowerSupply_ObjectIdentity = ObjectIdentity
servicePowerSupply = _ServicePowerSupply_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 15)
)
_DcLine1Voltage_Type = DisplayString
_DcLine1Voltage_Object = MibScalar
dcLine1Voltage = _DcLine1Voltage_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 15, 1),
    _DcLine1Voltage_Type()
)
dcLine1Voltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcLine1Voltage.setStatus("current")
if mibBuilder.loadTexts:
    dcLine1Voltage.setUnits("V")
_DcLine2Voltage_Type = DisplayString
_DcLine2Voltage_Object = MibScalar
dcLine2Voltage = _DcLine2Voltage_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 15, 2),
    _DcLine2Voltage_Type()
)
dcLine2Voltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcLine2Voltage.setStatus("current")
if mibBuilder.loadTexts:
    dcLine2Voltage.setUnits("V")
_DcLine3Voltage_Type = DisplayString
_DcLine3Voltage_Object = MibScalar
dcLine3Voltage = _DcLine3Voltage_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 15, 3),
    _DcLine3Voltage_Type()
)
dcLine3Voltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcLine3Voltage.setStatus("current")
if mibBuilder.loadTexts:
    dcLine3Voltage.setUnits("V")
_DcLine4Voltage_Type = DisplayString
_DcLine4Voltage_Object = MibScalar
dcLine4Voltage = _DcLine4Voltage_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 15, 4),
    _DcLine4Voltage_Type()
)
dcLine4Voltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcLine4Voltage.setStatus("current")
if mibBuilder.loadTexts:
    dcLine4Voltage.setUnits("V")
_DcInVoltage_Type = DisplayString
_DcInVoltage_Object = MibScalar
dcInVoltage = _DcInVoltage_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 15, 7),
    _DcInVoltage_Type()
)
dcInVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcInVoltage.setStatus("current")
if mibBuilder.loadTexts:
    dcInVoltage.setUnits("V")
_PsuA_ObjectIdentity = ObjectIdentity
psuA = _PsuA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 15, 10)
)
_PsuAstatus_Type = DisplayString
_PsuAstatus_Object = MibScalar
psuAstatus = _PsuAstatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 15, 10, 1),
    _PsuAstatus_Type()
)
psuAstatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    psuAstatus.setStatus("current")
_PsuAacInputVoltage_Type = DisplayString
_PsuAacInputVoltage_Object = MibScalar
psuAacInputVoltage = _PsuAacInputVoltage_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 15, 10, 2),
    _PsuAacInputVoltage_Type()
)
psuAacInputVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    psuAacInputVoltage.setStatus("current")
if mibBuilder.loadTexts:
    psuAacInputVoltage.setUnits("V")
_PsuAdcOutputVoltage_Type = DisplayString
_PsuAdcOutputVoltage_Object = MibScalar
psuAdcOutputVoltage = _PsuAdcOutputVoltage_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 15, 10, 3),
    _PsuAdcOutputVoltage_Type()
)
psuAdcOutputVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    psuAdcOutputVoltage.setStatus("current")
if mibBuilder.loadTexts:
    psuAdcOutputVoltage.setUnits("V")
_PsuAtemperature_Type = DisplayString
_PsuAtemperature_Object = MibScalar
psuAtemperature = _PsuAtemperature_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 15, 10, 4),
    _PsuAtemperature_Type()
)
psuAtemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    psuAtemperature.setStatus("current")
if mibBuilder.loadTexts:
    psuAtemperature.setUnits("Celsius")
_PsuB_ObjectIdentity = ObjectIdentity
psuB = _PsuB_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 15, 11)
)
_PsuBstatus_Type = DisplayString
_PsuBstatus_Object = MibScalar
psuBstatus = _PsuBstatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 15, 11, 1),
    _PsuBstatus_Type()
)
psuBstatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    psuBstatus.setStatus("current")
_PsuBacInputVoltage_Type = DisplayString
_PsuBacInputVoltage_Object = MibScalar
psuBacInputVoltage = _PsuBacInputVoltage_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 15, 11, 2),
    _PsuBacInputVoltage_Type()
)
psuBacInputVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    psuBacInputVoltage.setStatus("current")
if mibBuilder.loadTexts:
    psuBacInputVoltage.setUnits("V")
_PsuBdcOutputVoltage_Type = DisplayString
_PsuBdcOutputVoltage_Object = MibScalar
psuBdcOutputVoltage = _PsuBdcOutputVoltage_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 15, 11, 3),
    _PsuBdcOutputVoltage_Type()
)
psuBdcOutputVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    psuBdcOutputVoltage.setStatus("current")
if mibBuilder.loadTexts:
    psuBdcOutputVoltage.setUnits("V")
_PsuBtemperature_Type = DisplayString
_PsuBtemperature_Object = MibScalar
psuBtemperature = _PsuBtemperature_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 15, 11, 4),
    _PsuBtemperature_Type()
)
psuBtemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    psuBtemperature.setStatus("current")
if mibBuilder.loadTexts:
    psuBtemperature.setUnits("Celsius")
_ExternalAmplifierPS_ObjectIdentity = ObjectIdentity
externalAmplifierPS = _ExternalAmplifierPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 15, 20)
)
_ExternalAmplifierPSTable_Object = MibTable
externalAmplifierPSTable = _ExternalAmplifierPSTable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 15, 20, 1)
)
if mibBuilder.loadTexts:
    externalAmplifierPSTable.setStatus("current")
_ExternalAmplifierPSEntry_Object = MibTableRow
externalAmplifierPSEntry = _ExternalAmplifierPSEntry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 15, 20, 1, 1)
)
externalAmplifierPSEntry.setIndexNames(
    (0, "TREDESS-FS-MIB", "externalAmplifierPSIndex"),
)
if mibBuilder.loadTexts:
    externalAmplifierPSEntry.setStatus("current")


class _ExternalAmplifierPSIndex_Type(Unsigned32):
    """Custom type externalAmplifierPSIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_ExternalAmplifierPSIndex_Type.__name__ = "Unsigned32"
_ExternalAmplifierPSIndex_Object = MibTableColumn
externalAmplifierPSIndex = _ExternalAmplifierPSIndex_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 15, 20, 1, 1, 1),
    _ExternalAmplifierPSIndex_Type()
)
externalAmplifierPSIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    externalAmplifierPSIndex.setStatus("current")
_AmStDcLineVoltage1_Type = DisplayString
_AmStDcLineVoltage1_Object = MibTableColumn
amStDcLineVoltage1 = _AmStDcLineVoltage1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 15, 20, 1, 1, 2),
    _AmStDcLineVoltage1_Type()
)
amStDcLineVoltage1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amStDcLineVoltage1.setStatus("current")
_AmStDcLineVoltage2_Type = DisplayString
_AmStDcLineVoltage2_Object = MibTableColumn
amStDcLineVoltage2 = _AmStDcLineVoltage2_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 15, 20, 1, 1, 3),
    _AmStDcLineVoltage2_Type()
)
amStDcLineVoltage2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amStDcLineVoltage2.setStatus("current")
_AmStPsuAStatus_Type = DisplayString
_AmStPsuAStatus_Object = MibTableColumn
amStPsuAStatus = _AmStPsuAStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 15, 20, 1, 1, 4),
    _AmStPsuAStatus_Type()
)
amStPsuAStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amStPsuAStatus.setStatus("current")
_AmStPsuBStatus_Type = DisplayString
_AmStPsuBStatus_Object = MibTableColumn
amStPsuBStatus = _AmStPsuBStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 15, 20, 1, 1, 5),
    _AmStPsuBStatus_Type()
)
amStPsuBStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amStPsuBStatus.setStatus("current")
_AmStPsuCStatus_Type = DisplayString
_AmStPsuCStatus_Object = MibTableColumn
amStPsuCStatus = _AmStPsuCStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 15, 20, 1, 1, 6),
    _AmStPsuCStatus_Type()
)
amStPsuCStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amStPsuCStatus.setStatus("current")
_ServiceSwUpgrade_ObjectIdentity = ObjectIdentity
serviceSwUpgrade = _ServiceSwUpgrade_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 20)
)


class _ServiceSwUpgradeMode_Type(Integer32):
    """Custom type serviceSwUpgradeMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("manual", 0),
          ("autoCheck", 1),
          ("autoDownload", 2),
          ("autoUpgrade", 3))
    )


_ServiceSwUpgradeMode_Type.__name__ = "Integer32"
_ServiceSwUpgradeMode_Object = MibScalar
serviceSwUpgradeMode = _ServiceSwUpgradeMode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 20, 5),
    _ServiceSwUpgradeMode_Type()
)
serviceSwUpgradeMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceSwUpgradeMode.setStatus("current")


class _ServiceSwUpgradeServer_Type(DisplayString):
    """Custom type serviceSwUpgradeServer based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_ServiceSwUpgradeServer_Type.__name__ = "DisplayString"
_ServiceSwUpgradeServer_Object = MibScalar
serviceSwUpgradeServer = _ServiceSwUpgradeServer_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 20, 10),
    _ServiceSwUpgradeServer_Type()
)
serviceSwUpgradeServer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceSwUpgradeServer.setStatus("current")


class _ServiceSwUpgradeUser_Type(DisplayString):
    """Custom type serviceSwUpgradeUser based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 8),
    )


_ServiceSwUpgradeUser_Type.__name__ = "DisplayString"
_ServiceSwUpgradeUser_Object = MibScalar
serviceSwUpgradeUser = _ServiceSwUpgradeUser_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 20, 12),
    _ServiceSwUpgradeUser_Type()
)
serviceSwUpgradeUser.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceSwUpgradeUser.setStatus("current")


class _ServiceSwUpgradePassword_Type(DisplayString):
    """Custom type serviceSwUpgradePassword based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 8),
    )


_ServiceSwUpgradePassword_Type.__name__ = "DisplayString"
_ServiceSwUpgradePassword_Object = MibScalar
serviceSwUpgradePassword = _ServiceSwUpgradePassword_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 20, 13),
    _ServiceSwUpgradePassword_Type()
)
serviceSwUpgradePassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceSwUpgradePassword.setStatus("current")


class _ServiceSwDaily_Type(DisplayString):
    """Custom type serviceSwDaily based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(5, 5),
    )
    fixed_length = 5


_ServiceSwDaily_Type.__name__ = "DisplayString"
_ServiceSwDaily_Object = MibScalar
serviceSwDaily = _ServiceSwDaily_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 20, 15),
    _ServiceSwDaily_Type()
)
serviceSwDaily.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceSwDaily.setStatus("current")


class _ServiceSwUpgradingFile_Type(DisplayString):
    """Custom type serviceSwUpgradingFile based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_ServiceSwUpgradingFile_Type.__name__ = "DisplayString"
_ServiceSwUpgradingFile_Object = MibScalar
serviceSwUpgradingFile = _ServiceSwUpgradingFile_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 20, 25),
    _ServiceSwUpgradingFile_Type()
)
serviceSwUpgradingFile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceSwUpgradingFile.setStatus("current")


class _ServiceSwVersionFile_Type(DisplayString):
    """Custom type serviceSwVersionFile based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_ServiceSwVersionFile_Type.__name__ = "DisplayString"
_ServiceSwVersionFile_Object = MibScalar
serviceSwVersionFile = _ServiceSwVersionFile_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 20, 27),
    _ServiceSwVersionFile_Type()
)
serviceSwVersionFile.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    serviceSwVersionFile.setStatus("current")


class _ServiceSwStatus_Type(Integer32):
    """Custom type serviceSwStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              80,
              90,
              91,
              92,
              93,
              94,
              95,
              96,
              97,
              98,
              100,
              101,
              102,
              103,
              104,
              105)
        )
    )
    namedValues = NamedValues(
        *(("notUpdateAvailable", 0),
          ("errorWrongRequest", 1),
          ("errorLocalFileRemovingError", 2),
          ("errorServerNotAchievable", 3),
          ("errorManifestFileNotFound", 4),
          ("errorLocalFileAlreadyExists", 5),
          ("errorRemoteFileForbiden", 6),
          ("errorNetworkIsUnreachable", 7),
          ("errorAccessUnauthorized", 8),
          ("errorConnectRefused", 9),
          ("errorLoginIncorrect", 10),
          ("errorNotHttpFtpServer", 11),
          ("errorUpgradeFileNotFound", 12),
          ("processNoExecuted", 80),
          ("validatingNewVersion", 90),
          ("downloadingFile", 91),
          ("errorWrongFilename", 92),
          ("fileDownloadedUpgradeAvailable", 93),
          ("errorWrongUrlServer", 94),
          ("upgradeFileAvailable", 95),
          ("errorWrongUpgradeFile", 96),
          ("errorInternalError", 97),
          ("inProgress", 98),
          ("errorUnknownError", 100),
          ("downloadProcessFailed", 101),
          ("errorCorruptedFile", 102),
          ("errorBadUpgradeFileContent", 103),
          ("errorPreparingUpgrade", 104),
          ("errorExtractingUpgradeFile", 105))
    )


_ServiceSwStatus_Type.__name__ = "Integer32"
_ServiceSwStatus_Object = MibScalar
serviceSwStatus = _ServiceSwStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 20, 30),
    _ServiceSwStatus_Type()
)
serviceSwStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    serviceSwStatus.setStatus("current")
_ServiceSwDownload_Type = Unsigned32
_ServiceSwDownload_Object = MibScalar
serviceSwDownload = _ServiceSwDownload_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 20, 35),
    _ServiceSwDownload_Type()
)
serviceSwDownload.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    serviceSwDownload.setStatus("current")
_ServiceSwCheckNow_Type = NullApply
_ServiceSwCheckNow_Object = MibScalar
serviceSwCheckNow = _ServiceSwCheckNow_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 20, 40),
    _ServiceSwCheckNow_Type()
)
serviceSwCheckNow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceSwCheckNow.setStatus("current")
_ServiceSwDownloadNow_Type = NullApply
_ServiceSwDownloadNow_Object = MibScalar
serviceSwDownloadNow = _ServiceSwDownloadNow_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 20, 41),
    _ServiceSwDownloadNow_Type()
)
serviceSwDownloadNow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceSwDownloadNow.setStatus("current")
_ServiceSwUpgradeNow_Type = NullApply
_ServiceSwUpgradeNow_Object = MibScalar
serviceSwUpgradeNow = _ServiceSwUpgradeNow_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 20, 42),
    _ServiceSwUpgradeNow_Type()
)
serviceSwUpgradeNow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceSwUpgradeNow.setStatus("current")
_ServiceInstallHwSw_ObjectIdentity = ObjectIdentity
serviceInstallHwSw = _ServiceInstallHwSw_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30)
)


class _ServiceInstallSyncBoard_Type(Integer32):
    """Custom type serviceInstallSyncBoard based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("externalReference", 0),
          ("gnssReceiver", 1),
          ("ocxo", 2),
          ("null", 3))
    )


_ServiceInstallSyncBoard_Type.__name__ = "Integer32"
_ServiceInstallSyncBoard_Object = MibScalar
serviceInstallSyncBoard = _ServiceInstallSyncBoard_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 5),
    _ServiceInstallSyncBoard_Type()
)
serviceInstallSyncBoard.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceInstallSyncBoard.setStatus("current")


class _ServiceRedundantPsu_Type(Integer32):
    """Custom type serviceRedundantPsu based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("redundantPsuDisabled", 0),
          ("redundantPsuEnabled", 1))
    )


_ServiceRedundantPsu_Type.__name__ = "Integer32"
_ServiceRedundantPsu_Object = MibScalar
serviceRedundantPsu = _ServiceRedundantPsu_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 10),
    _ServiceRedundantPsu_Type()
)
serviceRedundantPsu.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceRedundantPsu.setStatus("current")


class _ServiceInput2_Type(Integer32):
    """Custom type serviceInput2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("socketIp2", 0),
          ("asi2", 1))
    )


_ServiceInput2_Type.__name__ = "Integer32"
_ServiceInput2_Object = MibScalar
serviceInput2 = _ServiceInput2_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 13),
    _ServiceInput2_Type()
)
serviceInput2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceInput2.setStatus("current")


class _ServiceTypeOfRedundancy_Type(Integer32):
    """Custom type serviceTypeOfRedundancy based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("singleDrive", 0),
          ("onePlusOneA", 1),
          ("onePlusOneB", 2),
          ("dualDriveA", 3),
          ("dualDriveB", 4),
          ("nPlusOneB", 5),
          ("nPlusOneA1", 6),
          ("nPlusOneA2", 7),
          ("nPlusOneA3", 8),
          ("nPlusOneA4", 9),
          ("nPlusOneA5", 10),
          ("nPlusOneA6", 11),
          ("nPlusOneA7", 12),
          ("nPlusOneA8", 13),
          ("nPlusOneA9", 14),
          ("nPlusOneA10", 15),
          ("nPlusOneA11", 16))
    )


_ServiceTypeOfRedundancy_Type.__name__ = "Integer32"
_ServiceTypeOfRedundancy_Object = MibScalar
serviceTypeOfRedundancy = _ServiceTypeOfRedundancy_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 15),
    _ServiceTypeOfRedundancy_Type()
)
serviceTypeOfRedundancy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceTypeOfRedundancy.setStatus("current")


class _ServiceCanBusIdentifier_Type(Unsigned32):
    """Custom type serviceCanBusIdentifier based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 12),
    )


_ServiceCanBusIdentifier_Type.__name__ = "Unsigned32"
_ServiceCanBusIdentifier_Object = MibScalar
serviceCanBusIdentifier = _ServiceCanBusIdentifier_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 17),
    _ServiceCanBusIdentifier_Type()
)
serviceCanBusIdentifier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceCanBusIdentifier.setStatus("current")


class _ServiceDualDriveRelay_Type(Integer32):
    """Custom type serviceDualDriveRelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("v1", 0),
          ("v2", 1))
    )


_ServiceDualDriveRelay_Type.__name__ = "Integer32"
_ServiceDualDriveRelay_Object = MibScalar
serviceDualDriveRelay = _ServiceDualDriveRelay_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 18),
    _ServiceDualDriveRelay_Type()
)
serviceDualDriveRelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceDualDriveRelay.setStatus("current")


class _ServiceNumberOfAmplifierStages_Type(Integer32):
    """Custom type serviceNumberOfAmplifierStages based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("zeroAmplifier", 0),
          ("oneAmplifier", 1),
          ("twoAmplifiers", 2),
          ("threeAmplifiers", 3),
          ("fourAmplifiers", 4),
          ("fiveAmplifiers", 5),
          ("sixAmplifiers", 6),
          ("sevenAmplifiers", 7),
          ("eigthAmplifiers", 8))
    )


_ServiceNumberOfAmplifierStages_Type.__name__ = "Integer32"
_ServiceNumberOfAmplifierStages_Object = MibScalar
serviceNumberOfAmplifierStages = _ServiceNumberOfAmplifierStages_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 25),
    _ServiceNumberOfAmplifierStages_Type()
)
serviceNumberOfAmplifierStages.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceNumberOfAmplifierStages.setStatus("current")


class _RfPowerSample_Type(Integer32):
    """Custom type rfPowerSample based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("internal", 0),
          ("external", 1))
    )


_RfPowerSample_Type.__name__ = "Integer32"
_RfPowerSample_Object = MibScalar
rfPowerSample = _RfPowerSample_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 26),
    _RfPowerSample_Type()
)
rfPowerSample.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rfPowerSample.setStatus("current")
_ServicePsuAmplifierStageTable_Object = MibTable
servicePsuAmplifierStageTable = _ServicePsuAmplifierStageTable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 30)
)
if mibBuilder.loadTexts:
    servicePsuAmplifierStageTable.setStatus("current")
_ServicePsuAmplifierStageEntry_Object = MibTableRow
servicePsuAmplifierStageEntry = _ServicePsuAmplifierStageEntry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 30, 1)
)
servicePsuAmplifierStageEntry.setIndexNames(
    (0, "TREDESS-FS-MIB", "servicePsuAmplifierStageIndex"),
)
if mibBuilder.loadTexts:
    servicePsuAmplifierStageEntry.setStatus("current")


class _ServicePsuAmplifierStageIndex_Type(Unsigned32):
    """Custom type servicePsuAmplifierStageIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_ServicePsuAmplifierStageIndex_Type.__name__ = "Unsigned32"
_ServicePsuAmplifierStageIndex_Object = MibTableColumn
servicePsuAmplifierStageIndex = _ServicePsuAmplifierStageIndex_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 30, 1, 1),
    _ServicePsuAmplifierStageIndex_Type()
)
servicePsuAmplifierStageIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    servicePsuAmplifierStageIndex.setStatus("current")
_ServicePsuAAmplifierStage_Type = OptionSw
_ServicePsuAAmplifierStage_Object = MibTableColumn
servicePsuAAmplifierStage = _ServicePsuAAmplifierStage_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 30, 1, 2),
    _ServicePsuAAmplifierStage_Type()
)
servicePsuAAmplifierStage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    servicePsuAAmplifierStage.setStatus("current")
_ServicePsuBAmplifierStage_Type = OptionSw
_ServicePsuBAmplifierStage_Object = MibTableColumn
servicePsuBAmplifierStage = _ServicePsuBAmplifierStage_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 30, 1, 3),
    _ServicePsuBAmplifierStage_Type()
)
servicePsuBAmplifierStage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    servicePsuBAmplifierStage.setStatus("current")
_ServicePsuCAmplifierStage_Type = OptionSw
_ServicePsuCAmplifierStage_Object = MibTableColumn
servicePsuCAmplifierStage = _ServicePsuCAmplifierStage_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 30, 1, 4),
    _ServicePsuCAmplifierStage_Type()
)
servicePsuCAmplifierStage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    servicePsuCAmplifierStage.setStatus("current")
_ServiceRackCooling_ObjectIdentity = ObjectIdentity
serviceRackCooling = _ServiceRackCooling_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 32)
)
_ServiceDetectedCoolingBoard_Type = DisplayString
_ServiceDetectedCoolingBoard_Object = MibScalar
serviceDetectedCoolingBoard = _ServiceDetectedCoolingBoard_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 32, 3),
    _ServiceDetectedCoolingBoard_Type()
)
serviceDetectedCoolingBoard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    serviceDetectedCoolingBoard.setStatus("current")


class _ServiceAssignAddressCoolingBoard_Type(Integer32):
    """Custom type serviceAssignAddressCoolingBoard based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("rackCooling1", 1),
          ("rackCooling2", 2),
          ("rackCooling3", 3),
          ("rackCooling4", 4),
          ("rackCooling5", 5),
          ("rackCooling6", 6),
          ("rackCooling7", 7))
    )


_ServiceAssignAddressCoolingBoard_Type.__name__ = "Integer32"
_ServiceAssignAddressCoolingBoard_Object = MibScalar
serviceAssignAddressCoolingBoard = _ServiceAssignAddressCoolingBoard_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 32, 5),
    _ServiceAssignAddressCoolingBoard_Type()
)
serviceAssignAddressCoolingBoard.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceAssignAddressCoolingBoard.setStatus("current")


class _ServiceDeleteAddressCoolingBoard_Type(Integer32):
    """Custom type serviceDeleteAddressCoolingBoard based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("rackCooling1", 1),
          ("rackCooling2", 2),
          ("rackCooling3", 3),
          ("rackCooling4", 4),
          ("rackCooling5", 5),
          ("rackCooling6", 6),
          ("rackCooling7", 7))
    )


_ServiceDeleteAddressCoolingBoard_Type.__name__ = "Integer32"
_ServiceDeleteAddressCoolingBoard_Object = MibScalar
serviceDeleteAddressCoolingBoard = _ServiceDeleteAddressCoolingBoard_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 32, 10),
    _ServiceDeleteAddressCoolingBoard_Type()
)
serviceDeleteAddressCoolingBoard.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceDeleteAddressCoolingBoard.setStatus("current")
_ServiceRackCooling1Board_Type = OptionSw
_ServiceRackCooling1Board_Object = MibScalar
serviceRackCooling1Board = _ServiceRackCooling1Board_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 32, 20),
    _ServiceRackCooling1Board_Type()
)
serviceRackCooling1Board.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceRackCooling1Board.setStatus("current")
_ServiceRackCooling2Board_Type = OptionSw
_ServiceRackCooling2Board_Object = MibScalar
serviceRackCooling2Board = _ServiceRackCooling2Board_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 32, 25),
    _ServiceRackCooling2Board_Type()
)
serviceRackCooling2Board.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceRackCooling2Board.setStatus("current")
_ServiceRackCooling3Board_Type = OptionSw
_ServiceRackCooling3Board_Object = MibScalar
serviceRackCooling3Board = _ServiceRackCooling3Board_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 32, 30),
    _ServiceRackCooling3Board_Type()
)
serviceRackCooling3Board.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceRackCooling3Board.setStatus("current")
_ServiceRackCooling4Board_Type = OptionSw
_ServiceRackCooling4Board_Object = MibScalar
serviceRackCooling4Board = _ServiceRackCooling4Board_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 32, 35),
    _ServiceRackCooling4Board_Type()
)
serviceRackCooling4Board.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceRackCooling4Board.setStatus("current")
_ServiceRackCooling5Board_Type = OptionSw
_ServiceRackCooling5Board_Object = MibScalar
serviceRackCooling5Board = _ServiceRackCooling5Board_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 32, 40),
    _ServiceRackCooling5Board_Type()
)
serviceRackCooling5Board.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceRackCooling5Board.setStatus("current")
_ServiceRackCooling6Board_Type = OptionSw
_ServiceRackCooling6Board_Object = MibScalar
serviceRackCooling6Board = _ServiceRackCooling6Board_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 32, 45),
    _ServiceRackCooling6Board_Type()
)
serviceRackCooling6Board.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceRackCooling6Board.setStatus("current")
_ServiceRackCooling7Board_Type = OptionSw
_ServiceRackCooling7Board_Object = MibScalar
serviceRackCooling7Board = _ServiceRackCooling7Board_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 32, 50),
    _ServiceRackCooling7Board_Type()
)
serviceRackCooling7Board.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceRackCooling7Board.setStatus("current")
_ServiceAsiMatrix_ObjectIdentity = ObjectIdentity
serviceAsiMatrix = _ServiceAsiMatrix_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 34)
)
_ServiceDetectedAsiMatrix_Type = DisplayString
_ServiceDetectedAsiMatrix_Object = MibScalar
serviceDetectedAsiMatrix = _ServiceDetectedAsiMatrix_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 34, 3),
    _ServiceDetectedAsiMatrix_Type()
)
serviceDetectedAsiMatrix.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    serviceDetectedAsiMatrix.setStatus("current")


class _ServiceAssingAddressAsiMatrix_Type(Integer32):
    """Custom type serviceAssingAddressAsiMatrix based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("asi1Matrix1", 1),
          ("asi1Matrix2", 2),
          ("asi2Matrix1", 3),
          ("asi2Matrix2", 4))
    )


_ServiceAssingAddressAsiMatrix_Type.__name__ = "Integer32"
_ServiceAssingAddressAsiMatrix_Object = MibScalar
serviceAssingAddressAsiMatrix = _ServiceAssingAddressAsiMatrix_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 34, 10),
    _ServiceAssingAddressAsiMatrix_Type()
)
serviceAssingAddressAsiMatrix.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceAssingAddressAsiMatrix.setStatus("current")


class _ServiceDeleteAddressAsiMatrix_Type(Integer32):
    """Custom type serviceDeleteAddressAsiMatrix based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("asi1Matrix1", 1),
          ("asi1Matrix2", 2),
          ("asi2Matrix1", 3),
          ("asi2Matrix2", 4))
    )


_ServiceDeleteAddressAsiMatrix_Type.__name__ = "Integer32"
_ServiceDeleteAddressAsiMatrix_Object = MibScalar
serviceDeleteAddressAsiMatrix = _ServiceDeleteAddressAsiMatrix_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 34, 15),
    _ServiceDeleteAddressAsiMatrix_Type()
)
serviceDeleteAddressAsiMatrix.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceDeleteAddressAsiMatrix.setStatus("current")
_ServiceInstalledAsiMatrix1_Type = OptionHw
_ServiceInstalledAsiMatrix1_Object = MibScalar
serviceInstalledAsiMatrix1 = _ServiceInstalledAsiMatrix1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 34, 17),
    _ServiceInstalledAsiMatrix1_Type()
)
serviceInstalledAsiMatrix1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceInstalledAsiMatrix1.setStatus("current")
_ServiceInstalledAsiMatrix2_Type = OptionHw
_ServiceInstalledAsiMatrix2_Object = MibScalar
serviceInstalledAsiMatrix2 = _ServiceInstalledAsiMatrix2_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 34, 18),
    _ServiceInstalledAsiMatrix2_Type()
)
serviceInstalledAsiMatrix2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceInstalledAsiMatrix2.setStatus("current")
_ServiceRfMatrix_ObjectIdentity = ObjectIdentity
serviceRfMatrix = _ServiceRfMatrix_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 35)
)
_ServiceDetectedRfMatrix_Type = DisplayString
_ServiceDetectedRfMatrix_Object = MibScalar
serviceDetectedRfMatrix = _ServiceDetectedRfMatrix_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 35, 3),
    _ServiceDetectedRfMatrix_Type()
)
serviceDetectedRfMatrix.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    serviceDetectedRfMatrix.setStatus("current")


class _ServiceAssingAddressRfMatrix_Type(Integer32):
    """Custom type serviceAssingAddressRfMatrix based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("rfMatrix1", 1),
          ("rfMatrix2", 2))
    )


_ServiceAssingAddressRfMatrix_Type.__name__ = "Integer32"
_ServiceAssingAddressRfMatrix_Object = MibScalar
serviceAssingAddressRfMatrix = _ServiceAssingAddressRfMatrix_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 35, 10),
    _ServiceAssingAddressRfMatrix_Type()
)
serviceAssingAddressRfMatrix.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceAssingAddressRfMatrix.setStatus("current")


class _ServiceDeleteAddressRfMatrix_Type(Integer32):
    """Custom type serviceDeleteAddressRfMatrix based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("rfMatrix1", 1),
          ("rfMatrix2", 2))
    )


_ServiceDeleteAddressRfMatrix_Type.__name__ = "Integer32"
_ServiceDeleteAddressRfMatrix_Object = MibScalar
serviceDeleteAddressRfMatrix = _ServiceDeleteAddressRfMatrix_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 35, 15),
    _ServiceDeleteAddressRfMatrix_Type()
)
serviceDeleteAddressRfMatrix.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceDeleteAddressRfMatrix.setStatus("current")
_ServiceInstalledRfMatrix_Type = OptionHw
_ServiceInstalledRfMatrix_Object = MibScalar
serviceInstalledRfMatrix = _ServiceInstalledRfMatrix_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 35, 17),
    _ServiceInstalledRfMatrix_Type()
)
serviceInstalledRfMatrix.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceInstalledRfMatrix.setStatus("current")
_ServiceEtiMatrix_ObjectIdentity = ObjectIdentity
serviceEtiMatrix = _ServiceEtiMatrix_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 36)
)
_ServiceDetectedEtiMatrix_Type = DisplayString
_ServiceDetectedEtiMatrix_Object = MibScalar
serviceDetectedEtiMatrix = _ServiceDetectedEtiMatrix_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 36, 3),
    _ServiceDetectedEtiMatrix_Type()
)
serviceDetectedEtiMatrix.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    serviceDetectedEtiMatrix.setStatus("current")


class _ServiceAssingAddressEtiMatrix_Type(Integer32):
    """Custom type serviceAssingAddressEtiMatrix based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("eti1Matrix1", 1),
          ("eti1Matrix2", 2),
          ("eti2Matrix1", 3),
          ("eti2Matrix2", 4))
    )


_ServiceAssingAddressEtiMatrix_Type.__name__ = "Integer32"
_ServiceAssingAddressEtiMatrix_Object = MibScalar
serviceAssingAddressEtiMatrix = _ServiceAssingAddressEtiMatrix_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 36, 10),
    _ServiceAssingAddressEtiMatrix_Type()
)
serviceAssingAddressEtiMatrix.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceAssingAddressEtiMatrix.setStatus("current")


class _ServiceDeleteAddressEtiMatrix_Type(Integer32):
    """Custom type serviceDeleteAddressEtiMatrix based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("eti1Matrix1", 1),
          ("eti1Matrix2", 2),
          ("eti2Matrix1", 3),
          ("eti2Matrix2", 4))
    )


_ServiceDeleteAddressEtiMatrix_Type.__name__ = "Integer32"
_ServiceDeleteAddressEtiMatrix_Object = MibScalar
serviceDeleteAddressEtiMatrix = _ServiceDeleteAddressEtiMatrix_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 36, 15),
    _ServiceDeleteAddressEtiMatrix_Type()
)
serviceDeleteAddressEtiMatrix.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceDeleteAddressEtiMatrix.setStatus("current")
_ServiceInstalledEtiMatrix1_Type = OptionHw
_ServiceInstalledEtiMatrix1_Object = MibScalar
serviceInstalledEtiMatrix1 = _ServiceInstalledEtiMatrix1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 36, 17),
    _ServiceInstalledEtiMatrix1_Type()
)
serviceInstalledEtiMatrix1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceInstalledEtiMatrix1.setStatus("current")
_ServiceInstalledEtiMatrix2_Type = OptionHw
_ServiceInstalledEtiMatrix2_Object = MibScalar
serviceInstalledEtiMatrix2 = _ServiceInstalledEtiMatrix2_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 36, 18),
    _ServiceInstalledEtiMatrix2_Type()
)
serviceInstalledEtiMatrix2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceInstalledEtiMatrix2.setStatus("current")
_ServiceInstallSwActivationCode_Type = DisplayString
_ServiceInstallSwActivationCode_Object = MibScalar
serviceInstallSwActivationCode = _ServiceInstallSwActivationCode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 1, 7, 30, 40),
    _ServiceInstallSwActivationCode_Type()
)
serviceInstallSwActivationCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serviceInstallSwActivationCode.setStatus("current")
_Setup_ObjectIdentity = ObjectIdentity
setup = _Setup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2)
)
_Input_ObjectIdentity = ObjectIdentity
input = _Input_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1)
)
_Socket1_ObjectIdentity = ObjectIdentity
socket1 = _Socket1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 1)
)
_Socket1Enable_Type = DisabledEnabled
_Socket1Enable_Object = MibScalar
socket1Enable = _Socket1Enable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 1, 1),
    _Socket1Enable_Type()
)
socket1Enable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    socket1Enable.setStatus("current")


class _Socket1TransmissionMode_Type(Integer32):
    """Custom type socket1TransmissionMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("unicast", 0),
          ("multicast", 1))
    )


_Socket1TransmissionMode_Type.__name__ = "Integer32"
_Socket1TransmissionMode_Object = MibScalar
socket1TransmissionMode = _Socket1TransmissionMode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 1, 2),
    _Socket1TransmissionMode_Type()
)
socket1TransmissionMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    socket1TransmissionMode.setStatus("current")
_Socket1UnicastIp_Type = IpAddress
_Socket1UnicastIp_Object = MibScalar
socket1UnicastIp = _Socket1UnicastIp_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 1, 3),
    _Socket1UnicastIp_Type()
)
socket1UnicastIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    socket1UnicastIp.setStatus("current")
_Socket1MulticastIp_Type = IpAddress
_Socket1MulticastIp_Object = MibScalar
socket1MulticastIp = _Socket1MulticastIp_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 1, 4),
    _Socket1MulticastIp_Type()
)
socket1MulticastIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    socket1MulticastIp.setStatus("current")
_Socket1SourceIp_Type = IpAddress
_Socket1SourceIp_Object = MibScalar
socket1SourceIp = _Socket1SourceIp_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 1, 5),
    _Socket1SourceIp_Type()
)
socket1SourceIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    socket1SourceIp.setStatus("current")


class _Socket1VlanEnable_Type(Integer32):
    """Custom type socket1VlanEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Socket1VlanEnable_Type.__name__ = "Integer32"
_Socket1VlanEnable_Object = MibScalar
socket1VlanEnable = _Socket1VlanEnable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 1, 6),
    _Socket1VlanEnable_Type()
)
socket1VlanEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    socket1VlanEnable.setStatus("current")


class _Socket1VlanId_Type(Unsigned32):
    """Custom type socket1VlanId based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_Socket1VlanId_Type.__name__ = "Unsigned32"
_Socket1VlanId_Object = MibScalar
socket1VlanId = _Socket1VlanId_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 1, 7),
    _Socket1VlanId_Type()
)
socket1VlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    socket1VlanId.setStatus("current")


class _Socket1Port_Type(Unsigned32):
    """Custom type socket1Port based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_Socket1Port_Type.__name__ = "Unsigned32"
_Socket1Port_Object = MibScalar
socket1Port = _Socket1Port_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 1, 8),
    _Socket1Port_Type()
)
socket1Port.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    socket1Port.setStatus("current")


class _Socket1Protocol_Type(Integer32):
    """Custom type socket1Protocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("udp", 0),
          ("rtp", 1))
    )


_Socket1Protocol_Type.__name__ = "Integer32"
_Socket1Protocol_Object = MibScalar
socket1Protocol = _Socket1Protocol_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 1, 9),
    _Socket1Protocol_Type()
)
socket1Protocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    socket1Protocol.setStatus("current")


class _Socket1BufferDuration_Type(Unsigned32):
    """Custom type socket1BufferDuration based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_Socket1BufferDuration_Type.__name__ = "Unsigned32"
_Socket1BufferDuration_Object = MibScalar
socket1BufferDuration = _Socket1BufferDuration_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 1, 11),
    _Socket1BufferDuration_Type()
)
socket1BufferDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    socket1BufferDuration.setStatus("current")
if mibBuilder.loadTexts:
    socket1BufferDuration.setUnits("ms")
_Socket1Fec_Type = DisplayString
_Socket1Fec_Object = MibScalar
socket1Fec = _Socket1Fec_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 1, 12),
    _Socket1Fec_Type()
)
socket1Fec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    socket1Fec.setStatus("current")
_Socket1InputBitrate_Type = DisplayString
_Socket1InputBitrate_Object = MibScalar
socket1InputBitrate = _Socket1InputBitrate_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 1, 13),
    _Socket1InputBitrate_Type()
)
socket1InputBitrate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    socket1InputBitrate.setStatus("current")
if mibBuilder.loadTexts:
    socket1InputBitrate.setUnits("bps")
_Socket1Latency_Type = DisplayString
_Socket1Latency_Object = MibScalar
socket1Latency = _Socket1Latency_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 1, 14),
    _Socket1Latency_Type()
)
socket1Latency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    socket1Latency.setStatus("current")
if mibBuilder.loadTexts:
    socket1Latency.setUnits("ms")


class _Socket1Content_Type(Integer32):
    """Custom type socket1Content based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("differentThanSocket2", 0),
          ("sameThantSocket2", 1))
    )


_Socket1Content_Type.__name__ = "Integer32"
_Socket1Content_Object = MibScalar
socket1Content = _Socket1Content_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 1, 15),
    _Socket1Content_Type()
)
socket1Content.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    socket1Content.setStatus("current")


class _Socket1Jitter_Type(Unsigned32):
    """Custom type socket1Jitter based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 500),
    )


_Socket1Jitter_Type.__name__ = "Unsigned32"
_Socket1Jitter_Object = MibScalar
socket1Jitter = _Socket1Jitter_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 1, 16),
    _Socket1Jitter_Type()
)
socket1Jitter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    socket1Jitter.setStatus("current")
if mibBuilder.loadTexts:
    socket1Jitter.setUnits("ms")
_Socket1DabFec_Type = NoYes
_Socket1DabFec_Object = MibScalar
socket1DabFec = _Socket1DabFec_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 1, 17),
    _Socket1DabFec_Type()
)
socket1DabFec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    socket1DabFec.setStatus("current")
_Socket1Statistics_ObjectIdentity = ObjectIdentity
socket1Statistics = _Socket1Statistics_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 1, 20)
)
_Socket1RxPackets_Type = Unsigned32
_Socket1RxPackets_Object = MibScalar
socket1RxPackets = _Socket1RxPackets_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 1, 20, 1),
    _Socket1RxPackets_Type()
)
socket1RxPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    socket1RxPackets.setStatus("current")
_Socket1RxDisorderedPkts_Type = Unsigned32
_Socket1RxDisorderedPkts_Object = MibScalar
socket1RxDisorderedPkts = _Socket1RxDisorderedPkts_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 1, 20, 5),
    _Socket1RxDisorderedPkts_Type()
)
socket1RxDisorderedPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    socket1RxDisorderedPkts.setStatus("current")
_Socket1RxDuplicatedPkts_Type = Unsigned32
_Socket1RxDuplicatedPkts_Object = MibScalar
socket1RxDuplicatedPkts = _Socket1RxDuplicatedPkts_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 1, 20, 10),
    _Socket1RxDuplicatedPkts_Type()
)
socket1RxDuplicatedPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    socket1RxDuplicatedPkts.setStatus("current")
_Socket1RxReorderedPkts_Type = Unsigned32
_Socket1RxReorderedPkts_Object = MibScalar
socket1RxReorderedPkts = _Socket1RxReorderedPkts_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 1, 20, 15),
    _Socket1RxReorderedPkts_Type()
)
socket1RxReorderedPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    socket1RxReorderedPkts.setStatus("current")
_Socket1RxLostPkts_Type = Unsigned32
_Socket1RxLostPkts_Object = MibScalar
socket1RxLostPkts = _Socket1RxLostPkts_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 1, 20, 20),
    _Socket1RxLostPkts_Type()
)
socket1RxLostPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    socket1RxLostPkts.setStatus("current")
_Socket1RxOutOfRangePackets_Type = Unsigned32
_Socket1RxOutOfRangePackets_Object = MibScalar
socket1RxOutOfRangePackets = _Socket1RxOutOfRangePackets_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 1, 20, 22),
    _Socket1RxOutOfRangePackets_Type()
)
socket1RxOutOfRangePackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    socket1RxOutOfRangePackets.setStatus("current")
_Socket1RxFixedPackets_Type = Unsigned32
_Socket1RxFixedPackets_Object = MibScalar
socket1RxFixedPackets = _Socket1RxFixedPackets_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 1, 20, 23),
    _Socket1RxFixedPackets_Type()
)
socket1RxFixedPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    socket1RxFixedPackets.setStatus("current")
_Socket1CorrectedRSCodewords_Type = Unsigned32
_Socket1CorrectedRSCodewords_Object = MibScalar
socket1CorrectedRSCodewords = _Socket1CorrectedRSCodewords_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 1, 20, 25),
    _Socket1CorrectedRSCodewords_Type()
)
socket1CorrectedRSCodewords.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    socket1CorrectedRSCodewords.setStatus("current")
_Socket1NotCorrectedRSCodewords_Type = Unsigned32
_Socket1NotCorrectedRSCodewords_Object = MibScalar
socket1NotCorrectedRSCodewords = _Socket1NotCorrectedRSCodewords_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 1, 20, 30),
    _Socket1NotCorrectedRSCodewords_Type()
)
socket1NotCorrectedRSCodewords.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    socket1NotCorrectedRSCodewords.setStatus("current")
_Socket1TimeWithoutService_Type = FloatingPoint
_Socket1TimeWithoutService_Object = MibScalar
socket1TimeWithoutService = _Socket1TimeWithoutService_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 1, 20, 32),
    _Socket1TimeWithoutService_Type()
)
socket1TimeWithoutService.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    socket1TimeWithoutService.setStatus("current")
_Socket1RxStatisticsReset_Type = NullApply
_Socket1RxStatisticsReset_Object = MibScalar
socket1RxStatisticsReset = _Socket1RxStatisticsReset_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 1, 20, 35),
    _Socket1RxStatisticsReset_Type()
)
socket1RxStatisticsReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    socket1RxStatisticsReset.setStatus("current")
_Socket1UnicastNetmask_Type = IpAddress
_Socket1UnicastNetmask_Object = MibScalar
socket1UnicastNetmask = _Socket1UnicastNetmask_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 1, 30),
    _Socket1UnicastNetmask_Type()
)
socket1UnicastNetmask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    socket1UnicastNetmask.setStatus("current")
_Socket1MacAddr_Type = MacAddress
_Socket1MacAddr_Object = MibScalar
socket1MacAddr = _Socket1MacAddr_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 1, 33),
    _Socket1MacAddr_Type()
)
socket1MacAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    socket1MacAddr.setStatus("current")
_Socket2_ObjectIdentity = ObjectIdentity
socket2 = _Socket2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 2)
)
_Socket2Enable_Type = DisabledEnabled
_Socket2Enable_Object = MibScalar
socket2Enable = _Socket2Enable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 2, 1),
    _Socket2Enable_Type()
)
socket2Enable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    socket2Enable.setStatus("current")


class _Socket2TransmissionMode_Type(Integer32):
    """Custom type socket2TransmissionMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("unicast", 0),
          ("multicast", 1))
    )


_Socket2TransmissionMode_Type.__name__ = "Integer32"
_Socket2TransmissionMode_Object = MibScalar
socket2TransmissionMode = _Socket2TransmissionMode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 2, 2),
    _Socket2TransmissionMode_Type()
)
socket2TransmissionMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    socket2TransmissionMode.setStatus("current")
_Socket2UnicastIp_Type = IpAddress
_Socket2UnicastIp_Object = MibScalar
socket2UnicastIp = _Socket2UnicastIp_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 2, 3),
    _Socket2UnicastIp_Type()
)
socket2UnicastIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    socket2UnicastIp.setStatus("current")
_Socket2MulticastIp_Type = IpAddress
_Socket2MulticastIp_Object = MibScalar
socket2MulticastIp = _Socket2MulticastIp_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 2, 4),
    _Socket2MulticastIp_Type()
)
socket2MulticastIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    socket2MulticastIp.setStatus("current")
_Socket2SourceIp_Type = IpAddress
_Socket2SourceIp_Object = MibScalar
socket2SourceIp = _Socket2SourceIp_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 2, 5),
    _Socket2SourceIp_Type()
)
socket2SourceIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    socket2SourceIp.setStatus("current")


class _Socket2VlanEnable_Type(Integer32):
    """Custom type socket2VlanEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Socket2VlanEnable_Type.__name__ = "Integer32"
_Socket2VlanEnable_Object = MibScalar
socket2VlanEnable = _Socket2VlanEnable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 2, 6),
    _Socket2VlanEnable_Type()
)
socket2VlanEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    socket2VlanEnable.setStatus("current")


class _Socket2VlanId_Type(Unsigned32):
    """Custom type socket2VlanId based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_Socket2VlanId_Type.__name__ = "Unsigned32"
_Socket2VlanId_Object = MibScalar
socket2VlanId = _Socket2VlanId_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 2, 7),
    _Socket2VlanId_Type()
)
socket2VlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    socket2VlanId.setStatus("current")


class _Socket2Port_Type(Unsigned32):
    """Custom type socket2Port based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_Socket2Port_Type.__name__ = "Unsigned32"
_Socket2Port_Object = MibScalar
socket2Port = _Socket2Port_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 2, 8),
    _Socket2Port_Type()
)
socket2Port.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    socket2Port.setStatus("current")


class _Socket2Protocol_Type(Integer32):
    """Custom type socket2Protocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("udp", 0),
          ("rtp", 1))
    )


_Socket2Protocol_Type.__name__ = "Integer32"
_Socket2Protocol_Object = MibScalar
socket2Protocol = _Socket2Protocol_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 2, 9),
    _Socket2Protocol_Type()
)
socket2Protocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    socket2Protocol.setStatus("current")


class _Socket2BufferDuration_Type(Unsigned32):
    """Custom type socket2BufferDuration based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_Socket2BufferDuration_Type.__name__ = "Unsigned32"
_Socket2BufferDuration_Object = MibScalar
socket2BufferDuration = _Socket2BufferDuration_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 2, 11),
    _Socket2BufferDuration_Type()
)
socket2BufferDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    socket2BufferDuration.setStatus("current")
if mibBuilder.loadTexts:
    socket2BufferDuration.setUnits("ms")
_Socket2Fec_Type = DisplayString
_Socket2Fec_Object = MibScalar
socket2Fec = _Socket2Fec_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 2, 12),
    _Socket2Fec_Type()
)
socket2Fec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    socket2Fec.setStatus("current")
_Socket2InputBitrate_Type = DisplayString
_Socket2InputBitrate_Object = MibScalar
socket2InputBitrate = _Socket2InputBitrate_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 2, 13),
    _Socket2InputBitrate_Type()
)
socket2InputBitrate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    socket2InputBitrate.setStatus("current")
if mibBuilder.loadTexts:
    socket2InputBitrate.setUnits("bps")
_Socket2Latency_Type = DisplayString
_Socket2Latency_Object = MibScalar
socket2Latency = _Socket2Latency_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 2, 14),
    _Socket2Latency_Type()
)
socket2Latency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    socket2Latency.setStatus("current")
if mibBuilder.loadTexts:
    socket2Latency.setUnits("ms")


class _Socket2Content_Type(Integer32):
    """Custom type socket2Content based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("differentThanSocket1", 0),
          ("sameThantSocket1", 1))
    )


_Socket2Content_Type.__name__ = "Integer32"
_Socket2Content_Object = MibScalar
socket2Content = _Socket2Content_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 2, 15),
    _Socket2Content_Type()
)
socket2Content.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    socket2Content.setStatus("current")


class _Socket2Jitter_Type(Unsigned32):
    """Custom type socket2Jitter based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 500),
    )


_Socket2Jitter_Type.__name__ = "Unsigned32"
_Socket2Jitter_Object = MibScalar
socket2Jitter = _Socket2Jitter_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 2, 16),
    _Socket2Jitter_Type()
)
socket2Jitter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    socket2Jitter.setStatus("current")
if mibBuilder.loadTexts:
    socket2Jitter.setUnits("ms")
_Socket2DabFec_Type = NoYes
_Socket2DabFec_Object = MibScalar
socket2DabFec = _Socket2DabFec_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 2, 17),
    _Socket2DabFec_Type()
)
socket2DabFec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    socket2DabFec.setStatus("current")
_Socket2Statistics_ObjectIdentity = ObjectIdentity
socket2Statistics = _Socket2Statistics_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 2, 20)
)
_Socket2RxPackets_Type = Unsigned32
_Socket2RxPackets_Object = MibScalar
socket2RxPackets = _Socket2RxPackets_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 2, 20, 1),
    _Socket2RxPackets_Type()
)
socket2RxPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    socket2RxPackets.setStatus("current")
_Socket2RxDisorderedPkts_Type = Unsigned32
_Socket2RxDisorderedPkts_Object = MibScalar
socket2RxDisorderedPkts = _Socket2RxDisorderedPkts_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 2, 20, 5),
    _Socket2RxDisorderedPkts_Type()
)
socket2RxDisorderedPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    socket2RxDisorderedPkts.setStatus("current")
_Socket2RxDuplicatedPkts_Type = Unsigned32
_Socket2RxDuplicatedPkts_Object = MibScalar
socket2RxDuplicatedPkts = _Socket2RxDuplicatedPkts_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 2, 20, 10),
    _Socket2RxDuplicatedPkts_Type()
)
socket2RxDuplicatedPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    socket2RxDuplicatedPkts.setStatus("current")
_Socket2RxReorderedPkts_Type = Unsigned32
_Socket2RxReorderedPkts_Object = MibScalar
socket2RxReorderedPkts = _Socket2RxReorderedPkts_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 2, 20, 15),
    _Socket2RxReorderedPkts_Type()
)
socket2RxReorderedPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    socket2RxReorderedPkts.setStatus("current")
_Socket2RxLostPkts_Type = Unsigned32
_Socket2RxLostPkts_Object = MibScalar
socket2RxLostPkts = _Socket2RxLostPkts_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 2, 20, 20),
    _Socket2RxLostPkts_Type()
)
socket2RxLostPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    socket2RxLostPkts.setStatus("current")
_Socket2RxOutOfRangePackets_Type = Unsigned32
_Socket2RxOutOfRangePackets_Object = MibScalar
socket2RxOutOfRangePackets = _Socket2RxOutOfRangePackets_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 2, 20, 22),
    _Socket2RxOutOfRangePackets_Type()
)
socket2RxOutOfRangePackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    socket2RxOutOfRangePackets.setStatus("current")
_Socket2RxFixedPackets_Type = Unsigned32
_Socket2RxFixedPackets_Object = MibScalar
socket2RxFixedPackets = _Socket2RxFixedPackets_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 2, 20, 23),
    _Socket2RxFixedPackets_Type()
)
socket2RxFixedPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    socket2RxFixedPackets.setStatus("current")
_Socket2CorrectedRSCodewords_Type = Unsigned32
_Socket2CorrectedRSCodewords_Object = MibScalar
socket2CorrectedRSCodewords = _Socket2CorrectedRSCodewords_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 2, 20, 25),
    _Socket2CorrectedRSCodewords_Type()
)
socket2CorrectedRSCodewords.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    socket2CorrectedRSCodewords.setStatus("current")
_Socket2NotCorrectedRSCodewords_Type = Unsigned32
_Socket2NotCorrectedRSCodewords_Object = MibScalar
socket2NotCorrectedRSCodewords = _Socket2NotCorrectedRSCodewords_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 2, 20, 30),
    _Socket2NotCorrectedRSCodewords_Type()
)
socket2NotCorrectedRSCodewords.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    socket2NotCorrectedRSCodewords.setStatus("current")
_Socket2TimeWithoutService_Type = FloatingPoint
_Socket2TimeWithoutService_Object = MibScalar
socket2TimeWithoutService = _Socket2TimeWithoutService_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 2, 20, 32),
    _Socket2TimeWithoutService_Type()
)
socket2TimeWithoutService.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    socket2TimeWithoutService.setStatus("current")
_Socket2RxStatisticsReset_Type = NullApply
_Socket2RxStatisticsReset_Object = MibScalar
socket2RxStatisticsReset = _Socket2RxStatisticsReset_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 2, 20, 35),
    _Socket2RxStatisticsReset_Type()
)
socket2RxStatisticsReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    socket2RxStatisticsReset.setStatus("current")
_Socket2UnicastNetmask_Type = IpAddress
_Socket2UnicastNetmask_Object = MibScalar
socket2UnicastNetmask = _Socket2UnicastNetmask_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 2, 30),
    _Socket2UnicastNetmask_Type()
)
socket2UnicastNetmask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    socket2UnicastNetmask.setStatus("current")
_Socket2MacAddr_Type = MacAddress
_Socket2MacAddr_Object = MibScalar
socket2MacAddr = _Socket2MacAddr_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 2, 33),
    _Socket2MacAddr_Type()
)
socket2MacAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    socket2MacAddr.setStatus("current")
_InputSwitching_ObjectIdentity = ObjectIdentity
inputSwitching = _InputSwitching_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 3)
)


class _SourceSelected_Type(Integer32):
    """Custom type sourceSelected based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("source1", 1),
          ("source2", 2),
          ("source3", 3),
          ("source4", 4))
    )


_SourceSelected_Type.__name__ = "Integer32"
_SourceSelected_Object = MibScalar
sourceSelected = _SourceSelected_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 3, 1),
    _SourceSelected_Type()
)
sourceSelected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sourceSelected.setStatus("current")


class _SwitchingMode_Type(Integer32):
    """Custom type switchingMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("automatic", 1),
          ("source1", 2),
          ("source2", 3),
          ("source3", 4),
          ("source4", 5))
    )


_SwitchingMode_Type.__name__ = "Integer32"
_SwitchingMode_Object = MibScalar
switchingMode = _SwitchingMode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 3, 2),
    _SwitchingMode_Type()
)
switchingMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    switchingMode.setStatus("current")


class _MonitorOutput_Type(Integer32):
    """Custom type monitorOutput based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("automatic", 1),
          ("source1", 2),
          ("source2", 3),
          ("source3", 4),
          ("source4", 5))
    )


_MonitorOutput_Type.__name__ = "Integer32"
_MonitorOutput_Object = MibScalar
monitorOutput = _MonitorOutput_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 3, 3),
    _MonitorOutput_Type()
)
monitorOutput.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    monitorOutput.setStatus("current")
_InputSwitchingHysteresis_ObjectIdentity = ObjectIdentity
inputSwitchingHysteresis = _InputSwitchingHysteresis_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 3, 4)
)


class _NonSeamlessHysteresis_Type(Unsigned32):
    """Custom type nonSeamlessHysteresis based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 10),
    )


_NonSeamlessHysteresis_Type.__name__ = "Unsigned32"
_NonSeamlessHysteresis_Object = MibScalar
nonSeamlessHysteresis = _NonSeamlessHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 3, 4, 1),
    _NonSeamlessHysteresis_Type()
)
nonSeamlessHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    nonSeamlessHysteresis.setStatus("current")
if mibBuilder.loadTexts:
    nonSeamlessHysteresis.setUnits("seconds")


class _HigherPriorityHysteresis_Type(Unsigned32):
    """Custom type higherPriorityHysteresis based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 600),
    )


_HigherPriorityHysteresis_Type.__name__ = "Unsigned32"
_HigherPriorityHysteresis_Object = MibScalar
higherPriorityHysteresis = _HigherPriorityHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 3, 4, 2),
    _HigherPriorityHysteresis_Type()
)
higherPriorityHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    higherPriorityHysteresis.setStatus("current")
if mibBuilder.loadTexts:
    higherPriorityHysteresis.setUnits("seconds")
_AsiBypassEqualizers_Type = DisabledEnabled
_AsiBypassEqualizers_Object = MibScalar
asiBypassEqualizers = _AsiBypassEqualizers_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 3, 5),
    _AsiBypassEqualizers_Type()
)
asiBypassEqualizers.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    asiBypassEqualizers.setStatus("current")
_Input1_ObjectIdentity = ObjectIdentity
input1 = _Input1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 3, 10)
)


class _Input1Priority_Type(Integer32):
    """Custom type input1Priority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("inputDisabled", 0),
          ("p1Highest", 1),
          ("p2", 2),
          ("p3", 3),
          ("p4Lowest", 4))
    )


_Input1Priority_Type.__name__ = "Integer32"
_Input1Priority_Object = MibScalar
input1Priority = _Input1Priority_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 3, 10, 1),
    _Input1Priority_Type()
)
input1Priority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    input1Priority.setStatus("current")
_Input1Status_Type = DisplayString
_Input1Status_Object = MibScalar
input1Status = _Input1Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 3, 10, 2),
    _Input1Status_Type()
)
input1Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    input1Status.setStatus("current")
_Input1Pat_Type = DisplayString
_Input1Pat_Object = MibScalar
input1Pat = _Input1Pat_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 3, 10, 3),
    _Input1Pat_Type()
)
input1Pat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    input1Pat.setStatus("current")
_Input2_ObjectIdentity = ObjectIdentity
input2 = _Input2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 3, 11)
)


class _Input2Priority_Type(Integer32):
    """Custom type input2Priority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("inputDisabled", 0),
          ("p1Highest", 1),
          ("p2", 2),
          ("p3", 3),
          ("p4Lowest", 4))
    )


_Input2Priority_Type.__name__ = "Integer32"
_Input2Priority_Object = MibScalar
input2Priority = _Input2Priority_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 3, 11, 1),
    _Input2Priority_Type()
)
input2Priority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    input2Priority.setStatus("current")
_Input2Status_Type = DisplayString
_Input2Status_Object = MibScalar
input2Status = _Input2Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 3, 11, 2),
    _Input2Status_Type()
)
input2Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    input2Status.setStatus("current")
_Input2Pat_Type = DisplayString
_Input2Pat_Object = MibScalar
input2Pat = _Input2Pat_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 3, 11, 3),
    _Input2Pat_Type()
)
input2Pat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    input2Pat.setStatus("current")
_Input3_ObjectIdentity = ObjectIdentity
input3 = _Input3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 3, 12)
)


class _Input3Priority_Type(Integer32):
    """Custom type input3Priority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("inputDisabled", 0),
          ("p1Highest", 1),
          ("p2", 2),
          ("p3", 3),
          ("p4Lowest", 4))
    )


_Input3Priority_Type.__name__ = "Integer32"
_Input3Priority_Object = MibScalar
input3Priority = _Input3Priority_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 3, 12, 1),
    _Input3Priority_Type()
)
input3Priority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    input3Priority.setStatus("current")
_Input3Status_Type = DisplayString
_Input3Status_Object = MibScalar
input3Status = _Input3Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 3, 12, 2),
    _Input3Status_Type()
)
input3Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    input3Status.setStatus("current")
_Input3Pat_Type = DisplayString
_Input3Pat_Object = MibScalar
input3Pat = _Input3Pat_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 3, 12, 3),
    _Input3Pat_Type()
)
input3Pat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    input3Pat.setStatus("current")
_Input4_ObjectIdentity = ObjectIdentity
input4 = _Input4_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 3, 13)
)


class _Input4Priority_Type(Integer32):
    """Custom type input4Priority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("inputDisabled", 0),
          ("p1Highest", 1),
          ("p2", 2),
          ("p3", 3),
          ("p4Lowest", 4))
    )


_Input4Priority_Type.__name__ = "Integer32"
_Input4Priority_Object = MibScalar
input4Priority = _Input4Priority_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 3, 13, 1),
    _Input4Priority_Type()
)
input4Priority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    input4Priority.setStatus("current")
_Input4Status_Type = DisplayString
_Input4Status_Object = MibScalar
input4Status = _Input4Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 3, 13, 2),
    _Input4Status_Type()
)
input4Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    input4Status.setStatus("current")
_Input4Pat_Type = DisplayString
_Input4Pat_Object = MibScalar
input4Pat = _Input4Pat_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 3, 13, 3),
    _Input4Pat_Type()
)
input4Pat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    input4Pat.setStatus("current")
_Asi1_ObjectIdentity = ObjectIdentity
asi1 = _Asi1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 4)
)
_Asi1Enable_Type = DisabledEnabled
_Asi1Enable_Object = MibScalar
asi1Enable = _Asi1Enable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 4, 1),
    _Asi1Enable_Type()
)
asi1Enable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    asi1Enable.setStatus("current")
_Asi2_ObjectIdentity = ObjectIdentity
asi2 = _Asi2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 5)
)
_Asi2Enable_Type = DisabledEnabled
_Asi2Enable_Object = MibScalar
asi2Enable = _Asi2Enable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 5, 1),
    _Asi2Enable_Type()
)
asi2Enable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    asi2Enable.setStatus("current")
_Eti1_ObjectIdentity = ObjectIdentity
eti1 = _Eti1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 6)
)
_Eti1Enable_Type = DisabledEnabled
_Eti1Enable_Object = MibScalar
eti1Enable = _Eti1Enable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 6, 1),
    _Eti1Enable_Type()
)
eti1Enable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    eti1Enable.setStatus("current")


class _Eti1DetectedLayer_Type(Integer32):
    """Custom type eti1DetectedLayer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("etiNi", 1),
          ("etiNa5592", 2),
          ("etiNa5376", 3))
    )


_Eti1DetectedLayer_Type.__name__ = "Integer32"
_Eti1DetectedLayer_Object = MibScalar
eti1DetectedLayer = _Eti1DetectedLayer_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 6, 10),
    _Eti1DetectedLayer_Type()
)
eti1DetectedLayer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eti1DetectedLayer.setStatus("current")
_Eti1InputBitrate_Type = FloatingPoint
_Eti1InputBitrate_Object = MibScalar
eti1InputBitrate = _Eti1InputBitrate_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 6, 15),
    _Eti1InputBitrate_Type()
)
eti1InputBitrate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eti1InputBitrate.setStatus("current")
if mibBuilder.loadTexts:
    eti1InputBitrate.setUnits("bps")
_Eti1Statistics_ObjectIdentity = ObjectIdentity
eti1Statistics = _Eti1Statistics_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 6, 20)
)
_Eti1CorrectedRSCodewords_Type = Unsigned32
_Eti1CorrectedRSCodewords_Object = MibScalar
eti1CorrectedRSCodewords = _Eti1CorrectedRSCodewords_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 6, 20, 1),
    _Eti1CorrectedRSCodewords_Type()
)
eti1CorrectedRSCodewords.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eti1CorrectedRSCodewords.setStatus("current")
_Eti1NotCorrectedRSCodewords_Type = Unsigned32
_Eti1NotCorrectedRSCodewords_Object = MibScalar
eti1NotCorrectedRSCodewords = _Eti1NotCorrectedRSCodewords_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 6, 20, 5),
    _Eti1NotCorrectedRSCodewords_Type()
)
eti1NotCorrectedRSCodewords.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eti1NotCorrectedRSCodewords.setStatus("current")
_Eti1TimeWithoutService_Type = FloatingPoint
_Eti1TimeWithoutService_Object = MibScalar
eti1TimeWithoutService = _Eti1TimeWithoutService_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 6, 20, 7),
    _Eti1TimeWithoutService_Type()
)
eti1TimeWithoutService.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eti1TimeWithoutService.setStatus("current")
_Eti1RxStatisticsReset_Type = NullApply
_Eti1RxStatisticsReset_Object = MibScalar
eti1RxStatisticsReset = _Eti1RxStatisticsReset_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 6, 20, 10),
    _Eti1RxStatisticsReset_Type()
)
eti1RxStatisticsReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    eti1RxStatisticsReset.setStatus("current")
_Eti2_ObjectIdentity = ObjectIdentity
eti2 = _Eti2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 7)
)
_Eti2Enable_Type = DisabledEnabled
_Eti2Enable_Object = MibScalar
eti2Enable = _Eti2Enable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 7, 1),
    _Eti2Enable_Type()
)
eti2Enable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    eti2Enable.setStatus("current")


class _Eti2DetectedLayer_Type(Integer32):
    """Custom type eti2DetectedLayer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("etiNi", 1),
          ("etiNa5592", 2),
          ("etiNa5376", 3))
    )


_Eti2DetectedLayer_Type.__name__ = "Integer32"
_Eti2DetectedLayer_Object = MibScalar
eti2DetectedLayer = _Eti2DetectedLayer_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 7, 10),
    _Eti2DetectedLayer_Type()
)
eti2DetectedLayer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eti2DetectedLayer.setStatus("current")
_Eti2InputBitrate_Type = FloatingPoint
_Eti2InputBitrate_Object = MibScalar
eti2InputBitrate = _Eti2InputBitrate_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 7, 15),
    _Eti2InputBitrate_Type()
)
eti2InputBitrate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eti2InputBitrate.setStatus("current")
if mibBuilder.loadTexts:
    eti2InputBitrate.setUnits("bps")
_Eti2Statistics_ObjectIdentity = ObjectIdentity
eti2Statistics = _Eti2Statistics_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 7, 20)
)
_Eti2CorrectedRSCodewords_Type = Unsigned32
_Eti2CorrectedRSCodewords_Object = MibScalar
eti2CorrectedRSCodewords = _Eti2CorrectedRSCodewords_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 7, 20, 1),
    _Eti2CorrectedRSCodewords_Type()
)
eti2CorrectedRSCodewords.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eti2CorrectedRSCodewords.setStatus("current")
_Eti2NotCorrectedRSCodewords_Type = Unsigned32
_Eti2NotCorrectedRSCodewords_Object = MibScalar
eti2NotCorrectedRSCodewords = _Eti2NotCorrectedRSCodewords_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 7, 20, 5),
    _Eti2NotCorrectedRSCodewords_Type()
)
eti2NotCorrectedRSCodewords.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eti2NotCorrectedRSCodewords.setStatus("current")
_Eti2TimeWithoutService_Type = FloatingPoint
_Eti2TimeWithoutService_Object = MibScalar
eti2TimeWithoutService = _Eti2TimeWithoutService_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 7, 20, 7),
    _Eti2TimeWithoutService_Type()
)
eti2TimeWithoutService.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eti2TimeWithoutService.setStatus("current")
_Eti2RxStatisticsReset_Type = NullApply
_Eti2RxStatisticsReset_Object = MibScalar
eti2RxStatisticsReset = _Eti2RxStatisticsReset_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 7, 20, 10),
    _Eti2RxStatisticsReset_Type()
)
eti2RxStatisticsReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    eti2RxStatisticsReset.setStatus("current")
_DttReceiver1_ObjectIdentity = ObjectIdentity
dttReceiver1 = _DttReceiver1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10)
)
_DttReceiver1Enable_Type = DisabledEnabled
_DttReceiver1Enable_Object = MibScalar
dttReceiver1Enable = _DttReceiver1Enable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 5),
    _DttReceiver1Enable_Type()
)
dttReceiver1Enable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dttReceiver1Enable.setStatus("current")


class _DttReceiver1Standard_Type(Integer32):
    """Custom type dttReceiver1Standard based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dvbt", 0),
          ("dvbt2", 1),
          ("isdbt", 2))
    )


_DttReceiver1Standard_Type.__name__ = "Integer32"
_DttReceiver1Standard_Object = MibScalar
dttReceiver1Standard = _DttReceiver1Standard_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 10),
    _DttReceiver1Standard_Type()
)
dttReceiver1Standard.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dttReceiver1Standard.setStatus("current")


class _DttReceiver1Bandwidth_Type(Integer32):
    """Custom type dttReceiver1Bandwidth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("bw6Mhz", 6),
          ("bw7Mhz", 7),
          ("bw8Mhz", 8))
    )


_DttReceiver1Bandwidth_Type.__name__ = "Integer32"
_DttReceiver1Bandwidth_Object = MibScalar
dttReceiver1Bandwidth = _DttReceiver1Bandwidth_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 15),
    _DttReceiver1Bandwidth_Type()
)
dttReceiver1Bandwidth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dttReceiver1Bandwidth.setStatus("current")


class _DttReceiver1InputFrequencyMode_Type(Integer32):
    """Custom type dttReceiver1InputFrequencyMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("channel", 0),
          ("frequency", 1))
    )


_DttReceiver1InputFrequencyMode_Type.__name__ = "Integer32"
_DttReceiver1InputFrequencyMode_Object = MibScalar
dttReceiver1InputFrequencyMode = _DttReceiver1InputFrequencyMode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 20),
    _DttReceiver1InputFrequencyMode_Type()
)
dttReceiver1InputFrequencyMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dttReceiver1InputFrequencyMode.setStatus("current")


class _DttReceiver1PlpId_Type(Unsigned32):
    """Custom type dttReceiver1PlpId based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_DttReceiver1PlpId_Type.__name__ = "Unsigned32"
_DttReceiver1PlpId_Object = MibScalar
dttReceiver1PlpId = _DttReceiver1PlpId_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 25),
    _DttReceiver1PlpId_Type()
)
dttReceiver1PlpId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dttReceiver1PlpId.setStatus("current")
_DttReceiver1BerMute_Type = DisabledEnabled
_DttReceiver1BerMute_Object = MibScalar
dttReceiver1BerMute = _DttReceiver1BerMute_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 30),
    _DttReceiver1BerMute_Type()
)
dttReceiver1BerMute.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dttReceiver1BerMute.setStatus("current")
_DttReceiver1ChannelMode_ObjectIdentity = ObjectIdentity
dttReceiver1ChannelMode = _DttReceiver1ChannelMode_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 50)
)


class _DttReceiver1Channel_Type(Unsigned32):
    """Custom type dttReceiver1Channel based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(14, 78),
    )


_DttReceiver1Channel_Type.__name__ = "Unsigned32"
_DttReceiver1Channel_Object = MibScalar
dttReceiver1Channel = _DttReceiver1Channel_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 50, 5),
    _DttReceiver1Channel_Type()
)
dttReceiver1Channel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dttReceiver1Channel.setStatus("current")


class _DttReceiver1ChannelOffset_Type(Integer32):
    """Custom type dttReceiver1ChannelOffset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-4, 4),
    )


_DttReceiver1ChannelOffset_Type.__name__ = "Integer32"
_DttReceiver1ChannelOffset_Object = MibScalar
dttReceiver1ChannelOffset = _DttReceiver1ChannelOffset_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 50, 10),
    _DttReceiver1ChannelOffset_Type()
)
dttReceiver1ChannelOffset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dttReceiver1ChannelOffset.setStatus("current")


class _DttReceiver1ChannelResolution_Type(Integer32):
    """Custom type dttReceiver1ChannelResolution based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("resolution1div6", 0),
          ("resolution1div7", 1),
          ("resolution1div8", 2))
    )


_DttReceiver1ChannelResolution_Type.__name__ = "Integer32"
_DttReceiver1ChannelResolution_Object = MibScalar
dttReceiver1ChannelResolution = _DttReceiver1ChannelResolution_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 50, 15),
    _DttReceiver1ChannelResolution_Type()
)
dttReceiver1ChannelResolution.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dttReceiver1ChannelResolution.setStatus("current")
if mibBuilder.loadTexts:
    dttReceiver1ChannelResolution.setUnits("MHz")
_DttReceiver1CentralFrequencyMode_ObjectIdentity = ObjectIdentity
dttReceiver1CentralFrequencyMode = _DttReceiver1CentralFrequencyMode_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 55)
)


class _DttReceiver1Frequency_Type(Unsigned32):
    """Custom type dttReceiver1Frequency based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(42000000, 862000000),
    )


_DttReceiver1Frequency_Type.__name__ = "Unsigned32"
_DttReceiver1Frequency_Object = MibScalar
dttReceiver1Frequency = _DttReceiver1Frequency_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 55, 5),
    _DttReceiver1Frequency_Type()
)
dttReceiver1Frequency.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dttReceiver1Frequency.setStatus("current")
if mibBuilder.loadTexts:
    dttReceiver1Frequency.setUnits("Hz")
_DttReceiver1Status_ObjectIdentity = ObjectIdentity
dttReceiver1Status = _DttReceiver1Status_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 60)
)


class _DttReceiver1StatusReceiver_Type(Integer32):
    """Custom type dttReceiver1StatusReceiver based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unlocked", 0),
          ("locked", 1),
          ("disabled", 2))
    )


_DttReceiver1StatusReceiver_Type.__name__ = "Integer32"
_DttReceiver1StatusReceiver_Object = MibScalar
dttReceiver1StatusReceiver = _DttReceiver1StatusReceiver_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 60, 5),
    _DttReceiver1StatusReceiver_Type()
)
dttReceiver1StatusReceiver.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttReceiver1StatusReceiver.setStatus("current")
_DttReceiver1InputFrequency_Type = DisplayString
_DttReceiver1InputFrequency_Object = MibScalar
dttReceiver1InputFrequency = _DttReceiver1InputFrequency_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 60, 10),
    _DttReceiver1InputFrequency_Type()
)
dttReceiver1InputFrequency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttReceiver1InputFrequency.setStatus("current")
if mibBuilder.loadTexts:
    dttReceiver1InputFrequency.setUnits("Hz")
_DttReceiver1DvbT_ObjectIdentity = ObjectIdentity
dttReceiver1DvbT = _DttReceiver1DvbT_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 65)
)
_DttReceiver1TModulation_ObjectIdentity = ObjectIdentity
dttReceiver1TModulation = _DttReceiver1TModulation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 65, 5)
)


class _DttReceiver1Constellation_Type(Integer32):
    """Custom type dttReceiver1Constellation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("qpsk", 1),
          ("qam16", 2),
          ("qam64", 3),
          ("reserved", 4))
    )


_DttReceiver1Constellation_Type.__name__ = "Integer32"
_DttReceiver1Constellation_Object = MibScalar
dttReceiver1Constellation = _DttReceiver1Constellation_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 65, 5, 5),
    _DttReceiver1Constellation_Type()
)
dttReceiver1Constellation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttReceiver1Constellation.setStatus("current")


class _DttReceiver1Fec_Type(Integer32):
    """Custom type dttReceiver1Fec based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("fec1div2", 1),
          ("fec2div3", 2),
          ("fec3div4", 3),
          ("fec5div6", 4),
          ("fec7div8", 5),
          ("reserved6", 6),
          ("reserved7", 7),
          ("reserved8", 8))
    )


_DttReceiver1Fec_Type.__name__ = "Integer32"
_DttReceiver1Fec_Object = MibScalar
dttReceiver1Fec = _DttReceiver1Fec_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 65, 5, 10),
    _DttReceiver1Fec_Type()
)
dttReceiver1Fec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttReceiver1Fec.setStatus("current")


class _DttReceiver1GuardInterval_Type(Integer32):
    """Custom type dttReceiver1GuardInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("null8", 0),
          ("guardInterval1div32", 1),
          ("guardInterval1div16", 2),
          ("guardInterval1div8", 3),
          ("guardInterval1div4", 4))
    )


_DttReceiver1GuardInterval_Type.__name__ = "Integer32"
_DttReceiver1GuardInterval_Object = MibScalar
dttReceiver1GuardInterval = _DttReceiver1GuardInterval_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 65, 5, 15),
    _DttReceiver1GuardInterval_Type()
)
dttReceiver1GuardInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttReceiver1GuardInterval.setStatus("current")


class _DttReceiver1Fft_Type(Integer32):
    """Custom type dttReceiver1Fft based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("fft2K", 1),
          ("fft8K", 2),
          ("reserved1", 3),
          ("reserved2", 4))
    )


_DttReceiver1Fft_Type.__name__ = "Integer32"
_DttReceiver1Fft_Object = MibScalar
dttReceiver1Fft = _DttReceiver1Fft_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 65, 5, 20),
    _DttReceiver1Fft_Type()
)
dttReceiver1Fft.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttReceiver1Fft.setStatus("current")


class _DttReceiver1CellId_Type(Unsigned32):
    """Custom type dttReceiver1CellId based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_DttReceiver1CellId_Type.__name__ = "Unsigned32"
_DttReceiver1CellId_Object = MibScalar
dttReceiver1CellId = _DttReceiver1CellId_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 65, 5, 25),
    _DttReceiver1CellId_Type()
)
dttReceiver1CellId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttReceiver1CellId.setStatus("current")
_DttReceiver1TMeasures_ObjectIdentity = ObjectIdentity
dttReceiver1TMeasures = _DttReceiver1TMeasures_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 65, 10)
)
_DttReceiver1Cber_Type = DisplayString
_DttReceiver1Cber_Object = MibScalar
dttReceiver1Cber = _DttReceiver1Cber_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 65, 10, 5),
    _DttReceiver1Cber_Type()
)
dttReceiver1Cber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttReceiver1Cber.setStatus("current")
_DttReceiver1Vber_Type = DisplayString
_DttReceiver1Vber_Object = MibScalar
dttReceiver1Vber = _DttReceiver1Vber_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 65, 10, 10),
    _DttReceiver1Vber_Type()
)
dttReceiver1Vber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttReceiver1Vber.setStatus("current")
_DttReceiver1DvbT2_ObjectIdentity = ObjectIdentity
dttReceiver1DvbT2 = _DttReceiver1DvbT2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 70)
)
_DttReceiver1T2System_ObjectIdentity = ObjectIdentity
dttReceiver1T2System = _DttReceiver1T2System_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 70, 5)
)


class _DttReceiver1T2Profile_Type(Integer32):
    """Custom type dttReceiver1T2Profile based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("base", 1),
          ("lite", 2),
          ("baseLite", 3))
    )


_DttReceiver1T2Profile_Type.__name__ = "Integer32"
_DttReceiver1T2Profile_Object = MibScalar
dttReceiver1T2Profile = _DttReceiver1T2Profile_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 70, 5, 5),
    _DttReceiver1T2Profile_Type()
)
dttReceiver1T2Profile.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttReceiver1T2Profile.setStatus("current")


class _DttReceiver1T2Version_Type(Integer32):
    """Custom type dttReceiver1T2Version based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("v1p1p1", 1),
          ("v1p2p1", 2),
          ("v1p3p1", 3))
    )


_DttReceiver1T2Version_Type.__name__ = "Integer32"
_DttReceiver1T2Version_Object = MibScalar
dttReceiver1T2Version = _DttReceiver1T2Version_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 70, 5, 10),
    _DttReceiver1T2Version_Type()
)
dttReceiver1T2Version.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttReceiver1T2Version.setStatus("current")


class _DttReceiver1T2CellId_Type(Unsigned32):
    """Custom type dttReceiver1T2CellId based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_DttReceiver1T2CellId_Type.__name__ = "Unsigned32"
_DttReceiver1T2CellId_Object = MibScalar
dttReceiver1T2CellId = _DttReceiver1T2CellId_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 70, 5, 15),
    _DttReceiver1T2CellId_Type()
)
dttReceiver1T2CellId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttReceiver1T2CellId.setStatus("current")


class _DttReceiver1T2NetworkId_Type(Unsigned32):
    """Custom type dttReceiver1T2NetworkId based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_DttReceiver1T2NetworkId_Type.__name__ = "Unsigned32"
_DttReceiver1T2NetworkId_Object = MibScalar
dttReceiver1T2NetworkId = _DttReceiver1T2NetworkId_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 70, 5, 20),
    _DttReceiver1T2NetworkId_Type()
)
dttReceiver1T2NetworkId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttReceiver1T2NetworkId.setStatus("current")


class _DttReceiver1T2SystemId_Type(Unsigned32):
    """Custom type dttReceiver1T2SystemId based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_DttReceiver1T2SystemId_Type.__name__ = "Unsigned32"
_DttReceiver1T2SystemId_Object = MibScalar
dttReceiver1T2SystemId = _DttReceiver1T2SystemId_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 70, 5, 25),
    _DttReceiver1T2SystemId_Type()
)
dttReceiver1T2SystemId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttReceiver1T2SystemId.setStatus("current")
_DttReceiver1T2Frame_ObjectIdentity = ObjectIdentity
dttReceiver1T2Frame = _DttReceiver1T2Frame_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 70, 15)
)


class _DttRx1T2L1SignallingModulation_Type(Integer32):
    """Custom type dttRx1T2L1SignallingModulation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("bpsk", 1),
          ("qpsk", 2),
          ("qam16", 3),
          ("qam64", 4))
    )


_DttRx1T2L1SignallingModulation_Type.__name__ = "Integer32"
_DttRx1T2L1SignallingModulation_Object = MibScalar
dttRx1T2L1SignallingModulation = _DttRx1T2L1SignallingModulation_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 70, 15, 5),
    _DttRx1T2L1SignallingModulation_Type()
)
dttRx1T2L1SignallingModulation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1T2L1SignallingModulation.setStatus("current")


class _DttRx1T2L1PostScrambling_Type(Integer32):
    """Custom type dttRx1T2L1PostScrambling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("off", 1),
          ("on", 2))
    )


_DttRx1T2L1PostScrambling_Type.__name__ = "Integer32"
_DttRx1T2L1PostScrambling_Object = MibScalar
dttRx1T2L1PostScrambling = _DttRx1T2L1PostScrambling_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 70, 15, 10),
    _DttRx1T2L1PostScrambling_Type()
)
dttRx1T2L1PostScrambling.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1T2L1PostScrambling.setStatus("current")


class _DttRx1T2PreambleFormat_Type(Integer32):
    """Custom type dttRx1T2PreambleFormat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("siso", 1),
          ("miso", 2))
    )


_DttRx1T2PreambleFormat_Type.__name__ = "Integer32"
_DttRx1T2PreambleFormat_Object = MibScalar
dttRx1T2PreambleFormat = _DttRx1T2PreambleFormat_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 70, 15, 15),
    _DttRx1T2PreambleFormat_Type()
)
dttRx1T2PreambleFormat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1T2PreambleFormat.setStatus("current")


class _DttRx1T2ExtendedCarrierMode_Type(Integer32):
    """Custom type dttRx1T2ExtendedCarrierMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("disable", 1),
          ("enable", 2))
    )


_DttRx1T2ExtendedCarrierMode_Type.__name__ = "Integer32"
_DttRx1T2ExtendedCarrierMode_Object = MibScalar
dttRx1T2ExtendedCarrierMode = _DttRx1T2ExtendedCarrierMode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 70, 15, 20),
    _DttRx1T2ExtendedCarrierMode_Type()
)
dttRx1T2ExtendedCarrierMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1T2ExtendedCarrierMode.setStatus("current")


class _DttRx1T2FftSize_Type(Integer32):
    """Custom type dttRx1T2FftSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("fft2K", 1),
          ("fft8K", 2),
          ("fft4K", 3),
          ("fft1K", 4),
          ("fft16K", 5),
          ("fft32K", 6))
    )


_DttRx1T2FftSize_Type.__name__ = "Integer32"
_DttRx1T2FftSize_Object = MibScalar
dttRx1T2FftSize = _DttRx1T2FftSize_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 70, 15, 25),
    _DttRx1T2FftSize_Type()
)
dttRx1T2FftSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1T2FftSize.setStatus("current")


class _DttRx1T2GuardInterval_Type(Integer32):
    """Custom type dttRx1T2GuardInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("interval1div32", 1),
          ("interval1div16", 2),
          ("interval1div8", 3),
          ("interval1div4", 4),
          ("interval1div128", 5),
          ("interval19div128", 6),
          ("interval19div256", 7))
    )


_DttRx1T2GuardInterval_Type.__name__ = "Integer32"
_DttRx1T2GuardInterval_Object = MibScalar
dttRx1T2GuardInterval = _DttRx1T2GuardInterval_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 70, 15, 30),
    _DttRx1T2GuardInterval_Type()
)
dttRx1T2GuardInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1T2GuardInterval.setStatus("current")


class _DttRx1T2PaprReduction_Type(Integer32):
    """Custom type dttRx1T2PaprReduction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("nullTrP2", 1),
          ("ace", 2),
          ("tr", 3),
          ("aceTr", 4))
    )


_DttRx1T2PaprReduction_Type.__name__ = "Integer32"
_DttRx1T2PaprReduction_Object = MibScalar
dttRx1T2PaprReduction = _DttRx1T2PaprReduction_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 70, 15, 35),
    _DttRx1T2PaprReduction_Type()
)
dttRx1T2PaprReduction.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1T2PaprReduction.setStatus("current")


class _DttRx1T2PilotPattern_Type(Integer32):
    """Custom type dttRx1T2PilotPattern based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("pp1", 1),
          ("pp2", 2),
          ("pp3", 3),
          ("pp4", 4),
          ("pp5", 5),
          ("pp6", 6),
          ("pp7", 7),
          ("pp8", 8))
    )


_DttRx1T2PilotPattern_Type.__name__ = "Integer32"
_DttRx1T2PilotPattern_Object = MibScalar
dttRx1T2PilotPattern = _DttRx1T2PilotPattern_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 70, 15, 40),
    _DttRx1T2PilotPattern_Type()
)
dttRx1T2PilotPattern.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1T2PilotPattern.setStatus("current")


class _DttRx1T2FramesPerSuperframe_Type(Unsigned32):
    """Custom type dttRx1T2FramesPerSuperframe based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 256),
    )


_DttRx1T2FramesPerSuperframe_Type.__name__ = "Unsigned32"
_DttRx1T2FramesPerSuperframe_Object = MibScalar
dttRx1T2FramesPerSuperframe = _DttRx1T2FramesPerSuperframe_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 70, 15, 45),
    _DttRx1T2FramesPerSuperframe_Type()
)
dttRx1T2FramesPerSuperframe.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1T2FramesPerSuperframe.setStatus("current")


class _DttRx1T2OfdmSymbolsPerSuperframe_Type(Unsigned32):
    """Custom type dttRx1T2OfdmSymbolsPerSuperframe based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_DttRx1T2OfdmSymbolsPerSuperframe_Type.__name__ = "Unsigned32"
_DttRx1T2OfdmSymbolsPerSuperframe_Object = MibScalar
dttRx1T2OfdmSymbolsPerSuperframe = _DttRx1T2OfdmSymbolsPerSuperframe_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 70, 15, 50),
    _DttRx1T2OfdmSymbolsPerSuperframe_Type()
)
dttRx1T2OfdmSymbolsPerSuperframe.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1T2OfdmSymbolsPerSuperframe.setStatus("current")
_DttReceiver1T2PLP_ObjectIdentity = ObjectIdentity
dttReceiver1T2PLP = _DttReceiver1T2PLP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 70, 20)
)


class _DttRx1NumberOfPlps_Type(Unsigned32):
    """Custom type dttRx1NumberOfPlps based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_DttRx1NumberOfPlps_Type.__name__ = "Unsigned32"
_DttRx1NumberOfPlps_Object = MibScalar
dttRx1NumberOfPlps = _DttRx1NumberOfPlps_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 70, 20, 5),
    _DttRx1NumberOfPlps_Type()
)
dttRx1NumberOfPlps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1NumberOfPlps.setStatus("current")


class _DttRx1PlpId_Type(Unsigned32):
    """Custom type dttRx1PlpId based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_DttRx1PlpId_Type.__name__ = "Unsigned32"
_DttRx1PlpId_Object = MibScalar
dttRx1PlpId = _DttRx1PlpId_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 70, 20, 10),
    _DttRx1PlpId_Type()
)
dttRx1PlpId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1PlpId.setStatus("current")


class _DttRx1T2PlpType_Type(Integer32):
    """Custom type dttRx1T2PlpType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("common", 1),
          ("data1", 2),
          ("data2", 3))
    )


_DttRx1T2PlpType_Type.__name__ = "Integer32"
_DttRx1T2PlpType_Object = MibScalar
dttRx1T2PlpType = _DttRx1T2PlpType_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 70, 20, 15),
    _DttRx1T2PlpType_Type()
)
dttRx1T2PlpType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1T2PlpType.setStatus("current")


class _DttRx1T2PlpMode_Type(Integer32):
    """Custom type dttRx1T2PlpMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("nm", 1),
          ("hem", 2))
    )


_DttRx1T2PlpMode_Type.__name__ = "Integer32"
_DttRx1T2PlpMode_Object = MibScalar
dttRx1T2PlpMode = _DttRx1T2PlpMode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 70, 20, 20),
    _DttRx1T2PlpMode_Type()
)
dttRx1T2PlpMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1T2PlpMode.setStatus("current")


class _DttRx1T2PlpGroupId_Type(Unsigned32):
    """Custom type dttRx1T2PlpGroupId based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_DttRx1T2PlpGroupId_Type.__name__ = "Unsigned32"
_DttRx1T2PlpGroupId_Object = MibScalar
dttRx1T2PlpGroupId = _DttRx1T2PlpGroupId_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 70, 20, 25),
    _DttRx1T2PlpGroupId_Type()
)
dttRx1T2PlpGroupId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1T2PlpGroupId.setStatus("current")


class _DttRx1T2PlpConstellation_Type(Integer32):
    """Custom type dttRx1T2PlpConstellation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("qpsk", 1),
          ("qam16", 2),
          ("qam64", 3),
          ("qam256", 4))
    )


_DttRx1T2PlpConstellation_Type.__name__ = "Integer32"
_DttRx1T2PlpConstellation_Object = MibScalar
dttRx1T2PlpConstellation = _DttRx1T2PlpConstellation_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 70, 20, 30),
    _DttRx1T2PlpConstellation_Type()
)
dttRx1T2PlpConstellation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1T2PlpConstellation.setStatus("current")


class _DttRx1T2PlpRotatedConstellation_Type(Integer32):
    """Custom type dttRx1T2PlpRotatedConstellation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("disable", 1),
          ("enable", 2))
    )


_DttRx1T2PlpRotatedConstellation_Type.__name__ = "Integer32"
_DttRx1T2PlpRotatedConstellation_Object = MibScalar
dttRx1T2PlpRotatedConstellation = _DttRx1T2PlpRotatedConstellation_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 70, 20, 35),
    _DttRx1T2PlpRotatedConstellation_Type()
)
dttRx1T2PlpRotatedConstellation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1T2PlpRotatedConstellation.setStatus("current")


class _DttRx1T2FecType_Type(Integer32):
    """Custom type dttRx1T2FecType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("ldpc16k", 1),
          ("ldpc64k", 2))
    )


_DttRx1T2FecType_Type.__name__ = "Integer32"
_DttRx1T2FecType_Object = MibScalar
dttRx1T2FecType = _DttRx1T2FecType_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 70, 20, 40),
    _DttRx1T2FecType_Type()
)
dttRx1T2FecType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1T2FecType.setStatus("current")


class _DttRx1T2CodeRate_Type(Integer32):
    """Custom type dttRx1T2CodeRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("rate1div2", 1),
          ("rate3div5", 2),
          ("rate2div3", 3),
          ("rate3div4", 4),
          ("rate4div5", 5),
          ("rate5div6", 6),
          ("rate1div3", 7),
          ("rate2div5", 8))
    )


_DttRx1T2CodeRate_Type.__name__ = "Integer32"
_DttRx1T2CodeRate_Object = MibScalar
dttRx1T2CodeRate = _DttRx1T2CodeRate_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 70, 20, 45),
    _DttRx1T2CodeRate_Type()
)
dttRx1T2CodeRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1T2CodeRate.setStatus("current")


class _DttRx1T2NumberOfFecBlocks_Type(Unsigned32):
    """Custom type dttRx1T2NumberOfFecBlocks based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_DttRx1T2NumberOfFecBlocks_Type.__name__ = "Unsigned32"
_DttRx1T2NumberOfFecBlocks_Object = MibScalar
dttRx1T2NumberOfFecBlocks = _DttRx1T2NumberOfFecBlocks_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 70, 20, 50),
    _DttRx1T2NumberOfFecBlocks_Type()
)
dttRx1T2NumberOfFecBlocks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1T2NumberOfFecBlocks.setStatus("current")


class _DttRx1T2TypeOfTimeInvervaling_Type(Integer32):
    """Custom type dttRx1T2TypeOfTimeInvervaling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("simple", 1),
          ("multiple", 2))
    )


_DttRx1T2TypeOfTimeInvervaling_Type.__name__ = "Integer32"
_DttRx1T2TypeOfTimeInvervaling_Object = MibScalar
dttRx1T2TypeOfTimeInvervaling = _DttRx1T2TypeOfTimeInvervaling_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 70, 20, 55),
    _DttRx1T2TypeOfTimeInvervaling_Type()
)
dttRx1T2TypeOfTimeInvervaling.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1T2TypeOfTimeInvervaling.setStatus("current")


class _DttRx1T2LengthOfTimeInvervaling_Type(Unsigned32):
    """Custom type dttRx1T2LengthOfTimeInvervaling based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_DttRx1T2LengthOfTimeInvervaling_Type.__name__ = "Unsigned32"
_DttRx1T2LengthOfTimeInvervaling_Object = MibScalar
dttRx1T2LengthOfTimeInvervaling = _DttRx1T2LengthOfTimeInvervaling_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 70, 20, 60),
    _DttRx1T2LengthOfTimeInvervaling_Type()
)
dttRx1T2LengthOfTimeInvervaling.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1T2LengthOfTimeInvervaling.setStatus("current")


class _DttRx1T2InBandSignalling_Type(Integer32):
    """Custom type dttRx1T2InBandSignalling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("b", 1),
          ("a", 2),
          ("ab", 3))
    )


_DttRx1T2InBandSignalling_Type.__name__ = "Integer32"
_DttRx1T2InBandSignalling_Object = MibScalar
dttRx1T2InBandSignalling = _DttRx1T2InBandSignalling_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 70, 20, 65),
    _DttRx1T2InBandSignalling_Type()
)
dttRx1T2InBandSignalling.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1T2InBandSignalling.setStatus("current")
_DttReceiver1T2Measures_ObjectIdentity = ObjectIdentity
dttReceiver1T2Measures = _DttReceiver1T2Measures_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 70, 25)
)
_DttRx1T2BerBeforeLdpc_Type = DisplayString
_DttRx1T2BerBeforeLdpc_Object = MibScalar
dttRx1T2BerBeforeLdpc = _DttRx1T2BerBeforeLdpc_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 70, 25, 5),
    _DttRx1T2BerBeforeLdpc_Type()
)
dttRx1T2BerBeforeLdpc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1T2BerBeforeLdpc.setStatus("current")
_DttRx1T2BerBeforeBch_Type = DisplayString
_DttRx1T2BerBeforeBch_Object = MibScalar
dttRx1T2BerBeforeBch = _DttRx1T2BerBeforeBch_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 70, 25, 10),
    _DttRx1T2BerBeforeBch_Type()
)
dttRx1T2BerBeforeBch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1T2BerBeforeBch.setStatus("current")
_DttRx1T2BbframeErrorRatio_Type = DisplayString
_DttRx1T2BbframeErrorRatio_Object = MibScalar
dttRx1T2BbframeErrorRatio = _DttRx1T2BbframeErrorRatio_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 70, 25, 15),
    _DttRx1T2BbframeErrorRatio_Type()
)
dttRx1T2BbframeErrorRatio.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1T2BbframeErrorRatio.setStatus("current")
_DttReceiver1Isdbt_ObjectIdentity = ObjectIdentity
dttReceiver1Isdbt = _DttReceiver1Isdbt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 75)
)
_DttReceiver1IsdbtSystem_ObjectIdentity = ObjectIdentity
dttReceiver1IsdbtSystem = _DttReceiver1IsdbtSystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 75, 5)
)


class _DttRx1IsdbtSystem_Type(Integer32):
    """Custom type dttRx1IsdbtSystem based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("isdb", 1),
          ("isdbTsba", 2),
          ("reserved2", 3),
          ("reserved3", 4))
    )


_DttRx1IsdbtSystem_Type.__name__ = "Integer32"
_DttRx1IsdbtSystem_Object = MibScalar
dttRx1IsdbtSystem = _DttRx1IsdbtSystem_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 75, 5, 5),
    _DttRx1IsdbtSystem_Type()
)
dttRx1IsdbtSystem.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1IsdbtSystem.setStatus("current")
_DttRx1IsdbtMode_Type = Unsigned32
_DttRx1IsdbtMode_Object = MibScalar
dttRx1IsdbtMode = _DttRx1IsdbtMode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 75, 5, 10),
    _DttRx1IsdbtMode_Type()
)
dttRx1IsdbtMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1IsdbtMode.setStatus("current")


class _DttRx1IsdbtGuard_Type(Integer32):
    """Custom type dttRx1IsdbtGuard based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("guard1div32", 1),
          ("guard1div16", 2),
          ("guard1div8", 3),
          ("guard1div4", 4),
          ("unknown", 5))
    )


_DttRx1IsdbtGuard_Type.__name__ = "Integer32"
_DttRx1IsdbtGuard_Object = MibScalar
dttRx1IsdbtGuard = _DttRx1IsdbtGuard_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 75, 5, 15),
    _DttRx1IsdbtGuard_Type()
)
dttRx1IsdbtGuard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1IsdbtGuard.setStatus("current")


class _DttRx1IsdbtEws_Type(Integer32):
    """Custom type dttRx1IsdbtEws based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("off", 1),
          ("on", 2))
    )


_DttRx1IsdbtEws_Type.__name__ = "Integer32"
_DttRx1IsdbtEws_Object = MibScalar
dttRx1IsdbtEws = _DttRx1IsdbtEws_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 75, 5, 20),
    _DttRx1IsdbtEws_Type()
)
dttRx1IsdbtEws.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1IsdbtEws.setStatus("current")


class _DttRx1IsdbtPartialRx_Type(Integer32):
    """Custom type dttRx1IsdbtPartialRx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("off", 1),
          ("on", 2))
    )


_DttRx1IsdbtPartialRx_Type.__name__ = "Integer32"
_DttRx1IsdbtPartialRx_Object = MibScalar
dttRx1IsdbtPartialRx = _DttRx1IsdbtPartialRx_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 75, 5, 25),
    _DttRx1IsdbtPartialRx_Type()
)
dttRx1IsdbtPartialRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1IsdbtPartialRx.setStatus("current")
_DttReceiver1IsdbtLayerA_ObjectIdentity = ObjectIdentity
dttReceiver1IsdbtLayerA = _DttReceiver1IsdbtLayerA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 75, 15)
)
_DttRx1IsdbtLASegments_Type = Unsigned32
_DttRx1IsdbtLASegments_Object = MibScalar
dttRx1IsdbtLASegments = _DttRx1IsdbtLASegments_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 75, 15, 5),
    _DttRx1IsdbtLASegments_Type()
)
dttRx1IsdbtLASegments.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1IsdbtLASegments.setStatus("current")
_DttRx1IsdbtLAInterleaveLength_Type = Unsigned32
_DttRx1IsdbtLAInterleaveLength_Object = MibScalar
dttRx1IsdbtLAInterleaveLength = _DttRx1IsdbtLAInterleaveLength_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 75, 15, 10),
    _DttRx1IsdbtLAInterleaveLength_Type()
)
dttRx1IsdbtLAInterleaveLength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1IsdbtLAInterleaveLength.setStatus("current")
_DttRx1IsdbtLAConstellation_Type = IsdbtLayerConstellation
_DttRx1IsdbtLAConstellation_Object = MibScalar
dttRx1IsdbtLAConstellation = _DttRx1IsdbtLAConstellation_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 75, 15, 15),
    _DttRx1IsdbtLAConstellation_Type()
)
dttRx1IsdbtLAConstellation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1IsdbtLAConstellation.setStatus("current")
_DttRx1IsdbtLACodeRate_Type = IsdbtLayerCodeRate
_DttRx1IsdbtLACodeRate_Object = MibScalar
dttRx1IsdbtLACodeRate = _DttRx1IsdbtLACodeRate_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 75, 15, 20),
    _DttRx1IsdbtLACodeRate_Type()
)
dttRx1IsdbtLACodeRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1IsdbtLACodeRate.setStatus("current")
_DttRx1IsdbtLACber_Type = DisplayString
_DttRx1IsdbtLACber_Object = MibScalar
dttRx1IsdbtLACber = _DttRx1IsdbtLACber_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 75, 15, 23),
    _DttRx1IsdbtLACber_Type()
)
dttRx1IsdbtLACber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1IsdbtLACber.setStatus("current")
_DttRx1IsdbtLABERbeforeRS_Type = DisplayString
_DttRx1IsdbtLABERbeforeRS_Object = MibScalar
dttRx1IsdbtLABERbeforeRS = _DttRx1IsdbtLABERbeforeRS_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 75, 15, 25),
    _DttRx1IsdbtLABERbeforeRS_Type()
)
dttRx1IsdbtLABERbeforeRS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1IsdbtLABERbeforeRS.setStatus("current")
_DttReceiver1IsdbtLayerB_ObjectIdentity = ObjectIdentity
dttReceiver1IsdbtLayerB = _DttReceiver1IsdbtLayerB_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 75, 20)
)
_DttRx1IsdbtLBSegments_Type = Unsigned32
_DttRx1IsdbtLBSegments_Object = MibScalar
dttRx1IsdbtLBSegments = _DttRx1IsdbtLBSegments_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 75, 20, 5),
    _DttRx1IsdbtLBSegments_Type()
)
dttRx1IsdbtLBSegments.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1IsdbtLBSegments.setStatus("current")
_DttRx1IsdbtLBInterleaveLength_Type = Unsigned32
_DttRx1IsdbtLBInterleaveLength_Object = MibScalar
dttRx1IsdbtLBInterleaveLength = _DttRx1IsdbtLBInterleaveLength_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 75, 20, 10),
    _DttRx1IsdbtLBInterleaveLength_Type()
)
dttRx1IsdbtLBInterleaveLength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1IsdbtLBInterleaveLength.setStatus("current")
_DttRx1IsdbtLBConstellation_Type = IsdbtLayerConstellation
_DttRx1IsdbtLBConstellation_Object = MibScalar
dttRx1IsdbtLBConstellation = _DttRx1IsdbtLBConstellation_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 75, 20, 15),
    _DttRx1IsdbtLBConstellation_Type()
)
dttRx1IsdbtLBConstellation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1IsdbtLBConstellation.setStatus("current")
_DttRx1IsdbtLBCodeRate_Type = IsdbtLayerCodeRate
_DttRx1IsdbtLBCodeRate_Object = MibScalar
dttRx1IsdbtLBCodeRate = _DttRx1IsdbtLBCodeRate_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 75, 20, 20),
    _DttRx1IsdbtLBCodeRate_Type()
)
dttRx1IsdbtLBCodeRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1IsdbtLBCodeRate.setStatus("current")
_DttRx1IsdbtLBCber_Type = DisplayString
_DttRx1IsdbtLBCber_Object = MibScalar
dttRx1IsdbtLBCber = _DttRx1IsdbtLBCber_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 75, 20, 23),
    _DttRx1IsdbtLBCber_Type()
)
dttRx1IsdbtLBCber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1IsdbtLBCber.setStatus("current")
_DttRx1IsdbtLBBERbeforeRS_Type = DisplayString
_DttRx1IsdbtLBBERbeforeRS_Object = MibScalar
dttRx1IsdbtLBBERbeforeRS = _DttRx1IsdbtLBBERbeforeRS_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 75, 20, 25),
    _DttRx1IsdbtLBBERbeforeRS_Type()
)
dttRx1IsdbtLBBERbeforeRS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1IsdbtLBBERbeforeRS.setStatus("current")
_DttReceiver1IsdbtLayerC_ObjectIdentity = ObjectIdentity
dttReceiver1IsdbtLayerC = _DttReceiver1IsdbtLayerC_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 75, 25)
)
_DttRx1IsdbtLCSegments_Type = Unsigned32
_DttRx1IsdbtLCSegments_Object = MibScalar
dttRx1IsdbtLCSegments = _DttRx1IsdbtLCSegments_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 75, 25, 5),
    _DttRx1IsdbtLCSegments_Type()
)
dttRx1IsdbtLCSegments.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1IsdbtLCSegments.setStatus("current")
_DttRx1IsdbtLCInterleaveLength_Type = Unsigned32
_DttRx1IsdbtLCInterleaveLength_Object = MibScalar
dttRx1IsdbtLCInterleaveLength = _DttRx1IsdbtLCInterleaveLength_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 75, 25, 10),
    _DttRx1IsdbtLCInterleaveLength_Type()
)
dttRx1IsdbtLCInterleaveLength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1IsdbtLCInterleaveLength.setStatus("current")
_DttRx1IsdbtLCConstellation_Type = IsdbtLayerConstellation
_DttRx1IsdbtLCConstellation_Object = MibScalar
dttRx1IsdbtLCConstellation = _DttRx1IsdbtLCConstellation_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 75, 25, 15),
    _DttRx1IsdbtLCConstellation_Type()
)
dttRx1IsdbtLCConstellation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1IsdbtLCConstellation.setStatus("current")
_DttRx1IsdbtLCCodeRate_Type = IsdbtLayerCodeRate
_DttRx1IsdbtLCCodeRate_Object = MibScalar
dttRx1IsdbtLCCodeRate = _DttRx1IsdbtLCCodeRate_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 75, 25, 20),
    _DttRx1IsdbtLCCodeRate_Type()
)
dttRx1IsdbtLCCodeRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1IsdbtLCCodeRate.setStatus("current")
_DttRx1IsdbtLCCber_Type = DisplayString
_DttRx1IsdbtLCCber_Object = MibScalar
dttRx1IsdbtLCCber = _DttRx1IsdbtLCCber_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 75, 25, 23),
    _DttRx1IsdbtLCCber_Type()
)
dttRx1IsdbtLCCber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1IsdbtLCCber.setStatus("current")
_DttRx1IsdbtLCBERbeforeRS_Type = DisplayString
_DttRx1IsdbtLCBERbeforeRS_Object = MibScalar
dttRx1IsdbtLCBERbeforeRS = _DttRx1IsdbtLCBERbeforeRS_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 75, 25, 25),
    _DttRx1IsdbtLCBERbeforeRS_Type()
)
dttRx1IsdbtLCBERbeforeRS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1IsdbtLCBERbeforeRS.setStatus("current")
_DttReceiver1CommonMeasures_ObjectIdentity = ObjectIdentity
dttReceiver1CommonMeasures = _DttReceiver1CommonMeasures_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 80)
)
_DttRx1Mer_Type = DisplayString
_DttRx1Mer_Object = MibScalar
dttRx1Mer = _DttRx1Mer_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 80, 5),
    _DttRx1Mer_Type()
)
dttRx1Mer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1Mer.setStatus("current")
if mibBuilder.loadTexts:
    dttRx1Mer.setUnits("dB")
_DttRx1Snr_Type = DisplayString
_DttRx1Snr_Object = MibScalar
dttRx1Snr = _DttRx1Snr_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 80, 10),
    _DttRx1Snr_Type()
)
dttRx1Snr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1Snr.setStatus("current")
if mibBuilder.loadTexts:
    dttRx1Snr.setUnits("dB")
_DttRx1Level_Type = DisplayString
_DttRx1Level_Object = MibScalar
dttRx1Level = _DttRx1Level_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 10, 80, 15),
    _DttRx1Level_Type()
)
dttRx1Level.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttRx1Level.setStatus("current")
if mibBuilder.loadTexts:
    dttRx1Level.setUnits("dBm")
_DstReceiver1_ObjectIdentity = ObjectIdentity
dstReceiver1 = _DstReceiver1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15)
)
_DstReceiver1Demodulator_ObjectIdentity = ObjectIdentity
dstReceiver1Demodulator = _DstReceiver1Demodulator_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 5)
)
_DstReceiver1Enable_Type = DisabledEnabled
_DstReceiver1Enable_Object = MibScalar
dstReceiver1Enable = _DstReceiver1Enable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 5, 5),
    _DstReceiver1Enable_Type()
)
dstReceiver1Enable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dstReceiver1Enable.setStatus("current")


class _DstReceiver1Status_Type(Integer32):
    """Custom type dstReceiver1Status based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unlocked", 0),
          ("locked", 1),
          ("disabled", 2))
    )


_DstReceiver1Status_Type.__name__ = "Integer32"
_DstReceiver1Status_Object = MibScalar
dstReceiver1Status = _DstReceiver1Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 5, 10),
    _DstReceiver1Status_Type()
)
dstReceiver1Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dstReceiver1Status.setStatus("current")
_DstReceiver1Temperature_Type = FloatingPoint
_DstReceiver1Temperature_Object = MibScalar
dstReceiver1Temperature = _DstReceiver1Temperature_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 5, 15),
    _DstReceiver1Temperature_Type()
)
dstReceiver1Temperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dstReceiver1Temperature.setStatus("current")
if mibBuilder.loadTexts:
    dstReceiver1Temperature.setUnits("Celsius")
_DstReceiver1DemFrequency_ObjectIdentity = ObjectIdentity
dstReceiver1DemFrequency = _DstReceiver1DemFrequency_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 5, 20)
)


class _DstReceiver1Band_Type(Integer32):
    """Custom type dstReceiver1Band based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("ku", 0),
          ("c", 1))
    )


_DstReceiver1Band_Type.__name__ = "Integer32"
_DstReceiver1Band_Object = MibScalar
dstReceiver1Band = _DstReceiver1Band_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 5, 20, 3),
    _DstReceiver1Band_Type()
)
dstReceiver1Band.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dstReceiver1Band.setStatus("current")
_DstReceiver1Frequency_Type = FloatingPoint
_DstReceiver1Frequency_Object = MibScalar
dstReceiver1Frequency = _DstReceiver1Frequency_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 5, 20, 5),
    _DstReceiver1Frequency_Type()
)
dstReceiver1Frequency.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dstReceiver1Frequency.setStatus("current")
if mibBuilder.loadTexts:
    dstReceiver1Frequency.setUnits("MHz")


class _DstReceiver1Polarization_Type(Integer32):
    """Custom type dstReceiver1Polarization based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("vertical", 0),
          ("horizontal", 1))
    )


_DstReceiver1Polarization_Type.__name__ = "Integer32"
_DstReceiver1Polarization_Object = MibScalar
dstReceiver1Polarization = _DstReceiver1Polarization_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 5, 20, 10),
    _DstReceiver1Polarization_Type()
)
dstReceiver1Polarization.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dstReceiver1Polarization.setStatus("current")


class _DstReceiver1Satellite_Type(Integer32):
    """Custom type dstReceiver1Satellite based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("satelliteA", 0),
          ("satelliteB", 1),
          ("satelliteC", 2),
          ("satelliteD", 3))
    )


_DstReceiver1Satellite_Type.__name__ = "Integer32"
_DstReceiver1Satellite_Object = MibScalar
dstReceiver1Satellite = _DstReceiver1Satellite_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 5, 20, 15),
    _DstReceiver1Satellite_Type()
)
dstReceiver1Satellite.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dstReceiver1Satellite.setStatus("current")
_DstReceiver1DemModulation_ObjectIdentity = ObjectIdentity
dstReceiver1DemModulation = _DstReceiver1DemModulation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 5, 25)
)


class _DstReceiver1DvbMode_Type(Integer32):
    """Custom type dstReceiver1DvbMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dvbS", 1),
          ("dvbS2", 2))
    )


_DstReceiver1DvbMode_Type.__name__ = "Integer32"
_DstReceiver1DvbMode_Object = MibScalar
dstReceiver1DvbMode = _DstReceiver1DvbMode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 5, 25, 5),
    _DstReceiver1DvbMode_Type()
)
dstReceiver1DvbMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dstReceiver1DvbMode.setStatus("current")


class _DstReceiver1SymbolRateMode_Type(Integer32):
    """Custom type dstReceiver1SymbolRateMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("manual", 0),
          ("auto", 1))
    )


_DstReceiver1SymbolRateMode_Type.__name__ = "Integer32"
_DstReceiver1SymbolRateMode_Object = MibScalar
dstReceiver1SymbolRateMode = _DstReceiver1SymbolRateMode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 5, 25, 10),
    _DstReceiver1SymbolRateMode_Type()
)
dstReceiver1SymbolRateMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dstReceiver1SymbolRateMode.setStatus("current")


class _DstReceiver1ConfiguredSymbolRate_Type(Unsigned32):
    """Custom type dstReceiver1ConfiguredSymbolRate based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1000, 45000),
    )


_DstReceiver1ConfiguredSymbolRate_Type.__name__ = "Unsigned32"
_DstReceiver1ConfiguredSymbolRate_Object = MibScalar
dstReceiver1ConfiguredSymbolRate = _DstReceiver1ConfiguredSymbolRate_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 5, 25, 15),
    _DstReceiver1ConfiguredSymbolRate_Type()
)
dstReceiver1ConfiguredSymbolRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dstReceiver1ConfiguredSymbolRate.setStatus("current")
if mibBuilder.loadTexts:
    dstReceiver1ConfiguredSymbolRate.setUnits("KS/s")
_DstReceiver1MeasuredSymbolRate_Type = Unsigned32
_DstReceiver1MeasuredSymbolRate_Object = MibScalar
dstReceiver1MeasuredSymbolRate = _DstReceiver1MeasuredSymbolRate_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 5, 25, 20),
    _DstReceiver1MeasuredSymbolRate_Type()
)
dstReceiver1MeasuredSymbolRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dstReceiver1MeasuredSymbolRate.setStatus("current")
if mibBuilder.loadTexts:
    dstReceiver1MeasuredSymbolRate.setUnits("KS/s")


class _DstReceiver1Rolloff_Type(Integer32):
    """Custom type dstReceiver1Rolloff based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("rollOff035", 0),
          ("rollOff025", 1),
          ("rollOff020", 2))
    )


_DstReceiver1Rolloff_Type.__name__ = "Integer32"
_DstReceiver1Rolloff_Object = MibScalar
dstReceiver1Rolloff = _DstReceiver1Rolloff_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 5, 25, 25),
    _DstReceiver1Rolloff_Type()
)
dstReceiver1Rolloff.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dstReceiver1Rolloff.setStatus("current")
_DstReceiver1Pilots_Type = NoYes
_DstReceiver1Pilots_Object = MibScalar
dstReceiver1Pilots = _DstReceiver1Pilots_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 5, 25, 30),
    _DstReceiver1Pilots_Type()
)
dstReceiver1Pilots.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dstReceiver1Pilots.setStatus("current")


class _DstReceiver1FrameLength_Type(Integer32):
    """Custom type dstReceiver1FrameLength based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("long", 0),
          ("short", 1))
    )


_DstReceiver1FrameLength_Type.__name__ = "Integer32"
_DstReceiver1FrameLength_Object = MibScalar
dstReceiver1FrameLength = _DstReceiver1FrameLength_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 5, 25, 35),
    _DstReceiver1FrameLength_Type()
)
dstReceiver1FrameLength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dstReceiver1FrameLength.setStatus("current")


class _DstReceiver1Modulation_Type(Integer32):
    """Custom type dstReceiver1Modulation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("modQPSK", 0),
          ("mod8PSK", 1),
          ("mod16APSK", 2),
          ("mod32APSK", 3),
          ("modNull", 4))
    )


_DstReceiver1Modulation_Type.__name__ = "Integer32"
_DstReceiver1Modulation_Object = MibScalar
dstReceiver1Modulation = _DstReceiver1Modulation_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 5, 25, 40),
    _DstReceiver1Modulation_Type()
)
dstReceiver1Modulation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dstReceiver1Modulation.setStatus("current")


class _DstReceiver1Fec_Type(Integer32):
    """Custom type dstReceiver1Fec based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("fec1d2", 0),
          ("fec2d3", 1),
          ("fec3d4", 2),
          ("fec4d5", 3),
          ("fec5d6", 4),
          ("fec6d7", 5),
          ("fec7d8", 6),
          ("fec8d9", 7),
          ("fecNull", 8),
          ("fec1d4", 9),
          ("fec1d3", 10),
          ("fec2d5", 11),
          ("fec3d5", 12),
          ("fec9d10", 13))
    )


_DstReceiver1Fec_Type.__name__ = "Integer32"
_DstReceiver1Fec_Object = MibScalar
dstReceiver1Fec = _DstReceiver1Fec_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 5, 25, 45),
    _DstReceiver1Fec_Type()
)
dstReceiver1Fec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dstReceiver1Fec.setStatus("current")
_DstReceiver1DemScrambling_ObjectIdentity = ObjectIdentity
dstReceiver1DemScrambling = _DstReceiver1DemScrambling_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 5, 30)
)


class _DstReceiver1PlsMode_Type(Integer32):
    """Custom type dstReceiver1PlsMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("gols", 0),
          ("root", 1))
    )


_DstReceiver1PlsMode_Type.__name__ = "Integer32"
_DstReceiver1PlsMode_Object = MibScalar
dstReceiver1PlsMode = _DstReceiver1PlsMode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 5, 30, 5),
    _DstReceiver1PlsMode_Type()
)
dstReceiver1PlsMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dstReceiver1PlsMode.setStatus("current")


class _DstReceiver1Pls_Type(Unsigned32):
    """Custom type dstReceiver1Pls based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 262143),
    )


_DstReceiver1Pls_Type.__name__ = "Unsigned32"
_DstReceiver1Pls_Object = MibScalar
dstReceiver1Pls = _DstReceiver1Pls_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 5, 30, 10),
    _DstReceiver1Pls_Type()
)
dstReceiver1Pls.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dstReceiver1Pls.setStatus("current")
_DstReceiver1DemQuality_ObjectIdentity = ObjectIdentity
dstReceiver1DemQuality = _DstReceiver1DemQuality_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 5, 35)
)
_DstReceiver1Cber_Type = FloatingPoint
_DstReceiver1Cber_Object = MibScalar
dstReceiver1Cber = _DstReceiver1Cber_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 5, 35, 5),
    _DstReceiver1Cber_Type()
)
dstReceiver1Cber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dstReceiver1Cber.setStatus("current")
_DstReceiver1Vber_Type = FloatingPoint
_DstReceiver1Vber_Object = MibScalar
dstReceiver1Vber = _DstReceiver1Vber_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 5, 35, 10),
    _DstReceiver1Vber_Type()
)
dstReceiver1Vber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dstReceiver1Vber.setStatus("current")
_DstReceiver1Ldpc_Type = FloatingPoint
_DstReceiver1Ldpc_Object = MibScalar
dstReceiver1Ldpc = _DstReceiver1Ldpc_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 5, 35, 15),
    _DstReceiver1Ldpc_Type()
)
dstReceiver1Ldpc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dstReceiver1Ldpc.setStatus("current")
_DstReceiver1Per_Type = FloatingPoint
_DstReceiver1Per_Object = MibScalar
dstReceiver1Per = _DstReceiver1Per_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 5, 35, 20),
    _DstReceiver1Per_Type()
)
dstReceiver1Per.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dstReceiver1Per.setStatus("current")
_DstReceiver1CN_Type = FloatingPoint
_DstReceiver1CN_Object = MibScalar
dstReceiver1CN = _DstReceiver1CN_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 5, 35, 25),
    _DstReceiver1CN_Type()
)
dstReceiver1CN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dstReceiver1CN.setStatus("current")


class _DstReceiver1LinkMarginThreshold_Type(Unsigned32):
    """Custom type dstReceiver1LinkMarginThreshold based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_DstReceiver1LinkMarginThreshold_Type.__name__ = "Unsigned32"
_DstReceiver1LinkMarginThreshold_Object = MibScalar
dstReceiver1LinkMarginThreshold = _DstReceiver1LinkMarginThreshold_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 5, 35, 35),
    _DstReceiver1LinkMarginThreshold_Type()
)
dstReceiver1LinkMarginThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dstReceiver1LinkMarginThreshold.setStatus("current")
if mibBuilder.loadTexts:
    dstReceiver1LinkMarginThreshold.setUnits("dB")


class _DstReceiver1LinkMargin_Type(Unsigned32):
    """Custom type dstReceiver1LinkMargin based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_DstReceiver1LinkMargin_Type.__name__ = "Unsigned32"
_DstReceiver1LinkMargin_Object = MibScalar
dstReceiver1LinkMargin = _DstReceiver1LinkMargin_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 5, 35, 40),
    _DstReceiver1LinkMargin_Type()
)
dstReceiver1LinkMargin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dstReceiver1LinkMargin.setStatus("current")
if mibBuilder.loadTexts:
    dstReceiver1LinkMargin.setUnits("dB")


class _DstReceiver1Attenuation_Type(Unsigned32):
    """Custom type dstReceiver1Attenuation based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_DstReceiver1Attenuation_Type.__name__ = "Unsigned32"
_DstReceiver1Attenuation_Object = MibScalar
dstReceiver1Attenuation = _DstReceiver1Attenuation_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 5, 35, 42),
    _DstReceiver1Attenuation_Type()
)
dstReceiver1Attenuation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dstReceiver1Attenuation.setStatus("current")
if mibBuilder.loadTexts:
    dstReceiver1Attenuation.setUnits("dB")
_DstReceiver1Level_Type = FloatingPoint
_DstReceiver1Level_Object = MibScalar
dstReceiver1Level = _DstReceiver1Level_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 5, 35, 45),
    _DstReceiver1Level_Type()
)
dstReceiver1Level.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dstReceiver1Level.setStatus("current")
if mibBuilder.loadTexts:
    dstReceiver1Level.setUnits("dBm")
_DstReceiver1Lnb_ObjectIdentity = ObjectIdentity
dstReceiver1Lnb = _DstReceiver1Lnb_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 10)
)


class _DstReceiver1Mode_Type(Integer32):
    """Custom type dstReceiver1Mode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("single", 0),
          ("dual", 1),
          ("manual", 2))
    )


_DstReceiver1Mode_Type.__name__ = "Integer32"
_DstReceiver1Mode_Object = MibScalar
dstReceiver1Mode = _DstReceiver1Mode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 10, 5),
    _DstReceiver1Mode_Type()
)
dstReceiver1Mode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dstReceiver1Mode.setStatus("current")
_DstReceiver1LnbStatus_Type = DisplayString
_DstReceiver1LnbStatus_Object = MibScalar
dstReceiver1LnbStatus = _DstReceiver1LnbStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 10, 10),
    _DstReceiver1LnbStatus_Type()
)
dstReceiver1LnbStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dstReceiver1LnbStatus.setStatus("current")
_DstReceiver1LnbSingleDualMode_ObjectIdentity = ObjectIdentity
dstReceiver1LnbSingleDualMode = _DstReceiver1LnbSingleDualMode_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 10, 15)
)


class _DstReceiver1LnbOlLow_Type(Unsigned32):
    """Custom type dstReceiver1LnbOlLow based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_DstReceiver1LnbOlLow_Type.__name__ = "Unsigned32"
_DstReceiver1LnbOlLow_Object = MibScalar
dstReceiver1LnbOlLow = _DstReceiver1LnbOlLow_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 10, 15, 5),
    _DstReceiver1LnbOlLow_Type()
)
dstReceiver1LnbOlLow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dstReceiver1LnbOlLow.setStatus("current")


class _DstReceiver1LnbBandSwitchingFreq_Type(Unsigned32):
    """Custom type dstReceiver1LnbBandSwitchingFreq based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_DstReceiver1LnbBandSwitchingFreq_Type.__name__ = "Unsigned32"
_DstReceiver1LnbBandSwitchingFreq_Object = MibScalar
dstReceiver1LnbBandSwitchingFreq = _DstReceiver1LnbBandSwitchingFreq_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 10, 15, 10),
    _DstReceiver1LnbBandSwitchingFreq_Type()
)
dstReceiver1LnbBandSwitchingFreq.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dstReceiver1LnbBandSwitchingFreq.setStatus("current")


class _DstReceiver1LnbOlHigh_Type(Unsigned32):
    """Custom type dstReceiver1LnbOlHigh based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_DstReceiver1LnbOlHigh_Type.__name__ = "Unsigned32"
_DstReceiver1LnbOlHigh_Object = MibScalar
dstReceiver1LnbOlHigh = _DstReceiver1LnbOlHigh_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 10, 15, 15),
    _DstReceiver1LnbOlHigh_Type()
)
dstReceiver1LnbOlHigh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dstReceiver1LnbOlHigh.setStatus("current")
_DstReceiver1LnbManualMode_ObjectIdentity = ObjectIdentity
dstReceiver1LnbManualMode = _DstReceiver1LnbManualMode_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 10, 20)
)


class _DstReceiver1Voltage_Type(Integer32):
    """Custom type dstReceiver1Voltage based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("lnbVoltageOff", 0),
          ("lnbVoltage13V", 1),
          ("lnbVoltage18V", 2))
    )


_DstReceiver1Voltage_Type.__name__ = "Integer32"
_DstReceiver1Voltage_Object = MibScalar
dstReceiver1Voltage = _DstReceiver1Voltage_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 10, 20, 5),
    _DstReceiver1Voltage_Type()
)
dstReceiver1Voltage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dstReceiver1Voltage.setStatus("current")


class _DstReceiver1Tone22kHz_Type(Integer32):
    """Custom type dstReceiver1Tone22kHz based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_DstReceiver1Tone22kHz_Type.__name__ = "Integer32"
_DstReceiver1Tone22kHz_Object = MibScalar
dstReceiver1Tone22kHz = _DstReceiver1Tone22kHz_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 10, 20, 10),
    _DstReceiver1Tone22kHz_Type()
)
dstReceiver1Tone22kHz.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dstReceiver1Tone22kHz.setStatus("current")


class _DstReceiver1OlManual_Type(Unsigned32):
    """Custom type dstReceiver1OlManual based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_DstReceiver1OlManual_Type.__name__ = "Unsigned32"
_DstReceiver1OlManual_Object = MibScalar
dstReceiver1OlManual = _DstReceiver1OlManual_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 10, 20, 15),
    _DstReceiver1OlManual_Type()
)
dstReceiver1OlManual.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dstReceiver1OlManual.setStatus("current")
_DstReceiver1Ts_ObjectIdentity = ObjectIdentity
dstReceiver1Ts = _DstReceiver1Ts_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 15)
)
_DstReceiver1TsAvailableIsis_Type = DisplayString
_DstReceiver1TsAvailableIsis_Object = MibScalar
dstReceiver1TsAvailableIsis = _DstReceiver1TsAvailableIsis_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 15, 5),
    _DstReceiver1TsAvailableIsis_Type()
)
dstReceiver1TsAvailableIsis.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dstReceiver1TsAvailableIsis.setStatus("current")


class _DstReceiver1TsIsi_Type(Unsigned32):
    """Custom type dstReceiver1TsIsi based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_DstReceiver1TsIsi_Type.__name__ = "Unsigned32"
_DstReceiver1TsIsi_Object = MibScalar
dstReceiver1TsIsi = _DstReceiver1TsIsi_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 15, 10),
    _DstReceiver1TsIsi_Type()
)
dstReceiver1TsIsi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dstReceiver1TsIsi.setStatus("current")
_DstReceiver1TsAsiOutput_ObjectIdentity = ObjectIdentity
dstReceiver1TsAsiOutput = _DstReceiver1TsAsiOutput_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 15, 15)
)
_DstReceiver1TsRate_Type = Unsigned32
_DstReceiver1TsRate_Object = MibScalar
dstReceiver1TsRate = _DstReceiver1TsRate_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 15, 15, 5),
    _DstReceiver1TsRate_Type()
)
dstReceiver1TsRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dstReceiver1TsRate.setStatus("current")
if mibBuilder.loadTexts:
    dstReceiver1TsRate.setUnits("bps")


class _DstReceiver1TsMode_Type(Integer32):
    """Custom type dstReceiver1TsMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("byte", 0),
          ("burst", 1))
    )


_DstReceiver1TsMode_Type.__name__ = "Integer32"
_DstReceiver1TsMode_Object = MibScalar
dstReceiver1TsMode = _DstReceiver1TsMode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 15, 15, 10),
    _DstReceiver1TsMode_Type()
)
dstReceiver1TsMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dstReceiver1TsMode.setStatus("current")
_DstReceiver1TsBiss_ObjectIdentity = ObjectIdentity
dstReceiver1TsBiss = _DstReceiver1TsBiss_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 15, 17)
)
_DstReceiver1TsBissEnable_Type = DisabledEnabled
_DstReceiver1TsBissEnable_Object = MibScalar
dstReceiver1TsBissEnable = _DstReceiver1TsBissEnable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 15, 17, 5),
    _DstReceiver1TsBissEnable_Type()
)
dstReceiver1TsBissEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dstReceiver1TsBissEnable.setStatus("current")


class _DstReceiver1TsBissMode_Type(Integer32):
    """Custom type dstReceiver1TsBissMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("mode1", 0),
          ("modeE", 1))
    )


_DstReceiver1TsBissMode_Type.__name__ = "Integer32"
_DstReceiver1TsBissMode_Object = MibScalar
dstReceiver1TsBissMode = _DstReceiver1TsBissMode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 15, 17, 10),
    _DstReceiver1TsBissMode_Type()
)
dstReceiver1TsBissMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dstReceiver1TsBissMode.setStatus("current")


class _DstReceiver1TsBissPass_Type(OctetString):
    """Custom type dstReceiver1TsBissPass based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_DstReceiver1TsBissPass_Type.__name__ = "OctetString"
_DstReceiver1TsBissPass_Object = MibScalar
dstReceiver1TsBissPass = _DstReceiver1TsBissPass_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 15, 17, 15),
    _DstReceiver1TsBissPass_Type()
)
dstReceiver1TsBissPass.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dstReceiver1TsBissPass.setStatus("current")


class _DstReceiver1TsBissInjectId_Type(OctetString):
    """Custom type dstReceiver1TsBissInjectId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 14),
    )


_DstReceiver1TsBissInjectId_Type.__name__ = "OctetString"
_DstReceiver1TsBissInjectId_Object = MibScalar
dstReceiver1TsBissInjectId = _DstReceiver1TsBissInjectId_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 15, 17, 20),
    _DstReceiver1TsBissInjectId_Type()
)
dstReceiver1TsBissInjectId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dstReceiver1TsBissInjectId.setStatus("current")
_DstReceiver1TsCam_ObjectIdentity = ObjectIdentity
dstReceiver1TsCam = _DstReceiver1TsCam_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 15, 20)
)
_DstReceiver1TsCamEnable_Type = DisabledEnabled
_DstReceiver1TsCamEnable_Object = MibScalar
dstReceiver1TsCamEnable = _DstReceiver1TsCamEnable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 15, 20, 5),
    _DstReceiver1TsCamEnable_Type()
)
dstReceiver1TsCamEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dstReceiver1TsCamEnable.setStatus("current")


class _DstReceiver1TsCamStatus_Type(Integer32):
    """Custom type dstReceiver1TsCamStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("notInserted", 1),
          ("inserted", 2),
          ("waiting", 3),
          ("readingCis", 4),
          ("ready", 5),
          ("wrongSmartCard", 6),
          ("noSmartCard", 7),
          ("notReady", 8))
    )


_DstReceiver1TsCamStatus_Type.__name__ = "Integer32"
_DstReceiver1TsCamStatus_Object = MibScalar
dstReceiver1TsCamStatus = _DstReceiver1TsCamStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 15, 20, 10),
    _DstReceiver1TsCamStatus_Type()
)
dstReceiver1TsCamStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dstReceiver1TsCamStatus.setStatus("current")
_DstReceiver1TsCamReset_Type = NullApply
_DstReceiver1TsCamReset_Object = MibScalar
dstReceiver1TsCamReset = _DstReceiver1TsCamReset_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 15, 20, 25),
    _DstReceiver1TsCamReset_Type()
)
dstReceiver1TsCamReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dstReceiver1TsCamReset.setStatus("current")
_DstServicesTable_Object = MibTable
dstServicesTable = _DstServicesTable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 15, 25)
)
if mibBuilder.loadTexts:
    dstServicesTable.setStatus("current")
_DstServicesEntry_Object = MibTableRow
dstServicesEntry = _DstServicesEntry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 15, 25, 1)
)
dstServicesEntry.setIndexNames(
    (0, "TREDESS-FS-MIB", "dstServiceIndex"),
)
if mibBuilder.loadTexts:
    dstServicesEntry.setStatus("current")


class _DstServiceIndex_Type(Unsigned32):
    """Custom type dstServiceIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 9),
    )


_DstServiceIndex_Type.__name__ = "Unsigned32"
_DstServiceIndex_Object = MibTableColumn
dstServiceIndex = _DstServiceIndex_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 15, 25, 1, 1),
    _DstServiceIndex_Type()
)
dstServiceIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dstServiceIndex.setStatus("current")
_DstDecryptEnable_Type = DisabledEnabled
_DstDecryptEnable_Object = MibTableColumn
dstDecryptEnable = _DstDecryptEnable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 15, 25, 1, 2),
    _DstDecryptEnable_Type()
)
dstDecryptEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dstDecryptEnable.setStatus("current")
_DstProgramId_Type = Unsigned32
_DstProgramId_Object = MibTableColumn
dstProgramId = _DstProgramId_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 15, 25, 1, 3),
    _DstProgramId_Type()
)
dstProgramId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dstProgramId.setStatus("current")
_DstServiceName_Type = OctetString
_DstServiceName_Object = MibTableColumn
dstServiceName = _DstServiceName_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 15, 25, 1, 4),
    _DstServiceName_Type()
)
dstServiceName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dstServiceName.setStatus("current")


class _DstServiceStatus_Type(Integer32):
    """Custom type dstServiceStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("decryptingId", 1),
          ("decryptingErr", 2))
    )


_DstServiceStatus_Type.__name__ = "Integer32"
_DstServiceStatus_Object = MibTableColumn
dstServiceStatus = _DstServiceStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 15, 25, 1, 5),
    _DstServiceStatus_Type()
)
dstServiceStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dstServiceStatus.setStatus("current")
_DstReceiver1TsEtiOutput_ObjectIdentity = ObjectIdentity
dstReceiver1TsEtiOutput = _DstReceiver1TsEtiOutput_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 15, 30)
)


class _DstR1TsEtiOutputPid_Type(Unsigned32):
    """Custom type dstR1TsEtiOutputPid based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 8191),
    )


_DstR1TsEtiOutputPid_Type.__name__ = "Unsigned32"
_DstR1TsEtiOutputPid_Object = MibScalar
dstR1TsEtiOutputPid = _DstR1TsEtiOutputPid_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 15, 30, 5),
    _DstR1TsEtiOutputPid_Type()
)
dstR1TsEtiOutputPid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dstR1TsEtiOutputPid.setStatus("current")


class _DstR1TsEtiOutputType_Type(Integer32):
    """Custom type dstR1TsEtiOutputType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("etiNa", 0),
          ("tsEtiV11", 1),
          ("edi", 2))
    )


_DstR1TsEtiOutputType_Type.__name__ = "Integer32"
_DstR1TsEtiOutputType_Object = MibScalar
dstR1TsEtiOutputType = _DstR1TsEtiOutputType_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 15, 30, 10),
    _DstR1TsEtiOutputType_Type()
)
dstR1TsEtiOutputType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dstR1TsEtiOutputType.setStatus("current")


class _DstR1TsEtiOutputStreamTo_Type(Integer32):
    """Custom type dstR1TsEtiOutputStreamTo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("socket1", 1),
          ("socket2", 2),
          ("socket1and2", 3))
    )


_DstR1TsEtiOutputStreamTo_Type.__name__ = "Integer32"
_DstR1TsEtiOutputStreamTo_Object = MibScalar
dstR1TsEtiOutputStreamTo = _DstR1TsEtiOutputStreamTo_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 15, 30, 12),
    _DstR1TsEtiOutputStreamTo_Type()
)
dstR1TsEtiOutputStreamTo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dstR1TsEtiOutputStreamTo.setStatus("current")


class _DstR1TsEtiOutputLayer_Type(Integer32):
    """Custom type dstR1TsEtiOutputLayer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("etiNi", 1),
          ("etiNa5592", 2),
          ("etiNa5376", 3))
    )


_DstR1TsEtiOutputLayer_Type.__name__ = "Integer32"
_DstR1TsEtiOutputLayer_Object = MibScalar
dstR1TsEtiOutputLayer = _DstR1TsEtiOutputLayer_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 15, 30, 15),
    _DstR1TsEtiOutputLayer_Type()
)
dstR1TsEtiOutputLayer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dstR1TsEtiOutputLayer.setStatus("current")
_DstR1TsEtiOutputInputBitrate_Type = FloatingPoint
_DstR1TsEtiOutputInputBitrate_Object = MibScalar
dstR1TsEtiOutputInputBitrate = _DstR1TsEtiOutputInputBitrate_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 15, 30, 20),
    _DstR1TsEtiOutputInputBitrate_Type()
)
dstR1TsEtiOutputInputBitrate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dstR1TsEtiOutputInputBitrate.setStatus("current")
_DstR1TsEtiOutputStatistics_ObjectIdentity = ObjectIdentity
dstR1TsEtiOutputStatistics = _DstR1TsEtiOutputStatistics_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 15, 30, 25)
)
_DstR1TsEOCorrectedRsCodewords_Type = Unsigned32
_DstR1TsEOCorrectedRsCodewords_Object = MibScalar
dstR1TsEOCorrectedRsCodewords = _DstR1TsEOCorrectedRsCodewords_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 15, 30, 25, 5),
    _DstR1TsEOCorrectedRsCodewords_Type()
)
dstR1TsEOCorrectedRsCodewords.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dstR1TsEOCorrectedRsCodewords.setStatus("current")
_DstR1TsEONotCorrectedRsCodewords_Type = Unsigned32
_DstR1TsEONotCorrectedRsCodewords_Object = MibScalar
dstR1TsEONotCorrectedRsCodewords = _DstR1TsEONotCorrectedRsCodewords_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 15, 30, 25, 10),
    _DstR1TsEONotCorrectedRsCodewords_Type()
)
dstR1TsEONotCorrectedRsCodewords.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dstR1TsEONotCorrectedRsCodewords.setStatus("current")
_DstR1TsEtiOutputWithouService_Type = FloatingPoint
_DstR1TsEtiOutputWithouService_Object = MibScalar
dstR1TsEtiOutputWithouService = _DstR1TsEtiOutputWithouService_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 15, 30, 25, 12),
    _DstR1TsEtiOutputWithouService_Type()
)
dstR1TsEtiOutputWithouService.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dstR1TsEtiOutputWithouService.setStatus("current")
_DstR1TsEOResetCounters_Type = NullApply
_DstR1TsEOResetCounters_Object = MibScalar
dstR1TsEOResetCounters = _DstR1TsEOResetCounters_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 1, 15, 15, 30, 25, 15),
    _DstR1TsEOResetCounters_Type()
)
dstR1TsEOResetCounters.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dstR1TsEOResetCounters.setStatus("current")
_Exciter_ObjectIdentity = ObjectIdentity
exciter = _Exciter_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2)
)
_RfInput_ObjectIdentity = ObjectIdentity
rfInput = _RfInput_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 1)
)
_RfInputConfiguration_ObjectIdentity = ObjectIdentity
rfInputConfiguration = _RfInputConfiguration_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 1, 1)
)


class _InputFrequencyMode_Type(Integer32):
    """Custom type inputFrequencyMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("channel", 0),
          ("centralFrequency", 1))
    )


_InputFrequencyMode_Type.__name__ = "Integer32"
_InputFrequencyMode_Object = MibScalar
inputFrequencyMode = _InputFrequencyMode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 1, 1, 1),
    _InputFrequencyMode_Type()
)
inputFrequencyMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    inputFrequencyMode.setStatus("current")
_InputFrequency_Type = DisplayString
_InputFrequency_Object = MibScalar
inputFrequency = _InputFrequency_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 1, 1, 2),
    _InputFrequency_Type()
)
inputFrequency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    inputFrequency.setStatus("current")
_InputLevel_Type = DisplayString
_InputLevel_Object = MibScalar
inputLevel = _InputLevel_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 1, 1, 3),
    _InputLevel_Type()
)
inputLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    inputLevel.setStatus("current")


class _InputLevelThreshold_Type(Integer32):
    """Custom type inputLevelThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-85, -55),
    )


_InputLevelThreshold_Type.__name__ = "Integer32"
_InputLevelThreshold_Object = MibScalar
inputLevelThreshold = _InputLevelThreshold_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 1, 1, 4),
    _InputLevelThreshold_Type()
)
inputLevelThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    inputLevelThreshold.setStatus("current")
if mibBuilder.loadTexts:
    inputLevelThreshold.setUnits("dBm")
_InputFrequencyFlt_Type = FloatingPoint
_InputFrequencyFlt_Object = MibScalar
inputFrequencyFlt = _InputFrequencyFlt_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 1, 1, 5),
    _InputFrequencyFlt_Type()
)
inputFrequencyFlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    inputFrequencyFlt.setStatus("current")
if mibBuilder.loadTexts:
    inputFrequencyFlt.setUnits("Hz")
_InputChannelMode_ObjectIdentity = ObjectIdentity
inputChannelMode = _InputChannelMode_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 1, 1, 10)
)


class _InputChannel_Type(Unsigned32):
    """Custom type inputChannel based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(14, 78),
    )


_InputChannel_Type.__name__ = "Unsigned32"
_InputChannel_Object = MibScalar
inputChannel = _InputChannel_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 1, 1, 10, 1),
    _InputChannel_Type()
)
inputChannel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    inputChannel.setStatus("current")


class _InputChannelOffset_Type(Integer32):
    """Custom type inputChannelOffset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-4, 4),
    )


_InputChannelOffset_Type.__name__ = "Integer32"
_InputChannelOffset_Object = MibScalar
inputChannelOffset = _InputChannelOffset_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 1, 1, 10, 2),
    _InputChannelOffset_Type()
)
inputChannelOffset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    inputChannelOffset.setStatus("current")


class _InputChannelResolution_Type(Integer32):
    """Custom type inputChannelResolution based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("resolution1div6", 0),
          ("resolution1div7", 1),
          ("resolution1div8", 2))
    )


_InputChannelResolution_Type.__name__ = "Integer32"
_InputChannelResolution_Object = MibScalar
inputChannelResolution = _InputChannelResolution_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 1, 1, 10, 3),
    _InputChannelResolution_Type()
)
inputChannelResolution.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    inputChannelResolution.setStatus("current")
if mibBuilder.loadTexts:
    inputChannelResolution.setUnits("MHz")
_InputChannelChannel_Type = DabOutputChannelType
_InputChannelChannel_Object = MibScalar
inputChannelChannel = _InputChannelChannel_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 1, 1, 10, 4),
    _InputChannelChannel_Type()
)
inputChannelChannel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    inputChannelChannel.setStatus("current")
if mibBuilder.loadTexts:
    inputChannelChannel.setUnits("MHz")
_InputCentralFrequencyMode_ObjectIdentity = ObjectIdentity
inputCentralFrequencyMode = _InputCentralFrequencyMode_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 1, 1, 15)
)


class _InputCentralFrequency_Type(Unsigned32):
    """Custom type inputCentralFrequency based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(470000000, 862000000),
    )


_InputCentralFrequency_Type.__name__ = "Unsigned32"
_InputCentralFrequency_Object = MibScalar
inputCentralFrequency = _InputCentralFrequency_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 1, 1, 15, 1),
    _InputCentralFrequency_Type()
)
inputCentralFrequency.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    inputCentralFrequency.setStatus("current")
if mibBuilder.loadTexts:
    inputCentralFrequency.setUnits("Hz")


class _InputCentralFrequencyMHz_Type(Unsigned32):
    """Custom type inputCentralFrequencyMHz based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(470000, 862000),
    )


_InputCentralFrequencyMHz_Type.__name__ = "Unsigned32"
_InputCentralFrequencyMHz_Object = MibScalar
inputCentralFrequencyMHz = _InputCentralFrequencyMHz_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 1, 1, 15, 2),
    _InputCentralFrequencyMHz_Type()
)
inputCentralFrequencyMHz.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    inputCentralFrequencyMHz.setStatus("current")
if mibBuilder.loadTexts:
    inputCentralFrequencyMHz.setUnits("MHz")
_EchoCanceller_ObjectIdentity = ObjectIdentity
echoCanceller = _EchoCanceller_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5)
)
_EcGeneral_ObjectIdentity = ObjectIdentity
ecGeneral = _EcGeneral_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 1)
)
_EcTemperature_Type = DisplayString
_EcTemperature_Object = MibScalar
ecTemperature = _EcTemperature_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 1, 1),
    _EcTemperature_Type()
)
ecTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ecTemperature.setStatus("current")
_EcSystem_ObjectIdentity = ObjectIdentity
ecSystem = _EcSystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 2)
)


class _EcBandwidth_Type(Integer32):
    """Custom type ecBandwidth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("bw5Mhz", 0),
          ("bw6Mhz", 1),
          ("bw7Mhz", 2),
          ("bw8Mhz", 3))
    )


_EcBandwidth_Type.__name__ = "Integer32"
_EcBandwidth_Object = MibScalar
ecBandwidth = _EcBandwidth_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 2, 3),
    _EcBandwidth_Type()
)
ecBandwidth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ecBandwidth.setStatus("current")


class _EcBandwidthAdaptation_Type(Integer32):
    """Custom type ecBandwidthAdaptation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              5)
        )
    )
    namedValues = NamedValues(
        *(("dvbTT2", 0),
          ("dvbT2Ext8k", 1),
          ("dvbT2Ext16K32K", 2),
          ("isdbTExt", 3),
          ("atsc3", 5))
    )


_EcBandwidthAdaptation_Type.__name__ = "Integer32"
_EcBandwidthAdaptation_Object = MibScalar
ecBandwidthAdaptation = _EcBandwidthAdaptation_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 2, 4),
    _EcBandwidthAdaptation_Type()
)
ecBandwidthAdaptation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ecBandwidthAdaptation.setStatus("current")


class _EcAdditionDelay_Type(OctetString):
    """Custom type ecAdditionDelay based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 3),
    )


_EcAdditionDelay_Type.__name__ = "OctetString"
_EcAdditionDelay_Object = MibScalar
ecAdditionDelay = _EcAdditionDelay_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 2, 5),
    _EcAdditionDelay_Type()
)
ecAdditionDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ecAdditionDelay.setStatus("current")
if mibBuilder.loadTexts:
    ecAdditionDelay.setUnits("us")
_EcCurrentDelay_Type = DisplayString
_EcCurrentDelay_Object = MibScalar
ecCurrentDelay = _EcCurrentDelay_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 2, 6),
    _EcCurrentDelay_Type()
)
ecCurrentDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ecCurrentDelay.setStatus("current")
if mibBuilder.loadTexts:
    ecCurrentDelay.setUnits("us")
_EcLevels_ObjectIdentity = ObjectIdentity
ecLevels = _EcLevels_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 2, 10)
)
_EcInputLevel_Type = DisplayString
_EcInputLevel_Object = MibScalar
ecInputLevel = _EcInputLevel_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 2, 10, 1),
    _EcInputLevel_Type()
)
ecInputLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ecInputLevel.setStatus("current")
if mibBuilder.loadTexts:
    ecInputLevel.setUnits("dBFS")
_EcReferenceLevel_Type = DisplayString
_EcReferenceLevel_Object = MibScalar
ecReferenceLevel = _EcReferenceLevel_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 2, 10, 2),
    _EcReferenceLevel_Type()
)
ecReferenceLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ecReferenceLevel.setStatus("current")
if mibBuilder.loadTexts:
    ecReferenceLevel.setUnits("dBFS")
_EcCancellationLevel_Type = DisplayString
_EcCancellationLevel_Object = MibScalar
ecCancellationLevel = _EcCancellationLevel_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 2, 10, 3),
    _EcCancellationLevel_Type()
)
ecCancellationLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ecCancellationLevel.setStatus("current")
if mibBuilder.loadTexts:
    ecCancellationLevel.setUnits("dBFS")
_EcOutputCancellation_Type = DisplayString
_EcOutputCancellation_Object = MibScalar
ecOutputCancellation = _EcOutputCancellation_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 2, 10, 4),
    _EcOutputCancellation_Type()
)
ecOutputCancellation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ecOutputCancellation.setStatus("current")
if mibBuilder.loadTexts:
    ecOutputCancellation.setUnits("dBFS")
_EcWindows_ObjectIdentity = ObjectIdentity
ecWindows = _EcWindows_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 3)
)
_EcEnable_Type = DisabledEnabled
_EcEnable_Object = MibScalar
ecEnable = _EcEnable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 3, 1),
    _EcEnable_Type()
)
ecEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ecEnable.setStatus("current")


class _MuteGainMarginThreshold_Type(Integer32):
    """Custom type muteGainMarginThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-20, 10),
    )


_MuteGainMarginThreshold_Type.__name__ = "Integer32"
_MuteGainMarginThreshold_Object = MibScalar
muteGainMarginThreshold = _MuteGainMarginThreshold_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 3, 2),
    _MuteGainMarginThreshold_Type()
)
muteGainMarginThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    muteGainMarginThreshold.setStatus("current")
_EcGainMargin_Type = DisplayString
_EcGainMargin_Object = MibScalar
ecGainMargin = _EcGainMargin_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 3, 3),
    _EcGainMargin_Type()
)
ecGainMargin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ecGainMargin.setStatus("current")
if mibBuilder.loadTexts:
    ecGainMargin.setUnits("dB")
_EcWindowSpeed_ObjectIdentity = ObjectIdentity
ecWindowSpeed = _EcWindowSpeed_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 3, 5)
)


class _EcWindow01_Type(Unsigned32):
    """Custom type ecWindow01 based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_EcWindow01_Type.__name__ = "Unsigned32"
_EcWindow01_Object = MibScalar
ecWindow01 = _EcWindow01_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 3, 5, 1),
    _EcWindow01_Type()
)
ecWindow01.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ecWindow01.setStatus("current")


class _EcWindow02_Type(Unsigned32):
    """Custom type ecWindow02 based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_EcWindow02_Type.__name__ = "Unsigned32"
_EcWindow02_Object = MibScalar
ecWindow02 = _EcWindow02_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 3, 5, 2),
    _EcWindow02_Type()
)
ecWindow02.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ecWindow02.setStatus("current")


class _EcWindow03_Type(Unsigned32):
    """Custom type ecWindow03 based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_EcWindow03_Type.__name__ = "Unsigned32"
_EcWindow03_Object = MibScalar
ecWindow03 = _EcWindow03_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 3, 5, 3),
    _EcWindow03_Type()
)
ecWindow03.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ecWindow03.setStatus("current")


class _EcWindow04_Type(Unsigned32):
    """Custom type ecWindow04 based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_EcWindow04_Type.__name__ = "Unsigned32"
_EcWindow04_Object = MibScalar
ecWindow04 = _EcWindow04_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 3, 5, 4),
    _EcWindow04_Type()
)
ecWindow04.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ecWindow04.setStatus("current")


class _EcWindow05_Type(Unsigned32):
    """Custom type ecWindow05 based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_EcWindow05_Type.__name__ = "Unsigned32"
_EcWindow05_Object = MibScalar
ecWindow05 = _EcWindow05_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 3, 5, 5),
    _EcWindow05_Type()
)
ecWindow05.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ecWindow05.setStatus("current")


class _EcWindow06_Type(Unsigned32):
    """Custom type ecWindow06 based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_EcWindow06_Type.__name__ = "Unsigned32"
_EcWindow06_Object = MibScalar
ecWindow06 = _EcWindow06_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 3, 5, 6),
    _EcWindow06_Type()
)
ecWindow06.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ecWindow06.setStatus("current")


class _EcWindow07_Type(Unsigned32):
    """Custom type ecWindow07 based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_EcWindow07_Type.__name__ = "Unsigned32"
_EcWindow07_Object = MibScalar
ecWindow07 = _EcWindow07_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 3, 5, 7),
    _EcWindow07_Type()
)
ecWindow07.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ecWindow07.setStatus("current")


class _EcWindow08_Type(Unsigned32):
    """Custom type ecWindow08 based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_EcWindow08_Type.__name__ = "Unsigned32"
_EcWindow08_Object = MibScalar
ecWindow08 = _EcWindow08_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 3, 5, 8),
    _EcWindow08_Type()
)
ecWindow08.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ecWindow08.setStatus("current")


class _EcWindow09_Type(Unsigned32):
    """Custom type ecWindow09 based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_EcWindow09_Type.__name__ = "Unsigned32"
_EcWindow09_Object = MibScalar
ecWindow09 = _EcWindow09_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 3, 5, 9),
    _EcWindow09_Type()
)
ecWindow09.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ecWindow09.setStatus("current")


class _EcWindow10_Type(Unsigned32):
    """Custom type ecWindow10 based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_EcWindow10_Type.__name__ = "Unsigned32"
_EcWindow10_Object = MibScalar
ecWindow10 = _EcWindow10_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 3, 5, 10),
    _EcWindow10_Type()
)
ecWindow10.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ecWindow10.setStatus("current")


class _EcWindow11_Type(Unsigned32):
    """Custom type ecWindow11 based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_EcWindow11_Type.__name__ = "Unsigned32"
_EcWindow11_Object = MibScalar
ecWindow11 = _EcWindow11_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 3, 5, 11),
    _EcWindow11_Type()
)
ecWindow11.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ecWindow11.setStatus("current")


class _EcWindow12_Type(Unsigned32):
    """Custom type ecWindow12 based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_EcWindow12_Type.__name__ = "Unsigned32"
_EcWindow12_Object = MibScalar
ecWindow12 = _EcWindow12_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 3, 5, 12),
    _EcWindow12_Type()
)
ecWindow12.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ecWindow12.setStatus("current")


class _EcWindow13_Type(Unsigned32):
    """Custom type ecWindow13 based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_EcWindow13_Type.__name__ = "Unsigned32"
_EcWindow13_Object = MibScalar
ecWindow13 = _EcWindow13_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 3, 5, 13),
    _EcWindow13_Type()
)
ecWindow13.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ecWindow13.setStatus("current")


class _EcWindow14_Type(Unsigned32):
    """Custom type ecWindow14 based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_EcWindow14_Type.__name__ = "Unsigned32"
_EcWindow14_Object = MibScalar
ecWindow14 = _EcWindow14_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 3, 5, 14),
    _EcWindow14_Type()
)
ecWindow14.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ecWindow14.setStatus("current")


class _EcWindow15_Type(Unsigned32):
    """Custom type ecWindow15 based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_EcWindow15_Type.__name__ = "Unsigned32"
_EcWindow15_Object = MibScalar
ecWindow15 = _EcWindow15_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 3, 5, 15),
    _EcWindow15_Type()
)
ecWindow15.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ecWindow15.setStatus("current")


class _EcWindow16_Type(Unsigned32):
    """Custom type ecWindow16 based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_EcWindow16_Type.__name__ = "Unsigned32"
_EcWindow16_Object = MibScalar
ecWindow16 = _EcWindow16_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 3, 5, 16),
    _EcWindow16_Type()
)
ecWindow16.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ecWindow16.setStatus("current")


class _EcUnmuteRetriesInterval_Type(Unsigned32):
    """Custom type ecUnmuteRetriesInterval based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 9999),
    )


_EcUnmuteRetriesInterval_Type.__name__ = "Unsigned32"
_EcUnmuteRetriesInterval_Object = MibScalar
ecUnmuteRetriesInterval = _EcUnmuteRetriesInterval_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 3, 10),
    _EcUnmuteRetriesInterval_Type()
)
ecUnmuteRetriesInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ecUnmuteRetriesInterval.setStatus("current")
if mibBuilder.loadTexts:
    ecUnmuteRetriesInterval.setUnits("min")
_EcPrecorrector_ObjectIdentity = ObjectIdentity
ecPrecorrector = _EcPrecorrector_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 10)
)


class _EcLinearPrecorrection_Type(Integer32):
    """Custom type ecLinearPrecorrection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_EcLinearPrecorrection_Type.__name__ = "Integer32"
_EcLinearPrecorrection_Object = MibScalar
ecLinearPrecorrection = _EcLinearPrecorrection_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 10, 1),
    _EcLinearPrecorrection_Type()
)
ecLinearPrecorrection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ecLinearPrecorrection.setStatus("current")
if mibBuilder.loadTexts:
    ecLinearPrecorrection.setUnits("dB")


class _EcNonLinearPrecorrection_Type(Integer32):
    """Custom type ecNonLinearPrecorrection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("adaptative", 1),
          ("static", 2))
    )


_EcNonLinearPrecorrection_Type.__name__ = "Integer32"
_EcNonLinearPrecorrection_Object = MibScalar
ecNonLinearPrecorrection = _EcNonLinearPrecorrection_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 10, 2),
    _EcNonLinearPrecorrection_Type()
)
ecNonLinearPrecorrection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ecNonLinearPrecorrection.setStatus("current")


class _EcSlopeCorrection_Type(Integer32):
    """Custom type ecSlopeCorrection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-3, 3),
    )


_EcSlopeCorrection_Type.__name__ = "Integer32"
_EcSlopeCorrection_Object = MibScalar
ecSlopeCorrection = _EcSlopeCorrection_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 10, 3),
    _EcSlopeCorrection_Type()
)
ecSlopeCorrection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ecSlopeCorrection.setStatus("current")
_EcPrecorrectorLevels_ObjectIdentity = ObjectIdentity
ecPrecorrectorLevels = _EcPrecorrectorLevels_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 10, 5)
)
_EcPrecorrectorInput_Type = DisplayString
_EcPrecorrectorInput_Object = MibScalar
ecPrecorrectorInput = _EcPrecorrectorInput_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 10, 5, 1),
    _EcPrecorrectorInput_Type()
)
ecPrecorrectorInput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ecPrecorrectorInput.setStatus("current")
if mibBuilder.loadTexts:
    ecPrecorrectorInput.setUnits("dBFS")


class _EcPrecorrectorStatus_Type(Integer32):
    """Custom type ecPrecorrectorStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("unlocked", 0),
          ("locked", 1))
    )


_EcPrecorrectorStatus_Type.__name__ = "Integer32"
_EcPrecorrectorStatus_Object = MibScalar
ecPrecorrectorStatus = _EcPrecorrectorStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 10, 5, 2),
    _EcPrecorrectorStatus_Type()
)
ecPrecorrectorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ecPrecorrectorStatus.setStatus("current")
_EcPrecorrectorFeedback_Type = DisplayString
_EcPrecorrectorFeedback_Object = MibScalar
ecPrecorrectorFeedback = _EcPrecorrectorFeedback_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 10, 5, 3),
    _EcPrecorrectorFeedback_Type()
)
ecPrecorrectorFeedback.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ecPrecorrectorFeedback.setStatus("current")
if mibBuilder.loadTexts:
    ecPrecorrectorFeedback.setUnits("dBFS")
_EcPrecorrectorOutput_Type = DisplayString
_EcPrecorrectorOutput_Object = MibScalar
ecPrecorrectorOutput = _EcPrecorrectorOutput_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 10, 5, 4),
    _EcPrecorrectorOutput_Type()
)
ecPrecorrectorOutput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ecPrecorrectorOutput.setStatus("current")
if mibBuilder.loadTexts:
    ecPrecorrectorOutput.setUnits("dBFS")
_EcSpectrumMeasures_ObjectIdentity = ObjectIdentity
ecSpectrumMeasures = _EcSpectrumMeasures_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 10, 6)
)


class _EcShoulderAlarm_Type(Unsigned32):
    """Custom type ecShoulderAlarm based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(30, 60),
    )


_EcShoulderAlarm_Type.__name__ = "Unsigned32"
_EcShoulderAlarm_Object = MibScalar
ecShoulderAlarm = _EcShoulderAlarm_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 10, 6, 1),
    _EcShoulderAlarm_Type()
)
ecShoulderAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ecShoulderAlarm.setStatus("current")
if mibBuilder.loadTexts:
    ecShoulderAlarm.setUnits("dB")
_EcLowerShoulder_Type = DisplayString
_EcLowerShoulder_Object = MibScalar
ecLowerShoulder = _EcLowerShoulder_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 10, 6, 2),
    _EcLowerShoulder_Type()
)
ecLowerShoulder.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ecLowerShoulder.setStatus("current")
if mibBuilder.loadTexts:
    ecLowerShoulder.setUnits("dB")
_EcUpperShoulder_Type = DisplayString
_EcUpperShoulder_Object = MibScalar
ecUpperShoulder = _EcUpperShoulder_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 10, 6, 3),
    _EcUpperShoulder_Type()
)
ecUpperShoulder.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ecUpperShoulder.setStatus("current")
if mibBuilder.loadTexts:
    ecUpperShoulder.setUnits("dB")
_EcInBandLevelVariation_Type = DisplayString
_EcInBandLevelVariation_Object = MibScalar
ecInBandLevelVariation = _EcInBandLevelVariation_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 10, 6, 4),
    _EcInBandLevelVariation_Type()
)
ecInBandLevelVariation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ecInBandLevelVariation.setStatus("current")
if mibBuilder.loadTexts:
    ecInBandLevelVariation.setUnits("dB")
_EcNonLinearStoredPrecorrection_Type = DisplayString
_EcNonLinearStoredPrecorrection_Object = MibScalar
ecNonLinearStoredPrecorrection = _EcNonLinearStoredPrecorrection_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 10, 10),
    _EcNonLinearStoredPrecorrection_Type()
)
ecNonLinearStoredPrecorrection.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ecNonLinearStoredPrecorrection.setStatus("current")


class _EcNonLinearPrecorrectorFeedback_Type(Integer32):
    """Custom type ecNonLinearPrecorrectorFeedback based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notDetected", 0),
          ("detected", 1),
          ("outOfRange", 2))
    )


_EcNonLinearPrecorrectorFeedback_Type.__name__ = "Integer32"
_EcNonLinearPrecorrectorFeedback_Object = MibScalar
ecNonLinearPrecorrectorFeedback = _EcNonLinearPrecorrectorFeedback_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 5, 10, 12),
    _EcNonLinearPrecorrectorFeedback_Type()
)
ecNonLinearPrecorrectorFeedback.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ecNonLinearPrecorrectorFeedback.setStatus("current")
_Modulator_ObjectIdentity = ObjectIdentity
modulator = _Modulator_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10)
)
_ModulatorGeneral_ObjectIdentity = ObjectIdentity
modulatorGeneral = _ModulatorGeneral_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 1)
)
_ModulatorTemperature_Type = DisplayString
_ModulatorTemperature_Object = MibScalar
modulatorTemperature = _ModulatorTemperature_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 1, 1),
    _ModulatorTemperature_Type()
)
modulatorTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    modulatorTemperature.setStatus("current")


class _ModulatorStandard_Type(Integer32):
    """Custom type modulatorStandard based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("dvbt", 0),
          ("dvbt2", 1),
          ("isdbt", 2),
          ("atsc", 3),
          ("dab", 4))
    )


_ModulatorStandard_Type.__name__ = "Integer32"
_ModulatorStandard_Object = MibScalar
modulatorStandard = _ModulatorStandard_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 1, 2),
    _ModulatorStandard_Type()
)
modulatorStandard.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    modulatorStandard.setStatus("current")


class _ModulatorTestMode_Type(Integer32):
    """Custom type modulatorTestMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("prbs", 2))
    )


_ModulatorTestMode_Type.__name__ = "Integer32"
_ModulatorTestMode_Object = MibScalar
modulatorTestMode = _ModulatorTestMode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 1, 3),
    _ModulatorTestMode_Type()
)
modulatorTestMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    modulatorTestMode.setStatus("current")
_ModulatorStandardAutoConfig_Type = DisabledEnabled
_ModulatorStandardAutoConfig_Object = MibScalar
modulatorStandardAutoConfig = _ModulatorStandardAutoConfig_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 1, 6),
    _ModulatorStandardAutoConfig_Type()
)
modulatorStandardAutoConfig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    modulatorStandardAutoConfig.setStatus("current")
_ModulatorGeneralPrbs_ObjectIdentity = ObjectIdentity
modulatorGeneralPrbs = _ModulatorGeneralPrbs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 1, 10)
)


class _ModulatorPrbsType_Type(Integer32):
    """Custom type modulatorPrbsType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("ccittItuTx151n150x2e23", 1),
          ("ccittItuTx151x150x2e20", 2),
          ("ccittItuTx151x150x2e17", 3),
          ("ccittItuTx151x150x2e15", 4),
          ("ccittItuTxV29", 5),
          ("ccittItuTx153x150x2e20", 6))
    )


_ModulatorPrbsType_Type.__name__ = "Integer32"
_ModulatorPrbsType_Object = MibScalar
modulatorPrbsType = _ModulatorPrbsType_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 1, 10, 1),
    _ModulatorPrbsType_Type()
)
modulatorPrbsType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    modulatorPrbsType.setStatus("current")


class _ModulatorPrbsPid_Type(Unsigned32):
    """Custom type modulatorPrbsPid based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 8191),
    )


_ModulatorPrbsPid_Type.__name__ = "Unsigned32"
_ModulatorPrbsPid_Object = MibScalar
modulatorPrbsPid = _ModulatorPrbsPid_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 1, 10, 2),
    _ModulatorPrbsPid_Type()
)
modulatorPrbsPid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    modulatorPrbsPid.setStatus("current")
_ModulatorPrbsIn_Type = DisabledEnabled
_ModulatorPrbsIn_Object = MibScalar
modulatorPrbsIn = _ModulatorPrbsIn_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 1, 10, 3),
    _ModulatorPrbsIn_Type()
)
modulatorPrbsIn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    modulatorPrbsIn.setStatus("current")
_ModulatorDVBT_ObjectIdentity = ObjectIdentity
modulatorDVBT = _ModulatorDVBT_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 5)
)
_DvbtSystem_ObjectIdentity = ObjectIdentity
dvbtSystem = _DvbtSystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 5, 1)
)


class _DvbtBandwidth_Type(Integer32):
    """Custom type dvbtBandwidth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("bw8Mhz", 0),
          ("bw7Mhz", 1),
          ("bw6Mhz", 2))
    )


_DvbtBandwidth_Type.__name__ = "Integer32"
_DvbtBandwidth_Object = MibScalar
dvbtBandwidth = _DvbtBandwidth_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 5, 1, 1),
    _DvbtBandwidth_Type()
)
dvbtBandwidth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbtBandwidth.setStatus("current")
_DvbtCellIdEnable_Type = DisabledEnabled
_DvbtCellIdEnable_Object = MibScalar
dvbtCellIdEnable = _DvbtCellIdEnable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 5, 1, 2),
    _DvbtCellIdEnable_Type()
)
dvbtCellIdEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbtCellIdEnable.setStatus("current")


class _DvbtCellId_Type(Unsigned32):
    """Custom type dvbtCellId based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_DvbtCellId_Type.__name__ = "Unsigned32"
_DvbtCellId_Object = MibScalar
dvbtCellId = _DvbtCellId_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 5, 1, 3),
    _DvbtCellId_Type()
)
dvbtCellId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbtCellId.setStatus("current")
_DvbtNetwork_ObjectIdentity = ObjectIdentity
dvbtNetwork = _DvbtNetwork_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 5, 2)
)


class _DvbtNetworkType_Type(Integer32):
    """Custom type dvbtNetworkType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("sfn", 0),
          ("mfn", 1))
    )


_DvbtNetworkType_Type.__name__ = "Integer32"
_DvbtNetworkType_Object = MibScalar
dvbtNetworkType = _DvbtNetworkType_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 5, 2, 1),
    _DvbtNetworkType_Type()
)
dvbtNetworkType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbtNetworkType.setStatus("current")


class _DvbtAutoconfigurationMip_Type(Integer32):
    """Custom type dvbtAutoconfigurationMip based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_DvbtAutoconfigurationMip_Type.__name__ = "Integer32"
_DvbtAutoconfigurationMip_Object = MibScalar
dvbtAutoconfigurationMip = _DvbtAutoconfigurationMip_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 5, 2, 3),
    _DvbtAutoconfigurationMip_Type()
)
dvbtAutoconfigurationMip.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbtAutoconfigurationMip.setStatus("current")


class _DvbtLocalDelay_Type(OctetString):
    """Custom type dvbtLocalDelay based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 9),
    )


_DvbtLocalDelay_Type.__name__ = "OctetString"
_DvbtLocalDelay_Object = MibScalar
dvbtLocalDelay = _DvbtLocalDelay_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 5, 2, 4),
    _DvbtLocalDelay_Type()
)
dvbtLocalDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbtLocalDelay.setStatus("current")
if mibBuilder.loadTexts:
    dvbtLocalDelay.setUnits("us")
_DvbtRateAdaptation_Type = DisabledEnabled
_DvbtRateAdaptation_Object = MibScalar
dvbtRateAdaptation = _DvbtRateAdaptation_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 5, 2, 6),
    _DvbtRateAdaptation_Type()
)
dvbtRateAdaptation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbtRateAdaptation.setStatus("obsolete")


class _DvbtBufferDuration_Type(Unsigned32):
    """Custom type dvbtBufferDuration based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(50, 999),
    )


_DvbtBufferDuration_Type.__name__ = "Unsigned32"
_DvbtBufferDuration_Object = MibScalar
dvbtBufferDuration = _DvbtBufferDuration_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 5, 2, 8),
    _DvbtBufferDuration_Type()
)
dvbtBufferDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbtBufferDuration.setStatus("current")
if mibBuilder.loadTexts:
    dvbtBufferDuration.setUnits("ms")
_DvbtRetransmissionDelay_Type = FloatingPoint
_DvbtRetransmissionDelay_Object = MibScalar
dvbtRetransmissionDelay = _DvbtRetransmissionDelay_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 5, 2, 11),
    _DvbtRetransmissionDelay_Type()
)
dvbtRetransmissionDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbtRetransmissionDelay.setStatus("current")
if mibBuilder.loadTexts:
    dvbtRetransmissionDelay.setUnits("us")
_DvbtMip_ObjectIdentity = ObjectIdentity
dvbtMip = _DvbtMip_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 5, 2, 20)
)
_DvbtMaximumNetworkDelay_Type = DisplayString
_DvbtMaximumNetworkDelay_Object = MibScalar
dvbtMaximumNetworkDelay = _DvbtMaximumNetworkDelay_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 5, 2, 20, 1),
    _DvbtMaximumNetworkDelay_Type()
)
dvbtMaximumNetworkDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvbtMaximumNetworkDelay.setStatus("current")
if mibBuilder.loadTexts:
    dvbtMaximumNetworkDelay.setUnits("us")
_DvbtTimeOffset_Type = DisplayString
_DvbtTimeOffset_Object = MibScalar
dvbtTimeOffset = _DvbtTimeOffset_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 5, 2, 20, 2),
    _DvbtTimeOffset_Type()
)
dvbtTimeOffset.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvbtTimeOffset.setStatus("current")
if mibBuilder.loadTexts:
    dvbtTimeOffset.setUnits("us")


class _DvbtTransmitterId_Type(Unsigned32):
    """Custom type dvbtTransmitterId based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_DvbtTransmitterId_Type.__name__ = "Unsigned32"
_DvbtTransmitterId_Object = MibScalar
dvbtTransmitterId = _DvbtTransmitterId_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 5, 2, 20, 3),
    _DvbtTransmitterId_Type()
)
dvbtTransmitterId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbtTransmitterId.setStatus("current")
_DvbtTimingInformation_ObjectIdentity = ObjectIdentity
dvbtTimingInformation = _DvbtTimingInformation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 5, 2, 25)
)


class _DvbtCurrentNetworkDelay_Type(OctetString):
    """Custom type dvbtCurrentNetworkDelay based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 255),
    )


_DvbtCurrentNetworkDelay_Type.__name__ = "OctetString"
_DvbtCurrentNetworkDelay_Object = MibScalar
dvbtCurrentNetworkDelay = _DvbtCurrentNetworkDelay_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 5, 2, 25, 1),
    _DvbtCurrentNetworkDelay_Type()
)
dvbtCurrentNetworkDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvbtCurrentNetworkDelay.setStatus("current")
if mibBuilder.loadTexts:
    dvbtCurrentNetworkDelay.setUnits("us")
_DvbtInputBufferDelay_Type = DisplayString
_DvbtInputBufferDelay_Object = MibScalar
dvbtInputBufferDelay = _DvbtInputBufferDelay_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 5, 2, 25, 2),
    _DvbtInputBufferDelay_Type()
)
dvbtInputBufferDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvbtInputBufferDelay.setStatus("current")
if mibBuilder.loadTexts:
    dvbtInputBufferDelay.setUnits("us")
_DvbtProcessingDelay_Type = DisplayString
_DvbtProcessingDelay_Object = MibScalar
dvbtProcessingDelay = _DvbtProcessingDelay_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 5, 2, 25, 3),
    _DvbtProcessingDelay_Type()
)
dvbtProcessingDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvbtProcessingDelay.setStatus("current")
if mibBuilder.loadTexts:
    dvbtProcessingDelay.setUnits("us")
_DvbtNetworkDelayMargin_Type = DisplayString
_DvbtNetworkDelayMargin_Object = MibScalar
dvbtNetworkDelayMargin = _DvbtNetworkDelayMargin_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 5, 2, 25, 4),
    _DvbtNetworkDelayMargin_Type()
)
dvbtNetworkDelayMargin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvbtNetworkDelayMargin.setStatus("current")
if mibBuilder.loadTexts:
    dvbtNetworkDelayMargin.setUnits("us")


class _DvbtDelay_Type(OctetString):
    """Custom type dvbtDelay based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 255),
    )


_DvbtDelay_Type.__name__ = "OctetString"
_DvbtDelay_Object = MibScalar
dvbtDelay = _DvbtDelay_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 5, 2, 25, 5),
    _DvbtDelay_Type()
)
dvbtDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvbtDelay.setStatus("current")
if mibBuilder.loadTexts:
    dvbtDelay.setUnits("us")
_DvbtModulation_ObjectIdentity = ObjectIdentity
dvbtModulation = _DvbtModulation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 5, 3)
)


class _DvbtConstellation_Type(Integer32):
    """Custom type dvbtConstellation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("qpsk", 0),
          ("qam16", 1),
          ("qam64", 2))
    )


_DvbtConstellation_Type.__name__ = "Integer32"
_DvbtConstellation_Object = MibScalar
dvbtConstellation = _DvbtConstellation_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 5, 3, 1),
    _DvbtConstellation_Type()
)
dvbtConstellation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbtConstellation.setStatus("current")


class _DvbtFec_Type(Integer32):
    """Custom type dvbtFec based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("fec1div2", 0),
          ("fec2div3", 1),
          ("fec3div4", 2),
          ("fec5div6", 3),
          ("fec7div8", 4))
    )


_DvbtFec_Type.__name__ = "Integer32"
_DvbtFec_Object = MibScalar
dvbtFec = _DvbtFec_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 5, 3, 2),
    _DvbtFec_Type()
)
dvbtFec.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbtFec.setStatus("current")


class _DvbtGuardInterval_Type(Integer32):
    """Custom type dvbtGuardInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("guardInterval1div32", 0),
          ("guardInterval1div16", 1),
          ("guardInterval1div8", 2),
          ("guardInterval1div4", 3))
    )


_DvbtGuardInterval_Type.__name__ = "Integer32"
_DvbtGuardInterval_Object = MibScalar
dvbtGuardInterval = _DvbtGuardInterval_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 5, 3, 3),
    _DvbtGuardInterval_Type()
)
dvbtGuardInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbtGuardInterval.setStatus("current")


class _DvbtFft_Type(Integer32):
    """Custom type dvbtFft based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("fft2K", 0),
          ("fft8K", 1))
    )


_DvbtFft_Type.__name__ = "Integer32"
_DvbtFft_Object = MibScalar
dvbtFft = _DvbtFft_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 5, 3, 4),
    _DvbtFft_Type()
)
dvbtFft.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbtFft.setStatus("current")
_DvbtAutoconfigurationFromDttRcv_Type = DisabledEnabled
_DvbtAutoconfigurationFromDttRcv_Object = MibScalar
dvbtAutoconfigurationFromDttRcv = _DvbtAutoconfigurationFromDttRcv_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 5, 3, 10),
    _DvbtAutoconfigurationFromDttRcv_Type()
)
dvbtAutoconfigurationFromDttRcv.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbtAutoconfigurationFromDttRcv.setStatus("current")
_ModulatorDVBT2_ObjectIdentity = ObjectIdentity
modulatorDVBT2 = _ModulatorDVBT2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10)
)
_Dvbt2System_ObjectIdentity = ObjectIdentity
dvbt2System = _Dvbt2System_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 1)
)


class _Dvbt2Profile_Type(Integer32):
    """Custom type dvbt2Profile based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("base", 0),
          ("lite", 1))
    )


_Dvbt2Profile_Type.__name__ = "Integer32"
_Dvbt2Profile_Object = MibScalar
dvbt2Profile = _Dvbt2Profile_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 1, 1),
    _Dvbt2Profile_Type()
)
dvbt2Profile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbt2Profile.setStatus("current")


class _Dvbt2InputMode_Type(Integer32):
    """Custom type dvbt2InputMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("aMode", 0),
          ("bMode", 1))
    )


_Dvbt2InputMode_Type.__name__ = "Integer32"
_Dvbt2InputMode_Object = MibScalar
dvbt2InputMode = _Dvbt2InputMode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 1, 2),
    _Dvbt2InputMode_Type()
)
dvbt2InputMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbt2InputMode.setStatus("current")


class _Dvbt2T2miPid_Type(Unsigned32):
    """Custom type dvbt2T2miPid based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(32, 8910),
    )


_Dvbt2T2miPid_Type.__name__ = "Unsigned32"
_Dvbt2T2miPid_Object = MibScalar
dvbt2T2miPid = _Dvbt2T2miPid_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 1, 3),
    _Dvbt2T2miPid_Type()
)
dvbt2T2miPid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbt2T2miPid.setStatus("current")


class _Dvbt2Bandwidth_Type(Integer32):
    """Custom type dvbt2Bandwidth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("bw1p7Mhz", 0),
          ("bw5Mhz", 1),
          ("bw6Mhz", 2),
          ("bw7Mhz", 3),
          ("bw8Mhz", 4),
          ("bw10Mhz", 5))
    )


_Dvbt2Bandwidth_Type.__name__ = "Integer32"
_Dvbt2Bandwidth_Object = MibScalar
dvbt2Bandwidth = _Dvbt2Bandwidth_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 1, 4),
    _Dvbt2Bandwidth_Type()
)
dvbt2Bandwidth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbt2Bandwidth.setStatus("current")


class _Dvbt2Version_Type(Integer32):
    """Custom type dvbt2Version based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("v1p1p1", 0),
          ("v1p2p1", 1),
          ("v1p3p1", 2))
    )


_Dvbt2Version_Type.__name__ = "Integer32"
_Dvbt2Version_Object = MibScalar
dvbt2Version = _Dvbt2Version_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 1, 5),
    _Dvbt2Version_Type()
)
dvbt2Version.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbt2Version.setStatus("current")
_Dvbt2CellId_ObjectIdentity = ObjectIdentity
dvbt2CellId = _Dvbt2CellId_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 1, 6)
)


class _Dvbt2CellIdT2mi_Type(Unsigned32):
    """Custom type dvbt2CellIdT2mi based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_Dvbt2CellIdT2mi_Type.__name__ = "Unsigned32"
_Dvbt2CellIdT2mi_Object = MibScalar
dvbt2CellIdT2mi = _Dvbt2CellIdT2mi_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 1, 6, 1),
    _Dvbt2CellIdT2mi_Type()
)
dvbt2CellIdT2mi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvbt2CellIdT2mi.setStatus("current")


class _Dvbt2CellIdOverwrite_Type(Integer32):
    """Custom type dvbt2CellIdOverwrite based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Dvbt2CellIdOverwrite_Type.__name__ = "Integer32"
_Dvbt2CellIdOverwrite_Object = MibScalar
dvbt2CellIdOverwrite = _Dvbt2CellIdOverwrite_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 1, 6, 2),
    _Dvbt2CellIdOverwrite_Type()
)
dvbt2CellIdOverwrite.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbt2CellIdOverwrite.setStatus("current")


class _Dvbt2CellIdUser_Type(Unsigned32):
    """Custom type dvbt2CellIdUser based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_Dvbt2CellIdUser_Type.__name__ = "Unsigned32"
_Dvbt2CellIdUser_Object = MibScalar
dvbt2CellIdUser = _Dvbt2CellIdUser_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 1, 6, 3),
    _Dvbt2CellIdUser_Type()
)
dvbt2CellIdUser.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbt2CellIdUser.setStatus("current")
_Dvbt2NetworkId_ObjectIdentity = ObjectIdentity
dvbt2NetworkId = _Dvbt2NetworkId_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 1, 7)
)


class _Dvbt2NetworkIdT2mi_Type(Unsigned32):
    """Custom type dvbt2NetworkIdT2mi based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_Dvbt2NetworkIdT2mi_Type.__name__ = "Unsigned32"
_Dvbt2NetworkIdT2mi_Object = MibScalar
dvbt2NetworkIdT2mi = _Dvbt2NetworkIdT2mi_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 1, 7, 1),
    _Dvbt2NetworkIdT2mi_Type()
)
dvbt2NetworkIdT2mi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvbt2NetworkIdT2mi.setStatus("current")


class _Dvbt2NetworkIdOverwrite_Type(Integer32):
    """Custom type dvbt2NetworkIdOverwrite based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Dvbt2NetworkIdOverwrite_Type.__name__ = "Integer32"
_Dvbt2NetworkIdOverwrite_Object = MibScalar
dvbt2NetworkIdOverwrite = _Dvbt2NetworkIdOverwrite_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 1, 7, 2),
    _Dvbt2NetworkIdOverwrite_Type()
)
dvbt2NetworkIdOverwrite.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbt2NetworkIdOverwrite.setStatus("current")


class _Dvbt2NetworkIdUser_Type(Unsigned32):
    """Custom type dvbt2NetworkIdUser based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_Dvbt2NetworkIdUser_Type.__name__ = "Unsigned32"
_Dvbt2NetworkIdUser_Object = MibScalar
dvbt2NetworkIdUser = _Dvbt2NetworkIdUser_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 1, 7, 3),
    _Dvbt2NetworkIdUser_Type()
)
dvbt2NetworkIdUser.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbt2NetworkIdUser.setStatus("current")
_Dvbt2SystemId_ObjectIdentity = ObjectIdentity
dvbt2SystemId = _Dvbt2SystemId_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 1, 8)
)


class _Dvbt2SystemIdT2mi_Type(Unsigned32):
    """Custom type dvbt2SystemIdT2mi based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_Dvbt2SystemIdT2mi_Type.__name__ = "Unsigned32"
_Dvbt2SystemIdT2mi_Object = MibScalar
dvbt2SystemIdT2mi = _Dvbt2SystemIdT2mi_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 1, 8, 1),
    _Dvbt2SystemIdT2mi_Type()
)
dvbt2SystemIdT2mi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvbt2SystemIdT2mi.setStatus("current")


class _Dvbt2SystemIdOverwrite_Type(Integer32):
    """Custom type dvbt2SystemIdOverwrite based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Dvbt2SystemIdOverwrite_Type.__name__ = "Integer32"
_Dvbt2SystemIdOverwrite_Object = MibScalar
dvbt2SystemIdOverwrite = _Dvbt2SystemIdOverwrite_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 1, 8, 2),
    _Dvbt2SystemIdOverwrite_Type()
)
dvbt2SystemIdOverwrite.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbt2SystemIdOverwrite.setStatus("current")


class _Dvbt2SystemIdUser_Type(Unsigned32):
    """Custom type dvbt2SystemIdUser based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_Dvbt2SystemIdUser_Type.__name__ = "Unsigned32"
_Dvbt2SystemIdUser_Object = MibScalar
dvbt2SystemIdUser = _Dvbt2SystemIdUser_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 1, 8, 3),
    _Dvbt2SystemIdUser_Type()
)
dvbt2SystemIdUser.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbt2SystemIdUser.setStatus("current")
_Dvbt2Frequency_ObjectIdentity = ObjectIdentity
dvbt2Frequency = _Dvbt2Frequency_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 1, 9)
)


class _Dvbt2FrequencyT2mi_Type(Unsigned32):
    """Custom type dvbt2FrequencyT2mi based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_Dvbt2FrequencyT2mi_Type.__name__ = "Unsigned32"
_Dvbt2FrequencyT2mi_Object = MibScalar
dvbt2FrequencyT2mi = _Dvbt2FrequencyT2mi_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 1, 9, 1),
    _Dvbt2FrequencyT2mi_Type()
)
dvbt2FrequencyT2mi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvbt2FrequencyT2mi.setStatus("current")


class _Dvbt2FrequencyOverwrite_Type(Integer32):
    """Custom type dvbt2FrequencyOverwrite based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Dvbt2FrequencyOverwrite_Type.__name__ = "Integer32"
_Dvbt2FrequencyOverwrite_Object = MibScalar
dvbt2FrequencyOverwrite = _Dvbt2FrequencyOverwrite_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 1, 9, 2),
    _Dvbt2FrequencyOverwrite_Type()
)
dvbt2FrequencyOverwrite.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbt2FrequencyOverwrite.setStatus("current")
_Dvbt2Network_ObjectIdentity = ObjectIdentity
dvbt2Network = _Dvbt2Network_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 2)
)


class _Dvbt2NetworkType_Type(Integer32):
    """Custom type dvbt2NetworkType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("sfn", 0),
          ("mfn", 1))
    )


_Dvbt2NetworkType_Type.__name__ = "Integer32"
_Dvbt2NetworkType_Object = MibScalar
dvbt2NetworkType = _Dvbt2NetworkType_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 2, 1),
    _Dvbt2NetworkType_Type()
)
dvbt2NetworkType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbt2NetworkType.setStatus("current")


class _Dvbt2SfnRelativeReference_Type(Integer32):
    """Custom type dvbt2SfnRelativeReference based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("nok", 0),
          ("ok", 1))
    )


_Dvbt2SfnRelativeReference_Type.__name__ = "Integer32"
_Dvbt2SfnRelativeReference_Object = MibScalar
dvbt2SfnRelativeReference = _Dvbt2SfnRelativeReference_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 2, 2),
    _Dvbt2SfnRelativeReference_Type()
)
dvbt2SfnRelativeReference.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvbt2SfnRelativeReference.setStatus("current")


class _Dvbt2SfnAbsoluteReference_Type(Integer32):
    """Custom type dvbt2SfnAbsoluteReference based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("nok", 0),
          ("ok", 1))
    )


_Dvbt2SfnAbsoluteReference_Type.__name__ = "Integer32"
_Dvbt2SfnAbsoluteReference_Object = MibScalar
dvbt2SfnAbsoluteReference = _Dvbt2SfnAbsoluteReference_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 2, 3),
    _Dvbt2SfnAbsoluteReference_Type()
)
dvbt2SfnAbsoluteReference.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvbt2SfnAbsoluteReference.setStatus("current")


class _Dvbt2TimeStamp_Type(Integer32):
    """Custom type dvbt2TimeStamp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("absolute", 1),
          ("relative", 2),
          ("null3", 3))
    )


_Dvbt2TimeStamp_Type.__name__ = "Integer32"
_Dvbt2TimeStamp_Object = MibScalar
dvbt2TimeStamp = _Dvbt2TimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 2, 4),
    _Dvbt2TimeStamp_Type()
)
dvbt2TimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvbt2TimeStamp.setStatus("current")
_Dvbt2SuperFrameDuration_Type = DisplayString
_Dvbt2SuperFrameDuration_Object = MibScalar
dvbt2SuperFrameDuration = _Dvbt2SuperFrameDuration_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 2, 5),
    _Dvbt2SuperFrameDuration_Type()
)
dvbt2SuperFrameDuration.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvbt2SuperFrameDuration.setStatus("current")
if mibBuilder.loadTexts:
    dvbt2SuperFrameDuration.setUnits("us")


class _Dvbt2LocalDelay_Type(OctetString):
    """Custom type dvbt2LocalDelay based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 7),
    )


_Dvbt2LocalDelay_Type.__name__ = "OctetString"
_Dvbt2LocalDelay_Object = MibScalar
dvbt2LocalDelay = _Dvbt2LocalDelay_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 2, 7),
    _Dvbt2LocalDelay_Type()
)
dvbt2LocalDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbt2LocalDelay.setStatus("current")
if mibBuilder.loadTexts:
    dvbt2LocalDelay.setUnits("us")


class _Dvbt2BufferDuration_Type(Unsigned32):
    """Custom type dvbt2BufferDuration based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(50, 999),
    )


_Dvbt2BufferDuration_Type.__name__ = "Unsigned32"
_Dvbt2BufferDuration_Object = MibScalar
dvbt2BufferDuration = _Dvbt2BufferDuration_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 2, 8),
    _Dvbt2BufferDuration_Type()
)
dvbt2BufferDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbt2BufferDuration.setStatus("current")
if mibBuilder.loadTexts:
    dvbt2BufferDuration.setUnits("ms")
_Dvbt2IndividualAddresssing_ObjectIdentity = ObjectIdentity
dvbt2IndividualAddresssing = _Dvbt2IndividualAddresssing_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 2, 20)
)
_Dvbt2TimeOffset_Type = DisplayString
_Dvbt2TimeOffset_Object = MibScalar
dvbt2TimeOffset = _Dvbt2TimeOffset_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 2, 20, 1),
    _Dvbt2TimeOffset_Type()
)
dvbt2TimeOffset.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvbt2TimeOffset.setStatus("current")
if mibBuilder.loadTexts:
    dvbt2TimeOffset.setUnits("us")


class _Dvbt2TransmitterId_Type(Unsigned32):
    """Custom type dvbt2TransmitterId based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_Dvbt2TransmitterId_Type.__name__ = "Unsigned32"
_Dvbt2TransmitterId_Object = MibScalar
dvbt2TransmitterId = _Dvbt2TransmitterId_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 2, 20, 2),
    _Dvbt2TransmitterId_Type()
)
dvbt2TransmitterId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbt2TransmitterId.setStatus("current")
_Dvbt2TimingInformation_ObjectIdentity = ObjectIdentity
dvbt2TimingInformation = _Dvbt2TimingInformation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 2, 25)
)
_Dvbt2InputBufferDelay_Type = DisplayString
_Dvbt2InputBufferDelay_Object = MibScalar
dvbt2InputBufferDelay = _Dvbt2InputBufferDelay_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 2, 25, 1),
    _Dvbt2InputBufferDelay_Type()
)
dvbt2InputBufferDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvbt2InputBufferDelay.setStatus("current")
if mibBuilder.loadTexts:
    dvbt2InputBufferDelay.setUnits("us")
_Dvbt2ProcessingDelay_Type = DisplayString
_Dvbt2ProcessingDelay_Object = MibScalar
dvbt2ProcessingDelay = _Dvbt2ProcessingDelay_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 2, 25, 2),
    _Dvbt2ProcessingDelay_Type()
)
dvbt2ProcessingDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvbt2ProcessingDelay.setStatus("current")
if mibBuilder.loadTexts:
    dvbt2ProcessingDelay.setUnits("us")
_Dvbt2NetworkDelayMargin_Type = DisplayString
_Dvbt2NetworkDelayMargin_Object = MibScalar
dvbt2NetworkDelayMargin = _Dvbt2NetworkDelayMargin_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 2, 25, 3),
    _Dvbt2NetworkDelayMargin_Type()
)
dvbt2NetworkDelayMargin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvbt2NetworkDelayMargin.setStatus("current")
if mibBuilder.loadTexts:
    dvbt2NetworkDelayMargin.setUnits("us")
_Dvbt2Delay_Type = DisplayString
_Dvbt2Delay_Object = MibScalar
dvbt2Delay = _Dvbt2Delay_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 2, 25, 4),
    _Dvbt2Delay_Type()
)
dvbt2Delay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvbt2Delay.setStatus("current")
if mibBuilder.loadTexts:
    dvbt2Delay.setUnits("us")
_Dvbt2Frame_ObjectIdentity = ObjectIdentity
dvbt2Frame = _Dvbt2Frame_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 3)
)


class _Dvbt2L1SignallingModulation_Type(Integer32):
    """Custom type dvbt2L1SignallingModulation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("bpsk", 0),
          ("qpsk", 1),
          ("qam16", 2),
          ("qam64", 3))
    )


_Dvbt2L1SignallingModulation_Type.__name__ = "Integer32"
_Dvbt2L1SignallingModulation_Object = MibScalar
dvbt2L1SignallingModulation = _Dvbt2L1SignallingModulation_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 3, 1),
    _Dvbt2L1SignallingModulation_Type()
)
dvbt2L1SignallingModulation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbt2L1SignallingModulation.setStatus("current")


class _Dvbt2L1PostScrambling_Type(Integer32):
    """Custom type dvbt2L1PostScrambling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Dvbt2L1PostScrambling_Type.__name__ = "Integer32"
_Dvbt2L1PostScrambling_Object = MibScalar
dvbt2L1PostScrambling = _Dvbt2L1PostScrambling_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 3, 2),
    _Dvbt2L1PostScrambling_Type()
)
dvbt2L1PostScrambling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbt2L1PostScrambling.setStatus("current")
_Dvbt2LiteCompatible_Type = NoYes
_Dvbt2LiteCompatible_Object = MibScalar
dvbt2LiteCompatible = _Dvbt2LiteCompatible_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 3, 3),
    _Dvbt2LiteCompatible_Type()
)
dvbt2LiteCompatible.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dvbt2LiteCompatible.setStatus("current")


class _Dvbt2PreambleFormat_Type(Integer32):
    """Custom type dvbt2PreambleFormat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("siso", 0),
          ("miso", 1))
    )


_Dvbt2PreambleFormat_Type.__name__ = "Integer32"
_Dvbt2PreambleFormat_Object = MibScalar
dvbt2PreambleFormat = _Dvbt2PreambleFormat_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 3, 4),
    _Dvbt2PreambleFormat_Type()
)
dvbt2PreambleFormat.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbt2PreambleFormat.setStatus("current")


class _Dvbt2MisoGroup_Type(Integer32):
    """Custom type dvbt2MisoGroup based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("one", 0),
          ("two", 1))
    )


_Dvbt2MisoGroup_Type.__name__ = "Integer32"
_Dvbt2MisoGroup_Object = MibScalar
dvbt2MisoGroup = _Dvbt2MisoGroup_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 3, 5),
    _Dvbt2MisoGroup_Type()
)
dvbt2MisoGroup.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbt2MisoGroup.setStatus("current")


class _Dvbt2ExtendedCarrierMode_Type(Integer32):
    """Custom type dvbt2ExtendedCarrierMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_Dvbt2ExtendedCarrierMode_Type.__name__ = "Integer32"
_Dvbt2ExtendedCarrierMode_Object = MibScalar
dvbt2ExtendedCarrierMode = _Dvbt2ExtendedCarrierMode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 3, 6),
    _Dvbt2ExtendedCarrierMode_Type()
)
dvbt2ExtendedCarrierMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbt2ExtendedCarrierMode.setStatus("current")


class _Dvbt2FftSize_Type(Integer32):
    """Custom type dvbt2FftSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("fft1K", 0),
          ("fft2K", 1),
          ("fft4K", 2),
          ("fft8K", 3),
          ("fft16K", 4),
          ("fft32K", 5))
    )


_Dvbt2FftSize_Type.__name__ = "Integer32"
_Dvbt2FftSize_Object = MibScalar
dvbt2FftSize = _Dvbt2FftSize_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 3, 7),
    _Dvbt2FftSize_Type()
)
dvbt2FftSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbt2FftSize.setStatus("current")


class _Dvbt2GuardInterval_Type(Integer32):
    """Custom type dvbt2GuardInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("interval1div32", 0),
          ("interval1div16", 1),
          ("interval1div8", 2),
          ("interval1div4", 3),
          ("interval1div128", 4),
          ("interval19div128", 5),
          ("interval19div256", 6))
    )


_Dvbt2GuardInterval_Type.__name__ = "Integer32"
_Dvbt2GuardInterval_Object = MibScalar
dvbt2GuardInterval = _Dvbt2GuardInterval_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 3, 8),
    _Dvbt2GuardInterval_Type()
)
dvbt2GuardInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbt2GuardInterval.setStatus("current")


class _Dvbt2PaprReduction_Type(Integer32):
    """Custom type dvbt2PaprReduction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("nullTrP2", 0),
          ("ace", 1),
          ("tr", 2),
          ("aceTr", 3))
    )


_Dvbt2PaprReduction_Type.__name__ = "Integer32"
_Dvbt2PaprReduction_Object = MibScalar
dvbt2PaprReduction = _Dvbt2PaprReduction_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 3, 9),
    _Dvbt2PaprReduction_Type()
)
dvbt2PaprReduction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbt2PaprReduction.setStatus("current")


class _Dvbt2PilotPattern_Type(Integer32):
    """Custom type dvbt2PilotPattern based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("pp1", 0),
          ("pp2", 1),
          ("pp3", 2),
          ("pp4", 3),
          ("pp5", 4),
          ("pp6", 5),
          ("pp7", 6),
          ("pp8", 7))
    )


_Dvbt2PilotPattern_Type.__name__ = "Integer32"
_Dvbt2PilotPattern_Object = MibScalar
dvbt2PilotPattern = _Dvbt2PilotPattern_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 3, 10),
    _Dvbt2PilotPattern_Type()
)
dvbt2PilotPattern.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbt2PilotPattern.setStatus("current")


class _Dvbt2FramesPerSuperframe_Type(Unsigned32):
    """Custom type dvbt2FramesPerSuperframe based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 256),
    )


_Dvbt2FramesPerSuperframe_Type.__name__ = "Unsigned32"
_Dvbt2FramesPerSuperframe_Object = MibScalar
dvbt2FramesPerSuperframe = _Dvbt2FramesPerSuperframe_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 3, 11),
    _Dvbt2FramesPerSuperframe_Type()
)
dvbt2FramesPerSuperframe.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbt2FramesPerSuperframe.setStatus("current")


class _Dvbt2OfdmSymbolsPerSuperframe_Type(Unsigned32):
    """Custom type dvbt2OfdmSymbolsPerSuperframe based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_Dvbt2OfdmSymbolsPerSuperframe_Type.__name__ = "Unsigned32"
_Dvbt2OfdmSymbolsPerSuperframe_Object = MibScalar
dvbt2OfdmSymbolsPerSuperframe = _Dvbt2OfdmSymbolsPerSuperframe_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 3, 12),
    _Dvbt2OfdmSymbolsPerSuperframe_Type()
)
dvbt2OfdmSymbolsPerSuperframe.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dvbt2OfdmSymbolsPerSuperframe.setStatus("current")
_Dvbt2Plp_ObjectIdentity = ObjectIdentity
dvbt2Plp = _Dvbt2Plp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 4)
)


class _NumberOfPlps_Type(Unsigned32):
    """Custom type numberOfPlps based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 8),
    )


_NumberOfPlps_Type.__name__ = "Unsigned32"
_NumberOfPlps_Object = MibScalar
numberOfPlps = _NumberOfPlps_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 4, 1),
    _NumberOfPlps_Type()
)
numberOfPlps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    numberOfPlps.setStatus("current")
_Dvbt2PlpTable_Object = MibTable
dvbt2PlpTable = _Dvbt2PlpTable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 4, 2)
)
if mibBuilder.loadTexts:
    dvbt2PlpTable.setStatus("current")
_Dvbt2PlpEntry_Object = MibTableRow
dvbt2PlpEntry = _Dvbt2PlpEntry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 4, 2, 1)
)
dvbt2PlpEntry.setIndexNames(
    (0, "TREDESS-FS-MIB", "plpIndex"),
)
if mibBuilder.loadTexts:
    dvbt2PlpEntry.setStatus("current")


class _PlpIndex_Type(Unsigned32):
    """Custom type plpIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 8),
    )


_PlpIndex_Type.__name__ = "Unsigned32"
_PlpIndex_Object = MibTableColumn
plpIndex = _PlpIndex_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 4, 2, 1, 1),
    _PlpIndex_Type()
)
plpIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    plpIndex.setStatus("current")


class _PlpId_Type(Unsigned32):
    """Custom type plpId based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_PlpId_Type.__name__ = "Unsigned32"
_PlpId_Object = MibTableColumn
plpId = _PlpId_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 4, 2, 1, 2),
    _PlpId_Type()
)
plpId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plpId.setStatus("current")


class _PlpType_Type(Integer32):
    """Custom type plpType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("common", 0),
          ("data1", 1),
          ("data2", 2))
    )


_PlpType_Type.__name__ = "Integer32"
_PlpType_Object = MibTableColumn
plpType = _PlpType_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 4, 2, 1, 3),
    _PlpType_Type()
)
plpType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plpType.setStatus("current")


class _PlpMode_Type(Integer32):
    """Custom type plpMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("nm", 0),
          ("hem", 1))
    )


_PlpMode_Type.__name__ = "Integer32"
_PlpMode_Object = MibTableColumn
plpMode = _PlpMode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 4, 2, 1, 4),
    _PlpMode_Type()
)
plpMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plpMode.setStatus("current")


class _PlpGroupId_Type(Unsigned32):
    """Custom type plpGroupId based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_PlpGroupId_Type.__name__ = "Unsigned32"
_PlpGroupId_Object = MibTableColumn
plpGroupId = _PlpGroupId_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 4, 2, 1, 5),
    _PlpGroupId_Type()
)
plpGroupId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plpGroupId.setStatus("current")


class _PlpConstellation_Type(Integer32):
    """Custom type plpConstellation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("qpsk", 0),
          ("qam16", 1),
          ("qam64", 2),
          ("qam256", 3))
    )


_PlpConstellation_Type.__name__ = "Integer32"
_PlpConstellation_Object = MibTableColumn
plpConstellation = _PlpConstellation_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 4, 2, 1, 6),
    _PlpConstellation_Type()
)
plpConstellation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plpConstellation.setStatus("current")
_RotatedConstellation_Type = DisabledEnabled
_RotatedConstellation_Object = MibTableColumn
rotatedConstellation = _RotatedConstellation_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 4, 2, 1, 7),
    _RotatedConstellation_Type()
)
rotatedConstellation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rotatedConstellation.setStatus("current")


class _FecType_Type(Integer32):
    """Custom type fecType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("ldpc16k", 0),
          ("ldpc64k", 1))
    )


_FecType_Type.__name__ = "Integer32"
_FecType_Object = MibTableColumn
fecType = _FecType_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 4, 2, 1, 8),
    _FecType_Type()
)
fecType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fecType.setStatus("current")


class _CodeRate_Type(Integer32):
    """Custom type codeRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("rate1div2", 0),
          ("rate3div5", 1),
          ("rate2div3", 2),
          ("rate3div4", 3),
          ("rate4div5", 4),
          ("rate5div6", 5),
          ("rate1div3", 6),
          ("rate2div5", 7))
    )


_CodeRate_Type.__name__ = "Integer32"
_CodeRate_Object = MibTableColumn
codeRate = _CodeRate_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 4, 2, 1, 9),
    _CodeRate_Type()
)
codeRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    codeRate.setStatus("current")


class _NumberOfFecBlocks_Type(Unsigned32):
    """Custom type numberOfFecBlocks based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_NumberOfFecBlocks_Type.__name__ = "Unsigned32"
_NumberOfFecBlocks_Object = MibTableColumn
numberOfFecBlocks = _NumberOfFecBlocks_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 4, 2, 1, 10),
    _NumberOfFecBlocks_Type()
)
numberOfFecBlocks.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    numberOfFecBlocks.setStatus("current")


class _TypeOfTimeInvervaling_Type(Integer32):
    """Custom type typeOfTimeInvervaling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("simple", 0),
          ("multiple", 1))
    )


_TypeOfTimeInvervaling_Type.__name__ = "Integer32"
_TypeOfTimeInvervaling_Object = MibTableColumn
typeOfTimeInvervaling = _TypeOfTimeInvervaling_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 4, 2, 1, 11),
    _TypeOfTimeInvervaling_Type()
)
typeOfTimeInvervaling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    typeOfTimeInvervaling.setStatus("current")


class _LengthOfTimeInvervaling_Type(Unsigned32):
    """Custom type lengthOfTimeInvervaling based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_LengthOfTimeInvervaling_Type.__name__ = "Unsigned32"
_LengthOfTimeInvervaling_Object = MibTableColumn
lengthOfTimeInvervaling = _LengthOfTimeInvervaling_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 4, 2, 1, 12),
    _LengthOfTimeInvervaling_Type()
)
lengthOfTimeInvervaling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lengthOfTimeInvervaling.setStatus("current")


class _InBandSignalling_Type(Integer32):
    """Custom type inBandSignalling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("b", 1),
          ("a", 2),
          ("ab", 3))
    )


_InBandSignalling_Type.__name__ = "Integer32"
_InBandSignalling_Object = MibTableColumn
inBandSignalling = _InBandSignalling_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 4, 2, 1, 13),
    _InBandSignalling_Type()
)
inBandSignalling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    inBandSignalling.setStatus("current")
_PlpBer_Type = FloatingPoint
_PlpBer_Object = MibTableColumn
plpBer = _PlpBer_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 10, 4, 2, 1, 14),
    _PlpBer_Type()
)
plpBer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plpBer.setStatus("current")
_ModulatorISDBT_ObjectIdentity = ObjectIdentity
modulatorISDBT = _ModulatorISDBT_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15)
)
_IsdbtSystem_ObjectIdentity = ObjectIdentity
isdbtSystem = _IsdbtSystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 1)
)


class _IsdbtBandwidth_Type(Integer32):
    """Custom type isdbtBandwidth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("bw5Mhz", 0),
          ("bw6Mhz", 1),
          ("bw7Mhz", 2),
          ("bw8Mhz", 3))
    )


_IsdbtBandwidth_Type.__name__ = "Integer32"
_IsdbtBandwidth_Object = MibScalar
isdbtBandwidth = _IsdbtBandwidth_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 1, 1),
    _IsdbtBandwidth_Type()
)
isdbtBandwidth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtBandwidth.setStatus("current")


class _IsdbtInputMode_Type(Integer32):
    """Custom type isdbtInputMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("ts", 0),
          ("bts", 1))
    )


_IsdbtInputMode_Type.__name__ = "Integer32"
_IsdbtInputMode_Object = MibScalar
isdbtInputMode = _IsdbtInputMode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 1, 2),
    _IsdbtInputMode_Type()
)
isdbtInputMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtInputMode.setStatus("current")
_IsdbtBtsRateLock_Type = DisabledEnabled
_IsdbtBtsRateLock_Object = MibScalar
isdbtBtsRateLock = _IsdbtBtsRateLock_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 1, 3),
    _IsdbtBtsRateLock_Type()
)
isdbtBtsRateLock.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isdbtBtsRateLock.setStatus("current")
_IsdbtConditionaAccessSystem_ObjectIdentity = ObjectIdentity
isdbtConditionaAccessSystem = _IsdbtConditionaAccessSystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 1, 10)
)
_IsdbtCasBiss_Type = DisabledEnabled
_IsdbtCasBiss_Object = MibScalar
isdbtCasBiss = _IsdbtCasBiss_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 1, 10, 5),
    _IsdbtCasBiss_Type()
)
isdbtCasBiss.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtCasBiss.setStatus("current")


class _IsdbtCasMode_Type(Integer32):
    """Custom type isdbtCasMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("mode1", 0),
          ("modeE", 1))
    )


_IsdbtCasMode_Type.__name__ = "Integer32"
_IsdbtCasMode_Object = MibScalar
isdbtCasMode = _IsdbtCasMode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 1, 10, 10),
    _IsdbtCasMode_Type()
)
isdbtCasMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtCasMode.setStatus("current")


class _IsdbtCasPass_Type(OctetString):
    """Custom type isdbtCasPass based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_IsdbtCasPass_Type.__name__ = "OctetString"
_IsdbtCasPass_Object = MibScalar
isdbtCasPass = _IsdbtCasPass_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 1, 10, 15),
    _IsdbtCasPass_Type()
)
isdbtCasPass.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtCasPass.setStatus("current")


class _IsdbtCasInjectId_Type(OctetString):
    """Custom type isdbtCasInjectId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 14),
    )


_IsdbtCasInjectId_Type.__name__ = "OctetString"
_IsdbtCasInjectId_Object = MibScalar
isdbtCasInjectId = _IsdbtCasInjectId_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 1, 10, 20),
    _IsdbtCasInjectId_Type()
)
isdbtCasInjectId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtCasInjectId.setStatus("current")
_IsdbtBroadcastTransportStream_ObjectIdentity = ObjectIdentity
isdbtBroadcastTransportStream = _IsdbtBroadcastTransportStream_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 1, 15)
)
_IsdbtBtsDecompression_Type = DisabledEnabled
_IsdbtBtsDecompression_Object = MibScalar
isdbtBtsDecompression = _IsdbtBtsDecompression_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 1, 15, 5),
    _IsdbtBtsDecompression_Type()
)
isdbtBtsDecompression.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtBtsDecompression.setStatus("current")


class _IsdbtBtsIipPid_Type(Unsigned32):
    """Custom type isdbtBtsIipPid based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 8190),
    )


_IsdbtBtsIipPid_Type.__name__ = "Unsigned32"
_IsdbtBtsIipPid_Object = MibScalar
isdbtBtsIipPid = _IsdbtBtsIipPid_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 1, 15, 10),
    _IsdbtBtsIipPid_Type()
)
isdbtBtsIipPid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtBtsIipPid.setStatus("current")


class _IsdbtBtsAuxPid_Type(Unsigned32):
    """Custom type isdbtBtsAuxPid based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(32, 8191),
    )


_IsdbtBtsAuxPid_Type.__name__ = "Unsigned32"
_IsdbtBtsAuxPid_Object = MibScalar
isdbtBtsAuxPid = _IsdbtBtsAuxPid_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 1, 15, 15),
    _IsdbtBtsAuxPid_Type()
)
isdbtBtsAuxPid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtBtsAuxPid.setStatus("current")
_IsdbtBtsPidRemapping_Type = DisabledEnabled
_IsdbtBtsPidRemapping_Object = MibScalar
isdbtBtsPidRemapping = _IsdbtBtsPidRemapping_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 1, 15, 20),
    _IsdbtBtsPidRemapping_Type()
)
isdbtBtsPidRemapping.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtBtsPidRemapping.setStatus("current")
_IsdbtBtsRestorePcr_Type = DisabledEnabled
_IsdbtBtsRestorePcr_Object = MibScalar
isdbtBtsRestorePcr = _IsdbtBtsRestorePcr_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 1, 15, 25),
    _IsdbtBtsRestorePcr_Type()
)
isdbtBtsRestorePcr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtBtsRestorePcr.setStatus("current")
_IsdbtBtsBypass_Type = DisabledEnabled
_IsdbtBtsBypass_Object = MibScalar
isdbtBtsBypass = _IsdbtBtsBypass_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 1, 15, 30),
    _IsdbtBtsBypass_Type()
)
isdbtBtsBypass.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtBtsBypass.setStatus("current")


class _IsdbtBtsVirtualChannel_Type(Unsigned32):
    """Custom type isdbtBtsVirtualChannel based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99),
    )


_IsdbtBtsVirtualChannel_Type.__name__ = "Unsigned32"
_IsdbtBtsVirtualChannel_Object = MibScalar
isdbtBtsVirtualChannel = _IsdbtBtsVirtualChannel_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 1, 15, 35),
    _IsdbtBtsVirtualChannel_Type()
)
isdbtBtsVirtualChannel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtBtsVirtualChannel.setStatus("current")


class _IsdbtBtsChannel_Type(Unsigned32):
    """Custom type isdbtBtsChannel based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(470000000, 862000000),
    )


_IsdbtBtsChannel_Type.__name__ = "Unsigned32"
_IsdbtBtsChannel_Object = MibScalar
isdbtBtsChannel = _IsdbtBtsChannel_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 1, 15, 40),
    _IsdbtBtsChannel_Type()
)
isdbtBtsChannel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtBtsChannel.setStatus("current")


class _IsdbtBtsAreaCode_Type(Unsigned32):
    """Custom type isdbtBtsAreaCode based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_IsdbtBtsAreaCode_Type.__name__ = "Unsigned32"
_IsdbtBtsAreaCode_Object = MibScalar
isdbtBtsAreaCode = _IsdbtBtsAreaCode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 1, 15, 45),
    _IsdbtBtsAreaCode_Type()
)
isdbtBtsAreaCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtBtsAreaCode.setStatus("current")
_IsdbtBts188BInputLocked_Type = NokOk
_IsdbtBts188BInputLocked_Object = MibScalar
isdbtBts188BInputLocked = _IsdbtBts188BInputLocked_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 1, 15, 50),
    _IsdbtBts188BInputLocked_Type()
)
isdbtBts188BInputLocked.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isdbtBts188BInputLocked.setStatus("current")
_IsdbtBts204BOutputLocked_Type = NokOk
_IsdbtBts204BOutputLocked_Object = MibScalar
isdbtBts204BOutputLocked = _IsdbtBts204BOutputLocked_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 1, 15, 55),
    _IsdbtBts204BOutputLocked_Type()
)
isdbtBts204BOutputLocked.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isdbtBts204BOutputLocked.setStatus("current")
_IsdbtPidList_ObjectIdentity = ObjectIdentity
isdbtPidList = _IsdbtPidList_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 1, 20)
)
_IsdbtDeletePids_Type = NullApply
_IsdbtDeletePids_Object = MibScalar
isdbtDeletePids = _IsdbtDeletePids_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 1, 20, 5),
    _IsdbtDeletePids_Type()
)
isdbtDeletePids.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtDeletePids.setStatus("current")
_IsdbtPidListTable_Object = MibTable
isdbtPidListTable = _IsdbtPidListTable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 1, 20, 10)
)
if mibBuilder.loadTexts:
    isdbtPidListTable.setStatus("current")
_IsdbtPidListEntry_Object = MibTableRow
isdbtPidListEntry = _IsdbtPidListEntry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 1, 20, 10, 1)
)
isdbtPidListEntry.setIndexNames(
    (0, "TREDESS-FS-MIB", "isdbtPidIndex"),
)
if mibBuilder.loadTexts:
    isdbtPidListEntry.setStatus("current")


class _IsdbtPidIndex_Type(Unsigned32):
    """Custom type isdbtPidIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 99),
    )


_IsdbtPidIndex_Type.__name__ = "Unsigned32"
_IsdbtPidIndex_Object = MibTableColumn
isdbtPidIndex = _IsdbtPidIndex_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 1, 20, 10, 1, 1),
    _IsdbtPidIndex_Type()
)
isdbtPidIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    isdbtPidIndex.setStatus("current")


class _IsdbtPidIn_Type(Unsigned32):
    """Custom type isdbtPidIn based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_IsdbtPidIn_Type.__name__ = "Unsigned32"
_IsdbtPidIn_Object = MibTableColumn
isdbtPidIn = _IsdbtPidIn_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 1, 20, 10, 1, 2),
    _IsdbtPidIn_Type()
)
isdbtPidIn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isdbtPidIn.setStatus("current")


class _IsdbtPidOut_Type(Unsigned32):
    """Custom type isdbtPidOut based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_IsdbtPidOut_Type.__name__ = "Unsigned32"
_IsdbtPidOut_Object = MibTableColumn
isdbtPidOut = _IsdbtPidOut_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 1, 20, 10, 1, 3),
    _IsdbtPidOut_Type()
)
isdbtPidOut.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isdbtPidOut.setStatus("current")
_IsdbtNetwork_ObjectIdentity = ObjectIdentity
isdbtNetwork = _IsdbtNetwork_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 2)
)


class _IsdbtNetworkType_Type(Integer32):
    """Custom type isdbtNetworkType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("sfn", 0),
          ("mfn", 1))
    )


_IsdbtNetworkType_Type.__name__ = "Integer32"
_IsdbtNetworkType_Object = MibScalar
isdbtNetworkType = _IsdbtNetworkType_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 2, 1),
    _IsdbtNetworkType_Type()
)
isdbtNetworkType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtNetworkType.setStatus("current")


class _IsdbtLocalDelay_Type(OctetString):
    """Custom type isdbtLocalDelay based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 7),
    )


_IsdbtLocalDelay_Type.__name__ = "OctetString"
_IsdbtLocalDelay_Object = MibScalar
isdbtLocalDelay = _IsdbtLocalDelay_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 2, 3),
    _IsdbtLocalDelay_Type()
)
isdbtLocalDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtLocalDelay.setStatus("current")
if mibBuilder.loadTexts:
    isdbtLocalDelay.setUnits("us")
_Iip_ObjectIdentity = ObjectIdentity
iip = _Iip_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 2, 4)
)
_IsdbtMaximumNetworkDelay_Type = DisplayString
_IsdbtMaximumNetworkDelay_Object = MibScalar
isdbtMaximumNetworkDelay = _IsdbtMaximumNetworkDelay_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 2, 4, 1),
    _IsdbtMaximumNetworkDelay_Type()
)
isdbtMaximumNetworkDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isdbtMaximumNetworkDelay.setStatus("current")
if mibBuilder.loadTexts:
    isdbtMaximumNetworkDelay.setUnits("us")
_IsdbtTimeOffset_Type = DisplayString
_IsdbtTimeOffset_Object = MibScalar
isdbtTimeOffset = _IsdbtTimeOffset_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 2, 4, 2),
    _IsdbtTimeOffset_Type()
)
isdbtTimeOffset.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isdbtTimeOffset.setStatus("current")
if mibBuilder.loadTexts:
    isdbtTimeOffset.setUnits("us")
_IsdbtStaticDelay_Type = DisabledEnabled
_IsdbtStaticDelay_Object = MibScalar
isdbtStaticDelay = _IsdbtStaticDelay_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 2, 4, 3),
    _IsdbtStaticDelay_Type()
)
isdbtStaticDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isdbtStaticDelay.setStatus("current")


class _IsdbtTransmitterId_Type(Unsigned32):
    """Custom type isdbtTransmitterId based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_IsdbtTransmitterId_Type.__name__ = "Unsigned32"
_IsdbtTransmitterId_Object = MibScalar
isdbtTransmitterId = _IsdbtTransmitterId_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 2, 4, 4),
    _IsdbtTransmitterId_Type()
)
isdbtTransmitterId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtTransmitterId.setStatus("current")
_IsdbtTimingInformation_ObjectIdentity = ObjectIdentity
isdbtTimingInformation = _IsdbtTimingInformation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 2, 5)
)
_IsdbtCurrentNetworkDelay_Type = DisplayString
_IsdbtCurrentNetworkDelay_Object = MibScalar
isdbtCurrentNetworkDelay = _IsdbtCurrentNetworkDelay_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 2, 5, 1),
    _IsdbtCurrentNetworkDelay_Type()
)
isdbtCurrentNetworkDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isdbtCurrentNetworkDelay.setStatus("current")
if mibBuilder.loadTexts:
    isdbtCurrentNetworkDelay.setUnits("us")
_IsdbtInputBufferDelay_Type = DisplayString
_IsdbtInputBufferDelay_Object = MibScalar
isdbtInputBufferDelay = _IsdbtInputBufferDelay_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 2, 5, 2),
    _IsdbtInputBufferDelay_Type()
)
isdbtInputBufferDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isdbtInputBufferDelay.setStatus("current")
if mibBuilder.loadTexts:
    isdbtInputBufferDelay.setUnits("us")
_IsdbtProcessingDelay_Type = DisplayString
_IsdbtProcessingDelay_Object = MibScalar
isdbtProcessingDelay = _IsdbtProcessingDelay_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 2, 5, 3),
    _IsdbtProcessingDelay_Type()
)
isdbtProcessingDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isdbtProcessingDelay.setStatus("current")
if mibBuilder.loadTexts:
    isdbtProcessingDelay.setUnits("us")
_IsdbtNetworkDelayMargin_Type = DisplayString
_IsdbtNetworkDelayMargin_Object = MibScalar
isdbtNetworkDelayMargin = _IsdbtNetworkDelayMargin_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 2, 5, 4),
    _IsdbtNetworkDelayMargin_Type()
)
isdbtNetworkDelayMargin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isdbtNetworkDelayMargin.setStatus("current")
if mibBuilder.loadTexts:
    isdbtNetworkDelayMargin.setUnits("us")
_IsdbtDelay_Type = DisplayString
_IsdbtDelay_Object = MibScalar
isdbtDelay = _IsdbtDelay_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 2, 5, 5),
    _IsdbtDelay_Type()
)
isdbtDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isdbtDelay.setStatus("current")
if mibBuilder.loadTexts:
    isdbtDelay.setUnits("us")


class _IsdbtBufferDuration_Type(Unsigned32):
    """Custom type isdbtBufferDuration based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(50, 999),
    )


_IsdbtBufferDuration_Type.__name__ = "Unsigned32"
_IsdbtBufferDuration_Object = MibScalar
isdbtBufferDuration = _IsdbtBufferDuration_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 2, 6),
    _IsdbtBufferDuration_Type()
)
isdbtBufferDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtBufferDuration.setStatus("current")
if mibBuilder.loadTexts:
    isdbtBufferDuration.setUnits("ms")


class _IsdbtRfDelay_Type(OctetString):
    """Custom type isdbtRfDelay based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 7),
    )


_IsdbtRfDelay_Type.__name__ = "OctetString"
_IsdbtRfDelay_Object = MibScalar
isdbtRfDelay = _IsdbtRfDelay_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 2, 10),
    _IsdbtRfDelay_Type()
)
isdbtRfDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtRfDelay.setStatus("current")
if mibBuilder.loadTexts:
    isdbtRfDelay.setUnits("us")
_IsdbtModulation_ObjectIdentity = ObjectIdentity
isdbtModulation = _IsdbtModulation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 3)
)


class _IsdbtFft_Type(Integer32):
    """Custom type isdbtFft based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("fftMode12K", 1),
          ("fftMode24K", 2),
          ("fftMode38K", 3))
    )


_IsdbtFft_Type.__name__ = "Integer32"
_IsdbtFft_Object = MibScalar
isdbtFft = _IsdbtFft_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 3, 1),
    _IsdbtFft_Type()
)
isdbtFft.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtFft.setStatus("current")


class _IsdbtGuardInterval_Type(Integer32):
    """Custom type isdbtGuardInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("guardInterval1div32", 0),
          ("guardInterval1div16", 1),
          ("guardInterval1div8", 2),
          ("guardInterval1div4", 3))
    )


_IsdbtGuardInterval_Type.__name__ = "Integer32"
_IsdbtGuardInterval_Object = MibScalar
isdbtGuardInterval = _IsdbtGuardInterval_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 3, 2),
    _IsdbtGuardInterval_Type()
)
isdbtGuardInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtGuardInterval.setStatus("current")


class _IsdbtPartialReception_Type(Integer32):
    """Custom type isdbtPartialReception based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_IsdbtPartialReception_Type.__name__ = "Integer32"
_IsdbtPartialReception_Object = MibScalar
isdbtPartialReception = _IsdbtPartialReception_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 3, 5),
    _IsdbtPartialReception_Type()
)
isdbtPartialReception.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtPartialReception.setStatus("current")
_IsdbtLayerA_ObjectIdentity = ObjectIdentity
isdbtLayerA = _IsdbtLayerA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 3, 6)
)
_IsdbtPidsLA_Type = DisplayString
_IsdbtPidsLA_Object = MibScalar
isdbtPidsLA = _IsdbtPidsLA_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 3, 6, 2),
    _IsdbtPidsLA_Type()
)
isdbtPidsLA.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtPidsLA.setStatus("current")


class _IsdbtConstellationLA_Type(Integer32):
    """Custom type isdbtConstellationLA based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dqpsk", 0),
          ("qpsk", 1),
          ("qam16", 2),
          ("qam64", 3))
    )


_IsdbtConstellationLA_Type.__name__ = "Integer32"
_IsdbtConstellationLA_Object = MibScalar
isdbtConstellationLA = _IsdbtConstellationLA_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 3, 6, 3),
    _IsdbtConstellationLA_Type()
)
isdbtConstellationLA.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtConstellationLA.setStatus("current")


class _IsdbtCodeRateLA_Type(Integer32):
    """Custom type isdbtCodeRateLA based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("rate1div2", 0),
          ("rate2div3", 1),
          ("rate3div4", 2),
          ("rate5div6", 3),
          ("rate7div8", 4))
    )


_IsdbtCodeRateLA_Type.__name__ = "Integer32"
_IsdbtCodeRateLA_Object = MibScalar
isdbtCodeRateLA = _IsdbtCodeRateLA_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 3, 6, 4),
    _IsdbtCodeRateLA_Type()
)
isdbtCodeRateLA.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtCodeRateLA.setStatus("current")


class _IsdbtTimeIntervalLengthLA_Type(Integer32):
    """Custom type isdbtTimeIntervalLengthLA based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              4,
              8,
              16)
        )
    )
    namedValues = NamedValues(
        *(("length0", 0),
          ("length1", 1),
          ("length2", 2),
          ("length4", 4),
          ("length8", 8),
          ("length16", 16))
    )


_IsdbtTimeIntervalLengthLA_Type.__name__ = "Integer32"
_IsdbtTimeIntervalLengthLA_Object = MibScalar
isdbtTimeIntervalLengthLA = _IsdbtTimeIntervalLengthLA_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 3, 6, 5),
    _IsdbtTimeIntervalLengthLA_Type()
)
isdbtTimeIntervalLengthLA.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtTimeIntervalLengthLA.setStatus("current")


class _IsdbtNumberOfSegmentsLA_Type(Unsigned32):
    """Custom type isdbtNumberOfSegmentsLA based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 13),
    )


_IsdbtNumberOfSegmentsLA_Type.__name__ = "Unsigned32"
_IsdbtNumberOfSegmentsLA_Object = MibScalar
isdbtNumberOfSegmentsLA = _IsdbtNumberOfSegmentsLA_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 3, 6, 6),
    _IsdbtNumberOfSegmentsLA_Type()
)
isdbtNumberOfSegmentsLA.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtNumberOfSegmentsLA.setStatus("current")
_IsdbtBitrateLA_Type = DisplayString
_IsdbtBitrateLA_Object = MibScalar
isdbtBitrateLA = _IsdbtBitrateLA_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 3, 6, 7),
    _IsdbtBitrateLA_Type()
)
isdbtBitrateLA.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isdbtBitrateLA.setStatus("current")
if mibBuilder.loadTexts:
    isdbtBitrateLA.setUnits("bps")
_IsdbtBerLA_Type = DisplayString
_IsdbtBerLA_Object = MibScalar
isdbtBerLA = _IsdbtBerLA_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 3, 6, 8),
    _IsdbtBerLA_Type()
)
isdbtBerLA.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isdbtBerLA.setStatus("current")
_IsdbtServicesA_Type = DisplayString
_IsdbtServicesA_Object = MibScalar
isdbtServicesA = _IsdbtServicesA_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 3, 6, 10),
    _IsdbtServicesA_Type()
)
isdbtServicesA.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtServicesA.setStatus("current")
_IsdbtLayerB_ObjectIdentity = ObjectIdentity
isdbtLayerB = _IsdbtLayerB_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 3, 7)
)
_IsdbtPidsLB_Type = DisplayString
_IsdbtPidsLB_Object = MibScalar
isdbtPidsLB = _IsdbtPidsLB_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 3, 7, 2),
    _IsdbtPidsLB_Type()
)
isdbtPidsLB.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtPidsLB.setStatus("current")


class _IsdbtConstellationLB_Type(Integer32):
    """Custom type isdbtConstellationLB based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dqpsk", 0),
          ("qpsk", 1),
          ("qam16", 2),
          ("qam64", 3))
    )


_IsdbtConstellationLB_Type.__name__ = "Integer32"
_IsdbtConstellationLB_Object = MibScalar
isdbtConstellationLB = _IsdbtConstellationLB_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 3, 7, 3),
    _IsdbtConstellationLB_Type()
)
isdbtConstellationLB.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtConstellationLB.setStatus("current")


class _IsdbtCodeRateLB_Type(Integer32):
    """Custom type isdbtCodeRateLB based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("rate1div2", 0),
          ("rate2div3", 1),
          ("rate3div4", 2),
          ("rate5div6", 3),
          ("rate7div8", 4))
    )


_IsdbtCodeRateLB_Type.__name__ = "Integer32"
_IsdbtCodeRateLB_Object = MibScalar
isdbtCodeRateLB = _IsdbtCodeRateLB_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 3, 7, 4),
    _IsdbtCodeRateLB_Type()
)
isdbtCodeRateLB.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtCodeRateLB.setStatus("current")


class _IsdbtTimeIntervalLengthLB_Type(Integer32):
    """Custom type isdbtTimeIntervalLengthLB based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              4,
              8,
              16)
        )
    )
    namedValues = NamedValues(
        *(("length0", 0),
          ("length1", 1),
          ("length2", 2),
          ("length4", 4),
          ("length8", 8),
          ("length16", 16))
    )


_IsdbtTimeIntervalLengthLB_Type.__name__ = "Integer32"
_IsdbtTimeIntervalLengthLB_Object = MibScalar
isdbtTimeIntervalLengthLB = _IsdbtTimeIntervalLengthLB_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 3, 7, 5),
    _IsdbtTimeIntervalLengthLB_Type()
)
isdbtTimeIntervalLengthLB.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtTimeIntervalLengthLB.setStatus("current")


class _IsdbtNumberOfSegmentsLB_Type(Unsigned32):
    """Custom type isdbtNumberOfSegmentsLB based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 13),
    )


_IsdbtNumberOfSegmentsLB_Type.__name__ = "Unsigned32"
_IsdbtNumberOfSegmentsLB_Object = MibScalar
isdbtNumberOfSegmentsLB = _IsdbtNumberOfSegmentsLB_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 3, 7, 6),
    _IsdbtNumberOfSegmentsLB_Type()
)
isdbtNumberOfSegmentsLB.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtNumberOfSegmentsLB.setStatus("current")
_IsdbtBitrateLB_Type = DisplayString
_IsdbtBitrateLB_Object = MibScalar
isdbtBitrateLB = _IsdbtBitrateLB_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 3, 7, 7),
    _IsdbtBitrateLB_Type()
)
isdbtBitrateLB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isdbtBitrateLB.setStatus("current")
if mibBuilder.loadTexts:
    isdbtBitrateLB.setUnits("bps")
_IsdbtBerLB_Type = DisplayString
_IsdbtBerLB_Object = MibScalar
isdbtBerLB = _IsdbtBerLB_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 3, 7, 8),
    _IsdbtBerLB_Type()
)
isdbtBerLB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isdbtBerLB.setStatus("current")
_IsdbtServicesB_Type = DisplayString
_IsdbtServicesB_Object = MibScalar
isdbtServicesB = _IsdbtServicesB_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 3, 7, 10),
    _IsdbtServicesB_Type()
)
isdbtServicesB.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtServicesB.setStatus("current")
_IsdbtLayerC_ObjectIdentity = ObjectIdentity
isdbtLayerC = _IsdbtLayerC_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 3, 8)
)
_IsdbtPidsLC_Type = DisplayString
_IsdbtPidsLC_Object = MibScalar
isdbtPidsLC = _IsdbtPidsLC_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 3, 8, 2),
    _IsdbtPidsLC_Type()
)
isdbtPidsLC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtPidsLC.setStatus("current")


class _IsdbtConstellationLC_Type(Integer32):
    """Custom type isdbtConstellationLC based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dqpsk", 0),
          ("qpsk", 1),
          ("qam16", 2),
          ("qam64", 3))
    )


_IsdbtConstellationLC_Type.__name__ = "Integer32"
_IsdbtConstellationLC_Object = MibScalar
isdbtConstellationLC = _IsdbtConstellationLC_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 3, 8, 3),
    _IsdbtConstellationLC_Type()
)
isdbtConstellationLC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtConstellationLC.setStatus("current")


class _IsdbtCodeRateLC_Type(Integer32):
    """Custom type isdbtCodeRateLC based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("rate1div2", 0),
          ("rate2div3", 1),
          ("rate3div4", 2),
          ("rate5div6", 3),
          ("rate7div8", 4))
    )


_IsdbtCodeRateLC_Type.__name__ = "Integer32"
_IsdbtCodeRateLC_Object = MibScalar
isdbtCodeRateLC = _IsdbtCodeRateLC_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 3, 8, 4),
    _IsdbtCodeRateLC_Type()
)
isdbtCodeRateLC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtCodeRateLC.setStatus("current")


class _IsdbtTimeIntervalLengthLC_Type(Integer32):
    """Custom type isdbtTimeIntervalLengthLC based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              4,
              8,
              16)
        )
    )
    namedValues = NamedValues(
        *(("length0", 0),
          ("length1", 1),
          ("length2", 2),
          ("length4", 4),
          ("length8", 8),
          ("length16", 16))
    )


_IsdbtTimeIntervalLengthLC_Type.__name__ = "Integer32"
_IsdbtTimeIntervalLengthLC_Object = MibScalar
isdbtTimeIntervalLengthLC = _IsdbtTimeIntervalLengthLC_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 3, 8, 5),
    _IsdbtTimeIntervalLengthLC_Type()
)
isdbtTimeIntervalLengthLC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtTimeIntervalLengthLC.setStatus("current")


class _IsdbtNumberOfSegmentsLC_Type(Unsigned32):
    """Custom type isdbtNumberOfSegmentsLC based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 13),
    )


_IsdbtNumberOfSegmentsLC_Type.__name__ = "Unsigned32"
_IsdbtNumberOfSegmentsLC_Object = MibScalar
isdbtNumberOfSegmentsLC = _IsdbtNumberOfSegmentsLC_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 3, 8, 6),
    _IsdbtNumberOfSegmentsLC_Type()
)
isdbtNumberOfSegmentsLC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtNumberOfSegmentsLC.setStatus("current")
_IsdbtBitrateLC_Type = DisplayString
_IsdbtBitrateLC_Object = MibScalar
isdbtBitrateLC = _IsdbtBitrateLC_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 3, 8, 7),
    _IsdbtBitrateLC_Type()
)
isdbtBitrateLC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isdbtBitrateLC.setStatus("current")
if mibBuilder.loadTexts:
    isdbtBitrateLC.setUnits("bps")
_IsdbtBerLC_Type = DisplayString
_IsdbtBerLC_Object = MibScalar
isdbtBerLC = _IsdbtBerLC_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 3, 8, 8),
    _IsdbtBerLC_Type()
)
isdbtBerLC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isdbtBerLC.setStatus("current")
_IsdbtServicesC_Type = DisplayString
_IsdbtServicesC_Object = MibScalar
isdbtServicesC = _IsdbtServicesC_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 3, 8, 10),
    _IsdbtServicesC_Type()
)
isdbtServicesC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtServicesC.setStatus("current")


class _IsdbtPidFiltering_Type(Integer32):
    """Custom type isdbtPidFiltering based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("pids", 1),
          ("programs", 2),
          ("advanced", 3))
    )


_IsdbtPidFiltering_Type.__name__ = "Integer32"
_IsdbtPidFiltering_Object = MibScalar
isdbtPidFiltering = _IsdbtPidFiltering_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 3, 15),
    _IsdbtPidFiltering_Type()
)
isdbtPidFiltering.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtPidFiltering.setStatus("current")
_IsdbtPSI_ObjectIdentity = ObjectIdentity
isdbtPSI = _IsdbtPSI_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 4)
)
_IsdbtPAT_ObjectIdentity = ObjectIdentity
isdbtPAT = _IsdbtPAT_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 4, 5)
)
_IsdbtAvailablePrograms_Type = DisplayString
_IsdbtAvailablePrograms_Object = MibScalar
isdbtAvailablePrograms = _IsdbtAvailablePrograms_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 4, 5, 5),
    _IsdbtAvailablePrograms_Type()
)
isdbtAvailablePrograms.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isdbtAvailablePrograms.setStatus("current")
_IsdbtBIT_ObjectIdentity = ObjectIdentity
isdbtBIT = _IsdbtBIT_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 4, 10)
)


class _IsdbtAffiliationId_Type(Unsigned32):
    """Custom type isdbtAffiliationId based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_IsdbtAffiliationId_Type.__name__ = "Unsigned32"
_IsdbtAffiliationId_Object = MibScalar
isdbtAffiliationId = _IsdbtAffiliationId_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 4, 10, 5),
    _IsdbtAffiliationId_Type()
)
isdbtAffiliationId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtAffiliationId.setStatus("current")
_IsdbtNIT_ObjectIdentity = ObjectIdentity
isdbtNIT = _IsdbtNIT_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 4, 15)
)


class _IsdbtNetworkId_Type(Unsigned32):
    """Custom type isdbtNetworkId based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_IsdbtNetworkId_Type.__name__ = "Unsigned32"
_IsdbtNetworkId_Object = MibScalar
isdbtNetworkId = _IsdbtNetworkId_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 4, 15, 5),
    _IsdbtNetworkId_Type()
)
isdbtNetworkId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtNetworkId.setStatus("current")


class _IsdbtNetworkName_Type(DisplayString):
    """Custom type isdbtNetworkName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 18),
    )


_IsdbtNetworkName_Type.__name__ = "DisplayString"
_IsdbtNetworkName_Object = MibScalar
isdbtNetworkName = _IsdbtNetworkName_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 4, 15, 10),
    _IsdbtNetworkName_Type()
)
isdbtNetworkName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtNetworkName.setStatus("current")


class _IsdbtTransportStreamId_Type(Unsigned32):
    """Custom type isdbtTransportStreamId based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_IsdbtTransportStreamId_Type.__name__ = "Unsigned32"
_IsdbtTransportStreamId_Object = MibScalar
isdbtTransportStreamId = _IsdbtTransportStreamId_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 4, 15, 15),
    _IsdbtTransportStreamId_Type()
)
isdbtTransportStreamId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtTransportStreamId.setStatus("current")
_IsdbtOriginalNetworkId_Type = Unsigned32
_IsdbtOriginalNetworkId_Object = MibScalar
isdbtOriginalNetworkId = _IsdbtOriginalNetworkId_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 4, 15, 20),
    _IsdbtOriginalNetworkId_Type()
)
isdbtOriginalNetworkId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isdbtOriginalNetworkId.setStatus("current")


class _IsdbtAreaCode_Type(Unsigned32):
    """Custom type isdbtAreaCode based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4045),
    )


_IsdbtAreaCode_Type.__name__ = "Unsigned32"
_IsdbtAreaCode_Object = MibScalar
isdbtAreaCode = _IsdbtAreaCode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 4, 15, 25),
    _IsdbtAreaCode_Type()
)
isdbtAreaCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtAreaCode.setStatus("current")


class _IsdbtOverwriteAreaCode_Type(Unsigned32):
    """Custom type isdbtOverwriteAreaCode based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4045),
    )


_IsdbtOverwriteAreaCode_Type.__name__ = "Unsigned32"
_IsdbtOverwriteAreaCode_Object = MibScalar
isdbtOverwriteAreaCode = _IsdbtOverwriteAreaCode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 4, 15, 30),
    _IsdbtOverwriteAreaCode_Type()
)
isdbtOverwriteAreaCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtOverwriteAreaCode.setStatus("current")


class _IsdbtFrequency_Type(Unsigned32):
    """Custom type isdbtFrequency based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(470000000, 862000000),
    )


_IsdbtFrequency_Type.__name__ = "Unsigned32"
_IsdbtFrequency_Object = MibScalar
isdbtFrequency = _IsdbtFrequency_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 4, 15, 35),
    _IsdbtFrequency_Type()
)
isdbtFrequency.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtFrequency.setStatus("current")
if mibBuilder.loadTexts:
    isdbtFrequency.setUnits("Hz")


class _IsdbtOverwriteFrequency_Type(Unsigned32):
    """Custom type isdbtOverwriteFrequency based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(470000000, 862000000),
    )


_IsdbtOverwriteFrequency_Type.__name__ = "Unsigned32"
_IsdbtOverwriteFrequency_Object = MibScalar
isdbtOverwriteFrequency = _IsdbtOverwriteFrequency_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 4, 15, 40),
    _IsdbtOverwriteFrequency_Type()
)
isdbtOverwriteFrequency.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtOverwriteFrequency.setStatus("current")
if mibBuilder.loadTexts:
    isdbtOverwriteFrequency.setUnits("Hz")


class _IsdbtRemoteControlIdKey_Type(Unsigned32):
    """Custom type isdbtRemoteControlIdKey based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99),
    )


_IsdbtRemoteControlIdKey_Type.__name__ = "Unsigned32"
_IsdbtRemoteControlIdKey_Object = MibScalar
isdbtRemoteControlIdKey = _IsdbtRemoteControlIdKey_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 4, 15, 45),
    _IsdbtRemoteControlIdKey_Type()
)
isdbtRemoteControlIdKey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtRemoteControlIdKey.setStatus("current")
_IsdbtVirtualChannelBypass_Type = DisabledEnabled
_IsdbtVirtualChannelBypass_Object = MibScalar
isdbtVirtualChannelBypass = _IsdbtVirtualChannelBypass_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 4, 15, 47),
    _IsdbtVirtualChannelBypass_Type()
)
isdbtVirtualChannelBypass.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtVirtualChannelBypass.setStatus("current")


class _IsdbtOverwriteRemoteControlIdKey_Type(Unsigned32):
    """Custom type isdbtOverwriteRemoteControlIdKey based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99),
    )


_IsdbtOverwriteRemoteControlIdKey_Type.__name__ = "Unsigned32"
_IsdbtOverwriteRemoteControlIdKey_Object = MibScalar
isdbtOverwriteRemoteControlIdKey = _IsdbtOverwriteRemoteControlIdKey_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 4, 15, 50),
    _IsdbtOverwriteRemoteControlIdKey_Type()
)
isdbtOverwriteRemoteControlIdKey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtOverwriteRemoteControlIdKey.setStatus("current")


class _IsdbtTSName_Type(DisplayString):
    """Custom type isdbtTSName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 18),
    )


_IsdbtTSName_Type.__name__ = "DisplayString"
_IsdbtTSName_Object = MibScalar
isdbtTSName = _IsdbtTSName_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 4, 15, 55),
    _IsdbtTSName_Type()
)
isdbtTSName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtTSName.setStatus("current")
_IsdbtTOT_ObjectIdentity = ObjectIdentity
isdbtTOT = _IsdbtTOT_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 4, 20)
)
_IsdbtCountry_Type = DisplayString
_IsdbtCountry_Object = MibScalar
isdbtCountry = _IsdbtCountry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 4, 20, 5),
    _IsdbtCountry_Type()
)
isdbtCountry.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtCountry.setStatus("current")


class _IsdbtRegionId_Type(Unsigned32):
    """Custom type isdbtRegionId based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_IsdbtRegionId_Type.__name__ = "Unsigned32"
_IsdbtRegionId_Object = MibScalar
isdbtRegionId = _IsdbtRegionId_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 15, 4, 20, 10),
    _IsdbtRegionId_Type()
)
isdbtRegionId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isdbtRegionId.setStatus("current")
_ModulatorDAB_ObjectIdentity = ObjectIdentity
modulatorDAB = _ModulatorDAB_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17)
)
_DabSystem_ObjectIdentity = ObjectIdentity
dabSystem = _DabSystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 1)
)


class _DabTransmitterId_Type(Unsigned32):
    """Custom type dabTransmitterId based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_DabTransmitterId_Type.__name__ = "Unsigned32"
_DabTransmitterId_Object = MibScalar
dabTransmitterId = _DabTransmitterId_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 1, 1),
    _DabTransmitterId_Type()
)
dabTransmitterId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dabTransmitterId.setStatus("current")


class _DabMode_Type(Integer32):
    """Custom type dabMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("modeI", 1),
          ("modeII", 2),
          ("modeIII", 3),
          ("modeIV", 4))
    )


_DabMode_Type.__name__ = "Integer32"
_DabMode_Object = MibScalar
dabMode = _DabMode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 1, 5),
    _DabMode_Type()
)
dabMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dabMode.setStatus("current")
_DabNetwork_ObjectIdentity = ObjectIdentity
dabNetwork = _DabNetwork_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 3)
)


class _DabNetworkType_Type(Integer32):
    """Custom type dabNetworkType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("sfn", 0),
          ("mfn", 1))
    )


_DabNetworkType_Type.__name__ = "Integer32"
_DabNetworkType_Object = MibScalar
dabNetworkType = _DabNetworkType_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 3, 1),
    _DabNetworkType_Type()
)
dabNetworkType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dabNetworkType.setStatus("current")


class _DabSynchronizationType_Type(Integer32):
    """Custom type dabSynchronizationType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("relative", 0),
          ("absolute", 1))
    )


_DabSynchronizationType_Type.__name__ = "Integer32"
_DabSynchronizationType_Object = MibScalar
dabSynchronizationType = _DabSynchronizationType_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 3, 3),
    _DabSynchronizationType_Type()
)
dabSynchronizationType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dabSynchronizationType.setStatus("current")


class _DabRelativeSfnReference_Type(Integer32):
    """Custom type dabRelativeSfnReference based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("nok", 0),
          ("ok", 1))
    )


_DabRelativeSfnReference_Type.__name__ = "Integer32"
_DabRelativeSfnReference_Object = MibScalar
dabRelativeSfnReference = _DabRelativeSfnReference_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 3, 4),
    _DabRelativeSfnReference_Type()
)
dabRelativeSfnReference.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dabRelativeSfnReference.setStatus("current")


class _DabAbsoluteSfnReference_Type(Integer32):
    """Custom type dabAbsoluteSfnReference based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("nok", 0),
          ("ok", 1))
    )


_DabAbsoluteSfnReference_Type.__name__ = "Integer32"
_DabAbsoluteSfnReference_Object = MibScalar
dabAbsoluteSfnReference = _DabAbsoluteSfnReference_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 3, 5),
    _DabAbsoluteSfnReference_Type()
)
dabAbsoluteSfnReference.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dabAbsoluteSfnReference.setStatus("current")


class _DabAvailableTimestampType_Type(Integer32):
    """Custom type dabAvailableTimestampType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("relativeAndAbsolute", 1),
          ("relative", 2))
    )


_DabAvailableTimestampType_Type.__name__ = "Integer32"
_DabAvailableTimestampType_Object = MibScalar
dabAvailableTimestampType = _DabAvailableTimestampType_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 3, 7),
    _DabAvailableTimestampType_Type()
)
dabAvailableTimestampType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dabAvailableTimestampType.setStatus("current")
_DabProcessingDelayCfg_Type = FloatingPoint
_DabProcessingDelayCfg_Object = MibScalar
dabProcessingDelayCfg = _DabProcessingDelayCfg_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 3, 8),
    _DabProcessingDelayCfg_Type()
)
dabProcessingDelayCfg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dabProcessingDelayCfg.setStatus("current")
if mibBuilder.loadTexts:
    dabProcessingDelayCfg.setUnits("us")


class _DabBufferingTime_Type(Unsigned32):
    """Custom type dabBufferingTime based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_DabBufferingTime_Type.__name__ = "Unsigned32"
_DabBufferingTime_Object = MibScalar
dabBufferingTime = _DabBufferingTime_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 3, 9),
    _DabBufferingTime_Type()
)
dabBufferingTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dabBufferingTime.setStatus("current")
if mibBuilder.loadTexts:
    dabBufferingTime.setUnits("ms")
_DabDynamicCompensationDelay_Type = DisabledEnabled
_DabDynamicCompensationDelay_Object = MibScalar
dabDynamicCompensationDelay = _DabDynamicCompensationDelay_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 3, 10),
    _DabDynamicCompensationDelay_Type()
)
dabDynamicCompensationDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dabDynamicCompensationDelay.setStatus("current")
_DabMaximumBitrateOffset_Type = FloatingPoint
_DabMaximumBitrateOffset_Object = MibScalar
dabMaximumBitrateOffset = _DabMaximumBitrateOffset_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 3, 12),
    _DabMaximumBitrateOffset_Type()
)
dabMaximumBitrateOffset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dabMaximumBitrateOffset.setStatus("current")
if mibBuilder.loadTexts:
    dabMaximumBitrateOffset.setUnits("ppm")
_DabBitrateOffset_Type = FloatingPoint
_DabBitrateOffset_Object = MibScalar
dabBitrateOffset = _DabBitrateOffset_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 3, 13),
    _DabBitrateOffset_Type()
)
dabBitrateOffset.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dabBitrateOffset.setStatus("current")
if mibBuilder.loadTexts:
    dabBitrateOffset.setUnits("ppm")


class _DabTimestampLevel_Type(Integer32):
    """Custom type dabTimestampLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("one", 1),
          ("two", 2),
          ("three", 3),
          ("four", 4),
          ("five", 5))
    )


_DabTimestampLevel_Type.__name__ = "Integer32"
_DabTimestampLevel_Object = MibScalar
dabTimestampLevel = _DabTimestampLevel_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 3, 15),
    _DabTimestampLevel_Type()
)
dabTimestampLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dabTimestampLevel.setStatus("current")


class _DabTistFct_Type(Unsigned32):
    """Custom type dabTistFct based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16383999),
    )


_DabTistFct_Type.__name__ = "Unsigned32"
_DabTistFct_Object = MibScalar
dabTistFct = _DabTistFct_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 3, 17),
    _DabTistFct_Type()
)
dabTistFct.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dabTistFct.setStatus("current")
if mibBuilder.loadTexts:
    dabTistFct.setUnits("ns")


class _DabFct0AsReference_Type(Integer32):
    """Custom type dabFct0AsReference based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_DabFct0AsReference_Type.__name__ = "Integer32"
_DabFct0AsReference_Object = MibScalar
dabFct0AsReference = _DabFct0AsReference_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 3, 18),
    _DabFct0AsReference_Type()
)
dabFct0AsReference.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dabFct0AsReference.setStatus("current")
_DabLocalDelay_Type = FloatingPoint
_DabLocalDelay_Object = MibScalar
dabLocalDelay = _DabLocalDelay_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 3, 20),
    _DabLocalDelay_Type()
)
dabLocalDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dabLocalDelay.setStatus("current")
if mibBuilder.loadTexts:
    dabLocalDelay.setUnits("us")
_DabOffsetDelayAutoconfigure_Type = DisabledEnabled
_DabOffsetDelayAutoconfigure_Object = MibScalar
dabOffsetDelayAutoconfigure = _DabOffsetDelayAutoconfigure_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 3, 25),
    _DabOffsetDelayAutoconfigure_Type()
)
dabOffsetDelayAutoconfigure.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dabOffsetDelayAutoconfigure.setStatus("current")
_DabTiiCode_ObjectIdentity = ObjectIdentity
dabTiiCode = _DabTiiCode_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 3, 30)
)


class _DabTiiCodeConfiguration_Type(Integer32):
    """Custom type dabTiiCodeConfiguration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("manual", 1),
          ("auto", 2))
    )


_DabTiiCodeConfiguration_Type.__name__ = "Integer32"
_DabTiiCodeConfiguration_Object = MibScalar
dabTiiCodeConfiguration = _DabTiiCodeConfiguration_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 3, 30, 1),
    _DabTiiCodeConfiguration_Type()
)
dabTiiCodeConfiguration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dabTiiCodeConfiguration.setStatus("current")


class _DabMainId_Type(Unsigned32):
    """Custom type dabMainId based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 69),
    )


_DabMainId_Type.__name__ = "Unsigned32"
_DabMainId_Object = MibScalar
dabMainId = _DabMainId_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 3, 30, 5),
    _DabMainId_Type()
)
dabMainId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dabMainId.setStatus("current")


class _DabSubId_Type(Unsigned32):
    """Custom type dabSubId based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 23),
    )


_DabSubId_Type.__name__ = "Unsigned32"
_DabSubId_Object = MibScalar
dabSubId = _DabSubId_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 3, 30, 10),
    _DabSubId_Type()
)
dabSubId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dabSubId.setStatus("current")
_DabMnsc_ObjectIdentity = ObjectIdentity
dabMnsc = _DabMnsc_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 3, 35)
)
_DabTimeInformationGroup_ObjectIdentity = ObjectIdentity
dabTimeInformationGroup = _DabTimeInformationGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 3, 35, 1)
)
_DabReceivedInformationTime_Type = NoYes
_DabReceivedInformationTime_Object = MibScalar
dabReceivedInformationTime = _DabReceivedInformationTime_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 3, 35, 1, 1),
    _DabReceivedInformationTime_Type()
)
dabReceivedInformationTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dabReceivedInformationTime.setStatus("current")
_DabDateAndTime_Type = OctetString
_DabDateAndTime_Object = MibScalar
dabDateAndTime = _DabDateAndTime_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 3, 35, 1, 5),
    _DabDateAndTime_Type()
)
dabDateAndTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dabDateAndTime.setStatus("current")
_DabTimeAccurary_Type = NoYes
_DabTimeAccurary_Object = MibScalar
dabTimeAccurary = _DabTimeAccurary_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 3, 35, 1, 10),
    _DabTimeAccurary_Type()
)
dabTimeAccurary.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dabTimeAccurary.setStatus("current")
_DabSynchronizationToFrame_Type = NoYes
_DabSynchronizationToFrame_Object = MibScalar
dabSynchronizationToFrame = _DabSynchronizationToFrame_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 3, 35, 1, 15),
    _DabSynchronizationToFrame_Type()
)
dabSynchronizationToFrame.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dabSynchronizationToFrame.setStatus("current")
_DabTsc_ObjectIdentity = ObjectIdentity
dabTsc = _DabTsc_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 3, 35, 5)
)
_DabReceivedTSC_Type = NoYes
_DabReceivedTSC_Object = MibScalar
dabReceivedTSC = _DabReceivedTSC_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 3, 35, 5, 1),
    _DabReceivedTSC_Type()
)
dabReceivedTSC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dabReceivedTSC.setStatus("current")
_DabSavedTSC_Type = NoYes
_DabSavedTSC_Object = MibScalar
dabSavedTSC = _DabSavedTSC_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 3, 35, 5, 5),
    _DabSavedTSC_Type()
)
dabSavedTSC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dabSavedTSC.setStatus("current")
_DabOffsetDelayTSC_Type = Unsigned32
_DabOffsetDelayTSC_Object = MibScalar
dabOffsetDelayTSC = _DabOffsetDelayTSC_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 3, 35, 5, 10),
    _DabOffsetDelayTSC_Type()
)
dabOffsetDelayTSC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dabOffsetDelayTSC.setStatus("current")
_DabMainIdTSC_Type = Unsigned32
_DabMainIdTSC_Object = MibScalar
dabMainIdTSC = _DabMainIdTSC_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 3, 35, 5, 15),
    _DabMainIdTSC_Type()
)
dabMainIdTSC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dabMainIdTSC.setStatus("current")
_DabSubIdTSC_Type = Unsigned32
_DabSubIdTSC_Object = MibScalar
dabSubIdTSC = _DabSubIdTSC_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 3, 35, 5, 20),
    _DabSubIdTSC_Type()
)
dabSubIdTSC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dabSubIdTSC.setStatus("current")
_DabControlFlagsTSC_Type = Unsigned32
_DabControlFlagsTSC_Object = MibScalar
dabControlFlagsTSC = _DabControlFlagsTSC_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 3, 35, 5, 25),
    _DabControlFlagsTSC_Type()
)
dabControlFlagsTSC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dabControlFlagsTSC.setStatus("current")
_DabTimmingInformation_ObjectIdentity = ObjectIdentity
dabTimmingInformation = _DabTimmingInformation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 3, 45)
)
_DabProcessingDelay_Type = FloatingPoint
_DabProcessingDelay_Object = MibScalar
dabProcessingDelay = _DabProcessingDelay_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 3, 45, 1),
    _DabProcessingDelay_Type()
)
dabProcessingDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dabProcessingDelay.setStatus("current")
if mibBuilder.loadTexts:
    dabProcessingDelay.setUnits("us")
_DabMinimumProcessingDelay_Type = FloatingPoint
_DabMinimumProcessingDelay_Object = MibScalar
dabMinimumProcessingDelay = _DabMinimumProcessingDelay_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 3, 45, 2),
    _DabMinimumProcessingDelay_Type()
)
dabMinimumProcessingDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dabMinimumProcessingDelay.setStatus("current")
if mibBuilder.loadTexts:
    dabMinimumProcessingDelay.setUnits("us")
_DabCompensationDelay_Type = FloatingPoint
_DabCompensationDelay_Object = MibScalar
dabCompensationDelay = _DabCompensationDelay_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 3, 45, 5),
    _DabCompensationDelay_Type()
)
dabCompensationDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dabCompensationDelay.setStatus("current")
if mibBuilder.loadTexts:
    dabCompensationDelay.setUnits("us")
_DabMargin_Type = FloatingPoint
_DabMargin_Object = MibScalar
dabMargin = _DabMargin_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 3, 45, 7),
    _DabMargin_Type()
)
dabMargin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dabMargin.setStatus("current")
if mibBuilder.loadTexts:
    dabMargin.setUnits("us")
_DabStc_ObjectIdentity = ObjectIdentity
dabStc = _DabStc_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 6)
)
_DabStcNumberOfServices_Type = Unsigned32
_DabStcNumberOfServices_Object = MibScalar
dabStcNumberOfServices = _DabStcNumberOfServices_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 6, 1),
    _DabStcNumberOfServices_Type()
)
dabStcNumberOfServices.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dabStcNumberOfServices.setStatus("current")
_DabStreamCharacterizationTable_Object = MibTable
dabStreamCharacterizationTable = _DabStreamCharacterizationTable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 6, 2)
)
if mibBuilder.loadTexts:
    dabStreamCharacterizationTable.setStatus("current")
_DabStreamCharacterizationEntry_Object = MibTableRow
dabStreamCharacterizationEntry = _DabStreamCharacterizationEntry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 6, 2, 1)
)
dabStreamCharacterizationEntry.setIndexNames(
    (0, "TREDESS-FS-MIB", "dabStcIndex"),
)
if mibBuilder.loadTexts:
    dabStreamCharacterizationEntry.setStatus("current")


class _DabStcIndex_Type(Unsigned32):
    """Custom type dabStcIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 40),
    )


_DabStcIndex_Type.__name__ = "Unsigned32"
_DabStcIndex_Object = MibTableColumn
dabStcIndex = _DabStcIndex_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 6, 2, 1, 1),
    _DabStcIndex_Type()
)
dabStcIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dabStcIndex.setStatus("current")
_DabStcSubChId_Type = Unsigned32
_DabStcSubChId_Object = MibTableColumn
dabStcSubChId = _DabStcSubChId_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 6, 2, 1, 2),
    _DabStcSubChId_Type()
)
dabStcSubChId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dabStcSubChId.setStatus("current")
_DabStcSubChSa_Type = Unsigned32
_DabStcSubChSa_Object = MibTableColumn
dabStcSubChSa = _DabStcSubChSa_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 6, 2, 1, 3),
    _DabStcSubChSa_Type()
)
dabStcSubChSa.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dabStcSubChSa.setStatus("current")
_DabStcTpl_Type = OctetString
_DabStcTpl_Object = MibTableColumn
dabStcTpl = _DabStcTpl_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 6, 2, 1, 4),
    _DabStcTpl_Type()
)
dabStcTpl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dabStcTpl.setStatus("current")
_DabStcBitrate_Type = FloatingPoint
_DabStcBitrate_Object = MibTableColumn
dabStcBitrate = _DabStcBitrate_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 17, 6, 2, 1, 5),
    _DabStcBitrate_Type()
)
dabStcBitrate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dabStcBitrate.setStatus("current")
if mibBuilder.loadTexts:
    dabStcBitrate.setUnits("Kbps")
_ModPrecorrector_ObjectIdentity = ObjectIdentity
modPrecorrector = _ModPrecorrector_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 20)
)
_ModLinearPrecorrection_ObjectIdentity = ObjectIdentity
modLinearPrecorrection = _ModLinearPrecorrection_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 20, 1)
)


class _ModLinearPrecorrectionEnable_Type(Integer32):
    """Custom type modLinearPrecorrectionEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_ModLinearPrecorrectionEnable_Type.__name__ = "Integer32"
_ModLinearPrecorrectionEnable_Object = MibScalar
modLinearPrecorrectionEnable = _ModLinearPrecorrectionEnable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 20, 1, 1),
    _ModLinearPrecorrectionEnable_Type()
)
modLinearPrecorrectionEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    modLinearPrecorrectionEnable.setStatus("current")
_ModNonLinearPrecorrection_ObjectIdentity = ObjectIdentity
modNonLinearPrecorrection = _ModNonLinearPrecorrection_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 20, 2)
)


class _ModNonLinearPrecorrectionEnable_Type(Integer32):
    """Custom type modNonLinearPrecorrectionEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("adaptative", 1),
          ("static", 2))
    )


_ModNonLinearPrecorrectionEnable_Type.__name__ = "Integer32"
_ModNonLinearPrecorrectionEnable_Object = MibScalar
modNonLinearPrecorrectionEnable = _ModNonLinearPrecorrectionEnable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 20, 2, 1),
    _ModNonLinearPrecorrectionEnable_Type()
)
modNonLinearPrecorrectionEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    modNonLinearPrecorrectionEnable.setStatus("current")
_ModNonLinearStoredPrecorrection_Type = DisplayString
_ModNonLinearStoredPrecorrection_Object = MibScalar
modNonLinearStoredPrecorrection = _ModNonLinearStoredPrecorrection_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 20, 2, 3),
    _ModNonLinearStoredPrecorrection_Type()
)
modNonLinearStoredPrecorrection.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    modNonLinearStoredPrecorrection.setStatus("current")


class _ModNonLinearPrecorrectorFeedback_Type(Integer32):
    """Custom type modNonLinearPrecorrectorFeedback based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notDetected", 0),
          ("detected", 1),
          ("outOfRange", 2))
    )


_ModNonLinearPrecorrectorFeedback_Type.__name__ = "Integer32"
_ModNonLinearPrecorrectorFeedback_Object = MibScalar
modNonLinearPrecorrectorFeedback = _ModNonLinearPrecorrectorFeedback_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 20, 2, 5),
    _ModNonLinearPrecorrectorFeedback_Type()
)
modNonLinearPrecorrectorFeedback.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    modNonLinearPrecorrectorFeedback.setStatus("current")
_ModPrecorrectorLevels_ObjectIdentity = ObjectIdentity
modPrecorrectorLevels = _ModPrecorrectorLevels_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 20, 5)
)
_ModPrecorrectorInput_Type = DisplayString
_ModPrecorrectorInput_Object = MibScalar
modPrecorrectorInput = _ModPrecorrectorInput_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 20, 5, 1),
    _ModPrecorrectorInput_Type()
)
modPrecorrectorInput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    modPrecorrectorInput.setStatus("current")
if mibBuilder.loadTexts:
    modPrecorrectorInput.setUnits("dBFS")


class _ModPrecorrectorStatus_Type(Integer32):
    """Custom type modPrecorrectorStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("unlocked", 0),
          ("locked", 1))
    )


_ModPrecorrectorStatus_Type.__name__ = "Integer32"
_ModPrecorrectorStatus_Object = MibScalar
modPrecorrectorStatus = _ModPrecorrectorStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 20, 5, 2),
    _ModPrecorrectorStatus_Type()
)
modPrecorrectorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    modPrecorrectorStatus.setStatus("current")
_ModPrecorrectorFeedback_Type = DisplayString
_ModPrecorrectorFeedback_Object = MibScalar
modPrecorrectorFeedback = _ModPrecorrectorFeedback_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 20, 5, 3),
    _ModPrecorrectorFeedback_Type()
)
modPrecorrectorFeedback.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    modPrecorrectorFeedback.setStatus("current")
if mibBuilder.loadTexts:
    modPrecorrectorFeedback.setUnits("dBFS")
_ModPrecorrectorOutput_Type = DisplayString
_ModPrecorrectorOutput_Object = MibScalar
modPrecorrectorOutput = _ModPrecorrectorOutput_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 20, 5, 4),
    _ModPrecorrectorOutput_Type()
)
modPrecorrectorOutput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    modPrecorrectorOutput.setStatus("current")
if mibBuilder.loadTexts:
    modPrecorrectorOutput.setUnits("dBFS")
_ModSpectrumMeasures_ObjectIdentity = ObjectIdentity
modSpectrumMeasures = _ModSpectrumMeasures_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 20, 6)
)


class _ModShoulderAlarm_Type(Unsigned32):
    """Custom type modShoulderAlarm based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(30, 60),
    )


_ModShoulderAlarm_Type.__name__ = "Unsigned32"
_ModShoulderAlarm_Object = MibScalar
modShoulderAlarm = _ModShoulderAlarm_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 20, 6, 1),
    _ModShoulderAlarm_Type()
)
modShoulderAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    modShoulderAlarm.setStatus("current")
if mibBuilder.loadTexts:
    modShoulderAlarm.setUnits("dB")
_ModLowerShoulder_Type = DisplayString
_ModLowerShoulder_Object = MibScalar
modLowerShoulder = _ModLowerShoulder_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 20, 6, 2),
    _ModLowerShoulder_Type()
)
modLowerShoulder.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    modLowerShoulder.setStatus("current")
if mibBuilder.loadTexts:
    modLowerShoulder.setUnits("dB")
_ModUpperShoulder_Type = DisplayString
_ModUpperShoulder_Object = MibScalar
modUpperShoulder = _ModUpperShoulder_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 20, 6, 3),
    _ModUpperShoulder_Type()
)
modUpperShoulder.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    modUpperShoulder.setStatus("current")
if mibBuilder.loadTexts:
    modUpperShoulder.setUnits("dB")
_ModInBandLevelVariation_Type = DisplayString
_ModInBandLevelVariation_Object = MibScalar
modInBandLevelVariation = _ModInBandLevelVariation_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 20, 6, 4),
    _ModInBandLevelVariation_Type()
)
modInBandLevelVariation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    modInBandLevelVariation.setStatus("current")
if mibBuilder.loadTexts:
    modInBandLevelVariation.setUnits("dB")


class _ModThresholdMer_Type(Unsigned32):
    """Custom type modThresholdMer based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(20, 50),
    )


_ModThresholdMer_Type.__name__ = "Unsigned32"
_ModThresholdMer_Object = MibScalar
modThresholdMer = _ModThresholdMer_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 20, 6, 5),
    _ModThresholdMer_Type()
)
modThresholdMer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    modThresholdMer.setStatus("current")
if mibBuilder.loadTexts:
    modThresholdMer.setUnits("dB")
_ModMer_Type = DisplayString
_ModMer_Object = MibScalar
modMer = _ModMer_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 20, 6, 6),
    _ModMer_Type()
)
modMer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    modMer.setStatus("current")
if mibBuilder.loadTexts:
    modMer.setUnits("dB")
_ModMerFlt_Type = FloatingPoint
_ModMerFlt_Object = MibScalar
modMerFlt = _ModMerFlt_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 20, 6, 7),
    _ModMerFlt_Type()
)
modMerFlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    modMerFlt.setStatus("current")
if mibBuilder.loadTexts:
    modMerFlt.setUnits("dB")
_ModBerFlt_Type = FloatingPoint
_ModBerFlt_Object = MibScalar
modBerFlt = _ModBerFlt_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 10, 20, 6, 15),
    _ModBerFlt_Type()
)
modBerFlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    modBerFlt.setStatus("current")
_RfOutput_ObjectIdentity = ObjectIdentity
rfOutput = _RfOutput_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 15)
)


class _OutputFrequencyMode_Type(Integer32):
    """Custom type outputFrequencyMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("channel", 0),
          ("centralFrequency", 1))
    )


_OutputFrequencyMode_Type.__name__ = "Integer32"
_OutputFrequencyMode_Object = MibScalar
outputFrequencyMode = _OutputFrequencyMode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 15, 1),
    _OutputFrequencyMode_Type()
)
outputFrequencyMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    outputFrequencyMode.setStatus("current")
_OutputFrequency_Type = DisplayString
_OutputFrequency_Object = MibScalar
outputFrequency = _OutputFrequency_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 15, 2),
    _OutputFrequency_Type()
)
outputFrequency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    outputFrequency.setStatus("current")
if mibBuilder.loadTexts:
    outputFrequency.setUnits("Hz")
_OutputFrequencyFlt_Type = FloatingPoint
_OutputFrequencyFlt_Object = MibScalar
outputFrequencyFlt = _OutputFrequencyFlt_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 15, 3),
    _OutputFrequencyFlt_Type()
)
outputFrequencyFlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    outputFrequencyFlt.setStatus("current")
if mibBuilder.loadTexts:
    outputFrequencyFlt.setUnits("Hz")
_OutputChannelMode_ObjectIdentity = ObjectIdentity
outputChannelMode = _OutputChannelMode_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 15, 10)
)


class _OutputChannel_Type(Unsigned32):
    """Custom type outputChannel based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(14, 78),
    )


_OutputChannel_Type.__name__ = "Unsigned32"
_OutputChannel_Object = MibScalar
outputChannel = _OutputChannel_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 15, 10, 1),
    _OutputChannel_Type()
)
outputChannel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    outputChannel.setStatus("current")


class _OutputChannelOffset_Type(Integer32):
    """Custom type outputChannelOffset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-4, 4),
    )


_OutputChannelOffset_Type.__name__ = "Integer32"
_OutputChannelOffset_Object = MibScalar
outputChannelOffset = _OutputChannelOffset_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 15, 10, 2),
    _OutputChannelOffset_Type()
)
outputChannelOffset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    outputChannelOffset.setStatus("current")


class _OuputChannelResolution_Type(Integer32):
    """Custom type ouputChannelResolution based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("resolution1div6", 0),
          ("resolution1div7", 1),
          ("resolution1div8", 2))
    )


_OuputChannelResolution_Type.__name__ = "Integer32"
_OuputChannelResolution_Object = MibScalar
ouputChannelResolution = _OuputChannelResolution_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 15, 10, 3),
    _OuputChannelResolution_Type()
)
ouputChannelResolution.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ouputChannelResolution.setStatus("current")
if mibBuilder.loadTexts:
    ouputChannelResolution.setUnits("MHz")
_DabOutputChannel_Type = DabOutputChannelType
_DabOutputChannel_Object = MibScalar
dabOutputChannel = _DabOutputChannel_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 15, 10, 4),
    _DabOutputChannel_Type()
)
dabOutputChannel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dabOutputChannel.setStatus("current")
_OutputCentralFrequencyMode_ObjectIdentity = ObjectIdentity
outputCentralFrequencyMode = _OutputCentralFrequencyMode_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 15, 15)
)


class _OutputCentralFrequency_Type(Unsigned32):
    """Custom type outputCentralFrequency based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(173000000, 862000000),
    )


_OutputCentralFrequency_Type.__name__ = "Unsigned32"
_OutputCentralFrequency_Object = MibScalar
outputCentralFrequency = _OutputCentralFrequency_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 15, 15, 1),
    _OutputCentralFrequency_Type()
)
outputCentralFrequency.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    outputCentralFrequency.setStatus("current")
if mibBuilder.loadTexts:
    outputCentralFrequency.setUnits("Hz")


class _OutputCentralFrequencyMHz_Type(Unsigned32):
    """Custom type outputCentralFrequencyMHz based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(173, 862),
    )


_OutputCentralFrequencyMHz_Type.__name__ = "Unsigned32"
_OutputCentralFrequencyMHz_Object = MibScalar
outputCentralFrequencyMHz = _OutputCentralFrequencyMHz_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 15, 15, 2),
    _OutputCentralFrequencyMHz_Type()
)
outputCentralFrequencyMHz.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    outputCentralFrequencyMHz.setStatus("current")
if mibBuilder.loadTexts:
    outputCentralFrequencyMHz.setUnits("MHz")
_Mutes_ObjectIdentity = ObjectIdentity
mutes = _Mutes_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 15, 20)
)


class _MuteOutputStatus_Type(Integer32):
    """Custom type muteOutputStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notMuted", 0),
          ("muted", 1),
          ("mutedSelfProtection", 2),
          ("stageMuted", 3))
    )


_MuteOutputStatus_Type.__name__ = "Integer32"
_MuteOutputStatus_Object = MibScalar
muteOutputStatus = _MuteOutputStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 15, 20, 1),
    _MuteOutputStatus_Type()
)
muteOutputStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muteOutputStatus.setStatus("current")


class _MuteCauses_Type(OctetString):
    """Custom type muteCauses based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(256, 256),
    )
    fixed_length = 256


_MuteCauses_Type.__name__ = "OctetString"
_MuteCauses_Object = MibScalar
muteCauses = _MuteCauses_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 15, 20, 2),
    _MuteCauses_Type()
)
muteCauses.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muteCauses.setStatus("current")
_MutesRf_Type = DisabledEnabled
_MutesRf_Object = MibScalar
mutesRf = _MutesRf_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 15, 20, 3),
    _MutesRf_Type()
)
mutesRf.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mutesRf.setStatus("current")
_MuteTsError_Type = DisabledEnabled
_MuteTsError_Object = MibScalar
muteTsError = _MuteTsError_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 15, 20, 4),
    _MuteTsError_Type()
)
muteTsError.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    muteTsError.setStatus("current")
_MuteMpegOverflow_Type = DisabledEnabled
_MuteMpegOverflow_Object = MibScalar
muteMpegOverflow = _MuteMpegOverflow_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 15, 20, 5),
    _MuteMpegOverflow_Type()
)
muteMpegOverflow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    muteMpegOverflow.setStatus("current")
_MuteT2miError_Type = DisabledEnabled
_MuteT2miError_Object = MibScalar
muteT2miError = _MuteT2miError_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 15, 20, 6),
    _MuteT2miError_Type()
)
muteT2miError.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    muteT2miError.setStatus("current")
_MuteBtsError_Type = DisabledEnabled
_MuteBtsError_Object = MibScalar
muteBtsError = _MuteBtsError_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 15, 20, 7),
    _MuteBtsError_Type()
)
muteBtsError.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    muteBtsError.setStatus("current")
_MuteSfnReference_Type = DisabledEnabled
_MuteSfnReference_Object = MibScalar
muteSfnReference = _MuteSfnReference_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 15, 20, 8),
    _MuteSfnReference_Type()
)
muteSfnReference.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    muteSfnReference.setStatus("current")
_MuteSfnMargin_Type = DisabledEnabled
_MuteSfnMargin_Object = MibScalar
muteSfnMargin = _MuteSfnMargin_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 15, 20, 9),
    _MuteSfnMargin_Type()
)
muteSfnMargin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    muteSfnMargin.setStatus("current")
_Mute10MHz_Type = DisabledEnabled
_Mute10MHz_Object = MibScalar
mute10MHz = _Mute10MHz_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 15, 20, 10),
    _Mute10MHz_Type()
)
mute10MHz.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mute10MHz.setStatus("current")
_MuteGainMargin_Type = DisabledEnabled
_MuteGainMargin_Object = MibScalar
muteGainMargin = _MuteGainMargin_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 15, 20, 11),
    _MuteGainMargin_Type()
)
muteGainMargin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    muteGainMargin.setStatus("current")
_MuteErrorMip_Type = DisabledEnabled
_MuteErrorMip_Object = MibScalar
muteErrorMip = _MuteErrorMip_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 15, 20, 12),
    _MuteErrorMip_Type()
)
muteErrorMip.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    muteErrorMip.setStatus("current")


class _TsErrorMuteHysteresis_Type(Unsigned32):
    """Custom type tsErrorMuteHysteresis based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99),
    )


_TsErrorMuteHysteresis_Type.__name__ = "Unsigned32"
_TsErrorMuteHysteresis_Object = MibScalar
tsErrorMuteHysteresis = _TsErrorMuteHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 15, 20, 45),
    _TsErrorMuteHysteresis_Type()
)
tsErrorMuteHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tsErrorMuteHysteresis.setStatus("current")


class _MuteCausesBinary_Type(Bits):
    """Custom type muteCausesBinary based on Bits"""
    namedValues = NamedValues(
        *(("absence10mhz", 0),
          ("btsError", 1),
          ("sfnMargin", 2),
          ("sfnReference", 3),
          ("t2miError", 4),
          ("inputOverflow", 5),
          ("tsError", 6),
          ("rfOff", 7),
          ("rfInput", 8),
          ("redundancyInitialization", 9),
          ("elevatedPower", 10),
          ("redundancySwitching", 11),
          ("redundancyLoad", 12),
          ("redundancyAntenna", 13),
          ("reversePower", 14),
          ("temperature", 15),
          ("muteCausesBin16", 16),
          ("muteCausesBin17", 17),
          ("muteCausesBin18", 18),
          ("interlock2", 19),
          ("interlock1", 20),
          ("interlock", 21),
          ("rfLoop", 22),
          ("hwErrorPd", 23),
          ("muteCausesBin24", 24),
          ("muteCausesBin25", 25),
          ("muteCausesBin26", 26),
          ("muteCausesBin27", 27),
          ("muteCausesBin28", 28),
          ("muteCausesBin29", 29),
          ("mipError", 30),
          ("gainMargin", 31))
    )

_MuteCausesBinary_Type.__name__ = "Bits"
_MuteCausesBinary_Object = MibScalar
muteCausesBinary = _MuteCausesBinary_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 2, 15, 20, 50),
    _MuteCausesBinary_Type()
)
muteCausesBinary.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muteCausesBinary.setStatus("current")
_Reference_ObjectIdentity = ObjectIdentity
reference = _Reference_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3)
)
_ReferenceSource_ObjectIdentity = ObjectIdentity
referenceSource = _ReferenceSource_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 1)
)


class _ReferenceSourceStatus_Type(Integer32):
    """Custom type referenceSourceStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("referenceInternalHwNotDetect", 0),
          ("referenceGnss", 1),
          ("referenceExternalOcxo", 2),
          ("referenceExternal", 3),
          ("referenceInternal", 4),
          ("referenceInternalOcxo", 5))
    )


_ReferenceSourceStatus_Type.__name__ = "Integer32"
_ReferenceSourceStatus_Object = MibScalar
referenceSourceStatus = _ReferenceSourceStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 1, 1),
    _ReferenceSourceStatus_Type()
)
referenceSourceStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    referenceSourceStatus.setStatus("current")


class _ReferenceSwitchMode_Type(Integer32):
    """Custom type referenceSwitchMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("referenceSwitchAuto", 0),
          ("referenceSwitchGnss", 1),
          ("referenceSwitchExternalOcxo", 2),
          ("referenceSwitchExternal", 3),
          ("referenceSwitchInternal", 4),
          ("referenceSwitchInternalOcxo", 5))
    )


_ReferenceSwitchMode_Type.__name__ = "Integer32"
_ReferenceSwitchMode_Object = MibScalar
referenceSwitchMode = _ReferenceSwitchMode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 1, 2),
    _ReferenceSwitchMode_Type()
)
referenceSwitchMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    referenceSwitchMode.setStatus("current")


class _SynchronizationReady_Type(Integer32):
    """Custom type synchronizationReady based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("locked", 0),
          ("lockedHoldover", 1))
    )


_SynchronizationReady_Type.__name__ = "Integer32"
_SynchronizationReady_Object = MibScalar
synchronizationReady = _SynchronizationReady_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 1, 3),
    _SynchronizationReady_Type()
)
synchronizationReady.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    synchronizationReady.setStatus("current")


class _ExternalReferenceOutputs_Type(Integer32):
    """Custom type externalReferenceOutputs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("auto", 0),
          ("disabled", 1),
          ("enabled", 2))
    )


_ExternalReferenceOutputs_Type.__name__ = "Integer32"
_ExternalReferenceOutputs_Object = MibScalar
externalReferenceOutputs = _ExternalReferenceOutputs_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 1, 4),
    _ExternalReferenceOutputs_Type()
)
externalReferenceOutputs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    externalReferenceOutputs.setStatus("current")


class _Selected10Mhz_Type(Integer32):
    """Custom type selected10Mhz based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("available", 1),
          ("notAvailable", 2))
    )


_Selected10Mhz_Type.__name__ = "Integer32"
_Selected10Mhz_Object = MibScalar
selected10Mhz = _Selected10Mhz_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 1, 5),
    _Selected10Mhz_Type()
)
selected10Mhz.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    selected10Mhz.setStatus("current")


class _Selected1Pps_Type(Integer32):
    """Custom type selected1Pps based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("available", 1),
          ("notAvailable", 2))
    )


_Selected1Pps_Type.__name__ = "Integer32"
_Selected1Pps_Object = MibScalar
selected1Pps = _Selected1Pps_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 1, 6),
    _Selected1Pps_Type()
)
selected1Pps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    selected1Pps.setStatus("current")
_Synchronization_ObjectIdentity = ObjectIdentity
synchronization = _Synchronization_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 2)
)
_ReceiverType_Type = DisplayString
_ReceiverType_Object = MibScalar
receiverType = _ReceiverType_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 2, 2),
    _ReceiverType_Type()
)
receiverType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    receiverType.setStatus("current")
_ReceiverSerial_Type = DisplayString
_ReceiverSerial_Object = MibScalar
receiverSerial = _ReceiverSerial_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 2, 3),
    _ReceiverSerial_Type()
)
receiverSerial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    receiverSerial.setStatus("current")


class _SynchronizationStatus_Type(Integer32):
    """Custom type synchronizationStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("notConnected", 0),
          ("detected", 1),
          ("connected", 2),
          ("notConfigured", 3),
          ("unlocked", 4),
          ("locked", 5),
          ("holdover", 6),
          ("postHoldover", 7),
          ("damaged", 8),
          ("notDetected", 9),
          ("sfnNok", 10),
          ("disabled", 11),
          ("communicationError", 12),
          ("versionError", 13),
          ("hwInstallError", 14))
    )


_SynchronizationStatus_Type.__name__ = "Integer32"
_SynchronizationStatus_Object = MibScalar
synchronizationStatus = _SynchronizationStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 2, 4),
    _SynchronizationStatus_Type()
)
synchronizationStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    synchronizationStatus.setStatus("current")


class _SatellitesAntenna_Type(Integer32):
    """Custom type satellitesAntenna based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("notDetected", 0),
          ("detected", 1))
    )


_SatellitesAntenna_Type.__name__ = "Integer32"
_SatellitesAntenna_Object = MibScalar
satellitesAntenna = _SatellitesAntenna_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 2, 5),
    _SatellitesAntenna_Type()
)
satellitesAntenna.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    satellitesAntenna.setStatus("current")


class _Input1pps_Type(Integer32):
    """Custom type input1pps based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("notDetected", 0),
          ("detected", 1))
    )


_Input1pps_Type.__name__ = "Integer32"
_Input1pps_Object = MibScalar
input1pps = _Input1pps_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 2, 6),
    _Input1pps_Type()
)
input1pps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    input1pps.setStatus("current")
_SynchronizationTemperature_Type = DisplayString
_SynchronizationTemperature_Object = MibScalar
synchronizationTemperature = _SynchronizationTemperature_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 2, 7),
    _SynchronizationTemperature_Type()
)
synchronizationTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    synchronizationTemperature.setStatus("current")
_SynchronizationHoldover_Type = DisplayString
_SynchronizationHoldover_Object = MibScalar
synchronizationHoldover = _SynchronizationHoldover_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 2, 8),
    _SynchronizationHoldover_Type()
)
synchronizationHoldover.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    synchronizationHoldover.setStatus("current")


class _SynchronizationHoldoverThreshold_Type(Unsigned32):
    """Custom type synchronizationHoldoverThreshold based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_SynchronizationHoldoverThreshold_Type.__name__ = "Unsigned32"
_SynchronizationHoldoverThreshold_Object = MibScalar
synchronizationHoldoverThreshold = _SynchronizationHoldoverThreshold_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 2, 9),
    _SynchronizationHoldoverThreshold_Type()
)
synchronizationHoldoverThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    synchronizationHoldoverThreshold.setStatus("current")
if mibBuilder.loadTexts:
    synchronizationHoldoverThreshold.setUnits("h")
_EndlessHoldoverThresholdEnable_Type = DisabledEnabled
_EndlessHoldoverThresholdEnable_Object = MibScalar
endlessHoldoverThresholdEnable = _EndlessHoldoverThresholdEnable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 2, 10),
    _EndlessHoldoverThresholdEnable_Type()
)
endlessHoldoverThresholdEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    endlessHoldoverThresholdEnable.setStatus("current")


class _Input10Mhz_Type(Integer32):
    """Custom type input10Mhz based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("notDetected", 0),
          ("detected", 1))
    )


_Input10Mhz_Type.__name__ = "Integer32"
_Input10Mhz_Object = MibScalar
input10Mhz = _Input10Mhz_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 2, 11),
    _Input10Mhz_Type()
)
input10Mhz.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    input10Mhz.setStatus("current")


class _AntennaStatus_Type(Integer32):
    """Custom type antennaStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notPowered", 0),
          ("powered", 1),
          ("shortCircuit", 2))
    )


_AntennaStatus_Type.__name__ = "Integer32"
_AntennaStatus_Object = MibScalar
antennaStatus = _AntennaStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 2, 12),
    _AntennaStatus_Type()
)
antennaStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    antennaStatus.setStatus("current")


class _PpsStatus_Type(Integer32):
    """Custom type ppsStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("available", 0),
          ("notAvailable", 1))
    )


_PpsStatus_Type.__name__ = "Integer32"
_PpsStatus_Object = MibScalar
ppsStatus = _PpsStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 2, 13),
    _PpsStatus_Type()
)
ppsStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ppsStatus.setStatus("current")
_Latitude_Type = DisplayString
_Latitude_Object = MibScalar
latitude = _Latitude_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 2, 20),
    _Latitude_Type()
)
latitude.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    latitude.setStatus("current")
_Longitude_Type = DisplayString
_Longitude_Object = MibScalar
longitude = _Longitude_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 2, 21),
    _Longitude_Type()
)
longitude.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    longitude.setStatus("current")
_Altitude_Type = DisplayString
_Altitude_Object = MibScalar
altitude = _Altitude_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 2, 22),
    _Altitude_Type()
)
altitude.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    altitude.setStatus("current")
_SynchronizationDate_Type = DisplayString
_SynchronizationDate_Object = MibScalar
synchronizationDate = _SynchronizationDate_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 2, 23),
    _SynchronizationDate_Type()
)
synchronizationDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    synchronizationDate.setStatus("current")
_Satellite01_Type = DisplayString
_Satellite01_Object = MibScalar
satellite01 = _Satellite01_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 2, 30),
    _Satellite01_Type()
)
satellite01.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    satellite01.setStatus("obsolete")
_Satellite02_Type = DisplayString
_Satellite02_Object = MibScalar
satellite02 = _Satellite02_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 2, 31),
    _Satellite02_Type()
)
satellite02.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    satellite02.setStatus("obsolete")
_Satellite03_Type = DisplayString
_Satellite03_Object = MibScalar
satellite03 = _Satellite03_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 2, 32),
    _Satellite03_Type()
)
satellite03.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    satellite03.setStatus("obsolete")
_Satellite04_Type = DisplayString
_Satellite04_Object = MibScalar
satellite04 = _Satellite04_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 2, 33),
    _Satellite04_Type()
)
satellite04.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    satellite04.setStatus("obsolete")
_Satellite05_Type = DisplayString
_Satellite05_Object = MibScalar
satellite05 = _Satellite05_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 2, 34),
    _Satellite05_Type()
)
satellite05.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    satellite05.setStatus("obsolete")
_Satellite06_Type = DisplayString
_Satellite06_Object = MibScalar
satellite06 = _Satellite06_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 2, 35),
    _Satellite06_Type()
)
satellite06.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    satellite06.setStatus("obsolete")
_Satellite07_Type = DisplayString
_Satellite07_Object = MibScalar
satellite07 = _Satellite07_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 2, 36),
    _Satellite07_Type()
)
satellite07.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    satellite07.setStatus("obsolete")
_Satellite08_Type = DisplayString
_Satellite08_Object = MibScalar
satellite08 = _Satellite08_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 2, 37),
    _Satellite08_Type()
)
satellite08.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    satellite08.setStatus("obsolete")
_SatellitesConstellationTable_Object = MibTable
satellitesConstellationTable = _SatellitesConstellationTable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 2, 50)
)
if mibBuilder.loadTexts:
    satellitesConstellationTable.setStatus("current")
_SatellitesConstellationEntry_Object = MibTableRow
satellitesConstellationEntry = _SatellitesConstellationEntry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 2, 50, 1)
)
satellitesConstellationEntry.setIndexNames(
    (0, "TREDESS-FS-MIB", "constellationIndex"),
)
if mibBuilder.loadTexts:
    satellitesConstellationEntry.setStatus("current")


class _ConstellationIndex_Type(Unsigned32):
    """Custom type constellationIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_ConstellationIndex_Type.__name__ = "Unsigned32"
_ConstellationIndex_Object = MibTableColumn
constellationIndex = _ConstellationIndex_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 2, 50, 1, 1),
    _ConstellationIndex_Type()
)
constellationIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    constellationIndex.setStatus("current")
_Satellite01Info_Type = DisplayString
_Satellite01Info_Object = MibTableColumn
satellite01Info = _Satellite01Info_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 2, 50, 1, 2),
    _Satellite01Info_Type()
)
satellite01Info.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    satellite01Info.setStatus("current")
_Satellite02Info_Type = DisplayString
_Satellite02Info_Object = MibTableColumn
satellite02Info = _Satellite02Info_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 2, 50, 1, 3),
    _Satellite02Info_Type()
)
satellite02Info.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    satellite02Info.setStatus("current")
_Satellite03Info_Type = DisplayString
_Satellite03Info_Object = MibTableColumn
satellite03Info = _Satellite03Info_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 2, 50, 1, 4),
    _Satellite03Info_Type()
)
satellite03Info.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    satellite03Info.setStatus("current")
_Satellite04Info_Type = DisplayString
_Satellite04Info_Object = MibTableColumn
satellite04Info = _Satellite04Info_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 2, 50, 1, 5),
    _Satellite04Info_Type()
)
satellite04Info.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    satellite04Info.setStatus("current")
_Satellite05Info_Type = DisplayString
_Satellite05Info_Object = MibTableColumn
satellite05Info = _Satellite05Info_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 2, 50, 1, 6),
    _Satellite05Info_Type()
)
satellite05Info.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    satellite05Info.setStatus("current")
_Satellite06Info_Type = DisplayString
_Satellite06Info_Object = MibTableColumn
satellite06Info = _Satellite06Info_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 2, 50, 1, 7),
    _Satellite06Info_Type()
)
satellite06Info.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    satellite06Info.setStatus("current")
_Satellite07Info_Type = DisplayString
_Satellite07Info_Object = MibTableColumn
satellite07Info = _Satellite07Info_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 2, 50, 1, 8),
    _Satellite07Info_Type()
)
satellite07Info.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    satellite07Info.setStatus("current")
_Satellite08Info_Type = DisplayString
_Satellite08Info_Object = MibTableColumn
satellite08Info = _Satellite08Info_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 3, 2, 50, 1, 9),
    _Satellite08Info_Type()
)
satellite08Info.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    satellite08Info.setStatus("current")
_Amplifier_ObjectIdentity = ObjectIdentity
amplifier = _Amplifier_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 4)
)


class _ConfiguredPower_Type(OctetString):
    """Custom type configuredPower based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 3),
    )


_ConfiguredPower_Type.__name__ = "OctetString"
_ConfiguredPower_Object = MibScalar
configuredPower = _ConfiguredPower_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 4, 1),
    _ConfiguredPower_Type()
)
configuredPower.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    configuredPower.setStatus("current")
if mibBuilder.loadTexts:
    configuredPower.setUnits("W")


class _PowerDisplaOffset_Type(OctetString):
    """Custom type powerDisplaOffset based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 5),
    )


_PowerDisplaOffset_Type.__name__ = "OctetString"
_PowerDisplaOffset_Object = MibScalar
powerDisplaOffset = _PowerDisplaOffset_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 4, 2),
    _PowerDisplaOffset_Type()
)
powerDisplaOffset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    powerDisplaOffset.setStatus("current")
if mibBuilder.loadTexts:
    powerDisplaOffset.setUnits("dB")
_ForwardPower_Type = DisplayString
_ForwardPower_Object = MibScalar
forwardPower = _ForwardPower_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 4, 3),
    _ForwardPower_Type()
)
forwardPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    forwardPower.setStatus("current")
if mibBuilder.loadTexts:
    forwardPower.setUnits("W")
_ReversePower_Type = DisplayString
_ReversePower_Object = MibScalar
reversePower = _ReversePower_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 4, 4),
    _ReversePower_Type()
)
reversePower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    reversePower.setStatus("current")


class _ExceededPowerThreshold_Type(OctetString):
    """Custom type exceededPowerThreshold based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 3),
    )


_ExceededPowerThreshold_Type.__name__ = "OctetString"
_ExceededPowerThreshold_Object = MibScalar
exceededPowerThreshold = _ExceededPowerThreshold_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 4, 5),
    _ExceededPowerThreshold_Type()
)
exceededPowerThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    exceededPowerThreshold.setStatus("current")
if mibBuilder.loadTexts:
    exceededPowerThreshold.setUnits("dB")


class _DecreasedPowerThreshold_Type(OctetString):
    """Custom type decreasedPowerThreshold based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 4),
    )


_DecreasedPowerThreshold_Type.__name__ = "OctetString"
_DecreasedPowerThreshold_Object = MibScalar
decreasedPowerThreshold = _DecreasedPowerThreshold_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 4, 6),
    _DecreasedPowerThreshold_Type()
)
decreasedPowerThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    decreasedPowerThreshold.setStatus("current")
if mibBuilder.loadTexts:
    decreasedPowerThreshold.setUnits("dB")


class _ReverserPowerThreshold_Type(Integer32):
    """Custom type reverserPowerThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-12, -6),
    )


_ReverserPowerThreshold_Type.__name__ = "Integer32"
_ReverserPowerThreshold_Object = MibScalar
reverserPowerThreshold = _ReverserPowerThreshold_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 4, 7),
    _ReverserPowerThreshold_Type()
)
reverserPowerThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    reverserPowerThreshold.setStatus("current")
if mibBuilder.loadTexts:
    reverserPowerThreshold.setUnits("dB")
_AmplifierStageTemperature_Type = DisplayString
_AmplifierStageTemperature_Object = MibScalar
amplifierStageTemperature = _AmplifierStageTemperature_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 4, 8),
    _AmplifierStageTemperature_Type()
)
amplifierStageTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amplifierStageTemperature.setStatus("current")
if mibBuilder.loadTexts:
    amplifierStageTemperature.setUnits("C")


class _LdmosTransistor1Current_Type(OctetString):
    """Custom type ldmosTransistor1Current based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(10, 10),
    )
    fixed_length = 10


_LdmosTransistor1Current_Type.__name__ = "OctetString"
_LdmosTransistor1Current_Object = MibScalar
ldmosTransistor1Current = _LdmosTransistor1Current_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 4, 9),
    _LdmosTransistor1Current_Type()
)
ldmosTransistor1Current.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmosTransistor1Current.setStatus("current")
if mibBuilder.loadTexts:
    ldmosTransistor1Current.setUnits("A")


class _LdmosTransistor2Current_Type(OctetString):
    """Custom type ldmosTransistor2Current based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(10, 10),
    )
    fixed_length = 10


_LdmosTransistor2Current_Type.__name__ = "OctetString"
_LdmosTransistor2Current_Object = MibScalar
ldmosTransistor2Current = _LdmosTransistor2Current_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 4, 10),
    _LdmosTransistor2Current_Type()
)
ldmosTransistor2Current.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmosTransistor2Current.setStatus("current")
if mibBuilder.loadTexts:
    ldmosTransistor2Current.setUnits("A")


class _LdmosTransistor3Current_Type(OctetString):
    """Custom type ldmosTransistor3Current based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(10, 10),
    )
    fixed_length = 10


_LdmosTransistor3Current_Type.__name__ = "OctetString"
_LdmosTransistor3Current_Object = MibScalar
ldmosTransistor3Current = _LdmosTransistor3Current_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 4, 11),
    _LdmosTransistor3Current_Type()
)
ldmosTransistor3Current.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmosTransistor3Current.setStatus("current")
if mibBuilder.loadTexts:
    ldmosTransistor3Current.setUnits("A")


class _LdmosTransistor4Current_Type(OctetString):
    """Custom type ldmosTransistor4Current based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(10, 10),
    )
    fixed_length = 10


_LdmosTransistor4Current_Type.__name__ = "OctetString"
_LdmosTransistor4Current_Object = MibScalar
ldmosTransistor4Current = _LdmosTransistor4Current_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 4, 12),
    _LdmosTransistor4Current_Type()
)
ldmosTransistor4Current.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmosTransistor4Current.setStatus("current")
if mibBuilder.loadTexts:
    ldmosTransistor4Current.setUnits("A")


class _DecreasedPowerThresholdNonCrit_Type(OctetString):
    """Custom type decreasedPowerThresholdNonCrit based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 4),
    )


_DecreasedPowerThresholdNonCrit_Type.__name__ = "OctetString"
_DecreasedPowerThresholdNonCrit_Object = MibScalar
decreasedPowerThresholdNonCrit = _DecreasedPowerThresholdNonCrit_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 4, 15),
    _DecreasedPowerThresholdNonCrit_Type()
)
decreasedPowerThresholdNonCrit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    decreasedPowerThresholdNonCrit.setStatus("current")
if mibBuilder.loadTexts:
    decreasedPowerThresholdNonCrit.setUnits("dB")
_ReversePowerFlt_Type = FloatingPoint
_ReversePowerFlt_Object = MibScalar
reversePowerFlt = _ReversePowerFlt_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 4, 18),
    _ReversePowerFlt_Type()
)
reversePowerFlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    reversePowerFlt.setStatus("current")
if mibBuilder.loadTexts:
    reversePowerFlt.setUnits("W")
_AutomaticPowerCompensation_ObjectIdentity = ObjectIdentity
automaticPowerCompensation = _AutomaticPowerCompensation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 4, 19)
)
_AutomaticPowerCompensationEnable_Type = DisabledEnabled
_AutomaticPowerCompensationEnable_Object = MibScalar
automaticPowerCompensationEnable = _AutomaticPowerCompensationEnable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 4, 19, 3),
    _AutomaticPowerCompensationEnable_Type()
)
automaticPowerCompensationEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    automaticPowerCompensationEnable.setStatus("current")
_CompensationPerStage_Type = FloatingPoint
_CompensationPerStage_Object = MibScalar
compensationPerStage = _CompensationPerStage_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 4, 19, 6),
    _CompensationPerStage_Type()
)
compensationPerStage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    compensationPerStage.setStatus("current")
if mibBuilder.loadTexts:
    compensationPerStage.setUnits("W")
_AmplifierStageTable_Object = MibTable
amplifierStageTable = _AmplifierStageTable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 4, 20)
)
if mibBuilder.loadTexts:
    amplifierStageTable.setStatus("current")
_AmplifierStageEntry_Object = MibTableRow
amplifierStageEntry = _AmplifierStageEntry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 4, 20, 1)
)
amplifierStageEntry.setIndexNames(
    (0, "TREDESS-FS-MIB", "amplifierStageIndex"),
)
if mibBuilder.loadTexts:
    amplifierStageEntry.setStatus("current")


class _AmplifierStageIndex_Type(Unsigned32):
    """Custom type amplifierStageIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_AmplifierStageIndex_Type.__name__ = "Unsigned32"
_AmplifierStageIndex_Object = MibTableColumn
amplifierStageIndex = _AmplifierStageIndex_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 4, 20, 1, 1),
    _AmplifierStageIndex_Type()
)
amplifierStageIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    amplifierStageIndex.setStatus("current")


class _AmStControlStatus_Type(Integer32):
    """Custom type amStControlStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("error", 0),
          ("ok", 1),
          ("errorSwVersion", 2),
          ("errorNoSwVersion", 3),
          ("errorNoAddress", 4),
          ("errorCollision", 5))
    )


_AmStControlStatus_Type.__name__ = "Integer32"
_AmStControlStatus_Object = MibTableColumn
amStControlStatus = _AmStControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 4, 20, 1, 2),
    _AmStControlStatus_Type()
)
amStControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amStControlStatus.setStatus("current")
_AmStHwStatus_Type = DisplayString
_AmStHwStatus_Object = MibTableColumn
amStHwStatus = _AmStHwStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 4, 20, 1, 3),
    _AmStHwStatus_Type()
)
amStHwStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amStHwStatus.setStatus("current")
_AmStMuteSelfProtection_Type = DisplayString
_AmStMuteSelfProtection_Object = MibTableColumn
amStMuteSelfProtection = _AmStMuteSelfProtection_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 4, 20, 1, 4),
    _AmStMuteSelfProtection_Type()
)
amStMuteSelfProtection.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amStMuteSelfProtection.setStatus("current")
_AmStForwardPower_Type = DisplayString
_AmStForwardPower_Object = MibTableColumn
amStForwardPower = _AmStForwardPower_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 4, 20, 1, 5),
    _AmStForwardPower_Type()
)
amStForwardPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amStForwardPower.setStatus("current")
_AmStReversePower_Type = DisplayString
_AmStReversePower_Object = MibTableColumn
amStReversePower = _AmStReversePower_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 4, 20, 1, 6),
    _AmStReversePower_Type()
)
amStReversePower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amStReversePower.setStatus("current")


class _AmStRfPhase_Type(Unsigned32):
    """Custom type amStRfPhase based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_AmStRfPhase_Type.__name__ = "Unsigned32"
_AmStRfPhase_Object = MibTableColumn
amStRfPhase = _AmStRfPhase_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 4, 20, 1, 7),
    _AmStRfPhase_Type()
)
amStRfPhase.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    amStRfPhase.setStatus("current")
_AmStTemperature_Type = DisplayString
_AmStTemperature_Object = MibTableColumn
amStTemperature = _AmStTemperature_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 4, 20, 1, 8),
    _AmStTemperature_Type()
)
amStTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amStTemperature.setStatus("current")
_AmStCurrent1_Type = DisplayString
_AmStCurrent1_Object = MibTableColumn
amStCurrent1 = _AmStCurrent1_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 4, 20, 1, 9),
    _AmStCurrent1_Type()
)
amStCurrent1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amStCurrent1.setStatus("current")
if mibBuilder.loadTexts:
    amStCurrent1.setUnits("A")
_AmStCurrent2_Type = DisplayString
_AmStCurrent2_Object = MibTableColumn
amStCurrent2 = _AmStCurrent2_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 4, 20, 1, 10),
    _AmStCurrent2_Type()
)
amStCurrent2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amStCurrent2.setStatus("current")
if mibBuilder.loadTexts:
    amStCurrent2.setUnits("A")
_AmStCurrent3_Type = DisplayString
_AmStCurrent3_Object = MibTableColumn
amStCurrent3 = _AmStCurrent3_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 4, 20, 1, 11),
    _AmStCurrent3_Type()
)
amStCurrent3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amStCurrent3.setStatus("current")
if mibBuilder.loadTexts:
    amStCurrent3.setUnits("A")
_AmStCurrent4_Type = DisplayString
_AmStCurrent4_Object = MibTableColumn
amStCurrent4 = _AmStCurrent4_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 4, 20, 1, 12),
    _AmStCurrent4_Type()
)
amStCurrent4.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amStCurrent4.setStatus("current")
if mibBuilder.loadTexts:
    amStCurrent4.setUnits("A")
_AmStCurrent5_Type = DisplayString
_AmStCurrent5_Object = MibTableColumn
amStCurrent5 = _AmStCurrent5_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 4, 20, 1, 13),
    _AmStCurrent5_Type()
)
amStCurrent5.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amStCurrent5.setStatus("current")
if mibBuilder.loadTexts:
    amStCurrent5.setUnits("A")
_AmStCurrent6_Type = DisplayString
_AmStCurrent6_Object = MibTableColumn
amStCurrent6 = _AmStCurrent6_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 4, 20, 1, 14),
    _AmStCurrent6_Type()
)
amStCurrent6.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amStCurrent6.setStatus("current")
if mibBuilder.loadTexts:
    amStCurrent6.setUnits("A")
_AmStReversePowerFlt_Type = FloatingPoint
_AmStReversePowerFlt_Object = MibTableColumn
amStReversePowerFlt = _AmStReversePowerFlt_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 4, 20, 1, 15),
    _AmStReversePowerFlt_Type()
)
amStReversePowerFlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amStReversePowerFlt.setStatus("current")
if mibBuilder.loadTexts:
    amStReversePowerFlt.setUnits("W")
_Redundancy_ObjectIdentity = ObjectIdentity
redundancy = _Redundancy_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5)
)
_Redundancy1p1_ObjectIdentity = ObjectIdentity
redundancy1p1 = _Redundancy1p1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1)
)


class _RPrDdDeviceIdentifier_Type(Integer32):
    """Custom type rPrDdDeviceIdentifier based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("undefined", 0),
          ("deviceB", 1),
          ("deviceA", 2))
    )


_RPrDdDeviceIdentifier_Type.__name__ = "Integer32"
_RPrDdDeviceIdentifier_Object = MibScalar
rPrDdDeviceIdentifier = _RPrDdDeviceIdentifier_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 1),
    _RPrDdDeviceIdentifier_Type()
)
rPrDdDeviceIdentifier.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPrDdDeviceIdentifier.setStatus("current")


class _RPrDdControlBusStatus_Type(Integer32):
    """Custom type rPrDdControlBusStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("error", 0),
          ("ok", 1),
          ("versionError", 2),
          ("redundancyTypeError", 3),
          ("collisionError", 4))
    )


_RPrDdControlBusStatus_Type.__name__ = "Integer32"
_RPrDdControlBusStatus_Object = MibScalar
rPrDdControlBusStatus = _RPrDdControlBusStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 2),
    _RPrDdControlBusStatus_Type()
)
rPrDdControlBusStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPrDdControlBusStatus.setStatus("current")
_RPrDdSystemIp_Type = IpAddress
_RPrDdSystemIp_Object = MibScalar
rPrDdSystemIp = _RPrDdSystemIp_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 3),
    _RPrDdSystemIp_Type()
)
rPrDdSystemIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPrDdSystemIp.setStatus("current")
_R1p1EnableNCB_Type = DisabledEnabled
_R1p1EnableNCB_Object = MibScalar
r1p1EnableNCB = _R1p1EnableNCB_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 5),
    _R1p1EnableNCB_Type()
)
r1p1EnableNCB.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1EnableNCB.setStatus("current")


class _RPrDdSwitchToAntenna_Type(Integer32):
    """Custom type rPrDdSwitchToAntenna based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("deviceA", 1),
          ("deviceB", 2))
    )


_RPrDdSwitchToAntenna_Type.__name__ = "Integer32"
_RPrDdSwitchToAntenna_Object = MibScalar
rPrDdSwitchToAntenna = _RPrDdSwitchToAntenna_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 6),
    _RPrDdSwitchToAntenna_Type()
)
rPrDdSwitchToAntenna.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPrDdSwitchToAntenna.setStatus("current")


class _R1p1StatusNCB_Type(Integer32):
    """Custom type r1p1StatusNCB based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 0),
          ("notReadyInitializing", 1),
          ("loadNotReadyNotVerified", 2),
          ("loadNotReadyVerifying", 3),
          ("loadNotReadyLastVerificationNok", 4),
          ("loadNotReadyLastVerificationOk", 5),
          ("loadNotReadyTestingInput", 6),
          ("loadReady", 7),
          ("antennaNok", 8),
          ("disabled", 10),
          ("loadManual", 11),
          ("antennaManual", 12),
          ("manual", 13))
    )


_R1p1StatusNCB_Type.__name__ = "Integer32"
_R1p1StatusNCB_Object = MibScalar
r1p1StatusNCB = _R1p1StatusNCB_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 7),
    _R1p1StatusNCB_Type()
)
r1p1StatusNCB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    r1p1StatusNCB.setStatus("current")


class _R1p1SwitchingCausesNCB_Type(OctetString):
    """Custom type r1p1SwitchingCausesNCB based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(256, 256),
    )
    fixed_length = 256


_R1p1SwitchingCausesNCB_Type.__name__ = "OctetString"
_R1p1SwitchingCausesNCB_Object = MibScalar
r1p1SwitchingCausesNCB = _R1p1SwitchingCausesNCB_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 8),
    _R1p1SwitchingCausesNCB_Type()
)
r1p1SwitchingCausesNCB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    r1p1SwitchingCausesNCB.setStatus("current")


class _R1p1Mode_Type(Integer32):
    """Custom type r1p1Mode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("manual", 0),
          ("automatic", 1),
          ("maintenance", 2))
    )


_R1p1Mode_Type.__name__ = "Integer32"
_R1p1Mode_Object = MibScalar
r1p1Mode = _R1p1Mode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 9),
    _R1p1Mode_Type()
)
r1p1Mode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1Mode.setStatus("current")


class _R1p1PriorityAB_Type(Integer32):
    """Custom type r1p1PriorityAB based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("aEqB", 0),
          ("aGtB", 1),
          ("aLtB", 2))
    )


_R1p1PriorityAB_Type.__name__ = "Integer32"
_R1p1PriorityAB_Object = MibScalar
r1p1PriorityAB = _R1p1PriorityAB_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 10),
    _R1p1PriorityAB_Type()
)
r1p1PriorityAB.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1PriorityAB.setStatus("current")


class _R1p1priorityNCB_Type(Integer32):
    """Custom type r1p1priorityNCB based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("low", 0),
          ("high", 1))
    )


_R1p1priorityNCB_Type.__name__ = "Integer32"
_R1p1priorityNCB_Object = MibScalar
r1p1priorityNCB = _R1p1priorityNCB_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 11),
    _R1p1priorityNCB_Type()
)
r1p1priorityNCB.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1priorityNCB.setStatus("current")
_R1p1AutoReturn_Type = DisabledEnabled
_R1p1AutoReturn_Object = MibScalar
r1p1AutoReturn = _R1p1AutoReturn_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 12),
    _R1p1AutoReturn_Type()
)
r1p1AutoReturn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1AutoReturn.setStatus("current")
_R1p1Switchings_Type = Unsigned32
_R1p1Switchings_Object = MibScalar
r1p1Switchings = _R1p1Switchings_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 15),
    _R1p1Switchings_Type()
)
r1p1Switchings.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    r1p1Switchings.setStatus("current")


class _R1p1MaximumSwitchings_Type(Unsigned32):
    """Custom type r1p1MaximumSwitchings based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99),
    )


_R1p1MaximumSwitchings_Type.__name__ = "Unsigned32"
_R1p1MaximumSwitchings_Object = MibScalar
r1p1MaximumSwitchings = _R1p1MaximumSwitchings_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 16),
    _R1p1MaximumSwitchings_Type()
)
r1p1MaximumSwitchings.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1MaximumSwitchings.setStatus("current")


class _R1p1InputTest_Type(Unsigned32):
    """Custom type r1p1InputTest based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99),
    )


_R1p1InputTest_Type.__name__ = "Unsigned32"
_R1p1InputTest_Object = MibScalar
r1p1InputTest = _R1p1InputTest_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 17),
    _R1p1InputTest_Type()
)
r1p1InputTest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1InputTest.setStatus("current")


class _R1p1InputValidation_Type(Unsigned32):
    """Custom type r1p1InputValidation based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99),
    )


_R1p1InputValidation_Type.__name__ = "Unsigned32"
_R1p1InputValidation_Object = MibScalar
r1p1InputValidation = _R1p1InputValidation_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 18),
    _R1p1InputValidation_Type()
)
r1p1InputValidation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1InputValidation.setStatus("current")
if mibBuilder.loadTexts:
    r1p1InputValidation.setUnits("seconds")


class _R1p1PowerValidation_Type(Unsigned32):
    """Custom type r1p1PowerValidation based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99),
    )


_R1p1PowerValidation_Type.__name__ = "Unsigned32"
_R1p1PowerValidation_Object = MibScalar
r1p1PowerValidation = _R1p1PowerValidation_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 19),
    _R1p1PowerValidation_Type()
)
r1p1PowerValidation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1PowerValidation.setStatus("current")
if mibBuilder.loadTexts:
    r1p1PowerValidation.setUnits("seconds")


class _R1p1SwitchingHysteresis_Type(Unsigned32):
    """Custom type r1p1SwitchingHysteresis based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99),
    )


_R1p1SwitchingHysteresis_Type.__name__ = "Unsigned32"
_R1p1SwitchingHysteresis_Object = MibScalar
r1p1SwitchingHysteresis = _R1p1SwitchingHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 20),
    _R1p1SwitchingHysteresis_Type()
)
r1p1SwitchingHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1SwitchingHysteresis.setStatus("current")
if mibBuilder.loadTexts:
    r1p1SwitchingHysteresis.setUnits("seconds")


class _R1p1RfSwitchStatus_Type(Integer32):
    """Custom type r1p1RfSwitchStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("ok", 1),
          ("errorNoPosition", 2),
          ("errorBlocked", 3))
    )


_R1p1RfSwitchStatus_Type.__name__ = "Integer32"
_R1p1RfSwitchStatus_Object = MibScalar
r1p1RfSwitchStatus = _R1p1RfSwitchStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 21),
    _R1p1RfSwitchStatus_Type()
)
r1p1RfSwitchStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    r1p1RfSwitchStatus.setStatus("current")
_R1p1DeviceA_ObjectIdentity = ObjectIdentity
r1p1DeviceA = _R1p1DeviceA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 25)
)
_R1p1StatusA_Type = RedundancyDeviceStatus
_R1p1StatusA_Object = MibScalar
r1p1StatusA = _R1p1StatusA_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 25, 1),
    _R1p1StatusA_Type()
)
r1p1StatusA.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    r1p1StatusA.setStatus("current")


class _SwitchingCausesA_Type(OctetString):
    """Custom type switchingCausesA based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(256, 256),
    )
    fixed_length = 256


_SwitchingCausesA_Type.__name__ = "OctetString"
_SwitchingCausesA_Object = MibScalar
switchingCausesA = _SwitchingCausesA_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 25, 5),
    _SwitchingCausesA_Type()
)
switchingCausesA.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    switchingCausesA.setStatus("current")
_R1p1DeviceB_ObjectIdentity = ObjectIdentity
r1p1DeviceB = _R1p1DeviceB_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 26)
)
_R1p1StatusB_Type = RedundancyDeviceStatus
_R1p1StatusB_Object = MibScalar
r1p1StatusB = _R1p1StatusB_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 26, 1),
    _R1p1StatusB_Type()
)
r1p1StatusB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    r1p1StatusB.setStatus("current")


class _SwitchingCausesB_Type(OctetString):
    """Custom type switchingCausesB based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(256, 256),
    )
    fixed_length = 256


_SwitchingCausesB_Type.__name__ = "OctetString"
_SwitchingCausesB_Object = MibScalar
switchingCausesB = _SwitchingCausesB_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 26, 5),
    _SwitchingCausesB_Type()
)
switchingCausesB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    switchingCausesB.setStatus("current")
_R1p1RfStatus_ObjectIdentity = ObjectIdentity
r1p1RfStatus = _R1p1RfStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 30)
)


class _R1p1StatusWhenAntenna_Type(Integer32):
    """Custom type r1p1StatusWhenAntenna based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("rfOff", 0),
          ("rfOn", 1))
    )


_R1p1StatusWhenAntenna_Type.__name__ = "Integer32"
_R1p1StatusWhenAntenna_Object = MibScalar
r1p1StatusWhenAntenna = _R1p1StatusWhenAntenna_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 30, 1),
    _R1p1StatusWhenAntenna_Type()
)
r1p1StatusWhenAntenna.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1StatusWhenAntenna.setStatus("current")


class _R1p1StatusWhenLoad_Type(Integer32):
    """Custom type r1p1StatusWhenLoad based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("rfOff", 0),
          ("rfOn", 1))
    )


_R1p1StatusWhenLoad_Type.__name__ = "Integer32"
_R1p1StatusWhenLoad_Object = MibScalar
r1p1StatusWhenLoad = _R1p1StatusWhenLoad_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 30, 2),
    _R1p1StatusWhenLoad_Type()
)
r1p1StatusWhenLoad.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1StatusWhenLoad.setStatus("current")
_R1p1AutoVerifications_ObjectIdentity = ObjectIdentity
r1p1AutoVerifications = _R1p1AutoVerifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 35)
)
_R1p1AutoVerificationsStatus_Type = DisabledEnabled
_R1p1AutoVerificationsStatus_Object = MibScalar
r1p1AutoVerificationsStatus = _R1p1AutoVerificationsStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 35, 1),
    _R1p1AutoVerificationsStatus_Type()
)
r1p1AutoVerificationsStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1AutoVerificationsStatus.setStatus("current")


class _R1p1AutoVDuration_Type(Unsigned32):
    """Custom type r1p1AutoVDuration based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 9999),
    )


_R1p1AutoVDuration_Type.__name__ = "Unsigned32"
_R1p1AutoVDuration_Object = MibScalar
r1p1AutoVDuration = _R1p1AutoVDuration_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 35, 2),
    _R1p1AutoVDuration_Type()
)
r1p1AutoVDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1AutoVDuration.setStatus("current")
if mibBuilder.loadTexts:
    r1p1AutoVDuration.setUnits("min")
_R1p1AutoVPerformedVerifications_Type = Unsigned32
_R1p1AutoVPerformedVerifications_Object = MibScalar
r1p1AutoVPerformedVerifications = _R1p1AutoVPerformedVerifications_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 35, 3),
    _R1p1AutoVPerformedVerifications_Type()
)
r1p1AutoVPerformedVerifications.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    r1p1AutoVPerformedVerifications.setStatus("current")


class _R1p1AutoVMaxVerifications_Type(Unsigned32):
    """Custom type r1p1AutoVMaxVerifications based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99),
    )


_R1p1AutoVMaxVerifications_Type.__name__ = "Unsigned32"
_R1p1AutoVMaxVerifications_Object = MibScalar
r1p1AutoVMaxVerifications = _R1p1AutoVMaxVerifications_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 35, 4),
    _R1p1AutoVMaxVerifications_Type()
)
r1p1AutoVMaxVerifications.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1AutoVMaxVerifications.setStatus("current")
_R1p1AutoVNexVerification_Type = DisplayString
_R1p1AutoVNexVerification_Object = MibScalar
r1p1AutoVNexVerification = _R1p1AutoVNexVerification_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 35, 5),
    _R1p1AutoVNexVerification_Type()
)
r1p1AutoVNexVerification.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    r1p1AutoVNexVerification.setStatus("current")
_R1p1AutoVReiterated_ObjectIdentity = ObjectIdentity
r1p1AutoVReiterated = _R1p1AutoVReiterated_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 40)
)
_R1p1AutoVReiteratedEnable_Type = DisabledEnabled
_R1p1AutoVReiteratedEnable_Object = MibScalar
r1p1AutoVReiteratedEnable = _R1p1AutoVReiteratedEnable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 40, 1),
    _R1p1AutoVReiteratedEnable_Type()
)
r1p1AutoVReiteratedEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1AutoVReiteratedEnable.setStatus("current")


class _R1p1AutoVReiteratedPeriod_Type(Unsigned32):
    """Custom type r1p1AutoVReiteratedPeriod based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99),
    )


_R1p1AutoVReiteratedPeriod_Type.__name__ = "Unsigned32"
_R1p1AutoVReiteratedPeriod_Object = MibScalar
r1p1AutoVReiteratedPeriod = _R1p1AutoVReiteratedPeriod_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 40, 2),
    _R1p1AutoVReiteratedPeriod_Type()
)
r1p1AutoVReiteratedPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1AutoVReiteratedPeriod.setStatus("current")
if mibBuilder.loadTexts:
    r1p1AutoVReiteratedPeriod.setUnits("min")


class _R1p1AutoVReiteratedCadence_Type(Integer32):
    """Custom type r1p1AutoVReiteratedCadence based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("simple", 0),
          ("double", 1),
          ("triple", 2))
    )


_R1p1AutoVReiteratedCadence_Type.__name__ = "Integer32"
_R1p1AutoVReiteratedCadence_Object = MibScalar
r1p1AutoVReiteratedCadence = _R1p1AutoVReiteratedCadence_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 40, 3),
    _R1p1AutoVReiteratedCadence_Type()
)
r1p1AutoVReiteratedCadence.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1AutoVReiteratedCadence.setStatus("current")
_R1p1AutoVDaily_ObjectIdentity = ObjectIdentity
r1p1AutoVDaily = _R1p1AutoVDaily_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 50)
)
_R1p1AutoVDailyEnable_Type = DisabledEnabled
_R1p1AutoVDailyEnable_Object = MibScalar
r1p1AutoVDailyEnable = _R1p1AutoVDailyEnable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 50, 1),
    _R1p1AutoVDailyEnable_Type()
)
r1p1AutoVDailyEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1AutoVDailyEnable.setStatus("current")


class _R1p1AutoVDailyTime_Type(OctetString):
    """Custom type r1p1AutoVDailyTime based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(5, 5),
    )
    fixed_length = 5


_R1p1AutoVDailyTime_Type.__name__ = "OctetString"
_R1p1AutoVDailyTime_Object = MibScalar
r1p1AutoVDailyTime = _R1p1AutoVDailyTime_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 50, 2),
    _R1p1AutoVDailyTime_Type()
)
r1p1AutoVDailyTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1AutoVDailyTime.setStatus("current")


class _R1p1AutoVDailyMode_Type(Integer32):
    """Custom type r1p1AutoVDailyMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("always", 0),
          ("ifVerificationNok", 1))
    )


_R1p1AutoVDailyMode_Type.__name__ = "Integer32"
_R1p1AutoVDailyMode_Object = MibScalar
r1p1AutoVDailyMode = _R1p1AutoVDailyMode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 50, 3),
    _R1p1AutoVDailyMode_Type()
)
r1p1AutoVDailyMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1AutoVDailyMode.setStatus("current")


class _R1p1AutoVDailyWindow_Type(Unsigned32):
    """Custom type r1p1AutoVDailyWindow based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 99),
    )


_R1p1AutoVDailyWindow_Type.__name__ = "Unsigned32"
_R1p1AutoVDailyWindow_Object = MibScalar
r1p1AutoVDailyWindow = _R1p1AutoVDailyWindow_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 50, 4),
    _R1p1AutoVDailyWindow_Type()
)
r1p1AutoVDailyWindow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1AutoVDailyWindow.setStatus("current")
if mibBuilder.loadTexts:
    r1p1AutoVDailyWindow.setUnits("days")
_R1p1AutoVAlarm_ObjectIdentity = ObjectIdentity
r1p1AutoVAlarm = _R1p1AutoVAlarm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 52)
)
_R1p1AutoVAlarmEnable_Type = DisabledEnabled
_R1p1AutoVAlarmEnable_Object = MibScalar
r1p1AutoVAlarmEnable = _R1p1AutoVAlarmEnable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 52, 3),
    _R1p1AutoVAlarmEnable_Type()
)
r1p1AutoVAlarmEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1AutoVAlarmEnable.setStatus("current")
_R1p1AutoPriorityInversion_ObjectIdentity = ObjectIdentity
r1p1AutoPriorityInversion = _R1p1AutoPriorityInversion_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 55)
)
_R1p1PriorityInversionEnable_Type = DisabledEnabled
_R1p1PriorityInversionEnable_Object = MibScalar
r1p1PriorityInversionEnable = _R1p1PriorityInversionEnable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 55, 1),
    _R1p1PriorityInversionEnable_Type()
)
r1p1PriorityInversionEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1PriorityInversionEnable.setStatus("current")


class _R1p1PriorityInversionPeriod_Type(Unsigned32):
    """Custom type r1p1PriorityInversionPeriod based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 99),
    )


_R1p1PriorityInversionPeriod_Type.__name__ = "Unsigned32"
_R1p1PriorityInversionPeriod_Object = MibScalar
r1p1PriorityInversionPeriod = _R1p1PriorityInversionPeriod_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 55, 2),
    _R1p1PriorityInversionPeriod_Type()
)
r1p1PriorityInversionPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1PriorityInversionPeriod.setStatus("current")


class _R1p1PriorityInversionTime_Type(OctetString):
    """Custom type r1p1PriorityInversionTime based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(5, 5),
    )
    fixed_length = 5


_R1p1PriorityInversionTime_Type.__name__ = "OctetString"
_R1p1PriorityInversionTime_Object = MibScalar
r1p1PriorityInversionTime = _R1p1PriorityInversionTime_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 55, 3),
    _R1p1PriorityInversionTime_Type()
)
r1p1PriorityInversionTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1PriorityInversionTime.setStatus("current")
_R1p1Reset_Type = NullApply
_R1p1Reset_Object = MibScalar
r1p1Reset = _R1p1Reset_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 60),
    _R1p1Reset_Type()
)
r1p1Reset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1Reset.setStatus("current")
_R1p1Synchronization_ObjectIdentity = ObjectIdentity
r1p1Synchronization = _R1p1Synchronization_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 70)
)
_R1p1SyncWeb_Type = SyncNotSync
_R1p1SyncWeb_Object = MibScalar
r1p1SyncWeb = _R1p1SyncWeb_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 70, 5),
    _R1p1SyncWeb_Type()
)
r1p1SyncWeb.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1SyncWeb.setStatus("current")
_R1p1SyncDate_Type = SyncNotSync
_R1p1SyncDate_Object = MibScalar
r1p1SyncDate = _R1p1SyncDate_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 70, 10),
    _R1p1SyncDate_Type()
)
r1p1SyncDate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1SyncDate.setStatus("current")
_R1p1SyncSnmp_Type = SyncNotSync
_R1p1SyncSnmp_Object = MibScalar
r1p1SyncSnmp = _R1p1SyncSnmp_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 70, 15),
    _R1p1SyncSnmp_Type()
)
r1p1SyncSnmp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1SyncSnmp.setStatus("current")
_R1p1SyncIO_Type = SyncNotSync
_R1p1SyncIO_Object = MibScalar
r1p1SyncIO = _R1p1SyncIO_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 70, 18),
    _R1p1SyncIO_Type()
)
r1p1SyncIO.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1SyncIO.setStatus("current")
_R1p1SyncEvents_Type = SyncNotSync
_R1p1SyncEvents_Object = MibScalar
r1p1SyncEvents = _R1p1SyncEvents_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 70, 20),
    _R1p1SyncEvents_Type()
)
r1p1SyncEvents.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1SyncEvents.setStatus("current")
_R1p1SyncInput_Type = SyncNotSync
_R1p1SyncInput_Object = MibScalar
r1p1SyncInput = _R1p1SyncInput_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 70, 25),
    _R1p1SyncInput_Type()
)
r1p1SyncInput.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1SyncInput.setStatus("current")
_R1p1SyncRfInput_Type = SyncNotSync
_R1p1SyncRfInput_Object = MibScalar
r1p1SyncRfInput = _R1p1SyncRfInput_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 70, 30),
    _R1p1SyncRfInput_Type()
)
r1p1SyncRfInput.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1SyncRfInput.setStatus("current")
_R1p1SyncCanceller_Type = SyncNotSync
_R1p1SyncCanceller_Object = MibScalar
r1p1SyncCanceller = _R1p1SyncCanceller_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 70, 35),
    _R1p1SyncCanceller_Type()
)
r1p1SyncCanceller.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1SyncCanceller.setStatus("current")
_R1p1SyncModulator_Type = SyncNotSync
_R1p1SyncModulator_Object = MibScalar
r1p1SyncModulator = _R1p1SyncModulator_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 70, 40),
    _R1p1SyncModulator_Type()
)
r1p1SyncModulator.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1SyncModulator.setStatus("current")
_R1p1SyncRfConfiguration_Type = SyncNotSync
_R1p1SyncRfConfiguration_Object = MibScalar
r1p1SyncRfConfiguration = _R1p1SyncRfConfiguration_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 70, 45),
    _R1p1SyncRfConfiguration_Type()
)
r1p1SyncRfConfiguration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1SyncRfConfiguration.setStatus("current")
_R1p1SyncMutes_Type = SyncNotSync
_R1p1SyncMutes_Object = MibScalar
r1p1SyncMutes = _R1p1SyncMutes_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 70, 47),
    _R1p1SyncMutes_Type()
)
r1p1SyncMutes.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1SyncMutes.setStatus("current")
_R1p1SyncAmplifier_Type = SyncNotSync
_R1p1SyncAmplifier_Object = MibScalar
r1p1SyncAmplifier = _R1p1SyncAmplifier_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 70, 50),
    _R1p1SyncAmplifier_Type()
)
r1p1SyncAmplifier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1SyncAmplifier.setStatus("current")
_R1p1SyncExternalAmplifier_Type = SyncNotSync
_R1p1SyncExternalAmplifier_Object = MibScalar
r1p1SyncExternalAmplifier = _R1p1SyncExternalAmplifier_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 70, 55),
    _R1p1SyncExternalAmplifier_Type()
)
r1p1SyncExternalAmplifier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1SyncExternalAmplifier.setStatus("current")
_R1p1SyncReference_Type = SyncNotSync
_R1p1SyncReference_Object = MibScalar
r1p1SyncReference = _R1p1SyncReference_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 1, 70, 60),
    _R1p1SyncReference_Type()
)
r1p1SyncReference.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    r1p1SyncReference.setStatus("current")
_RedundancyNp1_ObjectIdentity = ObjectIdentity
redundancyNp1 = _RedundancyNp1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5)
)
_RedundancyNp1B_ObjectIdentity = ObjectIdentity
redundancyNp1B = _RedundancyNp1B_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5)
)
_RedundancyNp1BConfiguration_ObjectIdentity = ObjectIdentity
redundancyNp1BConfiguration = _RedundancyNp1BConfiguration_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5)
)


class _RNp1DeviceIdentifier_Type(Integer32):
    """Custom type rNp1DeviceIdentifier based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("undefined", 0),
          ("deviceB", 1),
          ("deviceA1", 2),
          ("deviceA2", 3),
          ("deviceA3", 4),
          ("deviceA4", 5),
          ("deviceA5", 6),
          ("deviceA6", 7),
          ("deviceA7", 8),
          ("deviceA8", 9),
          ("deviceA9", 10),
          ("deviceA10", 11),
          ("deviceA11", 12))
    )


_RNp1DeviceIdentifier_Type.__name__ = "Integer32"
_RNp1DeviceIdentifier_Object = MibScalar
rNp1DeviceIdentifier = _RNp1DeviceIdentifier_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 5),
    _RNp1DeviceIdentifier_Type()
)
rNp1DeviceIdentifier.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rNp1DeviceIdentifier.setStatus("current")


class _RNp1ControlBusStatus_Type(Integer32):
    """Custom type rNp1ControlBusStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("error", 0),
          ("ok", 1),
          ("versionError", 2),
          ("redundancyTypeError", 3),
          ("collisionError", 4))
    )


_RNp1ControlBusStatus_Type.__name__ = "Integer32"
_RNp1ControlBusStatus_Object = MibScalar
rNp1ControlBusStatus = _RNp1ControlBusStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 10),
    _RNp1ControlBusStatus_Type()
)
rNp1ControlBusStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rNp1ControlBusStatus.setStatus("current")
_RNp1SystemIp_Type = IpAddress
_RNp1SystemIp_Object = MibScalar
rNp1SystemIp = _RNp1SystemIp_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 15),
    _RNp1SystemIp_Type()
)
rNp1SystemIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rNp1SystemIp.setStatus("current")


class _RNp1NValue_Type(Unsigned32):
    """Custom type rNp1NValue based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 11),
    )


_RNp1NValue_Type.__name__ = "Unsigned32"
_RNp1NValue_Object = MibScalar
rNp1NValue = _RNp1NValue_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 20),
    _RNp1NValue_Type()
)
rNp1NValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rNp1NValue.setStatus("current")


class _RNp1ManualSwitching_Type(Integer32):
    """Custom type rNp1ManualSwitching based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("deviceBtoLoad", 1),
          ("deviceBtoAntenna1", 2),
          ("deviceBtoAntenna2", 3),
          ("deviceBtoAntenna3", 4),
          ("deviceBtoAntenna4", 5),
          ("deviceBtoAntenna5", 6),
          ("deviceBtoAntenna6", 7),
          ("deviceBtoAntenna7", 8),
          ("deviceBtoAntenna8", 9),
          ("deviceBtoAntenna9", 10),
          ("deviceBtoAntenna10", 11),
          ("deviceBtoAntenna11", 12))
    )


_RNp1ManualSwitching_Type.__name__ = "Integer32"
_RNp1ManualSwitching_Object = MibScalar
rNp1ManualSwitching = _RNp1ManualSwitching_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 25),
    _RNp1ManualSwitching_Type()
)
rNp1ManualSwitching.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rNp1ManualSwitching.setStatus("current")


class _RNp1Mode_Type(Integer32):
    """Custom type rNp1Mode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("manual", 0),
          ("automatic", 1),
          ("maintenance", 2))
    )


_RNp1Mode_Type.__name__ = "Integer32"
_RNp1Mode_Object = MibScalar
rNp1Mode = _RNp1Mode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 30),
    _RNp1Mode_Type()
)
rNp1Mode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rNp1Mode.setStatus("current")
_RNp1AutoReturn_Type = DisabledEnabled
_RNp1AutoReturn_Object = MibScalar
rNp1AutoReturn = _RNp1AutoReturn_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 35),
    _RNp1AutoReturn_Type()
)
rNp1AutoReturn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rNp1AutoReturn.setStatus("current")


class _RNp1MaximumRestorations_Type(Unsigned32):
    """Custom type rNp1MaximumRestorations based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 99),
    )


_RNp1MaximumRestorations_Type.__name__ = "Unsigned32"
_RNp1MaximumRestorations_Object = MibScalar
rNp1MaximumRestorations = _RNp1MaximumRestorations_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 40),
    _RNp1MaximumRestorations_Type()
)
rNp1MaximumRestorations.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rNp1MaximumRestorations.setStatus("current")


class _RNp1Window_Type(Unsigned32):
    """Custom type rNp1Window based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 99),
    )


_RNp1Window_Type.__name__ = "Unsigned32"
_RNp1Window_Object = MibScalar
rNp1Window = _RNp1Window_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 45),
    _RNp1Window_Type()
)
rNp1Window.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rNp1Window.setStatus("current")


class _RNp1InputErrorTest_Type(Unsigned32):
    """Custom type rNp1InputErrorTest based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99),
    )


_RNp1InputErrorTest_Type.__name__ = "Unsigned32"
_RNp1InputErrorTest_Object = MibScalar
rNp1InputErrorTest = _RNp1InputErrorTest_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 50),
    _RNp1InputErrorTest_Type()
)
rNp1InputErrorTest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rNp1InputErrorTest.setStatus("current")
if mibBuilder.loadTexts:
    rNp1InputErrorTest.setUnits("seconds")


class _RNp1SwitchingHysteresis_Type(Unsigned32):
    """Custom type rNp1SwitchingHysteresis based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99),
    )


_RNp1SwitchingHysteresis_Type.__name__ = "Unsigned32"
_RNp1SwitchingHysteresis_Object = MibScalar
rNp1SwitchingHysteresis = _RNp1SwitchingHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 55),
    _RNp1SwitchingHysteresis_Type()
)
rNp1SwitchingHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rNp1SwitchingHysteresis.setStatus("current")
if mibBuilder.loadTexts:
    rNp1SwitchingHysteresis.setUnits("seconds")
_RNp1RfControl_ObjectIdentity = ObjectIdentity
rNp1RfControl = _RNp1RfControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 57)
)
_RNp1RfAControlTable_Object = MibTable
rNp1RfAControlTable = _RNp1RfAControlTable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 57, 5)
)
if mibBuilder.loadTexts:
    rNp1RfAControlTable.setStatus("current")
_RNp1RfAControlEntry_Object = MibTableRow
rNp1RfAControlEntry = _RNp1RfAControlEntry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 57, 5, 1)
)
rNp1RfAControlEntry.setIndexNames(
    (0, "TREDESS-FS-MIB", "deviceRfAControlIndex"),
)
if mibBuilder.loadTexts:
    rNp1RfAControlEntry.setStatus("current")


class _DeviceRfAControlIndex_Type(Unsigned32):
    """Custom type deviceRfAControlIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 11),
    )


_DeviceRfAControlIndex_Type.__name__ = "Unsigned32"
_DeviceRfAControlIndex_Object = MibTableColumn
deviceRfAControlIndex = _DeviceRfAControlIndex_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 57, 5, 1, 1),
    _DeviceRfAControlIndex_Type()
)
deviceRfAControlIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    deviceRfAControlIndex.setStatus("current")


class _DeviceARf_Type(Integer32):
    """Custom type deviceARf based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("rfOff", 0),
          ("rfOn", 1))
    )


_DeviceARf_Type.__name__ = "Integer32"
_DeviceARf_Object = MibTableColumn
deviceARf = _DeviceARf_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 57, 5, 1, 2),
    _DeviceARf_Type()
)
deviceARf.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    deviceARf.setStatus("current")
_RNp1DeviceAPriorites_ObjectIdentity = ObjectIdentity
rNp1DeviceAPriorites = _RNp1DeviceAPriorites_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 58)
)
_RNp1DeviceAPriorityTable_Object = MibTable
rNp1DeviceAPriorityTable = _RNp1DeviceAPriorityTable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 58, 5)
)
if mibBuilder.loadTexts:
    rNp1DeviceAPriorityTable.setStatus("current")
_RNp1DeviceAPriorityEntry_Object = MibTableRow
rNp1DeviceAPriorityEntry = _RNp1DeviceAPriorityEntry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 58, 5, 1)
)
rNp1DeviceAPriorityEntry.setIndexNames(
    (0, "TREDESS-FS-MIB", "deviceAPriorityIndex"),
)
if mibBuilder.loadTexts:
    rNp1DeviceAPriorityEntry.setStatus("current")


class _DeviceAPriorityIndex_Type(Unsigned32):
    """Custom type deviceAPriorityIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 11),
    )


_DeviceAPriorityIndex_Type.__name__ = "Unsigned32"
_DeviceAPriorityIndex_Object = MibTableColumn
deviceAPriorityIndex = _DeviceAPriorityIndex_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 58, 5, 1, 1),
    _DeviceAPriorityIndex_Type()
)
deviceAPriorityIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    deviceAPriorityIndex.setStatus("current")


class _DeviceAPriority_Type(Integer32):
    """Custom type deviceAPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("highest1", 1),
          ("priority2", 2),
          ("priority3", 3),
          ("priority4", 4),
          ("priority5", 5),
          ("priority6", 6),
          ("priority8", 7),
          ("priority9", 8),
          ("priority10", 9),
          ("priority11", 11),
          ("dummyAntenna", 12))
    )


_DeviceAPriority_Type.__name__ = "Integer32"
_DeviceAPriority_Object = MibTableColumn
deviceAPriority = _DeviceAPriority_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 58, 5, 1, 2),
    _DeviceAPriority_Type()
)
deviceAPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    deviceAPriority.setStatus("current")
_RNp1DeviceBStatus_ObjectIdentity = ObjectIdentity
rNp1DeviceBStatus = _RNp1DeviceBStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 60)
)


class _RNp1ConfigurationDeviceB_Type(Integer32):
    """Custom type rNp1ConfigurationDeviceB based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("undefined", 0),
          ("deviceA1", 1),
          ("deviceA2", 2),
          ("deviceA3", 3),
          ("deviceA4", 4),
          ("deviceA5", 5),
          ("deviceA6", 6),
          ("deviceA7", 7),
          ("deviceA8", 8),
          ("deviceA9", 9),
          ("deviceA10", 10),
          ("deviceA11", 11))
    )


_RNp1ConfigurationDeviceB_Type.__name__ = "Integer32"
_RNp1ConfigurationDeviceB_Object = MibScalar
rNp1ConfigurationDeviceB = _RNp1ConfigurationDeviceB_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 60, 5),
    _RNp1ConfigurationDeviceB_Type()
)
rNp1ConfigurationDeviceB.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rNp1ConfigurationDeviceB.setStatus("current")
_RNp1DeviceBStatusValue_Type = RedundancyDeviceStatus
_RNp1DeviceBStatusValue_Object = MibScalar
rNp1DeviceBStatusValue = _RNp1DeviceBStatusValue_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 60, 10),
    _RNp1DeviceBStatusValue_Type()
)
rNp1DeviceBStatusValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rNp1DeviceBStatusValue.setStatus("current")


class _RNp1SwitchingCauses_Type(OctetString):
    """Custom type rNp1SwitchingCauses based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(256, 256),
    )
    fixed_length = 256


_RNp1SwitchingCauses_Type.__name__ = "OctetString"
_RNp1SwitchingCauses_Object = MibScalar
rNp1SwitchingCauses = _RNp1SwitchingCauses_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 60, 15),
    _RNp1SwitchingCauses_Type()
)
rNp1SwitchingCauses.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rNp1SwitchingCauses.setStatus("current")
_RNp1DeviceAStatusTable_Object = MibTable
rNp1DeviceAStatusTable = _RNp1DeviceAStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 65)
)
if mibBuilder.loadTexts:
    rNp1DeviceAStatusTable.setStatus("current")
_RNp1DeviceAStatusEntry_Object = MibTableRow
rNp1DeviceAStatusEntry = _RNp1DeviceAStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 65, 1)
)
rNp1DeviceAStatusEntry.setIndexNames(
    (0, "TREDESS-FS-MIB", "deviceAStatusIndex"),
)
if mibBuilder.loadTexts:
    rNp1DeviceAStatusEntry.setStatus("current")


class _DeviceAStatusIndex_Type(Unsigned32):
    """Custom type deviceAStatusIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 11),
    )


_DeviceAStatusIndex_Type.__name__ = "Unsigned32"
_DeviceAStatusIndex_Object = MibTableColumn
deviceAStatusIndex = _DeviceAStatusIndex_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 65, 1, 1),
    _DeviceAStatusIndex_Type()
)
deviceAStatusIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    deviceAStatusIndex.setStatus("current")
_DeviceAStatusValue_Type = RedundancyDeviceStatus
_DeviceAStatusValue_Object = MibTableColumn
deviceAStatusValue = _DeviceAStatusValue_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 65, 1, 2),
    _DeviceAStatusValue_Type()
)
deviceAStatusValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    deviceAStatusValue.setStatus("current")


class _DeviceAStatusSwitchingCauses_Type(OctetString):
    """Custom type deviceAStatusSwitchingCauses based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(256, 256),
    )
    fixed_length = 256


_DeviceAStatusSwitchingCauses_Type.__name__ = "OctetString"
_DeviceAStatusSwitchingCauses_Object = MibTableColumn
deviceAStatusSwitchingCauses = _DeviceAStatusSwitchingCauses_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 65, 1, 3),
    _DeviceAStatusSwitchingCauses_Type()
)
deviceAStatusSwitchingCauses.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    deviceAStatusSwitchingCauses.setStatus("current")


class _DeviceAStatusRestorations_Type(Unsigned32):
    """Custom type deviceAStatusRestorations based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_DeviceAStatusRestorations_Type.__name__ = "Unsigned32"
_DeviceAStatusRestorations_Object = MibTableColumn
deviceAStatusRestorations = _DeviceAStatusRestorations_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 65, 1, 4),
    _DeviceAStatusRestorations_Type()
)
deviceAStatusRestorations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    deviceAStatusRestorations.setStatus("current")
_DeviceARfSwitchStatus_Type = RedundancyRfSwitchStatus
_DeviceARfSwitchStatus_Object = MibTableColumn
deviceARfSwitchStatus = _DeviceARfSwitchStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 65, 1, 5),
    _DeviceARfSwitchStatus_Type()
)
deviceARfSwitchStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    deviceARfSwitchStatus.setStatus("current")
_RNp1DeviceBConfiguration_ObjectIdentity = ObjectIdentity
rNp1DeviceBConfiguration = _RNp1DeviceBConfiguration_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 70)
)


class _RNp1DeviceToLoad_Type(Integer32):
    """Custom type rNp1DeviceToLoad based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("rfOff", 0),
          ("rfOn", 1))
    )


_RNp1DeviceToLoad_Type.__name__ = "Integer32"
_RNp1DeviceToLoad_Object = MibScalar
rNp1DeviceToLoad = _RNp1DeviceToLoad_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 70, 5),
    _RNp1DeviceToLoad_Type()
)
rNp1DeviceToLoad.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rNp1DeviceToLoad.setStatus("current")
_RNp1PriorityManagement_Type = DisabledEnabled
_RNp1PriorityManagement_Object = MibScalar
rNp1PriorityManagement = _RNp1PriorityManagement_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 70, 10),
    _RNp1PriorityManagement_Type()
)
rNp1PriorityManagement.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rNp1PriorityManagement.setStatus("current")
_RNp1AutoVerifications_ObjectIdentity = ObjectIdentity
rNp1AutoVerifications = _RNp1AutoVerifications_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 80)
)
_RNp1AutoVerificationsStatus_Type = DisabledEnabled
_RNp1AutoVerificationsStatus_Object = MibScalar
rNp1AutoVerificationsStatus = _RNp1AutoVerificationsStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 80, 5),
    _RNp1AutoVerificationsStatus_Type()
)
rNp1AutoVerificationsStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rNp1AutoVerificationsStatus.setStatus("current")


class _RNp1AutoVDuration_Type(Unsigned32):
    """Custom type rNp1AutoVDuration based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 9999),
    )


_RNp1AutoVDuration_Type.__name__ = "Unsigned32"
_RNp1AutoVDuration_Object = MibScalar
rNp1AutoVDuration = _RNp1AutoVDuration_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 80, 10),
    _RNp1AutoVDuration_Type()
)
rNp1AutoVDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rNp1AutoVDuration.setStatus("current")
if mibBuilder.loadTexts:
    rNp1AutoVDuration.setUnits("min")
_RNp1AutoVPerformedVerifications_Type = Unsigned32
_RNp1AutoVPerformedVerifications_Object = MibScalar
rNp1AutoVPerformedVerifications = _RNp1AutoVPerformedVerifications_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 80, 15),
    _RNp1AutoVPerformedVerifications_Type()
)
rNp1AutoVPerformedVerifications.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rNp1AutoVPerformedVerifications.setStatus("current")


class _RNp1AutoVMaxVerifications_Type(Unsigned32):
    """Custom type rNp1AutoVMaxVerifications based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99),
    )


_RNp1AutoVMaxVerifications_Type.__name__ = "Unsigned32"
_RNp1AutoVMaxVerifications_Object = MibScalar
rNp1AutoVMaxVerifications = _RNp1AutoVMaxVerifications_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 80, 20),
    _RNp1AutoVMaxVerifications_Type()
)
rNp1AutoVMaxVerifications.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rNp1AutoVMaxVerifications.setStatus("current")
_RNp1AutoVNexVerification_Type = DisplayString
_RNp1AutoVNexVerification_Object = MibScalar
rNp1AutoVNexVerification = _RNp1AutoVNexVerification_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 80, 25),
    _RNp1AutoVNexVerification_Type()
)
rNp1AutoVNexVerification.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rNp1AutoVNexVerification.setStatus("current")
_RNp1AutoVReiterated_ObjectIdentity = ObjectIdentity
rNp1AutoVReiterated = _RNp1AutoVReiterated_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 85)
)
_RNp1AutoVReiteratedEnable_Type = DisabledEnabled
_RNp1AutoVReiteratedEnable_Object = MibScalar
rNp1AutoVReiteratedEnable = _RNp1AutoVReiteratedEnable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 85, 5),
    _RNp1AutoVReiteratedEnable_Type()
)
rNp1AutoVReiteratedEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rNp1AutoVReiteratedEnable.setStatus("current")


class _RNp1AutoVReiteratedPeriod_Type(Unsigned32):
    """Custom type rNp1AutoVReiteratedPeriod based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 99),
    )


_RNp1AutoVReiteratedPeriod_Type.__name__ = "Unsigned32"
_RNp1AutoVReiteratedPeriod_Object = MibScalar
rNp1AutoVReiteratedPeriod = _RNp1AutoVReiteratedPeriod_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 85, 10),
    _RNp1AutoVReiteratedPeriod_Type()
)
rNp1AutoVReiteratedPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rNp1AutoVReiteratedPeriod.setStatus("current")
if mibBuilder.loadTexts:
    rNp1AutoVReiteratedPeriod.setUnits("min")


class _RNp1AutoVReiteratedCadence_Type(Integer32):
    """Custom type rNp1AutoVReiteratedCadence based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("simple", 0),
          ("double", 1),
          ("triple", 2))
    )


_RNp1AutoVReiteratedCadence_Type.__name__ = "Integer32"
_RNp1AutoVReiteratedCadence_Object = MibScalar
rNp1AutoVReiteratedCadence = _RNp1AutoVReiteratedCadence_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 85, 15),
    _RNp1AutoVReiteratedCadence_Type()
)
rNp1AutoVReiteratedCadence.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rNp1AutoVReiteratedCadence.setStatus("current")
_RNp1AutoVDaily_ObjectIdentity = ObjectIdentity
rNp1AutoVDaily = _RNp1AutoVDaily_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 90)
)
_RNp1AutoVDailyEnable_Type = DisabledEnabled
_RNp1AutoVDailyEnable_Object = MibScalar
rNp1AutoVDailyEnable = _RNp1AutoVDailyEnable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 90, 5),
    _RNp1AutoVDailyEnable_Type()
)
rNp1AutoVDailyEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rNp1AutoVDailyEnable.setStatus("current")


class _RNp1AutoVDailyWindow_Type(Unsigned32):
    """Custom type rNp1AutoVDailyWindow based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 99),
    )


_RNp1AutoVDailyWindow_Type.__name__ = "Unsigned32"
_RNp1AutoVDailyWindow_Object = MibScalar
rNp1AutoVDailyWindow = _RNp1AutoVDailyWindow_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 90, 6),
    _RNp1AutoVDailyWindow_Type()
)
rNp1AutoVDailyWindow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rNp1AutoVDailyWindow.setStatus("current")
if mibBuilder.loadTexts:
    rNp1AutoVDailyWindow.setUnits("days")


class _RNp1AutoVDailyMode_Type(Integer32):
    """Custom type rNp1AutoVDailyMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("always", 0),
          ("ifVerificationNok", 1))
    )


_RNp1AutoVDailyMode_Type.__name__ = "Integer32"
_RNp1AutoVDailyMode_Object = MibScalar
rNp1AutoVDailyMode = _RNp1AutoVDailyMode_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 90, 7),
    _RNp1AutoVDailyMode_Type()
)
rNp1AutoVDailyMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rNp1AutoVDailyMode.setStatus("current")


class _RNp1AutoVDailyTime_Type(OctetString):
    """Custom type rNp1AutoVDailyTime based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(5, 5),
    )
    fixed_length = 5


_RNp1AutoVDailyTime_Type.__name__ = "OctetString"
_RNp1AutoVDailyTime_Object = MibScalar
rNp1AutoVDailyTime = _RNp1AutoVDailyTime_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 90, 10),
    _RNp1AutoVDailyTime_Type()
)
rNp1AutoVDailyTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rNp1AutoVDailyTime.setStatus("current")
_RNp1AutomaticVerificationAlarm_ObjectIdentity = ObjectIdentity
rNp1AutomaticVerificationAlarm = _RNp1AutomaticVerificationAlarm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 95)
)
_RNp1VerificationAlarm_Type = DisabledEnabled
_RNp1VerificationAlarm_Object = MibScalar
rNp1VerificationAlarm = _RNp1VerificationAlarm_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 95, 5),
    _RNp1VerificationAlarm_Type()
)
rNp1VerificationAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rNp1VerificationAlarm.setStatus("current")
_RNp1Reset_Type = NullApply
_RNp1Reset_Object = MibScalar
rNp1Reset = _RNp1Reset_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 5, 100),
    _RNp1Reset_Type()
)
rNp1Reset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rNp1Reset.setStatus("current")
_RedundancyNp1BSynchronization_ObjectIdentity = ObjectIdentity
redundancyNp1BSynchronization = _RedundancyNp1BSynchronization_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 10)
)
_RNp1SyncAllConfigurations_Type = NullApply
_RNp1SyncAllConfigurations_Object = MibScalar
rNp1SyncAllConfigurations = _RNp1SyncAllConfigurations_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 10, 3),
    _RNp1SyncAllConfigurations_Type()
)
rNp1SyncAllConfigurations.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rNp1SyncAllConfigurations.setStatus("current")
_RNp1DeviceBSynchronizationTable_Object = MibTable
rNp1DeviceBSynchronizationTable = _RNp1DeviceBSynchronizationTable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 10, 5)
)
if mibBuilder.loadTexts:
    rNp1DeviceBSynchronizationTable.setStatus("current")
_RNp1DeviceBSynchronizationEntry_Object = MibTableRow
rNp1DeviceBSynchronizationEntry = _RNp1DeviceBSynchronizationEntry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 10, 5, 1)
)
rNp1DeviceBSynchronizationEntry.setIndexNames(
    (0, "TREDESS-FS-MIB", "deviceBSynchronizationAIndex"),
)
if mibBuilder.loadTexts:
    rNp1DeviceBSynchronizationEntry.setStatus("current")


class _DeviceBSynchronizationAIndex_Type(Unsigned32):
    """Custom type deviceBSynchronizationAIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 11),
    )


_DeviceBSynchronizationAIndex_Type.__name__ = "Unsigned32"
_DeviceBSynchronizationAIndex_Object = MibTableColumn
deviceBSynchronizationAIndex = _DeviceBSynchronizationAIndex_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 10, 5, 1, 1),
    _DeviceBSynchronizationAIndex_Type()
)
deviceBSynchronizationAIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    deviceBSynchronizationAIndex.setStatus("current")


class _DeviceBConfigurationA_Type(Integer32):
    """Custom type deviceBConfigurationA based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notAvailable", 0),
          ("notSynchronized", 1),
          ("synchronized", 2),
          ("synchronizedModified", 3))
    )


_DeviceBConfigurationA_Type.__name__ = "Integer32"
_DeviceBConfigurationA_Object = MibTableColumn
deviceBConfigurationA = _DeviceBConfigurationA_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 10, 5, 1, 2),
    _DeviceBConfigurationA_Type()
)
deviceBConfigurationA.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    deviceBConfigurationA.setStatus("current")
_DeviceBSynchronizeA_Type = NullApply
_DeviceBSynchronizeA_Object = MibTableColumn
deviceBSynchronizeA = _DeviceBSynchronizeA_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 5, 5, 10, 5, 1, 3),
    _DeviceBSynchronizeA_Type()
)
deviceBSynchronizeA.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    deviceBSynchronizeA.setStatus("current")
_RedundancyAsi_ObjectIdentity = ObjectIdentity
redundancyAsi = _RedundancyAsi_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 10)
)
_AsiMatrixControlStatus_Type = DisplayString
_AsiMatrixControlStatus_Object = MibScalar
asiMatrixControlStatus = _AsiMatrixControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 10, 3),
    _AsiMatrixControlStatus_Type()
)
asiMatrixControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    asiMatrixControlStatus.setStatus("current")
_AsiMatrixHwStatus_Type = DisplayString
_AsiMatrixHwStatus_Object = MibScalar
asiMatrixHwStatus = _AsiMatrixHwStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 10, 6),
    _AsiMatrixHwStatus_Type()
)
asiMatrixHwStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    asiMatrixHwStatus.setStatus("current")


class _AsiMatrixSelected_Type(Integer32):
    """Custom type asiMatrixSelected based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("input1", 1),
          ("input2", 2),
          ("input3", 3),
          ("input4", 4),
          ("input5", 5),
          ("input6", 6),
          ("input7", 7),
          ("input8", 8),
          ("input9", 9),
          ("input10", 10),
          ("input11", 11))
    )


_AsiMatrixSelected_Type.__name__ = "Integer32"
_AsiMatrixSelected_Object = MibScalar
asiMatrixSelected = _AsiMatrixSelected_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 10, 10),
    _AsiMatrixSelected_Type()
)
asiMatrixSelected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    asiMatrixSelected.setStatus("current")


class _Asi1InputLoopStatus_Type(Integer32):
    """Custom type asi1InputLoopStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("ok", 1),
          ("nok", 2))
    )


_Asi1InputLoopStatus_Type.__name__ = "Integer32"
_Asi1InputLoopStatus_Object = MibScalar
asi1InputLoopStatus = _Asi1InputLoopStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 10, 15),
    _Asi1InputLoopStatus_Type()
)
asi1InputLoopStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    asi1InputLoopStatus.setStatus("current")


class _Asi2InputLoopStatus_Type(Integer32):
    """Custom type asi2InputLoopStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("ok", 1),
          ("nok", 2))
    )


_Asi2InputLoopStatus_Type.__name__ = "Integer32"
_Asi2InputLoopStatus_Object = MibScalar
asi2InputLoopStatus = _Asi2InputLoopStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 10, 20),
    _Asi2InputLoopStatus_Type()
)
asi2InputLoopStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    asi2InputLoopStatus.setStatus("current")
_AsiMatrixInputStatusTable_Object = MibTable
asiMatrixInputStatusTable = _AsiMatrixInputStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 10, 25)
)
if mibBuilder.loadTexts:
    asiMatrixInputStatusTable.setStatus("current")
_AsiMatrixInputStatusEntry_Object = MibTableRow
asiMatrixInputStatusEntry = _AsiMatrixInputStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 10, 25, 1)
)
asiMatrixInputStatusEntry.setIndexNames(
    (0, "TREDESS-FS-MIB", "asiMatrixInputStatusIndex"),
)
if mibBuilder.loadTexts:
    asiMatrixInputStatusEntry.setStatus("current")


class _AsiMatrixInputStatusIndex_Type(Unsigned32):
    """Custom type asiMatrixInputStatusIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 11),
    )


_AsiMatrixInputStatusIndex_Type.__name__ = "Unsigned32"
_AsiMatrixInputStatusIndex_Object = MibTableColumn
asiMatrixInputStatusIndex = _AsiMatrixInputStatusIndex_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 10, 25, 1, 1),
    _AsiMatrixInputStatusIndex_Type()
)
asiMatrixInputStatusIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    asiMatrixInputStatusIndex.setStatus("current")


class _Asi1InputStatus_Type(Integer32):
    """Custom type asi1InputStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("ok", 1),
          ("nok", 2))
    )


_Asi1InputStatus_Type.__name__ = "Integer32"
_Asi1InputStatus_Object = MibTableColumn
asi1InputStatus = _Asi1InputStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 10, 25, 1, 2),
    _Asi1InputStatus_Type()
)
asi1InputStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    asi1InputStatus.setStatus("current")


class _Asi2InputStatus_Type(Integer32):
    """Custom type asi2InputStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("ok", 1),
          ("nok", 2))
    )


_Asi2InputStatus_Type.__name__ = "Integer32"
_Asi2InputStatus_Object = MibTableColumn
asi2InputStatus = _Asi2InputStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 10, 25, 1, 3),
    _Asi2InputStatus_Type()
)
asi2InputStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    asi2InputStatus.setStatus("current")
_RedundancyEti_ObjectIdentity = ObjectIdentity
redundancyEti = _RedundancyEti_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 12)
)
_EtiMatrixControlStatus_Type = DisplayString
_EtiMatrixControlStatus_Object = MibScalar
etiMatrixControlStatus = _EtiMatrixControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 12, 3),
    _EtiMatrixControlStatus_Type()
)
etiMatrixControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    etiMatrixControlStatus.setStatus("current")
_EtiMatrixHwStatus_Type = DisplayString
_EtiMatrixHwStatus_Object = MibScalar
etiMatrixHwStatus = _EtiMatrixHwStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 12, 6),
    _EtiMatrixHwStatus_Type()
)
etiMatrixHwStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    etiMatrixHwStatus.setStatus("current")


class _EtiMatrixSelected_Type(Integer32):
    """Custom type etiMatrixSelected based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("input1", 1),
          ("input2", 2),
          ("input3", 3),
          ("input4", 4),
          ("input5", 5),
          ("input6", 6),
          ("input7", 7),
          ("input8", 8),
          ("input9", 9),
          ("input10", 10),
          ("input11", 11))
    )


_EtiMatrixSelected_Type.__name__ = "Integer32"
_EtiMatrixSelected_Object = MibScalar
etiMatrixSelected = _EtiMatrixSelected_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 12, 10),
    _EtiMatrixSelected_Type()
)
etiMatrixSelected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    etiMatrixSelected.setStatus("current")


class _Eti1InputLoopStatus_Type(Integer32):
    """Custom type eti1InputLoopStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("ok", 1),
          ("nok", 2))
    )


_Eti1InputLoopStatus_Type.__name__ = "Integer32"
_Eti1InputLoopStatus_Object = MibScalar
eti1InputLoopStatus = _Eti1InputLoopStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 12, 15),
    _Eti1InputLoopStatus_Type()
)
eti1InputLoopStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eti1InputLoopStatus.setStatus("current")


class _Eti2InputLoopStatus_Type(Integer32):
    """Custom type eti2InputLoopStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("ok", 1),
          ("nok", 2))
    )


_Eti2InputLoopStatus_Type.__name__ = "Integer32"
_Eti2InputLoopStatus_Object = MibScalar
eti2InputLoopStatus = _Eti2InputLoopStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 12, 20),
    _Eti2InputLoopStatus_Type()
)
eti2InputLoopStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eti2InputLoopStatus.setStatus("current")
_EtiMatrixInputStatusTable_Object = MibTable
etiMatrixInputStatusTable = _EtiMatrixInputStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 12, 25)
)
if mibBuilder.loadTexts:
    etiMatrixInputStatusTable.setStatus("current")
_EtiMatrixInputStatusEntry_Object = MibTableRow
etiMatrixInputStatusEntry = _EtiMatrixInputStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 12, 25, 1)
)
etiMatrixInputStatusEntry.setIndexNames(
    (0, "TREDESS-FS-MIB", "etiMatrixInputStatusIndex"),
)
if mibBuilder.loadTexts:
    etiMatrixInputStatusEntry.setStatus("current")


class _EtiMatrixInputStatusIndex_Type(Unsigned32):
    """Custom type etiMatrixInputStatusIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 11),
    )


_EtiMatrixInputStatusIndex_Type.__name__ = "Unsigned32"
_EtiMatrixInputStatusIndex_Object = MibTableColumn
etiMatrixInputStatusIndex = _EtiMatrixInputStatusIndex_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 12, 25, 1, 1),
    _EtiMatrixInputStatusIndex_Type()
)
etiMatrixInputStatusIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    etiMatrixInputStatusIndex.setStatus("current")


class _Eti1InputStatus_Type(Integer32):
    """Custom type eti1InputStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("ok", 1),
          ("nok", 2))
    )


_Eti1InputStatus_Type.__name__ = "Integer32"
_Eti1InputStatus_Object = MibTableColumn
eti1InputStatus = _Eti1InputStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 12, 25, 1, 2),
    _Eti1InputStatus_Type()
)
eti1InputStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eti1InputStatus.setStatus("current")


class _Eti2InputStatus_Type(Integer32):
    """Custom type eti2InputStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("null", 0),
          ("ok", 1),
          ("nok", 2))
    )


_Eti2InputStatus_Type.__name__ = "Integer32"
_Eti2InputStatus_Object = MibTableColumn
eti2InputStatus = _Eti2InputStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 2, 5, 12, 25, 1, 3),
    _Eti2InputStatus_Type()
)
eti2InputStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eti2InputStatus.setStatus("current")
_Status_ObjectIdentity = ObjectIdentity
status = _Status_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3)
)
_FaultSummationStatus_Type = AlarmStatus
_FaultSummationStatus_Object = MibScalar
faultSummationStatus = _FaultSummationStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 1),
    _FaultSummationStatus_Type()
)
faultSummationStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    faultSummationStatus.setStatus("current")
_WarningSummationStatus_Type = AlarmStatus
_WarningSummationStatus_Object = MibScalar
warningSummationStatus = _WarningSummationStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 2),
    _WarningSummationStatus_Type()
)
warningSummationStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    warningSummationStatus.setStatus("current")
_StatusAmplifier_ObjectIdentity = ObjectIdentity
statusAmplifier = _StatusAmplifier_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 3)
)
_AmplifierStatus_Type = AlarmStatus
_AmplifierStatus_Object = MibScalar
amplifierStatus = _AmplifierStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 3, 1),
    _AmplifierStatus_Type()
)
amplifierStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amplifierStatus.setStatus("current")
_ExceededOutputPower_Type = AlarmStatus
_ExceededOutputPower_Object = MibScalar
exceededOutputPower = _ExceededOutputPower_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 3, 2),
    _ExceededOutputPower_Type()
)
exceededOutputPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    exceededOutputPower.setStatus("current")
_DecreasedOutputPower_Type = AlarmStatus
_DecreasedOutputPower_Object = MibScalar
decreasedOutputPower = _DecreasedOutputPower_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 3, 3),
    _DecreasedOutputPower_Type()
)
decreasedOutputPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    decreasedOutputPower.setStatus("current")
_ReflectPowerStatus_Type = AlarmStatus
_ReflectPowerStatus_Object = MibScalar
reflectPowerStatus = _ReflectPowerStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 3, 4),
    _ReflectPowerStatus_Type()
)
reflectPowerStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    reflectPowerStatus.setStatus("current")
_TemperatureAmplifierStatus_Type = AlarmStatus
_TemperatureAmplifierStatus_Object = MibScalar
temperatureAmplifierStatus = _TemperatureAmplifierStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 3, 5),
    _TemperatureAmplifierStatus_Type()
)
temperatureAmplifierStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureAmplifierStatus.setStatus("current")
_DecreasedOutputPowerNonCritical_Type = AlarmStatus
_DecreasedOutputPowerNonCritical_Object = MibScalar
decreasedOutputPowerNonCritical = _DecreasedOutputPowerNonCritical_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 3, 6),
    _DecreasedOutputPowerNonCritical_Type()
)
decreasedOutputPowerNonCritical.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    decreasedOutputPowerNonCritical.setStatus("current")
_StatusAsiInput_ObjectIdentity = ObjectIdentity
statusAsiInput = _StatusAsiInput_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 4)
)
_AsiInputStatus_Type = AlarmStatus
_AsiInputStatus_Object = MibScalar
asiInputStatus = _AsiInputStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 4, 1),
    _AsiInputStatus_Type()
)
asiInputStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    asiInputStatus.setStatus("current")
_Asi1ErrorStatus_Type = AlarmStatus
_Asi1ErrorStatus_Object = MibScalar
asi1ErrorStatus = _Asi1ErrorStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 4, 2),
    _Asi1ErrorStatus_Type()
)
asi1ErrorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    asi1ErrorStatus.setStatus("current")
_Asi2ErrorStatus_Type = AlarmStatus
_Asi2ErrorStatus_Object = MibScalar
asi2ErrorStatus = _Asi2ErrorStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 4, 3),
    _Asi2ErrorStatus_Type()
)
asi2ErrorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    asi2ErrorStatus.setStatus("current")
_StatusIpInput_ObjectIdentity = ObjectIdentity
statusIpInput = _StatusIpInput_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 5)
)
_IpInputStatus_Type = AlarmStatus
_IpInputStatus_Object = MibScalar
ipInputStatus = _IpInputStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 5, 1),
    _IpInputStatus_Type()
)
ipInputStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInputStatus.setStatus("current")
_IpSocket1ErrorStatus_Type = AlarmStatus
_IpSocket1ErrorStatus_Object = MibScalar
ipSocket1ErrorStatus = _IpSocket1ErrorStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 5, 2),
    _IpSocket1ErrorStatus_Type()
)
ipSocket1ErrorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipSocket1ErrorStatus.setStatus("current")
_IpSocket2ErrorStatus_Type = AlarmStatus
_IpSocket2ErrorStatus_Object = MibScalar
ipSocket2ErrorStatus = _IpSocket2ErrorStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 5, 3),
    _IpSocket2ErrorStatus_Type()
)
ipSocket2ErrorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipSocket2ErrorStatus.setStatus("current")
_StatusSatelliteReceiver1_ObjectIdentity = ObjectIdentity
statusSatelliteReceiver1 = _StatusSatelliteReceiver1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 6)
)
_SatReceiver1Status_Type = AlarmStatus
_SatReceiver1Status_Object = MibScalar
satReceiver1Status = _SatReceiver1Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 6, 1),
    _SatReceiver1Status_Type()
)
satReceiver1Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    satReceiver1Status.setStatus("current")
_UnlockSatReceiver1Status_Type = AlarmStatus
_UnlockSatReceiver1Status_Object = MibScalar
unlockSatReceiver1Status = _UnlockSatReceiver1Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 6, 2),
    _UnlockSatReceiver1Status_Type()
)
unlockSatReceiver1Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    unlockSatReceiver1Status.setStatus("current")
_RfSignalSatReceiver1Status_Type = AlarmStatus
_RfSignalSatReceiver1Status_Object = MibScalar
rfSignalSatReceiver1Status = _RfSignalSatReceiver1Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 6, 3),
    _RfSignalSatReceiver1Status_Type()
)
rfSignalSatReceiver1Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rfSignalSatReceiver1Status.setStatus("current")
_LnbOverloadSatReceiver1Status_Type = AlarmStatus
_LnbOverloadSatReceiver1Status_Object = MibScalar
lnbOverloadSatReceiver1Status = _LnbOverloadSatReceiver1Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 6, 4),
    _LnbOverloadSatReceiver1Status_Type()
)
lnbOverloadSatReceiver1Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lnbOverloadSatReceiver1Status.setStatus("current")
_TemperatureSatReceiver1Status_Type = AlarmStatus
_TemperatureSatReceiver1Status_Object = MibScalar
temperatureSatReceiver1Status = _TemperatureSatReceiver1Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 6, 5),
    _TemperatureSatReceiver1Status_Type()
)
temperatureSatReceiver1Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSatReceiver1Status.setStatus("current")
_CamSatReceiver1Status_Type = AlarmStatus
_CamSatReceiver1Status_Object = MibScalar
camSatReceiver1Status = _CamSatReceiver1Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 6, 6),
    _CamSatReceiver1Status_Type()
)
camSatReceiver1Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    camSatReceiver1Status.setStatus("current")
_SmartCardSatReceiver1Status_Type = AlarmStatus
_SmartCardSatReceiver1Status_Object = MibScalar
smartCardSatReceiver1Status = _SmartCardSatReceiver1Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 6, 7),
    _SmartCardSatReceiver1Status_Type()
)
smartCardSatReceiver1Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smartCardSatReceiver1Status.setStatus("current")
_SmartCardRightsSatReceiver1Stat_Type = AlarmStatus
_SmartCardRightsSatReceiver1Stat_Object = MibScalar
smartCardRightsSatReceiver1Stat = _SmartCardRightsSatReceiver1Stat_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 6, 8),
    _SmartCardRightsSatReceiver1Stat_Type()
)
smartCardRightsSatReceiver1Stat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    smartCardRightsSatReceiver1Stat.setStatus("current")
_AsiOutputSatReceiver1Status_Type = AlarmStatus
_AsiOutputSatReceiver1Status_Object = MibScalar
asiOutputSatReceiver1Status = _AsiOutputSatReceiver1Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 6, 9),
    _AsiOutputSatReceiver1Status_Type()
)
asiOutputSatReceiver1Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    asiOutputSatReceiver1Status.setStatus("current")
_StatusSatelliteReceiver2_ObjectIdentity = ObjectIdentity
statusSatelliteReceiver2 = _StatusSatelliteReceiver2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 7)
)
_SatReceiver2Status_Type = AlarmStatus
_SatReceiver2Status_Object = MibScalar
satReceiver2Status = _SatReceiver2Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 7, 1),
    _SatReceiver2Status_Type()
)
satReceiver2Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    satReceiver2Status.setStatus("current")
_UnlockSatReceiver2Status_Type = AlarmStatus
_UnlockSatReceiver2Status_Object = MibScalar
unlockSatReceiver2Status = _UnlockSatReceiver2Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 7, 2),
    _UnlockSatReceiver2Status_Type()
)
unlockSatReceiver2Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    unlockSatReceiver2Status.setStatus("current")
_RfSignalSatReceiver2Status_Type = AlarmStatus
_RfSignalSatReceiver2Status_Object = MibScalar
rfSignalSatReceiver2Status = _RfSignalSatReceiver2Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 7, 3),
    _RfSignalSatReceiver2Status_Type()
)
rfSignalSatReceiver2Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rfSignalSatReceiver2Status.setStatus("current")
_LnbOverloadSatReceiver2Status_Type = AlarmStatus
_LnbOverloadSatReceiver2Status_Object = MibScalar
lnbOverloadSatReceiver2Status = _LnbOverloadSatReceiver2Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 7, 4),
    _LnbOverloadSatReceiver2Status_Type()
)
lnbOverloadSatReceiver2Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lnbOverloadSatReceiver2Status.setStatus("current")
_TemperatureSatReceiver2Status_Type = AlarmStatus
_TemperatureSatReceiver2Status_Object = MibScalar
temperatureSatReceiver2Status = _TemperatureSatReceiver2Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 7, 5),
    _TemperatureSatReceiver2Status_Type()
)
temperatureSatReceiver2Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSatReceiver2Status.setStatus("current")
_StatusTerrestialReceiver1_ObjectIdentity = ObjectIdentity
statusTerrestialReceiver1 = _StatusTerrestialReceiver1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 8)
)
_DttReceiver1AlarmStatus_Type = AlarmStatus
_DttReceiver1AlarmStatus_Object = MibScalar
dttReceiver1AlarmStatus = _DttReceiver1AlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 8, 1),
    _DttReceiver1AlarmStatus_Type()
)
dttReceiver1AlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttReceiver1AlarmStatus.setStatus("current")
_UnlockDttReceiver1Status_Type = AlarmStatus
_UnlockDttReceiver1Status_Object = MibScalar
unlockDttReceiver1Status = _UnlockDttReceiver1Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 8, 2),
    _UnlockDttReceiver1Status_Type()
)
unlockDttReceiver1Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    unlockDttReceiver1Status.setStatus("current")
_RfSignalDttReceiver1Status_Type = AlarmStatus
_RfSignalDttReceiver1Status_Object = MibScalar
rfSignalDttReceiver1Status = _RfSignalDttReceiver1Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 8, 3),
    _RfSignalDttReceiver1Status_Type()
)
rfSignalDttReceiver1Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rfSignalDttReceiver1Status.setStatus("current")
_TemperatureDttReceiver1Status_Type = AlarmStatus
_TemperatureDttReceiver1Status_Object = MibScalar
temperatureDttReceiver1Status = _TemperatureDttReceiver1Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 8, 4),
    _TemperatureDttReceiver1Status_Type()
)
temperatureDttReceiver1Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureDttReceiver1Status.setStatus("current")
_StatusTerrestialReceiver2_ObjectIdentity = ObjectIdentity
statusTerrestialReceiver2 = _StatusTerrestialReceiver2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 9)
)
_DttReceiver2AlarmStatus_Type = AlarmStatus
_DttReceiver2AlarmStatus_Object = MibScalar
dttReceiver2AlarmStatus = _DttReceiver2AlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 9, 1),
    _DttReceiver2AlarmStatus_Type()
)
dttReceiver2AlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dttReceiver2AlarmStatus.setStatus("current")
_UnlockDttReceiver2Status_Type = AlarmStatus
_UnlockDttReceiver2Status_Object = MibScalar
unlockDttReceiver2Status = _UnlockDttReceiver2Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 9, 2),
    _UnlockDttReceiver2Status_Type()
)
unlockDttReceiver2Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    unlockDttReceiver2Status.setStatus("current")
_RfSignalDttReceiver2Status_Type = AlarmStatus
_RfSignalDttReceiver2Status_Object = MibScalar
rfSignalDttReceiver2Status = _RfSignalDttReceiver2Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 9, 3),
    _RfSignalDttReceiver2Status_Type()
)
rfSignalDttReceiver2Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rfSignalDttReceiver2Status.setStatus("current")
_TemperatureDttReceiver2Status_Type = AlarmStatus
_TemperatureDttReceiver2Status_Object = MibScalar
temperatureDttReceiver2Status = _TemperatureDttReceiver2Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 9, 4),
    _TemperatureDttReceiver2Status_Type()
)
temperatureDttReceiver2Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureDttReceiver2Status.setStatus("current")
_StatusModulator_ObjectIdentity = ObjectIdentity
statusModulator = _StatusModulator_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 10)
)
_ModulatorStatus_Type = AlarmStatus
_ModulatorStatus_Object = MibScalar
modulatorStatus = _ModulatorStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 10, 1),
    _ModulatorStatus_Type()
)
modulatorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    modulatorStatus.setStatus("current")
_TsErrorStatus_Type = AlarmStatus
_TsErrorStatus_Object = MibScalar
tsErrorStatus = _TsErrorStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 10, 2),
    _TsErrorStatus_Type()
)
tsErrorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tsErrorStatus.setStatus("current")
_MipErrorStatus_Type = AlarmStatus
_MipErrorStatus_Object = MibScalar
mipErrorStatus = _MipErrorStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 10, 3),
    _MipErrorStatus_Type()
)
mipErrorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mipErrorStatus.setStatus("current")
_MpegOverflowStatus_Type = AlarmStatus
_MpegOverflowStatus_Object = MibScalar
mpegOverflowStatus = _MpegOverflowStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 10, 4),
    _MpegOverflowStatus_Type()
)
mpegOverflowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mpegOverflowStatus.setStatus("current")
_T2miErrorStatus_Type = AlarmStatus
_T2miErrorStatus_Object = MibScalar
t2miErrorStatus = _T2miErrorStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 10, 5),
    _T2miErrorStatus_Type()
)
t2miErrorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    t2miErrorStatus.setStatus("current")
_BtsErrorStatus_Type = AlarmStatus
_BtsErrorStatus_Object = MibScalar
btsErrorStatus = _BtsErrorStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 10, 6),
    _BtsErrorStatus_Type()
)
btsErrorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    btsErrorStatus.setStatus("current")
_SfnErrorStatus_Type = AlarmStatus
_SfnErrorStatus_Object = MibScalar
sfnErrorStatus = _SfnErrorStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 10, 7),
    _SfnErrorStatus_Type()
)
sfnErrorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sfnErrorStatus.setStatus("current")
_SfnMargin_Type = AlarmStatus
_SfnMargin_Object = MibScalar
sfnMargin = _SfnMargin_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 10, 8),
    _SfnMargin_Type()
)
sfnMargin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sfnMargin.setStatus("current")
_TemperatureModulatorStatus_Type = AlarmStatus
_TemperatureModulatorStatus_Object = MibScalar
temperatureModulatorStatus = _TemperatureModulatorStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 10, 9),
    _TemperatureModulatorStatus_Type()
)
temperatureModulatorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureModulatorStatus.setStatus("current")
_ModulatorOutputStatus_Type = AlarmStatus
_ModulatorOutputStatus_Object = MibScalar
modulatorOutputStatus = _ModulatorOutputStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 10, 10),
    _ModulatorOutputStatus_Type()
)
modulatorOutputStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    modulatorOutputStatus.setStatus("current")
_ModulatorShouldersStatus_Type = AlarmStatus
_ModulatorShouldersStatus_Object = MibScalar
modulatorShouldersStatus = _ModulatorShouldersStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 10, 11),
    _ModulatorShouldersStatus_Type()
)
modulatorShouldersStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    modulatorShouldersStatus.setStatus("current")
_ModulatorMerStatus_Type = AlarmStatus
_ModulatorMerStatus_Object = MibScalar
modulatorMerStatus = _ModulatorMerStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 10, 12),
    _ModulatorMerStatus_Type()
)
modulatorMerStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    modulatorMerStatus.setStatus("current")
_ModulatorExternalFeedbackStatus_Type = AlarmStatus
_ModulatorExternalFeedbackStatus_Object = MibScalar
modulatorExternalFeedbackStatus = _ModulatorExternalFeedbackStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 10, 13),
    _ModulatorExternalFeedbackStatus_Type()
)
modulatorExternalFeedbackStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    modulatorExternalFeedbackStatus.setStatus("current")
_ModulatorBerStatus_Type = AlarmStatus
_ModulatorBerStatus_Object = MibScalar
modulatorBerStatus = _ModulatorBerStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 10, 14),
    _ModulatorBerStatus_Type()
)
modulatorBerStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    modulatorBerStatus.setStatus("current")
_InputDabErrorStatus_Type = AlarmStatus
_InputDabErrorStatus_Object = MibScalar
inputDabErrorStatus = _InputDabErrorStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 10, 15),
    _InputDabErrorStatus_Type()
)
inputDabErrorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    inputDabErrorStatus.setStatus("current")
_StatusRfInput_ObjectIdentity = ObjectIdentity
statusRfInput = _StatusRfInput_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 11)
)
_RfInputStatus_Type = AlarmStatus
_RfInputStatus_Object = MibScalar
rfInputStatus = _RfInputStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 11, 1),
    _RfInputStatus_Type()
)
rfInputStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rfInputStatus.setStatus("current")
_StatusEchoCanceller_ObjectIdentity = ObjectIdentity
statusEchoCanceller = _StatusEchoCanceller_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 12)
)
_EchoCancellerStatus_Type = AlarmStatus
_EchoCancellerStatus_Object = MibScalar
echoCancellerStatus = _EchoCancellerStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 12, 1),
    _EchoCancellerStatus_Type()
)
echoCancellerStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    echoCancellerStatus.setStatus("current")
_InputLevelStatus_Type = AlarmStatus
_InputLevelStatus_Object = MibScalar
inputLevelStatus = _InputLevelStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 12, 2),
    _InputLevelStatus_Type()
)
inputLevelStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    inputLevelStatus.setStatus("current")
_Reference10MHzStatus_Type = AlarmStatus
_Reference10MHzStatus_Object = MibScalar
reference10MHzStatus = _Reference10MHzStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 12, 3),
    _Reference10MHzStatus_Type()
)
reference10MHzStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    reference10MHzStatus.setStatus("current")
_TemperatureECStatus_Type = AlarmStatus
_TemperatureECStatus_Object = MibScalar
temperatureECStatus = _TemperatureECStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 12, 4),
    _TemperatureECStatus_Type()
)
temperatureECStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureECStatus.setStatus("current")
_OutputLevelStatus_Type = AlarmStatus
_OutputLevelStatus_Object = MibScalar
outputLevelStatus = _OutputLevelStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 12, 5),
    _OutputLevelStatus_Type()
)
outputLevelStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    outputLevelStatus.setStatus("current")
_CancellerShouldersStatus_Type = AlarmStatus
_CancellerShouldersStatus_Object = MibScalar
cancellerShouldersStatus = _CancellerShouldersStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 12, 6),
    _CancellerShouldersStatus_Type()
)
cancellerShouldersStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cancellerShouldersStatus.setStatus("current")
_CancellerMerStatus_Type = AlarmStatus
_CancellerMerStatus_Object = MibScalar
cancellerMerStatus = _CancellerMerStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 12, 7),
    _CancellerMerStatus_Type()
)
cancellerMerStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cancellerMerStatus.setStatus("current")
_GainMarginStatus_Type = AlarmStatus
_GainMarginStatus_Object = MibScalar
gainMarginStatus = _GainMarginStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 12, 8),
    _GainMarginStatus_Type()
)
gainMarginStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    gainMarginStatus.setStatus("current")
_CancExternalFeedbackStatus_Type = AlarmStatus
_CancExternalFeedbackStatus_Object = MibScalar
cancExternalFeedbackStatus = _CancExternalFeedbackStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 12, 9),
    _CancExternalFeedbackStatus_Type()
)
cancExternalFeedbackStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cancExternalFeedbackStatus.setStatus("current")
_StatusEtiInput_ObjectIdentity = ObjectIdentity
statusEtiInput = _StatusEtiInput_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 14)
)
_EtiInputStatus_Type = AlarmStatus
_EtiInputStatus_Object = MibScalar
etiInputStatus = _EtiInputStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 14, 1),
    _EtiInputStatus_Type()
)
etiInputStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    etiInputStatus.setStatus("current")
_Eti1ErrorStatus_Type = AlarmStatus
_Eti1ErrorStatus_Object = MibScalar
eti1ErrorStatus = _Eti1ErrorStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 14, 2),
    _Eti1ErrorStatus_Type()
)
eti1ErrorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eti1ErrorStatus.setStatus("current")
_Eti2ErrorStatus_Type = AlarmStatus
_Eti2ErrorStatus_Object = MibScalar
eti2ErrorStatus = _Eti2ErrorStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 14, 3),
    _Eti2ErrorStatus_Type()
)
eti2ErrorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eti2ErrorStatus.setStatus("current")
_StatusRfOutput_ObjectIdentity = ObjectIdentity
statusRfOutput = _StatusRfOutput_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 15)
)
_RfOutputStatus_Type = AlarmStatus
_RfOutputStatus_Object = MibScalar
rfOutputStatus = _RfOutputStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 15, 1),
    _RfOutputStatus_Type()
)
rfOutputStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rfOutputStatus.setStatus("current")
_SynchronizationModule_ObjectIdentity = ObjectIdentity
synchronizationModule = _SynchronizationModule_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 17)
)
_SynchronizationModuleStatus_Type = AlarmStatus
_SynchronizationModuleStatus_Object = MibScalar
synchronizationModuleStatus = _SynchronizationModuleStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 17, 1),
    _SynchronizationModuleStatus_Type()
)
synchronizationModuleStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    synchronizationModuleStatus.setStatus("current")
_SynchronizationAntennaStatus_Type = AlarmStatus
_SynchronizationAntennaStatus_Object = MibScalar
synchronizationAntennaStatus = _SynchronizationAntennaStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 17, 2),
    _SynchronizationAntennaStatus_Type()
)
synchronizationAntennaStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    synchronizationAntennaStatus.setStatus("current")
_SynchronizationUnlockStatus_Type = AlarmStatus
_SynchronizationUnlockStatus_Object = MibScalar
synchronizationUnlockStatus = _SynchronizationUnlockStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 17, 3),
    _SynchronizationUnlockStatus_Type()
)
synchronizationUnlockStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    synchronizationUnlockStatus.setStatus("current")
_SynchronizationHoldoverStatus_Type = AlarmStatus
_SynchronizationHoldoverStatus_Object = MibScalar
synchronizationHoldoverStatus = _SynchronizationHoldoverStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 17, 4),
    _SynchronizationHoldoverStatus_Type()
)
synchronizationHoldoverStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    synchronizationHoldoverStatus.setStatus("current")
_SynchronizationHwErrorStatus_Type = AlarmStatus
_SynchronizationHwErrorStatus_Object = MibScalar
synchronizationHwErrorStatus = _SynchronizationHwErrorStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 17, 5),
    _SynchronizationHwErrorStatus_Type()
)
synchronizationHwErrorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    synchronizationHwErrorStatus.setStatus("current")
_TemperatureSynchronizationStatus_Type = AlarmStatus
_TemperatureSynchronizationStatus_Object = MibScalar
temperatureSynchronizationStatus = _TemperatureSynchronizationStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 17, 6),
    _TemperatureSynchronizationStatus_Type()
)
temperatureSynchronizationStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    temperatureSynchronizationStatus.setStatus("current")
_Input10MhzStatus_Type = AlarmStatus
_Input10MhzStatus_Object = MibScalar
input10MhzStatus = _Input10MhzStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 17, 7),
    _Input10MhzStatus_Type()
)
input10MhzStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    input10MhzStatus.setStatus("current")
_Input1ppsStatus_Type = AlarmStatus
_Input1ppsStatus_Object = MibScalar
input1ppsStatus = _Input1ppsStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 17, 8),
    _Input1ppsStatus_Type()
)
input1ppsStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    input1ppsStatus.setStatus("current")
_RackCoolingBoards_ObjectIdentity = ObjectIdentity
rackCoolingBoards = _RackCoolingBoards_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 18)
)
_RackCoolingStatus_Type = AlarmStatus
_RackCoolingStatus_Object = MibScalar
rackCoolingStatus = _RackCoolingStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 18, 1),
    _RackCoolingStatus_Type()
)
rackCoolingStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rackCoolingStatus.setStatus("current")
_RackCoolingTemperatureStatus_Type = AlarmStatus
_RackCoolingTemperatureStatus_Object = MibScalar
rackCoolingTemperatureStatus = _RackCoolingTemperatureStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 18, 2),
    _RackCoolingTemperatureStatus_Type()
)
rackCoolingTemperatureStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rackCoolingTemperatureStatus.setStatus("current")
_PressureDifferenceStatus_Type = AlarmStatus
_PressureDifferenceStatus_Object = MibScalar
pressureDifferenceStatus = _PressureDifferenceStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 18, 3),
    _PressureDifferenceStatus_Type()
)
pressureDifferenceStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pressureDifferenceStatus.setStatus("current")
_RackCoolingHwErrorStatus_Type = AlarmStatus
_RackCoolingHwErrorStatus_Object = MibScalar
rackCoolingHwErrorStatus = _RackCoolingHwErrorStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 18, 4),
    _RackCoolingHwErrorStatus_Type()
)
rackCoolingHwErrorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rackCoolingHwErrorStatus.setStatus("current")
_StatusHwError_ObjectIdentity = ObjectIdentity
statusHwError = _StatusHwError_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 19)
)
_HwErrorStatus_Type = AlarmStatus
_HwErrorStatus_Object = MibScalar
hwErrorStatus = _HwErrorStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 19, 1),
    _HwErrorStatus_Type()
)
hwErrorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hwErrorStatus.setStatus("current")
_LdmosTransistorsStatus_Type = AlarmStatus
_LdmosTransistorsStatus_Object = MibScalar
ldmosTransistorsStatus = _LdmosTransistorsStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 19, 2),
    _LdmosTransistorsStatus_Type()
)
ldmosTransistorsStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ldmosTransistorsStatus.setStatus("current")
_InternalErrorStatus_Type = AlarmStatus
_InternalErrorStatus_Object = MibScalar
internalErrorStatus = _InternalErrorStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 19, 3),
    _InternalErrorStatus_Type()
)
internalErrorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    internalErrorStatus.setStatus("current")
_LocalOscillatorStatus_Type = AlarmStatus
_LocalOscillatorStatus_Object = MibScalar
localOscillatorStatus = _LocalOscillatorStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 19, 4),
    _LocalOscillatorStatus_Type()
)
localOscillatorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    localOscillatorStatus.setStatus("current")
_InternalDcSupplyVoltageStatus_Type = AlarmStatus
_InternalDcSupplyVoltageStatus_Object = MibScalar
internalDcSupplyVoltageStatus = _InternalDcSupplyVoltageStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 19, 5),
    _InternalDcSupplyVoltageStatus_Type()
)
internalDcSupplyVoltageStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    internalDcSupplyVoltageStatus.setStatus("current")
_NonLinearSenseFeedback_Type = AlarmStatus
_NonLinearSenseFeedback_Object = MibScalar
nonLinearSenseFeedback = _NonLinearSenseFeedback_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 19, 6),
    _NonLinearSenseFeedback_Type()
)
nonLinearSenseFeedback.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nonLinearSenseFeedback.setStatus("current")
_AmplifierOutputSample_Type = AlarmStatus
_AmplifierOutputSample_Object = MibScalar
amplifierOutputSample = _AmplifierOutputSample_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 19, 7),
    _AmplifierOutputSample_Type()
)
amplifierOutputSample.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amplifierOutputSample.setStatus("current")
_StatusFan_ObjectIdentity = ObjectIdentity
statusFan = _StatusFan_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 20)
)
_FanStatus_Type = AlarmStatus
_FanStatus_Object = MibScalar
fanStatus = _FanStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 20, 1),
    _FanStatus_Type()
)
fanStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fanStatus.setStatus("current")
_Fan1Status_Type = AlarmStatus
_Fan1Status_Object = MibScalar
fan1Status = _Fan1Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 20, 2),
    _Fan1Status_Type()
)
fan1Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fan1Status.setStatus("current")
_Fan2Status_Type = AlarmStatus
_Fan2Status_Object = MibScalar
fan2Status = _Fan2Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 20, 3),
    _Fan2Status_Type()
)
fan2Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fan2Status.setStatus("current")
_Fan3Status_Type = AlarmStatus
_Fan3Status_Object = MibScalar
fan3Status = _Fan3Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 20, 4),
    _Fan3Status_Type()
)
fan3Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fan3Status.setStatus("current")
_StatusExternal_ObjectIdentity = ObjectIdentity
statusExternal = _StatusExternal_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 21)
)
_ExternalStatus_Type = AlarmStatus
_ExternalStatus_Object = MibScalar
externalStatus = _ExternalStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 21, 1),
    _ExternalStatus_Type()
)
externalStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    externalStatus.setStatus("current")
_External1Status_Type = AlarmStatus
_External1Status_Object = MibScalar
external1Status = _External1Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 21, 2),
    _External1Status_Type()
)
external1Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    external1Status.setStatus("current")
_External2Status_Type = AlarmStatus
_External2Status_Object = MibScalar
external2Status = _External2Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 21, 3),
    _External2Status_Type()
)
external2Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    external2Status.setStatus("current")
_StatusPowerSupply_ObjectIdentity = ObjectIdentity
statusPowerSupply = _StatusPowerSupply_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 22)
)
_AcPowerSupplyStatus_Type = AlarmStatus
_AcPowerSupplyStatus_Object = MibScalar
acPowerSupplyStatus = _AcPowerSupplyStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 22, 1),
    _AcPowerSupplyStatus_Type()
)
acPowerSupplyStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acPowerSupplyStatus.setStatus("current")
_AcPsuAStatus_Type = AlarmStatus
_AcPsuAStatus_Object = MibScalar
acPsuAStatus = _AcPsuAStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 22, 2),
    _AcPsuAStatus_Type()
)
acPsuAStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acPsuAStatus.setStatus("current")
_AcPsuBStatus_Type = AlarmStatus
_AcPsuBStatus_Object = MibScalar
acPsuBStatus = _AcPsuBStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 22, 3),
    _AcPsuBStatus_Type()
)
acPsuBStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acPsuBStatus.setStatus("current")
_StatusAmplifierStage1_ObjectIdentity = ObjectIdentity
statusAmplifierStage1 = _StatusAmplifierStage1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 23)
)
_AmplifierStage1Status_Type = AlarmStatus
_AmplifierStage1Status_Object = MibScalar
amplifierStage1Status = _AmplifierStage1Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 23, 1),
    _AmplifierStage1Status_Type()
)
amplifierStage1Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amplifierStage1Status.setStatus("current")
_AS1InputLevelStatus_Type = AlarmStatus
_AS1InputLevelStatus_Object = MibScalar
aS1InputLevelStatus = _AS1InputLevelStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 23, 2),
    _AS1InputLevelStatus_Type()
)
aS1InputLevelStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aS1InputLevelStatus.setStatus("current")
_AS1ExceededPowerStatus_Type = AlarmStatus
_AS1ExceededPowerStatus_Object = MibScalar
aS1ExceededPowerStatus = _AS1ExceededPowerStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 23, 3),
    _AS1ExceededPowerStatus_Type()
)
aS1ExceededPowerStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aS1ExceededPowerStatus.setStatus("current")
_AS1DecreasedPowerStatus_Type = AlarmStatus
_AS1DecreasedPowerStatus_Object = MibScalar
aS1DecreasedPowerStatus = _AS1DecreasedPowerStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 23, 4),
    _AS1DecreasedPowerStatus_Type()
)
aS1DecreasedPowerStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aS1DecreasedPowerStatus.setStatus("current")
_AS1ReflectedPowerStatus_Type = AlarmStatus
_AS1ReflectedPowerStatus_Object = MibScalar
aS1ReflectedPowerStatus = _AS1ReflectedPowerStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 23, 5),
    _AS1ReflectedPowerStatus_Type()
)
aS1ReflectedPowerStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aS1ReflectedPowerStatus.setStatus("current")
_AS1TemperatureStatus_Type = AlarmStatus
_AS1TemperatureStatus_Object = MibScalar
aS1TemperatureStatus = _AS1TemperatureStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 23, 6),
    _AS1TemperatureStatus_Type()
)
aS1TemperatureStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aS1TemperatureStatus.setStatus("current")
_AS1HwErrorStatus_Type = AlarmStatus
_AS1HwErrorStatus_Object = MibScalar
aS1HwErrorStatus = _AS1HwErrorStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 23, 7),
    _AS1HwErrorStatus_Type()
)
aS1HwErrorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aS1HwErrorStatus.setStatus("current")
_AS1PsusErrorStatus_Type = AlarmStatus
_AS1PsusErrorStatus_Object = MibScalar
aS1PsusErrorStatus = _AS1PsusErrorStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 23, 8),
    _AS1PsusErrorStatus_Type()
)
aS1PsusErrorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aS1PsusErrorStatus.setStatus("current")
_StatusAmplifierStage2_ObjectIdentity = ObjectIdentity
statusAmplifierStage2 = _StatusAmplifierStage2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 24)
)
_AmplifierStage2Status_Type = AlarmStatus
_AmplifierStage2Status_Object = MibScalar
amplifierStage2Status = _AmplifierStage2Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 24, 1),
    _AmplifierStage2Status_Type()
)
amplifierStage2Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amplifierStage2Status.setStatus("current")
_AS2InputLevelStatus_Type = AlarmStatus
_AS2InputLevelStatus_Object = MibScalar
aS2InputLevelStatus = _AS2InputLevelStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 24, 2),
    _AS2InputLevelStatus_Type()
)
aS2InputLevelStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aS2InputLevelStatus.setStatus("current")
_AS2ExceededPowerStatus_Type = AlarmStatus
_AS2ExceededPowerStatus_Object = MibScalar
aS2ExceededPowerStatus = _AS2ExceededPowerStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 24, 3),
    _AS2ExceededPowerStatus_Type()
)
aS2ExceededPowerStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aS2ExceededPowerStatus.setStatus("current")
_AS2DecreasedPowerStatus_Type = AlarmStatus
_AS2DecreasedPowerStatus_Object = MibScalar
aS2DecreasedPowerStatus = _AS2DecreasedPowerStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 24, 4),
    _AS2DecreasedPowerStatus_Type()
)
aS2DecreasedPowerStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aS2DecreasedPowerStatus.setStatus("current")
_AS2ReflectedPowerStatus_Type = AlarmStatus
_AS2ReflectedPowerStatus_Object = MibScalar
aS2ReflectedPowerStatus = _AS2ReflectedPowerStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 24, 5),
    _AS2ReflectedPowerStatus_Type()
)
aS2ReflectedPowerStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aS2ReflectedPowerStatus.setStatus("current")
_AS2TemperatureStatus_Type = AlarmStatus
_AS2TemperatureStatus_Object = MibScalar
aS2TemperatureStatus = _AS2TemperatureStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 24, 6),
    _AS2TemperatureStatus_Type()
)
aS2TemperatureStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aS2TemperatureStatus.setStatus("current")
_AS2HwErrorStatus_Type = AlarmStatus
_AS2HwErrorStatus_Object = MibScalar
aS2HwErrorStatus = _AS2HwErrorStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 24, 7),
    _AS2HwErrorStatus_Type()
)
aS2HwErrorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aS2HwErrorStatus.setStatus("current")
_AS2PsusErrorStatus_Type = AlarmStatus
_AS2PsusErrorStatus_Object = MibScalar
aS2PsusErrorStatus = _AS2PsusErrorStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 24, 8),
    _AS2PsusErrorStatus_Type()
)
aS2PsusErrorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aS2PsusErrorStatus.setStatus("current")
_StatusAmplifierStage3_ObjectIdentity = ObjectIdentity
statusAmplifierStage3 = _StatusAmplifierStage3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 25)
)
_AmplifierStage3Status_Type = AlarmStatus
_AmplifierStage3Status_Object = MibScalar
amplifierStage3Status = _AmplifierStage3Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 25, 1),
    _AmplifierStage3Status_Type()
)
amplifierStage3Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amplifierStage3Status.setStatus("current")
_AS3InputLevelStatus_Type = AlarmStatus
_AS3InputLevelStatus_Object = MibScalar
aS3InputLevelStatus = _AS3InputLevelStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 25, 2),
    _AS3InputLevelStatus_Type()
)
aS3InputLevelStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aS3InputLevelStatus.setStatus("current")
_AS3ExceededPowerStatus_Type = AlarmStatus
_AS3ExceededPowerStatus_Object = MibScalar
aS3ExceededPowerStatus = _AS3ExceededPowerStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 25, 3),
    _AS3ExceededPowerStatus_Type()
)
aS3ExceededPowerStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aS3ExceededPowerStatus.setStatus("current")
_AS3DecreasedPowerStatus_Type = AlarmStatus
_AS3DecreasedPowerStatus_Object = MibScalar
aS3DecreasedPowerStatus = _AS3DecreasedPowerStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 25, 4),
    _AS3DecreasedPowerStatus_Type()
)
aS3DecreasedPowerStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aS3DecreasedPowerStatus.setStatus("current")
_AS3ReflectedPowerStatus_Type = AlarmStatus
_AS3ReflectedPowerStatus_Object = MibScalar
aS3ReflectedPowerStatus = _AS3ReflectedPowerStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 25, 5),
    _AS3ReflectedPowerStatus_Type()
)
aS3ReflectedPowerStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aS3ReflectedPowerStatus.setStatus("current")
_AS3TemperatureStatus_Type = AlarmStatus
_AS3TemperatureStatus_Object = MibScalar
aS3TemperatureStatus = _AS3TemperatureStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 25, 6),
    _AS3TemperatureStatus_Type()
)
aS3TemperatureStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aS3TemperatureStatus.setStatus("current")
_AS3HwErrorStatus_Type = AlarmStatus
_AS3HwErrorStatus_Object = MibScalar
aS3HwErrorStatus = _AS3HwErrorStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 25, 7),
    _AS3HwErrorStatus_Type()
)
aS3HwErrorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aS3HwErrorStatus.setStatus("current")
_AS3PsusErrorStatus_Type = AlarmStatus
_AS3PsusErrorStatus_Object = MibScalar
aS3PsusErrorStatus = _AS3PsusErrorStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 25, 8),
    _AS3PsusErrorStatus_Type()
)
aS3PsusErrorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aS3PsusErrorStatus.setStatus("current")
_StatusAmplifierStage4_ObjectIdentity = ObjectIdentity
statusAmplifierStage4 = _StatusAmplifierStage4_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 26)
)
_AmplifierStage4Status_Type = AlarmStatus
_AmplifierStage4Status_Object = MibScalar
amplifierStage4Status = _AmplifierStage4Status_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 26, 1),
    _AmplifierStage4Status_Type()
)
amplifierStage4Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amplifierStage4Status.setStatus("current")
_AS4InputLevelStatus_Type = AlarmStatus
_AS4InputLevelStatus_Object = MibScalar
aS4InputLevelStatus = _AS4InputLevelStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 26, 2),
    _AS4InputLevelStatus_Type()
)
aS4InputLevelStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aS4InputLevelStatus.setStatus("current")
_AS4ExceededPowerStatus_Type = AlarmStatus
_AS4ExceededPowerStatus_Object = MibScalar
aS4ExceededPowerStatus = _AS4ExceededPowerStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 26, 3),
    _AS4ExceededPowerStatus_Type()
)
aS4ExceededPowerStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aS4ExceededPowerStatus.setStatus("current")
_AS4DecreasedPowerStatus_Type = AlarmStatus
_AS4DecreasedPowerStatus_Object = MibScalar
aS4DecreasedPowerStatus = _AS4DecreasedPowerStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 26, 4),
    _AS4DecreasedPowerStatus_Type()
)
aS4DecreasedPowerStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aS4DecreasedPowerStatus.setStatus("current")
_AS4ReflectedPowerStatus_Type = AlarmStatus
_AS4ReflectedPowerStatus_Object = MibScalar
aS4ReflectedPowerStatus = _AS4ReflectedPowerStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 26, 5),
    _AS4ReflectedPowerStatus_Type()
)
aS4ReflectedPowerStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aS4ReflectedPowerStatus.setStatus("current")
_AS4TemperatureStatus_Type = AlarmStatus
_AS4TemperatureStatus_Object = MibScalar
aS4TemperatureStatus = _AS4TemperatureStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 26, 6),
    _AS4TemperatureStatus_Type()
)
aS4TemperatureStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aS4TemperatureStatus.setStatus("current")
_AS4HwErrorStatus_Type = AlarmStatus
_AS4HwErrorStatus_Object = MibScalar
aS4HwErrorStatus = _AS4HwErrorStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 26, 7),
    _AS4HwErrorStatus_Type()
)
aS4HwErrorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aS4HwErrorStatus.setStatus("current")
_AS4PsusErrorStatus_Type = AlarmStatus
_AS4PsusErrorStatus_Object = MibScalar
aS4PsusErrorStatus = _AS4PsusErrorStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 26, 8),
    _AS4PsusErrorStatus_Type()
)
aS4PsusErrorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aS4PsusErrorStatus.setStatus("current")
_StatusAmplifierStages_ObjectIdentity = ObjectIdentity
statusAmplifierStages = _StatusAmplifierStages_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 27)
)
_AmplifierStagesStatus_Type = AlarmStatus
_AmplifierStagesStatus_Object = MibScalar
amplifierStagesStatus = _AmplifierStagesStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 27, 1),
    _AmplifierStagesStatus_Type()
)
amplifierStagesStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    amplifierStagesStatus.setStatus("current")
_ASsInputLevelStatus_Type = AlarmStatus
_ASsInputLevelStatus_Object = MibScalar
aSsInputLevelStatus = _ASsInputLevelStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 27, 2),
    _ASsInputLevelStatus_Type()
)
aSsInputLevelStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aSsInputLevelStatus.setStatus("current")
_ASsExceededPowerStatus_Type = AlarmStatus
_ASsExceededPowerStatus_Object = MibScalar
aSsExceededPowerStatus = _ASsExceededPowerStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 27, 3),
    _ASsExceededPowerStatus_Type()
)
aSsExceededPowerStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aSsExceededPowerStatus.setStatus("current")
_ASsDecreasedPowerStatus_Type = AlarmStatus
_ASsDecreasedPowerStatus_Object = MibScalar
aSsDecreasedPowerStatus = _ASsDecreasedPowerStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 27, 4),
    _ASsDecreasedPowerStatus_Type()
)
aSsDecreasedPowerStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aSsDecreasedPowerStatus.setStatus("current")
_ASsReflectedPowerStatus_Type = AlarmStatus
_ASsReflectedPowerStatus_Object = MibScalar
aSsReflectedPowerStatus = _ASsReflectedPowerStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 27, 5),
    _ASsReflectedPowerStatus_Type()
)
aSsReflectedPowerStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aSsReflectedPowerStatus.setStatus("current")
_ASsTemperatureStatus_Type = AlarmStatus
_ASsTemperatureStatus_Object = MibScalar
aSsTemperatureStatus = _ASsTemperatureStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 27, 6),
    _ASsTemperatureStatus_Type()
)
aSsTemperatureStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aSsTemperatureStatus.setStatus("current")
_ASsHwErrorStatus_Type = AlarmStatus
_ASsHwErrorStatus_Object = MibScalar
aSsHwErrorStatus = _ASsHwErrorStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 27, 7),
    _ASsHwErrorStatus_Type()
)
aSsHwErrorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aSsHwErrorStatus.setStatus("current")
_ASsPsusErrorStatus_Type = AlarmStatus
_ASsPsusErrorStatus_Object = MibScalar
aSsPsusErrorStatus = _ASsPsusErrorStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 27, 8),
    _ASsPsusErrorStatus_Type()
)
aSsPsusErrorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aSsPsusErrorStatus.setStatus("current")
_StatusDcInput_ObjectIdentity = ObjectIdentity
statusDcInput = _StatusDcInput_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 40)
)
_DcInputStatus_Type = AlarmStatus
_DcInputStatus_Object = MibScalar
dcInputStatus = _DcInputStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 40, 1),
    _DcInputStatus_Type()
)
dcInputStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcInputStatus.setStatus("current")
_RedundancySys_ObjectIdentity = ObjectIdentity
redundancySys = _RedundancySys_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 45)
)
_RedundancySysStatus_Type = AlarmStatus
_RedundancySysStatus_Object = MibScalar
redundancySysStatus = _RedundancySysStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 45, 1),
    _RedundancySysStatus_Type()
)
redundancySysStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    redundancySysStatus.setStatus("current")
_RedundancySysCommunicationStatus_Type = AlarmStatus
_RedundancySysCommunicationStatus_Object = MibScalar
redundancySysCommunicationStatus = _RedundancySysCommunicationStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 45, 2),
    _RedundancySysCommunicationStatus_Type()
)
redundancySysCommunicationStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    redundancySysCommunicationStatus.setStatus("current")
_RedundancySysSwitchStatus_Type = AlarmStatus
_RedundancySysSwitchStatus_Object = MibScalar
redundancySysSwitchStatus = _RedundancySysSwitchStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 45, 3),
    _RedundancySysSwitchStatus_Type()
)
redundancySysSwitchStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    redundancySysSwitchStatus.setStatus("current")
_RedundancySysReserveStatus_Type = AlarmStatus
_RedundancySysReserveStatus_Object = MibScalar
redundancySysReserveStatus = _RedundancySysReserveStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 45, 4),
    _RedundancySysReserveStatus_Type()
)
redundancySysReserveStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    redundancySysReserveStatus.setStatus("current")
_RedundancyInputAsiMatrixStatus_Type = AlarmStatus
_RedundancyInputAsiMatrixStatus_Object = MibScalar
redundancyInputAsiMatrixStatus = _RedundancyInputAsiMatrixStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 45, 5),
    _RedundancyInputAsiMatrixStatus_Type()
)
redundancyInputAsiMatrixStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    redundancyInputAsiMatrixStatus.setStatus("current")
_RedundancyHwMatrixStatus_Type = AlarmStatus
_RedundancyHwMatrixStatus_Object = MibScalar
redundancyHwMatrixStatus = _RedundancyHwMatrixStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 45, 6),
    _RedundancyHwMatrixStatus_Type()
)
redundancyHwMatrixStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    redundancyHwMatrixStatus.setStatus("current")
_RedundancyHwRfMatrixStatus_Type = AlarmStatus
_RedundancyHwRfMatrixStatus_Object = MibScalar
redundancyHwRfMatrixStatus = _RedundancyHwRfMatrixStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 45, 7),
    _RedundancyHwRfMatrixStatus_Type()
)
redundancyHwRfMatrixStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    redundancyHwRfMatrixStatus.setStatus("current")
_RedundancyInputEtiMatrixStatus_Type = AlarmStatus
_RedundancyInputEtiMatrixStatus_Object = MibScalar
redundancyInputEtiMatrixStatus = _RedundancyInputEtiMatrixStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 45, 8),
    _RedundancyInputEtiMatrixStatus_Type()
)
redundancyInputEtiMatrixStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    redundancyInputEtiMatrixStatus.setStatus("current")
_RedundancyHwEtiMatrixStatus_Type = AlarmStatus
_RedundancyHwEtiMatrixStatus_Object = MibScalar
redundancyHwEtiMatrixStatus = _RedundancyHwEtiMatrixStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 3, 45, 9),
    _RedundancyHwEtiMatrixStatus_Type()
)
redundancyHwEtiMatrixStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    redundancyHwEtiMatrixStatus.setStatus("current")
_EventTx_ObjectIdentity = ObjectIdentity
eventTx = _EventTx_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10)
)
_EventsTx_ObjectIdentity = ObjectIdentity
eventsTx = _EventsTx_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0)
)
_EventContent_ObjectIdentity = ObjectIdentity
eventContent = _EventContent_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 1)
)


class _EventTrapLogId_Type(Unsigned32):
    """Custom type eventTrapLogId based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 256),
    )


_EventTrapLogId_Type.__name__ = "Unsigned32"
_EventTrapLogId_Object = MibScalar
eventTrapLogId = _EventTrapLogId_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 1, 1),
    _EventTrapLogId_Type()
)
eventTrapLogId.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    eventTrapLogId.setStatus("current")
_EventTimeStamp_Type = DisplayString
_EventTimeStamp_Object = MibScalar
eventTimeStamp = _EventTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 1, 2),
    _EventTimeStamp_Type()
)
eventTimeStamp.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    eventTimeStamp.setStatus("current")
_EventInitialStatus_Type = EventStatus
_EventInitialStatus_Object = MibScalar
eventInitialStatus = _EventInitialStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 1, 3),
    _EventInitialStatus_Type()
)
eventInitialStatus.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    eventInitialStatus.setStatus("current")
_EventFinalStatus_Type = EventStatus
_EventFinalStatus_Object = MibScalar
eventFinalStatus = _EventFinalStatus_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 1, 4),
    _EventFinalStatus_Type()
)
eventFinalStatus.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    eventFinalStatus.setStatus("current")
_EventAdditionalText_Type = DisplayString
_EventAdditionalText_Object = MibScalar
eventAdditionalText = _EventAdditionalText_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 1, 5),
    _EventAdditionalText_Type()
)
eventAdditionalText.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    eventAdditionalText.setStatus("current")


class _RedundancyId_Type(Integer32):
    """Custom type redundancyId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("notRedundancy", 0),
          ("deviceA", 1),
          ("deviceB", 2),
          ("deviceNp1B", 3),
          ("deviceNp1A1", 4),
          ("deviceNp1A2", 5),
          ("deviceNp1A3", 6),
          ("deviceNp1A4", 7),
          ("deviceNp1A5", 8),
          ("deviceNp1A6", 9),
          ("deviceNp1A7", 10),
          ("deviceNp1A8", 11),
          ("deviceNp1A9", 12),
          ("deviceNp1A10", 13),
          ("deviceNp1A11", 14))
    )


_RedundancyId_Type.__name__ = "Integer32"
_RedundancyId_Object = MibScalar
redundancyId = _RedundancyId_Object(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 1, 6),
    _RedundancyId_Type()
)
redundancyId.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    redundancyId.setStatus("current")
_Conformance_ObjectIdentity = ObjectIdentity
conformance = _Conformance_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 102)
)
_ObjectGroups_ObjectIdentity = ObjectIdentity
objectGroups = _ObjectGroups_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 102, 1)
)
_GroupCompilance_ObjectIdentity = ObjectIdentity
groupCompilance = _GroupCompilance_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 102, 2)
)

# Managed Objects groups

groupFS = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 102, 1, 1)
)
groupFS.setObjects(
      *(("TREDESS-FS-MIB", "actualPassword"),
        ("TREDESS-FS-MIB", "adminUserPassword"),
        ("TREDESS-FS-MIB", "amplifier1p1"),
        ("TREDESS-FS-MIB", "amplifierAlarmName"),
        ("TREDESS-FS-MIB", "amplifierExt1"),
        ("TREDESS-FS-MIB", "amplifierExt2"),
        ("TREDESS-FS-MIB", "amplifierTrap"),
        ("TREDESS-FS-MIB", "amplifierFault"),
        ("TREDESS-FS-MIB", "amplifierLed"),
        ("TREDESS-FS-MIB", "amplifierLog"),
        ("TREDESS-FS-MIB", "amplifierOn"),
        ("TREDESS-FS-MIB", "amplifierStageTemperature"),
        ("TREDESS-FS-MIB", "amplifierStatus"),
        ("TREDESS-FS-MIB", "amplifierWarning"),
        ("TREDESS-FS-MIB", "amplifierStage1AlarmName"),
        ("TREDESS-FS-MIB", "amplifierStage1AlarmStatus"),
        ("TREDESS-FS-MIB", "amplifierStage1On"),
        ("TREDESS-FS-MIB", "amplifierStage1Log"),
        ("TREDESS-FS-MIB", "amplifierStage1Fault"),
        ("TREDESS-FS-MIB", "amplifierStage1Warning"),
        ("TREDESS-FS-MIB", "amplifierStage1Led"),
        ("TREDESS-FS-MIB", "amplifierStage11p1"),
        ("TREDESS-FS-MIB", "amplifierStage1Ext1"),
        ("TREDESS-FS-MIB", "amplifierStage1Ext2"),
        ("TREDESS-FS-MIB", "amplifierStage1Trap"),
        ("TREDESS-FS-MIB", "amplifierStage2AlarmName"),
        ("TREDESS-FS-MIB", "amplifierStage2AlarmStatus"),
        ("TREDESS-FS-MIB", "amplifierStage2On"),
        ("TREDESS-FS-MIB", "amplifierStage2Log"),
        ("TREDESS-FS-MIB", "amplifierStage2Fault"),
        ("TREDESS-FS-MIB", "amplifierStage2Warning"),
        ("TREDESS-FS-MIB", "amplifierStage2Led"),
        ("TREDESS-FS-MIB", "amplifierStage21p1"),
        ("TREDESS-FS-MIB", "amplifierStage2Ext1"),
        ("TREDESS-FS-MIB", "amplifierStage2Ext2"),
        ("TREDESS-FS-MIB", "amplifierStage2Trap"),
        ("TREDESS-FS-MIB", "amplifierStage3AlarmName"),
        ("TREDESS-FS-MIB", "amplifierStage3AlarmStatus"),
        ("TREDESS-FS-MIB", "amplifierStage3On"),
        ("TREDESS-FS-MIB", "amplifierStage3Log"),
        ("TREDESS-FS-MIB", "amplifierStage3Fault"),
        ("TREDESS-FS-MIB", "amplifierStage3Warning"),
        ("TREDESS-FS-MIB", "amplifierStage3Led"),
        ("TREDESS-FS-MIB", "amplifierStage31p1"),
        ("TREDESS-FS-MIB", "amplifierStage3Ext1"),
        ("TREDESS-FS-MIB", "amplifierStage3Ext2"),
        ("TREDESS-FS-MIB", "amplifierStage3Trap"),
        ("TREDESS-FS-MIB", "amplifierStage4AlarmName"),
        ("TREDESS-FS-MIB", "amplifierStage4AlarmStatus"),
        ("TREDESS-FS-MIB", "amplifierStage4On"),
        ("TREDESS-FS-MIB", "amplifierStage4Log"),
        ("TREDESS-FS-MIB", "amplifierStage4Fault"),
        ("TREDESS-FS-MIB", "amplifierStage4Warning"),
        ("TREDESS-FS-MIB", "amplifierStage4Led"),
        ("TREDESS-FS-MIB", "amplifierStage41p1"),
        ("TREDESS-FS-MIB", "amplifierStage4Ext1"),
        ("TREDESS-FS-MIB", "amplifierStage4Ext2"),
        ("TREDESS-FS-MIB", "amplifierStage4Trap"),
        ("TREDESS-FS-MIB", "amplifierStagesAlarmName"),
        ("TREDESS-FS-MIB", "amplifierStagesAlarmStatus"),
        ("TREDESS-FS-MIB", "amplifierStagesOn"),
        ("TREDESS-FS-MIB", "amplifierStagesLog"),
        ("TREDESS-FS-MIB", "amplifierStagesFault"),
        ("TREDESS-FS-MIB", "amplifierStagesWarning"),
        ("TREDESS-FS-MIB", "amplifierStagesLed"),
        ("TREDESS-FS-MIB", "amplifierStages1p1"),
        ("TREDESS-FS-MIB", "amplifierStagesExt1"),
        ("TREDESS-FS-MIB", "amplifierStagesExt2"),
        ("TREDESS-FS-MIB", "amplifierStagesTrap"),
        ("TREDESS-FS-MIB", "autorefreshWebConfig"),
        ("TREDESS-FS-MIB", "asi1ErrorStatus"),
        ("TREDESS-FS-MIB", "asi1p1"),
        ("TREDESS-FS-MIB", "asi2ErrorStatus"),
        ("TREDESS-FS-MIB", "asiAlarmName"),
        ("TREDESS-FS-MIB", "asiAlarmStatus"),
        ("TREDESS-FS-MIB", "asiExt1"),
        ("TREDESS-FS-MIB", "asiExt2"),
        ("TREDESS-FS-MIB", "asiTrap"),
        ("TREDESS-FS-MIB", "asiFault"),
        ("TREDESS-FS-MIB", "asiLed"),
        ("TREDESS-FS-MIB", "asiLog"),
        ("TREDESS-FS-MIB", "asiOn"),
        ("TREDESS-FS-MIB", "autorefreshWebTime"),
        ("TREDESS-FS-MIB", "outputCentralFrequency"),
        ("TREDESS-FS-MIB", "outputCentralFrequencyMHz"),
        ("TREDESS-FS-MIB", "confirmNewPassword"),
        ("TREDESS-FS-MIB", "connectedWebUsers"),
        ("TREDESS-FS-MIB", "asiInputStatus"),
        ("TREDESS-FS-MIB", "asiWarning"),
        ("TREDESS-FS-MIB", "btsErrorStatus"),
        ("TREDESS-FS-MIB", "codeRate"),
        ("TREDESS-FS-MIB", "outputChannelOffset"),
        ("TREDESS-FS-MIB", "ouputChannelResolution"),
        ("TREDESS-FS-MIB", "dabOutputChannel"),
        ("TREDESS-FS-MIB", "configuredPower"),
        ("TREDESS-FS-MIB", "powerDisplaOffset"),
        ("TREDESS-FS-MIB", "dateTime1"),
        ("TREDESS-FS-MIB", "dateTime2"),
        ("TREDESS-FS-MIB", "dateTimeSource"),
        ("TREDESS-FS-MIB", "dateTimeStatus"),
        ("TREDESS-FS-MIB", "dcLine1Voltage"),
        ("TREDESS-FS-MIB", "dcLine2Voltage"),
        ("TREDESS-FS-MIB", "dcLine3Voltage"),
        ("TREDESS-FS-MIB", "dcLine4Voltage"),
        ("TREDESS-FS-MIB", "dcInVoltage"),
        ("TREDESS-FS-MIB", "dhcp"),
        ("TREDESS-FS-MIB", "exceededPowerThreshold"),
        ("TREDESS-FS-MIB", "enableAuthenTraps"),
        ("TREDESS-FS-MIB", "dcInputStatus"),
        ("TREDESS-FS-MIB", "redundancySysStatus"),
        ("TREDESS-FS-MIB", "redundancySysCommunicationStatus"),
        ("TREDESS-FS-MIB", "redundancySysSwitchStatus"),
        ("TREDESS-FS-MIB", "redundancySysReserveStatus"),
        ("TREDESS-FS-MIB", "redundancyInputAsiMatrixStatus"),
        ("TREDESS-FS-MIB", "redundancyHwMatrixStatus"),
        ("TREDESS-FS-MIB", "redundancyHwRfMatrixStatus"),
        ("TREDESS-FS-MIB", "redundancyInputEtiMatrixStatus"),
        ("TREDESS-FS-MIB", "redundancyHwEtiMatrixStatus"),
        ("TREDESS-FS-MIB", "errorHw1p1"),
        ("TREDESS-FS-MIB", "errorHwAlarmName"),
        ("TREDESS-FS-MIB", "dvbt2Bandwidth"),
        ("TREDESS-FS-MIB", "dvbt2CellIdOverwrite"),
        ("TREDESS-FS-MIB", "errorHwAlarmStatus"),
        ("TREDESS-FS-MIB", "dvbt2ExtendedCarrierMode"),
        ("TREDESS-FS-MIB", "dvbt2FftSize"),
        ("TREDESS-FS-MIB", "dvbt2FramesPerSuperframe"),
        ("TREDESS-FS-MIB", "dvbt2CellIdUser"),
        ("TREDESS-FS-MIB", "dvbt2CellIdT2mi"),
        ("TREDESS-FS-MIB", "errorHwExt1"),
        ("TREDESS-FS-MIB", "dvbt2GuardInterval"),
        ("TREDESS-FS-MIB", "errorHwExt2"),
        ("TREDESS-FS-MIB", "errorHwTrap"),
        ("TREDESS-FS-MIB", "dvbt2FrequencyOverwrite"),
        ("TREDESS-FS-MIB", "errorHwFault"),
        ("TREDESS-FS-MIB", "dvbt2TimeOffset"),
        ("TREDESS-FS-MIB", "dvbt2FrequencyT2mi"),
        ("TREDESS-FS-MIB", "dvbt2InputBufferDelay"),
        ("TREDESS-FS-MIB", "dvbt2ProcessingDelay"),
        ("TREDESS-FS-MIB", "dvbt2L1SignallingModulation"),
        ("TREDESS-FS-MIB", "errorHwLed"),
        ("TREDESS-FS-MIB", "errorHwLog"),
        ("TREDESS-FS-MIB", "dvbt2Delay"),
        ("TREDESS-FS-MIB", "dvbt2MisoGroup"),
        ("TREDESS-FS-MIB", "dvbt2OfdmSymbolsPerSuperframe"),
        ("TREDESS-FS-MIB", "errorHwOn"),
        ("TREDESS-FS-MIB", "errorHwWarning"),
        ("TREDESS-FS-MIB", "dvbt2PaprReduction"),
        ("TREDESS-FS-MIB", "dvbt2PilotPattern"),
        ("TREDESS-FS-MIB", "dvbt2NetworkDelayMargin"),
        ("TREDESS-FS-MIB", "dvbt2LocalDelay"),
        ("TREDESS-FS-MIB", "dvbt2BufferDuration"),
        ("TREDESS-FS-MIB", "input10MhzStatus"),
        ("TREDESS-FS-MIB", "external1p1"),
        ("TREDESS-FS-MIB", "externalAlarmName"),
        ("TREDESS-FS-MIB", "powerSupplyAlarmName"),
        ("TREDESS-FS-MIB", "powerSupplyAlarmStatus"),
        ("TREDESS-FS-MIB", "powerSupplyOn"),
        ("TREDESS-FS-MIB", "powerSupplyLog"),
        ("TREDESS-FS-MIB", "powerSupplyFault"),
        ("TREDESS-FS-MIB", "powerSupplyWarning"),
        ("TREDESS-FS-MIB", "powerSupplyLed"),
        ("TREDESS-FS-MIB", "powerSupply1p1"),
        ("TREDESS-FS-MIB", "powerSupplyExt1"),
        ("TREDESS-FS-MIB", "powerSupplyExt2"),
        ("TREDESS-FS-MIB", "powerSupplyTrap"),
        ("TREDESS-FS-MIB", "dvbt2PreambleFormat"),
        ("TREDESS-FS-MIB", "dvbt2L1PostScrambling"),
        ("TREDESS-FS-MIB", "dvbt2LiteCompatible"),
        ("TREDESS-FS-MIB", "dvbt2InputMode"),
        ("TREDESS-FS-MIB", "externalAlarmStatus"),
        ("TREDESS-FS-MIB", "dvbt2NetworkType"),
        ("TREDESS-FS-MIB", "dvbt2SuperFrameDuration"),
        ("TREDESS-FS-MIB", "externalExt1"),
        ("TREDESS-FS-MIB", "dvbt2NetworkIdUser"),
        ("TREDESS-FS-MIB", "dvbt2NetworkIdT2mi"),
        ("TREDESS-FS-MIB", "dvbt2NetworkIdOverwrite"),
        ("TREDESS-FS-MIB", "externalExt2"),
        ("TREDESS-FS-MIB", "externalTrap"),
        ("TREDESS-FS-MIB", "fan1p1"),
        ("TREDESS-FS-MIB", "dvbt2TransmitterId"),
        ("TREDESS-FS-MIB", "fastTrapSync"),
        ("TREDESS-FS-MIB", "faultSummationStatus"),
        ("TREDESS-FS-MIB", "gbe1"),
        ("TREDESS-FS-MIB", "gbe2"),
        ("TREDESS-FS-MIB", "dvbt2SystemIdOverwrite"),
        ("TREDESS-FS-MIB", "dvbt2SfnRelativeReference"),
        ("TREDESS-FS-MIB", "dvbt2SfnAbsoluteReference"),
        ("TREDESS-FS-MIB", "dvbt2TimeStamp"),
        ("TREDESS-FS-MIB", "gbe3"),
        ("TREDESS-FS-MIB", "dvbt2SystemIdUser"),
        ("TREDESS-FS-MIB", "dvbt2SystemIdT2mi"),
        ("TREDESS-FS-MIB", "gbe4"),
        ("TREDESS-FS-MIB", "gbe1LinkConfiguration"),
        ("TREDESS-FS-MIB", "gbe2LinkConfiguration"),
        ("TREDESS-FS-MIB", "gbe3LinkConfiguration"),
        ("TREDESS-FS-MIB", "gbe4LinkConfiguration"),
        ("TREDESS-FS-MIB", "external1Status"),
        ("TREDESS-FS-MIB", "external2Status"),
        ("TREDESS-FS-MIB", "acPowerSupplyStatus"),
        ("TREDESS-FS-MIB", "acPsuAStatus"),
        ("TREDESS-FS-MIB", "acPsuBStatus"),
        ("TREDESS-FS-MIB", "amplifierStage1Status"),
        ("TREDESS-FS-MIB", "aS1InputLevelStatus"),
        ("TREDESS-FS-MIB", "aS1ExceededPowerStatus"),
        ("TREDESS-FS-MIB", "aS1DecreasedPowerStatus"),
        ("TREDESS-FS-MIB", "aS1ReflectedPowerStatus"),
        ("TREDESS-FS-MIB", "aS1TemperatureStatus"),
        ("TREDESS-FS-MIB", "aS1HwErrorStatus"),
        ("TREDESS-FS-MIB", "aS1PsusErrorStatus"),
        ("TREDESS-FS-MIB", "amplifierStage2Status"),
        ("TREDESS-FS-MIB", "aS2InputLevelStatus"),
        ("TREDESS-FS-MIB", "aS2ExceededPowerStatus"),
        ("TREDESS-FS-MIB", "aS2DecreasedPowerStatus"),
        ("TREDESS-FS-MIB", "aS2ReflectedPowerStatus"),
        ("TREDESS-FS-MIB", "aS2TemperatureStatus"),
        ("TREDESS-FS-MIB", "aS2HwErrorStatus"),
        ("TREDESS-FS-MIB", "aS2PsusErrorStatus"),
        ("TREDESS-FS-MIB", "amplifierStage3Status"),
        ("TREDESS-FS-MIB", "aS3InputLevelStatus"),
        ("TREDESS-FS-MIB", "aS3ExceededPowerStatus"),
        ("TREDESS-FS-MIB", "aS3DecreasedPowerStatus"),
        ("TREDESS-FS-MIB", "aS3ReflectedPowerStatus"),
        ("TREDESS-FS-MIB", "aS3TemperatureStatus"),
        ("TREDESS-FS-MIB", "aS3HwErrorStatus"),
        ("TREDESS-FS-MIB", "aS3PsusErrorStatus"),
        ("TREDESS-FS-MIB", "amplifierStage4Status"),
        ("TREDESS-FS-MIB", "aS4InputLevelStatus"),
        ("TREDESS-FS-MIB", "aS4ExceededPowerStatus"),
        ("TREDESS-FS-MIB", "aS4DecreasedPowerStatus"),
        ("TREDESS-FS-MIB", "aS4ReflectedPowerStatus"),
        ("TREDESS-FS-MIB", "aS4TemperatureStatus"),
        ("TREDESS-FS-MIB", "aS4HwErrorStatus"),
        ("TREDESS-FS-MIB", "aS4PsusErrorStatus"),
        ("TREDESS-FS-MIB", "amplifierStagesStatus"),
        ("TREDESS-FS-MIB", "aSsInputLevelStatus"),
        ("TREDESS-FS-MIB", "aSsExceededPowerStatus"),
        ("TREDESS-FS-MIB", "aSsDecreasedPowerStatus"),
        ("TREDESS-FS-MIB", "aSsReflectedPowerStatus"),
        ("TREDESS-FS-MIB", "aSsTemperatureStatus"),
        ("TREDESS-FS-MIB", "aSsHwErrorStatus"),
        ("TREDESS-FS-MIB", "aSsPsusErrorStatus"),
        ("TREDESS-FS-MIB", "externalFault"),
        ("TREDESS-FS-MIB", "externalLed"),
        ("TREDESS-FS-MIB", "dvbt2Profile"),
        ("TREDESS-FS-MIB", "externalLog"),
        ("TREDESS-FS-MIB", "externalOn"),
        ("TREDESS-FS-MIB", "externalWarning"),
        ("TREDESS-FS-MIB", "dvbt2T2miPid"),
        ("TREDESS-FS-MIB", "fan01OperatingTime"),
        ("TREDESS-FS-MIB", "fan01Reset"),
        ("TREDESS-FS-MIB", "dvbt2Version"),
        ("TREDESS-FS-MIB", "fan01Status"),
        ("TREDESS-FS-MIB", "fan02OperatingTime"),
        ("TREDESS-FS-MIB", "fanAlarmName"),
        ("TREDESS-FS-MIB", "fanAlarmStatus"),
        ("TREDESS-FS-MIB", "utcOffset"),
        ("TREDESS-FS-MIB", "dvbtAutoconfigurationMip"),
        ("TREDESS-FS-MIB", "fan1Status"),
        ("TREDESS-FS-MIB", "dvbtBandwidth"),
        ("TREDESS-FS-MIB", "dvbtConstellation"),
        ("TREDESS-FS-MIB", "dvbtCellId"),
        ("TREDESS-FS-MIB", "dvbtFec"),
        ("TREDESS-FS-MIB", "dvbtGuardInterval"),
        ("TREDESS-FS-MIB", "ecAdditionDelay"),
        ("TREDESS-FS-MIB", "ecCurrentDelay"),
        ("TREDESS-FS-MIB", "ecBandwidth"),
        ("TREDESS-FS-MIB", "ecBandwidthAdaptation"),
        ("TREDESS-FS-MIB", "ecReferenceLevel"),
        ("TREDESS-FS-MIB", "ecShoulderAlarm"),
        ("TREDESS-FS-MIB", "ecLowerShoulder"),
        ("TREDESS-FS-MIB", "fanExt1"),
        ("TREDESS-FS-MIB", "dvbtCellIdEnable"),
        ("TREDESS-FS-MIB", "fanExt2"),
        ("TREDESS-FS-MIB", "fanTrap"),
        ("TREDESS-FS-MIB", "dvbtInputBufferDelay"),
        ("TREDESS-FS-MIB", "dvbtCurrentNetworkDelay"),
        ("TREDESS-FS-MIB", "dvbtProcessingDelay"),
        ("TREDESS-FS-MIB", "dvbtNetworkDelayMargin"),
        ("TREDESS-FS-MIB", "dvbtDelay"),
        ("TREDESS-FS-MIB", "ecCancellationLevel"),
        ("TREDESS-FS-MIB", "fanFault"),
        ("TREDESS-FS-MIB", "dvbtTransmitterId"),
        ("TREDESS-FS-MIB", "dvbtTimeOffset"),
        ("TREDESS-FS-MIB", "dvbtMaximumNetworkDelay"),
        ("TREDESS-FS-MIB", "fanLed"),
        ("TREDESS-FS-MIB", "fanLog"),
        ("TREDESS-FS-MIB", "fanOn"),
        ("TREDESS-FS-MIB", "dvbtNetworkType"),
        ("TREDESS-FS-MIB", "ecInBandLevelVariation"),
        ("TREDESS-FS-MIB", "ecNonLinearStoredPrecorrection"),
        ("TREDESS-FS-MIB", "ecNonLinearPrecorrectorFeedback"),
        ("TREDESS-FS-MIB", "ecInputLevel"),
        ("TREDESS-FS-MIB", "fan02Reset"),
        ("TREDESS-FS-MIB", "fan02Status"),
        ("TREDESS-FS-MIB", "fan03OperatingTime"),
        ("TREDESS-FS-MIB", "fan03Reset"),
        ("TREDESS-FS-MIB", "fanSpeed"),
        ("TREDESS-FS-MIB", "fan03Status"),
        ("TREDESS-FS-MIB", "amStFanSpeed"),
        ("TREDESS-FS-MIB", "amStFan1OperatingTime"),
        ("TREDESS-FS-MIB", "amStFan2OperatingTime"),
        ("TREDESS-FS-MIB", "amStFan1rpm"),
        ("TREDESS-FS-MIB", "amStFan2rpm"),
        ("TREDESS-FS-MIB", "rcTag"),
        ("TREDESS-FS-MIB", "rcControlStatus"),
        ("TREDESS-FS-MIB", "rcHwStatus"),
        ("TREDESS-FS-MIB", "rcCoolingMode"),
        ("TREDESS-FS-MIB", "rcFan1"),
        ("TREDESS-FS-MIB", "rcFan2"),
        ("TREDESS-FS-MIB", "rcTemperature"),
        ("TREDESS-FS-MIB", "rcTemperatureTarget"),
        ("TREDESS-FS-MIB", "rcFan1SpeedManual"),
        ("TREDESS-FS-MIB", "rcFan2SpeedManual"),
        ("TREDESS-FS-MIB", "rcFan1Speed"),
        ("TREDESS-FS-MIB", "rcFan1Tachometer"),
        ("TREDESS-FS-MIB", "rcFan1OperatingTime"),
        ("TREDESS-FS-MIB", "rcFan1Reset"),
        ("TREDESS-FS-MIB", "rcFan2Speed"),
        ("TREDESS-FS-MIB", "rcFan2Tachometer"),
        ("TREDESS-FS-MIB", "rcFan2OperatingTime"),
        ("TREDESS-FS-MIB", "rcFan2Reset"),
        ("TREDESS-FS-MIB", "rcIdentifyBoard"),
        ("TREDESS-FS-MIB", "rcExternalSensor1"),
        ("TREDESS-FS-MIB", "rcExternalSensor2"),
        ("TREDESS-FS-MIB", "forwardPower"),
        ("TREDESS-FS-MIB", "dvbtLocalDelay"),
        ("TREDESS-FS-MIB", "dvbtBufferDuration"),
        ("TREDESS-FS-MIB", "dvbtRetransmissionDelay"),
        ("TREDESS-FS-MIB", "ecOutputCancellation"),
        ("TREDESS-FS-MIB", "ecGainMargin"),
        ("TREDESS-FS-MIB", "ecEnable"),
        ("TREDESS-FS-MIB", "ecWindow01"),
        ("TREDESS-FS-MIB", "ecWindow02"),
        ("TREDESS-FS-MIB", "ecWindow03"),
        ("TREDESS-FS-MIB", "ecWindow04"),
        ("TREDESS-FS-MIB", "ecWindow05"),
        ("TREDESS-FS-MIB", "ecWindow06"),
        ("TREDESS-FS-MIB", "ecWindow07"),
        ("TREDESS-FS-MIB", "ecWindow08"),
        ("TREDESS-FS-MIB", "ecWindow09"),
        ("TREDESS-FS-MIB", "ecWindow10"),
        ("TREDESS-FS-MIB", "ecWindow11"),
        ("TREDESS-FS-MIB", "ecWindow12"),
        ("TREDESS-FS-MIB", "ecWindow13"),
        ("TREDESS-FS-MIB", "ecWindow14"),
        ("TREDESS-FS-MIB", "ecWindow15"),
        ("TREDESS-FS-MIB", "ecWindow16"),
        ("TREDESS-FS-MIB", "ecUnmuteRetriesInterval"),
        ("TREDESS-FS-MIB", "ecLinearPrecorrection"),
        ("TREDESS-FS-MIB", "ecNonLinearPrecorrection"),
        ("TREDESS-FS-MIB", "ecSlopeCorrection"),
        ("TREDESS-FS-MIB", "ecPrecorrectorFeedback"),
        ("TREDESS-FS-MIB", "ecPrecorrectorInput"),
        ("TREDESS-FS-MIB", "ecPrecorrectorOutput"),
        ("TREDESS-FS-MIB", "ecPrecorrectorStatus"),
        ("TREDESS-FS-MIB", "ecTemperature"),
        ("TREDESS-FS-MIB", "ecUpperShoulder"),
        ("TREDESS-FS-MIB", "modThresholdMer"),
        ("TREDESS-FS-MIB", "modMer"),
        ("TREDESS-FS-MIB", "modMerFlt"),
        ("TREDESS-FS-MIB", "modBerFlt"),
        ("TREDESS-FS-MIB", "modShoulderAlarm"),
        ("TREDESS-FS-MIB", "eventLog"),
        ("TREDESS-FS-MIB", "eventTrap"),
        ("TREDESS-FS-MIB", "eventName"),
        ("TREDESS-FS-MIB", "eventOn"),
        ("TREDESS-FS-MIB", "fecType"),
        ("TREDESS-FS-MIB", "geral1p1"),
        ("TREDESS-FS-MIB", "geralAlarmName"),
        ("TREDESS-FS-MIB", "geralAlarmStatus"),
        ("TREDESS-FS-MIB", "language"),
        ("TREDESS-FS-MIB", "location"),
        ("TREDESS-FS-MIB", "operationMode"),
        ("TREDESS-FS-MIB", "autoreturnToRemote"),
        ("TREDESS-FS-MIB", "externalStatus"),
        ("TREDESS-FS-MIB", "fanWarning"),
        ("TREDESS-FS-MIB", "geralExt1"),
        ("TREDESS-FS-MIB", "geralExt2"),
        ("TREDESS-FS-MIB", "geralTrap"),
        ("TREDESS-FS-MIB", "geralFault"),
        ("TREDESS-FS-MIB", "geralLed"),
        ("TREDESS-FS-MIB", "input01StandByStatus"),
        ("TREDESS-FS-MIB", "isdbtBitrateLB"),
        ("TREDESS-FS-MIB", "isdbtBerLB"),
        ("TREDESS-FS-MIB", "geralLog"),
        ("TREDESS-FS-MIB", "input01Description"),
        ("TREDESS-FS-MIB", "input01Duration"),
        ("TREDESS-FS-MIB", "input01Mode"),
        ("TREDESS-FS-MIB", "isdbtBtsRateLock"),
        ("TREDESS-FS-MIB", "isdbtCasBiss"),
        ("TREDESS-FS-MIB", "isdbtCasMode"),
        ("TREDESS-FS-MIB", "isdbtCasPass"),
        ("TREDESS-FS-MIB", "isdbtCasInjectId"),
        ("TREDESS-FS-MIB", "isdbtBtsDecompression"),
        ("TREDESS-FS-MIB", "isdbtBtsIipPid"),
        ("TREDESS-FS-MIB", "isdbtBtsAuxPid"),
        ("TREDESS-FS-MIB", "isdbtBtsPidRemapping"),
        ("TREDESS-FS-MIB", "isdbtBtsRestorePcr"),
        ("TREDESS-FS-MIB", "isdbtBtsBypass"),
        ("TREDESS-FS-MIB", "isdbtBtsVirtualChannel"),
        ("TREDESS-FS-MIB", "isdbtBtsChannel"),
        ("TREDESS-FS-MIB", "isdbtBtsAreaCode"),
        ("TREDESS-FS-MIB", "isdbtBts188BInputLocked"),
        ("TREDESS-FS-MIB", "isdbtBts204BOutputLocked"),
        ("TREDESS-FS-MIB", "isdbtDeletePids"),
        ("TREDESS-FS-MIB", "isdbtPidIn"),
        ("TREDESS-FS-MIB", "isdbtPidOut"),
        ("TREDESS-FS-MIB", "isdbtConstellationLB"),
        ("TREDESS-FS-MIB", "isdbtPidsLB"),
        ("TREDESS-FS-MIB", "geralOn"),
        ("TREDESS-FS-MIB", "isdbtCurrentNetworkDelay"),
        ("TREDESS-FS-MIB", "isdbtTimeIntervalLengthLB"),
        ("TREDESS-FS-MIB", "geralWarning"),
        ("TREDESS-FS-MIB", "synchronization1p1"),
        ("TREDESS-FS-MIB", "synchronizationAlarmStatus"),
        ("TREDESS-FS-MIB", "synchronizationLed"),
        ("TREDESS-FS-MIB", "synchronizationOn"),
        ("TREDESS-FS-MIB", "ldmosTransistor1Current"),
        ("TREDESS-FS-MIB", "ldmosTransistor2Current"),
        ("TREDESS-FS-MIB", "localIp"),
        ("TREDESS-FS-MIB", "localNetmask"),
        ("TREDESS-FS-MIB", "localMacAddr"),
        ("TREDESS-FS-MIB", "localTime"),
        ("TREDESS-FS-MIB", "synchronizationAntennaStatus"),
        ("TREDESS-FS-MIB", "synchronizationHoldoverStatus"),
        ("TREDESS-FS-MIB", "synchronizationHwErrorStatus"),
        ("TREDESS-FS-MIB", "fan2Status"),
        ("TREDESS-FS-MIB", "isdbtBitrateLC"),
        ("TREDESS-FS-MIB", "isdbtBerLC"),
        ("TREDESS-FS-MIB", "isdbtPidFiltering"),
        ("TREDESS-FS-MIB", "isdbtServicesA"),
        ("TREDESS-FS-MIB", "isdbtServicesB"),
        ("TREDESS-FS-MIB", "isdbtServicesC"),
        ("TREDESS-FS-MIB", "isdbtCountry"),
        ("TREDESS-FS-MIB", "isdbtRegionId"),
        ("TREDESS-FS-MIB", "isdbtAvailablePrograms"),
        ("TREDESS-FS-MIB", "isdbtAffiliationId"),
        ("TREDESS-FS-MIB", "isdbtNetworkId"),
        ("TREDESS-FS-MIB", "isdbtNetworkName"),
        ("TREDESS-FS-MIB", "isdbtTransportStreamId"),
        ("TREDESS-FS-MIB", "isdbtOriginalNetworkId"),
        ("TREDESS-FS-MIB", "isdbtAreaCode"),
        ("TREDESS-FS-MIB", "isdbtOverwriteAreaCode"),
        ("TREDESS-FS-MIB", "isdbtFrequency"),
        ("TREDESS-FS-MIB", "isdbtOverwriteFrequency"),
        ("TREDESS-FS-MIB", "isdbtRemoteControlIdKey"),
        ("TREDESS-FS-MIB", "isdbtVirtualChannelBypass"),
        ("TREDESS-FS-MIB", "isdbtOverwriteRemoteControlIdKey"),
        ("TREDESS-FS-MIB", "isdbtTSName"),
        ("TREDESS-FS-MIB", "fan3Status"),
        ("TREDESS-FS-MIB", "isdbtCodeRateLC"),
        ("TREDESS-FS-MIB", "isdbtPidsLC"),
        ("TREDESS-FS-MIB", "dvbtFft"),
        ("TREDESS-FS-MIB", "dvbtAutoconfigurationFromDttRcv"),
        ("TREDESS-FS-MIB", "isdbtConstellationLC"),
        ("TREDESS-FS-MIB", "isdbtCodeRateLB"),
        ("TREDESS-FS-MIB", "isdbtInputBufferDelay"),
        ("TREDESS-FS-MIB", "isdbtTimeOffset"),
        ("TREDESS-FS-MIB", "latitude"),
        ("TREDESS-FS-MIB", "ipInputLed"),
        ("TREDESS-FS-MIB", "isdbtTransmitterId"),
        ("TREDESS-FS-MIB", "isdbtMaximumNetworkDelay"),
        ("TREDESS-FS-MIB", "ipInputOn"),
        ("TREDESS-FS-MIB", "macAddr"),
        ("TREDESS-FS-MIB", "dnsServer"),
        ("TREDESS-FS-MIB", "synchronizationUnlockStatus"),
        ("TREDESS-FS-MIB", "synchronizationModuleStatus"),
        ("TREDESS-FS-MIB", "ipInput1p1"),
        ("TREDESS-FS-MIB", "ipInputAlarmStatus"),
        ("TREDESS-FS-MIB", "ipInputExt2"),
        ("TREDESS-FS-MIB", "ipInputTrap"),
        ("TREDESS-FS-MIB", "name"),
        ("TREDESS-FS-MIB", "fanStatus"),
        ("TREDESS-FS-MIB", "synchronizationAlarmName"),
        ("TREDESS-FS-MIB", "satellitesAntenna"),
        ("TREDESS-FS-MIB", "input1pps"),
        ("TREDESS-FS-MIB", "synchronizationDate"),
        ("TREDESS-FS-MIB", "synchronizationExt1"),
        ("TREDESS-FS-MIB", "synchronizationExt2"),
        ("TREDESS-FS-MIB", "synchronizationTrap"),
        ("TREDESS-FS-MIB", "synchronizationFault"),
        ("TREDESS-FS-MIB", "synchronizationHoldover"),
        ("TREDESS-FS-MIB", "synchronizationHoldoverThreshold"),
        ("TREDESS-FS-MIB", "endlessHoldoverThresholdEnable"),
        ("TREDESS-FS-MIB", "input10Mhz"),
        ("TREDESS-FS-MIB", "antennaStatus"),
        ("TREDESS-FS-MIB", "ppsStatus"),
        ("TREDESS-FS-MIB", "synchronizationLog"),
        ("TREDESS-FS-MIB", "longitude"),
        ("TREDESS-FS-MIB", "altitude"),
        ("TREDESS-FS-MIB", "satellite01Info"),
        ("TREDESS-FS-MIB", "satellite02Info"),
        ("TREDESS-FS-MIB", "satellite03Info"),
        ("TREDESS-FS-MIB", "satellite04Info"),
        ("TREDESS-FS-MIB", "satellite05Info"),
        ("TREDESS-FS-MIB", "satellite06Info"),
        ("TREDESS-FS-MIB", "satellite07Info"),
        ("TREDESS-FS-MIB", "satellite08Info"),
        ("TREDESS-FS-MIB", "synchronizationReady"),
        ("TREDESS-FS-MIB", "synchronizationWarning"),
        ("TREDESS-FS-MIB", "input1Priority"),
        ("TREDESS-FS-MIB", "input1Status"),
        ("TREDESS-FS-MIB", "input1Pat"),
        ("TREDESS-FS-MIB", "input2Priority"),
        ("TREDESS-FS-MIB", "input2Status"),
        ("TREDESS-FS-MIB", "input2Pat"),
        ("TREDESS-FS-MIB", "input3Priority"),
        ("TREDESS-FS-MIB", "input3Status"),
        ("TREDESS-FS-MIB", "input3Pat"),
        ("TREDESS-FS-MIB", "input4Priority"),
        ("TREDESS-FS-MIB", "dttReceiver1Enable"),
        ("TREDESS-FS-MIB", "dttReceiver1Standard"),
        ("TREDESS-FS-MIB", "dttReceiver1Bandwidth"),
        ("TREDESS-FS-MIB", "dttReceiver1InputFrequencyMode"),
        ("TREDESS-FS-MIB", "dttReceiver1PlpId"),
        ("TREDESS-FS-MIB", "dttReceiver1BerMute"),
        ("TREDESS-FS-MIB", "dttReceiver1Channel"),
        ("TREDESS-FS-MIB", "dttReceiver1ChannelOffset"),
        ("TREDESS-FS-MIB", "dttReceiver1ChannelResolution"),
        ("TREDESS-FS-MIB", "dttReceiver1Frequency"),
        ("TREDESS-FS-MIB", "dttReceiver1StatusReceiver"),
        ("TREDESS-FS-MIB", "dttReceiver1InputFrequency"),
        ("TREDESS-FS-MIB", "dttReceiver1Constellation"),
        ("TREDESS-FS-MIB", "dttReceiver1Fec"),
        ("TREDESS-FS-MIB", "dttReceiver1GuardInterval"),
        ("TREDESS-FS-MIB", "dttReceiver1Fft"),
        ("TREDESS-FS-MIB", "dttReceiver1CellId"),
        ("TREDESS-FS-MIB", "dttReceiver1Cber"),
        ("TREDESS-FS-MIB", "dttReceiver1Vber"),
        ("TREDESS-FS-MIB", "dttReceiver1T2Profile"),
        ("TREDESS-FS-MIB", "dttReceiver1T2Version"),
        ("TREDESS-FS-MIB", "dttReceiver1T2CellId"),
        ("TREDESS-FS-MIB", "dttReceiver1T2NetworkId"),
        ("TREDESS-FS-MIB", "dttReceiver1T2SystemId"),
        ("TREDESS-FS-MIB", "dttRx1T2L1SignallingModulation"),
        ("TREDESS-FS-MIB", "dttRx1T2L1PostScrambling"),
        ("TREDESS-FS-MIB", "dttRx1T2PreambleFormat"),
        ("TREDESS-FS-MIB", "dttRx1T2ExtendedCarrierMode"),
        ("TREDESS-FS-MIB", "dttRx1T2FftSize"),
        ("TREDESS-FS-MIB", "dttRx1T2GuardInterval"),
        ("TREDESS-FS-MIB", "dttRx1T2PaprReduction"),
        ("TREDESS-FS-MIB", "dttRx1T2PilotPattern"),
        ("TREDESS-FS-MIB", "dttRx1T2FramesPerSuperframe"),
        ("TREDESS-FS-MIB", "dttRx1T2OfdmSymbolsPerSuperframe"),
        ("TREDESS-FS-MIB", "dttRx1NumberOfPlps"),
        ("TREDESS-FS-MIB", "dttRx1PlpId"),
        ("TREDESS-FS-MIB", "dttRx1T2PlpType"),
        ("TREDESS-FS-MIB", "dttRx1T2PlpMode"),
        ("TREDESS-FS-MIB", "dttRx1T2PlpGroupId"),
        ("TREDESS-FS-MIB", "dttRx1T2PlpConstellation"),
        ("TREDESS-FS-MIB", "dttRx1T2PlpRotatedConstellation"),
        ("TREDESS-FS-MIB", "dttRx1T2FecType"),
        ("TREDESS-FS-MIB", "dttRx1T2CodeRate"),
        ("TREDESS-FS-MIB", "dttRx1T2NumberOfFecBlocks"),
        ("TREDESS-FS-MIB", "dttRx1T2TypeOfTimeInvervaling"),
        ("TREDESS-FS-MIB", "dttRx1T2LengthOfTimeInvervaling"),
        ("TREDESS-FS-MIB", "dttRx1T2InBandSignalling"),
        ("TREDESS-FS-MIB", "dttRx1T2BerBeforeLdpc"),
        ("TREDESS-FS-MIB", "dttRx1T2BerBeforeBch"),
        ("TREDESS-FS-MIB", "dttRx1T2BbframeErrorRatio"),
        ("TREDESS-FS-MIB", "dttRx1IsdbtSystem"),
        ("TREDESS-FS-MIB", "dttRx1IsdbtMode"),
        ("TREDESS-FS-MIB", "dttRx1IsdbtGuard"),
        ("TREDESS-FS-MIB", "dttRx1IsdbtEws"),
        ("TREDESS-FS-MIB", "dttRx1IsdbtPartialRx"),
        ("TREDESS-FS-MIB", "dttRx1IsdbtLASegments"),
        ("TREDESS-FS-MIB", "dttRx1IsdbtLAInterleaveLength"),
        ("TREDESS-FS-MIB", "dttRx1IsdbtLAConstellation"),
        ("TREDESS-FS-MIB", "dttRx1IsdbtLACodeRate"),
        ("TREDESS-FS-MIB", "dttRx1IsdbtLACber"),
        ("TREDESS-FS-MIB", "dttRx1IsdbtLABERbeforeRS"),
        ("TREDESS-FS-MIB", "dttRx1IsdbtLBSegments"),
        ("TREDESS-FS-MIB", "dttRx1IsdbtLBInterleaveLength"),
        ("TREDESS-FS-MIB", "dttRx1IsdbtLBConstellation"),
        ("TREDESS-FS-MIB", "dttRx1IsdbtLBCodeRate"),
        ("TREDESS-FS-MIB", "dttRx1IsdbtLBCber"),
        ("TREDESS-FS-MIB", "dttRx1IsdbtLBBERbeforeRS"),
        ("TREDESS-FS-MIB", "dttRx1IsdbtLCSegments"),
        ("TREDESS-FS-MIB", "dttRx1IsdbtLCInterleaveLength"),
        ("TREDESS-FS-MIB", "dttRx1IsdbtLCConstellation"),
        ("TREDESS-FS-MIB", "dttRx1IsdbtLCCodeRate"),
        ("TREDESS-FS-MIB", "dttRx1IsdbtLCCber"),
        ("TREDESS-FS-MIB", "dttRx1IsdbtLCBERbeforeRS"),
        ("TREDESS-FS-MIB", "dttRx1Mer"),
        ("TREDESS-FS-MIB", "dttRx1Snr"),
        ("TREDESS-FS-MIB", "dttRx1Level"),
        ("TREDESS-FS-MIB", "dstReceiver1Enable"),
        ("TREDESS-FS-MIB", "dstReceiver1Status"),
        ("TREDESS-FS-MIB", "dstReceiver1Temperature"),
        ("TREDESS-FS-MIB", "dstReceiver1Band"),
        ("TREDESS-FS-MIB", "dstReceiver1Frequency"),
        ("TREDESS-FS-MIB", "dstReceiver1Polarization"),
        ("TREDESS-FS-MIB", "dstReceiver1Satellite"),
        ("TREDESS-FS-MIB", "dstReceiver1DvbMode"),
        ("TREDESS-FS-MIB", "dstReceiver1SymbolRateMode"),
        ("TREDESS-FS-MIB", "dstReceiver1ConfiguredSymbolRate"),
        ("TREDESS-FS-MIB", "dstReceiver1MeasuredSymbolRate"),
        ("TREDESS-FS-MIB", "dstReceiver1Rolloff"),
        ("TREDESS-FS-MIB", "dstReceiver1Pilots"),
        ("TREDESS-FS-MIB", "dstReceiver1FrameLength"),
        ("TREDESS-FS-MIB", "dstReceiver1Modulation"),
        ("TREDESS-FS-MIB", "dstReceiver1Fec"),
        ("TREDESS-FS-MIB", "dstReceiver1PlsMode"),
        ("TREDESS-FS-MIB", "dstReceiver1Pls"),
        ("TREDESS-FS-MIB", "dstReceiver1Cber"),
        ("TREDESS-FS-MIB", "dstReceiver1Vber"),
        ("TREDESS-FS-MIB", "dstReceiver1Ldpc"),
        ("TREDESS-FS-MIB", "dstReceiver1Per"),
        ("TREDESS-FS-MIB", "dstReceiver1CN"),
        ("TREDESS-FS-MIB", "dstReceiver1LinkMarginThreshold"),
        ("TREDESS-FS-MIB", "dstReceiver1LinkMargin"),
        ("TREDESS-FS-MIB", "dstReceiver1Attenuation"),
        ("TREDESS-FS-MIB", "dstReceiver1Level"),
        ("TREDESS-FS-MIB", "dstReceiver1Mode"),
        ("TREDESS-FS-MIB", "dstReceiver1LnbStatus"),
        ("TREDESS-FS-MIB", "dstReceiver1LnbOlLow"),
        ("TREDESS-FS-MIB", "dstReceiver1LnbBandSwitchingFreq"),
        ("TREDESS-FS-MIB", "dstReceiver1LnbOlHigh"),
        ("TREDESS-FS-MIB", "dstReceiver1Voltage"),
        ("TREDESS-FS-MIB", "dstReceiver1Tone22kHz"),
        ("TREDESS-FS-MIB", "dstReceiver1OlManual"),
        ("TREDESS-FS-MIB", "dstReceiver1TsAvailableIsis"),
        ("TREDESS-FS-MIB", "dstReceiver1TsIsi"),
        ("TREDESS-FS-MIB", "dstReceiver1TsRate"),
        ("TREDESS-FS-MIB", "dstReceiver1TsMode"),
        ("TREDESS-FS-MIB", "dstReceiver1TsBissEnable"),
        ("TREDESS-FS-MIB", "dstReceiver1TsBissMode"),
        ("TREDESS-FS-MIB", "dstReceiver1TsBissPass"),
        ("TREDESS-FS-MIB", "dstReceiver1TsBissInjectId"),
        ("TREDESS-FS-MIB", "dstReceiver1TsCamEnable"),
        ("TREDESS-FS-MIB", "dstReceiver1TsCamStatus"),
        ("TREDESS-FS-MIB", "dstReceiver1TsCamReset"),
        ("TREDESS-FS-MIB", "dstDecryptEnable"),
        ("TREDESS-FS-MIB", "dstProgramId"),
        ("TREDESS-FS-MIB", "dstServiceName"),
        ("TREDESS-FS-MIB", "dstServiceStatus"),
        ("TREDESS-FS-MIB", "dstR1TsEtiOutputPid"),
        ("TREDESS-FS-MIB", "dstR1TsEtiOutputType"),
        ("TREDESS-FS-MIB", "dstR1TsEtiOutputStreamTo"),
        ("TREDESS-FS-MIB", "dstR1TsEtiOutputLayer"),
        ("TREDESS-FS-MIB", "dstR1TsEtiOutputInputBitrate"),
        ("TREDESS-FS-MIB", "dstR1TsEOCorrectedRsCodewords"),
        ("TREDESS-FS-MIB", "dstR1TsEONotCorrectedRsCodewords"),
        ("TREDESS-FS-MIB", "dstR1TsEtiOutputWithouService"),
        ("TREDESS-FS-MIB", "dstR1TsEOResetCounters"),
        ("TREDESS-FS-MIB", "inputChannel"),
        ("TREDESS-FS-MIB", "inputChannelOffset"),
        ("TREDESS-FS-MIB", "inputChannelResolution"),
        ("TREDESS-FS-MIB", "inputChannelChannel"),
        ("TREDESS-FS-MIB", "inputFrequency"),
        ("TREDESS-FS-MIB", "inputFrequencyMode"),
        ("TREDESS-FS-MIB", "inputCentralFrequency"),
        ("TREDESS-FS-MIB", "inputCentralFrequencyMHz"),
        ("TREDESS-FS-MIB", "inputLevel"),
        ("TREDESS-FS-MIB", "inputLevelThreshold"),
        ("TREDESS-FS-MIB", "inputFrequencyFlt"),
        ("TREDESS-FS-MIB", "modulatorInputOn"),
        ("TREDESS-FS-MIB", "modulatorLog"),
        ("TREDESS-FS-MIB", "muteMpegOverflow"),
        ("TREDESS-FS-MIB", "muteSfnReference"),
        ("TREDESS-FS-MIB", "modInBandLevelVariation"),
        ("TREDESS-FS-MIB", "muteT2miError"),
        ("TREDESS-FS-MIB", "newPassword"),
        ("TREDESS-FS-MIB", "inBandSignalling"),
        ("TREDESS-FS-MIB", "plpBer"),
        ("TREDESS-FS-MIB", "input01Status"),
        ("TREDESS-FS-MIB", "input02Description"),
        ("TREDESS-FS-MIB", "input02Duration"),
        ("TREDESS-FS-MIB", "input02Mode"),
        ("TREDESS-FS-MIB", "input02StandByStatus"),
        ("TREDESS-FS-MIB", "input02Status"),
        ("TREDESS-FS-MIB", "input4Status"),
        ("TREDESS-FS-MIB", "input4Pat"),
        ("TREDESS-FS-MIB", "asi1Enable"),
        ("TREDESS-FS-MIB", "asi2Enable"),
        ("TREDESS-FS-MIB", "eti1Enable"),
        ("TREDESS-FS-MIB", "eti1DetectedLayer"),
        ("TREDESS-FS-MIB", "eti1InputBitrate"),
        ("TREDESS-FS-MIB", "eti1CorrectedRSCodewords"),
        ("TREDESS-FS-MIB", "eti1NotCorrectedRSCodewords"),
        ("TREDESS-FS-MIB", "eti1TimeWithoutService"),
        ("TREDESS-FS-MIB", "eti1RxStatisticsReset"),
        ("TREDESS-FS-MIB", "eti2Enable"),
        ("TREDESS-FS-MIB", "eti2DetectedLayer"),
        ("TREDESS-FS-MIB", "eti2InputBitrate"),
        ("TREDESS-FS-MIB", "eti2CorrectedRSCodewords"),
        ("TREDESS-FS-MIB", "eti2NotCorrectedRSCodewords"),
        ("TREDESS-FS-MIB", "eti2TimeWithoutService"),
        ("TREDESS-FS-MIB", "eti2RxStatisticsReset"),
        ("TREDESS-FS-MIB", "ipInputAlarmName"),
        ("TREDESS-FS-MIB", "ldmosTransistor3Current"),
        ("TREDESS-FS-MIB", "isdbtNumberOfSegmentsLC"),
        ("TREDESS-FS-MIB", "ldmosTransistor4Current"),
        ("TREDESS-FS-MIB", "amStControlStatus"),
        ("TREDESS-FS-MIB", "amStHwStatus"),
        ("TREDESS-FS-MIB", "amStMuteSelfProtection"),
        ("TREDESS-FS-MIB", "amStForwardPower"),
        ("TREDESS-FS-MIB", "amStReversePower"),
        ("TREDESS-FS-MIB", "amStRfPhase"),
        ("TREDESS-FS-MIB", "amStTemperature"),
        ("TREDESS-FS-MIB", "amStCurrent1"),
        ("TREDESS-FS-MIB", "amStCurrent2"),
        ("TREDESS-FS-MIB", "amStCurrent3"),
        ("TREDESS-FS-MIB", "amStCurrent4"),
        ("TREDESS-FS-MIB", "amStCurrent5"),
        ("TREDESS-FS-MIB", "amStCurrent6"),
        ("TREDESS-FS-MIB", "amStReversePowerFlt"),
        ("TREDESS-FS-MIB", "amStDcLineVoltage1"),
        ("TREDESS-FS-MIB", "amStDcLineVoltage2"),
        ("TREDESS-FS-MIB", "amStPsuAStatus"),
        ("TREDESS-FS-MIB", "amStPsuBStatus"),
        ("TREDESS-FS-MIB", "amStPsuCStatus"),
        ("TREDESS-FS-MIB", "lengthOfTimeInvervaling"),
        ("TREDESS-FS-MIB", "asiBypassEqualizers"),
        ("TREDESS-FS-MIB", "nonSeamlessHysteresis"),
        ("TREDESS-FS-MIB", "higherPriorityHysteresis"),
        ("TREDESS-FS-MIB", "muteCauses"),
        ("TREDESS-FS-MIB", "muteOutputStatus"),
        ("TREDESS-FS-MIB", "muteSfnMargin"),
        ("TREDESS-FS-MIB", "muteGainMarginThreshold"),
        ("TREDESS-FS-MIB", "muteGainMargin"),
        ("TREDESS-FS-MIB", "muteErrorMip"),
        ("TREDESS-FS-MIB", "tsErrorMuteHysteresis"),
        ("TREDESS-FS-MIB", "muteCausesBinary"),
        ("TREDESS-FS-MIB", "mute10MHz"),
        ("TREDESS-FS-MIB", "mutesRf"),
        ("TREDESS-FS-MIB", "isdbtNetworkDelayMargin"),
        ("TREDESS-FS-MIB", "isdbtDelay"),
        ("TREDESS-FS-MIB", "isdbtRfDelay"),
        ("TREDESS-FS-MIB", "ntpRefresh"),
        ("TREDESS-FS-MIB", "ntpServer"),
        ("TREDESS-FS-MIB", "ntpClient"),
        ("TREDESS-FS-MIB", "ntpServerStatus"),
        ("TREDESS-FS-MIB", "ntpServerAlternative"),
        ("TREDESS-FS-MIB", "timezone"),
        ("TREDESS-FS-MIB", "output01Description"),
        ("TREDESS-FS-MIB", "output01Duration"),
        ("TREDESS-FS-MIB", "output01Mode"),
        ("TREDESS-FS-MIB", "output01StandByStatus"),
        ("TREDESS-FS-MIB", "output01Status"),
        ("TREDESS-FS-MIB", "output02Description"),
        ("TREDESS-FS-MIB", "output02Duration"),
        ("TREDESS-FS-MIB", "output02Mode"),
        ("TREDESS-FS-MIB", "output02StandByStatus"),
        ("TREDESS-FS-MIB", "output02Status"),
        ("TREDESS-FS-MIB", "outputFrequencyMode"),
        ("TREDESS-FS-MIB", "publicUserPassword"),
        ("TREDESS-FS-MIB", "r1p1AutoVDailyTime"),
        ("TREDESS-FS-MIB", "r1p1AutoVDailyMode"),
        ("TREDESS-FS-MIB", "r1p1AutoVDailyWindow"),
        ("TREDESS-FS-MIB", "r1p1AutoVAlarmEnable"),
        ("TREDESS-FS-MIB", "r1p1PriorityInversionEnable"),
        ("TREDESS-FS-MIB", "r1p1PriorityInversionPeriod"),
        ("TREDESS-FS-MIB", "r1p1PriorityInversionTime"),
        ("TREDESS-FS-MIB", "r1p1Reset"),
        ("TREDESS-FS-MIB", "r1p1SyncWeb"),
        ("TREDESS-FS-MIB", "r1p1SyncDate"),
        ("TREDESS-FS-MIB", "r1p1SyncSnmp"),
        ("TREDESS-FS-MIB", "r1p1SyncEvents"),
        ("TREDESS-FS-MIB", "r1p1SyncIO"),
        ("TREDESS-FS-MIB", "r1p1SyncInput"),
        ("TREDESS-FS-MIB", "r1p1SyncRfInput"),
        ("TREDESS-FS-MIB", "r1p1SyncCanceller"),
        ("TREDESS-FS-MIB", "r1p1SyncModulator"),
        ("TREDESS-FS-MIB", "r1p1SyncRfConfiguration"),
        ("TREDESS-FS-MIB", "r1p1SyncMutes"),
        ("TREDESS-FS-MIB", "r1p1SyncAmplifier"),
        ("TREDESS-FS-MIB", "r1p1SyncExternalAmplifier"),
        ("TREDESS-FS-MIB", "r1p1SyncReference"),
        ("TREDESS-FS-MIB", "r1p1AutoVMaxVerifications"),
        ("TREDESS-FS-MIB", "r1p1AutoVNexVerification"),
        ("TREDESS-FS-MIB", "r1p1AutoVPerformedVerifications"),
        ("TREDESS-FS-MIB", "r1p1AutoVReiteratedEnable"),
        ("TREDESS-FS-MIB", "r1p1EnableNCB"),
        ("TREDESS-FS-MIB", "rPrDdSystemIp"),
        ("TREDESS-FS-MIB", "rPrDdSwitchToAntenna"),
        ("TREDESS-FS-MIB", "r1p1PriorityAB"),
        ("TREDESS-FS-MIB", "r1p1AutoReturn"),
        ("TREDESS-FS-MIB", "rPrDdDeviceIdentifier"),
        ("TREDESS-FS-MIB", "rPrDdControlBusStatus"),
        ("TREDESS-FS-MIB", "r1p1Mode"),
        ("TREDESS-FS-MIB", "r1p1priorityNCB"),
        ("TREDESS-FS-MIB", "r1p1StatusNCB"),
        ("TREDESS-FS-MIB", "r1p1StatusWhenLoad"),
        ("TREDESS-FS-MIB", "readCommunity1"),
        ("TREDESS-FS-MIB", "readCommunity2"),
        ("TREDESS-FS-MIB", "remoteGateway"),
        ("TREDESS-FS-MIB", "remoteIp"),
        ("TREDESS-FS-MIB", "remoteNetmask"),
        ("TREDESS-FS-MIB", "rfOut1p1"),
        ("TREDESS-FS-MIB", "isdbtBitrateLA"),
        ("TREDESS-FS-MIB", "isdbtBerLA"),
        ("TREDESS-FS-MIB", "rfOutAlarmStatus"),
        ("TREDESS-FS-MIB", "isdbtCodeRateLA"),
        ("TREDESS-FS-MIB", "rfOutExt1"),
        ("TREDESS-FS-MIB", "isdbtConstellationLA"),
        ("TREDESS-FS-MIB", "modLowerShoulder"),
        ("TREDESS-FS-MIB", "rfOutExt2"),
        ("TREDESS-FS-MIB", "rfOutTrap"),
        ("TREDESS-FS-MIB", "isdbtFft"),
        ("TREDESS-FS-MIB", "dabTransmitterId"),
        ("TREDESS-FS-MIB", "dabMode"),
        ("TREDESS-FS-MIB", "dabNetworkType"),
        ("TREDESS-FS-MIB", "dabSynchronizationType"),
        ("TREDESS-FS-MIB", "dabRelativeSfnReference"),
        ("TREDESS-FS-MIB", "dabAbsoluteSfnReference"),
        ("TREDESS-FS-MIB", "dabAvailableTimestampType"),
        ("TREDESS-FS-MIB", "dabBufferingTime"),
        ("TREDESS-FS-MIB", "dabProcessingDelay"),
        ("TREDESS-FS-MIB", "dabMinimumProcessingDelay"),
        ("TREDESS-FS-MIB", "dabProcessingDelayCfg"),
        ("TREDESS-FS-MIB", "dabDynamicCompensationDelay"),
        ("TREDESS-FS-MIB", "dabCompensationDelay"),
        ("TREDESS-FS-MIB", "dabMargin"),
        ("TREDESS-FS-MIB", "dabMaximumBitrateOffset"),
        ("TREDESS-FS-MIB", "dabBitrateOffset"),
        ("TREDESS-FS-MIB", "dabTimestampLevel"),
        ("TREDESS-FS-MIB", "dabTistFct"),
        ("TREDESS-FS-MIB", "dabFct0AsReference"),
        ("TREDESS-FS-MIB", "dabLocalDelay"),
        ("TREDESS-FS-MIB", "dabOffsetDelayAutoconfigure"),
        ("TREDESS-FS-MIB", "dabTiiCodeConfiguration"),
        ("TREDESS-FS-MIB", "dabMainId"),
        ("TREDESS-FS-MIB", "dabSubId"),
        ("TREDESS-FS-MIB", "dabReceivedInformationTime"),
        ("TREDESS-FS-MIB", "dabDateAndTime"),
        ("TREDESS-FS-MIB", "dabTimeAccurary"),
        ("TREDESS-FS-MIB", "dabSynchronizationToFrame"),
        ("TREDESS-FS-MIB", "dabReceivedTSC"),
        ("TREDESS-FS-MIB", "dabSavedTSC"),
        ("TREDESS-FS-MIB", "dabOffsetDelayTSC"),
        ("TREDESS-FS-MIB", "dabMainIdTSC"),
        ("TREDESS-FS-MIB", "dabSubIdTSC"),
        ("TREDESS-FS-MIB", "dabControlFlagsTSC"),
        ("TREDESS-FS-MIB", "dabStcNumberOfServices"),
        ("TREDESS-FS-MIB", "dabStcSubChId"),
        ("TREDESS-FS-MIB", "dabStcSubChSa"),
        ("TREDESS-FS-MIB", "dabStcTpl"),
        ("TREDESS-FS-MIB", "dabStcBitrate"),
        ("TREDESS-FS-MIB", "modLinearPrecorrectionEnable"),
        ("TREDESS-FS-MIB", "rfOutInputOn"),
        ("TREDESS-FS-MIB", "isdbtNumberOfSegmentsLA"),
        ("TREDESS-FS-MIB", "isdbtGuardInterval"),
        ("TREDESS-FS-MIB", "modNonLinearPrecorrectionEnable"),
        ("TREDESS-FS-MIB", "modNonLinearStoredPrecorrection"),
        ("TREDESS-FS-MIB", "modNonLinearPrecorrectorFeedback"),
        ("TREDESS-FS-MIB", "rfReset"),
        ("TREDESS-FS-MIB", "isdbtPartialReception"),
        ("TREDESS-FS-MIB", "modPrecorrectorFeedback"),
        ("TREDESS-FS-MIB", "isdbtTimeIntervalLengthLA"),
        ("TREDESS-FS-MIB", "modPrecorrectorOutput"),
        ("TREDESS-FS-MIB", "modPrecorrectorInput"),
        ("TREDESS-FS-MIB", "rxDtt11p1"),
        ("TREDESS-FS-MIB", "modPrecorrectorStatus"),
        ("TREDESS-FS-MIB", "isdbtBandwidth"),
        ("TREDESS-FS-MIB", "rxDtt1AlarmStatus"),
        ("TREDESS-FS-MIB", "rxDtt1Ext1"),
        ("TREDESS-FS-MIB", "rxDtt1Ext2"),
        ("TREDESS-FS-MIB", "rxDtt1Trap"),
        ("TREDESS-FS-MIB", "rxDtt1InputOn"),
        ("TREDESS-FS-MIB", "rxDtt1Log"),
        ("TREDESS-FS-MIB", "rxDtt21p1"),
        ("TREDESS-FS-MIB", "rxDtt2AlarmName"),
        ("TREDESS-FS-MIB", "isdbtNetworkType"),
        ("TREDESS-FS-MIB", "isdbtStaticDelay"),
        ("TREDESS-FS-MIB", "isdbtInputMode"),
        ("TREDESS-FS-MIB", "muteBtsError"),
        ("TREDESS-FS-MIB", "rxDtt2AlarmStatus"),
        ("TREDESS-FS-MIB", "rxDtt2Trap"),
        ("TREDESS-FS-MIB", "rxDtt2InputOn"),
        ("TREDESS-FS-MIB", "isdbtLocalDelay"),
        ("TREDESS-FS-MIB", "isdbtBufferDuration"),
        ("TREDESS-FS-MIB", "rxDtt2Log"),
        ("TREDESS-FS-MIB", "rfInAlarmName"),
        ("TREDESS-FS-MIB", "rfInAlarmStatus"),
        ("TREDESS-FS-MIB", "rfInInputOn"),
        ("TREDESS-FS-MIB", "rfInLog"),
        ("TREDESS-FS-MIB", "rfInFault"),
        ("TREDESS-FS-MIB", "rfInWarning"),
        ("TREDESS-FS-MIB", "rfInLed"),
        ("TREDESS-FS-MIB", "rfIn1p1"),
        ("TREDESS-FS-MIB", "rfInExt1"),
        ("TREDESS-FS-MIB", "rfInExt2"),
        ("TREDESS-FS-MIB", "rfInTrap"),
        ("TREDESS-FS-MIB", "cancellerAlarmName"),
        ("TREDESS-FS-MIB", "cancellerAlarmStatus"),
        ("TREDESS-FS-MIB", "cancellerInputOn"),
        ("TREDESS-FS-MIB", "cancellerLog"),
        ("TREDESS-FS-MIB", "cancellerFault"),
        ("TREDESS-FS-MIB", "cancellerWarning"),
        ("TREDESS-FS-MIB", "cancellerLed"),
        ("TREDESS-FS-MIB", "canceller1p1"),
        ("TREDESS-FS-MIB", "cancellerExt1"),
        ("TREDESS-FS-MIB", "numberOfPlps"),
        ("TREDESS-FS-MIB", "cancellerExt2"),
        ("TREDESS-FS-MIB", "cancellerTrap"),
        ("TREDESS-FS-MIB", "rxSat1Log"),
        ("TREDESS-FS-MIB", "sendTestTrap"),
        ("TREDESS-FS-MIB", "lastUpdate"),
        ("TREDESS-FS-MIB", "ipInputStatus"),
        ("TREDESS-FS-MIB", "ipSocket1ErrorStatus"),
        ("TREDESS-FS-MIB", "ipSocket2ErrorStatus"),
        ("TREDESS-FS-MIB", "rackCoolingStatus"),
        ("TREDESS-FS-MIB", "rackCoolingTemperatureStatus"),
        ("TREDESS-FS-MIB", "pressureDifferenceStatus"),
        ("TREDESS-FS-MIB", "rackCoolingHwErrorStatus"),
        ("TREDESS-FS-MIB", "hwErrorStatus"),
        ("TREDESS-FS-MIB", "ipInputExt1"),
        ("TREDESS-FS-MIB", "ipInputFault"),
        ("TREDESS-FS-MIB", "ipInputLog"),
        ("TREDESS-FS-MIB", "modulator1p1"),
        ("TREDESS-FS-MIB", "modulatorAlarmName"),
        ("TREDESS-FS-MIB", "modulatorAlarmStatus"),
        ("TREDESS-FS-MIB", "r1p1AutoVReiteratedPeriod"),
        ("TREDESS-FS-MIB", "r1p1Switchings"),
        ("TREDESS-FS-MIB", "referenceSourceStatus"),
        ("TREDESS-FS-MIB", "referenceSwitchMode"),
        ("TREDESS-FS-MIB", "rfOutLed"),
        ("TREDESS-FS-MIB", "rfOutLog"),
        ("TREDESS-FS-MIB", "rxDtt1Led"),
        ("TREDESS-FS-MIB", "rxDtt2Fault"),
        ("TREDESS-FS-MIB", "rxDtt2Warning"),
        ("TREDESS-FS-MIB", "rxSat1Fault"),
        ("TREDESS-FS-MIB", "rxSat1InputOn"),
        ("TREDESS-FS-MIB", "rxSat2Ext2"),
        ("TREDESS-FS-MIB", "rxSat2Trap"),
        ("TREDESS-FS-MIB", "rxSat2InputOn"),
        ("TREDESS-FS-MIB", "rxSat2Led"),
        ("TREDESS-FS-MIB", "rxSat2Log"),
        ("TREDESS-FS-MIB", "serialNumber"),
        ("TREDESS-FS-MIB", "partNumber"),
        ("TREDESS-FS-MIB", "internalDcSupplyVoltageStatus"),
        ("TREDESS-FS-MIB", "nonLinearSenseFeedback"),
        ("TREDESS-FS-MIB", "amplifierOutputSample"),
        ("TREDESS-FS-MIB", "ipInputWarning"),
        ("TREDESS-FS-MIB", "modulatorExt1"),
        ("TREDESS-FS-MIB", "modulatorExt2"),
        ("TREDESS-FS-MIB", "modulatorTrap"),
        ("TREDESS-FS-MIB", "modulatorFault"),
        ("TREDESS-FS-MIB", "modulatorLed"),
        ("TREDESS-FS-MIB", "numberOfFecBlocks"),
        ("TREDESS-FS-MIB", "rxSat11p1"),
        ("TREDESS-FS-MIB", "rxSat1AlarmName"),
        ("TREDESS-FS-MIB", "rxSat1AlarmStatus"),
        ("TREDESS-FS-MIB", "inputStatusCalibration"),
        ("TREDESS-FS-MIB", "inputLevelMeasureCalibration"),
        ("TREDESS-FS-MIB", "powerStatusCalibration"),
        ("TREDESS-FS-MIB", "powerLevelMeasureCalibration"),
        ("TREDESS-FS-MIB", "automaticRfPhaseAdjustment"),
        ("TREDESS-FS-MIB", "nonLinearStatusPrecorrection"),
        ("TREDESS-FS-MIB", "cancelNonLinearPrecorrection"),
        ("TREDESS-FS-MIB", "startNonLinearPrecorrection"),
        ("TREDESS-FS-MIB", "linearStatusPrecorrection"),
        ("TREDESS-FS-MIB", "startLinearPrecorrectionBBPF"),
        ("TREDESS-FS-MIB", "startLinearPrecorrectionABPF"),
        ("TREDESS-FS-MIB", "acApparentPower"),
        ("TREDESS-FS-MIB", "acEfficiency"),
        ("TREDESS-FS-MIB", "efficiencyStatusCalibration"),
        ("TREDESS-FS-MIB", "cancelEfficiencyCalibration"),
        ("TREDESS-FS-MIB", "efficiencyShoulderMeasure"),
        ("TREDESS-FS-MIB", "efficiencyShoulderTarget"),
        ("TREDESS-FS-MIB", "efficiencyMerMeasure"),
        ("TREDESS-FS-MIB", "efficiencyMerTarget"),
        ("TREDESS-FS-MIB", "sfnMargin"),
        ("TREDESS-FS-MIB", "softwareVersion"),
        ("TREDESS-FS-MIB", "softwareId"),
        ("TREDESS-FS-MIB", "ctrlBoard"),
        ("TREDESS-FS-MIB", "ctrlCBoard"),
        ("TREDESS-FS-MIB", "ctrlMBoard"),
        ("TREDESS-FS-MIB", "signalBoardGf"),
        ("TREDESS-FS-MIB", "signalBoardTx"),
        ("TREDESS-FS-MIB", "extraDigitalDacModulator"),
        ("TREDESS-FS-MIB", "satelliteBoard"),
        ("TREDESS-FS-MIB", "dabBoard"),
        ("TREDESS-FS-MIB", "dabEti2"),
        ("TREDESS-FS-MIB", "dabGfBoard"),
        ("TREDESS-FS-MIB", "terrestialReceiver1Board"),
        ("TREDESS-FS-MIB", "terrestialReceiver2Board"),
        ("TREDESS-FS-MIB", "satelliteReceiver1Board"),
        ("TREDESS-FS-MIB", "satelliteReceiver2Board"),
        ("TREDESS-FS-MIB", "onePlusOneRedundancy"),
        ("TREDESS-FS-MIB", "externalFeedback"),
        ("TREDESS-FS-MIB", "relay1p1Interface"),
        ("TREDESS-FS-MIB", "i2o8Interface"),
        ("TREDESS-FS-MIB", "externalInterlock"),
        ("TREDESS-FS-MIB", "i4o10Interface"),
        ("TREDESS-FS-MIB", "dcConnector"),
        ("TREDESS-FS-MIB", "rfBooster"),
        ("TREDESS-FS-MIB", "ctrlBusInterface"),
        ("TREDESS-FS-MIB", "amplifierHw"),
        ("TREDESS-FS-MIB", "amplifierHwRevision"),
        ("TREDESS-FS-MIB", "amplifierStageType"),
        ("TREDESS-FS-MIB", "amplifierStageSN"),
        ("TREDESS-FS-MIB", "gnssReceiverHw"),
        ("TREDESS-FS-MIB", "externalReferenceHw"),
        ("TREDESS-FS-MIB", "redundantPsuHw"),
        ("TREDESS-FS-MIB", "ocxoReferenceHw"),
        ("TREDESS-FS-MIB", "referenceHwSerialNumber"),
        ("TREDESS-FS-MIB", "rackCooling1Hw"),
        ("TREDESS-FS-MIB", "rackCooling2Hw"),
        ("TREDESS-FS-MIB", "rackCooling3Hw"),
        ("TREDESS-FS-MIB", "rackCooling4Hw"),
        ("TREDESS-FS-MIB", "asi1Matrix1Hw"),
        ("TREDESS-FS-MIB", "asi1Matrix2Hw"),
        ("TREDESS-FS-MIB", "asi2Matrix1Hw"),
        ("TREDESS-FS-MIB", "asi2Matrix2Hw"),
        ("TREDESS-FS-MIB", "rackCooling5Hw"),
        ("TREDESS-FS-MIB", "rackCooling6Hw"),
        ("TREDESS-FS-MIB", "rfMatrix1Hw"),
        ("TREDESS-FS-MIB", "rfMatrix2Hw"),
        ("TREDESS-FS-MIB", "rackCooling7Hw"),
        ("TREDESS-FS-MIB", "eti1Matrix1Hw"),
        ("TREDESS-FS-MIB", "eti1Matrix2Hw"),
        ("TREDESS-FS-MIB", "eti2Matrix1Hw"),
        ("TREDESS-FS-MIB", "eti2Matrix2Hw"),
        ("TREDESS-FS-MIB", "snmpSw"),
        ("TREDESS-FS-MIB", "dvbtSw"),
        ("TREDESS-FS-MIB", "dvbt2Sw"),
        ("TREDESS-FS-MIB", "isdbtSw"),
        ("TREDESS-FS-MIB", "deecSw"),
        ("TREDESS-FS-MIB", "isdbtRemuxSw"),
        ("TREDESS-FS-MIB", "onePlusOneSw"),
        ("TREDESS-FS-MIB", "dualDriveSw"),
        ("TREDESS-FS-MIB", "atsc1Sw"),
        ("TREDESS-FS-MIB", "dabSw"),
        ("TREDESS-FS-MIB", "unlimitedPowerSw"),
        ("TREDESS-FS-MIB", "monitoringSw"),
        ("TREDESS-FS-MIB", "np1Sw"),
        ("TREDESS-FS-MIB", "bissDecription"),
        ("TREDESS-FS-MIB", "btsDecompressionRma"),
        ("TREDESS-FS-MIB", "internalErrorStatus"),
        ("TREDESS-FS-MIB", "modulatorWarning"),
        ("TREDESS-FS-MIB", "muteTsError"),
        ("TREDESS-FS-MIB", "rfOutAlarmName"),
        ("TREDESS-FS-MIB", "rfOutFault"),
        ("TREDESS-FS-MIB", "rfOutWarning"),
        ("TREDESS-FS-MIB", "rxSat1Ext1"),
        ("TREDESS-FS-MIB", "rxSat1Ext2"),
        ("TREDESS-FS-MIB", "rxSat1Trap"),
        ("TREDESS-FS-MIB", "rxSat1Warning"),
        ("TREDESS-FS-MIB", "rxSat21p1"),
        ("TREDESS-FS-MIB", "rxSat2AlarmStatus"),
        ("TREDESS-FS-MIB", "rxSat2Ext1"),
        ("TREDESS-FS-MIB", "selected10Mhz"),
        ("TREDESS-FS-MIB", "externalReferenceOutputs"),
        ("TREDESS-FS-MIB", "selected1Pps"),
        ("TREDESS-FS-MIB", "receiverType"),
        ("TREDESS-FS-MIB", "receiverSerial"),
        ("TREDESS-FS-MIB", "synchronizationStatus"),
        ("TREDESS-FS-MIB", "synchronizationTemperature"),
        ("TREDESS-FS-MIB", "socket1InputBitrate"),
        ("TREDESS-FS-MIB", "socket1Latency"),
        ("TREDESS-FS-MIB", "socket1MulticastIp"),
        ("TREDESS-FS-MIB", "socket1Port"),
        ("TREDESS-FS-MIB", "socket1Protocol"),
        ("TREDESS-FS-MIB", "socket1SourceIp"),
        ("TREDESS-FS-MIB", "socket1TransmissionMode"),
        ("TREDESS-FS-MIB", "socket1UnicastIp"),
        ("TREDESS-FS-MIB", "socket1VlanEnable"),
        ("TREDESS-FS-MIB", "socket1Content"),
        ("TREDESS-FS-MIB", "socket1Jitter"),
        ("TREDESS-FS-MIB", "socket1DabFec"),
        ("TREDESS-FS-MIB", "socket1RxPackets"),
        ("TREDESS-FS-MIB", "socket1RxDisorderedPkts"),
        ("TREDESS-FS-MIB", "socket1RxDuplicatedPkts"),
        ("TREDESS-FS-MIB", "socket1RxReorderedPkts"),
        ("TREDESS-FS-MIB", "socket1RxLostPkts"),
        ("TREDESS-FS-MIB", "socket1RxOutOfRangePackets"),
        ("TREDESS-FS-MIB", "socket1RxFixedPackets"),
        ("TREDESS-FS-MIB", "socket1CorrectedRSCodewords"),
        ("TREDESS-FS-MIB", "socket1NotCorrectedRSCodewords"),
        ("TREDESS-FS-MIB", "socket1TimeWithoutService"),
        ("TREDESS-FS-MIB", "socket1RxStatisticsReset"),
        ("TREDESS-FS-MIB", "socket1UnicastNetmask"),
        ("TREDESS-FS-MIB", "socket1MacAddr"),
        ("TREDESS-FS-MIB", "socket2Content"),
        ("TREDESS-FS-MIB", "socket2Jitter"),
        ("TREDESS-FS-MIB", "socket2DabFec"),
        ("TREDESS-FS-MIB", "socket2RxPackets"),
        ("TREDESS-FS-MIB", "socket2RxDisorderedPkts"),
        ("TREDESS-FS-MIB", "socket2RxDuplicatedPkts"),
        ("TREDESS-FS-MIB", "socket2RxReorderedPkts"),
        ("TREDESS-FS-MIB", "socket2RxLostPkts"),
        ("TREDESS-FS-MIB", "socket2RxOutOfRangePackets"),
        ("TREDESS-FS-MIB", "socket2RxFixedPackets"),
        ("TREDESS-FS-MIB", "socket2CorrectedRSCodewords"),
        ("TREDESS-FS-MIB", "socket2NotCorrectedRSCodewords"),
        ("TREDESS-FS-MIB", "socket2TimeWithoutService"),
        ("TREDESS-FS-MIB", "socket2RxStatisticsReset"),
        ("TREDESS-FS-MIB", "socket2UnicastNetmask"),
        ("TREDESS-FS-MIB", "socket2MacAddr"),
        ("TREDESS-FS-MIB", "socket2BufferDuration"),
        ("TREDESS-FS-MIB", "socket2Enable"),
        ("TREDESS-FS-MIB", "socket2Fec"),
        ("TREDESS-FS-MIB", "socket2InputBitrate"),
        ("TREDESS-FS-MIB", "isdbtTimeIntervalLengthLC"),
        ("TREDESS-FS-MIB", "isdbtNumberOfSegmentsLB"),
        ("TREDESS-FS-MIB", "socket2Latency"),
        ("TREDESS-FS-MIB", "socket2MulticastIp"),
        ("TREDESS-FS-MIB", "socket2Protocol"),
        ("TREDESS-FS-MIB", "socket2SourceIp"),
        ("TREDESS-FS-MIB", "isdbtPidsLA"),
        ("TREDESS-FS-MIB", "socket2TransmissionMode"),
        ("TREDESS-FS-MIB", "socket2UnicastIp"),
        ("TREDESS-FS-MIB", "socket2VlanEnable"),
        ("TREDESS-FS-MIB", "socket2VlanId"),
        ("TREDESS-FS-MIB", "sourceSelected"),
        ("TREDESS-FS-MIB", "switchingMode"),
        ("TREDESS-FS-MIB", "monitorOutput"),
        ("TREDESS-FS-MIB", "mipErrorStatus"),
        ("TREDESS-FS-MIB", "modulatorOutputStatus"),
        ("TREDESS-FS-MIB", "modulatorShouldersStatus"),
        ("TREDESS-FS-MIB", "modulatorMerStatus"),
        ("TREDESS-FS-MIB", "modulatorExternalFeedbackStatus"),
        ("TREDESS-FS-MIB", "modulatorBerStatus"),
        ("TREDESS-FS-MIB", "mpegOverflowStatus"),
        ("TREDESS-FS-MIB", "modulatorStatus"),
        ("TREDESS-FS-MIB", "ldmosTransistorsStatus"),
        ("TREDESS-FS-MIB", "isdbtProcessingDelay"),
        ("TREDESS-FS-MIB", "amplifierAlarmStatus"),
        ("TREDESS-FS-MIB", "outputChannel"),
        ("TREDESS-FS-MIB", "outputFrequency"),
        ("TREDESS-FS-MIB", "outputFrequencyFlt"),
        ("TREDESS-FS-MIB", "plpConstellation"),
        ("TREDESS-FS-MIB", "plpGroupId"),
        ("TREDESS-FS-MIB", "plpId"),
        ("TREDESS-FS-MIB", "plpMode"),
        ("TREDESS-FS-MIB", "plpType"),
        ("TREDESS-FS-MIB", "r1p1AutoVDailyEnable"),
        ("TREDESS-FS-MIB", "r1p1AutoVerificationsStatus"),
        ("TREDESS-FS-MIB", "r1p1AutoVDuration"),
        ("TREDESS-FS-MIB", "r1p1AutoVReiteratedCadence"),
        ("TREDESS-FS-MIB", "r1p1MaximumSwitchings"),
        ("TREDESS-FS-MIB", "r1p1InputTest"),
        ("TREDESS-FS-MIB", "r1p1InputValidation"),
        ("TREDESS-FS-MIB", "r1p1PowerValidation"),
        ("TREDESS-FS-MIB", "r1p1SwitchingHysteresis"),
        ("TREDESS-FS-MIB", "r1p1RfSwitchStatus"),
        ("TREDESS-FS-MIB", "r1p1StatusA"),
        ("TREDESS-FS-MIB", "switchingCausesA"),
        ("TREDESS-FS-MIB", "r1p1StatusB"),
        ("TREDESS-FS-MIB", "switchingCausesB"),
        ("TREDESS-FS-MIB", "r1p1SwitchingCausesNCB"),
        ("TREDESS-FS-MIB", "r1p1StatusWhenAntenna"),
        ("TREDESS-FS-MIB", "rNp1DeviceIdentifier"),
        ("TREDESS-FS-MIB", "rNp1ControlBusStatus"),
        ("TREDESS-FS-MIB", "rNp1SystemIp"),
        ("TREDESS-FS-MIB", "rNp1NValue"),
        ("TREDESS-FS-MIB", "rNp1ManualSwitching"),
        ("TREDESS-FS-MIB", "rNp1Mode"),
        ("TREDESS-FS-MIB", "rNp1AutoReturn"),
        ("TREDESS-FS-MIB", "rNp1MaximumRestorations"),
        ("TREDESS-FS-MIB", "rNp1Window"),
        ("TREDESS-FS-MIB", "rNp1InputErrorTest"),
        ("TREDESS-FS-MIB", "rNp1SwitchingHysteresis"),
        ("TREDESS-FS-MIB", "rNp1ConfigurationDeviceB"),
        ("TREDESS-FS-MIB", "rNp1DeviceBStatusValue"),
        ("TREDESS-FS-MIB", "rNp1SwitchingCauses"),
        ("TREDESS-FS-MIB", "deviceAStatusValue"),
        ("TREDESS-FS-MIB", "deviceAStatusSwitchingCauses"),
        ("TREDESS-FS-MIB", "deviceAStatusRestorations"),
        ("TREDESS-FS-MIB", "deviceARfSwitchStatus"),
        ("TREDESS-FS-MIB", "rNp1DeviceToLoad"),
        ("TREDESS-FS-MIB", "rNp1PriorityManagement"),
        ("TREDESS-FS-MIB", "deviceAPriority"),
        ("TREDESS-FS-MIB", "deviceARf"),
        ("TREDESS-FS-MIB", "rNp1AutoVerificationsStatus"),
        ("TREDESS-FS-MIB", "rNp1AutoVDuration"),
        ("TREDESS-FS-MIB", "rNp1AutoVPerformedVerifications"),
        ("TREDESS-FS-MIB", "rNp1AutoVMaxVerifications"),
        ("TREDESS-FS-MIB", "rNp1AutoVNexVerification"),
        ("TREDESS-FS-MIB", "rNp1AutoVReiteratedEnable"),
        ("TREDESS-FS-MIB", "rNp1AutoVReiteratedPeriod"),
        ("TREDESS-FS-MIB", "rNp1AutoVReiteratedCadence"),
        ("TREDESS-FS-MIB", "rNp1AutoVDailyEnable"),
        ("TREDESS-FS-MIB", "rNp1AutoVDailyWindow"),
        ("TREDESS-FS-MIB", "rNp1AutoVDailyMode"),
        ("TREDESS-FS-MIB", "rNp1AutoVDailyTime"),
        ("TREDESS-FS-MIB", "rNp1VerificationAlarm"),
        ("TREDESS-FS-MIB", "rNp1Reset"),
        ("TREDESS-FS-MIB", "rNp1SyncAllConfigurations"),
        ("TREDESS-FS-MIB", "deviceBConfigurationA"),
        ("TREDESS-FS-MIB", "deviceBSynchronizeA"),
        ("TREDESS-FS-MIB", "asiMatrixControlStatus"),
        ("TREDESS-FS-MIB", "asiMatrixHwStatus"),
        ("TREDESS-FS-MIB", "asiMatrixSelected"),
        ("TREDESS-FS-MIB", "asi1InputStatus"),
        ("TREDESS-FS-MIB", "asi2InputStatus"),
        ("TREDESS-FS-MIB", "asi1InputLoopStatus"),
        ("TREDESS-FS-MIB", "asi2InputLoopStatus"),
        ("TREDESS-FS-MIB", "etiMatrixControlStatus"),
        ("TREDESS-FS-MIB", "etiMatrixHwStatus"),
        ("TREDESS-FS-MIB", "etiMatrixSelected"),
        ("TREDESS-FS-MIB", "eti1InputLoopStatus"),
        ("TREDESS-FS-MIB", "eti2InputLoopStatus"),
        ("TREDESS-FS-MIB", "eti1InputStatus"),
        ("TREDESS-FS-MIB", "eti2InputStatus"),
        ("TREDESS-FS-MIB", "decreasedPowerThreshold"),
        ("TREDESS-FS-MIB", "reverserPowerThreshold"),
        ("TREDESS-FS-MIB", "decreasedPowerThresholdNonCrit"),
        ("TREDESS-FS-MIB", "reversePowerFlt"),
        ("TREDESS-FS-MIB", "automaticPowerCompensationEnable"),
        ("TREDESS-FS-MIB", "compensationPerStage"),
        ("TREDESS-FS-MIB", "reversePower"),
        ("TREDESS-FS-MIB", "rotatedConstellation"),
        ("TREDESS-FS-MIB", "rxDtt1AlarmName"),
        ("TREDESS-FS-MIB", "rxDtt1Fault"),
        ("TREDESS-FS-MIB", "rxDtt1Warning"),
        ("TREDESS-FS-MIB", "rxDtt2Ext1"),
        ("TREDESS-FS-MIB", "rxDtt2Ext2"),
        ("TREDESS-FS-MIB", "rxDtt2Led"),
        ("TREDESS-FS-MIB", "rxSat1Led"),
        ("TREDESS-FS-MIB", "rxSat2AlarmName"),
        ("TREDESS-FS-MIB", "rxSat2Fault"),
        ("TREDESS-FS-MIB", "systemReset"),
        ("TREDESS-FS-MIB", "temperature"),
        ("TREDESS-FS-MIB", "trapKeepaliveEnable"),
        ("TREDESS-FS-MIB", "trapSinkEnable"),
        ("TREDESS-FS-MIB", "trapSinkInformRetry"),
        ("TREDESS-FS-MIB", "trapSinkCommunity"),
        ("TREDESS-FS-MIB", "trapSinkInformTimeout"),
        ("TREDESS-FS-MIB", "user"),
        ("TREDESS-FS-MIB", "trapKeepalive"),
        ("TREDESS-FS-MIB", "warningSummationStatus"),
        ("TREDESS-FS-MIB", "writeCommunity1"),
        ("TREDESS-FS-MIB", "writeCommunity2"),
        ("TREDESS-FS-MIB", "trapsLocalMode"),
        ("TREDESS-FS-MIB", "trapsInitialStatus"),
        ("TREDESS-FS-MIB", "sendAllTraps"),
        ("TREDESS-FS-MIB", "localOscillatorStatus"),
        ("TREDESS-FS-MIB", "exceededOutputPower"),
        ("TREDESS-FS-MIB", "decreasedOutputPower"),
        ("TREDESS-FS-MIB", "reflectPowerStatus"),
        ("TREDESS-FS-MIB", "rxSat2Warning"),
        ("TREDESS-FS-MIB", "psuAstatus"),
        ("TREDESS-FS-MIB", "psuAacInputVoltage"),
        ("TREDESS-FS-MIB", "psuAdcOutputVoltage"),
        ("TREDESS-FS-MIB", "psuAtemperature"),
        ("TREDESS-FS-MIB", "psuBstatus"),
        ("TREDESS-FS-MIB", "psuBacInputVoltage"),
        ("TREDESS-FS-MIB", "psuBdcOutputVoltage"),
        ("TREDESS-FS-MIB", "psuBtemperature"),
        ("TREDESS-FS-MIB", "serviceSwUpgradeMode"),
        ("TREDESS-FS-MIB", "serviceSwUpgradeServer"),
        ("TREDESS-FS-MIB", "serviceSwUpgradeUser"),
        ("TREDESS-FS-MIB", "serviceSwUpgradePassword"),
        ("TREDESS-FS-MIB", "serviceSwDaily"),
        ("TREDESS-FS-MIB", "serviceSwUpgradingFile"),
        ("TREDESS-FS-MIB", "serviceSwVersionFile"),
        ("TREDESS-FS-MIB", "serviceSwStatus"),
        ("TREDESS-FS-MIB", "serviceSwDownload"),
        ("TREDESS-FS-MIB", "serviceSwCheckNow"),
        ("TREDESS-FS-MIB", "serviceSwDownloadNow"),
        ("TREDESS-FS-MIB", "serviceSwUpgradeNow"),
        ("TREDESS-FS-MIB", "serviceInstallSyncBoard"),
        ("TREDESS-FS-MIB", "serviceRedundantPsu"),
        ("TREDESS-FS-MIB", "serviceInput2"),
        ("TREDESS-FS-MIB", "serviceTypeOfRedundancy"),
        ("TREDESS-FS-MIB", "serviceCanBusIdentifier"),
        ("TREDESS-FS-MIB", "serviceDualDriveRelay"),
        ("TREDESS-FS-MIB", "serviceNumberOfAmplifierStages"),
        ("TREDESS-FS-MIB", "rfPowerSample"),
        ("TREDESS-FS-MIB", "servicePsuAAmplifierStage"),
        ("TREDESS-FS-MIB", "servicePsuBAmplifierStage"),
        ("TREDESS-FS-MIB", "servicePsuCAmplifierStage"),
        ("TREDESS-FS-MIB", "serviceDetectedCoolingBoard"),
        ("TREDESS-FS-MIB", "serviceAssignAddressCoolingBoard"),
        ("TREDESS-FS-MIB", "serviceDeleteAddressCoolingBoard"),
        ("TREDESS-FS-MIB", "serviceRackCooling1Board"),
        ("TREDESS-FS-MIB", "serviceRackCooling2Board"),
        ("TREDESS-FS-MIB", "serviceRackCooling3Board"),
        ("TREDESS-FS-MIB", "serviceRackCooling4Board"),
        ("TREDESS-FS-MIB", "serviceRackCooling5Board"),
        ("TREDESS-FS-MIB", "serviceRackCooling6Board"),
        ("TREDESS-FS-MIB", "serviceRackCooling7Board"),
        ("TREDESS-FS-MIB", "serviceDetectedAsiMatrix"),
        ("TREDESS-FS-MIB", "serviceAssingAddressAsiMatrix"),
        ("TREDESS-FS-MIB", "serviceDeleteAddressAsiMatrix"),
        ("TREDESS-FS-MIB", "serviceInstalledAsiMatrix1"),
        ("TREDESS-FS-MIB", "serviceInstalledAsiMatrix2"),
        ("TREDESS-FS-MIB", "serviceDetectedRfMatrix"),
        ("TREDESS-FS-MIB", "serviceAssingAddressRfMatrix"),
        ("TREDESS-FS-MIB", "serviceDeleteAddressRfMatrix"),
        ("TREDESS-FS-MIB", "serviceInstalledRfMatrix"),
        ("TREDESS-FS-MIB", "serviceDetectedEtiMatrix"),
        ("TREDESS-FS-MIB", "serviceAssingAddressEtiMatrix"),
        ("TREDESS-FS-MIB", "serviceDeleteAddressEtiMatrix"),
        ("TREDESS-FS-MIB", "serviceInstalledEtiMatrix1"),
        ("TREDESS-FS-MIB", "serviceInstalledEtiMatrix2"),
        ("TREDESS-FS-MIB", "serviceInstallSwActivationCode"),
        ("TREDESS-FS-MIB", "socket1Enable"),
        ("TREDESS-FS-MIB", "socket1Fec"),
        ("TREDESS-FS-MIB", "socket1VlanId"),
        ("TREDESS-FS-MIB", "temperatureAmplifierStatus"),
        ("TREDESS-FS-MIB", "decreasedOutputPowerNonCritical"),
        ("TREDESS-FS-MIB", "trapSinkIpAddress"),
        ("TREDESS-FS-MIB", "tsErrorStatus"),
        ("TREDESS-FS-MIB", "t2miErrorStatus"),
        ("TREDESS-FS-MIB", "temperatureSynchronizationStatus"),
        ("TREDESS-FS-MIB", "input1ppsStatus"),
        ("TREDESS-FS-MIB", "sfnErrorStatus"),
        ("TREDESS-FS-MIB", "temperatureModulatorStatus"),
        ("TREDESS-FS-MIB", "rfInputStatus"),
        ("TREDESS-FS-MIB", "echoCancellerStatus"),
        ("TREDESS-FS-MIB", "inputLevelStatus"),
        ("TREDESS-FS-MIB", "reference10MHzStatus"),
        ("TREDESS-FS-MIB", "temperatureECStatus"),
        ("TREDESS-FS-MIB", "outputLevelStatus"),
        ("TREDESS-FS-MIB", "cancellerShouldersStatus"),
        ("TREDESS-FS-MIB", "cancellerMerStatus"),
        ("TREDESS-FS-MIB", "gainMarginStatus"),
        ("TREDESS-FS-MIB", "cancExternalFeedbackStatus"),
        ("TREDESS-FS-MIB", "inputDabErrorStatus"),
        ("TREDESS-FS-MIB", "etiInputStatus"),
        ("TREDESS-FS-MIB", "eti1ErrorStatus"),
        ("TREDESS-FS-MIB", "eti2ErrorStatus"),
        ("TREDESS-FS-MIB", "rfOutputStatus"),
        ("TREDESS-FS-MIB", "satReceiver1Status"),
        ("TREDESS-FS-MIB", "unlockSatReceiver1Status"),
        ("TREDESS-FS-MIB", "rfSignalSatReceiver1Status"),
        ("TREDESS-FS-MIB", "lnbOverloadSatReceiver1Status"),
        ("TREDESS-FS-MIB", "socket2Port"),
        ("TREDESS-FS-MIB", "temperatureSatReceiver1Status"),
        ("TREDESS-FS-MIB", "camSatReceiver1Status"),
        ("TREDESS-FS-MIB", "smartCardSatReceiver1Status"),
        ("TREDESS-FS-MIB", "smartCardRightsSatReceiver1Stat"),
        ("TREDESS-FS-MIB", "asiOutputSatReceiver1Status"),
        ("TREDESS-FS-MIB", "dttReceiver1AlarmStatus"),
        ("TREDESS-FS-MIB", "socket1BufferDuration"),
        ("TREDESS-FS-MIB", "unlockDttReceiver1Status"),
        ("TREDESS-FS-MIB", "modulatorStandard"),
        ("TREDESS-FS-MIB", "rfSignalDttReceiver1Status"),
        ("TREDESS-FS-MIB", "modulatorTestMode"),
        ("TREDESS-FS-MIB", "modulatorStandardAutoConfig"),
        ("TREDESS-FS-MIB", "modulatorPrbsType"),
        ("TREDESS-FS-MIB", "modulatorPrbsPid"),
        ("TREDESS-FS-MIB", "modulatorPrbsIn"),
        ("TREDESS-FS-MIB", "modulatorTemperature"),
        ("TREDESS-FS-MIB", "temperatureDttReceiver1Status"),
        ("TREDESS-FS-MIB", "trapSinkVersion"),
        ("TREDESS-FS-MIB", "satReceiver2Status"),
        ("TREDESS-FS-MIB", "unlockSatReceiver2Status"),
        ("TREDESS-FS-MIB", "rfSignalSatReceiver2Status"),
        ("TREDESS-FS-MIB", "lnbOverloadSatReceiver2Status"),
        ("TREDESS-FS-MIB", "temperatureSatReceiver2Status"),
        ("TREDESS-FS-MIB", "dttReceiver2AlarmStatus"),
        ("TREDESS-FS-MIB", "trapSinkPort"),
        ("TREDESS-FS-MIB", "unlockDttReceiver2Status"),
        ("TREDESS-FS-MIB", "rfSignalDttReceiver2Status"),
        ("TREDESS-FS-MIB", "temperatureDttReceiver2Status"),
        ("TREDESS-FS-MIB", "modUpperShoulder"),
        ("TREDESS-FS-MIB", "typeOfTimeInvervaling"),
        ("TREDESS-FS-MIB", "geralDD"),
        ("TREDESS-FS-MIB", "geralTrapHysteresis"),
        ("TREDESS-FS-MIB", "amplifierDD"),
        ("TREDESS-FS-MIB", "amplifierStage1DD"),
        ("TREDESS-FS-MIB", "amplifierStage2DD"),
        ("TREDESS-FS-MIB", "amplifierStage3DD"),
        ("TREDESS-FS-MIB", "amplifierStage4DD"),
        ("TREDESS-FS-MIB", "amplifierStagesDD"),
        ("TREDESS-FS-MIB", "asiDD"),
        ("TREDESS-FS-MIB", "etiAlarmName"),
        ("TREDESS-FS-MIB", "etiAlarmStatus"),
        ("TREDESS-FS-MIB", "etiOn"),
        ("TREDESS-FS-MIB", "etiLog"),
        ("TREDESS-FS-MIB", "etiFault"),
        ("TREDESS-FS-MIB", "etiWarning"),
        ("TREDESS-FS-MIB", "etiLed"),
        ("TREDESS-FS-MIB", "eti1p1"),
        ("TREDESS-FS-MIB", "etiExt1"),
        ("TREDESS-FS-MIB", "etiExt2"),
        ("TREDESS-FS-MIB", "etiTrap"),
        ("TREDESS-FS-MIB", "etiDD"),
        ("TREDESS-FS-MIB", "ipInputDD"),
        ("TREDESS-FS-MIB", "rxSat1DD"),
        ("TREDESS-FS-MIB", "rxSat2DD"),
        ("TREDESS-FS-MIB", "rxDtt1DD"),
        ("TREDESS-FS-MIB", "rxDtt2DD"),
        ("TREDESS-FS-MIB", "rfInDD"),
        ("TREDESS-FS-MIB", "rackCoolingAlarmName"),
        ("TREDESS-FS-MIB", "rackCoolingAlarmStatus"),
        ("TREDESS-FS-MIB", "rackCoolingInputOn"),
        ("TREDESS-FS-MIB", "rackCoolingLog"),
        ("TREDESS-FS-MIB", "rackCoolingFault"),
        ("TREDESS-FS-MIB", "rackCoolingWarning"),
        ("TREDESS-FS-MIB", "rackCoolingLed"),
        ("TREDESS-FS-MIB", "rackCooling1p1"),
        ("TREDESS-FS-MIB", "rackCoolingExt1"),
        ("TREDESS-FS-MIB", "rackCoolingExt2"),
        ("TREDESS-FS-MIB", "rackCoolingTrap"),
        ("TREDESS-FS-MIB", "rackCoolingDD"),
        ("TREDESS-FS-MIB", "cancellerDD"),
        ("TREDESS-FS-MIB", "modulatorDD"),
        ("TREDESS-FS-MIB", "rfOutDD"),
        ("TREDESS-FS-MIB", "errorHwDD"),
        ("TREDESS-FS-MIB", "fanDD"),
        ("TREDESS-FS-MIB", "externalDD"),
        ("TREDESS-FS-MIB", "powerSupplyDD"),
        ("TREDESS-FS-MIB", "dcInputAlarmName"),
        ("TREDESS-FS-MIB", "dcInputAlarmStatus"),
        ("TREDESS-FS-MIB", "dcInputOn"),
        ("TREDESS-FS-MIB", "dcInputLog"),
        ("TREDESS-FS-MIB", "dcInputFault"),
        ("TREDESS-FS-MIB", "dcInputWarning"),
        ("TREDESS-FS-MIB", "dcInputLed"),
        ("TREDESS-FS-MIB", "dcInput1p1"),
        ("TREDESS-FS-MIB", "dcInputExt1"),
        ("TREDESS-FS-MIB", "dcInputExt2"),
        ("TREDESS-FS-MIB", "dcInputTrap"),
        ("TREDESS-FS-MIB", "dcInputDD"),
        ("TREDESS-FS-MIB", "synchronizationDD"),
        ("TREDESS-FS-MIB", "redundancySysAlarmName"),
        ("TREDESS-FS-MIB", "redundancySysAlarmStatus"),
        ("TREDESS-FS-MIB", "redundancySysOn"),
        ("TREDESS-FS-MIB", "redundancySysLog"),
        ("TREDESS-FS-MIB", "redundancySysFault"),
        ("TREDESS-FS-MIB", "redundancySysWarning"),
        ("TREDESS-FS-MIB", "redundancySysLed"),
        ("TREDESS-FS-MIB", "redundancySys1p1"),
        ("TREDESS-FS-MIB", "redundancySysExt1"),
        ("TREDESS-FS-MIB", "redundancySysExt2"),
        ("TREDESS-FS-MIB", "redundancySysTrap"),
        ("TREDESS-FS-MIB", "redundancySysDD"),
        ("TREDESS-FS-MIB", "geralTrapHysteresis"),
        ("TREDESS-FS-MIB", "amplifierTrapHysteresis"),
        ("TREDESS-FS-MIB", "amplifierStage1TrapHysteresis"),
        ("TREDESS-FS-MIB", "amplifierStage2TrapHysteresis"),
        ("TREDESS-FS-MIB", "amplifierStage3TrapHysteresis"),
        ("TREDESS-FS-MIB", "amplifierStage4TrapHysteresis"),
        ("TREDESS-FS-MIB", "amplifierStagesTrapHysteresis"),
        ("TREDESS-FS-MIB", "asiTrapHysteresis"),
        ("TREDESS-FS-MIB", "etiTrapHysteresis"),
        ("TREDESS-FS-MIB", "ipInputTrapHysteresis"),
        ("TREDESS-FS-MIB", "rxSat1TrapHysteresis"),
        ("TREDESS-FS-MIB", "rxSat2TrapHysteresis"),
        ("TREDESS-FS-MIB", "rxDtt1TrapHysteresis"),
        ("TREDESS-FS-MIB", "rxDtt2TrapHysteresis"),
        ("TREDESS-FS-MIB", "rfInTrapHysteresis"),
        ("TREDESS-FS-MIB", "rackCoolingTrapHysteresis"),
        ("TREDESS-FS-MIB", "cancellerTrapHysteresis"),
        ("TREDESS-FS-MIB", "modulatorTrapHysteresis"),
        ("TREDESS-FS-MIB", "rfOutTrapHysteresis"),
        ("TREDESS-FS-MIB", "synchronizationTrapHysteresis"),
        ("TREDESS-FS-MIB", "errorHwTrapHysteresis"),
        ("TREDESS-FS-MIB", "fanTrapHysteresis"),
        ("TREDESS-FS-MIB", "externalTrapHysteresis"),
        ("TREDESS-FS-MIB", "powerSupplyTrapHysteresis"),
        ("TREDESS-FS-MIB", "dcInputTrapHysteresis"),
        ("TREDESS-FS-MIB", "redundancySysTrapHysteresis"))
)
if mibBuilder.loadTexts:
    groupFS.setStatus("current")

groupEvents = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 102, 1, 2)
)
groupEvents.setObjects(
      *(("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    groupEvents.setStatus("current")

groupObsoleted = ObjectGroup(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 102, 1, 3)
)
groupObsoleted.setObjects(
      *(("TREDESS-FS-MIB", "satellite01"),
        ("TREDESS-FS-MIB", "satellite02"),
        ("TREDESS-FS-MIB", "satellite03"),
        ("TREDESS-FS-MIB", "satellite04"),
        ("TREDESS-FS-MIB", "satellite05"),
        ("TREDESS-FS-MIB", "satellite06"),
        ("TREDESS-FS-MIB", "satellite07"),
        ("TREDESS-FS-MIB", "satellite08"),
        ("TREDESS-FS-MIB", "dvbtRateAdaptation"),
        ("TREDESS-FS-MIB", "cancelInputCalibration"))
)
if mibBuilder.loadTexts:
    groupObsoleted.setStatus("obsolete")


# Notification objects

faultSummationTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 1)
)
faultSummationTrap.setObjects(
      *(("TREDESS-FS-MIB", "faultSummationStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    faultSummationTrap.setStatus(
        "current"
    )

warningSummationTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 2)
)
warningSummationTrap.setObjects(
      *(("TREDESS-FS-MIB", "warningSummationStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    warningSummationTrap.setStatus(
        "current"
    )

amplifierSumTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 3)
)
amplifierSumTrap.setObjects(
      *(("TREDESS-FS-MIB", "amplifierStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    amplifierSumTrap.setStatus(
        "current"
    )

exceededOutputPowerTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 4)
)
exceededOutputPowerTrap.setObjects(
      *(("TREDESS-FS-MIB", "exceededOutputPower"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    exceededOutputPowerTrap.setStatus(
        "current"
    )

decreasedOutputPowerTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 5)
)
decreasedOutputPowerTrap.setObjects(
      *(("TREDESS-FS-MIB", "decreasedOutputPower"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    decreasedOutputPowerTrap.setStatus(
        "current"
    )

reflectedPowerTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 6)
)
reflectedPowerTrap.setObjects(
      *(("TREDESS-FS-MIB", "reflectPowerStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    reflectedPowerTrap.setStatus(
        "current"
    )

temperatureAmplifierTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 7)
)
temperatureAmplifierTrap.setObjects(
      *(("TREDESS-FS-MIB", "temperatureAmplifierStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    temperatureAmplifierTrap.setStatus(
        "current"
    )

asiInputTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 8)
)
asiInputTrap.setObjects(
      *(("TREDESS-FS-MIB", "asiInputStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    asiInputTrap.setStatus(
        "current"
    )

asi1ErrorTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 9)
)
asi1ErrorTrap.setObjects(
      *(("TREDESS-FS-MIB", "asi1ErrorStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    asi1ErrorTrap.setStatus(
        "current"
    )

asi2ErrorTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 10)
)
asi2ErrorTrap.setObjects(
      *(("TREDESS-FS-MIB", "asi2ErrorStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    asi2ErrorTrap.setStatus(
        "current"
    )

ipInputSumTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 11)
)
ipInputSumTrap.setObjects(
      *(("TREDESS-FS-MIB", "ipInputAlarmStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    ipInputSumTrap.setStatus(
        "current"
    )

ipSocket1ErrorTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 12)
)
ipSocket1ErrorTrap.setObjects(
      *(("TREDESS-FS-MIB", "ipSocket1ErrorStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    ipSocket1ErrorTrap.setStatus(
        "current"
    )

ipSocket2ErrorTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 13)
)
ipSocket2ErrorTrap.setObjects(
      *(("TREDESS-FS-MIB", "ipSocket2ErrorStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    ipSocket2ErrorTrap.setStatus(
        "current"
    )

satReceiver1Trap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 14)
)
satReceiver1Trap.setObjects(
      *(("TREDESS-FS-MIB", "satReceiver1Status"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    satReceiver1Trap.setStatus(
        "current"
    )

unlockSatReceiver1Trap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 15)
)
unlockSatReceiver1Trap.setObjects(
      *(("TREDESS-FS-MIB", "unlockSatReceiver1Status"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    unlockSatReceiver1Trap.setStatus(
        "current"
    )

rfSignalSatReceiver1Trap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 16)
)
rfSignalSatReceiver1Trap.setObjects(
      *(("TREDESS-FS-MIB", "rfSignalSatReceiver1Status"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    rfSignalSatReceiver1Trap.setStatus(
        "current"
    )

lnbOverloadSatReceiver1Trap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 17)
)
lnbOverloadSatReceiver1Trap.setObjects(
      *(("TREDESS-FS-MIB", "lnbOverloadSatReceiver1Status"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    lnbOverloadSatReceiver1Trap.setStatus(
        "current"
    )

temperatureSatReceiver1Trap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 18)
)
temperatureSatReceiver1Trap.setObjects(
      *(("TREDESS-FS-MIB", "temperatureSatReceiver1Status"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    temperatureSatReceiver1Trap.setStatus(
        "current"
    )

satReceiver2Trap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 19)
)
satReceiver2Trap.setObjects(
      *(("TREDESS-FS-MIB", "satReceiver2Status"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    satReceiver2Trap.setStatus(
        "current"
    )

unlockSatReceiver2Trap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 20)
)
unlockSatReceiver2Trap.setObjects(
      *(("TREDESS-FS-MIB", "unlockSatReceiver2Status"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    unlockSatReceiver2Trap.setStatus(
        "current"
    )

rfSignalSatReceiver2Trap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 21)
)
rfSignalSatReceiver2Trap.setObjects(
      *(("TREDESS-FS-MIB", "rfSignalSatReceiver1Status"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    rfSignalSatReceiver2Trap.setStatus(
        "current"
    )

lnbOverloadSatReceiver2Trap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 22)
)
lnbOverloadSatReceiver2Trap.setObjects(
      *(("TREDESS-FS-MIB", "lnbOverloadSatReceiver2Status"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    lnbOverloadSatReceiver2Trap.setStatus(
        "current"
    )

temperatureSatReceiver2Trap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 23)
)
temperatureSatReceiver2Trap.setObjects(
      *(("TREDESS-FS-MIB", "temperatureSatReceiver2Status"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    temperatureSatReceiver2Trap.setStatus(
        "current"
    )

dttReceiver1Trap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 24)
)
dttReceiver1Trap.setObjects(
      *(("TREDESS-FS-MIB", "dttReceiver1AlarmStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    dttReceiver1Trap.setStatus(
        "current"
    )

unlockDttReceiver1Trap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 25)
)
unlockDttReceiver1Trap.setObjects(
      *(("TREDESS-FS-MIB", "unlockDttReceiver1Status"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    unlockDttReceiver1Trap.setStatus(
        "current"
    )

rfSignalDttReceiver1Trap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 26)
)
rfSignalDttReceiver1Trap.setObjects(
      *(("TREDESS-FS-MIB", "rfSignalDttReceiver1Status"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    rfSignalDttReceiver1Trap.setStatus(
        "current"
    )

temperatureDttReceiver1Trap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 27)
)
temperatureDttReceiver1Trap.setObjects(
      *(("TREDESS-FS-MIB", "temperatureDttReceiver1Status"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    temperatureDttReceiver1Trap.setStatus(
        "current"
    )

dttReceiver2Trap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 28)
)
dttReceiver2Trap.setObjects(
      *(("TREDESS-FS-MIB", "dttReceiver2AlarmStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    dttReceiver2Trap.setStatus(
        "current"
    )

unlockDttReceiver2Trap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 29)
)
unlockDttReceiver2Trap.setObjects(
      *(("TREDESS-FS-MIB", "unlockDttReceiver2Status"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    unlockDttReceiver2Trap.setStatus(
        "current"
    )

rfSignalDttReceiver2Trap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 30)
)
rfSignalDttReceiver2Trap.setObjects(
      *(("TREDESS-FS-MIB", "rfSignalDttReceiver2Status"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    rfSignalDttReceiver2Trap.setStatus(
        "current"
    )

temperatureDttReceiver2Trap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 31)
)
temperatureDttReceiver2Trap.setObjects(
      *(("TREDESS-FS-MIB", "temperatureDttReceiver2Status"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    temperatureDttReceiver2Trap.setStatus(
        "current"
    )

modulatorSumTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 32)
)
modulatorSumTrap.setObjects(
      *(("TREDESS-FS-MIB", "modulatorAlarmStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    modulatorSumTrap.setStatus(
        "current"
    )

tsErrorTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 33)
)
tsErrorTrap.setObjects(
      *(("TREDESS-FS-MIB", "tsErrorStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    tsErrorTrap.setStatus(
        "current"
    )

mipErrorTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 34)
)
mipErrorTrap.setObjects(
      *(("TREDESS-FS-MIB", "mipErrorStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    mipErrorTrap.setStatus(
        "current"
    )

mpegOverflowTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 35)
)
mpegOverflowTrap.setObjects(
      *(("TREDESS-FS-MIB", "mpegOverflowStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    mpegOverflowTrap.setStatus(
        "current"
    )

t2miErrorTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 36)
)
t2miErrorTrap.setObjects(
      *(("TREDESS-FS-MIB", "t2miErrorStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    t2miErrorTrap.setStatus(
        "current"
    )

sfnReferenceTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 37)
)
sfnReferenceTrap.setObjects(
      *(("TREDESS-FS-MIB", "sfnErrorStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    sfnReferenceTrap.setStatus(
        "current"
    )

sfnMarginTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 38)
)
sfnMarginTrap.setObjects(
      *(("TREDESS-FS-MIB", "sfnMargin"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    sfnMarginTrap.setStatus(
        "current"
    )

temperatureModulatorTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 39)
)
temperatureModulatorTrap.setObjects(
      *(("TREDESS-FS-MIB", "temperatureModulatorStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    temperatureModulatorTrap.setStatus(
        "current"
    )

modulatorOutputTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 40)
)
modulatorOutputTrap.setObjects(
      *(("TREDESS-FS-MIB", "modulatorOutputStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    modulatorOutputTrap.setStatus(
        "current"
    )

rfOutputTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 41)
)
rfOutputTrap.setObjects(
      *(("TREDESS-FS-MIB", "rfOutputStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    rfOutputTrap.setStatus(
        "current"
    )

cancellerShouldersTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 42)
)
cancellerShouldersTrap.setObjects(
      *(("TREDESS-FS-MIB", "cancellerShouldersStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    cancellerShouldersTrap.setStatus(
        "current"
    )

input10MhzTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 43)
)
input10MhzTrap.setObjects(
      *(("TREDESS-FS-MIB", "input10MhzStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    input10MhzTrap.setStatus(
        "current"
    )

input1ppsTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 44)
)
input1ppsTrap.setObjects(
      *(("TREDESS-FS-MIB", "input1ppsStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    input1ppsTrap.setStatus(
        "current"
    )

synchronizationModuleTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 45)
)
synchronizationModuleTrap.setObjects(
      *(("TREDESS-FS-MIB", "synchronizationAlarmStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    synchronizationModuleTrap.setStatus(
        "current"
    )

synchronizationAntennaTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 46)
)
synchronizationAntennaTrap.setObjects(
      *(("TREDESS-FS-MIB", "synchronizationAntennaStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    synchronizationAntennaTrap.setStatus(
        "current"
    )

synchronizationUnlockTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 47)
)
synchronizationUnlockTrap.setObjects(
      *(("TREDESS-FS-MIB", "synchronizationUnlockStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    synchronizationUnlockTrap.setStatus(
        "current"
    )

synchronizationHoldoverTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 48)
)
synchronizationHoldoverTrap.setObjects(
      *(("TREDESS-FS-MIB", "synchronizationHoldoverStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    synchronizationHoldoverTrap.setStatus(
        "current"
    )

synchronizationHwErrorTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 49)
)
synchronizationHwErrorTrap.setObjects(
      *(("TREDESS-FS-MIB", "synchronizationHwErrorStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    synchronizationHwErrorTrap.setStatus(
        "current"
    )

temperatureSynchronizationTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 50)
)
temperatureSynchronizationTrap.setObjects(
      *(("TREDESS-FS-MIB", "temperatureSynchronizationStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    temperatureSynchronizationTrap.setStatus(
        "current"
    )

reference10MHzTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 51)
)
reference10MHzTrap.setObjects(
      *(("TREDESS-FS-MIB", "reference10MHzStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    reference10MHzTrap.setStatus(
        "current"
    )

dateAndTimeReferenceEventTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 52)
)
dateAndTimeReferenceEventTrap.setObjects(
      *(("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    dateAndTimeReferenceEventTrap.setStatus(
        "current"
    )

acPowerSupplyTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 53)
)
acPowerSupplyTrap.setObjects(
      *(("TREDESS-FS-MIB", "acPowerSupplyStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    acPowerSupplyTrap.setStatus(
        "current"
    )

psuATrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 54)
)
psuATrap.setObjects(
      *(("TREDESS-FS-MIB", "acPsuAStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    psuATrap.setStatus(
        "current"
    )

psuBTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 55)
)
psuBTrap.setObjects(
      *(("TREDESS-FS-MIB", "acPsuBStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    psuBTrap.setStatus(
        "current"
    )

hwErrorTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 57)
)
hwErrorTrap.setObjects(
      *(("TREDESS-FS-MIB", "hwErrorStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    hwErrorTrap.setStatus(
        "current"
    )

ldmosTransistorsTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 58)
)
ldmosTransistorsTrap.setObjects(
      *(("TREDESS-FS-MIB", "ldmosTransistorsStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    ldmosTransistorsTrap.setStatus(
        "current"
    )

internalErrorTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 59)
)
internalErrorTrap.setObjects(
      *(("TREDESS-FS-MIB", "internalErrorStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    internalErrorTrap.setStatus(
        "current"
    )

localOscillatorTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 60)
)
localOscillatorTrap.setObjects(
      *(("TREDESS-FS-MIB", "localOscillatorStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    localOscillatorTrap.setStatus(
        "current"
    )

internalDcSupplyVoltageTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 61)
)
internalDcSupplyVoltageTrap.setObjects(
      *(("TREDESS-FS-MIB", "internalDcSupplyVoltageStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    internalDcSupplyVoltageTrap.setStatus(
        "current"
    )

fanSumTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 62)
)
fanSumTrap.setObjects(
      *(("TREDESS-FS-MIB", "fanAlarmStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    fanSumTrap.setStatus(
        "current"
    )

fan1Trap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 63)
)
fan1Trap.setObjects(
      *(("TREDESS-FS-MIB", "fan1Status"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    fan1Trap.setStatus(
        "current"
    )

fan2Trap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 64)
)
fan2Trap.setObjects(
      *(("TREDESS-FS-MIB", "fan2Status"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    fan2Trap.setStatus(
        "current"
    )

fan3Trap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 65)
)
fan3Trap.setObjects(
      *(("TREDESS-FS-MIB", "fan3Status"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    fan3Trap.setStatus(
        "current"
    )

externalAlarmTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 66)
)
externalAlarmTrap.setObjects(
      *(("TREDESS-FS-MIB", "externalAlarmStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    externalAlarmTrap.setStatus(
        "current"
    )

externalAlarm1Trap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 67)
)
externalAlarm1Trap.setObjects(
      *(("TREDESS-FS-MIB", "external1Status"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    externalAlarm1Trap.setStatus(
        "current"
    )

externalAlarm2Trap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 68)
)
externalAlarm2Trap.setObjects(
      *(("TREDESS-FS-MIB", "external2Status"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    externalAlarm2Trap.setStatus(
        "current"
    )

systemInitEventTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 69)
)
systemInitEventTrap.setObjects(
      *(("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    systemInitEventTrap.setStatus(
        "current"
    )

guiOperationEventTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 70)
)
guiOperationEventTrap.setObjects(
      *(("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    guiOperationEventTrap.setStatus(
        "current"
    )

muteEventTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 71)
)
muteEventTrap.setObjects(
      *(("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    muteEventTrap.setStatus(
        "current"
    )

inputSourceSelectedEventTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 72)
)
inputSourceSelectedEventTrap.setObjects(
      *(("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventAdditionalText"))
)
if mibBuilder.loadTexts:
    inputSourceSelectedEventTrap.setStatus(
        "current"
    )

selectedReferenceEventTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 73)
)
selectedReferenceEventTrap.setObjects(
      *(("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    selectedReferenceEventTrap.setStatus(
        "current"
    )

outputRelay1Trap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 74)
)
outputRelay1Trap.setObjects(
      *(("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    outputRelay1Trap.setStatus(
        "current"
    )

outputRelay2Trap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 75)
)
outputRelay2Trap.setObjects(
      *(("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    outputRelay2Trap.setStatus(
        "current"
    )

forcedMfnEventTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 76)
)
forcedMfnEventTrap.setObjects(
      *(("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    forcedMfnEventTrap.setStatus(
        "current"
    )

localModeTimeoutEventTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 77)
)
localModeTimeoutEventTrap.setObjects(
      *(("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    localModeTimeoutEventTrap.setStatus(
        "current"
    )

redundancyEventTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 78)
)
redundancyEventTrap.setObjects(
      *(("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    redundancyEventTrap.setStatus(
        "current"
    )

btsErrorTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 81)
)
btsErrorTrap.setObjects(
      *(("TREDESS-FS-MIB", "btsErrorStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    btsErrorTrap.setStatus(
        "current"
    )

nonLinearSenseFeedbackTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 82)
)
nonLinearSenseFeedbackTrap.setObjects(
      *(("TREDESS-FS-MIB", "nonLinearSenseFeedback"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    nonLinearSenseFeedbackTrap.setStatus(
        "current"
    )

modulatorShouldersTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 83)
)
modulatorShouldersTrap.setObjects(
      *(("TREDESS-FS-MIB", "modulatorShouldersStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    modulatorShouldersTrap.setStatus(
        "current"
    )

configurationFromBackupEventTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 84)
)
configurationFromBackupEventTrap.setObjects(
      *(("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    configurationFromBackupEventTrap.setStatus(
        "current"
    )

rfInputTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 88)
)
rfInputTrap.setObjects(
      *(("TREDESS-FS-MIB", "rfInputStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    rfInputTrap.setStatus(
        "current"
    )

echoCancellerTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 89)
)
echoCancellerTrap.setObjects(
      *(("TREDESS-FS-MIB", "echoCancellerStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    echoCancellerTrap.setStatus(
        "current"
    )

inputLevelTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 90)
)
inputLevelTrap.setObjects(
      *(("TREDESS-FS-MIB", "inputLevelStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    inputLevelTrap.setStatus(
        "current"
    )

temperatureECTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 91)
)
temperatureECTrap.setObjects(
      *(("TREDESS-FS-MIB", "temperatureECStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    temperatureECTrap.setStatus(
        "current"
    )

outputLevelTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 92)
)
outputLevelTrap.setObjects(
      *(("TREDESS-FS-MIB", "outputLevelStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    outputLevelTrap.setStatus(
        "current"
    )

amplifierOutputSampleTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 93)
)
amplifierOutputSampleTrap.setObjects(
      *(("TREDESS-FS-MIB", "amplifierOutputSample"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    amplifierOutputSampleTrap.setStatus(
        "current"
    )

systemShutdownEventTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 94)
)
systemShutdownEventTrap.setObjects(
      *(("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    systemShutdownEventTrap.setStatus(
        "current"
    )

standardAutoConfigurationTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 106)
)
standardAutoConfigurationTrap.setObjects(
      *(("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    standardAutoConfigurationTrap.setStatus(
        "current"
    )

cancellerMerStatusTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 107)
)
cancellerMerStatusTrap.setObjects(
      *(("TREDESS-FS-MIB", "cancellerMerStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"))
)
if mibBuilder.loadTexts:
    cancellerMerStatusTrap.setStatus(
        "current"
    )

gainMarginStatusTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 108)
)
gainMarginStatusTrap.setObjects(
      *(("TREDESS-FS-MIB", "gainMarginStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    gainMarginStatusTrap.setStatus(
        "current"
    )

cancExternalFeedbackStatusTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 109)
)
cancExternalFeedbackStatusTrap.setObjects(
      *(("TREDESS-FS-MIB", "cancExternalFeedbackStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    cancExternalFeedbackStatusTrap.setStatus(
        "current"
    )

modulatorMerStatusTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 110)
)
modulatorMerStatusTrap.setObjects(
      *(("TREDESS-FS-MIB", "modulatorMerStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    modulatorMerStatusTrap.setStatus(
        "current"
    )

modExternalFeedbackStatusTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 111)
)
modExternalFeedbackStatusTrap.setObjects(
      *(("TREDESS-FS-MIB", "modulatorExternalFeedbackStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    modExternalFeedbackStatusTrap.setStatus(
        "current"
    )

amplifierStage1SumTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 112)
)
amplifierStage1SumTrap.setObjects(
      *(("TREDESS-FS-MIB", "amplifierStage1Status"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    amplifierStage1SumTrap.setStatus(
        "current"
    )

aS1InputLevelTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 113)
)
aS1InputLevelTrap.setObjects(
      *(("TREDESS-FS-MIB", "aS1InputLevelStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    aS1InputLevelTrap.setStatus(
        "current"
    )

aS1ExceededPowerTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 114)
)
aS1ExceededPowerTrap.setObjects(
      *(("TREDESS-FS-MIB", "aS1ExceededPowerStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    aS1ExceededPowerTrap.setStatus(
        "current"
    )

aS1DecreasedPowerTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 115)
)
aS1DecreasedPowerTrap.setObjects(
      *(("TREDESS-FS-MIB", "aS1DecreasedPowerStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    aS1DecreasedPowerTrap.setStatus(
        "current"
    )

aS1ReflectedPowerTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 116)
)
aS1ReflectedPowerTrap.setObjects(
      *(("TREDESS-FS-MIB", "aS1ReflectedPowerStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    aS1ReflectedPowerTrap.setStatus(
        "current"
    )

aS1TemperatureTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 117)
)
aS1TemperatureTrap.setObjects(
      *(("TREDESS-FS-MIB", "aS1TemperatureStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    aS1TemperatureTrap.setStatus(
        "current"
    )

aS1HwErrorTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 118)
)
aS1HwErrorTrap.setObjects(
      *(("TREDESS-FS-MIB", "aS1HwErrorStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    aS1HwErrorTrap.setStatus(
        "current"
    )

amplifierStage2SumTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 119)
)
amplifierStage2SumTrap.setObjects(
      *(("TREDESS-FS-MIB", "amplifierStage2Status"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    amplifierStage2SumTrap.setStatus(
        "current"
    )

aS2InputLevelTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 120)
)
aS2InputLevelTrap.setObjects(
      *(("TREDESS-FS-MIB", "aS2InputLevelStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    aS2InputLevelTrap.setStatus(
        "current"
    )

aS2ExceededPowerTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 121)
)
aS2ExceededPowerTrap.setObjects(
      *(("TREDESS-FS-MIB", "aS2ExceededPowerStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    aS2ExceededPowerTrap.setStatus(
        "current"
    )

aS2DecreasedPowerTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 122)
)
aS2DecreasedPowerTrap.setObjects(
      *(("TREDESS-FS-MIB", "aS2DecreasedPowerStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    aS2DecreasedPowerTrap.setStatus(
        "current"
    )

aS2ReflectedPowerTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 123)
)
aS2ReflectedPowerTrap.setObjects(
      *(("TREDESS-FS-MIB", "aS2ReflectedPowerStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    aS2ReflectedPowerTrap.setStatus(
        "current"
    )

aS2TemperatureTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 124)
)
aS2TemperatureTrap.setObjects(
      *(("TREDESS-FS-MIB", "aS2TemperatureStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    aS2TemperatureTrap.setStatus(
        "current"
    )

aS2HwErrorTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 125)
)
aS2HwErrorTrap.setObjects(
      *(("TREDESS-FS-MIB", "aS2HwErrorStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    aS2HwErrorTrap.setStatus(
        "current"
    )

amplifierStage3SumTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 126)
)
amplifierStage3SumTrap.setObjects(
      *(("TREDESS-FS-MIB", "amplifierStage3Status"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    amplifierStage3SumTrap.setStatus(
        "current"
    )

aS3InputLevelTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 127)
)
aS3InputLevelTrap.setObjects(
      *(("TREDESS-FS-MIB", "aS3InputLevelStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    aS3InputLevelTrap.setStatus(
        "current"
    )

aS3ExceededPowerTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 128)
)
aS3ExceededPowerTrap.setObjects(
      *(("TREDESS-FS-MIB", "aS3ExceededPowerStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    aS3ExceededPowerTrap.setStatus(
        "current"
    )

aS3DecreasedPowerTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 129)
)
aS3DecreasedPowerTrap.setObjects(
      *(("TREDESS-FS-MIB", "aS3DecreasedPowerStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    aS3DecreasedPowerTrap.setStatus(
        "current"
    )

aS3ReflectedPowerTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 130)
)
aS3ReflectedPowerTrap.setObjects(
      *(("TREDESS-FS-MIB", "aS3ReflectedPowerStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    aS3ReflectedPowerTrap.setStatus(
        "current"
    )

aS3TemperatureTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 131)
)
aS3TemperatureTrap.setObjects(
      *(("TREDESS-FS-MIB", "aS3TemperatureStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    aS3TemperatureTrap.setStatus(
        "current"
    )

aS3HwErrorTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 132)
)
aS3HwErrorTrap.setObjects(
      *(("TREDESS-FS-MIB", "aS3HwErrorStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    aS3HwErrorTrap.setStatus(
        "current"
    )

amplifierStage4SumTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 133)
)
amplifierStage4SumTrap.setObjects(
      *(("TREDESS-FS-MIB", "amplifierStage4Status"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    amplifierStage4SumTrap.setStatus(
        "current"
    )

aS4InputLevelTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 134)
)
aS4InputLevelTrap.setObjects(
      *(("TREDESS-FS-MIB", "aS4InputLevelStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    aS4InputLevelTrap.setStatus(
        "current"
    )

aS4ExceededPowerTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 135)
)
aS4ExceededPowerTrap.setObjects(
      *(("TREDESS-FS-MIB", "aS4ExceededPowerStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    aS4ExceededPowerTrap.setStatus(
        "current"
    )

aS4DecreasedPowerTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 136)
)
aS4DecreasedPowerTrap.setObjects(
      *(("TREDESS-FS-MIB", "aS4DecreasedPowerStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    aS4DecreasedPowerTrap.setStatus(
        "current"
    )

aS4ReflectedPowerTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 137)
)
aS4ReflectedPowerTrap.setObjects(
      *(("TREDESS-FS-MIB", "aS4ReflectedPowerStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    aS4ReflectedPowerTrap.setStatus(
        "current"
    )

aS4TemperatureTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 138)
)
aS4TemperatureTrap.setObjects(
      *(("TREDESS-FS-MIB", "aS4TemperatureStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    aS4TemperatureTrap.setStatus(
        "current"
    )

aS4HwErrorTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 139)
)
aS4HwErrorTrap.setObjects(
      *(("TREDESS-FS-MIB", "aS4HwErrorStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    aS4HwErrorTrap.setStatus(
        "current"
    )

aS1PsusErrorTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 145)
)
aS1PsusErrorTrap.setObjects(
      *(("TREDESS-FS-MIB", "aS1PsusErrorStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    aS1PsusErrorTrap.setStatus(
        "current"
    )

aS2PsusErrorTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 146)
)
aS2PsusErrorTrap.setObjects(
      *(("TREDESS-FS-MIB", "aS2PsusErrorStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    aS2PsusErrorTrap.setStatus(
        "current"
    )

aS3PsusErrorTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 147)
)
aS3PsusErrorTrap.setObjects(
      *(("TREDESS-FS-MIB", "aS3PsusErrorStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    aS3PsusErrorTrap.setStatus(
        "current"
    )

aS4PsusErrorTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 148)
)
aS4PsusErrorTrap.setObjects(
      *(("TREDESS-FS-MIB", "aS4PsusErrorStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    aS4PsusErrorTrap.setStatus(
        "current"
    )

decreasedOuputPowerNonCritTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 149)
)
decreasedOuputPowerNonCritTrap.setObjects(
      *(("TREDESS-FS-MIB", "decreasedOutputPowerNonCritical"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    decreasedOuputPowerNonCritTrap.setStatus(
        "current"
    )

lockingStart1ppsEventTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 150)
)
lockingStart1ppsEventTrap.setObjects(
      *(("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    lockingStart1ppsEventTrap.setStatus(
        "current"
    )

rackCoolingEventTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 152)
)
rackCoolingEventTrap.setObjects(
      *(("TREDESS-FS-MIB", "rackCoolingStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    rackCoolingEventTrap.setStatus(
        "current"
    )

rackCoolingTemperatureEventTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 153)
)
rackCoolingTemperatureEventTrap.setObjects(
      *(("TREDESS-FS-MIB", "rackCoolingTemperatureStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    rackCoolingTemperatureEventTrap.setStatus(
        "current"
    )

rackCPressureDifferenceTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 154)
)
rackCPressureDifferenceTrap.setObjects(
      *(("TREDESS-FS-MIB", "pressureDifferenceStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    rackCPressureDifferenceTrap.setStatus(
        "current"
    )

rackCoolingHwErrorEventTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 155)
)
rackCoolingHwErrorEventTrap.setObjects(
      *(("TREDESS-FS-MIB", "rackCoolingHwErrorStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    rackCoolingHwErrorEventTrap.setStatus(
        "current"
    )

ioInterfaceInputEventTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 156)
)
ioInterfaceInputEventTrap.setObjects(
      *(("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    ioInterfaceInputEventTrap.setStatus(
        "current"
    )

ioInterfaceOutputEventTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 157)
)
ioInterfaceOutputEventTrap.setObjects(
      *(("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    ioInterfaceOutputEventTrap.setStatus(
        "current"
    )

dcInputEventTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 158)
)
dcInputEventTrap.setObjects(
      *(("TREDESS-FS-MIB", "dcInputStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    dcInputEventTrap.setStatus(
        "current"
    )

externalDcPowerSupplyEventTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 159)
)
externalDcPowerSupplyEventTrap.setObjects(
      *(("TREDESS-FS-MIB", "rackCoolingHwErrorStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    externalDcPowerSupplyEventTrap.setStatus(
        "current"
    )

redundancySysEventTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 160)
)
redundancySysEventTrap.setObjects(
      *(("TREDESS-FS-MIB", "redundancySysStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    redundancySysEventTrap.setStatus(
        "current"
    )

redundancySysComEventTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 161)
)
redundancySysComEventTrap.setObjects(
      *(("TREDESS-FS-MIB", "redundancySysCommunicationStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    redundancySysComEventTrap.setStatus(
        "current"
    )

redundancySysSwitchEventTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 162)
)
redundancySysSwitchEventTrap.setObjects(
      *(("TREDESS-FS-MIB", "redundancySysSwitchStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    redundancySysSwitchEventTrap.setStatus(
        "current"
    )

redundancySysReserveEventTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 163)
)
redundancySysReserveEventTrap.setObjects(
      *(("TREDESS-FS-MIB", "redundancySysReserveStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    redundancySysReserveEventTrap.setStatus(
        "current"
    )

modBerStatusTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 164)
)
modBerStatusTrap.setObjects(
      *(("TREDESS-FS-MIB", "modulatorBerStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    modBerStatusTrap.setStatus(
        "current"
    )

redundancyInputAsiMatrixTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 165)
)
redundancyInputAsiMatrixTrap.setObjects(
      *(("TREDESS-FS-MIB", "redundancyInputAsiMatrixStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    redundancyInputAsiMatrixTrap.setStatus(
        "current"
    )

redundancyHwMatrixEventTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 166)
)
redundancyHwMatrixEventTrap.setObjects(
      *(("TREDESS-FS-MIB", "redundancyHwMatrixStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    redundancyHwMatrixEventTrap.setStatus(
        "current"
    )

inputDabErrorStatusEventTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 167)
)
inputDabErrorStatusEventTrap.setObjects(
      *(("TREDESS-FS-MIB", "inputDabErrorStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    inputDabErrorStatusEventTrap.setStatus(
        "current"
    )

etiInputTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 168)
)
etiInputTrap.setObjects(
      *(("TREDESS-FS-MIB", "etiInputStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    etiInputTrap.setStatus(
        "current"
    )

eti1ErrorTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 169)
)
eti1ErrorTrap.setObjects(
      *(("TREDESS-FS-MIB", "eti1ErrorStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    eti1ErrorTrap.setStatus(
        "current"
    )

camSatReceiver1Trap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 170)
)
camSatReceiver1Trap.setObjects(
      *(("TREDESS-FS-MIB", "camSatReceiver1Status"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    camSatReceiver1Trap.setStatus(
        "current"
    )

smartCardSatReceiver1Trap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 171)
)
smartCardSatReceiver1Trap.setObjects(
      *(("TREDESS-FS-MIB", "smartCardSatReceiver1Status"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    smartCardSatReceiver1Trap.setStatus(
        "current"
    )

smartCardRightsSatReceiver1Trap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 172)
)
smartCardRightsSatReceiver1Trap.setObjects(
      *(("TREDESS-FS-MIB", "smartCardRightsSatReceiver1Stat"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    smartCardRightsSatReceiver1Trap.setStatus(
        "current"
    )

asiOutputSatReceiver1Trap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 173)
)
asiOutputSatReceiver1Trap.setObjects(
      *(("TREDESS-FS-MIB", "asiOutputSatReceiver1Status"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    asiOutputSatReceiver1Trap.setStatus(
        "current"
    )

redundancyHwRfMatrixEventTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 174)
)
redundancyHwRfMatrixEventTrap.setObjects(
      *(("TREDESS-FS-MIB", "redundancyHwRfMatrixStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    redundancyHwRfMatrixEventTrap.setStatus(
        "current"
    )

amplifierStagesSumTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 175)
)
amplifierStagesSumTrap.setObjects(
      *(("TREDESS-FS-MIB", "amplifierStagesStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    amplifierStagesSumTrap.setStatus(
        "current"
    )

aSsInputLevelTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 176)
)
aSsInputLevelTrap.setObjects(
      *(("TREDESS-FS-MIB", "aSsInputLevelStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    aSsInputLevelTrap.setStatus(
        "current"
    )

aSsExceededPowerTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 177)
)
aSsExceededPowerTrap.setObjects(
      *(("TREDESS-FS-MIB", "aSsExceededPowerStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    aSsExceededPowerTrap.setStatus(
        "current"
    )

aSsDecreasedPowerTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 178)
)
aSsDecreasedPowerTrap.setObjects(
      *(("TREDESS-FS-MIB", "aSsDecreasedPowerStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    aSsDecreasedPowerTrap.setStatus(
        "current"
    )

aSsReflectedPowerTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 179)
)
aSsReflectedPowerTrap.setObjects(
      *(("TREDESS-FS-MIB", "aSsReflectedPowerStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    aSsReflectedPowerTrap.setStatus(
        "current"
    )

aSsTemperatureTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 180)
)
aSsTemperatureTrap.setObjects(
      *(("TREDESS-FS-MIB", "aSsTemperatureStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    aSsTemperatureTrap.setStatus(
        "current"
    )

aSsHwErrorTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 181)
)
aSsHwErrorTrap.setObjects(
      *(("TREDESS-FS-MIB", "aSsHwErrorStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    aSsHwErrorTrap.setStatus(
        "current"
    )

aSsPsusErrorTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 182)
)
aSsPsusErrorTrap.setObjects(
      *(("TREDESS-FS-MIB", "aSsPsusErrorStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    aSsPsusErrorTrap.setStatus(
        "current"
    )

redundancyInputEtiMatrixTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 183)
)
redundancyInputEtiMatrixTrap.setObjects(
      *(("TREDESS-FS-MIB", "redundancyInputAsiMatrixStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    redundancyInputEtiMatrixTrap.setStatus(
        "current"
    )

redundancyHwEtiMatrixEventTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 184)
)
redundancyHwEtiMatrixEventTrap.setObjects(
      *(("TREDESS-FS-MIB", "redundancyHwEtiMatrixStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    redundancyHwEtiMatrixEventTrap.setStatus(
        "current"
    )

shortTermMonitoringEventTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 185)
)
shortTermMonitoringEventTrap.setObjects(
      *(("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    shortTermMonitoringEventTrap.setStatus(
        "current"
    )

autoconfFromInputEventTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 186)
)
autoconfFromInputEventTrap.setObjects(
      *(("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    autoconfFromInputEventTrap.setStatus(
        "current"
    )

channelAdaptationEventTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 187)
)
channelAdaptationEventTrap.setObjects(
      *(("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    channelAdaptationEventTrap.setStatus(
        "current"
    )

dttReceiver1BerMuteTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 188)
)
dttReceiver1BerMuteTrap.setObjects(
      *(("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    dttReceiver1BerMuteTrap.setStatus(
        "current"
    )

dttReceiver2BerMuteTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 189)
)
dttReceiver2BerMuteTrap.setObjects(
      *(("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    dttReceiver2BerMuteTrap.setStatus(
        "current"
    )

automaticPowerCompensationTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 190)
)
automaticPowerCompensationTrap.setObjects(
      *(("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    automaticPowerCompensationTrap.setStatus(
        "current"
    )

eti2ErrorTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 191)
)
eti2ErrorTrap.setObjects(
      *(("TREDESS-FS-MIB", "eti2ErrorStatus"),
        ("TREDESS-FS-MIB", "eventTrapLogId"),
        ("TREDESS-FS-MIB", "eventTimeStamp"),
        ("TREDESS-FS-MIB", "eventInitialStatus"),
        ("TREDESS-FS-MIB", "eventFinalStatus"),
        ("TREDESS-FS-MIB", "eventAdditionalText"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    eti2ErrorTrap.setStatus(
        "current"
    )

testTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 500)
)
testTrap.setObjects(
      *(("TREDESS-FS-MIB", "localTime"),
        ("TREDESS-FS-MIB", "name"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    testTrap.setStatus(
        "current"
    )

keepaliveTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 10, 0, 501)
)
keepaliveTrap.setObjects(
      *(("TREDESS-FS-MIB", "localTime"),
        ("TREDESS-FS-MIB", "name"),
        ("TREDESS-FS-MIB", "redundancyId"))
)
if mibBuilder.loadTexts:
    keepaliveTrap.setStatus(
        "current"
    )


# Notifications groups

groupFSevents = NotificationGroup(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 102, 1, 10)
)
groupFSevents.setObjects(
      *(("TREDESS-FS-MIB", "amplifierSumTrap"),
        ("TREDESS-FS-MIB", "asi1ErrorTrap"),
        ("TREDESS-FS-MIB", "asi2ErrorTrap"),
        ("TREDESS-FS-MIB", "asiInputTrap"),
        ("TREDESS-FS-MIB", "dttReceiver1Trap"),
        ("TREDESS-FS-MIB", "dttReceiver2Trap"),
        ("TREDESS-FS-MIB", "btsErrorTrap"),
        ("TREDESS-FS-MIB", "nonLinearSenseFeedbackTrap"),
        ("TREDESS-FS-MIB", "modulatorShouldersTrap"),
        ("TREDESS-FS-MIB", "systemShutdownEventTrap"),
        ("TREDESS-FS-MIB", "outputLevelTrap"),
        ("TREDESS-FS-MIB", "amplifierOutputSampleTrap"),
        ("TREDESS-FS-MIB", "temperatureECTrap"),
        ("TREDESS-FS-MIB", "rfInputTrap"),
        ("TREDESS-FS-MIB", "inputLevelTrap"),
        ("TREDESS-FS-MIB", "echoCancellerTrap"),
        ("TREDESS-FS-MIB", "configurationFromBackupEventTrap"),
        ("TREDESS-FS-MIB", "input10MhzTrap"),
        ("TREDESS-FS-MIB", "input1ppsTrap"),
        ("TREDESS-FS-MIB", "externalAlarm2Trap"),
        ("TREDESS-FS-MIB", "externalAlarmTrap"),
        ("TREDESS-FS-MIB", "cancellerShouldersTrap"),
        ("TREDESS-FS-MIB", "fan2Trap"),
        ("TREDESS-FS-MIB", "fan3Trap"),
        ("TREDESS-FS-MIB", "fanSumTrap"),
        ("TREDESS-FS-MIB", "faultSummationTrap"),
        ("TREDESS-FS-MIB", "exceededOutputPowerTrap"),
        ("TREDESS-FS-MIB", "externalAlarm1Trap"),
        ("TREDESS-FS-MIB", "fan1Trap"),
        ("TREDESS-FS-MIB", "forcedMfnEventTrap"),
        ("TREDESS-FS-MIB", "synchronizationAntennaTrap"),
        ("TREDESS-FS-MIB", "synchronizationHoldoverTrap"),
        ("TREDESS-FS-MIB", "synchronizationHwErrorTrap"),
        ("TREDESS-FS-MIB", "synchronizationModuleTrap"),
        ("TREDESS-FS-MIB", "synchronizationUnlockTrap"),
        ("TREDESS-FS-MIB", "guiOperationEventTrap"),
        ("TREDESS-FS-MIB", "hwErrorTrap"),
        ("TREDESS-FS-MIB", "inputSourceSelectedEventTrap"),
        ("TREDESS-FS-MIB", "internalDcSupplyVoltageTrap"),
        ("TREDESS-FS-MIB", "internalErrorTrap"),
        ("TREDESS-FS-MIB", "ipInputSumTrap"),
        ("TREDESS-FS-MIB", "ipSocket1ErrorTrap"),
        ("TREDESS-FS-MIB", "ipSocket2ErrorTrap"),
        ("TREDESS-FS-MIB", "keepaliveTrap"),
        ("TREDESS-FS-MIB", "ldmosTransistorsTrap"),
        ("TREDESS-FS-MIB", "lnbOverloadSatReceiver1Trap"),
        ("TREDESS-FS-MIB", "lnbOverloadSatReceiver2Trap"),
        ("TREDESS-FS-MIB", "localModeTimeoutEventTrap"),
        ("TREDESS-FS-MIB", "localOscillatorTrap"),
        ("TREDESS-FS-MIB", "mipErrorTrap"),
        ("TREDESS-FS-MIB", "modulatorOutputTrap"),
        ("TREDESS-FS-MIB", "modulatorSumTrap"),
        ("TREDESS-FS-MIB", "mpegOverflowTrap"),
        ("TREDESS-FS-MIB", "muteEventTrap"),
        ("TREDESS-FS-MIB", "outputRelay1Trap"),
        ("TREDESS-FS-MIB", "outputRelay2Trap"),
        ("TREDESS-FS-MIB", "decreasedOutputPowerTrap"),
        ("TREDESS-FS-MIB", "decreasedOuputPowerNonCritTrap"),
        ("TREDESS-FS-MIB", "lockingStart1ppsEventTrap"),
        ("TREDESS-FS-MIB", "rackCoolingEventTrap"),
        ("TREDESS-FS-MIB", "rackCoolingTemperatureEventTrap"),
        ("TREDESS-FS-MIB", "rackCPressureDifferenceTrap"),
        ("TREDESS-FS-MIB", "rackCoolingHwErrorEventTrap"),
        ("TREDESS-FS-MIB", "dcInputEventTrap"),
        ("TREDESS-FS-MIB", "externalDcPowerSupplyEventTrap"),
        ("TREDESS-FS-MIB", "redundancySysEventTrap"),
        ("TREDESS-FS-MIB", "redundancySysComEventTrap"),
        ("TREDESS-FS-MIB", "redundancySysSwitchEventTrap"),
        ("TREDESS-FS-MIB", "redundancySysReserveEventTrap"),
        ("TREDESS-FS-MIB", "redundancyInputAsiMatrixTrap"),
        ("TREDESS-FS-MIB", "redundancyHwMatrixEventTrap"),
        ("TREDESS-FS-MIB", "inputDabErrorStatusEventTrap"),
        ("TREDESS-FS-MIB", "etiInputTrap"),
        ("TREDESS-FS-MIB", "eti1ErrorTrap"),
        ("TREDESS-FS-MIB", "camSatReceiver1Trap"),
        ("TREDESS-FS-MIB", "smartCardSatReceiver1Trap"),
        ("TREDESS-FS-MIB", "smartCardRightsSatReceiver1Trap"),
        ("TREDESS-FS-MIB", "asiOutputSatReceiver1Trap"),
        ("TREDESS-FS-MIB", "ioInterfaceInputEventTrap"),
        ("TREDESS-FS-MIB", "ioInterfaceOutputEventTrap"),
        ("TREDESS-FS-MIB", "redundancyEventTrap"),
        ("TREDESS-FS-MIB", "reflectedPowerTrap"),
        ("TREDESS-FS-MIB", "rfOutputTrap"),
        ("TREDESS-FS-MIB", "rfSignalDttReceiver1Trap"),
        ("TREDESS-FS-MIB", "rfSignalDttReceiver2Trap"),
        ("TREDESS-FS-MIB", "rfSignalSatReceiver1Trap"),
        ("TREDESS-FS-MIB", "rfSignalSatReceiver2Trap"),
        ("TREDESS-FS-MIB", "satReceiver1Trap"),
        ("TREDESS-FS-MIB", "satReceiver2Trap"),
        ("TREDESS-FS-MIB", "selectedReferenceEventTrap"),
        ("TREDESS-FS-MIB", "sfnMarginTrap"),
        ("TREDESS-FS-MIB", "sfnReferenceTrap"),
        ("TREDESS-FS-MIB", "systemInitEventTrap"),
        ("TREDESS-FS-MIB", "t2miErrorTrap"),
        ("TREDESS-FS-MIB", "temperatureAmplifierTrap"),
        ("TREDESS-FS-MIB", "temperatureDttReceiver1Trap"),
        ("TREDESS-FS-MIB", "temperatureDttReceiver2Trap"),
        ("TREDESS-FS-MIB", "temperatureSynchronizationTrap"),
        ("TREDESS-FS-MIB", "reference10MHzTrap"),
        ("TREDESS-FS-MIB", "dateAndTimeReferenceEventTrap"),
        ("TREDESS-FS-MIB", "acPowerSupplyTrap"),
        ("TREDESS-FS-MIB", "psuATrap"),
        ("TREDESS-FS-MIB", "psuBTrap"),
        ("TREDESS-FS-MIB", "temperatureModulatorTrap"),
        ("TREDESS-FS-MIB", "temperatureSatReceiver1Trap"),
        ("TREDESS-FS-MIB", "temperatureSatReceiver2Trap"),
        ("TREDESS-FS-MIB", "cancellerMerStatusTrap"),
        ("TREDESS-FS-MIB", "standardAutoConfigurationTrap"),
        ("TREDESS-FS-MIB", "gainMarginStatusTrap"),
        ("TREDESS-FS-MIB", "cancExternalFeedbackStatusTrap"),
        ("TREDESS-FS-MIB", "modulatorMerStatusTrap"),
        ("TREDESS-FS-MIB", "modExternalFeedbackStatusTrap"),
        ("TREDESS-FS-MIB", "modBerStatusTrap"),
        ("TREDESS-FS-MIB", "tsErrorTrap"),
        ("TREDESS-FS-MIB", "unlockDttReceiver1Trap"),
        ("TREDESS-FS-MIB", "unlockDttReceiver2Trap"),
        ("TREDESS-FS-MIB", "unlockSatReceiver1Trap"),
        ("TREDESS-FS-MIB", "unlockSatReceiver2Trap"),
        ("TREDESS-FS-MIB", "warningSummationTrap"),
        ("TREDESS-FS-MIB", "amplifierStage1SumTrap"),
        ("TREDESS-FS-MIB", "aS1InputLevelTrap"),
        ("TREDESS-FS-MIB", "aS1ExceededPowerTrap"),
        ("TREDESS-FS-MIB", "aS1DecreasedPowerTrap"),
        ("TREDESS-FS-MIB", "aS1ReflectedPowerTrap"),
        ("TREDESS-FS-MIB", "aS1TemperatureTrap"),
        ("TREDESS-FS-MIB", "aS1HwErrorTrap"),
        ("TREDESS-FS-MIB", "amplifierStage2SumTrap"),
        ("TREDESS-FS-MIB", "aS2InputLevelTrap"),
        ("TREDESS-FS-MIB", "aS2ExceededPowerTrap"),
        ("TREDESS-FS-MIB", "aS2DecreasedPowerTrap"),
        ("TREDESS-FS-MIB", "aS2ReflectedPowerTrap"),
        ("TREDESS-FS-MIB", "aS2TemperatureTrap"),
        ("TREDESS-FS-MIB", "aS2HwErrorTrap"),
        ("TREDESS-FS-MIB", "amplifierStage3SumTrap"),
        ("TREDESS-FS-MIB", "aS3InputLevelTrap"),
        ("TREDESS-FS-MIB", "aS3ExceededPowerTrap"),
        ("TREDESS-FS-MIB", "aS3DecreasedPowerTrap"),
        ("TREDESS-FS-MIB", "aS3ReflectedPowerTrap"),
        ("TREDESS-FS-MIB", "aS3TemperatureTrap"),
        ("TREDESS-FS-MIB", "aS3HwErrorTrap"),
        ("TREDESS-FS-MIB", "amplifierStage4SumTrap"),
        ("TREDESS-FS-MIB", "aS4InputLevelTrap"),
        ("TREDESS-FS-MIB", "aS4ExceededPowerTrap"),
        ("TREDESS-FS-MIB", "aS4DecreasedPowerTrap"),
        ("TREDESS-FS-MIB", "aS4ReflectedPowerTrap"),
        ("TREDESS-FS-MIB", "aS4TemperatureTrap"),
        ("TREDESS-FS-MIB", "aS4HwErrorTrap"),
        ("TREDESS-FS-MIB", "amplifierStagesSumTrap"),
        ("TREDESS-FS-MIB", "aSsInputLevelTrap"),
        ("TREDESS-FS-MIB", "aSsExceededPowerTrap"),
        ("TREDESS-FS-MIB", "aSsDecreasedPowerTrap"),
        ("TREDESS-FS-MIB", "aSsReflectedPowerTrap"),
        ("TREDESS-FS-MIB", "aSsTemperatureTrap"),
        ("TREDESS-FS-MIB", "aSsHwErrorTrap"),
        ("TREDESS-FS-MIB", "aSsPsusErrorTrap"),
        ("TREDESS-FS-MIB", "aS1PsusErrorTrap"),
        ("TREDESS-FS-MIB", "aS2PsusErrorTrap"),
        ("TREDESS-FS-MIB", "aS3PsusErrorTrap"),
        ("TREDESS-FS-MIB", "aS4PsusErrorTrap"),
        ("TREDESS-FS-MIB", "redundancyHwRfMatrixEventTrap"),
        ("TREDESS-FS-MIB", "redundancyInputEtiMatrixTrap"),
        ("TREDESS-FS-MIB", "redundancyHwEtiMatrixEventTrap"),
        ("TREDESS-FS-MIB", "shortTermMonitoringEventTrap"),
        ("TREDESS-FS-MIB", "autoconfFromInputEventTrap"),
        ("TREDESS-FS-MIB", "channelAdaptationEventTrap"),
        ("TREDESS-FS-MIB", "dttReceiver1BerMuteTrap"),
        ("TREDESS-FS-MIB", "dttReceiver2BerMuteTrap"),
        ("TREDESS-FS-MIB", "automaticPowerCompensationTrap"),
        ("TREDESS-FS-MIB", "eti2ErrorTrap"),
        ("TREDESS-FS-MIB", "testTrap"))
)
if mibBuilder.loadTexts:
    groupFSevents.setStatus(
        "current"
    )


# Agent capabilities


# Module compliance

fsBasicCompilance = ModuleCompliance(
    (1, 3, 6, 1, 4, 1, 23180, 2, 1, 1, 2, 102, 2, 1)
)
fsBasicCompilance.setObjects(
      *(("TREDESS-FS-MIB", "groupFS"),
        ("TREDESS-FS-MIB", "groupEvents"),
        ("TREDESS-FS-MIB", "groupFSevents"))
)
if mibBuilder.loadTexts:
    fsBasicCompilance.setStatus(
        "current"
    )


# Export all MIB objects to the MIB builder

mibBuilder.exportSymbols(
    "TREDESS-FS-MIB",
    **{"RedundancyDeviceStatus": RedundancyDeviceStatus,
       "RedundancyRfSwitchStatus": RedundancyRfSwitchStatus,
       "FloatingPoint": FloatingPoint,
       "AlarmStatus": AlarmStatus,
       "EventStatus": EventStatus,
       "DisabledEnabled": DisabledEnabled,
       "NoYes": NoYes,
       "SyncNotSync": SyncNotSync,
       "NullApply": NullApply,
       "OptionHw": OptionHw,
       "OptionSw": OptionSw,
       "OpenClose": OpenClose,
       "IsdbtLayerConstellation": IsdbtLayerConstellation,
       "IsdbtLayerCodeRate": IsdbtLayerCodeRate,
       "NokOk": NokOk,
       "LinkStatusValue": LinkStatusValue,
       "LinkConfigurationValue": LinkConfigurationValue,
       "DabOutputChannelType": DabOutputChannelType,
       "televes": televes,
       "televesGroup": televesGroup,
       "tredess": tredess,
       "tredessProducts": tredessProducts,
       "fsTredessMIB": fsTredessMIB,
       "system": system,
       "general": general,
       "language": language,
       "name": name,
       "temperature": temperature,
       "location": location,
       "operationMode": operationMode,
       "autoreturnToRemote": autoreturnToRemote,
       "dateTime": dateTime,
       "dateTimeSource": dateTimeSource,
       "dateTimeStatus": dateTimeStatus,
       "dateTime1": dateTime1,
       "dateTime2": dateTime2,
       "localTime": localTime,
       "utcOffset": utcOffset,
       "ntpServer": ntpServer,
       "ntpRefresh": ntpRefresh,
       "ntpClient": ntpClient,
       "ntpServerStatus": ntpServerStatus,
       "ntpServerAlternative": ntpServerAlternative,
       "timezone": timezone,
       "networkInterfaces": networkInterfaces,
       "remoteInterfaz": remoteInterfaz,
       "dhcp": dhcp,
       "remoteIp": remoteIp,
       "remoteNetmask": remoteNetmask,
       "remoteGateway": remoteGateway,
       "dnsServer": dnsServer,
       "macAddr": macAddr,
       "localInterfaz": localInterfaz,
       "localIp": localIp,
       "localNetmask": localNetmask,
       "localMacAddr": localMacAddr,
       "linkStatus": linkStatus,
       "gbe1": gbe1,
       "gbe2": gbe2,
       "gbe3": gbe3,
       "gbe4": gbe4,
       "linkConfiguration": linkConfiguration,
       "gbe1LinkConfiguration": gbe1LinkConfiguration,
       "gbe2LinkConfiguration": gbe2LinkConfiguration,
       "gbe3LinkConfiguration": gbe3LinkConfiguration,
       "gbe4LinkConfiguration": gbe4LinkConfiguration,
       "webInterface": webInterface,
       "autorefreshWeb": autorefreshWeb,
       "autorefreshWebConfig": autorefreshWebConfig,
       "autorefreshWebTime": autorefreshWebTime,
       "connectedWebUsers": connectedWebUsers,
       "usersControl": usersControl,
       "user": user,
       "actualPassword": actualPassword,
       "newPassword": newPassword,
       "confirmNewPassword": confirmNewPassword,
       "setDefaultPasswords": setDefaultPasswords,
       "adminUserPassword": adminUserPassword,
       "publicUserPassword": publicUserPassword,
       "eventConfiguration": eventConfiguration,
       "alarmsConfiguration": alarmsConfiguration,
       "geralTable": geralTable,
       "geralEntry": geralEntry,
       "geralIndex": geralIndex,
       "geralAlarmName": geralAlarmName,
       "geralAlarmStatus": geralAlarmStatus,
       "geralOn": geralOn,
       "geralLog": geralLog,
       "geralFault": geralFault,
       "geralWarning": geralWarning,
       "geralLed": geralLed,
       "geral1p1": geral1p1,
       "geralExt1": geralExt1,
       "geralExt2": geralExt2,
       "geralTrap": geralTrap,
       "geralDD": geralDD,
       "geralTrapHysteresis": geralTrapHysteresis,
       "amplifierTable": amplifierTable,
       "amplifierEntry": amplifierEntry,
       "amplifierIndex": amplifierIndex,
       "amplifierAlarmName": amplifierAlarmName,
       "amplifierAlarmStatus": amplifierAlarmStatus,
       "amplifierOn": amplifierOn,
       "amplifierLog": amplifierLog,
       "amplifierFault": amplifierFault,
       "amplifierWarning": amplifierWarning,
       "amplifierLed": amplifierLed,
       "amplifier1p1": amplifier1p1,
       "amplifierExt1": amplifierExt1,
       "amplifierExt2": amplifierExt2,
       "amplifierTrap": amplifierTrap,
       "amplifierDD": amplifierDD,
       "amplifierTrapHysteresis": amplifierTrapHysteresis,
       "amplifierStage1Table": amplifierStage1Table,
       "amplifierStage1Entry": amplifierStage1Entry,
       "amplifierStage1Index": amplifierStage1Index,
       "amplifierStage1AlarmName": amplifierStage1AlarmName,
       "amplifierStage1AlarmStatus": amplifierStage1AlarmStatus,
       "amplifierStage1On": amplifierStage1On,
       "amplifierStage1Log": amplifierStage1Log,
       "amplifierStage1Fault": amplifierStage1Fault,
       "amplifierStage1Warning": amplifierStage1Warning,
       "amplifierStage1Led": amplifierStage1Led,
       "amplifierStage11p1": amplifierStage11p1,
       "amplifierStage1Ext1": amplifierStage1Ext1,
       "amplifierStage1Ext2": amplifierStage1Ext2,
       "amplifierStage1Trap": amplifierStage1Trap,
       "amplifierStage1DD": amplifierStage1DD,
       "amplifierStage1TrapHysteresis": amplifierStage1TrapHysteresis,
       "amplifierStage2Table": amplifierStage2Table,
       "amplifierStage2Entry": amplifierStage2Entry,
       "amplifierStage2Index": amplifierStage2Index,
       "amplifierStage2AlarmName": amplifierStage2AlarmName,
       "amplifierStage2AlarmStatus": amplifierStage2AlarmStatus,
       "amplifierStage2On": amplifierStage2On,
       "amplifierStage2Log": amplifierStage2Log,
       "amplifierStage2Fault": amplifierStage2Fault,
       "amplifierStage2Warning": amplifierStage2Warning,
       "amplifierStage2Led": amplifierStage2Led,
       "amplifierStage21p1": amplifierStage21p1,
       "amplifierStage2Ext1": amplifierStage2Ext1,
       "amplifierStage2Ext2": amplifierStage2Ext2,
       "amplifierStage2Trap": amplifierStage2Trap,
       "amplifierStage2DD": amplifierStage2DD,
       "amplifierStage2TrapHysteresis": amplifierStage2TrapHysteresis,
       "amplifierStage3Table": amplifierStage3Table,
       "amplifierStage3Entry": amplifierStage3Entry,
       "amplifierStage3Index": amplifierStage3Index,
       "amplifierStage3AlarmName": amplifierStage3AlarmName,
       "amplifierStage3AlarmStatus": amplifierStage3AlarmStatus,
       "amplifierStage3On": amplifierStage3On,
       "amplifierStage3Log": amplifierStage3Log,
       "amplifierStage3Fault": amplifierStage3Fault,
       "amplifierStage3Warning": amplifierStage3Warning,
       "amplifierStage3Led": amplifierStage3Led,
       "amplifierStage31p1": amplifierStage31p1,
       "amplifierStage3Ext1": amplifierStage3Ext1,
       "amplifierStage3Ext2": amplifierStage3Ext2,
       "amplifierStage3Trap": amplifierStage3Trap,
       "amplifierStage3DD": amplifierStage3DD,
       "amplifierStage3TrapHysteresis": amplifierStage3TrapHysteresis,
       "amplifierStage4Table": amplifierStage4Table,
       "amplifierStage4Entry": amplifierStage4Entry,
       "amplifierStage4Index": amplifierStage4Index,
       "amplifierStage4AlarmName": amplifierStage4AlarmName,
       "amplifierStage4AlarmStatus": amplifierStage4AlarmStatus,
       "amplifierStage4On": amplifierStage4On,
       "amplifierStage4Log": amplifierStage4Log,
       "amplifierStage4Fault": amplifierStage4Fault,
       "amplifierStage4Warning": amplifierStage4Warning,
       "amplifierStage4Led": amplifierStage4Led,
       "amplifierStage41p1": amplifierStage41p1,
       "amplifierStage4Ext1": amplifierStage4Ext1,
       "amplifierStage4Ext2": amplifierStage4Ext2,
       "amplifierStage4Trap": amplifierStage4Trap,
       "amplifierStage4DD": amplifierStage4DD,
       "amplifierStage4TrapHysteresis": amplifierStage4TrapHysteresis,
       "asiTable": asiTable,
       "asiEntry": asiEntry,
       "asiIndex": asiIndex,
       "asiAlarmName": asiAlarmName,
       "asiAlarmStatus": asiAlarmStatus,
       "asiOn": asiOn,
       "asiLog": asiLog,
       "asiFault": asiFault,
       "asiWarning": asiWarning,
       "asiLed": asiLed,
       "asi1p1": asi1p1,
       "asiExt1": asiExt1,
       "asiExt2": asiExt2,
       "asiTrap": asiTrap,
       "asiDD": asiDD,
       "asiTrapHysteresis": asiTrapHysteresis,
       "etiTable": etiTable,
       "etiEntry": etiEntry,
       "etiIndex": etiIndex,
       "etiAlarmName": etiAlarmName,
       "etiAlarmStatus": etiAlarmStatus,
       "etiOn": etiOn,
       "etiLog": etiLog,
       "etiFault": etiFault,
       "etiWarning": etiWarning,
       "etiLed": etiLed,
       "eti1p1": eti1p1,
       "etiExt1": etiExt1,
       "etiExt2": etiExt2,
       "etiTrap": etiTrap,
       "etiDD": etiDD,
       "etiTrapHysteresis": etiTrapHysteresis,
       "amplifierStagesTable": amplifierStagesTable,
       "amplifierStagesEntry": amplifierStagesEntry,
       "amplifierStagesIndex": amplifierStagesIndex,
       "amplifierStagesAlarmName": amplifierStagesAlarmName,
       "amplifierStagesAlarmStatus": amplifierStagesAlarmStatus,
       "amplifierStagesOn": amplifierStagesOn,
       "amplifierStagesLog": amplifierStagesLog,
       "amplifierStagesFault": amplifierStagesFault,
       "amplifierStagesWarning": amplifierStagesWarning,
       "amplifierStagesLed": amplifierStagesLed,
       "amplifierStages1p1": amplifierStages1p1,
       "amplifierStagesExt1": amplifierStagesExt1,
       "amplifierStagesExt2": amplifierStagesExt2,
       "amplifierStagesTrap": amplifierStagesTrap,
       "amplifierStagesDD": amplifierStagesDD,
       "amplifierStagesTrapHysteresis": amplifierStagesTrapHysteresis,
       "ipInputTable": ipInputTable,
       "ipInputEntry": ipInputEntry,
       "ipInputIndex": ipInputIndex,
       "ipInputAlarmName": ipInputAlarmName,
       "ipInputAlarmStatus": ipInputAlarmStatus,
       "ipInputOn": ipInputOn,
       "ipInputLog": ipInputLog,
       "ipInputFault": ipInputFault,
       "ipInputWarning": ipInputWarning,
       "ipInputLed": ipInputLed,
       "ipInput1p1": ipInput1p1,
       "ipInputExt1": ipInputExt1,
       "ipInputExt2": ipInputExt2,
       "ipInputTrap": ipInputTrap,
       "ipInputDD": ipInputDD,
       "ipInputTrapHysteresis": ipInputTrapHysteresis,
       "rxSat1Table": rxSat1Table,
       "rxSat1Entry": rxSat1Entry,
       "rxSat1Index": rxSat1Index,
       "rxSat1AlarmName": rxSat1AlarmName,
       "rxSat1AlarmStatus": rxSat1AlarmStatus,
       "rxSat1InputOn": rxSat1InputOn,
       "rxSat1Log": rxSat1Log,
       "rxSat1Fault": rxSat1Fault,
       "rxSat1Warning": rxSat1Warning,
       "rxSat1Led": rxSat1Led,
       "rxSat11p1": rxSat11p1,
       "rxSat1Ext1": rxSat1Ext1,
       "rxSat1Ext2": rxSat1Ext2,
       "rxSat1Trap": rxSat1Trap,
       "rxSat1DD": rxSat1DD,
       "rxSat1TrapHysteresis": rxSat1TrapHysteresis,
       "rxSat2Table": rxSat2Table,
       "rxSat2Entry": rxSat2Entry,
       "rxSat2Index": rxSat2Index,
       "rxSat2AlarmName": rxSat2AlarmName,
       "rxSat2AlarmStatus": rxSat2AlarmStatus,
       "rxSat2InputOn": rxSat2InputOn,
       "rxSat2Log": rxSat2Log,
       "rxSat2Fault": rxSat2Fault,
       "rxSat2Warning": rxSat2Warning,
       "rxSat2Led": rxSat2Led,
       "rxSat21p1": rxSat21p1,
       "rxSat2Ext1": rxSat2Ext1,
       "rxSat2Ext2": rxSat2Ext2,
       "rxSat2Trap": rxSat2Trap,
       "rxSat2DD": rxSat2DD,
       "rxSat2TrapHysteresis": rxSat2TrapHysteresis,
       "rxDtt1Table": rxDtt1Table,
       "rxDtt1Entry": rxDtt1Entry,
       "rxDtt1Index": rxDtt1Index,
       "rxDtt1AlarmName": rxDtt1AlarmName,
       "rxDtt1AlarmStatus": rxDtt1AlarmStatus,
       "rxDtt1InputOn": rxDtt1InputOn,
       "rxDtt1Log": rxDtt1Log,
       "rxDtt1Fault": rxDtt1Fault,
       "rxDtt1Warning": rxDtt1Warning,
       "rxDtt1Led": rxDtt1Led,
       "rxDtt11p1": rxDtt11p1,
       "rxDtt1Ext1": rxDtt1Ext1,
       "rxDtt1Ext2": rxDtt1Ext2,
       "rxDtt1Trap": rxDtt1Trap,
       "rxDtt1DD": rxDtt1DD,
       "rxDtt1TrapHysteresis": rxDtt1TrapHysteresis,
       "rxDtt2Table": rxDtt2Table,
       "rxDtt2Entry": rxDtt2Entry,
       "rxDtt2Index": rxDtt2Index,
       "rxDtt2AlarmName": rxDtt2AlarmName,
       "rxDtt2AlarmStatus": rxDtt2AlarmStatus,
       "rxDtt2InputOn": rxDtt2InputOn,
       "rxDtt2Log": rxDtt2Log,
       "rxDtt2Fault": rxDtt2Fault,
       "rxDtt2Warning": rxDtt2Warning,
       "rxDtt2Led": rxDtt2Led,
       "rxDtt21p1": rxDtt21p1,
       "rxDtt2Ext1": rxDtt2Ext1,
       "rxDtt2Ext2": rxDtt2Ext2,
       "rxDtt2Trap": rxDtt2Trap,
       "rxDtt2DD": rxDtt2DD,
       "rxDtt2TrapHysteresis": rxDtt2TrapHysteresis,
       "rfInTable": rfInTable,
       "rfInEntry": rfInEntry,
       "rfInIndex": rfInIndex,
       "rfInAlarmName": rfInAlarmName,
       "rfInAlarmStatus": rfInAlarmStatus,
       "rfInInputOn": rfInInputOn,
       "rfInLog": rfInLog,
       "rfInFault": rfInFault,
       "rfInWarning": rfInWarning,
       "rfInLed": rfInLed,
       "rfIn1p1": rfIn1p1,
       "rfInExt1": rfInExt1,
       "rfInExt2": rfInExt2,
       "rfInTrap": rfInTrap,
       "rfInDD": rfInDD,
       "rfInTrapHysteresis": rfInTrapHysteresis,
       "rackCoolingAlarmConfTable": rackCoolingAlarmConfTable,
       "rackCoolingAlarmConfEntry": rackCoolingAlarmConfEntry,
       "rackCoolingACIndex": rackCoolingACIndex,
       "rackCoolingAlarmName": rackCoolingAlarmName,
       "rackCoolingAlarmStatus": rackCoolingAlarmStatus,
       "rackCoolingInputOn": rackCoolingInputOn,
       "rackCoolingLog": rackCoolingLog,
       "rackCoolingFault": rackCoolingFault,
       "rackCoolingWarning": rackCoolingWarning,
       "rackCoolingLed": rackCoolingLed,
       "rackCooling1p1": rackCooling1p1,
       "rackCoolingExt1": rackCoolingExt1,
       "rackCoolingExt2": rackCoolingExt2,
       "rackCoolingTrap": rackCoolingTrap,
       "rackCoolingDD": rackCoolingDD,
       "rackCoolingTrapHysteresis": rackCoolingTrapHysteresis,
       "cancellerTable": cancellerTable,
       "cancellerEntry": cancellerEntry,
       "cancellerIndex": cancellerIndex,
       "cancellerAlarmName": cancellerAlarmName,
       "cancellerAlarmStatus": cancellerAlarmStatus,
       "cancellerInputOn": cancellerInputOn,
       "cancellerLog": cancellerLog,
       "cancellerFault": cancellerFault,
       "cancellerWarning": cancellerWarning,
       "cancellerLed": cancellerLed,
       "canceller1p1": canceller1p1,
       "cancellerExt1": cancellerExt1,
       "cancellerExt2": cancellerExt2,
       "cancellerTrap": cancellerTrap,
       "cancellerDD": cancellerDD,
       "cancellerTrapHysteresis": cancellerTrapHysteresis,
       "modulatorTable": modulatorTable,
       "modulatorEntry": modulatorEntry,
       "modulatorIndex": modulatorIndex,
       "modulatorAlarmName": modulatorAlarmName,
       "modulatorAlarmStatus": modulatorAlarmStatus,
       "modulatorInputOn": modulatorInputOn,
       "modulatorLog": modulatorLog,
       "modulatorFault": modulatorFault,
       "modulatorWarning": modulatorWarning,
       "modulatorLed": modulatorLed,
       "modulator1p1": modulator1p1,
       "modulatorExt1": modulatorExt1,
       "modulatorExt2": modulatorExt2,
       "modulatorTrap": modulatorTrap,
       "modulatorDD": modulatorDD,
       "modulatorTrapHysteresis": modulatorTrapHysteresis,
       "rfOutTable": rfOutTable,
       "rfOutEntry": rfOutEntry,
       "rfOutIndex": rfOutIndex,
       "rfOutAlarmName": rfOutAlarmName,
       "rfOutAlarmStatus": rfOutAlarmStatus,
       "rfOutInputOn": rfOutInputOn,
       "rfOutLog": rfOutLog,
       "rfOutFault": rfOutFault,
       "rfOutWarning": rfOutWarning,
       "rfOutLed": rfOutLed,
       "rfOut1p1": rfOut1p1,
       "rfOutExt1": rfOutExt1,
       "rfOutExt2": rfOutExt2,
       "rfOutTrap": rfOutTrap,
       "rfOutDD": rfOutDD,
       "rfOutTrapHysteresis": rfOutTrapHysteresis,
       "synchronizationTable": synchronizationTable,
       "synchronizationEntry": synchronizationEntry,
       "synchronizationIndex": synchronizationIndex,
       "synchronizationAlarmName": synchronizationAlarmName,
       "synchronizationAlarmStatus": synchronizationAlarmStatus,
       "synchronizationOn": synchronizationOn,
       "synchronizationLog": synchronizationLog,
       "synchronizationFault": synchronizationFault,
       "synchronizationWarning": synchronizationWarning,
       "synchronizationLed": synchronizationLed,
       "synchronization1p1": synchronization1p1,
       "synchronizationExt1": synchronizationExt1,
       "synchronizationExt2": synchronizationExt2,
       "synchronizationTrap": synchronizationTrap,
       "synchronizationDD": synchronizationDD,
       "synchronizationTrapHysteresis": synchronizationTrapHysteresis,
       "errorHwTable": errorHwTable,
       "errorHwEntry": errorHwEntry,
       "errorHwIndex": errorHwIndex,
       "errorHwAlarmName": errorHwAlarmName,
       "errorHwAlarmStatus": errorHwAlarmStatus,
       "errorHwOn": errorHwOn,
       "errorHwLog": errorHwLog,
       "errorHwFault": errorHwFault,
       "errorHwWarning": errorHwWarning,
       "errorHwLed": errorHwLed,
       "errorHw1p1": errorHw1p1,
       "errorHwExt1": errorHwExt1,
       "errorHwExt2": errorHwExt2,
       "errorHwTrap": errorHwTrap,
       "errorHwDD": errorHwDD,
       "errorHwTrapHysteresis": errorHwTrapHysteresis,
       "fanTable": fanTable,
       "fanEntry": fanEntry,
       "fanIndex": fanIndex,
       "fanAlarmName": fanAlarmName,
       "fanAlarmStatus": fanAlarmStatus,
       "fanOn": fanOn,
       "fanLog": fanLog,
       "fanFault": fanFault,
       "fanWarning": fanWarning,
       "fanLed": fanLed,
       "fan1p1": fan1p1,
       "fanExt1": fanExt1,
       "fanExt2": fanExt2,
       "fanTrap": fanTrap,
       "fanDD": fanDD,
       "fanTrapHysteresis": fanTrapHysteresis,
       "externalTable": externalTable,
       "externalEntry": externalEntry,
       "externalIndex": externalIndex,
       "externalAlarmName": externalAlarmName,
       "externalAlarmStatus": externalAlarmStatus,
       "externalOn": externalOn,
       "externalLog": externalLog,
       "externalFault": externalFault,
       "externalWarning": externalWarning,
       "externalLed": externalLed,
       "external1p1": external1p1,
       "externalExt1": externalExt1,
       "externalExt2": externalExt2,
       "externalTrap": externalTrap,
       "externalDD": externalDD,
       "externalTrapHysteresis": externalTrapHysteresis,
       "powerSupplyTable": powerSupplyTable,
       "powerSupplyEntry": powerSupplyEntry,
       "powerSupplyIndex": powerSupplyIndex,
       "powerSupplyAlarmName": powerSupplyAlarmName,
       "powerSupplyAlarmStatus": powerSupplyAlarmStatus,
       "powerSupplyOn": powerSupplyOn,
       "powerSupplyLog": powerSupplyLog,
       "powerSupplyFault": powerSupplyFault,
       "powerSupplyWarning": powerSupplyWarning,
       "powerSupplyLed": powerSupplyLed,
       "powerSupply1p1": powerSupply1p1,
       "powerSupplyExt1": powerSupplyExt1,
       "powerSupplyExt2": powerSupplyExt2,
       "powerSupplyTrap": powerSupplyTrap,
       "powerSupplyDD": powerSupplyDD,
       "powerSupplyTrapHysteresis": powerSupplyTrapHysteresis,
       "dcInputTable": dcInputTable,
       "dcInputEntry": dcInputEntry,
       "dcInputIndex": dcInputIndex,
       "dcInputAlarmName": dcInputAlarmName,
       "dcInputAlarmStatus": dcInputAlarmStatus,
       "dcInputOn": dcInputOn,
       "dcInputLog": dcInputLog,
       "dcInputFault": dcInputFault,
       "dcInputWarning": dcInputWarning,
       "dcInputLed": dcInputLed,
       "dcInput1p1": dcInput1p1,
       "dcInputExt1": dcInputExt1,
       "dcInputExt2": dcInputExt2,
       "dcInputTrap": dcInputTrap,
       "dcInputDD": dcInputDD,
       "dcInputTrapHysteresis": dcInputTrapHysteresis,
       "redundancySysTable": redundancySysTable,
       "redundancySysEntry": redundancySysEntry,
       "redundancySysIndex": redundancySysIndex,
       "redundancySysAlarmName": redundancySysAlarmName,
       "redundancySysAlarmStatus": redundancySysAlarmStatus,
       "redundancySysOn": redundancySysOn,
       "redundancySysLog": redundancySysLog,
       "redundancySysFault": redundancySysFault,
       "redundancySysWarning": redundancySysWarning,
       "redundancySysLed": redundancySysLed,
       "redundancySys1p1": redundancySys1p1,
       "redundancySysExt1": redundancySysExt1,
       "redundancySysExt2": redundancySysExt2,
       "redundancySysTrap": redundancySysTrap,
       "redundancySysDD": redundancySysDD,
       "redundancySysTrapHysteresis": redundancySysTrapHysteresis,
       "eventsConfiguration": eventsConfiguration,
       "eventsTable": eventsTable,
       "eventsEntry": eventsEntry,
       "eventsIndex": eventsIndex,
       "eventName": eventName,
       "eventOn": eventOn,
       "eventLog": eventLog,
       "eventTrap": eventTrap,
       "ioInterface": ioInterface,
       "input01": input01,
       "input01Status": input01Status,
       "input01Description": input01Description,
       "input01StandByStatus": input01StandByStatus,
       "input01Mode": input01Mode,
       "input01Duration": input01Duration,
       "input02": input02,
       "input02Status": input02Status,
       "input02Description": input02Description,
       "input02StandByStatus": input02StandByStatus,
       "input02Mode": input02Mode,
       "input02Duration": input02Duration,
       "output01": output01,
       "output01Status": output01Status,
       "output01Description": output01Description,
       "output01StandByStatus": output01StandByStatus,
       "output01Mode": output01Mode,
       "output01Duration": output01Duration,
       "output02": output02,
       "output02Status": output02Status,
       "output02Description": output02Description,
       "output02StandByStatus": output02StandByStatus,
       "output02Mode": output02Mode,
       "output02Duration": output02Duration,
       "snmp": snmp,
       "readCommunity1": readCommunity1,
       "writeCommunity1": writeCommunity1,
       "fastTrapSync": fastTrapSync,
       "enableAuthenTraps": enableAuthenTraps,
       "trapKeepaliveEnable": trapKeepaliveEnable,
       "trapKeepalive": trapKeepalive,
       "sendTestTrap": sendTestTrap,
       "lastUpdate": lastUpdate,
       "readCommunity2": readCommunity2,
       "writeCommunity2": writeCommunity2,
       "trapsLocalMode": trapsLocalMode,
       "trapsInitialStatus": trapsInitialStatus,
       "sendAllTraps": sendAllTraps,
       "trapSinkTable": trapSinkTable,
       "trapSinkEntry": trapSinkEntry,
       "trapSinkIndex": trapSinkIndex,
       "trapSinkEnable": trapSinkEnable,
       "trapSinkVersion": trapSinkVersion,
       "trapSinkIpAddress": trapSinkIpAddress,
       "trapSinkPort": trapSinkPort,
       "trapSinkInformTimeout": trapSinkInformTimeout,
       "trapSinkInformRetry": trapSinkInformRetry,
       "trapSinkCommunity": trapSinkCommunity,
       "deviceInfo": deviceInfo,
       "partNumber": partNumber,
       "serialNumber": serialNumber,
       "softwareVersion": softwareVersion,
       "softwareId": softwareId,
       "hardwareBasis": hardwareBasis,
       "ctrlBoard": ctrlBoard,
       "ctrlCBoard": ctrlCBoard,
       "ctrlMBoard": ctrlMBoard,
       "signalBoardGf": signalBoardGf,
       "signalBoardTx": signalBoardTx,
       "extraDigitalDacModulator": extraDigitalDacModulator,
       "satelliteBoard": satelliteBoard,
       "dabBoard": dabBoard,
       "dabGfBoard": dabGfBoard,
       "dabEti2": dabEti2,
       "terrestialReceiver1Board": terrestialReceiver1Board,
       "terrestialReceiver2Board": terrestialReceiver2Board,
       "satelliteReceiver1Board": satelliteReceiver1Board,
       "satelliteReceiver2Board": satelliteReceiver2Board,
       "ctrlBusInterface": ctrlBusInterface,
       "onePlusOneRedundancy": onePlusOneRedundancy,
       "externalFeedback": externalFeedback,
       "relay1p1Interface": relay1p1Interface,
       "i2o8Interface": i2o8Interface,
       "externalInterlock": externalInterlock,
       "i4o10Interface": i4o10Interface,
       "dcConnector": dcConnector,
       "rfBooster": rfBooster,
       "amplifierHw": amplifierHw,
       "amplifierHwRevision": amplifierHwRevision,
       "amplifierStageInfoTable": amplifierStageInfoTable,
       "amplifierStageInfoEntry": amplifierStageInfoEntry,
       "amplifierStageInfoIndex": amplifierStageInfoIndex,
       "amplifierStageType": amplifierStageType,
       "amplifierStageSN": amplifierStageSN,
       "hardwareOptions": hardwareOptions,
       "gnssReceiverHw": gnssReceiverHw,
       "externalReferenceHw": externalReferenceHw,
       "redundantPsuHw": redundantPsuHw,
       "ocxoReferenceHw": ocxoReferenceHw,
       "referenceHwSerialNumber": referenceHwSerialNumber,
       "rackCooling1Hw": rackCooling1Hw,
       "rackCooling2Hw": rackCooling2Hw,
       "rackCooling3Hw": rackCooling3Hw,
       "rackCooling4Hw": rackCooling4Hw,
       "asi1Matrix1Hw": asi1Matrix1Hw,
       "asi1Matrix2Hw": asi1Matrix2Hw,
       "asi2Matrix1Hw": asi2Matrix1Hw,
       "asi2Matrix2Hw": asi2Matrix2Hw,
       "rackCooling5Hw": rackCooling5Hw,
       "rackCooling6Hw": rackCooling6Hw,
       "rfMatrix1Hw": rfMatrix1Hw,
       "rfMatrix2Hw": rfMatrix2Hw,
       "rackCooling7Hw": rackCooling7Hw,
       "eti1Matrix1Hw": eti1Matrix1Hw,
       "eti1Matrix2Hw": eti1Matrix2Hw,
       "eti2Matrix1Hw": eti2Matrix1Hw,
       "eti2Matrix2Hw": eti2Matrix2Hw,
       "softwareOptions": softwareOptions,
       "snmpSw": snmpSw,
       "dvbtSw": dvbtSw,
       "dvbt2Sw": dvbt2Sw,
       "isdbtSw": isdbtSw,
       "deecSw": deecSw,
       "isdbtRemuxSw": isdbtRemuxSw,
       "onePlusOneSw": onePlusOneSw,
       "dualDriveSw": dualDriveSw,
       "atsc1Sw": atsc1Sw,
       "dabSw": dabSw,
       "unlimitedPowerSw": unlimitedPowerSw,
       "monitoringSw": monitoringSw,
       "np1Sw": np1Sw,
       "bissDecription": bissDecription,
       "btsDecompressionRma": btsDecompressionRma,
       "service": service,
       "serviceReset": serviceReset,
       "systemReset": systemReset,
       "rfReset": rfReset,
       "serviceSystemCalibration": serviceSystemCalibration,
       "inputCalibration": inputCalibration,
       "inputStatusCalibration": inputStatusCalibration,
       "cancelInputCalibration": cancelInputCalibration,
       "inputLevelMeasureCalibration": inputLevelMeasureCalibration,
       "powerCalibration": powerCalibration,
       "powerStatusCalibration": powerStatusCalibration,
       "powerLevelMeasureCalibration": powerLevelMeasureCalibration,
       "phaseRf": phaseRf,
       "automaticRfPhaseAdjustment": automaticRfPhaseAdjustment,
       "linearPrecorrection": linearPrecorrection,
       "linearStatusPrecorrection": linearStatusPrecorrection,
       "startLinearPrecorrectionBBPF": startLinearPrecorrectionBBPF,
       "startLinearPrecorrectionABPF": startLinearPrecorrectionABPF,
       "nonLinearPrecorrection": nonLinearPrecorrection,
       "nonLinearStatusPrecorrection": nonLinearStatusPrecorrection,
       "cancelNonLinearPrecorrection": cancelNonLinearPrecorrection,
       "startNonLinearPrecorrection": startNonLinearPrecorrection,
       "efficiencyCalibration": efficiencyCalibration,
       "acApparentPower": acApparentPower,
       "acEfficiency": acEfficiency,
       "efficiencyImprovement": efficiencyImprovement,
       "efficiencyStatusCalibration": efficiencyStatusCalibration,
       "cancelEfficiencyCalibration": cancelEfficiencyCalibration,
       "efficiencyShoulderMeasure": efficiencyShoulderMeasure,
       "efficiencyShoulderTarget": efficiencyShoulderTarget,
       "efficiencyMerMeasure": efficiencyMerMeasure,
       "efficiencyMerTarget": efficiencyMerTarget,
       "serviceCooling": serviceCooling,
       "fan01": fan01,
       "fan01Status": fan01Status,
       "fan01OperatingTime": fan01OperatingTime,
       "fan01Reset": fan01Reset,
       "fan02": fan02,
       "fan02Status": fan02Status,
       "fan02OperatingTime": fan02OperatingTime,
       "fan02Reset": fan02Reset,
       "fan03": fan03,
       "fan03Status": fan03Status,
       "fan03OperatingTime": fan03OperatingTime,
       "fan03Reset": fan03Reset,
       "fanSpeed": fanSpeed,
       "externalAmplifierCooling": externalAmplifierCooling,
       "externalAmplifierCoolingTable": externalAmplifierCoolingTable,
       "externalAmplifierCoolingEntry": externalAmplifierCoolingEntry,
       "externalAmplifierCoolingIndex": externalAmplifierCoolingIndex,
       "amStFanSpeed": amStFanSpeed,
       "amStFan1OperatingTime": amStFan1OperatingTime,
       "amStFan2OperatingTime": amStFan2OperatingTime,
       "amStFan1rpm": amStFan1rpm,
       "amStFan2rpm": amStFan2rpm,
       "rackCooling": rackCooling,
       "rackCoolingTable": rackCoolingTable,
       "rackCoolingEntry": rackCoolingEntry,
       "rcIndex": rcIndex,
       "rcTag": rcTag,
       "rcControlStatus": rcControlStatus,
       "rcHwStatus": rcHwStatus,
       "rcCoolingMode": rcCoolingMode,
       "rcFan1": rcFan1,
       "rcFan2": rcFan2,
       "rcTemperature": rcTemperature,
       "rcTemperatureTarget": rcTemperatureTarget,
       "rcFan1SpeedManual": rcFan1SpeedManual,
       "rcFan2SpeedManual": rcFan2SpeedManual,
       "rcFan1Speed": rcFan1Speed,
       "rcFan1Tachometer": rcFan1Tachometer,
       "rcFan1OperatingTime": rcFan1OperatingTime,
       "rcFan1Reset": rcFan1Reset,
       "rcFan2Speed": rcFan2Speed,
       "rcFan2Tachometer": rcFan2Tachometer,
       "rcFan2OperatingTime": rcFan2OperatingTime,
       "rcFan2Reset": rcFan2Reset,
       "rcIdentifyBoard": rcIdentifyBoard,
       "rcExternalSensor1": rcExternalSensor1,
       "rcExternalSensor2": rcExternalSensor2,
       "servicePowerSupply": servicePowerSupply,
       "dcLine1Voltage": dcLine1Voltage,
       "dcLine2Voltage": dcLine2Voltage,
       "dcLine3Voltage": dcLine3Voltage,
       "dcLine4Voltage": dcLine4Voltage,
       "dcInVoltage": dcInVoltage,
       "psuA": psuA,
       "psuAstatus": psuAstatus,
       "psuAacInputVoltage": psuAacInputVoltage,
       "psuAdcOutputVoltage": psuAdcOutputVoltage,
       "psuAtemperature": psuAtemperature,
       "psuB": psuB,
       "psuBstatus": psuBstatus,
       "psuBacInputVoltage": psuBacInputVoltage,
       "psuBdcOutputVoltage": psuBdcOutputVoltage,
       "psuBtemperature": psuBtemperature,
       "externalAmplifierPS": externalAmplifierPS,
       "externalAmplifierPSTable": externalAmplifierPSTable,
       "externalAmplifierPSEntry": externalAmplifierPSEntry,
       "externalAmplifierPSIndex": externalAmplifierPSIndex,
       "amStDcLineVoltage1": amStDcLineVoltage1,
       "amStDcLineVoltage2": amStDcLineVoltage2,
       "amStPsuAStatus": amStPsuAStatus,
       "amStPsuBStatus": amStPsuBStatus,
       "amStPsuCStatus": amStPsuCStatus,
       "serviceSwUpgrade": serviceSwUpgrade,
       "serviceSwUpgradeMode": serviceSwUpgradeMode,
       "serviceSwUpgradeServer": serviceSwUpgradeServer,
       "serviceSwUpgradeUser": serviceSwUpgradeUser,
       "serviceSwUpgradePassword": serviceSwUpgradePassword,
       "serviceSwDaily": serviceSwDaily,
       "serviceSwUpgradingFile": serviceSwUpgradingFile,
       "serviceSwVersionFile": serviceSwVersionFile,
       "serviceSwStatus": serviceSwStatus,
       "serviceSwDownload": serviceSwDownload,
       "serviceSwCheckNow": serviceSwCheckNow,
       "serviceSwDownloadNow": serviceSwDownloadNow,
       "serviceSwUpgradeNow": serviceSwUpgradeNow,
       "serviceInstallHwSw": serviceInstallHwSw,
       "serviceInstallSyncBoard": serviceInstallSyncBoard,
       "serviceRedundantPsu": serviceRedundantPsu,
       "serviceInput2": serviceInput2,
       "serviceTypeOfRedundancy": serviceTypeOfRedundancy,
       "serviceCanBusIdentifier": serviceCanBusIdentifier,
       "serviceDualDriveRelay": serviceDualDriveRelay,
       "serviceNumberOfAmplifierStages": serviceNumberOfAmplifierStages,
       "rfPowerSample": rfPowerSample,
       "servicePsuAmplifierStageTable": servicePsuAmplifierStageTable,
       "servicePsuAmplifierStageEntry": servicePsuAmplifierStageEntry,
       "servicePsuAmplifierStageIndex": servicePsuAmplifierStageIndex,
       "servicePsuAAmplifierStage": servicePsuAAmplifierStage,
       "servicePsuBAmplifierStage": servicePsuBAmplifierStage,
       "servicePsuCAmplifierStage": servicePsuCAmplifierStage,
       "serviceRackCooling": serviceRackCooling,
       "serviceDetectedCoolingBoard": serviceDetectedCoolingBoard,
       "serviceAssignAddressCoolingBoard": serviceAssignAddressCoolingBoard,
       "serviceDeleteAddressCoolingBoard": serviceDeleteAddressCoolingBoard,
       "serviceRackCooling1Board": serviceRackCooling1Board,
       "serviceRackCooling2Board": serviceRackCooling2Board,
       "serviceRackCooling3Board": serviceRackCooling3Board,
       "serviceRackCooling4Board": serviceRackCooling4Board,
       "serviceRackCooling5Board": serviceRackCooling5Board,
       "serviceRackCooling6Board": serviceRackCooling6Board,
       "serviceRackCooling7Board": serviceRackCooling7Board,
       "serviceAsiMatrix": serviceAsiMatrix,
       "serviceDetectedAsiMatrix": serviceDetectedAsiMatrix,
       "serviceAssingAddressAsiMatrix": serviceAssingAddressAsiMatrix,
       "serviceDeleteAddressAsiMatrix": serviceDeleteAddressAsiMatrix,
       "serviceInstalledAsiMatrix1": serviceInstalledAsiMatrix1,
       "serviceInstalledAsiMatrix2": serviceInstalledAsiMatrix2,
       "serviceRfMatrix": serviceRfMatrix,
       "serviceDetectedRfMatrix": serviceDetectedRfMatrix,
       "serviceAssingAddressRfMatrix": serviceAssingAddressRfMatrix,
       "serviceDeleteAddressRfMatrix": serviceDeleteAddressRfMatrix,
       "serviceInstalledRfMatrix": serviceInstalledRfMatrix,
       "serviceEtiMatrix": serviceEtiMatrix,
       "serviceDetectedEtiMatrix": serviceDetectedEtiMatrix,
       "serviceAssingAddressEtiMatrix": serviceAssingAddressEtiMatrix,
       "serviceDeleteAddressEtiMatrix": serviceDeleteAddressEtiMatrix,
       "serviceInstalledEtiMatrix1": serviceInstalledEtiMatrix1,
       "serviceInstalledEtiMatrix2": serviceInstalledEtiMatrix2,
       "serviceInstallSwActivationCode": serviceInstallSwActivationCode,
       "setup": setup,
       "input": input,
       "socket1": socket1,
       "socket1Enable": socket1Enable,
       "socket1TransmissionMode": socket1TransmissionMode,
       "socket1UnicastIp": socket1UnicastIp,
       "socket1MulticastIp": socket1MulticastIp,
       "socket1SourceIp": socket1SourceIp,
       "socket1VlanEnable": socket1VlanEnable,
       "socket1VlanId": socket1VlanId,
       "socket1Port": socket1Port,
       "socket1Protocol": socket1Protocol,
       "socket1BufferDuration": socket1BufferDuration,
       "socket1Fec": socket1Fec,
       "socket1InputBitrate": socket1InputBitrate,
       "socket1Latency": socket1Latency,
       "socket1Content": socket1Content,
       "socket1Jitter": socket1Jitter,
       "socket1DabFec": socket1DabFec,
       "socket1Statistics": socket1Statistics,
       "socket1RxPackets": socket1RxPackets,
       "socket1RxDisorderedPkts": socket1RxDisorderedPkts,
       "socket1RxDuplicatedPkts": socket1RxDuplicatedPkts,
       "socket1RxReorderedPkts": socket1RxReorderedPkts,
       "socket1RxLostPkts": socket1RxLostPkts,
       "socket1RxOutOfRangePackets": socket1RxOutOfRangePackets,
       "socket1RxFixedPackets": socket1RxFixedPackets,
       "socket1CorrectedRSCodewords": socket1CorrectedRSCodewords,
       "socket1NotCorrectedRSCodewords": socket1NotCorrectedRSCodewords,
       "socket1TimeWithoutService": socket1TimeWithoutService,
       "socket1RxStatisticsReset": socket1RxStatisticsReset,
       "socket1UnicastNetmask": socket1UnicastNetmask,
       "socket1MacAddr": socket1MacAddr,
       "socket2": socket2,
       "socket2Enable": socket2Enable,
       "socket2TransmissionMode": socket2TransmissionMode,
       "socket2UnicastIp": socket2UnicastIp,
       "socket2MulticastIp": socket2MulticastIp,
       "socket2SourceIp": socket2SourceIp,
       "socket2VlanEnable": socket2VlanEnable,
       "socket2VlanId": socket2VlanId,
       "socket2Port": socket2Port,
       "socket2Protocol": socket2Protocol,
       "socket2BufferDuration": socket2BufferDuration,
       "socket2Fec": socket2Fec,
       "socket2InputBitrate": socket2InputBitrate,
       "socket2Latency": socket2Latency,
       "socket2Content": socket2Content,
       "socket2Jitter": socket2Jitter,
       "socket2DabFec": socket2DabFec,
       "socket2Statistics": socket2Statistics,
       "socket2RxPackets": socket2RxPackets,
       "socket2RxDisorderedPkts": socket2RxDisorderedPkts,
       "socket2RxDuplicatedPkts": socket2RxDuplicatedPkts,
       "socket2RxReorderedPkts": socket2RxReorderedPkts,
       "socket2RxLostPkts": socket2RxLostPkts,
       "socket2RxOutOfRangePackets": socket2RxOutOfRangePackets,
       "socket2RxFixedPackets": socket2RxFixedPackets,
       "socket2CorrectedRSCodewords": socket2CorrectedRSCodewords,
       "socket2NotCorrectedRSCodewords": socket2NotCorrectedRSCodewords,
       "socket2TimeWithoutService": socket2TimeWithoutService,
       "socket2RxStatisticsReset": socket2RxStatisticsReset,
       "socket2UnicastNetmask": socket2UnicastNetmask,
       "socket2MacAddr": socket2MacAddr,
       "inputSwitching": inputSwitching,
       "sourceSelected": sourceSelected,
       "switchingMode": switchingMode,
       "monitorOutput": monitorOutput,
       "inputSwitchingHysteresis": inputSwitchingHysteresis,
       "nonSeamlessHysteresis": nonSeamlessHysteresis,
       "higherPriorityHysteresis": higherPriorityHysteresis,
       "asiBypassEqualizers": asiBypassEqualizers,
       "input1": input1,
       "input1Priority": input1Priority,
       "input1Status": input1Status,
       "input1Pat": input1Pat,
       "input2": input2,
       "input2Priority": input2Priority,
       "input2Status": input2Status,
       "input2Pat": input2Pat,
       "input3": input3,
       "input3Priority": input3Priority,
       "input3Status": input3Status,
       "input3Pat": input3Pat,
       "input4": input4,
       "input4Priority": input4Priority,
       "input4Status": input4Status,
       "input4Pat": input4Pat,
       "asi1": asi1,
       "asi1Enable": asi1Enable,
       "asi2": asi2,
       "asi2Enable": asi2Enable,
       "eti1": eti1,
       "eti1Enable": eti1Enable,
       "eti1DetectedLayer": eti1DetectedLayer,
       "eti1InputBitrate": eti1InputBitrate,
       "eti1Statistics": eti1Statistics,
       "eti1CorrectedRSCodewords": eti1CorrectedRSCodewords,
       "eti1NotCorrectedRSCodewords": eti1NotCorrectedRSCodewords,
       "eti1TimeWithoutService": eti1TimeWithoutService,
       "eti1RxStatisticsReset": eti1RxStatisticsReset,
       "eti2": eti2,
       "eti2Enable": eti2Enable,
       "eti2DetectedLayer": eti2DetectedLayer,
       "eti2InputBitrate": eti2InputBitrate,
       "eti2Statistics": eti2Statistics,
       "eti2CorrectedRSCodewords": eti2CorrectedRSCodewords,
       "eti2NotCorrectedRSCodewords": eti2NotCorrectedRSCodewords,
       "eti2TimeWithoutService": eti2TimeWithoutService,
       "eti2RxStatisticsReset": eti2RxStatisticsReset,
       "dttReceiver1": dttReceiver1,
       "dttReceiver1Enable": dttReceiver1Enable,
       "dttReceiver1Standard": dttReceiver1Standard,
       "dttReceiver1Bandwidth": dttReceiver1Bandwidth,
       "dttReceiver1InputFrequencyMode": dttReceiver1InputFrequencyMode,
       "dttReceiver1PlpId": dttReceiver1PlpId,
       "dttReceiver1BerMute": dttReceiver1BerMute,
       "dttReceiver1ChannelMode": dttReceiver1ChannelMode,
       "dttReceiver1Channel": dttReceiver1Channel,
       "dttReceiver1ChannelOffset": dttReceiver1ChannelOffset,
       "dttReceiver1ChannelResolution": dttReceiver1ChannelResolution,
       "dttReceiver1CentralFrequencyMode": dttReceiver1CentralFrequencyMode,
       "dttReceiver1Frequency": dttReceiver1Frequency,
       "dttReceiver1Status": dttReceiver1Status,
       "dttReceiver1StatusReceiver": dttReceiver1StatusReceiver,
       "dttReceiver1InputFrequency": dttReceiver1InputFrequency,
       "dttReceiver1DvbT": dttReceiver1DvbT,
       "dttReceiver1TModulation": dttReceiver1TModulation,
       "dttReceiver1Constellation": dttReceiver1Constellation,
       "dttReceiver1Fec": dttReceiver1Fec,
       "dttReceiver1GuardInterval": dttReceiver1GuardInterval,
       "dttReceiver1Fft": dttReceiver1Fft,
       "dttReceiver1CellId": dttReceiver1CellId,
       "dttReceiver1TMeasures": dttReceiver1TMeasures,
       "dttReceiver1Cber": dttReceiver1Cber,
       "dttReceiver1Vber": dttReceiver1Vber,
       "dttReceiver1DvbT2": dttReceiver1DvbT2,
       "dttReceiver1T2System": dttReceiver1T2System,
       "dttReceiver1T2Profile": dttReceiver1T2Profile,
       "dttReceiver1T2Version": dttReceiver1T2Version,
       "dttReceiver1T2CellId": dttReceiver1T2CellId,
       "dttReceiver1T2NetworkId": dttReceiver1T2NetworkId,
       "dttReceiver1T2SystemId": dttReceiver1T2SystemId,
       "dttReceiver1T2Frame": dttReceiver1T2Frame,
       "dttRx1T2L1SignallingModulation": dttRx1T2L1SignallingModulation,
       "dttRx1T2L1PostScrambling": dttRx1T2L1PostScrambling,
       "dttRx1T2PreambleFormat": dttRx1T2PreambleFormat,
       "dttRx1T2ExtendedCarrierMode": dttRx1T2ExtendedCarrierMode,
       "dttRx1T2FftSize": dttRx1T2FftSize,
       "dttRx1T2GuardInterval": dttRx1T2GuardInterval,
       "dttRx1T2PaprReduction": dttRx1T2PaprReduction,
       "dttRx1T2PilotPattern": dttRx1T2PilotPattern,
       "dttRx1T2FramesPerSuperframe": dttRx1T2FramesPerSuperframe,
       "dttRx1T2OfdmSymbolsPerSuperframe": dttRx1T2OfdmSymbolsPerSuperframe,
       "dttReceiver1T2PLP": dttReceiver1T2PLP,
       "dttRx1NumberOfPlps": dttRx1NumberOfPlps,
       "dttRx1PlpId": dttRx1PlpId,
       "dttRx1T2PlpType": dttRx1T2PlpType,
       "dttRx1T2PlpMode": dttRx1T2PlpMode,
       "dttRx1T2PlpGroupId": dttRx1T2PlpGroupId,
       "dttRx1T2PlpConstellation": dttRx1T2PlpConstellation,
       "dttRx1T2PlpRotatedConstellation": dttRx1T2PlpRotatedConstellation,
       "dttRx1T2FecType": dttRx1T2FecType,
       "dttRx1T2CodeRate": dttRx1T2CodeRate,
       "dttRx1T2NumberOfFecBlocks": dttRx1T2NumberOfFecBlocks,
       "dttRx1T2TypeOfTimeInvervaling": dttRx1T2TypeOfTimeInvervaling,
       "dttRx1T2LengthOfTimeInvervaling": dttRx1T2LengthOfTimeInvervaling,
       "dttRx1T2InBandSignalling": dttRx1T2InBandSignalling,
       "dttReceiver1T2Measures": dttReceiver1T2Measures,
       "dttRx1T2BerBeforeLdpc": dttRx1T2BerBeforeLdpc,
       "dttRx1T2BerBeforeBch": dttRx1T2BerBeforeBch,
       "dttRx1T2BbframeErrorRatio": dttRx1T2BbframeErrorRatio,
       "dttReceiver1Isdbt": dttReceiver1Isdbt,
       "dttReceiver1IsdbtSystem": dttReceiver1IsdbtSystem,
       "dttRx1IsdbtSystem": dttRx1IsdbtSystem,
       "dttRx1IsdbtMode": dttRx1IsdbtMode,
       "dttRx1IsdbtGuard": dttRx1IsdbtGuard,
       "dttRx1IsdbtEws": dttRx1IsdbtEws,
       "dttRx1IsdbtPartialRx": dttRx1IsdbtPartialRx,
       "dttReceiver1IsdbtLayerA": dttReceiver1IsdbtLayerA,
       "dttRx1IsdbtLASegments": dttRx1IsdbtLASegments,
       "dttRx1IsdbtLAInterleaveLength": dttRx1IsdbtLAInterleaveLength,
       "dttRx1IsdbtLAConstellation": dttRx1IsdbtLAConstellation,
       "dttRx1IsdbtLACodeRate": dttRx1IsdbtLACodeRate,
       "dttRx1IsdbtLACber": dttRx1IsdbtLACber,
       "dttRx1IsdbtLABERbeforeRS": dttRx1IsdbtLABERbeforeRS,
       "dttReceiver1IsdbtLayerB": dttReceiver1IsdbtLayerB,
       "dttRx1IsdbtLBSegments": dttRx1IsdbtLBSegments,
       "dttRx1IsdbtLBInterleaveLength": dttRx1IsdbtLBInterleaveLength,
       "dttRx1IsdbtLBConstellation": dttRx1IsdbtLBConstellation,
       "dttRx1IsdbtLBCodeRate": dttRx1IsdbtLBCodeRate,
       "dttRx1IsdbtLBCber": dttRx1IsdbtLBCber,
       "dttRx1IsdbtLBBERbeforeRS": dttRx1IsdbtLBBERbeforeRS,
       "dttReceiver1IsdbtLayerC": dttReceiver1IsdbtLayerC,
       "dttRx1IsdbtLCSegments": dttRx1IsdbtLCSegments,
       "dttRx1IsdbtLCInterleaveLength": dttRx1IsdbtLCInterleaveLength,
       "dttRx1IsdbtLCConstellation": dttRx1IsdbtLCConstellation,
       "dttRx1IsdbtLCCodeRate": dttRx1IsdbtLCCodeRate,
       "dttRx1IsdbtLCCber": dttRx1IsdbtLCCber,
       "dttRx1IsdbtLCBERbeforeRS": dttRx1IsdbtLCBERbeforeRS,
       "dttReceiver1CommonMeasures": dttReceiver1CommonMeasures,
       "dttRx1Mer": dttRx1Mer,
       "dttRx1Snr": dttRx1Snr,
       "dttRx1Level": dttRx1Level,
       "dstReceiver1": dstReceiver1,
       "dstReceiver1Demodulator": dstReceiver1Demodulator,
       "dstReceiver1Enable": dstReceiver1Enable,
       "dstReceiver1Status": dstReceiver1Status,
       "dstReceiver1Temperature": dstReceiver1Temperature,
       "dstReceiver1DemFrequency": dstReceiver1DemFrequency,
       "dstReceiver1Band": dstReceiver1Band,
       "dstReceiver1Frequency": dstReceiver1Frequency,
       "dstReceiver1Polarization": dstReceiver1Polarization,
       "dstReceiver1Satellite": dstReceiver1Satellite,
       "dstReceiver1DemModulation": dstReceiver1DemModulation,
       "dstReceiver1DvbMode": dstReceiver1DvbMode,
       "dstReceiver1SymbolRateMode": dstReceiver1SymbolRateMode,
       "dstReceiver1ConfiguredSymbolRate": dstReceiver1ConfiguredSymbolRate,
       "dstReceiver1MeasuredSymbolRate": dstReceiver1MeasuredSymbolRate,
       "dstReceiver1Rolloff": dstReceiver1Rolloff,
       "dstReceiver1Pilots": dstReceiver1Pilots,
       "dstReceiver1FrameLength": dstReceiver1FrameLength,
       "dstReceiver1Modulation": dstReceiver1Modulation,
       "dstReceiver1Fec": dstReceiver1Fec,
       "dstReceiver1DemScrambling": dstReceiver1DemScrambling,
       "dstReceiver1PlsMode": dstReceiver1PlsMode,
       "dstReceiver1Pls": dstReceiver1Pls,
       "dstReceiver1DemQuality": dstReceiver1DemQuality,
       "dstReceiver1Cber": dstReceiver1Cber,
       "dstReceiver1Vber": dstReceiver1Vber,
       "dstReceiver1Ldpc": dstReceiver1Ldpc,
       "dstReceiver1Per": dstReceiver1Per,
       "dstReceiver1CN": dstReceiver1CN,
       "dstReceiver1LinkMarginThreshold": dstReceiver1LinkMarginThreshold,
       "dstReceiver1LinkMargin": dstReceiver1LinkMargin,
       "dstReceiver1Attenuation": dstReceiver1Attenuation,
       "dstReceiver1Level": dstReceiver1Level,
       "dstReceiver1Lnb": dstReceiver1Lnb,
       "dstReceiver1Mode": dstReceiver1Mode,
       "dstReceiver1LnbStatus": dstReceiver1LnbStatus,
       "dstReceiver1LnbSingleDualMode": dstReceiver1LnbSingleDualMode,
       "dstReceiver1LnbOlLow": dstReceiver1LnbOlLow,
       "dstReceiver1LnbBandSwitchingFreq": dstReceiver1LnbBandSwitchingFreq,
       "dstReceiver1LnbOlHigh": dstReceiver1LnbOlHigh,
       "dstReceiver1LnbManualMode": dstReceiver1LnbManualMode,
       "dstReceiver1Voltage": dstReceiver1Voltage,
       "dstReceiver1Tone22kHz": dstReceiver1Tone22kHz,
       "dstReceiver1OlManual": dstReceiver1OlManual,
       "dstReceiver1Ts": dstReceiver1Ts,
       "dstReceiver1TsAvailableIsis": dstReceiver1TsAvailableIsis,
       "dstReceiver1TsIsi": dstReceiver1TsIsi,
       "dstReceiver1TsAsiOutput": dstReceiver1TsAsiOutput,
       "dstReceiver1TsRate": dstReceiver1TsRate,
       "dstReceiver1TsMode": dstReceiver1TsMode,
       "dstReceiver1TsBiss": dstReceiver1TsBiss,
       "dstReceiver1TsBissEnable": dstReceiver1TsBissEnable,
       "dstReceiver1TsBissMode": dstReceiver1TsBissMode,
       "dstReceiver1TsBissPass": dstReceiver1TsBissPass,
       "dstReceiver1TsBissInjectId": dstReceiver1TsBissInjectId,
       "dstReceiver1TsCam": dstReceiver1TsCam,
       "dstReceiver1TsCamEnable": dstReceiver1TsCamEnable,
       "dstReceiver1TsCamStatus": dstReceiver1TsCamStatus,
       "dstReceiver1TsCamReset": dstReceiver1TsCamReset,
       "dstServicesTable": dstServicesTable,
       "dstServicesEntry": dstServicesEntry,
       "dstServiceIndex": dstServiceIndex,
       "dstDecryptEnable": dstDecryptEnable,
       "dstProgramId": dstProgramId,
       "dstServiceName": dstServiceName,
       "dstServiceStatus": dstServiceStatus,
       "dstReceiver1TsEtiOutput": dstReceiver1TsEtiOutput,
       "dstR1TsEtiOutputPid": dstR1TsEtiOutputPid,
       "dstR1TsEtiOutputType": dstR1TsEtiOutputType,
       "dstR1TsEtiOutputStreamTo": dstR1TsEtiOutputStreamTo,
       "dstR1TsEtiOutputLayer": dstR1TsEtiOutputLayer,
       "dstR1TsEtiOutputInputBitrate": dstR1TsEtiOutputInputBitrate,
       "dstR1TsEtiOutputStatistics": dstR1TsEtiOutputStatistics,
       "dstR1TsEOCorrectedRsCodewords": dstR1TsEOCorrectedRsCodewords,
       "dstR1TsEONotCorrectedRsCodewords": dstR1TsEONotCorrectedRsCodewords,
       "dstR1TsEtiOutputWithouService": dstR1TsEtiOutputWithouService,
       "dstR1TsEOResetCounters": dstR1TsEOResetCounters,
       "exciter": exciter,
       "rfInput": rfInput,
       "rfInputConfiguration": rfInputConfiguration,
       "inputFrequencyMode": inputFrequencyMode,
       "inputFrequency": inputFrequency,
       "inputLevel": inputLevel,
       "inputLevelThreshold": inputLevelThreshold,
       "inputFrequencyFlt": inputFrequencyFlt,
       "inputChannelMode": inputChannelMode,
       "inputChannel": inputChannel,
       "inputChannelOffset": inputChannelOffset,
       "inputChannelResolution": inputChannelResolution,
       "inputChannelChannel": inputChannelChannel,
       "inputCentralFrequencyMode": inputCentralFrequencyMode,
       "inputCentralFrequency": inputCentralFrequency,
       "inputCentralFrequencyMHz": inputCentralFrequencyMHz,
       "echoCanceller": echoCanceller,
       "ecGeneral": ecGeneral,
       "ecTemperature": ecTemperature,
       "ecSystem": ecSystem,
       "ecBandwidth": ecBandwidth,
       "ecBandwidthAdaptation": ecBandwidthAdaptation,
       "ecAdditionDelay": ecAdditionDelay,
       "ecCurrentDelay": ecCurrentDelay,
       "ecLevels": ecLevels,
       "ecInputLevel": ecInputLevel,
       "ecReferenceLevel": ecReferenceLevel,
       "ecCancellationLevel": ecCancellationLevel,
       "ecOutputCancellation": ecOutputCancellation,
       "ecWindows": ecWindows,
       "ecEnable": ecEnable,
       "muteGainMarginThreshold": muteGainMarginThreshold,
       "ecGainMargin": ecGainMargin,
       "ecWindowSpeed": ecWindowSpeed,
       "ecWindow01": ecWindow01,
       "ecWindow02": ecWindow02,
       "ecWindow03": ecWindow03,
       "ecWindow04": ecWindow04,
       "ecWindow05": ecWindow05,
       "ecWindow06": ecWindow06,
       "ecWindow07": ecWindow07,
       "ecWindow08": ecWindow08,
       "ecWindow09": ecWindow09,
       "ecWindow10": ecWindow10,
       "ecWindow11": ecWindow11,
       "ecWindow12": ecWindow12,
       "ecWindow13": ecWindow13,
       "ecWindow14": ecWindow14,
       "ecWindow15": ecWindow15,
       "ecWindow16": ecWindow16,
       "ecUnmuteRetriesInterval": ecUnmuteRetriesInterval,
       "ecPrecorrector": ecPrecorrector,
       "ecLinearPrecorrection": ecLinearPrecorrection,
       "ecNonLinearPrecorrection": ecNonLinearPrecorrection,
       "ecSlopeCorrection": ecSlopeCorrection,
       "ecPrecorrectorLevels": ecPrecorrectorLevels,
       "ecPrecorrectorInput": ecPrecorrectorInput,
       "ecPrecorrectorStatus": ecPrecorrectorStatus,
       "ecPrecorrectorFeedback": ecPrecorrectorFeedback,
       "ecPrecorrectorOutput": ecPrecorrectorOutput,
       "ecSpectrumMeasures": ecSpectrumMeasures,
       "ecShoulderAlarm": ecShoulderAlarm,
       "ecLowerShoulder": ecLowerShoulder,
       "ecUpperShoulder": ecUpperShoulder,
       "ecInBandLevelVariation": ecInBandLevelVariation,
       "ecNonLinearStoredPrecorrection": ecNonLinearStoredPrecorrection,
       "ecNonLinearPrecorrectorFeedback": ecNonLinearPrecorrectorFeedback,
       "modulator": modulator,
       "modulatorGeneral": modulatorGeneral,
       "modulatorTemperature": modulatorTemperature,
       "modulatorStandard": modulatorStandard,
       "modulatorTestMode": modulatorTestMode,
       "modulatorStandardAutoConfig": modulatorStandardAutoConfig,
       "modulatorGeneralPrbs": modulatorGeneralPrbs,
       "modulatorPrbsType": modulatorPrbsType,
       "modulatorPrbsPid": modulatorPrbsPid,
       "modulatorPrbsIn": modulatorPrbsIn,
       "modulatorDVBT": modulatorDVBT,
       "dvbtSystem": dvbtSystem,
       "dvbtBandwidth": dvbtBandwidth,
       "dvbtCellIdEnable": dvbtCellIdEnable,
       "dvbtCellId": dvbtCellId,
       "dvbtNetwork": dvbtNetwork,
       "dvbtNetworkType": dvbtNetworkType,
       "dvbtAutoconfigurationMip": dvbtAutoconfigurationMip,
       "dvbtLocalDelay": dvbtLocalDelay,
       "dvbtRateAdaptation": dvbtRateAdaptation,
       "dvbtBufferDuration": dvbtBufferDuration,
       "dvbtRetransmissionDelay": dvbtRetransmissionDelay,
       "dvbtMip": dvbtMip,
       "dvbtMaximumNetworkDelay": dvbtMaximumNetworkDelay,
       "dvbtTimeOffset": dvbtTimeOffset,
       "dvbtTransmitterId": dvbtTransmitterId,
       "dvbtTimingInformation": dvbtTimingInformation,
       "dvbtCurrentNetworkDelay": dvbtCurrentNetworkDelay,
       "dvbtInputBufferDelay": dvbtInputBufferDelay,
       "dvbtProcessingDelay": dvbtProcessingDelay,
       "dvbtNetworkDelayMargin": dvbtNetworkDelayMargin,
       "dvbtDelay": dvbtDelay,
       "dvbtModulation": dvbtModulation,
       "dvbtConstellation": dvbtConstellation,
       "dvbtFec": dvbtFec,
       "dvbtGuardInterval": dvbtGuardInterval,
       "dvbtFft": dvbtFft,
       "dvbtAutoconfigurationFromDttRcv": dvbtAutoconfigurationFromDttRcv,
       "modulatorDVBT2": modulatorDVBT2,
       "dvbt2System": dvbt2System,
       "dvbt2Profile": dvbt2Profile,
       "dvbt2InputMode": dvbt2InputMode,
       "dvbt2T2miPid": dvbt2T2miPid,
       "dvbt2Bandwidth": dvbt2Bandwidth,
       "dvbt2Version": dvbt2Version,
       "dvbt2CellId": dvbt2CellId,
       "dvbt2CellIdT2mi": dvbt2CellIdT2mi,
       "dvbt2CellIdOverwrite": dvbt2CellIdOverwrite,
       "dvbt2CellIdUser": dvbt2CellIdUser,
       "dvbt2NetworkId": dvbt2NetworkId,
       "dvbt2NetworkIdT2mi": dvbt2NetworkIdT2mi,
       "dvbt2NetworkIdOverwrite": dvbt2NetworkIdOverwrite,
       "dvbt2NetworkIdUser": dvbt2NetworkIdUser,
       "dvbt2SystemId": dvbt2SystemId,
       "dvbt2SystemIdT2mi": dvbt2SystemIdT2mi,
       "dvbt2SystemIdOverwrite": dvbt2SystemIdOverwrite,
       "dvbt2SystemIdUser": dvbt2SystemIdUser,
       "dvbt2Frequency": dvbt2Frequency,
       "dvbt2FrequencyT2mi": dvbt2FrequencyT2mi,
       "dvbt2FrequencyOverwrite": dvbt2FrequencyOverwrite,
       "dvbt2Network": dvbt2Network,
       "dvbt2NetworkType": dvbt2NetworkType,
       "dvbt2SfnRelativeReference": dvbt2SfnRelativeReference,
       "dvbt2SfnAbsoluteReference": dvbt2SfnAbsoluteReference,
       "dvbt2TimeStamp": dvbt2TimeStamp,
       "dvbt2SuperFrameDuration": dvbt2SuperFrameDuration,
       "dvbt2LocalDelay": dvbt2LocalDelay,
       "dvbt2BufferDuration": dvbt2BufferDuration,
       "dvbt2IndividualAddresssing": dvbt2IndividualAddresssing,
       "dvbt2TimeOffset": dvbt2TimeOffset,
       "dvbt2TransmitterId": dvbt2TransmitterId,
       "dvbt2TimingInformation": dvbt2TimingInformation,
       "dvbt2InputBufferDelay": dvbt2InputBufferDelay,
       "dvbt2ProcessingDelay": dvbt2ProcessingDelay,
       "dvbt2NetworkDelayMargin": dvbt2NetworkDelayMargin,
       "dvbt2Delay": dvbt2Delay,
       "dvbt2Frame": dvbt2Frame,
       "dvbt2L1SignallingModulation": dvbt2L1SignallingModulation,
       "dvbt2L1PostScrambling": dvbt2L1PostScrambling,
       "dvbt2LiteCompatible": dvbt2LiteCompatible,
       "dvbt2PreambleFormat": dvbt2PreambleFormat,
       "dvbt2MisoGroup": dvbt2MisoGroup,
       "dvbt2ExtendedCarrierMode": dvbt2ExtendedCarrierMode,
       "dvbt2FftSize": dvbt2FftSize,
       "dvbt2GuardInterval": dvbt2GuardInterval,
       "dvbt2PaprReduction": dvbt2PaprReduction,
       "dvbt2PilotPattern": dvbt2PilotPattern,
       "dvbt2FramesPerSuperframe": dvbt2FramesPerSuperframe,
       "dvbt2OfdmSymbolsPerSuperframe": dvbt2OfdmSymbolsPerSuperframe,
       "dvbt2Plp": dvbt2Plp,
       "numberOfPlps": numberOfPlps,
       "dvbt2PlpTable": dvbt2PlpTable,
       "dvbt2PlpEntry": dvbt2PlpEntry,
       "plpIndex": plpIndex,
       "plpId": plpId,
       "plpType": plpType,
       "plpMode": plpMode,
       "plpGroupId": plpGroupId,
       "plpConstellation": plpConstellation,
       "rotatedConstellation": rotatedConstellation,
       "fecType": fecType,
       "codeRate": codeRate,
       "numberOfFecBlocks": numberOfFecBlocks,
       "typeOfTimeInvervaling": typeOfTimeInvervaling,
       "lengthOfTimeInvervaling": lengthOfTimeInvervaling,
       "inBandSignalling": inBandSignalling,
       "plpBer": plpBer,
       "modulatorISDBT": modulatorISDBT,
       "isdbtSystem": isdbtSystem,
       "isdbtBandwidth": isdbtBandwidth,
       "isdbtInputMode": isdbtInputMode,
       "isdbtBtsRateLock": isdbtBtsRateLock,
       "isdbtConditionaAccessSystem": isdbtConditionaAccessSystem,
       "isdbtCasBiss": isdbtCasBiss,
       "isdbtCasMode": isdbtCasMode,
       "isdbtCasPass": isdbtCasPass,
       "isdbtCasInjectId": isdbtCasInjectId,
       "isdbtBroadcastTransportStream": isdbtBroadcastTransportStream,
       "isdbtBtsDecompression": isdbtBtsDecompression,
       "isdbtBtsIipPid": isdbtBtsIipPid,
       "isdbtBtsAuxPid": isdbtBtsAuxPid,
       "isdbtBtsPidRemapping": isdbtBtsPidRemapping,
       "isdbtBtsRestorePcr": isdbtBtsRestorePcr,
       "isdbtBtsBypass": isdbtBtsBypass,
       "isdbtBtsVirtualChannel": isdbtBtsVirtualChannel,
       "isdbtBtsChannel": isdbtBtsChannel,
       "isdbtBtsAreaCode": isdbtBtsAreaCode,
       "isdbtBts188BInputLocked": isdbtBts188BInputLocked,
       "isdbtBts204BOutputLocked": isdbtBts204BOutputLocked,
       "isdbtPidList": isdbtPidList,
       "isdbtDeletePids": isdbtDeletePids,
       "isdbtPidListTable": isdbtPidListTable,
       "isdbtPidListEntry": isdbtPidListEntry,
       "isdbtPidIndex": isdbtPidIndex,
       "isdbtPidIn": isdbtPidIn,
       "isdbtPidOut": isdbtPidOut,
       "isdbtNetwork": isdbtNetwork,
       "isdbtNetworkType": isdbtNetworkType,
       "isdbtLocalDelay": isdbtLocalDelay,
       "iip": iip,
       "isdbtMaximumNetworkDelay": isdbtMaximumNetworkDelay,
       "isdbtTimeOffset": isdbtTimeOffset,
       "isdbtStaticDelay": isdbtStaticDelay,
       "isdbtTransmitterId": isdbtTransmitterId,
       "isdbtTimingInformation": isdbtTimingInformation,
       "isdbtCurrentNetworkDelay": isdbtCurrentNetworkDelay,
       "isdbtInputBufferDelay": isdbtInputBufferDelay,
       "isdbtProcessingDelay": isdbtProcessingDelay,
       "isdbtNetworkDelayMargin": isdbtNetworkDelayMargin,
       "isdbtDelay": isdbtDelay,
       "isdbtBufferDuration": isdbtBufferDuration,
       "isdbtRfDelay": isdbtRfDelay,
       "isdbtModulation": isdbtModulation,
       "isdbtFft": isdbtFft,
       "isdbtGuardInterval": isdbtGuardInterval,
       "isdbtPartialReception": isdbtPartialReception,
       "isdbtLayerA": isdbtLayerA,
       "isdbtPidsLA": isdbtPidsLA,
       "isdbtConstellationLA": isdbtConstellationLA,
       "isdbtCodeRateLA": isdbtCodeRateLA,
       "isdbtTimeIntervalLengthLA": isdbtTimeIntervalLengthLA,
       "isdbtNumberOfSegmentsLA": isdbtNumberOfSegmentsLA,
       "isdbtBitrateLA": isdbtBitrateLA,
       "isdbtBerLA": isdbtBerLA,
       "isdbtServicesA": isdbtServicesA,
       "isdbtLayerB": isdbtLayerB,
       "isdbtPidsLB": isdbtPidsLB,
       "isdbtConstellationLB": isdbtConstellationLB,
       "isdbtCodeRateLB": isdbtCodeRateLB,
       "isdbtTimeIntervalLengthLB": isdbtTimeIntervalLengthLB,
       "isdbtNumberOfSegmentsLB": isdbtNumberOfSegmentsLB,
       "isdbtBitrateLB": isdbtBitrateLB,
       "isdbtBerLB": isdbtBerLB,
       "isdbtServicesB": isdbtServicesB,
       "isdbtLayerC": isdbtLayerC,
       "isdbtPidsLC": isdbtPidsLC,
       "isdbtConstellationLC": isdbtConstellationLC,
       "isdbtCodeRateLC": isdbtCodeRateLC,
       "isdbtTimeIntervalLengthLC": isdbtTimeIntervalLengthLC,
       "isdbtNumberOfSegmentsLC": isdbtNumberOfSegmentsLC,
       "isdbtBitrateLC": isdbtBitrateLC,
       "isdbtBerLC": isdbtBerLC,
       "isdbtServicesC": isdbtServicesC,
       "isdbtPidFiltering": isdbtPidFiltering,
       "isdbtPSI": isdbtPSI,
       "isdbtPAT": isdbtPAT,
       "isdbtAvailablePrograms": isdbtAvailablePrograms,
       "isdbtBIT": isdbtBIT,
       "isdbtAffiliationId": isdbtAffiliationId,
       "isdbtNIT": isdbtNIT,
       "isdbtNetworkId": isdbtNetworkId,
       "isdbtNetworkName": isdbtNetworkName,
       "isdbtTransportStreamId": isdbtTransportStreamId,
       "isdbtOriginalNetworkId": isdbtOriginalNetworkId,
       "isdbtAreaCode": isdbtAreaCode,
       "isdbtOverwriteAreaCode": isdbtOverwriteAreaCode,
       "isdbtFrequency": isdbtFrequency,
       "isdbtOverwriteFrequency": isdbtOverwriteFrequency,
       "isdbtRemoteControlIdKey": isdbtRemoteControlIdKey,
       "isdbtVirtualChannelBypass": isdbtVirtualChannelBypass,
       "isdbtOverwriteRemoteControlIdKey": isdbtOverwriteRemoteControlIdKey,
       "isdbtTSName": isdbtTSName,
       "isdbtTOT": isdbtTOT,
       "isdbtCountry": isdbtCountry,
       "isdbtRegionId": isdbtRegionId,
       "modulatorDAB": modulatorDAB,
       "dabSystem": dabSystem,
       "dabTransmitterId": dabTransmitterId,
       "dabMode": dabMode,
       "dabNetwork": dabNetwork,
       "dabNetworkType": dabNetworkType,
       "dabSynchronizationType": dabSynchronizationType,
       "dabRelativeSfnReference": dabRelativeSfnReference,
       "dabAbsoluteSfnReference": dabAbsoluteSfnReference,
       "dabAvailableTimestampType": dabAvailableTimestampType,
       "dabProcessingDelayCfg": dabProcessingDelayCfg,
       "dabBufferingTime": dabBufferingTime,
       "dabDynamicCompensationDelay": dabDynamicCompensationDelay,
       "dabMaximumBitrateOffset": dabMaximumBitrateOffset,
       "dabBitrateOffset": dabBitrateOffset,
       "dabTimestampLevel": dabTimestampLevel,
       "dabTistFct": dabTistFct,
       "dabFct0AsReference": dabFct0AsReference,
       "dabLocalDelay": dabLocalDelay,
       "dabOffsetDelayAutoconfigure": dabOffsetDelayAutoconfigure,
       "dabTiiCode": dabTiiCode,
       "dabTiiCodeConfiguration": dabTiiCodeConfiguration,
       "dabMainId": dabMainId,
       "dabSubId": dabSubId,
       "dabMnsc": dabMnsc,
       "dabTimeInformationGroup": dabTimeInformationGroup,
       "dabReceivedInformationTime": dabReceivedInformationTime,
       "dabDateAndTime": dabDateAndTime,
       "dabTimeAccurary": dabTimeAccurary,
       "dabSynchronizationToFrame": dabSynchronizationToFrame,
       "dabTsc": dabTsc,
       "dabReceivedTSC": dabReceivedTSC,
       "dabSavedTSC": dabSavedTSC,
       "dabOffsetDelayTSC": dabOffsetDelayTSC,
       "dabMainIdTSC": dabMainIdTSC,
       "dabSubIdTSC": dabSubIdTSC,
       "dabControlFlagsTSC": dabControlFlagsTSC,
       "dabTimmingInformation": dabTimmingInformation,
       "dabProcessingDelay": dabProcessingDelay,
       "dabMinimumProcessingDelay": dabMinimumProcessingDelay,
       "dabCompensationDelay": dabCompensationDelay,
       "dabMargin": dabMargin,
       "dabStc": dabStc,
       "dabStcNumberOfServices": dabStcNumberOfServices,
       "dabStreamCharacterizationTable": dabStreamCharacterizationTable,
       "dabStreamCharacterizationEntry": dabStreamCharacterizationEntry,
       "dabStcIndex": dabStcIndex,
       "dabStcSubChId": dabStcSubChId,
       "dabStcSubChSa": dabStcSubChSa,
       "dabStcTpl": dabStcTpl,
       "dabStcBitrate": dabStcBitrate,
       "modPrecorrector": modPrecorrector,
       "modLinearPrecorrection": modLinearPrecorrection,
       "modLinearPrecorrectionEnable": modLinearPrecorrectionEnable,
       "modNonLinearPrecorrection": modNonLinearPrecorrection,
       "modNonLinearPrecorrectionEnable": modNonLinearPrecorrectionEnable,
       "modNonLinearStoredPrecorrection": modNonLinearStoredPrecorrection,
       "modNonLinearPrecorrectorFeedback": modNonLinearPrecorrectorFeedback,
       "modPrecorrectorLevels": modPrecorrectorLevels,
       "modPrecorrectorInput": modPrecorrectorInput,
       "modPrecorrectorStatus": modPrecorrectorStatus,
       "modPrecorrectorFeedback": modPrecorrectorFeedback,
       "modPrecorrectorOutput": modPrecorrectorOutput,
       "modSpectrumMeasures": modSpectrumMeasures,
       "modShoulderAlarm": modShoulderAlarm,
       "modLowerShoulder": modLowerShoulder,
       "modUpperShoulder": modUpperShoulder,
       "modInBandLevelVariation": modInBandLevelVariation,
       "modThresholdMer": modThresholdMer,
       "modMer": modMer,
       "modMerFlt": modMerFlt,
       "modBerFlt": modBerFlt,
       "rfOutput": rfOutput,
       "outputFrequencyMode": outputFrequencyMode,
       "outputFrequency": outputFrequency,
       "outputFrequencyFlt": outputFrequencyFlt,
       "outputChannelMode": outputChannelMode,
       "outputChannel": outputChannel,
       "outputChannelOffset": outputChannelOffset,
       "ouputChannelResolution": ouputChannelResolution,
       "dabOutputChannel": dabOutputChannel,
       "outputCentralFrequencyMode": outputCentralFrequencyMode,
       "outputCentralFrequency": outputCentralFrequency,
       "outputCentralFrequencyMHz": outputCentralFrequencyMHz,
       "mutes": mutes,
       "muteOutputStatus": muteOutputStatus,
       "muteCauses": muteCauses,
       "mutesRf": mutesRf,
       "muteTsError": muteTsError,
       "muteMpegOverflow": muteMpegOverflow,
       "muteT2miError": muteT2miError,
       "muteBtsError": muteBtsError,
       "muteSfnReference": muteSfnReference,
       "muteSfnMargin": muteSfnMargin,
       "mute10MHz": mute10MHz,
       "muteGainMargin": muteGainMargin,
       "muteErrorMip": muteErrorMip,
       "tsErrorMuteHysteresis": tsErrorMuteHysteresis,
       "muteCausesBinary": muteCausesBinary,
       "reference": reference,
       "referenceSource": referenceSource,
       "referenceSourceStatus": referenceSourceStatus,
       "referenceSwitchMode": referenceSwitchMode,
       "synchronizationReady": synchronizationReady,
       "externalReferenceOutputs": externalReferenceOutputs,
       "selected10Mhz": selected10Mhz,
       "selected1Pps": selected1Pps,
       "synchronization": synchronization,
       "receiverType": receiverType,
       "receiverSerial": receiverSerial,
       "synchronizationStatus": synchronizationStatus,
       "satellitesAntenna": satellitesAntenna,
       "input1pps": input1pps,
       "synchronizationTemperature": synchronizationTemperature,
       "synchronizationHoldover": synchronizationHoldover,
       "synchronizationHoldoverThreshold": synchronizationHoldoverThreshold,
       "endlessHoldoverThresholdEnable": endlessHoldoverThresholdEnable,
       "input10Mhz": input10Mhz,
       "antennaStatus": antennaStatus,
       "ppsStatus": ppsStatus,
       "latitude": latitude,
       "longitude": longitude,
       "altitude": altitude,
       "synchronizationDate": synchronizationDate,
       "satellite01": satellite01,
       "satellite02": satellite02,
       "satellite03": satellite03,
       "satellite04": satellite04,
       "satellite05": satellite05,
       "satellite06": satellite06,
       "satellite07": satellite07,
       "satellite08": satellite08,
       "satellitesConstellationTable": satellitesConstellationTable,
       "satellitesConstellationEntry": satellitesConstellationEntry,
       "constellationIndex": constellationIndex,
       "satellite01Info": satellite01Info,
       "satellite02Info": satellite02Info,
       "satellite03Info": satellite03Info,
       "satellite04Info": satellite04Info,
       "satellite05Info": satellite05Info,
       "satellite06Info": satellite06Info,
       "satellite07Info": satellite07Info,
       "satellite08Info": satellite08Info,
       "amplifier": amplifier,
       "configuredPower": configuredPower,
       "powerDisplaOffset": powerDisplaOffset,
       "forwardPower": forwardPower,
       "reversePower": reversePower,
       "exceededPowerThreshold": exceededPowerThreshold,
       "decreasedPowerThreshold": decreasedPowerThreshold,
       "reverserPowerThreshold": reverserPowerThreshold,
       "amplifierStageTemperature": amplifierStageTemperature,
       "ldmosTransistor1Current": ldmosTransistor1Current,
       "ldmosTransistor2Current": ldmosTransistor2Current,
       "ldmosTransistor3Current": ldmosTransistor3Current,
       "ldmosTransistor4Current": ldmosTransistor4Current,
       "decreasedPowerThresholdNonCrit": decreasedPowerThresholdNonCrit,
       "reversePowerFlt": reversePowerFlt,
       "automaticPowerCompensation": automaticPowerCompensation,
       "automaticPowerCompensationEnable": automaticPowerCompensationEnable,
       "compensationPerStage": compensationPerStage,
       "amplifierStageTable": amplifierStageTable,
       "amplifierStageEntry": amplifierStageEntry,
       "amplifierStageIndex": amplifierStageIndex,
       "amStControlStatus": amStControlStatus,
       "amStHwStatus": amStHwStatus,
       "amStMuteSelfProtection": amStMuteSelfProtection,
       "amStForwardPower": amStForwardPower,
       "amStReversePower": amStReversePower,
       "amStRfPhase": amStRfPhase,
       "amStTemperature": amStTemperature,
       "amStCurrent1": amStCurrent1,
       "amStCurrent2": amStCurrent2,
       "amStCurrent3": amStCurrent3,
       "amStCurrent4": amStCurrent4,
       "amStCurrent5": amStCurrent5,
       "amStCurrent6": amStCurrent6,
       "amStReversePowerFlt": amStReversePowerFlt,
       "redundancy": redundancy,
       "redundancy1p1": redundancy1p1,
       "rPrDdDeviceIdentifier": rPrDdDeviceIdentifier,
       "rPrDdControlBusStatus": rPrDdControlBusStatus,
       "rPrDdSystemIp": rPrDdSystemIp,
       "r1p1EnableNCB": r1p1EnableNCB,
       "rPrDdSwitchToAntenna": rPrDdSwitchToAntenna,
       "r1p1StatusNCB": r1p1StatusNCB,
       "r1p1SwitchingCausesNCB": r1p1SwitchingCausesNCB,
       "r1p1Mode": r1p1Mode,
       "r1p1PriorityAB": r1p1PriorityAB,
       "r1p1priorityNCB": r1p1priorityNCB,
       "r1p1AutoReturn": r1p1AutoReturn,
       "r1p1Switchings": r1p1Switchings,
       "r1p1MaximumSwitchings": r1p1MaximumSwitchings,
       "r1p1InputTest": r1p1InputTest,
       "r1p1InputValidation": r1p1InputValidation,
       "r1p1PowerValidation": r1p1PowerValidation,
       "r1p1SwitchingHysteresis": r1p1SwitchingHysteresis,
       "r1p1RfSwitchStatus": r1p1RfSwitchStatus,
       "r1p1DeviceA": r1p1DeviceA,
       "r1p1StatusA": r1p1StatusA,
       "switchingCausesA": switchingCausesA,
       "r1p1DeviceB": r1p1DeviceB,
       "r1p1StatusB": r1p1StatusB,
       "switchingCausesB": switchingCausesB,
       "r1p1RfStatus": r1p1RfStatus,
       "r1p1StatusWhenAntenna": r1p1StatusWhenAntenna,
       "r1p1StatusWhenLoad": r1p1StatusWhenLoad,
       "r1p1AutoVerifications": r1p1AutoVerifications,
       "r1p1AutoVerificationsStatus": r1p1AutoVerificationsStatus,
       "r1p1AutoVDuration": r1p1AutoVDuration,
       "r1p1AutoVPerformedVerifications": r1p1AutoVPerformedVerifications,
       "r1p1AutoVMaxVerifications": r1p1AutoVMaxVerifications,
       "r1p1AutoVNexVerification": r1p1AutoVNexVerification,
       "r1p1AutoVReiterated": r1p1AutoVReiterated,
       "r1p1AutoVReiteratedEnable": r1p1AutoVReiteratedEnable,
       "r1p1AutoVReiteratedPeriod": r1p1AutoVReiteratedPeriod,
       "r1p1AutoVReiteratedCadence": r1p1AutoVReiteratedCadence,
       "r1p1AutoVDaily": r1p1AutoVDaily,
       "r1p1AutoVDailyEnable": r1p1AutoVDailyEnable,
       "r1p1AutoVDailyTime": r1p1AutoVDailyTime,
       "r1p1AutoVDailyMode": r1p1AutoVDailyMode,
       "r1p1AutoVDailyWindow": r1p1AutoVDailyWindow,
       "r1p1AutoVAlarm": r1p1AutoVAlarm,
       "r1p1AutoVAlarmEnable": r1p1AutoVAlarmEnable,
       "r1p1AutoPriorityInversion": r1p1AutoPriorityInversion,
       "r1p1PriorityInversionEnable": r1p1PriorityInversionEnable,
       "r1p1PriorityInversionPeriod": r1p1PriorityInversionPeriod,
       "r1p1PriorityInversionTime": r1p1PriorityInversionTime,
       "r1p1Reset": r1p1Reset,
       "r1p1Synchronization": r1p1Synchronization,
       "r1p1SyncWeb": r1p1SyncWeb,
       "r1p1SyncDate": r1p1SyncDate,
       "r1p1SyncSnmp": r1p1SyncSnmp,
       "r1p1SyncIO": r1p1SyncIO,
       "r1p1SyncEvents": r1p1SyncEvents,
       "r1p1SyncInput": r1p1SyncInput,
       "r1p1SyncRfInput": r1p1SyncRfInput,
       "r1p1SyncCanceller": r1p1SyncCanceller,
       "r1p1SyncModulator": r1p1SyncModulator,
       "r1p1SyncRfConfiguration": r1p1SyncRfConfiguration,
       "r1p1SyncMutes": r1p1SyncMutes,
       "r1p1SyncAmplifier": r1p1SyncAmplifier,
       "r1p1SyncExternalAmplifier": r1p1SyncExternalAmplifier,
       "r1p1SyncReference": r1p1SyncReference,
       "redundancyNp1": redundancyNp1,
       "redundancyNp1B": redundancyNp1B,
       "redundancyNp1BConfiguration": redundancyNp1BConfiguration,
       "rNp1DeviceIdentifier": rNp1DeviceIdentifier,
       "rNp1ControlBusStatus": rNp1ControlBusStatus,
       "rNp1SystemIp": rNp1SystemIp,
       "rNp1NValue": rNp1NValue,
       "rNp1ManualSwitching": rNp1ManualSwitching,
       "rNp1Mode": rNp1Mode,
       "rNp1AutoReturn": rNp1AutoReturn,
       "rNp1MaximumRestorations": rNp1MaximumRestorations,
       "rNp1Window": rNp1Window,
       "rNp1InputErrorTest": rNp1InputErrorTest,
       "rNp1SwitchingHysteresis": rNp1SwitchingHysteresis,
       "rNp1RfControl": rNp1RfControl,
       "rNp1RfAControlTable": rNp1RfAControlTable,
       "rNp1RfAControlEntry": rNp1RfAControlEntry,
       "deviceRfAControlIndex": deviceRfAControlIndex,
       "deviceARf": deviceARf,
       "rNp1DeviceAPriorites": rNp1DeviceAPriorites,
       "rNp1DeviceAPriorityTable": rNp1DeviceAPriorityTable,
       "rNp1DeviceAPriorityEntry": rNp1DeviceAPriorityEntry,
       "deviceAPriorityIndex": deviceAPriorityIndex,
       "deviceAPriority": deviceAPriority,
       "rNp1DeviceBStatus": rNp1DeviceBStatus,
       "rNp1ConfigurationDeviceB": rNp1ConfigurationDeviceB,
       "rNp1DeviceBStatusValue": rNp1DeviceBStatusValue,
       "rNp1SwitchingCauses": rNp1SwitchingCauses,
       "rNp1DeviceAStatusTable": rNp1DeviceAStatusTable,
       "rNp1DeviceAStatusEntry": rNp1DeviceAStatusEntry,
       "deviceAStatusIndex": deviceAStatusIndex,
       "deviceAStatusValue": deviceAStatusValue,
       "deviceAStatusSwitchingCauses": deviceAStatusSwitchingCauses,
       "deviceAStatusRestorations": deviceAStatusRestorations,
       "deviceARfSwitchStatus": deviceARfSwitchStatus,
       "rNp1DeviceBConfiguration": rNp1DeviceBConfiguration,
       "rNp1DeviceToLoad": rNp1DeviceToLoad,
       "rNp1PriorityManagement": rNp1PriorityManagement,
       "rNp1AutoVerifications": rNp1AutoVerifications,
       "rNp1AutoVerificationsStatus": rNp1AutoVerificationsStatus,
       "rNp1AutoVDuration": rNp1AutoVDuration,
       "rNp1AutoVPerformedVerifications": rNp1AutoVPerformedVerifications,
       "rNp1AutoVMaxVerifications": rNp1AutoVMaxVerifications,
       "rNp1AutoVNexVerification": rNp1AutoVNexVerification,
       "rNp1AutoVReiterated": rNp1AutoVReiterated,
       "rNp1AutoVReiteratedEnable": rNp1AutoVReiteratedEnable,
       "rNp1AutoVReiteratedPeriod": rNp1AutoVReiteratedPeriod,
       "rNp1AutoVReiteratedCadence": rNp1AutoVReiteratedCadence,
       "rNp1AutoVDaily": rNp1AutoVDaily,
       "rNp1AutoVDailyEnable": rNp1AutoVDailyEnable,
       "rNp1AutoVDailyWindow": rNp1AutoVDailyWindow,
       "rNp1AutoVDailyMode": rNp1AutoVDailyMode,
       "rNp1AutoVDailyTime": rNp1AutoVDailyTime,
       "rNp1AutomaticVerificationAlarm": rNp1AutomaticVerificationAlarm,
       "rNp1VerificationAlarm": rNp1VerificationAlarm,
       "rNp1Reset": rNp1Reset,
       "redundancyNp1BSynchronization": redundancyNp1BSynchronization,
       "rNp1SyncAllConfigurations": rNp1SyncAllConfigurations,
       "rNp1DeviceBSynchronizationTable": rNp1DeviceBSynchronizationTable,
       "rNp1DeviceBSynchronizationEntry": rNp1DeviceBSynchronizationEntry,
       "deviceBSynchronizationAIndex": deviceBSynchronizationAIndex,
       "deviceBConfigurationA": deviceBConfigurationA,
       "deviceBSynchronizeA": deviceBSynchronizeA,
       "redundancyAsi": redundancyAsi,
       "asiMatrixControlStatus": asiMatrixControlStatus,
       "asiMatrixHwStatus": asiMatrixHwStatus,
       "asiMatrixSelected": asiMatrixSelected,
       "asi1InputLoopStatus": asi1InputLoopStatus,
       "asi2InputLoopStatus": asi2InputLoopStatus,
       "asiMatrixInputStatusTable": asiMatrixInputStatusTable,
       "asiMatrixInputStatusEntry": asiMatrixInputStatusEntry,
       "asiMatrixInputStatusIndex": asiMatrixInputStatusIndex,
       "asi1InputStatus": asi1InputStatus,
       "asi2InputStatus": asi2InputStatus,
       "redundancyEti": redundancyEti,
       "etiMatrixControlStatus": etiMatrixControlStatus,
       "etiMatrixHwStatus": etiMatrixHwStatus,
       "etiMatrixSelected": etiMatrixSelected,
       "eti1InputLoopStatus": eti1InputLoopStatus,
       "eti2InputLoopStatus": eti2InputLoopStatus,
       "etiMatrixInputStatusTable": etiMatrixInputStatusTable,
       "etiMatrixInputStatusEntry": etiMatrixInputStatusEntry,
       "etiMatrixInputStatusIndex": etiMatrixInputStatusIndex,
       "eti1InputStatus": eti1InputStatus,
       "eti2InputStatus": eti2InputStatus,
       "status": status,
       "faultSummationStatus": faultSummationStatus,
       "warningSummationStatus": warningSummationStatus,
       "statusAmplifier": statusAmplifier,
       "amplifierStatus": amplifierStatus,
       "exceededOutputPower": exceededOutputPower,
       "decreasedOutputPower": decreasedOutputPower,
       "reflectPowerStatus": reflectPowerStatus,
       "temperatureAmplifierStatus": temperatureAmplifierStatus,
       "decreasedOutputPowerNonCritical": decreasedOutputPowerNonCritical,
       "statusAsiInput": statusAsiInput,
       "asiInputStatus": asiInputStatus,
       "asi1ErrorStatus": asi1ErrorStatus,
       "asi2ErrorStatus": asi2ErrorStatus,
       "statusIpInput": statusIpInput,
       "ipInputStatus": ipInputStatus,
       "ipSocket1ErrorStatus": ipSocket1ErrorStatus,
       "ipSocket2ErrorStatus": ipSocket2ErrorStatus,
       "statusSatelliteReceiver1": statusSatelliteReceiver1,
       "satReceiver1Status": satReceiver1Status,
       "unlockSatReceiver1Status": unlockSatReceiver1Status,
       "rfSignalSatReceiver1Status": rfSignalSatReceiver1Status,
       "lnbOverloadSatReceiver1Status": lnbOverloadSatReceiver1Status,
       "temperatureSatReceiver1Status": temperatureSatReceiver1Status,
       "camSatReceiver1Status": camSatReceiver1Status,
       "smartCardSatReceiver1Status": smartCardSatReceiver1Status,
       "smartCardRightsSatReceiver1Stat": smartCardRightsSatReceiver1Stat,
       "asiOutputSatReceiver1Status": asiOutputSatReceiver1Status,
       "statusSatelliteReceiver2": statusSatelliteReceiver2,
       "satReceiver2Status": satReceiver2Status,
       "unlockSatReceiver2Status": unlockSatReceiver2Status,
       "rfSignalSatReceiver2Status": rfSignalSatReceiver2Status,
       "lnbOverloadSatReceiver2Status": lnbOverloadSatReceiver2Status,
       "temperatureSatReceiver2Status": temperatureSatReceiver2Status,
       "statusTerrestialReceiver1": statusTerrestialReceiver1,
       "dttReceiver1AlarmStatus": dttReceiver1AlarmStatus,
       "unlockDttReceiver1Status": unlockDttReceiver1Status,
       "rfSignalDttReceiver1Status": rfSignalDttReceiver1Status,
       "temperatureDttReceiver1Status": temperatureDttReceiver1Status,
       "statusTerrestialReceiver2": statusTerrestialReceiver2,
       "dttReceiver2AlarmStatus": dttReceiver2AlarmStatus,
       "unlockDttReceiver2Status": unlockDttReceiver2Status,
       "rfSignalDttReceiver2Status": rfSignalDttReceiver2Status,
       "temperatureDttReceiver2Status": temperatureDttReceiver2Status,
       "statusModulator": statusModulator,
       "modulatorStatus": modulatorStatus,
       "tsErrorStatus": tsErrorStatus,
       "mipErrorStatus": mipErrorStatus,
       "mpegOverflowStatus": mpegOverflowStatus,
       "t2miErrorStatus": t2miErrorStatus,
       "btsErrorStatus": btsErrorStatus,
       "sfnErrorStatus": sfnErrorStatus,
       "sfnMargin": sfnMargin,
       "temperatureModulatorStatus": temperatureModulatorStatus,
       "modulatorOutputStatus": modulatorOutputStatus,
       "modulatorShouldersStatus": modulatorShouldersStatus,
       "modulatorMerStatus": modulatorMerStatus,
       "modulatorExternalFeedbackStatus": modulatorExternalFeedbackStatus,
       "modulatorBerStatus": modulatorBerStatus,
       "inputDabErrorStatus": inputDabErrorStatus,
       "statusRfInput": statusRfInput,
       "rfInputStatus": rfInputStatus,
       "statusEchoCanceller": statusEchoCanceller,
       "echoCancellerStatus": echoCancellerStatus,
       "inputLevelStatus": inputLevelStatus,
       "reference10MHzStatus": reference10MHzStatus,
       "temperatureECStatus": temperatureECStatus,
       "outputLevelStatus": outputLevelStatus,
       "cancellerShouldersStatus": cancellerShouldersStatus,
       "cancellerMerStatus": cancellerMerStatus,
       "gainMarginStatus": gainMarginStatus,
       "cancExternalFeedbackStatus": cancExternalFeedbackStatus,
       "statusEtiInput": statusEtiInput,
       "etiInputStatus": etiInputStatus,
       "eti1ErrorStatus": eti1ErrorStatus,
       "eti2ErrorStatus": eti2ErrorStatus,
       "statusRfOutput": statusRfOutput,
       "rfOutputStatus": rfOutputStatus,
       "synchronizationModule": synchronizationModule,
       "synchronizationModuleStatus": synchronizationModuleStatus,
       "synchronizationAntennaStatus": synchronizationAntennaStatus,
       "synchronizationUnlockStatus": synchronizationUnlockStatus,
       "synchronizationHoldoverStatus": synchronizationHoldoverStatus,
       "synchronizationHwErrorStatus": synchronizationHwErrorStatus,
       "temperatureSynchronizationStatus": temperatureSynchronizationStatus,
       "input10MhzStatus": input10MhzStatus,
       "input1ppsStatus": input1ppsStatus,
       "rackCoolingBoards": rackCoolingBoards,
       "rackCoolingStatus": rackCoolingStatus,
       "rackCoolingTemperatureStatus": rackCoolingTemperatureStatus,
       "pressureDifferenceStatus": pressureDifferenceStatus,
       "rackCoolingHwErrorStatus": rackCoolingHwErrorStatus,
       "statusHwError": statusHwError,
       "hwErrorStatus": hwErrorStatus,
       "ldmosTransistorsStatus": ldmosTransistorsStatus,
       "internalErrorStatus": internalErrorStatus,
       "localOscillatorStatus": localOscillatorStatus,
       "internalDcSupplyVoltageStatus": internalDcSupplyVoltageStatus,
       "nonLinearSenseFeedback": nonLinearSenseFeedback,
       "amplifierOutputSample": amplifierOutputSample,
       "statusFan": statusFan,
       "fanStatus": fanStatus,
       "fan1Status": fan1Status,
       "fan2Status": fan2Status,
       "fan3Status": fan3Status,
       "statusExternal": statusExternal,
       "externalStatus": externalStatus,
       "external1Status": external1Status,
       "external2Status": external2Status,
       "statusPowerSupply": statusPowerSupply,
       "acPowerSupplyStatus": acPowerSupplyStatus,
       "acPsuAStatus": acPsuAStatus,
       "acPsuBStatus": acPsuBStatus,
       "statusAmplifierStage1": statusAmplifierStage1,
       "amplifierStage1Status": amplifierStage1Status,
       "aS1InputLevelStatus": aS1InputLevelStatus,
       "aS1ExceededPowerStatus": aS1ExceededPowerStatus,
       "aS1DecreasedPowerStatus": aS1DecreasedPowerStatus,
       "aS1ReflectedPowerStatus": aS1ReflectedPowerStatus,
       "aS1TemperatureStatus": aS1TemperatureStatus,
       "aS1HwErrorStatus": aS1HwErrorStatus,
       "aS1PsusErrorStatus": aS1PsusErrorStatus,
       "statusAmplifierStage2": statusAmplifierStage2,
       "amplifierStage2Status": amplifierStage2Status,
       "aS2InputLevelStatus": aS2InputLevelStatus,
       "aS2ExceededPowerStatus": aS2ExceededPowerStatus,
       "aS2DecreasedPowerStatus": aS2DecreasedPowerStatus,
       "aS2ReflectedPowerStatus": aS2ReflectedPowerStatus,
       "aS2TemperatureStatus": aS2TemperatureStatus,
       "aS2HwErrorStatus": aS2HwErrorStatus,
       "aS2PsusErrorStatus": aS2PsusErrorStatus,
       "statusAmplifierStage3": statusAmplifierStage3,
       "amplifierStage3Status": amplifierStage3Status,
       "aS3InputLevelStatus": aS3InputLevelStatus,
       "aS3ExceededPowerStatus": aS3ExceededPowerStatus,
       "aS3DecreasedPowerStatus": aS3DecreasedPowerStatus,
       "aS3ReflectedPowerStatus": aS3ReflectedPowerStatus,
       "aS3TemperatureStatus": aS3TemperatureStatus,
       "aS3HwErrorStatus": aS3HwErrorStatus,
       "aS3PsusErrorStatus": aS3PsusErrorStatus,
       "statusAmplifierStage4": statusAmplifierStage4,
       "amplifierStage4Status": amplifierStage4Status,
       "aS4InputLevelStatus": aS4InputLevelStatus,
       "aS4ExceededPowerStatus": aS4ExceededPowerStatus,
       "aS4DecreasedPowerStatus": aS4DecreasedPowerStatus,
       "aS4ReflectedPowerStatus": aS4ReflectedPowerStatus,
       "aS4TemperatureStatus": aS4TemperatureStatus,
       "aS4HwErrorStatus": aS4HwErrorStatus,
       "aS4PsusErrorStatus": aS4PsusErrorStatus,
       "statusAmplifierStages": statusAmplifierStages,
       "amplifierStagesStatus": amplifierStagesStatus,
       "aSsInputLevelStatus": aSsInputLevelStatus,
       "aSsExceededPowerStatus": aSsExceededPowerStatus,
       "aSsDecreasedPowerStatus": aSsDecreasedPowerStatus,
       "aSsReflectedPowerStatus": aSsReflectedPowerStatus,
       "aSsTemperatureStatus": aSsTemperatureStatus,
       "aSsHwErrorStatus": aSsHwErrorStatus,
       "aSsPsusErrorStatus": aSsPsusErrorStatus,
       "statusDcInput": statusDcInput,
       "dcInputStatus": dcInputStatus,
       "redundancySys": redundancySys,
       "redundancySysStatus": redundancySysStatus,
       "redundancySysCommunicationStatus": redundancySysCommunicationStatus,
       "redundancySysSwitchStatus": redundancySysSwitchStatus,
       "redundancySysReserveStatus": redundancySysReserveStatus,
       "redundancyInputAsiMatrixStatus": redundancyInputAsiMatrixStatus,
       "redundancyHwMatrixStatus": redundancyHwMatrixStatus,
       "redundancyHwRfMatrixStatus": redundancyHwRfMatrixStatus,
       "redundancyInputEtiMatrixStatus": redundancyInputEtiMatrixStatus,
       "redundancyHwEtiMatrixStatus": redundancyHwEtiMatrixStatus,
       "eventTx": eventTx,
       "eventsTx": eventsTx,
       "faultSummationTrap": faultSummationTrap,
       "warningSummationTrap": warningSummationTrap,
       "amplifierSumTrap": amplifierSumTrap,
       "exceededOutputPowerTrap": exceededOutputPowerTrap,
       "decreasedOutputPowerTrap": decreasedOutputPowerTrap,
       "reflectedPowerTrap": reflectedPowerTrap,
       "temperatureAmplifierTrap": temperatureAmplifierTrap,
       "asiInputTrap": asiInputTrap,
       "asi1ErrorTrap": asi1ErrorTrap,
       "asi2ErrorTrap": asi2ErrorTrap,
       "ipInputSumTrap": ipInputSumTrap,
       "ipSocket1ErrorTrap": ipSocket1ErrorTrap,
       "ipSocket2ErrorTrap": ipSocket2ErrorTrap,
       "satReceiver1Trap": satReceiver1Trap,
       "unlockSatReceiver1Trap": unlockSatReceiver1Trap,
       "rfSignalSatReceiver1Trap": rfSignalSatReceiver1Trap,
       "lnbOverloadSatReceiver1Trap": lnbOverloadSatReceiver1Trap,
       "temperatureSatReceiver1Trap": temperatureSatReceiver1Trap,
       "satReceiver2Trap": satReceiver2Trap,
       "unlockSatReceiver2Trap": unlockSatReceiver2Trap,
       "rfSignalSatReceiver2Trap": rfSignalSatReceiver2Trap,
       "lnbOverloadSatReceiver2Trap": lnbOverloadSatReceiver2Trap,
       "temperatureSatReceiver2Trap": temperatureSatReceiver2Trap,
       "dttReceiver1Trap": dttReceiver1Trap,
       "unlockDttReceiver1Trap": unlockDttReceiver1Trap,
       "rfSignalDttReceiver1Trap": rfSignalDttReceiver1Trap,
       "temperatureDttReceiver1Trap": temperatureDttReceiver1Trap,
       "dttReceiver2Trap": dttReceiver2Trap,
       "unlockDttReceiver2Trap": unlockDttReceiver2Trap,
       "rfSignalDttReceiver2Trap": rfSignalDttReceiver2Trap,
       "temperatureDttReceiver2Trap": temperatureDttReceiver2Trap,
       "modulatorSumTrap": modulatorSumTrap,
       "tsErrorTrap": tsErrorTrap,
       "mipErrorTrap": mipErrorTrap,
       "mpegOverflowTrap": mpegOverflowTrap,
       "t2miErrorTrap": t2miErrorTrap,
       "sfnReferenceTrap": sfnReferenceTrap,
       "sfnMarginTrap": sfnMarginTrap,
       "temperatureModulatorTrap": temperatureModulatorTrap,
       "modulatorOutputTrap": modulatorOutputTrap,
       "rfOutputTrap": rfOutputTrap,
       "cancellerShouldersTrap": cancellerShouldersTrap,
       "input10MhzTrap": input10MhzTrap,
       "input1ppsTrap": input1ppsTrap,
       "synchronizationModuleTrap": synchronizationModuleTrap,
       "synchronizationAntennaTrap": synchronizationAntennaTrap,
       "synchronizationUnlockTrap": synchronizationUnlockTrap,
       "synchronizationHoldoverTrap": synchronizationHoldoverTrap,
       "synchronizationHwErrorTrap": synchronizationHwErrorTrap,
       "temperatureSynchronizationTrap": temperatureSynchronizationTrap,
       "reference10MHzTrap": reference10MHzTrap,
       "dateAndTimeReferenceEventTrap": dateAndTimeReferenceEventTrap,
       "acPowerSupplyTrap": acPowerSupplyTrap,
       "psuATrap": psuATrap,
       "psuBTrap": psuBTrap,
       "hwErrorTrap": hwErrorTrap,
       "ldmosTransistorsTrap": ldmosTransistorsTrap,
       "internalErrorTrap": internalErrorTrap,
       "localOscillatorTrap": localOscillatorTrap,
       "internalDcSupplyVoltageTrap": internalDcSupplyVoltageTrap,
       "fanSumTrap": fanSumTrap,
       "fan1Trap": fan1Trap,
       "fan2Trap": fan2Trap,
       "fan3Trap": fan3Trap,
       "externalAlarmTrap": externalAlarmTrap,
       "externalAlarm1Trap": externalAlarm1Trap,
       "externalAlarm2Trap": externalAlarm2Trap,
       "systemInitEventTrap": systemInitEventTrap,
       "guiOperationEventTrap": guiOperationEventTrap,
       "muteEventTrap": muteEventTrap,
       "inputSourceSelectedEventTrap": inputSourceSelectedEventTrap,
       "selectedReferenceEventTrap": selectedReferenceEventTrap,
       "outputRelay1Trap": outputRelay1Trap,
       "outputRelay2Trap": outputRelay2Trap,
       "forcedMfnEventTrap": forcedMfnEventTrap,
       "localModeTimeoutEventTrap": localModeTimeoutEventTrap,
       "redundancyEventTrap": redundancyEventTrap,
       "btsErrorTrap": btsErrorTrap,
       "nonLinearSenseFeedbackTrap": nonLinearSenseFeedbackTrap,
       "modulatorShouldersTrap": modulatorShouldersTrap,
       "configurationFromBackupEventTrap": configurationFromBackupEventTrap,
       "rfInputTrap": rfInputTrap,
       "echoCancellerTrap": echoCancellerTrap,
       "inputLevelTrap": inputLevelTrap,
       "temperatureECTrap": temperatureECTrap,
       "outputLevelTrap": outputLevelTrap,
       "amplifierOutputSampleTrap": amplifierOutputSampleTrap,
       "systemShutdownEventTrap": systemShutdownEventTrap,
       "standardAutoConfigurationTrap": standardAutoConfigurationTrap,
       "cancellerMerStatusTrap": cancellerMerStatusTrap,
       "gainMarginStatusTrap": gainMarginStatusTrap,
       "cancExternalFeedbackStatusTrap": cancExternalFeedbackStatusTrap,
       "modulatorMerStatusTrap": modulatorMerStatusTrap,
       "modExternalFeedbackStatusTrap": modExternalFeedbackStatusTrap,
       "amplifierStage1SumTrap": amplifierStage1SumTrap,
       "aS1InputLevelTrap": aS1InputLevelTrap,
       "aS1ExceededPowerTrap": aS1ExceededPowerTrap,
       "aS1DecreasedPowerTrap": aS1DecreasedPowerTrap,
       "aS1ReflectedPowerTrap": aS1ReflectedPowerTrap,
       "aS1TemperatureTrap": aS1TemperatureTrap,
       "aS1HwErrorTrap": aS1HwErrorTrap,
       "amplifierStage2SumTrap": amplifierStage2SumTrap,
       "aS2InputLevelTrap": aS2InputLevelTrap,
       "aS2ExceededPowerTrap": aS2ExceededPowerTrap,
       "aS2DecreasedPowerTrap": aS2DecreasedPowerTrap,
       "aS2ReflectedPowerTrap": aS2ReflectedPowerTrap,
       "aS2TemperatureTrap": aS2TemperatureTrap,
       "aS2HwErrorTrap": aS2HwErrorTrap,
       "amplifierStage3SumTrap": amplifierStage3SumTrap,
       "aS3InputLevelTrap": aS3InputLevelTrap,
       "aS3ExceededPowerTrap": aS3ExceededPowerTrap,
       "aS3DecreasedPowerTrap": aS3DecreasedPowerTrap,
       "aS3ReflectedPowerTrap": aS3ReflectedPowerTrap,
       "aS3TemperatureTrap": aS3TemperatureTrap,
       "aS3HwErrorTrap": aS3HwErrorTrap,
       "amplifierStage4SumTrap": amplifierStage4SumTrap,
       "aS4InputLevelTrap": aS4InputLevelTrap,
       "aS4ExceededPowerTrap": aS4ExceededPowerTrap,
       "aS4DecreasedPowerTrap": aS4DecreasedPowerTrap,
       "aS4ReflectedPowerTrap": aS4ReflectedPowerTrap,
       "aS4TemperatureTrap": aS4TemperatureTrap,
       "aS4HwErrorTrap": aS4HwErrorTrap,
       "aS1PsusErrorTrap": aS1PsusErrorTrap,
       "aS2PsusErrorTrap": aS2PsusErrorTrap,
       "aS3PsusErrorTrap": aS3PsusErrorTrap,
       "aS4PsusErrorTrap": aS4PsusErrorTrap,
       "decreasedOuputPowerNonCritTrap": decreasedOuputPowerNonCritTrap,
       "lockingStart1ppsEventTrap": lockingStart1ppsEventTrap,
       "rackCoolingEventTrap": rackCoolingEventTrap,
       "rackCoolingTemperatureEventTrap": rackCoolingTemperatureEventTrap,
       "rackCPressureDifferenceTrap": rackCPressureDifferenceTrap,
       "rackCoolingHwErrorEventTrap": rackCoolingHwErrorEventTrap,
       "ioInterfaceInputEventTrap": ioInterfaceInputEventTrap,
       "ioInterfaceOutputEventTrap": ioInterfaceOutputEventTrap,
       "dcInputEventTrap": dcInputEventTrap,
       "externalDcPowerSupplyEventTrap": externalDcPowerSupplyEventTrap,
       "redundancySysEventTrap": redundancySysEventTrap,
       "redundancySysComEventTrap": redundancySysComEventTrap,
       "redundancySysSwitchEventTrap": redundancySysSwitchEventTrap,
       "redundancySysReserveEventTrap": redundancySysReserveEventTrap,
       "modBerStatusTrap": modBerStatusTrap,
       "redundancyInputAsiMatrixTrap": redundancyInputAsiMatrixTrap,
       "redundancyHwMatrixEventTrap": redundancyHwMatrixEventTrap,
       "inputDabErrorStatusEventTrap": inputDabErrorStatusEventTrap,
       "etiInputTrap": etiInputTrap,
       "eti1ErrorTrap": eti1ErrorTrap,
       "camSatReceiver1Trap": camSatReceiver1Trap,
       "smartCardSatReceiver1Trap": smartCardSatReceiver1Trap,
       "smartCardRightsSatReceiver1Trap": smartCardRightsSatReceiver1Trap,
       "asiOutputSatReceiver1Trap": asiOutputSatReceiver1Trap,
       "redundancyHwRfMatrixEventTrap": redundancyHwRfMatrixEventTrap,
       "amplifierStagesSumTrap": amplifierStagesSumTrap,
       "aSsInputLevelTrap": aSsInputLevelTrap,
       "aSsExceededPowerTrap": aSsExceededPowerTrap,
       "aSsDecreasedPowerTrap": aSsDecreasedPowerTrap,
       "aSsReflectedPowerTrap": aSsReflectedPowerTrap,
       "aSsTemperatureTrap": aSsTemperatureTrap,
       "aSsHwErrorTrap": aSsHwErrorTrap,
       "aSsPsusErrorTrap": aSsPsusErrorTrap,
       "redundancyInputEtiMatrixTrap": redundancyInputEtiMatrixTrap,
       "redundancyHwEtiMatrixEventTrap": redundancyHwEtiMatrixEventTrap,
       "shortTermMonitoringEventTrap": shortTermMonitoringEventTrap,
       "autoconfFromInputEventTrap": autoconfFromInputEventTrap,
       "channelAdaptationEventTrap": channelAdaptationEventTrap,
       "dttReceiver1BerMuteTrap": dttReceiver1BerMuteTrap,
       "dttReceiver2BerMuteTrap": dttReceiver2BerMuteTrap,
       "automaticPowerCompensationTrap": automaticPowerCompensationTrap,
       "eti2ErrorTrap": eti2ErrorTrap,
       "testTrap": testTrap,
       "keepaliveTrap": keepaliveTrap,
       "eventContent": eventContent,
       "eventTrapLogId": eventTrapLogId,
       "eventTimeStamp": eventTimeStamp,
       "eventInitialStatus": eventInitialStatus,
       "eventFinalStatus": eventFinalStatus,
       "eventAdditionalText": eventAdditionalText,
       "redundancyId": redundancyId,
       "conformance": conformance,
       "objectGroups": objectGroups,
       "groupFS": groupFS,
       "groupEvents": groupEvents,
       "groupObsoleted": groupObsoleted,
       "groupFSevents": groupFSevents,
       "groupCompilance": groupCompilance,
       "fsBasicCompilance": fsBasicCompilance}
)
