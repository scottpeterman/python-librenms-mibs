# SNMP MIB module (BLADETYPE5-NETWORK-MIB) expressed in pysnmp data model.
#
# This Python module is designed to be imported and executed by the
# pysnmp library.
#
# See https://www.pysnmp.com/pysnmp for further information.
#
# Notes
# -----
# ASN.1 source file://mibs\hp\BLADETYPE5-NETWORK-MIB
# Produced by pysmi-1.6.2 at Thu Oct  2 11:48:51 2025
# On host DESKTOP-ORUUBP9 platform Windows version 11 by user speterman
# Using Python version 3.12.8 (tags/v3.12.8:2dc476b, Dec  3 2024, 19:30:04) [MSC v.1942 64 bit (AMD64)]

if 'mibBuilder' not in globals():
    import sys

    sys.stderr.write(__doc__)
    sys.exit(1)

# Import base ASN.1 objects even if this MIB does not use it

(Integer,
 OctetString,
 ObjectIdentifier) = mibBuilder.importSymbols(
    "ASN1",
    "Integer",
    "OctetString",
    "ObjectIdentifier")

(NamedValues,) = mibBuilder.importSymbols(
    "ASN1-ENUMERATION",
    "NamedValues")
(ConstraintsIntersection,
 ConstraintsUnion,
 SingleValueConstraint,
 ValueRangeConstraint,
 ValueSizeConstraint) = mibBuilder.importSymbols(
    "ASN1-REFINEMENT",
    "ConstraintsIntersection",
    "ConstraintsUnion",
    "SingleValueConstraint",
    "ValueRangeConstraint",
    "ValueSizeConstraint")

# Import SMI symbols from the MIBs this MIB depends on

(BridgeId,) = mibBuilder.importSymbols(
    "BRIDGE-MIB",
    "BridgeId")

(hpSwitchBladeType5_Mgmt,
 hpSwitchBladeType5_Products) = mibBuilder.importSymbols(
    "HP-SWITCH-PL-MIB",
    "hpSwitchBladeType5-Mgmt",
    "hpSwitchBladeType5-Products")

(ifIndex,) = mibBuilder.importSymbols(
    "IF-MIB",
    "ifIndex")

(ModuleCompliance,
 NotificationGroup) = mibBuilder.importSymbols(
    "SNMPv2-CONF",
    "ModuleCompliance",
    "NotificationGroup")

(sysContact,
 sysLocation,
 sysName) = mibBuilder.importSymbols(
    "SNMPv2-MIB",
    "sysContact",
    "sysLocation",
    "sysName")

(Bits,
 Counter32,
 Counter64,
 Gauge32,
 Integer32,
 IpAddress,
 ModuleIdentity,
 MibIdentifier,
 NotificationType,
 ObjectIdentity,
 MibScalar,
 MibTable,
 MibTableRow,
 MibTableColumn,
 TimeTicks,
 Unsigned32,
 enterprises,
 iso) = mibBuilder.importSymbols(
    "SNMPv2-SMI",
    "Bits",
    "Counter32",
    "Counter64",
    "Gauge32",
    "Integer32",
    "IpAddress",
    "ModuleIdentity",
    "MibIdentifier",
    "NotificationType",
    "ObjectIdentity",
    "MibScalar",
    "MibTable",
    "MibTableRow",
    "MibTableColumn",
    "TimeTicks",
    "Unsigned32",
    "enterprises",
    "iso")

(DisplayString,
 MacAddress,
 PhysAddress,
 TextualConvention) = mibBuilder.importSymbols(
    "SNMPv2-TC",
    "DisplayString",
    "MacAddress",
    "PhysAddress",
    "TextualConvention")


# MODULE-IDENTITY


# Types definitions


# TEXTUAL-CONVENTIONS



# MIB Managed Objects in the order of their OIDs

_HpProLiant_GbE2c_1_10G_InterconnectSwitch_ObjectIdentity = ObjectIdentity
hpProLiant_GbE2c_1_10G_InterconnectSwitch = _HpProLiant_GbE2c_1_10G_InterconnectSwitch_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 1, 1)
)
_Agent_ObjectIdentity = ObjectIdentity
agent = _Agent_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1)
)
_AgentConfig_ObjectIdentity = ObjectIdentity
agentConfig = _AgentConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1)
)
_AgSystem_ObjectIdentity = ObjectIdentity
agSystem = _AgSystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1)
)


class _AgApplyConfiguration_Type(Integer32):
    """Custom type agApplyConfiguration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("apply", 2))
    )


_AgApplyConfiguration_Type.__name__ = "Integer32"
_AgApplyConfiguration_Object = MibScalar
agApplyConfiguration = _AgApplyConfiguration_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 2),
    _AgApplyConfiguration_Type()
)
agApplyConfiguration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agApplyConfiguration.setStatus("current")


class _AgSavePending_Type(Integer32):
    """Custom type agSavePending based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("saveNeeded", 1),
          ("noSaveNeeded", 2))
    )


_AgSavePending_Type.__name__ = "Integer32"
_AgSavePending_Object = MibScalar
agSavePending = _AgSavePending_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 3),
    _AgSavePending_Type()
)
agSavePending.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agSavePending.setStatus("current")


class _AgSaveConfiguration_Type(Integer32):
    """Custom type agSaveConfiguration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("saveActive", 2),
          ("notSaveActive", 3))
    )


_AgSaveConfiguration_Type.__name__ = "Integer32"
_AgSaveConfiguration_Object = MibScalar
agSaveConfiguration = _AgSaveConfiguration_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 4),
    _AgSaveConfiguration_Type()
)
agSaveConfiguration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agSaveConfiguration.setStatus("current")


class _AgRevert_Type(Integer32):
    """Custom type agRevert based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("revert", 2))
    )


_AgRevert_Type.__name__ = "Integer32"
_AgRevert_Object = MibScalar
agRevert = _AgRevert_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 5),
    _AgRevert_Type()
)
agRevert.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agRevert.setStatus("current")


class _AgRevertApply_Type(Integer32):
    """Custom type agRevertApply based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("revertApply", 2))
    )


_AgRevertApply_Type.__name__ = "Integer32"
_AgRevertApply_Object = MibScalar
agRevertApply = _AgRevertApply_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 6),
    _AgRevertApply_Type()
)
agRevertApply.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agRevertApply.setStatus("current")


class _AgReset_Type(Integer32):
    """Custom type agReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("coldReset", 2),
          ("warmReset", 3))
    )


_AgReset_Type.__name__ = "Integer32"
_AgReset_Object = MibScalar
agReset = _AgReset_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 7),
    _AgReset_Type()
)
agReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agReset.setStatus("current")


class _AgConfigForNxtReset_Type(Integer32):
    """Custom type agConfigForNxtReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("active", 2),
          ("backup", 3),
          ("default", 4))
    )


_AgConfigForNxtReset_Type.__name__ = "Integer32"
_AgConfigForNxtReset_Object = MibScalar
agConfigForNxtReset = _AgConfigForNxtReset_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 8),
    _AgConfigForNxtReset_Type()
)
agConfigForNxtReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agConfigForNxtReset.setStatus("current")


class _AgImageForNxtReset_Type(Integer32):
    """Custom type agImageForNxtReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("image1", 2),
          ("image2", 3))
    )


_AgImageForNxtReset_Type.__name__ = "Integer32"
_AgImageForNxtReset_Object = MibScalar
agImageForNxtReset = _AgImageForNxtReset_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 9),
    _AgImageForNxtReset_Type()
)
agImageForNxtReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agImageForNxtReset.setStatus("current")


class _AgSoftwareVersion_Type(DisplayString):
    """Custom type agSoftwareVersion based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_AgSoftwareVersion_Type.__name__ = "DisplayString"
_AgSoftwareVersion_Object = MibScalar
agSoftwareVersion = _AgSoftwareVersion_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 10),
    _AgSoftwareVersion_Type()
)
agSoftwareVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agSoftwareVersion.setStatus("current")


class _AgBootVer_Type(DisplayString):
    """Custom type agBootVer based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_AgBootVer_Type.__name__ = "DisplayString"
_AgBootVer_Object = MibScalar
agBootVer = _AgBootVer_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 11),
    _AgBootVer_Type()
)
agBootVer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agBootVer.setStatus("current")


class _AgImage1Ver_Type(DisplayString):
    """Custom type agImage1Ver based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_AgImage1Ver_Type.__name__ = "DisplayString"
_AgImage1Ver_Object = MibScalar
agImage1Ver = _AgImage1Ver_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 12),
    _AgImage1Ver_Type()
)
agImage1Ver.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agImage1Ver.setStatus("current")


class _AgImage2Ver_Type(DisplayString):
    """Custom type agImage2Ver based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_AgImage2Ver_Type.__name__ = "DisplayString"
_AgImage2Ver_Object = MibScalar
agImage2Ver = _AgImage2Ver_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 13),
    _AgImage2Ver_Type()
)
agImage2Ver.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agImage2Ver.setStatus("current")


class _AgRtcDate_Type(DisplayString):
    """Custom type agRtcDate based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_AgRtcDate_Type.__name__ = "DisplayString"
_AgRtcDate_Object = MibScalar
agRtcDate = _AgRtcDate_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 14),
    _AgRtcDate_Type()
)
agRtcDate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agRtcDate.setStatus("current")


class _AgRtcTime_Type(DisplayString):
    """Custom type agRtcTime based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_AgRtcTime_Type.__name__ = "DisplayString"
_AgRtcTime_Object = MibScalar
agRtcTime = _AgRtcTime_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 15),
    _AgRtcTime_Type()
)
agRtcTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agRtcTime.setStatus("current")


class _AgLastSetErrorReason_Type(DisplayString):
    """Custom type agLastSetErrorReason based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_AgLastSetErrorReason_Type.__name__ = "DisplayString"
_AgLastSetErrorReason_Object = MibScalar
agLastSetErrorReason = _AgLastSetErrorReason_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 16),
    _AgLastSetErrorReason_Type()
)
agLastSetErrorReason.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agLastSetErrorReason.setStatus("current")


class _AgCurCfgHttpServerPort_Type(Integer32):
    """Custom type agCurCfgHttpServerPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_AgCurCfgHttpServerPort_Type.__name__ = "Integer32"
_AgCurCfgHttpServerPort_Object = MibScalar
agCurCfgHttpServerPort = _AgCurCfgHttpServerPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 17),
    _AgCurCfgHttpServerPort_Type()
)
agCurCfgHttpServerPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgHttpServerPort.setStatus("current")


class _AgNewCfgHttpServerPort_Type(Integer32):
    """Custom type agNewCfgHttpServerPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_AgNewCfgHttpServerPort_Type.__name__ = "Integer32"
_AgNewCfgHttpServerPort_Object = MibScalar
agNewCfgHttpServerPort = _AgNewCfgHttpServerPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 18),
    _AgNewCfgHttpServerPort_Type()
)
agNewCfgHttpServerPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgHttpServerPort.setStatus("current")


class _AgCurCfgLoginBanner_Type(DisplayString):
    """Custom type agCurCfgLoginBanner based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 79),
    )


_AgCurCfgLoginBanner_Type.__name__ = "DisplayString"
_AgCurCfgLoginBanner_Object = MibScalar
agCurCfgLoginBanner = _AgCurCfgLoginBanner_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 19),
    _AgCurCfgLoginBanner_Type()
)
agCurCfgLoginBanner.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgLoginBanner.setStatus("current")


class _AgNewCfgLoginBanner_Type(DisplayString):
    """Custom type agNewCfgLoginBanner based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 79),
    )


_AgNewCfgLoginBanner_Type.__name__ = "DisplayString"
_AgNewCfgLoginBanner_Object = MibScalar
agNewCfgLoginBanner = _AgNewCfgLoginBanner_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 20),
    _AgNewCfgLoginBanner_Type()
)
agNewCfgLoginBanner.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgLoginBanner.setStatus("current")


class _AgCurCfgConsole_Type(Integer32):
    """Custom type agCurCfgConsole based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgConsole_Type.__name__ = "Integer32"
_AgCurCfgConsole_Object = MibScalar
agCurCfgConsole = _AgCurCfgConsole_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 23),
    _AgCurCfgConsole_Type()
)
agCurCfgConsole.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgConsole.setStatus("current")


class _AgNewCfgConsole_Type(Integer32):
    """Custom type agNewCfgConsole based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgConsole_Type.__name__ = "Integer32"
_AgNewCfgConsole_Object = MibScalar
agNewCfgConsole = _AgNewCfgConsole_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 24),
    _AgNewCfgConsole_Type()
)
agNewCfgConsole.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgConsole.setStatus("current")


class _AgCurCfgBootp_Type(Integer32):
    """Custom type agCurCfgBootp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_AgCurCfgBootp_Type.__name__ = "Integer32"
_AgCurCfgBootp_Object = MibScalar
agCurCfgBootp = _AgCurCfgBootp_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 29),
    _AgCurCfgBootp_Type()
)
agCurCfgBootp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgBootp.setStatus("current")


class _AgNewCfgBootp_Type(Integer32):
    """Custom type agNewCfgBootp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_AgNewCfgBootp_Type.__name__ = "Integer32"
_AgNewCfgBootp_Object = MibScalar
agNewCfgBootp = _AgNewCfgBootp_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 30),
    _AgNewCfgBootp_Type()
)
agNewCfgBootp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgBootp.setStatus("current")


class _AgSlotNumber_Type(Integer32):
    """Custom type agSlotNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_AgSlotNumber_Type.__name__ = "Integer32"
_AgSlotNumber_Object = MibScalar
agSlotNumber = _AgSlotNumber_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 31),
    _AgSlotNumber_Type()
)
agSlotNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agSlotNumber.setStatus("current")


class _AgCurCfgSnmpTimeout_Type(Integer32):
    """Custom type agCurCfgSnmpTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 30),
    )


_AgCurCfgSnmpTimeout_Type.__name__ = "Integer32"
_AgCurCfgSnmpTimeout_Object = MibScalar
agCurCfgSnmpTimeout = _AgCurCfgSnmpTimeout_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 32),
    _AgCurCfgSnmpTimeout_Type()
)
agCurCfgSnmpTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSnmpTimeout.setStatus("current")


class _AgNewCfgSnmpTimeout_Type(Integer32):
    """Custom type agNewCfgSnmpTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 30),
    )


_AgNewCfgSnmpTimeout_Type.__name__ = "Integer32"
_AgNewCfgSnmpTimeout_Object = MibScalar
agNewCfgSnmpTimeout = _AgNewCfgSnmpTimeout_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 33),
    _AgNewCfgSnmpTimeout_Type()
)
agNewCfgSnmpTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSnmpTimeout.setStatus("current")


class _AgCurCfgTelnetServerPort_Type(Integer32):
    """Custom type agCurCfgTelnetServerPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_AgCurCfgTelnetServerPort_Type.__name__ = "Integer32"
_AgCurCfgTelnetServerPort_Object = MibScalar
agCurCfgTelnetServerPort = _AgCurCfgTelnetServerPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 34),
    _AgCurCfgTelnetServerPort_Type()
)
agCurCfgTelnetServerPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgTelnetServerPort.setStatus("current")


class _AgNewCfgTelnetServerPort_Type(Integer32):
    """Custom type agNewCfgTelnetServerPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_AgNewCfgTelnetServerPort_Type.__name__ = "Integer32"
_AgNewCfgTelnetServerPort_Object = MibScalar
agNewCfgTelnetServerPort = _AgNewCfgTelnetServerPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 35),
    _AgNewCfgTelnetServerPort_Type()
)
agNewCfgTelnetServerPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgTelnetServerPort.setStatus("current")


class _AgClearFlashDump_Type(Integer32):
    """Custom type agClearFlashDump based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_AgClearFlashDump_Type.__name__ = "Integer32"
_AgClearFlashDump_Object = MibScalar
agClearFlashDump = _AgClearFlashDump_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 36),
    _AgClearFlashDump_Type()
)
agClearFlashDump.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agClearFlashDump.setStatus("current")


class _AgRackId_Type(DisplayString):
    """Custom type agRackId based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 127),
    )


_AgRackId_Type.__name__ = "DisplayString"
_AgRackId_Object = MibScalar
agRackId = _AgRackId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 37),
    _AgRackId_Type()
)
agRackId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agRackId.setStatus("current")


class _AgChassis_Type(DisplayString):
    """Custom type agChassis based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 127),
    )


_AgChassis_Type.__name__ = "DisplayString"
_AgChassis_Object = MibScalar
agChassis = _AgChassis_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 38),
    _AgChassis_Type()
)
agChassis.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agChassis.setStatus("current")


class _AgCurCfgTftpServerPort_Type(Integer32):
    """Custom type agCurCfgTftpServerPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_AgCurCfgTftpServerPort_Type.__name__ = "Integer32"
_AgCurCfgTftpServerPort_Object = MibScalar
agCurCfgTftpServerPort = _AgCurCfgTftpServerPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 39),
    _AgCurCfgTftpServerPort_Type()
)
agCurCfgTftpServerPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgTftpServerPort.setStatus("current")


class _AgNewCfgTftpServerPort_Type(Integer32):
    """Custom type agNewCfgTftpServerPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_AgNewCfgTftpServerPort_Type.__name__ = "Integer32"
_AgNewCfgTftpServerPort_Object = MibScalar
agNewCfgTftpServerPort = _AgNewCfgTftpServerPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 40),
    _AgNewCfgTftpServerPort_Type()
)
agNewCfgTftpServerPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgTftpServerPort.setStatus("current")


class _AgCurCfgHttpsServerPort_Type(Integer32):
    """Custom type agCurCfgHttpsServerPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_AgCurCfgHttpsServerPort_Type.__name__ = "Integer32"
_AgCurCfgHttpsServerPort_Object = MibScalar
agCurCfgHttpsServerPort = _AgCurCfgHttpsServerPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 49),
    _AgCurCfgHttpsServerPort_Type()
)
agCurCfgHttpsServerPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgHttpsServerPort.setStatus("current")


class _AgNewCfgHttpsServerPort_Type(Integer32):
    """Custom type agNewCfgHttpsServerPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_AgNewCfgHttpsServerPort_Type.__name__ = "Integer32"
_AgNewCfgHttpsServerPort_Object = MibScalar
agNewCfgHttpsServerPort = _AgNewCfgHttpsServerPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 50),
    _AgNewCfgHttpsServerPort_Type()
)
agNewCfgHttpsServerPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgHttpsServerPort.setStatus("current")


class _AgCurDaylightSavings_Type(Integer32):
    """Custom type agCurDaylightSavings based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              48,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              58,
              59,
              60,
              61,
              62,
              63,
              64,
              65,
              66,
              67,
              68,
              69,
              70,
              71,
              72,
              73,
              74,
              75,
              76,
              77,
              78,
              79,
              80,
              81,
              82,
              83,
              84,
              85,
              86,
              87,
              88,
              89,
              90,
              91,
              92,
              93,
              94,
              95,
              96,
              97,
              98,
              99,
              100,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118,
              119,
              120,
              121,
              122,
              123,
              124,
              125,
              126,
              127,
              128,
              129,
              130,
              131,
              132,
              133,
              134,
              135,
              136,
              137,
              138,
              139,
              140,
              141,
              142,
              143,
              144,
              145,
              146,
              147,
              148,
              149,
              150,
              151,
              152,
              153,
              154,
              155,
              156,
              157,
              158,
              159,
              160,
              161,
              162,
              163,
              164,
              165,
              166,
              167,
              168,
              169,
              170,
              171,
              172,
              173,
              174,
              175,
              176,
              177,
              178,
              179,
              180,
              181,
              182,
              183,
              184,
              185,
              186,
              187,
              188,
              189,
              190,
              191,
              192,
              193,
              194,
              195,
              196,
              197,
              198,
              199,
              200,
              201,
              202,
              203,
              204,
              205,
              206,
              207,
              208,
              209,
              210,
              211,
              212,
              213,
              214,
              215,
              216,
              217,
              218,
              219,
              220,
              221,
              222,
              223,
              224,
              225,
              226,
              227,
              228,
              229,
              230,
              231,
              232,
              233,
              234,
              235,
              236,
              237,
              238,
              239,
              240,
              241,
              242,
              243,
              244,
              245,
              246,
              247,
              248,
              249,
              250,
              251,
              252,
              253,
              254,
              255,
              256,
              257,
              258,
              259,
              260,
              261,
              262,
              263,
              264,
              265,
              266,
              267,
              268,
              269,
              270,
              271,
              272,
              273,
              274,
              275,
              276,
              277,
              278,
              279,
              280,
              281,
              282,
              283,
              284,
              285,
              286,
              287,
              288,
              289,
              290,
              291,
              292,
              293,
              294,
              295,
              296,
              297,
              298,
              299,
              300,
              301,
              302,
              303,
              304,
              305,
              306,
              307,
              308,
              309,
              310,
              311,
              312,
              313,
              314,
              315,
              316,
              317,
              318,
              319,
              320,
              321,
              322,
              323,
              324,
              325,
              326,
              327,
              328,
              329,
              330,
              331,
              332,
              333,
              334,
              335,
              336,
              337,
              338,
              339,
              340,
              341,
              342,
              343,
              344,
              345,
              346,
              347,
              348,
              349,
              350,
              351,
              352,
              353,
              354,
              355,
              356,
              357,
              358,
              359,
              360,
              361,
              362,
              363,
              364,
              365,
              366,
              367,
              368,
              369,
              370,
              371,
              372,
              373,
              374,
              375,
              376,
              377,
              378,
              379,
              380,
              381,
              382,
              383,
              384,
              385,
              386,
              387,
              388,
              389,
              390,
              391,
              392,
              393,
              394,
              395,
              396,
              397,
              398,
              399,
              400,
              401,
              402,
              403,
              404,
              405,
              406,
              407,
              408,
              409,
              410,
              411,
              412,
              413,
              414,
              415,
              416,
              417,
              418,
              419,
              420)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("africa-Algeria", 1),
          ("africa-Angola", 2),
          ("africa-Benin", 3),
          ("africa-Botswana", 4),
          ("africa-Burkina-Faso", 5),
          ("africa-Burundi", 6),
          ("africa-Cameroon", 7),
          ("africa-Central-African-Rep", 8),
          ("africa-Chad", 9),
          ("africa-Congo-WestDemRepCongo", 10),
          ("africa-Congo-EastDemRepCongo", 11),
          ("africa-Congo-Rep", 12),
          ("africa-Cote-dIvoire", 13),
          ("africa-Djibouti", 14),
          ("africa-Egypt", 15),
          ("africa-Equatorial-Guinea", 16),
          ("africa-Eritrea", 17),
          ("africa-Ethiopia", 18),
          ("africa-Gabon", 19),
          ("africa-Gambia", 20),
          ("africa-Ghana", 21),
          ("africa-Guinea", 22),
          ("africa-Guinea-Bissau", 23),
          ("africa-Kenya", 24),
          ("africa-Lesotho", 25),
          ("africa-Liberia", 26),
          ("africa-Libya", 27),
          ("africa-Malawi", 28),
          ("africa-Mali-SouthWestMali", 29),
          ("africa-Mali-NorthEastMali", 30),
          ("africa-Mauritania", 31),
          ("africa-Morocco", 32),
          ("africa-Mozambique", 33),
          ("africa-Namibia", 34),
          ("africa-Niger", 35),
          ("africa-Nigeria", 36),
          ("africa-Rwanda", 37),
          ("africa-SaoTome-And-Principe", 38),
          ("africa-Senegal", 39),
          ("africa-SierraLeone", 40),
          ("africa-Somalia", 41),
          ("africa-SouthAfrica", 42),
          ("africa-Spain-Mainland", 43),
          ("africa-Spain-CeutaMelilla", 44),
          ("africa-Spain-CanaryIslands", 45),
          ("africa-Sudan", 46),
          ("africa-Swaziland", 47),
          ("africa-Tanzania", 48),
          ("africa-Togo", 49),
          ("africa-Tunisia", 50),
          ("africa-Uganda", 51),
          ("africa-Western-Sahara", 52),
          ("africa-Zambia", 53),
          ("africa-Zimbabwe", 54),
          ("americas-Anguilla", 55),
          ("americas-Antigua-Barbuda", 56),
          ("americas-Argentina-EArgentina", 57),
          ("americas-Argentina-MostLocations", 58),
          ("americas-Argentina-Jujuy", 59),
          ("americas-Argentina-Catamarca", 60),
          ("americas-Argentina-Mendoza", 61),
          ("americas-Aruba", 62),
          ("americas-Bahamas", 63),
          ("americas-Barbados", 64),
          ("americas-Belize", 65),
          ("americas-Bolivia", 66),
          ("americas-Brazil-AtlanticIslands", 67),
          ("americas-Brazil-AmapaEPara", 68),
          ("americas-Brazil-NEBrazil", 69),
          ("americas-Brazil-Pernambuco", 70),
          ("americas-Brazil-Tocantins", 71),
          ("americas-Brazil-AlagoasSergipe", 72),
          ("americas-Brazil-SSEBrazil", 73),
          ("americas-Brazil-MatoGrossoDoSul", 74),
          ("americas-Brazil-WParaRondonia", 75),
          ("americas-Brazil-Roraima", 76),
          ("americas-Brazil-EAmazonas", 77),
          ("americas-Brazil-WAmazonas", 78),
          ("americas-Brazil-Acre", 79),
          ("americas-Canada-NewfoundlandIsland", 80),
          ("americas-Canada-AtlanTime-NovaScotia", 81),
          ("americas-Canada-AtlanTime-ELabrador", 82),
          ("americas-Canada-EastTime-OntarioMostlocation", 83),
          ("americas-Canada-EastTime-ThunderBay", 84),
          ("americas-Canada-EastStdTime-PangnirtungNunavut", 85),
          ("americas-Canada-EastStdTime-EastNunavut", 86),
          ("americas-Canada-EastStdTime-CenNunavut", 87),
          ("americas-Canada-CenTime-ManitobaWestOntario", 88),
          ("americas-Canada-CenTime-RainyRiver", 89),
          ("americas-Canada-CenTime-WestNunavut", 90),
          ("americas-Canada-CenStdTime-SaskatchewanMostlocation", 91),
          ("americas-Canada-CenStdTime-SaskatchewanMidwest", 92),
          ("americas-Canada-MountTime-AlbertaEastBritishColumbia", 93),
          ("americas-Canada-MountTime-CentralNorthwestTerritories", 94),
          ("americas-Canada-MountTime-WestNorthwestTerritories", 95),
          ("americas-Canada-MountStdTime-EastBritishColumbia", 96),
          ("americas-Canada-PacificTime-WestBritishColumbia", 97),
          ("americas-Canada-PacificTime-SouthYukon", 98),
          ("americas-Canada-PacificTime-NorthYukon", 99),
          ("americas-CaymanIslands", 100),
          ("americas-Chile-MostLocation", 101),
          ("americas-Chile-EasterIsland", 102),
          ("americas-Colombia", 103),
          ("americas-CostaRica", 104),
          ("americas-Cuba", 105),
          ("americas-Dominica", 106),
          ("americas-DominicanRepublic", 107),
          ("americas-Ecuador", 108),
          ("americas-ElSalvado", 109),
          ("americas-FrenchGuiana", 110),
          ("americas-Greenland-MostLocation", 111),
          ("americas-Greenland-EastCoastNorthScoresbysund", 112),
          ("americas-Greenland-ScoresbysundIttoqqortoormiit", 113),
          ("americas-Greenland-ThulePituffik", 114),
          ("americas-Grenada", 115),
          ("americas-Guadeloupe", 116),
          ("americas-Guatemala", 117),
          ("americas-Guyana", 118),
          ("americas-Haiti", 119),
          ("americas-Honduras", 120),
          ("americas-Jamaica", 121),
          ("americas-Martinique", 122),
          ("americas-Mexico-CentTime-Mostlocations", 123),
          ("americas-Mexico-CentTime-QuintanaRoo", 124),
          ("americas-Mexico-CentTime-CampecheYucatan", 125),
          ("americas-Mexico-CentTime-CoahDurangoNLTamaulipas", 126),
          ("americas-Mexico-MountTime-SBajaNayaritSinaloa", 127),
          ("americas-Mexico-MountTime-Chihuahua", 128),
          ("americas-Mexico-MountStdTime-Sonora", 129),
          ("americas-Mexico-PacificTime", 130),
          ("americas-Montserrat", 131),
          ("americas-NetherlandsAntilles", 132),
          ("americas-Nicaragua", 133),
          ("americas-Panama", 134),
          ("americas-Paraguay", 135),
          ("americas-Peru", 136),
          ("americas-PuertoRico", 137),
          ("americas-StKittsAndNevis", 138),
          ("americas-StLucia", 139),
          ("americas-StPierreAndMiquelon", 140),
          ("americas-StVincent", 141),
          ("americas-Suriname", 142),
          ("americas-TrinidadAndTobago", 143),
          ("americas-TurksAndCaicosIs", 144),
          ("americas-USA-EastTime", 145),
          ("americas-USA-EastTime-MichiganMostLocation", 146),
          ("americas-USA-EastTime-KentuckyLouisvilleArea", 147),
          ("americas-USA-EastTime-KentuckyWayneCounty", 148),
          ("americas-USA-EastStdTime-IndianaMostLocations", 149),
          ("americas-USA-EastStdTime-IndianaCrawfordCounty", 150),
          ("americas-USA-EastStdTime-IndianaStarkeCounty", 151),
          ("americas-USA-EastStdTime-IndianaSwitzerlandCounty", 152),
          ("americas-USA-CentTime", 153),
          ("americas-USA-CentTime-MichiganWisconsinborder", 154),
          ("americas-USA-CentTime-NorthDakotaOliverCounty", 155),
          ("americas-USA-MountTime", 156),
          ("americas-USA-MountTime-SouthIdahoAndEastOregon", 157),
          ("americas-USA-MountTime-Navajo", 158),
          ("americas-USA-MountStdTime-Arizona", 159),
          ("americas-USA-PacificTime", 160),
          ("americas-USA-AlaskaTime", 161),
          ("americas-USA-AlaskaTime-AlaskaPanhandle", 162),
          ("americas-USA-AlaskaTime-AlaskaPanhandleNeck", 163),
          ("americas-USA-AlaskaTime-WestAlaska", 164),
          ("americas-USA-AleutianIslands", 165),
          ("americas-USA-Hawaii", 166),
          ("americas-Uruguay", 167),
          ("americas-Venezuela", 168),
          ("americas-VirginIslands-UK", 169),
          ("americas-VirginIslands-US", 170),
          ("antarctica-McMurdoStationRossIsland", 171),
          ("antarctica-Amundsen-ScottStationSouthPole", 172),
          ("antarctica-PalmerStationAnversIsland", 173),
          ("antarctica-MawsonStationHolmeBay", 174),
          ("antarctica-DavisStationVestfoldHills", 175),
          ("antarctica-CaseyStationBaileyPeninsula", 176),
          ("antarctica-VostokStationSMagneticPole", 177),
          ("antarctica-Dumont-dUrvilleBaseTerreAdelie", 178),
          ("antarctica-SyowaStationEOngulI", 179),
          ("arcticOcean-Svalbard", 180),
          ("arcticOcean-JanMayen", 181),
          ("asia-Afghanistan", 182),
          ("asia-Armenia", 183),
          ("asia-Azerbaijan", 184),
          ("asia-Bahrain", 185),
          ("asia-Bangladesh", 186),
          ("asia-Bhutan", 187),
          ("asia-Brunei", 188),
          ("asia-Cambodia", 189),
          ("asia-China-EastChinaBeijingGuangdongShanghai", 190),
          ("asia-China-Heilongjiang", 191),
          ("asia-China-CentralChinaGansuGuizhouSichuanYunnan", 192),
          ("asia-China-TibetmostofXinjiangUyghur", 193),
          ("asia-China-SouthwestXinjiangUyghur", 194),
          ("asia-Cyprus", 195),
          ("asia-EastTimor", 196),
          ("asia-Georgia", 197),
          ("asia-HongKong", 198),
          ("asia-India", 199),
          ("asia-Indonesia-JavaAndSumatra", 200),
          ("asia-Indonesia-WestCentralBorneo", 201),
          ("asia-Indonesia-EastSouthBorneoBaliWestTimor", 202),
          ("asia-Indonesia-IrianJayaAndMoluccas", 203),
          ("asia-Iran", 204),
          ("asia-Iraq", 205),
          ("asia-Israel", 206),
          ("asia-Japan", 207),
          ("asia-Jordan", 208),
          ("asia-Kazakhstan-MostLocations", 209),
          ("asia-Kazakhstan-QyzylordaKyzylorda", 210),
          ("asia-Kazakhstan-Aqtobe", 211),
          ("asia-Kazakhstan-AtyrauMangghystau", 212),
          ("asia-Kazakhstan-WestKazakhstan", 213),
          ("asia-Korea-North", 214),
          ("asia-Korea-South", 215),
          ("asia-Kuwait", 216),
          ("asia-Kyrgyzstan", 217),
          ("asia-Laos", 218),
          ("asia-Lebanon", 219),
          ("asia-Macau", 220),
          ("asia-Malaysia-PeninsularMalaysia", 221),
          ("asia-Malaysia-SabahSarawak", 222),
          ("asia-Mongolia-MostLocations", 223),
          ("asia-Mongolia-BayanOlgiyGoviAltaiHovdUvsZavkhan", 224),
          ("asia-Mongolia-DornodSukhbaatar", 225),
          ("asia-Myanmar", 226),
          ("asia-Nepal", 227),
          ("asia-Oman", 228),
          ("asia-Pakistan", 229),
          ("asia-Palestine", 230),
          ("asia-Philippines", 231),
          ("asia-Qatar", 232),
          ("asia-Russia-Moscow-01Kaliningrad", 233),
          ("asia-Russia-Moscow00WestRussia", 234),
          ("asia-Russia-Moscow01CaspianSea", 235),
          ("asia-Russia-Moscow02Urals", 236),
          ("asia-Russia-Moscow03WestSiberia", 237),
          ("asia-Russia-Moscow03Novosibirsk", 238),
          ("asia-Russia-Moscow04YeniseiRiver", 239),
          ("asia-Russia-Moscow05LakeBaikal", 240),
          ("asia-Russia-Moscow06LenaRiver", 241),
          ("asia-Russia-Moscow07AmurRiver", 242),
          ("asia-Russia-Moscow07SakhalinIsland", 243),
          ("asia-Russia-Moscow08Magadan", 244),
          ("asia-Russia-Moscow09Kamchatka", 245),
          ("asia-Russia-Moscow10BeringSea", 246),
          ("asia-SaudiArabia", 247),
          ("asia-Singapore", 248),
          ("asia-SriLanka", 249),
          ("asia-Syria", 250),
          ("asia-Taiwan", 251),
          ("asia-Tajikistan", 252),
          ("asia-Thailand", 253),
          ("asia-Turkmenistan", 254),
          ("asia-UnitedArabEmirates", 255),
          ("asia-Uzbekistan-WestUzbekistan", 256),
          ("asia-Uzbekistan-EastUzbekistan", 257),
          ("asia-Vietnam", 258),
          ("asia-Yemen", 259),
          ("atlanticOcean-Bermuda", 260),
          ("atlanticOcean-CapeVerde", 261),
          ("atlanticOcean-FaeroeIslands", 262),
          ("atlanticOcean-FalklandIslands", 263),
          ("atlanticOcean-Iceland", 264),
          ("atlanticOcean-Portugal-Mainland", 265),
          ("atlanticOcean-Portugal-MadeiraIslands", 266),
          ("atlanticOcean-Portugal-Azores", 267),
          ("atlanticOcean-SouthGeorgia-SouthSandwichIslands", 268),
          ("atlanticOcean-Spain-Mainland", 269),
          ("atlanticOcean-Spain-CeutaMelilla", 270),
          ("atlanticOcean-Spain-CanaryIslands", 271),
          ("atlanticOcean-StHelena", 272),
          ("atlanticOcean-Svalbard-JanMayen", 273),
          ("australia-LordHoweIsland", 274),
          ("australia-Tasmania", 275),
          ("australia-Victoria", 276),
          ("australia-NewSouthWales-MostLocations", 277),
          ("australia-NewSouthWales-Yancowinna", 278),
          ("australia-Queensland-MostLocations", 279),
          ("australia-Queensland-HolidayIslands", 280),
          ("australia-SouthAustralia", 281),
          ("australia-NorthernTerritory", 282),
          ("australia-WesternAustralia", 283),
          ("europe-Albania", 284),
          ("europe-Andorra", 285),
          ("europe-Austria", 286),
          ("europe-Belarus", 287),
          ("europe-Belgium", 288),
          ("europe-BosniaHerzegovina", 289),
          ("europe-Britain-UKGreatBritain", 290),
          ("europe-Britain-UKNorthernIreland", 291),
          ("europe-Bulgaria", 292),
          ("europe-Croatia", 293),
          ("europe-CzechRepublic", 294),
          ("europe-Denmark", 295),
          ("europe-Estonia", 296),
          ("europe-Finland", 297),
          ("europe-France", 298),
          ("europe-Germany", 299),
          ("europe-Gibraltar", 300),
          ("europe-Greece", 301),
          ("europe-Hungary", 302),
          ("europe-Ireland", 303),
          ("europe-Italy", 304),
          ("europe-Latvia", 305),
          ("europe-Liechtenstein", 306),
          ("europe-Lithuania", 307),
          ("europe-Luxembourg", 308),
          ("europe-Macedonia", 309),
          ("europe-Malta", 310),
          ("europe-Moldova", 311),
          ("europe-Monaco", 312),
          ("europe-Netherlands", 313),
          ("europe-Norway", 314),
          ("europe-Poland", 315),
          ("europe-Portugal-Mainland", 316),
          ("europe-Portugal-MadeiraIslands", 317),
          ("europe-Portugal-Azores", 318),
          ("europe-Romania", 319),
          ("europe-Russia-Moscow-01Kaliningrad", 320),
          ("europe-Russia-Moscow00WestRussia", 321),
          ("europe-Russia-Moscow01CaspianSea", 322),
          ("europe-Russia-Moscow02Urals", 323),
          ("europe-Russia-Moscow03WestSiberia", 324),
          ("europe-Russia-Moscow03Novosibirsk", 325),
          ("europe-Russia-Moscow04YeniseiRiver", 326),
          ("europe-Russia-Moscow05LakeBaikal", 327),
          ("europe-Russia-Moscow06LenaRiver", 328),
          ("europe-Russia-Moscow07AmurRiver", 329),
          ("europe-Russia-Moscow07SakhalinIsland", 330),
          ("europe-Russia-Moscow08Magadan", 331),
          ("europe-Russia-Moscow09Kamchatka", 332),
          ("europe-Russia-Moscow10BeringSea", 333),
          ("europe-SanMarino", 334),
          ("europe-Slovakia", 335),
          ("europe-Slovenia", 336),
          ("europe-Spain-Mainland", 337),
          ("europe-Spain-CeutaAndMelilla", 338),
          ("europe-Spain-CanaryIslands", 339),
          ("europe-Sweden", 340),
          ("europe-Switzerland", 341),
          ("europe-Turkey", 342),
          ("europe-Ukraine-MostLocations", 343),
          ("europe-Ukraine-Ruthenia", 344),
          ("europe-Ukraine-Zaporozhye-ELugansk", 345),
          ("europe-Ukraine-CentralCrimea", 346),
          ("europe-VaticanCity", 347),
          ("europe-Yugoslavia", 348),
          ("indianOcean-BritishIndianOceanTerritory", 349),
          ("indianOcean-ChristmasIsland", 350),
          ("indianOcean-CocosOrKeelingIslands", 351),
          ("indianOcean-Comoros", 352),
          ("indianOcean-FrenchSouthernAndAntarcticLands", 353),
          ("indianOcean-Madagascar", 354),
          ("indianOcean-Maldives", 355),
          ("indianOcean-Mauritius", 356),
          ("indianOcean-Mayotte", 357),
          ("indianOcean-Reunion", 358),
          ("indianOcean-Seychelles", 359),
          ("pacificOcean-Chile-MostLocations", 360),
          ("pacificOcean-Chile-EasterIslandSalayGomez", 361),
          ("pacificOcean-CookIslands", 362),
          ("pacificOcean-Ecuador", 363),
          ("pacificOcean-Fiji", 364),
          ("pacificOcean-FrenchPolynesia-SocietyIslands", 365),
          ("pacificOcean-FrenchPolynesia-MarquesasIslands", 366),
          ("pacificOcean-FrenchPolynesia-GambierIslands", 367),
          ("pacificOcean-Guam", 368),
          ("pacificOcean-Kiribati-GilbertIslands", 369),
          ("pacificOcean-Kiribati-PhoenixIslands", 370),
          ("pacificOcean-Kiribati-LineIslands", 371),
          ("pacificOcean-MarshallIslands-MostLocations", 372),
          ("pacificOcean-MarshallIslands-Kwajalein", 373),
          ("pacificOcean-Micronesia-Yap", 374),
          ("pacificOcean-Micronesia-TrukOrChuuk", 375),
          ("pacificOcean-Micronesia-PonapeOrPohnpei", 376),
          ("pacificOcean-Micronesia-Kosrae", 377),
          ("pacificOcean-Nauru", 378),
          ("pacificOcean-NewCaledonia", 379),
          ("pacificOcean-NewZealand-MostLocations", 380),
          ("pacificOcean-NewZealand-ChathamIslands", 381),
          ("pacificOcean-Niue", 382),
          ("pacificOcean-NorfolkIsland", 383),
          ("pacificOcean-NorthernMarianaIslands", 384),
          ("pacificOcean-Palau", 385),
          ("pacificOcean-PapuaNewGuinea", 386),
          ("pacificOcean-Pitcairn", 387),
          ("pacificOcean-SamoaAmerican", 388),
          ("pacificOcean-SamoaWestern", 389),
          ("pacificOcean-SolomonIslands", 390),
          ("pacificOcean-Tokelau", 391),
          ("pacificOcean-Tonga", 392),
          ("pacificOcean-Tuvalu", 393),
          ("pacificOceanUSA-EastTime", 394),
          ("pacificOceanUSA-EastTime-MichiganMostLocations", 395),
          ("pacificOceanUSA-EastTime-KentuckyLouisvilleArea", 396),
          ("pacificOceanUSA-EastTime-KentuckyWayneCounty", 397),
          ("pacificOceanUSA-EastStdTime-IndianaMostLocations", 398),
          ("pacificOceanUSA-EastStdTime-IndianaCrawfordCounty", 399),
          ("pacificOceanUSA-EastStdTime-IndianaStarkeCounty", 400),
          ("pacificOceanUSA-EastStdTime-IndianaSwitzerlandCounty", 401),
          ("pacificOceanUSA-CentTime", 402),
          ("pacificOceanUSA-CentTime-MichiganWisconsinborder", 403),
          ("pacificOceanUSA-CentTime-NorthDakotaOliverCounty", 404),
          ("pacificOceanUSA-MountTime", 405),
          ("pacificOceanUSA-MountTime-SouthIdahoAndEastOregon", 406),
          ("pacificOceanUSA-MountTime-Navajo", 407),
          ("pacificOceanUSA-MountStdTime-Arizona", 408),
          ("pacificOceanUSA-PacificTime", 409),
          ("pacificOceanUSA-AlaskaTime", 410),
          ("pacificOceanUSA-AlaskaTime-AlaskaPanhandle", 411),
          ("pacificOceanUSA-AlaskaTime-AlaskaPanhandleNeck", 412),
          ("pacificOceanUSA-AlaskaTime-WestAlaska", 413),
          ("pacificOceanUSA-AleutianIslands", 414),
          ("pacificOceanUSA-Hawaii", 415),
          ("pacificOcean-USMinorOutlyingIslands-JohnstonAtoll", 416),
          ("pacificOcean-USMinorOutlyingIslands-MidwayIslands", 417),
          ("pacificOcean-USMinorOutlyingIslands-WakeIsland", 418),
          ("pacificOcean-Vanuatu", 419),
          ("pacificOcean-WallisAndFutuna", 420))
    )


_AgCurDaylightSavings_Type.__name__ = "Integer32"
_AgCurDaylightSavings_Object = MibScalar
agCurDaylightSavings = _AgCurDaylightSavings_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 51),
    _AgCurDaylightSavings_Type()
)
agCurDaylightSavings.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurDaylightSavings.setStatus("current")


class _AgNewDaylightSavings_Type(Integer32):
    """Custom type agNewDaylightSavings based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              48,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              58,
              59,
              60,
              61,
              62,
              63,
              64,
              65,
              66,
              67,
              68,
              69,
              70,
              71,
              72,
              73,
              74,
              75,
              76,
              77,
              78,
              79,
              80,
              81,
              82,
              83,
              84,
              85,
              86,
              87,
              88,
              89,
              90,
              91,
              92,
              93,
              94,
              95,
              96,
              97,
              98,
              99,
              100,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118,
              119,
              120,
              121,
              122,
              123,
              124,
              125,
              126,
              127,
              128,
              129,
              130,
              131,
              132,
              133,
              134,
              135,
              136,
              137,
              138,
              139,
              140,
              141,
              142,
              143,
              144,
              145,
              146,
              147,
              148,
              149,
              150,
              151,
              152,
              153,
              154,
              155,
              156,
              157,
              158,
              159,
              160,
              161,
              162,
              163,
              164,
              165,
              166,
              167,
              168,
              169,
              170,
              171,
              172,
              173,
              174,
              175,
              176,
              177,
              178,
              179,
              180,
              181,
              182,
              183,
              184,
              185,
              186,
              187,
              188,
              189,
              190,
              191,
              192,
              193,
              194,
              195,
              196,
              197,
              198,
              199,
              200,
              201,
              202,
              203,
              204,
              205,
              206,
              207,
              208,
              209,
              210,
              211,
              212,
              213,
              214,
              215,
              216,
              217,
              218,
              219,
              220,
              221,
              222,
              223,
              224,
              225,
              226,
              227,
              228,
              229,
              230,
              231,
              232,
              233,
              234,
              235,
              236,
              237,
              238,
              239,
              240,
              241,
              242,
              243,
              244,
              245,
              246,
              247,
              248,
              249,
              250,
              251,
              252,
              253,
              254,
              255,
              256,
              257,
              258,
              259,
              260,
              261,
              262,
              263,
              264,
              265,
              266,
              267,
              268,
              269,
              270,
              271,
              272,
              273,
              274,
              275,
              276,
              277,
              278,
              279,
              280,
              281,
              282,
              283,
              284,
              285,
              286,
              287,
              288,
              289,
              290,
              291,
              292,
              293,
              294,
              295,
              296,
              297,
              298,
              299,
              300,
              301,
              302,
              303,
              304,
              305,
              306,
              307,
              308,
              309,
              310,
              311,
              312,
              313,
              314,
              315,
              316,
              317,
              318,
              319,
              320,
              321,
              322,
              323,
              324,
              325,
              326,
              327,
              328,
              329,
              330,
              331,
              332,
              333,
              334,
              335,
              336,
              337,
              338,
              339,
              340,
              341,
              342,
              343,
              344,
              345,
              346,
              347,
              348,
              349,
              350,
              351,
              352,
              353,
              354,
              355,
              356,
              357,
              358,
              359,
              360,
              361,
              362,
              363,
              364,
              365,
              366,
              367,
              368,
              369,
              370,
              371,
              372,
              373,
              374,
              375,
              376,
              377,
              378,
              379,
              380,
              381,
              382,
              383,
              384,
              385,
              386,
              387,
              388,
              389,
              390,
              391,
              392,
              393,
              394,
              395,
              396,
              397,
              398,
              399,
              400,
              401,
              402,
              403,
              404,
              405,
              406,
              407,
              408,
              409,
              410,
              411,
              412,
              413,
              414,
              415,
              416,
              417,
              418,
              419,
              420)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("africa-Algeria", 1),
          ("africa-Angola", 2),
          ("africa-Benin", 3),
          ("africa-Botswana", 4),
          ("africa-Burkina-Faso", 5),
          ("africa-Burundi", 6),
          ("africa-Cameroon", 7),
          ("africa-Central-African-Rep", 8),
          ("africa-Chad", 9),
          ("africa-Congo-WestDemRepCongo", 10),
          ("africa-Congo-EastDemRepCongo", 11),
          ("africa-Congo-Rep", 12),
          ("africa-Cote-dIvoire", 13),
          ("africa-Djibouti", 14),
          ("africa-Egypt", 15),
          ("africa-Equatorial-Guinea", 16),
          ("africa-Eritrea", 17),
          ("africa-Ethiopia", 18),
          ("africa-Gabon", 19),
          ("africa-Gambia", 20),
          ("africa-Ghana", 21),
          ("africa-Guinea", 22),
          ("africa-Guinea-Bissau", 23),
          ("africa-Kenya", 24),
          ("africa-Lesotho", 25),
          ("africa-Liberia", 26),
          ("africa-Libya", 27),
          ("africa-Malawi", 28),
          ("africa-Mali-SouthWestMali", 29),
          ("africa-Mali-NorthEastMali", 30),
          ("africa-Mauritania", 31),
          ("africa-Morocco", 32),
          ("africa-Mozambique", 33),
          ("africa-Namibia", 34),
          ("africa-Niger", 35),
          ("africa-Nigeria", 36),
          ("africa-Rwanda", 37),
          ("africa-SaoTome-And-Principe", 38),
          ("africa-Senegal", 39),
          ("africa-SierraLeone", 40),
          ("africa-Somalia", 41),
          ("africa-SouthAfrica", 42),
          ("africa-Spain-Mainland", 43),
          ("africa-Spain-CeutaMelilla", 44),
          ("africa-Spain-CanaryIslands", 45),
          ("africa-Sudan", 46),
          ("africa-Swaziland", 47),
          ("africa-Tanzania", 48),
          ("africa-Togo", 49),
          ("africa-Tunisia", 50),
          ("africa-Uganda", 51),
          ("africa-Western-Sahara", 52),
          ("africa-Zambia", 53),
          ("africa-Zimbabwe", 54),
          ("americas-Anguilla", 55),
          ("americas-Antigua-Barbuda", 56),
          ("americas-Argentina-EArgentina", 57),
          ("americas-Argentina-MostLocations", 58),
          ("americas-Argentina-Jujuy", 59),
          ("americas-Argentina-Catamarca", 60),
          ("americas-Argentina-Mendoza", 61),
          ("americas-Aruba", 62),
          ("americas-Bahamas", 63),
          ("americas-Barbados", 64),
          ("americas-Belize", 65),
          ("americas-Bolivia", 66),
          ("americas-Brazil-AtlanticIslands", 67),
          ("americas-Brazil-AmapaEPara", 68),
          ("americas-Brazil-NEBrazil", 69),
          ("americas-Brazil-Pernambuco", 70),
          ("americas-Brazil-Tocantins", 71),
          ("americas-Brazil-AlagoasSergipe", 72),
          ("americas-Brazil-SSEBrazil", 73),
          ("americas-Brazil-MatoGrossoDoSul", 74),
          ("americas-Brazil-WParaRondonia", 75),
          ("americas-Brazil-Roraima", 76),
          ("americas-Brazil-EAmazonas", 77),
          ("americas-Brazil-WAmazonas", 78),
          ("americas-Brazil-Acre", 79),
          ("americas-Canada-NewfoundlandIsland", 80),
          ("americas-Canada-AtlanTime-NovaScotia", 81),
          ("americas-Canada-AtlanTime-ELabrador", 82),
          ("americas-Canada-EastTime-OntarioMostlocation", 83),
          ("americas-Canada-EastTime-ThunderBay", 84),
          ("americas-Canada-EastStdTime-PangnirtungNunavut", 85),
          ("americas-Canada-EastStdTime-EastNunavut", 86),
          ("americas-Canada-EastStdTime-CenNunavut", 87),
          ("americas-Canada-CenTime-ManitobaWestOntario", 88),
          ("americas-Canada-CenTime-RainyRiver", 89),
          ("americas-Canada-CenTime-WestNunavut", 90),
          ("americas-Canada-CenStdTime-SaskatchewanMostlocation", 91),
          ("americas-Canada-CenStdTime-SaskatchewanMidwest", 92),
          ("americas-Canada-MountTime-AlbertaEastBritishColumbia", 93),
          ("americas-Canada-MountTime-CentralNorthwestTerritories", 94),
          ("americas-Canada-MountTime-WestNorthwestTerritories", 95),
          ("americas-Canada-MountStdTime-EastBritishColumbia", 96),
          ("americas-Canada-PacificTime-WestBritishColumbia", 97),
          ("americas-Canada-PacificTime-SouthYukon", 98),
          ("americas-Canada-PacificTime-NorthYukon", 99),
          ("americas-CaymanIslands", 100),
          ("americas-Chile-MostLocation", 101),
          ("americas-Chile-EasterIsland", 102),
          ("americas-Colombia", 103),
          ("americas-CostaRica", 104),
          ("americas-Cuba", 105),
          ("americas-Dominica", 106),
          ("americas-DominicanRepublic", 107),
          ("americas-Ecuador", 108),
          ("americas-ElSalvado", 109),
          ("americas-FrenchGuiana", 110),
          ("americas-Greenland-MostLocation", 111),
          ("americas-Greenland-EastCoastNorthScoresbysund", 112),
          ("americas-Greenland-ScoresbysundIttoqqortoormiit", 113),
          ("americas-Greenland-ThulePituffik", 114),
          ("americas-Grenada", 115),
          ("americas-Guadeloupe", 116),
          ("americas-Guatemala", 117),
          ("americas-Guyana", 118),
          ("americas-Haiti", 119),
          ("americas-Honduras", 120),
          ("americas-Jamaica", 121),
          ("americas-Martinique", 122),
          ("americas-Mexico-CentTime-Mostlocations", 123),
          ("americas-Mexico-CentTime-QuintanaRoo", 124),
          ("americas-Mexico-CentTime-CampecheYucatan", 125),
          ("americas-Mexico-CentTime-CoahDurangoNLTamaulipas", 126),
          ("americas-Mexico-MountTime-SBajaNayaritSinaloa", 127),
          ("americas-Mexico-MountTime-Chihuahua", 128),
          ("americas-Mexico-MountStdTime-Sonora", 129),
          ("americas-Mexico-PacificTime", 130),
          ("americas-Montserrat", 131),
          ("americas-NetherlandsAntilles", 132),
          ("americas-Nicaragua", 133),
          ("americas-Panama", 134),
          ("americas-Paraguay", 135),
          ("americas-Peru", 136),
          ("americas-PuertoRico", 137),
          ("americas-StKittsAndNevis", 138),
          ("americas-StLucia", 139),
          ("americas-StPierreAndMiquelon", 140),
          ("americas-StVincent", 141),
          ("americas-Suriname", 142),
          ("americas-TrinidadAndTobago", 143),
          ("americas-TurksAndCaicosIs", 144),
          ("americas-USA-EastTime", 145),
          ("americas-USA-EastTime-MichiganMostLocation", 146),
          ("americas-USA-EastTime-KentuckyLouisvilleArea", 147),
          ("americas-USA-EastTime-KentuckyWayneCounty", 148),
          ("americas-USA-EastStdTime-IndianaMostLocations", 149),
          ("americas-USA-EastStdTime-IndianaCrawfordCounty", 150),
          ("americas-USA-EastStdTime-IndianaStarkeCounty", 151),
          ("americas-USA-EastStdTime-IndianaSwitzerlandCounty", 152),
          ("americas-USA-CentTime", 153),
          ("americas-USA-CentTime-MichiganWisconsinborder", 154),
          ("americas-USA-CentTime-NorthDakotaOliverCounty", 155),
          ("americas-USA-MountTime", 156),
          ("americas-USA-MountTime-SouthIdahoAndEastOregon", 157),
          ("americas-USA-MountTime-Navajo", 158),
          ("americas-USA-MountStdTime-Arizona", 159),
          ("americas-USA-PacificTime", 160),
          ("americas-USA-AlaskaTime", 161),
          ("americas-USA-AlaskaTime-AlaskaPanhandle", 162),
          ("americas-USA-AlaskaTime-AlaskaPanhandleNeck", 163),
          ("americas-USA-AlaskaTime-WestAlaska", 164),
          ("americas-USA-AleutianIslands", 165),
          ("americas-USA-Hawaii", 166),
          ("americas-Uruguay", 167),
          ("americas-Venezuela", 168),
          ("americas-VirginIslands-UK", 169),
          ("americas-VirginIslands-US", 170),
          ("antarctica-McMurdoStationRossIsland", 171),
          ("antarctica-Amundsen-ScottStationSouthPole", 172),
          ("antarctica-PalmerStationAnversIsland", 173),
          ("antarctica-MawsonStationHolmeBay", 174),
          ("antarctica-DavisStationVestfoldHills", 175),
          ("antarctica-CaseyStationBaileyPeninsula", 176),
          ("antarctica-VostokStationSMagneticPole", 177),
          ("antarctica-Dumont-dUrvilleBaseTerreAdelie", 178),
          ("antarctica-SyowaStationEOngulI", 179),
          ("arcticOcean-Svalbard", 180),
          ("arcticOcean-JanMayen", 181),
          ("asia-Afghanistan", 182),
          ("asia-Armenia", 183),
          ("asia-Azerbaijan", 184),
          ("asia-Bahrain", 185),
          ("asia-Bangladesh", 186),
          ("asia-Bhutan", 187),
          ("asia-Brunei", 188),
          ("asia-Cambodia", 189),
          ("asia-China-EastChinaBeijingGuangdongShanghai", 190),
          ("asia-China-Heilongjiang", 191),
          ("asia-China-CentralChinaGansuGuizhouSichuanYunnan", 192),
          ("asia-China-TibetmostofXinjiangUyghur", 193),
          ("asia-China-SouthwestXinjiangUyghur", 194),
          ("asia-Cyprus", 195),
          ("asia-EastTimor", 196),
          ("asia-Georgia", 197),
          ("asia-HongKong", 198),
          ("asia-India", 199),
          ("asia-Indonesia-JavaAndSumatra", 200),
          ("asia-Indonesia-WestCentralBorneo", 201),
          ("asia-Indonesia-EastSouthBorneoBaliWestTimor", 202),
          ("asia-Indonesia-IrianJayaAndMoluccas", 203),
          ("asia-Iran", 204),
          ("asia-Iraq", 205),
          ("asia-Israel", 206),
          ("asia-Japan", 207),
          ("asia-Jordan", 208),
          ("asia-Kazakhstan-MostLocations", 209),
          ("asia-Kazakhstan-QyzylordaKyzylorda", 210),
          ("asia-Kazakhstan-Aqtobe", 211),
          ("asia-Kazakhstan-AtyrauMangghystau", 212),
          ("asia-Kazakhstan-WestKazakhstan", 213),
          ("asia-Korea-North", 214),
          ("asia-Korea-South", 215),
          ("asia-Kuwait", 216),
          ("asia-Kyrgyzstan", 217),
          ("asia-Laos", 218),
          ("asia-Lebanon", 219),
          ("asia-Macau", 220),
          ("asia-Malaysia-PeninsularMalaysia", 221),
          ("asia-Malaysia-SabahSarawak", 222),
          ("asia-Mongolia-MostLocations", 223),
          ("asia-Mongolia-BayanOlgiyGoviAltaiHovdUvsZavkhan", 224),
          ("asia-Mongolia-DornodSukhbaatar", 225),
          ("asia-Myanmar", 226),
          ("asia-Nepal", 227),
          ("asia-Oman", 228),
          ("asia-Pakistan", 229),
          ("asia-Palestine", 230),
          ("asia-Philippines", 231),
          ("asia-Qatar", 232),
          ("asia-Russia-Moscow-01Kaliningrad", 233),
          ("asia-Russia-Moscow00WestRussia", 234),
          ("asia-Russia-Moscow01CaspianSea", 235),
          ("asia-Russia-Moscow02Urals", 236),
          ("asia-Russia-Moscow03WestSiberia", 237),
          ("asia-Russia-Moscow03Novosibirsk", 238),
          ("asia-Russia-Moscow04YeniseiRiver", 239),
          ("asia-Russia-Moscow05LakeBaikal", 240),
          ("asia-Russia-Moscow06LenaRiver", 241),
          ("asia-Russia-Moscow07AmurRiver", 242),
          ("asia-Russia-Moscow07SakhalinIsland", 243),
          ("asia-Russia-Moscow08Magadan", 244),
          ("asia-Russia-Moscow09Kamchatka", 245),
          ("asia-Russia-Moscow10BeringSea", 246),
          ("asia-SaudiArabia", 247),
          ("asia-Singapore", 248),
          ("asia-SriLanka", 249),
          ("asia-Syria", 250),
          ("asia-Taiwan", 251),
          ("asia-Tajikistan", 252),
          ("asia-Thailand", 253),
          ("asia-Turkmenistan", 254),
          ("asia-UnitedArabEmirates", 255),
          ("asia-Uzbekistan-WestUzbekistan", 256),
          ("asia-Uzbekistan-EastUzbekistan", 257),
          ("asia-Vietnam", 258),
          ("asia-Yemen", 259),
          ("atlanticOcean-Bermuda", 260),
          ("atlanticOcean-CapeVerde", 261),
          ("atlanticOcean-FaeroeIslands", 262),
          ("atlanticOcean-FalklandIslands", 263),
          ("atlanticOcean-Iceland", 264),
          ("atlanticOcean-Portugal-Mainland", 265),
          ("atlanticOcean-Portugal-MadeiraIslands", 266),
          ("atlanticOcean-Portugal-Azores", 267),
          ("atlanticOcean-SouthGeorgia-SouthSandwichIslands", 268),
          ("atlanticOcean-Spain-Mainland", 269),
          ("atlanticOcean-Spain-CeutaMelilla", 270),
          ("atlanticOcean-Spain-CanaryIslands", 271),
          ("atlanticOcean-StHelena", 272),
          ("atlanticOcean-Svalbard-JanMayen", 273),
          ("australia-LordHoweIsland", 274),
          ("australia-Tasmania", 275),
          ("australia-Victoria", 276),
          ("australia-NewSouthWales-MostLocations", 277),
          ("australia-NewSouthWales-Yancowinna", 278),
          ("australia-Queensland-MostLocations", 279),
          ("australia-Queensland-HolidayIslands", 280),
          ("australia-SouthAustralia", 281),
          ("australia-NorthernTerritory", 282),
          ("australia-WesternAustralia", 283),
          ("europe-Albania", 284),
          ("europe-Andorra", 285),
          ("europe-Austria", 286),
          ("europe-Belarus", 287),
          ("europe-Belgium", 288),
          ("europe-BosniaHerzegovina", 289),
          ("europe-Britain-UKGreatBritain", 290),
          ("europe-Britain-UKNorthernIreland", 291),
          ("europe-Bulgaria", 292),
          ("europe-Croatia", 293),
          ("europe-CzechRepublic", 294),
          ("europe-Denmark", 295),
          ("europe-Estonia", 296),
          ("europe-Finland", 297),
          ("europe-France", 298),
          ("europe-Germany", 299),
          ("europe-Gibraltar", 300),
          ("europe-Greece", 301),
          ("europe-Hungary", 302),
          ("europe-Ireland", 303),
          ("europe-Italy", 304),
          ("europe-Latvia", 305),
          ("europe-Liechtenstein", 306),
          ("europe-Lithuania", 307),
          ("europe-Luxembourg", 308),
          ("europe-Macedonia", 309),
          ("europe-Malta", 310),
          ("europe-Moldova", 311),
          ("europe-Monaco", 312),
          ("europe-Netherlands", 313),
          ("europe-Norway", 314),
          ("europe-Poland", 315),
          ("europe-Portugal-Mainland", 316),
          ("europe-Portugal-MadeiraIslands", 317),
          ("europe-Portugal-Azores", 318),
          ("europe-Romania", 319),
          ("europe-Russia-Moscow-01Kaliningrad", 320),
          ("europe-Russia-Moscow00WestRussia", 321),
          ("europe-Russia-Moscow01CaspianSea", 322),
          ("europe-Russia-Moscow02Urals", 323),
          ("europe-Russia-Moscow03WestSiberia", 324),
          ("europe-Russia-Moscow03Novosibirsk", 325),
          ("europe-Russia-Moscow04YeniseiRiver", 326),
          ("europe-Russia-Moscow05LakeBaikal", 327),
          ("europe-Russia-Moscow06LenaRiver", 328),
          ("europe-Russia-Moscow07AmurRiver", 329),
          ("europe-Russia-Moscow07SakhalinIsland", 330),
          ("europe-Russia-Moscow08Magadan", 331),
          ("europe-Russia-Moscow09Kamchatka", 332),
          ("europe-Russia-Moscow10BeringSea", 333),
          ("europe-SanMarino", 334),
          ("europe-Slovakia", 335),
          ("europe-Slovenia", 336),
          ("europe-Spain-Mainland", 337),
          ("europe-Spain-CeutaAndMelilla", 338),
          ("europe-Spain-CanaryIslands", 339),
          ("europe-Sweden", 340),
          ("europe-Switzerland", 341),
          ("europe-Turkey", 342),
          ("europe-Ukraine-MostLocations", 343),
          ("europe-Ukraine-Ruthenia", 344),
          ("europe-Ukraine-Zaporozhye-ELugansk", 345),
          ("europe-Ukraine-CentralCrimea", 346),
          ("europe-VaticanCity", 347),
          ("europe-Yugoslavia", 348),
          ("indianOcean-BritishIndianOceanTerritory", 349),
          ("indianOcean-ChristmasIsland", 350),
          ("indianOcean-CocosOrKeelingIslands", 351),
          ("indianOcean-Comoros", 352),
          ("indianOcean-FrenchSouthernAndAntarcticLands", 353),
          ("indianOcean-Madagascar", 354),
          ("indianOcean-Maldives", 355),
          ("indianOcean-Mauritius", 356),
          ("indianOcean-Mayotte", 357),
          ("indianOcean-Reunion", 358),
          ("indianOcean-Seychelles", 359),
          ("pacificOcean-Chile-MostLocations", 360),
          ("pacificOcean-Chile-EasterIslandSalayGomez", 361),
          ("pacificOcean-CookIslands", 362),
          ("pacificOcean-Ecuador", 363),
          ("pacificOcean-Fiji", 364),
          ("pacificOcean-FrenchPolynesia-SocietyIslands", 365),
          ("pacificOcean-FrenchPolynesia-MarquesasIslands", 366),
          ("pacificOcean-FrenchPolynesia-GambierIslands", 367),
          ("pacificOcean-Guam", 368),
          ("pacificOcean-Kiribati-GilbertIslands", 369),
          ("pacificOcean-Kiribati-PhoenixIslands", 370),
          ("pacificOcean-Kiribati-LineIslands", 371),
          ("pacificOcean-MarshallIslands-MostLocations", 372),
          ("pacificOcean-MarshallIslands-Kwajalein", 373),
          ("pacificOcean-Micronesia-Yap", 374),
          ("pacificOcean-Micronesia-TrukOrChuuk", 375),
          ("pacificOcean-Micronesia-PonapeOrPohnpei", 376),
          ("pacificOcean-Micronesia-Kosrae", 377),
          ("pacificOcean-Nauru", 378),
          ("pacificOcean-NewCaledonia", 379),
          ("pacificOcean-NewZealand-MostLocations", 380),
          ("pacificOcean-NewZealand-ChathamIslands", 381),
          ("pacificOcean-Niue", 382),
          ("pacificOcean-NorfolkIsland", 383),
          ("pacificOcean-NorthernMarianaIslands", 384),
          ("pacificOcean-Palau", 385),
          ("pacificOcean-PapuaNewGuinea", 386),
          ("pacificOcean-Pitcairn", 387),
          ("pacificOcean-SamoaAmerican", 388),
          ("pacificOcean-SamoaWestern", 389),
          ("pacificOcean-SolomonIslands", 390),
          ("pacificOcean-Tokelau", 391),
          ("pacificOcean-Tonga", 392),
          ("pacificOcean-Tuvalu", 393),
          ("pacificOceanUSA-EastTime", 394),
          ("pacificOceanUSA-EastTime-MichiganMostLocations", 395),
          ("pacificOceanUSA-EastTime-KentuckyLouisvilleArea", 396),
          ("pacificOceanUSA-EastTime-KentuckyWayneCounty", 397),
          ("pacificOceanUSA-EastStdTime-IndianaMostLocations", 398),
          ("pacificOceanUSA-EastStdTime-IndianaCrawfordCounty", 399),
          ("pacificOceanUSA-EastStdTime-IndianaStarkeCounty", 400),
          ("pacificOceanUSA-EastStdTime-IndianaSwitzerlandCounty", 401),
          ("pacificOceanUSA-CentTime", 402),
          ("pacificOceanUSA-CentTime-MichiganWisconsinborder", 403),
          ("pacificOceanUSA-CentTime-NorthDakotaOliverCounty", 404),
          ("pacificOceanUSA-MountTime", 405),
          ("pacificOceanUSA-MountTime-SouthIdahoAndEastOregon", 406),
          ("pacificOceanUSA-MountTime-Navajo", 407),
          ("pacificOceanUSA-MountStdTime-Arizona", 408),
          ("pacificOceanUSA-PacificTime", 409),
          ("pacificOceanUSA-AlaskaTime", 410),
          ("pacificOceanUSA-AlaskaTime-AlaskaPanhandle", 411),
          ("pacificOceanUSA-AlaskaTime-AlaskaPanhandleNeck", 412),
          ("pacificOceanUSA-AlaskaTime-WestAlaska", 413),
          ("pacificOceanUSA-AleutianIslands", 414),
          ("pacificOceanUSA-Hawaii", 415),
          ("pacificOcean-USMinorOutlyingIslands-JohnstonAtoll", 416),
          ("pacificOcean-USMinorOutlyingIslands-MidwayIslands", 417),
          ("pacificOcean-USMinorOutlyingIslands-WakeIsland", 418),
          ("pacificOcean-Vanuatu", 419),
          ("pacificOceanWallisAndFutuna", 420))
    )


_AgNewDaylightSavings_Type.__name__ = "Integer32"
_AgNewDaylightSavings_Object = MibScalar
agNewDaylightSavings = _AgNewDaylightSavings_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 52),
    _AgNewDaylightSavings_Type()
)
agNewDaylightSavings.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewDaylightSavings.setStatus("current")


class _AgCfgSysDlight_Type(Integer32):
    """Custom type agCfgSysDlight based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCfgSysDlight_Type.__name__ = "Integer32"
_AgCfgSysDlight_Object = MibScalar
agCfgSysDlight = _AgCfgSysDlight_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 53),
    _AgCfgSysDlight_Type()
)
agCfgSysDlight.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agCfgSysDlight.setStatus("current")
_AgCurCfgIdleCLITimeout_Type = Integer32
_AgCurCfgIdleCLITimeout_Object = MibScalar
agCurCfgIdleCLITimeout = _AgCurCfgIdleCLITimeout_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 55),
    _AgCurCfgIdleCLITimeout_Type()
)
agCurCfgIdleCLITimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgIdleCLITimeout.setStatus("current")
_AgNewCfgIdleCLITimeout_Type = Integer32
_AgNewCfgIdleCLITimeout_Object = MibScalar
agNewCfgIdleCLITimeout = _AgNewCfgIdleCLITimeout_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 56),
    _AgNewCfgIdleCLITimeout_Type()
)
agNewCfgIdleCLITimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgIdleCLITimeout.setStatus("current")


class _AgCurCfgUfdTrap_Type(Integer32):
    """Custom type agCurCfgUfdTrap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_AgCurCfgUfdTrap_Type.__name__ = "Integer32"
_AgCurCfgUfdTrap_Object = MibScalar
agCurCfgUfdTrap = _AgCurCfgUfdTrap_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 57),
    _AgCurCfgUfdTrap_Type()
)
agCurCfgUfdTrap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgUfdTrap.setStatus("current")


class _AgNewCfgUfdTrap_Type(Integer32):
    """Custom type agNewCfgUfdTrap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_AgNewCfgUfdTrap_Type.__name__ = "Integer32"
_AgNewCfgUfdTrap_Object = MibScalar
agNewCfgUfdTrap = _AgNewCfgUfdTrap_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 58),
    _AgNewCfgUfdTrap_Type()
)
agNewCfgUfdTrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgUfdTrap.setStatus("current")


class _AgCurCfgReminders_Type(Integer32):
    """Custom type agCurCfgReminders based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_AgCurCfgReminders_Type.__name__ = "Integer32"
_AgCurCfgReminders_Object = MibScalar
agCurCfgReminders = _AgCurCfgReminders_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 59),
    _AgCurCfgReminders_Type()
)
agCurCfgReminders.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgReminders.setStatus("current")


class _AgNewCfgReminders_Type(Integer32):
    """Custom type agNewCfgReminders based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_AgNewCfgReminders_Type.__name__ = "Integer32"
_AgNewCfgReminders_Object = MibScalar
agNewCfgReminders = _AgNewCfgReminders_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 60),
    _AgNewCfgReminders_Type()
)
agNewCfgReminders.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgReminders.setStatus("current")


class _AgCurBootNxtCliMode_Type(Integer32):
    """Custom type agCurBootNxtCliMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("aoscli", 1),
          ("iscli", 2))
    )


_AgCurBootNxtCliMode_Type.__name__ = "Integer32"
_AgCurBootNxtCliMode_Object = MibScalar
agCurBootNxtCliMode = _AgCurBootNxtCliMode_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 66),
    _AgCurBootNxtCliMode_Type()
)
agCurBootNxtCliMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurBootNxtCliMode.setStatus("current")


class _AgNewBootNxtCliMode_Type(Integer32):
    """Custom type agNewBootNxtCliMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("aoscli", 1),
          ("iscli", 2))
    )


_AgNewBootNxtCliMode_Type.__name__ = "Integer32"
_AgNewBootNxtCliMode_Object = MibScalar
agNewBootNxtCliMode = _AgNewBootNxtCliMode_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 67),
    _AgNewBootNxtCliMode_Type()
)
agNewBootNxtCliMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewBootNxtCliMode.setStatus("current")


class _AgCurCfgDhcp_Type(Integer32):
    """Custom type agCurCfgDhcp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgDhcp_Type.__name__ = "Integer32"
_AgCurCfgDhcp_Object = MibScalar
agCurCfgDhcp = _AgCurCfgDhcp_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 70),
    _AgCurCfgDhcp_Type()
)
agCurCfgDhcp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgDhcp.setStatus("current")


class _AgNewCfgDhcp_Type(Integer32):
    """Custom type agNewCfgDhcp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgDhcp_Type.__name__ = "Integer32"
_AgNewCfgDhcp_Object = MibScalar
agNewCfgDhcp = _AgNewCfgDhcp_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 71),
    _AgNewCfgDhcp_Type()
)
agNewCfgDhcp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgDhcp.setStatus("current")


class _AgCurCfgHprompt_Type(Integer32):
    """Custom type agCurCfgHprompt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_AgCurCfgHprompt_Type.__name__ = "Integer32"
_AgCurCfgHprompt_Object = MibScalar
agCurCfgHprompt = _AgCurCfgHprompt_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 73),
    _AgCurCfgHprompt_Type()
)
agCurCfgHprompt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgHprompt.setStatus("current")


class _AgNewCfgHprompt_Type(Integer32):
    """Custom type agNewCfgHprompt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_AgNewCfgHprompt_Type.__name__ = "Integer32"
_AgNewCfgHprompt_Object = MibScalar
agNewCfgHprompt = _AgNewCfgHprompt_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 75),
    _AgNewCfgHprompt_Type()
)
agNewCfgHprompt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgHprompt.setStatus("current")
_AgCurCfgLoginNotice_Type = DisplayString
_AgCurCfgLoginNotice_Object = MibScalar
agCurCfgLoginNotice = _AgCurCfgLoginNotice_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 76),
    _AgCurCfgLoginNotice_Type()
)
agCurCfgLoginNotice.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgLoginNotice.setStatus("current")
_AgNewCfgLoginNotice_Type = DisplayString
_AgNewCfgLoginNotice_Object = MibScalar
agNewCfgLoginNotice = _AgNewCfgLoginNotice_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 77),
    _AgNewCfgLoginNotice_Type()
)
agNewCfgLoginNotice.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgLoginNotice.setStatus("current")


class _AgCurBootNxtCliModePrompt_Type(Integer32):
    """Custom type agCurBootNxtCliModePrompt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_AgCurBootNxtCliModePrompt_Type.__name__ = "Integer32"
_AgCurBootNxtCliModePrompt_Object = MibScalar
agCurBootNxtCliModePrompt = _AgCurBootNxtCliModePrompt_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 78),
    _AgCurBootNxtCliModePrompt_Type()
)
agCurBootNxtCliModePrompt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurBootNxtCliModePrompt.setStatus("current")


class _AgNewBootNxtCliModePrompt_Type(Integer32):
    """Custom type agNewBootNxtCliModePrompt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_AgNewBootNxtCliModePrompt_Type.__name__ = "Integer32"
_AgNewBootNxtCliModePrompt_Object = MibScalar
agNewBootNxtCliModePrompt = _AgNewBootNxtCliModePrompt_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 79),
    _AgNewBootNxtCliModePrompt_Type()
)
agNewBootNxtCliModePrompt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewBootNxtCliModePrompt.setStatus("current")


class _AgCurCfgOldDst_Type(Integer32):
    """Custom type agCurCfgOldDst based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgOldDst_Type.__name__ = "Integer32"
_AgCurCfgOldDst_Object = MibScalar
agCurCfgOldDst = _AgCurCfgOldDst_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 82),
    _AgCurCfgOldDst_Type()
)
agCurCfgOldDst.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgOldDst.setStatus("current")


class _AgNewCfgOldDst_Type(Integer32):
    """Custom type agNewCfgOldDst based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgOldDst_Type.__name__ = "Integer32"
_AgNewCfgOldDst_Object = MibScalar
agNewCfgOldDst = _AgNewCfgOldDst_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 83),
    _AgNewCfgOldDst_Type()
)
agNewCfgOldDst.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgOldDst.setStatus("current")


class _AgHavePanicDump_Type(Integer32):
    """Custom type agHavePanicDump based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("havePanic", 1),
          ("noHavePanic", 2))
    )


_AgHavePanicDump_Type.__name__ = "Integer32"
_AgHavePanicDump_Object = MibScalar
agHavePanicDump = _AgHavePanicDump_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 1, 84),
    _AgHavePanicDump_Type()
)
agHavePanicDump.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agHavePanicDump.setStatus("current")
_AgPortConfig_ObjectIdentity = ObjectIdentity
agPortConfig = _AgPortConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2)
)
_AgPortTableMaxEnt_Type = Integer32
_AgPortTableMaxEnt_Object = MibScalar
agPortTableMaxEnt = _AgPortTableMaxEnt_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 1),
    _AgPortTableMaxEnt_Type()
)
agPortTableMaxEnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortTableMaxEnt.setStatus("current")
_AgPortCurCfgTable_Object = MibTable
agPortCurCfgTable = _AgPortCurCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 2)
)
if mibBuilder.loadTexts:
    agPortCurCfgTable.setStatus("current")
_AgPortCurCfgTableEntry_Object = MibTableRow
agPortCurCfgTableEntry = _AgPortCurCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 2, 1)
)
agPortCurCfgTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "agPortCurCfgIndx"),
)
if mibBuilder.loadTexts:
    agPortCurCfgTableEntry.setStatus("current")
_AgPortCurCfgIndx_Type = Integer32
_AgPortCurCfgIndx_Object = MibTableColumn
agPortCurCfgIndx = _AgPortCurCfgIndx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 2, 1, 1),
    _AgPortCurCfgIndx_Type()
)
agPortCurCfgIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgIndx.setStatus("current")


class _AgPortCurCfgState_Type(Integer32):
    """Custom type agPortCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_AgPortCurCfgState_Type.__name__ = "Integer32"
_AgPortCurCfgState_Object = MibTableColumn
agPortCurCfgState = _AgPortCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 2, 1, 2),
    _AgPortCurCfgState_Type()
)
agPortCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgState.setStatus("current")


class _AgPortCurCfgVlanTag_Type(Integer32):
    """Custom type agPortCurCfgVlanTag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("tagged", 2),
          ("untagged", 3))
    )


_AgPortCurCfgVlanTag_Type.__name__ = "Integer32"
_AgPortCurCfgVlanTag_Object = MibTableColumn
agPortCurCfgVlanTag = _AgPortCurCfgVlanTag_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 2, 1, 3),
    _AgPortCurCfgVlanTag_Type()
)
agPortCurCfgVlanTag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgVlanTag.setStatus("current")


class _AgPortCurCfgRmon_Type(Integer32):
    """Custom type agPortCurCfgRmon based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("on", 2),
          ("off", 3))
    )


_AgPortCurCfgRmon_Type.__name__ = "Integer32"
_AgPortCurCfgRmon_Object = MibTableColumn
agPortCurCfgRmon = _AgPortCurCfgRmon_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 2, 1, 5),
    _AgPortCurCfgRmon_Type()
)
agPortCurCfgRmon.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgRmon.setStatus("current")


class _AgPortCurCfgPVID_Type(Integer32):
    """Custom type agPortCurCfgPVID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4095),
    )


_AgPortCurCfgPVID_Type.__name__ = "Integer32"
_AgPortCurCfgPVID_Object = MibTableColumn
agPortCurCfgPVID = _AgPortCurCfgPVID_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 2, 1, 6),
    _AgPortCurCfgPVID_Type()
)
agPortCurCfgPVID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgPVID.setStatus("current")


class _AgPortCurCfgGigEthAutoNeg_Type(Integer32):
    """Custom type agPortCurCfgGigEthAutoNeg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("on", 2),
          ("off", 3))
    )


_AgPortCurCfgGigEthAutoNeg_Type.__name__ = "Integer32"
_AgPortCurCfgGigEthAutoNeg_Object = MibTableColumn
agPortCurCfgGigEthAutoNeg = _AgPortCurCfgGigEthAutoNeg_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 2, 1, 11),
    _AgPortCurCfgGigEthAutoNeg_Type()
)
agPortCurCfgGigEthAutoNeg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgGigEthAutoNeg.setStatus("current")


class _AgPortCurCfgGigEthSpeed_Type(Integer32):
    """Custom type agPortCurCfgGigEthSpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("mbs10", 2),
          ("mbs100", 3),
          ("any", 4),
          ("mbs1000", 5),
          ("mbs10000", 6))
    )


_AgPortCurCfgGigEthSpeed_Type.__name__ = "Integer32"
_AgPortCurCfgGigEthSpeed_Object = MibTableColumn
agPortCurCfgGigEthSpeed = _AgPortCurCfgGigEthSpeed_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 2, 1, 12),
    _AgPortCurCfgGigEthSpeed_Type()
)
agPortCurCfgGigEthSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgGigEthSpeed.setStatus("current")


class _AgPortCurCfgGigEthMode_Type(Integer32):
    """Custom type agPortCurCfgGigEthMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("full-duplex", 2),
          ("half-duplex", 3),
          ("full-or-half-duplex", 4))
    )


_AgPortCurCfgGigEthMode_Type.__name__ = "Integer32"
_AgPortCurCfgGigEthMode_Object = MibTableColumn
agPortCurCfgGigEthMode = _AgPortCurCfgGigEthMode_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 2, 1, 13),
    _AgPortCurCfgGigEthMode_Type()
)
agPortCurCfgGigEthMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgGigEthMode.setStatus("current")


class _AgPortCurCfgGigEthFctl_Type(Integer32):
    """Custom type agPortCurCfgGigEthFctl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("transmit", 2),
          ("receive", 3),
          ("both", 4),
          ("none", 5))
    )


_AgPortCurCfgGigEthFctl_Type.__name__ = "Integer32"
_AgPortCurCfgGigEthFctl_Object = MibTableColumn
agPortCurCfgGigEthFctl = _AgPortCurCfgGigEthFctl_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 2, 1, 14),
    _AgPortCurCfgGigEthFctl_Type()
)
agPortCurCfgGigEthFctl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgGigEthFctl.setStatus("current")


class _AgPortCurCfgPortName_Type(DisplayString):
    """Custom type agPortCurCfgPortName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 65),
    )


_AgPortCurCfgPortName_Type.__name__ = "DisplayString"
_AgPortCurCfgPortName_Object = MibTableColumn
agPortCurCfgPortName = _AgPortCurCfgPortName_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 2, 1, 15),
    _AgPortCurCfgPortName_Type()
)
agPortCurCfgPortName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgPortName.setStatus("current")


class _AgPortCurCfgLinkTrap_Type(Integer32):
    """Custom type agPortCurCfgLinkTrap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgPortCurCfgLinkTrap_Type.__name__ = "Integer32"
_AgPortCurCfgLinkTrap_Object = MibTableColumn
agPortCurCfgLinkTrap = _AgPortCurCfgLinkTrap_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 2, 1, 18),
    _AgPortCurCfgLinkTrap_Type()
)
agPortCurCfgLinkTrap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgLinkTrap.setStatus("current")


class _AgPortCurCfgTagPVID_Type(Integer32):
    """Custom type agPortCurCfgTagPVID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("tagged", 2),
          ("untagged", 3))
    )


_AgPortCurCfgTagPVID_Type.__name__ = "Integer32"
_AgPortCurCfgTagPVID_Object = MibTableColumn
agPortCurCfgTagPVID = _AgPortCurCfgTagPVID_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 2, 1, 19),
    _AgPortCurCfgTagPVID_Type()
)
agPortCurCfgTagPVID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgTagPVID.setStatus("current")


class _AgPortCurCfgMulticastThreshold_Type(Integer32):
    """Custom type agPortCurCfgMulticastThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgPortCurCfgMulticastThreshold_Type.__name__ = "Integer32"
_AgPortCurCfgMulticastThreshold_Object = MibTableColumn
agPortCurCfgMulticastThreshold = _AgPortCurCfgMulticastThreshold_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 2, 1, 20),
    _AgPortCurCfgMulticastThreshold_Type()
)
agPortCurCfgMulticastThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgMulticastThreshold.setStatus("current")


class _AgPortCurCfgMulticastThresholdRate_Type(Integer32):
    """Custom type agPortCurCfgMulticastThresholdRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 262143),
    )


_AgPortCurCfgMulticastThresholdRate_Type.__name__ = "Integer32"
_AgPortCurCfgMulticastThresholdRate_Object = MibTableColumn
agPortCurCfgMulticastThresholdRate = _AgPortCurCfgMulticastThresholdRate_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 2, 1, 21),
    _AgPortCurCfgMulticastThresholdRate_Type()
)
agPortCurCfgMulticastThresholdRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgMulticastThresholdRate.setStatus("current")


class _AgPortCurCfgBroadcastThreshold_Type(Integer32):
    """Custom type agPortCurCfgBroadcastThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgPortCurCfgBroadcastThreshold_Type.__name__ = "Integer32"
_AgPortCurCfgBroadcastThreshold_Object = MibTableColumn
agPortCurCfgBroadcastThreshold = _AgPortCurCfgBroadcastThreshold_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 2, 1, 22),
    _AgPortCurCfgBroadcastThreshold_Type()
)
agPortCurCfgBroadcastThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgBroadcastThreshold.setStatus("current")


class _AgPortCurCfgBroadcastThresholdRate_Type(Integer32):
    """Custom type agPortCurCfgBroadcastThresholdRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 262143),
    )


_AgPortCurCfgBroadcastThresholdRate_Type.__name__ = "Integer32"
_AgPortCurCfgBroadcastThresholdRate_Object = MibTableColumn
agPortCurCfgBroadcastThresholdRate = _AgPortCurCfgBroadcastThresholdRate_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 2, 1, 23),
    _AgPortCurCfgBroadcastThresholdRate_Type()
)
agPortCurCfgBroadcastThresholdRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgBroadcastThresholdRate.setStatus("current")


class _AgPortCurCfgDLFThreshold_Type(Integer32):
    """Custom type agPortCurCfgDLFThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgPortCurCfgDLFThreshold_Type.__name__ = "Integer32"
_AgPortCurCfgDLFThreshold_Object = MibTableColumn
agPortCurCfgDLFThreshold = _AgPortCurCfgDLFThreshold_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 2, 1, 24),
    _AgPortCurCfgDLFThreshold_Type()
)
agPortCurCfgDLFThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgDLFThreshold.setStatus("current")


class _AgPortCurCfgDLFThresholdRate_Type(Integer32):
    """Custom type agPortCurCfgDLFThresholdRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 262143),
    )


_AgPortCurCfgDLFThresholdRate_Type.__name__ = "Integer32"
_AgPortCurCfgDLFThresholdRate_Object = MibTableColumn
agPortCurCfgDLFThresholdRate = _AgPortCurCfgDLFThresholdRate_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 2, 1, 25),
    _AgPortCurCfgDLFThresholdRate_Type()
)
agPortCurCfgDLFThresholdRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgDLFThresholdRate.setStatus("current")


class _AgPortCurCfgType_Type(DisplayString):
    """Custom type agPortCurCfgType based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 65),
    )


_AgPortCurCfgType_Type.__name__ = "DisplayString"
_AgPortCurCfgType_Object = MibTableColumn
agPortCurCfgType = _AgPortCurCfgType_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 2, 1, 28),
    _AgPortCurCfgType_Type()
)
agPortCurCfgType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortCurCfgType.setStatus("current")
_AgPortNewCfgTable_Object = MibTable
agPortNewCfgTable = _AgPortNewCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 3)
)
if mibBuilder.loadTexts:
    agPortNewCfgTable.setStatus("current")
_AgPortNewCfgTableEntry_Object = MibTableRow
agPortNewCfgTableEntry = _AgPortNewCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 3, 1)
)
agPortNewCfgTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "agPortNewCfgIndx"),
)
if mibBuilder.loadTexts:
    agPortNewCfgTableEntry.setStatus("current")
_AgPortNewCfgIndx_Type = Integer32
_AgPortNewCfgIndx_Object = MibTableColumn
agPortNewCfgIndx = _AgPortNewCfgIndx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 3, 1, 1),
    _AgPortNewCfgIndx_Type()
)
agPortNewCfgIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortNewCfgIndx.setStatus("current")


class _AgPortNewCfgState_Type(Integer32):
    """Custom type agPortNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_AgPortNewCfgState_Type.__name__ = "Integer32"
_AgPortNewCfgState_Object = MibTableColumn
agPortNewCfgState = _AgPortNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 3, 1, 2),
    _AgPortNewCfgState_Type()
)
agPortNewCfgState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgState.setStatus("current")


class _AgPortNewCfgVlanTag_Type(Integer32):
    """Custom type agPortNewCfgVlanTag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("tagged", 2),
          ("untagged", 3))
    )


_AgPortNewCfgVlanTag_Type.__name__ = "Integer32"
_AgPortNewCfgVlanTag_Object = MibTableColumn
agPortNewCfgVlanTag = _AgPortNewCfgVlanTag_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 3, 1, 3),
    _AgPortNewCfgVlanTag_Type()
)
agPortNewCfgVlanTag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgVlanTag.setStatus("current")


class _AgPortNewCfgRmon_Type(Integer32):
    """Custom type agPortNewCfgRmon based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("on", 2),
          ("off", 3))
    )


_AgPortNewCfgRmon_Type.__name__ = "Integer32"
_AgPortNewCfgRmon_Object = MibTableColumn
agPortNewCfgRmon = _AgPortNewCfgRmon_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 3, 1, 5),
    _AgPortNewCfgRmon_Type()
)
agPortNewCfgRmon.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgRmon.setStatus("current")


class _AgPortNewCfgPVID_Type(Integer32):
    """Custom type agPortNewCfgPVID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4095),
    )


_AgPortNewCfgPVID_Type.__name__ = "Integer32"
_AgPortNewCfgPVID_Object = MibTableColumn
agPortNewCfgPVID = _AgPortNewCfgPVID_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 3, 1, 6),
    _AgPortNewCfgPVID_Type()
)
agPortNewCfgPVID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgPVID.setStatus("current")


class _AgPortNewCfgGigEthAutoNeg_Type(Integer32):
    """Custom type agPortNewCfgGigEthAutoNeg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("on", 2),
          ("off", 3))
    )


_AgPortNewCfgGigEthAutoNeg_Type.__name__ = "Integer32"
_AgPortNewCfgGigEthAutoNeg_Object = MibTableColumn
agPortNewCfgGigEthAutoNeg = _AgPortNewCfgGigEthAutoNeg_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 3, 1, 11),
    _AgPortNewCfgGigEthAutoNeg_Type()
)
agPortNewCfgGigEthAutoNeg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgGigEthAutoNeg.setStatus("current")


class _AgPortNewCfgGigEthSpeed_Type(Integer32):
    """Custom type agPortNewCfgGigEthSpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("mbs10", 2),
          ("mbs100", 3),
          ("any", 4),
          ("mbs1000", 5),
          ("mbs10000", 6))
    )


_AgPortNewCfgGigEthSpeed_Type.__name__ = "Integer32"
_AgPortNewCfgGigEthSpeed_Object = MibTableColumn
agPortNewCfgGigEthSpeed = _AgPortNewCfgGigEthSpeed_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 3, 1, 12),
    _AgPortNewCfgGigEthSpeed_Type()
)
agPortNewCfgGigEthSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgGigEthSpeed.setStatus("current")


class _AgPortNewCfgGigEthMode_Type(Integer32):
    """Custom type agPortNewCfgGigEthMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("full-duplex", 2),
          ("half-duplex", 3),
          ("full-or-half-duplex", 4))
    )


_AgPortNewCfgGigEthMode_Type.__name__ = "Integer32"
_AgPortNewCfgGigEthMode_Object = MibTableColumn
agPortNewCfgGigEthMode = _AgPortNewCfgGigEthMode_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 3, 1, 13),
    _AgPortNewCfgGigEthMode_Type()
)
agPortNewCfgGigEthMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgGigEthMode.setStatus("current")


class _AgPortNewCfgGigEthFctl_Type(Integer32):
    """Custom type agPortNewCfgGigEthFctl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("transmit", 2),
          ("receive", 3),
          ("both", 4),
          ("none", 5))
    )


_AgPortNewCfgGigEthFctl_Type.__name__ = "Integer32"
_AgPortNewCfgGigEthFctl_Object = MibTableColumn
agPortNewCfgGigEthFctl = _AgPortNewCfgGigEthFctl_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 3, 1, 14),
    _AgPortNewCfgGigEthFctl_Type()
)
agPortNewCfgGigEthFctl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgGigEthFctl.setStatus("current")


class _AgPortNewCfgPortName_Type(DisplayString):
    """Custom type agPortNewCfgPortName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 65),
    )


_AgPortNewCfgPortName_Type.__name__ = "DisplayString"
_AgPortNewCfgPortName_Object = MibTableColumn
agPortNewCfgPortName = _AgPortNewCfgPortName_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 3, 1, 15),
    _AgPortNewCfgPortName_Type()
)
agPortNewCfgPortName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgPortName.setStatus("current")


class _AgPortNewCfgLinkTrap_Type(Integer32):
    """Custom type agPortNewCfgLinkTrap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgPortNewCfgLinkTrap_Type.__name__ = "Integer32"
_AgPortNewCfgLinkTrap_Object = MibTableColumn
agPortNewCfgLinkTrap = _AgPortNewCfgLinkTrap_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 3, 1, 18),
    _AgPortNewCfgLinkTrap_Type()
)
agPortNewCfgLinkTrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgLinkTrap.setStatus("current")


class _AgPortNewCfgTagPVID_Type(Integer32):
    """Custom type agPortNewCfgTagPVID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("tagged", 2),
          ("untagged", 3))
    )


_AgPortNewCfgTagPVID_Type.__name__ = "Integer32"
_AgPortNewCfgTagPVID_Object = MibTableColumn
agPortNewCfgTagPVID = _AgPortNewCfgTagPVID_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 3, 1, 19),
    _AgPortNewCfgTagPVID_Type()
)
agPortNewCfgTagPVID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgTagPVID.setStatus("current")


class _AgPortNewCfgMulticastThreshold_Type(Integer32):
    """Custom type agPortNewCfgMulticastThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgPortNewCfgMulticastThreshold_Type.__name__ = "Integer32"
_AgPortNewCfgMulticastThreshold_Object = MibTableColumn
agPortNewCfgMulticastThreshold = _AgPortNewCfgMulticastThreshold_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 3, 1, 20),
    _AgPortNewCfgMulticastThreshold_Type()
)
agPortNewCfgMulticastThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgMulticastThreshold.setStatus("current")


class _AgPortNewCfgMulticastThresholdRate_Type(Integer32):
    """Custom type agPortNewCfgMulticastThresholdRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 262143),
    )


_AgPortNewCfgMulticastThresholdRate_Type.__name__ = "Integer32"
_AgPortNewCfgMulticastThresholdRate_Object = MibTableColumn
agPortNewCfgMulticastThresholdRate = _AgPortNewCfgMulticastThresholdRate_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 3, 1, 21),
    _AgPortNewCfgMulticastThresholdRate_Type()
)
agPortNewCfgMulticastThresholdRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgMulticastThresholdRate.setStatus("current")


class _AgPortNewCfgBroadcastThreshold_Type(Integer32):
    """Custom type agPortNewCfgBroadcastThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgPortNewCfgBroadcastThreshold_Type.__name__ = "Integer32"
_AgPortNewCfgBroadcastThreshold_Object = MibTableColumn
agPortNewCfgBroadcastThreshold = _AgPortNewCfgBroadcastThreshold_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 3, 1, 22),
    _AgPortNewCfgBroadcastThreshold_Type()
)
agPortNewCfgBroadcastThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgBroadcastThreshold.setStatus("current")


class _AgPortNewCfgBroadcastThresholdRate_Type(Integer32):
    """Custom type agPortNewCfgBroadcastThresholdRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 262143),
    )


_AgPortNewCfgBroadcastThresholdRate_Type.__name__ = "Integer32"
_AgPortNewCfgBroadcastThresholdRate_Object = MibTableColumn
agPortNewCfgBroadcastThresholdRate = _AgPortNewCfgBroadcastThresholdRate_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 3, 1, 23),
    _AgPortNewCfgBroadcastThresholdRate_Type()
)
agPortNewCfgBroadcastThresholdRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgBroadcastThresholdRate.setStatus("current")


class _AgPortNewCfgDLFThreshold_Type(Integer32):
    """Custom type agPortNewCfgDLFThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgPortNewCfgDLFThreshold_Type.__name__ = "Integer32"
_AgPortNewCfgDLFThreshold_Object = MibTableColumn
agPortNewCfgDLFThreshold = _AgPortNewCfgDLFThreshold_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 3, 1, 24),
    _AgPortNewCfgDLFThreshold_Type()
)
agPortNewCfgDLFThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgDLFThreshold.setStatus("current")


class _AgPortNewCfgDLFThresholdRate_Type(Integer32):
    """Custom type agPortNewCfgDLFThresholdRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 262143),
    )


_AgPortNewCfgDLFThresholdRate_Type.__name__ = "Integer32"
_AgPortNewCfgDLFThresholdRate_Object = MibTableColumn
agPortNewCfgDLFThresholdRate = _AgPortNewCfgDLFThresholdRate_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 3, 1, 25),
    _AgPortNewCfgDLFThresholdRate_Type()
)
agPortNewCfgDLFThresholdRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agPortNewCfgDLFThresholdRate.setStatus("current")


class _AgPortNewCfgType_Type(DisplayString):
    """Custom type agPortNewCfgType based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 65),
    )


_AgPortNewCfgType_Type.__name__ = "DisplayString"
_AgPortNewCfgType_Object = MibTableColumn
agPortNewCfgType = _AgPortNewCfgType_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 2, 3, 1, 28),
    _AgPortNewCfgType_Type()
)
agPortNewCfgType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agPortNewCfgType.setStatus("current")
_AgRadiusConfig_ObjectIdentity = ObjectIdentity
agRadiusConfig = _AgRadiusConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 3)
)
_RadCurCfgPrimaryIpAddr_Type = IpAddress
_RadCurCfgPrimaryIpAddr_Object = MibScalar
radCurCfgPrimaryIpAddr = _RadCurCfgPrimaryIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 3, 1),
    _RadCurCfgPrimaryIpAddr_Type()
)
radCurCfgPrimaryIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radCurCfgPrimaryIpAddr.setStatus("current")
_RadNewCfgPrimaryIpAddr_Type = IpAddress
_RadNewCfgPrimaryIpAddr_Object = MibScalar
radNewCfgPrimaryIpAddr = _RadNewCfgPrimaryIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 3, 2),
    _RadNewCfgPrimaryIpAddr_Type()
)
radNewCfgPrimaryIpAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radNewCfgPrimaryIpAddr.setStatus("current")
_RadCurCfgSecondaryIpAddr_Type = IpAddress
_RadCurCfgSecondaryIpAddr_Object = MibScalar
radCurCfgSecondaryIpAddr = _RadCurCfgSecondaryIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 3, 3),
    _RadCurCfgSecondaryIpAddr_Type()
)
radCurCfgSecondaryIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radCurCfgSecondaryIpAddr.setStatus("current")
_RadNewCfgSecondaryIpAddr_Type = IpAddress
_RadNewCfgSecondaryIpAddr_Object = MibScalar
radNewCfgSecondaryIpAddr = _RadNewCfgSecondaryIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 3, 4),
    _RadNewCfgSecondaryIpAddr_Type()
)
radNewCfgSecondaryIpAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radNewCfgSecondaryIpAddr.setStatus("current")


class _RadCurCfgPort_Type(Integer32):
    """Custom type radCurCfgPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1500, 3000),
    )


_RadCurCfgPort_Type.__name__ = "Integer32"
_RadCurCfgPort_Object = MibScalar
radCurCfgPort = _RadCurCfgPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 3, 5),
    _RadCurCfgPort_Type()
)
radCurCfgPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radCurCfgPort.setStatus("current")


class _RadNewCfgPort_Type(Integer32):
    """Custom type radNewCfgPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1500, 3000),
    )


_RadNewCfgPort_Type.__name__ = "Integer32"
_RadNewCfgPort_Object = MibScalar
radNewCfgPort = _RadNewCfgPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 3, 6),
    _RadNewCfgPort_Type()
)
radNewCfgPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radNewCfgPort.setStatus("current")


class _RadCurCfgTimeout_Type(Integer32):
    """Custom type radCurCfgTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RadCurCfgTimeout_Type.__name__ = "Integer32"
_RadCurCfgTimeout_Object = MibScalar
radCurCfgTimeout = _RadCurCfgTimeout_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 3, 7),
    _RadCurCfgTimeout_Type()
)
radCurCfgTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radCurCfgTimeout.setStatus("current")


class _RadNewCfgTimeout_Type(Integer32):
    """Custom type radNewCfgTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RadNewCfgTimeout_Type.__name__ = "Integer32"
_RadNewCfgTimeout_Object = MibScalar
radNewCfgTimeout = _RadNewCfgTimeout_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 3, 8),
    _RadNewCfgTimeout_Type()
)
radNewCfgTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radNewCfgTimeout.setStatus("current")


class _RadCurCfgRetries_Type(Integer32):
    """Custom type radCurCfgRetries based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3),
    )


_RadCurCfgRetries_Type.__name__ = "Integer32"
_RadCurCfgRetries_Object = MibScalar
radCurCfgRetries = _RadCurCfgRetries_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 3, 9),
    _RadCurCfgRetries_Type()
)
radCurCfgRetries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radCurCfgRetries.setStatus("current")


class _RadNewCfgRetries_Type(Integer32):
    """Custom type radNewCfgRetries based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3),
    )


_RadNewCfgRetries_Type.__name__ = "Integer32"
_RadNewCfgRetries_Object = MibScalar
radNewCfgRetries = _RadNewCfgRetries_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 3, 10),
    _RadNewCfgRetries_Type()
)
radNewCfgRetries.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radNewCfgRetries.setStatus("current")


class _RadCurCfgState_Type(Integer32):
    """Custom type radCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_RadCurCfgState_Type.__name__ = "Integer32"
_RadCurCfgState_Object = MibScalar
radCurCfgState = _RadCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 3, 11),
    _RadCurCfgState_Type()
)
radCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radCurCfgState.setStatus("current")


class _RadNewCfgState_Type(Integer32):
    """Custom type radNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_RadNewCfgState_Type.__name__ = "Integer32"
_RadNewCfgState_Object = MibScalar
radNewCfgState = _RadNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 3, 12),
    _RadNewCfgState_Type()
)
radNewCfgState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radNewCfgState.setStatus("current")


class _RadCurCfgAuthenString_Type(DisplayString):
    """Custom type radCurCfgAuthenString based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_RadCurCfgAuthenString_Type.__name__ = "DisplayString"
_RadCurCfgAuthenString_Object = MibScalar
radCurCfgAuthenString = _RadCurCfgAuthenString_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 3, 13),
    _RadCurCfgAuthenString_Type()
)
radCurCfgAuthenString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radCurCfgAuthenString.setStatus("current")


class _RadNewCfgAuthenString_Type(DisplayString):
    """Custom type radNewCfgAuthenString based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_RadNewCfgAuthenString_Type.__name__ = "DisplayString"
_RadNewCfgAuthenString_Object = MibScalar
radNewCfgAuthenString = _RadNewCfgAuthenString_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 3, 14),
    _RadNewCfgAuthenString_Type()
)
radNewCfgAuthenString.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radNewCfgAuthenString.setStatus("current")


class _RadCurCfgBackdoor_Type(Integer32):
    """Custom type radCurCfgBackdoor based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RadCurCfgBackdoor_Type.__name__ = "Integer32"
_RadCurCfgBackdoor_Object = MibScalar
radCurCfgBackdoor = _RadCurCfgBackdoor_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 3, 15),
    _RadCurCfgBackdoor_Type()
)
radCurCfgBackdoor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radCurCfgBackdoor.setStatus("current")


class _RadNewCfgBackdoor_Type(Integer32):
    """Custom type radNewCfgBackdoor based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RadNewCfgBackdoor_Type.__name__ = "Integer32"
_RadNewCfgBackdoor_Object = MibScalar
radNewCfgBackdoor = _RadNewCfgBackdoor_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 3, 16),
    _RadNewCfgBackdoor_Type()
)
radNewCfgBackdoor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radNewCfgBackdoor.setStatus("current")


class _RadCurCfgAuthenSecondString_Type(DisplayString):
    """Custom type radCurCfgAuthenSecondString based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_RadCurCfgAuthenSecondString_Type.__name__ = "DisplayString"
_RadCurCfgAuthenSecondString_Object = MibScalar
radCurCfgAuthenSecondString = _RadCurCfgAuthenSecondString_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 3, 17),
    _RadCurCfgAuthenSecondString_Type()
)
radCurCfgAuthenSecondString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radCurCfgAuthenSecondString.setStatus("current")


class _RadNewCfgAuthenSecondString_Type(DisplayString):
    """Custom type radNewCfgAuthenSecondString based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_RadNewCfgAuthenSecondString_Type.__name__ = "DisplayString"
_RadNewCfgAuthenSecondString_Object = MibScalar
radNewCfgAuthenSecondString = _RadNewCfgAuthenSecondString_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 3, 18),
    _RadNewCfgAuthenSecondString_Type()
)
radNewCfgAuthenSecondString.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radNewCfgAuthenSecondString.setStatus("current")


class _RadCurCfgSecBd_Type(Integer32):
    """Custom type radCurCfgSecBd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RadCurCfgSecBd_Type.__name__ = "Integer32"
_RadCurCfgSecBd_Object = MibScalar
radCurCfgSecBd = _RadCurCfgSecBd_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 3, 19),
    _RadCurCfgSecBd_Type()
)
radCurCfgSecBd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radCurCfgSecBd.setStatus("current")


class _RadNewCfgSecBd_Type(Integer32):
    """Custom type radNewCfgSecBd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RadNewCfgSecBd_Type.__name__ = "Integer32"
_RadNewCfgSecBd_Object = MibScalar
radNewCfgSecBd = _RadNewCfgSecBd_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 3, 20),
    _RadNewCfgSecBd_Type()
)
radNewCfgSecBd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radNewCfgSecBd.setStatus("current")
_AgNTP_ObjectIdentity = ObjectIdentity
agNTP = _AgNTP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 4)
)
_AgCurCfgNTPServer_Type = IpAddress
_AgCurCfgNTPServer_Object = MibScalar
agCurCfgNTPServer = _AgCurCfgNTPServer_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 4, 1),
    _AgCurCfgNTPServer_Type()
)
agCurCfgNTPServer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgNTPServer.setStatus("current")
_AgNewCfgNTPServer_Type = IpAddress
_AgNewCfgNTPServer_Object = MibScalar
agNewCfgNTPServer = _AgNewCfgNTPServer_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 4, 2),
    _AgNewCfgNTPServer_Type()
)
agNewCfgNTPServer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgNTPServer.setStatus("current")


class _AgCurCfgNTPResyncInterval_Type(Integer32):
    """Custom type agCurCfgNTPResyncInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 44640),
    )


_AgCurCfgNTPResyncInterval_Type.__name__ = "Integer32"
_AgCurCfgNTPResyncInterval_Object = MibScalar
agCurCfgNTPResyncInterval = _AgCurCfgNTPResyncInterval_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 4, 3),
    _AgCurCfgNTPResyncInterval_Type()
)
agCurCfgNTPResyncInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgNTPResyncInterval.setStatus("current")


class _AgNewCfgNTPResyncInterval_Type(Integer32):
    """Custom type agNewCfgNTPResyncInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 44640),
    )


_AgNewCfgNTPResyncInterval_Type.__name__ = "Integer32"
_AgNewCfgNTPResyncInterval_Object = MibScalar
agNewCfgNTPResyncInterval = _AgNewCfgNTPResyncInterval_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 4, 4),
    _AgNewCfgNTPResyncInterval_Type()
)
agNewCfgNTPResyncInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgNTPResyncInterval.setStatus("current")


class _AgCurCfgNTPService_Type(Integer32):
    """Custom type agCurCfgNTPService based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgNTPService_Type.__name__ = "Integer32"
_AgCurCfgNTPService_Object = MibScalar
agCurCfgNTPService = _AgCurCfgNTPService_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 4, 9),
    _AgCurCfgNTPService_Type()
)
agCurCfgNTPService.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgNTPService.setStatus("current")


class _AgNewCfgNTPService_Type(Integer32):
    """Custom type agNewCfgNTPService based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgNTPService_Type.__name__ = "Integer32"
_AgNewCfgNTPService_Object = MibScalar
agNewCfgNTPService = _AgNewCfgNTPService_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 4, 10),
    _AgNewCfgNTPService_Type()
)
agNewCfgNTPService.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgNTPService.setStatus("current")
_AgCurCfgNTPSecServer_Type = IpAddress
_AgCurCfgNTPSecServer_Object = MibScalar
agCurCfgNTPSecServer = _AgCurCfgNTPSecServer_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 4, 11),
    _AgCurCfgNTPSecServer_Type()
)
agCurCfgNTPSecServer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgNTPSecServer.setStatus("current")
_AgNewCfgNTPSecServer_Type = IpAddress
_AgNewCfgNTPSecServer_Object = MibScalar
agNewCfgNTPSecServer = _AgNewCfgNTPSecServer_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 4, 12),
    _AgNewCfgNTPSecServer_Type()
)
agNewCfgNTPSecServer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgNTPSecServer.setStatus("current")
_AgSyslog_ObjectIdentity = ObjectIdentity
agSyslog = _AgSyslog_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5)
)
_AgCurCfgSyslogHost_Type = IpAddress
_AgCurCfgSyslogHost_Object = MibScalar
agCurCfgSyslogHost = _AgCurCfgSyslogHost_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 1),
    _AgCurCfgSyslogHost_Type()
)
agCurCfgSyslogHost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogHost.setStatus("current")
_AgNewCfgSyslogHost_Type = IpAddress
_AgNewCfgSyslogHost_Object = MibScalar
agNewCfgSyslogHost = _AgNewCfgSyslogHost_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 2),
    _AgNewCfgSyslogHost_Type()
)
agNewCfgSyslogHost.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogHost.setStatus("current")
_AgCurCfgSyslog2Host_Type = IpAddress
_AgCurCfgSyslog2Host_Object = MibScalar
agCurCfgSyslog2Host = _AgCurCfgSyslog2Host_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 3),
    _AgCurCfgSyslog2Host_Type()
)
agCurCfgSyslog2Host.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslog2Host.setStatus("current")
_AgNewCfgSyslog2Host_Type = IpAddress
_AgNewCfgSyslog2Host_Object = MibScalar
agNewCfgSyslog2Host = _AgNewCfgSyslog2Host_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 4),
    _AgNewCfgSyslog2Host_Type()
)
agNewCfgSyslog2Host.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslog2Host.setStatus("current")


class _AgCurCfgSyslogFac_Type(Integer32):
    """Custom type agCurCfgSyslogFac based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("local0", 1),
          ("local1", 2),
          ("local2", 3),
          ("local3", 4),
          ("local4", 5),
          ("local5", 6),
          ("local6", 7),
          ("local7", 8))
    )


_AgCurCfgSyslogFac_Type.__name__ = "Integer32"
_AgCurCfgSyslogFac_Object = MibScalar
agCurCfgSyslogFac = _AgCurCfgSyslogFac_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 5),
    _AgCurCfgSyslogFac_Type()
)
agCurCfgSyslogFac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogFac.setStatus("current")


class _AgNewCfgSyslogFac_Type(Integer32):
    """Custom type agNewCfgSyslogFac based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("local0", 1),
          ("local1", 2),
          ("local2", 3),
          ("local3", 4),
          ("local4", 5),
          ("local5", 6),
          ("local6", 7),
          ("local7", 8))
    )


_AgNewCfgSyslogFac_Type.__name__ = "Integer32"
_AgNewCfgSyslogFac_Object = MibScalar
agNewCfgSyslogFac = _AgNewCfgSyslogFac_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 6),
    _AgNewCfgSyslogFac_Type()
)
agNewCfgSyslogFac.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogFac.setStatus("current")


class _AgCurCfgSyslog2Fac_Type(Integer32):
    """Custom type agCurCfgSyslog2Fac based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("local0", 1),
          ("local1", 2),
          ("local2", 3),
          ("local3", 4),
          ("local4", 5),
          ("local5", 6),
          ("local6", 7),
          ("local7", 8))
    )


_AgCurCfgSyslog2Fac_Type.__name__ = "Integer32"
_AgCurCfgSyslog2Fac_Object = MibScalar
agCurCfgSyslog2Fac = _AgCurCfgSyslog2Fac_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 7),
    _AgCurCfgSyslog2Fac_Type()
)
agCurCfgSyslog2Fac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslog2Fac.setStatus("current")


class _AgNewCfgSyslog2Fac_Type(Integer32):
    """Custom type agNewCfgSyslog2Fac based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("local0", 1),
          ("local1", 2),
          ("local2", 3),
          ("local3", 4),
          ("local4", 5),
          ("local5", 6),
          ("local6", 7),
          ("local7", 8))
    )


_AgNewCfgSyslog2Fac_Type.__name__ = "Integer32"
_AgNewCfgSyslog2Fac_Object = MibScalar
agNewCfgSyslog2Fac = _AgNewCfgSyslog2Fac_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 8),
    _AgNewCfgSyslog2Fac_Type()
)
agNewCfgSyslog2Fac.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslog2Fac.setStatus("current")


class _AgClrSyslogMsgs_Type(Integer32):
    """Custom type agClrSyslogMsgs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("reset", 2))
    )


_AgClrSyslogMsgs_Type.__name__ = "Integer32"
_AgClrSyslogMsgs_Object = MibScalar
agClrSyslogMsgs = _AgClrSyslogMsgs_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 9),
    _AgClrSyslogMsgs_Type()
)
agClrSyslogMsgs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agClrSyslogMsgs.setStatus("current")
_AgSyslogMsgTableMaxSize_Type = Integer32
_AgSyslogMsgTableMaxSize_Object = MibScalar
agSyslogMsgTableMaxSize = _AgSyslogMsgTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 10),
    _AgSyslogMsgTableMaxSize_Type()
)
agSyslogMsgTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agSyslogMsgTableMaxSize.setStatus("current")
_AgSyslogMsgTable_Object = MibTable
agSyslogMsgTable = _AgSyslogMsgTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 11)
)
if mibBuilder.loadTexts:
    agSyslogMsgTable.setStatus("current")
_AgSyslogMsgTableEntry_Object = MibTableRow
agSyslogMsgTableEntry = _AgSyslogMsgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 11, 1)
)
agSyslogMsgTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "agSyslogMsgIndex"),
)
if mibBuilder.loadTexts:
    agSyslogMsgTableEntry.setStatus("current")
_AgSyslogMsgIndex_Type = Integer32
_AgSyslogMsgIndex_Object = MibTableColumn
agSyslogMsgIndex = _AgSyslogMsgIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 11, 1, 1),
    _AgSyslogMsgIndex_Type()
)
agSyslogMsgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agSyslogMsgIndex.setStatus("current")


class _AgSyslogMessage_Type(DisplayString):
    """Custom type agSyslogMessage based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_AgSyslogMessage_Type.__name__ = "DisplayString"
_AgSyslogMessage_Object = MibTableColumn
agSyslogMessage = _AgSyslogMessage_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 11, 1, 2),
    _AgSyslogMessage_Type()
)
agSyslogMessage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agSyslogMessage.setStatus("current")
_AgLog_ObjectIdentity = ObjectIdentity
agLog = _AgLog_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 12)
)


class _AgNewCfgSyslogTrapConsole_Type(Integer32):
    """Custom type agNewCfgSyslogTrapConsole based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapConsole_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapConsole_Object = MibScalar
agNewCfgSyslogTrapConsole = _AgNewCfgSyslogTrapConsole_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 12, 1),
    _AgNewCfgSyslogTrapConsole_Type()
)
agNewCfgSyslogTrapConsole.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapConsole.setStatus("current")


class _AgCurCfgSyslogTrapConsole_Type(Integer32):
    """Custom type agCurCfgSyslogTrapConsole based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapConsole_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapConsole_Object = MibScalar
agCurCfgSyslogTrapConsole = _AgCurCfgSyslogTrapConsole_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 12, 2),
    _AgCurCfgSyslogTrapConsole_Type()
)
agCurCfgSyslogTrapConsole.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapConsole.setStatus("current")


class _AgNewCfgSyslogTrapSystem_Type(Integer32):
    """Custom type agNewCfgSyslogTrapSystem based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapSystem_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapSystem_Object = MibScalar
agNewCfgSyslogTrapSystem = _AgNewCfgSyslogTrapSystem_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 12, 3),
    _AgNewCfgSyslogTrapSystem_Type()
)
agNewCfgSyslogTrapSystem.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapSystem.setStatus("current")


class _AgCurCfgSyslogTrapSystem_Type(Integer32):
    """Custom type agCurCfgSyslogTrapSystem based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapSystem_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapSystem_Object = MibScalar
agCurCfgSyslogTrapSystem = _AgCurCfgSyslogTrapSystem_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 12, 4),
    _AgCurCfgSyslogTrapSystem_Type()
)
agCurCfgSyslogTrapSystem.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapSystem.setStatus("current")


class _AgNewCfgSyslogTrapMgmt_Type(Integer32):
    """Custom type agNewCfgSyslogTrapMgmt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapMgmt_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapMgmt_Object = MibScalar
agNewCfgSyslogTrapMgmt = _AgNewCfgSyslogTrapMgmt_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 12, 5),
    _AgNewCfgSyslogTrapMgmt_Type()
)
agNewCfgSyslogTrapMgmt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapMgmt.setStatus("current")


class _AgCurCfgSyslogTrapMgmt_Type(Integer32):
    """Custom type agCurCfgSyslogTrapMgmt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapMgmt_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapMgmt_Object = MibScalar
agCurCfgSyslogTrapMgmt = _AgCurCfgSyslogTrapMgmt_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 12, 6),
    _AgCurCfgSyslogTrapMgmt_Type()
)
agCurCfgSyslogTrapMgmt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapMgmt.setStatus("current")


class _AgNewCfgSyslogTrapCli_Type(Integer32):
    """Custom type agNewCfgSyslogTrapCli based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapCli_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapCli_Object = MibScalar
agNewCfgSyslogTrapCli = _AgNewCfgSyslogTrapCli_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 12, 7),
    _AgNewCfgSyslogTrapCli_Type()
)
agNewCfgSyslogTrapCli.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapCli.setStatus("current")


class _AgCurCfgSyslogTrapCli_Type(Integer32):
    """Custom type agCurCfgSyslogTrapCli based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapCli_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapCli_Object = MibScalar
agCurCfgSyslogTrapCli = _AgCurCfgSyslogTrapCli_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 12, 8),
    _AgCurCfgSyslogTrapCli_Type()
)
agCurCfgSyslogTrapCli.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapCli.setStatus("current")


class _AgNewCfgSyslogTrapStg_Type(Integer32):
    """Custom type agNewCfgSyslogTrapStg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapStg_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapStg_Object = MibScalar
agNewCfgSyslogTrapStg = _AgNewCfgSyslogTrapStg_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 12, 9),
    _AgNewCfgSyslogTrapStg_Type()
)
agNewCfgSyslogTrapStg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapStg.setStatus("current")


class _AgCurCfgSyslogTrapStg_Type(Integer32):
    """Custom type agCurCfgSyslogTrapStg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapStg_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapStg_Object = MibScalar
agCurCfgSyslogTrapStg = _AgCurCfgSyslogTrapStg_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 12, 10),
    _AgCurCfgSyslogTrapStg_Type()
)
agCurCfgSyslogTrapStg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapStg.setStatus("current")


class _AgNewCfgSyslogTrapVlan_Type(Integer32):
    """Custom type agNewCfgSyslogTrapVlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapVlan_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapVlan_Object = MibScalar
agNewCfgSyslogTrapVlan = _AgNewCfgSyslogTrapVlan_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 12, 11),
    _AgNewCfgSyslogTrapVlan_Type()
)
agNewCfgSyslogTrapVlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapVlan.setStatus("current")


class _AgCurCfgSyslogTrapVlan_Type(Integer32):
    """Custom type agCurCfgSyslogTrapVlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapVlan_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapVlan_Object = MibScalar
agCurCfgSyslogTrapVlan = _AgCurCfgSyslogTrapVlan_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 12, 12),
    _AgCurCfgSyslogTrapVlan_Type()
)
agCurCfgSyslogTrapVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapVlan.setStatus("current")


class _AgNewCfgSyslogTrapSsh_Type(Integer32):
    """Custom type agNewCfgSyslogTrapSsh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapSsh_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapSsh_Object = MibScalar
agNewCfgSyslogTrapSsh = _AgNewCfgSyslogTrapSsh_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 12, 19),
    _AgNewCfgSyslogTrapSsh_Type()
)
agNewCfgSyslogTrapSsh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapSsh.setStatus("current")


class _AgCurCfgSyslogTrapSsh_Type(Integer32):
    """Custom type agCurCfgSyslogTrapSsh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapSsh_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapSsh_Object = MibScalar
agCurCfgSyslogTrapSsh = _AgCurCfgSyslogTrapSsh_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 12, 20),
    _AgCurCfgSyslogTrapSsh_Type()
)
agCurCfgSyslogTrapSsh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapSsh.setStatus("current")


class _AgNewCfgSyslogTrapVrrp_Type(Integer32):
    """Custom type agNewCfgSyslogTrapVrrp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapVrrp_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapVrrp_Object = MibScalar
agNewCfgSyslogTrapVrrp = _AgNewCfgSyslogTrapVrrp_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 12, 21),
    _AgNewCfgSyslogTrapVrrp_Type()
)
agNewCfgSyslogTrapVrrp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapVrrp.setStatus("current")


class _AgCurCfgSyslogTrapVrrp_Type(Integer32):
    """Custom type agCurCfgSyslogTrapVrrp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapVrrp_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapVrrp_Object = MibScalar
agCurCfgSyslogTrapVrrp = _AgCurCfgSyslogTrapVrrp_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 12, 22),
    _AgCurCfgSyslogTrapVrrp_Type()
)
agCurCfgSyslogTrapVrrp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapVrrp.setStatus("current")


class _AgNewCfgSyslogTrapNtp_Type(Integer32):
    """Custom type agNewCfgSyslogTrapNtp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapNtp_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapNtp_Object = MibScalar
agNewCfgSyslogTrapNtp = _AgNewCfgSyslogTrapNtp_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 12, 25),
    _AgNewCfgSyslogTrapNtp_Type()
)
agNewCfgSyslogTrapNtp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapNtp.setStatus("current")


class _AgCurCfgSyslogTrapNtp_Type(Integer32):
    """Custom type agCurCfgSyslogTrapNtp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapNtp_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapNtp_Object = MibScalar
agCurCfgSyslogTrapNtp = _AgCurCfgSyslogTrapNtp_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 12, 26),
    _AgCurCfgSyslogTrapNtp_Type()
)
agCurCfgSyslogTrapNtp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapNtp.setStatus("current")


class _AgNewCfgSyslogTrapIp_Type(Integer32):
    """Custom type agNewCfgSyslogTrapIp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapIp_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapIp_Object = MibScalar
agNewCfgSyslogTrapIp = _AgNewCfgSyslogTrapIp_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 12, 31),
    _AgNewCfgSyslogTrapIp_Type()
)
agNewCfgSyslogTrapIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapIp.setStatus("current")


class _AgCurCfgSyslogTrapIp_Type(Integer32):
    """Custom type agCurCfgSyslogTrapIp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapIp_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapIp_Object = MibScalar
agCurCfgSyslogTrapIp = _AgCurCfgSyslogTrapIp_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 12, 32),
    _AgCurCfgSyslogTrapIp_Type()
)
agCurCfgSyslogTrapIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapIp.setStatus("current")


class _AgNewCfgSyslogTrapWeb_Type(Integer32):
    """Custom type agNewCfgSyslogTrapWeb based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapWeb_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapWeb_Object = MibScalar
agNewCfgSyslogTrapWeb = _AgNewCfgSyslogTrapWeb_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 12, 35),
    _AgNewCfgSyslogTrapWeb_Type()
)
agNewCfgSyslogTrapWeb.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapWeb.setStatus("current")


class _AgCurCfgSyslogTrapWeb_Type(Integer32):
    """Custom type agCurCfgSyslogTrapWeb based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapWeb_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapWeb_Object = MibScalar
agCurCfgSyslogTrapWeb = _AgCurCfgSyslogTrapWeb_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 12, 36),
    _AgCurCfgSyslogTrapWeb_Type()
)
agCurCfgSyslogTrapWeb.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapWeb.setStatus("current")


class _AgNewCfgSyslogTrapOspf_Type(Integer32):
    """Custom type agNewCfgSyslogTrapOspf based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapOspf_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapOspf_Object = MibScalar
agNewCfgSyslogTrapOspf = _AgNewCfgSyslogTrapOspf_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 12, 41),
    _AgNewCfgSyslogTrapOspf_Type()
)
agNewCfgSyslogTrapOspf.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapOspf.setStatus("current")


class _AgCurCfgSyslogTrapOspf_Type(Integer32):
    """Custom type agCurCfgSyslogTrapOspf based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapOspf_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapOspf_Object = MibScalar
agCurCfgSyslogTrapOspf = _AgCurCfgSyslogTrapOspf_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 12, 42),
    _AgCurCfgSyslogTrapOspf_Type()
)
agCurCfgSyslogTrapOspf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapOspf.setStatus("current")


class _AgNewCfgSyslogTrapRmon_Type(Integer32):
    """Custom type agNewCfgSyslogTrapRmon based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapRmon_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapRmon_Object = MibScalar
agNewCfgSyslogTrapRmon = _AgNewCfgSyslogTrapRmon_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 12, 45),
    _AgNewCfgSyslogTrapRmon_Type()
)
agNewCfgSyslogTrapRmon.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapRmon.setStatus("current")


class _AgCurCfgSyslogTrapRmon_Type(Integer32):
    """Custom type agCurCfgSyslogTrapRmon based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapRmon_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapRmon_Object = MibScalar
agCurCfgSyslogTrapRmon = _AgCurCfgSyslogTrapRmon_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 12, 46),
    _AgCurCfgSyslogTrapRmon_Type()
)
agCurCfgSyslogTrapRmon.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapRmon.setStatus("current")


class _AgNewCfgSyslogTrapUfd_Type(Integer32):
    """Custom type agNewCfgSyslogTrapUfd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapUfd_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapUfd_Object = MibScalar
agNewCfgSyslogTrapUfd = _AgNewCfgSyslogTrapUfd_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 12, 47),
    _AgNewCfgSyslogTrapUfd_Type()
)
agNewCfgSyslogTrapUfd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapUfd.setStatus("current")


class _AgCurCfgSyslogTrapUfd_Type(Integer32):
    """Custom type agCurCfgSyslogTrapUfd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapUfd_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapUfd_Object = MibScalar
agCurCfgSyslogTrapUfd = _AgCurCfgSyslogTrapUfd_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 12, 48),
    _AgCurCfgSyslogTrapUfd_Type()
)
agCurCfgSyslogTrapUfd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapUfd.setStatus("current")


class _AgNewCfgSyslogTrapCfg_Type(Integer32):
    """Custom type agNewCfgSyslogTrapCfg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapCfg_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapCfg_Object = MibScalar
agNewCfgSyslogTrapCfg = _AgNewCfgSyslogTrapCfg_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 12, 49),
    _AgNewCfgSyslogTrapCfg_Type()
)
agNewCfgSyslogTrapCfg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapCfg.setStatus("current")


class _AgCurCfgSyslogTrapCfg_Type(Integer32):
    """Custom type agCurCfgSyslogTrapCfg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapCfg_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapCfg_Object = MibScalar
agCurCfgSyslogTrapCfg = _AgCurCfgSyslogTrapCfg_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 12, 50),
    _AgCurCfgSyslogTrapCfg_Type()
)
agCurCfgSyslogTrapCfg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapCfg.setStatus("current")


class _AgNewCfgSyslogTrap8021x_Type(Integer32):
    """Custom type agNewCfgSyslogTrap8021x based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrap8021x_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrap8021x_Object = MibScalar
agNewCfgSyslogTrap8021x = _AgNewCfgSyslogTrap8021x_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 12, 51),
    _AgNewCfgSyslogTrap8021x_Type()
)
agNewCfgSyslogTrap8021x.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrap8021x.setStatus("current")


class _AgCurCfgSyslogTrap8021x_Type(Integer32):
    """Custom type agCurCfgSyslogTrap8021x based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrap8021x_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrap8021x_Object = MibScalar
agCurCfgSyslogTrap8021x = _AgCurCfgSyslogTrap8021x_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 12, 52),
    _AgCurCfgSyslogTrap8021x_Type()
)
agCurCfgSyslogTrap8021x.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrap8021x.setStatus("current")


class _AgNewCfgSyslogTrapAll_Type(Integer32):
    """Custom type agNewCfgSyslogTrapAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgNewCfgSyslogTrapAll_Type.__name__ = "Integer32"
_AgNewCfgSyslogTrapAll_Object = MibScalar
agNewCfgSyslogTrapAll = _AgNewCfgSyslogTrapAll_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 12, 55),
    _AgNewCfgSyslogTrapAll_Type()
)
agNewCfgSyslogTrapAll.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogTrapAll.setStatus("current")


class _AgCurCfgSyslogTrapAll_Type(Integer32):
    """Custom type agCurCfgSyslogTrapAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_AgCurCfgSyslogTrapAll_Type.__name__ = "Integer32"
_AgCurCfgSyslogTrapAll_Object = MibScalar
agCurCfgSyslogTrapAll = _AgCurCfgSyslogTrapAll_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 12, 56),
    _AgCurCfgSyslogTrapAll_Type()
)
agCurCfgSyslogTrapAll.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogTrapAll.setStatus("current")


class _AgCurCfgSyslogSev_Type(Integer32):
    """Custom type agCurCfgSyslogSev based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("emerg0", 1),
          ("alert1", 2),
          ("crit2", 3),
          ("err3", 4),
          ("warning4", 5),
          ("notice5", 6),
          ("info6", 7),
          ("debug7", 8))
    )


_AgCurCfgSyslogSev_Type.__name__ = "Integer32"
_AgCurCfgSyslogSev_Object = MibScalar
agCurCfgSyslogSev = _AgCurCfgSyslogSev_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 13),
    _AgCurCfgSyslogSev_Type()
)
agCurCfgSyslogSev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslogSev.setStatus("current")


class _AgNewCfgSyslogSev_Type(Integer32):
    """Custom type agNewCfgSyslogSev based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("emerg0", 1),
          ("alert1", 2),
          ("crit2", 3),
          ("err3", 4),
          ("warning4", 5),
          ("notice5", 6),
          ("info6", 7),
          ("debug7", 8))
    )


_AgNewCfgSyslogSev_Type.__name__ = "Integer32"
_AgNewCfgSyslogSev_Object = MibScalar
agNewCfgSyslogSev = _AgNewCfgSyslogSev_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 14),
    _AgNewCfgSyslogSev_Type()
)
agNewCfgSyslogSev.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslogSev.setStatus("current")


class _AgCurCfgSyslog2Sev_Type(Integer32):
    """Custom type agCurCfgSyslog2Sev based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("emerg0", 1),
          ("alert1", 2),
          ("crit2", 3),
          ("err3", 4),
          ("warning4", 5),
          ("notice5", 6),
          ("info6", 7),
          ("debug7", 8))
    )


_AgCurCfgSyslog2Sev_Type.__name__ = "Integer32"
_AgCurCfgSyslog2Sev_Object = MibScalar
agCurCfgSyslog2Sev = _AgCurCfgSyslog2Sev_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 15),
    _AgCurCfgSyslog2Sev_Type()
)
agCurCfgSyslog2Sev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgSyslog2Sev.setStatus("current")


class _AgNewCfgSyslog2Sev_Type(Integer32):
    """Custom type agNewCfgSyslog2Sev based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("emerg0", 1),
          ("alert1", 2),
          ("crit2", 3),
          ("err3", 4),
          ("warning4", 5),
          ("notice5", 6),
          ("info6", 7),
          ("debug7", 8))
    )


_AgNewCfgSyslog2Sev_Type.__name__ = "Integer32"
_AgNewCfgSyslog2Sev_Object = MibScalar
agNewCfgSyslog2Sev = _AgNewCfgSyslog2Sev_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 5, 16),
    _AgNewCfgSyslog2Sev_Type()
)
agNewCfgSyslog2Sev.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agNewCfgSyslog2Sev.setStatus("current")
_AgTransfer_ObjectIdentity = ObjectIdentity
agTransfer = _AgTransfer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 7)
)


class _AgTransferServer_Type(DisplayString):
    """Custom type agTransferServer based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_AgTransferServer_Type.__name__ = "DisplayString"
_AgTransferServer_Object = MibScalar
agTransferServer = _AgTransferServer_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 7, 1),
    _AgTransferServer_Type()
)
agTransferServer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agTransferServer.setStatus("current")


class _AgTransferImage_Type(Integer32):
    """Custom type agTransferImage based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("image1", 2),
          ("image2", 3),
          ("boot", 4))
    )


_AgTransferImage_Type.__name__ = "Integer32"
_AgTransferImage_Object = MibScalar
agTransferImage = _AgTransferImage_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 7, 2),
    _AgTransferImage_Type()
)
agTransferImage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agTransferImage.setStatus("current")


class _AgTransferImageFileName_Type(DisplayString):
    """Custom type agTransferImageFileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_AgTransferImageFileName_Type.__name__ = "DisplayString"
_AgTransferImageFileName_Object = MibScalar
agTransferImageFileName = _AgTransferImageFileName_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 7, 3),
    _AgTransferImageFileName_Type()
)
agTransferImageFileName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agTransferImageFileName.setStatus("current")


class _AgTransferCfgFileName_Type(DisplayString):
    """Custom type agTransferCfgFileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_AgTransferCfgFileName_Type.__name__ = "DisplayString"
_AgTransferCfgFileName_Object = MibScalar
agTransferCfgFileName = _AgTransferCfgFileName_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 7, 4),
    _AgTransferCfgFileName_Type()
)
agTransferCfgFileName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agTransferCfgFileName.setStatus("current")


class _AgTransferDumpFileName_Type(DisplayString):
    """Custom type agTransferDumpFileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_AgTransferDumpFileName_Type.__name__ = "DisplayString"
_AgTransferDumpFileName_Object = MibScalar
agTransferDumpFileName = _AgTransferDumpFileName_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 7, 5),
    _AgTransferDumpFileName_Type()
)
agTransferDumpFileName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agTransferDumpFileName.setStatus("current")


class _AgTransferAction_Type(Integer32):
    """Custom type agTransferAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("img-get", 2),
          ("cfg-get", 3),
          ("cfg-put", 4),
          ("dump-put", 5),
          ("img-put", 7),
          ("tsdump-put", 8))
    )


_AgTransferAction_Type.__name__ = "Integer32"
_AgTransferAction_Object = MibScalar
agTransferAction = _AgTransferAction_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 7, 6),
    _AgTransferAction_Type()
)
agTransferAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agTransferAction.setStatus("current")


class _AgTransferLastActionStatus_Type(DisplayString):
    """Custom type agTransferLastActionStatus based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_AgTransferLastActionStatus_Type.__name__ = "DisplayString"
_AgTransferLastActionStatus_Object = MibScalar
agTransferLastActionStatus = _AgTransferLastActionStatus_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 7, 7),
    _AgTransferLastActionStatus_Type()
)
agTransferLastActionStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agTransferLastActionStatus.setStatus("current")


class _AgTransferUserName_Type(DisplayString):
    """Custom type agTransferUserName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_AgTransferUserName_Type.__name__ = "DisplayString"
_AgTransferUserName_Object = MibScalar
agTransferUserName = _AgTransferUserName_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 7, 9),
    _AgTransferUserName_Type()
)
agTransferUserName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agTransferUserName.setStatus("current")


class _AgTransferPassword_Type(DisplayString):
    """Custom type agTransferPassword based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_AgTransferPassword_Type.__name__ = "DisplayString"
_AgTransferPassword_Object = MibScalar
agTransferPassword = _AgTransferPassword_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 7, 10),
    _AgTransferPassword_Type()
)
agTransferPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agTransferPassword.setStatus("current")


class _AgTransferTSDumpFileName_Type(DisplayString):
    """Custom type agTransferTSDumpFileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_AgTransferTSDumpFileName_Type.__name__ = "DisplayString"
_AgTransferTSDumpFileName_Object = MibScalar
agTransferTSDumpFileName = _AgTransferTSDumpFileName_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 7, 11),
    _AgTransferTSDumpFileName_Type()
)
agTransferTSDumpFileName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agTransferTSDumpFileName.setStatus("current")


class _AgTransferLastConfigurationActionStatus_Type(Integer32):
    """Custom type agTransferLastConfigurationActionStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("successfully", 1),
          ("failed", 2))
    )


_AgTransferLastConfigurationActionStatus_Type.__name__ = "Integer32"
_AgTransferLastConfigurationActionStatus_Object = MibScalar
agTransferLastConfigurationActionStatus = _AgTransferLastConfigurationActionStatus_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 7, 14),
    _AgTransferLastConfigurationActionStatus_Type()
)
agTransferLastConfigurationActionStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agTransferLastConfigurationActionStatus.setStatus("current")
_AgApply_ObjectIdentity = ObjectIdentity
agApply = _AgApply_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 8)
)


class _AgApplyPending_Type(Integer32):
    """Custom type agApplyPending based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("applyNeeded", 2),
          ("noApplyNeeded", 3))
    )


_AgApplyPending_Type.__name__ = "Integer32"
_AgApplyPending_Object = MibScalar
agApplyPending = _AgApplyPending_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 8, 1),
    _AgApplyPending_Type()
)
agApplyPending.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agApplyPending.setStatus("current")


class _AgApplyConfig_Type(Integer32):
    """Custom type agApplyConfig based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("apply", 1),
          ("idle", 2),
          ("inprogress", 3),
          ("complete", 4),
          ("failed", 5))
    )


_AgApplyConfig_Type.__name__ = "Integer32"
_AgApplyConfig_Object = MibScalar
agApplyConfig = _AgApplyConfig_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 8, 2),
    _AgApplyConfig_Type()
)
agApplyConfig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agApplyConfig.setStatus("current")
_AgApplyTableSize_Type = Integer32
_AgApplyTableSize_Object = MibScalar
agApplyTableSize = _AgApplyTableSize_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 8, 4),
    _AgApplyTableSize_Type()
)
agApplyTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agApplyTableSize.setStatus("current")
_AgApplyTable_Object = MibTable
agApplyTable = _AgApplyTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 8, 5)
)
if mibBuilder.loadTexts:
    agApplyTable.setStatus("current")
_AgApplyTableEntry_Object = MibTableRow
agApplyTableEntry = _AgApplyTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 8, 5, 1)
)
agApplyTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "agApplyIndex"),
)
if mibBuilder.loadTexts:
    agApplyTableEntry.setStatus("current")
_AgApplyIndex_Type = Integer32
_AgApplyIndex_Object = MibTableColumn
agApplyIndex = _AgApplyIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 8, 5, 1, 1),
    _AgApplyIndex_Type()
)
agApplyIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agApplyIndex.setStatus("current")
_AgApplyString_Type = OctetString
_AgApplyString_Object = MibTableColumn
agApplyString = _AgApplyString_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 8, 5, 1, 2),
    _AgApplyString_Type()
)
agApplyString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agApplyString.setStatus("current")
_AgTacacsConfig_ObjectIdentity = ObjectIdentity
agTacacsConfig = _AgTacacsConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 10)
)
_TacCurCfgPrimaryIpAddr_Type = IpAddress
_TacCurCfgPrimaryIpAddr_Object = MibScalar
tacCurCfgPrimaryIpAddr = _TacCurCfgPrimaryIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 10, 1),
    _TacCurCfgPrimaryIpAddr_Type()
)
tacCurCfgPrimaryIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tacCurCfgPrimaryIpAddr.setStatus("current")
_TacNewCfgPrimaryIpAddr_Type = IpAddress
_TacNewCfgPrimaryIpAddr_Object = MibScalar
tacNewCfgPrimaryIpAddr = _TacNewCfgPrimaryIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 10, 2),
    _TacNewCfgPrimaryIpAddr_Type()
)
tacNewCfgPrimaryIpAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacNewCfgPrimaryIpAddr.setStatus("current")
_TacCurCfgSecondaryIpAddr_Type = IpAddress
_TacCurCfgSecondaryIpAddr_Object = MibScalar
tacCurCfgSecondaryIpAddr = _TacCurCfgSecondaryIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 10, 3),
    _TacCurCfgSecondaryIpAddr_Type()
)
tacCurCfgSecondaryIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tacCurCfgSecondaryIpAddr.setStatus("current")
_TacNewCfgSecondaryIpAddr_Type = IpAddress
_TacNewCfgSecondaryIpAddr_Object = MibScalar
tacNewCfgSecondaryIpAddr = _TacNewCfgSecondaryIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 10, 4),
    _TacNewCfgSecondaryIpAddr_Type()
)
tacNewCfgSecondaryIpAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacNewCfgSecondaryIpAddr.setStatus("current")


class _TacCurCfgPort_Type(Integer32):
    """Custom type tacCurCfgPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65000),
    )


_TacCurCfgPort_Type.__name__ = "Integer32"
_TacCurCfgPort_Object = MibScalar
tacCurCfgPort = _TacCurCfgPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 10, 5),
    _TacCurCfgPort_Type()
)
tacCurCfgPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tacCurCfgPort.setStatus("current")


class _TacNewCfgPort_Type(Integer32):
    """Custom type tacNewCfgPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65000),
    )


_TacNewCfgPort_Type.__name__ = "Integer32"
_TacNewCfgPort_Object = MibScalar
tacNewCfgPort = _TacNewCfgPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 10, 6),
    _TacNewCfgPort_Type()
)
tacNewCfgPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacNewCfgPort.setStatus("current")


class _TacCurCfgTimeout_Type(Integer32):
    """Custom type tacCurCfgTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 15),
    )


_TacCurCfgTimeout_Type.__name__ = "Integer32"
_TacCurCfgTimeout_Object = MibScalar
tacCurCfgTimeout = _TacCurCfgTimeout_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 10, 7),
    _TacCurCfgTimeout_Type()
)
tacCurCfgTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tacCurCfgTimeout.setStatus("current")


class _TacNewCfgTimeout_Type(Integer32):
    """Custom type tacNewCfgTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 15),
    )


_TacNewCfgTimeout_Type.__name__ = "Integer32"
_TacNewCfgTimeout_Object = MibScalar
tacNewCfgTimeout = _TacNewCfgTimeout_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 10, 8),
    _TacNewCfgTimeout_Type()
)
tacNewCfgTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacNewCfgTimeout.setStatus("current")


class _TacCurCfgRetries_Type(Integer32):
    """Custom type tacCurCfgRetries based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3),
    )


_TacCurCfgRetries_Type.__name__ = "Integer32"
_TacCurCfgRetries_Object = MibScalar
tacCurCfgRetries = _TacCurCfgRetries_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 10, 9),
    _TacCurCfgRetries_Type()
)
tacCurCfgRetries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tacCurCfgRetries.setStatus("current")


class _TacNewCfgRetries_Type(Integer32):
    """Custom type tacNewCfgRetries based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3),
    )


_TacNewCfgRetries_Type.__name__ = "Integer32"
_TacNewCfgRetries_Object = MibScalar
tacNewCfgRetries = _TacNewCfgRetries_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 10, 10),
    _TacNewCfgRetries_Type()
)
tacNewCfgRetries.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacNewCfgRetries.setStatus("current")


class _TacCurCfgState_Type(Integer32):
    """Custom type tacCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_TacCurCfgState_Type.__name__ = "Integer32"
_TacCurCfgState_Object = MibScalar
tacCurCfgState = _TacCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 10, 11),
    _TacCurCfgState_Type()
)
tacCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tacCurCfgState.setStatus("current")


class _TacNewCfgState_Type(Integer32):
    """Custom type tacNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_TacNewCfgState_Type.__name__ = "Integer32"
_TacNewCfgState_Object = MibScalar
tacNewCfgState = _TacNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 10, 12),
    _TacNewCfgState_Type()
)
tacNewCfgState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacNewCfgState.setStatus("current")


class _TacCurCfgAuthenString_Type(DisplayString):
    """Custom type tacCurCfgAuthenString based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_TacCurCfgAuthenString_Type.__name__ = "DisplayString"
_TacCurCfgAuthenString_Object = MibScalar
tacCurCfgAuthenString = _TacCurCfgAuthenString_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 10, 13),
    _TacCurCfgAuthenString_Type()
)
tacCurCfgAuthenString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tacCurCfgAuthenString.setStatus("current")


class _TacNewCfgAuthenString_Type(DisplayString):
    """Custom type tacNewCfgAuthenString based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_TacNewCfgAuthenString_Type.__name__ = "DisplayString"
_TacNewCfgAuthenString_Object = MibScalar
tacNewCfgAuthenString = _TacNewCfgAuthenString_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 10, 14),
    _TacNewCfgAuthenString_Type()
)
tacNewCfgAuthenString.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacNewCfgAuthenString.setStatus("current")


class _TacCurCfgBackdoor_Type(Integer32):
    """Custom type tacCurCfgBackdoor based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_TacCurCfgBackdoor_Type.__name__ = "Integer32"
_TacCurCfgBackdoor_Object = MibScalar
tacCurCfgBackdoor = _TacCurCfgBackdoor_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 10, 15),
    _TacCurCfgBackdoor_Type()
)
tacCurCfgBackdoor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tacCurCfgBackdoor.setStatus("current")


class _TacNewCfgBackdoor_Type(Integer32):
    """Custom type tacNewCfgBackdoor based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_TacNewCfgBackdoor_Type.__name__ = "Integer32"
_TacNewCfgBackdoor_Object = MibScalar
tacNewCfgBackdoor = _TacNewCfgBackdoor_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 10, 16),
    _TacNewCfgBackdoor_Type()
)
tacNewCfgBackdoor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacNewCfgBackdoor.setStatus("current")


class _TacCurCfgAuthenSecondString_Type(DisplayString):
    """Custom type tacCurCfgAuthenSecondString based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_TacCurCfgAuthenSecondString_Type.__name__ = "DisplayString"
_TacCurCfgAuthenSecondString_Object = MibScalar
tacCurCfgAuthenSecondString = _TacCurCfgAuthenSecondString_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 10, 17),
    _TacCurCfgAuthenSecondString_Type()
)
tacCurCfgAuthenSecondString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tacCurCfgAuthenSecondString.setStatus("current")


class _TacNewCfgAuthenSecondString_Type(DisplayString):
    """Custom type tacNewCfgAuthenSecondString based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_TacNewCfgAuthenSecondString_Type.__name__ = "DisplayString"
_TacNewCfgAuthenSecondString_Object = MibScalar
tacNewCfgAuthenSecondString = _TacNewCfgAuthenSecondString_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 10, 18),
    _TacNewCfgAuthenSecondString_Type()
)
tacNewCfgAuthenSecondString.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacNewCfgAuthenSecondString.setStatus("current")


class _TacCurCfgCmdAuthor_Type(Integer32):
    """Custom type tacCurCfgCmdAuthor based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_TacCurCfgCmdAuthor_Type.__name__ = "Integer32"
_TacCurCfgCmdAuthor_Object = MibScalar
tacCurCfgCmdAuthor = _TacCurCfgCmdAuthor_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 10, 19),
    _TacCurCfgCmdAuthor_Type()
)
tacCurCfgCmdAuthor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tacCurCfgCmdAuthor.setStatus("current")


class _TacNewCfgCmdAuthor_Type(Integer32):
    """Custom type tacNewCfgCmdAuthor based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_TacNewCfgCmdAuthor_Type.__name__ = "Integer32"
_TacNewCfgCmdAuthor_Object = MibScalar
tacNewCfgCmdAuthor = _TacNewCfgCmdAuthor_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 10, 20),
    _TacNewCfgCmdAuthor_Type()
)
tacNewCfgCmdAuthor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacNewCfgCmdAuthor.setStatus("current")


class _TacCurCfgCmdLogging_Type(Integer32):
    """Custom type tacCurCfgCmdLogging based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_TacCurCfgCmdLogging_Type.__name__ = "Integer32"
_TacCurCfgCmdLogging_Object = MibScalar
tacCurCfgCmdLogging = _TacCurCfgCmdLogging_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 10, 21),
    _TacCurCfgCmdLogging_Type()
)
tacCurCfgCmdLogging.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tacCurCfgCmdLogging.setStatus("current")


class _TacNewCfgCmdLogging_Type(Integer32):
    """Custom type tacNewCfgCmdLogging based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_TacNewCfgCmdLogging_Type.__name__ = "Integer32"
_TacNewCfgCmdLogging_Object = MibScalar
tacNewCfgCmdLogging = _TacNewCfgCmdLogging_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 10, 22),
    _TacNewCfgCmdLogging_Type()
)
tacNewCfgCmdLogging.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacNewCfgCmdLogging.setStatus("current")


class _TacCurCfgSecBd_Type(Integer32):
    """Custom type tacCurCfgSecBd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_TacCurCfgSecBd_Type.__name__ = "Integer32"
_TacCurCfgSecBd_Object = MibScalar
tacCurCfgSecBd = _TacCurCfgSecBd_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 10, 23),
    _TacCurCfgSecBd_Type()
)
tacCurCfgSecBd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tacCurCfgSecBd.setStatus("current")


class _TacNewCfgSecBd_Type(Integer32):
    """Custom type tacNewCfgSecBd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_TacNewCfgSecBd_Type.__name__ = "Integer32"
_TacNewCfgSecBd_Object = MibScalar
tacNewCfgSecBd = _TacNewCfgSecBd_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 10, 24),
    _TacNewCfgSecBd_Type()
)
tacNewCfgSecBd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacNewCfgSecBd.setStatus("current")


class _TacCurCfgCmap_Type(Integer32):
    """Custom type tacCurCfgCmap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_TacCurCfgCmap_Type.__name__ = "Integer32"
_TacCurCfgCmap_Object = MibScalar
tacCurCfgCmap = _TacCurCfgCmap_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 10, 25),
    _TacCurCfgCmap_Type()
)
tacCurCfgCmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tacCurCfgCmap.setStatus("current")


class _TacNewCfgCmap_Type(Integer32):
    """Custom type tacNewCfgCmap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_TacNewCfgCmap_Type.__name__ = "Integer32"
_TacNewCfgCmap_Object = MibScalar
tacNewCfgCmap = _TacNewCfgCmap_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 10, 26),
    _TacNewCfgCmap_Type()
)
tacNewCfgCmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tacNewCfgCmap.setStatus("current")
_AgTacacsUserMapCurCfgTable_Object = MibTable
agTacacsUserMapCurCfgTable = _AgTacacsUserMapCurCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 10, 31)
)
if mibBuilder.loadTexts:
    agTacacsUserMapCurCfgTable.setStatus("current")
_AgTacacsUserMapCurCfgTableEntry_Object = MibTableRow
agTacacsUserMapCurCfgTableEntry = _AgTacacsUserMapCurCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 10, 31, 1)
)
agTacacsUserMapCurCfgTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "agTacacsUserMapCurCfgUId"),
)
if mibBuilder.loadTexts:
    agTacacsUserMapCurCfgTableEntry.setStatus("current")
_AgTacacsUserMapCurCfgUId_Type = Integer32
_AgTacacsUserMapCurCfgUId_Object = MibTableColumn
agTacacsUserMapCurCfgUId = _AgTacacsUserMapCurCfgUId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 10, 31, 1, 1),
    _AgTacacsUserMapCurCfgUId_Type()
)
agTacacsUserMapCurCfgUId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agTacacsUserMapCurCfgUId.setStatus("current")


class _AgTacacsUserMapCurCfgMapping_Type(Integer32):
    """Custom type agTacacsUserMapCurCfgMapping based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("user", 1),
          ("oper", 2),
          ("admin", 3))
    )


_AgTacacsUserMapCurCfgMapping_Type.__name__ = "Integer32"
_AgTacacsUserMapCurCfgMapping_Object = MibTableColumn
agTacacsUserMapCurCfgMapping = _AgTacacsUserMapCurCfgMapping_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 10, 31, 1, 2),
    _AgTacacsUserMapCurCfgMapping_Type()
)
agTacacsUserMapCurCfgMapping.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agTacacsUserMapCurCfgMapping.setStatus("current")
_AgTacacsUserMapNewCfgTable_Object = MibTable
agTacacsUserMapNewCfgTable = _AgTacacsUserMapNewCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 10, 32)
)
if mibBuilder.loadTexts:
    agTacacsUserMapNewCfgTable.setStatus("current")
_AgTacacsUserMapNewCfgTableEntry_Object = MibTableRow
agTacacsUserMapNewCfgTableEntry = _AgTacacsUserMapNewCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 10, 32, 1)
)
agTacacsUserMapNewCfgTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "agTacacsUserMapNewCfgUId"),
)
if mibBuilder.loadTexts:
    agTacacsUserMapNewCfgTableEntry.setStatus("current")
_AgTacacsUserMapNewCfgUId_Type = Integer32
_AgTacacsUserMapNewCfgUId_Object = MibTableColumn
agTacacsUserMapNewCfgUId = _AgTacacsUserMapNewCfgUId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 10, 32, 1, 1),
    _AgTacacsUserMapNewCfgUId_Type()
)
agTacacsUserMapNewCfgUId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agTacacsUserMapNewCfgUId.setStatus("current")


class _AgTacacsUserMapNewCfgMapping_Type(Integer32):
    """Custom type agTacacsUserMapNewCfgMapping based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("user", 1),
          ("oper", 2),
          ("admin", 3))
    )


_AgTacacsUserMapNewCfgMapping_Type.__name__ = "Integer32"
_AgTacacsUserMapNewCfgMapping_Object = MibTableColumn
agTacacsUserMapNewCfgMapping = _AgTacacsUserMapNewCfgMapping_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 10, 32, 1, 2),
    _AgTacacsUserMapNewCfgMapping_Type()
)
agTacacsUserMapNewCfgMapping.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agTacacsUserMapNewCfgMapping.setStatus("current")
_AgMgmtNetConfig_ObjectIdentity = ObjectIdentity
agMgmtNetConfig = _AgMgmtNetConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 11)
)
_AgMgmtNetTableMaxSize_Type = Integer32
_AgMgmtNetTableMaxSize_Object = MibScalar
agMgmtNetTableMaxSize = _AgMgmtNetTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 11, 1),
    _AgMgmtNetTableMaxSize_Type()
)
agMgmtNetTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agMgmtNetTableMaxSize.setStatus("current")
_AgCurCfgMgmtNetTable_Object = MibTable
agCurCfgMgmtNetTable = _AgCurCfgMgmtNetTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 11, 2)
)
if mibBuilder.loadTexts:
    agCurCfgMgmtNetTable.setStatus("current")
_AgCurCfgMgmtNetEntry_Object = MibTableRow
agCurCfgMgmtNetEntry = _AgCurCfgMgmtNetEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 11, 2, 1)
)
agCurCfgMgmtNetEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "agCurCfgMgmtNetIndex"),
)
if mibBuilder.loadTexts:
    agCurCfgMgmtNetEntry.setStatus("current")
_AgCurCfgMgmtNetIndex_Type = Integer32
_AgCurCfgMgmtNetIndex_Object = MibTableColumn
agCurCfgMgmtNetIndex = _AgCurCfgMgmtNetIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 11, 2, 1, 1),
    _AgCurCfgMgmtNetIndex_Type()
)
agCurCfgMgmtNetIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgMgmtNetIndex.setStatus("current")
_AgCurCfgMgmtNetSubnet_Type = IpAddress
_AgCurCfgMgmtNetSubnet_Object = MibTableColumn
agCurCfgMgmtNetSubnet = _AgCurCfgMgmtNetSubnet_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 11, 2, 1, 2),
    _AgCurCfgMgmtNetSubnet_Type()
)
agCurCfgMgmtNetSubnet.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgMgmtNetSubnet.setStatus("current")
_AgCurCfgMgmtNetMask_Type = IpAddress
_AgCurCfgMgmtNetMask_Object = MibTableColumn
agCurCfgMgmtNetMask = _AgCurCfgMgmtNetMask_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 11, 2, 1, 3),
    _AgCurCfgMgmtNetMask_Type()
)
agCurCfgMgmtNetMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCurCfgMgmtNetMask.setStatus("current")
_AgNewCfgMgmtNetTable_Object = MibTable
agNewCfgMgmtNetTable = _AgNewCfgMgmtNetTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 11, 3)
)
if mibBuilder.loadTexts:
    agNewCfgMgmtNetTable.setStatus("current")
_AgNewCfgMgmtNetEntry_Object = MibTableRow
agNewCfgMgmtNetEntry = _AgNewCfgMgmtNetEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 11, 3, 1)
)
agNewCfgMgmtNetEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "agNewCfgMgmtNetIndex"),
)
if mibBuilder.loadTexts:
    agNewCfgMgmtNetEntry.setStatus("current")
_AgNewCfgMgmtNetIndex_Type = Integer32
_AgNewCfgMgmtNetIndex_Object = MibTableColumn
agNewCfgMgmtNetIndex = _AgNewCfgMgmtNetIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 11, 3, 1, 1),
    _AgNewCfgMgmtNetIndex_Type()
)
agNewCfgMgmtNetIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agNewCfgMgmtNetIndex.setStatus("current")
_AgNewCfgMgmtNetSubnet_Type = IpAddress
_AgNewCfgMgmtNetSubnet_Object = MibTableColumn
agNewCfgMgmtNetSubnet = _AgNewCfgMgmtNetSubnet_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 11, 3, 1, 2),
    _AgNewCfgMgmtNetSubnet_Type()
)
agNewCfgMgmtNetSubnet.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agNewCfgMgmtNetSubnet.setStatus("current")
_AgNewCfgMgmtNetMask_Type = IpAddress
_AgNewCfgMgmtNetMask_Object = MibTableColumn
agNewCfgMgmtNetMask = _AgNewCfgMgmtNetMask_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 11, 3, 1, 3),
    _AgNewCfgMgmtNetMask_Type()
)
agNewCfgMgmtNetMask.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agNewCfgMgmtNetMask.setStatus("current")


class _AgNewCfgMgmtNetDelete_Type(Integer32):
    """Custom type agNewCfgMgmtNetDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_AgNewCfgMgmtNetDelete_Type.__name__ = "Integer32"
_AgNewCfgMgmtNetDelete_Object = MibTableColumn
agNewCfgMgmtNetDelete = _AgNewCfgMgmtNetDelete_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 11, 3, 1, 4),
    _AgNewCfgMgmtNetDelete_Type()
)
agNewCfgMgmtNetDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agNewCfgMgmtNetDelete.setStatus("current")


class _AgMgmtNetClear_Type(Integer32):
    """Custom type agMgmtNetClear based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("clear", 2))
    )


_AgMgmtNetClear_Type.__name__ = "Integer32"
_AgMgmtNetClear_Object = MibScalar
agMgmtNetClear = _AgMgmtNetClear_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 11, 4),
    _AgMgmtNetClear_Type()
)
agMgmtNetClear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agMgmtNetClear.setStatus("current")
_AgAccess_ObjectIdentity = ObjectIdentity
agAccess = _AgAccess_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 12)
)
_AgAccessUserMaxUserID_Type = Integer32
_AgAccessUserMaxUserID_Object = MibScalar
agAccessUserMaxUserID = _AgAccessUserMaxUserID_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 12, 1),
    _AgAccessUserMaxUserID_Type()
)
agAccessUserMaxUserID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agAccessUserMaxUserID.setStatus("current")
_AgAccessUserCurCfgTable_Object = MibTable
agAccessUserCurCfgTable = _AgAccessUserCurCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 12, 2)
)
if mibBuilder.loadTexts:
    agAccessUserCurCfgTable.setStatus("current")
_AgAccessUserCurCfgTableEntry_Object = MibTableRow
agAccessUserCurCfgTableEntry = _AgAccessUserCurCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 12, 2, 1)
)
agAccessUserCurCfgTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "agAccessUserCurCfgUId"),
)
if mibBuilder.loadTexts:
    agAccessUserCurCfgTableEntry.setStatus("current")
_AgAccessUserCurCfgUId_Type = Integer32
_AgAccessUserCurCfgUId_Object = MibTableColumn
agAccessUserCurCfgUId = _AgAccessUserCurCfgUId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 12, 2, 1, 1),
    _AgAccessUserCurCfgUId_Type()
)
agAccessUserCurCfgUId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agAccessUserCurCfgUId.setStatus("current")


class _AgAccessUserCurCos_Type(Integer32):
    """Custom type agAccessUserCurCos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              3,
              6)
        )
    )
    namedValues = NamedValues(
        *(("user", 0),
          ("oper", 3),
          ("admin", 6))
    )


_AgAccessUserCurCos_Type.__name__ = "Integer32"
_AgAccessUserCurCos_Object = MibTableColumn
agAccessUserCurCos = _AgAccessUserCurCos_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 12, 2, 1, 2),
    _AgAccessUserCurCos_Type()
)
agAccessUserCurCos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agAccessUserCurCos.setStatus("current")


class _AgAccessUserCurCfgName_Type(DisplayString):
    """Custom type agAccessUserCurCfgName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_AgAccessUserCurCfgName_Type.__name__ = "DisplayString"
_AgAccessUserCurCfgName_Object = MibTableColumn
agAccessUserCurCfgName = _AgAccessUserCurCfgName_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 12, 2, 1, 3),
    _AgAccessUserCurCfgName_Type()
)
agAccessUserCurCfgName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agAccessUserCurCfgName.setStatus("current")


class _AgAccessUserCurCfgPswd_Type(DisplayString):
    """Custom type agAccessUserCurCfgPswd based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_AgAccessUserCurCfgPswd_Type.__name__ = "DisplayString"
_AgAccessUserCurCfgPswd_Object = MibTableColumn
agAccessUserCurCfgPswd = _AgAccessUserCurCfgPswd_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 12, 2, 1, 4),
    _AgAccessUserCurCfgPswd_Type()
)
agAccessUserCurCfgPswd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agAccessUserCurCfgPswd.setStatus("current")


class _AgAccessUserCurCfgState_Type(Integer32):
    """Custom type agAccessUserCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_AgAccessUserCurCfgState_Type.__name__ = "Integer32"
_AgAccessUserCurCfgState_Object = MibTableColumn
agAccessUserCurCfgState = _AgAccessUserCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 12, 2, 1, 5),
    _AgAccessUserCurCfgState_Type()
)
agAccessUserCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agAccessUserCurCfgState.setStatus("current")
_AgAccessUserNewCfgTable_Object = MibTable
agAccessUserNewCfgTable = _AgAccessUserNewCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 12, 3)
)
if mibBuilder.loadTexts:
    agAccessUserNewCfgTable.setStatus("current")
_AgAccessUserNewCfgTableEntry_Object = MibTableRow
agAccessUserNewCfgTableEntry = _AgAccessUserNewCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 12, 3, 1)
)
agAccessUserNewCfgTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "agAccessUserNewCfgUId"),
)
if mibBuilder.loadTexts:
    agAccessUserNewCfgTableEntry.setStatus("current")
_AgAccessUserNewCfgUId_Type = Integer32
_AgAccessUserNewCfgUId_Object = MibTableColumn
agAccessUserNewCfgUId = _AgAccessUserNewCfgUId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 12, 3, 1, 1),
    _AgAccessUserNewCfgUId_Type()
)
agAccessUserNewCfgUId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agAccessUserNewCfgUId.setStatus("current")


class _AgAccessUserNewCos_Type(Integer32):
    """Custom type agAccessUserNewCos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              3,
              6)
        )
    )
    namedValues = NamedValues(
        *(("user", 0),
          ("oper", 3),
          ("admin", 6))
    )


_AgAccessUserNewCos_Type.__name__ = "Integer32"
_AgAccessUserNewCos_Object = MibTableColumn
agAccessUserNewCos = _AgAccessUserNewCos_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 12, 3, 1, 2),
    _AgAccessUserNewCos_Type()
)
agAccessUserNewCos.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agAccessUserNewCos.setStatus("current")


class _AgAccessUserNewCfgName_Type(DisplayString):
    """Custom type agAccessUserNewCfgName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_AgAccessUserNewCfgName_Type.__name__ = "DisplayString"
_AgAccessUserNewCfgName_Object = MibTableColumn
agAccessUserNewCfgName = _AgAccessUserNewCfgName_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 12, 3, 1, 3),
    _AgAccessUserNewCfgName_Type()
)
agAccessUserNewCfgName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agAccessUserNewCfgName.setStatus("current")


class _AgAccessUserNewCfgPswd_Type(DisplayString):
    """Custom type agAccessUserNewCfgPswd based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_AgAccessUserNewCfgPswd_Type.__name__ = "DisplayString"
_AgAccessUserNewCfgPswd_Object = MibTableColumn
agAccessUserNewCfgPswd = _AgAccessUserNewCfgPswd_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 12, 3, 1, 4),
    _AgAccessUserNewCfgPswd_Type()
)
agAccessUserNewCfgPswd.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agAccessUserNewCfgPswd.setStatus("current")


class _AgAccessUserNewCfgState_Type(Integer32):
    """Custom type agAccessUserNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_AgAccessUserNewCfgState_Type.__name__ = "Integer32"
_AgAccessUserNewCfgState_Object = MibTableColumn
agAccessUserNewCfgState = _AgAccessUserNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 12, 3, 1, 5),
    _AgAccessUserNewCfgState_Type()
)
agAccessUserNewCfgState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agAccessUserNewCfgState.setStatus("current")


class _AgAccessUserNewCfgDelete_Type(Integer32):
    """Custom type agAccessUserNewCfgDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_AgAccessUserNewCfgDelete_Type.__name__ = "Integer32"
_AgAccessUserNewCfgDelete_Object = MibTableColumn
agAccessUserNewCfgDelete = _AgAccessUserNewCfgDelete_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 12, 3, 1, 6),
    _AgAccessUserNewCfgDelete_Type()
)
agAccessUserNewCfgDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agAccessUserNewCfgDelete.setStatus("current")
_AgSSHConfig_ObjectIdentity = ObjectIdentity
agSSHConfig = _AgSSHConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 13)
)


class _SshCurCfgIntrval_Type(Integer32):
    """Custom type sshCurCfgIntrval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 24),
    )


_SshCurCfgIntrval_Type.__name__ = "Integer32"
_SshCurCfgIntrval_Object = MibScalar
sshCurCfgIntrval = _SshCurCfgIntrval_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 13, 1),
    _SshCurCfgIntrval_Type()
)
sshCurCfgIntrval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sshCurCfgIntrval.setStatus("current")


class _SshNewCfgIntrval_Type(Integer32):
    """Custom type sshNewCfgIntrval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 24),
    )


_SshNewCfgIntrval_Type.__name__ = "Integer32"
_SshNewCfgIntrval_Object = MibScalar
sshNewCfgIntrval = _SshNewCfgIntrval_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 13, 2),
    _SshNewCfgIntrval_Type()
)
sshNewCfgIntrval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sshNewCfgIntrval.setStatus("current")


class _SshCurCfgScpAdm_Type(DisplayString):
    """Custom type sshCurCfgScpAdm based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_SshCurCfgScpAdm_Type.__name__ = "DisplayString"
_SshCurCfgScpAdm_Object = MibScalar
sshCurCfgScpAdm = _SshCurCfgScpAdm_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 13, 3),
    _SshCurCfgScpAdm_Type()
)
sshCurCfgScpAdm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sshCurCfgScpAdm.setStatus("current")


class _SshNewCfgScpAdm_Type(DisplayString):
    """Custom type sshNewCfgScpAdm based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 128),
    )


_SshNewCfgScpAdm_Type.__name__ = "DisplayString"
_SshNewCfgScpAdm_Object = MibScalar
sshNewCfgScpAdm = _SshNewCfgScpAdm_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 13, 4),
    _SshNewCfgScpAdm_Type()
)
sshNewCfgScpAdm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sshNewCfgScpAdm.setStatus("current")


class _SshNewCfgHKeyGen_Type(Integer32):
    """Custom type sshNewCfgHKeyGen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("generate", 1),
          ("other", 2))
    )


_SshNewCfgHKeyGen_Type.__name__ = "Integer32"
_SshNewCfgHKeyGen_Object = MibScalar
sshNewCfgHKeyGen = _SshNewCfgHKeyGen_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 13, 5),
    _SshNewCfgHKeyGen_Type()
)
sshNewCfgHKeyGen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sshNewCfgHKeyGen.setStatus("current")


class _SshNewCfgSKeyGen_Type(Integer32):
    """Custom type sshNewCfgSKeyGen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("generate", 1),
          ("other", 2))
    )


_SshNewCfgSKeyGen_Type.__name__ = "Integer32"
_SshNewCfgSKeyGen_Object = MibScalar
sshNewCfgSKeyGen = _SshNewCfgSKeyGen_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 13, 6),
    _SshNewCfgSKeyGen_Type()
)
sshNewCfgSKeyGen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sshNewCfgSKeyGen.setStatus("current")


class _SshCurCfgSSHPort_Type(Integer32):
    """Custom type sshCurCfgSSHPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SshCurCfgSSHPort_Type.__name__ = "Integer32"
_SshCurCfgSSHPort_Object = MibScalar
sshCurCfgSSHPort = _SshCurCfgSSHPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 13, 7),
    _SshCurCfgSSHPort_Type()
)
sshCurCfgSSHPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sshCurCfgSSHPort.setStatus("current")


class _SshNewCfgSSHPort_Type(Integer32):
    """Custom type sshNewCfgSSHPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_SshNewCfgSSHPort_Type.__name__ = "Integer32"
_SshNewCfgSSHPort_Object = MibScalar
sshNewCfgSSHPort = _SshNewCfgSSHPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 13, 8),
    _SshNewCfgSSHPort_Type()
)
sshNewCfgSSHPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sshNewCfgSSHPort.setStatus("current")


class _SshCurCfgScpApplySave_Type(Integer32):
    """Custom type sshCurCfgScpApplySave based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_SshCurCfgScpApplySave_Type.__name__ = "Integer32"
_SshCurCfgScpApplySave_Object = MibScalar
sshCurCfgScpApplySave = _SshCurCfgScpApplySave_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 13, 9),
    _SshCurCfgScpApplySave_Type()
)
sshCurCfgScpApplySave.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sshCurCfgScpApplySave.setStatus("current")


class _SshNewCfgScpApplySave_Type(Integer32):
    """Custom type sshNewCfgScpApplySave based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_SshNewCfgScpApplySave_Type.__name__ = "Integer32"
_SshNewCfgScpApplySave_Object = MibScalar
sshNewCfgScpApplySave = _SshNewCfgScpApplySave_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 13, 10),
    _SshNewCfgScpApplySave_Type()
)
sshNewCfgScpApplySave.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sshNewCfgScpApplySave.setStatus("current")


class _SshCurCfgStatus_Type(Integer32):
    """Custom type sshCurCfgStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_SshCurCfgStatus_Type.__name__ = "Integer32"
_SshCurCfgStatus_Object = MibScalar
sshCurCfgStatus = _SshCurCfgStatus_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 13, 11),
    _SshCurCfgStatus_Type()
)
sshCurCfgStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sshCurCfgStatus.setStatus("current")


class _SshNewCfgStatus_Type(Integer32):
    """Custom type sshNewCfgStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_SshNewCfgStatus_Type.__name__ = "Integer32"
_SshNewCfgStatus_Object = MibScalar
sshNewCfgStatus = _SshNewCfgStatus_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 1, 13, 12),
    _SshNewCfgStatus_Type()
)
sshNewCfgStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sshNewCfgStatus.setStatus("current")
_AgentStats_ObjectIdentity = ObjectIdentity
agentStats = _AgentStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2)
)
_PktStats_ObjectIdentity = ObjectIdentity
pktStats = _PktStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 1)
)
_PktStatsAllocs_Type = Counter32
_PktStatsAllocs_Object = MibScalar
pktStatsAllocs = _PktStatsAllocs_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 1, 1),
    _PktStatsAllocs_Type()
)
pktStatsAllocs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pktStatsAllocs.setStatus("current")
_PktStatsFrees_Type = Counter32
_PktStatsFrees_Object = MibScalar
pktStatsFrees = _PktStatsFrees_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 1, 2),
    _PktStatsFrees_Type()
)
pktStatsFrees.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pktStatsFrees.setStatus("current")
_PktStatsAllocFails_Type = Counter32
_PktStatsAllocFails_Object = MibScalar
pktStatsAllocFails = _PktStatsAllocFails_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 1, 3),
    _PktStatsAllocFails_Type()
)
pktStatsAllocFails.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pktStatsAllocFails.setStatus("current")
_PktStatsMediums_Type = Gauge32
_PktStatsMediums_Object = MibScalar
pktStatsMediums = _PktStatsMediums_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 1, 4),
    _PktStatsMediums_Type()
)
pktStatsMediums.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pktStatsMediums.setStatus("current")
_PktStatsJumbos_Type = Gauge32
_PktStatsJumbos_Object = MibScalar
pktStatsJumbos = _PktStatsJumbos_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 1, 5),
    _PktStatsJumbos_Type()
)
pktStatsJumbos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pktStatsJumbos.setStatus("current")
_PktStatsSmalls_Type = Gauge32
_PktStatsSmalls_Object = MibScalar
pktStatsSmalls = _PktStatsSmalls_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 1, 6),
    _PktStatsSmalls_Type()
)
pktStatsSmalls.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pktStatsSmalls.setStatus("current")
_PktStatsMediumsHiWatermark_Type = Counter32
_PktStatsMediumsHiWatermark_Object = MibScalar
pktStatsMediumsHiWatermark = _PktStatsMediumsHiWatermark_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 1, 7),
    _PktStatsMediumsHiWatermark_Type()
)
pktStatsMediumsHiWatermark.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pktStatsMediumsHiWatermark.setStatus("current")
_PktStatsJumbosHiWatermark_Type = Counter32
_PktStatsJumbosHiWatermark_Object = MibScalar
pktStatsJumbosHiWatermark = _PktStatsJumbosHiWatermark_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 1, 8),
    _PktStatsJumbosHiWatermark_Type()
)
pktStatsJumbosHiWatermark.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pktStatsJumbosHiWatermark.setStatus("current")
_PktStatsSmallsHiWatermark_Type = Counter32
_PktStatsSmallsHiWatermark_Object = MibScalar
pktStatsSmallsHiWatermark = _PktStatsSmallsHiWatermark_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 1, 9),
    _PktStatsSmallsHiWatermark_Type()
)
pktStatsSmallsHiWatermark.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pktStatsSmallsHiWatermark.setStatus("current")
_MpCpuStats_ObjectIdentity = ObjectIdentity
mpCpuStats = _MpCpuStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 2)
)
_MpCpuStatsUtil1Second_Type = Integer32
_MpCpuStatsUtil1Second_Object = MibScalar
mpCpuStatsUtil1Second = _MpCpuStatsUtil1Second_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 2, 1),
    _MpCpuStatsUtil1Second_Type()
)
mpCpuStatsUtil1Second.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mpCpuStatsUtil1Second.setStatus("current")
_MpCpuStatsUtil4Seconds_Type = Integer32
_MpCpuStatsUtil4Seconds_Object = MibScalar
mpCpuStatsUtil4Seconds = _MpCpuStatsUtil4Seconds_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 2, 2),
    _MpCpuStatsUtil4Seconds_Type()
)
mpCpuStatsUtil4Seconds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mpCpuStatsUtil4Seconds.setStatus("current")
_MpCpuStatsUtil64Seconds_Type = Integer32
_MpCpuStatsUtil64Seconds_Object = MibScalar
mpCpuStatsUtil64Seconds = _MpCpuStatsUtil64Seconds_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 2, 3),
    _MpCpuStatsUtil64Seconds_Type()
)
mpCpuStatsUtil64Seconds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mpCpuStatsUtil64Seconds.setStatus("current")
_PortStats_ObjectIdentity = ObjectIdentity
portStats = _PortStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3)
)
_PortStatsTable_Object = MibTable
portStatsTable = _PortStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 1)
)
if mibBuilder.loadTexts:
    portStatsTable.setStatus("current")
_PortStatsTableEntry_Object = MibTableRow
portStatsTableEntry = _PortStatsTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 1, 1)
)
portStatsTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "portStatsIndx"),
)
if mibBuilder.loadTexts:
    portStatsTableEntry.setStatus("current")
_PortStatsIndx_Type = Integer32
_PortStatsIndx_Object = MibTableColumn
portStatsIndx = _PortStatsIndx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 1, 1, 1),
    _PortStatsIndx_Type()
)
portStatsIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsIndx.setStatus("current")
_PortStatsPhyIfInOctets_Type = Counter32
_PortStatsPhyIfInOctets_Object = MibTableColumn
portStatsPhyIfInOctets = _PortStatsPhyIfInOctets_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 1, 1, 2),
    _PortStatsPhyIfInOctets_Type()
)
portStatsPhyIfInOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfInOctets.setStatus("current")
_PortStatsPhyIfInUcastPkts_Type = Counter32
_PortStatsPhyIfInUcastPkts_Object = MibTableColumn
portStatsPhyIfInUcastPkts = _PortStatsPhyIfInUcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 1, 1, 3),
    _PortStatsPhyIfInUcastPkts_Type()
)
portStatsPhyIfInUcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfInUcastPkts.setStatus("current")
_PortStatsPhyIfInNUcastPkts_Type = Counter32
_PortStatsPhyIfInNUcastPkts_Object = MibTableColumn
portStatsPhyIfInNUcastPkts = _PortStatsPhyIfInNUcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 1, 1, 4),
    _PortStatsPhyIfInNUcastPkts_Type()
)
portStatsPhyIfInNUcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfInNUcastPkts.setStatus("current")
_PortStatsPhyIfInDiscards_Type = Counter32
_PortStatsPhyIfInDiscards_Object = MibTableColumn
portStatsPhyIfInDiscards = _PortStatsPhyIfInDiscards_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 1, 1, 5),
    _PortStatsPhyIfInDiscards_Type()
)
portStatsPhyIfInDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfInDiscards.setStatus("current")
_PortStatsPhyIfInErrors_Type = Counter32
_PortStatsPhyIfInErrors_Object = MibTableColumn
portStatsPhyIfInErrors = _PortStatsPhyIfInErrors_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 1, 1, 6),
    _PortStatsPhyIfInErrors_Type()
)
portStatsPhyIfInErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfInErrors.setStatus("current")
_PortStatsPhyIfInUnknownProtos_Type = Counter32
_PortStatsPhyIfInUnknownProtos_Object = MibTableColumn
portStatsPhyIfInUnknownProtos = _PortStatsPhyIfInUnknownProtos_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 1, 1, 7),
    _PortStatsPhyIfInUnknownProtos_Type()
)
portStatsPhyIfInUnknownProtos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfInUnknownProtos.setStatus("current")
_PortStatsPhyIfOutOctets_Type = Counter32
_PortStatsPhyIfOutOctets_Object = MibTableColumn
portStatsPhyIfOutOctets = _PortStatsPhyIfOutOctets_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 1, 1, 8),
    _PortStatsPhyIfOutOctets_Type()
)
portStatsPhyIfOutOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfOutOctets.setStatus("current")
_PortStatsPhyIfOutUcastPkts_Type = Counter32
_PortStatsPhyIfOutUcastPkts_Object = MibTableColumn
portStatsPhyIfOutUcastPkts = _PortStatsPhyIfOutUcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 1, 1, 9),
    _PortStatsPhyIfOutUcastPkts_Type()
)
portStatsPhyIfOutUcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfOutUcastPkts.setStatus("current")
_PortStatsPhyIfOutNUcastPkts_Type = Counter32
_PortStatsPhyIfOutNUcastPkts_Object = MibTableColumn
portStatsPhyIfOutNUcastPkts = _PortStatsPhyIfOutNUcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 1, 1, 10),
    _PortStatsPhyIfOutNUcastPkts_Type()
)
portStatsPhyIfOutNUcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfOutNUcastPkts.setStatus("current")
_PortStatsPhyIfOutDiscards_Type = Counter32
_PortStatsPhyIfOutDiscards_Object = MibTableColumn
portStatsPhyIfOutDiscards = _PortStatsPhyIfOutDiscards_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 1, 1, 11),
    _PortStatsPhyIfOutDiscards_Type()
)
portStatsPhyIfOutDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfOutDiscards.setStatus("current")
_PortStatsPhyIfOutErrors_Type = Counter32
_PortStatsPhyIfOutErrors_Object = MibTableColumn
portStatsPhyIfOutErrors = _PortStatsPhyIfOutErrors_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 1, 1, 12),
    _PortStatsPhyIfOutErrors_Type()
)
portStatsPhyIfOutErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfOutErrors.setStatus("current")
_PortStatsPhyIfOutQLen_Type = Gauge32
_PortStatsPhyIfOutQLen_Object = MibTableColumn
portStatsPhyIfOutQLen = _PortStatsPhyIfOutQLen_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 1, 1, 13),
    _PortStatsPhyIfOutQLen_Type()
)
portStatsPhyIfOutQLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfOutQLen.setStatus("current")
_PortStatsPhyIfInBroadcastPkts_Type = Counter32
_PortStatsPhyIfInBroadcastPkts_Object = MibTableColumn
portStatsPhyIfInBroadcastPkts = _PortStatsPhyIfInBroadcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 1, 1, 14),
    _PortStatsPhyIfInBroadcastPkts_Type()
)
portStatsPhyIfInBroadcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfInBroadcastPkts.setStatus("current")
_PortStatsPhyIfOutBroadcastPkts_Type = Counter32
_PortStatsPhyIfOutBroadcastPkts_Object = MibTableColumn
portStatsPhyIfOutBroadcastPkts = _PortStatsPhyIfOutBroadcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 1, 1, 15),
    _PortStatsPhyIfOutBroadcastPkts_Type()
)
portStatsPhyIfOutBroadcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfOutBroadcastPkts.setStatus("current")


class _PortStatsClear_Type(Integer32):
    """Custom type portStatsClear based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("ok", 2))
    )


_PortStatsClear_Type.__name__ = "Integer32"
_PortStatsClear_Object = MibTableColumn
portStatsClear = _PortStatsClear_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 1, 1, 16),
    _PortStatsClear_Type()
)
portStatsClear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portStatsClear.setStatus("current")
_PortStatsPhyIfInMulticastPkts_Type = Counter32
_PortStatsPhyIfInMulticastPkts_Object = MibTableColumn
portStatsPhyIfInMulticastPkts = _PortStatsPhyIfInMulticastPkts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 1, 1, 17),
    _PortStatsPhyIfInMulticastPkts_Type()
)
portStatsPhyIfInMulticastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfInMulticastPkts.setStatus("current")
_PortStatsPhyIfOutMulticastPkts_Type = Counter32
_PortStatsPhyIfOutMulticastPkts_Object = MibTableColumn
portStatsPhyIfOutMulticastPkts = _PortStatsPhyIfOutMulticastPkts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 1, 1, 18),
    _PortStatsPhyIfOutMulticastPkts_Type()
)
portStatsPhyIfOutMulticastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatsPhyIfOutMulticastPkts.setStatus("current")
_Dot1xPortStatsTable_Object = MibTable
dot1xPortStatsTable = _Dot1xPortStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 2)
)
if mibBuilder.loadTexts:
    dot1xPortStatsTable.setStatus("current")
_Dot1xPortStatsTableEntry_Object = MibTableRow
dot1xPortStatsTableEntry = _Dot1xPortStatsTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 2, 1)
)
dot1xPortStatsTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "dot1xPortStatsIndx"),
)
if mibBuilder.loadTexts:
    dot1xPortStatsTableEntry.setStatus("current")
_Dot1xPortStatsIndx_Type = Integer32
_Dot1xPortStatsIndx_Object = MibTableColumn
dot1xPortStatsIndx = _Dot1xPortStatsIndx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 2, 1, 1),
    _Dot1xPortStatsIndx_Type()
)
dot1xPortStatsIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xPortStatsIndx.setStatus("current")
_EapolFramesRx_Type = Integer32
_EapolFramesRx_Object = MibTableColumn
eapolFramesRx = _EapolFramesRx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 2, 1, 2),
    _EapolFramesRx_Type()
)
eapolFramesRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eapolFramesRx.setStatus("current")
_EapolFramesTx_Type = Integer32
_EapolFramesTx_Object = MibTableColumn
eapolFramesTx = _EapolFramesTx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 2, 1, 3),
    _EapolFramesTx_Type()
)
eapolFramesTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eapolFramesTx.setStatus("current")
_EapolStartFramesRx_Type = Integer32
_EapolStartFramesRx_Object = MibTableColumn
eapolStartFramesRx = _EapolStartFramesRx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 2, 1, 4),
    _EapolStartFramesRx_Type()
)
eapolStartFramesRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eapolStartFramesRx.setStatus("current")
_EapolLogoffFramesRx_Type = Integer32
_EapolLogoffFramesRx_Object = MibTableColumn
eapolLogoffFramesRx = _EapolLogoffFramesRx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 2, 1, 5),
    _EapolLogoffFramesRx_Type()
)
eapolLogoffFramesRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eapolLogoffFramesRx.setStatus("current")
_EapolRespIdFramesRx_Type = Integer32
_EapolRespIdFramesRx_Object = MibTableColumn
eapolRespIdFramesRx = _EapolRespIdFramesRx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 2, 1, 6),
    _EapolRespIdFramesRx_Type()
)
eapolRespIdFramesRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eapolRespIdFramesRx.setStatus("current")
_EapolRespFramesRx_Type = Integer32
_EapolRespFramesRx_Object = MibTableColumn
eapolRespFramesRx = _EapolRespFramesRx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 2, 1, 7),
    _EapolRespFramesRx_Type()
)
eapolRespFramesRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eapolRespFramesRx.setStatus("current")
_EapolReqIdFramesTx_Type = Integer32
_EapolReqIdFramesTx_Object = MibTableColumn
eapolReqIdFramesTx = _EapolReqIdFramesTx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 2, 1, 8),
    _EapolReqIdFramesTx_Type()
)
eapolReqIdFramesTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eapolReqIdFramesTx.setStatus("current")
_EapolReqFramesTx_Type = Integer32
_EapolReqFramesTx_Object = MibTableColumn
eapolReqFramesTx = _EapolReqFramesTx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 2, 1, 9),
    _EapolReqFramesTx_Type()
)
eapolReqFramesTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eapolReqFramesTx.setStatus("current")
_InvalidEapolFramesRx_Type = Integer32
_InvalidEapolFramesRx_Object = MibTableColumn
invalidEapolFramesRx = _InvalidEapolFramesRx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 2, 1, 10),
    _InvalidEapolFramesRx_Type()
)
invalidEapolFramesRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    invalidEapolFramesRx.setStatus("current")
_EapLengthErrorFramesRx_Type = Integer32
_EapLengthErrorFramesRx_Object = MibTableColumn
eapLengthErrorFramesRx = _EapLengthErrorFramesRx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 2, 1, 11),
    _EapLengthErrorFramesRx_Type()
)
eapLengthErrorFramesRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eapLengthErrorFramesRx.setStatus("current")
_AuthEntersConnecting_Type = Integer32
_AuthEntersConnecting_Object = MibTableColumn
authEntersConnecting = _AuthEntersConnecting_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 2, 1, 12),
    _AuthEntersConnecting_Type()
)
authEntersConnecting.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    authEntersConnecting.setStatus("current")
_AuthEapLogoffsWhileConnecting_Type = Integer32
_AuthEapLogoffsWhileConnecting_Object = MibTableColumn
authEapLogoffsWhileConnecting = _AuthEapLogoffsWhileConnecting_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 2, 1, 13),
    _AuthEapLogoffsWhileConnecting_Type()
)
authEapLogoffsWhileConnecting.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    authEapLogoffsWhileConnecting.setStatus("current")
_AuthEntersAuthenticating_Type = Integer32
_AuthEntersAuthenticating_Object = MibTableColumn
authEntersAuthenticating = _AuthEntersAuthenticating_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 2, 1, 14),
    _AuthEntersAuthenticating_Type()
)
authEntersAuthenticating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    authEntersAuthenticating.setStatus("current")
_AuthSuccessesWhileAuthenticating_Type = Integer32
_AuthSuccessesWhileAuthenticating_Object = MibTableColumn
authSuccessesWhileAuthenticating = _AuthSuccessesWhileAuthenticating_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 2, 1, 15),
    _AuthSuccessesWhileAuthenticating_Type()
)
authSuccessesWhileAuthenticating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    authSuccessesWhileAuthenticating.setStatus("current")
_AuthTimeoutsWhileAuthenticating_Type = Integer32
_AuthTimeoutsWhileAuthenticating_Object = MibTableColumn
authTimeoutsWhileAuthenticating = _AuthTimeoutsWhileAuthenticating_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 2, 1, 16),
    _AuthTimeoutsWhileAuthenticating_Type()
)
authTimeoutsWhileAuthenticating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    authTimeoutsWhileAuthenticating.setStatus("current")
_AuthFailWhileAuthenticating_Type = Integer32
_AuthFailWhileAuthenticating_Object = MibTableColumn
authFailWhileAuthenticating = _AuthFailWhileAuthenticating_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 2, 1, 17),
    _AuthFailWhileAuthenticating_Type()
)
authFailWhileAuthenticating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    authFailWhileAuthenticating.setStatus("current")
_AuthReauthsWhileAuthenticating_Type = Integer32
_AuthReauthsWhileAuthenticating_Object = MibTableColumn
authReauthsWhileAuthenticating = _AuthReauthsWhileAuthenticating_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 2, 1, 18),
    _AuthReauthsWhileAuthenticating_Type()
)
authReauthsWhileAuthenticating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    authReauthsWhileAuthenticating.setStatus("current")
_AuthEapStartsWhileAuthenticating_Type = Integer32
_AuthEapStartsWhileAuthenticating_Object = MibTableColumn
authEapStartsWhileAuthenticating = _AuthEapStartsWhileAuthenticating_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 2, 1, 19),
    _AuthEapStartsWhileAuthenticating_Type()
)
authEapStartsWhileAuthenticating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    authEapStartsWhileAuthenticating.setStatus("current")
_AuthEapLogoffWhileAuthenticating_Type = Integer32
_AuthEapLogoffWhileAuthenticating_Object = MibTableColumn
authEapLogoffWhileAuthenticating = _AuthEapLogoffWhileAuthenticating_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 2, 1, 20),
    _AuthEapLogoffWhileAuthenticating_Type()
)
authEapLogoffWhileAuthenticating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    authEapLogoffWhileAuthenticating.setStatus("current")
_AuthReauthsWhileAuthenticated_Type = Integer32
_AuthReauthsWhileAuthenticated_Object = MibTableColumn
authReauthsWhileAuthenticated = _AuthReauthsWhileAuthenticated_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 2, 1, 21),
    _AuthReauthsWhileAuthenticated_Type()
)
authReauthsWhileAuthenticated.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    authReauthsWhileAuthenticated.setStatus("current")
_AuthEapStartsWhileAuthenticated_Type = Integer32
_AuthEapStartsWhileAuthenticated_Object = MibTableColumn
authEapStartsWhileAuthenticated = _AuthEapStartsWhileAuthenticated_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 2, 1, 22),
    _AuthEapStartsWhileAuthenticated_Type()
)
authEapStartsWhileAuthenticated.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    authEapStartsWhileAuthenticated.setStatus("current")
_AuthEapLogoffWhileAuthenticated_Type = Integer32
_AuthEapLogoffWhileAuthenticated_Object = MibTableColumn
authEapLogoffWhileAuthenticated = _AuthEapLogoffWhileAuthenticated_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 2, 1, 23),
    _AuthEapLogoffWhileAuthenticated_Type()
)
authEapLogoffWhileAuthenticated.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    authEapLogoffWhileAuthenticated.setStatus("current")
_BackendResponses_Type = Integer32
_BackendResponses_Object = MibTableColumn
backendResponses = _BackendResponses_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 2, 1, 24),
    _BackendResponses_Type()
)
backendResponses.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    backendResponses.setStatus("current")
_BackendAccessChallenges_Type = Integer32
_BackendAccessChallenges_Object = MibTableColumn
backendAccessChallenges = _BackendAccessChallenges_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 2, 1, 25),
    _BackendAccessChallenges_Type()
)
backendAccessChallenges.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    backendAccessChallenges.setStatus("current")
_BackendOtherRequestsToSupplicant_Type = Integer32
_BackendOtherRequestsToSupplicant_Object = MibTableColumn
backendOtherRequestsToSupplicant = _BackendOtherRequestsToSupplicant_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 2, 1, 26),
    _BackendOtherRequestsToSupplicant_Type()
)
backendOtherRequestsToSupplicant.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    backendOtherRequestsToSupplicant.setStatus("current")
_BackendNonNakResponsesFromSupplicant_Type = Integer32
_BackendNonNakResponsesFromSupplicant_Object = MibTableColumn
backendNonNakResponsesFromSupplicant = _BackendNonNakResponsesFromSupplicant_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 2, 1, 27),
    _BackendNonNakResponsesFromSupplicant_Type()
)
backendNonNakResponsesFromSupplicant.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    backendNonNakResponsesFromSupplicant.setStatus("current")
_BackendAuthSuccesses_Type = Integer32
_BackendAuthSuccesses_Object = MibTableColumn
backendAuthSuccesses = _BackendAuthSuccesses_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 2, 1, 28),
    _BackendAuthSuccesses_Type()
)
backendAuthSuccesses.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    backendAuthSuccesses.setStatus("current")
_BackendAuthFails_Type = Integer32
_BackendAuthFails_Object = MibTableColumn
backendAuthFails = _BackendAuthFails_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 2, 1, 29),
    _BackendAuthFails_Type()
)
backendAuthFails.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    backendAuthFails.setStatus("current")
_LastEapolFrameVersion_Type = Integer32
_LastEapolFrameVersion_Object = MibTableColumn
lastEapolFrameVersion = _LastEapolFrameVersion_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 2, 1, 30),
    _LastEapolFrameVersion_Type()
)
lastEapolFrameVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lastEapolFrameVersion.setStatus("current")
_LastEapolFrameSource_Type = MacAddress
_LastEapolFrameSource_Object = MibTableColumn
lastEapolFrameSource = _LastEapolFrameSource_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 2, 1, 31),
    _LastEapolFrameSource_Type()
)
lastEapolFrameSource.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lastEapolFrameSource.setStatus("current")
_AllportsStatsTable_Object = MibTable
allportsStatsTable = _AllportsStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 3)
)
if mibBuilder.loadTexts:
    allportsStatsTable.setStatus("current")
_AllportsStatsTableEntry_Object = MibTableRow
allportsStatsTableEntry = _AllportsStatsTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 3, 1)
)
allportsStatsTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "allportsStatsIndx"),
)
if mibBuilder.loadTexts:
    allportsStatsTableEntry.setStatus("current")
_AllportsStatsIndx_Type = Integer32
_AllportsStatsIndx_Object = MibTableColumn
allportsStatsIndx = _AllportsStatsIndx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 3, 1, 1),
    _AllportsStatsIndx_Type()
)
allportsStatsIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsIndx.setStatus("current")


class _AllportsStatsDescr_Type(DisplayString):
    """Custom type allportsStatsDescr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 5),
    )


_AllportsStatsDescr_Type.__name__ = "DisplayString"
_AllportsStatsDescr_Object = MibTableColumn
allportsStatsDescr = _AllportsStatsDescr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 3, 1, 2),
    _AllportsStatsDescr_Type()
)
allportsStatsDescr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsDescr.setStatus("current")


class _AllportsStatsSpeed_Type(Integer32):
    """Custom type allportsStatsSpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("mbs10", 2),
          ("mbs100", 3),
          ("mbs1000", 4),
          ("any", 5),
          ("mbs10000", 6))
    )


_AllportsStatsSpeed_Type.__name__ = "Integer32"
_AllportsStatsSpeed_Object = MibTableColumn
allportsStatsSpeed = _AllportsStatsSpeed_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 3, 1, 3),
    _AllportsStatsSpeed_Type()
)
allportsStatsSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsSpeed.setStatus("current")
_AllportsStatsPhysAddress_Type = PhysAddress
_AllportsStatsPhysAddress_Object = MibTableColumn
allportsStatsPhysAddress = _AllportsStatsPhysAddress_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 3, 1, 4),
    _AllportsStatsPhysAddress_Type()
)
allportsStatsPhysAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsPhysAddress.setStatus("current")


class _AllportsStatsAdminStatus_Type(Integer32):
    """Custom type allportsStatsAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("up", 1),
          ("down", 2),
          ("testing", 3))
    )


_AllportsStatsAdminStatus_Type.__name__ = "Integer32"
_AllportsStatsAdminStatus_Object = MibTableColumn
allportsStatsAdminStatus = _AllportsStatsAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 3, 1, 5),
    _AllportsStatsAdminStatus_Type()
)
allportsStatsAdminStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsAdminStatus.setStatus("current")


class _AllportsStatsOperStatus_Type(Integer32):
    """Custom type allportsStatsOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("up", 1),
          ("down", 2),
          ("testing", 3))
    )


_AllportsStatsOperStatus_Type.__name__ = "Integer32"
_AllportsStatsOperStatus_Object = MibTableColumn
allportsStatsOperStatus = _AllportsStatsOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 3, 1, 6),
    _AllportsStatsOperStatus_Type()
)
allportsStatsOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsOperStatus.setStatus("current")
_AllportsStatsInOctets_Type = Counter32
_AllportsStatsInOctets_Object = MibTableColumn
allportsStatsInOctets = _AllportsStatsInOctets_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 3, 1, 7),
    _AllportsStatsInOctets_Type()
)
allportsStatsInOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsInOctets.setStatus("current")
_AllportsStatsOutOctets_Type = Counter32
_AllportsStatsOutOctets_Object = MibTableColumn
allportsStatsOutOctets = _AllportsStatsOutOctets_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 3, 1, 8),
    _AllportsStatsOutOctets_Type()
)
allportsStatsOutOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsOutOctets.setStatus("current")
_AllportsStatsInPkts_Type = Counter32
_AllportsStatsInPkts_Object = MibTableColumn
allportsStatsInPkts = _AllportsStatsInPkts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 3, 1, 9),
    _AllportsStatsInPkts_Type()
)
allportsStatsInPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsInPkts.setStatus("current")
_AllportsStatsOutPkts_Type = Counter32
_AllportsStatsOutPkts_Object = MibTableColumn
allportsStatsOutPkts = _AllportsStatsOutPkts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 3, 1, 10),
    _AllportsStatsOutPkts_Type()
)
allportsStatsOutPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsOutPkts.setStatus("current")


class _AllportsStatsInUcast_Type(DisplayString):
    """Custom type allportsStatsInUcast based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_AllportsStatsInUcast_Type.__name__ = "DisplayString"
_AllportsStatsInUcast_Object = MibTableColumn
allportsStatsInUcast = _AllportsStatsInUcast_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 3, 1, 11),
    _AllportsStatsInUcast_Type()
)
allportsStatsInUcast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsInUcast.setStatus("current")


class _AllportsStatsOutUcast_Type(DisplayString):
    """Custom type allportsStatsOutUcast based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_AllportsStatsOutUcast_Type.__name__ = "DisplayString"
_AllportsStatsOutUcast_Object = MibTableColumn
allportsStatsOutUcast = _AllportsStatsOutUcast_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 3, 1, 12),
    _AllportsStatsOutUcast_Type()
)
allportsStatsOutUcast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsOutUcast.setStatus("current")


class _AllportsStatsInBcast_Type(DisplayString):
    """Custom type allportsStatsInBcast based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_AllportsStatsInBcast_Type.__name__ = "DisplayString"
_AllportsStatsInBcast_Object = MibTableColumn
allportsStatsInBcast = _AllportsStatsInBcast_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 3, 1, 13),
    _AllportsStatsInBcast_Type()
)
allportsStatsInBcast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsInBcast.setStatus("current")


class _AllportsStatsOutBcast_Type(DisplayString):
    """Custom type allportsStatsOutBcast based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_AllportsStatsOutBcast_Type.__name__ = "DisplayString"
_AllportsStatsOutBcast_Object = MibTableColumn
allportsStatsOutBcast = _AllportsStatsOutBcast_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 3, 1, 14),
    _AllportsStatsOutBcast_Type()
)
allportsStatsOutBcast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsOutBcast.setStatus("current")


class _AllportsStatsInMcast_Type(DisplayString):
    """Custom type allportsStatsInMcast based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_AllportsStatsInMcast_Type.__name__ = "DisplayString"
_AllportsStatsInMcast_Object = MibTableColumn
allportsStatsInMcast = _AllportsStatsInMcast_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 3, 1, 15),
    _AllportsStatsInMcast_Type()
)
allportsStatsInMcast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsInMcast.setStatus("current")


class _AllportsStatsOutMcast_Type(DisplayString):
    """Custom type allportsStatsOutMcast based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_AllportsStatsOutMcast_Type.__name__ = "DisplayString"
_AllportsStatsOutMcast_Object = MibTableColumn
allportsStatsOutMcast = _AllportsStatsOutMcast_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 3, 1, 16),
    _AllportsStatsOutMcast_Type()
)
allportsStatsOutMcast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsOutMcast.setStatus("current")
_AllportsStatsInDiscards_Type = Counter32
_AllportsStatsInDiscards_Object = MibTableColumn
allportsStatsInDiscards = _AllportsStatsInDiscards_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 3, 1, 17),
    _AllportsStatsInDiscards_Type()
)
allportsStatsInDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsInDiscards.setStatus("current")
_AllportsStatsOutDiscards_Type = Counter32
_AllportsStatsOutDiscards_Object = MibTableColumn
allportsStatsOutDiscards = _AllportsStatsOutDiscards_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 3, 1, 18),
    _AllportsStatsOutDiscards_Type()
)
allportsStatsOutDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsOutDiscards.setStatus("current")
_AllportsStatsInErrors_Type = Counter32
_AllportsStatsInErrors_Object = MibTableColumn
allportsStatsInErrors = _AllportsStatsInErrors_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 3, 1, 19),
    _AllportsStatsInErrors_Type()
)
allportsStatsInErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsInErrors.setStatus("current")
_AllportsStatsOutErrors_Type = Counter32
_AllportsStatsOutErrors_Object = MibTableColumn
allportsStatsOutErrors = _AllportsStatsOutErrors_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 3, 1, 20),
    _AllportsStatsOutErrors_Type()
)
allportsStatsOutErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsOutErrors.setStatus("current")


class _AllportsStatsInUnknownProtos_Type(DisplayString):
    """Custom type allportsStatsInUnknownProtos based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_AllportsStatsInUnknownProtos_Type.__name__ = "DisplayString"
_AllportsStatsInUnknownProtos_Object = MibTableColumn
allportsStatsInUnknownProtos = _AllportsStatsInUnknownProtos_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 3, 1, 21),
    _AllportsStatsInUnknownProtos_Type()
)
allportsStatsInUnknownProtos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsInUnknownProtos.setStatus("current")


class _AllportsStatsOutQLen_Type(DisplayString):
    """Custom type allportsStatsOutQLen based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_AllportsStatsOutQLen_Type.__name__ = "DisplayString"
_AllportsStatsOutQLen_Object = MibTableColumn
allportsStatsOutQLen = _AllportsStatsOutQLen_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 3, 1, 22),
    _AllportsStatsOutQLen_Type()
)
allportsStatsOutQLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsOutQLen.setStatus("current")
_AllportsStatsipInReceives_Type = Counter32
_AllportsStatsipInReceives_Object = MibTableColumn
allportsStatsipInReceives = _AllportsStatsipInReceives_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 3, 1, 23),
    _AllportsStatsipInReceives_Type()
)
allportsStatsipInReceives.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsipInReceives.setStatus("current")
_AllportsStatsipInHeaderErrors_Type = Counter32
_AllportsStatsipInHeaderErrors_Object = MibTableColumn
allportsStatsipInHeaderErrors = _AllportsStatsipInHeaderErrors_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 3, 1, 24),
    _AllportsStatsipInHeaderErrors_Type()
)
allportsStatsipInHeaderErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsipInHeaderErrors.setStatus("current")
_AllportsStatsipInDiscards_Type = Counter32
_AllportsStatsipInDiscards_Object = MibTableColumn
allportsStatsipInDiscards = _AllportsStatsipInDiscards_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 3, 1, 25),
    _AllportsStatsipInDiscards_Type()
)
allportsStatsipInDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsipInDiscards.setStatus("current")
_AllportsStatsLinkStateChange_Type = Counter32
_AllportsStatsLinkStateChange_Object = MibTableColumn
allportsStatsLinkStateChange = _AllportsStatsLinkStateChange_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 3, 1, 26),
    _AllportsStatsLinkStateChange_Type()
)
allportsStatsLinkStateChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    allportsStatsLinkStateChange.setStatus("current")


class _ClearPortsStats_Type(Integer32):
    """Custom type clearPortsStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_ClearPortsStats_Type.__name__ = "Integer32"
_ClearPortsStats_Object = MibScalar
clearPortsStats = _ClearPortsStats_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 3, 4),
    _ClearPortsStats_Type()
)
clearPortsStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    clearPortsStats.setStatus("current")
_AgClearStats_ObjectIdentity = ObjectIdentity
agClearStats = _AgClearStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 7)
)


class _SnmpClearStats_Type(Integer32):
    """Custom type snmpClearStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_SnmpClearStats_Type.__name__ = "Integer32"
_SnmpClearStats_Object = MibScalar
snmpClearStats = _SnmpClearStats_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 7, 1),
    _SnmpClearStats_Type()
)
snmpClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    snmpClearStats.setStatus("current")
_NtpStats_ObjectIdentity = ObjectIdentity
ntpStats = _NtpStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 9)
)
_NtpPrimaryServerReqSent_Type = Integer32
_NtpPrimaryServerReqSent_Object = MibScalar
ntpPrimaryServerReqSent = _NtpPrimaryServerReqSent_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 9, 1),
    _NtpPrimaryServerReqSent_Type()
)
ntpPrimaryServerReqSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpPrimaryServerReqSent.setStatus("current")
_NtpPrimaryServerRespRcvd_Type = Integer32
_NtpPrimaryServerRespRcvd_Object = MibScalar
ntpPrimaryServerRespRcvd = _NtpPrimaryServerRespRcvd_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 9, 2),
    _NtpPrimaryServerRespRcvd_Type()
)
ntpPrimaryServerRespRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpPrimaryServerRespRcvd.setStatus("current")
_NtpPrimaryServerUpdates_Type = Integer32
_NtpPrimaryServerUpdates_Object = MibScalar
ntpPrimaryServerUpdates = _NtpPrimaryServerUpdates_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 9, 3),
    _NtpPrimaryServerUpdates_Type()
)
ntpPrimaryServerUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpPrimaryServerUpdates.setStatus("current")
_NtpSecondaryServerReqSent_Type = Integer32
_NtpSecondaryServerReqSent_Object = MibScalar
ntpSecondaryServerReqSent = _NtpSecondaryServerReqSent_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 9, 4),
    _NtpSecondaryServerReqSent_Type()
)
ntpSecondaryServerReqSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpSecondaryServerReqSent.setStatus("current")
_NtpSecondaryServerRespRcvd_Type = Integer32
_NtpSecondaryServerRespRcvd_Object = MibScalar
ntpSecondaryServerRespRcvd = _NtpSecondaryServerRespRcvd_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 9, 5),
    _NtpSecondaryServerRespRcvd_Type()
)
ntpSecondaryServerRespRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpSecondaryServerRespRcvd.setStatus("current")
_NtpSecondaryServerUpdates_Type = Integer32
_NtpSecondaryServerUpdates_Object = MibScalar
ntpSecondaryServerUpdates = _NtpSecondaryServerUpdates_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 9, 6),
    _NtpSecondaryServerUpdates_Type()
)
ntpSecondaryServerUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpSecondaryServerUpdates.setStatus("current")


class _NtpLastUpdateServer_Type(Integer32):
    """Custom type ntpLastUpdateServer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("primary", 1),
          ("secondary", 2))
    )


_NtpLastUpdateServer_Type.__name__ = "Integer32"
_NtpLastUpdateServer_Object = MibScalar
ntpLastUpdateServer = _NtpLastUpdateServer_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 9, 7),
    _NtpLastUpdateServer_Type()
)
ntpLastUpdateServer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpLastUpdateServer.setStatus("current")


class _NtpLastUpdateTime_Type(DisplayString):
    """Custom type ntpLastUpdateTime based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 127),
    )


_NtpLastUpdateTime_Type.__name__ = "DisplayString"
_NtpLastUpdateTime_Object = MibScalar
ntpLastUpdateTime = _NtpLastUpdateTime_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 9, 8),
    _NtpLastUpdateTime_Type()
)
ntpLastUpdateTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpLastUpdateTime.setStatus("current")


class _NtpClearStats_Type(Integer32):
    """Custom type ntpClearStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_NtpClearStats_Type.__name__ = "Integer32"
_NtpClearStats_Object = MibScalar
ntpClearStats = _NtpClearStats_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 9, 9),
    _NtpClearStats_Type()
)
ntpClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ntpClearStats.setStatus("current")


class _NtpSystemCurrentTime_Type(DisplayString):
    """Custom type ntpSystemCurrentTime based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 127),
    )


_NtpSystemCurrentTime_Type.__name__ = "DisplayString"
_NtpSystemCurrentTime_Object = MibScalar
ntpSystemCurrentTime = _NtpSystemCurrentTime_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 9, 10),
    _NtpSystemCurrentTime_Type()
)
ntpSystemCurrentTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ntpSystemCurrentTime.setStatus("current")
_AclStats_ObjectIdentity = ObjectIdentity
aclStats = _AclStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 12)
)
_AclStatsTable_Object = MibTable
aclStatsTable = _AclStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 12, 1)
)
if mibBuilder.loadTexts:
    aclStatsTable.setStatus("current")
_AclStatsTableEntry_Object = MibTableRow
aclStatsTableEntry = _AclStatsTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 12, 1, 1)
)
aclStatsTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "aclStatsIndex"),
)
if mibBuilder.loadTexts:
    aclStatsTableEntry.setStatus("current")
_AclStatsIndex_Type = Integer32
_AclStatsIndex_Object = MibTableColumn
aclStatsIndex = _AclStatsIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 12, 1, 1, 1),
    _AclStatsIndex_Type()
)
aclStatsIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclStatsIndex.setStatus("current")
_AclStatsHits_Type = Counter32
_AclStatsHits_Object = MibTableColumn
aclStatsHits = _AclStatsHits_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 12, 1, 1, 2),
    _AclStatsHits_Type()
)
aclStatsHits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclStatsHits.setStatus("current")


class _AclClearStats_Type(Integer32):
    """Custom type aclClearStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_AclClearStats_Type.__name__ = "Integer32"
_AclClearStats_Object = MibTableColumn
aclClearStats = _AclClearStats_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 2, 12, 1, 1, 3),
    _AclClearStats_Type()
)
aclClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclClearStats.setStatus("current")
_AgentInfo_ObjectIdentity = ObjectIdentity
agentInfo = _AgentInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3)
)
_Hardware_ObjectIdentity = ObjectIdentity
hardware = _Hardware_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 1)
)


class _HwPartNumber_Type(DisplayString):
    """Custom type hwPartNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_HwPartNumber_Type.__name__ = "DisplayString"
_HwPartNumber_Object = MibScalar
hwPartNumber = _HwPartNumber_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 1, 1),
    _HwPartNumber_Type()
)
hwPartNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hwPartNumber.setStatus("current")


class _HwRevision_Type(DisplayString):
    """Custom type hwRevision based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_HwRevision_Type.__name__ = "DisplayString"
_HwRevision_Object = MibScalar
hwRevision = _HwRevision_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 1, 2),
    _HwRevision_Type()
)
hwRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hwRevision.setStatus("current")


class _HwSerialNumber_Type(DisplayString):
    """Custom type hwSerialNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_HwSerialNumber_Type.__name__ = "DisplayString"
_HwSerialNumber_Object = MibScalar
hwSerialNumber = _HwSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 1, 5),
    _HwSerialNumber_Type()
)
hwSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hwSerialNumber.setStatus("current")
_PortInfo_ObjectIdentity = ObjectIdentity
portInfo = _PortInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 2)
)
_PortInfoTable_Object = MibTable
portInfoTable = _PortInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 2, 1)
)
if mibBuilder.loadTexts:
    portInfoTable.setStatus("current")
_PortInfoTableEntry_Object = MibTableRow
portInfoTableEntry = _PortInfoTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 2, 1, 1)
)
portInfoTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "portInfoIndx"),
)
if mibBuilder.loadTexts:
    portInfoTableEntry.setStatus("current")
_PortInfoIndx_Type = Integer32
_PortInfoIndx_Object = MibTableColumn
portInfoIndx = _PortInfoIndx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 2, 1, 1, 1),
    _PortInfoIndx_Type()
)
portInfoIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portInfoIndx.setStatus("current")


class _PortInfoSpeed_Type(Integer32):
    """Custom type portInfoSpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("mbs10", 2),
          ("mbs100", 3),
          ("mbs1000", 4),
          ("any", 5),
          ("mbs10000", 6))
    )


_PortInfoSpeed_Type.__name__ = "Integer32"
_PortInfoSpeed_Object = MibTableColumn
portInfoSpeed = _PortInfoSpeed_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 2, 1, 1, 2),
    _PortInfoSpeed_Type()
)
portInfoSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portInfoSpeed.setStatus("current")


class _PortInfoMode_Type(Integer32):
    """Custom type portInfoMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("full-duplex", 2),
          ("half-duplex", 3))
    )


_PortInfoMode_Type.__name__ = "Integer32"
_PortInfoMode_Object = MibTableColumn
portInfoMode = _PortInfoMode_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 2, 1, 1, 3),
    _PortInfoMode_Type()
)
portInfoMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portInfoMode.setStatus("current")


class _PortInfoFlowCtrl_Type(Integer32):
    """Custom type portInfoFlowCtrl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("transmit", 2),
          ("receive", 3),
          ("both", 4),
          ("none", 5))
    )


_PortInfoFlowCtrl_Type.__name__ = "Integer32"
_PortInfoFlowCtrl_Object = MibTableColumn
portInfoFlowCtrl = _PortInfoFlowCtrl_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 2, 1, 1, 4),
    _PortInfoFlowCtrl_Type()
)
portInfoFlowCtrl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portInfoFlowCtrl.setStatus("current")


class _PortInfoLink_Type(Integer32):
    """Custom type portInfoLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("up", 1),
          ("down", 2),
          ("disabled", 3),
          ("inoperative", 4))
    )


_PortInfoLink_Type.__name__ = "Integer32"
_PortInfoLink_Object = MibTableColumn
portInfoLink = _PortInfoLink_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 2, 1, 1, 5),
    _PortInfoLink_Type()
)
portInfoLink.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portInfoLink.setStatus("current")


class _PortInfoPhyIfDescr_Type(DisplayString):
    """Custom type portInfoPhyIfDescr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_PortInfoPhyIfDescr_Type.__name__ = "DisplayString"
_PortInfoPhyIfDescr_Object = MibTableColumn
portInfoPhyIfDescr = _PortInfoPhyIfDescr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 2, 1, 1, 6),
    _PortInfoPhyIfDescr_Type()
)
portInfoPhyIfDescr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portInfoPhyIfDescr.setStatus("current")


class _PortInfoPhyIfType_Type(Integer32):
    """Custom type portInfoPhyIfType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("regular1822", 2),
          ("hdh1822", 3),
          ("ddn-x25", 4),
          ("rfc877-x25", 5),
          ("ethernet-csmacd", 6),
          ("iso88023-csmacd", 7),
          ("iso88024-tokenBus", 8),
          ("iso88025-tokenRing", 9),
          ("iso88026-man", 10),
          ("starLan", 11),
          ("proteon-10Mbit", 12),
          ("proteon-80Mbit", 13),
          ("hyperchannel", 14),
          ("fddi", 15),
          ("lapb", 16),
          ("sdlc", 17),
          ("ds1", 18),
          ("e1", 19),
          ("basicISDN", 20),
          ("primaryISDN", 21),
          ("propPointToPointSerial", 22),
          ("ppp", 23),
          ("softwareLoopback", 24),
          ("eon", 25),
          ("ethernet-3Mbit", 26),
          ("nsip", 27),
          ("slip", 28),
          ("ultra", 29),
          ("ds3", 30),
          ("sip", 31),
          ("frame-relay", 32))
    )


_PortInfoPhyIfType_Type.__name__ = "Integer32"
_PortInfoPhyIfType_Object = MibTableColumn
portInfoPhyIfType = _PortInfoPhyIfType_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 2, 1, 1, 7),
    _PortInfoPhyIfType_Type()
)
portInfoPhyIfType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portInfoPhyIfType.setStatus("current")
_PortInfoPhyIfMtu_Type = Integer32
_PortInfoPhyIfMtu_Object = MibTableColumn
portInfoPhyIfMtu = _PortInfoPhyIfMtu_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 2, 1, 1, 8),
    _PortInfoPhyIfMtu_Type()
)
portInfoPhyIfMtu.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portInfoPhyIfMtu.setStatus("current")
_PortInfoPhyIfPhysAddress_Type = PhysAddress
_PortInfoPhyIfPhysAddress_Object = MibTableColumn
portInfoPhyIfPhysAddress = _PortInfoPhyIfPhysAddress_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 2, 1, 1, 9),
    _PortInfoPhyIfPhysAddress_Type()
)
portInfoPhyIfPhysAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portInfoPhyIfPhysAddress.setStatus("current")


class _PortInfoPhyIfOperStatus_Type(Integer32):
    """Custom type portInfoPhyIfOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("up", 1),
          ("down", 2),
          ("testing", 3))
    )


_PortInfoPhyIfOperStatus_Type.__name__ = "Integer32"
_PortInfoPhyIfOperStatus_Object = MibTableColumn
portInfoPhyIfOperStatus = _PortInfoPhyIfOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 2, 1, 1, 10),
    _PortInfoPhyIfOperStatus_Type()
)
portInfoPhyIfOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portInfoPhyIfOperStatus.setStatus("current")
_PortInfoPhyIfLastChange_Type = TimeTicks
_PortInfoPhyIfLastChange_Object = MibTableColumn
portInfoPhyIfLastChange = _PortInfoPhyIfLastChange_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 2, 1, 1, 11),
    _PortInfoPhyIfLastChange_Type()
)
portInfoPhyIfLastChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portInfoPhyIfLastChange.setStatus("current")
_AgDiff_ObjectIdentity = ObjectIdentity
agDiff = _AgDiff_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 4)
)


class _AgDiffState_Type(Integer32):
    """Custom type agDiffState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("diff", 1),
          ("flashdiff", 2),
          ("idle", 3),
          ("inprogress", 4),
          ("complete", 5))
    )


_AgDiffState_Type.__name__ = "Integer32"
_AgDiffState_Object = MibScalar
agDiffState = _AgDiffState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 4, 2),
    _AgDiffState_Type()
)
agDiffState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agDiffState.setStatus("current")
_AgDiffTableSize_Type = Integer32
_AgDiffTableSize_Object = MibScalar
agDiffTableSize = _AgDiffTableSize_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 4, 3),
    _AgDiffTableSize_Type()
)
agDiffTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agDiffTableSize.setStatus("current")
_AgDiffTable_Object = MibTable
agDiffTable = _AgDiffTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 4, 4)
)
if mibBuilder.loadTexts:
    agDiffTable.setStatus("current")
_AgDiffTableEntry_Object = MibTableRow
agDiffTableEntry = _AgDiffTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 4, 4, 1)
)
agDiffTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "agDiffIndex"),
)
if mibBuilder.loadTexts:
    agDiffTableEntry.setStatus("current")
_AgDiffIndex_Type = Integer32
_AgDiffIndex_Object = MibTableColumn
agDiffIndex = _AgDiffIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 4, 4, 1, 1),
    _AgDiffIndex_Type()
)
agDiffIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agDiffIndex.setStatus("current")
_AgDiffString_Type = OctetString
_AgDiffString_Object = MibTableColumn
agDiffString = _AgDiffString_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 4, 4, 1, 2),
    _AgDiffString_Type()
)
agDiffString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agDiffString.setStatus("current")
_AgCfgDump_ObjectIdentity = ObjectIdentity
agCfgDump = _AgCfgDump_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 5)
)


class _AgCfgDumpState_Type(Integer32):
    """Custom type agCfgDumpState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("dump", 1),
          ("idle", 2),
          ("inprogress", 3),
          ("complete", 4))
    )


_AgCfgDumpState_Type.__name__ = "Integer32"
_AgCfgDumpState_Object = MibScalar
agCfgDumpState = _AgCfgDumpState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 5, 2),
    _AgCfgDumpState_Type()
)
agCfgDumpState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agCfgDumpState.setStatus("current")
_AgCfgDumpTableSize_Type = Integer32
_AgCfgDumpTableSize_Object = MibScalar
agCfgDumpTableSize = _AgCfgDumpTableSize_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 5, 3),
    _AgCfgDumpTableSize_Type()
)
agCfgDumpTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCfgDumpTableSize.setStatus("current")
_AgCfgDumpTable_Object = MibTable
agCfgDumpTable = _AgCfgDumpTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 5, 4)
)
if mibBuilder.loadTexts:
    agCfgDumpTable.setStatus("current")
_AgCfgDumpTableEntry_Object = MibTableRow
agCfgDumpTableEntry = _AgCfgDumpTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 5, 4, 1)
)
agCfgDumpTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "agCfgDumpIndex"),
)
if mibBuilder.loadTexts:
    agCfgDumpTableEntry.setStatus("current")
_AgCfgDumpIndex_Type = Integer32
_AgCfgDumpIndex_Object = MibTableColumn
agCfgDumpIndex = _AgCfgDumpIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 5, 4, 1, 1),
    _AgCfgDumpIndex_Type()
)
agCfgDumpIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCfgDumpIndex.setStatus("current")
_AgCfgDumpString_Type = OctetString
_AgCfgDumpString_Object = MibTableColumn
agCfgDumpString = _AgCfgDumpString_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 5, 4, 1, 2),
    _AgCfgDumpString_Type()
)
agCfgDumpString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agCfgDumpString.setStatus("current")
_GeaportInfo_ObjectIdentity = ObjectIdentity
geaportInfo = _GeaportInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 7)
)
_GeaportInfoTable_Object = MibTable
geaportInfoTable = _GeaportInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 7, 1)
)
if mibBuilder.loadTexts:
    geaportInfoTable.setStatus("current")
_GeaportInfoTableEntry_Object = MibTableRow
geaportInfoTableEntry = _GeaportInfoTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 7, 1, 1)
)
geaportInfoTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "geaportInfoLogicalIndex"),
)
if mibBuilder.loadTexts:
    geaportInfoTableEntry.setStatus("current")
_GeaportInfoLogicalIndex_Type = Integer32
_GeaportInfoLogicalIndex_Object = MibTableColumn
geaportInfoLogicalIndex = _GeaportInfoLogicalIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 7, 1, 1, 1),
    _GeaportInfoLogicalIndex_Type()
)
geaportInfoLogicalIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geaportInfoLogicalIndex.setStatus("current")
_GeaportInfoPort_Type = Integer32
_GeaportInfoPort_Object = MibTableColumn
geaportInfoPort = _GeaportInfoPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 7, 1, 1, 2),
    _GeaportInfoPort_Type()
)
geaportInfoPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geaportInfoPort.setStatus("current")
_GeaportInfoUnit_Type = Integer32
_GeaportInfoUnit_Object = MibTableColumn
geaportInfoUnit = _GeaportInfoUnit_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 7, 1, 1, 3),
    _GeaportInfoUnit_Type()
)
geaportInfoUnit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    geaportInfoUnit.setStatus("current")
_UfdInfo_ObjectIdentity = ObjectIdentity
ufdInfo = _UfdInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 8)
)


class _UfdInfoState_Type(Integer32):
    """Custom type ufdInfoState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_UfdInfoState_Type.__name__ = "Integer32"
_UfdInfoState_Object = MibScalar
ufdInfoState = _UfdInfoState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 8, 1),
    _UfdInfoState_Type()
)
ufdInfoState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ufdInfoState.setStatus("current")


class _UfdInfoLtMStatus_Type(Integer32):
    """Custom type ufdInfoLtMStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("up", 1),
          ("down", 2),
          ("forwarding", 3),
          ("blocked", 4))
    )


_UfdInfoLtMStatus_Type.__name__ = "Integer32"
_UfdInfoLtMStatus_Object = MibScalar
ufdInfoLtMStatus = _UfdInfoLtMStatus_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 8, 2),
    _UfdInfoLtMStatus_Type()
)
ufdInfoLtMStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ufdInfoLtMStatus.setStatus("current")
_UfdInfoLtMPorts_Type = OctetString
_UfdInfoLtMPorts_Object = MibScalar
ufdInfoLtMPorts = _UfdInfoLtMPorts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 8, 3),
    _UfdInfoLtMPorts_Type()
)
ufdInfoLtMPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ufdInfoLtMPorts.setStatus("current")
_UfdInfoLtMTrunks_Type = OctetString
_UfdInfoLtMTrunks_Object = MibScalar
ufdInfoLtMTrunks = _UfdInfoLtMTrunks_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 8, 4),
    _UfdInfoLtMTrunks_Type()
)
ufdInfoLtMTrunks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ufdInfoLtMTrunks.setStatus("current")
_UfdInfoLtMAdminkey_Type = Integer32
_UfdInfoLtMAdminkey_Object = MibScalar
ufdInfoLtMAdminkey = _UfdInfoLtMAdminkey_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 8, 5),
    _UfdInfoLtMAdminkey_Type()
)
ufdInfoLtMAdminkey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ufdInfoLtMAdminkey.setStatus("current")


class _UfdInfoLtDStatus_Type(Integer32):
    """Custom type ufdInfoLtDStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("up", 1),
          ("autoDisabled", 2))
    )


_UfdInfoLtDStatus_Type.__name__ = "Integer32"
_UfdInfoLtDStatus_Object = MibScalar
ufdInfoLtDStatus = _UfdInfoLtDStatus_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 8, 6),
    _UfdInfoLtDStatus_Type()
)
ufdInfoLtDStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ufdInfoLtDStatus.setStatus("current")
_UfdInfoLtDPorts_Type = OctetString
_UfdInfoLtDPorts_Object = MibScalar
ufdInfoLtDPorts = _UfdInfoLtDPorts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 8, 7),
    _UfdInfoLtDPorts_Type()
)
ufdInfoLtDPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ufdInfoLtDPorts.setStatus("current")
_UfdInfoLtDTrunks_Type = Integer32
_UfdInfoLtDTrunks_Object = MibScalar
ufdInfoLtDTrunks = _UfdInfoLtDTrunks_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 8, 8),
    _UfdInfoLtDTrunks_Type()
)
ufdInfoLtDTrunks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ufdInfoLtDTrunks.setStatus("current")
_UfdInfoLtDAdminkeyMaxEnt_Type = Integer32
_UfdInfoLtDAdminkeyMaxEnt_Object = MibScalar
ufdInfoLtDAdminkeyMaxEnt = _UfdInfoLtDAdminkeyMaxEnt_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 8, 9),
    _UfdInfoLtDAdminkeyMaxEnt_Type()
)
ufdInfoLtDAdminkeyMaxEnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ufdInfoLtDAdminkeyMaxEnt.setStatus("current")
_UfdInfoLtDAdminkeyTable_Object = MibTable
ufdInfoLtDAdminkeyTable = _UfdInfoLtDAdminkeyTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 8, 10)
)
if mibBuilder.loadTexts:
    ufdInfoLtDAdminkeyTable.setStatus("current")
_UfdInfoLtDAdminkeyTableEntry_Object = MibTableRow
ufdInfoLtDAdminkeyTableEntry = _UfdInfoLtDAdminkeyTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 8, 10, 1)
)
ufdInfoLtDAdminkeyTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ufdInfoLtDAdminkey"),
)
if mibBuilder.loadTexts:
    ufdInfoLtDAdminkeyTableEntry.setStatus("current")
_UfdInfoLtDAdminkey_Type = Integer32
_UfdInfoLtDAdminkey_Object = MibTableColumn
ufdInfoLtDAdminkey = _UfdInfoLtDAdminkey_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 8, 10, 1, 1),
    _UfdInfoLtDAdminkey_Type()
)
ufdInfoLtDAdminkey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ufdInfoLtDAdminkey.setStatus("current")
_SfpInfo_ObjectIdentity = ObjectIdentity
sfpInfo = _SfpInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 9)
)
_SfpInfoTable_Object = MibTable
sfpInfoTable = _SfpInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 9, 1)
)
if mibBuilder.loadTexts:
    sfpInfoTable.setStatus("current")
_SfpInfoTableEntry_Object = MibTableRow
sfpInfoTableEntry = _SfpInfoTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 9, 1, 1)
)
sfpInfoTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "sfpInfoIndx"),
)
if mibBuilder.loadTexts:
    sfpInfoTableEntry.setStatus("current")
_SfpInfoIndx_Type = Integer32
_SfpInfoIndx_Object = MibTableColumn
sfpInfoIndx = _SfpInfoIndx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 9, 1, 1, 1),
    _SfpInfoIndx_Type()
)
sfpInfoIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sfpInfoIndx.setStatus("current")


class _SfpInfoPort_Type(DisplayString):
    """Custom type sfpInfoPort based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 6),
    )


_SfpInfoPort_Type.__name__ = "DisplayString"
_SfpInfoPort_Object = MibTableColumn
sfpInfoPort = _SfpInfoPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 9, 1, 1, 2),
    _SfpInfoPort_Type()
)
sfpInfoPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sfpInfoPort.setStatus("current")


class _SfpInfoDevice_Type(DisplayString):
    """Custom type sfpInfoDevice based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 6),
    )


_SfpInfoDevice_Type.__name__ = "DisplayString"
_SfpInfoDevice_Object = MibTableColumn
sfpInfoDevice = _SfpInfoDevice_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 9, 1, 1, 3),
    _SfpInfoDevice_Type()
)
sfpInfoDevice.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sfpInfoDevice.setStatus("current")


class _SfpInfoTXEnable_Type(Integer32):
    """Custom type sfpInfoTXEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notInstalled", 1),
          ("enabled", 2),
          ("disabled", 3))
    )


_SfpInfoTXEnable_Type.__name__ = "Integer32"
_SfpInfoTXEnable_Object = MibTableColumn
sfpInfoTXEnable = _SfpInfoTXEnable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 9, 1, 1, 4),
    _SfpInfoTXEnable_Type()
)
sfpInfoTXEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sfpInfoTXEnable.setStatus("current")


class _SfpInfoRXSignal_Type(Integer32):
    """Custom type sfpInfoRXSignal based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notInstalled", 1),
          ("lost", 2),
          ("ok", 3),
          ("notAvailable", 4))
    )


_SfpInfoRXSignal_Type.__name__ = "Integer32"
_SfpInfoRXSignal_Object = MibTableColumn
sfpInfoRXSignal = _SfpInfoRXSignal_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 9, 1, 1, 5),
    _SfpInfoRXSignal_Type()
)
sfpInfoRXSignal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sfpInfoRXSignal.setStatus("current")


class _SfpInfoTXFault_Type(Integer32):
    """Custom type sfpInfoTXFault based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notInstalled", 1),
          ("fault", 2),
          ("none", 3),
          ("notAvailable", 4))
    )


_SfpInfoTXFault_Type.__name__ = "Integer32"
_SfpInfoTXFault_Object = MibTableColumn
sfpInfoTXFault = _SfpInfoTXFault_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 9, 1, 1, 6),
    _SfpInfoTXFault_Type()
)
sfpInfoTXFault.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sfpInfoTXFault.setStatus("current")


class _SfpInfoApproved_Type(Integer32):
    """Custom type sfpInfoApproved based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notInstalled", 1),
          ("notXFP", 2),
          ("notSFP", 3),
          ("yes", 4))
    )


_SfpInfoApproved_Type.__name__ = "Integer32"
_SfpInfoApproved_Object = MibTableColumn
sfpInfoApproved = _SfpInfoApproved_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 3, 9, 1, 1, 7),
    _SfpInfoApproved_Type()
)
sfpInfoApproved.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sfpInfoApproved.setStatus("current")
_AgentOper_ObjectIdentity = ObjectIdentity
agentOper = _AgentOper_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 4)
)
_AgPortOperTable_Object = MibTable
agPortOperTable = _AgPortOperTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 4, 1)
)
if mibBuilder.loadTexts:
    agPortOperTable.setStatus("current")
_AgPortOperTableEntry_Object = MibTableRow
agPortOperTableEntry = _AgPortOperTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 4, 1, 1)
)
agPortOperTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "portOperIdx"),
)
if mibBuilder.loadTexts:
    agPortOperTableEntry.setStatus("current")
_PortOperIdx_Type = Integer32
_PortOperIdx_Object = MibTableColumn
portOperIdx = _PortOperIdx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 4, 1, 1, 1),
    _PortOperIdx_Type()
)
portOperIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portOperIdx.setStatus("current")


class _PortOperState_Type(Integer32):
    """Custom type portOperState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_PortOperState_Type.__name__ = "Integer32"
_PortOperState_Object = MibTableColumn
portOperState = _PortOperState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 4, 1, 1, 2),
    _PortOperState_Type()
)
portOperState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portOperState.setStatus("current")


class _PortOperRmon_Type(Integer32):
    """Custom type portOperRmon based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_PortOperRmon_Type.__name__ = "Integer32"
_PortOperRmon_Object = MibTableColumn
portOperRmon = _PortOperRmon_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 4, 1, 1, 3),
    _PortOperRmon_Type()
)
portOperRmon.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portOperRmon.setStatus("current")
_AgNTPOper_ObjectIdentity = ObjectIdentity
agNTPOper = _AgNTPOper_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 4, 2)
)


class _NtpOperSendReq_Type(Integer32):
    """Custom type ntpOperSendReq based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_NtpOperSendReq_Type.__name__ = "Integer32"
_NtpOperSendReq_Object = MibScalar
ntpOperSendReq = _NtpOperSendReq_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 4, 2, 1),
    _NtpOperSendReq_Type()
)
ntpOperSendReq.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ntpOperSendReq.setStatus("current")
_PortOperDot1xTable_Object = MibTable
portOperDot1xTable = _PortOperDot1xTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 4, 3)
)
if mibBuilder.loadTexts:
    portOperDot1xTable.setStatus("current")
_PortOperDot1xTableEntry_Object = MibTableRow
portOperDot1xTableEntry = _PortOperDot1xTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 4, 3, 1)
)
portOperDot1xTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "portOperDot1xIndx"),
)
if mibBuilder.loadTexts:
    portOperDot1xTableEntry.setStatus("current")
_PortOperDot1xIndx_Type = Integer32
_PortOperDot1xIndx_Object = MibTableColumn
portOperDot1xIndx = _PortOperDot1xIndx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 4, 3, 1, 1),
    _PortOperDot1xIndx_Type()
)
portOperDot1xIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portOperDot1xIndx.setStatus("current")


class _PortOperDot1xReset_Type(Integer32):
    """Custom type portOperDot1xReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_PortOperDot1xReset_Type.__name__ = "Integer32"
_PortOperDot1xReset_Object = MibTableColumn
portOperDot1xReset = _PortOperDot1xReset_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 4, 3, 1, 2),
    _PortOperDot1xReset_Type()
)
portOperDot1xReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portOperDot1xReset.setStatus("current")


class _PortOperDot1xReauth_Type(Integer32):
    """Custom type portOperDot1xReauth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_PortOperDot1xReauth_Type.__name__ = "Integer32"
_PortOperDot1xReauth_Object = MibTableColumn
portOperDot1xReauth = _PortOperDot1xReauth_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 1, 4, 3, 1, 3),
    _PortOperDot1xReauth_Type()
)
portOperDot1xReauth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portOperDot1xReauth.setStatus("current")
_Layer2_ObjectIdentity = ObjectIdentity
layer2 = _Layer2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2)
)
_Layer2Configs_ObjectIdentity = ObjectIdentity
layer2Configs = _Layer2Configs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1)
)
_Vlan_ObjectIdentity = ObjectIdentity
vlan = _Vlan_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 1)
)
_VlanMaxEnt_Type = Integer32
_VlanMaxEnt_Object = MibScalar
vlanMaxEnt = _VlanMaxEnt_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 1, 1),
    _VlanMaxEnt_Type()
)
vlanMaxEnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanMaxEnt.setStatus("current")
_VlanCurCfgTable_Object = MibTable
vlanCurCfgTable = _VlanCurCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 1, 2)
)
if mibBuilder.loadTexts:
    vlanCurCfgTable.setStatus("current")
_VlanCurCfgTableEntry_Object = MibTableRow
vlanCurCfgTableEntry = _VlanCurCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 1, 2, 1)
)
vlanCurCfgTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "vlanCurCfgVlanId"),
)
if mibBuilder.loadTexts:
    vlanCurCfgTableEntry.setStatus("current")
_VlanCurCfgVlanId_Type = Integer32
_VlanCurCfgVlanId_Object = MibTableColumn
vlanCurCfgVlanId = _VlanCurCfgVlanId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 1, 2, 1, 1),
    _VlanCurCfgVlanId_Type()
)
vlanCurCfgVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanCurCfgVlanId.setStatus("current")


class _VlanCurCfgVlanName_Type(DisplayString):
    """Custom type vlanCurCfgVlanName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_VlanCurCfgVlanName_Type.__name__ = "DisplayString"
_VlanCurCfgVlanName_Object = MibTableColumn
vlanCurCfgVlanName = _VlanCurCfgVlanName_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 1, 2, 1, 2),
    _VlanCurCfgVlanName_Type()
)
vlanCurCfgVlanName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanCurCfgVlanName.setStatus("current")
_VlanCurCfgPorts_Type = OctetString
_VlanCurCfgPorts_Object = MibTableColumn
vlanCurCfgPorts = _VlanCurCfgPorts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 1, 2, 1, 3),
    _VlanCurCfgPorts_Type()
)
vlanCurCfgPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanCurCfgPorts.setStatus("current")


class _VlanCurCfgState_Type(Integer32):
    """Custom type vlanCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_VlanCurCfgState_Type.__name__ = "Integer32"
_VlanCurCfgState_Object = MibTableColumn
vlanCurCfgState = _VlanCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 1, 2, 1, 4),
    _VlanCurCfgState_Type()
)
vlanCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanCurCfgState.setStatus("current")
_VlanCurCfgStg_Type = Integer32
_VlanCurCfgStg_Object = MibTableColumn
vlanCurCfgStg = _VlanCurCfgStg_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 1, 2, 1, 6),
    _VlanCurCfgStg_Type()
)
vlanCurCfgStg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanCurCfgStg.setStatus("current")
_VlanNewCfgTable_Object = MibTable
vlanNewCfgTable = _VlanNewCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 1, 3)
)
if mibBuilder.loadTexts:
    vlanNewCfgTable.setStatus("current")
_VlanNewCfgTableEntry_Object = MibTableRow
vlanNewCfgTableEntry = _VlanNewCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 1, 3, 1)
)
vlanNewCfgTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "vlanNewCfgVlanId"),
)
if mibBuilder.loadTexts:
    vlanNewCfgTableEntry.setStatus("current")
_VlanNewCfgVlanId_Type = Integer32
_VlanNewCfgVlanId_Object = MibTableColumn
vlanNewCfgVlanId = _VlanNewCfgVlanId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 1, 3, 1, 1),
    _VlanNewCfgVlanId_Type()
)
vlanNewCfgVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanNewCfgVlanId.setStatus("current")


class _VlanNewCfgVlanName_Type(DisplayString):
    """Custom type vlanNewCfgVlanName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_VlanNewCfgVlanName_Type.__name__ = "DisplayString"
_VlanNewCfgVlanName_Object = MibTableColumn
vlanNewCfgVlanName = _VlanNewCfgVlanName_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 1, 3, 1, 2),
    _VlanNewCfgVlanName_Type()
)
vlanNewCfgVlanName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vlanNewCfgVlanName.setStatus("current")
_VlanNewCfgPorts_Type = OctetString
_VlanNewCfgPorts_Object = MibTableColumn
vlanNewCfgPorts = _VlanNewCfgPorts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 1, 3, 1, 3),
    _VlanNewCfgPorts_Type()
)
vlanNewCfgPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanNewCfgPorts.setStatus("current")


class _VlanNewCfgState_Type(Integer32):
    """Custom type vlanNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_VlanNewCfgState_Type.__name__ = "Integer32"
_VlanNewCfgState_Object = MibTableColumn
vlanNewCfgState = _VlanNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 1, 3, 1, 4),
    _VlanNewCfgState_Type()
)
vlanNewCfgState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vlanNewCfgState.setStatus("current")
_VlanNewCfgAddPort_Type = Integer32
_VlanNewCfgAddPort_Object = MibTableColumn
vlanNewCfgAddPort = _VlanNewCfgAddPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 1, 3, 1, 5),
    _VlanNewCfgAddPort_Type()
)
vlanNewCfgAddPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vlanNewCfgAddPort.setStatus("current")
_VlanNewCfgRemovePort_Type = Integer32
_VlanNewCfgRemovePort_Object = MibTableColumn
vlanNewCfgRemovePort = _VlanNewCfgRemovePort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 1, 3, 1, 6),
    _VlanNewCfgRemovePort_Type()
)
vlanNewCfgRemovePort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vlanNewCfgRemovePort.setStatus("current")


class _VlanNewCfgDelete_Type(Integer32):
    """Custom type vlanNewCfgDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_VlanNewCfgDelete_Type.__name__ = "Integer32"
_VlanNewCfgDelete_Object = MibTableColumn
vlanNewCfgDelete = _VlanNewCfgDelete_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 1, 3, 1, 7),
    _VlanNewCfgDelete_Type()
)
vlanNewCfgDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vlanNewCfgDelete.setStatus("current")
_VlanNewCfgStg_Type = Integer32
_VlanNewCfgStg_Object = MibTableColumn
vlanNewCfgStg = _VlanNewCfgStg_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 1, 3, 1, 9),
    _VlanNewCfgStg_Type()
)
vlanNewCfgStg.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vlanNewCfgStg.setStatus("current")
_Trunkgroup_ObjectIdentity = ObjectIdentity
trunkgroup = _Trunkgroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 2)
)
_TrunkGroupTableMaxSize_Type = Integer32
_TrunkGroupTableMaxSize_Object = MibScalar
trunkGroupTableMaxSize = _TrunkGroupTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 2, 1),
    _TrunkGroupTableMaxSize_Type()
)
trunkGroupTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    trunkGroupTableMaxSize.setStatus("current")
_TrunkGroupCurCfgTable_Object = MibTable
trunkGroupCurCfgTable = _TrunkGroupCurCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 2, 2)
)
if mibBuilder.loadTexts:
    trunkGroupCurCfgTable.setStatus("current")
_TrunkGroupCurCfgTableEntry_Object = MibTableRow
trunkGroupCurCfgTableEntry = _TrunkGroupCurCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 2, 2, 1)
)
trunkGroupCurCfgTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "trunkGroupCurCfgIndex"),
)
if mibBuilder.loadTexts:
    trunkGroupCurCfgTableEntry.setStatus("current")
_TrunkGroupCurCfgIndex_Type = Integer32
_TrunkGroupCurCfgIndex_Object = MibTableColumn
trunkGroupCurCfgIndex = _TrunkGroupCurCfgIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 2, 2, 1, 1),
    _TrunkGroupCurCfgIndex_Type()
)
trunkGroupCurCfgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    trunkGroupCurCfgIndex.setStatus("current")
_TrunkGroupCurCfgPorts_Type = OctetString
_TrunkGroupCurCfgPorts_Object = MibTableColumn
trunkGroupCurCfgPorts = _TrunkGroupCurCfgPorts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 2, 2, 1, 2),
    _TrunkGroupCurCfgPorts_Type()
)
trunkGroupCurCfgPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    trunkGroupCurCfgPorts.setStatus("current")


class _TrunkGroupCurCfgState_Type(Integer32):
    """Custom type trunkGroupCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_TrunkGroupCurCfgState_Type.__name__ = "Integer32"
_TrunkGroupCurCfgState_Object = MibTableColumn
trunkGroupCurCfgState = _TrunkGroupCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 2, 2, 1, 3),
    _TrunkGroupCurCfgState_Type()
)
trunkGroupCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    trunkGroupCurCfgState.setStatus("current")
_TrunkGroupNewCfgTable_Object = MibTable
trunkGroupNewCfgTable = _TrunkGroupNewCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 2, 3)
)
if mibBuilder.loadTexts:
    trunkGroupNewCfgTable.setStatus("current")
_TrunkGroupNewCfgTableEntry_Object = MibTableRow
trunkGroupNewCfgTableEntry = _TrunkGroupNewCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 2, 3, 1)
)
trunkGroupNewCfgTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "trunkGroupNewCfgIndex"),
)
if mibBuilder.loadTexts:
    trunkGroupNewCfgTableEntry.setStatus("current")
_TrunkGroupNewCfgIndex_Type = Integer32
_TrunkGroupNewCfgIndex_Object = MibTableColumn
trunkGroupNewCfgIndex = _TrunkGroupNewCfgIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 2, 3, 1, 1),
    _TrunkGroupNewCfgIndex_Type()
)
trunkGroupNewCfgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    trunkGroupNewCfgIndex.setStatus("current")
_TrunkGroupNewCfgPorts_Type = OctetString
_TrunkGroupNewCfgPorts_Object = MibTableColumn
trunkGroupNewCfgPorts = _TrunkGroupNewCfgPorts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 2, 3, 1, 2),
    _TrunkGroupNewCfgPorts_Type()
)
trunkGroupNewCfgPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    trunkGroupNewCfgPorts.setStatus("current")
_TrunkGroupNewCfgAddPort_Type = Integer32
_TrunkGroupNewCfgAddPort_Object = MibTableColumn
trunkGroupNewCfgAddPort = _TrunkGroupNewCfgAddPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 2, 3, 1, 3),
    _TrunkGroupNewCfgAddPort_Type()
)
trunkGroupNewCfgAddPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    trunkGroupNewCfgAddPort.setStatus("current")
_TrunkGroupNewCfgRemovePort_Type = Integer32
_TrunkGroupNewCfgRemovePort_Object = MibTableColumn
trunkGroupNewCfgRemovePort = _TrunkGroupNewCfgRemovePort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 2, 3, 1, 4),
    _TrunkGroupNewCfgRemovePort_Type()
)
trunkGroupNewCfgRemovePort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    trunkGroupNewCfgRemovePort.setStatus("current")


class _TrunkGroupNewCfgState_Type(Integer32):
    """Custom type trunkGroupNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_TrunkGroupNewCfgState_Type.__name__ = "Integer32"
_TrunkGroupNewCfgState_Object = MibTableColumn
trunkGroupNewCfgState = _TrunkGroupNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 2, 3, 1, 5),
    _TrunkGroupNewCfgState_Type()
)
trunkGroupNewCfgState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    trunkGroupNewCfgState.setStatus("current")


class _TrunkGroupNewCfgDelete_Type(Integer32):
    """Custom type trunkGroupNewCfgDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_TrunkGroupNewCfgDelete_Type.__name__ = "Integer32"
_TrunkGroupNewCfgDelete_Object = MibTableColumn
trunkGroupNewCfgDelete = _TrunkGroupNewCfgDelete_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 2, 3, 1, 6),
    _TrunkGroupNewCfgDelete_Type()
)
trunkGroupNewCfgDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    trunkGroupNewCfgDelete.setStatus("current")
_StgCfg_ObjectIdentity = ObjectIdentity
stgCfg = _StgCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3)
)
_StgCurCfgTable_Object = MibTable
stgCurCfgTable = _StgCurCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 1)
)
if mibBuilder.loadTexts:
    stgCurCfgTable.setStatus("current")
_StgCurCfgTableEntry_Object = MibTableRow
stgCurCfgTableEntry = _StgCurCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 1, 1)
)
stgCurCfgTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "stgCurCfgIndex"),
)
if mibBuilder.loadTexts:
    stgCurCfgTableEntry.setStatus("current")
_StgCurCfgIndex_Type = Integer32
_StgCurCfgIndex_Object = MibTableColumn
stgCurCfgIndex = _StgCurCfgIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 1, 1, 1),
    _StgCurCfgIndex_Type()
)
stgCurCfgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgCurCfgIndex.setStatus("current")


class _StgCurCfgState_Type(Integer32):
    """Custom type stgCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_StgCurCfgState_Type.__name__ = "Integer32"
_StgCurCfgState_Object = MibTableColumn
stgCurCfgState = _StgCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 1, 1, 2),
    _StgCurCfgState_Type()
)
stgCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgCurCfgState.setStatus("current")


class _StgCurCfgPriority_Type(Integer32):
    """Custom type stgCurCfgPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_StgCurCfgPriority_Type.__name__ = "Integer32"
_StgCurCfgPriority_Object = MibTableColumn
stgCurCfgPriority = _StgCurCfgPriority_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 1, 1, 5),
    _StgCurCfgPriority_Type()
)
stgCurCfgPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgCurCfgPriority.setStatus("current")


class _StgCurCfgBrgHelloTime_Type(Integer32):
    """Custom type stgCurCfgBrgHelloTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_StgCurCfgBrgHelloTime_Type.__name__ = "Integer32"
_StgCurCfgBrgHelloTime_Object = MibTableColumn
stgCurCfgBrgHelloTime = _StgCurCfgBrgHelloTime_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 1, 1, 6),
    _StgCurCfgBrgHelloTime_Type()
)
stgCurCfgBrgHelloTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgCurCfgBrgHelloTime.setStatus("current")


class _StgCurCfgBrgForwardDelay_Type(Integer32):
    """Custom type stgCurCfgBrgForwardDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 30),
    )


_StgCurCfgBrgForwardDelay_Type.__name__ = "Integer32"
_StgCurCfgBrgForwardDelay_Object = MibTableColumn
stgCurCfgBrgForwardDelay = _StgCurCfgBrgForwardDelay_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 1, 1, 7),
    _StgCurCfgBrgForwardDelay_Type()
)
stgCurCfgBrgForwardDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgCurCfgBrgForwardDelay.setStatus("current")


class _StgCurCfgBrgMaxAge_Type(Integer32):
    """Custom type stgCurCfgBrgMaxAge based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(6, 40),
    )


_StgCurCfgBrgMaxAge_Type.__name__ = "Integer32"
_StgCurCfgBrgMaxAge_Object = MibTableColumn
stgCurCfgBrgMaxAge = _StgCurCfgBrgMaxAge_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 1, 1, 8),
    _StgCurCfgBrgMaxAge_Type()
)
stgCurCfgBrgMaxAge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgCurCfgBrgMaxAge.setStatus("current")


class _StgCurCfgVlanBmap_Type(OctetString):
    """Custom type stgCurCfgVlanBmap based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 512),
    )


_StgCurCfgVlanBmap_Type.__name__ = "OctetString"
_StgCurCfgVlanBmap_Object = MibTableColumn
stgCurCfgVlanBmap = _StgCurCfgVlanBmap_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 1, 1, 10),
    _StgCurCfgVlanBmap_Type()
)
stgCurCfgVlanBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgCurCfgVlanBmap.setStatus("current")
_StgNewCfgTable_Object = MibTable
stgNewCfgTable = _StgNewCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 2)
)
if mibBuilder.loadTexts:
    stgNewCfgTable.setStatus("current")
_StgNewCfgTableEntry_Object = MibTableRow
stgNewCfgTableEntry = _StgNewCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 2, 1)
)
stgNewCfgTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "stgNewCfgIndex"),
)
if mibBuilder.loadTexts:
    stgNewCfgTableEntry.setStatus("current")
_StgNewCfgIndex_Type = Integer32
_StgNewCfgIndex_Object = MibTableColumn
stgNewCfgIndex = _StgNewCfgIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 2, 1, 1),
    _StgNewCfgIndex_Type()
)
stgNewCfgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgNewCfgIndex.setStatus("current")


class _StgNewCfgState_Type(Integer32):
    """Custom type stgNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_StgNewCfgState_Type.__name__ = "Integer32"
_StgNewCfgState_Object = MibTableColumn
stgNewCfgState = _StgNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 2, 1, 2),
    _StgNewCfgState_Type()
)
stgNewCfgState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stgNewCfgState.setStatus("current")


class _StgNewCfgDefaultCfg_Type(Integer32):
    """Custom type stgNewCfgDefaultCfg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("default-config", 1)
    )


_StgNewCfgDefaultCfg_Type.__name__ = "Integer32"
_StgNewCfgDefaultCfg_Object = MibTableColumn
stgNewCfgDefaultCfg = _StgNewCfgDefaultCfg_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 2, 1, 3),
    _StgNewCfgDefaultCfg_Type()
)
stgNewCfgDefaultCfg.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stgNewCfgDefaultCfg.setStatus("current")
_StgNewCfgAddVlan_Type = Integer32
_StgNewCfgAddVlan_Object = MibTableColumn
stgNewCfgAddVlan = _StgNewCfgAddVlan_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 2, 1, 4),
    _StgNewCfgAddVlan_Type()
)
stgNewCfgAddVlan.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stgNewCfgAddVlan.setStatus("current")
_StgNewCfgRemoveVlan_Type = Integer32
_StgNewCfgRemoveVlan_Object = MibTableColumn
stgNewCfgRemoveVlan = _StgNewCfgRemoveVlan_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 2, 1, 5),
    _StgNewCfgRemoveVlan_Type()
)
stgNewCfgRemoveVlan.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stgNewCfgRemoveVlan.setStatus("current")


class _StgNewCfgPriority_Type(Integer32):
    """Custom type stgNewCfgPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_StgNewCfgPriority_Type.__name__ = "Integer32"
_StgNewCfgPriority_Object = MibTableColumn
stgNewCfgPriority = _StgNewCfgPriority_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 2, 1, 8),
    _StgNewCfgPriority_Type()
)
stgNewCfgPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stgNewCfgPriority.setStatus("current")


class _StgNewCfgBrgHelloTime_Type(Integer32):
    """Custom type stgNewCfgBrgHelloTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_StgNewCfgBrgHelloTime_Type.__name__ = "Integer32"
_StgNewCfgBrgHelloTime_Object = MibTableColumn
stgNewCfgBrgHelloTime = _StgNewCfgBrgHelloTime_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 2, 1, 9),
    _StgNewCfgBrgHelloTime_Type()
)
stgNewCfgBrgHelloTime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stgNewCfgBrgHelloTime.setStatus("current")


class _StgNewCfgBrgForwardDelay_Type(Integer32):
    """Custom type stgNewCfgBrgForwardDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 30),
    )


_StgNewCfgBrgForwardDelay_Type.__name__ = "Integer32"
_StgNewCfgBrgForwardDelay_Object = MibTableColumn
stgNewCfgBrgForwardDelay = _StgNewCfgBrgForwardDelay_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 2, 1, 10),
    _StgNewCfgBrgForwardDelay_Type()
)
stgNewCfgBrgForwardDelay.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stgNewCfgBrgForwardDelay.setStatus("current")


class _StgNewCfgBrgMaxAge_Type(Integer32):
    """Custom type stgNewCfgBrgMaxAge based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(6, 40),
    )


_StgNewCfgBrgMaxAge_Type.__name__ = "Integer32"
_StgNewCfgBrgMaxAge_Object = MibTableColumn
stgNewCfgBrgMaxAge = _StgNewCfgBrgMaxAge_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 2, 1, 11),
    _StgNewCfgBrgMaxAge_Type()
)
stgNewCfgBrgMaxAge.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stgNewCfgBrgMaxAge.setStatus("current")


class _StgNewCfgVlanBmap_Type(OctetString):
    """Custom type stgNewCfgVlanBmap based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 512),
    )


_StgNewCfgVlanBmap_Type.__name__ = "OctetString"
_StgNewCfgVlanBmap_Object = MibTableColumn
stgNewCfgVlanBmap = _StgNewCfgVlanBmap_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 2, 1, 13),
    _StgNewCfgVlanBmap_Type()
)
stgNewCfgVlanBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgNewCfgVlanBmap.setStatus("current")
_StgCurCfgPortTable_Object = MibTable
stgCurCfgPortTable = _StgCurCfgPortTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 3)
)
if mibBuilder.loadTexts:
    stgCurCfgPortTable.setStatus("current")
_StgCurCfgPortTableEntry_Object = MibTableRow
stgCurCfgPortTableEntry = _StgCurCfgPortTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 3, 1)
)
stgCurCfgPortTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "stgCurCfgStgIndex"),
    (0, "BLADETYPE5-NETWORK-MIB", "stgCurCfgPortIndex"),
)
if mibBuilder.loadTexts:
    stgCurCfgPortTableEntry.setStatus("current")
_StgCurCfgStgIndex_Type = Integer32
_StgCurCfgStgIndex_Object = MibTableColumn
stgCurCfgStgIndex = _StgCurCfgStgIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 3, 1, 1),
    _StgCurCfgStgIndex_Type()
)
stgCurCfgStgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgCurCfgStgIndex.setStatus("current")
_StgCurCfgPortIndex_Type = Integer32
_StgCurCfgPortIndex_Object = MibTableColumn
stgCurCfgPortIndex = _StgCurCfgPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 3, 1, 2),
    _StgCurCfgPortIndex_Type()
)
stgCurCfgPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgCurCfgPortIndex.setStatus("current")


class _StgCurCfgPortState_Type(Integer32):
    """Custom type stgCurCfgPortState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_StgCurCfgPortState_Type.__name__ = "Integer32"
_StgCurCfgPortState_Object = MibTableColumn
stgCurCfgPortState = _StgCurCfgPortState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 3, 1, 3),
    _StgCurCfgPortState_Type()
)
stgCurCfgPortState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgCurCfgPortState.setStatus("current")


class _StgCurCfgPortPriority_Type(Integer32):
    """Custom type stgCurCfgPortPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_StgCurCfgPortPriority_Type.__name__ = "Integer32"
_StgCurCfgPortPriority_Object = MibTableColumn
stgCurCfgPortPriority = _StgCurCfgPortPriority_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 3, 1, 4),
    _StgCurCfgPortPriority_Type()
)
stgCurCfgPortPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgCurCfgPortPriority.setStatus("current")


class _StgCurCfgPortPathCost_Type(Integer32):
    """Custom type stgCurCfgPortPathCost based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_StgCurCfgPortPathCost_Type.__name__ = "Integer32"
_StgCurCfgPortPathCost_Object = MibTableColumn
stgCurCfgPortPathCost = _StgCurCfgPortPathCost_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 3, 1, 5),
    _StgCurCfgPortPathCost_Type()
)
stgCurCfgPortPathCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgCurCfgPortPathCost.setStatus("current")


class _StgCurCfgPortLink_Type(Integer32):
    """Custom type stgCurCfgPortLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("p2p", 2),
          ("shared", 3))
    )


_StgCurCfgPortLink_Type.__name__ = "Integer32"
_StgCurCfgPortLink_Object = MibTableColumn
stgCurCfgPortLink = _StgCurCfgPortLink_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 3, 1, 6),
    _StgCurCfgPortLink_Type()
)
stgCurCfgPortLink.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgCurCfgPortLink.setStatus("current")


class _StgCurCfgPortEdge_Type(Integer32):
    """Custom type stgCurCfgPortEdge based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_StgCurCfgPortEdge_Type.__name__ = "Integer32"
_StgCurCfgPortEdge_Object = MibTableColumn
stgCurCfgPortEdge = _StgCurCfgPortEdge_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 3, 1, 7),
    _StgCurCfgPortEdge_Type()
)
stgCurCfgPortEdge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgCurCfgPortEdge.setStatus("current")


class _StgCurCfgPortFastFwd_Type(Integer32):
    """Custom type stgCurCfgPortFastFwd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_StgCurCfgPortFastFwd_Type.__name__ = "Integer32"
_StgCurCfgPortFastFwd_Object = MibTableColumn
stgCurCfgPortFastFwd = _StgCurCfgPortFastFwd_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 3, 1, 8),
    _StgCurCfgPortFastFwd_Type()
)
stgCurCfgPortFastFwd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgCurCfgPortFastFwd.setStatus("current")
_StgNewCfgPortTable_Object = MibTable
stgNewCfgPortTable = _StgNewCfgPortTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 4)
)
if mibBuilder.loadTexts:
    stgNewCfgPortTable.setStatus("current")
_StgNewCfgPortTableEntry_Object = MibTableRow
stgNewCfgPortTableEntry = _StgNewCfgPortTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 4, 1)
)
stgNewCfgPortTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "stgNewCfgStgIndex"),
    (0, "BLADETYPE5-NETWORK-MIB", "stgNewCfgPortIndex"),
)
if mibBuilder.loadTexts:
    stgNewCfgPortTableEntry.setStatus("current")
_StgNewCfgStgIndex_Type = Integer32
_StgNewCfgStgIndex_Object = MibTableColumn
stgNewCfgStgIndex = _StgNewCfgStgIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 4, 1, 1),
    _StgNewCfgStgIndex_Type()
)
stgNewCfgStgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgNewCfgStgIndex.setStatus("current")
_StgNewCfgPortIndex_Type = Integer32
_StgNewCfgPortIndex_Object = MibTableColumn
stgNewCfgPortIndex = _StgNewCfgPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 4, 1, 2),
    _StgNewCfgPortIndex_Type()
)
stgNewCfgPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgNewCfgPortIndex.setStatus("current")


class _StgNewCfgPortState_Type(Integer32):
    """Custom type stgNewCfgPortState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_StgNewCfgPortState_Type.__name__ = "Integer32"
_StgNewCfgPortState_Object = MibTableColumn
stgNewCfgPortState = _StgNewCfgPortState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 4, 1, 3),
    _StgNewCfgPortState_Type()
)
stgNewCfgPortState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stgNewCfgPortState.setStatus("current")


class _StgNewCfgPortPriority_Type(Integer32):
    """Custom type stgNewCfgPortPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_StgNewCfgPortPriority_Type.__name__ = "Integer32"
_StgNewCfgPortPriority_Object = MibTableColumn
stgNewCfgPortPriority = _StgNewCfgPortPriority_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 4, 1, 4),
    _StgNewCfgPortPriority_Type()
)
stgNewCfgPortPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stgNewCfgPortPriority.setStatus("current")


class _StgNewCfgPortPathCost_Type(Integer32):
    """Custom type stgNewCfgPortPathCost based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_StgNewCfgPortPathCost_Type.__name__ = "Integer32"
_StgNewCfgPortPathCost_Object = MibTableColumn
stgNewCfgPortPathCost = _StgNewCfgPortPathCost_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 4, 1, 5),
    _StgNewCfgPortPathCost_Type()
)
stgNewCfgPortPathCost.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stgNewCfgPortPathCost.setStatus("current")


class _StgNewCfgPortLink_Type(Integer32):
    """Custom type stgNewCfgPortLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("p2p", 2),
          ("shared", 3))
    )


_StgNewCfgPortLink_Type.__name__ = "Integer32"
_StgNewCfgPortLink_Object = MibTableColumn
stgNewCfgPortLink = _StgNewCfgPortLink_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 4, 1, 6),
    _StgNewCfgPortLink_Type()
)
stgNewCfgPortLink.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stgNewCfgPortLink.setStatus("current")


class _StgNewCfgPortEdge_Type(Integer32):
    """Custom type stgNewCfgPortEdge based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_StgNewCfgPortEdge_Type.__name__ = "Integer32"
_StgNewCfgPortEdge_Object = MibTableColumn
stgNewCfgPortEdge = _StgNewCfgPortEdge_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 4, 1, 7),
    _StgNewCfgPortEdge_Type()
)
stgNewCfgPortEdge.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stgNewCfgPortEdge.setStatus("current")


class _StgNewCfgPortFastFwd_Type(Integer32):
    """Custom type stgNewCfgPortFastFwd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_StgNewCfgPortFastFwd_Type.__name__ = "Integer32"
_StgNewCfgPortFastFwd_Object = MibTableColumn
stgNewCfgPortFastFwd = _StgNewCfgPortFastFwd_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 3, 4, 1, 8),
    _StgNewCfgPortFastFwd_Type()
)
stgNewCfgPortFastFwd.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    stgNewCfgPortFastFwd.setStatus("current")
_Mirroring_ObjectIdentity = ObjectIdentity
mirroring = _Mirroring_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 4)
)
_MirrPortMirr_ObjectIdentity = ObjectIdentity
mirrPortMirr = _MirrPortMirr_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 4, 1)
)


class _PmCurCfgPortMirrState_Type(Integer32):
    """Custom type pmCurCfgPortMirrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_PmCurCfgPortMirrState_Type.__name__ = "Integer32"
_PmCurCfgPortMirrState_Object = MibScalar
pmCurCfgPortMirrState = _PmCurCfgPortMirrState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 4, 1, 1),
    _PmCurCfgPortMirrState_Type()
)
pmCurCfgPortMirrState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmCurCfgPortMirrState.setStatus("current")


class _PmNewCfgPortMirrState_Type(Integer32):
    """Custom type pmNewCfgPortMirrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_PmNewCfgPortMirrState_Type.__name__ = "Integer32"
_PmNewCfgPortMirrState_Object = MibScalar
pmNewCfgPortMirrState = _PmNewCfgPortMirrState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 4, 1, 2),
    _PmNewCfgPortMirrState_Type()
)
pmNewCfgPortMirrState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pmNewCfgPortMirrState.setStatus("current")
_PmCurCfgPortMonitorTable_Object = MibTable
pmCurCfgPortMonitorTable = _PmCurCfgPortMonitorTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 4, 1, 3)
)
if mibBuilder.loadTexts:
    pmCurCfgPortMonitorTable.setStatus("current")
_PmCurCfgPortMonitorEntry_Object = MibTableRow
pmCurCfgPortMonitorEntry = _PmCurCfgPortMonitorEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 4, 1, 3, 1)
)
pmCurCfgPortMonitorEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "pmCurCfgPmirrMoniPortIndex"),
    (0, "BLADETYPE5-NETWORK-MIB", "pmCurCfgPmirrMirrPortIndex"),
)
if mibBuilder.loadTexts:
    pmCurCfgPortMonitorEntry.setStatus("current")
_PmCurCfgPmirrMoniPortIndex_Type = Integer32
_PmCurCfgPmirrMoniPortIndex_Object = MibTableColumn
pmCurCfgPmirrMoniPortIndex = _PmCurCfgPmirrMoniPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 4, 1, 3, 1, 1),
    _PmCurCfgPmirrMoniPortIndex_Type()
)
pmCurCfgPmirrMoniPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmCurCfgPmirrMoniPortIndex.setStatus("current")
_PmCurCfgPmirrMirrPortIndex_Type = Integer32
_PmCurCfgPmirrMirrPortIndex_Object = MibTableColumn
pmCurCfgPmirrMirrPortIndex = _PmCurCfgPmirrMirrPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 4, 1, 3, 1, 2),
    _PmCurCfgPmirrMirrPortIndex_Type()
)
pmCurCfgPmirrMirrPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmCurCfgPmirrMirrPortIndex.setStatus("current")


class _PmCurCfgPmirrDirection_Type(Integer32):
    """Custom type pmCurCfgPmirrDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("in", 1),
          ("out", 2),
          ("both", 3))
    )


_PmCurCfgPmirrDirection_Type.__name__ = "Integer32"
_PmCurCfgPmirrDirection_Object = MibTableColumn
pmCurCfgPmirrDirection = _PmCurCfgPmirrDirection_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 4, 1, 3, 1, 3),
    _PmCurCfgPmirrDirection_Type()
)
pmCurCfgPmirrDirection.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmCurCfgPmirrDirection.setStatus("current")
_PmNewCfgPortMonitorTable_Object = MibTable
pmNewCfgPortMonitorTable = _PmNewCfgPortMonitorTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 4, 1, 4)
)
if mibBuilder.loadTexts:
    pmNewCfgPortMonitorTable.setStatus("current")
_PmNewCfgPortMonitorEntry_Object = MibTableRow
pmNewCfgPortMonitorEntry = _PmNewCfgPortMonitorEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 4, 1, 4, 1)
)
pmNewCfgPortMonitorEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "pmNewCfgPmirrMoniPortIndex"),
    (0, "BLADETYPE5-NETWORK-MIB", "pmNewCfgPmirrMirrPortIndex"),
)
if mibBuilder.loadTexts:
    pmNewCfgPortMonitorEntry.setStatus("current")
_PmNewCfgPmirrMoniPortIndex_Type = Integer32
_PmNewCfgPmirrMoniPortIndex_Object = MibTableColumn
pmNewCfgPmirrMoniPortIndex = _PmNewCfgPmirrMoniPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 4, 1, 4, 1, 1),
    _PmNewCfgPmirrMoniPortIndex_Type()
)
pmNewCfgPmirrMoniPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmNewCfgPmirrMoniPortIndex.setStatus("current")
_PmNewCfgPmirrMirrPortIndex_Type = Integer32
_PmNewCfgPmirrMirrPortIndex_Object = MibTableColumn
pmNewCfgPmirrMirrPortIndex = _PmNewCfgPmirrMirrPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 4, 1, 4, 1, 2),
    _PmNewCfgPmirrMirrPortIndex_Type()
)
pmNewCfgPmirrMirrPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pmNewCfgPmirrMirrPortIndex.setStatus("current")


class _PmNewCfgPmirrDirection_Type(Integer32):
    """Custom type pmNewCfgPmirrDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("in", 1),
          ("out", 2),
          ("both", 3))
    )


_PmNewCfgPmirrDirection_Type.__name__ = "Integer32"
_PmNewCfgPmirrDirection_Object = MibTableColumn
pmNewCfgPmirrDirection = _PmNewCfgPmirrDirection_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 4, 1, 4, 1, 3),
    _PmNewCfgPmirrDirection_Type()
)
pmNewCfgPmirrDirection.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pmNewCfgPmirrDirection.setStatus("current")


class _PmNewCfgPmirrDelete_Type(Integer32):
    """Custom type pmNewCfgPmirrDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_PmNewCfgPmirrDelete_Type.__name__ = "Integer32"
_PmNewCfgPmirrDelete_Object = MibTableColumn
pmNewCfgPmirrDelete = _PmNewCfgPmirrDelete_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 4, 1, 4, 1, 4),
    _PmNewCfgPmirrDelete_Type()
)
pmNewCfgPmirrDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pmNewCfgPmirrDelete.setStatus("current")


class _PmNewCfgPmonDelete_Type(Integer32):
    """Custom type pmNewCfgPmonDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_PmNewCfgPmonDelete_Type.__name__ = "Integer32"
_PmNewCfgPmonDelete_Object = MibTableColumn
pmNewCfgPmonDelete = _PmNewCfgPmonDelete_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 4, 1, 4, 1, 10),
    _PmNewCfgPmonDelete_Type()
)
pmNewCfgPmonDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    pmNewCfgPmonDelete.setStatus("current")
_MstCfg_ObjectIdentity = ObjectIdentity
mstCfg = _MstCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5)
)
_MstGeneralCfg_ObjectIdentity = ObjectIdentity
mstGeneralCfg = _MstGeneralCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 1)
)


class _MstCurCfgState_Type(Integer32):
    """Custom type mstCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_MstCurCfgState_Type.__name__ = "Integer32"
_MstCurCfgState_Object = MibScalar
mstCurCfgState = _MstCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 1, 1),
    _MstCurCfgState_Type()
)
mstCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstCurCfgState.setStatus("current")


class _MstNewCfgState_Type(Integer32):
    """Custom type mstNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_MstNewCfgState_Type.__name__ = "Integer32"
_MstNewCfgState_Object = MibScalar
mstNewCfgState = _MstNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 1, 2),
    _MstNewCfgState_Type()
)
mstNewCfgState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstNewCfgState.setStatus("current")


class _MstCurCfgRegionName_Type(DisplayString):
    """Custom type mstCurCfgRegionName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_MstCurCfgRegionName_Type.__name__ = "DisplayString"
_MstCurCfgRegionName_Object = MibScalar
mstCurCfgRegionName = _MstCurCfgRegionName_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 1, 3),
    _MstCurCfgRegionName_Type()
)
mstCurCfgRegionName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstCurCfgRegionName.setStatus("current")


class _MstNewCfgRegionName_Type(DisplayString):
    """Custom type mstNewCfgRegionName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_MstNewCfgRegionName_Type.__name__ = "DisplayString"
_MstNewCfgRegionName_Object = MibScalar
mstNewCfgRegionName = _MstNewCfgRegionName_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 1, 4),
    _MstNewCfgRegionName_Type()
)
mstNewCfgRegionName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstNewCfgRegionName.setStatus("current")


class _MstCurCfgRegionVersion_Type(Integer32):
    """Custom type mstCurCfgRegionVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_MstCurCfgRegionVersion_Type.__name__ = "Integer32"
_MstCurCfgRegionVersion_Object = MibScalar
mstCurCfgRegionVersion = _MstCurCfgRegionVersion_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 1, 5),
    _MstCurCfgRegionVersion_Type()
)
mstCurCfgRegionVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstCurCfgRegionVersion.setStatus("current")


class _MstNewCfgRegionVersion_Type(Integer32):
    """Custom type mstNewCfgRegionVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_MstNewCfgRegionVersion_Type.__name__ = "Integer32"
_MstNewCfgRegionVersion_Object = MibScalar
mstNewCfgRegionVersion = _MstNewCfgRegionVersion_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 1, 6),
    _MstNewCfgRegionVersion_Type()
)
mstNewCfgRegionVersion.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstNewCfgRegionVersion.setStatus("current")


class _MstCurCfgMaxHopCount_Type(Integer32):
    """Custom type mstCurCfgMaxHopCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 60),
    )


_MstCurCfgMaxHopCount_Type.__name__ = "Integer32"
_MstCurCfgMaxHopCount_Object = MibScalar
mstCurCfgMaxHopCount = _MstCurCfgMaxHopCount_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 1, 7),
    _MstCurCfgMaxHopCount_Type()
)
mstCurCfgMaxHopCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstCurCfgMaxHopCount.setStatus("current")


class _MstNewCfgMaxHopCount_Type(Integer32):
    """Custom type mstNewCfgMaxHopCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 60),
    )


_MstNewCfgMaxHopCount_Type.__name__ = "Integer32"
_MstNewCfgMaxHopCount_Object = MibScalar
mstNewCfgMaxHopCount = _MstNewCfgMaxHopCount_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 1, 8),
    _MstNewCfgMaxHopCount_Type()
)
mstNewCfgMaxHopCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstNewCfgMaxHopCount.setStatus("current")


class _MstCurCfgStpMode_Type(Integer32):
    """Custom type mstCurCfgStpMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("mstp", 1),
          ("rstp", 2))
    )


_MstCurCfgStpMode_Type.__name__ = "Integer32"
_MstCurCfgStpMode_Object = MibScalar
mstCurCfgStpMode = _MstCurCfgStpMode_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 1, 9),
    _MstCurCfgStpMode_Type()
)
mstCurCfgStpMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstCurCfgStpMode.setStatus("current")


class _MstNewCfgStpMode_Type(Integer32):
    """Custom type mstNewCfgStpMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("mstp", 1),
          ("rstp", 2))
    )


_MstNewCfgStpMode_Type.__name__ = "Integer32"
_MstNewCfgStpMode_Object = MibScalar
mstNewCfgStpMode = _MstNewCfgStpMode_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 1, 10),
    _MstNewCfgStpMode_Type()
)
mstNewCfgStpMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstNewCfgStpMode.setStatus("current")
_MstCistCfg_ObjectIdentity = ObjectIdentity
mstCistCfg = _MstCistCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 2)
)


class _MstCistDefaultCfg_Type(Integer32):
    """Custom type mstCistDefaultCfg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("default", 1)
    )


_MstCistDefaultCfg_Type.__name__ = "Integer32"
_MstCistDefaultCfg_Object = MibScalar
mstCistDefaultCfg = _MstCistDefaultCfg_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 2, 1),
    _MstCistDefaultCfg_Type()
)
mstCistDefaultCfg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstCistDefaultCfg.setStatus("current")
_MstCistBridgeCfg_ObjectIdentity = ObjectIdentity
mstCistBridgeCfg = _MstCistBridgeCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 2, 2)
)


class _MstCistCurCfgBridgePriority_Type(Integer32):
    """Custom type mstCistCurCfgBridgePriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_MstCistCurCfgBridgePriority_Type.__name__ = "Integer32"
_MstCistCurCfgBridgePriority_Object = MibScalar
mstCistCurCfgBridgePriority = _MstCistCurCfgBridgePriority_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 2, 2, 1),
    _MstCistCurCfgBridgePriority_Type()
)
mstCistCurCfgBridgePriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstCistCurCfgBridgePriority.setStatus("current")


class _MstCistNewCfgBridgePriority_Type(Integer32):
    """Custom type mstCistNewCfgBridgePriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_MstCistNewCfgBridgePriority_Type.__name__ = "Integer32"
_MstCistNewCfgBridgePriority_Object = MibScalar
mstCistNewCfgBridgePriority = _MstCistNewCfgBridgePriority_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 2, 2, 2),
    _MstCistNewCfgBridgePriority_Type()
)
mstCistNewCfgBridgePriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstCistNewCfgBridgePriority.setStatus("current")


class _MstCistCurCfgBridgeMaxAge_Type(Integer32):
    """Custom type mstCistCurCfgBridgeMaxAge based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(6, 40),
    )


_MstCistCurCfgBridgeMaxAge_Type.__name__ = "Integer32"
_MstCistCurCfgBridgeMaxAge_Object = MibScalar
mstCistCurCfgBridgeMaxAge = _MstCistCurCfgBridgeMaxAge_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 2, 2, 5),
    _MstCistCurCfgBridgeMaxAge_Type()
)
mstCistCurCfgBridgeMaxAge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstCistCurCfgBridgeMaxAge.setStatus("current")


class _MstCistNewCfgBridgeMaxAge_Type(Integer32):
    """Custom type mstCistNewCfgBridgeMaxAge based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(6, 40),
    )


_MstCistNewCfgBridgeMaxAge_Type.__name__ = "Integer32"
_MstCistNewCfgBridgeMaxAge_Object = MibScalar
mstCistNewCfgBridgeMaxAge = _MstCistNewCfgBridgeMaxAge_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 2, 2, 6),
    _MstCistNewCfgBridgeMaxAge_Type()
)
mstCistNewCfgBridgeMaxAge.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstCistNewCfgBridgeMaxAge.setStatus("current")


class _MstCistCurCfgBridgeForwardDelay_Type(Integer32):
    """Custom type mstCistCurCfgBridgeForwardDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 30),
    )


_MstCistCurCfgBridgeForwardDelay_Type.__name__ = "Integer32"
_MstCistCurCfgBridgeForwardDelay_Object = MibScalar
mstCistCurCfgBridgeForwardDelay = _MstCistCurCfgBridgeForwardDelay_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 2, 2, 7),
    _MstCistCurCfgBridgeForwardDelay_Type()
)
mstCistCurCfgBridgeForwardDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstCistCurCfgBridgeForwardDelay.setStatus("current")


class _MstCistNewCfgBridgeForwardDelay_Type(Integer32):
    """Custom type mstCistNewCfgBridgeForwardDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 30),
    )


_MstCistNewCfgBridgeForwardDelay_Type.__name__ = "Integer32"
_MstCistNewCfgBridgeForwardDelay_Object = MibScalar
mstCistNewCfgBridgeForwardDelay = _MstCistNewCfgBridgeForwardDelay_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 2, 2, 8),
    _MstCistNewCfgBridgeForwardDelay_Type()
)
mstCistNewCfgBridgeForwardDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mstCistNewCfgBridgeForwardDelay.setStatus("current")


class _MstCistCurCfgVlanBmap_Type(OctetString):
    """Custom type mstCistCurCfgVlanBmap based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 512),
    )


_MstCistCurCfgVlanBmap_Type.__name__ = "OctetString"
_MstCistCurCfgVlanBmap_Object = MibScalar
mstCistCurCfgVlanBmap = _MstCistCurCfgVlanBmap_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 2, 2, 9),
    _MstCistCurCfgVlanBmap_Type()
)
mstCistCurCfgVlanBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstCistCurCfgVlanBmap.setStatus("current")


class _MstCistNewCfgVlanBmap_Type(OctetString):
    """Custom type mstCistNewCfgVlanBmap based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 512),
    )


_MstCistNewCfgVlanBmap_Type.__name__ = "OctetString"
_MstCistNewCfgVlanBmap_Object = MibScalar
mstCistNewCfgVlanBmap = _MstCistNewCfgVlanBmap_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 2, 2, 10),
    _MstCistNewCfgVlanBmap_Type()
)
mstCistNewCfgVlanBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstCistNewCfgVlanBmap.setStatus("current")
_MstCistNewCfgAddVlan_Type = Integer32
_MstCistNewCfgAddVlan_Object = MibScalar
mstCistNewCfgAddVlan = _MstCistNewCfgAddVlan_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 2, 2, 11),
    _MstCistNewCfgAddVlan_Type()
)
mstCistNewCfgAddVlan.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mstCistNewCfgAddVlan.setStatus("current")
_MstCistCurCfgPortTable_Object = MibTable
mstCistCurCfgPortTable = _MstCistCurCfgPortTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 2, 3)
)
if mibBuilder.loadTexts:
    mstCistCurCfgPortTable.setStatus("current")
_MstCistCurCfgPortTableEntry_Object = MibTableRow
mstCistCurCfgPortTableEntry = _MstCistCurCfgPortTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 2, 3, 1)
)
mstCistCurCfgPortTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "mstCistCurCfgPortIndex"),
)
if mibBuilder.loadTexts:
    mstCistCurCfgPortTableEntry.setStatus("current")
_MstCistCurCfgPortIndex_Type = Integer32
_MstCistCurCfgPortIndex_Object = MibTableColumn
mstCistCurCfgPortIndex = _MstCistCurCfgPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 2, 3, 1, 1),
    _MstCistCurCfgPortIndex_Type()
)
mstCistCurCfgPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstCistCurCfgPortIndex.setStatus("current")


class _MstCistCurCfgPortPriority_Type(Integer32):
    """Custom type mstCistCurCfgPortPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 240),
    )


_MstCistCurCfgPortPriority_Type.__name__ = "Integer32"
_MstCistCurCfgPortPriority_Object = MibTableColumn
mstCistCurCfgPortPriority = _MstCistCurCfgPortPriority_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 2, 3, 1, 2),
    _MstCistCurCfgPortPriority_Type()
)
mstCistCurCfgPortPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstCistCurCfgPortPriority.setStatus("current")


class _MstCistCurCfgPortPathCost_Type(Integer32):
    """Custom type mstCistCurCfgPortPathCost based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 200000000),
    )


_MstCistCurCfgPortPathCost_Type.__name__ = "Integer32"
_MstCistCurCfgPortPathCost_Object = MibTableColumn
mstCistCurCfgPortPathCost = _MstCistCurCfgPortPathCost_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 2, 3, 1, 3),
    _MstCistCurCfgPortPathCost_Type()
)
mstCistCurCfgPortPathCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstCistCurCfgPortPathCost.setStatus("current")


class _MstCistCurCfgPortLinkType_Type(Integer32):
    """Custom type mstCistCurCfgPortLinkType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("p2p", 2),
          ("shared", 3))
    )


_MstCistCurCfgPortLinkType_Type.__name__ = "Integer32"
_MstCistCurCfgPortLinkType_Object = MibTableColumn
mstCistCurCfgPortLinkType = _MstCistCurCfgPortLinkType_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 2, 3, 1, 4),
    _MstCistCurCfgPortLinkType_Type()
)
mstCistCurCfgPortLinkType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstCistCurCfgPortLinkType.setStatus("current")


class _MstCistCurCfgPortEdge_Type(Integer32):
    """Custom type mstCistCurCfgPortEdge based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_MstCistCurCfgPortEdge_Type.__name__ = "Integer32"
_MstCistCurCfgPortEdge_Object = MibTableColumn
mstCistCurCfgPortEdge = _MstCistCurCfgPortEdge_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 2, 3, 1, 5),
    _MstCistCurCfgPortEdge_Type()
)
mstCistCurCfgPortEdge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstCistCurCfgPortEdge.setStatus("current")


class _MstCistCurCfgPortStpState_Type(Integer32):
    """Custom type mstCistCurCfgPortStpState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_MstCistCurCfgPortStpState_Type.__name__ = "Integer32"
_MstCistCurCfgPortStpState_Object = MibTableColumn
mstCistCurCfgPortStpState = _MstCistCurCfgPortStpState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 2, 3, 1, 6),
    _MstCistCurCfgPortStpState_Type()
)
mstCistCurCfgPortStpState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstCistCurCfgPortStpState.setStatus("current")


class _MstCistCurCfgPortHelloTime_Type(Integer32):
    """Custom type mstCistCurCfgPortHelloTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_MstCistCurCfgPortHelloTime_Type.__name__ = "Integer32"
_MstCistCurCfgPortHelloTime_Object = MibTableColumn
mstCistCurCfgPortHelloTime = _MstCistCurCfgPortHelloTime_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 2, 3, 1, 7),
    _MstCistCurCfgPortHelloTime_Type()
)
mstCistCurCfgPortHelloTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstCistCurCfgPortHelloTime.setStatus("current")
_MstCistNewCfgPortTable_Object = MibTable
mstCistNewCfgPortTable = _MstCistNewCfgPortTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 2, 4)
)
if mibBuilder.loadTexts:
    mstCistNewCfgPortTable.setStatus("current")
_MstCistNewCfgPortTableEntry_Object = MibTableRow
mstCistNewCfgPortTableEntry = _MstCistNewCfgPortTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 2, 4, 1)
)
mstCistNewCfgPortTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "mstCistNewCfgPortIndex"),
)
if mibBuilder.loadTexts:
    mstCistNewCfgPortTableEntry.setStatus("current")
_MstCistNewCfgPortIndex_Type = Integer32
_MstCistNewCfgPortIndex_Object = MibTableColumn
mstCistNewCfgPortIndex = _MstCistNewCfgPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 2, 4, 1, 1),
    _MstCistNewCfgPortIndex_Type()
)
mstCistNewCfgPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstCistNewCfgPortIndex.setStatus("current")


class _MstCistNewCfgPortPriority_Type(Integer32):
    """Custom type mstCistNewCfgPortPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 240),
    )


_MstCistNewCfgPortPriority_Type.__name__ = "Integer32"
_MstCistNewCfgPortPriority_Object = MibTableColumn
mstCistNewCfgPortPriority = _MstCistNewCfgPortPriority_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 2, 4, 1, 2),
    _MstCistNewCfgPortPriority_Type()
)
mstCistNewCfgPortPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mstCistNewCfgPortPriority.setStatus("current")


class _MstCistNewCfgPortPathCost_Type(Integer32):
    """Custom type mstCistNewCfgPortPathCost based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 200000000),
    )


_MstCistNewCfgPortPathCost_Type.__name__ = "Integer32"
_MstCistNewCfgPortPathCost_Object = MibTableColumn
mstCistNewCfgPortPathCost = _MstCistNewCfgPortPathCost_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 2, 4, 1, 3),
    _MstCistNewCfgPortPathCost_Type()
)
mstCistNewCfgPortPathCost.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mstCistNewCfgPortPathCost.setStatus("current")


class _MstCistNewCfgPortLinkType_Type(Integer32):
    """Custom type mstCistNewCfgPortLinkType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("p2p", 2),
          ("shared", 3))
    )


_MstCistNewCfgPortLinkType_Type.__name__ = "Integer32"
_MstCistNewCfgPortLinkType_Object = MibTableColumn
mstCistNewCfgPortLinkType = _MstCistNewCfgPortLinkType_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 2, 4, 1, 4),
    _MstCistNewCfgPortLinkType_Type()
)
mstCistNewCfgPortLinkType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mstCistNewCfgPortLinkType.setStatus("current")


class _MstCistNewCfgPortEdge_Type(Integer32):
    """Custom type mstCistNewCfgPortEdge based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_MstCistNewCfgPortEdge_Type.__name__ = "Integer32"
_MstCistNewCfgPortEdge_Object = MibTableColumn
mstCistNewCfgPortEdge = _MstCistNewCfgPortEdge_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 2, 4, 1, 5),
    _MstCistNewCfgPortEdge_Type()
)
mstCistNewCfgPortEdge.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mstCistNewCfgPortEdge.setStatus("current")


class _MstCistNewCfgPortStpState_Type(Integer32):
    """Custom type mstCistNewCfgPortStpState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_MstCistNewCfgPortStpState_Type.__name__ = "Integer32"
_MstCistNewCfgPortStpState_Object = MibTableColumn
mstCistNewCfgPortStpState = _MstCistNewCfgPortStpState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 2, 4, 1, 6),
    _MstCistNewCfgPortStpState_Type()
)
mstCistNewCfgPortStpState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mstCistNewCfgPortStpState.setStatus("current")


class _MstCistNewCfgPortHelloTime_Type(Integer32):
    """Custom type mstCistNewCfgPortHelloTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_MstCistNewCfgPortHelloTime_Type.__name__ = "Integer32"
_MstCistNewCfgPortHelloTime_Object = MibTableColumn
mstCistNewCfgPortHelloTime = _MstCistNewCfgPortHelloTime_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 5, 2, 4, 1, 7),
    _MstCistNewCfgPortHelloTime_Type()
)
mstCistNewCfgPortHelloTime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mstCistNewCfgPortHelloTime.setStatus("current")
_Lacp_ObjectIdentity = ObjectIdentity
lacp = _Lacp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 6)
)


class _LacpCurSystemPriority_Type(Integer32):
    """Custom type lacpCurSystemPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_LacpCurSystemPriority_Type.__name__ = "Integer32"
_LacpCurSystemPriority_Object = MibScalar
lacpCurSystemPriority = _LacpCurSystemPriority_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 6, 1),
    _LacpCurSystemPriority_Type()
)
lacpCurSystemPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpCurSystemPriority.setStatus("current")


class _LacpNewSystemPriority_Type(Integer32):
    """Custom type lacpNewSystemPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_LacpNewSystemPriority_Type.__name__ = "Integer32"
_LacpNewSystemPriority_Object = MibScalar
lacpNewSystemPriority = _LacpNewSystemPriority_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 6, 2),
    _LacpNewSystemPriority_Type()
)
lacpNewSystemPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lacpNewSystemPriority.setStatus("current")


class _LacpCurSystemTimeoutTime_Type(Integer32):
    """Custom type lacpCurSystemTimeoutTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              90)
        )
    )
    namedValues = NamedValues(
        *(("short", 3),
          ("long", 90))
    )


_LacpCurSystemTimeoutTime_Type.__name__ = "Integer32"
_LacpCurSystemTimeoutTime_Object = MibScalar
lacpCurSystemTimeoutTime = _LacpCurSystemTimeoutTime_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 6, 5),
    _LacpCurSystemTimeoutTime_Type()
)
lacpCurSystemTimeoutTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpCurSystemTimeoutTime.setStatus("current")


class _LacpNewSystemTimeoutTime_Type(Integer32):
    """Custom type lacpNewSystemTimeoutTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              90)
        )
    )
    namedValues = NamedValues(
        *(("short", 3),
          ("long", 90))
    )


_LacpNewSystemTimeoutTime_Type.__name__ = "Integer32"
_LacpNewSystemTimeoutTime_Object = MibScalar
lacpNewSystemTimeoutTime = _LacpNewSystemTimeoutTime_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 6, 6),
    _LacpNewSystemTimeoutTime_Type()
)
lacpNewSystemTimeoutTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lacpNewSystemTimeoutTime.setStatus("current")
_LacpCurPortCfgTable_Object = MibTable
lacpCurPortCfgTable = _LacpCurPortCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 6, 7)
)
if mibBuilder.loadTexts:
    lacpCurPortCfgTable.setStatus("current")
_LacpCurPortCfgTableEntry_Object = MibTableRow
lacpCurPortCfgTableEntry = _LacpCurPortCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 6, 7, 1)
)
lacpCurPortCfgTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "lacpCurPortCfgTableId"),
)
if mibBuilder.loadTexts:
    lacpCurPortCfgTableEntry.setStatus("current")
_LacpCurPortCfgTableId_Type = Integer32
_LacpCurPortCfgTableId_Object = MibTableColumn
lacpCurPortCfgTableId = _LacpCurPortCfgTableId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 6, 7, 1, 1),
    _LacpCurPortCfgTableId_Type()
)
lacpCurPortCfgTableId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpCurPortCfgTableId.setStatus("current")


class _LacpCurPortState_Type(Integer32):
    """Custom type lacpCurPortState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("active", 2),
          ("passive", 3))
    )


_LacpCurPortState_Type.__name__ = "Integer32"
_LacpCurPortState_Object = MibTableColumn
lacpCurPortState = _LacpCurPortState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 6, 7, 1, 2),
    _LacpCurPortState_Type()
)
lacpCurPortState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpCurPortState.setStatus("current")


class _LacpCurPortActorPortPriority_Type(Integer32):
    """Custom type lacpCurPortActorPortPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_LacpCurPortActorPortPriority_Type.__name__ = "Integer32"
_LacpCurPortActorPortPriority_Object = MibTableColumn
lacpCurPortActorPortPriority = _LacpCurPortActorPortPriority_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 6, 7, 1, 3),
    _LacpCurPortActorPortPriority_Type()
)
lacpCurPortActorPortPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpCurPortActorPortPriority.setStatus("current")


class _LacpCurPortActorAdminKey_Type(Integer32):
    """Custom type lacpCurPortActorAdminKey based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_LacpCurPortActorAdminKey_Type.__name__ = "Integer32"
_LacpCurPortActorAdminKey_Object = MibTableColumn
lacpCurPortActorAdminKey = _LacpCurPortActorAdminKey_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 6, 7, 1, 4),
    _LacpCurPortActorAdminKey_Type()
)
lacpCurPortActorAdminKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpCurPortActorAdminKey.setStatus("current")
_LacpNewPortCfgTable_Object = MibTable
lacpNewPortCfgTable = _LacpNewPortCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 6, 8)
)
if mibBuilder.loadTexts:
    lacpNewPortCfgTable.setStatus("current")
_LacpNewPortCfgTableEntry_Object = MibTableRow
lacpNewPortCfgTableEntry = _LacpNewPortCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 6, 8, 1)
)
lacpNewPortCfgTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "lacpNewPortCfgTableId"),
)
if mibBuilder.loadTexts:
    lacpNewPortCfgTableEntry.setStatus("current")
_LacpNewPortCfgTableId_Type = Integer32
_LacpNewPortCfgTableId_Object = MibTableColumn
lacpNewPortCfgTableId = _LacpNewPortCfgTableId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 6, 8, 1, 1),
    _LacpNewPortCfgTableId_Type()
)
lacpNewPortCfgTableId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpNewPortCfgTableId.setStatus("current")


class _LacpNewPortState_Type(Integer32):
    """Custom type lacpNewPortState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("active", 2),
          ("passive", 3))
    )


_LacpNewPortState_Type.__name__ = "Integer32"
_LacpNewPortState_Object = MibTableColumn
lacpNewPortState = _LacpNewPortState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 6, 8, 1, 2),
    _LacpNewPortState_Type()
)
lacpNewPortState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lacpNewPortState.setStatus("current")


class _LacpNewPortActorPortPriority_Type(Integer32):
    """Custom type lacpNewPortActorPortPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_LacpNewPortActorPortPriority_Type.__name__ = "Integer32"
_LacpNewPortActorPortPriority_Object = MibTableColumn
lacpNewPortActorPortPriority = _LacpNewPortActorPortPriority_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 6, 8, 1, 3),
    _LacpNewPortActorPortPriority_Type()
)
lacpNewPortActorPortPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lacpNewPortActorPortPriority.setStatus("current")


class _LacpNewPortActorAdminKey_Type(Integer32):
    """Custom type lacpNewPortActorAdminKey based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_LacpNewPortActorAdminKey_Type.__name__ = "Integer32"
_LacpNewPortActorAdminKey_Object = MibTableColumn
lacpNewPortActorAdminKey = _LacpNewPortActorAdminKey_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 6, 8, 1, 4),
    _LacpNewPortActorAdminKey_Type()
)
lacpNewPortActorAdminKey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lacpNewPortActorAdminKey.setStatus("current")
_Thash_ObjectIdentity = ObjectIdentity
thash = _Thash_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 7)
)
_ThashL2_ObjectIdentity = ObjectIdentity
thashL2 = _ThashL2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 7, 1)
)


class _L2ThashCurCfgSmacState_Type(Integer32):
    """Custom type l2ThashCurCfgSmacState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_L2ThashCurCfgSmacState_Type.__name__ = "Integer32"
_L2ThashCurCfgSmacState_Object = MibScalar
l2ThashCurCfgSmacState = _L2ThashCurCfgSmacState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 7, 1, 1),
    _L2ThashCurCfgSmacState_Type()
)
l2ThashCurCfgSmacState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    l2ThashCurCfgSmacState.setStatus("current")


class _L2ThashNewCfgSmacState_Type(Integer32):
    """Custom type l2ThashNewCfgSmacState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_L2ThashNewCfgSmacState_Type.__name__ = "Integer32"
_L2ThashNewCfgSmacState_Object = MibScalar
l2ThashNewCfgSmacState = _L2ThashNewCfgSmacState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 7, 1, 2),
    _L2ThashNewCfgSmacState_Type()
)
l2ThashNewCfgSmacState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    l2ThashNewCfgSmacState.setStatus("current")


class _L2ThashCurCfgDmacState_Type(Integer32):
    """Custom type l2ThashCurCfgDmacState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_L2ThashCurCfgDmacState_Type.__name__ = "Integer32"
_L2ThashCurCfgDmacState_Object = MibScalar
l2ThashCurCfgDmacState = _L2ThashCurCfgDmacState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 7, 1, 3),
    _L2ThashCurCfgDmacState_Type()
)
l2ThashCurCfgDmacState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    l2ThashCurCfgDmacState.setStatus("current")


class _L2ThashNewCfgDmacState_Type(Integer32):
    """Custom type l2ThashNewCfgDmacState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_L2ThashNewCfgDmacState_Type.__name__ = "Integer32"
_L2ThashNewCfgDmacState_Object = MibScalar
l2ThashNewCfgDmacState = _L2ThashNewCfgDmacState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 7, 1, 4),
    _L2ThashNewCfgDmacState_Type()
)
l2ThashNewCfgDmacState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    l2ThashNewCfgDmacState.setStatus("current")


class _L2ThashCurCfgSipState_Type(Integer32):
    """Custom type l2ThashCurCfgSipState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_L2ThashCurCfgSipState_Type.__name__ = "Integer32"
_L2ThashCurCfgSipState_Object = MibScalar
l2ThashCurCfgSipState = _L2ThashCurCfgSipState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 7, 1, 5),
    _L2ThashCurCfgSipState_Type()
)
l2ThashCurCfgSipState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    l2ThashCurCfgSipState.setStatus("current")


class _L2ThashNewCfgSipState_Type(Integer32):
    """Custom type l2ThashNewCfgSipState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_L2ThashNewCfgSipState_Type.__name__ = "Integer32"
_L2ThashNewCfgSipState_Object = MibScalar
l2ThashNewCfgSipState = _L2ThashNewCfgSipState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 7, 1, 6),
    _L2ThashNewCfgSipState_Type()
)
l2ThashNewCfgSipState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    l2ThashNewCfgSipState.setStatus("current")


class _L2ThashCurCfgDipState_Type(Integer32):
    """Custom type l2ThashCurCfgDipState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_L2ThashCurCfgDipState_Type.__name__ = "Integer32"
_L2ThashCurCfgDipState_Object = MibScalar
l2ThashCurCfgDipState = _L2ThashCurCfgDipState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 7, 1, 7),
    _L2ThashCurCfgDipState_Type()
)
l2ThashCurCfgDipState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    l2ThashCurCfgDipState.setStatus("current")


class _L2ThashNewCfgDipState_Type(Integer32):
    """Custom type l2ThashNewCfgDipState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_L2ThashNewCfgDipState_Type.__name__ = "Integer32"
_L2ThashNewCfgDipState_Object = MibScalar
l2ThashNewCfgDipState = _L2ThashNewCfgDipState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 7, 1, 8),
    _L2ThashNewCfgDipState_Type()
)
l2ThashNewCfgDipState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    l2ThashNewCfgDipState.setStatus("current")
_L2GeneralCfg_ObjectIdentity = ObjectIdentity
l2GeneralCfg = _L2GeneralCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 8)
)


class _UpfastCurCfgState_Type(Integer32):
    """Custom type upfastCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_UpfastCurCfgState_Type.__name__ = "Integer32"
_UpfastCurCfgState_Object = MibScalar
upfastCurCfgState = _UpfastCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 8, 1),
    _UpfastCurCfgState_Type()
)
upfastCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upfastCurCfgState.setStatus("current")


class _UpfastNewCfgState_Type(Integer32):
    """Custom type upfastNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_UpfastNewCfgState_Type.__name__ = "Integer32"
_UpfastNewCfgState_Object = MibScalar
upfastNewCfgState = _UpfastNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 8, 2),
    _UpfastNewCfgState_Type()
)
upfastNewCfgState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upfastNewCfgState.setStatus("current")


class _UpdateCurCfgState_Type(Integer32):
    """Custom type updateCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 200),
    )


_UpdateCurCfgState_Type.__name__ = "Integer32"
_UpdateCurCfgState_Object = MibScalar
updateCurCfgState = _UpdateCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 8, 3),
    _UpdateCurCfgState_Type()
)
updateCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    updateCurCfgState.setStatus("current")


class _UpdateNewCfgState_Type(Integer32):
    """Custom type updateNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 200),
    )


_UpdateNewCfgState_Type.__name__ = "Integer32"
_UpdateNewCfgState_Object = MibScalar
updateNewCfgState = _UpdateNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 8, 4),
    _UpdateNewCfgState_Type()
)
updateNewCfgState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    updateNewCfgState.setStatus("current")


class _PvstCompatibilityCurCfgState_Type(Integer32):
    """Custom type pvstCompatibilityCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_PvstCompatibilityCurCfgState_Type.__name__ = "Integer32"
_PvstCompatibilityCurCfgState_Object = MibScalar
pvstCompatibilityCurCfgState = _PvstCompatibilityCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 8, 9),
    _PvstCompatibilityCurCfgState_Type()
)
pvstCompatibilityCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvstCompatibilityCurCfgState.setStatus("current")


class _PvstCompatibilityNewCfgState_Type(Integer32):
    """Custom type pvstCompatibilityNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_PvstCompatibilityNewCfgState_Type.__name__ = "Integer32"
_PvstCompatibilityNewCfgState_Object = MibScalar
pvstCompatibilityNewCfgState = _PvstCompatibilityNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 8, 10),
    _PvstCompatibilityNewCfgState_Type()
)
pvstCompatibilityNewCfgState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvstCompatibilityNewCfgState.setStatus("current")
_Ufd_ObjectIdentity = ObjectIdentity
ufd = _Ufd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 9)
)
_UfdGeneralCfg_ObjectIdentity = ObjectIdentity
ufdGeneralCfg = _UfdGeneralCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 9, 1)
)


class _UfdCurCfgState_Type(Integer32):
    """Custom type ufdCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_UfdCurCfgState_Type.__name__ = "Integer32"
_UfdCurCfgState_Object = MibScalar
ufdCurCfgState = _UfdCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 9, 1, 1),
    _UfdCurCfgState_Type()
)
ufdCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ufdCurCfgState.setStatus("current")


class _UfdNewCfgState_Type(Integer32):
    """Custom type ufdNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_UfdNewCfgState_Type.__name__ = "Integer32"
_UfdNewCfgState_Object = MibScalar
ufdNewCfgState = _UfdNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 9, 1, 2),
    _UfdNewCfgState_Type()
)
ufdNewCfgState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ufdNewCfgState.setStatus("current")
_UfdCurCfgLtMPorts_Type = OctetString
_UfdCurCfgLtMPorts_Object = MibScalar
ufdCurCfgLtMPorts = _UfdCurCfgLtMPorts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 9, 1, 3),
    _UfdCurCfgLtMPorts_Type()
)
ufdCurCfgLtMPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ufdCurCfgLtMPorts.setStatus("current")
_UfdNewCfgLtMPorts_Type = OctetString
_UfdNewCfgLtMPorts_Object = MibScalar
ufdNewCfgLtMPorts = _UfdNewCfgLtMPorts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 9, 1, 4),
    _UfdNewCfgLtMPorts_Type()
)
ufdNewCfgLtMPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ufdNewCfgLtMPorts.setStatus("current")
_UfdCurCfgLtMTrunks_Type = OctetString
_UfdCurCfgLtMTrunks_Object = MibScalar
ufdCurCfgLtMTrunks = _UfdCurCfgLtMTrunks_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 9, 1, 5),
    _UfdCurCfgLtMTrunks_Type()
)
ufdCurCfgLtMTrunks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ufdCurCfgLtMTrunks.setStatus("current")
_UfdNewCfgLtMTrunks_Type = OctetString
_UfdNewCfgLtMTrunks_Object = MibScalar
ufdNewCfgLtMTrunks = _UfdNewCfgLtMTrunks_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 9, 1, 6),
    _UfdNewCfgLtMTrunks_Type()
)
ufdNewCfgLtMTrunks.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ufdNewCfgLtMTrunks.setStatus("current")
_UfdCurCfgLtMAdminkey_Type = Integer32
_UfdCurCfgLtMAdminkey_Object = MibScalar
ufdCurCfgLtMAdminkey = _UfdCurCfgLtMAdminkey_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 9, 1, 7),
    _UfdCurCfgLtMAdminkey_Type()
)
ufdCurCfgLtMAdminkey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ufdCurCfgLtMAdminkey.setStatus("current")
_UfdNewCfgLtMAdminkey_Type = Integer32
_UfdNewCfgLtMAdminkey_Object = MibScalar
ufdNewCfgLtMAdminkey = _UfdNewCfgLtMAdminkey_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 9, 1, 8),
    _UfdNewCfgLtMAdminkey_Type()
)
ufdNewCfgLtMAdminkey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ufdNewCfgLtMAdminkey.setStatus("current")
_UfdCurCfgLtDPorts_Type = OctetString
_UfdCurCfgLtDPorts_Object = MibScalar
ufdCurCfgLtDPorts = _UfdCurCfgLtDPorts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 9, 1, 9),
    _UfdCurCfgLtDPorts_Type()
)
ufdCurCfgLtDPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ufdCurCfgLtDPorts.setStatus("current")
_UfdNewCfgLtDPorts_Type = OctetString
_UfdNewCfgLtDPorts_Object = MibScalar
ufdNewCfgLtDPorts = _UfdNewCfgLtDPorts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 9, 1, 10),
    _UfdNewCfgLtDPorts_Type()
)
ufdNewCfgLtDPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ufdNewCfgLtDPorts.setStatus("current")
_UfdCurCfgLtDTrunks_Type = OctetString
_UfdCurCfgLtDTrunks_Object = MibScalar
ufdCurCfgLtDTrunks = _UfdCurCfgLtDTrunks_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 9, 1, 11),
    _UfdCurCfgLtDTrunks_Type()
)
ufdCurCfgLtDTrunks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ufdCurCfgLtDTrunks.setStatus("current")
_UfdNewCfgLtDTrunks_Type = OctetString
_UfdNewCfgLtDTrunks_Object = MibScalar
ufdNewCfgLtDTrunks = _UfdNewCfgLtDTrunks_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 9, 1, 12),
    _UfdNewCfgLtDTrunks_Type()
)
ufdNewCfgLtDTrunks.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ufdNewCfgLtDTrunks.setStatus("current")
_UfdLtDAdminkeyMaxEnt_Type = Integer32
_UfdLtDAdminkeyMaxEnt_Object = MibScalar
ufdLtDAdminkeyMaxEnt = _UfdLtDAdminkeyMaxEnt_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 9, 1, 13),
    _UfdLtDAdminkeyMaxEnt_Type()
)
ufdLtDAdminkeyMaxEnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ufdLtDAdminkeyMaxEnt.setStatus("current")
_UfdLtDAdminkeyCurCfgTable_Object = MibTable
ufdLtDAdminkeyCurCfgTable = _UfdLtDAdminkeyCurCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 9, 1, 14)
)
if mibBuilder.loadTexts:
    ufdLtDAdminkeyCurCfgTable.setStatus("current")
_UfdLtDAdminkeyCurCfgTableEntry_Object = MibTableRow
ufdLtDAdminkeyCurCfgTableEntry = _UfdLtDAdminkeyCurCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 9, 1, 14, 1)
)
ufdLtDAdminkeyCurCfgTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ufdLtDAdminkeyCurCfg"),
)
if mibBuilder.loadTexts:
    ufdLtDAdminkeyCurCfgTableEntry.setStatus("current")
_UfdLtDAdminkeyCurCfg_Type = Integer32
_UfdLtDAdminkeyCurCfg_Object = MibTableColumn
ufdLtDAdminkeyCurCfg = _UfdLtDAdminkeyCurCfg_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 9, 1, 14, 1, 1),
    _UfdLtDAdminkeyCurCfg_Type()
)
ufdLtDAdminkeyCurCfg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ufdLtDAdminkeyCurCfg.setStatus("current")
_UfdLtDAdminkeyNewCfgTable_Object = MibTable
ufdLtDAdminkeyNewCfgTable = _UfdLtDAdminkeyNewCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 9, 1, 15)
)
if mibBuilder.loadTexts:
    ufdLtDAdminkeyNewCfgTable.setStatus("current")
_UfdLtDAdminkeyNewCfgTableEntry_Object = MibTableRow
ufdLtDAdminkeyNewCfgTableEntry = _UfdLtDAdminkeyNewCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 9, 1, 15, 1)
)
ufdLtDAdminkeyNewCfgTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ufdLtDAdminkeyNewCfg"),
)
if mibBuilder.loadTexts:
    ufdLtDAdminkeyNewCfgTableEntry.setStatus("current")
_UfdLtDAdminkeyNewCfg_Type = Integer32
_UfdLtDAdminkeyNewCfg_Object = MibTableColumn
ufdLtDAdminkeyNewCfg = _UfdLtDAdminkeyNewCfg_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 9, 1, 15, 1, 1),
    _UfdLtDAdminkeyNewCfg_Type()
)
ufdLtDAdminkeyNewCfg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ufdLtDAdminkeyNewCfg.setStatus("current")
_UfdNewCfgAddLtMPort_Type = Integer32
_UfdNewCfgAddLtMPort_Object = MibScalar
ufdNewCfgAddLtMPort = _UfdNewCfgAddLtMPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 9, 1, 16),
    _UfdNewCfgAddLtMPort_Type()
)
ufdNewCfgAddLtMPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ufdNewCfgAddLtMPort.setStatus("current")
_UfdNewCfgRemoveLtMPort_Type = Integer32
_UfdNewCfgRemoveLtMPort_Object = MibScalar
ufdNewCfgRemoveLtMPort = _UfdNewCfgRemoveLtMPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 9, 1, 17),
    _UfdNewCfgRemoveLtMPort_Type()
)
ufdNewCfgRemoveLtMPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ufdNewCfgRemoveLtMPort.setStatus("current")
_UfdNewCfgAddLtMTrunk_Type = Integer32
_UfdNewCfgAddLtMTrunk_Object = MibScalar
ufdNewCfgAddLtMTrunk = _UfdNewCfgAddLtMTrunk_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 9, 1, 18),
    _UfdNewCfgAddLtMTrunk_Type()
)
ufdNewCfgAddLtMTrunk.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ufdNewCfgAddLtMTrunk.setStatus("current")
_UfdNewCfgRemoveLtMTrunk_Type = Integer32
_UfdNewCfgRemoveLtMTrunk_Object = MibScalar
ufdNewCfgRemoveLtMTrunk = _UfdNewCfgRemoveLtMTrunk_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 9, 1, 19),
    _UfdNewCfgRemoveLtMTrunk_Type()
)
ufdNewCfgRemoveLtMTrunk.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ufdNewCfgRemoveLtMTrunk.setStatus("current")
_UfdNewCfgAddLtMAdminkey_Type = Integer32
_UfdNewCfgAddLtMAdminkey_Object = MibScalar
ufdNewCfgAddLtMAdminkey = _UfdNewCfgAddLtMAdminkey_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 9, 1, 20),
    _UfdNewCfgAddLtMAdminkey_Type()
)
ufdNewCfgAddLtMAdminkey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ufdNewCfgAddLtMAdminkey.setStatus("current")
_UfdNewCfgRemoveLtMAdminkey_Type = Integer32
_UfdNewCfgRemoveLtMAdminkey_Object = MibScalar
ufdNewCfgRemoveLtMAdminkey = _UfdNewCfgRemoveLtMAdminkey_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 9, 1, 21),
    _UfdNewCfgRemoveLtMAdminkey_Type()
)
ufdNewCfgRemoveLtMAdminkey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ufdNewCfgRemoveLtMAdminkey.setStatus("current")
_UfdNewCfgAddLtDPort_Type = Integer32
_UfdNewCfgAddLtDPort_Object = MibScalar
ufdNewCfgAddLtDPort = _UfdNewCfgAddLtDPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 9, 1, 22),
    _UfdNewCfgAddLtDPort_Type()
)
ufdNewCfgAddLtDPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ufdNewCfgAddLtDPort.setStatus("current")
_UfdNewCfgRemoveLtDPort_Type = Integer32
_UfdNewCfgRemoveLtDPort_Object = MibScalar
ufdNewCfgRemoveLtDPort = _UfdNewCfgRemoveLtDPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 9, 1, 23),
    _UfdNewCfgRemoveLtDPort_Type()
)
ufdNewCfgRemoveLtDPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ufdNewCfgRemoveLtDPort.setStatus("current")
_UfdNewCfgAddLtDTrunk_Type = Integer32
_UfdNewCfgAddLtDTrunk_Object = MibScalar
ufdNewCfgAddLtDTrunk = _UfdNewCfgAddLtDTrunk_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 9, 1, 24),
    _UfdNewCfgAddLtDTrunk_Type()
)
ufdNewCfgAddLtDTrunk.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ufdNewCfgAddLtDTrunk.setStatus("current")
_UfdNewCfgRemoveLtDTrunk_Type = Integer32
_UfdNewCfgRemoveLtDTrunk_Object = MibScalar
ufdNewCfgRemoveLtDTrunk = _UfdNewCfgRemoveLtDTrunk_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 9, 1, 25),
    _UfdNewCfgRemoveLtDTrunk_Type()
)
ufdNewCfgRemoveLtDTrunk.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ufdNewCfgRemoveLtDTrunk.setStatus("current")
_UfdNewCfgAddLtDAdminkey_Type = Integer32
_UfdNewCfgAddLtDAdminkey_Object = MibScalar
ufdNewCfgAddLtDAdminkey = _UfdNewCfgAddLtDAdminkey_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 9, 1, 26),
    _UfdNewCfgAddLtDAdminkey_Type()
)
ufdNewCfgAddLtDAdminkey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ufdNewCfgAddLtDAdminkey.setStatus("current")
_UfdNewCfgRemoveLtDAdminkey_Type = Integer32
_UfdNewCfgRemoveLtDAdminkey_Object = MibScalar
ufdNewCfgRemoveLtDAdminkey = _UfdNewCfgRemoveLtDAdminkey_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 9, 1, 27),
    _UfdNewCfgRemoveLtDAdminkey_Type()
)
ufdNewCfgRemoveLtDAdminkey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ufdNewCfgRemoveLtDAdminkey.setStatus("current")


class _UfdCurCfgGlobalState_Type(Integer32):
    """Custom type ufdCurCfgGlobalState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_UfdCurCfgGlobalState_Type.__name__ = "Integer32"
_UfdCurCfgGlobalState_Object = MibScalar
ufdCurCfgGlobalState = _UfdCurCfgGlobalState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 9, 1, 28),
    _UfdCurCfgGlobalState_Type()
)
ufdCurCfgGlobalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ufdCurCfgGlobalState.setStatus("current")


class _UfdNewCfgGlobalState_Type(Integer32):
    """Custom type ufdNewCfgGlobalState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_UfdNewCfgGlobalState_Type.__name__ = "Integer32"
_UfdNewCfgGlobalState_Object = MibScalar
ufdNewCfgGlobalState = _UfdNewCfgGlobalState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 9, 1, 29),
    _UfdNewCfgGlobalState_Type()
)
ufdNewCfgGlobalState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ufdNewCfgGlobalState.setStatus("current")
_Dot1x_ObjectIdentity = ObjectIdentity
dot1x = _Dot1x_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11)
)


class _Dot1xCurStatus_Type(Integer32):
    """Custom type dot1xCurStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("enable", 0),
          ("disable", 1))
    )


_Dot1xCurStatus_Type.__name__ = "Integer32"
_Dot1xCurStatus_Object = MibScalar
dot1xCurStatus = _Dot1xCurStatus_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 1),
    _Dot1xCurStatus_Type()
)
dot1xCurStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurStatus.setStatus("current")


class _Dot1xNewStatus_Type(Integer32):
    """Custom type dot1xNewStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("enable", 0),
          ("disable", 1))
    )


_Dot1xNewStatus_Type.__name__ = "Integer32"
_Dot1xNewStatus_Object = MibScalar
dot1xNewStatus = _Dot1xNewStatus_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 2),
    _Dot1xNewStatus_Type()
)
dot1xNewStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dot1xNewStatus.setStatus("current")
_Dot1xCurCfgPortTable_Object = MibTable
dot1xCurCfgPortTable = _Dot1xCurCfgPortTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 3)
)
if mibBuilder.loadTexts:
    dot1xCurCfgPortTable.setStatus("current")
_Dot1xCurCfgPortEntry_Object = MibTableRow
dot1xCurCfgPortEntry = _Dot1xCurCfgPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 3, 1)
)
dot1xCurCfgPortEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "dot1xCurCfgPortIndex"),
)
if mibBuilder.loadTexts:
    dot1xCurCfgPortEntry.setStatus("current")
_Dot1xCurCfgPortIndex_Type = Integer32
_Dot1xCurCfgPortIndex_Object = MibTableColumn
dot1xCurCfgPortIndex = _Dot1xCurCfgPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 3, 1, 1),
    _Dot1xCurCfgPortIndex_Type()
)
dot1xCurCfgPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurCfgPortIndex.setStatus("current")


class _Dot1xCurCfgPortMode_Type(Integer32):
    """Custom type dot1xCurCfgPortMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("forceUnauth", 0),
          ("auto", 1),
          ("forceAuth", 2))
    )


_Dot1xCurCfgPortMode_Type.__name__ = "Integer32"
_Dot1xCurCfgPortMode_Object = MibTableColumn
dot1xCurCfgPortMode = _Dot1xCurCfgPortMode_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 3, 1, 2),
    _Dot1xCurCfgPortMode_Type()
)
dot1xCurCfgPortMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurCfgPortMode.setStatus("current")


class _Dot1xCurCfgPortQtPeriod_Type(Integer32):
    """Custom type dot1xCurCfgPortQtPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_Dot1xCurCfgPortQtPeriod_Type.__name__ = "Integer32"
_Dot1xCurCfgPortQtPeriod_Object = MibTableColumn
dot1xCurCfgPortQtPeriod = _Dot1xCurCfgPortQtPeriod_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 3, 1, 3),
    _Dot1xCurCfgPortQtPeriod_Type()
)
dot1xCurCfgPortQtPeriod.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurCfgPortQtPeriod.setStatus("current")


class _Dot1xCurCfgPortTxPeriod_Type(Integer32):
    """Custom type dot1xCurCfgPortTxPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Dot1xCurCfgPortTxPeriod_Type.__name__ = "Integer32"
_Dot1xCurCfgPortTxPeriod_Object = MibTableColumn
dot1xCurCfgPortTxPeriod = _Dot1xCurCfgPortTxPeriod_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 3, 1, 4),
    _Dot1xCurCfgPortTxPeriod_Type()
)
dot1xCurCfgPortTxPeriod.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurCfgPortTxPeriod.setStatus("current")


class _Dot1xCurCfgPortSupTmout_Type(Integer32):
    """Custom type dot1xCurCfgPortSupTmout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Dot1xCurCfgPortSupTmout_Type.__name__ = "Integer32"
_Dot1xCurCfgPortSupTmout_Object = MibTableColumn
dot1xCurCfgPortSupTmout = _Dot1xCurCfgPortSupTmout_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 3, 1, 5),
    _Dot1xCurCfgPortSupTmout_Type()
)
dot1xCurCfgPortSupTmout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurCfgPortSupTmout.setStatus("current")


class _Dot1xCurCfgPortSrvTmout_Type(Integer32):
    """Custom type dot1xCurCfgPortSrvTmout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Dot1xCurCfgPortSrvTmout_Type.__name__ = "Integer32"
_Dot1xCurCfgPortSrvTmout_Object = MibTableColumn
dot1xCurCfgPortSrvTmout = _Dot1xCurCfgPortSrvTmout_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 3, 1, 6),
    _Dot1xCurCfgPortSrvTmout_Type()
)
dot1xCurCfgPortSrvTmout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurCfgPortSrvTmout.setStatus("current")


class _Dot1xCurCfgPortMaxRq_Type(Integer32):
    """Custom type dot1xCurCfgPortMaxRq based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_Dot1xCurCfgPortMaxRq_Type.__name__ = "Integer32"
_Dot1xCurCfgPortMaxRq_Object = MibTableColumn
dot1xCurCfgPortMaxRq = _Dot1xCurCfgPortMaxRq_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 3, 1, 7),
    _Dot1xCurCfgPortMaxRq_Type()
)
dot1xCurCfgPortMaxRq.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurCfgPortMaxRq.setStatus("current")


class _Dot1xCurCfgPortRaPeriod_Type(Integer32):
    """Custom type dot1xCurCfgPortRaPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 604800),
    )


_Dot1xCurCfgPortRaPeriod_Type.__name__ = "Integer32"
_Dot1xCurCfgPortRaPeriod_Object = MibTableColumn
dot1xCurCfgPortRaPeriod = _Dot1xCurCfgPortRaPeriod_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 3, 1, 8),
    _Dot1xCurCfgPortRaPeriod_Type()
)
dot1xCurCfgPortRaPeriod.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurCfgPortRaPeriod.setStatus("current")


class _Dot1xCurCfgPortReAuth_Type(Integer32):
    """Custom type dot1xCurCfgPortReAuth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_Dot1xCurCfgPortReAuth_Type.__name__ = "Integer32"
_Dot1xCurCfgPortReAuth_Object = MibTableColumn
dot1xCurCfgPortReAuth = _Dot1xCurCfgPortReAuth_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 3, 1, 9),
    _Dot1xCurCfgPortReAuth_Type()
)
dot1xCurCfgPortReAuth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurCfgPortReAuth.setStatus("current")
_Dot1xNewCfgPortTable_Object = MibTable
dot1xNewCfgPortTable = _Dot1xNewCfgPortTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 4)
)
if mibBuilder.loadTexts:
    dot1xNewCfgPortTable.setStatus("current")
_Dot1xNewCfgPortEntry_Object = MibTableRow
dot1xNewCfgPortEntry = _Dot1xNewCfgPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 4, 1)
)
dot1xNewCfgPortEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "dot1xNewCfgPortIndex"),
)
if mibBuilder.loadTexts:
    dot1xNewCfgPortEntry.setStatus("current")
_Dot1xNewCfgPortIndex_Type = Integer32
_Dot1xNewCfgPortIndex_Object = MibTableColumn
dot1xNewCfgPortIndex = _Dot1xNewCfgPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 4, 1, 1),
    _Dot1xNewCfgPortIndex_Type()
)
dot1xNewCfgPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xNewCfgPortIndex.setStatus("current")


class _Dot1xNewCfgPortMode_Type(Integer32):
    """Custom type dot1xNewCfgPortMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("forceUnauth", 0),
          ("auto", 1),
          ("forceAuth", 2))
    )


_Dot1xNewCfgPortMode_Type.__name__ = "Integer32"
_Dot1xNewCfgPortMode_Object = MibTableColumn
dot1xNewCfgPortMode = _Dot1xNewCfgPortMode_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 4, 1, 2),
    _Dot1xNewCfgPortMode_Type()
)
dot1xNewCfgPortMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgPortMode.setStatus("current")


class _Dot1xNewCfgPortQtPeriod_Type(Integer32):
    """Custom type dot1xNewCfgPortQtPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_Dot1xNewCfgPortQtPeriod_Type.__name__ = "Integer32"
_Dot1xNewCfgPortQtPeriod_Object = MibTableColumn
dot1xNewCfgPortQtPeriod = _Dot1xNewCfgPortQtPeriod_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 4, 1, 3),
    _Dot1xNewCfgPortQtPeriod_Type()
)
dot1xNewCfgPortQtPeriod.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgPortQtPeriod.setStatus("current")


class _Dot1xNewCfgPortTxPeriod_Type(Integer32):
    """Custom type dot1xNewCfgPortTxPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Dot1xNewCfgPortTxPeriod_Type.__name__ = "Integer32"
_Dot1xNewCfgPortTxPeriod_Object = MibTableColumn
dot1xNewCfgPortTxPeriod = _Dot1xNewCfgPortTxPeriod_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 4, 1, 4),
    _Dot1xNewCfgPortTxPeriod_Type()
)
dot1xNewCfgPortTxPeriod.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgPortTxPeriod.setStatus("current")


class _Dot1xNewCfgPortSupTmout_Type(Integer32):
    """Custom type dot1xNewCfgPortSupTmout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Dot1xNewCfgPortSupTmout_Type.__name__ = "Integer32"
_Dot1xNewCfgPortSupTmout_Object = MibTableColumn
dot1xNewCfgPortSupTmout = _Dot1xNewCfgPortSupTmout_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 4, 1, 5),
    _Dot1xNewCfgPortSupTmout_Type()
)
dot1xNewCfgPortSupTmout.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgPortSupTmout.setStatus("current")


class _Dot1xNewCfgPortSrvTmout_Type(Integer32):
    """Custom type dot1xNewCfgPortSrvTmout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Dot1xNewCfgPortSrvTmout_Type.__name__ = "Integer32"
_Dot1xNewCfgPortSrvTmout_Object = MibTableColumn
dot1xNewCfgPortSrvTmout = _Dot1xNewCfgPortSrvTmout_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 4, 1, 6),
    _Dot1xNewCfgPortSrvTmout_Type()
)
dot1xNewCfgPortSrvTmout.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgPortSrvTmout.setStatus("current")


class _Dot1xNewCfgPortMaxRq_Type(Integer32):
    """Custom type dot1xNewCfgPortMaxRq based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_Dot1xNewCfgPortMaxRq_Type.__name__ = "Integer32"
_Dot1xNewCfgPortMaxRq_Object = MibTableColumn
dot1xNewCfgPortMaxRq = _Dot1xNewCfgPortMaxRq_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 4, 1, 7),
    _Dot1xNewCfgPortMaxRq_Type()
)
dot1xNewCfgPortMaxRq.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgPortMaxRq.setStatus("current")


class _Dot1xNewCfgPortRaPeriod_Type(Integer32):
    """Custom type dot1xNewCfgPortRaPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 604800),
    )


_Dot1xNewCfgPortRaPeriod_Type.__name__ = "Integer32"
_Dot1xNewCfgPortRaPeriod_Object = MibTableColumn
dot1xNewCfgPortRaPeriod = _Dot1xNewCfgPortRaPeriod_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 4, 1, 8),
    _Dot1xNewCfgPortRaPeriod_Type()
)
dot1xNewCfgPortRaPeriod.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgPortRaPeriod.setStatus("current")


class _Dot1xNewCfgPortReAuth_Type(Integer32):
    """Custom type dot1xNewCfgPortReAuth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_Dot1xNewCfgPortReAuth_Type.__name__ = "Integer32"
_Dot1xNewCfgPortReAuth_Object = MibTableColumn
dot1xNewCfgPortReAuth = _Dot1xNewCfgPortReAuth_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 4, 1, 9),
    _Dot1xNewCfgPortReAuth_Type()
)
dot1xNewCfgPortReAuth.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgPortReAuth.setStatus("current")


class _Dot1xNewCfgPortDefault_Type(Integer32):
    """Custom type dot1xNewCfgPortDefault based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("other", 0),
          ("apply", 1))
    )


_Dot1xNewCfgPortDefault_Type.__name__ = "Integer32"
_Dot1xNewCfgPortDefault_Object = MibTableColumn
dot1xNewCfgPortDefault = _Dot1xNewCfgPortDefault_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 4, 1, 10),
    _Dot1xNewCfgPortDefault_Type()
)
dot1xNewCfgPortDefault.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgPortDefault.setStatus("current")


class _Dot1xNewCfgPortApplyGlobal_Type(Integer32):
    """Custom type dot1xNewCfgPortApplyGlobal based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("other", 0),
          ("apply", 1))
    )


_Dot1xNewCfgPortApplyGlobal_Type.__name__ = "Integer32"
_Dot1xNewCfgPortApplyGlobal_Object = MibTableColumn
dot1xNewCfgPortApplyGlobal = _Dot1xNewCfgPortApplyGlobal_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 4, 1, 11),
    _Dot1xNewCfgPortApplyGlobal_Type()
)
dot1xNewCfgPortApplyGlobal.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgPortApplyGlobal.setStatus("current")
_Dot1xCurCfgGlobalTable_ObjectIdentity = ObjectIdentity
dot1xCurCfgGlobalTable = _Dot1xCurCfgGlobalTable_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 5)
)


class _Dot1xCurCfgGlobalMode_Type(Integer32):
    """Custom type dot1xCurCfgGlobalMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("forceUnauth", 0),
          ("auto", 1),
          ("forceAuth", 2))
    )


_Dot1xCurCfgGlobalMode_Type.__name__ = "Integer32"
_Dot1xCurCfgGlobalMode_Object = MibScalar
dot1xCurCfgGlobalMode = _Dot1xCurCfgGlobalMode_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 5, 1),
    _Dot1xCurCfgGlobalMode_Type()
)
dot1xCurCfgGlobalMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurCfgGlobalMode.setStatus("current")


class _Dot1xCurCfgGlobalQtPeriod_Type(Integer32):
    """Custom type dot1xCurCfgGlobalQtPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_Dot1xCurCfgGlobalQtPeriod_Type.__name__ = "Integer32"
_Dot1xCurCfgGlobalQtPeriod_Object = MibScalar
dot1xCurCfgGlobalQtPeriod = _Dot1xCurCfgGlobalQtPeriod_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 5, 2),
    _Dot1xCurCfgGlobalQtPeriod_Type()
)
dot1xCurCfgGlobalQtPeriod.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurCfgGlobalQtPeriod.setStatus("current")


class _Dot1xCurCfgGlobalTxPeriod_Type(Integer32):
    """Custom type dot1xCurCfgGlobalTxPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Dot1xCurCfgGlobalTxPeriod_Type.__name__ = "Integer32"
_Dot1xCurCfgGlobalTxPeriod_Object = MibScalar
dot1xCurCfgGlobalTxPeriod = _Dot1xCurCfgGlobalTxPeriod_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 5, 3),
    _Dot1xCurCfgGlobalTxPeriod_Type()
)
dot1xCurCfgGlobalTxPeriod.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurCfgGlobalTxPeriod.setStatus("current")


class _Dot1xCurCfgGlobalSupTmout_Type(Integer32):
    """Custom type dot1xCurCfgGlobalSupTmout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Dot1xCurCfgGlobalSupTmout_Type.__name__ = "Integer32"
_Dot1xCurCfgGlobalSupTmout_Object = MibScalar
dot1xCurCfgGlobalSupTmout = _Dot1xCurCfgGlobalSupTmout_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 5, 4),
    _Dot1xCurCfgGlobalSupTmout_Type()
)
dot1xCurCfgGlobalSupTmout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurCfgGlobalSupTmout.setStatus("current")


class _Dot1xCurCfgGlobalSrvTmout_Type(Integer32):
    """Custom type dot1xCurCfgGlobalSrvTmout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Dot1xCurCfgGlobalSrvTmout_Type.__name__ = "Integer32"
_Dot1xCurCfgGlobalSrvTmout_Object = MibScalar
dot1xCurCfgGlobalSrvTmout = _Dot1xCurCfgGlobalSrvTmout_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 5, 5),
    _Dot1xCurCfgGlobalSrvTmout_Type()
)
dot1xCurCfgGlobalSrvTmout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurCfgGlobalSrvTmout.setStatus("current")


class _Dot1xCurCfgGlobalMaxRq_Type(Integer32):
    """Custom type dot1xCurCfgGlobalMaxRq based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_Dot1xCurCfgGlobalMaxRq_Type.__name__ = "Integer32"
_Dot1xCurCfgGlobalMaxRq_Object = MibScalar
dot1xCurCfgGlobalMaxRq = _Dot1xCurCfgGlobalMaxRq_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 5, 6),
    _Dot1xCurCfgGlobalMaxRq_Type()
)
dot1xCurCfgGlobalMaxRq.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurCfgGlobalMaxRq.setStatus("current")


class _Dot1xCurCfgGlobalRaPeriod_Type(Integer32):
    """Custom type dot1xCurCfgGlobalRaPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 604800),
    )


_Dot1xCurCfgGlobalRaPeriod_Type.__name__ = "Integer32"
_Dot1xCurCfgGlobalRaPeriod_Object = MibScalar
dot1xCurCfgGlobalRaPeriod = _Dot1xCurCfgGlobalRaPeriod_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 5, 7),
    _Dot1xCurCfgGlobalRaPeriod_Type()
)
dot1xCurCfgGlobalRaPeriod.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurCfgGlobalRaPeriod.setStatus("current")


class _Dot1xCurCfgGlobalReAuth_Type(Integer32):
    """Custom type dot1xCurCfgGlobalReAuth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_Dot1xCurCfgGlobalReAuth_Type.__name__ = "Integer32"
_Dot1xCurCfgGlobalReAuth_Object = MibScalar
dot1xCurCfgGlobalReAuth = _Dot1xCurCfgGlobalReAuth_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 5, 8),
    _Dot1xCurCfgGlobalReAuth_Type()
)
dot1xCurCfgGlobalReAuth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xCurCfgGlobalReAuth.setStatus("current")
_Dot1xNewCfgGlobalTable_ObjectIdentity = ObjectIdentity
dot1xNewCfgGlobalTable = _Dot1xNewCfgGlobalTable_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 6)
)


class _Dot1xNewCfgGlobalMode_Type(Integer32):
    """Custom type dot1xNewCfgGlobalMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("forceUnauth", 0),
          ("auto", 1),
          ("forceAuth", 2))
    )


_Dot1xNewCfgGlobalMode_Type.__name__ = "Integer32"
_Dot1xNewCfgGlobalMode_Object = MibScalar
dot1xNewCfgGlobalMode = _Dot1xNewCfgGlobalMode_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 6, 1),
    _Dot1xNewCfgGlobalMode_Type()
)
dot1xNewCfgGlobalMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgGlobalMode.setStatus("current")


class _Dot1xNewCfgGlobalQtPeriod_Type(Integer32):
    """Custom type dot1xNewCfgGlobalQtPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_Dot1xNewCfgGlobalQtPeriod_Type.__name__ = "Integer32"
_Dot1xNewCfgGlobalQtPeriod_Object = MibScalar
dot1xNewCfgGlobalQtPeriod = _Dot1xNewCfgGlobalQtPeriod_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 6, 2),
    _Dot1xNewCfgGlobalQtPeriod_Type()
)
dot1xNewCfgGlobalQtPeriod.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgGlobalQtPeriod.setStatus("current")


class _Dot1xNewCfgGlobalTxPeriod_Type(Integer32):
    """Custom type dot1xNewCfgGlobalTxPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Dot1xNewCfgGlobalTxPeriod_Type.__name__ = "Integer32"
_Dot1xNewCfgGlobalTxPeriod_Object = MibScalar
dot1xNewCfgGlobalTxPeriod = _Dot1xNewCfgGlobalTxPeriod_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 6, 3),
    _Dot1xNewCfgGlobalTxPeriod_Type()
)
dot1xNewCfgGlobalTxPeriod.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgGlobalTxPeriod.setStatus("current")


class _Dot1xNewCfgGlobalSupTmout_Type(Integer32):
    """Custom type dot1xNewCfgGlobalSupTmout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Dot1xNewCfgGlobalSupTmout_Type.__name__ = "Integer32"
_Dot1xNewCfgGlobalSupTmout_Object = MibScalar
dot1xNewCfgGlobalSupTmout = _Dot1xNewCfgGlobalSupTmout_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 6, 4),
    _Dot1xNewCfgGlobalSupTmout_Type()
)
dot1xNewCfgGlobalSupTmout.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgGlobalSupTmout.setStatus("current")


class _Dot1xNewCfgGlobalSrvTmout_Type(Integer32):
    """Custom type dot1xNewCfgGlobalSrvTmout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_Dot1xNewCfgGlobalSrvTmout_Type.__name__ = "Integer32"
_Dot1xNewCfgGlobalSrvTmout_Object = MibScalar
dot1xNewCfgGlobalSrvTmout = _Dot1xNewCfgGlobalSrvTmout_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 6, 5),
    _Dot1xNewCfgGlobalSrvTmout_Type()
)
dot1xNewCfgGlobalSrvTmout.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgGlobalSrvTmout.setStatus("current")


class _Dot1xNewCfgGlobalMaxRq_Type(Integer32):
    """Custom type dot1xNewCfgGlobalMaxRq based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_Dot1xNewCfgGlobalMaxRq_Type.__name__ = "Integer32"
_Dot1xNewCfgGlobalMaxRq_Object = MibScalar
dot1xNewCfgGlobalMaxRq = _Dot1xNewCfgGlobalMaxRq_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 6, 6),
    _Dot1xNewCfgGlobalMaxRq_Type()
)
dot1xNewCfgGlobalMaxRq.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgGlobalMaxRq.setStatus("current")


class _Dot1xNewCfgGlobalRaPeriod_Type(Integer32):
    """Custom type dot1xNewCfgGlobalRaPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 604800),
    )


_Dot1xNewCfgGlobalRaPeriod_Type.__name__ = "Integer32"
_Dot1xNewCfgGlobalRaPeriod_Object = MibScalar
dot1xNewCfgGlobalRaPeriod = _Dot1xNewCfgGlobalRaPeriod_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 6, 7),
    _Dot1xNewCfgGlobalRaPeriod_Type()
)
dot1xNewCfgGlobalRaPeriod.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgGlobalRaPeriod.setStatus("current")


class _Dot1xNewCfgGlobalReAuth_Type(Integer32):
    """Custom type dot1xNewCfgGlobalReAuth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_Dot1xNewCfgGlobalReAuth_Type.__name__ = "Integer32"
_Dot1xNewCfgGlobalReAuth_Object = MibScalar
dot1xNewCfgGlobalReAuth = _Dot1xNewCfgGlobalReAuth_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 11, 6, 8),
    _Dot1xNewCfgGlobalReAuth_Type()
)
dot1xNewCfgGlobalReAuth.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1xNewCfgGlobalReAuth.setStatus("current")
_Fdb_ObjectIdentity = ObjectIdentity
fdb = _Fdb_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 12)
)
_FdbGeneralCfg_ObjectIdentity = ObjectIdentity
fdbGeneralCfg = _FdbGeneralCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 12, 1)
)
_FdbCurCfgAgingTime_Type = Integer32
_FdbCurCfgAgingTime_Object = MibScalar
fdbCurCfgAgingTime = _FdbCurCfgAgingTime_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 12, 1, 1),
    _FdbCurCfgAgingTime_Type()
)
fdbCurCfgAgingTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbCurCfgAgingTime.setStatus("current")
_FdbNewCfgAgingTime_Type = Integer32
_FdbNewCfgAgingTime_Object = MibScalar
fdbNewCfgAgingTime = _FdbNewCfgAgingTime_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 12, 1, 2),
    _FdbNewCfgAgingTime_Type()
)
fdbNewCfgAgingTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fdbNewCfgAgingTime.setStatus("current")
_FdbNewCfgStaticTable_Object = MibTable
fdbNewCfgStaticTable = _FdbNewCfgStaticTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 12, 2)
)
if mibBuilder.loadTexts:
    fdbNewCfgStaticTable.setStatus("current")
_FdbNewCfgStaticEntry_Object = MibTableRow
fdbNewCfgStaticEntry = _FdbNewCfgStaticEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 12, 2, 1)
)
fdbNewCfgStaticEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "fdbNewCfgEntryIndex"),
)
if mibBuilder.loadTexts:
    fdbNewCfgStaticEntry.setStatus("current")
_FdbNewCfgEntryIndex_Type = Integer32
_FdbNewCfgEntryIndex_Object = MibTableColumn
fdbNewCfgEntryIndex = _FdbNewCfgEntryIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 12, 2, 1, 1),
    _FdbNewCfgEntryIndex_Type()
)
fdbNewCfgEntryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbNewCfgEntryIndex.setStatus("current")
_FdbNewCfgAddVlan_Type = Integer32
_FdbNewCfgAddVlan_Object = MibTableColumn
fdbNewCfgAddVlan = _FdbNewCfgAddVlan_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 12, 2, 1, 2),
    _FdbNewCfgAddVlan_Type()
)
fdbNewCfgAddVlan.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    fdbNewCfgAddVlan.setStatus("current")
_FdbNewCfgAddPort_Type = Integer32
_FdbNewCfgAddPort_Object = MibTableColumn
fdbNewCfgAddPort = _FdbNewCfgAddPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 12, 2, 1, 3),
    _FdbNewCfgAddPort_Type()
)
fdbNewCfgAddPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    fdbNewCfgAddPort.setStatus("current")
_FdbNewCfgAddMac_Type = PhysAddress
_FdbNewCfgAddMac_Object = MibTableColumn
fdbNewCfgAddMac = _FdbNewCfgAddMac_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 12, 2, 1, 4),
    _FdbNewCfgAddMac_Type()
)
fdbNewCfgAddMac.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    fdbNewCfgAddMac.setStatus("current")


class _FdbNewCfgDelStaticEntry_Type(Integer32):
    """Custom type fdbNewCfgDelStaticEntry based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_FdbNewCfgDelStaticEntry_Type.__name__ = "Integer32"
_FdbNewCfgDelStaticEntry_Object = MibTableColumn
fdbNewCfgDelStaticEntry = _FdbNewCfgDelStaticEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 12, 2, 1, 5),
    _FdbNewCfgDelStaticEntry_Type()
)
fdbNewCfgDelStaticEntry.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    fdbNewCfgDelStaticEntry.setStatus("current")
_FdbCurCfgStaticTable_Object = MibTable
fdbCurCfgStaticTable = _FdbCurCfgStaticTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 12, 3)
)
if mibBuilder.loadTexts:
    fdbCurCfgStaticTable.setStatus("current")
_FdbCurCfgStaticEntry_Object = MibTableRow
fdbCurCfgStaticEntry = _FdbCurCfgStaticEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 12, 3, 1)
)
fdbCurCfgStaticEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "fdbCurCfgEntryIndex"),
)
if mibBuilder.loadTexts:
    fdbCurCfgStaticEntry.setStatus("current")
_FdbCurCfgEntryIndex_Type = Integer32
_FdbCurCfgEntryIndex_Object = MibTableColumn
fdbCurCfgEntryIndex = _FdbCurCfgEntryIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 12, 3, 1, 1),
    _FdbCurCfgEntryIndex_Type()
)
fdbCurCfgEntryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbCurCfgEntryIndex.setStatus("current")
_FdbCurCfgVlan_Type = Integer32
_FdbCurCfgVlan_Object = MibTableColumn
fdbCurCfgVlan = _FdbCurCfgVlan_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 12, 3, 1, 2),
    _FdbCurCfgVlan_Type()
)
fdbCurCfgVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbCurCfgVlan.setStatus("current")
_FdbCurCfgPort_Type = Integer32
_FdbCurCfgPort_Object = MibTableColumn
fdbCurCfgPort = _FdbCurCfgPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 12, 3, 1, 3),
    _FdbCurCfgPort_Type()
)
fdbCurCfgPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbCurCfgPort.setStatus("current")
_FdbCurCfgMac_Type = PhysAddress
_FdbCurCfgMac_Object = MibTableColumn
fdbCurCfgMac = _FdbCurCfgMac_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 1, 12, 3, 1, 4),
    _FdbCurCfgMac_Type()
)
fdbCurCfgMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbCurCfgMac.setStatus("current")
_Layer2Stats_ObjectIdentity = ObjectIdentity
layer2Stats = _Layer2Stats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 2)
)
_FdbStats_ObjectIdentity = ObjectIdentity
fdbStats = _FdbStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 2, 1)
)
_FdbStatsCurrent_Type = Gauge32
_FdbStatsCurrent_Object = MibScalar
fdbStatsCurrent = _FdbStatsCurrent_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 2, 1, 3),
    _FdbStatsCurrent_Type()
)
fdbStatsCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbStatsCurrent.setStatus("current")
_FdbStatsHiwat_Type = Integer32
_FdbStatsHiwat_Object = MibScalar
fdbStatsHiwat = _FdbStatsHiwat_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 2, 1, 4),
    _FdbStatsHiwat_Type()
)
fdbStatsHiwat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbStatsHiwat.setStatus("current")


class _FdbStatsClear_Type(Integer32):
    """Custom type fdbStatsClear based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_FdbStatsClear_Type.__name__ = "Integer32"
_FdbStatsClear_Object = MibScalar
fdbStatsClear = _FdbStatsClear_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 2, 1, 11),
    _FdbStatsClear_Type()
)
fdbStatsClear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fdbStatsClear.setStatus("current")
_StpStats_ObjectIdentity = ObjectIdentity
stpStats = _StpStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 2, 2)
)
_StgStatsPortTable_Object = MibTable
stgStatsPortTable = _StgStatsPortTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 2, 2, 1)
)
if mibBuilder.loadTexts:
    stgStatsPortTable.setStatus("current")
_StgStatsPortTableEntry_Object = MibTableRow
stgStatsPortTableEntry = _StgStatsPortTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 2, 2, 1, 1)
)
stgStatsPortTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "stgStatsStpIndex"),
    (0, "BLADETYPE5-NETWORK-MIB", "stgStatsPortIndex"),
)
if mibBuilder.loadTexts:
    stgStatsPortTableEntry.setStatus("current")
_StgStatsStpIndex_Type = Integer32
_StgStatsStpIndex_Object = MibTableColumn
stgStatsStpIndex = _StgStatsStpIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 2, 2, 1, 1, 1),
    _StgStatsStpIndex_Type()
)
stgStatsStpIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgStatsStpIndex.setStatus("current")
_StgStatsPortIndex_Type = Integer32
_StgStatsPortIndex_Object = MibTableColumn
stgStatsPortIndex = _StgStatsPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 2, 2, 1, 1, 2),
    _StgStatsPortIndex_Type()
)
stgStatsPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgStatsPortIndex.setStatus("current")
_StgStatsPortRcvCfgBpdus_Type = Counter32
_StgStatsPortRcvCfgBpdus_Object = MibTableColumn
stgStatsPortRcvCfgBpdus = _StgStatsPortRcvCfgBpdus_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 2, 2, 1, 1, 3),
    _StgStatsPortRcvCfgBpdus_Type()
)
stgStatsPortRcvCfgBpdus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgStatsPortRcvCfgBpdus.setStatus("current")
_StgStatsPortRcvTcnBpdus_Type = Counter32
_StgStatsPortRcvTcnBpdus_Object = MibTableColumn
stgStatsPortRcvTcnBpdus = _StgStatsPortRcvTcnBpdus_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 2, 2, 1, 1, 4),
    _StgStatsPortRcvTcnBpdus_Type()
)
stgStatsPortRcvTcnBpdus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgStatsPortRcvTcnBpdus.setStatus("current")
_StgStatsPortXmtCfgBpdus_Type = Counter32
_StgStatsPortXmtCfgBpdus_Object = MibTableColumn
stgStatsPortXmtCfgBpdus = _StgStatsPortXmtCfgBpdus_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 2, 2, 1, 1, 5),
    _StgStatsPortXmtCfgBpdus_Type()
)
stgStatsPortXmtCfgBpdus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgStatsPortXmtCfgBpdus.setStatus("current")
_StgStatsPortXmtTcnBpdus_Type = Counter32
_StgStatsPortXmtTcnBpdus_Object = MibTableColumn
stgStatsPortXmtTcnBpdus = _StgStatsPortXmtTcnBpdus_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 2, 2, 1, 1, 6),
    _StgStatsPortXmtTcnBpdus_Type()
)
stgStatsPortXmtTcnBpdus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgStatsPortXmtTcnBpdus.setStatus("current")
_LacpStats_ObjectIdentity = ObjectIdentity
lacpStats = _LacpStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 2, 3)
)
_LacpStatsTable_Object = MibTable
lacpStatsTable = _LacpStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 2, 3, 1)
)
if mibBuilder.loadTexts:
    lacpStatsTable.setStatus("current")
_LacpStatsTableEntry_Object = MibTableRow
lacpStatsTableEntry = _LacpStatsTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 2, 3, 1, 1)
)
lacpStatsTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "lacpStatsIndex"),
)
if mibBuilder.loadTexts:
    lacpStatsTableEntry.setStatus("current")
_LacpStatsIndex_Type = Integer32
_LacpStatsIndex_Object = MibTableColumn
lacpStatsIndex = _LacpStatsIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 2, 3, 1, 1, 1),
    _LacpStatsIndex_Type()
)
lacpStatsIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpStatsIndex.setStatus("current")
_LacpdusRx_Type = Integer32
_LacpdusRx_Object = MibTableColumn
lacpdusRx = _LacpdusRx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 2, 3, 1, 1, 2),
    _LacpdusRx_Type()
)
lacpdusRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpdusRx.setStatus("current")
_MarkerpdusRx_Type = Integer32
_MarkerpdusRx_Object = MibTableColumn
markerpdusRx = _MarkerpdusRx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 2, 3, 1, 1, 3),
    _MarkerpdusRx_Type()
)
markerpdusRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    markerpdusRx.setStatus("current")
_MarkerresponsepdusRx_Type = Integer32
_MarkerresponsepdusRx_Object = MibTableColumn
markerresponsepdusRx = _MarkerresponsepdusRx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 2, 3, 1, 1, 4),
    _MarkerresponsepdusRx_Type()
)
markerresponsepdusRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    markerresponsepdusRx.setStatus("current")
_UnknownRx_Type = Integer32
_UnknownRx_Object = MibTableColumn
unknownRx = _UnknownRx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 2, 3, 1, 1, 5),
    _UnknownRx_Type()
)
unknownRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    unknownRx.setStatus("current")
_IllegalRx_Type = Integer32
_IllegalRx_Object = MibTableColumn
illegalRx = _IllegalRx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 2, 3, 1, 1, 6),
    _IllegalRx_Type()
)
illegalRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    illegalRx.setStatus("current")
_LacpdusTx_Type = Integer32
_LacpdusTx_Object = MibTableColumn
lacpdusTx = _LacpdusTx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 2, 3, 1, 1, 7),
    _LacpdusTx_Type()
)
lacpdusTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpdusTx.setStatus("current")
_MarkerpdusTx_Type = Integer32
_MarkerpdusTx_Object = MibTableColumn
markerpdusTx = _MarkerpdusTx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 2, 3, 1, 1, 8),
    _MarkerpdusTx_Type()
)
markerpdusTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    markerpdusTx.setStatus("current")
_MarkerresponsepdusTx_Type = Integer32
_MarkerresponsepdusTx_Object = MibTableColumn
markerresponsepdusTx = _MarkerresponsepdusTx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 2, 3, 1, 1, 9),
    _MarkerresponsepdusTx_Type()
)
markerresponsepdusTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    markerresponsepdusTx.setStatus("current")


class _LacpClearStats_Type(Integer32):
    """Custom type lacpClearStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_LacpClearStats_Type.__name__ = "Integer32"
_LacpClearStats_Object = MibTableColumn
lacpClearStats = _LacpClearStats_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 2, 3, 1, 1, 10),
    _LacpClearStats_Type()
)
lacpClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lacpClearStats.setStatus("current")
_UfdStats_ObjectIdentity = ObjectIdentity
ufdStats = _UfdStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 2, 4)
)
_UfdNoLtMLinkFailure_Type = Integer32
_UfdNoLtMLinkFailure_Object = MibScalar
ufdNoLtMLinkFailure = _UfdNoLtMLinkFailure_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 2, 4, 1),
    _UfdNoLtMLinkFailure_Type()
)
ufdNoLtMLinkFailure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ufdNoLtMLinkFailure.setStatus("current")
_UfdNoLtMLinkBlockingState_Type = Integer32
_UfdNoLtMLinkBlockingState_Object = MibScalar
ufdNoLtMLinkBlockingState = _UfdNoLtMLinkBlockingState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 2, 4, 2),
    _UfdNoLtMLinkBlockingState_Type()
)
ufdNoLtMLinkBlockingState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ufdNoLtMLinkBlockingState.setStatus("current")
_UfdNoLtDAutoDisabled_Type = Integer32
_UfdNoLtDAutoDisabled_Object = MibScalar
ufdNoLtDAutoDisabled = _UfdNoLtDAutoDisabled_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 2, 4, 3),
    _UfdNoLtDAutoDisabled_Type()
)
ufdNoLtDAutoDisabled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ufdNoLtDAutoDisabled.setStatus("current")


class _UfdClearStats_Type(Integer32):
    """Custom type ufdClearStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_UfdClearStats_Type.__name__ = "Integer32"
_UfdClearStats_Object = MibScalar
ufdClearStats = _UfdClearStats_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 2, 4, 4),
    _UfdClearStats_Type()
)
ufdClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ufdClearStats.setStatus("current")
_Layer2Info_ObjectIdentity = ObjectIdentity
layer2Info = _Layer2Info_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3)
)
_CistInfo_ObjectIdentity = ObjectIdentity
cistInfo = _CistInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 1)
)
_CistGeneralInfo_ObjectIdentity = ObjectIdentity
cistGeneralInfo = _CistGeneralInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 1, 1)
)
_CistRoot_Type = BridgeId
_CistRoot_Object = MibScalar
cistRoot = _CistRoot_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 1, 1, 1),
    _CistRoot_Type()
)
cistRoot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cistRoot.setStatus("current")
_CistRootPathCost_Type = Integer32
_CistRootPathCost_Object = MibScalar
cistRootPathCost = _CistRootPathCost_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 1, 1, 2),
    _CistRootPathCost_Type()
)
cistRootPathCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cistRootPathCost.setStatus("current")
_CistRootPort_Type = Integer32
_CistRootPort_Object = MibScalar
cistRootPort = _CistRootPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 1, 1, 3),
    _CistRootPort_Type()
)
cistRootPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cistRootPort.setStatus("current")
_CistRootMaxAge_Type = Integer32
_CistRootMaxAge_Object = MibScalar
cistRootMaxAge = _CistRootMaxAge_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 1, 1, 5),
    _CistRootMaxAge_Type()
)
cistRootMaxAge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cistRootMaxAge.setStatus("current")
_CistRootForwardDelay_Type = Integer32
_CistRootForwardDelay_Object = MibScalar
cistRootForwardDelay = _CistRootForwardDelay_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 1, 1, 6),
    _CistRootForwardDelay_Type()
)
cistRootForwardDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cistRootForwardDelay.setStatus("current")
_CistRegionalRoot_Type = BridgeId
_CistRegionalRoot_Object = MibScalar
cistRegionalRoot = _CistRegionalRoot_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 1, 1, 7),
    _CistRegionalRoot_Type()
)
cistRegionalRoot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cistRegionalRoot.setStatus("current")
_CistRegionalPathCost_Type = Integer32
_CistRegionalPathCost_Object = MibScalar
cistRegionalPathCost = _CistRegionalPathCost_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 1, 1, 8),
    _CistRegionalPathCost_Type()
)
cistRegionalPathCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cistRegionalPathCost.setStatus("current")


class _CistBridgePriority_Type(Integer32):
    """Custom type cistBridgePriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_CistBridgePriority_Type.__name__ = "Integer32"
_CistBridgePriority_Object = MibScalar
cistBridgePriority = _CistBridgePriority_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 1, 1, 9),
    _CistBridgePriority_Type()
)
cistBridgePriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cistBridgePriority.setStatus("current")


class _CistBridgeMaxAge_Type(Integer32):
    """Custom type cistBridgeMaxAge based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(6, 40),
    )


_CistBridgeMaxAge_Type.__name__ = "Integer32"
_CistBridgeMaxAge_Object = MibScalar
cistBridgeMaxAge = _CistBridgeMaxAge_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 1, 1, 10),
    _CistBridgeMaxAge_Type()
)
cistBridgeMaxAge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cistBridgeMaxAge.setStatus("current")


class _CistBridgeForwardDelay_Type(Integer32):
    """Custom type cistBridgeForwardDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 30),
    )


_CistBridgeForwardDelay_Type.__name__ = "Integer32"
_CistBridgeForwardDelay_Object = MibScalar
cistBridgeForwardDelay = _CistBridgeForwardDelay_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 1, 1, 11),
    _CistBridgeForwardDelay_Type()
)
cistBridgeForwardDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cistBridgeForwardDelay.setStatus("current")


class _CistMaxHopCount_Type(Integer32):
    """Custom type cistMaxHopCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 60),
    )


_CistMaxHopCount_Type.__name__ = "Integer32"
_CistMaxHopCount_Object = MibScalar
cistMaxHopCount = _CistMaxHopCount_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 1, 1, 12),
    _CistMaxHopCount_Type()
)
cistMaxHopCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cistMaxHopCount.setStatus("current")


class _MstpDigest_Type(DisplayString):
    """Custom type mstpDigest based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 63),
    )


_MstpDigest_Type.__name__ = "DisplayString"
_MstpDigest_Object = MibScalar
mstpDigest = _MstpDigest_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 1, 1, 13),
    _MstpDigest_Type()
)
mstpDigest.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mstpDigest.setStatus("current")
_CistInfoPortTable_Object = MibTable
cistInfoPortTable = _CistInfoPortTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 1, 2)
)
if mibBuilder.loadTexts:
    cistInfoPortTable.setStatus("current")
_CistInfoPortTableEntry_Object = MibTableRow
cistInfoPortTableEntry = _CistInfoPortTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 1, 2, 1)
)
cistInfoPortTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "cistInfoPortIndex"),
)
if mibBuilder.loadTexts:
    cistInfoPortTableEntry.setStatus("current")
_CistInfoPortIndex_Type = Integer32
_CistInfoPortIndex_Object = MibTableColumn
cistInfoPortIndex = _CistInfoPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 1, 2, 1, 1),
    _CistInfoPortIndex_Type()
)
cistInfoPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cistInfoPortIndex.setStatus("current")
_CistInfoPortPriority_Type = Integer32
_CistInfoPortPriority_Object = MibTableColumn
cistInfoPortPriority = _CistInfoPortPriority_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 1, 2, 1, 2),
    _CistInfoPortPriority_Type()
)
cistInfoPortPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cistInfoPortPriority.setStatus("current")
_CistInfoPortPathCost_Type = Integer32
_CistInfoPortPathCost_Object = MibTableColumn
cistInfoPortPathCost = _CistInfoPortPathCost_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 1, 2, 1, 3),
    _CistInfoPortPathCost_Type()
)
cistInfoPortPathCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cistInfoPortPathCost.setStatus("current")


class _CistInfoPortState_Type(Integer32):
    """Custom type cistInfoPortState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("discarding", 2),
          ("learning", 4),
          ("forwarding", 5))
    )


_CistInfoPortState_Type.__name__ = "Integer32"
_CistInfoPortState_Object = MibTableColumn
cistInfoPortState = _CistInfoPortState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 1, 2, 1, 4),
    _CistInfoPortState_Type()
)
cistInfoPortState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cistInfoPortState.setStatus("current")


class _CistInfoPortRole_Type(Integer32):
    """Custom type cistInfoPortRole based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("alternate", 2),
          ("backup", 3),
          ("root", 4),
          ("designated", 5),
          ("master", 6),
          ("unknown", 7))
    )


_CistInfoPortRole_Type.__name__ = "Integer32"
_CistInfoPortRole_Object = MibTableColumn
cistInfoPortRole = _CistInfoPortRole_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 1, 2, 1, 5),
    _CistInfoPortRole_Type()
)
cistInfoPortRole.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cistInfoPortRole.setStatus("current")
_CistInfoPortDesignatedBridge_Type = BridgeId
_CistInfoPortDesignatedBridge_Object = MibTableColumn
cistInfoPortDesignatedBridge = _CistInfoPortDesignatedBridge_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 1, 2, 1, 6),
    _CistInfoPortDesignatedBridge_Type()
)
cistInfoPortDesignatedBridge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cistInfoPortDesignatedBridge.setStatus("current")


class _CistInfoPortDesignatedPort_Type(OctetString):
    """Custom type cistInfoPortDesignatedPort based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )
    fixed_length = 2


_CistInfoPortDesignatedPort_Type.__name__ = "OctetString"
_CistInfoPortDesignatedPort_Object = MibTableColumn
cistInfoPortDesignatedPort = _CistInfoPortDesignatedPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 1, 2, 1, 7),
    _CistInfoPortDesignatedPort_Type()
)
cistInfoPortDesignatedPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cistInfoPortDesignatedPort.setStatus("current")


class _CistInfoPortLinkType_Type(Integer32):
    """Custom type cistInfoPortLinkType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("p2p", 1),
          ("shared", 2),
          ("unknown", 3))
    )


_CistInfoPortLinkType_Type.__name__ = "Integer32"
_CistInfoPortLinkType_Object = MibTableColumn
cistInfoPortLinkType = _CistInfoPortLinkType_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 1, 2, 1, 8),
    _CistInfoPortLinkType_Type()
)
cistInfoPortLinkType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cistInfoPortLinkType.setStatus("current")


class _CistInfoPortHelloTime_Type(Integer32):
    """Custom type cistInfoPortHelloTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_CistInfoPortHelloTime_Type.__name__ = "Integer32"
_CistInfoPortHelloTime_Object = MibTableColumn
cistInfoPortHelloTime = _CistInfoPortHelloTime_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 1, 2, 1, 9),
    _CistInfoPortHelloTime_Type()
)
cistInfoPortHelloTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cistInfoPortHelloTime.setStatus("current")
_FdbInfo_ObjectIdentity = ObjectIdentity
fdbInfo = _FdbInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 2)
)


class _FdbClear_Type(Integer32):
    """Custom type fdbClear based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_FdbClear_Type.__name__ = "Integer32"
_FdbClear_Object = MibScalar
fdbClear = _FdbClear_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 2, 1),
    _FdbClear_Type()
)
fdbClear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fdbClear.setStatus("current")
_FdbTable_Object = MibTable
fdbTable = _FdbTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 2, 2)
)
if mibBuilder.loadTexts:
    fdbTable.setStatus("current")
_FdbEntry_Object = MibTableRow
fdbEntry = _FdbEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 2, 2, 1)
)
fdbEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "fdbMacAddr"),
)
if mibBuilder.loadTexts:
    fdbEntry.setStatus("current")
_FdbMacAddr_Type = PhysAddress
_FdbMacAddr_Object = MibTableColumn
fdbMacAddr = _FdbMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 2, 2, 1, 1),
    _FdbMacAddr_Type()
)
fdbMacAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbMacAddr.setStatus("current")
_FdbVlan_Type = Integer32
_FdbVlan_Object = MibTableColumn
fdbVlan = _FdbVlan_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 2, 2, 1, 2),
    _FdbVlan_Type()
)
fdbVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbVlan.setStatus("current")
_FdbSrcPort_Type = Integer32
_FdbSrcPort_Object = MibTableColumn
fdbSrcPort = _FdbSrcPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 2, 2, 1, 3),
    _FdbSrcPort_Type()
)
fdbSrcPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbSrcPort.setStatus("current")


class _FdbState_Type(Integer32):
    """Custom type fdbState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 1),
          ("forward", 2),
          ("trunk", 3))
    )


_FdbState_Type.__name__ = "Integer32"
_FdbState_Object = MibTableColumn
fdbState = _FdbState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 2, 2, 1, 4),
    _FdbState_Type()
)
fdbState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbState.setStatus("current")


class _FdbRefSps_Type(DisplayString):
    """Custom type fdbRefSps based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_FdbRefSps_Type.__name__ = "DisplayString"
_FdbRefSps_Object = MibTableColumn
fdbRefSps = _FdbRefSps_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 2, 2, 1, 5),
    _FdbRefSps_Type()
)
fdbRefSps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbRefSps.setStatus("current")
_FdbLearnedPort_Type = Integer32
_FdbLearnedPort_Object = MibTableColumn
fdbLearnedPort = _FdbLearnedPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 2, 2, 1, 6),
    _FdbLearnedPort_Type()
)
fdbLearnedPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbLearnedPort.setStatus("current")
_FdbSrcTrunk_Type = Integer32
_FdbSrcTrunk_Object = MibTableColumn
fdbSrcTrunk = _FdbSrcTrunk_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 2, 2, 1, 7),
    _FdbSrcTrunk_Type()
)
fdbSrcTrunk.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbSrcTrunk.setStatus("current")
_FdbStatus_Type = Integer32
_FdbStatus_Object = MibTableColumn
fdbStatus = _FdbStatus_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 2, 2, 1, 8),
    _FdbStatus_Type()
)
fdbStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdbStatus.setStatus("current")
_StpInfo_ObjectIdentity = ObjectIdentity
stpInfo = _StpInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 3)
)
_StpInfoTable_Object = MibTable
stpInfoTable = _StpInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 3, 1)
)
if mibBuilder.loadTexts:
    stpInfoTable.setStatus("current")
_StpInfoTableEntry_Object = MibTableRow
stpInfoTableEntry = _StpInfoTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 3, 1, 1)
)
stpInfoTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "stpInfoIndex"),
)
if mibBuilder.loadTexts:
    stpInfoTableEntry.setStatus("current")
_StpInfoIndex_Type = Integer32
_StpInfoIndex_Object = MibTableColumn
stpInfoIndex = _StpInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 3, 1, 1, 1),
    _StpInfoIndex_Type()
)
stpInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoIndex.setStatus("current")


class _StpInfoState_Type(Integer32):
    """Custom type stpInfoState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_StpInfoState_Type.__name__ = "Integer32"
_StpInfoState_Object = MibTableColumn
stpInfoState = _StpInfoState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 3, 1, 1, 2),
    _StpInfoState_Type()
)
stpInfoState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoState.setStatus("current")


class _StgInfoVlanBmap_Type(OctetString):
    """Custom type stgInfoVlanBmap based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 512),
    )


_StgInfoVlanBmap_Type.__name__ = "OctetString"
_StgInfoVlanBmap_Object = MibTableColumn
stgInfoVlanBmap = _StgInfoVlanBmap_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 3, 1, 1, 3),
    _StgInfoVlanBmap_Type()
)
stgInfoVlanBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stgInfoVlanBmap.setStatus("current")
_StpInfoTimeSinceTopChange_Type = TimeTicks
_StpInfoTimeSinceTopChange_Object = MibTableColumn
stpInfoTimeSinceTopChange = _StpInfoTimeSinceTopChange_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 3, 1, 1, 4),
    _StpInfoTimeSinceTopChange_Type()
)
stpInfoTimeSinceTopChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoTimeSinceTopChange.setStatus("current")
_StpInfoTopChanges_Type = Counter32
_StpInfoTopChanges_Object = MibTableColumn
stpInfoTopChanges = _StpInfoTopChanges_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 3, 1, 1, 5),
    _StpInfoTopChanges_Type()
)
stpInfoTopChanges.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoTopChanges.setStatus("current")
_StpInfoDesignatedRoot_Type = BridgeId
_StpInfoDesignatedRoot_Object = MibTableColumn
stpInfoDesignatedRoot = _StpInfoDesignatedRoot_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 3, 1, 1, 6),
    _StpInfoDesignatedRoot_Type()
)
stpInfoDesignatedRoot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoDesignatedRoot.setStatus("current")
_StpInfoRootCost_Type = Integer32
_StpInfoRootCost_Object = MibTableColumn
stpInfoRootCost = _StpInfoRootCost_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 3, 1, 1, 7),
    _StpInfoRootCost_Type()
)
stpInfoRootCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoRootCost.setStatus("current")
_StpInfoRootPort_Type = Integer32
_StpInfoRootPort_Object = MibTableColumn
stpInfoRootPort = _StpInfoRootPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 3, 1, 1, 8),
    _StpInfoRootPort_Type()
)
stpInfoRootPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoRootPort.setStatus("current")
_StpInfoMaxAge_Type = Integer32
_StpInfoMaxAge_Object = MibTableColumn
stpInfoMaxAge = _StpInfoMaxAge_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 3, 1, 1, 9),
    _StpInfoMaxAge_Type()
)
stpInfoMaxAge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoMaxAge.setStatus("current")
_StpInfoHelloTime_Type = Integer32
_StpInfoHelloTime_Object = MibTableColumn
stpInfoHelloTime = _StpInfoHelloTime_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 3, 1, 1, 10),
    _StpInfoHelloTime_Type()
)
stpInfoHelloTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoHelloTime.setStatus("current")
_StpInfoForwardDelay_Type = Integer32
_StpInfoForwardDelay_Object = MibTableColumn
stpInfoForwardDelay = _StpInfoForwardDelay_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 3, 1, 1, 11),
    _StpInfoForwardDelay_Type()
)
stpInfoForwardDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoForwardDelay.setStatus("current")
_StpInfoHoldTime_Type = Integer32
_StpInfoHoldTime_Object = MibTableColumn
stpInfoHoldTime = _StpInfoHoldTime_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 3, 1, 1, 12),
    _StpInfoHoldTime_Type()
)
stpInfoHoldTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoHoldTime.setStatus("current")


class _StpInfoBrgPriority_Type(Integer32):
    """Custom type stpInfoBrgPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_StpInfoBrgPriority_Type.__name__ = "Integer32"
_StpInfoBrgPriority_Object = MibTableColumn
stpInfoBrgPriority = _StpInfoBrgPriority_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 3, 1, 1, 13),
    _StpInfoBrgPriority_Type()
)
stpInfoBrgPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoBrgPriority.setStatus("current")


class _StpInfoBrgHelloTime_Type(Integer32):
    """Custom type stpInfoBrgHelloTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_StpInfoBrgHelloTime_Type.__name__ = "Integer32"
_StpInfoBrgHelloTime_Object = MibTableColumn
stpInfoBrgHelloTime = _StpInfoBrgHelloTime_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 3, 1, 1, 14),
    _StpInfoBrgHelloTime_Type()
)
stpInfoBrgHelloTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoBrgHelloTime.setStatus("current")


class _StpInfoBrgForwardDelay_Type(Integer32):
    """Custom type stpInfoBrgForwardDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 30),
    )


_StpInfoBrgForwardDelay_Type.__name__ = "Integer32"
_StpInfoBrgForwardDelay_Object = MibTableColumn
stpInfoBrgForwardDelay = _StpInfoBrgForwardDelay_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 3, 1, 1, 15),
    _StpInfoBrgForwardDelay_Type()
)
stpInfoBrgForwardDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoBrgForwardDelay.setStatus("current")


class _StpInfoBrgMaxAge_Type(Integer32):
    """Custom type stpInfoBrgMaxAge based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(6, 40),
    )


_StpInfoBrgMaxAge_Type.__name__ = "Integer32"
_StpInfoBrgMaxAge_Object = MibTableColumn
stpInfoBrgMaxAge = _StpInfoBrgMaxAge_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 3, 1, 1, 16),
    _StpInfoBrgMaxAge_Type()
)
stpInfoBrgMaxAge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoBrgMaxAge.setStatus("current")


class _StpInfoAgingTime_Type(Integer32):
    """Custom type stpInfoAgingTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_StpInfoAgingTime_Type.__name__ = "Integer32"
_StpInfoAgingTime_Object = MibTableColumn
stpInfoAgingTime = _StpInfoAgingTime_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 3, 1, 1, 17),
    _StpInfoAgingTime_Type()
)
stpInfoAgingTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoAgingTime.setStatus("current")
_StpInfoPortTable_Object = MibTable
stpInfoPortTable = _StpInfoPortTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 3, 2)
)
if mibBuilder.loadTexts:
    stpInfoPortTable.setStatus("current")
_StpInfoPortTableEntry_Object = MibTableRow
stpInfoPortTableEntry = _StpInfoPortTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 3, 2, 1)
)
stpInfoPortTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "stpInfoPortStpIndex"),
    (0, "BLADETYPE5-NETWORK-MIB", "stpInfoPortIndex"),
)
if mibBuilder.loadTexts:
    stpInfoPortTableEntry.setStatus("current")
_StpInfoPortStpIndex_Type = Integer32
_StpInfoPortStpIndex_Object = MibTableColumn
stpInfoPortStpIndex = _StpInfoPortStpIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 3, 2, 1, 1),
    _StpInfoPortStpIndex_Type()
)
stpInfoPortStpIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoPortStpIndex.setStatus("current")
_StpInfoPortIndex_Type = Integer32
_StpInfoPortIndex_Object = MibTableColumn
stpInfoPortIndex = _StpInfoPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 3, 2, 1, 2),
    _StpInfoPortIndex_Type()
)
stpInfoPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoPortIndex.setStatus("current")


class _StpInfoPortState_Type(Integer32):
    """Custom type stpInfoPortState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("blocking", 2),
          ("listening", 3),
          ("learning", 4),
          ("forwarding", 5),
          ("broken", 6))
    )


_StpInfoPortState_Type.__name__ = "Integer32"
_StpInfoPortState_Object = MibTableColumn
stpInfoPortState = _StpInfoPortState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 3, 2, 1, 3),
    _StpInfoPortState_Type()
)
stpInfoPortState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoPortState.setStatus("current")
_StpInfoPortDesignatedRoot_Type = BridgeId
_StpInfoPortDesignatedRoot_Object = MibTableColumn
stpInfoPortDesignatedRoot = _StpInfoPortDesignatedRoot_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 3, 2, 1, 4),
    _StpInfoPortDesignatedRoot_Type()
)
stpInfoPortDesignatedRoot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoPortDesignatedRoot.setStatus("current")
_StpInfoPortDesignatedCost_Type = Integer32
_StpInfoPortDesignatedCost_Object = MibTableColumn
stpInfoPortDesignatedCost = _StpInfoPortDesignatedCost_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 3, 2, 1, 5),
    _StpInfoPortDesignatedCost_Type()
)
stpInfoPortDesignatedCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoPortDesignatedCost.setStatus("current")
_StpInfoPortDesignatedBridge_Type = BridgeId
_StpInfoPortDesignatedBridge_Object = MibTableColumn
stpInfoPortDesignatedBridge = _StpInfoPortDesignatedBridge_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 3, 2, 1, 6),
    _StpInfoPortDesignatedBridge_Type()
)
stpInfoPortDesignatedBridge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoPortDesignatedBridge.setStatus("current")


class _StpInfoPortDesignatedPort_Type(OctetString):
    """Custom type stpInfoPortDesignatedPort based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )
    fixed_length = 2


_StpInfoPortDesignatedPort_Type.__name__ = "OctetString"
_StpInfoPortDesignatedPort_Object = MibTableColumn
stpInfoPortDesignatedPort = _StpInfoPortDesignatedPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 3, 2, 1, 7),
    _StpInfoPortDesignatedPort_Type()
)
stpInfoPortDesignatedPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoPortDesignatedPort.setStatus("current")
_StpInfoPortForwardTransitions_Type = Counter32
_StpInfoPortForwardTransitions_Object = MibTableColumn
stpInfoPortForwardTransitions = _StpInfoPortForwardTransitions_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 3, 2, 1, 8),
    _StpInfoPortForwardTransitions_Type()
)
stpInfoPortForwardTransitions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoPortForwardTransitions.setStatus("current")
_StpInfoPortPathCost_Type = Integer32
_StpInfoPortPathCost_Object = MibTableColumn
stpInfoPortPathCost = _StpInfoPortPathCost_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 3, 2, 1, 9),
    _StpInfoPortPathCost_Type()
)
stpInfoPortPathCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stpInfoPortPathCost.setStatus("current")
_LacpInfo_ObjectIdentity = ObjectIdentity
lacpInfo = _LacpInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4)
)
_LacpInfoAggrTable_Object = MibTable
lacpInfoAggrTable = _LacpInfoAggrTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 1)
)
if mibBuilder.loadTexts:
    lacpInfoAggrTable.setStatus("current")
_LacpInfoAggrTableEntry_Object = MibTableRow
lacpInfoAggrTableEntry = _LacpInfoAggrTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 1, 1)
)
lacpInfoAggrTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "lacpInfoAggrIndex"),
)
if mibBuilder.loadTexts:
    lacpInfoAggrTableEntry.setStatus("current")
_LacpInfoAggrIndex_Type = Integer32
_LacpInfoAggrIndex_Object = MibTableColumn
lacpInfoAggrIndex = _LacpInfoAggrIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 1, 1, 1),
    _LacpInfoAggrIndex_Type()
)
lacpInfoAggrIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoAggrIndex.setStatus("current")
_LacpInfoAggrId_Type = Integer32
_LacpInfoAggrId_Object = MibTableColumn
lacpInfoAggrId = _LacpInfoAggrId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 1, 1, 2),
    _LacpInfoAggrId_Type()
)
lacpInfoAggrId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoAggrId.setStatus("current")
_LacpInfoAggrMac_Type = DisplayString
_LacpInfoAggrMac_Object = MibTableColumn
lacpInfoAggrMac = _LacpInfoAggrMac_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 1, 1, 3),
    _LacpInfoAggrMac_Type()
)
lacpInfoAggrMac.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoAggrMac.setStatus("current")
_LacpInfoAggrActSysPrio_Type = Integer32
_LacpInfoAggrActSysPrio_Object = MibTableColumn
lacpInfoAggrActSysPrio = _LacpInfoAggrActSysPrio_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 1, 1, 4),
    _LacpInfoAggrActSysPrio_Type()
)
lacpInfoAggrActSysPrio.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoAggrActSysPrio.setStatus("current")
_LacpInfoAggrActSysId_Type = DisplayString
_LacpInfoAggrActSysId_Object = MibTableColumn
lacpInfoAggrActSysId = _LacpInfoAggrActSysId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 1, 1, 5),
    _LacpInfoAggrActSysId_Type()
)
lacpInfoAggrActSysId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoAggrActSysId.setStatus("current")


class _LacpInfoAggrIndivState_Type(Integer32):
    """Custom type lacpInfoAggrIndivState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoAggrIndivState_Type.__name__ = "Integer32"
_LacpInfoAggrIndivState_Object = MibTableColumn
lacpInfoAggrIndivState = _LacpInfoAggrIndivState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 1, 1, 6),
    _LacpInfoAggrIndivState_Type()
)
lacpInfoAggrIndivState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoAggrIndivState.setStatus("current")
_LacpInfoAggrActAdminKey_Type = Integer32
_LacpInfoAggrActAdminKey_Object = MibTableColumn
lacpInfoAggrActAdminKey = _LacpInfoAggrActAdminKey_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 1, 1, 7),
    _LacpInfoAggrActAdminKey_Type()
)
lacpInfoAggrActAdminKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoAggrActAdminKey.setStatus("current")
_LacpInfoAggrActOperKey_Type = Integer32
_LacpInfoAggrActOperKey_Object = MibTableColumn
lacpInfoAggrActOperKey = _LacpInfoAggrActOperKey_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 1, 1, 8),
    _LacpInfoAggrActOperKey_Type()
)
lacpInfoAggrActOperKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoAggrActOperKey.setStatus("current")
_LacpInfoAggrPartSysPrio_Type = Integer32
_LacpInfoAggrPartSysPrio_Object = MibTableColumn
lacpInfoAggrPartSysPrio = _LacpInfoAggrPartSysPrio_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 1, 1, 9),
    _LacpInfoAggrPartSysPrio_Type()
)
lacpInfoAggrPartSysPrio.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoAggrPartSysPrio.setStatus("current")
_LacpInfoAggrPartSysId_Type = DisplayString
_LacpInfoAggrPartSysId_Object = MibTableColumn
lacpInfoAggrPartSysId = _LacpInfoAggrPartSysId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 1, 1, 10),
    _LacpInfoAggrPartSysId_Type()
)
lacpInfoAggrPartSysId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoAggrPartSysId.setStatus("current")
_LacpInfoAggrPartOperKey_Type = Integer32
_LacpInfoAggrPartOperKey_Object = MibTableColumn
lacpInfoAggrPartOperKey = _LacpInfoAggrPartOperKey_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 1, 1, 11),
    _LacpInfoAggrPartOperKey_Type()
)
lacpInfoAggrPartOperKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoAggrPartOperKey.setStatus("current")


class _LacpInfoAggrReadyState_Type(Integer32):
    """Custom type lacpInfoAggrReadyState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoAggrReadyState_Type.__name__ = "Integer32"
_LacpInfoAggrReadyState_Object = MibTableColumn
lacpInfoAggrReadyState = _LacpInfoAggrReadyState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 1, 1, 12),
    _LacpInfoAggrReadyState_Type()
)
lacpInfoAggrReadyState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoAggrReadyState.setStatus("current")
_LacpInfoAggrNumPorts_Type = Integer32
_LacpInfoAggrNumPorts_Object = MibTableColumn
lacpInfoAggrNumPorts = _LacpInfoAggrNumPorts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 1, 1, 13),
    _LacpInfoAggrNumPorts_Type()
)
lacpInfoAggrNumPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoAggrNumPorts.setStatus("current")
_LacpInfoAggrPorts_Type = DisplayString
_LacpInfoAggrPorts_Object = MibTableColumn
lacpInfoAggrPorts = _LacpInfoAggrPorts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 1, 1, 14),
    _LacpInfoAggrPorts_Type()
)
lacpInfoAggrPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoAggrPorts.setStatus("current")
_LacpInfoPort_ObjectIdentity = ObjectIdentity
lacpInfoPort = _LacpInfoPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2)
)
_LacpInfoPortGeneralTable_Object = MibTable
lacpInfoPortGeneralTable = _LacpInfoPortGeneralTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 1)
)
if mibBuilder.loadTexts:
    lacpInfoPortGeneralTable.setStatus("current")
_LacpInfoPortGeneralTableEntry_Object = MibTableRow
lacpInfoPortGeneralTableEntry = _LacpInfoPortGeneralTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 1, 1)
)
lacpInfoPortGeneralTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "lacpInfoPortGeneralIndex"),
)
if mibBuilder.loadTexts:
    lacpInfoPortGeneralTableEntry.setStatus("current")
_LacpInfoPortGeneralIndex_Type = Integer32
_LacpInfoPortGeneralIndex_Object = MibTableColumn
lacpInfoPortGeneralIndex = _LacpInfoPortGeneralIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 1, 1, 1),
    _LacpInfoPortGeneralIndex_Type()
)
lacpInfoPortGeneralIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortGeneralIndex.setStatus("current")


class _LacpInfoPortLacpEna_Type(Integer32):
    """Custom type lacpInfoPortLacpEna based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortLacpEna_Type.__name__ = "Integer32"
_LacpInfoPortLacpEna_Object = MibTableColumn
lacpInfoPortLacpEna = _LacpInfoPortLacpEna_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 1, 1, 2),
    _LacpInfoPortLacpEna_Type()
)
lacpInfoPortLacpEna.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortLacpEna.setStatus("current")


class _LacpInfoPortAdminEna_Type(Integer32):
    """Custom type lacpInfoPortAdminEna based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortAdminEna_Type.__name__ = "Integer32"
_LacpInfoPortAdminEna_Object = MibTableColumn
lacpInfoPortAdminEna = _LacpInfoPortAdminEna_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 1, 1, 3),
    _LacpInfoPortAdminEna_Type()
)
lacpInfoPortAdminEna.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortAdminEna.setStatus("current")
_LacpInfoPortActSysId_Type = DisplayString
_LacpInfoPortActSysId_Object = MibTableColumn
lacpInfoPortActSysId = _LacpInfoPortActSysId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 1, 1, 4),
    _LacpInfoPortActSysId_Type()
)
lacpInfoPortActSysId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActSysId.setStatus("current")
_LacpInfoPortActSysPrio_Type = Integer32
_LacpInfoPortActSysPrio_Object = MibTableColumn
lacpInfoPortActSysPrio = _LacpInfoPortActSysPrio_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 1, 1, 5),
    _LacpInfoPortActSysPrio_Type()
)
lacpInfoPortActSysPrio.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActSysPrio.setStatus("current")
_LacpInfoPortActAdminKey_Type = Integer32
_LacpInfoPortActAdminKey_Object = MibTableColumn
lacpInfoPortActAdminKey = _LacpInfoPortActAdminKey_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 1, 1, 6),
    _LacpInfoPortActAdminKey_Type()
)
lacpInfoPortActAdminKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActAdminKey.setStatus("current")
_LacpInfoPortActOperKey_Type = Integer32
_LacpInfoPortActOperKey_Object = MibTableColumn
lacpInfoPortActOperKey = _LacpInfoPortActOperKey_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 1, 1, 7),
    _LacpInfoPortActOperKey_Type()
)
lacpInfoPortActOperKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActOperKey.setStatus("current")
_LacpInfoPortActPortNum_Type = Integer32
_LacpInfoPortActPortNum_Object = MibTableColumn
lacpInfoPortActPortNum = _LacpInfoPortActPortNum_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 1, 1, 8),
    _LacpInfoPortActPortNum_Type()
)
lacpInfoPortActPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActPortNum.setStatus("current")
_LacpInfoPortActPortPrio_Type = Integer32
_LacpInfoPortActPortPrio_Object = MibTableColumn
lacpInfoPortActPortPrio = _LacpInfoPortActPortPrio_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 1, 1, 9),
    _LacpInfoPortActPortPrio_Type()
)
lacpInfoPortActPortPrio.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActPortPrio.setStatus("current")


class _LacpInfoPortIndivState_Type(Integer32):
    """Custom type lacpInfoPortIndivState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortIndivState_Type.__name__ = "Integer32"
_LacpInfoPortIndivState_Object = MibTableColumn
lacpInfoPortIndivState = _LacpInfoPortIndivState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 1, 1, 10),
    _LacpInfoPortIndivState_Type()
)
lacpInfoPortIndivState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortIndivState.setStatus("current")
_LacpInfoSelAggrId_Type = Integer32
_LacpInfoSelAggrId_Object = MibTableColumn
lacpInfoSelAggrId = _LacpInfoSelAggrId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 1, 1, 11),
    _LacpInfoSelAggrId_Type()
)
lacpInfoSelAggrId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoSelAggrId.setStatus("current")
_LacpInfoAttAggrId_Type = Integer32
_LacpInfoAttAggrId_Object = MibTableColumn
lacpInfoAttAggrId = _LacpInfoAttAggrId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 1, 1, 12),
    _LacpInfoAttAggrId_Type()
)
lacpInfoAttAggrId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoAttAggrId.setStatus("current")


class _LacpInfoPortReadyN_Type(Integer32):
    """Custom type lacpInfoPortReadyN based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortReadyN_Type.__name__ = "Integer32"
_LacpInfoPortReadyN_Object = MibTableColumn
lacpInfoPortReadyN = _LacpInfoPortReadyN_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 1, 1, 13),
    _LacpInfoPortReadyN_Type()
)
lacpInfoPortReadyN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortReadyN.setStatus("current")


class _LacpInfoPortNtt_Type(Integer32):
    """Custom type lacpInfoPortNtt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortNtt_Type.__name__ = "Integer32"
_LacpInfoPortNtt_Object = MibTableColumn
lacpInfoPortNtt = _LacpInfoPortNtt_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 1, 1, 14),
    _LacpInfoPortNtt_Type()
)
lacpInfoPortNtt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortNtt.setStatus("current")


class _LacpInfoPortSelected_Type(Integer32):
    """Custom type lacpInfoPortSelected based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("selected", 1),
          ("unselected", 2),
          ("standby", 3))
    )


_LacpInfoPortSelected_Type.__name__ = "Integer32"
_LacpInfoPortSelected_Object = MibTableColumn
lacpInfoPortSelected = _LacpInfoPortSelected_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 1, 1, 15),
    _LacpInfoPortSelected_Type()
)
lacpInfoPortSelected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortSelected.setStatus("current")


class _LacpInfoPortMoved_Type(Integer32):
    """Custom type lacpInfoPortMoved based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortMoved_Type.__name__ = "Integer32"
_LacpInfoPortMoved_Object = MibTableColumn
lacpInfoPortMoved = _LacpInfoPortMoved_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 1, 1, 16),
    _LacpInfoPortMoved_Type()
)
lacpInfoPortMoved.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortMoved.setStatus("current")


class _LacpInfoCollDetState_Type(Integer32):
    """Custom type lacpInfoCollDetState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_LacpInfoCollDetState_Type.__name__ = "Integer32"
_LacpInfoCollDetState_Object = MibTableColumn
lacpInfoCollDetState = _LacpInfoCollDetState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 1, 1, 17),
    _LacpInfoCollDetState_Type()
)
lacpInfoCollDetState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoCollDetState.setStatus("current")
_LacpInfoPortRxState_Type = DisplayString
_LacpInfoPortRxState_Object = MibTableColumn
lacpInfoPortRxState = _LacpInfoPortRxState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 1, 1, 18),
    _LacpInfoPortRxState_Type()
)
lacpInfoPortRxState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortRxState.setStatus("current")
_LacpInfoPortMuxState_Type = DisplayString
_LacpInfoPortMuxState_Object = MibTableColumn
lacpInfoPortMuxState = _LacpInfoPortMuxState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 1, 1, 19),
    _LacpInfoPortMuxState_Type()
)
lacpInfoPortMuxState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortMuxState.setStatus("current")
_LacpInfoPortPerState_Type = DisplayString
_LacpInfoPortPerState_Object = MibTableColumn
lacpInfoPortPerState = _LacpInfoPortPerState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 1, 1, 20),
    _LacpInfoPortPerState_Type()
)
lacpInfoPortPerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortPerState.setStatus("current")
_LacpInfoPortAdminTable_Object = MibTable
lacpInfoPortAdminTable = _LacpInfoPortAdminTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 2)
)
if mibBuilder.loadTexts:
    lacpInfoPortAdminTable.setStatus("current")
_LacpInfoPortAdminTableEntry_Object = MibTableRow
lacpInfoPortAdminTableEntry = _LacpInfoPortAdminTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 2, 1)
)
lacpInfoPortAdminTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "lacpInfoPortAdminIndex"),
)
if mibBuilder.loadTexts:
    lacpInfoPortAdminTableEntry.setStatus("current")
_LacpInfoPortAdminIndex_Type = Integer32
_LacpInfoPortAdminIndex_Object = MibTableColumn
lacpInfoPortAdminIndex = _LacpInfoPortAdminIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 2, 1, 1),
    _LacpInfoPortAdminIndex_Type()
)
lacpInfoPortAdminIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortAdminIndex.setStatus("current")
_LacpInfoPortActAdPortState_Type = DisplayString
_LacpInfoPortActAdPortState_Object = MibTableColumn
lacpInfoPortActAdPortState = _LacpInfoPortActAdPortState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 2, 1, 7),
    _LacpInfoPortActAdPortState_Type()
)
lacpInfoPortActAdPortState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActAdPortState.setStatus("current")


class _LacpInfoPortActAdActiv_Type(Integer32):
    """Custom type lacpInfoPortActAdActiv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("passive", 2))
    )


_LacpInfoPortActAdActiv_Type.__name__ = "Integer32"
_LacpInfoPortActAdActiv_Object = MibTableColumn
lacpInfoPortActAdActiv = _LacpInfoPortActAdActiv_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 2, 1, 8),
    _LacpInfoPortActAdActiv_Type()
)
lacpInfoPortActAdActiv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActAdActiv.setStatus("current")


class _LacpInfoPortActAdSync_Type(Integer32):
    """Custom type lacpInfoPortActAdSync based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortActAdSync_Type.__name__ = "Integer32"
_LacpInfoPortActAdSync_Object = MibTableColumn
lacpInfoPortActAdSync = _LacpInfoPortActAdSync_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 2, 1, 9),
    _LacpInfoPortActAdSync_Type()
)
lacpInfoPortActAdSync.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActAdSync.setStatus("current")


class _LacpInfoPortActAdDef_Type(Integer32):
    """Custom type lacpInfoPortActAdDef based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortActAdDef_Type.__name__ = "Integer32"
_LacpInfoPortActAdDef_Object = MibTableColumn
lacpInfoPortActAdDef = _LacpInfoPortActAdDef_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 2, 1, 10),
    _LacpInfoPortActAdDef_Type()
)
lacpInfoPortActAdDef.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActAdDef.setStatus("current")


class _LacpInfoPortActAdTimeout_Type(Integer32):
    """Custom type lacpInfoPortActAdTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("short", 1),
          ("long", 2))
    )


_LacpInfoPortActAdTimeout_Type.__name__ = "Integer32"
_LacpInfoPortActAdTimeout_Object = MibTableColumn
lacpInfoPortActAdTimeout = _LacpInfoPortActAdTimeout_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 2, 1, 11),
    _LacpInfoPortActAdTimeout_Type()
)
lacpInfoPortActAdTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActAdTimeout.setStatus("current")


class _LacpInfoPortActAdColl_Type(Integer32):
    """Custom type lacpInfoPortActAdColl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortActAdColl_Type.__name__ = "Integer32"
_LacpInfoPortActAdColl_Object = MibTableColumn
lacpInfoPortActAdColl = _LacpInfoPortActAdColl_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 2, 1, 12),
    _LacpInfoPortActAdColl_Type()
)
lacpInfoPortActAdColl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActAdColl.setStatus("current")


class _LacpInfoPortActAdExp_Type(Integer32):
    """Custom type lacpInfoPortActAdExp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortActAdExp_Type.__name__ = "Integer32"
_LacpInfoPortActAdExp_Object = MibTableColumn
lacpInfoPortActAdExp = _LacpInfoPortActAdExp_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 2, 1, 13),
    _LacpInfoPortActAdExp_Type()
)
lacpInfoPortActAdExp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActAdExp.setStatus("current")


class _LacpInfoPortActAdAggr_Type(Integer32):
    """Custom type lacpInfoPortActAdAggr based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortActAdAggr_Type.__name__ = "Integer32"
_LacpInfoPortActAdAggr_Object = MibTableColumn
lacpInfoPortActAdAggr = _LacpInfoPortActAdAggr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 2, 1, 14),
    _LacpInfoPortActAdAggr_Type()
)
lacpInfoPortActAdAggr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActAdAggr.setStatus("current")


class _LacpInfoPortActAdDist_Type(Integer32):
    """Custom type lacpInfoPortActAdDist based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortActAdDist_Type.__name__ = "Integer32"
_LacpInfoPortActAdDist_Object = MibTableColumn
lacpInfoPortActAdDist = _LacpInfoPortActAdDist_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 2, 1, 15),
    _LacpInfoPortActAdDist_Type()
)
lacpInfoPortActAdDist.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActAdDist.setStatus("current")
_LacpInfoPortOperTable_Object = MibTable
lacpInfoPortOperTable = _LacpInfoPortOperTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 3)
)
if mibBuilder.loadTexts:
    lacpInfoPortOperTable.setStatus("current")
_LacpInfoPortOperTableEntry_Object = MibTableRow
lacpInfoPortOperTableEntry = _LacpInfoPortOperTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 3, 1)
)
lacpInfoPortOperTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "lacpInfoPortOperIndex"),
)
if mibBuilder.loadTexts:
    lacpInfoPortOperTableEntry.setStatus("current")
_LacpInfoPortOperIndex_Type = Integer32
_LacpInfoPortOperIndex_Object = MibTableColumn
lacpInfoPortOperIndex = _LacpInfoPortOperIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 3, 1, 1),
    _LacpInfoPortOperIndex_Type()
)
lacpInfoPortOperIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortOperIndex.setStatus("current")
_LacpInfoPortPartOpSysPrio_Type = Integer32
_LacpInfoPortPartOpSysPrio_Object = MibTableColumn
lacpInfoPortPartOpSysPrio = _LacpInfoPortPartOpSysPrio_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 3, 1, 2),
    _LacpInfoPortPartOpSysPrio_Type()
)
lacpInfoPortPartOpSysPrio.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortPartOpSysPrio.setStatus("current")
_LacpInfoPortPartOpSysId_Type = DisplayString
_LacpInfoPortPartOpSysId_Object = MibTableColumn
lacpInfoPortPartOpSysId = _LacpInfoPortPartOpSysId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 3, 1, 3),
    _LacpInfoPortPartOpSysId_Type()
)
lacpInfoPortPartOpSysId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortPartOpSysId.setStatus("current")
_LacpInfoPortPartOpKey_Type = Integer32
_LacpInfoPortPartOpKey_Object = MibTableColumn
lacpInfoPortPartOpKey = _LacpInfoPortPartOpKey_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 3, 1, 4),
    _LacpInfoPortPartOpKey_Type()
)
lacpInfoPortPartOpKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortPartOpKey.setStatus("current")
_LacpInfoPortPartOpPortNum_Type = Integer32
_LacpInfoPortPartOpPortNum_Object = MibTableColumn
lacpInfoPortPartOpPortNum = _LacpInfoPortPartOpPortNum_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 3, 1, 5),
    _LacpInfoPortPartOpPortNum_Type()
)
lacpInfoPortPartOpPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortPartOpPortNum.setStatus("current")
_LacpInfoPortPartOpPortPrio_Type = Integer32
_LacpInfoPortPartOpPortPrio_Object = MibTableColumn
lacpInfoPortPartOpPortPrio = _LacpInfoPortPartOpPortPrio_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 3, 1, 6),
    _LacpInfoPortPartOpPortPrio_Type()
)
lacpInfoPortPartOpPortPrio.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortPartOpPortPrio.setStatus("current")
_LacpInfoPortActOpPortState_Type = DisplayString
_LacpInfoPortActOpPortState_Object = MibTableColumn
lacpInfoPortActOpPortState = _LacpInfoPortActOpPortState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 3, 1, 7),
    _LacpInfoPortActOpPortState_Type()
)
lacpInfoPortActOpPortState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActOpPortState.setStatus("current")


class _LacpInfoPortActOpActiv_Type(Integer32):
    """Custom type lacpInfoPortActOpActiv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("passive", 2))
    )


_LacpInfoPortActOpActiv_Type.__name__ = "Integer32"
_LacpInfoPortActOpActiv_Object = MibTableColumn
lacpInfoPortActOpActiv = _LacpInfoPortActOpActiv_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 3, 1, 8),
    _LacpInfoPortActOpActiv_Type()
)
lacpInfoPortActOpActiv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActOpActiv.setStatus("current")


class _LacpInfoPortActOpSync_Type(Integer32):
    """Custom type lacpInfoPortActOpSync based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortActOpSync_Type.__name__ = "Integer32"
_LacpInfoPortActOpSync_Object = MibTableColumn
lacpInfoPortActOpSync = _LacpInfoPortActOpSync_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 3, 1, 9),
    _LacpInfoPortActOpSync_Type()
)
lacpInfoPortActOpSync.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActOpSync.setStatus("current")


class _LacpInfoPortActOpDef_Type(Integer32):
    """Custom type lacpInfoPortActOpDef based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortActOpDef_Type.__name__ = "Integer32"
_LacpInfoPortActOpDef_Object = MibTableColumn
lacpInfoPortActOpDef = _LacpInfoPortActOpDef_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 3, 1, 10),
    _LacpInfoPortActOpDef_Type()
)
lacpInfoPortActOpDef.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActOpDef.setStatus("current")


class _LacpInfoPortActOpTimeout_Type(Integer32):
    """Custom type lacpInfoPortActOpTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("short", 1),
          ("long", 2))
    )


_LacpInfoPortActOpTimeout_Type.__name__ = "Integer32"
_LacpInfoPortActOpTimeout_Object = MibTableColumn
lacpInfoPortActOpTimeout = _LacpInfoPortActOpTimeout_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 3, 1, 11),
    _LacpInfoPortActOpTimeout_Type()
)
lacpInfoPortActOpTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActOpTimeout.setStatus("current")


class _LacpInfoPortActOpColl_Type(Integer32):
    """Custom type lacpInfoPortActOpColl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortActOpColl_Type.__name__ = "Integer32"
_LacpInfoPortActOpColl_Object = MibTableColumn
lacpInfoPortActOpColl = _LacpInfoPortActOpColl_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 3, 1, 12),
    _LacpInfoPortActOpColl_Type()
)
lacpInfoPortActOpColl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActOpColl.setStatus("current")


class _LacpInfoPortActOpExp_Type(Integer32):
    """Custom type lacpInfoPortActOpExp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortActOpExp_Type.__name__ = "Integer32"
_LacpInfoPortActOpExp_Object = MibTableColumn
lacpInfoPortActOpExp = _LacpInfoPortActOpExp_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 3, 1, 13),
    _LacpInfoPortActOpExp_Type()
)
lacpInfoPortActOpExp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActOpExp.setStatus("current")


class _LacpInfoPortActOpAggr_Type(Integer32):
    """Custom type lacpInfoPortActOpAggr based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortActOpAggr_Type.__name__ = "Integer32"
_LacpInfoPortActOpAggr_Object = MibTableColumn
lacpInfoPortActOpAggr = _LacpInfoPortActOpAggr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 3, 1, 14),
    _LacpInfoPortActOpAggr_Type()
)
lacpInfoPortActOpAggr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActOpAggr.setStatus("current")


class _LacpInfoPortActOpDist_Type(Integer32):
    """Custom type lacpInfoPortActOpDist based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortActOpDist_Type.__name__ = "Integer32"
_LacpInfoPortActOpDist_Object = MibTableColumn
lacpInfoPortActOpDist = _LacpInfoPortActOpDist_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 3, 1, 15),
    _LacpInfoPortActOpDist_Type()
)
lacpInfoPortActOpDist.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortActOpDist.setStatus("current")
_LacpInfoPortPartOpPortState_Type = DisplayString
_LacpInfoPortPartOpPortState_Object = MibTableColumn
lacpInfoPortPartOpPortState = _LacpInfoPortPartOpPortState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 3, 1, 16),
    _LacpInfoPortPartOpPortState_Type()
)
lacpInfoPortPartOpPortState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortPartOpPortState.setStatus("current")


class _LacpInfoPortPartOpActiv_Type(Integer32):
    """Custom type lacpInfoPortPartOpActiv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("passive", 2))
    )


_LacpInfoPortPartOpActiv_Type.__name__ = "Integer32"
_LacpInfoPortPartOpActiv_Object = MibTableColumn
lacpInfoPortPartOpActiv = _LacpInfoPortPartOpActiv_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 3, 1, 17),
    _LacpInfoPortPartOpActiv_Type()
)
lacpInfoPortPartOpActiv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortPartOpActiv.setStatus("current")


class _LacpInfoPortPartOpSync_Type(Integer32):
    """Custom type lacpInfoPortPartOpSync based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortPartOpSync_Type.__name__ = "Integer32"
_LacpInfoPortPartOpSync_Object = MibTableColumn
lacpInfoPortPartOpSync = _LacpInfoPortPartOpSync_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 3, 1, 18),
    _LacpInfoPortPartOpSync_Type()
)
lacpInfoPortPartOpSync.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortPartOpSync.setStatus("current")


class _LacpInfoPortPartOpDef_Type(Integer32):
    """Custom type lacpInfoPortPartOpDef based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortPartOpDef_Type.__name__ = "Integer32"
_LacpInfoPortPartOpDef_Object = MibTableColumn
lacpInfoPortPartOpDef = _LacpInfoPortPartOpDef_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 3, 1, 19),
    _LacpInfoPortPartOpDef_Type()
)
lacpInfoPortPartOpDef.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortPartOpDef.setStatus("current")


class _LacpInfoPortPartOpTimeout_Type(Integer32):
    """Custom type lacpInfoPortPartOpTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("short", 1),
          ("long", 2))
    )


_LacpInfoPortPartOpTimeout_Type.__name__ = "Integer32"
_LacpInfoPortPartOpTimeout_Object = MibTableColumn
lacpInfoPortPartOpTimeout = _LacpInfoPortPartOpTimeout_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 3, 1, 20),
    _LacpInfoPortPartOpTimeout_Type()
)
lacpInfoPortPartOpTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortPartOpTimeout.setStatus("current")


class _LacpInfoPortPartOpColl_Type(Integer32):
    """Custom type lacpInfoPortPartOpColl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortPartOpColl_Type.__name__ = "Integer32"
_LacpInfoPortPartOpColl_Object = MibTableColumn
lacpInfoPortPartOpColl = _LacpInfoPortPartOpColl_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 3, 1, 21),
    _LacpInfoPortPartOpColl_Type()
)
lacpInfoPortPartOpColl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortPartOpColl.setStatus("current")


class _LacpInfoPortPartOpExp_Type(Integer32):
    """Custom type lacpInfoPortPartOpExp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortPartOpExp_Type.__name__ = "Integer32"
_LacpInfoPortPartOpExp_Object = MibTableColumn
lacpInfoPortPartOpExp = _LacpInfoPortPartOpExp_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 3, 1, 22),
    _LacpInfoPortPartOpExp_Type()
)
lacpInfoPortPartOpExp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortPartOpExp.setStatus("current")


class _LacpInfoPortPartOpAggr_Type(Integer32):
    """Custom type lacpInfoPortPartOpAggr based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortPartOpAggr_Type.__name__ = "Integer32"
_LacpInfoPortPartOpAggr_Object = MibTableColumn
lacpInfoPortPartOpAggr = _LacpInfoPortPartOpAggr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 3, 1, 23),
    _LacpInfoPortPartOpAggr_Type()
)
lacpInfoPortPartOpAggr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortPartOpAggr.setStatus("current")


class _LacpInfoPortPartOpDist_Type(Integer32):
    """Custom type lacpInfoPortPartOpDist based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("true", 1),
          ("false", 2))
    )


_LacpInfoPortPartOpDist_Type.__name__ = "Integer32"
_LacpInfoPortPartOpDist_Object = MibTableColumn
lacpInfoPortPartOpDist = _LacpInfoPortPartOpDist_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 4, 2, 3, 1, 24),
    _LacpInfoPortPartOpDist_Type()
)
lacpInfoPortPartOpDist.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lacpInfoPortPartOpDist.setStatus("current")
_Dot1xInfo_ObjectIdentity = ObjectIdentity
dot1xInfo = _Dot1xInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 5)
)
_Dot1xInfoPortTable_Object = MibTable
dot1xInfoPortTable = _Dot1xInfoPortTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 5, 1)
)
if mibBuilder.loadTexts:
    dot1xInfoPortTable.setStatus("current")
_Dot1xInfoPortEntry_Object = MibTableRow
dot1xInfoPortEntry = _Dot1xInfoPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 5, 1, 1)
)
dot1xInfoPortEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "dot1xInfoPortIndex"),
)
if mibBuilder.loadTexts:
    dot1xInfoPortEntry.setStatus("current")
_Dot1xInfoPortIndex_Type = Integer32
_Dot1xInfoPortIndex_Object = MibTableColumn
dot1xInfoPortIndex = _Dot1xInfoPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 5, 1, 1, 1),
    _Dot1xInfoPortIndex_Type()
)
dot1xInfoPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xInfoPortIndex.setStatus("current")


class _Dot1xInfoPortAuthMode_Type(Integer32):
    """Custom type dot1xInfoPortAuthMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("forceUnauth", 0),
          ("auto", 1),
          ("forceAuth", 2))
    )


_Dot1xInfoPortAuthMode_Type.__name__ = "Integer32"
_Dot1xInfoPortAuthMode_Object = MibTableColumn
dot1xInfoPortAuthMode = _Dot1xInfoPortAuthMode_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 5, 1, 1, 2),
    _Dot1xInfoPortAuthMode_Type()
)
dot1xInfoPortAuthMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xInfoPortAuthMode.setStatus("current")


class _Dot1xInfoPortAuthStatus_Type(Integer32):
    """Custom type dot1xInfoPortAuthStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("authorized", 0),
          ("unauthorized", 1))
    )


_Dot1xInfoPortAuthStatus_Type.__name__ = "Integer32"
_Dot1xInfoPortAuthStatus_Object = MibTableColumn
dot1xInfoPortAuthStatus = _Dot1xInfoPortAuthStatus_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 5, 1, 1, 3),
    _Dot1xInfoPortAuthStatus_Type()
)
dot1xInfoPortAuthStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xInfoPortAuthStatus.setStatus("current")


class _Dot1xInfoPortCtrlDir_Type(Integer32):
    """Custom type dot1xInfoPortCtrlDir based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("both", 0),
          ("in", 1))
    )


_Dot1xInfoPortCtrlDir_Type.__name__ = "Integer32"
_Dot1xInfoPortCtrlDir_Object = MibTableColumn
dot1xInfoPortCtrlDir = _Dot1xInfoPortCtrlDir_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 5, 1, 1, 4),
    _Dot1xInfoPortCtrlDir_Type()
)
dot1xInfoPortCtrlDir.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xInfoPortCtrlDir.setStatus("current")


class _Dot1xInfoPortAuthPAEState_Type(Integer32):
    """Custom type dot1xInfoPortAuthPAEState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("initialize", 0),
          ("disconnected", 1),
          ("connecting", 2),
          ("authenticating", 3),
          ("authenticated", 4),
          ("aborting", 5),
          ("held", 6),
          ("forceauth", 7),
          ("forceunauth", 8))
    )


_Dot1xInfoPortAuthPAEState_Type.__name__ = "Integer32"
_Dot1xInfoPortAuthPAEState_Object = MibTableColumn
dot1xInfoPortAuthPAEState = _Dot1xInfoPortAuthPAEState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 5, 1, 1, 5),
    _Dot1xInfoPortAuthPAEState_Type()
)
dot1xInfoPortAuthPAEState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xInfoPortAuthPAEState.setStatus("current")


class _Dot1xInfoPortBackAuthState_Type(Integer32):
    """Custom type dot1xInfoPortBackAuthState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("request", 0),
          ("response", 1),
          ("success", 2),
          ("fail", 3),
          ("timeout", 4),
          ("idle", 5),
          ("initialize", 6))
    )


_Dot1xInfoPortBackAuthState_Type.__name__ = "Integer32"
_Dot1xInfoPortBackAuthState_Object = MibTableColumn
dot1xInfoPortBackAuthState = _Dot1xInfoPortBackAuthState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 5, 1, 1, 6),
    _Dot1xInfoPortBackAuthState_Type()
)
dot1xInfoPortBackAuthState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xInfoPortBackAuthState.setStatus("current")
_Dot1xSystemInfo_ObjectIdentity = ObjectIdentity
dot1xSystemInfo = _Dot1xSystemInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 5, 2)
)


class _Dot1xSystemCapability_Type(Integer32):
    """Custom type dot1xSystemCapability based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("authenticator", 0),
          ("supplicant", 1),
          ("authenticatorAndSupplicant", 2),
          ("unknown", 3))
    )


_Dot1xSystemCapability_Type.__name__ = "Integer32"
_Dot1xSystemCapability_Object = MibScalar
dot1xSystemCapability = _Dot1xSystemCapability_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 5, 2, 1),
    _Dot1xSystemCapability_Type()
)
dot1xSystemCapability.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xSystemCapability.setStatus("current")


class _Dot1xSystemStatus_Type(Integer32):
    """Custom type dot1xSystemStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 0),
          ("disabled", 1))
    )


_Dot1xSystemStatus_Type.__name__ = "Integer32"
_Dot1xSystemStatus_Object = MibScalar
dot1xSystemStatus = _Dot1xSystemStatus_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 5, 2, 2),
    _Dot1xSystemStatus_Type()
)
dot1xSystemStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xSystemStatus.setStatus("current")
_Dot1xSystemProtoVersion_Type = Integer32
_Dot1xSystemProtoVersion_Object = MibScalar
dot1xSystemProtoVersion = _Dot1xSystemProtoVersion_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 5, 2, 3),
    _Dot1xSystemProtoVersion_Type()
)
dot1xSystemProtoVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1xSystemProtoVersion.setStatus("current")
_Dot1pInfo_ObjectIdentity = ObjectIdentity
dot1pInfo = _Dot1pInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 6)
)
_Dot1pInfoPriorityCOSTable_Object = MibTable
dot1pInfoPriorityCOSTable = _Dot1pInfoPriorityCOSTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 6, 1)
)
if mibBuilder.loadTexts:
    dot1pInfoPriorityCOSTable.setStatus("current")
_Dot1pInfoPriorityCOSEntry_Object = MibTableRow
dot1pInfoPriorityCOSEntry = _Dot1pInfoPriorityCOSEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 6, 1, 1)
)
dot1pInfoPriorityCOSEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "dot1pInfoPriorityIndex"),
)
if mibBuilder.loadTexts:
    dot1pInfoPriorityCOSEntry.setStatus("current")


class _Dot1pInfoPriorityIndex_Type(Integer32):
    """Custom type dot1pInfoPriorityIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Dot1pInfoPriorityIndex_Type.__name__ = "Integer32"
_Dot1pInfoPriorityIndex_Object = MibTableColumn
dot1pInfoPriorityIndex = _Dot1pInfoPriorityIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 6, 1, 1, 1),
    _Dot1pInfoPriorityIndex_Type()
)
dot1pInfoPriorityIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1pInfoPriorityIndex.setStatus("current")
_Dot1pInfoPriorityCOSQueue_Type = Integer32
_Dot1pInfoPriorityCOSQueue_Object = MibTableColumn
dot1pInfoPriorityCOSQueue = _Dot1pInfoPriorityCOSQueue_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 6, 1, 1, 2),
    _Dot1pInfoPriorityCOSQueue_Type()
)
dot1pInfoPriorityCOSQueue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1pInfoPriorityCOSQueue.setStatus("current")
_Dot1pInfoPriorityCOSWeight_Type = Integer32
_Dot1pInfoPriorityCOSWeight_Object = MibTableColumn
dot1pInfoPriorityCOSWeight = _Dot1pInfoPriorityCOSWeight_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 6, 1, 1, 3),
    _Dot1pInfoPriorityCOSWeight_Type()
)
dot1pInfoPriorityCOSWeight.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1pInfoPriorityCOSWeight.setStatus("current")
_Dot1pInfoPortTable_Object = MibTable
dot1pInfoPortTable = _Dot1pInfoPortTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 6, 2)
)
if mibBuilder.loadTexts:
    dot1pInfoPortTable.setStatus("current")
_Dot1pInfoPortEntry_Object = MibTableRow
dot1pInfoPortEntry = _Dot1pInfoPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 6, 2, 1)
)
dot1pInfoPortEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "dot1pInfoPortIndex"),
)
if mibBuilder.loadTexts:
    dot1pInfoPortEntry.setStatus("current")
_Dot1pInfoPortIndex_Type = Integer32
_Dot1pInfoPortIndex_Object = MibTableColumn
dot1pInfoPortIndex = _Dot1pInfoPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 6, 2, 1, 1),
    _Dot1pInfoPortIndex_Type()
)
dot1pInfoPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1pInfoPortIndex.setStatus("current")
_Dot1pInfoPortPriority_Type = Integer32
_Dot1pInfoPortPriority_Object = MibTableColumn
dot1pInfoPortPriority = _Dot1pInfoPortPriority_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 6, 2, 1, 2),
    _Dot1pInfoPortPriority_Type()
)
dot1pInfoPortPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1pInfoPortPriority.setStatus("current")
_Dot1pInfoPortCOSq_Type = Integer32
_Dot1pInfoPortCOSq_Object = MibTableColumn
dot1pInfoPortCOSq = _Dot1pInfoPortCOSq_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 6, 2, 1, 3),
    _Dot1pInfoPortCOSq_Type()
)
dot1pInfoPortCOSq.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1pInfoPortCOSq.setStatus("current")
_Dot1pInfoPortWeight_Type = Integer32
_Dot1pInfoPortWeight_Object = MibTableColumn
dot1pInfoPortWeight = _Dot1pInfoPortWeight_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 6, 2, 1, 4),
    _Dot1pInfoPortWeight_Type()
)
dot1pInfoPortWeight.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1pInfoPortWeight.setStatus("current")
_GenInfo_ObjectIdentity = ObjectIdentity
genInfo = _GenInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 7)
)


class _GeneralInfoStpUplinkFast_Type(Integer32):
    """Custom type generalInfoStpUplinkFast based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_GeneralInfoStpUplinkFast_Type.__name__ = "Integer32"
_GeneralInfoStpUplinkFast_Object = MibScalar
generalInfoStpUplinkFast = _GeneralInfoStpUplinkFast_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 7, 1),
    _GeneralInfoStpUplinkFast_Type()
)
generalInfoStpUplinkFast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    generalInfoStpUplinkFast.setStatus("current")
_GeneralInfoUplinkFastRate_Type = Integer32
_GeneralInfoUplinkFastRate_Object = MibScalar
generalInfoUplinkFastRate = _GeneralInfoUplinkFastRate_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 7, 2),
    _GeneralInfoUplinkFastRate_Type()
)
generalInfoUplinkFastRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    generalInfoUplinkFastRate.setStatus("current")
_VlanInfo_ObjectIdentity = ObjectIdentity
vlanInfo = _VlanInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 8)
)
_VlanInfoTable_Object = MibTable
vlanInfoTable = _VlanInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 8, 1)
)
if mibBuilder.loadTexts:
    vlanInfoTable.setStatus("current")
_VlanInfoTableEntry_Object = MibTableRow
vlanInfoTableEntry = _VlanInfoTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 8, 1, 1)
)
vlanInfoTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "vlanInfoId"),
)
if mibBuilder.loadTexts:
    vlanInfoTableEntry.setStatus("current")


class _VlanInfoId_Type(Integer32):
    """Custom type vlanInfoId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4095),
    )


_VlanInfoId_Type.__name__ = "Integer32"
_VlanInfoId_Object = MibTableColumn
vlanInfoId = _VlanInfoId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 8, 1, 1, 1),
    _VlanInfoId_Type()
)
vlanInfoId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanInfoId.setStatus("current")


class _VlanInfoName_Type(DisplayString):
    """Custom type vlanInfoName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_VlanInfoName_Type.__name__ = "DisplayString"
_VlanInfoName_Object = MibTableColumn
vlanInfoName = _VlanInfoName_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 8, 1, 1, 2),
    _VlanInfoName_Type()
)
vlanInfoName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanInfoName.setStatus("current")


class _VlanInfoStatus_Type(Integer32):
    """Custom type vlanInfoStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_VlanInfoStatus_Type.__name__ = "Integer32"
_VlanInfoStatus_Object = MibTableColumn
vlanInfoStatus = _VlanInfoStatus_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 8, 1, 1, 3),
    _VlanInfoStatus_Type()
)
vlanInfoStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanInfoStatus.setStatus("current")
_VlanInfoPorts_Type = OctetString
_VlanInfoPorts_Object = MibTableColumn
vlanInfoPorts = _VlanInfoPorts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 8, 1, 1, 4),
    _VlanInfoPorts_Type()
)
vlanInfoPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vlanInfoPorts.setStatus("current")
_TrunkGroupInfo_ObjectIdentity = ObjectIdentity
trunkGroupInfo = _TrunkGroupInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 9)
)
_TrunkGroupInfoTable_Object = MibTable
trunkGroupInfoTable = _TrunkGroupInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 9, 1)
)
if mibBuilder.loadTexts:
    trunkGroupInfoTable.setStatus("current")
_TrunkGroupInfoTableEntry_Object = MibTableRow
trunkGroupInfoTableEntry = _TrunkGroupInfoTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 9, 1, 1)
)
trunkGroupInfoTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "trunkGroupInfoIndex"),
)
if mibBuilder.loadTexts:
    trunkGroupInfoTableEntry.setStatus("current")
_TrunkGroupInfoIndex_Type = Integer32
_TrunkGroupInfoIndex_Object = MibTableColumn
trunkGroupInfoIndex = _TrunkGroupInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 9, 1, 1, 1),
    _TrunkGroupInfoIndex_Type()
)
trunkGroupInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    trunkGroupInfoIndex.setStatus("current")


class _TrunkGroupInfoState_Type(Integer32):
    """Custom type trunkGroupInfoState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_TrunkGroupInfoState_Type.__name__ = "Integer32"
_TrunkGroupInfoState_Object = MibTableColumn
trunkGroupInfoState = _TrunkGroupInfoState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 9, 1, 1, 2),
    _TrunkGroupInfoState_Type()
)
trunkGroupInfoState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    trunkGroupInfoState.setStatus("current")
_TrunkGroupInfoPorts_Type = OctetString
_TrunkGroupInfoPorts_Object = MibTableColumn
trunkGroupInfoPorts = _TrunkGroupInfoPorts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 9, 1, 1, 3),
    _TrunkGroupInfoPorts_Type()
)
trunkGroupInfoPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    trunkGroupInfoPorts.setStatus("current")


class _TrunkGroupInfoProtocol_Type(Integer32):
    """Custom type trunkGroupInfoProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("static", 1),
          ("lacp", 2))
    )


_TrunkGroupInfoProtocol_Type.__name__ = "Integer32"
_TrunkGroupInfoProtocol_Object = MibTableColumn
trunkGroupInfoProtocol = _TrunkGroupInfoProtocol_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 9, 1, 1, 4),
    _TrunkGroupInfoProtocol_Type()
)
trunkGroupInfoProtocol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    trunkGroupInfoProtocol.setStatus("current")
_TrunkGroupInfoStgs_Type = OctetString
_TrunkGroupInfoStgs_Object = MibTableColumn
trunkGroupInfoStgs = _TrunkGroupInfoStgs_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 9, 1, 1, 5),
    _TrunkGroupInfoStgs_Type()
)
trunkGroupInfoStgs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    trunkGroupInfoStgs.setStatus("current")
_TrunkGroupInfoPortTable_Object = MibTable
trunkGroupInfoPortTable = _TrunkGroupInfoPortTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 9, 2)
)
if mibBuilder.loadTexts:
    trunkGroupInfoPortTable.setStatus("current")
_TrunkGroupInfoPortTableEntry_Object = MibTableRow
trunkGroupInfoPortTableEntry = _TrunkGroupInfoPortTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 9, 2, 1)
)
trunkGroupInfoPortTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "trunkGroupInfoPortTrunkId"),
    (0, "BLADETYPE5-NETWORK-MIB", "trunkGroupInfoPortPortId"),
)
if mibBuilder.loadTexts:
    trunkGroupInfoPortTableEntry.setStatus("current")
_TrunkGroupInfoPortTrunkId_Type = Integer32
_TrunkGroupInfoPortTrunkId_Object = MibTableColumn
trunkGroupInfoPortTrunkId = _TrunkGroupInfoPortTrunkId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 9, 2, 1, 1),
    _TrunkGroupInfoPortTrunkId_Type()
)
trunkGroupInfoPortTrunkId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    trunkGroupInfoPortTrunkId.setStatus("current")
_TrunkGroupInfoPortPortId_Type = Integer32
_TrunkGroupInfoPortPortId_Object = MibTableColumn
trunkGroupInfoPortPortId = _TrunkGroupInfoPortPortId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 9, 2, 1, 2),
    _TrunkGroupInfoPortPortId_Type()
)
trunkGroupInfoPortPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    trunkGroupInfoPortPortId.setStatus("current")


class _TrunkGroupInfoPortStatus_Type(Integer32):
    """Custom type trunkGroupInfoPortStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("blocking", 1),
          ("forwarding", 2))
    )


_TrunkGroupInfoPortStatus_Type.__name__ = "Integer32"
_TrunkGroupInfoPortStatus_Object = MibTableColumn
trunkGroupInfoPortStatus = _TrunkGroupInfoPortStatus_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 3, 9, 2, 1, 3),
    _TrunkGroupInfoPortStatus_Type()
)
trunkGroupInfoPortStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    trunkGroupInfoPortStatus.setStatus("current")
_Layer2Oper_ObjectIdentity = ObjectIdentity
layer2Oper = _Layer2Oper_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 2, 4)
)
_Layer3_ObjectIdentity = ObjectIdentity
layer3 = _Layer3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3)
)
_Layer3Configs_ObjectIdentity = ObjectIdentity
layer3Configs = _Layer3Configs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1)
)
_IpInterfaceCfg_ObjectIdentity = ObjectIdentity
ipInterfaceCfg = _IpInterfaceCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 1)
)
_IpInterfaceTableMax_Type = Integer32
_IpInterfaceTableMax_Object = MibScalar
ipInterfaceTableMax = _IpInterfaceTableMax_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 1, 1),
    _IpInterfaceTableMax_Type()
)
ipInterfaceTableMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInterfaceTableMax.setStatus("current")
_IpCurCfgIntfTable_Object = MibTable
ipCurCfgIntfTable = _IpCurCfgIntfTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 1, 2)
)
if mibBuilder.loadTexts:
    ipCurCfgIntfTable.setStatus("current")
_IpCurCfgIntfEntry_Object = MibTableRow
ipCurCfgIntfEntry = _IpCurCfgIntfEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 1, 2, 1)
)
ipCurCfgIntfEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ipCurCfgIntfIndex"),
)
if mibBuilder.loadTexts:
    ipCurCfgIntfEntry.setStatus("current")
_IpCurCfgIntfIndex_Type = Integer32
_IpCurCfgIntfIndex_Object = MibTableColumn
ipCurCfgIntfIndex = _IpCurCfgIntfIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 1, 2, 1, 1),
    _IpCurCfgIntfIndex_Type()
)
ipCurCfgIntfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgIntfIndex.setStatus("current")
_IpCurCfgIntfAddr_Type = IpAddress
_IpCurCfgIntfAddr_Object = MibTableColumn
ipCurCfgIntfAddr = _IpCurCfgIntfAddr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 1, 2, 1, 2),
    _IpCurCfgIntfAddr_Type()
)
ipCurCfgIntfAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgIntfAddr.setStatus("current")
_IpCurCfgIntfMask_Type = IpAddress
_IpCurCfgIntfMask_Object = MibTableColumn
ipCurCfgIntfMask = _IpCurCfgIntfMask_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 1, 2, 1, 3),
    _IpCurCfgIntfMask_Type()
)
ipCurCfgIntfMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgIntfMask.setStatus("current")
_IpCurCfgIntfBroadcast_Type = IpAddress
_IpCurCfgIntfBroadcast_Object = MibTableColumn
ipCurCfgIntfBroadcast = _IpCurCfgIntfBroadcast_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 1, 2, 1, 4),
    _IpCurCfgIntfBroadcast_Type()
)
ipCurCfgIntfBroadcast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgIntfBroadcast.setStatus("current")


class _IpCurCfgIntfVlan_Type(Integer32):
    """Custom type ipCurCfgIntfVlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_IpCurCfgIntfVlan_Type.__name__ = "Integer32"
_IpCurCfgIntfVlan_Object = MibTableColumn
ipCurCfgIntfVlan = _IpCurCfgIntfVlan_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 1, 2, 1, 5),
    _IpCurCfgIntfVlan_Type()
)
ipCurCfgIntfVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgIntfVlan.setStatus("current")


class _IpCurCfgIntfState_Type(Integer32):
    """Custom type ipCurCfgIntfState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_IpCurCfgIntfState_Type.__name__ = "Integer32"
_IpCurCfgIntfState_Object = MibTableColumn
ipCurCfgIntfState = _IpCurCfgIntfState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 1, 2, 1, 6),
    _IpCurCfgIntfState_Type()
)
ipCurCfgIntfState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgIntfState.setStatus("current")


class _IpCurCfgIntfBootpRelay_Type(Integer32):
    """Custom type ipCurCfgIntfBootpRelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IpCurCfgIntfBootpRelay_Type.__name__ = "Integer32"
_IpCurCfgIntfBootpRelay_Object = MibTableColumn
ipCurCfgIntfBootpRelay = _IpCurCfgIntfBootpRelay_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 1, 2, 1, 7),
    _IpCurCfgIntfBootpRelay_Type()
)
ipCurCfgIntfBootpRelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgIntfBootpRelay.setStatus("current")
_IpNewCfgIntfTable_Object = MibTable
ipNewCfgIntfTable = _IpNewCfgIntfTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 1, 3)
)
if mibBuilder.loadTexts:
    ipNewCfgIntfTable.setStatus("current")
_IpNewCfgIntfEntry_Object = MibTableRow
ipNewCfgIntfEntry = _IpNewCfgIntfEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 1, 3, 1)
)
ipNewCfgIntfEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ipNewCfgIntfIndex"),
)
if mibBuilder.loadTexts:
    ipNewCfgIntfEntry.setStatus("current")
_IpNewCfgIntfIndex_Type = Integer32
_IpNewCfgIntfIndex_Object = MibTableColumn
ipNewCfgIntfIndex = _IpNewCfgIntfIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 1, 3, 1, 1),
    _IpNewCfgIntfIndex_Type()
)
ipNewCfgIntfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipNewCfgIntfIndex.setStatus("current")
_IpNewCfgIntfAddr_Type = IpAddress
_IpNewCfgIntfAddr_Object = MibTableColumn
ipNewCfgIntfAddr = _IpNewCfgIntfAddr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 1, 3, 1, 2),
    _IpNewCfgIntfAddr_Type()
)
ipNewCfgIntfAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgIntfAddr.setStatus("current")
_IpNewCfgIntfMask_Type = IpAddress
_IpNewCfgIntfMask_Object = MibTableColumn
ipNewCfgIntfMask = _IpNewCfgIntfMask_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 1, 3, 1, 3),
    _IpNewCfgIntfMask_Type()
)
ipNewCfgIntfMask.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgIntfMask.setStatus("current")


class _IpNewCfgIntfVlan_Type(Integer32):
    """Custom type ipNewCfgIntfVlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4094),
    )


_IpNewCfgIntfVlan_Type.__name__ = "Integer32"
_IpNewCfgIntfVlan_Object = MibTableColumn
ipNewCfgIntfVlan = _IpNewCfgIntfVlan_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 1, 3, 1, 5),
    _IpNewCfgIntfVlan_Type()
)
ipNewCfgIntfVlan.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgIntfVlan.setStatus("current")


class _IpNewCfgIntfState_Type(Integer32):
    """Custom type ipNewCfgIntfState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_IpNewCfgIntfState_Type.__name__ = "Integer32"
_IpNewCfgIntfState_Object = MibTableColumn
ipNewCfgIntfState = _IpNewCfgIntfState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 1, 3, 1, 6),
    _IpNewCfgIntfState_Type()
)
ipNewCfgIntfState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgIntfState.setStatus("current")


class _IpNewCfgIntfDelete_Type(Integer32):
    """Custom type ipNewCfgIntfDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_IpNewCfgIntfDelete_Type.__name__ = "Integer32"
_IpNewCfgIntfDelete_Object = MibTableColumn
ipNewCfgIntfDelete = _IpNewCfgIntfDelete_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 1, 3, 1, 7),
    _IpNewCfgIntfDelete_Type()
)
ipNewCfgIntfDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgIntfDelete.setStatus("current")


class _IpNewCfgIntfBootpRelay_Type(Integer32):
    """Custom type ipNewCfgIntfBootpRelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IpNewCfgIntfBootpRelay_Type.__name__ = "Integer32"
_IpNewCfgIntfBootpRelay_Object = MibTableColumn
ipNewCfgIntfBootpRelay = _IpNewCfgIntfBootpRelay_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 1, 3, 1, 8),
    _IpNewCfgIntfBootpRelay_Type()
)
ipNewCfgIntfBootpRelay.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgIntfBootpRelay.setStatus("current")
_IpGatewayCfg_ObjectIdentity = ObjectIdentity
ipGatewayCfg = _IpGatewayCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 2)
)
_IpGatewayTableMax_Type = Integer32
_IpGatewayTableMax_Object = MibScalar
ipGatewayTableMax = _IpGatewayTableMax_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 2, 3),
    _IpGatewayTableMax_Type()
)
ipGatewayTableMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipGatewayTableMax.setStatus("current")
_IpCurCfgGwTable_Object = MibTable
ipCurCfgGwTable = _IpCurCfgGwTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 2, 4)
)
if mibBuilder.loadTexts:
    ipCurCfgGwTable.setStatus("current")
_IpCurCfgGwEntry_Object = MibTableRow
ipCurCfgGwEntry = _IpCurCfgGwEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 2, 4, 1)
)
ipCurCfgGwEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ipCurCfgGwIndex"),
)
if mibBuilder.loadTexts:
    ipCurCfgGwEntry.setStatus("current")
_IpCurCfgGwIndex_Type = Integer32
_IpCurCfgGwIndex_Object = MibTableColumn
ipCurCfgGwIndex = _IpCurCfgGwIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 2, 4, 1, 1),
    _IpCurCfgGwIndex_Type()
)
ipCurCfgGwIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgGwIndex.setStatus("current")
_IpCurCfgGwAddr_Type = IpAddress
_IpCurCfgGwAddr_Object = MibTableColumn
ipCurCfgGwAddr = _IpCurCfgGwAddr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 2, 4, 1, 2),
    _IpCurCfgGwAddr_Type()
)
ipCurCfgGwAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgGwAddr.setStatus("current")


class _IpCurCfgGwInterval_Type(Integer32):
    """Custom type ipCurCfgGwInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 60),
    )


_IpCurCfgGwInterval_Type.__name__ = "Integer32"
_IpCurCfgGwInterval_Object = MibTableColumn
ipCurCfgGwInterval = _IpCurCfgGwInterval_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 2, 4, 1, 3),
    _IpCurCfgGwInterval_Type()
)
ipCurCfgGwInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgGwInterval.setStatus("current")


class _IpCurCfgGwRetry_Type(Integer32):
    """Custom type ipCurCfgGwRetry based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 120),
    )


_IpCurCfgGwRetry_Type.__name__ = "Integer32"
_IpCurCfgGwRetry_Object = MibTableColumn
ipCurCfgGwRetry = _IpCurCfgGwRetry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 2, 4, 1, 4),
    _IpCurCfgGwRetry_Type()
)
ipCurCfgGwRetry.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgGwRetry.setStatus("current")


class _IpCurCfgGwState_Type(Integer32):
    """Custom type ipCurCfgGwState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_IpCurCfgGwState_Type.__name__ = "Integer32"
_IpCurCfgGwState_Object = MibTableColumn
ipCurCfgGwState = _IpCurCfgGwState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 2, 4, 1, 5),
    _IpCurCfgGwState_Type()
)
ipCurCfgGwState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgGwState.setStatus("current")


class _IpCurCfgGwArp_Type(Integer32):
    """Custom type ipCurCfgGwArp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_IpCurCfgGwArp_Type.__name__ = "Integer32"
_IpCurCfgGwArp_Object = MibTableColumn
ipCurCfgGwArp = _IpCurCfgGwArp_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 2, 4, 1, 6),
    _IpCurCfgGwArp_Type()
)
ipCurCfgGwArp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgGwArp.setStatus("current")
_IpNewCfgGwTable_Object = MibTable
ipNewCfgGwTable = _IpNewCfgGwTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 2, 5)
)
if mibBuilder.loadTexts:
    ipNewCfgGwTable.setStatus("current")
_IpNewCfgGwEntry_Object = MibTableRow
ipNewCfgGwEntry = _IpNewCfgGwEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 2, 5, 1)
)
ipNewCfgGwEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ipNewCfgGwIndex"),
)
if mibBuilder.loadTexts:
    ipNewCfgGwEntry.setStatus("current")
_IpNewCfgGwIndex_Type = Integer32
_IpNewCfgGwIndex_Object = MibTableColumn
ipNewCfgGwIndex = _IpNewCfgGwIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 2, 5, 1, 1),
    _IpNewCfgGwIndex_Type()
)
ipNewCfgGwIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipNewCfgGwIndex.setStatus("current")
_IpNewCfgGwAddr_Type = IpAddress
_IpNewCfgGwAddr_Object = MibTableColumn
ipNewCfgGwAddr = _IpNewCfgGwAddr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 2, 5, 1, 2),
    _IpNewCfgGwAddr_Type()
)
ipNewCfgGwAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgGwAddr.setStatus("current")


class _IpNewCfgGwInterval_Type(Integer32):
    """Custom type ipNewCfgGwInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 60),
    )


_IpNewCfgGwInterval_Type.__name__ = "Integer32"
_IpNewCfgGwInterval_Object = MibTableColumn
ipNewCfgGwInterval = _IpNewCfgGwInterval_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 2, 5, 1, 3),
    _IpNewCfgGwInterval_Type()
)
ipNewCfgGwInterval.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgGwInterval.setStatus("current")


class _IpNewCfgGwRetry_Type(Integer32):
    """Custom type ipNewCfgGwRetry based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 120),
    )


_IpNewCfgGwRetry_Type.__name__ = "Integer32"
_IpNewCfgGwRetry_Object = MibTableColumn
ipNewCfgGwRetry = _IpNewCfgGwRetry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 2, 5, 1, 4),
    _IpNewCfgGwRetry_Type()
)
ipNewCfgGwRetry.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgGwRetry.setStatus("current")


class _IpNewCfgGwState_Type(Integer32):
    """Custom type ipNewCfgGwState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_IpNewCfgGwState_Type.__name__ = "Integer32"
_IpNewCfgGwState_Object = MibTableColumn
ipNewCfgGwState = _IpNewCfgGwState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 2, 5, 1, 5),
    _IpNewCfgGwState_Type()
)
ipNewCfgGwState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgGwState.setStatus("current")


class _IpNewCfgGwDelete_Type(Integer32):
    """Custom type ipNewCfgGwDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_IpNewCfgGwDelete_Type.__name__ = "Integer32"
_IpNewCfgGwDelete_Object = MibTableColumn
ipNewCfgGwDelete = _IpNewCfgGwDelete_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 2, 5, 1, 6),
    _IpNewCfgGwDelete_Type()
)
ipNewCfgGwDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgGwDelete.setStatus("current")


class _IpNewCfgGwArp_Type(Integer32):
    """Custom type ipNewCfgGwArp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_IpNewCfgGwArp_Type.__name__ = "Integer32"
_IpNewCfgGwArp_Object = MibTableColumn
ipNewCfgGwArp = _IpNewCfgGwArp_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 2, 5, 1, 7),
    _IpNewCfgGwArp_Type()
)
ipNewCfgGwArp.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgGwArp.setStatus("current")
_IpStaticRouteCfg_ObjectIdentity = ObjectIdentity
ipStaticRouteCfg = _IpStaticRouteCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 3)
)
_IpStaticRouteTableMaxSize_Type = Integer32
_IpStaticRouteTableMaxSize_Object = MibScalar
ipStaticRouteTableMaxSize = _IpStaticRouteTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 3, 1),
    _IpStaticRouteTableMaxSize_Type()
)
ipStaticRouteTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipStaticRouteTableMaxSize.setStatus("current")
_IpCurCfgStaticRouteTable_Object = MibTable
ipCurCfgStaticRouteTable = _IpCurCfgStaticRouteTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 3, 2)
)
if mibBuilder.loadTexts:
    ipCurCfgStaticRouteTable.setStatus("current")
_IpCurCfgStaticRouteEntry_Object = MibTableRow
ipCurCfgStaticRouteEntry = _IpCurCfgStaticRouteEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 3, 2, 1)
)
ipCurCfgStaticRouteEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ipCurCfgStaticRouteIndx"),
)
if mibBuilder.loadTexts:
    ipCurCfgStaticRouteEntry.setStatus("current")
_IpCurCfgStaticRouteIndx_Type = Integer32
_IpCurCfgStaticRouteIndx_Object = MibTableColumn
ipCurCfgStaticRouteIndx = _IpCurCfgStaticRouteIndx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 3, 2, 1, 1),
    _IpCurCfgStaticRouteIndx_Type()
)
ipCurCfgStaticRouteIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgStaticRouteIndx.setStatus("current")
_IpCurCfgStaticRouteDestIp_Type = IpAddress
_IpCurCfgStaticRouteDestIp_Object = MibTableColumn
ipCurCfgStaticRouteDestIp = _IpCurCfgStaticRouteDestIp_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 3, 2, 1, 2),
    _IpCurCfgStaticRouteDestIp_Type()
)
ipCurCfgStaticRouteDestIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgStaticRouteDestIp.setStatus("current")
_IpCurCfgStaticRouteMask_Type = IpAddress
_IpCurCfgStaticRouteMask_Object = MibTableColumn
ipCurCfgStaticRouteMask = _IpCurCfgStaticRouteMask_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 3, 2, 1, 3),
    _IpCurCfgStaticRouteMask_Type()
)
ipCurCfgStaticRouteMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgStaticRouteMask.setStatus("current")
_IpCurCfgStaticRouteGateway_Type = IpAddress
_IpCurCfgStaticRouteGateway_Object = MibTableColumn
ipCurCfgStaticRouteGateway = _IpCurCfgStaticRouteGateway_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 3, 2, 1, 4),
    _IpCurCfgStaticRouteGateway_Type()
)
ipCurCfgStaticRouteGateway.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgStaticRouteGateway.setStatus("current")
_IpCurCfgStaticRouteInterface_Type = Integer32
_IpCurCfgStaticRouteInterface_Object = MibTableColumn
ipCurCfgStaticRouteInterface = _IpCurCfgStaticRouteInterface_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 3, 2, 1, 5),
    _IpCurCfgStaticRouteInterface_Type()
)
ipCurCfgStaticRouteInterface.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgStaticRouteInterface.setStatus("current")
_IpNewCfgStaticRouteTable_Object = MibTable
ipNewCfgStaticRouteTable = _IpNewCfgStaticRouteTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 3, 3)
)
if mibBuilder.loadTexts:
    ipNewCfgStaticRouteTable.setStatus("current")
_IpNewCfgStaticRouteEntry_Object = MibTableRow
ipNewCfgStaticRouteEntry = _IpNewCfgStaticRouteEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 3, 3, 1)
)
ipNewCfgStaticRouteEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ipNewCfgStaticRouteIndx"),
)
if mibBuilder.loadTexts:
    ipNewCfgStaticRouteEntry.setStatus("current")
_IpNewCfgStaticRouteIndx_Type = Integer32
_IpNewCfgStaticRouteIndx_Object = MibTableColumn
ipNewCfgStaticRouteIndx = _IpNewCfgStaticRouteIndx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 3, 3, 1, 1),
    _IpNewCfgStaticRouteIndx_Type()
)
ipNewCfgStaticRouteIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipNewCfgStaticRouteIndx.setStatus("current")
_IpNewCfgStaticRouteDestIp_Type = IpAddress
_IpNewCfgStaticRouteDestIp_Object = MibTableColumn
ipNewCfgStaticRouteDestIp = _IpNewCfgStaticRouteDestIp_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 3, 3, 1, 2),
    _IpNewCfgStaticRouteDestIp_Type()
)
ipNewCfgStaticRouteDestIp.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgStaticRouteDestIp.setStatus("current")
_IpNewCfgStaticRouteMask_Type = IpAddress
_IpNewCfgStaticRouteMask_Object = MibTableColumn
ipNewCfgStaticRouteMask = _IpNewCfgStaticRouteMask_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 3, 3, 1, 3),
    _IpNewCfgStaticRouteMask_Type()
)
ipNewCfgStaticRouteMask.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgStaticRouteMask.setStatus("current")
_IpNewCfgStaticRouteGateway_Type = IpAddress
_IpNewCfgStaticRouteGateway_Object = MibTableColumn
ipNewCfgStaticRouteGateway = _IpNewCfgStaticRouteGateway_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 3, 3, 1, 4),
    _IpNewCfgStaticRouteGateway_Type()
)
ipNewCfgStaticRouteGateway.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgStaticRouteGateway.setStatus("current")


class _IpNewCfgStaticRouteAction_Type(Integer32):
    """Custom type ipNewCfgStaticRouteAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_IpNewCfgStaticRouteAction_Type.__name__ = "Integer32"
_IpNewCfgStaticRouteAction_Object = MibTableColumn
ipNewCfgStaticRouteAction = _IpNewCfgStaticRouteAction_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 3, 3, 1, 5),
    _IpNewCfgStaticRouteAction_Type()
)
ipNewCfgStaticRouteAction.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgStaticRouteAction.setStatus("current")
_IpNewCfgStaticRouteInterface_Type = Integer32
_IpNewCfgStaticRouteInterface_Object = MibTableColumn
ipNewCfgStaticRouteInterface = _IpNewCfgStaticRouteInterface_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 3, 3, 1, 6),
    _IpNewCfgStaticRouteInterface_Type()
)
ipNewCfgStaticRouteInterface.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgStaticRouteInterface.setStatus("current")
_IpStaticRouteClearAllByDestIp_Type = IpAddress
_IpStaticRouteClearAllByDestIp_Object = MibScalar
ipStaticRouteClearAllByDestIp = _IpStaticRouteClearAllByDestIp_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 3, 4),
    _IpStaticRouteClearAllByDestIp_Type()
)
ipStaticRouteClearAllByDestIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipStaticRouteClearAllByDestIp.setStatus("current")
_IpStaticRouteClearAllByGatewayIp_Type = IpAddress
_IpStaticRouteClearAllByGatewayIp_Object = MibScalar
ipStaticRouteClearAllByGatewayIp = _IpStaticRouteClearAllByGatewayIp_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 3, 5),
    _IpStaticRouteClearAllByGatewayIp_Type()
)
ipStaticRouteClearAllByGatewayIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipStaticRouteClearAllByGatewayIp.setStatus("current")
_IpStaticRouteClearAllByInterface_Type = Integer32
_IpStaticRouteClearAllByInterface_Object = MibScalar
ipStaticRouteClearAllByInterface = _IpStaticRouteClearAllByInterface_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 3, 6),
    _IpStaticRouteClearAllByInterface_Type()
)
ipStaticRouteClearAllByInterface.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipStaticRouteClearAllByInterface.setStatus("current")


class _IpStaticRouteClearAll_Type(Integer32):
    """Custom type ipStaticRouteClearAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_IpStaticRouteClearAll_Type.__name__ = "Integer32"
_IpStaticRouteClearAll_Object = MibScalar
ipStaticRouteClearAll = _IpStaticRouteClearAll_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 3, 7),
    _IpStaticRouteClearAll_Type()
)
ipStaticRouteClearAll.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipStaticRouteClearAll.setStatus("current")
_IpForwardCfg_ObjectIdentity = ObjectIdentity
ipForwardCfg = _IpForwardCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 4)
)
_IpFwdGeneralCfg_ObjectIdentity = ObjectIdentity
ipFwdGeneralCfg = _IpFwdGeneralCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 4, 1)
)


class _IpFwdCurCfgState_Type(Integer32):
    """Custom type ipFwdCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("on", 2),
          ("off", 3))
    )


_IpFwdCurCfgState_Type.__name__ = "Integer32"
_IpFwdCurCfgState_Object = MibScalar
ipFwdCurCfgState = _IpFwdCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 4, 1, 1),
    _IpFwdCurCfgState_Type()
)
ipFwdCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipFwdCurCfgState.setStatus("current")


class _IpFwdNewCfgState_Type(Integer32):
    """Custom type ipFwdNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("on", 2),
          ("off", 3))
    )


_IpFwdNewCfgState_Type.__name__ = "Integer32"
_IpFwdNewCfgState_Object = MibScalar
ipFwdNewCfgState = _IpFwdNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 4, 1, 2),
    _IpFwdNewCfgState_Type()
)
ipFwdNewCfgState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipFwdNewCfgState.setStatus("current")


class _IpFwdCurCfgDirectedBcast_Type(Integer32):
    """Custom type ipFwdCurCfgDirectedBcast based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_IpFwdCurCfgDirectedBcast_Type.__name__ = "Integer32"
_IpFwdCurCfgDirectedBcast_Object = MibScalar
ipFwdCurCfgDirectedBcast = _IpFwdCurCfgDirectedBcast_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 4, 1, 3),
    _IpFwdCurCfgDirectedBcast_Type()
)
ipFwdCurCfgDirectedBcast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipFwdCurCfgDirectedBcast.setStatus("current")


class _IpFwdNewCfgDirectedBcast_Type(Integer32):
    """Custom type ipFwdNewCfgDirectedBcast based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_IpFwdNewCfgDirectedBcast_Type.__name__ = "Integer32"
_IpFwdNewCfgDirectedBcast_Object = MibScalar
ipFwdNewCfgDirectedBcast = _IpFwdNewCfgDirectedBcast_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 4, 1, 4),
    _IpFwdNewCfgDirectedBcast_Type()
)
ipFwdNewCfgDirectedBcast.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipFwdNewCfgDirectedBcast.setStatus("current")
_VrrpCfg_ObjectIdentity = ObjectIdentity
vrrpCfg = _VrrpCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6)
)
_VrrpGeneral_ObjectIdentity = ObjectIdentity
vrrpGeneral = _VrrpGeneral_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 1)
)


class _VrrpCurCfgGenState_Type(Integer32):
    """Custom type vrrpCurCfgGenState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpCurCfgGenState_Type.__name__ = "Integer32"
_VrrpCurCfgGenState_Object = MibScalar
vrrpCurCfgGenState = _VrrpCurCfgGenState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 1, 1),
    _VrrpCurCfgGenState_Type()
)
vrrpCurCfgGenState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgGenState.setStatus("current")


class _VrrpNewCfgGenState_Type(Integer32):
    """Custom type vrrpNewCfgGenState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpNewCfgGenState_Type.__name__ = "Integer32"
_VrrpNewCfgGenState_Object = MibScalar
vrrpNewCfgGenState = _VrrpNewCfgGenState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 1, 2),
    _VrrpNewCfgGenState_Type()
)
vrrpNewCfgGenState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vrrpNewCfgGenState.setStatus("current")


class _VrrpCurCfgGenTckVirtRtrInc_Type(Integer32):
    """Custom type vrrpCurCfgGenTckVirtRtrInc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 254),
    )


_VrrpCurCfgGenTckVirtRtrInc_Type.__name__ = "Integer32"
_VrrpCurCfgGenTckVirtRtrInc_Object = MibScalar
vrrpCurCfgGenTckVirtRtrInc = _VrrpCurCfgGenTckVirtRtrInc_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 1, 3),
    _VrrpCurCfgGenTckVirtRtrInc_Type()
)
vrrpCurCfgGenTckVirtRtrInc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgGenTckVirtRtrInc.setStatus("current")


class _VrrpNewCfgGenTckVirtRtrInc_Type(Integer32):
    """Custom type vrrpNewCfgGenTckVirtRtrInc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 254),
    )


_VrrpNewCfgGenTckVirtRtrInc_Type.__name__ = "Integer32"
_VrrpNewCfgGenTckVirtRtrInc_Object = MibScalar
vrrpNewCfgGenTckVirtRtrInc = _VrrpNewCfgGenTckVirtRtrInc_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 1, 4),
    _VrrpNewCfgGenTckVirtRtrInc_Type()
)
vrrpNewCfgGenTckVirtRtrInc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vrrpNewCfgGenTckVirtRtrInc.setStatus("current")


class _VrrpCurCfgGenTckIpIntfInc_Type(Integer32):
    """Custom type vrrpCurCfgGenTckIpIntfInc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 254),
    )


_VrrpCurCfgGenTckIpIntfInc_Type.__name__ = "Integer32"
_VrrpCurCfgGenTckIpIntfInc_Object = MibScalar
vrrpCurCfgGenTckIpIntfInc = _VrrpCurCfgGenTckIpIntfInc_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 1, 5),
    _VrrpCurCfgGenTckIpIntfInc_Type()
)
vrrpCurCfgGenTckIpIntfInc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgGenTckIpIntfInc.setStatus("current")


class _VrrpNewCfgGenTckIpIntfInc_Type(Integer32):
    """Custom type vrrpNewCfgGenTckIpIntfInc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 254),
    )


_VrrpNewCfgGenTckIpIntfInc_Type.__name__ = "Integer32"
_VrrpNewCfgGenTckIpIntfInc_Object = MibScalar
vrrpNewCfgGenTckIpIntfInc = _VrrpNewCfgGenTckIpIntfInc_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 1, 6),
    _VrrpNewCfgGenTckIpIntfInc_Type()
)
vrrpNewCfgGenTckIpIntfInc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vrrpNewCfgGenTckIpIntfInc.setStatus("current")


class _VrrpCurCfgGenTckVlanPortInc_Type(Integer32):
    """Custom type vrrpCurCfgGenTckVlanPortInc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 254),
    )


_VrrpCurCfgGenTckVlanPortInc_Type.__name__ = "Integer32"
_VrrpCurCfgGenTckVlanPortInc_Object = MibScalar
vrrpCurCfgGenTckVlanPortInc = _VrrpCurCfgGenTckVlanPortInc_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 1, 7),
    _VrrpCurCfgGenTckVlanPortInc_Type()
)
vrrpCurCfgGenTckVlanPortInc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgGenTckVlanPortInc.setStatus("current")


class _VrrpNewCfgGenTckVlanPortInc_Type(Integer32):
    """Custom type vrrpNewCfgGenTckVlanPortInc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 254),
    )


_VrrpNewCfgGenTckVlanPortInc_Type.__name__ = "Integer32"
_VrrpNewCfgGenTckVlanPortInc_Object = MibScalar
vrrpNewCfgGenTckVlanPortInc = _VrrpNewCfgGenTckVlanPortInc_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 1, 8),
    _VrrpNewCfgGenTckVlanPortInc_Type()
)
vrrpNewCfgGenTckVlanPortInc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vrrpNewCfgGenTckVlanPortInc.setStatus("current")
_VrrpVirtRtrTableMaxSize_Type = Integer32
_VrrpVirtRtrTableMaxSize_Object = MibScalar
vrrpVirtRtrTableMaxSize = _VrrpVirtRtrTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 2),
    _VrrpVirtRtrTableMaxSize_Type()
)
vrrpVirtRtrTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpVirtRtrTableMaxSize.setStatus("current")
_VrrpCurCfgVirtRtrTable_Object = MibTable
vrrpCurCfgVirtRtrTable = _VrrpCurCfgVirtRtrTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 3)
)
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrTable.setStatus("current")
_VrrpCurCfgVirtRtrTableEntry_Object = MibTableRow
vrrpCurCfgVirtRtrTableEntry = _VrrpCurCfgVirtRtrTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 3, 1)
)
vrrpCurCfgVirtRtrTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "vrrpCurCfgVirtRtrIndx"),
)
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrTableEntry.setStatus("current")
_VrrpCurCfgVirtRtrIndx_Type = Integer32
_VrrpCurCfgVirtRtrIndx_Object = MibTableColumn
vrrpCurCfgVirtRtrIndx = _VrrpCurCfgVirtRtrIndx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 3, 1, 1),
    _VrrpCurCfgVirtRtrIndx_Type()
)
vrrpCurCfgVirtRtrIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrIndx.setStatus("current")


class _VrrpCurCfgVirtRtrID_Type(Integer32):
    """Custom type vrrpCurCfgVirtRtrID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_VrrpCurCfgVirtRtrID_Type.__name__ = "Integer32"
_VrrpCurCfgVirtRtrID_Object = MibTableColumn
vrrpCurCfgVirtRtrID = _VrrpCurCfgVirtRtrID_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 3, 1, 2),
    _VrrpCurCfgVirtRtrID_Type()
)
vrrpCurCfgVirtRtrID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrID.setStatus("current")
_VrrpCurCfgVirtRtrAddr_Type = IpAddress
_VrrpCurCfgVirtRtrAddr_Object = MibTableColumn
vrrpCurCfgVirtRtrAddr = _VrrpCurCfgVirtRtrAddr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 3, 1, 3),
    _VrrpCurCfgVirtRtrAddr_Type()
)
vrrpCurCfgVirtRtrAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrAddr.setStatus("current")
_VrrpCurCfgVirtRtrIfIndex_Type = Integer32
_VrrpCurCfgVirtRtrIfIndex_Object = MibTableColumn
vrrpCurCfgVirtRtrIfIndex = _VrrpCurCfgVirtRtrIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 3, 1, 4),
    _VrrpCurCfgVirtRtrIfIndex_Type()
)
vrrpCurCfgVirtRtrIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrIfIndex.setStatus("current")


class _VrrpCurCfgVirtRtrInterval_Type(Integer32):
    """Custom type vrrpCurCfgVirtRtrInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_VrrpCurCfgVirtRtrInterval_Type.__name__ = "Integer32"
_VrrpCurCfgVirtRtrInterval_Object = MibTableColumn
vrrpCurCfgVirtRtrInterval = _VrrpCurCfgVirtRtrInterval_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 3, 1, 5),
    _VrrpCurCfgVirtRtrInterval_Type()
)
vrrpCurCfgVirtRtrInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrInterval.setStatus("current")


class _VrrpCurCfgVirtRtrPriority_Type(Integer32):
    """Custom type vrrpCurCfgVirtRtrPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 254),
    )


_VrrpCurCfgVirtRtrPriority_Type.__name__ = "Integer32"
_VrrpCurCfgVirtRtrPriority_Object = MibTableColumn
vrrpCurCfgVirtRtrPriority = _VrrpCurCfgVirtRtrPriority_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 3, 1, 6),
    _VrrpCurCfgVirtRtrPriority_Type()
)
vrrpCurCfgVirtRtrPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrPriority.setStatus("current")


class _VrrpCurCfgVirtRtrPreempt_Type(Integer32):
    """Custom type vrrpCurCfgVirtRtrPreempt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpCurCfgVirtRtrPreempt_Type.__name__ = "Integer32"
_VrrpCurCfgVirtRtrPreempt_Object = MibTableColumn
vrrpCurCfgVirtRtrPreempt = _VrrpCurCfgVirtRtrPreempt_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 3, 1, 7),
    _VrrpCurCfgVirtRtrPreempt_Type()
)
vrrpCurCfgVirtRtrPreempt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrPreempt.setStatus("current")


class _VrrpCurCfgVirtRtrState_Type(Integer32):
    """Custom type vrrpCurCfgVirtRtrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpCurCfgVirtRtrState_Type.__name__ = "Integer32"
_VrrpCurCfgVirtRtrState_Object = MibTableColumn
vrrpCurCfgVirtRtrState = _VrrpCurCfgVirtRtrState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 3, 1, 8),
    _VrrpCurCfgVirtRtrState_Type()
)
vrrpCurCfgVirtRtrState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrState.setStatus("current")


class _VrrpCurCfgVirtRtrTckVirtRtr_Type(Integer32):
    """Custom type vrrpCurCfgVirtRtrTckVirtRtr based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpCurCfgVirtRtrTckVirtRtr_Type.__name__ = "Integer32"
_VrrpCurCfgVirtRtrTckVirtRtr_Object = MibTableColumn
vrrpCurCfgVirtRtrTckVirtRtr = _VrrpCurCfgVirtRtrTckVirtRtr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 3, 1, 10),
    _VrrpCurCfgVirtRtrTckVirtRtr_Type()
)
vrrpCurCfgVirtRtrTckVirtRtr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrTckVirtRtr.setStatus("current")


class _VrrpCurCfgVirtRtrTckIpIntf_Type(Integer32):
    """Custom type vrrpCurCfgVirtRtrTckIpIntf based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpCurCfgVirtRtrTckIpIntf_Type.__name__ = "Integer32"
_VrrpCurCfgVirtRtrTckIpIntf_Object = MibTableColumn
vrrpCurCfgVirtRtrTckIpIntf = _VrrpCurCfgVirtRtrTckIpIntf_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 3, 1, 11),
    _VrrpCurCfgVirtRtrTckIpIntf_Type()
)
vrrpCurCfgVirtRtrTckIpIntf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrTckIpIntf.setStatus("current")


class _VrrpCurCfgVirtRtrTckVlanPort_Type(Integer32):
    """Custom type vrrpCurCfgVirtRtrTckVlanPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpCurCfgVirtRtrTckVlanPort_Type.__name__ = "Integer32"
_VrrpCurCfgVirtRtrTckVlanPort_Object = MibTableColumn
vrrpCurCfgVirtRtrTckVlanPort = _VrrpCurCfgVirtRtrTckVlanPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 3, 1, 12),
    _VrrpCurCfgVirtRtrTckVlanPort_Type()
)
vrrpCurCfgVirtRtrTckVlanPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrTckVlanPort.setStatus("current")
_VrrpNewCfgVirtRtrTable_Object = MibTable
vrrpNewCfgVirtRtrTable = _VrrpNewCfgVirtRtrTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 4)
)
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrTable.setStatus("current")
_VrrpNewCfgVirtRtrTableEntry_Object = MibTableRow
vrrpNewCfgVirtRtrTableEntry = _VrrpNewCfgVirtRtrTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 4, 1)
)
vrrpNewCfgVirtRtrTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "vrrpNewCfgVirtRtrIndx"),
)
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrTableEntry.setStatus("current")
_VrrpNewCfgVirtRtrIndx_Type = Integer32
_VrrpNewCfgVirtRtrIndx_Object = MibTableColumn
vrrpNewCfgVirtRtrIndx = _VrrpNewCfgVirtRtrIndx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 4, 1, 1),
    _VrrpNewCfgVirtRtrIndx_Type()
)
vrrpNewCfgVirtRtrIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrIndx.setStatus("current")


class _VrrpNewCfgVirtRtrID_Type(Integer32):
    """Custom type vrrpNewCfgVirtRtrID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_VrrpNewCfgVirtRtrID_Type.__name__ = "Integer32"
_VrrpNewCfgVirtRtrID_Object = MibTableColumn
vrrpNewCfgVirtRtrID = _VrrpNewCfgVirtRtrID_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 4, 1, 2),
    _VrrpNewCfgVirtRtrID_Type()
)
vrrpNewCfgVirtRtrID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrID.setStatus("current")
_VrrpNewCfgVirtRtrAddr_Type = IpAddress
_VrrpNewCfgVirtRtrAddr_Object = MibTableColumn
vrrpNewCfgVirtRtrAddr = _VrrpNewCfgVirtRtrAddr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 4, 1, 3),
    _VrrpNewCfgVirtRtrAddr_Type()
)
vrrpNewCfgVirtRtrAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrAddr.setStatus("current")
_VrrpNewCfgVirtRtrIfIndex_Type = Integer32
_VrrpNewCfgVirtRtrIfIndex_Object = MibTableColumn
vrrpNewCfgVirtRtrIfIndex = _VrrpNewCfgVirtRtrIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 4, 1, 4),
    _VrrpNewCfgVirtRtrIfIndex_Type()
)
vrrpNewCfgVirtRtrIfIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrIfIndex.setStatus("current")


class _VrrpNewCfgVirtRtrInterval_Type(Integer32):
    """Custom type vrrpNewCfgVirtRtrInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_VrrpNewCfgVirtRtrInterval_Type.__name__ = "Integer32"
_VrrpNewCfgVirtRtrInterval_Object = MibTableColumn
vrrpNewCfgVirtRtrInterval = _VrrpNewCfgVirtRtrInterval_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 4, 1, 5),
    _VrrpNewCfgVirtRtrInterval_Type()
)
vrrpNewCfgVirtRtrInterval.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrInterval.setStatus("current")


class _VrrpNewCfgVirtRtrPriority_Type(Integer32):
    """Custom type vrrpNewCfgVirtRtrPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 254),
    )


_VrrpNewCfgVirtRtrPriority_Type.__name__ = "Integer32"
_VrrpNewCfgVirtRtrPriority_Object = MibTableColumn
vrrpNewCfgVirtRtrPriority = _VrrpNewCfgVirtRtrPriority_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 4, 1, 6),
    _VrrpNewCfgVirtRtrPriority_Type()
)
vrrpNewCfgVirtRtrPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrPriority.setStatus("current")


class _VrrpNewCfgVirtRtrPreempt_Type(Integer32):
    """Custom type vrrpNewCfgVirtRtrPreempt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpNewCfgVirtRtrPreempt_Type.__name__ = "Integer32"
_VrrpNewCfgVirtRtrPreempt_Object = MibTableColumn
vrrpNewCfgVirtRtrPreempt = _VrrpNewCfgVirtRtrPreempt_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 4, 1, 7),
    _VrrpNewCfgVirtRtrPreempt_Type()
)
vrrpNewCfgVirtRtrPreempt.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrPreempt.setStatus("current")


class _VrrpNewCfgVirtRtrState_Type(Integer32):
    """Custom type vrrpNewCfgVirtRtrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpNewCfgVirtRtrState_Type.__name__ = "Integer32"
_VrrpNewCfgVirtRtrState_Object = MibTableColumn
vrrpNewCfgVirtRtrState = _VrrpNewCfgVirtRtrState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 4, 1, 8),
    _VrrpNewCfgVirtRtrState_Type()
)
vrrpNewCfgVirtRtrState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrState.setStatus("current")


class _VrrpNewCfgVirtRtrDelete_Type(Integer32):
    """Custom type vrrpNewCfgVirtRtrDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_VrrpNewCfgVirtRtrDelete_Type.__name__ = "Integer32"
_VrrpNewCfgVirtRtrDelete_Object = MibTableColumn
vrrpNewCfgVirtRtrDelete = _VrrpNewCfgVirtRtrDelete_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 4, 1, 9),
    _VrrpNewCfgVirtRtrDelete_Type()
)
vrrpNewCfgVirtRtrDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrDelete.setStatus("current")


class _VrrpNewCfgVirtRtrTckVirtRtr_Type(Integer32):
    """Custom type vrrpNewCfgVirtRtrTckVirtRtr based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpNewCfgVirtRtrTckVirtRtr_Type.__name__ = "Integer32"
_VrrpNewCfgVirtRtrTckVirtRtr_Object = MibTableColumn
vrrpNewCfgVirtRtrTckVirtRtr = _VrrpNewCfgVirtRtrTckVirtRtr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 4, 1, 11),
    _VrrpNewCfgVirtRtrTckVirtRtr_Type()
)
vrrpNewCfgVirtRtrTckVirtRtr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrTckVirtRtr.setStatus("current")


class _VrrpNewCfgVirtRtrTckIpIntf_Type(Integer32):
    """Custom type vrrpNewCfgVirtRtrTckIpIntf based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpNewCfgVirtRtrTckIpIntf_Type.__name__ = "Integer32"
_VrrpNewCfgVirtRtrTckIpIntf_Object = MibTableColumn
vrrpNewCfgVirtRtrTckIpIntf = _VrrpNewCfgVirtRtrTckIpIntf_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 4, 1, 12),
    _VrrpNewCfgVirtRtrTckIpIntf_Type()
)
vrrpNewCfgVirtRtrTckIpIntf.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrTckIpIntf.setStatus("current")


class _VrrpNewCfgVirtRtrTckVlanPort_Type(Integer32):
    """Custom type vrrpNewCfgVirtRtrTckVlanPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpNewCfgVirtRtrTckVlanPort_Type.__name__ = "Integer32"
_VrrpNewCfgVirtRtrTckVlanPort_Object = MibTableColumn
vrrpNewCfgVirtRtrTckVlanPort = _VrrpNewCfgVirtRtrTckVlanPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 4, 1, 13),
    _VrrpNewCfgVirtRtrTckVlanPort_Type()
)
vrrpNewCfgVirtRtrTckVlanPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrTckVlanPort.setStatus("current")
_VrrpIfTableMaxSize_Type = Integer32
_VrrpIfTableMaxSize_Object = MibScalar
vrrpIfTableMaxSize = _VrrpIfTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 5),
    _VrrpIfTableMaxSize_Type()
)
vrrpIfTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpIfTableMaxSize.setStatus("current")
_VrrpCurCfgIfTable_Object = MibTable
vrrpCurCfgIfTable = _VrrpCurCfgIfTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 6)
)
if mibBuilder.loadTexts:
    vrrpCurCfgIfTable.setStatus("current")
_VrrpCurCfgIfTableEntry_Object = MibTableRow
vrrpCurCfgIfTableEntry = _VrrpCurCfgIfTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 6, 1)
)
vrrpCurCfgIfTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "vrrpCurCfgIfIndx"),
)
if mibBuilder.loadTexts:
    vrrpCurCfgIfTableEntry.setStatus("current")
_VrrpCurCfgIfIndx_Type = Integer32
_VrrpCurCfgIfIndx_Object = MibTableColumn
vrrpCurCfgIfIndx = _VrrpCurCfgIfIndx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 6, 1, 1),
    _VrrpCurCfgIfIndx_Type()
)
vrrpCurCfgIfIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgIfIndx.setStatus("current")


class _VrrpCurCfgIfAuthType_Type(Integer32):
    """Custom type vrrpCurCfgIfAuthType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("simple-text-password", 2))
    )


_VrrpCurCfgIfAuthType_Type.__name__ = "Integer32"
_VrrpCurCfgIfAuthType_Object = MibTableColumn
vrrpCurCfgIfAuthType = _VrrpCurCfgIfAuthType_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 6, 1, 2),
    _VrrpCurCfgIfAuthType_Type()
)
vrrpCurCfgIfAuthType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgIfAuthType.setStatus("current")


class _VrrpCurCfgIfPasswd_Type(DisplayString):
    """Custom type vrrpCurCfgIfPasswd based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_VrrpCurCfgIfPasswd_Type.__name__ = "DisplayString"
_VrrpCurCfgIfPasswd_Object = MibTableColumn
vrrpCurCfgIfPasswd = _VrrpCurCfgIfPasswd_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 6, 1, 3),
    _VrrpCurCfgIfPasswd_Type()
)
vrrpCurCfgIfPasswd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgIfPasswd.setStatus("current")
_VrrpNewCfgIfTable_Object = MibTable
vrrpNewCfgIfTable = _VrrpNewCfgIfTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 7)
)
if mibBuilder.loadTexts:
    vrrpNewCfgIfTable.setStatus("current")
_VrrpNewCfgIfTableEntry_Object = MibTableRow
vrrpNewCfgIfTableEntry = _VrrpNewCfgIfTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 7, 1)
)
vrrpNewCfgIfTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "vrrpNewCfgIfIndx"),
)
if mibBuilder.loadTexts:
    vrrpNewCfgIfTableEntry.setStatus("current")
_VrrpNewCfgIfIndx_Type = Integer32
_VrrpNewCfgIfIndx_Object = MibTableColumn
vrrpNewCfgIfIndx = _VrrpNewCfgIfIndx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 7, 1, 1),
    _VrrpNewCfgIfIndx_Type()
)
vrrpNewCfgIfIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpNewCfgIfIndx.setStatus("current")


class _VrrpNewCfgIfAuthType_Type(Integer32):
    """Custom type vrrpNewCfgIfAuthType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("simple-text-password", 2))
    )


_VrrpNewCfgIfAuthType_Type.__name__ = "Integer32"
_VrrpNewCfgIfAuthType_Object = MibTableColumn
vrrpNewCfgIfAuthType = _VrrpNewCfgIfAuthType_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 7, 1, 2),
    _VrrpNewCfgIfAuthType_Type()
)
vrrpNewCfgIfAuthType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgIfAuthType.setStatus("current")


class _VrrpNewCfgIfPasswd_Type(DisplayString):
    """Custom type vrrpNewCfgIfPasswd based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_VrrpNewCfgIfPasswd_Type.__name__ = "DisplayString"
_VrrpNewCfgIfPasswd_Object = MibTableColumn
vrrpNewCfgIfPasswd = _VrrpNewCfgIfPasswd_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 7, 1, 3),
    _VrrpNewCfgIfPasswd_Type()
)
vrrpNewCfgIfPasswd.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgIfPasswd.setStatus("current")


class _VrrpNewCfgIfDelete_Type(Integer32):
    """Custom type vrrpNewCfgIfDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_VrrpNewCfgIfDelete_Type.__name__ = "Integer32"
_VrrpNewCfgIfDelete_Object = MibTableColumn
vrrpNewCfgIfDelete = _VrrpNewCfgIfDelete_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 7, 1, 4),
    _VrrpNewCfgIfDelete_Type()
)
vrrpNewCfgIfDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgIfDelete.setStatus("current")
_VrrpVirtRtrGrpTableMaxSize_Type = Integer32
_VrrpVirtRtrGrpTableMaxSize_Object = MibScalar
vrrpVirtRtrGrpTableMaxSize = _VrrpVirtRtrGrpTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 8),
    _VrrpVirtRtrGrpTableMaxSize_Type()
)
vrrpVirtRtrGrpTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpVirtRtrGrpTableMaxSize.setStatus("current")
_VrrpCurCfgVirtRtrGrpTable_Object = MibTable
vrrpCurCfgVirtRtrGrpTable = _VrrpCurCfgVirtRtrGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 9)
)
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrGrpTable.setStatus("current")
_VrrpCurCfgVirtRtrGrpTableEntry_Object = MibTableRow
vrrpCurCfgVirtRtrGrpTableEntry = _VrrpCurCfgVirtRtrGrpTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 9, 1)
)
vrrpCurCfgVirtRtrGrpTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "vrrpCurCfgVirtRtrGrpIndx"),
)
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrGrpTableEntry.setStatus("current")
_VrrpCurCfgVirtRtrGrpIndx_Type = Integer32
_VrrpCurCfgVirtRtrGrpIndx_Object = MibTableColumn
vrrpCurCfgVirtRtrGrpIndx = _VrrpCurCfgVirtRtrGrpIndx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 9, 1, 1),
    _VrrpCurCfgVirtRtrGrpIndx_Type()
)
vrrpCurCfgVirtRtrGrpIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrGrpIndx.setStatus("current")


class _VrrpCurCfgVirtRtrGrpID_Type(Integer32):
    """Custom type vrrpCurCfgVirtRtrGrpID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_VrrpCurCfgVirtRtrGrpID_Type.__name__ = "Integer32"
_VrrpCurCfgVirtRtrGrpID_Object = MibTableColumn
vrrpCurCfgVirtRtrGrpID = _VrrpCurCfgVirtRtrGrpID_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 9, 1, 2),
    _VrrpCurCfgVirtRtrGrpID_Type()
)
vrrpCurCfgVirtRtrGrpID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrGrpID.setStatus("current")
_VrrpCurCfgVirtRtrGrpIfIndex_Type = Integer32
_VrrpCurCfgVirtRtrGrpIfIndex_Object = MibTableColumn
vrrpCurCfgVirtRtrGrpIfIndex = _VrrpCurCfgVirtRtrGrpIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 9, 1, 3),
    _VrrpCurCfgVirtRtrGrpIfIndex_Type()
)
vrrpCurCfgVirtRtrGrpIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrGrpIfIndex.setStatus("current")


class _VrrpCurCfgVirtRtrGrpInterval_Type(Integer32):
    """Custom type vrrpCurCfgVirtRtrGrpInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_VrrpCurCfgVirtRtrGrpInterval_Type.__name__ = "Integer32"
_VrrpCurCfgVirtRtrGrpInterval_Object = MibTableColumn
vrrpCurCfgVirtRtrGrpInterval = _VrrpCurCfgVirtRtrGrpInterval_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 9, 1, 4),
    _VrrpCurCfgVirtRtrGrpInterval_Type()
)
vrrpCurCfgVirtRtrGrpInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrGrpInterval.setStatus("current")


class _VrrpCurCfgVirtRtrGrpPriority_Type(Integer32):
    """Custom type vrrpCurCfgVirtRtrGrpPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 254),
    )


_VrrpCurCfgVirtRtrGrpPriority_Type.__name__ = "Integer32"
_VrrpCurCfgVirtRtrGrpPriority_Object = MibTableColumn
vrrpCurCfgVirtRtrGrpPriority = _VrrpCurCfgVirtRtrGrpPriority_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 9, 1, 5),
    _VrrpCurCfgVirtRtrGrpPriority_Type()
)
vrrpCurCfgVirtRtrGrpPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrGrpPriority.setStatus("current")


class _VrrpCurCfgVirtRtrGrpPreempt_Type(Integer32):
    """Custom type vrrpCurCfgVirtRtrGrpPreempt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpCurCfgVirtRtrGrpPreempt_Type.__name__ = "Integer32"
_VrrpCurCfgVirtRtrGrpPreempt_Object = MibTableColumn
vrrpCurCfgVirtRtrGrpPreempt = _VrrpCurCfgVirtRtrGrpPreempt_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 9, 1, 6),
    _VrrpCurCfgVirtRtrGrpPreempt_Type()
)
vrrpCurCfgVirtRtrGrpPreempt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrGrpPreempt.setStatus("current")


class _VrrpCurCfgVirtRtrGrpState_Type(Integer32):
    """Custom type vrrpCurCfgVirtRtrGrpState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpCurCfgVirtRtrGrpState_Type.__name__ = "Integer32"
_VrrpCurCfgVirtRtrGrpState_Object = MibTableColumn
vrrpCurCfgVirtRtrGrpState = _VrrpCurCfgVirtRtrGrpState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 9, 1, 7),
    _VrrpCurCfgVirtRtrGrpState_Type()
)
vrrpCurCfgVirtRtrGrpState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrGrpState.setStatus("current")


class _VrrpCurCfgVirtRtrGrpTckIpIntf_Type(Integer32):
    """Custom type vrrpCurCfgVirtRtrGrpTckIpIntf based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpCurCfgVirtRtrGrpTckIpIntf_Type.__name__ = "Integer32"
_VrrpCurCfgVirtRtrGrpTckIpIntf_Object = MibTableColumn
vrrpCurCfgVirtRtrGrpTckIpIntf = _VrrpCurCfgVirtRtrGrpTckIpIntf_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 9, 1, 10),
    _VrrpCurCfgVirtRtrGrpTckIpIntf_Type()
)
vrrpCurCfgVirtRtrGrpTckIpIntf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrGrpTckIpIntf.setStatus("current")


class _VrrpCurCfgVirtRtrGrpTckVlanPort_Type(Integer32):
    """Custom type vrrpCurCfgVirtRtrGrpTckVlanPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpCurCfgVirtRtrGrpTckVlanPort_Type.__name__ = "Integer32"
_VrrpCurCfgVirtRtrGrpTckVlanPort_Object = MibTableColumn
vrrpCurCfgVirtRtrGrpTckVlanPort = _VrrpCurCfgVirtRtrGrpTckVlanPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 9, 1, 11),
    _VrrpCurCfgVirtRtrGrpTckVlanPort_Type()
)
vrrpCurCfgVirtRtrGrpTckVlanPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpCurCfgVirtRtrGrpTckVlanPort.setStatus("current")
_VrrpNewCfgVirtRtrGrpTable_Object = MibTable
vrrpNewCfgVirtRtrGrpTable = _VrrpNewCfgVirtRtrGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 10)
)
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrGrpTable.setStatus("current")
_VrrpNewCfgVirtRtrGrpTableEntry_Object = MibTableRow
vrrpNewCfgVirtRtrGrpTableEntry = _VrrpNewCfgVirtRtrGrpTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 10, 1)
)
vrrpNewCfgVirtRtrGrpTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "vrrpNewCfgVirtRtrGrpIndx"),
)
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrGrpTableEntry.setStatus("current")
_VrrpNewCfgVirtRtrGrpIndx_Type = Integer32
_VrrpNewCfgVirtRtrGrpIndx_Object = MibTableColumn
vrrpNewCfgVirtRtrGrpIndx = _VrrpNewCfgVirtRtrGrpIndx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 10, 1, 1),
    _VrrpNewCfgVirtRtrGrpIndx_Type()
)
vrrpNewCfgVirtRtrGrpIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrGrpIndx.setStatus("current")


class _VrrpNewCfgVirtRtrGrpID_Type(Integer32):
    """Custom type vrrpNewCfgVirtRtrGrpID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_VrrpNewCfgVirtRtrGrpID_Type.__name__ = "Integer32"
_VrrpNewCfgVirtRtrGrpID_Object = MibTableColumn
vrrpNewCfgVirtRtrGrpID = _VrrpNewCfgVirtRtrGrpID_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 10, 1, 2),
    _VrrpNewCfgVirtRtrGrpID_Type()
)
vrrpNewCfgVirtRtrGrpID.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrGrpID.setStatus("current")
_VrrpNewCfgVirtRtrGrpIfIndex_Type = Integer32
_VrrpNewCfgVirtRtrGrpIfIndex_Object = MibTableColumn
vrrpNewCfgVirtRtrGrpIfIndex = _VrrpNewCfgVirtRtrGrpIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 10, 1, 3),
    _VrrpNewCfgVirtRtrGrpIfIndex_Type()
)
vrrpNewCfgVirtRtrGrpIfIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrGrpIfIndex.setStatus("current")


class _VrrpNewCfgVirtRtrGrpInterval_Type(Integer32):
    """Custom type vrrpNewCfgVirtRtrGrpInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_VrrpNewCfgVirtRtrGrpInterval_Type.__name__ = "Integer32"
_VrrpNewCfgVirtRtrGrpInterval_Object = MibTableColumn
vrrpNewCfgVirtRtrGrpInterval = _VrrpNewCfgVirtRtrGrpInterval_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 10, 1, 4),
    _VrrpNewCfgVirtRtrGrpInterval_Type()
)
vrrpNewCfgVirtRtrGrpInterval.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrGrpInterval.setStatus("current")


class _VrrpNewCfgVirtRtrGrpPriority_Type(Integer32):
    """Custom type vrrpNewCfgVirtRtrGrpPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 254),
    )


_VrrpNewCfgVirtRtrGrpPriority_Type.__name__ = "Integer32"
_VrrpNewCfgVirtRtrGrpPriority_Object = MibTableColumn
vrrpNewCfgVirtRtrGrpPriority = _VrrpNewCfgVirtRtrGrpPriority_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 10, 1, 5),
    _VrrpNewCfgVirtRtrGrpPriority_Type()
)
vrrpNewCfgVirtRtrGrpPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrGrpPriority.setStatus("current")


class _VrrpNewCfgVirtRtrGrpPreempt_Type(Integer32):
    """Custom type vrrpNewCfgVirtRtrGrpPreempt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpNewCfgVirtRtrGrpPreempt_Type.__name__ = "Integer32"
_VrrpNewCfgVirtRtrGrpPreempt_Object = MibTableColumn
vrrpNewCfgVirtRtrGrpPreempt = _VrrpNewCfgVirtRtrGrpPreempt_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 10, 1, 6),
    _VrrpNewCfgVirtRtrGrpPreempt_Type()
)
vrrpNewCfgVirtRtrGrpPreempt.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrGrpPreempt.setStatus("current")


class _VrrpNewCfgVirtRtrGrpState_Type(Integer32):
    """Custom type vrrpNewCfgVirtRtrGrpState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpNewCfgVirtRtrGrpState_Type.__name__ = "Integer32"
_VrrpNewCfgVirtRtrGrpState_Object = MibTableColumn
vrrpNewCfgVirtRtrGrpState = _VrrpNewCfgVirtRtrGrpState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 10, 1, 7),
    _VrrpNewCfgVirtRtrGrpState_Type()
)
vrrpNewCfgVirtRtrGrpState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrGrpState.setStatus("current")


class _VrrpNewCfgVirtRtrGrpDelete_Type(Integer32):
    """Custom type vrrpNewCfgVirtRtrGrpDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_VrrpNewCfgVirtRtrGrpDelete_Type.__name__ = "Integer32"
_VrrpNewCfgVirtRtrGrpDelete_Object = MibTableColumn
vrrpNewCfgVirtRtrGrpDelete = _VrrpNewCfgVirtRtrGrpDelete_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 10, 1, 8),
    _VrrpNewCfgVirtRtrGrpDelete_Type()
)
vrrpNewCfgVirtRtrGrpDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrGrpDelete.setStatus("current")


class _VrrpNewCfgVirtRtrGrpTckIpIntf_Type(Integer32):
    """Custom type vrrpNewCfgVirtRtrGrpTckIpIntf based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpNewCfgVirtRtrGrpTckIpIntf_Type.__name__ = "Integer32"
_VrrpNewCfgVirtRtrGrpTckIpIntf_Object = MibTableColumn
vrrpNewCfgVirtRtrGrpTckIpIntf = _VrrpNewCfgVirtRtrGrpTckIpIntf_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 10, 1, 11),
    _VrrpNewCfgVirtRtrGrpTckIpIntf_Type()
)
vrrpNewCfgVirtRtrGrpTckIpIntf.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrGrpTckIpIntf.setStatus("current")


class _VrrpNewCfgVirtRtrGrpTckVlanPort_Type(Integer32):
    """Custom type vrrpNewCfgVirtRtrGrpTckVlanPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpNewCfgVirtRtrGrpTckVlanPort_Type.__name__ = "Integer32"
_VrrpNewCfgVirtRtrGrpTckVlanPort_Object = MibTableColumn
vrrpNewCfgVirtRtrGrpTckVlanPort = _VrrpNewCfgVirtRtrGrpTckVlanPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 6, 10, 1, 12),
    _VrrpNewCfgVirtRtrGrpTckVlanPort_Type()
)
vrrpNewCfgVirtRtrGrpTckVlanPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    vrrpNewCfgVirtRtrGrpTckVlanPort.setStatus("current")
_ArpCfg_ObjectIdentity = ObjectIdentity
arpCfg = _ArpCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 7)
)


class _ArpCurCfgReARPPeriod_Type(Integer32):
    """Custom type arpCurCfgReARPPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 120),
    )


_ArpCurCfgReARPPeriod_Type.__name__ = "Integer32"
_ArpCurCfgReARPPeriod_Object = MibScalar
arpCurCfgReARPPeriod = _ArpCurCfgReARPPeriod_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 7, 1),
    _ArpCurCfgReARPPeriod_Type()
)
arpCurCfgReARPPeriod.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    arpCurCfgReARPPeriod.setStatus("current")


class _ArpNewCfgReARPPeriod_Type(Integer32):
    """Custom type arpNewCfgReARPPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 120),
    )


_ArpNewCfgReARPPeriod_Type.__name__ = "Integer32"
_ArpNewCfgReARPPeriod_Object = MibScalar
arpNewCfgReARPPeriod = _ArpNewCfgReARPPeriod_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 7, 2),
    _ArpNewCfgReARPPeriod_Type()
)
arpNewCfgReARPPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    arpNewCfgReARPPeriod.setStatus("current")


class _IpStaticArpTableMaxSize_Type(Integer32):
    """Custom type ipStaticArpTableMaxSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_IpStaticArpTableMaxSize_Type.__name__ = "Integer32"
_IpStaticArpTableMaxSize_Object = MibScalar
ipStaticArpTableMaxSize = _IpStaticArpTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 7, 3),
    _IpStaticArpTableMaxSize_Type()
)
ipStaticArpTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipStaticArpTableMaxSize.setStatus("current")
_IpCurCfgStaticArpTable_Object = MibTable
ipCurCfgStaticArpTable = _IpCurCfgStaticArpTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 7, 4)
)
if mibBuilder.loadTexts:
    ipCurCfgStaticArpTable.setStatus("current")
_IpCurCfgStaticArpEntry_Object = MibTableRow
ipCurCfgStaticArpEntry = _IpCurCfgStaticArpEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 7, 4, 1)
)
ipCurCfgStaticArpEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ipCurCfgStaticArpIndx"),
)
if mibBuilder.loadTexts:
    ipCurCfgStaticArpEntry.setStatus("current")
_IpCurCfgStaticArpIndx_Type = Integer32
_IpCurCfgStaticArpIndx_Object = MibTableColumn
ipCurCfgStaticArpIndx = _IpCurCfgStaticArpIndx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 7, 4, 1, 1),
    _IpCurCfgStaticArpIndx_Type()
)
ipCurCfgStaticArpIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgStaticArpIndx.setStatus("current")
_IpCurCfgStaticArpIp_Type = IpAddress
_IpCurCfgStaticArpIp_Object = MibTableColumn
ipCurCfgStaticArpIp = _IpCurCfgStaticArpIp_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 7, 4, 1, 2),
    _IpCurCfgStaticArpIp_Type()
)
ipCurCfgStaticArpIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgStaticArpIp.setStatus("current")
_IpCurCfgStaticArpMAC_Type = DisplayString
_IpCurCfgStaticArpMAC_Object = MibTableColumn
ipCurCfgStaticArpMAC = _IpCurCfgStaticArpMAC_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 7, 4, 1, 3),
    _IpCurCfgStaticArpMAC_Type()
)
ipCurCfgStaticArpMAC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgStaticArpMAC.setStatus("current")


class _IpCurCfgStaticArpVlan_Type(Integer32):
    """Custom type ipCurCfgStaticArpVlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4095),
    )


_IpCurCfgStaticArpVlan_Type.__name__ = "Integer32"
_IpCurCfgStaticArpVlan_Object = MibTableColumn
ipCurCfgStaticArpVlan = _IpCurCfgStaticArpVlan_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 7, 4, 1, 4),
    _IpCurCfgStaticArpVlan_Type()
)
ipCurCfgStaticArpVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgStaticArpVlan.setStatus("current")
_IpCurCfgStaticArpPort_Type = Integer32
_IpCurCfgStaticArpPort_Object = MibTableColumn
ipCurCfgStaticArpPort = _IpCurCfgStaticArpPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 7, 4, 1, 5),
    _IpCurCfgStaticArpPort_Type()
)
ipCurCfgStaticArpPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgStaticArpPort.setStatus("current")
_IpNewCfgStaticArpTable_Object = MibTable
ipNewCfgStaticArpTable = _IpNewCfgStaticArpTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 7, 5)
)
if mibBuilder.loadTexts:
    ipNewCfgStaticArpTable.setStatus("current")
_IpNewCfgStaticArpEntry_Object = MibTableRow
ipNewCfgStaticArpEntry = _IpNewCfgStaticArpEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 7, 5, 1)
)
ipNewCfgStaticArpEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ipNewCfgStaticArpIndx"),
)
if mibBuilder.loadTexts:
    ipNewCfgStaticArpEntry.setStatus("current")
_IpNewCfgStaticArpIndx_Type = Integer32
_IpNewCfgStaticArpIndx_Object = MibTableColumn
ipNewCfgStaticArpIndx = _IpNewCfgStaticArpIndx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 7, 5, 1, 1),
    _IpNewCfgStaticArpIndx_Type()
)
ipNewCfgStaticArpIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipNewCfgStaticArpIndx.setStatus("current")
_IpNewCfgStaticArpIp_Type = IpAddress
_IpNewCfgStaticArpIp_Object = MibTableColumn
ipNewCfgStaticArpIp = _IpNewCfgStaticArpIp_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 7, 5, 1, 2),
    _IpNewCfgStaticArpIp_Type()
)
ipNewCfgStaticArpIp.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgStaticArpIp.setStatus("current")
_IpNewCfgStaticArpMAC_Type = DisplayString
_IpNewCfgStaticArpMAC_Object = MibTableColumn
ipNewCfgStaticArpMAC = _IpNewCfgStaticArpMAC_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 7, 5, 1, 3),
    _IpNewCfgStaticArpMAC_Type()
)
ipNewCfgStaticArpMAC.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgStaticArpMAC.setStatus("current")


class _IpNewCfgStaticArpVlan_Type(Integer32):
    """Custom type ipNewCfgStaticArpVlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4095),
    )


_IpNewCfgStaticArpVlan_Type.__name__ = "Integer32"
_IpNewCfgStaticArpVlan_Object = MibTableColumn
ipNewCfgStaticArpVlan = _IpNewCfgStaticArpVlan_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 7, 5, 1, 4),
    _IpNewCfgStaticArpVlan_Type()
)
ipNewCfgStaticArpVlan.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgStaticArpVlan.setStatus("current")
_IpNewCfgStaticArpPort_Type = Integer32
_IpNewCfgStaticArpPort_Object = MibTableColumn
ipNewCfgStaticArpPort = _IpNewCfgStaticArpPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 7, 5, 1, 5),
    _IpNewCfgStaticArpPort_Type()
)
ipNewCfgStaticArpPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgStaticArpPort.setStatus("current")


class _IpNewCfgStaticArpAction_Type(Integer32):
    """Custom type ipNewCfgStaticArpAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_IpNewCfgStaticArpAction_Type.__name__ = "Integer32"
_IpNewCfgStaticArpAction_Object = MibTableColumn
ipNewCfgStaticArpAction = _IpNewCfgStaticArpAction_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 7, 5, 1, 6),
    _IpNewCfgStaticArpAction_Type()
)
ipNewCfgStaticArpAction.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgStaticArpAction.setStatus("current")
_IpBootpCfg_ObjectIdentity = ObjectIdentity
ipBootpCfg = _IpBootpCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 8)
)
_IpCurCfgBootpAddr_Type = IpAddress
_IpCurCfgBootpAddr_Object = MibScalar
ipCurCfgBootpAddr = _IpCurCfgBootpAddr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 8, 1),
    _IpCurCfgBootpAddr_Type()
)
ipCurCfgBootpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgBootpAddr.setStatus("current")
_IpNewCfgBootpAddr_Type = IpAddress
_IpNewCfgBootpAddr_Object = MibScalar
ipNewCfgBootpAddr = _IpNewCfgBootpAddr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 8, 2),
    _IpNewCfgBootpAddr_Type()
)
ipNewCfgBootpAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipNewCfgBootpAddr.setStatus("current")
_IpCurCfgBootpAddr2_Type = IpAddress
_IpCurCfgBootpAddr2_Object = MibScalar
ipCurCfgBootpAddr2 = _IpCurCfgBootpAddr2_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 8, 3),
    _IpCurCfgBootpAddr2_Type()
)
ipCurCfgBootpAddr2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgBootpAddr2.setStatus("current")
_IpNewCfgBootpAddr2_Type = IpAddress
_IpNewCfgBootpAddr2_Object = MibScalar
ipNewCfgBootpAddr2 = _IpNewCfgBootpAddr2_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 8, 4),
    _IpNewCfgBootpAddr2_Type()
)
ipNewCfgBootpAddr2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipNewCfgBootpAddr2.setStatus("current")


class _IpCurCfgBootpState_Type(Integer32):
    """Custom type ipCurCfgBootpState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_IpCurCfgBootpState_Type.__name__ = "Integer32"
_IpCurCfgBootpState_Object = MibScalar
ipCurCfgBootpState = _IpCurCfgBootpState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 8, 5),
    _IpCurCfgBootpState_Type()
)
ipCurCfgBootpState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgBootpState.setStatus("current")


class _IpNewCfgBootpState_Type(Integer32):
    """Custom type ipNewCfgBootpState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_IpNewCfgBootpState_Type.__name__ = "Integer32"
_IpNewCfgBootpState_Object = MibScalar
ipNewCfgBootpState = _IpNewCfgBootpState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 8, 6),
    _IpNewCfgBootpState_Type()
)
ipNewCfgBootpState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipNewCfgBootpState.setStatus("current")
_DnsCfg_ObjectIdentity = ObjectIdentity
dnsCfg = _DnsCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 9)
)
_DnsCurCfgPrimaryIpAddr_Type = IpAddress
_DnsCurCfgPrimaryIpAddr_Object = MibScalar
dnsCurCfgPrimaryIpAddr = _DnsCurCfgPrimaryIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 9, 1),
    _DnsCurCfgPrimaryIpAddr_Type()
)
dnsCurCfgPrimaryIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dnsCurCfgPrimaryIpAddr.setStatus("current")
_DnsNewCfgPrimaryIpAddr_Type = IpAddress
_DnsNewCfgPrimaryIpAddr_Object = MibScalar
dnsNewCfgPrimaryIpAddr = _DnsNewCfgPrimaryIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 9, 2),
    _DnsNewCfgPrimaryIpAddr_Type()
)
dnsNewCfgPrimaryIpAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dnsNewCfgPrimaryIpAddr.setStatus("current")
_DnsCurCfgSecondaryIpAddr_Type = IpAddress
_DnsCurCfgSecondaryIpAddr_Object = MibScalar
dnsCurCfgSecondaryIpAddr = _DnsCurCfgSecondaryIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 9, 3),
    _DnsCurCfgSecondaryIpAddr_Type()
)
dnsCurCfgSecondaryIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dnsCurCfgSecondaryIpAddr.setStatus("current")
_DnsNewCfgSecondaryIpAddr_Type = IpAddress
_DnsNewCfgSecondaryIpAddr_Object = MibScalar
dnsNewCfgSecondaryIpAddr = _DnsNewCfgSecondaryIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 9, 4),
    _DnsNewCfgSecondaryIpAddr_Type()
)
dnsNewCfgSecondaryIpAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dnsNewCfgSecondaryIpAddr.setStatus("current")


class _DnsCurCfgDomainName_Type(DisplayString):
    """Custom type dnsCurCfgDomainName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 191),
    )


_DnsCurCfgDomainName_Type.__name__ = "DisplayString"
_DnsCurCfgDomainName_Object = MibScalar
dnsCurCfgDomainName = _DnsCurCfgDomainName_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 9, 5),
    _DnsCurCfgDomainName_Type()
)
dnsCurCfgDomainName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dnsCurCfgDomainName.setStatus("current")


class _DnsNewCfgDomainName_Type(DisplayString):
    """Custom type dnsNewCfgDomainName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 191),
    )


_DnsNewCfgDomainName_Type.__name__ = "DisplayString"
_DnsNewCfgDomainName_Object = MibScalar
dnsNewCfgDomainName = _DnsNewCfgDomainName_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 9, 6),
    _DnsNewCfgDomainName_Type()
)
dnsNewCfgDomainName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dnsNewCfgDomainName.setStatus("current")
_IpNwfCfg_ObjectIdentity = ObjectIdentity
ipNwfCfg = _IpNwfCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 10)
)
_IpNwfTableMax_Type = Integer32
_IpNwfTableMax_Object = MibScalar
ipNwfTableMax = _IpNwfTableMax_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 10, 1),
    _IpNwfTableMax_Type()
)
ipNwfTableMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipNwfTableMax.setStatus("current")
_IpCurCfgNwfTable_Object = MibTable
ipCurCfgNwfTable = _IpCurCfgNwfTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 10, 2)
)
if mibBuilder.loadTexts:
    ipCurCfgNwfTable.setStatus("current")
_IpCurCfgNwfEntry_Object = MibTableRow
ipCurCfgNwfEntry = _IpCurCfgNwfEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 10, 2, 1)
)
ipCurCfgNwfEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ipCurCfgNwfIndex"),
)
if mibBuilder.loadTexts:
    ipCurCfgNwfEntry.setStatus("current")
_IpCurCfgNwfIndex_Type = Integer32
_IpCurCfgNwfIndex_Object = MibTableColumn
ipCurCfgNwfIndex = _IpCurCfgNwfIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 10, 2, 1, 1),
    _IpCurCfgNwfIndex_Type()
)
ipCurCfgNwfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgNwfIndex.setStatus("current")
_IpCurCfgNwfAddr_Type = IpAddress
_IpCurCfgNwfAddr_Object = MibTableColumn
ipCurCfgNwfAddr = _IpCurCfgNwfAddr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 10, 2, 1, 2),
    _IpCurCfgNwfAddr_Type()
)
ipCurCfgNwfAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgNwfAddr.setStatus("current")
_IpCurCfgNwfMask_Type = IpAddress
_IpCurCfgNwfMask_Object = MibTableColumn
ipCurCfgNwfMask = _IpCurCfgNwfMask_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 10, 2, 1, 3),
    _IpCurCfgNwfMask_Type()
)
ipCurCfgNwfMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgNwfMask.setStatus("current")


class _IpCurCfgNwfState_Type(Integer32):
    """Custom type ipCurCfgNwfState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IpCurCfgNwfState_Type.__name__ = "Integer32"
_IpCurCfgNwfState_Object = MibTableColumn
ipCurCfgNwfState = _IpCurCfgNwfState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 10, 2, 1, 4),
    _IpCurCfgNwfState_Type()
)
ipCurCfgNwfState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgNwfState.setStatus("current")
_IpNewCfgNwfTable_Object = MibTable
ipNewCfgNwfTable = _IpNewCfgNwfTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 10, 3)
)
if mibBuilder.loadTexts:
    ipNewCfgNwfTable.setStatus("current")
_IpNewCfgNwfEntry_Object = MibTableRow
ipNewCfgNwfEntry = _IpNewCfgNwfEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 10, 3, 1)
)
ipNewCfgNwfEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ipNewCfgNwfIndex"),
)
if mibBuilder.loadTexts:
    ipNewCfgNwfEntry.setStatus("current")
_IpNewCfgNwfIndex_Type = Integer32
_IpNewCfgNwfIndex_Object = MibTableColumn
ipNewCfgNwfIndex = _IpNewCfgNwfIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 10, 3, 1, 1),
    _IpNewCfgNwfIndex_Type()
)
ipNewCfgNwfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipNewCfgNwfIndex.setStatus("current")
_IpNewCfgNwfAddr_Type = IpAddress
_IpNewCfgNwfAddr_Object = MibTableColumn
ipNewCfgNwfAddr = _IpNewCfgNwfAddr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 10, 3, 1, 2),
    _IpNewCfgNwfAddr_Type()
)
ipNewCfgNwfAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgNwfAddr.setStatus("current")
_IpNewCfgNwfMask_Type = IpAddress
_IpNewCfgNwfMask_Object = MibTableColumn
ipNewCfgNwfMask = _IpNewCfgNwfMask_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 10, 3, 1, 3),
    _IpNewCfgNwfMask_Type()
)
ipNewCfgNwfMask.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgNwfMask.setStatus("current")


class _IpNewCfgNwfState_Type(Integer32):
    """Custom type ipNewCfgNwfState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IpNewCfgNwfState_Type.__name__ = "Integer32"
_IpNewCfgNwfState_Object = MibTableColumn
ipNewCfgNwfState = _IpNewCfgNwfState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 10, 3, 1, 4),
    _IpNewCfgNwfState_Type()
)
ipNewCfgNwfState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgNwfState.setStatus("current")


class _IpNewCfgNwfDelete_Type(Integer32):
    """Custom type ipNewCfgNwfDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_IpNewCfgNwfDelete_Type.__name__ = "Integer32"
_IpNewCfgNwfDelete_Object = MibTableColumn
ipNewCfgNwfDelete = _IpNewCfgNwfDelete_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 10, 3, 1, 5),
    _IpNewCfgNwfDelete_Type()
)
ipNewCfgNwfDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgNwfDelete.setStatus("current")
_IpRmapCfg_ObjectIdentity = ObjectIdentity
ipRmapCfg = _IpRmapCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 11)
)
_IpRmapTableMax_Type = Integer32
_IpRmapTableMax_Object = MibScalar
ipRmapTableMax = _IpRmapTableMax_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 11, 1),
    _IpRmapTableMax_Type()
)
ipRmapTableMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipRmapTableMax.setStatus("current")
_IpCurCfgRmapTable_Object = MibTable
ipCurCfgRmapTable = _IpCurCfgRmapTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 11, 2)
)
if mibBuilder.loadTexts:
    ipCurCfgRmapTable.setStatus("current")
_IpCurCfgRmapEntry_Object = MibTableRow
ipCurCfgRmapEntry = _IpCurCfgRmapEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 11, 2, 1)
)
ipCurCfgRmapEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ipCurCfgRmapIndex"),
)
if mibBuilder.loadTexts:
    ipCurCfgRmapEntry.setStatus("current")
_IpCurCfgRmapIndex_Type = Integer32
_IpCurCfgRmapIndex_Object = MibTableColumn
ipCurCfgRmapIndex = _IpCurCfgRmapIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 11, 2, 1, 1),
    _IpCurCfgRmapIndex_Type()
)
ipCurCfgRmapIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgRmapIndex.setStatus("current")


class _IpCurCfgRmapMetric_Type(Unsigned32):
    """Custom type ipCurCfgRmapMetric based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_IpCurCfgRmapMetric_Type.__name__ = "Unsigned32"
_IpCurCfgRmapMetric_Object = MibTableColumn
ipCurCfgRmapMetric = _IpCurCfgRmapMetric_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 11, 2, 1, 3),
    _IpCurCfgRmapMetric_Type()
)
ipCurCfgRmapMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgRmapMetric.setStatus("current")


class _IpCurCfgRmapPrec_Type(Integer32):
    """Custom type ipCurCfgRmapPrec based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_IpCurCfgRmapPrec_Type.__name__ = "Integer32"
_IpCurCfgRmapPrec_Object = MibTableColumn
ipCurCfgRmapPrec = _IpCurCfgRmapPrec_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 11, 2, 1, 4),
    _IpCurCfgRmapPrec_Type()
)
ipCurCfgRmapPrec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgRmapPrec.setStatus("current")


class _IpCurCfgRmapState_Type(Integer32):
    """Custom type ipCurCfgRmapState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IpCurCfgRmapState_Type.__name__ = "Integer32"
_IpCurCfgRmapState_Object = MibTableColumn
ipCurCfgRmapState = _IpCurCfgRmapState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 11, 2, 1, 6),
    _IpCurCfgRmapState_Type()
)
ipCurCfgRmapState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgRmapState.setStatus("current")


class _IpCurCfgRmapMetricType_Type(Integer32):
    """Custom type ipCurCfgRmapMetricType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("type1", 2),
          ("type2", 3))
    )


_IpCurCfgRmapMetricType_Type.__name__ = "Integer32"
_IpCurCfgRmapMetricType_Object = MibTableColumn
ipCurCfgRmapMetricType = _IpCurCfgRmapMetricType_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 11, 2, 1, 8),
    _IpCurCfgRmapMetricType_Type()
)
ipCurCfgRmapMetricType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgRmapMetricType.setStatus("current")
_IpNewCfgRmapTable_Object = MibTable
ipNewCfgRmapTable = _IpNewCfgRmapTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 11, 3)
)
if mibBuilder.loadTexts:
    ipNewCfgRmapTable.setStatus("current")
_IpNewCfgRmapEntry_Object = MibTableRow
ipNewCfgRmapEntry = _IpNewCfgRmapEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 11, 3, 1)
)
ipNewCfgRmapEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ipNewCfgRmapIndex"),
)
if mibBuilder.loadTexts:
    ipNewCfgRmapEntry.setStatus("current")
_IpNewCfgRmapIndex_Type = Integer32
_IpNewCfgRmapIndex_Object = MibTableColumn
ipNewCfgRmapIndex = _IpNewCfgRmapIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 11, 3, 1, 1),
    _IpNewCfgRmapIndex_Type()
)
ipNewCfgRmapIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipNewCfgRmapIndex.setStatus("current")


class _IpNewCfgRmapMetric_Type(Unsigned32):
    """Custom type ipNewCfgRmapMetric based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_IpNewCfgRmapMetric_Type.__name__ = "Unsigned32"
_IpNewCfgRmapMetric_Object = MibTableColumn
ipNewCfgRmapMetric = _IpNewCfgRmapMetric_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 11, 3, 1, 3),
    _IpNewCfgRmapMetric_Type()
)
ipNewCfgRmapMetric.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgRmapMetric.setStatus("current")


class _IpNewCfgRmapPrec_Type(Integer32):
    """Custom type ipNewCfgRmapPrec based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_IpNewCfgRmapPrec_Type.__name__ = "Integer32"
_IpNewCfgRmapPrec_Object = MibTableColumn
ipNewCfgRmapPrec = _IpNewCfgRmapPrec_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 11, 3, 1, 4),
    _IpNewCfgRmapPrec_Type()
)
ipNewCfgRmapPrec.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgRmapPrec.setStatus("current")


class _IpNewCfgRmapState_Type(Integer32):
    """Custom type ipNewCfgRmapState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IpNewCfgRmapState_Type.__name__ = "Integer32"
_IpNewCfgRmapState_Object = MibTableColumn
ipNewCfgRmapState = _IpNewCfgRmapState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 11, 3, 1, 6),
    _IpNewCfgRmapState_Type()
)
ipNewCfgRmapState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgRmapState.setStatus("current")


class _IpNewCfgRmapMetricType_Type(Integer32):
    """Custom type ipNewCfgRmapMetricType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("type1", 2),
          ("type2", 3))
    )


_IpNewCfgRmapMetricType_Type.__name__ = "Integer32"
_IpNewCfgRmapMetricType_Object = MibTableColumn
ipNewCfgRmapMetricType = _IpNewCfgRmapMetricType_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 11, 3, 1, 8),
    _IpNewCfgRmapMetricType_Type()
)
ipNewCfgRmapMetricType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgRmapMetricType.setStatus("current")


class _IpNewCfgRmapDelete_Type(Integer32):
    """Custom type ipNewCfgRmapDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_IpNewCfgRmapDelete_Type.__name__ = "Integer32"
_IpNewCfgRmapDelete_Object = MibTableColumn
ipNewCfgRmapDelete = _IpNewCfgRmapDelete_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 11, 3, 1, 9),
    _IpNewCfgRmapDelete_Type()
)
ipNewCfgRmapDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgRmapDelete.setStatus("current")
_IpAlistTableMax_Type = Integer32
_IpAlistTableMax_Object = MibScalar
ipAlistTableMax = _IpAlistTableMax_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 11, 4),
    _IpAlistTableMax_Type()
)
ipAlistTableMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipAlistTableMax.setStatus("current")
_IpCurCfgAlistTable_Object = MibTable
ipCurCfgAlistTable = _IpCurCfgAlistTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 11, 5)
)
if mibBuilder.loadTexts:
    ipCurCfgAlistTable.setStatus("current")
_IpCurCfgAlistEntry_Object = MibTableRow
ipCurCfgAlistEntry = _IpCurCfgAlistEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 11, 5, 1)
)
ipCurCfgAlistEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ipCurCfgAlistRmapIndex"),
    (0, "BLADETYPE5-NETWORK-MIB", "ipCurCfgAlistIndex"),
)
if mibBuilder.loadTexts:
    ipCurCfgAlistEntry.setStatus("current")
_IpCurCfgAlistRmapIndex_Type = Integer32
_IpCurCfgAlistRmapIndex_Object = MibTableColumn
ipCurCfgAlistRmapIndex = _IpCurCfgAlistRmapIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 11, 5, 1, 1),
    _IpCurCfgAlistRmapIndex_Type()
)
ipCurCfgAlistRmapIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgAlistRmapIndex.setStatus("current")
_IpCurCfgAlistIndex_Type = Integer32
_IpCurCfgAlistIndex_Object = MibTableColumn
ipCurCfgAlistIndex = _IpCurCfgAlistIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 11, 5, 1, 2),
    _IpCurCfgAlistIndex_Type()
)
ipCurCfgAlistIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgAlistIndex.setStatus("current")


class _IpCurCfgAlistNwf_Type(Integer32):
    """Custom type ipCurCfgAlistNwf based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 256),
    )


_IpCurCfgAlistNwf_Type.__name__ = "Integer32"
_IpCurCfgAlistNwf_Object = MibTableColumn
ipCurCfgAlistNwf = _IpCurCfgAlistNwf_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 11, 5, 1, 3),
    _IpCurCfgAlistNwf_Type()
)
ipCurCfgAlistNwf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgAlistNwf.setStatus("current")


class _IpCurCfgAlistMetric_Type(Unsigned32):
    """Custom type ipCurCfgAlistMetric based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_IpCurCfgAlistMetric_Type.__name__ = "Unsigned32"
_IpCurCfgAlistMetric_Object = MibTableColumn
ipCurCfgAlistMetric = _IpCurCfgAlistMetric_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 11, 5, 1, 4),
    _IpCurCfgAlistMetric_Type()
)
ipCurCfgAlistMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgAlistMetric.setStatus("current")


class _IpCurCfgAlistAction_Type(Integer32):
    """Custom type ipCurCfgAlistAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("permit", 1),
          ("deny", 2))
    )


_IpCurCfgAlistAction_Type.__name__ = "Integer32"
_IpCurCfgAlistAction_Object = MibTableColumn
ipCurCfgAlistAction = _IpCurCfgAlistAction_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 11, 5, 1, 5),
    _IpCurCfgAlistAction_Type()
)
ipCurCfgAlistAction.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgAlistAction.setStatus("current")


class _IpCurCfgAlistState_Type(Integer32):
    """Custom type ipCurCfgAlistState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IpCurCfgAlistState_Type.__name__ = "Integer32"
_IpCurCfgAlistState_Object = MibTableColumn
ipCurCfgAlistState = _IpCurCfgAlistState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 11, 5, 1, 6),
    _IpCurCfgAlistState_Type()
)
ipCurCfgAlistState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgAlistState.setStatus("current")
_IpNewCfgAlistTable_Object = MibTable
ipNewCfgAlistTable = _IpNewCfgAlistTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 11, 6)
)
if mibBuilder.loadTexts:
    ipNewCfgAlistTable.setStatus("current")
_IpNewCfgAlistEntry_Object = MibTableRow
ipNewCfgAlistEntry = _IpNewCfgAlistEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 11, 6, 1)
)
ipNewCfgAlistEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ipNewCfgAlistRmapIndex"),
    (0, "BLADETYPE5-NETWORK-MIB", "ipNewCfgAlistIndex"),
)
if mibBuilder.loadTexts:
    ipNewCfgAlistEntry.setStatus("current")
_IpNewCfgAlistRmapIndex_Type = Integer32
_IpNewCfgAlistRmapIndex_Object = MibTableColumn
ipNewCfgAlistRmapIndex = _IpNewCfgAlistRmapIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 11, 6, 1, 1),
    _IpNewCfgAlistRmapIndex_Type()
)
ipNewCfgAlistRmapIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipNewCfgAlistRmapIndex.setStatus("current")
_IpNewCfgAlistIndex_Type = Integer32
_IpNewCfgAlistIndex_Object = MibTableColumn
ipNewCfgAlistIndex = _IpNewCfgAlistIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 11, 6, 1, 2),
    _IpNewCfgAlistIndex_Type()
)
ipNewCfgAlistIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipNewCfgAlistIndex.setStatus("current")


class _IpNewCfgAlistNwf_Type(Integer32):
    """Custom type ipNewCfgAlistNwf based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 256),
    )


_IpNewCfgAlistNwf_Type.__name__ = "Integer32"
_IpNewCfgAlistNwf_Object = MibTableColumn
ipNewCfgAlistNwf = _IpNewCfgAlistNwf_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 11, 6, 1, 3),
    _IpNewCfgAlistNwf_Type()
)
ipNewCfgAlistNwf.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgAlistNwf.setStatus("current")


class _IpNewCfgAlistMetric_Type(Unsigned32):
    """Custom type ipNewCfgAlistMetric based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16777215),
    )


_IpNewCfgAlistMetric_Type.__name__ = "Unsigned32"
_IpNewCfgAlistMetric_Object = MibTableColumn
ipNewCfgAlistMetric = _IpNewCfgAlistMetric_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 11, 6, 1, 4),
    _IpNewCfgAlistMetric_Type()
)
ipNewCfgAlistMetric.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgAlistMetric.setStatus("current")


class _IpNewCfgAlistAction_Type(Integer32):
    """Custom type ipNewCfgAlistAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("permit", 1),
          ("deny", 2))
    )


_IpNewCfgAlistAction_Type.__name__ = "Integer32"
_IpNewCfgAlistAction_Object = MibTableColumn
ipNewCfgAlistAction = _IpNewCfgAlistAction_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 11, 6, 1, 5),
    _IpNewCfgAlistAction_Type()
)
ipNewCfgAlistAction.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgAlistAction.setStatus("current")


class _IpNewCfgAlistState_Type(Integer32):
    """Custom type ipNewCfgAlistState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IpNewCfgAlistState_Type.__name__ = "Integer32"
_IpNewCfgAlistState_Object = MibTableColumn
ipNewCfgAlistState = _IpNewCfgAlistState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 11, 6, 1, 6),
    _IpNewCfgAlistState_Type()
)
ipNewCfgAlistState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgAlistState.setStatus("current")


class _IpNewCfgAlistDelete_Type(Integer32):
    """Custom type ipNewCfgAlistDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_IpNewCfgAlistDelete_Type.__name__ = "Integer32"
_IpNewCfgAlistDelete_Object = MibTableColumn
ipNewCfgAlistDelete = _IpNewCfgAlistDelete_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 11, 6, 1, 7),
    _IpNewCfgAlistDelete_Type()
)
ipNewCfgAlistDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ipNewCfgAlistDelete.setStatus("current")
_OspfCfg_ObjectIdentity = ObjectIdentity
ospfCfg = _OspfCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13)
)
_OspfGeneral_ObjectIdentity = ObjectIdentity
ospfGeneral = _OspfGeneral_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 1)
)


class _OspfCurCfgDefaultRouteMetric_Type(Integer32):
    """Custom type ospfCurCfgDefaultRouteMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_OspfCurCfgDefaultRouteMetric_Type.__name__ = "Integer32"
_OspfCurCfgDefaultRouteMetric_Object = MibScalar
ospfCurCfgDefaultRouteMetric = _OspfCurCfgDefaultRouteMetric_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 1, 1),
    _OspfCurCfgDefaultRouteMetric_Type()
)
ospfCurCfgDefaultRouteMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgDefaultRouteMetric.setStatus("current")


class _OspfNewCfgDefaultRouteMetric_Type(Integer32):
    """Custom type ospfNewCfgDefaultRouteMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777214),
    )


_OspfNewCfgDefaultRouteMetric_Type.__name__ = "Integer32"
_OspfNewCfgDefaultRouteMetric_Object = MibScalar
ospfNewCfgDefaultRouteMetric = _OspfNewCfgDefaultRouteMetric_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 1, 2),
    _OspfNewCfgDefaultRouteMetric_Type()
)
ospfNewCfgDefaultRouteMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgDefaultRouteMetric.setStatus("current")


class _OspfCurCfgDefaultRouteMetricType_Type(Integer32):
    """Custom type ospfCurCfgDefaultRouteMetricType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("type1", 2),
          ("type2", 3))
    )


_OspfCurCfgDefaultRouteMetricType_Type.__name__ = "Integer32"
_OspfCurCfgDefaultRouteMetricType_Object = MibScalar
ospfCurCfgDefaultRouteMetricType = _OspfCurCfgDefaultRouteMetricType_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 1, 3),
    _OspfCurCfgDefaultRouteMetricType_Type()
)
ospfCurCfgDefaultRouteMetricType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgDefaultRouteMetricType.setStatus("current")


class _OspfNewCfgDefaultRouteMetricType_Type(Integer32):
    """Custom type ospfNewCfgDefaultRouteMetricType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("type1", 2),
          ("type2", 3))
    )


_OspfNewCfgDefaultRouteMetricType_Type.__name__ = "Integer32"
_OspfNewCfgDefaultRouteMetricType_Object = MibScalar
ospfNewCfgDefaultRouteMetricType = _OspfNewCfgDefaultRouteMetricType_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 1, 4),
    _OspfNewCfgDefaultRouteMetricType_Type()
)
ospfNewCfgDefaultRouteMetricType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgDefaultRouteMetricType.setStatus("current")
_OspfIntfTableMaxSize_Type = Integer32
_OspfIntfTableMaxSize_Object = MibScalar
ospfIntfTableMaxSize = _OspfIntfTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 1, 5),
    _OspfIntfTableMaxSize_Type()
)
ospfIntfTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfTableMaxSize.setStatus("current")
_OspfAreaTableMaxSize_Type = Integer32
_OspfAreaTableMaxSize_Object = MibScalar
ospfAreaTableMaxSize = _OspfAreaTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 1, 6),
    _OspfAreaTableMaxSize_Type()
)
ospfAreaTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaTableMaxSize.setStatus("current")
_OspfRangeTableMaxSize_Type = Integer32
_OspfRangeTableMaxSize_Object = MibScalar
ospfRangeTableMaxSize = _OspfRangeTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 1, 7),
    _OspfRangeTableMaxSize_Type()
)
ospfRangeTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfRangeTableMaxSize.setStatus("current")
_OspfVirtIntfTableMaxSize_Type = Integer32
_OspfVirtIntfTableMaxSize_Object = MibScalar
ospfVirtIntfTableMaxSize = _OspfVirtIntfTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 1, 8),
    _OspfVirtIntfTableMaxSize_Type()
)
ospfVirtIntfTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVirtIntfTableMaxSize.setStatus("current")
_OspfHostTableMaxSize_Type = Integer32
_OspfHostTableMaxSize_Object = MibScalar
ospfHostTableMaxSize = _OspfHostTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 1, 9),
    _OspfHostTableMaxSize_Type()
)
ospfHostTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfHostTableMaxSize.setStatus("current")


class _OspfCurCfgState_Type(Integer32):
    """Custom type ospfCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_OspfCurCfgState_Type.__name__ = "Integer32"
_OspfCurCfgState_Object = MibScalar
ospfCurCfgState = _OspfCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 1, 10),
    _OspfCurCfgState_Type()
)
ospfCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgState.setStatus("current")


class _OspfNewCfgState_Type(Integer32):
    """Custom type ospfNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_OspfNewCfgState_Type.__name__ = "Integer32"
_OspfNewCfgState_Object = MibScalar
ospfNewCfgState = _OspfNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 1, 11),
    _OspfNewCfgState_Type()
)
ospfNewCfgState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgState.setStatus("current")
_OspfCurCfgLSDB_Type = Integer32
_OspfCurCfgLSDB_Object = MibScalar
ospfCurCfgLSDB = _OspfCurCfgLSDB_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 1, 12),
    _OspfCurCfgLSDB_Type()
)
ospfCurCfgLSDB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgLSDB.setStatus("current")
_OspfNewCfgLSDB_Type = Integer32
_OspfNewCfgLSDB_Object = MibScalar
ospfNewCfgLSDB = _OspfNewCfgLSDB_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 1, 13),
    _OspfNewCfgLSDB_Type()
)
ospfNewCfgLSDB.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgLSDB.setStatus("current")
_OspfCurCfgAreaTable_Object = MibTable
ospfCurCfgAreaTable = _OspfCurCfgAreaTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 2)
)
if mibBuilder.loadTexts:
    ospfCurCfgAreaTable.setStatus("current")
_OspfCurCfgAreaEntry_Object = MibTableRow
ospfCurCfgAreaEntry = _OspfCurCfgAreaEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 2, 1)
)
ospfCurCfgAreaEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ospfCurCfgAreaIndex"),
)
if mibBuilder.loadTexts:
    ospfCurCfgAreaEntry.setStatus("current")
_OspfCurCfgAreaIndex_Type = Integer32
_OspfCurCfgAreaIndex_Object = MibTableColumn
ospfCurCfgAreaIndex = _OspfCurCfgAreaIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 2, 1, 1),
    _OspfCurCfgAreaIndex_Type()
)
ospfCurCfgAreaIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgAreaIndex.setStatus("current")
_OspfCurCfgAreaId_Type = IpAddress
_OspfCurCfgAreaId_Object = MibTableColumn
ospfCurCfgAreaId = _OspfCurCfgAreaId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 2, 1, 2),
    _OspfCurCfgAreaId_Type()
)
ospfCurCfgAreaId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgAreaId.setStatus("current")


class _OspfCurCfgAreaSpfInterval_Type(Integer32):
    """Custom type ospfCurCfgAreaSpfInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_OspfCurCfgAreaSpfInterval_Type.__name__ = "Integer32"
_OspfCurCfgAreaSpfInterval_Object = MibTableColumn
ospfCurCfgAreaSpfInterval = _OspfCurCfgAreaSpfInterval_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 2, 1, 3),
    _OspfCurCfgAreaSpfInterval_Type()
)
ospfCurCfgAreaSpfInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgAreaSpfInterval.setStatus("current")


class _OspfCurCfgAreaAuthType_Type(Integer32):
    """Custom type ospfCurCfgAreaAuthType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("password", 2),
          ("md5", 3))
    )


_OspfCurCfgAreaAuthType_Type.__name__ = "Integer32"
_OspfCurCfgAreaAuthType_Object = MibTableColumn
ospfCurCfgAreaAuthType = _OspfCurCfgAreaAuthType_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 2, 1, 4),
    _OspfCurCfgAreaAuthType_Type()
)
ospfCurCfgAreaAuthType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgAreaAuthType.setStatus("current")


class _OspfCurCfgAreaType_Type(Integer32):
    """Custom type ospfCurCfgAreaType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("transit", 0),
          ("stub", 1),
          ("nssa", 2))
    )


_OspfCurCfgAreaType_Type.__name__ = "Integer32"
_OspfCurCfgAreaType_Object = MibTableColumn
ospfCurCfgAreaType = _OspfCurCfgAreaType_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 2, 1, 5),
    _OspfCurCfgAreaType_Type()
)
ospfCurCfgAreaType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgAreaType.setStatus("current")


class _OspfCurCfgAreaMetric_Type(Integer32):
    """Custom type ospfCurCfgAreaMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfCurCfgAreaMetric_Type.__name__ = "Integer32"
_OspfCurCfgAreaMetric_Object = MibTableColumn
ospfCurCfgAreaMetric = _OspfCurCfgAreaMetric_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 2, 1, 6),
    _OspfCurCfgAreaMetric_Type()
)
ospfCurCfgAreaMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgAreaMetric.setStatus("current")


class _OspfCurCfgAreaStatus_Type(Integer32):
    """Custom type ospfCurCfgAreaStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_OspfCurCfgAreaStatus_Type.__name__ = "Integer32"
_OspfCurCfgAreaStatus_Object = MibTableColumn
ospfCurCfgAreaStatus = _OspfCurCfgAreaStatus_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 2, 1, 7),
    _OspfCurCfgAreaStatus_Type()
)
ospfCurCfgAreaStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgAreaStatus.setStatus("current")
_OspfNewCfgAreaTable_Object = MibTable
ospfNewCfgAreaTable = _OspfNewCfgAreaTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 3)
)
if mibBuilder.loadTexts:
    ospfNewCfgAreaTable.setStatus("current")
_OspfNewCfgAreaEntry_Object = MibTableRow
ospfNewCfgAreaEntry = _OspfNewCfgAreaEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 3, 1)
)
ospfNewCfgAreaEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ospfNewCfgAreaIndex"),
)
if mibBuilder.loadTexts:
    ospfNewCfgAreaEntry.setStatus("current")
_OspfNewCfgAreaIndex_Type = Integer32
_OspfNewCfgAreaIndex_Object = MibTableColumn
ospfNewCfgAreaIndex = _OspfNewCfgAreaIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 3, 1, 1),
    _OspfNewCfgAreaIndex_Type()
)
ospfNewCfgAreaIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNewCfgAreaIndex.setStatus("current")
_OspfNewCfgAreaId_Type = IpAddress
_OspfNewCfgAreaId_Object = MibTableColumn
ospfNewCfgAreaId = _OspfNewCfgAreaId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 3, 1, 2),
    _OspfNewCfgAreaId_Type()
)
ospfNewCfgAreaId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgAreaId.setStatus("current")


class _OspfNewCfgAreaSpfInterval_Type(Integer32):
    """Custom type ospfNewCfgAreaSpfInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_OspfNewCfgAreaSpfInterval_Type.__name__ = "Integer32"
_OspfNewCfgAreaSpfInterval_Object = MibTableColumn
ospfNewCfgAreaSpfInterval = _OspfNewCfgAreaSpfInterval_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 3, 1, 3),
    _OspfNewCfgAreaSpfInterval_Type()
)
ospfNewCfgAreaSpfInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgAreaSpfInterval.setStatus("current")


class _OspfNewCfgAreaAuthType_Type(Integer32):
    """Custom type ospfNewCfgAreaAuthType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("password", 2),
          ("md5", 3))
    )


_OspfNewCfgAreaAuthType_Type.__name__ = "Integer32"
_OspfNewCfgAreaAuthType_Object = MibTableColumn
ospfNewCfgAreaAuthType = _OspfNewCfgAreaAuthType_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 3, 1, 4),
    _OspfNewCfgAreaAuthType_Type()
)
ospfNewCfgAreaAuthType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgAreaAuthType.setStatus("current")


class _OspfNewCfgAreaType_Type(Integer32):
    """Custom type ospfNewCfgAreaType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("transit", 0),
          ("stub", 1),
          ("nssa", 2))
    )


_OspfNewCfgAreaType_Type.__name__ = "Integer32"
_OspfNewCfgAreaType_Object = MibTableColumn
ospfNewCfgAreaType = _OspfNewCfgAreaType_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 3, 1, 5),
    _OspfNewCfgAreaType_Type()
)
ospfNewCfgAreaType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgAreaType.setStatus("current")


class _OspfNewCfgAreaMetric_Type(Integer32):
    """Custom type ospfNewCfgAreaMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfNewCfgAreaMetric_Type.__name__ = "Integer32"
_OspfNewCfgAreaMetric_Object = MibTableColumn
ospfNewCfgAreaMetric = _OspfNewCfgAreaMetric_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 3, 1, 6),
    _OspfNewCfgAreaMetric_Type()
)
ospfNewCfgAreaMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgAreaMetric.setStatus("current")


class _OspfNewCfgAreaStatus_Type(Integer32):
    """Custom type ospfNewCfgAreaStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_OspfNewCfgAreaStatus_Type.__name__ = "Integer32"
_OspfNewCfgAreaStatus_Object = MibTableColumn
ospfNewCfgAreaStatus = _OspfNewCfgAreaStatus_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 3, 1, 7),
    _OspfNewCfgAreaStatus_Type()
)
ospfNewCfgAreaStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgAreaStatus.setStatus("current")


class _OspfNewCfgAreaDelete_Type(Integer32):
    """Custom type ospfNewCfgAreaDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_OspfNewCfgAreaDelete_Type.__name__ = "Integer32"
_OspfNewCfgAreaDelete_Object = MibTableColumn
ospfNewCfgAreaDelete = _OspfNewCfgAreaDelete_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 3, 1, 8),
    _OspfNewCfgAreaDelete_Type()
)
ospfNewCfgAreaDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgAreaDelete.setStatus("current")
_OspfRouteRedistribution_ObjectIdentity = ObjectIdentity
ospfRouteRedistribution = _OspfRouteRedistribution_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 4)
)
_OspfRedistributeStatic_ObjectIdentity = ObjectIdentity
ospfRedistributeStatic = _OspfRedistributeStatic_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 4, 1)
)


class _OspfCurCfgStaticMetric_Type(Integer32):
    """Custom type ospfCurCfgStaticMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777214),
    )


_OspfCurCfgStaticMetric_Type.__name__ = "Integer32"
_OspfCurCfgStaticMetric_Object = MibScalar
ospfCurCfgStaticMetric = _OspfCurCfgStaticMetric_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 4, 1, 1),
    _OspfCurCfgStaticMetric_Type()
)
ospfCurCfgStaticMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgStaticMetric.setStatus("current")


class _OspfNewCfgStaticMetric_Type(Integer32):
    """Custom type ospfNewCfgStaticMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777214),
    )


_OspfNewCfgStaticMetric_Type.__name__ = "Integer32"
_OspfNewCfgStaticMetric_Object = MibScalar
ospfNewCfgStaticMetric = _OspfNewCfgStaticMetric_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 4, 1, 2),
    _OspfNewCfgStaticMetric_Type()
)
ospfNewCfgStaticMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgStaticMetric.setStatus("current")


class _OspfCurCfgStaticMetricType_Type(Integer32):
    """Custom type ospfCurCfgStaticMetricType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("type1", 2),
          ("type2", 3))
    )


_OspfCurCfgStaticMetricType_Type.__name__ = "Integer32"
_OspfCurCfgStaticMetricType_Object = MibScalar
ospfCurCfgStaticMetricType = _OspfCurCfgStaticMetricType_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 4, 1, 3),
    _OspfCurCfgStaticMetricType_Type()
)
ospfCurCfgStaticMetricType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgStaticMetricType.setStatus("current")


class _OspfNewCfgStaticMetricType_Type(Integer32):
    """Custom type ospfNewCfgStaticMetricType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("type1", 2),
          ("type2", 3))
    )


_OspfNewCfgStaticMetricType_Type.__name__ = "Integer32"
_OspfNewCfgStaticMetricType_Object = MibScalar
ospfNewCfgStaticMetricType = _OspfNewCfgStaticMetricType_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 4, 1, 4),
    _OspfNewCfgStaticMetricType_Type()
)
ospfNewCfgStaticMetricType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgStaticMetricType.setStatus("current")
_OspfCurCfgStaticOutRmapList_Type = OctetString
_OspfCurCfgStaticOutRmapList_Object = MibScalar
ospfCurCfgStaticOutRmapList = _OspfCurCfgStaticOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 4, 1, 5),
    _OspfCurCfgStaticOutRmapList_Type()
)
ospfCurCfgStaticOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgStaticOutRmapList.setStatus("current")
_OspfNewCfgStaticOutRmapList_Type = OctetString
_OspfNewCfgStaticOutRmapList_Object = MibScalar
ospfNewCfgStaticOutRmapList = _OspfNewCfgStaticOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 4, 1, 6),
    _OspfNewCfgStaticOutRmapList_Type()
)
ospfNewCfgStaticOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNewCfgStaticOutRmapList.setStatus("current")
_OspfNewCfgStaticAddOutRmap_Type = Integer32
_OspfNewCfgStaticAddOutRmap_Object = MibScalar
ospfNewCfgStaticAddOutRmap = _OspfNewCfgStaticAddOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 4, 1, 7),
    _OspfNewCfgStaticAddOutRmap_Type()
)
ospfNewCfgStaticAddOutRmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgStaticAddOutRmap.setStatus("current")
_OspfNewCfgStaticRemoveOutRmap_Type = Integer32
_OspfNewCfgStaticRemoveOutRmap_Object = MibScalar
ospfNewCfgStaticRemoveOutRmap = _OspfNewCfgStaticRemoveOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 4, 1, 8),
    _OspfNewCfgStaticRemoveOutRmap_Type()
)
ospfNewCfgStaticRemoveOutRmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgStaticRemoveOutRmap.setStatus("current")
_OspfRedistributeFixed_ObjectIdentity = ObjectIdentity
ospfRedistributeFixed = _OspfRedistributeFixed_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 4, 4)
)


class _OspfCurCfgFixedMetric_Type(Integer32):
    """Custom type ospfCurCfgFixedMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777214),
    )


_OspfCurCfgFixedMetric_Type.__name__ = "Integer32"
_OspfCurCfgFixedMetric_Object = MibScalar
ospfCurCfgFixedMetric = _OspfCurCfgFixedMetric_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 4, 4, 1),
    _OspfCurCfgFixedMetric_Type()
)
ospfCurCfgFixedMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgFixedMetric.setStatus("current")


class _OspfNewCfgFixedMetric_Type(Integer32):
    """Custom type ospfNewCfgFixedMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777214),
    )


_OspfNewCfgFixedMetric_Type.__name__ = "Integer32"
_OspfNewCfgFixedMetric_Object = MibScalar
ospfNewCfgFixedMetric = _OspfNewCfgFixedMetric_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 4, 4, 2),
    _OspfNewCfgFixedMetric_Type()
)
ospfNewCfgFixedMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgFixedMetric.setStatus("current")


class _OspfCurCfgFixedMetricType_Type(Integer32):
    """Custom type ospfCurCfgFixedMetricType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("type1", 2),
          ("type2", 3))
    )


_OspfCurCfgFixedMetricType_Type.__name__ = "Integer32"
_OspfCurCfgFixedMetricType_Object = MibScalar
ospfCurCfgFixedMetricType = _OspfCurCfgFixedMetricType_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 4, 4, 3),
    _OspfCurCfgFixedMetricType_Type()
)
ospfCurCfgFixedMetricType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgFixedMetricType.setStatus("current")


class _OspfNewCfgFixedMetricType_Type(Integer32):
    """Custom type ospfNewCfgFixedMetricType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("type1", 2),
          ("type2", 3))
    )


_OspfNewCfgFixedMetricType_Type.__name__ = "Integer32"
_OspfNewCfgFixedMetricType_Object = MibScalar
ospfNewCfgFixedMetricType = _OspfNewCfgFixedMetricType_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 4, 4, 4),
    _OspfNewCfgFixedMetricType_Type()
)
ospfNewCfgFixedMetricType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgFixedMetricType.setStatus("current")
_OspfCurCfgFixedOutRmapList_Type = OctetString
_OspfCurCfgFixedOutRmapList_Object = MibScalar
ospfCurCfgFixedOutRmapList = _OspfCurCfgFixedOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 4, 4, 5),
    _OspfCurCfgFixedOutRmapList_Type()
)
ospfCurCfgFixedOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgFixedOutRmapList.setStatus("current")
_OspfNewCfgFixedOutRmapList_Type = OctetString
_OspfNewCfgFixedOutRmapList_Object = MibScalar
ospfNewCfgFixedOutRmapList = _OspfNewCfgFixedOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 4, 4, 6),
    _OspfNewCfgFixedOutRmapList_Type()
)
ospfNewCfgFixedOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNewCfgFixedOutRmapList.setStatus("current")
_OspfNewCfgFixedAddOutRmap_Type = Integer32
_OspfNewCfgFixedAddOutRmap_Object = MibScalar
ospfNewCfgFixedAddOutRmap = _OspfNewCfgFixedAddOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 4, 4, 7),
    _OspfNewCfgFixedAddOutRmap_Type()
)
ospfNewCfgFixedAddOutRmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgFixedAddOutRmap.setStatus("current")
_OspfNewCfgFixedRemoveOutRmap_Type = Integer32
_OspfNewCfgFixedRemoveOutRmap_Object = MibScalar
ospfNewCfgFixedRemoveOutRmap = _OspfNewCfgFixedRemoveOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 4, 4, 8),
    _OspfNewCfgFixedRemoveOutRmap_Type()
)
ospfNewCfgFixedRemoveOutRmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgFixedRemoveOutRmap.setStatus("current")
_OspfRedistributeRip_ObjectIdentity = ObjectIdentity
ospfRedistributeRip = _OspfRedistributeRip_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 4, 5)
)


class _OspfCurCfgRipMetric_Type(Integer32):
    """Custom type ospfCurCfgRipMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777214),
    )


_OspfCurCfgRipMetric_Type.__name__ = "Integer32"
_OspfCurCfgRipMetric_Object = MibScalar
ospfCurCfgRipMetric = _OspfCurCfgRipMetric_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 4, 5, 1),
    _OspfCurCfgRipMetric_Type()
)
ospfCurCfgRipMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgRipMetric.setStatus("current")


class _OspfNewCfgRipMetric_Type(Integer32):
    """Custom type ospfNewCfgRipMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777214),
    )


_OspfNewCfgRipMetric_Type.__name__ = "Integer32"
_OspfNewCfgRipMetric_Object = MibScalar
ospfNewCfgRipMetric = _OspfNewCfgRipMetric_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 4, 5, 2),
    _OspfNewCfgRipMetric_Type()
)
ospfNewCfgRipMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgRipMetric.setStatus("current")


class _OspfCurCfgRipMetricType_Type(Integer32):
    """Custom type ospfCurCfgRipMetricType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("type1", 2),
          ("type2", 3))
    )


_OspfCurCfgRipMetricType_Type.__name__ = "Integer32"
_OspfCurCfgRipMetricType_Object = MibScalar
ospfCurCfgRipMetricType = _OspfCurCfgRipMetricType_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 4, 5, 3),
    _OspfCurCfgRipMetricType_Type()
)
ospfCurCfgRipMetricType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgRipMetricType.setStatus("current")


class _OspfNewCfgRipMetricType_Type(Integer32):
    """Custom type ospfNewCfgRipMetricType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("type1", 2),
          ("type2", 3))
    )


_OspfNewCfgRipMetricType_Type.__name__ = "Integer32"
_OspfNewCfgRipMetricType_Object = MibScalar
ospfNewCfgRipMetricType = _OspfNewCfgRipMetricType_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 4, 5, 4),
    _OspfNewCfgRipMetricType_Type()
)
ospfNewCfgRipMetricType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgRipMetricType.setStatus("current")
_OspfCurCfgRipOutRmapList_Type = OctetString
_OspfCurCfgRipOutRmapList_Object = MibScalar
ospfCurCfgRipOutRmapList = _OspfCurCfgRipOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 4, 5, 5),
    _OspfCurCfgRipOutRmapList_Type()
)
ospfCurCfgRipOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgRipOutRmapList.setStatus("current")
_OspfNewCfgRipOutRmapList_Type = OctetString
_OspfNewCfgRipOutRmapList_Object = MibScalar
ospfNewCfgRipOutRmapList = _OspfNewCfgRipOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 4, 5, 6),
    _OspfNewCfgRipOutRmapList_Type()
)
ospfNewCfgRipOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNewCfgRipOutRmapList.setStatus("current")
_OspfNewCfgRipAddOutRmap_Type = Integer32
_OspfNewCfgRipAddOutRmap_Object = MibScalar
ospfNewCfgRipAddOutRmap = _OspfNewCfgRipAddOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 4, 5, 7),
    _OspfNewCfgRipAddOutRmap_Type()
)
ospfNewCfgRipAddOutRmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgRipAddOutRmap.setStatus("current")
_OspfNewCfgRipRemoveOutRmap_Type = Integer32
_OspfNewCfgRipRemoveOutRmap_Object = MibScalar
ospfNewCfgRipRemoveOutRmap = _OspfNewCfgRipRemoveOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 4, 5, 8),
    _OspfNewCfgRipRemoveOutRmap_Type()
)
ospfNewCfgRipRemoveOutRmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgRipRemoveOutRmap.setStatus("current")
_OspfCurCfgMdkeyTable_Object = MibTable
ospfCurCfgMdkeyTable = _OspfCurCfgMdkeyTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 5)
)
if mibBuilder.loadTexts:
    ospfCurCfgMdkeyTable.setStatus("current")
_OspfCurCfgMdkeyEntry_Object = MibTableRow
ospfCurCfgMdkeyEntry = _OspfCurCfgMdkeyEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 5, 1)
)
ospfCurCfgMdkeyEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ospfCurCfgMdkeyIndex"),
)
if mibBuilder.loadTexts:
    ospfCurCfgMdkeyEntry.setStatus("current")
_OspfCurCfgMdkeyIndex_Type = Integer32
_OspfCurCfgMdkeyIndex_Object = MibTableColumn
ospfCurCfgMdkeyIndex = _OspfCurCfgMdkeyIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 5, 1, 1),
    _OspfCurCfgMdkeyIndex_Type()
)
ospfCurCfgMdkeyIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgMdkeyIndex.setStatus("current")


class _OspfCurCfgMdkeyKey_Type(DisplayString):
    """Custom type ospfCurCfgMdkeyKey based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_OspfCurCfgMdkeyKey_Type.__name__ = "DisplayString"
_OspfCurCfgMdkeyKey_Object = MibTableColumn
ospfCurCfgMdkeyKey = _OspfCurCfgMdkeyKey_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 5, 1, 2),
    _OspfCurCfgMdkeyKey_Type()
)
ospfCurCfgMdkeyKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgMdkeyKey.setStatus("current")
_OspfNewCfgMdkeyTable_Object = MibTable
ospfNewCfgMdkeyTable = _OspfNewCfgMdkeyTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 6)
)
if mibBuilder.loadTexts:
    ospfNewCfgMdkeyTable.setStatus("current")
_OspfNewCfgMdkeyEntry_Object = MibTableRow
ospfNewCfgMdkeyEntry = _OspfNewCfgMdkeyEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 6, 1)
)
ospfNewCfgMdkeyEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ospfNewCfgMdkeyIndex"),
)
if mibBuilder.loadTexts:
    ospfNewCfgMdkeyEntry.setStatus("current")
_OspfNewCfgMdkeyIndex_Type = Integer32
_OspfNewCfgMdkeyIndex_Object = MibTableColumn
ospfNewCfgMdkeyIndex = _OspfNewCfgMdkeyIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 6, 1, 1),
    _OspfNewCfgMdkeyIndex_Type()
)
ospfNewCfgMdkeyIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNewCfgMdkeyIndex.setStatus("current")


class _OspfNewCfgMdkeyKey_Type(DisplayString):
    """Custom type ospfNewCfgMdkeyKey based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_OspfNewCfgMdkeyKey_Type.__name__ = "DisplayString"
_OspfNewCfgMdkeyKey_Object = MibTableColumn
ospfNewCfgMdkeyKey = _OspfNewCfgMdkeyKey_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 6, 1, 2),
    _OspfNewCfgMdkeyKey_Type()
)
ospfNewCfgMdkeyKey.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgMdkeyKey.setStatus("current")


class _OspfNewCfgMdkeyDelete_Type(Integer32):
    """Custom type ospfNewCfgMdkeyDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_OspfNewCfgMdkeyDelete_Type.__name__ = "Integer32"
_OspfNewCfgMdkeyDelete_Object = MibTableColumn
ospfNewCfgMdkeyDelete = _OspfNewCfgMdkeyDelete_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 6, 1, 3),
    _OspfNewCfgMdkeyDelete_Type()
)
ospfNewCfgMdkeyDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgMdkeyDelete.setStatus("current")
_OspfCurCfgIntfTable_Object = MibTable
ospfCurCfgIntfTable = _OspfCurCfgIntfTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 7)
)
if mibBuilder.loadTexts:
    ospfCurCfgIntfTable.setStatus("current")
_OspfCurCfgIntfEntry_Object = MibTableRow
ospfCurCfgIntfEntry = _OspfCurCfgIntfEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 7, 1)
)
ospfCurCfgIntfEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ospfCurCfgIntfIndex"),
)
if mibBuilder.loadTexts:
    ospfCurCfgIntfEntry.setStatus("current")
_OspfCurCfgIntfIndex_Type = Integer32
_OspfCurCfgIntfIndex_Object = MibTableColumn
ospfCurCfgIntfIndex = _OspfCurCfgIntfIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 7, 1, 1),
    _OspfCurCfgIntfIndex_Type()
)
ospfCurCfgIntfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgIntfIndex.setStatus("current")
_OspfCurCfgIntfId_Type = IpAddress
_OspfCurCfgIntfId_Object = MibTableColumn
ospfCurCfgIntfId = _OspfCurCfgIntfId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 7, 1, 2),
    _OspfCurCfgIntfId_Type()
)
ospfCurCfgIntfId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgIntfId.setStatus("current")


class _OspfCurCfgIntfArea_Type(Integer32):
    """Custom type ospfCurCfgIntfArea based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2),
    )


_OspfCurCfgIntfArea_Type.__name__ = "Integer32"
_OspfCurCfgIntfArea_Object = MibTableColumn
ospfCurCfgIntfArea = _OspfCurCfgIntfArea_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 7, 1, 3),
    _OspfCurCfgIntfArea_Type()
)
ospfCurCfgIntfArea.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgIntfArea.setStatus("current")


class _OspfCurCfgIntfMdkey_Type(Integer32):
    """Custom type ospfCurCfgIntfMdkey based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_OspfCurCfgIntfMdkey_Type.__name__ = "Integer32"
_OspfCurCfgIntfMdkey_Object = MibTableColumn
ospfCurCfgIntfMdkey = _OspfCurCfgIntfMdkey_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 7, 1, 4),
    _OspfCurCfgIntfMdkey_Type()
)
ospfCurCfgIntfMdkey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgIntfMdkey.setStatus("current")


class _OspfCurCfgIntfCost_Type(Integer32):
    """Custom type ospfCurCfgIntfCost based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfCurCfgIntfCost_Type.__name__ = "Integer32"
_OspfCurCfgIntfCost_Object = MibTableColumn
ospfCurCfgIntfCost = _OspfCurCfgIntfCost_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 7, 1, 5),
    _OspfCurCfgIntfCost_Type()
)
ospfCurCfgIntfCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgIntfCost.setStatus("current")


class _OspfCurCfgIntfPrio_Type(Integer32):
    """Custom type ospfCurCfgIntfPrio based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_OspfCurCfgIntfPrio_Type.__name__ = "Integer32"
_OspfCurCfgIntfPrio_Object = MibTableColumn
ospfCurCfgIntfPrio = _OspfCurCfgIntfPrio_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 7, 1, 6),
    _OspfCurCfgIntfPrio_Type()
)
ospfCurCfgIntfPrio.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgIntfPrio.setStatus("current")


class _OspfCurCfgIntfHello_Type(Integer32):
    """Custom type ospfCurCfgIntfHello based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfCurCfgIntfHello_Type.__name__ = "Integer32"
_OspfCurCfgIntfHello_Object = MibTableColumn
ospfCurCfgIntfHello = _OspfCurCfgIntfHello_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 7, 1, 7),
    _OspfCurCfgIntfHello_Type()
)
ospfCurCfgIntfHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgIntfHello.setStatus("current")


class _OspfCurCfgIntfDead_Type(Integer32):
    """Custom type ospfCurCfgIntfDead based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfCurCfgIntfDead_Type.__name__ = "Integer32"
_OspfCurCfgIntfDead_Object = MibTableColumn
ospfCurCfgIntfDead = _OspfCurCfgIntfDead_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 7, 1, 8),
    _OspfCurCfgIntfDead_Type()
)
ospfCurCfgIntfDead.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgIntfDead.setStatus("current")


class _OspfCurCfgIntfTrans_Type(Integer32):
    """Custom type ospfCurCfgIntfTrans based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_OspfCurCfgIntfTrans_Type.__name__ = "Integer32"
_OspfCurCfgIntfTrans_Object = MibTableColumn
ospfCurCfgIntfTrans = _OspfCurCfgIntfTrans_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 7, 1, 9),
    _OspfCurCfgIntfTrans_Type()
)
ospfCurCfgIntfTrans.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgIntfTrans.setStatus("current")


class _OspfCurCfgIntfRetra_Type(Integer32):
    """Custom type ospfCurCfgIntfRetra based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_OspfCurCfgIntfRetra_Type.__name__ = "Integer32"
_OspfCurCfgIntfRetra_Object = MibTableColumn
ospfCurCfgIntfRetra = _OspfCurCfgIntfRetra_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 7, 1, 10),
    _OspfCurCfgIntfRetra_Type()
)
ospfCurCfgIntfRetra.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgIntfRetra.setStatus("current")


class _OspfCurCfgIntfAuthKey_Type(DisplayString):
    """Custom type ospfCurCfgIntfAuthKey based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_OspfCurCfgIntfAuthKey_Type.__name__ = "DisplayString"
_OspfCurCfgIntfAuthKey_Object = MibTableColumn
ospfCurCfgIntfAuthKey = _OspfCurCfgIntfAuthKey_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 7, 1, 11),
    _OspfCurCfgIntfAuthKey_Type()
)
ospfCurCfgIntfAuthKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgIntfAuthKey.setStatus("current")


class _OspfCurCfgIntfStatus_Type(Integer32):
    """Custom type ospfCurCfgIntfStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_OspfCurCfgIntfStatus_Type.__name__ = "Integer32"
_OspfCurCfgIntfStatus_Object = MibTableColumn
ospfCurCfgIntfStatus = _OspfCurCfgIntfStatus_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 7, 1, 12),
    _OspfCurCfgIntfStatus_Type()
)
ospfCurCfgIntfStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgIntfStatus.setStatus("current")
_OspfNewCfgIntfTable_Object = MibTable
ospfNewCfgIntfTable = _OspfNewCfgIntfTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 8)
)
if mibBuilder.loadTexts:
    ospfNewCfgIntfTable.setStatus("current")
_OspfNewCfgIntfEntry_Object = MibTableRow
ospfNewCfgIntfEntry = _OspfNewCfgIntfEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 8, 1)
)
ospfNewCfgIntfEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ospfNewCfgIntfIndex"),
)
if mibBuilder.loadTexts:
    ospfNewCfgIntfEntry.setStatus("current")
_OspfNewCfgIntfIndex_Type = Integer32
_OspfNewCfgIntfIndex_Object = MibTableColumn
ospfNewCfgIntfIndex = _OspfNewCfgIntfIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 8, 1, 1),
    _OspfNewCfgIntfIndex_Type()
)
ospfNewCfgIntfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNewCfgIntfIndex.setStatus("current")
_OspfNewCfgIntfId_Type = IpAddress
_OspfNewCfgIntfId_Object = MibTableColumn
ospfNewCfgIntfId = _OspfNewCfgIntfId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 8, 1, 2),
    _OspfNewCfgIntfId_Type()
)
ospfNewCfgIntfId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNewCfgIntfId.setStatus("current")


class _OspfNewCfgIntfArea_Type(Integer32):
    """Custom type ospfNewCfgIntfArea based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2),
    )


_OspfNewCfgIntfArea_Type.__name__ = "Integer32"
_OspfNewCfgIntfArea_Object = MibTableColumn
ospfNewCfgIntfArea = _OspfNewCfgIntfArea_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 8, 1, 3),
    _OspfNewCfgIntfArea_Type()
)
ospfNewCfgIntfArea.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgIntfArea.setStatus("current")


class _OspfNewCfgIntfMdkey_Type(Integer32):
    """Custom type ospfNewCfgIntfMdkey based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_OspfNewCfgIntfMdkey_Type.__name__ = "Integer32"
_OspfNewCfgIntfMdkey_Object = MibTableColumn
ospfNewCfgIntfMdkey = _OspfNewCfgIntfMdkey_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 8, 1, 4),
    _OspfNewCfgIntfMdkey_Type()
)
ospfNewCfgIntfMdkey.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgIntfMdkey.setStatus("current")


class _OspfNewCfgIntfCost_Type(Integer32):
    """Custom type ospfNewCfgIntfCost based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfNewCfgIntfCost_Type.__name__ = "Integer32"
_OspfNewCfgIntfCost_Object = MibTableColumn
ospfNewCfgIntfCost = _OspfNewCfgIntfCost_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 8, 1, 5),
    _OspfNewCfgIntfCost_Type()
)
ospfNewCfgIntfCost.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgIntfCost.setStatus("current")


class _OspfNewCfgIntfPrio_Type(Integer32):
    """Custom type ospfNewCfgIntfPrio based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_OspfNewCfgIntfPrio_Type.__name__ = "Integer32"
_OspfNewCfgIntfPrio_Object = MibTableColumn
ospfNewCfgIntfPrio = _OspfNewCfgIntfPrio_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 8, 1, 6),
    _OspfNewCfgIntfPrio_Type()
)
ospfNewCfgIntfPrio.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgIntfPrio.setStatus("current")


class _OspfNewCfgIntfHello_Type(Integer32):
    """Custom type ospfNewCfgIntfHello based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfNewCfgIntfHello_Type.__name__ = "Integer32"
_OspfNewCfgIntfHello_Object = MibTableColumn
ospfNewCfgIntfHello = _OspfNewCfgIntfHello_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 8, 1, 7),
    _OspfNewCfgIntfHello_Type()
)
ospfNewCfgIntfHello.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgIntfHello.setStatus("current")


class _OspfNewCfgIntfDead_Type(Integer32):
    """Custom type ospfNewCfgIntfDead based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfNewCfgIntfDead_Type.__name__ = "Integer32"
_OspfNewCfgIntfDead_Object = MibTableColumn
ospfNewCfgIntfDead = _OspfNewCfgIntfDead_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 8, 1, 8),
    _OspfNewCfgIntfDead_Type()
)
ospfNewCfgIntfDead.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgIntfDead.setStatus("current")


class _OspfNewCfgIntfTrans_Type(Integer32):
    """Custom type ospfNewCfgIntfTrans based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_OspfNewCfgIntfTrans_Type.__name__ = "Integer32"
_OspfNewCfgIntfTrans_Object = MibTableColumn
ospfNewCfgIntfTrans = _OspfNewCfgIntfTrans_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 8, 1, 9),
    _OspfNewCfgIntfTrans_Type()
)
ospfNewCfgIntfTrans.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgIntfTrans.setStatus("current")


class _OspfNewCfgIntfRetra_Type(Integer32):
    """Custom type ospfNewCfgIntfRetra based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_OspfNewCfgIntfRetra_Type.__name__ = "Integer32"
_OspfNewCfgIntfRetra_Object = MibTableColumn
ospfNewCfgIntfRetra = _OspfNewCfgIntfRetra_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 8, 1, 10),
    _OspfNewCfgIntfRetra_Type()
)
ospfNewCfgIntfRetra.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgIntfRetra.setStatus("current")


class _OspfNewCfgIntfAuthKey_Type(DisplayString):
    """Custom type ospfNewCfgIntfAuthKey based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_OspfNewCfgIntfAuthKey_Type.__name__ = "DisplayString"
_OspfNewCfgIntfAuthKey_Object = MibTableColumn
ospfNewCfgIntfAuthKey = _OspfNewCfgIntfAuthKey_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 8, 1, 11),
    _OspfNewCfgIntfAuthKey_Type()
)
ospfNewCfgIntfAuthKey.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgIntfAuthKey.setStatus("current")


class _OspfNewCfgIntfStatus_Type(Integer32):
    """Custom type ospfNewCfgIntfStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_OspfNewCfgIntfStatus_Type.__name__ = "Integer32"
_OspfNewCfgIntfStatus_Object = MibTableColumn
ospfNewCfgIntfStatus = _OspfNewCfgIntfStatus_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 8, 1, 12),
    _OspfNewCfgIntfStatus_Type()
)
ospfNewCfgIntfStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgIntfStatus.setStatus("current")


class _OspfNewCfgIntfDelete_Type(Integer32):
    """Custom type ospfNewCfgIntfDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("other", 0),
          ("delete", 1))
    )


_OspfNewCfgIntfDelete_Type.__name__ = "Integer32"
_OspfNewCfgIntfDelete_Object = MibTableColumn
ospfNewCfgIntfDelete = _OspfNewCfgIntfDelete_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 8, 1, 13),
    _OspfNewCfgIntfDelete_Type()
)
ospfNewCfgIntfDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgIntfDelete.setStatus("current")
_OspfCurCfgVirtIntfTable_Object = MibTable
ospfCurCfgVirtIntfTable = _OspfCurCfgVirtIntfTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 9)
)
if mibBuilder.loadTexts:
    ospfCurCfgVirtIntfTable.setStatus("current")
_OspfCurCfgVirtIntfEntry_Object = MibTableRow
ospfCurCfgVirtIntfEntry = _OspfCurCfgVirtIntfEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 9, 1)
)
ospfCurCfgVirtIntfEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ospfCurCfgVirtIntfIndex"),
)
if mibBuilder.loadTexts:
    ospfCurCfgVirtIntfEntry.setStatus("current")
_OspfCurCfgVirtIntfIndex_Type = Integer32
_OspfCurCfgVirtIntfIndex_Object = MibTableColumn
ospfCurCfgVirtIntfIndex = _OspfCurCfgVirtIntfIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 9, 1, 1),
    _OspfCurCfgVirtIntfIndex_Type()
)
ospfCurCfgVirtIntfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgVirtIntfIndex.setStatus("current")


class _OspfCurCfgVirtIntfAreaId_Type(Integer32):
    """Custom type ospfCurCfgVirtIntfAreaId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2),
    )


_OspfCurCfgVirtIntfAreaId_Type.__name__ = "Integer32"
_OspfCurCfgVirtIntfAreaId_Object = MibTableColumn
ospfCurCfgVirtIntfAreaId = _OspfCurCfgVirtIntfAreaId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 9, 1, 2),
    _OspfCurCfgVirtIntfAreaId_Type()
)
ospfCurCfgVirtIntfAreaId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgVirtIntfAreaId.setStatus("current")
_OspfCurCfgVirtIntfNbr_Type = IpAddress
_OspfCurCfgVirtIntfNbr_Object = MibTableColumn
ospfCurCfgVirtIntfNbr = _OspfCurCfgVirtIntfNbr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 9, 1, 3),
    _OspfCurCfgVirtIntfNbr_Type()
)
ospfCurCfgVirtIntfNbr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgVirtIntfNbr.setStatus("current")


class _OspfCurCfgVirtIntfMdkey_Type(Integer32):
    """Custom type ospfCurCfgVirtIntfMdkey based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_OspfCurCfgVirtIntfMdkey_Type.__name__ = "Integer32"
_OspfCurCfgVirtIntfMdkey_Object = MibTableColumn
ospfCurCfgVirtIntfMdkey = _OspfCurCfgVirtIntfMdkey_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 9, 1, 4),
    _OspfCurCfgVirtIntfMdkey_Type()
)
ospfCurCfgVirtIntfMdkey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgVirtIntfMdkey.setStatus("current")


class _OspfCurCfgVirtIntfHello_Type(Integer32):
    """Custom type ospfCurCfgVirtIntfHello based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfCurCfgVirtIntfHello_Type.__name__ = "Integer32"
_OspfCurCfgVirtIntfHello_Object = MibTableColumn
ospfCurCfgVirtIntfHello = _OspfCurCfgVirtIntfHello_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 9, 1, 5),
    _OspfCurCfgVirtIntfHello_Type()
)
ospfCurCfgVirtIntfHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgVirtIntfHello.setStatus("current")


class _OspfCurCfgVirtIntfDead_Type(Integer32):
    """Custom type ospfCurCfgVirtIntfDead based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfCurCfgVirtIntfDead_Type.__name__ = "Integer32"
_OspfCurCfgVirtIntfDead_Object = MibTableColumn
ospfCurCfgVirtIntfDead = _OspfCurCfgVirtIntfDead_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 9, 1, 6),
    _OspfCurCfgVirtIntfDead_Type()
)
ospfCurCfgVirtIntfDead.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgVirtIntfDead.setStatus("current")


class _OspfCurCfgVirtIntfTrans_Type(Integer32):
    """Custom type ospfCurCfgVirtIntfTrans based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_OspfCurCfgVirtIntfTrans_Type.__name__ = "Integer32"
_OspfCurCfgVirtIntfTrans_Object = MibTableColumn
ospfCurCfgVirtIntfTrans = _OspfCurCfgVirtIntfTrans_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 9, 1, 7),
    _OspfCurCfgVirtIntfTrans_Type()
)
ospfCurCfgVirtIntfTrans.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgVirtIntfTrans.setStatus("current")


class _OspfCurCfgVirtIntfRetra_Type(Integer32):
    """Custom type ospfCurCfgVirtIntfRetra based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_OspfCurCfgVirtIntfRetra_Type.__name__ = "Integer32"
_OspfCurCfgVirtIntfRetra_Object = MibTableColumn
ospfCurCfgVirtIntfRetra = _OspfCurCfgVirtIntfRetra_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 9, 1, 8),
    _OspfCurCfgVirtIntfRetra_Type()
)
ospfCurCfgVirtIntfRetra.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgVirtIntfRetra.setStatus("current")


class _OspfCurCfgVirtIntfAuthKey_Type(DisplayString):
    """Custom type ospfCurCfgVirtIntfAuthKey based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_OspfCurCfgVirtIntfAuthKey_Type.__name__ = "DisplayString"
_OspfCurCfgVirtIntfAuthKey_Object = MibTableColumn
ospfCurCfgVirtIntfAuthKey = _OspfCurCfgVirtIntfAuthKey_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 9, 1, 9),
    _OspfCurCfgVirtIntfAuthKey_Type()
)
ospfCurCfgVirtIntfAuthKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgVirtIntfAuthKey.setStatus("current")


class _OspfCurCfgVirtIntfStatus_Type(Integer32):
    """Custom type ospfCurCfgVirtIntfStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_OspfCurCfgVirtIntfStatus_Type.__name__ = "Integer32"
_OspfCurCfgVirtIntfStatus_Object = MibTableColumn
ospfCurCfgVirtIntfStatus = _OspfCurCfgVirtIntfStatus_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 9, 1, 10),
    _OspfCurCfgVirtIntfStatus_Type()
)
ospfCurCfgVirtIntfStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgVirtIntfStatus.setStatus("current")
_OspfNewCfgVirtIntfTable_Object = MibTable
ospfNewCfgVirtIntfTable = _OspfNewCfgVirtIntfTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 10)
)
if mibBuilder.loadTexts:
    ospfNewCfgVirtIntfTable.setStatus("current")
_OspfNewCfgVirtIntfEntry_Object = MibTableRow
ospfNewCfgVirtIntfEntry = _OspfNewCfgVirtIntfEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 10, 1)
)
ospfNewCfgVirtIntfEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ospfNewCfgVirtIntfIndex"),
)
if mibBuilder.loadTexts:
    ospfNewCfgVirtIntfEntry.setStatus("current")
_OspfNewCfgVirtIntfIndex_Type = Integer32
_OspfNewCfgVirtIntfIndex_Object = MibTableColumn
ospfNewCfgVirtIntfIndex = _OspfNewCfgVirtIntfIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 10, 1, 1),
    _OspfNewCfgVirtIntfIndex_Type()
)
ospfNewCfgVirtIntfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNewCfgVirtIntfIndex.setStatus("current")


class _OspfNewCfgVirtIntfAreaId_Type(Integer32):
    """Custom type ospfNewCfgVirtIntfAreaId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2),
    )


_OspfNewCfgVirtIntfAreaId_Type.__name__ = "Integer32"
_OspfNewCfgVirtIntfAreaId_Object = MibTableColumn
ospfNewCfgVirtIntfAreaId = _OspfNewCfgVirtIntfAreaId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 10, 1, 2),
    _OspfNewCfgVirtIntfAreaId_Type()
)
ospfNewCfgVirtIntfAreaId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgVirtIntfAreaId.setStatus("current")
_OspfNewCfgVirtIntfNbr_Type = IpAddress
_OspfNewCfgVirtIntfNbr_Object = MibTableColumn
ospfNewCfgVirtIntfNbr = _OspfNewCfgVirtIntfNbr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 10, 1, 3),
    _OspfNewCfgVirtIntfNbr_Type()
)
ospfNewCfgVirtIntfNbr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgVirtIntfNbr.setStatus("current")


class _OspfNewCfgVirtIntfMdkey_Type(Integer32):
    """Custom type ospfNewCfgVirtIntfMdkey based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_OspfNewCfgVirtIntfMdkey_Type.__name__ = "Integer32"
_OspfNewCfgVirtIntfMdkey_Object = MibTableColumn
ospfNewCfgVirtIntfMdkey = _OspfNewCfgVirtIntfMdkey_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 10, 1, 4),
    _OspfNewCfgVirtIntfMdkey_Type()
)
ospfNewCfgVirtIntfMdkey.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgVirtIntfMdkey.setStatus("current")


class _OspfNewCfgVirtIntfHello_Type(Integer32):
    """Custom type ospfNewCfgVirtIntfHello based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfNewCfgVirtIntfHello_Type.__name__ = "Integer32"
_OspfNewCfgVirtIntfHello_Object = MibTableColumn
ospfNewCfgVirtIntfHello = _OspfNewCfgVirtIntfHello_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 10, 1, 5),
    _OspfNewCfgVirtIntfHello_Type()
)
ospfNewCfgVirtIntfHello.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgVirtIntfHello.setStatus("current")


class _OspfNewCfgVirtIntfDead_Type(Integer32):
    """Custom type ospfNewCfgVirtIntfDead based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfNewCfgVirtIntfDead_Type.__name__ = "Integer32"
_OspfNewCfgVirtIntfDead_Object = MibTableColumn
ospfNewCfgVirtIntfDead = _OspfNewCfgVirtIntfDead_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 10, 1, 6),
    _OspfNewCfgVirtIntfDead_Type()
)
ospfNewCfgVirtIntfDead.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgVirtIntfDead.setStatus("current")


class _OspfNewCfgVirtIntfTrans_Type(Integer32):
    """Custom type ospfNewCfgVirtIntfTrans based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_OspfNewCfgVirtIntfTrans_Type.__name__ = "Integer32"
_OspfNewCfgVirtIntfTrans_Object = MibTableColumn
ospfNewCfgVirtIntfTrans = _OspfNewCfgVirtIntfTrans_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 10, 1, 7),
    _OspfNewCfgVirtIntfTrans_Type()
)
ospfNewCfgVirtIntfTrans.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgVirtIntfTrans.setStatus("current")


class _OspfNewCfgVirtIntfRetra_Type(Integer32):
    """Custom type ospfNewCfgVirtIntfRetra based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_OspfNewCfgVirtIntfRetra_Type.__name__ = "Integer32"
_OspfNewCfgVirtIntfRetra_Object = MibTableColumn
ospfNewCfgVirtIntfRetra = _OspfNewCfgVirtIntfRetra_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 10, 1, 8),
    _OspfNewCfgVirtIntfRetra_Type()
)
ospfNewCfgVirtIntfRetra.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgVirtIntfRetra.setStatus("current")


class _OspfNewCfgVirtIntfAuthKey_Type(DisplayString):
    """Custom type ospfNewCfgVirtIntfAuthKey based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_OspfNewCfgVirtIntfAuthKey_Type.__name__ = "DisplayString"
_OspfNewCfgVirtIntfAuthKey_Object = MibTableColumn
ospfNewCfgVirtIntfAuthKey = _OspfNewCfgVirtIntfAuthKey_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 10, 1, 9),
    _OspfNewCfgVirtIntfAuthKey_Type()
)
ospfNewCfgVirtIntfAuthKey.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgVirtIntfAuthKey.setStatus("current")


class _OspfNewCfgVirtIntfStatus_Type(Integer32):
    """Custom type ospfNewCfgVirtIntfStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_OspfNewCfgVirtIntfStatus_Type.__name__ = "Integer32"
_OspfNewCfgVirtIntfStatus_Object = MibTableColumn
ospfNewCfgVirtIntfStatus = _OspfNewCfgVirtIntfStatus_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 10, 1, 10),
    _OspfNewCfgVirtIntfStatus_Type()
)
ospfNewCfgVirtIntfStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgVirtIntfStatus.setStatus("current")


class _OspfNewCfgVirtIntfDelete_Type(Integer32):
    """Custom type ospfNewCfgVirtIntfDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("other", 0),
          ("delete", 1))
    )


_OspfNewCfgVirtIntfDelete_Type.__name__ = "Integer32"
_OspfNewCfgVirtIntfDelete_Object = MibTableColumn
ospfNewCfgVirtIntfDelete = _OspfNewCfgVirtIntfDelete_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 10, 1, 11),
    _OspfNewCfgVirtIntfDelete_Type()
)
ospfNewCfgVirtIntfDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgVirtIntfDelete.setStatus("current")
_OspfMdkeyTableMaxSize_Type = Integer32
_OspfMdkeyTableMaxSize_Object = MibScalar
ospfMdkeyTableMaxSize = _OspfMdkeyTableMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 11),
    _OspfMdkeyTableMaxSize_Type()
)
ospfMdkeyTableMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfMdkeyTableMaxSize.setStatus("current")
_OspfCurCfgHostTable_Object = MibTable
ospfCurCfgHostTable = _OspfCurCfgHostTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 12)
)
if mibBuilder.loadTexts:
    ospfCurCfgHostTable.setStatus("current")
_OspfCurCfgHostEntry_Object = MibTableRow
ospfCurCfgHostEntry = _OspfCurCfgHostEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 12, 1)
)
ospfCurCfgHostEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ospfCurCfgHostIndex"),
)
if mibBuilder.loadTexts:
    ospfCurCfgHostEntry.setStatus("current")
_OspfCurCfgHostIndex_Type = Integer32
_OspfCurCfgHostIndex_Object = MibTableColumn
ospfCurCfgHostIndex = _OspfCurCfgHostIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 12, 1, 1),
    _OspfCurCfgHostIndex_Type()
)
ospfCurCfgHostIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgHostIndex.setStatus("current")
_OspfCurCfgHostIpAddr_Type = IpAddress
_OspfCurCfgHostIpAddr_Object = MibTableColumn
ospfCurCfgHostIpAddr = _OspfCurCfgHostIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 12, 1, 2),
    _OspfCurCfgHostIpAddr_Type()
)
ospfCurCfgHostIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgHostIpAddr.setStatus("current")
_OspfCurCfgHostAreaIndex_Type = Integer32
_OspfCurCfgHostAreaIndex_Object = MibTableColumn
ospfCurCfgHostAreaIndex = _OspfCurCfgHostAreaIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 12, 1, 3),
    _OspfCurCfgHostAreaIndex_Type()
)
ospfCurCfgHostAreaIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgHostAreaIndex.setStatus("current")


class _OspfCurCfgHostCost_Type(Integer32):
    """Custom type ospfCurCfgHostCost based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfCurCfgHostCost_Type.__name__ = "Integer32"
_OspfCurCfgHostCost_Object = MibTableColumn
ospfCurCfgHostCost = _OspfCurCfgHostCost_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 12, 1, 4),
    _OspfCurCfgHostCost_Type()
)
ospfCurCfgHostCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgHostCost.setStatus("current")


class _OspfCurCfgHostState_Type(Integer32):
    """Custom type ospfCurCfgHostState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_OspfCurCfgHostState_Type.__name__ = "Integer32"
_OspfCurCfgHostState_Object = MibTableColumn
ospfCurCfgHostState = _OspfCurCfgHostState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 12, 1, 5),
    _OspfCurCfgHostState_Type()
)
ospfCurCfgHostState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgHostState.setStatus("current")
_OspfNewCfgHostTable_Object = MibTable
ospfNewCfgHostTable = _OspfNewCfgHostTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 13)
)
if mibBuilder.loadTexts:
    ospfNewCfgHostTable.setStatus("current")
_OspfNewCfgHostEntry_Object = MibTableRow
ospfNewCfgHostEntry = _OspfNewCfgHostEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 13, 1)
)
ospfNewCfgHostEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ospfNewCfgHostIndex"),
)
if mibBuilder.loadTexts:
    ospfNewCfgHostEntry.setStatus("current")
_OspfNewCfgHostIndex_Type = Integer32
_OspfNewCfgHostIndex_Object = MibTableColumn
ospfNewCfgHostIndex = _OspfNewCfgHostIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 13, 1, 1),
    _OspfNewCfgHostIndex_Type()
)
ospfNewCfgHostIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNewCfgHostIndex.setStatus("current")
_OspfNewCfgHostIpAddr_Type = IpAddress
_OspfNewCfgHostIpAddr_Object = MibTableColumn
ospfNewCfgHostIpAddr = _OspfNewCfgHostIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 13, 1, 2),
    _OspfNewCfgHostIpAddr_Type()
)
ospfNewCfgHostIpAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgHostIpAddr.setStatus("current")
_OspfNewCfgHostAreaIndex_Type = Integer32
_OspfNewCfgHostAreaIndex_Object = MibTableColumn
ospfNewCfgHostAreaIndex = _OspfNewCfgHostAreaIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 13, 1, 3),
    _OspfNewCfgHostAreaIndex_Type()
)
ospfNewCfgHostAreaIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgHostAreaIndex.setStatus("current")


class _OspfNewCfgHostCost_Type(Integer32):
    """Custom type ospfNewCfgHostCost based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfNewCfgHostCost_Type.__name__ = "Integer32"
_OspfNewCfgHostCost_Object = MibTableColumn
ospfNewCfgHostCost = _OspfNewCfgHostCost_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 13, 1, 4),
    _OspfNewCfgHostCost_Type()
)
ospfNewCfgHostCost.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgHostCost.setStatus("current")


class _OspfNewCfgHostState_Type(Integer32):
    """Custom type ospfNewCfgHostState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_OspfNewCfgHostState_Type.__name__ = "Integer32"
_OspfNewCfgHostState_Object = MibTableColumn
ospfNewCfgHostState = _OspfNewCfgHostState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 13, 1, 5),
    _OspfNewCfgHostState_Type()
)
ospfNewCfgHostState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgHostState.setStatus("current")


class _OspfNewCfgHostDelete_Type(Integer32):
    """Custom type ospfNewCfgHostDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_OspfNewCfgHostDelete_Type.__name__ = "Integer32"
_OspfNewCfgHostDelete_Object = MibTableColumn
ospfNewCfgHostDelete = _OspfNewCfgHostDelete_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 13, 1, 6),
    _OspfNewCfgHostDelete_Type()
)
ospfNewCfgHostDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfNewCfgHostDelete.setStatus("current")
_OspfCurCfgRangeTable_Object = MibTable
ospfCurCfgRangeTable = _OspfCurCfgRangeTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 14)
)
if mibBuilder.loadTexts:
    ospfCurCfgRangeTable.setStatus("current")
_OspfCurCfgRangeEntry_Object = MibTableRow
ospfCurCfgRangeEntry = _OspfCurCfgRangeEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 14, 1)
)
ospfCurCfgRangeEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ospfCurCfgRangeIndex"),
)
if mibBuilder.loadTexts:
    ospfCurCfgRangeEntry.setStatus("current")
_OspfCurCfgRangeIndex_Type = Integer32
_OspfCurCfgRangeIndex_Object = MibTableColumn
ospfCurCfgRangeIndex = _OspfCurCfgRangeIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 14, 1, 1),
    _OspfCurCfgRangeIndex_Type()
)
ospfCurCfgRangeIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgRangeIndex.setStatus("current")
_OspfCurCfgRangeAddr_Type = IpAddress
_OspfCurCfgRangeAddr_Object = MibTableColumn
ospfCurCfgRangeAddr = _OspfCurCfgRangeAddr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 14, 1, 2),
    _OspfCurCfgRangeAddr_Type()
)
ospfCurCfgRangeAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgRangeAddr.setStatus("current")
_OspfCurCfgRangeMask_Type = IpAddress
_OspfCurCfgRangeMask_Object = MibTableColumn
ospfCurCfgRangeMask = _OspfCurCfgRangeMask_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 14, 1, 3),
    _OspfCurCfgRangeMask_Type()
)
ospfCurCfgRangeMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgRangeMask.setStatus("current")
_OspfCurCfgRangeAreaIndex_Type = Integer32
_OspfCurCfgRangeAreaIndex_Object = MibTableColumn
ospfCurCfgRangeAreaIndex = _OspfCurCfgRangeAreaIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 14, 1, 4),
    _OspfCurCfgRangeAreaIndex_Type()
)
ospfCurCfgRangeAreaIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgRangeAreaIndex.setStatus("current")


class _OspfCurCfgRangeHideState_Type(Integer32):
    """Custom type ospfCurCfgRangeHideState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_OspfCurCfgRangeHideState_Type.__name__ = "Integer32"
_OspfCurCfgRangeHideState_Object = MibTableColumn
ospfCurCfgRangeHideState = _OspfCurCfgRangeHideState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 14, 1, 5),
    _OspfCurCfgRangeHideState_Type()
)
ospfCurCfgRangeHideState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgRangeHideState.setStatus("current")


class _OspfCurCfgRangeState_Type(Integer32):
    """Custom type ospfCurCfgRangeState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_OspfCurCfgRangeState_Type.__name__ = "Integer32"
_OspfCurCfgRangeState_Object = MibTableColumn
ospfCurCfgRangeState = _OspfCurCfgRangeState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 14, 1, 6),
    _OspfCurCfgRangeState_Type()
)
ospfCurCfgRangeState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCurCfgRangeState.setStatus("current")
_OspfNewCfgRangeTable_Object = MibTable
ospfNewCfgRangeTable = _OspfNewCfgRangeTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 15)
)
if mibBuilder.loadTexts:
    ospfNewCfgRangeTable.setStatus("current")
_OspfNewCfgRangeEntry_Object = MibTableRow
ospfNewCfgRangeEntry = _OspfNewCfgRangeEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 15, 1)
)
ospfNewCfgRangeEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ospfNewCfgRangeIndex"),
)
if mibBuilder.loadTexts:
    ospfNewCfgRangeEntry.setStatus("current")
_OspfNewCfgRangeIndex_Type = Integer32
_OspfNewCfgRangeIndex_Object = MibTableColumn
ospfNewCfgRangeIndex = _OspfNewCfgRangeIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 15, 1, 1),
    _OspfNewCfgRangeIndex_Type()
)
ospfNewCfgRangeIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNewCfgRangeIndex.setStatus("current")
_OspfNewCfgRangeAddr_Type = IpAddress
_OspfNewCfgRangeAddr_Object = MibTableColumn
ospfNewCfgRangeAddr = _OspfNewCfgRangeAddr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 15, 1, 2),
    _OspfNewCfgRangeAddr_Type()
)
ospfNewCfgRangeAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgRangeAddr.setStatus("current")
_OspfNewCfgRangeMask_Type = IpAddress
_OspfNewCfgRangeMask_Object = MibTableColumn
ospfNewCfgRangeMask = _OspfNewCfgRangeMask_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 15, 1, 3),
    _OspfNewCfgRangeMask_Type()
)
ospfNewCfgRangeMask.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgRangeMask.setStatus("current")
_OspfNewCfgRangeAreaIndex_Type = Integer32
_OspfNewCfgRangeAreaIndex_Object = MibTableColumn
ospfNewCfgRangeAreaIndex = _OspfNewCfgRangeAreaIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 15, 1, 4),
    _OspfNewCfgRangeAreaIndex_Type()
)
ospfNewCfgRangeAreaIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgRangeAreaIndex.setStatus("current")


class _OspfNewCfgRangeHideState_Type(Integer32):
    """Custom type ospfNewCfgRangeHideState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_OspfNewCfgRangeHideState_Type.__name__ = "Integer32"
_OspfNewCfgRangeHideState_Object = MibTableColumn
ospfNewCfgRangeHideState = _OspfNewCfgRangeHideState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 15, 1, 5),
    _OspfNewCfgRangeHideState_Type()
)
ospfNewCfgRangeHideState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgRangeHideState.setStatus("current")


class _OspfNewCfgRangeState_Type(Integer32):
    """Custom type ospfNewCfgRangeState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_OspfNewCfgRangeState_Type.__name__ = "Integer32"
_OspfNewCfgRangeState_Object = MibTableColumn
ospfNewCfgRangeState = _OspfNewCfgRangeState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 15, 1, 6),
    _OspfNewCfgRangeState_Type()
)
ospfNewCfgRangeState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgRangeState.setStatus("current")


class _OspfNewCfgRangeDelete_Type(Integer32):
    """Custom type ospfNewCfgRangeDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_OspfNewCfgRangeDelete_Type.__name__ = "Integer32"
_OspfNewCfgRangeDelete_Object = MibTableColumn
ospfNewCfgRangeDelete = _OspfNewCfgRangeDelete_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 13, 15, 1, 7),
    _OspfNewCfgRangeDelete_Type()
)
ospfNewCfgRangeDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ospfNewCfgRangeDelete.setStatus("current")
_IpGeneralCfg_ObjectIdentity = ObjectIdentity
ipGeneralCfg = _IpGeneralCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 14)
)
_IpCurCfgRouterID_Type = IpAddress
_IpCurCfgRouterID_Object = MibScalar
ipCurCfgRouterID = _IpCurCfgRouterID_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 14, 1),
    _IpCurCfgRouterID_Type()
)
ipCurCfgRouterID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipCurCfgRouterID.setStatus("current")
_IpNewCfgRouterID_Type = IpAddress
_IpNewCfgRouterID_Object = MibScalar
ipNewCfgRouterID = _IpNewCfgRouterID_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 14, 2),
    _IpNewCfgRouterID_Type()
)
ipNewCfgRouterID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipNewCfgRouterID.setStatus("current")
_IgmpCfg_ObjectIdentity = ObjectIdentity
igmpCfg = _IgmpCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15)
)


class _IgmpCurCfgOnOff_Type(Integer32):
    """Custom type igmpCurCfgOnOff based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_IgmpCurCfgOnOff_Type.__name__ = "Integer32"
_IgmpCurCfgOnOff_Object = MibScalar
igmpCurCfgOnOff = _IgmpCurCfgOnOff_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 1),
    _IgmpCurCfgOnOff_Type()
)
igmpCurCfgOnOff.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpCurCfgOnOff.setStatus("current")


class _IgmpNewCfgOnOff_Type(Integer32):
    """Custom type igmpNewCfgOnOff based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_IgmpNewCfgOnOff_Type.__name__ = "Integer32"
_IgmpNewCfgOnOff_Object = MibScalar
igmpNewCfgOnOff = _IgmpNewCfgOnOff_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 2),
    _IgmpNewCfgOnOff_Type()
)
igmpNewCfgOnOff.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpNewCfgOnOff.setStatus("current")
_IgmpSnoopCfgGen_ObjectIdentity = ObjectIdentity
igmpSnoopCfgGen = _IgmpSnoopCfgGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 3)
)
_IgmpSnoopCfg_ObjectIdentity = ObjectIdentity
igmpSnoopCfg = _IgmpSnoopCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 3, 1)
)
_IgmpSnoopCurCfgTimeout_Type = Integer32
_IgmpSnoopCurCfgTimeout_Object = MibScalar
igmpSnoopCurCfgTimeout = _IgmpSnoopCurCfgTimeout_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 3, 1, 1),
    _IgmpSnoopCurCfgTimeout_Type()
)
igmpSnoopCurCfgTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpSnoopCurCfgTimeout.setStatus("current")
_IgmpSnoopNewCfgTimeout_Type = Integer32
_IgmpSnoopNewCfgTimeout_Object = MibScalar
igmpSnoopNewCfgTimeout = _IgmpSnoopNewCfgTimeout_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 3, 1, 2),
    _IgmpSnoopNewCfgTimeout_Type()
)
igmpSnoopNewCfgTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpSnoopNewCfgTimeout.setStatus("current")
_IgmpSnoopCurCfgMrto_Type = Integer32
_IgmpSnoopCurCfgMrto_Object = MibScalar
igmpSnoopCurCfgMrto = _IgmpSnoopCurCfgMrto_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 3, 1, 3),
    _IgmpSnoopCurCfgMrto_Type()
)
igmpSnoopCurCfgMrto.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpSnoopCurCfgMrto.setStatus("current")
_IgmpSnoopNewCfgMrto_Type = Integer32
_IgmpSnoopNewCfgMrto_Object = MibScalar
igmpSnoopNewCfgMrto = _IgmpSnoopNewCfgMrto_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 3, 1, 4),
    _IgmpSnoopNewCfgMrto_Type()
)
igmpSnoopNewCfgMrto.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpSnoopNewCfgMrto.setStatus("current")
_IgmpSnoopNewCfgVlanFastlvAdd_Type = Integer32
_IgmpSnoopNewCfgVlanFastlvAdd_Object = MibScalar
igmpSnoopNewCfgVlanFastlvAdd = _IgmpSnoopNewCfgVlanFastlvAdd_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 3, 1, 12),
    _IgmpSnoopNewCfgVlanFastlvAdd_Type()
)
igmpSnoopNewCfgVlanFastlvAdd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpSnoopNewCfgVlanFastlvAdd.setStatus("current")
_IgmpSnoopNewCfgVlanFastlvRem_Type = Integer32
_IgmpSnoopNewCfgVlanFastlvRem_Object = MibScalar
igmpSnoopNewCfgVlanFastlvRem = _IgmpSnoopNewCfgVlanFastlvRem_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 3, 1, 13),
    _IgmpSnoopNewCfgVlanFastlvRem_Type()
)
igmpSnoopNewCfgVlanFastlvRem.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpSnoopNewCfgVlanFastlvRem.setStatus("current")
_IgmpSnoopCurCfgVlanFastlvBmap_Type = OctetString
_IgmpSnoopCurCfgVlanFastlvBmap_Object = MibScalar
igmpSnoopCurCfgVlanFastlvBmap = _IgmpSnoopCurCfgVlanFastlvBmap_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 3, 1, 14),
    _IgmpSnoopCurCfgVlanFastlvBmap_Type()
)
igmpSnoopCurCfgVlanFastlvBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpSnoopCurCfgVlanFastlvBmap.setStatus("current")
_IgmpSnoopNewCfgVlanFastlvBmap_Type = OctetString
_IgmpSnoopNewCfgVlanFastlvBmap_Object = MibScalar
igmpSnoopNewCfgVlanFastlvBmap = _IgmpSnoopNewCfgVlanFastlvBmap_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 3, 1, 15),
    _IgmpSnoopNewCfgVlanFastlvBmap_Type()
)
igmpSnoopNewCfgVlanFastlvBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpSnoopNewCfgVlanFastlvBmap.setStatus("current")
_IgmpSnoopCurCfgRobust_Type = Integer32
_IgmpSnoopCurCfgRobust_Object = MibScalar
igmpSnoopCurCfgRobust = _IgmpSnoopCurCfgRobust_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 3, 1, 16),
    _IgmpSnoopCurCfgRobust_Type()
)
igmpSnoopCurCfgRobust.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpSnoopCurCfgRobust.setStatus("current")
_IgmpSnoopNewCfgRobust_Type = Integer32
_IgmpSnoopNewCfgRobust_Object = MibScalar
igmpSnoopNewCfgRobust = _IgmpSnoopNewCfgRobust_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 3, 1, 17),
    _IgmpSnoopNewCfgRobust_Type()
)
igmpSnoopNewCfgRobust.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpSnoopNewCfgRobust.setStatus("current")
_IgmpSnoopNewCfgVlanAdd_Type = Integer32
_IgmpSnoopNewCfgVlanAdd_Object = MibScalar
igmpSnoopNewCfgVlanAdd = _IgmpSnoopNewCfgVlanAdd_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 3, 1, 18),
    _IgmpSnoopNewCfgVlanAdd_Type()
)
igmpSnoopNewCfgVlanAdd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpSnoopNewCfgVlanAdd.setStatus("current")
_IgmpSnoopNewCfgVlanRem_Type = Integer32
_IgmpSnoopNewCfgVlanRem_Object = MibScalar
igmpSnoopNewCfgVlanRem = _IgmpSnoopNewCfgVlanRem_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 3, 1, 19),
    _IgmpSnoopNewCfgVlanRem_Type()
)
igmpSnoopNewCfgVlanRem.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpSnoopNewCfgVlanRem.setStatus("current")


class _IgmpSnoopNewCfgVlanClear_Type(Integer32):
    """Custom type igmpSnoopNewCfgVlanClear based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("ok", 2))
    )


_IgmpSnoopNewCfgVlanClear_Type.__name__ = "Integer32"
_IgmpSnoopNewCfgVlanClear_Object = MibScalar
igmpSnoopNewCfgVlanClear = _IgmpSnoopNewCfgVlanClear_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 3, 1, 20),
    _IgmpSnoopNewCfgVlanClear_Type()
)
igmpSnoopNewCfgVlanClear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpSnoopNewCfgVlanClear.setStatus("current")
_IgmpSnoopCurCfgVlanBmap_Type = OctetString
_IgmpSnoopCurCfgVlanBmap_Object = MibScalar
igmpSnoopCurCfgVlanBmap = _IgmpSnoopCurCfgVlanBmap_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 3, 1, 21),
    _IgmpSnoopCurCfgVlanBmap_Type()
)
igmpSnoopCurCfgVlanBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpSnoopCurCfgVlanBmap.setStatus("current")
_IgmpSnoopNewCfgVlanBmap_Type = OctetString
_IgmpSnoopNewCfgVlanBmap_Object = MibScalar
igmpSnoopNewCfgVlanBmap = _IgmpSnoopNewCfgVlanBmap_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 3, 1, 22),
    _IgmpSnoopNewCfgVlanBmap_Type()
)
igmpSnoopNewCfgVlanBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpSnoopNewCfgVlanBmap.setStatus("current")
_IgmpSnoopCurCfgQInterval_Type = Integer32
_IgmpSnoopCurCfgQInterval_Object = MibScalar
igmpSnoopCurCfgQInterval = _IgmpSnoopCurCfgQInterval_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 3, 1, 23),
    _IgmpSnoopCurCfgQInterval_Type()
)
igmpSnoopCurCfgQInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpSnoopCurCfgQInterval.setStatus("current")
_IgmpSnoopNewCfgQInterval_Type = Integer32
_IgmpSnoopNewCfgQInterval_Object = MibScalar
igmpSnoopNewCfgQInterval = _IgmpSnoopNewCfgQInterval_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 3, 1, 24),
    _IgmpSnoopNewCfgQInterval_Type()
)
igmpSnoopNewCfgQInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpSnoopNewCfgQInterval.setStatus("current")
_IgmpSnoopCurCfgSrcIp_Type = IpAddress
_IgmpSnoopCurCfgSrcIp_Object = MibScalar
igmpSnoopCurCfgSrcIp = _IgmpSnoopCurCfgSrcIp_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 3, 1, 25),
    _IgmpSnoopCurCfgSrcIp_Type()
)
igmpSnoopCurCfgSrcIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpSnoopCurCfgSrcIp.setStatus("current")
_IgmpSnoopNewCfgSrcIp_Type = IpAddress
_IgmpSnoopNewCfgSrcIp_Object = MibScalar
igmpSnoopNewCfgSrcIp = _IgmpSnoopNewCfgSrcIp_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 3, 1, 26),
    _IgmpSnoopNewCfgSrcIp_Type()
)
igmpSnoopNewCfgSrcIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpSnoopNewCfgSrcIp.setStatus("current")


class _IgmpSnoopCurCfgAggrEnaDis_Type(Integer32):
    """Custom type igmpSnoopCurCfgAggrEnaDis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_IgmpSnoopCurCfgAggrEnaDis_Type.__name__ = "Integer32"
_IgmpSnoopCurCfgAggrEnaDis_Object = MibScalar
igmpSnoopCurCfgAggrEnaDis = _IgmpSnoopCurCfgAggrEnaDis_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 3, 1, 27),
    _IgmpSnoopCurCfgAggrEnaDis_Type()
)
igmpSnoopCurCfgAggrEnaDis.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpSnoopCurCfgAggrEnaDis.setStatus("current")


class _IgmpSnoopNewCfgAggrEnaDis_Type(Integer32):
    """Custom type igmpSnoopNewCfgAggrEnaDis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_IgmpSnoopNewCfgAggrEnaDis_Type.__name__ = "Integer32"
_IgmpSnoopNewCfgAggrEnaDis_Object = MibScalar
igmpSnoopNewCfgAggrEnaDis = _IgmpSnoopNewCfgAggrEnaDis_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 3, 1, 28),
    _IgmpSnoopNewCfgAggrEnaDis_Type()
)
igmpSnoopNewCfgAggrEnaDis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpSnoopNewCfgAggrEnaDis.setStatus("current")


class _IgmpSnoopCurCfgFlood_Type(Integer32):
    """Custom type igmpSnoopCurCfgFlood based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_IgmpSnoopCurCfgFlood_Type.__name__ = "Integer32"
_IgmpSnoopCurCfgFlood_Object = MibScalar
igmpSnoopCurCfgFlood = _IgmpSnoopCurCfgFlood_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 3, 1, 29),
    _IgmpSnoopCurCfgFlood_Type()
)
igmpSnoopCurCfgFlood.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpSnoopCurCfgFlood.setStatus("current")


class _IgmpSnoopNewCfgFlood_Type(Integer32):
    """Custom type igmpSnoopNewCfgFlood based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_IgmpSnoopNewCfgFlood_Type.__name__ = "Integer32"
_IgmpSnoopNewCfgFlood_Object = MibScalar
igmpSnoopNewCfgFlood = _IgmpSnoopNewCfgFlood_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 3, 1, 30),
    _IgmpSnoopNewCfgFlood_Type()
)
igmpSnoopNewCfgFlood.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpSnoopNewCfgFlood.setStatus("current")
_IgmpV3SnoopCfg_ObjectIdentity = ObjectIdentity
igmpV3SnoopCfg = _IgmpV3SnoopCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 3, 2)
)
_IgmpV3SnoopCurCfgSources_Type = Integer32
_IgmpV3SnoopCurCfgSources_Object = MibScalar
igmpV3SnoopCurCfgSources = _IgmpV3SnoopCurCfgSources_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 3, 2, 1),
    _IgmpV3SnoopCurCfgSources_Type()
)
igmpV3SnoopCurCfgSources.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpV3SnoopCurCfgSources.setStatus("current")
_IgmpV3SnoopNewCfgSources_Type = Integer32
_IgmpV3SnoopNewCfgSources_Object = MibScalar
igmpV3SnoopNewCfgSources = _IgmpV3SnoopNewCfgSources_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 3, 2, 2),
    _IgmpV3SnoopNewCfgSources_Type()
)
igmpV3SnoopNewCfgSources.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpV3SnoopNewCfgSources.setStatus("current")


class _IgmpV3SnoopCurCfgEnaDis_Type(Integer32):
    """Custom type igmpV3SnoopCurCfgEnaDis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IgmpV3SnoopCurCfgEnaDis_Type.__name__ = "Integer32"
_IgmpV3SnoopCurCfgEnaDis_Object = MibScalar
igmpV3SnoopCurCfgEnaDis = _IgmpV3SnoopCurCfgEnaDis_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 3, 2, 3),
    _IgmpV3SnoopCurCfgEnaDis_Type()
)
igmpV3SnoopCurCfgEnaDis.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpV3SnoopCurCfgEnaDis.setStatus("current")


class _IgmpV3SnoopNewCfgEnaDis_Type(Integer32):
    """Custom type igmpV3SnoopNewCfgEnaDis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_IgmpV3SnoopNewCfgEnaDis_Type.__name__ = "Integer32"
_IgmpV3SnoopNewCfgEnaDis_Object = MibScalar
igmpV3SnoopNewCfgEnaDis = _IgmpV3SnoopNewCfgEnaDis_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 3, 2, 4),
    _IgmpV3SnoopNewCfgEnaDis_Type()
)
igmpV3SnoopNewCfgEnaDis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpV3SnoopNewCfgEnaDis.setStatus("current")


class _IgmpV3SnoopCurCfgExcludeEnaDis_Type(Integer32):
    """Custom type igmpV3SnoopCurCfgExcludeEnaDis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IgmpV3SnoopCurCfgExcludeEnaDis_Type.__name__ = "Integer32"
_IgmpV3SnoopCurCfgExcludeEnaDis_Object = MibScalar
igmpV3SnoopCurCfgExcludeEnaDis = _IgmpV3SnoopCurCfgExcludeEnaDis_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 3, 2, 5),
    _IgmpV3SnoopCurCfgExcludeEnaDis_Type()
)
igmpV3SnoopCurCfgExcludeEnaDis.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpV3SnoopCurCfgExcludeEnaDis.setStatus("current")


class _IgmpV3SnoopNewCfgExcludeEnaDis_Type(Integer32):
    """Custom type igmpV3SnoopNewCfgExcludeEnaDis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_IgmpV3SnoopNewCfgExcludeEnaDis_Type.__name__ = "Integer32"
_IgmpV3SnoopNewCfgExcludeEnaDis_Object = MibScalar
igmpV3SnoopNewCfgExcludeEnaDis = _IgmpV3SnoopNewCfgExcludeEnaDis_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 3, 2, 6),
    _IgmpV3SnoopNewCfgExcludeEnaDis_Type()
)
igmpV3SnoopNewCfgExcludeEnaDis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpV3SnoopNewCfgExcludeEnaDis.setStatus("current")


class _IgmpV3SnoopCurCfgV1V2EnaDis_Type(Integer32):
    """Custom type igmpV3SnoopCurCfgV1V2EnaDis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IgmpV3SnoopCurCfgV1V2EnaDis_Type.__name__ = "Integer32"
_IgmpV3SnoopCurCfgV1V2EnaDis_Object = MibScalar
igmpV3SnoopCurCfgV1V2EnaDis = _IgmpV3SnoopCurCfgV1V2EnaDis_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 3, 2, 7),
    _IgmpV3SnoopCurCfgV1V2EnaDis_Type()
)
igmpV3SnoopCurCfgV1V2EnaDis.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpV3SnoopCurCfgV1V2EnaDis.setStatus("current")


class _IgmpV3SnoopNewCfgV1V2EnaDis_Type(Integer32):
    """Custom type igmpV3SnoopNewCfgV1V2EnaDis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_IgmpV3SnoopNewCfgV1V2EnaDis_Type.__name__ = "Integer32"
_IgmpV3SnoopNewCfgV1V2EnaDis_Object = MibScalar
igmpV3SnoopNewCfgV1V2EnaDis = _IgmpV3SnoopNewCfgV1V2EnaDis_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 3, 2, 8),
    _IgmpV3SnoopNewCfgV1V2EnaDis_Type()
)
igmpV3SnoopNewCfgV1V2EnaDis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpV3SnoopNewCfgV1V2EnaDis.setStatus("current")
_IgmpStaticMrtrCfg_ObjectIdentity = ObjectIdentity
igmpStaticMrtrCfg = _IgmpStaticMrtrCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 4)
)
_IgmpStaticMrtrCurCfgTable_Object = MibTable
igmpStaticMrtrCurCfgTable = _IgmpStaticMrtrCurCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 4, 1)
)
if mibBuilder.loadTexts:
    igmpStaticMrtrCurCfgTable.setStatus("current")
_IgmpStaticMrtrCurCfgTableEntry_Object = MibTableRow
igmpStaticMrtrCurCfgTableEntry = _IgmpStaticMrtrCurCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 4, 1, 1)
)
igmpStaticMrtrCurCfgTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "igmpStaticMrtrCurCfgIndx"),
)
if mibBuilder.loadTexts:
    igmpStaticMrtrCurCfgTableEntry.setStatus("current")
_IgmpStaticMrtrCurCfgIndx_Type = Integer32
_IgmpStaticMrtrCurCfgIndx_Object = MibTableColumn
igmpStaticMrtrCurCfgIndx = _IgmpStaticMrtrCurCfgIndx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 4, 1, 1, 1),
    _IgmpStaticMrtrCurCfgIndx_Type()
)
igmpStaticMrtrCurCfgIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpStaticMrtrCurCfgIndx.setStatus("current")
_IgmpStaticMrtrCurCfgPortId_Type = Integer32
_IgmpStaticMrtrCurCfgPortId_Object = MibTableColumn
igmpStaticMrtrCurCfgPortId = _IgmpStaticMrtrCurCfgPortId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 4, 1, 1, 2),
    _IgmpStaticMrtrCurCfgPortId_Type()
)
igmpStaticMrtrCurCfgPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpStaticMrtrCurCfgPortId.setStatus("current")
_IgmpStaticMrtrCurCfgVlanId_Type = Integer32
_IgmpStaticMrtrCurCfgVlanId_Object = MibTableColumn
igmpStaticMrtrCurCfgVlanId = _IgmpStaticMrtrCurCfgVlanId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 4, 1, 1, 3),
    _IgmpStaticMrtrCurCfgVlanId_Type()
)
igmpStaticMrtrCurCfgVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpStaticMrtrCurCfgVlanId.setStatus("current")


class _IgmpStaticMrtrCurCfgVersion_Type(Integer32):
    """Custom type igmpStaticMrtrCurCfgVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("version1", 1),
          ("version2", 2))
    )


_IgmpStaticMrtrCurCfgVersion_Type.__name__ = "Integer32"
_IgmpStaticMrtrCurCfgVersion_Object = MibTableColumn
igmpStaticMrtrCurCfgVersion = _IgmpStaticMrtrCurCfgVersion_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 4, 1, 1, 4),
    _IgmpStaticMrtrCurCfgVersion_Type()
)
igmpStaticMrtrCurCfgVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpStaticMrtrCurCfgVersion.setStatus("current")
_IgmpStaticMrtrNewCfgTable_Object = MibTable
igmpStaticMrtrNewCfgTable = _IgmpStaticMrtrNewCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 4, 2)
)
if mibBuilder.loadTexts:
    igmpStaticMrtrNewCfgTable.setStatus("current")
_IgmpStaticMrtrNewCfgTableEntry_Object = MibTableRow
igmpStaticMrtrNewCfgTableEntry = _IgmpStaticMrtrNewCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 4, 2, 1)
)
igmpStaticMrtrNewCfgTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "igmpStaticMrtrNewCfgIndx"),
)
if mibBuilder.loadTexts:
    igmpStaticMrtrNewCfgTableEntry.setStatus("current")
_IgmpStaticMrtrNewCfgIndx_Type = Integer32
_IgmpStaticMrtrNewCfgIndx_Object = MibTableColumn
igmpStaticMrtrNewCfgIndx = _IgmpStaticMrtrNewCfgIndx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 4, 2, 1, 1),
    _IgmpStaticMrtrNewCfgIndx_Type()
)
igmpStaticMrtrNewCfgIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpStaticMrtrNewCfgIndx.setStatus("current")
_IgmpStaticMrtrNewCfgPortId_Type = Integer32
_IgmpStaticMrtrNewCfgPortId_Object = MibTableColumn
igmpStaticMrtrNewCfgPortId = _IgmpStaticMrtrNewCfgPortId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 4, 2, 1, 2),
    _IgmpStaticMrtrNewCfgPortId_Type()
)
igmpStaticMrtrNewCfgPortId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    igmpStaticMrtrNewCfgPortId.setStatus("current")
_IgmpStaticMrtrNewCfgVlanId_Type = Integer32
_IgmpStaticMrtrNewCfgVlanId_Object = MibTableColumn
igmpStaticMrtrNewCfgVlanId = _IgmpStaticMrtrNewCfgVlanId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 4, 2, 1, 3),
    _IgmpStaticMrtrNewCfgVlanId_Type()
)
igmpStaticMrtrNewCfgVlanId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    igmpStaticMrtrNewCfgVlanId.setStatus("current")


class _IgmpStaticMrtrNewCfgVersion_Type(Integer32):
    """Custom type igmpStaticMrtrNewCfgVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("version1", 1),
          ("version2", 2),
          ("version3", 3))
    )


_IgmpStaticMrtrNewCfgVersion_Type.__name__ = "Integer32"
_IgmpStaticMrtrNewCfgVersion_Object = MibTableColumn
igmpStaticMrtrNewCfgVersion = _IgmpStaticMrtrNewCfgVersion_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 4, 2, 1, 4),
    _IgmpStaticMrtrNewCfgVersion_Type()
)
igmpStaticMrtrNewCfgVersion.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    igmpStaticMrtrNewCfgVersion.setStatus("current")


class _IgmpStaticMrtrNewCfgDelete_Type(Integer32):
    """Custom type igmpStaticMrtrNewCfgDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_IgmpStaticMrtrNewCfgDelete_Type.__name__ = "Integer32"
_IgmpStaticMrtrNewCfgDelete_Object = MibTableColumn
igmpStaticMrtrNewCfgDelete = _IgmpStaticMrtrNewCfgDelete_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 4, 2, 1, 5),
    _IgmpStaticMrtrNewCfgDelete_Type()
)
igmpStaticMrtrNewCfgDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    igmpStaticMrtrNewCfgDelete.setStatus("current")
_IgmpFilterCfg_ObjectIdentity = ObjectIdentity
igmpFilterCfg = _IgmpFilterCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 5)
)
_IgmpFltCurCfgTable_Object = MibTable
igmpFltCurCfgTable = _IgmpFltCurCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 5, 1)
)
if mibBuilder.loadTexts:
    igmpFltCurCfgTable.setStatus("current")
_IgmpFltCurCfgTableEntry_Object = MibTableRow
igmpFltCurCfgTableEntry = _IgmpFltCurCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 5, 1, 1)
)
igmpFltCurCfgTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "igmpFltCurCfgIndx"),
)
if mibBuilder.loadTexts:
    igmpFltCurCfgTableEntry.setStatus("current")
_IgmpFltCurCfgIndx_Type = Integer32
_IgmpFltCurCfgIndx_Object = MibTableColumn
igmpFltCurCfgIndx = _IgmpFltCurCfgIndx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 5, 1, 1, 1),
    _IgmpFltCurCfgIndx_Type()
)
igmpFltCurCfgIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpFltCurCfgIndx.setStatus("current")
_IgmpFltCurCfgMcastIp1_Type = IpAddress
_IgmpFltCurCfgMcastIp1_Object = MibTableColumn
igmpFltCurCfgMcastIp1 = _IgmpFltCurCfgMcastIp1_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 5, 1, 1, 2),
    _IgmpFltCurCfgMcastIp1_Type()
)
igmpFltCurCfgMcastIp1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpFltCurCfgMcastIp1.setStatus("current")
_IgmpFltCurCfgMcastIp2_Type = IpAddress
_IgmpFltCurCfgMcastIp2_Object = MibTableColumn
igmpFltCurCfgMcastIp2 = _IgmpFltCurCfgMcastIp2_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 5, 1, 1, 3),
    _IgmpFltCurCfgMcastIp2_Type()
)
igmpFltCurCfgMcastIp2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpFltCurCfgMcastIp2.setStatus("current")


class _IgmpFltCurCfgAction_Type(Integer32):
    """Custom type igmpFltCurCfgAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("allow", 1),
          ("deny", 2))
    )


_IgmpFltCurCfgAction_Type.__name__ = "Integer32"
_IgmpFltCurCfgAction_Object = MibTableColumn
igmpFltCurCfgAction = _IgmpFltCurCfgAction_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 5, 1, 1, 4),
    _IgmpFltCurCfgAction_Type()
)
igmpFltCurCfgAction.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpFltCurCfgAction.setStatus("current")


class _IgmpFltCurCfgState_Type(Integer32):
    """Custom type igmpFltCurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IgmpFltCurCfgState_Type.__name__ = "Integer32"
_IgmpFltCurCfgState_Object = MibTableColumn
igmpFltCurCfgState = _IgmpFltCurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 5, 1, 1, 5),
    _IgmpFltCurCfgState_Type()
)
igmpFltCurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpFltCurCfgState.setStatus("current")
_IgmpFltNewCfgTable_Object = MibTable
igmpFltNewCfgTable = _IgmpFltNewCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 5, 2)
)
if mibBuilder.loadTexts:
    igmpFltNewCfgTable.setStatus("current")
_IgmpFltNewCfgTableEntry_Object = MibTableRow
igmpFltNewCfgTableEntry = _IgmpFltNewCfgTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 5, 2, 1)
)
igmpFltNewCfgTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "igmpFltNewCfgIndx"),
)
if mibBuilder.loadTexts:
    igmpFltNewCfgTableEntry.setStatus("current")
_IgmpFltNewCfgIndx_Type = Integer32
_IgmpFltNewCfgIndx_Object = MibTableColumn
igmpFltNewCfgIndx = _IgmpFltNewCfgIndx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 5, 2, 1, 1),
    _IgmpFltNewCfgIndx_Type()
)
igmpFltNewCfgIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpFltNewCfgIndx.setStatus("current")
_IgmpFltNewCfgMcastIp1_Type = IpAddress
_IgmpFltNewCfgMcastIp1_Object = MibTableColumn
igmpFltNewCfgMcastIp1 = _IgmpFltNewCfgMcastIp1_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 5, 2, 1, 2),
    _IgmpFltNewCfgMcastIp1_Type()
)
igmpFltNewCfgMcastIp1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    igmpFltNewCfgMcastIp1.setStatus("current")
_IgmpFltNewCfgMcastIp2_Type = IpAddress
_IgmpFltNewCfgMcastIp2_Object = MibTableColumn
igmpFltNewCfgMcastIp2 = _IgmpFltNewCfgMcastIp2_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 5, 2, 1, 3),
    _IgmpFltNewCfgMcastIp2_Type()
)
igmpFltNewCfgMcastIp2.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    igmpFltNewCfgMcastIp2.setStatus("current")


class _IgmpFltNewCfgAction_Type(Integer32):
    """Custom type igmpFltNewCfgAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("allow", 1),
          ("deny", 2))
    )


_IgmpFltNewCfgAction_Type.__name__ = "Integer32"
_IgmpFltNewCfgAction_Object = MibTableColumn
igmpFltNewCfgAction = _IgmpFltNewCfgAction_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 5, 2, 1, 4),
    _IgmpFltNewCfgAction_Type()
)
igmpFltNewCfgAction.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    igmpFltNewCfgAction.setStatus("current")


class _IgmpFltNewCfgState_Type(Integer32):
    """Custom type igmpFltNewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IgmpFltNewCfgState_Type.__name__ = "Integer32"
_IgmpFltNewCfgState_Object = MibTableColumn
igmpFltNewCfgState = _IgmpFltNewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 5, 2, 1, 5),
    _IgmpFltNewCfgState_Type()
)
igmpFltNewCfgState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    igmpFltNewCfgState.setStatus("current")


class _IgmpFltNewCfgDelete_Type(Integer32):
    """Custom type igmpFltNewCfgDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_IgmpFltNewCfgDelete_Type.__name__ = "Integer32"
_IgmpFltNewCfgDelete_Object = MibTableColumn
igmpFltNewCfgDelete = _IgmpFltNewCfgDelete_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 5, 2, 1, 6),
    _IgmpFltNewCfgDelete_Type()
)
igmpFltNewCfgDelete.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    igmpFltNewCfgDelete.setStatus("current")
_IgmpFltCurCfgPortTable_Object = MibTable
igmpFltCurCfgPortTable = _IgmpFltCurCfgPortTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 5, 3)
)
if mibBuilder.loadTexts:
    igmpFltCurCfgPortTable.setStatus("current")
_IgmpFltCurCfgPortTableEntry_Object = MibTableRow
igmpFltCurCfgPortTableEntry = _IgmpFltCurCfgPortTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 5, 3, 1)
)
igmpFltCurCfgPortTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "igmpFltCurCfgPortIndx"),
)
if mibBuilder.loadTexts:
    igmpFltCurCfgPortTableEntry.setStatus("current")
_IgmpFltCurCfgPortIndx_Type = Integer32
_IgmpFltCurCfgPortIndx_Object = MibTableColumn
igmpFltCurCfgPortIndx = _IgmpFltCurCfgPortIndx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 5, 3, 1, 1),
    _IgmpFltCurCfgPortIndx_Type()
)
igmpFltCurCfgPortIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpFltCurCfgPortIndx.setStatus("current")


class _IgmpFltCurCfgPortState_Type(Integer32):
    """Custom type igmpFltCurCfgPortState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IgmpFltCurCfgPortState_Type.__name__ = "Integer32"
_IgmpFltCurCfgPortState_Object = MibTableColumn
igmpFltCurCfgPortState = _IgmpFltCurCfgPortState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 5, 3, 1, 2),
    _IgmpFltCurCfgPortState_Type()
)
igmpFltCurCfgPortState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpFltCurCfgPortState.setStatus("current")


class _IgmpFltCurCfgPortFiltBmap_Type(OctetString):
    """Custom type igmpFltCurCfgPortFiltBmap based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 256),
    )


_IgmpFltCurCfgPortFiltBmap_Type.__name__ = "OctetString"
_IgmpFltCurCfgPortFiltBmap_Object = MibTableColumn
igmpFltCurCfgPortFiltBmap = _IgmpFltCurCfgPortFiltBmap_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 5, 3, 1, 3),
    _IgmpFltCurCfgPortFiltBmap_Type()
)
igmpFltCurCfgPortFiltBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpFltCurCfgPortFiltBmap.setStatus("current")
_IgmpFltNewCfgPortTable_Object = MibTable
igmpFltNewCfgPortTable = _IgmpFltNewCfgPortTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 5, 4)
)
if mibBuilder.loadTexts:
    igmpFltNewCfgPortTable.setStatus("current")
_IgmpFltNewCfgPortTableEntry_Object = MibTableRow
igmpFltNewCfgPortTableEntry = _IgmpFltNewCfgPortTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 5, 4, 1)
)
igmpFltNewCfgPortTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "igmpFltNewCfgPortIndx"),
)
if mibBuilder.loadTexts:
    igmpFltNewCfgPortTableEntry.setStatus("current")
_IgmpFltNewCfgPortIndx_Type = Integer32
_IgmpFltNewCfgPortIndx_Object = MibTableColumn
igmpFltNewCfgPortIndx = _IgmpFltNewCfgPortIndx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 5, 4, 1, 1),
    _IgmpFltNewCfgPortIndx_Type()
)
igmpFltNewCfgPortIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpFltNewCfgPortIndx.setStatus("current")


class _IgmpFltNewCfgPortState_Type(Integer32):
    """Custom type igmpFltNewCfgPortState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IgmpFltNewCfgPortState_Type.__name__ = "Integer32"
_IgmpFltNewCfgPortState_Object = MibTableColumn
igmpFltNewCfgPortState = _IgmpFltNewCfgPortState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 5, 4, 1, 2),
    _IgmpFltNewCfgPortState_Type()
)
igmpFltNewCfgPortState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    igmpFltNewCfgPortState.setStatus("current")


class _IgmpFltNewCfgPortFiltBmap_Type(OctetString):
    """Custom type igmpFltNewCfgPortFiltBmap based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 256),
    )


_IgmpFltNewCfgPortFiltBmap_Type.__name__ = "OctetString"
_IgmpFltNewCfgPortFiltBmap_Object = MibTableColumn
igmpFltNewCfgPortFiltBmap = _IgmpFltNewCfgPortFiltBmap_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 5, 4, 1, 3),
    _IgmpFltNewCfgPortFiltBmap_Type()
)
igmpFltNewCfgPortFiltBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpFltNewCfgPortFiltBmap.setStatus("current")
_IgmpFltNewCfgPortAddFiltRule_Type = Integer32
_IgmpFltNewCfgPortAddFiltRule_Object = MibTableColumn
igmpFltNewCfgPortAddFiltRule = _IgmpFltNewCfgPortAddFiltRule_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 5, 4, 1, 4),
    _IgmpFltNewCfgPortAddFiltRule_Type()
)
igmpFltNewCfgPortAddFiltRule.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    igmpFltNewCfgPortAddFiltRule.setStatus("current")
_IgmpFltNewCfgPortRemFiltRule_Type = Integer32
_IgmpFltNewCfgPortRemFiltRule_Object = MibTableColumn
igmpFltNewCfgPortRemFiltRule = _IgmpFltNewCfgPortRemFiltRule_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 5, 4, 1, 5),
    _IgmpFltNewCfgPortRemFiltRule_Type()
)
igmpFltNewCfgPortRemFiltRule.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    igmpFltNewCfgPortRemFiltRule.setStatus("current")


class _IgmpFltCurCfgEnaDis_Type(Integer32):
    """Custom type igmpFltCurCfgEnaDis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_IgmpFltCurCfgEnaDis_Type.__name__ = "Integer32"
_IgmpFltCurCfgEnaDis_Object = MibScalar
igmpFltCurCfgEnaDis = _IgmpFltCurCfgEnaDis_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 5, 5),
    _IgmpFltCurCfgEnaDis_Type()
)
igmpFltCurCfgEnaDis.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpFltCurCfgEnaDis.setStatus("current")


class _IgmpFltNewCfgEnaDis_Type(Integer32):
    """Custom type igmpFltNewCfgEnaDis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enable", 1),
          ("disable", 2))
    )


_IgmpFltNewCfgEnaDis_Type.__name__ = "Integer32"
_IgmpFltNewCfgEnaDis_Object = MibScalar
igmpFltNewCfgEnaDis = _IgmpFltNewCfgEnaDis_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 15, 5, 6),
    _IgmpFltNewCfgEnaDis_Type()
)
igmpFltNewCfgEnaDis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpFltNewCfgEnaDis.setStatus("current")
_Rip2Cfg_ObjectIdentity = ObjectIdentity
rip2Cfg = _Rip2Cfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18)
)
_RipCurCfgIntfTable_Object = MibTable
ripCurCfgIntfTable = _RipCurCfgIntfTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 1)
)
if mibBuilder.loadTexts:
    ripCurCfgIntfTable.setStatus("current")
_RipCurCfgIntfEntry_Object = MibTableRow
ripCurCfgIntfEntry = _RipCurCfgIntfEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 1, 1)
)
ripCurCfgIntfEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ripCurCfgIntfIndex"),
)
if mibBuilder.loadTexts:
    ripCurCfgIntfEntry.setStatus("current")
_RipCurCfgIntfIndex_Type = Integer32
_RipCurCfgIntfIndex_Object = MibTableColumn
ripCurCfgIntfIndex = _RipCurCfgIntfIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 1, 1, 1),
    _RipCurCfgIntfIndex_Type()
)
ripCurCfgIntfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgIntfIndex.setStatus("current")


class _RipCurCfgIntfVersion_Type(Integer32):
    """Custom type ripCurCfgIntfVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ripVersion1", 1),
          ("ripVersion2", 2),
          ("ripVersionBoth", 3))
    )


_RipCurCfgIntfVersion_Type.__name__ = "Integer32"
_RipCurCfgIntfVersion_Object = MibTableColumn
ripCurCfgIntfVersion = _RipCurCfgIntfVersion_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 1, 1, 2),
    _RipCurCfgIntfVersion_Type()
)
ripCurCfgIntfVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgIntfVersion.setStatus("current")


class _RipCurCfgIntfSupply_Type(Integer32):
    """Custom type ripCurCfgIntfSupply based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RipCurCfgIntfSupply_Type.__name__ = "Integer32"
_RipCurCfgIntfSupply_Object = MibTableColumn
ripCurCfgIntfSupply = _RipCurCfgIntfSupply_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 1, 1, 3),
    _RipCurCfgIntfSupply_Type()
)
ripCurCfgIntfSupply.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgIntfSupply.setStatus("current")


class _RipCurCfgIntfListen_Type(Integer32):
    """Custom type ripCurCfgIntfListen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RipCurCfgIntfListen_Type.__name__ = "Integer32"
_RipCurCfgIntfListen_Object = MibTableColumn
ripCurCfgIntfListen = _RipCurCfgIntfListen_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 1, 1, 4),
    _RipCurCfgIntfListen_Type()
)
ripCurCfgIntfListen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgIntfListen.setStatus("current")


class _RipCurCfgIntfDefault_Type(Integer32):
    """Custom type ripCurCfgIntfDefault based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("both", 1),
          ("listen", 2),
          ("supply", 3),
          ("none", 4))
    )


_RipCurCfgIntfDefault_Type.__name__ = "Integer32"
_RipCurCfgIntfDefault_Object = MibTableColumn
ripCurCfgIntfDefault = _RipCurCfgIntfDefault_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 1, 1, 5),
    _RipCurCfgIntfDefault_Type()
)
ripCurCfgIntfDefault.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgIntfDefault.setStatus("current")


class _RipCurCfgIntfTrigUpdate_Type(Integer32):
    """Custom type ripCurCfgIntfTrigUpdate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RipCurCfgIntfTrigUpdate_Type.__name__ = "Integer32"
_RipCurCfgIntfTrigUpdate_Object = MibTableColumn
ripCurCfgIntfTrigUpdate = _RipCurCfgIntfTrigUpdate_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 1, 1, 6),
    _RipCurCfgIntfTrigUpdate_Type()
)
ripCurCfgIntfTrigUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgIntfTrigUpdate.setStatus("current")


class _RipCurCfgIntfMcastUpdate_Type(Integer32):
    """Custom type ripCurCfgIntfMcastUpdate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RipCurCfgIntfMcastUpdate_Type.__name__ = "Integer32"
_RipCurCfgIntfMcastUpdate_Object = MibTableColumn
ripCurCfgIntfMcastUpdate = _RipCurCfgIntfMcastUpdate_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 1, 1, 7),
    _RipCurCfgIntfMcastUpdate_Type()
)
ripCurCfgIntfMcastUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgIntfMcastUpdate.setStatus("current")


class _RipCurCfgIntfPoisonReverse_Type(Integer32):
    """Custom type ripCurCfgIntfPoisonReverse based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RipCurCfgIntfPoisonReverse_Type.__name__ = "Integer32"
_RipCurCfgIntfPoisonReverse_Object = MibTableColumn
ripCurCfgIntfPoisonReverse = _RipCurCfgIntfPoisonReverse_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 1, 1, 8),
    _RipCurCfgIntfPoisonReverse_Type()
)
ripCurCfgIntfPoisonReverse.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgIntfPoisonReverse.setStatus("current")


class _RipCurCfgIntfState_Type(Integer32):
    """Custom type ripCurCfgIntfState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RipCurCfgIntfState_Type.__name__ = "Integer32"
_RipCurCfgIntfState_Object = MibTableColumn
ripCurCfgIntfState = _RipCurCfgIntfState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 1, 1, 9),
    _RipCurCfgIntfState_Type()
)
ripCurCfgIntfState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgIntfState.setStatus("current")


class _RipCurCfgIntfMetric_Type(Integer32):
    """Custom type ripCurCfgIntfMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_RipCurCfgIntfMetric_Type.__name__ = "Integer32"
_RipCurCfgIntfMetric_Object = MibTableColumn
ripCurCfgIntfMetric = _RipCurCfgIntfMetric_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 1, 1, 10),
    _RipCurCfgIntfMetric_Type()
)
ripCurCfgIntfMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgIntfMetric.setStatus("current")


class _RipCurCfgIntfAuth_Type(Integer32):
    """Custom type ripCurCfgIntfAuth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("password", 2))
    )


_RipCurCfgIntfAuth_Type.__name__ = "Integer32"
_RipCurCfgIntfAuth_Object = MibTableColumn
ripCurCfgIntfAuth = _RipCurCfgIntfAuth_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 1, 1, 11),
    _RipCurCfgIntfAuth_Type()
)
ripCurCfgIntfAuth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgIntfAuth.setStatus("current")


class _RipCurCfgIntfKey_Type(DisplayString):
    """Custom type ripCurCfgIntfKey based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_RipCurCfgIntfKey_Type.__name__ = "DisplayString"
_RipCurCfgIntfKey_Object = MibTableColumn
ripCurCfgIntfKey = _RipCurCfgIntfKey_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 1, 1, 12),
    _RipCurCfgIntfKey_Type()
)
ripCurCfgIntfKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgIntfKey.setStatus("current")


class _RipCurCfgIntfSplitHorizon_Type(Integer32):
    """Custom type ripCurCfgIntfSplitHorizon based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_RipCurCfgIntfSplitHorizon_Type.__name__ = "Integer32"
_RipCurCfgIntfSplitHorizon_Object = MibTableColumn
ripCurCfgIntfSplitHorizon = _RipCurCfgIntfSplitHorizon_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 1, 1, 13),
    _RipCurCfgIntfSplitHorizon_Type()
)
ripCurCfgIntfSplitHorizon.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgIntfSplitHorizon.setStatus("current")
_RipNewCfgIntfTable_Object = MibTable
ripNewCfgIntfTable = _RipNewCfgIntfTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 2)
)
if mibBuilder.loadTexts:
    ripNewCfgIntfTable.setStatus("current")
_RipNewCfgIntfEntry_Object = MibTableRow
ripNewCfgIntfEntry = _RipNewCfgIntfEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 2, 1)
)
ripNewCfgIntfEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ripNewCfgIntfIndex"),
)
if mibBuilder.loadTexts:
    ripNewCfgIntfEntry.setStatus("current")
_RipNewCfgIntfIndex_Type = Integer32
_RipNewCfgIntfIndex_Object = MibTableColumn
ripNewCfgIntfIndex = _RipNewCfgIntfIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 2, 1, 1),
    _RipNewCfgIntfIndex_Type()
)
ripNewCfgIntfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripNewCfgIntfIndex.setStatus("current")


class _RipNewCfgIntfVersion_Type(Integer32):
    """Custom type ripNewCfgIntfVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ripVersion1", 1),
          ("ripVersion2", 2),
          ("ripVersionBoth", 3))
    )


_RipNewCfgIntfVersion_Type.__name__ = "Integer32"
_RipNewCfgIntfVersion_Object = MibTableColumn
ripNewCfgIntfVersion = _RipNewCfgIntfVersion_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 2, 1, 2),
    _RipNewCfgIntfVersion_Type()
)
ripNewCfgIntfVersion.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgIntfVersion.setStatus("current")


class _RipNewCfgIntfSupply_Type(Integer32):
    """Custom type ripNewCfgIntfSupply based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RipNewCfgIntfSupply_Type.__name__ = "Integer32"
_RipNewCfgIntfSupply_Object = MibTableColumn
ripNewCfgIntfSupply = _RipNewCfgIntfSupply_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 2, 1, 3),
    _RipNewCfgIntfSupply_Type()
)
ripNewCfgIntfSupply.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgIntfSupply.setStatus("current")


class _RipNewCfgIntfListen_Type(Integer32):
    """Custom type ripNewCfgIntfListen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RipNewCfgIntfListen_Type.__name__ = "Integer32"
_RipNewCfgIntfListen_Object = MibTableColumn
ripNewCfgIntfListen = _RipNewCfgIntfListen_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 2, 1, 4),
    _RipNewCfgIntfListen_Type()
)
ripNewCfgIntfListen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgIntfListen.setStatus("current")


class _RipNewCfgIntfDefault_Type(Integer32):
    """Custom type ripNewCfgIntfDefault based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("both", 1),
          ("listen", 2),
          ("supply", 3),
          ("none", 4))
    )


_RipNewCfgIntfDefault_Type.__name__ = "Integer32"
_RipNewCfgIntfDefault_Object = MibTableColumn
ripNewCfgIntfDefault = _RipNewCfgIntfDefault_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 2, 1, 5),
    _RipNewCfgIntfDefault_Type()
)
ripNewCfgIntfDefault.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ripNewCfgIntfDefault.setStatus("current")


class _RipNewCfgIntfTrigUpdate_Type(Integer32):
    """Custom type ripNewCfgIntfTrigUpdate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RipNewCfgIntfTrigUpdate_Type.__name__ = "Integer32"
_RipNewCfgIntfTrigUpdate_Object = MibTableColumn
ripNewCfgIntfTrigUpdate = _RipNewCfgIntfTrigUpdate_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 2, 1, 6),
    _RipNewCfgIntfTrigUpdate_Type()
)
ripNewCfgIntfTrigUpdate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgIntfTrigUpdate.setStatus("current")


class _RipNewCfgIntfMcastUpdate_Type(Integer32):
    """Custom type ripNewCfgIntfMcastUpdate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RipNewCfgIntfMcastUpdate_Type.__name__ = "Integer32"
_RipNewCfgIntfMcastUpdate_Object = MibTableColumn
ripNewCfgIntfMcastUpdate = _RipNewCfgIntfMcastUpdate_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 2, 1, 7),
    _RipNewCfgIntfMcastUpdate_Type()
)
ripNewCfgIntfMcastUpdate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgIntfMcastUpdate.setStatus("current")


class _RipNewCfgIntfPoisonReverse_Type(Integer32):
    """Custom type ripNewCfgIntfPoisonReverse based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RipNewCfgIntfPoisonReverse_Type.__name__ = "Integer32"
_RipNewCfgIntfPoisonReverse_Object = MibTableColumn
ripNewCfgIntfPoisonReverse = _RipNewCfgIntfPoisonReverse_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 2, 1, 8),
    _RipNewCfgIntfPoisonReverse_Type()
)
ripNewCfgIntfPoisonReverse.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgIntfPoisonReverse.setStatus("current")


class _RipNewCfgIntfState_Type(Integer32):
    """Custom type ripNewCfgIntfState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RipNewCfgIntfState_Type.__name__ = "Integer32"
_RipNewCfgIntfState_Object = MibTableColumn
ripNewCfgIntfState = _RipNewCfgIntfState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 2, 1, 9),
    _RipNewCfgIntfState_Type()
)
ripNewCfgIntfState.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ripNewCfgIntfState.setStatus("current")


class _RipNewCfgIntfMetric_Type(Integer32):
    """Custom type ripNewCfgIntfMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_RipNewCfgIntfMetric_Type.__name__ = "Integer32"
_RipNewCfgIntfMetric_Object = MibTableColumn
ripNewCfgIntfMetric = _RipNewCfgIntfMetric_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 2, 1, 10),
    _RipNewCfgIntfMetric_Type()
)
ripNewCfgIntfMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgIntfMetric.setStatus("current")


class _RipNewCfgIntfAuth_Type(Integer32):
    """Custom type ripNewCfgIntfAuth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("password", 2))
    )


_RipNewCfgIntfAuth_Type.__name__ = "Integer32"
_RipNewCfgIntfAuth_Object = MibTableColumn
ripNewCfgIntfAuth = _RipNewCfgIntfAuth_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 2, 1, 11),
    _RipNewCfgIntfAuth_Type()
)
ripNewCfgIntfAuth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgIntfAuth.setStatus("current")


class _RipNewCfgIntfKey_Type(DisplayString):
    """Custom type ripNewCfgIntfKey based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_RipNewCfgIntfKey_Type.__name__ = "DisplayString"
_RipNewCfgIntfKey_Object = MibTableColumn
ripNewCfgIntfKey = _RipNewCfgIntfKey_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 2, 1, 12),
    _RipNewCfgIntfKey_Type()
)
ripNewCfgIntfKey.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ripNewCfgIntfKey.setStatus("current")


class _RipNewCfgIntfSplitHorizon_Type(Integer32):
    """Custom type ripNewCfgIntfSplitHorizon based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_RipNewCfgIntfSplitHorizon_Type.__name__ = "Integer32"
_RipNewCfgIntfSplitHorizon_Object = MibTableColumn
ripNewCfgIntfSplitHorizon = _RipNewCfgIntfSplitHorizon_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 2, 1, 13),
    _RipNewCfgIntfSplitHorizon_Type()
)
ripNewCfgIntfSplitHorizon.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgIntfSplitHorizon.setStatus("current")
_RipGeneral_ObjectIdentity = ObjectIdentity
ripGeneral = _RipGeneral_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 3)
)


class _Rip2CurCfgState_Type(Integer32):
    """Custom type rip2CurCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_Rip2CurCfgState_Type.__name__ = "Integer32"
_Rip2CurCfgState_Object = MibScalar
rip2CurCfgState = _Rip2CurCfgState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 3, 1),
    _Rip2CurCfgState_Type()
)
rip2CurCfgState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rip2CurCfgState.setStatus("current")


class _Rip2NewCfgState_Type(Integer32):
    """Custom type rip2NewCfgState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_Rip2NewCfgState_Type.__name__ = "Integer32"
_Rip2NewCfgState_Object = MibScalar
rip2NewCfgState = _Rip2NewCfgState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 3, 2),
    _Rip2NewCfgState_Type()
)
rip2NewCfgState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rip2NewCfgState.setStatus("current")


class _Rip2CurCfgUpdatePeriod_Type(Integer32):
    """Custom type rip2CurCfgUpdatePeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 120),
    )


_Rip2CurCfgUpdatePeriod_Type.__name__ = "Integer32"
_Rip2CurCfgUpdatePeriod_Object = MibScalar
rip2CurCfgUpdatePeriod = _Rip2CurCfgUpdatePeriod_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 3, 3),
    _Rip2CurCfgUpdatePeriod_Type()
)
rip2CurCfgUpdatePeriod.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rip2CurCfgUpdatePeriod.setStatus("current")


class _Rip2NewCfgUpdatePeriod_Type(Integer32):
    """Custom type rip2NewCfgUpdatePeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 120),
    )


_Rip2NewCfgUpdatePeriod_Type.__name__ = "Integer32"
_Rip2NewCfgUpdatePeriod_Object = MibScalar
rip2NewCfgUpdatePeriod = _Rip2NewCfgUpdatePeriod_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 3, 4),
    _Rip2NewCfgUpdatePeriod_Type()
)
rip2NewCfgUpdatePeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rip2NewCfgUpdatePeriod.setStatus("current")
_RipRouteRedistribution_ObjectIdentity = ObjectIdentity
ripRouteRedistribution = _RipRouteRedistribution_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 4)
)
_RipRedistributeStatic_ObjectIdentity = ObjectIdentity
ripRedistributeStatic = _RipRedistributeStatic_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 4, 1)
)


class _RipCurCfgStaticMetric_Type(Integer32):
    """Custom type ripCurCfgStaticMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_RipCurCfgStaticMetric_Type.__name__ = "Integer32"
_RipCurCfgStaticMetric_Object = MibScalar
ripCurCfgStaticMetric = _RipCurCfgStaticMetric_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 4, 1, 1),
    _RipCurCfgStaticMetric_Type()
)
ripCurCfgStaticMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgStaticMetric.setStatus("current")


class _RipNewCfgStaticMetric_Type(Integer32):
    """Custom type ripNewCfgStaticMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_RipNewCfgStaticMetric_Type.__name__ = "Integer32"
_RipNewCfgStaticMetric_Object = MibScalar
ripNewCfgStaticMetric = _RipNewCfgStaticMetric_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 4, 1, 2),
    _RipNewCfgStaticMetric_Type()
)
ripNewCfgStaticMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgStaticMetric.setStatus("current")
_RipCurCfgStaticOutRmapList_Type = OctetString
_RipCurCfgStaticOutRmapList_Object = MibScalar
ripCurCfgStaticOutRmapList = _RipCurCfgStaticOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 4, 1, 5),
    _RipCurCfgStaticOutRmapList_Type()
)
ripCurCfgStaticOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgStaticOutRmapList.setStatus("current")
_RipNewCfgStaticOutRmapList_Type = OctetString
_RipNewCfgStaticOutRmapList_Object = MibScalar
ripNewCfgStaticOutRmapList = _RipNewCfgStaticOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 4, 1, 6),
    _RipNewCfgStaticOutRmapList_Type()
)
ripNewCfgStaticOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripNewCfgStaticOutRmapList.setStatus("current")
_RipNewCfgStaticAddOutRmap_Type = Integer32
_RipNewCfgStaticAddOutRmap_Object = MibScalar
ripNewCfgStaticAddOutRmap = _RipNewCfgStaticAddOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 4, 1, 7),
    _RipNewCfgStaticAddOutRmap_Type()
)
ripNewCfgStaticAddOutRmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgStaticAddOutRmap.setStatus("current")
_RipNewCfgStaticRemoveOutRmap_Type = Integer32
_RipNewCfgStaticRemoveOutRmap_Object = MibScalar
ripNewCfgStaticRemoveOutRmap = _RipNewCfgStaticRemoveOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 4, 1, 8),
    _RipNewCfgStaticRemoveOutRmap_Type()
)
ripNewCfgStaticRemoveOutRmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgStaticRemoveOutRmap.setStatus("current")
_RipRedistributeFixed_ObjectIdentity = ObjectIdentity
ripRedistributeFixed = _RipRedistributeFixed_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 4, 4)
)


class _RipCurCfgFixedMetric_Type(Integer32):
    """Custom type ripCurCfgFixedMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_RipCurCfgFixedMetric_Type.__name__ = "Integer32"
_RipCurCfgFixedMetric_Object = MibScalar
ripCurCfgFixedMetric = _RipCurCfgFixedMetric_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 4, 4, 1),
    _RipCurCfgFixedMetric_Type()
)
ripCurCfgFixedMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgFixedMetric.setStatus("current")


class _RipNewCfgFixedMetric_Type(Integer32):
    """Custom type ripNewCfgFixedMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_RipNewCfgFixedMetric_Type.__name__ = "Integer32"
_RipNewCfgFixedMetric_Object = MibScalar
ripNewCfgFixedMetric = _RipNewCfgFixedMetric_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 4, 4, 2),
    _RipNewCfgFixedMetric_Type()
)
ripNewCfgFixedMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgFixedMetric.setStatus("current")
_RipCurCfgFixedOutRmapList_Type = OctetString
_RipCurCfgFixedOutRmapList_Object = MibScalar
ripCurCfgFixedOutRmapList = _RipCurCfgFixedOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 4, 4, 5),
    _RipCurCfgFixedOutRmapList_Type()
)
ripCurCfgFixedOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgFixedOutRmapList.setStatus("current")
_RipNewCfgFixedOutRmapList_Type = OctetString
_RipNewCfgFixedOutRmapList_Object = MibScalar
ripNewCfgFixedOutRmapList = _RipNewCfgFixedOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 4, 4, 6),
    _RipNewCfgFixedOutRmapList_Type()
)
ripNewCfgFixedOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripNewCfgFixedOutRmapList.setStatus("current")
_RipNewCfgFixedAddOutRmap_Type = Integer32
_RipNewCfgFixedAddOutRmap_Object = MibScalar
ripNewCfgFixedAddOutRmap = _RipNewCfgFixedAddOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 4, 4, 7),
    _RipNewCfgFixedAddOutRmap_Type()
)
ripNewCfgFixedAddOutRmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgFixedAddOutRmap.setStatus("current")
_RipNewCfgFixedRemoveOutRmap_Type = Integer32
_RipNewCfgFixedRemoveOutRmap_Object = MibScalar
ripNewCfgFixedRemoveOutRmap = _RipNewCfgFixedRemoveOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 4, 4, 8),
    _RipNewCfgFixedRemoveOutRmap_Type()
)
ripNewCfgFixedRemoveOutRmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgFixedRemoveOutRmap.setStatus("current")
_RipRedistributeOspf_ObjectIdentity = ObjectIdentity
ripRedistributeOspf = _RipRedistributeOspf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 4, 5)
)


class _RipCurCfgOspfMetric_Type(Integer32):
    """Custom type ripCurCfgOspfMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_RipCurCfgOspfMetric_Type.__name__ = "Integer32"
_RipCurCfgOspfMetric_Object = MibScalar
ripCurCfgOspfMetric = _RipCurCfgOspfMetric_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 4, 5, 1),
    _RipCurCfgOspfMetric_Type()
)
ripCurCfgOspfMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgOspfMetric.setStatus("current")


class _RipNewCfgOspfMetric_Type(Integer32):
    """Custom type ripNewCfgOspfMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_RipNewCfgOspfMetric_Type.__name__ = "Integer32"
_RipNewCfgOspfMetric_Object = MibScalar
ripNewCfgOspfMetric = _RipNewCfgOspfMetric_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 4, 5, 2),
    _RipNewCfgOspfMetric_Type()
)
ripNewCfgOspfMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgOspfMetric.setStatus("current")
_RipCurCfgOspfOutRmapList_Type = OctetString
_RipCurCfgOspfOutRmapList_Object = MibScalar
ripCurCfgOspfOutRmapList = _RipCurCfgOspfOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 4, 5, 5),
    _RipCurCfgOspfOutRmapList_Type()
)
ripCurCfgOspfOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgOspfOutRmapList.setStatus("current")
_RipNewCfgOspfOutRmapList_Type = OctetString
_RipNewCfgOspfOutRmapList_Object = MibScalar
ripNewCfgOspfOutRmapList = _RipNewCfgOspfOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 4, 5, 6),
    _RipNewCfgOspfOutRmapList_Type()
)
ripNewCfgOspfOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripNewCfgOspfOutRmapList.setStatus("current")
_RipNewCfgOspfAddOutRmap_Type = Integer32
_RipNewCfgOspfAddOutRmap_Object = MibScalar
ripNewCfgOspfAddOutRmap = _RipNewCfgOspfAddOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 4, 5, 7),
    _RipNewCfgOspfAddOutRmap_Type()
)
ripNewCfgOspfAddOutRmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgOspfAddOutRmap.setStatus("current")
_RipNewCfgOspfRemoveOutRmap_Type = Integer32
_RipNewCfgOspfRemoveOutRmap_Object = MibScalar
ripNewCfgOspfRemoveOutRmap = _RipNewCfgOspfRemoveOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 4, 5, 8),
    _RipNewCfgOspfRemoveOutRmap_Type()
)
ripNewCfgOspfRemoveOutRmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgOspfRemoveOutRmap.setStatus("current")
_RipRedistributeEospf_ObjectIdentity = ObjectIdentity
ripRedistributeEospf = _RipRedistributeEospf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 4, 6)
)


class _RipCurCfgEospfMetric_Type(Integer32):
    """Custom type ripCurCfgEospfMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_RipCurCfgEospfMetric_Type.__name__ = "Integer32"
_RipCurCfgEospfMetric_Object = MibScalar
ripCurCfgEospfMetric = _RipCurCfgEospfMetric_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 4, 6, 1),
    _RipCurCfgEospfMetric_Type()
)
ripCurCfgEospfMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgEospfMetric.setStatus("current")


class _RipNewCfgEospfMetric_Type(Integer32):
    """Custom type ripNewCfgEospfMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_RipNewCfgEospfMetric_Type.__name__ = "Integer32"
_RipNewCfgEospfMetric_Object = MibScalar
ripNewCfgEospfMetric = _RipNewCfgEospfMetric_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 4, 6, 2),
    _RipNewCfgEospfMetric_Type()
)
ripNewCfgEospfMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgEospfMetric.setStatus("current")
_RipCurCfgEospfOutRmapList_Type = OctetString
_RipCurCfgEospfOutRmapList_Object = MibScalar
ripCurCfgEospfOutRmapList = _RipCurCfgEospfOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 4, 6, 5),
    _RipCurCfgEospfOutRmapList_Type()
)
ripCurCfgEospfOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripCurCfgEospfOutRmapList.setStatus("current")
_RipNewCfgEospfOutRmapList_Type = OctetString
_RipNewCfgEospfOutRmapList_Object = MibScalar
ripNewCfgEospfOutRmapList = _RipNewCfgEospfOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 4, 6, 6),
    _RipNewCfgEospfOutRmapList_Type()
)
ripNewCfgEospfOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripNewCfgEospfOutRmapList.setStatus("current")
_RipNewCfgEospfAddOutRmap_Type = Integer32
_RipNewCfgEospfAddOutRmap_Object = MibScalar
ripNewCfgEospfAddOutRmap = _RipNewCfgEospfAddOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 4, 6, 7),
    _RipNewCfgEospfAddOutRmap_Type()
)
ripNewCfgEospfAddOutRmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgEospfAddOutRmap.setStatus("current")
_RipNewCfgEospfRemoveOutRmap_Type = Integer32
_RipNewCfgEospfRemoveOutRmap_Object = MibScalar
ripNewCfgEospfRemoveOutRmap = _RipNewCfgEospfRemoveOutRmap_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 1, 18, 4, 6, 8),
    _RipNewCfgEospfRemoveOutRmap_Type()
)
ripNewCfgEospfRemoveOutRmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripNewCfgEospfRemoveOutRmap.setStatus("current")
_Layer3Stats_ObjectIdentity = ObjectIdentity
layer3Stats = _Layer3Stats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2)
)
_ArpStats_ObjectIdentity = ObjectIdentity
arpStats = _ArpStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 2)
)
_ArpStatEntries_Type = Gauge32
_ArpStatEntries_Object = MibScalar
arpStatEntries = _ArpStatEntries_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 2, 1),
    _ArpStatEntries_Type()
)
arpStatEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    arpStatEntries.setStatus("current")
_ArpStatHighWater_Type = Gauge32
_ArpStatHighWater_Object = MibScalar
arpStatHighWater = _ArpStatHighWater_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 2, 2),
    _ArpStatHighWater_Type()
)
arpStatHighWater.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    arpStatHighWater.setStatus("current")
_ArpStatMaxEntries_Type = Gauge32
_ArpStatMaxEntries_Object = MibScalar
arpStatMaxEntries = _ArpStatMaxEntries_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 2, 3),
    _ArpStatMaxEntries_Type()
)
arpStatMaxEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    arpStatMaxEntries.setStatus("current")
_RouteStats_ObjectIdentity = ObjectIdentity
routeStats = _RouteStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 3)
)
_RouteStatEntries_Type = Gauge32
_RouteStatEntries_Object = MibScalar
routeStatEntries = _RouteStatEntries_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 3, 1),
    _RouteStatEntries_Type()
)
routeStatEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    routeStatEntries.setStatus("current")
_RouteStatHighWater_Type = Gauge32
_RouteStatHighWater_Object = MibScalar
routeStatHighWater = _RouteStatHighWater_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 3, 2),
    _RouteStatHighWater_Type()
)
routeStatHighWater.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    routeStatHighWater.setStatus("current")
_RouteStatMaxEntries_Type = Gauge32
_RouteStatMaxEntries_Object = MibScalar
routeStatMaxEntries = _RouteStatMaxEntries_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 3, 3),
    _RouteStatMaxEntries_Type()
)
routeStatMaxEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    routeStatMaxEntries.setStatus("current")
_VrrpStats_ObjectIdentity = ObjectIdentity
vrrpStats = _VrrpStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 4)
)
_VrrpStatInAdvers_Type = Counter32
_VrrpStatInAdvers_Object = MibScalar
vrrpStatInAdvers = _VrrpStatInAdvers_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 4, 1),
    _VrrpStatInAdvers_Type()
)
vrrpStatInAdvers.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpStatInAdvers.setStatus("current")
_VrrpStatOutAdvers_Type = Counter32
_VrrpStatOutAdvers_Object = MibScalar
vrrpStatOutAdvers = _VrrpStatOutAdvers_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 4, 2),
    _VrrpStatOutAdvers_Type()
)
vrrpStatOutAdvers.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpStatOutAdvers.setStatus("current")
_VrrpStatOutBadAdvers_Type = Counter32
_VrrpStatOutBadAdvers_Object = MibScalar
vrrpStatOutBadAdvers = _VrrpStatOutBadAdvers_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 4, 3),
    _VrrpStatOutBadAdvers_Type()
)
vrrpStatOutBadAdvers.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpStatOutBadAdvers.setStatus("current")
_VrrpStatBadVersion_Type = Counter32
_VrrpStatBadVersion_Object = MibScalar
vrrpStatBadVersion = _VrrpStatBadVersion_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 4, 4),
    _VrrpStatBadVersion_Type()
)
vrrpStatBadVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpStatBadVersion.setStatus("current")
_VrrpStatBadAddress_Type = Counter32
_VrrpStatBadAddress_Object = MibScalar
vrrpStatBadAddress = _VrrpStatBadAddress_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 4, 5),
    _VrrpStatBadAddress_Type()
)
vrrpStatBadAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpStatBadAddress.setStatus("current")
_VrrpStatBadPassword_Type = Counter32
_VrrpStatBadPassword_Object = MibScalar
vrrpStatBadPassword = _VrrpStatBadPassword_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 4, 6),
    _VrrpStatBadPassword_Type()
)
vrrpStatBadPassword.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpStatBadPassword.setStatus("current")
_VrrpStatBadVrid_Type = Counter32
_VrrpStatBadVrid_Object = MibScalar
vrrpStatBadVrid = _VrrpStatBadVrid_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 4, 7),
    _VrrpStatBadVrid_Type()
)
vrrpStatBadVrid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpStatBadVrid.setStatus("current")
_VrrpStatBadData_Type = Counter32
_VrrpStatBadData_Object = MibScalar
vrrpStatBadData = _VrrpStatBadData_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 4, 8),
    _VrrpStatBadData_Type()
)
vrrpStatBadData.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpStatBadData.setStatus("current")
_VrrpStatBadInterval_Type = Counter32
_VrrpStatBadInterval_Object = MibScalar
vrrpStatBadInterval = _VrrpStatBadInterval_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 4, 9),
    _VrrpStatBadInterval_Type()
)
vrrpStatBadInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpStatBadInterval.setStatus("current")
_OspfStats_ObjectIdentity = ObjectIdentity
ospfStats = _OspfStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5)
)
_OspfGeneralStats_ObjectIdentity = ObjectIdentity
ospfGeneralStats = _OspfGeneralStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1)
)
_OspfCumRxTxStats_ObjectIdentity = ObjectIdentity
ospfCumRxTxStats = _OspfCumRxTxStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 1)
)
_OspfCumRxPkts_Type = Counter32
_OspfCumRxPkts_Object = MibScalar
ospfCumRxPkts = _OspfCumRxPkts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 1, 1),
    _OspfCumRxPkts_Type()
)
ospfCumRxPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumRxPkts.setStatus("current")
_OspfCumTxPkts_Type = Counter32
_OspfCumTxPkts_Object = MibScalar
ospfCumTxPkts = _OspfCumTxPkts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 1, 2),
    _OspfCumTxPkts_Type()
)
ospfCumTxPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumTxPkts.setStatus("current")
_OspfCumRxHello_Type = Counter32
_OspfCumRxHello_Object = MibScalar
ospfCumRxHello = _OspfCumRxHello_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 1, 3),
    _OspfCumRxHello_Type()
)
ospfCumRxHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumRxHello.setStatus("current")
_OspfCumTxHello_Type = Counter32
_OspfCumTxHello_Object = MibScalar
ospfCumTxHello = _OspfCumTxHello_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 1, 4),
    _OspfCumTxHello_Type()
)
ospfCumTxHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumTxHello.setStatus("current")
_OspfCumRxDatabase_Type = Counter32
_OspfCumRxDatabase_Object = MibScalar
ospfCumRxDatabase = _OspfCumRxDatabase_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 1, 5),
    _OspfCumRxDatabase_Type()
)
ospfCumRxDatabase.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumRxDatabase.setStatus("current")
_OspfCumTxDatabase_Type = Counter32
_OspfCumTxDatabase_Object = MibScalar
ospfCumTxDatabase = _OspfCumTxDatabase_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 1, 6),
    _OspfCumTxDatabase_Type()
)
ospfCumTxDatabase.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumTxDatabase.setStatus("current")
_OspfCumRxlsReqs_Type = Counter32
_OspfCumRxlsReqs_Object = MibScalar
ospfCumRxlsReqs = _OspfCumRxlsReqs_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 1, 7),
    _OspfCumRxlsReqs_Type()
)
ospfCumRxlsReqs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumRxlsReqs.setStatus("current")
_OspfCumTxlsReqs_Type = Counter32
_OspfCumTxlsReqs_Object = MibScalar
ospfCumTxlsReqs = _OspfCumTxlsReqs_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 1, 8),
    _OspfCumTxlsReqs_Type()
)
ospfCumTxlsReqs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumTxlsReqs.setStatus("current")
_OspfCumRxlsAcks_Type = Counter32
_OspfCumRxlsAcks_Object = MibScalar
ospfCumRxlsAcks = _OspfCumRxlsAcks_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 1, 9),
    _OspfCumRxlsAcks_Type()
)
ospfCumRxlsAcks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumRxlsAcks.setStatus("current")
_OspfCumTxlsAcks_Type = Counter32
_OspfCumTxlsAcks_Object = MibScalar
ospfCumTxlsAcks = _OspfCumTxlsAcks_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 1, 10),
    _OspfCumTxlsAcks_Type()
)
ospfCumTxlsAcks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumTxlsAcks.setStatus("current")
_OspfCumRxlsUpdates_Type = Counter32
_OspfCumRxlsUpdates_Object = MibScalar
ospfCumRxlsUpdates = _OspfCumRxlsUpdates_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 1, 11),
    _OspfCumRxlsUpdates_Type()
)
ospfCumRxlsUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumRxlsUpdates.setStatus("current")
_OspfCumTxlsUpdates_Type = Counter32
_OspfCumTxlsUpdates_Object = MibScalar
ospfCumTxlsUpdates = _OspfCumTxlsUpdates_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 1, 12),
    _OspfCumTxlsUpdates_Type()
)
ospfCumTxlsUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumTxlsUpdates.setStatus("current")
_OspfCumNbrChangeStats_ObjectIdentity = ObjectIdentity
ospfCumNbrChangeStats = _OspfCumNbrChangeStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 2)
)
_OspfCumNbrhello_Type = Counter32
_OspfCumNbrhello_Object = MibScalar
ospfCumNbrhello = _OspfCumNbrhello_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 2, 1),
    _OspfCumNbrhello_Type()
)
ospfCumNbrhello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumNbrhello.setStatus("current")
_OspfCumNbrStart_Type = Counter32
_OspfCumNbrStart_Object = MibScalar
ospfCumNbrStart = _OspfCumNbrStart_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 2, 2),
    _OspfCumNbrStart_Type()
)
ospfCumNbrStart.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumNbrStart.setStatus("current")
_OspfCumNbrAdjointOk_Type = Counter32
_OspfCumNbrAdjointOk_Object = MibScalar
ospfCumNbrAdjointOk = _OspfCumNbrAdjointOk_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 2, 3),
    _OspfCumNbrAdjointOk_Type()
)
ospfCumNbrAdjointOk.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumNbrAdjointOk.setStatus("current")
_OspfCumNbrNegotiationDone_Type = Counter32
_OspfCumNbrNegotiationDone_Object = MibScalar
ospfCumNbrNegotiationDone = _OspfCumNbrNegotiationDone_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 2, 4),
    _OspfCumNbrNegotiationDone_Type()
)
ospfCumNbrNegotiationDone.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumNbrNegotiationDone.setStatus("current")
_OspfCumNbrExchangeDone_Type = Counter32
_OspfCumNbrExchangeDone_Object = MibScalar
ospfCumNbrExchangeDone = _OspfCumNbrExchangeDone_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 2, 5),
    _OspfCumNbrExchangeDone_Type()
)
ospfCumNbrExchangeDone.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumNbrExchangeDone.setStatus("current")
_OspfCumNbrBadRequests_Type = Counter32
_OspfCumNbrBadRequests_Object = MibScalar
ospfCumNbrBadRequests = _OspfCumNbrBadRequests_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 2, 6),
    _OspfCumNbrBadRequests_Type()
)
ospfCumNbrBadRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumNbrBadRequests.setStatus("current")
_OspfCumNbrBadSequence_Type = Counter32
_OspfCumNbrBadSequence_Object = MibScalar
ospfCumNbrBadSequence = _OspfCumNbrBadSequence_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 2, 7),
    _OspfCumNbrBadSequence_Type()
)
ospfCumNbrBadSequence.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumNbrBadSequence.setStatus("current")
_OspfCumNbrLoadingDone_Type = Counter32
_OspfCumNbrLoadingDone_Object = MibScalar
ospfCumNbrLoadingDone = _OspfCumNbrLoadingDone_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 2, 8),
    _OspfCumNbrLoadingDone_Type()
)
ospfCumNbrLoadingDone.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumNbrLoadingDone.setStatus("current")
_OspfCumNbrN1way_Type = Counter32
_OspfCumNbrN1way_Object = MibScalar
ospfCumNbrN1way = _OspfCumNbrN1way_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 2, 9),
    _OspfCumNbrN1way_Type()
)
ospfCumNbrN1way.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumNbrN1way.setStatus("current")
_OspfCumNbrRstAd_Type = Counter32
_OspfCumNbrRstAd_Object = MibScalar
ospfCumNbrRstAd = _OspfCumNbrRstAd_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 2, 10),
    _OspfCumNbrRstAd_Type()
)
ospfCumNbrRstAd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumNbrRstAd.setStatus("current")
_OspfCumNbrDown_Type = Counter32
_OspfCumNbrDown_Object = MibScalar
ospfCumNbrDown = _OspfCumNbrDown_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 2, 11),
    _OspfCumNbrDown_Type()
)
ospfCumNbrDown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumNbrDown.setStatus("current")
_OspfCumNbrN2way_Type = Counter32
_OspfCumNbrN2way_Object = MibScalar
ospfCumNbrN2way = _OspfCumNbrN2way_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 2, 12),
    _OspfCumNbrN2way_Type()
)
ospfCumNbrN2way.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumNbrN2way.setStatus("current")
_OspfCumIntfChangeStats_ObjectIdentity = ObjectIdentity
ospfCumIntfChangeStats = _OspfCumIntfChangeStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 3)
)
_OspfCumIntfHello_Type = Counter32
_OspfCumIntfHello_Object = MibScalar
ospfCumIntfHello = _OspfCumIntfHello_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 3, 1),
    _OspfCumIntfHello_Type()
)
ospfCumIntfHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumIntfHello.setStatus("current")
_OspfCumIntfDown_Type = Counter32
_OspfCumIntfDown_Object = MibScalar
ospfCumIntfDown = _OspfCumIntfDown_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 3, 2),
    _OspfCumIntfDown_Type()
)
ospfCumIntfDown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumIntfDown.setStatus("current")
_OspfCumIntfLoop_Type = Counter32
_OspfCumIntfLoop_Object = MibScalar
ospfCumIntfLoop = _OspfCumIntfLoop_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 3, 3),
    _OspfCumIntfLoop_Type()
)
ospfCumIntfLoop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumIntfLoop.setStatus("current")
_OspfCumIntfUnloop_Type = Counter32
_OspfCumIntfUnloop_Object = MibScalar
ospfCumIntfUnloop = _OspfCumIntfUnloop_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 3, 4),
    _OspfCumIntfUnloop_Type()
)
ospfCumIntfUnloop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumIntfUnloop.setStatus("current")
_OspfCumIntfWaitTimer_Type = Counter32
_OspfCumIntfWaitTimer_Object = MibScalar
ospfCumIntfWaitTimer = _OspfCumIntfWaitTimer_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 3, 5),
    _OspfCumIntfWaitTimer_Type()
)
ospfCumIntfWaitTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumIntfWaitTimer.setStatus("current")
_OspfCumIntfBackup_Type = Counter32
_OspfCumIntfBackup_Object = MibScalar
ospfCumIntfBackup = _OspfCumIntfBackup_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 3, 6),
    _OspfCumIntfBackup_Type()
)
ospfCumIntfBackup.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumIntfBackup.setStatus("current")
_OspfCumIntfNbrChange_Type = Counter32
_OspfCumIntfNbrChange_Object = MibScalar
ospfCumIntfNbrChange = _OspfCumIntfNbrChange_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 3, 7),
    _OspfCumIntfNbrChange_Type()
)
ospfCumIntfNbrChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfCumIntfNbrChange.setStatus("current")
_OspfTimersKickOffStats_ObjectIdentity = ObjectIdentity
ospfTimersKickOffStats = _OspfTimersKickOffStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 4)
)
_OspfTmrsKckOffHello_Type = Counter32
_OspfTmrsKckOffHello_Object = MibScalar
ospfTmrsKckOffHello = _OspfTmrsKckOffHello_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 4, 1),
    _OspfTmrsKckOffHello_Type()
)
ospfTmrsKckOffHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfTmrsKckOffHello.setStatus("current")
_OspfTmrsKckOffRetransmit_Type = Counter32
_OspfTmrsKckOffRetransmit_Object = MibScalar
ospfTmrsKckOffRetransmit = _OspfTmrsKckOffRetransmit_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 4, 2),
    _OspfTmrsKckOffRetransmit_Type()
)
ospfTmrsKckOffRetransmit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfTmrsKckOffRetransmit.setStatus("current")
_OspfTmrsKckOffLsaLock_Type = Counter32
_OspfTmrsKckOffLsaLock_Object = MibScalar
ospfTmrsKckOffLsaLock = _OspfTmrsKckOffLsaLock_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 4, 3),
    _OspfTmrsKckOffLsaLock_Type()
)
ospfTmrsKckOffLsaLock.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfTmrsKckOffLsaLock.setStatus("current")
_OspfTmrsKckOffLsaAck_Type = Counter32
_OspfTmrsKckOffLsaAck_Object = MibScalar
ospfTmrsKckOffLsaAck = _OspfTmrsKckOffLsaAck_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 4, 4),
    _OspfTmrsKckOffLsaAck_Type()
)
ospfTmrsKckOffLsaAck.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfTmrsKckOffLsaAck.setStatus("current")
_OspfTmrsKckOffDbage_Type = Counter32
_OspfTmrsKckOffDbage_Object = MibScalar
ospfTmrsKckOffDbage = _OspfTmrsKckOffDbage_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 4, 5),
    _OspfTmrsKckOffDbage_Type()
)
ospfTmrsKckOffDbage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfTmrsKckOffDbage.setStatus("current")
_OspfTmrsKckOffSummary_Type = Counter32
_OspfTmrsKckOffSummary_Object = MibScalar
ospfTmrsKckOffSummary = _OspfTmrsKckOffSummary_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 4, 6),
    _OspfTmrsKckOffSummary_Type()
)
ospfTmrsKckOffSummary.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfTmrsKckOffSummary.setStatus("current")
_OspfTmrsKckOffAseExport_Type = Counter32
_OspfTmrsKckOffAseExport_Object = MibScalar
ospfTmrsKckOffAseExport = _OspfTmrsKckOffAseExport_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 1, 4, 7),
    _OspfTmrsKckOffAseExport_Type()
)
ospfTmrsKckOffAseExport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfTmrsKckOffAseExport.setStatus("current")
_OspfArea_ObjectIdentity = ObjectIdentity
ospfArea = _OspfArea_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2)
)
_OspfAreaRxTxStats_Object = MibTable
ospfAreaRxTxStats = _OspfAreaRxTxStats_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 1)
)
if mibBuilder.loadTexts:
    ospfAreaRxTxStats.setStatus("current")
_OspfAreaRxTxStatsEntry_Object = MibTableRow
ospfAreaRxTxStatsEntry = _OspfAreaRxTxStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 1, 1)
)
ospfAreaRxTxStatsEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ospfAreaRxTxIndex"),
)
if mibBuilder.loadTexts:
    ospfAreaRxTxStatsEntry.setStatus("current")
_OspfAreaRxTxIndex_Type = Integer32
_OspfAreaRxTxIndex_Object = MibTableColumn
ospfAreaRxTxIndex = _OspfAreaRxTxIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 1, 1, 1),
    _OspfAreaRxTxIndex_Type()
)
ospfAreaRxTxIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaRxTxIndex.setStatus("current")
_OspfAreaRxPkts_Type = Counter32
_OspfAreaRxPkts_Object = MibTableColumn
ospfAreaRxPkts = _OspfAreaRxPkts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 1, 1, 2),
    _OspfAreaRxPkts_Type()
)
ospfAreaRxPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaRxPkts.setStatus("current")
_OspfAreaTxPkts_Type = Counter32
_OspfAreaTxPkts_Object = MibTableColumn
ospfAreaTxPkts = _OspfAreaTxPkts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 1, 1, 3),
    _OspfAreaTxPkts_Type()
)
ospfAreaTxPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaTxPkts.setStatus("current")
_OspfAreaRxHello_Type = Counter32
_OspfAreaRxHello_Object = MibTableColumn
ospfAreaRxHello = _OspfAreaRxHello_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 1, 1, 4),
    _OspfAreaRxHello_Type()
)
ospfAreaRxHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaRxHello.setStatus("current")
_OspfAreaTxHello_Type = Counter32
_OspfAreaTxHello_Object = MibTableColumn
ospfAreaTxHello = _OspfAreaTxHello_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 1, 1, 5),
    _OspfAreaTxHello_Type()
)
ospfAreaTxHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaTxHello.setStatus("current")
_OspfAreaRxDatabase_Type = Counter32
_OspfAreaRxDatabase_Object = MibTableColumn
ospfAreaRxDatabase = _OspfAreaRxDatabase_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 1, 1, 6),
    _OspfAreaRxDatabase_Type()
)
ospfAreaRxDatabase.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaRxDatabase.setStatus("current")
_OspfAreaTxDatabase_Type = Counter32
_OspfAreaTxDatabase_Object = MibTableColumn
ospfAreaTxDatabase = _OspfAreaTxDatabase_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 1, 1, 7),
    _OspfAreaTxDatabase_Type()
)
ospfAreaTxDatabase.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaTxDatabase.setStatus("current")
_OspfAreaRxlsReqs_Type = Counter32
_OspfAreaRxlsReqs_Object = MibTableColumn
ospfAreaRxlsReqs = _OspfAreaRxlsReqs_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 1, 1, 8),
    _OspfAreaRxlsReqs_Type()
)
ospfAreaRxlsReqs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaRxlsReqs.setStatus("current")
_OspfAreaTxlsReqs_Type = Counter32
_OspfAreaTxlsReqs_Object = MibTableColumn
ospfAreaTxlsReqs = _OspfAreaTxlsReqs_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 1, 1, 9),
    _OspfAreaTxlsReqs_Type()
)
ospfAreaTxlsReqs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaTxlsReqs.setStatus("current")
_OspfAreaRxlsAcks_Type = Counter32
_OspfAreaRxlsAcks_Object = MibTableColumn
ospfAreaRxlsAcks = _OspfAreaRxlsAcks_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 1, 1, 10),
    _OspfAreaRxlsAcks_Type()
)
ospfAreaRxlsAcks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaRxlsAcks.setStatus("current")
_OspfAreaTxlsAcks_Type = Counter32
_OspfAreaTxlsAcks_Object = MibTableColumn
ospfAreaTxlsAcks = _OspfAreaTxlsAcks_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 1, 1, 11),
    _OspfAreaTxlsAcks_Type()
)
ospfAreaTxlsAcks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaTxlsAcks.setStatus("current")
_OspfAreaRxlsUpdates_Type = Counter32
_OspfAreaRxlsUpdates_Object = MibTableColumn
ospfAreaRxlsUpdates = _OspfAreaRxlsUpdates_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 1, 1, 12),
    _OspfAreaRxlsUpdates_Type()
)
ospfAreaRxlsUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaRxlsUpdates.setStatus("current")
_OspfAreaTxlsUpdates_Type = Counter32
_OspfAreaTxlsUpdates_Object = MibTableColumn
ospfAreaTxlsUpdates = _OspfAreaTxlsUpdates_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 1, 1, 13),
    _OspfAreaTxlsUpdates_Type()
)
ospfAreaTxlsUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaTxlsUpdates.setStatus("current")
_OspfAreaNbrChangeStats_Object = MibTable
ospfAreaNbrChangeStats = _OspfAreaNbrChangeStats_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 2)
)
if mibBuilder.loadTexts:
    ospfAreaNbrChangeStats.setStatus("current")
_OspfAreaNbrChangeStatsEntry_Object = MibTableRow
ospfAreaNbrChangeStatsEntry = _OspfAreaNbrChangeStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 2, 1)
)
ospfAreaNbrChangeStatsEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ospfAreaNbrIndex"),
)
if mibBuilder.loadTexts:
    ospfAreaNbrChangeStatsEntry.setStatus("current")
_OspfAreaNbrIndex_Type = Integer32
_OspfAreaNbrIndex_Object = MibTableColumn
ospfAreaNbrIndex = _OspfAreaNbrIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 2, 1, 1),
    _OspfAreaNbrIndex_Type()
)
ospfAreaNbrIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaNbrIndex.setStatus("current")
_OspfAreaNbrhello_Type = Counter32
_OspfAreaNbrhello_Object = MibTableColumn
ospfAreaNbrhello = _OspfAreaNbrhello_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 2, 1, 2),
    _OspfAreaNbrhello_Type()
)
ospfAreaNbrhello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaNbrhello.setStatus("current")
_OspfAreaNbrStart_Type = Counter32
_OspfAreaNbrStart_Object = MibTableColumn
ospfAreaNbrStart = _OspfAreaNbrStart_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 2, 1, 3),
    _OspfAreaNbrStart_Type()
)
ospfAreaNbrStart.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaNbrStart.setStatus("current")
_OspfAreaNbrAdjointOk_Type = Counter32
_OspfAreaNbrAdjointOk_Object = MibTableColumn
ospfAreaNbrAdjointOk = _OspfAreaNbrAdjointOk_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 2, 1, 4),
    _OspfAreaNbrAdjointOk_Type()
)
ospfAreaNbrAdjointOk.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaNbrAdjointOk.setStatus("current")
_OspfAreaNbrNegotiationDone_Type = Counter32
_OspfAreaNbrNegotiationDone_Object = MibTableColumn
ospfAreaNbrNegotiationDone = _OspfAreaNbrNegotiationDone_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 2, 1, 5),
    _OspfAreaNbrNegotiationDone_Type()
)
ospfAreaNbrNegotiationDone.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaNbrNegotiationDone.setStatus("current")
_OspfAreaNbrExchangeDone_Type = Counter32
_OspfAreaNbrExchangeDone_Object = MibTableColumn
ospfAreaNbrExchangeDone = _OspfAreaNbrExchangeDone_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 2, 1, 6),
    _OspfAreaNbrExchangeDone_Type()
)
ospfAreaNbrExchangeDone.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaNbrExchangeDone.setStatus("current")
_OspfAreaNbrBadRequests_Type = Counter32
_OspfAreaNbrBadRequests_Object = MibTableColumn
ospfAreaNbrBadRequests = _OspfAreaNbrBadRequests_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 2, 1, 7),
    _OspfAreaNbrBadRequests_Type()
)
ospfAreaNbrBadRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaNbrBadRequests.setStatus("current")
_OspfAreaNbrBadSequence_Type = Counter32
_OspfAreaNbrBadSequence_Object = MibTableColumn
ospfAreaNbrBadSequence = _OspfAreaNbrBadSequence_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 2, 1, 8),
    _OspfAreaNbrBadSequence_Type()
)
ospfAreaNbrBadSequence.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaNbrBadSequence.setStatus("current")
_OspfAreaNbrLoadingDone_Type = Counter32
_OspfAreaNbrLoadingDone_Object = MibTableColumn
ospfAreaNbrLoadingDone = _OspfAreaNbrLoadingDone_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 2, 1, 9),
    _OspfAreaNbrLoadingDone_Type()
)
ospfAreaNbrLoadingDone.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaNbrLoadingDone.setStatus("current")
_OspfAreaNbrN1way_Type = Counter32
_OspfAreaNbrN1way_Object = MibTableColumn
ospfAreaNbrN1way = _OspfAreaNbrN1way_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 2, 1, 10),
    _OspfAreaNbrN1way_Type()
)
ospfAreaNbrN1way.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaNbrN1way.setStatus("current")
_OspfAreaNbrRstAd_Type = Counter32
_OspfAreaNbrRstAd_Object = MibTableColumn
ospfAreaNbrRstAd = _OspfAreaNbrRstAd_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 2, 1, 11),
    _OspfAreaNbrRstAd_Type()
)
ospfAreaNbrRstAd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaNbrRstAd.setStatus("current")
_OspfAreaNbrDown_Type = Counter32
_OspfAreaNbrDown_Object = MibTableColumn
ospfAreaNbrDown = _OspfAreaNbrDown_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 2, 1, 12),
    _OspfAreaNbrDown_Type()
)
ospfAreaNbrDown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaNbrDown.setStatus("current")
_OspfAreaNbrN2way_Type = Counter32
_OspfAreaNbrN2way_Object = MibTableColumn
ospfAreaNbrN2way = _OspfAreaNbrN2way_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 2, 1, 13),
    _OspfAreaNbrN2way_Type()
)
ospfAreaNbrN2way.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaNbrN2way.setStatus("current")
_OspfAreaChangeStats_Object = MibTable
ospfAreaChangeStats = _OspfAreaChangeStats_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 3)
)
if mibBuilder.loadTexts:
    ospfAreaChangeStats.setStatus("current")
_OspfAreaChangeStatsEntry_Object = MibTableRow
ospfAreaChangeStatsEntry = _OspfAreaChangeStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 3, 1)
)
ospfAreaChangeStatsEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ospfAreaIntfIndex"),
)
if mibBuilder.loadTexts:
    ospfAreaChangeStatsEntry.setStatus("current")
_OspfAreaIntfIndex_Type = Integer32
_OspfAreaIntfIndex_Object = MibTableColumn
ospfAreaIntfIndex = _OspfAreaIntfIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 3, 1, 1),
    _OspfAreaIntfIndex_Type()
)
ospfAreaIntfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaIntfIndex.setStatus("current")
_OspfAreaIntfHello_Type = Counter32
_OspfAreaIntfHello_Object = MibTableColumn
ospfAreaIntfHello = _OspfAreaIntfHello_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 3, 1, 2),
    _OspfAreaIntfHello_Type()
)
ospfAreaIntfHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaIntfHello.setStatus("current")
_OspfAreaIntfDown_Type = Counter32
_OspfAreaIntfDown_Object = MibTableColumn
ospfAreaIntfDown = _OspfAreaIntfDown_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 3, 1, 3),
    _OspfAreaIntfDown_Type()
)
ospfAreaIntfDown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaIntfDown.setStatus("current")
_OspfAreaIntfLoop_Type = Counter32
_OspfAreaIntfLoop_Object = MibTableColumn
ospfAreaIntfLoop = _OspfAreaIntfLoop_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 3, 1, 4),
    _OspfAreaIntfLoop_Type()
)
ospfAreaIntfLoop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaIntfLoop.setStatus("current")
_OspfAreaIntfUnloop_Type = Counter32
_OspfAreaIntfUnloop_Object = MibTableColumn
ospfAreaIntfUnloop = _OspfAreaIntfUnloop_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 3, 1, 5),
    _OspfAreaIntfUnloop_Type()
)
ospfAreaIntfUnloop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaIntfUnloop.setStatus("current")
_OspfAreaIntfWaitTimer_Type = Counter32
_OspfAreaIntfWaitTimer_Object = MibTableColumn
ospfAreaIntfWaitTimer = _OspfAreaIntfWaitTimer_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 3, 1, 6),
    _OspfAreaIntfWaitTimer_Type()
)
ospfAreaIntfWaitTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaIntfWaitTimer.setStatus("current")
_OspfAreaIntfBackup_Type = Counter32
_OspfAreaIntfBackup_Object = MibTableColumn
ospfAreaIntfBackup = _OspfAreaIntfBackup_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 3, 1, 7),
    _OspfAreaIntfBackup_Type()
)
ospfAreaIntfBackup.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaIntfBackup.setStatus("current")
_OspfAreaIntfNbrChange_Type = Counter32
_OspfAreaIntfNbrChange_Object = MibTableColumn
ospfAreaIntfNbrChange = _OspfAreaIntfNbrChange_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 3, 1, 8),
    _OspfAreaIntfNbrChange_Type()
)
ospfAreaIntfNbrChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaIntfNbrChange.setStatus("current")
_OspfAreaErrorStats_Object = MibTable
ospfAreaErrorStats = _OspfAreaErrorStats_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 4)
)
if mibBuilder.loadTexts:
    ospfAreaErrorStats.setStatus("current")
_OspfAreaErrorStatsEntry_Object = MibTableRow
ospfAreaErrorStatsEntry = _OspfAreaErrorStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 4, 1)
)
ospfAreaErrorStatsEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ospfAreaErrIndex"),
)
if mibBuilder.loadTexts:
    ospfAreaErrorStatsEntry.setStatus("current")
_OspfAreaErrIndex_Type = Integer32
_OspfAreaErrIndex_Object = MibTableColumn
ospfAreaErrIndex = _OspfAreaErrIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 4, 1, 1),
    _OspfAreaErrIndex_Type()
)
ospfAreaErrIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaErrIndex.setStatus("current")
_OspfAreaErrAuthFailure_Type = Counter32
_OspfAreaErrAuthFailure_Object = MibTableColumn
ospfAreaErrAuthFailure = _OspfAreaErrAuthFailure_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 4, 1, 2),
    _OspfAreaErrAuthFailure_Type()
)
ospfAreaErrAuthFailure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaErrAuthFailure.setStatus("current")
_OspfAreaErrNetmaskMismatch_Type = Counter32
_OspfAreaErrNetmaskMismatch_Object = MibTableColumn
ospfAreaErrNetmaskMismatch = _OspfAreaErrNetmaskMismatch_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 4, 1, 3),
    _OspfAreaErrNetmaskMismatch_Type()
)
ospfAreaErrNetmaskMismatch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaErrNetmaskMismatch.setStatus("current")
_OspfAreaErrHelloMismatch_Type = Counter32
_OspfAreaErrHelloMismatch_Object = MibTableColumn
ospfAreaErrHelloMismatch = _OspfAreaErrHelloMismatch_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 4, 1, 4),
    _OspfAreaErrHelloMismatch_Type()
)
ospfAreaErrHelloMismatch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaErrHelloMismatch.setStatus("current")
_OspfAreaErrDeadMismatch_Type = Counter32
_OspfAreaErrDeadMismatch_Object = MibTableColumn
ospfAreaErrDeadMismatch = _OspfAreaErrDeadMismatch_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 4, 1, 5),
    _OspfAreaErrDeadMismatch_Type()
)
ospfAreaErrDeadMismatch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaErrDeadMismatch.setStatus("current")
_OspfAreaErrOptionsMismatch_Type = Counter32
_OspfAreaErrOptionsMismatch_Object = MibTableColumn
ospfAreaErrOptionsMismatch = _OspfAreaErrOptionsMismatch_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 4, 1, 6),
    _OspfAreaErrOptionsMismatch_Type()
)
ospfAreaErrOptionsMismatch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaErrOptionsMismatch.setStatus("current")
_OspfAreaErrUnknownNbr_Type = Counter32
_OspfAreaErrUnknownNbr_Object = MibTableColumn
ospfAreaErrUnknownNbr = _OspfAreaErrUnknownNbr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 4, 1, 7),
    _OspfAreaErrUnknownNbr_Type()
)
ospfAreaErrUnknownNbr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaErrUnknownNbr.setStatus("current")
_OspfAreaErrAreaMismatch_Type = Counter32
_OspfAreaErrAreaMismatch_Object = MibTableColumn
ospfAreaErrAreaMismatch = _OspfAreaErrAreaMismatch_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 2, 4, 1, 8),
    _OspfAreaErrAreaMismatch_Type()
)
ospfAreaErrAreaMismatch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaErrAreaMismatch.setStatus("current")
_OspfInterface_ObjectIdentity = ObjectIdentity
ospfInterface = _OspfInterface_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3)
)
_OspfIntfRxTxStats_Object = MibTable
ospfIntfRxTxStats = _OspfIntfRxTxStats_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 1)
)
if mibBuilder.loadTexts:
    ospfIntfRxTxStats.setStatus("current")
_OspfIntfRxTxStatsEntry_Object = MibTableRow
ospfIntfRxTxStatsEntry = _OspfIntfRxTxStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 1, 1)
)
ospfIntfRxTxStatsEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ospfIntfRxTxIndex"),
)
if mibBuilder.loadTexts:
    ospfIntfRxTxStatsEntry.setStatus("current")
_OspfIntfRxTxIndex_Type = Integer32
_OspfIntfRxTxIndex_Object = MibTableColumn
ospfIntfRxTxIndex = _OspfIntfRxTxIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 1, 1, 1),
    _OspfIntfRxTxIndex_Type()
)
ospfIntfRxTxIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfRxTxIndex.setStatus("current")
_OspfIntfRxPkts_Type = Counter32
_OspfIntfRxPkts_Object = MibTableColumn
ospfIntfRxPkts = _OspfIntfRxPkts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 1, 1, 2),
    _OspfIntfRxPkts_Type()
)
ospfIntfRxPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfRxPkts.setStatus("current")
_OspfIntfTxPkts_Type = Counter32
_OspfIntfTxPkts_Object = MibTableColumn
ospfIntfTxPkts = _OspfIntfTxPkts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 1, 1, 3),
    _OspfIntfTxPkts_Type()
)
ospfIntfTxPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfTxPkts.setStatus("current")
_OspfIntfRxHello_Type = Counter32
_OspfIntfRxHello_Object = MibTableColumn
ospfIntfRxHello = _OspfIntfRxHello_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 1, 1, 4),
    _OspfIntfRxHello_Type()
)
ospfIntfRxHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfRxHello.setStatus("current")
_OspfIntfTxHello_Type = Counter32
_OspfIntfTxHello_Object = MibTableColumn
ospfIntfTxHello = _OspfIntfTxHello_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 1, 1, 5),
    _OspfIntfTxHello_Type()
)
ospfIntfTxHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfTxHello.setStatus("current")
_OspfIntfRxDatabase_Type = Counter32
_OspfIntfRxDatabase_Object = MibTableColumn
ospfIntfRxDatabase = _OspfIntfRxDatabase_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 1, 1, 6),
    _OspfIntfRxDatabase_Type()
)
ospfIntfRxDatabase.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfRxDatabase.setStatus("current")
_OspfIntfTxDatabase_Type = Counter32
_OspfIntfTxDatabase_Object = MibTableColumn
ospfIntfTxDatabase = _OspfIntfTxDatabase_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 1, 1, 7),
    _OspfIntfTxDatabase_Type()
)
ospfIntfTxDatabase.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfTxDatabase.setStatus("current")
_OspfIntfRxlsReqs_Type = Counter32
_OspfIntfRxlsReqs_Object = MibTableColumn
ospfIntfRxlsReqs = _OspfIntfRxlsReqs_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 1, 1, 8),
    _OspfIntfRxlsReqs_Type()
)
ospfIntfRxlsReqs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfRxlsReqs.setStatus("current")
_OspfIntfTxlsReqs_Type = Counter32
_OspfIntfTxlsReqs_Object = MibTableColumn
ospfIntfTxlsReqs = _OspfIntfTxlsReqs_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 1, 1, 9),
    _OspfIntfTxlsReqs_Type()
)
ospfIntfTxlsReqs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfTxlsReqs.setStatus("current")
_OspfIntfRxlsAcks_Type = Counter32
_OspfIntfRxlsAcks_Object = MibTableColumn
ospfIntfRxlsAcks = _OspfIntfRxlsAcks_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 1, 1, 10),
    _OspfIntfRxlsAcks_Type()
)
ospfIntfRxlsAcks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfRxlsAcks.setStatus("current")
_OspfIntfTxlsAcks_Type = Counter32
_OspfIntfTxlsAcks_Object = MibTableColumn
ospfIntfTxlsAcks = _OspfIntfTxlsAcks_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 1, 1, 11),
    _OspfIntfTxlsAcks_Type()
)
ospfIntfTxlsAcks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfTxlsAcks.setStatus("current")
_OspfIntfRxlsUpdates_Type = Counter32
_OspfIntfRxlsUpdates_Object = MibTableColumn
ospfIntfRxlsUpdates = _OspfIntfRxlsUpdates_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 1, 1, 12),
    _OspfIntfRxlsUpdates_Type()
)
ospfIntfRxlsUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfRxlsUpdates.setStatus("current")
_OspfIntfTxlsUpdates_Type = Counter32
_OspfIntfTxlsUpdates_Object = MibTableColumn
ospfIntfTxlsUpdates = _OspfIntfTxlsUpdates_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 1, 1, 13),
    _OspfIntfTxlsUpdates_Type()
)
ospfIntfTxlsUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfTxlsUpdates.setStatus("current")
_OspfIntfNbrChangeStats_Object = MibTable
ospfIntfNbrChangeStats = _OspfIntfNbrChangeStats_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 2)
)
if mibBuilder.loadTexts:
    ospfIntfNbrChangeStats.setStatus("current")
_OspfIntfNbrChangeStatsEntry_Object = MibTableRow
ospfIntfNbrChangeStatsEntry = _OspfIntfNbrChangeStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 2, 1)
)
ospfIntfNbrChangeStatsEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ospfIntfNbrIndex"),
)
if mibBuilder.loadTexts:
    ospfIntfNbrChangeStatsEntry.setStatus("current")
_OspfIntfNbrIndex_Type = Integer32
_OspfIntfNbrIndex_Object = MibTableColumn
ospfIntfNbrIndex = _OspfIntfNbrIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 2, 1, 1),
    _OspfIntfNbrIndex_Type()
)
ospfIntfNbrIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfNbrIndex.setStatus("current")
_OspfIntfNbrhello_Type = Counter32
_OspfIntfNbrhello_Object = MibTableColumn
ospfIntfNbrhello = _OspfIntfNbrhello_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 2, 1, 2),
    _OspfIntfNbrhello_Type()
)
ospfIntfNbrhello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfNbrhello.setStatus("current")
_OspfIntfNbrStart_Type = Counter32
_OspfIntfNbrStart_Object = MibTableColumn
ospfIntfNbrStart = _OspfIntfNbrStart_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 2, 1, 3),
    _OspfIntfNbrStart_Type()
)
ospfIntfNbrStart.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfNbrStart.setStatus("current")
_OspfIntfNbrAdjointOk_Type = Counter32
_OspfIntfNbrAdjointOk_Object = MibTableColumn
ospfIntfNbrAdjointOk = _OspfIntfNbrAdjointOk_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 2, 1, 4),
    _OspfIntfNbrAdjointOk_Type()
)
ospfIntfNbrAdjointOk.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfNbrAdjointOk.setStatus("current")
_OspfIntfNbrNegotiationDone_Type = Counter32
_OspfIntfNbrNegotiationDone_Object = MibTableColumn
ospfIntfNbrNegotiationDone = _OspfIntfNbrNegotiationDone_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 2, 1, 5),
    _OspfIntfNbrNegotiationDone_Type()
)
ospfIntfNbrNegotiationDone.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfNbrNegotiationDone.setStatus("current")
_OspfIntfNbrExchangeDone_Type = Counter32
_OspfIntfNbrExchangeDone_Object = MibTableColumn
ospfIntfNbrExchangeDone = _OspfIntfNbrExchangeDone_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 2, 1, 6),
    _OspfIntfNbrExchangeDone_Type()
)
ospfIntfNbrExchangeDone.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfNbrExchangeDone.setStatus("current")
_OspfIntfNbrBadRequests_Type = Counter32
_OspfIntfNbrBadRequests_Object = MibTableColumn
ospfIntfNbrBadRequests = _OspfIntfNbrBadRequests_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 2, 1, 7),
    _OspfIntfNbrBadRequests_Type()
)
ospfIntfNbrBadRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfNbrBadRequests.setStatus("current")
_OspfIntfNbrBadSequence_Type = Counter32
_OspfIntfNbrBadSequence_Object = MibTableColumn
ospfIntfNbrBadSequence = _OspfIntfNbrBadSequence_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 2, 1, 8),
    _OspfIntfNbrBadSequence_Type()
)
ospfIntfNbrBadSequence.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfNbrBadSequence.setStatus("current")
_OspfIntfNbrLoadingDone_Type = Counter32
_OspfIntfNbrLoadingDone_Object = MibTableColumn
ospfIntfNbrLoadingDone = _OspfIntfNbrLoadingDone_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 2, 1, 9),
    _OspfIntfNbrLoadingDone_Type()
)
ospfIntfNbrLoadingDone.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfNbrLoadingDone.setStatus("current")
_OspfIntfNbrN1way_Type = Counter32
_OspfIntfNbrN1way_Object = MibTableColumn
ospfIntfNbrN1way = _OspfIntfNbrN1way_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 2, 1, 10),
    _OspfIntfNbrN1way_Type()
)
ospfIntfNbrN1way.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfNbrN1way.setStatus("current")
_OspfIntfNbrRstAd_Type = Counter32
_OspfIntfNbrRstAd_Object = MibTableColumn
ospfIntfNbrRstAd = _OspfIntfNbrRstAd_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 2, 1, 11),
    _OspfIntfNbrRstAd_Type()
)
ospfIntfNbrRstAd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfNbrRstAd.setStatus("current")
_OspfIntfNbrDown_Type = Counter32
_OspfIntfNbrDown_Object = MibTableColumn
ospfIntfNbrDown = _OspfIntfNbrDown_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 2, 1, 12),
    _OspfIntfNbrDown_Type()
)
ospfIntfNbrDown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfNbrDown.setStatus("current")
_OspfIntfNbrN2way_Type = Counter32
_OspfIntfNbrN2way_Object = MibTableColumn
ospfIntfNbrN2way = _OspfIntfNbrN2way_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 2, 1, 13),
    _OspfIntfNbrN2way_Type()
)
ospfIntfNbrN2way.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfNbrN2way.setStatus("current")
_OspfIntfChangeStats_Object = MibTable
ospfIntfChangeStats = _OspfIntfChangeStats_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 3)
)
if mibBuilder.loadTexts:
    ospfIntfChangeStats.setStatus("current")
_OspfIntfChangeStatsEntry_Object = MibTableRow
ospfIntfChangeStatsEntry = _OspfIntfChangeStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 3, 1)
)
ospfIntfChangeStatsEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ospfIntfIndex"),
)
if mibBuilder.loadTexts:
    ospfIntfChangeStatsEntry.setStatus("current")
_OspfIntfIndex_Type = Integer32
_OspfIntfIndex_Object = MibTableColumn
ospfIntfIndex = _OspfIntfIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 3, 1, 1),
    _OspfIntfIndex_Type()
)
ospfIntfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfIndex.setStatus("current")
_OspfIntfHello_Type = Counter32
_OspfIntfHello_Object = MibTableColumn
ospfIntfHello = _OspfIntfHello_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 3, 1, 2),
    _OspfIntfHello_Type()
)
ospfIntfHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfHello.setStatus("current")
_OspfIntfDown_Type = Counter32
_OspfIntfDown_Object = MibTableColumn
ospfIntfDown = _OspfIntfDown_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 3, 1, 3),
    _OspfIntfDown_Type()
)
ospfIntfDown.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfDown.setStatus("current")
_OspfIntfLoop_Type = Counter32
_OspfIntfLoop_Object = MibTableColumn
ospfIntfLoop = _OspfIntfLoop_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 3, 1, 4),
    _OspfIntfLoop_Type()
)
ospfIntfLoop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfLoop.setStatus("current")
_OspfIntfUnloop_Type = Counter32
_OspfIntfUnloop_Object = MibTableColumn
ospfIntfUnloop = _OspfIntfUnloop_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 3, 1, 5),
    _OspfIntfUnloop_Type()
)
ospfIntfUnloop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfUnloop.setStatus("current")
_OspfIntfWaitTimer_Type = Counter32
_OspfIntfWaitTimer_Object = MibTableColumn
ospfIntfWaitTimer = _OspfIntfWaitTimer_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 3, 1, 6),
    _OspfIntfWaitTimer_Type()
)
ospfIntfWaitTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfWaitTimer.setStatus("current")
_OspfIntfBackup_Type = Counter32
_OspfIntfBackup_Object = MibTableColumn
ospfIntfBackup = _OspfIntfBackup_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 3, 1, 7),
    _OspfIntfBackup_Type()
)
ospfIntfBackup.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfBackup.setStatus("current")
_OspfIntfNbrChange_Type = Counter32
_OspfIntfNbrChange_Object = MibTableColumn
ospfIntfNbrChange = _OspfIntfNbrChange_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 3, 1, 8),
    _OspfIntfNbrChange_Type()
)
ospfIntfNbrChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfNbrChange.setStatus("current")
_OspfIntfErrorStats_Object = MibTable
ospfIntfErrorStats = _OspfIntfErrorStats_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 4)
)
if mibBuilder.loadTexts:
    ospfIntfErrorStats.setStatus("current")
_OspfIntfErrorStatsEntry_Object = MibTableRow
ospfIntfErrorStatsEntry = _OspfIntfErrorStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 4, 1)
)
ospfIntfErrorStatsEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ospfIntfErrIndex"),
)
if mibBuilder.loadTexts:
    ospfIntfErrorStatsEntry.setStatus("current")
_OspfIntfErrIndex_Type = Integer32
_OspfIntfErrIndex_Object = MibTableColumn
ospfIntfErrIndex = _OspfIntfErrIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 4, 1, 1),
    _OspfIntfErrIndex_Type()
)
ospfIntfErrIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfErrIndex.setStatus("current")
_OspfIntfErrAuthFailure_Type = Counter32
_OspfIntfErrAuthFailure_Object = MibTableColumn
ospfIntfErrAuthFailure = _OspfIntfErrAuthFailure_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 4, 1, 2),
    _OspfIntfErrAuthFailure_Type()
)
ospfIntfErrAuthFailure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfErrAuthFailure.setStatus("current")
_OspfIntfErrNetmaskMismatch_Type = Counter32
_OspfIntfErrNetmaskMismatch_Object = MibTableColumn
ospfIntfErrNetmaskMismatch = _OspfIntfErrNetmaskMismatch_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 4, 1, 3),
    _OspfIntfErrNetmaskMismatch_Type()
)
ospfIntfErrNetmaskMismatch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfErrNetmaskMismatch.setStatus("current")
_OspfIntfErrHelloMismatch_Type = Counter32
_OspfIntfErrHelloMismatch_Object = MibTableColumn
ospfIntfErrHelloMismatch = _OspfIntfErrHelloMismatch_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 4, 1, 4),
    _OspfIntfErrHelloMismatch_Type()
)
ospfIntfErrHelloMismatch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfErrHelloMismatch.setStatus("current")
_OspfIntfErrDeadMismatch_Type = Counter32
_OspfIntfErrDeadMismatch_Object = MibTableColumn
ospfIntfErrDeadMismatch = _OspfIntfErrDeadMismatch_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 4, 1, 5),
    _OspfIntfErrDeadMismatch_Type()
)
ospfIntfErrDeadMismatch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfErrDeadMismatch.setStatus("current")
_OspfIntfErrOptionsMismatch_Type = Counter32
_OspfIntfErrOptionsMismatch_Object = MibTableColumn
ospfIntfErrOptionsMismatch = _OspfIntfErrOptionsMismatch_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 4, 1, 6),
    _OspfIntfErrOptionsMismatch_Type()
)
ospfIntfErrOptionsMismatch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfErrOptionsMismatch.setStatus("current")
_OspfIntfErrUnknownNbr_Type = Counter32
_OspfIntfErrUnknownNbr_Object = MibTableColumn
ospfIntfErrUnknownNbr = _OspfIntfErrUnknownNbr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 4, 1, 7),
    _OspfIntfErrUnknownNbr_Type()
)
ospfIntfErrUnknownNbr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfErrUnknownNbr.setStatus("current")
_OspfIntfErrAreaMismatch_Type = Counter32
_OspfIntfErrAreaMismatch_Object = MibTableColumn
ospfIntfErrAreaMismatch = _OspfIntfErrAreaMismatch_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 5, 3, 4, 1, 8),
    _OspfIntfErrAreaMismatch_Type()
)
ospfIntfErrAreaMismatch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfErrAreaMismatch.setStatus("current")
_ClearStats_ObjectIdentity = ObjectIdentity
clearStats = _ClearStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 6)
)


class _IpClearStats_Type(Integer32):
    """Custom type ipClearStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("ok", 2))
    )


_IpClearStats_Type.__name__ = "Integer32"
_IpClearStats_Object = MibScalar
ipClearStats = _IpClearStats_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 6, 1),
    _IpClearStats_Type()
)
ipClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ipClearStats.setStatus("current")


class _VrrpClearStats_Type(Integer32):
    """Custom type vrrpClearStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_VrrpClearStats_Type.__name__ = "Integer32"
_VrrpClearStats_Object = MibScalar
vrrpClearStats = _VrrpClearStats_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 6, 2),
    _VrrpClearStats_Type()
)
vrrpClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vrrpClearStats.setStatus("current")


class _RipClearStats_Type(Integer32):
    """Custom type ripClearStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("ok", 2))
    )


_RipClearStats_Type.__name__ = "Integer32"
_RipClearStats_Object = MibScalar
ripClearStats = _RipClearStats_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 6, 4),
    _RipClearStats_Type()
)
ripClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ripClearStats.setStatus("current")


class _OspfClearStats_Type(Integer32):
    """Custom type ospfClearStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("ok", 2))
    )


_OspfClearStats_Type.__name__ = "Integer32"
_OspfClearStats_Object = MibScalar
ospfClearStats = _OspfClearStats_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 6, 5),
    _OspfClearStats_Type()
)
ospfClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ospfClearStats.setStatus("current")


class _TcpClearStats_Type(Integer32):
    """Custom type tcpClearStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("ok", 2))
    )


_TcpClearStats_Type.__name__ = "Integer32"
_TcpClearStats_Object = MibScalar
tcpClearStats = _TcpClearStats_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 6, 6),
    _TcpClearStats_Type()
)
tcpClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tcpClearStats.setStatus("current")


class _UdpClearStats_Type(Integer32):
    """Custom type udpClearStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("ok", 2))
    )


_UdpClearStats_Type.__name__ = "Integer32"
_UdpClearStats_Object = MibScalar
udpClearStats = _UdpClearStats_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 6, 7),
    _UdpClearStats_Type()
)
udpClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    udpClearStats.setStatus("current")


class _DnsClearStats_Type(Integer32):
    """Custom type dnsClearStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("ok", 2))
    )


_DnsClearStats_Type.__name__ = "Integer32"
_DnsClearStats_Object = MibScalar
dnsClearStats = _DnsClearStats_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 6, 8),
    _DnsClearStats_Type()
)
dnsClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dnsClearStats.setStatus("current")


class _ArpClearStats_Type(Integer32):
    """Custom type arpClearStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("ok", 2))
    )


_ArpClearStats_Type.__name__ = "Integer32"
_ArpClearStats_Object = MibScalar
arpClearStats = _ArpClearStats_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 6, 9),
    _ArpClearStats_Type()
)
arpClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    arpClearStats.setStatus("current")


class _IcmpClearStats_Type(Integer32):
    """Custom type icmpClearStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("ok", 2))
    )


_IcmpClearStats_Type.__name__ = "Integer32"
_IcmpClearStats_Object = MibScalar
icmpClearStats = _IcmpClearStats_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 6, 10),
    _IcmpClearStats_Type()
)
icmpClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    icmpClearStats.setStatus("current")


class _RouteClearStats_Type(Integer32):
    """Custom type routeClearStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("ok", 2))
    )


_RouteClearStats_Type.__name__ = "Integer32"
_RouteClearStats_Object = MibScalar
routeClearStats = _RouteClearStats_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 6, 11),
    _RouteClearStats_Type()
)
routeClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    routeClearStats.setStatus("current")
_IgmpStats_ObjectIdentity = ObjectIdentity
igmpStats = _IgmpStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 7)
)
_IgmpSnoopStats_Object = MibTable
igmpSnoopStats = _IgmpSnoopStats_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 7, 1)
)
if mibBuilder.loadTexts:
    igmpSnoopStats.setStatus("current")
_IgmpSnoopStatsEntry_Object = MibTableRow
igmpSnoopStatsEntry = _IgmpSnoopStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 7, 1, 1)
)
igmpSnoopStatsEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "igmpSnoopVlanIndex"),
)
if mibBuilder.loadTexts:
    igmpSnoopStatsEntry.setStatus("current")
_IgmpSnoopVlanIndex_Type = Integer32
_IgmpSnoopVlanIndex_Object = MibTableColumn
igmpSnoopVlanIndex = _IgmpSnoopVlanIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 7, 1, 1, 1),
    _IgmpSnoopVlanIndex_Type()
)
igmpSnoopVlanIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpSnoopVlanIndex.setStatus("current")
_RxIgmpValidPkts_Type = Counter32
_RxIgmpValidPkts_Object = MibTableColumn
rxIgmpValidPkts = _RxIgmpValidPkts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 7, 1, 1, 2),
    _RxIgmpValidPkts_Type()
)
rxIgmpValidPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxIgmpValidPkts.setStatus("current")
_RxIgmpInvalidPkts_Type = Counter32
_RxIgmpInvalidPkts_Object = MibTableColumn
rxIgmpInvalidPkts = _RxIgmpInvalidPkts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 7, 1, 1, 3),
    _RxIgmpInvalidPkts_Type()
)
rxIgmpInvalidPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxIgmpInvalidPkts.setStatus("current")
_RxIgmpGenQueries_Type = Counter32
_RxIgmpGenQueries_Object = MibTableColumn
rxIgmpGenQueries = _RxIgmpGenQueries_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 7, 1, 1, 4),
    _RxIgmpGenQueries_Type()
)
rxIgmpGenQueries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxIgmpGenQueries.setStatus("current")
_RxIgmpGrpSpecificQueries_Type = Counter32
_RxIgmpGrpSpecificQueries_Object = MibTableColumn
rxIgmpGrpSpecificQueries = _RxIgmpGrpSpecificQueries_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 7, 1, 1, 5),
    _RxIgmpGrpSpecificQueries_Type()
)
rxIgmpGrpSpecificQueries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxIgmpGrpSpecificQueries.setStatus("current")
_RxIgmpLeaves_Type = Counter32
_RxIgmpLeaves_Object = MibTableColumn
rxIgmpLeaves = _RxIgmpLeaves_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 7, 1, 1, 6),
    _RxIgmpLeaves_Type()
)
rxIgmpLeaves.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxIgmpLeaves.setStatus("current")
_RxIgmpReports_Type = Counter32
_RxIgmpReports_Object = MibTableColumn
rxIgmpReports = _RxIgmpReports_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 7, 1, 1, 7),
    _RxIgmpReports_Type()
)
rxIgmpReports.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxIgmpReports.setStatus("current")
_TxIgmpGrpSpecificQueries_Type = Counter32
_TxIgmpGrpSpecificQueries_Object = MibTableColumn
txIgmpGrpSpecificQueries = _TxIgmpGrpSpecificQueries_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 7, 1, 1, 8),
    _TxIgmpGrpSpecificQueries_Type()
)
txIgmpGrpSpecificQueries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    txIgmpGrpSpecificQueries.setStatus("current")
_TxIgmpReports_Type = Counter32
_TxIgmpReports_Object = MibTableColumn
txIgmpReports = _TxIgmpReports_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 7, 1, 1, 9),
    _TxIgmpReports_Type()
)
txIgmpReports.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    txIgmpReports.setStatus("current")
_TxIgmpLeaves_Type = Counter32
_TxIgmpLeaves_Object = MibTableColumn
txIgmpLeaves = _TxIgmpLeaves_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 7, 1, 1, 10),
    _TxIgmpLeaves_Type()
)
txIgmpLeaves.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    txIgmpLeaves.setStatus("current")
_RxIgmpGroupSourceSpecificQueries_Type = Counter32
_RxIgmpGroupSourceSpecificQueries_Object = MibTableColumn
rxIgmpGroupSourceSpecificQueries = _RxIgmpGroupSourceSpecificQueries_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 7, 1, 1, 11),
    _RxIgmpGroupSourceSpecificQueries_Type()
)
rxIgmpGroupSourceSpecificQueries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxIgmpGroupSourceSpecificQueries.setStatus("current")
_RxIgmpV3CurrentStateRecords_Type = Counter32
_RxIgmpV3CurrentStateRecords_Object = MibTableColumn
rxIgmpV3CurrentStateRecords = _RxIgmpV3CurrentStateRecords_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 7, 1, 1, 12),
    _RxIgmpV3CurrentStateRecords_Type()
)
rxIgmpV3CurrentStateRecords.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxIgmpV3CurrentStateRecords.setStatus("current")
_RxIgmpV3SourceListChangeRecords_Type = Counter32
_RxIgmpV3SourceListChangeRecords_Object = MibTableColumn
rxIgmpV3SourceListChangeRecords = _RxIgmpV3SourceListChangeRecords_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 7, 1, 1, 13),
    _RxIgmpV3SourceListChangeRecords_Type()
)
rxIgmpV3SourceListChangeRecords.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxIgmpV3SourceListChangeRecords.setStatus("current")
_RxIgmpV3FilterChangeRecords_Type = Counter32
_RxIgmpV3FilterChangeRecords_Object = MibTableColumn
rxIgmpV3FilterChangeRecords = _RxIgmpV3FilterChangeRecords_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 7, 1, 1, 14),
    _RxIgmpV3FilterChangeRecords_Type()
)
rxIgmpV3FilterChangeRecords.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rxIgmpV3FilterChangeRecords.setStatus("current")


class _IgmpClearAllStats_Type(Integer32):
    """Custom type igmpClearAllStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("ok", 2))
    )


_IgmpClearAllStats_Type.__name__ = "Integer32"
_IgmpClearAllStats_Object = MibScalar
igmpClearAllStats = _IgmpClearAllStats_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 7, 2),
    _IgmpClearAllStats_Type()
)
igmpClearAllStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    igmpClearAllStats.setStatus("current")
_IgmpStatsTotalIgmpGroups_Type = Counter32
_IgmpStatsTotalIgmpGroups_Object = MibScalar
igmpStatsTotalIgmpGroups = _IgmpStatsTotalIgmpGroups_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 7, 3),
    _IgmpStatsTotalIgmpGroups_Type()
)
igmpStatsTotalIgmpGroups.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpStatsTotalIgmpGroups.setStatus("current")
_IgmpStatsTotalIpmcGroups_Type = Counter32
_IgmpStatsTotalIpmcGroups_Object = MibScalar
igmpStatsTotalIpmcGroups = _IgmpStatsTotalIpmcGroups_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 7, 4),
    _IgmpStatsTotalIpmcGroups_Type()
)
igmpStatsTotalIpmcGroups.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpStatsTotalIpmcGroups.setStatus("current")
_IpStats_ObjectIdentity = ObjectIdentity
ipStats = _IpStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 8)
)
_IpStatsInReceives_Type = Counter32
_IpStatsInReceives_Object = MibScalar
ipStatsInReceives = _IpStatsInReceives_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 8, 1),
    _IpStatsInReceives_Type()
)
ipStatsInReceives.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipStatsInReceives.setStatus("current")
_IpStatsInHdrErrors_Type = Counter32
_IpStatsInHdrErrors_Object = MibScalar
ipStatsInHdrErrors = _IpStatsInHdrErrors_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 8, 2),
    _IpStatsInHdrErrors_Type()
)
ipStatsInHdrErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipStatsInHdrErrors.setStatus("current")
_IpStatsInAddrErrors_Type = Counter32
_IpStatsInAddrErrors_Object = MibScalar
ipStatsInAddrErrors = _IpStatsInAddrErrors_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 8, 3),
    _IpStatsInAddrErrors_Type()
)
ipStatsInAddrErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipStatsInAddrErrors.setStatus("current")
_IpStatsInUnknownProtos_Type = Counter32
_IpStatsInUnknownProtos_Object = MibScalar
ipStatsInUnknownProtos = _IpStatsInUnknownProtos_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 8, 4),
    _IpStatsInUnknownProtos_Type()
)
ipStatsInUnknownProtos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipStatsInUnknownProtos.setStatus("current")
_IpStatsInDiscards_Type = Counter32
_IpStatsInDiscards_Object = MibScalar
ipStatsInDiscards = _IpStatsInDiscards_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 8, 5),
    _IpStatsInDiscards_Type()
)
ipStatsInDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipStatsInDiscards.setStatus("current")
_IpStatsInDelivers_Type = Counter32
_IpStatsInDelivers_Object = MibScalar
ipStatsInDelivers = _IpStatsInDelivers_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 8, 6),
    _IpStatsInDelivers_Type()
)
ipStatsInDelivers.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipStatsInDelivers.setStatus("current")
_IpStatsOutRequests_Type = Counter32
_IpStatsOutRequests_Object = MibScalar
ipStatsOutRequests = _IpStatsOutRequests_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 8, 7),
    _IpStatsOutRequests_Type()
)
ipStatsOutRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipStatsOutRequests.setStatus("current")
_IpStatsOutDiscards_Type = Counter32
_IpStatsOutDiscards_Object = MibScalar
ipStatsOutDiscards = _IpStatsOutDiscards_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 8, 8),
    _IpStatsOutDiscards_Type()
)
ipStatsOutDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipStatsOutDiscards.setStatus("current")
_IpStatsDefaultTTL_Type = Counter32
_IpStatsDefaultTTL_Object = MibScalar
ipStatsDefaultTTL = _IpStatsDefaultTTL_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 8, 9),
    _IpStatsDefaultTTL_Type()
)
ipStatsDefaultTTL.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipStatsDefaultTTL.setStatus("current")
_Rip2Stats_ObjectIdentity = ObjectIdentity
rip2Stats = _Rip2Stats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 13)
)
_RipStatInPackets_Type = Counter32
_RipStatInPackets_Object = MibScalar
ripStatInPackets = _RipStatInPackets_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 13, 1),
    _RipStatInPackets_Type()
)
ripStatInPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripStatInPackets.setStatus("current")
_RipStatOutPackets_Type = Counter32
_RipStatOutPackets_Object = MibScalar
ripStatOutPackets = _RipStatOutPackets_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 13, 2),
    _RipStatOutPackets_Type()
)
ripStatOutPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripStatOutPackets.setStatus("current")
_RipStatInRequestPkts_Type = Counter32
_RipStatInRequestPkts_Object = MibScalar
ripStatInRequestPkts = _RipStatInRequestPkts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 13, 3),
    _RipStatInRequestPkts_Type()
)
ripStatInRequestPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripStatInRequestPkts.setStatus("current")
_RipStatInResponsePkts_Type = Counter32
_RipStatInResponsePkts_Object = MibScalar
ripStatInResponsePkts = _RipStatInResponsePkts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 13, 4),
    _RipStatInResponsePkts_Type()
)
ripStatInResponsePkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripStatInResponsePkts.setStatus("current")
_RipStatOutRequestPkts_Type = Counter32
_RipStatOutRequestPkts_Object = MibScalar
ripStatOutRequestPkts = _RipStatOutRequestPkts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 13, 5),
    _RipStatOutRequestPkts_Type()
)
ripStatOutRequestPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripStatOutRequestPkts.setStatus("current")
_RipStatOutResponsePkts_Type = Counter32
_RipStatOutResponsePkts_Object = MibScalar
ripStatOutResponsePkts = _RipStatOutResponsePkts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 13, 6),
    _RipStatOutResponsePkts_Type()
)
ripStatOutResponsePkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripStatOutResponsePkts.setStatus("current")
_RipStatRouteTimeout_Type = Counter32
_RipStatRouteTimeout_Object = MibScalar
ripStatRouteTimeout = _RipStatRouteTimeout_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 13, 7),
    _RipStatRouteTimeout_Type()
)
ripStatRouteTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripStatRouteTimeout.setStatus("current")
_RipStatInBadSizePkts_Type = Counter32
_RipStatInBadSizePkts_Object = MibScalar
ripStatInBadSizePkts = _RipStatInBadSizePkts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 13, 8),
    _RipStatInBadSizePkts_Type()
)
ripStatInBadSizePkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripStatInBadSizePkts.setStatus("current")
_RipStatInBadVersion_Type = Counter32
_RipStatInBadVersion_Object = MibScalar
ripStatInBadVersion = _RipStatInBadVersion_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 13, 9),
    _RipStatInBadVersion_Type()
)
ripStatInBadVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripStatInBadVersion.setStatus("current")
_RipStatInBadZeros_Type = Counter32
_RipStatInBadZeros_Object = MibScalar
ripStatInBadZeros = _RipStatInBadZeros_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 13, 10),
    _RipStatInBadZeros_Type()
)
ripStatInBadZeros.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripStatInBadZeros.setStatus("current")
_RipStatInBadSourcePort_Type = Counter32
_RipStatInBadSourcePort_Object = MibScalar
ripStatInBadSourcePort = _RipStatInBadSourcePort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 13, 11),
    _RipStatInBadSourcePort_Type()
)
ripStatInBadSourcePort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripStatInBadSourcePort.setStatus("current")
_RipStatInBadSourceIP_Type = Counter32
_RipStatInBadSourceIP_Object = MibScalar
ripStatInBadSourceIP = _RipStatInBadSourceIP_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 13, 12),
    _RipStatInBadSourceIP_Type()
)
ripStatInBadSourceIP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripStatInBadSourceIP.setStatus("current")
_RipStatInSelfRcvPkts_Type = Counter32
_RipStatInSelfRcvPkts_Object = MibScalar
ripStatInSelfRcvPkts = _RipStatInSelfRcvPkts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 13, 13),
    _RipStatInSelfRcvPkts_Type()
)
ripStatInSelfRcvPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripStatInSelfRcvPkts.setStatus("current")
_DnsStats_ObjectIdentity = ObjectIdentity
dnsStats = _DnsStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 14)
)
_DnsStatInGoodDnsRequests_Type = Counter32
_DnsStatInGoodDnsRequests_Object = MibScalar
dnsStatInGoodDnsRequests = _DnsStatInGoodDnsRequests_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 14, 1),
    _DnsStatInGoodDnsRequests_Type()
)
dnsStatInGoodDnsRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dnsStatInGoodDnsRequests.setStatus("current")
_DnsStatOutDnsRequests_Type = Counter32
_DnsStatOutDnsRequests_Object = MibScalar
dnsStatOutDnsRequests = _DnsStatOutDnsRequests_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 14, 2),
    _DnsStatOutDnsRequests_Type()
)
dnsStatOutDnsRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dnsStatOutDnsRequests.setStatus("current")
_DnsStatInBadDnsRequests_Type = Counter32
_DnsStatInBadDnsRequests_Object = MibScalar
dnsStatInBadDnsRequests = _DnsStatInBadDnsRequests_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 14, 3),
    _DnsStatInBadDnsRequests_Type()
)
dnsStatInBadDnsRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dnsStatInBadDnsRequests.setStatus("current")
_Geal3Stats_ObjectIdentity = ObjectIdentity
geal3Stats = _Geal3Stats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 15)
)
_MaxL3TableSize_Type = Integer32
_MaxL3TableSize_Object = MibScalar
maxL3TableSize = _MaxL3TableSize_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 15, 1),
    _MaxL3TableSize_Type()
)
maxL3TableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxL3TableSize.setStatus("current")
_NoL3EntriesUsed_Type = Integer32
_NoL3EntriesUsed_Object = MibScalar
noL3EntriesUsed = _NoL3EntriesUsed_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 15, 2),
    _NoL3EntriesUsed_Type()
)
noL3EntriesUsed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    noL3EntriesUsed.setStatus("current")
_MaxLpmTableSize_Type = Integer32
_MaxLpmTableSize_Object = MibScalar
maxLpmTableSize = _MaxLpmTableSize_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 15, 3),
    _MaxLpmTableSize_Type()
)
maxLpmTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxLpmTableSize.setStatus("current")
_NoLpmEntriesUsed_Type = Integer32
_NoLpmEntriesUsed_Object = MibScalar
noLpmEntriesUsed = _NoLpmEntriesUsed_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 15, 4),
    _NoLpmEntriesUsed_Type()
)
noLpmEntriesUsed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    noLpmEntriesUsed.setStatus("current")
_MaxBlockInLpmTable_Type = Integer32
_MaxBlockInLpmTable_Object = MibScalar
maxBlockInLpmTable = _MaxBlockInLpmTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 15, 5),
    _MaxBlockInLpmTable_Type()
)
maxBlockInLpmTable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maxBlockInLpmTable.setStatus("current")
_NoBlocksUsedInLpmTable_Type = Integer32
_NoBlocksUsedInLpmTable_Object = MibScalar
noBlocksUsedInLpmTable = _NoBlocksUsedInLpmTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 2, 15, 6),
    _NoBlocksUsedInLpmTable_Type()
)
noBlocksUsedInLpmTable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    noBlocksUsedInLpmTable.setStatus("current")
_Layer3Info_ObjectIdentity = ObjectIdentity
layer3Info = _Layer3Info_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3)
)
_IpRoutingInfo_ObjectIdentity = ObjectIdentity
ipRoutingInfo = _IpRoutingInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 1)
)
_IpRouteInfoTable_Object = MibTable
ipRouteInfoTable = _IpRouteInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 1, 1)
)
if mibBuilder.loadTexts:
    ipRouteInfoTable.setStatus("current")
_IpRouteInfoEntry_Object = MibTableRow
ipRouteInfoEntry = _IpRouteInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 1, 1, 1)
)
ipRouteInfoEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ipRouteInfoIndx"),
)
if mibBuilder.loadTexts:
    ipRouteInfoEntry.setStatus("current")
_IpRouteInfoIndx_Type = Integer32
_IpRouteInfoIndx_Object = MibTableColumn
ipRouteInfoIndx = _IpRouteInfoIndx_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 1, 1, 1, 1),
    _IpRouteInfoIndx_Type()
)
ipRouteInfoIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipRouteInfoIndx.setStatus("current")
_IpRouteInfoDestIp_Type = IpAddress
_IpRouteInfoDestIp_Object = MibTableColumn
ipRouteInfoDestIp = _IpRouteInfoDestIp_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 1, 1, 1, 2),
    _IpRouteInfoDestIp_Type()
)
ipRouteInfoDestIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipRouteInfoDestIp.setStatus("current")
_IpRouteInfoMask_Type = IpAddress
_IpRouteInfoMask_Object = MibTableColumn
ipRouteInfoMask = _IpRouteInfoMask_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 1, 1, 1, 3),
    _IpRouteInfoMask_Type()
)
ipRouteInfoMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipRouteInfoMask.setStatus("current")
_IpRouteInfoGateway_Type = IpAddress
_IpRouteInfoGateway_Object = MibTableColumn
ipRouteInfoGateway = _IpRouteInfoGateway_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 1, 1, 1, 4),
    _IpRouteInfoGateway_Type()
)
ipRouteInfoGateway.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipRouteInfoGateway.setStatus("current")


class _IpRouteInfoTag_Type(Integer32):
    """Custom type ipRouteInfoTag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("fixed", 1),
          ("static", 2),
          ("addr", 3),
          ("rip", 4),
          ("broadcast", 5),
          ("martian", 6),
          ("multicast", 7),
          ("ospf", 10),
          ("none", 11))
    )


_IpRouteInfoTag_Type.__name__ = "Integer32"
_IpRouteInfoTag_Object = MibTableColumn
ipRouteInfoTag = _IpRouteInfoTag_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 1, 1, 1, 5),
    _IpRouteInfoTag_Type()
)
ipRouteInfoTag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipRouteInfoTag.setStatus("current")


class _IpRouteInfoType_Type(Integer32):
    """Custom type ipRouteInfoType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("indirect", 1),
          ("direct", 2),
          ("local", 3),
          ("broadcast", 4),
          ("martian", 5),
          ("multicast", 6),
          ("other", 7))
    )


_IpRouteInfoType_Type.__name__ = "Integer32"
_IpRouteInfoType_Object = MibTableColumn
ipRouteInfoType = _IpRouteInfoType_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 1, 1, 1, 6),
    _IpRouteInfoType_Type()
)
ipRouteInfoType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipRouteInfoType.setStatus("current")
_IpRouteInfoInterface_Type = Integer32
_IpRouteInfoInterface_Object = MibTableColumn
ipRouteInfoInterface = _IpRouteInfoInterface_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 1, 1, 1, 7),
    _IpRouteInfoInterface_Type()
)
ipRouteInfoInterface.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipRouteInfoInterface.setStatus("current")
_IpRouteInfoMetric_Type = Integer32
_IpRouteInfoMetric_Object = MibTableColumn
ipRouteInfoMetric = _IpRouteInfoMetric_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 1, 1, 1, 8),
    _IpRouteInfoMetric_Type()
)
ipRouteInfoMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipRouteInfoMetric.setStatus("current")


class _RouteTableClear_Type(Integer32):
    """Custom type routeTableClear based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_RouteTableClear_Type.__name__ = "Integer32"
_RouteTableClear_Object = MibScalar
routeTableClear = _RouteTableClear_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 1, 2),
    _RouteTableClear_Type()
)
routeTableClear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    routeTableClear.setStatus("current")
_ArpInfo_ObjectIdentity = ObjectIdentity
arpInfo = _ArpInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 2)
)
_ArpInfoTable_Object = MibTable
arpInfoTable = _ArpInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 2, 1)
)
if mibBuilder.loadTexts:
    arpInfoTable.setStatus("current")
_ArpInfoEntry_Object = MibTableRow
arpInfoEntry = _ArpInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 2, 1, 1)
)
arpInfoEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "arpInfoDestIp"),
)
if mibBuilder.loadTexts:
    arpInfoEntry.setStatus("current")
_ArpInfoDestIp_Type = IpAddress
_ArpInfoDestIp_Object = MibTableColumn
arpInfoDestIp = _ArpInfoDestIp_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 2, 1, 1, 1),
    _ArpInfoDestIp_Type()
)
arpInfoDestIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    arpInfoDestIp.setStatus("current")
_ArpInfoMacAddr_Type = PhysAddress
_ArpInfoMacAddr_Object = MibTableColumn
arpInfoMacAddr = _ArpInfoMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 2, 1, 1, 2),
    _ArpInfoMacAddr_Type()
)
arpInfoMacAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    arpInfoMacAddr.setStatus("current")
_ArpInfoVLAN_Type = Integer32
_ArpInfoVLAN_Object = MibTableColumn
arpInfoVLAN = _ArpInfoVLAN_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 2, 1, 1, 3),
    _ArpInfoVLAN_Type()
)
arpInfoVLAN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    arpInfoVLAN.setStatus("current")
_ArpInfoSrcPort_Type = Integer32
_ArpInfoSrcPort_Object = MibTableColumn
arpInfoSrcPort = _ArpInfoSrcPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 2, 1, 1, 4),
    _ArpInfoSrcPort_Type()
)
arpInfoSrcPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    arpInfoSrcPort.setStatus("current")


class _ArpInfoFlag_Type(Integer32):
    """Custom type arpInfoFlag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("unresolved", 2),
          ("permanent", 3),
          ("indirect", 4))
    )


_ArpInfoFlag_Type.__name__ = "Integer32"
_ArpInfoFlag_Object = MibTableColumn
arpInfoFlag = _ArpInfoFlag_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 2, 1, 1, 6),
    _ArpInfoFlag_Type()
)
arpInfoFlag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    arpInfoFlag.setStatus("current")


class _ArpCacheClear_Type(Integer32):
    """Custom type arpCacheClear based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("clear", 2))
    )


_ArpCacheClear_Type.__name__ = "Integer32"
_ArpCacheClear_Object = MibScalar
arpCacheClear = _ArpCacheClear_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 2, 2),
    _ArpCacheClear_Type()
)
arpCacheClear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    arpCacheClear.setStatus("current")
_VrrpInfo_ObjectIdentity = ObjectIdentity
vrrpInfo = _VrrpInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 3)
)
_VrrpInfoVirtRtrTable_Object = MibTable
vrrpInfoVirtRtrTable = _VrrpInfoVirtRtrTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 3, 1)
)
if mibBuilder.loadTexts:
    vrrpInfoVirtRtrTable.setStatus("current")
_VrrpInfoVirtRtrTableEntry_Object = MibTableRow
vrrpInfoVirtRtrTableEntry = _VrrpInfoVirtRtrTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 3, 1, 1)
)
vrrpInfoVirtRtrTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "vrrpInfoVirtRtrIndex"),
)
if mibBuilder.loadTexts:
    vrrpInfoVirtRtrTableEntry.setStatus("current")
_VrrpInfoVirtRtrIndex_Type = Integer32
_VrrpInfoVirtRtrIndex_Object = MibTableColumn
vrrpInfoVirtRtrIndex = _VrrpInfoVirtRtrIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 3, 1, 1, 1),
    _VrrpInfoVirtRtrIndex_Type()
)
vrrpInfoVirtRtrIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpInfoVirtRtrIndex.setStatus("current")


class _VrrpInfoVirtRtrConfig_Type(Integer32):
    """Custom type vrrpInfoVirtRtrConfig based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_VrrpInfoVirtRtrConfig_Type.__name__ = "Integer32"
_VrrpInfoVirtRtrConfig_Object = MibTableColumn
vrrpInfoVirtRtrConfig = _VrrpInfoVirtRtrConfig_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 3, 1, 1, 2),
    _VrrpInfoVirtRtrConfig_Type()
)
vrrpInfoVirtRtrConfig.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpInfoVirtRtrConfig.setStatus("current")


class _VrrpInfoVirtRtrID_Type(Integer32):
    """Custom type vrrpInfoVirtRtrID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_VrrpInfoVirtRtrID_Type.__name__ = "Integer32"
_VrrpInfoVirtRtrID_Object = MibTableColumn
vrrpInfoVirtRtrID = _VrrpInfoVirtRtrID_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 3, 1, 1, 3),
    _VrrpInfoVirtRtrID_Type()
)
vrrpInfoVirtRtrID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpInfoVirtRtrID.setStatus("current")
_VrrpInfoVirtRtrAddr_Type = IpAddress
_VrrpInfoVirtRtrAddr_Object = MibTableColumn
vrrpInfoVirtRtrAddr = _VrrpInfoVirtRtrAddr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 3, 1, 1, 4),
    _VrrpInfoVirtRtrAddr_Type()
)
vrrpInfoVirtRtrAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpInfoVirtRtrAddr.setStatus("current")
_VrrpInfoVirtRtrIfIndex_Type = Integer32
_VrrpInfoVirtRtrIfIndex_Object = MibTableColumn
vrrpInfoVirtRtrIfIndex = _VrrpInfoVirtRtrIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 3, 1, 1, 5),
    _VrrpInfoVirtRtrIfIndex_Type()
)
vrrpInfoVirtRtrIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpInfoVirtRtrIfIndex.setStatus("current")


class _VrrpInfoVirtRtrPriority_Type(Integer32):
    """Custom type vrrpInfoVirtRtrPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 254),
    )


_VrrpInfoVirtRtrPriority_Type.__name__ = "Integer32"
_VrrpInfoVirtRtrPriority_Object = MibTableColumn
vrrpInfoVirtRtrPriority = _VrrpInfoVirtRtrPriority_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 3, 1, 1, 6),
    _VrrpInfoVirtRtrPriority_Type()
)
vrrpInfoVirtRtrPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpInfoVirtRtrPriority.setStatus("current")


class _VrrpInfoVirtRtrState_Type(Integer32):
    """Custom type vrrpInfoVirtRtrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("init", 1),
          ("master", 2),
          ("backup", 3))
    )


_VrrpInfoVirtRtrState_Type.__name__ = "Integer32"
_VrrpInfoVirtRtrState_Object = MibTableColumn
vrrpInfoVirtRtrState = _VrrpInfoVirtRtrState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 3, 1, 1, 7),
    _VrrpInfoVirtRtrState_Type()
)
vrrpInfoVirtRtrState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpInfoVirtRtrState.setStatus("current")


class _VrrpInfoVirtRtrOwnership_Type(Integer32):
    """Custom type vrrpInfoVirtRtrOwnership based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("owner", 1),
          ("renter", 2))
    )


_VrrpInfoVirtRtrOwnership_Type.__name__ = "Integer32"
_VrrpInfoVirtRtrOwnership_Object = MibTableColumn
vrrpInfoVirtRtrOwnership = _VrrpInfoVirtRtrOwnership_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 3, 1, 1, 8),
    _VrrpInfoVirtRtrOwnership_Type()
)
vrrpInfoVirtRtrOwnership.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpInfoVirtRtrOwnership.setStatus("current")
_OspfInfo_ObjectIdentity = ObjectIdentity
ospfInfo = _OspfInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4)
)
_OspfGeneralInfo_ObjectIdentity = ObjectIdentity
ospfGeneralInfo = _OspfGeneralInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 1)
)


class _OspfVersion_Type(Integer32):
    """Custom type ospfVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ospfVersion1", 1),
          ("ospfVersion2", 2))
    )


_OspfVersion_Type.__name__ = "Integer32"
_OspfVersion_Object = MibScalar
ospfVersion = _OspfVersion_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 1, 1),
    _OspfVersion_Type()
)
ospfVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVersion.setStatus("current")
_OspfRouterID_Type = IpAddress
_OspfRouterID_Object = MibScalar
ospfRouterID = _OspfRouterID_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 1, 2),
    _OspfRouterID_Type()
)
ospfRouterID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfRouterID.setStatus("current")
_OspfStartTime_Type = Integer32
_OspfStartTime_Object = MibScalar
ospfStartTime = _OspfStartTime_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 1, 3),
    _OspfStartTime_Type()
)
ospfStartTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfStartTime.setStatus("current")
_OspfProcessUptime_Type = Counter32
_OspfProcessUptime_Object = MibScalar
ospfProcessUptime = _OspfProcessUptime_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 1, 4),
    _OspfProcessUptime_Type()
)
ospfProcessUptime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfProcessUptime.setStatus("current")
_OspfLsTypesSupported_Type = Integer32
_OspfLsTypesSupported_Object = MibScalar
ospfLsTypesSupported = _OspfLsTypesSupported_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 1, 5),
    _OspfLsTypesSupported_Type()
)
ospfLsTypesSupported.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLsTypesSupported.setStatus("current")


class _OspfAreaBorderRouter_Type(Integer32):
    """Custom type ospfAreaBorderRouter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("yes", 1),
          ("no", 2))
    )


_OspfAreaBorderRouter_Type.__name__ = "Integer32"
_OspfAreaBorderRouter_Object = MibScalar
ospfAreaBorderRouter = _OspfAreaBorderRouter_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 1, 6),
    _OspfAreaBorderRouter_Type()
)
ospfAreaBorderRouter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaBorderRouter.setStatus("current")


class _OspfAreaBoundaryRouter_Type(Integer32):
    """Custom type ospfAreaBoundaryRouter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("yes", 1),
          ("no", 2))
    )


_OspfAreaBoundaryRouter_Type.__name__ = "Integer32"
_OspfAreaBoundaryRouter_Object = MibScalar
ospfAreaBoundaryRouter = _OspfAreaBoundaryRouter_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 1, 7),
    _OspfAreaBoundaryRouter_Type()
)
ospfAreaBoundaryRouter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaBoundaryRouter.setStatus("current")
_OspfExternalLsa_Type = Integer32
_OspfExternalLsa_Object = MibScalar
ospfExternalLsa = _OspfExternalLsa_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 1, 8),
    _OspfExternalLsa_Type()
)
ospfExternalLsa.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfExternalLsa.setStatus("current")
_OspfIntfCountForRouter_Type = Integer32
_OspfIntfCountForRouter_Object = MibScalar
ospfIntfCountForRouter = _OspfIntfCountForRouter_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 1, 9),
    _OspfIntfCountForRouter_Type()
)
ospfIntfCountForRouter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIntfCountForRouter.setStatus("current")
_OspfVlinkCountForRouter_Type = Integer32
_OspfVlinkCountForRouter_Object = MibScalar
ospfVlinkCountForRouter = _OspfVlinkCountForRouter_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 1, 10),
    _OspfVlinkCountForRouter_Type()
)
ospfVlinkCountForRouter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVlinkCountForRouter.setStatus("current")
_OspfNewLsaReceived_Type = Integer32
_OspfNewLsaReceived_Object = MibScalar
ospfNewLsaReceived = _OspfNewLsaReceived_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 1, 11),
    _OspfNewLsaReceived_Type()
)
ospfNewLsaReceived.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNewLsaReceived.setStatus("current")
_OspfTotalLsaOriginated_Type = Integer32
_OspfTotalLsaOriginated_Object = MibScalar
ospfTotalLsaOriginated = _OspfTotalLsaOriginated_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 1, 12),
    _OspfTotalLsaOriginated_Type()
)
ospfTotalLsaOriginated.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfTotalLsaOriginated.setStatus("current")
_OspfTotalNumberOfLsdbEntries_Type = Integer32
_OspfTotalNumberOfLsdbEntries_Object = MibScalar
ospfTotalNumberOfLsdbEntries = _OspfTotalNumberOfLsdbEntries_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 1, 13),
    _OspfTotalNumberOfLsdbEntries_Type()
)
ospfTotalNumberOfLsdbEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfTotalNumberOfLsdbEntries.setStatus("current")
_OspfTotalNeighbours_Type = Integer32
_OspfTotalNeighbours_Object = MibScalar
ospfTotalNeighbours = _OspfTotalNeighbours_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 1, 14),
    _OspfTotalNeighbours_Type()
)
ospfTotalNeighbours.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfTotalNeighbours.setStatus("current")
_OspfNbrInInitState_Type = Integer32
_OspfNbrInInitState_Object = MibScalar
ospfNbrInInitState = _OspfNbrInInitState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 1, 15),
    _OspfNbrInInitState_Type()
)
ospfNbrInInitState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNbrInInitState.setStatus("current")
_OspfNbrInExchState_Type = Integer32
_OspfNbrInExchState_Object = MibScalar
ospfNbrInExchState = _OspfNbrInExchState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 1, 16),
    _OspfNbrInExchState_Type()
)
ospfNbrInExchState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNbrInExchState.setStatus("current")
_OspfNbrInFullState_Type = Integer32
_OspfNbrInFullState_Object = MibScalar
ospfNbrInFullState = _OspfNbrInFullState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 1, 17),
    _OspfNbrInFullState_Type()
)
ospfNbrInFullState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNbrInFullState.setStatus("current")
_OspfTotalAreas_Type = Integer32
_OspfTotalAreas_Object = MibScalar
ospfTotalAreas = _OspfTotalAreas_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 1, 18),
    _OspfTotalAreas_Type()
)
ospfTotalAreas.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfTotalAreas.setStatus("current")
_OspfTotalTransitAreas_Type = Integer32
_OspfTotalTransitAreas_Object = MibScalar
ospfTotalTransitAreas = _OspfTotalTransitAreas_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 1, 19),
    _OspfTotalTransitAreas_Type()
)
ospfTotalTransitAreas.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfTotalTransitAreas.setStatus("current")
_OspfTotalNssaAreas_Type = Integer32
_OspfTotalNssaAreas_Object = MibScalar
ospfTotalNssaAreas = _OspfTotalNssaAreas_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 1, 20),
    _OspfTotalNssaAreas_Type()
)
ospfTotalNssaAreas.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfTotalNssaAreas.setStatus("current")
_OspfTotalStubAreas_Type = Integer32
_OspfTotalStubAreas_Object = MibScalar
ospfTotalStubAreas = _OspfTotalStubAreas_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 1, 21),
    _OspfTotalStubAreas_Type()
)
ospfTotalStubAreas.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfTotalStubAreas.setStatus("current")
_OspfAreaInfoTable_Object = MibTable
ospfAreaInfoTable = _OspfAreaInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 2)
)
if mibBuilder.loadTexts:
    ospfAreaInfoTable.setStatus("current")
_OspfAreaInfoEntry_Object = MibTableRow
ospfAreaInfoEntry = _OspfAreaInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 2, 1)
)
ospfAreaInfoEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ospfAreaInfoIndex"),
)
if mibBuilder.loadTexts:
    ospfAreaInfoEntry.setStatus("current")
_OspfAreaInfoIndex_Type = Integer32
_OspfAreaInfoIndex_Object = MibTableColumn
ospfAreaInfoIndex = _OspfAreaInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 2, 1, 1),
    _OspfAreaInfoIndex_Type()
)
ospfAreaInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaInfoIndex.setStatus("current")
_OspfAreaInfoId_Type = IpAddress
_OspfAreaInfoId_Object = MibTableColumn
ospfAreaInfoId = _OspfAreaInfoId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 2, 1, 2),
    _OspfAreaInfoId_Type()
)
ospfAreaInfoId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaInfoId.setStatus("current")


class _OspfAreaInfoStatus_Type(Integer32):
    """Custom type ospfAreaInfoStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_OspfAreaInfoStatus_Type.__name__ = "Integer32"
_OspfAreaInfoStatus_Object = MibTableColumn
ospfAreaInfoStatus = _OspfAreaInfoStatus_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 2, 1, 3),
    _OspfAreaInfoStatus_Type()
)
ospfAreaInfoStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaInfoStatus.setStatus("current")
_OspfTotalNumberOfInterfaces_Type = Integer32
_OspfTotalNumberOfInterfaces_Object = MibTableColumn
ospfTotalNumberOfInterfaces = _OspfTotalNumberOfInterfaces_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 2, 1, 4),
    _OspfTotalNumberOfInterfaces_Type()
)
ospfTotalNumberOfInterfaces.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfTotalNumberOfInterfaces.setStatus("current")
_OspfNumberOfInterfacesUp_Type = Integer32
_OspfNumberOfInterfacesUp_Object = MibTableColumn
ospfNumberOfInterfacesUp = _OspfNumberOfInterfacesUp_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 2, 1, 5),
    _OspfNumberOfInterfacesUp_Type()
)
ospfNumberOfInterfacesUp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNumberOfInterfacesUp.setStatus("current")


class _OspfAreaInfoAuthType_Type(Integer32):
    """Custom type ospfAreaInfoAuthType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("password", 2),
          ("md5", 3))
    )


_OspfAreaInfoAuthType_Type.__name__ = "Integer32"
_OspfAreaInfoAuthType_Object = MibTableColumn
ospfAreaInfoAuthType = _OspfAreaInfoAuthType_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 2, 1, 6),
    _OspfAreaInfoAuthType_Type()
)
ospfAreaInfoAuthType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaInfoAuthType.setStatus("current")
_OspfAreaInfoSPF_Type = Integer32
_OspfAreaInfoSPF_Object = MibTableColumn
ospfAreaInfoSPF = _OspfAreaInfoSPF_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 2, 1, 7),
    _OspfAreaInfoSPF_Type()
)
ospfAreaInfoSPF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaInfoSPF.setStatus("current")
_OspfNumberOfLsdbEntries_Type = Integer32
_OspfNumberOfLsdbEntries_Object = MibTableColumn
ospfNumberOfLsdbEntries = _OspfNumberOfLsdbEntries_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 2, 1, 8),
    _OspfNumberOfLsdbEntries_Type()
)
ospfNumberOfLsdbEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfNumberOfLsdbEntries.setStatus("current")
_OspfAreaInfoAreaBorderRouter_Type = Integer32
_OspfAreaInfoAreaBorderRouter_Object = MibTableColumn
ospfAreaInfoAreaBorderRouter = _OspfAreaInfoAreaBorderRouter_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 2, 1, 9),
    _OspfAreaInfoAreaBorderRouter_Type()
)
ospfAreaInfoAreaBorderRouter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaInfoAreaBorderRouter.setStatus("current")
_OspfAreaInfoASBoundaryRouter_Type = Integer32
_OspfAreaInfoASBoundaryRouter_Object = MibTableColumn
ospfAreaInfoASBoundaryRouter = _OspfAreaInfoASBoundaryRouter_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 2, 1, 10),
    _OspfAreaInfoASBoundaryRouter_Type()
)
ospfAreaInfoASBoundaryRouter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaInfoASBoundaryRouter.setStatus("current")
_OspfAreaInfoTotalNeighbours_Type = Integer32
_OspfAreaInfoTotalNeighbours_Object = MibTableColumn
ospfAreaInfoTotalNeighbours = _OspfAreaInfoTotalNeighbours_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 2, 1, 11),
    _OspfAreaInfoTotalNeighbours_Type()
)
ospfAreaInfoTotalNeighbours.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaInfoTotalNeighbours.setStatus("current")
_OspfAreaInfoNeighborsINITstate_Type = Integer32
_OspfAreaInfoNeighborsINITstate_Object = MibTableColumn
ospfAreaInfoNeighborsINITstate = _OspfAreaInfoNeighborsINITstate_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 2, 1, 12),
    _OspfAreaInfoNeighborsINITstate_Type()
)
ospfAreaInfoNeighborsINITstate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaInfoNeighborsINITstate.setStatus("current")
_OspfAreaInfoNeighborsEXCHstate_Type = Integer32
_OspfAreaInfoNeighborsEXCHstate_Object = MibTableColumn
ospfAreaInfoNeighborsEXCHstate = _OspfAreaInfoNeighborsEXCHstate_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 2, 1, 13),
    _OspfAreaInfoNeighborsEXCHstate_Type()
)
ospfAreaInfoNeighborsEXCHstate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaInfoNeighborsEXCHstate.setStatus("current")
_OspfAreaInfoNeighborsFULLstate_Type = Integer32
_OspfAreaInfoNeighborsFULLstate_Object = MibTableColumn
ospfAreaInfoNeighborsFULLstate = _OspfAreaInfoNeighborsFULLstate_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 2, 1, 14),
    _OspfAreaInfoNeighborsFULLstate_Type()
)
ospfAreaInfoNeighborsFULLstate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaInfoNeighborsFULLstate.setStatus("current")


class _OspfAreaInfoLsTypesAccepted_Type(DisplayString):
    """Custom type ospfAreaInfoLsTypesAccepted based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_OspfAreaInfoLsTypesAccepted_Type.__name__ = "DisplayString"
_OspfAreaInfoLsTypesAccepted_Object = MibTableColumn
ospfAreaInfoLsTypesAccepted = _OspfAreaInfoLsTypesAccepted_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 2, 1, 15),
    _OspfAreaInfoLsTypesAccepted_Type()
)
ospfAreaInfoLsTypesAccepted.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfAreaInfoLsTypesAccepted.setStatus("current")
_OspfIntfInfoTable_Object = MibTable
ospfIntfInfoTable = _OspfIntfInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 3)
)
if mibBuilder.loadTexts:
    ospfIntfInfoTable.setStatus("current")
_OspfIntfInfoEntry_Object = MibTableRow
ospfIntfInfoEntry = _OspfIntfInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 3, 1)
)
ospfIntfInfoEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ospfIfInfoIndex"),
)
if mibBuilder.loadTexts:
    ospfIntfInfoEntry.setStatus("current")
_OspfIfInfoIndex_Type = Integer32
_OspfIfInfoIndex_Object = MibTableColumn
ospfIfInfoIndex = _OspfIfInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 3, 1, 1),
    _OspfIfInfoIndex_Type()
)
ospfIfInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoIndex.setStatus("current")
_OspfIfInfoIpAddress_Type = IpAddress
_OspfIfInfoIpAddress_Object = MibTableColumn
ospfIfInfoIpAddress = _OspfIfInfoIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 3, 1, 2),
    _OspfIfInfoIpAddress_Type()
)
ospfIfInfoIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoIpAddress.setStatus("current")


class _OspfIfInfoArea_Type(Integer32):
    """Custom type ospfIfInfoArea based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2),
    )


_OspfIfInfoArea_Type.__name__ = "Integer32"
_OspfIfInfoArea_Object = MibTableColumn
ospfIfInfoArea = _OspfIfInfoArea_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 3, 1, 3),
    _OspfIfInfoArea_Type()
)
ospfIfInfoArea.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoArea.setStatus("current")


class _OspfIfInfoAdminStatus_Type(Integer32):
    """Custom type ospfIfInfoAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("up", 1))
    )


_OspfIfInfoAdminStatus_Type.__name__ = "Integer32"
_OspfIfInfoAdminStatus_Object = MibTableColumn
ospfIfInfoAdminStatus = _OspfIfInfoAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 3, 1, 4),
    _OspfIfInfoAdminStatus_Type()
)
ospfIfInfoAdminStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoAdminStatus.setStatus("current")
_OspfIfInfoRouterID_Type = IpAddress
_OspfIfInfoRouterID_Object = MibTableColumn
ospfIfInfoRouterID = _OspfIfInfoRouterID_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 3, 1, 5),
    _OspfIfInfoRouterID_Type()
)
ospfIfInfoRouterID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoRouterID.setStatus("current")


class _OspfIfInfoState_Type(Integer32):
    """Custom type ospfIfInfoState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("loopback", 1),
          ("waiting", 2),
          ("ptop", 3),
          ("dr", 4),
          ("backupdr", 5),
          ("drother", 6))
    )


_OspfIfInfoState_Type.__name__ = "Integer32"
_OspfIfInfoState_Object = MibTableColumn
ospfIfInfoState = _OspfIfInfoState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 3, 1, 6),
    _OspfIfInfoState_Type()
)
ospfIfInfoState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoState.setStatus("current")


class _OspfIfInfoPriority_Type(Integer32):
    """Custom type ospfIfInfoPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_OspfIfInfoPriority_Type.__name__ = "Integer32"
_OspfIfInfoPriority_Object = MibTableColumn
ospfIfInfoPriority = _OspfIfInfoPriority_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 3, 1, 7),
    _OspfIfInfoPriority_Type()
)
ospfIfInfoPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoPriority.setStatus("current")
_OspfIfInfoDesignatedRouterID_Type = IpAddress
_OspfIfInfoDesignatedRouterID_Object = MibTableColumn
ospfIfInfoDesignatedRouterID = _OspfIfInfoDesignatedRouterID_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 3, 1, 8),
    _OspfIfInfoDesignatedRouterID_Type()
)
ospfIfInfoDesignatedRouterID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoDesignatedRouterID.setStatus("current")
_OspfIfInfoDesignatedRouterIpAddress_Type = IpAddress
_OspfIfInfoDesignatedRouterIpAddress_Object = MibTableColumn
ospfIfInfoDesignatedRouterIpAddress = _OspfIfInfoDesignatedRouterIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 3, 1, 9),
    _OspfIfInfoDesignatedRouterIpAddress_Type()
)
ospfIfInfoDesignatedRouterIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoDesignatedRouterIpAddress.setStatus("current")
_OspfIfInfoBackupDesignatedRouterID_Type = IpAddress
_OspfIfInfoBackupDesignatedRouterID_Object = MibTableColumn
ospfIfInfoBackupDesignatedRouterID = _OspfIfInfoBackupDesignatedRouterID_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 3, 1, 10),
    _OspfIfInfoBackupDesignatedRouterID_Type()
)
ospfIfInfoBackupDesignatedRouterID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoBackupDesignatedRouterID.setStatus("current")
_OspfIfInfoBackupDesignatedRouterIpAddress_Type = IpAddress
_OspfIfInfoBackupDesignatedRouterIpAddress_Object = MibTableColumn
ospfIfInfoBackupDesignatedRouterIpAddress = _OspfIfInfoBackupDesignatedRouterIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 3, 1, 11),
    _OspfIfInfoBackupDesignatedRouterIpAddress_Type()
)
ospfIfInfoBackupDesignatedRouterIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoBackupDesignatedRouterIpAddress.setStatus("current")


class _OspfIfInfoHello_Type(Integer32):
    """Custom type ospfIfInfoHello based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfIfInfoHello_Type.__name__ = "Integer32"
_OspfIfInfoHello_Object = MibTableColumn
ospfIfInfoHello = _OspfIfInfoHello_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 3, 1, 12),
    _OspfIfInfoHello_Type()
)
ospfIfInfoHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoHello.setStatus("current")


class _OspfIfInfoDead_Type(Integer32):
    """Custom type ospfIfInfoDead based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfIfInfoDead_Type.__name__ = "Integer32"
_OspfIfInfoDead_Object = MibTableColumn
ospfIfInfoDead = _OspfIfInfoDead_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 3, 1, 13),
    _OspfIfInfoDead_Type()
)
ospfIfInfoDead.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoDead.setStatus("current")
_OspfIfInfoWait_Type = Integer32
_OspfIfInfoWait_Object = MibTableColumn
ospfIfInfoWait = _OspfIfInfoWait_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 3, 1, 14),
    _OspfIfInfoWait_Type()
)
ospfIfInfoWait.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoWait.setStatus("current")


class _OspfIfInfoRetransmit_Type(Integer32):
    """Custom type ospfIfInfoRetransmit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_OspfIfInfoRetransmit_Type.__name__ = "Integer32"
_OspfIfInfoRetransmit_Object = MibTableColumn
ospfIfInfoRetransmit = _OspfIfInfoRetransmit_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 3, 1, 15),
    _OspfIfInfoRetransmit_Type()
)
ospfIfInfoRetransmit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoRetransmit.setStatus("current")


class _OspfIfInfoTransitDelay_Type(Integer32):
    """Custom type ospfIfInfoTransitDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_OspfIfInfoTransitDelay_Type.__name__ = "Integer32"
_OspfIfInfoTransitDelay_Object = MibTableColumn
ospfIfInfoTransitDelay = _OspfIfInfoTransitDelay_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 3, 1, 16),
    _OspfIfInfoTransitDelay_Type()
)
ospfIfInfoTransitDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoTransitDelay.setStatus("current")
_OspfIfInfoTotalNeighbours_Type = Integer32
_OspfIfInfoTotalNeighbours_Object = MibTableColumn
ospfIfInfoTotalNeighbours = _OspfIfInfoTotalNeighbours_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 3, 1, 17),
    _OspfIfInfoTotalNeighbours_Type()
)
ospfIfInfoTotalNeighbours.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoTotalNeighbours.setStatus("current")
_OspfIfInfoEvents_Type = Integer32
_OspfIfInfoEvents_Object = MibTableColumn
ospfIfInfoEvents = _OspfIfInfoEvents_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 3, 1, 18),
    _OspfIfInfoEvents_Type()
)
ospfIfInfoEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoEvents.setStatus("current")


class _OspfIfInfoAuthType_Type(Integer32):
    """Custom type ospfIfInfoAuthType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("password", 2),
          ("md5", 3))
    )


_OspfIfInfoAuthType_Type.__name__ = "Integer32"
_OspfIfInfoAuthType_Object = MibTableColumn
ospfIfInfoAuthType = _OspfIfInfoAuthType_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 3, 1, 19),
    _OspfIfInfoAuthType_Type()
)
ospfIfInfoAuthType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfInfoAuthType.setStatus("current")
_OspfVirtIntfInfoTable_Object = MibTable
ospfVirtIntfInfoTable = _OspfVirtIntfInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 4)
)
if mibBuilder.loadTexts:
    ospfVirtIntfInfoTable.setStatus("current")
_OspfVirtIntfInfoEntry_Object = MibTableRow
ospfVirtIntfInfoEntry = _OspfVirtIntfInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 4, 1)
)
ospfVirtIntfInfoEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ospfVirtIntfInfoIndex"),
)
if mibBuilder.loadTexts:
    ospfVirtIntfInfoEntry.setStatus("current")
_OspfVirtIntfInfoIndex_Type = Integer32
_OspfVirtIntfInfoIndex_Object = MibTableColumn
ospfVirtIntfInfoIndex = _OspfVirtIntfInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 4, 1, 1),
    _OspfVirtIntfInfoIndex_Type()
)
ospfVirtIntfInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVirtIntfInfoIndex.setStatus("current")
_OspfVirtIntfInfoIpAddr_Type = IpAddress
_OspfVirtIntfInfoIpAddr_Object = MibTableColumn
ospfVirtIntfInfoIpAddr = _OspfVirtIntfInfoIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 4, 1, 2),
    _OspfVirtIntfInfoIpAddr_Type()
)
ospfVirtIntfInfoIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVirtIntfInfoIpAddr.setStatus("current")


class _OspfVirtIntfInfoArea_Type(Integer32):
    """Custom type ospfVirtIntfInfoArea based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2),
    )


_OspfVirtIntfInfoArea_Type.__name__ = "Integer32"
_OspfVirtIntfInfoArea_Object = MibTableColumn
ospfVirtIntfInfoArea = _OspfVirtIntfInfoArea_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 4, 1, 3),
    _OspfVirtIntfInfoArea_Type()
)
ospfVirtIntfInfoArea.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVirtIntfInfoArea.setStatus("current")
_OspfVirtIntfInfoRouterId_Type = IpAddress
_OspfVirtIntfInfoRouterId_Object = MibTableColumn
ospfVirtIntfInfoRouterId = _OspfVirtIntfInfoRouterId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 4, 1, 4),
    _OspfVirtIntfInfoRouterId_Type()
)
ospfVirtIntfInfoRouterId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVirtIntfInfoRouterId.setStatus("current")


class _OspfVirtIntfInfoState_Type(Integer32):
    """Custom type ospfVirtIntfInfoState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_OspfVirtIntfInfoState_Type.__name__ = "Integer32"
_OspfVirtIntfInfoState_Object = MibTableColumn
ospfVirtIntfInfoState = _OspfVirtIntfInfoState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 4, 1, 5),
    _OspfVirtIntfInfoState_Type()
)
ospfVirtIntfInfoState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVirtIntfInfoState.setStatus("current")
_OspfVirtIntfInfoCost_Type = Integer32
_OspfVirtIntfInfoCost_Object = MibTableColumn
ospfVirtIntfInfoCost = _OspfVirtIntfInfoCost_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 4, 1, 6),
    _OspfVirtIntfInfoCost_Type()
)
ospfVirtIntfInfoCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVirtIntfInfoCost.setStatus("current")
_OspfVirtIntfInfoTrans_Type = Integer32
_OspfVirtIntfInfoTrans_Object = MibTableColumn
ospfVirtIntfInfoTrans = _OspfVirtIntfInfoTrans_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 4, 1, 7),
    _OspfVirtIntfInfoTrans_Type()
)
ospfVirtIntfInfoTrans.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVirtIntfInfoTrans.setStatus("current")


class _OspfVirtIntfInfoHello_Type(Integer32):
    """Custom type ospfVirtIntfInfoHello based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfVirtIntfInfoHello_Type.__name__ = "Integer32"
_OspfVirtIntfInfoHello_Object = MibTableColumn
ospfVirtIntfInfoHello = _OspfVirtIntfInfoHello_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 4, 1, 8),
    _OspfVirtIntfInfoHello_Type()
)
ospfVirtIntfInfoHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVirtIntfInfoHello.setStatus("current")


class _OspfVirtIntfInfoDead_Type(Integer32):
    """Custom type ospfVirtIntfInfoDead based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfVirtIntfInfoDead_Type.__name__ = "Integer32"
_OspfVirtIntfInfoDead_Object = MibTableColumn
ospfVirtIntfInfoDead = _OspfVirtIntfInfoDead_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 4, 1, 9),
    _OspfVirtIntfInfoDead_Type()
)
ospfVirtIntfInfoDead.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVirtIntfInfoDead.setStatus("current")


class _OspfVirtIntfInfoWait_Type(Integer32):
    """Custom type ospfVirtIntfInfoWait based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_OspfVirtIntfInfoWait_Type.__name__ = "Integer32"
_OspfVirtIntfInfoWait_Object = MibTableColumn
ospfVirtIntfInfoWait = _OspfVirtIntfInfoWait_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 4, 1, 10),
    _OspfVirtIntfInfoWait_Type()
)
ospfVirtIntfInfoWait.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVirtIntfInfoWait.setStatus("current")


class _OspfVirtIntfInfoRetra_Type(Integer32):
    """Custom type ospfVirtIntfInfoRetra based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_OspfVirtIntfInfoRetra_Type.__name__ = "Integer32"
_OspfVirtIntfInfoRetra_Object = MibTableColumn
ospfVirtIntfInfoRetra = _OspfVirtIntfInfoRetra_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 4, 1, 11),
    _OspfVirtIntfInfoRetra_Type()
)
ospfVirtIntfInfoRetra.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVirtIntfInfoRetra.setStatus("current")


class _OspfVirtIntfInfoAuth_Type(DisplayString):
    """Custom type ospfVirtIntfInfoAuth based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_OspfVirtIntfInfoAuth_Type.__name__ = "DisplayString"
_OspfVirtIntfInfoAuth_Object = MibTableColumn
ospfVirtIntfInfoAuth = _OspfVirtIntfInfoAuth_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 4, 1, 12),
    _OspfVirtIntfInfoAuth_Type()
)
ospfVirtIntfInfoAuth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVirtIntfInfoAuth.setStatus("current")
_OspfVirtIntfInfoEvents_Type = Integer32
_OspfVirtIntfInfoEvents_Object = MibTableColumn
ospfVirtIntfInfoEvents = _OspfVirtIntfInfoEvents_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 4, 1, 13),
    _OspfVirtIntfInfoEvents_Type()
)
ospfVirtIntfInfoEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVirtIntfInfoEvents.setStatus("current")
_OspfVirtIntfInfoNbr_Type = IpAddress
_OspfVirtIntfInfoNbr_Object = MibTableColumn
ospfVirtIntfInfoNbr = _OspfVirtIntfInfoNbr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 4, 1, 14),
    _OspfVirtIntfInfoNbr_Type()
)
ospfVirtIntfInfoNbr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVirtIntfInfoNbr.setStatus("current")


class _OspfVirtIntfInfoNbrState_Type(Integer32):
    """Custom type ospfVirtIntfInfoNbrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("down", 0),
          ("attempt", 1),
          ("init", 2),
          ("twoway", 3),
          ("exstart", 4),
          ("exchange", 5),
          ("loading", 6),
          ("full", 7))
    )


_OspfVirtIntfInfoNbrState_Type.__name__ = "Integer32"
_OspfVirtIntfInfoNbrState_Object = MibTableColumn
ospfVirtIntfInfoNbrState = _OspfVirtIntfInfoNbrState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 4, 1, 15),
    _OspfVirtIntfInfoNbrState_Type()
)
ospfVirtIntfInfoNbrState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVirtIntfInfoNbrState.setStatus("current")
_OspfVirtIntfInfoAreaId_Type = IpAddress
_OspfVirtIntfInfoAreaId_Object = MibTableColumn
ospfVirtIntfInfoAreaId = _OspfVirtIntfInfoAreaId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 4, 1, 16),
    _OspfVirtIntfInfoAreaId_Type()
)
ospfVirtIntfInfoAreaId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfVirtIntfInfoAreaId.setStatus("current")
_OspfIfNbrTable_Object = MibTable
ospfIfNbrTable = _OspfIfNbrTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 5)
)
if mibBuilder.loadTexts:
    ospfIfNbrTable.setStatus("current")
_OspfIfNbrEntry_Object = MibTableRow
ospfIfNbrEntry = _OspfIfNbrEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 5, 1)
)
ospfIfNbrEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ospfIfNbrIntfIndex"),
    (0, "BLADETYPE5-NETWORK-MIB", "ospfIfNbrIpAddr"),
)
if mibBuilder.loadTexts:
    ospfIfNbrEntry.setStatus("current")
_OspfIfNbrIntfIndex_Type = Integer32
_OspfIfNbrIntfIndex_Object = MibTableColumn
ospfIfNbrIntfIndex = _OspfIfNbrIntfIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 5, 1, 1),
    _OspfIfNbrIntfIndex_Type()
)
ospfIfNbrIntfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfNbrIntfIndex.setStatus("current")
_OspfIfNbrIpAddr_Type = IpAddress
_OspfIfNbrIpAddr_Object = MibTableColumn
ospfIfNbrIpAddr = _OspfIfNbrIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 5, 1, 2),
    _OspfIfNbrIpAddr_Type()
)
ospfIfNbrIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfNbrIpAddr.setStatus("current")
_OspfIfNbrPriority_Type = Integer32
_OspfIfNbrPriority_Object = MibTableColumn
ospfIfNbrPriority = _OspfIfNbrPriority_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 5, 1, 3),
    _OspfIfNbrPriority_Type()
)
ospfIfNbrPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfNbrPriority.setStatus("current")


class _OspfIfNbrState_Type(Integer32):
    """Custom type ospfIfNbrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("down", 1),
          ("attempt", 2),
          ("init", 3),
          ("twoway", 4),
          ("exStart", 5),
          ("exchange", 6),
          ("loading", 7),
          ("full", 8))
    )


_OspfIfNbrState_Type.__name__ = "Integer32"
_OspfIfNbrState_Object = MibTableColumn
ospfIfNbrState = _OspfIfNbrState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 5, 1, 4),
    _OspfIfNbrState_Type()
)
ospfIfNbrState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfNbrState.setStatus("current")
_OspfIfNbrDesignatedRtr_Type = IpAddress
_OspfIfNbrDesignatedRtr_Object = MibTableColumn
ospfIfNbrDesignatedRtr = _OspfIfNbrDesignatedRtr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 5, 1, 5),
    _OspfIfNbrDesignatedRtr_Type()
)
ospfIfNbrDesignatedRtr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfNbrDesignatedRtr.setStatus("current")
_OspfIfNbrBackupDesignatedRtr_Type = IpAddress
_OspfIfNbrBackupDesignatedRtr_Object = MibTableColumn
ospfIfNbrBackupDesignatedRtr = _OspfIfNbrBackupDesignatedRtr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 5, 1, 6),
    _OspfIfNbrBackupDesignatedRtr_Type()
)
ospfIfNbrBackupDesignatedRtr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfNbrBackupDesignatedRtr.setStatus("current")
_OspfIfNbrIpAddress_Type = IpAddress
_OspfIfNbrIpAddress_Object = MibTableColumn
ospfIfNbrIpAddress = _OspfIfNbrIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 5, 1, 7),
    _OspfIfNbrIpAddress_Type()
)
ospfIfNbrIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfIfNbrIpAddress.setStatus("current")
_OspfSumRangesInfoTable_Object = MibTable
ospfSumRangesInfoTable = _OspfSumRangesInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 6)
)
if mibBuilder.loadTexts:
    ospfSumRangesInfoTable.setStatus("current")
_OspfSumRangesInfoEntry_Object = MibTableRow
ospfSumRangesInfoEntry = _OspfSumRangesInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 6, 1)
)
ospfSumRangesInfoEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ospfSumRangesInfoIndex"),
)
if mibBuilder.loadTexts:
    ospfSumRangesInfoEntry.setStatus("current")
_OspfSumRangesInfoIndex_Type = Integer32
_OspfSumRangesInfoIndex_Object = MibTableColumn
ospfSumRangesInfoIndex = _OspfSumRangesInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 6, 1, 1),
    _OspfSumRangesInfoIndex_Type()
)
ospfSumRangesInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfSumRangesInfoIndex.setStatus("current")


class _OspfSumRangesInfoArea_Type(Integer32):
    """Custom type ospfSumRangesInfoArea based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2),
    )


_OspfSumRangesInfoArea_Type.__name__ = "Integer32"
_OspfSumRangesInfoArea_Object = MibTableColumn
ospfSumRangesInfoArea = _OspfSumRangesInfoArea_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 6, 1, 2),
    _OspfSumRangesInfoArea_Type()
)
ospfSumRangesInfoArea.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfSumRangesInfoArea.setStatus("current")
_OspfSumRangesInfoNetwork_Type = IpAddress
_OspfSumRangesInfoNetwork_Object = MibTableColumn
ospfSumRangesInfoNetwork = _OspfSumRangesInfoNetwork_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 6, 1, 3),
    _OspfSumRangesInfoNetwork_Type()
)
ospfSumRangesInfoNetwork.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfSumRangesInfoNetwork.setStatus("current")
_OspfSumRangesInfoMask_Type = IpAddress
_OspfSumRangesInfoMask_Object = MibTableColumn
ospfSumRangesInfoMask = _OspfSumRangesInfoMask_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 6, 1, 4),
    _OspfSumRangesInfoMask_Type()
)
ospfSumRangesInfoMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfSumRangesInfoMask.setStatus("current")


class _OspfSumRangesInfoAction_Type(Integer32):
    """Custom type ospfSumRangesInfoAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("propagate", 0),
          ("hide", 1))
    )


_OspfSumRangesInfoAction_Type.__name__ = "Integer32"
_OspfSumRangesInfoAction_Object = MibTableColumn
ospfSumRangesInfoAction = _OspfSumRangesInfoAction_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 6, 1, 5),
    _OspfSumRangesInfoAction_Type()
)
ospfSumRangesInfoAction.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfSumRangesInfoAction.setStatus("current")


class _OspfSumRangesInfoListType_Type(Integer32):
    """Custom type ospfSumRangesInfoListType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("non-nssa", 0),
          ("nssa", 1))
    )


_OspfSumRangesInfoListType_Type.__name__ = "Integer32"
_OspfSumRangesInfoListType_Object = MibTableColumn
ospfSumRangesInfoListType = _OspfSumRangesInfoListType_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 6, 1, 6),
    _OspfSumRangesInfoListType_Type()
)
ospfSumRangesInfoListType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfSumRangesInfoListType.setStatus("current")
_OspfRoutesInfoTable_Object = MibTable
ospfRoutesInfoTable = _OspfRoutesInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 7)
)
if mibBuilder.loadTexts:
    ospfRoutesInfoTable.setStatus("current")
_OspfRoutesInfoEntry_Object = MibTableRow
ospfRoutesInfoEntry = _OspfRoutesInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 7, 1)
)
ospfRoutesInfoEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ospfRoutesInfoIndex"),
)
if mibBuilder.loadTexts:
    ospfRoutesInfoEntry.setStatus("current")
_OspfRoutesInfoIndex_Type = Integer32
_OspfRoutesInfoIndex_Object = MibTableColumn
ospfRoutesInfoIndex = _OspfRoutesInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 7, 1, 1),
    _OspfRoutesInfoIndex_Type()
)
ospfRoutesInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfRoutesInfoIndex.setStatus("current")
_OspfRoutesInfoDestination_Type = IpAddress
_OspfRoutesInfoDestination_Object = MibTableColumn
ospfRoutesInfoDestination = _OspfRoutesInfoDestination_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 7, 1, 2),
    _OspfRoutesInfoDestination_Type()
)
ospfRoutesInfoDestination.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfRoutesInfoDestination.setStatus("current")
_OspfRoutesInfoMask_Type = IpAddress
_OspfRoutesInfoMask_Object = MibTableColumn
ospfRoutesInfoMask = _OspfRoutesInfoMask_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 7, 1, 3),
    _OspfRoutesInfoMask_Type()
)
ospfRoutesInfoMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfRoutesInfoMask.setStatus("current")
_OspfRoutesInfoVia_Type = IpAddress
_OspfRoutesInfoVia_Object = MibTableColumn
ospfRoutesInfoVia = _OspfRoutesInfoVia_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 7, 1, 4),
    _OspfRoutesInfoVia_Type()
)
ospfRoutesInfoVia.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfRoutesInfoVia.setStatus("current")


class _OspfRoutesInfoType_Type(DisplayString):
    """Custom type ospfRoutesInfoType based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_OspfRoutesInfoType_Type.__name__ = "DisplayString"
_OspfRoutesInfoType_Object = MibTableColumn
ospfRoutesInfoType = _OspfRoutesInfoType_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 7, 1, 5),
    _OspfRoutesInfoType_Type()
)
ospfRoutesInfoType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfRoutesInfoType.setStatus("current")
_OspfLsdbInfoTable_Object = MibTable
ospfLsdbInfoTable = _OspfLsdbInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 8)
)
if mibBuilder.loadTexts:
    ospfLsdbInfoTable.setStatus("current")
_OspfLsdbInfoEntry_Object = MibTableRow
ospfLsdbInfoEntry = _OspfLsdbInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 8, 1)
)
ospfLsdbInfoEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ospfLsdbInfoIndex"),
)
if mibBuilder.loadTexts:
    ospfLsdbInfoEntry.setStatus("current")
_OspfLsdbInfoIndex_Type = Integer32
_OspfLsdbInfoIndex_Object = MibTableColumn
ospfLsdbInfoIndex = _OspfLsdbInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 8, 1, 1),
    _OspfLsdbInfoIndex_Type()
)
ospfLsdbInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLsdbInfoIndex.setStatus("current")
_OspfLsdbInfoAreaId_Type = IpAddress
_OspfLsdbInfoAreaId_Object = MibTableColumn
ospfLsdbInfoAreaId = _OspfLsdbInfoAreaId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 8, 1, 2),
    _OspfLsdbInfoAreaId_Type()
)
ospfLsdbInfoAreaId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLsdbInfoAreaId.setStatus("current")


class _OspfLsdbInfoType_Type(Integer32):
    """Custom type ospfLsdbInfoType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("routerLink", 1),
          ("networkLink", 2),
          ("summaryLink", 3),
          ("asSummaryLink", 4),
          ("asExternalLink", 5),
          ("multicastLink", 6),
          ("nssaExternalLink", 7))
    )


_OspfLsdbInfoType_Type.__name__ = "Integer32"
_OspfLsdbInfoType_Object = MibTableColumn
ospfLsdbInfoType = _OspfLsdbInfoType_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 8, 1, 3),
    _OspfLsdbInfoType_Type()
)
ospfLsdbInfoType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLsdbInfoType.setStatus("current")
_OspfLsdbInfoLsid_Type = IpAddress
_OspfLsdbInfoLsid_Object = MibTableColumn
ospfLsdbInfoLsid = _OspfLsdbInfoLsid_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 8, 1, 4),
    _OspfLsdbInfoLsid_Type()
)
ospfLsdbInfoLsid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLsdbInfoLsid.setStatus("current")
_OspfLsdbInfoRouterId_Type = IpAddress
_OspfLsdbInfoRouterId_Object = MibTableColumn
ospfLsdbInfoRouterId = _OspfLsdbInfoRouterId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 8, 1, 5),
    _OspfLsdbInfoRouterId_Type()
)
ospfLsdbInfoRouterId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLsdbInfoRouterId.setStatus("current")


class _OspfLsdbInfoSequence_Type(OctetString):
    """Custom type ospfLsdbInfoSequence based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(10, 10),
    )
    fixed_length = 10


_OspfLsdbInfoSequence_Type.__name__ = "OctetString"
_OspfLsdbInfoSequence_Object = MibTableColumn
ospfLsdbInfoSequence = _OspfLsdbInfoSequence_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 8, 1, 6),
    _OspfLsdbInfoSequence_Type()
)
ospfLsdbInfoSequence.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLsdbInfoSequence.setStatus("current")
_OspfLsdbInfoAge_Type = Integer32
_OspfLsdbInfoAge_Object = MibTableColumn
ospfLsdbInfoAge = _OspfLsdbInfoAge_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 8, 1, 7),
    _OspfLsdbInfoAge_Type()
)
ospfLsdbInfoAge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLsdbInfoAge.setStatus("current")
_OspfLsdbInfoChecksum_Type = Integer32
_OspfLsdbInfoChecksum_Object = MibTableColumn
ospfLsdbInfoChecksum = _OspfLsdbInfoChecksum_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 8, 1, 8),
    _OspfLsdbInfoChecksum_Type()
)
ospfLsdbInfoChecksum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLsdbInfoChecksum.setStatus("current")


class _OspfLsdbInfoAdvertisement_Type(OctetString):
    """Custom type ospfLsdbInfoAdvertisement based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(36, 36),
    )
    fixed_length = 36


_OspfLsdbInfoAdvertisement_Type.__name__ = "OctetString"
_OspfLsdbInfoAdvertisement_Object = MibTableColumn
ospfLsdbInfoAdvertisement = _OspfLsdbInfoAdvertisement_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 8, 1, 9),
    _OspfLsdbInfoAdvertisement_Type()
)
ospfLsdbInfoAdvertisement.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfLsdbInfoAdvertisement.setStatus("current")
_OspfExtLsdbInfoTable_Object = MibTable
ospfExtLsdbInfoTable = _OspfExtLsdbInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 9)
)
if mibBuilder.loadTexts:
    ospfExtLsdbInfoTable.setStatus("current")
_OspfExtLsdbInfoEntry_Object = MibTableRow
ospfExtLsdbInfoEntry = _OspfExtLsdbInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 9, 1)
)
ospfExtLsdbInfoEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ospfExtLsdbInfoIndex"),
)
if mibBuilder.loadTexts:
    ospfExtLsdbInfoEntry.setStatus("current")
_OspfExtLsdbInfoIndex_Type = Integer32
_OspfExtLsdbInfoIndex_Object = MibTableColumn
ospfExtLsdbInfoIndex = _OspfExtLsdbInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 9, 1, 1),
    _OspfExtLsdbInfoIndex_Type()
)
ospfExtLsdbInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfExtLsdbInfoIndex.setStatus("current")


class _OspfExtLsdbInfoType_Type(Integer32):
    """Custom type ospfExtLsdbInfoType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            5
        )
    )
    namedValues = NamedValues(
        ("asExternalLink", 5)
    )


_OspfExtLsdbInfoType_Type.__name__ = "Integer32"
_OspfExtLsdbInfoType_Object = MibTableColumn
ospfExtLsdbInfoType = _OspfExtLsdbInfoType_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 9, 1, 2),
    _OspfExtLsdbInfoType_Type()
)
ospfExtLsdbInfoType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfExtLsdbInfoType.setStatus("current")
_OspfExtLsdbInfoLsid_Type = IpAddress
_OspfExtLsdbInfoLsid_Object = MibTableColumn
ospfExtLsdbInfoLsid = _OspfExtLsdbInfoLsid_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 9, 1, 3),
    _OspfExtLsdbInfoLsid_Type()
)
ospfExtLsdbInfoLsid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfExtLsdbInfoLsid.setStatus("current")
_OspfExtLsdbInfoRouterId_Type = IpAddress
_OspfExtLsdbInfoRouterId_Object = MibTableColumn
ospfExtLsdbInfoRouterId = _OspfExtLsdbInfoRouterId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 9, 1, 4),
    _OspfExtLsdbInfoRouterId_Type()
)
ospfExtLsdbInfoRouterId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfExtLsdbInfoRouterId.setStatus("current")


class _OspfExtLsdbInfoSequence_Type(OctetString):
    """Custom type ospfExtLsdbInfoSequence based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(10, 10),
    )
    fixed_length = 10


_OspfExtLsdbInfoSequence_Type.__name__ = "OctetString"
_OspfExtLsdbInfoSequence_Object = MibTableColumn
ospfExtLsdbInfoSequence = _OspfExtLsdbInfoSequence_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 9, 1, 5),
    _OspfExtLsdbInfoSequence_Type()
)
ospfExtLsdbInfoSequence.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfExtLsdbInfoSequence.setStatus("current")
_OspfExtLsdbInfoAge_Type = Integer32
_OspfExtLsdbInfoAge_Object = MibTableColumn
ospfExtLsdbInfoAge = _OspfExtLsdbInfoAge_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 9, 1, 6),
    _OspfExtLsdbInfoAge_Type()
)
ospfExtLsdbInfoAge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfExtLsdbInfoAge.setStatus("current")
_OspfExtLsdbInfoChecksum_Type = Integer32
_OspfExtLsdbInfoChecksum_Object = MibTableColumn
ospfExtLsdbInfoChecksum = _OspfExtLsdbInfoChecksum_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 9, 1, 7),
    _OspfExtLsdbInfoChecksum_Type()
)
ospfExtLsdbInfoChecksum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfExtLsdbInfoChecksum.setStatus("current")


class _OspfExtLsdbInfoAdvertisement_Type(OctetString):
    """Custom type ospfExtLsdbInfoAdvertisement based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(36, 36),
    )
    fixed_length = 36


_OspfExtLsdbInfoAdvertisement_Type.__name__ = "OctetString"
_OspfExtLsdbInfoAdvertisement_Object = MibTableColumn
ospfExtLsdbInfoAdvertisement = _OspfExtLsdbInfoAdvertisement_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 4, 9, 1, 8),
    _OspfExtLsdbInfoAdvertisement_Type()
)
ospfExtLsdbInfoAdvertisement.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ospfExtLsdbInfoAdvertisement.setStatus("current")
_IgmpInfo_ObjectIdentity = ObjectIdentity
igmpInfo = _IgmpInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 5)
)
_IgmpInfoTable_Object = MibTable
igmpInfoTable = _IgmpInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 5, 1)
)
if mibBuilder.loadTexts:
    igmpInfoTable.setStatus("current")
_IgmpInfoEntry_Object = MibTableRow
igmpInfoEntry = _IgmpInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 5, 1, 1)
)
igmpInfoEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "igmpInfoIndex"),
)
if mibBuilder.loadTexts:
    igmpInfoEntry.setStatus("current")
_IgmpInfoIndex_Type = Integer32
_IgmpInfoIndex_Object = MibTableColumn
igmpInfoIndex = _IgmpInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 5, 1, 1, 1),
    _IgmpInfoIndex_Type()
)
igmpInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpInfoIndex.setStatus("current")
_IgmpInfoGroupId_Type = IpAddress
_IgmpInfoGroupId_Object = MibTableColumn
igmpInfoGroupId = _IgmpInfoGroupId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 5, 1, 1, 2),
    _IgmpInfoGroupId_Type()
)
igmpInfoGroupId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpInfoGroupId.setStatus("current")
_IgmpInfoVlanId_Type = Integer32
_IgmpInfoVlanId_Object = MibTableColumn
igmpInfoVlanId = _IgmpInfoVlanId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 5, 1, 1, 3),
    _IgmpInfoVlanId_Type()
)
igmpInfoVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpInfoVlanId.setStatus("current")


class _IgmpInfoVersion_Type(Integer32):
    """Custom type igmpInfoVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("v3", 1),
          ("v2", 2),
          ("v1", 3))
    )


_IgmpInfoVersion_Type.__name__ = "Integer32"
_IgmpInfoVersion_Object = MibTableColumn
igmpInfoVersion = _IgmpInfoVersion_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 5, 1, 1, 5),
    _IgmpInfoVersion_Type()
)
igmpInfoVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpInfoVersion.setStatus("current")
_IgmpInfoPortNum_Type = Integer32
_IgmpInfoPortNum_Object = MibTableColumn
igmpInfoPortNum = _IgmpInfoPortNum_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 5, 1, 1, 6),
    _IgmpInfoPortNum_Type()
)
igmpInfoPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpInfoPortNum.setStatus("current")
_IgmpInfoExpires_Type = DisplayString
_IgmpInfoExpires_Object = MibTableColumn
igmpInfoExpires = _IgmpInfoExpires_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 5, 1, 1, 7),
    _IgmpInfoExpires_Type()
)
igmpInfoExpires.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpInfoExpires.setStatus("current")


class _IgmpInfoMode_Type(Integer32):
    """Custom type igmpInfoMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("exclude", 1),
          ("include", 2))
    )


_IgmpInfoMode_Type.__name__ = "Integer32"
_IgmpInfoMode_Object = MibTableColumn
igmpInfoMode = _IgmpInfoMode_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 5, 1, 1, 8),
    _IgmpInfoMode_Type()
)
igmpInfoMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpInfoMode.setStatus("current")
_IgmpInfoSourceIp_Type = IpAddress
_IgmpInfoSourceIp_Object = MibTableColumn
igmpInfoSourceIp = _IgmpInfoSourceIp_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 5, 1, 1, 9),
    _IgmpInfoSourceIp_Type()
)
igmpInfoSourceIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpInfoSourceIp.setStatus("current")


class _IgmpInfoFwd_Type(Integer32):
    """Custom type igmpInfoFwd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("yes", 1),
          ("no", 2))
    )


_IgmpInfoFwd_Type.__name__ = "Integer32"
_IgmpInfoFwd_Object = MibTableColumn
igmpInfoFwd = _IgmpInfoFwd_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 5, 1, 1, 10),
    _IgmpInfoFwd_Type()
)
igmpInfoFwd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpInfoFwd.setStatus("current")
_IgmpMrtrInfoTable_Object = MibTable
igmpMrtrInfoTable = _IgmpMrtrInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 5, 2)
)
if mibBuilder.loadTexts:
    igmpMrtrInfoTable.setStatus("current")
_IgmpMrtrInfoEntry_Object = MibTableRow
igmpMrtrInfoEntry = _IgmpMrtrInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 5, 2, 1)
)
igmpMrtrInfoEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "igmpMrtrInfoIndex"),
)
if mibBuilder.loadTexts:
    igmpMrtrInfoEntry.setStatus("current")
_IgmpMrtrInfoIndex_Type = Integer32
_IgmpMrtrInfoIndex_Object = MibTableColumn
igmpMrtrInfoIndex = _IgmpMrtrInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 5, 2, 1, 1),
    _IgmpMrtrInfoIndex_Type()
)
igmpMrtrInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpMrtrInfoIndex.setStatus("current")
_IgmpMrtrInfoVlanId_Type = Integer32
_IgmpMrtrInfoVlanId_Object = MibTableColumn
igmpMrtrInfoVlanId = _IgmpMrtrInfoVlanId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 5, 2, 1, 2),
    _IgmpMrtrInfoVlanId_Type()
)
igmpMrtrInfoVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpMrtrInfoVlanId.setStatus("current")
_IgmpMrtrInfoPortId_Type = Integer32
_IgmpMrtrInfoPortId_Object = MibTableColumn
igmpMrtrInfoPortId = _IgmpMrtrInfoPortId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 5, 2, 1, 3),
    _IgmpMrtrInfoPortId_Type()
)
igmpMrtrInfoPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpMrtrInfoPortId.setStatus("current")
_IgmpMrtrInfoVersion_Type = Integer32
_IgmpMrtrInfoVersion_Object = MibTableColumn
igmpMrtrInfoVersion = _IgmpMrtrInfoVersion_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 5, 2, 1, 4),
    _IgmpMrtrInfoVersion_Type()
)
igmpMrtrInfoVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpMrtrInfoVersion.setStatus("current")
_IgmpMrtrInfoExpires_Type = DisplayString
_IgmpMrtrInfoExpires_Object = MibTableColumn
igmpMrtrInfoExpires = _IgmpMrtrInfoExpires_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 5, 2, 1, 5),
    _IgmpMrtrInfoExpires_Type()
)
igmpMrtrInfoExpires.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpMrtrInfoExpires.setStatus("current")
_IgmpMrtrInfoMrt_Type = Integer32
_IgmpMrtrInfoMrt_Object = MibTableColumn
igmpMrtrInfoMrt = _IgmpMrtrInfoMrt_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 5, 2, 1, 6),
    _IgmpMrtrInfoMrt_Type()
)
igmpMrtrInfoMrt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpMrtrInfoMrt.setStatus("current")
_IgmpMrtrInfoQrv_Type = Integer32
_IgmpMrtrInfoQrv_Object = MibTableColumn
igmpMrtrInfoQrv = _IgmpMrtrInfoQrv_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 5, 2, 1, 7),
    _IgmpMrtrInfoQrv_Type()
)
igmpMrtrInfoQrv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpMrtrInfoQrv.setStatus("current")
_IgmpMrtrInfoQqic_Type = Integer32
_IgmpMrtrInfoQqic_Object = MibTableColumn
igmpMrtrInfoQqic = _IgmpMrtrInfoQqic_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 5, 2, 1, 8),
    _IgmpMrtrInfoQqic_Type()
)
igmpMrtrInfoQqic.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    igmpMrtrInfoQqic.setStatus("current")
_Rip2Info_ObjectIdentity = ObjectIdentity
rip2Info = _Rip2Info_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 7)
)
_Rip2GeneralInfo_ObjectIdentity = ObjectIdentity
rip2GeneralInfo = _Rip2GeneralInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 7, 1)
)


class _RipInfoState_Type(Integer32):
    """Custom type ripInfoState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_RipInfoState_Type.__name__ = "Integer32"
_RipInfoState_Object = MibScalar
ripInfoState = _RipInfoState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 7, 1, 1),
    _RipInfoState_Type()
)
ripInfoState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripInfoState.setStatus("current")


class _RipInfoUpdatePeriod_Type(Integer32):
    """Custom type ripInfoUpdatePeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 120),
    )


_RipInfoUpdatePeriod_Type.__name__ = "Integer32"
_RipInfoUpdatePeriod_Object = MibScalar
ripInfoUpdatePeriod = _RipInfoUpdatePeriod_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 7, 1, 2),
    _RipInfoUpdatePeriod_Type()
)
ripInfoUpdatePeriod.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripInfoUpdatePeriod.setStatus("current")
_Rip2InfoIntfTable_Object = MibTable
rip2InfoIntfTable = _Rip2InfoIntfTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 7, 2)
)
if mibBuilder.loadTexts:
    rip2InfoIntfTable.setStatus("current")
_RipInfoIntfEntry_Object = MibTableRow
ripInfoIntfEntry = _RipInfoIntfEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 7, 2, 1)
)
ripInfoIntfEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ripInfoIntfIndex"),
)
if mibBuilder.loadTexts:
    ripInfoIntfEntry.setStatus("current")
_RipInfoIntfIndex_Type = Integer32
_RipInfoIntfIndex_Object = MibTableColumn
ripInfoIntfIndex = _RipInfoIntfIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 7, 2, 1, 1),
    _RipInfoIntfIndex_Type()
)
ripInfoIntfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripInfoIntfIndex.setStatus("current")


class _RipInfoIntfVersion_Type(Integer32):
    """Custom type ripInfoIntfVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ripVersion1", 1),
          ("ripVersion2", 2),
          ("ripVersionBoth", 3))
    )


_RipInfoIntfVersion_Type.__name__ = "Integer32"
_RipInfoIntfVersion_Object = MibTableColumn
ripInfoIntfVersion = _RipInfoIntfVersion_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 7, 2, 1, 2),
    _RipInfoIntfVersion_Type()
)
ripInfoIntfVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripInfoIntfVersion.setStatus("current")
_RipInfoIntfAddress_Type = IpAddress
_RipInfoIntfAddress_Object = MibTableColumn
ripInfoIntfAddress = _RipInfoIntfAddress_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 7, 2, 1, 3),
    _RipInfoIntfAddress_Type()
)
ripInfoIntfAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripInfoIntfAddress.setStatus("current")


class _RipInfoIntfState_Type(Integer32):
    """Custom type ripInfoIntfState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RipInfoIntfState_Type.__name__ = "Integer32"
_RipInfoIntfState_Object = MibTableColumn
ripInfoIntfState = _RipInfoIntfState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 7, 2, 1, 4),
    _RipInfoIntfState_Type()
)
ripInfoIntfState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripInfoIntfState.setStatus("current")


class _RipInfoIntfListen_Type(Integer32):
    """Custom type ripInfoIntfListen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RipInfoIntfListen_Type.__name__ = "Integer32"
_RipInfoIntfListen_Object = MibTableColumn
ripInfoIntfListen = _RipInfoIntfListen_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 7, 2, 1, 5),
    _RipInfoIntfListen_Type()
)
ripInfoIntfListen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripInfoIntfListen.setStatus("current")


class _RipInfoIntfTrigUpdate_Type(Integer32):
    """Custom type ripInfoIntfTrigUpdate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RipInfoIntfTrigUpdate_Type.__name__ = "Integer32"
_RipInfoIntfTrigUpdate_Object = MibTableColumn
ripInfoIntfTrigUpdate = _RipInfoIntfTrigUpdate_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 7, 2, 1, 6),
    _RipInfoIntfTrigUpdate_Type()
)
ripInfoIntfTrigUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripInfoIntfTrigUpdate.setStatus("current")


class _RipInfoIntfMcastUpdate_Type(Integer32):
    """Custom type ripInfoIntfMcastUpdate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RipInfoIntfMcastUpdate_Type.__name__ = "Integer32"
_RipInfoIntfMcastUpdate_Object = MibTableColumn
ripInfoIntfMcastUpdate = _RipInfoIntfMcastUpdate_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 7, 2, 1, 7),
    _RipInfoIntfMcastUpdate_Type()
)
ripInfoIntfMcastUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripInfoIntfMcastUpdate.setStatus("current")


class _RipInfoIntfPoisonReverse_Type(Integer32):
    """Custom type ripInfoIntfPoisonReverse based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RipInfoIntfPoisonReverse_Type.__name__ = "Integer32"
_RipInfoIntfPoisonReverse_Object = MibTableColumn
ripInfoIntfPoisonReverse = _RipInfoIntfPoisonReverse_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 7, 2, 1, 8),
    _RipInfoIntfPoisonReverse_Type()
)
ripInfoIntfPoisonReverse.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripInfoIntfPoisonReverse.setStatus("current")


class _RipInfoIntfSupply_Type(Integer32):
    """Custom type ripInfoIntfSupply based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_RipInfoIntfSupply_Type.__name__ = "Integer32"
_RipInfoIntfSupply_Object = MibTableColumn
ripInfoIntfSupply = _RipInfoIntfSupply_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 7, 2, 1, 9),
    _RipInfoIntfSupply_Type()
)
ripInfoIntfSupply.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripInfoIntfSupply.setStatus("current")


class _RipInfoIntfMetric_Type(Integer32):
    """Custom type ripInfoIntfMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_RipInfoIntfMetric_Type.__name__ = "Integer32"
_RipInfoIntfMetric_Object = MibTableColumn
ripInfoIntfMetric = _RipInfoIntfMetric_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 7, 2, 1, 10),
    _RipInfoIntfMetric_Type()
)
ripInfoIntfMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripInfoIntfMetric.setStatus("current")


class _RipInfoIntfAuth_Type(Integer32):
    """Custom type ripInfoIntfAuth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("password", 2))
    )


_RipInfoIntfAuth_Type.__name__ = "Integer32"
_RipInfoIntfAuth_Object = MibTableColumn
ripInfoIntfAuth = _RipInfoIntfAuth_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 7, 2, 1, 11),
    _RipInfoIntfAuth_Type()
)
ripInfoIntfAuth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripInfoIntfAuth.setStatus("current")


class _RipInfoIntfKey_Type(DisplayString):
    """Custom type ripInfoIntfKey based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_RipInfoIntfKey_Type.__name__ = "DisplayString"
_RipInfoIntfKey_Object = MibTableColumn
ripInfoIntfKey = _RipInfoIntfKey_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 7, 2, 1, 12),
    _RipInfoIntfKey_Type()
)
ripInfoIntfKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripInfoIntfKey.setStatus("current")


class _RipInfoIntfDefault_Type(Integer32):
    """Custom type ripInfoIntfDefault based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("both", 1),
          ("listen", 2),
          ("supply", 3),
          ("none", 4))
    )


_RipInfoIntfDefault_Type.__name__ = "Integer32"
_RipInfoIntfDefault_Object = MibTableColumn
ripInfoIntfDefault = _RipInfoIntfDefault_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 7, 2, 1, 13),
    _RipInfoIntfDefault_Type()
)
ripInfoIntfDefault.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripInfoIntfDefault.setStatus("current")
_IpInfo_ObjectIdentity = ObjectIdentity
ipInfo = _IpInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8)
)
_IpInfoRouterID_Type = IpAddress
_IpInfoRouterID_Object = MibScalar
ipInfoRouterID = _IpInfoRouterID_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 1),
    _IpInfoRouterID_Type()
)
ipInfoRouterID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInfoRouterID.setStatus("current")
_IpIntfInfoTable_Object = MibTable
ipIntfInfoTable = _IpIntfInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 2)
)
if mibBuilder.loadTexts:
    ipIntfInfoTable.setStatus("current")
_IntfInfoEntry_Object = MibTableRow
intfInfoEntry = _IntfInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 2, 1)
)
intfInfoEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "intfInfoIndex"),
)
if mibBuilder.loadTexts:
    intfInfoEntry.setStatus("current")
_IntfInfoIndex_Type = Integer32
_IntfInfoIndex_Object = MibTableColumn
intfInfoIndex = _IntfInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 2, 1, 1),
    _IntfInfoIndex_Type()
)
intfInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    intfInfoIndex.setStatus("current")
_IntfInfoAddr_Type = DisplayString
_IntfInfoAddr_Object = MibTableColumn
intfInfoAddr = _IntfInfoAddr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 2, 1, 2),
    _IntfInfoAddr_Type()
)
intfInfoAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    intfInfoAddr.setStatus("current")
_IntfInfoNetMask_Type = DisplayString
_IntfInfoNetMask_Object = MibTableColumn
intfInfoNetMask = _IntfInfoNetMask_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 2, 1, 3),
    _IntfInfoNetMask_Type()
)
intfInfoNetMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    intfInfoNetMask.setStatus("current")
_IntfInfoBcastAddr_Type = DisplayString
_IntfInfoBcastAddr_Object = MibTableColumn
intfInfoBcastAddr = _IntfInfoBcastAddr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 2, 1, 4),
    _IntfInfoBcastAddr_Type()
)
intfInfoBcastAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    intfInfoBcastAddr.setStatus("current")
_IntfInfoVlan_Type = Integer32
_IntfInfoVlan_Object = MibTableColumn
intfInfoVlan = _IntfInfoVlan_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 2, 1, 5),
    _IntfInfoVlan_Type()
)
intfInfoVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    intfInfoVlan.setStatus("current")


class _IntfInfoStatus_Type(Integer32):
    """Custom type intfInfoStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("up", 1),
          ("down", 2),
          ("disabled", 3))
    )


_IntfInfoStatus_Type.__name__ = "Integer32"
_IntfInfoStatus_Object = MibTableColumn
intfInfoStatus = _IntfInfoStatus_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 2, 1, 6),
    _IntfInfoStatus_Type()
)
intfInfoStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    intfInfoStatus.setStatus("current")
_GatewayInfoTable_Object = MibTable
gatewayInfoTable = _GatewayInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 3)
)
if mibBuilder.loadTexts:
    gatewayInfoTable.setStatus("current")
_GatewayInfoEntry_Object = MibTableRow
gatewayInfoEntry = _GatewayInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 3, 1)
)
gatewayInfoEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "gatewayInfoIndex"),
)
if mibBuilder.loadTexts:
    gatewayInfoEntry.setStatus("current")
_GatewayInfoIndex_Type = Integer32
_GatewayInfoIndex_Object = MibTableColumn
gatewayInfoIndex = _GatewayInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 3, 1, 1),
    _GatewayInfoIndex_Type()
)
gatewayInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    gatewayInfoIndex.setStatus("current")
_GatewayInfoAddr_Type = IpAddress
_GatewayInfoAddr_Object = MibTableColumn
gatewayInfoAddr = _GatewayInfoAddr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 3, 1, 2),
    _GatewayInfoAddr_Type()
)
gatewayInfoAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    gatewayInfoAddr.setStatus("current")


class _GatewayInfoVlan_Type(Integer32):
    """Custom type gatewayInfoVlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4090),
    )


_GatewayInfoVlan_Type.__name__ = "Integer32"
_GatewayInfoVlan_Object = MibTableColumn
gatewayInfoVlan = _GatewayInfoVlan_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 3, 1, 3),
    _GatewayInfoVlan_Type()
)
gatewayInfoVlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    gatewayInfoVlan.setStatus("current")


class _GatewayInfoStatus_Type(Integer32):
    """Custom type gatewayInfoStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("up", 1),
          ("failed", 2))
    )


_GatewayInfoStatus_Type.__name__ = "Integer32"
_GatewayInfoStatus_Object = MibTableColumn
gatewayInfoStatus = _GatewayInfoStatus_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 3, 1, 4),
    _GatewayInfoStatus_Type()
)
gatewayInfoStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    gatewayInfoStatus.setStatus("current")


class _IpInfoBootpRelayState_Type(Integer32):
    """Custom type ipInfoBootpRelayState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_IpInfoBootpRelayState_Type.__name__ = "Integer32"
_IpInfoBootpRelayState_Object = MibScalar
ipInfoBootpRelayState = _IpInfoBootpRelayState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 4),
    _IpInfoBootpRelayState_Type()
)
ipInfoBootpRelayState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInfoBootpRelayState.setStatus("current")
_IpInfoBootpRelayAddr_Type = IpAddress
_IpInfoBootpRelayAddr_Object = MibScalar
ipInfoBootpRelayAddr = _IpInfoBootpRelayAddr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 5),
    _IpInfoBootpRelayAddr_Type()
)
ipInfoBootpRelayAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInfoBootpRelayAddr.setStatus("current")
_IpInfoBootpRelayAddr2_Type = IpAddress
_IpInfoBootpRelayAddr2_Object = MibScalar
ipInfoBootpRelayAddr2 = _IpInfoBootpRelayAddr2_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 6),
    _IpInfoBootpRelayAddr2_Type()
)
ipInfoBootpRelayAddr2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInfoBootpRelayAddr2.setStatus("current")


class _IpInfoFwdState_Type(Integer32):
    """Custom type ipInfoFwdState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_IpInfoFwdState_Type.__name__ = "Integer32"
_IpInfoFwdState_Object = MibScalar
ipInfoFwdState = _IpInfoFwdState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 7),
    _IpInfoFwdState_Type()
)
ipInfoFwdState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInfoFwdState.setStatus("current")


class _IpInfoFwdDirectedBcast_Type(Integer32):
    """Custom type ipInfoFwdDirectedBcast based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_IpInfoFwdDirectedBcast_Type.__name__ = "Integer32"
_IpInfoFwdDirectedBcast_Object = MibScalar
ipInfoFwdDirectedBcast = _IpInfoFwdDirectedBcast_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 8),
    _IpInfoFwdDirectedBcast_Type()
)
ipInfoFwdDirectedBcast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInfoFwdDirectedBcast.setStatus("current")
_IpInfoNwfTable_Object = MibTable
ipInfoNwfTable = _IpInfoNwfTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 9)
)
if mibBuilder.loadTexts:
    ipInfoNwfTable.setStatus("current")
_IpInfoNwfEntry_Object = MibTableRow
ipInfoNwfEntry = _IpInfoNwfEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 9, 1)
)
ipInfoNwfEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ipInfoNwfIndex"),
)
if mibBuilder.loadTexts:
    ipInfoNwfEntry.setStatus("current")
_IpInfoNwfIndex_Type = Integer32
_IpInfoNwfIndex_Object = MibTableColumn
ipInfoNwfIndex = _IpInfoNwfIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 9, 1, 1),
    _IpInfoNwfIndex_Type()
)
ipInfoNwfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInfoNwfIndex.setStatus("current")
_IpInfoNwfAddr_Type = IpAddress
_IpInfoNwfAddr_Object = MibTableColumn
ipInfoNwfAddr = _IpInfoNwfAddr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 9, 1, 2),
    _IpInfoNwfAddr_Type()
)
ipInfoNwfAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInfoNwfAddr.setStatus("current")
_IpInfoNwfMask_Type = IpAddress
_IpInfoNwfMask_Object = MibTableColumn
ipInfoNwfMask = _IpInfoNwfMask_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 9, 1, 3),
    _IpInfoNwfMask_Type()
)
ipInfoNwfMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInfoNwfMask.setStatus("current")


class _IpInfoNwfState_Type(Integer32):
    """Custom type ipInfoNwfState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IpInfoNwfState_Type.__name__ = "Integer32"
_IpInfoNwfState_Object = MibTableColumn
ipInfoNwfState = _IpInfoNwfState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 9, 1, 4),
    _IpInfoNwfState_Type()
)
ipInfoNwfState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInfoNwfState.setStatus("current")
_IpInfoRmapTable_Object = MibTable
ipInfoRmapTable = _IpInfoRmapTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 10)
)
if mibBuilder.loadTexts:
    ipInfoRmapTable.setStatus("current")
_IpInfoRmapEntry_Object = MibTableRow
ipInfoRmapEntry = _IpInfoRmapEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 10, 1)
)
ipInfoRmapEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ipInfoRmapIndex"),
)
if mibBuilder.loadTexts:
    ipInfoRmapEntry.setStatus("current")
_IpInfoRmapIndex_Type = Integer32
_IpInfoRmapIndex_Object = MibTableColumn
ipInfoRmapIndex = _IpInfoRmapIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 10, 1, 1),
    _IpInfoRmapIndex_Type()
)
ipInfoRmapIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInfoRmapIndex.setStatus("current")


class _IpInfoRmapLp_Type(Unsigned32):
    """Custom type ipInfoRmapLp based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_IpInfoRmapLp_Type.__name__ = "Unsigned32"
_IpInfoRmapLp_Object = MibTableColumn
ipInfoRmapLp = _IpInfoRmapLp_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 10, 1, 2),
    _IpInfoRmapLp_Type()
)
ipInfoRmapLp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInfoRmapLp.setStatus("current")


class _IpInfoRmapMetric_Type(Unsigned32):
    """Custom type ipInfoRmapMetric based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_IpInfoRmapMetric_Type.__name__ = "Unsigned32"
_IpInfoRmapMetric_Object = MibTableColumn
ipInfoRmapMetric = _IpInfoRmapMetric_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 10, 1, 3),
    _IpInfoRmapMetric_Type()
)
ipInfoRmapMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInfoRmapMetric.setStatus("current")


class _IpInfoRmapPrec_Type(Integer32):
    """Custom type ipInfoRmapPrec based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_IpInfoRmapPrec_Type.__name__ = "Integer32"
_IpInfoRmapPrec_Object = MibTableColumn
ipInfoRmapPrec = _IpInfoRmapPrec_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 10, 1, 4),
    _IpInfoRmapPrec_Type()
)
ipInfoRmapPrec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInfoRmapPrec.setStatus("current")


class _IpInfoRmapWeight_Type(Integer32):
    """Custom type ipInfoRmapWeight based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_IpInfoRmapWeight_Type.__name__ = "Integer32"
_IpInfoRmapWeight_Object = MibTableColumn
ipInfoRmapWeight = _IpInfoRmapWeight_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 10, 1, 5),
    _IpInfoRmapWeight_Type()
)
ipInfoRmapWeight.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInfoRmapWeight.setStatus("current")


class _IpInfoRmapState_Type(Integer32):
    """Custom type ipInfoRmapState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IpInfoRmapState_Type.__name__ = "Integer32"
_IpInfoRmapState_Object = MibTableColumn
ipInfoRmapState = _IpInfoRmapState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 10, 1, 6),
    _IpInfoRmapState_Type()
)
ipInfoRmapState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInfoRmapState.setStatus("current")


class _IpInfoRmapAp_Type(DisplayString):
    """Custom type ipInfoRmapAp based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 17),
    )


_IpInfoRmapAp_Type.__name__ = "DisplayString"
_IpInfoRmapAp_Object = MibTableColumn
ipInfoRmapAp = _IpInfoRmapAp_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 10, 1, 7),
    _IpInfoRmapAp_Type()
)
ipInfoRmapAp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInfoRmapAp.setStatus("current")


class _IpInfoRmapMetricType_Type(Integer32):
    """Custom type ipInfoRmapMetricType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("type1", 2),
          ("type2", 3))
    )


_IpInfoRmapMetricType_Type.__name__ = "Integer32"
_IpInfoRmapMetricType_Object = MibTableColumn
ipInfoRmapMetricType = _IpInfoRmapMetricType_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 10, 1, 8),
    _IpInfoRmapMetricType_Type()
)
ipInfoRmapMetricType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipInfoRmapMetricType.setStatus("current")
_IpOspfInfo_ObjectIdentity = ObjectIdentity
ipOspfInfo = _IpOspfInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11)
)


class _IpOspfInfoState_Type(Integer32):
    """Custom type ipOspfInfoState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 1),
          ("off", 2))
    )


_IpOspfInfoState_Type.__name__ = "Integer32"
_IpOspfInfoState_Object = MibScalar
ipOspfInfoState = _IpOspfInfoState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 1),
    _IpOspfInfoState_Type()
)
ipOspfInfoState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfInfoState.setStatus("current")


class _IpOspfInfoDefaultRouteMetric_Type(Integer32):
    """Custom type ipOspfInfoDefaultRouteMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_IpOspfInfoDefaultRouteMetric_Type.__name__ = "Integer32"
_IpOspfInfoDefaultRouteMetric_Object = MibScalar
ipOspfInfoDefaultRouteMetric = _IpOspfInfoDefaultRouteMetric_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 2),
    _IpOspfInfoDefaultRouteMetric_Type()
)
ipOspfInfoDefaultRouteMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfInfoDefaultRouteMetric.setStatus("current")


class _IpOspfInfoDefaultRouteMetricType_Type(Integer32):
    """Custom type ipOspfInfoDefaultRouteMetricType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("type1", 2),
          ("type2", 3))
    )


_IpOspfInfoDefaultRouteMetricType_Type.__name__ = "Integer32"
_IpOspfInfoDefaultRouteMetricType_Object = MibScalar
ipOspfInfoDefaultRouteMetricType = _IpOspfInfoDefaultRouteMetricType_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 3),
    _IpOspfInfoDefaultRouteMetricType_Type()
)
ipOspfInfoDefaultRouteMetricType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfInfoDefaultRouteMetricType.setStatus("current")
_IpOspfInfoRouterID_Type = IpAddress
_IpOspfInfoRouterID_Object = MibScalar
ipOspfInfoRouterID = _IpOspfInfoRouterID_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 4),
    _IpOspfInfoRouterID_Type()
)
ipOspfInfoRouterID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfInfoRouterID.setStatus("current")


class _IpOspfInfoLsdbLimit_Type(Integer32):
    """Custom type ipOspfInfoLsdbLimit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2000),
    )


_IpOspfInfoLsdbLimit_Type.__name__ = "Integer32"
_IpOspfInfoLsdbLimit_Object = MibScalar
ipOspfInfoLsdbLimit = _IpOspfInfoLsdbLimit_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 5),
    _IpOspfInfoLsdbLimit_Type()
)
ipOspfInfoLsdbLimit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfInfoLsdbLimit.setStatus("current")
_IpOspfAreaInfoTable_Object = MibTable
ipOspfAreaInfoTable = _IpOspfAreaInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 6)
)
if mibBuilder.loadTexts:
    ipOspfAreaInfoTable.setStatus("current")
_IpOspfAreaInfoEntry_Object = MibTableRow
ipOspfAreaInfoEntry = _IpOspfAreaInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 6, 1)
)
ipOspfAreaInfoEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ipOspfAreaInfoIndex"),
    (0, "BLADETYPE5-NETWORK-MIB", "ipOspfAreaInfoId"),
)
if mibBuilder.loadTexts:
    ipOspfAreaInfoEntry.setStatus("current")
_IpOspfAreaInfoIndex_Type = Integer32
_IpOspfAreaInfoIndex_Object = MibTableColumn
ipOspfAreaInfoIndex = _IpOspfAreaInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 6, 1, 1),
    _IpOspfAreaInfoIndex_Type()
)
ipOspfAreaInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfAreaInfoIndex.setStatus("current")
_IpOspfAreaInfoId_Type = IpAddress
_IpOspfAreaInfoId_Object = MibTableColumn
ipOspfAreaInfoId = _IpOspfAreaInfoId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 6, 1, 2),
    _IpOspfAreaInfoId_Type()
)
ipOspfAreaInfoId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfAreaInfoId.setStatus("current")


class _IpOspfAreaInfoSpfInterval_Type(Integer32):
    """Custom type ipOspfAreaInfoSpfInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_IpOspfAreaInfoSpfInterval_Type.__name__ = "Integer32"
_IpOspfAreaInfoSpfInterval_Object = MibTableColumn
ipOspfAreaInfoSpfInterval = _IpOspfAreaInfoSpfInterval_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 6, 1, 3),
    _IpOspfAreaInfoSpfInterval_Type()
)
ipOspfAreaInfoSpfInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfAreaInfoSpfInterval.setStatus("current")


class _IpOspfAreaInfoAuthType_Type(Integer32):
    """Custom type ipOspfAreaInfoAuthType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("password", 2),
          ("md5", 3))
    )


_IpOspfAreaInfoAuthType_Type.__name__ = "Integer32"
_IpOspfAreaInfoAuthType_Object = MibTableColumn
ipOspfAreaInfoAuthType = _IpOspfAreaInfoAuthType_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 6, 1, 4),
    _IpOspfAreaInfoAuthType_Type()
)
ipOspfAreaInfoAuthType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfAreaInfoAuthType.setStatus("current")


class _IpOspfAreaInfoType_Type(Integer32):
    """Custom type ipOspfAreaInfoType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("transit", 0),
          ("stub", 1),
          ("nssa", 2))
    )


_IpOspfAreaInfoType_Type.__name__ = "Integer32"
_IpOspfAreaInfoType_Object = MibTableColumn
ipOspfAreaInfoType = _IpOspfAreaInfoType_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 6, 1, 5),
    _IpOspfAreaInfoType_Type()
)
ipOspfAreaInfoType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfAreaInfoType.setStatus("current")


class _IpOspfAreaInfoMetric_Type(Integer32):
    """Custom type ipOspfAreaInfoMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_IpOspfAreaInfoMetric_Type.__name__ = "Integer32"
_IpOspfAreaInfoMetric_Object = MibTableColumn
ipOspfAreaInfoMetric = _IpOspfAreaInfoMetric_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 6, 1, 6),
    _IpOspfAreaInfoMetric_Type()
)
ipOspfAreaInfoMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfAreaInfoMetric.setStatus("current")


class _IpOspfAreaInfoStatus_Type(Integer32):
    """Custom type ipOspfAreaInfoStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_IpOspfAreaInfoStatus_Type.__name__ = "Integer32"
_IpOspfAreaInfoStatus_Object = MibTableColumn
ipOspfAreaInfoStatus = _IpOspfAreaInfoStatus_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 6, 1, 7),
    _IpOspfAreaInfoStatus_Type()
)
ipOspfAreaInfoStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfAreaInfoStatus.setStatus("current")
_IpOspfRangeInfoTable_Object = MibTable
ipOspfRangeInfoTable = _IpOspfRangeInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 7)
)
if mibBuilder.loadTexts:
    ipOspfRangeInfoTable.setStatus("current")
_IpOspfRangeInfoEntry_Object = MibTableRow
ipOspfRangeInfoEntry = _IpOspfRangeInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 7, 1)
)
ipOspfRangeInfoEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ipOspfRangeInfoIndex"),
)
if mibBuilder.loadTexts:
    ipOspfRangeInfoEntry.setStatus("current")
_IpOspfRangeInfoIndex_Type = Integer32
_IpOspfRangeInfoIndex_Object = MibTableColumn
ipOspfRangeInfoIndex = _IpOspfRangeInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 7, 1, 1),
    _IpOspfRangeInfoIndex_Type()
)
ipOspfRangeInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfRangeInfoIndex.setStatus("current")
_IpOspfRangeInfoAddr_Type = IpAddress
_IpOspfRangeInfoAddr_Object = MibTableColumn
ipOspfRangeInfoAddr = _IpOspfRangeInfoAddr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 7, 1, 2),
    _IpOspfRangeInfoAddr_Type()
)
ipOspfRangeInfoAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfRangeInfoAddr.setStatus("current")
_IpOspfRangeInfoMask_Type = IpAddress
_IpOspfRangeInfoMask_Object = MibTableColumn
ipOspfRangeInfoMask = _IpOspfRangeInfoMask_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 7, 1, 3),
    _IpOspfRangeInfoMask_Type()
)
ipOspfRangeInfoMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfRangeInfoMask.setStatus("current")
_IpOspfRangeInfoAreaIndex_Type = Integer32
_IpOspfRangeInfoAreaIndex_Object = MibTableColumn
ipOspfRangeInfoAreaIndex = _IpOspfRangeInfoAreaIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 7, 1, 4),
    _IpOspfRangeInfoAreaIndex_Type()
)
ipOspfRangeInfoAreaIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfRangeInfoAreaIndex.setStatus("current")


class _IpOspfRangeInfoHideState_Type(Integer32):
    """Custom type ipOspfRangeInfoHideState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IpOspfRangeInfoHideState_Type.__name__ = "Integer32"
_IpOspfRangeInfoHideState_Object = MibTableColumn
ipOspfRangeInfoHideState = _IpOspfRangeInfoHideState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 7, 1, 5),
    _IpOspfRangeInfoHideState_Type()
)
ipOspfRangeInfoHideState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfRangeInfoHideState.setStatus("current")


class _IpOspfRangeInfoState_Type(Integer32):
    """Custom type ipOspfRangeInfoState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("disabled", 2))
    )


_IpOspfRangeInfoState_Type.__name__ = "Integer32"
_IpOspfRangeInfoState_Object = MibTableColumn
ipOspfRangeInfoState = _IpOspfRangeInfoState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 7, 1, 6),
    _IpOspfRangeInfoState_Type()
)
ipOspfRangeInfoState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfRangeInfoState.setStatus("current")
_IpOspfIntfInfoTable_Object = MibTable
ipOspfIntfInfoTable = _IpOspfIntfInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 8)
)
if mibBuilder.loadTexts:
    ipOspfIntfInfoTable.setStatus("current")
_IpOspfIntfInfoEntry_Object = MibTableRow
ipOspfIntfInfoEntry = _IpOspfIntfInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 8, 1)
)
ipOspfIntfInfoEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ipOspfIntfInfoIndex"),
)
if mibBuilder.loadTexts:
    ipOspfIntfInfoEntry.setStatus("current")
_IpOspfIntfInfoIndex_Type = Integer32
_IpOspfIntfInfoIndex_Object = MibTableColumn
ipOspfIntfInfoIndex = _IpOspfIntfInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 8, 1, 1),
    _IpOspfIntfInfoIndex_Type()
)
ipOspfIntfInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfIntfInfoIndex.setStatus("current")
_IpOspfIntfInfoId_Type = IpAddress
_IpOspfIntfInfoId_Object = MibTableColumn
ipOspfIntfInfoId = _IpOspfIntfInfoId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 8, 1, 2),
    _IpOspfIntfInfoId_Type()
)
ipOspfIntfInfoId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfIntfInfoId.setStatus("current")


class _IpOspfIntfInfoArea_Type(Integer32):
    """Custom type ipOspfIntfInfoArea based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2),
    )


_IpOspfIntfInfoArea_Type.__name__ = "Integer32"
_IpOspfIntfInfoArea_Object = MibTableColumn
ipOspfIntfInfoArea = _IpOspfIntfInfoArea_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 8, 1, 3),
    _IpOspfIntfInfoArea_Type()
)
ipOspfIntfInfoArea.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfIntfInfoArea.setStatus("current")


class _IpOspfIntfInfoMdkey_Type(Integer32):
    """Custom type ipOspfIntfInfoMdkey based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_IpOspfIntfInfoMdkey_Type.__name__ = "Integer32"
_IpOspfIntfInfoMdkey_Object = MibTableColumn
ipOspfIntfInfoMdkey = _IpOspfIntfInfoMdkey_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 8, 1, 4),
    _IpOspfIntfInfoMdkey_Type()
)
ipOspfIntfInfoMdkey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfIntfInfoMdkey.setStatus("current")


class _IpOspfIntfInfoCost_Type(Integer32):
    """Custom type ipOspfIntfInfoCost based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_IpOspfIntfInfoCost_Type.__name__ = "Integer32"
_IpOspfIntfInfoCost_Object = MibTableColumn
ipOspfIntfInfoCost = _IpOspfIntfInfoCost_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 8, 1, 5),
    _IpOspfIntfInfoCost_Type()
)
ipOspfIntfInfoCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfIntfInfoCost.setStatus("current")


class _IpOspfIntfInfoPrio_Type(Integer32):
    """Custom type ipOspfIntfInfoPrio based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_IpOspfIntfInfoPrio_Type.__name__ = "Integer32"
_IpOspfIntfInfoPrio_Object = MibTableColumn
ipOspfIntfInfoPrio = _IpOspfIntfInfoPrio_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 8, 1, 6),
    _IpOspfIntfInfoPrio_Type()
)
ipOspfIntfInfoPrio.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfIntfInfoPrio.setStatus("current")


class _IpOspfIntfInfoHello_Type(Integer32):
    """Custom type ipOspfIntfInfoHello based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_IpOspfIntfInfoHello_Type.__name__ = "Integer32"
_IpOspfIntfInfoHello_Object = MibTableColumn
ipOspfIntfInfoHello = _IpOspfIntfInfoHello_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 8, 1, 7),
    _IpOspfIntfInfoHello_Type()
)
ipOspfIntfInfoHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfIntfInfoHello.setStatus("current")


class _IpOspfIntfInfoDead_Type(Integer32):
    """Custom type ipOspfIntfInfoDead based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_IpOspfIntfInfoDead_Type.__name__ = "Integer32"
_IpOspfIntfInfoDead_Object = MibTableColumn
ipOspfIntfInfoDead = _IpOspfIntfInfoDead_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 8, 1, 8),
    _IpOspfIntfInfoDead_Type()
)
ipOspfIntfInfoDead.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfIntfInfoDead.setStatus("current")


class _IpOspfIntfInfoTrans_Type(Integer32):
    """Custom type ipOspfIntfInfoTrans based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_IpOspfIntfInfoTrans_Type.__name__ = "Integer32"
_IpOspfIntfInfoTrans_Object = MibTableColumn
ipOspfIntfInfoTrans = _IpOspfIntfInfoTrans_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 8, 1, 9),
    _IpOspfIntfInfoTrans_Type()
)
ipOspfIntfInfoTrans.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfIntfInfoTrans.setStatus("current")


class _IpOspfIntfInfoRetra_Type(Integer32):
    """Custom type ipOspfIntfInfoRetra based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_IpOspfIntfInfoRetra_Type.__name__ = "Integer32"
_IpOspfIntfInfoRetra_Object = MibTableColumn
ipOspfIntfInfoRetra = _IpOspfIntfInfoRetra_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 8, 1, 10),
    _IpOspfIntfInfoRetra_Type()
)
ipOspfIntfInfoRetra.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfIntfInfoRetra.setStatus("current")


class _IpOspfIntfInfoAuthKey_Type(DisplayString):
    """Custom type ipOspfIntfInfoAuthKey based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_IpOspfIntfInfoAuthKey_Type.__name__ = "DisplayString"
_IpOspfIntfInfoAuthKey_Object = MibTableColumn
ipOspfIntfInfoAuthKey = _IpOspfIntfInfoAuthKey_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 8, 1, 11),
    _IpOspfIntfInfoAuthKey_Type()
)
ipOspfIntfInfoAuthKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfIntfInfoAuthKey.setStatus("current")


class _IpOspfIntfInfoStatus_Type(Integer32):
    """Custom type ipOspfIntfInfoStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_IpOspfIntfInfoStatus_Type.__name__ = "Integer32"
_IpOspfIntfInfoStatus_Object = MibTableColumn
ipOspfIntfInfoStatus = _IpOspfIntfInfoStatus_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 8, 1, 12),
    _IpOspfIntfInfoStatus_Type()
)
ipOspfIntfInfoStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfIntfInfoStatus.setStatus("current")
_IpOspfVirtIntfInfoTable_Object = MibTable
ipOspfVirtIntfInfoTable = _IpOspfVirtIntfInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 9)
)
if mibBuilder.loadTexts:
    ipOspfVirtIntfInfoTable.setStatus("current")
_IpOspfVirtIntfInfoEntry_Object = MibTableRow
ipOspfVirtIntfInfoEntry = _IpOspfVirtIntfInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 9, 1)
)
ipOspfVirtIntfInfoEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ipOspfVirtIntfInfoIndex"),
)
if mibBuilder.loadTexts:
    ipOspfVirtIntfInfoEntry.setStatus("current")
_IpOspfVirtIntfInfoIndex_Type = Integer32
_IpOspfVirtIntfInfoIndex_Object = MibTableColumn
ipOspfVirtIntfInfoIndex = _IpOspfVirtIntfInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 9, 1, 1),
    _IpOspfVirtIntfInfoIndex_Type()
)
ipOspfVirtIntfInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfVirtIntfInfoIndex.setStatus("current")


class _IpOspfVirtIntfInfoAreaId_Type(Integer32):
    """Custom type ipOspfVirtIntfInfoAreaId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2),
    )


_IpOspfVirtIntfInfoAreaId_Type.__name__ = "Integer32"
_IpOspfVirtIntfInfoAreaId_Object = MibTableColumn
ipOspfVirtIntfInfoAreaId = _IpOspfVirtIntfInfoAreaId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 9, 1, 2),
    _IpOspfVirtIntfInfoAreaId_Type()
)
ipOspfVirtIntfInfoAreaId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfVirtIntfInfoAreaId.setStatus("current")
_IpOspfVirtIntfInfoNbr_Type = IpAddress
_IpOspfVirtIntfInfoNbr_Object = MibTableColumn
ipOspfVirtIntfInfoNbr = _IpOspfVirtIntfInfoNbr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 9, 1, 3),
    _IpOspfVirtIntfInfoNbr_Type()
)
ipOspfVirtIntfInfoNbr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfVirtIntfInfoNbr.setStatus("current")


class _IpOspfVirtIntfInfoMdkey_Type(Integer32):
    """Custom type ipOspfVirtIntfInfoMdkey based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_IpOspfVirtIntfInfoMdkey_Type.__name__ = "Integer32"
_IpOspfVirtIntfInfoMdkey_Object = MibTableColumn
ipOspfVirtIntfInfoMdkey = _IpOspfVirtIntfInfoMdkey_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 9, 1, 4),
    _IpOspfVirtIntfInfoMdkey_Type()
)
ipOspfVirtIntfInfoMdkey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfVirtIntfInfoMdkey.setStatus("current")


class _IpOspfVirtIntfInfoHello_Type(Integer32):
    """Custom type ipOspfVirtIntfInfoHello based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_IpOspfVirtIntfInfoHello_Type.__name__ = "Integer32"
_IpOspfVirtIntfInfoHello_Object = MibTableColumn
ipOspfVirtIntfInfoHello = _IpOspfVirtIntfInfoHello_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 9, 1, 5),
    _IpOspfVirtIntfInfoHello_Type()
)
ipOspfVirtIntfInfoHello.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfVirtIntfInfoHello.setStatus("current")


class _IpOspfVirtIntfInfoDead_Type(Integer32):
    """Custom type ipOspfVirtIntfInfoDead based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_IpOspfVirtIntfInfoDead_Type.__name__ = "Integer32"
_IpOspfVirtIntfInfoDead_Object = MibTableColumn
ipOspfVirtIntfInfoDead = _IpOspfVirtIntfInfoDead_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 9, 1, 6),
    _IpOspfVirtIntfInfoDead_Type()
)
ipOspfVirtIntfInfoDead.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfVirtIntfInfoDead.setStatus("current")


class _IpOspfVirtIntfInfoTrans_Type(Integer32):
    """Custom type ipOspfVirtIntfInfoTrans based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_IpOspfVirtIntfInfoTrans_Type.__name__ = "Integer32"
_IpOspfVirtIntfInfoTrans_Object = MibTableColumn
ipOspfVirtIntfInfoTrans = _IpOspfVirtIntfInfoTrans_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 9, 1, 7),
    _IpOspfVirtIntfInfoTrans_Type()
)
ipOspfVirtIntfInfoTrans.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfVirtIntfInfoTrans.setStatus("current")


class _IpOspfVirtIntfInfoRetra_Type(Integer32):
    """Custom type ipOspfVirtIntfInfoRetra based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_IpOspfVirtIntfInfoRetra_Type.__name__ = "Integer32"
_IpOspfVirtIntfInfoRetra_Object = MibTableColumn
ipOspfVirtIntfInfoRetra = _IpOspfVirtIntfInfoRetra_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 9, 1, 8),
    _IpOspfVirtIntfInfoRetra_Type()
)
ipOspfVirtIntfInfoRetra.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfVirtIntfInfoRetra.setStatus("current")


class _IpOspfVirtIntfInfoAuthKey_Type(DisplayString):
    """Custom type ipOspfVirtIntfInfoAuthKey based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_IpOspfVirtIntfInfoAuthKey_Type.__name__ = "DisplayString"
_IpOspfVirtIntfInfoAuthKey_Object = MibTableColumn
ipOspfVirtIntfInfoAuthKey = _IpOspfVirtIntfInfoAuthKey_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 9, 1, 9),
    _IpOspfVirtIntfInfoAuthKey_Type()
)
ipOspfVirtIntfInfoAuthKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfVirtIntfInfoAuthKey.setStatus("current")


class _IpOspfVirtIntfInfoStatus_Type(Integer32):
    """Custom type ipOspfVirtIntfInfoStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_IpOspfVirtIntfInfoStatus_Type.__name__ = "Integer32"
_IpOspfVirtIntfInfoStatus_Object = MibTableColumn
ipOspfVirtIntfInfoStatus = _IpOspfVirtIntfInfoStatus_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 9, 1, 10),
    _IpOspfVirtIntfInfoStatus_Type()
)
ipOspfVirtIntfInfoStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfVirtIntfInfoStatus.setStatus("current")
_IpOspfHostInfoTable_Object = MibTable
ipOspfHostInfoTable = _IpOspfHostInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 10)
)
if mibBuilder.loadTexts:
    ipOspfHostInfoTable.setStatus("current")
_IpOspfHostInfoEntry_Object = MibTableRow
ipOspfHostInfoEntry = _IpOspfHostInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 10, 1)
)
ipOspfHostInfoEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ipOspfHostInfoIndex"),
    (0, "BLADETYPE5-NETWORK-MIB", "ipOspfHostInfoIpAddr"),
)
if mibBuilder.loadTexts:
    ipOspfHostInfoEntry.setStatus("current")
_IpOspfHostInfoIndex_Type = Integer32
_IpOspfHostInfoIndex_Object = MibTableColumn
ipOspfHostInfoIndex = _IpOspfHostInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 10, 1, 1),
    _IpOspfHostInfoIndex_Type()
)
ipOspfHostInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfHostInfoIndex.setStatus("current")
_IpOspfHostInfoIpAddr_Type = IpAddress
_IpOspfHostInfoIpAddr_Object = MibTableColumn
ipOspfHostInfoIpAddr = _IpOspfHostInfoIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 10, 1, 2),
    _IpOspfHostInfoIpAddr_Type()
)
ipOspfHostInfoIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfHostInfoIpAddr.setStatus("current")
_IpOspfHostInfoAreaIndex_Type = Integer32
_IpOspfHostInfoAreaIndex_Object = MibTableColumn
ipOspfHostInfoAreaIndex = _IpOspfHostInfoAreaIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 10, 1, 3),
    _IpOspfHostInfoAreaIndex_Type()
)
ipOspfHostInfoAreaIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfHostInfoAreaIndex.setStatus("current")
_IpOspfHostInfoCost_Type = Integer32
_IpOspfHostInfoCost_Object = MibTableColumn
ipOspfHostInfoCost = _IpOspfHostInfoCost_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 10, 1, 4),
    _IpOspfHostInfoCost_Type()
)
ipOspfHostInfoCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfHostInfoCost.setStatus("current")


class _IpOspfHostInfoState_Type(Integer32):
    """Custom type ipOspfHostInfoState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 2),
          ("disabled", 3))
    )


_IpOspfHostInfoState_Type.__name__ = "Integer32"
_IpOspfHostInfoState_Object = MibTableColumn
ipOspfHostInfoState = _IpOspfHostInfoState_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 10, 1, 5),
    _IpOspfHostInfoState_Type()
)
ipOspfHostInfoState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfHostInfoState.setStatus("current")
_IpOspfRedistributeInfo_ObjectIdentity = ObjectIdentity
ipOspfRedistributeInfo = _IpOspfRedistributeInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 11)
)
_IpOspfRedistributeStaticInfo_ObjectIdentity = ObjectIdentity
ipOspfRedistributeStaticInfo = _IpOspfRedistributeStaticInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 11, 1)
)


class _IpOspfRedistributeStaticInfoMetric_Type(Integer32):
    """Custom type ipOspfRedistributeStaticInfoMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777214),
    )


_IpOspfRedistributeStaticInfoMetric_Type.__name__ = "Integer32"
_IpOspfRedistributeStaticInfoMetric_Object = MibScalar
ipOspfRedistributeStaticInfoMetric = _IpOspfRedistributeStaticInfoMetric_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 11, 1, 1),
    _IpOspfRedistributeStaticInfoMetric_Type()
)
ipOspfRedistributeStaticInfoMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfRedistributeStaticInfoMetric.setStatus("current")


class _IpOspfRedistributeStaticInfoMetricType_Type(Integer32):
    """Custom type ipOspfRedistributeStaticInfoMetricType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("type1", 2),
          ("type2", 3))
    )


_IpOspfRedistributeStaticInfoMetricType_Type.__name__ = "Integer32"
_IpOspfRedistributeStaticInfoMetricType_Object = MibScalar
ipOspfRedistributeStaticInfoMetricType = _IpOspfRedistributeStaticInfoMetricType_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 11, 1, 2),
    _IpOspfRedistributeStaticInfoMetricType_Type()
)
ipOspfRedistributeStaticInfoMetricType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfRedistributeStaticInfoMetricType.setStatus("current")
_IpOspfRedistributeStaticInfoOutRmapList_Type = OctetString
_IpOspfRedistributeStaticInfoOutRmapList_Object = MibScalar
ipOspfRedistributeStaticInfoOutRmapList = _IpOspfRedistributeStaticInfoOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 11, 1, 3),
    _IpOspfRedistributeStaticInfoOutRmapList_Type()
)
ipOspfRedistributeStaticInfoOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfRedistributeStaticInfoOutRmapList.setStatus("current")
_IpOspfRedistributeFixedInfo_ObjectIdentity = ObjectIdentity
ipOspfRedistributeFixedInfo = _IpOspfRedistributeFixedInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 11, 2)
)


class _IpOspfRedistributeFixedInfoMetric_Type(Integer32):
    """Custom type ipOspfRedistributeFixedInfoMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777214),
    )


_IpOspfRedistributeFixedInfoMetric_Type.__name__ = "Integer32"
_IpOspfRedistributeFixedInfoMetric_Object = MibScalar
ipOspfRedistributeFixedInfoMetric = _IpOspfRedistributeFixedInfoMetric_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 11, 2, 1),
    _IpOspfRedistributeFixedInfoMetric_Type()
)
ipOspfRedistributeFixedInfoMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfRedistributeFixedInfoMetric.setStatus("current")


class _IpOspfRedistributeFixedInfoMetricType_Type(Integer32):
    """Custom type ipOspfRedistributeFixedInfoMetricType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("type1", 2),
          ("type2", 3))
    )


_IpOspfRedistributeFixedInfoMetricType_Type.__name__ = "Integer32"
_IpOspfRedistributeFixedInfoMetricType_Object = MibScalar
ipOspfRedistributeFixedInfoMetricType = _IpOspfRedistributeFixedInfoMetricType_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 11, 2, 2),
    _IpOspfRedistributeFixedInfoMetricType_Type()
)
ipOspfRedistributeFixedInfoMetricType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfRedistributeFixedInfoMetricType.setStatus("current")
_IpOspfRedistributeFixedInfoOutRmapList_Type = OctetString
_IpOspfRedistributeFixedInfoOutRmapList_Object = MibScalar
ipOspfRedistributeFixedInfoOutRmapList = _IpOspfRedistributeFixedInfoOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 11, 2, 3),
    _IpOspfRedistributeFixedInfoOutRmapList_Type()
)
ipOspfRedistributeFixedInfoOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfRedistributeFixedInfoOutRmapList.setStatus("current")
_IpOspfRedistributeRipInfo_ObjectIdentity = ObjectIdentity
ipOspfRedistributeRipInfo = _IpOspfRedistributeRipInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 11, 3)
)


class _IpOspfRedistributeRipInfoMetric_Type(Integer32):
    """Custom type ipOspfRedistributeRipInfoMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777214),
    )


_IpOspfRedistributeRipInfoMetric_Type.__name__ = "Integer32"
_IpOspfRedistributeRipInfoMetric_Object = MibScalar
ipOspfRedistributeRipInfoMetric = _IpOspfRedistributeRipInfoMetric_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 11, 3, 1),
    _IpOspfRedistributeRipInfoMetric_Type()
)
ipOspfRedistributeRipInfoMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfRedistributeRipInfoMetric.setStatus("current")


class _IpOspfRedistributeRipInfoMetricType_Type(Integer32):
    """Custom type ipOspfRedistributeRipInfoMetricType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("type1", 2),
          ("type2", 3))
    )


_IpOspfRedistributeRipInfoMetricType_Type.__name__ = "Integer32"
_IpOspfRedistributeRipInfoMetricType_Object = MibScalar
ipOspfRedistributeRipInfoMetricType = _IpOspfRedistributeRipInfoMetricType_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 11, 3, 2),
    _IpOspfRedistributeRipInfoMetricType_Type()
)
ipOspfRedistributeRipInfoMetricType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfRedistributeRipInfoMetricType.setStatus("current")
_IpOspfRedistributeRipInfoOutRmapList_Type = OctetString
_IpOspfRedistributeRipInfoOutRmapList_Object = MibScalar
ipOspfRedistributeRipInfoOutRmapList = _IpOspfRedistributeRipInfoOutRmapList_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 11, 3, 3),
    _IpOspfRedistributeRipInfoOutRmapList_Type()
)
ipOspfRedistributeRipInfoOutRmapList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfRedistributeRipInfoOutRmapList.setStatus("current")
_IpOspfMd5keyInfoTable_Object = MibTable
ipOspfMd5keyInfoTable = _IpOspfMd5keyInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 12)
)
if mibBuilder.loadTexts:
    ipOspfMd5keyInfoTable.setStatus("current")
_IpOspfMd5keyInfoEntry_Object = MibTableRow
ipOspfMd5keyInfoEntry = _IpOspfMd5keyInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 12, 1)
)
ipOspfMd5keyInfoEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "ipOspfMd5keyInfoIndex"),
)
if mibBuilder.loadTexts:
    ipOspfMd5keyInfoEntry.setStatus("current")
_IpOspfMd5keyInfoIndex_Type = Integer32
_IpOspfMd5keyInfoIndex_Object = MibTableColumn
ipOspfMd5keyInfoIndex = _IpOspfMd5keyInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 12, 1, 1),
    _IpOspfMd5keyInfoIndex_Type()
)
ipOspfMd5keyInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfMd5keyInfoIndex.setStatus("current")


class _IpOspfMd5keyInfoKey_Type(DisplayString):
    """Custom type ipOspfMd5keyInfoKey based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_IpOspfMd5keyInfoKey_Type.__name__ = "DisplayString"
_IpOspfMd5keyInfoKey_Object = MibTableColumn
ipOspfMd5keyInfoKey = _IpOspfMd5keyInfoKey_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 3, 8, 11, 12, 1, 2),
    _IpOspfMd5keyInfoKey_Type()
)
ipOspfMd5keyInfoKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ipOspfMd5keyInfoKey.setStatus("current")
_Layer3Oper_ObjectIdentity = ObjectIdentity
layer3Oper = _Layer3Oper_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 4)
)
_VrrpOper_ObjectIdentity = ObjectIdentity
vrrpOper = _VrrpOper_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 4, 1)
)
_VrrpOperVirtRtrTable_Object = MibTable
vrrpOperVirtRtrTable = _VrrpOperVirtRtrTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 4, 1, 1)
)
if mibBuilder.loadTexts:
    vrrpOperVirtRtrTable.setStatus("current")
_VrrpOperVirtRtrEntry_Object = MibTableRow
vrrpOperVirtRtrEntry = _VrrpOperVirtRtrEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 4, 1, 1, 1)
)
vrrpOperVirtRtrEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "vrrpOperVirtRtrIndex"),
)
if mibBuilder.loadTexts:
    vrrpOperVirtRtrEntry.setStatus("current")
_VrrpOperVirtRtrIndex_Type = Integer32
_VrrpOperVirtRtrIndex_Object = MibTableColumn
vrrpOperVirtRtrIndex = _VrrpOperVirtRtrIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 4, 1, 1, 1, 1),
    _VrrpOperVirtRtrIndex_Type()
)
vrrpOperVirtRtrIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrrpOperVirtRtrIndex.setStatus("current")


class _VrrpOperVirtRtrBackup_Type(Integer32):
    """Custom type vrrpOperVirtRtrBackup based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("backup", 2))
    )


_VrrpOperVirtRtrBackup_Type.__name__ = "Integer32"
_VrrpOperVirtRtrBackup_Object = MibTableColumn
vrrpOperVirtRtrBackup = _VrrpOperVirtRtrBackup_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 4, 1, 1, 1, 2),
    _VrrpOperVirtRtrBackup_Type()
)
vrrpOperVirtRtrBackup.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vrrpOperVirtRtrBackup.setStatus("current")


class _VrrpOperVirtRtrGroupBackup_Type(Integer32):
    """Custom type vrrpOperVirtRtrGroupBackup based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("backup", 2))
    )


_VrrpOperVirtRtrGroupBackup_Type.__name__ = "Integer32"
_VrrpOperVirtRtrGroupBackup_Object = MibScalar
vrrpOperVirtRtrGroupBackup = _VrrpOperVirtRtrGroupBackup_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 3, 4, 1, 2),
    _VrrpOperVirtRtrGroupBackup_Type()
)
vrrpOperVirtRtrGroupBackup.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vrrpOperVirtRtrGroupBackup.setStatus("current")
_BntTraps_ObjectIdentity = ObjectIdentity
bntTraps = _BntTraps_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 7)
)


class _BntSwTrapDisplayString_Type(DisplayString):
    """Custom type bntSwTrapDisplayString based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_BntSwTrapDisplayString_Type.__name__ = "DisplayString"
_BntSwTrapDisplayString_Object = MibScalar
bntSwTrapDisplayString = _BntSwTrapDisplayString_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 7, 1000),
    _BntSwTrapDisplayString_Type()
)
bntSwTrapDisplayString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bntSwTrapDisplayString.setStatus("current")
_Qos_ObjectIdentity = ObjectIdentity
qos = _Qos_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 8)
)
_QosConfigs_ObjectIdentity = ObjectIdentity
qosConfigs = _QosConfigs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 8, 1)
)
_Qos8021p_ObjectIdentity = ObjectIdentity
qos8021p = _Qos8021p_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 8, 1, 1)
)
_QosCurCfgPortPriorityTable_Object = MibTable
qosCurCfgPortPriorityTable = _QosCurCfgPortPriorityTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 8, 1, 1, 1)
)
if mibBuilder.loadTexts:
    qosCurCfgPortPriorityTable.setStatus("current")
_QosCurCfgPortPriorityEntry_Object = MibTableRow
qosCurCfgPortPriorityEntry = _QosCurCfgPortPriorityEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 8, 1, 1, 1, 1)
)
qosCurCfgPortPriorityEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "qosCurCfgPortIndex"),
)
if mibBuilder.loadTexts:
    qosCurCfgPortPriorityEntry.setStatus("current")
_QosCurCfgPortIndex_Type = Integer32
_QosCurCfgPortIndex_Object = MibTableColumn
qosCurCfgPortIndex = _QosCurCfgPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 8, 1, 1, 1, 1, 1),
    _QosCurCfgPortIndex_Type()
)
qosCurCfgPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgPortIndex.setStatus("current")


class _QosCurCfgPortPriority_Type(Integer32):
    """Custom type qosCurCfgPortPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_QosCurCfgPortPriority_Type.__name__ = "Integer32"
_QosCurCfgPortPriority_Object = MibTableColumn
qosCurCfgPortPriority = _QosCurCfgPortPriority_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 8, 1, 1, 1, 1, 2),
    _QosCurCfgPortPriority_Type()
)
qosCurCfgPortPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgPortPriority.setStatus("current")
_QosNewCfgPortPriorityTable_Object = MibTable
qosNewCfgPortPriorityTable = _QosNewCfgPortPriorityTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 8, 1, 1, 2)
)
if mibBuilder.loadTexts:
    qosNewCfgPortPriorityTable.setStatus("current")
_QosNewCfgPortPriorityEntry_Object = MibTableRow
qosNewCfgPortPriorityEntry = _QosNewCfgPortPriorityEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 8, 1, 1, 2, 1)
)
qosNewCfgPortPriorityEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "qosNewCfgPortIndex"),
)
if mibBuilder.loadTexts:
    qosNewCfgPortPriorityEntry.setStatus("current")
_QosNewCfgPortIndex_Type = Integer32
_QosNewCfgPortIndex_Object = MibTableColumn
qosNewCfgPortIndex = _QosNewCfgPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 8, 1, 1, 2, 1, 1),
    _QosNewCfgPortIndex_Type()
)
qosNewCfgPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosNewCfgPortIndex.setStatus("current")


class _QosNewCfgPortPriority_Type(Integer32):
    """Custom type qosNewCfgPortPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_QosNewCfgPortPriority_Type.__name__ = "Integer32"
_QosNewCfgPortPriority_Object = MibTableColumn
qosNewCfgPortPriority = _QosNewCfgPortPriority_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 8, 1, 1, 2, 1, 2),
    _QosNewCfgPortPriority_Type()
)
qosNewCfgPortPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qosNewCfgPortPriority.setStatus("current")
_QosCurCfgPriorityCoSTable_Object = MibTable
qosCurCfgPriorityCoSTable = _QosCurCfgPriorityCoSTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 8, 1, 1, 3)
)
if mibBuilder.loadTexts:
    qosCurCfgPriorityCoSTable.setStatus("current")
_QosCurCfgPriorityCoSEntry_Object = MibTableRow
qosCurCfgPriorityCoSEntry = _QosCurCfgPriorityCoSEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 8, 1, 1, 3, 1)
)
qosCurCfgPriorityCoSEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "qosCurCfgPriorityIndex"),
)
if mibBuilder.loadTexts:
    qosCurCfgPriorityCoSEntry.setStatus("current")


class _QosCurCfgPriorityIndex_Type(Integer32):
    """Custom type qosCurCfgPriorityIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_QosCurCfgPriorityIndex_Type.__name__ = "Integer32"
_QosCurCfgPriorityIndex_Object = MibTableColumn
qosCurCfgPriorityIndex = _QosCurCfgPriorityIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 8, 1, 1, 3, 1, 1),
    _QosCurCfgPriorityIndex_Type()
)
qosCurCfgPriorityIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgPriorityIndex.setStatus("current")


class _QosCurCfgPriorityCoSq_Type(Integer32):
    """Custom type qosCurCfgPriorityCoSq based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_QosCurCfgPriorityCoSq_Type.__name__ = "Integer32"
_QosCurCfgPriorityCoSq_Object = MibTableColumn
qosCurCfgPriorityCoSq = _QosCurCfgPriorityCoSq_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 8, 1, 1, 3, 1, 2),
    _QosCurCfgPriorityCoSq_Type()
)
qosCurCfgPriorityCoSq.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgPriorityCoSq.setStatus("current")
_QosNewCfgPriorityCoSTable_Object = MibTable
qosNewCfgPriorityCoSTable = _QosNewCfgPriorityCoSTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 8, 1, 1, 4)
)
if mibBuilder.loadTexts:
    qosNewCfgPriorityCoSTable.setStatus("current")
_QosNewCfgPriorityCoSEntry_Object = MibTableRow
qosNewCfgPriorityCoSEntry = _QosNewCfgPriorityCoSEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 8, 1, 1, 4, 1)
)
qosNewCfgPriorityCoSEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "qosNewCfgPriorityIndex"),
)
if mibBuilder.loadTexts:
    qosNewCfgPriorityCoSEntry.setStatus("current")


class _QosNewCfgPriorityIndex_Type(Integer32):
    """Custom type qosNewCfgPriorityIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_QosNewCfgPriorityIndex_Type.__name__ = "Integer32"
_QosNewCfgPriorityIndex_Object = MibTableColumn
qosNewCfgPriorityIndex = _QosNewCfgPriorityIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 8, 1, 1, 4, 1, 1),
    _QosNewCfgPriorityIndex_Type()
)
qosNewCfgPriorityIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosNewCfgPriorityIndex.setStatus("current")


class _QosNewCfgPriorityCoSq_Type(Integer32):
    """Custom type qosNewCfgPriorityCoSq based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_QosNewCfgPriorityCoSq_Type.__name__ = "Integer32"
_QosNewCfgPriorityCoSq_Object = MibTableColumn
qosNewCfgPriorityCoSq = _QosNewCfgPriorityCoSq_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 8, 1, 1, 4, 1, 2),
    _QosNewCfgPriorityCoSq_Type()
)
qosNewCfgPriorityCoSq.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qosNewCfgPriorityCoSq.setStatus("current")
_QosCurCfgCosWeightTable_Object = MibTable
qosCurCfgCosWeightTable = _QosCurCfgCosWeightTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 8, 1, 1, 5)
)
if mibBuilder.loadTexts:
    qosCurCfgCosWeightTable.setStatus("current")
_QosCurCfgCosWeightEntry_Object = MibTableRow
qosCurCfgCosWeightEntry = _QosCurCfgCosWeightEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 8, 1, 1, 5, 1)
)
qosCurCfgCosWeightEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "qosCurCfgCosIndex"),
)
if mibBuilder.loadTexts:
    qosCurCfgCosWeightEntry.setStatus("current")


class _QosCurCfgCosIndex_Type(Integer32):
    """Custom type qosCurCfgCosIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_QosCurCfgCosIndex_Type.__name__ = "Integer32"
_QosCurCfgCosIndex_Object = MibTableColumn
qosCurCfgCosIndex = _QosCurCfgCosIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 8, 1, 1, 5, 1, 1),
    _QosCurCfgCosIndex_Type()
)
qosCurCfgCosIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgCosIndex.setStatus("current")


class _QosCurCfgCosWeight_Type(Integer32):
    """Custom type qosCurCfgCosWeight based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_QosCurCfgCosWeight_Type.__name__ = "Integer32"
_QosCurCfgCosWeight_Object = MibTableColumn
qosCurCfgCosWeight = _QosCurCfgCosWeight_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 8, 1, 1, 5, 1, 2),
    _QosCurCfgCosWeight_Type()
)
qosCurCfgCosWeight.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgCosWeight.setStatus("current")
_QosNewCfgCosWeightTable_Object = MibTable
qosNewCfgCosWeightTable = _QosNewCfgCosWeightTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 8, 1, 1, 6)
)
if mibBuilder.loadTexts:
    qosNewCfgCosWeightTable.setStatus("current")
_QosNewCfgCosWeightEntry_Object = MibTableRow
qosNewCfgCosWeightEntry = _QosNewCfgCosWeightEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 8, 1, 1, 6, 1)
)
qosNewCfgCosWeightEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "qosNewCfgCosIndex"),
)
if mibBuilder.loadTexts:
    qosNewCfgCosWeightEntry.setStatus("current")


class _QosNewCfgCosIndex_Type(Integer32):
    """Custom type qosNewCfgCosIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_QosNewCfgCosIndex_Type.__name__ = "Integer32"
_QosNewCfgCosIndex_Object = MibTableColumn
qosNewCfgCosIndex = _QosNewCfgCosIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 8, 1, 1, 6, 1, 1),
    _QosNewCfgCosIndex_Type()
)
qosNewCfgCosIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosNewCfgCosIndex.setStatus("current")


class _QosNewCfgCosWeight_Type(Integer32):
    """Custom type qosNewCfgCosWeight based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_QosNewCfgCosWeight_Type.__name__ = "Integer32"
_QosNewCfgCosWeight_Object = MibTableColumn
qosNewCfgCosWeight = _QosNewCfgCosWeight_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 8, 1, 1, 6, 1, 2),
    _QosNewCfgCosWeight_Type()
)
qosNewCfgCosWeight.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qosNewCfgCosWeight.setStatus("current")


class _QosCurCfgCosNum_Type(Integer32):
    """Custom type qosCurCfgCosNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              8)
        )
    )
    namedValues = NamedValues(
        *(("num2", 2),
          ("num8", 8))
    )


_QosCurCfgCosNum_Type.__name__ = "Integer32"
_QosCurCfgCosNum_Object = MibScalar
qosCurCfgCosNum = _QosCurCfgCosNum_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 8, 1, 1, 7),
    _QosCurCfgCosNum_Type()
)
qosCurCfgCosNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qosCurCfgCosNum.setStatus("current")


class _QosNewCfgCosNum_Type(Integer32):
    """Custom type qosNewCfgCosNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              8)
        )
    )
    namedValues = NamedValues(
        *(("num2", 2),
          ("num8", 8))
    )


_QosNewCfgCosNum_Type.__name__ = "Integer32"
_QosNewCfgCosNum_Object = MibScalar
qosNewCfgCosNum = _QosNewCfgCosNum_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 8, 1, 1, 8),
    _QosNewCfgCosNum_Type()
)
qosNewCfgCosNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qosNewCfgCosNum.setStatus("current")


class _QosDefaultCfg_Type(Integer32):
    """Custom type qosDefaultCfg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("defaultCosNum", 1),
          ("defaultWeight", 2),
          ("defaultPriority", 3))
    )


_QosDefaultCfg_Type.__name__ = "Integer32"
_QosDefaultCfg_Object = MibScalar
qosDefaultCfg = _QosDefaultCfg_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 8, 1, 1, 9),
    _QosDefaultCfg_Type()
)
qosDefaultCfg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qosDefaultCfg.setStatus("current")
_QosStats_ObjectIdentity = ObjectIdentity
qosStats = _QosStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 8, 2)
)
_QosInfo_ObjectIdentity = ObjectIdentity
qosInfo = _QosInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 8, 3)
)
_QosOper_ObjectIdentity = ObjectIdentity
qosOper = _QosOper_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 8, 4)
)
_Acl_ObjectIdentity = ObjectIdentity
acl = _Acl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9)
)
_AcConfig_ObjectIdentity = ObjectIdentity
acConfig = _AcConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1)
)
_AcList_ObjectIdentity = ObjectIdentity
acList = _AcList_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1)
)
_AclCurCfgTable_Object = MibTable
aclCurCfgTable = _AclCurCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1)
)
if mibBuilder.loadTexts:
    aclCurCfgTable.setStatus("current")
_AclCurCfgEntry_Object = MibTableRow
aclCurCfgEntry = _AclCurCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1)
)
aclCurCfgEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "aclCurCfgIndex"),
)
if mibBuilder.loadTexts:
    aclCurCfgEntry.setStatus("current")
_AclCurCfgIndex_Type = Unsigned32
_AclCurCfgIndex_Object = MibTableColumn
aclCurCfgIndex = _AclCurCfgIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 1),
    _AclCurCfgIndex_Type()
)
aclCurCfgIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    aclCurCfgIndex.setStatus("current")
_AclCurCfgGroup_Type = Unsigned32
_AclCurCfgGroup_Object = MibTableColumn
aclCurCfgGroup = _AclCurCfgGroup_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 3),
    _AclCurCfgGroup_Type()
)
aclCurCfgGroup.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgGroup.setStatus("current")


class _AclCurCfgFilterAction_Type(Integer32):
    """Custom type aclCurCfgFilterAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("permit", 1),
          ("deny", 2),
          ("setprio", 3))
    )


_AclCurCfgFilterAction_Type.__name__ = "Integer32"
_AclCurCfgFilterAction_Object = MibTableColumn
aclCurCfgFilterAction = _AclCurCfgFilterAction_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 4),
    _AclCurCfgFilterAction_Type()
)
aclCurCfgFilterAction.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgFilterAction.setStatus("current")


class _AclCurCfgFilterActionSetPrio_Type(Integer32):
    """Custom type aclCurCfgFilterActionSetPrio based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("prio0", 1),
          ("prio1", 2),
          ("prio2", 3),
          ("prio3", 4),
          ("prio4", 5),
          ("prio5", 6),
          ("prio6", 7),
          ("prio7", 8))
    )


_AclCurCfgFilterActionSetPrio_Type.__name__ = "Integer32"
_AclCurCfgFilterActionSetPrio_Object = MibTableColumn
aclCurCfgFilterActionSetPrio = _AclCurCfgFilterActionSetPrio_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 5),
    _AclCurCfgFilterActionSetPrio_Type()
)
aclCurCfgFilterActionSetPrio.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgFilterActionSetPrio.setStatus("current")


class _AclCurCfgEthFmt_Type(Integer32):
    """Custom type aclCurCfgEthFmt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("ethernet2", 1),
          ("snap", 2),
          ("llc", 3),
          ("ieee802dot3", 4))
    )


_AclCurCfgEthFmt_Type.__name__ = "Integer32"
_AclCurCfgEthFmt_Object = MibTableColumn
aclCurCfgEthFmt = _AclCurCfgEthFmt_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 6),
    _AclCurCfgEthFmt_Type()
)
aclCurCfgEthFmt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgEthFmt.setStatus("current")


class _AclCurCfgTagFmt_Type(Integer32):
    """Custom type aclCurCfgTagFmt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("any", 2),
          ("untagged", 3),
          ("tagged", 4))
    )


_AclCurCfgTagFmt_Type.__name__ = "Integer32"
_AclCurCfgTagFmt_Object = MibTableColumn
aclCurCfgTagFmt = _AclCurCfgTagFmt_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 7),
    _AclCurCfgTagFmt_Type()
)
aclCurCfgTagFmt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgTagFmt.setStatus("current")


class _AclCurCfgIPFmt_Type(Integer32):
    """Custom type aclCurCfgIPFmt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("ipv4", 2),
          ("ipv6", 3))
    )


_AclCurCfgIPFmt_Type.__name__ = "Integer32"
_AclCurCfgIPFmt_Object = MibTableColumn
aclCurCfgIPFmt = _AclCurCfgIPFmt_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 8),
    _AclCurCfgIPFmt_Type()
)
aclCurCfgIPFmt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgIPFmt.setStatus("current")
_AclCurCfgSrcMACAddress_Type = MacAddress
_AclCurCfgSrcMACAddress_Object = MibTableColumn
aclCurCfgSrcMACAddress = _AclCurCfgSrcMACAddress_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 9),
    _AclCurCfgSrcMACAddress_Type()
)
aclCurCfgSrcMACAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgSrcMACAddress.setStatus("current")
_AclCurCfgSrcMACMask_Type = MacAddress
_AclCurCfgSrcMACMask_Object = MibTableColumn
aclCurCfgSrcMACMask = _AclCurCfgSrcMACMask_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 10),
    _AclCurCfgSrcMACMask_Type()
)
aclCurCfgSrcMACMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgSrcMACMask.setStatus("current")
_AclCurCfgDstMACAddress_Type = MacAddress
_AclCurCfgDstMACAddress_Object = MibTableColumn
aclCurCfgDstMACAddress = _AclCurCfgDstMACAddress_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 11),
    _AclCurCfgDstMACAddress_Type()
)
aclCurCfgDstMACAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgDstMACAddress.setStatus("current")
_AclCurCfgDstMACMask_Type = MacAddress
_AclCurCfgDstMACMask_Object = MibTableColumn
aclCurCfgDstMACMask = _AclCurCfgDstMACMask_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 12),
    _AclCurCfgDstMACMask_Type()
)
aclCurCfgDstMACMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgDstMACMask.setStatus("current")


class _AclCurCfgEthernetTypeName_Type(Integer32):
    """Custom type aclCurCfgEthernetTypeName based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("arp", 1),
          ("ipv4", 2),
          ("ipv6", 3),
          ("mpls", 4),
          ("rarp", 5),
          ("any", 6),
          ("other", 7))
    )


_AclCurCfgEthernetTypeName_Type.__name__ = "Integer32"
_AclCurCfgEthernetTypeName_Object = MibTableColumn
aclCurCfgEthernetTypeName = _AclCurCfgEthernetTypeName_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 13),
    _AclCurCfgEthernetTypeName_Type()
)
aclCurCfgEthernetTypeName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgEthernetTypeName.setStatus("current")


class _AclCurCfgEthernetTypeValue_Type(Integer32):
    """Custom type aclCurCfgEthernetTypeValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1536, 65535),
    )


_AclCurCfgEthernetTypeValue_Type.__name__ = "Integer32"
_AclCurCfgEthernetTypeValue_Object = MibTableColumn
aclCurCfgEthernetTypeValue = _AclCurCfgEthernetTypeValue_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 14),
    _AclCurCfgEthernetTypeValue_Type()
)
aclCurCfgEthernetTypeValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgEthernetTypeValue.setStatus("current")


class _AclCurCfgVLanId_Type(Integer32):
    """Custom type aclCurCfgVLanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_AclCurCfgVLanId_Type.__name__ = "Integer32"
_AclCurCfgVLanId_Object = MibTableColumn
aclCurCfgVLanId = _AclCurCfgVLanId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 15),
    _AclCurCfgVLanId_Type()
)
aclCurCfgVLanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgVLanId.setStatus("current")
_AclCurCfgVLanMask_Type = DisplayString
_AclCurCfgVLanMask_Object = MibTableColumn
aclCurCfgVLanMask = _AclCurCfgVLanMask_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 16),
    _AclCurCfgVLanMask_Type()
)
aclCurCfgVLanMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgVLanMask.setStatus("current")


class _AclCurCfg8021pPriority_Type(Integer32):
    """Custom type aclCurCfg8021pPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("priority0", 1),
          ("priority1", 2),
          ("priority2", 3),
          ("priority3", 4),
          ("priority4", 5),
          ("priority5", 6),
          ("priority6", 7),
          ("priority7", 8))
    )


_AclCurCfg8021pPriority_Type.__name__ = "Integer32"
_AclCurCfg8021pPriority_Object = MibTableColumn
aclCurCfg8021pPriority = _AclCurCfg8021pPriority_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 17),
    _AclCurCfg8021pPriority_Type()
)
aclCurCfg8021pPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfg8021pPriority.setStatus("current")
_AclCurCfgTypeOfService_Type = DisplayString
_AclCurCfgTypeOfService_Object = MibTableColumn
aclCurCfgTypeOfService = _AclCurCfgTypeOfService_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 18),
    _AclCurCfgTypeOfService_Type()
)
aclCurCfgTypeOfService.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgTypeOfService.setStatus("current")
_AclCurCfgProtocol_Type = DisplayString
_AclCurCfgProtocol_Object = MibTableColumn
aclCurCfgProtocol = _AclCurCfgProtocol_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 19),
    _AclCurCfgProtocol_Type()
)
aclCurCfgProtocol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgProtocol.setStatus("current")
_AclCurCfgSrcIPAddress_Type = IpAddress
_AclCurCfgSrcIPAddress_Object = MibTableColumn
aclCurCfgSrcIPAddress = _AclCurCfgSrcIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 20),
    _AclCurCfgSrcIPAddress_Type()
)
aclCurCfgSrcIPAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgSrcIPAddress.setStatus("current")
_AclCurCfgSrcIPMask_Type = IpAddress
_AclCurCfgSrcIPMask_Object = MibTableColumn
aclCurCfgSrcIPMask = _AclCurCfgSrcIPMask_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 21),
    _AclCurCfgSrcIPMask_Type()
)
aclCurCfgSrcIPMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgSrcIPMask.setStatus("current")
_AclCurCfgDstIPAddress_Type = IpAddress
_AclCurCfgDstIPAddress_Object = MibTableColumn
aclCurCfgDstIPAddress = _AclCurCfgDstIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 22),
    _AclCurCfgDstIPAddress_Type()
)
aclCurCfgDstIPAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgDstIPAddress.setStatus("current")
_AclCurCfgDstIPMask_Type = IpAddress
_AclCurCfgDstIPMask_Object = MibTableColumn
aclCurCfgDstIPMask = _AclCurCfgDstIPMask_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 23),
    _AclCurCfgDstIPMask_Type()
)
aclCurCfgDstIPMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgDstIPMask.setStatus("current")


class _AclCurCfgSrcPort_Type(Integer32):
    """Custom type aclCurCfgSrcPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_AclCurCfgSrcPort_Type.__name__ = "Integer32"
_AclCurCfgSrcPort_Object = MibTableColumn
aclCurCfgSrcPort = _AclCurCfgSrcPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 24),
    _AclCurCfgSrcPort_Type()
)
aclCurCfgSrcPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgSrcPort.setStatus("current")
_AclCurCfgSrcPortMask_Type = DisplayString
_AclCurCfgSrcPortMask_Object = MibTableColumn
aclCurCfgSrcPortMask = _AclCurCfgSrcPortMask_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 25),
    _AclCurCfgSrcPortMask_Type()
)
aclCurCfgSrcPortMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgSrcPortMask.setStatus("current")


class _AclCurCfgDstPort_Type(Integer32):
    """Custom type aclCurCfgDstPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_AclCurCfgDstPort_Type.__name__ = "Integer32"
_AclCurCfgDstPort_Object = MibTableColumn
aclCurCfgDstPort = _AclCurCfgDstPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 26),
    _AclCurCfgDstPort_Type()
)
aclCurCfgDstPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgDstPort.setStatus("current")
_AclCurCfgDstPortMask_Type = DisplayString
_AclCurCfgDstPortMask_Object = MibTableColumn
aclCurCfgDstPortMask = _AclCurCfgDstPortMask_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 27),
    _AclCurCfgDstPortMask_Type()
)
aclCurCfgDstPortMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgDstPortMask.setStatus("current")


class _AclCurCfgTCPFlags_Type(Bits):
    """Custom type aclCurCfgTCPFlags based on Bits"""
    namedValues = NamedValues(
        *(("reserved1", 0),
          ("reserved2", 1),
          ("tcpURG", 2),
          ("tcpACK", 3),
          ("tcpPSH", 4),
          ("tcpRST", 5),
          ("tcpSYN", 6),
          ("tcpFIN", 7))
    )

_AclCurCfgTCPFlags_Type.__name__ = "Bits"
_AclCurCfgTCPFlags_Object = MibTableColumn
aclCurCfgTCPFlags = _AclCurCfgTCPFlags_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 28),
    _AclCurCfgTCPFlags_Type()
)
aclCurCfgTCPFlags.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgTCPFlags.setStatus("current")
_AclCurCfgEgressPorts_Type = OctetString
_AclCurCfgEgressPorts_Object = MibTableColumn
aclCurCfgEgressPorts = _AclCurCfgEgressPorts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 29),
    _AclCurCfgEgressPorts_Type()
)
aclCurCfgEgressPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgEgressPorts.setStatus("current")


class _AclCurCfgStatistics_Type(Integer32):
    """Custom type aclCurCfgStatistics based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_AclCurCfgStatistics_Type.__name__ = "Integer32"
_AclCurCfgStatistics_Object = MibTableColumn
aclCurCfgStatistics = _AclCurCfgStatistics_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 30),
    _AclCurCfgStatistics_Type()
)
aclCurCfgStatistics.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgStatistics.setStatus("current")


class _AclCurCfgTCPFlagsMask_Type(Bits):
    """Custom type aclCurCfgTCPFlagsMask based on Bits"""
    namedValues = NamedValues(
        *(("reserved1", 0),
          ("reserved2", 1),
          ("tcpURG", 2),
          ("tcpACK", 3),
          ("tcpPSH", 4),
          ("tcpRST", 5),
          ("tcpSYN", 6),
          ("tcpFIN", 7))
    )

_AclCurCfgTCPFlagsMask_Type.__name__ = "Bits"
_AclCurCfgTCPFlagsMask_Object = MibTableColumn
aclCurCfgTCPFlagsMask = _AclCurCfgTCPFlagsMask_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 39),
    _AclCurCfgTCPFlagsMask_Type()
)
aclCurCfgTCPFlagsMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgTCPFlagsMask.setStatus("current")


class _AclCurCfgMeterAction_Type(Integer32):
    """Custom type aclCurCfgMeterAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unconfigured", 0),
          ("outdrop", 1),
          ("outpass", 2))
    )


_AclCurCfgMeterAction_Type.__name__ = "Integer32"
_AclCurCfgMeterAction_Object = MibTableColumn
aclCurCfgMeterAction = _AclCurCfgMeterAction_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 41),
    _AclCurCfgMeterAction_Type()
)
aclCurCfgMeterAction.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgMeterAction.setStatus("current")


class _AclCurCfgMeterEnable_Type(Integer32):
    """Custom type aclCurCfgMeterEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 0),
          ("disabled", 1))
    )


_AclCurCfgMeterEnable_Type.__name__ = "Integer32"
_AclCurCfgMeterEnable_Object = MibTableColumn
aclCurCfgMeterEnable = _AclCurCfgMeterEnable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 42),
    _AclCurCfgMeterEnable_Type()
)
aclCurCfgMeterEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgMeterEnable.setStatus("current")


class _AclCurCfgKbitsSec_Type(Unsigned32):
    """Custom type aclCurCfgKbitsSec based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(64, 10000000),
    )


_AclCurCfgKbitsSec_Type.__name__ = "Unsigned32"
_AclCurCfgKbitsSec_Object = MibTableColumn
aclCurCfgKbitsSec = _AclCurCfgKbitsSec_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 43),
    _AclCurCfgKbitsSec_Type()
)
aclCurCfgKbitsSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgKbitsSec.setStatus("current")


class _AclCurCfgKbitsBurst_Type(Integer32):
    """Custom type aclCurCfgKbitsBurst based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(32,
              64,
              128,
              256,
              512,
              1024,
              2048,
              4096)
        )
    )
    namedValues = NamedValues(
        *(("kbits32", 32),
          ("kbits64", 64),
          ("kbits128", 128),
          ("kbits256", 256),
          ("kbits512", 512),
          ("kbits1024", 1024),
          ("kbits2048", 2048),
          ("kbits4096", 4096))
    )


_AclCurCfgKbitsBurst_Type.__name__ = "Integer32"
_AclCurCfgKbitsBurst_Object = MibTableColumn
aclCurCfgKbitsBurst = _AclCurCfgKbitsBurst_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 44),
    _AclCurCfgKbitsBurst_Type()
)
aclCurCfgKbitsBurst.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgKbitsBurst.setStatus("current")


class _AclCurCfgInprofUser_Type(Integer32):
    """Custom type aclCurCfgInprofUser based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_AclCurCfgInprofUser_Type.__name__ = "Integer32"
_AclCurCfgInprofUser_Object = MibTableColumn
aclCurCfgInprofUser = _AclCurCfgInprofUser_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 45),
    _AclCurCfgInprofUser_Type()
)
aclCurCfgInprofUser.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgInprofUser.setStatus("current")


class _AclCurCfgInprofDscp_Type(Integer32):
    """Custom type aclCurCfgInprofDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_AclCurCfgInprofDscp_Type.__name__ = "Integer32"
_AclCurCfgInprofDscp_Object = MibTableColumn
aclCurCfgInprofDscp = _AclCurCfgInprofDscp_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 46),
    _AclCurCfgInprofDscp_Type()
)
aclCurCfgInprofDscp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgInprofDscp.setStatus("current")


class _AclCurCfgInprofTos_Type(Integer32):
    """Custom type aclCurCfgInprofTos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_AclCurCfgInprofTos_Type.__name__ = "Integer32"
_AclCurCfgInprofTos_Object = MibTableColumn
aclCurCfgInprofTos = _AclCurCfgInprofTos_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 47),
    _AclCurCfgInprofTos_Type()
)
aclCurCfgInprofTos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgInprofTos.setStatus("current")


class _AclCurCfgOutprofDscp_Type(Integer32):
    """Custom type aclCurCfgOutprofDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_AclCurCfgOutprofDscp_Type.__name__ = "Integer32"
_AclCurCfgOutprofDscp_Object = MibTableColumn
aclCurCfgOutprofDscp = _AclCurCfgOutprofDscp_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 48),
    _AclCurCfgOutprofDscp_Type()
)
aclCurCfgOutprofDscp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgOutprofDscp.setStatus("current")


class _AclCurCfgInprofUserEnable_Type(Integer32):
    """Custom type aclCurCfgInprofUserEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("userdefined", 1))
    )


_AclCurCfgInprofUserEnable_Type.__name__ = "Integer32"
_AclCurCfgInprofUserEnable_Object = MibTableColumn
aclCurCfgInprofUserEnable = _AclCurCfgInprofUserEnable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 49),
    _AclCurCfgInprofUserEnable_Type()
)
aclCurCfgInprofUserEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgInprofUserEnable.setStatus("current")


class _AclCurCfgInprofDscpEnable_Type(Integer32):
    """Custom type aclCurCfgInprofDscpEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_AclCurCfgInprofDscpEnable_Type.__name__ = "Integer32"
_AclCurCfgInprofDscpEnable_Object = MibTableColumn
aclCurCfgInprofDscpEnable = _AclCurCfgInprofDscpEnable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 50),
    _AclCurCfgInprofDscpEnable_Type()
)
aclCurCfgInprofDscpEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgInprofDscpEnable.setStatus("current")


class _AclCurCfgOutprofDscpEnable_Type(Integer32):
    """Custom type aclCurCfgOutprofDscpEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_AclCurCfgOutprofDscpEnable_Type.__name__ = "Integer32"
_AclCurCfgOutprofDscpEnable_Object = MibTableColumn
aclCurCfgOutprofDscpEnable = _AclCurCfgOutprofDscpEnable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 1, 1, 51),
    _AclCurCfgOutprofDscpEnable_Type()
)
aclCurCfgOutprofDscpEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgOutprofDscpEnable.setStatus("current")
_AclNewCfgTable_Object = MibTable
aclNewCfgTable = _AclNewCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2)
)
if mibBuilder.loadTexts:
    aclNewCfgTable.setStatus("current")
_AclNewCfgEntry_Object = MibTableRow
aclNewCfgEntry = _AclNewCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1)
)
aclNewCfgEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "aclNewCfgIndex"),
)
if mibBuilder.loadTexts:
    aclNewCfgEntry.setStatus("current")
_AclNewCfgIndex_Type = Unsigned32
_AclNewCfgIndex_Object = MibTableColumn
aclNewCfgIndex = _AclNewCfgIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 1),
    _AclNewCfgIndex_Type()
)
aclNewCfgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclNewCfgIndex.setStatus("current")
_AclNewCfgGroup_Type = Unsigned32
_AclNewCfgGroup_Object = MibTableColumn
aclNewCfgGroup = _AclNewCfgGroup_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 3),
    _AclNewCfgGroup_Type()
)
aclNewCfgGroup.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclNewCfgGroup.setStatus("current")


class _AclNewCfgFilterAction_Type(Integer32):
    """Custom type aclNewCfgFilterAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("permit", 1),
          ("deny", 2),
          ("setprio", 3))
    )


_AclNewCfgFilterAction_Type.__name__ = "Integer32"
_AclNewCfgFilterAction_Object = MibTableColumn
aclNewCfgFilterAction = _AclNewCfgFilterAction_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 4),
    _AclNewCfgFilterAction_Type()
)
aclNewCfgFilterAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgFilterAction.setStatus("current")


class _AclNewCfgFilterActionSetPrio_Type(Integer32):
    """Custom type aclNewCfgFilterActionSetPrio based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("prio0", 1),
          ("prio1", 2),
          ("prio2", 3),
          ("prio3", 4),
          ("prio4", 5),
          ("prio5", 6),
          ("prio6", 7),
          ("prio7", 8))
    )


_AclNewCfgFilterActionSetPrio_Type.__name__ = "Integer32"
_AclNewCfgFilterActionSetPrio_Object = MibTableColumn
aclNewCfgFilterActionSetPrio = _AclNewCfgFilterActionSetPrio_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 5),
    _AclNewCfgFilterActionSetPrio_Type()
)
aclNewCfgFilterActionSetPrio.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgFilterActionSetPrio.setStatus("current")


class _AclNewCfgEthFmt_Type(Integer32):
    """Custom type aclNewCfgEthFmt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("ethernet2", 1),
          ("snap", 2),
          ("llc", 3))
    )


_AclNewCfgEthFmt_Type.__name__ = "Integer32"
_AclNewCfgEthFmt_Object = MibTableColumn
aclNewCfgEthFmt = _AclNewCfgEthFmt_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 6),
    _AclNewCfgEthFmt_Type()
)
aclNewCfgEthFmt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgEthFmt.setStatus("current")


class _AclNewCfgTagFmt_Type(Integer32):
    """Custom type aclNewCfgTagFmt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("any", 2),
          ("none", 3),
          ("tagged", 4))
    )


_AclNewCfgTagFmt_Type.__name__ = "Integer32"
_AclNewCfgTagFmt_Object = MibTableColumn
aclNewCfgTagFmt = _AclNewCfgTagFmt_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 7),
    _AclNewCfgTagFmt_Type()
)
aclNewCfgTagFmt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgTagFmt.setStatus("current")


class _AclNewCfgIPFmt_Type(Integer32):
    """Custom type aclNewCfgIPFmt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("ipv4", 2),
          ("ipv6", 3))
    )


_AclNewCfgIPFmt_Type.__name__ = "Integer32"
_AclNewCfgIPFmt_Object = MibTableColumn
aclNewCfgIPFmt = _AclNewCfgIPFmt_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 8),
    _AclNewCfgIPFmt_Type()
)
aclNewCfgIPFmt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgIPFmt.setStatus("current")
_AclNewCfgSrcMACAddress_Type = MacAddress
_AclNewCfgSrcMACAddress_Object = MibTableColumn
aclNewCfgSrcMACAddress = _AclNewCfgSrcMACAddress_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 9),
    _AclNewCfgSrcMACAddress_Type()
)
aclNewCfgSrcMACAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgSrcMACAddress.setStatus("current")
_AclNewCfgSrcMACMask_Type = MacAddress
_AclNewCfgSrcMACMask_Object = MibTableColumn
aclNewCfgSrcMACMask = _AclNewCfgSrcMACMask_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 10),
    _AclNewCfgSrcMACMask_Type()
)
aclNewCfgSrcMACMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgSrcMACMask.setStatus("current")
_AclNewCfgDstMACAddress_Type = MacAddress
_AclNewCfgDstMACAddress_Object = MibTableColumn
aclNewCfgDstMACAddress = _AclNewCfgDstMACAddress_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 11),
    _AclNewCfgDstMACAddress_Type()
)
aclNewCfgDstMACAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgDstMACAddress.setStatus("current")
_AclNewCfgDstMACMask_Type = MacAddress
_AclNewCfgDstMACMask_Object = MibTableColumn
aclNewCfgDstMACMask = _AclNewCfgDstMACMask_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 12),
    _AclNewCfgDstMACMask_Type()
)
aclNewCfgDstMACMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgDstMACMask.setStatus("current")


class _AclNewCfgEthernetTypeName_Type(Integer32):
    """Custom type aclNewCfgEthernetTypeName based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("arp", 1),
          ("ipv4", 2),
          ("ipv6", 3),
          ("mpls", 4),
          ("rarp", 5),
          ("any", 6),
          ("other", 7))
    )


_AclNewCfgEthernetTypeName_Type.__name__ = "Integer32"
_AclNewCfgEthernetTypeName_Object = MibTableColumn
aclNewCfgEthernetTypeName = _AclNewCfgEthernetTypeName_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 13),
    _AclNewCfgEthernetTypeName_Type()
)
aclNewCfgEthernetTypeName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgEthernetTypeName.setStatus("current")


class _AclNewCfgEthernetTypeValue_Type(Integer32):
    """Custom type aclNewCfgEthernetTypeValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1536, 65535),
    )


_AclNewCfgEthernetTypeValue_Type.__name__ = "Integer32"
_AclNewCfgEthernetTypeValue_Object = MibTableColumn
aclNewCfgEthernetTypeValue = _AclNewCfgEthernetTypeValue_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 14),
    _AclNewCfgEthernetTypeValue_Type()
)
aclNewCfgEthernetTypeValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgEthernetTypeValue.setStatus("current")


class _AclNewCfgVLanId_Type(Integer32):
    """Custom type aclNewCfgVLanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4095),
    )


_AclNewCfgVLanId_Type.__name__ = "Integer32"
_AclNewCfgVLanId_Object = MibTableColumn
aclNewCfgVLanId = _AclNewCfgVLanId_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 15),
    _AclNewCfgVLanId_Type()
)
aclNewCfgVLanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgVLanId.setStatus("current")
_AclNewCfgVLanMask_Type = DisplayString
_AclNewCfgVLanMask_Object = MibTableColumn
aclNewCfgVLanMask = _AclNewCfgVLanMask_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 16),
    _AclNewCfgVLanMask_Type()
)
aclNewCfgVLanMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgVLanMask.setStatus("current")


class _AclNewCfg8021pPriority_Type(Integer32):
    """Custom type aclNewCfg8021pPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("none", 0),
          ("priority0", 1),
          ("priority1", 2),
          ("priority2", 3),
          ("priority3", 4),
          ("priority4", 5),
          ("priority5", 6),
          ("priority6", 7),
          ("priority7", 8))
    )


_AclNewCfg8021pPriority_Type.__name__ = "Integer32"
_AclNewCfg8021pPriority_Object = MibTableColumn
aclNewCfg8021pPriority = _AclNewCfg8021pPriority_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 17),
    _AclNewCfg8021pPriority_Type()
)
aclNewCfg8021pPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfg8021pPriority.setStatus("current")
_AclNewCfgTypeOfService_Type = DisplayString
_AclNewCfgTypeOfService_Object = MibTableColumn
aclNewCfgTypeOfService = _AclNewCfgTypeOfService_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 18),
    _AclNewCfgTypeOfService_Type()
)
aclNewCfgTypeOfService.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgTypeOfService.setStatus("current")
_AclNewCfgProtocol_Type = DisplayString
_AclNewCfgProtocol_Object = MibTableColumn
aclNewCfgProtocol = _AclNewCfgProtocol_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 19),
    _AclNewCfgProtocol_Type()
)
aclNewCfgProtocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgProtocol.setStatus("current")
_AclNewCfgSrcIPAddress_Type = IpAddress
_AclNewCfgSrcIPAddress_Object = MibTableColumn
aclNewCfgSrcIPAddress = _AclNewCfgSrcIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 20),
    _AclNewCfgSrcIPAddress_Type()
)
aclNewCfgSrcIPAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgSrcIPAddress.setStatus("current")
_AclNewCfgSrcIPMask_Type = IpAddress
_AclNewCfgSrcIPMask_Object = MibTableColumn
aclNewCfgSrcIPMask = _AclNewCfgSrcIPMask_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 21),
    _AclNewCfgSrcIPMask_Type()
)
aclNewCfgSrcIPMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgSrcIPMask.setStatus("current")
_AclNewCfgDstIPAddress_Type = IpAddress
_AclNewCfgDstIPAddress_Object = MibTableColumn
aclNewCfgDstIPAddress = _AclNewCfgDstIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 22),
    _AclNewCfgDstIPAddress_Type()
)
aclNewCfgDstIPAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgDstIPAddress.setStatus("current")
_AclNewCfgDstIPMask_Type = IpAddress
_AclNewCfgDstIPMask_Object = MibTableColumn
aclNewCfgDstIPMask = _AclNewCfgDstIPMask_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 23),
    _AclNewCfgDstIPMask_Type()
)
aclNewCfgDstIPMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgDstIPMask.setStatus("current")


class _AclNewCfgSrcPort_Type(Integer32):
    """Custom type aclNewCfgSrcPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_AclNewCfgSrcPort_Type.__name__ = "Integer32"
_AclNewCfgSrcPort_Object = MibTableColumn
aclNewCfgSrcPort = _AclNewCfgSrcPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 24),
    _AclNewCfgSrcPort_Type()
)
aclNewCfgSrcPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgSrcPort.setStatus("current")
_AclNewCfgSrcPortMask_Type = DisplayString
_AclNewCfgSrcPortMask_Object = MibTableColumn
aclNewCfgSrcPortMask = _AclNewCfgSrcPortMask_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 25),
    _AclNewCfgSrcPortMask_Type()
)
aclNewCfgSrcPortMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgSrcPortMask.setStatus("current")


class _AclNewCfgDstPort_Type(Integer32):
    """Custom type aclNewCfgDstPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_AclNewCfgDstPort_Type.__name__ = "Integer32"
_AclNewCfgDstPort_Object = MibTableColumn
aclNewCfgDstPort = _AclNewCfgDstPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 26),
    _AclNewCfgDstPort_Type()
)
aclNewCfgDstPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgDstPort.setStatus("current")
_AclNewCfgDstPortMask_Type = DisplayString
_AclNewCfgDstPortMask_Object = MibTableColumn
aclNewCfgDstPortMask = _AclNewCfgDstPortMask_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 27),
    _AclNewCfgDstPortMask_Type()
)
aclNewCfgDstPortMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgDstPortMask.setStatus("current")


class _AclNewCfgTCPFlags_Type(Bits):
    """Custom type aclNewCfgTCPFlags based on Bits"""
    namedValues = NamedValues(
        *(("reserved1", 0),
          ("reserved2", 1),
          ("tcpURG", 2),
          ("tcpACK", 3),
          ("tcpPSH", 4),
          ("tcpRST", 5),
          ("tcpSYN", 6),
          ("tcpFIN", 7))
    )

_AclNewCfgTCPFlags_Type.__name__ = "Bits"
_AclNewCfgTCPFlags_Object = MibTableColumn
aclNewCfgTCPFlags = _AclNewCfgTCPFlags_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 28),
    _AclNewCfgTCPFlags_Type()
)
aclNewCfgTCPFlags.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgTCPFlags.setStatus("current")
_AclNewCfgEgressPorts_Type = OctetString
_AclNewCfgEgressPorts_Object = MibTableColumn
aclNewCfgEgressPorts = _AclNewCfgEgressPorts_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 29),
    _AclNewCfgEgressPorts_Type()
)
aclNewCfgEgressPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclNewCfgEgressPorts.setStatus("current")


class _AclNewCfgStatistics_Type(Integer32):
    """Custom type aclNewCfgStatistics based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_AclNewCfgStatistics_Type.__name__ = "Integer32"
_AclNewCfgStatistics_Object = MibTableColumn
aclNewCfgStatistics = _AclNewCfgStatistics_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 30),
    _AclNewCfgStatistics_Type()
)
aclNewCfgStatistics.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgStatistics.setStatus("current")
_AclNewCfgAddEgressPort_Type = Integer32
_AclNewCfgAddEgressPort_Object = MibTableColumn
aclNewCfgAddEgressPort = _AclNewCfgAddEgressPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 31),
    _AclNewCfgAddEgressPort_Type()
)
aclNewCfgAddEgressPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgAddEgressPort.setStatus("current")
_AclNewCfgRemoveEgressPort_Type = Unsigned32
_AclNewCfgRemoveEgressPort_Object = MibTableColumn
aclNewCfgRemoveEgressPort = _AclNewCfgRemoveEgressPort_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 32),
    _AclNewCfgRemoveEgressPort_Type()
)
aclNewCfgRemoveEgressPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgRemoveEgressPort.setStatus("current")


class _AclNewCfgDelete_Type(Integer32):
    """Custom type aclNewCfgDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_AclNewCfgDelete_Type.__name__ = "Integer32"
_AclNewCfgDelete_Object = MibTableColumn
aclNewCfgDelete = _AclNewCfgDelete_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 33),
    _AclNewCfgDelete_Type()
)
aclNewCfgDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgDelete.setStatus("current")


class _AclNewCfgTCPFlagsMask_Type(Bits):
    """Custom type aclNewCfgTCPFlagsMask based on Bits"""
    namedValues = NamedValues(
        *(("reserved1", 0),
          ("reserved2", 1),
          ("tcpURG", 2),
          ("tcpACK", 3),
          ("tcpPSH", 4),
          ("tcpRST", 5),
          ("tcpSYN", 6),
          ("tcpFIN", 7))
    )

_AclNewCfgTCPFlagsMask_Type.__name__ = "Bits"
_AclNewCfgTCPFlagsMask_Object = MibTableColumn
aclNewCfgTCPFlagsMask = _AclNewCfgTCPFlagsMask_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 39),
    _AclNewCfgTCPFlagsMask_Type()
)
aclNewCfgTCPFlagsMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgTCPFlagsMask.setStatus("current")


class _AclNewCfgMeterAction_Type(Integer32):
    """Custom type aclNewCfgMeterAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("unconfigured", 0),
          ("outdrop", 1),
          ("outpass", 2))
    )


_AclNewCfgMeterAction_Type.__name__ = "Integer32"
_AclNewCfgMeterAction_Object = MibTableColumn
aclNewCfgMeterAction = _AclNewCfgMeterAction_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 41),
    _AclNewCfgMeterAction_Type()
)
aclNewCfgMeterAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgMeterAction.setStatus("current")


class _AclNewCfgMeterEnable_Type(Integer32):
    """Custom type aclNewCfgMeterEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 0),
          ("disabled", 1))
    )


_AclNewCfgMeterEnable_Type.__name__ = "Integer32"
_AclNewCfgMeterEnable_Object = MibTableColumn
aclNewCfgMeterEnable = _AclNewCfgMeterEnable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 42),
    _AclNewCfgMeterEnable_Type()
)
aclNewCfgMeterEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgMeterEnable.setStatus("current")


class _AclNewCfgKbitsSec_Type(Unsigned32):
    """Custom type aclNewCfgKbitsSec based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1000, 10000000),
    )


_AclNewCfgKbitsSec_Type.__name__ = "Unsigned32"
_AclNewCfgKbitsSec_Object = MibTableColumn
aclNewCfgKbitsSec = _AclNewCfgKbitsSec_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 43),
    _AclNewCfgKbitsSec_Type()
)
aclNewCfgKbitsSec.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgKbitsSec.setStatus("current")


class _AclNewCfgKbitsBurst_Type(Integer32):
    """Custom type aclNewCfgKbitsBurst based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(32,
              64,
              128,
              256,
              512,
              1024,
              2048,
              4096)
        )
    )
    namedValues = NamedValues(
        *(("kbits32", 32),
          ("kbits64", 64),
          ("kbits128", 128),
          ("kbits256", 256),
          ("kbits512", 512),
          ("kbits1024", 1024),
          ("kbits2048", 2048),
          ("kbits4096", 4096))
    )


_AclNewCfgKbitsBurst_Type.__name__ = "Integer32"
_AclNewCfgKbitsBurst_Object = MibTableColumn
aclNewCfgKbitsBurst = _AclNewCfgKbitsBurst_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 44),
    _AclNewCfgKbitsBurst_Type()
)
aclNewCfgKbitsBurst.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgKbitsBurst.setStatus("current")


class _AclNewCfgInprofUser_Type(Integer32):
    """Custom type aclNewCfgInprofUser based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_AclNewCfgInprofUser_Type.__name__ = "Integer32"
_AclNewCfgInprofUser_Object = MibTableColumn
aclNewCfgInprofUser = _AclNewCfgInprofUser_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 45),
    _AclNewCfgInprofUser_Type()
)
aclNewCfgInprofUser.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgInprofUser.setStatus("current")


class _AclNewCfgInprofDscp_Type(Integer32):
    """Custom type aclNewCfgInprofDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_AclNewCfgInprofDscp_Type.__name__ = "Integer32"
_AclNewCfgInprofDscp_Object = MibTableColumn
aclNewCfgInprofDscp = _AclNewCfgInprofDscp_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 46),
    _AclNewCfgInprofDscp_Type()
)
aclNewCfgInprofDscp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgInprofDscp.setStatus("current")


class _AclNewCfgInprofTos_Type(Integer32):
    """Custom type aclNewCfgInprofTos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_AclNewCfgInprofTos_Type.__name__ = "Integer32"
_AclNewCfgInprofTos_Object = MibTableColumn
aclNewCfgInprofTos = _AclNewCfgInprofTos_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 47),
    _AclNewCfgInprofTos_Type()
)
aclNewCfgInprofTos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgInprofTos.setStatus("current")


class _AclNewCfgOutprofDscp_Type(Integer32):
    """Custom type aclNewCfgOutprofDscp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_AclNewCfgOutprofDscp_Type.__name__ = "Integer32"
_AclNewCfgOutprofDscp_Object = MibTableColumn
aclNewCfgOutprofDscp = _AclNewCfgOutprofDscp_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 48),
    _AclNewCfgOutprofDscp_Type()
)
aclNewCfgOutprofDscp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgOutprofDscp.setStatus("current")


class _AclNewCfgInprofUserEnable_Type(Integer32):
    """Custom type aclNewCfgInprofUserEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("userdefined", 1))
    )


_AclNewCfgInprofUserEnable_Type.__name__ = "Integer32"
_AclNewCfgInprofUserEnable_Object = MibTableColumn
aclNewCfgInprofUserEnable = _AclNewCfgInprofUserEnable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 49),
    _AclNewCfgInprofUserEnable_Type()
)
aclNewCfgInprofUserEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgInprofUserEnable.setStatus("current")


class _AclNewCfgInprofDscpEnable_Type(Integer32):
    """Custom type aclNewCfgInprofDscpEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_AclNewCfgInprofDscpEnable_Type.__name__ = "Integer32"
_AclNewCfgInprofDscpEnable_Object = MibTableColumn
aclNewCfgInprofDscpEnable = _AclNewCfgInprofDscpEnable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 50),
    _AclNewCfgInprofDscpEnable_Type()
)
aclNewCfgInprofDscpEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgInprofDscpEnable.setStatus("current")


class _AclNewCfgOutprofDscpEnable_Type(Integer32):
    """Custom type aclNewCfgOutprofDscpEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disable", 0),
          ("enable", 1))
    )


_AclNewCfgOutprofDscpEnable_Type.__name__ = "Integer32"
_AclNewCfgOutprofDscpEnable_Object = MibTableColumn
aclNewCfgOutprofDscpEnable = _AclNewCfgOutprofDscpEnable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 51),
    _AclNewCfgOutprofDscpEnable_Type()
)
aclNewCfgOutprofDscpEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgOutprofDscpEnable.setStatus("current")


class _AclNewCfgReset_Type(Integer32):
    """Custom type aclNewCfgReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("reset", 2))
    )


_AclNewCfgReset_Type.__name__ = "Integer32"
_AclNewCfgReset_Object = MibTableColumn
aclNewCfgReset = _AclNewCfgReset_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 52),
    _AclNewCfgReset_Type()
)
aclNewCfgReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgReset.setStatus("current")


class _AclNewCfgEthernetReset_Type(Integer32):
    """Custom type aclNewCfgEthernetReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("reset", 2))
    )


_AclNewCfgEthernetReset_Type.__name__ = "Integer32"
_AclNewCfgEthernetReset_Object = MibTableColumn
aclNewCfgEthernetReset = _AclNewCfgEthernetReset_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 53),
    _AclNewCfgEthernetReset_Type()
)
aclNewCfgEthernetReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgEthernetReset.setStatus("current")


class _AclNewCfgIpv4Reset_Type(Integer32):
    """Custom type aclNewCfgIpv4Reset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("reset", 2))
    )


_AclNewCfgIpv4Reset_Type.__name__ = "Integer32"
_AclNewCfgIpv4Reset_Object = MibTableColumn
aclNewCfgIpv4Reset = _AclNewCfgIpv4Reset_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 54),
    _AclNewCfgIpv4Reset_Type()
)
aclNewCfgIpv4Reset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgIpv4Reset.setStatus("current")


class _AclNewCfgTcpudpReset_Type(Integer32):
    """Custom type aclNewCfgTcpudpReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("reset", 2))
    )


_AclNewCfgTcpudpReset_Type.__name__ = "Integer32"
_AclNewCfgTcpudpReset_Object = MibTableColumn
aclNewCfgTcpudpReset = _AclNewCfgTcpudpReset_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 55),
    _AclNewCfgTcpudpReset_Type()
)
aclNewCfgTcpudpReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgTcpudpReset.setStatus("current")


class _AclNewCfgMeterReset_Type(Integer32):
    """Custom type aclNewCfgMeterReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("reset", 2))
    )


_AclNewCfgMeterReset_Type.__name__ = "Integer32"
_AclNewCfgMeterReset_Object = MibTableColumn
aclNewCfgMeterReset = _AclNewCfgMeterReset_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 56),
    _AclNewCfgMeterReset_Type()
)
aclNewCfgMeterReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgMeterReset.setStatus("current")


class _AclNewCfgRemarkReset_Type(Integer32):
    """Custom type aclNewCfgRemarkReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("reset", 2))
    )


_AclNewCfgRemarkReset_Type.__name__ = "Integer32"
_AclNewCfgRemarkReset_Object = MibTableColumn
aclNewCfgRemarkReset = _AclNewCfgRemarkReset_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 57),
    _AclNewCfgRemarkReset_Type()
)
aclNewCfgRemarkReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgRemarkReset.setStatus("current")


class _AclNewCfgRemarkInprofReset_Type(Integer32):
    """Custom type aclNewCfgRemarkInprofReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("reset", 2))
    )


_AclNewCfgRemarkInprofReset_Type.__name__ = "Integer32"
_AclNewCfgRemarkInprofReset_Object = MibTableColumn
aclNewCfgRemarkInprofReset = _AclNewCfgRemarkInprofReset_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 58),
    _AclNewCfgRemarkInprofReset_Type()
)
aclNewCfgRemarkInprofReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgRemarkInprofReset.setStatus("current")


class _AclNewCfgRemarkOutprofReset_Type(Integer32):
    """Custom type aclNewCfgRemarkOutprofReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("reset", 2))
    )


_AclNewCfgRemarkOutprofReset_Type.__name__ = "Integer32"
_AclNewCfgRemarkOutprofReset_Object = MibTableColumn
aclNewCfgRemarkOutprofReset = _AclNewCfgRemarkOutprofReset_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 59),
    _AclNewCfgRemarkOutprofReset_Type()
)
aclNewCfgRemarkOutprofReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgRemarkOutprofReset.setStatus("current")


class _AclNewCfgPktfmtReset_Type(Integer32):
    """Custom type aclNewCfgPktfmtReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("reset", 2))
    )


_AclNewCfgPktfmtReset_Type.__name__ = "Integer32"
_AclNewCfgPktfmtReset_Object = MibTableColumn
aclNewCfgPktfmtReset = _AclNewCfgPktfmtReset_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 1, 2, 1, 60),
    _AclNewCfgPktfmtReset_Type()
)
aclNewCfgPktfmtReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgPktfmtReset.setStatus("current")
_AclGroup_ObjectIdentity = ObjectIdentity
aclGroup = _AclGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 3)
)
_AclGroupCurCfgTable_Object = MibTable
aclGroupCurCfgTable = _AclGroupCurCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 3, 1)
)
if mibBuilder.loadTexts:
    aclGroupCurCfgTable.setStatus("current")
_AclGroupCurCfgEntry_Object = MibTableRow
aclGroupCurCfgEntry = _AclGroupCurCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 3, 1, 1)
)
aclGroupCurCfgEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "aclGroupCurCfgIndex"),
)
if mibBuilder.loadTexts:
    aclGroupCurCfgEntry.setStatus("current")
_AclGroupCurCfgIndex_Type = Unsigned32
_AclGroupCurCfgIndex_Object = MibTableColumn
aclGroupCurCfgIndex = _AclGroupCurCfgIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 3, 1, 1, 1),
    _AclGroupCurCfgIndex_Type()
)
aclGroupCurCfgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclGroupCurCfgIndex.setStatus("current")
_AclGroupCurCfgMemberAcls_Type = OctetString
_AclGroupCurCfgMemberAcls_Object = MibTableColumn
aclGroupCurCfgMemberAcls = _AclGroupCurCfgMemberAcls_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 3, 1, 1, 2),
    _AclGroupCurCfgMemberAcls_Type()
)
aclGroupCurCfgMemberAcls.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclGroupCurCfgMemberAcls.setStatus("current")
_AclGroupNewCfgTable_Object = MibTable
aclGroupNewCfgTable = _AclGroupNewCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 3, 2)
)
if mibBuilder.loadTexts:
    aclGroupNewCfgTable.setStatus("current")
_AclGroupNewCfgEntry_Object = MibTableRow
aclGroupNewCfgEntry = _AclGroupNewCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 3, 2, 1)
)
aclGroupNewCfgEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "aclGroupNewCfgIndex"),
)
if mibBuilder.loadTexts:
    aclGroupNewCfgEntry.setStatus("current")
_AclGroupNewCfgIndex_Type = Unsigned32
_AclGroupNewCfgIndex_Object = MibTableColumn
aclGroupNewCfgIndex = _AclGroupNewCfgIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 3, 2, 1, 1),
    _AclGroupNewCfgIndex_Type()
)
aclGroupNewCfgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclGroupNewCfgIndex.setStatus("current")
_AclGroupNewCfgMemberAcls_Type = OctetString
_AclGroupNewCfgMemberAcls_Object = MibTableColumn
aclGroupNewCfgMemberAcls = _AclGroupNewCfgMemberAcls_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 3, 2, 1, 2),
    _AclGroupNewCfgMemberAcls_Type()
)
aclGroupNewCfgMemberAcls.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclGroupNewCfgMemberAcls.setStatus("current")
_AclGroupNewCfgAddAcl_Type = Unsigned32
_AclGroupNewCfgAddAcl_Object = MibTableColumn
aclGroupNewCfgAddAcl = _AclGroupNewCfgAddAcl_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 3, 2, 1, 4),
    _AclGroupNewCfgAddAcl_Type()
)
aclGroupNewCfgAddAcl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclGroupNewCfgAddAcl.setStatus("current")
_AclGroupNewCfgRemoveAcl_Type = Unsigned32
_AclGroupNewCfgRemoveAcl_Object = MibTableColumn
aclGroupNewCfgRemoveAcl = _AclGroupNewCfgRemoveAcl_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 3, 2, 1, 5),
    _AclGroupNewCfgRemoveAcl_Type()
)
aclGroupNewCfgRemoveAcl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclGroupNewCfgRemoveAcl.setStatus("current")


class _AclGroupNewCfgDelete_Type(Integer32):
    """Custom type aclGroupNewCfgDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("delete", 2))
    )


_AclGroupNewCfgDelete_Type.__name__ = "Integer32"
_AclGroupNewCfgDelete_Object = MibTableColumn
aclGroupNewCfgDelete = _AclGroupNewCfgDelete_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 3, 2, 1, 8),
    _AclGroupNewCfgDelete_Type()
)
aclGroupNewCfgDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclGroupNewCfgDelete.setStatus("current")
_AclCfg_ObjectIdentity = ObjectIdentity
aclCfg = _AclCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 4)
)
_AclCurCfgPortTable_Object = MibTable
aclCurCfgPortTable = _AclCurCfgPortTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 4, 1)
)
if mibBuilder.loadTexts:
    aclCurCfgPortTable.setStatus("current")
_AclCurCfgPortTableEntry_Object = MibTableRow
aclCurCfgPortTableEntry = _AclCurCfgPortTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 4, 1, 1)
)
aclCurCfgPortTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "aclCurCfgPortIndex"),
)
if mibBuilder.loadTexts:
    aclCurCfgPortTableEntry.setStatus("current")
_AclCurCfgPortIndex_Type = Integer32
_AclCurCfgPortIndex_Object = MibTableColumn
aclCurCfgPortIndex = _AclCurCfgPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 4, 1, 1, 1),
    _AclCurCfgPortIndex_Type()
)
aclCurCfgPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgPortIndex.setStatus("current")


class _AclCurCfgPortAclBmap_Type(OctetString):
    """Custom type aclCurCfgPortAclBmap based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 512),
    )


_AclCurCfgPortAclBmap_Type.__name__ = "OctetString"
_AclCurCfgPortAclBmap_Object = MibTableColumn
aclCurCfgPortAclBmap = _AclCurCfgPortAclBmap_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 4, 1, 1, 2),
    _AclCurCfgPortAclBmap_Type()
)
aclCurCfgPortAclBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgPortAclBmap.setStatus("current")


class _AclCurCfgPortAclGrpBmap_Type(OctetString):
    """Custom type aclCurCfgPortAclGrpBmap based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 512),
    )


_AclCurCfgPortAclGrpBmap_Type.__name__ = "OctetString"
_AclCurCfgPortAclGrpBmap_Object = MibTableColumn
aclCurCfgPortAclGrpBmap = _AclCurCfgPortAclGrpBmap_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 4, 1, 1, 4),
    _AclCurCfgPortAclGrpBmap_Type()
)
aclCurCfgPortAclGrpBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclCurCfgPortAclGrpBmap.setStatus("current")
_AclNewCfgPortTable_Object = MibTable
aclNewCfgPortTable = _AclNewCfgPortTable_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 4, 2)
)
if mibBuilder.loadTexts:
    aclNewCfgPortTable.setStatus("current")
_AclNewCfgPortTableEntry_Object = MibTableRow
aclNewCfgPortTableEntry = _AclNewCfgPortTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 4, 2, 1)
)
aclNewCfgPortTableEntry.setIndexNames(
    (0, "BLADETYPE5-NETWORK-MIB", "aclNewCfgPortIndex"),
)
if mibBuilder.loadTexts:
    aclNewCfgPortTableEntry.setStatus("current")
_AclNewCfgPortIndex_Type = Integer32
_AclNewCfgPortIndex_Object = MibTableColumn
aclNewCfgPortIndex = _AclNewCfgPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 4, 2, 1, 1),
    _AclNewCfgPortIndex_Type()
)
aclNewCfgPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclNewCfgPortIndex.setStatus("current")
_AclNewCfgPortAddAcl_Type = Unsigned32
_AclNewCfgPortAddAcl_Object = MibTableColumn
aclNewCfgPortAddAcl = _AclNewCfgPortAddAcl_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 4, 2, 1, 2),
    _AclNewCfgPortAddAcl_Type()
)
aclNewCfgPortAddAcl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgPortAddAcl.setStatus("current")
_AclNewCfgPortAddAclGrp_Type = Unsigned32
_AclNewCfgPortAddAclGrp_Object = MibTableColumn
aclNewCfgPortAddAclGrp = _AclNewCfgPortAddAclGrp_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 4, 2, 1, 4),
    _AclNewCfgPortAddAclGrp_Type()
)
aclNewCfgPortAddAclGrp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgPortAddAclGrp.setStatus("current")
_AclNewCfgPortRemoveAcl_Type = Unsigned32
_AclNewCfgPortRemoveAcl_Object = MibTableColumn
aclNewCfgPortRemoveAcl = _AclNewCfgPortRemoveAcl_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 4, 2, 1, 5),
    _AclNewCfgPortRemoveAcl_Type()
)
aclNewCfgPortRemoveAcl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgPortRemoveAcl.setStatus("current")
_AclNewCfgPortRemoveAclGrp_Type = Unsigned32
_AclNewCfgPortRemoveAclGrp_Object = MibTableColumn
aclNewCfgPortRemoveAclGrp = _AclNewCfgPortRemoveAclGrp_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 4, 2, 1, 7),
    _AclNewCfgPortRemoveAclGrp_Type()
)
aclNewCfgPortRemoveAclGrp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    aclNewCfgPortRemoveAclGrp.setStatus("current")


class _AclNewCfgPortAclBmap_Type(OctetString):
    """Custom type aclNewCfgPortAclBmap based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 512),
    )


_AclNewCfgPortAclBmap_Type.__name__ = "OctetString"
_AclNewCfgPortAclBmap_Object = MibTableColumn
aclNewCfgPortAclBmap = _AclNewCfgPortAclBmap_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 4, 2, 1, 8),
    _AclNewCfgPortAclBmap_Type()
)
aclNewCfgPortAclBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclNewCfgPortAclBmap.setStatus("current")


class _AclNewCfgPortAclGrpBmap_Type(OctetString):
    """Custom type aclNewCfgPortAclGrpBmap based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 512),
    )


_AclNewCfgPortAclGrpBmap_Type.__name__ = "OctetString"
_AclNewCfgPortAclGrpBmap_Object = MibTableColumn
aclNewCfgPortAclGrpBmap = _AclNewCfgPortAclGrpBmap_Object(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 9, 1, 4, 2, 1, 10),
    _AclNewCfgPortAclGrpBmap_Type()
)
aclNewCfgPortAclGrpBmap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aclNewCfgPortAclGrpBmap.setStatus("current")

# Managed Objects groups


# Notification objects

bntSwDefGwUp = NotificationType(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 7, 0, 2)
)
bntSwDefGwUp.setObjects(
      *(("BLADETYPE5-NETWORK-MIB", "ipCurCfgGwIndex"),
        ("BLADETYPE5-NETWORK-MIB", "ipCurCfgGwAddr"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    bntSwDefGwUp.setStatus(
        ""
    )

bntSwDefGwDown = NotificationType(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 7, 0, 3)
)
bntSwDefGwDown.setObjects(
      *(("BLADETYPE5-NETWORK-MIB", "ipCurCfgGwIndex"),
        ("BLADETYPE5-NETWORK-MIB", "ipCurCfgGwAddr"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    bntSwDefGwDown.setStatus(
        ""
    )

bntSwDefGwInService = NotificationType(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 7, 0, 4)
)
bntSwDefGwInService.setObjects(
      *(("BLADETYPE5-NETWORK-MIB", "ipCurCfgGwIndex"),
        ("BLADETYPE5-NETWORK-MIB", "ipCurCfgGwAddr"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    bntSwDefGwInService.setStatus(
        ""
    )

bntSwDefGwNotInService = NotificationType(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 7, 0, 5)
)
bntSwDefGwNotInService.setObjects(
      *(("BLADETYPE5-NETWORK-MIB", "ipCurCfgGwIndex"),
        ("BLADETYPE5-NETWORK-MIB", "ipCurCfgGwAddr"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    bntSwDefGwNotInService.setStatus(
        ""
    )

bntSwLoginFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 7, 0, 19)
)
bntSwLoginFailure.setObjects(
      *(("BLADETYPE5-NETWORK-MIB", "bntSwTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    bntSwLoginFailure.setStatus(
        ""
    )

bntSwTempExceedThreshold = NotificationType(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 7, 0, 22)
)
bntSwTempExceedThreshold.setObjects(
      *(("BLADETYPE5-NETWORK-MIB", "bntSwTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    bntSwTempExceedThreshold.setStatus(
        ""
    )

bntSwApplyComplete = NotificationType(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 7, 0, 27)
)
bntSwApplyComplete.setObjects(
      *(("BLADETYPE5-NETWORK-MIB", "bntSwTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    bntSwApplyComplete.setStatus(
        ""
    )

bntSwSaveComplete = NotificationType(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 7, 0, 28)
)
bntSwSaveComplete.setObjects(
      *(("BLADETYPE5-NETWORK-MIB", "bntSwTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    bntSwSaveComplete.setStatus(
        ""
    )

bntSwFwDownloadSucess = NotificationType(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 7, 0, 29)
)
bntSwFwDownloadSucess.setObjects(
      *(("BLADETYPE5-NETWORK-MIB", "bntSwTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    bntSwFwDownloadSucess.setStatus(
        ""
    )

bntSwFwDownloadFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 7, 0, 30)
)
bntSwFwDownloadFailure.setObjects(
      *(("BLADETYPE5-NETWORK-MIB", "bntSwTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    bntSwFwDownloadFailure.setStatus(
        ""
    )

bntSwTempReturnThreshold = NotificationType(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 7, 0, 31)
)
bntSwTempReturnThreshold.setObjects(
      *(("BLADETYPE5-NETWORK-MIB", "bntSwTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    bntSwTempReturnThreshold.setStatus(
        ""
    )

bntSwUfdfoLtMFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 7, 0, 34)
)
bntSwUfdfoLtMFailure.setObjects(
      *(("BLADETYPE5-NETWORK-MIB", "bntSwTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    bntSwUfdfoLtMFailure.setStatus(
        ""
    )

bntSwUfdfoLtMUP = NotificationType(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 7, 0, 35)
)
bntSwUfdfoLtMUP.setObjects(
      *(("BLADETYPE5-NETWORK-MIB", "bntSwTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    bntSwUfdfoLtMUP.setStatus(
        ""
    )

bntSwUfdfoGlobalEna = NotificationType(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 7, 0, 36)
)
bntSwUfdfoGlobalEna.setObjects(
      *(("BLADETYPE5-NETWORK-MIB", "bntSwTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    bntSwUfdfoGlobalEna.setStatus(
        ""
    )

bntSwUfdfoGlobalDis = NotificationType(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 7, 0, 37)
)
bntSwUfdfoGlobalDis.setObjects(
      *(("BLADETYPE5-NETWORK-MIB", "bntSwTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    bntSwUfdfoGlobalDis.setStatus(
        ""
    )

bntSwUfdfoLtDAutoEna = NotificationType(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 7, 0, 38)
)
bntSwUfdfoLtDAutoEna.setObjects(
      *(("BLADETYPE5-NETWORK-MIB", "bntSwTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    bntSwUfdfoLtDAutoEna.setStatus(
        ""
    )

bntSwUfdfoLtDAutoDis = NotificationType(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 7, 0, 39)
)
bntSwUfdfoLtDAutoDis.setObjects(
      *(("BLADETYPE5-NETWORK-MIB", "bntSwTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    bntSwUfdfoLtDAutoDis.setStatus(
        ""
    )

bntSwStgNewRoot = NotificationType(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 7, 0, 42)
)
bntSwStgNewRoot.setObjects(
      *(("BLADETYPE5-NETWORK-MIB", "bntSwTrapDisplayString"),
        ("BLADETYPE5-NETWORK-MIB", "stgCurCfgIndex"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    bntSwStgNewRoot.setStatus(
        ""
    )

bntSwCistNewRoot = NotificationType(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 7, 0, 43)
)
bntSwCistNewRoot.setObjects(
      *(("BLADETYPE5-NETWORK-MIB", "bntSwTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    bntSwCistNewRoot.setStatus(
        ""
    )

bntSwStgTopologyChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 7, 0, 44)
)
bntSwStgTopologyChanged.setObjects(
      *(("BLADETYPE5-NETWORK-MIB", "bntSwTrapDisplayString"),
        ("BLADETYPE5-NETWORK-MIB", "stgCurCfgIndex"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    bntSwStgTopologyChanged.setStatus(
        ""
    )

bntSwCistTopologyChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 7, 0, 45)
)
bntSwCistTopologyChanged.setObjects(
      *(("BLADETYPE5-NETWORK-MIB", "bntSwTrapDisplayString"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    bntSwCistTopologyChanged.setStatus(
        ""
    )

bntSFPInserted = NotificationType(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 7, 0, 51)
)
bntSFPInserted.setObjects(
      *(("BLADETYPE5-NETWORK-MIB", "bntSwTrapDisplayString"),
        ("IF-MIB", "ifIndex"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    bntSFPInserted.setStatus(
        ""
    )

bntSFPRemoved = NotificationType(
    (1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 5, 2, 7, 0, 52)
)
bntSFPRemoved.setObjects(
      *(("BLADETYPE5-NETWORK-MIB", "bntSwTrapDisplayString"),
        ("IF-MIB", "ifIndex"),
        ("SNMPv2-MIB", "sysName"),
        ("SNMPv2-MIB", "sysLocation"),
        ("SNMPv2-MIB", "sysContact"))
)
if mibBuilder.loadTexts:
    bntSFPRemoved.setStatus(
        ""
    )


# Notifications groups


# Agent capabilities


# Module compliance


# Export all MIB objects to the MIB builder

mibBuilder.exportSymbols(
    "BLADETYPE5-NETWORK-MIB",
    **{"hpProLiant-GbE2c-1-10G-InterconnectSwitch": hpProLiant_GbE2c_1_10G_InterconnectSwitch,
       "agent": agent,
       "agentConfig": agentConfig,
       "agSystem": agSystem,
       "agApplyConfiguration": agApplyConfiguration,
       "agSavePending": agSavePending,
       "agSaveConfiguration": agSaveConfiguration,
       "agRevert": agRevert,
       "agRevertApply": agRevertApply,
       "agReset": agReset,
       "agConfigForNxtReset": agConfigForNxtReset,
       "agImageForNxtReset": agImageForNxtReset,
       "agSoftwareVersion": agSoftwareVersion,
       "agBootVer": agBootVer,
       "agImage1Ver": agImage1Ver,
       "agImage2Ver": agImage2Ver,
       "agRtcDate": agRtcDate,
       "agRtcTime": agRtcTime,
       "agLastSetErrorReason": agLastSetErrorReason,
       "agCurCfgHttpServerPort": agCurCfgHttpServerPort,
       "agNewCfgHttpServerPort": agNewCfgHttpServerPort,
       "agCurCfgLoginBanner": agCurCfgLoginBanner,
       "agNewCfgLoginBanner": agNewCfgLoginBanner,
       "agCurCfgConsole": agCurCfgConsole,
       "agNewCfgConsole": agNewCfgConsole,
       "agCurCfgBootp": agCurCfgBootp,
       "agNewCfgBootp": agNewCfgBootp,
       "agSlotNumber": agSlotNumber,
       "agCurCfgSnmpTimeout": agCurCfgSnmpTimeout,
       "agNewCfgSnmpTimeout": agNewCfgSnmpTimeout,
       "agCurCfgTelnetServerPort": agCurCfgTelnetServerPort,
       "agNewCfgTelnetServerPort": agNewCfgTelnetServerPort,
       "agClearFlashDump": agClearFlashDump,
       "agRackId": agRackId,
       "agChassis": agChassis,
       "agCurCfgTftpServerPort": agCurCfgTftpServerPort,
       "agNewCfgTftpServerPort": agNewCfgTftpServerPort,
       "agCurCfgHttpsServerPort": agCurCfgHttpsServerPort,
       "agNewCfgHttpsServerPort": agNewCfgHttpsServerPort,
       "agCurDaylightSavings": agCurDaylightSavings,
       "agNewDaylightSavings": agNewDaylightSavings,
       "agCfgSysDlight": agCfgSysDlight,
       "agCurCfgIdleCLITimeout": agCurCfgIdleCLITimeout,
       "agNewCfgIdleCLITimeout": agNewCfgIdleCLITimeout,
       "agCurCfgUfdTrap": agCurCfgUfdTrap,
       "agNewCfgUfdTrap": agNewCfgUfdTrap,
       "agCurCfgReminders": agCurCfgReminders,
       "agNewCfgReminders": agNewCfgReminders,
       "agCurBootNxtCliMode": agCurBootNxtCliMode,
       "agNewBootNxtCliMode": agNewBootNxtCliMode,
       "agCurCfgDhcp": agCurCfgDhcp,
       "agNewCfgDhcp": agNewCfgDhcp,
       "agCurCfgHprompt": agCurCfgHprompt,
       "agNewCfgHprompt": agNewCfgHprompt,
       "agCurCfgLoginNotice": agCurCfgLoginNotice,
       "agNewCfgLoginNotice": agNewCfgLoginNotice,
       "agCurBootNxtCliModePrompt": agCurBootNxtCliModePrompt,
       "agNewBootNxtCliModePrompt": agNewBootNxtCliModePrompt,
       "agCurCfgOldDst": agCurCfgOldDst,
       "agNewCfgOldDst": agNewCfgOldDst,
       "agHavePanicDump": agHavePanicDump,
       "agPortConfig": agPortConfig,
       "agPortTableMaxEnt": agPortTableMaxEnt,
       "agPortCurCfgTable": agPortCurCfgTable,
       "agPortCurCfgTableEntry": agPortCurCfgTableEntry,
       "agPortCurCfgIndx": agPortCurCfgIndx,
       "agPortCurCfgState": agPortCurCfgState,
       "agPortCurCfgVlanTag": agPortCurCfgVlanTag,
       "agPortCurCfgRmon": agPortCurCfgRmon,
       "agPortCurCfgPVID": agPortCurCfgPVID,
       "agPortCurCfgGigEthAutoNeg": agPortCurCfgGigEthAutoNeg,
       "agPortCurCfgGigEthSpeed": agPortCurCfgGigEthSpeed,
       "agPortCurCfgGigEthMode": agPortCurCfgGigEthMode,
       "agPortCurCfgGigEthFctl": agPortCurCfgGigEthFctl,
       "agPortCurCfgPortName": agPortCurCfgPortName,
       "agPortCurCfgLinkTrap": agPortCurCfgLinkTrap,
       "agPortCurCfgTagPVID": agPortCurCfgTagPVID,
       "agPortCurCfgMulticastThreshold": agPortCurCfgMulticastThreshold,
       "agPortCurCfgMulticastThresholdRate": agPortCurCfgMulticastThresholdRate,
       "agPortCurCfgBroadcastThreshold": agPortCurCfgBroadcastThreshold,
       "agPortCurCfgBroadcastThresholdRate": agPortCurCfgBroadcastThresholdRate,
       "agPortCurCfgDLFThreshold": agPortCurCfgDLFThreshold,
       "agPortCurCfgDLFThresholdRate": agPortCurCfgDLFThresholdRate,
       "agPortCurCfgType": agPortCurCfgType,
       "agPortNewCfgTable": agPortNewCfgTable,
       "agPortNewCfgTableEntry": agPortNewCfgTableEntry,
       "agPortNewCfgIndx": agPortNewCfgIndx,
       "agPortNewCfgState": agPortNewCfgState,
       "agPortNewCfgVlanTag": agPortNewCfgVlanTag,
       "agPortNewCfgRmon": agPortNewCfgRmon,
       "agPortNewCfgPVID": agPortNewCfgPVID,
       "agPortNewCfgGigEthAutoNeg": agPortNewCfgGigEthAutoNeg,
       "agPortNewCfgGigEthSpeed": agPortNewCfgGigEthSpeed,
       "agPortNewCfgGigEthMode": agPortNewCfgGigEthMode,
       "agPortNewCfgGigEthFctl": agPortNewCfgGigEthFctl,
       "agPortNewCfgPortName": agPortNewCfgPortName,
       "agPortNewCfgLinkTrap": agPortNewCfgLinkTrap,
       "agPortNewCfgTagPVID": agPortNewCfgTagPVID,
       "agPortNewCfgMulticastThreshold": agPortNewCfgMulticastThreshold,
       "agPortNewCfgMulticastThresholdRate": agPortNewCfgMulticastThresholdRate,
       "agPortNewCfgBroadcastThreshold": agPortNewCfgBroadcastThreshold,
       "agPortNewCfgBroadcastThresholdRate": agPortNewCfgBroadcastThresholdRate,
       "agPortNewCfgDLFThreshold": agPortNewCfgDLFThreshold,
       "agPortNewCfgDLFThresholdRate": agPortNewCfgDLFThresholdRate,
       "agPortNewCfgType": agPortNewCfgType,
       "agRadiusConfig": agRadiusConfig,
       "radCurCfgPrimaryIpAddr": radCurCfgPrimaryIpAddr,
       "radNewCfgPrimaryIpAddr": radNewCfgPrimaryIpAddr,
       "radCurCfgSecondaryIpAddr": radCurCfgSecondaryIpAddr,
       "radNewCfgSecondaryIpAddr": radNewCfgSecondaryIpAddr,
       "radCurCfgPort": radCurCfgPort,
       "radNewCfgPort": radNewCfgPort,
       "radCurCfgTimeout": radCurCfgTimeout,
       "radNewCfgTimeout": radNewCfgTimeout,
       "radCurCfgRetries": radCurCfgRetries,
       "radNewCfgRetries": radNewCfgRetries,
       "radCurCfgState": radCurCfgState,
       "radNewCfgState": radNewCfgState,
       "radCurCfgAuthenString": radCurCfgAuthenString,
       "radNewCfgAuthenString": radNewCfgAuthenString,
       "radCurCfgBackdoor": radCurCfgBackdoor,
       "radNewCfgBackdoor": radNewCfgBackdoor,
       "radCurCfgAuthenSecondString": radCurCfgAuthenSecondString,
       "radNewCfgAuthenSecondString": radNewCfgAuthenSecondString,
       "radCurCfgSecBd": radCurCfgSecBd,
       "radNewCfgSecBd": radNewCfgSecBd,
       "agNTP": agNTP,
       "agCurCfgNTPServer": agCurCfgNTPServer,
       "agNewCfgNTPServer": agNewCfgNTPServer,
       "agCurCfgNTPResyncInterval": agCurCfgNTPResyncInterval,
       "agNewCfgNTPResyncInterval": agNewCfgNTPResyncInterval,
       "agCurCfgNTPService": agCurCfgNTPService,
       "agNewCfgNTPService": agNewCfgNTPService,
       "agCurCfgNTPSecServer": agCurCfgNTPSecServer,
       "agNewCfgNTPSecServer": agNewCfgNTPSecServer,
       "agSyslog": agSyslog,
       "agCurCfgSyslogHost": agCurCfgSyslogHost,
       "agNewCfgSyslogHost": agNewCfgSyslogHost,
       "agCurCfgSyslog2Host": agCurCfgSyslog2Host,
       "agNewCfgSyslog2Host": agNewCfgSyslog2Host,
       "agCurCfgSyslogFac": agCurCfgSyslogFac,
       "agNewCfgSyslogFac": agNewCfgSyslogFac,
       "agCurCfgSyslog2Fac": agCurCfgSyslog2Fac,
       "agNewCfgSyslog2Fac": agNewCfgSyslog2Fac,
       "agClrSyslogMsgs": agClrSyslogMsgs,
       "agSyslogMsgTableMaxSize": agSyslogMsgTableMaxSize,
       "agSyslogMsgTable": agSyslogMsgTable,
       "agSyslogMsgTableEntry": agSyslogMsgTableEntry,
       "agSyslogMsgIndex": agSyslogMsgIndex,
       "agSyslogMessage": agSyslogMessage,
       "agLog": agLog,
       "agNewCfgSyslogTrapConsole": agNewCfgSyslogTrapConsole,
       "agCurCfgSyslogTrapConsole": agCurCfgSyslogTrapConsole,
       "agNewCfgSyslogTrapSystem": agNewCfgSyslogTrapSystem,
       "agCurCfgSyslogTrapSystem": agCurCfgSyslogTrapSystem,
       "agNewCfgSyslogTrapMgmt": agNewCfgSyslogTrapMgmt,
       "agCurCfgSyslogTrapMgmt": agCurCfgSyslogTrapMgmt,
       "agNewCfgSyslogTrapCli": agNewCfgSyslogTrapCli,
       "agCurCfgSyslogTrapCli": agCurCfgSyslogTrapCli,
       "agNewCfgSyslogTrapStg": agNewCfgSyslogTrapStg,
       "agCurCfgSyslogTrapStg": agCurCfgSyslogTrapStg,
       "agNewCfgSyslogTrapVlan": agNewCfgSyslogTrapVlan,
       "agCurCfgSyslogTrapVlan": agCurCfgSyslogTrapVlan,
       "agNewCfgSyslogTrapSsh": agNewCfgSyslogTrapSsh,
       "agCurCfgSyslogTrapSsh": agCurCfgSyslogTrapSsh,
       "agNewCfgSyslogTrapVrrp": agNewCfgSyslogTrapVrrp,
       "agCurCfgSyslogTrapVrrp": agCurCfgSyslogTrapVrrp,
       "agNewCfgSyslogTrapNtp": agNewCfgSyslogTrapNtp,
       "agCurCfgSyslogTrapNtp": agCurCfgSyslogTrapNtp,
       "agNewCfgSyslogTrapIp": agNewCfgSyslogTrapIp,
       "agCurCfgSyslogTrapIp": agCurCfgSyslogTrapIp,
       "agNewCfgSyslogTrapWeb": agNewCfgSyslogTrapWeb,
       "agCurCfgSyslogTrapWeb": agCurCfgSyslogTrapWeb,
       "agNewCfgSyslogTrapOspf": agNewCfgSyslogTrapOspf,
       "agCurCfgSyslogTrapOspf": agCurCfgSyslogTrapOspf,
       "agNewCfgSyslogTrapRmon": agNewCfgSyslogTrapRmon,
       "agCurCfgSyslogTrapRmon": agCurCfgSyslogTrapRmon,
       "agNewCfgSyslogTrapUfd": agNewCfgSyslogTrapUfd,
       "agCurCfgSyslogTrapUfd": agCurCfgSyslogTrapUfd,
       "agNewCfgSyslogTrapCfg": agNewCfgSyslogTrapCfg,
       "agCurCfgSyslogTrapCfg": agCurCfgSyslogTrapCfg,
       "agNewCfgSyslogTrap8021x": agNewCfgSyslogTrap8021x,
       "agCurCfgSyslogTrap8021x": agCurCfgSyslogTrap8021x,
       "agNewCfgSyslogTrapAll": agNewCfgSyslogTrapAll,
       "agCurCfgSyslogTrapAll": agCurCfgSyslogTrapAll,
       "agCurCfgSyslogSev": agCurCfgSyslogSev,
       "agNewCfgSyslogSev": agNewCfgSyslogSev,
       "agCurCfgSyslog2Sev": agCurCfgSyslog2Sev,
       "agNewCfgSyslog2Sev": agNewCfgSyslog2Sev,
       "agTransfer": agTransfer,
       "agTransferServer": agTransferServer,
       "agTransferImage": agTransferImage,
       "agTransferImageFileName": agTransferImageFileName,
       "agTransferCfgFileName": agTransferCfgFileName,
       "agTransferDumpFileName": agTransferDumpFileName,
       "agTransferAction": agTransferAction,
       "agTransferLastActionStatus": agTransferLastActionStatus,
       "agTransferUserName": agTransferUserName,
       "agTransferPassword": agTransferPassword,
       "agTransferTSDumpFileName": agTransferTSDumpFileName,
       "agTransferLastConfigurationActionStatus": agTransferLastConfigurationActionStatus,
       "agApply": agApply,
       "agApplyPending": agApplyPending,
       "agApplyConfig": agApplyConfig,
       "agApplyTableSize": agApplyTableSize,
       "agApplyTable": agApplyTable,
       "agApplyTableEntry": agApplyTableEntry,
       "agApplyIndex": agApplyIndex,
       "agApplyString": agApplyString,
       "agTacacsConfig": agTacacsConfig,
       "tacCurCfgPrimaryIpAddr": tacCurCfgPrimaryIpAddr,
       "tacNewCfgPrimaryIpAddr": tacNewCfgPrimaryIpAddr,
       "tacCurCfgSecondaryIpAddr": tacCurCfgSecondaryIpAddr,
       "tacNewCfgSecondaryIpAddr": tacNewCfgSecondaryIpAddr,
       "tacCurCfgPort": tacCurCfgPort,
       "tacNewCfgPort": tacNewCfgPort,
       "tacCurCfgTimeout": tacCurCfgTimeout,
       "tacNewCfgTimeout": tacNewCfgTimeout,
       "tacCurCfgRetries": tacCurCfgRetries,
       "tacNewCfgRetries": tacNewCfgRetries,
       "tacCurCfgState": tacCurCfgState,
       "tacNewCfgState": tacNewCfgState,
       "tacCurCfgAuthenString": tacCurCfgAuthenString,
       "tacNewCfgAuthenString": tacNewCfgAuthenString,
       "tacCurCfgBackdoor": tacCurCfgBackdoor,
       "tacNewCfgBackdoor": tacNewCfgBackdoor,
       "tacCurCfgAuthenSecondString": tacCurCfgAuthenSecondString,
       "tacNewCfgAuthenSecondString": tacNewCfgAuthenSecondString,
       "tacCurCfgCmdAuthor": tacCurCfgCmdAuthor,
       "tacNewCfgCmdAuthor": tacNewCfgCmdAuthor,
       "tacCurCfgCmdLogging": tacCurCfgCmdLogging,
       "tacNewCfgCmdLogging": tacNewCfgCmdLogging,
       "tacCurCfgSecBd": tacCurCfgSecBd,
       "tacNewCfgSecBd": tacNewCfgSecBd,
       "tacCurCfgCmap": tacCurCfgCmap,
       "tacNewCfgCmap": tacNewCfgCmap,
       "agTacacsUserMapCurCfgTable": agTacacsUserMapCurCfgTable,
       "agTacacsUserMapCurCfgTableEntry": agTacacsUserMapCurCfgTableEntry,
       "agTacacsUserMapCurCfgUId": agTacacsUserMapCurCfgUId,
       "agTacacsUserMapCurCfgMapping": agTacacsUserMapCurCfgMapping,
       "agTacacsUserMapNewCfgTable": agTacacsUserMapNewCfgTable,
       "agTacacsUserMapNewCfgTableEntry": agTacacsUserMapNewCfgTableEntry,
       "agTacacsUserMapNewCfgUId": agTacacsUserMapNewCfgUId,
       "agTacacsUserMapNewCfgMapping": agTacacsUserMapNewCfgMapping,
       "agMgmtNetConfig": agMgmtNetConfig,
       "agMgmtNetTableMaxSize": agMgmtNetTableMaxSize,
       "agCurCfgMgmtNetTable": agCurCfgMgmtNetTable,
       "agCurCfgMgmtNetEntry": agCurCfgMgmtNetEntry,
       "agCurCfgMgmtNetIndex": agCurCfgMgmtNetIndex,
       "agCurCfgMgmtNetSubnet": agCurCfgMgmtNetSubnet,
       "agCurCfgMgmtNetMask": agCurCfgMgmtNetMask,
       "agNewCfgMgmtNetTable": agNewCfgMgmtNetTable,
       "agNewCfgMgmtNetEntry": agNewCfgMgmtNetEntry,
       "agNewCfgMgmtNetIndex": agNewCfgMgmtNetIndex,
       "agNewCfgMgmtNetSubnet": agNewCfgMgmtNetSubnet,
       "agNewCfgMgmtNetMask": agNewCfgMgmtNetMask,
       "agNewCfgMgmtNetDelete": agNewCfgMgmtNetDelete,
       "agMgmtNetClear": agMgmtNetClear,
       "agAccess": agAccess,
       "agAccessUserMaxUserID": agAccessUserMaxUserID,
       "agAccessUserCurCfgTable": agAccessUserCurCfgTable,
       "agAccessUserCurCfgTableEntry": agAccessUserCurCfgTableEntry,
       "agAccessUserCurCfgUId": agAccessUserCurCfgUId,
       "agAccessUserCurCos": agAccessUserCurCos,
       "agAccessUserCurCfgName": agAccessUserCurCfgName,
       "agAccessUserCurCfgPswd": agAccessUserCurCfgPswd,
       "agAccessUserCurCfgState": agAccessUserCurCfgState,
       "agAccessUserNewCfgTable": agAccessUserNewCfgTable,
       "agAccessUserNewCfgTableEntry": agAccessUserNewCfgTableEntry,
       "agAccessUserNewCfgUId": agAccessUserNewCfgUId,
       "agAccessUserNewCos": agAccessUserNewCos,
       "agAccessUserNewCfgName": agAccessUserNewCfgName,
       "agAccessUserNewCfgPswd": agAccessUserNewCfgPswd,
       "agAccessUserNewCfgState": agAccessUserNewCfgState,
       "agAccessUserNewCfgDelete": agAccessUserNewCfgDelete,
       "agSSHConfig": agSSHConfig,
       "sshCurCfgIntrval": sshCurCfgIntrval,
       "sshNewCfgIntrval": sshNewCfgIntrval,
       "sshCurCfgScpAdm": sshCurCfgScpAdm,
       "sshNewCfgScpAdm": sshNewCfgScpAdm,
       "sshNewCfgHKeyGen": sshNewCfgHKeyGen,
       "sshNewCfgSKeyGen": sshNewCfgSKeyGen,
       "sshCurCfgSSHPort": sshCurCfgSSHPort,
       "sshNewCfgSSHPort": sshNewCfgSSHPort,
       "sshCurCfgScpApplySave": sshCurCfgScpApplySave,
       "sshNewCfgScpApplySave": sshNewCfgScpApplySave,
       "sshCurCfgStatus": sshCurCfgStatus,
       "sshNewCfgStatus": sshNewCfgStatus,
       "agentStats": agentStats,
       "pktStats": pktStats,
       "pktStatsAllocs": pktStatsAllocs,
       "pktStatsFrees": pktStatsFrees,
       "pktStatsAllocFails": pktStatsAllocFails,
       "pktStatsMediums": pktStatsMediums,
       "pktStatsJumbos": pktStatsJumbos,
       "pktStatsSmalls": pktStatsSmalls,
       "pktStatsMediumsHiWatermark": pktStatsMediumsHiWatermark,
       "pktStatsJumbosHiWatermark": pktStatsJumbosHiWatermark,
       "pktStatsSmallsHiWatermark": pktStatsSmallsHiWatermark,
       "mpCpuStats": mpCpuStats,
       "mpCpuStatsUtil1Second": mpCpuStatsUtil1Second,
       "mpCpuStatsUtil4Seconds": mpCpuStatsUtil4Seconds,
       "mpCpuStatsUtil64Seconds": mpCpuStatsUtil64Seconds,
       "portStats": portStats,
       "portStatsTable": portStatsTable,
       "portStatsTableEntry": portStatsTableEntry,
       "portStatsIndx": portStatsIndx,
       "portStatsPhyIfInOctets": portStatsPhyIfInOctets,
       "portStatsPhyIfInUcastPkts": portStatsPhyIfInUcastPkts,
       "portStatsPhyIfInNUcastPkts": portStatsPhyIfInNUcastPkts,
       "portStatsPhyIfInDiscards": portStatsPhyIfInDiscards,
       "portStatsPhyIfInErrors": portStatsPhyIfInErrors,
       "portStatsPhyIfInUnknownProtos": portStatsPhyIfInUnknownProtos,
       "portStatsPhyIfOutOctets": portStatsPhyIfOutOctets,
       "portStatsPhyIfOutUcastPkts": portStatsPhyIfOutUcastPkts,
       "portStatsPhyIfOutNUcastPkts": portStatsPhyIfOutNUcastPkts,
       "portStatsPhyIfOutDiscards": portStatsPhyIfOutDiscards,
       "portStatsPhyIfOutErrors": portStatsPhyIfOutErrors,
       "portStatsPhyIfOutQLen": portStatsPhyIfOutQLen,
       "portStatsPhyIfInBroadcastPkts": portStatsPhyIfInBroadcastPkts,
       "portStatsPhyIfOutBroadcastPkts": portStatsPhyIfOutBroadcastPkts,
       "portStatsClear": portStatsClear,
       "portStatsPhyIfInMulticastPkts": portStatsPhyIfInMulticastPkts,
       "portStatsPhyIfOutMulticastPkts": portStatsPhyIfOutMulticastPkts,
       "dot1xPortStatsTable": dot1xPortStatsTable,
       "dot1xPortStatsTableEntry": dot1xPortStatsTableEntry,
       "dot1xPortStatsIndx": dot1xPortStatsIndx,
       "eapolFramesRx": eapolFramesRx,
       "eapolFramesTx": eapolFramesTx,
       "eapolStartFramesRx": eapolStartFramesRx,
       "eapolLogoffFramesRx": eapolLogoffFramesRx,
       "eapolRespIdFramesRx": eapolRespIdFramesRx,
       "eapolRespFramesRx": eapolRespFramesRx,
       "eapolReqIdFramesTx": eapolReqIdFramesTx,
       "eapolReqFramesTx": eapolReqFramesTx,
       "invalidEapolFramesRx": invalidEapolFramesRx,
       "eapLengthErrorFramesRx": eapLengthErrorFramesRx,
       "authEntersConnecting": authEntersConnecting,
       "authEapLogoffsWhileConnecting": authEapLogoffsWhileConnecting,
       "authEntersAuthenticating": authEntersAuthenticating,
       "authSuccessesWhileAuthenticating": authSuccessesWhileAuthenticating,
       "authTimeoutsWhileAuthenticating": authTimeoutsWhileAuthenticating,
       "authFailWhileAuthenticating": authFailWhileAuthenticating,
       "authReauthsWhileAuthenticating": authReauthsWhileAuthenticating,
       "authEapStartsWhileAuthenticating": authEapStartsWhileAuthenticating,
       "authEapLogoffWhileAuthenticating": authEapLogoffWhileAuthenticating,
       "authReauthsWhileAuthenticated": authReauthsWhileAuthenticated,
       "authEapStartsWhileAuthenticated": authEapStartsWhileAuthenticated,
       "authEapLogoffWhileAuthenticated": authEapLogoffWhileAuthenticated,
       "backendResponses": backendResponses,
       "backendAccessChallenges": backendAccessChallenges,
       "backendOtherRequestsToSupplicant": backendOtherRequestsToSupplicant,
       "backendNonNakResponsesFromSupplicant": backendNonNakResponsesFromSupplicant,
       "backendAuthSuccesses": backendAuthSuccesses,
       "backendAuthFails": backendAuthFails,
       "lastEapolFrameVersion": lastEapolFrameVersion,
       "lastEapolFrameSource": lastEapolFrameSource,
       "allportsStatsTable": allportsStatsTable,
       "allportsStatsTableEntry": allportsStatsTableEntry,
       "allportsStatsIndx": allportsStatsIndx,
       "allportsStatsDescr": allportsStatsDescr,
       "allportsStatsSpeed": allportsStatsSpeed,
       "allportsStatsPhysAddress": allportsStatsPhysAddress,
       "allportsStatsAdminStatus": allportsStatsAdminStatus,
       "allportsStatsOperStatus": allportsStatsOperStatus,
       "allportsStatsInOctets": allportsStatsInOctets,
       "allportsStatsOutOctets": allportsStatsOutOctets,
       "allportsStatsInPkts": allportsStatsInPkts,
       "allportsStatsOutPkts": allportsStatsOutPkts,
       "allportsStatsInUcast": allportsStatsInUcast,
       "allportsStatsOutUcast": allportsStatsOutUcast,
       "allportsStatsInBcast": allportsStatsInBcast,
       "allportsStatsOutBcast": allportsStatsOutBcast,
       "allportsStatsInMcast": allportsStatsInMcast,
       "allportsStatsOutMcast": allportsStatsOutMcast,
       "allportsStatsInDiscards": allportsStatsInDiscards,
       "allportsStatsOutDiscards": allportsStatsOutDiscards,
       "allportsStatsInErrors": allportsStatsInErrors,
       "allportsStatsOutErrors": allportsStatsOutErrors,
       "allportsStatsInUnknownProtos": allportsStatsInUnknownProtos,
       "allportsStatsOutQLen": allportsStatsOutQLen,
       "allportsStatsipInReceives": allportsStatsipInReceives,
       "allportsStatsipInHeaderErrors": allportsStatsipInHeaderErrors,
       "allportsStatsipInDiscards": allportsStatsipInDiscards,
       "allportsStatsLinkStateChange": allportsStatsLinkStateChange,
       "clearPortsStats": clearPortsStats,
       "agClearStats": agClearStats,
       "snmpClearStats": snmpClearStats,
       "ntpStats": ntpStats,
       "ntpPrimaryServerReqSent": ntpPrimaryServerReqSent,
       "ntpPrimaryServerRespRcvd": ntpPrimaryServerRespRcvd,
       "ntpPrimaryServerUpdates": ntpPrimaryServerUpdates,
       "ntpSecondaryServerReqSent": ntpSecondaryServerReqSent,
       "ntpSecondaryServerRespRcvd": ntpSecondaryServerRespRcvd,
       "ntpSecondaryServerUpdates": ntpSecondaryServerUpdates,
       "ntpLastUpdateServer": ntpLastUpdateServer,
       "ntpLastUpdateTime": ntpLastUpdateTime,
       "ntpClearStats": ntpClearStats,
       "ntpSystemCurrentTime": ntpSystemCurrentTime,
       "aclStats": aclStats,
       "aclStatsTable": aclStatsTable,
       "aclStatsTableEntry": aclStatsTableEntry,
       "aclStatsIndex": aclStatsIndex,
       "aclStatsHits": aclStatsHits,
       "aclClearStats": aclClearStats,
       "agentInfo": agentInfo,
       "hardware": hardware,
       "hwPartNumber": hwPartNumber,
       "hwRevision": hwRevision,
       "hwSerialNumber": hwSerialNumber,
       "portInfo": portInfo,
       "portInfoTable": portInfoTable,
       "portInfoTableEntry": portInfoTableEntry,
       "portInfoIndx": portInfoIndx,
       "portInfoSpeed": portInfoSpeed,
       "portInfoMode": portInfoMode,
       "portInfoFlowCtrl": portInfoFlowCtrl,
       "portInfoLink": portInfoLink,
       "portInfoPhyIfDescr": portInfoPhyIfDescr,
       "portInfoPhyIfType": portInfoPhyIfType,
       "portInfoPhyIfMtu": portInfoPhyIfMtu,
       "portInfoPhyIfPhysAddress": portInfoPhyIfPhysAddress,
       "portInfoPhyIfOperStatus": portInfoPhyIfOperStatus,
       "portInfoPhyIfLastChange": portInfoPhyIfLastChange,
       "agDiff": agDiff,
       "agDiffState": agDiffState,
       "agDiffTableSize": agDiffTableSize,
       "agDiffTable": agDiffTable,
       "agDiffTableEntry": agDiffTableEntry,
       "agDiffIndex": agDiffIndex,
       "agDiffString": agDiffString,
       "agCfgDump": agCfgDump,
       "agCfgDumpState": agCfgDumpState,
       "agCfgDumpTableSize": agCfgDumpTableSize,
       "agCfgDumpTable": agCfgDumpTable,
       "agCfgDumpTableEntry": agCfgDumpTableEntry,
       "agCfgDumpIndex": agCfgDumpIndex,
       "agCfgDumpString": agCfgDumpString,
       "geaportInfo": geaportInfo,
       "geaportInfoTable": geaportInfoTable,
       "geaportInfoTableEntry": geaportInfoTableEntry,
       "geaportInfoLogicalIndex": geaportInfoLogicalIndex,
       "geaportInfoPort": geaportInfoPort,
       "geaportInfoUnit": geaportInfoUnit,
       "ufdInfo": ufdInfo,
       "ufdInfoState": ufdInfoState,
       "ufdInfoLtMStatus": ufdInfoLtMStatus,
       "ufdInfoLtMPorts": ufdInfoLtMPorts,
       "ufdInfoLtMTrunks": ufdInfoLtMTrunks,
       "ufdInfoLtMAdminkey": ufdInfoLtMAdminkey,
       "ufdInfoLtDStatus": ufdInfoLtDStatus,
       "ufdInfoLtDPorts": ufdInfoLtDPorts,
       "ufdInfoLtDTrunks": ufdInfoLtDTrunks,
       "ufdInfoLtDAdminkeyMaxEnt": ufdInfoLtDAdminkeyMaxEnt,
       "ufdInfoLtDAdminkeyTable": ufdInfoLtDAdminkeyTable,
       "ufdInfoLtDAdminkeyTableEntry": ufdInfoLtDAdminkeyTableEntry,
       "ufdInfoLtDAdminkey": ufdInfoLtDAdminkey,
       "sfpInfo": sfpInfo,
       "sfpInfoTable": sfpInfoTable,
       "sfpInfoTableEntry": sfpInfoTableEntry,
       "sfpInfoIndx": sfpInfoIndx,
       "sfpInfoPort": sfpInfoPort,
       "sfpInfoDevice": sfpInfoDevice,
       "sfpInfoTXEnable": sfpInfoTXEnable,
       "sfpInfoRXSignal": sfpInfoRXSignal,
       "sfpInfoTXFault": sfpInfoTXFault,
       "sfpInfoApproved": sfpInfoApproved,
       "agentOper": agentOper,
       "agPortOperTable": agPortOperTable,
       "agPortOperTableEntry": agPortOperTableEntry,
       "portOperIdx": portOperIdx,
       "portOperState": portOperState,
       "portOperRmon": portOperRmon,
       "agNTPOper": agNTPOper,
       "ntpOperSendReq": ntpOperSendReq,
       "portOperDot1xTable": portOperDot1xTable,
       "portOperDot1xTableEntry": portOperDot1xTableEntry,
       "portOperDot1xIndx": portOperDot1xIndx,
       "portOperDot1xReset": portOperDot1xReset,
       "portOperDot1xReauth": portOperDot1xReauth,
       "layer2": layer2,
       "layer2Configs": layer2Configs,
       "vlan": vlan,
       "vlanMaxEnt": vlanMaxEnt,
       "vlanCurCfgTable": vlanCurCfgTable,
       "vlanCurCfgTableEntry": vlanCurCfgTableEntry,
       "vlanCurCfgVlanId": vlanCurCfgVlanId,
       "vlanCurCfgVlanName": vlanCurCfgVlanName,
       "vlanCurCfgPorts": vlanCurCfgPorts,
       "vlanCurCfgState": vlanCurCfgState,
       "vlanCurCfgStg": vlanCurCfgStg,
       "vlanNewCfgTable": vlanNewCfgTable,
       "vlanNewCfgTableEntry": vlanNewCfgTableEntry,
       "vlanNewCfgVlanId": vlanNewCfgVlanId,
       "vlanNewCfgVlanName": vlanNewCfgVlanName,
       "vlanNewCfgPorts": vlanNewCfgPorts,
       "vlanNewCfgState": vlanNewCfgState,
       "vlanNewCfgAddPort": vlanNewCfgAddPort,
       "vlanNewCfgRemovePort": vlanNewCfgRemovePort,
       "vlanNewCfgDelete": vlanNewCfgDelete,
       "vlanNewCfgStg": vlanNewCfgStg,
       "trunkgroup": trunkgroup,
       "trunkGroupTableMaxSize": trunkGroupTableMaxSize,
       "trunkGroupCurCfgTable": trunkGroupCurCfgTable,
       "trunkGroupCurCfgTableEntry": trunkGroupCurCfgTableEntry,
       "trunkGroupCurCfgIndex": trunkGroupCurCfgIndex,
       "trunkGroupCurCfgPorts": trunkGroupCurCfgPorts,
       "trunkGroupCurCfgState": trunkGroupCurCfgState,
       "trunkGroupNewCfgTable": trunkGroupNewCfgTable,
       "trunkGroupNewCfgTableEntry": trunkGroupNewCfgTableEntry,
       "trunkGroupNewCfgIndex": trunkGroupNewCfgIndex,
       "trunkGroupNewCfgPorts": trunkGroupNewCfgPorts,
       "trunkGroupNewCfgAddPort": trunkGroupNewCfgAddPort,
       "trunkGroupNewCfgRemovePort": trunkGroupNewCfgRemovePort,
       "trunkGroupNewCfgState": trunkGroupNewCfgState,
       "trunkGroupNewCfgDelete": trunkGroupNewCfgDelete,
       "stgCfg": stgCfg,
       "stgCurCfgTable": stgCurCfgTable,
       "stgCurCfgTableEntry": stgCurCfgTableEntry,
       "stgCurCfgIndex": stgCurCfgIndex,
       "stgCurCfgState": stgCurCfgState,
       "stgCurCfgPriority": stgCurCfgPriority,
       "stgCurCfgBrgHelloTime": stgCurCfgBrgHelloTime,
       "stgCurCfgBrgForwardDelay": stgCurCfgBrgForwardDelay,
       "stgCurCfgBrgMaxAge": stgCurCfgBrgMaxAge,
       "stgCurCfgVlanBmap": stgCurCfgVlanBmap,
       "stgNewCfgTable": stgNewCfgTable,
       "stgNewCfgTableEntry": stgNewCfgTableEntry,
       "stgNewCfgIndex": stgNewCfgIndex,
       "stgNewCfgState": stgNewCfgState,
       "stgNewCfgDefaultCfg": stgNewCfgDefaultCfg,
       "stgNewCfgAddVlan": stgNewCfgAddVlan,
       "stgNewCfgRemoveVlan": stgNewCfgRemoveVlan,
       "stgNewCfgPriority": stgNewCfgPriority,
       "stgNewCfgBrgHelloTime": stgNewCfgBrgHelloTime,
       "stgNewCfgBrgForwardDelay": stgNewCfgBrgForwardDelay,
       "stgNewCfgBrgMaxAge": stgNewCfgBrgMaxAge,
       "stgNewCfgVlanBmap": stgNewCfgVlanBmap,
       "stgCurCfgPortTable": stgCurCfgPortTable,
       "stgCurCfgPortTableEntry": stgCurCfgPortTableEntry,
       "stgCurCfgStgIndex": stgCurCfgStgIndex,
       "stgCurCfgPortIndex": stgCurCfgPortIndex,
       "stgCurCfgPortState": stgCurCfgPortState,
       "stgCurCfgPortPriority": stgCurCfgPortPriority,
       "stgCurCfgPortPathCost": stgCurCfgPortPathCost,
       "stgCurCfgPortLink": stgCurCfgPortLink,
       "stgCurCfgPortEdge": stgCurCfgPortEdge,
       "stgCurCfgPortFastFwd": stgCurCfgPortFastFwd,
       "stgNewCfgPortTable": stgNewCfgPortTable,
       "stgNewCfgPortTableEntry": stgNewCfgPortTableEntry,
       "stgNewCfgStgIndex": stgNewCfgStgIndex,
       "stgNewCfgPortIndex": stgNewCfgPortIndex,
       "stgNewCfgPortState": stgNewCfgPortState,
       "stgNewCfgPortPriority": stgNewCfgPortPriority,
       "stgNewCfgPortPathCost": stgNewCfgPortPathCost,
       "stgNewCfgPortLink": stgNewCfgPortLink,
       "stgNewCfgPortEdge": stgNewCfgPortEdge,
       "stgNewCfgPortFastFwd": stgNewCfgPortFastFwd,
       "mirroring": mirroring,
       "mirrPortMirr": mirrPortMirr,
       "pmCurCfgPortMirrState": pmCurCfgPortMirrState,
       "pmNewCfgPortMirrState": pmNewCfgPortMirrState,
       "pmCurCfgPortMonitorTable": pmCurCfgPortMonitorTable,
       "pmCurCfgPortMonitorEntry": pmCurCfgPortMonitorEntry,
       "pmCurCfgPmirrMoniPortIndex": pmCurCfgPmirrMoniPortIndex,
       "pmCurCfgPmirrMirrPortIndex": pmCurCfgPmirrMirrPortIndex,
       "pmCurCfgPmirrDirection": pmCurCfgPmirrDirection,
       "pmNewCfgPortMonitorTable": pmNewCfgPortMonitorTable,
       "pmNewCfgPortMonitorEntry": pmNewCfgPortMonitorEntry,
       "pmNewCfgPmirrMoniPortIndex": pmNewCfgPmirrMoniPortIndex,
       "pmNewCfgPmirrMirrPortIndex": pmNewCfgPmirrMirrPortIndex,
       "pmNewCfgPmirrDirection": pmNewCfgPmirrDirection,
       "pmNewCfgPmirrDelete": pmNewCfgPmirrDelete,
       "pmNewCfgPmonDelete": pmNewCfgPmonDelete,
       "mstCfg": mstCfg,
       "mstGeneralCfg": mstGeneralCfg,
       "mstCurCfgState": mstCurCfgState,
       "mstNewCfgState": mstNewCfgState,
       "mstCurCfgRegionName": mstCurCfgRegionName,
       "mstNewCfgRegionName": mstNewCfgRegionName,
       "mstCurCfgRegionVersion": mstCurCfgRegionVersion,
       "mstNewCfgRegionVersion": mstNewCfgRegionVersion,
       "mstCurCfgMaxHopCount": mstCurCfgMaxHopCount,
       "mstNewCfgMaxHopCount": mstNewCfgMaxHopCount,
       "mstCurCfgStpMode": mstCurCfgStpMode,
       "mstNewCfgStpMode": mstNewCfgStpMode,
       "mstCistCfg": mstCistCfg,
       "mstCistDefaultCfg": mstCistDefaultCfg,
       "mstCistBridgeCfg": mstCistBridgeCfg,
       "mstCistCurCfgBridgePriority": mstCistCurCfgBridgePriority,
       "mstCistNewCfgBridgePriority": mstCistNewCfgBridgePriority,
       "mstCistCurCfgBridgeMaxAge": mstCistCurCfgBridgeMaxAge,
       "mstCistNewCfgBridgeMaxAge": mstCistNewCfgBridgeMaxAge,
       "mstCistCurCfgBridgeForwardDelay": mstCistCurCfgBridgeForwardDelay,
       "mstCistNewCfgBridgeForwardDelay": mstCistNewCfgBridgeForwardDelay,
       "mstCistCurCfgVlanBmap": mstCistCurCfgVlanBmap,
       "mstCistNewCfgVlanBmap": mstCistNewCfgVlanBmap,
       "mstCistNewCfgAddVlan": mstCistNewCfgAddVlan,
       "mstCistCurCfgPortTable": mstCistCurCfgPortTable,
       "mstCistCurCfgPortTableEntry": mstCistCurCfgPortTableEntry,
       "mstCistCurCfgPortIndex": mstCistCurCfgPortIndex,
       "mstCistCurCfgPortPriority": mstCistCurCfgPortPriority,
       "mstCistCurCfgPortPathCost": mstCistCurCfgPortPathCost,
       "mstCistCurCfgPortLinkType": mstCistCurCfgPortLinkType,
       "mstCistCurCfgPortEdge": mstCistCurCfgPortEdge,
       "mstCistCurCfgPortStpState": mstCistCurCfgPortStpState,
       "mstCistCurCfgPortHelloTime": mstCistCurCfgPortHelloTime,
       "mstCistNewCfgPortTable": mstCistNewCfgPortTable,
       "mstCistNewCfgPortTableEntry": mstCistNewCfgPortTableEntry,
       "mstCistNewCfgPortIndex": mstCistNewCfgPortIndex,
       "mstCistNewCfgPortPriority": mstCistNewCfgPortPriority,
       "mstCistNewCfgPortPathCost": mstCistNewCfgPortPathCost,
       "mstCistNewCfgPortLinkType": mstCistNewCfgPortLinkType,
       "mstCistNewCfgPortEdge": mstCistNewCfgPortEdge,
       "mstCistNewCfgPortStpState": mstCistNewCfgPortStpState,
       "mstCistNewCfgPortHelloTime": mstCistNewCfgPortHelloTime,
       "lacp": lacp,
       "lacpCurSystemPriority": lacpCurSystemPriority,
       "lacpNewSystemPriority": lacpNewSystemPriority,
       "lacpCurSystemTimeoutTime": lacpCurSystemTimeoutTime,
       "lacpNewSystemTimeoutTime": lacpNewSystemTimeoutTime,
       "lacpCurPortCfgTable": lacpCurPortCfgTable,
       "lacpCurPortCfgTableEntry": lacpCurPortCfgTableEntry,
       "lacpCurPortCfgTableId": lacpCurPortCfgTableId,
       "lacpCurPortState": lacpCurPortState,
       "lacpCurPortActorPortPriority": lacpCurPortActorPortPriority,
       "lacpCurPortActorAdminKey": lacpCurPortActorAdminKey,
       "lacpNewPortCfgTable": lacpNewPortCfgTable,
       "lacpNewPortCfgTableEntry": lacpNewPortCfgTableEntry,
       "lacpNewPortCfgTableId": lacpNewPortCfgTableId,
       "lacpNewPortState": lacpNewPortState,
       "lacpNewPortActorPortPriority": lacpNewPortActorPortPriority,
       "lacpNewPortActorAdminKey": lacpNewPortActorAdminKey,
       "thash": thash,
       "thashL2": thashL2,
       "l2ThashCurCfgSmacState": l2ThashCurCfgSmacState,
       "l2ThashNewCfgSmacState": l2ThashNewCfgSmacState,
       "l2ThashCurCfgDmacState": l2ThashCurCfgDmacState,
       "l2ThashNewCfgDmacState": l2ThashNewCfgDmacState,
       "l2ThashCurCfgSipState": l2ThashCurCfgSipState,
       "l2ThashNewCfgSipState": l2ThashNewCfgSipState,
       "l2ThashCurCfgDipState": l2ThashCurCfgDipState,
       "l2ThashNewCfgDipState": l2ThashNewCfgDipState,
       "l2GeneralCfg": l2GeneralCfg,
       "upfastCurCfgState": upfastCurCfgState,
       "upfastNewCfgState": upfastNewCfgState,
       "updateCurCfgState": updateCurCfgState,
       "updateNewCfgState": updateNewCfgState,
       "pvstCompatibilityCurCfgState": pvstCompatibilityCurCfgState,
       "pvstCompatibilityNewCfgState": pvstCompatibilityNewCfgState,
       "ufd": ufd,
       "ufdGeneralCfg": ufdGeneralCfg,
       "ufdCurCfgState": ufdCurCfgState,
       "ufdNewCfgState": ufdNewCfgState,
       "ufdCurCfgLtMPorts": ufdCurCfgLtMPorts,
       "ufdNewCfgLtMPorts": ufdNewCfgLtMPorts,
       "ufdCurCfgLtMTrunks": ufdCurCfgLtMTrunks,
       "ufdNewCfgLtMTrunks": ufdNewCfgLtMTrunks,
       "ufdCurCfgLtMAdminkey": ufdCurCfgLtMAdminkey,
       "ufdNewCfgLtMAdminkey": ufdNewCfgLtMAdminkey,
       "ufdCurCfgLtDPorts": ufdCurCfgLtDPorts,
       "ufdNewCfgLtDPorts": ufdNewCfgLtDPorts,
       "ufdCurCfgLtDTrunks": ufdCurCfgLtDTrunks,
       "ufdNewCfgLtDTrunks": ufdNewCfgLtDTrunks,
       "ufdLtDAdminkeyMaxEnt": ufdLtDAdminkeyMaxEnt,
       "ufdLtDAdminkeyCurCfgTable": ufdLtDAdminkeyCurCfgTable,
       "ufdLtDAdminkeyCurCfgTableEntry": ufdLtDAdminkeyCurCfgTableEntry,
       "ufdLtDAdminkeyCurCfg": ufdLtDAdminkeyCurCfg,
       "ufdLtDAdminkeyNewCfgTable": ufdLtDAdminkeyNewCfgTable,
       "ufdLtDAdminkeyNewCfgTableEntry": ufdLtDAdminkeyNewCfgTableEntry,
       "ufdLtDAdminkeyNewCfg": ufdLtDAdminkeyNewCfg,
       "ufdNewCfgAddLtMPort": ufdNewCfgAddLtMPort,
       "ufdNewCfgRemoveLtMPort": ufdNewCfgRemoveLtMPort,
       "ufdNewCfgAddLtMTrunk": ufdNewCfgAddLtMTrunk,
       "ufdNewCfgRemoveLtMTrunk": ufdNewCfgRemoveLtMTrunk,
       "ufdNewCfgAddLtMAdminkey": ufdNewCfgAddLtMAdminkey,
       "ufdNewCfgRemoveLtMAdminkey": ufdNewCfgRemoveLtMAdminkey,
       "ufdNewCfgAddLtDPort": ufdNewCfgAddLtDPort,
       "ufdNewCfgRemoveLtDPort": ufdNewCfgRemoveLtDPort,
       "ufdNewCfgAddLtDTrunk": ufdNewCfgAddLtDTrunk,
       "ufdNewCfgRemoveLtDTrunk": ufdNewCfgRemoveLtDTrunk,
       "ufdNewCfgAddLtDAdminkey": ufdNewCfgAddLtDAdminkey,
       "ufdNewCfgRemoveLtDAdminkey": ufdNewCfgRemoveLtDAdminkey,
       "ufdCurCfgGlobalState": ufdCurCfgGlobalState,
       "ufdNewCfgGlobalState": ufdNewCfgGlobalState,
       "dot1x": dot1x,
       "dot1xCurStatus": dot1xCurStatus,
       "dot1xNewStatus": dot1xNewStatus,
       "dot1xCurCfgPortTable": dot1xCurCfgPortTable,
       "dot1xCurCfgPortEntry": dot1xCurCfgPortEntry,
       "dot1xCurCfgPortIndex": dot1xCurCfgPortIndex,
       "dot1xCurCfgPortMode": dot1xCurCfgPortMode,
       "dot1xCurCfgPortQtPeriod": dot1xCurCfgPortQtPeriod,
       "dot1xCurCfgPortTxPeriod": dot1xCurCfgPortTxPeriod,
       "dot1xCurCfgPortSupTmout": dot1xCurCfgPortSupTmout,
       "dot1xCurCfgPortSrvTmout": dot1xCurCfgPortSrvTmout,
       "dot1xCurCfgPortMaxRq": dot1xCurCfgPortMaxRq,
       "dot1xCurCfgPortRaPeriod": dot1xCurCfgPortRaPeriod,
       "dot1xCurCfgPortReAuth": dot1xCurCfgPortReAuth,
       "dot1xNewCfgPortTable": dot1xNewCfgPortTable,
       "dot1xNewCfgPortEntry": dot1xNewCfgPortEntry,
       "dot1xNewCfgPortIndex": dot1xNewCfgPortIndex,
       "dot1xNewCfgPortMode": dot1xNewCfgPortMode,
       "dot1xNewCfgPortQtPeriod": dot1xNewCfgPortQtPeriod,
       "dot1xNewCfgPortTxPeriod": dot1xNewCfgPortTxPeriod,
       "dot1xNewCfgPortSupTmout": dot1xNewCfgPortSupTmout,
       "dot1xNewCfgPortSrvTmout": dot1xNewCfgPortSrvTmout,
       "dot1xNewCfgPortMaxRq": dot1xNewCfgPortMaxRq,
       "dot1xNewCfgPortRaPeriod": dot1xNewCfgPortRaPeriod,
       "dot1xNewCfgPortReAuth": dot1xNewCfgPortReAuth,
       "dot1xNewCfgPortDefault": dot1xNewCfgPortDefault,
       "dot1xNewCfgPortApplyGlobal": dot1xNewCfgPortApplyGlobal,
       "dot1xCurCfgGlobalTable": dot1xCurCfgGlobalTable,
       "dot1xCurCfgGlobalMode": dot1xCurCfgGlobalMode,
       "dot1xCurCfgGlobalQtPeriod": dot1xCurCfgGlobalQtPeriod,
       "dot1xCurCfgGlobalTxPeriod": dot1xCurCfgGlobalTxPeriod,
       "dot1xCurCfgGlobalSupTmout": dot1xCurCfgGlobalSupTmout,
       "dot1xCurCfgGlobalSrvTmout": dot1xCurCfgGlobalSrvTmout,
       "dot1xCurCfgGlobalMaxRq": dot1xCurCfgGlobalMaxRq,
       "dot1xCurCfgGlobalRaPeriod": dot1xCurCfgGlobalRaPeriod,
       "dot1xCurCfgGlobalReAuth": dot1xCurCfgGlobalReAuth,
       "dot1xNewCfgGlobalTable": dot1xNewCfgGlobalTable,
       "dot1xNewCfgGlobalMode": dot1xNewCfgGlobalMode,
       "dot1xNewCfgGlobalQtPeriod": dot1xNewCfgGlobalQtPeriod,
       "dot1xNewCfgGlobalTxPeriod": dot1xNewCfgGlobalTxPeriod,
       "dot1xNewCfgGlobalSupTmout": dot1xNewCfgGlobalSupTmout,
       "dot1xNewCfgGlobalSrvTmout": dot1xNewCfgGlobalSrvTmout,
       "dot1xNewCfgGlobalMaxRq": dot1xNewCfgGlobalMaxRq,
       "dot1xNewCfgGlobalRaPeriod": dot1xNewCfgGlobalRaPeriod,
       "dot1xNewCfgGlobalReAuth": dot1xNewCfgGlobalReAuth,
       "fdb": fdb,
       "fdbGeneralCfg": fdbGeneralCfg,
       "fdbCurCfgAgingTime": fdbCurCfgAgingTime,
       "fdbNewCfgAgingTime": fdbNewCfgAgingTime,
       "fdbNewCfgStaticTable": fdbNewCfgStaticTable,
       "fdbNewCfgStaticEntry": fdbNewCfgStaticEntry,
       "fdbNewCfgEntryIndex": fdbNewCfgEntryIndex,
       "fdbNewCfgAddVlan": fdbNewCfgAddVlan,
       "fdbNewCfgAddPort": fdbNewCfgAddPort,
       "fdbNewCfgAddMac": fdbNewCfgAddMac,
       "fdbNewCfgDelStaticEntry": fdbNewCfgDelStaticEntry,
       "fdbCurCfgStaticTable": fdbCurCfgStaticTable,
       "fdbCurCfgStaticEntry": fdbCurCfgStaticEntry,
       "fdbCurCfgEntryIndex": fdbCurCfgEntryIndex,
       "fdbCurCfgVlan": fdbCurCfgVlan,
       "fdbCurCfgPort": fdbCurCfgPort,
       "fdbCurCfgMac": fdbCurCfgMac,
       "layer2Stats": layer2Stats,
       "fdbStats": fdbStats,
       "fdbStatsCurrent": fdbStatsCurrent,
       "fdbStatsHiwat": fdbStatsHiwat,
       "fdbStatsClear": fdbStatsClear,
       "stpStats": stpStats,
       "stgStatsPortTable": stgStatsPortTable,
       "stgStatsPortTableEntry": stgStatsPortTableEntry,
       "stgStatsStpIndex": stgStatsStpIndex,
       "stgStatsPortIndex": stgStatsPortIndex,
       "stgStatsPortRcvCfgBpdus": stgStatsPortRcvCfgBpdus,
       "stgStatsPortRcvTcnBpdus": stgStatsPortRcvTcnBpdus,
       "stgStatsPortXmtCfgBpdus": stgStatsPortXmtCfgBpdus,
       "stgStatsPortXmtTcnBpdus": stgStatsPortXmtTcnBpdus,
       "lacpStats": lacpStats,
       "lacpStatsTable": lacpStatsTable,
       "lacpStatsTableEntry": lacpStatsTableEntry,
       "lacpStatsIndex": lacpStatsIndex,
       "lacpdusRx": lacpdusRx,
       "markerpdusRx": markerpdusRx,
       "markerresponsepdusRx": markerresponsepdusRx,
       "unknownRx": unknownRx,
       "illegalRx": illegalRx,
       "lacpdusTx": lacpdusTx,
       "markerpdusTx": markerpdusTx,
       "markerresponsepdusTx": markerresponsepdusTx,
       "lacpClearStats": lacpClearStats,
       "ufdStats": ufdStats,
       "ufdNoLtMLinkFailure": ufdNoLtMLinkFailure,
       "ufdNoLtMLinkBlockingState": ufdNoLtMLinkBlockingState,
       "ufdNoLtDAutoDisabled": ufdNoLtDAutoDisabled,
       "ufdClearStats": ufdClearStats,
       "layer2Info": layer2Info,
       "cistInfo": cistInfo,
       "cistGeneralInfo": cistGeneralInfo,
       "cistRoot": cistRoot,
       "cistRootPathCost": cistRootPathCost,
       "cistRootPort": cistRootPort,
       "cistRootMaxAge": cistRootMaxAge,
       "cistRootForwardDelay": cistRootForwardDelay,
       "cistRegionalRoot": cistRegionalRoot,
       "cistRegionalPathCost": cistRegionalPathCost,
       "cistBridgePriority": cistBridgePriority,
       "cistBridgeMaxAge": cistBridgeMaxAge,
       "cistBridgeForwardDelay": cistBridgeForwardDelay,
       "cistMaxHopCount": cistMaxHopCount,
       "mstpDigest": mstpDigest,
       "cistInfoPortTable": cistInfoPortTable,
       "cistInfoPortTableEntry": cistInfoPortTableEntry,
       "cistInfoPortIndex": cistInfoPortIndex,
       "cistInfoPortPriority": cistInfoPortPriority,
       "cistInfoPortPathCost": cistInfoPortPathCost,
       "cistInfoPortState": cistInfoPortState,
       "cistInfoPortRole": cistInfoPortRole,
       "cistInfoPortDesignatedBridge": cistInfoPortDesignatedBridge,
       "cistInfoPortDesignatedPort": cistInfoPortDesignatedPort,
       "cistInfoPortLinkType": cistInfoPortLinkType,
       "cistInfoPortHelloTime": cistInfoPortHelloTime,
       "fdbInfo": fdbInfo,
       "fdbClear": fdbClear,
       "fdbTable": fdbTable,
       "fdbEntry": fdbEntry,
       "fdbMacAddr": fdbMacAddr,
       "fdbVlan": fdbVlan,
       "fdbSrcPort": fdbSrcPort,
       "fdbState": fdbState,
       "fdbRefSps": fdbRefSps,
       "fdbLearnedPort": fdbLearnedPort,
       "fdbSrcTrunk": fdbSrcTrunk,
       "fdbStatus": fdbStatus,
       "stpInfo": stpInfo,
       "stpInfoTable": stpInfoTable,
       "stpInfoTableEntry": stpInfoTableEntry,
       "stpInfoIndex": stpInfoIndex,
       "stpInfoState": stpInfoState,
       "stgInfoVlanBmap": stgInfoVlanBmap,
       "stpInfoTimeSinceTopChange": stpInfoTimeSinceTopChange,
       "stpInfoTopChanges": stpInfoTopChanges,
       "stpInfoDesignatedRoot": stpInfoDesignatedRoot,
       "stpInfoRootCost": stpInfoRootCost,
       "stpInfoRootPort": stpInfoRootPort,
       "stpInfoMaxAge": stpInfoMaxAge,
       "stpInfoHelloTime": stpInfoHelloTime,
       "stpInfoForwardDelay": stpInfoForwardDelay,
       "stpInfoHoldTime": stpInfoHoldTime,
       "stpInfoBrgPriority": stpInfoBrgPriority,
       "stpInfoBrgHelloTime": stpInfoBrgHelloTime,
       "stpInfoBrgForwardDelay": stpInfoBrgForwardDelay,
       "stpInfoBrgMaxAge": stpInfoBrgMaxAge,
       "stpInfoAgingTime": stpInfoAgingTime,
       "stpInfoPortTable": stpInfoPortTable,
       "stpInfoPortTableEntry": stpInfoPortTableEntry,
       "stpInfoPortStpIndex": stpInfoPortStpIndex,
       "stpInfoPortIndex": stpInfoPortIndex,
       "stpInfoPortState": stpInfoPortState,
       "stpInfoPortDesignatedRoot": stpInfoPortDesignatedRoot,
       "stpInfoPortDesignatedCost": stpInfoPortDesignatedCost,
       "stpInfoPortDesignatedBridge": stpInfoPortDesignatedBridge,
       "stpInfoPortDesignatedPort": stpInfoPortDesignatedPort,
       "stpInfoPortForwardTransitions": stpInfoPortForwardTransitions,
       "stpInfoPortPathCost": stpInfoPortPathCost,
       "lacpInfo": lacpInfo,
       "lacpInfoAggrTable": lacpInfoAggrTable,
       "lacpInfoAggrTableEntry": lacpInfoAggrTableEntry,
       "lacpInfoAggrIndex": lacpInfoAggrIndex,
       "lacpInfoAggrId": lacpInfoAggrId,
       "lacpInfoAggrMac": lacpInfoAggrMac,
       "lacpInfoAggrActSysPrio": lacpInfoAggrActSysPrio,
       "lacpInfoAggrActSysId": lacpInfoAggrActSysId,
       "lacpInfoAggrIndivState": lacpInfoAggrIndivState,
       "lacpInfoAggrActAdminKey": lacpInfoAggrActAdminKey,
       "lacpInfoAggrActOperKey": lacpInfoAggrActOperKey,
       "lacpInfoAggrPartSysPrio": lacpInfoAggrPartSysPrio,
       "lacpInfoAggrPartSysId": lacpInfoAggrPartSysId,
       "lacpInfoAggrPartOperKey": lacpInfoAggrPartOperKey,
       "lacpInfoAggrReadyState": lacpInfoAggrReadyState,
       "lacpInfoAggrNumPorts": lacpInfoAggrNumPorts,
       "lacpInfoAggrPorts": lacpInfoAggrPorts,
       "lacpInfoPort": lacpInfoPort,
       "lacpInfoPortGeneralTable": lacpInfoPortGeneralTable,
       "lacpInfoPortGeneralTableEntry": lacpInfoPortGeneralTableEntry,
       "lacpInfoPortGeneralIndex": lacpInfoPortGeneralIndex,
       "lacpInfoPortLacpEna": lacpInfoPortLacpEna,
       "lacpInfoPortAdminEna": lacpInfoPortAdminEna,
       "lacpInfoPortActSysId": lacpInfoPortActSysId,
       "lacpInfoPortActSysPrio": lacpInfoPortActSysPrio,
       "lacpInfoPortActAdminKey": lacpInfoPortActAdminKey,
       "lacpInfoPortActOperKey": lacpInfoPortActOperKey,
       "lacpInfoPortActPortNum": lacpInfoPortActPortNum,
       "lacpInfoPortActPortPrio": lacpInfoPortActPortPrio,
       "lacpInfoPortIndivState": lacpInfoPortIndivState,
       "lacpInfoSelAggrId": lacpInfoSelAggrId,
       "lacpInfoAttAggrId": lacpInfoAttAggrId,
       "lacpInfoPortReadyN": lacpInfoPortReadyN,
       "lacpInfoPortNtt": lacpInfoPortNtt,
       "lacpInfoPortSelected": lacpInfoPortSelected,
       "lacpInfoPortMoved": lacpInfoPortMoved,
       "lacpInfoCollDetState": lacpInfoCollDetState,
       "lacpInfoPortRxState": lacpInfoPortRxState,
       "lacpInfoPortMuxState": lacpInfoPortMuxState,
       "lacpInfoPortPerState": lacpInfoPortPerState,
       "lacpInfoPortAdminTable": lacpInfoPortAdminTable,
       "lacpInfoPortAdminTableEntry": lacpInfoPortAdminTableEntry,
       "lacpInfoPortAdminIndex": lacpInfoPortAdminIndex,
       "lacpInfoPortActAdPortState": lacpInfoPortActAdPortState,
       "lacpInfoPortActAdActiv": lacpInfoPortActAdActiv,
       "lacpInfoPortActAdSync": lacpInfoPortActAdSync,
       "lacpInfoPortActAdDef": lacpInfoPortActAdDef,
       "lacpInfoPortActAdTimeout": lacpInfoPortActAdTimeout,
       "lacpInfoPortActAdColl": lacpInfoPortActAdColl,
       "lacpInfoPortActAdExp": lacpInfoPortActAdExp,
       "lacpInfoPortActAdAggr": lacpInfoPortActAdAggr,
       "lacpInfoPortActAdDist": lacpInfoPortActAdDist,
       "lacpInfoPortOperTable": lacpInfoPortOperTable,
       "lacpInfoPortOperTableEntry": lacpInfoPortOperTableEntry,
       "lacpInfoPortOperIndex": lacpInfoPortOperIndex,
       "lacpInfoPortPartOpSysPrio": lacpInfoPortPartOpSysPrio,
       "lacpInfoPortPartOpSysId": lacpInfoPortPartOpSysId,
       "lacpInfoPortPartOpKey": lacpInfoPortPartOpKey,
       "lacpInfoPortPartOpPortNum": lacpInfoPortPartOpPortNum,
       "lacpInfoPortPartOpPortPrio": lacpInfoPortPartOpPortPrio,
       "lacpInfoPortActOpPortState": lacpInfoPortActOpPortState,
       "lacpInfoPortActOpActiv": lacpInfoPortActOpActiv,
       "lacpInfoPortActOpSync": lacpInfoPortActOpSync,
       "lacpInfoPortActOpDef": lacpInfoPortActOpDef,
       "lacpInfoPortActOpTimeout": lacpInfoPortActOpTimeout,
       "lacpInfoPortActOpColl": lacpInfoPortActOpColl,
       "lacpInfoPortActOpExp": lacpInfoPortActOpExp,
       "lacpInfoPortActOpAggr": lacpInfoPortActOpAggr,
       "lacpInfoPortActOpDist": lacpInfoPortActOpDist,
       "lacpInfoPortPartOpPortState": lacpInfoPortPartOpPortState,
       "lacpInfoPortPartOpActiv": lacpInfoPortPartOpActiv,
       "lacpInfoPortPartOpSync": lacpInfoPortPartOpSync,
       "lacpInfoPortPartOpDef": lacpInfoPortPartOpDef,
       "lacpInfoPortPartOpTimeout": lacpInfoPortPartOpTimeout,
       "lacpInfoPortPartOpColl": lacpInfoPortPartOpColl,
       "lacpInfoPortPartOpExp": lacpInfoPortPartOpExp,
       "lacpInfoPortPartOpAggr": lacpInfoPortPartOpAggr,
       "lacpInfoPortPartOpDist": lacpInfoPortPartOpDist,
       "dot1xInfo": dot1xInfo,
       "dot1xInfoPortTable": dot1xInfoPortTable,
       "dot1xInfoPortEntry": dot1xInfoPortEntry,
       "dot1xInfoPortIndex": dot1xInfoPortIndex,
       "dot1xInfoPortAuthMode": dot1xInfoPortAuthMode,
       "dot1xInfoPortAuthStatus": dot1xInfoPortAuthStatus,
       "dot1xInfoPortCtrlDir": dot1xInfoPortCtrlDir,
       "dot1xInfoPortAuthPAEState": dot1xInfoPortAuthPAEState,
       "dot1xInfoPortBackAuthState": dot1xInfoPortBackAuthState,
       "dot1xSystemInfo": dot1xSystemInfo,
       "dot1xSystemCapability": dot1xSystemCapability,
       "dot1xSystemStatus": dot1xSystemStatus,
       "dot1xSystemProtoVersion": dot1xSystemProtoVersion,
       "dot1pInfo": dot1pInfo,
       "dot1pInfoPriorityCOSTable": dot1pInfoPriorityCOSTable,
       "dot1pInfoPriorityCOSEntry": dot1pInfoPriorityCOSEntry,
       "dot1pInfoPriorityIndex": dot1pInfoPriorityIndex,
       "dot1pInfoPriorityCOSQueue": dot1pInfoPriorityCOSQueue,
       "dot1pInfoPriorityCOSWeight": dot1pInfoPriorityCOSWeight,
       "dot1pInfoPortTable": dot1pInfoPortTable,
       "dot1pInfoPortEntry": dot1pInfoPortEntry,
       "dot1pInfoPortIndex": dot1pInfoPortIndex,
       "dot1pInfoPortPriority": dot1pInfoPortPriority,
       "dot1pInfoPortCOSq": dot1pInfoPortCOSq,
       "dot1pInfoPortWeight": dot1pInfoPortWeight,
       "genInfo": genInfo,
       "generalInfoStpUplinkFast": generalInfoStpUplinkFast,
       "generalInfoUplinkFastRate": generalInfoUplinkFastRate,
       "vlanInfo": vlanInfo,
       "vlanInfoTable": vlanInfoTable,
       "vlanInfoTableEntry": vlanInfoTableEntry,
       "vlanInfoId": vlanInfoId,
       "vlanInfoName": vlanInfoName,
       "vlanInfoStatus": vlanInfoStatus,
       "vlanInfoPorts": vlanInfoPorts,
       "trunkGroupInfo": trunkGroupInfo,
       "trunkGroupInfoTable": trunkGroupInfoTable,
       "trunkGroupInfoTableEntry": trunkGroupInfoTableEntry,
       "trunkGroupInfoIndex": trunkGroupInfoIndex,
       "trunkGroupInfoState": trunkGroupInfoState,
       "trunkGroupInfoPorts": trunkGroupInfoPorts,
       "trunkGroupInfoProtocol": trunkGroupInfoProtocol,
       "trunkGroupInfoStgs": trunkGroupInfoStgs,
       "trunkGroupInfoPortTable": trunkGroupInfoPortTable,
       "trunkGroupInfoPortTableEntry": trunkGroupInfoPortTableEntry,
       "trunkGroupInfoPortTrunkId": trunkGroupInfoPortTrunkId,
       "trunkGroupInfoPortPortId": trunkGroupInfoPortPortId,
       "trunkGroupInfoPortStatus": trunkGroupInfoPortStatus,
       "layer2Oper": layer2Oper,
       "layer3": layer3,
       "layer3Configs": layer3Configs,
       "ipInterfaceCfg": ipInterfaceCfg,
       "ipInterfaceTableMax": ipInterfaceTableMax,
       "ipCurCfgIntfTable": ipCurCfgIntfTable,
       "ipCurCfgIntfEntry": ipCurCfgIntfEntry,
       "ipCurCfgIntfIndex": ipCurCfgIntfIndex,
       "ipCurCfgIntfAddr": ipCurCfgIntfAddr,
       "ipCurCfgIntfMask": ipCurCfgIntfMask,
       "ipCurCfgIntfBroadcast": ipCurCfgIntfBroadcast,
       "ipCurCfgIntfVlan": ipCurCfgIntfVlan,
       "ipCurCfgIntfState": ipCurCfgIntfState,
       "ipCurCfgIntfBootpRelay": ipCurCfgIntfBootpRelay,
       "ipNewCfgIntfTable": ipNewCfgIntfTable,
       "ipNewCfgIntfEntry": ipNewCfgIntfEntry,
       "ipNewCfgIntfIndex": ipNewCfgIntfIndex,
       "ipNewCfgIntfAddr": ipNewCfgIntfAddr,
       "ipNewCfgIntfMask": ipNewCfgIntfMask,
       "ipNewCfgIntfVlan": ipNewCfgIntfVlan,
       "ipNewCfgIntfState": ipNewCfgIntfState,
       "ipNewCfgIntfDelete": ipNewCfgIntfDelete,
       "ipNewCfgIntfBootpRelay": ipNewCfgIntfBootpRelay,
       "ipGatewayCfg": ipGatewayCfg,
       "ipGatewayTableMax": ipGatewayTableMax,
       "ipCurCfgGwTable": ipCurCfgGwTable,
       "ipCurCfgGwEntry": ipCurCfgGwEntry,
       "ipCurCfgGwIndex": ipCurCfgGwIndex,
       "ipCurCfgGwAddr": ipCurCfgGwAddr,
       "ipCurCfgGwInterval": ipCurCfgGwInterval,
       "ipCurCfgGwRetry": ipCurCfgGwRetry,
       "ipCurCfgGwState": ipCurCfgGwState,
       "ipCurCfgGwArp": ipCurCfgGwArp,
       "ipNewCfgGwTable": ipNewCfgGwTable,
       "ipNewCfgGwEntry": ipNewCfgGwEntry,
       "ipNewCfgGwIndex": ipNewCfgGwIndex,
       "ipNewCfgGwAddr": ipNewCfgGwAddr,
       "ipNewCfgGwInterval": ipNewCfgGwInterval,
       "ipNewCfgGwRetry": ipNewCfgGwRetry,
       "ipNewCfgGwState": ipNewCfgGwState,
       "ipNewCfgGwDelete": ipNewCfgGwDelete,
       "ipNewCfgGwArp": ipNewCfgGwArp,
       "ipStaticRouteCfg": ipStaticRouteCfg,
       "ipStaticRouteTableMaxSize": ipStaticRouteTableMaxSize,
       "ipCurCfgStaticRouteTable": ipCurCfgStaticRouteTable,
       "ipCurCfgStaticRouteEntry": ipCurCfgStaticRouteEntry,
       "ipCurCfgStaticRouteIndx": ipCurCfgStaticRouteIndx,
       "ipCurCfgStaticRouteDestIp": ipCurCfgStaticRouteDestIp,
       "ipCurCfgStaticRouteMask": ipCurCfgStaticRouteMask,
       "ipCurCfgStaticRouteGateway": ipCurCfgStaticRouteGateway,
       "ipCurCfgStaticRouteInterface": ipCurCfgStaticRouteInterface,
       "ipNewCfgStaticRouteTable": ipNewCfgStaticRouteTable,
       "ipNewCfgStaticRouteEntry": ipNewCfgStaticRouteEntry,
       "ipNewCfgStaticRouteIndx": ipNewCfgStaticRouteIndx,
       "ipNewCfgStaticRouteDestIp": ipNewCfgStaticRouteDestIp,
       "ipNewCfgStaticRouteMask": ipNewCfgStaticRouteMask,
       "ipNewCfgStaticRouteGateway": ipNewCfgStaticRouteGateway,
       "ipNewCfgStaticRouteAction": ipNewCfgStaticRouteAction,
       "ipNewCfgStaticRouteInterface": ipNewCfgStaticRouteInterface,
       "ipStaticRouteClearAllByDestIp": ipStaticRouteClearAllByDestIp,
       "ipStaticRouteClearAllByGatewayIp": ipStaticRouteClearAllByGatewayIp,
       "ipStaticRouteClearAllByInterface": ipStaticRouteClearAllByInterface,
       "ipStaticRouteClearAll": ipStaticRouteClearAll,
       "ipForwardCfg": ipForwardCfg,
       "ipFwdGeneralCfg": ipFwdGeneralCfg,
       "ipFwdCurCfgState": ipFwdCurCfgState,
       "ipFwdNewCfgState": ipFwdNewCfgState,
       "ipFwdCurCfgDirectedBcast": ipFwdCurCfgDirectedBcast,
       "ipFwdNewCfgDirectedBcast": ipFwdNewCfgDirectedBcast,
       "vrrpCfg": vrrpCfg,
       "vrrpGeneral": vrrpGeneral,
       "vrrpCurCfgGenState": vrrpCurCfgGenState,
       "vrrpNewCfgGenState": vrrpNewCfgGenState,
       "vrrpCurCfgGenTckVirtRtrInc": vrrpCurCfgGenTckVirtRtrInc,
       "vrrpNewCfgGenTckVirtRtrInc": vrrpNewCfgGenTckVirtRtrInc,
       "vrrpCurCfgGenTckIpIntfInc": vrrpCurCfgGenTckIpIntfInc,
       "vrrpNewCfgGenTckIpIntfInc": vrrpNewCfgGenTckIpIntfInc,
       "vrrpCurCfgGenTckVlanPortInc": vrrpCurCfgGenTckVlanPortInc,
       "vrrpNewCfgGenTckVlanPortInc": vrrpNewCfgGenTckVlanPortInc,
       "vrrpVirtRtrTableMaxSize": vrrpVirtRtrTableMaxSize,
       "vrrpCurCfgVirtRtrTable": vrrpCurCfgVirtRtrTable,
       "vrrpCurCfgVirtRtrTableEntry": vrrpCurCfgVirtRtrTableEntry,
       "vrrpCurCfgVirtRtrIndx": vrrpCurCfgVirtRtrIndx,
       "vrrpCurCfgVirtRtrID": vrrpCurCfgVirtRtrID,
       "vrrpCurCfgVirtRtrAddr": vrrpCurCfgVirtRtrAddr,
       "vrrpCurCfgVirtRtrIfIndex": vrrpCurCfgVirtRtrIfIndex,
       "vrrpCurCfgVirtRtrInterval": vrrpCurCfgVirtRtrInterval,
       "vrrpCurCfgVirtRtrPriority": vrrpCurCfgVirtRtrPriority,
       "vrrpCurCfgVirtRtrPreempt": vrrpCurCfgVirtRtrPreempt,
       "vrrpCurCfgVirtRtrState": vrrpCurCfgVirtRtrState,
       "vrrpCurCfgVirtRtrTckVirtRtr": vrrpCurCfgVirtRtrTckVirtRtr,
       "vrrpCurCfgVirtRtrTckIpIntf": vrrpCurCfgVirtRtrTckIpIntf,
       "vrrpCurCfgVirtRtrTckVlanPort": vrrpCurCfgVirtRtrTckVlanPort,
       "vrrpNewCfgVirtRtrTable": vrrpNewCfgVirtRtrTable,
       "vrrpNewCfgVirtRtrTableEntry": vrrpNewCfgVirtRtrTableEntry,
       "vrrpNewCfgVirtRtrIndx": vrrpNewCfgVirtRtrIndx,
       "vrrpNewCfgVirtRtrID": vrrpNewCfgVirtRtrID,
       "vrrpNewCfgVirtRtrAddr": vrrpNewCfgVirtRtrAddr,
       "vrrpNewCfgVirtRtrIfIndex": vrrpNewCfgVirtRtrIfIndex,
       "vrrpNewCfgVirtRtrInterval": vrrpNewCfgVirtRtrInterval,
       "vrrpNewCfgVirtRtrPriority": vrrpNewCfgVirtRtrPriority,
       "vrrpNewCfgVirtRtrPreempt": vrrpNewCfgVirtRtrPreempt,
       "vrrpNewCfgVirtRtrState": vrrpNewCfgVirtRtrState,
       "vrrpNewCfgVirtRtrDelete": vrrpNewCfgVirtRtrDelete,
       "vrrpNewCfgVirtRtrTckVirtRtr": vrrpNewCfgVirtRtrTckVirtRtr,
       "vrrpNewCfgVirtRtrTckIpIntf": vrrpNewCfgVirtRtrTckIpIntf,
       "vrrpNewCfgVirtRtrTckVlanPort": vrrpNewCfgVirtRtrTckVlanPort,
       "vrrpIfTableMaxSize": vrrpIfTableMaxSize,
       "vrrpCurCfgIfTable": vrrpCurCfgIfTable,
       "vrrpCurCfgIfTableEntry": vrrpCurCfgIfTableEntry,
       "vrrpCurCfgIfIndx": vrrpCurCfgIfIndx,
       "vrrpCurCfgIfAuthType": vrrpCurCfgIfAuthType,
       "vrrpCurCfgIfPasswd": vrrpCurCfgIfPasswd,
       "vrrpNewCfgIfTable": vrrpNewCfgIfTable,
       "vrrpNewCfgIfTableEntry": vrrpNewCfgIfTableEntry,
       "vrrpNewCfgIfIndx": vrrpNewCfgIfIndx,
       "vrrpNewCfgIfAuthType": vrrpNewCfgIfAuthType,
       "vrrpNewCfgIfPasswd": vrrpNewCfgIfPasswd,
       "vrrpNewCfgIfDelete": vrrpNewCfgIfDelete,
       "vrrpVirtRtrGrpTableMaxSize": vrrpVirtRtrGrpTableMaxSize,
       "vrrpCurCfgVirtRtrGrpTable": vrrpCurCfgVirtRtrGrpTable,
       "vrrpCurCfgVirtRtrGrpTableEntry": vrrpCurCfgVirtRtrGrpTableEntry,
       "vrrpCurCfgVirtRtrGrpIndx": vrrpCurCfgVirtRtrGrpIndx,
       "vrrpCurCfgVirtRtrGrpID": vrrpCurCfgVirtRtrGrpID,
       "vrrpCurCfgVirtRtrGrpIfIndex": vrrpCurCfgVirtRtrGrpIfIndex,
       "vrrpCurCfgVirtRtrGrpInterval": vrrpCurCfgVirtRtrGrpInterval,
       "vrrpCurCfgVirtRtrGrpPriority": vrrpCurCfgVirtRtrGrpPriority,
       "vrrpCurCfgVirtRtrGrpPreempt": vrrpCurCfgVirtRtrGrpPreempt,
       "vrrpCurCfgVirtRtrGrpState": vrrpCurCfgVirtRtrGrpState,
       "vrrpCurCfgVirtRtrGrpTckIpIntf": vrrpCurCfgVirtRtrGrpTckIpIntf,
       "vrrpCurCfgVirtRtrGrpTckVlanPort": vrrpCurCfgVirtRtrGrpTckVlanPort,
       "vrrpNewCfgVirtRtrGrpTable": vrrpNewCfgVirtRtrGrpTable,
       "vrrpNewCfgVirtRtrGrpTableEntry": vrrpNewCfgVirtRtrGrpTableEntry,
       "vrrpNewCfgVirtRtrGrpIndx": vrrpNewCfgVirtRtrGrpIndx,
       "vrrpNewCfgVirtRtrGrpID": vrrpNewCfgVirtRtrGrpID,
       "vrrpNewCfgVirtRtrGrpIfIndex": vrrpNewCfgVirtRtrGrpIfIndex,
       "vrrpNewCfgVirtRtrGrpInterval": vrrpNewCfgVirtRtrGrpInterval,
       "vrrpNewCfgVirtRtrGrpPriority": vrrpNewCfgVirtRtrGrpPriority,
       "vrrpNewCfgVirtRtrGrpPreempt": vrrpNewCfgVirtRtrGrpPreempt,
       "vrrpNewCfgVirtRtrGrpState": vrrpNewCfgVirtRtrGrpState,
       "vrrpNewCfgVirtRtrGrpDelete": vrrpNewCfgVirtRtrGrpDelete,
       "vrrpNewCfgVirtRtrGrpTckIpIntf": vrrpNewCfgVirtRtrGrpTckIpIntf,
       "vrrpNewCfgVirtRtrGrpTckVlanPort": vrrpNewCfgVirtRtrGrpTckVlanPort,
       "arpCfg": arpCfg,
       "arpCurCfgReARPPeriod": arpCurCfgReARPPeriod,
       "arpNewCfgReARPPeriod": arpNewCfgReARPPeriod,
       "ipStaticArpTableMaxSize": ipStaticArpTableMaxSize,
       "ipCurCfgStaticArpTable": ipCurCfgStaticArpTable,
       "ipCurCfgStaticArpEntry": ipCurCfgStaticArpEntry,
       "ipCurCfgStaticArpIndx": ipCurCfgStaticArpIndx,
       "ipCurCfgStaticArpIp": ipCurCfgStaticArpIp,
       "ipCurCfgStaticArpMAC": ipCurCfgStaticArpMAC,
       "ipCurCfgStaticArpVlan": ipCurCfgStaticArpVlan,
       "ipCurCfgStaticArpPort": ipCurCfgStaticArpPort,
       "ipNewCfgStaticArpTable": ipNewCfgStaticArpTable,
       "ipNewCfgStaticArpEntry": ipNewCfgStaticArpEntry,
       "ipNewCfgStaticArpIndx": ipNewCfgStaticArpIndx,
       "ipNewCfgStaticArpIp": ipNewCfgStaticArpIp,
       "ipNewCfgStaticArpMAC": ipNewCfgStaticArpMAC,
       "ipNewCfgStaticArpVlan": ipNewCfgStaticArpVlan,
       "ipNewCfgStaticArpPort": ipNewCfgStaticArpPort,
       "ipNewCfgStaticArpAction": ipNewCfgStaticArpAction,
       "ipBootpCfg": ipBootpCfg,
       "ipCurCfgBootpAddr": ipCurCfgBootpAddr,
       "ipNewCfgBootpAddr": ipNewCfgBootpAddr,
       "ipCurCfgBootpAddr2": ipCurCfgBootpAddr2,
       "ipNewCfgBootpAddr2": ipNewCfgBootpAddr2,
       "ipCurCfgBootpState": ipCurCfgBootpState,
       "ipNewCfgBootpState": ipNewCfgBootpState,
       "dnsCfg": dnsCfg,
       "dnsCurCfgPrimaryIpAddr": dnsCurCfgPrimaryIpAddr,
       "dnsNewCfgPrimaryIpAddr": dnsNewCfgPrimaryIpAddr,
       "dnsCurCfgSecondaryIpAddr": dnsCurCfgSecondaryIpAddr,
       "dnsNewCfgSecondaryIpAddr": dnsNewCfgSecondaryIpAddr,
       "dnsCurCfgDomainName": dnsCurCfgDomainName,
       "dnsNewCfgDomainName": dnsNewCfgDomainName,
       "ipNwfCfg": ipNwfCfg,
       "ipNwfTableMax": ipNwfTableMax,
       "ipCurCfgNwfTable": ipCurCfgNwfTable,
       "ipCurCfgNwfEntry": ipCurCfgNwfEntry,
       "ipCurCfgNwfIndex": ipCurCfgNwfIndex,
       "ipCurCfgNwfAddr": ipCurCfgNwfAddr,
       "ipCurCfgNwfMask": ipCurCfgNwfMask,
       "ipCurCfgNwfState": ipCurCfgNwfState,
       "ipNewCfgNwfTable": ipNewCfgNwfTable,
       "ipNewCfgNwfEntry": ipNewCfgNwfEntry,
       "ipNewCfgNwfIndex": ipNewCfgNwfIndex,
       "ipNewCfgNwfAddr": ipNewCfgNwfAddr,
       "ipNewCfgNwfMask": ipNewCfgNwfMask,
       "ipNewCfgNwfState": ipNewCfgNwfState,
       "ipNewCfgNwfDelete": ipNewCfgNwfDelete,
       "ipRmapCfg": ipRmapCfg,
       "ipRmapTableMax": ipRmapTableMax,
       "ipCurCfgRmapTable": ipCurCfgRmapTable,
       "ipCurCfgRmapEntry": ipCurCfgRmapEntry,
       "ipCurCfgRmapIndex": ipCurCfgRmapIndex,
       "ipCurCfgRmapMetric": ipCurCfgRmapMetric,
       "ipCurCfgRmapPrec": ipCurCfgRmapPrec,
       "ipCurCfgRmapState": ipCurCfgRmapState,
       "ipCurCfgRmapMetricType": ipCurCfgRmapMetricType,
       "ipNewCfgRmapTable": ipNewCfgRmapTable,
       "ipNewCfgRmapEntry": ipNewCfgRmapEntry,
       "ipNewCfgRmapIndex": ipNewCfgRmapIndex,
       "ipNewCfgRmapMetric": ipNewCfgRmapMetric,
       "ipNewCfgRmapPrec": ipNewCfgRmapPrec,
       "ipNewCfgRmapState": ipNewCfgRmapState,
       "ipNewCfgRmapMetricType": ipNewCfgRmapMetricType,
       "ipNewCfgRmapDelete": ipNewCfgRmapDelete,
       "ipAlistTableMax": ipAlistTableMax,
       "ipCurCfgAlistTable": ipCurCfgAlistTable,
       "ipCurCfgAlistEntry": ipCurCfgAlistEntry,
       "ipCurCfgAlistRmapIndex": ipCurCfgAlistRmapIndex,
       "ipCurCfgAlistIndex": ipCurCfgAlistIndex,
       "ipCurCfgAlistNwf": ipCurCfgAlistNwf,
       "ipCurCfgAlistMetric": ipCurCfgAlistMetric,
       "ipCurCfgAlistAction": ipCurCfgAlistAction,
       "ipCurCfgAlistState": ipCurCfgAlistState,
       "ipNewCfgAlistTable": ipNewCfgAlistTable,
       "ipNewCfgAlistEntry": ipNewCfgAlistEntry,
       "ipNewCfgAlistRmapIndex": ipNewCfgAlistRmapIndex,
       "ipNewCfgAlistIndex": ipNewCfgAlistIndex,
       "ipNewCfgAlistNwf": ipNewCfgAlistNwf,
       "ipNewCfgAlistMetric": ipNewCfgAlistMetric,
       "ipNewCfgAlistAction": ipNewCfgAlistAction,
       "ipNewCfgAlistState": ipNewCfgAlistState,
       "ipNewCfgAlistDelete": ipNewCfgAlistDelete,
       "ospfCfg": ospfCfg,
       "ospfGeneral": ospfGeneral,
       "ospfCurCfgDefaultRouteMetric": ospfCurCfgDefaultRouteMetric,
       "ospfNewCfgDefaultRouteMetric": ospfNewCfgDefaultRouteMetric,
       "ospfCurCfgDefaultRouteMetricType": ospfCurCfgDefaultRouteMetricType,
       "ospfNewCfgDefaultRouteMetricType": ospfNewCfgDefaultRouteMetricType,
       "ospfIntfTableMaxSize": ospfIntfTableMaxSize,
       "ospfAreaTableMaxSize": ospfAreaTableMaxSize,
       "ospfRangeTableMaxSize": ospfRangeTableMaxSize,
       "ospfVirtIntfTableMaxSize": ospfVirtIntfTableMaxSize,
       "ospfHostTableMaxSize": ospfHostTableMaxSize,
       "ospfCurCfgState": ospfCurCfgState,
       "ospfNewCfgState": ospfNewCfgState,
       "ospfCurCfgLSDB": ospfCurCfgLSDB,
       "ospfNewCfgLSDB": ospfNewCfgLSDB,
       "ospfCurCfgAreaTable": ospfCurCfgAreaTable,
       "ospfCurCfgAreaEntry": ospfCurCfgAreaEntry,
       "ospfCurCfgAreaIndex": ospfCurCfgAreaIndex,
       "ospfCurCfgAreaId": ospfCurCfgAreaId,
       "ospfCurCfgAreaSpfInterval": ospfCurCfgAreaSpfInterval,
       "ospfCurCfgAreaAuthType": ospfCurCfgAreaAuthType,
       "ospfCurCfgAreaType": ospfCurCfgAreaType,
       "ospfCurCfgAreaMetric": ospfCurCfgAreaMetric,
       "ospfCurCfgAreaStatus": ospfCurCfgAreaStatus,
       "ospfNewCfgAreaTable": ospfNewCfgAreaTable,
       "ospfNewCfgAreaEntry": ospfNewCfgAreaEntry,
       "ospfNewCfgAreaIndex": ospfNewCfgAreaIndex,
       "ospfNewCfgAreaId": ospfNewCfgAreaId,
       "ospfNewCfgAreaSpfInterval": ospfNewCfgAreaSpfInterval,
       "ospfNewCfgAreaAuthType": ospfNewCfgAreaAuthType,
       "ospfNewCfgAreaType": ospfNewCfgAreaType,
       "ospfNewCfgAreaMetric": ospfNewCfgAreaMetric,
       "ospfNewCfgAreaStatus": ospfNewCfgAreaStatus,
       "ospfNewCfgAreaDelete": ospfNewCfgAreaDelete,
       "ospfRouteRedistribution": ospfRouteRedistribution,
       "ospfRedistributeStatic": ospfRedistributeStatic,
       "ospfCurCfgStaticMetric": ospfCurCfgStaticMetric,
       "ospfNewCfgStaticMetric": ospfNewCfgStaticMetric,
       "ospfCurCfgStaticMetricType": ospfCurCfgStaticMetricType,
       "ospfNewCfgStaticMetricType": ospfNewCfgStaticMetricType,
       "ospfCurCfgStaticOutRmapList": ospfCurCfgStaticOutRmapList,
       "ospfNewCfgStaticOutRmapList": ospfNewCfgStaticOutRmapList,
       "ospfNewCfgStaticAddOutRmap": ospfNewCfgStaticAddOutRmap,
       "ospfNewCfgStaticRemoveOutRmap": ospfNewCfgStaticRemoveOutRmap,
       "ospfRedistributeFixed": ospfRedistributeFixed,
       "ospfCurCfgFixedMetric": ospfCurCfgFixedMetric,
       "ospfNewCfgFixedMetric": ospfNewCfgFixedMetric,
       "ospfCurCfgFixedMetricType": ospfCurCfgFixedMetricType,
       "ospfNewCfgFixedMetricType": ospfNewCfgFixedMetricType,
       "ospfCurCfgFixedOutRmapList": ospfCurCfgFixedOutRmapList,
       "ospfNewCfgFixedOutRmapList": ospfNewCfgFixedOutRmapList,
       "ospfNewCfgFixedAddOutRmap": ospfNewCfgFixedAddOutRmap,
       "ospfNewCfgFixedRemoveOutRmap": ospfNewCfgFixedRemoveOutRmap,
       "ospfRedistributeRip": ospfRedistributeRip,
       "ospfCurCfgRipMetric": ospfCurCfgRipMetric,
       "ospfNewCfgRipMetric": ospfNewCfgRipMetric,
       "ospfCurCfgRipMetricType": ospfCurCfgRipMetricType,
       "ospfNewCfgRipMetricType": ospfNewCfgRipMetricType,
       "ospfCurCfgRipOutRmapList": ospfCurCfgRipOutRmapList,
       "ospfNewCfgRipOutRmapList": ospfNewCfgRipOutRmapList,
       "ospfNewCfgRipAddOutRmap": ospfNewCfgRipAddOutRmap,
       "ospfNewCfgRipRemoveOutRmap": ospfNewCfgRipRemoveOutRmap,
       "ospfCurCfgMdkeyTable": ospfCurCfgMdkeyTable,
       "ospfCurCfgMdkeyEntry": ospfCurCfgMdkeyEntry,
       "ospfCurCfgMdkeyIndex": ospfCurCfgMdkeyIndex,
       "ospfCurCfgMdkeyKey": ospfCurCfgMdkeyKey,
       "ospfNewCfgMdkeyTable": ospfNewCfgMdkeyTable,
       "ospfNewCfgMdkeyEntry": ospfNewCfgMdkeyEntry,
       "ospfNewCfgMdkeyIndex": ospfNewCfgMdkeyIndex,
       "ospfNewCfgMdkeyKey": ospfNewCfgMdkeyKey,
       "ospfNewCfgMdkeyDelete": ospfNewCfgMdkeyDelete,
       "ospfCurCfgIntfTable": ospfCurCfgIntfTable,
       "ospfCurCfgIntfEntry": ospfCurCfgIntfEntry,
       "ospfCurCfgIntfIndex": ospfCurCfgIntfIndex,
       "ospfCurCfgIntfId": ospfCurCfgIntfId,
       "ospfCurCfgIntfArea": ospfCurCfgIntfArea,
       "ospfCurCfgIntfMdkey": ospfCurCfgIntfMdkey,
       "ospfCurCfgIntfCost": ospfCurCfgIntfCost,
       "ospfCurCfgIntfPrio": ospfCurCfgIntfPrio,
       "ospfCurCfgIntfHello": ospfCurCfgIntfHello,
       "ospfCurCfgIntfDead": ospfCurCfgIntfDead,
       "ospfCurCfgIntfTrans": ospfCurCfgIntfTrans,
       "ospfCurCfgIntfRetra": ospfCurCfgIntfRetra,
       "ospfCurCfgIntfAuthKey": ospfCurCfgIntfAuthKey,
       "ospfCurCfgIntfStatus": ospfCurCfgIntfStatus,
       "ospfNewCfgIntfTable": ospfNewCfgIntfTable,
       "ospfNewCfgIntfEntry": ospfNewCfgIntfEntry,
       "ospfNewCfgIntfIndex": ospfNewCfgIntfIndex,
       "ospfNewCfgIntfId": ospfNewCfgIntfId,
       "ospfNewCfgIntfArea": ospfNewCfgIntfArea,
       "ospfNewCfgIntfMdkey": ospfNewCfgIntfMdkey,
       "ospfNewCfgIntfCost": ospfNewCfgIntfCost,
       "ospfNewCfgIntfPrio": ospfNewCfgIntfPrio,
       "ospfNewCfgIntfHello": ospfNewCfgIntfHello,
       "ospfNewCfgIntfDead": ospfNewCfgIntfDead,
       "ospfNewCfgIntfTrans": ospfNewCfgIntfTrans,
       "ospfNewCfgIntfRetra": ospfNewCfgIntfRetra,
       "ospfNewCfgIntfAuthKey": ospfNewCfgIntfAuthKey,
       "ospfNewCfgIntfStatus": ospfNewCfgIntfStatus,
       "ospfNewCfgIntfDelete": ospfNewCfgIntfDelete,
       "ospfCurCfgVirtIntfTable": ospfCurCfgVirtIntfTable,
       "ospfCurCfgVirtIntfEntry": ospfCurCfgVirtIntfEntry,
       "ospfCurCfgVirtIntfIndex": ospfCurCfgVirtIntfIndex,
       "ospfCurCfgVirtIntfAreaId": ospfCurCfgVirtIntfAreaId,
       "ospfCurCfgVirtIntfNbr": ospfCurCfgVirtIntfNbr,
       "ospfCurCfgVirtIntfMdkey": ospfCurCfgVirtIntfMdkey,
       "ospfCurCfgVirtIntfHello": ospfCurCfgVirtIntfHello,
       "ospfCurCfgVirtIntfDead": ospfCurCfgVirtIntfDead,
       "ospfCurCfgVirtIntfTrans": ospfCurCfgVirtIntfTrans,
       "ospfCurCfgVirtIntfRetra": ospfCurCfgVirtIntfRetra,
       "ospfCurCfgVirtIntfAuthKey": ospfCurCfgVirtIntfAuthKey,
       "ospfCurCfgVirtIntfStatus": ospfCurCfgVirtIntfStatus,
       "ospfNewCfgVirtIntfTable": ospfNewCfgVirtIntfTable,
       "ospfNewCfgVirtIntfEntry": ospfNewCfgVirtIntfEntry,
       "ospfNewCfgVirtIntfIndex": ospfNewCfgVirtIntfIndex,
       "ospfNewCfgVirtIntfAreaId": ospfNewCfgVirtIntfAreaId,
       "ospfNewCfgVirtIntfNbr": ospfNewCfgVirtIntfNbr,
       "ospfNewCfgVirtIntfMdkey": ospfNewCfgVirtIntfMdkey,
       "ospfNewCfgVirtIntfHello": ospfNewCfgVirtIntfHello,
       "ospfNewCfgVirtIntfDead": ospfNewCfgVirtIntfDead,
       "ospfNewCfgVirtIntfTrans": ospfNewCfgVirtIntfTrans,
       "ospfNewCfgVirtIntfRetra": ospfNewCfgVirtIntfRetra,
       "ospfNewCfgVirtIntfAuthKey": ospfNewCfgVirtIntfAuthKey,
       "ospfNewCfgVirtIntfStatus": ospfNewCfgVirtIntfStatus,
       "ospfNewCfgVirtIntfDelete": ospfNewCfgVirtIntfDelete,
       "ospfMdkeyTableMaxSize": ospfMdkeyTableMaxSize,
       "ospfCurCfgHostTable": ospfCurCfgHostTable,
       "ospfCurCfgHostEntry": ospfCurCfgHostEntry,
       "ospfCurCfgHostIndex": ospfCurCfgHostIndex,
       "ospfCurCfgHostIpAddr": ospfCurCfgHostIpAddr,
       "ospfCurCfgHostAreaIndex": ospfCurCfgHostAreaIndex,
       "ospfCurCfgHostCost": ospfCurCfgHostCost,
       "ospfCurCfgHostState": ospfCurCfgHostState,
       "ospfNewCfgHostTable": ospfNewCfgHostTable,
       "ospfNewCfgHostEntry": ospfNewCfgHostEntry,
       "ospfNewCfgHostIndex": ospfNewCfgHostIndex,
       "ospfNewCfgHostIpAddr": ospfNewCfgHostIpAddr,
       "ospfNewCfgHostAreaIndex": ospfNewCfgHostAreaIndex,
       "ospfNewCfgHostCost": ospfNewCfgHostCost,
       "ospfNewCfgHostState": ospfNewCfgHostState,
       "ospfNewCfgHostDelete": ospfNewCfgHostDelete,
       "ospfCurCfgRangeTable": ospfCurCfgRangeTable,
       "ospfCurCfgRangeEntry": ospfCurCfgRangeEntry,
       "ospfCurCfgRangeIndex": ospfCurCfgRangeIndex,
       "ospfCurCfgRangeAddr": ospfCurCfgRangeAddr,
       "ospfCurCfgRangeMask": ospfCurCfgRangeMask,
       "ospfCurCfgRangeAreaIndex": ospfCurCfgRangeAreaIndex,
       "ospfCurCfgRangeHideState": ospfCurCfgRangeHideState,
       "ospfCurCfgRangeState": ospfCurCfgRangeState,
       "ospfNewCfgRangeTable": ospfNewCfgRangeTable,
       "ospfNewCfgRangeEntry": ospfNewCfgRangeEntry,
       "ospfNewCfgRangeIndex": ospfNewCfgRangeIndex,
       "ospfNewCfgRangeAddr": ospfNewCfgRangeAddr,
       "ospfNewCfgRangeMask": ospfNewCfgRangeMask,
       "ospfNewCfgRangeAreaIndex": ospfNewCfgRangeAreaIndex,
       "ospfNewCfgRangeHideState": ospfNewCfgRangeHideState,
       "ospfNewCfgRangeState": ospfNewCfgRangeState,
       "ospfNewCfgRangeDelete": ospfNewCfgRangeDelete,
       "ipGeneralCfg": ipGeneralCfg,
       "ipCurCfgRouterID": ipCurCfgRouterID,
       "ipNewCfgRouterID": ipNewCfgRouterID,
       "igmpCfg": igmpCfg,
       "igmpCurCfgOnOff": igmpCurCfgOnOff,
       "igmpNewCfgOnOff": igmpNewCfgOnOff,
       "igmpSnoopCfgGen": igmpSnoopCfgGen,
       "igmpSnoopCfg": igmpSnoopCfg,
       "igmpSnoopCurCfgTimeout": igmpSnoopCurCfgTimeout,
       "igmpSnoopNewCfgTimeout": igmpSnoopNewCfgTimeout,
       "igmpSnoopCurCfgMrto": igmpSnoopCurCfgMrto,
       "igmpSnoopNewCfgMrto": igmpSnoopNewCfgMrto,
       "igmpSnoopNewCfgVlanFastlvAdd": igmpSnoopNewCfgVlanFastlvAdd,
       "igmpSnoopNewCfgVlanFastlvRem": igmpSnoopNewCfgVlanFastlvRem,
       "igmpSnoopCurCfgVlanFastlvBmap": igmpSnoopCurCfgVlanFastlvBmap,
       "igmpSnoopNewCfgVlanFastlvBmap": igmpSnoopNewCfgVlanFastlvBmap,
       "igmpSnoopCurCfgRobust": igmpSnoopCurCfgRobust,
       "igmpSnoopNewCfgRobust": igmpSnoopNewCfgRobust,
       "igmpSnoopNewCfgVlanAdd": igmpSnoopNewCfgVlanAdd,
       "igmpSnoopNewCfgVlanRem": igmpSnoopNewCfgVlanRem,
       "igmpSnoopNewCfgVlanClear": igmpSnoopNewCfgVlanClear,
       "igmpSnoopCurCfgVlanBmap": igmpSnoopCurCfgVlanBmap,
       "igmpSnoopNewCfgVlanBmap": igmpSnoopNewCfgVlanBmap,
       "igmpSnoopCurCfgQInterval": igmpSnoopCurCfgQInterval,
       "igmpSnoopNewCfgQInterval": igmpSnoopNewCfgQInterval,
       "igmpSnoopCurCfgSrcIp": igmpSnoopCurCfgSrcIp,
       "igmpSnoopNewCfgSrcIp": igmpSnoopNewCfgSrcIp,
       "igmpSnoopCurCfgAggrEnaDis": igmpSnoopCurCfgAggrEnaDis,
       "igmpSnoopNewCfgAggrEnaDis": igmpSnoopNewCfgAggrEnaDis,
       "igmpSnoopCurCfgFlood": igmpSnoopCurCfgFlood,
       "igmpSnoopNewCfgFlood": igmpSnoopNewCfgFlood,
       "igmpV3SnoopCfg": igmpV3SnoopCfg,
       "igmpV3SnoopCurCfgSources": igmpV3SnoopCurCfgSources,
       "igmpV3SnoopNewCfgSources": igmpV3SnoopNewCfgSources,
       "igmpV3SnoopCurCfgEnaDis": igmpV3SnoopCurCfgEnaDis,
       "igmpV3SnoopNewCfgEnaDis": igmpV3SnoopNewCfgEnaDis,
       "igmpV3SnoopCurCfgExcludeEnaDis": igmpV3SnoopCurCfgExcludeEnaDis,
       "igmpV3SnoopNewCfgExcludeEnaDis": igmpV3SnoopNewCfgExcludeEnaDis,
       "igmpV3SnoopCurCfgV1V2EnaDis": igmpV3SnoopCurCfgV1V2EnaDis,
       "igmpV3SnoopNewCfgV1V2EnaDis": igmpV3SnoopNewCfgV1V2EnaDis,
       "igmpStaticMrtrCfg": igmpStaticMrtrCfg,
       "igmpStaticMrtrCurCfgTable": igmpStaticMrtrCurCfgTable,
       "igmpStaticMrtrCurCfgTableEntry": igmpStaticMrtrCurCfgTableEntry,
       "igmpStaticMrtrCurCfgIndx": igmpStaticMrtrCurCfgIndx,
       "igmpStaticMrtrCurCfgPortId": igmpStaticMrtrCurCfgPortId,
       "igmpStaticMrtrCurCfgVlanId": igmpStaticMrtrCurCfgVlanId,
       "igmpStaticMrtrCurCfgVersion": igmpStaticMrtrCurCfgVersion,
       "igmpStaticMrtrNewCfgTable": igmpStaticMrtrNewCfgTable,
       "igmpStaticMrtrNewCfgTableEntry": igmpStaticMrtrNewCfgTableEntry,
       "igmpStaticMrtrNewCfgIndx": igmpStaticMrtrNewCfgIndx,
       "igmpStaticMrtrNewCfgPortId": igmpStaticMrtrNewCfgPortId,
       "igmpStaticMrtrNewCfgVlanId": igmpStaticMrtrNewCfgVlanId,
       "igmpStaticMrtrNewCfgVersion": igmpStaticMrtrNewCfgVersion,
       "igmpStaticMrtrNewCfgDelete": igmpStaticMrtrNewCfgDelete,
       "igmpFilterCfg": igmpFilterCfg,
       "igmpFltCurCfgTable": igmpFltCurCfgTable,
       "igmpFltCurCfgTableEntry": igmpFltCurCfgTableEntry,
       "igmpFltCurCfgIndx": igmpFltCurCfgIndx,
       "igmpFltCurCfgMcastIp1": igmpFltCurCfgMcastIp1,
       "igmpFltCurCfgMcastIp2": igmpFltCurCfgMcastIp2,
       "igmpFltCurCfgAction": igmpFltCurCfgAction,
       "igmpFltCurCfgState": igmpFltCurCfgState,
       "igmpFltNewCfgTable": igmpFltNewCfgTable,
       "igmpFltNewCfgTableEntry": igmpFltNewCfgTableEntry,
       "igmpFltNewCfgIndx": igmpFltNewCfgIndx,
       "igmpFltNewCfgMcastIp1": igmpFltNewCfgMcastIp1,
       "igmpFltNewCfgMcastIp2": igmpFltNewCfgMcastIp2,
       "igmpFltNewCfgAction": igmpFltNewCfgAction,
       "igmpFltNewCfgState": igmpFltNewCfgState,
       "igmpFltNewCfgDelete": igmpFltNewCfgDelete,
       "igmpFltCurCfgPortTable": igmpFltCurCfgPortTable,
       "igmpFltCurCfgPortTableEntry": igmpFltCurCfgPortTableEntry,
       "igmpFltCurCfgPortIndx": igmpFltCurCfgPortIndx,
       "igmpFltCurCfgPortState": igmpFltCurCfgPortState,
       "igmpFltCurCfgPortFiltBmap": igmpFltCurCfgPortFiltBmap,
       "igmpFltNewCfgPortTable": igmpFltNewCfgPortTable,
       "igmpFltNewCfgPortTableEntry": igmpFltNewCfgPortTableEntry,
       "igmpFltNewCfgPortIndx": igmpFltNewCfgPortIndx,
       "igmpFltNewCfgPortState": igmpFltNewCfgPortState,
       "igmpFltNewCfgPortFiltBmap": igmpFltNewCfgPortFiltBmap,
       "igmpFltNewCfgPortAddFiltRule": igmpFltNewCfgPortAddFiltRule,
       "igmpFltNewCfgPortRemFiltRule": igmpFltNewCfgPortRemFiltRule,
       "igmpFltCurCfgEnaDis": igmpFltCurCfgEnaDis,
       "igmpFltNewCfgEnaDis": igmpFltNewCfgEnaDis,
       "rip2Cfg": rip2Cfg,
       "ripCurCfgIntfTable": ripCurCfgIntfTable,
       "ripCurCfgIntfEntry": ripCurCfgIntfEntry,
       "ripCurCfgIntfIndex": ripCurCfgIntfIndex,
       "ripCurCfgIntfVersion": ripCurCfgIntfVersion,
       "ripCurCfgIntfSupply": ripCurCfgIntfSupply,
       "ripCurCfgIntfListen": ripCurCfgIntfListen,
       "ripCurCfgIntfDefault": ripCurCfgIntfDefault,
       "ripCurCfgIntfTrigUpdate": ripCurCfgIntfTrigUpdate,
       "ripCurCfgIntfMcastUpdate": ripCurCfgIntfMcastUpdate,
       "ripCurCfgIntfPoisonReverse": ripCurCfgIntfPoisonReverse,
       "ripCurCfgIntfState": ripCurCfgIntfState,
       "ripCurCfgIntfMetric": ripCurCfgIntfMetric,
       "ripCurCfgIntfAuth": ripCurCfgIntfAuth,
       "ripCurCfgIntfKey": ripCurCfgIntfKey,
       "ripCurCfgIntfSplitHorizon": ripCurCfgIntfSplitHorizon,
       "ripNewCfgIntfTable": ripNewCfgIntfTable,
       "ripNewCfgIntfEntry": ripNewCfgIntfEntry,
       "ripNewCfgIntfIndex": ripNewCfgIntfIndex,
       "ripNewCfgIntfVersion": ripNewCfgIntfVersion,
       "ripNewCfgIntfSupply": ripNewCfgIntfSupply,
       "ripNewCfgIntfListen": ripNewCfgIntfListen,
       "ripNewCfgIntfDefault": ripNewCfgIntfDefault,
       "ripNewCfgIntfTrigUpdate": ripNewCfgIntfTrigUpdate,
       "ripNewCfgIntfMcastUpdate": ripNewCfgIntfMcastUpdate,
       "ripNewCfgIntfPoisonReverse": ripNewCfgIntfPoisonReverse,
       "ripNewCfgIntfState": ripNewCfgIntfState,
       "ripNewCfgIntfMetric": ripNewCfgIntfMetric,
       "ripNewCfgIntfAuth": ripNewCfgIntfAuth,
       "ripNewCfgIntfKey": ripNewCfgIntfKey,
       "ripNewCfgIntfSplitHorizon": ripNewCfgIntfSplitHorizon,
       "ripGeneral": ripGeneral,
       "rip2CurCfgState": rip2CurCfgState,
       "rip2NewCfgState": rip2NewCfgState,
       "rip2CurCfgUpdatePeriod": rip2CurCfgUpdatePeriod,
       "rip2NewCfgUpdatePeriod": rip2NewCfgUpdatePeriod,
       "ripRouteRedistribution": ripRouteRedistribution,
       "ripRedistributeStatic": ripRedistributeStatic,
       "ripCurCfgStaticMetric": ripCurCfgStaticMetric,
       "ripNewCfgStaticMetric": ripNewCfgStaticMetric,
       "ripCurCfgStaticOutRmapList": ripCurCfgStaticOutRmapList,
       "ripNewCfgStaticOutRmapList": ripNewCfgStaticOutRmapList,
       "ripNewCfgStaticAddOutRmap": ripNewCfgStaticAddOutRmap,
       "ripNewCfgStaticRemoveOutRmap": ripNewCfgStaticRemoveOutRmap,
       "ripRedistributeFixed": ripRedistributeFixed,
       "ripCurCfgFixedMetric": ripCurCfgFixedMetric,
       "ripNewCfgFixedMetric": ripNewCfgFixedMetric,
       "ripCurCfgFixedOutRmapList": ripCurCfgFixedOutRmapList,
       "ripNewCfgFixedOutRmapList": ripNewCfgFixedOutRmapList,
       "ripNewCfgFixedAddOutRmap": ripNewCfgFixedAddOutRmap,
       "ripNewCfgFixedRemoveOutRmap": ripNewCfgFixedRemoveOutRmap,
       "ripRedistributeOspf": ripRedistributeOspf,
       "ripCurCfgOspfMetric": ripCurCfgOspfMetric,
       "ripNewCfgOspfMetric": ripNewCfgOspfMetric,
       "ripCurCfgOspfOutRmapList": ripCurCfgOspfOutRmapList,
       "ripNewCfgOspfOutRmapList": ripNewCfgOspfOutRmapList,
       "ripNewCfgOspfAddOutRmap": ripNewCfgOspfAddOutRmap,
       "ripNewCfgOspfRemoveOutRmap": ripNewCfgOspfRemoveOutRmap,
       "ripRedistributeEospf": ripRedistributeEospf,
       "ripCurCfgEospfMetric": ripCurCfgEospfMetric,
       "ripNewCfgEospfMetric": ripNewCfgEospfMetric,
       "ripCurCfgEospfOutRmapList": ripCurCfgEospfOutRmapList,
       "ripNewCfgEospfOutRmapList": ripNewCfgEospfOutRmapList,
       "ripNewCfgEospfAddOutRmap": ripNewCfgEospfAddOutRmap,
       "ripNewCfgEospfRemoveOutRmap": ripNewCfgEospfRemoveOutRmap,
       "layer3Stats": layer3Stats,
       "arpStats": arpStats,
       "arpStatEntries": arpStatEntries,
       "arpStatHighWater": arpStatHighWater,
       "arpStatMaxEntries": arpStatMaxEntries,
       "routeStats": routeStats,
       "routeStatEntries": routeStatEntries,
       "routeStatHighWater": routeStatHighWater,
       "routeStatMaxEntries": routeStatMaxEntries,
       "vrrpStats": vrrpStats,
       "vrrpStatInAdvers": vrrpStatInAdvers,
       "vrrpStatOutAdvers": vrrpStatOutAdvers,
       "vrrpStatOutBadAdvers": vrrpStatOutBadAdvers,
       "vrrpStatBadVersion": vrrpStatBadVersion,
       "vrrpStatBadAddress": vrrpStatBadAddress,
       "vrrpStatBadPassword": vrrpStatBadPassword,
       "vrrpStatBadVrid": vrrpStatBadVrid,
       "vrrpStatBadData": vrrpStatBadData,
       "vrrpStatBadInterval": vrrpStatBadInterval,
       "ospfStats": ospfStats,
       "ospfGeneralStats": ospfGeneralStats,
       "ospfCumRxTxStats": ospfCumRxTxStats,
       "ospfCumRxPkts": ospfCumRxPkts,
       "ospfCumTxPkts": ospfCumTxPkts,
       "ospfCumRxHello": ospfCumRxHello,
       "ospfCumTxHello": ospfCumTxHello,
       "ospfCumRxDatabase": ospfCumRxDatabase,
       "ospfCumTxDatabase": ospfCumTxDatabase,
       "ospfCumRxlsReqs": ospfCumRxlsReqs,
       "ospfCumTxlsReqs": ospfCumTxlsReqs,
       "ospfCumRxlsAcks": ospfCumRxlsAcks,
       "ospfCumTxlsAcks": ospfCumTxlsAcks,
       "ospfCumRxlsUpdates": ospfCumRxlsUpdates,
       "ospfCumTxlsUpdates": ospfCumTxlsUpdates,
       "ospfCumNbrChangeStats": ospfCumNbrChangeStats,
       "ospfCumNbrhello": ospfCumNbrhello,
       "ospfCumNbrStart": ospfCumNbrStart,
       "ospfCumNbrAdjointOk": ospfCumNbrAdjointOk,
       "ospfCumNbrNegotiationDone": ospfCumNbrNegotiationDone,
       "ospfCumNbrExchangeDone": ospfCumNbrExchangeDone,
       "ospfCumNbrBadRequests": ospfCumNbrBadRequests,
       "ospfCumNbrBadSequence": ospfCumNbrBadSequence,
       "ospfCumNbrLoadingDone": ospfCumNbrLoadingDone,
       "ospfCumNbrN1way": ospfCumNbrN1way,
       "ospfCumNbrRstAd": ospfCumNbrRstAd,
       "ospfCumNbrDown": ospfCumNbrDown,
       "ospfCumNbrN2way": ospfCumNbrN2way,
       "ospfCumIntfChangeStats": ospfCumIntfChangeStats,
       "ospfCumIntfHello": ospfCumIntfHello,
       "ospfCumIntfDown": ospfCumIntfDown,
       "ospfCumIntfLoop": ospfCumIntfLoop,
       "ospfCumIntfUnloop": ospfCumIntfUnloop,
       "ospfCumIntfWaitTimer": ospfCumIntfWaitTimer,
       "ospfCumIntfBackup": ospfCumIntfBackup,
       "ospfCumIntfNbrChange": ospfCumIntfNbrChange,
       "ospfTimersKickOffStats": ospfTimersKickOffStats,
       "ospfTmrsKckOffHello": ospfTmrsKckOffHello,
       "ospfTmrsKckOffRetransmit": ospfTmrsKckOffRetransmit,
       "ospfTmrsKckOffLsaLock": ospfTmrsKckOffLsaLock,
       "ospfTmrsKckOffLsaAck": ospfTmrsKckOffLsaAck,
       "ospfTmrsKckOffDbage": ospfTmrsKckOffDbage,
       "ospfTmrsKckOffSummary": ospfTmrsKckOffSummary,
       "ospfTmrsKckOffAseExport": ospfTmrsKckOffAseExport,
       "ospfArea": ospfArea,
       "ospfAreaRxTxStats": ospfAreaRxTxStats,
       "ospfAreaRxTxStatsEntry": ospfAreaRxTxStatsEntry,
       "ospfAreaRxTxIndex": ospfAreaRxTxIndex,
       "ospfAreaRxPkts": ospfAreaRxPkts,
       "ospfAreaTxPkts": ospfAreaTxPkts,
       "ospfAreaRxHello": ospfAreaRxHello,
       "ospfAreaTxHello": ospfAreaTxHello,
       "ospfAreaRxDatabase": ospfAreaRxDatabase,
       "ospfAreaTxDatabase": ospfAreaTxDatabase,
       "ospfAreaRxlsReqs": ospfAreaRxlsReqs,
       "ospfAreaTxlsReqs": ospfAreaTxlsReqs,
       "ospfAreaRxlsAcks": ospfAreaRxlsAcks,
       "ospfAreaTxlsAcks": ospfAreaTxlsAcks,
       "ospfAreaRxlsUpdates": ospfAreaRxlsUpdates,
       "ospfAreaTxlsUpdates": ospfAreaTxlsUpdates,
       "ospfAreaNbrChangeStats": ospfAreaNbrChangeStats,
       "ospfAreaNbrChangeStatsEntry": ospfAreaNbrChangeStatsEntry,
       "ospfAreaNbrIndex": ospfAreaNbrIndex,
       "ospfAreaNbrhello": ospfAreaNbrhello,
       "ospfAreaNbrStart": ospfAreaNbrStart,
       "ospfAreaNbrAdjointOk": ospfAreaNbrAdjointOk,
       "ospfAreaNbrNegotiationDone": ospfAreaNbrNegotiationDone,
       "ospfAreaNbrExchangeDone": ospfAreaNbrExchangeDone,
       "ospfAreaNbrBadRequests": ospfAreaNbrBadRequests,
       "ospfAreaNbrBadSequence": ospfAreaNbrBadSequence,
       "ospfAreaNbrLoadingDone": ospfAreaNbrLoadingDone,
       "ospfAreaNbrN1way": ospfAreaNbrN1way,
       "ospfAreaNbrRstAd": ospfAreaNbrRstAd,
       "ospfAreaNbrDown": ospfAreaNbrDown,
       "ospfAreaNbrN2way": ospfAreaNbrN2way,
       "ospfAreaChangeStats": ospfAreaChangeStats,
       "ospfAreaChangeStatsEntry": ospfAreaChangeStatsEntry,
       "ospfAreaIntfIndex": ospfAreaIntfIndex,
       "ospfAreaIntfHello": ospfAreaIntfHello,
       "ospfAreaIntfDown": ospfAreaIntfDown,
       "ospfAreaIntfLoop": ospfAreaIntfLoop,
       "ospfAreaIntfUnloop": ospfAreaIntfUnloop,
       "ospfAreaIntfWaitTimer": ospfAreaIntfWaitTimer,
       "ospfAreaIntfBackup": ospfAreaIntfBackup,
       "ospfAreaIntfNbrChange": ospfAreaIntfNbrChange,
       "ospfAreaErrorStats": ospfAreaErrorStats,
       "ospfAreaErrorStatsEntry": ospfAreaErrorStatsEntry,
       "ospfAreaErrIndex": ospfAreaErrIndex,
       "ospfAreaErrAuthFailure": ospfAreaErrAuthFailure,
       "ospfAreaErrNetmaskMismatch": ospfAreaErrNetmaskMismatch,
       "ospfAreaErrHelloMismatch": ospfAreaErrHelloMismatch,
       "ospfAreaErrDeadMismatch": ospfAreaErrDeadMismatch,
       "ospfAreaErrOptionsMismatch": ospfAreaErrOptionsMismatch,
       "ospfAreaErrUnknownNbr": ospfAreaErrUnknownNbr,
       "ospfAreaErrAreaMismatch": ospfAreaErrAreaMismatch,
       "ospfInterface": ospfInterface,
       "ospfIntfRxTxStats": ospfIntfRxTxStats,
       "ospfIntfRxTxStatsEntry": ospfIntfRxTxStatsEntry,
       "ospfIntfRxTxIndex": ospfIntfRxTxIndex,
       "ospfIntfRxPkts": ospfIntfRxPkts,
       "ospfIntfTxPkts": ospfIntfTxPkts,
       "ospfIntfRxHello": ospfIntfRxHello,
       "ospfIntfTxHello": ospfIntfTxHello,
       "ospfIntfRxDatabase": ospfIntfRxDatabase,
       "ospfIntfTxDatabase": ospfIntfTxDatabase,
       "ospfIntfRxlsReqs": ospfIntfRxlsReqs,
       "ospfIntfTxlsReqs": ospfIntfTxlsReqs,
       "ospfIntfRxlsAcks": ospfIntfRxlsAcks,
       "ospfIntfTxlsAcks": ospfIntfTxlsAcks,
       "ospfIntfRxlsUpdates": ospfIntfRxlsUpdates,
       "ospfIntfTxlsUpdates": ospfIntfTxlsUpdates,
       "ospfIntfNbrChangeStats": ospfIntfNbrChangeStats,
       "ospfIntfNbrChangeStatsEntry": ospfIntfNbrChangeStatsEntry,
       "ospfIntfNbrIndex": ospfIntfNbrIndex,
       "ospfIntfNbrhello": ospfIntfNbrhello,
       "ospfIntfNbrStart": ospfIntfNbrStart,
       "ospfIntfNbrAdjointOk": ospfIntfNbrAdjointOk,
       "ospfIntfNbrNegotiationDone": ospfIntfNbrNegotiationDone,
       "ospfIntfNbrExchangeDone": ospfIntfNbrExchangeDone,
       "ospfIntfNbrBadRequests": ospfIntfNbrBadRequests,
       "ospfIntfNbrBadSequence": ospfIntfNbrBadSequence,
       "ospfIntfNbrLoadingDone": ospfIntfNbrLoadingDone,
       "ospfIntfNbrN1way": ospfIntfNbrN1way,
       "ospfIntfNbrRstAd": ospfIntfNbrRstAd,
       "ospfIntfNbrDown": ospfIntfNbrDown,
       "ospfIntfNbrN2way": ospfIntfNbrN2way,
       "ospfIntfChangeStats": ospfIntfChangeStats,
       "ospfIntfChangeStatsEntry": ospfIntfChangeStatsEntry,
       "ospfIntfIndex": ospfIntfIndex,
       "ospfIntfHello": ospfIntfHello,
       "ospfIntfDown": ospfIntfDown,
       "ospfIntfLoop": ospfIntfLoop,
       "ospfIntfUnloop": ospfIntfUnloop,
       "ospfIntfWaitTimer": ospfIntfWaitTimer,
       "ospfIntfBackup": ospfIntfBackup,
       "ospfIntfNbrChange": ospfIntfNbrChange,
       "ospfIntfErrorStats": ospfIntfErrorStats,
       "ospfIntfErrorStatsEntry": ospfIntfErrorStatsEntry,
       "ospfIntfErrIndex": ospfIntfErrIndex,
       "ospfIntfErrAuthFailure": ospfIntfErrAuthFailure,
       "ospfIntfErrNetmaskMismatch": ospfIntfErrNetmaskMismatch,
       "ospfIntfErrHelloMismatch": ospfIntfErrHelloMismatch,
       "ospfIntfErrDeadMismatch": ospfIntfErrDeadMismatch,
       "ospfIntfErrOptionsMismatch": ospfIntfErrOptionsMismatch,
       "ospfIntfErrUnknownNbr": ospfIntfErrUnknownNbr,
       "ospfIntfErrAreaMismatch": ospfIntfErrAreaMismatch,
       "clearStats": clearStats,
       "ipClearStats": ipClearStats,
       "vrrpClearStats": vrrpClearStats,
       "ripClearStats": ripClearStats,
       "ospfClearStats": ospfClearStats,
       "tcpClearStats": tcpClearStats,
       "udpClearStats": udpClearStats,
       "dnsClearStats": dnsClearStats,
       "arpClearStats": arpClearStats,
       "icmpClearStats": icmpClearStats,
       "routeClearStats": routeClearStats,
       "igmpStats": igmpStats,
       "igmpSnoopStats": igmpSnoopStats,
       "igmpSnoopStatsEntry": igmpSnoopStatsEntry,
       "igmpSnoopVlanIndex": igmpSnoopVlanIndex,
       "rxIgmpValidPkts": rxIgmpValidPkts,
       "rxIgmpInvalidPkts": rxIgmpInvalidPkts,
       "rxIgmpGenQueries": rxIgmpGenQueries,
       "rxIgmpGrpSpecificQueries": rxIgmpGrpSpecificQueries,
       "rxIgmpLeaves": rxIgmpLeaves,
       "rxIgmpReports": rxIgmpReports,
       "txIgmpGrpSpecificQueries": txIgmpGrpSpecificQueries,
       "txIgmpReports": txIgmpReports,
       "txIgmpLeaves": txIgmpLeaves,
       "rxIgmpGroupSourceSpecificQueries": rxIgmpGroupSourceSpecificQueries,
       "rxIgmpV3CurrentStateRecords": rxIgmpV3CurrentStateRecords,
       "rxIgmpV3SourceListChangeRecords": rxIgmpV3SourceListChangeRecords,
       "rxIgmpV3FilterChangeRecords": rxIgmpV3FilterChangeRecords,
       "igmpClearAllStats": igmpClearAllStats,
       "igmpStatsTotalIgmpGroups": igmpStatsTotalIgmpGroups,
       "igmpStatsTotalIpmcGroups": igmpStatsTotalIpmcGroups,
       "ipStats": ipStats,
       "ipStatsInReceives": ipStatsInReceives,
       "ipStatsInHdrErrors": ipStatsInHdrErrors,
       "ipStatsInAddrErrors": ipStatsInAddrErrors,
       "ipStatsInUnknownProtos": ipStatsInUnknownProtos,
       "ipStatsInDiscards": ipStatsInDiscards,
       "ipStatsInDelivers": ipStatsInDelivers,
       "ipStatsOutRequests": ipStatsOutRequests,
       "ipStatsOutDiscards": ipStatsOutDiscards,
       "ipStatsDefaultTTL": ipStatsDefaultTTL,
       "rip2Stats": rip2Stats,
       "ripStatInPackets": ripStatInPackets,
       "ripStatOutPackets": ripStatOutPackets,
       "ripStatInRequestPkts": ripStatInRequestPkts,
       "ripStatInResponsePkts": ripStatInResponsePkts,
       "ripStatOutRequestPkts": ripStatOutRequestPkts,
       "ripStatOutResponsePkts": ripStatOutResponsePkts,
       "ripStatRouteTimeout": ripStatRouteTimeout,
       "ripStatInBadSizePkts": ripStatInBadSizePkts,
       "ripStatInBadVersion": ripStatInBadVersion,
       "ripStatInBadZeros": ripStatInBadZeros,
       "ripStatInBadSourcePort": ripStatInBadSourcePort,
       "ripStatInBadSourceIP": ripStatInBadSourceIP,
       "ripStatInSelfRcvPkts": ripStatInSelfRcvPkts,
       "dnsStats": dnsStats,
       "dnsStatInGoodDnsRequests": dnsStatInGoodDnsRequests,
       "dnsStatOutDnsRequests": dnsStatOutDnsRequests,
       "dnsStatInBadDnsRequests": dnsStatInBadDnsRequests,
       "geal3Stats": geal3Stats,
       "maxL3TableSize": maxL3TableSize,
       "noL3EntriesUsed": noL3EntriesUsed,
       "maxLpmTableSize": maxLpmTableSize,
       "noLpmEntriesUsed": noLpmEntriesUsed,
       "maxBlockInLpmTable": maxBlockInLpmTable,
       "noBlocksUsedInLpmTable": noBlocksUsedInLpmTable,
       "layer3Info": layer3Info,
       "ipRoutingInfo": ipRoutingInfo,
       "ipRouteInfoTable": ipRouteInfoTable,
       "ipRouteInfoEntry": ipRouteInfoEntry,
       "ipRouteInfoIndx": ipRouteInfoIndx,
       "ipRouteInfoDestIp": ipRouteInfoDestIp,
       "ipRouteInfoMask": ipRouteInfoMask,
       "ipRouteInfoGateway": ipRouteInfoGateway,
       "ipRouteInfoTag": ipRouteInfoTag,
       "ipRouteInfoType": ipRouteInfoType,
       "ipRouteInfoInterface": ipRouteInfoInterface,
       "ipRouteInfoMetric": ipRouteInfoMetric,
       "routeTableClear": routeTableClear,
       "arpInfo": arpInfo,
       "arpInfoTable": arpInfoTable,
       "arpInfoEntry": arpInfoEntry,
       "arpInfoDestIp": arpInfoDestIp,
       "arpInfoMacAddr": arpInfoMacAddr,
       "arpInfoVLAN": arpInfoVLAN,
       "arpInfoSrcPort": arpInfoSrcPort,
       "arpInfoFlag": arpInfoFlag,
       "arpCacheClear": arpCacheClear,
       "vrrpInfo": vrrpInfo,
       "vrrpInfoVirtRtrTable": vrrpInfoVirtRtrTable,
       "vrrpInfoVirtRtrTableEntry": vrrpInfoVirtRtrTableEntry,
       "vrrpInfoVirtRtrIndex": vrrpInfoVirtRtrIndex,
       "vrrpInfoVirtRtrConfig": vrrpInfoVirtRtrConfig,
       "vrrpInfoVirtRtrID": vrrpInfoVirtRtrID,
       "vrrpInfoVirtRtrAddr": vrrpInfoVirtRtrAddr,
       "vrrpInfoVirtRtrIfIndex": vrrpInfoVirtRtrIfIndex,
       "vrrpInfoVirtRtrPriority": vrrpInfoVirtRtrPriority,
       "vrrpInfoVirtRtrState": vrrpInfoVirtRtrState,
       "vrrpInfoVirtRtrOwnership": vrrpInfoVirtRtrOwnership,
       "ospfInfo": ospfInfo,
       "ospfGeneralInfo": ospfGeneralInfo,
       "ospfVersion": ospfVersion,
       "ospfRouterID": ospfRouterID,
       "ospfStartTime": ospfStartTime,
       "ospfProcessUptime": ospfProcessUptime,
       "ospfLsTypesSupported": ospfLsTypesSupported,
       "ospfAreaBorderRouter": ospfAreaBorderRouter,
       "ospfAreaBoundaryRouter": ospfAreaBoundaryRouter,
       "ospfExternalLsa": ospfExternalLsa,
       "ospfIntfCountForRouter": ospfIntfCountForRouter,
       "ospfVlinkCountForRouter": ospfVlinkCountForRouter,
       "ospfNewLsaReceived": ospfNewLsaReceived,
       "ospfTotalLsaOriginated": ospfTotalLsaOriginated,
       "ospfTotalNumberOfLsdbEntries": ospfTotalNumberOfLsdbEntries,
       "ospfTotalNeighbours": ospfTotalNeighbours,
       "ospfNbrInInitState": ospfNbrInInitState,
       "ospfNbrInExchState": ospfNbrInExchState,
       "ospfNbrInFullState": ospfNbrInFullState,
       "ospfTotalAreas": ospfTotalAreas,
       "ospfTotalTransitAreas": ospfTotalTransitAreas,
       "ospfTotalNssaAreas": ospfTotalNssaAreas,
       "ospfTotalStubAreas": ospfTotalStubAreas,
       "ospfAreaInfoTable": ospfAreaInfoTable,
       "ospfAreaInfoEntry": ospfAreaInfoEntry,
       "ospfAreaInfoIndex": ospfAreaInfoIndex,
       "ospfAreaInfoId": ospfAreaInfoId,
       "ospfAreaInfoStatus": ospfAreaInfoStatus,
       "ospfTotalNumberOfInterfaces": ospfTotalNumberOfInterfaces,
       "ospfNumberOfInterfacesUp": ospfNumberOfInterfacesUp,
       "ospfAreaInfoAuthType": ospfAreaInfoAuthType,
       "ospfAreaInfoSPF": ospfAreaInfoSPF,
       "ospfNumberOfLsdbEntries": ospfNumberOfLsdbEntries,
       "ospfAreaInfoAreaBorderRouter": ospfAreaInfoAreaBorderRouter,
       "ospfAreaInfoASBoundaryRouter": ospfAreaInfoASBoundaryRouter,
       "ospfAreaInfoTotalNeighbours": ospfAreaInfoTotalNeighbours,
       "ospfAreaInfoNeighborsINITstate": ospfAreaInfoNeighborsINITstate,
       "ospfAreaInfoNeighborsEXCHstate": ospfAreaInfoNeighborsEXCHstate,
       "ospfAreaInfoNeighborsFULLstate": ospfAreaInfoNeighborsFULLstate,
       "ospfAreaInfoLsTypesAccepted": ospfAreaInfoLsTypesAccepted,
       "ospfIntfInfoTable": ospfIntfInfoTable,
       "ospfIntfInfoEntry": ospfIntfInfoEntry,
       "ospfIfInfoIndex": ospfIfInfoIndex,
       "ospfIfInfoIpAddress": ospfIfInfoIpAddress,
       "ospfIfInfoArea": ospfIfInfoArea,
       "ospfIfInfoAdminStatus": ospfIfInfoAdminStatus,
       "ospfIfInfoRouterID": ospfIfInfoRouterID,
       "ospfIfInfoState": ospfIfInfoState,
       "ospfIfInfoPriority": ospfIfInfoPriority,
       "ospfIfInfoDesignatedRouterID": ospfIfInfoDesignatedRouterID,
       "ospfIfInfoDesignatedRouterIpAddress": ospfIfInfoDesignatedRouterIpAddress,
       "ospfIfInfoBackupDesignatedRouterID": ospfIfInfoBackupDesignatedRouterID,
       "ospfIfInfoBackupDesignatedRouterIpAddress": ospfIfInfoBackupDesignatedRouterIpAddress,
       "ospfIfInfoHello": ospfIfInfoHello,
       "ospfIfInfoDead": ospfIfInfoDead,
       "ospfIfInfoWait": ospfIfInfoWait,
       "ospfIfInfoRetransmit": ospfIfInfoRetransmit,
       "ospfIfInfoTransitDelay": ospfIfInfoTransitDelay,
       "ospfIfInfoTotalNeighbours": ospfIfInfoTotalNeighbours,
       "ospfIfInfoEvents": ospfIfInfoEvents,
       "ospfIfInfoAuthType": ospfIfInfoAuthType,
       "ospfVirtIntfInfoTable": ospfVirtIntfInfoTable,
       "ospfVirtIntfInfoEntry": ospfVirtIntfInfoEntry,
       "ospfVirtIntfInfoIndex": ospfVirtIntfInfoIndex,
       "ospfVirtIntfInfoIpAddr": ospfVirtIntfInfoIpAddr,
       "ospfVirtIntfInfoArea": ospfVirtIntfInfoArea,
       "ospfVirtIntfInfoRouterId": ospfVirtIntfInfoRouterId,
       "ospfVirtIntfInfoState": ospfVirtIntfInfoState,
       "ospfVirtIntfInfoCost": ospfVirtIntfInfoCost,
       "ospfVirtIntfInfoTrans": ospfVirtIntfInfoTrans,
       "ospfVirtIntfInfoHello": ospfVirtIntfInfoHello,
       "ospfVirtIntfInfoDead": ospfVirtIntfInfoDead,
       "ospfVirtIntfInfoWait": ospfVirtIntfInfoWait,
       "ospfVirtIntfInfoRetra": ospfVirtIntfInfoRetra,
       "ospfVirtIntfInfoAuth": ospfVirtIntfInfoAuth,
       "ospfVirtIntfInfoEvents": ospfVirtIntfInfoEvents,
       "ospfVirtIntfInfoNbr": ospfVirtIntfInfoNbr,
       "ospfVirtIntfInfoNbrState": ospfVirtIntfInfoNbrState,
       "ospfVirtIntfInfoAreaId": ospfVirtIntfInfoAreaId,
       "ospfIfNbrTable": ospfIfNbrTable,
       "ospfIfNbrEntry": ospfIfNbrEntry,
       "ospfIfNbrIntfIndex": ospfIfNbrIntfIndex,
       "ospfIfNbrIpAddr": ospfIfNbrIpAddr,
       "ospfIfNbrPriority": ospfIfNbrPriority,
       "ospfIfNbrState": ospfIfNbrState,
       "ospfIfNbrDesignatedRtr": ospfIfNbrDesignatedRtr,
       "ospfIfNbrBackupDesignatedRtr": ospfIfNbrBackupDesignatedRtr,
       "ospfIfNbrIpAddress": ospfIfNbrIpAddress,
       "ospfSumRangesInfoTable": ospfSumRangesInfoTable,
       "ospfSumRangesInfoEntry": ospfSumRangesInfoEntry,
       "ospfSumRangesInfoIndex": ospfSumRangesInfoIndex,
       "ospfSumRangesInfoArea": ospfSumRangesInfoArea,
       "ospfSumRangesInfoNetwork": ospfSumRangesInfoNetwork,
       "ospfSumRangesInfoMask": ospfSumRangesInfoMask,
       "ospfSumRangesInfoAction": ospfSumRangesInfoAction,
       "ospfSumRangesInfoListType": ospfSumRangesInfoListType,
       "ospfRoutesInfoTable": ospfRoutesInfoTable,
       "ospfRoutesInfoEntry": ospfRoutesInfoEntry,
       "ospfRoutesInfoIndex": ospfRoutesInfoIndex,
       "ospfRoutesInfoDestination": ospfRoutesInfoDestination,
       "ospfRoutesInfoMask": ospfRoutesInfoMask,
       "ospfRoutesInfoVia": ospfRoutesInfoVia,
       "ospfRoutesInfoType": ospfRoutesInfoType,
       "ospfLsdbInfoTable": ospfLsdbInfoTable,
       "ospfLsdbInfoEntry": ospfLsdbInfoEntry,
       "ospfLsdbInfoIndex": ospfLsdbInfoIndex,
       "ospfLsdbInfoAreaId": ospfLsdbInfoAreaId,
       "ospfLsdbInfoType": ospfLsdbInfoType,
       "ospfLsdbInfoLsid": ospfLsdbInfoLsid,
       "ospfLsdbInfoRouterId": ospfLsdbInfoRouterId,
       "ospfLsdbInfoSequence": ospfLsdbInfoSequence,
       "ospfLsdbInfoAge": ospfLsdbInfoAge,
       "ospfLsdbInfoChecksum": ospfLsdbInfoChecksum,
       "ospfLsdbInfoAdvertisement": ospfLsdbInfoAdvertisement,
       "ospfExtLsdbInfoTable": ospfExtLsdbInfoTable,
       "ospfExtLsdbInfoEntry": ospfExtLsdbInfoEntry,
       "ospfExtLsdbInfoIndex": ospfExtLsdbInfoIndex,
       "ospfExtLsdbInfoType": ospfExtLsdbInfoType,
       "ospfExtLsdbInfoLsid": ospfExtLsdbInfoLsid,
       "ospfExtLsdbInfoRouterId": ospfExtLsdbInfoRouterId,
       "ospfExtLsdbInfoSequence": ospfExtLsdbInfoSequence,
       "ospfExtLsdbInfoAge": ospfExtLsdbInfoAge,
       "ospfExtLsdbInfoChecksum": ospfExtLsdbInfoChecksum,
       "ospfExtLsdbInfoAdvertisement": ospfExtLsdbInfoAdvertisement,
       "igmpInfo": igmpInfo,
       "igmpInfoTable": igmpInfoTable,
       "igmpInfoEntry": igmpInfoEntry,
       "igmpInfoIndex": igmpInfoIndex,
       "igmpInfoGroupId": igmpInfoGroupId,
       "igmpInfoVlanId": igmpInfoVlanId,
       "igmpInfoVersion": igmpInfoVersion,
       "igmpInfoPortNum": igmpInfoPortNum,
       "igmpInfoExpires": igmpInfoExpires,
       "igmpInfoMode": igmpInfoMode,
       "igmpInfoSourceIp": igmpInfoSourceIp,
       "igmpInfoFwd": igmpInfoFwd,
       "igmpMrtrInfoTable": igmpMrtrInfoTable,
       "igmpMrtrInfoEntry": igmpMrtrInfoEntry,
       "igmpMrtrInfoIndex": igmpMrtrInfoIndex,
       "igmpMrtrInfoVlanId": igmpMrtrInfoVlanId,
       "igmpMrtrInfoPortId": igmpMrtrInfoPortId,
       "igmpMrtrInfoVersion": igmpMrtrInfoVersion,
       "igmpMrtrInfoExpires": igmpMrtrInfoExpires,
       "igmpMrtrInfoMrt": igmpMrtrInfoMrt,
       "igmpMrtrInfoQrv": igmpMrtrInfoQrv,
       "igmpMrtrInfoQqic": igmpMrtrInfoQqic,
       "rip2Info": rip2Info,
       "rip2GeneralInfo": rip2GeneralInfo,
       "ripInfoState": ripInfoState,
       "ripInfoUpdatePeriod": ripInfoUpdatePeriod,
       "rip2InfoIntfTable": rip2InfoIntfTable,
       "ripInfoIntfEntry": ripInfoIntfEntry,
       "ripInfoIntfIndex": ripInfoIntfIndex,
       "ripInfoIntfVersion": ripInfoIntfVersion,
       "ripInfoIntfAddress": ripInfoIntfAddress,
       "ripInfoIntfState": ripInfoIntfState,
       "ripInfoIntfListen": ripInfoIntfListen,
       "ripInfoIntfTrigUpdate": ripInfoIntfTrigUpdate,
       "ripInfoIntfMcastUpdate": ripInfoIntfMcastUpdate,
       "ripInfoIntfPoisonReverse": ripInfoIntfPoisonReverse,
       "ripInfoIntfSupply": ripInfoIntfSupply,
       "ripInfoIntfMetric": ripInfoIntfMetric,
       "ripInfoIntfAuth": ripInfoIntfAuth,
       "ripInfoIntfKey": ripInfoIntfKey,
       "ripInfoIntfDefault": ripInfoIntfDefault,
       "ipInfo": ipInfo,
       "ipInfoRouterID": ipInfoRouterID,
       "ipIntfInfoTable": ipIntfInfoTable,
       "intfInfoEntry": intfInfoEntry,
       "intfInfoIndex": intfInfoIndex,
       "intfInfoAddr": intfInfoAddr,
       "intfInfoNetMask": intfInfoNetMask,
       "intfInfoBcastAddr": intfInfoBcastAddr,
       "intfInfoVlan": intfInfoVlan,
       "intfInfoStatus": intfInfoStatus,
       "gatewayInfoTable": gatewayInfoTable,
       "gatewayInfoEntry": gatewayInfoEntry,
       "gatewayInfoIndex": gatewayInfoIndex,
       "gatewayInfoAddr": gatewayInfoAddr,
       "gatewayInfoVlan": gatewayInfoVlan,
       "gatewayInfoStatus": gatewayInfoStatus,
       "ipInfoBootpRelayState": ipInfoBootpRelayState,
       "ipInfoBootpRelayAddr": ipInfoBootpRelayAddr,
       "ipInfoBootpRelayAddr2": ipInfoBootpRelayAddr2,
       "ipInfoFwdState": ipInfoFwdState,
       "ipInfoFwdDirectedBcast": ipInfoFwdDirectedBcast,
       "ipInfoNwfTable": ipInfoNwfTable,
       "ipInfoNwfEntry": ipInfoNwfEntry,
       "ipInfoNwfIndex": ipInfoNwfIndex,
       "ipInfoNwfAddr": ipInfoNwfAddr,
       "ipInfoNwfMask": ipInfoNwfMask,
       "ipInfoNwfState": ipInfoNwfState,
       "ipInfoRmapTable": ipInfoRmapTable,
       "ipInfoRmapEntry": ipInfoRmapEntry,
       "ipInfoRmapIndex": ipInfoRmapIndex,
       "ipInfoRmapLp": ipInfoRmapLp,
       "ipInfoRmapMetric": ipInfoRmapMetric,
       "ipInfoRmapPrec": ipInfoRmapPrec,
       "ipInfoRmapWeight": ipInfoRmapWeight,
       "ipInfoRmapState": ipInfoRmapState,
       "ipInfoRmapAp": ipInfoRmapAp,
       "ipInfoRmapMetricType": ipInfoRmapMetricType,
       "ipOspfInfo": ipOspfInfo,
       "ipOspfInfoState": ipOspfInfoState,
       "ipOspfInfoDefaultRouteMetric": ipOspfInfoDefaultRouteMetric,
       "ipOspfInfoDefaultRouteMetricType": ipOspfInfoDefaultRouteMetricType,
       "ipOspfInfoRouterID": ipOspfInfoRouterID,
       "ipOspfInfoLsdbLimit": ipOspfInfoLsdbLimit,
       "ipOspfAreaInfoTable": ipOspfAreaInfoTable,
       "ipOspfAreaInfoEntry": ipOspfAreaInfoEntry,
       "ipOspfAreaInfoIndex": ipOspfAreaInfoIndex,
       "ipOspfAreaInfoId": ipOspfAreaInfoId,
       "ipOspfAreaInfoSpfInterval": ipOspfAreaInfoSpfInterval,
       "ipOspfAreaInfoAuthType": ipOspfAreaInfoAuthType,
       "ipOspfAreaInfoType": ipOspfAreaInfoType,
       "ipOspfAreaInfoMetric": ipOspfAreaInfoMetric,
       "ipOspfAreaInfoStatus": ipOspfAreaInfoStatus,
       "ipOspfRangeInfoTable": ipOspfRangeInfoTable,
       "ipOspfRangeInfoEntry": ipOspfRangeInfoEntry,
       "ipOspfRangeInfoIndex": ipOspfRangeInfoIndex,
       "ipOspfRangeInfoAddr": ipOspfRangeInfoAddr,
       "ipOspfRangeInfoMask": ipOspfRangeInfoMask,
       "ipOspfRangeInfoAreaIndex": ipOspfRangeInfoAreaIndex,
       "ipOspfRangeInfoHideState": ipOspfRangeInfoHideState,
       "ipOspfRangeInfoState": ipOspfRangeInfoState,
       "ipOspfIntfInfoTable": ipOspfIntfInfoTable,
       "ipOspfIntfInfoEntry": ipOspfIntfInfoEntry,
       "ipOspfIntfInfoIndex": ipOspfIntfInfoIndex,
       "ipOspfIntfInfoId": ipOspfIntfInfoId,
       "ipOspfIntfInfoArea": ipOspfIntfInfoArea,
       "ipOspfIntfInfoMdkey": ipOspfIntfInfoMdkey,
       "ipOspfIntfInfoCost": ipOspfIntfInfoCost,
       "ipOspfIntfInfoPrio": ipOspfIntfInfoPrio,
       "ipOspfIntfInfoHello": ipOspfIntfInfoHello,
       "ipOspfIntfInfoDead": ipOspfIntfInfoDead,
       "ipOspfIntfInfoTrans": ipOspfIntfInfoTrans,
       "ipOspfIntfInfoRetra": ipOspfIntfInfoRetra,
       "ipOspfIntfInfoAuthKey": ipOspfIntfInfoAuthKey,
       "ipOspfIntfInfoStatus": ipOspfIntfInfoStatus,
       "ipOspfVirtIntfInfoTable": ipOspfVirtIntfInfoTable,
       "ipOspfVirtIntfInfoEntry": ipOspfVirtIntfInfoEntry,
       "ipOspfVirtIntfInfoIndex": ipOspfVirtIntfInfoIndex,
       "ipOspfVirtIntfInfoAreaId": ipOspfVirtIntfInfoAreaId,
       "ipOspfVirtIntfInfoNbr": ipOspfVirtIntfInfoNbr,
       "ipOspfVirtIntfInfoMdkey": ipOspfVirtIntfInfoMdkey,
       "ipOspfVirtIntfInfoHello": ipOspfVirtIntfInfoHello,
       "ipOspfVirtIntfInfoDead": ipOspfVirtIntfInfoDead,
       "ipOspfVirtIntfInfoTrans": ipOspfVirtIntfInfoTrans,
       "ipOspfVirtIntfInfoRetra": ipOspfVirtIntfInfoRetra,
       "ipOspfVirtIntfInfoAuthKey": ipOspfVirtIntfInfoAuthKey,
       "ipOspfVirtIntfInfoStatus": ipOspfVirtIntfInfoStatus,
       "ipOspfHostInfoTable": ipOspfHostInfoTable,
       "ipOspfHostInfoEntry": ipOspfHostInfoEntry,
       "ipOspfHostInfoIndex": ipOspfHostInfoIndex,
       "ipOspfHostInfoIpAddr": ipOspfHostInfoIpAddr,
       "ipOspfHostInfoAreaIndex": ipOspfHostInfoAreaIndex,
       "ipOspfHostInfoCost": ipOspfHostInfoCost,
       "ipOspfHostInfoState": ipOspfHostInfoState,
       "ipOspfRedistributeInfo": ipOspfRedistributeInfo,
       "ipOspfRedistributeStaticInfo": ipOspfRedistributeStaticInfo,
       "ipOspfRedistributeStaticInfoMetric": ipOspfRedistributeStaticInfoMetric,
       "ipOspfRedistributeStaticInfoMetricType": ipOspfRedistributeStaticInfoMetricType,
       "ipOspfRedistributeStaticInfoOutRmapList": ipOspfRedistributeStaticInfoOutRmapList,
       "ipOspfRedistributeFixedInfo": ipOspfRedistributeFixedInfo,
       "ipOspfRedistributeFixedInfoMetric": ipOspfRedistributeFixedInfoMetric,
       "ipOspfRedistributeFixedInfoMetricType": ipOspfRedistributeFixedInfoMetricType,
       "ipOspfRedistributeFixedInfoOutRmapList": ipOspfRedistributeFixedInfoOutRmapList,
       "ipOspfRedistributeRipInfo": ipOspfRedistributeRipInfo,
       "ipOspfRedistributeRipInfoMetric": ipOspfRedistributeRipInfoMetric,
       "ipOspfRedistributeRipInfoMetricType": ipOspfRedistributeRipInfoMetricType,
       "ipOspfRedistributeRipInfoOutRmapList": ipOspfRedistributeRipInfoOutRmapList,
       "ipOspfMd5keyInfoTable": ipOspfMd5keyInfoTable,
       "ipOspfMd5keyInfoEntry": ipOspfMd5keyInfoEntry,
       "ipOspfMd5keyInfoIndex": ipOspfMd5keyInfoIndex,
       "ipOspfMd5keyInfoKey": ipOspfMd5keyInfoKey,
       "layer3Oper": layer3Oper,
       "vrrpOper": vrrpOper,
       "vrrpOperVirtRtrTable": vrrpOperVirtRtrTable,
       "vrrpOperVirtRtrEntry": vrrpOperVirtRtrEntry,
       "vrrpOperVirtRtrIndex": vrrpOperVirtRtrIndex,
       "vrrpOperVirtRtrBackup": vrrpOperVirtRtrBackup,
       "vrrpOperVirtRtrGroupBackup": vrrpOperVirtRtrGroupBackup,
       "bntTraps": bntTraps,
       "bntSwDefGwUp": bntSwDefGwUp,
       "bntSwDefGwDown": bntSwDefGwDown,
       "bntSwDefGwInService": bntSwDefGwInService,
       "bntSwDefGwNotInService": bntSwDefGwNotInService,
       "bntSwLoginFailure": bntSwLoginFailure,
       "bntSwTempExceedThreshold": bntSwTempExceedThreshold,
       "bntSwApplyComplete": bntSwApplyComplete,
       "bntSwSaveComplete": bntSwSaveComplete,
       "bntSwFwDownloadSucess": bntSwFwDownloadSucess,
       "bntSwFwDownloadFailure": bntSwFwDownloadFailure,
       "bntSwTempReturnThreshold": bntSwTempReturnThreshold,
       "bntSwUfdfoLtMFailure": bntSwUfdfoLtMFailure,
       "bntSwUfdfoLtMUP": bntSwUfdfoLtMUP,
       "bntSwUfdfoGlobalEna": bntSwUfdfoGlobalEna,
       "bntSwUfdfoGlobalDis": bntSwUfdfoGlobalDis,
       "bntSwUfdfoLtDAutoEna": bntSwUfdfoLtDAutoEna,
       "bntSwUfdfoLtDAutoDis": bntSwUfdfoLtDAutoDis,
       "bntSwStgNewRoot": bntSwStgNewRoot,
       "bntSwCistNewRoot": bntSwCistNewRoot,
       "bntSwStgTopologyChanged": bntSwStgTopologyChanged,
       "bntSwCistTopologyChanged": bntSwCistTopologyChanged,
       "bntSFPInserted": bntSFPInserted,
       "bntSFPRemoved": bntSFPRemoved,
       "bntSwTrapDisplayString": bntSwTrapDisplayString,
       "qos": qos,
       "qosConfigs": qosConfigs,
       "qos8021p": qos8021p,
       "qosCurCfgPortPriorityTable": qosCurCfgPortPriorityTable,
       "qosCurCfgPortPriorityEntry": qosCurCfgPortPriorityEntry,
       "qosCurCfgPortIndex": qosCurCfgPortIndex,
       "qosCurCfgPortPriority": qosCurCfgPortPriority,
       "qosNewCfgPortPriorityTable": qosNewCfgPortPriorityTable,
       "qosNewCfgPortPriorityEntry": qosNewCfgPortPriorityEntry,
       "qosNewCfgPortIndex": qosNewCfgPortIndex,
       "qosNewCfgPortPriority": qosNewCfgPortPriority,
       "qosCurCfgPriorityCoSTable": qosCurCfgPriorityCoSTable,
       "qosCurCfgPriorityCoSEntry": qosCurCfgPriorityCoSEntry,
       "qosCurCfgPriorityIndex": qosCurCfgPriorityIndex,
       "qosCurCfgPriorityCoSq": qosCurCfgPriorityCoSq,
       "qosNewCfgPriorityCoSTable": qosNewCfgPriorityCoSTable,
       "qosNewCfgPriorityCoSEntry": qosNewCfgPriorityCoSEntry,
       "qosNewCfgPriorityIndex": qosNewCfgPriorityIndex,
       "qosNewCfgPriorityCoSq": qosNewCfgPriorityCoSq,
       "qosCurCfgCosWeightTable": qosCurCfgCosWeightTable,
       "qosCurCfgCosWeightEntry": qosCurCfgCosWeightEntry,
       "qosCurCfgCosIndex": qosCurCfgCosIndex,
       "qosCurCfgCosWeight": qosCurCfgCosWeight,
       "qosNewCfgCosWeightTable": qosNewCfgCosWeightTable,
       "qosNewCfgCosWeightEntry": qosNewCfgCosWeightEntry,
       "qosNewCfgCosIndex": qosNewCfgCosIndex,
       "qosNewCfgCosWeight": qosNewCfgCosWeight,
       "qosCurCfgCosNum": qosCurCfgCosNum,
       "qosNewCfgCosNum": qosNewCfgCosNum,
       "qosDefaultCfg": qosDefaultCfg,
       "qosStats": qosStats,
       "qosInfo": qosInfo,
       "qosOper": qosOper,
       "acl": acl,
       "acConfig": acConfig,
       "acList": acList,
       "aclCurCfgTable": aclCurCfgTable,
       "aclCurCfgEntry": aclCurCfgEntry,
       "aclCurCfgIndex": aclCurCfgIndex,
       "aclCurCfgGroup": aclCurCfgGroup,
       "aclCurCfgFilterAction": aclCurCfgFilterAction,
       "aclCurCfgFilterActionSetPrio": aclCurCfgFilterActionSetPrio,
       "aclCurCfgEthFmt": aclCurCfgEthFmt,
       "aclCurCfgTagFmt": aclCurCfgTagFmt,
       "aclCurCfgIPFmt": aclCurCfgIPFmt,
       "aclCurCfgSrcMACAddress": aclCurCfgSrcMACAddress,
       "aclCurCfgSrcMACMask": aclCurCfgSrcMACMask,
       "aclCurCfgDstMACAddress": aclCurCfgDstMACAddress,
       "aclCurCfgDstMACMask": aclCurCfgDstMACMask,
       "aclCurCfgEthernetTypeName": aclCurCfgEthernetTypeName,
       "aclCurCfgEthernetTypeValue": aclCurCfgEthernetTypeValue,
       "aclCurCfgVLanId": aclCurCfgVLanId,
       "aclCurCfgVLanMask": aclCurCfgVLanMask,
       "aclCurCfg8021pPriority": aclCurCfg8021pPriority,
       "aclCurCfgTypeOfService": aclCurCfgTypeOfService,
       "aclCurCfgProtocol": aclCurCfgProtocol,
       "aclCurCfgSrcIPAddress": aclCurCfgSrcIPAddress,
       "aclCurCfgSrcIPMask": aclCurCfgSrcIPMask,
       "aclCurCfgDstIPAddress": aclCurCfgDstIPAddress,
       "aclCurCfgDstIPMask": aclCurCfgDstIPMask,
       "aclCurCfgSrcPort": aclCurCfgSrcPort,
       "aclCurCfgSrcPortMask": aclCurCfgSrcPortMask,
       "aclCurCfgDstPort": aclCurCfgDstPort,
       "aclCurCfgDstPortMask": aclCurCfgDstPortMask,
       "aclCurCfgTCPFlags": aclCurCfgTCPFlags,
       "aclCurCfgEgressPorts": aclCurCfgEgressPorts,
       "aclCurCfgStatistics": aclCurCfgStatistics,
       "aclCurCfgTCPFlagsMask": aclCurCfgTCPFlagsMask,
       "aclCurCfgMeterAction": aclCurCfgMeterAction,
       "aclCurCfgMeterEnable": aclCurCfgMeterEnable,
       "aclCurCfgKbitsSec": aclCurCfgKbitsSec,
       "aclCurCfgKbitsBurst": aclCurCfgKbitsBurst,
       "aclCurCfgInprofUser": aclCurCfgInprofUser,
       "aclCurCfgInprofDscp": aclCurCfgInprofDscp,
       "aclCurCfgInprofTos": aclCurCfgInprofTos,
       "aclCurCfgOutprofDscp": aclCurCfgOutprofDscp,
       "aclCurCfgInprofUserEnable": aclCurCfgInprofUserEnable,
       "aclCurCfgInprofDscpEnable": aclCurCfgInprofDscpEnable,
       "aclCurCfgOutprofDscpEnable": aclCurCfgOutprofDscpEnable,
       "aclNewCfgTable": aclNewCfgTable,
       "aclNewCfgEntry": aclNewCfgEntry,
       "aclNewCfgIndex": aclNewCfgIndex,
       "aclNewCfgGroup": aclNewCfgGroup,
       "aclNewCfgFilterAction": aclNewCfgFilterAction,
       "aclNewCfgFilterActionSetPrio": aclNewCfgFilterActionSetPrio,
       "aclNewCfgEthFmt": aclNewCfgEthFmt,
       "aclNewCfgTagFmt": aclNewCfgTagFmt,
       "aclNewCfgIPFmt": aclNewCfgIPFmt,
       "aclNewCfgSrcMACAddress": aclNewCfgSrcMACAddress,
       "aclNewCfgSrcMACMask": aclNewCfgSrcMACMask,
       "aclNewCfgDstMACAddress": aclNewCfgDstMACAddress,
       "aclNewCfgDstMACMask": aclNewCfgDstMACMask,
       "aclNewCfgEthernetTypeName": aclNewCfgEthernetTypeName,
       "aclNewCfgEthernetTypeValue": aclNewCfgEthernetTypeValue,
       "aclNewCfgVLanId": aclNewCfgVLanId,
       "aclNewCfgVLanMask": aclNewCfgVLanMask,
       "aclNewCfg8021pPriority": aclNewCfg8021pPriority,
       "aclNewCfgTypeOfService": aclNewCfgTypeOfService,
       "aclNewCfgProtocol": aclNewCfgProtocol,
       "aclNewCfgSrcIPAddress": aclNewCfgSrcIPAddress,
       "aclNewCfgSrcIPMask": aclNewCfgSrcIPMask,
       "aclNewCfgDstIPAddress": aclNewCfgDstIPAddress,
       "aclNewCfgDstIPMask": aclNewCfgDstIPMask,
       "aclNewCfgSrcPort": aclNewCfgSrcPort,
       "aclNewCfgSrcPortMask": aclNewCfgSrcPortMask,
       "aclNewCfgDstPort": aclNewCfgDstPort,
       "aclNewCfgDstPortMask": aclNewCfgDstPortMask,
       "aclNewCfgTCPFlags": aclNewCfgTCPFlags,
       "aclNewCfgEgressPorts": aclNewCfgEgressPorts,
       "aclNewCfgStatistics": aclNewCfgStatistics,
       "aclNewCfgAddEgressPort": aclNewCfgAddEgressPort,
       "aclNewCfgRemoveEgressPort": aclNewCfgRemoveEgressPort,
       "aclNewCfgDelete": aclNewCfgDelete,
       "aclNewCfgTCPFlagsMask": aclNewCfgTCPFlagsMask,
       "aclNewCfgMeterAction": aclNewCfgMeterAction,
       "aclNewCfgMeterEnable": aclNewCfgMeterEnable,
       "aclNewCfgKbitsSec": aclNewCfgKbitsSec,
       "aclNewCfgKbitsBurst": aclNewCfgKbitsBurst,
       "aclNewCfgInprofUser": aclNewCfgInprofUser,
       "aclNewCfgInprofDscp": aclNewCfgInprofDscp,
       "aclNewCfgInprofTos": aclNewCfgInprofTos,
       "aclNewCfgOutprofDscp": aclNewCfgOutprofDscp,
       "aclNewCfgInprofUserEnable": aclNewCfgInprofUserEnable,
       "aclNewCfgInprofDscpEnable": aclNewCfgInprofDscpEnable,
       "aclNewCfgOutprofDscpEnable": aclNewCfgOutprofDscpEnable,
       "aclNewCfgReset": aclNewCfgReset,
       "aclNewCfgEthernetReset": aclNewCfgEthernetReset,
       "aclNewCfgIpv4Reset": aclNewCfgIpv4Reset,
       "aclNewCfgTcpudpReset": aclNewCfgTcpudpReset,
       "aclNewCfgMeterReset": aclNewCfgMeterReset,
       "aclNewCfgRemarkReset": aclNewCfgRemarkReset,
       "aclNewCfgRemarkInprofReset": aclNewCfgRemarkInprofReset,
       "aclNewCfgRemarkOutprofReset": aclNewCfgRemarkOutprofReset,
       "aclNewCfgPktfmtReset": aclNewCfgPktfmtReset,
       "aclGroup": aclGroup,
       "aclGroupCurCfgTable": aclGroupCurCfgTable,
       "aclGroupCurCfgEntry": aclGroupCurCfgEntry,
       "aclGroupCurCfgIndex": aclGroupCurCfgIndex,
       "aclGroupCurCfgMemberAcls": aclGroupCurCfgMemberAcls,
       "aclGroupNewCfgTable": aclGroupNewCfgTable,
       "aclGroupNewCfgEntry": aclGroupNewCfgEntry,
       "aclGroupNewCfgIndex": aclGroupNewCfgIndex,
       "aclGroupNewCfgMemberAcls": aclGroupNewCfgMemberAcls,
       "aclGroupNewCfgAddAcl": aclGroupNewCfgAddAcl,
       "aclGroupNewCfgRemoveAcl": aclGroupNewCfgRemoveAcl,
       "aclGroupNewCfgDelete": aclGroupNewCfgDelete,
       "aclCfg": aclCfg,
       "aclCurCfgPortTable": aclCurCfgPortTable,
       "aclCurCfgPortTableEntry": aclCurCfgPortTableEntry,
       "aclCurCfgPortIndex": aclCurCfgPortIndex,
       "aclCurCfgPortAclBmap": aclCurCfgPortAclBmap,
       "aclCurCfgPortAclGrpBmap": aclCurCfgPortAclGrpBmap,
       "aclNewCfgPortTable": aclNewCfgPortTable,
       "aclNewCfgPortTableEntry": aclNewCfgPortTableEntry,
       "aclNewCfgPortIndex": aclNewCfgPortIndex,
       "aclNewCfgPortAddAcl": aclNewCfgPortAddAcl,
       "aclNewCfgPortAddAclGrp": aclNewCfgPortAddAclGrp,
       "aclNewCfgPortRemoveAcl": aclNewCfgPortRemoveAcl,
       "aclNewCfgPortRemoveAclGrp": aclNewCfgPortRemoveAclGrp,
       "aclNewCfgPortAclBmap": aclNewCfgPortAclBmap,
       "aclNewCfgPortAclGrpBmap": aclNewCfgPortAclGrpBmap}
)
